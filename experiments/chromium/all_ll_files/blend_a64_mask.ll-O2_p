; ModuleID = '../../third_party/libaom/source/libaom/aom_dsp/blend_a64_mask.c'
source_filename = "../../third_party/libaom/source/libaom/aom_dsp/blend_a64_mask.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ConvolveParams = type { i32, i16*, i32, i32, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @aom_lowbd_blend_a64_d16_mask_c(i8* nocapture, i32, i16* nocapture readonly, i32, i16* nocapture readonly, i32, i8* nocapture readonly, i32, i32, i32, i32, i32, %struct.ConvolveParams* nocapture readonly) local_unnamed_addr #0 {
  %14 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %12, i64 0, i32 3
  %15 = load i32, i32* %14, align 4
  %16 = sub nsw i32 22, %15
  %17 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %12, i64 0, i32 4
  %18 = load i32, i32* %17, align 8
  %19 = sub i32 %16, %18
  %20 = shl i32 1, %19
  %21 = add nsw i32 %19, -1
  %22 = shl i32 1, %21
  %23 = add nsw i32 %22, %20
  %24 = sub nsw i32 14, %15
  %25 = sub i32 %24, %18
  %26 = icmp eq i32 %11, 0
  %27 = or i32 %11, %10
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %196

29:                                               ; preds = %13
  %30 = icmp sgt i32 %9, 0
  br i1 %30, label %31, label %551

31:                                               ; preds = %29
  %32 = icmp sgt i32 %8, 0
  %33 = shl i32 1, %25
  %34 = ashr i32 %33, 1
  %35 = sub i32 %34, %23
  %36 = zext i32 %8 to i64
  %37 = add nsw i64 %36, -1
  %38 = getelementptr i8, i8* %0, i64 %36
  %39 = getelementptr i8, i8* %6, i64 %36
  %40 = getelementptr i16, i16* %2, i64 %36
  %41 = getelementptr i16, i16* %4, i64 %36
  %42 = icmp ult i32 %8, 8
  %43 = trunc i64 %37 to i32
  %44 = icmp ugt i64 %37, 4294967295
  %45 = trunc i64 %37 to i32
  %46 = icmp ugt i64 %37, 4294967295
  %47 = trunc i64 %37 to i32
  %48 = icmp ugt i64 %37, 4294967295
  %49 = trunc i64 %37 to i32
  %50 = icmp ugt i64 %37, 4294967295
  %51 = and i64 %36, 4294967288
  %52 = insertelement <8 x i32> undef, i32 %35, i32 0
  %53 = shufflevector <8 x i32> %52, <8 x i32> undef, <8 x i32> zeroinitializer
  %54 = insertelement <8 x i32> undef, i32 %25, i32 0
  %55 = shufflevector <8 x i32> %54, <8 x i32> undef, <8 x i32> zeroinitializer
  %56 = icmp eq i64 %51, %36
  br label %57

57:                                               ; preds = %193, %31
  %58 = phi i32 [ 0, %31 ], [ %194, %193 ]
  %59 = mul i32 %58, %1
  %60 = zext i32 %59 to i64
  %61 = getelementptr i8, i8* %0, i64 %60
  %62 = getelementptr i8, i8* %38, i64 %60
  %63 = mul i32 %58, %7
  %64 = zext i32 %63 to i64
  %65 = getelementptr i8, i8* %6, i64 %64
  %66 = getelementptr i8, i8* %39, i64 %64
  %67 = mul i32 %58, %3
  %68 = zext i32 %67 to i64
  %69 = getelementptr i16, i16* %2, i64 %68
  %70 = bitcast i16* %69 to i8*
  %71 = getelementptr i16, i16* %40, i64 %68
  %72 = bitcast i16* %71 to i8*
  %73 = mul i32 %58, %5
  %74 = zext i32 %73 to i64
  %75 = getelementptr i16, i16* %4, i64 %74
  %76 = bitcast i16* %75 to i8*
  %77 = getelementptr i16, i16* %41, i64 %74
  %78 = bitcast i16* %77 to i8*
  %79 = mul i32 %58, %1
  %80 = mul i32 %58, %7
  %81 = mul i32 %58, %3
  %82 = mul i32 %58, %5
  br i1 %32, label %83, label %193

83:                                               ; preds = %57
  %84 = mul i32 %58, %7
  %85 = mul i32 %58, %3
  %86 = mul i32 %58, %5
  %87 = mul i32 %58, %1
  br i1 %42, label %156, label %88

88:                                               ; preds = %83
  %89 = xor i32 %79, -1
  %90 = icmp ult i32 %89, %43
  %91 = or i1 %90, %44
  %92 = xor i32 %80, -1
  %93 = icmp ult i32 %92, %45
  %94 = or i1 %93, %46
  %95 = or i1 %91, %94
  %96 = xor i32 %81, -1
  %97 = icmp ult i32 %96, %47
  %98 = or i1 %97, %48
  %99 = or i1 %95, %98
  %100 = xor i32 %82, -1
  %101 = icmp ult i32 %100, %49
  %102 = or i1 %101, %50
  %103 = or i1 %99, %102
  br i1 %103, label %156, label %104

104:                                              ; preds = %88
  %105 = icmp ult i8* %61, %66
  %106 = icmp ult i8* %65, %62
  %107 = and i1 %105, %106
  %108 = icmp ult i8* %61, %72
  %109 = icmp ugt i8* %62, %70
  %110 = and i1 %108, %109
  %111 = or i1 %107, %110
  %112 = icmp ult i8* %61, %78
  %113 = icmp ugt i8* %62, %76
  %114 = and i1 %112, %113
  %115 = or i1 %111, %114
  br i1 %115, label %156, label %116

116:                                              ; preds = %104, %116
  %117 = phi i64 [ %153, %116 ], [ 0, %104 ]
  %118 = trunc i64 %117 to i32
  %119 = add i32 %84, %118
  %120 = zext i32 %119 to i64
  %121 = getelementptr inbounds i8, i8* %6, i64 %120
  %122 = bitcast i8* %121 to <8 x i8>*
  %123 = load <8 x i8>, <8 x i8>* %122, align 1, !alias.scope !2
  %124 = zext <8 x i8> %123 to <8 x i32>
  %125 = add i32 %85, %118
  %126 = zext i32 %125 to i64
  %127 = getelementptr inbounds i16, i16* %2, i64 %126
  %128 = bitcast i16* %127 to <8 x i16>*
  %129 = load <8 x i16>, <8 x i16>* %128, align 2, !alias.scope !5
  %130 = zext <8 x i16> %129 to <8 x i32>
  %131 = mul nuw nsw <8 x i32> %130, %124
  %132 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %124
  %133 = add i32 %86, %118
  %134 = zext i32 %133 to i64
  %135 = getelementptr inbounds i16, i16* %4, i64 %134
  %136 = bitcast i16* %135 to <8 x i16>*
  %137 = load <8 x i16>, <8 x i16>* %136, align 2, !alias.scope !7
  %138 = zext <8 x i16> %137 to <8 x i32>
  %139 = mul nsw <8 x i32> %132, %138
  %140 = add nsw <8 x i32> %139, %131
  %141 = ashr <8 x i32> %140, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %142 = add <8 x i32> %53, %141
  %143 = ashr <8 x i32> %142, %55
  %144 = icmp sgt <8 x i32> %143, zeroinitializer
  %145 = select <8 x i1> %144, <8 x i32> %143, <8 x i32> zeroinitializer
  %146 = icmp slt <8 x i32> %145, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %147 = select <8 x i1> %146, <8 x i32> %145, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %148 = trunc <8 x i32> %147 to <8 x i8>
  %149 = add i32 %87, %118
  %150 = zext i32 %149 to i64
  %151 = getelementptr inbounds i8, i8* %0, i64 %150
  %152 = bitcast i8* %151 to <8 x i8>*
  store <8 x i8> %148, <8 x i8>* %152, align 1, !alias.scope !9, !noalias !11
  %153 = add i64 %117, 8
  %154 = icmp eq i64 %153, %51
  br i1 %154, label %155, label %116, !llvm.loop !12

155:                                              ; preds = %116
  br i1 %56, label %193, label %156

156:                                              ; preds = %155, %104, %88, %83
  %157 = phi i64 [ 0, %104 ], [ 0, %88 ], [ 0, %83 ], [ %51, %155 ]
  br label %158

158:                                              ; preds = %156, %158
  %159 = phi i64 [ %191, %158 ], [ %157, %156 ]
  %160 = trunc i64 %159 to i32
  %161 = add i32 %84, %160
  %162 = zext i32 %161 to i64
  %163 = getelementptr inbounds i8, i8* %6, i64 %162
  %164 = load i8, i8* %163, align 1
  %165 = zext i8 %164 to i32
  %166 = add i32 %85, %160
  %167 = zext i32 %166 to i64
  %168 = getelementptr inbounds i16, i16* %2, i64 %167
  %169 = load i16, i16* %168, align 2
  %170 = zext i16 %169 to i32
  %171 = mul nuw nsw i32 %170, %165
  %172 = sub nsw i32 64, %165
  %173 = add i32 %86, %160
  %174 = zext i32 %173 to i64
  %175 = getelementptr inbounds i16, i16* %4, i64 %174
  %176 = load i16, i16* %175, align 2
  %177 = zext i16 %176 to i32
  %178 = mul nsw i32 %172, %177
  %179 = add nsw i32 %178, %171
  %180 = ashr i32 %179, 6
  %181 = add i32 %35, %180
  %182 = ashr i32 %181, %25
  %183 = icmp sgt i32 %182, 0
  %184 = select i1 %183, i32 %182, i32 0
  %185 = icmp slt i32 %184, 255
  %186 = select i1 %185, i32 %184, i32 255
  %187 = trunc i32 %186 to i8
  %188 = add i32 %87, %160
  %189 = zext i32 %188 to i64
  %190 = getelementptr inbounds i8, i8* %0, i64 %189
  store i8 %187, i8* %190, align 1
  %191 = add nuw nsw i64 %159, 1
  %192 = icmp eq i64 %191, %36
  br i1 %192, label %193, label %158, !llvm.loop !14

193:                                              ; preds = %158, %155, %57
  %194 = add nuw nsw i32 %58, 1
  %195 = icmp eq i32 %194, %9
  br i1 %195, label %551, label %57

196:                                              ; preds = %13
  %197 = icmp eq i32 %10, 1
  %198 = icmp eq i32 %11, 1
  %199 = and i1 %197, %198
  br i1 %199, label %200, label %280

200:                                              ; preds = %196
  %201 = icmp sgt i32 %9, 0
  br i1 %201, label %202, label %551

202:                                              ; preds = %200
  %203 = icmp sgt i32 %8, 0
  %204 = shl i32 1, %25
  %205 = ashr i32 %204, 1
  %206 = sub i32 %205, %23
  %207 = zext i32 %8 to i64
  br label %208

208:                                              ; preds = %277, %202
  %209 = phi i32 [ 0, %202 ], [ %278, %277 ]
  br i1 %203, label %210, label %277

210:                                              ; preds = %208
  %211 = shl nuw nsw i32 %209, 1
  %212 = mul i32 %211, %7
  %213 = or i32 %211, 1
  %214 = mul i32 %213, %7
  %215 = mul i32 %209, %3
  %216 = mul i32 %209, %5
  %217 = mul i32 %209, %1
  br label %218

218:                                              ; preds = %218, %210
  %219 = phi i64 [ 0, %210 ], [ %275, %218 ]
  %220 = shl nuw nsw i64 %219, 1
  %221 = trunc i64 %220 to i32
  %222 = add i32 %212, %221
  %223 = zext i32 %222 to i64
  %224 = getelementptr inbounds i8, i8* %6, i64 %223
  %225 = load i8, i8* %224, align 1
  %226 = zext i8 %225 to i32
  %227 = add i32 %214, %221
  %228 = zext i32 %227 to i64
  %229 = getelementptr inbounds i8, i8* %6, i64 %228
  %230 = load i8, i8* %229, align 1
  %231 = zext i8 %230 to i32
  %232 = trunc i64 %220 to i32
  %233 = or i32 %232, 1
  %234 = add i32 %233, %212
  %235 = zext i32 %234 to i64
  %236 = getelementptr inbounds i8, i8* %6, i64 %235
  %237 = load i8, i8* %236, align 1
  %238 = zext i8 %237 to i32
  %239 = add i32 %233, %214
  %240 = zext i32 %239 to i64
  %241 = getelementptr inbounds i8, i8* %6, i64 %240
  %242 = load i8, i8* %241, align 1
  %243 = zext i8 %242 to i32
  %244 = add nuw nsw i32 %226, 2
  %245 = add nuw nsw i32 %244, %231
  %246 = add nuw nsw i32 %245, %238
  %247 = add nuw nsw i32 %246, %243
  %248 = lshr i32 %247, 2
  %249 = trunc i64 %219 to i32
  %250 = add i32 %215, %249
  %251 = zext i32 %250 to i64
  %252 = getelementptr inbounds i16, i16* %2, i64 %251
  %253 = load i16, i16* %252, align 2
  %254 = zext i16 %253 to i32
  %255 = mul nuw nsw i32 %248, %254
  %256 = sub nsw i32 64, %248
  %257 = add i32 %216, %249
  %258 = zext i32 %257 to i64
  %259 = getelementptr inbounds i16, i16* %4, i64 %258
  %260 = load i16, i16* %259, align 2
  %261 = zext i16 %260 to i32
  %262 = mul nsw i32 %256, %261
  %263 = add nsw i32 %262, %255
  %264 = ashr i32 %263, 6
  %265 = add i32 %206, %264
  %266 = ashr i32 %265, %25
  %267 = icmp sgt i32 %266, 0
  %268 = select i1 %267, i32 %266, i32 0
  %269 = icmp slt i32 %268, 255
  %270 = select i1 %269, i32 %268, i32 255
  %271 = trunc i32 %270 to i8
  %272 = add i32 %217, %249
  %273 = zext i32 %272 to i64
  %274 = getelementptr inbounds i8, i8* %0, i64 %273
  store i8 %271, i8* %274, align 1
  %275 = add nuw nsw i64 %219, 1
  %276 = icmp eq i64 %275, %207
  br i1 %276, label %277, label %218

277:                                              ; preds = %218, %208
  %278 = add nuw nsw i32 %209, 1
  %279 = icmp eq i32 %278, %9
  br i1 %279, label %551, label %208

280:                                              ; preds = %196
  %281 = and i1 %197, %26
  %282 = icmp sgt i32 %9, 0
  br i1 %281, label %315, label %283

283:                                              ; preds = %280
  br i1 %282, label %284, label %551

284:                                              ; preds = %283
  %285 = icmp sgt i32 %8, 0
  %286 = shl i32 1, %25
  %287 = ashr i32 %286, 1
  %288 = sub i32 %287, %23
  %289 = zext i32 %8 to i64
  %290 = add nsw i64 %289, -1
  %291 = shl i32 %7, 1
  %292 = getelementptr i8, i8* %0, i64 %289
  %293 = shl i32 %7, 1
  %294 = getelementptr i8, i8* %6, i64 %289
  %295 = getelementptr i8, i8* %6, i64 %289
  %296 = getelementptr i16, i16* %2, i64 %289
  %297 = getelementptr i16, i16* %4, i64 %289
  %298 = icmp ult i32 %8, 8
  %299 = trunc i64 %290 to i32
  %300 = icmp ugt i64 %290, 4294967295
  %301 = trunc i64 %290 to i32
  %302 = icmp ugt i64 %290, 4294967295
  %303 = trunc i64 %290 to i32
  %304 = icmp ugt i64 %290, 4294967295
  %305 = trunc i64 %290 to i32
  %306 = icmp ugt i64 %290, 4294967295
  %307 = trunc i64 %290 to i32
  %308 = icmp ugt i64 %290, 4294967295
  %309 = and i64 %289, 4294967288
  %310 = insertelement <8 x i32> undef, i32 %288, i32 0
  %311 = shufflevector <8 x i32> %310, <8 x i32> undef, <8 x i32> zeroinitializer
  %312 = insertelement <8 x i32> undef, i32 %25, i32 0
  %313 = shufflevector <8 x i32> %312, <8 x i32> undef, <8 x i32> zeroinitializer
  %314 = icmp eq i64 %309, %289
  br label %379

315:                                              ; preds = %280
  br i1 %282, label %316, label %551

316:                                              ; preds = %315
  %317 = icmp sgt i32 %8, 0
  %318 = shl i32 1, %25
  %319 = ashr i32 %318, 1
  %320 = sub i32 %319, %23
  %321 = zext i32 %8 to i64
  br label %322

322:                                              ; preds = %376, %316
  %323 = phi i32 [ 0, %316 ], [ %377, %376 ]
  br i1 %317, label %324, label %376

324:                                              ; preds = %322
  %325 = mul i32 %323, %7
  %326 = mul i32 %323, %3
  %327 = mul i32 %323, %5
  %328 = mul i32 %323, %1
  br label %329

329:                                              ; preds = %329, %324
  %330 = phi i64 [ 0, %324 ], [ %374, %329 ]
  %331 = shl nuw nsw i64 %330, 1
  %332 = trunc i64 %331 to i32
  %333 = add i32 %325, %332
  %334 = zext i32 %333 to i64
  %335 = getelementptr inbounds i8, i8* %6, i64 %334
  %336 = load i8, i8* %335, align 1
  %337 = zext i8 %336 to i32
  %338 = trunc i64 %331 to i32
  %339 = or i32 %338, 1
  %340 = add i32 %339, %325
  %341 = zext i32 %340 to i64
  %342 = getelementptr inbounds i8, i8* %6, i64 %341
  %343 = load i8, i8* %342, align 1
  %344 = zext i8 %343 to i32
  %345 = add nuw nsw i32 %337, 1
  %346 = add nuw nsw i32 %345, %344
  %347 = lshr i32 %346, 1
  %348 = trunc i64 %330 to i32
  %349 = add i32 %326, %348
  %350 = zext i32 %349 to i64
  %351 = getelementptr inbounds i16, i16* %2, i64 %350
  %352 = load i16, i16* %351, align 2
  %353 = zext i16 %352 to i32
  %354 = mul nuw nsw i32 %347, %353
  %355 = sub nsw i32 64, %347
  %356 = add i32 %327, %348
  %357 = zext i32 %356 to i64
  %358 = getelementptr inbounds i16, i16* %4, i64 %357
  %359 = load i16, i16* %358, align 2
  %360 = zext i16 %359 to i32
  %361 = mul nsw i32 %355, %360
  %362 = add nsw i32 %361, %354
  %363 = ashr i32 %362, 6
  %364 = add i32 %320, %363
  %365 = ashr i32 %364, %25
  %366 = icmp sgt i32 %365, 0
  %367 = select i1 %366, i32 %365, i32 0
  %368 = icmp slt i32 %367, 255
  %369 = select i1 %368, i32 %367, i32 255
  %370 = trunc i32 %369 to i8
  %371 = add i32 %328, %348
  %372 = zext i32 %371 to i64
  %373 = getelementptr inbounds i8, i8* %0, i64 %372
  store i8 %370, i8* %373, align 1
  %374 = add nuw nsw i64 %330, 1
  %375 = icmp eq i64 %374, %321
  br i1 %375, label %376, label %329

376:                                              ; preds = %329, %322
  %377 = add nuw nsw i32 %323, 1
  %378 = icmp eq i32 %377, %9
  br i1 %378, label %551, label %322

379:                                              ; preds = %548, %284
  %380 = phi i32 [ 0, %284 ], [ %549, %548 ]
  %381 = mul i32 %380, %1
  %382 = zext i32 %381 to i64
  %383 = getelementptr i8, i8* %0, i64 %382
  %384 = getelementptr i8, i8* %292, i64 %382
  %385 = mul i32 %293, %380
  %386 = add i32 %385, %7
  %387 = zext i32 %386 to i64
  %388 = getelementptr i8, i8* %6, i64 %387
  %389 = getelementptr i8, i8* %294, i64 %387
  %390 = zext i32 %385 to i64
  %391 = getelementptr i8, i8* %6, i64 %390
  %392 = getelementptr i8, i8* %295, i64 %390
  %393 = mul i32 %380, %3
  %394 = zext i32 %393 to i64
  %395 = getelementptr i16, i16* %2, i64 %394
  %396 = bitcast i16* %395 to i8*
  %397 = getelementptr i16, i16* %296, i64 %394
  %398 = bitcast i16* %397 to i8*
  %399 = mul i32 %380, %5
  %400 = zext i32 %399 to i64
  %401 = getelementptr i16, i16* %4, i64 %400
  %402 = bitcast i16* %401 to i8*
  %403 = getelementptr i16, i16* %297, i64 %400
  %404 = bitcast i16* %403 to i8*
  %405 = mul i32 %380, %1
  %406 = mul i32 %291, %380
  %407 = add i32 %406, %7
  %408 = mul i32 %380, %3
  %409 = mul i32 %380, %5
  br i1 %285, label %410, label %548

410:                                              ; preds = %379
  %411 = shl nuw nsw i32 %380, 1
  %412 = mul i32 %411, %7
  %413 = or i32 %411, 1
  %414 = mul i32 %413, %7
  %415 = mul i32 %380, %3
  %416 = mul i32 %380, %5
  %417 = mul i32 %380, %1
  br i1 %298, label %503, label %418

418:                                              ; preds = %410
  %419 = xor i32 %405, -1
  %420 = icmp ult i32 %419, %299
  %421 = or i1 %420, %300
  %422 = xor i32 %406, -1
  %423 = icmp ult i32 %422, %301
  %424 = or i1 %423, %302
  %425 = or i1 %421, %424
  %426 = xor i32 %407, -1
  %427 = icmp ult i32 %426, %303
  %428 = or i1 %427, %304
  %429 = or i1 %425, %428
  %430 = xor i32 %408, -1
  %431 = icmp ult i32 %430, %305
  %432 = or i1 %431, %306
  %433 = or i1 %429, %432
  %434 = xor i32 %409, -1
  %435 = icmp ult i32 %434, %307
  %436 = or i1 %435, %308
  %437 = or i1 %433, %436
  br i1 %437, label %503, label %438

438:                                              ; preds = %418
  %439 = icmp ult i8* %383, %389
  %440 = icmp ult i8* %388, %384
  %441 = and i1 %439, %440
  %442 = icmp ult i8* %383, %392
  %443 = icmp ult i8* %391, %384
  %444 = and i1 %442, %443
  %445 = or i1 %441, %444
  %446 = icmp ult i8* %383, %398
  %447 = icmp ugt i8* %384, %396
  %448 = and i1 %446, %447
  %449 = or i1 %445, %448
  %450 = icmp ult i8* %383, %404
  %451 = icmp ugt i8* %384, %402
  %452 = and i1 %450, %451
  %453 = or i1 %449, %452
  br i1 %453, label %503, label %454

454:                                              ; preds = %438, %454
  %455 = phi i64 [ %500, %454 ], [ 0, %438 ]
  %456 = trunc i64 %455 to i32
  %457 = add i32 %412, %456
  %458 = zext i32 %457 to i64
  %459 = getelementptr inbounds i8, i8* %6, i64 %458
  %460 = bitcast i8* %459 to <8 x i8>*
  %461 = load <8 x i8>, <8 x i8>* %460, align 1, !alias.scope !15
  %462 = zext <8 x i8> %461 to <8 x i32>
  %463 = add i32 %414, %456
  %464 = zext i32 %463 to i64
  %465 = getelementptr inbounds i8, i8* %6, i64 %464
  %466 = bitcast i8* %465 to <8 x i8>*
  %467 = load <8 x i8>, <8 x i8>* %466, align 1, !alias.scope !18
  %468 = zext <8 x i8> %467 to <8 x i32>
  %469 = add nuw nsw <8 x i32> %462, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %470 = add nuw nsw <8 x i32> %469, %468
  %471 = lshr <8 x i32> %470, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %472 = add i32 %415, %456
  %473 = zext i32 %472 to i64
  %474 = getelementptr inbounds i16, i16* %2, i64 %473
  %475 = bitcast i16* %474 to <8 x i16>*
  %476 = load <8 x i16>, <8 x i16>* %475, align 2, !alias.scope !20
  %477 = zext <8 x i16> %476 to <8 x i32>
  %478 = mul nuw nsw <8 x i32> %471, %477
  %479 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %471
  %480 = add i32 %416, %456
  %481 = zext i32 %480 to i64
  %482 = getelementptr inbounds i16, i16* %4, i64 %481
  %483 = bitcast i16* %482 to <8 x i16>*
  %484 = load <8 x i16>, <8 x i16>* %483, align 2, !alias.scope !22
  %485 = zext <8 x i16> %484 to <8 x i32>
  %486 = mul nsw <8 x i32> %479, %485
  %487 = add nsw <8 x i32> %486, %478
  %488 = ashr <8 x i32> %487, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %489 = add <8 x i32> %311, %488
  %490 = ashr <8 x i32> %489, %313
  %491 = icmp sgt <8 x i32> %490, zeroinitializer
  %492 = select <8 x i1> %491, <8 x i32> %490, <8 x i32> zeroinitializer
  %493 = icmp slt <8 x i32> %492, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %494 = select <8 x i1> %493, <8 x i32> %492, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %495 = trunc <8 x i32> %494 to <8 x i8>
  %496 = add i32 %417, %456
  %497 = zext i32 %496 to i64
  %498 = getelementptr inbounds i8, i8* %0, i64 %497
  %499 = bitcast i8* %498 to <8 x i8>*
  store <8 x i8> %495, <8 x i8>* %499, align 1, !alias.scope !24, !noalias !26
  %500 = add i64 %455, 8
  %501 = icmp eq i64 %500, %309
  br i1 %501, label %502, label %454, !llvm.loop !27

502:                                              ; preds = %454
  br i1 %314, label %548, label %503

503:                                              ; preds = %502, %438, %418, %410
  %504 = phi i64 [ 0, %438 ], [ 0, %418 ], [ 0, %410 ], [ %309, %502 ]
  br label %505

505:                                              ; preds = %503, %505
  %506 = phi i64 [ %546, %505 ], [ %504, %503 ]
  %507 = trunc i64 %506 to i32
  %508 = add i32 %412, %507
  %509 = zext i32 %508 to i64
  %510 = getelementptr inbounds i8, i8* %6, i64 %509
  %511 = load i8, i8* %510, align 1
  %512 = zext i8 %511 to i32
  %513 = add i32 %414, %507
  %514 = zext i32 %513 to i64
  %515 = getelementptr inbounds i8, i8* %6, i64 %514
  %516 = load i8, i8* %515, align 1
  %517 = zext i8 %516 to i32
  %518 = add nuw nsw i32 %512, 1
  %519 = add nuw nsw i32 %518, %517
  %520 = lshr i32 %519, 1
  %521 = add i32 %415, %507
  %522 = zext i32 %521 to i64
  %523 = getelementptr inbounds i16, i16* %2, i64 %522
  %524 = load i16, i16* %523, align 2
  %525 = zext i16 %524 to i32
  %526 = mul nuw nsw i32 %520, %525
  %527 = sub nsw i32 64, %520
  %528 = add i32 %416, %507
  %529 = zext i32 %528 to i64
  %530 = getelementptr inbounds i16, i16* %4, i64 %529
  %531 = load i16, i16* %530, align 2
  %532 = zext i16 %531 to i32
  %533 = mul nsw i32 %527, %532
  %534 = add nsw i32 %533, %526
  %535 = ashr i32 %534, 6
  %536 = add i32 %288, %535
  %537 = ashr i32 %536, %25
  %538 = icmp sgt i32 %537, 0
  %539 = select i1 %538, i32 %537, i32 0
  %540 = icmp slt i32 %539, 255
  %541 = select i1 %540, i32 %539, i32 255
  %542 = trunc i32 %541 to i8
  %543 = add i32 %417, %507
  %544 = zext i32 %543 to i64
  %545 = getelementptr inbounds i8, i8* %0, i64 %544
  store i8 %542, i8* %545, align 1
  %546 = add nuw nsw i64 %506, 1
  %547 = icmp eq i64 %546, %289
  br i1 %547, label %548, label %505, !llvm.loop !28

548:                                              ; preds = %505, %502, %379
  %549 = add nuw nsw i32 %380, 1
  %550 = icmp eq i32 %549, %9
  br i1 %550, label %551, label %379

551:                                              ; preds = %548, %376, %277, %193, %283, %315, %200, %29
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @aom_blend_a64_mask_c(i8* nocapture, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32, i32, i32, i32) local_unnamed_addr #0 {
  %13 = icmp eq i32 %11, 0
  %14 = or i32 %11, %10
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %162

16:                                               ; preds = %12
  %17 = icmp sgt i32 %9, 0
  br i1 %17, label %18, label %480

18:                                               ; preds = %16
  %19 = icmp sgt i32 %8, 0
  %20 = zext i32 %8 to i64
  %21 = add nsw i64 %20, -1
  %22 = getelementptr i8, i8* %0, i64 %20
  %23 = getelementptr i8, i8* %6, i64 %20
  %24 = getelementptr i8, i8* %2, i64 %20
  %25 = getelementptr i8, i8* %4, i64 %20
  %26 = icmp ult i32 %8, 16
  %27 = trunc i64 %21 to i32
  %28 = icmp ugt i64 %21, 4294967295
  %29 = trunc i64 %21 to i32
  %30 = icmp ugt i64 %21, 4294967295
  %31 = trunc i64 %21 to i32
  %32 = icmp ugt i64 %21, 4294967295
  %33 = trunc i64 %21 to i32
  %34 = icmp ugt i64 %21, 4294967295
  %35 = and i64 %20, 4294967280
  %36 = icmp eq i64 %35, %20
  br label %37

37:                                               ; preds = %159, %18
  %38 = phi i32 [ 0, %18 ], [ %160, %159 ]
  %39 = mul i32 %38, %1
  %40 = zext i32 %39 to i64
  %41 = getelementptr i8, i8* %0, i64 %40
  %42 = getelementptr i8, i8* %22, i64 %40
  %43 = mul i32 %38, %7
  %44 = zext i32 %43 to i64
  %45 = getelementptr i8, i8* %6, i64 %44
  %46 = getelementptr i8, i8* %23, i64 %44
  %47 = mul i32 %38, %3
  %48 = zext i32 %47 to i64
  %49 = getelementptr i8, i8* %2, i64 %48
  %50 = getelementptr i8, i8* %24, i64 %48
  %51 = mul i32 %38, %5
  %52 = zext i32 %51 to i64
  %53 = getelementptr i8, i8* %4, i64 %52
  %54 = getelementptr i8, i8* %25, i64 %52
  %55 = mul i32 %38, %1
  %56 = mul i32 %38, %7
  %57 = mul i32 %38, %3
  %58 = mul i32 %38, %5
  br i1 %19, label %59, label %159

59:                                               ; preds = %37
  %60 = mul i32 %38, %7
  %61 = mul i32 %38, %3
  %62 = mul i32 %38, %5
  %63 = mul i32 %38, %1
  br i1 %26, label %127, label %64

64:                                               ; preds = %59
  %65 = xor i32 %55, -1
  %66 = icmp ult i32 %65, %27
  %67 = or i1 %66, %28
  %68 = xor i32 %56, -1
  %69 = icmp ult i32 %68, %29
  %70 = or i1 %69, %30
  %71 = or i1 %67, %70
  %72 = xor i32 %57, -1
  %73 = icmp ult i32 %72, %31
  %74 = or i1 %73, %32
  %75 = or i1 %71, %74
  %76 = xor i32 %58, -1
  %77 = icmp ult i32 %76, %33
  %78 = or i1 %77, %34
  %79 = or i1 %75, %78
  br i1 %79, label %127, label %80

80:                                               ; preds = %64
  %81 = icmp ult i8* %41, %46
  %82 = icmp ult i8* %45, %42
  %83 = and i1 %81, %82
  %84 = icmp ult i8* %41, %50
  %85 = icmp ult i8* %49, %42
  %86 = and i1 %84, %85
  %87 = or i1 %83, %86
  %88 = icmp ult i8* %41, %54
  %89 = icmp ult i8* %53, %42
  %90 = and i1 %88, %89
  %91 = or i1 %87, %90
  br i1 %91, label %127, label %92

92:                                               ; preds = %80, %92
  %93 = phi i64 [ %124, %92 ], [ 0, %80 ]
  %94 = trunc i64 %93 to i32
  %95 = add i32 %60, %94
  %96 = zext i32 %95 to i64
  %97 = getelementptr inbounds i8, i8* %6, i64 %96
  %98 = bitcast i8* %97 to <16 x i8>*
  %99 = load <16 x i8>, <16 x i8>* %98, align 1, !alias.scope !29
  %100 = zext <16 x i8> %99 to <16 x i32>
  %101 = add i32 %61, %94
  %102 = zext i32 %101 to i64
  %103 = getelementptr inbounds i8, i8* %2, i64 %102
  %104 = bitcast i8* %103 to <16 x i8>*
  %105 = load <16 x i8>, <16 x i8>* %104, align 1, !alias.scope !32
  %106 = zext <16 x i8> %105 to <16 x i32>
  %107 = mul nuw nsw <16 x i32> %106, %100
  %108 = sub nsw <16 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %100
  %109 = add i32 %62, %94
  %110 = zext i32 %109 to i64
  %111 = getelementptr inbounds i8, i8* %4, i64 %110
  %112 = bitcast i8* %111 to <16 x i8>*
  %113 = load <16 x i8>, <16 x i8>* %112, align 1, !alias.scope !34
  %114 = zext <16 x i8> %113 to <16 x i32>
  %115 = mul nsw <16 x i32> %108, %114
  %116 = add nuw nsw <16 x i32> %107, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %117 = add nsw <16 x i32> %116, %115
  %118 = lshr <16 x i32> %117, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %119 = trunc <16 x i32> %118 to <16 x i8>
  %120 = add i32 %63, %94
  %121 = zext i32 %120 to i64
  %122 = getelementptr inbounds i8, i8* %0, i64 %121
  %123 = bitcast i8* %122 to <16 x i8>*
  store <16 x i8> %119, <16 x i8>* %123, align 1, !alias.scope !36, !noalias !38
  %124 = add i64 %93, 16
  %125 = icmp eq i64 %124, %35
  br i1 %125, label %126, label %92, !llvm.loop !39

126:                                              ; preds = %92
  br i1 %36, label %159, label %127

127:                                              ; preds = %126, %80, %64, %59
  %128 = phi i64 [ 0, %80 ], [ 0, %64 ], [ 0, %59 ], [ %35, %126 ]
  br label %129

129:                                              ; preds = %127, %129
  %130 = phi i64 [ %157, %129 ], [ %128, %127 ]
  %131 = trunc i64 %130 to i32
  %132 = add i32 %60, %131
  %133 = zext i32 %132 to i64
  %134 = getelementptr inbounds i8, i8* %6, i64 %133
  %135 = load i8, i8* %134, align 1
  %136 = zext i8 %135 to i32
  %137 = add i32 %61, %131
  %138 = zext i32 %137 to i64
  %139 = getelementptr inbounds i8, i8* %2, i64 %138
  %140 = load i8, i8* %139, align 1
  %141 = zext i8 %140 to i32
  %142 = mul nuw nsw i32 %141, %136
  %143 = sub nsw i32 64, %136
  %144 = add i32 %62, %131
  %145 = zext i32 %144 to i64
  %146 = getelementptr inbounds i8, i8* %4, i64 %145
  %147 = load i8, i8* %146, align 1
  %148 = zext i8 %147 to i32
  %149 = mul nsw i32 %143, %148
  %150 = add nuw nsw i32 %142, 32
  %151 = add nsw i32 %150, %149
  %152 = lshr i32 %151, 6
  %153 = trunc i32 %152 to i8
  %154 = add i32 %63, %131
  %155 = zext i32 %154 to i64
  %156 = getelementptr inbounds i8, i8* %0, i64 %155
  store i8 %153, i8* %156, align 1
  %157 = add nuw nsw i64 %130, 1
  %158 = icmp eq i64 %157, %20
  br i1 %158, label %159, label %129, !llvm.loop !40

159:                                              ; preds = %129, %126, %37
  %160 = add nuw nsw i32 %38, 1
  %161 = icmp eq i32 %160, %9
  br i1 %161, label %480, label %37

162:                                              ; preds = %12
  %163 = icmp eq i32 %10, 1
  %164 = icmp eq i32 %11, 1
  %165 = and i1 %163, %164
  br i1 %165, label %166, label %238

166:                                              ; preds = %162
  %167 = icmp sgt i32 %9, 0
  br i1 %167, label %168, label %480

168:                                              ; preds = %166
  %169 = icmp sgt i32 %8, 0
  %170 = zext i32 %8 to i64
  br label %171

171:                                              ; preds = %235, %168
  %172 = phi i32 [ 0, %168 ], [ %236, %235 ]
  br i1 %169, label %173, label %235

173:                                              ; preds = %171
  %174 = shl nuw nsw i32 %172, 1
  %175 = mul i32 %174, %7
  %176 = or i32 %174, 1
  %177 = mul i32 %176, %7
  %178 = mul i32 %172, %3
  %179 = mul i32 %172, %5
  %180 = mul i32 %172, %1
  br label %181

181:                                              ; preds = %181, %173
  %182 = phi i64 [ 0, %173 ], [ %233, %181 ]
  %183 = shl nuw nsw i64 %182, 1
  %184 = trunc i64 %183 to i32
  %185 = add i32 %175, %184
  %186 = zext i32 %185 to i64
  %187 = getelementptr inbounds i8, i8* %6, i64 %186
  %188 = load i8, i8* %187, align 1
  %189 = zext i8 %188 to i32
  %190 = add i32 %177, %184
  %191 = zext i32 %190 to i64
  %192 = getelementptr inbounds i8, i8* %6, i64 %191
  %193 = load i8, i8* %192, align 1
  %194 = zext i8 %193 to i32
  %195 = trunc i64 %183 to i32
  %196 = or i32 %195, 1
  %197 = add i32 %196, %175
  %198 = zext i32 %197 to i64
  %199 = getelementptr inbounds i8, i8* %6, i64 %198
  %200 = load i8, i8* %199, align 1
  %201 = zext i8 %200 to i32
  %202 = add i32 %196, %177
  %203 = zext i32 %202 to i64
  %204 = getelementptr inbounds i8, i8* %6, i64 %203
  %205 = load i8, i8* %204, align 1
  %206 = zext i8 %205 to i32
  %207 = add nuw nsw i32 %189, 2
  %208 = add nuw nsw i32 %207, %194
  %209 = add nuw nsw i32 %208, %201
  %210 = add nuw nsw i32 %209, %206
  %211 = lshr i32 %210, 2
  %212 = trunc i64 %182 to i32
  %213 = add i32 %178, %212
  %214 = zext i32 %213 to i64
  %215 = getelementptr inbounds i8, i8* %2, i64 %214
  %216 = load i8, i8* %215, align 1
  %217 = zext i8 %216 to i32
  %218 = mul nuw nsw i32 %211, %217
  %219 = sub nsw i32 64, %211
  %220 = add i32 %179, %212
  %221 = zext i32 %220 to i64
  %222 = getelementptr inbounds i8, i8* %4, i64 %221
  %223 = load i8, i8* %222, align 1
  %224 = zext i8 %223 to i32
  %225 = mul nsw i32 %219, %224
  %226 = add nuw nsw i32 %218, 32
  %227 = add nsw i32 %226, %225
  %228 = lshr i32 %227, 6
  %229 = trunc i32 %228 to i8
  %230 = add i32 %180, %212
  %231 = zext i32 %230 to i64
  %232 = getelementptr inbounds i8, i8* %0, i64 %231
  store i8 %229, i8* %232, align 1
  %233 = add nuw nsw i64 %182, 1
  %234 = icmp eq i64 %233, %170
  br i1 %234, label %235, label %181

235:                                              ; preds = %181, %171
  %236 = add nuw nsw i32 %172, 1
  %237 = icmp eq i32 %236, %9
  br i1 %237, label %480, label %171

238:                                              ; preds = %162
  %239 = and i1 %163, %13
  %240 = icmp sgt i32 %9, 0
  br i1 %239, label %266, label %241

241:                                              ; preds = %238
  br i1 %240, label %242, label %480

242:                                              ; preds = %241
  %243 = icmp sgt i32 %8, 0
  %244 = zext i32 %8 to i64
  %245 = add nsw i64 %244, -1
  %246 = shl i32 %7, 1
  %247 = getelementptr i8, i8* %0, i64 %244
  %248 = shl i32 %7, 1
  %249 = getelementptr i8, i8* %6, i64 %244
  %250 = getelementptr i8, i8* %6, i64 %244
  %251 = getelementptr i8, i8* %2, i64 %244
  %252 = getelementptr i8, i8* %4, i64 %244
  %253 = icmp ult i32 %8, 16
  %254 = trunc i64 %245 to i32
  %255 = icmp ugt i64 %245, 4294967295
  %256 = trunc i64 %245 to i32
  %257 = icmp ugt i64 %245, 4294967295
  %258 = trunc i64 %245 to i32
  %259 = icmp ugt i64 %245, 4294967295
  %260 = trunc i64 %245 to i32
  %261 = icmp ugt i64 %245, 4294967295
  %262 = trunc i64 %245 to i32
  %263 = icmp ugt i64 %245, 4294967295
  %264 = and i64 %244, 4294967280
  %265 = icmp eq i64 %264, %244
  br label %322

266:                                              ; preds = %238
  br i1 %240, label %267, label %480

267:                                              ; preds = %266
  %268 = icmp sgt i32 %8, 0
  %269 = zext i32 %8 to i64
  br label %270

270:                                              ; preds = %319, %267
  %271 = phi i32 [ 0, %267 ], [ %320, %319 ]
  br i1 %268, label %272, label %319

272:                                              ; preds = %270
  %273 = mul i32 %271, %7
  %274 = mul i32 %271, %3
  %275 = mul i32 %271, %5
  %276 = mul i32 %271, %1
  br label %277

277:                                              ; preds = %277, %272
  %278 = phi i64 [ 0, %272 ], [ %317, %277 ]
  %279 = shl nuw nsw i64 %278, 1
  %280 = trunc i64 %279 to i32
  %281 = add i32 %273, %280
  %282 = zext i32 %281 to i64
  %283 = getelementptr inbounds i8, i8* %6, i64 %282
  %284 = load i8, i8* %283, align 1
  %285 = zext i8 %284 to i32
  %286 = trunc i64 %279 to i32
  %287 = or i32 %286, 1
  %288 = add i32 %287, %273
  %289 = zext i32 %288 to i64
  %290 = getelementptr inbounds i8, i8* %6, i64 %289
  %291 = load i8, i8* %290, align 1
  %292 = zext i8 %291 to i32
  %293 = add nuw nsw i32 %285, 1
  %294 = add nuw nsw i32 %293, %292
  %295 = lshr i32 %294, 1
  %296 = trunc i64 %278 to i32
  %297 = add i32 %274, %296
  %298 = zext i32 %297 to i64
  %299 = getelementptr inbounds i8, i8* %2, i64 %298
  %300 = load i8, i8* %299, align 1
  %301 = zext i8 %300 to i32
  %302 = mul nuw nsw i32 %295, %301
  %303 = sub nsw i32 64, %295
  %304 = add i32 %275, %296
  %305 = zext i32 %304 to i64
  %306 = getelementptr inbounds i8, i8* %4, i64 %305
  %307 = load i8, i8* %306, align 1
  %308 = zext i8 %307 to i32
  %309 = mul nsw i32 %303, %308
  %310 = add nuw nsw i32 %302, 32
  %311 = add nsw i32 %310, %309
  %312 = lshr i32 %311, 6
  %313 = trunc i32 %312 to i8
  %314 = add i32 %276, %296
  %315 = zext i32 %314 to i64
  %316 = getelementptr inbounds i8, i8* %0, i64 %315
  store i8 %313, i8* %316, align 1
  %317 = add nuw nsw i64 %278, 1
  %318 = icmp eq i64 %317, %269
  br i1 %318, label %319, label %277

319:                                              ; preds = %277, %270
  %320 = add nuw nsw i32 %271, 1
  %321 = icmp eq i32 %320, %9
  br i1 %321, label %480, label %270

322:                                              ; preds = %477, %242
  %323 = phi i32 [ 0, %242 ], [ %478, %477 ]
  %324 = mul i32 %323, %1
  %325 = zext i32 %324 to i64
  %326 = getelementptr i8, i8* %0, i64 %325
  %327 = getelementptr i8, i8* %247, i64 %325
  %328 = mul i32 %248, %323
  %329 = add i32 %328, %7
  %330 = zext i32 %329 to i64
  %331 = getelementptr i8, i8* %6, i64 %330
  %332 = getelementptr i8, i8* %249, i64 %330
  %333 = zext i32 %328 to i64
  %334 = getelementptr i8, i8* %6, i64 %333
  %335 = getelementptr i8, i8* %250, i64 %333
  %336 = mul i32 %323, %3
  %337 = zext i32 %336 to i64
  %338 = getelementptr i8, i8* %2, i64 %337
  %339 = getelementptr i8, i8* %251, i64 %337
  %340 = mul i32 %323, %5
  %341 = zext i32 %340 to i64
  %342 = getelementptr i8, i8* %4, i64 %341
  %343 = getelementptr i8, i8* %252, i64 %341
  %344 = mul i32 %323, %1
  %345 = mul i32 %246, %323
  %346 = add i32 %345, %7
  %347 = mul i32 %323, %3
  %348 = mul i32 %323, %5
  br i1 %243, label %349, label %477

349:                                              ; preds = %322
  %350 = shl nuw nsw i32 %323, 1
  %351 = mul i32 %350, %7
  %352 = or i32 %350, 1
  %353 = mul i32 %352, %7
  %354 = mul i32 %323, %3
  %355 = mul i32 %323, %5
  %356 = mul i32 %323, %1
  br i1 %253, label %437, label %357

357:                                              ; preds = %349
  %358 = xor i32 %344, -1
  %359 = icmp ult i32 %358, %254
  %360 = or i1 %359, %255
  %361 = xor i32 %345, -1
  %362 = icmp ult i32 %361, %256
  %363 = or i1 %362, %257
  %364 = or i1 %360, %363
  %365 = xor i32 %346, -1
  %366 = icmp ult i32 %365, %258
  %367 = or i1 %366, %259
  %368 = or i1 %364, %367
  %369 = xor i32 %347, -1
  %370 = icmp ult i32 %369, %260
  %371 = or i1 %370, %261
  %372 = or i1 %368, %371
  %373 = xor i32 %348, -1
  %374 = icmp ult i32 %373, %262
  %375 = or i1 %374, %263
  %376 = or i1 %372, %375
  br i1 %376, label %437, label %377

377:                                              ; preds = %357
  %378 = icmp ult i8* %326, %332
  %379 = icmp ult i8* %331, %327
  %380 = and i1 %378, %379
  %381 = icmp ult i8* %326, %335
  %382 = icmp ult i8* %334, %327
  %383 = and i1 %381, %382
  %384 = or i1 %380, %383
  %385 = icmp ult i8* %326, %339
  %386 = icmp ult i8* %338, %327
  %387 = and i1 %385, %386
  %388 = or i1 %384, %387
  %389 = icmp ult i8* %326, %343
  %390 = icmp ult i8* %342, %327
  %391 = and i1 %389, %390
  %392 = or i1 %388, %391
  br i1 %392, label %437, label %393

393:                                              ; preds = %377, %393
  %394 = phi i64 [ %434, %393 ], [ 0, %377 ]
  %395 = trunc i64 %394 to i32
  %396 = add i32 %351, %395
  %397 = zext i32 %396 to i64
  %398 = getelementptr inbounds i8, i8* %6, i64 %397
  %399 = bitcast i8* %398 to <16 x i8>*
  %400 = load <16 x i8>, <16 x i8>* %399, align 1, !alias.scope !41
  %401 = zext <16 x i8> %400 to <16 x i32>
  %402 = add i32 %353, %395
  %403 = zext i32 %402 to i64
  %404 = getelementptr inbounds i8, i8* %6, i64 %403
  %405 = bitcast i8* %404 to <16 x i8>*
  %406 = load <16 x i8>, <16 x i8>* %405, align 1, !alias.scope !44
  %407 = zext <16 x i8> %406 to <16 x i32>
  %408 = add nuw nsw <16 x i32> %401, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %409 = add nuw nsw <16 x i32> %408, %407
  %410 = lshr <16 x i32> %409, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %411 = add i32 %354, %395
  %412 = zext i32 %411 to i64
  %413 = getelementptr inbounds i8, i8* %2, i64 %412
  %414 = bitcast i8* %413 to <16 x i8>*
  %415 = load <16 x i8>, <16 x i8>* %414, align 1, !alias.scope !46
  %416 = zext <16 x i8> %415 to <16 x i32>
  %417 = mul nuw nsw <16 x i32> %410, %416
  %418 = sub nsw <16 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %410
  %419 = add i32 %355, %395
  %420 = zext i32 %419 to i64
  %421 = getelementptr inbounds i8, i8* %4, i64 %420
  %422 = bitcast i8* %421 to <16 x i8>*
  %423 = load <16 x i8>, <16 x i8>* %422, align 1, !alias.scope !48
  %424 = zext <16 x i8> %423 to <16 x i32>
  %425 = mul nsw <16 x i32> %418, %424
  %426 = add nuw nsw <16 x i32> %417, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %427 = add nsw <16 x i32> %426, %425
  %428 = lshr <16 x i32> %427, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %429 = trunc <16 x i32> %428 to <16 x i8>
  %430 = add i32 %356, %395
  %431 = zext i32 %430 to i64
  %432 = getelementptr inbounds i8, i8* %0, i64 %431
  %433 = bitcast i8* %432 to <16 x i8>*
  store <16 x i8> %429, <16 x i8>* %433, align 1, !alias.scope !50, !noalias !52
  %434 = add i64 %394, 16
  %435 = icmp eq i64 %434, %264
  br i1 %435, label %436, label %393, !llvm.loop !53

436:                                              ; preds = %393
  br i1 %265, label %477, label %437

437:                                              ; preds = %436, %377, %357, %349
  %438 = phi i64 [ 0, %377 ], [ 0, %357 ], [ 0, %349 ], [ %264, %436 ]
  br label %439

439:                                              ; preds = %437, %439
  %440 = phi i64 [ %475, %439 ], [ %438, %437 ]
  %441 = trunc i64 %440 to i32
  %442 = add i32 %351, %441
  %443 = zext i32 %442 to i64
  %444 = getelementptr inbounds i8, i8* %6, i64 %443
  %445 = load i8, i8* %444, align 1
  %446 = zext i8 %445 to i32
  %447 = add i32 %353, %441
  %448 = zext i32 %447 to i64
  %449 = getelementptr inbounds i8, i8* %6, i64 %448
  %450 = load i8, i8* %449, align 1
  %451 = zext i8 %450 to i32
  %452 = add nuw nsw i32 %446, 1
  %453 = add nuw nsw i32 %452, %451
  %454 = lshr i32 %453, 1
  %455 = add i32 %354, %441
  %456 = zext i32 %455 to i64
  %457 = getelementptr inbounds i8, i8* %2, i64 %456
  %458 = load i8, i8* %457, align 1
  %459 = zext i8 %458 to i32
  %460 = mul nuw nsw i32 %454, %459
  %461 = sub nsw i32 64, %454
  %462 = add i32 %355, %441
  %463 = zext i32 %462 to i64
  %464 = getelementptr inbounds i8, i8* %4, i64 %463
  %465 = load i8, i8* %464, align 1
  %466 = zext i8 %465 to i32
  %467 = mul nsw i32 %461, %466
  %468 = add nuw nsw i32 %460, 32
  %469 = add nsw i32 %468, %467
  %470 = lshr i32 %469, 6
  %471 = trunc i32 %470 to i8
  %472 = add i32 %356, %441
  %473 = zext i32 %472 to i64
  %474 = getelementptr inbounds i8, i8* %0, i64 %473
  store i8 %471, i8* %474, align 1
  %475 = add nuw nsw i64 %440, 1
  %476 = icmp eq i64 %475, %244
  br i1 %476, label %477, label %439, !llvm.loop !54

477:                                              ; preds = %439, %436, %322
  %478 = add nuw nsw i32 %323, 1
  %479 = icmp eq i32 %478, %9
  br i1 %479, label %480, label %322

480:                                              ; preds = %477, %319, %235, %159, %241, %266, %166, %16
  ret void
}

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = !{!8}
!8 = distinct !{!8, !4}
!9 = !{!10}
!10 = distinct !{!10, !4}
!11 = !{!3, !6, !8}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.isvectorized", i32 1}
!14 = distinct !{!14, !13}
!15 = !{!16}
!16 = distinct !{!16, !17}
!17 = distinct !{!17, !"LVerDomain"}
!18 = !{!19}
!19 = distinct !{!19, !17}
!20 = !{!21}
!21 = distinct !{!21, !17}
!22 = !{!23}
!23 = distinct !{!23, !17}
!24 = !{!25}
!25 = distinct !{!25, !17}
!26 = !{!19, !16, !21, !23}
!27 = distinct !{!27, !13}
!28 = distinct !{!28, !13}
!29 = !{!30}
!30 = distinct !{!30, !31}
!31 = distinct !{!31, !"LVerDomain"}
!32 = !{!33}
!33 = distinct !{!33, !31}
!34 = !{!35}
!35 = distinct !{!35, !31}
!36 = !{!37}
!37 = distinct !{!37, !31}
!38 = !{!30, !33, !35}
!39 = distinct !{!39, !13}
!40 = distinct !{!40, !13}
!41 = !{!42}
!42 = distinct !{!42, !43}
!43 = distinct !{!43, !"LVerDomain"}
!44 = !{!45}
!45 = distinct !{!45, !43}
!46 = !{!47}
!47 = distinct !{!47, !43}
!48 = !{!49}
!49 = distinct !{!49, !43}
!50 = !{!51}
!51 = distinct !{!51, !43}
!52 = !{!45, !42, !47, !49}
!53 = distinct !{!53, !13}
!54 = distinct !{!54, !13}
