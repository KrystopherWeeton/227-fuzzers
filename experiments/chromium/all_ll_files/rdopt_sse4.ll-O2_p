; ModuleID = '../../third_party/libaom/source/libaom/av1/encoder/x86/rdopt_sse4.c'
source_filename = "../../third_party/libaom/source/libaom/av1/encoder/x86/rdopt_sse4.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_get_horver_correlation_full_sse4_1(i16* readonly, i32, i32, i32, float* nocapture, float* nocapture) local_unnamed_addr #0 {
  %7 = add nsw i32 %3, -4
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %28, label %9

9:                                                ; preds = %6
  %10 = add nsw i32 %2, -4
  %11 = icmp slt i32 %10, 0
  %12 = shl nsw i32 %1, 1
  %13 = sext i32 %12 to i64
  %14 = sext i32 %1 to i64
  %15 = mul nsw i32 %1, 3
  %16 = sext i32 %15 to i64
  %17 = sext i32 %10 to i64
  %18 = sext i32 %7 to i64
  br label %19

19:                                               ; preds = %9, %34
  %20 = phi i64 [ 0, %9 ], [ %62, %34 ]
  %21 = phi <2 x i64> [ zeroinitializer, %9 ], [ %47, %34 ]
  %22 = phi <2 x i64> [ zeroinitializer, %9 ], [ %61, %34 ]
  br i1 %11, label %34, label %23

23:                                               ; preds = %19
  %24 = mul nsw i64 %20, %14
  br label %64

25:                                               ; preds = %34
  %26 = extractelement <2 x i64> %61, i32 1
  %27 = extractelement <2 x i64> %61, i32 0
  br label %28

28:                                               ; preds = %25, %6
  %29 = phi i64 [ 0, %6 ], [ %26, %25 ]
  %30 = phi i64 [ 0, %6 ], [ %27, %25 ]
  %31 = phi <2 x i64> [ zeroinitializer, %6 ], [ %47, %25 ]
  %32 = srem i32 %3, 3
  %33 = icmp eq i32 %32, 1
  br i1 %33, label %117, label %187

34:                                               ; preds = %64, %19
  %35 = phi <4 x i32> [ zeroinitializer, %19 ], [ %96, %64 ]
  %36 = phi <4 x i32> [ zeroinitializer, %19 ], [ %103, %64 ]
  %37 = phi <4 x i32> [ zeroinitializer, %19 ], [ %110, %64 ]
  %38 = phi <4 x i32> [ zeroinitializer, %19 ], [ %114, %64 ]
  %39 = shufflevector <4 x i32> %36, <4 x i32> %35, <2 x i32> <i32 3, i32 7>
  %40 = sext <2 x i32> %39 to <2 x i64>
  %41 = shufflevector <4 x i32> %36, <4 x i32> %35, <2 x i32> <i32 2, i32 6>
  %42 = sext <2 x i32> %41 to <2 x i64>
  %43 = shufflevector <4 x i32> %36, <4 x i32> %35, <2 x i32> <i32 0, i32 5>
  %44 = sext <2 x i32> %43 to <2 x i64>
  %45 = add <2 x i64> %21, %40
  %46 = add <2 x i64> %45, %42
  %47 = add <2 x i64> %46, %44
  %48 = extractelement <4 x i32> %37, i32 3
  %49 = sext i32 %48 to i64
  %50 = extractelement <2 x i64> %22, i32 0
  %51 = add i64 %50, %49
  %52 = shufflevector <4 x i32> %37, <4 x i32> %38, <2 x i32> <i32 2, i32 6>
  %53 = sext <2 x i32> %52 to <2 x i64>
  %54 = shufflevector <4 x i32> %37, <4 x i32> %38, <2 x i32> <i32 1, i32 5>
  %55 = sext <2 x i32> %54 to <2 x i64>
  %56 = shufflevector <4 x i32> %37, <4 x i32> %38, <2 x i32> <i32 0, i32 4>
  %57 = sext <2 x i32> %56 to <2 x i64>
  %58 = insertelement <2 x i64> %22, i64 %51, i32 0
  %59 = add <2 x i64> %58, %53
  %60 = add <2 x i64> %59, %55
  %61 = add <2 x i64> %60, %57
  %62 = add nuw nsw i64 %20, 3
  %63 = icmp sgt i64 %62, %18
  br i1 %63, label %25, label %19

64:                                               ; preds = %23, %64
  %65 = phi i64 [ 0, %23 ], [ %115, %64 ]
  %66 = phi <4 x i32> [ zeroinitializer, %23 ], [ %114, %64 ]
  %67 = phi <4 x i32> [ zeroinitializer, %23 ], [ %110, %64 ]
  %68 = phi <4 x i32> [ zeroinitializer, %23 ], [ %103, %64 ]
  %69 = phi <4 x i32> [ zeroinitializer, %23 ], [ %96, %64 ]
  %70 = add nsw i64 %65, %24
  %71 = getelementptr inbounds i16, i16* %0, i64 %70
  %72 = bitcast i16* %71 to i64*
  %73 = load i64, i64* %72, align 8
  %74 = getelementptr inbounds i16, i16* %71, i64 %13
  %75 = bitcast i16* %74 to i64*
  %76 = load i64, i64* %75, align 8
  %77 = insertelement <2 x i64> undef, i64 %76, i32 0
  %78 = insertelement <2 x i64> %77, i64 %73, i32 1
  %79 = getelementptr inbounds i16, i16* %71, i64 %14
  %80 = bitcast i16* %79 to i64*
  %81 = load i64, i64* %80, align 8
  %82 = getelementptr inbounds i16, i16* %71, i64 %16
  %83 = bitcast i16* %82 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = insertelement <2 x i64> undef, i64 %84, i32 0
  %86 = insertelement <2 x i64> %85, i64 %81, i32 1
  %87 = shl <2 x i64> %78, <i64 16, i64 16>
  %88 = shl <2 x i64> %86, <i64 16, i64 16>
  %89 = bitcast <2 x i64> %78 to <8 x i16>
  %90 = bitcast <2 x i64> %87 to <8 x i16>
  %91 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %89, <8 x i16> %90) #3
  %92 = bitcast <2 x i64> %86 to <8 x i16>
  %93 = bitcast <2 x i64> %88 to <8 x i16>
  %94 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %92, <8 x i16> %93) #3
  %95 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %94, <4 x i32> %91) #3
  %96 = add <4 x i32> %95, %69
  %97 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %90, <8 x i16> %93) #3
  %98 = bitcast <2 x i64> %88 to <16 x i8>
  %99 = shufflevector <16 x i8> %98, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %100 = bitcast <16 x i8> %99 to <8 x i16>
  %101 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %90, <8 x i16> %100) #3
  %102 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %101, <4 x i32> %97) #3
  %103 = add <4 x i32> %102, %68
  %104 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %90, <8 x i16> %90) #3
  %105 = shufflevector <8 x i16> %104, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %106 = sext <4 x i16> %105 to <4 x i32>
  %107 = shufflevector <8 x i16> %100, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %108 = sext <4 x i16> %107 to <4 x i32>
  %109 = add <4 x i32> %67, %108
  %110 = add <4 x i32> %109, %106
  %111 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %90, <8 x i16> %90) #3
  %112 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %100, <8 x i16> %100) #3
  %113 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %111, <4 x i32> %112) #3
  %114 = add <4 x i32> %113, %66
  %115 = add nuw nsw i64 %65, 3
  %116 = icmp sgt i64 %115, %17
  br i1 %116, label %34, label %64

117:                                              ; preds = %28
  %118 = add nsw i32 %3, -1
  %119 = mul nsw i32 %118, %1
  %120 = sext i32 %119 to i64
  %121 = getelementptr inbounds i16, i16* %0, i64 %120
  %122 = load i16, i16* %121, align 2
  %123 = sext i16 %122 to i64
  %124 = add nsw i64 %30, %123
  %125 = sext i16 %122 to i32
  %126 = mul nsw i32 %125, %125
  %127 = zext i32 %126 to i64
  %128 = add nsw i64 %29, %127
  %129 = add nsw i32 %2, -1
  %130 = icmp sgt i32 %129, 0
  %131 = extractelement <2 x i64> %31, i32 0
  %132 = extractelement <2 x i64> %31, i32 1
  br i1 %130, label %133, label %295

133:                                              ; preds = %117
  %134 = zext i32 %129 to i64
  %135 = and i64 %134, 1
  %136 = icmp eq i32 %129, 1
  br i1 %136, label %263, label %137

137:                                              ; preds = %133
  %138 = sub nsw i64 %134, %135
  br label %139

139:                                              ; preds = %139, %137
  %140 = phi i64 [ 0, %137 ], [ %184, %139 ]
  %141 = phi i64 [ %132, %137 ], [ %176, %139 ]
  %142 = phi i64 [ %124, %137 ], [ %178, %139 ]
  %143 = phi i64 [ %128, %137 ], [ %181, %139 ]
  %144 = phi i64 [ %123, %137 ], [ %182, %139 ]
  %145 = phi i64 [ %127, %137 ], [ %183, %139 ]
  %146 = phi i64 [ %138, %137 ], [ %185, %139 ]
  %147 = add nsw i64 %140, %120
  %148 = getelementptr inbounds i16, i16* %0, i64 %147
  %149 = load i16, i16* %148, align 2
  %150 = add nsw i64 %147, 1
  %151 = getelementptr inbounds i16, i16* %0, i64 %150
  %152 = load i16, i16* %151, align 2
  %153 = sext i16 %149 to i32
  %154 = sext i16 %152 to i32
  %155 = mul nsw i32 %154, %153
  %156 = sext i32 %155 to i64
  %157 = add nsw i64 %141, %156
  %158 = sext i16 %152 to i64
  %159 = add nsw i64 %142, %158
  %160 = mul nsw i32 %154, %154
  %161 = zext i32 %160 to i64
  %162 = add nsw i64 %143, %161
  %163 = add nsw i64 %144, %158
  %164 = add nuw nsw i64 %145, %161
  %165 = or i64 %140, 1
  %166 = add nsw i64 %165, %120
  %167 = getelementptr inbounds i16, i16* %0, i64 %166
  %168 = load i16, i16* %167, align 2
  %169 = add nsw i64 %166, 1
  %170 = getelementptr inbounds i16, i16* %0, i64 %169
  %171 = load i16, i16* %170, align 2
  %172 = sext i16 %168 to i32
  %173 = sext i16 %171 to i32
  %174 = mul nsw i32 %173, %172
  %175 = sext i32 %174 to i64
  %176 = add nsw i64 %157, %175
  %177 = sext i16 %171 to i64
  %178 = add nsw i64 %159, %177
  %179 = mul nsw i32 %173, %173
  %180 = zext i32 %179 to i64
  %181 = add nsw i64 %162, %180
  %182 = add nsw i64 %163, %177
  %183 = add nuw nsw i64 %164, %180
  %184 = add nuw nsw i64 %140, 2
  %185 = add i64 %146, -2
  %186 = icmp eq i64 %185, 0
  br i1 %186, label %263, label %139

187:                                              ; preds = %28
  %188 = add nsw i32 %3, -2
  %189 = mul nsw i32 %188, %1
  %190 = sext i32 %189 to i64
  %191 = getelementptr inbounds i16, i16* %0, i64 %190
  %192 = load i16, i16* %191, align 2
  %193 = add nsw i32 %3, -1
  %194 = mul nsw i32 %193, %1
  %195 = sext i32 %194 to i64
  %196 = getelementptr inbounds i16, i16* %0, i64 %195
  %197 = load i16, i16* %196, align 2
  %198 = sext i16 %192 to i32
  %199 = sext i16 %197 to i32
  %200 = add nsw i32 %199, %198
  %201 = sext i32 %200 to i64
  %202 = add nsw i64 %30, %201
  %203 = mul nsw i32 %198, %198
  %204 = mul nsw i32 %199, %199
  %205 = add nuw nsw i32 %204, %203
  %206 = zext i32 %205 to i64
  %207 = add nsw i64 %29, %206
  %208 = sext i16 %197 to i64
  %209 = zext i32 %204 to i64
  %210 = add nsw i32 %2, -1
  %211 = icmp sgt i32 %210, 0
  %212 = extractelement <2 x i64> %31, i32 0
  %213 = extractelement <2 x i64> %31, i32 1
  br i1 %211, label %214, label %295

214:                                              ; preds = %187
  %215 = zext i32 %210 to i64
  br label %216

216:                                              ; preds = %216, %214
  %217 = phi i64 [ 0, %214 ], [ %261, %216 ]
  %218 = phi i64 [ %213, %214 ], [ %248, %216 ]
  %219 = phi i64 [ %212, %214 ], [ %244, %216 ]
  %220 = phi i64 [ %202, %214 ], [ %251, %216 ]
  %221 = phi i64 [ %207, %214 ], [ %256, %216 ]
  %222 = phi i64 [ %208, %214 ], [ %258, %216 ]
  %223 = phi i64 [ %209, %214 ], [ %260, %216 ]
  %224 = add nsw i64 %217, %190
  %225 = getelementptr inbounds i16, i16* %0, i64 %224
  %226 = load i16, i16* %225, align 2
  %227 = add nsw i64 %224, 1
  %228 = getelementptr inbounds i16, i16* %0, i64 %227
  %229 = load i16, i16* %228, align 2
  %230 = add nsw i64 %217, %195
  %231 = getelementptr inbounds i16, i16* %0, i64 %230
  %232 = load i16, i16* %231, align 2
  %233 = add nsw i64 %230, 1
  %234 = getelementptr inbounds i16, i16* %0, i64 %233
  %235 = load i16, i16* %234, align 2
  %236 = sext i16 %226 to i32
  %237 = sext i16 %229 to i32
  %238 = mul nsw i32 %237, %236
  %239 = sext i32 %238 to i64
  %240 = add nsw i64 %218, %239
  %241 = sext i16 %232 to i32
  %242 = mul nsw i32 %241, %236
  %243 = sext i32 %242 to i64
  %244 = add nsw i64 %219, %243
  %245 = sext i16 %235 to i32
  %246 = mul nsw i32 %245, %241
  %247 = sext i32 %246 to i64
  %248 = add nsw i64 %240, %247
  %249 = add nsw i32 %245, %237
  %250 = sext i32 %249 to i64
  %251 = add nsw i64 %220, %250
  %252 = mul nsw i32 %237, %237
  %253 = mul nsw i32 %245, %245
  %254 = add nuw nsw i32 %253, %252
  %255 = zext i32 %254 to i64
  %256 = add nsw i64 %221, %255
  %257 = sext i16 %235 to i64
  %258 = add nsw i64 %222, %257
  %259 = zext i32 %253 to i64
  %260 = add nuw nsw i64 %223, %259
  %261 = add nuw nsw i64 %217, 1
  %262 = icmp eq i64 %261, %215
  br i1 %262, label %295, label %216

263:                                              ; preds = %139, %133
  %264 = phi i64 [ undef, %133 ], [ %176, %139 ]
  %265 = phi i64 [ undef, %133 ], [ %178, %139 ]
  %266 = phi i64 [ undef, %133 ], [ %181, %139 ]
  %267 = phi i64 [ undef, %133 ], [ %182, %139 ]
  %268 = phi i64 [ undef, %133 ], [ %183, %139 ]
  %269 = phi i64 [ 0, %133 ], [ %184, %139 ]
  %270 = phi i64 [ %132, %133 ], [ %176, %139 ]
  %271 = phi i64 [ %124, %133 ], [ %178, %139 ]
  %272 = phi i64 [ %128, %133 ], [ %181, %139 ]
  %273 = phi i64 [ %123, %133 ], [ %182, %139 ]
  %274 = phi i64 [ %127, %133 ], [ %183, %139 ]
  %275 = icmp eq i64 %135, 0
  br i1 %275, label %295, label %276

276:                                              ; preds = %263
  %277 = add nsw i64 %269, %120
  %278 = add nsw i64 %277, 1
  %279 = getelementptr inbounds i16, i16* %0, i64 %278
  %280 = load i16, i16* %279, align 2
  %281 = sext i16 %280 to i32
  %282 = sext i16 %280 to i64
  %283 = mul nsw i32 %281, %281
  %284 = zext i32 %283 to i64
  %285 = add nuw nsw i64 %274, %284
  %286 = add nsw i64 %273, %282
  %287 = add nsw i64 %272, %284
  %288 = add nsw i64 %271, %282
  %289 = getelementptr inbounds i16, i16* %0, i64 %277
  %290 = load i16, i16* %289, align 2
  %291 = sext i16 %290 to i32
  %292 = mul nsw i32 %281, %291
  %293 = sext i32 %292 to i64
  %294 = add nsw i64 %270, %293
  br label %295

295:                                              ; preds = %216, %276, %263, %187, %117
  %296 = phi i64 [ %127, %117 ], [ %209, %187 ], [ %268, %263 ], [ %285, %276 ], [ %260, %216 ]
  %297 = phi i64 [ %123, %117 ], [ %208, %187 ], [ %267, %263 ], [ %286, %276 ], [ %258, %216 ]
  %298 = phi i64 [ %128, %117 ], [ %207, %187 ], [ %266, %263 ], [ %287, %276 ], [ %256, %216 ]
  %299 = phi i64 [ %124, %117 ], [ %202, %187 ], [ %265, %263 ], [ %288, %276 ], [ %251, %216 ]
  %300 = phi i64 [ %131, %117 ], [ %212, %187 ], [ %131, %263 ], [ %131, %276 ], [ %244, %216 ]
  %301 = phi i64 [ %132, %117 ], [ %213, %187 ], [ %264, %263 ], [ %294, %276 ], [ %248, %216 ]
  %302 = srem i32 %2, 3
  %303 = icmp eq i32 %302, 1
  br i1 %303, label %304, label %359

304:                                              ; preds = %295
  %305 = add i32 %2, -1
  %306 = sext i32 %305 to i64
  %307 = getelementptr inbounds i16, i16* %0, i64 %306
  %308 = load i16, i16* %307, align 2
  %309 = sext i16 %308 to i64
  %310 = add nsw i64 %299, %309
  %311 = sext i16 %308 to i32
  %312 = mul nsw i32 %311, %311
  %313 = zext i32 %312 to i64
  %314 = add nsw i64 %298, %313
  %315 = add i32 %3, -1
  %316 = icmp sgt i32 %315, 0
  br i1 %316, label %317, label %455

317:                                              ; preds = %304
  %318 = select i1 %33, i32 2, i32 3
  %319 = sub nsw i32 %3, %318
  %320 = sext i32 %319 to i64
  %321 = zext i32 %315 to i64
  br label %322

322:                                              ; preds = %322, %317
  %323 = phi i64 [ 0, %317 ], [ %335, %322 ]
  %324 = phi i64 [ %300, %317 ], [ %346, %322 ]
  %325 = phi i64 [ %310, %317 ], [ %357, %322 ]
  %326 = phi i64 [ %314, %317 ], [ %355, %322 ]
  %327 = phi i64 [ %309, %317 ], [ %348, %322 ]
  %328 = phi i64 [ %313, %317 ], [ %351, %322 ]
  %329 = trunc i64 %323 to i32
  %330 = mul i32 %329, %1
  %331 = add i32 %305, %330
  %332 = sext i32 %331 to i64
  %333 = getelementptr inbounds i16, i16* %0, i64 %332
  %334 = load i16, i16* %333, align 2
  %335 = add nuw nsw i64 %323, 1
  %336 = trunc i64 %335 to i32
  %337 = mul i32 %336, %1
  %338 = add i32 %305, %337
  %339 = sext i32 %338 to i64
  %340 = getelementptr inbounds i16, i16* %0, i64 %339
  %341 = load i16, i16* %340, align 2
  %342 = sext i16 %334 to i32
  %343 = sext i16 %341 to i32
  %344 = mul nsw i32 %343, %342
  %345 = sext i32 %344 to i64
  %346 = add nsw i64 %324, %345
  %347 = sext i16 %341 to i64
  %348 = add nsw i64 %327, %347
  %349 = mul nsw i32 %343, %343
  %350 = zext i32 %349 to i64
  %351 = add nuw nsw i64 %328, %350
  %352 = icmp slt i64 %323, %320
  %353 = zext i32 %349 to i64
  %354 = select i1 %352, i64 %353, i64 0
  %355 = add nsw i64 %326, %354
  %356 = select i1 %352, i64 %347, i64 0
  %357 = add nsw i64 %356, %325
  %358 = icmp eq i64 %335, %321
  br i1 %358, label %455, label %322

359:                                              ; preds = %295
  %360 = add nsw i32 %2, -2
  %361 = sext i32 %360 to i64
  %362 = getelementptr inbounds i16, i16* %0, i64 %361
  %363 = load i16, i16* %362, align 2
  %364 = add nsw i32 %2, -1
  %365 = sext i32 %364 to i64
  %366 = getelementptr inbounds i16, i16* %0, i64 %365
  %367 = load i16, i16* %366, align 2
  %368 = sext i16 %363 to i32
  %369 = sext i16 %367 to i32
  %370 = add nsw i32 %369, %368
  %371 = sext i32 %370 to i64
  %372 = add nsw i64 %299, %371
  %373 = mul nsw i32 %368, %368
  %374 = mul nsw i32 %369, %369
  %375 = add nuw nsw i32 %374, %373
  %376 = zext i32 %375 to i64
  %377 = add nsw i64 %298, %376
  %378 = sext i16 %367 to i64
  %379 = zext i32 %374 to i64
  %380 = add i32 %3, -1
  %381 = icmp sgt i32 %380, 0
  br i1 %381, label %382, label %455

382:                                              ; preds = %359
  %383 = add nsw i32 %3, -2
  %384 = select i1 %33, i32 2, i32 3
  %385 = sub nsw i32 %3, %384
  %386 = sext i32 %1 to i64
  %387 = sext i32 %2 to i64
  %388 = sext i32 %383 to i64
  %389 = sext i32 %385 to i64
  %390 = zext i32 %380 to i64
  br label %391

391:                                              ; preds = %447, %382
  %392 = phi i64 [ 0, %382 ], [ %404, %447 ]
  %393 = phi i64 [ %301, %382 ], [ %430, %447 ]
  %394 = phi i64 [ %300, %382 ], [ %453, %447 ]
  %395 = phi i64 [ %372, %382 ], [ %449, %447 ]
  %396 = phi i64 [ %377, %382 ], [ %448, %447 ]
  %397 = phi i64 [ %378, %382 ], [ %432, %447 ]
  %398 = phi i64 [ %379, %382 ], [ %436, %447 ]
  %399 = mul nsw i64 %392, %386
  %400 = add nsw i64 %399, %387
  %401 = add nsw i64 %400, -1
  %402 = getelementptr inbounds i16, i16* %0, i64 %401
  %403 = load i16, i16* %402, align 2
  %404 = add nuw nsw i64 %392, 1
  %405 = mul nsw i64 %404, %386
  %406 = add nsw i64 %405, %387
  %407 = add nsw i64 %406, -2
  %408 = getelementptr inbounds i16, i16* %0, i64 %407
  %409 = load i16, i16* %408, align 2
  %410 = add nsw i64 %406, -1
  %411 = getelementptr inbounds i16, i16* %0, i64 %410
  %412 = load i16, i16* %411, align 2
  %413 = icmp slt i64 %392, %388
  %414 = or i1 %33, %413
  br i1 %414, label %415, label %428

415:                                              ; preds = %391
  %416 = add nsw i64 %400, -2
  %417 = getelementptr inbounds i16, i16* %0, i64 %416
  %418 = load i16, i16* %417, align 2
  %419 = sext i16 %418 to i32
  %420 = sext i16 %403 to i32
  %421 = mul nsw i32 %419, %420
  %422 = sext i32 %421 to i64
  %423 = add nsw i64 %393, %422
  %424 = sext i16 %409 to i32
  %425 = mul nsw i32 %419, %424
  %426 = sext i32 %425 to i64
  %427 = add nsw i64 %394, %426
  br label %428

428:                                              ; preds = %391, %415
  %429 = phi i64 [ %427, %415 ], [ %394, %391 ]
  %430 = phi i64 [ %423, %415 ], [ %393, %391 ]
  %431 = sext i16 %412 to i64
  %432 = add nsw i64 %397, %431
  %433 = sext i16 %412 to i32
  %434 = mul nsw i32 %433, %433
  %435 = zext i32 %434 to i64
  %436 = add nuw nsw i64 %398, %435
  %437 = icmp slt i64 %392, %389
  br i1 %437, label %438, label %447

438:                                              ; preds = %428
  %439 = sext i16 %409 to i32
  %440 = add nsw i32 %433, %439
  %441 = sext i32 %440 to i64
  %442 = add nsw i64 %395, %441
  %443 = mul nsw i32 %439, %439
  %444 = add nuw nsw i32 %434, %443
  %445 = zext i32 %444 to i64
  %446 = add nsw i64 %396, %445
  br label %447

447:                                              ; preds = %438, %428
  %448 = phi i64 [ %446, %438 ], [ %396, %428 ]
  %449 = phi i64 [ %442, %438 ], [ %395, %428 ]
  %450 = sext i16 %403 to i32
  %451 = mul nsw i32 %433, %450
  %452 = sext i32 %451 to i64
  %453 = add nsw i64 %429, %452
  %454 = icmp eq i64 %404, %390
  br i1 %454, label %455, label %391

455:                                              ; preds = %447, %322, %359, %304
  %456 = phi i64 [ %313, %304 ], [ %379, %359 ], [ %351, %322 ], [ %436, %447 ]
  %457 = phi i64 [ %309, %304 ], [ %378, %359 ], [ %348, %322 ], [ %432, %447 ]
  %458 = phi i64 [ %314, %304 ], [ %377, %359 ], [ %355, %322 ], [ %448, %447 ]
  %459 = phi i64 [ %310, %304 ], [ %372, %359 ], [ %357, %322 ], [ %449, %447 ]
  %460 = phi i64 [ %300, %304 ], [ %300, %359 ], [ %346, %322 ], [ %453, %447 ]
  %461 = phi i64 [ %301, %304 ], [ %301, %359 ], [ %301, %322 ], [ %430, %447 ]
  %462 = icmp sgt i32 %2, 0
  br i1 %462, label %463, label %493

463:                                              ; preds = %455
  %464 = zext i32 %2 to i64
  %465 = add nsw i64 %464, -1
  %466 = and i64 %464, 3
  %467 = icmp ult i64 %465, 3
  br i1 %467, label %470, label %468

468:                                              ; preds = %463
  %469 = sub nsw i64 %464, %466
  br label %505

470:                                              ; preds = %505, %463
  %471 = phi i64 [ undef, %463 ], [ %540, %505 ]
  %472 = phi i64 [ undef, %463 ], [ %544, %505 ]
  %473 = phi i64 [ 0, %463 ], [ %545, %505 ]
  %474 = phi i64 [ 0, %463 ], [ %544, %505 ]
  %475 = phi i64 [ 0, %463 ], [ %540, %505 ]
  %476 = icmp eq i64 %466, 0
  br i1 %476, label %493, label %477

477:                                              ; preds = %470, %477
  %478 = phi i64 [ %490, %477 ], [ %473, %470 ]
  %479 = phi i64 [ %489, %477 ], [ %474, %470 ]
  %480 = phi i64 [ %485, %477 ], [ %475, %470 ]
  %481 = phi i64 [ %491, %477 ], [ %466, %470 ]
  %482 = getelementptr inbounds i16, i16* %0, i64 %478
  %483 = load i16, i16* %482, align 2
  %484 = sext i16 %483 to i64
  %485 = add nsw i64 %480, %484
  %486 = sext i16 %483 to i32
  %487 = mul nsw i32 %486, %486
  %488 = zext i32 %487 to i64
  %489 = add nuw nsw i64 %479, %488
  %490 = add nuw nsw i64 %478, 1
  %491 = add i64 %481, -1
  %492 = icmp eq i64 %491, 0
  br i1 %492, label %493, label %477, !llvm.loop !2

493:                                              ; preds = %470, %477, %455
  %494 = phi i64 [ 0, %455 ], [ %471, %470 ], [ %485, %477 ]
  %495 = phi i64 [ 0, %455 ], [ %472, %470 ], [ %489, %477 ]
  %496 = icmp sgt i32 %3, 0
  br i1 %496, label %497, label %572

497:                                              ; preds = %493
  %498 = sext i32 %1 to i64
  %499 = zext i32 %3 to i64
  %500 = add nsw i64 %499, -1
  %501 = and i64 %499, 3
  %502 = icmp ult i64 %500, 3
  br i1 %502, label %548, label %503

503:                                              ; preds = %497
  %504 = sub nsw i64 %499, %501
  br label %617

505:                                              ; preds = %505, %468
  %506 = phi i64 [ 0, %468 ], [ %545, %505 ]
  %507 = phi i64 [ 0, %468 ], [ %544, %505 ]
  %508 = phi i64 [ 0, %468 ], [ %540, %505 ]
  %509 = phi i64 [ %469, %468 ], [ %546, %505 ]
  %510 = getelementptr inbounds i16, i16* %0, i64 %506
  %511 = load i16, i16* %510, align 2
  %512 = sext i16 %511 to i64
  %513 = add nsw i64 %508, %512
  %514 = sext i16 %511 to i32
  %515 = mul nsw i32 %514, %514
  %516 = zext i32 %515 to i64
  %517 = add nuw nsw i64 %507, %516
  %518 = or i64 %506, 1
  %519 = getelementptr inbounds i16, i16* %0, i64 %518
  %520 = load i16, i16* %519, align 2
  %521 = sext i16 %520 to i64
  %522 = add nsw i64 %513, %521
  %523 = sext i16 %520 to i32
  %524 = mul nsw i32 %523, %523
  %525 = zext i32 %524 to i64
  %526 = add nuw nsw i64 %517, %525
  %527 = or i64 %506, 2
  %528 = getelementptr inbounds i16, i16* %0, i64 %527
  %529 = load i16, i16* %528, align 2
  %530 = sext i16 %529 to i64
  %531 = add nsw i64 %522, %530
  %532 = sext i16 %529 to i32
  %533 = mul nsw i32 %532, %532
  %534 = zext i32 %533 to i64
  %535 = add nuw nsw i64 %526, %534
  %536 = or i64 %506, 3
  %537 = getelementptr inbounds i16, i16* %0, i64 %536
  %538 = load i16, i16* %537, align 2
  %539 = sext i16 %538 to i64
  %540 = add nsw i64 %531, %539
  %541 = sext i16 %538 to i32
  %542 = mul nsw i32 %541, %541
  %543 = zext i32 %542 to i64
  %544 = add nuw nsw i64 %535, %543
  %545 = add nuw nsw i64 %506, 4
  %546 = add i64 %509, -4
  %547 = icmp eq i64 %546, 0
  br i1 %547, label %470, label %505

548:                                              ; preds = %617, %497
  %549 = phi i64 [ undef, %497 ], [ %656, %617 ]
  %550 = phi i64 [ undef, %497 ], [ %660, %617 ]
  %551 = phi i64 [ 0, %497 ], [ %661, %617 ]
  %552 = phi i64 [ 0, %497 ], [ %660, %617 ]
  %553 = phi i64 [ 0, %497 ], [ %656, %617 ]
  %554 = icmp eq i64 %501, 0
  br i1 %554, label %572, label %555

555:                                              ; preds = %548, %555
  %556 = phi i64 [ %569, %555 ], [ %551, %548 ]
  %557 = phi i64 [ %568, %555 ], [ %552, %548 ]
  %558 = phi i64 [ %564, %555 ], [ %553, %548 ]
  %559 = phi i64 [ %570, %555 ], [ %501, %548 ]
  %560 = mul nsw i64 %556, %498
  %561 = getelementptr inbounds i16, i16* %0, i64 %560
  %562 = load i16, i16* %561, align 2
  %563 = sext i16 %562 to i64
  %564 = add nsw i64 %558, %563
  %565 = sext i16 %562 to i32
  %566 = mul nsw i32 %565, %565
  %567 = zext i32 %566 to i64
  %568 = add nuw nsw i64 %557, %567
  %569 = add nuw nsw i64 %556, 1
  %570 = add i64 %559, -1
  %571 = icmp eq i64 %570, 0
  br i1 %571, label %572, label %555, !llvm.loop !4

572:                                              ; preds = %548, %555, %493
  %573 = phi i64 [ 0, %493 ], [ %549, %548 ], [ %564, %555 ]
  %574 = phi i64 [ 0, %493 ], [ %550, %548 ], [ %568, %555 ]
  %575 = sub nsw i64 %459, %457
  %576 = sub nsw i64 %459, %297
  %577 = sub nsw i64 %459, %573
  %578 = sub nsw i64 %459, %494
  %579 = sub nsw i64 %458, %456
  %580 = sub nsw i64 %458, %296
  %581 = sub nsw i64 %458, %574
  %582 = sub nsw i64 %458, %495
  %583 = add nsw i32 %2, -1
  %584 = mul nsw i32 %583, %3
  %585 = sitofp i32 %584 to float
  %586 = add nsw i32 %3, -1
  %587 = mul nsw i32 %586, %2
  %588 = sitofp i32 %587 to float
  %589 = sitofp i64 %579 to float
  %590 = mul nsw i64 %575, %575
  %591 = sitofp i64 %590 to float
  %592 = fdiv float %591, %585
  %593 = fsub float %589, %592
  %594 = sitofp i64 %580 to float
  %595 = mul nsw i64 %576, %576
  %596 = sitofp i64 %595 to float
  %597 = fdiv float %596, %588
  %598 = fsub float %594, %597
  %599 = sitofp i64 %581 to float
  %600 = mul nsw i64 %577, %577
  %601 = sitofp i64 %600 to float
  %602 = fdiv float %601, %585
  %603 = fsub float %599, %602
  %604 = sitofp i64 %582 to float
  %605 = mul nsw i64 %578, %578
  %606 = sitofp i64 %605 to float
  %607 = fdiv float %606, %588
  %608 = fsub float %604, %607
  %609 = sitofp i64 %460 to float
  %610 = mul nsw i64 %578, %576
  %611 = sitofp i64 %610 to float
  %612 = fdiv float %611, %588
  %613 = fsub float %609, %612
  %614 = fcmp ogt float %593, 0.000000e+00
  %615 = fcmp ogt float %603, 0.000000e+00
  %616 = and i1 %614, %615
  br i1 %616, label %664, label %675

617:                                              ; preds = %617, %503
  %618 = phi i64 [ 0, %503 ], [ %661, %617 ]
  %619 = phi i64 [ 0, %503 ], [ %660, %617 ]
  %620 = phi i64 [ 0, %503 ], [ %656, %617 ]
  %621 = phi i64 [ %504, %503 ], [ %662, %617 ]
  %622 = mul nsw i64 %618, %498
  %623 = getelementptr inbounds i16, i16* %0, i64 %622
  %624 = load i16, i16* %623, align 2
  %625 = sext i16 %624 to i64
  %626 = add nsw i64 %620, %625
  %627 = sext i16 %624 to i32
  %628 = mul nsw i32 %627, %627
  %629 = zext i32 %628 to i64
  %630 = add nuw nsw i64 %619, %629
  %631 = or i64 %618, 1
  %632 = mul nsw i64 %631, %498
  %633 = getelementptr inbounds i16, i16* %0, i64 %632
  %634 = load i16, i16* %633, align 2
  %635 = sext i16 %634 to i64
  %636 = add nsw i64 %626, %635
  %637 = sext i16 %634 to i32
  %638 = mul nsw i32 %637, %637
  %639 = zext i32 %638 to i64
  %640 = add nuw nsw i64 %630, %639
  %641 = or i64 %618, 2
  %642 = mul nsw i64 %641, %498
  %643 = getelementptr inbounds i16, i16* %0, i64 %642
  %644 = load i16, i16* %643, align 2
  %645 = sext i16 %644 to i64
  %646 = add nsw i64 %636, %645
  %647 = sext i16 %644 to i32
  %648 = mul nsw i32 %647, %647
  %649 = zext i32 %648 to i64
  %650 = add nuw nsw i64 %640, %649
  %651 = or i64 %618, 3
  %652 = mul nsw i64 %651, %498
  %653 = getelementptr inbounds i16, i16* %0, i64 %652
  %654 = load i16, i16* %653, align 2
  %655 = sext i16 %654 to i64
  %656 = add nsw i64 %646, %655
  %657 = sext i16 %654 to i32
  %658 = mul nsw i32 %657, %657
  %659 = zext i32 %658 to i64
  %660 = add nuw nsw i64 %650, %659
  %661 = add nuw nsw i64 %618, 4
  %662 = add i64 %621, -4
  %663 = icmp eq i64 %662, 0
  br i1 %663, label %548, label %617

664:                                              ; preds = %572
  %665 = sitofp i64 %461 to float
  %666 = mul nsw i64 %577, %575
  %667 = sitofp i64 %666 to float
  %668 = fdiv float %667, %585
  %669 = fsub float %665, %668
  %670 = fmul float %593, %603
  %671 = tail call float @sqrtf(float %670) #3
  %672 = fdiv float %669, %671
  store float %672, float* %4, align 4
  %673 = fcmp olt float %672, 0.000000e+00
  %674 = select i1 %673, float 0.000000e+00, float %672
  br label %675

675:                                              ; preds = %572, %664
  %676 = phi float [ %674, %664 ], [ 1.000000e+00, %572 ]
  store float %676, float* %4, align 4
  %677 = fcmp ogt float %598, 0.000000e+00
  %678 = fcmp ogt float %608, 0.000000e+00
  %679 = and i1 %677, %678
  br i1 %679, label %680, label %686

680:                                              ; preds = %675
  %681 = fmul float %598, %608
  %682 = tail call float @sqrtf(float %681) #3
  %683 = fdiv float %613, %682
  store float %683, float* %5, align 4
  %684 = fcmp olt float %683, 0.000000e+00
  %685 = select i1 %684, float 0.000000e+00, float %683
  br label %686

686:                                              ; preds = %675, %680
  %687 = phi float [ %685, %680 ], [ 1.000000e+00, %675 ]
  store float %687, float* %5, align 4
  ret void
}

; Function Attrs: nofree nounwind
declare float @sqrtf(float) local_unnamed_addr #1

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16>, <8 x i16>) #2

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32>, <4 x i32>) #2

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16>, <8 x i16>) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
