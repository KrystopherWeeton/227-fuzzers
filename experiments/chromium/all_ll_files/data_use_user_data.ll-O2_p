; ModuleID = '../../components/data_use_measurement/core/data_use_user_data.cc'
source_filename = "../../components/data_use_measurement/core/data_use_user_data.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.data_use_measurement::DataUseUserData" = type { %"class.base::SupportsUserData::Data", i32, i32 }
%"class.base::SupportsUserData::Data" = type { i32 (...)** }

@_ZTVN20data_use_measurement15DataUseUserDataE = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.data_use_measurement::DataUseUserData"*)* @_ZN20data_use_measurement15DataUseUserDataD2Ev to i8*), i8* bitcast (void (%"class.data_use_measurement::DataUseUserData"*)* @_ZN20data_use_measurement15DataUseUserDataD0Ev to i8*), i8* bitcast (void ()* @_ZN4base16SupportsUserData4Data5CloneEv to i8*)] }, align 8
@_ZN20data_use_measurement15DataUseUserData12kUserDataKeyE = hidden constant i8* bitcast (i8** @_ZN20data_use_measurement15DataUseUserData12kUserDataKeyE to i8*), align 8

@_ZN20data_use_measurement15DataUseUserDataC1ENS0_8AppStateE = hidden unnamed_addr alias void (%"class.data_use_measurement::DataUseUserData"*, i32), void (%"class.data_use_measurement::DataUseUserData"*, i32)* @_ZN20data_use_measurement15DataUseUserDataC2ENS0_8AppStateE
@_ZN20data_use_measurement15DataUseUserDataD1Ev = hidden unnamed_addr alias void (%"class.data_use_measurement::DataUseUserData"*), void (%"class.data_use_measurement::DataUseUserData"*)* @_ZN20data_use_measurement15DataUseUserDataD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN20data_use_measurement15DataUseUserDataC2ENS0_8AppStateE(%"class.data_use_measurement::DataUseUserData"* nocapture, i32) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.data_use_measurement::DataUseUserData", %"class.data_use_measurement::DataUseUserData"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN20data_use_measurement15DataUseUserDataE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.data_use_measurement::DataUseUserData", %"class.data_use_measurement::DataUseUserData"* %0, i64 0, i32 1
  store i32 %1, i32* %4, align 8
  %5 = getelementptr inbounds %"class.data_use_measurement::DataUseUserData", %"class.data_use_measurement::DataUseUserData"* %0, i64 0, i32 2
  store i32 0, i32* %5, align 4
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN20data_use_measurement15DataUseUserDataD2Ev(%"class.data_use_measurement::DataUseUserData"* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN20data_use_measurement15DataUseUserDataD0Ev(%"class.data_use_measurement::DataUseUserData"*) unnamed_addr #2 align 2 {
  %2 = bitcast %"class.data_use_measurement::DataUseUserData"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #4
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

declare void @_ZN4base16SupportsUserData4Data5CloneEv() unnamed_addr

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
