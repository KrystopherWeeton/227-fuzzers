; ModuleID = '../../third_party/blink/renderer/modules/nfc/ndef_record.cc'
source_filename = "../../third_party/blink/renderer/modules/nfc/ndef_record.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.WTF::ThreadSpecific" = type { %"class.blink::ThreadState"**, %"class.base::ThreadLocalStorage::Slot" }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr.272", i32, [4 x i8], %"class.std::__1::unique_ptr.410", %"class.std::__1::unique_ptr.410", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.420", %"class.std::__1::unique_ptr.426", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.438", %"class.std::__1::unique_ptr.444", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.451", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.272" = type { %"class.std::__1::__compressed_pair.273" }
%"class.std::__1::__compressed_pair.273" = type { %"struct.std::__1::__compressed_pair_elem.274" }
%"struct.std::__1::__compressed_pair_elem.274" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.275", %"class.std::__1::unique_ptr.281", %"class.std::__1::unique_ptr.287", %"class.std::__1::unique_ptr.293", %"class.std::__1::unique_ptr.299", %"class.std::__1::unique_ptr.305", %"class.std::__1::unique_ptr.316", %"class.std::__1::unique_ptr.323", %"class.std::__1::unique_ptr.323", %"class.std::__1::unique_ptr.330", %"class.std::__1::unique_ptr.337", %"class.std::__1::unique_ptr.344", %"class.std::__1::unique_ptr.344", %"class.std::__1::unique_ptr.351", %"class.std::__1::unique_ptr.358", %"class.std::__1::unique_ptr.365", %"class.std::__1::unique_ptr.390", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.275" = type { %"class.std::__1::__compressed_pair.276" }
%"class.std::__1::__compressed_pair.276" = type { %"struct.std::__1::__compressed_pair_elem.277" }
%"struct.std::__1::__compressed_pair_elem.277" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.281" = type { %"class.std::__1::__compressed_pair.282" }
%"class.std::__1::__compressed_pair.282" = type { %"struct.std::__1::__compressed_pair_elem.283" }
%"struct.std::__1::__compressed_pair_elem.283" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.287" = type { %"class.std::__1::__compressed_pair.288" }
%"class.std::__1::__compressed_pair.288" = type { %"struct.std::__1::__compressed_pair_elem.289" }
%"struct.std::__1::__compressed_pair_elem.289" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.293" = type { %"class.std::__1::__compressed_pair.294" }
%"class.std::__1::__compressed_pair.294" = type { %"struct.std::__1::__compressed_pair_elem.295" }
%"struct.std::__1::__compressed_pair_elem.295" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.299" = type { %"class.std::__1::__compressed_pair.300" }
%"class.std::__1::__compressed_pair.300" = type { %"struct.std::__1::__compressed_pair_elem.301" }
%"struct.std::__1::__compressed_pair_elem.301" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.305" = type { %"class.std::__1::__compressed_pair.306" }
%"class.std::__1::__compressed_pair.306" = type { %"struct.std::__1::__compressed_pair_elem.307" }
%"struct.std::__1::__compressed_pair_elem.307" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.308" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.308" = type { %"struct.std::__1::__atomic_base.309" }
%"struct.std::__1::__atomic_base.309" = type { %"struct.std::__1::__atomic_base.310" }
%"struct.std::__1::__atomic_base.310" = type { %"struct.std::__1::__cxx_atomic_impl.311" }
%"struct.std::__1::__cxx_atomic_impl.311" = type { %"struct.std::__1::__cxx_atomic_base_impl.312" }
%"struct.std::__1::__cxx_atomic_base_impl.312" = type { i64 }
%"class.std::__1::unique_ptr.316" = type { %"class.std::__1::__compressed_pair.317" }
%"class.std::__1::__compressed_pair.317" = type { %"struct.std::__1::__compressed_pair_elem.318" }
%"struct.std::__1::__compressed_pair_elem.318" = type { %"class.blink::Worklist.319"* }
%"class.blink::Worklist.319" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.308" }
%"class.std::__1::unique_ptr.323" = type { %"class.std::__1::__compressed_pair.324" }
%"class.std::__1::__compressed_pair.324" = type { %"struct.std::__1::__compressed_pair_elem.325" }
%"struct.std::__1::__compressed_pair_elem.325" = type { %"class.blink::Worklist.326"* }
%"class.blink::Worklist.326" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.308" }
%"class.std::__1::unique_ptr.330" = type { %"class.std::__1::__compressed_pair.331" }
%"class.std::__1::__compressed_pair.331" = type { %"struct.std::__1::__compressed_pair_elem.332" }
%"struct.std::__1::__compressed_pair_elem.332" = type { %"class.blink::Worklist.333"* }
%"class.blink::Worklist.333" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.308" }
%"class.std::__1::unique_ptr.337" = type { %"class.std::__1::__compressed_pair.338" }
%"class.std::__1::__compressed_pair.338" = type { %"struct.std::__1::__compressed_pair_elem.339" }
%"struct.std::__1::__compressed_pair_elem.339" = type { %"class.blink::Worklist.340"* }
%"class.blink::Worklist.340" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.308" }
%"class.std::__1::unique_ptr.344" = type { %"class.std::__1::__compressed_pair.345" }
%"class.std::__1::__compressed_pair.345" = type { %"struct.std::__1::__compressed_pair_elem.346" }
%"struct.std::__1::__compressed_pair_elem.346" = type { %"class.blink::Worklist.347"* }
%"class.blink::Worklist.347" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.308" }
%"class.std::__1::unique_ptr.351" = type { %"class.std::__1::__compressed_pair.352" }
%"class.std::__1::__compressed_pair.352" = type { %"struct.std::__1::__compressed_pair_elem.353" }
%"struct.std::__1::__compressed_pair_elem.353" = type { %"class.blink::Worklist.354"* }
%"class.blink::Worklist.354" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.308" }
%"class.std::__1::unique_ptr.358" = type { %"class.std::__1::__compressed_pair.359" }
%"class.std::__1::__compressed_pair.359" = type { %"struct.std::__1::__compressed_pair_elem.360" }
%"struct.std::__1::__compressed_pair_elem.360" = type { %"class.blink::Worklist.361"* }
%"class.blink::Worklist.361" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.308" }
%"class.std::__1::unique_ptr.365" = type { %"class.std::__1::__compressed_pair.366" }
%"class.std::__1::__compressed_pair.366" = type { %"struct.std::__1::__compressed_pair_elem.367" }
%"struct.std::__1::__compressed_pair_elem.367" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.368", %"class.std::__1::__compressed_pair.376", %"class.std::__1::__compressed_pair.381", %"class.std::__1::__compressed_pair.383", [4 x i8] }>
%"class.std::__1::unique_ptr.368" = type { %"class.std::__1::__compressed_pair.369" }
%"class.std::__1::__compressed_pair.369" = type { %"struct.std::__1::__compressed_pair_elem.370", %"struct.std::__1::__compressed_pair_elem.371" }
%"struct.std::__1::__compressed_pair_elem.370" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.371" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.372" }
%"class.std::__1::__compressed_pair.372" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { i64 }
%"class.std::__1::__compressed_pair.376" = type { %"struct.std::__1::__compressed_pair_elem.377" }
%"struct.std::__1::__compressed_pair_elem.377" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.381" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"class.std::__1::__compressed_pair.383" = type { %"struct.std::__1::__compressed_pair_elem.384" }
%"struct.std::__1::__compressed_pair_elem.384" = type { float }
%"class.std::__1::unique_ptr.390" = type { %"class.std::__1::__compressed_pair.391" }
%"class.std::__1::__compressed_pair.391" = type { %"struct.std::__1::__compressed_pair_elem.392" }
%"struct.std::__1::__compressed_pair_elem.392" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.393", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.393" = type { %"class.std::__1::__compressed_pair.394" }
%"class.std::__1::__compressed_pair.394" = type { %"struct.std::__1::__compressed_pair_elem.395" }
%"struct.std::__1::__compressed_pair_elem.395" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.402" }
%"class.WTF::Vector.402" = type { %"class.WTF::VectorBuffer.403" }
%"class.WTF::VectorBuffer.403" = type { %"class.WTF::VectorBufferBase.404" }
%"class.WTF::VectorBufferBase.404" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.410" = type { %"class.std::__1::__compressed_pair.411" }
%"class.std::__1::__compressed_pair.411" = type { %"struct.std::__1::__compressed_pair_elem.412" }
%"struct.std::__1::__compressed_pair_elem.412" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.418" }
%"class.WTF::VectorBuffer.418" = type { %"class.WTF::VectorBufferBase.419" }
%"class.WTF::VectorBufferBase.419" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.420" = type { %"class.std::__1::__compressed_pair.421" }
%"class.std::__1::__compressed_pair.421" = type { %"struct.std::__1::__compressed_pair_elem.422" }
%"struct.std::__1::__compressed_pair_elem.422" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.426" = type { %"class.std::__1::__compressed_pair.427" }
%"class.std::__1::__compressed_pair.427" = type { %"struct.std::__1::__compressed_pair_elem.428" }
%"struct.std::__1::__compressed_pair_elem.428" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.432" }
%"class.std::__1::unique_ptr.432" = type { %"class.std::__1::__compressed_pair.433" }
%"class.std::__1::__compressed_pair.433" = type { %"struct.std::__1::__compressed_pair_elem.434" }
%"struct.std::__1::__compressed_pair_elem.434" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.319"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.326"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.333"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.340"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.347"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.455" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.455" = type { %"struct.std::__1::__compressed_pair_elem.456" }
%"struct.std::__1::__compressed_pair_elem.456" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.438" = type { %"class.std::__1::__compressed_pair.439" }
%"class.std::__1::__compressed_pair.439" = type { %"struct.std::__1::__compressed_pair_elem.440" }
%"struct.std::__1::__compressed_pair_elem.440" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.444" = type { %"class.std::__1::__compressed_pair.445" }
%"class.std::__1::__compressed_pair.445" = type { %"struct.std::__1::__compressed_pair_elem.446" }
%"struct.std::__1::__compressed_pair_elem.446" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.450 }
%class.scoped_refptr.450 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.451" = type { %"struct.std::__1::__atomic_base.452" }
%"struct.std::__1::__atomic_base.452" = type { %"struct.std::__1::__cxx_atomic_impl.453" }
%"struct.std::__1::__cxx_atomic_impl.453" = type { %"struct.std::__1::__cxx_atomic_base_impl.454" }
%"struct.std::__1::__cxx_atomic_base_impl.454" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::ThreadLocalStorage::Slot" = type { i32, i32 }
%"struct.blink::GCInfo" = type { void (%"class.blink::Visitor"*, i8*)*, void (i8*)*, { i8*, i8 } (i8*)*, i8 }
%"class.blink::GCInfoTable" = type { %"struct.blink::GCInfo"**, i32, i32, %"class.WTF::Mutex" }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.blink::QualifiedName" = type { %class.scoped_refptr.520 }
%class.scoped_refptr.520 = type { %"class.blink::QualifiedName::QualifiedNameImpl"* }
%"class.blink::QualifiedName::QualifiedNameImpl" = type { %"class.WTF::RefCounted.521", i32, %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString" }
%"class.WTF::RefCounted.521" = type { %"class.base::RefCounted.522" }
%"class.base::RefCounted.522" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.blink::AtomicEntryFlag" = type { %"struct.std::__1::atomic.135" }
%"struct.std::__1::atomic.135" = type { %"struct.std::__1::__atomic_base.136" }
%"struct.std::__1::__atomic_base.136" = type { %"struct.std::__1::__atomic_base.137" }
%"struct.std::__1::__atomic_base.137" = type { %"struct.std::__1::__cxx_atomic_impl.138" }
%"struct.std::__1::__cxx_atomic_impl.138" = type { %"struct.std::__1::__cxx_atomic_base_impl.139" }
%"struct.std::__1::__cxx_atomic_base_impl.139" = type { i32 }
%"struct.blink::WrapperTypeInfo" = type { i16, void (%"class.v8::Isolate"*, %"class.blink::DOMWrapperWorld"*, %"class.v8::Template"*)*, void (%"class.v8::Context"*, %"class.blink::DOMWrapperWorld"*, %"class.v8::Object"*, %"class.v8::Object"*, %"class.v8::Object"*, %"class.v8::Template"*, i64)*, i8*, %"struct.blink::WrapperTypeInfo"*, i8 }
%"class.blink::DOMWrapperWorld" = type { %"class.WTF::RefCounted.460", i32, i32, %"class.blink::Persistent" }
%"class.WTF::RefCounted.460" = type { %"class.base::RefCounted.461" }
%"class.base::RefCounted.461" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::Persistent" = type { %"class.blink::PersistentBase" }
%"class.blink::PersistentBase" = type { %"class.blink::DOMDataStore"*, %"class.blink::PersistentNodePtr" }
%"class.blink::DOMDataStore" = type { i32 (...)**, i8, [7 x i8], %"class.blink::HeapHashMap.464" }
%"class.blink::HeapHashMap.464" = type { %"class.WTF::HashMap.467" }
%"class.WTF::HashMap.467" = type { %"class.WTF::HashTable.468" }
%"class.WTF::HashTable.468" = type <{ %"struct.WTF::KeyValuePair.470"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.470" = type { %"class.blink::WeakMember.471", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::WeakMember.471" = type { %"class.blink::MemberBase.472" }
%"class.blink::MemberBase.472" = type { %"class.blink::ScriptWrappable"* }
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.blink::PersistentNodePtr" = type { %"class.blink::PersistentNode"* }
%"class.v8::Template" = type { i8 }
%"class.v8::Context" = type { i8 }
%"class.v8::Object" = type { i8 }
%"class.blink::NDEFRecord" = type { %"class.blink::ScriptWrappable", i32, %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::Vector", %"class.blink::Member" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { i8*, i32, i32 }
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::NDEFMessage"* }
%"class.blink::NDEFMessage" = type { %"class.blink::ScriptWrappable", %"class.blink::HeapVector" }
%"class.blink::HeapVector" = type { %"class.WTF::Vector.3" }
%"class.WTF::Vector.3" = type { %"class.WTF::VectorBuffer.4" }
%"class.WTF::VectorBuffer.4" = type { %"class.WTF::VectorBufferBase.5" }
%"class.WTF::VectorBufferBase.5" = type { %"class.blink::Member.6"*, i32, i32 }
%"class.blink::Member.6" = type { %"class.blink::MemberBase.486" }
%"class.blink::MemberBase.486" = type { %"class.blink::NDEFRecord"* }
%"class.blink::ExecutionContext" = type <{ %"class.blink::Supplementable", %"class.blink::MojoBindingContext", %"class.blink::ConsoleLogger", %"class.blink::UseCounter", %"class.blink::FeatureContext", %"class.v8::Isolate"*, %"class.blink::SecurityContext", %"class.blink::Member.60", i32, i8, [3 x i8], %"class.blink::HeapVector.62", i32, i8, i8, i8, i8, i8, i8, [6 x i8], %"class.blink::Member.70", %"class.blink::Member.72", %"class.blink::DOMTimerCoordinator", i32, [4 x i8], %"class.std::__1::unique_ptr.81", %"class.blink::Member.222", %"class.blink::Member.224", i8, [7 x i8] }>
%"class.blink::Supplementable" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap" }
%"class.blink::GarbageCollectedMixin" = type { i32 (...)** }
%"class.blink::HeapHashMap" = type { %"class.WTF::HashMap" }
%"class.WTF::HashMap" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type opaque
%"class.blink::MojoBindingContext" = type { %"class.blink::ContextLifecycleNotifier", %"class.blink::Supplementable.15" }
%"class.blink::ContextLifecycleNotifier" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapObserverSet" }
%"class.blink::HeapObserverSet" = type { i32, [4 x i8], %"class.blink::HeapHashSet" }
%"class.blink::HeapHashSet" = type { %"class.WTF::HashSet" }
%"class.WTF::HashSet" = type { %"class.WTF::HashTable.13" }
%"class.WTF::HashTable.13" = type <{ %"class.blink::WeakMember"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember" = type opaque
%"class.blink::Supplementable.15" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.16" }
%"class.blink::HeapHashMap.16" = type { %"class.WTF::HashMap.19" }
%"class.WTF::HashMap.19" = type { %"class.WTF::HashTable.20" }
%"class.WTF::HashTable.20" = type <{ %"struct.WTF::KeyValuePair.22"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.22" = type { i8*, %"class.blink::Member.482" }
%"class.blink::Member.482" = type { %"class.blink::MemberBase.483" }
%"class.blink::MemberBase.483" = type { %"class.blink::Supplement"* }
%"class.blink::Supplement" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::Member.484" }
%"class.blink::Member.484" = type { %"class.blink::MemberBase.485" }
%"class.blink::MemberBase.485" = type { %"class.blink::MojoBindingContext"* }
%"class.blink::ConsoleLogger" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::UseCounter" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::FeatureContext" = type { i32 (...)** }
%"class.blink::SecurityContext" = type { i32 (...)**, i32, %class.scoped_refptr.23, %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.48", %"class.std::__1::unique_ptr.48", %"class.blink::Member.54", i32, [4 x i8], %"class.WTF::HashSet.56", i32, i32 }
%class.scoped_refptr.23 = type { %"class.blink::SecurityOrigin"* }
%"class.blink::SecurityOrigin" = type { %"class.WTF::RefCounted", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", i16, %"class.absl::optional", i8, i8, i8, i8, i8, i8, %"class.base::UnguessableToken", %class.scoped_refptr.24 }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.url::Origin::Nonce" }
%"class.url::Origin::Nonce" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%class.scoped_refptr.24 = type { %"class.blink::SecurityOrigin"* }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::PermissionsPolicy"* }
%"class.blink::PermissionsPolicy" = type { %"class.url::Origin", %"class.std::__1::map", %"class.std::__1::map.37", %"class.std::__1::map.46"* }
%"class.url::Origin" = type { %"class.url::SchemeHostPort", %"class.absl::optional" }
%"class.url::SchemeHostPort" = type <{ %"class.std::__1::basic_string", %"class.std::__1::basic_string", i16, [6 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.27 }
%union.anon.27 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.29", %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"class.std::__1::map.37" = type { %"class.std::__1::__tree.38" }
%"class.std::__1::__tree.38" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.39", %"class.std::__1::__compressed_pair.43" }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"class.std::__1::map.46" = type opaque
%"class.std::__1::unique_ptr.48" = type { %"class.std::__1::__compressed_pair.49" }
%"class.std::__1::__compressed_pair.49" = type { %"struct.std::__1::__compressed_pair_elem.50" }
%"struct.std::__1::__compressed_pair_elem.50" = type { %"class.blink::DocumentPolicy"* }
%"class.blink::DocumentPolicy" = type opaque
%"class.blink::Member.54" = type { %"class.blink::MemberBase.55" }
%"class.blink::MemberBase.55" = type { %"class.blink::ExecutionContext"* }
%"class.WTF::HashSet.56" = type { %"class.WTF::HashTable.57" }
%"class.WTF::HashTable.57" = type <{ i32*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.60" = type { %"class.blink::MemberBase.61" }
%"class.blink::MemberBase.61" = type { %"class.blink::Agent"* }
%"class.blink::Agent" = type opaque
%"class.blink::HeapVector.62" = type { %"class.WTF::Vector.65" }
%"class.WTF::Vector.65" = type { %"class.WTF::VectorBuffer.66" }
%"class.WTF::VectorBuffer.66" = type { %"class.WTF::VectorBufferBase.67" }
%"class.WTF::VectorBufferBase.67" = type { %"class.blink::Member.68"*, i32, i32 }
%"class.blink::Member.68" = type opaque
%"class.blink::Member.70" = type { %"class.blink::MemberBase.71" }
%"class.blink::MemberBase.71" = type { %"class.blink::PublicURLManager"* }
%"class.blink::PublicURLManager" = type opaque
%"class.blink::Member.72" = type { %"class.blink::MemberBase.73" }
%"class.blink::MemberBase.73" = type { %"class.blink::ContentSecurityPolicyDelegate"* }
%"class.blink::ContentSecurityPolicyDelegate" = type opaque
%"class.blink::DOMTimerCoordinator" = type { %"class.blink::HeapHashMap.74", i32, i32 }
%"class.blink::HeapHashMap.74" = type { %"class.WTF::HashMap.77" }
%"class.WTF::HashMap.77" = type { %"class.WTF::HashTable.78" }
%"class.WTF::HashTable.78" = type <{ %"struct.WTF::KeyValuePair.80"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.80" = type opaque
%"class.std::__1::unique_ptr.81" = type { %"class.std::__1::__compressed_pair.82" }
%"class.std::__1::__compressed_pair.82" = type { %"struct.std::__1::__compressed_pair_elem.83" }
%"struct.std::__1::__compressed_pair_elem.83" = type { %"class.blink::PolicyContainer"* }
%"class.blink::PolicyContainer" = type { %"class.mojo::StructPtr", %"class.mojo::AssociatedRemote" }
%"class.mojo::StructPtr" = type { %"class.std::__1::unique_ptr.84" }
%"class.std::__1::unique_ptr.84" = type { %"class.std::__1::__compressed_pair.85" }
%"class.std::__1::__compressed_pair.85" = type { %"struct.std::__1::__compressed_pair_elem.86" }
%"struct.std::__1::__compressed_pair_elem.86" = type { %"class.blink::mojom::blink::PolicyContainerPolicies"* }
%"class.blink::mojom::blink::PolicyContainerPolicies" = type { i32, i32, %"class.WTF::Vector.87" }
%"class.WTF::Vector.87" = type { %"class.WTF::VectorBuffer.88" }
%"class.WTF::VectorBuffer.88" = type { %"class.WTF::VectorBufferBase.89" }
%"class.WTF::VectorBufferBase.89" = type { %"class.mojo::StructPtr.90"*, i32, i32 }
%"class.mojo::StructPtr.90" = type { %"class.std::__1::unique_ptr.91" }
%"class.std::__1::unique_ptr.91" = type { %"class.std::__1::__compressed_pair.92" }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.93" }
%"struct.std::__1::__compressed_pair_elem.93" = type { %"class.network::mojom::blink::ContentSecurityPolicy"* }
%"class.network::mojom::blink::ContentSecurityPolicy" = type { %"class.mojo::StructPtr.94", %"class.WTF::HashMap.101", %"class.WTF::HashMap.106", i8, i8, i8, i32, %"class.mojo::InlinedStructPtr", i8, %"class.WTF::Vector.111", i32, %"class.mojo::StructPtr.116", %"class.WTF::Vector.111" }
%"class.mojo::StructPtr.94" = type { %"class.std::__1::unique_ptr.95" }
%"class.std::__1::unique_ptr.95" = type { %"class.std::__1::__compressed_pair.96" }
%"class.std::__1::__compressed_pair.96" = type { %"struct.std::__1::__compressed_pair_elem.97" }
%"struct.std::__1::__compressed_pair_elem.97" = type { %"class.network::mojom::blink::CSPSource"* }
%"class.network::mojom::blink::CSPSource" = type <{ %"class.WTF::String", %"class.WTF::String", i32, [4 x i8], %"class.WTF::String", i8, i8, [6 x i8] }>
%"class.WTF::HashMap.101" = type { %"class.WTF::HashTable.102" }
%"class.WTF::HashTable.102" = type <{ %"struct.WTF::KeyValuePair.105"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.105" = type opaque
%"class.WTF::HashMap.106" = type { %"class.WTF::HashTable.107" }
%"class.WTF::HashTable.107" = type <{ %"struct.WTF::KeyValuePair.110"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.110" = type opaque
%"class.mojo::InlinedStructPtr" = type <{ %"class.network::mojom::blink::ContentSecurityPolicyHeader", i32, [4 x i8] }>
%"class.network::mojom::blink::ContentSecurityPolicyHeader" = type { %"class.WTF::String", i32, i32 }
%"class.mojo::StructPtr.116" = type { %"class.std::__1::unique_ptr.117" }
%"class.std::__1::unique_ptr.117" = type { %"class.std::__1::__compressed_pair.118" }
%"class.std::__1::__compressed_pair.118" = type { %"struct.std::__1::__compressed_pair_elem.119" }
%"struct.std::__1::__compressed_pair_elem.119" = type { %"class.network::mojom::blink::CSPTrustedTypes"* }
%"class.network::mojom::blink::CSPTrustedTypes" = type <{ %"class.WTF::Vector.111", i8, i8, [6 x i8] }>
%"class.WTF::Vector.111" = type { %"class.WTF::VectorBuffer.112" }
%"class.WTF::VectorBuffer.112" = type { %"class.WTF::VectorBufferBase.113" }
%"class.WTF::VectorBufferBase.113" = type { %"class.WTF::String"*, i32, i32 }
%"class.mojo::AssociatedRemote" = type { %"class.mojo::internal::AssociatedInterfacePtrState" }
%"class.mojo::internal::AssociatedInterfacePtrState" = type { %"class.mojo::internal::AssociatedInterfacePtrStateBase.base", %"class.std::__1::unique_ptr.213" }
%"class.mojo::internal::AssociatedInterfacePtrStateBase.base" = type <{ %"class.std::__1::unique_ptr.131", i32 }>
%"class.std::__1::unique_ptr.131" = type { %"class.std::__1::__compressed_pair.132" }
%"class.std::__1::__compressed_pair.132" = type { %"struct.std::__1::__compressed_pair_elem.133" }
%"struct.std::__1::__compressed_pair_elem.133" = type { %"class.mojo::InterfaceEndpointClient"* }
%"class.mojo::InterfaceEndpointClient" = type { %"class.mojo::MessageReceiverWithResponder", i8, %"class.base::RepeatingCallback", %"class.base::OnceCallback", %"class.absl::optional.140", %"class.absl::optional.145", %"class.mojo::ConnectionGroup::Ref", i32, %"class.mojo::ScopedInterfaceEndpointHandle", %"class.std::__1::unique_ptr.166", %"class.mojo::InterfaceEndpointController"*, %"class.mojo::MessageReceiverWithResponderStatus"*, %"class.mojo::InterfaceEndpointClient::HandleIncomingMessageThunk", %"class.mojo::MessageDispatcher", %"class.std::__1::map.188", %"class.std::__1::map.199", i64, %"class.base::OnceCallback.159", %"class.base::OnceCallback.208", i8, %class.scoped_refptr.150, %"class.mojo::internal::ControlMessageProxy", %"class.mojo::internal::ControlMessageHandler", i8*, %"class.base::WeakPtrFactory.209" }
%"class.mojo::MessageReceiverWithResponder" = type { %"class.mojo::MessageReceiver" }
%"class.mojo::MessageReceiver" = type { i32 (...)** }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.134 }
%class.scoped_refptr.134 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic.135" }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.absl::optional.140" = type { %"class.absl::optional_internal::optional_data.141" }
%"class.absl::optional_internal::optional_data.141" = type { %"class.absl::optional_internal::optional_data_base.142" }
%"class.absl::optional_internal::optional_data_base.142" = type { %"class.absl::optional_internal::optional_data_dtor_base.143" }
%"class.absl::optional_internal::optional_data_dtor_base.143" = type { i8, %union.anon.144 }
%union.anon.144 = type { %"class.base::TimeDelta" }
%"class.base::TimeDelta" = type { i64 }
%"class.absl::optional.145" = type { %"class.absl::optional_internal::optional_data.146" }
%"class.absl::optional_internal::optional_data.146" = type { %"class.absl::optional_internal::optional_data_base.147" }
%"class.absl::optional_internal::optional_data_base.147" = type { %"class.absl::optional_internal::optional_data_dtor_base.148" }
%"class.absl::optional_internal::optional_data_dtor_base.148" = type { i8, %union.anon.149 }
%union.anon.149 = type { %"class.base::OneShotTimer" }
%"class.base::OneShotTimer" = type { %"class.base::internal::TimerBase", %"class.base::OnceCallback.159" }
%"class.base::internal::TimerBase" = type { i32 (...)**, %class.scoped_refptr.150, %"class.base::SequenceCheckerDoNothing", %"class.base::internal::TaskDestructionDetector"*, %"class.base::Location", %"class.base::TimeDelta", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TickClock"*, i8, %"class.base::WeakPtrFactory" }
%"class.base::SequenceCheckerDoNothing" = type { i8 }
%"class.base::internal::TaskDestructionDetector" = type opaque
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%"class.base::TickClock" = type { i32 (...)** }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.152 }
%class.scoped_refptr.152 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.153", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.153" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.154" }
%"struct.std::__1::atomic.154" = type { %"struct.std::__1::__atomic_base.155" }
%"struct.std::__1::__atomic_base.155" = type { %"struct.std::__1::__atomic_base.156" }
%"struct.std::__1::__atomic_base.156" = type { %"struct.std::__1::__cxx_atomic_impl.157" }
%"struct.std::__1::__cxx_atomic_impl.157" = type { %"struct.std::__1::__cxx_atomic_base_impl.158" }
%"struct.std::__1::__cxx_atomic_base_impl.158" = type { i8 }
%"class.mojo::ConnectionGroup::Ref" = type { i32, %class.scoped_refptr.164 }
%class.scoped_refptr.164 = type { %"class.mojo::ConnectionGroup"* }
%"class.mojo::ConnectionGroup" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.226", [4 x i8], %"class.base::RepeatingCallback", %class.scoped_refptr.150, %"class.mojo::ConnectionGroup::Ref", %"struct.std::__1::atomic", [4 x i8] }>
%"class.base::RefCountedThreadSafe.226" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.mojo::ScopedInterfaceEndpointHandle" = type { %class.scoped_refptr.165 }
%class.scoped_refptr.165 = type { %"class.mojo::ScopedInterfaceEndpointHandle::State"* }
%"class.mojo::ScopedInterfaceEndpointHandle::State" = type opaque
%"class.std::__1::unique_ptr.166" = type { %"class.std::__1::__compressed_pair.167" }
%"class.std::__1::__compressed_pair.167" = type { %"struct.std::__1::__compressed_pair_elem.168" }
%"struct.std::__1::__compressed_pair_elem.168" = type { %"class.mojo::AssociatedGroup"* }
%"class.mojo::AssociatedGroup" = type { %"class.base::RepeatingCallback.169", %class.scoped_refptr.170 }
%"class.base::RepeatingCallback.169" = type { %"class.base::internal::CallbackBaseCopyable" }
%class.scoped_refptr.170 = type { %"class.mojo::AssociatedGroupController"* }
%"class.mojo::AssociatedGroupController" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.171", [4 x i8] }>
%"class.base::RefCountedThreadSafe.171" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.mojo::InterfaceEndpointController" = type opaque
%"class.mojo::MessageReceiverWithResponderStatus" = type { %"class.mojo::MessageReceiver" }
%"class.mojo::InterfaceEndpointClient::HandleIncomingMessageThunk" = type { %"class.mojo::MessageReceiver", %"class.mojo::InterfaceEndpointClient"* }
%"class.mojo::MessageDispatcher" = type { %"class.mojo::MessageReceiver", %"class.std::__1::unique_ptr.175", %"class.std::__1::unique_ptr.181", %"class.mojo::MessageReceiver"*, %"class.base::WeakPtrFactory.187" }
%"class.std::__1::unique_ptr.175" = type { %"class.std::__1::__compressed_pair.176" }
%"class.std::__1::__compressed_pair.176" = type { %"struct.std::__1::__compressed_pair_elem.177" }
%"struct.std::__1::__compressed_pair_elem.177" = type { %"class.mojo::MessageReceiver"* }
%"class.std::__1::unique_ptr.181" = type { %"class.std::__1::__compressed_pair.182" }
%"class.std::__1::__compressed_pair.182" = type { %"struct.std::__1::__compressed_pair_elem.183" }
%"struct.std::__1::__compressed_pair_elem.183" = type { %"class.mojo::MessageFilter"* }
%"class.mojo::MessageFilter" = type { i32 (...)** }
%"class.base::WeakPtrFactory.187" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.std::__1::map.188" = type { %"class.std::__1::__tree.189" }
%"class.std::__1::__tree.189" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.190", %"class.std::__1::__compressed_pair.194" }
%"class.std::__1::__compressed_pair.190" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"class.std::__1::__compressed_pair.194" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"class.std::__1::map.199" = type { %"class.std::__1::__tree.200" }
%"class.std::__1::__tree.200" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.201", %"class.std::__1::__compressed_pair.205" }
%"class.std::__1::__compressed_pair.201" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"class.std::__1::__compressed_pair.205" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"class.base::OnceCallback.159" = type { %"class.base::internal::CallbackBase" }
%"class.base::OnceCallback.208" = type { %"class.base::internal::CallbackBase" }
%class.scoped_refptr.150 = type { %"class.base::SequencedTaskRunner"* }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.151" }>
%"class.base::RefCountedThreadSafe.151" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.mojo::internal::ControlMessageProxy" = type { %"class.mojo::InterfaceEndpointClient"*, i8, %"class.base::OnceCallback.159" }
%"class.mojo::internal::ControlMessageHandler" = type <{ %"class.mojo::MessageReceiverWithResponderStatus", %"class.mojo::InterfaceEndpointClient"*, i32, [4 x i8] }>
%"class.base::WeakPtrFactory.209" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.std::__1::unique_ptr.213" = type { %"class.std::__1::__compressed_pair.214" }
%"class.std::__1::__compressed_pair.214" = type { %"struct.std::__1::__compressed_pair_elem.215" }
%"struct.std::__1::__compressed_pair_elem.215" = type { %"class.blink::mojom::blink::PolicyContainerHostProxy"* }
%"class.blink::mojom::blink::PolicyContainerHostProxy" = type { %"class.blink::mojom::blink::PolicyContainerHost", %"class.mojo::MessageReceiverWithResponder"* }
%"class.blink::mojom::blink::PolicyContainerHost" = type { i32 (...)** }
%"class.blink::Member.222" = type { %"class.blink::MemberBase.223" }
%"class.blink::MemberBase.223" = type { %"class.blink::OriginTrialContext"* }
%"class.blink::OriginTrialContext" = type opaque
%"class.blink::Member.224" = type { %"class.blink::MemberBase.225" }
%"class.blink::MemberBase.225" = type { %"class.blink::ContentSecurityPolicy"* }
%"class.blink::ContentSecurityPolicy" = type opaque
%"class.device::mojom::blink::NDEFRecord" = type { i32, %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::Vector", %"class.mojo::StructPtr.248" }
%"class.mojo::StructPtr.248" = type { %"class.std::__1::unique_ptr.249" }
%"class.std::__1::unique_ptr.249" = type { %"class.std::__1::__compressed_pair.250" }
%"class.std::__1::__compressed_pair.250" = type { %"struct.std::__1::__compressed_pair_elem.251" }
%"struct.std::__1::__compressed_pair_elem.251" = type { %"class.device::mojom::blink::NDEFMessage"* }
%"class.device::mojom::blink::NDEFMessage" = type { %"class.WTF::Vector.252" }
%"class.WTF::Vector.252" = type { %"class.WTF::VectorBuffer.253" }
%"class.WTF::VectorBuffer.253" = type { %"class.WTF::VectorBufferBase.254" }
%"class.WTF::VectorBufferBase.254" = type { %"class.mojo::StructPtr.255"*, i32, i32 }
%"class.mojo::StructPtr.255" = type { %"class.std::__1::unique_ptr.256" }
%"class.std::__1::unique_ptr.256" = type { %"class.std::__1::__compressed_pair.257" }
%"class.std::__1::__compressed_pair.257" = type { %"struct.std::__1::__compressed_pair_elem.258" }
%"struct.std::__1::__compressed_pair_elem.258" = type { %"class.device::mojom::blink::NDEFRecord"* }
%"class.blink::NDEFRecordInit" = type { %"class.blink::IDLDictionaryBase", %"class.blink::StringOrArrayBufferOrArrayBufferViewOrNDEFMessageInit", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String" }
%"class.blink::IDLDictionaryBase" = type { i32 (...)** }
%"class.blink::StringOrArrayBufferOrArrayBufferViewOrNDEFMessageInit" = type { i32, %"class.blink::Member.229", %"class.blink::NotShared", %"class.blink::Member.235", %"class.WTF::String" }
%"class.blink::Member.229" = type { %"class.blink::MemberBase.230" }
%"class.blink::MemberBase.230" = type { %"class.blink::DOMArrayBuffer"* }
%"class.blink::DOMArrayBuffer" = type { %"class.blink::DOMArrayBufferBase.base", [7 x i8] }
%"class.blink::DOMArrayBufferBase.base" = type <{ %"class.blink::ScriptWrappable", %"class.blink::ArrayBufferContents", i8 }>
%"class.blink::ArrayBufferContents" = type { %"class.std::__1::shared_ptr" }
%"class.std::__1::shared_ptr" = type { %"class.v8::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::BackingStore" = type { i8 }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.blink::NotShared" = type { %"class.blink::Member.231" }
%"class.blink::Member.231" = type { %"class.blink::MemberBase.232" }
%"class.blink::MemberBase.232" = type { %"class.blink::DOMArrayBufferView"* }
%"class.blink::DOMArrayBufferView" = type { %"class.blink::ScriptWrappable", i8*, i64, %"class.blink::Member.233" }
%"class.blink::Member.233" = type { %"class.blink::MemberBase.234" }
%"class.blink::MemberBase.234" = type { %"class.blink::DOMArrayBufferBase"* }
%"class.blink::DOMArrayBufferBase" = type <{ %"class.blink::ScriptWrappable", %"class.blink::ArrayBufferContents", i8, [7 x i8] }>
%"class.blink::Member.235" = type { %"class.blink::MemberBase.236" }
%"class.blink::MemberBase.236" = type { %"class.blink::NDEFMessageInit"* }
%"class.blink::NDEFMessageInit" = type { %"class.blink::IDLDictionaryBase", i8, %"class.blink::HeapVector.237" }
%"class.blink::HeapVector.237" = type { %"class.WTF::Vector.240" }
%"class.WTF::Vector.240" = type { %"class.WTF::VectorBuffer.241" }
%"class.WTF::VectorBuffer.241" = type { %"class.WTF::VectorBufferBase.242" }
%"class.WTF::VectorBufferBase.242" = type { %"class.blink::Member.243"*, i32, i32 }
%"class.blink::Member.243" = type opaque
%"class.blink::ExceptionState" = type { i32 (...)**, %"class.blink::ExceptionContext", %"class.blink::ExceptionState::ContextScope"*, %"class.v8::Isolate"*, i32, %"class.WTF::String", %"class.blink::TraceWrapperV8Reference.245" }
%"class.blink::ExceptionContext" = type { i16, i16, i8*, i8* }
%"class.blink::ExceptionState::ContextScope" = type { %"class.blink::ExceptionState"*, %"class.blink::ExceptionState::ContextScope"*, %"class.blink::ExceptionContext" }
%"class.blink::TraceWrapperV8Reference.245" = type { %"class.v8::TracedReference.246" }
%"class.v8::TracedReference.246" = type { %"class.v8::BasicTracedReference.247" }
%"class.v8::BasicTracedReference.247" = type { %"class.v8::TracedReferenceBase" }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"class.WTF::StringUTF8Adaptor" = type <{ %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.blink::KURL" = type { i8, i8, %"class.WTF::String", %"struct.url::Parsed", %"class.WTF::String", %"class.std::__1::unique_ptr.506" }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr.506" = type { %"class.std::__1::__compressed_pair.507" }
%"class.std::__1::__compressed_pair.507" = type { %"struct.std::__1::__compressed_pair_elem.508" }
%"struct.std::__1::__compressed_pair_elem.508" = type { %"class.blink::KURL"* }
%"class.blink::LocalDOMWindow" = type { %"class.blink::DOMWindow", %"class.blink::ExecutionContext.base", %"class.blink::Supplementable.770", %"class.blink::ThreadState::PrefinalizerRegistration", %"class.blink::Member.778", %"class.blink::Member.541", %"class.blink::Member.780", i8, %"class.blink::Member.782", %"class.blink::Member.784", %"class.blink::Member.786", %"class.blink::Member.786", %"class.blink::Member.786", %"class.blink::Member.786", %"class.blink::Member.786", %"class.blink::Member.786", %"class.blink::Member.788", %"class.blink::Member.790", %"class.blink::Member.792", %"class.blink::Member.794", %"class.blink::Member.796", %"class.WTF::String", %"class.WTF::String", %"class.WTF::Vector.111", %"class.blink::Member.798", %class.scoped_refptr.800, %"class.blink::HeapHashSet.868", %"class.blink::Member.875", %"class.blink::HeapHashMap.888", %"class.std::__1::unique_ptr.895", %"class.blink::Member.907", %"class.blink::Member.928", %"class.blink::Member.930", %"class.blink::Member.932", %"class.WTF::Vector.935", %"class.util::TokenType.668", %"class.WTF::HashSet.940", %"class.WTF::Deque.944" }
%"class.blink::DOMWindow" = type { %"class.blink::EventTargetWithInlineData", %"class.blink::Member.657", %"class.blink::Member.659", %"class.blink::Member.661", %"class.blink::Member.663", i8, %"class.WTF::Vector.665" }
%"class.blink::EventTargetWithInlineData" = type { %"class.blink::EventTarget", %"class.blink::EventTargetData" }
%"class.blink::EventTarget" = type { %"class.blink::ScriptWrappable" }
%"class.blink::EventTargetData" = type { %"class.blink::EventListenerMap", %"class.std::__1::unique_ptr.650" }
%"class.blink::EventListenerMap" = type { %"class.blink::HeapVector.638" }
%"class.blink::HeapVector.638" = type { %"class.WTF::Vector.641" }
%"class.WTF::Vector.641" = type { %"class.WTF::VectorBuffer.642" }
%"class.WTF::VectorBuffer.642" = type { %"class.WTF::VectorBufferBase.643", [32 x i8] }
%"class.WTF::VectorBufferBase.643" = type { %"struct.std::__1::pair.644"*, i32, i32 }
%"struct.std::__1::pair.644" = type { %"class.WTF::AtomicString", %"class.blink::Member.645" }
%"class.blink::Member.645" = type { %"class.blink::MemberBase.646" }
%"class.blink::MemberBase.646" = type { %"class.blink::HeapVector.647"* }
%"class.blink::HeapVector.647" = type opaque
%"class.std::__1::unique_ptr.650" = type { %"class.std::__1::__compressed_pair.651" }
%"class.std::__1::__compressed_pair.651" = type { %"struct.std::__1::__compressed_pair_elem.652" }
%"struct.std::__1::__compressed_pair_elem.652" = type { %"class.WTF::Vector.653"* }
%"class.WTF::Vector.653" = type opaque
%"class.blink::Member.657" = type { %"class.blink::MemberBase.658" }
%"class.blink::MemberBase.658" = type { %"class.blink::Frame"* }
%"class.blink::Frame" = type { i32 (...)**, %"class.blink::FrameTree", %"class.blink::Member.1200", %"class.blink::Member.1202", %"class.blink::Member.1204", i8, i32, i8, i32, %"class.blink::Member.1206", %"class.blink::Member.659", %"class.blink::FrameLifecycle", %"class.blink::Member.657", %"class.blink::Member.657", %"class.blink::Member.657", %"class.blink::Member.657", %"class.blink::Member.657", %"class.blink::Member.657", %"class.blink::Member.913", %"class.blink::NavigationRateLimiter", i32, %"class.base::flat_map", %"class.blink::Member.1216", i8, %"class.base::UnguessableToken", %"class.absl::optional.1218", %"class.absl::optional.1223", %"class.blink::UserActivationState", i8, [7 x i8], %"class.blink::MultiToken", %"class.blink::TaskHandle", %"class.blink::OpenedFrameTracker" }
%"class.blink::FrameTree" = type <{ %"class.blink::Member.657", %"class.WTF::AtomicString", i32, i8, i8, [2 x i8] }>
%"class.blink::Member.1200" = type { %"class.blink::MemberBase.1201" }
%"class.blink::MemberBase.1201" = type { %"class.blink::Page"* }
%"class.blink::Page" = type opaque
%"class.blink::Member.1202" = type { %"class.blink::MemberBase.1203" }
%"class.blink::MemberBase.1203" = type { %"class.blink::FrameOwner"* }
%"class.blink::FrameOwner" = type opaque
%"class.blink::Member.1204" = type { %"class.blink::MemberBase.1205" }
%"class.blink::MemberBase.1205" = type { %"class.blink::DOMWindow"* }
%"class.blink::Member.1206" = type { %"class.blink::MemberBase.1207" }
%"class.blink::MemberBase.1207" = type { %"class.blink::FrameClient"* }
%"class.blink::FrameClient" = type opaque
%"class.blink::FrameLifecycle" = type { i32 }
%"class.blink::Member.913" = type { %"class.blink::MemberBase.914" }
%"class.blink::MemberBase.914" = type { %"class.blink::LocalFrame"* }
%"class.blink::LocalFrame" = type <{ %"class.blink::Frame", %"class.blink::FrameScheduler::Delegate", %"class.blink::Supplementable.1235", %"class.blink::mojom::blink::LocalFrame", %"class.blink::mojom::blink::LocalMainFrame", %"class.blink::mojom::blink::FullscreenVideoElementHandler", %"class.blink::mojom::blink::HighPriorityLocalFrame", %"class.std::__1::unique_ptr.1243", %"class.blink::HeapMojoUniqueReceiverSet", %"class.blink::HeapHashSet.1264", %"class.blink::FrameLoader", %"class.blink::Member.1285", %"class.blink::Member.558", %"class.blink::Member.1287", %"class.blink::Member.1289", %"class.blink::Member.1291", %"class.blink::Member.1293", i32, i8, [3 x i8], float, float, i64, %"class.blink::Member.1295", %class.scoped_refptr.1297, %"class.blink::Member.1298", %"class.blink::Member.1300", %"class.blink::Member.1302", %"class.blink::Member.1304", %"class.blink::Member.1306", %"class.blink::Member.1308", %"class.blink::Member.1310", %"class.blink::InterfaceRegistry"*, %"class.blink::HeapMojoRemote.1312", %"class.blink::mojom::blink::ViewportIntersectionState", %"class.std::__1::unique_ptr.1325", %"class.blink::ClientHintsPreferences", i8, [7 x i8], %"class.base::RepeatingCallback.1331", %"class.std::__1::unique_ptr.1332", %"class.absl::optional.1223", i32, [4 x i8], %"class.std::__1::unique_ptr.1338", %"class.blink::HeapMojoAssociatedRemote", %"class.blink::HeapMojoAssociatedRemote.1356", %"class.blink::HeapMojoAssociatedReceiver", %"class.blink::HeapMojoAssociatedReceiver.1375", %"class.blink::HeapMojoReceiver", %"class.blink::HeapMojoAssociatedReceiver.1389", i32, [4 x i8], %"class.base::TimeTicks", %"class.blink::Member.1397", %"class.blink::Member.1399", %"class.blink::Member.1401", %"class.blink::Member.1403", %"class.mojo::StructPtr.1406", %"class.blink::Member.1415", %"class.blink::TransientAllowFullscreen", %"class.blink::PaymentRequestToken", i8, [3 x i8], %"class.gfx::Rect", %"class.absl::optional.1417", i8, [7 x i8] }>
%"class.blink::FrameScheduler::Delegate" = type { i32 (...)** }
%"class.blink::Supplementable.1235" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.1236" }
%"class.blink::HeapHashMap.1236" = type { %"class.WTF::HashMap.1239" }
%"class.WTF::HashMap.1239" = type { %"class.WTF::HashTable.1240" }
%"class.WTF::HashTable.1240" = type <{ %"struct.WTF::KeyValuePair.1242"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1242" = type opaque
%"class.blink::mojom::blink::LocalFrame" = type { i32 (...)** }
%"class.blink::mojom::blink::LocalMainFrame" = type { i32 (...)** }
%"class.blink::mojom::blink::FullscreenVideoElementHandler" = type { i32 (...)** }
%"class.blink::mojom::blink::HighPriorityLocalFrame" = type { i32 (...)** }
%"class.std::__1::unique_ptr.1243" = type { %"class.std::__1::__compressed_pair.1244" }
%"class.std::__1::__compressed_pair.1244" = type { %"struct.std::__1::__compressed_pair_elem.1245" }
%"struct.std::__1::__compressed_pair_elem.1245" = type { %"class.blink::FrameScheduler"* }
%"class.blink::FrameScheduler" = type { %"class.blink::FrameOrWorkerScheduler" }
%"class.blink::FrameOrWorkerScheduler" = type { i32 (...)**, %"class.WTF::HashMap.898", %"class.base::WeakPtrFactory.903" }
%"class.WTF::HashMap.898" = type { %"class.WTF::HashTable.899" }
%"class.WTF::HashTable.899" = type <{ %"struct.WTF::KeyValuePair.902"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.902" = type opaque
%"class.base::WeakPtrFactory.903" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.blink::HeapMojoUniqueReceiverSet" = type { %"class.blink::Member.1249" }
%"class.blink::Member.1249" = type { %"class.blink::MemberBase.1250" }
%"class.blink::MemberBase.1250" = type { %"class.blink::HeapMojoUniqueReceiverSet<blink::mojom::blink::PauseSubresourceLoadingHandle, std::__1::default_delete<blink::mojom::blink::PauseSubresourceLoadingHandle>, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper"* }
%"class.blink::HeapMojoUniqueReceiverSet<blink::mojom::blink::PauseSubresourceLoadingHandle, std::__1::default_delete<blink::mojom::blink::PauseSubresourceLoadingHandle>, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper" = type { %"class.blink::ContextLifecycleObserver", %"class.mojo::ReceiverSetBase" }
%"class.blink::ContextLifecycleObserver" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::WeakMember.911" }
%"class.blink::WeakMember.911" = type { %"class.blink::MemberBase.912" }
%"class.blink::MemberBase.912" = type { %"class.blink::ContextLifecycleNotifier"* }
%"class.mojo::ReceiverSetBase" = type { %"class.mojo::ReceiverSetState" }
%"class.mojo::ReceiverSetState" = type { %"class.base::RepeatingCallback", %"class.base::RepeatingCallback.1253", i64, %"class.std::__1::map.1254", i8*, i64, %"class.base::WeakPtrFactory.1263" }
%"class.base::RepeatingCallback.1253" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.std::__1::map.1254" = type { %"class.std::__1::__tree.1255" }
%"class.std::__1::__tree.1255" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.1256", %"class.std::__1::__compressed_pair.1260" }
%"class.std::__1::__compressed_pair.1256" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"class.std::__1::__compressed_pair.1260" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"class.base::WeakPtrFactory.1263" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.blink::HeapHashSet.1264" = type { %"class.WTF::HashSet.1267" }
%"class.WTF::HashSet.1267" = type { %"class.WTF::HashTable.1268" }
%"class.WTF::HashTable.1268" = type <{ %"class.blink::WeakMember.1270"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.1270" = type opaque
%"class.blink::FrameLoader" = type { %"class.blink::Member.913", %"class.blink::Member.1271", %"class.blink::Member.1273", %"class.std::__1::unique_ptr.1275", i32, i8, i8, i8, i32, %"class.blink::WebScopedVirtualTimePauser", %"class.WTF::HashSet.1281" }
%"class.blink::Member.1271" = type { %"class.blink::MemberBase.1272" }
%"class.blink::MemberBase.1272" = type { %"class.blink::ProgressTracker"* }
%"class.blink::ProgressTracker" = type opaque
%"class.blink::Member.1273" = type { %"class.blink::MemberBase.1274" }
%"class.blink::MemberBase.1274" = type { %"class.blink::DocumentLoader"* }
%"class.blink::DocumentLoader" = type opaque
%"class.std::__1::unique_ptr.1275" = type { %"class.std::__1::__compressed_pair.1276" }
%"class.std::__1::__compressed_pair.1276" = type { %"struct.std::__1::__compressed_pair_elem.1277" }
%"struct.std::__1::__compressed_pair_elem.1277" = type { %"struct.blink::FrameLoader::ClientNavigationState"* }
%"struct.blink::FrameLoader::ClientNavigationState" = type { %"class.blink::KURL" }
%"class.blink::WebScopedVirtualTimePauser" = type { %"class.base::TimeTicks", i8, i8, i32, %"class.blink::scheduler::MainThreadSchedulerImpl"*, %"class.blink::WebString", i64 }
%"class.blink::scheduler::MainThreadSchedulerImpl" = type opaque
%"class.blink::WebString" = type { %class.scoped_refptr }
%"class.WTF::HashSet.1281" = type { %"class.WTF::HashTable.1282" }
%"class.WTF::HashTable.1282" = type <{ %"class.WTF::String"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.1285" = type { %"class.blink::MemberBase.1286" }
%"class.blink::MemberBase.1286" = type { %"class.blink::LocalFrameView"* }
%"class.blink::LocalFrameView" = type { %"class.blink::FrameView.base", %"class.blink::LayoutSize", %"class.WTF::HashSet.1424", %"class.blink::Member.913", i8, i8, %"class.blink::LayoutSubtreeRootList", %"class.blink::DepthOrderedLayoutObjectList", i8, i32, i32, %"class.blink::HeapTaskRunnerTimer.1429", i8, i32, %"class.blink::Color", %"class.absl::optional.1431", %"class.WTF::AtomicString", %"class.WTF::AtomicString", i8, i32, i64, i8, %"class.blink::LayoutObjectCounter", %"class.blink::Member.1436", %"class.blink::Member.1438", %"class.blink::Member.1438", %"class.std::__1::unique_ptr.1441", i32, [4 x i8], %"class.WTF::HashSet.1444", %"class.blink::Member.1451", %"class.blink::IntSize", %"class.blink::IntSize", i8, i8, [6 x i8], %"class.blink::HeapHashSet.1453", %"class.blink::HeapHashSet.1460", %"class.blink::IntSize", i8, %"class.std::__1::unique_ptr.1468", i8, %"class.blink::Member.1474", i8, i8, i32, %"class.blink::HeapLinkedHashSet", %"class.blink::HeapLinkedHashSet.1486", i8, i32, i8, i8, i8, i8, i8, [3 x i8], %"struct.blink::LifecycleData", %"class.std::__1::unique_ptr.1500", i8, %"class.std::__1::unique_ptr.1506", %"class.std::__1::unique_ptr.1623", %"class.WTF::Vector.1629", i32, %class.scoped_refptr.1634, i32, %"class.base::TimeTicks", i64, i64, %"class.blink::Member.1635", %"class.blink::Member.1637", %"class.blink::Member.1639", %"class.blink::HeapHashSet.1641", %"class.blink::HeapHashSet.1648", %"class.std::__1::unique_ptr.1655", %"class.std::__1::unique_ptr.1662", %"class.WTF::Vector.629" }
%"class.blink::FrameView.base" = type <{ %"class.blink::EmbeddedContentView.base", i8, %"struct.blink::PhysicalRect", [4 x i8], %"class.base::TimeTicks", i32, i8, i8, i8 }>
%"class.blink::EmbeddedContentView.base" = type <{ %"class.blink::GarbageCollectedMixin", %"class.blink::IntRect", i8, i8, i8 }>
%"class.blink::IntRect" = type { %"class.blink::IntPoint", %"class.blink::IntSize" }
%"class.blink::IntPoint" = type { i32, i32 }
%"struct.blink::PhysicalRect" = type { %"struct.blink::PhysicalOffset", %"struct.blink::PhysicalSize" }
%"struct.blink::PhysicalOffset" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::LayoutUnit" = type { i32 }
%"struct.blink::PhysicalSize" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::LayoutSize" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.WTF::HashSet.1424" = type { %"class.WTF::HashTable.1425" }
%"class.WTF::HashTable.1425" = type <{ %class.scoped_refptr.1428*, i32, i32, i32, [4 x i8] }>
%class.scoped_refptr.1428 = type { %"class.blink::LayoutEmbeddedObject"* }
%"class.blink::LayoutEmbeddedObject" = type opaque
%"class.blink::LayoutSubtreeRootList" = type { %"class.blink::DepthOrderedLayoutObjectList" }
%"class.blink::DepthOrderedLayoutObjectList" = type { %"struct.blink::DepthOrderedLayoutObjectListData"* }
%"struct.blink::DepthOrderedLayoutObjectListData" = type opaque
%"class.blink::HeapTaskRunnerTimer.1429" = type { %"class.blink::TimerBase", %"class.blink::WeakMember.1430", { i64, i64 } }
%"class.blink::TimerBase" = type { i32 (...)**, %"class.base::TimeTicks", %"class.base::TimeDelta", %"class.base::Location", %class.scoped_refptr.974, %"class.base::WeakPtrFactory.975" }
%class.scoped_refptr.974 = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::WeakPtrFactory.975" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.blink::WeakMember.1430" = type { %"class.blink::MemberBase.1286" }
%"class.blink::Color" = type { i32 }
%"class.absl::optional.1431" = type { %"class.absl::optional_internal::optional_data.1432" }
%"class.absl::optional_internal::optional_data.1432" = type { %"class.absl::optional_internal::optional_data_base.1433" }
%"class.absl::optional_internal::optional_data_base.1433" = type { %"class.absl::optional_internal::optional_data_dtor_base.1434" }
%"class.absl::optional_internal::optional_data_dtor_base.1434" = type { i8, %union.anon.1435 }
%union.anon.1435 = type { %"class.blink::IntSize" }
%"class.blink::LayoutObjectCounter" = type { i32 }
%"class.blink::Member.1436" = type { %"class.blink::MemberBase.1437" }
%"class.blink::MemberBase.1437" = type { %"class.blink::FragmentAnchor"* }
%"class.blink::FragmentAnchor" = type opaque
%"class.blink::Member.1438" = type { %"class.blink::MemberBase.1439" }
%"class.blink::MemberBase.1439" = type { %"class.blink::HeapHashSet.1440"* }
%"class.blink::HeapHashSet.1440" = type opaque
%"class.std::__1::unique_ptr.1441" = type { %"class.std::__1::__compressed_pair.1442" }
%"class.std::__1::__compressed_pair.1442" = type { %"struct.std::__1::__compressed_pair_elem.1443" }
%"struct.std::__1::__compressed_pair_elem.1443" = type { %"class.WTF::HashSet.1444"* }
%"class.WTF::HashSet.1444" = type { %"class.WTF::HashTable.1445" }
%"class.WTF::HashTable.1445" = type <{ %"class.blink::LayoutObject"**, i32, i32, i32, [4 x i8] }>
%"class.blink::LayoutObject" = type opaque
%"class.blink::Member.1451" = type { %"class.blink::MemberBase.1452" }
%"class.blink::MemberBase.1452" = type { %"class.blink::FrameViewAutoSizeInfo"* }
%"class.blink::FrameViewAutoSizeInfo" = type opaque
%"class.blink::HeapHashSet.1453" = type { %"class.WTF::HashSet.1456" }
%"class.WTF::HashSet.1456" = type { %"class.WTF::HashTable.1457" }
%"class.WTF::HashTable.1457" = type <{ %"class.blink::Member.1459"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.1459" = type opaque
%"class.blink::HeapHashSet.1460" = type { %"class.WTF::HashSet.1463" }
%"class.WTF::HashSet.1463" = type { %"class.WTF::HashTable.1464" }
%"class.WTF::HashTable.1464" = type <{ %"class.blink::Member.1466"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.1466" = type { %"class.blink::MemberBase.1467" }
%"class.blink::MemberBase.1467" = type { %"class.blink::Scrollbar"* }
%"class.blink::Scrollbar" = type { %"class.blink::DisplayItemClient.base", %"class.blink::Member.1696", i32, %"class.blink::ScrollbarTheme"*, i32, i32, float, float, i32, i32, i32, float, i8, i32, i8, %"class.blink::HeapTaskRunnerTimer.1707", float, i8, i8, i8, i8, %"class.blink::IntRect", %"class.blink::Member.558" }
%"class.blink::DisplayItemClient.base" = type <{ i32 (...)**, i8 }>
%"class.blink::Member.1696" = type { %"class.blink::MemberBase.1697" }
%"class.blink::MemberBase.1697" = type { %"class.blink::ScrollableArea"* }
%"class.blink::ScrollableArea" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::ThreadState::PrefinalizerRegistration.1698", %"class.blink::Member.1699", %"class.blink::Member.1701", %"class.blink::Member.1703", %"class.blink::Member.1705", %"class.WTF::Vector.629", i16, %class.scoped_refptr.974 }
%"class.blink::ThreadState::PrefinalizerRegistration.1698" = type { i8 }
%"class.blink::Member.1699" = type { %"class.blink::MemberBase.1700" }
%"class.blink::MemberBase.1700" = type { %"class.blink::MacScrollbarAnimator"* }
%"class.blink::MacScrollbarAnimator" = type opaque
%"class.blink::Member.1701" = type { %"class.blink::MemberBase.1702" }
%"class.blink::MemberBase.1702" = type { %"class.blink::ScrollAnimatorBase"* }
%"class.blink::ScrollAnimatorBase" = type opaque
%"class.blink::Member.1703" = type { %"class.blink::MemberBase.1704" }
%"class.blink::MemberBase.1704" = type { %"class.blink::ProgrammaticScrollAnimator"* }
%"class.blink::ProgrammaticScrollAnimator" = type opaque
%"class.blink::Member.1705" = type { %"class.blink::MemberBase.1706" }
%"class.blink::MemberBase.1706" = type { %"class.blink::DisallowNewWrapper"* }
%"class.blink::DisallowNewWrapper" = type opaque
%"class.blink::ScrollbarTheme" = type opaque
%"class.blink::HeapTaskRunnerTimer.1707" = type { %"class.blink::TimerBase", %"class.blink::WeakMember.1708", { i64, i64 } }
%"class.blink::WeakMember.1708" = type { %"class.blink::MemberBase.1467" }
%"class.blink::IntSize" = type { i32, i32 }
%"class.std::__1::unique_ptr.1468" = type { %"class.std::__1::__compressed_pair.1469" }
%"class.std::__1::__compressed_pair.1469" = type { %"struct.std::__1::__compressed_pair_elem.1470" }
%"struct.std::__1::__compressed_pair_elem.1470" = type { %"class.blink::LayoutAnalyzer"* }
%"class.blink::LayoutAnalyzer" = type opaque
%"class.blink::Member.1474" = type { %"class.blink::MemberBase.1475" }
%"class.blink::MemberBase.1475" = type { %"class.blink::RootFrameViewport"* }
%"class.blink::RootFrameViewport" = type opaque
%"class.blink::HeapLinkedHashSet" = type { %"class.WTF::LinkedHashSet" }
%"class.WTF::LinkedHashSet" = type { %"class.WTF::HashMap.1478", %"class.WTF::VectorBackedLinkedList" }
%"class.WTF::HashMap.1478" = type { %"class.WTF::HashTable.1479" }
%"class.WTF::HashTable.1479" = type <{ %"struct.WTF::KeyValuePair.1481"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1481" = type opaque
%"class.WTF::VectorBackedLinkedList" = type { %"class.WTF::Vector.1482", i32, i32 }
%"class.WTF::Vector.1482" = type { %"class.WTF::VectorBuffer.1483" }
%"class.WTF::VectorBuffer.1483" = type { %"class.WTF::VectorBufferBase.1484" }
%"class.WTF::VectorBufferBase.1484" = type { %"class.WTF::VectorBackedLinkedListNode"*, i32, i32 }
%"class.WTF::VectorBackedLinkedListNode" = type opaque
%"class.blink::HeapLinkedHashSet.1486" = type { %"class.WTF::LinkedHashSet.1489" }
%"class.WTF::LinkedHashSet.1489" = type { %"class.WTF::HashMap.1490", %"class.WTF::VectorBackedLinkedList.1494" }
%"class.WTF::HashMap.1490" = type { %"class.WTF::HashTable.1491" }
%"class.WTF::HashTable.1491" = type <{ %"struct.WTF::KeyValuePair.1493"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1493" = type opaque
%"class.WTF::VectorBackedLinkedList.1494" = type { %"class.WTF::Vector.1495", i32, i32 }
%"class.WTF::Vector.1495" = type { %"class.WTF::VectorBuffer.1496" }
%"class.WTF::VectorBuffer.1496" = type { %"class.WTF::VectorBufferBase.1497" }
%"class.WTF::VectorBufferBase.1497" = type { %"class.WTF::VectorBackedLinkedListNode.1498"*, i32, i32 }
%"class.WTF::VectorBackedLinkedListNode.1498" = type opaque
%"struct.blink::LifecycleData" = type <{ %"class.base::TimeTicks", i32, [4 x i8] }>
%"class.std::__1::unique_ptr.1500" = type { %"class.std::__1::__compressed_pair.1501" }
%"class.std::__1::__compressed_pair.1501" = type { %"struct.std::__1::__compressed_pair_elem.1502" }
%"struct.std::__1::__compressed_pair_elem.1502" = type { %"class.blink::ScrollingCoordinatorContext"* }
%"class.blink::ScrollingCoordinatorContext" = type opaque
%"class.std::__1::unique_ptr.1506" = type { %"class.std::__1::__compressed_pair.1507" }
%"class.std::__1::__compressed_pair.1507" = type { %"struct.std::__1::__compressed_pair_elem.1508" }
%"struct.std::__1::__compressed_pair_elem.1508" = type { %"class.blink::PaintController"* }
%"class.blink::PaintController" = type { i32, %class.scoped_refptr.1509, %class.scoped_refptr.1509, %"class.blink::PaintChunker", i8, i8, %"class.WTF::Vector.1600", i32, i32, i32, [4 x i8], %"class.WTF::HashMap.1605", i32, i32, i32, i32, %"class.WTF::String", %"struct.blink::PaintController::SubsequencesData", %"struct.blink::PaintController::SubsequencesData", i32, i32, i32, i32 }
%class.scoped_refptr.1509 = type { %"class.blink::PaintArtifact"* }
%"class.blink::PaintArtifact" = type { %"class.WTF::RefCounted.1510", [4 x i8], %"class.blink::DisplayItemList", %"class.WTF::Vector.1517" }
%"class.WTF::RefCounted.1510" = type { %"class.base::RefCounted.1511" }
%"class.base::RefCounted.1511" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DisplayItemList" = type <{ %"class.WTF::Vector.1512", i32, [4 x i8] }>
%"class.WTF::Vector.1512" = type { %"class.WTF::VectorBuffer.1513" }
%"class.WTF::VectorBuffer.1513" = type { %"class.WTF::VectorBufferBase.1514" }
%"class.WTF::VectorBufferBase.1514" = type { %"struct.blink::DisplayItemList::ItemSlot"*, i32, i32 }
%"struct.blink::DisplayItemList::ItemSlot" = type { [40 x i8] }
%"class.WTF::Vector.1517" = type { %"class.WTF::VectorBuffer.1518" }
%"class.WTF::VectorBuffer.1518" = type { %"class.WTF::VectorBufferBase.1519" }
%"class.WTF::VectorBufferBase.1519" = type { %"struct.blink::PaintChunk"*, i32, i32 }
%"struct.blink::PaintChunk" = type <{ i32, i32, %"class.blink::Color", float, %"struct.blink::DisplayItem::Id", %"class.blink::RefCountedPropertyTreeState", %"class.std::__1::unique_ptr.1523", %"class.std::__1::unique_ptr.1572", %"class.blink::IntRect", %"class.blink::IntRect", i8, i8, [6 x i8] }>
%"struct.blink::DisplayItem::Id" = type { %"class.blink::DisplayItemClient"*, i32, i32 }
%"class.blink::DisplayItemClient" = type <{ i32 (...)**, i8, [7 x i8] }>
%"class.blink::RefCountedPropertyTreeState" = type { %class.scoped_refptr.1520, %class.scoped_refptr.1521, %class.scoped_refptr.1522 }
%class.scoped_refptr.1520 = type { %"class.blink::TransformPaintPropertyNodeOrAlias"* }
%"class.blink::TransformPaintPropertyNodeOrAlias" = type { %"class.blink::PaintPropertyNode" }
%"class.blink::PaintPropertyNode" = type { %"class.WTF::RefCounted.1536", i8, i8, %class.scoped_refptr.1520, i32, i32 }
%"class.WTF::RefCounted.1536" = type { %"class.base::RefCounted.1537" }
%"class.base::RefCounted.1537" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.1521 = type { %"class.blink::ClipPaintPropertyNodeOrAlias"* }
%"class.blink::ClipPaintPropertyNodeOrAlias" = type { %"class.blink::PaintPropertyNode.1691" }
%"class.blink::PaintPropertyNode.1691" = type { %"class.WTF::RefCounted.1692", i8, i8, %class.scoped_refptr.1521, i32, i32 }
%"class.WTF::RefCounted.1692" = type { %"class.base::RefCounted.1693" }
%"class.base::RefCounted.1693" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.1522 = type { %"class.blink::EffectPaintPropertyNodeOrAlias"* }
%"class.blink::EffectPaintPropertyNodeOrAlias" = type { %"class.blink::PaintPropertyNode.1688" }
%"class.blink::PaintPropertyNode.1688" = type { %"class.WTF::RefCounted.1689", i8, i8, %class.scoped_refptr.1522, i32, i32 }
%"class.WTF::RefCounted.1689" = type { %"class.base::RefCounted.1690" }
%"class.base::RefCounted.1690" = type { %"class.base::subtle::RefCountedBase" }
%"class.std::__1::unique_ptr.1523" = type { %"class.std::__1::__compressed_pair.1524" }
%"class.std::__1::__compressed_pair.1524" = type { %"struct.std::__1::__compressed_pair_elem.1525" }
%"struct.std::__1::__compressed_pair_elem.1525" = type { %"struct.blink::HitTestData"* }
%"struct.blink::HitTestData" = type { %"class.WTF::Vector.1526", %"class.WTF::Vector.1531", %"class.blink::IntRect", %"class.blink::TransformPaintPropertyNode"* }
%"class.WTF::Vector.1526" = type { %"class.WTF::VectorBuffer.1527" }
%"class.WTF::VectorBuffer.1527" = type { %"class.WTF::VectorBufferBase.1528" }
%"class.WTF::VectorBufferBase.1528" = type { %"struct.blink::TouchActionRect"*, i32, i32 }
%"struct.blink::TouchActionRect" = type { %"class.blink::IntRect", i32 }
%"class.WTF::Vector.1531" = type { %"class.WTF::VectorBuffer.1532" }
%"class.WTF::VectorBuffer.1532" = type { %"class.WTF::VectorBufferBase.1533" }
%"class.WTF::VectorBufferBase.1533" = type { %"class.blink::IntRect"*, i32, i32 }
%"class.blink::TransformPaintPropertyNode" = type { %"class.blink::TransformPaintPropertyNodeOrAlias", %"struct.blink::TransformPaintPropertyNode::State", %"class.std::__1::unique_ptr.1551" }
%"struct.blink::TransformPaintPropertyNode::State" = type { %"class.blink::TransformPaintPropertyNode::TransformAndOrigin", %class.scoped_refptr.1544, %"struct.blink::TransformPaintPropertyNode::State::Flags", i8, i32, i64, %"struct.cc::ElementId", %"class.std::__1::unique_ptr.1545", %"struct.cc::ElementId" }
%"class.blink::TransformPaintPropertyNode::TransformAndOrigin" = type { %"class.blink::FloatSize", %"class.std::__1::unique_ptr.1538" }
%"class.blink::FloatSize" = type { float, float }
%"class.std::__1::unique_ptr.1538" = type { %"class.std::__1::__compressed_pair.1539" }
%"class.std::__1::__compressed_pair.1539" = type { %"struct.std::__1::__compressed_pair_elem.1540" }
%"struct.std::__1::__compressed_pair_elem.1540" = type { %"struct.blink::TransformPaintPropertyNode::TransformAndOrigin::MatrixAndOrigin"* }
%"struct.blink::TransformPaintPropertyNode::TransformAndOrigin::MatrixAndOrigin" = type <{ %"class.blink::TransformationMatrix", %"class.blink::FloatPoint3D", [4 x i8] }>
%"class.blink::TransformationMatrix" = type { %"struct.blink::TransformationMatrix::Matrix4" }
%"struct.blink::TransformationMatrix::Matrix4" = type { [4 x [4 x double]] }
%"class.blink::FloatPoint3D" = type { float, float, float }
%class.scoped_refptr.1544 = type { %"class.blink::ScrollPaintPropertyNode"* }
%"class.blink::ScrollPaintPropertyNode" = type { %"class.blink::PaintPropertyNode.1673", %"struct.blink::ScrollPaintPropertyNode::State" }
%"class.blink::PaintPropertyNode.1673" = type { %"class.WTF::RefCounted.1674", i8, i8, %class.scoped_refptr.1544, i32, i32 }
%"class.WTF::RefCounted.1674" = type { %"class.base::RefCounted.1675" }
%"class.base::RefCounted.1675" = type { %"class.base::subtle::RefCountedBase" }
%"struct.blink::ScrollPaintPropertyNode::State" = type { %"class.blink::IntRect", %"class.blink::IntSize", i8, i8, i8, i8, i32, %"struct.cc::ElementId", %"struct.cc::OverscrollBehavior", %"class.absl::optional.1676" }
%"struct.cc::OverscrollBehavior" = type { i32, i32 }
%"class.absl::optional.1676" = type { %"class.absl::optional_internal::optional_data.1677" }
%"class.absl::optional_internal::optional_data.1677" = type { %"class.absl::optional_internal::optional_data_base.1678" }
%"class.absl::optional_internal::optional_data_base.1678" = type { %"class.absl::optional_internal::optional_data_dtor_base.1679" }
%"class.absl::optional_internal::optional_data_dtor_base.1679" = type { i8, %union.anon.1680 }
%union.anon.1680 = type { %"class.cc::SnapContainerData" }
%"class.cc::SnapContainerData" = type { %"struct.cc::ScrollSnapType", %"class.gfx::RectF", %"class.gfx::ScrollOffset", %"class.gfx::ScrollOffset", %"class.std::__1::vector.1681", %"struct.cc::TargetSnapAreaElementIds" }
%"struct.cc::ScrollSnapType" = type { i8, i32, i32 }
%"class.gfx::RectF" = type { %"class.gfx::PointF", %"class.gfx::SizeF" }
%"class.gfx::PointF" = type { float, float }
%"class.gfx::SizeF" = type { float, float }
%"class.gfx::ScrollOffset" = type { float, float }
%"class.std::__1::vector.1681" = type { %"class.std::__1::__vector_base.1682" }
%"class.std::__1::__vector_base.1682" = type { %"struct.cc::SnapAreaData"*, %"struct.cc::SnapAreaData"*, %"class.std::__1::__compressed_pair.1683" }
%"struct.cc::SnapAreaData" = type { %"struct.cc::ScrollSnapAlign", %"class.gfx::RectF", i8, %"struct.cc::ElementId" }
%"struct.cc::ScrollSnapAlign" = type { i32, i32 }
%"class.std::__1::__compressed_pair.1683" = type { %"struct.std::__1::__compressed_pair_elem.1684" }
%"struct.std::__1::__compressed_pair_elem.1684" = type { %"struct.cc::SnapAreaData"* }
%"struct.cc::TargetSnapAreaElementIds" = type { %"struct.cc::ElementId", %"struct.cc::ElementId" }
%"struct.blink::TransformPaintPropertyNode::State::Flags" = type { i8 }
%"class.std::__1::unique_ptr.1545" = type { %"class.std::__1::__compressed_pair.1546" }
%"class.std::__1::__compressed_pair.1546" = type { %"struct.std::__1::__compressed_pair_elem.1547" }
%"struct.std::__1::__compressed_pair_elem.1547" = type { %"struct.cc::StickyPositionConstraint"* }
%"struct.cc::StickyPositionConstraint" = type { i8, float, float, float, float, %"class.gfx::RectF", %"class.gfx::RectF", %"class.gfx::RectF", %"struct.cc::ElementId", %"struct.cc::ElementId" }
%"struct.cc::ElementId" = type { i64 }
%"class.std::__1::unique_ptr.1551" = type { %"class.std::__1::__compressed_pair.1552" }
%"class.std::__1::__compressed_pair.1552" = type { %"struct.std::__1::__compressed_pair_elem.1553" }
%"struct.std::__1::__compressed_pair_elem.1553" = type { %"class.blink::GeometryMapperTransformCache"* }
%"class.blink::GeometryMapperTransformCache" = type <{ %"class.blink::FloatSize", %"class.blink::TransformPaintPropertyNode"*, %"class.std::__1::unique_ptr.1554", %"class.std::__1::unique_ptr.1560", i32, [4 x i8] }>
%"class.std::__1::unique_ptr.1554" = type { %"class.std::__1::__compressed_pair.1555" }
%"class.std::__1::__compressed_pair.1555" = type { %"struct.std::__1::__compressed_pair_elem.1556" }
%"struct.std::__1::__compressed_pair_elem.1556" = type { %"struct.blink::GeometryMapperTransformCache::PlaneRootTransform"* }
%"struct.blink::GeometryMapperTransformCache::PlaneRootTransform" = type <{ %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix", %"class.blink::TransformPaintPropertyNode"*, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.1560" = type { %"class.std::__1::__compressed_pair.1561" }
%"class.std::__1::__compressed_pair.1561" = type { %"struct.std::__1::__compressed_pair_elem.1562" }
%"struct.std::__1::__compressed_pair_elem.1562" = type { %"struct.blink::GeometryMapperTransformCache::ScreenTransform"* }
%"struct.blink::GeometryMapperTransformCache::ScreenTransform" = type <{ %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.1572" = type { %"class.std::__1::__compressed_pair.1573" }
%"class.std::__1::__compressed_pair.1573" = type { %"struct.std::__1::__compressed_pair_elem.1574" }
%"struct.std::__1::__compressed_pair_elem.1574" = type { %"struct.blink::LayerSelectionData"* }
%"struct.blink::LayerSelectionData" = type { %"class.absl::optional.1575", %"class.absl::optional.1575" }
%"class.absl::optional.1575" = type { %"class.absl::optional_internal::optional_data.1576" }
%"class.absl::optional_internal::optional_data.1576" = type { %"class.absl::optional_internal::optional_data_base.1577" }
%"class.absl::optional_internal::optional_data_base.1577" = type { %"class.absl::optional_internal::optional_data_dtor_base.1578" }
%"class.absl::optional_internal::optional_data_dtor_base.1578" = type { i8, [3 x i8], %union.anon.1579 }
%union.anon.1579 = type { %"struct.blink::PaintedSelectionBound" }
%"struct.blink::PaintedSelectionBound" = type <{ i32, %"class.blink::IntPoint", %"class.blink::IntPoint", i8, [3 x i8] }>
%"class.blink::PaintChunker" = type <{ %"class.WTF::Vector.1517"*, %"class.absl::optional.1585", %"class.blink::PropertyTreeStateOrAlias", %"class.blink::Region", i8, i8, i8, i8, %"class.blink::Color", float, [4 x i8] }>
%"class.absl::optional.1585" = type { %"class.absl::optional_internal::optional_data.1586" }
%"class.absl::optional_internal::optional_data.1586" = type { %"class.absl::optional_internal::optional_data_base.1587" }
%"class.absl::optional_internal::optional_data_base.1587" = type { %"class.absl::optional_internal::optional_data_dtor_base.1588" }
%"class.absl::optional_internal::optional_data_dtor_base.1588" = type { i8, %union.anon.1589 }
%union.anon.1589 = type { %"struct.blink::DisplayItem::Id" }
%"class.blink::PropertyTreeStateOrAlias" = type { %"class.blink::TransformPaintPropertyNodeOrAlias"*, %"class.blink::ClipPaintPropertyNodeOrAlias"*, %"class.blink::EffectPaintPropertyNodeOrAlias"* }
%"class.blink::Region" = type { %"class.blink::IntRect", %"class.blink::Region::Shape" }
%"class.blink::Region::Shape" = type { %"class.WTF::Vector.1590", %"class.WTF::Vector.1595" }
%"class.WTF::Vector.1590" = type { %"class.WTF::VectorBuffer.1591" }
%"class.WTF::VectorBuffer.1591" = type { %"class.WTF::VectorBufferBase.1592", [128 x i8] }
%"class.WTF::VectorBufferBase.1592" = type { i32*, i32, i32 }
%"class.WTF::Vector.1595" = type { %"class.WTF::VectorBuffer.1596" }
%"class.WTF::VectorBuffer.1596" = type { %"class.WTF::VectorBufferBase.1597", [128 x i8] }
%"class.WTF::VectorBufferBase.1597" = type { %"struct.blink::Region::Span"*, i32, i32 }
%"struct.blink::Region::Span" = type { i32, i32 }
%"class.WTF::Vector.1600" = type { %"class.WTF::VectorBuffer.1601" }
%"class.WTF::VectorBuffer.1601" = type { %"class.WTF::VectorBufferBase.1602" }
%"class.WTF::VectorBufferBase.1602" = type { %"struct.blink::FrameFirstPaint"*, i32, i32 }
%"struct.blink::FrameFirstPaint" = type <{ i8*, i8, [7 x i8] }>
%"class.WTF::HashMap.1605" = type { %"class.WTF::HashTable.1606" }
%"class.WTF::HashTable.1606" = type <{ %"struct.WTF::KeyValuePair.1609"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1609" = type opaque
%"struct.blink::PaintController::SubsequencesData" = type { %"class.WTF::HashMap.1610", %"class.WTF::Vector.1615" }
%"class.WTF::HashMap.1610" = type { %"class.WTF::HashTable.1611" }
%"class.WTF::HashTable.1611" = type <{ %"struct.WTF::KeyValuePair.1614"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1614" = type opaque
%"class.WTF::Vector.1615" = type { %"class.WTF::VectorBuffer.1616" }
%"class.WTF::VectorBuffer.1616" = type { %"class.WTF::VectorBufferBase.1617" }
%"class.WTF::VectorBufferBase.1617" = type { %"struct.blink::PaintController::SubsequenceMarkers"*, i32, i32 }
%"struct.blink::PaintController::SubsequenceMarkers" = type { %"class.blink::DisplayItemClient"*, i32, i32 }
%"class.std::__1::unique_ptr.1623" = type { %"class.std::__1::__compressed_pair.1624" }
%"class.std::__1::__compressed_pair.1624" = type { %"struct.std::__1::__compressed_pair_elem.1625" }
%"struct.std::__1::__compressed_pair_elem.1625" = type { %"class.blink::PaintArtifactCompositor"* }
%"class.blink::PaintArtifactCompositor" = type opaque
%"class.WTF::Vector.1629" = type { %"class.WTF::VectorBuffer.1630" }
%"class.WTF::VectorBuffer.1630" = type { %"class.WTF::VectorBufferBase.1631" }
%"class.WTF::VectorBufferBase.1631" = type { %"struct.blink::PreCompositedLayerInfo"*, i32, i32 }
%"struct.blink::PreCompositedLayerInfo" = type opaque
%class.scoped_refptr.1634 = type { %"class.blink::LocalFrameUkmAggregator"* }
%"class.blink::LocalFrameUkmAggregator" = type opaque
%"class.blink::Member.1635" = type { %"class.blink::MemberBase.1636" }
%"class.blink::MemberBase.1636" = type { %"class.blink::LayoutShiftTracker"* }
%"class.blink::LayoutShiftTracker" = type opaque
%"class.blink::Member.1637" = type { %"class.blink::MemberBase.1638" }
%"class.blink::MemberBase.1638" = type { %"class.blink::PaintTimingDetector"* }
%"class.blink::PaintTimingDetector" = type opaque
%"class.blink::Member.1639" = type { %"class.blink::MemberBase.1640" }
%"class.blink::MemberBase.1640" = type { %"class.blink::MobileFriendlinessChecker"* }
%"class.blink::MobileFriendlinessChecker" = type opaque
%"class.blink::HeapHashSet.1641" = type { %"class.WTF::HashSet.1644" }
%"class.WTF::HashSet.1644" = type { %"class.WTF::HashTable.1645" }
%"class.WTF::HashTable.1645" = type <{ %"class.blink::WeakMember.1647"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.1647" = type opaque
%"class.blink::HeapHashSet.1648" = type { %"class.WTF::HashSet.1651" }
%"class.WTF::HashSet.1651" = type { %"class.WTF::HashTable.1652" }
%"class.WTF::HashTable.1652" = type <{ %"class.blink::WeakMember.1654"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.1654" = type opaque
%"class.std::__1::unique_ptr.1655" = type { %"class.std::__1::__compressed_pair.1656" }
%"class.std::__1::__compressed_pair.1656" = type { %"struct.std::__1::__compressed_pair_elem.1657" }
%"struct.std::__1::__compressed_pair_elem.1657" = type { %"class.blink::OverlayInterstitialAdDetector"* }
%"class.blink::OverlayInterstitialAdDetector" = type <{ i8, i8, [6 x i8], %"class.base::Time", %"class.blink::IntSize", i32, i8, [3 x i8], i32, i32, i8, i8, [6 x i8] }>
%"class.base::Time" = type { %"class.base::time_internal::TimeBase.1658" }
%"class.base::time_internal::TimeBase.1658" = type { i64 }
%"class.std::__1::unique_ptr.1662" = type { %"class.std::__1::__compressed_pair.1663" }
%"class.std::__1::__compressed_pair.1663" = type { %"struct.std::__1::__compressed_pair_elem.1664" }
%"struct.std::__1::__compressed_pair_elem.1664" = type { %"class.blink::StickyAdDetector"* }
%"class.blink::StickyAdDetector" = type <{ %"class.absl::optional.1665", i32, i32, i32, i8, [3 x i8] }>
%"class.absl::optional.1665" = type { %"class.absl::optional_internal::optional_data.1666" }
%"class.absl::optional_internal::optional_data.1666" = type { %"class.absl::optional_internal::optional_data_base.1667" }
%"class.absl::optional_internal::optional_data_base.1667" = type { %"class.absl::optional_internal::optional_data_dtor_base.1668" }
%"class.absl::optional_internal::optional_data_dtor_base.1668" = type { i8, %union.anon.1669 }
%union.anon.1669 = type { %"class.base::Time" }
%"class.WTF::Vector.629" = type { %"class.WTF::VectorBuffer.630" }
%"class.WTF::VectorBuffer.630" = type { %"class.WTF::VectorBufferBase.631" }
%"class.WTF::VectorBufferBase.631" = type { %"class.base::OnceCallback.159"*, i32, i32 }
%"class.blink::Member.558" = type { %"class.blink::MemberBase.559" }
%"class.blink::MemberBase.559" = type { %"class.blink::Element"* }
%"class.blink::Element" = type { %"class.blink::ContainerNode", %"class.blink::Animatable", %"class.blink::QualifiedName", %"class.blink::Member.523" }
%"class.blink::ContainerNode" = type { %"class.blink::Node", %"class.blink::Member.512", %"class.blink::Member.512" }
%"class.blink::Node" = type { %"class.blink::EventTarget", i32, %"class.blink::Member.512", %"class.blink::Member.514", %"class.blink::Member.512", %"class.blink::Member.512", %"class.blink::Member.516" }
%"class.blink::Member.514" = type { %"class.blink::MemberBase.515" }
%"class.blink::MemberBase.515" = type { %"class.blink::TreeScope"* }
%"class.blink::TreeScope" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::Member.539", %"class.blink::Member.541", %"class.blink::Member.514", %"class.blink::Member.543", %"class.blink::Member.543", %"class.blink::Member.567", %"class.blink::Member.569", %"class.blink::Member.571", %"class.blink::RadioButtonGroupScope", %"class.blink::Member.576", %"class.blink::HeapVector.578" }
%"class.blink::Member.539" = type { %"class.blink::MemberBase.540" }
%"class.blink::MemberBase.540" = type { %"class.blink::ContainerNode"* }
%"class.blink::Member.543" = type { %"class.blink::MemberBase.544" }
%"class.blink::MemberBase.544" = type { %"class.blink::TreeOrderedMap"* }
%"class.blink::TreeOrderedMap" = type { %"class.blink::HeapHashMap.547" }
%"class.blink::HeapHashMap.547" = type { %"class.WTF::HashMap.550" }
%"class.WTF::HashMap.550" = type { %"class.WTF::HashTable.551" }
%"class.WTF::HashTable.551" = type <{ %"struct.WTF::KeyValuePair.553"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.553" = type { %"class.WTF::AtomicString", %"class.blink::Member.554" }
%"class.blink::Member.554" = type { %"class.blink::MemberBase.555" }
%"class.blink::MemberBase.555" = type { %"class.blink::TreeOrderedMap::MapEntry"* }
%"class.blink::TreeOrderedMap::MapEntry" = type { %"class.blink::Member.558", i32, %"class.blink::HeapVector.560" }
%"class.blink::HeapVector.560" = type { %"class.WTF::Vector.563" }
%"class.WTF::Vector.563" = type { %"class.WTF::VectorBuffer.564" }
%"class.WTF::VectorBuffer.564" = type { %"class.WTF::VectorBufferBase.565" }
%"class.WTF::VectorBufferBase.565" = type { %"class.blink::Member.558"*, i32, i32 }
%"class.blink::Member.567" = type { %"class.blink::MemberBase.568" }
%"class.blink::MemberBase.568" = type { %"class.blink::IdTargetObserverRegistry"* }
%"class.blink::IdTargetObserverRegistry" = type opaque
%"class.blink::Member.569" = type { %"class.blink::MemberBase.570" }
%"class.blink::MemberBase.570" = type { %"class.blink::ScopedStyleResolver"* }
%"class.blink::ScopedStyleResolver" = type opaque
%"class.blink::Member.571" = type { %"class.blink::MemberBase.572" }
%"class.blink::MemberBase.572" = type { %"class.blink::DOMSelection"* }
%"class.blink::DOMSelection" = type opaque
%"class.blink::RadioButtonGroupScope" = type { %"class.blink::Member.573" }
%"class.blink::Member.573" = type { %"class.blink::MemberBase.574" }
%"class.blink::MemberBase.574" = type { %"class.blink::HeapHashMap.575"* }
%"class.blink::HeapHashMap.575" = type opaque
%"class.blink::Member.576" = type { %"class.blink::MemberBase.577" }
%"class.blink::MemberBase.577" = type { %"class.blink::SVGTreeScopeResources"* }
%"class.blink::SVGTreeScopeResources" = type opaque
%"class.blink::HeapVector.578" = type { %"class.WTF::Vector.581" }
%"class.WTF::Vector.581" = type { %"class.WTF::VectorBuffer.582" }
%"class.WTF::VectorBuffer.582" = type { %"class.WTF::VectorBufferBase.583" }
%"class.WTF::VectorBufferBase.583" = type { %"class.blink::Member.584"*, i32, i32 }
%"class.blink::Member.584" = type { %"class.blink::MemberBase.585" }
%"class.blink::MemberBase.585" = type { %"class.blink::CSSStyleSheet"* }
%"class.blink::CSSStyleSheet" = type { %"class.blink::StyleSheet", %"class.blink::Member.586", i8, i8, i8, i8, i8, %"class.WTF::String", %class.scoped_refptr.588, %"class.WTF::Vector.589", %"class.WTF::Vector.589", %"class.blink::Member.512", %"class.blink::Member.594", %"class.blink::HeapHashSet.598", %"class.blink::Member.541", %"class.WTF::HashSet.605", %"class.WTF::TextPosition", %"class.blink::Member.609", %"class.blink::HeapVector.611", %"class.blink::Member.618" }
%"class.blink::StyleSheet" = type { %"class.blink::ScriptWrappable" }
%"class.blink::Member.586" = type { %"class.blink::MemberBase.587" }
%"class.blink::MemberBase.587" = type { %"class.blink::StyleSheetContents"* }
%"class.blink::StyleSheetContents" = type opaque
%class.scoped_refptr.588 = type { %"class.blink::MediaQuerySet"* }
%"class.blink::MediaQuerySet" = type opaque
%"class.WTF::Vector.589" = type { %"class.WTF::VectorBuffer.590" }
%"class.WTF::VectorBuffer.590" = type { %"class.WTF::VectorBufferBase.591" }
%"class.WTF::VectorBufferBase.591" = type { %"class.blink::MediaQueryResult"*, i32, i32 }
%"class.blink::MediaQueryResult" = type opaque
%"class.blink::Member.594" = type { %"class.blink::MemberBase.595" }
%"class.blink::MemberBase.595" = type { %"class.blink::CSSRule"* }
%"class.blink::CSSRule" = type { %"class.blink::ScriptWrappable", i8, %"class.blink::Member.596" }
%"class.blink::Member.596" = type { %"class.blink::MemberBase.597" }
%"class.blink::MemberBase.597" = type { %"class.blink::ScriptWrappable"* }
%"class.blink::HeapHashSet.598" = type { %"class.WTF::HashSet.601" }
%"class.WTF::HashSet.601" = type { %"class.WTF::HashTable.602" }
%"class.WTF::HashTable.602" = type <{ %"class.blink::WeakMember.604"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.604" = type { %"class.blink::MemberBase.515" }
%"class.WTF::HashSet.605" = type { %"class.WTF::HashTable.606" }
%"class.WTF::HashTable.606" = type <{ %"class.WTF::AtomicString"*, i32, i32, i32, [4 x i8] }>
%"class.WTF::TextPosition" = type { %"class.WTF::OrdinalNumber", %"class.WTF::OrdinalNumber" }
%"class.WTF::OrdinalNumber" = type { i32 }
%"class.blink::Member.609" = type { %"class.blink::MemberBase.610" }
%"class.blink::MemberBase.610" = type { %"class.blink::MediaList"* }
%"class.blink::MediaList" = type opaque
%"class.blink::HeapVector.611" = type { %"class.WTF::Vector.614" }
%"class.WTF::Vector.614" = type { %"class.WTF::VectorBuffer.615" }
%"class.WTF::VectorBuffer.615" = type { %"class.WTF::VectorBufferBase.616" }
%"class.WTF::VectorBufferBase.616" = type { %"class.blink::Member.594"*, i32, i32 }
%"class.blink::Member.618" = type { %"class.blink::MemberBase.619" }
%"class.blink::MemberBase.619" = type { %"class.blink::CSSRuleList"* }
%"class.blink::CSSRuleList" = type opaque
%"class.blink::Member.516" = type { %"class.blink::MemberBase.517" }
%"class.blink::MemberBase.517" = type { %"class.blink::NodeData"* }
%"class.blink::NodeData" = type { i16, %"class.WTF::ConcurrentlyReadBitField" }
%"class.WTF::ConcurrentlyReadBitField" = type { %"class.WTF::SingleThreadedBitField" }
%"class.WTF::SingleThreadedBitField" = type { i16 }
%"class.blink::Member.512" = type { %"class.blink::MemberBase.513" }
%"class.blink::MemberBase.513" = type { %"class.blink::Node"* }
%"class.blink::Animatable" = type { i32 (...)** }
%"class.blink::Member.523" = type { %"class.blink::MemberBase.524" }
%"class.blink::MemberBase.524" = type { %"class.blink::ElementData"* }
%"class.blink::ElementData" = type { %"class.WTF::ConcurrentlyReadBitField.527", %"class.blink::Member.529", %"class.blink::SpaceSplitString", %"class.WTF::AtomicString" }
%"class.WTF::ConcurrentlyReadBitField.527" = type { %"class.WTF::SingleThreadedBitField.528" }
%"class.WTF::SingleThreadedBitField.528" = type { i32 }
%"class.blink::Member.529" = type { %"class.blink::MemberBase.530" }
%"class.blink::MemberBase.530" = type { %"class.blink::CSSPropertyValueSet"* }
%"class.blink::CSSPropertyValueSet" = type opaque
%"class.blink::SpaceSplitString" = type { %class.scoped_refptr.531 }
%class.scoped_refptr.531 = type { %"class.blink::SpaceSplitString::Data"* }
%"class.blink::SpaceSplitString::Data" = type { %"class.WTF::RefCounted.532", %"class.WTF::AtomicString", %"class.WTF::Vector.534" }
%"class.WTF::RefCounted.532" = type { %"class.base::RefCounted.533" }
%"class.base::RefCounted.533" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.534" = type { %"class.WTF::VectorBuffer.535" }
%"class.WTF::VectorBuffer.535" = type { %"class.WTF::VectorBufferBase.536", [32 x i8] }
%"class.WTF::VectorBufferBase.536" = type { %"class.WTF::AtomicString"*, i32, i32 }
%"class.blink::Member.1287" = type { %"class.blink::MemberBase.1288" }
%"class.blink::MemberBase.1288" = type { %"class.blink::Editor"* }
%"class.blink::Editor" = type opaque
%"class.blink::Member.1289" = type { %"class.blink::MemberBase.1290" }
%"class.blink::MemberBase.1290" = type { %"class.blink::FrameSelection"* }
%"class.blink::FrameSelection" = type opaque
%"class.blink::Member.1291" = type { %"class.blink::MemberBase.1292" }
%"class.blink::MemberBase.1292" = type { %"class.blink::EventHandler"* }
%"class.blink::EventHandler" = type opaque
%"class.blink::Member.1293" = type { %"class.blink::MemberBase.1294" }
%"class.blink::MemberBase.1294" = type { %"class.blink::FrameConsole"* }
%"class.blink::FrameConsole" = type opaque
%"class.blink::Member.1295" = type { %"class.blink::MemberBase.1296" }
%"class.blink::MemberBase.1296" = type { %"class.blink::CoreProbeSink"* }
%"class.blink::CoreProbeSink" = type opaque
%class.scoped_refptr.1297 = type { %"class.blink::InspectorTaskRunner"* }
%"class.blink::InspectorTaskRunner" = type opaque
%"class.blink::Member.1298" = type { %"class.blink::MemberBase.1299" }
%"class.blink::MemberBase.1299" = type { %"class.blink::PerformanceMonitor"* }
%"class.blink::PerformanceMonitor" = type opaque
%"class.blink::Member.1300" = type { %"class.blink::MemberBase.1301" }
%"class.blink::MemberBase.1301" = type { %"class.blink::AdTracker"* }
%"class.blink::AdTracker" = type opaque
%"class.blink::Member.1302" = type { %"class.blink::MemberBase.1303" }
%"class.blink::MemberBase.1303" = type { %"class.blink::IdlenessDetector"* }
%"class.blink::IdlenessDetector" = type opaque
%"class.blink::Member.1304" = type { %"class.blink::MemberBase.1305" }
%"class.blink::MemberBase.1305" = type { %"class.blink::InspectorIssueReporter"* }
%"class.blink::InspectorIssueReporter" = type opaque
%"class.blink::Member.1306" = type { %"class.blink::MemberBase.1307" }
%"class.blink::MemberBase.1307" = type { %"class.blink::InspectorTraceEvents"* }
%"class.blink::InspectorTraceEvents" = type opaque
%"class.blink::Member.1308" = type { %"class.blink::MemberBase.1309" }
%"class.blink::MemberBase.1309" = type { %"class.blink::SmoothScrollSequencer"* }
%"class.blink::SmoothScrollSequencer" = type opaque
%"class.blink::Member.1310" = type { %"class.blink::MemberBase.1311" }
%"class.blink::MemberBase.1311" = type { %"class.blink::ContentCaptureManager"* }
%"class.blink::ContentCaptureManager" = type opaque
%"class.blink::InterfaceRegistry" = type opaque
%"class.blink::HeapMojoRemote.1312" = type { %"class.blink::Member.1313" }
%"class.blink::Member.1313" = type { %"class.blink::MemberBase.1314" }
%"class.blink::MemberBase.1314" = type { %"class.blink::HeapMojoRemote<blink::mojom::blink::ReportingServiceProxy, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper"* }
%"class.blink::HeapMojoRemote<blink::mojom::blink::ReportingServiceProxy, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper" = type { %"class.blink::ContextLifecycleObserver", %"class.mojo::Remote.1317" }
%"class.mojo::Remote.1317" = type { %"class.mojo::internal::InterfacePtrState.1318" }
%"class.mojo::internal::InterfacePtrState.1318" = type { %"class.mojo::internal::InterfacePtrStateBase.base", %"class.std::__1::unique_ptr.1319" }
%"class.mojo::internal::InterfacePtrStateBase.base" = type <{ %class.scoped_refptr.670, %"class.std::__1::unique_ptr.131", %"class.mojo::ScopedHandleBase", [4 x i8], %class.scoped_refptr.150, i32 }>
%class.scoped_refptr.670 = type { %"class.mojo::internal::MultiplexRouter"* }
%"class.mojo::internal::MultiplexRouter" = type <{ %"class.mojo::MessageReceiver", %"class.mojo::AssociatedGroupController.base", [4 x i8], %"class.mojo::PipeControlMessageHandlerDelegate", i32, i8, [3 x i8], %class.scoped_refptr.150, %"class.mojo::MessageHeaderValidator"*, %"class.mojo::MessageDispatcher", %"class.mojo::Connector", %"class.mojo::ScopedHandleBase", [4 x i8], %"class.absl::optional.728", %"class.absl::optional.733", %"class.absl::optional.687", %"class.mojo::PipeControlMessageHandler", %"class.mojo::PipeControlMessageProxy", %"class.base::small_map", i32, [4 x i8], %"class.base::circular_deque", %"class.std::__1::map.753", i8, [7 x i8], %class.scoped_refptr.150, i8, i8, i8, i8, i8, [3 x i8] }>
%"class.mojo::AssociatedGroupController.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.171" }>
%"class.mojo::PipeControlMessageHandlerDelegate" = type { i32 (...)** }
%"class.mojo::MessageHeaderValidator" = type { %"class.mojo::MessageReceiver", %"class.std::__1::basic_string" }
%"class.mojo::Connector" = type { %"class.mojo::MessageReceiver", %"class.base::OnceCallback.159", %"class.mojo::ScopedHandleBase", %"class.mojo::MessageReceiver"*, %class.scoped_refptr.150, %"class.std::__1::unique_ptr.671", %"class.absl::optional.681", %"struct.std::__1::atomic.451", i8, i8, i8, i8, i32, i32, %"class.absl::optional.687", %"class.std::__1::unique_ptr.692", i8, i64, %class.scoped_refptr.725, %"class.base::Lock", i8, i8*, %"class.mojo::Connector::RunLoopNestingObserver"*, i8, i64, %"class.mojo::ConnectionGroup::Ref", %"class.base::WeakPtr", %"class.base::WeakPtrFactory.727" }
%"class.std::__1::unique_ptr.671" = type { %"class.std::__1::__compressed_pair.672" }
%"class.std::__1::__compressed_pair.672" = type { %"struct.std::__1::__compressed_pair_elem.673" }
%"struct.std::__1::__compressed_pair_elem.673" = type { %"class.mojo::SimpleWatcher"* }
%"class.mojo::SimpleWatcher" = type { i32, %class.scoped_refptr.150, i8, %"class.mojo::ScopedHandleBase.674", %class.scoped_refptr.675, %"class.mojo::Handle", i32, %"class.base::RepeatingCallback.676", i8*, %"class.base::WeakPtrFactory.677" }
%"class.mojo::ScopedHandleBase.674" = type { %"class.mojo::TrapHandle" }
%"class.mojo::TrapHandle" = type { %"class.mojo::Handle" }
%class.scoped_refptr.675 = type { %"class.mojo::SimpleWatcher::Context"* }
%"class.mojo::SimpleWatcher::Context" = type opaque
%"class.mojo::Handle" = type { i32 }
%"class.base::RepeatingCallback.676" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::WeakPtrFactory.677" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.absl::optional.681" = type { %"class.absl::optional_internal::optional_data.682" }
%"class.absl::optional_internal::optional_data.682" = type { %"class.absl::optional_internal::optional_data_base.683" }
%"class.absl::optional_internal::optional_data_base.683" = type { %"class.absl::optional_internal::optional_data_dtor_base.684" }
%"class.absl::optional_internal::optional_data_dtor_base.684" = type { i8, %union.anon.685 }
%union.anon.685 = type { %"class.mojo::HandleSignalTracker" }
%"class.mojo::HandleSignalTracker" = type { %"class.base::RepeatingCallback.686", %"struct.mojo::HandleSignalsState", %"class.mojo::SimpleWatcher", %"class.mojo::SimpleWatcher" }
%"class.base::RepeatingCallback.686" = type { %"class.base::internal::CallbackBaseCopyable" }
%"struct.mojo::HandleSignalsState" = type { %struct.MojoHandleSignalsState }
%struct.MojoHandleSignalsState = type { i32, i32 }
%"class.std::__1::unique_ptr.692" = type { %"class.std::__1::__compressed_pair.693" }
%"class.std::__1::__compressed_pair.693" = type { %"struct.std::__1::__compressed_pair_elem.694" }
%"struct.std::__1::__compressed_pair_elem.694" = type { %"class.mojo::SyncHandleWatcher"* }
%"class.mojo::SyncHandleWatcher" = type { %"class.mojo::Handle", i32, %"class.base::RepeatingCallback.695", i8, i64, %class.scoped_refptr.696, %class.scoped_refptr.721 }
%"class.base::RepeatingCallback.695" = type { %"class.base::internal::CallbackBaseCopyable" }
%class.scoped_refptr.696 = type { %"class.mojo::SyncHandleRegistry"* }
%"class.mojo::SyncHandleRegistry" = type <{ %"class.base::RefCounted.697", [4 x i8], %"class.mojo::WaitSet", %"class.std::__1::map.699", %"class.std::__1::map.710", i8, [7 x i8] }>
%"class.base::RefCounted.697" = type { %"class.base::subtle::RefCountedBase" }
%"class.mojo::WaitSet" = type { %class.scoped_refptr.698 }
%class.scoped_refptr.698 = type { %"class.mojo::WaitSet::State"* }
%"class.mojo::WaitSet::State" = type opaque
%"class.std::__1::map.699" = type { %"class.std::__1::__tree.700" }
%"class.std::__1::__tree.700" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.701", %"class.std::__1::__compressed_pair.705" }
%"class.std::__1::__compressed_pair.701" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"class.std::__1::__compressed_pair.705" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"class.std::__1::map.710" = type { %"class.std::__1::__tree.711" }
%"class.std::__1::__tree.711" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.712", %"class.std::__1::__compressed_pair.716" }
%"class.std::__1::__compressed_pair.712" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"class.std::__1::__compressed_pair.716" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%class.scoped_refptr.721 = type { %"class.base::RefCountedData"* }
%"class.base::RefCountedData" = type opaque
%class.scoped_refptr.725 = type { %"class.mojo::internal::MessageQuotaChecker"* }
%"class.mojo::internal::MessageQuotaChecker" = type opaque
%"class.mojo::Connector::RunLoopNestingObserver" = type opaque
%"class.base::WeakPtr" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::internal::WeakPtrBase" = type { %"class.base::internal::WeakReference", i64 }
%"class.base::internal::WeakReference" = type { %class.scoped_refptr.726 }
%class.scoped_refptr.726 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::WeakPtrFactory.727" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.absl::optional.728" = type { %"class.absl::optional_internal::optional_data.729" }
%"class.absl::optional_internal::optional_data.729" = type { %"class.absl::optional_internal::optional_data_base.730" }
%"class.absl::optional_internal::optional_data_base.730" = type { %"class.absl::optional_internal::optional_data_dtor_base.731" }
%"class.absl::optional_internal::optional_data_dtor_base.731" = type { i8, %union.anon.732 }
%union.anon.732 = type { %"class.mojo::SimpleWatcher" }
%"class.absl::optional.733" = type { %"class.absl::optional_internal::optional_data.734" }
%"class.absl::optional_internal::optional_data.734" = type { %"class.absl::optional_internal::optional_data_base.735" }
%"class.absl::optional_internal::optional_data_base.735" = type { %"class.absl::optional_internal::optional_data_dtor_base.736" }
%"class.absl::optional_internal::optional_data_dtor_base.736" = type { i8, [7 x i8], %union.anon.737 }
%union.anon.737 = type { %"struct.mojo::internal::MultiplexRouter::ExclusiveSyncWaitInfo" }
%"struct.mojo::internal::MultiplexRouter::ExclusiveSyncWaitInfo" = type <{ i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.absl::optional.687" = type { %"class.absl::optional_internal::optional_data.688" }
%"class.absl::optional_internal::optional_data.688" = type { %"class.absl::optional_internal::optional_data_base.689" }
%"class.absl::optional_internal::optional_data_base.689" = type { %"class.absl::optional_internal::optional_data_dtor_base.690" }
%"class.absl::optional_internal::optional_data_dtor_base.690" = type { i8, %union.anon.691 }
%union.anon.691 = type { %"class.base::Lock" }
%"class.mojo::PipeControlMessageHandler" = type { %"class.mojo::MessageReceiver", %"class.std::__1::basic_string", %"class.mojo::PipeControlMessageHandlerDelegate"* }
%"class.mojo::PipeControlMessageProxy" = type { %"class.mojo::MessageReceiver"* }
%"class.base::small_map" = type { i64, %"class.base::internal::small_map_default_init", %union.anon.738 }
%"class.base::internal::small_map_default_init" = type { i8 }
%union.anon.738 = type { %"class.std::__1::map.741" }
%"class.std::__1::map.741" = type { %"class.std::__1::__tree.742" }
%"class.std::__1::__tree.742" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.743", %"class.std::__1::__compressed_pair.747" }
%"class.std::__1::__compressed_pair.743" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"class.std::__1::__compressed_pair.747" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"class.base::circular_deque" = type { %"class.base::internal::VectorBuffer", i64, i64 }
%"class.base::internal::VectorBuffer" = type { %"class.std::__1::unique_ptr.752"*, i64 }
%"class.std::__1::unique_ptr.752" = type opaque
%"class.std::__1::map.753" = type { %"class.std::__1::__tree.754" }
%"class.std::__1::__tree.754" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.755", %"class.std::__1::__compressed_pair.759" }
%"class.std::__1::__compressed_pair.755" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"class.std::__1::__compressed_pair.759" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"class.mojo::ScopedHandleBase" = type { %"class.mojo::MessagePipeHandle" }
%"class.mojo::MessagePipeHandle" = type { %"class.mojo::Handle" }
%"class.std::__1::unique_ptr.1319" = type { %"class.std::__1::__compressed_pair.1320" }
%"class.std::__1::__compressed_pair.1320" = type { %"struct.std::__1::__compressed_pair_elem.1321" }
%"struct.std::__1::__compressed_pair_elem.1321" = type { %"class.blink::mojom::blink::ReportingServiceProxyProxy"* }
%"class.blink::mojom::blink::ReportingServiceProxyProxy" = type { %"class.blink::mojom::blink::ReportingServiceProxy", %"class.mojo::MessageReceiverWithResponder"* }
%"class.blink::mojom::blink::ReportingServiceProxy" = type { i32 (...)** }
%"class.blink::mojom::blink::ViewportIntersectionState" = type { %"class.gfx::Rect", %"class.gfx::Rect", %"class.gfx::Rect", i32, %"class.gfx::Size", %"class.gfx::Point", %"class.gfx::Transform" }
%"class.gfx::Size" = type { i32, i32 }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Transform" = type { %class.SkMatrix44 }
%class.SkMatrix44 = type <{ [4 x [4 x float]], i8, [3 x i8] }>
%"class.std::__1::unique_ptr.1325" = type { %"class.std::__1::__compressed_pair.1326" }
%"class.std::__1::__compressed_pair.1326" = type { %"struct.std::__1::__compressed_pair_elem.1327" }
%"struct.std::__1::__compressed_pair_elem.1327" = type { %"class.blink::WebURLLoaderFactory"* }
%"class.blink::WebURLLoaderFactory" = type opaque
%"class.blink::ClientHintsPreferences" = type { %"struct.blink::WebEnabledClientHints" }
%"struct.blink::WebEnabledClientHints" = type { [16 x i8] }
%"class.base::RepeatingCallback.1331" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.std::__1::unique_ptr.1332" = type { %"class.std::__1::__compressed_pair.1333" }
%"class.std::__1::__compressed_pair.1333" = type { %"struct.std::__1::__compressed_pair_elem.1334" }
%"struct.std::__1::__compressed_pair_elem.1334" = type { %"class.blink::FrameOverlay"* }
%"class.blink::FrameOverlay" = type opaque
%"class.std::__1::unique_ptr.1338" = type { %"class.std::__1::__compressed_pair.1339" }
%"class.std::__1::__compressed_pair.1339" = type { %"struct.std::__1::__compressed_pair_elem.1340" }
%"struct.std::__1::__compressed_pair_elem.1340" = type { %"class.blink::WebPrescientNetworking"* }
%"class.blink::WebPrescientNetworking" = type opaque
%"class.blink::HeapMojoAssociatedRemote" = type { %"class.blink::Member.1344" }
%"class.blink::Member.1344" = type { %"class.blink::MemberBase.1345" }
%"class.blink::MemberBase.1345" = type { %"class.blink::HeapMojoAssociatedRemote<blink::mojom::blink::LocalFrameHost, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper"* }
%"class.blink::HeapMojoAssociatedRemote<blink::mojom::blink::LocalFrameHost, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper" = type { %"class.blink::ContextLifecycleObserver", %"class.mojo::AssociatedRemote.1348" }
%"class.mojo::AssociatedRemote.1348" = type { %"class.mojo::internal::AssociatedInterfacePtrState.1349" }
%"class.mojo::internal::AssociatedInterfacePtrState.1349" = type { %"class.mojo::internal::AssociatedInterfacePtrStateBase.base", %"class.std::__1::unique_ptr.1350" }
%"class.std::__1::unique_ptr.1350" = type { %"class.std::__1::__compressed_pair.1351" }
%"class.std::__1::__compressed_pair.1351" = type { %"struct.std::__1::__compressed_pair_elem.1352" }
%"struct.std::__1::__compressed_pair_elem.1352" = type { %"class.blink::mojom::blink::LocalFrameHostProxy"* }
%"class.blink::mojom::blink::LocalFrameHostProxy" = type { %"class.blink::mojom::blink::LocalFrameHost", %"class.mojo::MessageReceiverWithResponder"* }
%"class.blink::mojom::blink::LocalFrameHost" = type { i32 (...)** }
%"class.blink::HeapMojoAssociatedRemote.1356" = type { %"class.blink::Member.1357" }
%"class.blink::Member.1357" = type { %"class.blink::MemberBase.1358" }
%"class.blink::MemberBase.1358" = type { %"class.blink::HeapMojoAssociatedRemote<blink::mojom::blink::BackForwardCacheControllerHost, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper"* }
%"class.blink::HeapMojoAssociatedRemote<blink::mojom::blink::BackForwardCacheControllerHost, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper" = type { %"class.blink::ContextLifecycleObserver", %"class.mojo::AssociatedRemote.1361" }
%"class.mojo::AssociatedRemote.1361" = type { %"class.mojo::internal::AssociatedInterfacePtrState.1362" }
%"class.mojo::internal::AssociatedInterfacePtrState.1362" = type { %"class.mojo::internal::AssociatedInterfacePtrStateBase.base", %"class.std::__1::unique_ptr.1363" }
%"class.std::__1::unique_ptr.1363" = type { %"class.std::__1::__compressed_pair.1364" }
%"class.std::__1::__compressed_pair.1364" = type { %"struct.std::__1::__compressed_pair_elem.1365" }
%"struct.std::__1::__compressed_pair_elem.1365" = type { %"class.blink::mojom::blink::BackForwardCacheControllerHostProxy"* }
%"class.blink::mojom::blink::BackForwardCacheControllerHostProxy" = type { %"class.blink::mojom::blink::BackForwardCacheControllerHost", %"class.mojo::MessageReceiverWithResponder"* }
%"class.blink::mojom::blink::BackForwardCacheControllerHost" = type { i32 (...)** }
%"class.blink::HeapMojoAssociatedReceiver" = type { %"class.blink::Member.1369" }
%"class.blink::Member.1369" = type { %"class.blink::MemberBase.1370" }
%"class.blink::MemberBase.1370" = type { %"class.blink::HeapMojoAssociatedReceiver<blink::mojom::blink::LocalFrame, blink::LocalFrame, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper"* }
%"class.blink::HeapMojoAssociatedReceiver<blink::mojom::blink::LocalFrame, blink::LocalFrame, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper" = type { %"class.blink::ContextLifecycleObserver", %"class.blink::ThreadState::PrefinalizerRegistration.1373", %"class.blink::Member.913", %"class.mojo::AssociatedReceiver" }
%"class.blink::ThreadState::PrefinalizerRegistration.1373" = type { i8 }
%"class.mojo::AssociatedReceiver" = type { %"class.mojo::internal::AssociatedReceiverBase", %"class.blink::mojom::blink::LocalFrameStub", %"class.base::WeakPtrFactory.1374" }
%"class.mojo::internal::AssociatedReceiverBase" = type { %"class.std::__1::unique_ptr.131" }
%"class.blink::mojom::blink::LocalFrameStub" = type { %"class.mojo::MessageReceiverWithResponderStatus", %"class.blink::mojom::blink::LocalFrame"* }
%"class.base::WeakPtrFactory.1374" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.blink::HeapMojoAssociatedReceiver.1375" = type { %"class.blink::Member.1376" }
%"class.blink::Member.1376" = type { %"class.blink::MemberBase.1377" }
%"class.blink::MemberBase.1377" = type { %"class.blink::HeapMojoAssociatedReceiver<blink::mojom::blink::LocalMainFrame, blink::LocalFrame, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper"* }
%"class.blink::HeapMojoAssociatedReceiver<blink::mojom::blink::LocalMainFrame, blink::LocalFrame, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper" = type { %"class.blink::ContextLifecycleObserver", %"class.blink::ThreadState::PrefinalizerRegistration.1380", %"class.blink::Member.913", %"class.mojo::AssociatedReceiver.1381" }
%"class.blink::ThreadState::PrefinalizerRegistration.1380" = type { i8 }
%"class.mojo::AssociatedReceiver.1381" = type { %"class.mojo::internal::AssociatedReceiverBase", %"class.blink::mojom::blink::LocalMainFrameStub", %"class.base::WeakPtrFactory.1382" }
%"class.blink::mojom::blink::LocalMainFrameStub" = type { %"class.mojo::MessageReceiverWithResponderStatus", %"class.blink::mojom::blink::LocalMainFrame"* }
%"class.base::WeakPtrFactory.1382" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.blink::HeapMojoReceiver" = type { %"class.blink::Member.1383" }
%"class.blink::Member.1383" = type { %"class.blink::MemberBase.1384" }
%"class.blink::MemberBase.1384" = type { %"class.blink::HeapMojoReceiver<blink::mojom::blink::HighPriorityLocalFrame, blink::LocalFrame, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper"* }
%"class.blink::HeapMojoReceiver<blink::mojom::blink::HighPriorityLocalFrame, blink::LocalFrame, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper" = type { %"class.blink::ContextLifecycleObserver", %"class.blink::ThreadState::PrefinalizerRegistration.1387", %"class.blink::Member.913", %"class.mojo::Receiver" }
%"class.blink::ThreadState::PrefinalizerRegistration.1387" = type { i8 }
%"class.mojo::Receiver" = type { %"class.mojo::internal::BindingState" }
%"class.mojo::internal::BindingState" = type { %"class.mojo::internal::BindingStateBase", %"class.blink::mojom::blink::HighPriorityLocalFrameStub" }
%"class.mojo::internal::BindingStateBase" = type { %class.scoped_refptr.670, %"class.std::__1::unique_ptr.131", %"class.base::WeakPtrFactory.1388" }
%"class.base::WeakPtrFactory.1388" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.blink::mojom::blink::HighPriorityLocalFrameStub" = type { %"class.mojo::MessageReceiverWithResponderStatus", %"class.blink::mojom::blink::HighPriorityLocalFrame"* }
%"class.blink::HeapMojoAssociatedReceiver.1389" = type { %"class.blink::Member.1390" }
%"class.blink::Member.1390" = type { %"class.blink::MemberBase.1391" }
%"class.blink::MemberBase.1391" = type { %"class.blink::HeapMojoAssociatedReceiver<blink::mojom::blink::FullscreenVideoElementHandler, blink::LocalFrame, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper"* }
%"class.blink::HeapMojoAssociatedReceiver<blink::mojom::blink::FullscreenVideoElementHandler, blink::LocalFrame, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper" = type { %"class.blink::ContextLifecycleObserver", %"class.blink::ThreadState::PrefinalizerRegistration.1394", %"class.blink::Member.913", %"class.mojo::AssociatedReceiver.1395" }
%"class.blink::ThreadState::PrefinalizerRegistration.1394" = type { i8 }
%"class.mojo::AssociatedReceiver.1395" = type { %"class.mojo::internal::AssociatedReceiverBase", %"class.blink::mojom::blink::FullscreenVideoElementHandlerStub", %"class.base::WeakPtrFactory.1396" }
%"class.blink::mojom::blink::FullscreenVideoElementHandlerStub" = type { %"class.mojo::MessageReceiverWithResponderStatus", %"class.blink::mojom::blink::FullscreenVideoElementHandler"* }
%"class.base::WeakPtrFactory.1396" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.blink::Member.1397" = type { %"class.blink::MemberBase.1398" }
%"class.blink::MemberBase.1398" = type { %"class.blink::SystemClipboard"* }
%"class.blink::SystemClipboard" = type opaque
%"class.blink::Member.1399" = type { %"class.blink::MemberBase.1400" }
%"class.blink::MemberBase.1400" = type { %"class.blink::RawSystemClipboard"* }
%"class.blink::RawSystemClipboard" = type opaque
%"class.blink::Member.1401" = type { %"class.blink::MemberBase.1402" }
%"class.blink::MemberBase.1402" = type { %"class.blink::BackgroundColorPaintImageGenerator"* }
%"class.blink::BackgroundColorPaintImageGenerator" = type opaque
%"class.blink::Member.1403" = type { %"class.blink::MemberBase.1404" }
%"class.blink::MemberBase.1404" = type { %"class.blink::HeapHashMap.1405"* }
%"class.blink::HeapHashMap.1405" = type opaque
%"class.mojo::StructPtr.1406" = type { %"class.std::__1::unique_ptr.1407" }
%"class.std::__1::unique_ptr.1407" = type { %"class.std::__1::__compressed_pair.1408" }
%"class.std::__1::__compressed_pair.1408" = type { %"struct.std::__1::__compressed_pair_elem.1409" }
%"struct.std::__1::__compressed_pair_elem.1409" = type { %"class.blink::mojom::blink::BlinkOptimizationGuideHints"* }
%"class.blink::mojom::blink::BlinkOptimizationGuideHints" = type { %"class.mojo::InlinedStructPtr.1410", %"class.mojo::InlinedStructPtr.1411" }
%"class.mojo::InlinedStructPtr.1410" = type { %"class.blink::mojom::blink::DelayAsyncScriptExecutionHints", i32 }
%"class.blink::mojom::blink::DelayAsyncScriptExecutionHints" = type { i32 }
%"class.mojo::InlinedStructPtr.1411" = type { %"class.blink::mojom::blink::DelayCompetingLowPriorityRequestsHints", i32 }
%"class.blink::mojom::blink::DelayCompetingLowPriorityRequestsHints" = type { i32, i32 }
%"class.blink::Member.1415" = type { %"class.blink::MemberBase.1416" }
%"class.blink::MemberBase.1416" = type { %"class.blink::TextFragmentHandler"* }
%"class.blink::TextFragmentHandler" = type opaque
%"class.blink::TransientAllowFullscreen" = type { %"class.base::TimeTicks" }
%"class.blink::PaymentRequestToken" = type { %"class.base::TimeTicks" }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.absl::optional.1417" = type { %"class.absl::optional_internal::optional_data.1418" }
%"class.absl::optional_internal::optional_data.1418" = type { %"class.absl::optional_internal::optional_data_base.1419" }
%"class.absl::optional_internal::optional_data_base.1419" = type { %"class.absl::optional_internal::optional_data_dtor_base.1420" }
%"class.absl::optional_internal::optional_data_dtor_base.1420" = type { i8, %union.anon.1421 }
%union.anon.1421 = type { %"class.blink::FrameAdEvidence" }
%"class.blink::FrameAdEvidence" = type { i8, i8, i32, i32, i32 }
%"class.blink::NavigationRateLimiter" = type <{ %"class.blink::Member.657", %"class.base::TimeTicks", i32, i8, i8, [2 x i8] }>
%"class.base::flat_map" = type { %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector.1208" }
%"class.std::__1::vector.1208" = type { %"class.std::__1::__vector_base.1209" }
%"class.std::__1::__vector_base.1209" = type { %"struct.std::__1::pair.1210"*, %"struct.std::__1::pair.1210"*, %"class.std::__1::__compressed_pair.1211" }
%"struct.std::__1::pair.1210" = type { i32, [4 x i8], %"class.blink::PolicyValue" }
%"class.blink::PolicyValue" = type <{ i32, i8, [3 x i8], double, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.1211" = type { %"struct.std::__1::__compressed_pair_elem.1212" }
%"struct.std::__1::__compressed_pair_elem.1212" = type { %"struct.std::__1::pair.1210"* }
%"class.blink::Member.1216" = type { %"class.blink::MemberBase.1217" }
%"class.blink::MemberBase.1217" = type { %"class.blink::WindowAgentFactory"* }
%"class.blink::WindowAgentFactory" = type opaque
%"class.absl::optional.1218" = type { %"class.absl::optional_internal::optional_data.1219" }
%"class.absl::optional_internal::optional_data.1219" = type { %"class.absl::optional_internal::optional_data_base.1220" }
%"class.absl::optional_internal::optional_data_base.1220" = type { %"class.absl::optional_internal::optional_data_dtor_base.1221" }
%"class.absl::optional_internal::optional_data_dtor_base.1221" = type { i8, %union.anon.1222 }
%union.anon.1222 = type { %"class.std::__1::basic_string" }
%"class.absl::optional.1223" = type { %"class.absl::optional_internal::optional_data.1224" }
%"class.absl::optional_internal::optional_data.1224" = type { %"class.absl::optional_internal::optional_data_base.1225" }
%"class.absl::optional_internal::optional_data_base.1225" = type { %"class.absl::optional_internal::optional_data_dtor_base.1226" }
%"class.absl::optional_internal::optional_data_dtor_base.1226" = type { i8, %union.anon.1227 }
%union.anon.1227 = type { %"class.base::UnguessableToken" }
%"class.blink::UserActivationState" = type { i8, %"class.base::TimeTicks", %"class.base::TimeTicks", i32, i32 }
%"class.blink::MultiToken" = type <{ %"class.base::UnguessableToken", i32, [4 x i8] }>
%"class.blink::TaskHandle" = type { %class.scoped_refptr.967 }
%class.scoped_refptr.967 = type { %"class.blink::TaskHandle::Runner"* }
%"class.blink::TaskHandle::Runner" = type opaque
%"class.blink::OpenedFrameTracker" = type { %"class.blink::HeapHashSet.1228" }
%"class.blink::HeapHashSet.1228" = type { %"class.WTF::HashSet.1231" }
%"class.WTF::HashSet.1231" = type { %"class.WTF::HashTable.1232" }
%"class.WTF::HashTable.1232" = type <{ %"class.blink::WeakMember.1234"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.1234" = type opaque
%"class.blink::Member.659" = type { %"class.blink::MemberBase.660" }
%"class.blink::MemberBase.660" = type { %"class.blink::WindowProxyManager"* }
%"class.blink::WindowProxyManager" = type opaque
%"class.blink::Member.661" = type { %"class.blink::MemberBase.662" }
%"class.blink::MemberBase.662" = type { %"class.blink::InputDeviceCapabilitiesConstants"* }
%"class.blink::InputDeviceCapabilitiesConstants" = type opaque
%"class.blink::Member.663" = type { %"class.blink::MemberBase.664" }
%"class.blink::MemberBase.664" = type { %"class.blink::Location"* }
%"class.blink::Location" = type opaque
%"class.WTF::Vector.665" = type { %"class.WTF::VectorBuffer.666" }
%"class.WTF::VectorBuffer.666" = type { %"class.WTF::VectorBufferBase.667" }
%"class.WTF::VectorBufferBase.667" = type { %"struct.blink::DOMWindow::CoopAccessMonitor"*, i32, i32 }
%"struct.blink::DOMWindow::CoopAccessMonitor" = type { i32, %"class.util::TokenType.668", %"class.mojo::Remote", i8, %"class.WTF::String" }
%"class.mojo::Remote" = type { %"class.mojo::internal::InterfacePtrState" }
%"class.mojo::internal::InterfacePtrState" = type { %"class.mojo::internal::InterfacePtrStateBase.base", %"class.std::__1::unique_ptr.762" }
%"class.std::__1::unique_ptr.762" = type { %"class.std::__1::__compressed_pair.763" }
%"class.std::__1::__compressed_pair.763" = type { %"struct.std::__1::__compressed_pair_elem.764" }
%"struct.std::__1::__compressed_pair_elem.764" = type { %"class.network::mojom::blink::CrossOriginOpenerPolicyReporterProxy"* }
%"class.network::mojom::blink::CrossOriginOpenerPolicyReporterProxy" = type { %"class.network::mojom::blink::CrossOriginOpenerPolicyReporter", %"class.mojo::MessageReceiverWithResponder"* }
%"class.network::mojom::blink::CrossOriginOpenerPolicyReporter" = type { i32 (...)** }
%"class.blink::ExecutionContext.base" = type <{ %"class.blink::Supplementable", %"class.blink::MojoBindingContext", %"class.blink::ConsoleLogger", %"class.blink::UseCounter", %"class.blink::FeatureContext", %"class.v8::Isolate"*, %"class.blink::SecurityContext", %"class.blink::Member.60", i32, i8, [3 x i8], %"class.blink::HeapVector.62", i32, i8, i8, i8, i8, i8, i8, [6 x i8], %"class.blink::Member.70", %"class.blink::Member.72", %"class.blink::DOMTimerCoordinator", i32, [4 x i8], %"class.std::__1::unique_ptr.81", %"class.blink::Member.222", %"class.blink::Member.224", i8 }>
%"class.blink::Supplementable.770" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.771" }
%"class.blink::HeapHashMap.771" = type { %"class.WTF::HashMap.774" }
%"class.WTF::HashMap.774" = type { %"class.WTF::HashTable.775" }
%"class.WTF::HashTable.775" = type <{ %"struct.WTF::KeyValuePair.777"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.777" = type opaque
%"class.blink::ThreadState::PrefinalizerRegistration" = type { i8 }
%"class.blink::Member.778" = type { %"class.blink::MemberBase.779" }
%"class.blink::MemberBase.779" = type { %"class.blink::ScriptController"* }
%"class.blink::ScriptController" = type opaque
%"class.blink::Member.541" = type { %"class.blink::MemberBase.542" }
%"class.blink::MemberBase.542" = type { %"class.blink::Document"* }
%"class.blink::Document" = type { %"class.blink::ContainerNode", %"class.blink::TreeScope", %"class.blink::UseCounter", %"class.blink::Supplementable.621", i32, %"class.blink::DocumentLifecycle", i8, i8, %"class.WTF::Vector.629", %"class.WTF::Vector.629", i8, i32, %"class.blink::Member.634", %"class.blink::Member.54", %"class.blink::Member.949", %"class.blink::Member.951", %"class.blink::Member.953", %"class.blink::Member.955", i8, %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.std::__1::unique_ptr.957", %"class.blink::KURL", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.blink::Member.963", %"class.blink::Member.965", %"class.blink::Member.584", i32, i32, i32, i8, %"class.blink::TaskHandle", %"class.blink::TaskHandle", %"class.WTF::Vector.968", i8, i32, i8, %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapVector.560", %"class.blink::Member.558", %"class.blink::Member.924", %"class.blink::Member.558", %"class.blink::Member.558", %"class.blink::Member.558", %"class.blink::UserActionElementSet", %"class.blink::Member.984", double, double, i64, i64, %"class.blink::HeapHashSet.986", %"class.blink::HeapHashSet.993", i16, i8, %"class.blink::Member.1000", %"class.blink::Member.1002", %"class.blink::Member.1004", %"class.blink::Member.1006", %"class.blink::TextLinkColors", %"class.blink::Member.1008", i8, [7 x i8], %"class.blink::HeapHashMap.1010", i32, i32, i8, i8, i8, i32, i32, i32, i8, %"class.WTF::String", %"class.WTF::String", %"class.blink::Member.558", %"class.WTF::Vector.1017", %"class.blink::Member.1022", %"class.blink::Member.1024", i8, %"class.blink::Member.558", i8, i32, i8, %"class.base::ElapsedTimer", %"class.blink::Member.1026", %"class.blink::HeapVector.1028", %"class.std::__1::unique_ptr.1036", %"class.WTF::String", %"class.WTF::String", i8, %"class.WTF::AtomicString", %"class.blink::DocumentEncodingData", i8, i8, [6 x i8], %"class.blink::HeapHashSet.1042", %"class.blink::LiveNodeListRegistry", %"class.blink::Member.1055", %"class.WTF::Vector.1057", i8, i8, %"class.std::__1::unique_ptr.1062", %"class.blink::NthIndexCache"*, i8, i8, i8, i8, i8, i8, %"class.blink::LayoutView"*, %"class.blink::HeapVector.560", %"class.blink::HeapVector.1068", i32, i8, %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapTaskRunnerTimer", %"class.blink::DocumentTiming", %"class.blink::Member.1076", i8, i32, %"class.blink::Member.1078", %"class.blink::Member.1080", %"class.blink::Member.1082", %"class.blink::HeapTaskRunnerTimer", %"class.blink::Member.1084", %"class.WTF::HashMap.1086", %"class.blink::Member.1091", %"class.blink::Member.1093", %"class.blink::Member.1095", %"class.blink::Member.1097", %"class.blink::Member.541", %"class.blink::Member.541", %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapHashSet.1099", i8, i32, %"class.blink::Member.1106", %"class.blink::Member.1108", i32, %"class.blink::Member.1110", %"class.blink::Member.1112", %"class.blink::Member.1114", %"class.std::__1::unique_ptr.1116", i64, %"class.std::__1::unique_ptr.1122", i32, i32, %"class.blink::Member.1128", %"class.blink::Member.1130", %"class.blink::Member.1132", i8, i32, i32, i32, i32, i32, i32, i32, i8, i8, %"class.blink::Member.1134", %"class.WTF::Vector.935", %"class.WTF::AtomicString", %"class.blink::HeapHashMap.1136", %"class.blink::Member.1143", %"class.std::__1::unique_ptr.1145", %"class.blink::Member.1151", i8, i8, %"class.WTF::String", %"class.blink::Member.1153", i8, [7 x i8], %"class.blink::HeapHashMap.1155", %"class.blink::HeapObserverSet.1162", %"class.blink::Member.1170", i8, i8, i8, i8, i8, i8, i8, %"class.blink::Member.1172", i32, i8, i8, %"class.blink::WeakMember.1174", %"class.blink::Member.1175" }
%"class.blink::Supplementable.621" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.622" }
%"class.blink::HeapHashMap.622" = type { %"class.WTF::HashMap.625" }
%"class.WTF::HashMap.625" = type { %"class.WTF::HashTable.626" }
%"class.WTF::HashTable.626" = type <{ %"struct.WTF::KeyValuePair.628"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.628" = type opaque
%"class.blink::DocumentLifecycle" = type <{ i32, i32, i32, i8, i8, [2 x i8] }>
%"class.blink::Member.634" = type { %"class.blink::MemberBase.635" }
%"class.blink::MemberBase.635" = type { %"class.blink::LocalDOMWindow"* }
%"class.blink::Member.949" = type { %"class.blink::MemberBase.950" }
%"class.blink::MemberBase.950" = type { %"class.blink::ResourceFetcher"* }
%"class.blink::ResourceFetcher" = type opaque
%"class.blink::Member.951" = type { %"class.blink::MemberBase.952" }
%"class.blink::MemberBase.952" = type { %"class.blink::DocumentParser"* }
%"class.blink::DocumentParser" = type opaque
%"class.blink::Member.953" = type { %"class.blink::MemberBase.954" }
%"class.blink::MemberBase.954" = type { %"class.blink::ContextFeatures"* }
%"class.blink::ContextFeatures" = type opaque
%"class.blink::Member.955" = type { %"class.blink::MemberBase.956" }
%"class.blink::MemberBase.956" = type { %"class.blink::HttpRefreshScheduler"* }
%"class.blink::HttpRefreshScheduler" = type opaque
%"class.std::__1::unique_ptr.957" = type { %"class.std::__1::__compressed_pair.958" }
%"class.std::__1::__compressed_pair.958" = type { %"struct.std::__1::__compressed_pair_elem.959" }
%"struct.std::__1::__compressed_pair_elem.959" = type { %"class.blink::OriginAccessEntry"* }
%"class.blink::OriginAccessEntry" = type opaque
%"class.blink::Member.963" = type { %"class.blink::MemberBase.964" }
%"class.blink::MemberBase.964" = type { %"class.blink::DocumentType"* }
%"class.blink::DocumentType" = type opaque
%"class.blink::Member.965" = type { %"class.blink::MemberBase.966" }
%"class.blink::MemberBase.966" = type { %"class.blink::DOMImplementation"* }
%"class.blink::DOMImplementation" = type opaque
%"class.WTF::Vector.968" = type { %"class.WTF::VectorBuffer.969" }
%"class.WTF::VectorBuffer.969" = type { %"class.WTF::VectorBufferBase.970" }
%"class.WTF::VectorBufferBase.970" = type { %"struct.blink::Document::PendingJavascriptUrl"*, i32, i32 }
%"struct.blink::Document::PendingJavascriptUrl" = type { %"class.blink::KURL", %class.scoped_refptr.971 }
%class.scoped_refptr.971 = type { %"class.blink::DOMWrapperWorld"* }
%"class.blink::Member.924" = type { %"class.blink::MemberBase.925" }
%"class.blink::MemberBase.925" = type { %"class.blink::Range"* }
%"class.blink::Range" = type { %"class.blink::AbstractRange", %"class.blink::Member.541", %"class.blink::RangeBoundaryPoint", %"class.blink::RangeBoundaryPoint" }
%"class.blink::AbstractRange" = type { %"class.blink::ScriptWrappable" }
%"class.blink::RangeBoundaryPoint" = type <{ %"class.blink::Member.512", %"class.blink::Member.512", i64, i32, [4 x i8] }>
%"class.blink::UserActionElementSet" = type { %"class.blink::HeapHashMap.977" }
%"class.blink::HeapHashMap.977" = type { %"class.WTF::HashMap.980" }
%"class.WTF::HashMap.980" = type { %"class.WTF::HashTable.981" }
%"class.WTF::HashTable.981" = type <{ %"struct.WTF::KeyValuePair.983"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.983" = type opaque
%"class.blink::Member.984" = type { %"class.blink::MemberBase.985" }
%"class.blink::MemberBase.985" = type { %"class.blink::RootScrollerController"* }
%"class.blink::RootScrollerController" = type opaque
%"class.blink::HeapHashSet.986" = type { %"class.WTF::HashSet.989" }
%"class.WTF::HashSet.989" = type { %"class.WTF::HashTable.990" }
%"class.WTF::HashTable.990" = type <{ %"class.blink::WeakMember.992"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.992" = type opaque
%"class.blink::HeapHashSet.993" = type { %"class.WTF::HashSet.996" }
%"class.WTF::HashSet.996" = type { %"class.WTF::HashTable.997" }
%"class.WTF::HashTable.997" = type <{ %"class.blink::WeakMember.999"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.999" = type opaque
%"class.blink::Member.1000" = type { %"class.blink::MemberBase.1001" }
%"class.blink::MemberBase.1001" = type { %"class.blink::ElementIntersectionObserverData"* }
%"class.blink::ElementIntersectionObserverData" = type opaque
%"class.blink::Member.1002" = type { %"class.blink::MemberBase.1003" }
%"class.blink::MemberBase.1003" = type { %"class.blink::StyleEngine"* }
%"class.blink::StyleEngine" = type opaque
%"class.blink::Member.1004" = type { %"class.blink::MemberBase.1005" }
%"class.blink::MemberBase.1005" = type { %"class.blink::StyleSheetList"* }
%"class.blink::StyleSheetList" = type { %"class.blink::ScriptWrappable", %"class.blink::Member.514", %"class.blink::HeapVector.578" }
%"class.blink::Member.1006" = type { %"class.blink::MemberBase.1007" }
%"class.blink::MemberBase.1007" = type { %"class.blink::FormController"* }
%"class.blink::FormController" = type opaque
%"class.blink::TextLinkColors" = type { %"class.blink::Color", %"class.blink::Color", %"class.blink::Color", %"class.blink::Color", i8, i8, i8, i8 }
%"class.blink::Member.1008" = type { %"class.blink::MemberBase.1009" }
%"class.blink::MemberBase.1009" = type { %"class.blink::VisitedLinkState"* }
%"class.blink::VisitedLinkState" = type opaque
%"class.blink::HeapHashMap.1010" = type { %"class.WTF::HashMap.1013" }
%"class.WTF::HashMap.1013" = type { %"class.WTF::HashTable.1014" }
%"class.WTF::HashTable.1014" = type <{ %"struct.WTF::KeyValuePair.1016"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1016" = type opaque
%"class.WTF::Vector.1017" = type { %"class.WTF::VectorBuffer.1018" }
%"class.WTF::VectorBuffer.1018" = type { %"class.WTF::VectorBufferBase.1019" }
%"class.WTF::VectorBufferBase.1019" = type { %"class.blink::AXContext"**, i32, i32 }
%"class.blink::AXContext" = type opaque
%"class.blink::Member.1022" = type { %"class.blink::MemberBase.1023" }
%"class.blink::MemberBase.1023" = type { %"class.blink::AXObjectCache"* }
%"class.blink::AXObjectCache" = type opaque
%"class.blink::Member.1024" = type { %"class.blink::MemberBase.1025" }
%"class.blink::MemberBase.1025" = type { %"class.blink::DocumentMarkerController"* }
%"class.blink::DocumentMarkerController" = type opaque
%"class.base::ElapsedTimer" = type { %"class.base::TimeTicks" }
%"class.blink::Member.1026" = type { %"class.blink::MemberBase.1027" }
%"class.blink::MemberBase.1027" = type { %"class.blink::ScriptRunner"* }
%"class.blink::ScriptRunner" = type opaque
%"class.blink::HeapVector.1028" = type { %"class.WTF::Vector.1031" }
%"class.WTF::Vector.1031" = type { %"class.WTF::VectorBuffer.1032" }
%"class.WTF::VectorBuffer.1032" = type { %"class.WTF::VectorBufferBase.1033" }
%"class.WTF::VectorBufferBase.1033" = type { %"class.blink::Member.1034"*, i32, i32 }
%"class.blink::Member.1034" = type opaque
%"class.std::__1::unique_ptr.1036" = type { %"class.std::__1::__compressed_pair.1037" }
%"class.std::__1::__compressed_pair.1037" = type { %"struct.std::__1::__compressed_pair_elem.1038" }
%"struct.std::__1::__compressed_pair_elem.1038" = type { %"class.blink::TransformSource"* }
%"class.blink::TransformSource" = type opaque
%"class.blink::DocumentEncodingData" = type <{ %"class.WTF::TextEncoding", i8, i8, [6 x i8] }>
%"class.WTF::TextEncoding" = type { i8* }
%"class.blink::HeapHashSet.1042" = type { %"class.WTF::HashSet.1045" }
%"class.WTF::HashSet.1045" = type { %"class.WTF::HashTable.1046" }
%"class.WTF::HashTable.1046" = type <{ %"class.blink::WeakMember.1048"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.1048" = type opaque
%"class.blink::LiveNodeListRegistry" = type <{ %"class.WTF::Vector.1049", i32, [4 x i8] }>
%"class.WTF::Vector.1049" = type { %"class.WTF::VectorBuffer.1050" }
%"class.WTF::VectorBuffer.1050" = type { %"class.WTF::VectorBufferBase.1051" }
%"class.WTF::VectorBufferBase.1051" = type { %"struct.std::__1::pair.1052"*, i32, i32 }
%"struct.std::__1::pair.1052" = type opaque
%"class.blink::Member.1055" = type { %"class.blink::MemberBase.1056" }
%"class.blink::MemberBase.1056" = type { %"class.blink::SVGDocumentExtensions"* }
%"class.blink::SVGDocumentExtensions" = type opaque
%"class.WTF::Vector.1057" = type { %"class.WTF::VectorBuffer.1058" }
%"class.WTF::VectorBuffer.1058" = type { %"class.WTF::VectorBufferBase.1059" }
%"class.WTF::VectorBufferBase.1059" = type { %"struct.blink::AnnotatedRegionValue"*, i32, i32 }
%"struct.blink::AnnotatedRegionValue" = type opaque
%"class.std::__1::unique_ptr.1062" = type { %"class.std::__1::__compressed_pair.1063" }
%"class.std::__1::__compressed_pair.1063" = type { %"struct.std::__1::__compressed_pair_elem.1064" }
%"struct.std::__1::__compressed_pair_elem.1064" = type { %"class.blink::SelectorQueryCache"* }
%"class.blink::SelectorQueryCache" = type opaque
%"class.blink::NthIndexCache" = type opaque
%"class.blink::LayoutView" = type opaque
%"class.blink::HeapVector.1068" = type { %"class.WTF::Vector.1071" }
%"class.WTF::Vector.1071" = type { %"class.WTF::VectorBuffer.1072" }
%"class.WTF::VectorBuffer.1072" = type { %"class.WTF::VectorBufferBase.1073" }
%"class.WTF::VectorBufferBase.1073" = type { %"class.blink::Member.1074"*, i32, i32 }
%"class.blink::Member.1074" = type opaque
%"class.blink::DocumentTiming" = type { %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.blink::Member.541" }
%"class.blink::Member.1076" = type { %"class.blink::MemberBase.1077" }
%"class.blink::MemberBase.1077" = type { %"class.blink::MediaQueryMatcher"* }
%"class.blink::MediaQueryMatcher" = type opaque
%"class.blink::Member.1078" = type { %"class.blink::MemberBase.1079" }
%"class.blink::MemberBase.1079" = type { %"class.blink::ScriptedAnimationController"* }
%"class.blink::ScriptedAnimationController" = type opaque
%"class.blink::Member.1080" = type { %"class.blink::MemberBase.1081" }
%"class.blink::MemberBase.1081" = type { %"class.blink::ScriptedIdleTaskController"* }
%"class.blink::ScriptedIdleTaskController" = type opaque
%"class.blink::Member.1082" = type { %"class.blink::MemberBase.1083" }
%"class.blink::MemberBase.1083" = type { %"class.blink::TextAutosizer"* }
%"class.blink::TextAutosizer" = type opaque
%"class.blink::Member.1084" = type { %"class.blink::MemberBase.1085" }
%"class.blink::MemberBase.1085" = type { %"class.blink::ElementDataCache"* }
%"class.blink::ElementDataCache" = type opaque
%"class.WTF::HashMap.1086" = type { %"class.WTF::HashTable.1087" }
%"class.WTF::HashTable.1087" = type <{ %"struct.WTF::KeyValuePair.1090"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1090" = type opaque
%"class.blink::Member.1091" = type { %"class.blink::MemberBase.1092" }
%"class.blink::MemberBase.1092" = type { %"class.blink::DocumentAnimations"* }
%"class.blink::DocumentAnimations" = type opaque
%"class.blink::Member.1093" = type { %"class.blink::MemberBase.1094" }
%"class.blink::MemberBase.1094" = type { %"class.blink::DocumentTimeline"* }
%"class.blink::DocumentTimeline" = type opaque
%"class.blink::Member.1095" = type { %"class.blink::MemberBase.1096" }
%"class.blink::MemberBase.1096" = type { %"class.blink::PendingAnimations"* }
%"class.blink::PendingAnimations" = type opaque
%"class.blink::Member.1097" = type { %"class.blink::MemberBase.1098" }
%"class.blink::MemberBase.1098" = type { %"class.blink::WorkletAnimationController"* }
%"class.blink::WorkletAnimationController" = type opaque
%"class.blink::HeapTaskRunnerTimer" = type { %"class.blink::TimerBase", %"class.blink::WeakMember.976", { i64, i64 } }
%"class.blink::WeakMember.976" = type { %"class.blink::MemberBase.542" }
%"class.blink::HeapHashSet.1099" = type { %"class.WTF::HashSet.1102" }
%"class.WTF::HashSet.1102" = type { %"class.WTF::HashTable.1103" }
%"class.WTF::HashTable.1103" = type <{ %"class.blink::Member.1105"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.1105" = type opaque
%"class.blink::Member.1106" = type { %"class.blink::MemberBase.1107" }
%"class.blink::MemberBase.1107" = type { %"class.blink::CanvasFontCache"* }
%"class.blink::CanvasFontCache" = type opaque
%"class.blink::Member.1108" = type { %"class.blink::MemberBase.1109" }
%"class.blink::MemberBase.1109" = type { %"class.blink::IntersectionObserverController"* }
%"class.blink::IntersectionObserverController" = type opaque
%"class.blink::Member.1110" = type { %"class.blink::MemberBase.1111" }
%"class.blink::MemberBase.1111" = type { %"class.blink::SnapCoordinator"* }
%"class.blink::SnapCoordinator" = type opaque
%"class.blink::Member.1112" = type { %"class.blink::MemberBase.1113" }
%"class.blink::MemberBase.1113" = type { %"class.blink::PropertyRegistry"* }
%"class.blink::PropertyRegistry" = type opaque
%"class.blink::Member.1114" = type { %"class.blink::MemberBase.1115" }
%"class.blink::MemberBase.1115" = type { %"class.blink::Document::NetworkStateObserver"* }
%"class.blink::Document::NetworkStateObserver" = type opaque
%"class.std::__1::unique_ptr.1116" = type { %"class.std::__1::__compressed_pair.1117" }
%"class.std::__1::__compressed_pair.1117" = type { %"struct.std::__1::__compressed_pair_elem.1118" }
%"struct.std::__1::__compressed_pair_elem.1118" = type { %"class.ukm::UkmRecorder"* }
%"class.ukm::UkmRecorder" = type { i32 (...)** }
%"class.std::__1::unique_ptr.1122" = type { %"class.std::__1::__compressed_pair.1123" }
%"class.std::__1::__compressed_pair.1123" = type { %"struct.std::__1::__compressed_pair_elem.1124" }
%"struct.std::__1::__compressed_pair_elem.1124" = type { %"class.blink::FontMatchingMetrics"* }
%"class.blink::FontMatchingMetrics" = type opaque
%"class.blink::Member.1128" = type { %"class.blink::MemberBase.1129" }
%"class.blink::MemberBase.1129" = type { %"class.blink::DOMFeaturePolicy"* }
%"class.blink::DOMFeaturePolicy" = type opaque
%"class.blink::Member.1130" = type { %"class.blink::MemberBase.1131" }
%"class.blink::MemberBase.1131" = type { %"class.blink::SlotAssignmentEngine"* }
%"class.blink::SlotAssignmentEngine" = type opaque
%"class.blink::Member.1132" = type { %"class.blink::MemberBase.1133" }
%"class.blink::MemberBase.1133" = type { %"class.blink::ViewportData"* }
%"class.blink::ViewportData" = type opaque
%"class.blink::Member.1134" = type { %"class.blink::MemberBase.1135" }
%"class.blink::MemberBase.1135" = type { %"class.blink::LazyLoadImageObserver"* }
%"class.blink::LazyLoadImageObserver" = type opaque
%"class.blink::HeapHashMap.1136" = type { %"class.WTF::HashMap.1139" }
%"class.WTF::HashMap.1139" = type { %"class.WTF::HashTable.1140" }
%"class.WTF::HashTable.1140" = type <{ %"struct.WTF::KeyValuePair.1142"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1142" = type opaque
%"class.blink::Member.1143" = type { %"class.blink::MemberBase.1144" }
%"class.blink::MemberBase.1144" = type { %"class.blink::BeforeUnloadEventListener"* }
%"class.blink::BeforeUnloadEventListener" = type opaque
%"class.std::__1::unique_ptr.1145" = type { %"class.std::__1::__compressed_pair.1146" }
%"class.std::__1::__compressed_pair.1146" = type { %"struct.std::__1::__compressed_pair_elem.1147" }
%"struct.std::__1::__compressed_pair_elem.1147" = type { %"class.blink::DocumentResourceCoordinator"* }
%"class.blink::DocumentResourceCoordinator" = type opaque
%"class.blink::Member.1151" = type { %"class.blink::MemberBase.1152" }
%"class.blink::MemberBase.1152" = type { %"class.blink::CookieJar"* }
%"class.blink::CookieJar" = type opaque
%"class.blink::Member.1153" = type { %"class.blink::MemberBase.1154" }
%"class.blink::MemberBase.1154" = type { %"class.blink::FragmentDirective"* }
%"class.blink::FragmentDirective" = type { %"class.blink::ScriptWrappable" }
%"class.blink::HeapHashMap.1155" = type { %"class.WTF::HashMap.1158" }
%"class.WTF::HashMap.1158" = type { %"class.WTF::HashTable.1159" }
%"class.WTF::HashTable.1159" = type <{ %"struct.WTF::KeyValuePair.1161"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1161" = type opaque
%"class.blink::HeapObserverSet.1162" = type { i32, [4 x i8], %"class.blink::HeapHashSet.1163" }
%"class.blink::HeapHashSet.1163" = type { %"class.WTF::HashSet.1166" }
%"class.WTF::HashSet.1166" = type { %"class.WTF::HashTable.1167" }
%"class.WTF::HashTable.1167" = type <{ %"class.blink::WeakMember.1169"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.1169" = type opaque
%"class.blink::Member.1170" = type { %"class.blink::MemberBase.1171" }
%"class.blink::MemberBase.1171" = type { %"class.blink::DisplayLockDocumentState"* }
%"class.blink::DisplayLockDocumentState" = type opaque
%"class.blink::Member.1172" = type { %"class.blink::MemberBase.1173" }
%"class.blink::MemberBase.1173" = type { %"class.blink::FontPreloadManager"* }
%"class.blink::FontPreloadManager" = type <{ %"class.blink::Member.541", %"class.blink::HeapHashSet.1179", i32, [4 x i8], %"class.blink::HeapTaskRunnerTimer.1186", %"class.base::TimeDelta", i32, [4 x i8] }>
%"class.blink::HeapHashSet.1179" = type { %"class.WTF::HashSet.1182" }
%"class.WTF::HashSet.1182" = type { %"class.WTF::HashTable.1183" }
%"class.WTF::HashTable.1183" = type <{ %"class.blink::Member.1185"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.1185" = type opaque
%"class.blink::HeapTaskRunnerTimer.1186" = type { %"class.blink::TimerBase", %"class.blink::WeakMember.1187", { i64, i64 } }
%"class.blink::WeakMember.1187" = type { %"class.blink::MemberBase.1173" }
%"class.blink::WeakMember.1174" = type { %"class.blink::MemberBase.513" }
%"class.blink::Member.1175" = type { %"class.blink::MemberBase.1176" }
%"class.blink::MemberBase.1176" = type { %"class.blink::DocumentData"* }
%"class.blink::DocumentData" = type opaque
%"class.blink::Member.780" = type { %"class.blink::MemberBase.781" }
%"class.blink::MemberBase.781" = type { %"class.blink::DOMVisualViewport"* }
%"class.blink::DOMVisualViewport" = type opaque
%"class.blink::Member.782" = type { %"class.blink::MemberBase.783" }
%"class.blink::MemberBase.783" = type { %"class.blink::Screen"* }
%"class.blink::Screen" = type opaque
%"class.blink::Member.784" = type { %"class.blink::MemberBase.785" }
%"class.blink::MemberBase.785" = type { %"class.blink::History"* }
%"class.blink::History" = type opaque
%"class.blink::Member.786" = type { %"class.blink::MemberBase.787" }
%"class.blink::MemberBase.787" = type { %"class.blink::BarProp"* }
%"class.blink::BarProp" = type opaque
%"class.blink::Member.788" = type { %"class.blink::MemberBase.789" }
%"class.blink::MemberBase.789" = type { %"class.blink::Navigator"* }
%"class.blink::Navigator" = type opaque
%"class.blink::Member.790" = type { %"class.blink::MemberBase.791" }
%"class.blink::MemberBase.791" = type { %"class.blink::StyleMedia"* }
%"class.blink::StyleMedia" = type opaque
%"class.blink::Member.792" = type { %"class.blink::MemberBase.793" }
%"class.blink::MemberBase.793" = type { %"class.blink::CustomElementRegistry"* }
%"class.blink::CustomElementRegistry" = type opaque
%"class.blink::Member.794" = type { %"class.blink::MemberBase.795" }
%"class.blink::MemberBase.795" = type { %"class.blink::Modulator"* }
%"class.blink::Modulator" = type opaque
%"class.blink::Member.796" = type { %"class.blink::MemberBase.797" }
%"class.blink::MemberBase.797" = type { %"class.blink::External"* }
%"class.blink::External" = type opaque
%"class.blink::Member.798" = type { %"class.blink::MemberBase.799" }
%"class.blink::MemberBase.799" = type { %"class.blink::ApplicationCache"* }
%"class.blink::ApplicationCache" = type opaque
%class.scoped_refptr.800 = type { %"class.blink::SerializedScriptValue"* }
%"class.blink::SerializedScriptValue" = type <{ %"class.WTF::ThreadSafeRefCounted", [4 x i8], %"class.std::__1::unique_ptr.802", i64, %"class.WTF::Vector.806", %"class.WTF::Vector.811", %"class.WTF::Vector.817", %"class.WTF::Vector.835", %class.scoped_refptr.23, %"class.WTF::HashMap.841", %"class.WTF::Vector.846", %"class.WTF::Vector.806", %"class.WTF::Vector.852", %"class.WTF::HashMap.857", i8, [7 x i8] }>
%"class.WTF::ThreadSafeRefCounted" = type { %"class.base::RefCountedThreadSafe.801" }
%"class.base::RefCountedThreadSafe.801" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.std::__1::unique_ptr.802" = type { %"class.std::__1::__compressed_pair.803" }
%"class.std::__1::__compressed_pair.803" = type { %"struct.std::__1::__compressed_pair_elem.804" }
%"struct.std::__1::__compressed_pair_elem.804" = type { i8* }
%"class.WTF::Vector.811" = type { %"class.WTF::VectorBuffer.812" }
%"class.WTF::VectorBuffer.812" = type { %"class.WTF::VectorBufferBase.813", [8 x i8] }
%"class.WTF::VectorBufferBase.813" = type { %class.scoped_refptr.814*, i32, i32 }
%class.scoped_refptr.814 = type { %"class.blink::StaticBitmapImage"* }
%"class.blink::StaticBitmapImage" = type opaque
%"class.WTF::Vector.817" = type { %"class.WTF::VectorBuffer.818" }
%"class.WTF::VectorBuffer.818" = type { %"class.WTF::VectorBufferBase.819" }
%"class.WTF::VectorBufferBase.819" = type { %"class.blink::SerializedScriptValue::Stream"*, i32, i32 }
%"class.blink::SerializedScriptValue::Stream" = type { %"class.blink::MessagePortChannel", %"class.std::__1::unique_ptr.821", %"class.std::__1::unique_ptr.827" }
%"class.blink::MessagePortChannel" = type { %class.scoped_refptr.820 }
%class.scoped_refptr.820 = type { %"class.blink::MessagePortChannel::State"* }
%"class.blink::MessagePortChannel::State" = type opaque
%"class.std::__1::unique_ptr.821" = type { %"class.std::__1::__compressed_pair.822" }
%"class.std::__1::__compressed_pair.822" = type { %"struct.std::__1::__compressed_pair_elem.823" }
%"struct.std::__1::__compressed_pair_elem.823" = type { %"class.blink::ReadableStreamTransferringOptimizer"* }
%"class.blink::ReadableStreamTransferringOptimizer" = type { i32 (...)** }
%"class.std::__1::unique_ptr.827" = type { %"class.std::__1::__compressed_pair.828" }
%"class.std::__1::__compressed_pair.828" = type { %"struct.std::__1::__compressed_pair_elem.829" }
%"struct.std::__1::__compressed_pair_elem.829" = type { %"class.blink::WritableStreamTransferringOptimizer"* }
%"class.blink::WritableStreamTransferringOptimizer" = type { i32 (...)** }
%"class.WTF::Vector.835" = type { %"class.WTF::VectorBuffer.836" }
%"class.WTF::VectorBuffer.836" = type { %"class.WTF::VectorBufferBase.837" }
%"class.WTF::VectorBufferBase.837" = type { %"class.v8::CompiledWasmModule"*, i32, i32 }
%"class.v8::CompiledWasmModule" = type { %"class.std::__1::shared_ptr.838", %"class.std::__1::basic_string" }
%"class.std::__1::shared_ptr.838" = type { %"class.v8::internal::wasm::NativeModule"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::wasm::NativeModule" = type opaque
%"class.WTF::HashMap.841" = type { %"class.WTF::HashTable.842" }
%"class.WTF::HashTable.842" = type <{ %"struct.WTF::KeyValuePair.845"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.845" = type opaque
%"class.WTF::Vector.846" = type { %"class.WTF::VectorBuffer.847" }
%"class.WTF::VectorBuffer.847" = type { %"class.WTF::VectorBufferBase.848" }
%"class.WTF::VectorBufferBase.848" = type { %"class.mojo::ScopedHandleBase.849"*, i32, i32 }
%"class.mojo::ScopedHandleBase.849" = type { %"class.mojo::Handle" }
%"class.WTF::Vector.806" = type { %"class.WTF::VectorBuffer.807" }
%"class.WTF::VectorBuffer.807" = type { %"class.WTF::VectorBufferBase.808", [16 x i8] }
%"class.WTF::VectorBufferBase.808" = type { %"class.blink::ArrayBufferContents"*, i32, i32 }
%"class.WTF::Vector.852" = type { %"class.WTF::VectorBuffer.853" }
%"class.WTF::VectorBuffer.853" = type { %"class.WTF::VectorBufferBase.854" }
%"class.WTF::VectorBufferBase.854" = type { %"class.mojo::PendingRemote"*, i32, i32 }
%"class.mojo::PendingRemote" = type { %"struct.mojo::internal::PendingRemoteState" }
%"struct.mojo::internal::PendingRemoteState" = type { %"class.mojo::ScopedHandleBase", i32 }
%"class.WTF::HashMap.857" = type { %"class.WTF::HashTable.858" }
%"class.WTF::HashTable.858" = type <{ %"struct.WTF::KeyValuePair.861"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.861" = type { i8**, %"class.std::__1::unique_ptr.862" }
%"class.std::__1::unique_ptr.862" = type { %"class.std::__1::__compressed_pair.863" }
%"class.std::__1::__compressed_pair.863" = type { %"struct.std::__1::__compressed_pair_elem.864" }
%"struct.std::__1::__compressed_pair_elem.864" = type { %"class.blink::SerializedScriptValue::Attachment"* }
%"class.blink::SerializedScriptValue::Attachment" = type { i32 (...)** }
%"class.blink::HeapHashSet.868" = type { %"class.WTF::HashSet.871" }
%"class.WTF::HashSet.871" = type { %"class.WTF::HashTable.872" }
%"class.WTF::HashTable.872" = type <{ %"class.blink::WeakMember.874"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.874" = type opaque
%"class.blink::Member.875" = type { %"class.blink::MemberBase.876" }
%"class.blink::MemberBase.876" = type { %"class.blink::Event"* }
%"class.blink::Event" = type { %"class.blink::ScriptWrappable", %"class.WTF::AtomicString", i16, i32, i8, %"class.blink::probe::AsyncTaskId", %"class.blink::Member.882", %"class.blink::Member.882", %"class.blink::Member.884", %"class.blink::Member.886", %"class.base::TimeTicks" }
%"class.blink::probe::AsyncTaskId" = type { i8, %"class.absl::optional.877" }
%"class.absl::optional.877" = type { %"class.absl::optional_internal::optional_data.878" }
%"class.absl::optional_internal::optional_data.878" = type { %"class.absl::optional_internal::optional_data_base.879" }
%"class.absl::optional_internal::optional_data_base.879" = type { %"class.absl::optional_internal::optional_data_dtor_base.880" }
%"class.absl::optional_internal::optional_data_dtor_base.880" = type { i8, %union.anon.881 }
%union.anon.881 = type { i64 }
%"class.blink::Member.882" = type { %"class.blink::MemberBase.883" }
%"class.blink::MemberBase.883" = type { %"class.blink::EventTarget"* }
%"class.blink::Member.884" = type { %"class.blink::MemberBase.885" }
%"class.blink::MemberBase.885" = type { %"class.blink::Event"* }
%"class.blink::Member.886" = type { %"class.blink::MemberBase.887" }
%"class.blink::MemberBase.887" = type { %"class.blink::EventPath"* }
%"class.blink::EventPath" = type opaque
%"class.blink::HeapHashMap.888" = type { %"class.WTF::HashMap.891" }
%"class.WTF::HashMap.891" = type { %"class.WTF::HashTable.892" }
%"class.WTF::HashTable.892" = type <{ %"struct.WTF::KeyValuePair.894"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.894" = type opaque
%"class.std::__1::unique_ptr.895" = type { %"class.std::__1::__compressed_pair.896" }
%"class.std::__1::__compressed_pair.896" = type { %"struct.std::__1::__compressed_pair_elem.897" }
%"struct.std::__1::__compressed_pair_elem.897" = type { %"class.blink::FrameOrWorkerScheduler"* }
%"class.blink::Member.907" = type { %"class.blink::MemberBase.908" }
%"class.blink::MemberBase.908" = type { %"class.blink::InputMethodController"* }
%"class.blink::InputMethodController" = type { %"class.blink::ExecutionContextLifecycleObserver.base", %"class.blink::Member.913", %"class.blink::CachedTextInputInfo", %"class.blink::Member.924", %"class.blink::Member.926", i8, i32 }
%"class.blink::ExecutionContextLifecycleObserver.base" = type <{ %"class.blink::ContextLifecycleObserver", i32 }>
%"class.blink::CachedTextInputInfo" = type { %"class.blink::Member.915", %"class.blink::LayoutObject"*, %"class.blink::HeapHashMap.917", %"class.WTF::String", %"class.blink::CachedTextInputInfo::CachedPlainTextRange", %"class.blink::CachedTextInputInfo::CachedPlainTextRange" }
%"class.blink::Member.915" = type { %"class.blink::MemberBase.916" }
%"class.blink::MemberBase.916" = type { %"class.blink::ContainerNode"* }
%"class.blink::HeapHashMap.917" = type { %"class.WTF::HashMap.920" }
%"class.WTF::HashMap.920" = type { %"class.WTF::HashTable.921" }
%"class.WTF::HashTable.921" = type <{ %"struct.WTF::KeyValuePair.923"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.923" = type opaque
%"class.blink::CachedTextInputInfo::CachedPlainTextRange" = type { %"class.blink::PositionTemplate", %"class.blink::PositionTemplate", i32, i32 }
%"class.blink::PositionTemplate" = type { %"class.blink::Member.512", i32, i32 }
%"class.blink::Member.926" = type { %"class.blink::MemberBase.927" }
%"class.blink::MemberBase.927" = type { %"class.blink::EditContext"* }
%"class.blink::EditContext" = type opaque
%"class.blink::Member.928" = type { %"class.blink::MemberBase.929" }
%"class.blink::MemberBase.929" = type { %"class.blink::SpellChecker"* }
%"class.blink::SpellChecker" = type { %"class.blink::Member.634", %"class.blink::Member.1194", %"class.blink::Member.1196" }
%"class.blink::Member.1194" = type { %"class.blink::MemberBase.1195" }
%"class.blink::MemberBase.1195" = type { %"class.blink::SpellCheckRequester"* }
%"class.blink::SpellCheckRequester" = type opaque
%"class.blink::Member.1196" = type { %"class.blink::MemberBase.1197" }
%"class.blink::MemberBase.1197" = type { %"class.blink::IdleSpellCheckController"* }
%"class.blink::IdleSpellCheckController" = type opaque
%"class.blink::Member.930" = type { %"class.blink::MemberBase.931" }
%"class.blink::MemberBase.931" = type { %"class.blink::TextSuggestionController"* }
%"class.blink::TextSuggestionController" = type { i32 (...)**, i8, %"class.blink::Member.634", %"class.blink::HeapMojoRemote" }
%"class.blink::HeapMojoRemote" = type { %"class.blink::Member.1190" }
%"class.blink::Member.1190" = type { %"class.blink::MemberBase.1191" }
%"class.blink::MemberBase.1191" = type { %"class.blink::HeapMojoRemote<blink::mojom::blink::TextSuggestionHost, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper"* }
%"class.blink::HeapMojoRemote<blink::mojom::blink::TextSuggestionHost, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper" = type opaque
%"class.blink::Member.932" = type { %"class.blink::MemberBase.933" }
%"class.blink::MemberBase.933" = type { %"class.blink::HeapHashMap.934"* }
%"class.blink::HeapHashMap.934" = type opaque
%"class.WTF::Vector.935" = type { %"class.WTF::VectorBuffer.936" }
%"class.WTF::VectorBuffer.936" = type { %"class.WTF::VectorBufferBase.937" }
%"class.WTF::VectorBufferBase.937" = type { i8*, i32, i32 }
%"class.util::TokenType.668" = type { %"class.base::StrongAlias.669" }
%"class.base::StrongAlias.669" = type { %"class.base::UnguessableToken" }
%"class.WTF::HashSet.940" = type { %"class.WTF::HashTable.941" }
%"class.WTF::HashTable.941" = type <{ i32*, i32, i32, i32, [4 x i8] }>
%"class.WTF::Deque.944" = type { %"class.WTF::Deque<long, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<long, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.947" }
%"class.WTF::VectorBuffer.947" = type { %"class.WTF::VectorBufferBase.948" }
%"class.WTF::VectorBufferBase.948" = type { i64*, i32, i32 }
%"class.blink::DOMDataView" = type { %"class.blink::DOMArrayBufferView", i64 }
%"class.absl::optional.267" = type { %"class.absl::optional_internal::optional_data.268" }
%"class.absl::optional_internal::optional_data.268" = type { %"class.absl::optional_internal::optional_data_base.269" }
%"class.absl::optional_internal::optional_data_base.269" = type { %"class.absl::optional_internal::optional_data_dtor_base.270" }
%"class.absl::optional_internal::optional_data_dtor_base.270" = type { i8, %union.anon.271 }
%union.anon.271 = type { %"class.blink::HeapVector" }
%"class.v8::Value" = type { i8 }
%"class.blink::ScriptState" = type { %"class.v8::Isolate"*, %"class.blink::ScopedPersistent", %class.scoped_refptr.477, %"class.blink::Member.478", %"class.blink::SelfKeepAlive", %"class.util::TokenType" }
%"class.blink::ScopedPersistent" = type { %"class.v8::Persistent" }
%"class.v8::Persistent" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Context"* }
%class.scoped_refptr.477 = type { %"class.blink::DOMWrapperWorld"* }
%"class.blink::Member.478" = type { %"class.blink::MemberBase.479" }
%"class.blink::MemberBase.479" = type { %"class.blink::V8PerContextData"* }
%"class.blink::V8PerContextData" = type opaque
%"class.blink::SelfKeepAlive" = type { %"class.blink::Persistent.480" }
%"class.blink::Persistent.480" = type { %"class.blink::PersistentBase.481" }
%"class.blink::PersistentBase.481" = type { %"class.blink::ScriptState"*, %"class.blink::PersistentNodePtr" }
%"class.util::TokenType" = type { %"class.base::StrongAlias" }
%"class.base::StrongAlias" = type { %"class.base::UnguessableToken" }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.blink::NormalPageArena" = type { %"class.blink::BaseArena.base", [4 x i8], %"class.blink::FreeList", i8*, i64, i64 }
%"class.blink::BaseArena.base" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32 }>
%"class.blink::FreeList" = type <{ [17 x %"class.blink::FreeListEntry"*], [17 x %"class.blink::FreeListEntry"*], i32, [4 x i8] }>
%"class.blink::FreeListEntry" = type { %"class.blink::HeapObjectHeader", %"class.blink::FreeListEntry"* }
%"class.blink::PlatformAwareObjectStartBitmap" = type { %"class.blink::ObjectStartBitmap" }
%"class.blink::ObjectStartBitmap" = type { i8*, [2048 x i8] }
%"class.blink::HeapVectorBacking" = type { i8 }

$_ZN3WTF6StringD2Ev = comdat any

$_ZN5blink14DOMArrayBuffer6CreateEPKvm = comdat any

$_ZN5blink10NDEFRecordD2Ev = comdat any

$_ZN5blink10NDEFRecordD0Ev = comdat any

$_ZNK5blink15ScriptWrappable18HasPendingActivityEv = comdat any

$_ZNK5blink15ScriptWrappable17HasEventListenersEv = comdat any

$_ZNK5blink10NDEFRecord18GetWrapperTypeInfoEv = comdat any

$_ZN3WTF6VectorIhLj0ENS_18PartitionAllocatorEE6AppendIcEEvPKT_j = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm = comdat any

$_ZN3WTF6VectorIhLj0ENS_18PartitionAllocatorEE6AppendIhEEvPKT_j = comdat any

$_ZN5blink10ThreadHeap8AllocateINS_15ScriptWrappableEEEPhm = comdat any

$_ZN5blink10ThreadHeap20AllocateOnArenaIndexEPNS_11ThreadStateEmijPKc = comdat any

$_ZN5blink10TraceTraitINS_15ScriptWrappableEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink8internal14FinalizerTraitINS_15ScriptWrappableEE8FinalizeEPv = comdat any

$_ZN5blink9NameTraitINS_15ScriptWrappableEE7GetNameEPKv = comdat any

$_ZN5blink25MakeGarbageCollectedTraitINS_10NDEFRecordEE4CallIJN6device5mojom22NDEFRecordTypeCategoryERKN3WTF6StringESA_NS7_6VectorIhLj0ENS7_18PartitionAllocatorEEEEEEPS1_DpOT_ = comdat any

$_ZN5blink25MakeGarbageCollectedTraitINS_10NDEFRecordEE4CallIJRKN3WTF6StringERS5_RNS4_6VectorIhLj0ENS4_18PartitionAllocatorEEEEEEPS1_DpOT_ = comdat any

$_ZN5blink25MakeGarbageCollectedTraitINS_10NDEFRecordEE4CallIJN6device5mojom22NDEFRecordTypeCategoryERA8_KcRKN3WTF6StringERNSA_6VectorIhLj0ENSA_18PartitionAllocatorEEEEEEPS1_DpOT_ = comdat any

$_ZN5blink25MakeGarbageCollectedTraitINS_10NDEFRecordEE4CallIJN6device5mojom22NDEFRecordTypeCategoryERA13_KcRKN3WTF6StringERPNS_11NDEFMessageEEEEPS1_DpOT_ = comdat any

$_ZN5blink25MakeGarbageCollectedTraitINS_10NDEFRecordEE4CallIJN6device5mojom22NDEFRecordTypeCategoryERKN3WTF6StringESA_RNS7_6VectorIhLj0ENS7_18PartitionAllocatorEEEEEEPS1_DpOT_ = comdat any

$_ZN5blink18DOMArrayBufferBaseD2Ev = comdat any

$_ZN5blink18DOMArrayBufferBaseD0Ev = comdat any

$_ZN5blink18DOMArrayBufferBase4WrapEPNS_11ScriptStateE = comdat any

$_ZN3WTF6VectorIN5blink6MemberINS1_10NDEFRecordEEELj0ENS1_13HeapAllocatorEEC2ERKS6_ = comdat any

$_ZN5blink13HeapAllocator13QuantizedSizeINS_6MemberINS_10NDEFRecordEEEEEmm = comdat any

$_ZN5blink25MakeGarbageCollectedTraitINS_17HeapVectorBackingINS_6MemberINS_10NDEFRecordEEEN3WTF12VectorTraitsIS4_EEEEE4CallEm = comdat any

$_ZN5blink17HeapVectorBackingINS_6MemberINS_10NDEFRecordEEEN3WTF12VectorTraitsIS3_EEE14AllocateObjectIS7_EEPvm = comdat any

$_ZN5blink10TraceTraitINS_17HeapVectorBackingINS_6MemberINS_10NDEFRecordEEEN3WTF12VectorTraitsIS4_EEEEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink9NameTraitINS_17HeapVectorBackingINS_6MemberINS_10NDEFRecordEEEN3WTF12VectorTraitsIS4_EEEEE7GetNameEPKv = comdat any

$_ZN5blink10TraceTraitINS_10NDEFRecordEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink25MakeGarbageCollectedTraitINS_10NDEFRecordEE4CallIJN6device5mojom22NDEFRecordTypeCategoryERKN3WTF6StringES8_NS7_6VectorIhLj0ENS7_18PartitionAllocatorEEEEEEPS1_DpOT_ = comdat any

$_ZN5blink10TraceTraitINS_11NDEFMessageEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE13gc_info_index = comdat any

$_ZTVN5blink18DOMArrayBufferBaseE = comdat any

$_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_6MemberINS_10NDEFRecordEEEN3WTF12VectorTraitsIS4_EEEEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_6MemberINS_10NDEFRecordEEEN3WTF12VectorTraitsIS4_EEEEE5IndexEvE13gc_info_index = comdat any

@.str = private unnamed_addr constant [5 x i8] c"mime\00", align 1
@.str.1 = private unnamed_addr constant [64 x i8] c"NDEFRecordInit#mediaType is only applicable for 'mime' records.\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"empty\00", align 1
@.str.3 = private unnamed_addr constant [57 x i8] c"NDEFRecordInit#id is not applicable for 'empty' records.\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"text\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"url\00", align 1
@.str.6 = private unnamed_addr constant [13 x i8] c"absolute-url\00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c"unknown\00", align 1
@.str.8 = private unnamed_addr constant [13 x i8] c"smart-poster\00", align 1
@.str.9 = private unnamed_addr constant [121 x i8] c"Local type records are only supposed to be embedded in the payload of another record (smart-poster, external, or local).\00", align 1
@.str.10 = private unnamed_addr constant [25 x i8] c"Invalid NDEFRecord type.\00", align 1
@_ZTVN5blink10NDEFRecordE = hidden unnamed_addr constant { [11 x i8*] } { [11 x i8*] [i8* null, i8* null, i8* bitcast (i8* (%"class.blink::ScriptWrappable"*)* @_ZNK5blink15ScriptWrappable18NameInHeapSnapshotEv to i8*), i8* bitcast (void (%"class.blink::NDEFRecord"*)* @_ZN5blink10NDEFRecordD2Ev to i8*), i8* bitcast (void (%"class.blink::NDEFRecord"*)* @_ZN5blink10NDEFRecordD0Ev to i8*), i8* bitcast (i1 (%"class.blink::ScriptWrappable"*)* @_ZNK5blink15ScriptWrappable18HasPendingActivityEv to i8*), i8* bitcast (i1 (%"class.blink::ScriptWrappable"*)* @_ZNK5blink15ScriptWrappable17HasEventListenersEv to i8*), i8* bitcast (void (%"class.blink::NDEFRecord"*, %"class.blink::Visitor"*)* @_ZNK5blink10NDEFRecord5TraceEPNS_7VisitorE to i8*), i8* bitcast (%"struct.blink::WrapperTypeInfo"* (%"class.blink::NDEFRecord"*)* @_ZNK5blink10NDEFRecord18GetWrapperTypeInfoEv to i8*), i8* bitcast (%"class.v8::Value"* (%"class.blink::ScriptWrappable"*, %"class.blink::ScriptState"*)* @_ZN5blink15ScriptWrappable4WrapEPNS_11ScriptStateE to i8*), i8* bitcast (%"class.v8::Object"* (%"class.blink::ScriptWrappable"*, %"class.v8::Isolate"*, %"struct.blink::WrapperTypeInfo"*, %"class.v8::Object"*)* @_ZN5blink15ScriptWrappable20AssociateWithWrapperEPN2v87IsolateEPKNS_15WrapperTypeInfoENS1_5LocalINS1_6ObjectEEE to i8*)] }, align 8
@.str.11 = private unnamed_addr constant [6 x i8] c"utf-8\00", align 1
@.str.12 = private unnamed_addr constant [88 x i8] c"Only {smart-poster, external, local} type records could have a ndef message as payload.\00", align 1
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@.str.13 = private unnamed_addr constant [68 x i8] c"The data for 'text' NDEFRecords must be a String or a BufferSource.\00", align 1
@.str.14 = private unnamed_addr constant [39 x i8] c"Lang length cannot be stored in 6 bit.\00", align 1
@.str.15 = private unnamed_addr constant [89 x i8] c"A DOMString data source is always encoded as \22utf-8\22 so other encodings are not allowed.\00", align 1
@.str.16 = private unnamed_addr constant [7 x i8] c"utf-16\00", align 1
@.str.17 = private unnamed_addr constant [9 x i8] c"utf-16be\00", align 1
@.str.18 = private unnamed_addr constant [9 x i8] c"utf-16le\00", align 1
@.str.19 = private unnamed_addr constant [70 x i8] c"Encoding must be either \22utf-8\22, \22utf-16\22, \22utf-16be\22, or \22utf-16le\22.\00", align 1
@.str.20 = private unnamed_addr constant [18 x i8] c"new_size >= size_\00", align 1
@.str.21 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@.str.23 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.24 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv = private unnamed_addr constant [61 x i8] c"const char *WTF::GetStringWithTypeName() [T = unsigned char]\00", align 1
@.str.25 = private unnamed_addr constant [64 x i8] c"The provided buffer source exceeds the maximum supported length\00", align 1
@_ZN5blink11ThreadState16thread_specific_E = external local_unnamed_addr global %"class.WTF::ThreadSpecific"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv = private unnamed_addr constant [68 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::ThreadState *]\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink15ScriptWrappableEEEPKcv = private unnamed_addr constant [70 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::ScriptWrappable]\00", align 1
@.str.26 = private unnamed_addr constant [23 x i8] c"allocation_size > size\00", align 1
@.str.27 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/heap/impl/heap.h\00", align 1
@_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_15ScriptWrappableEE5TraceEPNS_7VisitorEPKv, void (i8*)* @_ZN5blink8internal14FinalizerTraitINS_15ScriptWrappableEE8FinalizeEPv, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_15ScriptWrappableEE7GetNameEPKv, i8 1 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@_ZN5blink11GCInfoTable13global_table_E = external local_unnamed_addr global %"class.blink::GCInfoTable"*, align 8
@.str.28 = private unnamed_addr constant [46 x i8] c"The data for url NDEFRecord must be a String.\00", align 1
@.str.29 = private unnamed_addr constant [34 x i8] c"Cannot parse data for url record.\00", align 1
@.str.30 = private unnamed_addr constant [55 x i8] c"The data for 'mime' NDEFRecord must be a BufferSource.\00", align 1
@.str.31 = private unnamed_addr constant [25 x i8] c"application/octet-stream\00", align 1
@.str.32 = private unnamed_addr constant [58 x i8] c"The data for 'unknown' NDEFRecord must be a BufferSource.\00", align 1
@.str.33 = private unnamed_addr constant [67 x i8] c"The data for 'smart-poster' NDEFRecord must be an NDEFMessageInit.\00", align 1
@_ZZN5blink12_GLOBAL__N_119IsValidExternalTypeERKN3WTF6StringEE24kOtherCharsForCustomType = internal global %"class.WTF::String" zeroinitializer, align 8
@_ZGVZN5blink12_GLOBAL__N_119IsValidExternalTypeERKN3WTF6StringEE24kOtherCharsForCustomType = internal global i64 0, align 8
@.str.34 = private unnamed_addr constant [16 x i8] c":!()+,-=@;$_*'.\00", align 1
@__dso_handle = external hidden global i8
@.str.35 = private unnamed_addr constant [84 x i8] c"The data for external type NDEFRecord must be a BufferSource or an NDEFMessageInit.\00", align 1
@.str.36 = private unnamed_addr constant [81 x i8] c"The data for local type NDEFRecord must be a BufferSource or an NDEFMessageInit.\00", align 1
@_ZN5blink10html_names9kLangAttrE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@.str.37 = private unnamed_addr constant [3 x i8] c"en\00", align 1
@_ZTVN5blink14DOMArrayBufferE = external unnamed_addr constant { [11 x i8*] }, align 8
@_ZTVN5blink18DOMArrayBufferBaseE = linkonce_odr hidden unnamed_addr constant { [11 x i8*] } { [11 x i8*] [i8* null, i8* null, i8* bitcast (i8* (%"class.blink::ScriptWrappable"*)* @_ZNK5blink15ScriptWrappable18NameInHeapSnapshotEv to i8*), i8* bitcast (void (%"class.blink::DOMArrayBufferBase"*)* @_ZN5blink18DOMArrayBufferBaseD2Ev to i8*), i8* bitcast (void (%"class.blink::DOMArrayBufferBase"*)* @_ZN5blink18DOMArrayBufferBaseD0Ev to i8*), i8* bitcast (i1 (%"class.blink::ScriptWrappable"*)* @_ZNK5blink15ScriptWrappable18HasPendingActivityEv to i8*), i8* bitcast (i1 (%"class.blink::ScriptWrappable"*)* @_ZNK5blink15ScriptWrappable17HasEventListenersEv to i8*), i8* bitcast (void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)* @_ZNK5blink15ScriptWrappable5TraceEPNS_7VisitorE to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (%"class.v8::Value"* (%"class.blink::DOMArrayBufferBase"*, %"class.blink::ScriptState"*)* @_ZN5blink18DOMArrayBufferBase4WrapEPNS_11ScriptStateE to i8*), i8* bitcast (%"class.v8::Object"* (%"class.blink::ScriptWrappable"*, %"class.v8::Isolate"*, %"struct.blink::WrapperTypeInfo"*, %"class.v8::Object"*)* @_ZN5blink15ScriptWrappable20AssociateWithWrapperEPN2v87IsolateEPKNS_15WrapperTypeInfoENS1_5LocalINS1_6ObjectEEE to i8*)] }, comdat, align 8
@.str.38 = private unnamed_addr constant [74 x i8] c"../../third_party/blink/renderer/platform/heap/impl/heap_allocator_impl.h\00", align 1
@.str.39 = private unnamed_addr constant [18 x i8] c"num_elements > 0u\00", align 1
@.str.40 = private unnamed_addr constant [93 x i8] c"../../third_party/blink/renderer/platform/heap/impl/collection_support/heap_vector_backing.h\00", align 1
@_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_6MemberINS_10NDEFRecordEEEN3WTF12VectorTraitsIS4_EEEEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_17HeapVectorBackingINS_6MemberINS_10NDEFRecordEEEN3WTF12VectorTraitsIS4_EEEEE5TraceEPNS_7VisitorEPKv, void (i8*)* null, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_17HeapVectorBackingINS_6MemberINS_10NDEFRecordEEEN3WTF12VectorTraitsIS4_EEEEE7GetNameEPKv, i8 0 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_6MemberINS_10NDEFRecordEEEN3WTF12VectorTraitsIS4_EEEEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@.str.41 = private unnamed_addr constant [13 x i8] c"InternalNode\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink17HeapVectorBackingINS1_6MemberINS1_10NDEFRecordEEENS_12VectorTraitsIS5_EEEEEEPKcv = private unnamed_addr constant [161 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::HeapVectorBacking<blink::Member<blink::NDEFRecord>, WTF::VectorTraits<blink::Member<blink::NDEFRecord> > >]\00", align 1
@_ZN5blink11ThreadState25incremental_marking_flag_E = external local_unnamed_addr global %"class.blink::AtomicEntryFlag", align 4
@_ZN5blink10NDEFRecord18wrapper_type_info_E = external local_unnamed_addr constant %"struct.blink::WrapperTypeInfo"*, align 8

@_ZN5blink10NDEFRecordC1EN6device5mojom22NDEFRecordTypeCategoryERKN3WTF6StringES7_NS4_6VectorIhLj0ENS4_18PartitionAllocatorEEE = hidden unnamed_addr alias void (%"class.blink::NDEFRecord"*, i32, %"class.WTF::String"*, %"class.WTF::String"*, %"class.WTF::Vector"*), void (%"class.blink::NDEFRecord"*, i32, %"class.WTF::String"*, %"class.WTF::String"*, %"class.WTF::Vector"*)* @_ZN5blink10NDEFRecordC2EN6device5mojom22NDEFRecordTypeCategoryERKN3WTF6StringES7_NS4_6VectorIhLj0ENS4_18PartitionAllocatorEEE
@_ZN5blink10NDEFRecordC1EN6device5mojom22NDEFRecordTypeCategoryERKN3WTF6StringES7_PNS_11NDEFMessageE = hidden unnamed_addr alias void (%"class.blink::NDEFRecord"*, i32, %"class.WTF::String"*, %"class.WTF::String"*, %"class.blink::NDEFMessage"*), void (%"class.blink::NDEFRecord"*, i32, %"class.WTF::String"*, %"class.WTF::String"*, %"class.blink::NDEFMessage"*)* @_ZN5blink10NDEFRecordC2EN6device5mojom22NDEFRecordTypeCategoryERKN3WTF6StringES7_PNS_11NDEFMessageE
@_ZN5blink10NDEFRecordC1ERKN3WTF6StringES4_S4_NS1_6VectorIhLj0ENS1_18PartitionAllocatorEEE = hidden unnamed_addr alias void (%"class.blink::NDEFRecord"*, %"class.WTF::String"*, %"class.WTF::String"*, %"class.WTF::String"*, %"class.WTF::Vector"*), void (%"class.blink::NDEFRecord"*, %"class.WTF::String"*, %"class.WTF::String"*, %"class.WTF::String"*, %"class.WTF::Vector"*)* @_ZN5blink10NDEFRecordC2ERKN3WTF6StringES4_S4_NS1_6VectorIhLj0ENS1_18PartitionAllocatorEEE
@_ZN5blink10NDEFRecordC1EPKNS_16ExecutionContextERKN3WTF6StringE = hidden unnamed_addr alias void (%"class.blink::NDEFRecord"*, %"class.blink::ExecutionContext"*, %"class.WTF::String"*), void (%"class.blink::NDEFRecord"*, %"class.blink::ExecutionContext"*, %"class.WTF::String"*)* @_ZN5blink10NDEFRecordC2EPKNS_16ExecutionContextERKN3WTF6StringE
@_ZN5blink10NDEFRecordC1ERKN3WTF6StringES4_NS1_6VectorIhLj0ENS1_18PartitionAllocatorEEE = hidden unnamed_addr alias void (%"class.blink::NDEFRecord"*, %"class.WTF::String"*, %"class.WTF::String"*, %"class.WTF::Vector"*), void (%"class.blink::NDEFRecord"*, %"class.WTF::String"*, %"class.WTF::String"*, %"class.WTF::Vector"*)* @_ZN5blink10NDEFRecordC2ERKN3WTF6StringES4_NS1_6VectorIhLj0ENS1_18PartitionAllocatorEEE
@_ZN5blink10NDEFRecordC1ERKN6device5mojom5blink10NDEFRecordE = hidden unnamed_addr alias void (%"class.blink::NDEFRecord"*, %"class.device::mojom::blink::NDEFRecord"*), void (%"class.blink::NDEFRecord"*, %"class.device::mojom::blink::NDEFRecord"*)* @_ZN5blink10NDEFRecordC2ERKN6device5mojom5blink10NDEFRecordE

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::NDEFRecord"* @_ZN5blink10NDEFRecord6CreateEPKNS_16ExecutionContextEPKNS_14NDEFRecordInitERNS_14ExceptionStateEb(%"class.blink::ExecutionContext"*, %"class.blink::NDEFRecordInit"*, %"class.blink::ExceptionState"* dereferenceable(72), i1 zeroext) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.WTF::Vector", align 8
  %6 = alloca i32, align 4
  %7 = alloca %"class.blink::NDEFMessage"*, align 8
  %8 = alloca i32, align 4
  %9 = alloca %"class.WTF::StringView", align 8
  %10 = alloca %"class.WTF::StringView", align 8
  %11 = alloca %"class.WTF::Vector", align 8
  %12 = alloca i32, align 4
  %13 = alloca %"class.WTF::StringView", align 8
  %14 = alloca %"class.WTF::StringView", align 8
  %15 = alloca %"class.WTF::String", align 8
  %16 = alloca %"class.WTF::AtomicString", align 8
  %17 = alloca %"class.WTF::String", align 8
  %18 = alloca %"class.WTF::Vector", align 8
  %19 = alloca %"class.WTF::StringView", align 8
  %20 = alloca %"class.WTF::StringView", align 8
  %21 = alloca %"class.WTF::StringUTF8Adaptor", align 8
  %22 = alloca %"class.WTF::String", align 8
  %23 = alloca %"class.blink::KURL", align 8
  %24 = alloca i32, align 4
  %25 = alloca %"class.WTF::Vector", align 8
  %26 = alloca %"class.WTF::StringView", align 8
  %27 = alloca %"class.WTF::StringView", align 8
  %28 = alloca %"class.WTF::StringView", align 8
  %29 = alloca %"class.WTF::StringView", align 8
  %30 = alloca %"class.WTF::StringView", align 8
  %31 = alloca %"class.WTF::StringView", align 8
  %32 = alloca %"class.WTF::StringView", align 8
  %33 = alloca %"class.WTF::StringView", align 8
  %34 = alloca %"class.WTF::StringView", align 8
  %35 = alloca %"class.WTF::StringView", align 8
  %36 = alloca %"class.WTF::StringView", align 8
  %37 = alloca %"class.WTF::StringView", align 8
  %38 = alloca %"class.WTF::Vector", align 8
  %39 = alloca %"class.WTF::String", align 8
  %40 = alloca %"class.WTF::String", align 8
  %41 = alloca %"class.WTF::Vector", align 8
  %42 = alloca %"class.WTF::StringUTF8Adaptor", align 8
  %43 = alloca %"class.WTF::StringView", align 8
  %44 = alloca %"class.WTF::StringView", align 8
  %45 = alloca %"class.WTF::StringView", align 8
  %46 = alloca %"class.WTF::StringView", align 8
  %47 = alloca %"class.WTF::StringView", align 8
  %48 = alloca %"class.WTF::StringView", align 8
  %49 = alloca %"class.WTF::StringView", align 8
  %50 = alloca %"class.WTF::StringView", align 8
  %51 = alloca %"class.WTF::Vector", align 8
  %52 = alloca i32, align 4
  %53 = alloca %"class.WTF::String", align 8
  %54 = alloca i32, align 4
  %55 = alloca %"class.WTF::String", align 8
  %56 = alloca %"class.WTF::Vector", align 8
  %57 = getelementptr inbounds %"class.blink::NDEFRecordInit", %"class.blink::NDEFRecordInit"* %1, i64 0, i32 6
  %58 = getelementptr inbounds %"class.blink::NDEFRecordInit", %"class.blink::NDEFRecordInit"* %1, i64 0, i32 5, i32 0, i32 0
  %59 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %58, align 8
  %60 = icmp eq %"class.WTF::StringImpl"* %59, null
  br i1 %60, label %88, label %61

61:                                               ; preds = %4
  %62 = bitcast %"class.WTF::StringView"* %49 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %62) #12
  %63 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %57, i64 0, i32 0, i32 0
  %64 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %63, align 8
  %65 = icmp eq %"class.WTF::StringImpl"* %64, null
  br i1 %65, label %66, label %70

66:                                               ; preds = %61
  %67 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %49, i64 0, i32 1
  store i8* null, i8** %67, align 8
  %68 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %69 = bitcast %"class.WTF::StringView"* %49 to i64*
  store i64 %68, i64* %69, align 8
  br label %78

70:                                               ; preds = %61
  %71 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %49, i64 0, i32 0
  store %"class.WTF::StringImpl"* %64, %"class.WTF::StringImpl"** %71, align 8
  %72 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %64, i64 0, i32 1
  %73 = load i32, i32* %72, align 4
  %74 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %64, i64 1
  %75 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %49, i64 0, i32 1
  %76 = bitcast i8** %75 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %74, %"class.WTF::StringImpl"** %76, align 8
  %77 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %78

78:                                               ; preds = %70, %66
  %79 = phi i64 [ %77, %70 ], [ %68, %66 ]
  %80 = phi i32 [ %73, %70 ], [ 0, %66 ]
  %81 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %49, i64 0, i32 2
  store i32 %80, i32* %81, align 8
  %82 = bitcast %"class.WTF::StringView"* %50 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %82) #12
  %83 = bitcast %"class.WTF::StringView"* %50 to i64*
  store i64 %79, i64* %83, align 8
  %84 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %50, i64 0, i32 1
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i8** %84, align 8
  %85 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %50, i64 0, i32 2
  store i32 4, i32* %85, align 8
  %86 = call zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* nonnull dereferenceable(24) %49, %"class.WTF::StringView"* nonnull dereferenceable(24) %50) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %82) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %62) #12
  br i1 %86, label %88, label %87

87:                                               ; preds = %78
  call void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"* %2, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i64 0, i64 0)) #12
  br label %1401

88:                                               ; preds = %78, %4
  %89 = getelementptr inbounds %"class.blink::NDEFRecordInit", %"class.blink::NDEFRecordInit"* %1, i64 0, i32 3, i32 0, i32 0
  %90 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %89, align 8
  %91 = icmp eq %"class.WTF::StringImpl"* %90, null
  br i1 %91, label %92, label %95

92:                                               ; preds = %88
  %93 = bitcast %"class.WTF::String"* %53 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %93) #12
  %94 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %53, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %94, align 8
  br label %164

95:                                               ; preds = %88
  %96 = bitcast %"class.WTF::StringView"* %47 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %96) #12
  %97 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %57, i64 0, i32 0, i32 0
  %98 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %97, align 8
  %99 = icmp eq %"class.WTF::StringImpl"* %98, null
  br i1 %99, label %100, label %104

100:                                              ; preds = %95
  %101 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %47, i64 0, i32 1
  store i8* null, i8** %101, align 8
  %102 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %103 = bitcast %"class.WTF::StringView"* %47 to i64*
  store i64 %102, i64* %103, align 8
  br label %112

104:                                              ; preds = %95
  %105 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %47, i64 0, i32 0
  store %"class.WTF::StringImpl"* %98, %"class.WTF::StringImpl"** %105, align 8
  %106 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %98, i64 0, i32 1
  %107 = load i32, i32* %106, align 4
  %108 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %98, i64 1
  %109 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %47, i64 0, i32 1
  %110 = bitcast i8** %109 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %108, %"class.WTF::StringImpl"** %110, align 8
  %111 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %112

112:                                              ; preds = %104, %100
  %113 = phi i64 [ %111, %104 ], [ %102, %100 ]
  %114 = phi i32 [ %107, %104 ], [ 0, %100 ]
  %115 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %47, i64 0, i32 2
  store i32 %114, i32* %115, align 8
  %116 = bitcast %"class.WTF::StringView"* %48 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %116) #12
  %117 = bitcast %"class.WTF::StringView"* %48 to i64*
  store i64 %113, i64* %117, align 8
  %118 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %48, i64 0, i32 1
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i8** %118, align 8
  %119 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %48, i64 0, i32 2
  store i32 5, i32* %119, align 8
  %120 = call zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* nonnull dereferenceable(24) %47, %"class.WTF::StringView"* nonnull dereferenceable(24) %48) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %116) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %96) #12
  br i1 %120, label %121, label %122

121:                                              ; preds = %112
  call void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"* %2, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.3, i64 0, i64 0)) #12
  br label %1401

122:                                              ; preds = %112
  %123 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %89, align 8
  %124 = bitcast %"class.WTF::String"* %53 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %124) #12
  %125 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %53, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %125, align 8
  %126 = icmp eq %"class.WTF::StringImpl"* %123, null
  br i1 %126, label %164, label %127

127:                                              ; preds = %122
  %128 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %123, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %129 = load atomic i32, i32* %128 monotonic, align 4
  %130 = and i32 %129, 2
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %135, label %132

132:                                              ; preds = %127
  %133 = ptrtoint %"class.WTF::StringImpl"* %123 to i64
  %134 = bitcast %"class.WTF::String"* %53 to i64*
  store i64 %133, i64* %134, align 8
  br label %164

135:                                              ; preds = %127
  %136 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %123, i64 0, i32 0
  %137 = load i32, i32* %136, align 4
  %138 = zext i32 %137 to i33
  %139 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %138, i33 1) #12
  %140 = extractvalue { i33, i1 } %139, 1
  %141 = extractvalue { i33, i1 } %139, 0
  %142 = icmp slt i33 %141, 0
  %143 = or i1 %140, %142
  br i1 %143, label %144, label %145, !prof !2

144:                                              ; preds = %135
  call void @llvm.trap() #12
  unreachable

145:                                              ; preds = %135
  %146 = trunc i33 %141 to i32
  store i32 %146, i32* %136, align 4
  %147 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %125, align 8
  %148 = ptrtoint %"class.WTF::StringImpl"* %123 to i64
  %149 = bitcast %"class.WTF::String"* %53 to i64*
  store i64 %148, i64* %149, align 8
  %150 = icmp eq %"class.WTF::StringImpl"* %147, null
  br i1 %150, label %164, label %151

151:                                              ; preds = %145
  %152 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %147, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %153 = load atomic i32, i32* %152 monotonic, align 4
  %154 = and i32 %153, 2
  %155 = icmp eq i32 %154, 0
  %156 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %147, i64 0, i32 0
  %157 = load i32, i32* %156, align 4
  br i1 %155, label %158, label %160

158:                                              ; preds = %151
  %159 = add i32 %157, -1
  store i32 %159, i32* %156, align 4
  br label %160

160:                                              ; preds = %158, %151
  %161 = phi i32 [ %159, %158 ], [ %157, %151 ]
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %163, label %164

163:                                              ; preds = %160
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %147) #12
  br label %164

164:                                              ; preds = %132, %122, %163, %160, %145, %92
  %165 = phi %"class.WTF::StringImpl"** [ %94, %92 ], [ %125, %122 ], [ %125, %145 ], [ %125, %160 ], [ %125, %163 ], [ %125, %132 ]
  %166 = phi i8* [ %93, %92 ], [ %124, %122 ], [ %124, %145 ], [ %124, %160 ], [ %124, %163 ], [ %124, %132 ]
  %167 = bitcast %"class.WTF::StringView"* %45 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %167) #12
  %168 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %57, i64 0, i32 0, i32 0
  %169 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %168, align 8
  %170 = icmp eq %"class.WTF::StringImpl"* %169, null
  br i1 %170, label %171, label %175

171:                                              ; preds = %164
  %172 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %45, i64 0, i32 1
  store i8* null, i8** %172, align 8
  %173 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %174 = bitcast %"class.WTF::StringView"* %45 to i64*
  store i64 %173, i64* %174, align 8
  br label %183

175:                                              ; preds = %164
  %176 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %45, i64 0, i32 0
  store %"class.WTF::StringImpl"* %169, %"class.WTF::StringImpl"** %176, align 8
  %177 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %169, i64 0, i32 1
  %178 = load i32, i32* %177, align 4
  %179 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %169, i64 1
  %180 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %45, i64 0, i32 1
  %181 = bitcast i8** %180 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %179, %"class.WTF::StringImpl"** %181, align 8
  %182 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %183

183:                                              ; preds = %175, %171
  %184 = phi i64 [ %182, %175 ], [ %173, %171 ]
  %185 = phi i32 [ %178, %175 ], [ 0, %171 ]
  %186 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %45, i64 0, i32 2
  store i32 %185, i32* %186, align 8
  %187 = bitcast %"class.WTF::StringView"* %46 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %187) #12
  %188 = bitcast %"class.WTF::StringView"* %46 to i64*
  store i64 %184, i64* %188, align 8
  %189 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %46, i64 0, i32 1
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i8** %189, align 8
  %190 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %46, i64 0, i32 2
  store i32 5, i32* %190, align 8
  %191 = call zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* nonnull dereferenceable(24) %45, %"class.WTF::StringView"* nonnull dereferenceable(24) %46) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %187) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %167) #12
  br i1 %191, label %192, label %224

192:                                              ; preds = %183
  %193 = bitcast i32* %54 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %193) #12
  store i32 0, i32* %54, align 4
  %194 = bitcast %"class.WTF::String"* %55 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %194) #12
  %195 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %55, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %195, align 8
  %196 = bitcast %"class.WTF::Vector"* %56 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %196) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %196, i8 0, i64 16, i1 false) #12
  %197 = call %"class.blink::NDEFRecord"* @_ZN5blink25MakeGarbageCollectedTraitINS_10NDEFRecordEE4CallIJN6device5mojom22NDEFRecordTypeCategoryERKN3WTF6StringES8_NS7_6VectorIhLj0ENS7_18PartitionAllocatorEEEEEEPS1_DpOT_(i32* nonnull dereferenceable(4) %54, %"class.WTF::String"* dereferenceable(8) %57, %"class.WTF::String"* nonnull dereferenceable(8) %55, %"class.WTF::Vector"* nonnull dereferenceable(16) %56) #12
  %198 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %56, i64 0, i32 0, i32 0, i32 0
  %199 = load i8*, i8** %198, align 8
  %200 = icmp eq i8* %199, null
  br i1 %200, label %207, label %201, !prof !3

201:                                              ; preds = %192
  %202 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %56, i64 0, i32 0, i32 0, i32 2
  %203 = load i32, i32* %202, align 4
  %204 = icmp eq i32 %203, 0
  br i1 %204, label %206, label %205, !prof !2

205:                                              ; preds = %201
  store i32 0, i32* %202, align 4
  br label %206

206:                                              ; preds = %205, %201
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %199) #12
  store i8* null, i8** %198, align 8
  br label %207

207:                                              ; preds = %192, %206
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %196) #12
  %208 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %195, align 8
  %209 = icmp eq %"class.WTF::StringImpl"* %208, null
  br i1 %209, label %223, label %210

210:                                              ; preds = %207
  %211 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %208, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %212 = load atomic i32, i32* %211 monotonic, align 4
  %213 = and i32 %212, 2
  %214 = icmp eq i32 %213, 0
  %215 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %208, i64 0, i32 0
  %216 = load i32, i32* %215, align 4
  br i1 %214, label %217, label %219

217:                                              ; preds = %210
  %218 = add i32 %216, -1
  store i32 %218, i32* %215, align 4
  br label %219

219:                                              ; preds = %217, %210
  %220 = phi i32 [ %218, %217 ], [ %216, %210 ]
  %221 = icmp eq i32 %220, 0
  br i1 %221, label %222, label %223

222:                                              ; preds = %219
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %208) #12
  br label %223

223:                                              ; preds = %207, %219, %222
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %194) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %193) #12
  br label %1383

224:                                              ; preds = %183
  %225 = bitcast %"class.WTF::StringView"* %43 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %225) #12
  %226 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %168, align 8
  %227 = icmp eq %"class.WTF::StringImpl"* %226, null
  br i1 %227, label %228, label %232

228:                                              ; preds = %224
  %229 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %43, i64 0, i32 1
  store i8* null, i8** %229, align 8
  %230 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %231 = bitcast %"class.WTF::StringView"* %43 to i64*
  store i64 %230, i64* %231, align 8
  br label %240

232:                                              ; preds = %224
  %233 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %43, i64 0, i32 0
  store %"class.WTF::StringImpl"* %226, %"class.WTF::StringImpl"** %233, align 8
  %234 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %226, i64 0, i32 1
  %235 = load i32, i32* %234, align 4
  %236 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %226, i64 1
  %237 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %43, i64 0, i32 1
  %238 = bitcast i8** %237 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %236, %"class.WTF::StringImpl"** %238, align 8
  %239 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %240

240:                                              ; preds = %232, %228
  %241 = phi i64 [ %239, %232 ], [ %230, %228 ]
  %242 = phi i32 [ %235, %232 ], [ 0, %228 ]
  %243 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %43, i64 0, i32 2
  store i32 %242, i32* %243, align 8
  %244 = bitcast %"class.WTF::StringView"* %44 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %244) #12
  %245 = bitcast %"class.WTF::StringView"* %44 to i64*
  store i64 %241, i64* %245, align 8
  %246 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %44, i64 0, i32 1
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0), i8** %246, align 8
  %247 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %44, i64 0, i32 2
  store i32 4, i32* %247, align 8
  %248 = call zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* nonnull dereferenceable(24) %43, %"class.WTF::StringView"* nonnull dereferenceable(24) %44) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %244) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %225) #12
  br i1 %248, label %249, label %506

249:                                              ; preds = %240
  %250 = getelementptr inbounds %"class.blink::NDEFRecordInit", %"class.blink::NDEFRecordInit"* %1, i64 0, i32 1, i32 0
  %251 = load i32, i32* %250, align 8
  %252 = icmp eq i32 %251, 0
  br i1 %252, label %256, label %253

253:                                              ; preds = %249
  %254 = getelementptr inbounds %"class.blink::NDEFRecordInit", %"class.blink::NDEFRecordInit"* %1, i64 0, i32 1
  %255 = getelementptr inbounds %"class.blink::StringOrArrayBufferOrArrayBufferViewOrNDEFMessageInit", %"class.blink::StringOrArrayBufferOrArrayBufferViewOrNDEFMessageInit"* %254, i64 0, i32 0
  switch i32 %251, label %256 [
    i32 4, label %257
    i32 2, label %257
    i32 1, label %257
  ]

256:                                              ; preds = %253, %249
  call void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"* %2, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.13, i64 0, i64 0)) #12
  br label %1383

257:                                              ; preds = %253, %253, %253
  %258 = bitcast %"class.WTF::String"* %39 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %258) #12
  %259 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %39, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %259, align 8
  %260 = getelementptr inbounds %"class.blink::NDEFRecordInit", %"class.blink::NDEFRecordInit"* %1, i64 0, i32 4, i32 0, i32 0
  %261 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %260, align 8
  %262 = icmp eq %"class.WTF::StringImpl"* %261, null
  br i1 %262, label %283, label %263

263:                                              ; preds = %257
  %264 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %261, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %265 = load atomic i32, i32* %264 monotonic, align 4
  %266 = and i32 %265, 2
  %267 = icmp eq i32 %266, 0
  br i1 %267, label %268, label %280

268:                                              ; preds = %263
  %269 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %261, i64 0, i32 0
  %270 = load i32, i32* %269, align 4
  %271 = zext i32 %270 to i33
  %272 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %271, i33 1) #12
  %273 = extractvalue { i33, i1 } %272, 1
  %274 = extractvalue { i33, i1 } %272, 0
  %275 = icmp slt i33 %274, 0
  %276 = or i1 %273, %275
  br i1 %276, label %277, label %278, !prof !2

277:                                              ; preds = %268
  call void @llvm.trap() #12
  unreachable

278:                                              ; preds = %268
  %279 = trunc i33 %274 to i32
  store i32 %279, i32* %269, align 4
  br label %280

280:                                              ; preds = %278, %263
  %281 = ptrtoint %"class.WTF::StringImpl"* %261 to i64
  %282 = bitcast %"class.WTF::String"* %39 to i64*
  store i64 %281, i64* %282, align 8
  br label %288

283:                                              ; preds = %257
  %284 = call fastcc %"class.WTF::StringImpl"* @_ZN5blink12_GLOBAL__N_119getDocumentLanguageEPKNS_16ExecutionContextE(%"class.blink::ExecutionContext"* %0) #12
  %285 = ptrtoint %"class.WTF::StringImpl"* %284 to i64
  %286 = bitcast %"class.WTF::String"* %39 to i64*
  store i64 %285, i64* %286, align 8
  %287 = icmp eq %"class.WTF::StringImpl"* %284, null
  br i1 %287, label %294, label %288

288:                                              ; preds = %283, %280
  %289 = phi %"class.WTF::StringImpl"* [ %261, %280 ], [ %284, %283 ]
  %290 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %289, i64 0, i32 1
  %291 = load i32, i32* %290, align 4
  %292 = icmp ugt i32 %291, 63
  br i1 %292, label %293, label %294

293:                                              ; preds = %288
  call void @_ZN5blink14ExceptionState17ThrowDOMExceptionENS_16DOMExceptionCodeEPKc(%"class.blink::ExceptionState"* %2, i32 12, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.14, i64 0, i64 0)) #12
  br label %489

294:                                              ; preds = %288, %283
  %295 = bitcast %"class.WTF::String"* %40 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %295) #12
  %296 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %40, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* inttoptr (i64 -6148914691236517206 to %"class.WTF::StringImpl"*), %"class.WTF::StringImpl"** %296, align 8
  %297 = getelementptr inbounds %"class.blink::NDEFRecordInit", %"class.blink::NDEFRecordInit"* %1, i64 0, i32 2, i32 0, i32 0
  %298 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %297, align 8
  %299 = icmp eq %"class.WTF::StringImpl"* %298, null
  br i1 %299, label %317, label %300

300:                                              ; preds = %294
  store %"class.WTF::StringImpl"* %298, %"class.WTF::StringImpl"** %296, align 8
  %301 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %298, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %302 = load atomic i32, i32* %301 monotonic, align 4
  %303 = and i32 %302, 2
  %304 = icmp eq i32 %303, 0
  br i1 %304, label %305, label %318

305:                                              ; preds = %300
  %306 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %298, i64 0, i32 0
  %307 = load i32, i32* %306, align 4
  %308 = zext i32 %307 to i33
  %309 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %308, i33 1) #12
  %310 = extractvalue { i33, i1 } %309, 1
  %311 = extractvalue { i33, i1 } %309, 0
  %312 = icmp slt i33 %311, 0
  %313 = or i1 %310, %312
  br i1 %313, label %314, label %315, !prof !2

314:                                              ; preds = %305
  call void @llvm.trap() #12
  unreachable

315:                                              ; preds = %305
  %316 = trunc i33 %311 to i32
  store i32 %316, i32* %306, align 4
  br label %318

317:                                              ; preds = %294
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %40, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11, i64 0, i64 0), i64 5) #12
  br label %318

318:                                              ; preds = %317, %315, %300
  %319 = bitcast %"class.WTF::Vector"* %41 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %319) #12
  %320 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %41, i64 0, i32 0, i32 0, i32 0
  %321 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %41, i64 0, i32 0, i32 0, i32 1
  %322 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %41, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %319, i8 0, i64 16, i1 false) #12
  %323 = load i32, i32* %255, align 8
  %324 = icmp eq i32 %323, 4
  %325 = bitcast %"class.WTF::StringView"* %30 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %325) #12
  %326 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %296, align 8
  %327 = icmp eq %"class.WTF::StringImpl"* %326, null
  br i1 %327, label %328, label %332

328:                                              ; preds = %318
  %329 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %30, i64 0, i32 1
  store i8* null, i8** %329, align 8
  %330 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %331 = bitcast %"class.WTF::StringView"* %30 to i64*
  store i64 %330, i64* %331, align 8
  br label %340

332:                                              ; preds = %318
  %333 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %30, i64 0, i32 0
  store %"class.WTF::StringImpl"* %326, %"class.WTF::StringImpl"** %333, align 8
  %334 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %326, i64 0, i32 1
  %335 = load i32, i32* %334, align 4
  %336 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %326, i64 1
  %337 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %30, i64 0, i32 1
  %338 = bitcast i8** %337 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %336, %"class.WTF::StringImpl"** %338, align 8
  %339 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %340

340:                                              ; preds = %332, %328
  %341 = phi i64 [ %339, %332 ], [ %330, %328 ]
  %342 = phi i32 [ %335, %332 ], [ 0, %328 ]
  %343 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %30, i64 0, i32 2
  store i32 %342, i32* %343, align 8
  %344 = bitcast %"class.WTF::StringView"* %31 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %344) #12
  %345 = bitcast %"class.WTF::StringView"* %31 to i64*
  store i64 %341, i64* %345, align 8
  %346 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %31, i64 0, i32 1
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11, i64 0, i64 0), i8** %346, align 8
  %347 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %31, i64 0, i32 2
  store i32 5, i32* %347, align 8
  %348 = call zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* nonnull dereferenceable(24) %30, %"class.WTF::StringView"* nonnull dereferenceable(24) %31) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %344) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %325) #12
  br i1 %324, label %349, label %358

349:                                              ; preds = %340
  br i1 %348, label %351, label %350

350:                                              ; preds = %349
  call void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"* %2, i8* getelementptr inbounds ([89 x i8], [89 x i8]* @.str.15, i64 0, i64 0)) #12
  br label %461

351:                                              ; preds = %349
  %352 = bitcast %"class.WTF::StringUTF8Adaptor"* %42 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %352) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %352, i8 -86, i64 40, i1 false) #12
  %353 = call dereferenceable(8) %"class.WTF::String"* @_ZNK5blink53StringOrArrayBufferOrArrayBufferViewOrNDEFMessageInit11GetAsStringEv(%"class.blink::StringOrArrayBufferOrArrayBufferViewOrNDEFMessageInit"* %254) #12
  call void @_ZN3WTF17StringUTF8AdaptorC1ERKNS_6StringENS_18UTF8ConversionModeE(%"class.WTF::StringUTF8Adaptor"* nonnull %42, %"class.WTF::String"* dereferenceable(8) %353, i32 0) #12
  %354 = getelementptr inbounds %"class.WTF::StringUTF8Adaptor", %"class.WTF::StringUTF8Adaptor"* %42, i64 0, i32 1
  %355 = load i8*, i8** %354, align 8
  %356 = getelementptr inbounds %"class.WTF::StringUTF8Adaptor", %"class.WTF::StringUTF8Adaptor"* %42, i64 0, i32 2
  %357 = load i32, i32* %356, align 8
  call void @_ZN3WTF6VectorIhLj0ENS_18PartitionAllocatorEE6AppendIcEEvPKT_j(%"class.WTF::Vector"* nonnull %41, i8* %355, i32 %357) #12
  call void @_ZN3WTF17StringUTF8AdaptorD1Ev(%"class.WTF::StringUTF8Adaptor"* nonnull %42) #12
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %352) #12
  br label %437

358:                                              ; preds = %340
  br i1 %348, label %435, label %359

359:                                              ; preds = %358
  %360 = bitcast %"class.WTF::StringView"* %32 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %360) #12
  %361 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %296, align 8
  %362 = icmp eq %"class.WTF::StringImpl"* %361, null
  br i1 %362, label %363, label %367

363:                                              ; preds = %359
  %364 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %32, i64 0, i32 1
  store i8* null, i8** %364, align 8
  %365 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %366 = bitcast %"class.WTF::StringView"* %32 to i64*
  store i64 %365, i64* %366, align 8
  br label %375

367:                                              ; preds = %359
  %368 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %32, i64 0, i32 0
  store %"class.WTF::StringImpl"* %361, %"class.WTF::StringImpl"** %368, align 8
  %369 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %361, i64 0, i32 1
  %370 = load i32, i32* %369, align 4
  %371 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %361, i64 1
  %372 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %32, i64 0, i32 1
  %373 = bitcast i8** %372 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %371, %"class.WTF::StringImpl"** %373, align 8
  %374 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %375

375:                                              ; preds = %367, %363
  %376 = phi i64 [ %374, %367 ], [ %365, %363 ]
  %377 = phi i32 [ %370, %367 ], [ 0, %363 ]
  %378 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %32, i64 0, i32 2
  store i32 %377, i32* %378, align 8
  %379 = bitcast %"class.WTF::StringView"* %33 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %379) #12
  %380 = bitcast %"class.WTF::StringView"* %33 to i64*
  store i64 %376, i64* %380, align 8
  %381 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %33, i64 0, i32 1
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.16, i64 0, i64 0), i8** %381, align 8
  %382 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %33, i64 0, i32 2
  store i32 6, i32* %382, align 8
  %383 = call zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* nonnull dereferenceable(24) %32, %"class.WTF::StringView"* nonnull dereferenceable(24) %33) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %379) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %360) #12
  br i1 %383, label %435, label %384

384:                                              ; preds = %375
  %385 = bitcast %"class.WTF::StringView"* %34 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %385) #12
  %386 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %296, align 8
  %387 = icmp eq %"class.WTF::StringImpl"* %386, null
  br i1 %387, label %388, label %392

388:                                              ; preds = %384
  %389 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %34, i64 0, i32 1
  store i8* null, i8** %389, align 8
  %390 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %391 = bitcast %"class.WTF::StringView"* %34 to i64*
  store i64 %390, i64* %391, align 8
  br label %400

392:                                              ; preds = %384
  %393 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %34, i64 0, i32 0
  store %"class.WTF::StringImpl"* %386, %"class.WTF::StringImpl"** %393, align 8
  %394 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %386, i64 0, i32 1
  %395 = load i32, i32* %394, align 4
  %396 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %386, i64 1
  %397 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %34, i64 0, i32 1
  %398 = bitcast i8** %397 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %396, %"class.WTF::StringImpl"** %398, align 8
  %399 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %400

400:                                              ; preds = %392, %388
  %401 = phi i64 [ %399, %392 ], [ %390, %388 ]
  %402 = phi i32 [ %395, %392 ], [ 0, %388 ]
  %403 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %34, i64 0, i32 2
  store i32 %402, i32* %403, align 8
  %404 = bitcast %"class.WTF::StringView"* %35 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %404) #12
  %405 = bitcast %"class.WTF::StringView"* %35 to i64*
  store i64 %401, i64* %405, align 8
  %406 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %35, i64 0, i32 1
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.17, i64 0, i64 0), i8** %406, align 8
  %407 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %35, i64 0, i32 2
  store i32 8, i32* %407, align 8
  %408 = call zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* nonnull dereferenceable(24) %34, %"class.WTF::StringView"* nonnull dereferenceable(24) %35) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %404) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %385) #12
  br i1 %408, label %435, label %409

409:                                              ; preds = %400
  %410 = bitcast %"class.WTF::StringView"* %36 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %410) #12
  %411 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %296, align 8
  %412 = icmp eq %"class.WTF::StringImpl"* %411, null
  br i1 %412, label %413, label %417

413:                                              ; preds = %409
  %414 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %36, i64 0, i32 1
  store i8* null, i8** %414, align 8
  %415 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %416 = bitcast %"class.WTF::StringView"* %36 to i64*
  store i64 %415, i64* %416, align 8
  br label %425

417:                                              ; preds = %409
  %418 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %36, i64 0, i32 0
  store %"class.WTF::StringImpl"* %411, %"class.WTF::StringImpl"** %418, align 8
  %419 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %411, i64 0, i32 1
  %420 = load i32, i32* %419, align 4
  %421 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %411, i64 1
  %422 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %36, i64 0, i32 1
  %423 = bitcast i8** %422 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %421, %"class.WTF::StringImpl"** %423, align 8
  %424 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %425

425:                                              ; preds = %417, %413
  %426 = phi i64 [ %424, %417 ], [ %415, %413 ]
  %427 = phi i32 [ %420, %417 ], [ 0, %413 ]
  %428 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %36, i64 0, i32 2
  store i32 %427, i32* %428, align 8
  %429 = bitcast %"class.WTF::StringView"* %37 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %429) #12
  %430 = bitcast %"class.WTF::StringView"* %37 to i64*
  store i64 %426, i64* %430, align 8
  %431 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %37, i64 0, i32 1
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.18, i64 0, i64 0), i8** %431, align 8
  %432 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %37, i64 0, i32 2
  store i32 8, i32* %432, align 8
  %433 = call zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* nonnull dereferenceable(24) %36, %"class.WTF::StringView"* nonnull dereferenceable(24) %37) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %429) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %410) #12
  br i1 %433, label %435, label %434

434:                                              ; preds = %425
  call void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"* %2, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.19, i64 0, i64 0)) #12
  br label %461

435:                                              ; preds = %425, %400, %375, %358
  %436 = call fastcc zeroext i1 @_ZN5blink12_GLOBAL__N_122GetBytesOfBufferSourceERKNS_53StringOrArrayBufferOrArrayBufferViewOrNDEFMessageInitEPN3WTF6VectorIhLj0ENS4_18PartitionAllocatorEEERNS_14ExceptionStateE(%"class.blink::StringOrArrayBufferOrArrayBufferViewOrNDEFMessageInit"* dereferenceable(40) %254, %"class.WTF::Vector"* nonnull %41, %"class.blink::ExceptionState"* dereferenceable(72) %2) #12
  br i1 %436, label %437, label %461

437:                                              ; preds = %435, %351
  %438 = bitcast %"class.WTF::Vector"* %38 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %438) #12
  %439 = call i8* @_ZN5blink10ThreadHeap8AllocateINS_15ScriptWrappableEEEPhm(i64 88) #12
  %440 = bitcast i8* %439 to %"class.blink::NDEFRecord"*
  %441 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %38, i64 0, i32 0, i32 0, i32 1
  %442 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %38, i64 0, i32 0, i32 0, i32 2
  %443 = bitcast %"class.WTF::Vector"* %41 to i64*
  %444 = bitcast %"class.WTF::Vector"* %38 to i64*
  store i64 0, i64* %444, align 8
  %445 = load i64, i64* %443, align 8
  store atomic i64 0, i64* %443 monotonic, align 8
  store atomic i64 %445, i64* %444 monotonic, align 8
  %446 = load i32, i32* %321, align 8
  store i32 %446, i32* %441, align 8
  store i32 0, i32* %321, align 8
  %447 = load i32, i32* %322, align 4
  store i32 %447, i32* %442, align 4
  store i32 0, i32* %322, align 4
  call void @_ZN5blink10NDEFRecordC2ERKN3WTF6StringES4_S4_NS1_6VectorIhLj0ENS1_18PartitionAllocatorEEE(%"class.blink::NDEFRecord"* %440, %"class.WTF::String"* nonnull dereferenceable(8) %53, %"class.WTF::String"* nonnull dereferenceable(8) %40, %"class.WTF::String"* nonnull dereferenceable(8) %39, %"class.WTF::Vector"* nonnull %38) #12
  %448 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %38, i64 0, i32 0, i32 0, i32 0
  %449 = load i8*, i8** %448, align 8
  %450 = icmp eq i8* %449, null
  br i1 %450, label %456, label %451, !prof !3

451:                                              ; preds = %437
  %452 = load i32, i32* %442, align 4
  %453 = icmp eq i32 %452, 0
  br i1 %453, label %455, label %454, !prof !2

454:                                              ; preds = %451
  store i32 0, i32* %442, align 4
  br label %455

455:                                              ; preds = %454, %451
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %449) #12
  store i8* null, i8** %448, align 8
  br label %456

456:                                              ; preds = %455, %437
  %457 = getelementptr inbounds i8, i8* %439, i64 -4
  %458 = bitcast i8* %457 to i16*
  %459 = load atomic i16, i16* %458 monotonic, align 2
  %460 = or i16 %459, 1
  store atomic i16 %460, i16* %458 release, align 2
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %438) #12
  br label %461

461:                                              ; preds = %456, %435, %434, %350
  %462 = phi %"class.blink::NDEFRecord"* [ null, %350 ], [ %440, %456 ], [ null, %434 ], [ null, %435 ]
  %463 = load i8*, i8** %320, align 8
  %464 = icmp eq i8* %463, null
  br i1 %464, label %470, label %465, !prof !3

465:                                              ; preds = %461
  %466 = load i32, i32* %322, align 4
  %467 = icmp eq i32 %466, 0
  br i1 %467, label %469, label %468, !prof !2

468:                                              ; preds = %465
  store i32 0, i32* %322, align 4
  br label %469

469:                                              ; preds = %468, %465
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %463) #12
  store i8* null, i8** %320, align 8
  br label %470

470:                                              ; preds = %469, %461
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %319) #12
  %471 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %296, align 8
  %472 = icmp eq %"class.WTF::StringImpl"* %471, null
  br i1 %472, label %486, label %473

473:                                              ; preds = %470
  %474 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %471, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %475 = load atomic i32, i32* %474 monotonic, align 4
  %476 = and i32 %475, 2
  %477 = icmp eq i32 %476, 0
  %478 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %471, i64 0, i32 0
  %479 = load i32, i32* %478, align 4
  br i1 %477, label %480, label %482

480:                                              ; preds = %473
  %481 = add i32 %479, -1
  store i32 %481, i32* %478, align 4
  br label %482

482:                                              ; preds = %480, %473
  %483 = phi i32 [ %481, %480 ], [ %479, %473 ]
  %484 = icmp eq i32 %483, 0
  br i1 %484, label %485, label %486

485:                                              ; preds = %482
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %471) #12
  br label %486

486:                                              ; preds = %485, %482, %470
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %295) #12
  %487 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %259, align 8
  %488 = icmp eq %"class.WTF::StringImpl"* %487, null
  br i1 %488, label %504, label %489

489:                                              ; preds = %486, %293
  %490 = phi %"class.blink::NDEFRecord"* [ null, %293 ], [ %462, %486 ]
  %491 = phi %"class.WTF::StringImpl"* [ %289, %293 ], [ %487, %486 ]
  %492 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %491, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %493 = load atomic i32, i32* %492 monotonic, align 4
  %494 = and i32 %493, 2
  %495 = icmp eq i32 %494, 0
  %496 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %491, i64 0, i32 0
  %497 = load i32, i32* %496, align 4
  br i1 %495, label %498, label %500

498:                                              ; preds = %489
  %499 = add i32 %497, -1
  store i32 %499, i32* %496, align 4
  br label %500

500:                                              ; preds = %498, %489
  %501 = phi i32 [ %499, %498 ], [ %497, %489 ]
  %502 = icmp eq i32 %501, 0
  br i1 %502, label %503, label %504

503:                                              ; preds = %500
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %491) #12
  br label %504

504:                                              ; preds = %503, %500, %486
  %505 = phi %"class.blink::NDEFRecord"* [ %462, %486 ], [ %490, %500 ], [ %490, %503 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %258) #12
  br label %1383

506:                                              ; preds = %240
  %507 = bitcast %"class.WTF::StringView"* %28 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %507) #12
  %508 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %168, align 8
  %509 = icmp eq %"class.WTF::StringImpl"* %508, null
  br i1 %509, label %510, label %514

510:                                              ; preds = %506
  %511 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %28, i64 0, i32 1
  store i8* null, i8** %511, align 8
  %512 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %513 = bitcast %"class.WTF::StringView"* %28 to i64*
  store i64 %512, i64* %513, align 8
  br label %522

514:                                              ; preds = %506
  %515 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %28, i64 0, i32 0
  store %"class.WTF::StringImpl"* %508, %"class.WTF::StringImpl"** %515, align 8
  %516 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %508, i64 0, i32 1
  %517 = load i32, i32* %516, align 4
  %518 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %508, i64 1
  %519 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %28, i64 0, i32 1
  %520 = bitcast i8** %519 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %518, %"class.WTF::StringImpl"** %520, align 8
  %521 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %522

522:                                              ; preds = %514, %510
  %523 = phi i64 [ %521, %514 ], [ %512, %510 ]
  %524 = phi i32 [ %517, %514 ], [ 0, %510 ]
  %525 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %28, i64 0, i32 2
  store i32 %524, i32* %525, align 8
  %526 = bitcast %"class.WTF::StringView"* %29 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %526) #12
  %527 = bitcast %"class.WTF::StringView"* %29 to i64*
  store i64 %523, i64* %527, align 8
  %528 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %29, i64 0, i32 1
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), i8** %528, align 8
  %529 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %29, i64 0, i32 2
  store i32 3, i32* %529, align 8
  %530 = call zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* nonnull dereferenceable(24) %28, %"class.WTF::StringView"* nonnull dereferenceable(24) %29) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %526) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %507) #12
  br i1 %530, label %556, label %531

531:                                              ; preds = %522
  %532 = bitcast %"class.WTF::StringView"* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %532) #12
  %533 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %168, align 8
  %534 = icmp eq %"class.WTF::StringImpl"* %533, null
  br i1 %534, label %535, label %539

535:                                              ; preds = %531
  %536 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %26, i64 0, i32 1
  store i8* null, i8** %536, align 8
  %537 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %538 = bitcast %"class.WTF::StringView"* %26 to i64*
  store i64 %537, i64* %538, align 8
  br label %547

539:                                              ; preds = %531
  %540 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %26, i64 0, i32 0
  store %"class.WTF::StringImpl"* %533, %"class.WTF::StringImpl"** %540, align 8
  %541 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %533, i64 0, i32 1
  %542 = load i32, i32* %541, align 4
  %543 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %533, i64 1
  %544 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %26, i64 0, i32 1
  %545 = bitcast i8** %544 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %543, %"class.WTF::StringImpl"** %545, align 8
  %546 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %547

547:                                              ; preds = %539, %535
  %548 = phi i64 [ %546, %539 ], [ %537, %535 ]
  %549 = phi i32 [ %542, %539 ], [ 0, %535 ]
  %550 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %26, i64 0, i32 2
  store i32 %549, i32* %550, align 8
  %551 = bitcast %"class.WTF::StringView"* %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %551) #12
  %552 = bitcast %"class.WTF::StringView"* %27 to i64*
  store i64 %548, i64* %552, align 8
  %553 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %27, i64 0, i32 1
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6, i64 0, i64 0), i8** %553, align 8
  %554 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %27, i64 0, i32 2
  store i32 12, i32* %554, align 8
  %555 = call zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* nonnull dereferenceable(24) %26, %"class.WTF::StringView"* nonnull dereferenceable(24) %27) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %551) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %532) #12
  br i1 %555, label %556, label %628

556:                                              ; preds = %547, %522
  %557 = getelementptr inbounds %"class.blink::NDEFRecordInit", %"class.blink::NDEFRecordInit"* %1, i64 0, i32 1, i32 0
  %558 = load i32, i32* %557, align 8
  %559 = icmp eq i32 %558, 4
  br i1 %559, label %561, label %560

560:                                              ; preds = %556
  call void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"* %2, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.28, i64 0, i64 0)) #12
  br label %1383

561:                                              ; preds = %556
  %562 = getelementptr inbounds %"class.blink::NDEFRecordInit", %"class.blink::NDEFRecordInit"* %1, i64 0, i32 1
  %563 = bitcast %"class.WTF::String"* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %563) #12
  %564 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %22, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* inttoptr (i64 -6148914691236517206 to %"class.WTF::StringImpl"*), %"class.WTF::StringImpl"** %564, align 8
  %565 = call dereferenceable(8) %"class.WTF::String"* @_ZNK5blink53StringOrArrayBufferOrArrayBufferViewOrNDEFMessageInit11GetAsStringEv(%"class.blink::StringOrArrayBufferOrArrayBufferViewOrNDEFMessageInit"* %562) #12
  %566 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %565, i64 0, i32 0, i32 0
  %567 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %566, align 8
  store %"class.WTF::StringImpl"* %567, %"class.WTF::StringImpl"** %564, align 8
  %568 = icmp eq %"class.WTF::StringImpl"* %567, null
  br i1 %568, label %586, label %569

569:                                              ; preds = %561
  %570 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %567, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %571 = load atomic i32, i32* %570 monotonic, align 4
  %572 = and i32 %571, 2
  %573 = icmp eq i32 %572, 0
  br i1 %573, label %574, label %586

574:                                              ; preds = %569
  %575 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %567, i64 0, i32 0
  %576 = load i32, i32* %575, align 4
  %577 = zext i32 %576 to i33
  %578 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %577, i33 1) #12
  %579 = extractvalue { i33, i1 } %578, 1
  %580 = extractvalue { i33, i1 } %578, 0
  %581 = icmp slt i33 %580, 0
  %582 = or i1 %579, %581
  br i1 %582, label %583, label %584, !prof !2

583:                                              ; preds = %574
  call void @llvm.trap() #12
  unreachable

584:                                              ; preds = %574
  %585 = trunc i33 %580 to i32
  store i32 %585, i32* %575, align 4
  br label %586

586:                                              ; preds = %584, %569, %561
  %587 = getelementptr inbounds %"class.blink::KURL", %"class.blink::KURL"* %23, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 112, i8* nonnull %587) #12
  %588 = call dereferenceable(112) %"class.blink::KURL"* @_ZN5blink7NullURLEv() #12
  call void @_ZN5blink4KURLC1ERKS0_RKN3WTF6StringE(%"class.blink::KURL"* nonnull %23, %"class.blink::KURL"* dereferenceable(112) %588, %"class.WTF::String"* nonnull dereferenceable(8) %22) #12
  %589 = call zeroext i1 @_ZNK5blink4KURL7IsValidEv(%"class.blink::KURL"* nonnull %23) #12
  call void @_ZN5blink4KURLD1Ev(%"class.blink::KURL"* nonnull %23) #12
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %587) #12
  br i1 %589, label %591, label %590

590:                                              ; preds = %586
  call void @_ZN5blink14ExceptionState17ThrowDOMExceptionENS_16DOMExceptionCodeEPKc(%"class.blink::ExceptionState"* %2, i32 12, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.29, i64 0, i64 0)) #12
  br label %610

591:                                              ; preds = %586
  %592 = bitcast i32* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %592) #12
  store i32 0, i32* %24, align 4
  %593 = bitcast %"class.WTF::Vector"* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %593) #12
  %594 = bitcast %"class.WTF::StringUTF8Adaptor"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %594) #12, !noalias !4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %594, i8 -86, i64 40, i1 false) #12, !noalias !4
  call void @_ZN3WTF17StringUTF8AdaptorC1ERKNS_6StringENS_18UTF8ConversionModeE(%"class.WTF::StringUTF8Adaptor"* nonnull %21, %"class.WTF::String"* nonnull dereferenceable(8) %22, i32 0) #12, !noalias !4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %593, i8 0, i64 16, i1 false) #12, !alias.scope !4
  %595 = getelementptr inbounds %"class.WTF::StringUTF8Adaptor", %"class.WTF::StringUTF8Adaptor"* %21, i64 0, i32 1
  %596 = load i8*, i8** %595, align 8, !noalias !4
  %597 = getelementptr inbounds %"class.WTF::StringUTF8Adaptor", %"class.WTF::StringUTF8Adaptor"* %21, i64 0, i32 2
  %598 = load i32, i32* %597, align 8, !noalias !4
  call void @_ZN3WTF6VectorIhLj0ENS_18PartitionAllocatorEE6AppendIcEEvPKT_j(%"class.WTF::Vector"* nonnull %25, i8* %596, i32 %598) #12
  call void @_ZN3WTF17StringUTF8AdaptorD1Ev(%"class.WTF::StringUTF8Adaptor"* nonnull %21) #12
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %594) #12, !noalias !4
  %599 = call %"class.blink::NDEFRecord"* @_ZN5blink25MakeGarbageCollectedTraitINS_10NDEFRecordEE4CallIJN6device5mojom22NDEFRecordTypeCategoryERKN3WTF6StringESA_NS7_6VectorIhLj0ENS7_18PartitionAllocatorEEEEEEPS1_DpOT_(i32* nonnull dereferenceable(4) %24, %"class.WTF::String"* dereferenceable(8) %57, %"class.WTF::String"* nonnull dereferenceable(8) %53, %"class.WTF::Vector"* nonnull dereferenceable(16) %25) #12
  %600 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %25, i64 0, i32 0, i32 0, i32 0
  %601 = load i8*, i8** %600, align 8
  %602 = icmp eq i8* %601, null
  br i1 %602, label %609, label %603, !prof !3

603:                                              ; preds = %591
  %604 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %25, i64 0, i32 0, i32 0, i32 2
  %605 = load i32, i32* %604, align 4
  %606 = icmp eq i32 %605, 0
  br i1 %606, label %608, label %607, !prof !2

607:                                              ; preds = %603
  store i32 0, i32* %604, align 4
  br label %608

608:                                              ; preds = %607, %603
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %601) #12
  store i8* null, i8** %600, align 8
  br label %609

609:                                              ; preds = %608, %591
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %593) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %592) #12
  br label %610

610:                                              ; preds = %609, %590
  %611 = phi %"class.blink::NDEFRecord"* [ null, %590 ], [ %599, %609 ]
  %612 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %564, align 8
  %613 = icmp eq %"class.WTF::StringImpl"* %612, null
  br i1 %613, label %627, label %614

614:                                              ; preds = %610
  %615 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %612, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %616 = load atomic i32, i32* %615 monotonic, align 4
  %617 = and i32 %616, 2
  %618 = icmp eq i32 %617, 0
  %619 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %612, i64 0, i32 0
  %620 = load i32, i32* %619, align 4
  br i1 %618, label %621, label %623

621:                                              ; preds = %614
  %622 = add i32 %620, -1
  store i32 %622, i32* %619, align 4
  br label %623

623:                                              ; preds = %621, %614
  %624 = phi i32 [ %622, %621 ], [ %620, %614 ]
  %625 = icmp eq i32 %624, 0
  br i1 %625, label %626, label %627

626:                                              ; preds = %623
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %612) #12
  br label %627

627:                                              ; preds = %626, %623, %610
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %563) #12
  br label %1383

628:                                              ; preds = %547
  %629 = bitcast %"class.WTF::StringView"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %629) #12
  %630 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %168, align 8
  %631 = icmp eq %"class.WTF::StringImpl"* %630, null
  br i1 %631, label %632, label %636

632:                                              ; preds = %628
  %633 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %19, i64 0, i32 1
  store i8* null, i8** %633, align 8
  %634 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %635 = bitcast %"class.WTF::StringView"* %19 to i64*
  store i64 %634, i64* %635, align 8
  br label %644

636:                                              ; preds = %628
  %637 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %19, i64 0, i32 0
  store %"class.WTF::StringImpl"* %630, %"class.WTF::StringImpl"** %637, align 8
  %638 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %630, i64 0, i32 1
  %639 = load i32, i32* %638, align 4
  %640 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %630, i64 1
  %641 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %19, i64 0, i32 1
  %642 = bitcast i8** %641 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %640, %"class.WTF::StringImpl"** %642, align 8
  %643 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %644

644:                                              ; preds = %636, %632
  %645 = phi i64 [ %643, %636 ], [ %634, %632 ]
  %646 = phi i32 [ %639, %636 ], [ 0, %632 ]
  %647 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %19, i64 0, i32 2
  store i32 %646, i32* %647, align 8
  %648 = bitcast %"class.WTF::StringView"* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %648) #12
  %649 = bitcast %"class.WTF::StringView"* %20 to i64*
  store i64 %645, i64* %649, align 8
  %650 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %20, i64 0, i32 1
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i8** %650, align 8
  %651 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %20, i64 0, i32 2
  store i32 4, i32* %651, align 8
  %652 = call zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* nonnull dereferenceable(24) %19, %"class.WTF::StringView"* nonnull dereferenceable(24) %20) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %648) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %629) #12
  br i1 %652, label %653, label %838

653:                                              ; preds = %644
  %654 = getelementptr inbounds %"class.blink::NDEFRecordInit", %"class.blink::NDEFRecordInit"* %1, i64 0, i32 1, i32 0
  %655 = load i32, i32* %654, align 8
  %656 = icmp eq i32 %655, 0
  br i1 %656, label %661, label %657

657:                                              ; preds = %653
  %658 = getelementptr inbounds %"class.blink::NDEFRecordInit", %"class.blink::NDEFRecordInit"* %1, i64 0, i32 1
  %659 = add i32 %655, -1
  %660 = icmp ult i32 %659, 2
  br i1 %660, label %662, label %661

661:                                              ; preds = %657, %653
  call void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"* %2, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.30, i64 0, i64 0)) #12
  br label %1383

662:                                              ; preds = %657
  %663 = bitcast %"class.WTF::String"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %663) #12
  %664 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %15, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %664, align 8
  %665 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %58, align 8
  %666 = icmp eq %"class.WTF::StringImpl"* %665, null
  br i1 %666, label %767, label %667

667:                                              ; preds = %662
  %668 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %665, i64 0, i32 1
  %669 = load i32, i32* %668, align 4
  %670 = icmp eq i32 %669, 0
  br i1 %670, label %767, label %671

671:                                              ; preds = %667
  %672 = bitcast %"class.WTF::AtomicString"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %672) #12
  %673 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %665, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %674 = load atomic i32, i32* %673 acquire, align 4
  %675 = and i32 %674, 4
  %676 = icmp eq i32 %675, 0
  br i1 %676, label %693, label %677

677:                                              ; preds = %671
  %678 = load atomic i32, i32* %673 monotonic, align 4
  %679 = and i32 %678, 2
  %680 = icmp eq i32 %679, 0
  br i1 %680, label %681, label %695

681:                                              ; preds = %677
  %682 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %665, i64 0, i32 0
  %683 = load i32, i32* %682, align 4
  %684 = zext i32 %683 to i33
  %685 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %684, i33 1) #12
  %686 = extractvalue { i33, i1 } %685, 1
  %687 = extractvalue { i33, i1 } %685, 0
  %688 = icmp slt i33 %687, 0
  %689 = or i1 %686, %688
  br i1 %689, label %690, label %691, !prof !2

690:                                              ; preds = %681
  call void @llvm.trap() #12
  unreachable

691:                                              ; preds = %681
  %692 = trunc i33 %687 to i32
  store i32 %692, i32* %682, align 4
  br label %695

693:                                              ; preds = %671
  %694 = call %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"* nonnull %665) #12
  br label %695

695:                                              ; preds = %693, %691, %677
  %696 = phi %"class.WTF::StringImpl"* [ %694, %693 ], [ %665, %677 ], [ %665, %691 ]
  %697 = ptrtoint %"class.WTF::StringImpl"* %696 to i64
  %698 = bitcast %"class.WTF::AtomicString"* %16 to i64*
  store i64 %697, i64* %698, align 8
  %699 = call %"class.WTF::StringImpl"* @_ZN5blink28ExtractMIMETypeFromMediaTypeERKN3WTF12AtomicStringE(%"class.WTF::AtomicString"* nonnull dereferenceable(8) %16) #12
  %700 = icmp eq %"class.WTF::StringImpl"* %699, null
  br i1 %700, label %718, label %701

701:                                              ; preds = %695
  %702 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %699, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %703 = load atomic i32, i32* %702 monotonic, align 4
  %704 = and i32 %703, 2
  %705 = icmp eq i32 %704, 0
  br i1 %705, label %706, label %718

706:                                              ; preds = %701
  %707 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %699, i64 0, i32 0
  %708 = load i32, i32* %707, align 4
  %709 = zext i32 %708 to i33
  %710 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %709, i33 1) #12
  %711 = extractvalue { i33, i1 } %710, 1
  %712 = extractvalue { i33, i1 } %710, 0
  %713 = icmp slt i33 %712, 0
  %714 = or i1 %711, %713
  br i1 %714, label %715, label %716, !prof !2

715:                                              ; preds = %706
  call void @llvm.trap() #12
  unreachable

716:                                              ; preds = %706
  %717 = trunc i33 %712 to i32
  store i32 %717, i32* %707, align 4
  br label %718

718:                                              ; preds = %716, %701, %695
  %719 = ptrtoint %"class.WTF::StringImpl"* %699 to i64
  %720 = bitcast %"class.WTF::String"* %15 to i64*
  %721 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %664, align 8
  store i64 %719, i64* %720, align 8
  %722 = icmp eq %"class.WTF::StringImpl"* %721, null
  br i1 %722, label %736, label %723

723:                                              ; preds = %718
  %724 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %721, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %725 = load atomic i32, i32* %724 monotonic, align 4
  %726 = and i32 %725, 2
  %727 = icmp eq i32 %726, 0
  %728 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %721, i64 0, i32 0
  %729 = load i32, i32* %728, align 4
  br i1 %727, label %730, label %732

730:                                              ; preds = %723
  %731 = add i32 %729, -1
  store i32 %731, i32* %728, align 4
  br label %732

732:                                              ; preds = %730, %723
  %733 = phi i32 [ %731, %730 ], [ %729, %723 ]
  %734 = icmp eq i32 %733, 0
  br i1 %734, label %735, label %736

735:                                              ; preds = %732
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %721) #12
  br label %736

736:                                              ; preds = %735, %732, %718
  br i1 %700, label %750, label %737

737:                                              ; preds = %736
  %738 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %699, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %739 = load atomic i32, i32* %738 monotonic, align 4
  %740 = and i32 %739, 2
  %741 = icmp eq i32 %740, 0
  %742 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %699, i64 0, i32 0
  %743 = load i32, i32* %742, align 4
  br i1 %741, label %744, label %746

744:                                              ; preds = %737
  %745 = add i32 %743, -1
  store i32 %745, i32* %742, align 4
  br label %746

746:                                              ; preds = %744, %737
  %747 = phi i32 [ %745, %744 ], [ %743, %737 ]
  %748 = icmp eq i32 %747, 0
  br i1 %748, label %749, label %750

749:                                              ; preds = %746
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %699) #12
  br label %750

750:                                              ; preds = %749, %746, %736
  %751 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %16, i64 0, i32 0, i32 0, i32 0
  %752 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %751, align 8
  %753 = icmp eq %"class.WTF::StringImpl"* %752, null
  br i1 %753, label %804, label %754

754:                                              ; preds = %750
  %755 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %752, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %756 = load atomic i32, i32* %755 monotonic, align 4
  %757 = and i32 %756, 2
  %758 = icmp eq i32 %757, 0
  %759 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %752, i64 0, i32 0
  %760 = load i32, i32* %759, align 4
  br i1 %758, label %761, label %763

761:                                              ; preds = %754
  %762 = add i32 %760, -1
  store i32 %762, i32* %759, align 4
  br label %763

763:                                              ; preds = %761, %754
  %764 = phi i32 [ %762, %761 ], [ %760, %754 ]
  %765 = icmp eq i32 %764, 0
  br i1 %765, label %766, label %804

766:                                              ; preds = %763
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %752) #12
  br label %804

767:                                              ; preds = %667, %662
  %768 = bitcast %"class.WTF::String"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %768) #12
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %17, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.31, i64 0, i64 0), i64 24) #12
  %769 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %17, i64 0, i32 0, i32 0
  %770 = bitcast %"class.WTF::String"* %17 to i64*
  %771 = load i64, i64* %770, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %769, align 8
  %772 = bitcast %"class.WTF::String"* %15 to i64*
  %773 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %664, align 8
  store i64 %771, i64* %772, align 8
  %774 = icmp eq %"class.WTF::StringImpl"* %773, null
  br i1 %774, label %804, label %775

775:                                              ; preds = %767
  %776 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %773, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %777 = load atomic i32, i32* %776 monotonic, align 4
  %778 = and i32 %777, 2
  %779 = icmp eq i32 %778, 0
  %780 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %773, i64 0, i32 0
  %781 = load i32, i32* %780, align 4
  br i1 %779, label %782, label %784

782:                                              ; preds = %775
  %783 = add i32 %781, -1
  store i32 %783, i32* %780, align 4
  br label %784

784:                                              ; preds = %782, %775
  %785 = phi i32 [ %783, %782 ], [ %781, %775 ]
  %786 = icmp eq i32 %785, 0
  br i1 %786, label %787, label %788

787:                                              ; preds = %784
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %773) #12
  br label %788

788:                                              ; preds = %787, %784
  %789 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %769, align 8
  %790 = icmp eq %"class.WTF::StringImpl"* %789, null
  br i1 %790, label %804, label %791

791:                                              ; preds = %788
  %792 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %789, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %793 = load atomic i32, i32* %792 monotonic, align 4
  %794 = and i32 %793, 2
  %795 = icmp eq i32 %794, 0
  %796 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %789, i64 0, i32 0
  %797 = load i32, i32* %796, align 4
  br i1 %795, label %798, label %800

798:                                              ; preds = %791
  %799 = add i32 %797, -1
  store i32 %799, i32* %796, align 4
  br label %800

800:                                              ; preds = %798, %791
  %801 = phi i32 [ %799, %798 ], [ %797, %791 ]
  %802 = icmp eq i32 %801, 0
  br i1 %802, label %803, label %804

803:                                              ; preds = %800
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %789) #12
  br label %804

804:                                              ; preds = %767, %788, %800, %803, %750, %763, %766
  %805 = phi i8* [ %672, %766 ], [ %672, %763 ], [ %672, %750 ], [ %768, %803 ], [ %768, %800 ], [ %768, %788 ], [ %768, %767 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %805) #12
  %806 = bitcast %"class.WTF::Vector"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %806) #12
  %807 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %18, i64 0, i32 0, i32 0, i32 0
  %808 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %18, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %806, i8 0, i64 16, i1 false) #12
  %809 = call fastcc zeroext i1 @_ZN5blink12_GLOBAL__N_122GetBytesOfBufferSourceERKNS_53StringOrArrayBufferOrArrayBufferViewOrNDEFMessageInitEPN3WTF6VectorIhLj0ENS4_18PartitionAllocatorEEERNS_14ExceptionStateE(%"class.blink::StringOrArrayBufferOrArrayBufferViewOrNDEFMessageInit"* dereferenceable(40) %658, %"class.WTF::Vector"* nonnull %18, %"class.blink::ExceptionState"* dereferenceable(72) %2) #12
  br i1 %809, label %810, label %812

810:                                              ; preds = %804
  %811 = call %"class.blink::NDEFRecord"* @_ZN5blink25MakeGarbageCollectedTraitINS_10NDEFRecordEE4CallIJRKN3WTF6StringERS5_RNS4_6VectorIhLj0ENS4_18PartitionAllocatorEEEEEEPS1_DpOT_(%"class.WTF::String"* nonnull dereferenceable(8) %53, %"class.WTF::String"* nonnull dereferenceable(8) %15, %"class.WTF::Vector"* nonnull dereferenceable(16) %18) #12
  br label %812

812:                                              ; preds = %810, %804
  %813 = phi %"class.blink::NDEFRecord"* [ %811, %810 ], [ null, %804 ]
  %814 = load i8*, i8** %807, align 8
  %815 = icmp eq i8* %814, null
  br i1 %815, label %821, label %816, !prof !3

816:                                              ; preds = %812
  %817 = load i32, i32* %808, align 4
  %818 = icmp eq i32 %817, 0
  br i1 %818, label %820, label %819, !prof !2

819:                                              ; preds = %816
  store i32 0, i32* %808, align 4
  br label %820

820:                                              ; preds = %819, %816
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %814) #12
  store i8* null, i8** %807, align 8
  br label %821

821:                                              ; preds = %820, %812
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %806) #12
  %822 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %664, align 8
  %823 = icmp eq %"class.WTF::StringImpl"* %822, null
  br i1 %823, label %837, label %824

824:                                              ; preds = %821
  %825 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %822, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %826 = load atomic i32, i32* %825 monotonic, align 4
  %827 = and i32 %826, 2
  %828 = icmp eq i32 %827, 0
  %829 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %822, i64 0, i32 0
  %830 = load i32, i32* %829, align 4
  br i1 %828, label %831, label %833

831:                                              ; preds = %824
  %832 = add i32 %830, -1
  store i32 %832, i32* %829, align 4
  br label %833

833:                                              ; preds = %831, %824
  %834 = phi i32 [ %832, %831 ], [ %830, %824 ]
  %835 = icmp eq i32 %834, 0
  br i1 %835, label %836, label %837

836:                                              ; preds = %833
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %822) #12
  br label %837

837:                                              ; preds = %836, %833, %821
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %663) #12
  br label %1383

838:                                              ; preds = %644
  %839 = bitcast %"class.WTF::StringView"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %839) #12
  %840 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %168, align 8
  %841 = icmp eq %"class.WTF::StringImpl"* %840, null
  br i1 %841, label %842, label %846

842:                                              ; preds = %838
  %843 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %13, i64 0, i32 1
  store i8* null, i8** %843, align 8
  %844 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %845 = bitcast %"class.WTF::StringView"* %13 to i64*
  store i64 %844, i64* %845, align 8
  br label %854

846:                                              ; preds = %838
  %847 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %13, i64 0, i32 0
  store %"class.WTF::StringImpl"* %840, %"class.WTF::StringImpl"** %847, align 8
  %848 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %840, i64 0, i32 1
  %849 = load i32, i32* %848, align 4
  %850 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %840, i64 1
  %851 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %13, i64 0, i32 1
  %852 = bitcast i8** %851 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %850, %"class.WTF::StringImpl"** %852, align 8
  %853 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %854

854:                                              ; preds = %846, %842
  %855 = phi i64 [ %853, %846 ], [ %844, %842 ]
  %856 = phi i32 [ %849, %846 ], [ 0, %842 ]
  %857 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %13, i64 0, i32 2
  store i32 %856, i32* %857, align 8
  %858 = bitcast %"class.WTF::StringView"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %858) #12
  %859 = bitcast %"class.WTF::StringView"* %14 to i64*
  store i64 %855, i64* %859, align 8
  %860 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %14, i64 0, i32 1
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i64 0, i64 0), i8** %860, align 8
  %861 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %14, i64 0, i32 2
  store i32 7, i32* %861, align 8
  %862 = call zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* nonnull dereferenceable(24) %13, %"class.WTF::StringView"* nonnull dereferenceable(24) %14) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %858) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %839) #12
  br i1 %862, label %863, label %890

863:                                              ; preds = %854
  %864 = getelementptr inbounds %"class.blink::NDEFRecordInit", %"class.blink::NDEFRecordInit"* %1, i64 0, i32 1, i32 0
  %865 = load i32, i32* %864, align 8
  %866 = icmp ne i32 %865, 0
  %867 = add i32 %865, -1
  %868 = icmp ult i32 %867, 2
  %869 = and i1 %866, %868
  br i1 %869, label %871, label %870

870:                                              ; preds = %863
  call void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"* %2, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.32, i64 0, i64 0)) #12
  br label %1383

871:                                              ; preds = %863
  %872 = getelementptr inbounds %"class.blink::NDEFRecordInit", %"class.blink::NDEFRecordInit"* %1, i64 0, i32 1
  %873 = bitcast %"class.WTF::Vector"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %873) #12
  %874 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %11, i64 0, i32 0, i32 0, i32 0
  %875 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %11, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %873, i8 0, i64 16, i1 false) #12
  %876 = call fastcc zeroext i1 @_ZN5blink12_GLOBAL__N_122GetBytesOfBufferSourceERKNS_53StringOrArrayBufferOrArrayBufferViewOrNDEFMessageInitEPN3WTF6VectorIhLj0ENS4_18PartitionAllocatorEEERNS_14ExceptionStateE(%"class.blink::StringOrArrayBufferOrArrayBufferViewOrNDEFMessageInit"* dereferenceable(40) %872, %"class.WTF::Vector"* nonnull %11, %"class.blink::ExceptionState"* dereferenceable(72) %2) #12
  br i1 %876, label %877, label %880

877:                                              ; preds = %871
  %878 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %878) #12
  store i32 0, i32* %12, align 4
  %879 = call %"class.blink::NDEFRecord"* @_ZN5blink25MakeGarbageCollectedTraitINS_10NDEFRecordEE4CallIJN6device5mojom22NDEFRecordTypeCategoryERA8_KcRKN3WTF6StringERNSA_6VectorIhLj0ENSA_18PartitionAllocatorEEEEEEPS1_DpOT_(i32* nonnull dereferenceable(4) %12, [8 x i8]* nonnull dereferenceable(8) @.str.7, %"class.WTF::String"* nonnull dereferenceable(8) %53, %"class.WTF::Vector"* nonnull dereferenceable(16) %11) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %878) #12
  br label %880

880:                                              ; preds = %877, %871
  %881 = phi %"class.blink::NDEFRecord"* [ %879, %877 ], [ null, %871 ]
  %882 = load i8*, i8** %874, align 8
  %883 = icmp eq i8* %882, null
  br i1 %883, label %889, label %884, !prof !3

884:                                              ; preds = %880
  %885 = load i32, i32* %875, align 4
  %886 = icmp eq i32 %885, 0
  br i1 %886, label %888, label %887, !prof !2

887:                                              ; preds = %884
  store i32 0, i32* %875, align 4
  br label %888

888:                                              ; preds = %887, %884
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %882) #12
  store i8* null, i8** %874, align 8
  br label %889

889:                                              ; preds = %888, %880
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %873) #12
  br label %1383

890:                                              ; preds = %854
  %891 = bitcast %"class.WTF::StringView"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %891) #12
  %892 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %168, align 8
  %893 = icmp eq %"class.WTF::StringImpl"* %892, null
  br i1 %893, label %894, label %898

894:                                              ; preds = %890
  %895 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 1
  store i8* null, i8** %895, align 8
  %896 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %897 = bitcast %"class.WTF::StringView"* %9 to i64*
  store i64 %896, i64* %897, align 8
  br label %906

898:                                              ; preds = %890
  %899 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 0
  store %"class.WTF::StringImpl"* %892, %"class.WTF::StringImpl"** %899, align 8
  %900 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %892, i64 0, i32 1
  %901 = load i32, i32* %900, align 4
  %902 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %892, i64 1
  %903 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 1
  %904 = bitcast i8** %903 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %902, %"class.WTF::StringImpl"** %904, align 8
  %905 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %906

906:                                              ; preds = %898, %894
  %907 = phi i64 [ %905, %898 ], [ %896, %894 ]
  %908 = phi i32 [ %901, %898 ], [ 0, %894 ]
  %909 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 2
  store i32 %908, i32* %909, align 8
  %910 = bitcast %"class.WTF::StringView"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %910) #12
  %911 = bitcast %"class.WTF::StringView"* %10 to i64*
  store i64 %907, i64* %911, align 8
  %912 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 1
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.8, i64 0, i64 0), i8** %912, align 8
  %913 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 2
  store i32 12, i32* %913, align 8
  %914 = call zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* nonnull dereferenceable(24) %9, %"class.WTF::StringView"* nonnull dereferenceable(24) %10) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %910) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %891) #12
  br i1 %914, label %915, label %933

915:                                              ; preds = %906
  %916 = getelementptr inbounds %"class.blink::NDEFRecordInit", %"class.blink::NDEFRecordInit"* %1, i64 0, i32 1, i32 0
  %917 = load i32, i32* %916, align 8
  %918 = icmp eq i32 %917, 3
  br i1 %918, label %920, label %919

919:                                              ; preds = %915
  call void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"* %2, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.33, i64 0, i64 0)) #12
  br label %1383

920:                                              ; preds = %915
  %921 = getelementptr inbounds %"class.blink::NDEFRecordInit", %"class.blink::NDEFRecordInit"* %1, i64 0, i32 1
  %922 = bitcast %"class.blink::NDEFMessage"** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %922) #12
  %923 = call %"class.blink::NDEFMessageInit"* @_ZNK5blink53StringOrArrayBufferOrArrayBufferViewOrNDEFMessageInit20GetAsNDEFMessageInitEv(%"class.blink::StringOrArrayBufferOrArrayBufferViewOrNDEFMessageInit"* %921) #12
  %924 = call %"class.blink::NDEFMessage"* @_ZN5blink11NDEFMessage28CreateAsPayloadOfSmartPosterEPKNS_16ExecutionContextEPKNS_15NDEFMessageInitERNS_14ExceptionStateE(%"class.blink::ExecutionContext"* %0, %"class.blink::NDEFMessageInit"* %923, %"class.blink::ExceptionState"* dereferenceable(72) %2) #12
  store %"class.blink::NDEFMessage"* %924, %"class.blink::NDEFMessage"** %7, align 8
  %925 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %2, i64 0, i32 4
  %926 = load i32, i32* %925, align 8
  %927 = icmp eq i32 %926, 0
  br i1 %927, label %928, label %931

928:                                              ; preds = %920
  %929 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %929) #12
  store i32 0, i32* %8, align 4
  %930 = call %"class.blink::NDEFRecord"* @_ZN5blink25MakeGarbageCollectedTraitINS_10NDEFRecordEE4CallIJN6device5mojom22NDEFRecordTypeCategoryERA13_KcRKN3WTF6StringERPNS_11NDEFMessageEEEEPS1_DpOT_(i32* nonnull dereferenceable(4) %8, [13 x i8]* nonnull dereferenceable(13) @.str.8, %"class.WTF::String"* nonnull dereferenceable(8) %53, %"class.blink::NDEFMessage"** nonnull dereferenceable(8) %7) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %929) #12
  br label %931

931:                                              ; preds = %928, %920
  %932 = phi %"class.blink::NDEFRecord"* [ %930, %928 ], [ null, %920 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %922) #12
  br label %1383

933:                                              ; preds = %906
  %934 = load atomic i8, i8* bitcast (i64* @_ZGVZN5blink12_GLOBAL__N_119IsValidExternalTypeERKN3WTF6StringEE24kOtherCharsForCustomType to i8*) acquire, align 8
  %935 = icmp eq i8 %934, 0
  br i1 %935, label %936, label %941, !prof !7

936:                                              ; preds = %933
  %937 = call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN5blink12_GLOBAL__N_119IsValidExternalTypeERKN3WTF6StringEE24kOtherCharsForCustomType) #12
  %938 = icmp eq i32 %937, 0
  br i1 %938, label %941, label %939

939:                                              ; preds = %936
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull @_ZZN5blink12_GLOBAL__N_119IsValidExternalTypeERKN3WTF6StringEE24kOtherCharsForCustomType, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.34, i64 0, i64 0), i64 15) #12
  %940 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.WTF::String"*)* @_ZN3WTF6StringD2Ev to void (i8*)*), i8* bitcast (%"class.WTF::String"* @_ZZN5blink12_GLOBAL__N_119IsValidExternalTypeERKN3WTF6StringEE24kOtherCharsForCustomType to i8*), i8* nonnull @__dso_handle) #12
  call void @__cxa_guard_release(i64* nonnull @_ZGVZN5blink12_GLOBAL__N_119IsValidExternalTypeERKN3WTF6StringEE24kOtherCharsForCustomType) #12
  br label %941

941:                                              ; preds = %939, %936, %933
  %942 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %168, align 8
  %943 = icmp eq %"class.WTF::StringImpl"* %942, null
  br i1 %943, label %1382, label %944

944:                                              ; preds = %941
  %945 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %942, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %946 = load atomic i32, i32* %945 monotonic, align 4
  %947 = and i32 %946, 8
  %948 = icmp eq i32 %947, 0
  br i1 %948, label %949, label %951

949:                                              ; preds = %944
  %950 = call i32 @_ZNK3WTF10StringImpl17ComputeASCIIFlagsEv(%"class.WTF::StringImpl"* nonnull %942) #12
  br label %951

951:                                              ; preds = %949, %944
  %952 = phi i32 [ %950, %949 ], [ %946, %944 ]
  %953 = and i32 %952, 16
  %954 = icmp eq i32 %953, 0
  br i1 %954, label %1213, label %955

955:                                              ; preds = %951
  %956 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %168, align 8
  %957 = icmp eq %"class.WTF::StringImpl"* %956, null
  br i1 %957, label %1382, label %958

958:                                              ; preds = %955
  %959 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %956, i64 0, i32 1
  %960 = load i32, i32* %959, align 4
  %961 = add i32 %960, -1
  %962 = icmp ugt i32 %961, 254
  br i1 %962, label %1213, label %963

963:                                              ; preds = %958
  %964 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %956, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %965 = load atomic i32, i32* %964 monotonic, align 4
  %966 = and i32 %965, 1
  %967 = icmp eq i32 %966, 0
  %968 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %956, i64 1
  br i1 %967, label %977, label %969

969:                                              ; preds = %963
  %970 = bitcast %"class.WTF::StringImpl"* %968 to i8*
  %971 = zext i32 %960 to i64
  %972 = call i8* @memchr(i8* %970, i32 58, i64 %971) #13
  %973 = icmp eq i8* %972, null
  %974 = ptrtoint i8* %972 to i64
  %975 = ptrtoint %"class.WTF::StringImpl"* %968 to i64
  %976 = sub i64 %974, %975
  br i1 %973, label %1213, label %988

977:                                              ; preds = %963
  %978 = bitcast %"class.WTF::StringImpl"* %968 to i16*
  %979 = zext i32 %960 to i64
  br label %980

980:                                              ; preds = %985, %977
  %981 = phi i64 [ %986, %985 ], [ 0, %977 ]
  %982 = getelementptr inbounds i16, i16* %978, i64 %981
  %983 = load i16, i16* %982, align 2
  %984 = icmp eq i16 %983, 58
  br i1 %984, label %988, label %985

985:                                              ; preds = %980
  %986 = add nuw nsw i64 %981, 1
  %987 = icmp eq i64 %986, %979
  br i1 %987, label %1213, label %980

988:                                              ; preds = %980, %969
  %989 = phi i64 [ %976, %969 ], [ %981, %980 ]
  %990 = trunc i64 %989 to i32
  %991 = icmp eq i32 %990, -1
  br i1 %991, label %1213, label %992

992:                                              ; preds = %988
  %993 = call %"class.WTF::StringImpl"* @_ZNK3WTF6String9SubstringEjj(%"class.WTF::String"* %57, i32 0, i32 %990) #12
  %994 = icmp eq %"class.WTF::StringImpl"* %993, null
  br i1 %994, label %1213, label %995

995:                                              ; preds = %992
  %996 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %993, i64 0, i32 1
  %997 = load i32, i32* %996, align 4
  %998 = icmp eq i32 %997, 0
  br i1 %998, label %1103, label %999

999:                                              ; preds = %995
  %1000 = add nuw i32 %990, 1
  %1001 = call %"class.WTF::StringImpl"* @_ZNK3WTF6String9SubstringEjj(%"class.WTF::String"* %57, i32 %1000, i32 -1) #12
  %1002 = icmp eq %"class.WTF::StringImpl"* %1001, null
  br i1 %1002, label %1103, label %1003

1003:                                             ; preds = %999
  %1004 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1001, i64 0, i32 1
  %1005 = load i32, i32* %1004, align 4
  %1006 = icmp eq i32 %1005, 0
  br i1 %1006, label %1089, label %1007

1007:                                             ; preds = %1003
  %1008 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1001, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1009 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1001, i64 1
  %1010 = bitcast %"class.WTF::StringImpl"* %1009 to i8*
  %1011 = bitcast %"class.WTF::StringImpl"* %1009 to i16*
  %1012 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** getelementptr inbounds (%"class.WTF::String", %"class.WTF::String"* @_ZZN5blink12_GLOBAL__N_119IsValidExternalTypeERKN3WTF6StringEE24kOtherCharsForCustomType, i64 0, i32 0, i32 0), align 8
  %1013 = icmp eq %"class.WTF::StringImpl"* %1012, null
  %1014 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1012, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1015 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1012, i64 1
  %1016 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1012, i64 0, i32 1
  %1017 = bitcast %"class.WTF::StringImpl"* %1015 to i8*
  %1018 = ptrtoint %"class.WTF::StringImpl"* %1015 to i64
  %1019 = bitcast %"class.WTF::StringImpl"* %1015 to i16*
  %1020 = zext i32 %1005 to i64
  br label %1021

1021:                                             ; preds = %1086, %1007
  %1022 = phi i64 [ %1087, %1086 ], [ 0, %1007 ]
  %1023 = load atomic i32, i32* %1008 monotonic, align 4
  %1024 = and i32 %1023, 1
  %1025 = icmp eq i32 %1024, 0
  br i1 %1025, label %1030, label %1026

1026:                                             ; preds = %1021
  %1027 = getelementptr inbounds i8, i8* %1010, i64 %1022
  %1028 = load i8, i8* %1027, align 1
  %1029 = zext i8 %1028 to i16
  br label %1033

1030:                                             ; preds = %1021
  %1031 = getelementptr inbounds i16, i16* %1011, i64 %1022
  %1032 = load i16, i16* %1031, align 2
  br label %1033

1033:                                             ; preds = %1030, %1026
  %1034 = phi i16 [ %1029, %1026 ], [ %1032, %1030 ]
  %1035 = add i16 %1034, -48
  %1036 = icmp ult i16 %1035, 10
  br i1 %1036, label %1086, label %1037

1037:                                             ; preds = %1033
  %1038 = or i16 %1034, 32
  %1039 = add i16 %1038, -97
  %1040 = icmp ult i16 %1039, 26
  br i1 %1040, label %1086, label %1041

1041:                                             ; preds = %1037
  %1042 = load atomic i32, i32* %1008 monotonic, align 4
  %1043 = and i32 %1042, 1
  %1044 = icmp eq i32 %1043, 0
  br i1 %1044, label %1049, label %1045

1045:                                             ; preds = %1041
  %1046 = getelementptr inbounds i8, i8* %1010, i64 %1022
  %1047 = load i8, i8* %1046, align 1
  %1048 = zext i8 %1047 to i16
  br label %1052

1049:                                             ; preds = %1041
  %1050 = getelementptr inbounds i16, i16* %1011, i64 %1022
  %1051 = load i16, i16* %1050, align 2
  br label %1052

1052:                                             ; preds = %1049, %1045
  %1053 = phi i16 [ %1048, %1045 ], [ %1051, %1049 ]
  br i1 %1013, label %1089, label %1054

1054:                                             ; preds = %1052
  %1055 = load atomic i32, i32* %1014 monotonic, align 4
  %1056 = and i32 %1055, 1
  %1057 = icmp eq i32 %1056, 0
  %1058 = load i32, i32* %1016, align 4
  br i1 %1057, label %1069, label %1059

1059:                                             ; preds = %1054
  %1060 = icmp eq i32 %1058, 0
  br i1 %1060, label %1089, label %1061

1061:                                             ; preds = %1059
  %1062 = and i16 %1053, 255
  %1063 = zext i16 %1062 to i32
  %1064 = zext i32 %1058 to i64
  %1065 = call i8* @memchr(i8* %1017, i32 %1063, i64 %1064) #13
  %1066 = icmp eq i8* %1065, null
  %1067 = ptrtoint i8* %1065 to i64
  %1068 = sub i64 %1067, %1018
  br i1 %1066, label %1089, label %1082

1069:                                             ; preds = %1054
  %1070 = and i16 %1053, 255
  %1071 = icmp eq i32 %1058, 0
  br i1 %1071, label %1089, label %1072

1072:                                             ; preds = %1069
  %1073 = zext i32 %1058 to i64
  br label %1074

1074:                                             ; preds = %1079, %1072
  %1075 = phi i64 [ %1080, %1079 ], [ 0, %1072 ]
  %1076 = getelementptr inbounds i16, i16* %1019, i64 %1075
  %1077 = load i16, i16* %1076, align 2
  %1078 = icmp eq i16 %1077, %1070
  br i1 %1078, label %1082, label %1079

1079:                                             ; preds = %1074
  %1080 = add nuw nsw i64 %1075, 1
  %1081 = icmp eq i64 %1080, %1073
  br i1 %1081, label %1089, label %1074

1082:                                             ; preds = %1074, %1061
  %1083 = phi i64 [ %1068, %1061 ], [ %1075, %1074 ]
  %1084 = trunc i64 %1083 to i32
  %1085 = icmp eq i32 %1084, -1
  br i1 %1085, label %1089, label %1086

1086:                                             ; preds = %1082, %1037, %1033
  %1087 = add nuw nsw i64 %1022, 1
  %1088 = icmp eq i64 %1087, %1020
  br i1 %1088, label %1089, label %1021

1089:                                             ; preds = %1052, %1059, %1061, %1069, %1082, %1086, %1079, %1003
  %1090 = phi i1 [ false, %1003 ], [ false, %1079 ], [ true, %1086 ], [ false, %1052 ], [ false, %1059 ], [ false, %1061 ], [ false, %1069 ], [ false, %1082 ]
  %1091 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1001, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1092 = load atomic i32, i32* %1091 monotonic, align 4
  %1093 = and i32 %1092, 2
  %1094 = icmp eq i32 %1093, 0
  %1095 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1001, i64 0, i32 0
  %1096 = load i32, i32* %1095, align 4
  br i1 %1094, label %1097, label %1099

1097:                                             ; preds = %1089
  %1098 = add i32 %1096, -1
  store i32 %1098, i32* %1095, align 4
  br label %1099

1099:                                             ; preds = %1097, %1089
  %1100 = phi i32 [ %1098, %1097 ], [ %1096, %1089 ]
  %1101 = icmp eq i32 %1100, 0
  br i1 %1101, label %1102, label %1103

1102:                                             ; preds = %1099
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1001) #12
  br label %1103

1103:                                             ; preds = %1102, %1099, %999, %995
  %1104 = phi i1 [ false, %995 ], [ false, %999 ], [ %1090, %1102 ], [ %1090, %1099 ]
  %1105 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %993, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1106 = load atomic i32, i32* %1105 monotonic, align 4
  %1107 = and i32 %1106, 2
  %1108 = icmp eq i32 %1107, 0
  %1109 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %993, i64 0, i32 0
  %1110 = load i32, i32* %1109, align 4
  br i1 %1108, label %1111, label %1113

1111:                                             ; preds = %1103
  %1112 = add i32 %1110, -1
  store i32 %1112, i32* %1109, align 4
  br label %1113

1113:                                             ; preds = %1111, %1103
  %1114 = phi i32 [ %1112, %1111 ], [ %1110, %1103 ]
  %1115 = icmp eq i32 %1114, 0
  br i1 %1115, label %1116, label %1117

1116:                                             ; preds = %1113
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %993) #12
  br i1 %1104, label %1118, label %1213

1117:                                             ; preds = %1113
  br i1 %1104, label %1118, label %1213

1118:                                             ; preds = %1116, %1117
  %1119 = getelementptr inbounds %"class.blink::NDEFRecordInit", %"class.blink::NDEFRecordInit"* %1, i64 0, i32 1, i32 0
  %1120 = load i32, i32* %1119, align 8
  %1121 = icmp eq i32 %1120, 0
  br i1 %1121, label %1212, label %1122

1122:                                             ; preds = %1118
  %1123 = getelementptr inbounds %"class.blink::NDEFRecordInit", %"class.blink::NDEFRecordInit"* %1, i64 0, i32 1
  %1124 = add i32 %1120, -1
  %1125 = icmp ult i32 %1124, 2
  br i1 %1125, label %1126, label %1144

1126:                                             ; preds = %1122
  %1127 = bitcast %"class.WTF::Vector"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1127) #12
  %1128 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %5, i64 0, i32 0, i32 0, i32 0
  %1129 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %5, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1127, i8 0, i64 16, i1 false) #12
  %1130 = call fastcc zeroext i1 @_ZN5blink12_GLOBAL__N_122GetBytesOfBufferSourceERKNS_53StringOrArrayBufferOrArrayBufferViewOrNDEFMessageInitEPN3WTF6VectorIhLj0ENS4_18PartitionAllocatorEEERNS_14ExceptionStateE(%"class.blink::StringOrArrayBufferOrArrayBufferViewOrNDEFMessageInit"* dereferenceable(40) %1123, %"class.WTF::Vector"* nonnull %5, %"class.blink::ExceptionState"* dereferenceable(72) %2) #12
  br i1 %1130, label %1131, label %1134

1131:                                             ; preds = %1126
  %1132 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1132) #12
  store i32 1, i32* %6, align 4
  %1133 = call %"class.blink::NDEFRecord"* @_ZN5blink25MakeGarbageCollectedTraitINS_10NDEFRecordEE4CallIJN6device5mojom22NDEFRecordTypeCategoryERKN3WTF6StringESA_RNS7_6VectorIhLj0ENS7_18PartitionAllocatorEEEEEEPS1_DpOT_(i32* nonnull dereferenceable(4) %6, %"class.WTF::String"* dereferenceable(8) %57, %"class.WTF::String"* nonnull dereferenceable(8) %53, %"class.WTF::Vector"* nonnull dereferenceable(16) %5) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1132) #12
  br label %1134

1134:                                             ; preds = %1131, %1126
  %1135 = phi %"class.blink::NDEFRecord"* [ %1133, %1131 ], [ null, %1126 ]
  %1136 = load i8*, i8** %1128, align 8
  %1137 = icmp eq i8* %1136, null
  br i1 %1137, label %1143, label %1138, !prof !3

1138:                                             ; preds = %1134
  %1139 = load i32, i32* %1129, align 4
  %1140 = icmp eq i32 %1139, 0
  br i1 %1140, label %1142, label %1141, !prof !2

1141:                                             ; preds = %1138
  store i32 0, i32* %1129, align 4
  br label %1142

1142:                                             ; preds = %1141, %1138
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %1136) #12
  store i8* null, i8** %1128, align 8
  br label %1143

1143:                                             ; preds = %1142, %1134
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1127) #12
  br label %1383

1144:                                             ; preds = %1122
  %1145 = icmp eq i32 %1120, 3
  br i1 %1145, label %1146, label %1212

1146:                                             ; preds = %1144
  %1147 = call %"class.blink::NDEFMessageInit"* @_ZNK5blink53StringOrArrayBufferOrArrayBufferViewOrNDEFMessageInit20GetAsNDEFMessageInitEv(%"class.blink::StringOrArrayBufferOrArrayBufferViewOrNDEFMessageInit"* %1123) #12
  %1148 = call %"class.blink::NDEFMessage"* @_ZN5blink11NDEFMessage6CreateEPKNS_16ExecutionContextEPKNS_15NDEFMessageInitERNS_14ExceptionStateEb(%"class.blink::ExecutionContext"* %0, %"class.blink::NDEFMessageInit"* %1147, %"class.blink::ExceptionState"* dereferenceable(72) %2, i1 zeroext true) #12
  %1149 = ptrtoint %"class.blink::NDEFMessage"* %1148 to i64
  %1150 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %2, i64 0, i32 4
  %1151 = load i32, i32* %1150, align 8
  %1152 = icmp eq i32 %1151, 0
  br i1 %1152, label %1153, label %1383

1153:                                             ; preds = %1146
  %1154 = call i8* @_ZN5blink10ThreadHeap8AllocateINS_15ScriptWrappableEEEPhm(i64 88) #12
  %1155 = bitcast i8* %1154 to %"class.blink::NDEFRecord"*
  %1156 = bitcast i8* %1154 to i32 (...)***
  %1157 = getelementptr inbounds i8, i8* %1154, i64 8
  %1158 = bitcast i8* %1157 to i64**
  store i64* null, i64** %1158, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink10NDEFRecordE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %1156, align 8
  %1159 = getelementptr inbounds i8, i8* %1154, i64 16
  %1160 = bitcast i8* %1159 to i32*
  store i32 1, i32* %1160, align 8
  %1161 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %168, align 8
  %1162 = getelementptr inbounds i8, i8* %1154, i64 24
  %1163 = bitcast i8* %1162 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %1161, %"class.WTF::StringImpl"** %1163, align 8
  %1164 = icmp eq %"class.WTF::StringImpl"* %1161, null
  br i1 %1164, label %1182, label %1165

1165:                                             ; preds = %1153
  %1166 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1161, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1167 = load atomic i32, i32* %1166 monotonic, align 4
  %1168 = and i32 %1167, 2
  %1169 = icmp eq i32 %1168, 0
  br i1 %1169, label %1170, label %1182

1170:                                             ; preds = %1165
  %1171 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1161, i64 0, i32 0
  %1172 = load i32, i32* %1171, align 4
  %1173 = zext i32 %1172 to i33
  %1174 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1173, i33 1) #12
  %1175 = extractvalue { i33, i1 } %1174, 1
  %1176 = extractvalue { i33, i1 } %1174, 0
  %1177 = icmp slt i33 %1176, 0
  %1178 = or i1 %1175, %1177
  br i1 %1178, label %1179, label %1180, !prof !2

1179:                                             ; preds = %1170
  call void @llvm.trap() #12
  unreachable

1180:                                             ; preds = %1170
  %1181 = trunc i33 %1176 to i32
  store i32 %1181, i32* %1171, align 4
  br label %1182

1182:                                             ; preds = %1180, %1165, %1153
  %1183 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %165, align 8
  %1184 = getelementptr inbounds i8, i8* %1154, i64 32
  %1185 = bitcast i8* %1184 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %1183, %"class.WTF::StringImpl"** %1185, align 8
  %1186 = icmp eq %"class.WTF::StringImpl"* %1183, null
  br i1 %1186, label %1204, label %1187

1187:                                             ; preds = %1182
  %1188 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1183, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1189 = load atomic i32, i32* %1188 monotonic, align 4
  %1190 = and i32 %1189, 2
  %1191 = icmp eq i32 %1190, 0
  br i1 %1191, label %1192, label %1204

1192:                                             ; preds = %1187
  %1193 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1183, i64 0, i32 0
  %1194 = load i32, i32* %1193, align 4
  %1195 = zext i32 %1194 to i33
  %1196 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1195, i33 1) #12
  %1197 = extractvalue { i33, i1 } %1196, 1
  %1198 = extractvalue { i33, i1 } %1196, 0
  %1199 = icmp slt i33 %1198, 0
  %1200 = or i1 %1197, %1199
  br i1 %1200, label %1201, label %1202, !prof !2

1201:                                             ; preds = %1192
  call void @llvm.trap() #12
  unreachable

1202:                                             ; preds = %1192
  %1203 = trunc i33 %1198 to i32
  store i32 %1203, i32* %1193, align 4
  br label %1204

1204:                                             ; preds = %1202, %1187, %1182
  %1205 = getelementptr inbounds i8, i8* %1154, i64 40
  %1206 = getelementptr inbounds i8, i8* %1154, i64 80
  call void @llvm.memset.p0i8.i64(i8* align 8 %1205, i8 0, i64 40, i1 false) #12
  %1207 = bitcast i8* %1206 to i64*
  store i64 %1149, i64* %1207, align 8
  %1208 = getelementptr inbounds i8, i8* %1154, i64 -4
  %1209 = bitcast i8* %1208 to i16*
  %1210 = load atomic i16, i16* %1209 monotonic, align 2
  %1211 = or i16 %1210, 1
  store atomic i16 %1211, i16* %1209 release, align 2
  br label %1383

1212:                                             ; preds = %1144, %1118
  call void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"* %2, i8* getelementptr inbounds ([84 x i8], [84 x i8]* @.str.35, i64 0, i64 0)) #12
  br label %1383

1213:                                             ; preds = %985, %992, %969, %988, %958, %951, %1116, %1117
  %1214 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %168, align 8
  %1215 = icmp eq %"class.WTF::StringImpl"* %1214, null
  br i1 %1215, label %1382, label %1216

1216:                                             ; preds = %1213
  %1217 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1214, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1218 = load atomic i32, i32* %1217 monotonic, align 4
  %1219 = and i32 %1218, 8
  %1220 = icmp eq i32 %1219, 0
  br i1 %1220, label %1221, label %1223

1221:                                             ; preds = %1216
  %1222 = call i32 @_ZNK3WTF10StringImpl17ComputeASCIIFlagsEv(%"class.WTF::StringImpl"* nonnull %1214) #12
  br label %1223

1223:                                             ; preds = %1221, %1216
  %1224 = phi i32 [ %1222, %1221 ], [ %1218, %1216 ]
  %1225 = and i32 %1224, 16
  %1226 = icmp eq i32 %1225, 0
  br i1 %1226, label %1382, label %1227

1227:                                             ; preds = %1223
  %1228 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %168, align 8
  %1229 = icmp eq %"class.WTF::StringImpl"* %1228, null
  br i1 %1229, label %1382, label %1230

1230:                                             ; preds = %1227
  %1231 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1228, i64 0, i32 1
  %1232 = load i32, i32* %1231, align 4
  %1233 = add i32 %1232, -2
  %1234 = icmp ugt i32 %1233, 254
  br i1 %1234, label %1382, label %1235

1235:                                             ; preds = %1230
  %1236 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1228, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1237 = load atomic i32, i32* %1236 monotonic, align 4
  %1238 = and i32 %1237, 1
  %1239 = icmp eq i32 %1238, 0
  %1240 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1228, i64 1
  br i1 %1239, label %1245, label %1241

1241:                                             ; preds = %1235
  %1242 = bitcast %"class.WTF::StringImpl"* %1240 to i8*
  %1243 = load i8, i8* %1242, align 1
  %1244 = zext i8 %1243 to i16
  br label %1248

1245:                                             ; preds = %1235
  %1246 = bitcast %"class.WTF::StringImpl"* %1240 to i16*
  %1247 = load i16, i16* %1246, align 2
  br label %1248

1248:                                             ; preds = %1245, %1241
  %1249 = phi i16 [ %1244, %1241 ], [ %1247, %1245 ]
  %1250 = icmp eq i16 %1249, 58
  br i1 %1250, label %1251, label %1382

1251:                                             ; preds = %1248
  %1252 = load atomic i32, i32* %1236 monotonic, align 4
  %1253 = and i32 %1252, 1
  %1254 = icmp eq i32 %1253, 0
  br i1 %1254, label %1260, label %1255

1255:                                             ; preds = %1251
  %1256 = bitcast %"class.WTF::StringImpl"* %1240 to i8*
  %1257 = getelementptr inbounds i8, i8* %1256, i64 1
  %1258 = load i8, i8* %1257, align 1
  %1259 = zext i8 %1258 to i16
  br label %1264

1260:                                             ; preds = %1251
  %1261 = bitcast %"class.WTF::StringImpl"* %1240 to i16*
  %1262 = getelementptr inbounds i16, i16* %1261, i64 1
  %1263 = load i16, i16* %1262, align 2
  br label %1264

1264:                                             ; preds = %1260, %1255
  %1265 = phi i16 [ %1259, %1255 ], [ %1263, %1260 ]
  %1266 = add i16 %1265, -97
  %1267 = icmp ult i16 %1266, 26
  br i1 %1267, label %1285, label %1268

1268:                                             ; preds = %1264
  %1269 = load atomic i32, i32* %1236 monotonic, align 4
  %1270 = and i32 %1269, 1
  %1271 = icmp eq i32 %1270, 0
  br i1 %1271, label %1277, label %1272

1272:                                             ; preds = %1268
  %1273 = bitcast %"class.WTF::StringImpl"* %1240 to i8*
  %1274 = getelementptr inbounds i8, i8* %1273, i64 1
  %1275 = load i8, i8* %1274, align 1
  %1276 = zext i8 %1275 to i16
  br label %1281

1277:                                             ; preds = %1268
  %1278 = bitcast %"class.WTF::StringImpl"* %1240 to i16*
  %1279 = getelementptr inbounds i16, i16* %1278, i64 1
  %1280 = load i16, i16* %1279, align 2
  br label %1281

1281:                                             ; preds = %1277, %1272
  %1282 = phi i16 [ %1276, %1272 ], [ %1280, %1277 ]
  %1283 = add i16 %1282, -48
  %1284 = icmp ult i16 %1283, 10
  br i1 %1284, label %1285, label %1382

1285:                                             ; preds = %1281, %1264
  br i1 %3, label %1287, label %1286

1286:                                             ; preds = %1285
  call void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"* %2, i8* getelementptr inbounds ([121 x i8], [121 x i8]* @.str.9, i64 0, i64 0)) #12
  br label %1383

1287:                                             ; preds = %1285
  %1288 = getelementptr inbounds %"class.blink::NDEFRecordInit", %"class.blink::NDEFRecordInit"* %1, i64 0, i32 1, i32 0
  %1289 = load i32, i32* %1288, align 8
  %1290 = icmp eq i32 %1289, 0
  br i1 %1290, label %1381, label %1291

1291:                                             ; preds = %1287
  %1292 = getelementptr inbounds %"class.blink::NDEFRecordInit", %"class.blink::NDEFRecordInit"* %1, i64 0, i32 1
  %1293 = add i32 %1289, -1
  %1294 = icmp ult i32 %1293, 2
  br i1 %1294, label %1295, label %1313

1295:                                             ; preds = %1291
  %1296 = bitcast %"class.WTF::Vector"* %51 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1296) #12
  %1297 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %51, i64 0, i32 0, i32 0, i32 0
  %1298 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %51, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1296, i8 0, i64 16, i1 false) #12
  %1299 = call fastcc zeroext i1 @_ZN5blink12_GLOBAL__N_122GetBytesOfBufferSourceERKNS_53StringOrArrayBufferOrArrayBufferViewOrNDEFMessageInitEPN3WTF6VectorIhLj0ENS4_18PartitionAllocatorEEERNS_14ExceptionStateE(%"class.blink::StringOrArrayBufferOrArrayBufferViewOrNDEFMessageInit"* dereferenceable(40) %1292, %"class.WTF::Vector"* nonnull %51, %"class.blink::ExceptionState"* dereferenceable(72) %2) #12
  br i1 %1299, label %1300, label %1303

1300:                                             ; preds = %1295
  %1301 = bitcast i32* %52 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1301) #12
  store i32 2, i32* %52, align 4
  %1302 = call %"class.blink::NDEFRecord"* @_ZN5blink25MakeGarbageCollectedTraitINS_10NDEFRecordEE4CallIJN6device5mojom22NDEFRecordTypeCategoryERKN3WTF6StringESA_RNS7_6VectorIhLj0ENS7_18PartitionAllocatorEEEEEEPS1_DpOT_(i32* nonnull dereferenceable(4) %52, %"class.WTF::String"* dereferenceable(8) %57, %"class.WTF::String"* nonnull dereferenceable(8) %53, %"class.WTF::Vector"* nonnull dereferenceable(16) %51) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1301) #12
  br label %1303

1303:                                             ; preds = %1300, %1295
  %1304 = phi %"class.blink::NDEFRecord"* [ %1302, %1300 ], [ null, %1295 ]
  %1305 = load i8*, i8** %1297, align 8
  %1306 = icmp eq i8* %1305, null
  br i1 %1306, label %1312, label %1307, !prof !3

1307:                                             ; preds = %1303
  %1308 = load i32, i32* %1298, align 4
  %1309 = icmp eq i32 %1308, 0
  br i1 %1309, label %1311, label %1310, !prof !2

1310:                                             ; preds = %1307
  store i32 0, i32* %1298, align 4
  br label %1311

1311:                                             ; preds = %1310, %1307
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %1305) #12
  store i8* null, i8** %1297, align 8
  br label %1312

1312:                                             ; preds = %1311, %1303
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1296) #12
  br label %1383

1313:                                             ; preds = %1291
  %1314 = icmp eq i32 %1289, 3
  br i1 %1314, label %1315, label %1381

1315:                                             ; preds = %1313
  %1316 = call %"class.blink::NDEFMessageInit"* @_ZNK5blink53StringOrArrayBufferOrArrayBufferViewOrNDEFMessageInit20GetAsNDEFMessageInitEv(%"class.blink::StringOrArrayBufferOrArrayBufferViewOrNDEFMessageInit"* %1292) #12
  %1317 = call %"class.blink::NDEFMessage"* @_ZN5blink11NDEFMessage6CreateEPKNS_16ExecutionContextEPKNS_15NDEFMessageInitERNS_14ExceptionStateEb(%"class.blink::ExecutionContext"* %0, %"class.blink::NDEFMessageInit"* %1316, %"class.blink::ExceptionState"* dereferenceable(72) %2, i1 zeroext true) #12
  %1318 = ptrtoint %"class.blink::NDEFMessage"* %1317 to i64
  %1319 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %2, i64 0, i32 4
  %1320 = load i32, i32* %1319, align 8
  %1321 = icmp eq i32 %1320, 0
  br i1 %1321, label %1322, label %1383

1322:                                             ; preds = %1315
  %1323 = call i8* @_ZN5blink10ThreadHeap8AllocateINS_15ScriptWrappableEEEPhm(i64 88) #12
  %1324 = bitcast i8* %1323 to %"class.blink::NDEFRecord"*
  %1325 = bitcast i8* %1323 to i32 (...)***
  %1326 = getelementptr inbounds i8, i8* %1323, i64 8
  %1327 = bitcast i8* %1326 to i64**
  store i64* null, i64** %1327, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink10NDEFRecordE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %1325, align 8
  %1328 = getelementptr inbounds i8, i8* %1323, i64 16
  %1329 = bitcast i8* %1328 to i32*
  store i32 2, i32* %1329, align 8
  %1330 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %168, align 8
  %1331 = getelementptr inbounds i8, i8* %1323, i64 24
  %1332 = bitcast i8* %1331 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %1330, %"class.WTF::StringImpl"** %1332, align 8
  %1333 = icmp eq %"class.WTF::StringImpl"* %1330, null
  br i1 %1333, label %1351, label %1334

1334:                                             ; preds = %1322
  %1335 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1330, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1336 = load atomic i32, i32* %1335 monotonic, align 4
  %1337 = and i32 %1336, 2
  %1338 = icmp eq i32 %1337, 0
  br i1 %1338, label %1339, label %1351

1339:                                             ; preds = %1334
  %1340 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1330, i64 0, i32 0
  %1341 = load i32, i32* %1340, align 4
  %1342 = zext i32 %1341 to i33
  %1343 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1342, i33 1) #12
  %1344 = extractvalue { i33, i1 } %1343, 1
  %1345 = extractvalue { i33, i1 } %1343, 0
  %1346 = icmp slt i33 %1345, 0
  %1347 = or i1 %1344, %1346
  br i1 %1347, label %1348, label %1349, !prof !2

1348:                                             ; preds = %1339
  call void @llvm.trap() #12
  unreachable

1349:                                             ; preds = %1339
  %1350 = trunc i33 %1345 to i32
  store i32 %1350, i32* %1340, align 4
  br label %1351

1351:                                             ; preds = %1349, %1334, %1322
  %1352 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %165, align 8
  %1353 = getelementptr inbounds i8, i8* %1323, i64 32
  %1354 = bitcast i8* %1353 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %1352, %"class.WTF::StringImpl"** %1354, align 8
  %1355 = icmp eq %"class.WTF::StringImpl"* %1352, null
  br i1 %1355, label %1373, label %1356

1356:                                             ; preds = %1351
  %1357 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1352, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1358 = load atomic i32, i32* %1357 monotonic, align 4
  %1359 = and i32 %1358, 2
  %1360 = icmp eq i32 %1359, 0
  br i1 %1360, label %1361, label %1373

1361:                                             ; preds = %1356
  %1362 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1352, i64 0, i32 0
  %1363 = load i32, i32* %1362, align 4
  %1364 = zext i32 %1363 to i33
  %1365 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1364, i33 1) #12
  %1366 = extractvalue { i33, i1 } %1365, 1
  %1367 = extractvalue { i33, i1 } %1365, 0
  %1368 = icmp slt i33 %1367, 0
  %1369 = or i1 %1366, %1368
  br i1 %1369, label %1370, label %1371, !prof !2

1370:                                             ; preds = %1361
  call void @llvm.trap() #12
  unreachable

1371:                                             ; preds = %1361
  %1372 = trunc i33 %1367 to i32
  store i32 %1372, i32* %1362, align 4
  br label %1373

1373:                                             ; preds = %1371, %1356, %1351
  %1374 = getelementptr inbounds i8, i8* %1323, i64 40
  %1375 = getelementptr inbounds i8, i8* %1323, i64 80
  call void @llvm.memset.p0i8.i64(i8* align 8 %1374, i8 0, i64 40, i1 false) #12
  %1376 = bitcast i8* %1375 to i64*
  store i64 %1318, i64* %1376, align 8
  %1377 = getelementptr inbounds i8, i8* %1323, i64 -4
  %1378 = bitcast i8* %1377 to i16*
  %1379 = load atomic i16, i16* %1378 monotonic, align 2
  %1380 = or i16 %1379, 1
  store atomic i16 %1380, i16* %1378 release, align 2
  br label %1383

1381:                                             ; preds = %1313, %1287
  call void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"* %2, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.36, i64 0, i64 0)) #12
  br label %1383

1382:                                             ; preds = %955, %941, %1223, %1230, %1248, %1281, %1227, %1213
  call void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"* %2, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.10, i64 0, i64 0)) #12
  br label %1383

1383:                                             ; preds = %1381, %1373, %1315, %1312, %1212, %1204, %1146, %1143, %931, %919, %889, %870, %837, %661, %627, %560, %504, %256, %1382, %1286, %223
  %1384 = phi %"class.blink::NDEFRecord"* [ %197, %223 ], [ null, %1286 ], [ null, %1382 ], [ %505, %504 ], [ null, %256 ], [ %611, %627 ], [ null, %560 ], [ %813, %837 ], [ null, %661 ], [ %881, %889 ], [ null, %870 ], [ %932, %931 ], [ null, %919 ], [ %1135, %1143 ], [ null, %1212 ], [ %1155, %1204 ], [ null, %1146 ], [ %1304, %1312 ], [ null, %1381 ], [ %1324, %1373 ], [ null, %1315 ]
  %1385 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %165, align 8
  %1386 = icmp eq %"class.WTF::StringImpl"* %1385, null
  br i1 %1386, label %1400, label %1387

1387:                                             ; preds = %1383
  %1388 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1385, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1389 = load atomic i32, i32* %1388 monotonic, align 4
  %1390 = and i32 %1389, 2
  %1391 = icmp eq i32 %1390, 0
  %1392 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1385, i64 0, i32 0
  %1393 = load i32, i32* %1392, align 4
  br i1 %1391, label %1394, label %1396

1394:                                             ; preds = %1387
  %1395 = add i32 %1393, -1
  store i32 %1395, i32* %1392, align 4
  br label %1396

1396:                                             ; preds = %1394, %1387
  %1397 = phi i32 [ %1395, %1394 ], [ %1393, %1387 ]
  %1398 = icmp eq i32 %1397, 0
  br i1 %1398, label %1399, label %1400

1399:                                             ; preds = %1396
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1385) #12
  br label %1400

1400:                                             ; preds = %1383, %1396, %1399
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %166) #12
  br label %1401

1401:                                             ; preds = %1400, %121, %87
  %1402 = phi %"class.blink::NDEFRecord"* [ null, %87 ], [ null, %121 ], [ %1384, %1400 ]
  ret %"class.blink::NDEFRecord"* %1402
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"*, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6StringD2Ev(%"class.WTF::String"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %2, align 8
  %4 = icmp eq %"class.WTF::StringImpl"* %3, null
  br i1 %4, label %18, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = load atomic i32, i32* %6 monotonic, align 4
  %8 = and i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 0
  %11 = load i32, i32* %10, align 4
  br i1 %9, label %12, label %14

12:                                               ; preds = %5
  %13 = add i32 %11, -1
  store i32 %13, i32* %10, align 4
  br label %14

14:                                               ; preds = %12, %5
  %15 = phi i32 [ %13, %12 ], [ %11, %5 ]
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %18

17:                                               ; preds = %14
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %3) #12
  br label %18

18:                                               ; preds = %1, %14, %17
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink10NDEFRecordC2EN6device5mojom22NDEFRecordTypeCategoryERKN3WTF6StringES7_NS4_6VectorIhLj0ENS4_18PartitionAllocatorEEE(%"class.blink::NDEFRecord"* nocapture, i32, %"class.WTF::String"* nocapture readonly dereferenceable(8), %"class.WTF::String"* nocapture readonly dereferenceable(8), %"class.WTF::Vector"* nocapture) unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  store i64* null, i64** %7, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink10NDEFRecordE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %8 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 1
  store i32 %1, i32* %8, align 8
  %9 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* %10, %"class.WTF::StringImpl"** %11, align 8
  %12 = icmp eq %"class.WTF::StringImpl"* %10, null
  br i1 %12, label %30, label %13

13:                                               ; preds = %5
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load atomic i32, i32* %14 monotonic, align 4
  %16 = and i32 %15, 2
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %30

18:                                               ; preds = %13
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 0
  %20 = load i32, i32* %19, align 4
  %21 = zext i32 %20 to i33
  %22 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %21, i33 1) #12
  %23 = extractvalue { i33, i1 } %22, 1
  %24 = extractvalue { i33, i1 } %22, 0
  %25 = icmp slt i33 %24, 0
  %26 = or i1 %23, %25
  br i1 %26, label %27, label %28, !prof !2

27:                                               ; preds = %18
  tail call void @llvm.trap() #12
  unreachable

28:                                               ; preds = %18
  %29 = trunc i33 %24 to i32
  store i32 %29, i32* %19, align 4
  br label %30

30:                                               ; preds = %5, %13, %28
  %31 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  %32 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %31, align 8
  %33 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 3, i32 0, i32 0
  store %"class.WTF::StringImpl"* %32, %"class.WTF::StringImpl"** %33, align 8
  %34 = icmp eq %"class.WTF::StringImpl"* %32, null
  br i1 %34, label %52, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %37 = load atomic i32, i32* %36 monotonic, align 4
  %38 = and i32 %37, 2
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %52

40:                                               ; preds = %35
  %41 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 0
  %42 = load i32, i32* %41, align 4
  %43 = zext i32 %42 to i33
  %44 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %43, i33 1) #12
  %45 = extractvalue { i33, i1 } %44, 1
  %46 = extractvalue { i33, i1 } %44, 0
  %47 = icmp slt i33 %46, 0
  %48 = or i1 %45, %47
  br i1 %48, label %49, label %50, !prof !2

49:                                               ; preds = %40
  tail call void @llvm.trap() #12
  unreachable

50:                                               ; preds = %40
  %51 = trunc i33 %46 to i32
  store i32 %51, i32* %41, align 4
  br label %52

52:                                               ; preds = %30, %35, %50
  %53 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 4, i32 0, i32 0
  %54 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 7
  %55 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 7, i32 0, i32 0, i32 1
  %56 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 7, i32 0, i32 0, i32 2
  %57 = bitcast %"class.WTF::Vector"* %4 to i64*
  %58 = bitcast %"class.WTF::StringImpl"** %53 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %58, i8 0, i64 40, i1 false)
  %59 = load i64, i64* %57, align 8
  %60 = bitcast %"class.WTF::Vector"* %54 to i64*
  store atomic i64 0, i64* %57 monotonic, align 8
  store atomic i64 %59, i64* %60 monotonic, align 8
  %61 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %4, i64 0, i32 0, i32 0, i32 1
  %62 = load i32, i32* %55, align 4
  %63 = load i32, i32* %61, align 4
  store i32 %63, i32* %55, align 4
  store i32 %62, i32* %61, align 4
  %64 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %4, i64 0, i32 0, i32 0, i32 2
  %65 = load i32, i32* %56, align 4
  %66 = load i32, i32* %64, align 4
  store i32 %66, i32* %56, align 4
  store i32 %65, i32* %64, align 4
  %67 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 8, i32 0, i32 0
  store %"class.blink::NDEFMessage"* null, %"class.blink::NDEFMessage"** %67, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink10NDEFRecordC2EN6device5mojom22NDEFRecordTypeCategoryERKN3WTF6StringES7_PNS_11NDEFMessageE(%"class.blink::NDEFRecord"* nocapture, i32, %"class.WTF::String"* nocapture readonly dereferenceable(8), %"class.WTF::String"* nocapture readonly dereferenceable(8), %"class.blink::NDEFMessage"*) unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  store i64* null, i64** %7, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink10NDEFRecordE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %8 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 1
  store i32 %1, i32* %8, align 8
  %9 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* %10, %"class.WTF::StringImpl"** %11, align 8
  %12 = icmp eq %"class.WTF::StringImpl"* %10, null
  br i1 %12, label %30, label %13

13:                                               ; preds = %5
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load atomic i32, i32* %14 monotonic, align 4
  %16 = and i32 %15, 2
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %30

18:                                               ; preds = %13
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 0
  %20 = load i32, i32* %19, align 4
  %21 = zext i32 %20 to i33
  %22 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %21, i33 1) #12
  %23 = extractvalue { i33, i1 } %22, 1
  %24 = extractvalue { i33, i1 } %22, 0
  %25 = icmp slt i33 %24, 0
  %26 = or i1 %23, %25
  br i1 %26, label %27, label %28, !prof !2

27:                                               ; preds = %18
  tail call void @llvm.trap() #12
  unreachable

28:                                               ; preds = %18
  %29 = trunc i33 %24 to i32
  store i32 %29, i32* %19, align 4
  br label %30

30:                                               ; preds = %5, %13, %28
  %31 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  %32 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %31, align 8
  %33 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 3, i32 0, i32 0
  store %"class.WTF::StringImpl"* %32, %"class.WTF::StringImpl"** %33, align 8
  %34 = icmp eq %"class.WTF::StringImpl"* %32, null
  br i1 %34, label %52, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %37 = load atomic i32, i32* %36 monotonic, align 4
  %38 = and i32 %37, 2
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %52

40:                                               ; preds = %35
  %41 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 0
  %42 = load i32, i32* %41, align 4
  %43 = zext i32 %42 to i33
  %44 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %43, i33 1) #12
  %45 = extractvalue { i33, i1 } %44, 1
  %46 = extractvalue { i33, i1 } %44, 0
  %47 = icmp slt i33 %46, 0
  %48 = or i1 %45, %47
  br i1 %48, label %49, label %50, !prof !2

49:                                               ; preds = %40
  tail call void @llvm.trap() #12
  unreachable

50:                                               ; preds = %40
  %51 = trunc i33 %46 to i32
  store i32 %51, i32* %41, align 4
  br label %52

52:                                               ; preds = %30, %35, %50
  %53 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 4, i32 0, i32 0
  %54 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 8, i32 0, i32 0
  %55 = bitcast %"class.WTF::StringImpl"** %53 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %55, i8 0, i64 40, i1 false)
  store %"class.blink::NDEFMessage"* %4, %"class.blink::NDEFMessage"** %54, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink10NDEFRecordC2ERKN3WTF6StringES4_S4_NS1_6VectorIhLj0ENS1_18PartitionAllocatorEEE(%"class.blink::NDEFRecord"*, %"class.WTF::String"* nocapture readonly dereferenceable(8), %"class.WTF::String"* nocapture readonly dereferenceable(8), %"class.WTF::String"* nocapture readonly dereferenceable(8), %"class.WTF::Vector"* nocapture) unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  store i64* null, i64** %7, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink10NDEFRecordE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %8 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 1
  store i32 0, i32* %8, align 8
  %9 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 2
  tail call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* %9, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0), i64 4) #12
  %10 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %11 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %12 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 3, i32 0, i32 0
  store %"class.WTF::StringImpl"* %11, %"class.WTF::StringImpl"** %12, align 8
  %13 = icmp eq %"class.WTF::StringImpl"* %11, null
  br i1 %13, label %31, label %14

14:                                               ; preds = %5
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load atomic i32, i32* %15 monotonic, align 4
  %17 = and i32 %16, 2
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %31

19:                                               ; preds = %14
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = zext i32 %21 to i33
  %23 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %22, i33 1) #12
  %24 = extractvalue { i33, i1 } %23, 1
  %25 = extractvalue { i33, i1 } %23, 0
  %26 = icmp slt i33 %25, 0
  %27 = or i1 %24, %26
  br i1 %27, label %28, label %29, !prof !2

28:                                               ; preds = %19
  tail call void @llvm.trap() #12
  unreachable

29:                                               ; preds = %19
  %30 = trunc i33 %25 to i32
  store i32 %30, i32* %20, align 4
  br label %31

31:                                               ; preds = %5, %14, %29
  %32 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 4, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %32, align 8
  %33 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %34 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %33, align 8
  %35 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 5, i32 0, i32 0
  store %"class.WTF::StringImpl"* %34, %"class.WTF::StringImpl"** %35, align 8
  %36 = icmp eq %"class.WTF::StringImpl"* %34, null
  br i1 %36, label %54, label %37

37:                                               ; preds = %31
  %38 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %34, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %39 = load atomic i32, i32* %38 monotonic, align 4
  %40 = and i32 %39, 2
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %54

42:                                               ; preds = %37
  %43 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %34, i64 0, i32 0
  %44 = load i32, i32* %43, align 4
  %45 = zext i32 %44 to i33
  %46 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %45, i33 1) #12
  %47 = extractvalue { i33, i1 } %46, 1
  %48 = extractvalue { i33, i1 } %46, 0
  %49 = icmp slt i33 %48, 0
  %50 = or i1 %47, %49
  br i1 %50, label %51, label %52, !prof !2

51:                                               ; preds = %42
  tail call void @llvm.trap() #12
  unreachable

52:                                               ; preds = %42
  %53 = trunc i33 %48 to i32
  store i32 %53, i32* %43, align 4
  br label %54

54:                                               ; preds = %31, %37, %52
  %55 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  %56 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %55, align 8
  %57 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 6, i32 0, i32 0
  store %"class.WTF::StringImpl"* %56, %"class.WTF::StringImpl"** %57, align 8
  %58 = icmp eq %"class.WTF::StringImpl"* %56, null
  br i1 %58, label %76, label %59

59:                                               ; preds = %54
  %60 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %56, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %61 = load atomic i32, i32* %60 monotonic, align 4
  %62 = and i32 %61, 2
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %64, label %76

64:                                               ; preds = %59
  %65 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %56, i64 0, i32 0
  %66 = load i32, i32* %65, align 4
  %67 = zext i32 %66 to i33
  %68 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %67, i33 1) #12
  %69 = extractvalue { i33, i1 } %68, 1
  %70 = extractvalue { i33, i1 } %68, 0
  %71 = icmp slt i33 %70, 0
  %72 = or i1 %69, %71
  br i1 %72, label %73, label %74, !prof !2

73:                                               ; preds = %64
  tail call void @llvm.trap() #12
  unreachable

74:                                               ; preds = %64
  %75 = trunc i33 %70 to i32
  store i32 %75, i32* %65, align 4
  br label %76

76:                                               ; preds = %54, %59, %74
  %77 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 7
  %78 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 7, i32 0, i32 0, i32 1
  %79 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 7, i32 0, i32 0, i32 2
  %80 = bitcast %"class.WTF::Vector"* %4 to i64*
  %81 = bitcast %"class.WTF::Vector"* %77 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %81, i8 0, i64 16, i1 false) #12
  %82 = load i64, i64* %80, align 8
  %83 = bitcast %"class.WTF::Vector"* %77 to i64*
  store atomic i64 0, i64* %80 monotonic, align 8
  store atomic i64 %82, i64* %83 monotonic, align 8
  %84 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %4, i64 0, i32 0, i32 0, i32 1
  %85 = load i32, i32* %78, align 4
  %86 = load i32, i32* %84, align 4
  store i32 %86, i32* %78, align 4
  store i32 %85, i32* %84, align 4
  %87 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %4, i64 0, i32 0, i32 0, i32 2
  %88 = load i32, i32* %79, align 4
  %89 = load i32, i32* %87, align 4
  store i32 %89, i32* %79, align 4
  store i32 %88, i32* %87, align 4
  %90 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 8, i32 0, i32 0
  store %"class.blink::NDEFMessage"* null, %"class.blink::NDEFMessage"** %90, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink10NDEFRecordC2EPKNS_16ExecutionContextERKN3WTF6StringE(%"class.blink::NDEFRecord"*, %"class.blink::ExecutionContext"*, %"class.WTF::String"* dereferenceable(8)) unnamed_addr #0 align 2 {
  %4 = alloca %"class.WTF::StringUTF8Adaptor", align 8
  %5 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  store i64* null, i64** %6, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink10NDEFRecordE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %7 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 1
  store i32 0, i32* %7, align 8
  %8 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 2
  tail call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* %8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0), i64 4) #12
  %9 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 3, i32 0, i32 0
  %10 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 5
  %11 = bitcast %"class.WTF::StringImpl"** %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 16, i1 false)
  tail call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* %10, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11, i64 0, i64 0), i64 5) #12
  %12 = tail call fastcc %"class.WTF::StringImpl"* @_ZN5blink12_GLOBAL__N_119getDocumentLanguageEPKNS_16ExecutionContextE(%"class.blink::ExecutionContext"* %1)
  %13 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 6, i32 0, i32 0
  store %"class.WTF::StringImpl"* %12, %"class.WTF::StringImpl"** %13, align 8
  %14 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 7
  %15 = bitcast %"class.WTF::StringUTF8Adaptor"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %15) #12, !noalias !8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 -86, i64 40, i1 false) #12, !noalias !8
  call void @_ZN3WTF17StringUTF8AdaptorC1ERKNS_6StringENS_18UTF8ConversionModeE(%"class.WTF::StringUTF8Adaptor"* nonnull %4, %"class.WTF::String"* dereferenceable(8) %2, i32 0) #12, !noalias !8
  %16 = bitcast %"class.WTF::Vector"* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 16, i1 false) #12, !alias.scope !8
  %17 = getelementptr inbounds %"class.WTF::StringUTF8Adaptor", %"class.WTF::StringUTF8Adaptor"* %4, i64 0, i32 1
  %18 = load i8*, i8** %17, align 8, !noalias !8
  %19 = getelementptr inbounds %"class.WTF::StringUTF8Adaptor", %"class.WTF::StringUTF8Adaptor"* %4, i64 0, i32 2
  %20 = load i32, i32* %19, align 8, !noalias !8
  call void @_ZN3WTF6VectorIhLj0ENS_18PartitionAllocatorEE6AppendIcEEvPKT_j(%"class.WTF::Vector"* %14, i8* %18, i32 %20) #12
  call void @_ZN3WTF17StringUTF8AdaptorD1Ev(%"class.WTF::StringUTF8Adaptor"* nonnull %4) #12
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %15) #12, !noalias !8
  %21 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 8, i32 0, i32 0
  store %"class.blink::NDEFMessage"* null, %"class.blink::NDEFMessage"** %21, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc %"class.WTF::StringImpl"* @_ZN5blink12_GLOBAL__N_119getDocumentLanguageEPKNS_16ExecutionContextE(%"class.blink::ExecutionContext"*) unnamed_addr #0 {
  %2 = alloca %"class.WTF::String", align 8
  %3 = icmp eq %"class.blink::ExecutionContext"* %0, null
  br i1 %3, label %76, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %"class.blink::ExecutionContext", %"class.blink::ExecutionContext"* %0, i64 -1, i32 8
  %6 = bitcast i32* %5 to %"class.blink::LocalDOMWindow"*
  %7 = tail call %"class.blink::Document"* @_ZNK5blink14LocalDOMWindow8documentEv(%"class.blink::LocalDOMWindow"* %6) #12
  %8 = getelementptr inbounds %"class.blink::Document", %"class.blink::Document"* %7, i64 0, i32 47, i32 0, i32 0
  %9 = load %"class.blink::Element"*, %"class.blink::Element"** %8, align 8
  %10 = icmp eq %"class.blink::Element"* %9, null
  br i1 %10, label %39, label %11

11:                                               ; preds = %4
  %12 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names9kLangAttrE, align 8
  %13 = tail call dereferenceable(8) %"class.WTF::AtomicString"* @_ZNK5blink7Element12getAttributeERKNS_13QualifiedNameE(%"class.blink::Element"* nonnull %9, %"class.blink::QualifiedName"* dereferenceable(8) %12) #12
  %14 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %13, i64 0, i32 0, i32 0, i32 0
  %15 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  %16 = icmp eq %"class.WTF::StringImpl"* %15, null
  br i1 %16, label %39, label %17

17:                                               ; preds = %11
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load atomic i32, i32* %18 monotonic, align 4
  %20 = and i32 %19, 2
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %34

22:                                               ; preds = %17
  %23 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 0, i32 0
  %24 = load i32, i32* %23, align 4
  %25 = zext i32 %24 to i33
  %26 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %25, i33 1) #12
  %27 = extractvalue { i33, i1 } %26, 1
  %28 = extractvalue { i33, i1 } %26, 0
  %29 = icmp slt i33 %28, 0
  %30 = or i1 %27, %29
  br i1 %30, label %31, label %32, !prof !2

31:                                               ; preds = %22
  tail call void @llvm.trap() #12
  unreachable

32:                                               ; preds = %22
  %33 = trunc i33 %28 to i32
  store i32 %33, i32* %23, align 4
  br label %34

34:                                               ; preds = %17, %32
  %35 = ptrtoint %"class.WTF::StringImpl"* %15 to i64
  %36 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 0, i32 1
  %37 = load i32, i32* %36, align 4
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %76

39:                                               ; preds = %11, %4, %34
  %40 = phi %"class.WTF::StringImpl"* [ %15, %34 ], [ null, %4 ], [ null, %11 ]
  %41 = phi i1 [ false, %34 ], [ true, %4 ], [ true, %11 ]
  %42 = bitcast %"class.WTF::String"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %42) #12
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.37, i64 0, i64 0), i64 2) #12
  %43 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %44 = bitcast %"class.WTF::String"* %2 to i64*
  %45 = load i64, i64* %44, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %43, align 8
  br i1 %41, label %75, label %46

46:                                               ; preds = %39
  %47 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %40, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %48 = load atomic i32, i32* %47 monotonic, align 4
  %49 = and i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %40, i64 0, i32 0
  %52 = load i32, i32* %51, align 4
  br i1 %50, label %53, label %55

53:                                               ; preds = %46
  %54 = add i32 %52, -1
  store i32 %54, i32* %51, align 4
  br label %55

55:                                               ; preds = %53, %46
  %56 = phi i32 [ %54, %53 ], [ %52, %46 ]
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %59

58:                                               ; preds = %55
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %40) #12
  br label %59

59:                                               ; preds = %55, %58
  %60 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %43, align 8
  %61 = icmp eq %"class.WTF::StringImpl"* %60, null
  br i1 %61, label %75, label %62

62:                                               ; preds = %59
  %63 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %64 = load atomic i32, i32* %63 monotonic, align 4
  %65 = and i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 0
  %68 = load i32, i32* %67, align 4
  br i1 %66, label %69, label %71

69:                                               ; preds = %62
  %70 = add i32 %68, -1
  store i32 %70, i32* %67, align 4
  br label %71

71:                                               ; preds = %69, %62
  %72 = phi i32 [ %70, %69 ], [ %68, %62 ]
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %75

74:                                               ; preds = %71
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %60) #12
  br label %75

75:                                               ; preds = %39, %59, %71, %74
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42) #12
  br label %76

76:                                               ; preds = %1, %75, %34
  %77 = phi i64 [ 0, %1 ], [ %45, %75 ], [ %35, %34 ]
  %78 = inttoptr i64 %77 to %"class.WTF::StringImpl"*
  ret %"class.WTF::StringImpl"* %78
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink10NDEFRecordC2ERKN3WTF6StringES4_NS1_6VectorIhLj0ENS1_18PartitionAllocatorEEE(%"class.blink::NDEFRecord"*, %"class.WTF::String"* nocapture readonly dereferenceable(8), %"class.WTF::String"* nocapture readonly dereferenceable(8), %"class.WTF::Vector"* nocapture) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  store i64* null, i64** %6, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink10NDEFRecordE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %7 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 1
  store i32 0, i32* %7, align 8
  %8 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 2
  tail call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* %8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i64 4) #12
  %9 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 3, i32 0, i32 0
  store %"class.WTF::StringImpl"* %10, %"class.WTF::StringImpl"** %11, align 8
  %12 = icmp eq %"class.WTF::StringImpl"* %10, null
  br i1 %12, label %30, label %13

13:                                               ; preds = %4
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load atomic i32, i32* %14 monotonic, align 4
  %16 = and i32 %15, 2
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %30

18:                                               ; preds = %13
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 0
  %20 = load i32, i32* %19, align 4
  %21 = zext i32 %20 to i33
  %22 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %21, i33 1) #12
  %23 = extractvalue { i33, i1 } %22, 1
  %24 = extractvalue { i33, i1 } %22, 0
  %25 = icmp slt i33 %24, 0
  %26 = or i1 %23, %25
  br i1 %26, label %27, label %28, !prof !2

27:                                               ; preds = %18
  tail call void @llvm.trap() #12
  unreachable

28:                                               ; preds = %18
  %29 = trunc i33 %24 to i32
  store i32 %29, i32* %19, align 4
  br label %30

30:                                               ; preds = %4, %13, %28
  %31 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %32 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %31, align 8
  %33 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 4, i32 0, i32 0
  store %"class.WTF::StringImpl"* %32, %"class.WTF::StringImpl"** %33, align 8
  %34 = icmp eq %"class.WTF::StringImpl"* %32, null
  br i1 %34, label %52, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %37 = load atomic i32, i32* %36 monotonic, align 4
  %38 = and i32 %37, 2
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %52

40:                                               ; preds = %35
  %41 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 0
  %42 = load i32, i32* %41, align 4
  %43 = zext i32 %42 to i33
  %44 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %43, i33 1) #12
  %45 = extractvalue { i33, i1 } %44, 1
  %46 = extractvalue { i33, i1 } %44, 0
  %47 = icmp slt i33 %46, 0
  %48 = or i1 %45, %47
  br i1 %48, label %49, label %50, !prof !2

49:                                               ; preds = %40
  tail call void @llvm.trap() #12
  unreachable

50:                                               ; preds = %40
  %51 = trunc i33 %46 to i32
  store i32 %51, i32* %41, align 4
  br label %52

52:                                               ; preds = %30, %35, %50
  %53 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 5, i32 0, i32 0
  %54 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 7
  %55 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 7, i32 0, i32 0, i32 1
  %56 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 7, i32 0, i32 0, i32 2
  %57 = bitcast %"class.WTF::Vector"* %3 to i64*
  %58 = bitcast %"class.WTF::StringImpl"** %53 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %58, i8 0, i64 32, i1 false)
  %59 = load i64, i64* %57, align 8
  %60 = bitcast %"class.WTF::Vector"* %54 to i64*
  store atomic i64 0, i64* %57 monotonic, align 8
  store atomic i64 %59, i64* %60 monotonic, align 8
  %61 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %3, i64 0, i32 0, i32 0, i32 1
  %62 = load i32, i32* %55, align 4
  %63 = load i32, i32* %61, align 4
  store i32 %63, i32* %55, align 4
  store i32 %62, i32* %61, align 4
  %64 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %3, i64 0, i32 0, i32 0, i32 2
  %65 = load i32, i32* %56, align 4
  %66 = load i32, i32* %64, align 4
  store i32 %66, i32* %56, align 4
  store i32 %65, i32* %64, align 4
  %67 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 8, i32 0, i32 0
  store %"class.blink::NDEFMessage"* null, %"class.blink::NDEFMessage"** %67, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink10NDEFRecordC2ERKN6device5mojom5blink10NDEFRecordE(%"class.blink::NDEFRecord"* nocapture, %"class.device::mojom::blink::NDEFRecord"* nocapture readonly dereferenceable(72)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  store i64* null, i64** %4, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink10NDEFRecordE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %5 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 1
  %6 = getelementptr inbounds %"class.device::mojom::blink::NDEFRecord", %"class.device::mojom::blink::NDEFRecord"* %1, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  store i32 %7, i32* %5, align 8
  %8 = getelementptr inbounds %"class.device::mojom::blink::NDEFRecord", %"class.device::mojom::blink::NDEFRecord"* %1, i64 0, i32 1, i32 0, i32 0
  %9 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %10 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* %9, %"class.WTF::StringImpl"** %10, align 8
  %11 = icmp eq %"class.WTF::StringImpl"* %9, null
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load atomic i32, i32* %13 monotonic, align 4
  %15 = and i32 %14, 2
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %29

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 0
  %19 = load i32, i32* %18, align 4
  %20 = zext i32 %19 to i33
  %21 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %20, i33 1) #12
  %22 = extractvalue { i33, i1 } %21, 1
  %23 = extractvalue { i33, i1 } %21, 0
  %24 = icmp slt i33 %23, 0
  %25 = or i1 %22, %24
  br i1 %25, label %26, label %27, !prof !2

26:                                               ; preds = %17
  tail call void @llvm.trap() #12
  unreachable

27:                                               ; preds = %17
  %28 = trunc i33 %23 to i32
  store i32 %28, i32* %18, align 4
  br label %29

29:                                               ; preds = %2, %12, %27
  %30 = getelementptr inbounds %"class.device::mojom::blink::NDEFRecord", %"class.device::mojom::blink::NDEFRecord"* %1, i64 0, i32 3, i32 0, i32 0
  %31 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %30, align 8
  %32 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 3, i32 0, i32 0
  store %"class.WTF::StringImpl"* %31, %"class.WTF::StringImpl"** %32, align 8
  %33 = icmp eq %"class.WTF::StringImpl"* %31, null
  br i1 %33, label %51, label %34

34:                                               ; preds = %29
  %35 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %31, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %36 = load atomic i32, i32* %35 monotonic, align 4
  %37 = and i32 %36, 2
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %51

39:                                               ; preds = %34
  %40 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %31, i64 0, i32 0
  %41 = load i32, i32* %40, align 4
  %42 = zext i32 %41 to i33
  %43 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %42, i33 1) #12
  %44 = extractvalue { i33, i1 } %43, 1
  %45 = extractvalue { i33, i1 } %43, 0
  %46 = icmp slt i33 %45, 0
  %47 = or i1 %44, %46
  br i1 %47, label %48, label %49, !prof !2

48:                                               ; preds = %39
  tail call void @llvm.trap() #12
  unreachable

49:                                               ; preds = %39
  %50 = trunc i33 %45 to i32
  store i32 %50, i32* %40, align 4
  br label %51

51:                                               ; preds = %29, %34, %49
  %52 = getelementptr inbounds %"class.device::mojom::blink::NDEFRecord", %"class.device::mojom::blink::NDEFRecord"* %1, i64 0, i32 2, i32 0, i32 0
  %53 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %52, align 8
  %54 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 4, i32 0, i32 0
  store %"class.WTF::StringImpl"* %53, %"class.WTF::StringImpl"** %54, align 8
  %55 = icmp eq %"class.WTF::StringImpl"* %53, null
  br i1 %55, label %73, label %56

56:                                               ; preds = %51
  %57 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %53, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %58 = load atomic i32, i32* %57 monotonic, align 4
  %59 = and i32 %58, 2
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %73

61:                                               ; preds = %56
  %62 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %53, i64 0, i32 0
  %63 = load i32, i32* %62, align 4
  %64 = zext i32 %63 to i33
  %65 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %64, i33 1) #12
  %66 = extractvalue { i33, i1 } %65, 1
  %67 = extractvalue { i33, i1 } %65, 0
  %68 = icmp slt i33 %67, 0
  %69 = or i1 %66, %68
  br i1 %69, label %70, label %71, !prof !2

70:                                               ; preds = %61
  tail call void @llvm.trap() #12
  unreachable

71:                                               ; preds = %61
  %72 = trunc i33 %67 to i32
  store i32 %72, i32* %62, align 4
  br label %73

73:                                               ; preds = %51, %56, %71
  %74 = getelementptr inbounds %"class.device::mojom::blink::NDEFRecord", %"class.device::mojom::blink::NDEFRecord"* %1, i64 0, i32 4, i32 0, i32 0
  %75 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %74, align 8
  %76 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 5, i32 0, i32 0
  store %"class.WTF::StringImpl"* %75, %"class.WTF::StringImpl"** %76, align 8
  %77 = icmp eq %"class.WTF::StringImpl"* %75, null
  br i1 %77, label %95, label %78

78:                                               ; preds = %73
  %79 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %75, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %80 = load atomic i32, i32* %79 monotonic, align 4
  %81 = and i32 %80, 2
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %95

83:                                               ; preds = %78
  %84 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %75, i64 0, i32 0
  %85 = load i32, i32* %84, align 4
  %86 = zext i32 %85 to i33
  %87 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %86, i33 1) #12
  %88 = extractvalue { i33, i1 } %87, 1
  %89 = extractvalue { i33, i1 } %87, 0
  %90 = icmp slt i33 %89, 0
  %91 = or i1 %88, %90
  br i1 %91, label %92, label %93, !prof !2

92:                                               ; preds = %83
  tail call void @llvm.trap() #12
  unreachable

93:                                               ; preds = %83
  %94 = trunc i33 %89 to i32
  store i32 %94, i32* %84, align 4
  br label %95

95:                                               ; preds = %73, %78, %93
  %96 = getelementptr inbounds %"class.device::mojom::blink::NDEFRecord", %"class.device::mojom::blink::NDEFRecord"* %1, i64 0, i32 5, i32 0, i32 0
  %97 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %96, align 8
  %98 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 6, i32 0, i32 0
  store %"class.WTF::StringImpl"* %97, %"class.WTF::StringImpl"** %98, align 8
  %99 = icmp eq %"class.WTF::StringImpl"* %97, null
  br i1 %99, label %117, label %100

100:                                              ; preds = %95
  %101 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %97, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %102 = load atomic i32, i32* %101 monotonic, align 4
  %103 = and i32 %102, 2
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %105, label %117

105:                                              ; preds = %100
  %106 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %97, i64 0, i32 0
  %107 = load i32, i32* %106, align 4
  %108 = zext i32 %107 to i33
  %109 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %108, i33 1) #12
  %110 = extractvalue { i33, i1 } %109, 1
  %111 = extractvalue { i33, i1 } %109, 0
  %112 = icmp slt i33 %111, 0
  %113 = or i1 %110, %112
  br i1 %113, label %114, label %115, !prof !2

114:                                              ; preds = %105
  tail call void @llvm.trap() #12
  unreachable

115:                                              ; preds = %105
  %116 = trunc i33 %111 to i32
  store i32 %116, i32* %106, align 4
  br label %117

117:                                              ; preds = %95, %100, %115
  %118 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 7
  %119 = getelementptr inbounds %"class.device::mojom::blink::NDEFRecord", %"class.device::mojom::blink::NDEFRecord"* %1, i64 0, i32 6, i32 0, i32 0, i32 1
  %120 = load i32, i32* %119, align 8
  %121 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %118, i64 0, i32 0, i32 0, i32 0
  store i8* null, i8** %121, align 8
  %122 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 7, i32 0, i32 0, i32 1
  store i32 0, i32* %122, align 8
  %123 = icmp eq i32 %120, 0
  br i1 %123, label %131, label %124

124:                                              ; preds = %117
  %125 = zext i32 %120 to i64
  %126 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64 %125) #12
  %127 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %126, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv, i64 0, i64 0)) #12
  %128 = ptrtoint i8* %127 to i64
  %129 = bitcast %"class.WTF::Vector"* %118 to i64*
  store atomic i64 %128, i64* %129 monotonic, align 8
  %130 = trunc i64 %126 to i32
  store i32 %130, i32* %122, align 8
  br label %131

131:                                              ; preds = %124, %117
  %132 = phi i8* [ null, %117 ], [ %127, %124 ]
  %133 = getelementptr inbounds %"class.device::mojom::blink::NDEFRecord", %"class.device::mojom::blink::NDEFRecord"* %1, i64 0, i32 6, i32 0, i32 0, i32 2
  %134 = load i32, i32* %133, align 4
  %135 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 7, i32 0, i32 0, i32 2
  store i32 %134, i32* %135, align 4
  %136 = getelementptr inbounds %"class.device::mojom::blink::NDEFRecord", %"class.device::mojom::blink::NDEFRecord"* %1, i64 0, i32 6, i32 0, i32 0, i32 0
  %137 = load i8*, i8** %136, align 8
  %138 = icmp ne i8* %132, null
  %139 = icmp ne i8* %137, null
  %140 = and i1 %138, %139
  br i1 %140, label %141, label %144, !prof !3

141:                                              ; preds = %131
  %142 = load i32, i32* %133, align 4
  %143 = zext i32 %142 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %132, i8* nonnull align 1 %137, i64 %143, i1 false) #12
  br label %144

144:                                              ; preds = %131, %141
  %145 = getelementptr inbounds %"class.device::mojom::blink::NDEFRecord", %"class.device::mojom::blink::NDEFRecord"* %1, i64 0, i32 7, i32 0, i32 0, i32 0, i32 0
  %146 = load %"class.device::mojom::blink::NDEFMessage"*, %"class.device::mojom::blink::NDEFMessage"** %145, align 8
  %147 = icmp eq %"class.device::mojom::blink::NDEFMessage"* %146, null
  br i1 %147, label %155, label %148

148:                                              ; preds = %144
  %149 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_15ScriptWrappableEEEPhm(i64 32) #12
  %150 = bitcast i8* %149 to %"class.blink::NDEFMessage"*
  tail call void @_ZN5blink11NDEFMessageC1ERKN6device5mojom5blink11NDEFMessageE(%"class.blink::NDEFMessage"* %150, %"class.device::mojom::blink::NDEFMessage"* nonnull dereferenceable(16) %146) #12
  %151 = getelementptr inbounds i8, i8* %149, i64 -4
  %152 = bitcast i8* %151 to i16*
  %153 = load atomic i16, i16* %152 monotonic, align 2
  %154 = or i16 %153, 1
  store atomic i16 %154, i16* %152 release, align 2
  br label %155

155:                                              ; preds = %144, %148
  %156 = phi %"class.blink::NDEFMessage"* [ %150, %148 ], [ null, %144 ]
  %157 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 8, i32 0, i32 0
  store %"class.blink::NDEFMessage"* %156, %"class.blink::NDEFMessage"** %157, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden dereferenceable(8) %"class.WTF::String"* @_ZNK5blink10NDEFRecord9mediaTypeEv(%"class.blink::NDEFRecord"* readnone) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 4
  ret %"class.WTF::String"* %2
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::DOMDataView"* @_ZNK5blink10NDEFRecord4dataEv(%"class.blink::NDEFRecord"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.WTF::StringView", align 8
  %3 = alloca %"class.WTF::StringView", align 8
  %4 = bitcast %"class.WTF::StringView"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #12
  %5 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 2, i32 0, i32 0
  %6 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %5, align 8
  %7 = icmp eq %"class.WTF::StringImpl"* %6, null
  br i1 %7, label %8, label %12

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %2, i64 0, i32 1
  store i8* null, i8** %9, align 8
  %10 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %11 = bitcast %"class.WTF::StringView"* %2 to i64*
  store i64 %10, i64* %11, align 8
  br label %20

12:                                               ; preds = %1
  %13 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %2, i64 0, i32 0
  store %"class.WTF::StringImpl"* %6, %"class.WTF::StringImpl"** %13, align 8
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 1
  %17 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %2, i64 0, i32 1
  %18 = bitcast i8** %17 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %16, %"class.WTF::StringImpl"** %18, align 8
  %19 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %20

20:                                               ; preds = %12, %8
  %21 = phi i64 [ %19, %12 ], [ %10, %8 ]
  %22 = phi i32 [ %15, %12 ], [ 0, %8 ]
  %23 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %2, i64 0, i32 2
  store i32 %22, i32* %23, align 8
  %24 = bitcast %"class.WTF::StringView"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %24) #12
  %25 = bitcast %"class.WTF::StringView"* %3 to i64*
  store i64 %21, i64* %25, align 8
  %26 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 1
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i8** %26, align 8
  %27 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 2
  store i32 5, i32* %27, align 8
  %28 = call zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* nonnull dereferenceable(24) %2, %"class.WTF::StringView"* nonnull dereferenceable(24) %3) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %24) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #12
  br i1 %28, label %40, label %29

29:                                               ; preds = %20
  %30 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 7, i32 0, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 7, i32 0, i32 0, i32 2
  %33 = load i32, i32* %32, align 4
  %34 = zext i32 %33 to i64
  %35 = call %"class.blink::DOMArrayBuffer"* @_ZN5blink14DOMArrayBuffer6CreateEPKvm(i8* %31, i64 %34)
  %36 = bitcast %"class.blink::DOMArrayBuffer"* %35 to %"class.blink::DOMArrayBufferBase"*
  %37 = load i32, i32* %32, align 4
  %38 = zext i32 %37 to i64
  %39 = call %"class.blink::DOMDataView"* @_ZN5blink11DOMDataView6CreateEPNS_18DOMArrayBufferBaseEmm(%"class.blink::DOMArrayBufferBase"* %36, i64 0, i64 %38) #12
  br label %40

40:                                               ; preds = %20, %29
  %41 = phi %"class.blink::DOMDataView"* [ %39, %29 ], [ null, %20 ]
  ret %"class.blink::DOMDataView"* %41
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::DOMArrayBuffer"* @_ZN5blink14DOMArrayBuffer6CreateEPKvm(i8*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.blink::ArrayBufferContents", align 8
  %4 = alloca %"class.blink::ArrayBufferContents", align 8
  %5 = alloca %"class.blink::ArrayBufferContents", align 8
  %6 = alloca %"class.blink::ArrayBufferContents", align 8
  %7 = bitcast %"class.blink::ArrayBufferContents"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #12
  %8 = getelementptr inbounds %"class.blink::ArrayBufferContents", %"class.blink::ArrayBufferContents"* %5, i64 0, i32 0, i32 0
  %9 = getelementptr inbounds %"class.blink::ArrayBufferContents", %"class.blink::ArrayBufferContents"* %5, i64 0, i32 0, i32 1
  %10 = bitcast %"class.blink::ArrayBufferContents"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 -86, i64 16, i1 false)
  call void @_ZN5blink19ArrayBufferContentsC1EmmNS0_11SharingTypeENS0_20InitializationPolicyE(%"class.blink::ArrayBufferContents"* nonnull %5, i64 %1, i64 1, i32 0, i32 1) #12
  %11 = load %"class.v8::BackingStore"*, %"class.v8::BackingStore"** %8, align 8
  %12 = icmp eq %"class.v8::BackingStore"* %11, null
  br i1 %12, label %16, label %13

13:                                               ; preds = %2
  %14 = call i8* @_ZNK2v812BackingStore4DataEv(%"class.v8::BackingStore"* nonnull %11) #12
  %15 = icmp eq i8* %14, null
  br i1 %15, label %16, label %17, !prof !2

16:                                               ; preds = %2, %13
  notail call fastcc void @_ZN12_GLOBAL__N_110OnNoMemoryEm(i64 %1) #14
  unreachable

17:                                               ; preds = %13
  %18 = load %"class.v8::BackingStore"*, %"class.v8::BackingStore"** %8, align 8
  %19 = icmp eq %"class.v8::BackingStore"* %18, null
  br i1 %19, label %22, label %20

20:                                               ; preds = %17
  %21 = call i8* @_ZNK2v812BackingStore4DataEv(%"class.v8::BackingStore"* nonnull %18) #12
  br label %22

22:                                               ; preds = %17, %20
  %23 = phi i8* [ %21, %20 ], [ null, %17 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %23, i8* align 1 %0, i64 %1, i1 false)
  %24 = bitcast %"class.blink::ArrayBufferContents"* %5 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = bitcast %"class.blink::ArrayBufferContents"* %6 to i64*
  store i64 %25, i64* %26, align 8
  %27 = getelementptr inbounds %"class.blink::ArrayBufferContents", %"class.blink::ArrayBufferContents"* %6, i64 0, i32 0, i32 1
  %28 = bitcast %"class.std::__1::__shared_weak_count"** %9 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = bitcast %"class.std::__1::__shared_weak_count"** %27 to i64*
  store i64 %29, i64* %30, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 0, i64 16, i1 false) #12
  %31 = bitcast %"class.blink::ArrayBufferContents"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %31) #12
  %32 = call i8* @_ZN5blink10ThreadHeap8AllocateINS_15ScriptWrappableEEEPhm(i64 40) #12
  %33 = bitcast i8* %32 to %"class.blink::DOMArrayBuffer"*
  %34 = bitcast %"class.blink::ArrayBufferContents"* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %34, i8 0, i64 16, i1 false) #12
  %35 = bitcast %"class.blink::ArrayBufferContents"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %35) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %31, i8 0, i64 16, i1 false) #12
  %36 = bitcast i8* %32 to i32 (...)***
  %37 = getelementptr inbounds i8, i8* %32, i64 8
  %38 = bitcast i8* %37 to i64**
  store i64* null, i64** %38, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink18DOMArrayBufferBaseE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %36, align 8
  %39 = getelementptr inbounds i8, i8* %32, i64 16
  %40 = bitcast i8* %39 to i64*
  store i64 %25, i64* %40, align 8
  %41 = getelementptr inbounds i8, i8* %32, i64 24
  %42 = bitcast i8* %41 to i64*
  store i64 %29, i64* %42, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %35, i8 0, i64 16, i1 false) #12
  %43 = getelementptr inbounds i8, i8* %32, i64 32
  store i8 0, i8* %43, align 8
  call void @_ZN5blink19ArrayBufferContentsD1Ev(%"class.blink::ArrayBufferContents"* nonnull %3) #12
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink14DOMArrayBufferE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %36, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %35) #12
  call void @_ZN5blink19ArrayBufferContentsD1Ev(%"class.blink::ArrayBufferContents"* nonnull %4) #12
  %44 = getelementptr inbounds i8, i8* %32, i64 -4
  %45 = bitcast i8* %44 to i16*
  %46 = load atomic i16, i16* %45 monotonic, align 2
  %47 = or i16 %46, 1
  store atomic i16 %47, i16* %45 release, align 2
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %31) #12
  call void @_ZN5blink19ArrayBufferContentsD1Ev(%"class.blink::ArrayBufferContents"* nonnull %6) #12
  call void @_ZN5blink19ArrayBufferContentsD1Ev(%"class.blink::ArrayBufferContents"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #12
  ret %"class.blink::DOMArrayBuffer"* %33
}

declare %"class.blink::DOMDataView"* @_ZN5blink11DOMDataView6CreateEPNS_18DOMArrayBufferBaseEmm(%"class.blink::DOMArrayBufferBase"*, i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink10NDEFRecord9toRecordsERNS_14ExceptionStateE(%"class.absl::optional.267"* noalias sret, %"class.blink::NDEFRecord"* nocapture readonly, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.WTF::StringView", align 8
  %5 = alloca %"class.WTF::StringView", align 8
  %6 = bitcast %"class.WTF::StringView"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #12
  %7 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %1, i64 0, i32 2, i32 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %9, label %10, label %14

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 1
  store i8* null, i8** %11, align 8
  %12 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %13 = bitcast %"class.WTF::StringView"* %4 to i64*
  store i64 %12, i64* %13, align 8
  br label %22

14:                                               ; preds = %3
  %15 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 0
  store %"class.WTF::StringImpl"* %8, %"class.WTF::StringImpl"** %15, align 8
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 1
  %19 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 1
  %20 = bitcast i8** %19 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %18, %"class.WTF::StringImpl"** %20, align 8
  %21 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %22

22:                                               ; preds = %14, %10
  %23 = phi i64 [ %21, %14 ], [ %12, %10 ]
  %24 = phi i32 [ %17, %14 ], [ 0, %10 ]
  %25 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 2
  store i32 %24, i32* %25, align 8
  %26 = bitcast %"class.WTF::StringView"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %26) #12
  %27 = bitcast %"class.WTF::StringView"* %5 to i64*
  store i64 %23, i64* %27, align 8
  %28 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 1
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.8, i64 0, i64 0), i8** %28, align 8
  %29 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 2
  store i32 12, i32* %29, align 8
  %30 = call zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* nonnull dereferenceable(24) %4, %"class.WTF::StringView"* nonnull dereferenceable(24) %5) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %26) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #12
  br i1 %30, label %38, label %31

31:                                               ; preds = %22
  %32 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %1, i64 0, i32 1
  %33 = load i32, i32* %32, align 8
  %34 = add i32 %33, -1
  %35 = icmp ult i32 %34, 2
  br i1 %35, label %38, label %36

36:                                               ; preds = %31
  call void @_ZN5blink14ExceptionState17ThrowDOMExceptionENS_16DOMExceptionCodeEPKc(%"class.blink::ExceptionState"* %2, i32 9, i8* getelementptr inbounds ([88 x i8], [88 x i8]* @.str.12, i64 0, i64 0)) #12
  %37 = getelementptr inbounds %"class.absl::optional.267", %"class.absl::optional.267"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %37, align 8
  br label %49

38:                                               ; preds = %22, %31
  %39 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %1, i64 0, i32 8, i32 0, i32 0
  %40 = load %"class.blink::NDEFMessage"*, %"class.blink::NDEFMessage"** %39, align 8
  %41 = icmp eq %"class.blink::NDEFMessage"* %40, null
  br i1 %41, label %42, label %44

42:                                               ; preds = %38
  %43 = getelementptr inbounds %"class.absl::optional.267", %"class.absl::optional.267"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %43, align 8
  br label %49

44:                                               ; preds = %38
  %45 = call dereferenceable(16) %"class.blink::HeapVector"* @_ZNK5blink11NDEFMessage7recordsEv(%"class.blink::NDEFMessage"* nonnull %40) #12
  %46 = getelementptr inbounds %"class.absl::optional.267", %"class.absl::optional.267"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 1, i8* %46, align 8
  %47 = getelementptr inbounds %"class.absl::optional.267", %"class.absl::optional.267"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %48 = getelementptr inbounds %"class.blink::HeapVector", %"class.blink::HeapVector"* %45, i64 0, i32 0
  call void @_ZN3WTF6VectorIN5blink6MemberINS1_10NDEFRecordEEELj0ENS1_13HeapAllocatorEEC2ERKS6_(%"class.WTF::Vector.3"* %47, %"class.WTF::Vector.3"* dereferenceable(16) %48) #12
  br label %49

49:                                               ; preds = %44, %42, %36
  ret void
}

declare void @_ZN5blink14ExceptionState17ThrowDOMExceptionENS_16DOMExceptionCodeEPKc(%"class.blink::ExceptionState"*, i32, i8*) local_unnamed_addr #2

declare dereferenceable(16) %"class.blink::HeapVector"* @_ZNK5blink11NDEFMessage7recordsEv(%"class.blink::NDEFMessage"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink10NDEFRecord5TraceEPNS_7VisitorE(%"class.blink::NDEFRecord"*, %"class.blink::Visitor"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 8
  %4 = bitcast %"class.blink::Member"* %3 to i64*
  %5 = load atomic i64, i64* %4 monotonic, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %13, label %7

7:                                                ; preds = %2
  %8 = inttoptr i64 %5 to i8*
  %9 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %10 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %9, align 8
  %11 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %10, i64 5
  %12 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %11, align 8
  tail call void %12(%"class.blink::Visitor"* %1, i8* nonnull %8, i8* nonnull %8, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_11NDEFMessageEE5TraceEPNS_7VisitorEPKv) #12
  br label %13

13:                                               ; preds = %2, %7
  %14 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 0
  tail call void @_ZNK5blink15ScriptWrappable5TraceEPNS_7VisitorE(%"class.blink::ScriptWrappable"* %14, %"class.blink::Visitor"* %1) #12
  ret void
}

declare void @_ZNK5blink15ScriptWrappable5TraceEPNS_7VisitorE(%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*) unnamed_addr #2

declare i8* @_ZNK5blink15ScriptWrappable18NameInHeapSnapshotEv(%"class.blink::ScriptWrappable"*) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10NDEFRecordD2Ev(%"class.blink::NDEFRecord"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink10NDEFRecordE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 7, i32 0, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %12, label %6, !prof !3

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 7, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %11, label %10, !prof !2

10:                                               ; preds = %6
  store i32 0, i32* %7, align 4
  br label %11

11:                                               ; preds = %10, %6
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %4) #12
  store i8* null, i8** %3, align 8
  br label %12

12:                                               ; preds = %1, %11
  %13 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 6, i32 0, i32 0
  %14 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %13, align 8
  %15 = icmp eq %"class.WTF::StringImpl"* %14, null
  br i1 %15, label %29, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %14, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = load atomic i32, i32* %17 monotonic, align 4
  %19 = and i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %14, i64 0, i32 0
  %22 = load i32, i32* %21, align 4
  br i1 %20, label %23, label %25

23:                                               ; preds = %16
  %24 = add i32 %22, -1
  store i32 %24, i32* %21, align 4
  br label %25

25:                                               ; preds = %23, %16
  %26 = phi i32 [ %24, %23 ], [ %22, %16 ]
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %29

28:                                               ; preds = %25
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %14) #12
  br label %29

29:                                               ; preds = %12, %25, %28
  %30 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 5, i32 0, i32 0
  %31 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %30, align 8
  %32 = icmp eq %"class.WTF::StringImpl"* %31, null
  br i1 %32, label %46, label %33

33:                                               ; preds = %29
  %34 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %31, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %35 = load atomic i32, i32* %34 monotonic, align 4
  %36 = and i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %31, i64 0, i32 0
  %39 = load i32, i32* %38, align 4
  br i1 %37, label %40, label %42

40:                                               ; preds = %33
  %41 = add i32 %39, -1
  store i32 %41, i32* %38, align 4
  br label %42

42:                                               ; preds = %40, %33
  %43 = phi i32 [ %41, %40 ], [ %39, %33 ]
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %46

45:                                               ; preds = %42
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %31) #12
  br label %46

46:                                               ; preds = %29, %42, %45
  %47 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 4, i32 0, i32 0
  %48 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %47, align 8
  %49 = icmp eq %"class.WTF::StringImpl"* %48, null
  br i1 %49, label %63, label %50

50:                                               ; preds = %46
  %51 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %48, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %52 = load atomic i32, i32* %51 monotonic, align 4
  %53 = and i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %48, i64 0, i32 0
  %56 = load i32, i32* %55, align 4
  br i1 %54, label %57, label %59

57:                                               ; preds = %50
  %58 = add i32 %56, -1
  store i32 %58, i32* %55, align 4
  br label %59

59:                                               ; preds = %57, %50
  %60 = phi i32 [ %58, %57 ], [ %56, %50 ]
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %63

62:                                               ; preds = %59
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %48) #12
  br label %63

63:                                               ; preds = %46, %59, %62
  %64 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 3, i32 0, i32 0
  %65 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %64, align 8
  %66 = icmp eq %"class.WTF::StringImpl"* %65, null
  br i1 %66, label %80, label %67

67:                                               ; preds = %63
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %65, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %69 = load atomic i32, i32* %68 monotonic, align 4
  %70 = and i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %65, i64 0, i32 0
  %73 = load i32, i32* %72, align 4
  br i1 %71, label %74, label %76

74:                                               ; preds = %67
  %75 = add i32 %73, -1
  store i32 %75, i32* %72, align 4
  br label %76

76:                                               ; preds = %74, %67
  %77 = phi i32 [ %75, %74 ], [ %73, %67 ]
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %80

79:                                               ; preds = %76
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %65) #12
  br label %80

80:                                               ; preds = %63, %76, %79
  %81 = getelementptr inbounds %"class.blink::NDEFRecord", %"class.blink::NDEFRecord"* %0, i64 0, i32 2, i32 0, i32 0
  %82 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %81, align 8
  %83 = icmp eq %"class.WTF::StringImpl"* %82, null
  br i1 %83, label %97, label %84

84:                                               ; preds = %80
  %85 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %82, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %86 = load atomic i32, i32* %85 monotonic, align 4
  %87 = and i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %82, i64 0, i32 0
  %90 = load i32, i32* %89, align 4
  br i1 %88, label %91, label %93

91:                                               ; preds = %84
  %92 = add i32 %90, -1
  store i32 %92, i32* %89, align 4
  br label %93

93:                                               ; preds = %91, %84
  %94 = phi i32 [ %92, %91 ], [ %90, %84 ]
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %96, label %97

96:                                               ; preds = %93
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %82) #12
  br label %97

97:                                               ; preds = %80, %93, %96
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10NDEFRecordD0Ev(%"class.blink::NDEFRecord"*) unnamed_addr #3 comdat align 2 {
  tail call void @_ZN5blink10NDEFRecordD2Ev(%"class.blink::NDEFRecord"* %0) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink15ScriptWrappable18HasPendingActivityEv(%"class.blink::ScriptWrappable"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink15ScriptWrappable17HasEventListenersEv(%"class.blink::ScriptWrappable"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.blink::WrapperTypeInfo"* @_ZNK5blink10NDEFRecord18GetWrapperTypeInfoEv(%"class.blink::NDEFRecord"*) unnamed_addr #0 comdat align 2 {
  %2 = load %"struct.blink::WrapperTypeInfo"*, %"struct.blink::WrapperTypeInfo"** @_ZN5blink10NDEFRecord18wrapper_type_info_E, align 8
  ret %"struct.blink::WrapperTypeInfo"* %2
}

declare %"class.v8::Value"* @_ZN5blink15ScriptWrappable4WrapEPNS_11ScriptStateE(%"class.blink::ScriptWrappable"*, %"class.blink::ScriptState"*) unnamed_addr #2

declare %"class.v8::Object"* @_ZN5blink15ScriptWrappable20AssociateWithWrapperEPN2v87IsolateEPKNS_15WrapperTypeInfoENS1_5LocalINS1_6ObjectEEE(%"class.blink::ScriptWrappable"*, %"class.v8::Isolate"*, %"struct.blink::WrapperTypeInfo"*, %"class.v8::Object"*) unnamed_addr #2

declare zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* dereferenceable(24), %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #2

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #5

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #6

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #7

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #2

declare dereferenceable(8) %"class.WTF::String"* @_ZNK5blink53StringOrArrayBufferOrArrayBufferViewOrNDEFMessageInit11GetAsStringEv(%"class.blink::StringOrArrayBufferOrArrayBufferViewOrNDEFMessageInit"*) local_unnamed_addr #2

declare void @_ZN3WTF17StringUTF8AdaptorC1ERKNS_6StringENS_18UTF8ConversionModeE(%"class.WTF::StringUTF8Adaptor"*, %"class.WTF::String"* dereferenceable(8), i32) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIhLj0ENS_18PartitionAllocatorEE6AppendIcEEvPKT_j(%"class.WTF::Vector"*, i8*, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, %2
  %10 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = icmp ugt i32 %9, %11
  br i1 %12, label %13, label %46

13:                                               ; preds = %3
  %14 = lshr i32 %11, 2
  %15 = add nuw i32 %11, 1
  %16 = add i32 %15, %14
  %17 = icmp ugt i32 %16, 4
  %18 = select i1 %17, i32 %16, i32 4
  %19 = icmp ugt i32 %18, %9
  %20 = select i1 %19, i32 %18, i32 %9
  %21 = icmp ult i32 %11, %20
  br i1 %21, label %22, label %46, !prof !3

22:                                               ; preds = %13
  %23 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = icmp eq i8* %24, null
  %26 = zext i32 %20 to i64
  %27 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64 %26) #12
  %28 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %27, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv, i64 0, i64 0)) #12
  %29 = ptrtoint i8* %28 to i64
  br i1 %25, label %30, label %33

30:                                               ; preds = %22
  %31 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %29, i64* %31 monotonic, align 8
  %32 = trunc i64 %27 to i32
  store i32 %32, i32* %10, align 8
  br label %46

33:                                               ; preds = %22
  %34 = load i8*, i8** %23, align 8
  %35 = icmp ne i8* %28, null
  %36 = icmp ne i8* %34, null
  %37 = and i1 %35, %36
  br i1 %37, label %38, label %42, !prof !3

38:                                               ; preds = %33
  %39 = load i32, i32* %7, align 4
  %40 = zext i32 %39 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %28, i8* nonnull align 1 %34, i64 %40, i1 false) #12
  %41 = load i8*, i8** %23, align 8
  br label %42

42:                                               ; preds = %38, %33
  %43 = phi i8* [ %34, %33 ], [ %41, %38 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %43) #12
  %44 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %29, i64* %44 monotonic, align 8
  %45 = trunc i64 %27 to i32
  store i32 %45, i32* %10, align 8
  br label %46

46:                                               ; preds = %42, %30, %13, %3
  %47 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %47) #12
  %48 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %48, align 8
  %49 = load i32, i32* %7, align 4
  %50 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %50)
  %51 = icmp ult i32 %9, %49
  br i1 %51, label %53, label %52

52:                                               ; preds = %46
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %50)
  store i8* null, i8** %48, align 8
  br label %62

53:                                               ; preds = %46
  %54 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #12
  %55 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %49) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %4, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.20, i64 0, i64 0), i8* %54, i8* %55) #12
  %56 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  %57 = load i8*, i8** %56, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %50)
  store i8* %57, i8** %48, align 8
  %58 = icmp eq i8* %57, null
  br i1 %58, label %62, label %59

59:                                               ; preds = %53
  %60 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %60) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.21, i64 0, i64 0), i32 1907, %"class.logging::CheckOpResult"* nonnull %5) #12
  %61 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %60) #12
  br label %62

62:                                               ; preds = %52, %53, %59
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %47) #12
  %63 = zext i32 %2 to i64
  %64 = getelementptr inbounds i8, i8* %1, i64 %63
  %65 = icmp eq i32 %2, 0
  br i1 %65, label %170, label %66

66:                                               ; preds = %62
  %67 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %68 = load i8*, i8** %67, align 8
  %69 = load i32, i32* %7, align 4
  %70 = zext i32 %69 to i64
  %71 = getelementptr inbounds i8, i8* %68, i64 %70
  %72 = icmp ult i32 %2, 32
  br i1 %72, label %160, label %73

73:                                               ; preds = %66
  %74 = add nuw nsw i64 %70, %63
  %75 = getelementptr i8, i8* %68, i64 %74
  %76 = icmp ult i8* %71, %64
  %77 = icmp ugt i8* %75, %1
  %78 = and i1 %76, %77
  br i1 %78, label %160, label %79

79:                                               ; preds = %73
  %80 = and i64 %63, 4294967264
  %81 = getelementptr i8, i8* %71, i64 %80
  %82 = getelementptr i8, i8* %1, i64 %80
  %83 = add nsw i64 %80, -32
  %84 = lshr exact i64 %83, 5
  %85 = add nuw nsw i64 %84, 1
  %86 = and i64 %85, 3
  %87 = icmp ult i64 %83, 96
  br i1 %87, label %139, label %88

88:                                               ; preds = %79
  %89 = sub nsw i64 %85, %86
  br label %90

90:                                               ; preds = %90, %88
  %91 = phi i64 [ 0, %88 ], [ %136, %90 ]
  %92 = phi i64 [ %89, %88 ], [ %137, %90 ]
  %93 = getelementptr i8, i8* %71, i64 %91
  %94 = getelementptr i8, i8* %1, i64 %91
  %95 = bitcast i8* %94 to <16 x i8>*
  %96 = load <16 x i8>, <16 x i8>* %95, align 1, !alias.scope !11
  %97 = getelementptr i8, i8* %94, i64 16
  %98 = bitcast i8* %97 to <16 x i8>*
  %99 = load <16 x i8>, <16 x i8>* %98, align 1, !alias.scope !11
  %100 = bitcast i8* %93 to <16 x i8>*
  store <16 x i8> %96, <16 x i8>* %100, align 1, !alias.scope !14, !noalias !11
  %101 = getelementptr i8, i8* %93, i64 16
  %102 = bitcast i8* %101 to <16 x i8>*
  store <16 x i8> %99, <16 x i8>* %102, align 1, !alias.scope !14, !noalias !11
  %103 = or i64 %91, 32
  %104 = getelementptr i8, i8* %71, i64 %103
  %105 = getelementptr i8, i8* %1, i64 %103
  %106 = bitcast i8* %105 to <16 x i8>*
  %107 = load <16 x i8>, <16 x i8>* %106, align 1, !alias.scope !11
  %108 = getelementptr i8, i8* %105, i64 16
  %109 = bitcast i8* %108 to <16 x i8>*
  %110 = load <16 x i8>, <16 x i8>* %109, align 1, !alias.scope !11
  %111 = bitcast i8* %104 to <16 x i8>*
  store <16 x i8> %107, <16 x i8>* %111, align 1, !alias.scope !14, !noalias !11
  %112 = getelementptr i8, i8* %104, i64 16
  %113 = bitcast i8* %112 to <16 x i8>*
  store <16 x i8> %110, <16 x i8>* %113, align 1, !alias.scope !14, !noalias !11
  %114 = or i64 %91, 64
  %115 = getelementptr i8, i8* %71, i64 %114
  %116 = getelementptr i8, i8* %1, i64 %114
  %117 = bitcast i8* %116 to <16 x i8>*
  %118 = load <16 x i8>, <16 x i8>* %117, align 1, !alias.scope !11
  %119 = getelementptr i8, i8* %116, i64 16
  %120 = bitcast i8* %119 to <16 x i8>*
  %121 = load <16 x i8>, <16 x i8>* %120, align 1, !alias.scope !11
  %122 = bitcast i8* %115 to <16 x i8>*
  store <16 x i8> %118, <16 x i8>* %122, align 1, !alias.scope !14, !noalias !11
  %123 = getelementptr i8, i8* %115, i64 16
  %124 = bitcast i8* %123 to <16 x i8>*
  store <16 x i8> %121, <16 x i8>* %124, align 1, !alias.scope !14, !noalias !11
  %125 = or i64 %91, 96
  %126 = getelementptr i8, i8* %71, i64 %125
  %127 = getelementptr i8, i8* %1, i64 %125
  %128 = bitcast i8* %127 to <16 x i8>*
  %129 = load <16 x i8>, <16 x i8>* %128, align 1, !alias.scope !11
  %130 = getelementptr i8, i8* %127, i64 16
  %131 = bitcast i8* %130 to <16 x i8>*
  %132 = load <16 x i8>, <16 x i8>* %131, align 1, !alias.scope !11
  %133 = bitcast i8* %126 to <16 x i8>*
  store <16 x i8> %129, <16 x i8>* %133, align 1, !alias.scope !14, !noalias !11
  %134 = getelementptr i8, i8* %126, i64 16
  %135 = bitcast i8* %134 to <16 x i8>*
  store <16 x i8> %132, <16 x i8>* %135, align 1, !alias.scope !14, !noalias !11
  %136 = add i64 %91, 128
  %137 = add i64 %92, -4
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %139, label %90, !llvm.loop !16

139:                                              ; preds = %90, %79
  %140 = phi i64 [ 0, %79 ], [ %136, %90 ]
  %141 = icmp eq i64 %86, 0
  br i1 %141, label %158, label %142

142:                                              ; preds = %139, %142
  %143 = phi i64 [ %155, %142 ], [ %140, %139 ]
  %144 = phi i64 [ %156, %142 ], [ %86, %139 ]
  %145 = getelementptr i8, i8* %71, i64 %143
  %146 = getelementptr i8, i8* %1, i64 %143
  %147 = bitcast i8* %146 to <16 x i8>*
  %148 = load <16 x i8>, <16 x i8>* %147, align 1, !alias.scope !11
  %149 = getelementptr i8, i8* %146, i64 16
  %150 = bitcast i8* %149 to <16 x i8>*
  %151 = load <16 x i8>, <16 x i8>* %150, align 1, !alias.scope !11
  %152 = bitcast i8* %145 to <16 x i8>*
  store <16 x i8> %148, <16 x i8>* %152, align 1, !alias.scope !14, !noalias !11
  %153 = getelementptr i8, i8* %145, i64 16
  %154 = bitcast i8* %153 to <16 x i8>*
  store <16 x i8> %151, <16 x i8>* %154, align 1, !alias.scope !14, !noalias !11
  %155 = add i64 %143, 32
  %156 = add i64 %144, -1
  %157 = icmp eq i64 %156, 0
  br i1 %157, label %158, label %142, !llvm.loop !18

158:                                              ; preds = %142, %139
  %159 = icmp eq i64 %80, %63
  br i1 %159, label %170, label %160

160:                                              ; preds = %158, %73, %66
  %161 = phi i8* [ %71, %73 ], [ %71, %66 ], [ %81, %158 ]
  %162 = phi i8* [ %1, %73 ], [ %1, %66 ], [ %82, %158 ]
  br label %163

163:                                              ; preds = %160, %163
  %164 = phi i8* [ %167, %163 ], [ %161, %160 ]
  %165 = phi i8* [ %168, %163 ], [ %162, %160 ]
  %166 = load i8, i8* %165, align 1
  store i8 %166, i8* %164, align 1
  %167 = getelementptr inbounds i8, i8* %164, i64 1
  %168 = getelementptr inbounds i8, i8* %165, i64 1
  %169 = icmp eq i8* %168, %64
  br i1 %169, label %170, label %163, !llvm.loop !20

170:                                              ; preds = %163, %158, %62
  store i32 %9, i32* %7, align 4
  ret void
}

; Function Attrs: nounwind
declare void @_ZN3WTF17StringUTF8AdaptorD1Ev(%"class.WTF::StringUTF8Adaptor"*) unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZN5blink12_GLOBAL__N_122GetBytesOfBufferSourceERKNS_53StringOrArrayBufferOrArrayBufferViewOrNDEFMessageInitEPN3WTF6VectorIhLj0ENS4_18PartitionAllocatorEEERNS_14ExceptionStateE(%"class.blink::StringOrArrayBufferOrArrayBufferViewOrNDEFMessageInit"* dereferenceable(40), %"class.WTF::Vector"*, %"class.blink::ExceptionState"* dereferenceable(72)) unnamed_addr #0 {
  %4 = alloca %"class.blink::NotShared", align 8
  %5 = getelementptr inbounds %"class.blink::StringOrArrayBufferOrArrayBufferViewOrNDEFMessageInit", %"class.blink::StringOrArrayBufferOrArrayBufferViewOrNDEFMessageInit"* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  switch i32 %6, label %46 [
    i32 1, label %7
    i32 2, label %18
  ]

7:                                                ; preds = %3
  %8 = tail call %"class.blink::DOMArrayBuffer"* @_ZNK5blink53StringOrArrayBufferOrArrayBufferViewOrNDEFMessageInit16GetAsArrayBufferEv(%"class.blink::StringOrArrayBufferOrArrayBufferViewOrNDEFMessageInit"* %0) #12
  %9 = getelementptr inbounds %"class.blink::DOMArrayBuffer", %"class.blink::DOMArrayBuffer"* %8, i64 0, i32 0, i32 1, i32 0, i32 0
  %10 = load %"class.v8::BackingStore"*, %"class.v8::BackingStore"** %9, align 8
  %11 = icmp eq %"class.v8::BackingStore"* %10, null
  br i1 %11, label %43, label %12

12:                                               ; preds = %7
  %13 = tail call i8* @_ZNK2v812BackingStore4DataEv(%"class.v8::BackingStore"* nonnull %10) #12
  %14 = load %"class.v8::BackingStore"*, %"class.v8::BackingStore"** %9, align 8
  %15 = icmp eq %"class.v8::BackingStore"* %14, null
  br i1 %15, label %43, label %16

16:                                               ; preds = %12
  %17 = tail call i64 @_ZNK2v812BackingStore10ByteLengthEv(%"class.v8::BackingStore"* nonnull %14) #12
  br label %37

18:                                               ; preds = %3
  %19 = bitcast %"class.blink::NotShared"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #12
  call void @_ZNK5blink53StringOrArrayBufferOrArrayBufferViewOrNDEFMessageInit20GetAsArrayBufferViewEv(%"class.blink::NotShared"* nonnull sret %4, %"class.blink::StringOrArrayBufferOrArrayBufferViewOrNDEFMessageInit"* %0) #12
  %20 = getelementptr inbounds %"class.blink::NotShared", %"class.blink::NotShared"* %4, i64 0, i32 0, i32 0, i32 0
  %21 = load %"class.blink::DOMArrayBufferView"*, %"class.blink::DOMArrayBufferView"** %20, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #12
  %22 = getelementptr inbounds %"class.blink::DOMArrayBufferView", %"class.blink::DOMArrayBufferView"* %21, i64 0, i32 3, i32 0, i32 0
  %23 = load %"class.blink::DOMArrayBufferBase"*, %"class.blink::DOMArrayBufferBase"** %22, align 8
  %24 = getelementptr inbounds %"class.blink::DOMArrayBufferBase", %"class.blink::DOMArrayBufferBase"* %23, i64 0, i32 2
  %25 = load i8, i8* %24, align 8, !range !21
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %27, label %30

27:                                               ; preds = %18
  %28 = getelementptr inbounds %"class.blink::DOMArrayBufferView", %"class.blink::DOMArrayBufferView"* %21, i64 0, i32 1
  %29 = load i8*, i8** %28, align 8
  br label %30

30:                                               ; preds = %18, %27
  %31 = phi i8* [ %29, %27 ], [ null, %18 ]
  %32 = bitcast %"class.blink::DOMArrayBufferView"* %21 to i64 (%"class.blink::DOMArrayBufferView"*)***
  %33 = load i64 (%"class.blink::DOMArrayBufferView"*)**, i64 (%"class.blink::DOMArrayBufferView"*)*** %32, align 8
  %34 = getelementptr inbounds i64 (%"class.blink::DOMArrayBufferView"*)*, i64 (%"class.blink::DOMArrayBufferView"*)** %33, i64 10
  %35 = load i64 (%"class.blink::DOMArrayBufferView"*)*, i64 (%"class.blink::DOMArrayBufferView"*)** %34, align 8
  %36 = call i64 %35(%"class.blink::DOMArrayBufferView"* %21) #12
  br label %37

37:                                               ; preds = %16, %30
  %38 = phi i64 [ %36, %30 ], [ %17, %16 ]
  %39 = phi i8* [ %31, %30 ], [ %13, %16 ]
  %40 = icmp ugt i64 %38, 4294967295
  %41 = trunc i64 %38 to i32
  br i1 %40, label %42, label %43, !prof !2

42:                                               ; preds = %37
  call void @_ZN5blink14ExceptionState15ThrowRangeErrorEPKc(%"class.blink::ExceptionState"* %2, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.25, i64 0, i64 0)) #12
  br label %46

43:                                               ; preds = %7, %12, %37
  %44 = phi i32 [ %41, %37 ], [ 0, %12 ], [ 0, %7 ]
  %45 = phi i8* [ %39, %37 ], [ %13, %12 ], [ null, %7 ]
  call void @_ZN3WTF6VectorIhLj0ENS_18PartitionAllocatorEE6AppendIhEEvPKT_j(%"class.WTF::Vector"* %1, i8* %45, i32 %44)
  br label %46

46:                                               ; preds = %3, %42, %43
  %47 = phi i1 [ false, %42 ], [ true, %43 ], [ false, %3 ]
  ret i1 %47
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #12
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 2145386496
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #12
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 2145386496) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.23, i64 0, i64 0), i8* %11, i8* %12) #12
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.24, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #12
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #12
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #12
  %20 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %0) #12
  ret i64 %20
}

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #2

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #2

declare %"class.blink::DOMArrayBuffer"* @_ZNK5blink53StringOrArrayBufferOrArrayBufferViewOrNDEFMessageInit16GetAsArrayBufferEv(%"class.blink::StringOrArrayBufferOrArrayBufferViewOrNDEFMessageInit"*) local_unnamed_addr #2

declare void @_ZNK5blink53StringOrArrayBufferOrArrayBufferViewOrNDEFMessageInit20GetAsArrayBufferViewEv(%"class.blink::NotShared"* sret, %"class.blink::StringOrArrayBufferOrArrayBufferViewOrNDEFMessageInit"*) local_unnamed_addr #2

declare void @_ZN5blink14ExceptionState15ThrowRangeErrorEPKc(%"class.blink::ExceptionState"*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIhLj0ENS_18PartitionAllocatorEE6AppendIhEEvPKT_j(%"class.WTF::Vector"*, i8*, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, %2
  %10 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = icmp ugt i32 %9, %11
  br i1 %12, label %13, label %87

13:                                               ; preds = %3
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = icmp ugt i8* %15, %1
  br i1 %16, label %21, label %17

17:                                               ; preds = %13
  %18 = zext i32 %8 to i64
  %19 = getelementptr inbounds i8, i8* %15, i64 %18
  %20 = icmp ugt i8* %19, %1
  br i1 %20, label %52, label %21

21:                                               ; preds = %17, %13
  %22 = lshr i32 %11, 2
  %23 = add nuw i32 %11, 1
  %24 = add i32 %23, %22
  %25 = icmp ugt i32 %24, 4
  %26 = select i1 %25, i32 %24, i32 4
  %27 = icmp ugt i32 %26, %9
  %28 = select i1 %27, i32 %26, i32 %9
  %29 = icmp ult i32 %11, %28
  br i1 %29, label %30, label %87, !prof !3

30:                                               ; preds = %21
  %31 = icmp eq i8* %15, null
  %32 = zext i32 %28 to i64
  %33 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64 %32) #12
  %34 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %33, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv, i64 0, i64 0)) #12
  %35 = ptrtoint i8* %34 to i64
  br i1 %31, label %36, label %39

36:                                               ; preds = %30
  %37 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %35, i64* %37 monotonic, align 8
  %38 = trunc i64 %33 to i32
  store i32 %38, i32* %10, align 8
  br label %87

39:                                               ; preds = %30
  %40 = load i8*, i8** %14, align 8
  %41 = icmp ne i8* %34, null
  %42 = icmp ne i8* %40, null
  %43 = and i1 %41, %42
  br i1 %43, label %44, label %48, !prof !3

44:                                               ; preds = %39
  %45 = load i32, i32* %7, align 4
  %46 = zext i32 %45 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %34, i8* nonnull align 1 %40, i64 %46, i1 false) #12
  %47 = load i8*, i8** %14, align 8
  br label %48

48:                                               ; preds = %44, %39
  %49 = phi i8* [ %40, %39 ], [ %47, %44 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %49) #12
  %50 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %35, i64* %50 monotonic, align 8
  %51 = trunc i64 %33 to i32
  store i32 %51, i32* %10, align 8
  br label %87

52:                                               ; preds = %17
  %53 = ptrtoint i8* %1 to i64
  %54 = ptrtoint i8* %15 to i64
  %55 = sub i64 %53, %54
  %56 = lshr i32 %11, 2
  %57 = add nuw i32 %11, 1
  %58 = add i32 %57, %56
  %59 = icmp ugt i32 %58, 4
  %60 = select i1 %59, i32 %58, i32 4
  %61 = icmp ugt i32 %60, %9
  %62 = select i1 %61, i32 %60, i32 %9
  %63 = icmp ult i32 %11, %62
  br i1 %63, label %64, label %84, !prof !3

64:                                               ; preds = %52
  %65 = icmp eq i8* %15, null
  %66 = zext i32 %62 to i64
  %67 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64 %66) #12
  %68 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %67, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv, i64 0, i64 0)) #12
  %69 = ptrtoint i8* %68 to i64
  br i1 %65, label %81, label %70

70:                                               ; preds = %64
  %71 = load i8*, i8** %14, align 8
  %72 = icmp ne i8* %68, null
  %73 = icmp ne i8* %71, null
  %74 = and i1 %72, %73
  br i1 %74, label %75, label %79, !prof !3

75:                                               ; preds = %70
  %76 = load i32, i32* %7, align 4
  %77 = zext i32 %76 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %68, i8* nonnull align 1 %71, i64 %77, i1 false) #12
  %78 = load i8*, i8** %14, align 8
  br label %79

79:                                               ; preds = %75, %70
  %80 = phi i8* [ %71, %70 ], [ %78, %75 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %80) #12
  br label %81

81:                                               ; preds = %64, %79
  %82 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %69, i64* %82 monotonic, align 8
  %83 = trunc i64 %67 to i32
  store i32 %83, i32* %10, align 8
  br label %84

84:                                               ; preds = %81, %52
  %85 = phi i8* [ %15, %52 ], [ %68, %81 ]
  %86 = getelementptr inbounds i8, i8* %85, i64 %55
  br label %87

87:                                               ; preds = %84, %21, %36, %48, %3
  %88 = phi i8* [ %1, %3 ], [ %86, %84 ], [ %1, %21 ], [ %1, %36 ], [ %1, %48 ]
  %89 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %89) #12
  %90 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %90, align 8
  %91 = load i32, i32* %7, align 4
  %92 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %92)
  %93 = icmp ult i32 %9, %91
  br i1 %93, label %95, label %94

94:                                               ; preds = %87
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %92)
  store i8* null, i8** %90, align 8
  br label %104

95:                                               ; preds = %87
  %96 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #12
  %97 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %91) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %4, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.20, i64 0, i64 0), i8* %96, i8* %97) #12
  %98 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  %99 = load i8*, i8** %98, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %92)
  store i8* %99, i8** %90, align 8
  %100 = icmp eq i8* %99, null
  br i1 %100, label %104, label %101

101:                                              ; preds = %95
  %102 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %102) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.21, i64 0, i64 0), i32 1907, %"class.logging::CheckOpResult"* nonnull %5) #12
  %103 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %102) #12
  br label %104

104:                                              ; preds = %94, %95, %101
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %89) #12
  %105 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %106 = load i8*, i8** %105, align 8
  %107 = load i32, i32* %7, align 4
  %108 = zext i32 %107 to i64
  %109 = getelementptr inbounds i8, i8* %106, i64 %108
  %110 = icmp ne i8* %109, null
  %111 = icmp ne i8* %88, null
  %112 = and i1 %111, %110
  br i1 %112, label %113, label %115, !prof !3

113:                                              ; preds = %104
  %114 = zext i32 %2 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %109, i8* nonnull align 1 %88, i64 %114, i1 false) #12
  br label %115

115:                                              ; preds = %104, %113
  store i32 %9, i32* %7, align 4
  ret void
}

declare i8* @_ZNK2v812BackingStore4DataEv(%"class.v8::BackingStore"*) local_unnamed_addr #2

declare i64 @_ZNK2v812BackingStore10ByteLengthEv(%"class.v8::BackingStore"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink10ThreadHeap8AllocateINS_15ScriptWrappableEEEPhm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %3 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %2, i64 0, i32 1
  %4 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %3) #12
  %5 = icmp eq i8* %4, null
  br i1 %5, label %6, label %8, !prof !2

6:                                                ; preds = %1
  %7 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #12
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %3, i8* %7) #12
  br label %8

8:                                                ; preds = %1, %6
  %9 = phi i8* [ %7, %6 ], [ %4, %1 ]
  %10 = bitcast i8* %9 to %"class.blink::ThreadState"**
  %11 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %10, align 8
  %12 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %11, i64 0, i32 0, i32 0, i32 0, i32 0
  %13 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %12, align 8
  %14 = icmp ult i64 %0, 64
  %15 = icmp ugt i64 %0, 31
  %16 = zext i1 %15 to i32
  %17 = icmp ult i64 %0, 128
  %18 = select i1 %17, i32 2, i32 3
  %19 = select i1 %14, i32 %16, i32 %18
  %20 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %25

22:                                               ; preds = %8
  %23 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %24 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %23, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #12
  br label %25

25:                                               ; preds = %8, %22
  %26 = phi i32 [ %20, %8 ], [ %24, %22 ]
  %27 = tail call i8* @_ZN5blink10ThreadHeap20AllocateOnArenaIndexEPNS_11ThreadStateEmijPKc(%"class.blink::ThreadHeap"* %13, %"class.blink::ThreadState"* %11, i64 %0, i32 %19, i32 %26, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink15ScriptWrappableEEEPKcv, i64 0, i64 0))
  ret i8* %27
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink10ThreadHeap20AllocateOnArenaIndexEPNS_11ThreadStateEmijPKc(%"class.blink::ThreadHeap"*, %"class.blink::ThreadState"*, i64, i32, i32, i8*) local_unnamed_addr #3 comdat align 2 {
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckOpResult", align 8
  %9 = alloca %"class.logging::CheckError", align 8
  %10 = sext i32 %3 to i64
  %11 = getelementptr inbounds %"class.blink::ThreadHeap", %"class.blink::ThreadHeap"* %0, i64 0, i32 19, i64 %10
  %12 = bitcast %"class.blink::BaseArena"** %11 to %"class.blink::NormalPageArena"**
  %13 = load %"class.blink::NormalPageArena"*, %"class.blink::NormalPageArena"** %12, align 8
  %14 = bitcast %"class.logging::CheckOpResult"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #12
  %15 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %8, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %15, align 8
  %16 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #12
  %17 = icmp ult i64 %2, -8
  br i1 %17, label %18, label %19

18:                                               ; preds = %6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #12
  store i8* null, i8** %15, align 8
  br label %29

19:                                               ; preds = %6
  %20 = add nsw i64 %2, 8
  %21 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %20) #12
  %22 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %2) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %7, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.26, i64 0, i64 0), i8* %21, i8* %22) #12
  %23 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  %24 = load i8*, i8** %23, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #12
  store i8* %24, i8** %15, align 8
  %25 = icmp eq i8* %24, null
  br i1 %25, label %29, label %26

26:                                               ; preds = %19
  %27 = bitcast %"class.logging::CheckError"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %9, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.27, i64 0, i64 0), i32 246, %"class.logging::CheckOpResult"* nonnull %8) #12
  %28 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %9) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %9) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27) #12
  br label %29

29:                                               ; preds = %18, %19, %26
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #12
  %30 = add i64 %2, 15
  %31 = and i64 %30, -8
  %32 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %13, i64 0, i32 4
  %33 = load i64, i64* %32, align 8
  %34 = icmp ult i64 %33, %31
  br i1 %34, label %67, label %35, !prof !2

35:                                               ; preds = %29
  %36 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %13, i64 0, i32 3
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 %31
  store i8* %38, i8** %36, align 8
  %39 = sub i64 %33, %31
  store i64 %39, i64* %32, align 8
  %40 = bitcast i8* %37 to i32*
  store i32 0, i32* %40, align 4
  %41 = getelementptr inbounds i8, i8* %37, i64 4
  %42 = bitcast i8* %41 to i16*
  %43 = trunc i32 %4 to i16
  %44 = shl i16 %43, 2
  store atomic i16 %44, i16* %42 monotonic, align 2
  %45 = lshr exact i64 %31, 1
  %46 = trunc i64 %45 to i16
  %47 = getelementptr inbounds i8, i8* %37, i64 6
  %48 = bitcast i8* %47 to i16*
  store i16 %46, i16* %48, align 2
  %49 = ptrtoint i8* %37 to i64
  %50 = and i64 %49, -131072
  %51 = inttoptr i64 %50 to i8*
  %52 = getelementptr inbounds i8, i8* %51, i64 4400
  %53 = bitcast i8* %52 to %"class.blink::PlatformAwareObjectStartBitmap"*
  %54 = bitcast i8* %52 to i64*
  %55 = load i64, i64* %54, align 16
  %56 = sub i64 %49, %55
  %57 = lshr i64 %56, 3
  %58 = lshr i64 %56, 6
  %59 = getelementptr inbounds %"class.blink::PlatformAwareObjectStartBitmap", %"class.blink::PlatformAwareObjectStartBitmap"* %53, i64 0, i32 0, i32 1, i64 %58
  %60 = load i8, i8* %59, align 1
  %61 = trunc i64 %57 to i32
  %62 = and i32 %61, 7
  %63 = shl i32 1, %62
  %64 = trunc i32 %63 to i8
  %65 = or i8 %60, %64
  store atomic i8 %65, i8* %59 release, align 1
  %66 = getelementptr inbounds i8, i8* %37, i64 8
  br label %70

67:                                               ; preds = %29
  %68 = zext i32 %4 to i64
  %69 = call i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"* %13, i64 %31, i64 %68) #12
  br label %70

70:                                               ; preds = %35, %67
  %71 = phi i8* [ %66, %35 ], [ %69, %67 ]
  ret i8* %71
}

declare i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64, i8*) local_unnamed_addr #2

declare i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"*) local_unnamed_addr #2

declare void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"*, i8*) local_unnamed_addr #2

declare i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"*, i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_15ScriptWrappableEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::ScriptWrappable"*
  %4 = bitcast i8* %1 to void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)***
  %5 = load void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)**, void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)*, void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)** %5, i64 5
  %7 = load void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)*, void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)** %6, align 8
  tail call void %7(%"class.blink::ScriptWrappable"* %3, %"class.blink::Visitor"* %0) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8internal14FinalizerTraitINS_15ScriptWrappableEE8FinalizeEPv(i8*) #0 comdat align 2 {
  %2 = bitcast i8* %0 to %"class.blink::ScriptWrappable"*
  %3 = bitcast i8* %0 to void (%"class.blink::ScriptWrappable"*)***
  %4 = load void (%"class.blink::ScriptWrappable"*)**, void (%"class.blink::ScriptWrappable"*)*** %3, align 8
  %5 = getelementptr inbounds void (%"class.blink::ScriptWrappable"*)*, void (%"class.blink::ScriptWrappable"*)** %4, i64 1
  %6 = load void (%"class.blink::ScriptWrappable"*)*, void (%"class.blink::ScriptWrappable"*)** %5, align 8
  tail call void %6(%"class.blink::ScriptWrappable"* %2) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_15ScriptWrappableEE7GetNameEPKv(i8*) #0 comdat align 2 {
  %2 = bitcast i8* %0 to %"class.blink::NameClient"*
  %3 = bitcast i8* %0 to i8* (%"class.blink::NameClient"*)***
  %4 = load i8* (%"class.blink::NameClient"*)**, i8* (%"class.blink::NameClient"*)*** %3, align 8
  %5 = load i8* (%"class.blink::NameClient"*)*, i8* (%"class.blink::NameClient"*)** %4, align 8
  %6 = tail call i8* %5(%"class.blink::NameClient"* %2) #12
  %7 = insertvalue { i8*, i8 } undef, i8* %6, 0
  %8 = insertvalue { i8*, i8 } %7, i8 0, 1
  ret { i8*, i8 } %8
}

declare i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"*, %"struct.blink::GCInfo"*, %"struct.std::__1::atomic"*) local_unnamed_addr #2

declare dereferenceable(112) %"class.blink::KURL"* @_ZN5blink7NullURLEv() local_unnamed_addr #2

declare void @_ZN5blink4KURLC1ERKS0_RKN3WTF6StringE(%"class.blink::KURL"*, %"class.blink::KURL"* dereferenceable(112), %"class.WTF::String"* dereferenceable(8)) unnamed_addr #2

declare zeroext i1 @_ZNK5blink4KURL7IsValidEv(%"class.blink::KURL"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN5blink4KURLD1Ev(%"class.blink::KURL"*) unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::NDEFRecord"* @_ZN5blink25MakeGarbageCollectedTraitINS_10NDEFRecordEE4CallIJN6device5mojom22NDEFRecordTypeCategoryERKN3WTF6StringESA_NS7_6VectorIhLj0ENS7_18PartitionAllocatorEEEEEEPS1_DpOT_(i32* dereferenceable(4), %"class.WTF::String"* dereferenceable(8), %"class.WTF::String"* dereferenceable(8), %"class.WTF::Vector"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %5 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_15ScriptWrappableEEEPhm(i64 88) #12
  %6 = bitcast i8* %5 to %"class.blink::NDEFRecord"*
  %7 = load i32, i32* %0, align 4
  %8 = bitcast %"class.WTF::Vector"* %3 to i64*
  %9 = load i64, i64* %8, align 8
  store atomic i64 0, i64* %8 monotonic, align 8
  %10 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %3, i64 0, i32 0, i32 0, i32 1
  %11 = load i32, i32* %10, align 4
  store i32 0, i32* %10, align 4
  %12 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %3, i64 0, i32 0, i32 0, i32 2
  %13 = load i32, i32* %12, align 4
  store i32 0, i32* %12, align 4
  %14 = bitcast i8* %5 to i32 (...)***
  %15 = getelementptr inbounds i8, i8* %5, i64 8
  %16 = bitcast i8* %15 to i64**
  store i64* null, i64** %16, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink10NDEFRecordE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %14, align 8
  %17 = getelementptr inbounds i8, i8* %5, i64 16
  %18 = bitcast i8* %17 to i32*
  store i32 %7, i32* %18, align 8
  %19 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %20 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %19, align 8
  %21 = getelementptr inbounds i8, i8* %5, i64 24
  %22 = bitcast i8* %21 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %20, %"class.WTF::StringImpl"** %22, align 8
  %23 = icmp eq %"class.WTF::StringImpl"* %20, null
  br i1 %23, label %41, label %24

24:                                               ; preds = %4
  %25 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %20, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %26 = load atomic i32, i32* %25 monotonic, align 4
  %27 = and i32 %26, 2
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %41

29:                                               ; preds = %24
  %30 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %20, i64 0, i32 0
  %31 = load i32, i32* %30, align 4
  %32 = zext i32 %31 to i33
  %33 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %32, i33 1) #12
  %34 = extractvalue { i33, i1 } %33, 1
  %35 = extractvalue { i33, i1 } %33, 0
  %36 = icmp slt i33 %35, 0
  %37 = or i1 %34, %36
  br i1 %37, label %38, label %39, !prof !2

38:                                               ; preds = %29
  tail call void @llvm.trap() #12
  unreachable

39:                                               ; preds = %29
  %40 = trunc i33 %35 to i32
  store i32 %40, i32* %30, align 4
  br label %41

41:                                               ; preds = %39, %24, %4
  %42 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %43 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %42, align 8
  %44 = getelementptr inbounds i8, i8* %5, i64 32
  %45 = bitcast i8* %44 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %43, %"class.WTF::StringImpl"** %45, align 8
  %46 = icmp eq %"class.WTF::StringImpl"* %43, null
  br i1 %46, label %64, label %47

47:                                               ; preds = %41
  %48 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %43, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %49 = load atomic i32, i32* %48 monotonic, align 4
  %50 = and i32 %49, 2
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %64

52:                                               ; preds = %47
  %53 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %43, i64 0, i32 0
  %54 = load i32, i32* %53, align 4
  %55 = zext i32 %54 to i33
  %56 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %55, i33 1) #12
  %57 = extractvalue { i33, i1 } %56, 1
  %58 = extractvalue { i33, i1 } %56, 0
  %59 = icmp slt i33 %58, 0
  %60 = or i1 %57, %59
  br i1 %60, label %61, label %62, !prof !2

61:                                               ; preds = %52
  tail call void @llvm.trap() #12
  unreachable

62:                                               ; preds = %52
  %63 = trunc i33 %58 to i32
  store i32 %63, i32* %53, align 4
  br label %64

64:                                               ; preds = %62, %47, %41
  %65 = getelementptr inbounds i8, i8* %5, i64 40
  %66 = getelementptr inbounds i8, i8* %5, i64 64
  %67 = getelementptr inbounds i8, i8* %5, i64 72
  %68 = bitcast i8* %67 to i32*
  %69 = getelementptr inbounds i8, i8* %5, i64 76
  %70 = bitcast i8* %69 to i32*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %65, i8 0, i64 24, i1 false) #12
  %71 = bitcast i8* %66 to i64*
  store atomic i64 %9, i64* %71 monotonic, align 8
  store i32 %11, i32* %68, align 4
  store i32 %13, i32* %70, align 4
  %72 = getelementptr inbounds i8, i8* %5, i64 80
  %73 = bitcast i8* %72 to %"class.blink::NDEFMessage"**
  store %"class.blink::NDEFMessage"* null, %"class.blink::NDEFMessage"** %73, align 8
  %74 = getelementptr inbounds i8, i8* %5, i64 -4
  %75 = bitcast i8* %74 to i16*
  %76 = load atomic i16, i16* %75 monotonic, align 2
  %77 = or i16 %76, 1
  store atomic i16 %77, i16* %75 release, align 2
  ret %"class.blink::NDEFRecord"* %6
}

declare %"class.WTF::StringImpl"* @_ZN5blink28ExtractMIMETypeFromMediaTypeERKN3WTF12AtomicStringE(%"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #2

declare %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::NDEFRecord"* @_ZN5blink25MakeGarbageCollectedTraitINS_10NDEFRecordEE4CallIJRKN3WTF6StringERS5_RNS4_6VectorIhLj0ENS4_18PartitionAllocatorEEEEEEPS1_DpOT_(%"class.WTF::String"* dereferenceable(8), %"class.WTF::String"* dereferenceable(8), %"class.WTF::Vector"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.WTF::Vector", align 8
  %5 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_15ScriptWrappableEEEPhm(i64 88) #12
  %6 = bitcast i8* %5 to %"class.blink::NDEFRecord"*
  %7 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %4, i64 0, i32 0, i32 0, i32 0
  store i8* null, i8** %9, align 8
  %10 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %4, i64 0, i32 0, i32 0, i32 1
  store i32 0, i32* %10, align 8
  %11 = icmp eq i32 %8, 0
  br i1 %11, label %19, label %12

12:                                               ; preds = %3
  %13 = zext i32 %8 to i64
  %14 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64 %13) #12
  %15 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %14, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv, i64 0, i64 0)) #12
  %16 = ptrtoint i8* %15 to i64
  %17 = bitcast %"class.WTF::Vector"* %4 to i64*
  store atomic i64 %16, i64* %17 monotonic, align 8
  %18 = trunc i64 %14 to i32
  store i32 %18, i32* %10, align 8
  br label %19

19:                                               ; preds = %12, %3
  %20 = phi i8* [ null, %3 ], [ %15, %12 ]
  %21 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 2
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %4, i64 0, i32 0, i32 0, i32 2
  store i32 %22, i32* %23, align 4
  %24 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = icmp ne i8* %20, null
  %27 = icmp ne i8* %25, null
  %28 = and i1 %26, %27
  br i1 %28, label %29, label %31, !prof !3

29:                                               ; preds = %19
  %30 = zext i32 %22 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %20, i8* nonnull align 1 %25, i64 %30, i1 false) #12
  br label %31

31:                                               ; preds = %19, %29
  call void @_ZN5blink10NDEFRecordC2ERKN3WTF6StringES4_NS1_6VectorIhLj0ENS1_18PartitionAllocatorEEE(%"class.blink::NDEFRecord"* %6, %"class.WTF::String"* dereferenceable(8) %0, %"class.WTF::String"* dereferenceable(8) %1, %"class.WTF::Vector"* nonnull %4)
  %32 = load i8*, i8** %9, align 8
  %33 = icmp eq i8* %32, null
  br i1 %33, label %39, label %34, !prof !3

34:                                               ; preds = %31
  %35 = load i32, i32* %23, align 4
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %38, label %37, !prof !2

37:                                               ; preds = %34
  store i32 0, i32* %23, align 4
  br label %38

38:                                               ; preds = %37, %34
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %32) #12
  store i8* null, i8** %9, align 8
  br label %39

39:                                               ; preds = %31, %38
  %40 = getelementptr inbounds i8, i8* %5, i64 -4
  %41 = bitcast i8* %40 to i16*
  %42 = load atomic i16, i16* %41 monotonic, align 2
  %43 = or i16 %42, 1
  store atomic i16 %43, i16* %41 release, align 2
  ret %"class.blink::NDEFRecord"* %6
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::NDEFRecord"* @_ZN5blink25MakeGarbageCollectedTraitINS_10NDEFRecordEE4CallIJN6device5mojom22NDEFRecordTypeCategoryERA8_KcRKN3WTF6StringERNSA_6VectorIhLj0ENSA_18PartitionAllocatorEEEEEEPS1_DpOT_(i32* dereferenceable(4), [8 x i8]* dereferenceable(8), %"class.WTF::String"* dereferenceable(8), %"class.WTF::Vector"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca %"class.WTF::String", align 8
  %6 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_15ScriptWrappableEEEPhm(i64 88) #12
  %7 = bitcast i8* %6 to %"class.blink::NDEFRecord"*
  %8 = load i32, i32* %0, align 4
  %9 = bitcast %"class.WTF::String"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #12
  %10 = getelementptr inbounds [8 x i8], [8 x i8]* %1, i64 0, i64 0
  %11 = icmp eq [8 x i8]* %1, null
  br i1 %11, label %14, label %12

12:                                               ; preds = %4
  %13 = tail call i64 @strlen(i8* nonnull %10) #13
  br label %14

14:                                               ; preds = %4, %12
  %15 = phi i64 [ %13, %12 ], [ 0, %4 ]
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %5, i8* %10, i64 %15) #12
  %16 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %3, i64 0, i32 0, i32 0, i32 1
  %17 = load i32, i32* %16, align 8
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %25, label %19

19:                                               ; preds = %14
  %20 = zext i32 %17 to i64
  %21 = call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64 %20) #12
  %22 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %21, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv, i64 0, i64 0)) #12
  %23 = ptrtoint i8* %22 to i64
  %24 = trunc i64 %21 to i32
  br label %25

25:                                               ; preds = %19, %14
  %26 = phi i32 [ 0, %14 ], [ %24, %19 ]
  %27 = phi i64 [ 0, %14 ], [ %23, %19 ]
  %28 = phi i8* [ null, %14 ], [ %22, %19 ]
  %29 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %3, i64 0, i32 0, i32 0, i32 2
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %3, i64 0, i32 0, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = icmp ne i8* %28, null
  %34 = icmp ne i8* %32, null
  %35 = and i1 %33, %34
  br i1 %35, label %36, label %38, !prof !3

36:                                               ; preds = %25
  %37 = zext i32 %30 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %28, i8* nonnull align 1 %32, i64 %37, i1 false) #12
  br label %38

38:                                               ; preds = %25, %36
  %39 = bitcast i8* %6 to i32 (...)***
  %40 = getelementptr inbounds i8, i8* %6, i64 8
  %41 = bitcast i8* %40 to i64**
  store i64* null, i64** %41, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink10NDEFRecordE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %39, align 8
  %42 = getelementptr inbounds i8, i8* %6, i64 16
  %43 = bitcast i8* %42 to i32*
  store i32 %8, i32* %43, align 8
  %44 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %5, i64 0, i32 0, i32 0
  %45 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %44, align 8
  %46 = getelementptr inbounds i8, i8* %6, i64 24
  %47 = bitcast i8* %46 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %45, %"class.WTF::StringImpl"** %47, align 8
  %48 = icmp eq %"class.WTF::StringImpl"* %45, null
  br i1 %48, label %66, label %49

49:                                               ; preds = %38
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %45, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %51 = load atomic i32, i32* %50 monotonic, align 4
  %52 = and i32 %51, 2
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %66

54:                                               ; preds = %49
  %55 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %45, i64 0, i32 0
  %56 = load i32, i32* %55, align 4
  %57 = zext i32 %56 to i33
  %58 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %57, i33 1) #12
  %59 = extractvalue { i33, i1 } %58, 1
  %60 = extractvalue { i33, i1 } %58, 0
  %61 = icmp slt i33 %60, 0
  %62 = or i1 %59, %61
  br i1 %62, label %63, label %64, !prof !2

63:                                               ; preds = %54
  call void @llvm.trap() #12
  unreachable

64:                                               ; preds = %54
  %65 = trunc i33 %60 to i32
  store i32 %65, i32* %55, align 4
  br label %66

66:                                               ; preds = %64, %49, %38
  %67 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %68 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %67, align 8
  %69 = getelementptr inbounds i8, i8* %6, i64 32
  %70 = bitcast i8* %69 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %68, %"class.WTF::StringImpl"** %70, align 8
  %71 = icmp eq %"class.WTF::StringImpl"* %68, null
  br i1 %71, label %89, label %72

72:                                               ; preds = %66
  %73 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %68, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %74 = load atomic i32, i32* %73 monotonic, align 4
  %75 = and i32 %74, 2
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %89

77:                                               ; preds = %72
  %78 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %68, i64 0, i32 0
  %79 = load i32, i32* %78, align 4
  %80 = zext i32 %79 to i33
  %81 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %80, i33 1) #12
  %82 = extractvalue { i33, i1 } %81, 1
  %83 = extractvalue { i33, i1 } %81, 0
  %84 = icmp slt i33 %83, 0
  %85 = or i1 %82, %84
  br i1 %85, label %86, label %87, !prof !2

86:                                               ; preds = %77
  call void @llvm.trap() #12
  unreachable

87:                                               ; preds = %77
  %88 = trunc i33 %83 to i32
  store i32 %88, i32* %78, align 4
  br label %89

89:                                               ; preds = %87, %72, %66
  %90 = getelementptr inbounds i8, i8* %6, i64 40
  %91 = getelementptr inbounds i8, i8* %6, i64 64
  %92 = getelementptr inbounds i8, i8* %6, i64 72
  %93 = bitcast i8* %92 to i32*
  %94 = getelementptr inbounds i8, i8* %6, i64 76
  %95 = bitcast i8* %94 to i32*
  call void @llvm.memset.p0i8.i64(i8* align 8 %90, i8 0, i64 24, i1 false) #12
  %96 = bitcast i8* %91 to i64*
  store atomic i64 %27, i64* %96 monotonic, align 8
  store i32 %26, i32* %93, align 4
  store i32 %30, i32* %95, align 4
  %97 = getelementptr inbounds i8, i8* %6, i64 80
  %98 = bitcast i8* %97 to %"class.blink::NDEFMessage"**
  store %"class.blink::NDEFMessage"* null, %"class.blink::NDEFMessage"** %98, align 8
  %99 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %44, align 8
  %100 = icmp eq %"class.WTF::StringImpl"* %99, null
  br i1 %100, label %114, label %101

101:                                              ; preds = %89
  %102 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %99, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %103 = load atomic i32, i32* %102 monotonic, align 4
  %104 = and i32 %103, 2
  %105 = icmp eq i32 %104, 0
  %106 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %99, i64 0, i32 0
  %107 = load i32, i32* %106, align 4
  br i1 %105, label %108, label %110

108:                                              ; preds = %101
  %109 = add i32 %107, -1
  store i32 %109, i32* %106, align 4
  br label %110

110:                                              ; preds = %108, %101
  %111 = phi i32 [ %109, %108 ], [ %107, %101 ]
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %113, label %114

113:                                              ; preds = %110
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %99) #12
  br label %114

114:                                              ; preds = %89, %110, %113
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #12
  %115 = getelementptr inbounds i8, i8* %6, i64 -4
  %116 = bitcast i8* %115 to i16*
  %117 = load atomic i16, i16* %116 monotonic, align 2
  %118 = or i16 %117, 1
  store atomic i16 %118, i16* %116 release, align 2
  ret %"class.blink::NDEFRecord"* %7
}

declare %"class.blink::NDEFMessage"* @_ZN5blink11NDEFMessage28CreateAsPayloadOfSmartPosterEPKNS_16ExecutionContextEPKNS_15NDEFMessageInitERNS_14ExceptionStateE(%"class.blink::ExecutionContext"*, %"class.blink::NDEFMessageInit"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #2

declare %"class.blink::NDEFMessageInit"* @_ZNK5blink53StringOrArrayBufferOrArrayBufferViewOrNDEFMessageInit20GetAsNDEFMessageInitEv(%"class.blink::StringOrArrayBufferOrArrayBufferViewOrNDEFMessageInit"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::NDEFRecord"* @_ZN5blink25MakeGarbageCollectedTraitINS_10NDEFRecordEE4CallIJN6device5mojom22NDEFRecordTypeCategoryERA13_KcRKN3WTF6StringERPNS_11NDEFMessageEEEEPS1_DpOT_(i32* dereferenceable(4), [13 x i8]* dereferenceable(13), %"class.WTF::String"* dereferenceable(8), %"class.blink::NDEFMessage"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca %"class.WTF::String", align 8
  %6 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_15ScriptWrappableEEEPhm(i64 88) #12
  %7 = bitcast i8* %6 to %"class.blink::NDEFRecord"*
  %8 = load i32, i32* %0, align 4
  %9 = bitcast %"class.WTF::String"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #12
  %10 = getelementptr inbounds [13 x i8], [13 x i8]* %1, i64 0, i64 0
  %11 = icmp eq [13 x i8]* %1, null
  br i1 %11, label %14, label %12

12:                                               ; preds = %4
  %13 = tail call i64 @strlen(i8* nonnull %10) #13
  br label %14

14:                                               ; preds = %4, %12
  %15 = phi i64 [ %13, %12 ], [ 0, %4 ]
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %5, i8* %10, i64 %15) #12
  %16 = bitcast %"class.blink::NDEFMessage"** %3 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = bitcast i8* %6 to i32 (...)***
  %19 = getelementptr inbounds i8, i8* %6, i64 8
  %20 = bitcast i8* %19 to i64**
  store i64* null, i64** %20, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink10NDEFRecordE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %18, align 8
  %21 = getelementptr inbounds i8, i8* %6, i64 16
  %22 = bitcast i8* %21 to i32*
  store i32 %8, i32* %22, align 8
  %23 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %5, i64 0, i32 0, i32 0
  %24 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %23, align 8
  %25 = getelementptr inbounds i8, i8* %6, i64 24
  %26 = bitcast i8* %25 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %24, %"class.WTF::StringImpl"** %26, align 8
  %27 = icmp eq %"class.WTF::StringImpl"* %24, null
  br i1 %27, label %45, label %28

28:                                               ; preds = %14
  %29 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %30 = load atomic i32, i32* %29 monotonic, align 4
  %31 = and i32 %30, 2
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %45

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 0, i32 0
  %35 = load i32, i32* %34, align 4
  %36 = zext i32 %35 to i33
  %37 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %36, i33 1) #12
  %38 = extractvalue { i33, i1 } %37, 1
  %39 = extractvalue { i33, i1 } %37, 0
  %40 = icmp slt i33 %39, 0
  %41 = or i1 %38, %40
  br i1 %41, label %42, label %43, !prof !2

42:                                               ; preds = %33
  call void @llvm.trap() #12
  unreachable

43:                                               ; preds = %33
  %44 = trunc i33 %39 to i32
  store i32 %44, i32* %34, align 4
  br label %45

45:                                               ; preds = %43, %28, %14
  %46 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %47 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %46, align 8
  %48 = getelementptr inbounds i8, i8* %6, i64 32
  %49 = bitcast i8* %48 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %47, %"class.WTF::StringImpl"** %49, align 8
  %50 = icmp eq %"class.WTF::StringImpl"* %47, null
  br i1 %50, label %68, label %51

51:                                               ; preds = %45
  %52 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %47, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %53 = load atomic i32, i32* %52 monotonic, align 4
  %54 = and i32 %53, 2
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %68

56:                                               ; preds = %51
  %57 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %47, i64 0, i32 0
  %58 = load i32, i32* %57, align 4
  %59 = zext i32 %58 to i33
  %60 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %59, i33 1) #12
  %61 = extractvalue { i33, i1 } %60, 1
  %62 = extractvalue { i33, i1 } %60, 0
  %63 = icmp slt i33 %62, 0
  %64 = or i1 %61, %63
  br i1 %64, label %65, label %66, !prof !2

65:                                               ; preds = %56
  call void @llvm.trap() #12
  unreachable

66:                                               ; preds = %56
  %67 = trunc i33 %62 to i32
  store i32 %67, i32* %57, align 4
  br label %68

68:                                               ; preds = %45, %51, %66
  %69 = getelementptr inbounds i8, i8* %6, i64 40
  %70 = getelementptr inbounds i8, i8* %6, i64 80
  call void @llvm.memset.p0i8.i64(i8* align 8 %69, i8 0, i64 40, i1 false) #12
  %71 = bitcast i8* %70 to i64*
  store i64 %17, i64* %71, align 8
  %72 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %23, align 8
  %73 = icmp eq %"class.WTF::StringImpl"* %72, null
  br i1 %73, label %87, label %74

74:                                               ; preds = %68
  %75 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %72, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %76 = load atomic i32, i32* %75 monotonic, align 4
  %77 = and i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %72, i64 0, i32 0
  %80 = load i32, i32* %79, align 4
  br i1 %78, label %81, label %83

81:                                               ; preds = %74
  %82 = add i32 %80, -1
  store i32 %82, i32* %79, align 4
  br label %83

83:                                               ; preds = %81, %74
  %84 = phi i32 [ %82, %81 ], [ %80, %74 ]
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %86, label %87

86:                                               ; preds = %83
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %72) #12
  br label %87

87:                                               ; preds = %68, %83, %86
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #12
  %88 = getelementptr inbounds i8, i8* %6, i64 -4
  %89 = bitcast i8* %88 to i16*
  %90 = load atomic i16, i16* %89 monotonic, align 2
  %91 = or i16 %90, 1
  store atomic i16 %91, i16* %89 release, align 2
  ret %"class.blink::NDEFRecord"* %7
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #9

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #9

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #9

declare %"class.WTF::StringImpl"* @_ZNK3WTF6String9SubstringEjj(%"class.WTF::String"*, i32, i32) local_unnamed_addr #2

declare i32 @_ZNK3WTF10StringImpl17ComputeASCIIFlagsEv(%"class.WTF::StringImpl"*) local_unnamed_addr #2

; Function Attrs: nofree nounwind readonly
declare i8* @memchr(i8*, i32, i64) local_unnamed_addr #10

declare %"class.blink::NDEFMessage"* @_ZN5blink11NDEFMessage6CreateEPKNS_16ExecutionContextEPKNS_15NDEFMessageInitERNS_14ExceptionStateEb(%"class.blink::ExecutionContext"*, %"class.blink::NDEFMessageInit"*, %"class.blink::ExceptionState"* dereferenceable(72), i1 zeroext) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::NDEFRecord"* @_ZN5blink25MakeGarbageCollectedTraitINS_10NDEFRecordEE4CallIJN6device5mojom22NDEFRecordTypeCategoryERKN3WTF6StringESA_RNS7_6VectorIhLj0ENS7_18PartitionAllocatorEEEEEEPS1_DpOT_(i32* dereferenceable(4), %"class.WTF::String"* dereferenceable(8), %"class.WTF::String"* dereferenceable(8), %"class.WTF::Vector"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %5 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_15ScriptWrappableEEEPhm(i64 88) #12
  %6 = bitcast i8* %5 to %"class.blink::NDEFRecord"*
  %7 = load i32, i32* %0, align 4
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %3, i64 0, i32 0, i32 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %17, label %11

11:                                               ; preds = %4
  %12 = zext i32 %9 to i64
  %13 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64 %12) #12
  %14 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %13, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv, i64 0, i64 0)) #12
  %15 = ptrtoint i8* %14 to i64
  %16 = trunc i64 %13 to i32
  br label %17

17:                                               ; preds = %11, %4
  %18 = phi i32 [ 0, %4 ], [ %16, %11 ]
  %19 = phi i64 [ 0, %4 ], [ %15, %11 ]
  %20 = phi i8* [ null, %4 ], [ %14, %11 ]
  %21 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %3, i64 0, i32 0, i32 0, i32 2
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %3, i64 0, i32 0, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = icmp ne i8* %20, null
  %26 = icmp ne i8* %24, null
  %27 = and i1 %25, %26
  br i1 %27, label %28, label %30, !prof !3

28:                                               ; preds = %17
  %29 = zext i32 %22 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %20, i8* nonnull align 1 %24, i64 %29, i1 false) #12
  br label %30

30:                                               ; preds = %17, %28
  %31 = bitcast i8* %5 to i32 (...)***
  %32 = getelementptr inbounds i8, i8* %5, i64 8
  %33 = bitcast i8* %32 to i64**
  store i64* null, i64** %33, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink10NDEFRecordE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %31, align 8
  %34 = getelementptr inbounds i8, i8* %5, i64 16
  %35 = bitcast i8* %34 to i32*
  store i32 %7, i32* %35, align 8
  %36 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %37 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %36, align 8
  %38 = getelementptr inbounds i8, i8* %5, i64 24
  %39 = bitcast i8* %38 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %37, %"class.WTF::StringImpl"** %39, align 8
  %40 = icmp eq %"class.WTF::StringImpl"* %37, null
  br i1 %40, label %58, label %41

41:                                               ; preds = %30
  %42 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %37, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %43 = load atomic i32, i32* %42 monotonic, align 4
  %44 = and i32 %43, 2
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %58

46:                                               ; preds = %41
  %47 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %37, i64 0, i32 0
  %48 = load i32, i32* %47, align 4
  %49 = zext i32 %48 to i33
  %50 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %49, i33 1) #12
  %51 = extractvalue { i33, i1 } %50, 1
  %52 = extractvalue { i33, i1 } %50, 0
  %53 = icmp slt i33 %52, 0
  %54 = or i1 %51, %53
  br i1 %54, label %55, label %56, !prof !2

55:                                               ; preds = %46
  tail call void @llvm.trap() #12
  unreachable

56:                                               ; preds = %46
  %57 = trunc i33 %52 to i32
  store i32 %57, i32* %47, align 4
  br label %58

58:                                               ; preds = %56, %41, %30
  %59 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %60 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %59, align 8
  %61 = getelementptr inbounds i8, i8* %5, i64 32
  %62 = bitcast i8* %61 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %60, %"class.WTF::StringImpl"** %62, align 8
  %63 = icmp eq %"class.WTF::StringImpl"* %60, null
  br i1 %63, label %81, label %64

64:                                               ; preds = %58
  %65 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %66 = load atomic i32, i32* %65 monotonic, align 4
  %67 = and i32 %66, 2
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %81

69:                                               ; preds = %64
  %70 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 0
  %71 = load i32, i32* %70, align 4
  %72 = zext i32 %71 to i33
  %73 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %72, i33 1) #12
  %74 = extractvalue { i33, i1 } %73, 1
  %75 = extractvalue { i33, i1 } %73, 0
  %76 = icmp slt i33 %75, 0
  %77 = or i1 %74, %76
  br i1 %77, label %78, label %79, !prof !2

78:                                               ; preds = %69
  tail call void @llvm.trap() #12
  unreachable

79:                                               ; preds = %69
  %80 = trunc i33 %75 to i32
  store i32 %80, i32* %70, align 4
  br label %81

81:                                               ; preds = %79, %64, %58
  %82 = getelementptr inbounds i8, i8* %5, i64 40
  %83 = getelementptr inbounds i8, i8* %5, i64 64
  %84 = getelementptr inbounds i8, i8* %5, i64 72
  %85 = bitcast i8* %84 to i32*
  %86 = getelementptr inbounds i8, i8* %5, i64 76
  %87 = bitcast i8* %86 to i32*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %82, i8 0, i64 24, i1 false) #12
  %88 = bitcast i8* %83 to i64*
  store atomic i64 %19, i64* %88 monotonic, align 8
  store i32 %18, i32* %85, align 4
  store i32 %22, i32* %87, align 4
  %89 = getelementptr inbounds i8, i8* %5, i64 80
  %90 = bitcast i8* %89 to %"class.blink::NDEFMessage"**
  store %"class.blink::NDEFMessage"* null, %"class.blink::NDEFMessage"** %90, align 8
  %91 = getelementptr inbounds i8, i8* %5, i64 -4
  %92 = bitcast i8* %91 to i16*
  %93 = load atomic i16, i16* %92 monotonic, align 2
  %94 = or i16 %93, 1
  store atomic i16 %94, i16* %92 release, align 2
  ret %"class.blink::NDEFRecord"* %6
}

declare void @__cxa_pure_virtual() unnamed_addr

declare void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"*, i8*, i64) unnamed_addr #2

declare %"class.blink::Document"* @_ZNK5blink14LocalDOMWindow8documentEv(%"class.blink::LocalDOMWindow"*) local_unnamed_addr #2

declare dereferenceable(8) %"class.WTF::AtomicString"* @_ZNK5blink7Element12getAttributeERKNS_13QualifiedNameE(%"class.blink::Element"*, %"class.blink::QualifiedName"* dereferenceable(8)) local_unnamed_addr #2

declare void @_ZN5blink19ArrayBufferContentsC1EmmNS0_11SharingTypeENS0_20InitializationPolicyE(%"class.blink::ArrayBufferContents"*, i64, i64, i32, i32) unnamed_addr #2

; Function Attrs: noinline noreturn nounwind ssp uwtable
define internal fastcc void @_ZN12_GLOBAL__N_110OnNoMemoryEm(i64) unnamed_addr #11 {
  tail call void @_ZN4base8internal28RunPartitionAllocOomCallbackEv() #12
  tail call void @_ZN4base27TerminateBecauseOutOfMemoryEm(i64 %0) #12
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !22
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !23
  unreachable
}

; Function Attrs: nounwind
declare void @_ZN5blink19ArrayBufferContentsD1Ev(%"class.blink::ArrayBufferContents"*) unnamed_addr #8

declare void @_ZN4base8internal28RunPartitionAllocOomCallbackEv() local_unnamed_addr #2

declare void @_ZN4base27TerminateBecauseOutOfMemoryEm(i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink18DOMArrayBufferBaseD2Ev(%"class.blink::DOMArrayBufferBase"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::DOMArrayBufferBase", %"class.blink::DOMArrayBufferBase"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink18DOMArrayBufferBaseE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::DOMArrayBufferBase", %"class.blink::DOMArrayBufferBase"* %0, i64 0, i32 1
  tail call void @_ZN5blink19ArrayBufferContentsD1Ev(%"class.blink::ArrayBufferContents"* %3) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink18DOMArrayBufferBaseD0Ev(%"class.blink::DOMArrayBufferBase"*) unnamed_addr #0 comdat align 2 {
  tail call void @llvm.trap() #15
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.v8::Value"* @_ZN5blink18DOMArrayBufferBase4WrapEPNS_11ScriptStateE(%"class.blink::DOMArrayBufferBase"*, %"class.blink::ScriptState"*) unnamed_addr #0 comdat align 2 {
  ret %"class.v8::Value"* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink6MemberINS1_10NDEFRecordEEELj0ENS1_13HeapAllocatorEEC2ERKS6_(%"class.WTF::Vector.3"*, %"class.WTF::Vector.3"* dereferenceable(16)) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.3", %"class.WTF::Vector.3"* %1, i64 0, i32 0, i32 0, i32 1
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.WTF::Vector.3", %"class.WTF::Vector.3"* %0, i64 0, i32 0, i32 0, i32 0
  store %"class.blink::Member.6"* null, %"class.blink::Member.6"** %5, align 8
  %6 = getelementptr inbounds %"class.WTF::Vector.3", %"class.WTF::Vector.3"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 0, i32* %6, align 8
  %7 = icmp eq i32 %4, 0
  br i1 %7, label %23, label %8

8:                                                ; preds = %2
  %9 = zext i32 %4 to i64
  %10 = tail call i64 @_ZN5blink13HeapAllocator13QuantizedSizeINS_6MemberINS_10NDEFRecordEEEEEmm(i64 %9) #12
  %11 = lshr i64 %10, 3
  %12 = tail call %"class.blink::HeapVectorBacking"* @_ZN5blink25MakeGarbageCollectedTraitINS_17HeapVectorBackingINS_6MemberINS_10NDEFRecordEEEN3WTF12VectorTraitsIS4_EEEEE4CallEm(i64 %11) #12
  %13 = ptrtoint %"class.blink::HeapVectorBacking"* %12 to i64
  %14 = bitcast %"class.WTF::Vector.3"* %0 to i64*
  store atomic i64 %13, i64* %14 monotonic, align 8
  %15 = trunc i64 %11 to i32
  store i32 %15, i32* %6, align 8
  %16 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %17 = icmp eq i32 %16, 0
  %18 = bitcast %"class.blink::HeapVectorBacking"* %12 to %"class.blink::Member.6"*
  br i1 %17, label %23, label %19

19:                                               ; preds = %8
  %20 = getelementptr inbounds %"class.blink::HeapVectorBacking", %"class.blink::HeapVectorBacking"* %12, i64 0, i32 0
  %21 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %20) #12
  %22 = load %"class.blink::Member.6"*, %"class.blink::Member.6"** %5, align 8
  br label %23

23:                                               ; preds = %2, %8, %19
  %24 = phi %"class.blink::Member.6"* [ null, %2 ], [ %18, %8 ], [ %22, %19 ]
  %25 = getelementptr inbounds %"class.WTF::Vector.3", %"class.WTF::Vector.3"* %1, i64 0, i32 0, i32 0, i32 2
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds %"class.WTF::Vector.3", %"class.WTF::Vector.3"* %0, i64 0, i32 0, i32 0, i32 2
  store i32 %26, i32* %27, align 4
  %28 = getelementptr inbounds %"class.WTF::Vector.3", %"class.WTF::Vector.3"* %1, i64 0, i32 0, i32 0, i32 0
  %29 = load %"class.blink::Member.6"*, %"class.blink::Member.6"** %28, align 8
  %30 = icmp ne %"class.blink::Member.6"* %24, null
  %31 = icmp ne %"class.blink::Member.6"* %29, null
  %32 = and i1 %31, %30
  br i1 %32, label %33, label %53, !prof !3

33:                                               ; preds = %23
  %34 = load i32, i32* %25, align 4
  %35 = zext i32 %34 to i64
  %36 = bitcast %"class.blink::Member.6"* %24 to i8*
  %37 = bitcast %"class.blink::Member.6"* %29 to i8*
  %38 = shl nuw nsw i64 %35, 3
  tail call void @_ZN3WTF17AtomicWriteMemcpyEPvPKvm(i8* nonnull %36, i8* nonnull %37, i64 %38) #12
  %39 = icmp eq i32 %34, 0
  br i1 %39, label %53, label %40

40:                                               ; preds = %33, %50
  %41 = phi i64 [ %43, %50 ], [ %35, %33 ]
  %42 = phi %"class.blink::Member.6"* [ %51, %50 ], [ %24, %33 ]
  %43 = add nsw i64 %41, -1
  %44 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %50, label %46

46:                                               ; preds = %40
  %47 = bitcast %"class.blink::Member.6"* %42 to i8**
  %48 = load i8*, i8** %47, align 8
  %49 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %48) #12
  br label %50

50:                                               ; preds = %46, %40
  %51 = getelementptr inbounds %"class.blink::Member.6", %"class.blink::Member.6"* %42, i64 1
  %52 = icmp eq i64 %43, 0
  br i1 %52, label %53, label %40

53:                                               ; preds = %50, %23, %33
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN5blink13HeapAllocator13QuantizedSizeINS_6MemberINS_10NDEFRecordEEEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #12
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 16777216
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #12
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 16777216) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.23, i64 0, i64 0), i8* %11, i8* %12) #12
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.38, i64 0, i64 0), i32 39, %"class.logging::CheckOpResult"* nonnull %3) #12
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #12
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #12
  %20 = shl i64 %0, 3
  ret i64 %20
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::HeapVectorBacking"* @_ZN5blink25MakeGarbageCollectedTraitINS_17HeapVectorBackingINS_6MemberINS_10NDEFRecordEEEN3WTF12VectorTraitsIS4_EEEEE4CallEm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #12
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp eq i64 %0, 0
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 0) #12
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 0) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.39, i64 0, i64 0), i8* %11, i8* %12) #12
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([93 x i8], [93 x i8]* @.str.40, i64 0, i64 0), i32 86, %"class.logging::CheckOpResult"* nonnull %3) #12
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #12
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #12
  %20 = shl i64 %0, 3
  %21 = call i8* @_ZN5blink17HeapVectorBackingINS_6MemberINS_10NDEFRecordEEEN3WTF12VectorTraitsIS3_EEE14AllocateObjectIS7_EEPvm(i64 %20)
  %22 = bitcast i8* %21 to %"class.blink::HeapVectorBacking"*
  %23 = getelementptr inbounds i8, i8* %21, i64 -4
  %24 = bitcast i8* %23 to i16*
  %25 = load atomic i16, i16* %24 monotonic, align 2
  %26 = or i16 %25, 1
  store atomic i16 %26, i16* %24 release, align 2
  ret %"class.blink::HeapVectorBacking"* %22
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink17HeapVectorBackingINS_6MemberINS_10NDEFRecordEEEN3WTF12VectorTraitsIS3_EEE14AllocateObjectIS7_EEPvm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %3 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %2, i64 0, i32 1
  %4 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %3) #12
  %5 = icmp eq i8* %4, null
  br i1 %5, label %6, label %8, !prof !2

6:                                                ; preds = %1
  %7 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #12
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %3, i8* %7) #12
  br label %8

8:                                                ; preds = %1, %6
  %9 = phi i8* [ %7, %6 ], [ %4, %1 ]
  %10 = bitcast i8* %9 to %"class.blink::ThreadState"**
  %11 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %10, align 8
  %12 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %11, i64 0, i32 0, i32 0, i32 0, i32 0
  %13 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %12, align 8
  %14 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_6MemberINS_10NDEFRecordEEEN3WTF12VectorTraitsIS4_EEEEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %19

16:                                               ; preds = %8
  %17 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %18 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %17, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_6MemberINS_10NDEFRecordEEEN3WTF12VectorTraitsIS4_EEEEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_6MemberINS_10NDEFRecordEEEN3WTF12VectorTraitsIS4_EEEEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #12
  br label %19

19:                                               ; preds = %8, %16
  %20 = phi i32 [ %14, %8 ], [ %18, %16 ]
  %21 = tail call i8* @_ZN5blink10ThreadHeap20AllocateOnArenaIndexEPNS_11ThreadStateEmijPKc(%"class.blink::ThreadHeap"* %13, %"class.blink::ThreadState"* %11, i64 %0, i32 4, i32 %20, i8* getelementptr inbounds ([161 x i8], [161 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink17HeapVectorBackingINS1_6MemberINS1_10NDEFRecordEEENS_12VectorTraitsIS5_EEEEEEPKcv, i64 0, i64 0))
  ret i8* %21
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_17HeapVectorBackingINS_6MemberINS_10NDEFRecordEEEN3WTF12VectorTraitsIS4_EEEEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::Member.6"*
  %4 = getelementptr inbounds i8, i8* %1, i64 -2
  %5 = bitcast i8* %4 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = lshr i16 %6, 2
  %8 = icmp eq i16 %7, 0
  br i1 %8, label %9, label %17, !prof !2

9:                                                ; preds = %2
  %10 = getelementptr inbounds i8, i8* %1, i64 -8
  %11 = ptrtoint i8* %10 to i64
  %12 = and i64 %11, -131072
  %13 = inttoptr i64 %12 to i8*
  %14 = getelementptr inbounds i8, i8* %13, i64 4144
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %15, align 16
  br label %20

17:                                               ; preds = %2
  %18 = zext i16 %7 to i64
  %19 = shl nuw nsw i64 %18, 3
  br label %20

20:                                               ; preds = %17, %9
  %21 = phi i64 [ %16, %9 ], [ %19, %17 ]
  %22 = add i64 %21, -8
  %23 = lshr i64 %22, 3
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %41, label %25

25:                                               ; preds = %20
  %26 = bitcast %"class.blink::Visitor"* %0 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  br label %27

27:                                               ; preds = %38, %25
  %28 = phi i64 [ 0, %25 ], [ %39, %38 ]
  %29 = getelementptr inbounds %"class.blink::Member.6", %"class.blink::Member.6"* %3, i64 %28
  %30 = bitcast %"class.blink::Member.6"* %29 to i64*
  %31 = load atomic i64, i64* %30 monotonic, align 8
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %38, label %33

33:                                               ; preds = %27
  %34 = inttoptr i64 %31 to i8*
  %35 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %26, align 8
  %36 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %35, i64 5
  %37 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %36, align 8
  tail call void %37(%"class.blink::Visitor"* %0, i8* nonnull %34, i8* nonnull %34, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_10NDEFRecordEE5TraceEPNS_7VisitorEPKv) #12
  br label %38

38:                                               ; preds = %33, %27
  %39 = add nuw nsw i64 %28, 1
  %40 = icmp eq i64 %39, %23
  br i1 %40, label %41, label %27

41:                                               ; preds = %38, %20
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_17HeapVectorBackingINS_6MemberINS_10NDEFRecordEEEN3WTF12VectorTraitsIS4_EEEEE7GetNameEPKv(i8*) #0 comdat align 2 {
  ret { i8*, i8 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.41, i64 0, i64 0), i8 1 }
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_10NDEFRecordEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = getelementptr inbounds i8, i8* %1, i64 80
  %4 = bitcast i8* %3 to i64*
  %5 = load atomic i64, i64* %4 monotonic, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %13, label %7

7:                                                ; preds = %2
  %8 = inttoptr i64 %5 to i8*
  %9 = bitcast %"class.blink::Visitor"* %0 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %10 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %9, align 8
  %11 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %10, i64 5
  %12 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %11, align 8
  tail call void %12(%"class.blink::Visitor"* %0, i8* nonnull %8, i8* nonnull %8, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_11NDEFMessageEE5TraceEPNS_7VisitorEPKv) #12
  br label %13

13:                                               ; preds = %2, %7
  %14 = bitcast i8* %1 to %"class.blink::ScriptWrappable"*
  tail call void @_ZNK5blink15ScriptWrappable5TraceEPNS_7VisitorE(%"class.blink::ScriptWrappable"* %14, %"class.blink::Visitor"* %0) #12
  ret void
}

declare zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8*) local_unnamed_addr #2

declare void @_ZN3WTF17AtomicWriteMemcpyEPvPKvm(i8*, i8*, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::NDEFRecord"* @_ZN5blink25MakeGarbageCollectedTraitINS_10NDEFRecordEE4CallIJN6device5mojom22NDEFRecordTypeCategoryERKN3WTF6StringES8_NS7_6VectorIhLj0ENS7_18PartitionAllocatorEEEEEEPS1_DpOT_(i32* dereferenceable(4), %"class.WTF::String"* dereferenceable(8), %"class.WTF::String"* dereferenceable(8), %"class.WTF::Vector"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %5 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_15ScriptWrappableEEEPhm(i64 88) #12
  %6 = bitcast i8* %5 to %"class.blink::NDEFRecord"*
  %7 = load i32, i32* %0, align 4
  %8 = bitcast %"class.WTF::Vector"* %3 to i64*
  %9 = load i64, i64* %8, align 8
  store atomic i64 0, i64* %8 monotonic, align 8
  %10 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %3, i64 0, i32 0, i32 0, i32 1
  %11 = load i32, i32* %10, align 4
  store i32 0, i32* %10, align 4
  %12 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %3, i64 0, i32 0, i32 0, i32 2
  %13 = load i32, i32* %12, align 4
  store i32 0, i32* %12, align 4
  %14 = bitcast i8* %5 to i32 (...)***
  %15 = getelementptr inbounds i8, i8* %5, i64 8
  %16 = bitcast i8* %15 to i64**
  store i64* null, i64** %16, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink10NDEFRecordE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %14, align 8
  %17 = getelementptr inbounds i8, i8* %5, i64 16
  %18 = bitcast i8* %17 to i32*
  store i32 %7, i32* %18, align 8
  %19 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %20 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %19, align 8
  %21 = getelementptr inbounds i8, i8* %5, i64 24
  %22 = bitcast i8* %21 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %20, %"class.WTF::StringImpl"** %22, align 8
  %23 = icmp eq %"class.WTF::StringImpl"* %20, null
  br i1 %23, label %41, label %24

24:                                               ; preds = %4
  %25 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %20, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %26 = load atomic i32, i32* %25 monotonic, align 4
  %27 = and i32 %26, 2
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %41

29:                                               ; preds = %24
  %30 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %20, i64 0, i32 0
  %31 = load i32, i32* %30, align 4
  %32 = zext i32 %31 to i33
  %33 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %32, i33 1) #12
  %34 = extractvalue { i33, i1 } %33, 1
  %35 = extractvalue { i33, i1 } %33, 0
  %36 = icmp slt i33 %35, 0
  %37 = or i1 %34, %36
  br i1 %37, label %38, label %39, !prof !2

38:                                               ; preds = %29
  tail call void @llvm.trap() #12
  unreachable

39:                                               ; preds = %29
  %40 = trunc i33 %35 to i32
  store i32 %40, i32* %30, align 4
  br label %41

41:                                               ; preds = %39, %24, %4
  %42 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %43 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %42, align 8
  %44 = getelementptr inbounds i8, i8* %5, i64 32
  %45 = bitcast i8* %44 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %43, %"class.WTF::StringImpl"** %45, align 8
  %46 = icmp eq %"class.WTF::StringImpl"* %43, null
  br i1 %46, label %64, label %47

47:                                               ; preds = %41
  %48 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %43, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %49 = load atomic i32, i32* %48 monotonic, align 4
  %50 = and i32 %49, 2
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %64

52:                                               ; preds = %47
  %53 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %43, i64 0, i32 0
  %54 = load i32, i32* %53, align 4
  %55 = zext i32 %54 to i33
  %56 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %55, i33 1) #12
  %57 = extractvalue { i33, i1 } %56, 1
  %58 = extractvalue { i33, i1 } %56, 0
  %59 = icmp slt i33 %58, 0
  %60 = or i1 %57, %59
  br i1 %60, label %61, label %62, !prof !2

61:                                               ; preds = %52
  tail call void @llvm.trap() #12
  unreachable

62:                                               ; preds = %52
  %63 = trunc i33 %58 to i32
  store i32 %63, i32* %53, align 4
  br label %64

64:                                               ; preds = %62, %47, %41
  %65 = getelementptr inbounds i8, i8* %5, i64 40
  %66 = getelementptr inbounds i8, i8* %5, i64 64
  %67 = getelementptr inbounds i8, i8* %5, i64 72
  %68 = bitcast i8* %67 to i32*
  %69 = getelementptr inbounds i8, i8* %5, i64 76
  %70 = bitcast i8* %69 to i32*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %65, i8 0, i64 24, i1 false) #12
  %71 = bitcast i8* %66 to i64*
  store atomic i64 %9, i64* %71 monotonic, align 8
  store i32 %11, i32* %68, align 4
  store i32 %13, i32* %70, align 4
  %72 = getelementptr inbounds i8, i8* %5, i64 80
  %73 = bitcast i8* %72 to %"class.blink::NDEFMessage"**
  store %"class.blink::NDEFMessage"* null, %"class.blink::NDEFMessage"** %73, align 8
  %74 = getelementptr inbounds i8, i8* %5, i64 -4
  %75 = bitcast i8* %74 to i16*
  %76 = load atomic i16, i16* %75 monotonic, align 2
  %77 = or i16 %76, 1
  store atomic i16 %77, i16* %75 release, align 2
  ret %"class.blink::NDEFRecord"* %6
}

declare void @_ZN5blink11NDEFMessageC1ERKN6device5mojom5blink11NDEFMessageE(%"class.blink::NDEFMessage"*, %"class.device::mojom::blink::NDEFMessage"* dereferenceable(16)) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_11NDEFMessageEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::NDEFMessage"*
  tail call void @_ZNK5blink11NDEFMessage5TraceEPNS_7VisitorE(%"class.blink::NDEFMessage"* %3, %"class.blink::Visitor"* %0) #12
  ret void
}

declare void @_ZNK5blink11NDEFMessage5TraceEPNS_7VisitorE(%"class.blink::NDEFMessage"*, %"class.blink::Visitor"*) unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { cold noreturn nounwind }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nounwind }
attributes #10 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noinline noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind }
attributes #13 = { nounwind readonly }
attributes #14 = { noreturn }
attributes #15 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!"branch_weights", i32 2000, i32 1}
!4 = !{!5}
!5 = distinct !{!5, !6, !"_ZN5blink12_GLOBAL__N_121GetUTF8DataFromStringERKN3WTF6StringE: argument 0"}
!6 = distinct !{!6, !"_ZN5blink12_GLOBAL__N_121GetUTF8DataFromStringERKN3WTF6StringE"}
!7 = !{!"branch_weights", i32 1, i32 1048575}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZN5blink12_GLOBAL__N_121GetUTF8DataFromStringERKN3WTF6StringE: argument 0"}
!10 = distinct !{!10, !"_ZN5blink12_GLOBAL__N_121GetUTF8DataFromStringERKN3WTF6StringE"}
!11 = !{!12}
!12 = distinct !{!12, !13}
!13 = distinct !{!13, !"LVerDomain"}
!14 = !{!15}
!15 = distinct !{!15, !13}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.isvectorized", i32 1}
!18 = distinct !{!18, !19}
!19 = !{!"llvm.loop.unroll.disable"}
!20 = distinct !{!20, !17}
!21 = !{i8 0, i8 2}
!22 = !{i32 -2135516517}
!23 = !{i32 -2135516496}
