; ModuleID = '../../third_party/blink/renderer/platform/heap/impl/persistent_node.cc'
source_filename = "../../third_party/blink/renderer/platform/heap/impl/persistent_node.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::ThreadSpecific" = type { %"class.blink::ThreadState"**, %"class.base::ThreadLocalStorage::Slot" }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr", i32, [4 x i8], %"class.std::__1::unique_ptr.122", %"class.std::__1::unique_ptr.122", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.132", %"class.std::__1::unique_ptr.138", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.150", %"class.std::__1::unique_ptr.156", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.162", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.4", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.22", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.35", %"class.std::__1::unique_ptr.42", %"class.std::__1::unique_ptr.42", %"class.std::__1::unique_ptr.49", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.63", %"class.std::__1::unique_ptr.63", %"class.std::__1::unique_ptr.70", %"class.std::__1::unique_ptr.77", %"class.std::__1::unique_ptr.84", %"class.std::__1::unique_ptr.107", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.0" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.4" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.10" = type { %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.16" = type { %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.22" = type { %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.28" = type { %"class.std::__1::__compressed_pair.29" }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.31" }
%"struct.std::__1::__atomic_base.31" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }
%"class.std::__1::unique_ptr.35" = type { %"class.std::__1::__compressed_pair.36" }
%"class.std::__1::__compressed_pair.36" = type { %"struct.std::__1::__compressed_pair_elem.37" }
%"struct.std::__1::__compressed_pair_elem.37" = type { %"class.blink::Worklist.38"* }
%"class.blink::Worklist.38" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.42" = type { %"class.std::__1::__compressed_pair.43" }
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"struct.std::__1::__compressed_pair_elem.44" = type { %"class.blink::Worklist.45"* }
%"class.blink::Worklist.45" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.49" = type { %"class.std::__1::__compressed_pair.50" }
%"class.std::__1::__compressed_pair.50" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"struct.std::__1::__compressed_pair_elem.51" = type { %"class.blink::Worklist.52"* }
%"class.blink::Worklist.52" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.56" = type { %"class.std::__1::__compressed_pair.57" }
%"class.std::__1::__compressed_pair.57" = type { %"struct.std::__1::__compressed_pair_elem.58" }
%"struct.std::__1::__compressed_pair_elem.58" = type { %"class.blink::Worklist.59"* }
%"class.blink::Worklist.59" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.63" = type { %"class.std::__1::__compressed_pair.64" }
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { %"class.blink::Worklist.66"* }
%"class.blink::Worklist.66" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.70" = type { %"class.std::__1::__compressed_pair.71" }
%"class.std::__1::__compressed_pair.71" = type { %"struct.std::__1::__compressed_pair_elem.72" }
%"struct.std::__1::__compressed_pair_elem.72" = type { %"class.blink::Worklist.73"* }
%"class.blink::Worklist.73" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.77" = type { %"class.std::__1::__compressed_pair.78" }
%"class.std::__1::__compressed_pair.78" = type { %"struct.std::__1::__compressed_pair_elem.79" }
%"struct.std::__1::__compressed_pair_elem.79" = type { %"class.blink::Worklist.80"* }
%"class.blink::Worklist.80" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.84" = type { %"class.std::__1::__compressed_pair.85" }
%"class.std::__1::__compressed_pair.85" = type { %"struct.std::__1::__compressed_pair_elem.86" }
%"struct.std::__1::__compressed_pair_elem.86" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.87", %"class.std::__1::__compressed_pair.94", %"class.std::__1::__compressed_pair.99", %"class.std::__1::__compressed_pair.101", [4 x i8] }>
%"class.std::__1::unique_ptr.87" = type { %"class.std::__1::__compressed_pair.88" }
%"class.std::__1::__compressed_pair.88" = type { %"struct.std::__1::__compressed_pair_elem.89", %"struct.std::__1::__compressed_pair_elem.90" }
%"struct.std::__1::__compressed_pair_elem.89" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.90" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.91" }
%"class.std::__1::__compressed_pair.91" = type { %"struct.std::__1::__compressed_pair_elem.92" }
%"struct.std::__1::__compressed_pair_elem.92" = type { i64 }
%"class.std::__1::__compressed_pair.94" = type { %"struct.std::__1::__compressed_pair_elem.95" }
%"struct.std::__1::__compressed_pair_elem.95" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.99" = type { %"struct.std::__1::__compressed_pair_elem.92" }
%"class.std::__1::__compressed_pair.101" = type { %"struct.std::__1::__compressed_pair_elem.102" }
%"struct.std::__1::__compressed_pair_elem.102" = type { float }
%"class.std::__1::unique_ptr.107" = type { %"class.std::__1::__compressed_pair.108" }
%"class.std::__1::__compressed_pair.108" = type { %"struct.std::__1::__compressed_pair_elem.109" }
%"struct.std::__1::__compressed_pair_elem.109" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.110", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.110" = type { %"class.std::__1::__compressed_pair.111" }
%"class.std::__1::__compressed_pair.111" = type { %"struct.std::__1::__compressed_pair_elem.112" }
%"struct.std::__1::__compressed_pair_elem.112" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.122" = type { %"class.std::__1::__compressed_pair.123" }
%"class.std::__1::__compressed_pair.123" = type { %"struct.std::__1::__compressed_pair_elem.124" }
%"struct.std::__1::__compressed_pair_elem.124" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.130" }
%"class.WTF::VectorBuffer.130" = type { %"class.WTF::VectorBufferBase.131" }
%"class.WTF::VectorBufferBase.131" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.132" = type { %"class.std::__1::__compressed_pair.133" }
%"class.std::__1::__compressed_pair.133" = type { %"struct.std::__1::__compressed_pair_elem.134" }
%"struct.std::__1::__compressed_pair_elem.134" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.138" = type { %"class.std::__1::__compressed_pair.139" }
%"class.std::__1::__compressed_pair.139" = type { %"struct.std::__1::__compressed_pair_elem.140" }
%"struct.std::__1::__compressed_pair_elem.140" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.144" }
%"class.std::__1::unique_ptr.144" = type { %"class.std::__1::__compressed_pair.145" }
%"class.std::__1::__compressed_pair.145" = type { %"struct.std::__1::__compressed_pair_elem.146" }
%"struct.std::__1::__compressed_pair_elem.146" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.38"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.45"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.52"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.59"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.66"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.166" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.166" = type { %"struct.std::__1::__compressed_pair_elem.167" }
%"struct.std::__1::__compressed_pair_elem.167" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.150" = type { %"class.std::__1::__compressed_pair.151" }
%"class.std::__1::__compressed_pair.151" = type { %"struct.std::__1::__compressed_pair_elem.152" }
%"struct.std::__1::__compressed_pair_elem.152" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.156" = type { %"class.std::__1::__compressed_pair.157" }
%"class.std::__1::__compressed_pair.157" = type { %"struct.std::__1::__compressed_pair_elem.158" }
%"struct.std::__1::__compressed_pair_elem.158" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.162" = type { %"struct.std::__1::__atomic_base.163" }
%"struct.std::__1::__atomic_base.163" = type { %"struct.std::__1::__cxx_atomic_impl.164" }
%"struct.std::__1::__cxx_atomic_impl.164" = type { %"struct.std::__1::__cxx_atomic_base_impl.165" }
%"struct.std::__1::__cxx_atomic_base_impl.165" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::ThreadLocalStorage::Slot" = type { i32, i32 }
%"class.blink::PersistentBase" = type { %"class.blink::(anonymous namespace)::DummyGCBase"*, %"class.blink::PersistentNodePtr" }
%"class.blink::(anonymous namespace)::DummyGCBase" = type { i8 }
%"class.blink::PersistentNodePtr" = type { %"class.blink::PersistentNode"* }
%"class.blink::PersistentBase.171" = type { %"class.blink::(anonymous namespace)::DummyGCBase"*, %"class.blink::CrossThreadPersistentNodePtr" }
%"class.blink::CrossThreadPersistentNodePtr" = type { %"struct.std::__1::atomic.172" }
%"struct.std::__1::atomic.172" = type { %"struct.std::__1::__atomic_base.173" }
%"struct.std::__1::__atomic_base.173" = type { %"struct.std::__1::__cxx_atomic_impl.174" }
%"struct.std::__1::__cxx_atomic_impl.174" = type { %"struct.std::__1::__cxx_atomic_base_impl.175" }
%"struct.std::__1::__cxx_atomic_base_impl.175" = type { %"class.blink::PersistentNode"* }
%"class.blink::CrossThreadPersistentRegion" = type { %"class.blink::PersistentRegionBase" }

@_ZN5blink11ThreadState16thread_specific_E = external local_unnamed_addr global %"class.WTF::ThreadSpecific"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv = private unnamed_addr constant [68 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::ThreadState *]\00", align 1

@_ZN5blink20PersistentRegionBaseD1Ev = hidden unnamed_addr alias void (%"class.blink::PersistentRegionBase"*), void (%"class.blink::PersistentRegionBase"*)* @_ZN5blink20PersistentRegionBaseD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink20PersistentRegionBaseD2Ev(%"class.blink::PersistentRegionBase"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::PersistentRegionBase", %"class.blink::PersistentRegionBase"* %0, i64 0, i32 1
  %3 = load %"struct.blink::PersistentNodeSlots"*, %"struct.blink::PersistentNodeSlots"** %2, align 8
  %4 = icmp eq %"struct.blink::PersistentNodeSlots"* %3, null
  br i1 %4, label %11, label %5

5:                                                ; preds = %1, %5
  %6 = phi %"struct.blink::PersistentNodeSlots"* [ %9, %5 ], [ %3, %1 ]
  %7 = bitcast %"struct.blink::PersistentNodeSlots"* %6 to i8*
  %8 = getelementptr inbounds %"struct.blink::PersistentNodeSlots", %"struct.blink::PersistentNodeSlots"* %6, i64 0, i32 0
  %9 = load %"struct.blink::PersistentNodeSlots"*, %"struct.blink::PersistentNodeSlots"** %8, align 8
  tail call void @free(i8* %7) #6
  %10 = icmp eq %"struct.blink::PersistentNodeSlots"* %9, null
  br i1 %10, label %11, label %5

11:                                               ; preds = %5, %1
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK5blink20PersistentRegionBase10NodesInUseEv(%"class.blink::PersistentRegionBase"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::PersistentRegionBase", %"class.blink::PersistentRegionBase"* %0, i64 0, i32 1
  %3 = load %"struct.blink::PersistentNodeSlots"*, %"struct.blink::PersistentNodeSlots"** %2, align 8
  %4 = icmp eq %"struct.blink::PersistentNodeSlots"* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1, %12
  %6 = phi %"struct.blink::PersistentNodeSlots"* [ %14, %12 ], [ %3, %1 ]
  %7 = phi i64 [ %41, %12 ], [ 0, %1 ]
  br label %16

8:                                                ; preds = %12
  %9 = trunc i64 %41 to i32
  br label %10

10:                                               ; preds = %8, %1
  %11 = phi i32 [ 0, %1 ], [ %9, %8 ]
  ret i32 %11

12:                                               ; preds = %16
  %13 = getelementptr inbounds %"struct.blink::PersistentNodeSlots", %"struct.blink::PersistentNodeSlots"* %6, i64 0, i32 0
  %14 = load %"struct.blink::PersistentNodeSlots"*, %"struct.blink::PersistentNodeSlots"** %13, align 8
  %15 = icmp eq %"struct.blink::PersistentNodeSlots"* %14, null
  br i1 %15, label %8, label %5

16:                                               ; preds = %16, %5
  %17 = phi i64 [ 0, %5 ], [ %42, %16 ]
  %18 = phi i64 [ %7, %5 ], [ %41, %16 ]
  %19 = getelementptr inbounds %"struct.blink::PersistentNodeSlots", %"struct.blink::PersistentNodeSlots"* %6, i64 0, i32 1, i64 %17, i32 1
  %20 = load void (%"class.blink::Visitor"*, i8*)*, void (%"class.blink::Visitor"*, i8*)** %19, align 8
  %21 = icmp ne void (%"class.blink::Visitor"*, i8*)* %20, null
  %22 = zext i1 %21 to i64
  %23 = add i64 %18, %22
  %24 = or i64 %17, 1
  %25 = getelementptr inbounds %"struct.blink::PersistentNodeSlots", %"struct.blink::PersistentNodeSlots"* %6, i64 0, i32 1, i64 %24, i32 1
  %26 = load void (%"class.blink::Visitor"*, i8*)*, void (%"class.blink::Visitor"*, i8*)** %25, align 8
  %27 = icmp ne void (%"class.blink::Visitor"*, i8*)* %26, null
  %28 = zext i1 %27 to i64
  %29 = add i64 %23, %28
  %30 = or i64 %17, 2
  %31 = getelementptr inbounds %"struct.blink::PersistentNodeSlots", %"struct.blink::PersistentNodeSlots"* %6, i64 0, i32 1, i64 %30, i32 1
  %32 = load void (%"class.blink::Visitor"*, i8*)*, void (%"class.blink::Visitor"*, i8*)** %31, align 8
  %33 = icmp ne void (%"class.blink::Visitor"*, i8*)* %32, null
  %34 = zext i1 %33 to i64
  %35 = add i64 %29, %34
  %36 = or i64 %17, 3
  %37 = getelementptr inbounds %"struct.blink::PersistentNodeSlots", %"struct.blink::PersistentNodeSlots"* %6, i64 0, i32 1, i64 %36, i32 1
  %38 = load void (%"class.blink::Visitor"*, i8*)*, void (%"class.blink::Visitor"*, i8*)** %37, align 8
  %39 = icmp ne void (%"class.blink::Visitor"*, i8*)* %38, null
  %40 = zext i1 %39 to i64
  %41 = add i64 %35, %40
  %42 = add nuw nsw i64 %17, 4
  %43 = icmp eq i64 %42, 256
  br i1 %43, label %12, label %16
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink20PersistentRegionBase15EnsureNodeSlotsEv(%"class.blink::PersistentRegionBase"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = tail call noalias i8* @malloc(i64 4104) #6
  %3 = getelementptr i8, i8* %2, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 4096, i1 false) #6
  %4 = bitcast i8* %3 to [256 x %"class.blink::PersistentNode"]*
  %5 = getelementptr inbounds %"class.blink::PersistentRegionBase", %"class.blink::PersistentRegionBase"* %0, i64 0, i32 0
  %6 = bitcast %"class.blink::PersistentRegionBase"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  br label %14

8:                                                ; preds = %14
  store %"class.blink::PersistentNode"* %32, %"class.blink::PersistentNode"** %5, align 8
  %9 = getelementptr inbounds %"class.blink::PersistentRegionBase", %"class.blink::PersistentRegionBase"* %0, i64 0, i32 1
  %10 = bitcast %"struct.blink::PersistentNodeSlots"** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast i8* %2 to i64*
  store i64 %11, i64* %12, align 8
  %13 = bitcast %"struct.blink::PersistentNodeSlots"** %9 to i8**
  store i8* %2, i8** %13, align 8
  ret void

14:                                               ; preds = %14, %1
  %15 = phi i64 [ %7, %1 ], [ %37, %14 ]
  %16 = phi i64 [ 0, %1 ], [ %35, %14 ]
  %17 = getelementptr inbounds [256 x %"class.blink::PersistentNode"], [256 x %"class.blink::PersistentNode"]* %4, i64 0, i64 %16
  %18 = bitcast %"class.blink::PersistentNode"* %17 to i64*
  store i64 %15, i64* %18, align 8
  %19 = getelementptr inbounds [256 x %"class.blink::PersistentNode"], [256 x %"class.blink::PersistentNode"]* %4, i64 0, i64 %16, i32 1
  store void (%"class.blink::Visitor"*, i8*)* null, void (%"class.blink::Visitor"*, i8*)** %19, align 8
  %20 = or i64 %16, 1
  %21 = ptrtoint %"class.blink::PersistentNode"* %17 to i64
  %22 = getelementptr inbounds [256 x %"class.blink::PersistentNode"], [256 x %"class.blink::PersistentNode"]* %4, i64 0, i64 %20
  %23 = bitcast %"class.blink::PersistentNode"* %22 to i64*
  store i64 %21, i64* %23, align 8
  %24 = getelementptr inbounds [256 x %"class.blink::PersistentNode"], [256 x %"class.blink::PersistentNode"]* %4, i64 0, i64 %20, i32 1
  store void (%"class.blink::Visitor"*, i8*)* null, void (%"class.blink::Visitor"*, i8*)** %24, align 8
  %25 = or i64 %16, 2
  %26 = ptrtoint %"class.blink::PersistentNode"* %22 to i64
  %27 = getelementptr inbounds [256 x %"class.blink::PersistentNode"], [256 x %"class.blink::PersistentNode"]* %4, i64 0, i64 %25
  %28 = bitcast %"class.blink::PersistentNode"* %27 to i64*
  store i64 %26, i64* %28, align 8
  %29 = getelementptr inbounds [256 x %"class.blink::PersistentNode"], [256 x %"class.blink::PersistentNode"]* %4, i64 0, i64 %25, i32 1
  store void (%"class.blink::Visitor"*, i8*)* null, void (%"class.blink::Visitor"*, i8*)** %29, align 8
  %30 = or i64 %16, 3
  %31 = ptrtoint %"class.blink::PersistentNode"* %27 to i64
  %32 = getelementptr inbounds [256 x %"class.blink::PersistentNode"], [256 x %"class.blink::PersistentNode"]* %4, i64 0, i64 %30
  %33 = bitcast %"class.blink::PersistentNode"* %32 to i64*
  store i64 %31, i64* %33, align 8
  %34 = getelementptr inbounds [256 x %"class.blink::PersistentNode"], [256 x %"class.blink::PersistentNode"]* %4, i64 0, i64 %30, i32 1
  store void (%"class.blink::Visitor"*, i8*)* null, void (%"class.blink::Visitor"*, i8*)** %34, align 8
  %35 = add nuw nsw i64 %16, 4
  %36 = icmp eq i64 %35, 256
  %37 = ptrtoint %"class.blink::PersistentNode"* %32 to i64
  br i1 %36, label %8, label %14
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink20PersistentRegionBase14TraceNodesImplEPNS_7VisitorEPFbS2_PNS_14PersistentNodeEE(%"class.blink::PersistentRegionBase"* nocapture, %"class.blink::Visitor"*, i1 (%"class.blink::Visitor"*, %"class.blink::PersistentNode"*)* nocapture) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.blink::PersistentRegionBase", %"class.blink::PersistentRegionBase"* %0, i64 0, i32 0
  store %"class.blink::PersistentNode"* null, %"class.blink::PersistentNode"** %4, align 8
  %5 = getelementptr inbounds %"class.blink::PersistentRegionBase", %"class.blink::PersistentRegionBase"* %0, i64 0, i32 1
  %6 = load %"struct.blink::PersistentNodeSlots"*, %"struct.blink::PersistentNodeSlots"** %5, align 8
  %7 = icmp eq %"struct.blink::PersistentNodeSlots"* %6, null
  br i1 %7, label %61, label %8

8:                                                ; preds = %3
  %9 = bitcast %"class.blink::PersistentRegionBase"* %0 to i64*
  br label %10

10:                                               ; preds = %8, %57
  %11 = phi %"struct.blink::PersistentNodeSlots"* [ %6, %8 ], [ %59, %57 ]
  %12 = phi %"struct.blink::PersistentNodeSlots"** [ %5, %8 ], [ %58, %57 ]
  br label %15

13:                                               ; preds = %35
  %14 = icmp eq i32 %38, 256
  br i1 %14, label %41, label %48

15:                                               ; preds = %35, %10
  %16 = phi i64 [ 0, %10 ], [ %39, %35 ]
  %17 = phi i32 [ 0, %10 ], [ %38, %35 ]
  %18 = phi %"class.blink::PersistentNode"* [ null, %10 ], [ %37, %35 ]
  %19 = phi %"class.blink::PersistentNode"* [ null, %10 ], [ %36, %35 ]
  %20 = getelementptr inbounds %"struct.blink::PersistentNodeSlots", %"struct.blink::PersistentNodeSlots"* %11, i64 0, i32 1, i64 %16
  %21 = getelementptr inbounds %"struct.blink::PersistentNodeSlots", %"struct.blink::PersistentNodeSlots"* %11, i64 0, i32 1, i64 %16, i32 1
  %22 = load void (%"class.blink::Visitor"*, i8*)*, void (%"class.blink::Visitor"*, i8*)** %21, align 8
  %23 = icmp eq void (%"class.blink::Visitor"*, i8*)* %22, null
  br i1 %23, label %24, label %29

24:                                               ; preds = %15
  %25 = icmp eq %"class.blink::PersistentNode"* %19, null
  %26 = select i1 %25, %"class.blink::PersistentNode"* %20, %"class.blink::PersistentNode"* %18
  %27 = bitcast %"class.blink::PersistentNode"* %20 to %"class.blink::PersistentNode"**
  store %"class.blink::PersistentNode"* %19, %"class.blink::PersistentNode"** %27, align 8
  store void (%"class.blink::Visitor"*, i8*)* null, void (%"class.blink::Visitor"*, i8*)** %21, align 8
  %28 = add nsw i32 %17, 1
  br label %35

29:                                               ; preds = %15
  %30 = tail call zeroext i1 %2(%"class.blink::Visitor"* %1, %"class.blink::PersistentNode"* %20) #6
  br i1 %30, label %31, label %35

31:                                               ; preds = %29
  %32 = load void (%"class.blink::Visitor"*, i8*)*, void (%"class.blink::Visitor"*, i8*)** %21, align 8
  %33 = getelementptr inbounds %"class.blink::PersistentNode", %"class.blink::PersistentNode"* %20, i64 0, i32 0
  %34 = load i8*, i8** %33, align 8
  tail call void %32(%"class.blink::Visitor"* %1, i8* %34) #6
  br label %35

35:                                               ; preds = %24, %31, %29
  %36 = phi %"class.blink::PersistentNode"* [ %19, %29 ], [ %20, %24 ], [ %19, %31 ]
  %37 = phi %"class.blink::PersistentNode"* [ %18, %29 ], [ %26, %24 ], [ %18, %31 ]
  %38 = phi i32 [ %17, %29 ], [ %28, %24 ], [ %17, %31 ]
  %39 = add nuw nsw i64 %16, 1
  %40 = icmp eq i64 %39, 256
  br i1 %40, label %13, label %15

41:                                               ; preds = %13
  %42 = bitcast %"struct.blink::PersistentNodeSlots"* %11 to i64*
  %43 = getelementptr inbounds %"struct.blink::PersistentNodeSlots", %"struct.blink::PersistentNodeSlots"* %11, i64 0, i32 0
  %44 = load i64, i64* %42, align 8
  %45 = bitcast %"struct.blink::PersistentNodeSlots"** %12 to i64*
  store i64 %44, i64* %45, align 8
  %46 = load %"struct.blink::PersistentNodeSlots"*, %"struct.blink::PersistentNodeSlots"** %43, align 8
  %47 = bitcast %"struct.blink::PersistentNodeSlots"* %11 to i8*
  tail call void @free(i8* %47) #6
  br label %57

48:                                               ; preds = %13
  %49 = icmp eq %"class.blink::PersistentNode"* %37, null
  br i1 %49, label %54, label %50

50:                                               ; preds = %48
  %51 = load i64, i64* %9, align 8
  %52 = bitcast %"class.blink::PersistentNode"* %37 to i64*
  store i64 %51, i64* %52, align 8
  %53 = getelementptr inbounds %"class.blink::PersistentNode", %"class.blink::PersistentNode"* %37, i64 0, i32 1
  store void (%"class.blink::Visitor"*, i8*)* null, void (%"class.blink::Visitor"*, i8*)** %53, align 8
  store %"class.blink::PersistentNode"* %36, %"class.blink::PersistentNode"** %4, align 8
  br label %54

54:                                               ; preds = %48, %50
  %55 = getelementptr inbounds %"struct.blink::PersistentNodeSlots", %"struct.blink::PersistentNodeSlots"* %11, i64 0, i32 0
  %56 = load %"struct.blink::PersistentNodeSlots"*, %"struct.blink::PersistentNodeSlots"** %55, align 8
  br label %57

57:                                               ; preds = %54, %41
  %58 = phi %"struct.blink::PersistentNodeSlots"** [ %12, %41 ], [ %55, %54 ]
  %59 = phi %"struct.blink::PersistentNodeSlots"* [ %46, %41 ], [ %56, %54 ]
  %60 = icmp eq %"struct.blink::PersistentNodeSlots"* %59, null
  br i1 %60, label %61, label %10

61:                                               ; preds = %57, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16PersistentRegion11ReleaseNodeEPNS_14PersistentNodeE(%"class.blink::PersistentRegion"* nocapture readnone, %"class.blink::PersistentNode"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.blink::PersistentNode"* %1 to %"class.blink::PersistentBase"**
  %4 = load %"class.blink::PersistentBase"*, %"class.blink::PersistentBase"** %3, align 8
  %5 = getelementptr inbounds %"class.blink::PersistentBase", %"class.blink::PersistentBase"* %4, i64 0, i32 0
  store %"class.blink::(anonymous namespace)::DummyGCBase"* null, %"class.blink::(anonymous namespace)::DummyGCBase"** %5, align 8
  %6 = getelementptr inbounds %"class.blink::PersistentBase", %"class.blink::PersistentBase"* %4, i64 0, i32 1, i32 0
  %7 = load %"class.blink::PersistentNode"*, %"class.blink::PersistentNode"** %6, align 8
  %8 = icmp eq %"class.blink::PersistentNode"* %7, null
  br i1 %8, label %28, label %9

9:                                                ; preds = %2
  %10 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %11 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %10, i64 0, i32 1
  %12 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %11) #6
  %13 = icmp eq i8* %12, null
  br i1 %13, label %14, label %16, !prof !2

14:                                               ; preds = %9
  %15 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #6
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %11, i8* %15) #6
  br label %16

16:                                               ; preds = %14, %9
  %17 = phi i8* [ %15, %14 ], [ %12, %9 ]
  %18 = bitcast i8* %17 to %"class.blink::ThreadState"**
  %19 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %18, align 8
  %20 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %19, i64 0, i32 3, i32 0, i32 0, i32 0
  %21 = load %"class.blink::PersistentRegion"*, %"class.blink::PersistentRegion"** %20, align 8
  %22 = load %"class.blink::PersistentNode"*, %"class.blink::PersistentNode"** %6, align 8
  %23 = getelementptr inbounds %"class.blink::PersistentRegion", %"class.blink::PersistentRegion"* %21, i64 0, i32 0, i32 0
  %24 = bitcast %"class.blink::PersistentRegion"* %21 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = bitcast %"class.blink::PersistentNode"* %22 to i64*
  store i64 %25, i64* %26, align 8
  %27 = getelementptr inbounds %"class.blink::PersistentNode", %"class.blink::PersistentNode"* %22, i64 0, i32 1
  store void (%"class.blink::Visitor"*, i8*)* null, void (%"class.blink::Visitor"*, i8*)** %27, align 8
  store %"class.blink::PersistentNode"* %22, %"class.blink::PersistentNode"** %23, align 8
  store %"class.blink::PersistentNode"* null, %"class.blink::PersistentNode"** %6, align 8
  br label %28

28:                                               ; preds = %2, %16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16PersistentRegion32PrepareForThreadStateTerminationEPNS_11ThreadStateE(%"class.blink::PersistentRegion"* nocapture readonly, %"class.blink::ThreadState"* nocapture readnone) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::PersistentRegion", %"class.blink::PersistentRegion"* %0, i64 0, i32 0, i32 1
  %4 = load %"struct.blink::PersistentNodeSlots"*, %"struct.blink::PersistentNodeSlots"** %3, align 8
  %5 = icmp eq %"struct.blink::PersistentNodeSlots"* %4, null
  br i1 %5, label %47, label %6

6:                                                ; preds = %2, %8
  %7 = phi %"struct.blink::PersistentNodeSlots"* [ %10, %8 ], [ %4, %2 ]
  br label %12

8:                                                ; preds = %44
  %9 = getelementptr inbounds %"struct.blink::PersistentNodeSlots", %"struct.blink::PersistentNodeSlots"* %7, i64 0, i32 0
  %10 = load %"struct.blink::PersistentNodeSlots"*, %"struct.blink::PersistentNodeSlots"** %9, align 8
  %11 = icmp eq %"struct.blink::PersistentNodeSlots"* %10, null
  br i1 %11, label %47, label %6

12:                                               ; preds = %44, %6
  %13 = phi i64 [ 0, %6 ], [ %45, %44 ]
  %14 = getelementptr inbounds %"struct.blink::PersistentNodeSlots", %"struct.blink::PersistentNodeSlots"* %7, i64 0, i32 1, i64 %13, i32 1
  %15 = load void (%"class.blink::Visitor"*, i8*)*, void (%"class.blink::Visitor"*, i8*)** %14, align 8
  %16 = icmp eq void (%"class.blink::Visitor"*, i8*)* %15, null
  br i1 %16, label %44, label %17

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"struct.blink::PersistentNodeSlots", %"struct.blink::PersistentNodeSlots"* %7, i64 0, i32 1, i64 %13, i32 0
  %19 = bitcast i8** %18 to %"class.blink::PersistentBase"**
  %20 = load %"class.blink::PersistentBase"*, %"class.blink::PersistentBase"** %19, align 8
  %21 = getelementptr inbounds %"class.blink::PersistentBase", %"class.blink::PersistentBase"* %20, i64 0, i32 0
  store %"class.blink::(anonymous namespace)::DummyGCBase"* null, %"class.blink::(anonymous namespace)::DummyGCBase"** %21, align 8
  %22 = getelementptr inbounds %"class.blink::PersistentBase", %"class.blink::PersistentBase"* %20, i64 0, i32 1, i32 0
  %23 = load %"class.blink::PersistentNode"*, %"class.blink::PersistentNode"** %22, align 8
  %24 = icmp eq %"class.blink::PersistentNode"* %23, null
  br i1 %24, label %44, label %25

25:                                               ; preds = %17
  %26 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %27 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %26, i64 0, i32 1
  %28 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %27) #6
  %29 = icmp eq i8* %28, null
  br i1 %29, label %30, label %32, !prof !2

30:                                               ; preds = %25
  %31 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #6
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %27, i8* %31) #6
  br label %32

32:                                               ; preds = %30, %25
  %33 = phi i8* [ %31, %30 ], [ %28, %25 ]
  %34 = bitcast i8* %33 to %"class.blink::ThreadState"**
  %35 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %34, align 8
  %36 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %35, i64 0, i32 3, i32 0, i32 0, i32 0
  %37 = load %"class.blink::PersistentRegion"*, %"class.blink::PersistentRegion"** %36, align 8
  %38 = load %"class.blink::PersistentNode"*, %"class.blink::PersistentNode"** %22, align 8
  %39 = getelementptr inbounds %"class.blink::PersistentRegion", %"class.blink::PersistentRegion"* %37, i64 0, i32 0, i32 0
  %40 = bitcast %"class.blink::PersistentRegion"* %37 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = bitcast %"class.blink::PersistentNode"* %38 to i64*
  store i64 %41, i64* %42, align 8
  %43 = getelementptr inbounds %"class.blink::PersistentNode", %"class.blink::PersistentNode"* %38, i64 0, i32 1
  store void (%"class.blink::Visitor"*, i8*)* null, void (%"class.blink::Visitor"*, i8*)** %43, align 8
  store %"class.blink::PersistentNode"* %38, %"class.blink::PersistentNode"** %39, align 8
  store %"class.blink::PersistentNode"* null, %"class.blink::PersistentNode"** %22, align 8
  br label %44

44:                                               ; preds = %32, %17, %12
  %45 = add nuw nsw i64 %13, 1
  %46 = icmp eq i64 %45, 256
  br i1 %46, label %8, label %12

47:                                               ; preds = %8, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink27CrossThreadPersistentRegion25ShouldTracePersistentNodeEPNS_7VisitorEPNS_14PersistentNodeE(%"class.blink::Visitor"* nocapture readonly, %"class.blink::PersistentNode"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.blink::PersistentNode"* %1 to %"class.blink::PersistentBase.171"**
  %4 = load %"class.blink::PersistentBase.171"*, %"class.blink::PersistentBase.171"** %3, align 8
  %5 = getelementptr inbounds %"class.blink::PersistentBase.171", %"class.blink::PersistentBase.171"* %4, i64 0, i32 0
  %6 = load %"class.blink::(anonymous namespace)::DummyGCBase"*, %"class.blink::(anonymous namespace)::DummyGCBase"** %5, align 8
  %7 = icmp eq %"class.blink::(anonymous namespace)::DummyGCBase"* %6, null
  br i1 %7, label %18, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.blink::(anonymous namespace)::DummyGCBase", %"class.blink::(anonymous namespace)::DummyGCBase"* %6, i64 0, i32 0
  %10 = getelementptr inbounds %"class.blink::Visitor", %"class.blink::Visitor"* %0, i64 0, i32 1
  %11 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %10, align 8
  %12 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %11, i64 0, i32 0, i32 0, i32 0, i32 0
  %13 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %12, align 8
  %14 = tail call %"class.blink::ThreadState"* @_ZN5blink11ThreadState10FromObjectEPKv(i8* %9) #6
  %15 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %14, i64 0, i32 0, i32 0, i32 0, i32 0
  %16 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %15, align 8
  %17 = icmp eq %"class.blink::ThreadHeap"* %13, %16
  br label %18

18:                                               ; preds = %2, %8
  %19 = phi i1 [ %17, %8 ], [ false, %2 ]
  ret i1 %19
}

declare %"class.blink::ThreadState"* @_ZN5blink11ThreadState10FromObjectEPKv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink27CrossThreadPersistentRegion32PrepareForThreadStateTerminationEPNS_11ThreadStateE(%"class.blink::CrossThreadPersistentRegion"* nocapture readonly, %"class.blink::ThreadState"* readnone) local_unnamed_addr #0 align 2 {
  %3 = tail call dereferenceable(40) %"class.WTF::Mutex"* @_ZN5blink11ProcessHeap26CrossThreadPersistentMutexEv() #6
  %4 = getelementptr inbounds %"class.WTF::Mutex", %"class.WTF::Mutex"* %3, i64 0, i32 0
  tail call void @_ZN3WTF9MutexBase4lockEv(%"class.WTF::MutexBase"* %4) #6
  %5 = getelementptr inbounds %"class.blink::CrossThreadPersistentRegion", %"class.blink::CrossThreadPersistentRegion"* %0, i64 0, i32 0, i32 1
  %6 = load %"struct.blink::PersistentNodeSlots"*, %"struct.blink::PersistentNodeSlots"** %5, align 8
  %7 = icmp eq %"struct.blink::PersistentNodeSlots"* %6, null
  br i1 %7, label %53, label %8

8:                                                ; preds = %2, %10
  %9 = phi %"struct.blink::PersistentNodeSlots"* [ %12, %10 ], [ %6, %2 ]
  br label %14

10:                                               ; preds = %50
  %11 = getelementptr inbounds %"struct.blink::PersistentNodeSlots", %"struct.blink::PersistentNodeSlots"* %9, i64 0, i32 0
  %12 = load %"struct.blink::PersistentNodeSlots"*, %"struct.blink::PersistentNodeSlots"** %11, align 8
  %13 = icmp eq %"struct.blink::PersistentNodeSlots"* %12, null
  br i1 %13, label %53, label %8

14:                                               ; preds = %50, %8
  %15 = phi i64 [ 0, %8 ], [ %51, %50 ]
  %16 = getelementptr inbounds %"struct.blink::PersistentNodeSlots", %"struct.blink::PersistentNodeSlots"* %9, i64 0, i32 1, i64 %15, i32 1
  %17 = load void (%"class.blink::Visitor"*, i8*)*, void (%"class.blink::Visitor"*, i8*)** %16, align 8
  %18 = icmp eq void (%"class.blink::Visitor"*, i8*)* %17, null
  br i1 %18, label %50, label %19

19:                                               ; preds = %14
  %20 = getelementptr inbounds %"struct.blink::PersistentNodeSlots", %"struct.blink::PersistentNodeSlots"* %9, i64 0, i32 1, i64 %15, i32 0
  %21 = bitcast i8** %20 to %"class.blink::PersistentBase.171"**
  %22 = load %"class.blink::PersistentBase.171"*, %"class.blink::PersistentBase.171"** %21, align 8
  %23 = getelementptr inbounds %"class.blink::PersistentBase.171", %"class.blink::PersistentBase.171"* %22, i64 0, i32 0
  %24 = load %"class.blink::(anonymous namespace)::DummyGCBase"*, %"class.blink::(anonymous namespace)::DummyGCBase"** %23, align 8
  %25 = icmp eq %"class.blink::(anonymous namespace)::DummyGCBase"* %24, null
  br i1 %25, label %50, label %26

26:                                               ; preds = %19
  %27 = ptrtoint %"class.blink::(anonymous namespace)::DummyGCBase"* %24 to i64
  %28 = and i64 %27, -131072
  %29 = inttoptr i64 %28 to i8*
  %30 = getelementptr inbounds i8, i8* %29, i64 4112
  %31 = bitcast i8* %30 to %"class.blink::BaseArena"**
  %32 = load %"class.blink::BaseArena"*, %"class.blink::BaseArena"** %31, align 16
  %33 = getelementptr inbounds %"class.blink::BaseArena", %"class.blink::BaseArena"* %32, i64 0, i32 5
  %34 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %33, align 8
  %35 = icmp eq %"class.blink::ThreadState"* %34, %1
  br i1 %35, label %36, label %50

36:                                               ; preds = %26
  store %"class.blink::(anonymous namespace)::DummyGCBase"* null, %"class.blink::(anonymous namespace)::DummyGCBase"** %23, align 8
  %37 = getelementptr inbounds %"class.blink::PersistentBase.171", %"class.blink::PersistentBase.171"* %22, i64 0, i32 1
  %38 = tail call dereferenceable(16) %"class.blink::CrossThreadPersistentRegion"* @_ZN5blink11ProcessHeap30GetCrossThreadPersistentRegionEv() #6
  %39 = bitcast %"class.blink::CrossThreadPersistentNodePtr"* %37 to i64*
  %40 = load atomic i64, i64* %39 monotonic, align 8
  %41 = inttoptr i64 %40 to %"class.blink::PersistentNode"*
  %42 = icmp eq i64 %40, 0
  br i1 %42, label %49, label %43

43:                                               ; preds = %36
  %44 = getelementptr inbounds %"class.blink::CrossThreadPersistentRegion", %"class.blink::CrossThreadPersistentRegion"* %38, i64 0, i32 0, i32 0
  %45 = bitcast %"class.blink::CrossThreadPersistentRegion"* %38 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = inttoptr i64 %40 to i64*
  store i64 %46, i64* %47, align 8
  %48 = getelementptr inbounds %"class.blink::PersistentNode", %"class.blink::PersistentNode"* %41, i64 0, i32 1
  store void (%"class.blink::Visitor"*, i8*)* null, void (%"class.blink::Visitor"*, i8*)** %48, align 8
  store %"class.blink::PersistentNode"* %41, %"class.blink::PersistentNode"** %44, align 8
  br label %49

49:                                               ; preds = %36, %43
  store atomic i64 0, i64* %39 release, align 8
  br label %50

50:                                               ; preds = %19, %49, %26, %14
  %51 = add nuw nsw i64 %15, 1
  %52 = icmp eq i64 %51, 256
  br i1 %52, label %10, label %14

53:                                               ; preds = %10, %2
  tail call void @_ZN3WTF9MutexBase6unlockEv(%"class.WTF::MutexBase"* %4) #6
  ret void
}

declare dereferenceable(40) %"class.WTF::Mutex"* @_ZN5blink11ProcessHeap26CrossThreadPersistentMutexEv() local_unnamed_addr #2

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #4

declare void @_ZN3WTF9MutexBase4lockEv(%"class.WTF::MutexBase"*) local_unnamed_addr #2

declare void @_ZN3WTF9MutexBase6unlockEv(%"class.WTF::MutexBase"*) local_unnamed_addr #2

declare i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64, i8*) local_unnamed_addr #2

declare i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"*) local_unnamed_addr #2

declare void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"*, i8*) local_unnamed_addr #2

declare dereferenceable(16) %"class.blink::CrossThreadPersistentRegion"* @_ZN5blink11ProcessHeap30GetCrossThreadPersistentRegionEv() local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
