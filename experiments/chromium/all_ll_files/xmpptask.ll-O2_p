; ModuleID = '../../third_party/libjingle_xmpp/xmpp/xmpptask.cc'
source_filename = "../../third_party/libjingle_xmpp/xmpp/xmpptask.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.jingle_xmpp::StaticQName" = type { i8*, i8* }
%"class.jingle_xmpp::XmppClientInterface" = type { i32 (...)**, %"class.sigslot::signal_with_thread_policy" }
%"class.sigslot::signal_with_thread_policy" = type { %"class.sigslot::_signal_base.base", [7 x i8] }
%"class.sigslot::_signal_base.base" = type <{ %"class.sigslot::_signal_base_interface", %"class.std::__1::list", %"class.std::__1::__list_iterator", i8 }>
%"class.sigslot::_signal_base_interface" = type { void (%"class.sigslot::_signal_base_interface"*, %"class.sigslot::has_slots_interface"*)*, void (%"class.sigslot::_signal_base_interface"*, %"class.sigslot::has_slots_interface"*, %"class.sigslot::has_slots_interface"*)* }
%"class.sigslot::has_slots_interface" = type { i32 (...)**, void (%"class.sigslot::has_slots_interface"*, %"class.sigslot::_signal_base_interface"*)*, void (%"class.sigslot::has_slots_interface"*, %"class.sigslot::_signal_base_interface"*)*, void (%"class.sigslot::has_slots_interface"*)* }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i64 }
%"class.std::__1::__list_iterator" = type { %"struct.std::__1::__list_node_base"* }
%"class.jingle_xmpp::XmppTask" = type { %"class.jingle_xmpp::XmppTaskBase", %"class.jingle_xmpp::XmppStanzaHandler", %"class.sigslot::has_slots", i8, %"class.std::__1::deque", %"class.std::__1::unique_ptr.26", %"class.std::__1::basic_string" }
%"class.jingle_xmpp::XmppTaskBase" = type { %"class.jingle_xmpp::XmppTaskParentInterface.base", %"class.jingle_xmpp::XmppTaskParentInterface"* }
%"class.jingle_xmpp::XmppTaskParentInterface.base" = type { %"class.jingle_xmpp::Task.base" }
%"class.jingle_xmpp::Task.base" = type <{ %"class.jingle_xmpp::TaskParent", i32, i8, i8, i8, i8, i8, [7 x i8], i64, i64, i32, i8, [3 x i8], i32 }>
%"class.jingle_xmpp::TaskParent" = type { i32 (...)**, %"class.jingle_xmpp::TaskParent"*, %"class.jingle_xmpp::TaskRunner"*, i8, %"class.std::__1::unique_ptr" }
%"class.jingle_xmpp::TaskRunner" = type opaque
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.std::__1::set"* }
%"class.std::__1::set" = type opaque
%"class.jingle_xmpp::XmppTaskParentInterface" = type { %"class.jingle_xmpp::Task.base", [4 x i8] }
%"class.jingle_xmpp::XmppStanzaHandler" = type { i32 (...)** }
%"class.sigslot::has_slots" = type { %"class.sigslot::has_slots_interface", %"class.std::__1::set.4" }
%"class.std::__1::set.4" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.5", %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.22" }
%"struct.std::__1::__split_buffer" = type { %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"***, %"class.std::__1::__compressed_pair.17" }
%"class.jingle_xmpp::XmlElement" = type <{ %"class.jingle_xmpp::XmlChild", %"class.jingle_xmpp::QName", %"class.jingle_xmpp::XmlAttr"*, %"class.jingle_xmpp::XmlAttr"*, %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"*, i8, [7 x i8] }>
%"class.jingle_xmpp::XmlChild" = type { i32 (...)**, %"class.jingle_xmpp::XmlChild"* }
%"class.jingle_xmpp::QName" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"class.jingle_xmpp::XmlAttr" = type { %"class.jingle_xmpp::XmlAttr"*, %"class.jingle_xmpp::QName", %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"class.jingle_xmpp::XmlElement"*** }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::unique_ptr.26" = type { %"class.std::__1::__compressed_pair.27" }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { %"class.jingle_xmpp::XmlElement"* }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::__list_node" = type { %"struct.std::__1::__list_node_base", %"class.sigslot::_opaque_connection" }
%"class.sigslot::_opaque_connection" = type { void (%"class.sigslot::_opaque_connection"*)*, %"class.sigslot::has_slots_interface"*, [16 x i8] }
%"class.jingle_xmpp::Task" = type <{ %"class.jingle_xmpp::TaskParent", i32, i8, i8, i8, i8, i8, [7 x i8], i64, i64, i32, i8, [3 x i8], i32, [4 x i8] }>
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::__tree_node" = type { %"class.std::__1::__tree_node_base.base", %"class.sigslot::_signal_base_interface"* }
%"class.std::__1::__tree_node_base.base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8 }>
%"class.jingle_xmpp::Jid" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"class.std::__1::__basic_string_common" = type { i8 }
%"struct.std::__1::__split_buffer.43" = type { %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"***, %"class.std::__1::__compressed_pair.44" }
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem.18", %"struct.std::__1::__compressed_pair_elem.45" }
%"struct.std::__1::__compressed_pair_elem.45" = type { %"class.std::__1::allocator.20"* }
%"class.std::__1::allocator.20" = type { i8 }

$_ZN11jingle_xmpp12XmppTaskBase9GetClientEv = comdat any

$_ZN11jingle_xmpp8XmppTask12HandleStanzaEPKNS_10XmlElementE = comdat any

$_ZThn96_N11jingle_xmpp8XmppTask12HandleStanzaEPKNS_10XmlElementE = comdat any

$_ZN7sigslot12_signal_baseINS_15single_threadedEE18do_slot_disconnectEPNS_22_signal_base_interfaceEPNS_19has_slots_interfaceE = comdat any

$_ZN7sigslot12_signal_baseINS_15single_threadedEE17do_slot_duplicateEPNS_22_signal_base_interfaceEPKNS_19has_slots_interfaceEPS5_ = comdat any

$_ZN7sigslot9has_slotsINS_15single_threadedEE17do_signal_connectEPNS_19has_slots_interfaceEPNS_22_signal_base_interfaceE = comdat any

$_ZN7sigslot9has_slotsINS_15single_threadedEE20do_signal_disconnectEPNS_19has_slots_interfaceEPNS_22_signal_base_interfaceE = comdat any

$_ZN7sigslot9has_slotsINS_15single_threadedEE17do_disconnect_allEPNS_19has_slots_interfaceE = comdat any

$_ZN7sigslot9has_slotsINS_15single_threadedEED2Ev = comdat any

$_ZN7sigslot9has_slotsINS_15single_threadedEED0Ev = comdat any

$_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_ = comdat any

$_ZNSt3__113__tree_removeIPNS_16__tree_node_baseIPvEEEEvT_S5_ = comdat any

$_ZNSt3__16__treeIPN7sigslot22_signal_base_interfaceENS_4lessIS3_EENS_9allocatorIS3_EEE7destroyEPNS_11__tree_nodeIS3_PvEE = comdat any

$_ZN7sigslot18_opaque_connection7emitterIN11jingle_xmpp8XmppTaskEJEEEvPKS0_DpT0_ = comdat any

$_ZNSt3__15dequeIPN11jingle_xmpp10XmlElementENS_9allocatorIS3_EEE19__add_back_capacityEv = comdat any

$_ZNSt3__114__split_bufferIPPN11jingle_xmpp10XmlElementENS_9allocatorIS4_EEE9push_backEOS4_ = comdat any

$_ZNSt3__114__split_bufferIPPN11jingle_xmpp10XmlElementENS_9allocatorIS4_EEE10push_frontEOS4_ = comdat any

$_ZNSt3__114__split_bufferIPPN11jingle_xmpp10XmlElementERNS_9allocatorIS4_EEE10push_frontERKS4_ = comdat any

$_ZTVN7sigslot9has_slotsINS_15single_threadedEEE = comdat any

@_ZTVN11jingle_xmpp19XmppClientInterfaceE = hidden unnamed_addr constant { [11 x i8*] } { [11 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.jingle_xmpp::XmppClientInterface"*)* @_ZN11jingle_xmpp19XmppClientInterfaceD2Ev to i8*), i8* bitcast (void (%"class.jingle_xmpp::XmppClientInterface"*)* @_ZN11jingle_xmpp19XmppClientInterfaceD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8
@_ZTVN11jingle_xmpp8XmppTaskE = hidden unnamed_addr constant { [13 x i8*], [5 x i8*], [4 x i8*] } { [13 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.jingle_xmpp::XmppTask"*)* @_ZN11jingle_xmpp8XmppTaskD2Ev to i8*), i8* bitcast (void (%"class.jingle_xmpp::XmppTask"*)* @_ZN11jingle_xmpp8XmppTaskD0Ev to i8*), i8* bitcast (void (%"class.std::__1::basic_string"*, %"class.jingle_xmpp::Task"*, i32)* @_ZNK11jingle_xmpp4Task12GetStateNameEi to i8*), i8* bitcast (i32 (%"class.jingle_xmpp::Task"*, i32)* @_ZN11jingle_xmpp4Task7ProcessEi to i8*), i8* bitcast (void (%"class.jingle_xmpp::XmppTask"*)* @_ZN11jingle_xmpp8XmppTask4StopEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (i32 (%"class.jingle_xmpp::Task"*)* @_ZN11jingle_xmpp4Task15ProcessResponseEv to i8*), i8* bitcast (%"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskBase"*)* @_ZN11jingle_xmpp12XmppTaskBase9GetClientEv to i8*), i8* bitcast (i1 (%"class.jingle_xmpp::XmppTask"*, %"class.jingle_xmpp::XmlElement"*)* @_ZN11jingle_xmpp8XmppTask12HandleStanzaEPKNS_10XmlElementE to i8*), i8* bitcast (void (%"class.jingle_xmpp::XmppTask"*)* @_ZN11jingle_xmpp8XmppTask12OnDisconnectEv to i8*), i8* bitcast (void (%"class.jingle_xmpp::XmppTask"*, %"class.jingle_xmpp::XmlElement"*)* @_ZN11jingle_xmpp8XmppTask11QueueStanzaEPKNS_10XmlElementE to i8*)], [5 x i8*] [i8* inttoptr (i64 -96 to i8*), i8* null, i8* bitcast (void (%"class.jingle_xmpp::XmppTask"*)* @_ZThn96_N11jingle_xmpp8XmppTaskD1Ev to i8*), i8* bitcast (void (%"class.jingle_xmpp::XmppTask"*)* @_ZThn96_N11jingle_xmpp8XmppTaskD0Ev to i8*), i8* bitcast (i1 (%"class.jingle_xmpp::XmppTask"*, %"class.jingle_xmpp::XmlElement"*)* @_ZThn96_N11jingle_xmpp8XmppTask12HandleStanzaEPKNS_10XmlElementE to i8*)], [4 x i8*] [i8* inttoptr (i64 -104 to i8*), i8* null, i8* bitcast (void (%"class.jingle_xmpp::XmppTask"*)* @_ZThn104_N11jingle_xmpp8XmppTaskD1Ev to i8*), i8* bitcast (void (%"class.jingle_xmpp::XmppTask"*)* @_ZThn104_N11jingle_xmpp8XmppTaskD0Ev to i8*)] }, align 8
@_ZN11jingle_xmpp5QN_IQE = external global %"struct.jingle_xmpp::StaticQName", align 8
@_ZN11jingle_xmpp7QN_TYPEE = external global %"struct.jingle_xmpp::StaticQName", align 8
@_ZN11jingle_xmpp5QN_TOE = external global %"struct.jingle_xmpp::StaticQName", align 8
@_ZN11jingle_xmpp5QN_IDE = external global %"struct.jingle_xmpp::StaticQName", align 8
@_ZN11jingle_xmpp10STR_RESULTE = external constant [0 x i8], align 1
@_ZN11jingle_xmpp7QN_FROME = external global %"struct.jingle_xmpp::StaticQName", align 8
@_ZTVN7sigslot9has_slotsINS_15single_threadedEEE = linkonce_odr hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sigslot::has_slots"*)* @_ZN7sigslot9has_slotsINS_15single_threadedEED2Ev to i8*), i8* bitcast (void (%"class.sigslot::has_slots"*)* @_ZN7sigslot9has_slotsINS_15single_threadedEED0Ev to i8*)] }, comdat, align 8

@_ZN11jingle_xmpp19XmppClientInterfaceD1Ev = hidden unnamed_addr alias void (%"class.jingle_xmpp::XmppClientInterface"*), void (%"class.jingle_xmpp::XmppClientInterface"*)* @_ZN11jingle_xmpp19XmppClientInterfaceD2Ev
@_ZN11jingle_xmpp8XmppTaskD1Ev = hidden unnamed_addr alias void (%"class.jingle_xmpp::XmppTask"*), void (%"class.jingle_xmpp::XmppTask"*)* @_ZN11jingle_xmpp8XmppTaskD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN11jingle_xmpp19XmppClientInterfaceC2Ev(%"class.jingle_xmpp::XmppClientInterface"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.jingle_xmpp::XmppClientInterface", %"class.jingle_xmpp::XmppClientInterface"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN11jingle_xmpp19XmppClientInterfaceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.jingle_xmpp::XmppClientInterface", %"class.jingle_xmpp::XmppClientInterface"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  store void (%"class.sigslot::_signal_base_interface"*, %"class.sigslot::has_slots_interface"*)* @_ZN7sigslot12_signal_baseINS_15single_threadedEE18do_slot_disconnectEPNS_22_signal_base_interfaceEPNS_19has_slots_interfaceE, void (%"class.sigslot::_signal_base_interface"*, %"class.sigslot::has_slots_interface"*)** %3, align 8
  %4 = getelementptr inbounds %"class.jingle_xmpp::XmppClientInterface", %"class.jingle_xmpp::XmppClientInterface"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  store void (%"class.sigslot::_signal_base_interface"*, %"class.sigslot::has_slots_interface"*, %"class.sigslot::has_slots_interface"*)* @_ZN7sigslot12_signal_baseINS_15single_threadedEE17do_slot_duplicateEPNS_22_signal_base_interfaceEPKNS_19has_slots_interfaceEPS5_, void (%"class.sigslot::_signal_base_interface"*, %"class.sigslot::has_slots_interface"*, %"class.sigslot::has_slots_interface"*)** %4, align 8
  %5 = getelementptr inbounds %"class.jingle_xmpp::XmppClientInterface", %"class.jingle_xmpp::XmppClientInterface"* %0, i64 0, i32 1, i32 0, i32 1
  %6 = getelementptr inbounds %"class.std::__1::list", %"class.std::__1::list"* %5, i64 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.std::__1::list", %"class.std::__1::list"* %5, i64 0, i32 0, i32 0, i32 0
  store %"struct.std::__1::__list_node_base"* %6, %"struct.std::__1::__list_node_base"** %7, align 8
  %8 = getelementptr inbounds %"class.jingle_xmpp::XmppClientInterface", %"class.jingle_xmpp::XmppClientInterface"* %0, i64 0, i32 1, i32 0, i32 1, i32 0, i32 0, i32 1
  store %"struct.std::__1::__list_node_base"* %6, %"struct.std::__1::__list_node_base"** %8, align 8
  %9 = getelementptr inbounds %"class.jingle_xmpp::XmppClientInterface", %"class.jingle_xmpp::XmppClientInterface"* %0, i64 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 0
  store i64 0, i64* %9, align 8
  %10 = getelementptr inbounds %"class.jingle_xmpp::XmppClientInterface", %"class.jingle_xmpp::XmppClientInterface"* %0, i64 0, i32 1, i32 0, i32 2, i32 0
  store %"struct.std::__1::__list_node_base"* %6, %"struct.std::__1::__list_node_base"** %10, align 8
  %11 = getelementptr inbounds %"class.jingle_xmpp::XmppClientInterface", %"class.jingle_xmpp::XmppClientInterface"* %0, i64 0, i32 1, i32 0, i32 3
  store i8 0, i8* %11, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11jingle_xmpp19XmppClientInterfaceD2Ev(%"class.jingle_xmpp::XmppClientInterface"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.jingle_xmpp::XmppClientInterface", %"class.jingle_xmpp::XmppClientInterface"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN11jingle_xmpp19XmppClientInterfaceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.jingle_xmpp::XmppClientInterface", %"class.jingle_xmpp::XmppClientInterface"* %0, i64 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %32, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.jingle_xmpp::XmppClientInterface", %"class.jingle_xmpp::XmppClientInterface"* %0, i64 0, i32 1, i32 0, i32 1, i32 0, i32 0, i32 1
  %8 = bitcast %"struct.std::__1::__list_node_base"** %7 to %"struct.std::__1::__list_node"**
  %9 = getelementptr inbounds %"class.jingle_xmpp::XmppClientInterface", %"class.jingle_xmpp::XmppClientInterface"* %0, i64 0, i32 1, i32 0, i32 0
  br label %10

10:                                               ; preds = %10, %6
  %11 = load %"struct.std::__1::__list_node"*, %"struct.std::__1::__list_node"** %8, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__list_node", %"struct.std::__1::__list_node"* %11, i64 0, i32 1, i32 1
  %13 = load %"class.sigslot::has_slots_interface"*, %"class.sigslot::has_slots_interface"** %12, align 8
  %14 = getelementptr inbounds %"struct.std::__1::__list_node", %"struct.std::__1::__list_node"* %11, i64 0, i32 0, i32 1
  %15 = bitcast %"struct.std::__1::__list_node_base"** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %"struct.std::__1::__list_node", %"struct.std::__1::__list_node"* %11, i64 0, i32 0, i32 0
  %18 = load %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"** %17, align 8
  %19 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %18, i64 0, i32 1
  %20 = bitcast %"struct.std::__1::__list_node_base"** %19 to i64*
  store i64 %16, i64* %20, align 8
  %21 = bitcast %"struct.std::__1::__list_node"* %11 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = bitcast %"struct.std::__1::__list_node_base"** %14 to i64**
  %24 = load i64*, i64** %23, align 8
  store i64 %22, i64* %24, align 8
  %25 = load i64, i64* %3, align 8
  %26 = add i64 %25, -1
  store i64 %26, i64* %3, align 8
  %27 = bitcast %"struct.std::__1::__list_node"* %11 to i8*
  tail call void @_ZdlPv(i8* %27) #13
  %28 = getelementptr inbounds %"class.sigslot::has_slots_interface", %"class.sigslot::has_slots_interface"* %13, i64 0, i32 2
  %29 = load void (%"class.sigslot::has_slots_interface"*, %"class.sigslot::_signal_base_interface"*)*, void (%"class.sigslot::has_slots_interface"*, %"class.sigslot::_signal_base_interface"*)** %28, align 8
  tail call void %29(%"class.sigslot::has_slots_interface"* %13, %"class.sigslot::_signal_base_interface"* %9) #14
  %30 = load i64, i64* %3, align 8
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %32, label %10

32:                                               ; preds = %10, %1
  %33 = getelementptr inbounds %"class.jingle_xmpp::XmppClientInterface", %"class.jingle_xmpp::XmppClientInterface"* %0, i64 0, i32 1, i32 0, i32 1, i32 0, i32 0
  %34 = getelementptr inbounds %"class.jingle_xmpp::XmppClientInterface", %"class.jingle_xmpp::XmppClientInterface"* %0, i64 0, i32 1, i32 0, i32 2, i32 0
  store %"struct.std::__1::__list_node_base"* %33, %"struct.std::__1::__list_node_base"** %34, align 8
  ret void
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN11jingle_xmpp19XmppClientInterfaceD0Ev(%"class.jingle_xmpp::XmppClientInterface"* nocapture readnone) unnamed_addr #2 align 2 {
  tail call void @llvm.trap() #15
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11jingle_xmpp8XmppTaskC2EPNS_23XmppTaskParentInterfaceENS_10XmppEngine12HandlerLevelE(%"class.jingle_xmpp::XmppTask"*, %"class.jingle_xmpp::XmppTaskParentInterface"*, i32) unnamed_addr #1 align 2 {
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = getelementptr inbounds %"class.jingle_xmpp::XmppTask", %"class.jingle_xmpp::XmppTask"* %0, i64 0, i32 0
  %6 = getelementptr inbounds %"class.jingle_xmpp::XmppTaskParentInterface", %"class.jingle_xmpp::XmppTaskParentInterface"* %1, i64 0, i32 0, i32 0
  %7 = bitcast %"class.jingle_xmpp::XmppTask"* %0 to %"class.jingle_xmpp::Task"*
  tail call void @_ZN11jingle_xmpp4TaskC2EPNS_10TaskParentE(%"class.jingle_xmpp::Task"* %7, %"class.jingle_xmpp::TaskParent"* %6) #14
  %8 = getelementptr inbounds %"class.jingle_xmpp::XmppTask", %"class.jingle_xmpp::XmppTask"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = getelementptr inbounds %"class.jingle_xmpp::XmppTask", %"class.jingle_xmpp::XmppTask"* %0, i64 0, i32 0, i32 1
  store %"class.jingle_xmpp::XmppTaskParentInterface"* %1, %"class.jingle_xmpp::XmppTaskParentInterface"** %9, align 8
  %10 = getelementptr inbounds %"class.jingle_xmpp::XmppTask", %"class.jingle_xmpp::XmppTask"* %0, i64 0, i32 1, i32 0
  %11 = getelementptr inbounds %"class.jingle_xmpp::XmppTask", %"class.jingle_xmpp::XmppTask"* %0, i64 0, i32 2, i32 0, i32 1
  %12 = bitcast void (%"class.sigslot::has_slots_interface"*, %"class.sigslot::_signal_base_interface"*)** %11 to <2 x void (%"class.sigslot::has_slots_interface"*, %"class.sigslot::_signal_base_interface"*)*>*
  store <2 x void (%"class.sigslot::has_slots_interface"*, %"class.sigslot::_signal_base_interface"*)*> <void (%"class.sigslot::has_slots_interface"*, %"class.sigslot::_signal_base_interface"*)* @_ZN7sigslot9has_slotsINS_15single_threadedEE17do_signal_connectEPNS_19has_slots_interfaceEPNS_22_signal_base_interfaceE, void (%"class.sigslot::has_slots_interface"*, %"class.sigslot::_signal_base_interface"*)* @_ZN7sigslot9has_slotsINS_15single_threadedEE20do_signal_disconnectEPNS_19has_slots_interfaceEPNS_22_signal_base_interfaceE>, <2 x void (%"class.sigslot::has_slots_interface"*, %"class.sigslot::_signal_base_interface"*)*>* %12, align 8
  %13 = getelementptr inbounds %"class.jingle_xmpp::XmppTask", %"class.jingle_xmpp::XmppTask"* %0, i64 0, i32 2, i32 0, i32 3
  store void (%"class.sigslot::has_slots_interface"*)* @_ZN7sigslot9has_slotsINS_15single_threadedEE17do_disconnect_allEPNS_19has_slots_interfaceE, void (%"class.sigslot::has_slots_interface"*)** %13, align 8
  %14 = getelementptr inbounds %"class.jingle_xmpp::XmppTask", %"class.jingle_xmpp::XmppTask"* %0, i64 0, i32 2, i32 1, i32 0, i32 1, i32 0, i32 0, i32 0
  %15 = getelementptr inbounds %"class.jingle_xmpp::XmppTask", %"class.jingle_xmpp::XmppTask"* %0, i64 0, i32 2, i32 1, i32 0, i32 1, i32 0, i32 0
  %16 = getelementptr inbounds %"class.jingle_xmpp::XmppTask", %"class.jingle_xmpp::XmppTask"* %0, i64 0, i32 2, i32 1, i32 0, i32 0
  %17 = bitcast %"class.std::__1::__tree_node_base"** %14 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 16, i1 false) #14
  store %"class.std::__1::__tree_end_node"* %15, %"class.std::__1::__tree_end_node"** %16, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*], [5 x i8*], [4 x i8*] }, { [13 x i8*], [5 x i8*], [4 x i8*] }* @_ZTVN11jingle_xmpp8XmppTaskE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %8, align 8
  %18 = bitcast i32 (...)*** %10 to <2 x i32 (...)**>*
  store <2 x i32 (...)**> <i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*], [5 x i8*], [4 x i8*] }, { [13 x i8*], [5 x i8*], [4 x i8*] }* @_ZTVN11jingle_xmpp8XmppTaskE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*], [5 x i8*], [4 x i8*] }, { [13 x i8*], [5 x i8*], [4 x i8*] }* @_ZTVN11jingle_xmpp8XmppTaskE, i64 0, inrange i32 2, i64 2) to i32 (...)**)>, <2 x i32 (...)**>* %18, align 8
  %19 = getelementptr inbounds %"class.jingle_xmpp::XmppTask", %"class.jingle_xmpp::XmppTask"* %0, i64 0, i32 3
  store i8 0, i8* %19, align 8
  %20 = getelementptr inbounds %"class.jingle_xmpp::XmppTask", %"class.jingle_xmpp::XmppTask"* %0, i64 0, i32 4
  %21 = getelementptr inbounds %"class.jingle_xmpp::XmppTask", %"class.jingle_xmpp::XmppTask"* %0, i64 0, i32 6
  %22 = bitcast %"class.std::__1::basic_string"* %21 to i8*
  %23 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  %24 = bitcast %"class.std::__1::deque"* %20 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %24, i8 0, i64 80, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %23) #14
  %25 = bitcast %"class.jingle_xmpp::XmppTask"* %0 to %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskBase"*)***
  %26 = bitcast %"class.jingle_xmpp::XmppTaskParentInterface"* %1 to %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskParentInterface"*)***
  %27 = load %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskParentInterface"*)**, %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskParentInterface"*)*** %26, align 8
  %28 = getelementptr inbounds %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskParentInterface"*)*, %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskParentInterface"*)** %27, i64 7
  %29 = load %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskParentInterface"*)*, %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskParentInterface"*)** %28, align 8
  %30 = tail call %"class.jingle_xmpp::XmppClientInterface"* %29(%"class.jingle_xmpp::XmppTaskParentInterface"* %1) #14
  %31 = bitcast %"class.jingle_xmpp::XmppClientInterface"* %30 to void (%"class.std::__1::basic_string"*, %"class.jingle_xmpp::XmppClientInterface"*)***
  %32 = load void (%"class.std::__1::basic_string"*, %"class.jingle_xmpp::XmppClientInterface"*)**, void (%"class.std::__1::basic_string"*, %"class.jingle_xmpp::XmppClientInterface"*)*** %31, align 8
  %33 = getelementptr inbounds void (%"class.std::__1::basic_string"*, %"class.jingle_xmpp::XmppClientInterface"*)*, void (%"class.std::__1::basic_string"*, %"class.jingle_xmpp::XmppClientInterface"*)** %32, i64 4
  %34 = load void (%"class.std::__1::basic_string"*, %"class.jingle_xmpp::XmppClientInterface"*)*, void (%"class.std::__1::basic_string"*, %"class.jingle_xmpp::XmppClientInterface"*)** %33, align 8
  call void %34(%"class.std::__1::basic_string"* nonnull sret %4, %"class.jingle_xmpp::XmppClientInterface"* %30) #14
  %35 = bitcast %"class.std::__1::basic_string"* %21 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %36 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %35, i64 0, i32 1, i32 0
  %37 = load i8, i8* %36, align 1
  %38 = icmp slt i8 %37, 0
  br i1 %38, label %39, label %42

39:                                               ; preds = %3
  %40 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %21, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %41 = load i8*, i8** %40, align 8
  call void @_ZdlPv(i8* %41) #13
  br label %42

42:                                               ; preds = %39, %3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %22, i8* nonnull align 8 %23, i64 24, i1 false) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %23) #14
  %43 = load %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskBase"*)**, %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskBase"*)*** %25, align 8
  %44 = getelementptr inbounds %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskBase"*)*, %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskBase"*)** %43, i64 7
  %45 = load %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskBase"*)*, %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskBase"*)** %44, align 8
  %46 = call %"class.jingle_xmpp::XmppClientInterface"* %45(%"class.jingle_xmpp::XmppTaskBase"* %5) #14
  %47 = bitcast %"class.jingle_xmpp::XmppClientInterface"* %46 to void (%"class.jingle_xmpp::XmppClientInterface"*, %"class.jingle_xmpp::XmppTask"*, i32)***
  %48 = load void (%"class.jingle_xmpp::XmppClientInterface"*, %"class.jingle_xmpp::XmppTask"*, i32)**, void (%"class.jingle_xmpp::XmppClientInterface"*, %"class.jingle_xmpp::XmppTask"*, i32)*** %47, align 8
  %49 = getelementptr inbounds void (%"class.jingle_xmpp::XmppClientInterface"*, %"class.jingle_xmpp::XmppTask"*, i32)*, void (%"class.jingle_xmpp::XmppClientInterface"*, %"class.jingle_xmpp::XmppTask"*, i32)** %48, i64 7
  %50 = load void (%"class.jingle_xmpp::XmppClientInterface"*, %"class.jingle_xmpp::XmppTask"*, i32)*, void (%"class.jingle_xmpp::XmppClientInterface"*, %"class.jingle_xmpp::XmppTask"*, i32)** %49, align 8
  call void %50(%"class.jingle_xmpp::XmppClientInterface"* %46, %"class.jingle_xmpp::XmppTask"* %0, i32 %2) #14
  %51 = load %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskBase"*)**, %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskBase"*)*** %25, align 8
  %52 = getelementptr inbounds %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskBase"*)*, %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskBase"*)** %51, i64 7
  %53 = load %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskBase"*)*, %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskBase"*)** %52, align 8
  %54 = call %"class.jingle_xmpp::XmppClientInterface"* %53(%"class.jingle_xmpp::XmppTaskBase"* %5) #14
  %55 = getelementptr inbounds %"class.jingle_xmpp::XmppClientInterface", %"class.jingle_xmpp::XmppClientInterface"* %54, i64 0, i32 1, i32 0, i32 1
  %56 = icmp eq %"class.jingle_xmpp::XmppTask"* %0, null
  %57 = getelementptr inbounds %"class.jingle_xmpp::XmppTask", %"class.jingle_xmpp::XmppTask"* %0, i64 0, i32 2, i32 0
  %58 = select i1 %56, %"class.sigslot::has_slots_interface"* null, %"class.sigslot::has_slots_interface"* %57
  %59 = call i8* @_Znwm(i64 48) #13, !noalias !2
  %60 = bitcast i8* %59 to %"struct.std::__1::__list_node_base"**
  %61 = getelementptr inbounds i8, i8* %59, i64 16
  %62 = bitcast i8* %61 to void (%"class.sigslot::_opaque_connection"*)**
  store void (%"class.sigslot::_opaque_connection"*)* @_ZN7sigslot18_opaque_connection7emitterIN11jingle_xmpp8XmppTaskEJEEEvPKS0_DpT0_, void (%"class.sigslot::_opaque_connection"*)** %62, align 8
  %63 = getelementptr inbounds i8, i8* %59, i64 24
  %64 = bitcast i8* %63 to %"class.sigslot::has_slots_interface"**
  store %"class.sigslot::has_slots_interface"* %58, %"class.sigslot::has_slots_interface"** %64, align 8
  %65 = getelementptr inbounds i8, i8* %59, i64 32
  %66 = bitcast i8* %65 to <2 x i64>*
  store <2 x i64> <i64 73, i64 0>, <2 x i64>* %66, align 8
  %67 = getelementptr inbounds %"class.std::__1::list", %"class.std::__1::list"* %55, i64 0, i32 0, i32 0
  %68 = getelementptr inbounds i8, i8* %59, i64 8
  %69 = bitcast i8* %68 to %"struct.std::__1::__list_node_base"**
  store %"struct.std::__1::__list_node_base"* %67, %"struct.std::__1::__list_node_base"** %69, align 8
  %70 = getelementptr inbounds %"class.std::__1::list", %"class.std::__1::list"* %55, i64 0, i32 0, i32 0, i32 0
  %71 = load %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"** %70, align 8
  store %"struct.std::__1::__list_node_base"* %71, %"struct.std::__1::__list_node_base"** %60, align 8
  %72 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %71, i64 0, i32 1
  %73 = bitcast %"struct.std::__1::__list_node_base"** %72 to i8**
  store i8* %59, i8** %73, align 8
  %74 = bitcast %"class.std::__1::list"* %55 to i8**
  store i8* %59, i8** %74, align 8
  %75 = getelementptr inbounds %"class.jingle_xmpp::XmppClientInterface", %"class.jingle_xmpp::XmppClientInterface"* %54, i64 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 0
  %76 = load i64, i64* %75, align 8
  %77 = add i64 %76, 1
  store i64 %77, i64* %75, align 8
  %78 = getelementptr inbounds %"class.jingle_xmpp::XmppClientInterface", %"class.jingle_xmpp::XmppClientInterface"* %54, i64 0, i32 1, i32 0, i32 0
  %79 = load void (%"class.sigslot::has_slots_interface"*, %"class.sigslot::_signal_base_interface"*)*, void (%"class.sigslot::has_slots_interface"*, %"class.sigslot::_signal_base_interface"*)** %11, align 8
  call void %79(%"class.sigslot::has_slots_interface"* %57, %"class.sigslot::_signal_base_interface"* %78) #14
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11jingle_xmpp8XmppTaskD2Ev(%"class.jingle_xmpp::XmppTask"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.jingle_xmpp::XmppTask", %"class.jingle_xmpp::XmppTask"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*], [5 x i8*], [4 x i8*] }, { [13 x i8*], [5 x i8*], [4 x i8*] }* @_ZTVN11jingle_xmpp8XmppTaskE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.jingle_xmpp::XmppTask", %"class.jingle_xmpp::XmppTask"* %0, i64 0, i32 1, i32 0
  %4 = getelementptr inbounds %"class.jingle_xmpp::XmppTask", %"class.jingle_xmpp::XmppTask"* %0, i64 0, i32 2
  %5 = getelementptr inbounds %"class.sigslot::has_slots", %"class.sigslot::has_slots"* %4, i64 0, i32 0, i32 0
  %6 = bitcast i32 (...)*** %3 to <2 x i32 (...)**>*
  store <2 x i32 (...)**> <i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*], [5 x i8*], [4 x i8*] }, { [13 x i8*], [5 x i8*], [4 x i8*] }* @_ZTVN11jingle_xmpp8XmppTaskE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*], [5 x i8*], [4 x i8*] }, { [13 x i8*], [5 x i8*], [4 x i8*] }* @_ZTVN11jingle_xmpp8XmppTaskE, i64 0, inrange i32 2, i64 2) to i32 (...)**)>, <2 x i32 (...)**>* %6, align 8
  tail call void @_ZN11jingle_xmpp8XmppTask8StopImplEv(%"class.jingle_xmpp::XmppTask"* %0)
  %7 = getelementptr inbounds %"class.jingle_xmpp::XmppTask", %"class.jingle_xmpp::XmppTask"* %0, i64 0, i32 6
  %8 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %9 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %8, i64 0, i32 1, i32 0
  %10 = load i8, i8* %9, align 1
  %11 = icmp slt i8 %10, 0
  br i1 %11, label %12, label %15

12:                                               ; preds = %1
  %13 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  tail call void @_ZdlPv(i8* %14) #13
  br label %15

15:                                               ; preds = %1, %12
  %16 = getelementptr inbounds %"class.jingle_xmpp::XmppTask", %"class.jingle_xmpp::XmppTask"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %17 = load %"class.jingle_xmpp::XmlElement"*, %"class.jingle_xmpp::XmlElement"** %16, align 8
  store %"class.jingle_xmpp::XmlElement"* null, %"class.jingle_xmpp::XmlElement"** %16, align 8
  %18 = icmp eq %"class.jingle_xmpp::XmlElement"* %17, null
  br i1 %18, label %24, label %19

19:                                               ; preds = %15
  %20 = bitcast %"class.jingle_xmpp::XmlElement"* %17 to void (%"class.jingle_xmpp::XmlElement"*)***
  %21 = load void (%"class.jingle_xmpp::XmlElement"*)**, void (%"class.jingle_xmpp::XmlElement"*)*** %20, align 8
  %22 = getelementptr inbounds void (%"class.jingle_xmpp::XmlElement"*)*, void (%"class.jingle_xmpp::XmlElement"*)** %21, i64 4
  %23 = load void (%"class.jingle_xmpp::XmlElement"*)*, void (%"class.jingle_xmpp::XmlElement"*)** %22, align 8
  tail call void %23(%"class.jingle_xmpp::XmlElement"* nonnull %17) #14
  br label %24

24:                                               ; preds = %15, %19
  %25 = getelementptr inbounds %"class.jingle_xmpp::XmppTask", %"class.jingle_xmpp::XmppTask"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %26 = load %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"**** %25, align 8
  %27 = getelementptr inbounds %"class.jingle_xmpp::XmppTask", %"class.jingle_xmpp::XmppTask"* %0, i64 0, i32 4, i32 0, i32 1
  %28 = load i64, i64* %27, align 8
  %29 = lshr i64 %28, 9
  %30 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %26, i64 %29
  %31 = getelementptr inbounds %"class.jingle_xmpp::XmppTask", %"class.jingle_xmpp::XmppTask"* %0, i64 0, i32 4, i32 0, i32 0, i32 2
  %32 = load %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"**** %31, align 8
  %33 = icmp eq %"class.jingle_xmpp::XmlElement"*** %32, %26
  %34 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %32 to i64
  %35 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %26 to i64
  br i1 %33, label %36, label %38

36:                                               ; preds = %24
  %37 = getelementptr inbounds %"class.jingle_xmpp::XmppTask", %"class.jingle_xmpp::XmppTask"* %0, i64 0, i32 4, i32 0, i32 2, i32 0, i32 0
  br label %51

38:                                               ; preds = %24
  %39 = load %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %30, align 8
  %40 = and i64 %28, 511
  %41 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"*, %"class.jingle_xmpp::XmlElement"** %39, i64 %40
  %42 = getelementptr inbounds %"class.jingle_xmpp::XmppTask", %"class.jingle_xmpp::XmppTask"* %0, i64 0, i32 4, i32 0, i32 2, i32 0, i32 0
  %43 = load i64, i64* %42, align 8
  %44 = add i64 %43, %28
  %45 = lshr i64 %44, 9
  %46 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %26, i64 %45
  %47 = load %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %46, align 8
  %48 = and i64 %44, 511
  %49 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"*, %"class.jingle_xmpp::XmlElement"** %47, i64 %48
  %50 = icmp eq %"class.jingle_xmpp::XmlElement"** %49, %41
  br i1 %50, label %51, label %57

51:                                               ; preds = %70, %38, %36
  %52 = phi i64* [ %37, %36 ], [ %42, %38 ], [ %42, %70 ]
  store i64 0, i64* %52, align 8
  %53 = bitcast %"class.jingle_xmpp::XmlElement"**** %31 to i64*
  %54 = sub i64 %34, %35
  %55 = ashr exact i64 %54, 3
  %56 = icmp ugt i64 %55, 2
  br i1 %56, label %75, label %88

57:                                               ; preds = %38, %70
  %58 = phi %"class.jingle_xmpp::XmlElement"** [ %73, %70 ], [ %41, %38 ]
  %59 = phi %"class.jingle_xmpp::XmlElement"*** [ %72, %70 ], [ %30, %38 ]
  %60 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"*, %"class.jingle_xmpp::XmlElement"** %58, i64 1
  %61 = ptrtoint %"class.jingle_xmpp::XmlElement"** %60 to i64
  %62 = bitcast %"class.jingle_xmpp::XmlElement"*** %59 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = sub i64 %61, %63
  %65 = icmp eq i64 %64, 4096
  br i1 %65, label %66, label %70

66:                                               ; preds = %57
  %67 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %59, i64 1
  %68 = bitcast %"class.jingle_xmpp::XmlElement"*** %67 to i64*
  %69 = load i64, i64* %68, align 8
  br label %70

70:                                               ; preds = %66, %57
  %71 = phi i64 [ %69, %66 ], [ %61, %57 ]
  %72 = phi %"class.jingle_xmpp::XmlElement"*** [ %67, %66 ], [ %59, %57 ]
  %73 = inttoptr i64 %71 to %"class.jingle_xmpp::XmlElement"**
  %74 = icmp eq %"class.jingle_xmpp::XmlElement"** %49, %73
  br i1 %74, label %51, label %57

75:                                               ; preds = %51, %75
  %76 = phi %"class.jingle_xmpp::XmlElement"*** [ %80, %75 ], [ %26, %51 ]
  %77 = bitcast %"class.jingle_xmpp::XmlElement"*** %76 to i8**
  %78 = load i8*, i8** %77, align 8
  tail call void @_ZdlPv(i8* %78) #13
  %79 = load %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"**** %25, align 8
  %80 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %79, i64 1
  store %"class.jingle_xmpp::XmlElement"*** %80, %"class.jingle_xmpp::XmlElement"**** %25, align 8
  %81 = load i64, i64* %53, align 8
  %82 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %80 to i64
  %83 = sub i64 %81, %82
  %84 = ashr exact i64 %83, 3
  %85 = icmp ugt i64 %84, 2
  br i1 %85, label %75, label %86

86:                                               ; preds = %75
  %87 = inttoptr i64 %81 to %"class.jingle_xmpp::XmlElement"***
  br label %88

88:                                               ; preds = %86, %51
  %89 = phi %"class.jingle_xmpp::XmlElement"*** [ %32, %51 ], [ %87, %86 ]
  %90 = phi %"class.jingle_xmpp::XmlElement"*** [ %26, %51 ], [ %80, %86 ]
  %91 = phi i64 [ %55, %51 ], [ %84, %86 ]
  switch i64 %91, label %95 [
    i64 1, label %93
    i64 2, label %92
  ]

92:                                               ; preds = %88
  br label %93

93:                                               ; preds = %88, %92
  %94 = phi i64 [ 512, %92 ], [ 256, %88 ]
  store i64 %94, i64* %27, align 8
  br label %95

95:                                               ; preds = %93, %88
  %96 = icmp eq %"class.jingle_xmpp::XmlElement"*** %90, %89
  br i1 %96, label %115, label %97

97:                                               ; preds = %95, %97
  %98 = phi %"class.jingle_xmpp::XmlElement"*** [ %101, %97 ], [ %90, %95 ]
  %99 = bitcast %"class.jingle_xmpp::XmlElement"*** %98 to i8**
  %100 = load i8*, i8** %99, align 8
  tail call void @_ZdlPv(i8* %100) #13
  %101 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %98, i64 1
  %102 = icmp eq %"class.jingle_xmpp::XmlElement"*** %101, %89
  br i1 %102, label %103, label %97

103:                                              ; preds = %97
  %104 = load %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"**** %25, align 8
  %105 = load %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"**** %31, align 8
  %106 = icmp eq %"class.jingle_xmpp::XmlElement"*** %105, %104
  br i1 %106, label %115, label %107

107:                                              ; preds = %103
  %108 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %104 to i64
  %109 = getelementptr %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %105, i64 -1
  %110 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %109 to i64
  %111 = sub i64 %110, %108
  %112 = lshr i64 %111, 3
  %113 = xor i64 %112, -1
  %114 = getelementptr %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %105, i64 %113
  store %"class.jingle_xmpp::XmlElement"*** %114, %"class.jingle_xmpp::XmlElement"**** %31, align 8
  br label %115

115:                                              ; preds = %107, %103, %95
  %116 = getelementptr inbounds %"class.jingle_xmpp::XmppTask", %"class.jingle_xmpp::XmppTask"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %117 = load %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"**** %116, align 8
  %118 = icmp eq %"class.jingle_xmpp::XmlElement"*** %117, null
  br i1 %118, label %121, label %119

119:                                              ; preds = %115
  %120 = bitcast %"class.jingle_xmpp::XmlElement"*** %117 to i8*
  tail call void @_ZdlPv(i8* %120) #13
  br label %121

121:                                              ; preds = %115, %119
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN7sigslot9has_slotsINS_15single_threadedEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %122 = getelementptr inbounds %"class.sigslot::has_slots", %"class.sigslot::has_slots"* %4, i64 0, i32 0
  %123 = getelementptr inbounds %"class.jingle_xmpp::XmppTask", %"class.jingle_xmpp::XmppTask"* %0, i64 0, i32 2, i32 0, i32 3
  %124 = load void (%"class.sigslot::has_slots_interface"*)*, void (%"class.sigslot::has_slots_interface"*)** %123, align 8
  tail call void %124(%"class.sigslot::has_slots_interface"* %122) #14
  %125 = getelementptr inbounds %"class.jingle_xmpp::XmppTask", %"class.jingle_xmpp::XmppTask"* %0, i64 0, i32 2, i32 1, i32 0
  %126 = getelementptr inbounds %"class.jingle_xmpp::XmppTask", %"class.jingle_xmpp::XmppTask"* %0, i64 0, i32 2, i32 1, i32 0, i32 1, i32 0, i32 0
  %127 = bitcast %"class.std::__1::__tree_end_node"* %126 to %"class.std::__1::__tree_node"**
  %128 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %127, align 8
  tail call void @_ZNSt3__16__treeIPN7sigslot22_signal_base_interfaceENS_4lessIS3_EENS_9allocatorIS3_EEE7destroyEPNS_11__tree_nodeIS3_PvEE(%"class.std::__1::__tree"* %125, %"class.std::__1::__tree_node"* %128) #14
  %129 = bitcast %"class.jingle_xmpp::XmppTask"* %0 to %"class.jingle_xmpp::Task"*
  tail call void @_ZN11jingle_xmpp4TaskD2Ev(%"class.jingle_xmpp::Task"* %129) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11jingle_xmpp8XmppTask8StopImplEv(%"class.jingle_xmpp::XmppTask"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.jingle_xmpp::XmppTask", %"class.jingle_xmpp::XmppTask"* %0, i64 0, i32 4, i32 0, i32 2, i32 0, i32 0
  %3 = getelementptr inbounds %"class.jingle_xmpp::XmppTask", %"class.jingle_xmpp::XmppTask"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %4 = getelementptr inbounds %"class.jingle_xmpp::XmppTask", %"class.jingle_xmpp::XmppTask"* %0, i64 0, i32 4, i32 0, i32 1
  %5 = getelementptr inbounds %"class.jingle_xmpp::XmppTask", %"class.jingle_xmpp::XmppTask"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  br label %6

6:                                                ; preds = %37, %1
  %7 = load i64, i64* %2, align 8
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %28, label %9

9:                                                ; preds = %6
  %10 = load %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"**** %3, align 8
  %11 = load i64, i64* %4, align 8
  %12 = lshr i64 %11, 9
  %13 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %10, i64 %12
  %14 = load %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %13, align 8
  %15 = and i64 %11, 511
  %16 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"*, %"class.jingle_xmpp::XmlElement"** %14, i64 %15
  %17 = load %"class.jingle_xmpp::XmlElement"*, %"class.jingle_xmpp::XmlElement"** %16, align 8
  %18 = add i64 %7, -1
  store i64 %18, i64* %2, align 8
  %19 = add i64 %11, 1
  store i64 %19, i64* %4, align 8
  %20 = icmp ult i64 %19, 1024
  br i1 %20, label %28, label %21

21:                                               ; preds = %9
  %22 = bitcast %"class.jingle_xmpp::XmlElement"*** %10 to i8**
  %23 = load i8*, i8** %22, align 8
  tail call void @_ZdlPv(i8* %23) #13
  %24 = load %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"**** %3, align 8
  %25 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %24, i64 1
  store %"class.jingle_xmpp::XmlElement"*** %25, %"class.jingle_xmpp::XmlElement"**** %3, align 8
  %26 = load i64, i64* %4, align 8
  %27 = add i64 %26, -512
  store i64 %27, i64* %4, align 8
  br label %28

28:                                               ; preds = %21, %9, %6
  %29 = phi %"class.jingle_xmpp::XmlElement"* [ null, %6 ], [ %17, %9 ], [ %17, %21 ]
  %30 = load %"class.jingle_xmpp::XmlElement"*, %"class.jingle_xmpp::XmlElement"** %5, align 8
  store %"class.jingle_xmpp::XmlElement"* %29, %"class.jingle_xmpp::XmlElement"** %5, align 8
  %31 = icmp eq %"class.jingle_xmpp::XmlElement"* %30, null
  br i1 %31, label %37, label %32

32:                                               ; preds = %28
  %33 = bitcast %"class.jingle_xmpp::XmlElement"* %30 to void (%"class.jingle_xmpp::XmlElement"*)***
  %34 = load void (%"class.jingle_xmpp::XmlElement"*)**, void (%"class.jingle_xmpp::XmlElement"*)*** %33, align 8
  %35 = getelementptr inbounds void (%"class.jingle_xmpp::XmlElement"*)*, void (%"class.jingle_xmpp::XmlElement"*)** %34, i64 4
  %36 = load void (%"class.jingle_xmpp::XmlElement"*)*, void (%"class.jingle_xmpp::XmlElement"*)** %35, align 8
  tail call void %36(%"class.jingle_xmpp::XmlElement"* nonnull %30) #14
  br label %37

37:                                               ; preds = %28, %32
  %38 = icmp eq %"class.jingle_xmpp::XmlElement"* %29, null
  br i1 %38, label %39, label %6

39:                                               ; preds = %37
  %40 = getelementptr inbounds %"class.jingle_xmpp::XmppTask", %"class.jingle_xmpp::XmppTask"* %0, i64 0, i32 3
  %41 = load i8, i8* %40, align 8, !range !5
  %42 = icmp eq i8 %41, 0
  br i1 %42, label %43, label %103

43:                                               ; preds = %39
  %44 = getelementptr inbounds %"class.jingle_xmpp::XmppTask", %"class.jingle_xmpp::XmppTask"* %0, i64 0, i32 0
  %45 = bitcast %"class.jingle_xmpp::XmppTask"* %0 to %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskBase"*)***
  %46 = load %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskBase"*)**, %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskBase"*)*** %45, align 8
  %47 = getelementptr inbounds %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskBase"*)*, %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskBase"*)** %46, i64 7
  %48 = load %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskBase"*)*, %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskBase"*)** %47, align 8
  %49 = tail call %"class.jingle_xmpp::XmppClientInterface"* %48(%"class.jingle_xmpp::XmppTaskBase"* %44) #14
  %50 = bitcast %"class.jingle_xmpp::XmppClientInterface"* %49 to void (%"class.jingle_xmpp::XmppClientInterface"*, %"class.jingle_xmpp::XmppTask"*)***
  %51 = load void (%"class.jingle_xmpp::XmppClientInterface"*, %"class.jingle_xmpp::XmppTask"*)**, void (%"class.jingle_xmpp::XmppClientInterface"*, %"class.jingle_xmpp::XmppTask"*)*** %50, align 8
  %52 = getelementptr inbounds void (%"class.jingle_xmpp::XmppClientInterface"*, %"class.jingle_xmpp::XmppTask"*)*, void (%"class.jingle_xmpp::XmppClientInterface"*, %"class.jingle_xmpp::XmppTask"*)** %51, i64 8
  %53 = load void (%"class.jingle_xmpp::XmppClientInterface"*, %"class.jingle_xmpp::XmppTask"*)*, void (%"class.jingle_xmpp::XmppClientInterface"*, %"class.jingle_xmpp::XmppTask"*)** %52, align 8
  tail call void %53(%"class.jingle_xmpp::XmppClientInterface"* %49, %"class.jingle_xmpp::XmppTask"* %0) #14
  %54 = load %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskBase"*)**, %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskBase"*)*** %45, align 8
  %55 = getelementptr inbounds %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskBase"*)*, %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskBase"*)** %54, i64 7
  %56 = load %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskBase"*)*, %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskBase"*)** %55, align 8
  %57 = tail call %"class.jingle_xmpp::XmppClientInterface"* %56(%"class.jingle_xmpp::XmppTaskBase"* %44) #14
  %58 = getelementptr inbounds %"class.jingle_xmpp::XmppTask", %"class.jingle_xmpp::XmppTask"* %0, i64 0, i32 2, i32 0
  %59 = getelementptr inbounds %"class.jingle_xmpp::XmppClientInterface", %"class.jingle_xmpp::XmppClientInterface"* %57, i64 0, i32 1, i32 0, i32 1, i32 0, i32 0, i32 1
  %60 = getelementptr inbounds %"class.jingle_xmpp::XmppClientInterface", %"class.jingle_xmpp::XmppClientInterface"* %57, i64 0, i32 1, i32 0, i32 1, i32 0, i32 0
  %61 = bitcast %"struct.std::__1::__list_node_base"** %59 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = inttoptr i64 %62 to %"struct.std::__1::__list_node_base"*
  %64 = icmp eq %"struct.std::__1::__list_node_base"* %60, %63
  br i1 %64, label %102, label %65

65:                                               ; preds = %43, %96
  %66 = phi %"struct.std::__1::__list_node_base"* [ %100, %96 ], [ %63, %43 ]
  %67 = phi i64 [ %99, %96 ], [ %62, %43 ]
  %68 = inttoptr i64 %67 to %"struct.std::__1::__list_node"*
  %69 = getelementptr inbounds %"struct.std::__1::__list_node", %"struct.std::__1::__list_node"* %68, i64 0, i32 1, i32 1
  %70 = load %"class.sigslot::has_slots_interface"*, %"class.sigslot::has_slots_interface"** %69, align 8
  %71 = icmp eq %"class.sigslot::has_slots_interface"* %70, %58
  br i1 %71, label %72, label %96

72:                                               ; preds = %65
  %73 = getelementptr inbounds %"class.jingle_xmpp::XmppClientInterface", %"class.jingle_xmpp::XmppClientInterface"* %57, i64 0, i32 1, i32 0, i32 2, i32 0
  %74 = load %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"** %73, align 8
  %75 = icmp eq %"struct.std::__1::__list_node_base"* %74, %66
  %76 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %66, i64 0, i32 1
  %77 = load %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"** %76, align 8
  %78 = ptrtoint %"struct.std::__1::__list_node_base"* %77 to i64
  %79 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %66, i64 0, i32 0
  %80 = load %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"** %79, align 8
  %81 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %80, i64 0, i32 1
  %82 = bitcast %"struct.std::__1::__list_node_base"** %81 to i64*
  store i64 %78, i64* %82, align 8
  %83 = inttoptr i64 %67 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = bitcast %"struct.std::__1::__list_node_base"** %76 to i64**
  %86 = load i64*, i64** %85, align 8
  store i64 %84, i64* %86, align 8
  %87 = getelementptr inbounds %"class.jingle_xmpp::XmppClientInterface", %"class.jingle_xmpp::XmppClientInterface"* %57, i64 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 0
  %88 = load i64, i64* %87, align 8
  %89 = add i64 %88, -1
  store i64 %89, i64* %87, align 8
  %90 = inttoptr i64 %67 to i8*
  tail call void @_ZdlPv(i8* %90) #13
  br i1 %75, label %91, label %92

91:                                               ; preds = %72
  store %"struct.std::__1::__list_node_base"* %77, %"struct.std::__1::__list_node_base"** %73, align 8
  br label %92

92:                                               ; preds = %91, %72
  %93 = getelementptr inbounds %"class.jingle_xmpp::XmppClientInterface", %"class.jingle_xmpp::XmppClientInterface"* %57, i64 0, i32 1, i32 0, i32 0
  %94 = getelementptr inbounds %"class.jingle_xmpp::XmppTask", %"class.jingle_xmpp::XmppTask"* %0, i64 0, i32 2, i32 0, i32 2
  %95 = load void (%"class.sigslot::has_slots_interface"*, %"class.sigslot::_signal_base_interface"*)*, void (%"class.sigslot::has_slots_interface"*, %"class.sigslot::_signal_base_interface"*)** %94, align 8
  tail call void %95(%"class.sigslot::has_slots_interface"* %58, %"class.sigslot::_signal_base_interface"* %93) #14
  br label %102

96:                                               ; preds = %65
  %97 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %66, i64 0, i32 1
  %98 = bitcast %"struct.std::__1::__list_node_base"** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = inttoptr i64 %99 to %"struct.std::__1::__list_node_base"*
  %101 = icmp eq %"struct.std::__1::__list_node_base"* %60, %100
  br i1 %101, label %102, label %65

102:                                              ; preds = %96, %43, %92
  store i8 1, i8* %40, align 8
  br label %103

103:                                              ; preds = %39, %102
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZThn96_N11jingle_xmpp8XmppTaskD1Ev(%"class.jingle_xmpp::XmppTask"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.jingle_xmpp::XmppTask", %"class.jingle_xmpp::XmppTask"* %0, i64 -1, i32 2, i32 1, i32 0, i32 2
  %3 = bitcast %"class.std::__1::__compressed_pair.10"* %2 to %"class.jingle_xmpp::XmppTask"*
  tail call void @_ZN11jingle_xmpp8XmppTaskD2Ev(%"class.jingle_xmpp::XmppTask"* %3) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZThn104_N11jingle_xmpp8XmppTaskD1Ev(%"class.jingle_xmpp::XmppTask"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.jingle_xmpp::XmppTask", %"class.jingle_xmpp::XmppTask"* %0, i64 -1, i32 2, i32 1, i32 0, i32 1
  %3 = bitcast %"class.std::__1::__compressed_pair.5"* %2 to %"class.jingle_xmpp::XmppTask"*
  tail call void @_ZN11jingle_xmpp8XmppTaskD2Ev(%"class.jingle_xmpp::XmppTask"* %3) #14
  ret void
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN11jingle_xmpp8XmppTaskD0Ev(%"class.jingle_xmpp::XmppTask"* nocapture readnone) unnamed_addr #2 align 2 {
  tail call void @llvm.trap() #15
  unreachable
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZThn96_N11jingle_xmpp8XmppTaskD0Ev(%"class.jingle_xmpp::XmppTask"* nocapture readnone) unnamed_addr #2 align 2 {
  tail call void @llvm.trap() #15
  unreachable
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZThn104_N11jingle_xmpp8XmppTaskD0Ev(%"class.jingle_xmpp::XmppTask"* nocapture readnone) unnamed_addr #2 align 2 {
  tail call void @llvm.trap() #15
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.jingle_xmpp::XmlElement"* @_ZN11jingle_xmpp8XmppTask10NextStanzaEv(%"class.jingle_xmpp::XmppTask"* nocapture) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.jingle_xmpp::XmppTask", %"class.jingle_xmpp::XmppTask"* %0, i64 0, i32 4, i32 0, i32 2, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %26, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.jingle_xmpp::XmppTask", %"class.jingle_xmpp::XmppTask"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %7 = load %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"**** %6, align 8
  %8 = getelementptr inbounds %"class.jingle_xmpp::XmppTask", %"class.jingle_xmpp::XmppTask"* %0, i64 0, i32 4, i32 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = lshr i64 %9, 9
  %11 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %7, i64 %10
  %12 = load %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %11, align 8
  %13 = and i64 %9, 511
  %14 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"*, %"class.jingle_xmpp::XmlElement"** %12, i64 %13
  %15 = load %"class.jingle_xmpp::XmlElement"*, %"class.jingle_xmpp::XmlElement"** %14, align 8
  %16 = add i64 %3, -1
  store i64 %16, i64* %2, align 8
  %17 = add i64 %9, 1
  store i64 %17, i64* %8, align 8
  %18 = icmp ult i64 %17, 1024
  br i1 %18, label %26, label %19

19:                                               ; preds = %5
  %20 = bitcast %"class.jingle_xmpp::XmlElement"*** %7 to i8**
  %21 = load i8*, i8** %20, align 8
  tail call void @_ZdlPv(i8* %21) #13
  %22 = load %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"**** %6, align 8
  %23 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %22, i64 1
  store %"class.jingle_xmpp::XmlElement"*** %23, %"class.jingle_xmpp::XmlElement"**** %6, align 8
  %24 = load i64, i64* %8, align 8
  %25 = add i64 %24, -512
  store i64 %25, i64* %8, align 8
  br label %26

26:                                               ; preds = %19, %5, %1
  %27 = phi %"class.jingle_xmpp::XmlElement"* [ null, %1 ], [ %15, %5 ], [ %15, %19 ]
  %28 = getelementptr inbounds %"class.jingle_xmpp::XmppTask", %"class.jingle_xmpp::XmppTask"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %29 = load %"class.jingle_xmpp::XmlElement"*, %"class.jingle_xmpp::XmlElement"** %28, align 8
  store %"class.jingle_xmpp::XmlElement"* %27, %"class.jingle_xmpp::XmlElement"** %28, align 8
  %30 = icmp eq %"class.jingle_xmpp::XmlElement"* %29, null
  br i1 %30, label %36, label %31

31:                                               ; preds = %26
  %32 = bitcast %"class.jingle_xmpp::XmlElement"* %29 to void (%"class.jingle_xmpp::XmlElement"*)***
  %33 = load void (%"class.jingle_xmpp::XmlElement"*)**, void (%"class.jingle_xmpp::XmlElement"*)*** %32, align 8
  %34 = getelementptr inbounds void (%"class.jingle_xmpp::XmlElement"*)*, void (%"class.jingle_xmpp::XmlElement"*)** %33, i64 4
  %35 = load void (%"class.jingle_xmpp::XmlElement"*)*, void (%"class.jingle_xmpp::XmlElement"*)** %34, align 8
  tail call void %35(%"class.jingle_xmpp::XmlElement"* nonnull %29) #14
  br label %36

36:                                               ; preds = %26, %31
  ret %"class.jingle_xmpp::XmlElement"* %27
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN11jingle_xmpp8XmppTask10SendStanzaEPKNS_10XmlElementE(%"class.jingle_xmpp::XmppTask"*, %"class.jingle_xmpp::XmlElement"*) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.jingle_xmpp::XmppTask", %"class.jingle_xmpp::XmppTask"* %0, i64 0, i32 3
  %4 = load i8, i8* %3, align 8, !range !5
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %18

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.jingle_xmpp::XmppTask", %"class.jingle_xmpp::XmppTask"* %0, i64 0, i32 0
  %8 = bitcast %"class.jingle_xmpp::XmppTask"* %0 to %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskBase"*)***
  %9 = load %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskBase"*)**, %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskBase"*)*** %8, align 8
  %10 = getelementptr inbounds %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskBase"*)*, %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskBase"*)** %9, i64 7
  %11 = load %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskBase"*)*, %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskBase"*)** %10, align 8
  %12 = tail call %"class.jingle_xmpp::XmppClientInterface"* %11(%"class.jingle_xmpp::XmppTaskBase"* %7) #14
  %13 = bitcast %"class.jingle_xmpp::XmppClientInterface"* %12 to i32 (%"class.jingle_xmpp::XmppClientInterface"*, %"class.jingle_xmpp::XmlElement"*)***
  %14 = load i32 (%"class.jingle_xmpp::XmppClientInterface"*, %"class.jingle_xmpp::XmlElement"*)**, i32 (%"class.jingle_xmpp::XmppClientInterface"*, %"class.jingle_xmpp::XmlElement"*)*** %13, align 8
  %15 = getelementptr inbounds i32 (%"class.jingle_xmpp::XmppClientInterface"*, %"class.jingle_xmpp::XmlElement"*)*, i32 (%"class.jingle_xmpp::XmppClientInterface"*, %"class.jingle_xmpp::XmlElement"*)** %14, i64 5
  %16 = load i32 (%"class.jingle_xmpp::XmppClientInterface"*, %"class.jingle_xmpp::XmlElement"*)*, i32 (%"class.jingle_xmpp::XmppClientInterface"*, %"class.jingle_xmpp::XmlElement"*)** %15, align 8
  %17 = tail call i32 %16(%"class.jingle_xmpp::XmppClientInterface"* %12, %"class.jingle_xmpp::XmlElement"* %1) #14
  br label %18

18:                                               ; preds = %2, %6
  %19 = phi i32 [ %17, %6 ], [ 2, %2 ]
  ret i32 %19
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN11jingle_xmpp8XmppTask15SendStanzaErrorEPKNS_10XmlElementENS_15XmppStanzaErrorERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE(%"class.jingle_xmpp::XmppTask"*, %"class.jingle_xmpp::XmlElement"*, i32, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.jingle_xmpp::XmppTask", %"class.jingle_xmpp::XmppTask"* %0, i64 0, i32 3
  %6 = load i8, i8* %5, align 8, !range !5
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %8, label %20

8:                                                ; preds = %4
  %9 = getelementptr inbounds %"class.jingle_xmpp::XmppTask", %"class.jingle_xmpp::XmppTask"* %0, i64 0, i32 0
  %10 = bitcast %"class.jingle_xmpp::XmppTask"* %0 to %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskBase"*)***
  %11 = load %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskBase"*)**, %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskBase"*)*** %10, align 8
  %12 = getelementptr inbounds %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskBase"*)*, %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskBase"*)** %11, i64 7
  %13 = load %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskBase"*)*, %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskBase"*)** %12, align 8
  %14 = tail call %"class.jingle_xmpp::XmppClientInterface"* %13(%"class.jingle_xmpp::XmppTaskBase"* %9) #14
  %15 = bitcast %"class.jingle_xmpp::XmppClientInterface"* %14 to i32 (%"class.jingle_xmpp::XmppClientInterface"*, %"class.jingle_xmpp::XmlElement"*, i32, %"class.std::__1::basic_string"*)***
  %16 = load i32 (%"class.jingle_xmpp::XmppClientInterface"*, %"class.jingle_xmpp::XmlElement"*, i32, %"class.std::__1::basic_string"*)**, i32 (%"class.jingle_xmpp::XmppClientInterface"*, %"class.jingle_xmpp::XmlElement"*, i32, %"class.std::__1::basic_string"*)*** %15, align 8
  %17 = getelementptr inbounds i32 (%"class.jingle_xmpp::XmppClientInterface"*, %"class.jingle_xmpp::XmlElement"*, i32, %"class.std::__1::basic_string"*)*, i32 (%"class.jingle_xmpp::XmppClientInterface"*, %"class.jingle_xmpp::XmlElement"*, i32, %"class.std::__1::basic_string"*)** %16, i64 6
  %18 = load i32 (%"class.jingle_xmpp::XmppClientInterface"*, %"class.jingle_xmpp::XmlElement"*, i32, %"class.std::__1::basic_string"*)*, i32 (%"class.jingle_xmpp::XmppClientInterface"*, %"class.jingle_xmpp::XmlElement"*, i32, %"class.std::__1::basic_string"*)** %17, align 8
  %19 = tail call i32 %18(%"class.jingle_xmpp::XmppClientInterface"* %14, %"class.jingle_xmpp::XmlElement"* %1, i32 %2, %"class.std::__1::basic_string"* dereferenceable(24) %3) #14
  br label %20

20:                                               ; preds = %4, %8
  %21 = phi i32 [ %19, %8 ], [ 2, %4 ]
  ret i32 %21
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11jingle_xmpp8XmppTask4StopEv(%"class.jingle_xmpp::XmppTask"*) unnamed_addr #1 align 2 {
  tail call void @_ZN11jingle_xmpp8XmppTask8StopImplEv(%"class.jingle_xmpp::XmppTask"* %0)
  %2 = bitcast %"class.jingle_xmpp::XmppTask"* %0 to %"class.jingle_xmpp::Task"*
  tail call void @_ZN11jingle_xmpp4Task4StopEv(%"class.jingle_xmpp::Task"* %2) #14
  ret void
}

declare void @_ZN11jingle_xmpp4Task4StopEv(%"class.jingle_xmpp::Task"*) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11jingle_xmpp8XmppTask12OnDisconnectEv(%"class.jingle_xmpp::XmppTask"*) unnamed_addr #1 align 2 {
  %2 = bitcast %"class.jingle_xmpp::XmppTask"* %0 to %"class.jingle_xmpp::Task"*
  tail call void @_ZN11jingle_xmpp4Task5ErrorEv(%"class.jingle_xmpp::Task"* %2) #14
  ret void
}

declare void @_ZN11jingle_xmpp4Task5ErrorEv(%"class.jingle_xmpp::Task"*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11jingle_xmpp8XmppTask11QueueStanzaEPKNS_10XmlElementE(%"class.jingle_xmpp::XmppTask"*, %"class.jingle_xmpp::XmlElement"*) unnamed_addr #1 align 2 {
  %3 = tail call i8* @_Znwm(i64 104) #13
  %4 = bitcast i8* %3 to %"class.jingle_xmpp::XmlElement"*
  tail call void @_ZN11jingle_xmpp10XmlElementC1ERKS0_(%"class.jingle_xmpp::XmlElement"* nonnull %4, %"class.jingle_xmpp::XmlElement"* dereferenceable(104) %1) #14
  %5 = ptrtoint i8* %3 to i64
  %6 = getelementptr inbounds %"class.jingle_xmpp::XmppTask", %"class.jingle_xmpp::XmppTask"* %0, i64 0, i32 4, i32 0, i32 0, i32 2
  %7 = bitcast %"class.jingle_xmpp::XmlElement"**** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.jingle_xmpp::XmppTask", %"class.jingle_xmpp::XmppTask"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %10 = bitcast %"class.jingle_xmpp::XmlElement"**** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %8, %11
  %13 = icmp eq i64 %12, 0
  %14 = shl i64 %12, 6
  %15 = add i64 %14, -1
  %16 = select i1 %13, i64 0, i64 %15
  %17 = getelementptr inbounds %"class.jingle_xmpp::XmppTask", %"class.jingle_xmpp::XmppTask"* %0, i64 0, i32 4, i32 0, i32 1
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds %"class.jingle_xmpp::XmppTask", %"class.jingle_xmpp::XmppTask"* %0, i64 0, i32 4, i32 0, i32 2, i32 0, i32 0
  %20 = load i64, i64* %19, align 8
  %21 = add i64 %20, %18
  %22 = icmp eq i64 %16, %21
  %23 = inttoptr i64 %11 to %"class.jingle_xmpp::XmlElement"***
  %24 = inttoptr i64 %8 to %"class.jingle_xmpp::XmlElement"***
  br i1 %22, label %25, label %32

25:                                               ; preds = %2
  %26 = getelementptr inbounds %"class.jingle_xmpp::XmppTask", %"class.jingle_xmpp::XmppTask"* %0, i64 0, i32 4
  tail call void @_ZNSt3__15dequeIPN11jingle_xmpp10XmlElementENS_9allocatorIS3_EEE19__add_back_capacityEv(%"class.std::__1::deque"* %26) #14
  %27 = load i64, i64* %19, align 8
  %28 = load i64, i64* %17, align 8
  %29 = load %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"**** %9, align 8
  %30 = load %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"**** %6, align 8
  %31 = add i64 %28, %27
  br label %32

32:                                               ; preds = %25, %2
  %33 = phi i64 [ %31, %25 ], [ %21, %2 ]
  %34 = phi %"class.jingle_xmpp::XmlElement"*** [ %30, %25 ], [ %24, %2 ]
  %35 = phi %"class.jingle_xmpp::XmlElement"*** [ %29, %25 ], [ %23, %2 ]
  %36 = icmp eq %"class.jingle_xmpp::XmlElement"*** %34, %35
  br i1 %36, label %44, label %37

37:                                               ; preds = %32
  %38 = lshr i64 %33, 9
  %39 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %35, i64 %38
  %40 = load %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %39, align 8
  %41 = and i64 %33, 511
  %42 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"*, %"class.jingle_xmpp::XmlElement"** %40, i64 %41
  %43 = bitcast %"class.jingle_xmpp::XmlElement"** %42 to i64*
  br label %44

44:                                               ; preds = %32, %37
  %45 = phi i64* [ %43, %37 ], [ null, %32 ]
  store i64 %5, i64* %45, align 8
  %46 = load i64, i64* %19, align 8
  %47 = add i64 %46, 1
  store i64 %47, i64* %19, align 8
  %48 = bitcast %"class.jingle_xmpp::XmppTask"* %0 to %"class.jingle_xmpp::Task"*
  tail call void @_ZN11jingle_xmpp4Task4WakeEv(%"class.jingle_xmpp::Task"* %48) #14
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

declare void @_ZN11jingle_xmpp10XmlElementC1ERKS0_(%"class.jingle_xmpp::XmlElement"*, %"class.jingle_xmpp::XmlElement"* dereferenceable(104)) unnamed_addr #5

declare void @_ZN11jingle_xmpp4Task4WakeEv(%"class.jingle_xmpp::Task"*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden nonnull %"class.jingle_xmpp::XmlElement"* @_ZN11jingle_xmpp8XmppTask6MakeIqERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS_3JidES9_(%"class.std::__1::basic_string"* dereferenceable(24), %"class.jingle_xmpp::Jid"* dereferenceable(72), %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.jingle_xmpp::QName", align 8
  %5 = alloca %"class.jingle_xmpp::QName", align 8
  %6 = alloca %"class.jingle_xmpp::QName", align 8
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = alloca %"class.jingle_xmpp::QName", align 8
  %9 = tail call i8* @_Znwm(i64 104) #13
  %10 = bitcast i8* %9 to %"class.jingle_xmpp::XmlElement"*
  %11 = bitcast %"class.jingle_xmpp::QName"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %11) #14
  call void @_ZN11jingle_xmpp5QNameC1ERKNS_11StaticQNameE(%"class.jingle_xmpp::QName"* nonnull %4, %"struct.jingle_xmpp::StaticQName"* nonnull dereferenceable(16) @_ZN11jingle_xmpp5QN_IQE) #14
  call void @_ZN11jingle_xmpp10XmlElementC1ERKNS_5QNameE(%"class.jingle_xmpp::XmlElement"* nonnull %10, %"class.jingle_xmpp::QName"* nonnull dereferenceable(48) %4) #14
  call void @_ZN11jingle_xmpp5QNameD1Ev(%"class.jingle_xmpp::QName"* nonnull %4) #14
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %11) #14
  %12 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %13 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %12, i64 0, i32 1, i32 0
  %14 = load i8, i8* %13, align 1
  %15 = icmp slt i8 %14, 0
  %16 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = zext i8 %14 to i64
  %19 = select i1 %15, i64 %17, i64 %18
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %23, label %21

21:                                               ; preds = %3
  %22 = bitcast %"class.jingle_xmpp::QName"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %22) #14
  call void @_ZN11jingle_xmpp5QNameC1ERKNS_11StaticQNameE(%"class.jingle_xmpp::QName"* nonnull %5, %"struct.jingle_xmpp::StaticQName"* nonnull dereferenceable(16) @_ZN11jingle_xmpp7QN_TYPEE) #14
  call void @_ZN11jingle_xmpp10XmlElement7AddAttrERKNS_5QNameERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE(%"class.jingle_xmpp::XmlElement"* nonnull %10, %"class.jingle_xmpp::QName"* nonnull dereferenceable(48) %5, %"class.std::__1::basic_string"* dereferenceable(24) %0) #14
  call void @_ZN11jingle_xmpp5QNameD1Ev(%"class.jingle_xmpp::QName"* nonnull %5) #14
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %22) #14
  br label %23

23:                                               ; preds = %21, %3
  %24 = call zeroext i1 @_ZNK11jingle_xmpp3Jid7IsEmptyEv(%"class.jingle_xmpp::Jid"* %1) #14
  br i1 %24, label %36, label %25

25:                                               ; preds = %23
  %26 = bitcast %"class.jingle_xmpp::QName"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %26) #14
  call void @_ZN11jingle_xmpp5QNameC1ERKNS_11StaticQNameE(%"class.jingle_xmpp::QName"* nonnull %6, %"struct.jingle_xmpp::StaticQName"* nonnull dereferenceable(16) @_ZN11jingle_xmpp5QN_TOE) #14
  %27 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %27) #14
  call void @_ZNK11jingle_xmpp3Jid3StrEv(%"class.std::__1::basic_string"* nonnull sret %7, %"class.jingle_xmpp::Jid"* %1) #14
  call void @_ZN11jingle_xmpp10XmlElement7AddAttrERKNS_5QNameERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE(%"class.jingle_xmpp::XmlElement"* nonnull %10, %"class.jingle_xmpp::QName"* nonnull dereferenceable(48) %6, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %7) #14
  %28 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %29 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %28, i64 0, i32 1, i32 0
  %30 = load i8, i8* %29, align 1
  %31 = icmp slt i8 %30, 0
  br i1 %31, label %32, label %35

32:                                               ; preds = %25
  %33 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %34 = load i8*, i8** %33, align 8
  call void @_ZdlPv(i8* %34) #13
  br label %35

35:                                               ; preds = %25, %32
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %27) #14
  call void @_ZN11jingle_xmpp5QNameD1Ev(%"class.jingle_xmpp::QName"* nonnull %6) #14
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %26) #14
  br label %36

36:                                               ; preds = %35, %23
  %37 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %38 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %37, i64 0, i32 1, i32 0
  %39 = load i8, i8* %38, align 1
  %40 = icmp slt i8 %39, 0
  %41 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %42 = load i64, i64* %41, align 8
  %43 = zext i8 %39 to i64
  %44 = select i1 %40, i64 %42, i64 %43
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %48, label %46

46:                                               ; preds = %36
  %47 = bitcast %"class.jingle_xmpp::QName"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %47) #14
  call void @_ZN11jingle_xmpp5QNameC1ERKNS_11StaticQNameE(%"class.jingle_xmpp::QName"* nonnull %8, %"struct.jingle_xmpp::StaticQName"* nonnull dereferenceable(16) @_ZN11jingle_xmpp5QN_IDE) #14
  call void @_ZN11jingle_xmpp10XmlElement7AddAttrERKNS_5QNameERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE(%"class.jingle_xmpp::XmlElement"* nonnull %10, %"class.jingle_xmpp::QName"* nonnull dereferenceable(48) %8, %"class.std::__1::basic_string"* dereferenceable(24) %2) #14
  call void @_ZN11jingle_xmpp5QNameD1Ev(%"class.jingle_xmpp::QName"* nonnull %8) #14
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %47) #14
  br label %48

48:                                               ; preds = %46, %36
  ret %"class.jingle_xmpp::XmlElement"* %10
}

declare void @_ZN11jingle_xmpp5QNameC1ERKNS_11StaticQNameE(%"class.jingle_xmpp::QName"*, %"struct.jingle_xmpp::StaticQName"* dereferenceable(16)) unnamed_addr #5

declare void @_ZN11jingle_xmpp10XmlElementC1ERKNS_5QNameE(%"class.jingle_xmpp::XmlElement"*, %"class.jingle_xmpp::QName"* dereferenceable(48)) unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN11jingle_xmpp5QNameD1Ev(%"class.jingle_xmpp::QName"*) unnamed_addr #7

declare void @_ZN11jingle_xmpp10XmlElement7AddAttrERKNS_5QNameERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE(%"class.jingle_xmpp::XmlElement"*, %"class.jingle_xmpp::QName"* dereferenceable(48), %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #5

declare zeroext i1 @_ZNK11jingle_xmpp3Jid7IsEmptyEv(%"class.jingle_xmpp::Jid"*) local_unnamed_addr #5

declare void @_ZNK11jingle_xmpp3Jid3StrEv(%"class.std::__1::basic_string"* sret, %"class.jingle_xmpp::Jid"*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden nonnull %"class.jingle_xmpp::XmlElement"* @_ZN11jingle_xmpp8XmppTask12MakeIqResultEPKNS_10XmlElementE(%"class.jingle_xmpp::XmlElement"*) local_unnamed_addr #1 align 2 {
  %2 = alloca %"class.jingle_xmpp::QName", align 8
  %3 = alloca %"class.jingle_xmpp::QName", align 8
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = alloca %"class.jingle_xmpp::QName", align 8
  %6 = alloca %"class.std::__1::basic_string", align 8
  %7 = alloca %"class.jingle_xmpp::QName", align 8
  %8 = alloca %"class.std::__1::basic_string", align 8
  %9 = tail call i8* @_Znwm(i64 104) #13
  %10 = bitcast i8* %9 to %"class.jingle_xmpp::XmlElement"*
  %11 = bitcast %"class.jingle_xmpp::QName"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %11) #14
  call void @_ZN11jingle_xmpp5QNameC1ERKNS_11StaticQNameE(%"class.jingle_xmpp::QName"* nonnull %2, %"struct.jingle_xmpp::StaticQName"* nonnull dereferenceable(16) @_ZN11jingle_xmpp5QN_IQE) #14
  call void @_ZN11jingle_xmpp10XmlElementC1ERKNS_5QNameE(%"class.jingle_xmpp::XmlElement"* nonnull %10, %"class.jingle_xmpp::QName"* nonnull dereferenceable(48) %2) #14
  call void @_ZN11jingle_xmpp5QNameD1Ev(%"class.jingle_xmpp::QName"* nonnull %2) #14
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %11) #14
  %12 = bitcast %"class.jingle_xmpp::QName"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %12) #14
  call void @_ZN11jingle_xmpp5QNameC1ERKNS_11StaticQNameE(%"class.jingle_xmpp::QName"* nonnull %3, %"struct.jingle_xmpp::StaticQName"* nonnull dereferenceable(16) @_ZN11jingle_xmpp7QN_TYPEE) #14
  %13 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %13) #14
  %14 = call i64 @strlen(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN11jingle_xmpp10STR_RESULTE, i64 0, i64 0)) #14
  %15 = icmp ugt i64 %14, -17
  br i1 %15, label %16, label %18

16:                                               ; preds = %1
  %17 = bitcast %"class.std::__1::basic_string"* %4 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %17) #15
  unreachable

18:                                               ; preds = %1
  %19 = icmp ult i64 %14, 23
  br i1 %19, label %29, label %20

20:                                               ; preds = %18
  %21 = add nuw i64 %14, 16
  %22 = and i64 %21, -16
  %23 = call i8* @_Znwm(i64 %22) #13
  %24 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %23, i8** %24, align 8
  %25 = or i64 %22, -9223372036854775808
  %26 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %25, i64* %26, align 8
  %27 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %14, i64* %27, align 8
  %28 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %34

29:                                               ; preds = %18
  %30 = trunc i64 %14 to i8
  %31 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %32 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %31, i64 0, i32 1, i32 0
  store i8 %30, i8* %32, align 1
  %33 = icmp eq i64 %14, 0
  br i1 %33, label %37, label %34

34:                                               ; preds = %29, %20
  %35 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %31, %29 ], [ %28, %20 ]
  %36 = phi i8* [ %13, %29 ], [ %23, %20 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %36, i8* align 1 getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN11jingle_xmpp10STR_RESULTE, i64 0, i64 0), i64 %14, i1 false) #14
  br label %37

37:                                               ; preds = %29, %34
  %38 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %31, %29 ], [ %35, %34 ]
  %39 = phi i8* [ %13, %29 ], [ %36, %34 ]
  %40 = getelementptr inbounds i8, i8* %39, i64 %14
  store i8 0, i8* %40, align 1
  call void @_ZN11jingle_xmpp10XmlElement7AddAttrERKNS_5QNameERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE(%"class.jingle_xmpp::XmlElement"* nonnull %10, %"class.jingle_xmpp::QName"* nonnull dereferenceable(48) %3, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %4) #14
  %41 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %38, i64 0, i32 1, i32 0
  %42 = load i8, i8* %41, align 1
  %43 = icmp slt i8 %42, 0
  br i1 %43, label %44, label %47

44:                                               ; preds = %37
  %45 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load i8*, i8** %45, align 8
  call void @_ZdlPv(i8* %46) #13
  br label %47

47:                                               ; preds = %37, %44
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %13) #14
  call void @_ZN11jingle_xmpp5QNameD1Ev(%"class.jingle_xmpp::QName"* nonnull %3) #14
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %12) #14
  %48 = call zeroext i1 @_ZNK11jingle_xmpp10XmlElement7HasAttrERKNS_11StaticQNameE(%"class.jingle_xmpp::XmlElement"* %0, %"struct.jingle_xmpp::StaticQName"* nonnull dereferenceable(16) @_ZN11jingle_xmpp7QN_FROME) #14
  br i1 %48, label %49, label %60

49:                                               ; preds = %47
  %50 = bitcast %"class.jingle_xmpp::QName"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %50) #14
  call void @_ZN11jingle_xmpp5QNameC1ERKNS_11StaticQNameE(%"class.jingle_xmpp::QName"* nonnull %5, %"struct.jingle_xmpp::StaticQName"* nonnull dereferenceable(16) @_ZN11jingle_xmpp5QN_TOE) #14
  %51 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %51) #14
  call void @_ZNK11jingle_xmpp10XmlElement4AttrERKNS_11StaticQNameE(%"class.std::__1::basic_string"* nonnull sret %6, %"class.jingle_xmpp::XmlElement"* %0, %"struct.jingle_xmpp::StaticQName"* nonnull dereferenceable(16) @_ZN11jingle_xmpp7QN_FROME) #14
  call void @_ZN11jingle_xmpp10XmlElement7AddAttrERKNS_5QNameERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE(%"class.jingle_xmpp::XmlElement"* nonnull %10, %"class.jingle_xmpp::QName"* nonnull dereferenceable(48) %5, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %6) #14
  %52 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %53 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %52, i64 0, i32 1, i32 0
  %54 = load i8, i8* %53, align 1
  %55 = icmp slt i8 %54, 0
  br i1 %55, label %56, label %59

56:                                               ; preds = %49
  %57 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %58 = load i8*, i8** %57, align 8
  call void @_ZdlPv(i8* %58) #13
  br label %59

59:                                               ; preds = %49, %56
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %51) #14
  call void @_ZN11jingle_xmpp5QNameD1Ev(%"class.jingle_xmpp::QName"* nonnull %5) #14
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %50) #14
  br label %60

60:                                               ; preds = %59, %47
  %61 = bitcast %"class.jingle_xmpp::QName"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %61) #14
  call void @_ZN11jingle_xmpp5QNameC1ERKNS_11StaticQNameE(%"class.jingle_xmpp::QName"* nonnull %7, %"struct.jingle_xmpp::StaticQName"* nonnull dereferenceable(16) @_ZN11jingle_xmpp5QN_IDE) #14
  %62 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %62) #14
  call void @_ZNK11jingle_xmpp10XmlElement4AttrERKNS_11StaticQNameE(%"class.std::__1::basic_string"* nonnull sret %8, %"class.jingle_xmpp::XmlElement"* %0, %"struct.jingle_xmpp::StaticQName"* nonnull dereferenceable(16) @_ZN11jingle_xmpp5QN_IDE) #14
  call void @_ZN11jingle_xmpp10XmlElement7AddAttrERKNS_5QNameERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE(%"class.jingle_xmpp::XmlElement"* nonnull %10, %"class.jingle_xmpp::QName"* nonnull dereferenceable(48) %7, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %8) #14
  %63 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %64 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %63, i64 0, i32 1, i32 0
  %65 = load i8, i8* %64, align 1
  %66 = icmp slt i8 %65, 0
  br i1 %66, label %67, label %70

67:                                               ; preds = %60
  %68 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %69 = load i8*, i8** %68, align 8
  call void @_ZdlPv(i8* %69) #13
  br label %70

70:                                               ; preds = %60, %67
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %62) #14
  call void @_ZN11jingle_xmpp5QNameD1Ev(%"class.jingle_xmpp::QName"* nonnull %7) #14
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %61) #14
  ret %"class.jingle_xmpp::XmlElement"* %10
}

declare zeroext i1 @_ZNK11jingle_xmpp10XmlElement7HasAttrERKNS_11StaticQNameE(%"class.jingle_xmpp::XmlElement"*, %"struct.jingle_xmpp::StaticQName"* dereferenceable(16)) local_unnamed_addr #5

declare void @_ZNK11jingle_xmpp10XmlElement4AttrERKNS_11StaticQNameE(%"class.std::__1::basic_string"* sret, %"class.jingle_xmpp::XmlElement"*, %"struct.jingle_xmpp::StaticQName"* dereferenceable(16)) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN11jingle_xmpp8XmppTask15MatchResponseIqEPKNS_10XmlElementERKNS_3JidERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE(%"class.jingle_xmpp::XmppTask"*, %"class.jingle_xmpp::XmlElement"*, %"class.jingle_xmpp::Jid"* dereferenceable(72), %"class.std::__1::basic_string"* nocapture readonly dereferenceable(24)) local_unnamed_addr #1 align 2 {
  %5 = alloca %"class.std::__1::basic_string", align 8
  %6 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %1, i64 0, i32 1
  %7 = tail call i32 @_ZNK11jingle_xmpp5QName7CompareERKNS_11StaticQNameE(%"class.jingle_xmpp::QName"* %6, %"struct.jingle_xmpp::StaticQName"* nonnull dereferenceable(16) @_ZN11jingle_xmpp5QN_IQE) #14
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %70

9:                                                ; preds = %4
  %10 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %10) #14
  call void @_ZNK11jingle_xmpp10XmlElement4AttrERKNS_11StaticQNameE(%"class.std::__1::basic_string"* nonnull sret %5, %"class.jingle_xmpp::XmlElement"* %1, %"struct.jingle_xmpp::StaticQName"* nonnull dereferenceable(16) @_ZN11jingle_xmpp5QN_IDE) #14
  %11 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %12 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %11, i64 0, i32 1, i32 0
  %13 = load i8, i8* %12, align 1
  %14 = icmp slt i8 %13, 0
  %15 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = zext i8 %13 to i64
  %18 = select i1 %14, i64 %16, i64 %17
  %19 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %20 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %19, i64 0, i32 1, i32 0
  %21 = load i8, i8* %20, align 1
  %22 = icmp slt i8 %21, 0
  %23 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %24 = load i64, i64* %23, align 8
  %25 = zext i8 %21 to i64
  %26 = select i1 %22, i64 %24, i64 %25
  %27 = icmp eq i64 %18, %26
  br i1 %27, label %28, label %58

28:                                               ; preds = %9
  %29 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = select i1 %14, i8* %30, i8* %10
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = load i8*, i8** %32, align 8
  %34 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  %35 = select i1 %22, i8* %33, i8* %34
  %36 = icmp eq i64 %18, 0
  br i1 %14, label %45, label %37

37:                                               ; preds = %28
  br i1 %36, label %44, label %38

38:                                               ; preds = %37
  %39 = ptrtoint i8* %30 to i64
  %40 = trunc i64 %39 to i8
  %41 = load i8, i8* %35, align 1
  %42 = icmp eq i8 %41, %40
  br i1 %42, label %46, label %43

43:                                               ; preds = %38
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #14
  br label %70

44:                                               ; preds = %37
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #14
  br label %68

45:                                               ; preds = %28
  br i1 %36, label %67, label %63

46:                                               ; preds = %38, %53
  %47 = phi i64 [ %50, %53 ], [ %17, %38 ]
  %48 = phi i8* [ %51, %53 ], [ %10, %38 ]
  %49 = phi i8* [ %54, %53 ], [ %35, %38 ]
  %50 = add i64 %47, -1
  %51 = getelementptr inbounds i8, i8* %48, i64 1
  %52 = icmp eq i64 %50, 0
  br i1 %52, label %58, label %53

53:                                               ; preds = %46
  %54 = getelementptr inbounds i8, i8* %49, i64 1
  %55 = load i8, i8* %51, align 1
  %56 = load i8, i8* %54, align 1
  %57 = icmp eq i8 %55, %56
  br i1 %57, label %46, label %58

58:                                               ; preds = %46, %53, %9
  %59 = phi i1 [ true, %9 ], [ false, %46 ], [ true, %53 ]
  br i1 %14, label %60, label %66

60:                                               ; preds = %58
  %61 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %62 = load i8*, i8** %61, align 8
  call void @_ZdlPv(i8* %62) #13
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #14
  br i1 %59, label %70, label %68

63:                                               ; preds = %45
  %64 = call i32 @bcmp(i8* %31, i8* %35, i64 %18) #14
  %65 = icmp eq i32 %64, 0
  call void @_ZdlPv(i8* %30) #13
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #14
  br i1 %65, label %68, label %70

66:                                               ; preds = %58
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #14
  br i1 %59, label %70, label %68

67:                                               ; preds = %45
  call void @_ZdlPv(i8* %30) #13
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #14
  br label %68

68:                                               ; preds = %63, %60, %67, %44, %66
  %69 = call zeroext i1 @_ZN11jingle_xmpp8XmppTask15MatchStanzaFromEPKNS_10XmlElementERKNS_3JidE(%"class.jingle_xmpp::XmppTask"* %0, %"class.jingle_xmpp::XmlElement"* %1, %"class.jingle_xmpp::Jid"* dereferenceable(72) %2)
  br label %70

70:                                               ; preds = %63, %43, %60, %4, %66, %68
  %71 = phi i1 [ %69, %68 ], [ false, %4 ], [ false, %66 ], [ false, %63 ], [ false, %60 ], [ false, %43 ]
  ret i1 %71
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN11jingle_xmpp8XmppTask15MatchStanzaFromEPKNS_10XmlElementERKNS_3JidE(%"class.jingle_xmpp::XmppTask"*, %"class.jingle_xmpp::XmlElement"*, %"class.jingle_xmpp::Jid"* dereferenceable(72)) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.jingle_xmpp::Jid", align 8
  %5 = alloca %"class.std::__1::basic_string", align 8
  %6 = alloca %"class.jingle_xmpp::Jid", align 8
  %7 = alloca %"class.jingle_xmpp::Jid", align 8
  %8 = alloca %"class.jingle_xmpp::Jid", align 8
  %9 = bitcast %"class.jingle_xmpp::Jid"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %9) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 72, i1 false)
  %10 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %10) #14
  call void @_ZNK11jingle_xmpp10XmlElement4AttrERKNS_11StaticQNameE(%"class.std::__1::basic_string"* nonnull sret %5, %"class.jingle_xmpp::XmlElement"* %1, %"struct.jingle_xmpp::StaticQName"* nonnull dereferenceable(16) @_ZN11jingle_xmpp7QN_FROME) #14
  call void @_ZN11jingle_xmpp3JidC1ERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.jingle_xmpp::Jid"* nonnull %4, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %5) #14
  %11 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %12 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %11, i64 0, i32 1, i32 0
  %13 = load i8, i8* %12, align 1
  %14 = icmp slt i8 %13, 0
  br i1 %14, label %15, label %18

15:                                               ; preds = %3
  %16 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @_ZdlPv(i8* %17) #13
  br label %18

18:                                               ; preds = %3, %15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #14
  %19 = call zeroext i1 @_ZNK11jingle_xmpp3JideqERKS0_(%"class.jingle_xmpp::Jid"* nonnull %4, %"class.jingle_xmpp::Jid"* dereferenceable(72) %2) #14
  br i1 %19, label %85, label %20

20:                                               ; preds = %18
  %21 = call zeroext i1 @_ZNK11jingle_xmpp3Jid7IsEmptyEv(%"class.jingle_xmpp::Jid"* %2) #14
  br i1 %21, label %22, label %85

22:                                               ; preds = %20
  %23 = bitcast %"class.jingle_xmpp::Jid"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %23) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %23, i8 -86, i64 72, i1 false)
  %24 = getelementptr inbounds %"class.jingle_xmpp::XmppTask", %"class.jingle_xmpp::XmppTask"* %0, i64 0, i32 0
  %25 = bitcast %"class.jingle_xmpp::XmppTask"* %0 to %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskBase"*)***
  %26 = load %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskBase"*)**, %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskBase"*)*** %25, align 8
  %27 = getelementptr inbounds %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskBase"*)*, %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskBase"*)** %26, i64 7
  %28 = load %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskBase"*)*, %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskBase"*)** %27, align 8
  %29 = call %"class.jingle_xmpp::XmppClientInterface"* %28(%"class.jingle_xmpp::XmppTaskBase"* %24) #14
  %30 = bitcast %"class.jingle_xmpp::XmppClientInterface"* %29 to %"class.jingle_xmpp::Jid"* (%"class.jingle_xmpp::XmppClientInterface"*)***
  %31 = load %"class.jingle_xmpp::Jid"* (%"class.jingle_xmpp::XmppClientInterface"*)**, %"class.jingle_xmpp::Jid"* (%"class.jingle_xmpp::XmppClientInterface"*)*** %30, align 8
  %32 = getelementptr inbounds %"class.jingle_xmpp::Jid"* (%"class.jingle_xmpp::XmppClientInterface"*)*, %"class.jingle_xmpp::Jid"* (%"class.jingle_xmpp::XmppClientInterface"*)** %31, i64 3
  %33 = load %"class.jingle_xmpp::Jid"* (%"class.jingle_xmpp::XmppClientInterface"*)*, %"class.jingle_xmpp::Jid"* (%"class.jingle_xmpp::XmppClientInterface"*)** %32, align 8
  %34 = call dereferenceable(72) %"class.jingle_xmpp::Jid"* %33(%"class.jingle_xmpp::XmppClientInterface"* %29) #14
  %35 = bitcast %"class.jingle_xmpp::Jid"* %34 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %36 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %35, i64 0, i32 1, i32 0
  %37 = load i8, i8* %36, align 1
  %38 = icmp slt i8 %37, 0
  br i1 %38, label %41, label %39

39:                                               ; preds = %22
  %40 = bitcast %"class.jingle_xmpp::Jid"* %34 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %23, i8* align 8 %40, i64 24, i1 false) #14
  br label %47

41:                                               ; preds = %22
  %42 = getelementptr inbounds %"class.jingle_xmpp::Jid", %"class.jingle_xmpp::Jid"* %6, i64 0, i32 0
  %43 = getelementptr inbounds %"class.jingle_xmpp::Jid", %"class.jingle_xmpp::Jid"* %34, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %44 = load i8*, i8** %43, align 8
  %45 = getelementptr inbounds %"class.jingle_xmpp::Jid", %"class.jingle_xmpp::Jid"* %34, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %46 = load i64, i64* %45, align 8
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* nonnull %42, i8* %44, i64 %46) #14
  br label %47

47:                                               ; preds = %41, %39
  %48 = getelementptr inbounds %"class.jingle_xmpp::Jid", %"class.jingle_xmpp::Jid"* %6, i64 0, i32 1
  %49 = getelementptr inbounds %"class.jingle_xmpp::Jid", %"class.jingle_xmpp::Jid"* %34, i64 0, i32 1
  %50 = bitcast %"class.std::__1::basic_string"* %49 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %51 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %50, i64 0, i32 1, i32 0
  %52 = load i8, i8* %51, align 1
  %53 = icmp slt i8 %52, 0
  br i1 %53, label %57, label %54

54:                                               ; preds = %47
  %55 = bitcast %"class.std::__1::basic_string"* %48 to i8*
  %56 = bitcast %"class.std::__1::basic_string"* %49 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %55, i8* align 8 %56, i64 24, i1 false) #14
  br label %62

57:                                               ; preds = %47
  %58 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %49, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %59 = load i8*, i8** %58, align 8
  %60 = getelementptr inbounds %"class.jingle_xmpp::Jid", %"class.jingle_xmpp::Jid"* %34, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %61 = load i64, i64* %60, align 8
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %48, i8* %59, i64 %61) #14
  br label %62

62:                                               ; preds = %57, %54
  %63 = getelementptr inbounds %"class.jingle_xmpp::Jid", %"class.jingle_xmpp::Jid"* %6, i64 0, i32 2
  %64 = getelementptr inbounds %"class.jingle_xmpp::Jid", %"class.jingle_xmpp::Jid"* %34, i64 0, i32 2
  %65 = bitcast %"class.std::__1::basic_string"* %64 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %66 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %65, i64 0, i32 1, i32 0
  %67 = load i8, i8* %66, align 1
  %68 = icmp slt i8 %67, 0
  br i1 %68, label %72, label %69

69:                                               ; preds = %62
  %70 = bitcast %"class.std::__1::basic_string"* %63 to i8*
  %71 = bitcast %"class.std::__1::basic_string"* %64 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %70, i8* align 8 %71, i64 24, i1 false) #14
  br label %77

72:                                               ; preds = %62
  %73 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %64, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %74 = load i8*, i8** %73, align 8
  %75 = getelementptr inbounds %"class.jingle_xmpp::Jid", %"class.jingle_xmpp::Jid"* %34, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %76 = load i64, i64* %75, align 8
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %63, i8* %74, i64 %76) #14
  br label %77

77:                                               ; preds = %69, %72
  %78 = bitcast %"class.jingle_xmpp::Jid"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %78) #14
  call void @_ZN11jingle_xmpp3JidC1ERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.jingle_xmpp::Jid"* nonnull %7, %"class.std::__1::basic_string"* dereferenceable(24) %48) #14
  %79 = call zeroext i1 @_ZNK11jingle_xmpp3JideqERKS0_(%"class.jingle_xmpp::Jid"* nonnull %4, %"class.jingle_xmpp::Jid"* nonnull dereferenceable(72) %7) #14
  br i1 %79, label %83, label %80

80:                                               ; preds = %77
  %81 = bitcast %"class.jingle_xmpp::Jid"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %81) #14
  call void @_ZNK11jingle_xmpp3Jid7BareJidEv(%"class.jingle_xmpp::Jid"* nonnull sret %8, %"class.jingle_xmpp::Jid"* nonnull %6) #14
  %82 = call zeroext i1 @_ZNK11jingle_xmpp3JideqERKS0_(%"class.jingle_xmpp::Jid"* nonnull %4, %"class.jingle_xmpp::Jid"* nonnull dereferenceable(72) %8) #14
  call void @_ZN11jingle_xmpp3JidD1Ev(%"class.jingle_xmpp::Jid"* nonnull %8) #14
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %81) #14
  br label %83

83:                                               ; preds = %77, %80
  %84 = phi i1 [ %82, %80 ], [ true, %77 ]
  call void @_ZN11jingle_xmpp3JidD1Ev(%"class.jingle_xmpp::Jid"* nonnull %7) #14
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %78) #14
  call void @_ZN11jingle_xmpp3JidD1Ev(%"class.jingle_xmpp::Jid"* nonnull %6) #14
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %23) #14
  br label %85

85:                                               ; preds = %20, %18, %83
  %86 = phi i1 [ %84, %83 ], [ true, %18 ], [ false, %20 ]
  call void @_ZN11jingle_xmpp3JidD1Ev(%"class.jingle_xmpp::Jid"* nonnull %4) #14
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %9) #14
  ret i1 %86
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

declare void @_ZN11jingle_xmpp3JidC1ERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.jingle_xmpp::Jid"*, %"class.std::__1::basic_string"* dereferenceable(24)) unnamed_addr #5

declare zeroext i1 @_ZNK11jingle_xmpp3JideqERKS0_(%"class.jingle_xmpp::Jid"*, %"class.jingle_xmpp::Jid"* dereferenceable(72)) local_unnamed_addr #5

declare void @_ZNK11jingle_xmpp3Jid7BareJidEv(%"class.jingle_xmpp::Jid"* sret, %"class.jingle_xmpp::Jid"*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN11jingle_xmpp3JidD1Ev(%"class.jingle_xmpp::Jid"*) unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN11jingle_xmpp8XmppTask14MatchRequestIqEPKNS_10XmlElementERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEERKNS_5QNameE(%"class.jingle_xmpp::XmlElement"*, %"class.std::__1::basic_string"* nocapture readonly dereferenceable(24), %"class.jingle_xmpp::QName"* dereferenceable(48)) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 1
  %6 = tail call i32 @_ZNK11jingle_xmpp5QName7CompareERKNS_11StaticQNameE(%"class.jingle_xmpp::QName"* %5, %"struct.jingle_xmpp::StaticQName"* nonnull dereferenceable(16) @_ZN11jingle_xmpp5QN_IQE) #14
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %70

8:                                                ; preds = %3
  %9 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %9) #14
  call void @_ZNK11jingle_xmpp10XmlElement4AttrERKNS_11StaticQNameE(%"class.std::__1::basic_string"* nonnull sret %4, %"class.jingle_xmpp::XmlElement"* %0, %"struct.jingle_xmpp::StaticQName"* nonnull dereferenceable(16) @_ZN11jingle_xmpp7QN_TYPEE) #14
  %10 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %11 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %10, i64 0, i32 1, i32 0
  %12 = load i8, i8* %11, align 1
  %13 = icmp slt i8 %12, 0
  %14 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = zext i8 %12 to i64
  %17 = select i1 %13, i64 %15, i64 %16
  %18 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %19 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %18, i64 0, i32 1, i32 0
  %20 = load i8, i8* %19, align 1
  %21 = icmp slt i8 %20, 0
  %22 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = zext i8 %20 to i64
  %25 = select i1 %21, i64 %23, i64 %24
  %26 = icmp eq i64 %17, %25
  br i1 %26, label %27, label %57

27:                                               ; preds = %8
  %28 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %29 = load i8*, i8** %28, align 8
  %30 = select i1 %13, i8* %29, i8* %9
  %31 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  %34 = select i1 %21, i8* %32, i8* %33
  %35 = icmp eq i64 %17, 0
  br i1 %13, label %44, label %36

36:                                               ; preds = %27
  br i1 %35, label %43, label %37

37:                                               ; preds = %36
  %38 = ptrtoint i8* %29 to i64
  %39 = trunc i64 %38 to i8
  %40 = load i8, i8* %34, align 1
  %41 = icmp eq i8 %40, %39
  br i1 %41, label %45, label %42

42:                                               ; preds = %37
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #14
  br label %70

43:                                               ; preds = %36
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #14
  br label %67

44:                                               ; preds = %27
  br i1 %35, label %66, label %62

45:                                               ; preds = %37, %52
  %46 = phi i64 [ %49, %52 ], [ %16, %37 ]
  %47 = phi i8* [ %50, %52 ], [ %9, %37 ]
  %48 = phi i8* [ %53, %52 ], [ %34, %37 ]
  %49 = add i64 %46, -1
  %50 = getelementptr inbounds i8, i8* %47, i64 1
  %51 = icmp eq i64 %49, 0
  br i1 %51, label %57, label %52

52:                                               ; preds = %45
  %53 = getelementptr inbounds i8, i8* %48, i64 1
  %54 = load i8, i8* %50, align 1
  %55 = load i8, i8* %53, align 1
  %56 = icmp eq i8 %54, %55
  br i1 %56, label %45, label %57

57:                                               ; preds = %45, %52, %8
  %58 = phi i1 [ true, %8 ], [ false, %45 ], [ true, %52 ]
  br i1 %13, label %59, label %65

59:                                               ; preds = %57
  %60 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %61 = load i8*, i8** %60, align 8
  call void @_ZdlPv(i8* %61) #13
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #14
  br i1 %58, label %70, label %67

62:                                               ; preds = %44
  %63 = call i32 @bcmp(i8* %30, i8* %34, i64 %17) #14
  %64 = icmp eq i32 %63, 0
  call void @_ZdlPv(i8* %29) #13
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #14
  br i1 %64, label %67, label %70

65:                                               ; preds = %57
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #14
  br i1 %58, label %70, label %67

66:                                               ; preds = %44
  call void @_ZdlPv(i8* %29) #13
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #14
  br label %67

67:                                               ; preds = %62, %59, %66, %43, %65
  %68 = call %"class.jingle_xmpp::XmlElement"* @_ZN11jingle_xmpp10XmlElement10FirstNamedERKNS_5QNameE(%"class.jingle_xmpp::XmlElement"* %0, %"class.jingle_xmpp::QName"* dereferenceable(48) %2) #14
  %69 = icmp ne %"class.jingle_xmpp::XmlElement"* %68, null
  br label %70

70:                                               ; preds = %62, %42, %59, %3, %67, %65
  %71 = phi i1 [ false, %3 ], [ false, %65 ], [ %69, %67 ], [ false, %62 ], [ false, %59 ], [ false, %42 ]
  ret i1 %71
}

declare void @__cxa_pure_virtual() unnamed_addr

declare void @_ZNK11jingle_xmpp4Task12GetStateNameEi(%"class.std::__1::basic_string"* sret, %"class.jingle_xmpp::Task"*, i32) unnamed_addr #5

declare i32 @_ZN11jingle_xmpp4Task7ProcessEi(%"class.jingle_xmpp::Task"*, i32) unnamed_addr #5

declare i32 @_ZN11jingle_xmpp4Task15ProcessResponseEv(%"class.jingle_xmpp::Task"*) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.jingle_xmpp::XmppClientInterface"* @_ZN11jingle_xmpp12XmppTaskBase9GetClientEv(%"class.jingle_xmpp::XmppTaskBase"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.jingle_xmpp::XmppTaskBase", %"class.jingle_xmpp::XmppTaskBase"* %0, i64 0, i32 1
  %3 = load %"class.jingle_xmpp::XmppTaskParentInterface"*, %"class.jingle_xmpp::XmppTaskParentInterface"** %2, align 8
  %4 = bitcast %"class.jingle_xmpp::XmppTaskParentInterface"* %3 to %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskParentInterface"*)***
  %5 = load %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskParentInterface"*)**, %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskParentInterface"*)*** %4, align 8
  %6 = getelementptr inbounds %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskParentInterface"*)*, %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskParentInterface"*)** %5, i64 7
  %7 = load %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskParentInterface"*)*, %"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppTaskParentInterface"*)** %6, align 8
  %8 = tail call %"class.jingle_xmpp::XmppClientInterface"* %7(%"class.jingle_xmpp::XmppTaskParentInterface"* %3) #14
  ret %"class.jingle_xmpp::XmppClientInterface"* %8
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN11jingle_xmpp8XmppTask12HandleStanzaEPKNS_10XmlElementE(%"class.jingle_xmpp::XmppTask"*, %"class.jingle_xmpp::XmlElement"*) unnamed_addr #1 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZThn96_N11jingle_xmpp8XmppTask12HandleStanzaEPKNS_10XmlElementE(%"class.jingle_xmpp::XmppTask"*, %"class.jingle_xmpp::XmlElement"*) unnamed_addr #1 comdat align 2 {
  ret i1 false
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #8

; Function Attrs: nounwind
declare void @_ZN11jingle_xmpp4TaskD2Ev(%"class.jingle_xmpp::Task"*) unnamed_addr #7

declare void @_ZN11jingle_xmpp4TaskC2EPNS_10TaskParentE(%"class.jingle_xmpp::Task"*, %"class.jingle_xmpp::TaskParent"*) unnamed_addr #5

declare i32 @_ZNK11jingle_xmpp5QName7CompareERKNS_11StaticQNameE(%"class.jingle_xmpp::QName"*, %"struct.jingle_xmpp::StaticQName"* dereferenceable(16)) local_unnamed_addr #5

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #5

declare %"class.jingle_xmpp::XmlElement"* @_ZN11jingle_xmpp10XmlElement10FirstNamedERKNS_5QNameE(%"class.jingle_xmpp::XmlElement"*, %"class.jingle_xmpp::QName"* dereferenceable(48)) local_unnamed_addr #5

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #9

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #10

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #11

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN7sigslot12_signal_baseINS_15single_threadedEE18do_slot_disconnectEPNS_22_signal_base_interfaceEPNS_19has_slots_interfaceE(%"class.sigslot::_signal_base_interface"*, %"class.sigslot::has_slots_interface"*) #1 comdat align 2 {
  %3 = getelementptr inbounds %"class.sigslot::_signal_base_interface", %"class.sigslot::_signal_base_interface"* %0, i64 1
  %4 = getelementptr inbounds %"class.sigslot::_signal_base_interface", %"class.sigslot::_signal_base_interface"* %0, i64 1, i32 1
  %5 = bitcast void (%"class.sigslot::_signal_base_interface"*, %"class.sigslot::has_slots_interface"*, %"class.sigslot::has_slots_interface"*)** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.sigslot::_signal_base_interface"* %3 to %"struct.std::__1::__list_node_base"*
  %8 = inttoptr i64 %6 to %"struct.std::__1::__list_node_base"*
  %9 = icmp eq %"struct.std::__1::__list_node_base"* %8, %7
  br i1 %9, label %43, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.sigslot::_signal_base_interface", %"class.sigslot::_signal_base_interface"* %0, i64 2, i32 1
  %12 = bitcast void (%"class.sigslot::_signal_base_interface"*, %"class.sigslot::has_slots_interface"*, %"class.sigslot::has_slots_interface"*)** %11 to %"struct.std::__1::__list_node_base"**
  %13 = getelementptr inbounds %"class.sigslot::_signal_base_interface", %"class.sigslot::_signal_base_interface"* %0, i64 2
  %14 = bitcast %"class.sigslot::_signal_base_interface"* %13 to i64*
  br label %15

15:                                               ; preds = %10, %41
  %16 = phi %"struct.std::__1::__list_node_base"* [ %8, %10 ], [ %25, %41 ]
  %17 = phi i64 [ %6, %10 ], [ %20, %41 ]
  %18 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %16, i64 0, i32 1
  %19 = bitcast %"struct.std::__1::__list_node_base"** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = inttoptr i64 %17 to %"struct.std::__1::__list_node"*
  %22 = getelementptr inbounds %"struct.std::__1::__list_node", %"struct.std::__1::__list_node"* %21, i64 0, i32 1, i32 1
  %23 = load %"class.sigslot::has_slots_interface"*, %"class.sigslot::has_slots_interface"** %22, align 8
  %24 = icmp eq %"class.sigslot::has_slots_interface"* %23, %1
  %25 = inttoptr i64 %20 to %"struct.std::__1::__list_node_base"*
  br i1 %24, label %26, label %41

26:                                               ; preds = %15
  %27 = load %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"** %12, align 8
  %28 = icmp eq %"struct.std::__1::__list_node_base"* %27, %16
  %29 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %16, i64 0, i32 0
  %30 = load %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"** %29, align 8
  %31 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %30, i64 0, i32 1
  %32 = bitcast %"struct.std::__1::__list_node_base"** %31 to i64*
  store i64 %20, i64* %32, align 8
  %33 = inttoptr i64 %17 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = bitcast %"struct.std::__1::__list_node_base"** %18 to i64**
  %36 = load i64*, i64** %35, align 8
  store i64 %34, i64* %36, align 8
  %37 = load i64, i64* %14, align 8
  %38 = add i64 %37, -1
  store i64 %38, i64* %14, align 8
  %39 = inttoptr i64 %17 to i8*
  tail call void @_ZdlPv(i8* %39) #13
  br i1 %28, label %40, label %41

40:                                               ; preds = %26
  store %"struct.std::__1::__list_node_base"* %25, %"struct.std::__1::__list_node_base"** %12, align 8
  br label %41

41:                                               ; preds = %26, %40, %15
  %42 = icmp eq %"struct.std::__1::__list_node_base"* %25, %7
  br i1 %42, label %43, label %15

43:                                               ; preds = %41, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN7sigslot12_signal_baseINS_15single_threadedEE17do_slot_duplicateEPNS_22_signal_base_interfaceEPKNS_19has_slots_interfaceEPS5_(%"class.sigslot::_signal_base_interface"*, %"class.sigslot::has_slots_interface"*, %"class.sigslot::has_slots_interface"*) #1 comdat align 2 {
  %4 = alloca [16 x i8], align 8
  %5 = getelementptr inbounds %"class.sigslot::_signal_base_interface", %"class.sigslot::_signal_base_interface"* %0, i64 1
  %6 = getelementptr inbounds %"class.sigslot::_signal_base_interface", %"class.sigslot::_signal_base_interface"* %0, i64 1, i32 1
  %7 = bitcast void (%"class.sigslot::_signal_base_interface"*, %"class.sigslot::has_slots_interface"*, %"class.sigslot::has_slots_interface"*)** %6 to i64*
  %8 = bitcast %"class.sigslot::_signal_base_interface"* %5 to %"struct.std::__1::__list_node_base"*
  %9 = load i64, i64* %7, align 8
  %10 = inttoptr i64 %9 to %"struct.std::__1::__list_node_base"*
  %11 = icmp eq %"struct.std::__1::__list_node_base"* %10, %8
  br i1 %11, label %50, label %12

12:                                               ; preds = %3
  %13 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 0
  %14 = bitcast %"class.sigslot::_signal_base_interface"* %5 to %"struct.std::__1::__list_node_base"**
  %15 = bitcast %"class.sigslot::_signal_base_interface"* %5 to i8**
  %16 = getelementptr inbounds %"class.sigslot::_signal_base_interface", %"class.sigslot::_signal_base_interface"* %0, i64 2
  %17 = bitcast %"class.sigslot::_signal_base_interface"* %16 to i64*
  br label %18

18:                                               ; preds = %12, %44
  %19 = phi %"struct.std::__1::__list_node_base"* [ %10, %12 ], [ %48, %44 ]
  %20 = phi i64 [ %9, %12 ], [ %47, %44 ]
  %21 = inttoptr i64 %20 to %"struct.std::__1::__list_node"*
  %22 = getelementptr inbounds %"struct.std::__1::__list_node", %"struct.std::__1::__list_node"* %21, i64 0, i32 1, i32 1
  %23 = load %"class.sigslot::has_slots_interface"*, %"class.sigslot::has_slots_interface"** %22, align 8
  %24 = icmp eq %"class.sigslot::has_slots_interface"* %23, %1
  br i1 %24, label %25, label %44

25:                                               ; preds = %18
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %13)
  %26 = getelementptr inbounds %"struct.std::__1::__list_node", %"struct.std::__1::__list_node"* %21, i64 0, i32 1, i32 0
  %27 = bitcast void (%"class.sigslot::_opaque_connection"*)** %26 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = getelementptr inbounds %"struct.std::__1::__list_node", %"struct.std::__1::__list_node"* %21, i64 0, i32 1, i32 2, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %13, i8* align 8 %29, i64 16, i1 false)
  %30 = tail call i8* @_Znwm(i64 48) #13, !noalias !6
  %31 = bitcast i8* %30 to %"struct.std::__1::__list_node_base"**
  %32 = getelementptr inbounds i8, i8* %30, i64 16
  %33 = bitcast i8* %32 to i64*
  store i64 %28, i64* %33, align 8
  %34 = getelementptr inbounds i8, i8* %30, i64 24
  %35 = bitcast i8* %34 to %"class.sigslot::has_slots_interface"**
  store %"class.sigslot::has_slots_interface"* %2, %"class.sigslot::has_slots_interface"** %35, align 8
  %36 = getelementptr inbounds i8, i8* %30, i64 32
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %36, i8* nonnull align 8 %13, i64 16, i1 false)
  %37 = getelementptr inbounds i8, i8* %30, i64 8
  %38 = bitcast i8* %37 to %"class.sigslot::_signal_base_interface"**
  store %"class.sigslot::_signal_base_interface"* %5, %"class.sigslot::_signal_base_interface"** %38, align 8
  %39 = load %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"** %14, align 8
  store %"struct.std::__1::__list_node_base"* %39, %"struct.std::__1::__list_node_base"** %31, align 8
  %40 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %39, i64 0, i32 1
  %41 = bitcast %"struct.std::__1::__list_node_base"** %40 to i8**
  store i8* %30, i8** %41, align 8
  store i8* %30, i8** %15, align 8
  %42 = load i64, i64* %17, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %17, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %13)
  br label %44

44:                                               ; preds = %25, %18
  %45 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %19, i64 0, i32 1
  %46 = bitcast %"struct.std::__1::__list_node_base"** %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = inttoptr i64 %47 to %"struct.std::__1::__list_node_base"*
  %49 = icmp eq %"struct.std::__1::__list_node_base"* %48, %8
  br i1 %49, label %50, label %18

50:                                               ; preds = %44, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN7sigslot9has_slotsINS_15single_threadedEE17do_signal_connectEPNS_19has_slots_interfaceEPNS_22_signal_base_interfaceE(%"class.sigslot::has_slots_interface"*, %"class.sigslot::_signal_base_interface"*) #1 comdat align 2 {
  %3 = ptrtoint %"class.sigslot::_signal_base_interface"* %1 to i64
  %4 = getelementptr inbounds %"class.sigslot::has_slots_interface", %"class.sigslot::has_slots_interface"* %0, i64 1
  %5 = getelementptr inbounds %"class.sigslot::has_slots_interface", %"class.sigslot::has_slots_interface"* %0, i64 1, i32 1
  %6 = bitcast void (%"class.sigslot::has_slots_interface"*, %"class.sigslot::_signal_base_interface"*)** %5 to %"class.std::__1::__tree_node"**
  %7 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %6, align 8
  %8 = icmp eq %"class.std::__1::__tree_node"* %7, null
  br i1 %8, label %37, label %9

9:                                                ; preds = %2
  %10 = bitcast void (%"class.sigslot::has_slots_interface"*, %"class.sigslot::_signal_base_interface"*)** %5 to %"class.std::__1::__tree_node_base"**
  br label %11

11:                                               ; preds = %33, %9
  %12 = phi %"class.std::__1::__tree_node"* [ %36, %33 ], [ %7, %9 ]
  %13 = phi %"class.std::__1::__tree_node_base"** [ %35, %33 ], [ %10, %9 ]
  %14 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %12, i64 0, i32 1
  %15 = load %"class.sigslot::_signal_base_interface"*, %"class.sigslot::_signal_base_interface"** %14, align 8
  %16 = icmp ugt %"class.sigslot::_signal_base_interface"* %15, %1
  br i1 %16, label %17, label %23

17:                                               ; preds = %11
  %18 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %12, i64 0, i32 0, i32 0, i32 0
  %19 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %18, align 8
  %20 = icmp eq %"class.std::__1::__tree_node_base"* %19, null
  br i1 %20, label %21, label %33

21:                                               ; preds = %17
  %22 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %12, i64 0, i32 0, i32 0
  br label %40

23:                                               ; preds = %11
  %24 = icmp ult %"class.sigslot::_signal_base_interface"* %15, %1
  br i1 %24, label %25, label %31

25:                                               ; preds = %23
  %26 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %12, i64 0, i32 0, i32 1
  %27 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %26, align 8
  %28 = icmp eq %"class.std::__1::__tree_node_base"* %27, null
  br i1 %28, label %29, label %33

29:                                               ; preds = %25
  %30 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %12, i64 0, i32 0, i32 0
  br label %40

31:                                               ; preds = %23
  %32 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %12, i64 0, i32 0, i32 0
  br label %40

33:                                               ; preds = %25, %17
  %34 = phi %"class.std::__1::__tree_node_base"* [ %19, %17 ], [ %27, %25 ]
  %35 = phi %"class.std::__1::__tree_node_base"** [ %18, %17 ], [ %26, %25 ]
  %36 = bitcast %"class.std::__1::__tree_node_base"* %34 to %"class.std::__1::__tree_node"*
  br label %11

37:                                               ; preds = %2
  %38 = bitcast void (%"class.sigslot::has_slots_interface"*, %"class.sigslot::_signal_base_interface"*)** %5 to %"class.std::__1::__tree_end_node"*
  %39 = bitcast void (%"class.sigslot::has_slots_interface"*, %"class.sigslot::_signal_base_interface"*)** %5 to %"class.std::__1::__tree_node_base"**
  br label %40

40:                                               ; preds = %37, %31, %29, %21
  %41 = phi %"class.std::__1::__tree_end_node"* [ %38, %37 ], [ %22, %21 ], [ %30, %29 ], [ %32, %31 ]
  %42 = phi %"class.std::__1::__tree_node_base"** [ %39, %37 ], [ %18, %21 ], [ %26, %29 ], [ %13, %31 ]
  %43 = bitcast %"class.std::__1::__tree_node_base"** %42 to %"class.std::__1::__tree_node"**
  %44 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %43, align 8
  %45 = icmp eq %"class.std::__1::__tree_node"* %44, null
  br i1 %45, label %46, label %71

46:                                               ; preds = %40
  %47 = tail call i8* @_Znwm(i64 40) #13, !noalias !9
  %48 = getelementptr inbounds i8, i8* %47, i64 32
  %49 = bitcast i8* %48 to i64*
  store i64 %3, i64* %49, align 8, !noalias !9
  %50 = bitcast i8* %47 to %"class.std::__1::__tree_node_base"*
  %51 = getelementptr inbounds i8, i8* %47, i64 16
  %52 = bitcast i8* %51 to %"class.std::__1::__tree_end_node"**
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %47, i8 0, i64 16, i1 false) #14
  store %"class.std::__1::__tree_end_node"* %41, %"class.std::__1::__tree_end_node"** %52, align 8
  %53 = bitcast %"class.std::__1::__tree_node_base"** %42 to i8**
  store i8* %47, i8** %53, align 8
  %54 = bitcast %"class.sigslot::has_slots_interface"* %4 to %"class.std::__1::__tree_end_node"**
  %55 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %54, align 8
  %56 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %55, i64 0, i32 0
  %57 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %56, align 8
  %58 = icmp eq %"class.std::__1::__tree_node_base"* %57, null
  br i1 %58, label %63, label %59

59:                                               ; preds = %46
  %60 = ptrtoint %"class.std::__1::__tree_node_base"* %57 to i64
  %61 = bitcast %"class.sigslot::has_slots_interface"* %4 to i64*
  store i64 %60, i64* %61, align 8
  %62 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %42, align 8
  br label %63

63:                                               ; preds = %59, %46
  %64 = phi %"class.std::__1::__tree_node_base"* [ %50, %46 ], [ %62, %59 ]
  %65 = bitcast void (%"class.sigslot::has_slots_interface"*, %"class.sigslot::_signal_base_interface"*)** %5 to %"class.std::__1::__tree_node_base"**
  %66 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %65, align 8
  tail call void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"* %66, %"class.std::__1::__tree_node_base"* %64) #14
  %67 = getelementptr inbounds %"class.sigslot::has_slots_interface", %"class.sigslot::has_slots_interface"* %0, i64 1, i32 2
  %68 = bitcast void (%"class.sigslot::has_slots_interface"*, %"class.sigslot::_signal_base_interface"*)** %67 to i64*
  %69 = load i64, i64* %68, align 8
  %70 = add i64 %69, 1
  store i64 %70, i64* %68, align 8
  br label %71

71:                                               ; preds = %40, %63
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN7sigslot9has_slotsINS_15single_threadedEE20do_signal_disconnectEPNS_19has_slots_interfaceEPNS_22_signal_base_interfaceE(%"class.sigslot::has_slots_interface"*, %"class.sigslot::_signal_base_interface"*) #1 comdat align 2 {
  %3 = getelementptr inbounds %"class.sigslot::has_slots_interface", %"class.sigslot::has_slots_interface"* %0, i64 1
  %4 = getelementptr inbounds %"class.sigslot::has_slots_interface", %"class.sigslot::has_slots_interface"* %0, i64 1, i32 1
  %5 = bitcast void (%"class.sigslot::has_slots_interface"*, %"class.sigslot::_signal_base_interface"*)** %4 to %"class.std::__1::__tree_end_node"*
  %6 = bitcast void (%"class.sigslot::has_slots_interface"*, %"class.sigslot::_signal_base_interface"*)** %4 to %"class.std::__1::__tree_node"**
  %7 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %6, align 8
  %8 = icmp eq %"class.std::__1::__tree_node"* %7, null
  %9 = bitcast %"class.std::__1::__tree_node"* %7 to %"class.std::__1::__tree_node_base"*
  br i1 %8, label %74, label %10

10:                                               ; preds = %2, %10
  %11 = phi %"class.std::__1::__tree_end_node"* [ %21, %10 ], [ %5, %2 ]
  %12 = phi %"class.std::__1::__tree_node"* [ %22, %10 ], [ %7, %2 ]
  %13 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %12, i64 0, i32 1
  %14 = load %"class.sigslot::_signal_base_interface"*, %"class.sigslot::_signal_base_interface"** %13, align 8
  %15 = icmp ult %"class.sigslot::_signal_base_interface"* %14, %1
  %16 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %12, i64 0, i32 0, i32 1
  %17 = bitcast %"class.std::__1::__tree_node_base"** %16 to %"class.std::__1::__tree_node"**
  %18 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %12, i64 0, i32 0, i32 0
  %19 = bitcast %"class.std::__1::__tree_node"* %12 to %"class.std::__1::__tree_node"**
  %20 = select i1 %15, %"class.std::__1::__tree_node"** %17, %"class.std::__1::__tree_node"** %19
  %21 = select i1 %15, %"class.std::__1::__tree_end_node"* %11, %"class.std::__1::__tree_end_node"* %18
  %22 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %20, align 8
  %23 = icmp eq %"class.std::__1::__tree_node"* %22, null
  br i1 %23, label %24, label %10

24:                                               ; preds = %10
  %25 = icmp eq %"class.std::__1::__tree_end_node"* %21, %5
  br i1 %25, label %74, label %26

26:                                               ; preds = %24
  %27 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %21, i64 4
  %28 = bitcast %"class.std::__1::__tree_end_node"* %27 to %"class.sigslot::_signal_base_interface"**
  %29 = load %"class.sigslot::_signal_base_interface"*, %"class.sigslot::_signal_base_interface"** %28, align 8
  %30 = icmp ugt %"class.sigslot::_signal_base_interface"* %29, %1
  br i1 %30, label %74, label %31

31:                                               ; preds = %26
  %32 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %21, i64 1, i32 0
  %33 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %32, align 8
  %34 = icmp eq %"class.std::__1::__tree_node_base"* %33, null
  br i1 %34, label %35, label %43

35:                                               ; preds = %31
  %36 = bitcast %"class.std::__1::__tree_end_node"* %21 to %"class.std::__1::__tree_node_base"*
  %37 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %21, i64 2
  %38 = bitcast %"class.std::__1::__tree_end_node"* %37 to %"class.std::__1::__tree_end_node"**
  %39 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %38, align 8
  %40 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %39, i64 0, i32 0
  %41 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %40, align 8
  %42 = icmp eq %"class.std::__1::__tree_node_base"* %41, %36
  br i1 %42, label %59, label %50

43:                                               ; preds = %31, %43
  %44 = phi %"class.std::__1::__tree_node_base"* [ %46, %43 ], [ %33, %31 ]
  %45 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %44, i64 0, i32 0, i32 0
  %46 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %45, align 8
  %47 = icmp eq %"class.std::__1::__tree_node_base"* %46, null
  br i1 %47, label %48, label %43

48:                                               ; preds = %43
  %49 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %44, i64 0, i32 0
  br label %59

50:                                               ; preds = %35, %50
  %51 = phi %"class.std::__1::__tree_end_node"** [ %54, %50 ], [ %38, %35 ]
  %52 = bitcast %"class.std::__1::__tree_end_node"** %51 to %"class.std::__1::__tree_node_base"**
  %53 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %52, align 8
  %54 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %53, i64 0, i32 2
  %55 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %54, align 8
  %56 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %55, i64 0, i32 0
  %57 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %56, align 8
  %58 = icmp eq %"class.std::__1::__tree_node_base"* %57, %53
  br i1 %58, label %59, label %50

59:                                               ; preds = %50, %48, %35
  %60 = phi %"class.std::__1::__tree_end_node"* [ %49, %48 ], [ %39, %35 ], [ %55, %50 ]
  %61 = bitcast %"class.sigslot::has_slots_interface"* %3 to %"class.std::__1::__tree_end_node"**
  %62 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %61, align 8
  %63 = icmp eq %"class.std::__1::__tree_end_node"* %62, %21
  br i1 %63, label %64, label %67

64:                                               ; preds = %59
  %65 = ptrtoint %"class.std::__1::__tree_end_node"* %60 to i64
  %66 = bitcast %"class.sigslot::has_slots_interface"* %3 to i64*
  store i64 %65, i64* %66, align 8
  br label %67

67:                                               ; preds = %64, %59
  %68 = getelementptr inbounds %"class.sigslot::has_slots_interface", %"class.sigslot::has_slots_interface"* %0, i64 1, i32 2
  %69 = bitcast void (%"class.sigslot::has_slots_interface"*, %"class.sigslot::_signal_base_interface"*)** %68 to i64*
  %70 = load i64, i64* %69, align 8
  %71 = add i64 %70, -1
  store i64 %71, i64* %69, align 8
  %72 = bitcast %"class.std::__1::__tree_end_node"* %21 to %"class.std::__1::__tree_node_base"*
  tail call void @_ZNSt3__113__tree_removeIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"* nonnull %9, %"class.std::__1::__tree_node_base"* %72) #14
  %73 = bitcast %"class.std::__1::__tree_end_node"* %21 to i8*
  tail call void @_ZdlPv(i8* %73) #13
  br label %74

74:                                               ; preds = %2, %24, %26, %67
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN7sigslot9has_slotsINS_15single_threadedEE17do_disconnect_allEPNS_19has_slots_interfaceE(%"class.sigslot::has_slots_interface"*) #1 comdat align 2 {
  %2 = alloca %"class.std::__1::set.4", align 8
  %3 = getelementptr inbounds %"class.sigslot::has_slots_interface", %"class.sigslot::has_slots_interface"* %0, i64 1
  %4 = getelementptr inbounds %"class.sigslot::has_slots_interface", %"class.sigslot::has_slots_interface"* %0, i64 1, i32 2
  %5 = bitcast void (%"class.sigslot::has_slots_interface"*, %"class.sigslot::_signal_base_interface"*)** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %83, label %8

8:                                                ; preds = %1
  %9 = bitcast %"class.std::__1::set.4"* %2 to i8*
  %10 = getelementptr inbounds %"class.std::__1::set.4", %"class.std::__1::set.4"* %2, i64 0, i32 0, i32 2, i32 0, i32 0
  %11 = getelementptr inbounds %"class.std::__1::set.4", %"class.std::__1::set.4"* %2, i64 0, i32 0, i32 1, i32 0, i32 0
  %12 = bitcast %"class.std::__1::set.4"* %2 to i64*
  %13 = ptrtoint %"class.std::__1::__tree_end_node"* %11 to i64
  %14 = bitcast %"class.sigslot::has_slots_interface"* %3 to i64*
  %15 = getelementptr inbounds %"class.sigslot::has_slots_interface", %"class.sigslot::has_slots_interface"* %0, i64 1, i32 1
  %16 = bitcast %"class.std::__1::__tree_end_node"* %11 to i64*
  %17 = bitcast void (%"class.sigslot::has_slots_interface"*, %"class.sigslot::_signal_base_interface"*)** %15 to i64*
  %18 = bitcast void (%"class.sigslot::has_slots_interface"*, %"class.sigslot::_signal_base_interface"*)** %15 to %"class.std::__1::__tree_node_base"**
  %19 = bitcast %"class.sigslot::has_slots_interface"* %3 to void (%"class.sigslot::has_slots_interface"*, %"class.sigslot::_signal_base_interface"*)***
  %20 = getelementptr inbounds %"class.std::__1::set.4", %"class.std::__1::set.4"* %2, i64 0, i32 0
  %21 = bitcast %"class.std::__1::__tree_end_node"* %11 to %"class.std::__1::__tree_node"**
  %22 = bitcast void (%"class.sigslot::has_slots_interface"*, %"class.sigslot::_signal_base_interface"*)** %15 to <2 x i64>*
  br label %23

23:                                               ; preds = %8, %79
  %24 = phi i64 [ %6, %8 ], [ %81, %79 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %9) #14
  %25 = load i64, i64* %14, align 8
  store i64 %25, i64* %12, align 8
  store i64 %13, i64* %14, align 8
  %26 = load i64, i64* %17, align 8
  store i64 %26, i64* %16, align 8
  store i64 %24, i64* %10, align 8
  store <2 x i64> zeroinitializer, <2 x i64>* %22, align 8
  %27 = inttoptr i64 %26 to %"class.std::__1::__tree_node_base"*
  %28 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %27, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %11, %"class.std::__1::__tree_end_node"** %28, align 8
  %29 = load i64, i64* %5, align 8
  %30 = icmp eq i64 %29, 0
  %31 = inttoptr i64 %25 to %"class.std::__1::__tree_end_node"*
  %32 = inttoptr i64 %26 to %"class.std::__1::__tree_node"*
  br i1 %30, label %37, label %33

33:                                               ; preds = %23
  %34 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %18, align 8
  %35 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %34, i64 0, i32 2
  %36 = bitcast %"class.std::__1::__tree_end_node"** %35 to void (%"class.sigslot::has_slots_interface"*, %"class.sigslot::_signal_base_interface"*)***
  br label %37

37:                                               ; preds = %23, %33
  %38 = phi void (%"class.sigslot::has_slots_interface"*, %"class.sigslot::_signal_base_interface"*)*** [ %36, %33 ], [ %19, %23 ]
  store void (%"class.sigslot::has_slots_interface"*, %"class.sigslot::_signal_base_interface"*)** %15, void (%"class.sigslot::has_slots_interface"*, %"class.sigslot::_signal_base_interface"*)*** %38, align 8
  %39 = icmp eq %"class.std::__1::__tree_end_node"* %11, %31
  br i1 %39, label %79, label %40

40:                                               ; preds = %37, %72
  %41 = phi %"class.std::__1::__tree_end_node"* [ %73, %72 ], [ %31, %37 ]
  %42 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %41, i64 4
  %43 = bitcast %"class.std::__1::__tree_end_node"* %42 to %"class.sigslot::_signal_base_interface"**
  %44 = load %"class.sigslot::_signal_base_interface"*, %"class.sigslot::_signal_base_interface"** %43, align 8
  %45 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %41, i64 1, i32 0
  %46 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %45, align 8
  %47 = icmp eq %"class.std::__1::__tree_node_base"* %46, null
  br i1 %47, label %48, label %56

48:                                               ; preds = %40
  %49 = bitcast %"class.std::__1::__tree_end_node"* %41 to %"class.std::__1::__tree_node_base"*
  %50 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %41, i64 2
  %51 = bitcast %"class.std::__1::__tree_end_node"* %50 to %"class.std::__1::__tree_end_node"**
  %52 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %51, align 8
  %53 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %52, i64 0, i32 0
  %54 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %53, align 8
  %55 = icmp eq %"class.std::__1::__tree_node_base"* %54, %49
  br i1 %55, label %72, label %63

56:                                               ; preds = %40, %56
  %57 = phi %"class.std::__1::__tree_node_base"* [ %59, %56 ], [ %46, %40 ]
  %58 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %57, i64 0, i32 0, i32 0
  %59 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %58, align 8
  %60 = icmp eq %"class.std::__1::__tree_node_base"* %59, null
  br i1 %60, label %61, label %56

61:                                               ; preds = %56
  %62 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %57, i64 0, i32 0
  br label %72

63:                                               ; preds = %48, %63
  %64 = phi %"class.std::__1::__tree_end_node"** [ %67, %63 ], [ %51, %48 ]
  %65 = bitcast %"class.std::__1::__tree_end_node"** %64 to %"class.std::__1::__tree_node_base"**
  %66 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %65, align 8
  %67 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %66, i64 0, i32 2
  %68 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %67, align 8
  %69 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %68, i64 0, i32 0
  %70 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %69, align 8
  %71 = icmp eq %"class.std::__1::__tree_node_base"* %70, %66
  br i1 %71, label %72, label %63

72:                                               ; preds = %63, %48, %61
  %73 = phi %"class.std::__1::__tree_end_node"* [ %62, %61 ], [ %52, %48 ], [ %68, %63 ]
  %74 = getelementptr inbounds %"class.sigslot::_signal_base_interface", %"class.sigslot::_signal_base_interface"* %44, i64 0, i32 0
  %75 = load void (%"class.sigslot::_signal_base_interface"*, %"class.sigslot::has_slots_interface"*)*, void (%"class.sigslot::_signal_base_interface"*, %"class.sigslot::has_slots_interface"*)** %74, align 8
  call void %75(%"class.sigslot::_signal_base_interface"* %44, %"class.sigslot::has_slots_interface"* %0) #14
  %76 = icmp eq %"class.std::__1::__tree_end_node"* %73, %11
  br i1 %76, label %77, label %40

77:                                               ; preds = %72
  %78 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %21, align 8
  br label %79

79:                                               ; preds = %77, %37
  %80 = phi %"class.std::__1::__tree_node"* [ %78, %77 ], [ %32, %37 ]
  call void @_ZNSt3__16__treeIPN7sigslot22_signal_base_interfaceENS_4lessIS3_EENS_9allocatorIS3_EEE7destroyEPNS_11__tree_nodeIS3_PvEE(%"class.std::__1::__tree"* nonnull %20, %"class.std::__1::__tree_node"* %80) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #14
  %81 = load i64, i64* %5, align 8
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %83, label %23

83:                                               ; preds = %79, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN7sigslot9has_slotsINS_15single_threadedEED2Ev(%"class.sigslot::has_slots"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.sigslot::has_slots", %"class.sigslot::has_slots"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN7sigslot9has_slotsINS_15single_threadedEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.sigslot::has_slots", %"class.sigslot::has_slots"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.sigslot::has_slots", %"class.sigslot::has_slots"* %0, i64 0, i32 0, i32 3
  %5 = load void (%"class.sigslot::has_slots_interface"*)*, void (%"class.sigslot::has_slots_interface"*)** %4, align 8
  tail call void %5(%"class.sigslot::has_slots_interface"* %3) #14
  %6 = getelementptr inbounds %"class.sigslot::has_slots", %"class.sigslot::has_slots"* %0, i64 0, i32 1, i32 0
  %7 = getelementptr inbounds %"class.sigslot::has_slots", %"class.sigslot::has_slots"* %0, i64 0, i32 1, i32 0, i32 1, i32 0, i32 0
  %8 = bitcast %"class.std::__1::__tree_end_node"* %7 to %"class.std::__1::__tree_node"**
  %9 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %8, align 8
  tail call void @_ZNSt3__16__treeIPN7sigslot22_signal_base_interfaceENS_4lessIS3_EENS_9allocatorIS3_EEE7destroyEPNS_11__tree_nodeIS3_PvEE(%"class.std::__1::__tree"* %6, %"class.std::__1::__tree_node"* %9) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN7sigslot9has_slotsINS_15single_threadedEED0Ev(%"class.sigslot::has_slots"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.sigslot::has_slots", %"class.sigslot::has_slots"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN7sigslot9has_slotsINS_15single_threadedEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.sigslot::has_slots", %"class.sigslot::has_slots"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.sigslot::has_slots", %"class.sigslot::has_slots"* %0, i64 0, i32 0, i32 3
  %5 = load void (%"class.sigslot::has_slots_interface"*)*, void (%"class.sigslot::has_slots_interface"*)** %4, align 8
  tail call void %5(%"class.sigslot::has_slots_interface"* %3) #14
  %6 = getelementptr inbounds %"class.sigslot::has_slots", %"class.sigslot::has_slots"* %0, i64 0, i32 1, i32 0
  %7 = getelementptr inbounds %"class.sigslot::has_slots", %"class.sigslot::has_slots"* %0, i64 0, i32 1, i32 0, i32 1, i32 0, i32 0
  %8 = bitcast %"class.std::__1::__tree_end_node"* %7 to %"class.std::__1::__tree_node"**
  %9 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %8, align 8
  tail call void @_ZNSt3__16__treeIPN7sigslot22_signal_base_interfaceENS_4lessIS3_EENS_9allocatorIS3_EEE7destroyEPNS_11__tree_nodeIS3_PvEE(%"class.std::__1::__tree"* %6, %"class.std::__1::__tree_node"* %9) #14
  %10 = bitcast %"class.sigslot::has_slots"* %0 to i8*
  tail call void @_ZdlPv(i8* %10) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"*) local_unnamed_addr #1 comdat {
  %3 = icmp eq %"class.std::__1::__tree_node_base"* %1, %0
  %4 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 3
  %5 = zext i1 %3 to i8
  store i8 %5, i8* %4, align 8
  br i1 %3, label %156, label %6

6:                                                ; preds = %2, %149
  %7 = phi %"class.std::__1::__tree_node_base"* [ %20, %149 ], [ %1, %2 ]
  %8 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 2
  %9 = bitcast %"class.std::__1::__tree_end_node"** %8 to %"class.std::__1::__tree_node_base"**
  %10 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 3
  %12 = load i8, i8* %11, align 8, !range !5
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %156

14:                                               ; preds = %6
  %15 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %16 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 0, i32 0
  %18 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %17, align 8
  %19 = icmp eq %"class.std::__1::__tree_node_base"* %18, %10
  %20 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  br i1 %19, label %21, label %87

21:                                               ; preds = %14
  %22 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 1, i32 0
  %23 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %22, align 8
  %24 = icmp eq %"class.std::__1::__tree_node_base"* %23, null
  br i1 %24, label %29, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %23, i64 0, i32 3
  %27 = load i8, i8* %26, align 8, !range !5
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %149, label %29

29:                                               ; preds = %25, %21
  %30 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %31 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  %32 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %33 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %32, align 8
  %34 = icmp eq %"class.std::__1::__tree_node_base"* %33, %7
  br i1 %34, label %61, label %35

35:                                               ; preds = %29
  %36 = ptrtoint %"class.std::__1::__tree_end_node"* %16 to i64
  %37 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 1
  %38 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %37, align 8
  %39 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 0, i32 0
  %40 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %39, align 8
  store %"class.std::__1::__tree_node_base"* %40, %"class.std::__1::__tree_node_base"** %37, align 8
  %41 = icmp eq %"class.std::__1::__tree_node_base"* %40, null
  br i1 %41, label %47, label %42

42:                                               ; preds = %35
  %43 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0
  %44 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %40, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %43, %"class.std::__1::__tree_end_node"** %44, align 8
  %45 = bitcast %"class.std::__1::__tree_end_node"** %30 to i64*
  %46 = load i64, i64* %45, align 8
  br label %47

47:                                               ; preds = %35, %42
  %48 = phi i64 [ %46, %42 ], [ %36, %35 ]
  %49 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 2
  %50 = bitcast %"class.std::__1::__tree_end_node"** %49 to i64*
  store i64 %48, i64* %50, align 8
  %51 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %30, align 8
  %52 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %51, i64 0, i32 0
  %53 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %52, align 8
  %54 = icmp eq %"class.std::__1::__tree_node_base"* %53, %10
  %55 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %51, i64 1, i32 0
  %56 = select i1 %54, %"class.std::__1::__tree_node_base"** %52, %"class.std::__1::__tree_node_base"** %55
  store %"class.std::__1::__tree_node_base"* %38, %"class.std::__1::__tree_node_base"** %56, align 8
  store %"class.std::__1::__tree_node_base"* %10, %"class.std::__1::__tree_node_base"** %39, align 8
  %57 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %57, %"class.std::__1::__tree_end_node"** %30, align 8
  %58 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 2
  %59 = bitcast %"class.std::__1::__tree_end_node"** %58 to %"class.std::__1::__tree_node_base"**
  %60 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %59, align 8
  br label %61

61:                                               ; preds = %47, %29
  %62 = phi %"class.std::__1::__tree_node_base"* [ %31, %29 ], [ %60, %47 ]
  %63 = phi %"class.std::__1::__tree_node_base"* [ %10, %29 ], [ %38, %47 ]
  %64 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %63, i64 0, i32 3
  store i8 1, i8* %64, align 8
  %65 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 3
  store i8 0, i8* %65, align 8
  %66 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 0, i32 0
  %67 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %66, align 8
  %68 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 1
  %69 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %68, align 8
  store %"class.std::__1::__tree_node_base"* %69, %"class.std::__1::__tree_node_base"** %66, align 8
  %70 = icmp eq %"class.std::__1::__tree_node_base"* %69, null
  br i1 %70, label %74, label %71

71:                                               ; preds = %61
  %72 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 0
  %73 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %69, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %72, %"class.std::__1::__tree_end_node"** %73, align 8
  br label %74

74:                                               ; preds = %71, %61
  %75 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 2
  %76 = bitcast %"class.std::__1::__tree_end_node"** %75 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 2
  %79 = bitcast %"class.std::__1::__tree_end_node"** %78 to i64*
  store i64 %77, i64* %79, align 8
  %80 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %75, align 8
  %81 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 0, i32 0
  %82 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %81, align 8
  %83 = icmp eq %"class.std::__1::__tree_node_base"* %82, %62
  %84 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 1, i32 0
  %85 = select i1 %83, %"class.std::__1::__tree_node_base"** %81, %"class.std::__1::__tree_node_base"** %84
  store %"class.std::__1::__tree_node_base"* %67, %"class.std::__1::__tree_node_base"** %85, align 8
  store %"class.std::__1::__tree_node_base"* %62, %"class.std::__1::__tree_node_base"** %68, align 8
  %86 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %86, %"class.std::__1::__tree_end_node"** %75, align 8
  br label %156

87:                                               ; preds = %14
  %88 = icmp eq %"class.std::__1::__tree_node_base"* %18, null
  br i1 %88, label %93, label %89

89:                                               ; preds = %87
  %90 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %18, i64 0, i32 3
  %91 = load i8, i8* %90, align 8, !range !5
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %149, label %93

93:                                               ; preds = %89, %87
  %94 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %95 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  %96 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %97 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %96, align 8
  %98 = icmp eq %"class.std::__1::__tree_node_base"* %97, %7
  br i1 %98, label %99, label %123

99:                                               ; preds = %93
  %100 = ptrtoint %"class.std::__1::__tree_end_node"* %16 to i64
  %101 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %102 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 1
  %103 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %102, align 8
  store %"class.std::__1::__tree_node_base"* %103, %"class.std::__1::__tree_node_base"** %101, align 8
  %104 = icmp eq %"class.std::__1::__tree_node_base"* %103, null
  br i1 %104, label %110, label %105

105:                                              ; preds = %99
  %106 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0
  %107 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %103, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %106, %"class.std::__1::__tree_end_node"** %107, align 8
  %108 = bitcast %"class.std::__1::__tree_end_node"** %94 to i64*
  %109 = load i64, i64* %108, align 8
  br label %110

110:                                              ; preds = %99, %105
  %111 = phi i64 [ %109, %105 ], [ %100, %99 ]
  %112 = bitcast %"class.std::__1::__tree_end_node"** %8 to i64*
  store i64 %111, i64* %112, align 8
  %113 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %94, align 8
  %114 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %113, i64 0, i32 0
  %115 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %114, align 8
  %116 = icmp eq %"class.std::__1::__tree_node_base"* %115, %10
  %117 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %113, i64 1, i32 0
  %118 = select i1 %116, %"class.std::__1::__tree_node_base"** %114, %"class.std::__1::__tree_node_base"** %117
  store %"class.std::__1::__tree_node_base"* %7, %"class.std::__1::__tree_node_base"** %118, align 8
  store %"class.std::__1::__tree_node_base"* %10, %"class.std::__1::__tree_node_base"** %102, align 8
  %119 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %119, %"class.std::__1::__tree_end_node"** %94, align 8
  %120 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 2
  %121 = bitcast %"class.std::__1::__tree_end_node"** %120 to %"class.std::__1::__tree_node_base"**
  %122 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %121, align 8
  br label %123

123:                                              ; preds = %93, %110
  %124 = phi %"class.std::__1::__tree_node_base"* [ %122, %110 ], [ %95, %93 ]
  %125 = phi %"class.std::__1::__tree_node_base"* [ %7, %110 ], [ %10, %93 ]
  %126 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %125, i64 0, i32 3
  store i8 1, i8* %126, align 8
  %127 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 3
  store i8 0, i8* %127, align 8
  %128 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 1
  %129 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %128, align 8
  %130 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 0, i32 0
  %131 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %130, align 8
  store %"class.std::__1::__tree_node_base"* %131, %"class.std::__1::__tree_node_base"** %128, align 8
  %132 = icmp eq %"class.std::__1::__tree_node_base"* %131, null
  br i1 %132, label %136, label %133

133:                                              ; preds = %123
  %134 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 0
  %135 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %131, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %134, %"class.std::__1::__tree_end_node"** %135, align 8
  br label %136

136:                                              ; preds = %133, %123
  %137 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 2
  %138 = bitcast %"class.std::__1::__tree_end_node"** %137 to i64*
  %139 = load i64, i64* %138, align 8
  %140 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 2
  %141 = bitcast %"class.std::__1::__tree_end_node"** %140 to i64*
  store i64 %139, i64* %141, align 8
  %142 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %137, align 8
  %143 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %142, i64 0, i32 0
  %144 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %143, align 8
  %145 = icmp eq %"class.std::__1::__tree_node_base"* %144, %124
  %146 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %142, i64 1, i32 0
  %147 = select i1 %145, %"class.std::__1::__tree_node_base"** %143, %"class.std::__1::__tree_node_base"** %146
  store %"class.std::__1::__tree_node_base"* %129, %"class.std::__1::__tree_node_base"** %147, align 8
  store %"class.std::__1::__tree_node_base"* %124, %"class.std::__1::__tree_node_base"** %130, align 8
  %148 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %148, %"class.std::__1::__tree_end_node"** %137, align 8
  br label %156

149:                                              ; preds = %89, %25
  %150 = phi i8* [ %26, %25 ], [ %90, %89 ]
  store i8 1, i8* %11, align 8
  %151 = icmp eq %"class.std::__1::__tree_node_base"* %20, %0
  %152 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 3
  %153 = bitcast %"class.std::__1::__tree_end_node"* %152 to i8*
  %154 = zext i1 %151 to i8
  store i8 %154, i8* %153, align 8
  store i8 1, i8* %150, align 8
  %155 = icmp eq %"class.std::__1::__tree_node_base"* %20, %0
  br i1 %155, label %156, label %6

156:                                              ; preds = %6, %149, %2, %136, %74
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__113__tree_removeIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"*) local_unnamed_addr #1 comdat {
  %3 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 0, i32 0
  %4 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %3, align 8
  %5 = icmp eq %"class.std::__1::__tree_node_base"* %4, null
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 1
  %8 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %7, align 8
  %9 = icmp eq %"class.std::__1::__tree_node_base"* %8, null
  br i1 %9, label %15, label %10

10:                                               ; preds = %6, %10
  %11 = phi %"class.std::__1::__tree_node_base"* [ %13, %10 ], [ %8, %6 ]
  %12 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %11, i64 0, i32 0, i32 0
  %13 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %12, align 8
  %14 = icmp eq %"class.std::__1::__tree_node_base"* %13, null
  br i1 %14, label %17, label %10

15:                                               ; preds = %6
  %16 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 0, i32 0
  br label %23

17:                                               ; preds = %10, %2
  %18 = phi %"class.std::__1::__tree_node_base"* [ %1, %2 ], [ %11, %10 ]
  %19 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %18, i64 0, i32 0, i32 0
  %20 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %18, i64 0, i32 1
  %21 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %20, align 8
  %22 = icmp eq %"class.std::__1::__tree_node_base"* %21, null
  br i1 %22, label %32, label %23

23:                                               ; preds = %15, %17
  %24 = phi %"class.std::__1::__tree_node_base"** [ %19, %17 ], [ %16, %15 ]
  %25 = phi %"class.std::__1::__tree_node_base"* [ %18, %17 ], [ %1, %15 ]
  %26 = phi %"class.std::__1::__tree_node_base"* [ %21, %17 ], [ %4, %15 ]
  %27 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %25, i64 0, i32 2
  %28 = bitcast %"class.std::__1::__tree_end_node"** %27 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %26, i64 0, i32 2
  %31 = bitcast %"class.std::__1::__tree_end_node"** %30 to i64*
  store i64 %29, i64* %31, align 8
  br label %32

32:                                               ; preds = %17, %23
  %33 = phi %"class.std::__1::__tree_node_base"** [ %24, %23 ], [ %19, %17 ]
  %34 = phi %"class.std::__1::__tree_node_base"* [ %25, %23 ], [ %18, %17 ]
  %35 = phi i1 [ true, %23 ], [ false, %17 ]
  %36 = phi %"class.std::__1::__tree_node_base"* [ %26, %23 ], [ null, %17 ]
  %37 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %34, i64 0, i32 2
  %38 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %37, align 8
  %39 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %38, i64 0, i32 0
  %40 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %39, align 8
  %41 = icmp eq %"class.std::__1::__tree_node_base"* %40, %34
  br i1 %41, label %42, label %48

42:                                               ; preds = %32
  store %"class.std::__1::__tree_node_base"* %36, %"class.std::__1::__tree_node_base"** %39, align 8
  %43 = icmp eq %"class.std::__1::__tree_node_base"* %34, %0
  br i1 %43, label %55, label %44

44:                                               ; preds = %42
  %45 = bitcast %"class.std::__1::__tree_end_node"** %37 to %"class.std::__1::__tree_node_base"**
  %46 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %45, align 8
  %47 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %46, i64 0, i32 1
  br label %52

48:                                               ; preds = %32
  %49 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %38, i64 1, i32 0
  store %"class.std::__1::__tree_node_base"* %36, %"class.std::__1::__tree_node_base"** %49, align 8
  %50 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %37, align 8
  %51 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %50, i64 0, i32 0
  br label %52

52:                                               ; preds = %48, %44
  %53 = phi %"class.std::__1::__tree_node_base"** [ %47, %44 ], [ %51, %48 ]
  %54 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %53, align 8
  br label %55

55:                                               ; preds = %52, %42
  %56 = phi %"class.std::__1::__tree_node_base"* [ %36, %42 ], [ %0, %52 ]
  %57 = phi %"class.std::__1::__tree_node_base"* [ null, %42 ], [ %54, %52 ]
  %58 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %34, i64 0, i32 3
  %59 = load i8, i8* %58, align 8, !range !5
  %60 = icmp ne i8 %59, 0
  %61 = icmp eq %"class.std::__1::__tree_node_base"* %34, %1
  br i1 %61, label %90, label %62

62:                                               ; preds = %55
  %63 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 2
  %64 = bitcast %"class.std::__1::__tree_end_node"** %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = bitcast %"class.std::__1::__tree_end_node"** %37 to i64*
  store i64 %65, i64* %66, align 8
  %67 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %63, align 8
  %68 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %67, i64 0, i32 0
  %69 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %68, align 8
  %70 = icmp eq %"class.std::__1::__tree_node_base"* %69, %1
  %71 = inttoptr i64 %65 to %"class.std::__1::__tree_node_base"*
  %72 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %71, i64 0, i32 1
  %73 = inttoptr i64 %65 to %"class.std::__1::__tree_end_node"*
  %74 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %73, i64 0, i32 0
  %75 = select i1 %70, %"class.std::__1::__tree_node_base"** %74, %"class.std::__1::__tree_node_base"** %72
  store %"class.std::__1::__tree_node_base"* %34, %"class.std::__1::__tree_node_base"** %75, align 8
  %76 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %3, align 8
  store %"class.std::__1::__tree_node_base"* %76, %"class.std::__1::__tree_node_base"** %33, align 8
  %77 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %34, i64 0, i32 0
  %78 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %76, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %77, %"class.std::__1::__tree_end_node"** %78, align 8
  %79 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 1
  %80 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %79, align 8
  %81 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %34, i64 0, i32 1
  store %"class.std::__1::__tree_node_base"* %80, %"class.std::__1::__tree_node_base"** %81, align 8
  %82 = icmp eq %"class.std::__1::__tree_node_base"* %80, null
  br i1 %82, label %85, label %83

83:                                               ; preds = %62
  %84 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %80, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %77, %"class.std::__1::__tree_end_node"** %84, align 8
  br label %85

85:                                               ; preds = %62, %83
  %86 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 3
  %87 = load i8, i8* %86, align 8, !range !5
  store i8 %87, i8* %58, align 8
  %88 = icmp eq %"class.std::__1::__tree_node_base"* %56, %1
  %89 = select i1 %88, %"class.std::__1::__tree_node_base"* %34, %"class.std::__1::__tree_node_base"* %56
  br label %90

90:                                               ; preds = %85, %55
  %91 = phi %"class.std::__1::__tree_node_base"* [ %56, %55 ], [ %89, %85 ]
  %92 = icmp ne %"class.std::__1::__tree_node_base"* %91, null
  %93 = and i1 %60, %92
  br i1 %93, label %94, label %382

94:                                               ; preds = %90
  br i1 %35, label %95, label %97

95:                                               ; preds = %94
  %96 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %36, i64 0, i32 3
  store i8 1, i8* %96, align 8
  br label %382

97:                                               ; preds = %94, %371
  %98 = phi %"class.std::__1::__tree_node_base"* [ %373, %371 ], [ %91, %94 ]
  %99 = phi %"class.std::__1::__tree_node_base"* [ %381, %371 ], [ %57, %94 ]
  %100 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %99, i64 0, i32 2
  %101 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %100, align 8
  %102 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %101, i64 0, i32 0
  %103 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %102, align 8
  %104 = icmp eq %"class.std::__1::__tree_node_base"* %103, %99
  %105 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %99, i64 0, i32 3
  %106 = load i8, i8* %105, align 8, !range !5
  %107 = icmp ne i8 %106, 0
  br i1 %104, label %242, label %108

108:                                              ; preds = %97
  br i1 %107, label %141, label %109

109:                                              ; preds = %108
  store i8 1, i8* %105, align 8
  %110 = bitcast %"class.std::__1::__tree_end_node"** %100 to %"class.std::__1::__tree_node_base"**
  %111 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %101, i64 3
  %112 = bitcast %"class.std::__1::__tree_end_node"* %111 to i8*
  store i8 0, i8* %112, align 8
  %113 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %110, align 8
  %114 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %113, i64 0, i32 1
  %115 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %114, align 8
  %116 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %115, i64 0, i32 0, i32 0
  %117 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %116, align 8
  store %"class.std::__1::__tree_node_base"* %117, %"class.std::__1::__tree_node_base"** %114, align 8
  %118 = icmp eq %"class.std::__1::__tree_node_base"* %117, null
  br i1 %118, label %122, label %119

119:                                              ; preds = %109
  %120 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %113, i64 0, i32 0
  %121 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %117, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %120, %"class.std::__1::__tree_end_node"** %121, align 8
  br label %122

122:                                              ; preds = %119, %109
  %123 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %113, i64 0, i32 2
  %124 = bitcast %"class.std::__1::__tree_end_node"** %123 to i64*
  %125 = load i64, i64* %124, align 8
  %126 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %115, i64 0, i32 2
  %127 = bitcast %"class.std::__1::__tree_end_node"** %126 to i64*
  store i64 %125, i64* %127, align 8
  %128 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %123, align 8
  %129 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %128, i64 0, i32 0
  %130 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %129, align 8
  %131 = icmp eq %"class.std::__1::__tree_node_base"* %130, %113
  %132 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %128, i64 1, i32 0
  %133 = select i1 %131, %"class.std::__1::__tree_node_base"** %129, %"class.std::__1::__tree_node_base"** %132
  store %"class.std::__1::__tree_node_base"* %115, %"class.std::__1::__tree_node_base"** %133, align 8
  store %"class.std::__1::__tree_node_base"* %113, %"class.std::__1::__tree_node_base"** %116, align 8
  %134 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %115, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %134, %"class.std::__1::__tree_end_node"** %123, align 8
  %135 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %99, i64 0, i32 0, i32 0
  %136 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %135, align 8
  %137 = icmp eq %"class.std::__1::__tree_node_base"* %98, %136
  %138 = select i1 %137, %"class.std::__1::__tree_node_base"* %99, %"class.std::__1::__tree_node_base"* %98
  %139 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %136, i64 0, i32 1
  %140 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %139, align 8
  br label %141

141:                                              ; preds = %122, %108
  %142 = phi %"class.std::__1::__tree_node_base"* [ %98, %108 ], [ %138, %122 ]
  %143 = phi %"class.std::__1::__tree_node_base"* [ %99, %108 ], [ %140, %122 ]
  %144 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %143, i64 0, i32 0, i32 0
  %145 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %144, align 8
  %146 = icmp eq %"class.std::__1::__tree_node_base"* %145, null
  br i1 %146, label %151, label %147

147:                                              ; preds = %141
  %148 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %145, i64 0, i32 3
  %149 = load i8, i8* %148, align 8, !range !5
  %150 = icmp eq i8 %149, 0
  br i1 %150, label %172, label %151

151:                                              ; preds = %147, %141
  %152 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %143, i64 0, i32 1
  %153 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %152, align 8
  %154 = icmp eq %"class.std::__1::__tree_node_base"* %153, null
  br i1 %154, label %159, label %155

155:                                              ; preds = %151
  %156 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %153, i64 0, i32 3
  %157 = load i8, i8* %156, align 8, !range !5
  %158 = icmp eq i8 %157, 0
  br i1 %158, label %177, label %159

159:                                              ; preds = %155, %151
  %160 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %143, i64 0, i32 3
  store i8 0, i8* %160, align 8
  %161 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %143, i64 0, i32 2
  %162 = bitcast %"class.std::__1::__tree_end_node"** %161 to %"class.std::__1::__tree_node_base"**
  %163 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %162, align 8
  %164 = icmp eq %"class.std::__1::__tree_node_base"* %163, %142
  br i1 %164, label %169, label %165

165:                                              ; preds = %159
  %166 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %163, i64 0, i32 3
  %167 = load i8, i8* %166, align 8, !range !5
  %168 = icmp eq i8 %167, 0
  br i1 %168, label %169, label %371

169:                                              ; preds = %165, %159
  %170 = phi %"class.std::__1::__tree_node_base"* [ %163, %165 ], [ %142, %159 ]
  %171 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %170, i64 0, i32 3
  store i8 1, i8* %171, align 8
  br label %382

172:                                              ; preds = %147
  %173 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %143, i64 0, i32 0, i32 0
  %174 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %143, i64 0, i32 1
  %175 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %174, align 8
  %176 = icmp eq %"class.std::__1::__tree_node_base"* %175, null
  br i1 %176, label %185, label %179

177:                                              ; preds = %155
  %178 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %143, i64 0, i32 0, i32 0
  br label %179

179:                                              ; preds = %177, %172
  %180 = phi %"class.std::__1::__tree_node_base"** [ %173, %172 ], [ %178, %177 ]
  %181 = phi %"class.std::__1::__tree_node_base"* [ %175, %172 ], [ %153, %177 ]
  %182 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %181, i64 0, i32 3
  %183 = load i8, i8* %182, align 8, !range !5
  %184 = icmp eq i8 %183, 0
  br i1 %184, label %209, label %185

185:                                              ; preds = %179, %172
  %186 = phi %"class.std::__1::__tree_node_base"** [ %180, %179 ], [ %173, %172 ]
  %187 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %145, i64 0, i32 3
  store i8 1, i8* %187, align 8
  %188 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %143, i64 0, i32 3
  store i8 0, i8* %188, align 8
  %189 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %186, align 8
  %190 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %189, i64 0, i32 1
  %191 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %190, align 8
  store %"class.std::__1::__tree_node_base"* %191, %"class.std::__1::__tree_node_base"** %186, align 8
  %192 = icmp eq %"class.std::__1::__tree_node_base"* %191, null
  br i1 %192, label %196, label %193

193:                                              ; preds = %185
  %194 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %143, i64 0, i32 0
  %195 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %191, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %194, %"class.std::__1::__tree_end_node"** %195, align 8
  br label %196

196:                                              ; preds = %193, %185
  %197 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %143, i64 0, i32 2
  %198 = bitcast %"class.std::__1::__tree_end_node"** %197 to i64*
  %199 = load i64, i64* %198, align 8
  %200 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %189, i64 0, i32 2
  %201 = bitcast %"class.std::__1::__tree_end_node"** %200 to i64*
  store i64 %199, i64* %201, align 8
  %202 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %197, align 8
  %203 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %202, i64 0, i32 0
  %204 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %203, align 8
  %205 = icmp eq %"class.std::__1::__tree_node_base"* %204, %143
  %206 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %202, i64 1, i32 0
  %207 = select i1 %205, %"class.std::__1::__tree_node_base"** %203, %"class.std::__1::__tree_node_base"** %206
  store %"class.std::__1::__tree_node_base"* %189, %"class.std::__1::__tree_node_base"** %207, align 8
  store %"class.std::__1::__tree_node_base"* %143, %"class.std::__1::__tree_node_base"** %190, align 8
  %208 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %189, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %208, %"class.std::__1::__tree_end_node"** %197, align 8
  br label %209

209:                                              ; preds = %179, %196
  %210 = phi %"class.std::__1::__tree_node_base"* [ %189, %196 ], [ %143, %179 ]
  %211 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %210, i64 0, i32 2
  %212 = bitcast %"class.std::__1::__tree_end_node"** %211 to %"class.std::__1::__tree_node_base"**
  %213 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %212, align 8
  %214 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %213, i64 0, i32 3
  %215 = load i8, i8* %214, align 8, !range !5
  %216 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %210, i64 0, i32 3
  store i8 %215, i8* %216, align 8
  store i8 1, i8* %214, align 8
  %217 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %210, i64 0, i32 1
  %218 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %217, align 8
  %219 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %218, i64 0, i32 3
  store i8 1, i8* %219, align 8
  %220 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %212, align 8
  %221 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %220, i64 0, i32 1
  %222 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %221, align 8
  %223 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %222, i64 0, i32 0, i32 0
  %224 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %223, align 8
  store %"class.std::__1::__tree_node_base"* %224, %"class.std::__1::__tree_node_base"** %221, align 8
  %225 = icmp eq %"class.std::__1::__tree_node_base"* %224, null
  br i1 %225, label %229, label %226

226:                                              ; preds = %209
  %227 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %220, i64 0, i32 0
  %228 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %224, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %227, %"class.std::__1::__tree_end_node"** %228, align 8
  br label %229

229:                                              ; preds = %226, %209
  %230 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %220, i64 0, i32 2
  %231 = bitcast %"class.std::__1::__tree_end_node"** %230 to i64*
  %232 = load i64, i64* %231, align 8
  %233 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %222, i64 0, i32 2
  %234 = bitcast %"class.std::__1::__tree_end_node"** %233 to i64*
  store i64 %232, i64* %234, align 8
  %235 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %230, align 8
  %236 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %235, i64 0, i32 0
  %237 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %236, align 8
  %238 = icmp eq %"class.std::__1::__tree_node_base"* %237, %220
  %239 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %235, i64 1, i32 0
  %240 = select i1 %238, %"class.std::__1::__tree_node_base"** %236, %"class.std::__1::__tree_node_base"** %239
  store %"class.std::__1::__tree_node_base"* %222, %"class.std::__1::__tree_node_base"** %240, align 8
  store %"class.std::__1::__tree_node_base"* %220, %"class.std::__1::__tree_node_base"** %223, align 8
  %241 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %222, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %241, %"class.std::__1::__tree_end_node"** %230, align 8
  br label %382

242:                                              ; preds = %97
  br i1 %107, label %275, label %243

243:                                              ; preds = %242
  store i8 1, i8* %105, align 8
  %244 = bitcast %"class.std::__1::__tree_end_node"** %100 to %"class.std::__1::__tree_node_base"**
  %245 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %101, i64 3
  %246 = bitcast %"class.std::__1::__tree_end_node"* %245 to i8*
  store i8 0, i8* %246, align 8
  %247 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %244, align 8
  %248 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %247, i64 0, i32 0, i32 0
  %249 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %248, align 8
  %250 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %249, i64 0, i32 1
  %251 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %250, align 8
  store %"class.std::__1::__tree_node_base"* %251, %"class.std::__1::__tree_node_base"** %248, align 8
  %252 = icmp eq %"class.std::__1::__tree_node_base"* %251, null
  br i1 %252, label %256, label %253

253:                                              ; preds = %243
  %254 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %247, i64 0, i32 0
  %255 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %251, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %254, %"class.std::__1::__tree_end_node"** %255, align 8
  br label %256

256:                                              ; preds = %253, %243
  %257 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %247, i64 0, i32 2
  %258 = bitcast %"class.std::__1::__tree_end_node"** %257 to i64*
  %259 = load i64, i64* %258, align 8
  %260 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %249, i64 0, i32 2
  %261 = bitcast %"class.std::__1::__tree_end_node"** %260 to i64*
  store i64 %259, i64* %261, align 8
  %262 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %257, align 8
  %263 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %262, i64 0, i32 0
  %264 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %263, align 8
  %265 = icmp eq %"class.std::__1::__tree_node_base"* %264, %247
  %266 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %262, i64 1, i32 0
  %267 = select i1 %265, %"class.std::__1::__tree_node_base"** %263, %"class.std::__1::__tree_node_base"** %266
  store %"class.std::__1::__tree_node_base"* %249, %"class.std::__1::__tree_node_base"** %267, align 8
  store %"class.std::__1::__tree_node_base"* %247, %"class.std::__1::__tree_node_base"** %250, align 8
  %268 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %249, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %268, %"class.std::__1::__tree_end_node"** %257, align 8
  %269 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %99, i64 0, i32 1
  %270 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %269, align 8
  %271 = icmp eq %"class.std::__1::__tree_node_base"* %98, %270
  %272 = select i1 %271, %"class.std::__1::__tree_node_base"* %99, %"class.std::__1::__tree_node_base"* %98
  %273 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %270, i64 0, i32 0, i32 0
  %274 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %273, align 8
  br label %275

275:                                              ; preds = %256, %242
  %276 = phi %"class.std::__1::__tree_node_base"* [ %98, %242 ], [ %272, %256 ]
  %277 = phi %"class.std::__1::__tree_node_base"* [ %99, %242 ], [ %274, %256 ]
  %278 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %277, i64 0, i32 0, i32 0
  %279 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %278, align 8
  %280 = icmp eq %"class.std::__1::__tree_node_base"* %279, null
  br i1 %280, label %285, label %281

281:                                              ; preds = %275
  %282 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %279, i64 0, i32 3
  %283 = load i8, i8* %282, align 8, !range !5
  %284 = icmp eq i8 %283, 0
  br i1 %284, label %338, label %285

285:                                              ; preds = %281, %275
  %286 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %277, i64 0, i32 1
  %287 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %286, align 8
  %288 = icmp eq %"class.std::__1::__tree_node_base"* %287, null
  br i1 %288, label %293, label %289

289:                                              ; preds = %285
  %290 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %287, i64 0, i32 3
  %291 = load i8, i8* %290, align 8, !range !5
  %292 = icmp eq i8 %291, 0
  br i1 %292, label %305, label %293

293:                                              ; preds = %289, %285
  %294 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %277, i64 0, i32 3
  store i8 0, i8* %294, align 8
  %295 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %277, i64 0, i32 2
  %296 = bitcast %"class.std::__1::__tree_end_node"** %295 to %"class.std::__1::__tree_node_base"**
  %297 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %296, align 8
  %298 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %297, i64 0, i32 3
  %299 = load i8, i8* %298, align 8, !range !5
  %300 = icmp eq i8 %299, 0
  %301 = icmp eq %"class.std::__1::__tree_node_base"* %297, %276
  %302 = or i1 %301, %300
  br i1 %302, label %303, label %371

303:                                              ; preds = %293
  %304 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %297, i64 0, i32 3
  store i8 1, i8* %304, align 8
  br label %382

305:                                              ; preds = %289
  br i1 %280, label %313, label %306

306:                                              ; preds = %305
  %307 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %279, i64 0, i32 3
  %308 = load i8, i8* %307, align 8, !range !5
  %309 = icmp eq i8 %308, 0
  br i1 %309, label %338, label %310

310:                                              ; preds = %306
  %311 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %277, i64 0, i32 1
  %312 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %311, align 8
  br label %313

313:                                              ; preds = %310, %305
  %314 = phi %"class.std::__1::__tree_node_base"* [ %312, %310 ], [ %287, %305 ]
  %315 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %277, i64 0, i32 1
  %316 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %314, i64 0, i32 3
  store i8 1, i8* %316, align 8
  %317 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %277, i64 0, i32 3
  store i8 0, i8* %317, align 8
  %318 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %315, align 8
  %319 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %318, i64 0, i32 0, i32 0
  %320 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %319, align 8
  store %"class.std::__1::__tree_node_base"* %320, %"class.std::__1::__tree_node_base"** %315, align 8
  %321 = icmp eq %"class.std::__1::__tree_node_base"* %320, null
  br i1 %321, label %325, label %322

322:                                              ; preds = %313
  %323 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %277, i64 0, i32 0
  %324 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %320, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %323, %"class.std::__1::__tree_end_node"** %324, align 8
  br label %325

325:                                              ; preds = %322, %313
  %326 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %277, i64 0, i32 2
  %327 = bitcast %"class.std::__1::__tree_end_node"** %326 to i64*
  %328 = load i64, i64* %327, align 8
  %329 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %318, i64 0, i32 2
  %330 = bitcast %"class.std::__1::__tree_end_node"** %329 to i64*
  store i64 %328, i64* %330, align 8
  %331 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %326, align 8
  %332 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %331, i64 0, i32 0
  %333 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %332, align 8
  %334 = icmp eq %"class.std::__1::__tree_node_base"* %333, %277
  %335 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %331, i64 1, i32 0
  %336 = select i1 %334, %"class.std::__1::__tree_node_base"** %332, %"class.std::__1::__tree_node_base"** %335
  store %"class.std::__1::__tree_node_base"* %318, %"class.std::__1::__tree_node_base"** %336, align 8
  store %"class.std::__1::__tree_node_base"* %277, %"class.std::__1::__tree_node_base"** %319, align 8
  %337 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %318, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %337, %"class.std::__1::__tree_end_node"** %326, align 8
  br label %338

338:                                              ; preds = %281, %306, %325
  %339 = phi %"class.std::__1::__tree_node_base"* [ %318, %325 ], [ %277, %306 ], [ %277, %281 ]
  %340 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %339, i64 0, i32 2
  %341 = bitcast %"class.std::__1::__tree_end_node"** %340 to %"class.std::__1::__tree_node_base"**
  %342 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %341, align 8
  %343 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %342, i64 0, i32 3
  %344 = load i8, i8* %343, align 8, !range !5
  %345 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %339, i64 0, i32 3
  store i8 %344, i8* %345, align 8
  store i8 1, i8* %343, align 8
  %346 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %339, i64 0, i32 0, i32 0
  %347 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %346, align 8
  %348 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %347, i64 0, i32 3
  store i8 1, i8* %348, align 8
  %349 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %341, align 8
  %350 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %349, i64 0, i32 0, i32 0
  %351 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %350, align 8
  %352 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %351, i64 0, i32 1
  %353 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %352, align 8
  store %"class.std::__1::__tree_node_base"* %353, %"class.std::__1::__tree_node_base"** %350, align 8
  %354 = icmp eq %"class.std::__1::__tree_node_base"* %353, null
  br i1 %354, label %358, label %355

355:                                              ; preds = %338
  %356 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %349, i64 0, i32 0
  %357 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %353, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %356, %"class.std::__1::__tree_end_node"** %357, align 8
  br label %358

358:                                              ; preds = %355, %338
  %359 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %349, i64 0, i32 2
  %360 = bitcast %"class.std::__1::__tree_end_node"** %359 to i64*
  %361 = load i64, i64* %360, align 8
  %362 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %351, i64 0, i32 2
  %363 = bitcast %"class.std::__1::__tree_end_node"** %362 to i64*
  store i64 %361, i64* %363, align 8
  %364 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %359, align 8
  %365 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %364, i64 0, i32 0
  %366 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %365, align 8
  %367 = icmp eq %"class.std::__1::__tree_node_base"* %366, %349
  %368 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %364, i64 1, i32 0
  %369 = select i1 %367, %"class.std::__1::__tree_node_base"** %365, %"class.std::__1::__tree_node_base"** %368
  store %"class.std::__1::__tree_node_base"* %351, %"class.std::__1::__tree_node_base"** %369, align 8
  store %"class.std::__1::__tree_node_base"* %349, %"class.std::__1::__tree_node_base"** %352, align 8
  %370 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %351, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %370, %"class.std::__1::__tree_end_node"** %359, align 8
  br label %382

371:                                              ; preds = %293, %165
  %372 = phi %"class.std::__1::__tree_node_base"* [ %163, %165 ], [ %297, %293 ]
  %373 = phi %"class.std::__1::__tree_node_base"* [ %142, %165 ], [ %276, %293 ]
  %374 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %372, i64 0, i32 2
  %375 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %374, align 8
  %376 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %375, i64 0, i32 0
  %377 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %376, align 8
  %378 = icmp eq %"class.std::__1::__tree_node_base"* %377, %372
  %379 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %375, i64 1, i32 0
  %380 = select i1 %378, %"class.std::__1::__tree_node_base"** %379, %"class.std::__1::__tree_node_base"** %376
  %381 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %380, align 8
  br label %97

382:                                              ; preds = %95, %358, %303, %229, %169, %90
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16__treeIPN7sigslot22_signal_base_interfaceENS_4lessIS3_EENS_9allocatorIS3_EEE7destroyEPNS_11__tree_nodeIS3_PvEE(%"class.std::__1::__tree"*, %"class.std::__1::__tree_node"*) local_unnamed_addr #1 comdat align 2 {
  %3 = icmp eq %"class.std::__1::__tree_node"* %1, null
  br i1 %3, label %11, label %4

4:                                                ; preds = %2
  %5 = bitcast %"class.std::__1::__tree_node"* %1 to %"class.std::__1::__tree_node"**
  %6 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %5, align 8
  tail call void @_ZNSt3__16__treeIPN7sigslot22_signal_base_interfaceENS_4lessIS3_EENS_9allocatorIS3_EEE7destroyEPNS_11__tree_nodeIS3_PvEE(%"class.std::__1::__tree"* %0, %"class.std::__1::__tree_node"* %6) #14
  %7 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1, i64 0, i32 0, i32 1
  %8 = bitcast %"class.std::__1::__tree_node_base"** %7 to %"class.std::__1::__tree_node"**
  %9 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %8, align 8
  tail call void @_ZNSt3__16__treeIPN7sigslot22_signal_base_interfaceENS_4lessIS3_EENS_9allocatorIS3_EEE7destroyEPNS_11__tree_nodeIS3_PvEE(%"class.std::__1::__tree"* %0, %"class.std::__1::__tree_node"* %9) #14
  %10 = bitcast %"class.std::__1::__tree_node"* %1 to i8*
  tail call void @_ZdlPv(i8* %10) #13
  ret void

11:                                               ; preds = %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN7sigslot18_opaque_connection7emitterIN11jingle_xmpp8XmppTaskEJEEEvPKS0_DpT0_(%"class.sigslot::_opaque_connection"*) #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.sigslot::_opaque_connection", %"class.sigslot::_opaque_connection"* %0, i64 0, i32 2
  %3 = bitcast [16 x i8]* %2 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.sigslot::_opaque_connection", %"class.sigslot::_opaque_connection"* %0, i64 0, i32 2, i64 8
  %6 = bitcast i8* %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.sigslot::_opaque_connection", %"class.sigslot::_opaque_connection"* %0, i64 0, i32 1
  %9 = load %"class.sigslot::has_slots_interface"*, %"class.sigslot::has_slots_interface"** %8, align 8
  %10 = icmp eq %"class.sigslot::has_slots_interface"* %9, null
  %11 = getelementptr inbounds %"class.sigslot::has_slots_interface", %"class.sigslot::has_slots_interface"* %9, i64 -4, i32 3
  %12 = bitcast void (%"class.sigslot::has_slots_interface"*)** %11 to i8*
  %13 = select i1 %10, i8* null, i8* %12
  %14 = getelementptr inbounds i8, i8* %13, i64 %7
  %15 = bitcast i8* %14 to %"class.jingle_xmpp::XmppTask"*
  %16 = and i64 %4, 1
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %25, label %18

18:                                               ; preds = %1
  %19 = bitcast i8* %14 to i8**
  %20 = load i8*, i8** %19, align 8
  %21 = add i64 %4, -1
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = bitcast i8* %22 to void (%"class.jingle_xmpp::XmppTask"*)**
  %24 = load void (%"class.jingle_xmpp::XmppTask"*)*, void (%"class.jingle_xmpp::XmppTask"*)** %23, align 8
  br label %27

25:                                               ; preds = %1
  %26 = inttoptr i64 %4 to void (%"class.jingle_xmpp::XmppTask"*)*
  br label %27

27:                                               ; preds = %25, %18
  %28 = phi void (%"class.jingle_xmpp::XmppTask"*)* [ %24, %18 ], [ %26, %25 ]
  tail call void %28(%"class.jingle_xmpp::XmppTask"* %15) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__15dequeIPN11jingle_xmpp10XmlElementENS_9allocatorIS3_EEE19__add_back_capacityEv(%"class.std::__1::deque"*) local_unnamed_addr #1 comdat align 2 {
  %2 = alloca %"class.jingle_xmpp::XmlElement"**, align 8
  %3 = alloca %"class.jingle_xmpp::XmlElement"**, align 8
  %4 = alloca %"struct.std::__1::__split_buffer.43", align 8
  %5 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = icmp ugt i64 %6, 511
  br i1 %7, label %8, label %162

8:                                                ; preds = %1
  %9 = add i64 %6, -512
  store i64 %9, i64* %5, align 8
  %10 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = load %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"**** %10, align 8
  %12 = bitcast %"class.jingle_xmpp::XmlElement"*** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %11, i64 1
  store %"class.jingle_xmpp::XmlElement"*** %14, %"class.jingle_xmpp::XmlElement"**** %10, align 8
  %15 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 2
  %16 = load %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"**** %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %18 = load %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"**** %17, align 8
  %19 = icmp eq %"class.jingle_xmpp::XmlElement"*** %16, %18
  %20 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %18 to i64
  %21 = bitcast %"class.jingle_xmpp::XmlElement"*** %16 to i64*
  br i1 %19, label %22, label %158

22:                                               ; preds = %8
  %23 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"**** %23, align 8
  %25 = icmp ugt %"class.jingle_xmpp::XmlElement"*** %14, %24
  %26 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %24 to i64
  br i1 %25, label %27, label %47

27:                                               ; preds = %22
  %28 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %14 to i64
  %29 = sub i64 %28, %26
  %30 = ashr exact i64 %29, 3
  %31 = add nsw i64 %30, 1
  %32 = sdiv i64 %31, -2
  %33 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %14, i64 %32
  %34 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %16 to i64
  %35 = sub i64 %34, %28
  %36 = ashr exact i64 %35, 3
  %37 = icmp eq i64 %35, 0
  br i1 %37, label %42, label %38

38:                                               ; preds = %27
  %39 = bitcast %"class.jingle_xmpp::XmlElement"*** %33 to i8*
  %40 = bitcast %"class.jingle_xmpp::XmlElement"*** %14 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %39, i8* align 8 %40, i64 %35, i1 false) #14
  %41 = load %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"**** %10, align 8
  br label %42

42:                                               ; preds = %38, %27
  %43 = phi %"class.jingle_xmpp::XmlElement"*** [ %14, %27 ], [ %41, %38 ]
  %44 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %33, i64 %36
  store %"class.jingle_xmpp::XmlElement"*** %44, %"class.jingle_xmpp::XmlElement"**** %15, align 8
  %45 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %43, i64 %32
  store %"class.jingle_xmpp::XmlElement"*** %45, %"class.jingle_xmpp::XmlElement"**** %10, align 8
  %46 = bitcast %"class.jingle_xmpp::XmlElement"*** %44 to i64*
  br label %158

47:                                               ; preds = %22
  %48 = bitcast %"class.jingle_xmpp::XmlElement"**** %17 to i64*
  %49 = bitcast %"class.std::__1::deque"* %0 to i64*
  %50 = sub i64 %20, %26
  %51 = ashr exact i64 %50, 2
  %52 = icmp eq i64 %50, 0
  %53 = select i1 %52, i64 1, i64 %51
  %54 = icmp ugt i64 %53, 2305843009213693951
  br i1 %54, label %55, label %56

55:                                               ; preds = %47
  tail call void @abort() #15
  unreachable

56:                                               ; preds = %47
  %57 = lshr i64 %53, 2
  %58 = shl i64 %53, 3
  %59 = tail call i8* @_Znwm(i64 %58) #13
  %60 = bitcast i8* %59 to %"class.jingle_xmpp::XmlElement"***
  %61 = ptrtoint i8* %59 to i64
  %62 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %60, i64 %57
  %63 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %62 to i64
  %64 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %60, i64 %53
  %65 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %64 to i64
  %66 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %14 to i64
  %67 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %16 to i64
  %68 = sub i64 %67, %66
  %69 = ashr exact i64 %68, 3
  %70 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %62, i64 %69
  %71 = icmp eq i64 %68, 0
  br i1 %71, label %147, label %72

72:                                               ; preds = %56
  %73 = add i64 %68, -8
  %74 = lshr i64 %73, 3
  %75 = add nuw nsw i64 %74, 1
  %76 = and i64 %75, 7
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %93, label %78

78:                                               ; preds = %72, %78
  %79 = phi %"class.jingle_xmpp::XmlElement"*** [ %86, %78 ], [ %62, %72 ]
  %80 = phi i64 [ %87, %78 ], [ %63, %72 ]
  %81 = phi %"class.jingle_xmpp::XmlElement"*** [ %88, %78 ], [ %14, %72 ]
  %82 = phi i64 [ %89, %78 ], [ %76, %72 ]
  %83 = bitcast %"class.jingle_xmpp::XmlElement"*** %81 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = inttoptr i64 %80 to i64*
  store i64 %84, i64* %85, align 8
  %86 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %79, i64 1
  %87 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %86 to i64
  %88 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %81, i64 1
  %89 = add i64 %82, -1
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %78, !llvm.loop !12

91:                                               ; preds = %78
  %92 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %86 to i64
  br label %93

93:                                               ; preds = %72, %91
  %94 = phi %"class.jingle_xmpp::XmlElement"*** [ %62, %72 ], [ %86, %91 ]
  %95 = phi i64 [ %63, %72 ], [ %92, %91 ]
  %96 = phi %"class.jingle_xmpp::XmlElement"*** [ %14, %72 ], [ %88, %91 ]
  %97 = icmp ult i64 %73, 56
  br i1 %97, label %144, label %98

98:                                               ; preds = %93, %98
  %99 = phi %"class.jingle_xmpp::XmlElement"*** [ %140, %98 ], [ %94, %93 ]
  %100 = phi i64 [ %141, %98 ], [ %95, %93 ]
  %101 = phi %"class.jingle_xmpp::XmlElement"*** [ %142, %98 ], [ %96, %93 ]
  %102 = bitcast %"class.jingle_xmpp::XmlElement"*** %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = inttoptr i64 %100 to i64*
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %99, i64 1
  %106 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %101, i64 1
  %107 = bitcast %"class.jingle_xmpp::XmlElement"*** %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = bitcast %"class.jingle_xmpp::XmlElement"*** %105 to i64*
  store i64 %108, i64* %109, align 8
  %110 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %99, i64 2
  %111 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %101, i64 2
  %112 = bitcast %"class.jingle_xmpp::XmlElement"*** %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast %"class.jingle_xmpp::XmlElement"*** %110 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %99, i64 3
  %116 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %101, i64 3
  %117 = bitcast %"class.jingle_xmpp::XmlElement"*** %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast %"class.jingle_xmpp::XmlElement"*** %115 to i64*
  store i64 %118, i64* %119, align 8
  %120 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %99, i64 4
  %121 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %101, i64 4
  %122 = bitcast %"class.jingle_xmpp::XmlElement"*** %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = bitcast %"class.jingle_xmpp::XmlElement"*** %120 to i64*
  store i64 %123, i64* %124, align 8
  %125 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %99, i64 5
  %126 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %101, i64 5
  %127 = bitcast %"class.jingle_xmpp::XmlElement"*** %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = bitcast %"class.jingle_xmpp::XmlElement"*** %125 to i64*
  store i64 %128, i64* %129, align 8
  %130 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %99, i64 6
  %131 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %101, i64 6
  %132 = bitcast %"class.jingle_xmpp::XmlElement"*** %131 to i64*
  %133 = load i64, i64* %132, align 8
  %134 = bitcast %"class.jingle_xmpp::XmlElement"*** %130 to i64*
  store i64 %133, i64* %134, align 8
  %135 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %99, i64 7
  %136 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %101, i64 7
  %137 = bitcast %"class.jingle_xmpp::XmlElement"*** %136 to i64*
  %138 = load i64, i64* %137, align 8
  %139 = bitcast %"class.jingle_xmpp::XmlElement"*** %135 to i64*
  store i64 %138, i64* %139, align 8
  %140 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %99, i64 8
  %141 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %140 to i64
  %142 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %101, i64 8
  %143 = icmp eq %"class.jingle_xmpp::XmlElement"*** %70, %140
  br i1 %143, label %144, label %98

144:                                              ; preds = %98, %93
  %145 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %70 to i64
  %146 = load %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"**** %23, align 8
  br label %147

147:                                              ; preds = %144, %56
  %148 = phi %"class.jingle_xmpp::XmlElement"*** [ %146, %144 ], [ %24, %56 ]
  %149 = phi i64 [ %145, %144 ], [ %63, %56 ]
  store i64 %61, i64* %49, align 8
  %150 = bitcast %"class.jingle_xmpp::XmlElement"**** %10 to i64*
  store i64 %63, i64* %150, align 8
  %151 = bitcast %"class.jingle_xmpp::XmlElement"**** %15 to i64*
  store i64 %149, i64* %151, align 8
  store i64 %65, i64* %48, align 8
  %152 = icmp eq %"class.jingle_xmpp::XmlElement"*** %148, null
  %153 = inttoptr i64 %149 to i64*
  br i1 %152, label %158, label %154

154:                                              ; preds = %147
  %155 = bitcast %"class.jingle_xmpp::XmlElement"*** %148 to i8*
  tail call void @_ZdlPv(i8* %155) #13
  %156 = bitcast %"class.jingle_xmpp::XmlElement"**** %15 to i64**
  %157 = load i64*, i64** %156, align 8
  br label %158

158:                                              ; preds = %8, %42, %147, %154
  %159 = phi i64* [ %157, %154 ], [ %153, %147 ], [ %46, %42 ], [ %21, %8 ]
  store i64 %13, i64* %159, align 8
  %160 = load %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"**** %15, align 8
  %161 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %160, i64 1
  store %"class.jingle_xmpp::XmlElement"*** %161, %"class.jingle_xmpp::XmlElement"**** %15, align 8
  br label %460

162:                                              ; preds = %1
  %163 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0
  %164 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 2
  %165 = bitcast %"class.jingle_xmpp::XmlElement"**** %164 to i64*
  %166 = load i64, i64* %165, align 8
  %167 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %168 = bitcast %"class.jingle_xmpp::XmlElement"**** %167 to i64*
  %169 = load i64, i64* %168, align 8
  %170 = sub i64 %166, %169
  %171 = ashr exact i64 %170, 3
  %172 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %173 = bitcast %"class.jingle_xmpp::XmlElement"**** %172 to i64*
  %174 = load i64, i64* %173, align 8
  %175 = bitcast %"class.std::__1::deque"* %0 to i64*
  %176 = load i64, i64* %175, align 8
  %177 = sub i64 %174, %176
  %178 = ashr exact i64 %177, 3
  %179 = icmp ult i64 %171, %178
  %180 = inttoptr i64 %166 to %"class.jingle_xmpp::XmlElement"***
  %181 = inttoptr i64 %169 to %"class.jingle_xmpp::XmlElement"***
  br i1 %179, label %182, label %337

182:                                              ; preds = %162
  %183 = icmp eq i64 %174, %166
  br i1 %183, label %188, label %184

184:                                              ; preds = %182
  %185 = bitcast %"class.jingle_xmpp::XmlElement"*** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %185) #14
  %186 = tail call i8* @_Znwm(i64 4096) #13
  %187 = bitcast %"class.jingle_xmpp::XmlElement"*** %2 to i8**
  store i8* %186, i8** %187, align 8
  call void @_ZNSt3__114__split_bufferIPPN11jingle_xmpp10XmlElementENS_9allocatorIS4_EEE9push_backEOS4_(%"struct.std::__1::__split_buffer"* %163, %"class.jingle_xmpp::XmlElement"*** nonnull dereferenceable(8) %2)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %185) #14
  br label %460

188:                                              ; preds = %182
  %189 = bitcast %"class.jingle_xmpp::XmlElement"*** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %189) #14
  %190 = tail call i8* @_Znwm(i64 4096) #13
  %191 = bitcast %"class.jingle_xmpp::XmlElement"*** %3 to i8**
  store i8* %190, i8** %191, align 8
  call void @_ZNSt3__114__split_bufferIPPN11jingle_xmpp10XmlElementENS_9allocatorIS4_EEE10push_frontEOS4_(%"struct.std::__1::__split_buffer"* %163, %"class.jingle_xmpp::XmlElement"*** nonnull dereferenceable(8) %3)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %189) #14
  %192 = load %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"**** %167, align 8
  %193 = bitcast %"class.jingle_xmpp::XmlElement"*** %192 to i64*
  %194 = load i64, i64* %193, align 8
  %195 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %192, i64 1
  store %"class.jingle_xmpp::XmlElement"*** %195, %"class.jingle_xmpp::XmlElement"**** %167, align 8
  %196 = load %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"**** %164, align 8
  %197 = load %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"**** %172, align 8
  %198 = icmp eq %"class.jingle_xmpp::XmlElement"*** %196, %197
  %199 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %197 to i64
  %200 = bitcast %"class.jingle_xmpp::XmlElement"*** %196 to i64*
  br i1 %198, label %201, label %333

201:                                              ; preds = %188
  %202 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 0
  %203 = load %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"**** %202, align 8
  %204 = icmp ugt %"class.jingle_xmpp::XmlElement"*** %195, %203
  %205 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %203 to i64
  br i1 %204, label %206, label %226

206:                                              ; preds = %201
  %207 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %195 to i64
  %208 = sub i64 %207, %205
  %209 = ashr exact i64 %208, 3
  %210 = add nsw i64 %209, 1
  %211 = sdiv i64 %210, -2
  %212 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %195, i64 %211
  %213 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %196 to i64
  %214 = sub i64 %213, %207
  %215 = ashr exact i64 %214, 3
  %216 = icmp eq i64 %214, 0
  br i1 %216, label %221, label %217

217:                                              ; preds = %206
  %218 = bitcast %"class.jingle_xmpp::XmlElement"*** %212 to i8*
  %219 = bitcast %"class.jingle_xmpp::XmlElement"*** %195 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %218, i8* align 8 %219, i64 %214, i1 false) #14
  %220 = load %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"**** %167, align 8
  br label %221

221:                                              ; preds = %217, %206
  %222 = phi %"class.jingle_xmpp::XmlElement"*** [ %195, %206 ], [ %220, %217 ]
  %223 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %212, i64 %215
  store %"class.jingle_xmpp::XmlElement"*** %223, %"class.jingle_xmpp::XmlElement"**** %164, align 8
  %224 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %222, i64 %211
  store %"class.jingle_xmpp::XmlElement"*** %224, %"class.jingle_xmpp::XmlElement"**** %167, align 8
  %225 = bitcast %"class.jingle_xmpp::XmlElement"*** %223 to i64*
  br label %333

226:                                              ; preds = %201
  %227 = sub i64 %199, %205
  %228 = ashr exact i64 %227, 2
  %229 = icmp eq i64 %227, 0
  %230 = select i1 %229, i64 1, i64 %228
  %231 = icmp ugt i64 %230, 2305843009213693951
  br i1 %231, label %232, label %233

232:                                              ; preds = %226
  call void @abort() #15
  unreachable

233:                                              ; preds = %226
  %234 = lshr i64 %230, 2
  %235 = shl i64 %230, 3
  %236 = call i8* @_Znwm(i64 %235) #13
  %237 = bitcast i8* %236 to %"class.jingle_xmpp::XmlElement"***
  %238 = ptrtoint i8* %236 to i64
  %239 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %237, i64 %234
  %240 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %239 to i64
  %241 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %237, i64 %230
  %242 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %241 to i64
  %243 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %195 to i64
  %244 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %196 to i64
  %245 = sub i64 %244, %243
  %246 = ashr exact i64 %245, 3
  %247 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %239, i64 %246
  %248 = icmp eq i64 %245, 0
  br i1 %248, label %324, label %249

249:                                              ; preds = %233
  %250 = add i64 %245, -8
  %251 = lshr i64 %250, 3
  %252 = add nuw nsw i64 %251, 1
  %253 = and i64 %252, 7
  %254 = icmp eq i64 %253, 0
  br i1 %254, label %270, label %255

255:                                              ; preds = %249, %255
  %256 = phi %"class.jingle_xmpp::XmlElement"*** [ %263, %255 ], [ %239, %249 ]
  %257 = phi i64 [ %264, %255 ], [ %240, %249 ]
  %258 = phi %"class.jingle_xmpp::XmlElement"*** [ %265, %255 ], [ %195, %249 ]
  %259 = phi i64 [ %266, %255 ], [ %253, %249 ]
  %260 = bitcast %"class.jingle_xmpp::XmlElement"*** %258 to i64*
  %261 = load i64, i64* %260, align 8
  %262 = inttoptr i64 %257 to i64*
  store i64 %261, i64* %262, align 8
  %263 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %256, i64 1
  %264 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %263 to i64
  %265 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %258, i64 1
  %266 = add i64 %259, -1
  %267 = icmp eq i64 %266, 0
  br i1 %267, label %268, label %255, !llvm.loop !14

268:                                              ; preds = %255
  %269 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %263 to i64
  br label %270

270:                                              ; preds = %249, %268
  %271 = phi %"class.jingle_xmpp::XmlElement"*** [ %239, %249 ], [ %263, %268 ]
  %272 = phi i64 [ %240, %249 ], [ %269, %268 ]
  %273 = phi %"class.jingle_xmpp::XmlElement"*** [ %195, %249 ], [ %265, %268 ]
  %274 = icmp ult i64 %250, 56
  br i1 %274, label %321, label %275

275:                                              ; preds = %270, %275
  %276 = phi %"class.jingle_xmpp::XmlElement"*** [ %317, %275 ], [ %271, %270 ]
  %277 = phi i64 [ %318, %275 ], [ %272, %270 ]
  %278 = phi %"class.jingle_xmpp::XmlElement"*** [ %319, %275 ], [ %273, %270 ]
  %279 = bitcast %"class.jingle_xmpp::XmlElement"*** %278 to i64*
  %280 = load i64, i64* %279, align 8
  %281 = inttoptr i64 %277 to i64*
  store i64 %280, i64* %281, align 8
  %282 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %276, i64 1
  %283 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %278, i64 1
  %284 = bitcast %"class.jingle_xmpp::XmlElement"*** %283 to i64*
  %285 = load i64, i64* %284, align 8
  %286 = bitcast %"class.jingle_xmpp::XmlElement"*** %282 to i64*
  store i64 %285, i64* %286, align 8
  %287 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %276, i64 2
  %288 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %278, i64 2
  %289 = bitcast %"class.jingle_xmpp::XmlElement"*** %288 to i64*
  %290 = load i64, i64* %289, align 8
  %291 = bitcast %"class.jingle_xmpp::XmlElement"*** %287 to i64*
  store i64 %290, i64* %291, align 8
  %292 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %276, i64 3
  %293 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %278, i64 3
  %294 = bitcast %"class.jingle_xmpp::XmlElement"*** %293 to i64*
  %295 = load i64, i64* %294, align 8
  %296 = bitcast %"class.jingle_xmpp::XmlElement"*** %292 to i64*
  store i64 %295, i64* %296, align 8
  %297 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %276, i64 4
  %298 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %278, i64 4
  %299 = bitcast %"class.jingle_xmpp::XmlElement"*** %298 to i64*
  %300 = load i64, i64* %299, align 8
  %301 = bitcast %"class.jingle_xmpp::XmlElement"*** %297 to i64*
  store i64 %300, i64* %301, align 8
  %302 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %276, i64 5
  %303 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %278, i64 5
  %304 = bitcast %"class.jingle_xmpp::XmlElement"*** %303 to i64*
  %305 = load i64, i64* %304, align 8
  %306 = bitcast %"class.jingle_xmpp::XmlElement"*** %302 to i64*
  store i64 %305, i64* %306, align 8
  %307 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %276, i64 6
  %308 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %278, i64 6
  %309 = bitcast %"class.jingle_xmpp::XmlElement"*** %308 to i64*
  %310 = load i64, i64* %309, align 8
  %311 = bitcast %"class.jingle_xmpp::XmlElement"*** %307 to i64*
  store i64 %310, i64* %311, align 8
  %312 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %276, i64 7
  %313 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %278, i64 7
  %314 = bitcast %"class.jingle_xmpp::XmlElement"*** %313 to i64*
  %315 = load i64, i64* %314, align 8
  %316 = bitcast %"class.jingle_xmpp::XmlElement"*** %312 to i64*
  store i64 %315, i64* %316, align 8
  %317 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %276, i64 8
  %318 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %317 to i64
  %319 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %278, i64 8
  %320 = icmp eq %"class.jingle_xmpp::XmlElement"*** %247, %317
  br i1 %320, label %321, label %275

321:                                              ; preds = %275, %270
  %322 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %247 to i64
  %323 = load %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"**** %202, align 8
  br label %324

324:                                              ; preds = %321, %233
  %325 = phi %"class.jingle_xmpp::XmlElement"*** [ %323, %321 ], [ %203, %233 ]
  %326 = phi i64 [ %322, %321 ], [ %240, %233 ]
  store i64 %238, i64* %175, align 8
  store i64 %240, i64* %168, align 8
  store i64 %326, i64* %165, align 8
  store i64 %242, i64* %173, align 8
  %327 = icmp eq %"class.jingle_xmpp::XmlElement"*** %325, null
  %328 = inttoptr i64 %326 to i64*
  br i1 %327, label %333, label %329

329:                                              ; preds = %324
  %330 = bitcast %"class.jingle_xmpp::XmlElement"*** %325 to i8*
  call void @_ZdlPv(i8* %330) #13
  %331 = bitcast %"class.jingle_xmpp::XmlElement"**** %164 to i64**
  %332 = load i64*, i64** %331, align 8
  br label %333

333:                                              ; preds = %188, %221, %324, %329
  %334 = phi i64* [ %332, %329 ], [ %328, %324 ], [ %225, %221 ], [ %200, %188 ]
  store i64 %194, i64* %334, align 8
  %335 = load %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"**** %164, align 8
  %336 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %335, i64 1
  store %"class.jingle_xmpp::XmlElement"*** %336, %"class.jingle_xmpp::XmlElement"**** %164, align 8
  br label %460

337:                                              ; preds = %162
  %338 = bitcast %"struct.std::__1::__split_buffer.43"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %338) #14
  %339 = getelementptr inbounds %"struct.std::__1::__split_buffer.43", %"struct.std::__1::__split_buffer.43"* %4, i64 0, i32 1
  %340 = getelementptr inbounds %"struct.std::__1::__split_buffer.43", %"struct.std::__1::__split_buffer.43"* %4, i64 0, i32 2
  %341 = getelementptr inbounds %"struct.std::__1::__split_buffer.43", %"struct.std::__1::__split_buffer.43"* %4, i64 0, i32 3, i32 0, i32 0
  %342 = getelementptr inbounds %"struct.std::__1::__split_buffer.43", %"struct.std::__1::__split_buffer.43"* %4, i64 0, i32 3, i32 1, i32 0
  %343 = ashr exact i64 %177, 2
  %344 = icmp eq i64 %177, 0
  %345 = select i1 %344, i64 1, i64 %343
  %346 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3
  %347 = bitcast %"struct.std::__1::__split_buffer.43"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %347, i8 -86, i64 24, i1 false)
  store %"class.jingle_xmpp::XmlElement"*** null, %"class.jingle_xmpp::XmlElement"**** %341, align 8
  %348 = bitcast %"class.std::__1::allocator.20"** %342 to %"class.std::__1::__compressed_pair.17"**
  store %"class.std::__1::__compressed_pair.17"* %346, %"class.std::__1::__compressed_pair.17"** %348, align 8
  %349 = icmp ugt i64 %345, 2305843009213693951
  br i1 %349, label %350, label %351

350:                                              ; preds = %337
  tail call void @abort() #15
  unreachable

351:                                              ; preds = %337
  %352 = shl i64 %345, 3
  %353 = tail call i8* @_Znwm(i64 %352) #13
  %354 = bitcast i8* %353 to %"class.jingle_xmpp::XmlElement"***
  %355 = bitcast %"struct.std::__1::__split_buffer.43"* %4 to i8**
  store i8* %353, i8** %355, align 8
  %356 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %354, i64 %171
  store %"class.jingle_xmpp::XmlElement"*** %356, %"class.jingle_xmpp::XmlElement"**** %340, align 8
  store %"class.jingle_xmpp::XmlElement"*** %356, %"class.jingle_xmpp::XmlElement"**** %339, align 8
  %357 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %354, i64 %345
  store %"class.jingle_xmpp::XmlElement"*** %357, %"class.jingle_xmpp::XmlElement"**** %341, align 8
  %358 = tail call i8* @_Znwm(i64 4096) #13
  %359 = ptrtoint i8* %358 to i64
  %360 = icmp eq i64 %171, %345
  %361 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %357 to i64
  %362 = ptrtoint i8* %353 to i64
  %363 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %356 to i64
  br i1 %360, label %364, label %398

364:                                              ; preds = %351
  %365 = icmp ugt %"class.jingle_xmpp::XmlElement"*** %356, %354
  br i1 %365, label %366, label %373

366:                                              ; preds = %364
  %367 = sub i64 %363, %362
  %368 = ashr exact i64 %367, 3
  %369 = add nsw i64 %368, 1
  %370 = sdiv i64 %369, -2
  %371 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %356, i64 %370
  store %"class.jingle_xmpp::XmlElement"*** %371, %"class.jingle_xmpp::XmlElement"**** %340, align 8
  store %"class.jingle_xmpp::XmlElement"*** %371, %"class.jingle_xmpp::XmlElement"**** %339, align 8
  %372 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %371 to i64
  br label %398

373:                                              ; preds = %364
  %374 = sub i64 %361, %362
  %375 = ashr exact i64 %374, 2
  %376 = icmp eq i64 %374, 0
  %377 = select i1 %376, i64 1, i64 %375
  %378 = icmp ugt i64 %377, 2305843009213693951
  br i1 %378, label %379, label %380

379:                                              ; preds = %373
  tail call void @abort() #15
  unreachable

380:                                              ; preds = %373
  %381 = bitcast %"struct.std::__1::__split_buffer.43"* %4 to i64*
  %382 = bitcast %"class.jingle_xmpp::XmlElement"**** %341 to i64*
  %383 = lshr i64 %377, 2
  %384 = shl i64 %377, 3
  %385 = tail call i8* @_Znwm(i64 %384) #13
  %386 = bitcast i8* %385 to %"class.jingle_xmpp::XmlElement"***
  %387 = ptrtoint i8* %385 to i64
  %388 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %386, i64 %383
  %389 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %388 to i64
  %390 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %386, i64 %377
  %391 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %390 to i64
  store i64 %387, i64* %381, align 8
  %392 = bitcast %"class.jingle_xmpp::XmlElement"**** %339 to i64*
  store i64 %389, i64* %392, align 8
  %393 = bitcast %"class.jingle_xmpp::XmlElement"**** %340 to i64*
  store i64 %389, i64* %393, align 8
  store i64 %391, i64* %382, align 8
  tail call void @_ZdlPv(i8* nonnull %353) #13
  %394 = load %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"**** %164, align 8
  %395 = load %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"**** %167, align 8
  %396 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %395 to i64
  %397 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %394 to i64
  br label %398

398:                                              ; preds = %351, %366, %380
  %399 = phi i64 [ %391, %380 ], [ %361, %366 ], [ %361, %351 ]
  %400 = phi i64 [ %397, %380 ], [ %166, %366 ], [ %166, %351 ]
  %401 = phi i64 [ %389, %380 ], [ %372, %366 ], [ %363, %351 ]
  %402 = phi i64 [ %396, %380 ], [ %169, %366 ], [ %169, %351 ]
  %403 = phi i64 [ %387, %380 ], [ %362, %366 ], [ %362, %351 ]
  %404 = phi %"class.jingle_xmpp::XmlElement"*** [ %395, %380 ], [ %181, %366 ], [ %181, %351 ]
  %405 = phi %"class.jingle_xmpp::XmlElement"*** [ %394, %380 ], [ %180, %366 ], [ %180, %351 ]
  %406 = phi %"class.jingle_xmpp::XmlElement"*** [ %388, %380 ], [ %371, %366 ], [ %356, %351 ]
  %407 = bitcast %"class.jingle_xmpp::XmlElement"*** %406 to i64*
  store i64 %359, i64* %407, align 8
  %408 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %406, i64 1
  store %"class.jingle_xmpp::XmlElement"*** %408, %"class.jingle_xmpp::XmlElement"**** %340, align 8
  %409 = icmp eq %"class.jingle_xmpp::XmlElement"*** %405, %404
  br i1 %409, label %410, label %455

410:                                              ; preds = %398
  %411 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %408 to i64
  %412 = bitcast %"struct.std::__1::__split_buffer.43"* %4 to i64*
  %413 = bitcast %"class.jingle_xmpp::XmlElement"**** %339 to i64*
  %414 = bitcast %"class.jingle_xmpp::XmlElement"**** %340 to i64*
  %415 = bitcast %"class.jingle_xmpp::XmlElement"**** %341 to i64*
  br label %427

416:                                              ; preds = %455
  %417 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %458 to i64
  %418 = bitcast %"struct.std::__1::__split_buffer.43"* %4 to i64*
  %419 = load i64, i64* %418, align 8
  %420 = bitcast %"class.jingle_xmpp::XmlElement"**** %339 to i64*
  %421 = load i64, i64* %420, align 8
  %422 = load i64, i64* %165, align 8
  %423 = bitcast %"class.jingle_xmpp::XmlElement"**** %340 to i64*
  %424 = load i64, i64* %423, align 8
  %425 = bitcast %"class.jingle_xmpp::XmlElement"**** %341 to i64*
  %426 = load i64, i64* %425, align 8
  br label %427

427:                                              ; preds = %410, %416
  %428 = phi i64* [ %415, %410 ], [ %425, %416 ]
  %429 = phi i64* [ %414, %410 ], [ %423, %416 ]
  %430 = phi i64* [ %413, %410 ], [ %420, %416 ]
  %431 = phi i64* [ %412, %410 ], [ %418, %416 ]
  %432 = phi i64 [ %399, %410 ], [ %426, %416 ]
  %433 = phi i64 [ %411, %410 ], [ %424, %416 ]
  %434 = phi i64 [ %400, %410 ], [ %422, %416 ]
  %435 = phi i64 [ %401, %410 ], [ %421, %416 ]
  %436 = phi i64 [ %402, %410 ], [ %417, %416 ]
  %437 = phi i64 [ %403, %410 ], [ %419, %416 ]
  %438 = load i64, i64* %175, align 8
  store i64 %437, i64* %175, align 8
  store i64 %438, i64* %431, align 8
  store i64 %435, i64* %168, align 8
  store i64 %436, i64* %430, align 8
  store i64 %433, i64* %165, align 8
  store i64 %434, i64* %429, align 8
  %439 = load i64, i64* %173, align 8
  store i64 %432, i64* %173, align 8
  store i64 %439, i64* %428, align 8
  %440 = inttoptr i64 %436 to %"class.jingle_xmpp::XmlElement"***
  %441 = inttoptr i64 %434 to %"class.jingle_xmpp::XmlElement"***
  %442 = icmp eq %"class.jingle_xmpp::XmlElement"*** %441, %440
  br i1 %442, label %450, label %443

443:                                              ; preds = %427
  %444 = getelementptr %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %441, i64 -1
  %445 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %444 to i64
  %446 = sub i64 %445, %436
  %447 = lshr i64 %446, 3
  %448 = xor i64 %447, -1
  %449 = getelementptr %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %441, i64 %448
  store %"class.jingle_xmpp::XmlElement"*** %449, %"class.jingle_xmpp::XmlElement"**** %340, align 8
  br label %450

450:                                              ; preds = %443, %427
  %451 = icmp eq i64 %438, 0
  br i1 %451, label %454, label %452

452:                                              ; preds = %450
  %453 = inttoptr i64 %438 to i8*
  call void @_ZdlPv(i8* %453) #13
  br label %454

454:                                              ; preds = %450, %452
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %338) #14
  br label %460

455:                                              ; preds = %398, %455
  %456 = phi %"class.jingle_xmpp::XmlElement"*** [ %457, %455 ], [ %405, %398 ]
  %457 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %456, i64 -1
  call void @_ZNSt3__114__split_bufferIPPN11jingle_xmpp10XmlElementERNS_9allocatorIS4_EEE10push_frontERKS4_(%"struct.std::__1::__split_buffer.43"* nonnull %4, %"class.jingle_xmpp::XmlElement"*** dereferenceable(8) %457)
  %458 = load %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"**** %167, align 8
  %459 = icmp eq %"class.jingle_xmpp::XmlElement"*** %457, %458
  br i1 %459, label %416, label %455

460:                                              ; preds = %454, %333, %184, %158
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPPN11jingle_xmpp10XmlElementENS_9allocatorIS4_EEE9push_backEOS4_(%"struct.std::__1::__split_buffer"*, %"class.jingle_xmpp::XmlElement"*** dereferenceable(8)) local_unnamed_addr #1 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %4 = load %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"**** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %6 = load %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"**** %5, align 8
  %7 = icmp eq %"class.jingle_xmpp::XmlElement"*** %4, %6
  %8 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %6 to i64
  %9 = bitcast %"class.jingle_xmpp::XmlElement"*** %4 to i64*
  br i1 %7, label %10, label %148

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %12 = load %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"**** %11, align 8
  %13 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %14 = load %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"**** %13, align 8
  %15 = icmp ugt %"class.jingle_xmpp::XmlElement"*** %12, %14
  %16 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %14 to i64
  br i1 %15, label %17, label %37

17:                                               ; preds = %10
  %18 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %12 to i64
  %19 = sub i64 %18, %16
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, -2
  %23 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %12, i64 %22
  %24 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %4 to i64
  %25 = sub i64 %24, %18
  %26 = ashr exact i64 %25, 3
  %27 = icmp eq i64 %25, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %17
  %29 = bitcast %"class.jingle_xmpp::XmlElement"*** %23 to i8*
  %30 = bitcast %"class.jingle_xmpp::XmlElement"*** %12 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 %25, i1 false) #14
  %31 = load %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"**** %11, align 8
  br label %32

32:                                               ; preds = %17, %28
  %33 = phi %"class.jingle_xmpp::XmlElement"*** [ %12, %17 ], [ %31, %28 ]
  %34 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %23, i64 %26
  store %"class.jingle_xmpp::XmlElement"*** %34, %"class.jingle_xmpp::XmlElement"**** %3, align 8
  %35 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %33, i64 %22
  store %"class.jingle_xmpp::XmlElement"*** %35, %"class.jingle_xmpp::XmlElement"**** %11, align 8
  %36 = bitcast %"class.jingle_xmpp::XmlElement"*** %34 to i64*
  br label %148

37:                                               ; preds = %10
  %38 = bitcast %"class.jingle_xmpp::XmlElement"**** %5 to i64*
  %39 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %40 = sub i64 %8, %16
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %37
  tail call void @abort() #15
  unreachable

46:                                               ; preds = %37
  %47 = lshr i64 %43, 2
  %48 = shl i64 %43, 3
  %49 = tail call i8* @_Znwm(i64 %48) #13
  %50 = bitcast i8* %49 to %"class.jingle_xmpp::XmlElement"***
  %51 = ptrtoint i8* %49 to i64
  %52 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %50, i64 %47
  %53 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %52 to i64
  %54 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %50, i64 %43
  %55 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %54 to i64
  %56 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %12 to i64
  %57 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %4 to i64
  %58 = sub i64 %57, %56
  %59 = ashr exact i64 %58, 3
  %60 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %52, i64 %59
  %61 = icmp eq i64 %58, 0
  br i1 %61, label %137, label %62

62:                                               ; preds = %46
  %63 = add i64 %58, -8
  %64 = lshr i64 %63, 3
  %65 = add nuw nsw i64 %64, 1
  %66 = and i64 %65, 7
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %83, label %68

68:                                               ; preds = %62, %68
  %69 = phi %"class.jingle_xmpp::XmlElement"*** [ %76, %68 ], [ %52, %62 ]
  %70 = phi i64 [ %77, %68 ], [ %53, %62 ]
  %71 = phi %"class.jingle_xmpp::XmlElement"*** [ %78, %68 ], [ %12, %62 ]
  %72 = phi i64 [ %79, %68 ], [ %66, %62 ]
  %73 = bitcast %"class.jingle_xmpp::XmlElement"*** %71 to i64*
  %74 = load i64, i64* %73, align 8
  %75 = inttoptr i64 %70 to i64*
  store i64 %74, i64* %75, align 8
  %76 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %69, i64 1
  %77 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %76 to i64
  %78 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %71, i64 1
  %79 = add i64 %72, -1
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %81, label %68, !llvm.loop !15

81:                                               ; preds = %68
  %82 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %76 to i64
  br label %83

83:                                               ; preds = %62, %81
  %84 = phi %"class.jingle_xmpp::XmlElement"*** [ %52, %62 ], [ %76, %81 ]
  %85 = phi i64 [ %53, %62 ], [ %82, %81 ]
  %86 = phi %"class.jingle_xmpp::XmlElement"*** [ %12, %62 ], [ %78, %81 ]
  %87 = icmp ult i64 %63, 56
  br i1 %87, label %134, label %88

88:                                               ; preds = %83, %88
  %89 = phi %"class.jingle_xmpp::XmlElement"*** [ %130, %88 ], [ %84, %83 ]
  %90 = phi i64 [ %131, %88 ], [ %85, %83 ]
  %91 = phi %"class.jingle_xmpp::XmlElement"*** [ %132, %88 ], [ %86, %83 ]
  %92 = bitcast %"class.jingle_xmpp::XmlElement"*** %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = inttoptr i64 %90 to i64*
  store i64 %93, i64* %94, align 8
  %95 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %89, i64 1
  %96 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %91, i64 1
  %97 = bitcast %"class.jingle_xmpp::XmlElement"*** %96 to i64*
  %98 = load i64, i64* %97, align 8
  %99 = bitcast %"class.jingle_xmpp::XmlElement"*** %95 to i64*
  store i64 %98, i64* %99, align 8
  %100 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %89, i64 2
  %101 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %91, i64 2
  %102 = bitcast %"class.jingle_xmpp::XmlElement"*** %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = bitcast %"class.jingle_xmpp::XmlElement"*** %100 to i64*
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %89, i64 3
  %106 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %91, i64 3
  %107 = bitcast %"class.jingle_xmpp::XmlElement"*** %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = bitcast %"class.jingle_xmpp::XmlElement"*** %105 to i64*
  store i64 %108, i64* %109, align 8
  %110 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %89, i64 4
  %111 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %91, i64 4
  %112 = bitcast %"class.jingle_xmpp::XmlElement"*** %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast %"class.jingle_xmpp::XmlElement"*** %110 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %89, i64 5
  %116 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %91, i64 5
  %117 = bitcast %"class.jingle_xmpp::XmlElement"*** %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast %"class.jingle_xmpp::XmlElement"*** %115 to i64*
  store i64 %118, i64* %119, align 8
  %120 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %89, i64 6
  %121 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %91, i64 6
  %122 = bitcast %"class.jingle_xmpp::XmlElement"*** %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = bitcast %"class.jingle_xmpp::XmlElement"*** %120 to i64*
  store i64 %123, i64* %124, align 8
  %125 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %89, i64 7
  %126 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %91, i64 7
  %127 = bitcast %"class.jingle_xmpp::XmlElement"*** %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = bitcast %"class.jingle_xmpp::XmlElement"*** %125 to i64*
  store i64 %128, i64* %129, align 8
  %130 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %89, i64 8
  %131 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %130 to i64
  %132 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %91, i64 8
  %133 = icmp eq %"class.jingle_xmpp::XmlElement"*** %60, %130
  br i1 %133, label %134, label %88

134:                                              ; preds = %88, %83
  %135 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %60 to i64
  %136 = load %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"**** %13, align 8
  br label %137

137:                                              ; preds = %46, %134
  %138 = phi %"class.jingle_xmpp::XmlElement"*** [ %136, %134 ], [ %14, %46 ]
  %139 = phi i64 [ %135, %134 ], [ %53, %46 ]
  store i64 %51, i64* %39, align 8
  %140 = bitcast %"class.jingle_xmpp::XmlElement"**** %11 to i64*
  store i64 %53, i64* %140, align 8
  %141 = bitcast %"class.jingle_xmpp::XmlElement"**** %3 to i64*
  store i64 %139, i64* %141, align 8
  store i64 %55, i64* %38, align 8
  %142 = icmp eq %"class.jingle_xmpp::XmlElement"*** %138, null
  %143 = inttoptr i64 %139 to i64*
  br i1 %142, label %148, label %144

144:                                              ; preds = %137
  %145 = bitcast %"class.jingle_xmpp::XmlElement"*** %138 to i8*
  tail call void @_ZdlPv(i8* %145) #13
  %146 = bitcast %"class.jingle_xmpp::XmlElement"**** %3 to i64**
  %147 = load i64*, i64** %146, align 8
  br label %148

148:                                              ; preds = %144, %137, %32, %2
  %149 = phi i64* [ %147, %144 ], [ %143, %137 ], [ %36, %32 ], [ %9, %2 ]
  %150 = bitcast %"class.jingle_xmpp::XmlElement"*** %1 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %149, align 8
  %152 = load %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"**** %3, align 8
  %153 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %152, i64 1
  store %"class.jingle_xmpp::XmlElement"*** %153, %"class.jingle_xmpp::XmlElement"**** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPPN11jingle_xmpp10XmlElementENS_9allocatorIS4_EEE10push_frontEOS4_(%"struct.std::__1::__split_buffer"*, %"class.jingle_xmpp::XmlElement"*** dereferenceable(8)) local_unnamed_addr #1 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %4 = load %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"**** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %6 = load %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"**** %5, align 8
  %7 = icmp eq %"class.jingle_xmpp::XmlElement"*** %4, %6
  %8 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %6 to i64
  br i1 %7, label %9, label %147

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %11 = load %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"**** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"**** %12, align 8
  %14 = icmp ult %"class.jingle_xmpp::XmlElement"*** %11, %13
  %15 = bitcast %"class.jingle_xmpp::XmlElement"**** %12 to i64*
  %16 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %13 to i64
  br i1 %14, label %17, label %38

17:                                               ; preds = %9
  %18 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %11 to i64
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, 2
  %23 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %11, i64 %22
  %24 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %4 to i64
  %25 = sub i64 %18, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %17
  %28 = ashr exact i64 %25, 3
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %23, i64 %29
  %31 = bitcast %"class.jingle_xmpp::XmlElement"*** %30 to i8*
  %32 = bitcast %"class.jingle_xmpp::XmlElement"*** %4 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %25, i1 false) #14
  %33 = load %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"**** %10, align 8
  br label %34

34:                                               ; preds = %17, %27
  %35 = phi %"class.jingle_xmpp::XmlElement"*** [ %33, %27 ], [ %11, %17 ]
  %36 = phi %"class.jingle_xmpp::XmlElement"*** [ %30, %27 ], [ %23, %17 ]
  store %"class.jingle_xmpp::XmlElement"*** %36, %"class.jingle_xmpp::XmlElement"**** %3, align 8
  %37 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %35, i64 %22
  store %"class.jingle_xmpp::XmlElement"*** %37, %"class.jingle_xmpp::XmlElement"**** %10, align 8
  br label %147

38:                                               ; preds = %9
  %39 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %40 = sub i64 %16, %8
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %38
  tail call void @abort() #15
  unreachable

46:                                               ; preds = %38
  %47 = add nuw nsw i64 %43, 3
  %48 = lshr i64 %47, 2
  %49 = shl i64 %43, 3
  %50 = tail call i8* @_Znwm(i64 %49) #13
  %51 = bitcast i8* %50 to %"class.jingle_xmpp::XmlElement"***
  %52 = ptrtoint i8* %50 to i64
  %53 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %51, i64 %48
  %54 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %53 to i64
  %55 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %51, i64 %43
  %56 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %55 to i64
  %57 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %4 to i64
  %58 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %11 to i64
  %59 = sub i64 %58, %57
  %60 = ashr exact i64 %59, 3
  %61 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %53, i64 %60
  %62 = icmp eq i64 %59, 0
  br i1 %62, label %138, label %63

63:                                               ; preds = %46
  %64 = add i64 %59, -8
  %65 = lshr i64 %64, 3
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 7
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %84, label %69

69:                                               ; preds = %63, %69
  %70 = phi %"class.jingle_xmpp::XmlElement"*** [ %77, %69 ], [ %53, %63 ]
  %71 = phi i64 [ %78, %69 ], [ %54, %63 ]
  %72 = phi %"class.jingle_xmpp::XmlElement"*** [ %79, %69 ], [ %4, %63 ]
  %73 = phi i64 [ %80, %69 ], [ %67, %63 ]
  %74 = bitcast %"class.jingle_xmpp::XmlElement"*** %72 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = inttoptr i64 %71 to i64*
  store i64 %75, i64* %76, align 8
  %77 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %70, i64 1
  %78 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %77 to i64
  %79 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %72, i64 1
  %80 = add i64 %73, -1
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %69, !llvm.loop !16

82:                                               ; preds = %69
  %83 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %77 to i64
  br label %84

84:                                               ; preds = %63, %82
  %85 = phi %"class.jingle_xmpp::XmlElement"*** [ %53, %63 ], [ %77, %82 ]
  %86 = phi i64 [ %54, %63 ], [ %83, %82 ]
  %87 = phi %"class.jingle_xmpp::XmlElement"*** [ %4, %63 ], [ %79, %82 ]
  %88 = icmp ult i64 %64, 56
  br i1 %88, label %135, label %89

89:                                               ; preds = %84, %89
  %90 = phi %"class.jingle_xmpp::XmlElement"*** [ %131, %89 ], [ %85, %84 ]
  %91 = phi i64 [ %132, %89 ], [ %86, %84 ]
  %92 = phi %"class.jingle_xmpp::XmlElement"*** [ %133, %89 ], [ %87, %84 ]
  %93 = bitcast %"class.jingle_xmpp::XmlElement"*** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = inttoptr i64 %91 to i64*
  store i64 %94, i64* %95, align 8
  %96 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %90, i64 1
  %97 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %92, i64 1
  %98 = bitcast %"class.jingle_xmpp::XmlElement"*** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast %"class.jingle_xmpp::XmlElement"*** %96 to i64*
  store i64 %99, i64* %100, align 8
  %101 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %90, i64 2
  %102 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %92, i64 2
  %103 = bitcast %"class.jingle_xmpp::XmlElement"*** %102 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = bitcast %"class.jingle_xmpp::XmlElement"*** %101 to i64*
  store i64 %104, i64* %105, align 8
  %106 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %90, i64 3
  %107 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %92, i64 3
  %108 = bitcast %"class.jingle_xmpp::XmlElement"*** %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = bitcast %"class.jingle_xmpp::XmlElement"*** %106 to i64*
  store i64 %109, i64* %110, align 8
  %111 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %90, i64 4
  %112 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %92, i64 4
  %113 = bitcast %"class.jingle_xmpp::XmlElement"*** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast %"class.jingle_xmpp::XmlElement"*** %111 to i64*
  store i64 %114, i64* %115, align 8
  %116 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %90, i64 5
  %117 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %92, i64 5
  %118 = bitcast %"class.jingle_xmpp::XmlElement"*** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast %"class.jingle_xmpp::XmlElement"*** %116 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %90, i64 6
  %122 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %92, i64 6
  %123 = bitcast %"class.jingle_xmpp::XmlElement"*** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = bitcast %"class.jingle_xmpp::XmlElement"*** %121 to i64*
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %90, i64 7
  %127 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %92, i64 7
  %128 = bitcast %"class.jingle_xmpp::XmlElement"*** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast %"class.jingle_xmpp::XmlElement"*** %126 to i64*
  store i64 %129, i64* %130, align 8
  %131 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %90, i64 8
  %132 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %131 to i64
  %133 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %92, i64 8
  %134 = icmp eq %"class.jingle_xmpp::XmlElement"*** %61, %131
  br i1 %134, label %135, label %89

135:                                              ; preds = %89, %84
  %136 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %61 to i64
  %137 = load %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"**** %5, align 8
  br label %138

138:                                              ; preds = %46, %135
  %139 = phi %"class.jingle_xmpp::XmlElement"*** [ %137, %135 ], [ %4, %46 ]
  %140 = phi i64 [ %136, %135 ], [ %54, %46 ]
  store i64 %52, i64* %39, align 8
  %141 = bitcast %"class.jingle_xmpp::XmlElement"**** %3 to i64*
  store i64 %54, i64* %141, align 8
  %142 = bitcast %"class.jingle_xmpp::XmlElement"**** %10 to i64*
  store i64 %140, i64* %142, align 8
  store i64 %56, i64* %15, align 8
  %143 = icmp eq %"class.jingle_xmpp::XmlElement"*** %139, null
  br i1 %143, label %147, label %144

144:                                              ; preds = %138
  %145 = bitcast %"class.jingle_xmpp::XmlElement"*** %139 to i8*
  tail call void @_ZdlPv(i8* %145) #13
  %146 = load %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"**** %3, align 8
  br label %147

147:                                              ; preds = %144, %138, %34, %2
  %148 = phi %"class.jingle_xmpp::XmlElement"*** [ %146, %144 ], [ %53, %138 ], [ %36, %34 ], [ %4, %2 ]
  %149 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %148, i64 -1
  %150 = bitcast %"class.jingle_xmpp::XmlElement"*** %1 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = bitcast %"class.jingle_xmpp::XmlElement"*** %149 to i64*
  store i64 %151, i64* %152, align 8
  %153 = load %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"**** %3, align 8
  %154 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %153, i64 -1
  store %"class.jingle_xmpp::XmlElement"*** %154, %"class.jingle_xmpp::XmlElement"**** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPPN11jingle_xmpp10XmlElementERNS_9allocatorIS4_EEE10push_frontERKS4_(%"struct.std::__1::__split_buffer.43"*, %"class.jingle_xmpp::XmlElement"*** dereferenceable(8)) local_unnamed_addr #1 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer.43", %"struct.std::__1::__split_buffer.43"* %0, i64 0, i32 1
  %4 = load %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"**** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer.43", %"struct.std::__1::__split_buffer.43"* %0, i64 0, i32 0
  %6 = load %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"**** %5, align 8
  %7 = icmp eq %"class.jingle_xmpp::XmlElement"*** %4, %6
  %8 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %6 to i64
  br i1 %7, label %9, label %147

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer.43", %"struct.std::__1::__split_buffer.43"* %0, i64 0, i32 2
  %11 = load %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"**** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer.43", %"struct.std::__1::__split_buffer.43"* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"**** %12, align 8
  %14 = icmp ult %"class.jingle_xmpp::XmlElement"*** %11, %13
  %15 = bitcast %"class.jingle_xmpp::XmlElement"**** %12 to i64*
  %16 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %13 to i64
  br i1 %14, label %17, label %38

17:                                               ; preds = %9
  %18 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %11 to i64
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, 2
  %23 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %11, i64 %22
  %24 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %4 to i64
  %25 = sub i64 %18, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %17
  %28 = ashr exact i64 %25, 3
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %23, i64 %29
  %31 = bitcast %"class.jingle_xmpp::XmlElement"*** %30 to i8*
  %32 = bitcast %"class.jingle_xmpp::XmlElement"*** %4 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %25, i1 false) #14
  %33 = load %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"**** %10, align 8
  br label %34

34:                                               ; preds = %17, %27
  %35 = phi %"class.jingle_xmpp::XmlElement"*** [ %33, %27 ], [ %11, %17 ]
  %36 = phi %"class.jingle_xmpp::XmlElement"*** [ %30, %27 ], [ %23, %17 ]
  store %"class.jingle_xmpp::XmlElement"*** %36, %"class.jingle_xmpp::XmlElement"**** %3, align 8
  %37 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %35, i64 %22
  store %"class.jingle_xmpp::XmlElement"*** %37, %"class.jingle_xmpp::XmlElement"**** %10, align 8
  br label %147

38:                                               ; preds = %9
  %39 = bitcast %"struct.std::__1::__split_buffer.43"* %0 to i64*
  %40 = sub i64 %16, %8
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %38
  tail call void @abort() #15
  unreachable

46:                                               ; preds = %38
  %47 = add nuw nsw i64 %43, 3
  %48 = lshr i64 %47, 2
  %49 = shl i64 %43, 3
  %50 = tail call i8* @_Znwm(i64 %49) #13
  %51 = bitcast i8* %50 to %"class.jingle_xmpp::XmlElement"***
  %52 = ptrtoint i8* %50 to i64
  %53 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %51, i64 %48
  %54 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %53 to i64
  %55 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %51, i64 %43
  %56 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %55 to i64
  %57 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %4 to i64
  %58 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %11 to i64
  %59 = sub i64 %58, %57
  %60 = ashr exact i64 %59, 3
  %61 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %53, i64 %60
  %62 = icmp eq i64 %59, 0
  br i1 %62, label %138, label %63

63:                                               ; preds = %46
  %64 = add i64 %59, -8
  %65 = lshr i64 %64, 3
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 7
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %84, label %69

69:                                               ; preds = %63, %69
  %70 = phi %"class.jingle_xmpp::XmlElement"*** [ %77, %69 ], [ %53, %63 ]
  %71 = phi i64 [ %78, %69 ], [ %54, %63 ]
  %72 = phi %"class.jingle_xmpp::XmlElement"*** [ %79, %69 ], [ %4, %63 ]
  %73 = phi i64 [ %80, %69 ], [ %67, %63 ]
  %74 = bitcast %"class.jingle_xmpp::XmlElement"*** %72 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = inttoptr i64 %71 to i64*
  store i64 %75, i64* %76, align 8
  %77 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %70, i64 1
  %78 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %77 to i64
  %79 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %72, i64 1
  %80 = add i64 %73, -1
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %69, !llvm.loop !17

82:                                               ; preds = %69
  %83 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %77 to i64
  br label %84

84:                                               ; preds = %63, %82
  %85 = phi %"class.jingle_xmpp::XmlElement"*** [ %53, %63 ], [ %77, %82 ]
  %86 = phi i64 [ %54, %63 ], [ %83, %82 ]
  %87 = phi %"class.jingle_xmpp::XmlElement"*** [ %4, %63 ], [ %79, %82 ]
  %88 = icmp ult i64 %64, 56
  br i1 %88, label %135, label %89

89:                                               ; preds = %84, %89
  %90 = phi %"class.jingle_xmpp::XmlElement"*** [ %131, %89 ], [ %85, %84 ]
  %91 = phi i64 [ %132, %89 ], [ %86, %84 ]
  %92 = phi %"class.jingle_xmpp::XmlElement"*** [ %133, %89 ], [ %87, %84 ]
  %93 = bitcast %"class.jingle_xmpp::XmlElement"*** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = inttoptr i64 %91 to i64*
  store i64 %94, i64* %95, align 8
  %96 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %90, i64 1
  %97 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %92, i64 1
  %98 = bitcast %"class.jingle_xmpp::XmlElement"*** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast %"class.jingle_xmpp::XmlElement"*** %96 to i64*
  store i64 %99, i64* %100, align 8
  %101 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %90, i64 2
  %102 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %92, i64 2
  %103 = bitcast %"class.jingle_xmpp::XmlElement"*** %102 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = bitcast %"class.jingle_xmpp::XmlElement"*** %101 to i64*
  store i64 %104, i64* %105, align 8
  %106 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %90, i64 3
  %107 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %92, i64 3
  %108 = bitcast %"class.jingle_xmpp::XmlElement"*** %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = bitcast %"class.jingle_xmpp::XmlElement"*** %106 to i64*
  store i64 %109, i64* %110, align 8
  %111 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %90, i64 4
  %112 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %92, i64 4
  %113 = bitcast %"class.jingle_xmpp::XmlElement"*** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast %"class.jingle_xmpp::XmlElement"*** %111 to i64*
  store i64 %114, i64* %115, align 8
  %116 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %90, i64 5
  %117 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %92, i64 5
  %118 = bitcast %"class.jingle_xmpp::XmlElement"*** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast %"class.jingle_xmpp::XmlElement"*** %116 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %90, i64 6
  %122 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %92, i64 6
  %123 = bitcast %"class.jingle_xmpp::XmlElement"*** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = bitcast %"class.jingle_xmpp::XmlElement"*** %121 to i64*
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %90, i64 7
  %127 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %92, i64 7
  %128 = bitcast %"class.jingle_xmpp::XmlElement"*** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast %"class.jingle_xmpp::XmlElement"*** %126 to i64*
  store i64 %129, i64* %130, align 8
  %131 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %90, i64 8
  %132 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %131 to i64
  %133 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %92, i64 8
  %134 = icmp eq %"class.jingle_xmpp::XmlElement"*** %61, %131
  br i1 %134, label %135, label %89

135:                                              ; preds = %89, %84
  %136 = ptrtoint %"class.jingle_xmpp::XmlElement"*** %61 to i64
  %137 = load %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"**** %5, align 8
  br label %138

138:                                              ; preds = %46, %135
  %139 = phi %"class.jingle_xmpp::XmlElement"*** [ %137, %135 ], [ %4, %46 ]
  %140 = phi i64 [ %136, %135 ], [ %54, %46 ]
  store i64 %52, i64* %39, align 8
  %141 = bitcast %"class.jingle_xmpp::XmlElement"**** %3 to i64*
  store i64 %54, i64* %141, align 8
  %142 = bitcast %"class.jingle_xmpp::XmlElement"**** %10 to i64*
  store i64 %140, i64* %142, align 8
  store i64 %56, i64* %15, align 8
  %143 = icmp eq %"class.jingle_xmpp::XmlElement"*** %139, null
  br i1 %143, label %147, label %144

144:                                              ; preds = %138
  %145 = bitcast %"class.jingle_xmpp::XmlElement"*** %139 to i8*
  tail call void @_ZdlPv(i8* %145) #13
  %146 = load %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"**** %3, align 8
  br label %147

147:                                              ; preds = %144, %138, %34, %2
  %148 = phi %"class.jingle_xmpp::XmlElement"*** [ %146, %144 ], [ %53, %138 ], [ %36, %34 ], [ %4, %2 ]
  %149 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %148, i64 -1
  %150 = bitcast %"class.jingle_xmpp::XmlElement"*** %1 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = bitcast %"class.jingle_xmpp::XmlElement"*** %149 to i64*
  store i64 %151, i64* %152, align 8
  %153 = load %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"**** %3, align 8
  %154 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %153, i64 -1
  store %"class.jingle_xmpp::XmlElement"*** %154, %"class.jingle_xmpp::XmlElement"**** %3, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #12

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { cold noreturn nounwind }
attributes #4 = { argmemonly nounwind }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nofree nounwind readonly }
attributes #13 = { builtin nounwind }
attributes #14 = { nounwind }
attributes #15 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNSt3__14listIN7sigslot18_opaque_connectionENS_9allocatorIS2_EEE15__allocate_nodeERNS3_INS_11__list_nodeIS2_PvEEEE: argument 0"}
!4 = distinct !{!4, !"_ZNSt3__14listIN7sigslot18_opaque_connectionENS_9allocatorIS2_EEE15__allocate_nodeERNS3_INS_11__list_nodeIS2_PvEEEE"}
!5 = !{i8 0, i8 2}
!6 = !{!7}
!7 = distinct !{!7, !8, !"_ZNSt3__14listIN7sigslot18_opaque_connectionENS_9allocatorIS2_EEE15__allocate_nodeERNS3_INS_11__list_nodeIS2_PvEEEE: argument 0"}
!8 = distinct !{!8, !"_ZNSt3__14listIN7sigslot18_opaque_connectionENS_9allocatorIS2_EEE15__allocate_nodeERNS3_INS_11__list_nodeIS2_PvEEEE"}
!9 = !{!10}
!10 = distinct !{!10, !11, !"_ZNSt3__16__treeIPN7sigslot22_signal_base_interfaceENS_4lessIS3_EENS_9allocatorIS3_EEE16__construct_nodeIJRKS3_EEENS_10unique_ptrINS_11__tree_nodeIS3_PvEENS_22__tree_node_destructorINS6_ISF_EEEEEEDpOT_: argument 0"}
!11 = distinct !{!11, !"_ZNSt3__16__treeIPN7sigslot22_signal_base_interfaceENS_4lessIS3_EENS_9allocatorIS3_EEE16__construct_nodeIJRKS3_EEENS_10unique_ptrINS_11__tree_nodeIS3_PvEENS_22__tree_node_destructorINS6_ISF_EEEEEEDpOT_"}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.unroll.disable"}
!14 = distinct !{!14, !13}
!15 = distinct !{!15, !13}
!16 = distinct !{!16, !13}
!17 = distinct !{!17, !13}
