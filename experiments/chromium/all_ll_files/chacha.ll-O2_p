; ModuleID = '../../third_party/boringssl/src/crypto/chacha/chacha.c'
source_filename = "../../third_party/boringssl/src/crypto/chacha/chacha.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind ssp uwtable
define hidden void @CRYPTO_hchacha20(i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %4 = bitcast i8* %1 to <4 x i32>*
  %5 = load <4 x i32>, <4 x i32>* %4, align 1
  %6 = shufflevector <4 x i32> %5, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %7 = getelementptr inbounds i8, i8* %1, i64 16
  %8 = bitcast i8* %7 to <4 x i32>*
  %9 = load <4 x i32>, <4 x i32>* %8, align 1
  %10 = shufflevector <4 x i32> %9, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %11 = bitcast i8* %2 to <4 x i32>*
  %12 = load <4 x i32>, <4 x i32>* %11, align 1
  %13 = shufflevector <4 x i32> %12, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  br label %19

14:                                               ; preds = %19
  %15 = bitcast i8* %0 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %15, align 1
  %16 = getelementptr inbounds i8, i8* %0, i64 16
  %17 = shufflevector <4 x i32> %69, <4 x i32> undef, <4 x i32> <i32 1, i32 2, i32 3, i32 0>
  %18 = bitcast i8* %16 to <4 x i32>*
  store <4 x i32> %17, <4 x i32>* %18, align 1
  ret void

19:                                               ; preds = %3, %19
  %20 = phi i64 [ 0, %3 ], [ %76, %19 ]
  %21 = phi <4 x i32> [ %10, %3 ], [ %70, %19 ]
  %22 = phi <4 x i32> [ %13, %3 ], [ %78, %19 ]
  %23 = phi <4 x i32> [ %6, %3 ], [ %75, %19 ]
  %24 = phi <4 x i32> [ <i32 1634760805, i32 857760878, i32 2036477234, i32 1797285236>, %3 ], [ %65, %19 ]
  %25 = shufflevector <4 x i32> %23, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %26 = add <4 x i32> %25, %24
  %27 = shufflevector <4 x i32> %26, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 1, i32 2>
  %28 = shufflevector <4 x i32> %22, <4 x i32> undef, <4 x i32> <i32 0, i32 3, i32 2, i32 1>
  %29 = xor <4 x i32> %28, %27
  %30 = shl <4 x i32> %29, <i32 16, i32 16, i32 16, i32 16>
  %31 = lshr <4 x i32> %29, <i32 16, i32 16, i32 16, i32 16>
  %32 = or <4 x i32> %30, %31
  %33 = shufflevector <4 x i32> %32, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 1, i32 2>
  %34 = add <4 x i32> %33, %21
  %35 = shufflevector <4 x i32> %34, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %36 = shufflevector <4 x i32> %23, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %37 = xor <4 x i32> %35, %36
  %38 = shl <4 x i32> %37, <i32 12, i32 12, i32 12, i32 12>
  %39 = lshr <4 x i32> %37, <i32 20, i32 20, i32 20, i32 20>
  %40 = or <4 x i32> %38, %39
  %41 = add <4 x i32> %40, %26
  %42 = shufflevector <4 x i32> %41, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 1, i32 2>
  %43 = xor <4 x i32> %42, %32
  %44 = shl <4 x i32> %43, <i32 8, i32 8, i32 8, i32 8>
  %45 = lshr <4 x i32> %43, <i32 24, i32 24, i32 24, i32 24>
  %46 = or <4 x i32> %44, %45
  %47 = shufflevector <4 x i32> %46, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 1, i32 2>
  %48 = add <4 x i32> %47, %34
  %49 = shufflevector <4 x i32> %40, <4 x i32> undef, <4 x i32> <i32 1, i32 2, i32 3, i32 0>
  %50 = shufflevector <4 x i32> %48, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 1, i32 2>
  %51 = xor <4 x i32> %50, %49
  %52 = shl <4 x i32> %51, <i32 7, i32 7, i32 7, i32 7>
  %53 = lshr <4 x i32> %51, <i32 25, i32 25, i32 25, i32 25>
  %54 = or <4 x i32> %52, %53
  %55 = add <4 x i32> %54, %41
  %56 = xor <4 x i32> %55, %46
  %57 = shl <4 x i32> %56, <i32 16, i32 16, i32 16, i32 16>
  %58 = lshr <4 x i32> %56, <i32 16, i32 16, i32 16, i32 16>
  %59 = or <4 x i32> %57, %58
  %60 = add <4 x i32> %59, %48
  %61 = xor <4 x i32> %60, %54
  %62 = shl <4 x i32> %61, <i32 12, i32 12, i32 12, i32 12>
  %63 = lshr <4 x i32> %61, <i32 20, i32 20, i32 20, i32 20>
  %64 = or <4 x i32> %62, %63
  %65 = add <4 x i32> %64, %55
  %66 = xor <4 x i32> %65, %59
  %67 = shl <4 x i32> %66, <i32 8, i32 8, i32 8, i32 8>
  %68 = lshr <4 x i32> %66, <i32 24, i32 24, i32 24, i32 24>
  %69 = or <4 x i32> %67, %68
  %70 = add <4 x i32> %69, %60
  %71 = xor <4 x i32> %70, %64
  %72 = shufflevector <4 x i32> %71, <4 x i32> undef, <4 x i32> <i32 2, i32 1, i32 0, i32 3>
  %73 = shl <4 x i32> %72, <i32 7, i32 7, i32 7, i32 7>
  %74 = lshr <4 x i32> %72, <i32 25, i32 25, i32 25, i32 25>
  %75 = or <4 x i32> %73, %74
  %76 = add nuw nsw i64 %20, 2
  %77 = icmp ult i64 %76, 20
  %78 = shufflevector <4 x i32> %69, <4 x i32> undef, <4 x i32> <i32 0, i32 3, i32 2, i32 1>
  br i1 %77, label %19, label %14
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @CRYPTO_chacha_20(i8*, i8*, i64, i8*, i8* nocapture readonly, i32) local_unnamed_addr #0 {
  %7 = alloca [4 x i32], align 16
  %8 = bitcast [4 x i32]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %8) #3
  %9 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 0
  %10 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 1
  %11 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 2
  %12 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 3
  store i32 %5, i32* %9, align 16
  %13 = load i8, i8* %4, align 1
  %14 = zext i8 %13 to i32
  %15 = getelementptr inbounds i8, i8* %4, i64 1
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = shl nuw nsw i32 %17, 8
  %19 = or i32 %18, %14
  %20 = getelementptr inbounds i8, i8* %4, i64 2
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = shl nuw nsw i32 %22, 16
  %24 = or i32 %19, %23
  %25 = getelementptr inbounds i8, i8* %4, i64 3
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = shl nuw i32 %27, 24
  %29 = or i32 %24, %28
  store i32 %29, i32* %10, align 4
  %30 = getelementptr inbounds i8, i8* %4, i64 4
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = getelementptr inbounds i8, i8* %4, i64 5
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = shl nuw nsw i32 %35, 8
  %37 = or i32 %36, %32
  %38 = getelementptr inbounds i8, i8* %4, i64 6
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = shl nuw nsw i32 %40, 16
  %42 = or i32 %37, %41
  %43 = getelementptr inbounds i8, i8* %4, i64 7
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = shl nuw i32 %45, 24
  %47 = or i32 %42, %46
  store i32 %47, i32* %11, align 8
  %48 = getelementptr inbounds i8, i8* %4, i64 8
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = getelementptr inbounds i8, i8* %4, i64 9
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i32
  %54 = shl nuw nsw i32 %53, 8
  %55 = or i32 %54, %50
  %56 = getelementptr inbounds i8, i8* %4, i64 10
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = shl nuw nsw i32 %58, 16
  %60 = or i32 %55, %59
  %61 = getelementptr inbounds i8, i8* %4, i64 11
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = shl nuw i32 %63, 24
  %65 = or i32 %60, %64
  store i32 %65, i32* %12, align 4
  %66 = bitcast i8* %3 to i32*
  call void @ChaCha20_ctr32(i8* %0, i8* %1, i64 %2, i32* %66, i32* nonnull %9) #3
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %8) #3
  ret void
}

declare void @ChaCha20_ctr32(i8*, i8*, i64, i32*, i32*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
