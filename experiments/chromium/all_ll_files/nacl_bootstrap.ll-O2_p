; ModuleID = '../../native_client/src/trusted/service_runtime/linux/nacl_bootstrap.c'
source_filename = "../../native_client/src/trusted/service_runtime/linux/nacl_bootstrap.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"
module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"
module asm ".pushsection \22.text\22,\22ax\22,@progbits"
module asm ".globl _start"
module asm ".type _start,@function"
module asm "_start:"
module asm "xorq %rbp, %rbp"
module asm "movq %rsp, %rbx"
module asm "andq $-16, %rsp"
module asm "movq %rbx, %rdi"
module asm "call do_load"
module asm "movq %rbx, %rsp"
module asm "jmp *%rax"
module asm ".popsection"

%struct.r_debug = type { i32, %struct.link_map*, i64, i32, i64 }
%struct.link_map = type { i64, i8*, %struct.Elf64_Dyn*, %struct.link_map*, %struct.link_map* }
%struct.Elf64_Dyn = type { i64, %union.anon.0 }
%union.anon.0 = type { i64 }
%struct.Elf64_auxv_t = type { i64, %union.anon }
%union.anon = type { i64 }
%struct.kernel_iovec = type { i8*, i64 }
%struct.Elf64_Ehdr = type { [16 x i8], i16, i16, i32, i64, i64, i64, i32, i16, i16, i16, i16, i16, i16 }
%struct.Elf64_Phdr = type { i32, i32, i64, i64, i64, i64, i64, i64 }

@.str = private unnamed_addr constant [6 x i8] c"Usage\00", align 1
@.str.1 = private unnamed_addr constant [16 x i8] c"PROGRAM ARGS...\00", align 1
@.str.2 = private unnamed_addr constant [8 x i8] c"startup\00", align 1
@.str.3 = private unnamed_addr constant [67 x i8] c"Failed to find AT_BASE, AT_ENTRY, AT_PHDR, AT_PHNUM, or AT_PAGESZ!\00", align 1
@_r_debug = dso_local global %struct.r_debug zeroinitializer, section ".r_debug", align 8
@.str.4 = private unnamed_addr constant [19 x i8] c"bootstrap_helper: \00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c": \00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"=\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.8 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.9 = private unnamed_addr constant [11 x i8] c"0123456789\00", align 1
@my_errno = internal unnamed_addr global i32 0, align 4
@kRDebugTemplate = internal unnamed_addr constant [29 x i8] c"--r_debug=0xXXXXXXXXXXXXXXXX\00", align 16
@.str.10 = private unnamed_addr constant [17 x i8] c"0123456789abcdef\00", align 1
@kReservedAtZeroTemplate = internal unnamed_addr constant [38 x i8] c"--reserved_at_zero=0xXXXXXXXXXXXXXXXX\00", align 16
@RESERVE_TOP = external dso_local global [0 x i8], align 1
@TEXT_START = external dso_local global [0 x i8], align 1
@.str.13 = private unnamed_addr constant [19 x i8] c"ReserveBottomPages\00", align 1
@.str.14 = private unnamed_addr constant [25 x i8] c"NULL pointer guard page \00", align 1
@.str.15 = private unnamed_addr constant [6 x i8] c"errno\00", align 1
@.str.16 = private unnamed_addr constant [8 x i8] c"address\00", align 1
@.str.17 = private unnamed_addr constant [39 x i8] c"Failed to read ELF header from file!  \00", align 1
@.str.18 = private unnamed_addr constant [30 x i8] c"File has no valid ELF header!\00", align 1
@.str.19 = private unnamed_addr constant [35 x i8] c"ELF file has wrong architecture!  \00", align 1
@.str.20 = private unnamed_addr constant [10 x i8] c"e_machine\00", align 1
@.str.21 = private unnamed_addr constant [27 x i8] c"ELF file has unreasonable \00", align 1
@.str.22 = private unnamed_addr constant [8 x i8] c"e_phnum\00", align 1
@.str.23 = private unnamed_addr constant [23 x i8] c"ELF file not ET_DYN!  \00", align 1
@.str.24 = private unnamed_addr constant [7 x i8] c"e_type\00", align 1
@.str.25 = private unnamed_addr constant [48 x i8] c"Failed to read program headers from ELF file!  \00", align 1
@.str.26 = private unnamed_addr constant [32 x i8] c"ELF file has no PT_LOAD header!\00", align 1
@.str.27 = private unnamed_addr constant [8 x i8] c"segment\00", align 1
@.str.28 = private unnamed_addr constant [55 x i8] c"First load segment of ELF file does not contain phdrs!\00", align 1
@load_elf_file.interp_buffer = internal global [4097 x i8] zeroinitializer, align 16
@.str.29 = private unnamed_addr constant [44 x i8] c"ELF file has unreasonable PT_INTERP size!  \00", align 1
@.str.30 = private unnamed_addr constant [9 x i8] c"p_filesz\00", align 1
@.str.31 = private unnamed_addr constant [40 x i8] c"Cannot read PT_INTERP segment contents!\00", align 1
@.str.32 = private unnamed_addr constant [24 x i8] c"Cannot open ELF file!  \00", align 1
@.str.33 = private unnamed_addr constant [11 x i8] c"read count\00", align 1
@.str.34 = private unnamed_addr constant [25 x i8] c"Failed to map segment!  \00", align 1
@.str.35 = private unnamed_addr constant [12 x i8] c"bss segment\00", align 1
@.str.36 = private unnamed_addr constant [35 x i8] c"Failed to mprotect segment hole!  \00", align 1

; Function Attrs: nounwind uwtable
define dso_local i64 @do_load(i64*) local_unnamed_addr #0 {
  %2 = alloca i8*, align 8
  %3 = load i64, i64* %0, align 8, !tbaa !2
  %4 = getelementptr inbounds i64, i64* %0, i64 1
  %5 = getelementptr inbounds i64, i64* %0, i64 2
  %6 = bitcast i64* %5 to i8**
  %7 = load i8*, i8** %6, align 8, !tbaa !5
  %8 = shl i64 %3, 32
  %9 = add i64 %8, 4294967296
  %10 = ashr exact i64 %9, 32
  %11 = getelementptr inbounds i64, i64* %4, i64 %10
  %12 = bitcast i64* %11 to i8**
  br label %13

13:                                               ; preds = %13, %1
  %14 = phi i8** [ %12, %1 ], [ %17, %13 ]
  %15 = load i8*, i8** %14, align 8, !tbaa !5
  %16 = icmp eq i8* %15, null
  %17 = getelementptr inbounds i8*, i8** %14, i64 1
  br i1 %16, label %18, label %13

18:                                               ; preds = %13
  %19 = trunc i64 %3 to i32
  %20 = bitcast i8** %17 to %struct.Elf64_auxv_t*
  br label %21

21:                                               ; preds = %21, %18
  %22 = phi %struct.Elf64_auxv_t* [ %20, %18 ], [ %26, %21 ]
  %23 = getelementptr inbounds %struct.Elf64_auxv_t, %struct.Elf64_auxv_t* %22, i64 0, i32 0
  %24 = load i64, i64* %23, align 8, !tbaa !7
  %25 = icmp eq i64 %24, 0
  %26 = getelementptr inbounds %struct.Elf64_auxv_t, %struct.Elf64_auxv_t* %22, i64 1
  br i1 %25, label %27, label %21

27:                                               ; preds = %21
  %28 = getelementptr inbounds %struct.Elf64_auxv_t, %struct.Elf64_auxv_t* %22, i64 1, i32 0
  %29 = ptrtoint i64* %28 to i64
  %30 = ptrtoint i64* %4 to i64
  %31 = sub i64 %29, %30
  %32 = ashr exact i64 %31, 3
  %33 = icmp slt i32 %19, 2
  br i1 %33, label %34, label %35

34:                                               ; preds = %27
  tail call fastcc void @fail(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i64 0, i64 0), i8* null, i32 0, i8* null, i32 0) #3
  unreachable

35:                                               ; preds = %27
  %36 = add nsw i32 %19, -1
  %37 = bitcast i8** %14 to %struct.Elf64_auxv_t*
  %38 = sext i32 %36 to i64
  store i64 %38, i64* %0, align 8, !tbaa !2
  %39 = icmp ugt i64 %32, 1
  br i1 %39, label %40, label %104

40:                                               ; preds = %35
  %41 = add nsw i64 %32, -1
  %42 = icmp ult i64 %41, 4
  br i1 %42, label %43, label %45

43:                                               ; preds = %102, %40
  %44 = phi i64 [ 1, %40 ], [ %47, %102 ]
  br label %108

45:                                               ; preds = %40
  %46 = and i64 %41, -4
  %47 = or i64 %46, 1
  %48 = add nsw i64 %46, -4
  %49 = lshr exact i64 %48, 2
  %50 = add nuw nsw i64 %49, 1
  %51 = and i64 %50, 1
  %52 = icmp eq i64 %48, 0
  br i1 %52, label %87, label %53

53:                                               ; preds = %45
  %54 = sub nuw nsw i64 %50, %51
  br label %55

55:                                               ; preds = %55, %53
  %56 = phi i64 [ 0, %53 ], [ %82, %55 ]
  %57 = phi i64 [ %54, %53 ], [ %83, %55 ]
  %58 = or i64 %56, 1
  %59 = add nuw nsw i64 %58, 1
  %60 = getelementptr inbounds i64, i64* %0, i64 %59
  %61 = bitcast i64* %60 to <2 x i64>*
  %62 = load <2 x i64>, <2 x i64>* %61, align 8, !tbaa !2
  %63 = getelementptr inbounds i64, i64* %60, i64 2
  %64 = bitcast i64* %63 to <2 x i64>*
  %65 = load <2 x i64>, <2 x i64>* %64, align 8, !tbaa !2
  %66 = getelementptr inbounds i64, i64* %0, i64 %58
  %67 = bitcast i64* %66 to <2 x i64>*
  store <2 x i64> %62, <2 x i64>* %67, align 8, !tbaa !2
  %68 = getelementptr inbounds i64, i64* %66, i64 2
  %69 = bitcast i64* %68 to <2 x i64>*
  store <2 x i64> %65, <2 x i64>* %69, align 8, !tbaa !2
  %70 = or i64 %56, 5
  %71 = add nuw nsw i64 %70, 1
  %72 = getelementptr inbounds i64, i64* %0, i64 %71
  %73 = bitcast i64* %72 to <2 x i64>*
  %74 = load <2 x i64>, <2 x i64>* %73, align 8, !tbaa !2
  %75 = getelementptr inbounds i64, i64* %72, i64 2
  %76 = bitcast i64* %75 to <2 x i64>*
  %77 = load <2 x i64>, <2 x i64>* %76, align 8, !tbaa !2
  %78 = getelementptr inbounds i64, i64* %0, i64 %70
  %79 = bitcast i64* %78 to <2 x i64>*
  store <2 x i64> %74, <2 x i64>* %79, align 8, !tbaa !2
  %80 = getelementptr inbounds i64, i64* %78, i64 2
  %81 = bitcast i64* %80 to <2 x i64>*
  store <2 x i64> %77, <2 x i64>* %81, align 8, !tbaa !2
  %82 = add i64 %56, 8
  %83 = add i64 %57, -2
  %84 = icmp eq i64 %83, 0
  br i1 %84, label %85, label %55, !llvm.loop !10

85:                                               ; preds = %55
  %86 = or i64 %82, 1
  br label %87

87:                                               ; preds = %85, %45
  %88 = phi i64 [ 1, %45 ], [ %86, %85 ]
  %89 = icmp eq i64 %51, 0
  br i1 %89, label %102, label %90

90:                                               ; preds = %87
  %91 = add nuw nsw i64 %88, 1
  %92 = getelementptr inbounds i64, i64* %0, i64 %91
  %93 = bitcast i64* %92 to <2 x i64>*
  %94 = load <2 x i64>, <2 x i64>* %93, align 8, !tbaa !2
  %95 = getelementptr inbounds i64, i64* %92, i64 2
  %96 = bitcast i64* %95 to <2 x i64>*
  %97 = load <2 x i64>, <2 x i64>* %96, align 8, !tbaa !2
  %98 = getelementptr inbounds i64, i64* %0, i64 %88
  %99 = bitcast i64* %98 to <2 x i64>*
  store <2 x i64> %94, <2 x i64>* %99, align 8, !tbaa !2
  %100 = getelementptr inbounds i64, i64* %98, i64 2
  %101 = bitcast i64* %100 to <2 x i64>*
  store <2 x i64> %97, <2 x i64>* %101, align 8, !tbaa !2
  br label %102

102:                                              ; preds = %87, %90
  %103 = icmp eq i64 %41, %46
  br i1 %103, label %104, label %43

104:                                              ; preds = %108, %102, %35
  %105 = icmp sgt i32 %36, 1
  br i1 %105, label %106, label %212

106:                                              ; preds = %104
  %107 = zext i32 %36 to i64
  br label %115

108:                                              ; preds = %43, %108
  %109 = phi i64 [ %110, %108 ], [ %44, %43 ]
  %110 = add nuw i64 %109, 1
  %111 = getelementptr inbounds i64, i64* %0, i64 %110
  %112 = load i64, i64* %111, align 8, !tbaa !2
  %113 = getelementptr inbounds i64, i64* %0, i64 %109
  store i64 %112, i64* %113, align 8, !tbaa !2
  %114 = icmp eq i64 %110, %32
  br i1 %114, label %104, label %108, !llvm.loop !12

115:                                              ; preds = %145, %106
  %116 = phi i64 [ 1, %106 ], [ %210, %145 ]
  %117 = getelementptr inbounds i64, i64* %4, i64 %116
  %118 = bitcast i64* %117 to i8**
  %119 = load i8*, i8** %118, align 8, !tbaa !5
  %120 = load i8, i8* %119, align 1, !tbaa !2
  %121 = icmp eq i8 %120, 45
  br i1 %121, label %122, label %212

122:                                              ; preds = %115, %127
  %123 = phi i8 [ %130, %127 ], [ 45, %115 ]
  %124 = phi i8* [ %129, %127 ], [ getelementptr inbounds ([29 x i8], [29 x i8]* @kRDebugTemplate, i64 0, i64 0), %115 ]
  %125 = phi i8* [ %128, %127 ], [ %119, %115 ]
  %126 = icmp eq i8 %123, 0
  br i1 %126, label %145, label %127

127:                                              ; preds = %122
  %128 = getelementptr inbounds i8, i8* %125, i64 1
  %129 = getelementptr inbounds i8, i8* %124, i64 1
  %130 = load i8, i8* %128, align 1, !tbaa !2
  %131 = load i8, i8* %129, align 1, !tbaa !2
  %132 = icmp eq i8 %130, %131
  br i1 %132, label %122, label %133

133:                                              ; preds = %127
  br i1 %121, label %134, label %212

134:                                              ; preds = %133, %139
  %135 = phi i8 [ %142, %139 ], [ 45, %133 ]
  %136 = phi i8* [ %141, %139 ], [ getelementptr inbounds ([38 x i8], [38 x i8]* @kReservedAtZeroTemplate, i64 0, i64 0), %133 ]
  %137 = phi i8* [ %140, %139 ], [ %119, %133 ]
  %138 = icmp eq i8 %135, 0
  br i1 %138, label %145, label %139

139:                                              ; preds = %134
  %140 = getelementptr inbounds i8, i8* %137, i64 1
  %141 = getelementptr inbounds i8, i8* %136, i64 1
  %142 = load i8, i8* %140, align 1, !tbaa !2
  %143 = load i8, i8* %141, align 1, !tbaa !2
  %144 = icmp eq i8 %142, %143
  br i1 %144, label %134, label %212

145:                                              ; preds = %122, %134
  %146 = phi i64 [ 21, %134 ], [ 12, %122 ]
  %147 = phi i8* [ getelementptr ([17 x i8], [17 x i8]* @.str.10, i64 0, i64 and (i64 ptrtoint ([0 x i8]* @RESERVE_TOP to i64), i64 15)), %134 ], [ getelementptr ([17 x i8], [17 x i8]* @.str.10, i64 0, i64 and (i64 ptrtoint (%struct.r_debug* @_r_debug to i64), i64 15)), %122 ]
  %148 = phi i64 [ 36, %134 ], [ 27, %122 ]
  %149 = phi i8* [ getelementptr ([17 x i8], [17 x i8]* @.str.10, i64 0, i64 and (i64 lshr (i64 ptrtoint ([0 x i8]* @RESERVE_TOP to i64), i64 4), i64 15)), %134 ], [ getelementptr ([17 x i8], [17 x i8]* @.str.10, i64 0, i64 and (i64 lshr (i64 ptrtoint (%struct.r_debug* @_r_debug to i64), i64 4), i64 15)), %122 ]
  %150 = phi i64 [ 35, %134 ], [ 26, %122 ]
  %151 = phi i8* [ getelementptr ([17 x i8], [17 x i8]* @.str.10, i64 0, i64 and (i64 lshr (i64 ptrtoint ([0 x i8]* @RESERVE_TOP to i64), i64 8), i64 15)), %134 ], [ getelementptr ([17 x i8], [17 x i8]* @.str.10, i64 0, i64 and (i64 lshr (i64 ptrtoint (%struct.r_debug* @_r_debug to i64), i64 8), i64 15)), %122 ]
  %152 = phi i64 [ 34, %134 ], [ 25, %122 ]
  %153 = phi i8* [ getelementptr ([17 x i8], [17 x i8]* @.str.10, i64 0, i64 and (i64 lshr (i64 ptrtoint ([0 x i8]* @RESERVE_TOP to i64), i64 12), i64 15)), %134 ], [ getelementptr ([17 x i8], [17 x i8]* @.str.10, i64 0, i64 and (i64 lshr (i64 ptrtoint (%struct.r_debug* @_r_debug to i64), i64 12), i64 15)), %122 ]
  %154 = phi i64 [ 33, %134 ], [ 24, %122 ]
  %155 = phi i8* [ getelementptr ([17 x i8], [17 x i8]* @.str.10, i64 0, i64 and (i64 lshr (i64 ptrtoint ([0 x i8]* @RESERVE_TOP to i64), i64 16), i64 15)), %134 ], [ getelementptr ([17 x i8], [17 x i8]* @.str.10, i64 0, i64 and (i64 lshr (i64 ptrtoint (%struct.r_debug* @_r_debug to i64), i64 16), i64 15)), %122 ]
  %156 = phi i64 [ 32, %134 ], [ 23, %122 ]
  %157 = phi i8* [ getelementptr ([17 x i8], [17 x i8]* @.str.10, i64 0, i64 and (i64 lshr (i64 ptrtoint ([0 x i8]* @RESERVE_TOP to i64), i64 20), i64 15)), %134 ], [ getelementptr ([17 x i8], [17 x i8]* @.str.10, i64 0, i64 and (i64 lshr (i64 ptrtoint (%struct.r_debug* @_r_debug to i64), i64 20), i64 15)), %122 ]
  %158 = phi i64 [ 31, %134 ], [ 22, %122 ]
  %159 = phi i8* [ getelementptr ([17 x i8], [17 x i8]* @.str.10, i64 0, i64 and (i64 lshr (i64 ptrtoint ([0 x i8]* @RESERVE_TOP to i64), i64 24), i64 15)), %134 ], [ getelementptr ([17 x i8], [17 x i8]* @.str.10, i64 0, i64 and (i64 lshr (i64 ptrtoint (%struct.r_debug* @_r_debug to i64), i64 24), i64 15)), %122 ]
  %160 = phi i64 [ 30, %134 ], [ 21, %122 ]
  %161 = phi i8* [ getelementptr ([17 x i8], [17 x i8]* @.str.10, i64 0, i64 and (i64 lshr (i64 ptrtoint ([0 x i8]* @RESERVE_TOP to i64), i64 28), i64 15)), %134 ], [ getelementptr ([17 x i8], [17 x i8]* @.str.10, i64 0, i64 and (i64 lshr (i64 ptrtoint (%struct.r_debug* @_r_debug to i64), i64 28), i64 15)), %122 ]
  %162 = phi i64 [ 29, %134 ], [ 20, %122 ]
  %163 = phi i8* [ getelementptr ([17 x i8], [17 x i8]* @.str.10, i64 0, i64 and (i64 lshr (i64 ptrtoint ([0 x i8]* @RESERVE_TOP to i64), i64 32), i64 15)), %134 ], [ getelementptr ([17 x i8], [17 x i8]* @.str.10, i64 0, i64 and (i64 lshr (i64 ptrtoint (%struct.r_debug* @_r_debug to i64), i64 32), i64 15)), %122 ]
  %164 = phi i64 [ 28, %134 ], [ 19, %122 ]
  %165 = phi i8* [ getelementptr ([17 x i8], [17 x i8]* @.str.10, i64 0, i64 and (i64 lshr (i64 ptrtoint ([0 x i8]* @RESERVE_TOP to i64), i64 36), i64 15)), %134 ], [ getelementptr ([17 x i8], [17 x i8]* @.str.10, i64 0, i64 and (i64 lshr (i64 ptrtoint (%struct.r_debug* @_r_debug to i64), i64 36), i64 15)), %122 ]
  %166 = phi i64 [ 27, %134 ], [ 18, %122 ]
  %167 = phi i8* [ getelementptr ([17 x i8], [17 x i8]* @.str.10, i64 0, i64 and (i64 lshr (i64 ptrtoint ([0 x i8]* @RESERVE_TOP to i64), i64 40), i64 15)), %134 ], [ getelementptr ([17 x i8], [17 x i8]* @.str.10, i64 0, i64 and (i64 lshr (i64 ptrtoint (%struct.r_debug* @_r_debug to i64), i64 40), i64 15)), %122 ]
  %168 = phi i64 [ 26, %134 ], [ 17, %122 ]
  %169 = phi i8* [ getelementptr ([17 x i8], [17 x i8]* @.str.10, i64 0, i64 and (i64 lshr (i64 ptrtoint ([0 x i8]* @RESERVE_TOP to i64), i64 44), i64 15)), %134 ], [ getelementptr ([17 x i8], [17 x i8]* @.str.10, i64 0, i64 and (i64 lshr (i64 ptrtoint (%struct.r_debug* @_r_debug to i64), i64 44), i64 15)), %122 ]
  %170 = phi i64 [ 25, %134 ], [ 16, %122 ]
  %171 = phi i8* [ getelementptr ([17 x i8], [17 x i8]* @.str.10, i64 0, i64 and (i64 lshr (i64 ptrtoint ([0 x i8]* @RESERVE_TOP to i64), i64 48), i64 15)), %134 ], [ getelementptr ([17 x i8], [17 x i8]* @.str.10, i64 0, i64 and (i64 lshr (i64 ptrtoint (%struct.r_debug* @_r_debug to i64), i64 48), i64 15)), %122 ]
  %172 = phi i64 [ 24, %134 ], [ 15, %122 ]
  %173 = phi i8* [ getelementptr ([17 x i8], [17 x i8]* @.str.10, i64 0, i64 and (i64 lshr (i64 ptrtoint ([0 x i8]* @RESERVE_TOP to i64), i64 52), i64 15)), %134 ], [ getelementptr ([17 x i8], [17 x i8]* @.str.10, i64 0, i64 and (i64 lshr (i64 ptrtoint (%struct.r_debug* @_r_debug to i64), i64 52), i64 15)), %122 ]
  %174 = phi i64 [ 23, %134 ], [ 14, %122 ]
  %175 = phi i8* [ getelementptr ([17 x i8], [17 x i8]* @.str.10, i64 0, i64 and (i64 lshr (i64 ptrtoint ([0 x i8]* @RESERVE_TOP to i64), i64 56), i64 15)), %134 ], [ getelementptr ([17 x i8], [17 x i8]* @.str.10, i64 0, i64 and (i64 lshr (i64 ptrtoint (%struct.r_debug* @_r_debug to i64), i64 56), i64 15)), %122 ]
  %176 = phi i64 [ 22, %134 ], [ 13, %122 ]
  %177 = phi i8* [ getelementptr ([17 x i8], [17 x i8]* @.str.10, i64 0, i64 lshr (i64 ptrtoint ([0 x i8]* @RESERVE_TOP to i64), i64 60)), %134 ], [ getelementptr ([17 x i8], [17 x i8]* @.str.10, i64 0, i64 lshr (i64 ptrtoint (%struct.r_debug* @_r_debug to i64), i64 60)), %122 ]
  %178 = getelementptr inbounds i8, i8* %119, i64 %146
  %179 = load i8, i8* %147, align 1, !tbaa !2
  %180 = getelementptr inbounds i8, i8* %119, i64 %148
  store i8 %179, i8* %180, align 1, !tbaa !2
  %181 = load i8, i8* %149, align 1, !tbaa !2
  %182 = getelementptr inbounds i8, i8* %119, i64 %150
  store i8 %181, i8* %182, align 1, !tbaa !2
  %183 = load i8, i8* %151, align 1, !tbaa !2
  %184 = getelementptr inbounds i8, i8* %119, i64 %152
  store i8 %183, i8* %184, align 1, !tbaa !2
  %185 = load i8, i8* %153, align 1, !tbaa !2
  %186 = getelementptr inbounds i8, i8* %119, i64 %154
  store i8 %185, i8* %186, align 1, !tbaa !2
  %187 = load i8, i8* %155, align 1, !tbaa !2
  %188 = getelementptr inbounds i8, i8* %119, i64 %156
  store i8 %187, i8* %188, align 1, !tbaa !2
  %189 = load i8, i8* %157, align 1, !tbaa !2
  %190 = getelementptr inbounds i8, i8* %119, i64 %158
  store i8 %189, i8* %190, align 1, !tbaa !2
  %191 = load i8, i8* %159, align 1, !tbaa !2
  %192 = getelementptr inbounds i8, i8* %119, i64 %160
  store i8 %191, i8* %192, align 1, !tbaa !2
  %193 = load i8, i8* %161, align 1, !tbaa !2
  %194 = getelementptr inbounds i8, i8* %119, i64 %162
  store i8 %193, i8* %194, align 1, !tbaa !2
  %195 = load i8, i8* %163, align 1, !tbaa !2
  %196 = getelementptr inbounds i8, i8* %119, i64 %164
  store i8 %195, i8* %196, align 1, !tbaa !2
  %197 = load i8, i8* %165, align 1, !tbaa !2
  %198 = getelementptr inbounds i8, i8* %119, i64 %166
  store i8 %197, i8* %198, align 1, !tbaa !2
  %199 = load i8, i8* %167, align 1, !tbaa !2
  %200 = getelementptr inbounds i8, i8* %119, i64 %168
  store i8 %199, i8* %200, align 1, !tbaa !2
  %201 = load i8, i8* %169, align 1, !tbaa !2
  %202 = getelementptr inbounds i8, i8* %119, i64 %170
  store i8 %201, i8* %202, align 1, !tbaa !2
  %203 = load i8, i8* %171, align 1, !tbaa !2
  %204 = getelementptr inbounds i8, i8* %119, i64 %172
  store i8 %203, i8* %204, align 1, !tbaa !2
  %205 = load i8, i8* %173, align 1, !tbaa !2
  %206 = getelementptr inbounds i8, i8* %119, i64 %174
  store i8 %205, i8* %206, align 1, !tbaa !2
  %207 = load i8, i8* %175, align 1, !tbaa !2
  %208 = getelementptr inbounds i8, i8* %119, i64 %176
  store i8 %207, i8* %208, align 1, !tbaa !2
  %209 = load i8, i8* %177, align 1, !tbaa !2
  store i8 %209, i8* %178, align 1, !tbaa !2
  %210 = add nuw nsw i64 %116, 1
  %211 = icmp eq i64 %210, %107
  br i1 %211, label %212, label %115

212:                                              ; preds = %115, %133, %145, %139, %104
  br label %213

213:                                              ; preds = %212, %230
  %214 = phi i64 [ %235, %230 ], [ 0, %212 ]
  %215 = phi %struct.Elf64_auxv_t* [ %234, %230 ], [ null, %212 ]
  %216 = phi %struct.Elf64_auxv_t* [ %233, %230 ], [ null, %212 ]
  %217 = phi %struct.Elf64_auxv_t* [ %232, %230 ], [ null, %212 ]
  %218 = phi %struct.Elf64_auxv_t* [ %231, %230 ], [ null, %212 ]
  %219 = phi %struct.Elf64_auxv_t* [ %236, %230 ], [ %37, %212 ]
  %220 = getelementptr inbounds %struct.Elf64_auxv_t, %struct.Elf64_auxv_t* %219, i64 0, i32 0
  %221 = load i64, i64* %220, align 8, !tbaa !7
  switch i64 %221, label %230 [
    i64 0, label %222
    i64 7, label %223
    i64 9, label %224
    i64 6, label %225
    i64 3, label %228
    i64 5, label %229
  ]

222:                                              ; preds = %213
  tail call fastcc void @fail(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.3, i64 0, i64 0), i8* null, i32 0, i8* null, i32 0) #3
  unreachable

223:                                              ; preds = %213
  br label %230

224:                                              ; preds = %213
  br label %230

225:                                              ; preds = %213
  %226 = getelementptr inbounds %struct.Elf64_auxv_t, %struct.Elf64_auxv_t* %219, i64 0, i32 1, i32 0
  %227 = load i64, i64* %226, align 8, !tbaa !2
  br label %230

228:                                              ; preds = %213
  br label %230

229:                                              ; preds = %213
  br label %230

230:                                              ; preds = %223, %224, %225, %228, %229, %213
  %231 = phi %struct.Elf64_auxv_t* [ %218, %213 ], [ %218, %229 ], [ %218, %228 ], [ %218, %225 ], [ %218, %224 ], [ %219, %223 ]
  %232 = phi %struct.Elf64_auxv_t* [ %217, %213 ], [ %217, %229 ], [ %217, %228 ], [ %217, %225 ], [ %219, %224 ], [ %217, %223 ]
  %233 = phi %struct.Elf64_auxv_t* [ %216, %213 ], [ %216, %229 ], [ %219, %228 ], [ %216, %225 ], [ %216, %224 ], [ %216, %223 ]
  %234 = phi %struct.Elf64_auxv_t* [ %215, %213 ], [ %219, %229 ], [ %215, %228 ], [ %215, %225 ], [ %215, %224 ], [ %215, %223 ]
  %235 = phi i64 [ %214, %213 ], [ %214, %229 ], [ %214, %228 ], [ %227, %225 ], [ %214, %224 ], [ %214, %223 ]
  %236 = getelementptr inbounds %struct.Elf64_auxv_t, %struct.Elf64_auxv_t* %219, i64 1
  %237 = icmp eq %struct.Elf64_auxv_t* %231, null
  %238 = icmp eq %struct.Elf64_auxv_t* %232, null
  %239 = or i1 %237, %238
  %240 = icmp eq %struct.Elf64_auxv_t* %233, null
  %241 = or i1 %239, %240
  %242 = icmp eq %struct.Elf64_auxv_t* %234, null
  %243 = or i1 %241, %242
  %244 = icmp eq i64 %235, 0
  %245 = or i1 %243, %244
  br i1 %245, label %213, label %246

246:                                              ; preds = %230
  br i1 icmp ugt ([0 x i8]* @TEXT_START, [0 x i8]* null), label %247, label %268

247:                                              ; preds = %246, %265
  %248 = phi i64 [ %266, %265 ], [ 0, %246 ]
  %249 = sub i64 ptrtoint ([0 x i8]* @TEXT_START to i64), %248
  %250 = tail call i64 asm sideeffect "movq $5,%r10;movq $6,%r8;movq $7,%r9;syscall\0A", "={ax},0,{di},{si},{dx},r,r,r,~{r10},~{r8},~{r9},~{r11},~{rcx},~{memory},~{dirflag},~{fpsr},~{flags}"(i64 9, i64 %248, i64 %249, i64 0, i64 16434, i64 -1, i64 0) #4, !srcloc !14
  %251 = icmp ugt i64 %250, -4096
  br i1 %251, label %252, label %255

252:                                              ; preds = %247
  %253 = trunc i64 %250 to i32
  %254 = sub nsw i32 0, %253
  store i32 %254, i32* @my_errno, align 4, !tbaa !15
  br label %255

255:                                              ; preds = %252, %247
  %256 = phi i64 [ -1, %252 ], [ %250, %247 ]
  %257 = icmp eq i64 %248, %256
  br i1 %257, label %268, label %258

258:                                              ; preds = %255
  %259 = inttoptr i64 %256 to i8*
  %260 = icmp eq i8* %259, inttoptr (i64 -1 to i8*)
  %261 = load i32, i32* @my_errno, align 4, !tbaa !15
  br i1 %260, label %262, label %263

262:                                              ; preds = %258
  switch i32 %261, label %263 [
    i32 22, label %265
    i32 13, label %265
    i32 1, label %265
  ]

263:                                              ; preds = %258, %262
  %264 = trunc i64 %248 to i32
  tail call fastcc void @fail(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.15, i64 0, i64 0), i32 %261, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 %264) #5
  unreachable

265:                                              ; preds = %262, %262, %262
  %266 = add i64 %248, %235
  %267 = icmp ult i64 %266, ptrtoint ([0 x i8]* @TEXT_START to i64)
  br i1 %267, label %247, label %268

268:                                              ; preds = %255, %265, %246
  %269 = bitcast i8** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %269) #4
  store i8* null, i8** %2, align 8, !tbaa !5
  %270 = getelementptr inbounds %struct.Elf64_auxv_t, %struct.Elf64_auxv_t* %233, i64 0, i32 1, i32 0
  %271 = getelementptr inbounds %struct.Elf64_auxv_t, %struct.Elf64_auxv_t* %234, i64 0, i32 1, i32 0
  %272 = call fastcc i64 @load_elf_file(i8* %7, i64 %235, i64* null, i64* nonnull %270, i64* nonnull %271, i8** nonnull %2) #6
  %273 = getelementptr inbounds %struct.Elf64_auxv_t, %struct.Elf64_auxv_t* %232, i64 0, i32 1, i32 0
  store i64 %272, i64* %273, align 8, !tbaa !2
  %274 = load i8*, i8** %2, align 8, !tbaa !5
  %275 = icmp eq i8* %274, null
  br i1 %275, label %279, label %276

276:                                              ; preds = %268
  %277 = getelementptr inbounds %struct.Elf64_auxv_t, %struct.Elf64_auxv_t* %231, i64 0, i32 1, i32 0
  %278 = call fastcc i64 @load_elf_file(i8* nonnull %274, i64 %235, i64* nonnull %277, i64* null, i64* null, i8** null) #6
  br label %279

279:                                              ; preds = %268, %276
  %280 = phi i64 [ %278, %276 ], [ %272, %268 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %269) #4
  ret i64 %280
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: noreturn nounwind uwtable
define internal fastcc void @fail(i8*, i8*, i8*, i32, i8*, i32) unnamed_addr #2 {
  %7 = alloca [32 x i8], align 16
  %8 = alloca [32 x i8], align 16
  %9 = alloca [12 x %struct.kernel_iovec], align 16
  %10 = getelementptr inbounds [32 x i8], [32 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %10) #4
  %11 = getelementptr inbounds [32 x i8], [32 x i8]* %8, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #4
  %12 = bitcast [12 x %struct.kernel_iovec]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 192, i8* nonnull %12) #4
  %13 = getelementptr inbounds [12 x %struct.kernel_iovec], [12 x %struct.kernel_iovec]* %9, i64 0, i64 0, i32 0
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.4, i64 0, i64 0), i8** %13, align 16, !tbaa !17
  %14 = getelementptr inbounds [12 x %struct.kernel_iovec], [12 x %struct.kernel_iovec]* %9, i64 0, i64 0, i32 1
  store i64 18, i64* %14, align 8, !tbaa !19
  %15 = getelementptr inbounds [12 x %struct.kernel_iovec], [12 x %struct.kernel_iovec]* %9, i64 0, i64 1, i32 0
  store i8* %0, i8** %15, align 16, !tbaa !17
  %16 = getelementptr inbounds [12 x %struct.kernel_iovec], [12 x %struct.kernel_iovec]* %9, i64 0, i64 1, i32 1
  %17 = load i8, i8* %0, align 1, !tbaa !2
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %26, label %19

19:                                               ; preds = %6, %19
  %20 = phi i64 [ %23, %19 ], [ 0, %6 ]
  %21 = phi i8* [ %22, %19 ], [ %0, %6 ]
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  %23 = add i64 %20, 1
  %24 = load i8, i8* %22, align 1, !tbaa !2
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %26, label %19

26:                                               ; preds = %19, %6
  %27 = phi i64 [ 0, %6 ], [ %23, %19 ]
  store i64 %27, i64* %16, align 8, !tbaa !19
  %28 = getelementptr inbounds [12 x %struct.kernel_iovec], [12 x %struct.kernel_iovec]* %9, i64 0, i64 2, i32 0
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i8** %28, align 16, !tbaa !17
  %29 = getelementptr inbounds [12 x %struct.kernel_iovec], [12 x %struct.kernel_iovec]* %9, i64 0, i64 2, i32 1
  store i64 2, i64* %29, align 8, !tbaa !19
  %30 = getelementptr inbounds [12 x %struct.kernel_iovec], [12 x %struct.kernel_iovec]* %9, i64 0, i64 3, i32 0
  store i8* %1, i8** %30, align 16, !tbaa !17
  %31 = getelementptr inbounds [12 x %struct.kernel_iovec], [12 x %struct.kernel_iovec]* %9, i64 0, i64 3, i32 1
  %32 = load i8, i8* %1, align 1, !tbaa !2
  %33 = icmp eq i8 %32, 0
  br i1 %33, label %41, label %34

34:                                               ; preds = %26, %34
  %35 = phi i64 [ %38, %34 ], [ 0, %26 ]
  %36 = phi i8* [ %37, %34 ], [ %1, %26 ]
  %37 = getelementptr inbounds i8, i8* %36, i64 1
  %38 = add i64 %35, 1
  %39 = load i8, i8* %37, align 1, !tbaa !2
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %41, label %34

41:                                               ; preds = %34, %26
  %42 = phi i64 [ 0, %26 ], [ %38, %34 ]
  store i64 %42, i64* %31, align 8, !tbaa !19
  %43 = getelementptr inbounds [12 x %struct.kernel_iovec], [12 x %struct.kernel_iovec]* %9, i64 0, i64 4, i32 0
  store i8* %2, i8** %43, align 16, !tbaa !17
  %44 = getelementptr inbounds [12 x %struct.kernel_iovec], [12 x %struct.kernel_iovec]* %9, i64 0, i64 4, i32 1
  %45 = icmp eq i8* %2, null
  br i1 %45, label %56, label %46

46:                                               ; preds = %41
  %47 = load i8, i8* %2, align 1, !tbaa !2
  %48 = icmp eq i8 %47, 0
  br i1 %48, label %56, label %49

49:                                               ; preds = %46, %49
  %50 = phi i64 [ %53, %49 ], [ 0, %46 ]
  %51 = phi i8* [ %52, %49 ], [ %2, %46 ]
  %52 = getelementptr inbounds i8, i8* %51, i64 1
  %53 = add i64 %50, 1
  %54 = load i8, i8* %52, align 1, !tbaa !2
  %55 = icmp eq i8 %54, 0
  br i1 %55, label %56, label %49

56:                                               ; preds = %49, %46, %41
  %57 = phi i64 [ 0, %41 ], [ 0, %46 ], [ %53, %49 ]
  store i64 %57, i64* %44, align 8, !tbaa !19
  %58 = getelementptr inbounds [12 x %struct.kernel_iovec], [12 x %struct.kernel_iovec]* %9, i64 0, i64 5, i32 0
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0), i8** %58, align 16, !tbaa !17
  %59 = getelementptr inbounds [12 x %struct.kernel_iovec], [12 x %struct.kernel_iovec]* %9, i64 0, i64 5, i32 1
  %60 = icmp ne i8* %2, null
  %61 = zext i1 %60 to i64
  store i64 %61, i64* %59, align 8, !tbaa !19
  %62 = getelementptr inbounds [12 x %struct.kernel_iovec], [12 x %struct.kernel_iovec]* %9, i64 0, i64 6, i32 0
  store i8* null, i8** %62, align 16, !tbaa !17
  %63 = getelementptr inbounds [12 x %struct.kernel_iovec], [12 x %struct.kernel_iovec]* %9, i64 0, i64 6, i32 1
  store i64 0, i64* %63, align 8, !tbaa !19
  %64 = getelementptr inbounds [12 x %struct.kernel_iovec], [12 x %struct.kernel_iovec]* %9, i64 0, i64 7, i32 0
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0), i8** %64, align 16, !tbaa !17
  %65 = getelementptr inbounds [12 x %struct.kernel_iovec], [12 x %struct.kernel_iovec]* %9, i64 0, i64 7, i32 1
  %66 = icmp ne i8* %4, null
  %67 = and i1 %60, %66
  %68 = select i1 %67, i64 2, i64 0
  store i64 %68, i64* %65, align 8, !tbaa !19
  %69 = getelementptr inbounds [12 x %struct.kernel_iovec], [12 x %struct.kernel_iovec]* %9, i64 0, i64 8, i32 0
  store i8* %4, i8** %69, align 16, !tbaa !17
  %70 = getelementptr inbounds [12 x %struct.kernel_iovec], [12 x %struct.kernel_iovec]* %9, i64 0, i64 8, i32 1
  %71 = icmp eq i8* %4, null
  br i1 %71, label %82, label %72

72:                                               ; preds = %56
  %73 = load i8, i8* %4, align 1, !tbaa !2
  %74 = icmp eq i8 %73, 0
  br i1 %74, label %82, label %75

75:                                               ; preds = %72, %75
  %76 = phi i64 [ %79, %75 ], [ 0, %72 ]
  %77 = phi i8* [ %78, %75 ], [ %4, %72 ]
  %78 = getelementptr inbounds i8, i8* %77, i64 1
  %79 = add i64 %76, 1
  %80 = load i8, i8* %78, align 1, !tbaa !2
  %81 = icmp eq i8 %80, 0
  br i1 %81, label %82, label %75

82:                                               ; preds = %75, %72, %56
  %83 = phi i64 [ 0, %56 ], [ 0, %72 ], [ %79, %75 ]
  store i64 %83, i64* %70, align 8, !tbaa !19
  %84 = getelementptr inbounds [12 x %struct.kernel_iovec], [12 x %struct.kernel_iovec]* %9, i64 0, i64 9, i32 0
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0), i8** %84, align 16, !tbaa !17
  %85 = getelementptr inbounds [12 x %struct.kernel_iovec], [12 x %struct.kernel_iovec]* %9, i64 0, i64 9, i32 1
  %86 = zext i1 %66 to i64
  store i64 %86, i64* %85, align 8, !tbaa !19
  %87 = getelementptr inbounds [12 x %struct.kernel_iovec], [12 x %struct.kernel_iovec]* %9, i64 0, i64 10, i32 0
  store i8* null, i8** %87, align 16, !tbaa !17
  %88 = getelementptr inbounds [12 x %struct.kernel_iovec], [12 x %struct.kernel_iovec]* %9, i64 0, i64 10, i32 1
  store i64 0, i64* %88, align 8, !tbaa !19
  %89 = getelementptr inbounds [12 x %struct.kernel_iovec], [12 x %struct.kernel_iovec]* %9, i64 0, i64 11, i32 0
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i64 0, i64 0), i8** %89, align 16, !tbaa !17
  %90 = getelementptr inbounds [12 x %struct.kernel_iovec], [12 x %struct.kernel_iovec]* %9, i64 0, i64 11, i32 1
  store i64 1, i64* %90, align 8, !tbaa !19
  br i1 %60, label %91, label %115

91:                                               ; preds = %82
  %92 = getelementptr inbounds [32 x i8], [32 x i8]* %7, i64 0, i64 32
  %93 = icmp slt i32 %3, 0
  %94 = sub nsw i32 0, %3
  %95 = select i1 %93, i32 %94, i32 %3
  br label %96

96:                                               ; preds = %96, %91
  %97 = phi i8* [ %92, %91 ], [ %99, %96 ]
  %98 = phi i32 [ %95, %91 ], [ %104, %96 ]
  %99 = getelementptr inbounds i8, i8* %97, i64 -1
  %100 = srem i32 %98, 10
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds [11 x i8], [11 x i8]* @.str.9, i64 0, i64 %101
  %103 = load i8, i8* %102, align 1, !tbaa !2
  store i8 %103, i8* %99, align 1, !tbaa !2
  %104 = sdiv i32 %98, 10
  %105 = add i32 %98, 9
  %106 = icmp ugt i32 %105, 18
  br i1 %106, label %96, label %107

107:                                              ; preds = %96
  br i1 %93, label %108, label %110

108:                                              ; preds = %107
  %109 = getelementptr inbounds i8, i8* %97, i64 -2
  store i8 45, i8* %109, align 1, !tbaa !2
  br label %110

110:                                              ; preds = %107, %108
  %111 = phi i8* [ %109, %108 ], [ %99, %107 ]
  store i8* %111, i8** %62, align 16, !tbaa !17
  %112 = ptrtoint i8* %92 to i64
  %113 = ptrtoint i8* %111 to i64
  %114 = sub i64 %112, %113
  store i64 %114, i64* %63, align 8, !tbaa !19
  br label %115

115:                                              ; preds = %110, %82
  br i1 %66, label %116, label %140

116:                                              ; preds = %115
  %117 = getelementptr inbounds [32 x i8], [32 x i8]* %8, i64 0, i64 32
  %118 = icmp slt i32 %5, 0
  %119 = sub nsw i32 0, %5
  %120 = select i1 %118, i32 %119, i32 %5
  br label %121

121:                                              ; preds = %121, %116
  %122 = phi i8* [ %117, %116 ], [ %124, %121 ]
  %123 = phi i32 [ %120, %116 ], [ %129, %121 ]
  %124 = getelementptr inbounds i8, i8* %122, i64 -1
  %125 = srem i32 %123, 10
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds [11 x i8], [11 x i8]* @.str.9, i64 0, i64 %126
  %128 = load i8, i8* %127, align 1, !tbaa !2
  store i8 %128, i8* %124, align 1, !tbaa !2
  %129 = sdiv i32 %123, 10
  %130 = add i32 %123, 9
  %131 = icmp ugt i32 %130, 18
  br i1 %131, label %121, label %132

132:                                              ; preds = %121
  br i1 %118, label %133, label %135

133:                                              ; preds = %132
  %134 = getelementptr inbounds i8, i8* %122, i64 -2
  store i8 45, i8* %134, align 1, !tbaa !2
  br label %135

135:                                              ; preds = %132, %133
  %136 = phi i8* [ %134, %133 ], [ %124, %132 ]
  store i8* %136, i8** %87, align 16, !tbaa !17
  %137 = ptrtoint i8* %117 to i64
  %138 = ptrtoint i8* %136 to i64
  %139 = sub i64 %137, %138
  store i64 %139, i64* %88, align 8, !tbaa !19
  br label %140

140:                                              ; preds = %135, %115
  %141 = ptrtoint [12 x %struct.kernel_iovec]* %9 to i64
  %142 = call i64 asm sideeffect "syscall\0A", "={ax},0,{di},{si},{dx},~{r11},~{rcx},~{memory},~{dirflag},~{fpsr},~{flags}"(i64 20, i64 2, i64 %141, i64 12) #4, !srcloc !20
  %143 = icmp ugt i64 %142, -4096
  br i1 %143, label %144, label %147

144:                                              ; preds = %140
  %145 = trunc i64 %142 to i32
  %146 = sub nsw i32 0, %145
  store i32 %146, i32* @my_errno, align 4, !tbaa !15
  br label %147

147:                                              ; preds = %140, %144
  %148 = call i64 asm sideeffect "syscall\0A", "={ax},0,{di},~{r11},~{rcx},~{memory},~{dirflag},~{fpsr},~{flags}"(i64 231, i64 2) #4, !srcloc !21
  %149 = icmp ugt i64 %148, -4096
  br i1 %149, label %150, label %153

150:                                              ; preds = %147
  %151 = trunc i64 %148 to i32
  %152 = sub nsw i32 0, %151
  store i32 %152, i32* @my_errno, align 4, !tbaa !15
  br label %153

153:                                              ; preds = %147, %150
  br label %154

154:                                              ; preds = %153, %154
  store volatile i32 0, i32* null, align 536870912, !tbaa !15
  br label %154
}

; Function Attrs: nounwind uwtable
define internal fastcc i64 @load_elf_file(i8*, i64, i64*, i64*, i64*, i8**) unnamed_addr #0 {
  %7 = alloca %struct.Elf64_Ehdr, align 8
  %8 = alloca [16 x %struct.Elf64_Phdr], align 16
  %9 = ptrtoint i8* %0 to i64
  %10 = tail call i64 asm sideeffect "syscall\0A", "={ax},0,{di},{si},{dx},~{r11},~{rcx},~{memory},~{dirflag},~{fpsr},~{flags}"(i64 2, i64 %9, i64 0, i64 0) #4, !srcloc !22
  %11 = icmp ugt i64 %10, -4096
  %12 = trunc i64 %10 to i32
  br i1 %11, label %13, label %15

13:                                               ; preds = %6
  %14 = sub nsw i32 0, %12
  store i32 %14, i32* @my_errno, align 4, !tbaa !15
  br label %19

15:                                               ; preds = %6
  %16 = icmp slt i32 %12, 0
  br i1 %16, label %17, label %21

17:                                               ; preds = %15
  %18 = load i32, i32* @my_errno, align 4, !tbaa !15
  br label %19

19:                                               ; preds = %17, %13
  %20 = phi i32 [ %18, %17 ], [ %14, %13 ]
  tail call fastcc void @fail(i8* %0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.32, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.15, i64 0, i64 0), i32 %20, i8* null, i32 0) #5
  unreachable

21:                                               ; preds = %15
  %22 = getelementptr inbounds %struct.Elf64_Ehdr, %struct.Elf64_Ehdr* %7, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %22) #4
  %23 = shl i64 %10, 32
  %24 = ashr exact i64 %23, 32
  %25 = ptrtoint %struct.Elf64_Ehdr* %7 to i64
  %26 = call i64 asm sideeffect "movq $5,%r10;syscall\0A", "={ax},0,{di},{si},{dx},r,~{r10},~{r11},~{rcx},~{memory},~{dirflag},~{fpsr},~{flags}"(i64 17, i64 %24, i64 %25, i64 64, i64 0) #4, !srcloc !23
  %27 = icmp ugt i64 %26, -4096
  br i1 %27, label %28, label %31

28:                                               ; preds = %21
  %29 = trunc i64 %26 to i32
  %30 = sub nsw i32 0, %29
  store i32 %30, i32* @my_errno, align 4, !tbaa !15
  br label %35

31:                                               ; preds = %21
  %32 = icmp slt i64 %26, 0
  br i1 %32, label %33, label %37

33:                                               ; preds = %31
  %34 = load i32, i32* @my_errno, align 4, !tbaa !15
  br label %35

35:                                               ; preds = %33, %28
  %36 = phi i32 [ %34, %33 ], [ %30, %28 ]
  call fastcc void @fail(i8* %0, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.17, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.15, i64 0, i64 0), i32 %36, i8* null, i32 0) #5
  unreachable

37:                                               ; preds = %31
  %38 = icmp eq i64 %26, 64
  br i1 %38, label %41, label %39

39:                                               ; preds = %37
  %40 = trunc i64 %26 to i32
  call fastcc void @fail(i8* %0, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.17, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.33, i64 0, i64 0), i32 %40, i8* null, i32 0) #5
  unreachable

41:                                               ; preds = %37
  %42 = load i8, i8* %22, align 8, !tbaa !2
  %43 = icmp eq i8 %42, 127
  br i1 %43, label %44, label %68

44:                                               ; preds = %41
  %45 = getelementptr inbounds %struct.Elf64_Ehdr, %struct.Elf64_Ehdr* %7, i64 0, i32 0, i64 1
  %46 = load i8, i8* %45, align 1, !tbaa !2
  %47 = icmp eq i8 %46, 69
  br i1 %47, label %48, label %68

48:                                               ; preds = %44
  %49 = getelementptr inbounds %struct.Elf64_Ehdr, %struct.Elf64_Ehdr* %7, i64 0, i32 0, i64 2
  %50 = load i8, i8* %49, align 2, !tbaa !2
  %51 = icmp eq i8 %50, 76
  br i1 %51, label %52, label %68

52:                                               ; preds = %48
  %53 = getelementptr inbounds %struct.Elf64_Ehdr, %struct.Elf64_Ehdr* %7, i64 0, i32 0, i64 3
  %54 = load i8, i8* %53, align 1, !tbaa !2
  %55 = icmp eq i8 %54, 70
  br i1 %55, label %56, label %68

56:                                               ; preds = %52
  %57 = getelementptr inbounds %struct.Elf64_Ehdr, %struct.Elf64_Ehdr* %7, i64 0, i32 3
  %58 = load i32, i32* %57, align 4, !tbaa !24
  %59 = icmp eq i32 %58, 1
  br i1 %59, label %60, label %68

60:                                               ; preds = %56
  %61 = getelementptr inbounds %struct.Elf64_Ehdr, %struct.Elf64_Ehdr* %7, i64 0, i32 8
  %62 = load i16, i16* %61, align 4, !tbaa !27
  %63 = icmp eq i16 %62, 64
  br i1 %63, label %64, label %68

64:                                               ; preds = %60
  %65 = getelementptr inbounds %struct.Elf64_Ehdr, %struct.Elf64_Ehdr* %7, i64 0, i32 9
  %66 = load i16, i16* %65, align 2, !tbaa !28
  %67 = icmp eq i16 %66, 56
  br i1 %67, label %69, label %68

68:                                               ; preds = %64, %60, %56, %52, %48, %44, %41
  call fastcc void @fail(i8* %0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.18, i64 0, i64 0), i8* null, i32 0, i8* null, i32 0) #3
  unreachable

69:                                               ; preds = %64
  %70 = getelementptr inbounds %struct.Elf64_Ehdr, %struct.Elf64_Ehdr* %7, i64 0, i32 2
  %71 = load i16, i16* %70, align 2, !tbaa !29
  %72 = icmp eq i16 %71, 62
  br i1 %72, label %75, label %73

73:                                               ; preds = %69
  %74 = zext i16 %71 to i32
  call fastcc void @fail(i8* %0, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.20, i64 0, i64 0), i32 %74, i8* null, i32 0) #3
  unreachable

75:                                               ; preds = %69
  %76 = bitcast [16 x %struct.Elf64_Phdr]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 896, i8* nonnull %76) #4
  %77 = getelementptr inbounds %struct.Elf64_Ehdr, %struct.Elf64_Ehdr* %7, i64 0, i32 10
  %78 = load i16, i16* %77, align 8, !tbaa !30
  %79 = zext i16 %78 to i64
  %80 = add i16 %78, -1
  %81 = icmp ugt i16 %80, 15
  br i1 %81, label %82, label %84

82:                                               ; preds = %75
  %83 = zext i16 %78 to i32
  call fastcc void @fail(i8* %0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.21, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.22, i64 0, i64 0), i32 %83, i8* null, i32 0) #3
  unreachable

84:                                               ; preds = %75
  %85 = getelementptr inbounds %struct.Elf64_Ehdr, %struct.Elf64_Ehdr* %7, i64 0, i32 1
  %86 = load i16, i16* %85, align 8, !tbaa !31
  %87 = icmp eq i16 %86, 3
  br i1 %87, label %90, label %88

88:                                               ; preds = %84
  %89 = zext i16 %86 to i32
  call fastcc void @fail(i8* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.23, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.24, i64 0, i64 0), i32 %89, i8* null, i32 0) #3
  unreachable

90:                                               ; preds = %84
  %91 = mul nuw nsw i64 %79, 56
  %92 = getelementptr inbounds %struct.Elf64_Ehdr, %struct.Elf64_Ehdr* %7, i64 0, i32 5
  %93 = load i64, i64* %92, align 8, !tbaa !32
  %94 = ptrtoint [16 x %struct.Elf64_Phdr]* %8 to i64
  %95 = call i64 asm sideeffect "movq $5,%r10;syscall\0A", "={ax},0,{di},{si},{dx},r,~{r10},~{r11},~{rcx},~{memory},~{dirflag},~{fpsr},~{flags}"(i64 17, i64 %24, i64 %94, i64 %91, i64 %93) #4, !srcloc !23
  %96 = icmp ugt i64 %95, -4096
  br i1 %96, label %97, label %100

97:                                               ; preds = %90
  %98 = trunc i64 %95 to i32
  %99 = sub nsw i32 0, %98
  store i32 %99, i32* @my_errno, align 4, !tbaa !15
  br label %104

100:                                              ; preds = %90
  %101 = icmp slt i64 %95, 0
  br i1 %101, label %102, label %106

102:                                              ; preds = %100
  %103 = load i32, i32* @my_errno, align 4, !tbaa !15
  br label %104

104:                                              ; preds = %102, %97
  %105 = phi i32 [ %103, %102 ], [ %99, %97 ]
  call fastcc void @fail(i8* %0, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.25, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.15, i64 0, i64 0), i32 %105, i8* null, i32 0) #5
  unreachable

106:                                              ; preds = %100
  %107 = icmp eq i64 %95, %91
  br i1 %107, label %108, label %112

108:                                              ; preds = %106
  %109 = load i16, i16* %77, align 8, !tbaa !30
  %110 = zext i16 %109 to i64
  %111 = icmp eq i16 %109, 0
  br i1 %111, label %122, label %114

112:                                              ; preds = %106
  %113 = trunc i64 %95 to i32
  call fastcc void @fail(i8* %0, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.25, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.33, i64 0, i64 0), i32 %113, i8* null, i32 0) #5
  unreachable

114:                                              ; preds = %108, %119
  %115 = phi i64 [ %120, %119 ], [ 0, %108 ]
  %116 = getelementptr inbounds [16 x %struct.Elf64_Phdr], [16 x %struct.Elf64_Phdr]* %8, i64 0, i64 %115, i32 0
  %117 = load i32, i32* %116, align 8, !tbaa !33
  %118 = icmp eq i32 %117, 1
  br i1 %118, label %122, label %119

119:                                              ; preds = %114
  %120 = add nuw nsw i64 %115, 1
  %121 = icmp ult i64 %120, %110
  br i1 %121, label %114, label %122

122:                                              ; preds = %114, %119, %108
  %123 = phi i64 [ 0, %108 ], [ %115, %114 ], [ %120, %119 ]
  %124 = icmp eq i64 %123, %110
  br i1 %124, label %125, label %126

125:                                              ; preds = %122
  call fastcc void @fail(i8* %0, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.26, i64 0, i64 0), i8* null, i32 0, i8* null, i32 0) #3
  unreachable

126:                                              ; preds = %122
  %127 = getelementptr inbounds [16 x %struct.Elf64_Phdr], [16 x %struct.Elf64_Phdr]* %8, i64 0, i64 %123
  %128 = add nsw i64 %110, -1
  %129 = getelementptr inbounds [16 x %struct.Elf64_Phdr], [16 x %struct.Elf64_Phdr]* %8, i64 0, i64 %128
  %130 = icmp sgt i64 %128, %123
  br i1 %130, label %131, label %139

131:                                              ; preds = %126, %136
  %132 = phi %struct.Elf64_Phdr* [ %137, %136 ], [ %129, %126 ]
  %133 = getelementptr inbounds %struct.Elf64_Phdr, %struct.Elf64_Phdr* %132, i64 0, i32 0
  %134 = load i32, i32* %133, align 8, !tbaa !33
  %135 = icmp eq i32 %134, 1
  br i1 %135, label %139, label %136

136:                                              ; preds = %131
  %137 = getelementptr inbounds %struct.Elf64_Phdr, %struct.Elf64_Phdr* %132, i64 -1
  %138 = icmp ugt %struct.Elf64_Phdr* %137, %127
  br i1 %138, label %131, label %139

139:                                              ; preds = %136, %131, %126
  %140 = phi %struct.Elf64_Phdr* [ %129, %126 ], [ %132, %131 ], [ %137, %136 ]
  %141 = getelementptr inbounds %struct.Elf64_Phdr, %struct.Elf64_Phdr* %140, i64 0, i32 3
  %142 = load i64, i64* %141, align 8, !tbaa !35
  %143 = getelementptr inbounds %struct.Elf64_Phdr, %struct.Elf64_Phdr* %140, i64 0, i32 6
  %144 = load i64, i64* %143, align 8, !tbaa !36
  %145 = add i64 %144, %142
  %146 = getelementptr inbounds [16 x %struct.Elf64_Phdr], [16 x %struct.Elf64_Phdr]* %8, i64 0, i64 %123, i32 3
  %147 = load i64, i64* %146, align 8, !tbaa !35
  %148 = sub i64 %145, %147
  %149 = mul nuw i64 %123, 56
  %150 = sdiv exact i64 %149, 56
  %151 = trunc i64 %150 to i32
  %152 = sub i64 0, %1
  %153 = and i64 %147, %152
  %154 = getelementptr inbounds [16 x %struct.Elf64_Phdr], [16 x %struct.Elf64_Phdr]* %8, i64 0, i64 %123, i32 1
  %155 = load i32, i32* %154, align 4, !tbaa !37
  %156 = lshr i32 %155, 2
  %157 = and i32 %156, 1
  %158 = and i32 %155, 2
  %159 = or i32 %157, %158
  %160 = shl i32 %155, 2
  %161 = and i32 %160, 4
  %162 = or i32 %159, %161
  %163 = getelementptr inbounds [16 x %struct.Elf64_Phdr], [16 x %struct.Elf64_Phdr]* %8, i64 0, i64 %123, i32 2
  %164 = load i64, i64* %163, align 8, !tbaa !38
  %165 = and i64 %164, %152
  %166 = zext i32 %162 to i64
  %167 = call i64 asm sideeffect "movq $5,%r10;movq $6,%r8;movq $7,%r9;syscall\0A", "={ax},0,{di},{si},{dx},r,r,r,~{r10},~{r8},~{r9},~{r11},~{rcx},~{memory},~{dirflag},~{fpsr},~{flags}"(i64 9, i64 %153, i64 %148, i64 %166, i64 2, i64 %24, i64 %165) #4, !srcloc !14
  %168 = icmp ugt i64 %167, -4096
  br i1 %168, label %169, label %172

169:                                              ; preds = %139
  %170 = trunc i64 %167 to i32
  %171 = sub nsw i32 0, %170
  store i32 %171, i32* @my_errno, align 4, !tbaa !15
  br label %177

172:                                              ; preds = %139
  %173 = inttoptr i64 %167 to i8*
  %174 = icmp eq i8* %173, inttoptr (i64 -1 to i8*)
  br i1 %174, label %175, label %179

175:                                              ; preds = %172
  %176 = load i32, i32* @my_errno, align 4, !tbaa !15
  br label %177

177:                                              ; preds = %175, %169
  %178 = phi i32 [ %176, %175 ], [ %171, %169 ]
  call fastcc void @fail(i8* %0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.34, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.27, i64 0, i64 0), i32 %151, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.15, i64 0, i64 0), i32 %178) #5
  unreachable

179:                                              ; preds = %172
  %180 = load i64, i64* %146, align 8, !tbaa !35
  %181 = and i64 %180, %152
  %182 = sub i64 %167, %181
  %183 = load i64, i64* %163, align 8, !tbaa !38
  %184 = load i64, i64* %92, align 8, !tbaa !32
  %185 = icmp ugt i64 %183, %184
  br i1 %185, label %194, label %186

186:                                              ; preds = %179
  %187 = getelementptr inbounds [16 x %struct.Elf64_Phdr], [16 x %struct.Elf64_Phdr]* %8, i64 0, i64 %123, i32 5
  %188 = load i64, i64* %187, align 8, !tbaa !39
  %189 = load i16, i16* %77, align 8, !tbaa !30
  %190 = zext i16 %189 to i64
  %191 = mul nuw nsw i64 %190, 56
  %192 = add i64 %191, %184
  %193 = icmp ult i64 %188, %192
  br i1 %193, label %194, label %195

194:                                              ; preds = %186, %179
  call fastcc void @fail(i8* %0, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.28, i64 0, i64 0), i8* null, i32 0, i8* null, i32 0) #3
  unreachable

195:                                              ; preds = %186
  call fastcc void @handle_bss(i8* %0, i32 %151, %struct.Elf64_Phdr* nonnull %127, i64 %182, i64 %1) #6
  %196 = getelementptr inbounds %struct.Elf64_Phdr, %struct.Elf64_Phdr* %127, i64 1
  %197 = icmp ugt %struct.Elf64_Phdr* %196, %140
  br i1 %197, label %280, label %198

198:                                              ; preds = %195
  %199 = load i64, i64* %146, align 8, !tbaa !35
  %200 = add i64 %199, %182
  %201 = getelementptr inbounds [16 x %struct.Elf64_Phdr], [16 x %struct.Elf64_Phdr]* %8, i64 0, i64 %123, i32 6
  %202 = load i64, i64* %201, align 8, !tbaa !36
  %203 = add i64 %200, %202
  %204 = add i64 %1, -1
  br label %205

205:                                              ; preds = %198, %276
  %206 = phi %struct.Elf64_Phdr* [ %196, %198 ], [ %278, %276 ]
  %207 = phi i64 [ %203, %198 ], [ %277, %276 ]
  %208 = phi %struct.Elf64_Phdr* [ %127, %198 ], [ %206, %276 ]
  %209 = getelementptr inbounds %struct.Elf64_Phdr, %struct.Elf64_Phdr* %206, i64 0, i32 0
  %210 = load i32, i32* %209, align 8, !tbaa !33
  %211 = icmp eq i32 %210, 1
  br i1 %211, label %212, label %276

212:                                              ; preds = %205
  %213 = add i64 %204, %207
  %214 = and i64 %213, %152
  %215 = getelementptr inbounds %struct.Elf64_Phdr, %struct.Elf64_Phdr* %208, i64 1, i32 3
  %216 = load i64, i64* %215, align 8, !tbaa !35
  %217 = add i64 %216, %182
  %218 = getelementptr inbounds %struct.Elf64_Phdr, %struct.Elf64_Phdr* %208, i64 1, i32 6
  %219 = load i64, i64* %218, align 8, !tbaa !36
  %220 = add i64 %217, %219
  %221 = and i64 %217, %152
  %222 = add i64 %204, %220
  %223 = and i64 %222, %152
  %224 = icmp ugt i64 %221, %214
  br i1 %224, label %225, label %243

225:                                              ; preds = %212
  %226 = sub i64 %221, %214
  %227 = call i64 asm sideeffect "syscall\0A", "={ax},0,{di},{si},{dx},~{r11},~{rcx},~{memory},~{dirflag},~{fpsr},~{flags}"(i64 10, i64 %214, i64 %226, i64 0) #4, !srcloc !40
  %228 = icmp ugt i64 %227, -4096
  %229 = trunc i64 %227 to i32
  br i1 %228, label %230, label %233

230:                                              ; preds = %225
  %231 = trunc i64 %227 to i32
  %232 = sub nsw i32 0, %231
  store i32 %232, i32* @my_errno, align 4, !tbaa !15
  br label %237

233:                                              ; preds = %225
  %234 = icmp slt i32 %229, 0
  br i1 %234, label %235, label %243

235:                                              ; preds = %233
  %236 = load i32, i32* @my_errno, align 4, !tbaa !15
  br label %237

237:                                              ; preds = %235, %230
  %238 = phi i32 [ %236, %235 ], [ %232, %230 ]
  %239 = ptrtoint %struct.Elf64_Phdr* %206 to i64
  %240 = sub i64 %239, %94
  %241 = sdiv exact i64 %240, 56
  %242 = trunc i64 %241 to i32
  call fastcc void @fail(i8* %0, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.36, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.27, i64 0, i64 0), i32 %242, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.15, i64 0, i64 0), i32 %238) #5
  unreachable

243:                                              ; preds = %233, %212
  %244 = ptrtoint %struct.Elf64_Phdr* %206 to i64
  %245 = sub i64 %244, %94
  %246 = sdiv exact i64 %245, 56
  %247 = trunc i64 %246 to i32
  %248 = sub i64 %223, %221
  %249 = getelementptr inbounds %struct.Elf64_Phdr, %struct.Elf64_Phdr* %208, i64 1, i32 1
  %250 = load i32, i32* %249, align 4, !tbaa !37
  %251 = lshr i32 %250, 2
  %252 = and i32 %251, 1
  %253 = and i32 %250, 2
  %254 = or i32 %252, %253
  %255 = shl i32 %250, 2
  %256 = and i32 %255, 4
  %257 = or i32 %254, %256
  %258 = getelementptr inbounds %struct.Elf64_Phdr, %struct.Elf64_Phdr* %208, i64 1, i32 2
  %259 = load i64, i64* %258, align 8, !tbaa !38
  %260 = and i64 %259, %152
  %261 = zext i32 %257 to i64
  %262 = call i64 asm sideeffect "movq $5,%r10;movq $6,%r8;movq $7,%r9;syscall\0A", "={ax},0,{di},{si},{dx},r,r,r,~{r10},~{r8},~{r9},~{r11},~{rcx},~{memory},~{dirflag},~{fpsr},~{flags}"(i64 9, i64 %221, i64 %248, i64 %261, i64 18, i64 %24, i64 %260) #4, !srcloc !14
  %263 = icmp ugt i64 %262, -4096
  br i1 %263, label %264, label %267

264:                                              ; preds = %243
  %265 = trunc i64 %262 to i32
  %266 = sub nsw i32 0, %265
  store i32 %266, i32* @my_errno, align 4, !tbaa !15
  br label %272

267:                                              ; preds = %243
  %268 = inttoptr i64 %262 to i8*
  %269 = icmp eq i8* %268, inttoptr (i64 -1 to i8*)
  br i1 %269, label %270, label %275

270:                                              ; preds = %267
  %271 = load i32, i32* @my_errno, align 4, !tbaa !15
  br label %272

272:                                              ; preds = %270, %264
  %273 = phi i32 [ %271, %270 ], [ %266, %264 ]
  %274 = trunc i64 %246 to i32
  call fastcc void @fail(i8* %0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.34, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.27, i64 0, i64 0), i32 %274, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.15, i64 0, i64 0), i32 %273) #5
  unreachable

275:                                              ; preds = %267
  call fastcc void @handle_bss(i8* %0, i32 %247, %struct.Elf64_Phdr* nonnull %206, i64 %182, i64 %1) #6
  br label %276

276:                                              ; preds = %205, %275
  %277 = phi i64 [ %220, %275 ], [ %207, %205 ]
  %278 = getelementptr inbounds %struct.Elf64_Phdr, %struct.Elf64_Phdr* %206, i64 1
  %279 = icmp ugt %struct.Elf64_Phdr* %278, %140
  br i1 %279, label %280, label %205

280:                                              ; preds = %276, %195
  %281 = icmp eq i8** %5, null
  br i1 %281, label %332, label %282

282:                                              ; preds = %280
  %283 = load i16, i16* %77, align 8, !tbaa !30
  %284 = icmp eq i16 %283, 0
  br i1 %284, label %332, label %285

285:                                              ; preds = %282
  %286 = zext i16 %283 to i64
  br label %287

287:                                              ; preds = %285, %329
  %288 = phi i64 [ 0, %285 ], [ %330, %329 ]
  %289 = getelementptr inbounds [16 x %struct.Elf64_Phdr], [16 x %struct.Elf64_Phdr]* %8, i64 0, i64 %288, i32 0
  %290 = load i32, i32* %289, align 8, !tbaa !33
  %291 = icmp eq i32 %290, 3
  br i1 %291, label %292, label %329

292:                                              ; preds = %287
  %293 = getelementptr inbounds [16 x %struct.Elf64_Phdr], [16 x %struct.Elf64_Phdr]* %8, i64 0, i64 %288, i32 2
  %294 = load i64, i64* %293, align 8, !tbaa !38
  %295 = load i64, i64* %163, align 8, !tbaa !38
  %296 = icmp ult i64 %294, %295
  %297 = getelementptr inbounds [16 x %struct.Elf64_Phdr], [16 x %struct.Elf64_Phdr]* %8, i64 0, i64 %288, i32 5
  %298 = load i64, i64* %297, align 8, !tbaa !39
  br i1 %296, label %307, label %299

299:                                              ; preds = %292
  %300 = load i64, i64* %187, align 8, !tbaa !39
  %301 = icmp ugt i64 %298, %300
  br i1 %301, label %307, label %302

302:                                              ; preds = %299
  %303 = getelementptr inbounds [16 x %struct.Elf64_Phdr], [16 x %struct.Elf64_Phdr]* %8, i64 0, i64 %288, i32 3
  %304 = load i64, i64* %303, align 8, !tbaa !35
  %305 = add i64 %304, %182
  %306 = inttoptr i64 %305 to i8*
  store i8* %306, i8** %5, align 8, !tbaa !5
  br label %332

307:                                              ; preds = %292, %299
  %308 = icmp ugt i64 %298, 4096
  br i1 %308, label %309, label %312

309:                                              ; preds = %307
  %310 = trunc i64 %288 to i32
  %311 = trunc i64 %298 to i32
  call fastcc void @fail(i8* %0, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.29, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.27, i64 0, i64 0), i32 %310, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.30, i64 0, i64 0), i32 %311) #3
  unreachable

312:                                              ; preds = %307
  %313 = call i64 asm sideeffect "movq $5,%r10;syscall\0A", "={ax},0,{di},{si},{dx},r,~{r10},~{r11},~{rcx},~{memory},~{dirflag},~{fpsr},~{flags}"(i64 17, i64 %24, i64 ptrtoint ([4097 x i8]* @load_elf_file.interp_buffer to i64), i64 %298, i64 %294) #4, !srcloc !23
  %314 = icmp ugt i64 %313, -4096
  br i1 %314, label %315, label %318

315:                                              ; preds = %312
  %316 = trunc i64 %313 to i32
  %317 = sub nsw i32 0, %316
  store i32 %317, i32* @my_errno, align 4, !tbaa !15
  br label %322

318:                                              ; preds = %312
  %319 = icmp slt i64 %313, 0
  br i1 %319, label %320, label %324

320:                                              ; preds = %318
  %321 = load i32, i32* @my_errno, align 4, !tbaa !15
  br label %322

322:                                              ; preds = %320, %315
  %323 = phi i32 [ %321, %320 ], [ %317, %315 ]
  call fastcc void @fail(i8* %0, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.31, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.15, i64 0, i64 0), i32 %323, i8* null, i32 0) #5
  unreachable

324:                                              ; preds = %318
  %325 = icmp eq i64 %313, %298
  br i1 %325, label %328, label %326

326:                                              ; preds = %324
  %327 = trunc i64 %313 to i32
  call fastcc void @fail(i8* %0, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.31, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.33, i64 0, i64 0), i32 %327, i8* null, i32 0) #5
  unreachable

328:                                              ; preds = %324
  store i8* getelementptr inbounds ([4097 x i8], [4097 x i8]* @load_elf_file.interp_buffer, i64 0, i64 0), i8** %5, align 8, !tbaa !5
  br label %332

329:                                              ; preds = %287
  %330 = add nuw nsw i64 %288, 1
  %331 = icmp ult i64 %330, %286
  br i1 %331, label %287, label %332

332:                                              ; preds = %329, %282, %280, %328, %302
  %333 = call i64 asm sideeffect "syscall\0A", "={ax},0,{di},~{r11},~{rcx},~{memory},~{dirflag},~{fpsr},~{flags}"(i64 3, i64 %24) #4, !srcloc !41
  %334 = icmp ugt i64 %333, -4096
  br i1 %334, label %335, label %338

335:                                              ; preds = %332
  %336 = trunc i64 %333 to i32
  %337 = sub nsw i32 0, %336
  store i32 %337, i32* @my_errno, align 4, !tbaa !15
  br label %338

338:                                              ; preds = %332, %335
  %339 = icmp eq i64* %2, null
  br i1 %339, label %341, label %340

340:                                              ; preds = %338
  store i64 %182, i64* %2, align 8, !tbaa !42
  br label %341

341:                                              ; preds = %338, %340
  %342 = icmp eq i64* %3, null
  br i1 %342, label %350, label %343

343:                                              ; preds = %341
  %344 = load i64, i64* %92, align 8, !tbaa !32
  %345 = load i64, i64* %163, align 8, !tbaa !38
  %346 = load i64, i64* %146, align 8, !tbaa !35
  %347 = add i64 %344, %182
  %348 = sub i64 %347, %345
  %349 = add i64 %348, %346
  store i64 %349, i64* %3, align 8, !tbaa !42
  br label %350

350:                                              ; preds = %341, %343
  %351 = icmp eq i64* %4, null
  br i1 %351, label %355, label %352

352:                                              ; preds = %350
  %353 = load i16, i16* %77, align 8, !tbaa !30
  %354 = zext i16 %353 to i64
  store i64 %354, i64* %4, align 8, !tbaa !42
  br label %355

355:                                              ; preds = %350, %352
  %356 = getelementptr inbounds %struct.Elf64_Ehdr, %struct.Elf64_Ehdr* %7, i64 0, i32 4
  %357 = load i64, i64* %356, align 8, !tbaa !43
  %358 = add i64 %357, %182
  call void @llvm.lifetime.end.p0i8(i64 896, i8* nonnull %76) #4
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %22) #4
  ret i64 %358
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind uwtable
define internal fastcc void @handle_bss(i8*, i32, %struct.Elf64_Phdr* nocapture readonly, i64, i64) unnamed_addr #0 {
  %6 = getelementptr inbounds %struct.Elf64_Phdr, %struct.Elf64_Phdr* %2, i64 0, i32 6
  %7 = load i64, i64* %6, align 8, !tbaa !36
  %8 = getelementptr inbounds %struct.Elf64_Phdr, %struct.Elf64_Phdr* %2, i64 0, i32 5
  %9 = load i64, i64* %8, align 8, !tbaa !39
  %10 = icmp ugt i64 %7, %9
  br i1 %10, label %11, label %141

11:                                               ; preds = %5
  %12 = getelementptr inbounds %struct.Elf64_Phdr, %struct.Elf64_Phdr* %2, i64 0, i32 3
  %13 = load i64, i64* %12, align 8, !tbaa !35
  %14 = add i64 %13, %3
  %15 = add i64 %14, %9
  %16 = add i64 %4, -1
  %17 = add i64 %16, %15
  %18 = sub i64 0, %4
  %19 = and i64 %17, %18
  %20 = add i64 %16, %7
  %21 = add i64 %20, %14
  %22 = and i64 %21, %18
  %23 = icmp ugt i64 %22, %19
  br i1 %23, label %24, label %48

24:                                               ; preds = %11
  %25 = sub i64 %22, %19
  %26 = getelementptr inbounds %struct.Elf64_Phdr, %struct.Elf64_Phdr* %2, i64 0, i32 1
  %27 = load i32, i32* %26, align 4, !tbaa !37
  %28 = lshr i32 %27, 2
  %29 = and i32 %28, 1
  %30 = and i32 %27, 2
  %31 = or i32 %29, %30
  %32 = shl i32 %27, 2
  %33 = and i32 %32, 4
  %34 = or i32 %31, %33
  %35 = zext i32 %34 to i64
  %36 = tail call i64 asm sideeffect "movq $5,%r10;movq $6,%r8;movq $7,%r9;syscall\0A", "={ax},0,{di},{si},{dx},r,r,r,~{r10},~{r8},~{r9},~{r11},~{rcx},~{memory},~{dirflag},~{fpsr},~{flags}"(i64 9, i64 %19, i64 %25, i64 %35, i64 50, i64 -1, i64 0) #4, !srcloc !14
  %37 = icmp ugt i64 %36, -4096
  br i1 %37, label %38, label %41

38:                                               ; preds = %24
  %39 = trunc i64 %36 to i32
  %40 = sub nsw i32 0, %39
  store i32 %40, i32* @my_errno, align 4, !tbaa !15
  br label %46

41:                                               ; preds = %24
  %42 = inttoptr i64 %36 to i8*
  %43 = icmp eq i8* %42, inttoptr (i64 -1 to i8*)
  br i1 %43, label %44, label %48

44:                                               ; preds = %41
  %45 = load i32, i32* @my_errno, align 4, !tbaa !15
  br label %46

46:                                               ; preds = %44, %38
  %47 = phi i32 [ %45, %44 ], [ %40, %38 ]
  tail call fastcc void @fail(i8* %0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.34, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.35, i64 0, i64 0), i32 %1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.15, i64 0, i64 0), i32 %47) #5
  unreachable

48:                                               ; preds = %41, %11
  %49 = icmp ugt i64 %19, %15
  br i1 %49, label %50, label %141

50:                                               ; preds = %48
  %51 = getelementptr inbounds %struct.Elf64_Phdr, %struct.Elf64_Phdr* %2, i64 0, i32 1
  %52 = load i32, i32* %51, align 4, !tbaa !37
  %53 = and i32 %52, 2
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %141, label %55

55:                                               ; preds = %50
  %56 = sub i64 %19, %15
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %141, label %58

58:                                               ; preds = %55
  %59 = inttoptr i64 %15 to i8*
  %60 = icmp ult i64 %56, 32
  br i1 %60, label %132, label %61

61:                                               ; preds = %58
  %62 = and i64 %56, -32
  %63 = getelementptr i8, i8* %59, i64 %62
  %64 = sub i64 %56, %62
  %65 = add i64 %62, -32
  %66 = lshr exact i64 %65, 5
  %67 = add nuw nsw i64 %66, 1
  %68 = and i64 %67, 7
  %69 = icmp ult i64 %65, 224
  br i1 %69, label %117, label %70

70:                                               ; preds = %61
  %71 = sub nsw i64 %67, %68
  br label %72

72:                                               ; preds = %72, %70
  %73 = phi i64 [ 0, %70 ], [ %114, %72 ]
  %74 = phi i64 [ %71, %70 ], [ %115, %72 ]
  %75 = getelementptr i8, i8* %59, i64 %73
  %76 = bitcast i8* %75 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %76, align 1, !tbaa !2
  %77 = getelementptr i8, i8* %75, i64 16
  %78 = bitcast i8* %77 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %78, align 1, !tbaa !2
  %79 = or i64 %73, 32
  %80 = getelementptr i8, i8* %59, i64 %79
  %81 = bitcast i8* %80 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %81, align 1, !tbaa !2
  %82 = getelementptr i8, i8* %80, i64 16
  %83 = bitcast i8* %82 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %83, align 1, !tbaa !2
  %84 = or i64 %73, 64
  %85 = getelementptr i8, i8* %59, i64 %84
  %86 = bitcast i8* %85 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %86, align 1, !tbaa !2
  %87 = getelementptr i8, i8* %85, i64 16
  %88 = bitcast i8* %87 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %88, align 1, !tbaa !2
  %89 = or i64 %73, 96
  %90 = getelementptr i8, i8* %59, i64 %89
  %91 = bitcast i8* %90 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %91, align 1, !tbaa !2
  %92 = getelementptr i8, i8* %90, i64 16
  %93 = bitcast i8* %92 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %93, align 1, !tbaa !2
  %94 = or i64 %73, 128
  %95 = getelementptr i8, i8* %59, i64 %94
  %96 = bitcast i8* %95 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %96, align 1, !tbaa !2
  %97 = getelementptr i8, i8* %95, i64 16
  %98 = bitcast i8* %97 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %98, align 1, !tbaa !2
  %99 = or i64 %73, 160
  %100 = getelementptr i8, i8* %59, i64 %99
  %101 = bitcast i8* %100 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %101, align 1, !tbaa !2
  %102 = getelementptr i8, i8* %100, i64 16
  %103 = bitcast i8* %102 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %103, align 1, !tbaa !2
  %104 = or i64 %73, 192
  %105 = getelementptr i8, i8* %59, i64 %104
  %106 = bitcast i8* %105 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %106, align 1, !tbaa !2
  %107 = getelementptr i8, i8* %105, i64 16
  %108 = bitcast i8* %107 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %108, align 1, !tbaa !2
  %109 = or i64 %73, 224
  %110 = getelementptr i8, i8* %59, i64 %109
  %111 = bitcast i8* %110 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %111, align 1, !tbaa !2
  %112 = getelementptr i8, i8* %110, i64 16
  %113 = bitcast i8* %112 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %113, align 1, !tbaa !2
  %114 = add i64 %73, 256
  %115 = add i64 %74, -8
  %116 = icmp eq i64 %115, 0
  br i1 %116, label %117, label %72, !llvm.loop !44

117:                                              ; preds = %72, %61
  %118 = phi i64 [ 0, %61 ], [ %114, %72 ]
  %119 = icmp eq i64 %68, 0
  br i1 %119, label %130, label %120

120:                                              ; preds = %117, %120
  %121 = phi i64 [ %127, %120 ], [ %118, %117 ]
  %122 = phi i64 [ %128, %120 ], [ %68, %117 ]
  %123 = getelementptr i8, i8* %59, i64 %121
  %124 = bitcast i8* %123 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %124, align 1, !tbaa !2
  %125 = getelementptr i8, i8* %123, i64 16
  %126 = bitcast i8* %125 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %126, align 1, !tbaa !2
  %127 = add i64 %121, 32
  %128 = add i64 %122, -1
  %129 = icmp eq i64 %128, 0
  br i1 %129, label %130, label %120, !llvm.loop !45

130:                                              ; preds = %120, %117
  %131 = icmp eq i64 %56, %62
  br i1 %131, label %141, label %132

132:                                              ; preds = %130, %58
  %133 = phi i8* [ %59, %58 ], [ %63, %130 ]
  %134 = phi i64 [ %56, %58 ], [ %64, %130 ]
  br label %135

135:                                              ; preds = %132, %135
  %136 = phi i8* [ %139, %135 ], [ %133, %132 ]
  %137 = phi i64 [ %138, %135 ], [ %134, %132 ]
  %138 = add i64 %137, -1
  %139 = getelementptr inbounds i8, i8* %136, i64 1
  store i8 0, i8* %136, align 1, !tbaa !2
  %140 = icmp eq i64 %138, 0
  br i1 %140, label %141, label %135, !llvm.loop !47

141:                                              ; preds = %135, %130, %55, %48, %50, %5
  ret void
}

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noreturn nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin noreturn }
attributes #4 = { nounwind }
attributes #5 = { nobuiltin noreturn nounwind }
attributes #6 = { nobuiltin }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 9.0.0 (tags/RELEASE_900/final)"}
!2 = !{!3, !3, i64 0}
!3 = !{!"omnipotent char", !4, i64 0}
!4 = !{!"Simple C/C++ TBAA"}
!5 = !{!6, !6, i64 0}
!6 = !{!"any pointer", !3, i64 0}
!7 = !{!8, !9, i64 0}
!8 = !{!"", !9, i64 0, !3, i64 8}
!9 = !{!"long", !3, i64 0}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.isvectorized", i32 1}
!12 = distinct !{!12, !13, !11}
!13 = !{!"llvm.loop.unroll.runtime.disable"}
!14 = !{i32 -2146206077}
!15 = !{!16, !16, i64 0}
!16 = !{!"int", !3, i64 0}
!17 = !{!18, !6, i64 0}
!18 = !{!"kernel_iovec", !6, i64 0, !9, i64 8}
!19 = !{!18, !9, i64 8}
!20 = !{i32 -2146245726}
!21 = !{i32 -2146395670}
!22 = !{i32 -2146318878}
!23 = !{i32 -2146199438}
!24 = !{!25, !16, i64 20}
!25 = !{!"", !3, i64 0, !26, i64 16, !26, i64 18, !16, i64 20, !9, i64 24, !9, i64 32, !9, i64 40, !16, i64 48, !26, i64 52, !26, i64 54, !26, i64 56, !26, i64 58, !26, i64 60, !26, i64 62}
!26 = !{!"short", !3, i64 0}
!27 = !{!25, !26, i64 52}
!28 = !{!25, !26, i64 54}
!29 = !{!25, !26, i64 18}
!30 = !{!25, !26, i64 56}
!31 = !{!25, !26, i64 16}
!32 = !{!25, !9, i64 32}
!33 = !{!34, !16, i64 0}
!34 = !{!"", !16, i64 0, !16, i64 4, !9, i64 8, !9, i64 16, !9, i64 24, !9, i64 32, !9, i64 40, !9, i64 48}
!35 = !{!34, !9, i64 16}
!36 = !{!34, !9, i64 40}
!37 = !{!34, !16, i64 4}
!38 = !{!34, !9, i64 8}
!39 = !{!34, !9, i64 32}
!40 = !{i32 -2146324012}
!41 = !{i32 -2146409934}
!42 = !{!9, !9, i64 0}
!43 = !{!25, !9, i64 24}
!44 = distinct !{!44, !11}
!45 = distinct !{!45, !46}
!46 = !{!"llvm.loop.unroll.disable"}
!47 = distinct !{!47, !13, !11}
