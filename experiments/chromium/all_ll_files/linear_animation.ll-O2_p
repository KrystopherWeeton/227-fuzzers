; ModuleID = '../../ui/gfx/animation/linear_animation.cc'
source_filename = "../../ui/gfx/animation/linear_animation.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.gfx::LinearAnimation" = type <{ %"class.gfx::Animation", %"class.base::TimeDelta", double, i8, [7 x i8] }>
%"class.gfx::Animation" = type { %"class.gfx::AnimationContainerElement", %"class.base::TimeDelta", i8, %"class.gfx::AnimationDelegate"*, %class.scoped_refptr, %"class.base::TimeTicks" }
%"class.gfx::AnimationContainerElement" = type { i32 (...)** }
%class.scoped_refptr = type { %"class.gfx::AnimationContainer"* }
%"class.gfx::AnimationContainer" = type { %"class.base::RefCounted", %"class.base::TimeTicks", %"class.base::internal::flat_tree", %"class.base::TimeDelta", i64, %"class.std::__1::unique_ptr", i8, %"class.gfx::AnimationContainerObserver"* }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.gfx::AnimationContainerElement"**, %"class.gfx::AnimationContainerElement"**, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.gfx::AnimationContainerElement"** }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.gfx::AnimationRunner"* }
%"class.gfx::AnimationRunner" = type { i32 (...)**, %"class.base::RepeatingCallback" }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.3 }
%class.scoped_refptr.3 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.gfx::AnimationContainerObserver" = type opaque
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::TimeDelta" = type { i64 }
%"class.gfx::AnimationDelegate" = type { i32 (...)** }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.base::CommandLine" = type { %"class.std::__1::vector.6", %"class.std::__1::map", i64 }
%"class.std::__1::vector.6" = type { %"class.std::__1::__vector_base.7" }
%"class.std::__1::__vector_base.7" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"class.std::__1::basic_string"* }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.18", %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.logging::CheckOpResult" = type { i8* }

$_ZNK4base9TimeDeltadvES0_ = comdat any

$_ZN3gfx15LinearAnimationD0Ev = comdat any

$_ZN3gfx15LinearAnimation14AnimateToStateEd = comdat any

$_ZNK4base9TimeDeltamiES0_ = comdat any

@_ZN3gfx15LinearAnimation17kDefaultFrameRateE = hidden local_unnamed_addr constant i32 60, align 4
@_ZTVN3gfx15LinearAnimationE = hidden unnamed_addr constant { [12 x i8*] } { [12 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.gfx::Animation"*, i64)* @_ZN3gfx9Animation12SetStartTimeEN4base9TimeTicksE to i8*), i8* bitcast (void (%"class.gfx::LinearAnimation"*, i64)* @_ZN3gfx15LinearAnimation4StepEN4base9TimeTicksE to i8*), i8* bitcast (i64 (%"class.gfx::Animation"*)* @_ZNK3gfx9Animation16GetTimerIntervalEv to i8*), i8* bitcast (void (%"class.gfx::Animation"*)* @_ZN3gfx9AnimationD2Ev to i8*), i8* bitcast (void (%"class.gfx::LinearAnimation"*)* @_ZN3gfx15LinearAnimationD0Ev to i8*), i8* bitcast (double (%"class.gfx::LinearAnimation"*)* @_ZNK3gfx15LinearAnimation15GetCurrentValueEv to i8*), i8* bitcast (void (%"class.gfx::LinearAnimation"*)* @_ZN3gfx15LinearAnimation16AnimationStartedEv to i8*), i8* bitcast (void (%"class.gfx::LinearAnimation"*)* @_ZN3gfx15LinearAnimation16AnimationStoppedEv to i8*), i8* bitcast (i1 (%"class.gfx::LinearAnimation"*)* @_ZN3gfx15LinearAnimation26ShouldSendCanceledFromStopEv to i8*), i8* bitcast (void (%"class.gfx::LinearAnimation"*, double)* @_ZN3gfx15LinearAnimation14AnimateToStateEd to i8*)] }, align 8
@_ZZN3gfx15LinearAnimation11SetDurationEN4base9TimeDeltaEE21duration_scale_factor = internal global double 0.000000e+00, align 8
@_ZGVZN3gfx15LinearAnimation11SetDurationEN4base9TimeDeltaEE21duration_scale_factor = internal global i64 0, align 8
@.str = private unnamed_addr constant [23 x i8] c"delta_ != other.delta_\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"../../base/time/time.h\00", align 1
@_ZN8switches23kAnimationDurationScaleE = external constant [0 x i8], align 1
@.str.4 = private unnamed_addr constant [27 x i8] c"!is_zero() || !a.is_zero()\00", align 1
@.str.5 = private unnamed_addr constant [25 x i8] c"!is_inf() || !a.is_inf()\00", align 1

@_ZN3gfx15LinearAnimationC1EPNS_17AnimationDelegateEi = hidden unnamed_addr alias void (%"class.gfx::LinearAnimation"*, %"class.gfx::AnimationDelegate"*, i32), void (%"class.gfx::LinearAnimation"*, %"class.gfx::AnimationDelegate"*, i32)* @_ZN3gfx15LinearAnimationC2EPNS_17AnimationDelegateEi
@_ZN3gfx15LinearAnimationC1EN4base9TimeDeltaEiPNS_17AnimationDelegateE = hidden unnamed_addr alias void (%"class.gfx::LinearAnimation"*, i64, i32, %"class.gfx::AnimationDelegate"*), void (%"class.gfx::LinearAnimation"*, i64, i32, %"class.gfx::AnimationDelegate"*)* @_ZN3gfx15LinearAnimationC2EN4base9TimeDeltaEiPNS_17AnimationDelegateE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx15LinearAnimationC2EPNS_17AnimationDelegateEi(%"class.gfx::LinearAnimation"*, %"class.gfx::AnimationDelegate"*, i32) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.gfx::LinearAnimation", %"class.gfx::LinearAnimation"* %0, i64 0, i32 0
  %5 = sdiv i32 1000000, %2
  %6 = icmp sgt i32 %5, 10000
  %7 = select i1 %6, i32 %5, i32 10000
  %8 = zext i32 %7 to i64
  tail call void @_ZN3gfx9AnimationC2EN4base9TimeDeltaE(%"class.gfx::Animation"* %4, i64 %8) #11
  %9 = getelementptr inbounds %"class.gfx::LinearAnimation", %"class.gfx::LinearAnimation"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [12 x i8*] }, { [12 x i8*] }* @_ZTVN3gfx15LinearAnimationE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  %10 = getelementptr inbounds %"class.gfx::LinearAnimation", %"class.gfx::LinearAnimation"* %0, i64 0, i32 1, i32 0
  %11 = getelementptr inbounds %"class.gfx::LinearAnimation", %"class.gfx::LinearAnimation"* %0, i64 0, i32 0, i32 3
  %12 = bitcast i64* %10 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 17, i1 false) #11
  store %"class.gfx::AnimationDelegate"* %1, %"class.gfx::AnimationDelegate"** %11, align 8
  tail call void @_ZN3gfx15LinearAnimation11SetDurationEN4base9TimeDeltaE(%"class.gfx::LinearAnimation"* %0, i64 0) #11
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx15LinearAnimationC2EN4base9TimeDeltaEiPNS_17AnimationDelegateE(%"class.gfx::LinearAnimation"*, i64, i32, %"class.gfx::AnimationDelegate"*) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.gfx::LinearAnimation", %"class.gfx::LinearAnimation"* %0, i64 0, i32 0
  %6 = sdiv i32 1000000, %2
  %7 = icmp sgt i32 %6, 10000
  %8 = select i1 %7, i32 %6, i32 10000
  %9 = zext i32 %8 to i64
  tail call void @_ZN3gfx9AnimationC2EN4base9TimeDeltaE(%"class.gfx::Animation"* %5, i64 %9) #11
  %10 = getelementptr inbounds %"class.gfx::LinearAnimation", %"class.gfx::LinearAnimation"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [12 x i8*] }, { [12 x i8*] }* @_ZTVN3gfx15LinearAnimationE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %10, align 8
  %11 = getelementptr inbounds %"class.gfx::LinearAnimation", %"class.gfx::LinearAnimation"* %0, i64 0, i32 1, i32 0
  %12 = getelementptr inbounds %"class.gfx::LinearAnimation", %"class.gfx::LinearAnimation"* %0, i64 0, i32 0, i32 3
  %13 = bitcast i64* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 17, i1 false)
  store %"class.gfx::AnimationDelegate"* %3, %"class.gfx::AnimationDelegate"** %12, align 8
  tail call void @_ZN3gfx15LinearAnimation11SetDurationEN4base9TimeDeltaE(%"class.gfx::LinearAnimation"* %0, i64 %1)
  ret void
}

declare void @_ZN3gfx9AnimationC2EN4base9TimeDeltaE(%"class.gfx::Animation"*, i64) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx15LinearAnimation11SetDurationEN4base9TimeDeltaE(%"class.gfx::LinearAnimation"*, i64) local_unnamed_addr #0 align 2 {
  %3 = alloca double, align 8
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = load atomic i8, i8* bitcast (i64* @_ZGVZN3gfx15LinearAnimation11SetDurationEN4base9TimeDeltaEE21duration_scale_factor to i8*) acquire, align 8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %37, !prof !2

7:                                                ; preds = %2
  %8 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN3gfx15LinearAnimation11SetDurationEN4base9TimeDeltaEE21duration_scale_factor) #11
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %37, label %10

10:                                               ; preds = %7
  %11 = tail call %"class.base::CommandLine"* @_ZN4base11CommandLine17ForCurrentProcessEv() #11
  %12 = bitcast double* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #11
  store double 0xFFFFFFFFFFFFFFFF, double* %3, align 8
  %13 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %13) #11
  %14 = tail call i64 @strlen(i8* nonnull getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN8switches23kAnimationDurationScaleE, i64 0, i64 0)) #11
  call void @_ZNK4base11CommandLine19GetSwitchValueASCIIENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.std::__1::basic_string"* nonnull sret %4, %"class.base::CommandLine"* %11, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN8switches23kAnimationDurationScaleE, i64 0, i64 0), i64 %14) #11
  %15 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %16 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %15, i64 0, i32 1, i32 0
  %17 = load i8, i8* %16, align 1
  %18 = icmp slt i8 %17, 0
  %19 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = select i1 %18, i8* %20, i8* %13
  %22 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = zext i8 %17 to i64
  %25 = select i1 %18, i64 %23, i64 %24
  %26 = call zeroext i1 @_ZN4base14StringToDoubleENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEPd(i8* %21, i64 %25, double* nonnull %3) #11
  %27 = load double, double* %3, align 8
  %28 = fcmp oge double %27, 0.000000e+00
  %29 = and i1 %26, %28
  %30 = select i1 %29, double %27, double 1.000000e+00
  %31 = load i8, i8* %16, align 1
  %32 = icmp slt i8 %31, 0
  br i1 %32, label %33, label %35

33:                                               ; preds = %10
  %34 = load i8*, i8** %19, align 8
  call void @_ZdlPv(i8* %34) #12
  br label %35

35:                                               ; preds = %10, %33
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %13) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #11
  store double %30, double* @_ZZN3gfx15LinearAnimation11SetDurationEN4base9TimeDeltaEE21duration_scale_factor, align 8
  %36 = call {}* @llvm.invariant.start.p0i8(i64 8, i8* bitcast (double* @_ZZN3gfx15LinearAnimation11SetDurationEN4base9TimeDeltaEE21duration_scale_factor to i8*))
  call void @__cxa_guard_release(i64* nonnull @_ZGVZN3gfx15LinearAnimation11SetDurationEN4base9TimeDeltaEE21duration_scale_factor) #11
  br label %37

37:                                               ; preds = %7, %35, %2
  %38 = load double, double* @_ZZN3gfx15LinearAnimation11SetDurationEN4base9TimeDeltaEE21duration_scale_factor, align 8
  %39 = sitofp i64 %1 to double
  %40 = fmul double %38, %39
  %41 = fcmp oge double %40, 0xC3E0000000000000
  %42 = fcmp ole double %40, 0x43DFFFFFFFFFFFFF
  %43 = and i1 %42, %41
  %44 = fptosi double %40 to i64
  br i1 %43, label %52, label %45

45:                                               ; preds = %37
  %46 = lshr i64 %1, 63
  %47 = trunc i64 %46 to i32
  %48 = fcmp olt double %38, 0.000000e+00
  %49 = zext i1 %48 to i32
  %50 = icmp eq i32 %47, %49
  %51 = select i1 %50, i64 9223372036854775807, i64 -9223372036854775808
  br label %52

52:                                               ; preds = %37, %45
  %53 = phi i64 [ %44, %37 ], [ %51, %45 ]
  %54 = getelementptr inbounds %"class.gfx::LinearAnimation", %"class.gfx::LinearAnimation"* %0, i64 0, i32 0, i32 1, i32 0
  %55 = load i64, i64* %54, align 8
  %56 = icmp slt i64 %53, %55
  %57 = getelementptr inbounds %"class.gfx::LinearAnimation", %"class.gfx::LinearAnimation"* %0, i64 0, i32 1, i32 0
  %58 = select i1 %56, i64 %55, i64 %53
  store i64 %58, i64* %57, align 8
  %59 = getelementptr inbounds %"class.gfx::LinearAnimation", %"class.gfx::LinearAnimation"* %0, i64 0, i32 0, i32 2
  %60 = load i8, i8* %59, align 8, !range !3
  %61 = icmp eq i8 %60, 0
  br i1 %61, label %71, label %62

62:                                               ; preds = %52
  %63 = getelementptr inbounds %"class.gfx::LinearAnimation", %"class.gfx::LinearAnimation"* %0, i64 0, i32 0
  %64 = getelementptr inbounds %"class.gfx::LinearAnimation", %"class.gfx::LinearAnimation"* %0, i64 0, i32 0, i32 4, i32 0
  %65 = load %"class.gfx::AnimationContainer"*, %"class.gfx::AnimationContainer"** %64, align 8
  %66 = getelementptr inbounds %"class.gfx::AnimationContainer", %"class.gfx::AnimationContainer"* %65, i64 0, i32 1, i32 0, i32 0
  %67 = load i64, i64* %66, align 8
  %68 = bitcast %"class.gfx::LinearAnimation"* %0 to void (%"class.gfx::Animation"*, i64)***
  %69 = load void (%"class.gfx::Animation"*, i64)**, void (%"class.gfx::Animation"*, i64)*** %68, align 8
  %70 = load void (%"class.gfx::Animation"*, i64)*, void (%"class.gfx::Animation"*, i64)** %69, align 8
  call void %70(%"class.gfx::Animation"* %63, i64 %67) #11
  br label %71

71:                                               ; preds = %52, %62
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @_ZNK3gfx15LinearAnimation15GetCurrentValueEv(%"class.gfx::LinearAnimation"* nocapture readonly) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.gfx::LinearAnimation", %"class.gfx::LinearAnimation"* %0, i64 0, i32 2
  %3 = load double, double* %2, align 8
  ret double %3
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx15LinearAnimation15SetCurrentValueEd(%"class.gfx::LinearAnimation"*, double) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.base::TimeDelta", align 8
  %4 = alloca i64, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = bitcast i64* %4 to double*
  store double %1, double* %7, align 8
  %8 = bitcast double* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8)
  store double 0.000000e+00, double* %5, align 8
  %9 = bitcast double* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9)
  store double 1.000000e+00, double* %6, align 8
  %10 = fcmp olt double %1, 0.000000e+00
  %11 = select i1 %10, double* %5, double* %7
  %12 = load double, double* %11, align 8
  %13 = fcmp ogt double %12, 1.000000e+00
  %14 = select i1 %13, double* %6, double* %11
  %15 = bitcast double* %14 to i64*
  %16 = load i64, i64* %15, align 8
  store i64 %16, i64* %4, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8)
  %17 = bitcast i64 %16 to double
  %18 = getelementptr inbounds %"class.gfx::LinearAnimation", %"class.gfx::LinearAnimation"* %0, i64 0, i32 2
  %19 = load double, double* %18, align 8
  %20 = fsub double %17, %19
  %21 = getelementptr inbounds %"class.gfx::LinearAnimation", %"class.gfx::LinearAnimation"* %0, i64 0, i32 1, i32 0
  %22 = load i64, i64* %21, align 8
  %23 = sitofp i64 %22 to double
  %24 = fmul double %20, %23
  %25 = fcmp oge double %24, 0xC3E0000000000000
  %26 = fcmp ole double %24, 0x43DFFFFFFFFFFFFF
  %27 = and i1 %26, %25
  %28 = fptosi double %24 to i64
  br i1 %27, label %36, label %29

29:                                               ; preds = %2
  %30 = lshr i64 %22, 63
  %31 = trunc i64 %30 to i32
  %32 = fcmp olt double %20, 0.000000e+00
  %33 = zext i1 %32 to i32
  %34 = icmp eq i32 %31, %33
  %35 = select i1 %34, i64 9223372036854775807, i64 -9223372036854775808
  br label %36

36:                                               ; preds = %2, %29
  %37 = phi i64 [ %28, %2 ], [ %35, %29 ]
  %38 = getelementptr inbounds %"class.gfx::LinearAnimation", %"class.gfx::LinearAnimation"* %0, i64 0, i32 0
  %39 = getelementptr inbounds %"class.gfx::LinearAnimation", %"class.gfx::LinearAnimation"* %0, i64 0, i32 0, i32 5, i32 0, i32 0
  %40 = load i64, i64* %39, align 8
  %41 = bitcast %"class.base::TimeDelta"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %41) #11
  %42 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %3, i64 0, i32 0
  store i64 %40, i64* %42, align 8
  %43 = call i64 @_ZNK4base9TimeDeltamiES0_(%"class.base::TimeDelta"* nonnull %3, i64 %37) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %41) #11
  %44 = bitcast %"class.gfx::LinearAnimation"* %0 to void (%"class.gfx::Animation"*, i64)***
  %45 = load void (%"class.gfx::Animation"*, i64)**, void (%"class.gfx::Animation"*, i64)*** %44, align 8
  %46 = load void (%"class.gfx::Animation"*, i64)*, void (%"class.gfx::Animation"*, i64)** %45, align 8
  call void %46(%"class.gfx::Animation"* %38, i64 %43) #11
  %47 = bitcast double* %18 to i64*
  store i64 %16, i64* %47, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx15LinearAnimation3EndEv(%"class.gfx::LinearAnimation"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.gfx::LinearAnimation", %"class.gfx::LinearAnimation"* %0, i64 0, i32 0, i32 2
  %3 = load i8, i8* %2, align 8, !range !3
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.gfx::LinearAnimation", %"class.gfx::LinearAnimation"* %0, i64 0, i32 0
  %7 = getelementptr inbounds %"class.gfx::LinearAnimation", %"class.gfx::LinearAnimation"* %0, i64 0, i32 3
  store i8 1, i8* %7, align 8
  tail call void @_ZN3gfx9Animation4StopEv(%"class.gfx::Animation"* %6) #11
  br label %8

8:                                                ; preds = %1, %5
  ret void
}

declare void @_ZN3gfx9Animation4StopEv(%"class.gfx::Animation"*) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare {}* @llvm.invariant.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx15LinearAnimation4StepEN4base9TimeTicksE(%"class.gfx::LinearAnimation"*, i64) unnamed_addr #0 align 2 {
  %3 = alloca double, align 8
  %4 = alloca %"class.base::TimeDelta", align 8
  %5 = alloca double, align 8
  %6 = bitcast double* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6)
  %7 = bitcast %"class.base::TimeDelta"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #11
  %8 = getelementptr inbounds %"class.gfx::LinearAnimation", %"class.gfx::LinearAnimation"* %0, i64 0, i32 0
  %9 = getelementptr inbounds %"class.gfx::LinearAnimation", %"class.gfx::LinearAnimation"* %0, i64 0, i32 0, i32 5, i32 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = sub nsw i64 %1, %10
  %12 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %4, i64 0, i32 0
  store i64 %11, i64* %12, align 8
  %13 = getelementptr inbounds %"class.gfx::LinearAnimation", %"class.gfx::LinearAnimation"* %0, i64 0, i32 1, i32 0
  %14 = load i64, i64* %13, align 8
  %15 = call double @_ZNK4base9TimeDeltadvES0_(%"class.base::TimeDelta"* nonnull %4, i64 %14)
  store double %15, double* %3, align 8
  %16 = bitcast double* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16)
  store double 1.000000e+00, double* %5, align 8
  %17 = fcmp ogt double %15, 1.000000e+00
  %18 = select i1 %17, double* %5, double* %3
  %19 = bitcast double* %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = getelementptr inbounds %"class.gfx::LinearAnimation", %"class.gfx::LinearAnimation"* %0, i64 0, i32 2
  %22 = bitcast double* %21 to i64*
  store i64 %20, i64* %22, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6)
  %23 = bitcast i64 %20 to double
  %24 = bitcast %"class.gfx::LinearAnimation"* %0 to void (%"class.gfx::LinearAnimation"*, double)***
  %25 = load void (%"class.gfx::LinearAnimation"*, double)**, void (%"class.gfx::LinearAnimation"*, double)*** %24, align 8
  %26 = getelementptr inbounds void (%"class.gfx::LinearAnimation"*, double)*, void (%"class.gfx::LinearAnimation"*, double)** %25, i64 9
  %27 = load void (%"class.gfx::LinearAnimation"*, double)*, void (%"class.gfx::LinearAnimation"*, double)** %26, align 8
  call void %27(%"class.gfx::LinearAnimation"* %0, double %23) #11
  %28 = getelementptr inbounds %"class.gfx::LinearAnimation", %"class.gfx::LinearAnimation"* %0, i64 0, i32 0, i32 3
  %29 = load %"class.gfx::AnimationDelegate"*, %"class.gfx::AnimationDelegate"** %28, align 8
  %30 = icmp eq %"class.gfx::AnimationDelegate"* %29, null
  br i1 %30, label %36, label %31

31:                                               ; preds = %2
  %32 = bitcast %"class.gfx::AnimationDelegate"* %29 to void (%"class.gfx::AnimationDelegate"*, %"class.gfx::Animation"*)***
  %33 = load void (%"class.gfx::AnimationDelegate"*, %"class.gfx::Animation"*)**, void (%"class.gfx::AnimationDelegate"*, %"class.gfx::Animation"*)*** %32, align 8
  %34 = getelementptr inbounds void (%"class.gfx::AnimationDelegate"*, %"class.gfx::Animation"*)*, void (%"class.gfx::AnimationDelegate"*, %"class.gfx::Animation"*)** %33, i64 3
  %35 = load void (%"class.gfx::AnimationDelegate"*, %"class.gfx::Animation"*)*, void (%"class.gfx::AnimationDelegate"*, %"class.gfx::Animation"*)** %34, align 8
  call void %35(%"class.gfx::AnimationDelegate"* nonnull %29, %"class.gfx::Animation"* %8) #11
  br label %36

36:                                               ; preds = %2, %31
  %37 = load double, double* %21, align 8
  %38 = fcmp oeq double %37, 1.000000e+00
  br i1 %38, label %39, label %40

39:                                               ; preds = %36
  call void @_ZN3gfx9Animation4StopEv(%"class.gfx::Animation"* %8) #11
  br label %40

40:                                               ; preds = %39, %36
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden double @_ZNK4base9TimeDeltadvES0_(%"class.base::TimeDelta"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %0, i64 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = or i64 %6, %1
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %9, label %13

9:                                                ; preds = %2
  %10 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #11
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 302, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.4, i64 0, i64 0)) #11
  %11 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #11
  %12 = load i64, i64* %5, align 8
  br label %13

13:                                               ; preds = %2, %9
  %14 = phi i64 [ %6, %2 ], [ %12, %9 ]
  %15 = add i64 %14, -9223372036854775807
  %16 = add i64 %1, -9223372036854775807
  %17 = or i64 %15, %16
  %18 = icmp ult i64 %17, 2
  br i1 %18, label %19, label %24

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #11
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 303, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.5, i64 0, i64 0)) #11
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #11
  %22 = load i64, i64* %5, align 8
  %23 = add i64 %22, -9223372036854775807
  br label %24

24:                                               ; preds = %13, %19
  %25 = phi i64 [ %15, %13 ], [ %23, %19 ]
  %26 = phi i64 [ %14, %13 ], [ %22, %19 ]
  %27 = icmp ult i64 %25, 2
  %28 = icmp slt i64 %26, 0
  %29 = select i1 %28, double 0xFFF0000000000000, double 0x7FF0000000000000
  %30 = sitofp i64 %26 to double
  %31 = select i1 %27, double %29, double %30
  %32 = icmp ult i64 %16, 2
  %33 = icmp slt i64 %1, 0
  %34 = select i1 %33, double 0xFFF0000000000000, double 0x7FF0000000000000
  %35 = sitofp i64 %1 to double
  %36 = select i1 %32, double %34, double %35
  %37 = fdiv double %31, %36
  ret double %37
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN3gfx15LinearAnimation16AnimationStartedEv(%"class.gfx::LinearAnimation"* nocapture) unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.gfx::LinearAnimation", %"class.gfx::LinearAnimation"* %0, i64 0, i32 2
  store double 0.000000e+00, double* %2, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx15LinearAnimation16AnimationStoppedEv(%"class.gfx::LinearAnimation"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.gfx::LinearAnimation", %"class.gfx::LinearAnimation"* %0, i64 0, i32 3
  %3 = load i8, i8* %2, align 8, !range !3
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %11, label %5

5:                                                ; preds = %1
  store i8 0, i8* %2, align 8
  %6 = getelementptr inbounds %"class.gfx::LinearAnimation", %"class.gfx::LinearAnimation"* %0, i64 0, i32 2
  store double 1.000000e+00, double* %6, align 8
  %7 = bitcast %"class.gfx::LinearAnimation"* %0 to void (%"class.gfx::LinearAnimation"*, double)***
  %8 = load void (%"class.gfx::LinearAnimation"*, double)**, void (%"class.gfx::LinearAnimation"*, double)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.gfx::LinearAnimation"*, double)*, void (%"class.gfx::LinearAnimation"*, double)** %8, i64 9
  %10 = load void (%"class.gfx::LinearAnimation"*, double)*, void (%"class.gfx::LinearAnimation"*, double)** %9, align 8
  tail call void %10(%"class.gfx::LinearAnimation"* %0, double 1.000000e+00) #11
  br label %11

11:                                               ; preds = %1, %5
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN3gfx15LinearAnimation26ShouldSendCanceledFromStopEv(%"class.gfx::LinearAnimation"* nocapture readonly) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.gfx::LinearAnimation", %"class.gfx::LinearAnimation"* %0, i64 0, i32 2
  %3 = load double, double* %2, align 8
  %4 = fcmp une double %3, 1.000000e+00
  ret i1 %4
}

declare void @_ZN3gfx9Animation12SetStartTimeEN4base9TimeTicksE(%"class.gfx::Animation"*, i64) unnamed_addr #2

declare i64 @_ZNK3gfx9Animation16GetTimerIntervalEv(%"class.gfx::Animation"*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN3gfx9AnimationD2Ev(%"class.gfx::Animation"*) unnamed_addr #6

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3gfx15LinearAnimationD0Ev(%"class.gfx::LinearAnimation"*) unnamed_addr #7 comdat align 2 {
  %2 = getelementptr inbounds %"class.gfx::LinearAnimation", %"class.gfx::LinearAnimation"* %0, i64 0, i32 0
  tail call void @_ZN3gfx9AnimationD2Ev(%"class.gfx::Animation"* %2) #11
  %3 = bitcast %"class.gfx::LinearAnimation"* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3gfx15LinearAnimation14AnimateToStateEd(%"class.gfx::LinearAnimation"*, double) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK4base9TimeDeltamiES0_(%"class.base::TimeDelta"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = add i64 %1, -9223372036854775807
  %7 = icmp ult i64 %6, 2
  br i1 %7, label %17, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %0, i64 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = icmp sgt i64 %1, -1
  %12 = select i1 %11, i64 -9223372036854775808, i64 9223372036854775807
  %13 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %10, i64 %1) #11
  %14 = extractvalue { i64, i1 } %13, 1
  %15 = extractvalue { i64, i1 } %13, 0
  %16 = select i1 %14, i64 %12, i64 %15, !prof !4
  ret i64 %16

17:                                               ; preds = %2
  %18 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #11
  %19 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %19, align 8
  %20 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %0, i64 0, i32 0
  %21 = load i64, i64* %20, align 8
  %22 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22)
  %23 = icmp eq i64 %21, %1
  br i1 %23, label %25, label %24

24:                                               ; preds = %17
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  store i8* null, i8** %19, align 8
  br label %34

25:                                               ; preds = %17
  %26 = tail call i8* @_ZN7logging15CheckOpValueStrEl(i64 %1) #11
  %27 = tail call i8* @_ZN7logging15CheckOpValueStrEl(i64 %1) #11
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* %26, i8* %27) #11
  %28 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %29 = load i8*, i8** %28, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  store i8* %29, i8** %19, align 8
  %30 = icmp eq i8* %29, null
  br i1 %30, label %34, label %31

31:                                               ; preds = %25
  %32 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %32) #11
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 387, %"class.logging::CheckOpResult"* nonnull %4) #11
  %33 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %32) #11
  br label %34

34:                                               ; preds = %24, %25, %31
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #11
  %35 = icmp slt i64 %1, 0
  %36 = select i1 %35, i64 9223372036854775807, i64 -9223372036854775808
  ret i64 %36
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #6

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.ssub.with.overflow.i64(i64, i64) #8

declare i8* @_ZN7logging15CheckOpValueStrEl(i64) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

declare %"class.base::CommandLine"* @_ZN4base11CommandLine17ForCurrentProcessEv() local_unnamed_addr #2

declare zeroext i1 @_ZN4base14StringToDoubleENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEPd(i8*, i64, double*) local_unnamed_addr #2

declare void @_ZNK4base11CommandLine19GetSwitchValueASCIIENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.std::__1::basic_string"* sret, %"class.base::CommandLine"*, i8*, i64) local_unnamed_addr #2

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #9

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #10

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind }
attributes #12 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 1048575}
!3 = !{i8 0, i8 2}
!4 = !{!"branch_weights", i32 1, i32 2000}
