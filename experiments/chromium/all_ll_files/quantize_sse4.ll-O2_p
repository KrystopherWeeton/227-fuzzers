; ModuleID = '../../third_party/libvpx/source/libvpx/vp8/encoder/x86/quantize_sse4.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp8/encoder/x86/quantize_sse4.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.block = type { i16*, i16*, i16*, i16*, i16*, i16*, i16*, i16*, i16, i8**, i32, i32 }
%struct.blockd = type { i16*, i16*, i8*, i16*, i32, i8*, %union.b_mode_info }
%union.b_mode_info = type { i32 }

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @vp8_regular_quantize_b_sse4_1(%struct.block* nocapture readonly, %struct.blockd* nocapture readonly) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.block, %struct.block* %0, i64 0, i32 6
  %4 = load i16*, i16** %3, align 8
  %5 = getelementptr inbounds %struct.block, %struct.block* %0, i64 0, i32 4
  %6 = bitcast i16** %5 to <8 x i16>**
  %7 = load <8 x i16>*, <8 x i16>** %6, align 8
  %8 = load <8 x i16>, <8 x i16>* %7, align 16
  %9 = getelementptr inbounds <8 x i16>, <8 x i16>* %7, i64 0, i64 8
  %10 = bitcast i16* %9 to <8 x i16>*
  %11 = load <8 x i16>, <8 x i16>* %10, align 16
  %12 = getelementptr inbounds %struct.block, %struct.block* %0, i64 0, i32 1
  %13 = bitcast i16** %12 to <8 x i16>**
  %14 = load <8 x i16>*, <8 x i16>** %13, align 8
  %15 = load <8 x i16>, <8 x i16>* %14, align 16
  %16 = getelementptr inbounds <8 x i16>, <8 x i16>* %14, i64 0, i64 8
  %17 = bitcast i16* %16 to <8 x i16>*
  %18 = load <8 x i16>, <8 x i16>* %17, align 16
  %19 = getelementptr inbounds %struct.block, %struct.block* %0, i64 0, i32 8
  %20 = load i16, i16* %19, align 8
  %21 = sext i16 %20 to i32
  %22 = insertelement <4 x i32> undef, i32 %21, i32 0
  %23 = getelementptr inbounds %struct.block, %struct.block* %0, i64 0, i32 5
  %24 = bitcast i16** %23 to <8 x i16>**
  %25 = load <8 x i16>*, <8 x i16>** %24, align 8
  %26 = load <8 x i16>, <8 x i16>* %25, align 16
  %27 = getelementptr inbounds <8 x i16>, <8 x i16>* %25, i64 0, i64 8
  %28 = bitcast i16* %27 to <8 x i16>*
  %29 = load <8 x i16>, <8 x i16>* %28, align 16
  %30 = getelementptr inbounds %struct.block, %struct.block* %0, i64 0, i32 7
  %31 = bitcast i16** %30 to <8 x i16>**
  %32 = load <8 x i16>*, <8 x i16>** %31, align 8
  %33 = load <8 x i16>, <8 x i16>* %32, align 16
  %34 = getelementptr inbounds <8 x i16>, <8 x i16>* %32, i64 0, i64 8
  %35 = bitcast i16* %34 to <8 x i16>*
  %36 = load <8 x i16>, <8 x i16>* %35, align 16
  %37 = getelementptr inbounds %struct.block, %struct.block* %0, i64 0, i32 2
  %38 = bitcast i16** %37 to <8 x i16>**
  %39 = load <8 x i16>*, <8 x i16>** %38, align 8
  %40 = load <8 x i16>, <8 x i16>* %39, align 16
  %41 = getelementptr inbounds <8 x i16>, <8 x i16>* %39, i64 0, i64 8
  %42 = bitcast i16* %41 to <8 x i16>*
  %43 = load <8 x i16>, <8 x i16>* %42, align 16
  %44 = getelementptr inbounds %struct.blockd, %struct.blockd* %1, i64 0, i32 3
  %45 = bitcast i16** %44 to <8 x i16>**
  %46 = load <8 x i16>*, <8 x i16>** %45, align 8
  %47 = load <8 x i16>, <8 x i16>* %46, align 16
  %48 = getelementptr inbounds <8 x i16>, <8 x i16>* %46, i64 0, i64 8
  %49 = bitcast i16* %48 to <8 x i16>*
  %50 = load <8 x i16>, <8 x i16>* %49, align 16
  %51 = bitcast <4 x i32> %22 to <8 x i16>
  %52 = sub <8 x i16> <i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>, %51
  %53 = shufflevector <8 x i16> %52, <8 x i16> undef, <8 x i32> zeroinitializer
  %54 = sub <8 x i16> zeroinitializer, %15
  %55 = icmp slt <8 x i16> %15, zeroinitializer
  %56 = select <8 x i1> %55, <8 x i16> %54, <8 x i16> %15
  %57 = sub <8 x i16> zeroinitializer, %18
  %58 = icmp slt <8 x i16> %18, zeroinitializer
  %59 = select <8 x i1> %58, <8 x i16> %57, <8 x i16> %18
  %60 = sub <8 x i16> %56, %26
  %61 = add <8 x i16> %60, %53
  %62 = sub <8 x i16> %59, %29
  %63 = add <8 x i16> %62, %53
  %64 = add <8 x i16> %33, %56
  %65 = add <8 x i16> %36, %59
  %66 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %64, <8 x i16> %40) #2
  %67 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %65, <8 x i16> %43) #2
  %68 = add <8 x i16> %66, %64
  %69 = add <8 x i16> %67, %65
  %70 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %68, <8 x i16> %8) #2
  %71 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %69, <8 x i16> %11) #2
  %72 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %70, <8 x i16> %15) #2
  %73 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %71, <8 x i16> %18) #2
  %74 = load i16, i16* %4, align 2
  %75 = extractelement <8 x i16> %61, i64 0
  %76 = extractelement <8 x i16> %72, i64 0
  %77 = icmp slt i16 %75, %74
  %78 = icmp eq i16 %76, 0
  %79 = or i1 %78, %77
  br i1 %79, label %80, label %83

80:                                               ; preds = %2
  %81 = getelementptr inbounds i16, i16* %4, i64 1
  %82 = load i16, i16* %81, align 2
  br label %86

83:                                               ; preds = %2
  %84 = shufflevector <8 x i16> <i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i16> %72, <8 x i32> <i32 8, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>
  %85 = bitcast <8 x i16> %84 to <2 x i64>
  br label %86

86:                                               ; preds = %83, %80
  %87 = phi i16 [ %82, %80 ], [ %74, %83 ]
  %88 = phi <8 x i16> [ zeroinitializer, %80 ], [ %84, %83 ]
  %89 = phi <2 x i64> [ zeroinitializer, %80 ], [ %85, %83 ]
  %90 = phi i16* [ %81, %80 ], [ %4, %83 ]
  %91 = phi i8 [ 0, %80 ], [ 1, %83 ]
  %92 = extractelement <8 x i16> %61, i64 1
  %93 = extractelement <8 x i16> %72, i64 1
  %94 = icmp slt i16 %92, %87
  %95 = icmp eq i16 %93, 0
  %96 = or i1 %95, %94
  br i1 %96, label %97, label %100

97:                                               ; preds = %86
  %98 = getelementptr inbounds i16, i16* %90, i64 1
  %99 = load i16, i16* %98, align 2
  br label %103

100:                                              ; preds = %86
  %101 = shufflevector <8 x i16> %88, <8 x i16> %72, <8 x i32> <i32 0, i32 9, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %102 = bitcast <8 x i16> %101 to <2 x i64>
  br label %103

103:                                              ; preds = %100, %97
  %104 = phi i16 [ %99, %97 ], [ %74, %100 ]
  %105 = phi <8 x i16> [ %88, %97 ], [ %101, %100 ]
  %106 = phi <2 x i64> [ %89, %97 ], [ %102, %100 ]
  %107 = phi i16* [ %98, %97 ], [ %4, %100 ]
  %108 = phi i8 [ %91, %97 ], [ 2, %100 ]
  %109 = extractelement <8 x i16> %61, i64 4
  %110 = extractelement <8 x i16> %72, i64 4
  %111 = icmp slt i16 %109, %104
  %112 = icmp eq i16 %110, 0
  %113 = or i1 %112, %111
  br i1 %113, label %114, label %117

114:                                              ; preds = %103
  %115 = getelementptr inbounds i16, i16* %107, i64 1
  %116 = load i16, i16* %115, align 2
  br label %120

117:                                              ; preds = %103
  %118 = shufflevector <8 x i16> %105, <8 x i16> %72, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 5, i32 6, i32 7>
  %119 = bitcast <8 x i16> %118 to <2 x i64>
  br label %120

120:                                              ; preds = %117, %114
  %121 = phi i16 [ %116, %114 ], [ %74, %117 ]
  %122 = phi <8 x i16> [ %105, %114 ], [ %118, %117 ]
  %123 = phi <2 x i64> [ %106, %114 ], [ %119, %117 ]
  %124 = phi i16* [ %115, %114 ], [ %4, %117 ]
  %125 = phi i8 [ %108, %114 ], [ 3, %117 ]
  %126 = extractelement <8 x i16> %63, i64 0
  %127 = extractelement <8 x i16> %73, i64 0
  %128 = icmp slt i16 %126, %121
  %129 = icmp eq i16 %127, 0
  %130 = or i1 %129, %128
  br i1 %130, label %131, label %134

131:                                              ; preds = %120
  %132 = getelementptr inbounds i16, i16* %124, i64 1
  %133 = load i16, i16* %132, align 2
  br label %137

134:                                              ; preds = %120
  %135 = shufflevector <8 x i16> <i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i16> %73, <8 x i32> <i32 8, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>
  %136 = bitcast <8 x i16> %135 to <2 x i64>
  br label %137

137:                                              ; preds = %134, %131
  %138 = phi i16 [ %133, %131 ], [ %74, %134 ]
  %139 = phi <8 x i16> [ zeroinitializer, %131 ], [ %135, %134 ]
  %140 = phi <2 x i64> [ zeroinitializer, %131 ], [ %136, %134 ]
  %141 = phi i16* [ %132, %131 ], [ %4, %134 ]
  %142 = phi i8 [ %125, %131 ], [ 4, %134 ]
  %143 = extractelement <8 x i16> %61, i64 5
  %144 = extractelement <8 x i16> %72, i64 5
  %145 = icmp slt i16 %143, %138
  %146 = icmp eq i16 %144, 0
  %147 = or i1 %146, %145
  br i1 %147, label %148, label %151

148:                                              ; preds = %137
  %149 = getelementptr inbounds i16, i16* %141, i64 1
  %150 = load i16, i16* %149, align 2
  br label %154

151:                                              ; preds = %137
  %152 = shufflevector <8 x i16> %122, <8 x i16> %72, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 13, i32 6, i32 7>
  %153 = bitcast <8 x i16> %152 to <2 x i64>
  br label %154

154:                                              ; preds = %151, %148
  %155 = phi i16 [ %150, %148 ], [ %74, %151 ]
  %156 = phi <8 x i16> [ %122, %148 ], [ %152, %151 ]
  %157 = phi <2 x i64> [ %123, %148 ], [ %153, %151 ]
  %158 = phi i16* [ %149, %148 ], [ %4, %151 ]
  %159 = phi i8 [ %142, %148 ], [ 5, %151 ]
  %160 = extractelement <8 x i16> %61, i64 2
  %161 = extractelement <8 x i16> %72, i64 2
  %162 = icmp slt i16 %160, %155
  %163 = icmp eq i16 %161, 0
  %164 = or i1 %163, %162
  br i1 %164, label %165, label %168

165:                                              ; preds = %154
  %166 = getelementptr inbounds i16, i16* %158, i64 1
  %167 = load i16, i16* %166, align 2
  br label %171

168:                                              ; preds = %154
  %169 = shufflevector <8 x i16> %156, <8 x i16> %72, <8 x i32> <i32 0, i32 1, i32 10, i32 3, i32 4, i32 5, i32 6, i32 7>
  %170 = bitcast <8 x i16> %169 to <2 x i64>
  br label %171

171:                                              ; preds = %168, %165
  %172 = phi i16 [ %167, %165 ], [ %74, %168 ]
  %173 = phi <8 x i16> [ %156, %165 ], [ %169, %168 ]
  %174 = phi <2 x i64> [ %157, %165 ], [ %170, %168 ]
  %175 = phi i16* [ %166, %165 ], [ %4, %168 ]
  %176 = phi i8 [ %159, %165 ], [ 6, %168 ]
  %177 = extractelement <8 x i16> %61, i64 3
  %178 = extractelement <8 x i16> %72, i64 3
  %179 = icmp slt i16 %177, %172
  %180 = icmp eq i16 %178, 0
  %181 = or i1 %180, %179
  br i1 %181, label %182, label %185

182:                                              ; preds = %171
  %183 = getelementptr inbounds i16, i16* %175, i64 1
  %184 = load i16, i16* %183, align 2
  br label %188

185:                                              ; preds = %171
  %186 = shufflevector <8 x i16> %173, <8 x i16> %72, <8 x i32> <i32 0, i32 1, i32 2, i32 11, i32 4, i32 5, i32 6, i32 7>
  %187 = bitcast <8 x i16> %186 to <2 x i64>
  br label %188

188:                                              ; preds = %185, %182
  %189 = phi i16 [ %184, %182 ], [ %74, %185 ]
  %190 = phi <8 x i16> [ %173, %182 ], [ %186, %185 ]
  %191 = phi <2 x i64> [ %174, %182 ], [ %187, %185 ]
  %192 = phi i16* [ %183, %182 ], [ %4, %185 ]
  %193 = phi i8 [ %176, %182 ], [ 7, %185 ]
  %194 = extractelement <8 x i16> %61, i64 6
  %195 = extractelement <8 x i16> %72, i64 6
  %196 = icmp slt i16 %194, %189
  %197 = icmp eq i16 %195, 0
  %198 = or i1 %197, %196
  br i1 %198, label %199, label %202

199:                                              ; preds = %188
  %200 = getelementptr inbounds i16, i16* %192, i64 1
  %201 = load i16, i16* %200, align 2
  br label %205

202:                                              ; preds = %188
  %203 = shufflevector <8 x i16> %190, <8 x i16> %72, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 14, i32 7>
  %204 = bitcast <8 x i16> %203 to <2 x i64>
  br label %205

205:                                              ; preds = %202, %199
  %206 = phi i16 [ %201, %199 ], [ %74, %202 ]
  %207 = phi <8 x i16> [ %190, %199 ], [ %203, %202 ]
  %208 = phi <2 x i64> [ %191, %199 ], [ %204, %202 ]
  %209 = phi i16* [ %200, %199 ], [ %4, %202 ]
  %210 = phi i8 [ %193, %199 ], [ 8, %202 ]
  %211 = extractelement <8 x i16> %63, i64 1
  %212 = extractelement <8 x i16> %73, i64 1
  %213 = icmp slt i16 %211, %206
  %214 = icmp eq i16 %212, 0
  %215 = or i1 %214, %213
  br i1 %215, label %216, label %219

216:                                              ; preds = %205
  %217 = getelementptr inbounds i16, i16* %209, i64 1
  %218 = load i16, i16* %217, align 2
  br label %222

219:                                              ; preds = %205
  %220 = shufflevector <8 x i16> %139, <8 x i16> %73, <8 x i32> <i32 0, i32 9, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %221 = bitcast <8 x i16> %220 to <2 x i64>
  br label %222

222:                                              ; preds = %219, %216
  %223 = phi i16 [ %218, %216 ], [ %74, %219 ]
  %224 = phi <8 x i16> [ %139, %216 ], [ %220, %219 ]
  %225 = phi <2 x i64> [ %140, %216 ], [ %221, %219 ]
  %226 = phi i16* [ %217, %216 ], [ %4, %219 ]
  %227 = phi i8 [ %210, %216 ], [ 9, %219 ]
  %228 = extractelement <8 x i16> %63, i64 4
  %229 = extractelement <8 x i16> %73, i64 4
  %230 = icmp slt i16 %228, %223
  %231 = icmp eq i16 %229, 0
  %232 = or i1 %231, %230
  br i1 %232, label %233, label %236

233:                                              ; preds = %222
  %234 = getelementptr inbounds i16, i16* %226, i64 1
  %235 = load i16, i16* %234, align 2
  br label %239

236:                                              ; preds = %222
  %237 = shufflevector <8 x i16> %224, <8 x i16> %73, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 5, i32 6, i32 7>
  %238 = bitcast <8 x i16> %237 to <2 x i64>
  br label %239

239:                                              ; preds = %236, %233
  %240 = phi i16 [ %235, %233 ], [ %74, %236 ]
  %241 = phi <8 x i16> [ %224, %233 ], [ %237, %236 ]
  %242 = phi <2 x i64> [ %225, %233 ], [ %238, %236 ]
  %243 = phi i16* [ %234, %233 ], [ %4, %236 ]
  %244 = phi i8 [ %227, %233 ], [ 10, %236 ]
  %245 = extractelement <8 x i16> %63, i64 5
  %246 = extractelement <8 x i16> %73, i64 5
  %247 = icmp slt i16 %245, %240
  %248 = icmp eq i16 %246, 0
  %249 = or i1 %248, %247
  br i1 %249, label %250, label %253

250:                                              ; preds = %239
  %251 = getelementptr inbounds i16, i16* %243, i64 1
  %252 = load i16, i16* %251, align 2
  br label %256

253:                                              ; preds = %239
  %254 = shufflevector <8 x i16> %241, <8 x i16> %73, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 13, i32 6, i32 7>
  %255 = bitcast <8 x i16> %254 to <2 x i64>
  br label %256

256:                                              ; preds = %253, %250
  %257 = phi i16 [ %252, %250 ], [ %74, %253 ]
  %258 = phi <8 x i16> [ %241, %250 ], [ %254, %253 ]
  %259 = phi <2 x i64> [ %242, %250 ], [ %255, %253 ]
  %260 = phi i16* [ %251, %250 ], [ %4, %253 ]
  %261 = phi i8 [ %244, %250 ], [ 11, %253 ]
  %262 = extractelement <8 x i16> %63, i64 2
  %263 = extractelement <8 x i16> %73, i64 2
  %264 = icmp slt i16 %262, %257
  %265 = icmp eq i16 %263, 0
  %266 = or i1 %265, %264
  br i1 %266, label %267, label %270

267:                                              ; preds = %256
  %268 = getelementptr inbounds i16, i16* %260, i64 1
  %269 = load i16, i16* %268, align 2
  br label %273

270:                                              ; preds = %256
  %271 = shufflevector <8 x i16> %258, <8 x i16> %73, <8 x i32> <i32 0, i32 1, i32 10, i32 3, i32 4, i32 5, i32 6, i32 7>
  %272 = bitcast <8 x i16> %271 to <2 x i64>
  br label %273

273:                                              ; preds = %270, %267
  %274 = phi i16 [ %269, %267 ], [ %74, %270 ]
  %275 = phi <8 x i16> [ %258, %267 ], [ %271, %270 ]
  %276 = phi <2 x i64> [ %259, %267 ], [ %272, %270 ]
  %277 = phi i16* [ %268, %267 ], [ %4, %270 ]
  %278 = phi i8 [ %261, %267 ], [ 12, %270 ]
  %279 = extractelement <8 x i16> %61, i64 7
  %280 = extractelement <8 x i16> %72, i64 7
  %281 = icmp slt i16 %279, %274
  %282 = icmp eq i16 %280, 0
  %283 = or i1 %282, %281
  %284 = getelementptr inbounds i16, i16* %277, i64 1
  %285 = shufflevector <8 x i16> %207, <8 x i16> %72, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 15>
  %286 = bitcast <8 x i16> %285 to <2 x i64>
  %287 = select i1 %283, <2 x i64> %208, <2 x i64> %286
  %288 = select i1 %283, i16* %284, i16* %4
  %289 = load i16, i16* %288, align 2
  %290 = extractelement <8 x i16> %63, i64 3
  %291 = extractelement <8 x i16> %73, i64 3
  %292 = icmp slt i16 %290, %289
  %293 = icmp eq i16 %291, 0
  %294 = or i1 %293, %292
  br i1 %294, label %295, label %299

295:                                              ; preds = %273
  %296 = select i1 %283, i8 %278, i8 13
  %297 = getelementptr inbounds i16, i16* %288, i64 1
  %298 = load i16, i16* %297, align 2
  br label %302

299:                                              ; preds = %273
  %300 = shufflevector <8 x i16> %275, <8 x i16> %73, <8 x i32> <i32 0, i32 1, i32 2, i32 11, i32 4, i32 5, i32 6, i32 7>
  %301 = bitcast <8 x i16> %300 to <2 x i64>
  br label %302

302:                                              ; preds = %299, %295
  %303 = phi i16 [ %298, %295 ], [ %74, %299 ]
  %304 = phi <8 x i16> [ %275, %295 ], [ %300, %299 ]
  %305 = phi <2 x i64> [ %276, %295 ], [ %301, %299 ]
  %306 = phi i16* [ %297, %295 ], [ %4, %299 ]
  %307 = phi i8 [ %296, %295 ], [ 14, %299 ]
  %308 = extractelement <8 x i16> %63, i64 6
  %309 = extractelement <8 x i16> %73, i64 6
  %310 = icmp slt i16 %308, %303
  %311 = icmp eq i16 %309, 0
  %312 = or i1 %311, %310
  br i1 %312, label %313, label %316

313:                                              ; preds = %302
  %314 = getelementptr inbounds i16, i16* %306, i64 1
  %315 = load i16, i16* %314, align 2
  br label %319

316:                                              ; preds = %302
  %317 = shufflevector <8 x i16> %304, <8 x i16> %73, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 14, i32 7>
  %318 = bitcast <8 x i16> %317 to <2 x i64>
  br label %319

319:                                              ; preds = %316, %313
  %320 = phi i16 [ %315, %313 ], [ %74, %316 ]
  %321 = phi <8 x i16> [ %304, %313 ], [ %317, %316 ]
  %322 = phi <2 x i64> [ %305, %313 ], [ %318, %316 ]
  %323 = phi i8 [ %307, %313 ], [ 15, %316 ]
  %324 = extractelement <8 x i16> %63, i64 7
  %325 = extractelement <8 x i16> %73, i64 7
  %326 = icmp slt i16 %324, %320
  %327 = icmp eq i16 %325, 0
  %328 = or i1 %327, %326
  %329 = shufflevector <8 x i16> %321, <8 x i16> %73, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 15>
  %330 = bitcast <8 x i16> %329 to <2 x i64>
  %331 = select i1 %328, <2 x i64> %322, <2 x i64> %330
  %332 = select i1 %328, i8 %323, i8 16
  %333 = getelementptr inbounds %struct.blockd, %struct.blockd* %1, i64 0, i32 0
  %334 = bitcast %struct.blockd* %1 to <2 x i64>**
  %335 = load <2 x i64>*, <2 x i64>** %334, align 8
  store <2 x i64> %287, <2 x i64>* %335, align 16
  %336 = load i16*, i16** %333, align 8
  %337 = getelementptr inbounds i16, i16* %336, i64 8
  %338 = bitcast i16* %337 to <2 x i64>*
  store <2 x i64> %331, <2 x i64>* %338, align 16
  %339 = bitcast <2 x i64> %287 to <8 x i16>
  %340 = mul <8 x i16> %47, %339
  %341 = bitcast <2 x i64> %331 to <8 x i16>
  %342 = mul <8 x i16> %50, %341
  %343 = getelementptr inbounds %struct.blockd, %struct.blockd* %1, i64 0, i32 1
  %344 = bitcast i16** %343 to <8 x i16>**
  %345 = load <8 x i16>*, <8 x i16>** %344, align 8
  store <8 x i16> %340, <8 x i16>* %345, align 16
  %346 = load i16*, i16** %343, align 8
  %347 = getelementptr inbounds i16, i16* %346, i64 8
  %348 = bitcast i16* %347 to <8 x i16>*
  store <8 x i16> %342, <8 x i16>* %348, align 16
  %349 = getelementptr inbounds %struct.blockd, %struct.blockd* %1, i64 0, i32 5
  %350 = load i8*, i8** %349, align 8
  store i8 %332, i8* %350, align 1
  ret void
}

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16>, <8 x i16>) #1

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16>, <8 x i16>) #1

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
