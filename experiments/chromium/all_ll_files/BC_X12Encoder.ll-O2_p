; ModuleID = '../../third_party/pdfium/fxbarcode/datamatrix/BC_X12Encoder.cpp'
source_filename = "../../third_party/pdfium/fxbarcode/datamatrix/BC_X12Encoder.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CBC_X12Encoder = type { %class.CBC_C40Encoder }
%class.CBC_C40Encoder = type { %class.CBC_Encoder }
%class.CBC_Encoder = type { i32 (...)** }
%class.CBC_EncoderContext = type { %"class.fxcrt::WideString", %"class.fxcrt::WideString", i64, i8, %"class.fxcrt::UnownedPtr", i8, i8, i64 }
%"class.fxcrt::WideString" = type { %"class.fxcrt::RetainPtr" }
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.fxcrt::StringDataTemplate"* }
%"class.fxcrt::StringDataTemplate" = type <{ i64, i64, i64, [1 x i32], [4 x i8] }>
%"class.fxcrt::UnownedPtr" = type { %class.CBC_SymbolInfo* }
%class.CBC_SymbolInfo = type { i32 (...)**, %"struct.CBC_SymbolInfo::Data"* }
%"struct.CBC_SymbolInfo::Data" = type { i16, i16, i16, i8, i8, i8, i8 }

@_ZTV14CBC_X12Encoder = hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.CBC_X12Encoder*)* @_ZN14CBC_X12EncoderD2Ev to i8*), i8* bitcast (void (%class.CBC_X12Encoder*)* @_ZN14CBC_X12EncoderD0Ev to i8*), i8* bitcast (i8 (%class.CBC_X12Encoder*)* @_ZN14CBC_X12Encoder15GetEncodingModeEv to i8*), i8* bitcast (i1 (%class.CBC_X12Encoder*, %class.CBC_EncoderContext*)* @_ZN14CBC_X12Encoder6EncodeEP18CBC_EncoderContext to i8*), i8* bitcast (i1 (%class.CBC_X12Encoder*, %class.CBC_EncoderContext*, %"class.fxcrt::WideString"*)* @_ZN14CBC_X12Encoder9HandleEODEP18CBC_EncoderContextPN5fxcrt10WideStringE to i8*), i8* bitcast (i32 (%class.CBC_X12Encoder*, i32, %"class.fxcrt::WideString"*)* @_ZN14CBC_X12Encoder10EncodeCharEwPN5fxcrt10WideStringE to i8*)] }, align 8

@_ZN14CBC_X12EncoderC1Ev = hidden unnamed_addr alias void (%class.CBC_X12Encoder*), void (%class.CBC_X12Encoder*)* @_ZN14CBC_X12EncoderC2Ev
@_ZN14CBC_X12EncoderD1Ev = hidden unnamed_addr alias void (%class.CBC_X12Encoder*), void (%class.CBC_X12Encoder*)* @_ZN14CBC_X12EncoderD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14CBC_X12EncoderC2Ev(%class.CBC_X12Encoder*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CBC_X12Encoder, %class.CBC_X12Encoder* %0, i64 0, i32 0
  tail call void @_ZN14CBC_C40EncoderC2Ev(%class.CBC_C40Encoder* %2) #6
  %3 = getelementptr inbounds %class.CBC_X12Encoder, %class.CBC_X12Encoder* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTV14CBC_X12Encoder, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  ret void
}

declare void @_ZN14CBC_C40EncoderC2Ev(%class.CBC_C40Encoder*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN14CBC_C40EncoderD2Ev(%class.CBC_C40Encoder*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14CBC_X12EncoderD2Ev(%class.CBC_X12Encoder*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CBC_X12Encoder, %class.CBC_X12Encoder* %0, i64 0, i32 0
  tail call void @_ZN14CBC_C40EncoderD2Ev(%class.CBC_C40Encoder* %2) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14CBC_X12EncoderD0Ev(%class.CBC_X12Encoder*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CBC_X12Encoder, %class.CBC_X12Encoder* %0, i64 0, i32 0
  tail call void @_ZN14CBC_C40EncoderD2Ev(%class.CBC_C40Encoder* %2) #6
  %3 = bitcast %class.CBC_X12Encoder* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #7
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden signext i8 @_ZN14CBC_X12Encoder15GetEncodingModeEv(%class.CBC_X12Encoder* nocapture readnone) unnamed_addr #4 align 2 {
  ret i8 3
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN14CBC_X12Encoder6EncodeEP18CBC_EncoderContext(%class.CBC_X12Encoder* nocapture readnone, %class.CBC_EncoderContext*) unnamed_addr #0 align 2 {
  %3 = alloca %"class.fxcrt::WideString", align 8
  %4 = bitcast %"class.fxcrt::WideString"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #6
  %5 = getelementptr inbounds %"class.fxcrt::WideString", %"class.fxcrt::WideString"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store %"class.fxcrt::StringDataTemplate"* inttoptr (i64 -6148914691236517206 to %"class.fxcrt::StringDataTemplate"*), %"class.fxcrt::StringDataTemplate"** %5, align 8
  call void @_ZN5fxcrt10WideStringC1Ev(%"class.fxcrt::WideString"* nonnull %3) #6
  %6 = call zeroext i1 @_ZN18CBC_EncoderContext17hasMoreCharactersEv(%class.CBC_EncoderContext* %1) #6
  br i1 %6, label %7, label %31

7:                                                ; preds = %2
  %8 = getelementptr inbounds %class.CBC_EncoderContext, %class.CBC_EncoderContext* %1, i64 0, i32 2
  %9 = getelementptr inbounds %class.CBC_EncoderContext, %class.CBC_EncoderContext* %1, i64 0, i32 0
  br label %10

10:                                               ; preds = %7, %29
  %11 = call signext i32 @_ZN18CBC_EncoderContext14getCurrentCharEv(%class.CBC_EncoderContext* %1) #6
  %12 = load i64, i64* %8, align 8
  %13 = add i64 %12, 1
  store i64 %13, i64* %8, align 8
  %14 = call i32 @_ZN14CBC_X12Encoder10EncodeCharEwPN5fxcrt10WideStringE(%class.CBC_X12Encoder* undef, i32 signext %11, %"class.fxcrt::WideString"* nonnull %3)
  %15 = icmp slt i32 %14, 1
  br i1 %15, label %33, label %16

16:                                               ; preds = %10
  %17 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %5, align 8
  %18 = icmp eq %"class.fxcrt::StringDataTemplate"* %17, null
  br i1 %18, label %24, label %19

19:                                               ; preds = %16
  %20 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %17, i64 0, i32 1
  %21 = load i64, i64* %20, align 8
  %22 = urem i64 %21, 3
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %24, label %29

24:                                               ; preds = %16, %19
  call void @_ZN14CBC_C40Encoder16WriteNextTripletEP18CBC_EncoderContextPN5fxcrt10WideStringE(%class.CBC_EncoderContext* %1, %"class.fxcrt::WideString"* nonnull %3) #6
  %25 = load i64, i64* %8, align 8
  %26 = call signext i8 @_ZN20CBC_HighLevelEncoder13LookAheadTestERKN5fxcrt10WideStringEmNS_8EncodingE(%"class.fxcrt::WideString"* dereferenceable(8) %9, i64 %25, i8 signext 3) #6
  %27 = icmp eq i8 %26, 3
  br i1 %27, label %29, label %28

28:                                               ; preds = %24
  call void @_ZN18CBC_EncoderContext19SignalEncoderChangeEN20CBC_HighLevelEncoder8EncodingE(%class.CBC_EncoderContext* %1, i8 signext %26) #6
  br label %31

29:                                               ; preds = %24, %19
  %30 = call zeroext i1 @_ZN18CBC_EncoderContext17hasMoreCharactersEv(%class.CBC_EncoderContext* %1) #6
  br i1 %30, label %10, label %31

31:                                               ; preds = %29, %2, %28
  %32 = call zeroext i1 @_ZN14CBC_X12Encoder9HandleEODEP18CBC_EncoderContextPN5fxcrt10WideStringE(%class.CBC_X12Encoder* undef, %class.CBC_EncoderContext* %1, %"class.fxcrt::WideString"* nonnull %3)
  br label %33

33:                                               ; preds = %10, %31
  %34 = phi i1 [ %32, %31 ], [ false, %10 ]
  call void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"* nonnull %3) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #6
  ret i1 %34
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #5

declare void @_ZN5fxcrt10WideStringC1Ev(%"class.fxcrt::WideString"*) unnamed_addr #1

declare zeroext i1 @_ZN18CBC_EncoderContext17hasMoreCharactersEv(%class.CBC_EncoderContext*) local_unnamed_addr #1

declare signext i32 @_ZN18CBC_EncoderContext14getCurrentCharEv(%class.CBC_EncoderContext*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN14CBC_X12Encoder10EncodeCharEwPN5fxcrt10WideStringE(%class.CBC_X12Encoder* nocapture readnone, i32 signext, %"class.fxcrt::WideString"*) unnamed_addr #0 align 2 {
  switch i32 %1, label %12 [
    i32 13, label %4
    i32 42, label %6
    i32 62, label %8
    i32 32, label %10
  ]

4:                                                ; preds = %3
  %5 = tail call dereferenceable(8) %"class.fxcrt::WideString"* @_ZN5fxcrt10WideStringpLEw(%"class.fxcrt::WideString"* %2, i32 signext 0) #6
  br label %26

6:                                                ; preds = %3
  %7 = tail call dereferenceable(8) %"class.fxcrt::WideString"* @_ZN5fxcrt10WideStringpLEw(%"class.fxcrt::WideString"* %2, i32 signext 1) #6
  br label %26

8:                                                ; preds = %3
  %9 = tail call dereferenceable(8) %"class.fxcrt::WideString"* @_ZN5fxcrt10WideStringpLEw(%"class.fxcrt::WideString"* %2, i32 signext 2) #6
  br label %26

10:                                               ; preds = %3
  %11 = tail call dereferenceable(8) %"class.fxcrt::WideString"* @_ZN5fxcrt10WideStringpLEw(%"class.fxcrt::WideString"* %2, i32 signext 3) #6
  br label %26

12:                                               ; preds = %3
  %13 = icmp ugt i32 %1, 127
  br i1 %13, label %26, label %14

14:                                               ; preds = %12
  %15 = tail call i32 @iswdigit(i32 %1) #6
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %20, label %17

17:                                               ; preds = %14
  %18 = add nsw i32 %1, -44
  %19 = tail call dereferenceable(8) %"class.fxcrt::WideString"* @_ZN5fxcrt10WideStringpLEw(%"class.fxcrt::WideString"* %2, i32 signext %18) #6
  br label %26

20:                                               ; preds = %14
  %21 = add nsw i32 %1, -65
  %22 = icmp ult i32 %21, 26
  br i1 %22, label %23, label %26

23:                                               ; preds = %20
  %24 = add nsw i32 %1, -51
  %25 = tail call dereferenceable(8) %"class.fxcrt::WideString"* @_ZN5fxcrt10WideStringpLEw(%"class.fxcrt::WideString"* %2, i32 signext %24) #6
  br label %26

26:                                               ; preds = %12, %4, %8, %17, %23, %10, %6, %20
  %27 = phi i32 [ 0, %20 ], [ 1, %6 ], [ 1, %10 ], [ 1, %23 ], [ 1, %17 ], [ 1, %8 ], [ 1, %4 ], [ 0, %12 ]
  ret i32 %27
}

declare void @_ZN14CBC_C40Encoder16WriteNextTripletEP18CBC_EncoderContextPN5fxcrt10WideStringE(%class.CBC_EncoderContext*, %"class.fxcrt::WideString"*) local_unnamed_addr #1

declare signext i8 @_ZN20CBC_HighLevelEncoder13LookAheadTestERKN5fxcrt10WideStringEmNS_8EncodingE(%"class.fxcrt::WideString"* dereferenceable(8), i64, i8 signext) local_unnamed_addr #1

declare void @_ZN18CBC_EncoderContext19SignalEncoderChangeEN20CBC_HighLevelEncoder8EncodingE(%class.CBC_EncoderContext*, i8 signext) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN14CBC_X12Encoder9HandleEODEP18CBC_EncoderContextPN5fxcrt10WideStringE(%class.CBC_X12Encoder* nocapture readnone, %class.CBC_EncoderContext*, %"class.fxcrt::WideString"* nocapture readonly) unnamed_addr #0 align 2 {
  %4 = tail call zeroext i1 @_ZN18CBC_EncoderContext16UpdateSymbolInfoEv(%class.CBC_EncoderContext* %1) #6
  br i1 %4, label %5, label %33

5:                                                ; preds = %3
  %6 = getelementptr inbounds %class.CBC_EncoderContext, %class.CBC_EncoderContext* %1, i64 0, i32 4, i32 0
  %7 = load %class.CBC_SymbolInfo*, %class.CBC_SymbolInfo** %6, align 8
  %8 = getelementptr inbounds %class.CBC_SymbolInfo, %class.CBC_SymbolInfo* %7, i64 0, i32 1
  %9 = load %"struct.CBC_SymbolInfo::Data"*, %"struct.CBC_SymbolInfo::Data"** %8, align 8
  %10 = getelementptr inbounds %"struct.CBC_SymbolInfo::Data", %"struct.CBC_SymbolInfo::Data"* %9, i64 0, i32 0
  %11 = load i16, i16* %10, align 2
  %12 = sext i16 %11 to i64
  %13 = tail call i64 @_ZN18CBC_EncoderContext16getCodewordCountEv(%class.CBC_EncoderContext* %1) #6
  %14 = sub i64 %12, %13
  %15 = trunc i64 %14 to i32
  %16 = getelementptr inbounds %"class.fxcrt::WideString", %"class.fxcrt::WideString"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %16, align 8
  %18 = icmp eq %"class.fxcrt::StringDataTemplate"* %17, null
  br i1 %18, label %33, label %19

19:                                               ; preds = %5
  %20 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %17, i64 0, i32 1
  %21 = load i64, i64* %20, align 8
  switch i64 %21, label %33 [
    i64 2, label %22
    i64 1, label %26
  ]

22:                                               ; preds = %19
  tail call void @_ZN18CBC_EncoderContext13writeCodewordEw(%class.CBC_EncoderContext* %1, i32 signext 254) #6
  %23 = getelementptr inbounds %class.CBC_EncoderContext, %class.CBC_EncoderContext* %1, i64 0, i32 2
  %24 = load i64, i64* %23, align 8
  %25 = add i64 %24, -2
  store i64 %25, i64* %23, align 8
  tail call void @_ZN18CBC_EncoderContext19SignalEncoderChangeEN20CBC_HighLevelEncoder8EncodingE(%class.CBC_EncoderContext* %1, i8 signext 0) #6
  br label %33

26:                                               ; preds = %19
  %27 = getelementptr inbounds %class.CBC_EncoderContext, %class.CBC_EncoderContext* %1, i64 0, i32 2
  %28 = load i64, i64* %27, align 8
  %29 = add i64 %28, -1
  store i64 %29, i64* %27, align 8
  %30 = icmp sgt i32 %15, 1
  br i1 %30, label %31, label %32

31:                                               ; preds = %26
  tail call void @_ZN18CBC_EncoderContext13writeCodewordEw(%class.CBC_EncoderContext* %1, i32 signext 254) #6
  br label %32

32:                                               ; preds = %31, %26
  tail call void @_ZN18CBC_EncoderContext19SignalEncoderChangeEN20CBC_HighLevelEncoder8EncodingE(%class.CBC_EncoderContext* %1, i8 signext 0) #6
  br label %33

33:                                               ; preds = %5, %22, %32, %19, %3
  %34 = phi i1 [ false, %3 ], [ true, %19 ], [ true, %32 ], [ true, %22 ], [ true, %5 ]
  ret i1 %34
}

; Function Attrs: nounwind
declare void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"*) unnamed_addr #2

declare zeroext i1 @_ZN18CBC_EncoderContext16UpdateSymbolInfoEv(%class.CBC_EncoderContext*) local_unnamed_addr #1

declare i64 @_ZN18CBC_EncoderContext16getCodewordCountEv(%class.CBC_EncoderContext*) local_unnamed_addr #1

declare void @_ZN18CBC_EncoderContext13writeCodewordEw(%class.CBC_EncoderContext*, i32 signext) local_unnamed_addr #1

declare dereferenceable(8) %"class.fxcrt::WideString"* @_ZN5fxcrt10WideStringpLEw(%"class.fxcrt::WideString"*, i32 signext) local_unnamed_addr #1

; Function Attrs: nounwind
declare i32 @iswdigit(i32) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
