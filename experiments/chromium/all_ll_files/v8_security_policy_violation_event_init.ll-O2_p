; ModuleID = 'gen/third_party/blink/renderer/bindings/core/v8/v8_security_policy_violation_event_init.cc'
source_filename = "gen/third_party/blink/renderer/bindings/core/v8/v8_security_policy_violation_event_init.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.WTF::ThreadSpecific" = type { %"class.blink::ThreadState"**, %"class.base::ThreadLocalStorage::Slot" }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr.77", i32, [4 x i8], %"class.std::__1::unique_ptr.213", %"class.std::__1::unique_ptr.213", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.223", %"class.std::__1::unique_ptr.229", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.241", %"class.std::__1::unique_ptr.247", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.254", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.77" = type { %"class.std::__1::__compressed_pair.78" }
%"class.std::__1::__compressed_pair.78" = type { %"struct.std::__1::__compressed_pair_elem.79" }
%"struct.std::__1::__compressed_pair_elem.79" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.80", %"class.std::__1::unique_ptr.86", %"class.std::__1::unique_ptr.92", %"class.std::__1::unique_ptr.98", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.110", %"class.std::__1::unique_ptr.121", %"class.std::__1::unique_ptr.128", %"class.std::__1::unique_ptr.128", %"class.std::__1::unique_ptr.135", %"class.std::__1::unique_ptr.142", %"class.std::__1::unique_ptr.149", %"class.std::__1::unique_ptr.149", %"class.std::__1::unique_ptr.156", %"class.std::__1::unique_ptr.163", %"class.std::__1::unique_ptr.170", %"class.std::__1::unique_ptr.193", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.80" = type { %"class.std::__1::__compressed_pair.81" }
%"class.std::__1::__compressed_pair.81" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"struct.std::__1::__compressed_pair_elem.82" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.86" = type { %"class.std::__1::__compressed_pair.87" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.88" }
%"struct.std::__1::__compressed_pair_elem.88" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.92" = type { %"class.std::__1::__compressed_pair.93" }
%"class.std::__1::__compressed_pair.93" = type { %"struct.std::__1::__compressed_pair_elem.94" }
%"struct.std::__1::__compressed_pair_elem.94" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.98" = type { %"class.std::__1::__compressed_pair.99" }
%"class.std::__1::__compressed_pair.99" = type { %"struct.std::__1::__compressed_pair_elem.100" }
%"struct.std::__1::__compressed_pair_elem.100" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.104" = type { %"class.std::__1::__compressed_pair.105" }
%"class.std::__1::__compressed_pair.105" = type { %"struct.std::__1::__compressed_pair_elem.106" }
%"struct.std::__1::__compressed_pair_elem.106" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.110" = type { %"class.std::__1::__compressed_pair.111" }
%"class.std::__1::__compressed_pair.111" = type { %"struct.std::__1::__compressed_pair_elem.112" }
%"struct.std::__1::__compressed_pair_elem.112" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, {}* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.113" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.113" = type { %"struct.std::__1::__atomic_base.114" }
%"struct.std::__1::__atomic_base.114" = type { %"struct.std::__1::__atomic_base.115" }
%"struct.std::__1::__atomic_base.115" = type { %"struct.std::__1::__cxx_atomic_impl.116" }
%"struct.std::__1::__cxx_atomic_impl.116" = type { %"struct.std::__1::__cxx_atomic_base_impl.117" }
%"struct.std::__1::__cxx_atomic_base_impl.117" = type { i64 }
%"class.std::__1::unique_ptr.121" = type { %"class.std::__1::__compressed_pair.122" }
%"class.std::__1::__compressed_pair.122" = type { %"struct.std::__1::__compressed_pair_elem.123" }
%"struct.std::__1::__compressed_pair_elem.123" = type { %"class.blink::Worklist.124"* }
%"class.blink::Worklist.124" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.113" }
%"class.std::__1::unique_ptr.128" = type { %"class.std::__1::__compressed_pair.129" }
%"class.std::__1::__compressed_pair.129" = type { %"struct.std::__1::__compressed_pair_elem.130" }
%"struct.std::__1::__compressed_pair_elem.130" = type { %"class.blink::Worklist.131"* }
%"class.blink::Worklist.131" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.113" }
%"class.std::__1::unique_ptr.135" = type { %"class.std::__1::__compressed_pair.136" }
%"class.std::__1::__compressed_pair.136" = type { %"struct.std::__1::__compressed_pair_elem.137" }
%"struct.std::__1::__compressed_pair_elem.137" = type { %"class.blink::Worklist.138"* }
%"class.blink::Worklist.138" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.113" }
%"class.std::__1::unique_ptr.142" = type { %"class.std::__1::__compressed_pair.143" }
%"class.std::__1::__compressed_pair.143" = type { %"struct.std::__1::__compressed_pair_elem.144" }
%"struct.std::__1::__compressed_pair_elem.144" = type { %"class.blink::Worklist.145"* }
%"class.blink::Worklist.145" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.113" }
%"class.std::__1::unique_ptr.149" = type { %"class.std::__1::__compressed_pair.150" }
%"class.std::__1::__compressed_pair.150" = type { %"struct.std::__1::__compressed_pair_elem.151" }
%"struct.std::__1::__compressed_pair_elem.151" = type { %"class.blink::Worklist.152"* }
%"class.blink::Worklist.152" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.113" }
%"class.std::__1::unique_ptr.156" = type { %"class.std::__1::__compressed_pair.157" }
%"class.std::__1::__compressed_pair.157" = type { %"struct.std::__1::__compressed_pair_elem.158" }
%"struct.std::__1::__compressed_pair_elem.158" = type { %"class.blink::Worklist.159"* }
%"class.blink::Worklist.159" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.113" }
%"class.std::__1::unique_ptr.163" = type { %"class.std::__1::__compressed_pair.164" }
%"class.std::__1::__compressed_pair.164" = type { %"struct.std::__1::__compressed_pair_elem.165" }
%"struct.std::__1::__compressed_pair_elem.165" = type { %"class.blink::Worklist.166"* }
%"class.blink::Worklist.166" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.113" }
%"class.std::__1::unique_ptr.170" = type { %"class.std::__1::__compressed_pair.171" }
%"class.std::__1::__compressed_pair.171" = type { %"struct.std::__1::__compressed_pair_elem.172" }
%"struct.std::__1::__compressed_pair_elem.172" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.173", %"class.std::__1::__compressed_pair.180", %"class.std::__1::__compressed_pair.185", %"class.std::__1::__compressed_pair.187", [4 x i8] }>
%"class.std::__1::unique_ptr.173" = type { %"class.std::__1::__compressed_pair.174" }
%"class.std::__1::__compressed_pair.174" = type { %"struct.std::__1::__compressed_pair_elem.175", %"struct.std::__1::__compressed_pair_elem.176" }
%"struct.std::__1::__compressed_pair_elem.175" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.176" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.177" }
%"class.std::__1::__compressed_pair.177" = type { %"struct.std::__1::__compressed_pair_elem.178" }
%"struct.std::__1::__compressed_pair_elem.178" = type { i64 }
%"class.std::__1::__compressed_pair.180" = type { %"struct.std::__1::__compressed_pair_elem.181" }
%"struct.std::__1::__compressed_pair_elem.181" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.185" = type { %"struct.std::__1::__compressed_pair_elem.178" }
%"class.std::__1::__compressed_pair.187" = type { %"struct.std::__1::__compressed_pair_elem.188" }
%"struct.std::__1::__compressed_pair_elem.188" = type { float }
%"class.std::__1::unique_ptr.193" = type { %"class.std::__1::__compressed_pair.194" }
%"class.std::__1::__compressed_pair.194" = type { %"struct.std::__1::__compressed_pair_elem.195" }
%"struct.std::__1::__compressed_pair_elem.195" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.196", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.196" = type { %"class.std::__1::__compressed_pair.197" }
%"class.std::__1::__compressed_pair.197" = type { %"struct.std::__1::__compressed_pair_elem.198" }
%"struct.std::__1::__compressed_pair_elem.198" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.205" }
%"class.WTF::Vector.205" = type { %"class.WTF::VectorBuffer.206" }
%"class.WTF::VectorBuffer.206" = type { %"class.WTF::VectorBufferBase.207" }
%"class.WTF::VectorBufferBase.207" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.213" = type { %"class.std::__1::__compressed_pair.214" }
%"class.std::__1::__compressed_pair.214" = type { %"struct.std::__1::__compressed_pair_elem.215" }
%"struct.std::__1::__compressed_pair_elem.215" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.221" }
%"class.WTF::VectorBuffer.221" = type { %"class.WTF::VectorBufferBase.222" }
%"class.WTF::VectorBufferBase.222" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.223" = type { %"class.std::__1::__compressed_pair.224" }
%"class.std::__1::__compressed_pair.224" = type { %"struct.std::__1::__compressed_pair_elem.225" }
%"struct.std::__1::__compressed_pair_elem.225" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.229" = type { %"class.std::__1::__compressed_pair.230" }
%"class.std::__1::__compressed_pair.230" = type { %"struct.std::__1::__compressed_pair_elem.231" }
%"struct.std::__1::__compressed_pair_elem.231" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.235" }
%"class.std::__1::unique_ptr.235" = type { %"class.std::__1::__compressed_pair.236" }
%"class.std::__1::__compressed_pair.236" = type { %"struct.std::__1::__compressed_pair_elem.237" }
%"struct.std::__1::__compressed_pair_elem.237" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.124"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.131"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.138"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.145"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.152"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.285" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.285" = type { %"struct.std::__1::__compressed_pair_elem.286" }
%"struct.std::__1::__compressed_pair_elem.286" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.241" = type { %"class.std::__1::__compressed_pair.242" }
%"class.std::__1::__compressed_pair.242" = type { %"struct.std::__1::__compressed_pair_elem.243" }
%"struct.std::__1::__compressed_pair_elem.243" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.247" = type { %"class.std::__1::__compressed_pair.248" }
%"class.std::__1::__compressed_pair.248" = type { %"struct.std::__1::__compressed_pair_elem.249" }
%"struct.std::__1::__compressed_pair_elem.249" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.253 }
%class.scoped_refptr.253 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.254" = type { %"struct.std::__1::__atomic_base.255" }
%"struct.std::__1::__atomic_base.255" = type { %"struct.std::__1::__cxx_atomic_impl.256" }
%"struct.std::__1::__cxx_atomic_impl.256" = type { %"struct.std::__1::__cxx_atomic_base_impl.257" }
%"struct.std::__1::__cxx_atomic_base_impl.257" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::ThreadLocalStorage::Slot" = type { i32, i32 }
%"struct.blink::GCInfo" = type { void (%"class.blink::Visitor"*, i8*)*, void (i8*)*, { i8*, i8 } (i8*)*, i8 }
%"class.blink::GCInfoTable" = type { %"struct.blink::GCInfo"**, i32, i32, %"class.WTF::Mutex" }
%"class.v8::Value" = type { i8 }
%"class.blink::SecurityPolicyViolationEventInit" = type { %"class.blink::EventInit.base", i8, i8, i8, %"class.WTF::String", i32, %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", i32, %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", i16, %"class.WTF::String" }
%"class.blink::EventInit.base" = type <{ %"class.blink::IDLDictionaryBase", i8, i8, i8, i8, i8, i8 }>
%"class.blink::IDLDictionaryBase" = type { i32 (...)** }
%"class.blink::ExceptionState" = type { i32 (...)**, %"class.blink::ExceptionContext", %"class.blink::ExceptionState::ContextScope"*, %"class.v8::Isolate"*, i32, %"class.WTF::String", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::ExceptionContext" = type { i16, i16, i8*, i8* }
%"class.blink::ExceptionState::ContextScope" = type { %"class.blink::ExceptionState"*, %"class.blink::ExceptionState::ContextScope"*, %"class.blink::ExceptionContext" }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.v8::TryCatch" = type <{ %"class.v8::internal::Isolate"*, %"class.v8::TryCatch"*, i8*, i8*, i8*, i8, [7 x i8] }>
%"class.v8::internal::Isolate" = type opaque
%"class.blink::V8StringResource" = type { %"class.v8::Local", i32, %"class.WTF::String", %"class.WTF::StringView::StackBackingStore" }
%"class.v8::Local" = type { %"class.v8::Value"* }
%"class.WTF::StringView::StackBackingStore" = type { [64 x i16], %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.v8::Object" = type { i8 }
%"class.blink::EventInit" = type <{ %"class.blink::IDLDictionaryBase", i8, i8, i8, i8, i8, i8, [2 x i8] }>
%"class.blink::V8PerIsolateData" = type { i32, %"class.gin::IsolateHolder", %"class.WTF::HashMap", %"class.WTF::HashMap", %"class.WTF::HashMap.24", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.71", %"class.blink::Persistent", i8, i8, i8, %"class.WTF::Vector.258", %"class.std::__1::unique_ptr.263", %"class.blink::Persistent.269", %"class.blink::Persistent.273", %"class.blink::RuntimeCallStats", void (%"class.v8::Isolate"*, i32, i32)*, void (%"class.v8::Isolate"*, i32, i32)*, i64 }
%"class.gin::IsolateHolder" = type { %"class.std::__1::unique_ptr.8", %"class.v8::Isolate"*, %"class.std::__1::unique_ptr.12", %"class.std::__1::unique_ptr.18", i32, i32 }
%"class.std::__1::unique_ptr.8" = type { %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"class.v8::SnapshotCreator"* }
%"class.v8::SnapshotCreator" = type { i8* }
%"class.std::__1::unique_ptr.12" = type { %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"class.gin::PerIsolateData"* }
%"class.gin::PerIsolateData" = type opaque
%"class.std::__1::unique_ptr.18" = type { %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"class.gin::V8IsolateMemoryDumpProvider"* }
%"class.gin::V8IsolateMemoryDumpProvider" = type opaque
%"class.WTF::HashMap" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type opaque
%"class.WTF::HashMap.24" = type { %"class.WTF::HashTable.25" }
%"class.WTF::HashTable.25" = type <{ %"struct.WTF::KeyValuePair.28"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.28" = type opaque
%"class.std::__1::unique_ptr.29" = type { %"class.std::__1::__compressed_pair.30" }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem.31" = type { %"class.blink::StringCache"* }
%"class.blink::StringCache" = type { %"class.v8::GlobalValueMap", %"class.v8::PersistentValueMapBase<WTF::StringImpl *, v8::String, blink::StringCacheMapTraits>::PersistentValueReference", %"class.v8::GlobalValueMap.37", %class.scoped_refptr }
%"class.v8::GlobalValueMap" = type { %"class.v8::PersistentValueMapBase" }
%"class.v8::PersistentValueMapBase" = type { %"class.v8::Isolate"*, %"class.WTF::HashMap.32", i8* }
%"class.WTF::HashMap.32" = type { %"class.WTF::HashTable.33" }
%"class.WTF::HashTable.33" = type <{ %"struct.WTF::KeyValuePair.36"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.36" = type { %"class.WTF::StringImpl"*, i64 }
%"class.v8::PersistentValueMapBase<WTF::StringImpl *, v8::String, blink::StringCacheMapTraits>::PersistentValueReference" = type { i64 }
%"class.v8::GlobalValueMap.37" = type { %"class.v8::PersistentValueMapBase.38" }
%"class.v8::PersistentValueMapBase.38" = type { %"class.v8::Isolate"*, %"class.WTF::HashMap.39", i8* }
%"class.WTF::HashMap.39" = type { %"class.WTF::HashTable.40" }
%"class.WTF::HashTable.40" = type <{ %"struct.WTF::KeyValuePair.43"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.43" = type { %"class.blink::ParkableStringImpl"*, i64 }
%"class.blink::ParkableStringImpl" = type { %"class.WTF::RefCounted", %"class.WTF::String", %"class.std::__1::unique_ptr.44" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.std::__1::unique_ptr.44" = type { %"class.std::__1::__compressed_pair.45" }
%"class.std::__1::__compressed_pair.45" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"struct.std::__1::__compressed_pair_elem.46" = type { %"struct.blink::ParkableStringImpl::ParkableMetadata"* }
%"struct.blink::ParkableStringImpl::ParkableMetadata" = type { %"class.WTF::Mutex", i32, i8, i8, %"class.std::__1::unique_ptr.47", %"class.std::__1::unique_ptr.55", %"class.WTF::Vector.61", i8, i32 }
%"class.std::__1::unique_ptr.47" = type { %"class.std::__1::__compressed_pair.48" }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.49" }
%"struct.std::__1::__compressed_pair_elem.49" = type { %"class.WTF::Vector"* }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { i8*, i32, i32 }
%"class.std::__1::unique_ptr.55" = type { %"class.std::__1::__compressed_pair.56" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { %"class.blink::DiskDataMetadata"* }
%"class.blink::DiskDataMetadata" = type { i64, i64 }
%"class.WTF::Vector.61" = type { %"class.WTF::VectorBuffer.62" }
%"class.WTF::VectorBuffer.62" = type { %"class.WTF::VectorBufferBase", [32 x i8] }
%"class.std::__1::unique_ptr.71" = type { %"class.std::__1::__compressed_pair.72" }
%"class.std::__1::__compressed_pair.72" = type { %"struct.std::__1::__compressed_pair_elem.73" }
%"struct.std::__1::__compressed_pair_elem.73" = type { %"class.blink::V8PrivateProperty"* }
%"class.blink::V8PrivateProperty" = type opaque
%"class.blink::Persistent" = type { %"class.blink::PersistentBase" }
%"class.blink::PersistentBase" = type { %"class.blink::ScriptState"*, %"class.blink::PersistentNodePtr" }
%"class.blink::ScriptState" = type { %"class.v8::Isolate"*, %"class.blink::ScopedPersistent", %class.scoped_refptr.292, %"class.blink::Member.311", %"class.blink::SelfKeepAlive", %"class.util::TokenType" }
%"class.blink::ScopedPersistent" = type { %"class.v8::Persistent" }
%"class.v8::Persistent" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Context"* }
%"class.v8::Context" = type { i8 }
%class.scoped_refptr.292 = type { %"class.blink::DOMWrapperWorld"* }
%"class.blink::DOMWrapperWorld" = type { %"class.WTF::RefCounted.293", i32, i32, %"class.blink::Persistent.295" }
%"class.WTF::RefCounted.293" = type { %"class.base::RefCounted.294" }
%"class.base::RefCounted.294" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::Persistent.295" = type { %"class.blink::PersistentBase.296" }
%"class.blink::PersistentBase.296" = type { %"class.blink::DOMDataStore"*, %"class.blink::PersistentNodePtr" }
%"class.blink::DOMDataStore" = type { i32 (...)**, i8, [7 x i8], %"class.blink::HeapHashMap" }
%"class.blink::HeapHashMap" = type { %"class.WTF::HashMap.301" }
%"class.WTF::HashMap.301" = type { %"class.WTF::HashTable.302" }
%"class.WTF::HashTable.302" = type <{ %"struct.WTF::KeyValuePair.304"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.304" = type { %"class.blink::WeakMember", %"class.blink::TraceWrapperV8Reference.308" }
%"class.blink::WeakMember" = type { %"class.blink::MemberBase.305" }
%"class.blink::MemberBase.305" = type { %"class.blink::ScriptWrappable"* }
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference.308" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference.308" = type { %"class.v8::TracedReference.309" }
%"class.v8::TracedReference.309" = type { %"class.v8::BasicTracedReference.310" }
%"class.v8::BasicTracedReference.310" = type { %"class.v8::TracedReferenceBase" }
%"class.blink::Member.311" = type { %"class.blink::MemberBase.312" }
%"class.blink::MemberBase.312" = type { %"class.blink::V8PerContextData"* }
%"class.blink::V8PerContextData" = type opaque
%"class.blink::SelfKeepAlive" = type { %"class.blink::Persistent" }
%"class.util::TokenType" = type { %"class.base::StrongAlias" }
%"class.base::StrongAlias" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.blink::PersistentNodePtr" = type { %"class.blink::PersistentNode"* }
%"class.WTF::Vector.258" = type { %"class.WTF::VectorBuffer.259" }
%"class.WTF::VectorBuffer.259" = type { %"class.WTF::VectorBufferBase.260" }
%"class.WTF::VectorBufferBase.260" = type { %"class.base::OnceCallback"*, i32, i32 }
%"class.base::OnceCallback" = type opaque
%"class.std::__1::unique_ptr.263" = type { %"class.std::__1::__compressed_pair.264" }
%"class.std::__1::__compressed_pair.264" = type { %"struct.std::__1::__compressed_pair_elem.265" }
%"struct.std::__1::__compressed_pair_elem.265" = type { %"class.blink::V8PerIsolateData::Data"* }
%"class.blink::V8PerIsolateData::Data" = type { i32 (...)** }
%"class.blink::Persistent.269" = type { %"class.blink::PersistentBase.270" }
%"class.blink::PersistentBase.270" = type { %"class.blink::V8PerIsolateData::GarbageCollectedData"*, %"class.blink::PersistentNodePtr" }
%"class.blink::V8PerIsolateData::GarbageCollectedData" = type { i32 (...)** }
%"class.blink::Persistent.273" = type { %"class.blink::PersistentBase.274" }
%"class.blink::PersistentBase.274" = type { %"class.blink::ActiveScriptWrappableManager"*, %"class.blink::PersistentNodePtr" }
%"class.blink::ActiveScriptWrappableManager" = type { %"class.blink::HeapVector", i64 }
%"class.blink::HeapVector" = type { %"class.WTF::Vector.279" }
%"class.WTF::Vector.279" = type { %"class.WTF::VectorBuffer.280" }
%"class.WTF::VectorBuffer.280" = type { %"class.WTF::VectorBufferBase.281" }
%"class.WTF::VectorBufferBase.281" = type { %"struct.std::__1::pair.282"*, i32, i32 }
%"struct.std::__1::pair.282" = type { %"class.blink::UntracedMember", %"class.blink::Member" }
%"class.blink::UntracedMember" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::ActiveScriptWrappableBase"* }
%"class.blink::ActiveScriptWrappableBase" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::GarbageCollectedMixin" = type { i32 (...)** }
%"class.blink::Member" = type { %"class.blink::MemberBase.283" }
%"class.blink::MemberBase.283" = type { %"class.blink::ActiveScriptWrappableBase"* }
%"class.blink::RuntimeCallStats" = type { %"class.blink::RuntimeCallTimer"*, i8, [40 x %"class.blink::RuntimeCallCounter"], %"class.base::TickClock"* }
%"class.blink::RuntimeCallTimer" = type { %"class.blink::RuntimeCallCounter"*, %"class.blink::RuntimeCallTimer"*, %"class.base::TimeTicks", %"class.base::TimeDelta", %"class.base::TickClock"* }
%"class.blink::RuntimeCallCounter" = type { i64, %"class.base::TimeDelta", i8* }
%"class.base::TimeDelta" = type { i64 }
%"class.base::TickClock" = type opaque
%"class.v8::Eternal" = type { %"class.v8::Name"* }
%"class.v8::Name" = type { i8 }
%"class.base::span.313" = type { %"struct.base::internal::ExtentStorage", i8** }
%"struct.base::internal::ExtentStorage" = type { i64 }
%"class.v8::String" = type { i8 }
%"class.v8::Int32" = type { i8 }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"class.v8::Integer" = type { i8 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.335" }
%"class.std::__1::__compressed_pair.335" = type { %"struct.std::__1::__compressed_pair_elem.336" }
%"struct.std::__1::__compressed_pair_elem.336" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.blink::NormalPageArena" = type { %"class.blink::BaseArena.base", [4 x i8], %"class.blink::FreeList", i8*, i64, i64 }
%"class.blink::BaseArena.base" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32 }>
%"class.blink::FreeList" = type <{ [17 x %"class.blink::FreeListEntry"*], [17 x %"class.blink::FreeListEntry"*], i32, [4 x i8] }>
%"class.blink::FreeListEntry" = type { %"class.blink::HeapObjectHeader", %"class.blink::FreeListEntry"* }
%"class.blink::PlatformAwareObjectStartBitmap" = type { %"class.blink::ObjectStartBitmap" }
%"class.blink::ObjectStartBitmap" = type { i8*, [2048 x i8] }

$_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE = comdat any

$_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE = comdat any

$_ZN5blink10ThreadHeap8AllocateINS_17IDLDictionaryBaseEEEPhm = comdat any

$_ZN5blink10TraceTraitINS_17IDLDictionaryBaseEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink8internal14FinalizerTraitINS_17IDLDictionaryBaseEE8FinalizeEPv = comdat any

$_ZN5blink9NameTraitINS_17IDLDictionaryBaseEE7GetNameEPKv = comdat any

$_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE11PrepareFastEv = comdat any

$_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index = comdat any

@.str = private unnamed_addr constant [121 x i8] c"Missing required member(s): disposition, documentURI, effectiveDirective, originalPolicy, statusCode, violatedDirective.\00", align 1
@.str.1 = private unnamed_addr constant [30 x i8] c"cannot convert to dictionary.\00", align 1
@.str.2 = private unnamed_addr constant [42 x i8] c"required member disposition is undefined.\00", align 1
@_ZZN5blink34V8SecurityPolicyViolationEventInit6ToImplEPN2v87IsolateENS1_5LocalINS1_5ValueEEEPNS_32SecurityPolicyViolationEventInitERNS_14ExceptionStateEE12kValidValues = internal constant [2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i32 0, i32 0)], align 16
@.str.3 = private unnamed_addr constant [8 x i8] c"enforce\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"report\00", align 1
@.str.5 = private unnamed_addr constant [40 x i8] c"SecurityPolicyViolationEventDisposition\00", align 1
@.str.6 = private unnamed_addr constant [42 x i8] c"required member documentURI is undefined.\00", align 1
@.str.7 = private unnamed_addr constant [49 x i8] c"required member effectiveDirective is undefined.\00", align 1
@.str.8 = private unnamed_addr constant [45 x i8] c"required member originalPolicy is undefined.\00", align 1
@.str.9 = private unnamed_addr constant [41 x i8] c"required member statusCode is undefined.\00", align 1
@.str.10 = private unnamed_addr constant [48 x i8] c"required member violatedDirective is undefined.\00", align 1
@_ZN3WTF14g_empty_stringE = external local_unnamed_addr constant %"class.WTF::String"*, align 8
@_ZZN5blinkL45eternalV8SecurityPolicyViolationEventInitKeysEPN2v87IsolateEE5kKeys = internal constant [12 x i8*] [i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.22, i32 0, i32 0)], align 16
@.str.11 = private unnamed_addr constant [11 x i8] c"blockedURI\00", align 1
@.str.12 = private unnamed_addr constant [13 x i8] c"columnNumber\00", align 1
@.str.13 = private unnamed_addr constant [12 x i8] c"disposition\00", align 1
@.str.14 = private unnamed_addr constant [12 x i8] c"documentURI\00", align 1
@.str.15 = private unnamed_addr constant [19 x i8] c"effectiveDirective\00", align 1
@.str.16 = private unnamed_addr constant [11 x i8] c"lineNumber\00", align 1
@.str.17 = private unnamed_addr constant [15 x i8] c"originalPolicy\00", align 1
@.str.18 = private unnamed_addr constant [9 x i8] c"referrer\00", align 1
@.str.19 = private unnamed_addr constant [7 x i8] c"sample\00", align 1
@.str.20 = private unnamed_addr constant [11 x i8] c"sourceFile\00", align 1
@.str.21 = private unnamed_addr constant [11 x i8] c"statusCode\00", align 1
@.str.22 = private unnamed_addr constant [18 x i8] c"violatedDirective\00", align 1
@.ref.tmp = private constant { i64, i8** } { i64 12, i8** getelementptr inbounds ([12 x i8*], [12 x i8*]* @_ZZN5blinkL45eternalV8SecurityPolicyViolationEventInitKeysEPN2v87IsolateEE5kKeys, i32 0, i32 0) }, align 8
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@_ZN5blink11ThreadState16thread_specific_E = external local_unnamed_addr global %"class.WTF::ThreadSpecific"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv = private unnamed_addr constant [68 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::ThreadState *]\00", align 1
@.str.23 = private unnamed_addr constant [23 x i8] c"allocation_size > size\00", align 1
@.str.24 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/heap/impl/heap.h\00", align 1
@_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_17IDLDictionaryBaseEE5TraceEPNS_7VisitorEPKv, void (i8*)* @_ZN5blink8internal14FinalizerTraitINS_17IDLDictionaryBaseEE8FinalizeEPv, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_17IDLDictionaryBaseEE7GetNameEPKv, i8 1 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@.str.25 = private unnamed_addr constant [13 x i8] c"InternalNode\00", align 1
@_ZN5blink11GCInfoTable13global_table_E = external local_unnamed_addr global %"class.blink::GCInfoTable"*, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink34V8SecurityPolicyViolationEventInit6ToImplEPN2v87IsolateENS1_5LocalINS1_5ValueEEEPNS_32SecurityPolicyViolationEventInitERNS_14ExceptionStateE(%"class.v8::Isolate"*, %"class.v8::Value"*, %"class.blink::SecurityPolicyViolationEventInit"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.v8::TryCatch", align 8
  %6 = alloca %"class.blink::V8StringResource", align 8
  %7 = alloca %"class.blink::V8StringResource", align 8
  %8 = alloca %"class.WTF::String", align 8
  %9 = alloca %"class.WTF::String", align 8
  %10 = alloca %"class.blink::V8StringResource", align 8
  %11 = alloca %"class.blink::V8StringResource", align 8
  %12 = alloca %"class.blink::V8StringResource", align 8
  %13 = alloca %"class.blink::V8StringResource", align 8
  %14 = alloca %"class.blink::V8StringResource", align 8
  %15 = alloca %"class.blink::V8StringResource", align 8
  %16 = alloca %"class.blink::V8StringResource", align 8
  %17 = icmp eq %"class.v8::Value"* %1, null
  br i1 %17, label %39, label %18

18:                                               ; preds = %4
  %19 = bitcast %"class.v8::Value"* %1 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = and i64 %20, 3
  %22 = icmp eq i64 %21, 1
  br i1 %22, label %23, label %40

23:                                               ; preds = %18
  %24 = add i64 %20, -1
  %25 = inttoptr i64 %24 to i32*
  %26 = load i32, i32* %25, align 4
  %27 = and i64 %20, -4294967296
  %28 = zext i32 %26 to i64
  %29 = or i64 %27, %28
  %30 = add i64 %29, 7
  %31 = inttoptr i64 %30 to i16*
  %32 = load i16, i16* %31, align 2
  %33 = icmp eq i16 %32, 67
  br i1 %33, label %34, label %40

34:                                               ; preds = %23
  %35 = add i64 %20, 23
  %36 = inttoptr i64 %35 to i32*
  %37 = load i32, i32* %36, align 4
  %38 = ashr i32 %37, 1
  switch i32 %38, label %40 [
    i32 5, label %39
    i32 3, label %39
  ]

39:                                               ; preds = %34, %34, %4
  tail call void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"* %3, i8* getelementptr inbounds ([121 x i8], [121 x i8]* @.str, i64 0, i64 0)) #7
  br label %1827

40:                                               ; preds = %34, %23, %18
  %41 = tail call zeroext i1 @_ZNK2v85Value8IsObjectEv(%"class.v8::Value"* nonnull %1) #7
  br i1 %41, label %43, label %42

42:                                               ; preds = %40
  tail call void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"* %3, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0)) #7
  br label %1827

43:                                               ; preds = %40
  %44 = bitcast %"class.v8::Value"* %1 to %"class.v8::Object"*
  %45 = bitcast %"class.blink::SecurityPolicyViolationEventInit"* %2 to %"class.blink::EventInit"*
  tail call void @_ZN5blink11V8EventInit6ToImplEPN2v87IsolateENS1_5LocalINS1_5ValueEEEPNS_9EventInitERNS_14ExceptionStateE(%"class.v8::Isolate"* %0, %"class.v8::Value"* nonnull %1, %"class.blink::EventInit"* %45, %"class.blink::ExceptionState"* dereferenceable(72) %3) #7
  %46 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %3, i64 0, i32 4
  %47 = load i32, i32* %46, align 8
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %1827

49:                                               ; preds = %43
  %50 = ptrtoint %"class.v8::Isolate"* %0 to i64
  %51 = add i64 %50, 8
  %52 = inttoptr i64 %51 to %"class.blink::V8PerIsolateData"**
  %53 = load %"class.blink::V8PerIsolateData"*, %"class.blink::V8PerIsolateData"** %52, align 8
  %54 = tail call { i64, %"class.v8::Eternal"* } @_ZN5blink16V8PerIsolateData28FindOrCreateEternalNameCacheEPKvRKN4base4spanIKPKcLm18446744073709551615EEE(%"class.blink::V8PerIsolateData"* %53, i8* bitcast ([12 x i8*]* @_ZZN5blinkL45eternalV8SecurityPolicyViolationEventInitKeysEPN2v87IsolateEE5kKeys to i8*), %"class.base::span.313"* dereferenceable(16) bitcast ({ i64, i8** }* @.ref.tmp to %"class.base::span.313"*)) #7
  %55 = extractvalue { i64, %"class.v8::Eternal"* } %54, 1
  %56 = bitcast %"class.v8::TryCatch"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %56) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %56, i8 -86, i64 48, i1 false)
  call void @_ZN2v88TryCatchC1EPNS_7IsolateE(%"class.v8::TryCatch"* nonnull %5, %"class.v8::Isolate"* %0) #7
  %57 = call %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"* %0) #7
  %58 = bitcast %"class.v8::Eternal"* %55 to %"class.v8::Value"**
  %59 = load %"class.v8::Value"*, %"class.v8::Value"** %58, align 8
  %60 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %44, %"class.v8::Context"* %57, %"class.v8::Value"* %59) #7
  %61 = icmp eq %"class.v8::Value"* %60, null
  br i1 %61, label %62, label %68

62:                                               ; preds = %49
  %63 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %64 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %65 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %64, align 8
  %66 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %65, i64 5
  %67 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %66, align 8
  call void %67(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %63) #7
  br label %1826

68:                                               ; preds = %49
  %69 = bitcast %"class.v8::Value"* %60 to i64*
  %70 = load i64, i64* %69, align 8
  %71 = and i64 %70, 3
  %72 = icmp eq i64 %71, 1
  br i1 %72, label %73, label %90

73:                                               ; preds = %68
  %74 = add i64 %70, -1
  %75 = inttoptr i64 %74 to i32*
  %76 = load i32, i32* %75, align 4
  %77 = and i64 %70, -4294967296
  %78 = zext i32 %76 to i64
  %79 = or i64 %77, %78
  %80 = add i64 %79, 7
  %81 = inttoptr i64 %80 to i16*
  %82 = load i16, i16* %81, align 2
  %83 = icmp eq i16 %82, 67
  br i1 %83, label %84, label %90

84:                                               ; preds = %73
  %85 = add i64 %70, 23
  %86 = inttoptr i64 %85 to i32*
  %87 = load i32, i32* %86, align 4
  %88 = and i32 %87, -2
  %89 = icmp eq i32 %88, 10
  br i1 %89, label %230, label %90

90:                                               ; preds = %73, %68, %84
  %91 = bitcast %"class.blink::V8StringResource"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %91) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %91, i8 -86, i64 152, i1 false)
  %92 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %6, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %60, %"class.v8::Value"** %92, align 8
  %93 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %6, i64 0, i32 1
  store i32 0, i32* %93, align 8
  %94 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %6, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %94, align 8
  %95 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %6, i64 0, i32 3, i32 1
  %96 = bitcast %"class.std::__1::unique_ptr"* %95 to i64*
  store i64 0, i64* %96, align 8
  %97 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %6, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %97, label %98, label %208

98:                                               ; preds = %90
  %99 = load %"class.v8::Value"*, %"class.v8::Value"** %92, align 8
  %100 = icmp eq %"class.v8::Value"* %99, null
  br i1 %100, label %101, label %125, !prof !2

101:                                              ; preds = %98
  %102 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %94, align 8
  %103 = icmp eq %"class.WTF::StringImpl"* %102, null
  br i1 %103, label %104, label %106

104:                                              ; preds = %101
  %105 = getelementptr inbounds %"class.blink::SecurityPolicyViolationEventInit", %"class.blink::SecurityPolicyViolationEventInit"* %2, i64 0, i32 4
  br label %150

106:                                              ; preds = %101
  %107 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %102, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %108 = load atomic i32, i32* %107 monotonic, align 4
  %109 = and i32 %108, 2
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %111, label %123

111:                                              ; preds = %106
  %112 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %102, i64 0, i32 0
  %113 = load i32, i32* %112, align 4
  %114 = zext i32 %113 to i33
  %115 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %114, i33 1) #7
  %116 = extractvalue { i33, i1 } %115, 1
  %117 = extractvalue { i33, i1 } %115, 0
  %118 = icmp slt i33 %117, 0
  %119 = or i1 %116, %118
  br i1 %119, label %120, label %121, !prof !2

120:                                              ; preds = %111
  call void @llvm.trap() #7
  unreachable

121:                                              ; preds = %111
  %122 = trunc i33 %117 to i32
  store i32 %122, i32* %112, align 4
  br label %123

123:                                              ; preds = %106, %121
  %124 = getelementptr inbounds %"class.blink::SecurityPolicyViolationEventInit", %"class.blink::SecurityPolicyViolationEventInit"* %2, i64 0, i32 4
  br label %131

125:                                              ; preds = %98
  %126 = bitcast %"class.v8::Value"* %99 to %"class.v8::String"*
  %127 = load i32, i32* %93, align 8
  %128 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %126, i32 %127) #7
  %129 = getelementptr inbounds %"class.blink::SecurityPolicyViolationEventInit", %"class.blink::SecurityPolicyViolationEventInit"* %2, i64 0, i32 4
  %130 = icmp eq %"class.WTF::StringImpl"* %128, null
  br i1 %130, label %150, label %131

131:                                              ; preds = %123, %125
  %132 = phi %"class.WTF::String"* [ %124, %123 ], [ %129, %125 ]
  %133 = phi %"class.WTF::StringImpl"* [ %102, %123 ], [ %128, %125 ]
  %134 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %133, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %135 = load atomic i32, i32* %134 monotonic, align 4
  %136 = and i32 %135, 2
  %137 = icmp eq i32 %136, 0
  br i1 %137, label %138, label %150

138:                                              ; preds = %131
  %139 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %133, i64 0, i32 0
  %140 = load i32, i32* %139, align 4
  %141 = zext i32 %140 to i33
  %142 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %141, i33 1) #7
  %143 = extractvalue { i33, i1 } %142, 1
  %144 = extractvalue { i33, i1 } %142, 0
  %145 = icmp slt i33 %144, 0
  %146 = or i1 %143, %145
  br i1 %146, label %147, label %148, !prof !2

147:                                              ; preds = %138
  call void @llvm.trap() #7
  unreachable

148:                                              ; preds = %138
  %149 = trunc i33 %144 to i32
  store i32 %149, i32* %139, align 4
  br label %150

150:                                              ; preds = %104, %148, %131, %125
  %151 = phi i1 [ false, %148 ], [ false, %131 ], [ true, %125 ], [ true, %104 ]
  %152 = phi %"class.WTF::String"* [ %132, %148 ], [ %132, %131 ], [ %129, %125 ], [ %105, %104 ]
  %153 = phi %"class.WTF::StringImpl"* [ %133, %148 ], [ %133, %131 ], [ null, %125 ], [ null, %104 ]
  %154 = ptrtoint %"class.WTF::StringImpl"* %153 to i64
  %155 = bitcast %"class.WTF::String"* %152 to i64*
  %156 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %152, i64 0, i32 0, i32 0
  %157 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %156, align 8
  store i64 %154, i64* %155, align 8
  %158 = icmp eq %"class.WTF::StringImpl"* %157, null
  br i1 %158, label %172, label %159

159:                                              ; preds = %150
  %160 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %157, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %161 = load atomic i32, i32* %160 monotonic, align 4
  %162 = and i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %157, i64 0, i32 0
  %165 = load i32, i32* %164, align 4
  br i1 %163, label %166, label %168

166:                                              ; preds = %159
  %167 = add i32 %165, -1
  store i32 %167, i32* %164, align 4
  br label %168

168:                                              ; preds = %166, %159
  %169 = phi i32 [ %167, %166 ], [ %165, %159 ]
  %170 = icmp eq i32 %169, 0
  br i1 %170, label %171, label %172

171:                                              ; preds = %168
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %157) #7
  br label %172

172:                                              ; preds = %150, %168, %171
  br i1 %151, label %186, label %173

173:                                              ; preds = %172
  %174 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %153, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %175 = load atomic i32, i32* %174 monotonic, align 4
  %176 = and i32 %175, 2
  %177 = icmp eq i32 %176, 0
  %178 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %153, i64 0, i32 0
  %179 = load i32, i32* %178, align 4
  br i1 %177, label %180, label %182

180:                                              ; preds = %173
  %181 = add i32 %179, -1
  store i32 %181, i32* %178, align 4
  br label %182

182:                                              ; preds = %180, %173
  %183 = phi i32 [ %181, %180 ], [ %179, %173 ]
  %184 = icmp eq i32 %183, 0
  br i1 %184, label %185, label %186

185:                                              ; preds = %182
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %153) #7
  br label %186

186:                                              ; preds = %172, %182, %185
  %187 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %6, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %188 = load i8*, i8** %187, align 8
  store i8* null, i8** %187, align 8
  %189 = icmp eq i8* %188, null
  br i1 %189, label %191, label %190

190:                                              ; preds = %186
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %188) #7
  br label %191

191:                                              ; preds = %190, %186
  %192 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %94, align 8
  %193 = icmp eq %"class.WTF::StringImpl"* %192, null
  br i1 %193, label %207, label %194

194:                                              ; preds = %191
  %195 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %192, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %196 = load atomic i32, i32* %195 monotonic, align 4
  %197 = and i32 %196, 2
  %198 = icmp eq i32 %197, 0
  %199 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %192, i64 0, i32 0
  %200 = load i32, i32* %199, align 4
  br i1 %198, label %201, label %203

201:                                              ; preds = %194
  %202 = add i32 %200, -1
  store i32 %202, i32* %199, align 4
  br label %203

203:                                              ; preds = %201, %194
  %204 = phi i32 [ %202, %201 ], [ %200, %194 ]
  %205 = icmp eq i32 %204, 0
  br i1 %205, label %206, label %207

206:                                              ; preds = %203
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %192) #7
  br label %207

207:                                              ; preds = %191, %203, %206
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %91) #7
  br label %230

208:                                              ; preds = %90
  %209 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %6, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %210 = load i8*, i8** %209, align 8
  store i8* null, i8** %209, align 8
  %211 = icmp eq i8* %210, null
  br i1 %211, label %213, label %212

212:                                              ; preds = %208
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %210) #7
  br label %213

213:                                              ; preds = %212, %208
  %214 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %94, align 8
  %215 = icmp eq %"class.WTF::StringImpl"* %214, null
  br i1 %215, label %229, label %216

216:                                              ; preds = %213
  %217 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %214, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %218 = load atomic i32, i32* %217 monotonic, align 4
  %219 = and i32 %218, 2
  %220 = icmp eq i32 %219, 0
  %221 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %214, i64 0, i32 0
  %222 = load i32, i32* %221, align 4
  br i1 %220, label %223, label %225

223:                                              ; preds = %216
  %224 = add i32 %222, -1
  store i32 %224, i32* %221, align 4
  br label %225

225:                                              ; preds = %223, %216
  %226 = phi i32 [ %224, %223 ], [ %222, %216 ]
  %227 = icmp eq i32 %226, 0
  br i1 %227, label %228, label %229

228:                                              ; preds = %225
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %214) #7
  br label %229

229:                                              ; preds = %213, %225, %228
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %91) #7
  br label %1826

230:                                              ; preds = %207, %84
  %231 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %55, i64 1, i32 0
  %232 = bitcast %"class.v8::Name"** %231 to %"class.v8::Value"**
  %233 = load %"class.v8::Value"*, %"class.v8::Value"** %232, align 8
  %234 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %44, %"class.v8::Context"* %57, %"class.v8::Value"* %233) #7
  %235 = icmp eq %"class.v8::Value"* %234, null
  br i1 %235, label %236, label %242

236:                                              ; preds = %230
  %237 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %238 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %239 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %238, align 8
  %240 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %239, i64 5
  %241 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %240, align 8
  call void %241(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %237) #7
  br label %1826

242:                                              ; preds = %230
  %243 = bitcast %"class.v8::Value"* %234 to i64*
  %244 = load i64, i64* %243, align 8
  %245 = and i64 %244, 3
  %246 = icmp eq i64 %245, 1
  br i1 %246, label %247, label %264

247:                                              ; preds = %242
  %248 = add i64 %244, -1
  %249 = inttoptr i64 %248 to i32*
  %250 = load i32, i32* %249, align 4
  %251 = and i64 %244, -4294967296
  %252 = zext i32 %250 to i64
  %253 = or i64 %251, %252
  %254 = add i64 %253, 7
  %255 = inttoptr i64 %254 to i16*
  %256 = load i16, i16* %255, align 2
  %257 = icmp eq i16 %256, 67
  br i1 %257, label %258, label %264

258:                                              ; preds = %247
  %259 = add i64 %244, 23
  %260 = inttoptr i64 %259 to i32*
  %261 = load i32, i32* %260, align 4
  %262 = and i32 %261, -2
  %263 = icmp eq i32 %262, 10
  br i1 %263, label %278, label %264

264:                                              ; preds = %247, %242, %258
  %265 = call zeroext i1 @_ZNK2v85Value7IsInt32Ev(%"class.v8::Value"* nonnull %234) #7
  br i1 %265, label %266, label %269, !prof !3

266:                                              ; preds = %264
  %267 = bitcast %"class.v8::Value"* %234 to %"class.v8::Int32"*
  %268 = call i32 @_ZNK2v85Int325ValueEv(%"class.v8::Int32"* nonnull %267) #7
  br label %271

269:                                              ; preds = %264
  %270 = call i32 @_ZN5blink11ToInt32SlowEPN2v87IsolateENS0_5LocalINS0_5ValueEEENS_30IntegerConversionConfigurationERNS_14ExceptionStateE(%"class.v8::Isolate"* %0, %"class.v8::Value"* nonnull %234, i32 0, %"class.blink::ExceptionState"* dereferenceable(72) %3) #7
  br label %271

271:                                              ; preds = %266, %269
  %272 = phi i32 [ %268, %266 ], [ %270, %269 ]
  %273 = load i32, i32* %46, align 8
  %274 = icmp eq i32 %273, 0
  br i1 %274, label %275, label %1826

275:                                              ; preds = %271
  %276 = getelementptr inbounds %"class.blink::SecurityPolicyViolationEventInit", %"class.blink::SecurityPolicyViolationEventInit"* %2, i64 0, i32 5
  store i32 %272, i32* %276, align 8
  %277 = getelementptr inbounds %"class.blink::SecurityPolicyViolationEventInit", %"class.blink::SecurityPolicyViolationEventInit"* %2, i64 0, i32 1
  store i8 1, i8* %277, align 2
  br label %278

278:                                              ; preds = %275, %258
  %279 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %55, i64 2, i32 0
  %280 = bitcast %"class.v8::Name"** %279 to %"class.v8::Value"**
  %281 = load %"class.v8::Value"*, %"class.v8::Value"** %280, align 8
  %282 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %44, %"class.v8::Context"* %57, %"class.v8::Value"* %281) #7
  %283 = icmp eq %"class.v8::Value"* %282, null
  br i1 %283, label %284, label %290

284:                                              ; preds = %278
  %285 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %286 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %287 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %286, align 8
  %288 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %287, i64 5
  %289 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %288, align 8
  call void %289(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %285) #7
  br label %1826

290:                                              ; preds = %278
  %291 = bitcast %"class.v8::Value"* %282 to i64*
  %292 = load i64, i64* %291, align 8
  %293 = and i64 %292, 3
  %294 = icmp eq i64 %293, 1
  br i1 %294, label %295, label %313

295:                                              ; preds = %290
  %296 = add i64 %292, -1
  %297 = inttoptr i64 %296 to i32*
  %298 = load i32, i32* %297, align 4
  %299 = and i64 %292, -4294967296
  %300 = zext i32 %298 to i64
  %301 = or i64 %299, %300
  %302 = add i64 %301, 7
  %303 = inttoptr i64 %302 to i16*
  %304 = load i16, i16* %303, align 2
  %305 = icmp eq i16 %304, 67
  br i1 %305, label %306, label %313

306:                                              ; preds = %295
  %307 = add i64 %292, 23
  %308 = inttoptr i64 %307 to i32*
  %309 = load i32, i32* %308, align 4
  %310 = and i32 %309, -2
  %311 = icmp eq i32 %310, 10
  br i1 %311, label %312, label %313

312:                                              ; preds = %306
  call void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"* %3, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.2, i64 0, i64 0)) #7
  br label %1826

313:                                              ; preds = %295, %290, %306
  %314 = bitcast %"class.blink::V8StringResource"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %314) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %314, i8 -86, i64 152, i1 false)
  %315 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %7, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %282, %"class.v8::Value"** %315, align 8
  %316 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %7, i64 0, i32 1
  store i32 0, i32* %316, align 8
  %317 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %7, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %317, align 8
  %318 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %7, i64 0, i32 3, i32 1
  %319 = bitcast %"class.std::__1::unique_ptr"* %318 to i64*
  store i64 0, i64* %319, align 8
  %320 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %7, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %320, label %321, label %502

321:                                              ; preds = %313
  %322 = bitcast %"class.WTF::String"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %322) #7
  %323 = load %"class.v8::Value"*, %"class.v8::Value"** %315, align 8
  %324 = icmp eq %"class.v8::Value"* %323, null
  br i1 %324, label %329, label %325, !prof !2

325:                                              ; preds = %321
  %326 = bitcast %"class.v8::Value"* %323 to %"class.v8::String"*
  %327 = load i32, i32* %316, align 8
  %328 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %326, i32 %327) #7
  br label %349

329:                                              ; preds = %321
  %330 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %317, align 8
  %331 = icmp eq %"class.WTF::StringImpl"* %330, null
  br i1 %331, label %349, label %332

332:                                              ; preds = %329
  %333 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %330, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %334 = load atomic i32, i32* %333 monotonic, align 4
  %335 = and i32 %334, 2
  %336 = icmp eq i32 %335, 0
  br i1 %336, label %337, label %349

337:                                              ; preds = %332
  %338 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %330, i64 0, i32 0
  %339 = load i32, i32* %338, align 4
  %340 = zext i32 %339 to i33
  %341 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %340, i33 1) #7
  %342 = extractvalue { i33, i1 } %341, 1
  %343 = extractvalue { i33, i1 } %341, 0
  %344 = icmp slt i33 %343, 0
  %345 = or i1 %342, %344
  br i1 %345, label %346, label %347, !prof !2

346:                                              ; preds = %337
  call void @llvm.trap() #7
  unreachable

347:                                              ; preds = %337
  %348 = trunc i33 %343 to i32
  store i32 %348, i32* %338, align 4
  br label %349

349:                                              ; preds = %325, %329, %332, %347
  %350 = phi %"class.WTF::StringImpl"* [ %328, %325 ], [ null, %329 ], [ %330, %332 ], [ %330, %347 ]
  %351 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %8, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %350, %"class.WTF::StringImpl"** %351, align 8
  %352 = bitcast %"class.WTF::String"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %352) #7
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %9, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.5, i64 0, i64 0), i64 39) #7
  %353 = call zeroext i1 @_ZN5blink11IsValidEnumERKN3WTF6StringEPKPKcmS3_RNS_14ExceptionStateE(%"class.WTF::String"* nonnull dereferenceable(8) %8, i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @_ZZN5blink34V8SecurityPolicyViolationEventInit6ToImplEPN2v87IsolateENS1_5LocalINS1_5ValueEEEPNS_32SecurityPolicyViolationEventInitERNS_14ExceptionStateEE12kValidValues, i64 0, i64 0), i64 2, %"class.WTF::String"* nonnull dereferenceable(8) %9, %"class.blink::ExceptionState"* dereferenceable(72) %3) #7
  %354 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %9, i64 0, i32 0, i32 0
  %355 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %354, align 8
  %356 = icmp eq %"class.WTF::StringImpl"* %355, null
  br i1 %356, label %370, label %357

357:                                              ; preds = %349
  %358 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %355, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %359 = load atomic i32, i32* %358 monotonic, align 4
  %360 = and i32 %359, 2
  %361 = icmp eq i32 %360, 0
  %362 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %355, i64 0, i32 0
  %363 = load i32, i32* %362, align 4
  br i1 %361, label %364, label %366

364:                                              ; preds = %357
  %365 = add i32 %363, -1
  store i32 %365, i32* %362, align 4
  br label %366

366:                                              ; preds = %364, %357
  %367 = phi i32 [ %365, %364 ], [ %363, %357 ]
  %368 = icmp eq i32 %367, 0
  br i1 %368, label %369, label %370

369:                                              ; preds = %366
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %355) #7
  br label %370

370:                                              ; preds = %349, %366, %369
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %352) #7
  %371 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %351, align 8
  %372 = icmp eq %"class.WTF::StringImpl"* %371, null
  br i1 %372, label %386, label %373

373:                                              ; preds = %370
  %374 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %371, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %375 = load atomic i32, i32* %374 monotonic, align 4
  %376 = and i32 %375, 2
  %377 = icmp eq i32 %376, 0
  %378 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %371, i64 0, i32 0
  %379 = load i32, i32* %378, align 4
  br i1 %377, label %380, label %382

380:                                              ; preds = %373
  %381 = add i32 %379, -1
  store i32 %381, i32* %378, align 4
  br label %382

382:                                              ; preds = %380, %373
  %383 = phi i32 [ %381, %380 ], [ %379, %373 ]
  %384 = icmp eq i32 %383, 0
  br i1 %384, label %385, label %386

385:                                              ; preds = %382
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %371) #7
  br label %386

386:                                              ; preds = %370, %382, %385
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %322) #7
  br i1 %353, label %387, label %502

387:                                              ; preds = %386
  %388 = load %"class.v8::Value"*, %"class.v8::Value"** %315, align 8
  %389 = icmp eq %"class.v8::Value"* %388, null
  br i1 %389, label %390, label %414, !prof !2

390:                                              ; preds = %387
  %391 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %317, align 8
  %392 = icmp eq %"class.WTF::StringImpl"* %391, null
  br i1 %392, label %393, label %395

393:                                              ; preds = %390
  %394 = getelementptr inbounds %"class.blink::SecurityPolicyViolationEventInit", %"class.blink::SecurityPolicyViolationEventInit"* %2, i64 0, i32 6
  br label %439

395:                                              ; preds = %390
  %396 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %391, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %397 = load atomic i32, i32* %396 monotonic, align 4
  %398 = and i32 %397, 2
  %399 = icmp eq i32 %398, 0
  br i1 %399, label %400, label %412

400:                                              ; preds = %395
  %401 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %391, i64 0, i32 0
  %402 = load i32, i32* %401, align 4
  %403 = zext i32 %402 to i33
  %404 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %403, i33 1) #7
  %405 = extractvalue { i33, i1 } %404, 1
  %406 = extractvalue { i33, i1 } %404, 0
  %407 = icmp slt i33 %406, 0
  %408 = or i1 %405, %407
  br i1 %408, label %409, label %410, !prof !2

409:                                              ; preds = %400
  call void @llvm.trap() #7
  unreachable

410:                                              ; preds = %400
  %411 = trunc i33 %406 to i32
  store i32 %411, i32* %401, align 4
  br label %412

412:                                              ; preds = %395, %410
  %413 = getelementptr inbounds %"class.blink::SecurityPolicyViolationEventInit", %"class.blink::SecurityPolicyViolationEventInit"* %2, i64 0, i32 6
  br label %420

414:                                              ; preds = %387
  %415 = bitcast %"class.v8::Value"* %388 to %"class.v8::String"*
  %416 = load i32, i32* %316, align 8
  %417 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %415, i32 %416) #7
  %418 = getelementptr inbounds %"class.blink::SecurityPolicyViolationEventInit", %"class.blink::SecurityPolicyViolationEventInit"* %2, i64 0, i32 6
  %419 = icmp eq %"class.WTF::StringImpl"* %417, null
  br i1 %419, label %439, label %420

420:                                              ; preds = %412, %414
  %421 = phi %"class.WTF::String"* [ %413, %412 ], [ %418, %414 ]
  %422 = phi %"class.WTF::StringImpl"* [ %391, %412 ], [ %417, %414 ]
  %423 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %422, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %424 = load atomic i32, i32* %423 monotonic, align 4
  %425 = and i32 %424, 2
  %426 = icmp eq i32 %425, 0
  br i1 %426, label %427, label %439

427:                                              ; preds = %420
  %428 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %422, i64 0, i32 0
  %429 = load i32, i32* %428, align 4
  %430 = zext i32 %429 to i33
  %431 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %430, i33 1) #7
  %432 = extractvalue { i33, i1 } %431, 1
  %433 = extractvalue { i33, i1 } %431, 0
  %434 = icmp slt i33 %433, 0
  %435 = or i1 %432, %434
  br i1 %435, label %436, label %437, !prof !2

436:                                              ; preds = %427
  call void @llvm.trap() #7
  unreachable

437:                                              ; preds = %427
  %438 = trunc i33 %433 to i32
  store i32 %438, i32* %428, align 4
  br label %439

439:                                              ; preds = %393, %437, %420, %414
  %440 = phi i1 [ false, %437 ], [ false, %420 ], [ true, %414 ], [ true, %393 ]
  %441 = phi %"class.WTF::String"* [ %421, %437 ], [ %421, %420 ], [ %418, %414 ], [ %394, %393 ]
  %442 = phi %"class.WTF::StringImpl"* [ %422, %437 ], [ %422, %420 ], [ null, %414 ], [ null, %393 ]
  %443 = ptrtoint %"class.WTF::StringImpl"* %442 to i64
  %444 = bitcast %"class.WTF::String"* %441 to i64*
  %445 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %441, i64 0, i32 0, i32 0
  %446 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %445, align 8
  store i64 %443, i64* %444, align 8
  %447 = icmp eq %"class.WTF::StringImpl"* %446, null
  br i1 %447, label %461, label %448

448:                                              ; preds = %439
  %449 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %446, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %450 = load atomic i32, i32* %449 monotonic, align 4
  %451 = and i32 %450, 2
  %452 = icmp eq i32 %451, 0
  %453 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %446, i64 0, i32 0
  %454 = load i32, i32* %453, align 4
  br i1 %452, label %455, label %457

455:                                              ; preds = %448
  %456 = add i32 %454, -1
  store i32 %456, i32* %453, align 4
  br label %457

457:                                              ; preds = %455, %448
  %458 = phi i32 [ %456, %455 ], [ %454, %448 ]
  %459 = icmp eq i32 %458, 0
  br i1 %459, label %460, label %461

460:                                              ; preds = %457
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %446) #7
  br label %461

461:                                              ; preds = %439, %457, %460
  br i1 %440, label %475, label %462

462:                                              ; preds = %461
  %463 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %442, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %464 = load atomic i32, i32* %463 monotonic, align 4
  %465 = and i32 %464, 2
  %466 = icmp eq i32 %465, 0
  %467 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %442, i64 0, i32 0
  %468 = load i32, i32* %467, align 4
  br i1 %466, label %469, label %471

469:                                              ; preds = %462
  %470 = add i32 %468, -1
  store i32 %470, i32* %467, align 4
  br label %471

471:                                              ; preds = %469, %462
  %472 = phi i32 [ %470, %469 ], [ %468, %462 ]
  %473 = icmp eq i32 %472, 0
  br i1 %473, label %474, label %475

474:                                              ; preds = %471
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %442) #7
  br label %475

475:                                              ; preds = %461, %471, %474
  %476 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %7, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %477 = load i8*, i8** %476, align 8
  store i8* null, i8** %476, align 8
  %478 = icmp eq i8* %477, null
  br i1 %478, label %480, label %479

479:                                              ; preds = %475
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %477) #7
  br label %480

480:                                              ; preds = %479, %475
  %481 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %317, align 8
  %482 = icmp eq %"class.WTF::StringImpl"* %481, null
  br i1 %482, label %496, label %483

483:                                              ; preds = %480
  %484 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %481, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %485 = load atomic i32, i32* %484 monotonic, align 4
  %486 = and i32 %485, 2
  %487 = icmp eq i32 %486, 0
  %488 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %481, i64 0, i32 0
  %489 = load i32, i32* %488, align 4
  br i1 %487, label %490, label %492

490:                                              ; preds = %483
  %491 = add i32 %489, -1
  store i32 %491, i32* %488, align 4
  br label %492

492:                                              ; preds = %490, %483
  %493 = phi i32 [ %491, %490 ], [ %489, %483 ]
  %494 = icmp eq i32 %493, 0
  br i1 %494, label %495, label %496

495:                                              ; preds = %492
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %481) #7
  br label %496

496:                                              ; preds = %480, %492, %495
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %314) #7
  %497 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %55, i64 3, i32 0
  %498 = bitcast %"class.v8::Name"** %497 to %"class.v8::Value"**
  %499 = load %"class.v8::Value"*, %"class.v8::Value"** %498, align 8
  %500 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %44, %"class.v8::Context"* %57, %"class.v8::Value"* %499) #7
  %501 = icmp eq %"class.v8::Value"* %500, null
  br i1 %501, label %524, label %530

502:                                              ; preds = %386, %313
  %503 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %7, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %504 = load i8*, i8** %503, align 8
  store i8* null, i8** %503, align 8
  %505 = icmp eq i8* %504, null
  br i1 %505, label %507, label %506

506:                                              ; preds = %502
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %504) #7
  br label %507

507:                                              ; preds = %506, %502
  %508 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %317, align 8
  %509 = icmp eq %"class.WTF::StringImpl"* %508, null
  br i1 %509, label %523, label %510

510:                                              ; preds = %507
  %511 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %508, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %512 = load atomic i32, i32* %511 monotonic, align 4
  %513 = and i32 %512, 2
  %514 = icmp eq i32 %513, 0
  %515 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %508, i64 0, i32 0
  %516 = load i32, i32* %515, align 4
  br i1 %514, label %517, label %519

517:                                              ; preds = %510
  %518 = add i32 %516, -1
  store i32 %518, i32* %515, align 4
  br label %519

519:                                              ; preds = %517, %510
  %520 = phi i32 [ %518, %517 ], [ %516, %510 ]
  %521 = icmp eq i32 %520, 0
  br i1 %521, label %522, label %523

522:                                              ; preds = %519
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %508) #7
  br label %523

523:                                              ; preds = %507, %519, %522
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %314) #7
  br label %1826

524:                                              ; preds = %496
  %525 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %526 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %527 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %526, align 8
  %528 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %527, i64 5
  %529 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %528, align 8
  call void %529(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %525) #7
  br label %1826

530:                                              ; preds = %496
  %531 = bitcast %"class.v8::Value"* %500 to i64*
  %532 = load i64, i64* %531, align 8
  %533 = and i64 %532, 3
  %534 = icmp eq i64 %533, 1
  br i1 %534, label %535, label %553

535:                                              ; preds = %530
  %536 = add i64 %532, -1
  %537 = inttoptr i64 %536 to i32*
  %538 = load i32, i32* %537, align 4
  %539 = and i64 %532, -4294967296
  %540 = zext i32 %538 to i64
  %541 = or i64 %539, %540
  %542 = add i64 %541, 7
  %543 = inttoptr i64 %542 to i16*
  %544 = load i16, i16* %543, align 2
  %545 = icmp eq i16 %544, 67
  br i1 %545, label %546, label %553

546:                                              ; preds = %535
  %547 = add i64 %532, 23
  %548 = inttoptr i64 %547 to i32*
  %549 = load i32, i32* %548, align 4
  %550 = and i32 %549, -2
  %551 = icmp eq i32 %550, 10
  br i1 %551, label %552, label %553

552:                                              ; preds = %546
  call void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"* %3, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.6, i64 0, i64 0)) #7
  br label %1826

553:                                              ; preds = %535, %530, %546
  %554 = bitcast %"class.blink::V8StringResource"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %554) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %554, i8 -86, i64 152, i1 false)
  %555 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %10, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %500, %"class.v8::Value"** %555, align 8
  %556 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %10, i64 0, i32 1
  store i32 0, i32* %556, align 8
  %557 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %10, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %557, align 8
  %558 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %10, i64 0, i32 3, i32 1
  %559 = bitcast %"class.std::__1::unique_ptr"* %558 to i64*
  store i64 0, i64* %559, align 8
  %560 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %10, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %560, label %561, label %676

561:                                              ; preds = %553
  %562 = load %"class.v8::Value"*, %"class.v8::Value"** %555, align 8
  %563 = icmp eq %"class.v8::Value"* %562, null
  br i1 %563, label %564, label %588, !prof !2

564:                                              ; preds = %561
  %565 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %557, align 8
  %566 = icmp eq %"class.WTF::StringImpl"* %565, null
  br i1 %566, label %567, label %569

567:                                              ; preds = %564
  %568 = getelementptr inbounds %"class.blink::SecurityPolicyViolationEventInit", %"class.blink::SecurityPolicyViolationEventInit"* %2, i64 0, i32 7
  br label %613

569:                                              ; preds = %564
  %570 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %565, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %571 = load atomic i32, i32* %570 monotonic, align 4
  %572 = and i32 %571, 2
  %573 = icmp eq i32 %572, 0
  br i1 %573, label %574, label %586

574:                                              ; preds = %569
  %575 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %565, i64 0, i32 0
  %576 = load i32, i32* %575, align 4
  %577 = zext i32 %576 to i33
  %578 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %577, i33 1) #7
  %579 = extractvalue { i33, i1 } %578, 1
  %580 = extractvalue { i33, i1 } %578, 0
  %581 = icmp slt i33 %580, 0
  %582 = or i1 %579, %581
  br i1 %582, label %583, label %584, !prof !2

583:                                              ; preds = %574
  call void @llvm.trap() #7
  unreachable

584:                                              ; preds = %574
  %585 = trunc i33 %580 to i32
  store i32 %585, i32* %575, align 4
  br label %586

586:                                              ; preds = %569, %584
  %587 = getelementptr inbounds %"class.blink::SecurityPolicyViolationEventInit", %"class.blink::SecurityPolicyViolationEventInit"* %2, i64 0, i32 7
  br label %594

588:                                              ; preds = %561
  %589 = bitcast %"class.v8::Value"* %562 to %"class.v8::String"*
  %590 = load i32, i32* %556, align 8
  %591 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %589, i32 %590) #7
  %592 = getelementptr inbounds %"class.blink::SecurityPolicyViolationEventInit", %"class.blink::SecurityPolicyViolationEventInit"* %2, i64 0, i32 7
  %593 = icmp eq %"class.WTF::StringImpl"* %591, null
  br i1 %593, label %613, label %594

594:                                              ; preds = %586, %588
  %595 = phi %"class.WTF::String"* [ %587, %586 ], [ %592, %588 ]
  %596 = phi %"class.WTF::StringImpl"* [ %565, %586 ], [ %591, %588 ]
  %597 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %596, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %598 = load atomic i32, i32* %597 monotonic, align 4
  %599 = and i32 %598, 2
  %600 = icmp eq i32 %599, 0
  br i1 %600, label %601, label %613

601:                                              ; preds = %594
  %602 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %596, i64 0, i32 0
  %603 = load i32, i32* %602, align 4
  %604 = zext i32 %603 to i33
  %605 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %604, i33 1) #7
  %606 = extractvalue { i33, i1 } %605, 1
  %607 = extractvalue { i33, i1 } %605, 0
  %608 = icmp slt i33 %607, 0
  %609 = or i1 %606, %608
  br i1 %609, label %610, label %611, !prof !2

610:                                              ; preds = %601
  call void @llvm.trap() #7
  unreachable

611:                                              ; preds = %601
  %612 = trunc i33 %607 to i32
  store i32 %612, i32* %602, align 4
  br label %613

613:                                              ; preds = %567, %611, %594, %588
  %614 = phi i1 [ false, %611 ], [ false, %594 ], [ true, %588 ], [ true, %567 ]
  %615 = phi %"class.WTF::String"* [ %595, %611 ], [ %595, %594 ], [ %592, %588 ], [ %568, %567 ]
  %616 = phi %"class.WTF::StringImpl"* [ %596, %611 ], [ %596, %594 ], [ null, %588 ], [ null, %567 ]
  %617 = ptrtoint %"class.WTF::StringImpl"* %616 to i64
  %618 = bitcast %"class.WTF::String"* %615 to i64*
  %619 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %615, i64 0, i32 0, i32 0
  %620 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %619, align 8
  store i64 %617, i64* %618, align 8
  %621 = icmp eq %"class.WTF::StringImpl"* %620, null
  br i1 %621, label %635, label %622

622:                                              ; preds = %613
  %623 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %620, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %624 = load atomic i32, i32* %623 monotonic, align 4
  %625 = and i32 %624, 2
  %626 = icmp eq i32 %625, 0
  %627 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %620, i64 0, i32 0
  %628 = load i32, i32* %627, align 4
  br i1 %626, label %629, label %631

629:                                              ; preds = %622
  %630 = add i32 %628, -1
  store i32 %630, i32* %627, align 4
  br label %631

631:                                              ; preds = %629, %622
  %632 = phi i32 [ %630, %629 ], [ %628, %622 ]
  %633 = icmp eq i32 %632, 0
  br i1 %633, label %634, label %635

634:                                              ; preds = %631
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %620) #7
  br label %635

635:                                              ; preds = %613, %631, %634
  br i1 %614, label %649, label %636

636:                                              ; preds = %635
  %637 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %616, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %638 = load atomic i32, i32* %637 monotonic, align 4
  %639 = and i32 %638, 2
  %640 = icmp eq i32 %639, 0
  %641 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %616, i64 0, i32 0
  %642 = load i32, i32* %641, align 4
  br i1 %640, label %643, label %645

643:                                              ; preds = %636
  %644 = add i32 %642, -1
  store i32 %644, i32* %641, align 4
  br label %645

645:                                              ; preds = %643, %636
  %646 = phi i32 [ %644, %643 ], [ %642, %636 ]
  %647 = icmp eq i32 %646, 0
  br i1 %647, label %648, label %649

648:                                              ; preds = %645
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %616) #7
  br label %649

649:                                              ; preds = %635, %645, %648
  %650 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %10, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %651 = load i8*, i8** %650, align 8
  store i8* null, i8** %650, align 8
  %652 = icmp eq i8* %651, null
  br i1 %652, label %654, label %653

653:                                              ; preds = %649
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %651) #7
  br label %654

654:                                              ; preds = %653, %649
  %655 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %557, align 8
  %656 = icmp eq %"class.WTF::StringImpl"* %655, null
  br i1 %656, label %670, label %657

657:                                              ; preds = %654
  %658 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %655, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %659 = load atomic i32, i32* %658 monotonic, align 4
  %660 = and i32 %659, 2
  %661 = icmp eq i32 %660, 0
  %662 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %655, i64 0, i32 0
  %663 = load i32, i32* %662, align 4
  br i1 %661, label %664, label %666

664:                                              ; preds = %657
  %665 = add i32 %663, -1
  store i32 %665, i32* %662, align 4
  br label %666

666:                                              ; preds = %664, %657
  %667 = phi i32 [ %665, %664 ], [ %663, %657 ]
  %668 = icmp eq i32 %667, 0
  br i1 %668, label %669, label %670

669:                                              ; preds = %666
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %655) #7
  br label %670

670:                                              ; preds = %654, %666, %669
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %554) #7
  %671 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %55, i64 4, i32 0
  %672 = bitcast %"class.v8::Name"** %671 to %"class.v8::Value"**
  %673 = load %"class.v8::Value"*, %"class.v8::Value"** %672, align 8
  %674 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %44, %"class.v8::Context"* %57, %"class.v8::Value"* %673) #7
  %675 = icmp eq %"class.v8::Value"* %674, null
  br i1 %675, label %698, label %704

676:                                              ; preds = %553
  %677 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %10, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %678 = load i8*, i8** %677, align 8
  store i8* null, i8** %677, align 8
  %679 = icmp eq i8* %678, null
  br i1 %679, label %681, label %680

680:                                              ; preds = %676
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %678) #7
  br label %681

681:                                              ; preds = %680, %676
  %682 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %557, align 8
  %683 = icmp eq %"class.WTF::StringImpl"* %682, null
  br i1 %683, label %697, label %684

684:                                              ; preds = %681
  %685 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %682, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %686 = load atomic i32, i32* %685 monotonic, align 4
  %687 = and i32 %686, 2
  %688 = icmp eq i32 %687, 0
  %689 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %682, i64 0, i32 0
  %690 = load i32, i32* %689, align 4
  br i1 %688, label %691, label %693

691:                                              ; preds = %684
  %692 = add i32 %690, -1
  store i32 %692, i32* %689, align 4
  br label %693

693:                                              ; preds = %691, %684
  %694 = phi i32 [ %692, %691 ], [ %690, %684 ]
  %695 = icmp eq i32 %694, 0
  br i1 %695, label %696, label %697

696:                                              ; preds = %693
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %682) #7
  br label %697

697:                                              ; preds = %681, %693, %696
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %554) #7
  br label %1826

698:                                              ; preds = %670
  %699 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %700 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %701 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %700, align 8
  %702 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %701, i64 5
  %703 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %702, align 8
  call void %703(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %699) #7
  br label %1826

704:                                              ; preds = %670
  %705 = bitcast %"class.v8::Value"* %674 to i64*
  %706 = load i64, i64* %705, align 8
  %707 = and i64 %706, 3
  %708 = icmp eq i64 %707, 1
  br i1 %708, label %709, label %727

709:                                              ; preds = %704
  %710 = add i64 %706, -1
  %711 = inttoptr i64 %710 to i32*
  %712 = load i32, i32* %711, align 4
  %713 = and i64 %706, -4294967296
  %714 = zext i32 %712 to i64
  %715 = or i64 %713, %714
  %716 = add i64 %715, 7
  %717 = inttoptr i64 %716 to i16*
  %718 = load i16, i16* %717, align 2
  %719 = icmp eq i16 %718, 67
  br i1 %719, label %720, label %727

720:                                              ; preds = %709
  %721 = add i64 %706, 23
  %722 = inttoptr i64 %721 to i32*
  %723 = load i32, i32* %722, align 4
  %724 = and i32 %723, -2
  %725 = icmp eq i32 %724, 10
  br i1 %725, label %726, label %727

726:                                              ; preds = %720
  call void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"* %3, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.7, i64 0, i64 0)) #7
  br label %1826

727:                                              ; preds = %709, %704, %720
  %728 = bitcast %"class.blink::V8StringResource"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %728) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %728, i8 -86, i64 152, i1 false)
  %729 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %11, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %674, %"class.v8::Value"** %729, align 8
  %730 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %11, i64 0, i32 1
  store i32 0, i32* %730, align 8
  %731 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %11, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %731, align 8
  %732 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %11, i64 0, i32 3, i32 1
  %733 = bitcast %"class.std::__1::unique_ptr"* %732 to i64*
  store i64 0, i64* %733, align 8
  %734 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %11, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %734, label %735, label %850

735:                                              ; preds = %727
  %736 = load %"class.v8::Value"*, %"class.v8::Value"** %729, align 8
  %737 = icmp eq %"class.v8::Value"* %736, null
  br i1 %737, label %738, label %762, !prof !2

738:                                              ; preds = %735
  %739 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %731, align 8
  %740 = icmp eq %"class.WTF::StringImpl"* %739, null
  br i1 %740, label %741, label %743

741:                                              ; preds = %738
  %742 = getelementptr inbounds %"class.blink::SecurityPolicyViolationEventInit", %"class.blink::SecurityPolicyViolationEventInit"* %2, i64 0, i32 8
  br label %787

743:                                              ; preds = %738
  %744 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %739, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %745 = load atomic i32, i32* %744 monotonic, align 4
  %746 = and i32 %745, 2
  %747 = icmp eq i32 %746, 0
  br i1 %747, label %748, label %760

748:                                              ; preds = %743
  %749 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %739, i64 0, i32 0
  %750 = load i32, i32* %749, align 4
  %751 = zext i32 %750 to i33
  %752 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %751, i33 1) #7
  %753 = extractvalue { i33, i1 } %752, 1
  %754 = extractvalue { i33, i1 } %752, 0
  %755 = icmp slt i33 %754, 0
  %756 = or i1 %753, %755
  br i1 %756, label %757, label %758, !prof !2

757:                                              ; preds = %748
  call void @llvm.trap() #7
  unreachable

758:                                              ; preds = %748
  %759 = trunc i33 %754 to i32
  store i32 %759, i32* %749, align 4
  br label %760

760:                                              ; preds = %743, %758
  %761 = getelementptr inbounds %"class.blink::SecurityPolicyViolationEventInit", %"class.blink::SecurityPolicyViolationEventInit"* %2, i64 0, i32 8
  br label %768

762:                                              ; preds = %735
  %763 = bitcast %"class.v8::Value"* %736 to %"class.v8::String"*
  %764 = load i32, i32* %730, align 8
  %765 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %763, i32 %764) #7
  %766 = getelementptr inbounds %"class.blink::SecurityPolicyViolationEventInit", %"class.blink::SecurityPolicyViolationEventInit"* %2, i64 0, i32 8
  %767 = icmp eq %"class.WTF::StringImpl"* %765, null
  br i1 %767, label %787, label %768

768:                                              ; preds = %760, %762
  %769 = phi %"class.WTF::String"* [ %761, %760 ], [ %766, %762 ]
  %770 = phi %"class.WTF::StringImpl"* [ %739, %760 ], [ %765, %762 ]
  %771 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %770, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %772 = load atomic i32, i32* %771 monotonic, align 4
  %773 = and i32 %772, 2
  %774 = icmp eq i32 %773, 0
  br i1 %774, label %775, label %787

775:                                              ; preds = %768
  %776 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %770, i64 0, i32 0
  %777 = load i32, i32* %776, align 4
  %778 = zext i32 %777 to i33
  %779 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %778, i33 1) #7
  %780 = extractvalue { i33, i1 } %779, 1
  %781 = extractvalue { i33, i1 } %779, 0
  %782 = icmp slt i33 %781, 0
  %783 = or i1 %780, %782
  br i1 %783, label %784, label %785, !prof !2

784:                                              ; preds = %775
  call void @llvm.trap() #7
  unreachable

785:                                              ; preds = %775
  %786 = trunc i33 %781 to i32
  store i32 %786, i32* %776, align 4
  br label %787

787:                                              ; preds = %741, %785, %768, %762
  %788 = phi i1 [ false, %785 ], [ false, %768 ], [ true, %762 ], [ true, %741 ]
  %789 = phi %"class.WTF::String"* [ %769, %785 ], [ %769, %768 ], [ %766, %762 ], [ %742, %741 ]
  %790 = phi %"class.WTF::StringImpl"* [ %770, %785 ], [ %770, %768 ], [ null, %762 ], [ null, %741 ]
  %791 = ptrtoint %"class.WTF::StringImpl"* %790 to i64
  %792 = bitcast %"class.WTF::String"* %789 to i64*
  %793 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %789, i64 0, i32 0, i32 0
  %794 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %793, align 8
  store i64 %791, i64* %792, align 8
  %795 = icmp eq %"class.WTF::StringImpl"* %794, null
  br i1 %795, label %809, label %796

796:                                              ; preds = %787
  %797 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %794, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %798 = load atomic i32, i32* %797 monotonic, align 4
  %799 = and i32 %798, 2
  %800 = icmp eq i32 %799, 0
  %801 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %794, i64 0, i32 0
  %802 = load i32, i32* %801, align 4
  br i1 %800, label %803, label %805

803:                                              ; preds = %796
  %804 = add i32 %802, -1
  store i32 %804, i32* %801, align 4
  br label %805

805:                                              ; preds = %803, %796
  %806 = phi i32 [ %804, %803 ], [ %802, %796 ]
  %807 = icmp eq i32 %806, 0
  br i1 %807, label %808, label %809

808:                                              ; preds = %805
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %794) #7
  br label %809

809:                                              ; preds = %787, %805, %808
  br i1 %788, label %823, label %810

810:                                              ; preds = %809
  %811 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %790, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %812 = load atomic i32, i32* %811 monotonic, align 4
  %813 = and i32 %812, 2
  %814 = icmp eq i32 %813, 0
  %815 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %790, i64 0, i32 0
  %816 = load i32, i32* %815, align 4
  br i1 %814, label %817, label %819

817:                                              ; preds = %810
  %818 = add i32 %816, -1
  store i32 %818, i32* %815, align 4
  br label %819

819:                                              ; preds = %817, %810
  %820 = phi i32 [ %818, %817 ], [ %816, %810 ]
  %821 = icmp eq i32 %820, 0
  br i1 %821, label %822, label %823

822:                                              ; preds = %819
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %790) #7
  br label %823

823:                                              ; preds = %809, %819, %822
  %824 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %11, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %825 = load i8*, i8** %824, align 8
  store i8* null, i8** %824, align 8
  %826 = icmp eq i8* %825, null
  br i1 %826, label %828, label %827

827:                                              ; preds = %823
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %825) #7
  br label %828

828:                                              ; preds = %827, %823
  %829 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %731, align 8
  %830 = icmp eq %"class.WTF::StringImpl"* %829, null
  br i1 %830, label %844, label %831

831:                                              ; preds = %828
  %832 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %829, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %833 = load atomic i32, i32* %832 monotonic, align 4
  %834 = and i32 %833, 2
  %835 = icmp eq i32 %834, 0
  %836 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %829, i64 0, i32 0
  %837 = load i32, i32* %836, align 4
  br i1 %835, label %838, label %840

838:                                              ; preds = %831
  %839 = add i32 %837, -1
  store i32 %839, i32* %836, align 4
  br label %840

840:                                              ; preds = %838, %831
  %841 = phi i32 [ %839, %838 ], [ %837, %831 ]
  %842 = icmp eq i32 %841, 0
  br i1 %842, label %843, label %844

843:                                              ; preds = %840
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %829) #7
  br label %844

844:                                              ; preds = %828, %840, %843
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %728) #7
  %845 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %55, i64 5, i32 0
  %846 = bitcast %"class.v8::Name"** %845 to %"class.v8::Value"**
  %847 = load %"class.v8::Value"*, %"class.v8::Value"** %846, align 8
  %848 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %44, %"class.v8::Context"* %57, %"class.v8::Value"* %847) #7
  %849 = icmp eq %"class.v8::Value"* %848, null
  br i1 %849, label %872, label %878

850:                                              ; preds = %727
  %851 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %11, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %852 = load i8*, i8** %851, align 8
  store i8* null, i8** %851, align 8
  %853 = icmp eq i8* %852, null
  br i1 %853, label %855, label %854

854:                                              ; preds = %850
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %852) #7
  br label %855

855:                                              ; preds = %854, %850
  %856 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %731, align 8
  %857 = icmp eq %"class.WTF::StringImpl"* %856, null
  br i1 %857, label %871, label %858

858:                                              ; preds = %855
  %859 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %856, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %860 = load atomic i32, i32* %859 monotonic, align 4
  %861 = and i32 %860, 2
  %862 = icmp eq i32 %861, 0
  %863 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %856, i64 0, i32 0
  %864 = load i32, i32* %863, align 4
  br i1 %862, label %865, label %867

865:                                              ; preds = %858
  %866 = add i32 %864, -1
  store i32 %866, i32* %863, align 4
  br label %867

867:                                              ; preds = %865, %858
  %868 = phi i32 [ %866, %865 ], [ %864, %858 ]
  %869 = icmp eq i32 %868, 0
  br i1 %869, label %870, label %871

870:                                              ; preds = %867
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %856) #7
  br label %871

871:                                              ; preds = %855, %867, %870
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %728) #7
  br label %1826

872:                                              ; preds = %844
  %873 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %874 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %875 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %874, align 8
  %876 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %875, i64 5
  %877 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %876, align 8
  call void %877(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %873) #7
  br label %1826

878:                                              ; preds = %844
  %879 = bitcast %"class.v8::Value"* %848 to i64*
  %880 = load i64, i64* %879, align 8
  %881 = and i64 %880, 3
  %882 = icmp eq i64 %881, 1
  br i1 %882, label %883, label %900

883:                                              ; preds = %878
  %884 = add i64 %880, -1
  %885 = inttoptr i64 %884 to i32*
  %886 = load i32, i32* %885, align 4
  %887 = and i64 %880, -4294967296
  %888 = zext i32 %886 to i64
  %889 = or i64 %887, %888
  %890 = add i64 %889, 7
  %891 = inttoptr i64 %890 to i16*
  %892 = load i16, i16* %891, align 2
  %893 = icmp eq i16 %892, 67
  br i1 %893, label %894, label %900

894:                                              ; preds = %883
  %895 = add i64 %880, 23
  %896 = inttoptr i64 %895 to i32*
  %897 = load i32, i32* %896, align 4
  %898 = and i32 %897, -2
  %899 = icmp eq i32 %898, 10
  br i1 %899, label %914, label %900

900:                                              ; preds = %883, %878, %894
  %901 = call zeroext i1 @_ZNK2v85Value7IsInt32Ev(%"class.v8::Value"* nonnull %848) #7
  br i1 %901, label %902, label %905, !prof !3

902:                                              ; preds = %900
  %903 = bitcast %"class.v8::Value"* %848 to %"class.v8::Int32"*
  %904 = call i32 @_ZNK2v85Int325ValueEv(%"class.v8::Int32"* nonnull %903) #7
  br label %907

905:                                              ; preds = %900
  %906 = call i32 @_ZN5blink11ToInt32SlowEPN2v87IsolateENS0_5LocalINS0_5ValueEEENS_30IntegerConversionConfigurationERNS_14ExceptionStateE(%"class.v8::Isolate"* %0, %"class.v8::Value"* nonnull %848, i32 0, %"class.blink::ExceptionState"* dereferenceable(72) %3) #7
  br label %907

907:                                              ; preds = %902, %905
  %908 = phi i32 [ %904, %902 ], [ %906, %905 ]
  %909 = load i32, i32* %46, align 8
  %910 = icmp eq i32 %909, 0
  br i1 %910, label %911, label %1826

911:                                              ; preds = %907
  %912 = getelementptr inbounds %"class.blink::SecurityPolicyViolationEventInit", %"class.blink::SecurityPolicyViolationEventInit"* %2, i64 0, i32 9
  store i32 %908, i32* %912, align 8
  %913 = getelementptr inbounds %"class.blink::SecurityPolicyViolationEventInit", %"class.blink::SecurityPolicyViolationEventInit"* %2, i64 0, i32 2
  store i8 1, i8* %913, align 1
  br label %914

914:                                              ; preds = %911, %894
  %915 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %55, i64 6, i32 0
  %916 = bitcast %"class.v8::Name"** %915 to %"class.v8::Value"**
  %917 = load %"class.v8::Value"*, %"class.v8::Value"** %916, align 8
  %918 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %44, %"class.v8::Context"* %57, %"class.v8::Value"* %917) #7
  %919 = icmp eq %"class.v8::Value"* %918, null
  br i1 %919, label %920, label %926

920:                                              ; preds = %914
  %921 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %922 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %923 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %922, align 8
  %924 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %923, i64 5
  %925 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %924, align 8
  call void %925(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %921) #7
  br label %1826

926:                                              ; preds = %914
  %927 = bitcast %"class.v8::Value"* %918 to i64*
  %928 = load i64, i64* %927, align 8
  %929 = and i64 %928, 3
  %930 = icmp eq i64 %929, 1
  br i1 %930, label %931, label %949

931:                                              ; preds = %926
  %932 = add i64 %928, -1
  %933 = inttoptr i64 %932 to i32*
  %934 = load i32, i32* %933, align 4
  %935 = and i64 %928, -4294967296
  %936 = zext i32 %934 to i64
  %937 = or i64 %935, %936
  %938 = add i64 %937, 7
  %939 = inttoptr i64 %938 to i16*
  %940 = load i16, i16* %939, align 2
  %941 = icmp eq i16 %940, 67
  br i1 %941, label %942, label %949

942:                                              ; preds = %931
  %943 = add i64 %928, 23
  %944 = inttoptr i64 %943 to i32*
  %945 = load i32, i32* %944, align 4
  %946 = and i32 %945, -2
  %947 = icmp eq i32 %946, 10
  br i1 %947, label %948, label %949

948:                                              ; preds = %942
  call void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"* %3, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.8, i64 0, i64 0)) #7
  br label %1826

949:                                              ; preds = %931, %926, %942
  %950 = bitcast %"class.blink::V8StringResource"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %950) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %950, i8 -86, i64 152, i1 false)
  %951 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %12, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %918, %"class.v8::Value"** %951, align 8
  %952 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %12, i64 0, i32 1
  store i32 0, i32* %952, align 8
  %953 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %12, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %953, align 8
  %954 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %12, i64 0, i32 3, i32 1
  %955 = bitcast %"class.std::__1::unique_ptr"* %954 to i64*
  store i64 0, i64* %955, align 8
  %956 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %12, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %956, label %957, label %1072

957:                                              ; preds = %949
  %958 = load %"class.v8::Value"*, %"class.v8::Value"** %951, align 8
  %959 = icmp eq %"class.v8::Value"* %958, null
  br i1 %959, label %960, label %984, !prof !2

960:                                              ; preds = %957
  %961 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %953, align 8
  %962 = icmp eq %"class.WTF::StringImpl"* %961, null
  br i1 %962, label %963, label %965

963:                                              ; preds = %960
  %964 = getelementptr inbounds %"class.blink::SecurityPolicyViolationEventInit", %"class.blink::SecurityPolicyViolationEventInit"* %2, i64 0, i32 10
  br label %1009

965:                                              ; preds = %960
  %966 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %961, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %967 = load atomic i32, i32* %966 monotonic, align 4
  %968 = and i32 %967, 2
  %969 = icmp eq i32 %968, 0
  br i1 %969, label %970, label %982

970:                                              ; preds = %965
  %971 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %961, i64 0, i32 0
  %972 = load i32, i32* %971, align 4
  %973 = zext i32 %972 to i33
  %974 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %973, i33 1) #7
  %975 = extractvalue { i33, i1 } %974, 1
  %976 = extractvalue { i33, i1 } %974, 0
  %977 = icmp slt i33 %976, 0
  %978 = or i1 %975, %977
  br i1 %978, label %979, label %980, !prof !2

979:                                              ; preds = %970
  call void @llvm.trap() #7
  unreachable

980:                                              ; preds = %970
  %981 = trunc i33 %976 to i32
  store i32 %981, i32* %971, align 4
  br label %982

982:                                              ; preds = %965, %980
  %983 = getelementptr inbounds %"class.blink::SecurityPolicyViolationEventInit", %"class.blink::SecurityPolicyViolationEventInit"* %2, i64 0, i32 10
  br label %990

984:                                              ; preds = %957
  %985 = bitcast %"class.v8::Value"* %958 to %"class.v8::String"*
  %986 = load i32, i32* %952, align 8
  %987 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %985, i32 %986) #7
  %988 = getelementptr inbounds %"class.blink::SecurityPolicyViolationEventInit", %"class.blink::SecurityPolicyViolationEventInit"* %2, i64 0, i32 10
  %989 = icmp eq %"class.WTF::StringImpl"* %987, null
  br i1 %989, label %1009, label %990

990:                                              ; preds = %982, %984
  %991 = phi %"class.WTF::String"* [ %983, %982 ], [ %988, %984 ]
  %992 = phi %"class.WTF::StringImpl"* [ %961, %982 ], [ %987, %984 ]
  %993 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %992, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %994 = load atomic i32, i32* %993 monotonic, align 4
  %995 = and i32 %994, 2
  %996 = icmp eq i32 %995, 0
  br i1 %996, label %997, label %1009

997:                                              ; preds = %990
  %998 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %992, i64 0, i32 0
  %999 = load i32, i32* %998, align 4
  %1000 = zext i32 %999 to i33
  %1001 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1000, i33 1) #7
  %1002 = extractvalue { i33, i1 } %1001, 1
  %1003 = extractvalue { i33, i1 } %1001, 0
  %1004 = icmp slt i33 %1003, 0
  %1005 = or i1 %1002, %1004
  br i1 %1005, label %1006, label %1007, !prof !2

1006:                                             ; preds = %997
  call void @llvm.trap() #7
  unreachable

1007:                                             ; preds = %997
  %1008 = trunc i33 %1003 to i32
  store i32 %1008, i32* %998, align 4
  br label %1009

1009:                                             ; preds = %963, %1007, %990, %984
  %1010 = phi i1 [ false, %1007 ], [ false, %990 ], [ true, %984 ], [ true, %963 ]
  %1011 = phi %"class.WTF::String"* [ %991, %1007 ], [ %991, %990 ], [ %988, %984 ], [ %964, %963 ]
  %1012 = phi %"class.WTF::StringImpl"* [ %992, %1007 ], [ %992, %990 ], [ null, %984 ], [ null, %963 ]
  %1013 = ptrtoint %"class.WTF::StringImpl"* %1012 to i64
  %1014 = bitcast %"class.WTF::String"* %1011 to i64*
  %1015 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1011, i64 0, i32 0, i32 0
  %1016 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1015, align 8
  store i64 %1013, i64* %1014, align 8
  %1017 = icmp eq %"class.WTF::StringImpl"* %1016, null
  br i1 %1017, label %1031, label %1018

1018:                                             ; preds = %1009
  %1019 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1016, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1020 = load atomic i32, i32* %1019 monotonic, align 4
  %1021 = and i32 %1020, 2
  %1022 = icmp eq i32 %1021, 0
  %1023 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1016, i64 0, i32 0
  %1024 = load i32, i32* %1023, align 4
  br i1 %1022, label %1025, label %1027

1025:                                             ; preds = %1018
  %1026 = add i32 %1024, -1
  store i32 %1026, i32* %1023, align 4
  br label %1027

1027:                                             ; preds = %1025, %1018
  %1028 = phi i32 [ %1026, %1025 ], [ %1024, %1018 ]
  %1029 = icmp eq i32 %1028, 0
  br i1 %1029, label %1030, label %1031

1030:                                             ; preds = %1027
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1016) #7
  br label %1031

1031:                                             ; preds = %1009, %1027, %1030
  br i1 %1010, label %1045, label %1032

1032:                                             ; preds = %1031
  %1033 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1012, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1034 = load atomic i32, i32* %1033 monotonic, align 4
  %1035 = and i32 %1034, 2
  %1036 = icmp eq i32 %1035, 0
  %1037 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1012, i64 0, i32 0
  %1038 = load i32, i32* %1037, align 4
  br i1 %1036, label %1039, label %1041

1039:                                             ; preds = %1032
  %1040 = add i32 %1038, -1
  store i32 %1040, i32* %1037, align 4
  br label %1041

1041:                                             ; preds = %1039, %1032
  %1042 = phi i32 [ %1040, %1039 ], [ %1038, %1032 ]
  %1043 = icmp eq i32 %1042, 0
  br i1 %1043, label %1044, label %1045

1044:                                             ; preds = %1041
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1012) #7
  br label %1045

1045:                                             ; preds = %1031, %1041, %1044
  %1046 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %12, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %1047 = load i8*, i8** %1046, align 8
  store i8* null, i8** %1046, align 8
  %1048 = icmp eq i8* %1047, null
  br i1 %1048, label %1050, label %1049

1049:                                             ; preds = %1045
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %1047) #7
  br label %1050

1050:                                             ; preds = %1049, %1045
  %1051 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %953, align 8
  %1052 = icmp eq %"class.WTF::StringImpl"* %1051, null
  br i1 %1052, label %1066, label %1053

1053:                                             ; preds = %1050
  %1054 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1051, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1055 = load atomic i32, i32* %1054 monotonic, align 4
  %1056 = and i32 %1055, 2
  %1057 = icmp eq i32 %1056, 0
  %1058 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1051, i64 0, i32 0
  %1059 = load i32, i32* %1058, align 4
  br i1 %1057, label %1060, label %1062

1060:                                             ; preds = %1053
  %1061 = add i32 %1059, -1
  store i32 %1061, i32* %1058, align 4
  br label %1062

1062:                                             ; preds = %1060, %1053
  %1063 = phi i32 [ %1061, %1060 ], [ %1059, %1053 ]
  %1064 = icmp eq i32 %1063, 0
  br i1 %1064, label %1065, label %1066

1065:                                             ; preds = %1062
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1051) #7
  br label %1066

1066:                                             ; preds = %1050, %1062, %1065
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %950) #7
  %1067 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %55, i64 7, i32 0
  %1068 = bitcast %"class.v8::Name"** %1067 to %"class.v8::Value"**
  %1069 = load %"class.v8::Value"*, %"class.v8::Value"** %1068, align 8
  %1070 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %44, %"class.v8::Context"* %57, %"class.v8::Value"* %1069) #7
  %1071 = icmp eq %"class.v8::Value"* %1070, null
  br i1 %1071, label %1094, label %1100

1072:                                             ; preds = %949
  %1073 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %12, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %1074 = load i8*, i8** %1073, align 8
  store i8* null, i8** %1073, align 8
  %1075 = icmp eq i8* %1074, null
  br i1 %1075, label %1077, label %1076

1076:                                             ; preds = %1072
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %1074) #7
  br label %1077

1077:                                             ; preds = %1076, %1072
  %1078 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %953, align 8
  %1079 = icmp eq %"class.WTF::StringImpl"* %1078, null
  br i1 %1079, label %1093, label %1080

1080:                                             ; preds = %1077
  %1081 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1078, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1082 = load atomic i32, i32* %1081 monotonic, align 4
  %1083 = and i32 %1082, 2
  %1084 = icmp eq i32 %1083, 0
  %1085 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1078, i64 0, i32 0
  %1086 = load i32, i32* %1085, align 4
  br i1 %1084, label %1087, label %1089

1087:                                             ; preds = %1080
  %1088 = add i32 %1086, -1
  store i32 %1088, i32* %1085, align 4
  br label %1089

1089:                                             ; preds = %1087, %1080
  %1090 = phi i32 [ %1088, %1087 ], [ %1086, %1080 ]
  %1091 = icmp eq i32 %1090, 0
  br i1 %1091, label %1092, label %1093

1092:                                             ; preds = %1089
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1078) #7
  br label %1093

1093:                                             ; preds = %1077, %1089, %1092
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %950) #7
  br label %1826

1094:                                             ; preds = %1066
  %1095 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %1096 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %1097 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %1096, align 8
  %1098 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %1097, i64 5
  %1099 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %1098, align 8
  call void %1099(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %1095) #7
  br label %1826

1100:                                             ; preds = %1066
  %1101 = bitcast %"class.v8::Value"* %1070 to i64*
  %1102 = load i64, i64* %1101, align 8
  %1103 = and i64 %1102, 3
  %1104 = icmp eq i64 %1103, 1
  br i1 %1104, label %1105, label %1122

1105:                                             ; preds = %1100
  %1106 = add i64 %1102, -1
  %1107 = inttoptr i64 %1106 to i32*
  %1108 = load i32, i32* %1107, align 4
  %1109 = and i64 %1102, -4294967296
  %1110 = zext i32 %1108 to i64
  %1111 = or i64 %1109, %1110
  %1112 = add i64 %1111, 7
  %1113 = inttoptr i64 %1112 to i16*
  %1114 = load i16, i16* %1113, align 2
  %1115 = icmp eq i16 %1114, 67
  br i1 %1115, label %1116, label %1122

1116:                                             ; preds = %1105
  %1117 = add i64 %1102, 23
  %1118 = inttoptr i64 %1117 to i32*
  %1119 = load i32, i32* %1118, align 4
  %1120 = and i32 %1119, -2
  %1121 = icmp eq i32 %1120, 10
  br i1 %1121, label %1262, label %1122

1122:                                             ; preds = %1105, %1100, %1116
  %1123 = bitcast %"class.blink::V8StringResource"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %1123) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1123, i8 -86, i64 152, i1 false)
  %1124 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %13, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %1070, %"class.v8::Value"** %1124, align 8
  %1125 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %13, i64 0, i32 1
  store i32 0, i32* %1125, align 8
  %1126 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %13, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %1126, align 8
  %1127 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %13, i64 0, i32 3, i32 1
  %1128 = bitcast %"class.std::__1::unique_ptr"* %1127 to i64*
  store i64 0, i64* %1128, align 8
  %1129 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %13, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %1129, label %1130, label %1240

1130:                                             ; preds = %1122
  %1131 = load %"class.v8::Value"*, %"class.v8::Value"** %1124, align 8
  %1132 = icmp eq %"class.v8::Value"* %1131, null
  br i1 %1132, label %1133, label %1157, !prof !2

1133:                                             ; preds = %1130
  %1134 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1126, align 8
  %1135 = icmp eq %"class.WTF::StringImpl"* %1134, null
  br i1 %1135, label %1136, label %1138

1136:                                             ; preds = %1133
  %1137 = getelementptr inbounds %"class.blink::SecurityPolicyViolationEventInit", %"class.blink::SecurityPolicyViolationEventInit"* %2, i64 0, i32 11
  br label %1182

1138:                                             ; preds = %1133
  %1139 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1134, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1140 = load atomic i32, i32* %1139 monotonic, align 4
  %1141 = and i32 %1140, 2
  %1142 = icmp eq i32 %1141, 0
  br i1 %1142, label %1143, label %1155

1143:                                             ; preds = %1138
  %1144 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1134, i64 0, i32 0
  %1145 = load i32, i32* %1144, align 4
  %1146 = zext i32 %1145 to i33
  %1147 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1146, i33 1) #7
  %1148 = extractvalue { i33, i1 } %1147, 1
  %1149 = extractvalue { i33, i1 } %1147, 0
  %1150 = icmp slt i33 %1149, 0
  %1151 = or i1 %1148, %1150
  br i1 %1151, label %1152, label %1153, !prof !2

1152:                                             ; preds = %1143
  call void @llvm.trap() #7
  unreachable

1153:                                             ; preds = %1143
  %1154 = trunc i33 %1149 to i32
  store i32 %1154, i32* %1144, align 4
  br label %1155

1155:                                             ; preds = %1138, %1153
  %1156 = getelementptr inbounds %"class.blink::SecurityPolicyViolationEventInit", %"class.blink::SecurityPolicyViolationEventInit"* %2, i64 0, i32 11
  br label %1163

1157:                                             ; preds = %1130
  %1158 = bitcast %"class.v8::Value"* %1131 to %"class.v8::String"*
  %1159 = load i32, i32* %1125, align 8
  %1160 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %1158, i32 %1159) #7
  %1161 = getelementptr inbounds %"class.blink::SecurityPolicyViolationEventInit", %"class.blink::SecurityPolicyViolationEventInit"* %2, i64 0, i32 11
  %1162 = icmp eq %"class.WTF::StringImpl"* %1160, null
  br i1 %1162, label %1182, label %1163

1163:                                             ; preds = %1155, %1157
  %1164 = phi %"class.WTF::String"* [ %1156, %1155 ], [ %1161, %1157 ]
  %1165 = phi %"class.WTF::StringImpl"* [ %1134, %1155 ], [ %1160, %1157 ]
  %1166 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1165, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1167 = load atomic i32, i32* %1166 monotonic, align 4
  %1168 = and i32 %1167, 2
  %1169 = icmp eq i32 %1168, 0
  br i1 %1169, label %1170, label %1182

1170:                                             ; preds = %1163
  %1171 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1165, i64 0, i32 0
  %1172 = load i32, i32* %1171, align 4
  %1173 = zext i32 %1172 to i33
  %1174 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1173, i33 1) #7
  %1175 = extractvalue { i33, i1 } %1174, 1
  %1176 = extractvalue { i33, i1 } %1174, 0
  %1177 = icmp slt i33 %1176, 0
  %1178 = or i1 %1175, %1177
  br i1 %1178, label %1179, label %1180, !prof !2

1179:                                             ; preds = %1170
  call void @llvm.trap() #7
  unreachable

1180:                                             ; preds = %1170
  %1181 = trunc i33 %1176 to i32
  store i32 %1181, i32* %1171, align 4
  br label %1182

1182:                                             ; preds = %1136, %1180, %1163, %1157
  %1183 = phi i1 [ false, %1180 ], [ false, %1163 ], [ true, %1157 ], [ true, %1136 ]
  %1184 = phi %"class.WTF::String"* [ %1164, %1180 ], [ %1164, %1163 ], [ %1161, %1157 ], [ %1137, %1136 ]
  %1185 = phi %"class.WTF::StringImpl"* [ %1165, %1180 ], [ %1165, %1163 ], [ null, %1157 ], [ null, %1136 ]
  %1186 = ptrtoint %"class.WTF::StringImpl"* %1185 to i64
  %1187 = bitcast %"class.WTF::String"* %1184 to i64*
  %1188 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1184, i64 0, i32 0, i32 0
  %1189 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1188, align 8
  store i64 %1186, i64* %1187, align 8
  %1190 = icmp eq %"class.WTF::StringImpl"* %1189, null
  br i1 %1190, label %1204, label %1191

1191:                                             ; preds = %1182
  %1192 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1189, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1193 = load atomic i32, i32* %1192 monotonic, align 4
  %1194 = and i32 %1193, 2
  %1195 = icmp eq i32 %1194, 0
  %1196 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1189, i64 0, i32 0
  %1197 = load i32, i32* %1196, align 4
  br i1 %1195, label %1198, label %1200

1198:                                             ; preds = %1191
  %1199 = add i32 %1197, -1
  store i32 %1199, i32* %1196, align 4
  br label %1200

1200:                                             ; preds = %1198, %1191
  %1201 = phi i32 [ %1199, %1198 ], [ %1197, %1191 ]
  %1202 = icmp eq i32 %1201, 0
  br i1 %1202, label %1203, label %1204

1203:                                             ; preds = %1200
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1189) #7
  br label %1204

1204:                                             ; preds = %1182, %1200, %1203
  br i1 %1183, label %1218, label %1205

1205:                                             ; preds = %1204
  %1206 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1185, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1207 = load atomic i32, i32* %1206 monotonic, align 4
  %1208 = and i32 %1207, 2
  %1209 = icmp eq i32 %1208, 0
  %1210 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1185, i64 0, i32 0
  %1211 = load i32, i32* %1210, align 4
  br i1 %1209, label %1212, label %1214

1212:                                             ; preds = %1205
  %1213 = add i32 %1211, -1
  store i32 %1213, i32* %1210, align 4
  br label %1214

1214:                                             ; preds = %1212, %1205
  %1215 = phi i32 [ %1213, %1212 ], [ %1211, %1205 ]
  %1216 = icmp eq i32 %1215, 0
  br i1 %1216, label %1217, label %1218

1217:                                             ; preds = %1214
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1185) #7
  br label %1218

1218:                                             ; preds = %1204, %1214, %1217
  %1219 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %13, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %1220 = load i8*, i8** %1219, align 8
  store i8* null, i8** %1219, align 8
  %1221 = icmp eq i8* %1220, null
  br i1 %1221, label %1223, label %1222

1222:                                             ; preds = %1218
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %1220) #7
  br label %1223

1223:                                             ; preds = %1222, %1218
  %1224 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1126, align 8
  %1225 = icmp eq %"class.WTF::StringImpl"* %1224, null
  br i1 %1225, label %1239, label %1226

1226:                                             ; preds = %1223
  %1227 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1224, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1228 = load atomic i32, i32* %1227 monotonic, align 4
  %1229 = and i32 %1228, 2
  %1230 = icmp eq i32 %1229, 0
  %1231 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1224, i64 0, i32 0
  %1232 = load i32, i32* %1231, align 4
  br i1 %1230, label %1233, label %1235

1233:                                             ; preds = %1226
  %1234 = add i32 %1232, -1
  store i32 %1234, i32* %1231, align 4
  br label %1235

1235:                                             ; preds = %1233, %1226
  %1236 = phi i32 [ %1234, %1233 ], [ %1232, %1226 ]
  %1237 = icmp eq i32 %1236, 0
  br i1 %1237, label %1238, label %1239

1238:                                             ; preds = %1235
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1224) #7
  br label %1239

1239:                                             ; preds = %1223, %1235, %1238
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1123) #7
  br label %1262

1240:                                             ; preds = %1122
  %1241 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %13, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %1242 = load i8*, i8** %1241, align 8
  store i8* null, i8** %1241, align 8
  %1243 = icmp eq i8* %1242, null
  br i1 %1243, label %1245, label %1244

1244:                                             ; preds = %1240
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %1242) #7
  br label %1245

1245:                                             ; preds = %1244, %1240
  %1246 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1126, align 8
  %1247 = icmp eq %"class.WTF::StringImpl"* %1246, null
  br i1 %1247, label %1261, label %1248

1248:                                             ; preds = %1245
  %1249 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1246, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1250 = load atomic i32, i32* %1249 monotonic, align 4
  %1251 = and i32 %1250, 2
  %1252 = icmp eq i32 %1251, 0
  %1253 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1246, i64 0, i32 0
  %1254 = load i32, i32* %1253, align 4
  br i1 %1252, label %1255, label %1257

1255:                                             ; preds = %1248
  %1256 = add i32 %1254, -1
  store i32 %1256, i32* %1253, align 4
  br label %1257

1257:                                             ; preds = %1255, %1248
  %1258 = phi i32 [ %1256, %1255 ], [ %1254, %1248 ]
  %1259 = icmp eq i32 %1258, 0
  br i1 %1259, label %1260, label %1261

1260:                                             ; preds = %1257
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1246) #7
  br label %1261

1261:                                             ; preds = %1245, %1257, %1260
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1123) #7
  br label %1826

1262:                                             ; preds = %1239, %1116
  %1263 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %55, i64 8, i32 0
  %1264 = bitcast %"class.v8::Name"** %1263 to %"class.v8::Value"**
  %1265 = load %"class.v8::Value"*, %"class.v8::Value"** %1264, align 8
  %1266 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %44, %"class.v8::Context"* %57, %"class.v8::Value"* %1265) #7
  %1267 = icmp eq %"class.v8::Value"* %1266, null
  br i1 %1267, label %1268, label %1274

1268:                                             ; preds = %1262
  %1269 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %1270 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %1271 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %1270, align 8
  %1272 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %1271, i64 5
  %1273 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %1272, align 8
  call void %1273(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %1269) #7
  br label %1826

1274:                                             ; preds = %1262
  %1275 = bitcast %"class.v8::Value"* %1266 to i64*
  %1276 = load i64, i64* %1275, align 8
  %1277 = and i64 %1276, 3
  %1278 = icmp eq i64 %1277, 1
  br i1 %1278, label %1279, label %1296

1279:                                             ; preds = %1274
  %1280 = add i64 %1276, -1
  %1281 = inttoptr i64 %1280 to i32*
  %1282 = load i32, i32* %1281, align 4
  %1283 = and i64 %1276, -4294967296
  %1284 = zext i32 %1282 to i64
  %1285 = or i64 %1283, %1284
  %1286 = add i64 %1285, 7
  %1287 = inttoptr i64 %1286 to i16*
  %1288 = load i16, i16* %1287, align 2
  %1289 = icmp eq i16 %1288, 67
  br i1 %1289, label %1290, label %1296

1290:                                             ; preds = %1279
  %1291 = add i64 %1276, 23
  %1292 = inttoptr i64 %1291 to i32*
  %1293 = load i32, i32* %1292, align 4
  %1294 = and i32 %1293, -2
  %1295 = icmp eq i32 %1294, 10
  br i1 %1295, label %1436, label %1296

1296:                                             ; preds = %1279, %1274, %1290
  %1297 = bitcast %"class.blink::V8StringResource"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %1297) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1297, i8 -86, i64 152, i1 false)
  %1298 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %14, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %1266, %"class.v8::Value"** %1298, align 8
  %1299 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %14, i64 0, i32 1
  store i32 0, i32* %1299, align 8
  %1300 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %14, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %1300, align 8
  %1301 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %14, i64 0, i32 3, i32 1
  %1302 = bitcast %"class.std::__1::unique_ptr"* %1301 to i64*
  store i64 0, i64* %1302, align 8
  %1303 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %14, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %1303, label %1304, label %1414

1304:                                             ; preds = %1296
  %1305 = load %"class.v8::Value"*, %"class.v8::Value"** %1298, align 8
  %1306 = icmp eq %"class.v8::Value"* %1305, null
  br i1 %1306, label %1307, label %1331, !prof !2

1307:                                             ; preds = %1304
  %1308 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1300, align 8
  %1309 = icmp eq %"class.WTF::StringImpl"* %1308, null
  br i1 %1309, label %1310, label %1312

1310:                                             ; preds = %1307
  %1311 = getelementptr inbounds %"class.blink::SecurityPolicyViolationEventInit", %"class.blink::SecurityPolicyViolationEventInit"* %2, i64 0, i32 12
  br label %1356

1312:                                             ; preds = %1307
  %1313 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1308, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1314 = load atomic i32, i32* %1313 monotonic, align 4
  %1315 = and i32 %1314, 2
  %1316 = icmp eq i32 %1315, 0
  br i1 %1316, label %1317, label %1329

1317:                                             ; preds = %1312
  %1318 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1308, i64 0, i32 0
  %1319 = load i32, i32* %1318, align 4
  %1320 = zext i32 %1319 to i33
  %1321 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1320, i33 1) #7
  %1322 = extractvalue { i33, i1 } %1321, 1
  %1323 = extractvalue { i33, i1 } %1321, 0
  %1324 = icmp slt i33 %1323, 0
  %1325 = or i1 %1322, %1324
  br i1 %1325, label %1326, label %1327, !prof !2

1326:                                             ; preds = %1317
  call void @llvm.trap() #7
  unreachable

1327:                                             ; preds = %1317
  %1328 = trunc i33 %1323 to i32
  store i32 %1328, i32* %1318, align 4
  br label %1329

1329:                                             ; preds = %1312, %1327
  %1330 = getelementptr inbounds %"class.blink::SecurityPolicyViolationEventInit", %"class.blink::SecurityPolicyViolationEventInit"* %2, i64 0, i32 12
  br label %1337

1331:                                             ; preds = %1304
  %1332 = bitcast %"class.v8::Value"* %1305 to %"class.v8::String"*
  %1333 = load i32, i32* %1299, align 8
  %1334 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %1332, i32 %1333) #7
  %1335 = getelementptr inbounds %"class.blink::SecurityPolicyViolationEventInit", %"class.blink::SecurityPolicyViolationEventInit"* %2, i64 0, i32 12
  %1336 = icmp eq %"class.WTF::StringImpl"* %1334, null
  br i1 %1336, label %1356, label %1337

1337:                                             ; preds = %1329, %1331
  %1338 = phi %"class.WTF::String"* [ %1330, %1329 ], [ %1335, %1331 ]
  %1339 = phi %"class.WTF::StringImpl"* [ %1308, %1329 ], [ %1334, %1331 ]
  %1340 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1339, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1341 = load atomic i32, i32* %1340 monotonic, align 4
  %1342 = and i32 %1341, 2
  %1343 = icmp eq i32 %1342, 0
  br i1 %1343, label %1344, label %1356

1344:                                             ; preds = %1337
  %1345 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1339, i64 0, i32 0
  %1346 = load i32, i32* %1345, align 4
  %1347 = zext i32 %1346 to i33
  %1348 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1347, i33 1) #7
  %1349 = extractvalue { i33, i1 } %1348, 1
  %1350 = extractvalue { i33, i1 } %1348, 0
  %1351 = icmp slt i33 %1350, 0
  %1352 = or i1 %1349, %1351
  br i1 %1352, label %1353, label %1354, !prof !2

1353:                                             ; preds = %1344
  call void @llvm.trap() #7
  unreachable

1354:                                             ; preds = %1344
  %1355 = trunc i33 %1350 to i32
  store i32 %1355, i32* %1345, align 4
  br label %1356

1356:                                             ; preds = %1310, %1354, %1337, %1331
  %1357 = phi i1 [ false, %1354 ], [ false, %1337 ], [ true, %1331 ], [ true, %1310 ]
  %1358 = phi %"class.WTF::String"* [ %1338, %1354 ], [ %1338, %1337 ], [ %1335, %1331 ], [ %1311, %1310 ]
  %1359 = phi %"class.WTF::StringImpl"* [ %1339, %1354 ], [ %1339, %1337 ], [ null, %1331 ], [ null, %1310 ]
  %1360 = ptrtoint %"class.WTF::StringImpl"* %1359 to i64
  %1361 = bitcast %"class.WTF::String"* %1358 to i64*
  %1362 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1358, i64 0, i32 0, i32 0
  %1363 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1362, align 8
  store i64 %1360, i64* %1361, align 8
  %1364 = icmp eq %"class.WTF::StringImpl"* %1363, null
  br i1 %1364, label %1378, label %1365

1365:                                             ; preds = %1356
  %1366 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1363, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1367 = load atomic i32, i32* %1366 monotonic, align 4
  %1368 = and i32 %1367, 2
  %1369 = icmp eq i32 %1368, 0
  %1370 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1363, i64 0, i32 0
  %1371 = load i32, i32* %1370, align 4
  br i1 %1369, label %1372, label %1374

1372:                                             ; preds = %1365
  %1373 = add i32 %1371, -1
  store i32 %1373, i32* %1370, align 4
  br label %1374

1374:                                             ; preds = %1372, %1365
  %1375 = phi i32 [ %1373, %1372 ], [ %1371, %1365 ]
  %1376 = icmp eq i32 %1375, 0
  br i1 %1376, label %1377, label %1378

1377:                                             ; preds = %1374
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1363) #7
  br label %1378

1378:                                             ; preds = %1356, %1374, %1377
  br i1 %1357, label %1392, label %1379

1379:                                             ; preds = %1378
  %1380 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1359, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1381 = load atomic i32, i32* %1380 monotonic, align 4
  %1382 = and i32 %1381, 2
  %1383 = icmp eq i32 %1382, 0
  %1384 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1359, i64 0, i32 0
  %1385 = load i32, i32* %1384, align 4
  br i1 %1383, label %1386, label %1388

1386:                                             ; preds = %1379
  %1387 = add i32 %1385, -1
  store i32 %1387, i32* %1384, align 4
  br label %1388

1388:                                             ; preds = %1386, %1379
  %1389 = phi i32 [ %1387, %1386 ], [ %1385, %1379 ]
  %1390 = icmp eq i32 %1389, 0
  br i1 %1390, label %1391, label %1392

1391:                                             ; preds = %1388
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1359) #7
  br label %1392

1392:                                             ; preds = %1378, %1388, %1391
  %1393 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %14, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %1394 = load i8*, i8** %1393, align 8
  store i8* null, i8** %1393, align 8
  %1395 = icmp eq i8* %1394, null
  br i1 %1395, label %1397, label %1396

1396:                                             ; preds = %1392
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %1394) #7
  br label %1397

1397:                                             ; preds = %1396, %1392
  %1398 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1300, align 8
  %1399 = icmp eq %"class.WTF::StringImpl"* %1398, null
  br i1 %1399, label %1413, label %1400

1400:                                             ; preds = %1397
  %1401 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1398, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1402 = load atomic i32, i32* %1401 monotonic, align 4
  %1403 = and i32 %1402, 2
  %1404 = icmp eq i32 %1403, 0
  %1405 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1398, i64 0, i32 0
  %1406 = load i32, i32* %1405, align 4
  br i1 %1404, label %1407, label %1409

1407:                                             ; preds = %1400
  %1408 = add i32 %1406, -1
  store i32 %1408, i32* %1405, align 4
  br label %1409

1409:                                             ; preds = %1407, %1400
  %1410 = phi i32 [ %1408, %1407 ], [ %1406, %1400 ]
  %1411 = icmp eq i32 %1410, 0
  br i1 %1411, label %1412, label %1413

1412:                                             ; preds = %1409
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1398) #7
  br label %1413

1413:                                             ; preds = %1397, %1409, %1412
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1297) #7
  br label %1436

1414:                                             ; preds = %1296
  %1415 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %14, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %1416 = load i8*, i8** %1415, align 8
  store i8* null, i8** %1415, align 8
  %1417 = icmp eq i8* %1416, null
  br i1 %1417, label %1419, label %1418

1418:                                             ; preds = %1414
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %1416) #7
  br label %1419

1419:                                             ; preds = %1418, %1414
  %1420 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1300, align 8
  %1421 = icmp eq %"class.WTF::StringImpl"* %1420, null
  br i1 %1421, label %1435, label %1422

1422:                                             ; preds = %1419
  %1423 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1420, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1424 = load atomic i32, i32* %1423 monotonic, align 4
  %1425 = and i32 %1424, 2
  %1426 = icmp eq i32 %1425, 0
  %1427 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1420, i64 0, i32 0
  %1428 = load i32, i32* %1427, align 4
  br i1 %1426, label %1429, label %1431

1429:                                             ; preds = %1422
  %1430 = add i32 %1428, -1
  store i32 %1430, i32* %1427, align 4
  br label %1431

1431:                                             ; preds = %1429, %1422
  %1432 = phi i32 [ %1430, %1429 ], [ %1428, %1422 ]
  %1433 = icmp eq i32 %1432, 0
  br i1 %1433, label %1434, label %1435

1434:                                             ; preds = %1431
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1420) #7
  br label %1435

1435:                                             ; preds = %1419, %1431, %1434
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1297) #7
  br label %1826

1436:                                             ; preds = %1413, %1290
  %1437 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %55, i64 9, i32 0
  %1438 = bitcast %"class.v8::Name"** %1437 to %"class.v8::Value"**
  %1439 = load %"class.v8::Value"*, %"class.v8::Value"** %1438, align 8
  %1440 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %44, %"class.v8::Context"* %57, %"class.v8::Value"* %1439) #7
  %1441 = icmp eq %"class.v8::Value"* %1440, null
  br i1 %1441, label %1442, label %1448

1442:                                             ; preds = %1436
  %1443 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %1444 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %1445 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %1444, align 8
  %1446 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %1445, i64 5
  %1447 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %1446, align 8
  call void %1447(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %1443) #7
  br label %1826

1448:                                             ; preds = %1436
  %1449 = bitcast %"class.v8::Value"* %1440 to i64*
  %1450 = load i64, i64* %1449, align 8
  %1451 = and i64 %1450, 3
  %1452 = icmp eq i64 %1451, 1
  br i1 %1452, label %1453, label %1470

1453:                                             ; preds = %1448
  %1454 = add i64 %1450, -1
  %1455 = inttoptr i64 %1454 to i32*
  %1456 = load i32, i32* %1455, align 4
  %1457 = and i64 %1450, -4294967296
  %1458 = zext i32 %1456 to i64
  %1459 = or i64 %1457, %1458
  %1460 = add i64 %1459, 7
  %1461 = inttoptr i64 %1460 to i16*
  %1462 = load i16, i16* %1461, align 2
  %1463 = icmp eq i16 %1462, 67
  br i1 %1463, label %1464, label %1470

1464:                                             ; preds = %1453
  %1465 = add i64 %1450, 23
  %1466 = inttoptr i64 %1465 to i32*
  %1467 = load i32, i32* %1466, align 4
  %1468 = and i32 %1467, -2
  %1469 = icmp eq i32 %1468, 10
  br i1 %1469, label %1610, label %1470

1470:                                             ; preds = %1453, %1448, %1464
  %1471 = bitcast %"class.blink::V8StringResource"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %1471) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1471, i8 -86, i64 152, i1 false)
  %1472 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %15, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %1440, %"class.v8::Value"** %1472, align 8
  %1473 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %15, i64 0, i32 1
  store i32 0, i32* %1473, align 8
  %1474 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %15, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %1474, align 8
  %1475 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %15, i64 0, i32 3, i32 1
  %1476 = bitcast %"class.std::__1::unique_ptr"* %1475 to i64*
  store i64 0, i64* %1476, align 8
  %1477 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %15, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %1477, label %1478, label %1588

1478:                                             ; preds = %1470
  %1479 = load %"class.v8::Value"*, %"class.v8::Value"** %1472, align 8
  %1480 = icmp eq %"class.v8::Value"* %1479, null
  br i1 %1480, label %1481, label %1505, !prof !2

1481:                                             ; preds = %1478
  %1482 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1474, align 8
  %1483 = icmp eq %"class.WTF::StringImpl"* %1482, null
  br i1 %1483, label %1484, label %1486

1484:                                             ; preds = %1481
  %1485 = getelementptr inbounds %"class.blink::SecurityPolicyViolationEventInit", %"class.blink::SecurityPolicyViolationEventInit"* %2, i64 0, i32 13
  br label %1530

1486:                                             ; preds = %1481
  %1487 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1482, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1488 = load atomic i32, i32* %1487 monotonic, align 4
  %1489 = and i32 %1488, 2
  %1490 = icmp eq i32 %1489, 0
  br i1 %1490, label %1491, label %1503

1491:                                             ; preds = %1486
  %1492 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1482, i64 0, i32 0
  %1493 = load i32, i32* %1492, align 4
  %1494 = zext i32 %1493 to i33
  %1495 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1494, i33 1) #7
  %1496 = extractvalue { i33, i1 } %1495, 1
  %1497 = extractvalue { i33, i1 } %1495, 0
  %1498 = icmp slt i33 %1497, 0
  %1499 = or i1 %1496, %1498
  br i1 %1499, label %1500, label %1501, !prof !2

1500:                                             ; preds = %1491
  call void @llvm.trap() #7
  unreachable

1501:                                             ; preds = %1491
  %1502 = trunc i33 %1497 to i32
  store i32 %1502, i32* %1492, align 4
  br label %1503

1503:                                             ; preds = %1486, %1501
  %1504 = getelementptr inbounds %"class.blink::SecurityPolicyViolationEventInit", %"class.blink::SecurityPolicyViolationEventInit"* %2, i64 0, i32 13
  br label %1511

1505:                                             ; preds = %1478
  %1506 = bitcast %"class.v8::Value"* %1479 to %"class.v8::String"*
  %1507 = load i32, i32* %1473, align 8
  %1508 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %1506, i32 %1507) #7
  %1509 = getelementptr inbounds %"class.blink::SecurityPolicyViolationEventInit", %"class.blink::SecurityPolicyViolationEventInit"* %2, i64 0, i32 13
  %1510 = icmp eq %"class.WTF::StringImpl"* %1508, null
  br i1 %1510, label %1530, label %1511

1511:                                             ; preds = %1503, %1505
  %1512 = phi %"class.WTF::String"* [ %1504, %1503 ], [ %1509, %1505 ]
  %1513 = phi %"class.WTF::StringImpl"* [ %1482, %1503 ], [ %1508, %1505 ]
  %1514 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1513, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1515 = load atomic i32, i32* %1514 monotonic, align 4
  %1516 = and i32 %1515, 2
  %1517 = icmp eq i32 %1516, 0
  br i1 %1517, label %1518, label %1530

1518:                                             ; preds = %1511
  %1519 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1513, i64 0, i32 0
  %1520 = load i32, i32* %1519, align 4
  %1521 = zext i32 %1520 to i33
  %1522 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1521, i33 1) #7
  %1523 = extractvalue { i33, i1 } %1522, 1
  %1524 = extractvalue { i33, i1 } %1522, 0
  %1525 = icmp slt i33 %1524, 0
  %1526 = or i1 %1523, %1525
  br i1 %1526, label %1527, label %1528, !prof !2

1527:                                             ; preds = %1518
  call void @llvm.trap() #7
  unreachable

1528:                                             ; preds = %1518
  %1529 = trunc i33 %1524 to i32
  store i32 %1529, i32* %1519, align 4
  br label %1530

1530:                                             ; preds = %1484, %1528, %1511, %1505
  %1531 = phi i1 [ false, %1528 ], [ false, %1511 ], [ true, %1505 ], [ true, %1484 ]
  %1532 = phi %"class.WTF::String"* [ %1512, %1528 ], [ %1512, %1511 ], [ %1509, %1505 ], [ %1485, %1484 ]
  %1533 = phi %"class.WTF::StringImpl"* [ %1513, %1528 ], [ %1513, %1511 ], [ null, %1505 ], [ null, %1484 ]
  %1534 = ptrtoint %"class.WTF::StringImpl"* %1533 to i64
  %1535 = bitcast %"class.WTF::String"* %1532 to i64*
  %1536 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1532, i64 0, i32 0, i32 0
  %1537 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1536, align 8
  store i64 %1534, i64* %1535, align 8
  %1538 = icmp eq %"class.WTF::StringImpl"* %1537, null
  br i1 %1538, label %1552, label %1539

1539:                                             ; preds = %1530
  %1540 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1537, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1541 = load atomic i32, i32* %1540 monotonic, align 4
  %1542 = and i32 %1541, 2
  %1543 = icmp eq i32 %1542, 0
  %1544 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1537, i64 0, i32 0
  %1545 = load i32, i32* %1544, align 4
  br i1 %1543, label %1546, label %1548

1546:                                             ; preds = %1539
  %1547 = add i32 %1545, -1
  store i32 %1547, i32* %1544, align 4
  br label %1548

1548:                                             ; preds = %1546, %1539
  %1549 = phi i32 [ %1547, %1546 ], [ %1545, %1539 ]
  %1550 = icmp eq i32 %1549, 0
  br i1 %1550, label %1551, label %1552

1551:                                             ; preds = %1548
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1537) #7
  br label %1552

1552:                                             ; preds = %1530, %1548, %1551
  br i1 %1531, label %1566, label %1553

1553:                                             ; preds = %1552
  %1554 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1533, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1555 = load atomic i32, i32* %1554 monotonic, align 4
  %1556 = and i32 %1555, 2
  %1557 = icmp eq i32 %1556, 0
  %1558 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1533, i64 0, i32 0
  %1559 = load i32, i32* %1558, align 4
  br i1 %1557, label %1560, label %1562

1560:                                             ; preds = %1553
  %1561 = add i32 %1559, -1
  store i32 %1561, i32* %1558, align 4
  br label %1562

1562:                                             ; preds = %1560, %1553
  %1563 = phi i32 [ %1561, %1560 ], [ %1559, %1553 ]
  %1564 = icmp eq i32 %1563, 0
  br i1 %1564, label %1565, label %1566

1565:                                             ; preds = %1562
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1533) #7
  br label %1566

1566:                                             ; preds = %1552, %1562, %1565
  %1567 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %15, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %1568 = load i8*, i8** %1567, align 8
  store i8* null, i8** %1567, align 8
  %1569 = icmp eq i8* %1568, null
  br i1 %1569, label %1571, label %1570

1570:                                             ; preds = %1566
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %1568) #7
  br label %1571

1571:                                             ; preds = %1570, %1566
  %1572 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1474, align 8
  %1573 = icmp eq %"class.WTF::StringImpl"* %1572, null
  br i1 %1573, label %1587, label %1574

1574:                                             ; preds = %1571
  %1575 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1572, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1576 = load atomic i32, i32* %1575 monotonic, align 4
  %1577 = and i32 %1576, 2
  %1578 = icmp eq i32 %1577, 0
  %1579 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1572, i64 0, i32 0
  %1580 = load i32, i32* %1579, align 4
  br i1 %1578, label %1581, label %1583

1581:                                             ; preds = %1574
  %1582 = add i32 %1580, -1
  store i32 %1582, i32* %1579, align 4
  br label %1583

1583:                                             ; preds = %1581, %1574
  %1584 = phi i32 [ %1582, %1581 ], [ %1580, %1574 ]
  %1585 = icmp eq i32 %1584, 0
  br i1 %1585, label %1586, label %1587

1586:                                             ; preds = %1583
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1572) #7
  br label %1587

1587:                                             ; preds = %1571, %1583, %1586
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1471) #7
  br label %1610

1588:                                             ; preds = %1470
  %1589 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %15, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %1590 = load i8*, i8** %1589, align 8
  store i8* null, i8** %1589, align 8
  %1591 = icmp eq i8* %1590, null
  br i1 %1591, label %1593, label %1592

1592:                                             ; preds = %1588
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %1590) #7
  br label %1593

1593:                                             ; preds = %1592, %1588
  %1594 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1474, align 8
  %1595 = icmp eq %"class.WTF::StringImpl"* %1594, null
  br i1 %1595, label %1609, label %1596

1596:                                             ; preds = %1593
  %1597 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1594, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1598 = load atomic i32, i32* %1597 monotonic, align 4
  %1599 = and i32 %1598, 2
  %1600 = icmp eq i32 %1599, 0
  %1601 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1594, i64 0, i32 0
  %1602 = load i32, i32* %1601, align 4
  br i1 %1600, label %1603, label %1605

1603:                                             ; preds = %1596
  %1604 = add i32 %1602, -1
  store i32 %1604, i32* %1601, align 4
  br label %1605

1605:                                             ; preds = %1603, %1596
  %1606 = phi i32 [ %1604, %1603 ], [ %1602, %1596 ]
  %1607 = icmp eq i32 %1606, 0
  br i1 %1607, label %1608, label %1609

1608:                                             ; preds = %1605
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1594) #7
  br label %1609

1609:                                             ; preds = %1593, %1605, %1608
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1471) #7
  br label %1826

1610:                                             ; preds = %1587, %1464
  %1611 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %55, i64 10, i32 0
  %1612 = bitcast %"class.v8::Name"** %1611 to %"class.v8::Value"**
  %1613 = load %"class.v8::Value"*, %"class.v8::Value"** %1612, align 8
  %1614 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %44, %"class.v8::Context"* %57, %"class.v8::Value"* %1613) #7
  %1615 = icmp eq %"class.v8::Value"* %1614, null
  br i1 %1615, label %1616, label %1622

1616:                                             ; preds = %1610
  %1617 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %1618 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %1619 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %1618, align 8
  %1620 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %1619, i64 5
  %1621 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %1620, align 8
  call void %1621(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %1617) #7
  br label %1826

1622:                                             ; preds = %1610
  %1623 = bitcast %"class.v8::Value"* %1614 to i64*
  %1624 = load i64, i64* %1623, align 8
  %1625 = and i64 %1624, 3
  %1626 = icmp eq i64 %1625, 1
  br i1 %1626, label %1627, label %1645

1627:                                             ; preds = %1622
  %1628 = add i64 %1624, -1
  %1629 = inttoptr i64 %1628 to i32*
  %1630 = load i32, i32* %1629, align 4
  %1631 = and i64 %1624, -4294967296
  %1632 = zext i32 %1630 to i64
  %1633 = or i64 %1631, %1632
  %1634 = add i64 %1633, 7
  %1635 = inttoptr i64 %1634 to i16*
  %1636 = load i16, i16* %1635, align 2
  %1637 = icmp eq i16 %1636, 67
  br i1 %1637, label %1638, label %1645

1638:                                             ; preds = %1627
  %1639 = add i64 %1624, 23
  %1640 = inttoptr i64 %1639 to i32*
  %1641 = load i32, i32* %1640, align 4
  %1642 = and i32 %1641, -2
  %1643 = icmp eq i32 %1642, 10
  br i1 %1643, label %1644, label %1645

1644:                                             ; preds = %1638
  call void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"* %3, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.9, i64 0, i64 0)) #7
  br label %1826

1645:                                             ; preds = %1627, %1622, %1638
  %1646 = call zeroext i16 @_ZN5blink8ToUInt16EPN2v87IsolateENS0_5LocalINS0_5ValueEEENS_30IntegerConversionConfigurationERNS_14ExceptionStateE(%"class.v8::Isolate"* %0, %"class.v8::Value"* nonnull %1614, i32 0, %"class.blink::ExceptionState"* dereferenceable(72) %3) #7
  %1647 = load i32, i32* %46, align 8
  %1648 = icmp eq i32 %1647, 0
  br i1 %1648, label %1649, label %1826

1649:                                             ; preds = %1645
  %1650 = getelementptr inbounds %"class.blink::SecurityPolicyViolationEventInit", %"class.blink::SecurityPolicyViolationEventInit"* %2, i64 0, i32 14
  store i16 %1646, i16* %1650, align 8
  %1651 = getelementptr inbounds %"class.blink::SecurityPolicyViolationEventInit", %"class.blink::SecurityPolicyViolationEventInit"* %2, i64 0, i32 3
  store i8 1, i8* %1651, align 8
  %1652 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %55, i64 11, i32 0
  %1653 = bitcast %"class.v8::Name"** %1652 to %"class.v8::Value"**
  %1654 = load %"class.v8::Value"*, %"class.v8::Value"** %1653, align 8
  %1655 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %44, %"class.v8::Context"* %57, %"class.v8::Value"* %1654) #7
  %1656 = icmp eq %"class.v8::Value"* %1655, null
  br i1 %1656, label %1657, label %1663

1657:                                             ; preds = %1649
  %1658 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %1659 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %1660 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %1659, align 8
  %1661 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %1660, i64 5
  %1662 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %1661, align 8
  call void %1662(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %1658) #7
  br label %1826

1663:                                             ; preds = %1649
  %1664 = bitcast %"class.v8::Value"* %1655 to i64*
  %1665 = load i64, i64* %1664, align 8
  %1666 = and i64 %1665, 3
  %1667 = icmp eq i64 %1666, 1
  br i1 %1667, label %1668, label %1686

1668:                                             ; preds = %1663
  %1669 = add i64 %1665, -1
  %1670 = inttoptr i64 %1669 to i32*
  %1671 = load i32, i32* %1670, align 4
  %1672 = and i64 %1665, -4294967296
  %1673 = zext i32 %1671 to i64
  %1674 = or i64 %1672, %1673
  %1675 = add i64 %1674, 7
  %1676 = inttoptr i64 %1675 to i16*
  %1677 = load i16, i16* %1676, align 2
  %1678 = icmp eq i16 %1677, 67
  br i1 %1678, label %1679, label %1686

1679:                                             ; preds = %1668
  %1680 = add i64 %1665, 23
  %1681 = inttoptr i64 %1680 to i32*
  %1682 = load i32, i32* %1681, align 4
  %1683 = and i32 %1682, -2
  %1684 = icmp eq i32 %1683, 10
  br i1 %1684, label %1685, label %1686

1685:                                             ; preds = %1679
  call void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"* %3, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.10, i64 0, i64 0)) #7
  br label %1826

1686:                                             ; preds = %1668, %1663, %1679
  %1687 = bitcast %"class.blink::V8StringResource"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %1687) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1687, i8 -86, i64 152, i1 false)
  %1688 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %16, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %1655, %"class.v8::Value"** %1688, align 8
  %1689 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %16, i64 0, i32 1
  store i32 0, i32* %1689, align 8
  %1690 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %16, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %1690, align 8
  %1691 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %16, i64 0, i32 3, i32 1
  %1692 = bitcast %"class.std::__1::unique_ptr"* %1691 to i64*
  store i64 0, i64* %1692, align 8
  %1693 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %16, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %1693, label %1694, label %1804

1694:                                             ; preds = %1686
  %1695 = load %"class.v8::Value"*, %"class.v8::Value"** %1688, align 8
  %1696 = icmp eq %"class.v8::Value"* %1695, null
  br i1 %1696, label %1697, label %1721, !prof !2

1697:                                             ; preds = %1694
  %1698 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1690, align 8
  %1699 = icmp eq %"class.WTF::StringImpl"* %1698, null
  br i1 %1699, label %1700, label %1702

1700:                                             ; preds = %1697
  %1701 = getelementptr inbounds %"class.blink::SecurityPolicyViolationEventInit", %"class.blink::SecurityPolicyViolationEventInit"* %2, i64 0, i32 15
  br label %1746

1702:                                             ; preds = %1697
  %1703 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1698, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1704 = load atomic i32, i32* %1703 monotonic, align 4
  %1705 = and i32 %1704, 2
  %1706 = icmp eq i32 %1705, 0
  br i1 %1706, label %1707, label %1719

1707:                                             ; preds = %1702
  %1708 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1698, i64 0, i32 0
  %1709 = load i32, i32* %1708, align 4
  %1710 = zext i32 %1709 to i33
  %1711 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1710, i33 1) #7
  %1712 = extractvalue { i33, i1 } %1711, 1
  %1713 = extractvalue { i33, i1 } %1711, 0
  %1714 = icmp slt i33 %1713, 0
  %1715 = or i1 %1712, %1714
  br i1 %1715, label %1716, label %1717, !prof !2

1716:                                             ; preds = %1707
  call void @llvm.trap() #7
  unreachable

1717:                                             ; preds = %1707
  %1718 = trunc i33 %1713 to i32
  store i32 %1718, i32* %1708, align 4
  br label %1719

1719:                                             ; preds = %1702, %1717
  %1720 = getelementptr inbounds %"class.blink::SecurityPolicyViolationEventInit", %"class.blink::SecurityPolicyViolationEventInit"* %2, i64 0, i32 15
  br label %1727

1721:                                             ; preds = %1694
  %1722 = bitcast %"class.v8::Value"* %1695 to %"class.v8::String"*
  %1723 = load i32, i32* %1689, align 8
  %1724 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %1722, i32 %1723) #7
  %1725 = getelementptr inbounds %"class.blink::SecurityPolicyViolationEventInit", %"class.blink::SecurityPolicyViolationEventInit"* %2, i64 0, i32 15
  %1726 = icmp eq %"class.WTF::StringImpl"* %1724, null
  br i1 %1726, label %1746, label %1727

1727:                                             ; preds = %1719, %1721
  %1728 = phi %"class.WTF::String"* [ %1720, %1719 ], [ %1725, %1721 ]
  %1729 = phi %"class.WTF::StringImpl"* [ %1698, %1719 ], [ %1724, %1721 ]
  %1730 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1729, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1731 = load atomic i32, i32* %1730 monotonic, align 4
  %1732 = and i32 %1731, 2
  %1733 = icmp eq i32 %1732, 0
  br i1 %1733, label %1734, label %1746

1734:                                             ; preds = %1727
  %1735 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1729, i64 0, i32 0
  %1736 = load i32, i32* %1735, align 4
  %1737 = zext i32 %1736 to i33
  %1738 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1737, i33 1) #7
  %1739 = extractvalue { i33, i1 } %1738, 1
  %1740 = extractvalue { i33, i1 } %1738, 0
  %1741 = icmp slt i33 %1740, 0
  %1742 = or i1 %1739, %1741
  br i1 %1742, label %1743, label %1744, !prof !2

1743:                                             ; preds = %1734
  call void @llvm.trap() #7
  unreachable

1744:                                             ; preds = %1734
  %1745 = trunc i33 %1740 to i32
  store i32 %1745, i32* %1735, align 4
  br label %1746

1746:                                             ; preds = %1700, %1744, %1727, %1721
  %1747 = phi i1 [ false, %1744 ], [ false, %1727 ], [ true, %1721 ], [ true, %1700 ]
  %1748 = phi %"class.WTF::String"* [ %1728, %1744 ], [ %1728, %1727 ], [ %1725, %1721 ], [ %1701, %1700 ]
  %1749 = phi %"class.WTF::StringImpl"* [ %1729, %1744 ], [ %1729, %1727 ], [ null, %1721 ], [ null, %1700 ]
  %1750 = ptrtoint %"class.WTF::StringImpl"* %1749 to i64
  %1751 = bitcast %"class.WTF::String"* %1748 to i64*
  %1752 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1748, i64 0, i32 0, i32 0
  %1753 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1752, align 8
  store i64 %1750, i64* %1751, align 8
  %1754 = icmp eq %"class.WTF::StringImpl"* %1753, null
  br i1 %1754, label %1768, label %1755

1755:                                             ; preds = %1746
  %1756 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1753, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1757 = load atomic i32, i32* %1756 monotonic, align 4
  %1758 = and i32 %1757, 2
  %1759 = icmp eq i32 %1758, 0
  %1760 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1753, i64 0, i32 0
  %1761 = load i32, i32* %1760, align 4
  br i1 %1759, label %1762, label %1764

1762:                                             ; preds = %1755
  %1763 = add i32 %1761, -1
  store i32 %1763, i32* %1760, align 4
  br label %1764

1764:                                             ; preds = %1762, %1755
  %1765 = phi i32 [ %1763, %1762 ], [ %1761, %1755 ]
  %1766 = icmp eq i32 %1765, 0
  br i1 %1766, label %1767, label %1768

1767:                                             ; preds = %1764
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1753) #7
  br label %1768

1768:                                             ; preds = %1746, %1764, %1767
  br i1 %1747, label %1782, label %1769

1769:                                             ; preds = %1768
  %1770 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1749, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1771 = load atomic i32, i32* %1770 monotonic, align 4
  %1772 = and i32 %1771, 2
  %1773 = icmp eq i32 %1772, 0
  %1774 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1749, i64 0, i32 0
  %1775 = load i32, i32* %1774, align 4
  br i1 %1773, label %1776, label %1778

1776:                                             ; preds = %1769
  %1777 = add i32 %1775, -1
  store i32 %1777, i32* %1774, align 4
  br label %1778

1778:                                             ; preds = %1776, %1769
  %1779 = phi i32 [ %1777, %1776 ], [ %1775, %1769 ]
  %1780 = icmp eq i32 %1779, 0
  br i1 %1780, label %1781, label %1782

1781:                                             ; preds = %1778
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1749) #7
  br label %1782

1782:                                             ; preds = %1768, %1778, %1781
  %1783 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %16, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %1784 = load i8*, i8** %1783, align 8
  store i8* null, i8** %1783, align 8
  %1785 = icmp eq i8* %1784, null
  br i1 %1785, label %1787, label %1786

1786:                                             ; preds = %1782
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %1784) #7
  br label %1787

1787:                                             ; preds = %1786, %1782
  %1788 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1690, align 8
  %1789 = icmp eq %"class.WTF::StringImpl"* %1788, null
  br i1 %1789, label %1803, label %1790

1790:                                             ; preds = %1787
  %1791 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1788, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1792 = load atomic i32, i32* %1791 monotonic, align 4
  %1793 = and i32 %1792, 2
  %1794 = icmp eq i32 %1793, 0
  %1795 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1788, i64 0, i32 0
  %1796 = load i32, i32* %1795, align 4
  br i1 %1794, label %1797, label %1799

1797:                                             ; preds = %1790
  %1798 = add i32 %1796, -1
  store i32 %1798, i32* %1795, align 4
  br label %1799

1799:                                             ; preds = %1797, %1790
  %1800 = phi i32 [ %1798, %1797 ], [ %1796, %1790 ]
  %1801 = icmp eq i32 %1800, 0
  br i1 %1801, label %1802, label %1803

1802:                                             ; preds = %1799
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1788) #7
  br label %1803

1803:                                             ; preds = %1787, %1799, %1802
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1687) #7
  br label %1826

1804:                                             ; preds = %1686
  %1805 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %16, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %1806 = load i8*, i8** %1805, align 8
  store i8* null, i8** %1805, align 8
  %1807 = icmp eq i8* %1806, null
  br i1 %1807, label %1809, label %1808

1808:                                             ; preds = %1804
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %1806) #7
  br label %1809

1809:                                             ; preds = %1808, %1804
  %1810 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1690, align 8
  %1811 = icmp eq %"class.WTF::StringImpl"* %1810, null
  br i1 %1811, label %1825, label %1812

1812:                                             ; preds = %1809
  %1813 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1810, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1814 = load atomic i32, i32* %1813 monotonic, align 4
  %1815 = and i32 %1814, 2
  %1816 = icmp eq i32 %1815, 0
  %1817 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1810, i64 0, i32 0
  %1818 = load i32, i32* %1817, align 4
  br i1 %1816, label %1819, label %1821

1819:                                             ; preds = %1812
  %1820 = add i32 %1818, -1
  store i32 %1820, i32* %1817, align 4
  br label %1821

1821:                                             ; preds = %1819, %1812
  %1822 = phi i32 [ %1820, %1819 ], [ %1818, %1812 ]
  %1823 = icmp eq i32 %1822, 0
  br i1 %1823, label %1824, label %1825

1824:                                             ; preds = %1821
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1810) #7
  br label %1825

1825:                                             ; preds = %1809, %1821, %1824
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1687) #7
  br label %1826

1826:                                             ; preds = %1645, %907, %271, %236, %524, %552, %697, %872, %1094, %1261, %1442, %1609, %1657, %1685, %1803, %1825, %1644, %1616, %1435, %1268, %1093, %948, %920, %871, %726, %698, %523, %312, %284, %229, %62
  call void @_ZN2v88TryCatchD1Ev(%"class.v8::TryCatch"* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %56) #7
  br label %1827

1827:                                             ; preds = %43, %1826, %39, %42
  ret void
}

declare void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"*, i8*) local_unnamed_addr #1

declare zeroext i1 @_ZNK2v85Value8IsObjectEv(%"class.v8::Value"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZN5blink11V8EventInit6ToImplEPN2v87IsolateENS1_5LocalINS1_5ValueEEEPNS_9EventInitERNS_14ExceptionStateE(%"class.v8::Isolate"*, %"class.v8::Value"*, %"class.blink::EventInit"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @_ZN2v88TryCatchC1EPNS_7IsolateE(%"class.v8::TryCatch"*, %"class.v8::Isolate"*) unnamed_addr #1

declare %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"*) local_unnamed_addr #1

declare %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"*, %"class.v8::Context"*, %"class.v8::Value"*) local_unnamed_addr #1

declare %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.v8::TryCatch", align 8
  %4 = tail call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE11PrepareFastEv(%"class.blink::V8StringResource"* %0)
  br i1 %4, label %23, label %5

5:                                                ; preds = %2
  %6 = tail call %"class.v8::Isolate"* @_ZN2v87Isolate10GetCurrentEv() #7
  %7 = bitcast %"class.v8::TryCatch"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %7) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 48, i1 false) #7
  call void @_ZN2v88TryCatchC1EPNS_7IsolateE(%"class.v8::TryCatch"* nonnull %3, %"class.v8::Isolate"* %6) #7
  %8 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %0, i64 0, i32 0, i32 0
  %9 = load %"class.v8::Value"*, %"class.v8::Value"** %8, align 8
  %10 = call %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"* %6) #7
  %11 = call %"class.v8::String"* @_ZNK2v85Value8ToStringENS_5LocalINS_7ContextEEE(%"class.v8::Value"* %9, %"class.v8::Context"* %10) #7
  %12 = ptrtoint %"class.v8::String"* %11 to i64
  %13 = bitcast %"class.blink::V8StringResource"* %0 to i64*
  store i64 %12, i64* %13, align 8
  %14 = icmp eq %"class.v8::String"* %11, null
  br i1 %14, label %15, label %21

15:                                               ; preds = %5
  %16 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %3) #7
  %17 = bitcast %"class.blink::ExceptionState"* %1 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %18 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %17, align 8
  %19 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %18, i64 5
  %20 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %19, align 8
  call void %20(%"class.blink::ExceptionState"* %1, %"class.v8::Value"* %16) #7
  br label %21

21:                                               ; preds = %5, %15
  %22 = phi i1 [ false, %15 ], [ true, %5 ]
  call void @_ZN2v88TryCatchD1Ev(%"class.v8::TryCatch"* nonnull %3) #7
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %7) #7
  br label %23

23:                                               ; preds = %21, %2
  %24 = phi i1 [ true, %2 ], [ %22, %21 ]
  ret i1 %24
}

declare zeroext i1 @_ZN5blink11IsValidEnumERKN3WTF6StringEPKPKcmS3_RNS_14ExceptionStateE(%"class.WTF::String"* dereferenceable(8), i8**, i64, %"class.WTF::String"* dereferenceable(8), %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN2v88TryCatchD1Ev(%"class.v8::TryCatch"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::Value"* @_ZNK5blink32SecurityPolicyViolationEventInit8ToV8ImplEN2v85LocalINS1_6ObjectEEEPNS1_7IsolateE(%"class.blink::SecurityPolicyViolationEventInit"*, %"class.v8::Object"*, %"class.v8::Isolate"*) unnamed_addr #0 align 2 {
  %4 = tail call %"class.v8::Object"* @_ZN2v86Object3NewEPNS_7IsolateE(%"class.v8::Isolate"* %2) #7
  %5 = tail call zeroext i1 @_ZN5blink36toV8SecurityPolicyViolationEventInitEPKNS_32SecurityPolicyViolationEventInitEN2v85LocalINS3_6ObjectEEES6_PNS3_7IsolateE(%"class.blink::SecurityPolicyViolationEventInit"* %0, %"class.v8::Object"* %4, %"class.v8::Object"* %1, %"class.v8::Isolate"* %2)
  %6 = bitcast %"class.v8::Object"* %4 to %"class.v8::Value"*
  %7 = ptrtoint %"class.v8::Isolate"* %2 to i64
  %8 = add i64 %7, 160
  %9 = inttoptr i64 %8 to %"class.v8::Value"*
  %10 = select i1 %5, %"class.v8::Value"* %6, %"class.v8::Value"* %9
  ret %"class.v8::Value"* %10
}

declare %"class.v8::Object"* @_ZN2v86Object3NewEPNS_7IsolateE(%"class.v8::Isolate"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink36toV8SecurityPolicyViolationEventInitEPKNS_32SecurityPolicyViolationEventInitEN2v85LocalINS3_6ObjectEEES6_PNS3_7IsolateE(%"class.blink::SecurityPolicyViolationEventInit"*, %"class.v8::Object"*, %"class.v8::Object"*, %"class.v8::Isolate"*) local_unnamed_addr #0 {
  %5 = alloca %"class.WTF::StringView", align 8
  %6 = alloca %"class.WTF::StringView", align 8
  %7 = alloca %"class.WTF::StringView", align 8
  %8 = alloca %"class.WTF::StringView", align 8
  %9 = alloca %"class.WTF::StringView", align 8
  %10 = alloca %"class.WTF::StringView", align 8
  %11 = alloca %"class.WTF::StringView", align 8
  %12 = alloca %"class.WTF::StringView", align 8
  %13 = alloca %"class.WTF::StringView", align 8
  %14 = alloca %"class.WTF::StringView", align 8
  %15 = alloca %"class.WTF::StringView", align 8
  %16 = alloca %"class.WTF::StringView", align 8
  %17 = alloca %"class.WTF::StringView", align 8
  %18 = bitcast %"class.blink::SecurityPolicyViolationEventInit"* %0 to %"class.blink::EventInit"*
  %19 = tail call zeroext i1 @_ZN5blink13toV8EventInitEPKNS_9EventInitEN2v85LocalINS3_6ObjectEEES6_PNS3_7IsolateE(%"class.blink::EventInit"* %18, %"class.v8::Object"* %1, %"class.v8::Object"* %2, %"class.v8::Isolate"* %3) #7
  br i1 %19, label %20, label %363

20:                                               ; preds = %4
  %21 = ptrtoint %"class.v8::Isolate"* %3 to i64
  %22 = add i64 %21, 8
  %23 = inttoptr i64 %22 to %"class.blink::V8PerIsolateData"**
  %24 = load %"class.blink::V8PerIsolateData"*, %"class.blink::V8PerIsolateData"** %23, align 8
  %25 = tail call { i64, %"class.v8::Eternal"* } @_ZN5blink16V8PerIsolateData28FindOrCreateEternalNameCacheEPKvRKN4base4spanIKPKcLm18446744073709551615EEE(%"class.blink::V8PerIsolateData"* %24, i8* bitcast ([12 x i8*]* @_ZZN5blinkL45eternalV8SecurityPolicyViolationEventInitKeysEPN2v87IsolateEE5kKeys to i8*), %"class.base::span.313"* dereferenceable(16) bitcast ({ i64, i8** }* @.ref.tmp to %"class.base::span.313"*)) #7
  %26 = extractvalue { i64, %"class.v8::Eternal"* } %25, 1
  %27 = tail call %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"* %3) #7
  %28 = getelementptr inbounds %"class.blink::SecurityPolicyViolationEventInit", %"class.blink::SecurityPolicyViolationEventInit"* %0, i64 0, i32 4, i32 0, i32 0
  %29 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %28, align 8
  %30 = icmp eq %"class.WTF::StringImpl"* %29, null
  br i1 %30, label %39, label %31

31:                                               ; preds = %20
  %32 = bitcast %"class.WTF::StringView"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %32) #7
  %33 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 0
  store %"class.WTF::StringImpl"* %29, %"class.WTF::StringImpl"** %33, align 8
  %34 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %29, i64 0, i32 1
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %29, i64 1
  %37 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 1
  %38 = bitcast i8** %37 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %36, %"class.WTF::StringImpl"** %38, align 8
  br label %56

39:                                               ; preds = %20
  %40 = bitcast %"class.WTF::StringView"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %40) #7
  %41 = load %"class.WTF::String"*, %"class.WTF::String"** @_ZN3WTF14g_empty_stringE, align 8
  %42 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %41, i64 0, i32 0, i32 0
  %43 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %42, align 8
  %44 = icmp eq %"class.WTF::StringImpl"* %43, null
  br i1 %44, label %45, label %49

45:                                               ; preds = %39
  %46 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 1
  store i8* null, i8** %46, align 8
  %47 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %48 = bitcast %"class.WTF::StringView"* %6 to i64*
  store i64 %47, i64* %48, align 8
  br label %56

49:                                               ; preds = %39
  %50 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 0
  store %"class.WTF::StringImpl"* %43, %"class.WTF::StringImpl"** %50, align 8
  %51 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %43, i64 0, i32 1
  %52 = load i32, i32* %51, align 4
  %53 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %43, i64 1
  %54 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 1
  %55 = bitcast i8** %54 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %53, %"class.WTF::StringImpl"** %55, align 8
  br label %56

56:                                               ; preds = %49, %45, %31
  %57 = phi %"class.WTF::StringView"* [ %5, %31 ], [ %6, %45 ], [ %6, %49 ]
  %58 = phi i32 [ %35, %31 ], [ 0, %45 ], [ %52, %49 ]
  %59 = phi i8* [ %32, %31 ], [ %40, %45 ], [ %40, %49 ]
  %60 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %57, i64 0, i32 2
  store i32 %58, i32* %60, align 8
  %61 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %57)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %59) #7
  %62 = bitcast %"class.v8::String"* %61 to %"class.v8::Value"*
  %63 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %26, i64 0, i32 0
  %64 = load %"class.v8::Name"*, %"class.v8::Name"** %63, align 8
  %65 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %27, %"class.v8::Name"* %64, %"class.v8::Value"* %62) #7
  %66 = trunc i16 %65 to i8
  %67 = icmp ne i8 %66, 0
  %68 = icmp ugt i16 %65, 255
  %69 = and i1 %68, %67
  br i1 %69, label %70, label %363

70:                                               ; preds = %56
  %71 = getelementptr inbounds %"class.blink::SecurityPolicyViolationEventInit", %"class.blink::SecurityPolicyViolationEventInit"* %0, i64 0, i32 1
  %72 = load i8, i8* %71, align 2, !range !4
  %73 = icmp eq i8 %72, 0
  br i1 %73, label %77, label %74

74:                                               ; preds = %70
  %75 = getelementptr inbounds %"class.blink::SecurityPolicyViolationEventInit", %"class.blink::SecurityPolicyViolationEventInit"* %0, i64 0, i32 5
  %76 = load i32, i32* %75, align 8
  br label %77

77:                                               ; preds = %70, %74
  %78 = phi i32 [ %76, %74 ], [ 0, %70 ]
  %79 = call %"class.v8::Integer"* @_ZN2v87Integer3NewEPNS_7IsolateEi(%"class.v8::Isolate"* %3, i32 %78) #7
  %80 = bitcast %"class.v8::Integer"* %79 to %"class.v8::Value"*
  %81 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %26, i64 1, i32 0
  %82 = load %"class.v8::Name"*, %"class.v8::Name"** %81, align 8
  %83 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %27, %"class.v8::Name"* %82, %"class.v8::Value"* %80) #7
  %84 = trunc i16 %83 to i8
  %85 = icmp ne i8 %84, 0
  %86 = icmp ugt i16 %83, 255
  %87 = and i1 %86, %85
  br i1 %87, label %88, label %363

88:                                               ; preds = %77
  %89 = getelementptr inbounds %"class.blink::SecurityPolicyViolationEventInit", %"class.blink::SecurityPolicyViolationEventInit"* %0, i64 0, i32 6, i32 0, i32 0
  %90 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %89, align 8
  %91 = icmp eq %"class.WTF::StringImpl"* %90, null
  br i1 %91, label %110, label %92

92:                                               ; preds = %88
  %93 = bitcast %"class.WTF::StringView"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %93) #7
  %94 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 0
  store %"class.WTF::StringImpl"* %90, %"class.WTF::StringImpl"** %94, align 8
  %95 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %90, i64 0, i32 1
  %96 = load i32, i32* %95, align 4
  %97 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %90, i64 1
  %98 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 1
  %99 = bitcast i8** %98 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %97, %"class.WTF::StringImpl"** %99, align 8
  %100 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 2
  store i32 %96, i32* %100, align 8
  %101 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %7)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %93) #7
  %102 = bitcast %"class.v8::String"* %101 to %"class.v8::Value"*
  %103 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %26, i64 2, i32 0
  %104 = load %"class.v8::Name"*, %"class.v8::Name"** %103, align 8
  %105 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %27, %"class.v8::Name"* %104, %"class.v8::Value"* %102) #7
  %106 = trunc i16 %105 to i8
  %107 = icmp ne i8 %106, 0
  %108 = icmp ugt i16 %105, 255
  %109 = and i1 %108, %107
  br i1 %109, label %110, label %363

110:                                              ; preds = %88, %92
  %111 = getelementptr inbounds %"class.blink::SecurityPolicyViolationEventInit", %"class.blink::SecurityPolicyViolationEventInit"* %0, i64 0, i32 7, i32 0, i32 0
  %112 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %111, align 8
  %113 = icmp eq %"class.WTF::StringImpl"* %112, null
  br i1 %113, label %132, label %114

114:                                              ; preds = %110
  %115 = bitcast %"class.WTF::StringView"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %115) #7
  %116 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 0
  store %"class.WTF::StringImpl"* %112, %"class.WTF::StringImpl"** %116, align 8
  %117 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %112, i64 0, i32 1
  %118 = load i32, i32* %117, align 4
  %119 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %112, i64 1
  %120 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 1
  %121 = bitcast i8** %120 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %119, %"class.WTF::StringImpl"** %121, align 8
  %122 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 2
  store i32 %118, i32* %122, align 8
  %123 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %8)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %115) #7
  %124 = bitcast %"class.v8::String"* %123 to %"class.v8::Value"*
  %125 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %26, i64 3, i32 0
  %126 = load %"class.v8::Name"*, %"class.v8::Name"** %125, align 8
  %127 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %27, %"class.v8::Name"* %126, %"class.v8::Value"* %124) #7
  %128 = trunc i16 %127 to i8
  %129 = icmp ne i8 %128, 0
  %130 = icmp ugt i16 %127, 255
  %131 = and i1 %130, %129
  br i1 %131, label %132, label %363

132:                                              ; preds = %110, %114
  %133 = getelementptr inbounds %"class.blink::SecurityPolicyViolationEventInit", %"class.blink::SecurityPolicyViolationEventInit"* %0, i64 0, i32 8, i32 0, i32 0
  %134 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %133, align 8
  %135 = icmp eq %"class.WTF::StringImpl"* %134, null
  br i1 %135, label %154, label %136

136:                                              ; preds = %132
  %137 = bitcast %"class.WTF::StringView"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %137) #7
  %138 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 0
  store %"class.WTF::StringImpl"* %134, %"class.WTF::StringImpl"** %138, align 8
  %139 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %134, i64 0, i32 1
  %140 = load i32, i32* %139, align 4
  %141 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %134, i64 1
  %142 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 1
  %143 = bitcast i8** %142 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %141, %"class.WTF::StringImpl"** %143, align 8
  %144 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 2
  store i32 %140, i32* %144, align 8
  %145 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %9)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %137) #7
  %146 = bitcast %"class.v8::String"* %145 to %"class.v8::Value"*
  %147 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %26, i64 4, i32 0
  %148 = load %"class.v8::Name"*, %"class.v8::Name"** %147, align 8
  %149 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %27, %"class.v8::Name"* %148, %"class.v8::Value"* %146) #7
  %150 = trunc i16 %149 to i8
  %151 = icmp ne i8 %150, 0
  %152 = icmp ugt i16 %149, 255
  %153 = and i1 %152, %151
  br i1 %153, label %154, label %363

154:                                              ; preds = %132, %136
  %155 = getelementptr inbounds %"class.blink::SecurityPolicyViolationEventInit", %"class.blink::SecurityPolicyViolationEventInit"* %0, i64 0, i32 2
  %156 = load i8, i8* %155, align 1, !range !4
  %157 = icmp eq i8 %156, 0
  br i1 %157, label %161, label %158

158:                                              ; preds = %154
  %159 = getelementptr inbounds %"class.blink::SecurityPolicyViolationEventInit", %"class.blink::SecurityPolicyViolationEventInit"* %0, i64 0, i32 9
  %160 = load i32, i32* %159, align 8
  br label %161

161:                                              ; preds = %154, %158
  %162 = phi i32 [ %160, %158 ], [ 0, %154 ]
  %163 = call %"class.v8::Integer"* @_ZN2v87Integer3NewEPNS_7IsolateEi(%"class.v8::Isolate"* %3, i32 %162) #7
  %164 = bitcast %"class.v8::Integer"* %163 to %"class.v8::Value"*
  %165 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %26, i64 5, i32 0
  %166 = load %"class.v8::Name"*, %"class.v8::Name"** %165, align 8
  %167 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %27, %"class.v8::Name"* %166, %"class.v8::Value"* %164) #7
  %168 = trunc i16 %167 to i8
  %169 = icmp ne i8 %168, 0
  %170 = icmp ugt i16 %167, 255
  %171 = and i1 %170, %169
  br i1 %171, label %172, label %363

172:                                              ; preds = %161
  %173 = getelementptr inbounds %"class.blink::SecurityPolicyViolationEventInit", %"class.blink::SecurityPolicyViolationEventInit"* %0, i64 0, i32 10, i32 0, i32 0
  %174 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %173, align 8
  %175 = icmp eq %"class.WTF::StringImpl"* %174, null
  br i1 %175, label %194, label %176

176:                                              ; preds = %172
  %177 = bitcast %"class.WTF::StringView"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %177) #7
  %178 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 0
  store %"class.WTF::StringImpl"* %174, %"class.WTF::StringImpl"** %178, align 8
  %179 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %174, i64 0, i32 1
  %180 = load i32, i32* %179, align 4
  %181 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %174, i64 1
  %182 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 1
  %183 = bitcast i8** %182 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %181, %"class.WTF::StringImpl"** %183, align 8
  %184 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 2
  store i32 %180, i32* %184, align 8
  %185 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %10)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %177) #7
  %186 = bitcast %"class.v8::String"* %185 to %"class.v8::Value"*
  %187 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %26, i64 6, i32 0
  %188 = load %"class.v8::Name"*, %"class.v8::Name"** %187, align 8
  %189 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %27, %"class.v8::Name"* %188, %"class.v8::Value"* %186) #7
  %190 = trunc i16 %189 to i8
  %191 = icmp ne i8 %190, 0
  %192 = icmp ugt i16 %189, 255
  %193 = and i1 %192, %191
  br i1 %193, label %194, label %363

194:                                              ; preds = %172, %176
  %195 = getelementptr inbounds %"class.blink::SecurityPolicyViolationEventInit", %"class.blink::SecurityPolicyViolationEventInit"* %0, i64 0, i32 11, i32 0, i32 0
  %196 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %195, align 8
  %197 = icmp eq %"class.WTF::StringImpl"* %196, null
  br i1 %197, label %206, label %198

198:                                              ; preds = %194
  %199 = bitcast %"class.WTF::StringView"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %199) #7
  %200 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 0
  store %"class.WTF::StringImpl"* %196, %"class.WTF::StringImpl"** %200, align 8
  %201 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %196, i64 0, i32 1
  %202 = load i32, i32* %201, align 4
  %203 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %196, i64 1
  %204 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 1
  %205 = bitcast i8** %204 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %203, %"class.WTF::StringImpl"** %205, align 8
  br label %223

206:                                              ; preds = %194
  %207 = bitcast %"class.WTF::StringView"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %207) #7
  %208 = load %"class.WTF::String"*, %"class.WTF::String"** @_ZN3WTF14g_empty_stringE, align 8
  %209 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %208, i64 0, i32 0, i32 0
  %210 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %209, align 8
  %211 = icmp eq %"class.WTF::StringImpl"* %210, null
  br i1 %211, label %212, label %216

212:                                              ; preds = %206
  %213 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %12, i64 0, i32 1
  store i8* null, i8** %213, align 8
  %214 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %215 = bitcast %"class.WTF::StringView"* %12 to i64*
  store i64 %214, i64* %215, align 8
  br label %223

216:                                              ; preds = %206
  %217 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %12, i64 0, i32 0
  store %"class.WTF::StringImpl"* %210, %"class.WTF::StringImpl"** %217, align 8
  %218 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %210, i64 0, i32 1
  %219 = load i32, i32* %218, align 4
  %220 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %210, i64 1
  %221 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %12, i64 0, i32 1
  %222 = bitcast i8** %221 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %220, %"class.WTF::StringImpl"** %222, align 8
  br label %223

223:                                              ; preds = %216, %212, %198
  %224 = phi %"class.WTF::StringView"* [ %11, %198 ], [ %12, %212 ], [ %12, %216 ]
  %225 = phi i32 [ %202, %198 ], [ 0, %212 ], [ %219, %216 ]
  %226 = phi i8* [ %199, %198 ], [ %207, %212 ], [ %207, %216 ]
  %227 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %224, i64 0, i32 2
  store i32 %225, i32* %227, align 8
  %228 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %224)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %226) #7
  %229 = bitcast %"class.v8::String"* %228 to %"class.v8::Value"*
  %230 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %26, i64 7, i32 0
  %231 = load %"class.v8::Name"*, %"class.v8::Name"** %230, align 8
  %232 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %27, %"class.v8::Name"* %231, %"class.v8::Value"* %229) #7
  %233 = trunc i16 %232 to i8
  %234 = icmp ne i8 %233, 0
  %235 = icmp ugt i16 %232, 255
  %236 = and i1 %235, %234
  br i1 %236, label %237, label %363

237:                                              ; preds = %223
  %238 = getelementptr inbounds %"class.blink::SecurityPolicyViolationEventInit", %"class.blink::SecurityPolicyViolationEventInit"* %0, i64 0, i32 12, i32 0, i32 0
  %239 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %238, align 8
  %240 = icmp eq %"class.WTF::StringImpl"* %239, null
  br i1 %240, label %249, label %241

241:                                              ; preds = %237
  %242 = bitcast %"class.WTF::StringView"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %242) #7
  %243 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %13, i64 0, i32 0
  store %"class.WTF::StringImpl"* %239, %"class.WTF::StringImpl"** %243, align 8
  %244 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %239, i64 0, i32 1
  %245 = load i32, i32* %244, align 4
  %246 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %239, i64 1
  %247 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %13, i64 0, i32 1
  %248 = bitcast i8** %247 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %246, %"class.WTF::StringImpl"** %248, align 8
  br label %266

249:                                              ; preds = %237
  %250 = bitcast %"class.WTF::StringView"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %250) #7
  %251 = load %"class.WTF::String"*, %"class.WTF::String"** @_ZN3WTF14g_empty_stringE, align 8
  %252 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %251, i64 0, i32 0, i32 0
  %253 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %252, align 8
  %254 = icmp eq %"class.WTF::StringImpl"* %253, null
  br i1 %254, label %255, label %259

255:                                              ; preds = %249
  %256 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %14, i64 0, i32 1
  store i8* null, i8** %256, align 8
  %257 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %258 = bitcast %"class.WTF::StringView"* %14 to i64*
  store i64 %257, i64* %258, align 8
  br label %266

259:                                              ; preds = %249
  %260 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %14, i64 0, i32 0
  store %"class.WTF::StringImpl"* %253, %"class.WTF::StringImpl"** %260, align 8
  %261 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %253, i64 0, i32 1
  %262 = load i32, i32* %261, align 4
  %263 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %253, i64 1
  %264 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %14, i64 0, i32 1
  %265 = bitcast i8** %264 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %263, %"class.WTF::StringImpl"** %265, align 8
  br label %266

266:                                              ; preds = %259, %255, %241
  %267 = phi %"class.WTF::StringView"* [ %13, %241 ], [ %14, %255 ], [ %14, %259 ]
  %268 = phi i32 [ %245, %241 ], [ 0, %255 ], [ %262, %259 ]
  %269 = phi i8* [ %242, %241 ], [ %250, %255 ], [ %250, %259 ]
  %270 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %267, i64 0, i32 2
  store i32 %268, i32* %270, align 8
  %271 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %267)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %269) #7
  %272 = bitcast %"class.v8::String"* %271 to %"class.v8::Value"*
  %273 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %26, i64 8, i32 0
  %274 = load %"class.v8::Name"*, %"class.v8::Name"** %273, align 8
  %275 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %27, %"class.v8::Name"* %274, %"class.v8::Value"* %272) #7
  %276 = trunc i16 %275 to i8
  %277 = icmp ne i8 %276, 0
  %278 = icmp ugt i16 %275, 255
  %279 = and i1 %278, %277
  br i1 %279, label %280, label %363

280:                                              ; preds = %266
  %281 = getelementptr inbounds %"class.blink::SecurityPolicyViolationEventInit", %"class.blink::SecurityPolicyViolationEventInit"* %0, i64 0, i32 13, i32 0, i32 0
  %282 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %281, align 8
  %283 = icmp eq %"class.WTF::StringImpl"* %282, null
  br i1 %283, label %292, label %284

284:                                              ; preds = %280
  %285 = bitcast %"class.WTF::StringView"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %285) #7
  %286 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %15, i64 0, i32 0
  store %"class.WTF::StringImpl"* %282, %"class.WTF::StringImpl"** %286, align 8
  %287 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %282, i64 0, i32 1
  %288 = load i32, i32* %287, align 4
  %289 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %282, i64 1
  %290 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %15, i64 0, i32 1
  %291 = bitcast i8** %290 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %289, %"class.WTF::StringImpl"** %291, align 8
  br label %309

292:                                              ; preds = %280
  %293 = bitcast %"class.WTF::StringView"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %293) #7
  %294 = load %"class.WTF::String"*, %"class.WTF::String"** @_ZN3WTF14g_empty_stringE, align 8
  %295 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %294, i64 0, i32 0, i32 0
  %296 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %295, align 8
  %297 = icmp eq %"class.WTF::StringImpl"* %296, null
  br i1 %297, label %298, label %302

298:                                              ; preds = %292
  %299 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %16, i64 0, i32 1
  store i8* null, i8** %299, align 8
  %300 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %301 = bitcast %"class.WTF::StringView"* %16 to i64*
  store i64 %300, i64* %301, align 8
  br label %309

302:                                              ; preds = %292
  %303 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %16, i64 0, i32 0
  store %"class.WTF::StringImpl"* %296, %"class.WTF::StringImpl"** %303, align 8
  %304 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %296, i64 0, i32 1
  %305 = load i32, i32* %304, align 4
  %306 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %296, i64 1
  %307 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %16, i64 0, i32 1
  %308 = bitcast i8** %307 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %306, %"class.WTF::StringImpl"** %308, align 8
  br label %309

309:                                              ; preds = %302, %298, %284
  %310 = phi %"class.WTF::StringView"* [ %15, %284 ], [ %16, %298 ], [ %16, %302 ]
  %311 = phi i32 [ %288, %284 ], [ 0, %298 ], [ %305, %302 ]
  %312 = phi i8* [ %285, %284 ], [ %293, %298 ], [ %293, %302 ]
  %313 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %310, i64 0, i32 2
  store i32 %311, i32* %313, align 8
  %314 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %310)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %312) #7
  %315 = bitcast %"class.v8::String"* %314 to %"class.v8::Value"*
  %316 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %26, i64 9, i32 0
  %317 = load %"class.v8::Name"*, %"class.v8::Name"** %316, align 8
  %318 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %27, %"class.v8::Name"* %317, %"class.v8::Value"* %315) #7
  %319 = trunc i16 %318 to i8
  %320 = icmp ne i8 %319, 0
  %321 = icmp ugt i16 %318, 255
  %322 = and i1 %321, %320
  br i1 %322, label %323, label %363

323:                                              ; preds = %309
  %324 = getelementptr inbounds %"class.blink::SecurityPolicyViolationEventInit", %"class.blink::SecurityPolicyViolationEventInit"* %0, i64 0, i32 3
  %325 = load i8, i8* %324, align 8, !range !4
  %326 = icmp eq i8 %325, 0
  br i1 %326, label %340, label %327

327:                                              ; preds = %323
  %328 = getelementptr inbounds %"class.blink::SecurityPolicyViolationEventInit", %"class.blink::SecurityPolicyViolationEventInit"* %0, i64 0, i32 14
  %329 = load i16, i16* %328, align 8
  %330 = zext i16 %329 to i32
  %331 = call %"class.v8::Integer"* @_ZN2v87Integer15NewFromUnsignedEPNS_7IsolateEj(%"class.v8::Isolate"* %3, i32 %330) #7
  %332 = bitcast %"class.v8::Integer"* %331 to %"class.v8::Value"*
  %333 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %26, i64 10, i32 0
  %334 = load %"class.v8::Name"*, %"class.v8::Name"** %333, align 8
  %335 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %27, %"class.v8::Name"* %334, %"class.v8::Value"* %332) #7
  %336 = trunc i16 %335 to i8
  %337 = icmp ne i8 %336, 0
  %338 = icmp ugt i16 %335, 255
  %339 = and i1 %338, %337
  br i1 %339, label %340, label %363

340:                                              ; preds = %323, %327
  %341 = getelementptr inbounds %"class.blink::SecurityPolicyViolationEventInit", %"class.blink::SecurityPolicyViolationEventInit"* %0, i64 0, i32 15, i32 0, i32 0
  %342 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %341, align 8
  %343 = icmp eq %"class.WTF::StringImpl"* %342, null
  br i1 %343, label %362, label %344

344:                                              ; preds = %340
  %345 = bitcast %"class.WTF::StringView"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %345) #7
  %346 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %17, i64 0, i32 0
  store %"class.WTF::StringImpl"* %342, %"class.WTF::StringImpl"** %346, align 8
  %347 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %342, i64 0, i32 1
  %348 = load i32, i32* %347, align 4
  %349 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %342, i64 1
  %350 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %17, i64 0, i32 1
  %351 = bitcast i8** %350 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %349, %"class.WTF::StringImpl"** %351, align 8
  %352 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %17, i64 0, i32 2
  store i32 %348, i32* %352, align 8
  %353 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %17)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %345) #7
  %354 = bitcast %"class.v8::String"* %353 to %"class.v8::Value"*
  %355 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %26, i64 11, i32 0
  %356 = load %"class.v8::Name"*, %"class.v8::Name"** %355, align 8
  %357 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %27, %"class.v8::Name"* %356, %"class.v8::Value"* %354) #7
  %358 = trunc i16 %357 to i8
  %359 = icmp ne i8 %358, 0
  %360 = icmp ugt i16 %357, 255
  %361 = and i1 %360, %359
  br i1 %361, label %362, label %363

362:                                              ; preds = %340, %344
  br label %363

363:                                              ; preds = %56, %92, %136, %176, %266, %327, %344, %362, %309, %223, %161, %114, %77, %4
  %364 = phi i1 [ false, %4 ], [ false, %56 ], [ false, %77 ], [ false, %92 ], [ false, %114 ], [ false, %136 ], [ false, %161 ], [ false, %176 ], [ false, %223 ], [ false, %266 ], [ false, %309 ], [ false, %327 ], [ true, %362 ], [ false, %344 ]
  ret i1 %364
}

declare zeroext i1 @_ZN5blink13toV8EventInitEPKNS_9EventInitEN2v85LocalINS3_6ObjectEEES6_PNS3_7IsolateE(%"class.blink::EventInit"*, %"class.v8::Object"*, %"class.v8::Object"*, %"class.v8::Isolate"*) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"*, %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #4 comdat {
  %3 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 1
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  %6 = bitcast i8* %4 to i16*
  br i1 %5, label %7, label %11

7:                                                ; preds = %2
  %8 = ptrtoint %"class.v8::Isolate"* %0 to i64
  %9 = add i64 %8, 200
  %10 = inttoptr i64 %9 to %"class.v8::String"*
  br label %63

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 0
  %13 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %12, align 8
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 1
  %15 = bitcast %"class.WTF::StringImpl"* %14 to i8*
  %16 = icmp eq i8* %4, %15
  br i1 %16, label %17, label %48

17:                                               ; preds = %11
  %18 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %19 = load i32, i32* %18, align 8
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = icmp ne i32 %19, %21
  %23 = icmp eq %"class.WTF::StringImpl"* %13, null
  %24 = or i1 %23, %22
  br i1 %24, label %48, label %25

25:                                               ; preds = %17
  %26 = ptrtoint %"class.v8::Isolate"* %0 to i64
  %27 = add i64 %26, 8
  %28 = inttoptr i64 %27 to %"class.blink::V8PerIsolateData"**
  %29 = load %"class.blink::V8PerIsolateData"*, %"class.blink::V8PerIsolateData"** %28, align 8
  %30 = getelementptr inbounds %"class.blink::V8PerIsolateData", %"class.blink::V8PerIsolateData"* %29, i64 0, i32 5, i32 0, i32 0, i32 0
  %31 = load %"class.blink::StringCache"*, %"class.blink::StringCache"** %30, align 8
  %32 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %31, i64 0, i32 3, i32 0
  %33 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %32, align 8
  %34 = icmp eq %"class.WTF::StringImpl"* %33, %13
  br i1 %34, label %35, label %46

35:                                               ; preds = %25
  %36 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %31, i64 0, i32 1
  %37 = bitcast %"class.v8::PersistentValueMapBase<WTF::StringImpl *, v8::String, blink::StringCacheMapTraits>::PersistentValueReference"* %36 to %"class.v8::String"**
  %38 = load %"class.v8::String"*, %"class.v8::String"** %37, align 8
  %39 = icmp eq %"class.v8::String"* %38, null
  br i1 %39, label %63, label %40

40:                                               ; preds = %35
  %41 = bitcast %"class.v8::String"* %38 to i64*
  %42 = bitcast %"class.v8::Isolate"* %0 to %"class.v8::internal::Isolate"*
  %43 = load i64, i64* %41, align 8
  %44 = tail call i64* @_ZN2v811HandleScope12CreateHandleEPNS_8internal7IsolateEm(%"class.v8::internal::Isolate"* %42, i64 %43) #7
  %45 = bitcast i64* %44 to %"class.v8::String"*
  br label %63

46:                                               ; preds = %25
  %47 = tail call %"class.v8::String"* @_ZN5blink11StringCache20V8ExternalStringSlowEPN2v87IsolateEPN3WTF10StringImplE(%"class.blink::StringCache"* %31, %"class.v8::Isolate"* %0, %"class.WTF::StringImpl"* nonnull %13) #7
  br label %63

48:                                               ; preds = %17, %11
  %49 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %50 = load atomic i32, i32* %49 monotonic, align 4
  %51 = and i32 %50, 1
  %52 = icmp eq i32 %51, 0
  %53 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %54 = load i32, i32* %53, align 8
  br i1 %52, label %59, label %55

55:                                               ; preds = %48
  %56 = tail call %"class.v8::String"* @_ZN2v86String14NewFromOneByteEPNS_7IsolateEPKhNS_13NewStringTypeEi(%"class.v8::Isolate"* %0, i8* nonnull %4, i32 0, i32 %54) #7
  %57 = icmp eq %"class.v8::String"* %56, null
  br i1 %57, label %58, label %63, !prof !2

58:                                               ; preds = %55
  tail call void @_ZN2v82V812ToLocalEmptyEv() #7
  br label %63

59:                                               ; preds = %48
  %60 = tail call %"class.v8::String"* @_ZN2v86String14NewFromTwoByteEPNS_7IsolateEPKtNS_13NewStringTypeEi(%"class.v8::Isolate"* %0, i16* nonnull %6, i32 0, i32 %54) #7
  %61 = icmp eq %"class.v8::String"* %60, null
  br i1 %61, label %62, label %63, !prof !2

62:                                               ; preds = %59
  tail call void @_ZN2v82V812ToLocalEmptyEv() #7
  br label %63

63:                                               ; preds = %46, %40, %35, %62, %59, %58, %55, %7
  %64 = phi %"class.v8::String"* [ %10, %7 ], [ %56, %55 ], [ null, %58 ], [ %60, %59 ], [ null, %62 ], [ null, %35 ], [ %45, %40 ], [ %47, %46 ]
  ret %"class.v8::String"* %64
}

declare %"class.v8::Integer"* @_ZN2v87Integer3NewEPNS_7IsolateEi(%"class.v8::Isolate"*, i32) local_unnamed_addr #1

declare %"class.v8::Integer"* @_ZN2v87Integer15NewFromUnsignedEPNS_7IsolateEj(%"class.v8::Isolate"*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::SecurityPolicyViolationEventInit"* @_ZN5blink17NativeValueTraitsINS_32SecurityPolicyViolationEventInitEvE11NativeValueEPN2v87IsolateENS3_5LocalINS3_5ValueEEERNS_14ExceptionStateE(%"class.v8::Isolate"*, %"class.v8::Value"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %4 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_17IDLDictionaryBaseEEEPhm(i64 120) #7
  %5 = bitcast i8* %4 to %"class.blink::SecurityPolicyViolationEventInit"*
  tail call void @_ZN5blink32SecurityPolicyViolationEventInitC1Ev(%"class.blink::SecurityPolicyViolationEventInit"* %5) #7
  %6 = getelementptr inbounds i8, i8* %4, i64 -4
  %7 = bitcast i8* %6 to i16*
  %8 = load atomic i16, i16* %7 monotonic, align 2
  %9 = or i16 %8, 1
  store atomic i16 %9, i16* %7 release, align 2
  tail call void @_ZN5blink34V8SecurityPolicyViolationEventInit6ToImplEPN2v87IsolateENS1_5LocalINS1_5ValueEEEPNS_32SecurityPolicyViolationEventInitERNS_14ExceptionStateE(%"class.v8::Isolate"* %0, %"class.v8::Value"* %1, %"class.blink::SecurityPolicyViolationEventInit"* %5, %"class.blink::ExceptionState"* dereferenceable(72) %2)
  ret %"class.blink::SecurityPolicyViolationEventInit"* %5
}

declare { i64, %"class.v8::Eternal"* } @_ZN5blink16V8PerIsolateData28FindOrCreateEternalNameCacheEPKvRKN4base4spanIKPKcLm18446744073709551615EEE(%"class.blink::V8PerIsolateData"*, i8*, %"class.base::span.313"* dereferenceable(16)) local_unnamed_addr #1

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #5

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #6

declare void @_ZN3WTF10Partitions10BufferFreeEPv(i8*) local_unnamed_addr #1

declare void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"*, i8*, i64) unnamed_addr #1

declare %"class.v8::String"* @_ZN2v86String14NewFromOneByteEPNS_7IsolateEPKhNS_13NewStringTypeEi(%"class.v8::Isolate"*, i8*, i32, i32) local_unnamed_addr #1

declare %"class.v8::String"* @_ZN2v86String14NewFromTwoByteEPNS_7IsolateEPKtNS_13NewStringTypeEi(%"class.v8::Isolate"*, i16*, i32, i32) local_unnamed_addr #1

declare %"class.v8::String"* @_ZN5blink11StringCache20V8ExternalStringSlowEPN2v87IsolateEPN3WTF10StringImplE(%"class.blink::StringCache"*, %"class.v8::Isolate"*, %"class.WTF::StringImpl"*) local_unnamed_addr #1

declare i64* @_ZN2v811HandleScope12CreateHandleEPNS_8internal7IsolateEm(%"class.v8::internal::Isolate"*, i64) local_unnamed_addr #1

declare void @_ZN2v82V812ToLocalEmptyEv() local_unnamed_addr #1

declare i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"*, %"class.v8::Context"*, %"class.v8::Name"*, %"class.v8::Value"*) local_unnamed_addr #1

declare void @_ZN5blink32SecurityPolicyViolationEventInitC1Ev(%"class.blink::SecurityPolicyViolationEventInit"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink10ThreadHeap8AllocateINS_17IDLDictionaryBaseEEEPhm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %6 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %5, i64 0, i32 1
  %7 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %6) #7
  %8 = icmp eq i8* %7, null
  br i1 %8, label %9, label %11, !prof !2

9:                                                ; preds = %1
  %10 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #7
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %6, i8* %10) #7
  br label %11

11:                                               ; preds = %1, %9
  %12 = phi i8* [ %10, %9 ], [ %7, %1 ]
  %13 = bitcast i8* %12 to %"class.blink::ThreadState"**
  %14 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %13, align 8
  %15 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %14, i64 0, i32 0, i32 0, i32 0, i32 0
  %16 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %15, align 8
  %17 = icmp ult i64 %0, 64
  %18 = icmp ugt i64 %0, 31
  %19 = zext i1 %18 to i64
  %20 = icmp ult i64 %0, 128
  %21 = select i1 %20, i64 2, i64 3
  %22 = select i1 %17, i64 %19, i64 %21
  %23 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %28

25:                                               ; preds = %11
  %26 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %27 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %26, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #7
  br label %28

28:                                               ; preds = %11, %25
  %29 = phi i32 [ %23, %11 ], [ %27, %25 ]
  %30 = getelementptr inbounds %"class.blink::ThreadHeap", %"class.blink::ThreadHeap"* %16, i64 0, i32 19, i64 %22
  %31 = bitcast %"class.blink::BaseArena"** %30 to %"class.blink::NormalPageArena"**
  %32 = load %"class.blink::NormalPageArena"*, %"class.blink::NormalPageArena"** %31, align 8
  %33 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #7
  %34 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %34, align 8
  %35 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #7
  %36 = icmp ult i64 %0, -8
  br i1 %36, label %37, label %38

37:                                               ; preds = %28
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #7
  store i8* null, i8** %34, align 8
  br label %48

38:                                               ; preds = %28
  %39 = add nsw i64 %0, 8
  %40 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %39) #7
  %41 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.23, i64 0, i64 0), i8* %40, i8* %41) #7
  %42 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %43 = load i8*, i8** %42, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #7
  store i8* %43, i8** %34, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %48, label %45

45:                                               ; preds = %38
  %46 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %46) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.24, i64 0, i64 0), i32 246, %"class.logging::CheckOpResult"* nonnull %3) #7
  %47 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %46) #7
  br label %48

48:                                               ; preds = %37, %38, %45
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #7
  %49 = add i64 %0, 15
  %50 = and i64 %49, -8
  %51 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %32, i64 0, i32 4
  %52 = load i64, i64* %51, align 8
  %53 = icmp ult i64 %52, %50
  br i1 %53, label %86, label %54, !prof !2

54:                                               ; preds = %48
  %55 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %32, i64 0, i32 3
  %56 = load i8*, i8** %55, align 8
  %57 = getelementptr inbounds i8, i8* %56, i64 %50
  store i8* %57, i8** %55, align 8
  %58 = sub i64 %52, %50
  store i64 %58, i64* %51, align 8
  %59 = bitcast i8* %56 to i32*
  store i32 0, i32* %59, align 4
  %60 = getelementptr inbounds i8, i8* %56, i64 4
  %61 = bitcast i8* %60 to i16*
  %62 = trunc i32 %29 to i16
  %63 = shl i16 %62, 2
  store atomic i16 %63, i16* %61 monotonic, align 2
  %64 = lshr exact i64 %50, 1
  %65 = trunc i64 %64 to i16
  %66 = getelementptr inbounds i8, i8* %56, i64 6
  %67 = bitcast i8* %66 to i16*
  store i16 %65, i16* %67, align 2
  %68 = ptrtoint i8* %56 to i64
  %69 = and i64 %68, -131072
  %70 = inttoptr i64 %69 to i8*
  %71 = getelementptr inbounds i8, i8* %70, i64 4400
  %72 = bitcast i8* %71 to %"class.blink::PlatformAwareObjectStartBitmap"*
  %73 = bitcast i8* %71 to i64*
  %74 = load i64, i64* %73, align 16
  %75 = sub i64 %68, %74
  %76 = lshr i64 %75, 3
  %77 = lshr i64 %75, 6
  %78 = getelementptr inbounds %"class.blink::PlatformAwareObjectStartBitmap", %"class.blink::PlatformAwareObjectStartBitmap"* %72, i64 0, i32 0, i32 1, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = trunc i64 %76 to i32
  %81 = and i32 %80, 7
  %82 = shl i32 1, %81
  %83 = trunc i32 %82 to i8
  %84 = or i8 %79, %83
  store atomic i8 %84, i8* %78 release, align 1
  %85 = getelementptr inbounds i8, i8* %56, i64 8
  br label %89

86:                                               ; preds = %48
  %87 = zext i32 %29 to i64
  %88 = call i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"* %32, i64 %50, i64 %87) #7
  br label %89

89:                                               ; preds = %54, %86
  %90 = phi i8* [ %85, %54 ], [ %88, %86 ]
  ret i8* %90
}

declare i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64, i8*) local_unnamed_addr #1

declare i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"*) local_unnamed_addr #1

declare void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"*, i8*) local_unnamed_addr #1

declare i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"*, i64, i64) local_unnamed_addr #1

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #1

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_17IDLDictionaryBaseEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::IDLDictionaryBase"*
  %4 = bitcast i8* %1 to void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)***
  %5 = load void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)**, void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)*, void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)** %5, i64 3
  %7 = load void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)*, void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)** %6, align 8
  tail call void %7(%"class.blink::IDLDictionaryBase"* %3, %"class.blink::Visitor"* %0) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8internal14FinalizerTraitINS_17IDLDictionaryBaseEE8FinalizeEPv(i8*) #0 comdat align 2 {
  %2 = bitcast i8* %0 to %"class.blink::IDLDictionaryBase"*
  %3 = bitcast i8* %0 to void (%"class.blink::IDLDictionaryBase"*)***
  %4 = load void (%"class.blink::IDLDictionaryBase"*)**, void (%"class.blink::IDLDictionaryBase"*)*** %3, align 8
  %5 = load void (%"class.blink::IDLDictionaryBase"*)*, void (%"class.blink::IDLDictionaryBase"*)** %4, align 8
  tail call void %5(%"class.blink::IDLDictionaryBase"* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_17IDLDictionaryBaseEE7GetNameEPKv(i8*) #0 comdat align 2 {
  ret { i8*, i8 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.25, i64 0, i64 0), i8 1 }
}

declare i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"*, %"struct.blink::GCInfo"*, %"struct.std::__1::atomic"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE11PrepareFastEv(%"class.blink::V8StringResource"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.v8::Value"*, %"class.v8::Value"** %2, align 8
  %4 = icmp eq %"class.v8::Value"* %3, null
  br i1 %4, label %82, label %5

5:                                                ; preds = %1
  %6 = bitcast %"class.v8::Value"* %3 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = and i64 %7, 3
  %9 = icmp eq i64 %8, 1
  br i1 %9, label %10, label %21, !prof !5

10:                                               ; preds = %5
  %11 = add i64 %7, -1
  %12 = inttoptr i64 %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = and i64 %7, -4294967296
  %15 = zext i32 %13 to i64
  %16 = or i64 %14, %15
  %17 = add i64 %16, 7
  %18 = inttoptr i64 %17 to i16*
  %19 = load i16, i16* %18, align 2
  %20 = icmp ult i16 %19, 64
  br i1 %20, label %82, label %21, !prof !3

21:                                               ; preds = %5, %10
  %22 = tail call zeroext i1 @_ZNK2v85Value7IsInt32Ev(%"class.v8::Value"* nonnull %3) #7
  br i1 %22, label %23, label %80, !prof !3

23:                                               ; preds = %21
  %24 = bitcast %"class.blink::V8StringResource"* %0 to %"class.v8::Int32"**
  %25 = load %"class.v8::Int32"*, %"class.v8::Int32"** %24, align 8
  %26 = tail call i32 @_ZNK2v85Int325ValueEv(%"class.v8::Int32"* %25) #7
  %27 = tail call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringEi(i32 %26) #7
  %28 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %0, i64 0, i32 2
  %29 = icmp eq %"class.WTF::StringImpl"* %27, null
  br i1 %29, label %47, label %30

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load atomic i32, i32* %31 monotonic, align 4
  %33 = and i32 %32, 2
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %47

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 0
  %37 = load i32, i32* %36, align 4
  %38 = zext i32 %37 to i33
  %39 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %38, i33 1) #7
  %40 = extractvalue { i33, i1 } %39, 1
  %41 = extractvalue { i33, i1 } %39, 0
  %42 = icmp slt i33 %41, 0
  %43 = or i1 %40, %42
  br i1 %43, label %44, label %45, !prof !2

44:                                               ; preds = %35
  tail call void @llvm.trap() #7
  unreachable

45:                                               ; preds = %35
  %46 = trunc i33 %41 to i32
  store i32 %46, i32* %36, align 4
  br label %47

47:                                               ; preds = %45, %30, %23
  %48 = ptrtoint %"class.WTF::StringImpl"* %27 to i64
  %49 = bitcast %"class.WTF::String"* %28 to i64*
  %50 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %28, i64 0, i32 0, i32 0
  %51 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %50, align 8
  store i64 %48, i64* %49, align 8
  %52 = icmp eq %"class.WTF::StringImpl"* %51, null
  br i1 %52, label %66, label %53

53:                                               ; preds = %47
  %54 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %51, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %55 = load atomic i32, i32* %54 monotonic, align 4
  %56 = and i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %51, i64 0, i32 0
  %59 = load i32, i32* %58, align 4
  br i1 %57, label %60, label %62

60:                                               ; preds = %53
  %61 = add i32 %59, -1
  store i32 %61, i32* %58, align 4
  br label %62

62:                                               ; preds = %60, %53
  %63 = phi i32 [ %61, %60 ], [ %59, %53 ]
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %66

65:                                               ; preds = %62
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %51) #7
  br label %66

66:                                               ; preds = %47, %62, %65
  store %"class.v8::Value"* null, %"class.v8::Value"** %2, align 8
  br i1 %29, label %82, label %67

67:                                               ; preds = %66
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %69 = load atomic i32, i32* %68 monotonic, align 4
  %70 = and i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 0
  %73 = load i32, i32* %72, align 4
  br i1 %71, label %74, label %76

74:                                               ; preds = %67
  %75 = add i32 %73, -1
  store i32 %75, i32* %72, align 4
  br label %76

76:                                               ; preds = %74, %67
  %77 = phi i32 [ %75, %74 ], [ %73, %67 ]
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %82

79:                                               ; preds = %76
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %27) #7
  br label %82

80:                                               ; preds = %21
  %81 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %0, i64 0, i32 1
  store i32 1, i32* %81, align 8
  br label %82

82:                                               ; preds = %79, %76, %66, %10, %1, %80
  %83 = phi i1 [ false, %80 ], [ true, %1 ], [ true, %10 ], [ true, %66 ], [ true, %76 ], [ true, %79 ]
  ret i1 %83
}

declare %"class.v8::Isolate"* @_ZN2v87Isolate10GetCurrentEv() local_unnamed_addr #1

declare zeroext i1 @_ZNK2v85Value7IsInt32Ev(%"class.v8::Value"*) local_unnamed_addr #1

declare %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringEi(i32) local_unnamed_addr #1

declare i32 @_ZNK2v85Int325ValueEv(%"class.v8::Int32"*) local_unnamed_addr #1

declare %"class.v8::String"* @_ZNK2v85Value8ToStringENS_5LocalINS_7ContextEEE(%"class.v8::Value"*, %"class.v8::Context"*) local_unnamed_addr #1

declare %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"*, i32) local_unnamed_addr #1

declare i32 @_ZN5blink11ToInt32SlowEPN2v87IsolateENS0_5LocalINS0_5ValueEEENS_30IntegerConversionConfigurationERNS_14ExceptionStateE(%"class.v8::Isolate"*, %"class.v8::Value"*, i32, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #1

declare zeroext i16 @_ZN5blink8ToUInt16EPN2v87IsolateENS0_5LocalINS0_5ValueEEENS_30IntegerConversionConfigurationERNS_14ExceptionStateE(%"class.v8::Isolate"*, %"class.v8::Value"*, i32, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { cold noreturn nounwind }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!"branch_weights", i32 2000, i32 1}
!4 = !{i8 0, i8 2}
!5 = !{!"branch_weights", i32 2146410443, i32 1073205}
