; ModuleID = '../../third_party/blink/renderer/core/svg/svg_matrix_tear_off.cc'
source_filename = "../../third_party/blink/renderer/core/svg/svg_matrix_tear_off.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.blink::WrapperTypeInfo" = type { i16, void (%"class.v8::Isolate"*, %"class.blink::DOMWrapperWorld"*, %"class.v8::Template"*)*, void (%"class.v8::Context"*, %"class.blink::DOMWrapperWorld"*, %"class.v8::Object"*, %"class.v8::Object"*, %"class.v8::Object"*, %"class.v8::Template"*, i64)*, i8*, %"struct.blink::WrapperTypeInfo"*, i8 }
%"class.v8::Isolate" = type { i8 }
%"class.blink::DOMWrapperWorld" = type opaque
%"class.v8::Template" = type { i8 }
%"class.v8::Context" = type { i8 }
%"class.v8::Object" = type { i8 }
%"class.WTF::ThreadSpecific" = type { %"class.blink::ThreadState"**, %"class.base::ThreadLocalStorage::Slot" }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr", i32, [4 x i8], %"class.std::__1::unique_ptr.133", %"class.std::__1::unique_ptr.133", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.143", %"class.std::__1::unique_ptr.149", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.161", %"class.std::__1::unique_ptr.167", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.173", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.11", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.21", %"class.std::__1::unique_ptr.27", %"class.std::__1::unique_ptr.33", %"class.std::__1::unique_ptr.39", %"class.std::__1::unique_ptr.46", %"class.std::__1::unique_ptr.53", %"class.std::__1::unique_ptr.53", %"class.std::__1::unique_ptr.60", %"class.std::__1::unique_ptr.67", %"class.std::__1::unique_ptr.74", %"class.std::__1::unique_ptr.74", %"class.std::__1::unique_ptr.81", %"class.std::__1::unique_ptr.88", %"class.std::__1::unique_ptr.95", %"class.std::__1::unique_ptr.118", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.11" = type { %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.15" = type { %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.21" = type { %"class.std::__1::__compressed_pair.22" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.27" = type { %"class.std::__1::__compressed_pair.28" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.29" }
%"struct.std::__1::__compressed_pair_elem.29" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.33" = type { %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.39" = type { %"class.std::__1::__compressed_pair.40" }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.42" }
%"struct.std::__1::__atomic_base.42" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }
%"class.std::__1::unique_ptr.46" = type { %"class.std::__1::__compressed_pair.47" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48" }
%"struct.std::__1::__compressed_pair_elem.48" = type { %"class.blink::Worklist.49"* }
%"class.blink::Worklist.49" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.53" = type { %"class.std::__1::__compressed_pair.54" }
%"class.std::__1::__compressed_pair.54" = type { %"struct.std::__1::__compressed_pair_elem.55" }
%"struct.std::__1::__compressed_pair_elem.55" = type { %"class.blink::Worklist.56"* }
%"class.blink::Worklist.56" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.60" = type { %"class.std::__1::__compressed_pair.61" }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.62" }
%"struct.std::__1::__compressed_pair_elem.62" = type { %"class.blink::Worklist.63"* }
%"class.blink::Worklist.63" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.67" = type { %"class.std::__1::__compressed_pair.68" }
%"class.std::__1::__compressed_pair.68" = type { %"struct.std::__1::__compressed_pair_elem.69" }
%"struct.std::__1::__compressed_pair_elem.69" = type { %"class.blink::Worklist.70"* }
%"class.blink::Worklist.70" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.74" = type { %"class.std::__1::__compressed_pair.75" }
%"class.std::__1::__compressed_pair.75" = type { %"struct.std::__1::__compressed_pair_elem.76" }
%"struct.std::__1::__compressed_pair_elem.76" = type { %"class.blink::Worklist.77"* }
%"class.blink::Worklist.77" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.81" = type { %"class.std::__1::__compressed_pair.82" }
%"class.std::__1::__compressed_pair.82" = type { %"struct.std::__1::__compressed_pair_elem.83" }
%"struct.std::__1::__compressed_pair_elem.83" = type { %"class.blink::Worklist.84"* }
%"class.blink::Worklist.84" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.88" = type { %"class.std::__1::__compressed_pair.89" }
%"class.std::__1::__compressed_pair.89" = type { %"struct.std::__1::__compressed_pair_elem.90" }
%"struct.std::__1::__compressed_pair_elem.90" = type { %"class.blink::Worklist.91"* }
%"class.blink::Worklist.91" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.95" = type { %"class.std::__1::__compressed_pair.96" }
%"class.std::__1::__compressed_pair.96" = type { %"struct.std::__1::__compressed_pair_elem.97" }
%"struct.std::__1::__compressed_pair_elem.97" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.98", %"class.std::__1::__compressed_pair.105", %"class.std::__1::__compressed_pair.110", %"class.std::__1::__compressed_pair.112", [4 x i8] }>
%"class.std::__1::unique_ptr.98" = type { %"class.std::__1::__compressed_pair.99" }
%"class.std::__1::__compressed_pair.99" = type { %"struct.std::__1::__compressed_pair_elem.100", %"struct.std::__1::__compressed_pair_elem.101" }
%"struct.std::__1::__compressed_pair_elem.100" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.101" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.102" }
%"class.std::__1::__compressed_pair.102" = type { %"struct.std::__1::__compressed_pair_elem.103" }
%"struct.std::__1::__compressed_pair_elem.103" = type { i64 }
%"class.std::__1::__compressed_pair.105" = type { %"struct.std::__1::__compressed_pair_elem.106" }
%"struct.std::__1::__compressed_pair_elem.106" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.110" = type { %"struct.std::__1::__compressed_pair_elem.103" }
%"class.std::__1::__compressed_pair.112" = type { %"struct.std::__1::__compressed_pair_elem.113" }
%"struct.std::__1::__compressed_pair_elem.113" = type { float }
%"class.std::__1::unique_ptr.118" = type { %"class.std::__1::__compressed_pair.119" }
%"class.std::__1::__compressed_pair.119" = type { %"struct.std::__1::__compressed_pair_elem.120" }
%"struct.std::__1::__compressed_pair_elem.120" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.121", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.121" = type { %"class.std::__1::__compressed_pair.122" }
%"class.std::__1::__compressed_pair.122" = type { %"struct.std::__1::__compressed_pair_elem.123" }
%"struct.std::__1::__compressed_pair_elem.123" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.133" = type { %"class.std::__1::__compressed_pair.134" }
%"class.std::__1::__compressed_pair.134" = type { %"struct.std::__1::__compressed_pair_elem.135" }
%"struct.std::__1::__compressed_pair_elem.135" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.141" }
%"class.WTF::VectorBuffer.141" = type { %"class.WTF::VectorBufferBase.142" }
%"class.WTF::VectorBufferBase.142" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.143" = type { %"class.std::__1::__compressed_pair.144" }
%"class.std::__1::__compressed_pair.144" = type { %"struct.std::__1::__compressed_pair_elem.145" }
%"struct.std::__1::__compressed_pair_elem.145" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.149" = type { %"class.std::__1::__compressed_pair.150" }
%"class.std::__1::__compressed_pair.150" = type { %"struct.std::__1::__compressed_pair_elem.151" }
%"struct.std::__1::__compressed_pair_elem.151" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.155" }
%"class.std::__1::unique_ptr.155" = type { %"class.std::__1::__compressed_pair.156" }
%"class.std::__1::__compressed_pair.156" = type { %"struct.std::__1::__compressed_pair_elem.157" }
%"struct.std::__1::__compressed_pair_elem.157" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.49"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.56"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.63"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.70"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.77"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.177" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.177" = type { %"struct.std::__1::__compressed_pair_elem.178" }
%"struct.std::__1::__compressed_pair_elem.178" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.161" = type { %"class.std::__1::__compressed_pair.162" }
%"class.std::__1::__compressed_pair.162" = type { %"struct.std::__1::__compressed_pair_elem.163" }
%"struct.std::__1::__compressed_pair_elem.163" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.167" = type { %"class.std::__1::__compressed_pair.168" }
%"class.std::__1::__compressed_pair.168" = type { %"struct.std::__1::__compressed_pair_elem.169" }
%"struct.std::__1::__compressed_pair_elem.169" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.173" = type { %"struct.std::__1::__atomic_base.174" }
%"struct.std::__1::__atomic_base.174" = type { %"struct.std::__1::__cxx_atomic_impl.175" }
%"struct.std::__1::__cxx_atomic_impl.175" = type { %"struct.std::__1::__cxx_atomic_base_impl.176" }
%"struct.std::__1::__cxx_atomic_base_impl.176" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::ThreadLocalStorage::Slot" = type { i32, i32 }
%"struct.blink::GCInfo" = type { void (%"class.blink::Visitor"*, i8*)*, void (i8*)*, { i8*, i8 } (i8*)*, i8 }
%"class.blink::GCInfoTable" = type { %"struct.blink::GCInfo"**, i32, i32, %"class.WTF::Mutex" }
%"class.blink::SVGMatrixTearOff" = type { %"class.blink::ScriptWrappable", %"class.blink::AffineTransform", %"class.blink::Member" }
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.blink::AffineTransform" = type { [6 x double] }
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::SVGTransformTearOff"* }
%"class.blink::SVGTransformTearOff" = type { %"class.blink::SVGPropertyTearOff", %"class.blink::Member.9" }
%"class.blink::SVGPropertyTearOff" = type { %"class.blink::SVGPropertyTearOffBase.base", %"class.blink::Member.4" }
%"class.blink::SVGPropertyTearOffBase.base" = type <{ %"class.blink::ScriptWrappable", %"class.blink::Member.0", %"class.blink::Member.2", i32 }>
%"class.blink::Member.0" = type { %"class.blink::MemberBase.1" }
%"class.blink::MemberBase.1" = type { %"class.blink::SVGElement"* }
%"class.blink::SVGElement" = type opaque
%"class.blink::Member.2" = type { %"class.blink::MemberBase.3" }
%"class.blink::MemberBase.3" = type { %"class.blink::SVGAnimatedPropertyBase"* }
%"class.blink::SVGAnimatedPropertyBase" = type opaque
%"class.blink::Member.4" = type { %"class.blink::MemberBase.5" }
%"class.blink::MemberBase.5" = type { %"class.blink::SVGTransform"* }
%"class.blink::SVGTransform" = type { %"class.blink::SVGListablePropertyBase", i32, float, %"class.blink::FloatPoint", %"class.blink::AffineTransform" }
%"class.blink::SVGListablePropertyBase" = type { %"class.blink::SVGPropertyBase", %"class.blink::UntracedMember" }
%"class.blink::SVGPropertyBase" = type { i32 (...)** }
%"class.blink::UntracedMember" = type { %"class.blink::MemberBase.8" }
%"class.blink::MemberBase.8" = type { %"class.blink::SVGListPropertyBase"* }
%"class.blink::SVGListPropertyBase" = type opaque
%"class.blink::FloatPoint" = type { float, float }
%"class.blink::Member.9" = type { %"class.blink::MemberBase.10" }
%"class.blink::MemberBase.10" = type { %"class.blink::SVGMatrixTearOff"* }
%"class.blink::SVGPropertyTearOffBase" = type <{ %"class.blink::ScriptWrappable", %"class.blink::Member.0", %"class.blink::Member.2", i32, [4 x i8] }>
%"class.blink::ExceptionState" = type { i32 (...)**, %"class.blink::ExceptionContext", %"class.blink::ExceptionState::ContextScope"*, %"class.v8::Isolate"*, i32, %"class.WTF::String", %"class.blink::TraceWrapperV8Reference.188" }
%"class.blink::ExceptionContext" = type { i16, i16, i8*, i8* }
%"class.blink::ExceptionState::ContextScope" = type { %"class.blink::ExceptionState"*, %"class.blink::ExceptionState::ContextScope"*, %"class.blink::ExceptionContext" }
%"class.WTF::String" = type { %class.scoped_refptr.182 }
%class.scoped_refptr.182 = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic.183" }
%"struct.std::__1::atomic.183" = type { %"struct.std::__1::__atomic_base.184" }
%"struct.std::__1::__atomic_base.184" = type { %"struct.std::__1::__atomic_base.185" }
%"struct.std::__1::__atomic_base.185" = type { %"struct.std::__1::__cxx_atomic_impl.186" }
%"struct.std::__1::__cxx_atomic_impl.186" = type { %"struct.std::__1::__cxx_atomic_base_impl.187" }
%"struct.std::__1::__cxx_atomic_base_impl.187" = type { i32 }
%"class.blink::TraceWrapperV8Reference.188" = type { %"class.v8::TracedReference.189" }
%"class.v8::TracedReference.189" = type { %"class.v8::BasicTracedReference.190" }
%"class.v8::BasicTracedReference.190" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::Value" = type { i8 }
%"class.blink::ScriptState" = type opaque
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.217" }
%"class.std::__1::__compressed_pair.217" = type { %"struct.std::__1::__compressed_pair_elem.218" }
%"struct.std::__1::__compressed_pair_elem.218" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.blink::NormalPageArena" = type { %"class.blink::BaseArena.base", [4 x i8], %"class.blink::FreeList", i8*, i64, i64 }
%"class.blink::BaseArena.base" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32 }>
%"class.blink::FreeList" = type <{ [17 x %"class.blink::FreeListEntry"*], [17 x %"class.blink::FreeListEntry"*], i32, [4 x i8] }>
%"class.blink::FreeListEntry" = type { %"class.blink::HeapObjectHeader", %"class.blink::FreeListEntry"* }
%"class.blink::PlatformAwareObjectStartBitmap" = type { %"class.blink::ObjectStartBitmap" }
%"class.blink::ObjectStartBitmap" = type { i8*, [2048 x i8] }

$_ZN5blink15ScriptWrappableD2Ev = comdat any

$_ZN5blink16SVGMatrixTearOffD0Ev = comdat any

$_ZNK5blink15ScriptWrappable18HasPendingActivityEv = comdat any

$_ZNK5blink15ScriptWrappable17HasEventListenersEv = comdat any

$_ZNK5blink16SVGMatrixTearOff18GetWrapperTypeInfoEv = comdat any

$_ZN5blink10TraceTraitINS_19SVGTransformTearOffEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink10ThreadHeap8AllocateINS_15ScriptWrappableEEEPhm = comdat any

$_ZN5blink10TraceTraitINS_15ScriptWrappableEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink8internal14FinalizerTraitINS_15ScriptWrappableEE8FinalizeEPv = comdat any

$_ZN5blink9NameTraitINS_15ScriptWrappableEE7GetNameEPKv = comdat any

$_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE13gc_info_index = comdat any

@_ZTVN5blink16SVGMatrixTearOffE = hidden unnamed_addr constant { [11 x i8*] } { [11 x i8*] [i8* null, i8* null, i8* bitcast (i8* (%"class.blink::ScriptWrappable"*)* @_ZNK5blink15ScriptWrappable18NameInHeapSnapshotEv to i8*), i8* bitcast (void (%"class.blink::ScriptWrappable"*)* @_ZN5blink15ScriptWrappableD2Ev to i8*), i8* bitcast (void (%"class.blink::SVGMatrixTearOff"*)* @_ZN5blink16SVGMatrixTearOffD0Ev to i8*), i8* bitcast (i1 (%"class.blink::ScriptWrappable"*)* @_ZNK5blink15ScriptWrappable18HasPendingActivityEv to i8*), i8* bitcast (i1 (%"class.blink::ScriptWrappable"*)* @_ZNK5blink15ScriptWrappable17HasEventListenersEv to i8*), i8* bitcast (void (%"class.blink::SVGMatrixTearOff"*, %"class.blink::Visitor"*)* @_ZNK5blink16SVGMatrixTearOff5TraceEPNS_7VisitorE to i8*), i8* bitcast (%"struct.blink::WrapperTypeInfo"* (%"class.blink::SVGMatrixTearOff"*)* @_ZNK5blink16SVGMatrixTearOff18GetWrapperTypeInfoEv to i8*), i8* bitcast (%"class.v8::Value"* (%"class.blink::ScriptWrappable"*, %"class.blink::ScriptState"*)* @_ZN5blink15ScriptWrappable4WrapEPNS_11ScriptStateE to i8*), i8* bitcast (%"class.v8::Object"* (%"class.blink::ScriptWrappable"*, %"class.v8::Isolate"*, %"struct.blink::WrapperTypeInfo"*, %"class.v8::Object"*)* @_ZN5blink15ScriptWrappable20AssociateWithWrapperEPN2v87IsolateEPKNS_15WrapperTypeInfoENS1_5LocalINS1_6ObjectEEE to i8*)] }, align 8
@.str = private unnamed_addr constant [30 x i8] c"The matrix is not invertible.\00", align 1
@.str.1 = private unnamed_addr constant [26 x i8] c"Arguments cannot be zero.\00", align 1
@_ZN5blink16SVGMatrixTearOff18wrapper_type_info_E = external local_unnamed_addr constant %"struct.blink::WrapperTypeInfo"*, align 8
@_ZN5blink11ThreadState16thread_specific_E = external local_unnamed_addr global %"class.WTF::ThreadSpecific"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv = private unnamed_addr constant [68 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::ThreadState *]\00", align 1
@.str.2 = private unnamed_addr constant [23 x i8] c"allocation_size > size\00", align 1
@.str.3 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/heap/impl/heap.h\00", align 1
@_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_15ScriptWrappableEE5TraceEPNS_7VisitorEPKv, void (i8*)* @_ZN5blink8internal14FinalizerTraitINS_15ScriptWrappableEE8FinalizeEPv, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_15ScriptWrappableEE7GetNameEPKv, i8 1 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@_ZN5blink11GCInfoTable13global_table_E = external local_unnamed_addr global %"class.blink::GCInfoTable"*, align 8

@_ZN5blink16SVGMatrixTearOffC1ERKNS_15AffineTransformE = hidden unnamed_addr alias void (%"class.blink::SVGMatrixTearOff"*, %"class.blink::AffineTransform"*), void (%"class.blink::SVGMatrixTearOff"*, %"class.blink::AffineTransform"*)* @_ZN5blink16SVGMatrixTearOffC2ERKNS_15AffineTransformE
@_ZN5blink16SVGMatrixTearOffC1EPNS_19SVGTransformTearOffE = hidden unnamed_addr alias void (%"class.blink::SVGMatrixTearOff"*, %"class.blink::SVGTransformTearOff"*), void (%"class.blink::SVGMatrixTearOff"*, %"class.blink::SVGTransformTearOff"*)* @_ZN5blink16SVGMatrixTearOffC2EPNS_19SVGTransformTearOffE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16SVGMatrixTearOffC2ERKNS_15AffineTransformE(%"class.blink::SVGMatrixTearOff"* nocapture, %"class.blink::AffineTransform"* nocapture readonly dereferenceable(48)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::SVGMatrixTearOff", %"class.blink::SVGMatrixTearOff"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.blink::SVGMatrixTearOff", %"class.blink::SVGMatrixTearOff"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  store i64* null, i64** %4, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink16SVGMatrixTearOffE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %5 = getelementptr inbounds %"class.blink::SVGMatrixTearOff", %"class.blink::SVGMatrixTearOff"* %0, i64 0, i32 1
  %6 = bitcast %"class.blink::AffineTransform"* %5 to i8*
  %7 = bitcast %"class.blink::AffineTransform"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 48, i1 false)
  %8 = getelementptr inbounds %"class.blink::SVGMatrixTearOff", %"class.blink::SVGMatrixTearOff"* %0, i64 0, i32 2, i32 0, i32 0
  store %"class.blink::SVGTransformTearOff"* null, %"class.blink::SVGTransformTearOff"** %8, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16SVGMatrixTearOffC2EPNS_19SVGTransformTearOffE(%"class.blink::SVGMatrixTearOff"*, %"class.blink::SVGTransformTearOff"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::SVGMatrixTearOff", %"class.blink::SVGMatrixTearOff"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.blink::SVGMatrixTearOff", %"class.blink::SVGMatrixTearOff"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  store i64* null, i64** %4, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink16SVGMatrixTearOffE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %5 = getelementptr inbounds %"class.blink::SVGMatrixTearOff", %"class.blink::SVGMatrixTearOff"* %0, i64 0, i32 1
  tail call void @_ZN5blink15AffineTransformC1Ev(%"class.blink::AffineTransform"* %5) #5
  %6 = getelementptr inbounds %"class.blink::SVGMatrixTearOff", %"class.blink::SVGMatrixTearOff"* %0, i64 0, i32 2, i32 0, i32 0
  store %"class.blink::SVGTransformTearOff"* %1, %"class.blink::SVGTransformTearOff"** %6, align 8
  ret void
}

declare void @_ZN5blink15AffineTransformC1Ev(%"class.blink::AffineTransform"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink16SVGMatrixTearOff5TraceEPNS_7VisitorE(%"class.blink::SVGMatrixTearOff"*, %"class.blink::Visitor"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::SVGMatrixTearOff", %"class.blink::SVGMatrixTearOff"* %0, i64 0, i32 2
  %4 = bitcast %"class.blink::Member"* %3 to i64*
  %5 = load atomic i64, i64* %4 monotonic, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %13, label %7

7:                                                ; preds = %2
  %8 = inttoptr i64 %5 to i8*
  %9 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %10 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %9, align 8
  %11 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %10, i64 5
  %12 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %11, align 8
  tail call void %12(%"class.blink::Visitor"* %1, i8* nonnull %8, i8* nonnull %8, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_19SVGTransformTearOffEE5TraceEPNS_7VisitorEPKv) #5
  br label %13

13:                                               ; preds = %2, %7
  %14 = getelementptr inbounds %"class.blink::SVGMatrixTearOff", %"class.blink::SVGMatrixTearOff"* %0, i64 0, i32 0
  tail call void @_ZNK5blink15ScriptWrappable5TraceEPNS_7VisitorE(%"class.blink::ScriptWrappable"* %14, %"class.blink::Visitor"* %1) #5
  ret void
}

declare void @_ZNK5blink15ScriptWrappable5TraceEPNS_7VisitorE(%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(48) %"class.blink::AffineTransform"* @_ZNK5blink16SVGMatrixTearOff5ValueEv(%"class.blink::SVGMatrixTearOff"* readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::SVGMatrixTearOff", %"class.blink::SVGMatrixTearOff"* %0, i64 0, i32 2, i32 0, i32 0
  %3 = load %"class.blink::SVGTransformTearOff"*, %"class.blink::SVGTransformTearOff"** %2, align 8
  %4 = icmp eq %"class.blink::SVGTransformTearOff"* %3, null
  br i1 %4, label %15, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %3, i64 0, i32 0, i32 0, i32 3
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 1
  br i1 %8, label %9, label %11

9:                                                ; preds = %5
  %10 = bitcast %"class.blink::SVGTransformTearOff"* %3 to %"class.blink::SVGPropertyTearOffBase"*
  tail call void @_ZN5blink22SVGPropertyTearOffBase20EnsureAnimValUpdatedEv(%"class.blink::SVGPropertyTearOffBase"* nonnull %10) #5
  br label %11

11:                                               ; preds = %5, %9
  %12 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %3, i64 0, i32 0, i32 1, i32 0, i32 0
  %13 = load %"class.blink::SVGTransform"*, %"class.blink::SVGTransform"** %12, align 8
  %14 = getelementptr inbounds %"class.blink::SVGTransform", %"class.blink::SVGTransform"* %13, i64 0, i32 4
  br label %17

15:                                               ; preds = %1
  %16 = getelementptr inbounds %"class.blink::SVGMatrixTearOff", %"class.blink::SVGMatrixTearOff"* %0, i64 0, i32 1
  br label %17

17:                                               ; preds = %15, %11
  %18 = phi %"class.blink::AffineTransform"* [ %14, %11 ], [ %16, %15 ]
  ret %"class.blink::AffineTransform"* %18
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::AffineTransform"* @_ZN5blink16SVGMatrixTearOff12MutableValueEv(%"class.blink::SVGMatrixTearOff"* readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::SVGMatrixTearOff", %"class.blink::SVGMatrixTearOff"* %0, i64 0, i32 2, i32 0, i32 0
  %3 = load %"class.blink::SVGTransformTearOff"*, %"class.blink::SVGTransformTearOff"** %2, align 8
  %4 = icmp eq %"class.blink::SVGTransformTearOff"* %3, null
  br i1 %4, label %15, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %3, i64 0, i32 0, i32 0, i32 3
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 1
  br i1 %8, label %9, label %11

9:                                                ; preds = %5
  %10 = bitcast %"class.blink::SVGTransformTearOff"* %3 to %"class.blink::SVGPropertyTearOffBase"*
  tail call void @_ZN5blink22SVGPropertyTearOffBase20EnsureAnimValUpdatedEv(%"class.blink::SVGPropertyTearOffBase"* nonnull %10) #5
  br label %11

11:                                               ; preds = %5, %9
  %12 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %3, i64 0, i32 0, i32 1, i32 0, i32 0
  %13 = load %"class.blink::SVGTransform"*, %"class.blink::SVGTransform"** %12, align 8
  %14 = getelementptr inbounds %"class.blink::SVGTransform", %"class.blink::SVGTransform"* %13, i64 0, i32 4
  br label %17

15:                                               ; preds = %1
  %16 = getelementptr inbounds %"class.blink::SVGMatrixTearOff", %"class.blink::SVGMatrixTearOff"* %0, i64 0, i32 1
  br label %17

17:                                               ; preds = %15, %11
  %18 = phi %"class.blink::AffineTransform"* [ %14, %11 ], [ %16, %15 ]
  ret %"class.blink::AffineTransform"* %18
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16SVGMatrixTearOff12CommitChangeEv(%"class.blink::SVGMatrixTearOff"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::SVGMatrixTearOff", %"class.blink::SVGMatrixTearOff"* %0, i64 0, i32 2, i32 0, i32 0
  %3 = load %"class.blink::SVGTransformTearOff"*, %"class.blink::SVGTransformTearOff"** %2, align 8
  %4 = icmp eq %"class.blink::SVGTransformTearOff"* %3, null
  br i1 %4, label %16, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %3, i64 0, i32 0, i32 0, i32 3
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 1
  br i1 %8, label %9, label %11

9:                                                ; preds = %5
  %10 = bitcast %"class.blink::SVGTransformTearOff"* %3 to %"class.blink::SVGPropertyTearOffBase"*
  tail call void @_ZN5blink22SVGPropertyTearOffBase20EnsureAnimValUpdatedEv(%"class.blink::SVGPropertyTearOffBase"* nonnull %10) #5
  br label %11

11:                                               ; preds = %5, %9
  %12 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %3, i64 0, i32 0, i32 1, i32 0, i32 0
  %13 = load %"class.blink::SVGTransform"*, %"class.blink::SVGTransform"** %12, align 8
  tail call void @_ZN5blink12SVGTransform14OnMatrixChangeEv(%"class.blink::SVGTransform"* %13) #5
  %14 = bitcast %"class.blink::SVGTransformTearOff"** %2 to %"class.blink::SVGPropertyTearOffBase"**
  %15 = load %"class.blink::SVGPropertyTearOffBase"*, %"class.blink::SVGPropertyTearOffBase"** %14, align 8
  tail call void @_ZN5blink22SVGPropertyTearOffBase12CommitChangeEv(%"class.blink::SVGPropertyTearOffBase"* %15) #5
  br label %16

16:                                               ; preds = %1, %11
  ret void
}

declare void @_ZN5blink12SVGTransform14OnMatrixChangeEv(%"class.blink::SVGTransform"*) local_unnamed_addr #2

declare void @_ZN5blink22SVGPropertyTearOffBase12CommitChangeEv(%"class.blink::SVGPropertyTearOffBase"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16SVGMatrixTearOff4setAEdRNS_14ExceptionStateE(%"class.blink::SVGMatrixTearOff"* nocapture, double, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.blink::SVGMatrixTearOff", %"class.blink::SVGMatrixTearOff"* %0, i64 0, i32 2, i32 0, i32 0
  %5 = load %"class.blink::SVGTransformTearOff"*, %"class.blink::SVGTransformTearOff"** %4, align 8
  %6 = icmp eq %"class.blink::SVGTransformTearOff"* %5, null
  br i1 %6, label %22, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %5, i64 0, i32 0, i32 0, i32 3
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %11, label %12

11:                                               ; preds = %7
  tail call void @_ZN5blink22SVGPropertyTearOffBase13ThrowReadOnlyERNS_14ExceptionStateE(%"class.blink::ExceptionState"* dereferenceable(72) %2) #5
  br label %40

12:                                               ; preds = %7
  %13 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %5, i64 0, i32 0, i32 0, i32 3
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq i32 %14, 1
  br i1 %15, label %16, label %18

16:                                               ; preds = %12
  %17 = bitcast %"class.blink::SVGTransformTearOff"* %5 to %"class.blink::SVGPropertyTearOffBase"*
  tail call void @_ZN5blink22SVGPropertyTearOffBase20EnsureAnimValUpdatedEv(%"class.blink::SVGPropertyTearOffBase"* nonnull %17) #5
  br label %18

18:                                               ; preds = %16, %12
  %19 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %5, i64 0, i32 0, i32 1, i32 0, i32 0
  %20 = load %"class.blink::SVGTransform"*, %"class.blink::SVGTransform"** %19, align 8
  %21 = getelementptr inbounds %"class.blink::SVGTransform", %"class.blink::SVGTransform"* %20, i64 0, i32 4
  br label %24

22:                                               ; preds = %3
  %23 = getelementptr inbounds %"class.blink::SVGMatrixTearOff", %"class.blink::SVGMatrixTearOff"* %0, i64 0, i32 1
  br label %24

24:                                               ; preds = %18, %22
  %25 = phi %"class.blink::AffineTransform"* [ %21, %18 ], [ %23, %22 ]
  %26 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %25, i64 0, i32 0, i64 0
  store double %1, double* %26, align 8
  %27 = load %"class.blink::SVGTransformTearOff"*, %"class.blink::SVGTransformTearOff"** %4, align 8
  %28 = icmp eq %"class.blink::SVGTransformTearOff"* %27, null
  br i1 %28, label %40, label %29

29:                                               ; preds = %24
  %30 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %27, i64 0, i32 0, i32 0, i32 3
  %31 = load i32, i32* %30, align 8
  %32 = icmp eq i32 %31, 1
  br i1 %32, label %33, label %35

33:                                               ; preds = %29
  %34 = bitcast %"class.blink::SVGTransformTearOff"* %27 to %"class.blink::SVGPropertyTearOffBase"*
  tail call void @_ZN5blink22SVGPropertyTearOffBase20EnsureAnimValUpdatedEv(%"class.blink::SVGPropertyTearOffBase"* nonnull %34) #5
  br label %35

35:                                               ; preds = %33, %29
  %36 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %27, i64 0, i32 0, i32 1, i32 0, i32 0
  %37 = load %"class.blink::SVGTransform"*, %"class.blink::SVGTransform"** %36, align 8
  tail call void @_ZN5blink12SVGTransform14OnMatrixChangeEv(%"class.blink::SVGTransform"* %37) #5
  %38 = bitcast %"class.blink::SVGTransformTearOff"** %4 to %"class.blink::SVGPropertyTearOffBase"**
  %39 = load %"class.blink::SVGPropertyTearOffBase"*, %"class.blink::SVGPropertyTearOffBase"** %38, align 8
  tail call void @_ZN5blink22SVGPropertyTearOffBase12CommitChangeEv(%"class.blink::SVGPropertyTearOffBase"* %39) #5
  br label %40

40:                                               ; preds = %35, %24, %11
  ret void
}

declare void @_ZN5blink22SVGPropertyTearOffBase13ThrowReadOnlyERNS_14ExceptionStateE(%"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16SVGMatrixTearOff4setBEdRNS_14ExceptionStateE(%"class.blink::SVGMatrixTearOff"* nocapture, double, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.blink::SVGMatrixTearOff", %"class.blink::SVGMatrixTearOff"* %0, i64 0, i32 2, i32 0, i32 0
  %5 = load %"class.blink::SVGTransformTearOff"*, %"class.blink::SVGTransformTearOff"** %4, align 8
  %6 = icmp eq %"class.blink::SVGTransformTearOff"* %5, null
  br i1 %6, label %22, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %5, i64 0, i32 0, i32 0, i32 3
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %11, label %12

11:                                               ; preds = %7
  tail call void @_ZN5blink22SVGPropertyTearOffBase13ThrowReadOnlyERNS_14ExceptionStateE(%"class.blink::ExceptionState"* dereferenceable(72) %2) #5
  br label %40

12:                                               ; preds = %7
  %13 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %5, i64 0, i32 0, i32 0, i32 3
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq i32 %14, 1
  br i1 %15, label %16, label %18

16:                                               ; preds = %12
  %17 = bitcast %"class.blink::SVGTransformTearOff"* %5 to %"class.blink::SVGPropertyTearOffBase"*
  tail call void @_ZN5blink22SVGPropertyTearOffBase20EnsureAnimValUpdatedEv(%"class.blink::SVGPropertyTearOffBase"* nonnull %17) #5
  br label %18

18:                                               ; preds = %16, %12
  %19 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %5, i64 0, i32 0, i32 1, i32 0, i32 0
  %20 = load %"class.blink::SVGTransform"*, %"class.blink::SVGTransform"** %19, align 8
  %21 = getelementptr inbounds %"class.blink::SVGTransform", %"class.blink::SVGTransform"* %20, i64 0, i32 4
  br label %24

22:                                               ; preds = %3
  %23 = getelementptr inbounds %"class.blink::SVGMatrixTearOff", %"class.blink::SVGMatrixTearOff"* %0, i64 0, i32 1
  br label %24

24:                                               ; preds = %18, %22
  %25 = phi %"class.blink::AffineTransform"* [ %21, %18 ], [ %23, %22 ]
  %26 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %25, i64 0, i32 0, i64 1
  store double %1, double* %26, align 8
  %27 = load %"class.blink::SVGTransformTearOff"*, %"class.blink::SVGTransformTearOff"** %4, align 8
  %28 = icmp eq %"class.blink::SVGTransformTearOff"* %27, null
  br i1 %28, label %40, label %29

29:                                               ; preds = %24
  %30 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %27, i64 0, i32 0, i32 0, i32 3
  %31 = load i32, i32* %30, align 8
  %32 = icmp eq i32 %31, 1
  br i1 %32, label %33, label %35

33:                                               ; preds = %29
  %34 = bitcast %"class.blink::SVGTransformTearOff"* %27 to %"class.blink::SVGPropertyTearOffBase"*
  tail call void @_ZN5blink22SVGPropertyTearOffBase20EnsureAnimValUpdatedEv(%"class.blink::SVGPropertyTearOffBase"* nonnull %34) #5
  br label %35

35:                                               ; preds = %33, %29
  %36 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %27, i64 0, i32 0, i32 1, i32 0, i32 0
  %37 = load %"class.blink::SVGTransform"*, %"class.blink::SVGTransform"** %36, align 8
  tail call void @_ZN5blink12SVGTransform14OnMatrixChangeEv(%"class.blink::SVGTransform"* %37) #5
  %38 = bitcast %"class.blink::SVGTransformTearOff"** %4 to %"class.blink::SVGPropertyTearOffBase"**
  %39 = load %"class.blink::SVGPropertyTearOffBase"*, %"class.blink::SVGPropertyTearOffBase"** %38, align 8
  tail call void @_ZN5blink22SVGPropertyTearOffBase12CommitChangeEv(%"class.blink::SVGPropertyTearOffBase"* %39) #5
  br label %40

40:                                               ; preds = %35, %24, %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16SVGMatrixTearOff4setCEdRNS_14ExceptionStateE(%"class.blink::SVGMatrixTearOff"* nocapture, double, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.blink::SVGMatrixTearOff", %"class.blink::SVGMatrixTearOff"* %0, i64 0, i32 2, i32 0, i32 0
  %5 = load %"class.blink::SVGTransformTearOff"*, %"class.blink::SVGTransformTearOff"** %4, align 8
  %6 = icmp eq %"class.blink::SVGTransformTearOff"* %5, null
  br i1 %6, label %22, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %5, i64 0, i32 0, i32 0, i32 3
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %11, label %12

11:                                               ; preds = %7
  tail call void @_ZN5blink22SVGPropertyTearOffBase13ThrowReadOnlyERNS_14ExceptionStateE(%"class.blink::ExceptionState"* dereferenceable(72) %2) #5
  br label %40

12:                                               ; preds = %7
  %13 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %5, i64 0, i32 0, i32 0, i32 3
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq i32 %14, 1
  br i1 %15, label %16, label %18

16:                                               ; preds = %12
  %17 = bitcast %"class.blink::SVGTransformTearOff"* %5 to %"class.blink::SVGPropertyTearOffBase"*
  tail call void @_ZN5blink22SVGPropertyTearOffBase20EnsureAnimValUpdatedEv(%"class.blink::SVGPropertyTearOffBase"* nonnull %17) #5
  br label %18

18:                                               ; preds = %16, %12
  %19 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %5, i64 0, i32 0, i32 1, i32 0, i32 0
  %20 = load %"class.blink::SVGTransform"*, %"class.blink::SVGTransform"** %19, align 8
  %21 = getelementptr inbounds %"class.blink::SVGTransform", %"class.blink::SVGTransform"* %20, i64 0, i32 4
  br label %24

22:                                               ; preds = %3
  %23 = getelementptr inbounds %"class.blink::SVGMatrixTearOff", %"class.blink::SVGMatrixTearOff"* %0, i64 0, i32 1
  br label %24

24:                                               ; preds = %18, %22
  %25 = phi %"class.blink::AffineTransform"* [ %21, %18 ], [ %23, %22 ]
  %26 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %25, i64 0, i32 0, i64 2
  store double %1, double* %26, align 8
  %27 = load %"class.blink::SVGTransformTearOff"*, %"class.blink::SVGTransformTearOff"** %4, align 8
  %28 = icmp eq %"class.blink::SVGTransformTearOff"* %27, null
  br i1 %28, label %40, label %29

29:                                               ; preds = %24
  %30 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %27, i64 0, i32 0, i32 0, i32 3
  %31 = load i32, i32* %30, align 8
  %32 = icmp eq i32 %31, 1
  br i1 %32, label %33, label %35

33:                                               ; preds = %29
  %34 = bitcast %"class.blink::SVGTransformTearOff"* %27 to %"class.blink::SVGPropertyTearOffBase"*
  tail call void @_ZN5blink22SVGPropertyTearOffBase20EnsureAnimValUpdatedEv(%"class.blink::SVGPropertyTearOffBase"* nonnull %34) #5
  br label %35

35:                                               ; preds = %33, %29
  %36 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %27, i64 0, i32 0, i32 1, i32 0, i32 0
  %37 = load %"class.blink::SVGTransform"*, %"class.blink::SVGTransform"** %36, align 8
  tail call void @_ZN5blink12SVGTransform14OnMatrixChangeEv(%"class.blink::SVGTransform"* %37) #5
  %38 = bitcast %"class.blink::SVGTransformTearOff"** %4 to %"class.blink::SVGPropertyTearOffBase"**
  %39 = load %"class.blink::SVGPropertyTearOffBase"*, %"class.blink::SVGPropertyTearOffBase"** %38, align 8
  tail call void @_ZN5blink22SVGPropertyTearOffBase12CommitChangeEv(%"class.blink::SVGPropertyTearOffBase"* %39) #5
  br label %40

40:                                               ; preds = %35, %24, %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16SVGMatrixTearOff4setDEdRNS_14ExceptionStateE(%"class.blink::SVGMatrixTearOff"* nocapture, double, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.blink::SVGMatrixTearOff", %"class.blink::SVGMatrixTearOff"* %0, i64 0, i32 2, i32 0, i32 0
  %5 = load %"class.blink::SVGTransformTearOff"*, %"class.blink::SVGTransformTearOff"** %4, align 8
  %6 = icmp eq %"class.blink::SVGTransformTearOff"* %5, null
  br i1 %6, label %22, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %5, i64 0, i32 0, i32 0, i32 3
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %11, label %12

11:                                               ; preds = %7
  tail call void @_ZN5blink22SVGPropertyTearOffBase13ThrowReadOnlyERNS_14ExceptionStateE(%"class.blink::ExceptionState"* dereferenceable(72) %2) #5
  br label %40

12:                                               ; preds = %7
  %13 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %5, i64 0, i32 0, i32 0, i32 3
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq i32 %14, 1
  br i1 %15, label %16, label %18

16:                                               ; preds = %12
  %17 = bitcast %"class.blink::SVGTransformTearOff"* %5 to %"class.blink::SVGPropertyTearOffBase"*
  tail call void @_ZN5blink22SVGPropertyTearOffBase20EnsureAnimValUpdatedEv(%"class.blink::SVGPropertyTearOffBase"* nonnull %17) #5
  br label %18

18:                                               ; preds = %16, %12
  %19 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %5, i64 0, i32 0, i32 1, i32 0, i32 0
  %20 = load %"class.blink::SVGTransform"*, %"class.blink::SVGTransform"** %19, align 8
  %21 = getelementptr inbounds %"class.blink::SVGTransform", %"class.blink::SVGTransform"* %20, i64 0, i32 4
  br label %24

22:                                               ; preds = %3
  %23 = getelementptr inbounds %"class.blink::SVGMatrixTearOff", %"class.blink::SVGMatrixTearOff"* %0, i64 0, i32 1
  br label %24

24:                                               ; preds = %18, %22
  %25 = phi %"class.blink::AffineTransform"* [ %21, %18 ], [ %23, %22 ]
  %26 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %25, i64 0, i32 0, i64 3
  store double %1, double* %26, align 8
  %27 = load %"class.blink::SVGTransformTearOff"*, %"class.blink::SVGTransformTearOff"** %4, align 8
  %28 = icmp eq %"class.blink::SVGTransformTearOff"* %27, null
  br i1 %28, label %40, label %29

29:                                               ; preds = %24
  %30 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %27, i64 0, i32 0, i32 0, i32 3
  %31 = load i32, i32* %30, align 8
  %32 = icmp eq i32 %31, 1
  br i1 %32, label %33, label %35

33:                                               ; preds = %29
  %34 = bitcast %"class.blink::SVGTransformTearOff"* %27 to %"class.blink::SVGPropertyTearOffBase"*
  tail call void @_ZN5blink22SVGPropertyTearOffBase20EnsureAnimValUpdatedEv(%"class.blink::SVGPropertyTearOffBase"* nonnull %34) #5
  br label %35

35:                                               ; preds = %33, %29
  %36 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %27, i64 0, i32 0, i32 1, i32 0, i32 0
  %37 = load %"class.blink::SVGTransform"*, %"class.blink::SVGTransform"** %36, align 8
  tail call void @_ZN5blink12SVGTransform14OnMatrixChangeEv(%"class.blink::SVGTransform"* %37) #5
  %38 = bitcast %"class.blink::SVGTransformTearOff"** %4 to %"class.blink::SVGPropertyTearOffBase"**
  %39 = load %"class.blink::SVGPropertyTearOffBase"*, %"class.blink::SVGPropertyTearOffBase"** %38, align 8
  tail call void @_ZN5blink22SVGPropertyTearOffBase12CommitChangeEv(%"class.blink::SVGPropertyTearOffBase"* %39) #5
  br label %40

40:                                               ; preds = %35, %24, %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16SVGMatrixTearOff4setEEdRNS_14ExceptionStateE(%"class.blink::SVGMatrixTearOff"* nocapture, double, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.blink::SVGMatrixTearOff", %"class.blink::SVGMatrixTearOff"* %0, i64 0, i32 2, i32 0, i32 0
  %5 = load %"class.blink::SVGTransformTearOff"*, %"class.blink::SVGTransformTearOff"** %4, align 8
  %6 = icmp eq %"class.blink::SVGTransformTearOff"* %5, null
  br i1 %6, label %22, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %5, i64 0, i32 0, i32 0, i32 3
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %11, label %12

11:                                               ; preds = %7
  tail call void @_ZN5blink22SVGPropertyTearOffBase13ThrowReadOnlyERNS_14ExceptionStateE(%"class.blink::ExceptionState"* dereferenceable(72) %2) #5
  br label %40

12:                                               ; preds = %7
  %13 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %5, i64 0, i32 0, i32 0, i32 3
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq i32 %14, 1
  br i1 %15, label %16, label %18

16:                                               ; preds = %12
  %17 = bitcast %"class.blink::SVGTransformTearOff"* %5 to %"class.blink::SVGPropertyTearOffBase"*
  tail call void @_ZN5blink22SVGPropertyTearOffBase20EnsureAnimValUpdatedEv(%"class.blink::SVGPropertyTearOffBase"* nonnull %17) #5
  br label %18

18:                                               ; preds = %16, %12
  %19 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %5, i64 0, i32 0, i32 1, i32 0, i32 0
  %20 = load %"class.blink::SVGTransform"*, %"class.blink::SVGTransform"** %19, align 8
  %21 = getelementptr inbounds %"class.blink::SVGTransform", %"class.blink::SVGTransform"* %20, i64 0, i32 4
  br label %24

22:                                               ; preds = %3
  %23 = getelementptr inbounds %"class.blink::SVGMatrixTearOff", %"class.blink::SVGMatrixTearOff"* %0, i64 0, i32 1
  br label %24

24:                                               ; preds = %18, %22
  %25 = phi %"class.blink::AffineTransform"* [ %21, %18 ], [ %23, %22 ]
  %26 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %25, i64 0, i32 0, i64 4
  store double %1, double* %26, align 8
  %27 = load %"class.blink::SVGTransformTearOff"*, %"class.blink::SVGTransformTearOff"** %4, align 8
  %28 = icmp eq %"class.blink::SVGTransformTearOff"* %27, null
  br i1 %28, label %40, label %29

29:                                               ; preds = %24
  %30 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %27, i64 0, i32 0, i32 0, i32 3
  %31 = load i32, i32* %30, align 8
  %32 = icmp eq i32 %31, 1
  br i1 %32, label %33, label %35

33:                                               ; preds = %29
  %34 = bitcast %"class.blink::SVGTransformTearOff"* %27 to %"class.blink::SVGPropertyTearOffBase"*
  tail call void @_ZN5blink22SVGPropertyTearOffBase20EnsureAnimValUpdatedEv(%"class.blink::SVGPropertyTearOffBase"* nonnull %34) #5
  br label %35

35:                                               ; preds = %33, %29
  %36 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %27, i64 0, i32 0, i32 1, i32 0, i32 0
  %37 = load %"class.blink::SVGTransform"*, %"class.blink::SVGTransform"** %36, align 8
  tail call void @_ZN5blink12SVGTransform14OnMatrixChangeEv(%"class.blink::SVGTransform"* %37) #5
  %38 = bitcast %"class.blink::SVGTransformTearOff"** %4 to %"class.blink::SVGPropertyTearOffBase"**
  %39 = load %"class.blink::SVGPropertyTearOffBase"*, %"class.blink::SVGPropertyTearOffBase"** %38, align 8
  tail call void @_ZN5blink22SVGPropertyTearOffBase12CommitChangeEv(%"class.blink::SVGPropertyTearOffBase"* %39) #5
  br label %40

40:                                               ; preds = %35, %24, %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16SVGMatrixTearOff4setFEdRNS_14ExceptionStateE(%"class.blink::SVGMatrixTearOff"* nocapture, double, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.blink::SVGMatrixTearOff", %"class.blink::SVGMatrixTearOff"* %0, i64 0, i32 2, i32 0, i32 0
  %5 = load %"class.blink::SVGTransformTearOff"*, %"class.blink::SVGTransformTearOff"** %4, align 8
  %6 = icmp eq %"class.blink::SVGTransformTearOff"* %5, null
  br i1 %6, label %22, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %5, i64 0, i32 0, i32 0, i32 3
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %11, label %12

11:                                               ; preds = %7
  tail call void @_ZN5blink22SVGPropertyTearOffBase13ThrowReadOnlyERNS_14ExceptionStateE(%"class.blink::ExceptionState"* dereferenceable(72) %2) #5
  br label %40

12:                                               ; preds = %7
  %13 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %5, i64 0, i32 0, i32 0, i32 3
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq i32 %14, 1
  br i1 %15, label %16, label %18

16:                                               ; preds = %12
  %17 = bitcast %"class.blink::SVGTransformTearOff"* %5 to %"class.blink::SVGPropertyTearOffBase"*
  tail call void @_ZN5blink22SVGPropertyTearOffBase20EnsureAnimValUpdatedEv(%"class.blink::SVGPropertyTearOffBase"* nonnull %17) #5
  br label %18

18:                                               ; preds = %16, %12
  %19 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %5, i64 0, i32 0, i32 1, i32 0, i32 0
  %20 = load %"class.blink::SVGTransform"*, %"class.blink::SVGTransform"** %19, align 8
  %21 = getelementptr inbounds %"class.blink::SVGTransform", %"class.blink::SVGTransform"* %20, i64 0, i32 4
  br label %24

22:                                               ; preds = %3
  %23 = getelementptr inbounds %"class.blink::SVGMatrixTearOff", %"class.blink::SVGMatrixTearOff"* %0, i64 0, i32 1
  br label %24

24:                                               ; preds = %18, %22
  %25 = phi %"class.blink::AffineTransform"* [ %21, %18 ], [ %23, %22 ]
  %26 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %25, i64 0, i32 0, i64 5
  store double %1, double* %26, align 8
  %27 = load %"class.blink::SVGTransformTearOff"*, %"class.blink::SVGTransformTearOff"** %4, align 8
  %28 = icmp eq %"class.blink::SVGTransformTearOff"* %27, null
  br i1 %28, label %40, label %29

29:                                               ; preds = %24
  %30 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %27, i64 0, i32 0, i32 0, i32 3
  %31 = load i32, i32* %30, align 8
  %32 = icmp eq i32 %31, 1
  br i1 %32, label %33, label %35

33:                                               ; preds = %29
  %34 = bitcast %"class.blink::SVGTransformTearOff"* %27 to %"class.blink::SVGPropertyTearOffBase"*
  tail call void @_ZN5blink22SVGPropertyTearOffBase20EnsureAnimValUpdatedEv(%"class.blink::SVGPropertyTearOffBase"* nonnull %34) #5
  br label %35

35:                                               ; preds = %33, %29
  %36 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %27, i64 0, i32 0, i32 1, i32 0, i32 0
  %37 = load %"class.blink::SVGTransform"*, %"class.blink::SVGTransform"** %36, align 8
  tail call void @_ZN5blink12SVGTransform14OnMatrixChangeEv(%"class.blink::SVGTransform"* %37) #5
  %38 = bitcast %"class.blink::SVGTransformTearOff"** %4 to %"class.blink::SVGPropertyTearOffBase"**
  %39 = load %"class.blink::SVGPropertyTearOffBase"*, %"class.blink::SVGPropertyTearOffBase"** %38, align 8
  tail call void @_ZN5blink22SVGPropertyTearOffBase12CommitChangeEv(%"class.blink::SVGPropertyTearOffBase"* %39) #5
  br label %40

40:                                               ; preds = %35, %24, %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::SVGMatrixTearOff"* @_ZN5blink16SVGMatrixTearOff9translateEdd(%"class.blink::SVGMatrixTearOff"* nocapture readonly, double, double) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.blink::SVGMatrixTearOff", %"class.blink::SVGMatrixTearOff"* %0, i64 0, i32 2, i32 0, i32 0
  %5 = load %"class.blink::SVGTransformTearOff"*, %"class.blink::SVGTransformTearOff"** %4, align 8
  %6 = icmp eq %"class.blink::SVGTransformTearOff"* %5, null
  br i1 %6, label %17, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %5, i64 0, i32 0, i32 0, i32 3
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %11, label %13

11:                                               ; preds = %7
  %12 = bitcast %"class.blink::SVGTransformTearOff"* %5 to %"class.blink::SVGPropertyTearOffBase"*
  tail call void @_ZN5blink22SVGPropertyTearOffBase20EnsureAnimValUpdatedEv(%"class.blink::SVGPropertyTearOffBase"* nonnull %12) #5
  br label %13

13:                                               ; preds = %11, %7
  %14 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %5, i64 0, i32 0, i32 1, i32 0, i32 0
  %15 = load %"class.blink::SVGTransform"*, %"class.blink::SVGTransform"** %14, align 8
  %16 = getelementptr inbounds %"class.blink::SVGTransform", %"class.blink::SVGTransform"* %15, i64 0, i32 4
  br label %19

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.blink::SVGMatrixTearOff", %"class.blink::SVGMatrixTearOff"* %0, i64 0, i32 1
  br label %19

19:                                               ; preds = %13, %17
  %20 = phi %"class.blink::AffineTransform"* [ %16, %13 ], [ %18, %17 ]
  %21 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_15ScriptWrappableEEEPhm(i64 72) #5
  %22 = bitcast i8* %21 to %"class.blink::SVGMatrixTearOff"*
  %23 = bitcast i8* %21 to i32 (...)***
  %24 = getelementptr inbounds i8, i8* %21, i64 8
  %25 = bitcast i8* %24 to i64**
  store i64* null, i64** %25, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink16SVGMatrixTearOffE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %23, align 8
  %26 = getelementptr inbounds i8, i8* %21, i64 16
  %27 = bitcast %"class.blink::AffineTransform"* %20 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %26, i8* align 8 %27, i64 48, i1 false) #5
  %28 = getelementptr inbounds i8, i8* %21, i64 64
  %29 = bitcast i8* %28 to %"class.blink::SVGTransformTearOff"**
  store %"class.blink::SVGTransformTearOff"* null, %"class.blink::SVGTransformTearOff"** %29, align 8
  %30 = getelementptr inbounds i8, i8* %21, i64 -4
  %31 = bitcast i8* %30 to i16*
  %32 = load atomic i16, i16* %31 monotonic, align 2
  %33 = or i16 %32, 1
  store atomic i16 %33, i16* %31 release, align 2
  %34 = load %"class.blink::SVGTransformTearOff"*, %"class.blink::SVGTransformTearOff"** %29, align 8
  %35 = icmp eq %"class.blink::SVGTransformTearOff"* %34, null
  br i1 %35, label %46, label %36

36:                                               ; preds = %19
  %37 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %34, i64 0, i32 0, i32 0, i32 3
  %38 = load i32, i32* %37, align 8
  %39 = icmp eq i32 %38, 1
  br i1 %39, label %40, label %42

40:                                               ; preds = %36
  %41 = bitcast %"class.blink::SVGTransformTearOff"* %34 to %"class.blink::SVGPropertyTearOffBase"*
  tail call void @_ZN5blink22SVGPropertyTearOffBase20EnsureAnimValUpdatedEv(%"class.blink::SVGPropertyTearOffBase"* nonnull %41) #5
  br label %42

42:                                               ; preds = %40, %36
  %43 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %34, i64 0, i32 0, i32 1, i32 0, i32 0
  %44 = load %"class.blink::SVGTransform"*, %"class.blink::SVGTransform"** %43, align 8
  %45 = getelementptr inbounds %"class.blink::SVGTransform", %"class.blink::SVGTransform"* %44, i64 0, i32 4
  br label %48

46:                                               ; preds = %19
  %47 = bitcast i8* %26 to %"class.blink::AffineTransform"*
  br label %48

48:                                               ; preds = %42, %46
  %49 = phi %"class.blink::AffineTransform"* [ %45, %42 ], [ %47, %46 ]
  %50 = tail call dereferenceable(48) %"class.blink::AffineTransform"* @_ZN5blink15AffineTransform9TranslateEdd(%"class.blink::AffineTransform"* %49, double %1, double %2) #5
  ret %"class.blink::SVGMatrixTearOff"* %22
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare dereferenceable(48) %"class.blink::AffineTransform"* @_ZN5blink15AffineTransform9TranslateEdd(%"class.blink::AffineTransform"*, double, double) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::SVGMatrixTearOff"* @_ZN5blink16SVGMatrixTearOff5scaleEd(%"class.blink::SVGMatrixTearOff"* nocapture readonly, double) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::SVGMatrixTearOff", %"class.blink::SVGMatrixTearOff"* %0, i64 0, i32 2, i32 0, i32 0
  %4 = load %"class.blink::SVGTransformTearOff"*, %"class.blink::SVGTransformTearOff"** %3, align 8
  %5 = icmp eq %"class.blink::SVGTransformTearOff"* %4, null
  br i1 %5, label %16, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %4, i64 0, i32 0, i32 0, i32 3
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %12

10:                                               ; preds = %6
  %11 = bitcast %"class.blink::SVGTransformTearOff"* %4 to %"class.blink::SVGPropertyTearOffBase"*
  tail call void @_ZN5blink22SVGPropertyTearOffBase20EnsureAnimValUpdatedEv(%"class.blink::SVGPropertyTearOffBase"* nonnull %11) #5
  br label %12

12:                                               ; preds = %10, %6
  %13 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %4, i64 0, i32 0, i32 1, i32 0, i32 0
  %14 = load %"class.blink::SVGTransform"*, %"class.blink::SVGTransform"** %13, align 8
  %15 = getelementptr inbounds %"class.blink::SVGTransform", %"class.blink::SVGTransform"* %14, i64 0, i32 4
  br label %18

16:                                               ; preds = %2
  %17 = getelementptr inbounds %"class.blink::SVGMatrixTearOff", %"class.blink::SVGMatrixTearOff"* %0, i64 0, i32 1
  br label %18

18:                                               ; preds = %12, %16
  %19 = phi %"class.blink::AffineTransform"* [ %15, %12 ], [ %17, %16 ]
  %20 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_15ScriptWrappableEEEPhm(i64 72) #5
  %21 = bitcast i8* %20 to %"class.blink::SVGMatrixTearOff"*
  %22 = bitcast i8* %20 to i32 (...)***
  %23 = getelementptr inbounds i8, i8* %20, i64 8
  %24 = bitcast i8* %23 to i64**
  store i64* null, i64** %24, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink16SVGMatrixTearOffE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %22, align 8
  %25 = getelementptr inbounds i8, i8* %20, i64 16
  %26 = bitcast %"class.blink::AffineTransform"* %19 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %25, i8* align 8 %26, i64 48, i1 false) #5
  %27 = getelementptr inbounds i8, i8* %20, i64 64
  %28 = bitcast i8* %27 to %"class.blink::SVGTransformTearOff"**
  store %"class.blink::SVGTransformTearOff"* null, %"class.blink::SVGTransformTearOff"** %28, align 8
  %29 = getelementptr inbounds i8, i8* %20, i64 -4
  %30 = bitcast i8* %29 to i16*
  %31 = load atomic i16, i16* %30 monotonic, align 2
  %32 = or i16 %31, 1
  store atomic i16 %32, i16* %30 release, align 2
  %33 = load %"class.blink::SVGTransformTearOff"*, %"class.blink::SVGTransformTearOff"** %28, align 8
  %34 = icmp eq %"class.blink::SVGTransformTearOff"* %33, null
  br i1 %34, label %45, label %35

35:                                               ; preds = %18
  %36 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %33, i64 0, i32 0, i32 0, i32 3
  %37 = load i32, i32* %36, align 8
  %38 = icmp eq i32 %37, 1
  br i1 %38, label %39, label %41

39:                                               ; preds = %35
  %40 = bitcast %"class.blink::SVGTransformTearOff"* %33 to %"class.blink::SVGPropertyTearOffBase"*
  tail call void @_ZN5blink22SVGPropertyTearOffBase20EnsureAnimValUpdatedEv(%"class.blink::SVGPropertyTearOffBase"* nonnull %40) #5
  br label %41

41:                                               ; preds = %39, %35
  %42 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %33, i64 0, i32 0, i32 1, i32 0, i32 0
  %43 = load %"class.blink::SVGTransform"*, %"class.blink::SVGTransform"** %42, align 8
  %44 = getelementptr inbounds %"class.blink::SVGTransform", %"class.blink::SVGTransform"* %43, i64 0, i32 4
  br label %47

45:                                               ; preds = %18
  %46 = bitcast i8* %25 to %"class.blink::AffineTransform"*
  br label %47

47:                                               ; preds = %41, %45
  %48 = phi %"class.blink::AffineTransform"* [ %44, %41 ], [ %46, %45 ]
  %49 = tail call dereferenceable(48) %"class.blink::AffineTransform"* @_ZN5blink15AffineTransform5ScaleEdd(%"class.blink::AffineTransform"* %48, double %1, double %1) #5
  ret %"class.blink::SVGMatrixTearOff"* %21
}

declare dereferenceable(48) %"class.blink::AffineTransform"* @_ZN5blink15AffineTransform5ScaleEdd(%"class.blink::AffineTransform"*, double, double) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::SVGMatrixTearOff"* @_ZN5blink16SVGMatrixTearOff15scaleNonUniformEdd(%"class.blink::SVGMatrixTearOff"* nocapture readonly, double, double) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.blink::SVGMatrixTearOff", %"class.blink::SVGMatrixTearOff"* %0, i64 0, i32 2, i32 0, i32 0
  %5 = load %"class.blink::SVGTransformTearOff"*, %"class.blink::SVGTransformTearOff"** %4, align 8
  %6 = icmp eq %"class.blink::SVGTransformTearOff"* %5, null
  br i1 %6, label %17, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %5, i64 0, i32 0, i32 0, i32 3
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %11, label %13

11:                                               ; preds = %7
  %12 = bitcast %"class.blink::SVGTransformTearOff"* %5 to %"class.blink::SVGPropertyTearOffBase"*
  tail call void @_ZN5blink22SVGPropertyTearOffBase20EnsureAnimValUpdatedEv(%"class.blink::SVGPropertyTearOffBase"* nonnull %12) #5
  br label %13

13:                                               ; preds = %11, %7
  %14 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %5, i64 0, i32 0, i32 1, i32 0, i32 0
  %15 = load %"class.blink::SVGTransform"*, %"class.blink::SVGTransform"** %14, align 8
  %16 = getelementptr inbounds %"class.blink::SVGTransform", %"class.blink::SVGTransform"* %15, i64 0, i32 4
  br label %19

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.blink::SVGMatrixTearOff", %"class.blink::SVGMatrixTearOff"* %0, i64 0, i32 1
  br label %19

19:                                               ; preds = %13, %17
  %20 = phi %"class.blink::AffineTransform"* [ %16, %13 ], [ %18, %17 ]
  %21 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_15ScriptWrappableEEEPhm(i64 72) #5
  %22 = bitcast i8* %21 to %"class.blink::SVGMatrixTearOff"*
  %23 = bitcast i8* %21 to i32 (...)***
  %24 = getelementptr inbounds i8, i8* %21, i64 8
  %25 = bitcast i8* %24 to i64**
  store i64* null, i64** %25, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink16SVGMatrixTearOffE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %23, align 8
  %26 = getelementptr inbounds i8, i8* %21, i64 16
  %27 = bitcast %"class.blink::AffineTransform"* %20 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %26, i8* align 8 %27, i64 48, i1 false) #5
  %28 = getelementptr inbounds i8, i8* %21, i64 64
  %29 = bitcast i8* %28 to %"class.blink::SVGTransformTearOff"**
  store %"class.blink::SVGTransformTearOff"* null, %"class.blink::SVGTransformTearOff"** %29, align 8
  %30 = getelementptr inbounds i8, i8* %21, i64 -4
  %31 = bitcast i8* %30 to i16*
  %32 = load atomic i16, i16* %31 monotonic, align 2
  %33 = or i16 %32, 1
  store atomic i16 %33, i16* %31 release, align 2
  %34 = load %"class.blink::SVGTransformTearOff"*, %"class.blink::SVGTransformTearOff"** %29, align 8
  %35 = icmp eq %"class.blink::SVGTransformTearOff"* %34, null
  br i1 %35, label %46, label %36

36:                                               ; preds = %19
  %37 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %34, i64 0, i32 0, i32 0, i32 3
  %38 = load i32, i32* %37, align 8
  %39 = icmp eq i32 %38, 1
  br i1 %39, label %40, label %42

40:                                               ; preds = %36
  %41 = bitcast %"class.blink::SVGTransformTearOff"* %34 to %"class.blink::SVGPropertyTearOffBase"*
  tail call void @_ZN5blink22SVGPropertyTearOffBase20EnsureAnimValUpdatedEv(%"class.blink::SVGPropertyTearOffBase"* nonnull %41) #5
  br label %42

42:                                               ; preds = %40, %36
  %43 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %34, i64 0, i32 0, i32 1, i32 0, i32 0
  %44 = load %"class.blink::SVGTransform"*, %"class.blink::SVGTransform"** %43, align 8
  %45 = getelementptr inbounds %"class.blink::SVGTransform", %"class.blink::SVGTransform"* %44, i64 0, i32 4
  br label %48

46:                                               ; preds = %19
  %47 = bitcast i8* %26 to %"class.blink::AffineTransform"*
  br label %48

48:                                               ; preds = %42, %46
  %49 = phi %"class.blink::AffineTransform"* [ %45, %42 ], [ %47, %46 ]
  %50 = tail call dereferenceable(48) %"class.blink::AffineTransform"* @_ZN5blink15AffineTransform5ScaleEdd(%"class.blink::AffineTransform"* %49, double %1, double %2) #5
  ret %"class.blink::SVGMatrixTearOff"* %22
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::SVGMatrixTearOff"* @_ZN5blink16SVGMatrixTearOff6rotateEd(%"class.blink::SVGMatrixTearOff"* nocapture readonly, double) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::SVGMatrixTearOff", %"class.blink::SVGMatrixTearOff"* %0, i64 0, i32 2, i32 0, i32 0
  %4 = load %"class.blink::SVGTransformTearOff"*, %"class.blink::SVGTransformTearOff"** %3, align 8
  %5 = icmp eq %"class.blink::SVGTransformTearOff"* %4, null
  br i1 %5, label %16, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %4, i64 0, i32 0, i32 0, i32 3
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %12

10:                                               ; preds = %6
  %11 = bitcast %"class.blink::SVGTransformTearOff"* %4 to %"class.blink::SVGPropertyTearOffBase"*
  tail call void @_ZN5blink22SVGPropertyTearOffBase20EnsureAnimValUpdatedEv(%"class.blink::SVGPropertyTearOffBase"* nonnull %11) #5
  br label %12

12:                                               ; preds = %10, %6
  %13 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %4, i64 0, i32 0, i32 1, i32 0, i32 0
  %14 = load %"class.blink::SVGTransform"*, %"class.blink::SVGTransform"** %13, align 8
  %15 = getelementptr inbounds %"class.blink::SVGTransform", %"class.blink::SVGTransform"* %14, i64 0, i32 4
  br label %18

16:                                               ; preds = %2
  %17 = getelementptr inbounds %"class.blink::SVGMatrixTearOff", %"class.blink::SVGMatrixTearOff"* %0, i64 0, i32 1
  br label %18

18:                                               ; preds = %12, %16
  %19 = phi %"class.blink::AffineTransform"* [ %15, %12 ], [ %17, %16 ]
  %20 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_15ScriptWrappableEEEPhm(i64 72) #5
  %21 = bitcast i8* %20 to %"class.blink::SVGMatrixTearOff"*
  %22 = bitcast i8* %20 to i32 (...)***
  %23 = getelementptr inbounds i8, i8* %20, i64 8
  %24 = bitcast i8* %23 to i64**
  store i64* null, i64** %24, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink16SVGMatrixTearOffE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %22, align 8
  %25 = getelementptr inbounds i8, i8* %20, i64 16
  %26 = bitcast %"class.blink::AffineTransform"* %19 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %25, i8* align 8 %26, i64 48, i1 false) #5
  %27 = getelementptr inbounds i8, i8* %20, i64 64
  %28 = bitcast i8* %27 to %"class.blink::SVGTransformTearOff"**
  store %"class.blink::SVGTransformTearOff"* null, %"class.blink::SVGTransformTearOff"** %28, align 8
  %29 = getelementptr inbounds i8, i8* %20, i64 -4
  %30 = bitcast i8* %29 to i16*
  %31 = load atomic i16, i16* %30 monotonic, align 2
  %32 = or i16 %31, 1
  store atomic i16 %32, i16* %30 release, align 2
  %33 = load %"class.blink::SVGTransformTearOff"*, %"class.blink::SVGTransformTearOff"** %28, align 8
  %34 = icmp eq %"class.blink::SVGTransformTearOff"* %33, null
  br i1 %34, label %45, label %35

35:                                               ; preds = %18
  %36 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %33, i64 0, i32 0, i32 0, i32 3
  %37 = load i32, i32* %36, align 8
  %38 = icmp eq i32 %37, 1
  br i1 %38, label %39, label %41

39:                                               ; preds = %35
  %40 = bitcast %"class.blink::SVGTransformTearOff"* %33 to %"class.blink::SVGPropertyTearOffBase"*
  tail call void @_ZN5blink22SVGPropertyTearOffBase20EnsureAnimValUpdatedEv(%"class.blink::SVGPropertyTearOffBase"* nonnull %40) #5
  br label %41

41:                                               ; preds = %39, %35
  %42 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %33, i64 0, i32 0, i32 1, i32 0, i32 0
  %43 = load %"class.blink::SVGTransform"*, %"class.blink::SVGTransform"** %42, align 8
  %44 = getelementptr inbounds %"class.blink::SVGTransform", %"class.blink::SVGTransform"* %43, i64 0, i32 4
  br label %47

45:                                               ; preds = %18
  %46 = bitcast i8* %25 to %"class.blink::AffineTransform"*
  br label %47

47:                                               ; preds = %41, %45
  %48 = phi %"class.blink::AffineTransform"* [ %44, %41 ], [ %46, %45 ]
  %49 = tail call dereferenceable(48) %"class.blink::AffineTransform"* @_ZN5blink15AffineTransform6RotateEd(%"class.blink::AffineTransform"* %48, double %1) #5
  ret %"class.blink::SVGMatrixTearOff"* %21
}

declare dereferenceable(48) %"class.blink::AffineTransform"* @_ZN5blink15AffineTransform6RotateEd(%"class.blink::AffineTransform"*, double) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::SVGMatrixTearOff"* @_ZN5blink16SVGMatrixTearOff5flipXEv(%"class.blink::SVGMatrixTearOff"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::SVGMatrixTearOff", %"class.blink::SVGMatrixTearOff"* %0, i64 0, i32 2, i32 0, i32 0
  %3 = load %"class.blink::SVGTransformTearOff"*, %"class.blink::SVGTransformTearOff"** %2, align 8
  %4 = icmp eq %"class.blink::SVGTransformTearOff"* %3, null
  br i1 %4, label %15, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %3, i64 0, i32 0, i32 0, i32 3
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 1
  br i1 %8, label %9, label %11

9:                                                ; preds = %5
  %10 = bitcast %"class.blink::SVGTransformTearOff"* %3 to %"class.blink::SVGPropertyTearOffBase"*
  tail call void @_ZN5blink22SVGPropertyTearOffBase20EnsureAnimValUpdatedEv(%"class.blink::SVGPropertyTearOffBase"* nonnull %10) #5
  br label %11

11:                                               ; preds = %9, %5
  %12 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %3, i64 0, i32 0, i32 1, i32 0, i32 0
  %13 = load %"class.blink::SVGTransform"*, %"class.blink::SVGTransform"** %12, align 8
  %14 = getelementptr inbounds %"class.blink::SVGTransform", %"class.blink::SVGTransform"* %13, i64 0, i32 4
  br label %17

15:                                               ; preds = %1
  %16 = getelementptr inbounds %"class.blink::SVGMatrixTearOff", %"class.blink::SVGMatrixTearOff"* %0, i64 0, i32 1
  br label %17

17:                                               ; preds = %11, %15
  %18 = phi %"class.blink::AffineTransform"* [ %14, %11 ], [ %16, %15 ]
  %19 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_15ScriptWrappableEEEPhm(i64 72) #5
  %20 = bitcast i8* %19 to %"class.blink::SVGMatrixTearOff"*
  %21 = bitcast i8* %19 to i32 (...)***
  %22 = getelementptr inbounds i8, i8* %19, i64 8
  %23 = bitcast i8* %22 to i64**
  store i64* null, i64** %23, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink16SVGMatrixTearOffE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %21, align 8
  %24 = getelementptr inbounds i8, i8* %19, i64 16
  %25 = bitcast %"class.blink::AffineTransform"* %18 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %24, i8* align 8 %25, i64 48, i1 false) #5
  %26 = getelementptr inbounds i8, i8* %19, i64 64
  %27 = bitcast i8* %26 to %"class.blink::SVGTransformTearOff"**
  store %"class.blink::SVGTransformTearOff"* null, %"class.blink::SVGTransformTearOff"** %27, align 8
  %28 = getelementptr inbounds i8, i8* %19, i64 -4
  %29 = bitcast i8* %28 to i16*
  %30 = load atomic i16, i16* %29 monotonic, align 2
  %31 = or i16 %30, 1
  store atomic i16 %31, i16* %29 release, align 2
  %32 = load %"class.blink::SVGTransformTearOff"*, %"class.blink::SVGTransformTearOff"** %27, align 8
  %33 = icmp eq %"class.blink::SVGTransformTearOff"* %32, null
  br i1 %33, label %44, label %34

34:                                               ; preds = %17
  %35 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %32, i64 0, i32 0, i32 0, i32 3
  %36 = load i32, i32* %35, align 8
  %37 = icmp eq i32 %36, 1
  br i1 %37, label %38, label %40

38:                                               ; preds = %34
  %39 = bitcast %"class.blink::SVGTransformTearOff"* %32 to %"class.blink::SVGPropertyTearOffBase"*
  tail call void @_ZN5blink22SVGPropertyTearOffBase20EnsureAnimValUpdatedEv(%"class.blink::SVGPropertyTearOffBase"* nonnull %39) #5
  br label %40

40:                                               ; preds = %38, %34
  %41 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %32, i64 0, i32 0, i32 1, i32 0, i32 0
  %42 = load %"class.blink::SVGTransform"*, %"class.blink::SVGTransform"** %41, align 8
  %43 = getelementptr inbounds %"class.blink::SVGTransform", %"class.blink::SVGTransform"* %42, i64 0, i32 4
  br label %46

44:                                               ; preds = %17
  %45 = bitcast i8* %24 to %"class.blink::AffineTransform"*
  br label %46

46:                                               ; preds = %40, %44
  %47 = phi %"class.blink::AffineTransform"* [ %43, %40 ], [ %45, %44 ]
  %48 = tail call dereferenceable(48) %"class.blink::AffineTransform"* @_ZN5blink15AffineTransform5FlipXEv(%"class.blink::AffineTransform"* %47) #5
  ret %"class.blink::SVGMatrixTearOff"* %20
}

declare dereferenceable(48) %"class.blink::AffineTransform"* @_ZN5blink15AffineTransform5FlipXEv(%"class.blink::AffineTransform"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::SVGMatrixTearOff"* @_ZN5blink16SVGMatrixTearOff5flipYEv(%"class.blink::SVGMatrixTearOff"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::SVGMatrixTearOff", %"class.blink::SVGMatrixTearOff"* %0, i64 0, i32 2, i32 0, i32 0
  %3 = load %"class.blink::SVGTransformTearOff"*, %"class.blink::SVGTransformTearOff"** %2, align 8
  %4 = icmp eq %"class.blink::SVGTransformTearOff"* %3, null
  br i1 %4, label %15, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %3, i64 0, i32 0, i32 0, i32 3
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 1
  br i1 %8, label %9, label %11

9:                                                ; preds = %5
  %10 = bitcast %"class.blink::SVGTransformTearOff"* %3 to %"class.blink::SVGPropertyTearOffBase"*
  tail call void @_ZN5blink22SVGPropertyTearOffBase20EnsureAnimValUpdatedEv(%"class.blink::SVGPropertyTearOffBase"* nonnull %10) #5
  br label %11

11:                                               ; preds = %9, %5
  %12 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %3, i64 0, i32 0, i32 1, i32 0, i32 0
  %13 = load %"class.blink::SVGTransform"*, %"class.blink::SVGTransform"** %12, align 8
  %14 = getelementptr inbounds %"class.blink::SVGTransform", %"class.blink::SVGTransform"* %13, i64 0, i32 4
  br label %17

15:                                               ; preds = %1
  %16 = getelementptr inbounds %"class.blink::SVGMatrixTearOff", %"class.blink::SVGMatrixTearOff"* %0, i64 0, i32 1
  br label %17

17:                                               ; preds = %11, %15
  %18 = phi %"class.blink::AffineTransform"* [ %14, %11 ], [ %16, %15 ]
  %19 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_15ScriptWrappableEEEPhm(i64 72) #5
  %20 = bitcast i8* %19 to %"class.blink::SVGMatrixTearOff"*
  %21 = bitcast i8* %19 to i32 (...)***
  %22 = getelementptr inbounds i8, i8* %19, i64 8
  %23 = bitcast i8* %22 to i64**
  store i64* null, i64** %23, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink16SVGMatrixTearOffE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %21, align 8
  %24 = getelementptr inbounds i8, i8* %19, i64 16
  %25 = bitcast %"class.blink::AffineTransform"* %18 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %24, i8* align 8 %25, i64 48, i1 false) #5
  %26 = getelementptr inbounds i8, i8* %19, i64 64
  %27 = bitcast i8* %26 to %"class.blink::SVGTransformTearOff"**
  store %"class.blink::SVGTransformTearOff"* null, %"class.blink::SVGTransformTearOff"** %27, align 8
  %28 = getelementptr inbounds i8, i8* %19, i64 -4
  %29 = bitcast i8* %28 to i16*
  %30 = load atomic i16, i16* %29 monotonic, align 2
  %31 = or i16 %30, 1
  store atomic i16 %31, i16* %29 release, align 2
  %32 = load %"class.blink::SVGTransformTearOff"*, %"class.blink::SVGTransformTearOff"** %27, align 8
  %33 = icmp eq %"class.blink::SVGTransformTearOff"* %32, null
  br i1 %33, label %44, label %34

34:                                               ; preds = %17
  %35 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %32, i64 0, i32 0, i32 0, i32 3
  %36 = load i32, i32* %35, align 8
  %37 = icmp eq i32 %36, 1
  br i1 %37, label %38, label %40

38:                                               ; preds = %34
  %39 = bitcast %"class.blink::SVGTransformTearOff"* %32 to %"class.blink::SVGPropertyTearOffBase"*
  tail call void @_ZN5blink22SVGPropertyTearOffBase20EnsureAnimValUpdatedEv(%"class.blink::SVGPropertyTearOffBase"* nonnull %39) #5
  br label %40

40:                                               ; preds = %38, %34
  %41 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %32, i64 0, i32 0, i32 1, i32 0, i32 0
  %42 = load %"class.blink::SVGTransform"*, %"class.blink::SVGTransform"** %41, align 8
  %43 = getelementptr inbounds %"class.blink::SVGTransform", %"class.blink::SVGTransform"* %42, i64 0, i32 4
  br label %46

44:                                               ; preds = %17
  %45 = bitcast i8* %24 to %"class.blink::AffineTransform"*
  br label %46

46:                                               ; preds = %40, %44
  %47 = phi %"class.blink::AffineTransform"* [ %43, %40 ], [ %45, %44 ]
  %48 = tail call dereferenceable(48) %"class.blink::AffineTransform"* @_ZN5blink15AffineTransform5FlipYEv(%"class.blink::AffineTransform"* %47) #5
  ret %"class.blink::SVGMatrixTearOff"* %20
}

declare dereferenceable(48) %"class.blink::AffineTransform"* @_ZN5blink15AffineTransform5FlipYEv(%"class.blink::AffineTransform"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::SVGMatrixTearOff"* @_ZN5blink16SVGMatrixTearOff5skewXEd(%"class.blink::SVGMatrixTearOff"* nocapture readonly, double) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::SVGMatrixTearOff", %"class.blink::SVGMatrixTearOff"* %0, i64 0, i32 2, i32 0, i32 0
  %4 = load %"class.blink::SVGTransformTearOff"*, %"class.blink::SVGTransformTearOff"** %3, align 8
  %5 = icmp eq %"class.blink::SVGTransformTearOff"* %4, null
  br i1 %5, label %16, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %4, i64 0, i32 0, i32 0, i32 3
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %12

10:                                               ; preds = %6
  %11 = bitcast %"class.blink::SVGTransformTearOff"* %4 to %"class.blink::SVGPropertyTearOffBase"*
  tail call void @_ZN5blink22SVGPropertyTearOffBase20EnsureAnimValUpdatedEv(%"class.blink::SVGPropertyTearOffBase"* nonnull %11) #5
  br label %12

12:                                               ; preds = %10, %6
  %13 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %4, i64 0, i32 0, i32 1, i32 0, i32 0
  %14 = load %"class.blink::SVGTransform"*, %"class.blink::SVGTransform"** %13, align 8
  %15 = getelementptr inbounds %"class.blink::SVGTransform", %"class.blink::SVGTransform"* %14, i64 0, i32 4
  br label %18

16:                                               ; preds = %2
  %17 = getelementptr inbounds %"class.blink::SVGMatrixTearOff", %"class.blink::SVGMatrixTearOff"* %0, i64 0, i32 1
  br label %18

18:                                               ; preds = %12, %16
  %19 = phi %"class.blink::AffineTransform"* [ %15, %12 ], [ %17, %16 ]
  %20 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_15ScriptWrappableEEEPhm(i64 72) #5
  %21 = bitcast i8* %20 to %"class.blink::SVGMatrixTearOff"*
  %22 = bitcast i8* %20 to i32 (...)***
  %23 = getelementptr inbounds i8, i8* %20, i64 8
  %24 = bitcast i8* %23 to i64**
  store i64* null, i64** %24, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink16SVGMatrixTearOffE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %22, align 8
  %25 = getelementptr inbounds i8, i8* %20, i64 16
  %26 = bitcast %"class.blink::AffineTransform"* %19 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %25, i8* align 8 %26, i64 48, i1 false) #5
  %27 = getelementptr inbounds i8, i8* %20, i64 64
  %28 = bitcast i8* %27 to %"class.blink::SVGTransformTearOff"**
  store %"class.blink::SVGTransformTearOff"* null, %"class.blink::SVGTransformTearOff"** %28, align 8
  %29 = getelementptr inbounds i8, i8* %20, i64 -4
  %30 = bitcast i8* %29 to i16*
  %31 = load atomic i16, i16* %30 monotonic, align 2
  %32 = or i16 %31, 1
  store atomic i16 %32, i16* %30 release, align 2
  %33 = load %"class.blink::SVGTransformTearOff"*, %"class.blink::SVGTransformTearOff"** %28, align 8
  %34 = icmp eq %"class.blink::SVGTransformTearOff"* %33, null
  br i1 %34, label %45, label %35

35:                                               ; preds = %18
  %36 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %33, i64 0, i32 0, i32 0, i32 3
  %37 = load i32, i32* %36, align 8
  %38 = icmp eq i32 %37, 1
  br i1 %38, label %39, label %41

39:                                               ; preds = %35
  %40 = bitcast %"class.blink::SVGTransformTearOff"* %33 to %"class.blink::SVGPropertyTearOffBase"*
  tail call void @_ZN5blink22SVGPropertyTearOffBase20EnsureAnimValUpdatedEv(%"class.blink::SVGPropertyTearOffBase"* nonnull %40) #5
  br label %41

41:                                               ; preds = %39, %35
  %42 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %33, i64 0, i32 0, i32 1, i32 0, i32 0
  %43 = load %"class.blink::SVGTransform"*, %"class.blink::SVGTransform"** %42, align 8
  %44 = getelementptr inbounds %"class.blink::SVGTransform", %"class.blink::SVGTransform"* %43, i64 0, i32 4
  br label %47

45:                                               ; preds = %18
  %46 = bitcast i8* %25 to %"class.blink::AffineTransform"*
  br label %47

47:                                               ; preds = %41, %45
  %48 = phi %"class.blink::AffineTransform"* [ %44, %41 ], [ %46, %45 ]
  %49 = tail call dereferenceable(48) %"class.blink::AffineTransform"* @_ZN5blink15AffineTransform5SkewXEd(%"class.blink::AffineTransform"* %48, double %1) #5
  ret %"class.blink::SVGMatrixTearOff"* %21
}

declare dereferenceable(48) %"class.blink::AffineTransform"* @_ZN5blink15AffineTransform5SkewXEd(%"class.blink::AffineTransform"*, double) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::SVGMatrixTearOff"* @_ZN5blink16SVGMatrixTearOff5skewYEd(%"class.blink::SVGMatrixTearOff"* nocapture readonly, double) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::SVGMatrixTearOff", %"class.blink::SVGMatrixTearOff"* %0, i64 0, i32 2, i32 0, i32 0
  %4 = load %"class.blink::SVGTransformTearOff"*, %"class.blink::SVGTransformTearOff"** %3, align 8
  %5 = icmp eq %"class.blink::SVGTransformTearOff"* %4, null
  br i1 %5, label %16, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %4, i64 0, i32 0, i32 0, i32 3
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %12

10:                                               ; preds = %6
  %11 = bitcast %"class.blink::SVGTransformTearOff"* %4 to %"class.blink::SVGPropertyTearOffBase"*
  tail call void @_ZN5blink22SVGPropertyTearOffBase20EnsureAnimValUpdatedEv(%"class.blink::SVGPropertyTearOffBase"* nonnull %11) #5
  br label %12

12:                                               ; preds = %10, %6
  %13 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %4, i64 0, i32 0, i32 1, i32 0, i32 0
  %14 = load %"class.blink::SVGTransform"*, %"class.blink::SVGTransform"** %13, align 8
  %15 = getelementptr inbounds %"class.blink::SVGTransform", %"class.blink::SVGTransform"* %14, i64 0, i32 4
  br label %18

16:                                               ; preds = %2
  %17 = getelementptr inbounds %"class.blink::SVGMatrixTearOff", %"class.blink::SVGMatrixTearOff"* %0, i64 0, i32 1
  br label %18

18:                                               ; preds = %12, %16
  %19 = phi %"class.blink::AffineTransform"* [ %15, %12 ], [ %17, %16 ]
  %20 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_15ScriptWrappableEEEPhm(i64 72) #5
  %21 = bitcast i8* %20 to %"class.blink::SVGMatrixTearOff"*
  %22 = bitcast i8* %20 to i32 (...)***
  %23 = getelementptr inbounds i8, i8* %20, i64 8
  %24 = bitcast i8* %23 to i64**
  store i64* null, i64** %24, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink16SVGMatrixTearOffE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %22, align 8
  %25 = getelementptr inbounds i8, i8* %20, i64 16
  %26 = bitcast %"class.blink::AffineTransform"* %19 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %25, i8* align 8 %26, i64 48, i1 false) #5
  %27 = getelementptr inbounds i8, i8* %20, i64 64
  %28 = bitcast i8* %27 to %"class.blink::SVGTransformTearOff"**
  store %"class.blink::SVGTransformTearOff"* null, %"class.blink::SVGTransformTearOff"** %28, align 8
  %29 = getelementptr inbounds i8, i8* %20, i64 -4
  %30 = bitcast i8* %29 to i16*
  %31 = load atomic i16, i16* %30 monotonic, align 2
  %32 = or i16 %31, 1
  store atomic i16 %32, i16* %30 release, align 2
  %33 = load %"class.blink::SVGTransformTearOff"*, %"class.blink::SVGTransformTearOff"** %28, align 8
  %34 = icmp eq %"class.blink::SVGTransformTearOff"* %33, null
  br i1 %34, label %45, label %35

35:                                               ; preds = %18
  %36 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %33, i64 0, i32 0, i32 0, i32 3
  %37 = load i32, i32* %36, align 8
  %38 = icmp eq i32 %37, 1
  br i1 %38, label %39, label %41

39:                                               ; preds = %35
  %40 = bitcast %"class.blink::SVGTransformTearOff"* %33 to %"class.blink::SVGPropertyTearOffBase"*
  tail call void @_ZN5blink22SVGPropertyTearOffBase20EnsureAnimValUpdatedEv(%"class.blink::SVGPropertyTearOffBase"* nonnull %40) #5
  br label %41

41:                                               ; preds = %39, %35
  %42 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %33, i64 0, i32 0, i32 1, i32 0, i32 0
  %43 = load %"class.blink::SVGTransform"*, %"class.blink::SVGTransform"** %42, align 8
  %44 = getelementptr inbounds %"class.blink::SVGTransform", %"class.blink::SVGTransform"* %43, i64 0, i32 4
  br label %47

45:                                               ; preds = %18
  %46 = bitcast i8* %25 to %"class.blink::AffineTransform"*
  br label %47

47:                                               ; preds = %41, %45
  %48 = phi %"class.blink::AffineTransform"* [ %44, %41 ], [ %46, %45 ]
  %49 = tail call dereferenceable(48) %"class.blink::AffineTransform"* @_ZN5blink15AffineTransform5SkewYEd(%"class.blink::AffineTransform"* %48, double %1) #5
  ret %"class.blink::SVGMatrixTearOff"* %21
}

declare dereferenceable(48) %"class.blink::AffineTransform"* @_ZN5blink15AffineTransform5SkewYEd(%"class.blink::AffineTransform"*, double) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::SVGMatrixTearOff"* @_ZN5blink16SVGMatrixTearOff8multiplyEPS0_(%"class.blink::SVGMatrixTearOff"* nocapture readonly, %"class.blink::SVGMatrixTearOff"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::SVGMatrixTearOff", %"class.blink::SVGMatrixTearOff"* %0, i64 0, i32 2, i32 0, i32 0
  %4 = load %"class.blink::SVGTransformTearOff"*, %"class.blink::SVGTransformTearOff"** %3, align 8
  %5 = icmp eq %"class.blink::SVGTransformTearOff"* %4, null
  br i1 %5, label %16, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %4, i64 0, i32 0, i32 0, i32 3
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %12

10:                                               ; preds = %6
  %11 = bitcast %"class.blink::SVGTransformTearOff"* %4 to %"class.blink::SVGPropertyTearOffBase"*
  tail call void @_ZN5blink22SVGPropertyTearOffBase20EnsureAnimValUpdatedEv(%"class.blink::SVGPropertyTearOffBase"* nonnull %11) #5
  br label %12

12:                                               ; preds = %10, %6
  %13 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %4, i64 0, i32 0, i32 1, i32 0, i32 0
  %14 = load %"class.blink::SVGTransform"*, %"class.blink::SVGTransform"** %13, align 8
  %15 = getelementptr inbounds %"class.blink::SVGTransform", %"class.blink::SVGTransform"* %14, i64 0, i32 4
  br label %18

16:                                               ; preds = %2
  %17 = getelementptr inbounds %"class.blink::SVGMatrixTearOff", %"class.blink::SVGMatrixTearOff"* %0, i64 0, i32 1
  br label %18

18:                                               ; preds = %12, %16
  %19 = phi %"class.blink::AffineTransform"* [ %15, %12 ], [ %17, %16 ]
  %20 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_15ScriptWrappableEEEPhm(i64 72) #5
  %21 = bitcast i8* %20 to %"class.blink::SVGMatrixTearOff"*
  %22 = bitcast i8* %20 to i32 (...)***
  %23 = getelementptr inbounds i8, i8* %20, i64 8
  %24 = bitcast i8* %23 to i64**
  store i64* null, i64** %24, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink16SVGMatrixTearOffE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %22, align 8
  %25 = getelementptr inbounds i8, i8* %20, i64 16
  %26 = bitcast %"class.blink::AffineTransform"* %19 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %25, i8* align 8 %26, i64 48, i1 false) #5
  %27 = getelementptr inbounds i8, i8* %20, i64 64
  %28 = bitcast i8* %27 to %"class.blink::SVGTransformTearOff"**
  store %"class.blink::SVGTransformTearOff"* null, %"class.blink::SVGTransformTearOff"** %28, align 8
  %29 = getelementptr inbounds i8, i8* %20, i64 -4
  %30 = bitcast i8* %29 to i16*
  %31 = load atomic i16, i16* %30 monotonic, align 2
  %32 = or i16 %31, 1
  store atomic i16 %32, i16* %30 release, align 2
  %33 = getelementptr inbounds %"class.blink::SVGMatrixTearOff", %"class.blink::SVGMatrixTearOff"* %1, i64 0, i32 2, i32 0, i32 0
  %34 = load %"class.blink::SVGTransformTearOff"*, %"class.blink::SVGTransformTearOff"** %33, align 8
  %35 = icmp eq %"class.blink::SVGTransformTearOff"* %34, null
  br i1 %35, label %46, label %36

36:                                               ; preds = %18
  %37 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %34, i64 0, i32 0, i32 0, i32 3
  %38 = load i32, i32* %37, align 8
  %39 = icmp eq i32 %38, 1
  br i1 %39, label %40, label %42

40:                                               ; preds = %36
  %41 = bitcast %"class.blink::SVGTransformTearOff"* %34 to %"class.blink::SVGPropertyTearOffBase"*
  tail call void @_ZN5blink22SVGPropertyTearOffBase20EnsureAnimValUpdatedEv(%"class.blink::SVGPropertyTearOffBase"* nonnull %41) #5
  br label %42

42:                                               ; preds = %40, %36
  %43 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %34, i64 0, i32 0, i32 1, i32 0, i32 0
  %44 = load %"class.blink::SVGTransform"*, %"class.blink::SVGTransform"** %43, align 8
  %45 = getelementptr inbounds %"class.blink::SVGTransform", %"class.blink::SVGTransform"* %44, i64 0, i32 4
  br label %48

46:                                               ; preds = %18
  %47 = getelementptr inbounds %"class.blink::SVGMatrixTearOff", %"class.blink::SVGMatrixTearOff"* %1, i64 0, i32 1
  br label %48

48:                                               ; preds = %42, %46
  %49 = phi %"class.blink::AffineTransform"* [ %45, %42 ], [ %47, %46 ]
  %50 = load %"class.blink::SVGTransformTearOff"*, %"class.blink::SVGTransformTearOff"** %28, align 8
  %51 = icmp eq %"class.blink::SVGTransformTearOff"* %50, null
  br i1 %51, label %62, label %52

52:                                               ; preds = %48
  %53 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %50, i64 0, i32 0, i32 0, i32 3
  %54 = load i32, i32* %53, align 8
  %55 = icmp eq i32 %54, 1
  br i1 %55, label %56, label %58

56:                                               ; preds = %52
  %57 = bitcast %"class.blink::SVGTransformTearOff"* %50 to %"class.blink::SVGPropertyTearOffBase"*
  tail call void @_ZN5blink22SVGPropertyTearOffBase20EnsureAnimValUpdatedEv(%"class.blink::SVGPropertyTearOffBase"* nonnull %57) #5
  br label %58

58:                                               ; preds = %56, %52
  %59 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %50, i64 0, i32 0, i32 1, i32 0, i32 0
  %60 = load %"class.blink::SVGTransform"*, %"class.blink::SVGTransform"** %59, align 8
  %61 = getelementptr inbounds %"class.blink::SVGTransform", %"class.blink::SVGTransform"* %60, i64 0, i32 4
  br label %64

62:                                               ; preds = %48
  %63 = bitcast i8* %25 to %"class.blink::AffineTransform"*
  br label %64

64:                                               ; preds = %58, %62
  %65 = phi %"class.blink::AffineTransform"* [ %61, %58 ], [ %63, %62 ]
  %66 = tail call dereferenceable(48) %"class.blink::AffineTransform"* @_ZN5blink15AffineTransform8MultiplyERKS0_(%"class.blink::AffineTransform"* %65, %"class.blink::AffineTransform"* dereferenceable(48) %49) #5
  ret %"class.blink::SVGMatrixTearOff"* %21
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::SVGMatrixTearOff"* @_ZN5blink16SVGMatrixTearOff7inverseERNS_14ExceptionStateE(%"class.blink::SVGMatrixTearOff"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.blink::AffineTransform", align 8
  %4 = getelementptr inbounds %"class.blink::SVGMatrixTearOff", %"class.blink::SVGMatrixTearOff"* %0, i64 0, i32 2, i32 0, i32 0
  %5 = load %"class.blink::SVGTransformTearOff"*, %"class.blink::SVGTransformTearOff"** %4, align 8
  %6 = icmp eq %"class.blink::SVGTransformTearOff"* %5, null
  br i1 %6, label %17, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %5, i64 0, i32 0, i32 0, i32 3
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %11, label %13

11:                                               ; preds = %7
  %12 = bitcast %"class.blink::SVGTransformTearOff"* %5 to %"class.blink::SVGPropertyTearOffBase"*
  tail call void @_ZN5blink22SVGPropertyTearOffBase20EnsureAnimValUpdatedEv(%"class.blink::SVGPropertyTearOffBase"* nonnull %12) #5
  br label %13

13:                                               ; preds = %11, %7
  %14 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %5, i64 0, i32 0, i32 1, i32 0, i32 0
  %15 = load %"class.blink::SVGTransform"*, %"class.blink::SVGTransform"** %14, align 8
  %16 = getelementptr inbounds %"class.blink::SVGTransform", %"class.blink::SVGTransform"* %15, i64 0, i32 4
  br label %19

17:                                               ; preds = %2
  %18 = getelementptr inbounds %"class.blink::SVGMatrixTearOff", %"class.blink::SVGMatrixTearOff"* %0, i64 0, i32 1
  br label %19

19:                                               ; preds = %13, %17
  %20 = phi %"class.blink::AffineTransform"* [ %16, %13 ], [ %18, %17 ]
  %21 = tail call zeroext i1 @_ZNK5blink15AffineTransform12IsInvertibleEv(%"class.blink::AffineTransform"* %20) #5
  br i1 %21, label %23, label %22

22:                                               ; preds = %19
  tail call void @_ZN5blink14ExceptionState17ThrowDOMExceptionENS_16DOMExceptionCodeEPKc(%"class.blink::ExceptionState"* %1, i32 11, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0)) #5
  br label %53

23:                                               ; preds = %19
  %24 = bitcast %"class.blink::AffineTransform"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %24) #5
  %25 = load %"class.blink::SVGTransformTearOff"*, %"class.blink::SVGTransformTearOff"** %4, align 8
  %26 = icmp eq %"class.blink::SVGTransformTearOff"* %25, null
  br i1 %26, label %37, label %27

27:                                               ; preds = %23
  %28 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %25, i64 0, i32 0, i32 0, i32 3
  %29 = load i32, i32* %28, align 8
  %30 = icmp eq i32 %29, 1
  br i1 %30, label %31, label %33

31:                                               ; preds = %27
  %32 = bitcast %"class.blink::SVGTransformTearOff"* %25 to %"class.blink::SVGPropertyTearOffBase"*
  tail call void @_ZN5blink22SVGPropertyTearOffBase20EnsureAnimValUpdatedEv(%"class.blink::SVGPropertyTearOffBase"* nonnull %32) #5
  br label %33

33:                                               ; preds = %31, %27
  %34 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %25, i64 0, i32 0, i32 1, i32 0, i32 0
  %35 = load %"class.blink::SVGTransform"*, %"class.blink::SVGTransform"** %34, align 8
  %36 = getelementptr inbounds %"class.blink::SVGTransform", %"class.blink::SVGTransform"* %35, i64 0, i32 4
  br label %39

37:                                               ; preds = %23
  %38 = getelementptr inbounds %"class.blink::SVGMatrixTearOff", %"class.blink::SVGMatrixTearOff"* %0, i64 0, i32 1
  br label %39

39:                                               ; preds = %33, %37
  %40 = phi %"class.blink::AffineTransform"* [ %36, %33 ], [ %38, %37 ]
  call void @_ZNK5blink15AffineTransform7InverseEv(%"class.blink::AffineTransform"* nonnull sret %3, %"class.blink::AffineTransform"* %40) #5
  %41 = call i8* @_ZN5blink10ThreadHeap8AllocateINS_15ScriptWrappableEEEPhm(i64 72) #5
  %42 = bitcast i8* %41 to %"class.blink::SVGMatrixTearOff"*
  %43 = bitcast i8* %41 to i32 (...)***
  %44 = getelementptr inbounds i8, i8* %41, i64 8
  %45 = bitcast i8* %44 to i64**
  store i64* null, i64** %45, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink16SVGMatrixTearOffE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %43, align 8
  %46 = getelementptr inbounds i8, i8* %41, i64 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %46, i8* nonnull align 8 %24, i64 48, i1 false) #5
  %47 = getelementptr inbounds i8, i8* %41, i64 64
  %48 = bitcast i8* %47 to %"class.blink::SVGTransformTearOff"**
  store %"class.blink::SVGTransformTearOff"* null, %"class.blink::SVGTransformTearOff"** %48, align 8
  %49 = getelementptr inbounds i8, i8* %41, i64 -4
  %50 = bitcast i8* %49 to i16*
  %51 = load atomic i16, i16* %50 monotonic, align 2
  %52 = or i16 %51, 1
  store atomic i16 %52, i16* %50 release, align 2
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %24) #5
  br label %53

53:                                               ; preds = %39, %22
  %54 = phi %"class.blink::SVGMatrixTearOff"* [ %42, %39 ], [ null, %22 ]
  ret %"class.blink::SVGMatrixTearOff"* %54
}

declare zeroext i1 @_ZNK5blink15AffineTransform12IsInvertibleEv(%"class.blink::AffineTransform"*) local_unnamed_addr #2

declare void @_ZN5blink14ExceptionState17ThrowDOMExceptionENS_16DOMExceptionCodeEPKc(%"class.blink::ExceptionState"*, i32, i8*) local_unnamed_addr #2

declare void @_ZNK5blink15AffineTransform7InverseEv(%"class.blink::AffineTransform"* sret, %"class.blink::AffineTransform"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::SVGMatrixTearOff"* @_ZN5blink16SVGMatrixTearOff16rotateFromVectorEddRNS_14ExceptionStateE(%"class.blink::SVGMatrixTearOff"* nocapture readonly, double, double, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.blink::AffineTransform", align 8
  %6 = fcmp une double %1, 0.000000e+00
  %7 = fcmp une double %2, 0.000000e+00
  %8 = and i1 %6, %7
  br i1 %8, label %10, label %9

9:                                                ; preds = %4
  tail call void @_ZN5blink14ExceptionState17ThrowDOMExceptionENS_16DOMExceptionCodeEPKc(%"class.blink::ExceptionState"* %3, i32 15, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0)) #5
  br label %44

10:                                               ; preds = %4
  %11 = bitcast %"class.blink::AffineTransform"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %11) #5
  %12 = getelementptr inbounds %"class.blink::SVGMatrixTearOff", %"class.blink::SVGMatrixTearOff"* %0, i64 0, i32 2, i32 0, i32 0
  %13 = bitcast %"class.blink::AffineTransform"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -1, i64 48, i1 false)
  %14 = load %"class.blink::SVGTransformTearOff"*, %"class.blink::SVGTransformTearOff"** %12, align 8
  %15 = icmp eq %"class.blink::SVGTransformTearOff"* %14, null
  br i1 %15, label %26, label %16

16:                                               ; preds = %10
  %17 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %14, i64 0, i32 0, i32 0, i32 3
  %18 = load i32, i32* %17, align 8
  %19 = icmp eq i32 %18, 1
  br i1 %19, label %20, label %22

20:                                               ; preds = %16
  %21 = bitcast %"class.blink::SVGTransformTearOff"* %14 to %"class.blink::SVGPropertyTearOffBase"*
  tail call void @_ZN5blink22SVGPropertyTearOffBase20EnsureAnimValUpdatedEv(%"class.blink::SVGPropertyTearOffBase"* nonnull %21) #5
  br label %22

22:                                               ; preds = %20, %16
  %23 = getelementptr inbounds %"class.blink::SVGTransformTearOff", %"class.blink::SVGTransformTearOff"* %14, i64 0, i32 0, i32 1, i32 0, i32 0
  %24 = load %"class.blink::SVGTransform"*, %"class.blink::SVGTransform"** %23, align 8
  %25 = getelementptr inbounds %"class.blink::SVGTransform", %"class.blink::SVGTransform"* %24, i64 0, i32 4
  br label %28

26:                                               ; preds = %10
  %27 = getelementptr inbounds %"class.blink::SVGMatrixTearOff", %"class.blink::SVGMatrixTearOff"* %0, i64 0, i32 1
  br label %28

28:                                               ; preds = %22, %26
  %29 = phi %"class.blink::AffineTransform"* [ %25, %22 ], [ %27, %26 ]
  %30 = bitcast %"class.blink::AffineTransform"* %29 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %11, i8* align 8 %30, i64 48, i1 false)
  %31 = call dereferenceable(48) %"class.blink::AffineTransform"* @_ZN5blink15AffineTransform16RotateFromVectorEdd(%"class.blink::AffineTransform"* nonnull %5, double %1, double %2) #5
  %32 = call i8* @_ZN5blink10ThreadHeap8AllocateINS_15ScriptWrappableEEEPhm(i64 72) #5
  %33 = bitcast i8* %32 to %"class.blink::SVGMatrixTearOff"*
  %34 = bitcast i8* %32 to i32 (...)***
  %35 = getelementptr inbounds i8, i8* %32, i64 8
  %36 = bitcast i8* %35 to i64**
  store i64* null, i64** %36, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink16SVGMatrixTearOffE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %34, align 8
  %37 = getelementptr inbounds i8, i8* %32, i64 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* nonnull align 8 %11, i64 48, i1 false) #5
  %38 = getelementptr inbounds i8, i8* %32, i64 64
  %39 = bitcast i8* %38 to %"class.blink::SVGTransformTearOff"**
  store %"class.blink::SVGTransformTearOff"* null, %"class.blink::SVGTransformTearOff"** %39, align 8
  %40 = getelementptr inbounds i8, i8* %32, i64 -4
  %41 = bitcast i8* %40 to i16*
  %42 = load atomic i16, i16* %41 monotonic, align 2
  %43 = or i16 %42, 1
  store atomic i16 %43, i16* %41 release, align 2
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %11) #5
  br label %44

44:                                               ; preds = %28, %9
  %45 = phi %"class.blink::SVGMatrixTearOff"* [ %33, %28 ], [ null, %9 ]
  ret %"class.blink::SVGMatrixTearOff"* %45
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare dereferenceable(48) %"class.blink::AffineTransform"* @_ZN5blink15AffineTransform16RotateFromVectorEdd(%"class.blink::AffineTransform"*, double, double) local_unnamed_addr #2

declare i8* @_ZNK5blink15ScriptWrappable18NameInHeapSnapshotEv(%"class.blink::ScriptWrappable"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink15ScriptWrappableD2Ev(%"class.blink::ScriptWrappable"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink16SVGMatrixTearOffD0Ev(%"class.blink::SVGMatrixTearOff"*) unnamed_addr #3 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink15ScriptWrappable18HasPendingActivityEv(%"class.blink::ScriptWrappable"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink15ScriptWrappable17HasEventListenersEv(%"class.blink::ScriptWrappable"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.blink::WrapperTypeInfo"* @_ZNK5blink16SVGMatrixTearOff18GetWrapperTypeInfoEv(%"class.blink::SVGMatrixTearOff"*) unnamed_addr #0 comdat align 2 {
  %2 = load %"struct.blink::WrapperTypeInfo"*, %"struct.blink::WrapperTypeInfo"** @_ZN5blink16SVGMatrixTearOff18wrapper_type_info_E, align 8
  ret %"struct.blink::WrapperTypeInfo"* %2
}

declare %"class.v8::Value"* @_ZN5blink15ScriptWrappable4WrapEPNS_11ScriptStateE(%"class.blink::ScriptWrappable"*, %"class.blink::ScriptState"*) unnamed_addr #2

declare %"class.v8::Object"* @_ZN5blink15ScriptWrappable20AssociateWithWrapperEPN2v87IsolateEPKNS_15WrapperTypeInfoENS1_5LocalINS1_6ObjectEEE(%"class.blink::ScriptWrappable"*, %"class.v8::Isolate"*, %"struct.blink::WrapperTypeInfo"*, %"class.v8::Object"*) unnamed_addr #2

declare dereferenceable(48) %"class.blink::AffineTransform"* @_ZN5blink15AffineTransform8MultiplyERKS0_(%"class.blink::AffineTransform"*, %"class.blink::AffineTransform"* dereferenceable(48)) local_unnamed_addr #2

declare void @_ZN5blink22SVGPropertyTearOffBase20EnsureAnimValUpdatedEv(%"class.blink::SVGPropertyTearOffBase"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_19SVGTransformTearOffEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::SVGTransformTearOff"*
  tail call void @_ZNK5blink19SVGTransformTearOff5TraceEPNS_7VisitorE(%"class.blink::SVGTransformTearOff"* %3, %"class.blink::Visitor"* %0) #5
  ret void
}

declare void @_ZNK5blink19SVGTransformTearOff5TraceEPNS_7VisitorE(%"class.blink::SVGTransformTearOff"*, %"class.blink::Visitor"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink10ThreadHeap8AllocateINS_15ScriptWrappableEEEPhm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %6 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %5, i64 0, i32 1
  %7 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %6) #5
  %8 = icmp eq i8* %7, null
  br i1 %8, label %9, label %11, !prof !2

9:                                                ; preds = %1
  %10 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #5
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %6, i8* %10) #5
  br label %11

11:                                               ; preds = %1, %9
  %12 = phi i8* [ %10, %9 ], [ %7, %1 ]
  %13 = bitcast i8* %12 to %"class.blink::ThreadState"**
  %14 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %13, align 8
  %15 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %14, i64 0, i32 0, i32 0, i32 0, i32 0
  %16 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %15, align 8
  %17 = icmp ult i64 %0, 64
  %18 = icmp ugt i64 %0, 31
  %19 = zext i1 %18 to i64
  %20 = icmp ult i64 %0, 128
  %21 = select i1 %20, i64 2, i64 3
  %22 = select i1 %17, i64 %19, i64 %21
  %23 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %28

25:                                               ; preds = %11
  %26 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %27 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %26, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic.183"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic.183"*)) #5
  br label %28

28:                                               ; preds = %11, %25
  %29 = phi i32 [ %23, %11 ], [ %27, %25 ]
  %30 = getelementptr inbounds %"class.blink::ThreadHeap", %"class.blink::ThreadHeap"* %16, i64 0, i32 19, i64 %22
  %31 = bitcast %"class.blink::BaseArena"** %30 to %"class.blink::NormalPageArena"**
  %32 = load %"class.blink::NormalPageArena"*, %"class.blink::NormalPageArena"** %31, align 8
  %33 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #5
  %34 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %34, align 8
  %35 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #5
  %36 = icmp ult i64 %0, -8
  br i1 %36, label %37, label %38

37:                                               ; preds = %28
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #5
  store i8* null, i8** %34, align 8
  br label %48

38:                                               ; preds = %28
  %39 = add nsw i64 %0, 8
  %40 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %39) #5
  %41 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #5
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0), i8* %40, i8* %41) #5
  %42 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %43 = load i8*, i8** %42, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #5
  store i8* %43, i8** %34, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %48, label %45

45:                                               ; preds = %38
  %46 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %46) #5
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.3, i64 0, i64 0), i32 246, %"class.logging::CheckOpResult"* nonnull %3) #5
  %47 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #5
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %46) #5
  br label %48

48:                                               ; preds = %37, %38, %45
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #5
  %49 = add i64 %0, 15
  %50 = and i64 %49, -8
  %51 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %32, i64 0, i32 4
  %52 = load i64, i64* %51, align 8
  %53 = icmp ult i64 %52, %50
  br i1 %53, label %86, label %54, !prof !2

54:                                               ; preds = %48
  %55 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %32, i64 0, i32 3
  %56 = load i8*, i8** %55, align 8
  %57 = getelementptr inbounds i8, i8* %56, i64 %50
  store i8* %57, i8** %55, align 8
  %58 = sub i64 %52, %50
  store i64 %58, i64* %51, align 8
  %59 = bitcast i8* %56 to i32*
  store i32 0, i32* %59, align 4
  %60 = getelementptr inbounds i8, i8* %56, i64 4
  %61 = bitcast i8* %60 to i16*
  %62 = trunc i32 %29 to i16
  %63 = shl i16 %62, 2
  store atomic i16 %63, i16* %61 monotonic, align 2
  %64 = lshr exact i64 %50, 1
  %65 = trunc i64 %64 to i16
  %66 = getelementptr inbounds i8, i8* %56, i64 6
  %67 = bitcast i8* %66 to i16*
  store i16 %65, i16* %67, align 2
  %68 = ptrtoint i8* %56 to i64
  %69 = and i64 %68, -131072
  %70 = inttoptr i64 %69 to i8*
  %71 = getelementptr inbounds i8, i8* %70, i64 4400
  %72 = bitcast i8* %71 to %"class.blink::PlatformAwareObjectStartBitmap"*
  %73 = bitcast i8* %71 to i64*
  %74 = load i64, i64* %73, align 16
  %75 = sub i64 %68, %74
  %76 = lshr i64 %75, 3
  %77 = lshr i64 %75, 6
  %78 = getelementptr inbounds %"class.blink::PlatformAwareObjectStartBitmap", %"class.blink::PlatformAwareObjectStartBitmap"* %72, i64 0, i32 0, i32 1, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = trunc i64 %76 to i32
  %81 = and i32 %80, 7
  %82 = shl i32 1, %81
  %83 = trunc i32 %82 to i8
  %84 = or i8 %79, %83
  store atomic i8 %84, i8* %78 release, align 1
  %85 = getelementptr inbounds i8, i8* %56, i64 8
  br label %89

86:                                               ; preds = %48
  %87 = zext i32 %29 to i64
  %88 = call i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"* %32, i64 %50, i64 %87) #5
  br label %89

89:                                               ; preds = %54, %86
  %90 = phi i8* [ %85, %54 ], [ %88, %86 ]
  ret i8* %90
}

declare i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64, i8*) local_unnamed_addr #2

declare i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"*) local_unnamed_addr #2

declare void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"*, i8*) local_unnamed_addr #2

declare i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"*, i64, i64) local_unnamed_addr #2

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #4

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_15ScriptWrappableEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::ScriptWrappable"*
  %4 = bitcast i8* %1 to void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)***
  %5 = load void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)**, void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)*, void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)** %5, i64 5
  %7 = load void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)*, void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)** %6, align 8
  tail call void %7(%"class.blink::ScriptWrappable"* %3, %"class.blink::Visitor"* %0) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8internal14FinalizerTraitINS_15ScriptWrappableEE8FinalizeEPv(i8*) #0 comdat align 2 {
  %2 = bitcast i8* %0 to %"class.blink::ScriptWrappable"*
  %3 = bitcast i8* %0 to void (%"class.blink::ScriptWrappable"*)***
  %4 = load void (%"class.blink::ScriptWrappable"*)**, void (%"class.blink::ScriptWrappable"*)*** %3, align 8
  %5 = getelementptr inbounds void (%"class.blink::ScriptWrappable"*)*, void (%"class.blink::ScriptWrappable"*)** %4, i64 1
  %6 = load void (%"class.blink::ScriptWrappable"*)*, void (%"class.blink::ScriptWrappable"*)** %5, align 8
  tail call void %6(%"class.blink::ScriptWrappable"* %2) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_15ScriptWrappableEE7GetNameEPKv(i8*) #0 comdat align 2 {
  %2 = bitcast i8* %0 to %"class.blink::NameClient"*
  %3 = bitcast i8* %0 to i8* (%"class.blink::NameClient"*)***
  %4 = load i8* (%"class.blink::NameClient"*)**, i8* (%"class.blink::NameClient"*)*** %3, align 8
  %5 = load i8* (%"class.blink::NameClient"*)*, i8* (%"class.blink::NameClient"*)** %4, align 8
  %6 = tail call i8* %5(%"class.blink::NameClient"* %2) #5
  %7 = insertvalue { i8*, i8 } undef, i8* %6, 0
  %8 = insertvalue { i8*, i8 } %7, i8 0, 1
  ret { i8*, i8 } %8
}

declare i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"*, %"struct.blink::GCInfo"*, %"struct.std::__1::atomic.183"*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
