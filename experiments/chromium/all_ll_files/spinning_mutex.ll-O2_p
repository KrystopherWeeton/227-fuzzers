; ModuleID = '../../base/allocator/partition_allocator/spinning_mutex.cc'
source_filename = "../../base/allocator/partition_allocator/spinning_mutex.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.base::internal::SpinningMutex" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }

@.str = private unnamed_addr constant [90 x i8] c"../../base/allocator/partition_allocator/spinning_mutex.cc(60) Check failed: retval != -1\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal13SpinningMutex9FutexWaitEv(%"class.base::internal::SpinningMutex"*) local_unnamed_addr #0 align 2 {
  %2 = tail call i32* @__errno_location() #4
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds %"class.base::internal::SpinningMutex", %"class.base::internal::SpinningMutex"* %0, i64 0, i32 0
  %5 = tail call i64 (i64, ...) @syscall(i64 202, %"struct.std::__1::atomic"* %4, i32 128, i32 2, i8* null, i8* null, i32 0) #5
  store i32 %3, i32* %2, align 4
  ret void
}

; Function Attrs: nounwind readnone
declare i32* @__errno_location() local_unnamed_addr #1

; Function Attrs: nounwind
declare i64 @syscall(i64, ...) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal13SpinningMutex9FutexWakeEv(%"class.base::internal::SpinningMutex"*) local_unnamed_addr #0 align 2 {
  %2 = tail call i32* @__errno_location() #4
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds %"class.base::internal::SpinningMutex", %"class.base::internal::SpinningMutex"* %0, i64 0, i32 0
  %5 = tail call i64 (i64, ...) @syscall(i64 202, %"struct.std::__1::atomic"* %4, i32 129, i32 1, i8* null, i8* null, i32 0) #5
  %6 = icmp eq i64 %5, -1
  br i1 %6, label %7, label %8, !prof !2

7:                                                ; preds = %1
  tail call void @_ZN7logging8RawCheckEPKc(i8* getelementptr inbounds ([90 x i8], [90 x i8]* @.str, i64 0, i64 0)) #5
  br label %8

8:                                                ; preds = %1, %7
  store i32 %3, i32* %2, align 4
  ret void
}

declare void @_ZN7logging8RawCheckEPKc(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal13SpinningMutex8LockSlowEv(%"class.base::internal::SpinningMutex"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::SpinningMutex", %"class.base::internal::SpinningMutex"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = atomicrmw xchg i32* %2, i32 2 acquire
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %13, label %5

5:                                                ; preds = %1
  %6 = tail call i32* @__errno_location() #4
  %7 = getelementptr inbounds %"class.base::internal::SpinningMutex", %"class.base::internal::SpinningMutex"* %0, i64 0, i32 0
  br label %8

8:                                                ; preds = %5, %8
  %9 = load i32, i32* %6, align 4
  %10 = tail call i64 (i64, ...) @syscall(i64 202, %"struct.std::__1::atomic"* %7, i32 128, i32 2, i8* null, i8* null, i32 0) #5
  store i32 %9, i32* %6, align 4
  %11 = atomicrmw xchg i32* %2, i32 2 acquire
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %8

13:                                               ; preds = %8, %1
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
