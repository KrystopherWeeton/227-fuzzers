; ModuleID = '../../third_party/pdfium/fxbarcode/oned/BC_OnedEAN13Writer.cpp'
source_filename = "../../third_party/pdfium/fxbarcode/oned/BC_OnedEAN13Writer.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CBC_OnedEAN13Writer = type { %class.CBC_OneDimEANWriter.base, i32 }
%class.CBC_OneDimEANWriter.base = type { %class.CBC_OneDimWriter.base }
%class.CBC_OneDimWriter.base = type <{ %class.CBC_Writer.base, i8, i8, i8, i8, [6 x i8], %"class.fxcrt::UnownedPtr", float, i32, i32, i8, [3 x i8], i32, [4 x i8], i64, %"class.std::__1::vector", i32, i32, float }>
%class.CBC_Writer.base = type <{ i32 (...)**, i32, i32, i32, i32, i32, i16 }>
%"class.fxcrt::UnownedPtr" = type { %class.CFX_Font* }
%class.CFX_Font = type opaque
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %class.CFX_PathData*, %class.CFX_PathData*, %"class.std::__1::__compressed_pair" }
%class.CFX_PathData = type opaque
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.CFX_PathData* }
%class.CBC_OneDimEANWriter = type { %class.CBC_OneDimWriter.base, [4 x i8] }
%"class.fxcrt::StringViewTemplate" = type { %"class.pdfium::span" }
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr.1", i64 }
%"class.fxcrt::UnownedPtr.1" = type { i32* }
%"class.fxcrt::WideString" = type { %"class.fxcrt::RetainPtr" }
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.fxcrt::StringDataTemplate"* }
%"class.fxcrt::StringDataTemplate" = type <{ i64, i64, i64, [1 x i32], [4 x i8] }>
%"class.fxcrt::ByteString" = type { %"class.fxcrt::RetainPtr.5" }
%"class.fxcrt::RetainPtr.5" = type { %"class.std::__1::unique_ptr.6" }
%"class.std::__1::unique_ptr.6" = type { %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"class.fxcrt::StringDataTemplate.9"* }
%"class.fxcrt::StringDataTemplate.9" = type <{ i64, i64, i64, [1 x i8], [7 x i8] }>
%class.CBC_OneDimWriter = type <{ %class.CBC_Writer.base, i8, i8, i8, i8, [6 x i8], %"class.fxcrt::UnownedPtr", float, i32, i32, i8, [3 x i8], i32, [4 x i8], i64, %"class.std::__1::vector", i32, i32, float, [4 x i8] }>
%class.CFX_RenderDevice = type { i32 (...)**, %"class.fxcrt::RetainPtr.17", i32, i32, i32, i32, i8, %struct.FX_RECT, %"class.std::__1::unique_ptr.23" }
%"class.fxcrt::RetainPtr.17" = type { %"class.std::__1::unique_ptr.18" }
%"class.std::__1::unique_ptr.18" = type { %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %class.CFX_DIBitmap* }
%class.CFX_DIBitmap = type opaque
%struct.FX_RECT = type { i32, i32, i32, i32 }
%"class.std::__1::unique_ptr.23" = type { %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %class.RenderDeviceDriverIface* }
%class.RenderDeviceDriverIface = type { i32 (...)** }
%class.CFX_Matrix = type { float, float, float, float, float, float }
%"class.std::__1::vector.27" = type { %"class.std::__1::__vector_base.28" }
%"class.std::__1::__vector_base.28" = type { %class.TextCharPos*, %class.TextCharPos*, %"class.std::__1::__compressed_pair.29" }
%class.TextCharPos = type { %class.CFX_PTemplate, i32, i32, i32, i32, i8, i8, [4 x float] }
%class.CFX_PTemplate = type { float, float }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %class.TextCharPos* }
%class.CFX_FloatRect = type { float, float, float, float }
%struct.CFX_TextRenderOptions = type <{ i32, i8, i8, [2 x i8] }>
%"class.std::__1::__vector_base_common" = type { i8 }
%class.CBC_Writer = type <{ i32 (...)**, i32, i32, i32, i32, i32, i16, [2 x i8] }>

@_ZTV19CBC_OnedEAN13Writer = hidden unnamed_addr constant { [28 x i8*] } { [28 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.CBC_OnedEAN13Writer*)* @_ZN19CBC_OnedEAN13WriterD2Ev to i8*), i8* bitcast (void (%class.CBC_OnedEAN13Writer*)* @_ZN19CBC_OnedEAN13WriterD0Ev to i8*), i8* bitcast (i1 (%class.CBC_Writer*, i32)* @_ZN10CBC_Writer15SetCharEncodingEi to i8*), i8* bitcast (i1 (%class.CBC_Writer*, i32)* @_ZN10CBC_Writer15SetModuleHeightEi to i8*), i8* bitcast (i1 (%class.CBC_Writer*, i32)* @_ZN10CBC_Writer14SetModuleWidthEi to i8*), i8* bitcast (i1 (%class.CBC_Writer*, i32)* @_ZN10CBC_Writer9SetHeightEi to i8*), i8* bitcast (i1 (%class.CBC_Writer*, i32)* @_ZN10CBC_Writer8SetWidthEi to i8*), i8* bitcast (i1 (%class.CBC_Writer*, i8)* @_ZN10CBC_Writer15SetTextLocationE11BC_TEXT_LOC to i8*), i8* bitcast (i1 (%class.CBC_Writer*, i8)* @_ZN10CBC_Writer18SetWideNarrowRatioEa to i8*), i8* bitcast (i1 (%class.CBC_Writer*, i8)* @_ZN10CBC_Writer12SetStartCharEc to i8*), i8* bitcast (i1 (%class.CBC_Writer*, i8)* @_ZN10CBC_Writer10SetEndCharEc to i8*), i8* bitcast (i1 (%class.CBC_Writer*, i32)* @_ZN10CBC_Writer23SetErrorCorrectionLevelEi to i8*), i8* bitcast (i1 (%class.CBC_OneDimWriter*, %"class.fxcrt::StringViewTemplate"*, i8*, i32)* @_ZN16CBC_OneDimWriter12RenderResultEN5fxcrt18StringViewTemplateIwEEPhi to i8*), i8* bitcast (i1 (%class.CBC_OnedEAN13Writer*, %"class.fxcrt::StringViewTemplate"*)* @_ZN19CBC_OnedEAN13Writer20CheckContentValidityEN5fxcrt18StringViewTemplateIwEE to i8*), i8* bitcast (void (%"class.fxcrt::WideString"*, %class.CBC_OnedEAN13Writer*, %"class.fxcrt::StringViewTemplate"*)* @_ZN19CBC_OnedEAN13Writer14FilterContentsEN5fxcrt18StringViewTemplateIwEE to i8*), i8* bitcast (void (%class.CBC_OneDimWriter*, i1)* @_ZN16CBC_OneDimWriter16SetPrintChecksumEb to i8*), i8* bitcast (void (%class.CBC_OneDimWriter*, i32)* @_ZN16CBC_OneDimWriter13SetDataLengthEi to i8*), i8* bitcast (void (%class.CBC_OneDimWriter*, i1)* @_ZN16CBC_OneDimWriter15SetCalcChecksumEb to i8*), i8* bitcast (void (%class.CBC_OneDimWriter*, float)* @_ZN16CBC_OneDimWriter11SetFontSizeEf to i8*), i8* bitcast (void (%class.CBC_OneDimWriter*, i32)* @_ZN16CBC_OneDimWriter12SetFontStyleEi to i8*), i8* bitcast (void (%class.CBC_OneDimWriter*, i32)* @_ZN16CBC_OneDimWriter12SetFontColorEj to i8*), i8* bitcast (i8* (%class.CBC_OnedEAN13Writer*, %"class.fxcrt::ByteString"*, i32, i32*, i32*, i32)* @_ZN19CBC_OnedEAN13Writer14EncodeWithHintERKN5fxcrt10ByteStringE8BCFORMATRiS5_i to i8*), i8* bitcast (i8* (%class.CBC_OnedEAN13Writer*, %"class.fxcrt::ByteString"*, i32*)* @_ZN19CBC_OnedEAN13Writer10EncodeImplERKN5fxcrt10ByteStringERi to i8*), i8* bitcast (i1 (%class.CBC_OnedEAN13Writer*, %"class.fxcrt::StringViewTemplate"*, %class.CFX_RenderDevice*, %class.CFX_Matrix*, i32, i32)* @_ZN19CBC_OnedEAN13Writer9ShowCharsEN5fxcrt18StringViewTemplateIwEEP16CFX_RenderDeviceRK10CFX_Matrixii to i8*), i8* bitcast (void (%class.CBC_OneDimEANWriter*)* @_ZN19CBC_OneDimEANWriter13InitEANWriterEv to i8*), i8* bitcast (i32 (%class.CBC_OnedEAN13Writer*, %"class.fxcrt::ByteString"*)* @_ZN19CBC_OnedEAN13Writer12CalcChecksumERKN5fxcrt10ByteStringE to i8*)] }, align 8
@_ZN12_GLOBAL__N_120kFirstDigitEncodingsE = internal unnamed_addr constant [10 x i8] c"\00\0B\0D\0E\13\19\1C\15\16\1A", align 1
@_ZN12_GLOBAL__N_122kOnedEAN13StartPatternE = internal constant [3 x i8] c"\01\01\01", align 1
@_ZN12_GLOBAL__N_116L_AND_G_PATTERNSE = internal constant [20 x [4 x i8]] [[4 x i8] c"\03\02\01\01", [4 x i8] c"\02\02\02\01", [4 x i8] c"\02\01\02\02", [4 x i8] c"\01\04\01\01", [4 x i8] c"\01\01\03\02", [4 x i8] c"\01\02\03\01", [4 x i8] c"\01\01\01\04", [4 x i8] c"\01\03\01\02", [4 x i8] c"\01\02\01\03", [4 x i8] c"\03\01\01\02", [4 x i8] c"\01\01\02\03", [4 x i8] c"\01\02\02\02", [4 x i8] c"\02\02\01\02", [4 x i8] c"\01\01\04\01", [4 x i8] c"\02\03\01\01", [4 x i8] c"\01\03\02\01", [4 x i8] c"\04\01\01\01", [4 x i8] c"\02\01\03\01", [4 x i8] c"\03\01\02\01", [4 x i8] c"\02\01\01\03"], align 16
@_ZN12_GLOBAL__N_123kOnedEAN13MiddlePatternE = internal constant [5 x i8] c"\01\01\01\01\01", align 1
@_ZN12_GLOBAL__N_118kOnedEAN13LPatternE = internal constant [10 x [4 x i8]] [[4 x i8] c"\03\02\01\01", [4 x i8] c"\02\02\02\01", [4 x i8] c"\02\01\02\02", [4 x i8] c"\01\04\01\01", [4 x i8] c"\01\01\03\02", [4 x i8] c"\01\02\03\01", [4 x i8] c"\01\01\01\04", [4 x i8] c"\01\03\01\02", [4 x i8] c"\01\02\01\03", [4 x i8] c"\03\01\01\02"], align 16

@_ZN19CBC_OnedEAN13WriterC1Ev = hidden unnamed_addr alias void (%class.CBC_OnedEAN13Writer*), void (%class.CBC_OnedEAN13Writer*)* @_ZN19CBC_OnedEAN13WriterC2Ev
@_ZN19CBC_OnedEAN13WriterD1Ev = hidden unnamed_addr alias void (%class.CBC_OnedEAN13Writer*), void (%class.CBC_OnedEAN13Writer*)* @_ZN19CBC_OnedEAN13WriterD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN19CBC_OnedEAN13WriterC2Ev(%class.CBC_OnedEAN13Writer*) unnamed_addr #0 align 2 {
  %2 = bitcast %class.CBC_OnedEAN13Writer* %0 to %class.CBC_OneDimEANWriter*
  tail call void @_ZN19CBC_OneDimEANWriterC2Ev(%class.CBC_OneDimEANWriter* %2) #8
  %3 = getelementptr inbounds %class.CBC_OnedEAN13Writer, %class.CBC_OnedEAN13Writer* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTV19CBC_OnedEAN13Writer, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %class.CBC_OnedEAN13Writer, %class.CBC_OnedEAN13Writer* %0, i64 0, i32 0, i32 0, i32 3
  store i8 1, i8* %4, align 8
  %5 = getelementptr inbounds %class.CBC_OnedEAN13Writer, %class.CBC_OnedEAN13Writer* %0, i64 0, i32 1
  store i32 95, i32* %5, align 4
  ret void
}

declare void @_ZN19CBC_OneDimEANWriterC2Ev(%class.CBC_OneDimEANWriter*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN19CBC_OneDimEANWriterD2Ev(%class.CBC_OneDimEANWriter*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN19CBC_OnedEAN13WriterD2Ev(%class.CBC_OnedEAN13Writer*) unnamed_addr #0 align 2 {
  %2 = bitcast %class.CBC_OnedEAN13Writer* %0 to %class.CBC_OneDimEANWriter*
  tail call void @_ZN19CBC_OneDimEANWriterD2Ev(%class.CBC_OneDimEANWriter* %2) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN19CBC_OnedEAN13WriterD0Ev(%class.CBC_OnedEAN13Writer*) unnamed_addr #0 align 2 {
  %2 = bitcast %class.CBC_OnedEAN13Writer* %0 to %class.CBC_OneDimEANWriter*
  tail call void @_ZN19CBC_OneDimEANWriterD2Ev(%class.CBC_OneDimEANWriter* %2) #8
  %3 = bitcast %class.CBC_OnedEAN13Writer* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #9
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN19CBC_OnedEAN13Writer20CheckContentValidityEN5fxcrt18StringViewTemplateIwEE(%class.CBC_OnedEAN13Writer* nocapture readnone, %"class.fxcrt::StringViewTemplate"* nocapture readonly) unnamed_addr #0 align 2 {
  %3 = alloca %"class.fxcrt::StringViewTemplate", align 8
  %4 = bitcast %"class.fxcrt::StringViewTemplate"* %3 to i8*
  %5 = bitcast %"class.fxcrt::StringViewTemplate"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %4, i8* align 8 %5, i64 16, i1 false)
  %6 = call zeroext i1 @_ZN16CBC_OneDimWriter19HasValidContentSizeEN5fxcrt18StringViewTemplateIwEE(%"class.fxcrt::StringViewTemplate"* nonnull %3) #8
  br i1 %6, label %7, label %24

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.fxcrt::StringViewTemplate", %"class.fxcrt::StringViewTemplate"* %1, i64 0, i32 0, i32 0, i32 0
  %9 = load i32*, i32** %8, align 8
  %10 = getelementptr inbounds %"class.fxcrt::StringViewTemplate", %"class.fxcrt::StringViewTemplate"* %1, i64 0, i32 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds i32, i32* %9, i64 %11
  %13 = icmp eq i64 %11, 0
  br i1 %13, label %24, label %16

14:                                               ; preds = %20
  %15 = icmp eq i32* %23, %12
  br i1 %15, label %24, label %16

16:                                               ; preds = %7, %14
  %17 = phi i32* [ %23, %14 ], [ %9, %7 ]
  %18 = load i32, i32* %17, align 4
  %19 = icmp ugt i32 %18, 127
  br i1 %19, label %24, label %20

20:                                               ; preds = %16
  %21 = call i32 @iswdigit(i32 %18) #8
  %22 = icmp eq i32 %21, 0
  %23 = getelementptr inbounds i32, i32* %17, i64 1
  br i1 %22, label %24, label %14

24:                                               ; preds = %20, %16, %14, %7, %2
  %25 = phi i1 [ false, %2 ], [ true, %7 ], [ true, %14 ], [ false, %16 ], [ false, %20 ]
  ret i1 %25
}

declare zeroext i1 @_ZN16CBC_OneDimWriter19HasValidContentSizeEN5fxcrt18StringViewTemplateIwEE(%"class.fxcrt::StringViewTemplate"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN19CBC_OnedEAN13Writer14FilterContentsEN5fxcrt18StringViewTemplateIwEE(%"class.fxcrt::WideString"* noalias sret, %class.CBC_OnedEAN13Writer* nocapture readnone, %"class.fxcrt::StringViewTemplate"* nocapture readonly) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.fxcrt::WideString", %"class.fxcrt::WideString"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store %"class.fxcrt::StringDataTemplate"* inttoptr (i64 -6148914691236517206 to %"class.fxcrt::StringDataTemplate"*), %"class.fxcrt::StringDataTemplate"** %4, align 8
  tail call void @_ZN5fxcrt10WideStringC1Ev(%"class.fxcrt::WideString"* %0) #8
  %5 = getelementptr inbounds %"class.fxcrt::StringViewTemplate", %"class.fxcrt::StringViewTemplate"* %2, i64 0, i32 0, i32 1
  %6 = load i64, i64* %5, align 8
  tail call void @_ZN5fxcrt10WideString7ReserveEm(%"class.fxcrt::WideString"* %0, i64 %6) #8
  %7 = load i64, i64* %5, align 8
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %31, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.fxcrt::StringViewTemplate", %"class.fxcrt::StringViewTemplate"* %2, i64 0, i32 0, i32 0, i32 0
  br label %11

11:                                               ; preds = %9, %26
  %12 = phi i64 [ 0, %9 ], [ %28, %26 ]
  %13 = load i32*, i32** %10, align 8
  %14 = getelementptr inbounds i32, i32* %13, i64 %12
  %15 = load i32, i32* %14, align 4
  %16 = icmp sgt i32 %15, 175
  br i1 %16, label %17, label %19

17:                                               ; preds = %11
  %18 = add nuw i64 %12, 1
  br label %26

19:                                               ; preds = %11
  %20 = icmp ugt i32 %15, 127
  br i1 %20, label %26, label %21

21:                                               ; preds = %19
  %22 = tail call i32 @iswdigit(i32 %15) #8
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %26, label %24

24:                                               ; preds = %21
  %25 = tail call dereferenceable(8) %"class.fxcrt::WideString"* @_ZN5fxcrt10WideStringpLEw(%"class.fxcrt::WideString"* %0, i32 signext %15) #8
  br label %26

26:                                               ; preds = %21, %19, %24, %17
  %27 = phi i64 [ %18, %17 ], [ %12, %24 ], [ %12, %21 ], [ %12, %19 ]
  %28 = add i64 %27, 1
  %29 = load i64, i64* %5, align 8
  %30 = icmp ult i64 %28, %29
  br i1 %30, label %11, label %31

31:                                               ; preds = %26, %3
  ret void
}

declare void @_ZN5fxcrt10WideStringC1Ev(%"class.fxcrt::WideString"*) unnamed_addr #1

declare void @_ZN5fxcrt10WideString7ReserveEm(%"class.fxcrt::WideString"*, i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

declare dereferenceable(8) %"class.fxcrt::WideString"* @_ZN5fxcrt10WideStringpLEw(%"class.fxcrt::WideString"*, i32 signext) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN19CBC_OnedEAN13Writer12CalcChecksumERKN5fxcrt10ByteStringE(%class.CBC_OnedEAN13Writer* nocapture readnone, %"class.fxcrt::ByteString"* dereferenceable(8)) unnamed_addr #0 align 2 {
  %3 = tail call i32 @_Z15EANCalcChecksumRKN5fxcrt10ByteStringE(%"class.fxcrt::ByteString"* dereferenceable(8) %1) #8
  ret i32 %3
}

declare i32 @_Z15EANCalcChecksumRKN5fxcrt10ByteStringE(%"class.fxcrt::ByteString"* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZN19CBC_OnedEAN13Writer14EncodeWithHintERKN5fxcrt10ByteStringE8BCFORMATRiS5_i(%class.CBC_OnedEAN13Writer*, %"class.fxcrt::ByteString"* dereferenceable(8), i32, i32* dereferenceable(4), i32* dereferenceable(4), i32) unnamed_addr #0 align 2 {
  %7 = icmp eq i32 %2, 7
  br i1 %7, label %8, label %11

8:                                                ; preds = %6
  %9 = bitcast %class.CBC_OnedEAN13Writer* %0 to %class.CBC_OneDimWriter*
  %10 = tail call i8* @_ZN16CBC_OneDimWriter14EncodeWithHintERKN5fxcrt10ByteStringE8BCFORMATRiS5_i(%class.CBC_OneDimWriter* %9, %"class.fxcrt::ByteString"* dereferenceable(8) %1, i32 7, i32* dereferenceable(4) %3, i32* dereferenceable(4) %4, i32 %5) #8
  br label %11

11:                                               ; preds = %6, %8
  %12 = phi i8* [ %10, %8 ], [ null, %6 ]
  ret i8* %12
}

declare i8* @_ZN16CBC_OneDimWriter14EncodeWithHintERKN5fxcrt10ByteStringE8BCFORMATRiS5_i(%class.CBC_OneDimWriter*, %"class.fxcrt::ByteString"* dereferenceable(8), i32, i32* dereferenceable(4), i32* dereferenceable(4), i32) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZN19CBC_OnedEAN13Writer10EncodeImplERKN5fxcrt10ByteStringERi(%class.CBC_OnedEAN13Writer*, %"class.fxcrt::ByteString"* nocapture readonly dereferenceable(8), i32* nocapture dereferenceable(4)) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.fxcrt::ByteString", %"class.fxcrt::ByteString"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %5 = load %"class.fxcrt::StringDataTemplate.9"*, %"class.fxcrt::StringDataTemplate.9"** %4, align 8
  %6 = icmp eq %"class.fxcrt::StringDataTemplate.9"* %5, null
  br i1 %6, label %103, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.9", %"class.fxcrt::StringDataTemplate.9"* %5, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq i64 %9, 13
  br i1 %10, label %11, label %103

11:                                               ; preds = %7
  %12 = bitcast %class.CBC_OnedEAN13Writer* %0 to %class.CBC_OneDimWriter*
  %13 = getelementptr inbounds %class.CBC_OnedEAN13Writer, %class.CBC_OnedEAN13Writer* %0, i64 0, i32 0, i32 0, i32 12
  store i32 13, i32* %13, align 8
  %14 = load %"class.fxcrt::StringDataTemplate.9"*, %"class.fxcrt::StringDataTemplate.9"** %4, align 8
  %15 = icmp eq %"class.fxcrt::StringDataTemplate.9"* %14, null
  br i1 %15, label %24, label %16

16:                                               ; preds = %11
  %17 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.9", %"class.fxcrt::StringDataTemplate.9"* %14, i64 0, i32 1
  %18 = load i64, i64* %17, align 8
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %24, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.9", %"class.fxcrt::StringDataTemplate.9"* %14, i64 0, i32 3, i64 0
  %22 = load i8, i8* %21, align 1
  %23 = icmp slt i8 %22, 0
  br i1 %23, label %31, label %24

24:                                               ; preds = %11, %16, %20
  %25 = phi i8 [ %22, %20 ], [ 0, %16 ], [ 0, %11 ]
  %26 = sext i8 %25 to i32
  %27 = add nsw i32 %26, -48
  %28 = icmp ult i32 %27, 10
  %29 = select i1 %28, i32 %27, i32 0
  %30 = sext i32 %29 to i64
  br label %31

31:                                               ; preds = %20, %24
  %32 = phi i64 [ %30, %24 ], [ 0, %20 ]
  %33 = getelementptr inbounds [10 x i8], [10 x i8]* @_ZN12_GLOBAL__N_120kFirstDigitEncodingsE, i64 0, i64 %32
  %34 = load i8, i8* %33, align 1
  %35 = sext i8 %34 to i32
  %36 = getelementptr inbounds %class.CBC_OnedEAN13Writer, %class.CBC_OnedEAN13Writer* %0, i64 0, i32 1
  %37 = load i32, i32* %36, align 4
  store i32 %37, i32* %2, align 4
  %38 = load i32, i32* %36, align 4
  %39 = sext i32 %38 to i64
  %40 = tail call i8* @_ZN6pdfium8internal11CallocOrDieEmm(i64 %39, i64 1) #8
  %41 = tail call i32 @_ZN16CBC_OneDimWriter13AppendPatternEPhiPKaib(%class.CBC_OneDimWriter* %12, i8* %40, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @_ZN12_GLOBAL__N_122kOnedEAN13StartPatternE, i64 0, i64 0), i32 3, i1 zeroext true) #8
  br label %42

42:                                               ; preds = %61, %31
  %43 = phi i64 [ 1, %31 ], [ %74, %61 ]
  %44 = phi i32 [ %41, %31 ], [ %73, %61 ]
  %45 = load %"class.fxcrt::StringDataTemplate.9"*, %"class.fxcrt::StringDataTemplate.9"** %4, align 8
  %46 = icmp eq %"class.fxcrt::StringDataTemplate.9"* %45, null
  br i1 %46, label %51, label %47

47:                                               ; preds = %42
  %48 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.9", %"class.fxcrt::StringDataTemplate.9"* %45, i64 0, i32 1
  %49 = load i64, i64* %48, align 8
  %50 = icmp ugt i64 %49, %43
  br i1 %50, label %52, label %51, !prof !2

51:                                               ; preds = %47, %42
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #8, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #8, !srcloc !4
  unreachable

52:                                               ; preds = %47
  %53 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.9", %"class.fxcrt::StringDataTemplate.9"* %45, i64 0, i32 3, i64 %43
  %54 = load i8, i8* %53, align 1
  %55 = icmp slt i8 %54, 0
  br i1 %55, label %61, label %56

56:                                               ; preds = %52
  %57 = sext i8 %54 to i32
  %58 = add nsw i32 %57, -48
  %59 = icmp ult i32 %58, 10
  %60 = select i1 %59, i32 %58, i32 0
  br label %61

61:                                               ; preds = %52, %56
  %62 = phi i32 [ %60, %56 ], [ 0, %52 ]
  %63 = trunc i64 %43 to i32
  %64 = sub i32 6, %63
  %65 = shl i32 1, %64
  %66 = and i32 %65, %35
  %67 = icmp eq i32 %66, 0
  %68 = add nuw nsw i32 %62, 10
  %69 = select i1 %67, i32 %62, i32 %68
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds [20 x [4 x i8]], [20 x [4 x i8]]* @_ZN12_GLOBAL__N_116L_AND_G_PATTERNSE, i64 0, i64 %70, i64 0
  %72 = tail call i32 @_ZN16CBC_OneDimWriter13AppendPatternEPhiPKaib(%class.CBC_OneDimWriter* %12, i8* %40, i32 %44, i8* %71, i32 4, i1 zeroext false) #8
  %73 = add nsw i32 %72, %44
  %74 = add nuw nsw i64 %43, 1
  %75 = icmp eq i64 %74, 7
  br i1 %75, label %76, label %42

76:                                               ; preds = %61
  %77 = tail call i32 @_ZN16CBC_OneDimWriter13AppendPatternEPhiPKaib(%class.CBC_OneDimWriter* %12, i8* %40, i32 %73, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @_ZN12_GLOBAL__N_123kOnedEAN13MiddlePatternE, i64 0, i64 0), i32 5, i1 zeroext false) #8
  %78 = add nsw i32 %77, %73
  %79 = load %"class.fxcrt::StringDataTemplate.9"*, %"class.fxcrt::StringDataTemplate.9"** %4, align 8
  %80 = icmp eq %"class.fxcrt::StringDataTemplate.9"* %79, null
  br i1 %80, label %85, label %81

81:                                               ; preds = %76
  %82 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.9", %"class.fxcrt::StringDataTemplate.9"* %79, i64 0, i32 1
  %83 = load i64, i64* %82, align 8
  %84 = icmp ugt i64 %83, 7
  br i1 %84, label %86, label %85, !prof !2

85:                                               ; preds = %189, %182, %168, %161, %147, %140, %126, %119, %105, %96, %81, %76
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #8, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #8, !srcloc !4
  unreachable

86:                                               ; preds = %81
  %87 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.9", %"class.fxcrt::StringDataTemplate.9"* %79, i64 0, i32 3, i64 7
  %88 = load i8, i8* %87, align 1
  %89 = icmp slt i8 %88, 0
  br i1 %89, label %96, label %90

90:                                               ; preds = %86
  %91 = sext i8 %88 to i32
  %92 = add nsw i32 %91, -48
  %93 = icmp ult i32 %92, 10
  %94 = select i1 %93, i32 %92, i32 0
  %95 = sext i32 %94 to i64
  br label %96

96:                                               ; preds = %86, %90
  %97 = phi i64 [ %95, %90 ], [ 0, %86 ]
  %98 = getelementptr inbounds [10 x [4 x i8]], [10 x [4 x i8]]* @_ZN12_GLOBAL__N_118kOnedEAN13LPatternE, i64 0, i64 %97, i64 0
  %99 = tail call i32 @_ZN16CBC_OneDimWriter13AppendPatternEPhiPKaib(%class.CBC_OneDimWriter* %12, i8* %40, i32 %78, i8* %98, i32 4, i1 zeroext true) #8
  %100 = add nsw i32 %99, %78
  %101 = load %"class.fxcrt::StringDataTemplate.9"*, %"class.fxcrt::StringDataTemplate.9"** %4, align 8
  %102 = icmp eq %"class.fxcrt::StringDataTemplate.9"* %101, null
  br i1 %102, label %85, label %105

103:                                              ; preds = %3, %7, %203
  %104 = phi i8* [ %40, %203 ], [ null, %7 ], [ null, %3 ]
  ret i8* %104

105:                                              ; preds = %96
  %106 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.9", %"class.fxcrt::StringDataTemplate.9"* %101, i64 0, i32 1
  %107 = load i64, i64* %106, align 8
  %108 = icmp ugt i64 %107, 8
  br i1 %108, label %109, label %85, !prof !2

109:                                              ; preds = %105
  %110 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.9", %"class.fxcrt::StringDataTemplate.9"* %101, i64 0, i32 3, i64 8
  %111 = load i8, i8* %110, align 1
  %112 = icmp slt i8 %111, 0
  br i1 %112, label %119, label %113

113:                                              ; preds = %109
  %114 = sext i8 %111 to i32
  %115 = add nsw i32 %114, -48
  %116 = icmp ult i32 %115, 10
  %117 = select i1 %116, i32 %115, i32 0
  %118 = sext i32 %117 to i64
  br label %119

119:                                              ; preds = %113, %109
  %120 = phi i64 [ %118, %113 ], [ 0, %109 ]
  %121 = getelementptr inbounds [10 x [4 x i8]], [10 x [4 x i8]]* @_ZN12_GLOBAL__N_118kOnedEAN13LPatternE, i64 0, i64 %120, i64 0
  %122 = tail call i32 @_ZN16CBC_OneDimWriter13AppendPatternEPhiPKaib(%class.CBC_OneDimWriter* %12, i8* %40, i32 %100, i8* %121, i32 4, i1 zeroext true) #8
  %123 = add nsw i32 %122, %100
  %124 = load %"class.fxcrt::StringDataTemplate.9"*, %"class.fxcrt::StringDataTemplate.9"** %4, align 8
  %125 = icmp eq %"class.fxcrt::StringDataTemplate.9"* %124, null
  br i1 %125, label %85, label %126

126:                                              ; preds = %119
  %127 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.9", %"class.fxcrt::StringDataTemplate.9"* %124, i64 0, i32 1
  %128 = load i64, i64* %127, align 8
  %129 = icmp ugt i64 %128, 9
  br i1 %129, label %130, label %85, !prof !2

130:                                              ; preds = %126
  %131 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.9", %"class.fxcrt::StringDataTemplate.9"* %124, i64 0, i32 3, i64 9
  %132 = load i8, i8* %131, align 1
  %133 = icmp slt i8 %132, 0
  br i1 %133, label %140, label %134

134:                                              ; preds = %130
  %135 = sext i8 %132 to i32
  %136 = add nsw i32 %135, -48
  %137 = icmp ult i32 %136, 10
  %138 = select i1 %137, i32 %136, i32 0
  %139 = sext i32 %138 to i64
  br label %140

140:                                              ; preds = %134, %130
  %141 = phi i64 [ %139, %134 ], [ 0, %130 ]
  %142 = getelementptr inbounds [10 x [4 x i8]], [10 x [4 x i8]]* @_ZN12_GLOBAL__N_118kOnedEAN13LPatternE, i64 0, i64 %141, i64 0
  %143 = tail call i32 @_ZN16CBC_OneDimWriter13AppendPatternEPhiPKaib(%class.CBC_OneDimWriter* %12, i8* %40, i32 %123, i8* %142, i32 4, i1 zeroext true) #8
  %144 = add nsw i32 %143, %123
  %145 = load %"class.fxcrt::StringDataTemplate.9"*, %"class.fxcrt::StringDataTemplate.9"** %4, align 8
  %146 = icmp eq %"class.fxcrt::StringDataTemplate.9"* %145, null
  br i1 %146, label %85, label %147

147:                                              ; preds = %140
  %148 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.9", %"class.fxcrt::StringDataTemplate.9"* %145, i64 0, i32 1
  %149 = load i64, i64* %148, align 8
  %150 = icmp ugt i64 %149, 10
  br i1 %150, label %151, label %85, !prof !2

151:                                              ; preds = %147
  %152 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.9", %"class.fxcrt::StringDataTemplate.9"* %145, i64 0, i32 3, i64 10
  %153 = load i8, i8* %152, align 1
  %154 = icmp slt i8 %153, 0
  br i1 %154, label %161, label %155

155:                                              ; preds = %151
  %156 = sext i8 %153 to i32
  %157 = add nsw i32 %156, -48
  %158 = icmp ult i32 %157, 10
  %159 = select i1 %158, i32 %157, i32 0
  %160 = sext i32 %159 to i64
  br label %161

161:                                              ; preds = %155, %151
  %162 = phi i64 [ %160, %155 ], [ 0, %151 ]
  %163 = getelementptr inbounds [10 x [4 x i8]], [10 x [4 x i8]]* @_ZN12_GLOBAL__N_118kOnedEAN13LPatternE, i64 0, i64 %162, i64 0
  %164 = tail call i32 @_ZN16CBC_OneDimWriter13AppendPatternEPhiPKaib(%class.CBC_OneDimWriter* %12, i8* %40, i32 %144, i8* %163, i32 4, i1 zeroext true) #8
  %165 = add nsw i32 %164, %144
  %166 = load %"class.fxcrt::StringDataTemplate.9"*, %"class.fxcrt::StringDataTemplate.9"** %4, align 8
  %167 = icmp eq %"class.fxcrt::StringDataTemplate.9"* %166, null
  br i1 %167, label %85, label %168

168:                                              ; preds = %161
  %169 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.9", %"class.fxcrt::StringDataTemplate.9"* %166, i64 0, i32 1
  %170 = load i64, i64* %169, align 8
  %171 = icmp ugt i64 %170, 11
  br i1 %171, label %172, label %85, !prof !2

172:                                              ; preds = %168
  %173 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.9", %"class.fxcrt::StringDataTemplate.9"* %166, i64 0, i32 3, i64 11
  %174 = load i8, i8* %173, align 1
  %175 = icmp slt i8 %174, 0
  br i1 %175, label %182, label %176

176:                                              ; preds = %172
  %177 = sext i8 %174 to i32
  %178 = add nsw i32 %177, -48
  %179 = icmp ult i32 %178, 10
  %180 = select i1 %179, i32 %178, i32 0
  %181 = sext i32 %180 to i64
  br label %182

182:                                              ; preds = %176, %172
  %183 = phi i64 [ %181, %176 ], [ 0, %172 ]
  %184 = getelementptr inbounds [10 x [4 x i8]], [10 x [4 x i8]]* @_ZN12_GLOBAL__N_118kOnedEAN13LPatternE, i64 0, i64 %183, i64 0
  %185 = tail call i32 @_ZN16CBC_OneDimWriter13AppendPatternEPhiPKaib(%class.CBC_OneDimWriter* %12, i8* %40, i32 %165, i8* %184, i32 4, i1 zeroext true) #8
  %186 = add nsw i32 %185, %165
  %187 = load %"class.fxcrt::StringDataTemplate.9"*, %"class.fxcrt::StringDataTemplate.9"** %4, align 8
  %188 = icmp eq %"class.fxcrt::StringDataTemplate.9"* %187, null
  br i1 %188, label %85, label %189

189:                                              ; preds = %182
  %190 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.9", %"class.fxcrt::StringDataTemplate.9"* %187, i64 0, i32 1
  %191 = load i64, i64* %190, align 8
  %192 = icmp ugt i64 %191, 12
  br i1 %192, label %193, label %85, !prof !2

193:                                              ; preds = %189
  %194 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.9", %"class.fxcrt::StringDataTemplate.9"* %187, i64 0, i32 3, i64 12
  %195 = load i8, i8* %194, align 1
  %196 = icmp slt i8 %195, 0
  br i1 %196, label %203, label %197

197:                                              ; preds = %193
  %198 = sext i8 %195 to i32
  %199 = add nsw i32 %198, -48
  %200 = icmp ult i32 %199, 10
  %201 = select i1 %200, i32 %199, i32 0
  %202 = sext i32 %201 to i64
  br label %203

203:                                              ; preds = %197, %193
  %204 = phi i64 [ %202, %197 ], [ 0, %193 ]
  %205 = getelementptr inbounds [10 x [4 x i8]], [10 x [4 x i8]]* @_ZN12_GLOBAL__N_118kOnedEAN13LPatternE, i64 0, i64 %204, i64 0
  %206 = tail call i32 @_ZN16CBC_OneDimWriter13AppendPatternEPhiPKaib(%class.CBC_OneDimWriter* %12, i8* %40, i32 %186, i8* %205, i32 4, i1 zeroext true) #8
  %207 = add nsw i32 %206, %186
  %208 = tail call i32 @_ZN16CBC_OneDimWriter13AppendPatternEPhiPKaib(%class.CBC_OneDimWriter* %12, i8* %40, i32 %207, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @_ZN12_GLOBAL__N_122kOnedEAN13StartPatternE, i64 0, i64 0), i32 3, i1 zeroext true) #8
  br label %103
}

declare i8* @_ZN6pdfium8internal11CallocOrDieEmm(i64, i64) local_unnamed_addr #1

declare i32 @_ZN16CBC_OneDimWriter13AppendPatternEPhiPKaib(%class.CBC_OneDimWriter*, i8*, i32, i8*, i32, i1 zeroext) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN19CBC_OnedEAN13Writer9ShowCharsEN5fxcrt18StringViewTemplateIwEEP16CFX_RenderDeviceRK10CFX_Matrixii(%class.CBC_OnedEAN13Writer*, %"class.fxcrt::StringViewTemplate"* nocapture readonly, %class.CFX_RenderDevice*, %class.CFX_Matrix* readonly dereferenceable(24), i32, i32) unnamed_addr #0 align 2 {
  %7 = alloca %"class.fxcrt::ByteString", align 8
  %8 = alloca %"class.fxcrt::StringViewTemplate", align 8
  %9 = alloca %"class.std::__1::vector.27", align 8
  %10 = alloca %"class.fxcrt::ByteString", align 8
  %11 = alloca %class.CFX_Matrix, align 16
  %12 = alloca %class.CFX_FloatRect, align 4
  %13 = alloca { i64, i64 }, align 8
  %14 = bitcast { i64, i64 }* %13 to %struct.FX_RECT*
  %15 = alloca { <2 x float>, <2 x float> }, align 8
  %16 = alloca %class.CFX_FloatRect, align 4
  %17 = alloca %class.CFX_Matrix, align 16
  %18 = alloca { <2 x float>, <2 x float> }, align 8
  %19 = alloca %class.CFX_Matrix, align 16
  %20 = alloca %class.CFX_FloatRect, align 4
  %21 = alloca { <2 x float>, <2 x float> }, align 8
  %22 = alloca float, align 4
  %23 = alloca %class.CFX_Matrix, align 16
  %24 = alloca i64, align 8
  %25 = alloca %"class.fxcrt::ByteString", align 8
  %26 = alloca %class.CFX_Matrix, align 16
  %27 = alloca i64, align 8
  %28 = alloca %"class.fxcrt::ByteString", align 8
  %29 = alloca %class.CFX_Matrix, align 16
  %30 = alloca i64, align 8
  %31 = icmp eq %class.CFX_RenderDevice* %2, null
  br i1 %31, label %425, label %32

32:                                               ; preds = %6
  %33 = bitcast i64* %30 to %struct.CFX_TextRenderOptions*
  %34 = bitcast i64* %27 to %struct.CFX_TextRenderOptions*
  %35 = bitcast i64* %24 to %struct.CFX_TextRenderOptions*
  %36 = bitcast { <2 x float>, <2 x float> }* %21 to %class.CFX_FloatRect*
  %37 = bitcast { <2 x float>, <2 x float> }* %18 to %class.CFX_FloatRect*
  %38 = bitcast { <2 x float>, <2 x float> }* %15 to %class.CFX_FloatRect*
  %39 = mul nsw i32 %5, 7
  %40 = mul nsw i32 %5, 10
  %41 = bitcast %"class.fxcrt::ByteString"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %41) #8
  %42 = getelementptr inbounds %"class.fxcrt::ByteString", %"class.fxcrt::ByteString"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store %"class.fxcrt::StringDataTemplate.9"* inttoptr (i64 -6148914691236517206 to %"class.fxcrt::StringDataTemplate.9"*), %"class.fxcrt::StringDataTemplate.9"** %42, align 8
  %43 = bitcast %"class.fxcrt::StringViewTemplate"* %8 to i8*
  %44 = bitcast %"class.fxcrt::StringViewTemplate"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %43, i8* align 8 %44, i64 16, i1 false)
  call void @_Z13FX_UTF8EncodeN5fxcrt18StringViewTemplateIwEE(%"class.fxcrt::ByteString"* nonnull sret %7, %"class.fxcrt::StringViewTemplate"* nonnull %8) #8
  %45 = load %"class.fxcrt::StringDataTemplate.9"*, %"class.fxcrt::StringDataTemplate.9"** %42, align 8
  %46 = icmp eq %"class.fxcrt::StringDataTemplate.9"* %45, null
  br i1 %46, label %50, label %47

47:                                               ; preds = %32
  %48 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.9", %"class.fxcrt::StringDataTemplate.9"* %45, i64 0, i32 1
  %49 = load i64, i64* %48, align 8
  br label %50

50:                                               ; preds = %32, %47
  %51 = phi i64 [ %49, %47 ], [ 0, %32 ]
  %52 = bitcast %"class.std::__1::vector.27"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %52) #8
  %53 = getelementptr inbounds %"class.std::__1::vector.27", %"class.std::__1::vector.27"* %9, i64 0, i32 0, i32 0
  %54 = getelementptr inbounds %"class.std::__1::vector.27", %"class.std::__1::vector.27"* %9, i64 0, i32 0, i32 1
  %55 = getelementptr inbounds %"class.std::__1::vector.27", %"class.std::__1::vector.27"* %9, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %52, i8 0, i64 24, i1 false) #8
  %56 = icmp eq i64 %51, 0
  br i1 %56, label %75, label %57

57:                                               ; preds = %50
  %58 = icmp ugt i64 %51, 419244183493398900
  br i1 %58, label %59, label %61

59:                                               ; preds = %57
  %60 = bitcast %"class.std::__1::vector.27"* %9 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %60) #10
  unreachable

61:                                               ; preds = %57
  %62 = mul i64 %51, 44
  %63 = call i8* @_Znwm(i64 %62) #9
  %64 = bitcast i8* %63 to %class.TextCharPos*
  %65 = bitcast %class.TextCharPos** %54 to i8**
  store i8* %63, i8** %65, align 8
  %66 = bitcast %"class.std::__1::vector.27"* %9 to i8**
  store i8* %63, i8** %66, align 8
  %67 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %64, i64 %51
  store %class.TextCharPos* %67, %class.TextCharPos** %55, align 8
  br label %68

68:                                               ; preds = %68, %61
  %69 = phi %class.TextCharPos* [ %70, %68 ], [ %64, %61 ]
  call void @_ZN11TextCharPosC1Ev(%class.TextCharPos* %69) #8
  %70 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %69, i64 1
  %71 = icmp eq %class.TextCharPos* %70, %67
  br i1 %71, label %72, label %68

72:                                               ; preds = %68
  %73 = bitcast %class.TextCharPos** %54 to i64*
  %74 = ptrtoint %class.TextCharPos* %67 to i64
  store i64 %74, i64* %73, align 8
  br label %75

75:                                               ; preds = %50, %72
  %76 = bitcast %class.CBC_OnedEAN13Writer* %0 to %class.CBC_OneDimWriter*
  %77 = getelementptr inbounds %class.CBC_OnedEAN13Writer, %class.CBC_OnedEAN13Writer* %0, i64 0, i32 0, i32 0, i32 7
  %78 = load float, float* %77, align 8
  %79 = call float @llvm.fabs.f32(float %78) #8
  %80 = fptosi float %79 to i32
  %81 = add nsw i32 %80, 1
  %82 = bitcast %"class.fxcrt::ByteString"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %82) #8
  %83 = getelementptr inbounds %"class.fxcrt::ByteString", %"class.fxcrt::ByteString"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store %"class.fxcrt::StringDataTemplate.9"* inttoptr (i64 -6148914691236517206 to %"class.fxcrt::StringDataTemplate.9"*), %"class.fxcrt::StringDataTemplate.9"** %83, align 8
  call void @_ZNK5fxcrt10ByteString6SubstrEmm(%"class.fxcrt::ByteString"* nonnull sret %10, %"class.fxcrt::ByteString"* nonnull %7, i64 1, i64 6) #8
  %84 = mul nsw i32 %5, 42
  %85 = bitcast %class.CFX_Matrix* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %85) #8
  %86 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %11, i64 0, i32 4
  %87 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %11, i64 0, i32 5
  %88 = getelementptr inbounds %class.CBC_OnedEAN13Writer, %class.CBC_OnedEAN13Writer* %0, i64 0, i32 0, i32 0, i32 18
  %89 = load float, float* %88, align 8
  %90 = bitcast %class.CFX_FloatRect* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %90) #8
  %91 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %12, i64 0, i32 0
  %92 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %12, i64 0, i32 1
  %93 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %12, i64 0, i32 2
  %94 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %12, i64 0, i32 3
  %95 = sitofp i32 %40 to float
  %96 = getelementptr inbounds %class.CBC_OnedEAN13Writer, %class.CBC_OnedEAN13Writer* %0, i64 0, i32 0, i32 0, i32 0, i32 4
  %97 = load i32, i32* %96, align 4
  %98 = sub nsw i32 %97, %81
  %99 = sitofp i32 %98 to float
  %100 = mul nsw i32 %5, 52
  %101 = sitofp i32 %100 to double
  %102 = fadd double %101, -5.000000e-01
  %103 = fptrunc double %102 to float
  %104 = sitofp i32 %97 to float
  store float %95, float* %91, align 4
  store float %99, float* %92, align 4
  store float %103, float* %93, align 4
  store float %104, float* %94, align 4
  %105 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %3, i64 0, i32 2
  %106 = bitcast %class.CFX_Matrix* %3 to <2 x float>*
  %107 = load <2 x float>, <2 x float>* %106, align 4, !noalias !5
  %108 = shufflevector <2 x float> %107, <2 x float> undef, <4 x i32> <i32 0, i32 undef, i32 undef, i32 undef>
  %109 = shufflevector <2 x float> %107, <2 x float> undef, <4 x i32> <i32 undef, i32 1, i32 undef, i32 undef>
  %110 = shufflevector <2 x float> %107, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %111 = bitcast float* %105 to <2 x float>*
  %112 = load <2 x float>, <2 x float>* %111, align 4, !noalias !5
  %113 = fmul <2 x float> %112, zeroinitializer
  %114 = insertelement <4 x float> undef, float %89, i32 0
  %115 = shufflevector <4 x float> %114, <4 x float> undef, <4 x i32> <i32 0, i32 0, i32 undef, i32 undef>
  %116 = shufflevector <4 x float> %115, <4 x float> %110, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %117 = shufflevector <4 x float> %108, <4 x float> <float undef, float undef, float 0.000000e+00, float 0.000000e+00>, <4 x i32> <i32 0, i32 undef, i32 6, i32 7>
  %118 = shufflevector <4 x float> %117, <4 x float> %109, <4 x i32> <i32 0, i32 5, i32 2, i32 3>
  %119 = fmul <4 x float> %116, %118
  %120 = extractelement <2 x float> %113, i32 0
  %121 = extractelement <2 x float> %113, i32 1
  %122 = shufflevector <2 x float> %113, <2 x float> %112, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %123 = fadd <4 x float> %119, %122
  %124 = extractelement <4 x float> %119, i32 2
  %125 = fadd float %124, %120
  %126 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %3, i64 0, i32 4
  %127 = load float, float* %126, align 4, !noalias !5
  %128 = fadd float %125, %127
  %129 = extractelement <4 x float> %119, i32 3
  %130 = fadd float %129, %121
  %131 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %3, i64 0, i32 5
  %132 = load float, float* %131, align 4, !noalias !5
  %133 = fadd float %130, %132
  %134 = bitcast %class.CFX_Matrix* %11 to <4 x float>*
  store <4 x float> %123, <4 x float>* %134, align 16
  store float %128, float* %86, align 16
  store float %133, float* %87, align 4
  %135 = bitcast { i64, i64 }* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %135) #8
  %136 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %13, i64 0, i32 1
  %137 = bitcast { <2 x float>, <2 x float> }* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %137) #8
  %138 = call { <2 x float>, <2 x float> } @_ZNK10CFX_Matrix13TransformRectERK13CFX_FloatRect(%class.CFX_Matrix* nonnull %11, %class.CFX_FloatRect* nonnull dereferenceable(16) %12) #8
  %139 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %15, i64 0, i32 0
  %140 = extractvalue { <2 x float>, <2 x float> } %138, 0
  store <2 x float> %140, <2 x float>* %139, align 8
  %141 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %15, i64 0, i32 1
  %142 = extractvalue { <2 x float>, <2 x float> } %138, 1
  store <2 x float> %142, <2 x float>* %141, align 8
  %143 = call { i64, i64 } @_ZNK13CFX_FloatRect12GetOuterRectEv(%class.CFX_FloatRect* nonnull %38) #8
  %144 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %13, i64 0, i32 0
  %145 = extractvalue { i64, i64 } %143, 0
  store i64 %145, i64* %144, align 8
  %146 = extractvalue { i64, i64 } %143, 1
  store i64 %146, i64* %136, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %137) #8
  %147 = call zeroext i1 @_ZN16CFX_RenderDevice17FillRectWithBlendERK7FX_RECTj9BlendMode(%class.CFX_RenderDevice* nonnull %2, %struct.FX_RECT* nonnull dereferenceable(16) %14, i32 -1, i32 0) #8
  %148 = bitcast %class.CFX_FloatRect* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %148) #8
  %149 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %16, i64 0, i32 0
  %150 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %16, i64 0, i32 1
  %151 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %16, i64 0, i32 2
  %152 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %16, i64 0, i32 3
  %153 = mul nsw i32 %5, 57
  %154 = sitofp i32 %153 to float
  %155 = load i32, i32* %96, align 4
  %156 = sub nsw i32 %155, %81
  %157 = sitofp i32 %156 to float
  %158 = mul nsw i32 %5, 99
  %159 = sitofp i32 %158 to double
  %160 = fadd double %159, -5.000000e-01
  %161 = fptrunc double %160 to float
  %162 = sitofp i32 %155 to float
  store float %154, float* %149, align 4
  store float %157, float* %150, align 4
  store float %161, float* %151, align 4
  store float %162, float* %152, align 4
  %163 = bitcast %class.CFX_Matrix* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %163) #8
  %164 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %17, i64 0, i32 4
  %165 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %17, i64 0, i32 5
  %166 = load float, float* %88, align 8
  %167 = bitcast %class.CFX_Matrix* %3 to <2 x float>*
  %168 = load <2 x float>, <2 x float>* %167, align 4, !noalias !8
  %169 = shufflevector <2 x float> %168, <2 x float> undef, <4 x i32> <i32 0, i32 undef, i32 undef, i32 undef>
  %170 = shufflevector <2 x float> %168, <2 x float> undef, <4 x i32> <i32 undef, i32 1, i32 undef, i32 undef>
  %171 = shufflevector <2 x float> %168, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %172 = bitcast float* %105 to <2 x float>*
  %173 = load <2 x float>, <2 x float>* %172, align 4, !noalias !8
  %174 = fmul <2 x float> %173, zeroinitializer
  %175 = insertelement <4 x float> undef, float %166, i32 0
  %176 = shufflevector <4 x float> %175, <4 x float> undef, <4 x i32> <i32 0, i32 0, i32 undef, i32 undef>
  %177 = shufflevector <4 x float> %176, <4 x float> %171, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %178 = shufflevector <4 x float> %169, <4 x float> <float undef, float undef, float 0.000000e+00, float 0.000000e+00>, <4 x i32> <i32 0, i32 undef, i32 6, i32 7>
  %179 = shufflevector <4 x float> %178, <4 x float> %170, <4 x i32> <i32 0, i32 5, i32 2, i32 3>
  %180 = fmul <4 x float> %177, %179
  %181 = extractelement <2 x float> %174, i32 0
  %182 = extractelement <2 x float> %174, i32 1
  %183 = shufflevector <2 x float> %174, <2 x float> %173, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %184 = fadd <4 x float> %180, %183
  %185 = extractelement <4 x float> %180, i32 2
  %186 = fadd float %185, %181
  %187 = load float, float* %126, align 4, !noalias !8
  %188 = fadd float %186, %187
  %189 = extractelement <4 x float> %180, i32 3
  %190 = fadd float %189, %182
  %191 = load float, float* %131, align 4, !noalias !8
  %192 = fadd float %190, %191
  %193 = bitcast %class.CFX_Matrix* %17 to <4 x float>*
  store <4 x float> %184, <4 x float>* %193, align 16
  store float %188, float* %164, align 16
  store float %192, float* %165, align 4
  %194 = bitcast { <2 x float>, <2 x float> }* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %194) #8
  %195 = call { <2 x float>, <2 x float> } @_ZNK10CFX_Matrix13TransformRectERK13CFX_FloatRect(%class.CFX_Matrix* nonnull %17, %class.CFX_FloatRect* nonnull dereferenceable(16) %16) #8
  %196 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %18, i64 0, i32 0
  %197 = extractvalue { <2 x float>, <2 x float> } %195, 0
  store <2 x float> %197, <2 x float>* %196, align 8
  %198 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %18, i64 0, i32 1
  %199 = extractvalue { <2 x float>, <2 x float> } %195, 1
  store <2 x float> %199, <2 x float>* %198, align 8
  %200 = call { i64, i64 } @_ZNK13CFX_FloatRect12GetOuterRectEv(%class.CFX_FloatRect* nonnull %37) #8
  %201 = extractvalue { i64, i64 } %200, 0
  %202 = extractvalue { i64, i64 } %200, 1
  store i64 %201, i64* %144, align 8
  store i64 %202, i64* %136, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %194) #8
  %203 = call zeroext i1 @_ZN16CFX_RenderDevice17FillRectWithBlendERK7FX_RECTj9BlendMode(%class.CFX_RenderDevice* nonnull %2, %struct.FX_RECT* nonnull dereferenceable(16) %14, i32 -1, i32 0) #8
  %204 = bitcast %class.CFX_Matrix* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %204) #8
  %205 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %19, i64 0, i32 4
  %206 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %19, i64 0, i32 5
  %207 = load float, float* %88, align 8
  %208 = bitcast %class.CFX_FloatRect* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %208) #8
  %209 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %20, i64 0, i32 0
  %210 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %20, i64 0, i32 1
  %211 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %20, i64 0, i32 2
  %212 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %20, i64 0, i32 3
  %213 = load i32, i32* %96, align 4
  %214 = sub nsw i32 %213, %81
  %215 = sitofp i32 %214 to float
  %216 = sitofp i32 %39 to float
  %217 = fadd float %216, -5.000000e-01
  %218 = sitofp i32 %213 to float
  store float 0.000000e+00, float* %209, align 4
  store float %215, float* %210, align 4
  store float %217, float* %211, align 4
  store float %218, float* %212, align 4
  %219 = bitcast %class.CFX_Matrix* %3 to <2 x float>*
  %220 = load <2 x float>, <2 x float>* %219, align 4, !noalias !11
  %221 = shufflevector <2 x float> %220, <2 x float> undef, <4 x i32> <i32 0, i32 undef, i32 undef, i32 undef>
  %222 = shufflevector <2 x float> %220, <2 x float> undef, <4 x i32> <i32 undef, i32 1, i32 undef, i32 undef>
  %223 = shufflevector <2 x float> %220, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %224 = bitcast float* %105 to <2 x float>*
  %225 = load <2 x float>, <2 x float>* %224, align 4, !noalias !11
  %226 = fmul <2 x float> %225, zeroinitializer
  %227 = insertelement <4 x float> undef, float %207, i32 0
  %228 = shufflevector <4 x float> %227, <4 x float> undef, <4 x i32> <i32 0, i32 0, i32 undef, i32 undef>
  %229 = shufflevector <4 x float> %228, <4 x float> %223, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %230 = shufflevector <4 x float> %221, <4 x float> <float undef, float undef, float 0.000000e+00, float 0.000000e+00>, <4 x i32> <i32 0, i32 undef, i32 6, i32 7>
  %231 = shufflevector <4 x float> %230, <4 x float> %222, <4 x i32> <i32 0, i32 5, i32 2, i32 3>
  %232 = fmul <4 x float> %229, %231
  %233 = extractelement <2 x float> %226, i32 0
  %234 = extractelement <2 x float> %226, i32 1
  %235 = shufflevector <2 x float> %226, <2 x float> %225, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %236 = fadd <4 x float> %232, %235
  %237 = extractelement <4 x float> %232, i32 2
  %238 = fadd float %237, %233
  %239 = load float, float* %126, align 4, !noalias !11
  %240 = fadd float %238, %239
  %241 = extractelement <4 x float> %232, i32 3
  %242 = fadd float %241, %234
  %243 = load float, float* %131, align 4, !noalias !11
  %244 = fadd float %242, %243
  %245 = bitcast %class.CFX_Matrix* %19 to <4 x float>*
  store <4 x float> %236, <4 x float>* %245, align 16
  store float %240, float* %205, align 16
  store float %244, float* %206, align 4
  %246 = bitcast { <2 x float>, <2 x float> }* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %246) #8
  %247 = call { <2 x float>, <2 x float> } @_ZNK10CFX_Matrix13TransformRectERK13CFX_FloatRect(%class.CFX_Matrix* nonnull %19, %class.CFX_FloatRect* nonnull dereferenceable(16) %20) #8
  %248 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %21, i64 0, i32 0
  %249 = extractvalue { <2 x float>, <2 x float> } %247, 0
  store <2 x float> %249, <2 x float>* %248, align 8
  %250 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %21, i64 0, i32 1
  %251 = extractvalue { <2 x float>, <2 x float> } %247, 1
  store <2 x float> %251, <2 x float>* %250, align 8
  %252 = call { i64, i64 } @_ZNK13CFX_FloatRect12GetOuterRectEv(%class.CFX_FloatRect* nonnull %36) #8
  %253 = extractvalue { i64, i64 } %252, 0
  %254 = extractvalue { i64, i64 } %252, 1
  store i64 %253, i64* %144, align 8
  store i64 %254, i64* %136, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %246) #8
  %255 = call zeroext i1 @_ZN16CFX_RenderDevice17FillRectWithBlendERK7FX_RECTj9BlendMode(%class.CFX_RenderDevice* nonnull %2, %struct.FX_RECT* nonnull dereferenceable(16) %14, i32 -1, i32 0) #8
  %256 = bitcast float* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %256) #8
  store float 0.000000e+00, float* %22, align 4
  %257 = load %"class.fxcrt::StringDataTemplate.9"*, %"class.fxcrt::StringDataTemplate.9"** %83, align 8
  %258 = icmp eq %"class.fxcrt::StringDataTemplate.9"* %257, null
  br i1 %258, label %263, label %259

259:                                              ; preds = %75
  %260 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.9", %"class.fxcrt::StringDataTemplate.9"* %257, i64 0, i32 1
  %261 = load i64, i64* %260, align 8
  %262 = trunc i64 %261 to i32
  br label %263

263:                                              ; preds = %75, %259
  %264 = phi i32 [ %262, %259 ], [ 0, %75 ]
  %265 = sitofp i32 %84 to float
  %266 = load float, float* %88, align 8
  %267 = fmul float %266, %265
  %268 = fptosi float %267 to i32
  %269 = load %class.TextCharPos*, %class.TextCharPos** %53, align 8
  %270 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %269, i64 1
  %271 = getelementptr inbounds %class.CBC_OnedEAN13Writer, %class.CBC_OnedEAN13Writer* %0, i64 0, i32 0, i32 0, i32 6, i32 0
  %272 = load %class.CFX_Font*, %class.CFX_Font** %271, align 8
  %273 = sitofp i32 %268 to float
  call void @_ZN16CBC_OneDimWriter12CalcTextInfoERKN5fxcrt10ByteStringEP11TextCharPosP8CFX_FontfiRf(%class.CBC_OneDimWriter* %76, %"class.fxcrt::ByteString"* nonnull dereferenceable(8) %10, %class.TextCharPos* %270, %class.CFX_Font* %272, float %273, i32 %80, float* nonnull dereferenceable(4) %22) #8
  %274 = bitcast %class.CFX_Matrix* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %274) #8
  %275 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %23, i64 0, i32 4
  %276 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %23, i64 0, i32 5
  %277 = load float, float* %88, align 8
  %278 = fmul float %277, %95
  %279 = load i32, i32* %96, align 4
  %280 = sub nsw i32 %279, %81
  %281 = sitofp i32 %280 to float
  %282 = sitofp i32 %80 to float
  %283 = fadd float %282, %281
  %284 = bitcast %class.CFX_Matrix* %3 to <4 x float>*
  %285 = load <4 x float>, <4 x float>* %284, align 4, !noalias !14
  %286 = fmul <4 x float> %285, zeroinitializer
  %287 = shufflevector <4 x float> %286, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %288 = extractelement <4 x float> %285, i32 0
  %289 = extractelement <4 x float> %285, i32 1
  %290 = extractelement <4 x float> %285, i32 2
  %291 = extractelement <4 x float> %285, i32 3
  %292 = fadd <4 x float> %287, %285
  %293 = fsub <4 x float> %287, %285
  %294 = shufflevector <4 x float> %292, <4 x float> %293, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %295 = fmul float %278, %288
  %296 = fmul float %283, %290
  %297 = fadd float %295, %296
  %298 = load float, float* %126, align 4, !noalias !14
  %299 = fadd float %297, %298
  %300 = fmul float %278, %289
  %301 = fmul float %283, %291
  %302 = fadd float %300, %301
  %303 = load float, float* %131, align 4, !noalias !14
  %304 = fadd float %302, %303
  %305 = bitcast %class.CFX_Matrix* %23 to <4 x float>*
  store <4 x float> %294, <4 x float>* %305, align 16
  store float %299, float* %275, align 16
  store float %304, float* %276, align 4
  %306 = load %class.TextCharPos*, %class.TextCharPos** %53, align 8
  %307 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %306, i64 1
  %308 = load %class.CFX_Font*, %class.CFX_Font** %271, align 8
  %309 = getelementptr inbounds %class.CBC_OnedEAN13Writer, %class.CBC_OnedEAN13Writer* %0, i64 0, i32 0, i32 0, i32 9
  %310 = load i32, i32* %309, align 8
  %311 = bitcast i64* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %311) #8
  store i64 1099511627778, i64* %24, align 8
  %312 = call zeroext i1 @_ZN16CFX_RenderDevice14DrawNormalTextEiPK11TextCharPosP8CFX_FontfRK10CFX_MatrixjRK21CFX_TextRenderOptions(%class.CFX_RenderDevice* nonnull %2, i32 %264, %class.TextCharPos* %307, %class.CFX_Font* %308, float %282, %class.CFX_Matrix* nonnull dereferenceable(24) %23, i32 %310, %struct.CFX_TextRenderOptions* nonnull dereferenceable(8) %35) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %311) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %274) #8
  %313 = bitcast %"class.fxcrt::ByteString"* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %313) #8
  call void @_ZNK5fxcrt10ByteString6SubstrEmm(%"class.fxcrt::ByteString"* nonnull sret %25, %"class.fxcrt::ByteString"* nonnull %7, i64 7, i64 6) #8
  %314 = call dereferenceable(8) %"class.fxcrt::ByteString"* @_ZN5fxcrt10ByteStringaSEOS0_(%"class.fxcrt::ByteString"* nonnull %10, %"class.fxcrt::ByteString"* nonnull dereferenceable(8) %25) #8
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %25) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %313) #8
  %315 = load %"class.fxcrt::StringDataTemplate.9"*, %"class.fxcrt::StringDataTemplate.9"** %83, align 8
  %316 = icmp eq %"class.fxcrt::StringDataTemplate.9"* %315, null
  br i1 %316, label %321, label %317

317:                                              ; preds = %263
  %318 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.9", %"class.fxcrt::StringDataTemplate.9"* %315, i64 0, i32 1
  %319 = load i64, i64* %318, align 8
  %320 = trunc i64 %319 to i32
  br label %321

321:                                              ; preds = %263, %317
  %322 = phi i32 [ %320, %317 ], [ 0, %263 ]
  %323 = load %class.TextCharPos*, %class.TextCharPos** %53, align 8
  %324 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %323, i64 7
  %325 = load %class.CFX_Font*, %class.CFX_Font** %271, align 8
  call void @_ZN16CBC_OneDimWriter12CalcTextInfoERKN5fxcrt10ByteStringEP11TextCharPosP8CFX_FontfiRf(%class.CBC_OneDimWriter* %76, %"class.fxcrt::ByteString"* nonnull dereferenceable(8) %10, %class.TextCharPos* %324, %class.CFX_Font* %325, float %273, i32 %80, float* nonnull dereferenceable(4) %22) #8
  %326 = bitcast %class.CFX_Matrix* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %326) #8
  %327 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %26, i64 0, i32 4
  %328 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %26, i64 0, i32 5
  %329 = load float, float* %88, align 8
  %330 = fmul float %329, %154
  %331 = load i32, i32* %96, align 4
  %332 = add i32 %331, -1
  %333 = sitofp i32 %332 to float
  %334 = bitcast %class.CFX_Matrix* %3 to <4 x float>*
  %335 = load <4 x float>, <4 x float>* %334, align 4, !noalias !17
  %336 = fmul <4 x float> %335, zeroinitializer
  %337 = shufflevector <4 x float> %336, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %338 = extractelement <4 x float> %335, i32 0
  %339 = extractelement <4 x float> %335, i32 1
  %340 = extractelement <4 x float> %335, i32 2
  %341 = extractelement <4 x float> %335, i32 3
  %342 = fadd <4 x float> %337, %335
  %343 = fsub <4 x float> %337, %335
  %344 = shufflevector <4 x float> %342, <4 x float> %343, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %345 = fmul float %330, %338
  %346 = fmul float %340, %333
  %347 = fadd float %345, %346
  %348 = load float, float* %126, align 4, !noalias !17
  %349 = fadd float %347, %348
  %350 = fmul float %330, %339
  %351 = fmul float %341, %333
  %352 = fadd float %350, %351
  %353 = load float, float* %131, align 4, !noalias !17
  %354 = fadd float %352, %353
  %355 = bitcast %class.CFX_Matrix* %26 to <4 x float>*
  store <4 x float> %344, <4 x float>* %355, align 16
  store float %349, float* %327, align 16
  store float %354, float* %328, align 4
  %356 = load %class.TextCharPos*, %class.TextCharPos** %53, align 8
  %357 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %356, i64 7
  %358 = load %class.CFX_Font*, %class.CFX_Font** %271, align 8
  %359 = load i32, i32* %309, align 8
  %360 = bitcast i64* %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %360) #8
  store i64 1099511627778, i64* %27, align 8
  %361 = call zeroext i1 @_ZN16CFX_RenderDevice14DrawNormalTextEiPK11TextCharPosP8CFX_FontfRK10CFX_MatrixjRK21CFX_TextRenderOptions(%class.CFX_RenderDevice* nonnull %2, i32 %322, %class.TextCharPos* %357, %class.CFX_Font* %358, float %282, %class.CFX_Matrix* nonnull dereferenceable(24) %26, i32 %359, %struct.CFX_TextRenderOptions* nonnull dereferenceable(8) %34) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %360) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %326) #8
  %362 = bitcast %"class.fxcrt::ByteString"* %28 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %362) #8
  call void @_ZNK5fxcrt10ByteString5FirstEm(%"class.fxcrt::ByteString"* nonnull sret %28, %"class.fxcrt::ByteString"* nonnull %7, i64 1) #8
  %363 = call dereferenceable(8) %"class.fxcrt::ByteString"* @_ZN5fxcrt10ByteStringaSEOS0_(%"class.fxcrt::ByteString"* nonnull %10, %"class.fxcrt::ByteString"* nonnull dereferenceable(8) %28) #8
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %28) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %362) #8
  %364 = load %"class.fxcrt::StringDataTemplate.9"*, %"class.fxcrt::StringDataTemplate.9"** %83, align 8
  %365 = icmp eq %"class.fxcrt::StringDataTemplate.9"* %364, null
  br i1 %365, label %370, label %366

366:                                              ; preds = %321
  %367 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.9", %"class.fxcrt::StringDataTemplate.9"* %364, i64 0, i32 1
  %368 = load i64, i64* %367, align 8
  %369 = trunc i64 %368 to i32
  br label %370

370:                                              ; preds = %321, %366
  %371 = phi i32 [ %369, %366 ], [ 0, %321 ]
  %372 = load float, float* %88, align 8
  %373 = fmul float %372, %216
  %374 = fptosi float %373 to i32
  %375 = load %class.TextCharPos*, %class.TextCharPos** %53, align 8
  %376 = load %class.CFX_Font*, %class.CFX_Font** %271, align 8
  %377 = sitofp i32 %374 to float
  call void @_ZN16CBC_OneDimWriter12CalcTextInfoERKN5fxcrt10ByteStringEP11TextCharPosP8CFX_FontfiRf(%class.CBC_OneDimWriter* %76, %"class.fxcrt::ByteString"* nonnull dereferenceable(8) %10, %class.TextCharPos* %375, %class.CFX_Font* %376, float %377, i32 %80, float* nonnull dereferenceable(4) %22) #8
  %378 = bitcast %class.CFX_Matrix* %29 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %378) #8
  %379 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %29, i64 0, i32 4
  %380 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %29, i64 0, i32 5
  %381 = load i32, i32* %96, align 4
  %382 = add i32 %381, -1
  %383 = sitofp i32 %382 to float
  %384 = bitcast %class.CFX_Matrix* %3 to <4 x float>*
  %385 = load <4 x float>, <4 x float>* %384, align 4, !noalias !20
  %386 = fmul <4 x float> %385, zeroinitializer
  %387 = shufflevector <4 x float> %386, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %388 = extractelement <4 x float> %385, i32 2
  %389 = extractelement <4 x float> %385, i32 3
  %390 = fadd <4 x float> %387, %385
  %391 = fsub <4 x float> %387, %385
  %392 = shufflevector <4 x float> %390, <4 x float> %391, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %393 = fmul float %388, %383
  %394 = extractelement <4 x float> %386, i32 0
  %395 = fadd float %394, %393
  %396 = load float, float* %126, align 4, !noalias !20
  %397 = fadd float %395, %396
  %398 = fmul float %389, %383
  %399 = extractelement <4 x float> %386, i32 1
  %400 = fadd float %399, %398
  %401 = load float, float* %131, align 4, !noalias !20
  %402 = fadd float %400, %401
  %403 = bitcast %class.CFX_Matrix* %29 to <4 x float>*
  store <4 x float> %392, <4 x float>* %403, align 16
  store float %397, float* %379, align 16
  store float %402, float* %380, align 4
  %404 = load %class.TextCharPos*, %class.TextCharPos** %53, align 8
  %405 = load %class.CFX_Font*, %class.CFX_Font** %271, align 8
  %406 = load i32, i32* %309, align 8
  %407 = bitcast i64* %30 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %407) #8
  store i64 1099511627778, i64* %30, align 8
  %408 = call zeroext i1 @_ZN16CFX_RenderDevice14DrawNormalTextEiPK11TextCharPosP8CFX_FontfRK10CFX_MatrixjRK21CFX_TextRenderOptions(%class.CFX_RenderDevice* nonnull %2, i32 %371, %class.TextCharPos* %404, %class.CFX_Font* %405, float %282, %class.CFX_Matrix* nonnull dereferenceable(24) %29, i32 %406, %struct.CFX_TextRenderOptions* nonnull dereferenceable(8) %33) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %407) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %378) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %256) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %208) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %204) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %163) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %148) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %135) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %90) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %85) #8
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %10) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %82) #8
  %409 = load %class.TextCharPos*, %class.TextCharPos** %53, align 8
  %410 = icmp eq %class.TextCharPos* %409, null
  br i1 %410, label %424, label %411

411:                                              ; preds = %370
  %412 = bitcast %class.TextCharPos* %409 to i8*
  %413 = load %class.TextCharPos*, %class.TextCharPos** %54, align 8
  %414 = icmp eq %class.TextCharPos* %413, %409
  br i1 %414, label %422, label %415

415:                                              ; preds = %411, %415
  %416 = phi %class.TextCharPos* [ %417, %415 ], [ %413, %411 ]
  %417 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %416, i64 -1
  call void @_ZN11TextCharPosD1Ev(%class.TextCharPos* %417) #8
  %418 = icmp eq %class.TextCharPos* %417, %409
  br i1 %418, label %419, label %415

419:                                              ; preds = %415
  %420 = bitcast %"class.std::__1::vector.27"* %9 to i8**
  %421 = load i8*, i8** %420, align 8
  br label %422

422:                                              ; preds = %419, %411
  %423 = phi i8* [ %421, %419 ], [ %412, %411 ]
  store %class.TextCharPos* %409, %class.TextCharPos** %54, align 8
  call void @_ZdlPv(i8* %423) #9
  br label %424

424:                                              ; preds = %370, %422
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %52) #8
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %7) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %41) #8
  br label %425

425:                                              ; preds = %6, %424
  %426 = phi i1 [ true, %424 ], [ false, %6 ]
  ret i1 %426
}

declare void @_Z13FX_UTF8EncodeN5fxcrt18StringViewTemplateIwEE(%"class.fxcrt::ByteString"* sret, %"class.fxcrt::StringViewTemplate"*) local_unnamed_addr #1

declare void @_ZNK5fxcrt10ByteString6SubstrEmm(%"class.fxcrt::ByteString"* sret, %"class.fxcrt::ByteString"*, i64, i64) local_unnamed_addr #1

declare { <2 x float>, <2 x float> } @_ZNK10CFX_Matrix13TransformRectERK13CFX_FloatRect(%class.CFX_Matrix*, %class.CFX_FloatRect* dereferenceable(16)) local_unnamed_addr #1

declare { i64, i64 } @_ZNK13CFX_FloatRect12GetOuterRectEv(%class.CFX_FloatRect*) local_unnamed_addr #1

declare void @_ZN16CBC_OneDimWriter12CalcTextInfoERKN5fxcrt10ByteStringEP11TextCharPosP8CFX_FontfiRf(%class.CBC_OneDimWriter*, %"class.fxcrt::ByteString"* dereferenceable(8), %class.TextCharPos*, %class.CFX_Font*, float, i32, float* dereferenceable(4)) local_unnamed_addr #1

declare zeroext i1 @_ZN16CFX_RenderDevice14DrawNormalTextEiPK11TextCharPosP8CFX_FontfRK10CFX_MatrixjRK21CFX_TextRenderOptions(%class.CFX_RenderDevice*, i32, %class.TextCharPos*, %class.CFX_Font*, float, %class.CFX_Matrix* dereferenceable(24), i32, %struct.CFX_TextRenderOptions* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: nounwind
declare dereferenceable(8) %"class.fxcrt::ByteString"* @_ZN5fxcrt10ByteStringaSEOS0_(%"class.fxcrt::ByteString"*, %"class.fxcrt::ByteString"* dereferenceable(8)) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"*) unnamed_addr #2

declare void @_ZNK5fxcrt10ByteString5FirstEm(%"class.fxcrt::ByteString"* sret, %"class.fxcrt::ByteString"*, i64) local_unnamed_addr #1

declare zeroext i1 @_ZN10CBC_Writer15SetCharEncodingEi(%class.CBC_Writer*, i32) unnamed_addr #1

declare zeroext i1 @_ZN10CBC_Writer15SetModuleHeightEi(%class.CBC_Writer*, i32) unnamed_addr #1

declare zeroext i1 @_ZN10CBC_Writer14SetModuleWidthEi(%class.CBC_Writer*, i32) unnamed_addr #1

declare zeroext i1 @_ZN10CBC_Writer9SetHeightEi(%class.CBC_Writer*, i32) unnamed_addr #1

declare zeroext i1 @_ZN10CBC_Writer8SetWidthEi(%class.CBC_Writer*, i32) unnamed_addr #1

declare zeroext i1 @_ZN10CBC_Writer15SetTextLocationE11BC_TEXT_LOC(%class.CBC_Writer*, i8 zeroext) unnamed_addr #1

declare zeroext i1 @_ZN10CBC_Writer18SetWideNarrowRatioEa(%class.CBC_Writer*, i8 signext) unnamed_addr #1

declare zeroext i1 @_ZN10CBC_Writer12SetStartCharEc(%class.CBC_Writer*, i8 signext) unnamed_addr #1

declare zeroext i1 @_ZN10CBC_Writer10SetEndCharEc(%class.CBC_Writer*, i8 signext) unnamed_addr #1

declare zeroext i1 @_ZN10CBC_Writer23SetErrorCorrectionLevelEi(%class.CBC_Writer*, i32) unnamed_addr #1

declare zeroext i1 @_ZN16CBC_OneDimWriter12RenderResultEN5fxcrt18StringViewTemplateIwEEPhi(%class.CBC_OneDimWriter*, %"class.fxcrt::StringViewTemplate"*, i8*, i32) unnamed_addr #1

declare void @_ZN16CBC_OneDimWriter16SetPrintChecksumEb(%class.CBC_OneDimWriter*, i1 zeroext) unnamed_addr #1

declare void @_ZN16CBC_OneDimWriter13SetDataLengthEi(%class.CBC_OneDimWriter*, i32) unnamed_addr #1

declare void @_ZN16CBC_OneDimWriter15SetCalcChecksumEb(%class.CBC_OneDimWriter*, i1 zeroext) unnamed_addr #1

declare void @_ZN16CBC_OneDimWriter11SetFontSizeEf(%class.CBC_OneDimWriter*, float) unnamed_addr #1

declare void @_ZN16CBC_OneDimWriter12SetFontStyleEi(%class.CBC_OneDimWriter*, i32) unnamed_addr #1

declare void @_ZN16CBC_OneDimWriter12SetFontColorEj(%class.CBC_OneDimWriter*, i32) unnamed_addr #1

declare void @_ZN19CBC_OneDimEANWriter13InitEANWriterEv(%class.CBC_OneDimEANWriter*) unnamed_addr #1

; Function Attrs: nounwind
declare i32 @iswdigit(i32) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #5

declare zeroext i1 @_ZN16CFX_RenderDevice17FillRectWithBlendERK7FX_RECTj9BlendMode(%class.CFX_RenderDevice*, %struct.FX_RECT* dereferenceable(16), i32, i32) local_unnamed_addr #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

declare void @_ZN11TextCharPosC1Ev(%class.TextCharPos*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN11TextCharPosD1Ev(%class.TextCharPos*) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }
attributes #10 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{i32 -2143840360}
!4 = !{i32 -2143840339}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZNK10CFX_MatrixmlERKS_: argument 0"}
!7 = distinct !{!7, !"_ZNK10CFX_MatrixmlERKS_"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZNK10CFX_MatrixmlERKS_: argument 0"}
!10 = distinct !{!10, !"_ZNK10CFX_MatrixmlERKS_"}
!11 = !{!12}
!12 = distinct !{!12, !13, !"_ZNK10CFX_MatrixmlERKS_: argument 0"}
!13 = distinct !{!13, !"_ZNK10CFX_MatrixmlERKS_"}
!14 = !{!15}
!15 = distinct !{!15, !16, !"_ZNK10CFX_MatrixmlERKS_: argument 0"}
!16 = distinct !{!16, !"_ZNK10CFX_MatrixmlERKS_"}
!17 = !{!18}
!18 = distinct !{!18, !19, !"_ZNK10CFX_MatrixmlERKS_: argument 0"}
!19 = distinct !{!19, !"_ZNK10CFX_MatrixmlERKS_"}
!20 = !{!21}
!21 = distinct !{!21, !22, !"_ZNK10CFX_MatrixmlERKS_: argument 0"}
!22 = distinct !{!22, !"_ZNK10CFX_MatrixmlERKS_"}
