; ModuleID = '../../components/viz/service/frame_sinks/video_capture/video_capture_overlay.cc'
source_filename = "../../components/viz/service/frame_sinks/video_capture/video_capture_overlay.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.base::trace_event::TraceCategory" = type { i8, i32, i8* }
%"class.viz::VideoCaptureOverlay::FrameSource" = type { i32 (...)** }
%"class.viz::VideoCaptureOverlay" = type { %"class.viz::mojom::FrameSinkVideoCaptureOverlay", %"class.viz::VideoCaptureOverlay::FrameSource"*, %"class.mojo::Receiver", %class.SkBitmap, %"class.gfx::RectF", %class.scoped_refptr.165 }
%"class.viz::mojom::FrameSinkVideoCaptureOverlay" = type { i32 (...)** }
%"class.mojo::Receiver" = type { %"class.mojo::internal::BindingState" }
%"class.mojo::internal::BindingState" = type { %"class.mojo::internal::BindingStateBase", %"class.viz::mojom::FrameSinkVideoCaptureOverlayStub" }
%"class.mojo::internal::BindingStateBase" = type { %class.scoped_refptr, %"class.std::__1::unique_ptr.112", %"class.base::WeakPtrFactory.162" }
%class.scoped_refptr = type { %"class.mojo::internal::MultiplexRouter"* }
%"class.mojo::internal::MultiplexRouter" = type <{ %"class.mojo::MessageReceiver", %"class.mojo::AssociatedGroupController.base", [4 x i8], %"class.mojo::PipeControlMessageHandlerDelegate", i32, i8, [3 x i8], %class.scoped_refptr.1, %"class.mojo::MessageHeaderValidator"*, %"class.mojo::MessageDispatcher", %"class.mojo::Connector", %"class.mojo::ScopedHandleBase", [4 x i8], %"class.absl::optional.75", %"class.absl::optional.80", %"class.absl::optional.37", %"class.mojo::PipeControlMessageHandler", %"class.mojo::PipeControlMessageProxy", %"class.base::small_map", i32, [4 x i8], %"class.base::circular_deque", %"class.std::__1::map.103", i8, [7 x i8], %class.scoped_refptr.1, i8, i8, i8, i8, i8, [3 x i8] }>
%"class.mojo::MessageReceiver" = type { i32 (...)** }
%"class.mojo::AssociatedGroupController.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe" }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.mojo::PipeControlMessageHandlerDelegate" = type { i32 (...)** }
%"class.mojo::MessageHeaderValidator" = type { %"class.mojo::MessageReceiver", %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.mojo::MessageDispatcher" = type { %"class.mojo::MessageReceiver", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.7", %"class.mojo::MessageReceiver"*, %"class.base::WeakPtrFactory" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"class.mojo::MessageReceiver"* }
%"class.std::__1::unique_ptr.7" = type { %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"class.mojo::MessageFilter"* }
%"class.mojo::MessageFilter" = type { i32 (...)** }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.13 }
%class.scoped_refptr.13 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.14", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.14" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.15" }
%"struct.std::__1::atomic.15" = type { %"struct.std::__1::__atomic_base.16" }
%"struct.std::__1::__atomic_base.16" = type { %"struct.std::__1::__atomic_base.17" }
%"struct.std::__1::__atomic_base.17" = type { %"struct.std::__1::__cxx_atomic_impl.18" }
%"struct.std::__1::__cxx_atomic_impl.18" = type { %"struct.std::__1::__cxx_atomic_base_impl.19" }
%"struct.std::__1::__cxx_atomic_base_impl.19" = type { i8 }
%"class.mojo::Connector" = type { %"class.mojo::MessageReceiver", %"class.base::OnceCallback", %"class.mojo::ScopedHandleBase", %"class.mojo::MessageReceiver"*, %class.scoped_refptr.1, %"class.std::__1::unique_ptr.22", %"class.absl::optional", %"struct.std::__1::atomic.33", i8, i8, i8, i8, i32, i32, %"class.absl::optional.37", %"class.std::__1::unique_ptr.42", i8, i64, %class.scoped_refptr.71, %"class.base::Lock", i8, i8*, %"class.mojo::Connector::RunLoopNestingObserver"*, i8, i64, %"class.mojo::ConnectionGroup::Ref", %"class.base::WeakPtr", %"class.base::WeakPtrFactory.74" }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.20 }
%class.scoped_refptr.20 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.21", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.21" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.std::__1::unique_ptr.22" = type { %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { %"class.mojo::SimpleWatcher"* }
%"class.mojo::SimpleWatcher" = type { i32, %class.scoped_refptr.1, i8, %"class.mojo::ScopedHandleBase.25", %class.scoped_refptr.26, %"class.mojo::Handle", i32, %"class.base::RepeatingCallback", i8*, %"class.base::WeakPtrFactory.27" }
%"class.mojo::ScopedHandleBase.25" = type { %"class.mojo::TrapHandle" }
%"class.mojo::TrapHandle" = type { %"class.mojo::Handle" }
%class.scoped_refptr.26 = type { %"class.mojo::SimpleWatcher::Context"* }
%"class.mojo::SimpleWatcher::Context" = type opaque
%"class.mojo::Handle" = type { i32 }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::WeakPtrFactory.27" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.31 }
%union.anon.31 = type { %"class.mojo::HandleSignalTracker" }
%"class.mojo::HandleSignalTracker" = type { %"class.base::RepeatingCallback.32", %"struct.mojo::HandleSignalsState", %"class.mojo::SimpleWatcher", %"class.mojo::SimpleWatcher" }
%"class.base::RepeatingCallback.32" = type { %"class.base::internal::CallbackBaseCopyable" }
%"struct.mojo::HandleSignalsState" = type { %struct.MojoHandleSignalsState }
%struct.MojoHandleSignalsState = type { i32, i32 }
%"struct.std::__1::atomic.33" = type { %"struct.std::__1::__atomic_base.34" }
%"struct.std::__1::__atomic_base.34" = type { %"struct.std::__1::__cxx_atomic_impl.35" }
%"struct.std::__1::__cxx_atomic_impl.35" = type { %"struct.std::__1::__cxx_atomic_base_impl.36" }
%"struct.std::__1::__cxx_atomic_base_impl.36" = type { i8 }
%"class.std::__1::unique_ptr.42" = type { %"class.std::__1::__compressed_pair.43" }
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"struct.std::__1::__compressed_pair_elem.44" = type { %"class.mojo::SyncHandleWatcher"* }
%"class.mojo::SyncHandleWatcher" = type { %"class.mojo::Handle", i32, %"class.base::RepeatingCallback.45", i8, i64, %class.scoped_refptr.46, %class.scoped_refptr.67 }
%"class.base::RepeatingCallback.45" = type { %"class.base::internal::CallbackBaseCopyable" }
%class.scoped_refptr.46 = type { %"class.mojo::SyncHandleRegistry"* }
%"class.mojo::SyncHandleRegistry" = type <{ %"class.base::RefCounted", [4 x i8], %"class.mojo::WaitSet", %"class.std::__1::map", %"class.std::__1::map.56", i8, [7 x i8] }>
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.mojo::WaitSet" = type { %class.scoped_refptr.47 }
%class.scoped_refptr.47 = type { %"class.mojo::WaitSet::State"* }
%"class.mojo::WaitSet::State" = type opaque
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.48", %"class.std::__1::__compressed_pair.53" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.49" }
%"struct.std::__1::__compressed_pair_elem.49" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.53" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%"struct.std::__1::__compressed_pair_elem.54" = type { i64 }
%"class.std::__1::map.56" = type { %"class.std::__1::__tree.57" }
%"class.std::__1::__tree.57" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.58", %"class.std::__1::__compressed_pair.62" }
%"class.std::__1::__compressed_pair.58" = type { %"struct.std::__1::__compressed_pair_elem.49" }
%"class.std::__1::__compressed_pair.62" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%class.scoped_refptr.67 = type { %"class.base::RefCountedData"* }
%"class.base::RefCountedData" = type opaque
%class.scoped_refptr.71 = type { %"class.mojo::internal::MessageQuotaChecker"* }
%"class.mojo::internal::MessageQuotaChecker" = type opaque
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.mojo::Connector::RunLoopNestingObserver" = type opaque
%"class.mojo::ConnectionGroup::Ref" = type { i32, %class.scoped_refptr.72 }
%class.scoped_refptr.72 = type { %"class.mojo::ConnectionGroup"* }
%"class.mojo::ConnectionGroup" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.173", [4 x i8], %"class.base::RepeatingCallback.115", %class.scoped_refptr.1, %"class.mojo::ConnectionGroup::Ref", %"struct.std::__1::atomic.174", [4 x i8] }>
%"class.base::RefCountedThreadSafe.173" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::RepeatingCallback.115" = type { %"class.base::internal::CallbackBaseCopyable" }
%"struct.std::__1::atomic.174" = type { %"struct.std::__1::__atomic_base.175" }
%"struct.std::__1::__atomic_base.175" = type { %"struct.std::__1::__atomic_base.176" }
%"struct.std::__1::__atomic_base.176" = type { %"struct.std::__1::__cxx_atomic_impl.177" }
%"struct.std::__1::__cxx_atomic_impl.177" = type { %"struct.std::__1::__cxx_atomic_base_impl.178" }
%"struct.std::__1::__cxx_atomic_base_impl.178" = type { i32 }
%"class.base::WeakPtr" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::internal::WeakPtrBase" = type { %"class.base::internal::WeakReference", i64 }
%"class.base::internal::WeakReference" = type { %class.scoped_refptr.73 }
%class.scoped_refptr.73 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::WeakPtrFactory.74" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.mojo::ScopedHandleBase" = type { %"class.mojo::MessagePipeHandle" }
%"class.mojo::MessagePipeHandle" = type { %"class.mojo::Handle" }
%"class.absl::optional.75" = type { %"class.absl::optional_internal::optional_data.76" }
%"class.absl::optional_internal::optional_data.76" = type { %"class.absl::optional_internal::optional_data_base.77" }
%"class.absl::optional_internal::optional_data_base.77" = type { %"class.absl::optional_internal::optional_data_dtor_base.78" }
%"class.absl::optional_internal::optional_data_dtor_base.78" = type { i8, %union.anon.79 }
%union.anon.79 = type { %"class.mojo::SimpleWatcher" }
%"class.absl::optional.80" = type { %"class.absl::optional_internal::optional_data.81" }
%"class.absl::optional_internal::optional_data.81" = type { %"class.absl::optional_internal::optional_data_base.82" }
%"class.absl::optional_internal::optional_data_base.82" = type { %"class.absl::optional_internal::optional_data_dtor_base.83" }
%"class.absl::optional_internal::optional_data_dtor_base.83" = type { i8, [7 x i8], %union.anon.84 }
%union.anon.84 = type { %"struct.mojo::internal::MultiplexRouter::ExclusiveSyncWaitInfo" }
%"struct.mojo::internal::MultiplexRouter::ExclusiveSyncWaitInfo" = type <{ i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.absl::optional.37" = type { %"class.absl::optional_internal::optional_data.38" }
%"class.absl::optional_internal::optional_data.38" = type { %"class.absl::optional_internal::optional_data_base.39" }
%"class.absl::optional_internal::optional_data_base.39" = type { %"class.absl::optional_internal::optional_data_dtor_base.40" }
%"class.absl::optional_internal::optional_data_dtor_base.40" = type { i8, %union.anon.41 }
%union.anon.41 = type { %"class.base::Lock" }
%"class.mojo::PipeControlMessageHandler" = type { %"class.mojo::MessageReceiver", %"class.std::__1::basic_string", %"class.mojo::PipeControlMessageHandlerDelegate"* }
%"class.mojo::PipeControlMessageProxy" = type { %"class.mojo::MessageReceiver"* }
%"class.base::small_map" = type { i64, %"class.base::internal::small_map_default_init", %union.anon.89 }
%"class.base::internal::small_map_default_init" = type { i8 }
%union.anon.89 = type { %"class.std::__1::map.91" }
%"class.std::__1::map.91" = type { %"class.std::__1::__tree.92" }
%"class.std::__1::__tree.92" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.93", %"class.std::__1::__compressed_pair.97" }
%"class.std::__1::__compressed_pair.93" = type { %"struct.std::__1::__compressed_pair_elem.49" }
%"class.std::__1::__compressed_pair.97" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%"class.base::circular_deque" = type { %"class.base::internal::VectorBuffer", i64, i64 }
%"class.base::internal::VectorBuffer" = type { %"class.std::__1::unique_ptr.102"*, i64 }
%"class.std::__1::unique_ptr.102" = type opaque
%"class.std::__1::map.103" = type { %"class.std::__1::__tree.104" }
%"class.std::__1::__tree.104" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.105", %"class.std::__1::__compressed_pair.109" }
%"class.std::__1::__compressed_pair.105" = type { %"struct.std::__1::__compressed_pair_elem.49" }
%"class.std::__1::__compressed_pair.109" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%class.scoped_refptr.1 = type { %"class.base::SequencedTaskRunner"* }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.2" }>
%"class.base::RefCountedThreadSafe.2" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.std::__1::unique_ptr.112" = type { %"class.std::__1::__compressed_pair.113" }
%"class.std::__1::__compressed_pair.113" = type { %"struct.std::__1::__compressed_pair_elem.114" }
%"struct.std::__1::__compressed_pair_elem.114" = type { %"class.mojo::InterfaceEndpointClient"* }
%"class.mojo::InterfaceEndpointClient" = type { %"class.mojo::MessageReceiverWithResponder", i8, %"class.base::RepeatingCallback.115", %"class.base::OnceCallback.116", %"class.absl::optional.117", %"class.absl::optional.122", %"class.mojo::ConnectionGroup::Ref", i32, %"class.mojo::ScopedInterfaceEndpointHandle", %"class.std::__1::unique_ptr.129", %"class.mojo::InterfaceEndpointController"*, %"class.mojo::MessageReceiverWithResponderStatus"*, %"class.mojo::InterfaceEndpointClient::HandleIncomingMessageThunk", %"class.mojo::MessageDispatcher", %"class.std::__1::map.137", %"class.std::__1::map.148", i64, %"class.base::OnceCallback", %"class.base::OnceCallback.157", i8, %class.scoped_refptr.1, %"class.mojo::internal::ControlMessageProxy", %"class.mojo::internal::ControlMessageHandler", i8*, %"class.base::WeakPtrFactory.158" }
%"class.mojo::MessageReceiverWithResponder" = type { %"class.mojo::MessageReceiver" }
%"class.base::OnceCallback.116" = type { %"class.base::internal::CallbackBase" }
%"class.absl::optional.117" = type { %"class.absl::optional_internal::optional_data.118" }
%"class.absl::optional_internal::optional_data.118" = type { %"class.absl::optional_internal::optional_data_base.119" }
%"class.absl::optional_internal::optional_data_base.119" = type { %"class.absl::optional_internal::optional_data_dtor_base.120" }
%"class.absl::optional_internal::optional_data_dtor_base.120" = type { i8, %union.anon.121 }
%union.anon.121 = type { %"class.base::TimeDelta" }
%"class.base::TimeDelta" = type { i64 }
%"class.absl::optional.122" = type { %"class.absl::optional_internal::optional_data.123" }
%"class.absl::optional_internal::optional_data.123" = type { %"class.absl::optional_internal::optional_data_base.124" }
%"class.absl::optional_internal::optional_data_base.124" = type { %"class.absl::optional_internal::optional_data_dtor_base.125" }
%"class.absl::optional_internal::optional_data_dtor_base.125" = type { i8, %union.anon.126 }
%union.anon.126 = type { %"class.base::OneShotTimer" }
%"class.base::OneShotTimer" = type { %"class.base::internal::TimerBase", %"class.base::OnceCallback" }
%"class.base::internal::TimerBase" = type { i32 (...)**, %class.scoped_refptr.1, %"class.base::SequenceCheckerDoNothing", %"class.base::internal::TaskDestructionDetector"*, %"class.base::Location", %"class.base::TimeDelta", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TickClock"*, i8, %"class.base::WeakPtrFactory.127" }
%"class.base::SequenceCheckerDoNothing" = type { i8 }
%"class.base::internal::TaskDestructionDetector" = type opaque
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::TickClock" = type opaque
%"class.base::WeakPtrFactory.127" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.mojo::ScopedInterfaceEndpointHandle" = type { %class.scoped_refptr.128 }
%class.scoped_refptr.128 = type { %"class.mojo::ScopedInterfaceEndpointHandle::State"* }
%"class.mojo::ScopedInterfaceEndpointHandle::State" = type opaque
%"class.std::__1::unique_ptr.129" = type { %"class.std::__1::__compressed_pair.130" }
%"class.std::__1::__compressed_pair.130" = type { %"struct.std::__1::__compressed_pair_elem.131" }
%"struct.std::__1::__compressed_pair_elem.131" = type { %"class.mojo::AssociatedGroup"* }
%"class.mojo::AssociatedGroup" = type { %"class.base::RepeatingCallback.132", %class.scoped_refptr.133 }
%"class.base::RepeatingCallback.132" = type { %"class.base::internal::CallbackBaseCopyable" }
%class.scoped_refptr.133 = type { %"class.mojo::AssociatedGroupController"* }
%"class.mojo::AssociatedGroupController" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe", [4 x i8] }>
%"class.mojo::InterfaceEndpointController" = type opaque
%"class.mojo::MessageReceiverWithResponderStatus" = type { %"class.mojo::MessageReceiver" }
%"class.mojo::InterfaceEndpointClient::HandleIncomingMessageThunk" = type { %"class.mojo::MessageReceiver", %"class.mojo::InterfaceEndpointClient"* }
%"class.std::__1::map.137" = type { %"class.std::__1::__tree.138" }
%"class.std::__1::__tree.138" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.139", %"class.std::__1::__compressed_pair.143" }
%"class.std::__1::__compressed_pair.139" = type { %"struct.std::__1::__compressed_pair_elem.49" }
%"class.std::__1::__compressed_pair.143" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%"class.std::__1::map.148" = type { %"class.std::__1::__tree.149" }
%"class.std::__1::__tree.149" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.150", %"class.std::__1::__compressed_pair.154" }
%"class.std::__1::__compressed_pair.150" = type { %"struct.std::__1::__compressed_pair_elem.49" }
%"class.std::__1::__compressed_pair.154" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%"class.base::OnceCallback.157" = type { %"class.base::internal::CallbackBase" }
%"class.mojo::internal::ControlMessageProxy" = type { %"class.mojo::InterfaceEndpointClient"*, i8, %"class.base::OnceCallback" }
%"class.mojo::internal::ControlMessageHandler" = type <{ %"class.mojo::MessageReceiverWithResponderStatus", %"class.mojo::InterfaceEndpointClient"*, i32, [4 x i8] }>
%"class.base::WeakPtrFactory.158" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::WeakPtrFactory.162" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.viz::mojom::FrameSinkVideoCaptureOverlayStub" = type { %"class.mojo::MessageReceiverWithResponderStatus", %"class.viz::mojom::FrameSinkVideoCaptureOverlay"* }
%class.SkBitmap = type { %class.sk_sp, %class.SkPixmap, %class.sk_sp.164 }
%class.sk_sp = type { %class.SkPixelRef* }
%class.SkPixelRef = type opaque
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.163, i32, i32 }
%class.sk_sp.163 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.15" }
%struct.SkISize = type { i32, i32 }
%class.sk_sp.164 = type { %class.SkMipmap* }
%class.SkMipmap = type opaque
%"class.gfx::RectF" = type { %"class.gfx::PointF", %"class.gfx::SizeF" }
%"class.gfx::PointF" = type { float, float }
%"class.gfx::SizeF" = type { float, float }
%class.scoped_refptr.165 = type { %"class.viz::VideoCaptureOverlay::Sprite"* }
%"class.viz::VideoCaptureOverlay::Sprite" = type { %"class.base::RefCounted.166", %class.SkBitmap, %"class.gfx::Size", i32, %"class.gfx::ColorSpace", %"class.std::__1::unique_ptr.167" }
%"class.base::RefCounted.166" = type { %"class.base::subtle::RefCountedBase" }
%"class.gfx::Size" = type { i32, i32 }
%"class.gfx::ColorSpace" = type { i8, i8, i8, i8, [9 x float], [7 x float] }
%"class.std::__1::unique_ptr.167" = type { %"class.std::__1::__compressed_pair.168" }
%"class.std::__1::__compressed_pair.168" = type { %"struct.std::__1::__compressed_pair_elem.169" }
%"struct.std::__1::__compressed_pair_elem.169" = type { float* }
%"class.mojo::PendingReceiver" = type { %"struct.mojo::internal::PendingReceiverState" }
%"struct.mojo::internal::PendingReceiverState" = type { %"class.mojo::ScopedHandleBase", %"class.mojo::ConnectionGroup::Ref" }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.base::OnceCallback.179" = type { %"class.base::internal::CallbackBase" }
%"class.media::VideoFrame" = type { i32 (...)**, %"class.base::RefCountedThreadSafe.180", %"class.media::VideoFrameLayout", %class.scoped_refptr.186, i32, %"class.gfx::Rect", %"class.gfx::Size", [4 x i8*], [4 x %"struct.gpu::MailboxHolder"], %"class.base::OnceCallback.187", %"class.base::UnsafeSharedMemoryRegion"*, %"class.base::UnsafeSharedMemoryRegion", %"class.base::WritableSharedMemoryMapping", %"class.std::__1::unique_ptr.188", %class.scoped_refptr.194, %"class.std::__1::vector.195", %"class.base::TimeDelta", %"class.base::Lock", %"struct.gpu::SyncToken", %"struct.media::VideoFrameMetadata", i32, %"class.gfx::ColorSpace", %"class.absl::optional.237", [4 x i8], %"class.absl::optional.242", %"class.std::__1::unique_ptr.247" }
%"class.base::RefCountedThreadSafe.180" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.media::VideoFrameLayout" = type { i32, %"class.gfx::Size", %"class.std::__1::vector", i8, i64, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.media::ColorPlaneLayout"*, %"struct.media::ColorPlaneLayout"*, %"class.std::__1::__compressed_pair.181" }
%"struct.media::ColorPlaneLayout" = type { i32, i64, i64 }
%"class.std::__1::__compressed_pair.181" = type { %"struct.std::__1::__compressed_pair_elem.182" }
%"struct.std::__1::__compressed_pair_elem.182" = type { %"struct.media::ColorPlaneLayout"* }
%class.scoped_refptr.186 = type { %"class.media::VideoFrame"* }
%"struct.gpu::MailboxHolder" = type <{ %"struct.gpu::Mailbox", %"struct.gpu::SyncToken", i32, [4 x i8] }>
%"struct.gpu::Mailbox" = type { [16 x i8] }
%"class.base::OnceCallback.187" = type { %"class.base::internal::CallbackBase" }
%"class.base::UnsafeSharedMemoryRegion" = type { %"class.base::subtle::PlatformSharedMemoryRegion" }
%"class.base::subtle::PlatformSharedMemoryRegion" = type { %"struct.base::subtle::ScopedFDPair", i32, i64, %"class.base::UnguessableToken" }
%"struct.base::subtle::ScopedFDPair" = type { %"class.base::ScopedGeneric", %"class.base::ScopedGeneric" }
%"class.base::ScopedGeneric" = type <{ i32 (...)**, %"struct.base::ScopedGeneric<int, base::internal::ScopedFDCloseTraits>::Data", i8, [3 x i8] }>
%"struct.base::ScopedGeneric<int, base::internal::ScopedFDCloseTraits>::Data" = type { i32 }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.base::WritableSharedMemoryMapping" = type { %"class.base::SharedMemoryMapping" }
%"class.base::SharedMemoryMapping" = type { i32 (...)**, i8*, i64, i64, %"class.base::UnguessableToken" }
%"class.std::__1::unique_ptr.188" = type { %"class.std::__1::__compressed_pair.189" }
%"class.std::__1::__compressed_pair.189" = type { %"struct.std::__1::__compressed_pair_elem.190" }
%"struct.std::__1::__compressed_pair_elem.190" = type { %"class.gfx::GpuMemoryBuffer"* }
%"class.gfx::GpuMemoryBuffer" = type { i32 (...)** }
%class.scoped_refptr.194 = type { %"class.media::VideoFrame::DmabufHolder"* }
%"class.media::VideoFrame::DmabufHolder" = type opaque
%"class.std::__1::vector.195" = type { %"class.std::__1::__vector_base.196" }
%"class.std::__1::__vector_base.196" = type { %"class.base::OnceCallback"*, %"class.base::OnceCallback"*, %"class.std::__1::__compressed_pair.197" }
%"class.std::__1::__compressed_pair.197" = type { %"struct.std::__1::__compressed_pair_elem.198" }
%"struct.std::__1::__compressed_pair_elem.198" = type { %"class.base::OnceCallback"* }
%"struct.gpu::SyncToken" = type { i8, i8, %"class.util::IdType", i64 }
%"class.util::IdType" = type { %"class.base::StrongAlias" }
%"class.base::StrongAlias" = type { i64 }
%"struct.media::VideoFrameMetadata" = type { i8, %"class.absl::optional.202", %"class.absl::optional.202", %"class.absl::optional.207", %"class.absl::optional.212", %"class.absl::optional.217", i8, %"class.absl::optional.117", %"class.absl::optional.222", i8, %"class.absl::optional.202", i8, [3 x i8], %"class.absl::optional.227", i8, i8, i8, i8, i32, %"class.absl::optional.232", i8, %"class.absl::optional.222", %"class.absl::optional.222", %"class.absl::optional.222", %"class.absl::optional.222", %"class.absl::optional.222", %"class.absl::optional.202", %"class.absl::optional.202", %"class.absl::optional.117", %"class.absl::optional.222", %"class.absl::optional.202", %"class.absl::optional.117", %"class.absl::optional.207" }
%"class.absl::optional.212" = type { %"class.absl::optional_internal::optional_data.213" }
%"class.absl::optional_internal::optional_data.213" = type { %"class.absl::optional_internal::optional_data_base.214" }
%"class.absl::optional_internal::optional_data_base.214" = type { %"class.absl::optional_internal::optional_data_dtor_base.215" }
%"class.absl::optional_internal::optional_data_dtor_base.215" = type { i8, %union.anon.216 }
%union.anon.216 = type { %"class.gfx::Rect" }
%"class.absl::optional.217" = type { %"class.absl::optional_internal::optional_data.218" }
%"class.absl::optional_internal::optional_data.218" = type { %"class.absl::optional_internal::optional_data_base.219" }
%"class.absl::optional_internal::optional_data_base.219" = type { %"class.absl::optional_internal::optional_data_dtor_base.220" }
%"class.absl::optional_internal::optional_data_dtor_base.220" = type { i8, %union.anon.221 }
%union.anon.221 = type { i32 }
%"class.absl::optional.227" = type { %"class.absl::optional_internal::optional_data.228" }
%"class.absl::optional_internal::optional_data.228" = type { %"class.absl::optional_internal::optional_data_base.229" }
%"class.absl::optional_internal::optional_data_base.229" = type { %"class.absl::optional_internal::optional_data_dtor_base.230" }
%"class.absl::optional_internal::optional_data_dtor_base.230" = type { i8, [3 x i8], %union.anon.231 }
%union.anon.231 = type { %"struct.media::VideoTransformation" }
%"struct.media::VideoTransformation" = type <{ i32, i8, [3 x i8] }>
%"class.absl::optional.232" = type { %"class.absl::optional_internal::optional_data.233" }
%"class.absl::optional_internal::optional_data.233" = type { %"class.absl::optional_internal::optional_data_base.234" }
%"class.absl::optional_internal::optional_data_base.234" = type { %"class.absl::optional_internal::optional_data_dtor_base.235" }
%"class.absl::optional_internal::optional_data_dtor_base.235" = type { i8, %union.anon.236 }
%union.anon.236 = type { %"class.base::UnguessableToken" }
%"class.absl::optional.222" = type { %"class.absl::optional_internal::optional_data.223" }
%"class.absl::optional_internal::optional_data.223" = type { %"class.absl::optional_internal::optional_data_base.224" }
%"class.absl::optional_internal::optional_data_base.224" = type { %"class.absl::optional_internal::optional_data_dtor_base.225" }
%"class.absl::optional_internal::optional_data_dtor_base.225" = type { i8, %union.anon.226 }
%union.anon.226 = type { double }
%"class.absl::optional.202" = type { %"class.absl::optional_internal::optional_data.203" }
%"class.absl::optional_internal::optional_data.203" = type { %"class.absl::optional_internal::optional_data_base.204" }
%"class.absl::optional_internal::optional_data_base.204" = type { %"class.absl::optional_internal::optional_data_dtor_base.205" }
%"class.absl::optional_internal::optional_data_dtor_base.205" = type { i8, %union.anon.206 }
%union.anon.206 = type { %"class.base::TimeTicks" }
%"class.absl::optional.207" = type { %"class.absl::optional_internal::optional_data.208" }
%"class.absl::optional_internal::optional_data.208" = type { %"class.absl::optional_internal::optional_data_base.209" }
%"class.absl::optional_internal::optional_data_base.209" = type { %"class.absl::optional_internal::optional_data_dtor_base.210" }
%"class.absl::optional_internal::optional_data_dtor_base.210" = type { i8, %union.anon.211 }
%union.anon.211 = type { i32 }
%"class.absl::optional.237" = type { %"class.absl::optional_internal::optional_data.238" }
%"class.absl::optional_internal::optional_data.238" = type { %"class.absl::optional_internal::optional_data_base.239" }
%"class.absl::optional_internal::optional_data_base.239" = type { %"class.absl::optional_internal::optional_data_dtor_base.240" }
%"class.absl::optional_internal::optional_data_dtor_base.240" = type { i8, %union.anon.241 }
%union.anon.241 = type { %"struct.gfx::HDRMetadata" }
%"struct.gfx::HDRMetadata" = type { %"struct.gfx::MasteringMetadata", i32, i32 }
%"struct.gfx::MasteringMetadata" = type { %"class.gfx::PointF", %"class.gfx::PointF", %"class.gfx::PointF", %"class.gfx::PointF", float, float }
%"class.absl::optional.242" = type { %"class.absl::optional_internal::optional_data.243" }
%"class.absl::optional_internal::optional_data.243" = type { %"class.absl::optional_internal::optional_data_base.244" }
%"class.absl::optional_internal::optional_data_base.244" = type { %"class.absl::optional_internal::optional_data_dtor_base.245" }
%"class.absl::optional_internal::optional_data_dtor_base.245" = type { i8, [7 x i8], %union.anon.246 }
%union.anon.246 = type { %"struct.gpu::VulkanYCbCrInfo" }
%"struct.gpu::VulkanYCbCrInfo" = type <{ i32, [4 x i8], i64, i32, i32, i32, i32, i32, [4 x i8] }>
%"class.std::__1::unique_ptr.247" = type { %"class.std::__1::__compressed_pair.248" }
%"class.std::__1::__compressed_pair.248" = type { %"struct.std::__1::__compressed_pair_elem.249" }
%"struct.std::__1::__compressed_pair_elem.249" = type { i8* }
%"class.std::__1::vector.251" = type { %"class.std::__1::__vector_base.252" }
%"class.std::__1::__vector_base.252" = type { %"class.viz::VideoCaptureOverlay"**, %"class.viz::VideoCaptureOverlay"**, %"class.std::__1::__compressed_pair.253" }
%"class.std::__1::__compressed_pair.253" = type { %"struct.std::__1::__compressed_pair_elem.254" }
%"struct.std::__1::__compressed_pair_elem.254" = type { %"class.viz::VideoCaptureOverlay"** }
%"class.std::__1::vector.258" = type { %"class.std::__1::__vector_base.259" }
%"class.std::__1::__vector_base.259" = type { %"class.base::OnceCallback.179"*, %"class.base::OnceCallback.179"*, %"class.std::__1::__compressed_pair.260" }
%"class.std::__1::__compressed_pair.260" = type { %"struct.std::__1::__compressed_pair_elem.261" }
%"struct.std::__1::__compressed_pair_elem.261" = type { %"class.base::OnceCallback.179"* }
%"class.base::trace_event::TraceArguments" = type { i8, [2 x i8], [2 x i8*], [2 x %"union.base::trace_event::TraceValue"] }
%"union.base::trace_event::TraceValue" = type { i64 }
%"class.base::trace_event::ConvertableToTraceFormat" = type { i32 (...)** }
%"class.protozero::HeapBuffered" = type { %"class.protozero::ScatteredHeapBuffer", %"class.protozero::ScatteredStreamWriter", %"class.protozero::RootMessage" }
%"class.protozero::ScatteredHeapBuffer" = type { %"class.protozero::ScatteredStreamWriter::Delegate", i64, i64, %"class.protozero::ScatteredStreamWriter"*, %"class.std::__1::vector.331", %"class.protozero::ScatteredHeapBuffer::Slice" }
%"class.protozero::ScatteredStreamWriter::Delegate" = type { i32 (...)** }
%"class.std::__1::vector.331" = type { %"class.std::__1::__vector_base.332" }
%"class.std::__1::__vector_base.332" = type { %"class.protozero::ScatteredHeapBuffer::Slice"*, %"class.protozero::ScatteredHeapBuffer::Slice"*, %"class.std::__1::__compressed_pair.338" }
%"class.std::__1::__compressed_pair.338" = type { %"struct.std::__1::__compressed_pair_elem.339" }
%"struct.std::__1::__compressed_pair_elem.339" = type { %"class.protozero::ScatteredHeapBuffer::Slice"* }
%"class.protozero::ScatteredHeapBuffer::Slice" = type { %"class.std::__1::unique_ptr.333", i64, i64 }
%"class.std::__1::unique_ptr.333" = type { %"class.std::__1::__compressed_pair.334" }
%"class.std::__1::__compressed_pair.334" = type { %"struct.std::__1::__compressed_pair_elem.249" }
%"class.protozero::ScatteredStreamWriter" = type { %"class.protozero::ScatteredStreamWriter::Delegate"*, %"struct.protozero::ContiguousMemoryRange", i8*, i64 }
%"struct.protozero::ContiguousMemoryRange" = type { i8*, i8* }
%"class.protozero::RootMessage" = type { %"class.perfetto::protos::pbzero::DebugAnnotation.base", %"class.protozero::MessageArena" }
%"class.perfetto::protos::pbzero::DebugAnnotation.base" = type { %"class.protozero::Message.base" }
%"class.protozero::Message.base" = type <{ %"class.protozero::ScatteredStreamWriter"*, %"class.protozero::MessageArena"*, %"class.protozero::Message"*, i8*, i32, i32, i8 }>
%"class.protozero::Message" = type <{ %"class.protozero::ScatteredStreamWriter"*, %"class.protozero::MessageArena"*, %"class.protozero::Message"*, i8*, i32, i32, i8, [7 x i8] }>
%"class.protozero::MessageArena" = type { %"class.std::__1::list" }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.343" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.343" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%struct.SkSamplingOptions = type { i8, %struct.SkCubicResampler, i32, i32 }
%struct.SkCubicResampler = type { float, float }
%"class.gfx::Point3F" = type { float, float, float }
%"class.gfx::ColorTransform" = type { i32 (...)** }
%"class.mojo::Message" = type { %"class.mojo::ScopedHandleBase.279", %"class.mojo::internal::Buffer", %"class.std::__1::vector.280", %"class.std::__1::vector.288", %"class.mojo::ConnectionGroup::Ref"*, i8, i8, i8* }
%"class.mojo::ScopedHandleBase.279" = type { %"class.mojo::MessageHandle" }
%"class.mojo::MessageHandle" = type { i64 }
%"class.mojo::internal::Buffer" = type { %"class.mojo::MessageHandle", i64, i8*, i64, i64 }
%"class.std::__1::vector.280" = type { %"class.std::__1::__vector_base.281" }
%"class.std::__1::__vector_base.281" = type { %"class.mojo::ScopedHandleBase.282"*, %"class.mojo::ScopedHandleBase.282"*, %"class.std::__1::__compressed_pair.283" }
%"class.mojo::ScopedHandleBase.282" = type { %"class.mojo::Handle" }
%"class.std::__1::__compressed_pair.283" = type { %"struct.std::__1::__compressed_pair_elem.284" }
%"struct.std::__1::__compressed_pair_elem.284" = type { %"class.mojo::ScopedHandleBase.282"* }
%"class.std::__1::vector.288" = type { %"class.std::__1::__vector_base.289" }
%"class.std::__1::__vector_base.289" = type { %"class.mojo::ScopedInterfaceEndpointHandle"*, %"class.mojo::ScopedInterfaceEndpointHandle"*, %"class.std::__1::__compressed_pair.290" }
%"class.std::__1::__compressed_pair.290" = type { %"struct.std::__1::__compressed_pair_elem.291" }
%"struct.std::__1::__compressed_pair_elem.291" = type { %"class.mojo::ScopedInterfaceEndpointHandle"* }
%"class.mojo::MessageReceiverWithStatus" = type { %"class.mojo::MessageReceiver" }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZN20trace_event_internal13AddTraceEventIiiEEN4base11trace_event16TraceEventHandleEcPKhPKcS7_yjyS7_OT_S7_OT0_ = comdat any

$_ZN4mojo15MessageReceiverD2Ev = comdat any

$_ZN3viz5mojom32FrameSinkVideoCaptureOverlayStubIN4mojo19RawPtrImplRefTraitsINS0_28FrameSinkVideoCaptureOverlayEEEED0Ev = comdat any

$_ZN3viz5mojom32FrameSinkVideoCaptureOverlayStubIN4mojo19RawPtrImplRefTraitsINS0_28FrameSinkVideoCaptureOverlayEEEE6AcceptEPNS2_7MessageE = comdat any

$_ZN3viz5mojom32FrameSinkVideoCaptureOverlayStubIN4mojo19RawPtrImplRefTraitsINS0_28FrameSinkVideoCaptureOverlayEEEE19AcceptWithResponderEPNS2_7MessageENSt3__110unique_ptrINS2_25MessageReceiverWithStatusENS9_14default_deleteISB_EEEE = comdat any

$_ZN4base8internal7InvokerINS0_9BindStateIMN3viz19VideoCaptureOverlay11FrameSourceEFvPS4_EJNS0_17UnretainedWrapperIS5_EES6_EEEFvvEE7RunOnceEPNS0_13BindStateBaseE = comdat any

$_ZN4base8internal9BindStateIMN3viz19VideoCaptureOverlay11FrameSourceEFvPS3_EJNS0_17UnretainedWrapperIS4_EES5_EE7DestroyEPKNS0_13BindStateBaseE = comdat any

$_ZN4base8internal7InvokerINS0_9BindStateIMN3viz19VideoCaptureOverlay6SpriteEFvRKN3gfx5PointERKNS6_4RectEPN5media10VideoFrameEEJ13scoped_refptrIS5_ES7_SA_EEEFvSF_EE7RunOnceEPNS0_13BindStateBaseESF_ = comdat any

$_ZN4base8internal9BindStateIMN3viz19VideoCaptureOverlay6SpriteEFvRKN3gfx5PointERKNS5_4RectEPN5media10VideoFrameEEJ13scoped_refptrIS4_ES6_S9_EE7DestroyEPKNS0_13BindStateBaseE = comdat any

$_ZNSt3__16vectorIN4base12OnceCallbackIFvPN5media10VideoFrameEEEENS_9allocatorIS7_EEE24__emplace_back_slow_pathIJS7_EEEvDpOT_ = comdat any

$_ZTVN3viz5mojom32FrameSinkVideoCaptureOverlayStubIN4mojo19RawPtrImplRefTraitsINS0_28FrameSinkVideoCaptureOverlayEEEEE = comdat any

@_ZTVN3viz19VideoCaptureOverlayE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.viz::VideoCaptureOverlay"*)* @_ZN3viz19VideoCaptureOverlayD2Ev to i8*), i8* bitcast (void (%"class.viz::VideoCaptureOverlay"*)* @_ZN3viz19VideoCaptureOverlayD0Ev to i8*), i8* bitcast (void (%"class.viz::VideoCaptureOverlay"*, %class.SkBitmap*, %"class.gfx::RectF"*)* @_ZN3viz19VideoCaptureOverlay17SetImageAndBoundsERK8SkBitmapRKN3gfx5RectFE to i8*), i8* bitcast (void (%"class.viz::VideoCaptureOverlay"*, %"class.gfx::RectF"*)* @_ZN3viz19VideoCaptureOverlay9SetBoundsERKN3gfx5RectFE to i8*)] }, align 8
@_ZN4base11trace_event16CategoryRegistry11categories_E = external global [300 x %"struct.base::trace_event::TraceCategory"], align 16
@.str = private unnamed_addr constant [34 x i8] c"VideoCaptureOverlay::Sprite::Blit\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"y\00", align 1
@.str.3 = private unnamed_addr constant [44 x i8] c"VideoCaptureOverlay::Sprite::TransformImage\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"width\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"height\00", align 1
@_ZTVN3viz19VideoCaptureOverlay11FrameSourceE = hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%"class.viz::VideoCaptureOverlay::FrameSource"*)* @_ZN3viz19VideoCaptureOverlay11FrameSourceD2Ev to i8*), i8* bitcast (void (%"class.viz::VideoCaptureOverlay::FrameSource"*)* @_ZN3viz19VideoCaptureOverlay11FrameSourceD0Ev to i8*)] }, align 8
@_ZTVN3viz5mojom32FrameSinkVideoCaptureOverlayStubIN4mojo19RawPtrImplRefTraitsINS0_28FrameSinkVideoCaptureOverlayEEEEE = linkonce_odr hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.mojo::MessageReceiver"*)* @_ZN4mojo15MessageReceiverD2Ev to i8*), i8* bitcast (void (%"class.viz::mojom::FrameSinkVideoCaptureOverlayStub"*)* @_ZN3viz5mojom32FrameSinkVideoCaptureOverlayStubIN4mojo19RawPtrImplRefTraitsINS0_28FrameSinkVideoCaptureOverlayEEEED0Ev to i8*), i8* bitcast (i1 (%"class.mojo::MessageReceiver"*)* @_ZN4mojo15MessageReceiver25PrefersSerializedMessagesEv to i8*), i8* bitcast (i1 (%"class.viz::mojom::FrameSinkVideoCaptureOverlayStub"*, %"class.mojo::Message"*)* @_ZN3viz5mojom32FrameSinkVideoCaptureOverlayStubIN4mojo19RawPtrImplRefTraitsINS0_28FrameSinkVideoCaptureOverlayEEEE6AcceptEPNS2_7MessageE to i8*), i8* bitcast (i1 (%"class.viz::mojom::FrameSinkVideoCaptureOverlayStub"*, %"class.mojo::Message"*, %"class.mojo::MessageReceiverWithStatus"*)* @_ZN3viz5mojom32FrameSinkVideoCaptureOverlayStubIN4mojo19RawPtrImplRefTraitsINS0_28FrameSinkVideoCaptureOverlayEEEE19AcceptWithResponderEPNS2_7MessageENSt3__110unique_ptrINS2_25MessageReceiverWithStatusENS9_14default_deleteISB_EEEE to i8*)] }, comdat, align 8
@_ZN3viz5mojom28FrameSinkVideoCaptureOverlay5Name_E = external constant [0 x i8], align 1
@_ZTVN3viz5mojom44FrameSinkVideoCaptureOverlayRequestValidatorE = external unnamed_addr constant { [6 x i8*] }, align 8

@_ZN3viz19VideoCaptureOverlay11FrameSourceD1Ev = hidden unnamed_addr alias void (%"class.viz::VideoCaptureOverlay::FrameSource"*), void (%"class.viz::VideoCaptureOverlay::FrameSource"*)* @_ZN3viz19VideoCaptureOverlay11FrameSourceD2Ev
@_ZN3viz19VideoCaptureOverlayC1EPNS0_11FrameSourceEN4mojo15PendingReceiverINS_5mojom28FrameSinkVideoCaptureOverlayEEE = hidden unnamed_addr alias void (%"class.viz::VideoCaptureOverlay"*, %"class.viz::VideoCaptureOverlay::FrameSource"*, %"class.mojo::PendingReceiver"*), void (%"class.viz::VideoCaptureOverlay"*, %"class.viz::VideoCaptureOverlay::FrameSource"*, %"class.mojo::PendingReceiver"*)* @_ZN3viz19VideoCaptureOverlayC2EPNS0_11FrameSourceEN4mojo15PendingReceiverINS_5mojom28FrameSinkVideoCaptureOverlayEEE
@_ZN3viz19VideoCaptureOverlayD1Ev = hidden unnamed_addr alias void (%"class.viz::VideoCaptureOverlay"*), void (%"class.viz::VideoCaptureOverlay"*)* @_ZN3viz19VideoCaptureOverlayD2Ev
@_ZN3viz19VideoCaptureOverlay6SpriteC1ERK8SkBitmapRKN3gfx4SizeEN5media16VideoPixelFormatE = hidden unnamed_addr alias void (%"class.viz::VideoCaptureOverlay::Sprite"*, %class.SkBitmap*, %"class.gfx::Size"*, i32), void (%"class.viz::VideoCaptureOverlay::Sprite"*, %class.SkBitmap*, %"class.gfx::Size"*, i32)* @_ZN3viz19VideoCaptureOverlay6SpriteC2ERK8SkBitmapRKN3gfx4SizeEN5media16VideoPixelFormatE
@_ZN3viz19VideoCaptureOverlay6SpriteD1Ev = hidden unnamed_addr alias void (%"class.viz::VideoCaptureOverlay::Sprite"*), void (%"class.viz::VideoCaptureOverlay::Sprite"*)* @_ZN3viz19VideoCaptureOverlay6SpriteD2Ev

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN3viz19VideoCaptureOverlay11FrameSourceD2Ev(%"class.viz::VideoCaptureOverlay::FrameSource"* nocapture) unnamed_addr #0 align 2 {
  ret void
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN3viz19VideoCaptureOverlay11FrameSourceD0Ev(%"class.viz::VideoCaptureOverlay::FrameSource"* nocapture readnone) unnamed_addr #1 align 2 {
  tail call void @llvm.trap() #13
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz19VideoCaptureOverlayC2EPNS0_11FrameSourceEN4mojo15PendingReceiverINS_5mojom28FrameSinkVideoCaptureOverlayEEE(%"class.viz::VideoCaptureOverlay"*, %"class.viz::VideoCaptureOverlay::FrameSource"*, %"class.mojo::PendingReceiver"*) unnamed_addr #3 align 2 {
  %4 = alloca %"class.mojo::PendingReceiver", align 8
  %5 = alloca %"class.mojo::PendingReceiver", align 8
  %6 = alloca %"class.base::OnceCallback", align 8
  %7 = alloca %"class.base::OnceCallback", align 8
  %8 = alloca %"class.mojo::PendingReceiver", align 8
  %9 = alloca %"class.base::OnceCallback", align 8
  %10 = getelementptr inbounds %"class.viz::VideoCaptureOverlay", %"class.viz::VideoCaptureOverlay"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3viz19VideoCaptureOverlayE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %10, align 8
  %11 = getelementptr inbounds %"class.viz::VideoCaptureOverlay", %"class.viz::VideoCaptureOverlay"* %0, i64 0, i32 1
  store %"class.viz::VideoCaptureOverlay::FrameSource"* %1, %"class.viz::VideoCaptureOverlay::FrameSource"** %11, align 8
  %12 = getelementptr inbounds %"class.mojo::PendingReceiver", %"class.mojo::PendingReceiver"* %8, i64 0, i32 0
  %13 = getelementptr inbounds %"class.mojo::PendingReceiver", %"class.mojo::PendingReceiver"* %2, i64 0, i32 0
  call void @_ZN4mojo8internal20PendingReceiverStateC1EOS1_(%"struct.mojo::internal::PendingReceiverState"* nonnull %12, %"struct.mojo::internal::PendingReceiverState"* dereferenceable(24) %13) #14
  %14 = bitcast %"class.mojo::PendingReceiver"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %14)
  %15 = getelementptr inbounds %"class.mojo::PendingReceiver", %"class.mojo::PendingReceiver"* %5, i64 0, i32 0
  call void @_ZN4mojo8internal20PendingReceiverStateC1EOS1_(%"struct.mojo::internal::PendingReceiverState"* nonnull %15, %"struct.mojo::internal::PendingReceiverState"* nonnull dereferenceable(24) %12) #14
  %16 = bitcast %"class.mojo::PendingReceiver"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %16)
  %17 = getelementptr inbounds %"class.viz::VideoCaptureOverlay", %"class.viz::VideoCaptureOverlay"* %0, i64 0, i32 2, i32 0, i32 0
  call void @_ZN4mojo8internal16BindingStateBaseC2Ev(%"class.mojo::internal::BindingStateBase"* %17) #14
  %18 = getelementptr inbounds %"class.viz::VideoCaptureOverlay", %"class.viz::VideoCaptureOverlay"* %0, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN3viz5mojom32FrameSinkVideoCaptureOverlayStubIN4mojo19RawPtrImplRefTraitsINS0_28FrameSinkVideoCaptureOverlayEEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %18, align 8
  %19 = ptrtoint %"class.viz::VideoCaptureOverlay"* %0 to i64
  %20 = getelementptr inbounds %"class.viz::VideoCaptureOverlay", %"class.viz::VideoCaptureOverlay"* %0, i64 0, i32 2, i32 0, i32 1, i32 1
  %21 = bitcast %"class.viz::mojom::FrameSinkVideoCaptureOverlay"** %20 to i64*
  store i64 %19, i64* %21, align 8
  %22 = getelementptr inbounds %"class.mojo::PendingReceiver", %"class.mojo::PendingReceiver"* %4, i64 0, i32 0
  call void @_ZN4mojo8internal20PendingReceiverStateC1EOS1_(%"struct.mojo::internal::PendingReceiverState"* nonnull %22, %"struct.mojo::internal::PendingReceiverState"* nonnull dereferenceable(24) %15) #14
  %23 = getelementptr inbounds %"class.mojo::PendingReceiver", %"class.mojo::PendingReceiver"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = load i32, i32* %23, align 8
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %3
  %27 = call i8* @_Znwm(i64 8) #15
  %28 = bitcast i8* %27 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3viz5mojom44FrameSinkVideoCaptureOverlayRequestValidatorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %28, align 8
  %29 = getelementptr inbounds %"class.viz::VideoCaptureOverlay", %"class.viz::VideoCaptureOverlay"* %0, i64 0, i32 2, i32 0, i32 1, i32 0
  %30 = bitcast i8* %27 to %"class.mojo::MessageReceiver"*
  call void @_ZN4mojo8internal16BindingStateBase12BindInternalEPNS0_20PendingReceiverStateE13scoped_refptrIN4base19SequencedTaskRunnerEEPKcNSt3__110unique_ptrINS_15MessageReceiverENSA_14default_deleteISC_EEEEbbPNS_34MessageReceiverWithResponderStatusEj(%"class.mojo::internal::BindingStateBase"* %17, %"struct.mojo::internal::PendingReceiverState"* nonnull %22, %"class.base::SequencedTaskRunner"* null, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN3viz5mojom28FrameSinkVideoCaptureOverlay5Name_E, i64 0, i64 0), %"class.mojo::MessageReceiver"* nonnull %30, i1 zeroext false, i1 zeroext false, %"class.mojo::MessageReceiverWithResponderStatus"* %29, i32 0) #14
  br label %32

31:                                               ; preds = %3
  call void @_ZN4mojo8internal16BindingStateBase5CloseEv(%"class.mojo::internal::BindingStateBase"* %17) #14
  br label %32

32:                                               ; preds = %26, %31
  call void @_ZN4mojo8internal20PendingReceiverStateD1Ev(%"struct.mojo::internal::PendingReceiverState"* nonnull %22) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %16)
  call void @_ZN4mojo8internal20PendingReceiverStateD1Ev(%"struct.mojo::internal::PendingReceiverState"* nonnull %15) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %14)
  call void @_ZN4mojo8internal20PendingReceiverStateD1Ev(%"struct.mojo::internal::PendingReceiverState"* nonnull %12) #14
  %33 = getelementptr inbounds %"class.viz::VideoCaptureOverlay", %"class.viz::VideoCaptureOverlay"* %0, i64 0, i32 3
  call void @_ZN8SkBitmapC1Ev(%class.SkBitmap* %33) #14
  %34 = getelementptr inbounds %"class.viz::VideoCaptureOverlay", %"class.viz::VideoCaptureOverlay"* %0, i64 0, i32 4
  %35 = bitcast %"class.viz::VideoCaptureOverlay::FrameSource"** %11 to i64*
  %36 = bitcast %"class.gfx::RectF"* %34 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %36, i8 0, i64 24, i1 false)
  %37 = load i64, i64* %35, align 8
  %38 = call i8* @_Znwm(i64 64) #15, !noalias !2
  %39 = bitcast i8* %38 to %"class.base::internal::BindStateBase"*
  call void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"* nonnull %39, void ()* bitcast (void (%"class.base::internal::BindStateBase"*)* @_ZN4base8internal7InvokerINS0_9BindStateIMN3viz19VideoCaptureOverlay11FrameSourceEFvPS4_EJNS0_17UnretainedWrapperIS5_EES6_EEEFvvEE7RunOnceEPNS0_13BindStateBaseE to void ()*), void (%"class.base::internal::BindStateBase"*)* nonnull @_ZN4base8internal9BindStateIMN3viz19VideoCaptureOverlay11FrameSourceEFvPS3_EJNS0_17UnretainedWrapperIS4_EES5_EE7DestroyEPKNS0_13BindStateBaseE) #14, !noalias !2
  %40 = getelementptr inbounds i8, i8* %38, i64 32
  %41 = bitcast i8* %40 to <2 x i64>*
  store <2 x i64> <i64 25, i64 0>, <2 x i64>* %41, align 8, !noalias !2
  %42 = getelementptr inbounds i8, i8* %38, i64 48
  %43 = bitcast i8* %42 to i64*
  store i64 %37, i64* %43, align 8, !noalias !2
  %44 = getelementptr inbounds i8, i8* %38, i64 56
  %45 = bitcast i8* %44 to i64*
  store i64 %19, i64* %45, align 8, !noalias !2
  %46 = bitcast %"class.base::OnceCallback"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %46)
  %47 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %9, i64 0, i32 0, i32 0, i32 0
  %48 = ptrtoint i8* %38 to i64
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %47, align 8
  %49 = bitcast %"class.base::OnceCallback"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %49) #14
  %50 = getelementptr inbounds %"class.viz::VideoCaptureOverlay", %"class.viz::VideoCaptureOverlay"* %0, i64 0, i32 2, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %51 = load %"class.mojo::InterfaceEndpointClient"*, %"class.mojo::InterfaceEndpointClient"** %50, align 8
  %52 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %7, i64 0, i32 0, i32 0, i32 0
  %53 = bitcast %"class.base::OnceCallback"* %6 to i64*
  store i64 %48, i64* %53, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %52, align 8
  %54 = getelementptr inbounds %"class.mojo::InterfaceEndpointClient", %"class.mojo::InterfaceEndpointClient"* %51, i64 0, i32 17, i32 0
  %55 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %6, i64 0, i32 0
  %56 = call dereferenceable(8) %"class.base::internal::CallbackBase"* @_ZN4base8internal12CallbackBaseaSEOS1_(%"class.base::internal::CallbackBase"* %54, %"class.base::internal::CallbackBase"* nonnull dereferenceable(8) %55) #14
  %57 = getelementptr inbounds %"class.mojo::InterfaceEndpointClient", %"class.mojo::InterfaceEndpointClient"* %51, i64 0, i32 18, i32 0
  call void @_ZN4base8internal12CallbackBase5ResetEv(%"class.base::internal::CallbackBase"* %57) #14
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %55) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %49) #14
  %58 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %7, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %58) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %46)
  %59 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %9, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %59) #14
  ret void
}

declare void @_ZN8SkBitmapC1Ev(%class.SkBitmap*) unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz19VideoCaptureOverlayD2Ev(%"class.viz::VideoCaptureOverlay"*) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.viz::VideoCaptureOverlay", %"class.viz::VideoCaptureOverlay"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3viz19VideoCaptureOverlayE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.viz::VideoCaptureOverlay", %"class.viz::VideoCaptureOverlay"* %0, i64 0, i32 5, i32 0
  %4 = load %"class.viz::VideoCaptureOverlay::Sprite"*, %"class.viz::VideoCaptureOverlay::Sprite"** %3, align 8
  %5 = icmp eq %"class.viz::VideoCaptureOverlay::Sprite"* %4, null
  br i1 %5, label %23, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.viz::VideoCaptureOverlay::Sprite", %"class.viz::VideoCaptureOverlay::Sprite"* %4, i64 0, i32 0
  %8 = getelementptr inbounds %"class.viz::VideoCaptureOverlay::Sprite", %"class.viz::VideoCaptureOverlay::Sprite"* %4, i64 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %8) #14
  %9 = getelementptr inbounds %"class.viz::VideoCaptureOverlay::Sprite", %"class.viz::VideoCaptureOverlay::Sprite"* %4, i64 0, i32 0, i32 0, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %23

12:                                               ; preds = %6
  %13 = getelementptr inbounds %"class.base::RefCounted.166", %"class.base::RefCounted.166"* %7, i64 36
  %14 = bitcast %"class.base::RefCounted.166"* %13 to float**
  %15 = load float*, float** %14, align 8
  store float* null, float** %14, align 8
  %16 = icmp eq float* %15, null
  br i1 %16, label %19, label %17

17:                                               ; preds = %12
  %18 = bitcast float* %15 to i8*
  tail call void @_ZdaPv(i8* %18) #15
  br label %19

19:                                               ; preds = %17, %12
  %20 = getelementptr inbounds %"class.base::RefCounted.166", %"class.base::RefCounted.166"* %7, i64 2
  %21 = bitcast %"class.base::RefCounted.166"* %20 to %class.SkBitmap*
  tail call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* %21) #14
  %22 = bitcast %"class.viz::VideoCaptureOverlay::Sprite"* %4 to i8*
  tail call void @_ZdlPv(i8* %22) #15
  br label %23

23:                                               ; preds = %1, %6, %19
  %24 = getelementptr inbounds %"class.viz::VideoCaptureOverlay", %"class.viz::VideoCaptureOverlay"* %0, i64 0, i32 3
  tail call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* %24) #14
  %25 = getelementptr inbounds %"class.viz::VideoCaptureOverlay", %"class.viz::VideoCaptureOverlay"* %0, i64 0, i32 2, i32 0, i32 0
  tail call void @_ZN4mojo8internal16BindingStateBase5CloseEv(%"class.mojo::internal::BindingStateBase"* %25) #14
  tail call void @_ZN4mojo8internal16BindingStateBaseD2Ev(%"class.mojo::internal::BindingStateBase"* %25) #14
  ret void
}

; Function Attrs: nounwind
declare void @_ZN8SkBitmapD1Ev(%class.SkBitmap*) unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz19VideoCaptureOverlayD0Ev(%"class.viz::VideoCaptureOverlay"*) unnamed_addr #3 align 2 {
  tail call void @_ZN3viz19VideoCaptureOverlayD2Ev(%"class.viz::VideoCaptureOverlay"* %0) #14
  %2 = bitcast %"class.viz::VideoCaptureOverlay"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #15
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz19VideoCaptureOverlay17SetImageAndBoundsERK8SkBitmapRKN3gfx5RectFE(%"class.viz::VideoCaptureOverlay"*, %class.SkBitmap* dereferenceable(56), %"class.gfx::RectF"* nocapture readonly dereferenceable(16)) unnamed_addr #3 align 2 {
  %4 = alloca { i64, i64 }, align 8
  %5 = bitcast { i64, i64 }* %4 to %"class.gfx::Rect"*
  %6 = alloca { i64, i64 }, align 8
  %7 = bitcast { i64, i64 }* %6 to %"class.gfx::Rect"*
  %8 = bitcast { i64, i64 }* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %8) #14
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %4, i64 0, i32 1
  %10 = tail call { i64, i64 } @_ZNK3viz19VideoCaptureOverlay25ComputeSourceMutationRectEv(%"class.viz::VideoCaptureOverlay"* %0)
  %11 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %4, i64 0, i32 0
  %12 = extractvalue { i64, i64 } %10, 0
  store i64 %12, i64* %11, align 8
  %13 = extractvalue { i64, i64 } %10, 1
  store i64 %13, i64* %9, align 8
  %14 = getelementptr inbounds %"class.viz::VideoCaptureOverlay", %"class.viz::VideoCaptureOverlay"* %0, i64 0, i32 3
  %15 = tail call dereferenceable(56) %class.SkBitmap* @_ZN8SkBitmapaSERKS_(%class.SkBitmap* %14, %class.SkBitmap* dereferenceable(56) %1) #14
  %16 = getelementptr inbounds %"class.viz::VideoCaptureOverlay", %"class.viz::VideoCaptureOverlay"* %0, i64 0, i32 4
  %17 = bitcast %"class.gfx::RectF"* %16 to i8*
  %18 = bitcast %"class.gfx::RectF"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %17, i8* align 4 %18, i64 16, i1 false)
  %19 = getelementptr inbounds %"class.viz::VideoCaptureOverlay", %"class.viz::VideoCaptureOverlay"* %0, i64 0, i32 5
  %20 = bitcast %class.scoped_refptr.165* %19 to i64*
  %21 = getelementptr inbounds %class.scoped_refptr.165, %class.scoped_refptr.165* %19, i64 0, i32 0
  %22 = load %"class.viz::VideoCaptureOverlay::Sprite"*, %"class.viz::VideoCaptureOverlay::Sprite"** %21, align 8
  store i64 0, i64* %20, align 8
  %23 = icmp eq %"class.viz::VideoCaptureOverlay::Sprite"* %22, null
  %24 = trunc i64 %13 to i32
  br i1 %23, label %42, label %25

25:                                               ; preds = %3
  %26 = getelementptr inbounds %"class.viz::VideoCaptureOverlay::Sprite", %"class.viz::VideoCaptureOverlay::Sprite"* %22, i64 0, i32 0
  %27 = getelementptr inbounds %"class.viz::VideoCaptureOverlay::Sprite", %"class.viz::VideoCaptureOverlay::Sprite"* %22, i64 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %27) #14
  %28 = getelementptr inbounds %"class.viz::VideoCaptureOverlay::Sprite", %"class.viz::VideoCaptureOverlay::Sprite"* %22, i64 0, i32 0, i32 0, i32 0
  %29 = load i32, i32* %28, align 4
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %42

31:                                               ; preds = %25
  %32 = getelementptr inbounds %"class.base::RefCounted.166", %"class.base::RefCounted.166"* %26, i64 36
  %33 = bitcast %"class.base::RefCounted.166"* %32 to float**
  %34 = load float*, float** %33, align 8
  store float* null, float** %33, align 8
  %35 = icmp eq float* %34, null
  br i1 %35, label %38, label %36

36:                                               ; preds = %31
  %37 = bitcast float* %34 to i8*
  tail call void @_ZdaPv(i8* %37) #15
  br label %38

38:                                               ; preds = %36, %31
  %39 = getelementptr inbounds %"class.base::RefCounted.166", %"class.base::RefCounted.166"* %26, i64 2
  %40 = bitcast %"class.base::RefCounted.166"* %39 to %class.SkBitmap*
  tail call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* %40) #14
  %41 = bitcast %"class.viz::VideoCaptureOverlay::Sprite"* %22 to i8*
  tail call void @_ZdlPv(i8* %41) #15
  br label %42

42:                                               ; preds = %3, %25, %38
  %43 = bitcast { i64, i64 }* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %43) #14
  %44 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %45 = tail call { i64, i64 } @_ZNK3viz19VideoCaptureOverlay25ComputeSourceMutationRectEv(%"class.viz::VideoCaptureOverlay"* %0)
  %46 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 0
  %47 = extractvalue { i64, i64 } %45, 0
  store i64 %47, i64* %46, align 8
  %48 = extractvalue { i64, i64 } %45, 1
  store i64 %48, i64* %44, align 8
  %49 = trunc i64 %48 to i32
  %50 = icmp eq i32 %49, 0
  %51 = icmp ult i64 %48, 4294967296
  %52 = or i1 %50, %51
  br i1 %52, label %53, label %57

53:                                               ; preds = %42
  %54 = icmp eq i32 %24, 0
  %55 = icmp ult i64 %13, 4294967296
  %56 = or i1 %54, %55
  br i1 %56, label %74, label %57

57:                                               ; preds = %53, %42
  %58 = getelementptr inbounds %"class.viz::VideoCaptureOverlay", %"class.viz::VideoCaptureOverlay"* %0, i64 0, i32 1
  %59 = load %"class.viz::VideoCaptureOverlay::FrameSource"*, %"class.viz::VideoCaptureOverlay::FrameSource"** %58, align 8
  %60 = bitcast %"class.viz::VideoCaptureOverlay::FrameSource"* %59 to void (%"class.viz::VideoCaptureOverlay::FrameSource"*, %"class.gfx::Rect"*)***
  %61 = load void (%"class.viz::VideoCaptureOverlay::FrameSource"*, %"class.gfx::Rect"*)**, void (%"class.viz::VideoCaptureOverlay::FrameSource"*, %"class.gfx::Rect"*)*** %60, align 8
  %62 = getelementptr inbounds void (%"class.viz::VideoCaptureOverlay::FrameSource"*, %"class.gfx::Rect"*)*, void (%"class.viz::VideoCaptureOverlay::FrameSource"*, %"class.gfx::Rect"*)** %61, i64 1
  %63 = load void (%"class.viz::VideoCaptureOverlay::FrameSource"*, %"class.gfx::Rect"*)*, void (%"class.viz::VideoCaptureOverlay::FrameSource"*, %"class.gfx::Rect"*)** %62, align 8
  call void %63(%"class.viz::VideoCaptureOverlay::FrameSource"* %59, %"class.gfx::Rect"* nonnull dereferenceable(16) %5) #14
  %64 = load %"class.viz::VideoCaptureOverlay::FrameSource"*, %"class.viz::VideoCaptureOverlay::FrameSource"** %58, align 8
  %65 = bitcast %"class.viz::VideoCaptureOverlay::FrameSource"* %64 to void (%"class.viz::VideoCaptureOverlay::FrameSource"*, %"class.gfx::Rect"*)***
  %66 = load void (%"class.viz::VideoCaptureOverlay::FrameSource"*, %"class.gfx::Rect"*)**, void (%"class.viz::VideoCaptureOverlay::FrameSource"*, %"class.gfx::Rect"*)*** %65, align 8
  %67 = getelementptr inbounds void (%"class.viz::VideoCaptureOverlay::FrameSource"*, %"class.gfx::Rect"*)*, void (%"class.viz::VideoCaptureOverlay::FrameSource"*, %"class.gfx::Rect"*)** %66, i64 1
  %68 = load void (%"class.viz::VideoCaptureOverlay::FrameSource"*, %"class.gfx::Rect"*)*, void (%"class.viz::VideoCaptureOverlay::FrameSource"*, %"class.gfx::Rect"*)** %67, align 8
  call void %68(%"class.viz::VideoCaptureOverlay::FrameSource"* %64, %"class.gfx::Rect"* nonnull dereferenceable(16) %7) #14
  %69 = load %"class.viz::VideoCaptureOverlay::FrameSource"*, %"class.viz::VideoCaptureOverlay::FrameSource"** %58, align 8
  %70 = bitcast %"class.viz::VideoCaptureOverlay::FrameSource"* %69 to void (%"class.viz::VideoCaptureOverlay::FrameSource"*)***
  %71 = load void (%"class.viz::VideoCaptureOverlay::FrameSource"*)**, void (%"class.viz::VideoCaptureOverlay::FrameSource"*)*** %70, align 8
  %72 = getelementptr inbounds void (%"class.viz::VideoCaptureOverlay::FrameSource"*)*, void (%"class.viz::VideoCaptureOverlay::FrameSource"*)** %71, i64 2
  %73 = load void (%"class.viz::VideoCaptureOverlay::FrameSource"*)*, void (%"class.viz::VideoCaptureOverlay::FrameSource"*)** %72, align 8
  call void %73(%"class.viz::VideoCaptureOverlay::FrameSource"* %69) #14
  br label %74

74:                                               ; preds = %53, %57
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %43) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %8) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_ZNK3viz19VideoCaptureOverlay25ComputeSourceMutationRectEv(%"class.viz::VideoCaptureOverlay"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = alloca { i64, i64 }, align 8
  %3 = bitcast { i64, i64 }* %2 to %"class.gfx::Rect"*
  %4 = alloca { <2 x float>, <2 x float> }, align 8
  %5 = bitcast { <2 x float>, <2 x float> }* %4 to %"class.gfx::RectF"*
  %6 = alloca %"class.gfx::Rect", align 4
  %7 = getelementptr inbounds %"class.viz::VideoCaptureOverlay", %"class.viz::VideoCaptureOverlay"* %0, i64 0, i32 3, i32 1, i32 2, i32 1, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = icmp slt i32 %8, 1
  br i1 %9, label %71, label %10

10:                                               ; preds = %1
  %11 = getelementptr inbounds %"class.viz::VideoCaptureOverlay", %"class.viz::VideoCaptureOverlay"* %0, i64 0, i32 3, i32 1, i32 2, i32 1, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = icmp slt i32 %12, 1
  br i1 %13, label %71, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.viz::VideoCaptureOverlay", %"class.viz::VideoCaptureOverlay"* %0, i64 0, i32 3, i32 0, i32 0
  %16 = load %class.SkPixelRef*, %class.SkPixelRef** %15, align 8
  %17 = icmp eq %class.SkPixelRef* %16, null
  br i1 %17, label %71, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %"class.viz::VideoCaptureOverlay", %"class.viz::VideoCaptureOverlay"* %0, i64 0, i32 4, i32 1, i32 0
  %20 = load float, float* %19, align 4
  %21 = fcmp une float %20, 0.000000e+00
  br i1 %21, label %22, label %71

22:                                               ; preds = %18
  %23 = getelementptr inbounds %"class.viz::VideoCaptureOverlay", %"class.viz::VideoCaptureOverlay"* %0, i64 0, i32 4, i32 1, i32 1
  %24 = load float, float* %23, align 4
  %25 = fcmp oeq float %24, 0.000000e+00
  br i1 %25, label %71, label %26

26:                                               ; preds = %22
  %27 = getelementptr inbounds %"class.viz::VideoCaptureOverlay", %"class.viz::VideoCaptureOverlay"* %0, i64 0, i32 1
  %28 = load %"class.viz::VideoCaptureOverlay::FrameSource"*, %"class.viz::VideoCaptureOverlay::FrameSource"** %27, align 8
  %29 = bitcast %"class.viz::VideoCaptureOverlay::FrameSource"* %28 to i64 (%"class.viz::VideoCaptureOverlay::FrameSource"*)***
  %30 = load i64 (%"class.viz::VideoCaptureOverlay::FrameSource"*)**, i64 (%"class.viz::VideoCaptureOverlay::FrameSource"*)*** %29, align 8
  %31 = load i64 (%"class.viz::VideoCaptureOverlay::FrameSource"*)*, i64 (%"class.viz::VideoCaptureOverlay::FrameSource"*)** %30, align 8
  %32 = tail call i64 %31(%"class.viz::VideoCaptureOverlay::FrameSource"* %28) #14
  %33 = trunc i64 %32 to i32
  %34 = lshr i64 %32, 32
  %35 = trunc i64 %34 to i32
  %36 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %2, i64 0, i32 1
  %37 = bitcast { <2 x float>, <2 x float> }* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %37) #14
  %38 = sitofp i32 %33 to float
  %39 = sitofp i32 %35 to float
  %40 = getelementptr inbounds %"class.viz::VideoCaptureOverlay", %"class.viz::VideoCaptureOverlay"* %0, i64 0, i32 4, i32 0, i32 0
  %41 = load float, float* %40, align 4
  %42 = fmul float %41, %38
  %43 = getelementptr inbounds %"class.viz::VideoCaptureOverlay", %"class.viz::VideoCaptureOverlay"* %0, i64 0, i32 4, i32 0, i32 1
  %44 = load float, float* %43, align 4
  %45 = fmul float %44, %39
  %46 = load float, float* %19, align 4
  %47 = fmul float %46, %38
  %48 = load float, float* %23, align 4
  %49 = fmul float %48, %39
  %50 = insertelement <2 x float> undef, float %42, i32 0
  %51 = insertelement <2 x float> %50, float %45, i32 1
  %52 = fcmp ogt float %47, 0x3EB0000000000000
  %53 = select i1 %52, float %47, float 0.000000e+00
  %54 = insertelement <2 x float> undef, float %53, i32 0
  %55 = fcmp ogt float %49, 0x3EB0000000000000
  %56 = select i1 %55, float %49, float 0.000000e+00
  %57 = insertelement <2 x float> %54, float %56, i32 1
  %58 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %4, i64 0, i32 0
  store <2 x float> %51, <2 x float>* %58, align 8
  %59 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %4, i64 0, i32 1
  store <2 x float> %57, <2 x float>* %59, align 8
  %60 = call { i64, i64 } @_ZN3gfx15ToEnclosingRectERKNS_5RectFE(%"class.gfx::RectF"* nonnull dereferenceable(16) %5) #14
  %61 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %2, i64 0, i32 0
  %62 = extractvalue { i64, i64 } %60, 0
  store i64 %62, i64* %61, align 8
  %63 = extractvalue { i64, i64 } %60, 1
  store i64 %63, i64* %36, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %37) #14
  %64 = bitcast %"class.gfx::Rect"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %64) #14
  %65 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %6, i64 0, i32 0, i32 0
  store i32 0, i32* %65, align 4
  %66 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %6, i64 0, i32 0, i32 1
  store i32 0, i32* %66, align 4
  %67 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %6, i64 0, i32 1
  %68 = bitcast %"class.gfx::Size"* %67 to i64*
  store i64 %32, i64* %68, align 4
  call void @_ZN3gfx4Rect9IntersectERKS0_(%"class.gfx::Rect"* nonnull %3, %"class.gfx::Rect"* nonnull dereferenceable(16) %6) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %64) #14
  %69 = load i64, i64* %61, align 8
  %70 = load i64, i64* %36, align 8
  br label %73

71:                                               ; preds = %18, %1, %10, %22, %14
  %72 = bitcast { i64, i64 }* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %72, i8 0, i64 16, i1 false)
  br label %73

73:                                               ; preds = %71, %26
  %74 = phi i64 [ 0, %71 ], [ %70, %26 ]
  %75 = phi i64 [ 0, %71 ], [ %69, %26 ]
  %76 = insertvalue { i64, i64 } undef, i64 %75, 0
  %77 = insertvalue { i64, i64 } %76, i64 %74, 1
  ret { i64, i64 } %77
}

declare dereferenceable(56) %class.SkBitmap* @_ZN8SkBitmapaSERKS_(%class.SkBitmap*, %class.SkBitmap* dereferenceable(56)) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz19VideoCaptureOverlay9SetBoundsERKN3gfx5RectFE(%"class.viz::VideoCaptureOverlay"* nocapture, %"class.gfx::RectF"* nocapture readonly dereferenceable(16)) unnamed_addr #3 align 2 {
  %3 = alloca { i64, i64 }, align 8
  %4 = bitcast { i64, i64 }* %3 to %"class.gfx::Rect"*
  %5 = alloca { i64, i64 }, align 8
  %6 = bitcast { i64, i64 }* %5 to %"class.gfx::Rect"*
  %7 = getelementptr inbounds %"class.viz::VideoCaptureOverlay", %"class.viz::VideoCaptureOverlay"* %0, i64 0, i32 4
  %8 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %7, i64 0, i32 0, i32 0
  %9 = load float, float* %8, align 4
  %10 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %1, i64 0, i32 0, i32 0
  %11 = load float, float* %10, align 4
  %12 = fcmp oeq float %9, %11
  br i1 %12, label %13, label %31

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"class.viz::VideoCaptureOverlay", %"class.viz::VideoCaptureOverlay"* %0, i64 0, i32 4, i32 0, i32 1
  %15 = load float, float* %14, align 4
  %16 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %1, i64 0, i32 0, i32 1
  %17 = load float, float* %16, align 4
  %18 = fcmp oeq float %15, %17
  br i1 %18, label %19, label %31

19:                                               ; preds = %13
  %20 = getelementptr inbounds %"class.viz::VideoCaptureOverlay", %"class.viz::VideoCaptureOverlay"* %0, i64 0, i32 4, i32 1, i32 0
  %21 = load float, float* %20, align 4
  %22 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %1, i64 0, i32 1, i32 0
  %23 = load float, float* %22, align 4
  %24 = fcmp oeq float %21, %23
  br i1 %24, label %25, label %31

25:                                               ; preds = %19
  %26 = getelementptr inbounds %"class.viz::VideoCaptureOverlay", %"class.viz::VideoCaptureOverlay"* %0, i64 0, i32 4, i32 1, i32 1
  %27 = load float, float* %26, align 4
  %28 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %1, i64 0, i32 1, i32 1
  %29 = load float, float* %28, align 4
  %30 = fcmp une float %27, %29
  br i1 %30, label %31, label %73

31:                                               ; preds = %2, %19, %13, %25
  %32 = bitcast { i64, i64 }* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %32) #14
  %33 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i64 0, i32 1
  %34 = tail call { i64, i64 } @_ZNK3viz19VideoCaptureOverlay25ComputeSourceMutationRectEv(%"class.viz::VideoCaptureOverlay"* %0)
  %35 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i64 0, i32 0
  %36 = extractvalue { i64, i64 } %34, 0
  store i64 %36, i64* %35, align 8
  %37 = extractvalue { i64, i64 } %34, 1
  store i64 %37, i64* %33, align 8
  %38 = bitcast %"class.gfx::RectF"* %7 to i8*
  %39 = bitcast %"class.gfx::RectF"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %38, i8* align 4 %39, i64 16, i1 false)
  %40 = bitcast { i64, i64 }* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %40) #14
  %41 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i64 0, i32 1
  %42 = tail call { i64, i64 } @_ZNK3viz19VideoCaptureOverlay25ComputeSourceMutationRectEv(%"class.viz::VideoCaptureOverlay"* %0)
  %43 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i64 0, i32 0
  %44 = extractvalue { i64, i64 } %42, 0
  store i64 %44, i64* %43, align 8
  %45 = extractvalue { i64, i64 } %42, 1
  store i64 %45, i64* %41, align 8
  %46 = trunc i64 %45 to i32
  %47 = icmp eq i32 %46, 0
  %48 = icmp ult i64 %45, 4294967296
  %49 = or i1 %47, %48
  br i1 %49, label %50, label %55

50:                                               ; preds = %31
  %51 = trunc i64 %37 to i32
  %52 = icmp eq i32 %51, 0
  %53 = icmp ult i64 %37, 4294967296
  %54 = or i1 %52, %53
  br i1 %54, label %72, label %55

55:                                               ; preds = %50, %31
  %56 = getelementptr inbounds %"class.viz::VideoCaptureOverlay", %"class.viz::VideoCaptureOverlay"* %0, i64 0, i32 1
  %57 = load %"class.viz::VideoCaptureOverlay::FrameSource"*, %"class.viz::VideoCaptureOverlay::FrameSource"** %56, align 8
  %58 = bitcast %"class.viz::VideoCaptureOverlay::FrameSource"* %57 to void (%"class.viz::VideoCaptureOverlay::FrameSource"*, %"class.gfx::Rect"*)***
  %59 = load void (%"class.viz::VideoCaptureOverlay::FrameSource"*, %"class.gfx::Rect"*)**, void (%"class.viz::VideoCaptureOverlay::FrameSource"*, %"class.gfx::Rect"*)*** %58, align 8
  %60 = getelementptr inbounds void (%"class.viz::VideoCaptureOverlay::FrameSource"*, %"class.gfx::Rect"*)*, void (%"class.viz::VideoCaptureOverlay::FrameSource"*, %"class.gfx::Rect"*)** %59, i64 1
  %61 = load void (%"class.viz::VideoCaptureOverlay::FrameSource"*, %"class.gfx::Rect"*)*, void (%"class.viz::VideoCaptureOverlay::FrameSource"*, %"class.gfx::Rect"*)** %60, align 8
  call void %61(%"class.viz::VideoCaptureOverlay::FrameSource"* %57, %"class.gfx::Rect"* nonnull dereferenceable(16) %4) #14
  %62 = load %"class.viz::VideoCaptureOverlay::FrameSource"*, %"class.viz::VideoCaptureOverlay::FrameSource"** %56, align 8
  %63 = bitcast %"class.viz::VideoCaptureOverlay::FrameSource"* %62 to void (%"class.viz::VideoCaptureOverlay::FrameSource"*, %"class.gfx::Rect"*)***
  %64 = load void (%"class.viz::VideoCaptureOverlay::FrameSource"*, %"class.gfx::Rect"*)**, void (%"class.viz::VideoCaptureOverlay::FrameSource"*, %"class.gfx::Rect"*)*** %63, align 8
  %65 = getelementptr inbounds void (%"class.viz::VideoCaptureOverlay::FrameSource"*, %"class.gfx::Rect"*)*, void (%"class.viz::VideoCaptureOverlay::FrameSource"*, %"class.gfx::Rect"*)** %64, i64 1
  %66 = load void (%"class.viz::VideoCaptureOverlay::FrameSource"*, %"class.gfx::Rect"*)*, void (%"class.viz::VideoCaptureOverlay::FrameSource"*, %"class.gfx::Rect"*)** %65, align 8
  call void %66(%"class.viz::VideoCaptureOverlay::FrameSource"* %62, %"class.gfx::Rect"* nonnull dereferenceable(16) %6) #14
  %67 = load %"class.viz::VideoCaptureOverlay::FrameSource"*, %"class.viz::VideoCaptureOverlay::FrameSource"** %56, align 8
  %68 = bitcast %"class.viz::VideoCaptureOverlay::FrameSource"* %67 to void (%"class.viz::VideoCaptureOverlay::FrameSource"*)***
  %69 = load void (%"class.viz::VideoCaptureOverlay::FrameSource"*)**, void (%"class.viz::VideoCaptureOverlay::FrameSource"*)*** %68, align 8
  %70 = getelementptr inbounds void (%"class.viz::VideoCaptureOverlay::FrameSource"*)*, void (%"class.viz::VideoCaptureOverlay::FrameSource"*)** %69, i64 2
  %71 = load void (%"class.viz::VideoCaptureOverlay::FrameSource"*)*, void (%"class.viz::VideoCaptureOverlay::FrameSource"*)** %70, align 8
  call void %71(%"class.viz::VideoCaptureOverlay::FrameSource"* %67) #14
  br label %72

72:                                               ; preds = %50, %55
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %40) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %32) #14
  br label %73

73:                                               ; preds = %72, %25
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz19VideoCaptureOverlay12MakeRendererERKN3gfx4RectEN5media16VideoPixelFormatE(%"class.base::OnceCallback.179"* noalias nocapture sret, %"class.viz::VideoCaptureOverlay"*, %"class.gfx::Rect"* nocapture readonly dereferenceable(16), i32) local_unnamed_addr #3 align 2 {
  %5 = alloca { i64, i64 }, align 8
  %6 = bitcast { i64, i64 }* %5 to %"class.gfx::Rect"*
  %7 = alloca { i64, i64 }, align 8
  %8 = bitcast { i64, i64 }* %7 to %"class.gfx::Rect"*
  %9 = getelementptr inbounds %"class.viz::VideoCaptureOverlay", %"class.viz::VideoCaptureOverlay"* %1, i64 0, i32 3
  %10 = getelementptr inbounds %"class.viz::VideoCaptureOverlay", %"class.viz::VideoCaptureOverlay"* %1, i64 0, i32 3, i32 1, i32 2, i32 1, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = icmp slt i32 %11, 1
  br i1 %12, label %21, label %13

13:                                               ; preds = %4
  %14 = getelementptr inbounds %"class.viz::VideoCaptureOverlay", %"class.viz::VideoCaptureOverlay"* %1, i64 0, i32 3, i32 1, i32 2, i32 1, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = icmp slt i32 %15, 1
  br i1 %16, label %21, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %9, i64 0, i32 0, i32 0
  %19 = load %class.SkPixelRef*, %class.SkPixelRef** %18, align 8
  %20 = icmp eq %class.SkPixelRef* %19, null
  br i1 %20, label %21, label %23

21:                                               ; preds = %4, %13, %17
  %22 = getelementptr inbounds %"class.base::OnceCallback.179", %"class.base::OnceCallback.179"* %0, i64 0, i32 0, i32 0, i32 0
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %22, align 8
  br label %268

23:                                               ; preds = %17
  %24 = bitcast { i64, i64 }* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %24) #14
  %25 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i64 0, i32 1
  %26 = bitcast i64* %25 to i32*
  %27 = getelementptr inbounds %"class.viz::VideoCaptureOverlay", %"class.viz::VideoCaptureOverlay"* %1, i64 0, i32 4, i32 0, i32 0
  %28 = bitcast { i64, i64 }* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %28, i8 -86, i64 16, i1 false)
  %29 = load float, float* %27, align 4
  %30 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %2, i64 0, i32 1, i32 0
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %2, i64 0, i32 0, i32 0
  %33 = load i32, i32* %32, align 4
  %34 = fpext float %29 to double
  %35 = sitofp i32 %31 to double
  %36 = sitofp i32 %33 to double
  %37 = tail call double @llvm.fma.f64(double %34, double %35, double %36) #14
  %38 = fptrunc double %37 to float
  %39 = getelementptr inbounds %"class.viz::VideoCaptureOverlay", %"class.viz::VideoCaptureOverlay"* %1, i64 0, i32 4, i32 0, i32 1
  %40 = load float, float* %39, align 4
  %41 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %2, i64 0, i32 1, i32 1
  %42 = load i32, i32* %41, align 4
  %43 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %2, i64 0, i32 0, i32 1
  %44 = load i32, i32* %43, align 4
  %45 = fpext float %40 to double
  %46 = sitofp i32 %42 to double
  %47 = sitofp i32 %44 to double
  %48 = tail call double @llvm.fma.f64(double %45, double %46, double %47) #14
  %49 = fptrunc double %48 to float
  %50 = getelementptr inbounds %"class.viz::VideoCaptureOverlay", %"class.viz::VideoCaptureOverlay"* %1, i64 0, i32 4, i32 1, i32 0
  %51 = load float, float* %50, align 4
  %52 = fadd float %29, %51
  %53 = fpext float %52 to double
  %54 = tail call double @llvm.fma.f64(double %53, double %35, double %36) #14
  %55 = fptrunc double %54 to float
  %56 = getelementptr inbounds %"class.viz::VideoCaptureOverlay", %"class.viz::VideoCaptureOverlay"* %1, i64 0, i32 4, i32 1, i32 1
  %57 = load float, float* %56, align 4
  %58 = fadd float %40, %57
  %59 = fpext float %58 to double
  %60 = tail call double @llvm.fma.f64(double %59, double %46, double %47) #14
  %61 = fptrunc double %60 to float
  %62 = fmul float %38, 5.000000e-01
  %63 = tail call float @llvm.ceil.f32(float %62) #14
  %64 = fcmp ult float %63, -3.276800e+04
  %65 = fcmp ugt float %63, 3.276700e+04
  %66 = fcmp ogt float %63, -3.276800e+04
  %67 = select i1 %66, float %63, float -3.276800e+04
  %68 = fptosi float %67 to i16
  %69 = select i1 %64, i16 0, i16 32767
  %70 = select i1 %65, i16 %69, i16 %68
  %71 = sext i16 %70 to i32
  %72 = shl nsw i32 %71, 1
  %73 = fmul float %49, 5.000000e-01
  %74 = tail call float @llvm.ceil.f32(float %73) #14
  %75 = fcmp ult float %74, -3.276800e+04
  %76 = fcmp ugt float %74, 3.276700e+04
  %77 = fcmp ogt float %74, -3.276800e+04
  %78 = select i1 %77, float %74, float -3.276800e+04
  %79 = fptosi float %78 to i16
  %80 = select i1 %75, i16 0, i16 32767
  %81 = select i1 %76, i16 %80, i16 %79
  %82 = sext i16 %81 to i32
  %83 = shl nsw i32 %82, 1
  %84 = fmul float %55, 5.000000e-01
  %85 = tail call float @llvm.floor.f32(float %84) #14
  %86 = fcmp ult float %85, -3.276800e+04
  %87 = fcmp ugt float %85, 3.276700e+04
  %88 = fcmp ogt float %85, -3.276800e+04
  %89 = select i1 %88, float %85, float -3.276800e+04
  %90 = fptosi float %89 to i16
  %91 = select i1 %86, i16 0, i16 32767
  %92 = select i1 %87, i16 %91, i16 %90
  %93 = sext i16 %92 to i32
  %94 = shl nsw i32 %93, 1
  %95 = fmul float %61, 5.000000e-01
  %96 = tail call float @llvm.floor.f32(float %95) #14
  %97 = fcmp ult float %96, -3.276800e+04
  %98 = fcmp ugt float %96, 3.276700e+04
  %99 = fcmp ogt float %96, -3.276800e+04
  %100 = select i1 %99, float %96, float -3.276800e+04
  %101 = fptosi float %100 to i16
  %102 = select i1 %97, i16 0, i16 32767
  %103 = select i1 %98, i16 %102, i16 %101
  %104 = sext i16 %103 to i32
  %105 = shl nsw i32 %104, 1
  %106 = sub nsw i32 %94, %72
  %107 = icmp sgt i32 %106, 0
  %108 = select i1 %107, i32 %106, i32 0
  %109 = sub nsw i32 %105, %83
  %110 = icmp sgt i32 %109, 0
  %111 = select i1 %110, i32 %109, i32 0
  %112 = icmp sgt i16 %70, 0
  %113 = and i1 %112, %107
  %114 = sub nuw nsw i32 2147483647, %72
  %115 = icmp ult i32 %114, %108
  %116 = and i1 %113, %115
  %117 = select i1 %116, i32 %114, i32 %108
  %118 = icmp sgt i16 %81, 0
  %119 = and i1 %118, %110
  %120 = sub nuw nsw i32 2147483647, %83
  %121 = icmp ult i32 %120, %111
  %122 = and i1 %119, %121
  %123 = select i1 %122, i32 %120, i32 %111
  %124 = icmp sgt i32 %117, 0
  %125 = select i1 %124, i32 %117, i32 0
  %126 = icmp sgt i32 %123, 0
  %127 = select i1 %126, i32 %123, i32 0
  %128 = zext i32 %83 to i64
  %129 = shl nuw i64 %128, 32
  %130 = zext i32 %72 to i64
  %131 = or i64 %129, %130
  %132 = zext i32 %127 to i64
  %133 = shl nuw nsw i64 %132, 32
  %134 = zext i32 %125 to i64
  %135 = or i64 %133, %134
  %136 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i64 0, i32 0
  store i64 %131, i64* %136, align 8
  store i64 %135, i64* %25, align 8
  %137 = icmp sgt i32 %125, 32767
  %138 = icmp sgt i32 %127, 32767
  %139 = or i1 %137, %138
  br i1 %139, label %140, label %142

140:                                              ; preds = %23
  %141 = getelementptr inbounds %"class.base::OnceCallback.179", %"class.base::OnceCallback.179"* %0, i64 0, i32 0, i32 0, i32 0
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %141, align 8
  br label %267

142:                                              ; preds = %23
  %143 = bitcast { i64, i64 }* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %143) #14
  %144 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %145 = bitcast i64* %144 to i32*
  %146 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %8, i64 0, i32 1, i32 1
  %147 = srem i32 %33, 2
  %148 = add nsw i32 %147, %33
  %149 = srem i32 %44, 2
  %150 = add nsw i32 %149, %44
  %151 = add nsw i32 %33, %31
  %152 = srem i32 %151, 2
  %153 = sub nsw i32 %151, %152
  %154 = add nsw i32 %44, %42
  %155 = srem i32 %154, 2
  %156 = sub nsw i32 %154, %155
  %157 = sub i32 %153, %148
  %158 = icmp sgt i32 %157, 0
  %159 = select i1 %158, i32 %157, i32 0
  %160 = sub i32 %156, %150
  %161 = icmp sgt i32 %160, 0
  %162 = select i1 %161, i32 %160, i32 0
  %163 = icmp sgt i32 %148, 0
  %164 = and i1 %163, %158
  %165 = sub nuw nsw i32 2147483647, %148
  %166 = icmp ult i32 %165, %159
  %167 = and i1 %164, %166
  %168 = select i1 %167, i32 %165, i32 %159
  %169 = icmp sgt i32 %150, 0
  %170 = and i1 %169, %161
  %171 = sub nuw nsw i32 2147483647, %150
  %172 = icmp ult i32 %171, %162
  %173 = and i1 %170, %172
  %174 = select i1 %173, i32 %171, i32 %162
  %175 = icmp sgt i32 %168, 0
  %176 = select i1 %175, i32 %168, i32 0
  %177 = icmp sgt i32 %174, 0
  %178 = select i1 %177, i32 %174, i32 0
  %179 = zext i32 %150 to i64
  %180 = shl nuw i64 %179, 32
  %181 = zext i32 %148 to i64
  %182 = or i64 %180, %181
  %183 = zext i32 %178 to i64
  %184 = shl nuw nsw i64 %183, 32
  %185 = zext i32 %176 to i64
  %186 = or i64 %184, %185
  %187 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 0
  store i64 %182, i64* %187, align 8
  store i64 %186, i64* %144, align 8
  call void @_ZN3gfx4Rect9IntersectERKS0_(%"class.gfx::Rect"* nonnull %8, %"class.gfx::Rect"* nonnull dereferenceable(16) %6) #14
  %188 = load i32, i32* %145, align 8
  %189 = icmp eq i32 %188, 0
  %190 = load i32, i32* %146, align 4
  %191 = icmp eq i32 %190, 0
  %192 = or i1 %189, %191
  br i1 %192, label %193, label %195

193:                                              ; preds = %142
  %194 = getelementptr inbounds %"class.base::OnceCallback.179", %"class.base::OnceCallback.179"* %0, i64 0, i32 0, i32 0, i32 0
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %194, align 8
  br label %266

195:                                              ; preds = %142
  %196 = getelementptr inbounds %"class.viz::VideoCaptureOverlay", %"class.viz::VideoCaptureOverlay"* %1, i64 0, i32 5
  %197 = getelementptr inbounds %class.scoped_refptr.165, %class.scoped_refptr.165* %196, i64 0, i32 0
  %198 = load %"class.viz::VideoCaptureOverlay::Sprite"*, %"class.viz::VideoCaptureOverlay::Sprite"** %197, align 8
  %199 = icmp eq %"class.viz::VideoCaptureOverlay::Sprite"* %198, null
  br i1 %199, label %216, label %200

200:                                              ; preds = %195
  %201 = getelementptr inbounds %"class.viz::VideoCaptureOverlay::Sprite", %"class.viz::VideoCaptureOverlay::Sprite"* %198, i64 0, i32 2, i32 0
  %202 = load i32, i32* %201, align 4
  %203 = load i32, i32* %26, align 8
  %204 = icmp eq i32 %202, %203
  br i1 %204, label %205, label %216

205:                                              ; preds = %200
  %206 = bitcast i64* %25 to %"class.gfx::Size"*
  %207 = getelementptr inbounds %"class.viz::VideoCaptureOverlay::Sprite", %"class.viz::VideoCaptureOverlay::Sprite"* %198, i64 0, i32 2, i32 1
  %208 = load i32, i32* %207, align 4
  %209 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %206, i64 0, i32 1
  %210 = load i32, i32* %209, align 4
  %211 = icmp eq i32 %208, %210
  br i1 %211, label %212, label %216

212:                                              ; preds = %205
  %213 = getelementptr inbounds %"class.viz::VideoCaptureOverlay::Sprite", %"class.viz::VideoCaptureOverlay::Sprite"* %198, i64 0, i32 3
  %214 = load i32, i32* %213, align 8
  %215 = icmp eq i32 %214, %3
  br i1 %215, label %249, label %216

216:                                              ; preds = %205, %195, %200, %212
  %217 = call i8* @_Znwm(i64 152) #15
  %218 = bitcast i8* %217 to i32*
  store i32 0, i32* %218, align 4
  %219 = getelementptr inbounds i8, i8* %217, i64 8
  %220 = bitcast i8* %219 to %class.SkBitmap*
  call void @_ZN8SkBitmapC1ERKS_(%class.SkBitmap* %220, %class.SkBitmap* dereferenceable(56) %9) #14
  %221 = getelementptr inbounds i8, i8* %217, i64 64
  %222 = bitcast i8* %221 to i64*
  %223 = load i64, i64* %25, align 8
  store i64 %223, i64* %222, align 8
  %224 = getelementptr inbounds i8, i8* %217, i64 72
  %225 = bitcast i8* %224 to i32*
  store i32 %3, i32* %225, align 8
  %226 = getelementptr inbounds i8, i8* %217, i64 76
  call void @llvm.memset.p0i8.i64(i8* align 4 %226, i8 0, i64 76, i1 false) #14
  %227 = bitcast i8* %217 to %"class.base::subtle::RefCountedBase"*
  call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* nonnull %227) #14
  %228 = ptrtoint i8* %217 to i64
  %229 = bitcast %class.scoped_refptr.165* %196 to i64*
  %230 = load %"class.viz::VideoCaptureOverlay::Sprite"*, %"class.viz::VideoCaptureOverlay::Sprite"** %197, align 8
  store i64 %228, i64* %229, align 8
  %231 = icmp eq %"class.viz::VideoCaptureOverlay::Sprite"* %230, null
  br i1 %231, label %249, label %232

232:                                              ; preds = %216
  %233 = getelementptr inbounds %"class.viz::VideoCaptureOverlay::Sprite", %"class.viz::VideoCaptureOverlay::Sprite"* %230, i64 0, i32 0
  %234 = getelementptr inbounds %"class.viz::VideoCaptureOverlay::Sprite", %"class.viz::VideoCaptureOverlay::Sprite"* %230, i64 0, i32 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %234) #14
  %235 = getelementptr inbounds %"class.viz::VideoCaptureOverlay::Sprite", %"class.viz::VideoCaptureOverlay::Sprite"* %230, i64 0, i32 0, i32 0, i32 0
  %236 = load i32, i32* %235, align 4
  %237 = icmp eq i32 %236, 0
  br i1 %237, label %238, label %249

238:                                              ; preds = %232
  %239 = getelementptr inbounds %"class.base::RefCounted.166", %"class.base::RefCounted.166"* %233, i64 36
  %240 = bitcast %"class.base::RefCounted.166"* %239 to float**
  %241 = load float*, float** %240, align 8
  store float* null, float** %240, align 8
  %242 = icmp eq float* %241, null
  br i1 %242, label %245, label %243

243:                                              ; preds = %238
  %244 = bitcast float* %241 to i8*
  call void @_ZdaPv(i8* %244) #15
  br label %245

245:                                              ; preds = %243, %238
  %246 = getelementptr inbounds %"class.base::RefCounted.166", %"class.base::RefCounted.166"* %233, i64 2
  %247 = bitcast %"class.base::RefCounted.166"* %246 to %class.SkBitmap*
  call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* %247) #14
  %248 = bitcast %"class.viz::VideoCaptureOverlay::Sprite"* %230 to i8*
  call void @_ZdlPv(i8* %248) #15
  br label %249

249:                                              ; preds = %245, %232, %216, %212
  %250 = call i8* @_Znwm(i64 80) #15, !noalias !7
  %251 = bitcast i8* %250 to %"class.base::internal::BindStateBase"*
  call void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"* nonnull %251, void ()* bitcast (void (%"class.base::internal::BindStateBase"*, %"class.media::VideoFrame"*)* @_ZN4base8internal7InvokerINS0_9BindStateIMN3viz19VideoCaptureOverlay6SpriteEFvRKN3gfx5PointERKNS6_4RectEPN5media10VideoFrameEEJ13scoped_refptrIS5_ES7_SA_EEEFvSF_EE7RunOnceEPNS0_13BindStateBaseESF_ to void ()*), void (%"class.base::internal::BindStateBase"*)* nonnull @_ZN4base8internal9BindStateIMN3viz19VideoCaptureOverlay6SpriteEFvRKN3gfx5PointERKNS5_4RectEPN5media10VideoFrameEEJ13scoped_refptrIS4_ES6_S9_EE7DestroyEPKNS0_13BindStateBaseE) #14, !noalias !7
  %252 = getelementptr inbounds i8, i8* %250, i64 32
  %253 = bitcast i8* %252 to <2 x i64>*
  store <2 x i64> <i64 ptrtoint (void (%"class.viz::VideoCaptureOverlay::Sprite"*, %"class.gfx::Point"*, %"class.gfx::Rect"*, %"class.media::VideoFrame"*)* @_ZN3viz19VideoCaptureOverlay6Sprite4BlitERKN3gfx5PointERKNS2_4RectEPN5media10VideoFrameE to i64), i64 0>, <2 x i64>* %253, align 8, !noalias !7
  %254 = load %"class.viz::VideoCaptureOverlay::Sprite"*, %"class.viz::VideoCaptureOverlay::Sprite"** %197, align 8, !noalias !7
  %255 = getelementptr inbounds i8, i8* %250, i64 48
  %256 = bitcast i8* %255 to %"class.viz::VideoCaptureOverlay::Sprite"**
  store %"class.viz::VideoCaptureOverlay::Sprite"* %254, %"class.viz::VideoCaptureOverlay::Sprite"** %256, align 8, !noalias !7
  %257 = icmp eq %"class.viz::VideoCaptureOverlay::Sprite"* %254, null
  br i1 %257, label %260, label %258

258:                                              ; preds = %249
  %259 = getelementptr inbounds %"class.viz::VideoCaptureOverlay::Sprite", %"class.viz::VideoCaptureOverlay::Sprite"* %254, i64 0, i32 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %259) #14, !noalias !7
  br label %260

260:                                              ; preds = %249, %258
  %261 = getelementptr inbounds i8, i8* %250, i64 56
  %262 = bitcast i8* %261 to i64*
  %263 = load i64, i64* %136, align 8, !noalias !7
  store i64 %263, i64* %262, align 4, !noalias !7
  %264 = getelementptr inbounds i8, i8* %250, i64 64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %264, i8* nonnull align 8 %143, i64 16, i1 false) #14, !noalias !7
  %265 = bitcast %"class.base::OnceCallback.179"* %0 to i8**
  store i8* %250, i8** %265, align 8, !alias.scope !7
  br label %266

266:                                              ; preds = %260, %193
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %143) #14
  br label %267

267:                                              ; preds = %266, %140
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %24) #14
  br label %268

268:                                              ; preds = %267, %21
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

declare void @_ZN3gfx4Rect9IntersectERKS0_(%"class.gfx::Rect"*, %"class.gfx::Rect"* dereferenceable(16)) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz19VideoCaptureOverlay6Sprite4BlitERKN3gfx5PointERKNS2_4RectEPN5media10VideoFrameE(%"class.viz::VideoCaptureOverlay::Sprite"*, %"class.gfx::Point"* nocapture readonly dereferenceable(8), %"class.gfx::Rect"* nocapture readonly dereferenceable(16), %"class.media::VideoFrame"*) #3 align 2 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca %"class.gfx::ColorSpace", align 4
  %8 = alloca %"class.gfx::ColorSpace", align 4
  %9 = load i8, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 61, i32 0), align 16
  %10 = and i8 %9, 25
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %20, label %12, !prof !12

12:                                               ; preds = %4
  %13 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13) #14
  %14 = getelementptr inbounds %"class.gfx::Point", %"class.gfx::Point"* %1, i64 0, i32 0
  %15 = load i32, i32* %14, align 4
  store i32 %15, i32* %5, align 4
  %16 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16) #14
  %17 = getelementptr inbounds %"class.gfx::Point", %"class.gfx::Point"* %1, i64 0, i32 1
  %18 = load i32, i32* %17, align 4
  store i32 %18, i32* %6, align 4
  %19 = call i64 @_ZN20trace_event_internal13AddTraceEventIiiEEN4base11trace_event16TraceEventHandleEcPKhPKcS7_yjyS7_OT_S7_OT0_(i8 signext 88, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 61, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i8* null, i64 0, i32 0, i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0), i32* nonnull dereferenceable(4) %5, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i32* nonnull dereferenceable(4) %6)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16) #14
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #14
  br label %20

20:                                               ; preds = %4, %12
  %21 = phi i8* [ null, %4 ], [ getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 61, i32 0), %12 ]
  %22 = phi i8* [ inttoptr (i64 -6148914691236517206 to i8*), %4 ], [ getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), %12 ]
  %23 = phi i64 [ -6148914691236517206, %4 ], [ %19, %12 ]
  %24 = getelementptr inbounds %"class.viz::VideoCaptureOverlay::Sprite", %"class.viz::VideoCaptureOverlay::Sprite"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %25 = load float*, float** %24, align 8
  %26 = icmp eq float* %25, null
  %27 = getelementptr inbounds %"class.gfx::ColorSpace", %"class.gfx::ColorSpace"* %7, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %27) #14
  br i1 %26, label %31, label %28

28:                                               ; preds = %20
  %29 = getelementptr inbounds %"class.viz::VideoCaptureOverlay::Sprite", %"class.viz::VideoCaptureOverlay::Sprite"* %0, i64 0, i32 4
  call void @_ZNK5media10VideoFrame10ColorSpaceEv(%"class.gfx::ColorSpace"* nonnull sret %7, %"class.media::VideoFrame"* %3) #14
  %30 = call zeroext i1 @_ZNK3gfx10ColorSpaceneERKS0_(%"class.gfx::ColorSpace"* %29, %"class.gfx::ColorSpace"* nonnull dereferenceable(68) %7) #14
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %27) #14
  br i1 %30, label %32, label %35

31:                                               ; preds = %20
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %27) #14
  br label %32

32:                                               ; preds = %31, %28
  %33 = getelementptr inbounds %"class.gfx::ColorSpace", %"class.gfx::ColorSpace"* %8, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %33) #14
  call void @_ZNK5media10VideoFrame10ColorSpaceEv(%"class.gfx::ColorSpace"* nonnull sret %8, %"class.media::VideoFrame"* %3) #14
  %34 = getelementptr inbounds %"class.viz::VideoCaptureOverlay::Sprite", %"class.viz::VideoCaptureOverlay::Sprite"* %0, i64 0, i32 4, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %34, i8* nonnull align 4 %33, i64 68, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %33) #14
  call void @_ZN3viz19VideoCaptureOverlay6Sprite14TransformImageEv(%"class.viz::VideoCaptureOverlay::Sprite"* %0)
  br label %35

35:                                               ; preds = %32, %28
  %36 = getelementptr inbounds %"class.gfx::Point", %"class.gfx::Point"* %1, i64 0, i32 0
  %37 = load i32, i32* %36, align 4
  %38 = getelementptr inbounds %"class.gfx::Point", %"class.gfx::Point"* %1, i64 0, i32 1
  %39 = load i32, i32* %38, align 4
  %40 = bitcast %"class.gfx::Rect"* %2 to i64*
  %41 = load i64, i64* %40, align 4
  %42 = trunc i64 %41 to i32
  %43 = lshr i64 %41, 32
  %44 = trunc i64 %43 to i32
  %45 = icmp sgt i32 %37, -1
  %46 = select i1 %45, i32 -2147483648, i32 2147483647
  %47 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %42, i32 %37) #14
  %48 = extractvalue { i32, i1 } %47, 1
  %49 = extractvalue { i32, i1 } %47, 0
  %50 = select i1 %48, i32 %46, i32 %49, !prof !13
  %51 = icmp sgt i32 %39, -1
  %52 = select i1 %51, i32 -2147483648, i32 2147483647
  %53 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %44, i32 %39) #14
  %54 = extractvalue { i32, i1 } %53, 1
  %55 = extractvalue { i32, i1 } %53, 0
  %56 = select i1 %54, i32 %52, i32 %55, !prof !13
  %57 = getelementptr inbounds %"class.media::VideoFrame", %"class.media::VideoFrame"* %3, i64 0, i32 2, i32 0
  %58 = load i32, i32* %57, align 8
  switch i32 %58, label %583 [
    i32 1, label %59
    i32 10, label %435
  ]

59:                                               ; preds = %35
  %60 = getelementptr inbounds %"class.viz::VideoCaptureOverlay::Sprite", %"class.viz::VideoCaptureOverlay::Sprite"* %0, i64 0, i32 2
  %61 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %60, i64 0, i32 0
  %62 = load i32, i32* %61, align 4
  %63 = load float*, float** %24, align 8
  %64 = mul nsw i32 %62, %56
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds float, float* %63, i64 %65
  %67 = sext i32 %50 to i64
  %68 = getelementptr inbounds float, float* %66, i64 %67
  %69 = call i32 @_ZNK3gfx4Size7GetAreaEv(%"class.gfx::Size"* %60) #14
  %70 = getelementptr inbounds %"class.media::VideoFrame", %"class.media::VideoFrame"* %3, i64 0, i32 2, i32 2, i32 0, i32 0
  %71 = load %"struct.media::ColorPlaneLayout"*, %"struct.media::ColorPlaneLayout"** %70, align 8
  %72 = getelementptr inbounds %"struct.media::ColorPlaneLayout", %"struct.media::ColorPlaneLayout"* %71, i64 0, i32 0
  %73 = load i32, i32* %72, align 8
  %74 = call i8* @_ZN5media10VideoFrame12visible_dataEm(%"class.media::VideoFrame"* %3, i64 0) #14
  %75 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %2, i64 0, i32 1, i32 1
  %76 = load i32, i32* %75, align 4
  %77 = icmp sgt i32 %76, 0
  br i1 %77, label %78, label %135

78:                                               ; preds = %59
  %79 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %2, i64 0, i32 0, i32 1
  %80 = load i32, i32* %79, align 4
  %81 = mul nsw i32 %80, %73
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds i8, i8* %74, i64 %82
  %84 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %2, i64 0, i32 0, i32 0
  %85 = load i32, i32* %84, align 4
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds i8, i8* %83, i64 %86
  %88 = sext i32 %69 to i64
  %89 = getelementptr inbounds float, float* %68, i64 %88
  %90 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %2, i64 0, i32 1, i32 0
  %91 = sext i32 %62 to i64
  %92 = sext i32 %73 to i64
  %93 = load i32, i32* %90, align 4
  br label %94

94:                                               ; preds = %104, %78
  %95 = phi i32 [ %76, %78 ], [ %105, %104 ]
  %96 = phi i32 [ %93, %78 ], [ %106, %104 ]
  %97 = phi i32 [ 0, %78 ], [ %107, %104 ]
  %98 = phi i8* [ %87, %78 ], [ %110, %104 ]
  %99 = phi float* [ %89, %78 ], [ %108, %104 ]
  %100 = phi float* [ %68, %78 ], [ %109, %104 ]
  %101 = icmp sgt i32 %96, 0
  br i1 %101, label %112, label %104

102:                                              ; preds = %112
  %103 = load i32, i32* %75, align 4
  br label %104

104:                                              ; preds = %102, %94
  %105 = phi i32 [ %103, %102 ], [ %95, %94 ]
  %106 = phi i32 [ %132, %102 ], [ %96, %94 ]
  %107 = add nuw nsw i32 %97, 1
  %108 = getelementptr inbounds float, float* %99, i64 %91
  %109 = getelementptr inbounds float, float* %100, i64 %91
  %110 = getelementptr inbounds i8, i8* %98, i64 %92
  %111 = icmp slt i32 %107, %105
  br i1 %111, label %94, label %135

112:                                              ; preds = %94, %112
  %113 = phi i64 [ %131, %112 ], [ 0, %94 ]
  %114 = getelementptr inbounds i8, i8* %98, i64 %113
  %115 = load i8, i8* %114, align 1
  %116 = uitofp i8 %115 to float
  %117 = fdiv float %116, 2.550000e+02
  %118 = getelementptr inbounds float, float* %100, i64 %113
  %119 = load float, float* %118, align 4
  %120 = getelementptr inbounds float, float* %99, i64 %113
  %121 = load float, float* %120, align 4
  %122 = call float @llvm.fma.f32(float %117, float %119, float %121) #14
  %123 = call float @llvm.fma.f32(float %122, float 2.550000e+02, float 5.000000e-01) #14
  %124 = fcmp ule float %123, -1.000000e+00
  %125 = fcmp ugt float %123, 2.550000e+02
  %126 = fptoui float %123 to i8
  %127 = select i1 %124, i8 0, i8 %126
  %128 = xor i1 %124, true
  %129 = sext i1 %128 to i8
  %130 = select i1 %125, i8 %129, i8 %127
  store i8 %130, i8* %114, align 1
  %131 = add nuw nsw i64 %113, 1
  %132 = load i32, i32* %90, align 4
  %133 = sext i32 %132 to i64
  %134 = icmp slt i64 %131, %133
  br i1 %134, label %112, label %102

135:                                              ; preds = %104, %59
  %136 = load i32, i32* %61, align 4
  %137 = sdiv i32 %136, 2
  %138 = sdiv i32 %50, 2
  %139 = sdiv i32 %56, 2
  %140 = load float*, float** %24, align 8
  %141 = shl nsw i32 %69, 1
  %142 = sext i32 %141 to i64
  %143 = getelementptr inbounds float, float* %140, i64 %142
  %144 = mul nsw i32 %137, %139
  %145 = sext i32 %144 to i64
  %146 = getelementptr inbounds float, float* %143, i64 %145
  %147 = sext i32 %138 to i64
  %148 = getelementptr inbounds float, float* %146, i64 %147
  %149 = call i32 @_ZNK3gfx4Size7GetAreaEv(%"class.gfx::Size"* %60) #14
  %150 = sdiv i32 %149, 4
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds float, float* %148, i64 %151
  %153 = load %"struct.media::ColorPlaneLayout"*, %"struct.media::ColorPlaneLayout"** %70, align 8
  %154 = getelementptr inbounds %"struct.media::ColorPlaneLayout", %"struct.media::ColorPlaneLayout"* %153, i64 1, i32 0
  %155 = load i32, i32* %154, align 8
  %156 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %2, i64 0, i32 0, i32 0
  %157 = load i32, i32* %156, align 4
  %158 = sdiv i32 %157, 2
  %159 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %2, i64 0, i32 0, i32 1
  %160 = load i32, i32* %159, align 4
  %161 = sdiv i32 %160, 2
  %162 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %2, i64 0, i32 1, i32 0
  %163 = load i32, i32* %162, align 4
  %164 = sdiv i32 %163, 2
  %165 = load i32, i32* %75, align 4
  %166 = sdiv i32 %165, 2
  %167 = icmp sgt i32 %157, 1
  %168 = icmp sgt i32 %163, 1
  %169 = and i1 %167, %168
  %170 = sub nuw nsw i32 2147483647, %158
  %171 = icmp ult i32 %170, %164
  %172 = and i1 %171, %169
  %173 = select i1 %172, i32 %170, i32 %164
  %174 = icmp sgt i32 %160, 1
  %175 = icmp sgt i32 %165, 1
  %176 = and i1 %174, %175
  %177 = sub nuw nsw i32 2147483647, %161
  %178 = icmp ult i32 %177, %166
  %179 = and i1 %178, %176
  %180 = select i1 %179, i32 %177, i32 %166
  %181 = icmp sgt i32 %173, 0
  %182 = select i1 %181, i32 %173, i32 0
  %183 = icmp sgt i32 %180, 0
  %184 = select i1 %183, i32 %180, i32 0
  %185 = call i8* @_ZN5media10VideoFrame12visible_dataEm(%"class.media::VideoFrame"* %3, i64 1) #14
  %186 = sext i32 %158 to i64
  br i1 %183, label %187, label %307

187:                                              ; preds = %135
  %188 = mul nsw i32 %161, %155
  %189 = sext i32 %188 to i64
  %190 = getelementptr inbounds i8, i8* %185, i64 %189
  %191 = getelementptr inbounds i8, i8* %190, i64 %186
  %192 = sext i32 %137 to i64
  %193 = sext i32 %155 to i64
  %194 = zext i32 %182 to i64
  %195 = icmp ugt i64 %194, 1
  %196 = select i1 %195, i64 %194, i64 1
  %197 = add nsw i64 %186, %189
  %198 = icmp ugt i64 %194, 1
  %199 = select i1 %198, i64 %194, i64 1
  %200 = add nsw i64 %199, %186
  %201 = add nsw i64 %200, %189
  %202 = add nsw i64 %147, %151
  %203 = add nsw i64 %202, %145
  %204 = add nsw i64 %203, %142
  %205 = add nsw i64 %199, %147
  %206 = add nsw i64 %205, %151
  %207 = add nsw i64 %206, %145
  %208 = add nsw i64 %207, %142
  %209 = add nsw i64 %147, %145
  %210 = add nsw i64 %209, %142
  %211 = add nsw i64 %205, %145
  %212 = add nsw i64 %211, %142
  %213 = icmp ult i64 %196, 4
  %214 = and i64 %196, 2147483644
  %215 = icmp eq i64 %196, %214
  br label %216

216:                                              ; preds = %278, %187
  %217 = phi i64 [ %285, %278 ], [ 0, %187 ]
  %218 = phi i32 [ %279, %278 ], [ %180, %187 ]
  %219 = phi i32 [ %280, %278 ], [ 0, %187 ]
  %220 = phi i8* [ %283, %278 ], [ %191, %187 ]
  %221 = phi float* [ %281, %278 ], [ %152, %187 ]
  %222 = phi float* [ %282, %278 ], [ %148, %187 ]
  %223 = mul i64 %217, %193
  %224 = add i64 %197, %223
  %225 = getelementptr i8, i8* %185, i64 %224
  %226 = add i64 %201, %223
  %227 = getelementptr i8, i8* %185, i64 %226
  %228 = mul i64 %217, %192
  %229 = add i64 %204, %228
  %230 = getelementptr float, float* %140, i64 %229
  %231 = bitcast float* %230 to i8*
  %232 = add i64 %208, %228
  %233 = getelementptr float, float* %140, i64 %232
  %234 = bitcast float* %233 to i8*
  %235 = add i64 %210, %228
  %236 = getelementptr float, float* %140, i64 %235
  %237 = bitcast float* %236 to i8*
  %238 = add i64 %212, %228
  %239 = getelementptr float, float* %140, i64 %238
  %240 = bitcast float* %239 to i8*
  br i1 %181, label %241, label %278

241:                                              ; preds = %216
  br i1 %213, label %242, label %244

242:                                              ; preds = %277, %244, %241
  %243 = phi i64 [ 0, %244 ], [ 0, %241 ], [ %214, %277 ]
  br label %286

244:                                              ; preds = %241
  %245 = icmp ult i8* %225, %234
  %246 = icmp ugt i8* %227, %231
  %247 = and i1 %245, %246
  %248 = icmp ult i8* %225, %240
  %249 = icmp ugt i8* %227, %237
  %250 = and i1 %248, %249
  %251 = or i1 %247, %250
  br i1 %251, label %242, label %252

252:                                              ; preds = %244, %252
  %253 = phi i64 [ %275, %252 ], [ 0, %244 ]
  %254 = getelementptr inbounds i8, i8* %220, i64 %253
  %255 = bitcast i8* %254 to <4 x i8>*
  %256 = load <4 x i8>, <4 x i8>* %255, align 1, !alias.scope !14, !noalias !17
  %257 = uitofp <4 x i8> %256 to <4 x float>
  %258 = fdiv <4 x float> %257, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %259 = getelementptr inbounds float, float* %222, i64 %253
  %260 = bitcast float* %259 to <4 x float>*
  %261 = load <4 x float>, <4 x float>* %260, align 4, !alias.scope !20
  %262 = getelementptr inbounds float, float* %221, i64 %253
  %263 = bitcast float* %262 to <4 x float>*
  %264 = load <4 x float>, <4 x float>* %263, align 4, !alias.scope !21
  %265 = call <4 x float> @llvm.fma.v4f32(<4 x float> %258, <4 x float> %261, <4 x float> %264)
  %266 = call <4 x float> @llvm.fma.v4f32(<4 x float> %265, <4 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, <4 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>)
  %267 = fcmp ule <4 x float> %266, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %268 = fcmp ugt <4 x float> %266, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %269 = fptoui <4 x float> %266 to <4 x i8>
  %270 = select <4 x i1> %267, <4 x i8> zeroinitializer, <4 x i8> %269
  %271 = xor <4 x i1> %267, <i1 true, i1 true, i1 true, i1 true>
  %272 = sext <4 x i1> %271 to <4 x i8>
  %273 = select <4 x i1> %268, <4 x i8> %272, <4 x i8> %270
  %274 = bitcast i8* %254 to <4 x i8>*
  store <4 x i8> %273, <4 x i8>* %274, align 1, !alias.scope !14, !noalias !17
  %275 = add i64 %253, 4
  %276 = icmp eq i64 %275, %214
  br i1 %276, label %277, label %252, !llvm.loop !22

277:                                              ; preds = %252
  br i1 %215, label %278, label %242

278:                                              ; preds = %286, %277, %216
  %279 = phi i32 [ %218, %216 ], [ %184, %277 ], [ %184, %286 ]
  %280 = add nuw nsw i32 %219, 1
  %281 = getelementptr inbounds float, float* %221, i64 %192
  %282 = getelementptr inbounds float, float* %222, i64 %192
  %283 = getelementptr inbounds i8, i8* %220, i64 %193
  %284 = icmp slt i32 %280, %279
  %285 = add i64 %217, 1
  br i1 %284, label %216, label %307

286:                                              ; preds = %242, %286
  %287 = phi i64 [ %305, %286 ], [ %243, %242 ]
  %288 = getelementptr inbounds i8, i8* %220, i64 %287
  %289 = load i8, i8* %288, align 1
  %290 = uitofp i8 %289 to float
  %291 = fdiv float %290, 2.550000e+02
  %292 = getelementptr inbounds float, float* %222, i64 %287
  %293 = load float, float* %292, align 4
  %294 = getelementptr inbounds float, float* %221, i64 %287
  %295 = load float, float* %294, align 4
  %296 = call float @llvm.fma.f32(float %291, float %293, float %295) #14
  %297 = call float @llvm.fma.f32(float %296, float 2.550000e+02, float 5.000000e-01) #14
  %298 = fcmp ule float %297, -1.000000e+00
  %299 = fcmp ugt float %297, 2.550000e+02
  %300 = fptoui float %297 to i8
  %301 = select i1 %298, i8 0, i8 %300
  %302 = xor i1 %298, true
  %303 = sext i1 %302 to i8
  %304 = select i1 %299, i8 %303, i8 %301
  store i8 %304, i8* %288, align 1
  %305 = add nuw nsw i64 %287, 1
  %306 = icmp ult i64 %305, %194
  br i1 %306, label %286, label %278, !llvm.loop !24

307:                                              ; preds = %278, %135
  %308 = load %"struct.media::ColorPlaneLayout"*, %"struct.media::ColorPlaneLayout"** %70, align 8
  %309 = getelementptr inbounds %"struct.media::ColorPlaneLayout", %"struct.media::ColorPlaneLayout"* %308, i64 2, i32 0
  %310 = load i32, i32* %309, align 8
  %311 = call i8* @_ZN5media10VideoFrame12visible_dataEm(%"class.media::VideoFrame"* %3, i64 2) #14
  br i1 %183, label %312, label %583

312:                                              ; preds = %307
  %313 = mul nsw i32 %310, %161
  %314 = sext i32 %313 to i64
  %315 = getelementptr inbounds i8, i8* %311, i64 %314
  %316 = getelementptr inbounds i8, i8* %315, i64 %186
  %317 = getelementptr inbounds float, float* %152, i64 %151
  %318 = sext i32 %137 to i64
  %319 = sext i32 %310 to i64
  %320 = zext i32 %182 to i64
  %321 = icmp ugt i64 %320, 1
  %322 = select i1 %321, i64 %320, i64 1
  %323 = add nsw i64 %186, %314
  %324 = icmp ugt i64 %320, 1
  %325 = select i1 %324, i64 %320, i64 1
  %326 = add nsw i64 %325, %186
  %327 = add nsw i64 %326, %314
  %328 = shl nsw i64 %151, 1
  %329 = add nsw i64 %328, %147
  %330 = add nsw i64 %329, %145
  %331 = add nsw i64 %330, %142
  %332 = add nsw i64 %325, %328
  %333 = add nsw i64 %332, %147
  %334 = add nsw i64 %333, %145
  %335 = add nsw i64 %334, %142
  %336 = add nsw i64 %147, %145
  %337 = add nsw i64 %336, %142
  %338 = add nsw i64 %325, %147
  %339 = add nsw i64 %338, %145
  %340 = add nsw i64 %339, %142
  %341 = icmp ult i64 %322, 4
  %342 = and i64 %322, 2147483644
  %343 = icmp eq i64 %322, %342
  br label %344

344:                                              ; preds = %406, %312
  %345 = phi i64 [ %413, %406 ], [ 0, %312 ]
  %346 = phi i32 [ %407, %406 ], [ %180, %312 ]
  %347 = phi i32 [ %408, %406 ], [ 0, %312 ]
  %348 = phi i8* [ %411, %406 ], [ %316, %312 ]
  %349 = phi float* [ %409, %406 ], [ %317, %312 ]
  %350 = phi float* [ %410, %406 ], [ %148, %312 ]
  %351 = mul i64 %345, %319
  %352 = add i64 %323, %351
  %353 = getelementptr i8, i8* %311, i64 %352
  %354 = add i64 %327, %351
  %355 = getelementptr i8, i8* %311, i64 %354
  %356 = mul i64 %345, %318
  %357 = add i64 %331, %356
  %358 = getelementptr float, float* %140, i64 %357
  %359 = bitcast float* %358 to i8*
  %360 = add i64 %335, %356
  %361 = getelementptr float, float* %140, i64 %360
  %362 = bitcast float* %361 to i8*
  %363 = add i64 %337, %356
  %364 = getelementptr float, float* %140, i64 %363
  %365 = bitcast float* %364 to i8*
  %366 = add i64 %340, %356
  %367 = getelementptr float, float* %140, i64 %366
  %368 = bitcast float* %367 to i8*
  br i1 %181, label %369, label %406

369:                                              ; preds = %344
  br i1 %341, label %370, label %372

370:                                              ; preds = %405, %372, %369
  %371 = phi i64 [ 0, %372 ], [ 0, %369 ], [ %342, %405 ]
  br label %414

372:                                              ; preds = %369
  %373 = icmp ult i8* %353, %362
  %374 = icmp ugt i8* %355, %359
  %375 = and i1 %373, %374
  %376 = icmp ult i8* %353, %368
  %377 = icmp ugt i8* %355, %365
  %378 = and i1 %376, %377
  %379 = or i1 %375, %378
  br i1 %379, label %370, label %380

380:                                              ; preds = %372, %380
  %381 = phi i64 [ %403, %380 ], [ 0, %372 ]
  %382 = getelementptr inbounds i8, i8* %348, i64 %381
  %383 = bitcast i8* %382 to <4 x i8>*
  %384 = load <4 x i8>, <4 x i8>* %383, align 1, !alias.scope !25, !noalias !28
  %385 = uitofp <4 x i8> %384 to <4 x float>
  %386 = fdiv <4 x float> %385, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %387 = getelementptr inbounds float, float* %350, i64 %381
  %388 = bitcast float* %387 to <4 x float>*
  %389 = load <4 x float>, <4 x float>* %388, align 4, !alias.scope !31
  %390 = getelementptr inbounds float, float* %349, i64 %381
  %391 = bitcast float* %390 to <4 x float>*
  %392 = load <4 x float>, <4 x float>* %391, align 4, !alias.scope !32
  %393 = call <4 x float> @llvm.fma.v4f32(<4 x float> %386, <4 x float> %389, <4 x float> %392)
  %394 = call <4 x float> @llvm.fma.v4f32(<4 x float> %393, <4 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, <4 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>)
  %395 = fcmp ule <4 x float> %394, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %396 = fcmp ugt <4 x float> %394, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %397 = fptoui <4 x float> %394 to <4 x i8>
  %398 = select <4 x i1> %395, <4 x i8> zeroinitializer, <4 x i8> %397
  %399 = xor <4 x i1> %395, <i1 true, i1 true, i1 true, i1 true>
  %400 = sext <4 x i1> %399 to <4 x i8>
  %401 = select <4 x i1> %396, <4 x i8> %400, <4 x i8> %398
  %402 = bitcast i8* %382 to <4 x i8>*
  store <4 x i8> %401, <4 x i8>* %402, align 1, !alias.scope !25, !noalias !28
  %403 = add i64 %381, 4
  %404 = icmp eq i64 %403, %342
  br i1 %404, label %405, label %380, !llvm.loop !33

405:                                              ; preds = %380
  br i1 %343, label %406, label %370

406:                                              ; preds = %414, %405, %344
  %407 = phi i32 [ %346, %344 ], [ %184, %405 ], [ %184, %414 ]
  %408 = add nuw nsw i32 %347, 1
  %409 = getelementptr inbounds float, float* %349, i64 %318
  %410 = getelementptr inbounds float, float* %350, i64 %318
  %411 = getelementptr inbounds i8, i8* %348, i64 %319
  %412 = icmp slt i32 %408, %407
  %413 = add i64 %345, 1
  br i1 %412, label %344, label %583

414:                                              ; preds = %370, %414
  %415 = phi i64 [ %433, %414 ], [ %371, %370 ]
  %416 = getelementptr inbounds i8, i8* %348, i64 %415
  %417 = load i8, i8* %416, align 1
  %418 = uitofp i8 %417 to float
  %419 = fdiv float %418, 2.550000e+02
  %420 = getelementptr inbounds float, float* %350, i64 %415
  %421 = load float, float* %420, align 4
  %422 = getelementptr inbounds float, float* %349, i64 %415
  %423 = load float, float* %422, align 4
  %424 = call float @llvm.fma.f32(float %419, float %421, float %423) #14
  %425 = call float @llvm.fma.f32(float %424, float 2.550000e+02, float 5.000000e-01) #14
  %426 = fcmp ule float %425, -1.000000e+00
  %427 = fcmp ugt float %425, 2.550000e+02
  %428 = fptoui float %425 to i8
  %429 = select i1 %426, i8 0, i8 %428
  %430 = xor i1 %426, true
  %431 = sext i1 %430 to i8
  %432 = select i1 %427, i8 %431, i8 %429
  store i8 %432, i8* %416, align 1
  %433 = add nuw nsw i64 %415, 1
  %434 = icmp ult i64 %433, %320
  br i1 %434, label %414, label %406, !llvm.loop !34

435:                                              ; preds = %35
  %436 = getelementptr inbounds %"class.viz::VideoCaptureOverlay::Sprite", %"class.viz::VideoCaptureOverlay::Sprite"* %0, i64 0, i32 2, i32 0
  %437 = load i32, i32* %436, align 4
  %438 = shl nsw i32 %437, 2
  %439 = load float*, float** %24, align 8
  %440 = getelementptr inbounds %"class.media::VideoFrame", %"class.media::VideoFrame"* %3, i64 0, i32 2, i32 2, i32 0, i32 0
  %441 = load %"struct.media::ColorPlaneLayout"*, %"struct.media::ColorPlaneLayout"** %440, align 8
  %442 = getelementptr inbounds %"struct.media::ColorPlaneLayout", %"struct.media::ColorPlaneLayout"* %441, i64 0, i32 0
  %443 = load i32, i32* %442, align 8
  %444 = call i8* @_ZN5media10VideoFrame12visible_dataEm(%"class.media::VideoFrame"* %3, i64 0) #14
  %445 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %2, i64 0, i32 1, i32 1
  %446 = load i32, i32* %445, align 4
  %447 = icmp sgt i32 %446, 0
  br i1 %447, label %448, label %583

448:                                              ; preds = %435
  %449 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %2, i64 0, i32 0, i32 1
  %450 = load i32, i32* %449, align 4
  %451 = mul nsw i32 %450, %443
  %452 = sext i32 %451 to i64
  %453 = getelementptr inbounds i8, i8* %444, i64 %452
  %454 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %2, i64 0, i32 0, i32 0
  %455 = load i32, i32* %454, align 4
  %456 = shl nsw i32 %455, 2
  %457 = sext i32 %456 to i64
  %458 = getelementptr inbounds i8, i8* %453, i64 %457
  %459 = mul nsw i32 %438, %56
  %460 = sext i32 %459 to i64
  %461 = getelementptr inbounds float, float* %439, i64 %460
  %462 = shl nsw i32 %50, 2
  %463 = sext i32 %462 to i64
  %464 = getelementptr inbounds float, float* %461, i64 %463
  %465 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %2, i64 0, i32 1, i32 0
  %466 = sext i32 %438 to i64
  %467 = sext i32 %443 to i64
  %468 = load i32, i32* %465, align 4
  br label %469

469:                                              ; preds = %448, %479
  %470 = phi i32 [ %446, %448 ], [ %480, %479 ]
  %471 = phi i32 [ %468, %448 ], [ %481, %479 ]
  %472 = phi float* [ %464, %448 ], [ %483, %479 ]
  %473 = phi i32 [ 0, %448 ], [ %482, %479 ]
  %474 = phi i8* [ %458, %448 ], [ %484, %479 ]
  %475 = bitcast i8* %474 to i32*
  %476 = icmp sgt i32 %471, 0
  br i1 %476, label %486, label %479

477:                                              ; preds = %533
  %478 = load i32, i32* %445, align 4
  br label %479

479:                                              ; preds = %477, %469
  %480 = phi i32 [ %478, %477 ], [ %470, %469 ]
  %481 = phi i32 [ %580, %477 ], [ %471, %469 ]
  %482 = add nuw nsw i32 %473, 1
  %483 = getelementptr inbounds float, float* %472, i64 %466
  %484 = getelementptr inbounds i8, i8* %474, i64 %467
  %485 = icmp slt i32 %482, %480
  br i1 %485, label %469, label %583

486:                                              ; preds = %469, %533
  %487 = phi i64 [ %579, %533 ], [ 0, %469 ]
  %488 = trunc i64 %487 to i32
  %489 = shl nsw i32 %488, 2
  %490 = zext i32 %489 to i64
  %491 = getelementptr inbounds float, float* %472, i64 %490
  %492 = load float, float* %491, align 4
  %493 = getelementptr inbounds i32, i32* %475, i64 %487
  %494 = load i32, i32* %493, align 4
  %495 = lshr i32 %494, 24
  %496 = trunc i32 %495 to i8
  %497 = uitofp i8 %496 to float
  %498 = fdiv float %497, 2.550000e+02
  %499 = fsub float 1.000000e+00, %492
  %500 = fmul float %499, %498
  %501 = fadd float %492, %500
  %502 = lshr i32 %494, 16
  %503 = trunc i32 %502 to i8
  %504 = uitofp i8 %503 to float
  %505 = fdiv float %504, 2.550000e+02
  %506 = or i32 %489, 1
  %507 = zext i32 %506 to i64
  %508 = getelementptr inbounds float, float* %472, i64 %507
  %509 = load float, float* %508, align 4
  %510 = call float @llvm.fma.f32(float %505, float %500, float %509) #14
  %511 = lshr i32 %494, 8
  %512 = trunc i32 %511 to i8
  %513 = uitofp i8 %512 to float
  %514 = fdiv float %513, 2.550000e+02
  %515 = or i32 %489, 2
  %516 = zext i32 %515 to i64
  %517 = getelementptr inbounds float, float* %472, i64 %516
  %518 = load float, float* %517, align 4
  %519 = call float @llvm.fma.f32(float %514, float %500, float %518) #14
  %520 = trunc i32 %494 to i8
  %521 = uitofp i8 %520 to float
  %522 = fdiv float %521, 2.550000e+02
  %523 = or i32 %489, 3
  %524 = zext i32 %523 to i64
  %525 = getelementptr inbounds float, float* %472, i64 %524
  %526 = load float, float* %525, align 4
  %527 = call float @llvm.fma.f32(float %522, float %500, float %526) #14
  %528 = fcmp une float %501, 0.000000e+00
  br i1 %528, label %529, label %533

529:                                              ; preds = %486
  %530 = fdiv float %510, %501
  %531 = fdiv float %519, %501
  %532 = fdiv float %527, %501
  br label %533

533:                                              ; preds = %529, %486
  %534 = phi float [ %530, %529 ], [ %510, %486 ]
  %535 = phi float [ %531, %529 ], [ %519, %486 ]
  %536 = phi float [ %532, %529 ], [ %527, %486 ]
  %537 = call float @llvm.fma.f32(float %501, float 2.550000e+02, float 5.000000e-01) #14
  %538 = fcmp ule float %537, -1.000000e+00
  %539 = fcmp ugt float %537, 2.550000e+02
  %540 = fptoui float %537 to i8
  %541 = select i1 %538, i8 0, i8 %540
  %542 = xor i1 %538, true
  %543 = sext i1 %542 to i8
  %544 = select i1 %539, i8 %543, i8 %541
  %545 = zext i8 %544 to i32
  %546 = shl nuw i32 %545, 24
  %547 = call float @llvm.fma.f32(float %534, float 2.550000e+02, float 5.000000e-01) #14
  %548 = fcmp ule float %547, -1.000000e+00
  %549 = fcmp ugt float %547, 2.550000e+02
  %550 = fptoui float %547 to i8
  %551 = select i1 %548, i8 0, i8 %550
  %552 = xor i1 %548, true
  %553 = sext i1 %552 to i8
  %554 = select i1 %549, i8 %553, i8 %551
  %555 = zext i8 %554 to i32
  %556 = shl nuw nsw i32 %555, 16
  %557 = or i32 %556, %546
  %558 = call float @llvm.fma.f32(float %535, float 2.550000e+02, float 5.000000e-01) #14
  %559 = fcmp ule float %558, -1.000000e+00
  %560 = fcmp ugt float %558, 2.550000e+02
  %561 = fptoui float %558 to i8
  %562 = select i1 %559, i8 0, i8 %561
  %563 = xor i1 %559, true
  %564 = sext i1 %563 to i8
  %565 = select i1 %560, i8 %564, i8 %562
  %566 = zext i8 %565 to i32
  %567 = shl nuw nsw i32 %566, 8
  %568 = or i32 %557, %567
  %569 = call float @llvm.fma.f32(float %536, float 2.550000e+02, float 5.000000e-01) #14
  %570 = fcmp ule float %569, -1.000000e+00
  %571 = fcmp ugt float %569, 2.550000e+02
  %572 = fptoui float %569 to i8
  %573 = select i1 %570, i8 0, i8 %572
  %574 = xor i1 %570, true
  %575 = sext i1 %574 to i8
  %576 = select i1 %571, i8 %575, i8 %573
  %577 = zext i8 %576 to i32
  %578 = or i32 %568, %577
  store i32 %578, i32* %493, align 4
  %579 = add nuw nsw i64 %487, 1
  %580 = load i32, i32* %465, align 4
  %581 = sext i32 %580 to i64
  %582 = icmp slt i64 %579, %581
  br i1 %582, label %486, label %477

583:                                              ; preds = %479, %406, %435, %307, %35
  %584 = icmp eq i8* %21, null
  br i1 %584, label %589, label %585

585:                                              ; preds = %583
  %586 = load i8, i8* %21, align 1
  %587 = icmp eq i8 %586, 0
  br i1 %587, label %589, label %588

588:                                              ; preds = %585
  call void @_ZN20trace_event_internal24UpdateTraceEventDurationEPKhPKcN4base11trace_event16TraceEventHandleE(i8* nonnull %21, i8* %22, i64 %23) #14
  br label %589

589:                                              ; preds = %583, %585, %588
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz19VideoCaptureOverlay20MakeCombinedRendererERKNSt3__16vectorIPS0_NS1_9allocatorIS3_EEEERKN3gfx4RectEN5media16VideoPixelFormatE(%"class.base::OnceCallback.179"* noalias nocapture sret, %"class.std::__1::vector.251"* nocapture readonly dereferenceable(24), %"class.gfx::Rect"* nocapture readonly dereferenceable(16), i32) local_unnamed_addr #3 align 2 {
  %5 = alloca %"class.std::__1::vector.258", align 16
  %6 = alloca %"class.base::OnceCallback.179", align 8
  %7 = getelementptr inbounds %"class.std::__1::vector.251", %"class.std::__1::vector.251"* %1, i64 0, i32 0, i32 0
  %8 = load %"class.viz::VideoCaptureOverlay"**, %"class.viz::VideoCaptureOverlay"*** %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector.251", %"class.std::__1::vector.251"* %1, i64 0, i32 0, i32 1
  %10 = load %"class.viz::VideoCaptureOverlay"**, %"class.viz::VideoCaptureOverlay"*** %9, align 8
  %11 = icmp eq %"class.viz::VideoCaptureOverlay"** %8, %10
  br i1 %11, label %12, label %14

12:                                               ; preds = %4
  %13 = getelementptr inbounds %"class.base::OnceCallback.179", %"class.base::OnceCallback.179"* %0, i64 0, i32 0, i32 0, i32 0
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %13, align 8
  br label %69

14:                                               ; preds = %4
  %15 = bitcast %"class.std::__1::vector.258"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %15) #14
  %16 = getelementptr inbounds %"class.std::__1::vector.258", %"class.std::__1::vector.258"* %5, i64 0, i32 0, i32 0
  %17 = getelementptr inbounds %"class.std::__1::vector.258", %"class.std::__1::vector.258"* %5, i64 0, i32 0, i32 1
  %18 = getelementptr inbounds %"class.std::__1::vector.258", %"class.std::__1::vector.258"* %5, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 0, i64 24, i1 false) #14
  %19 = bitcast %"class.base::OnceCallback.179"* %6 to i8*
  %20 = getelementptr inbounds %"class.base::OnceCallback.179", %"class.base::OnceCallback.179"* %6, i64 0, i32 0, i32 0, i32 0
  %21 = bitcast %"class.base::OnceCallback.179"* %6 to i64*
  %22 = bitcast %"class.base::OnceCallback.179"** %17 to i64*
  %23 = getelementptr inbounds %"class.base::OnceCallback.179", %"class.base::OnceCallback.179"* %6, i64 0, i32 0
  br label %27

24:                                               ; preds = %47
  %25 = load %"class.base::OnceCallback.179"*, %"class.base::OnceCallback.179"** %16, align 16
  %26 = icmp eq %"class.base::OnceCallback.179"* %25, %48
  br i1 %26, label %63, label %51

27:                                               ; preds = %14, %47
  %28 = phi %"class.viz::VideoCaptureOverlay"** [ %8, %14 ], [ %49, %47 ]
  %29 = load %"class.viz::VideoCaptureOverlay"*, %"class.viz::VideoCaptureOverlay"** %28, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #14
  call void @_ZN3viz19VideoCaptureOverlay12MakeRendererERKN3gfx4RectEN5media16VideoPixelFormatE(%"class.base::OnceCallback.179"* nonnull sret %6, %"class.viz::VideoCaptureOverlay"* %29, %"class.gfx::Rect"* dereferenceable(16) %2, i32 %3)
  %30 = load %"class.base::OnceCallback.179"*, %"class.base::OnceCallback.179"** %17, align 8
  %31 = load %"class.base::OnceCallback.179"*, %"class.base::OnceCallback.179"** %18, align 16
  %32 = icmp ult %"class.base::OnceCallback.179"* %30, %31
  br i1 %32, label %33, label %38

33:                                               ; preds = %27
  %34 = load i64, i64* %21, align 8
  %35 = bitcast %"class.base::OnceCallback.179"* %30 to i64*
  store i64 %34, i64* %35, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %20, align 8
  %36 = getelementptr inbounds %"class.base::OnceCallback.179", %"class.base::OnceCallback.179"* %30, i64 1
  %37 = ptrtoint %"class.base::OnceCallback.179"* %36 to i64
  store i64 %37, i64* %22, align 8
  br label %39

38:                                               ; preds = %27
  call void @_ZNSt3__16vectorIN4base12OnceCallbackIFvPN5media10VideoFrameEEEENS_9allocatorIS7_EEE24__emplace_back_slow_pathIJS7_EEEvDpOT_(%"class.std::__1::vector.258"* nonnull %5, %"class.base::OnceCallback.179"* nonnull dereferenceable(8) %6) #14
  br label %39

39:                                               ; preds = %33, %38
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %23) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #14
  %40 = load %"class.base::OnceCallback.179"*, %"class.base::OnceCallback.179"** %17, align 8
  %41 = getelementptr inbounds %"class.base::OnceCallback.179", %"class.base::OnceCallback.179"* %40, i64 -1
  %42 = getelementptr inbounds %"class.base::OnceCallback.179", %"class.base::OnceCallback.179"* %41, i64 0, i32 0, i32 0, i32 0
  %43 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %42, align 8
  %44 = icmp eq %"class.base::internal::BindStateBase"* %43, null
  br i1 %44, label %45, label %47

45:                                               ; preds = %39
  %46 = getelementptr inbounds %"class.base::OnceCallback.179", %"class.base::OnceCallback.179"* %41, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %46) #14
  store %"class.base::OnceCallback.179"* %41, %"class.base::OnceCallback.179"** %17, align 8
  br label %47

47:                                               ; preds = %45, %39
  %48 = phi %"class.base::OnceCallback.179"* [ %41, %45 ], [ %40, %39 ]
  %49 = getelementptr inbounds %"class.viz::VideoCaptureOverlay"*, %"class.viz::VideoCaptureOverlay"** %28, i64 1
  %50 = icmp eq %"class.viz::VideoCaptureOverlay"** %49, %10
  br i1 %50, label %24, label %27

51:                                               ; preds = %24
  %52 = call i8* @_Znwm(i64 64) #15, !noalias !35
  %53 = bitcast i8* %52 to %"class.base::internal::BindStateBase"*
  call void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"* nonnull %53, void ()* bitcast (void (%"class.base::internal::BindStateBase"*, %"class.media::VideoFrame"*)* @"_ZN4base8internal7InvokerINS0_9BindStateIZN3viz19VideoCaptureOverlay20MakeCombinedRendererERKNSt3__16vectorIPS4_NS5_9allocatorIS7_EEEERKN3gfx4RectEN5media16VideoPixelFormatEE3$_0JNS6_INS_12OnceCallbackIFvPNSH_10VideoFrameEEEENS8_ISO_EEEEEEESN_E7RunOnceEPNS0_13BindStateBaseESM_" to void ()*), void (%"class.base::internal::BindStateBase"*)* nonnull @"_ZN4base8internal9BindStateIZN3viz19VideoCaptureOverlay20MakeCombinedRendererERKNSt3__16vectorIPS3_NS4_9allocatorIS6_EEEERKN3gfx4RectEN5media16VideoPixelFormatEE3$_0JNS5_INS_12OnceCallbackIFvPNSG_10VideoFrameEEEENS7_ISN_EEEEEE7DestroyEPKNS0_13BindStateBaseE") #14, !noalias !35
  %54 = getelementptr inbounds i8, i8* %52, i64 40
  %55 = bitcast %"class.std::__1::vector.258"* %5 to <2 x i64>*
  %56 = load <2 x i64>, <2 x i64>* %55, align 16, !noalias !35
  %57 = bitcast i8* %54 to <2 x i64>*
  store <2 x i64> %56, <2 x i64>* %57, align 8, !noalias !35
  %58 = bitcast %"class.base::OnceCallback.179"** %18 to i64*
  %59 = load i64, i64* %58, align 16, !noalias !35
  %60 = getelementptr inbounds i8, i8* %52, i64 56
  %61 = bitcast i8* %60 to i64*
  store i64 %59, i64* %61, align 8, !noalias !35
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 0, i64 24, i1 false) #14, !noalias !35
  %62 = bitcast %"class.base::OnceCallback.179"* %0 to i8**
  store i8* %52, i8** %62, align 8, !alias.scope !35
  br label %68

63:                                               ; preds = %24
  %64 = getelementptr inbounds %"class.base::OnceCallback.179", %"class.base::OnceCallback.179"* %0, i64 0, i32 0, i32 0, i32 0
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %64, align 8
  %65 = icmp eq %"class.base::OnceCallback.179"* %48, null
  br i1 %65, label %68, label %66

66:                                               ; preds = %63
  %67 = bitcast %"class.base::OnceCallback.179"* %48 to i8*
  store %"class.base::OnceCallback.179"* %48, %"class.base::OnceCallback.179"** %17, align 8
  call void @_ZdlPv(i8* %67) #15
  br label %68

68:                                               ; preds = %51, %63, %66
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %15) #14
  br label %69

69:                                               ; preds = %68, %12
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #6

declare { i64, i64 } @_ZN3gfx15ToEnclosingRectERKNS_5RectFE(%"class.gfx::RectF"* dereferenceable(16)) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz19VideoCaptureOverlay6SpriteC2ERK8SkBitmapRKN3gfx4SizeEN5media16VideoPixelFormatE(%"class.viz::VideoCaptureOverlay::Sprite"*, %class.SkBitmap* dereferenceable(56), %"class.gfx::Size"* nocapture readonly dereferenceable(8), i32) unnamed_addr #3 align 2 {
  %5 = getelementptr inbounds %"class.viz::VideoCaptureOverlay::Sprite", %"class.viz::VideoCaptureOverlay::Sprite"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 0, i32* %5, align 4
  %6 = getelementptr inbounds %"class.viz::VideoCaptureOverlay::Sprite", %"class.viz::VideoCaptureOverlay::Sprite"* %0, i64 0, i32 1
  tail call void @_ZN8SkBitmapC1ERKS_(%class.SkBitmap* %6, %class.SkBitmap* dereferenceable(56) %1) #14
  %7 = getelementptr inbounds %"class.viz::VideoCaptureOverlay::Sprite", %"class.viz::VideoCaptureOverlay::Sprite"* %0, i64 0, i32 2
  %8 = bitcast %"class.gfx::Size"* %2 to i64*
  %9 = bitcast %"class.gfx::Size"* %7 to i64*
  %10 = load i64, i64* %8, align 4
  store i64 %10, i64* %9, align 8
  %11 = getelementptr inbounds %"class.viz::VideoCaptureOverlay::Sprite", %"class.viz::VideoCaptureOverlay::Sprite"* %0, i64 0, i32 3
  store i32 %3, i32* %11, align 8
  %12 = getelementptr inbounds %"class.viz::VideoCaptureOverlay::Sprite", %"class.viz::VideoCaptureOverlay::Sprite"* %0, i64 0, i32 4, i32 0
  call void @llvm.memset.p0i8.i64(i8* align 4 %12, i8 0, i64 76, i1 false)
  ret void
}

declare void @_ZN8SkBitmapC1ERKS_(%class.SkBitmap*, %class.SkBitmap* dereferenceable(56)) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz19VideoCaptureOverlay6SpriteD2Ev(%"class.viz::VideoCaptureOverlay::Sprite"*) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.viz::VideoCaptureOverlay::Sprite", %"class.viz::VideoCaptureOverlay::Sprite"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %3 = load float*, float** %2, align 8
  store float* null, float** %2, align 8
  %4 = icmp eq float* %3, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  %6 = bitcast float* %3 to i8*
  tail call void @_ZdaPv(i8* %6) #15
  br label %7

7:                                                ; preds = %1, %5
  %8 = getelementptr inbounds %"class.viz::VideoCaptureOverlay::Sprite", %"class.viz::VideoCaptureOverlay::Sprite"* %0, i64 0, i32 1
  tail call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* %8) #14
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN20trace_event_internal13AddTraceEventIiiEEN4base11trace_event16TraceEventHandleEcPKhPKcS7_yjyS7_OT_S7_OT0_(i8 signext, i8*, i8*, i8*, i64, i32, i64, i8*, i32* dereferenceable(4), i8*, i32* dereferenceable(4)) local_unnamed_addr #8 comdat {
  %12 = alloca %"class.base::trace_event::TraceArguments", align 8
  %13 = alloca %"class.base::TimeTicks", align 8
  %14 = tail call i32 @_ZN4base14PlatformThread9CurrentIdEv() #14
  %15 = bitcast %"class.base::TimeTicks"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #14
  %16 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %13, i64 0, i32 0, i32 0
  %17 = tail call i64 @_ZN4base6subtle28TimeTicksNowIgnoringOverrideEv() #14
  store i64 %17, i64* %16, align 8
  %18 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %18) #14
  %19 = bitcast %"class.base::trace_event::TraceArguments"* %12 to i64*
  store i64 -6148914691247504638, i64* %19, align 8
  %20 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 2, i64 0
  store i8* %7, i8** %20, align 8
  %21 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 2, i64 1
  store i8* %9, i8** %21, align 8
  %22 = load i32, i32* %8, align 4
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 3, i64 0, i32 0
  store i64 %23, i64* %24, align 8
  %25 = load i32, i32* %10, align 4
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 3, i64 1, i32 0
  store i64 %26, i64* %27, align 8
  %28 = call i64 @_ZN20trace_event_internal37AddTraceEventWithThreadIdAndTimestampEcPKhPKcS3_yyiRKN4base9TimeTicksEPNS4_11trace_event14TraceArgumentsEj(i8 signext %0, i8* %1, i8* %2, i8* %3, i64 %4, i64 %6, i32 %14, %"class.base::TimeTicks"* nonnull dereferenceable(8) %13, %"class.base::trace_event::TraceArguments"* nonnull %12, i32 %5) #14
  %29 = load i8, i8* %18, align 8
  %30 = icmp eq i8 %29, 0
  br i1 %30, label %65, label %31

31:                                               ; preds = %11, %60
  %32 = phi i64 [ %61, %60 ], [ 0, %11 ]
  %33 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 1, i64 %32
  %34 = load i8, i8* %33, align 1
  %35 = icmp eq i8 %34, 8
  br i1 %35, label %36, label %47

36:                                               ; preds = %31
  %37 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 3, i64 %32
  %38 = bitcast %"union.base::trace_event::TraceValue"* %37 to %"class.base::trace_event::ConvertableToTraceFormat"**
  %39 = load %"class.base::trace_event::ConvertableToTraceFormat"*, %"class.base::trace_event::ConvertableToTraceFormat"** %38, align 8
  %40 = icmp eq %"class.base::trace_event::ConvertableToTraceFormat"* %39, null
  br i1 %40, label %60, label %41

41:                                               ; preds = %36
  %42 = bitcast %"class.base::trace_event::ConvertableToTraceFormat"* %39 to void (%"class.base::trace_event::ConvertableToTraceFormat"*)***
  %43 = load void (%"class.base::trace_event::ConvertableToTraceFormat"*)**, void (%"class.base::trace_event::ConvertableToTraceFormat"*)*** %42, align 8
  %44 = getelementptr inbounds void (%"class.base::trace_event::ConvertableToTraceFormat"*)*, void (%"class.base::trace_event::ConvertableToTraceFormat"*)** %43, i64 1
  %45 = load void (%"class.base::trace_event::ConvertableToTraceFormat"*)*, void (%"class.base::trace_event::ConvertableToTraceFormat"*)** %44, align 8
  call void %45(%"class.base::trace_event::ConvertableToTraceFormat"* nonnull %39) #14
  %46 = load i8, i8* %33, align 1
  br label %47

47:                                               ; preds = %41, %31
  %48 = phi i8 [ %34, %31 ], [ %46, %41 ]
  %49 = icmp eq i8 %48, 9
  br i1 %49, label %50, label %60

50:                                               ; preds = %47
  %51 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 3, i64 %32
  %52 = bitcast %"union.base::trace_event::TraceValue"* %51 to %"class.protozero::HeapBuffered"**
  %53 = load %"class.protozero::HeapBuffered"*, %"class.protozero::HeapBuffered"** %52, align 8
  %54 = icmp eq %"class.protozero::HeapBuffered"* %53, null
  br i1 %54, label %60, label %55

55:                                               ; preds = %50
  %56 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %53, i64 0, i32 2, i32 1
  call void @_ZN9protozero12MessageArenaD1Ev(%"class.protozero::MessageArena"* %56) #14
  %57 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %53, i64 0, i32 1
  call void @_ZN9protozero21ScatteredStreamWriterD1Ev(%"class.protozero::ScatteredStreamWriter"* %57) #14
  %58 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %53, i64 0, i32 0
  call void @_ZN9protozero19ScatteredHeapBufferD1Ev(%"class.protozero::ScatteredHeapBuffer"* %58) #14
  %59 = bitcast %"class.protozero::HeapBuffered"* %53 to i8*
  call void @_ZdlPv(i8* %59) #15
  br label %60

60:                                               ; preds = %55, %50, %47, %36
  %61 = add nuw nsw i64 %32, 1
  %62 = load i8, i8* %18, align 8
  %63 = zext i8 %62 to i64
  %64 = icmp ult i64 %61, %63
  br i1 %64, label %31, label %65

65:                                               ; preds = %60, %11
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %18) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #14
  ret i64 %28
}

declare zeroext i1 @_ZNK3gfx10ColorSpaceneERKS0_(%"class.gfx::ColorSpace"*, %"class.gfx::ColorSpace"* dereferenceable(68)) local_unnamed_addr #4

declare void @_ZNK5media10VideoFrame10ColorSpaceEv(%"class.gfx::ColorSpace"* sret, %"class.media::VideoFrame"*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz19VideoCaptureOverlay6Sprite14TransformImageEv(%"class.viz::VideoCaptureOverlay::Sprite"*) local_unnamed_addr #3 align 2 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca %struct.SkImageInfo, align 8
  %5 = alloca %class.SkBitmap, align 8
  %6 = alloca %struct.SkSamplingOptions, align 4
  %7 = alloca %"class.gfx::ColorSpace", align 4
  %8 = alloca %"class.gfx::ColorSpace", align 4
  %9 = load i8, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 61, i32 0), align 16
  %10 = and i8 %9, 25
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %20, label %12, !prof !12

12:                                               ; preds = %1
  %13 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13) #14
  %14 = getelementptr inbounds %"class.viz::VideoCaptureOverlay::Sprite", %"class.viz::VideoCaptureOverlay::Sprite"* %0, i64 0, i32 2, i32 0
  %15 = load i32, i32* %14, align 4
  store i32 %15, i32* %2, align 4
  %16 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16) #14
  %17 = getelementptr inbounds %"class.viz::VideoCaptureOverlay::Sprite", %"class.viz::VideoCaptureOverlay::Sprite"* %0, i64 0, i32 2, i32 1
  %18 = load i32, i32* %17, align 4
  store i32 %18, i32* %3, align 4
  %19 = call i64 @_ZN20trace_event_internal13AddTraceEventIiiEEN4base11trace_event16TraceEventHandleEcPKhPKcS7_yjyS7_OT_S7_OT0_(i8 signext 88, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 61, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.3, i64 0, i64 0), i8* null, i64 0, i32 0, i64 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0), i32* nonnull dereferenceable(4) %2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i64 0, i64 0), i32* nonnull dereferenceable(4) %3)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16) #14
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #14
  br label %20

20:                                               ; preds = %1, %12
  %21 = phi i8* [ null, %1 ], [ getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 61, i32 0), %12 ]
  %22 = phi i8* [ inttoptr (i64 -6148914691236517206 to i8*), %1 ], [ getelementptr inbounds ([44 x i8], [44 x i8]* @.str.3, i64 0, i64 0), %12 ]
  %23 = phi i64 [ -6148914691236517206, %1 ], [ %19, %12 ]
  %24 = bitcast %struct.SkImageInfo* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %24) #14
  %25 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %4, i64 0, i32 0, i32 0, i32 0
  %26 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %4, i64 0, i32 0, i32 1
  %27 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %4, i64 0, i32 0, i32 2
  %28 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %4, i64 0, i32 1, i32 0
  %29 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %4, i64 0, i32 1, i32 1
  %30 = getelementptr inbounds %"class.viz::VideoCaptureOverlay::Sprite", %"class.viz::VideoCaptureOverlay::Sprite"* %0, i64 0, i32 2
  %31 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %30, i64 0, i32 0
  %32 = bitcast %struct.SkImageInfo* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %32, i8 -86, i64 24, i1 false)
  %33 = load i32, i32* %31, align 4
  %34 = getelementptr inbounds %"class.viz::VideoCaptureOverlay::Sprite", %"class.viz::VideoCaptureOverlay::Sprite"* %0, i64 0, i32 2, i32 1
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds %"class.viz::VideoCaptureOverlay::Sprite", %"class.viz::VideoCaptureOverlay::Sprite"* %0, i64 0, i32 1
  %37 = getelementptr inbounds %"class.viz::VideoCaptureOverlay::Sprite", %"class.viz::VideoCaptureOverlay::Sprite"* %0, i64 0, i32 1, i32 1, i32 2, i32 0, i32 0, i32 0
  %38 = load %class.SkColorSpace*, %class.SkColorSpace** %37, align 8, !noalias !40
  %39 = icmp eq %class.SkColorSpace* %38, null
  br i1 %39, label %43, label %40

40:                                               ; preds = %20
  %41 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %38, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %42 = atomicrmw add i32* %41, i32 1 monotonic, !noalias !40
  br label %43

43:                                               ; preds = %40, %20
  %44 = ptrtoint %class.SkColorSpace* %38 to i64
  %45 = zext i32 %35 to i64
  %46 = shl nuw i64 %45, 32
  %47 = zext i32 %33 to i64
  %48 = or i64 %46, %47
  %49 = bitcast %struct.SkImageInfo* %4 to i64*
  store i64 %44, i64* %49, align 8, !alias.scope !47
  %50 = bitcast i32* %26 to i64*
  store i64 12884901894, i64* %50, align 8, !alias.scope !47
  %51 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %4, i64 0, i32 1
  %52 = bitcast %struct.SkISize* %51 to i64*
  store i64 %48, i64* %52, align 8, !alias.scope !47
  %53 = bitcast %class.SkBitmap* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %53) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %53, i8 -86, i64 56, i1 false)
  call void @_ZN8SkBitmapC1Ev(%class.SkBitmap* nonnull %5) #14
  %54 = getelementptr inbounds %"class.viz::VideoCaptureOverlay::Sprite", %"class.viz::VideoCaptureOverlay::Sprite"* %0, i64 0, i32 1, i32 1, i32 2, i32 1, i32 0
  %55 = load i32, i32* %54, align 4
  %56 = load i32, i32* %28, align 8
  %57 = icmp eq i32 %55, %56
  br i1 %57, label %58, label %81

58:                                               ; preds = %43
  %59 = getelementptr inbounds %"class.viz::VideoCaptureOverlay::Sprite", %"class.viz::VideoCaptureOverlay::Sprite"* %0, i64 0, i32 1, i32 1, i32 2, i32 1, i32 1
  %60 = load i32, i32* %59, align 4
  %61 = load i32, i32* %29, align 4
  %62 = icmp eq i32 %60, %61
  br i1 %62, label %63, label %81

63:                                               ; preds = %58
  %64 = getelementptr inbounds %"class.viz::VideoCaptureOverlay::Sprite", %"class.viz::VideoCaptureOverlay::Sprite"* %0, i64 0, i32 1, i32 1, i32 2, i32 0, i32 1
  %65 = load i32, i32* %64, align 8
  %66 = load i32, i32* %26, align 8
  %67 = icmp eq i32 %65, %66
  br i1 %67, label %68, label %81

68:                                               ; preds = %63
  %69 = getelementptr inbounds %"class.viz::VideoCaptureOverlay::Sprite", %"class.viz::VideoCaptureOverlay::Sprite"* %0, i64 0, i32 1, i32 1, i32 2, i32 0, i32 2
  %70 = load i32, i32* %69, align 4
  %71 = load i32, i32* %27, align 4
  %72 = icmp eq i32 %70, %71
  br i1 %72, label %73, label %81

73:                                               ; preds = %68
  %74 = load %class.SkColorSpace*, %class.SkColorSpace** %37, align 8
  %75 = load %class.SkColorSpace*, %class.SkColorSpace** %25, align 8
  %76 = call zeroext i1 @_ZN12SkColorSpace6EqualsEPKS_S1_(%class.SkColorSpace* %74, %class.SkColorSpace* %75) #14
  br i1 %76, label %79, label %77

77:                                               ; preds = %73
  %78 = load i32, i32* %28, align 8
  br label %81

79:                                               ; preds = %73
  %80 = call dereferenceable(56) %class.SkBitmap* @_ZN8SkBitmapaSERKS_(%class.SkBitmap* nonnull %5, %class.SkBitmap* dereferenceable(56) %36) #14
  br label %104

81:                                               ; preds = %77, %43, %63, %68, %58
  %82 = phi i32 [ %78, %77 ], [ %56, %43 ], [ %55, %63 ], [ %55, %68 ], [ %55, %58 ]
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %4, i64 0, i32 0
  %85 = call i32 @_ZNK11SkColorInfo13bytesPerPixelEv(%class.SkColorInfo* nonnull %84) #14
  %86 = sext i32 %85 to i64
  %87 = mul nsw i64 %86, %83
  %88 = icmp ult i64 %87, 2147483648
  %89 = select i1 %88, i64 %87, i64 0
  %90 = call zeroext i1 @_ZN8SkBitmap14tryAllocPixelsERK11SkImageInfom(%class.SkBitmap* nonnull %5, %struct.SkImageInfo* nonnull dereferenceable(24) %4, i64 %89) #14
  %91 = getelementptr inbounds %struct.SkSamplingOptions, %struct.SkSamplingOptions* %6, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %91) #14
  br i1 %90, label %92, label %102

92:                                               ; preds = %81
  %93 = getelementptr inbounds %"class.viz::VideoCaptureOverlay::Sprite", %"class.viz::VideoCaptureOverlay::Sprite"* %0, i64 0, i32 1, i32 1
  %94 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %5, i64 0, i32 1
  store i8 0, i8* %91, align 4
  %95 = getelementptr inbounds %struct.SkSamplingOptions, %struct.SkSamplingOptions* %6, i64 0, i32 1, i32 0
  store float 0.000000e+00, float* %95, align 4
  %96 = getelementptr inbounds %struct.SkSamplingOptions, %struct.SkSamplingOptions* %6, i64 0, i32 1, i32 1
  store float 0.000000e+00, float* %96, align 4
  %97 = getelementptr inbounds %struct.SkSamplingOptions, %struct.SkSamplingOptions* %6, i64 0, i32 2
  store i32 1, i32* %97, align 4
  %98 = getelementptr inbounds %struct.SkSamplingOptions, %struct.SkSamplingOptions* %6, i64 0, i32 3
  store i32 1, i32* %98, align 4
  %99 = call zeroext i1 @_ZNK8SkPixmap11scalePixelsERKS_RK17SkSamplingOptions(%class.SkPixmap* %93, %class.SkPixmap* dereferenceable(40) %94, %struct.SkSamplingOptions* nonnull dereferenceable(20) %6) #14
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %91) #14
  br i1 %99, label %100, label %103

100:                                              ; preds = %92
  %101 = call dereferenceable(56) %class.SkBitmap* @_ZN8SkBitmapaSERKS_(%class.SkBitmap* %36, %class.SkBitmap* nonnull dereferenceable(56) %5) #14
  br label %104

102:                                              ; preds = %81
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %91) #14
  br label %103

103:                                              ; preds = %102, %92
  call void @_ZN8SkBitmap5resetEv(%class.SkBitmap* nonnull %5) #14
  br label %104

104:                                              ; preds = %100, %103, %79
  %105 = call i32 @_ZNK3gfx4Size7GetAreaEv(%"class.gfx::Size"* %30) #14
  %106 = sext i32 %105 to i64
  %107 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %106, i64 4)
  %108 = extractvalue { i64, i1 } %107, 1
  %109 = extractvalue { i64, i1 } %107, 0
  %110 = select i1 %108, i64 -1, i64 %109
  %111 = call i8* @_Znam(i64 %110) #15
  %112 = bitcast i8* %111 to float*
  %113 = ptrtoint i8* %111 to i64
  %114 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %106, i64 12)
  %115 = extractvalue { i64, i1 } %114, 1
  %116 = extractvalue { i64, i1 } %114, 0
  %117 = select i1 %115, i64 -1, i64 %116
  %118 = call i8* @_Znam(i64 %117) #15
  %119 = ptrtoint i8* %118 to i64
  %120 = bitcast i8* %118 to %"class.gfx::Point3F"*
  %121 = icmp eq i32 %105, 0
  br i1 %121, label %127, label %122

122:                                              ; preds = %104
  %123 = add nsw i64 %116, -12
  %124 = urem i64 %123, 12
  %125 = sub nsw i64 %123, %124
  %126 = add nsw i64 %125, 12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %118, i8 0, i64 %126, i1 false)
  br label %127

127:                                              ; preds = %122, %104
  %128 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %5, i64 0, i32 1, i32 2, i32 1, i32 0
  %129 = load i32, i32* %128, align 8
  %130 = icmp slt i32 %129, 1
  br i1 %130, label %158, label %131

131:                                              ; preds = %127
  %132 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %5, i64 0, i32 1, i32 2, i32 1, i32 1
  %133 = load i32, i32* %132, align 4
  %134 = icmp slt i32 %133, 1
  br i1 %134, label %158, label %135

135:                                              ; preds = %131
  %136 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %5, i64 0, i32 0, i32 0
  %137 = load %class.SkPixelRef*, %class.SkPixelRef** %136, align 8
  %138 = icmp eq %class.SkPixelRef* %137, null
  br i1 %138, label %158, label %139

139:                                              ; preds = %135
  %140 = load i32, i32* %34, align 4
  %141 = icmp sgt i32 %140, 0
  br i1 %141, label %142, label %281

142:                                              ; preds = %139
  %143 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %5, i64 0, i32 1, i32 0
  %144 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %5, i64 0, i32 1, i32 1
  %145 = load i8*, i8** %143, align 8
  %146 = load i64, i64* %144, align 8
  %147 = load i32, i32* %31, align 4
  %148 = icmp sgt i32 %147, 0
  %149 = sext i32 %147 to i64
  %150 = sext i32 %140 to i64
  %151 = shl nsw i64 %149, 2
  %152 = getelementptr i8, i8* %111, i64 %151
  %153 = mul nsw i64 %149, 12
  %154 = getelementptr i8, i8* %118, i64 %153
  %155 = icmp ult i32 %147, 4
  %156 = and i64 %149, -4
  %157 = icmp eq i64 %156, %149
  br label %182

158:                                              ; preds = %127, %131, %135
  %159 = getelementptr inbounds float, float* %112, i64 %106
  %160 = ptrtoint float* %159 to i64
  %161 = sub i64 %160, %113
  %162 = icmp sgt i64 %161, 0
  br i1 %162, label %163, label %169

163:                                              ; preds = %158
  %164 = and i64 %161, -4
  %165 = icmp ult i64 %161, 4
  %166 = sext i1 %165 to i64
  %167 = shl nsw i64 %166, 2
  %168 = sub i64 %164, %167
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %111, i8 0, i64 %168, i1 false)
  br label %169

169:                                              ; preds = %163, %158
  %170 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %120, i64 %106
  %171 = ptrtoint %"class.gfx::Point3F"* %170 to i64
  %172 = sub i64 %171, %119
  %173 = icmp sgt i64 %172, 0
  br i1 %173, label %174, label %281

174:                                              ; preds = %169
  %175 = udiv i64 %172, 12
  %176 = mul nuw i64 %175, 12
  %177 = icmp ult i64 %172, 12
  %178 = mul i64 %175, 12
  %179 = add nsw i64 %178, -12
  %180 = select i1 %177, i64 %179, i64 0
  %181 = sub i64 %176, %180
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %118, i8 0, i64 %181, i1 false)
  br label %281

182:                                              ; preds = %142, %251
  %183 = phi i64 [ 0, %142 ], [ %253, %251 ]
  %184 = phi i32 [ 0, %142 ], [ %252, %251 ]
  %185 = mul i64 %146, %183
  %186 = getelementptr i8, i8* %145, i64 %185
  %187 = add i64 %151, %185
  %188 = getelementptr i8, i8* %145, i64 %187
  %189 = mul i64 %146, %183
  %190 = getelementptr inbounds i8, i8* %145, i64 %189
  %191 = bitcast i8* %190 to i32*
  br i1 %148, label %192, label %251

192:                                              ; preds = %182
  %193 = sext i32 %184 to i64
  br i1 %155, label %194, label %197

194:                                              ; preds = %247, %197, %192
  %195 = phi i64 [ 0, %197 ], [ 0, %192 ], [ %156, %247 ]
  %196 = phi i64 [ %193, %197 ], [ %193, %192 ], [ %216, %247 ]
  br label %255

197:                                              ; preds = %192
  %198 = shl nsw i64 %193, 2
  %199 = getelementptr i8, i8* %111, i64 %198
  %200 = getelementptr i8, i8* %152, i64 %198
  %201 = mul nsw i64 %193, 12
  %202 = getelementptr i8, i8* %118, i64 %201
  %203 = getelementptr i8, i8* %154, i64 %201
  %204 = icmp ult i8* %199, %203
  %205 = icmp ult i8* %202, %200
  %206 = and i1 %204, %205
  %207 = icmp ult i8* %199, %188
  %208 = icmp ult i8* %186, %200
  %209 = and i1 %207, %208
  %210 = or i1 %206, %209
  %211 = icmp ult i8* %202, %188
  %212 = icmp ult i8* %186, %203
  %213 = and i1 %211, %212
  %214 = or i1 %210, %213
  br i1 %214, label %194, label %215

215:                                              ; preds = %197
  %216 = add nsw i64 %156, %193
  br label %217

217:                                              ; preds = %217, %215
  %218 = phi i64 [ 0, %215 ], [ %245, %217 ]
  %219 = add i64 %218, %193
  %220 = getelementptr inbounds i32, i32* %191, i64 %218
  %221 = bitcast i32* %220 to <4 x i32>*
  %222 = load <4 x i32>, <4 x i32>* %221, align 4, !alias.scope !50
  %223 = lshr <4 x i32> %222, <i32 24, i32 24, i32 24, i32 24>
  %224 = uitofp <4 x i32> %223 to <4 x float>
  %225 = fdiv <4 x float> %224, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %226 = getelementptr inbounds float, float* %112, i64 %219
  %227 = bitcast float* %226 to <4 x float>*
  store <4 x float> %225, <4 x float>* %227, align 4, !alias.scope !53, !noalias !55
  %228 = lshr <4 x i32> %222, <i32 16, i32 16, i32 16, i32 16>
  %229 = and <4 x i32> %228, <i32 255, i32 255, i32 255, i32 255>
  %230 = uitofp <4 x i32> %229 to <4 x float>
  %231 = fdiv <4 x float> %230, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %232 = lshr <4 x i32> %222, <i32 8, i32 8, i32 8, i32 8>
  %233 = and <4 x i32> %232, <i32 255, i32 255, i32 255, i32 255>
  %234 = uitofp <4 x i32> %233 to <4 x float>
  %235 = fdiv <4 x float> %234, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %236 = and <4 x i32> %222, <i32 255, i32 255, i32 255, i32 255>
  %237 = uitofp <4 x i32> %236 to <4 x float>
  %238 = fdiv <4 x float> %237, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %239 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %120, i64 %219, i32 2
  %240 = getelementptr inbounds float, float* %239, i64 -2
  %241 = bitcast float* %240 to <12 x float>*
  %242 = shufflevector <4 x float> %231, <4 x float> %235, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %243 = shufflevector <4 x float> %238, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %244 = shufflevector <8 x float> %242, <8 x float> %243, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %244, <12 x float>* %241, align 4
  %245 = add i64 %218, 4
  %246 = icmp eq i64 %245, %156
  br i1 %246, label %247, label %217, !llvm.loop !57

247:                                              ; preds = %217
  br i1 %157, label %248, label %194

248:                                              ; preds = %255, %247
  %249 = phi i64 [ %216, %247 ], [ %278, %255 ]
  %250 = trunc i64 %249 to i32
  br label %251

251:                                              ; preds = %248, %182
  %252 = phi i32 [ %184, %182 ], [ %250, %248 ]
  %253 = add nuw nsw i64 %183, 1
  %254 = icmp slt i64 %253, %150
  br i1 %254, label %182, label %281

255:                                              ; preds = %194, %255
  %256 = phi i64 [ %279, %255 ], [ %195, %194 ]
  %257 = phi i64 [ %278, %255 ], [ %196, %194 ]
  %258 = getelementptr inbounds i32, i32* %191, i64 %256
  %259 = load i32, i32* %258, align 4
  %260 = lshr i32 %259, 24
  %261 = uitofp i32 %260 to float
  %262 = fdiv float %261, 2.550000e+02
  %263 = getelementptr inbounds float, float* %112, i64 %257
  store float %262, float* %263, align 4
  %264 = lshr i32 %259, 16
  %265 = and i32 %264, 255
  %266 = uitofp i32 %265 to float
  %267 = fdiv float %266, 2.550000e+02
  %268 = lshr i32 %259, 8
  %269 = and i32 %268, 255
  %270 = uitofp i32 %269 to float
  %271 = fdiv float %270, 2.550000e+02
  %272 = and i32 %259, 255
  %273 = uitofp i32 %272 to float
  %274 = fdiv float %273, 2.550000e+02
  %275 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %120, i64 %257, i32 0
  store float %267, float* %275, align 4
  %276 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %120, i64 %257, i32 1
  store float %271, float* %276, align 4
  %277 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %120, i64 %257, i32 2
  store float %274, float* %277, align 4
  %278 = add nsw i64 %257, 1
  %279 = add nuw nsw i64 %256, 1
  %280 = icmp slt i64 %279, %149
  br i1 %280, label %255, label %248, !llvm.loop !58

281:                                              ; preds = %251, %174, %139, %169
  %282 = getelementptr inbounds %"class.gfx::ColorSpace", %"class.gfx::ColorSpace"* %7, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %282) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %282, i8 0, i64 68, i1 false) #14
  %283 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %5, i64 0, i32 1, i32 2, i32 0, i32 0, i32 0
  %284 = load %class.SkColorSpace*, %class.SkColorSpace** %283, align 8
  %285 = icmp eq %class.SkColorSpace* %284, null
  br i1 %285, label %288, label %286

286:                                              ; preds = %281
  %287 = getelementptr inbounds %"class.gfx::ColorSpace", %"class.gfx::ColorSpace"* %8, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %287) #14
  call void @_ZN3gfx10ColorSpaceC1ERK12SkColorSpace(%"class.gfx::ColorSpace"* nonnull %8, %class.SkColorSpace* nonnull dereferenceable(144) %284) #14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %282, i8* nonnull align 4 %287, i64 68, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %287) #14
  br label %288

288:                                              ; preds = %281, %286
  %289 = call zeroext i1 @_ZNK3gfx10ColorSpace7IsValidEv(%"class.gfx::ColorSpace"* nonnull %7) #14
  br i1 %289, label %296, label %290

290:                                              ; preds = %288
  store i8 1, i8* %282, align 4
  %291 = getelementptr inbounds %"class.gfx::ColorSpace", %"class.gfx::ColorSpace"* %7, i64 0, i32 1
  store i8 9, i8* %291, align 1
  %292 = getelementptr inbounds %"class.gfx::ColorSpace", %"class.gfx::ColorSpace"* %7, i64 0, i32 2
  store i8 1, i8* %292, align 2
  %293 = getelementptr inbounds %"class.gfx::ColorSpace", %"class.gfx::ColorSpace"* %7, i64 0, i32 3
  store i8 2, i8* %293, align 1
  %294 = getelementptr inbounds %"class.gfx::ColorSpace", %"class.gfx::ColorSpace"* %7, i64 0, i32 4
  %295 = bitcast [9 x float]* %294 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %295, i8 0, i64 64, i1 false)
  br label %296

296:                                              ; preds = %290, %288
  %297 = getelementptr inbounds %"class.viz::VideoCaptureOverlay::Sprite", %"class.viz::VideoCaptureOverlay::Sprite"* %0, i64 0, i32 4
  %298 = call zeroext i1 @_ZNK3gfx10ColorSpaceneERKS0_(%"class.gfx::ColorSpace"* nonnull %7, %"class.gfx::ColorSpace"* dereferenceable(68) %297) #14
  br i1 %298, label %299, label %311

299:                                              ; preds = %296
  %300 = call %"class.gfx::ColorTransform"* @_ZN3gfx14ColorTransform17NewColorTransformERKNS_10ColorSpaceEiS3_iNS0_6IntentE(%"class.gfx::ColorSpace"* nonnull dereferenceable(68) %7, i32 8, %"class.gfx::ColorSpace"* dereferenceable(68) %297, i32 8, i32 0) #14
  %301 = bitcast %"class.gfx::ColorTransform"* %300 to void (%"class.gfx::ColorTransform"*, %"class.gfx::Point3F"*, i64)***
  %302 = load void (%"class.gfx::ColorTransform"*, %"class.gfx::Point3F"*, i64)**, void (%"class.gfx::ColorTransform"*, %"class.gfx::Point3F"*, i64)*** %301, align 8
  %303 = getelementptr inbounds void (%"class.gfx::ColorTransform"*, %"class.gfx::Point3F"*, i64)*, void (%"class.gfx::ColorTransform"*, %"class.gfx::Point3F"*, i64)** %302, i64 4
  %304 = load void (%"class.gfx::ColorTransform"*, %"class.gfx::Point3F"*, i64)*, void (%"class.gfx::ColorTransform"*, %"class.gfx::Point3F"*, i64)** %303, align 8
  call void %304(%"class.gfx::ColorTransform"* %300, %"class.gfx::Point3F"* nonnull %120, i64 %106) #14
  %305 = icmp eq %"class.gfx::ColorTransform"* %300, null
  br i1 %305, label %311, label %306

306:                                              ; preds = %299
  %307 = bitcast %"class.gfx::ColorTransform"* %300 to void (%"class.gfx::ColorTransform"*)***
  %308 = load void (%"class.gfx::ColorTransform"*)**, void (%"class.gfx::ColorTransform"*)*** %307, align 8
  %309 = getelementptr inbounds void (%"class.gfx::ColorTransform"*)*, void (%"class.gfx::ColorTransform"*)** %308, i64 1
  %310 = load void (%"class.gfx::ColorTransform"*)*, void (%"class.gfx::ColorTransform"*)** %309, align 8
  call void %310(%"class.gfx::ColorTransform"* nonnull %300) #14
  br label %311

311:                                              ; preds = %306, %299, %296
  %312 = getelementptr inbounds %"class.viz::VideoCaptureOverlay::Sprite", %"class.viz::VideoCaptureOverlay::Sprite"* %0, i64 0, i32 3
  %313 = load i32, i32* %312, align 8
  switch i32 %313, label %595 [
    i32 1, label %314
    i32 10, label %554
  ]

314:                                              ; preds = %311
  %315 = call i32 @_ZNK3gfx4Size7GetAreaEv(%"class.gfx::Size"* %30) #14
  %316 = sdiv i32 %315, 4
  %317 = shl i32 %105, 1
  %318 = mul nsw i32 %316, 3
  %319 = add nsw i32 %318, %317
  %320 = sext i32 %319 to i64
  %321 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %320, i64 4)
  %322 = extractvalue { i64, i1 } %321, 1
  %323 = extractvalue { i64, i1 } %321, 0
  %324 = select i1 %322, i64 -1, i64 %323
  %325 = call i8* @_Znam(i64 %324) #15
  %326 = getelementptr inbounds %"class.viz::VideoCaptureOverlay::Sprite", %"class.viz::VideoCaptureOverlay::Sprite"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %327 = load float*, float** %326, align 8
  %328 = bitcast float** %326 to i8**
  store i8* %325, i8** %328, align 8
  %329 = icmp eq float* %327, null
  %330 = bitcast i8* %325 to float*
  br i1 %329, label %335, label %331

331:                                              ; preds = %314
  %332 = bitcast float* %327 to i8*
  call void @_ZdaPv(i8* %332) #15
  %333 = load float*, float** %326, align 8
  %334 = bitcast float* %333 to i8*
  br label %335

335:                                              ; preds = %314, %331
  %336 = phi i8* [ %325, %314 ], [ %334, %331 ]
  %337 = phi float* [ %330, %314 ], [ %333, %331 ]
  %338 = getelementptr inbounds float, float* %337, i64 %106
  %339 = bitcast float* %338 to i8*
  %340 = icmp sgt i32 %105, 0
  br i1 %340, label %341, label %435

341:                                              ; preds = %335
  %342 = zext i32 %105 to i64
  %343 = icmp ult i32 %105, 5
  br i1 %343, label %344, label %364

344:                                              ; preds = %407, %372, %364, %341
  %345 = phi i64 [ 0, %372 ], [ 0, %364 ], [ 0, %341 ], [ %406, %407 ]
  %346 = sub nsw i64 %342, %345
  %347 = xor i64 %345, -1
  %348 = and i64 %346, 1
  %349 = icmp eq i64 %348, 0
  br i1 %349, label %360, label %350

350:                                              ; preds = %344
  %351 = getelementptr inbounds float, float* %112, i64 %345
  %352 = load float, float* %351, align 4
  %353 = fsub float 1.000000e+00, %352
  %354 = getelementptr inbounds float, float* %337, i64 %345
  store float %353, float* %354, align 4
  %355 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %120, i64 %345, i32 0
  %356 = load float, float* %355, align 4
  %357 = fmul float %352, %356
  %358 = getelementptr inbounds float, float* %338, i64 %345
  store float %357, float* %358, align 4
  %359 = add nuw nsw i64 %345, 1
  br label %360

360:                                              ; preds = %344, %350
  %361 = phi i64 [ %345, %344 ], [ %359, %350 ]
  %362 = sub nsw i64 0, %342
  %363 = icmp eq i64 %347, %362
  br i1 %363, label %435, label %444

364:                                              ; preds = %341
  %365 = add nsw i64 %342, -1
  %366 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %365, i64 12)
  %367 = extractvalue { i64, i1 } %366, 0
  %368 = extractvalue { i64, i1 } %366, 1
  %369 = xor i64 %119, -1
  %370 = icmp ugt i64 %367, %369
  %371 = or i1 %370, %368
  br i1 %371, label %344, label %372

372:                                              ; preds = %364
  %373 = getelementptr float, float* %337, i64 %342
  %374 = bitcast float* %373 to i8*
  %375 = add nsw i64 %106, %342
  %376 = getelementptr float, float* %337, i64 %375
  %377 = bitcast float* %376 to i8*
  %378 = shl nuw nsw i64 %342, 2
  %379 = getelementptr i8, i8* %111, i64 %378
  %380 = mul nuw nsw i64 %342, 12
  %381 = add nsw i64 %380, -8
  %382 = getelementptr i8, i8* %118, i64 %381
  %383 = icmp ult i8* %336, %377
  %384 = icmp ult float* %338, %373
  %385 = and i1 %383, %384
  %386 = icmp ult i8* %336, %379
  %387 = icmp ult i8* %111, %374
  %388 = and i1 %386, %387
  %389 = or i1 %385, %388
  %390 = icmp ult i8* %336, %382
  %391 = icmp ult i8* %118, %374
  %392 = and i1 %390, %391
  %393 = or i1 %389, %392
  %394 = icmp ugt i8* %379, %339
  %395 = icmp ult i8* %111, %377
  %396 = and i1 %394, %395
  %397 = or i1 %393, %396
  %398 = icmp ugt i8* %382, %339
  %399 = icmp ult i8* %118, %377
  %400 = and i1 %398, %399
  %401 = or i1 %397, %400
  br i1 %401, label %344, label %402

402:                                              ; preds = %372
  %403 = and i64 %342, 3
  %404 = icmp eq i64 %403, 0
  %405 = select i1 %404, i64 4, i64 %403
  %406 = sub nsw i64 %342, %405
  br label %407

407:                                              ; preds = %407, %402
  %408 = phi i64 [ 0, %402 ], [ %433, %407 ]
  %409 = or i64 %408, 1
  %410 = or i64 %408, 2
  %411 = or i64 %408, 3
  %412 = getelementptr inbounds float, float* %112, i64 %408
  %413 = bitcast float* %412 to <4 x float>*
  %414 = load <4 x float>, <4 x float>* %413, align 4, !alias.scope !59
  %415 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %414
  %416 = getelementptr inbounds float, float* %337, i64 %408
  %417 = bitcast float* %416 to <4 x float>*
  store <4 x float> %415, <4 x float>* %417, align 4, !alias.scope !62, !noalias !64
  %418 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %120, i64 %408, i32 0
  %419 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %120, i64 %409, i32 0
  %420 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %120, i64 %410, i32 0
  %421 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %120, i64 %411, i32 0
  %422 = load float, float* %418, align 4, !alias.scope !67
  %423 = load float, float* %419, align 4, !alias.scope !67
  %424 = load float, float* %420, align 4, !alias.scope !67
  %425 = load float, float* %421, align 4, !alias.scope !67
  %426 = insertelement <4 x float> undef, float %422, i32 0
  %427 = insertelement <4 x float> %426, float %423, i32 1
  %428 = insertelement <4 x float> %427, float %424, i32 2
  %429 = insertelement <4 x float> %428, float %425, i32 3
  %430 = fmul <4 x float> %414, %429
  %431 = getelementptr inbounds float, float* %338, i64 %408
  %432 = bitcast float* %431 to <4 x float>*
  store <4 x float> %430, <4 x float>* %432, align 4, !alias.scope !68, !noalias !69
  %433 = add i64 %408, 4
  %434 = icmp eq i64 %433, %406
  br i1 %434, label %344, label %407, !llvm.loop !70

435:                                              ; preds = %360, %444, %335
  %436 = getelementptr inbounds float, float* %338, i64 %106
  %437 = sext i32 %316 to i64
  %438 = getelementptr inbounds float, float* %436, i64 %437
  %439 = getelementptr inbounds float, float* %112, i64 %106
  %440 = icmp ugt float* %439, %112
  br i1 %440, label %441, label %595

441:                                              ; preds = %435
  %442 = getelementptr inbounds float, float* %438, i64 %437
  %443 = load i32, i32* %31, align 4
  br label %465

444:                                              ; preds = %360, %444
  %445 = phi i64 [ %463, %444 ], [ %361, %360 ]
  %446 = getelementptr inbounds float, float* %112, i64 %445
  %447 = load float, float* %446, align 4
  %448 = fsub float 1.000000e+00, %447
  %449 = getelementptr inbounds float, float* %337, i64 %445
  store float %448, float* %449, align 4
  %450 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %120, i64 %445, i32 0
  %451 = load float, float* %450, align 4
  %452 = fmul float %447, %451
  %453 = getelementptr inbounds float, float* %338, i64 %445
  store float %452, float* %453, align 4
  %454 = add nuw nsw i64 %445, 1
  %455 = getelementptr inbounds float, float* %112, i64 %454
  %456 = load float, float* %455, align 4
  %457 = fsub float 1.000000e+00, %456
  %458 = getelementptr inbounds float, float* %337, i64 %454
  store float %457, float* %458, align 4
  %459 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %120, i64 %454, i32 0
  %460 = load float, float* %459, align 4
  %461 = fmul float %456, %460
  %462 = getelementptr inbounds float, float* %338, i64 %454
  store float %461, float* %462, align 4
  %463 = add nuw nsw i64 %445, 2
  %464 = icmp eq i64 %463, %342
  br i1 %464, label %435, label %444, !llvm.loop !71

465:                                              ; preds = %441, %478
  %466 = phi i32 [ %480, %478 ], [ %443, %441 ]
  %467 = phi %"class.gfx::Point3F"* [ %485, %478 ], [ %120, %441 ]
  %468 = phi float* [ %484, %478 ], [ %112, %441 ]
  %469 = phi float* [ %483, %478 ], [ %442, %441 ]
  %470 = phi float* [ %482, %478 ], [ %438, %441 ]
  %471 = phi float* [ %481, %478 ], [ %436, %441 ]
  %472 = sext i32 %466 to i64
  %473 = getelementptr inbounds float, float* %468, i64 %472
  %474 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %467, i64 %472
  %475 = icmp sgt i32 %466, 0
  br i1 %475, label %487, label %478

476:                                              ; preds = %487
  %477 = sext i32 %551 to i64
  br label %478

478:                                              ; preds = %476, %465
  %479 = phi i64 [ %472, %465 ], [ %477, %476 ]
  %480 = phi i32 [ %466, %465 ], [ %551, %476 ]
  %481 = phi float* [ %471, %465 ], [ %505, %476 ]
  %482 = phi float* [ %470, %465 ], [ %528, %476 ]
  %483 = phi float* [ %469, %465 ], [ %549, %476 ]
  %484 = getelementptr inbounds float, float* %473, i64 %479
  %485 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %474, i64 %479
  %486 = icmp ult float* %484, %439
  br i1 %486, label %465, label %595

487:                                              ; preds = %465, %487
  %488 = phi i64 [ %550, %487 ], [ 0, %465 ]
  %489 = phi float* [ %549, %487 ], [ %469, %465 ]
  %490 = phi float* [ %528, %487 ], [ %470, %465 ]
  %491 = phi float* [ %505, %487 ], [ %471, %465 ]
  %492 = getelementptr inbounds float, float* %468, i64 %488
  %493 = load float, float* %492, align 4
  %494 = or i64 %488, 1
  %495 = getelementptr inbounds float, float* %468, i64 %494
  %496 = load float, float* %495, align 4
  %497 = fadd float %493, %496
  %498 = getelementptr inbounds float, float* %473, i64 %488
  %499 = load float, float* %498, align 4
  %500 = fadd float %497, %499
  %501 = getelementptr inbounds float, float* %473, i64 %494
  %502 = load float, float* %501, align 4
  %503 = fadd float %500, %502
  %504 = call float @llvm.fma.f32(float %503, float -2.500000e-01, float 1.000000e+00) #14
  %505 = getelementptr inbounds float, float* %491, i64 1
  store float %504, float* %491, align 4
  %506 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %467, i64 %488, i32 1
  %507 = load float, float* %506, align 4
  %508 = load float, float* %492, align 4
  %509 = fmul float %507, %508
  %510 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %467, i64 %494, i32 1
  %511 = load float, float* %510, align 4
  %512 = load float, float* %495, align 4
  %513 = fmul float %511, %512
  %514 = fadd float %509, %513
  %515 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %474, i64 %488
  %516 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %515, i64 0, i32 1
  %517 = load float, float* %516, align 4
  %518 = load float, float* %498, align 4
  %519 = fmul float %517, %518
  %520 = fadd float %514, %519
  %521 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %474, i64 %494
  %522 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %521, i64 0, i32 1
  %523 = load float, float* %522, align 4
  %524 = load float, float* %501, align 4
  %525 = fmul float %523, %524
  %526 = fadd float %520, %525
  %527 = fmul float %526, 2.500000e-01
  %528 = getelementptr inbounds float, float* %490, i64 1
  store float %527, float* %490, align 4
  %529 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %467, i64 %488, i32 2
  %530 = load float, float* %529, align 4
  %531 = load float, float* %492, align 4
  %532 = fmul float %530, %531
  %533 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %467, i64 %494, i32 2
  %534 = load float, float* %533, align 4
  %535 = load float, float* %495, align 4
  %536 = fmul float %534, %535
  %537 = fadd float %532, %536
  %538 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %515, i64 0, i32 2
  %539 = load float, float* %538, align 4
  %540 = load float, float* %498, align 4
  %541 = fmul float %539, %540
  %542 = fadd float %537, %541
  %543 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %521, i64 0, i32 2
  %544 = load float, float* %543, align 4
  %545 = load float, float* %501, align 4
  %546 = fmul float %544, %545
  %547 = fadd float %542, %546
  %548 = fmul float %547, 2.500000e-01
  %549 = getelementptr inbounds float, float* %489, i64 1
  store float %548, float* %489, align 4
  %550 = add nuw nsw i64 %488, 2
  %551 = load i32, i32* %31, align 4
  %552 = sext i32 %551 to i64
  %553 = icmp slt i64 %550, %552
  br i1 %553, label %487, label %476

554:                                              ; preds = %311
  %555 = shl nsw i32 %105, 2
  %556 = sext i32 %555 to i64
  %557 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %556, i64 4)
  %558 = extractvalue { i64, i1 } %557, 1
  %559 = extractvalue { i64, i1 } %557, 0
  %560 = select i1 %558, i64 -1, i64 %559
  %561 = call i8* @_Znam(i64 %560) #15
  %562 = getelementptr inbounds %"class.viz::VideoCaptureOverlay::Sprite", %"class.viz::VideoCaptureOverlay::Sprite"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %563 = load float*, float** %562, align 8
  %564 = bitcast float** %562 to i8**
  store i8* %561, i8** %564, align 8
  %565 = icmp eq float* %563, null
  %566 = bitcast i8* %561 to float*
  br i1 %565, label %570, label %567

567:                                              ; preds = %554
  %568 = bitcast float* %563 to i8*
  call void @_ZdaPv(i8* %568) #15
  %569 = load float*, float** %562, align 8
  br label %570

570:                                              ; preds = %554, %567
  %571 = phi float* [ %566, %554 ], [ %569, %567 ]
  %572 = icmp sgt i32 %105, 0
  br i1 %572, label %573, label %595

573:                                              ; preds = %570
  %574 = zext i32 %105 to i64
  br label %575

575:                                              ; preds = %575, %573
  %576 = phi i64 [ 0, %573 ], [ %593, %575 ]
  %577 = phi float* [ %571, %573 ], [ %592, %575 ]
  %578 = getelementptr inbounds float, float* %112, i64 %576
  %579 = load float, float* %578, align 4
  %580 = getelementptr inbounds float, float* %577, i64 1
  store float %579, float* %577, align 4
  %581 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %120, i64 %576, i32 0
  %582 = load float, float* %581, align 4
  %583 = fmul float %579, %582
  %584 = getelementptr inbounds float, float* %577, i64 2
  store float %583, float* %580, align 4
  %585 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %120, i64 %576, i32 1
  %586 = load float, float* %585, align 4
  %587 = fmul float %579, %586
  %588 = getelementptr inbounds float, float* %577, i64 3
  store float %587, float* %584, align 4
  %589 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %120, i64 %576, i32 2
  %590 = load float, float* %589, align 4
  %591 = fmul float %579, %590
  %592 = getelementptr inbounds float, float* %577, i64 4
  store float %591, float* %588, align 4
  %593 = add nuw nsw i64 %576, 1
  %594 = icmp eq i64 %593, %574
  br i1 %594, label %595, label %575

595:                                              ; preds = %575, %478, %570, %435, %311
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %282) #14
  call void @_ZdaPv(i8* nonnull %118) #15
  call void @_ZdaPv(i8* nonnull %111) #15
  call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* nonnull %5) #14
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %53) #14
  %596 = load %class.SkColorSpace*, %class.SkColorSpace** %25, align 8
  %597 = icmp eq %class.SkColorSpace* %596, null
  br i1 %597, label %604, label %598

598:                                              ; preds = %595
  %599 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %596, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %600 = atomicrmw add i32* %599, i32 -1 acq_rel
  %601 = icmp eq i32 %600, 1
  br i1 %601, label %602, label %604

602:                                              ; preds = %598
  %603 = bitcast %class.SkColorSpace* %596 to i8*
  call void @_ZdlPv(i8* %603) #15
  br label %604

604:                                              ; preds = %595, %598, %602
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %24) #14
  %605 = icmp eq i8* %21, null
  br i1 %605, label %610, label %606

606:                                              ; preds = %604
  %607 = load i8, i8* %21, align 1
  %608 = icmp eq i8 %607, 0
  br i1 %608, label %610, label %609

609:                                              ; preds = %606
  call void @_ZN20trace_event_internal24UpdateTraceEventDurationEPKhPKcN4base11trace_event16TraceEventHandleE(i8* nonnull %21, i8* %22, i64 %23) #14
  br label %610

610:                                              ; preds = %604, %606, %609
  ret void
}

declare i32 @_ZNK3gfx4Size7GetAreaEv(%"class.gfx::Size"*) local_unnamed_addr #4

declare i8* @_ZN5media10VideoFrame12visible_dataEm(%"class.media::VideoFrame"*, i64) local_unnamed_addr #4

declare zeroext i1 @_ZNK8SkPixmap11scalePixelsERKS_RK17SkSamplingOptions(%class.SkPixmap*, %class.SkPixmap* dereferenceable(40), %struct.SkSamplingOptions* dereferenceable(20)) local_unnamed_addr #4

declare void @_ZN8SkBitmap5resetEv(%class.SkBitmap*) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #9

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #10

declare void @_ZN3gfx10ColorSpaceC1ERK12SkColorSpace(%"class.gfx::ColorSpace"*, %class.SkColorSpace* dereferenceable(144)) unnamed_addr #4

declare zeroext i1 @_ZNK3gfx10ColorSpace7IsValidEv(%"class.gfx::ColorSpace"*) local_unnamed_addr #4

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nounwind
declare void @_ZN4mojo8internal20PendingReceiverStateC1EOS1_(%"struct.mojo::internal::PendingReceiverState"*, %"struct.mojo::internal::PendingReceiverState"* dereferenceable(24)) unnamed_addr #6

; Function Attrs: nounwind
declare void @_ZN4mojo8internal20PendingReceiverStateD1Ev(%"struct.mojo::internal::PendingReceiverState"*) unnamed_addr #6

declare void @_ZN4mojo8internal16BindingStateBase5CloseEv(%"class.mojo::internal::BindingStateBase"*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4mojo15MessageReceiverD2Ev(%"class.mojo::MessageReceiver"*) unnamed_addr #3 comdat align 2 {
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4mojo8internal16BindingStateBaseD2Ev(%"class.mojo::internal::BindingStateBase"*) unnamed_addr #6

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fma.f64(double, double, double) #9

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #9

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #9

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.ssub.with.overflow.i32(i32, i32) #9

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fma.f32(float, float, float) #9

declare void @_ZN20trace_event_internal24UpdateTraceEventDurationEPKhPKcN4base11trace_event16TraceEventHandleE(i8*, i8*, i64) local_unnamed_addr #4

declare zeroext i1 @_ZN12SkColorSpace6EqualsEPKS_S1_(%class.SkColorSpace*, %class.SkColorSpace*) local_unnamed_addr #4

declare zeroext i1 @_ZN8SkBitmap14tryAllocPixelsERK11SkImageInfom(%class.SkBitmap*, %struct.SkImageInfo* dereferenceable(24), i64) local_unnamed_addr #4

declare i32 @_ZNK11SkColorInfo13bytesPerPixelEv(%class.SkColorInfo*) local_unnamed_addr #4

declare %"class.gfx::ColorTransform"* @_ZN3gfx14ColorTransform17NewColorTransformERKNS_10ColorSpaceEiS3_iNS0_6IntentE(%"class.gfx::ColorSpace"* dereferenceable(68), i32, %"class.gfx::ColorSpace"* dereferenceable(68), i32, i32) local_unnamed_addr #4

declare void @_ZN4mojo8internal16BindingStateBaseC2Ev(%"class.mojo::internal::BindingStateBase"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3viz5mojom32FrameSinkVideoCaptureOverlayStubIN4mojo19RawPtrImplRefTraitsINS0_28FrameSinkVideoCaptureOverlayEEEED0Ev(%"class.viz::mojom::FrameSinkVideoCaptureOverlayStub"*) unnamed_addr #3 comdat align 2 {
  %2 = bitcast %"class.viz::mojom::FrameSinkVideoCaptureOverlayStub"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #15
  ret void
}

declare zeroext i1 @_ZN4mojo15MessageReceiver25PrefersSerializedMessagesEv(%"class.mojo::MessageReceiver"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN3viz5mojom32FrameSinkVideoCaptureOverlayStubIN4mojo19RawPtrImplRefTraitsINS0_28FrameSinkVideoCaptureOverlayEEEE6AcceptEPNS2_7MessageE(%"class.viz::mojom::FrameSinkVideoCaptureOverlayStub"*, %"class.mojo::Message"*) unnamed_addr #3 comdat align 2 {
  %3 = getelementptr inbounds %"class.viz::mojom::FrameSinkVideoCaptureOverlayStub", %"class.viz::mojom::FrameSinkVideoCaptureOverlayStub"* %0, i64 0, i32 1
  %4 = load %"class.viz::mojom::FrameSinkVideoCaptureOverlay"*, %"class.viz::mojom::FrameSinkVideoCaptureOverlay"** %3, align 8
  %5 = icmp eq %"class.viz::mojom::FrameSinkVideoCaptureOverlay"* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  %7 = tail call zeroext i1 @_ZN3viz5mojom40FrameSinkVideoCaptureOverlayStubDispatch6AcceptEPNS0_28FrameSinkVideoCaptureOverlayEPN4mojo7MessageE(%"class.viz::mojom::FrameSinkVideoCaptureOverlay"* nonnull %4, %"class.mojo::Message"* %1) #14
  br label %8

8:                                                ; preds = %2, %6
  %9 = phi i1 [ %7, %6 ], [ false, %2 ]
  ret i1 %9
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN3viz5mojom32FrameSinkVideoCaptureOverlayStubIN4mojo19RawPtrImplRefTraitsINS0_28FrameSinkVideoCaptureOverlayEEEE19AcceptWithResponderEPNS2_7MessageENSt3__110unique_ptrINS2_25MessageReceiverWithStatusENS9_14default_deleteISB_EEEE(%"class.viz::mojom::FrameSinkVideoCaptureOverlayStub"*, %"class.mojo::Message"*, %"class.mojo::MessageReceiverWithStatus"*) unnamed_addr #3 comdat align 2 {
  %4 = getelementptr inbounds %"class.viz::mojom::FrameSinkVideoCaptureOverlayStub", %"class.viz::mojom::FrameSinkVideoCaptureOverlayStub"* %0, i64 0, i32 1
  %5 = load %"class.viz::mojom::FrameSinkVideoCaptureOverlay"*, %"class.viz::mojom::FrameSinkVideoCaptureOverlay"** %4, align 8
  %6 = icmp eq %"class.viz::mojom::FrameSinkVideoCaptureOverlay"* %5, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = tail call zeroext i1 @_ZN3viz5mojom40FrameSinkVideoCaptureOverlayStubDispatch19AcceptWithResponderEPNS0_28FrameSinkVideoCaptureOverlayEPN4mojo7MessageENSt3__110unique_ptrINS4_25MessageReceiverWithStatusENS7_14default_deleteIS9_EEEE(%"class.viz::mojom::FrameSinkVideoCaptureOverlay"* nonnull %5, %"class.mojo::Message"* %1, %"class.mojo::MessageReceiverWithStatus"* %2) #14
  br label %16

9:                                                ; preds = %3
  %10 = icmp eq %"class.mojo::MessageReceiverWithStatus"* %2, null
  br i1 %10, label %16, label %11

11:                                               ; preds = %9
  %12 = bitcast %"class.mojo::MessageReceiverWithStatus"* %2 to void (%"class.mojo::MessageReceiverWithStatus"*)***
  %13 = load void (%"class.mojo::MessageReceiverWithStatus"*)**, void (%"class.mojo::MessageReceiverWithStatus"*)*** %12, align 8
  %14 = getelementptr inbounds void (%"class.mojo::MessageReceiverWithStatus"*)*, void (%"class.mojo::MessageReceiverWithStatus"*)** %13, i64 1
  %15 = load void (%"class.mojo::MessageReceiverWithStatus"*)*, void (%"class.mojo::MessageReceiverWithStatus"*)** %14, align 8
  tail call void %15(%"class.mojo::MessageReceiverWithStatus"* nonnull %2) #14
  br label %16

16:                                               ; preds = %7, %9, %11
  %17 = phi i1 [ %8, %7 ], [ false, %9 ], [ false, %11 ]
  ret i1 %17
}

declare zeroext i1 @_ZN3viz5mojom40FrameSinkVideoCaptureOverlayStubDispatch6AcceptEPNS0_28FrameSinkVideoCaptureOverlayEPN4mojo7MessageE(%"class.viz::mojom::FrameSinkVideoCaptureOverlay"*, %"class.mojo::Message"*) local_unnamed_addr #4

declare zeroext i1 @_ZN3viz5mojom40FrameSinkVideoCaptureOverlayStubDispatch19AcceptWithResponderEPNS0_28FrameSinkVideoCaptureOverlayEPN4mojo7MessageENSt3__110unique_ptrINS4_25MessageReceiverWithStatusENS7_14default_deleteIS9_EEEE(%"class.viz::mojom::FrameSinkVideoCaptureOverlay"*, %"class.mojo::Message"*, %"class.mojo::MessageReceiverWithStatus"*) local_unnamed_addr #4

declare void @_ZN4mojo8internal16BindingStateBase12BindInternalEPNS0_20PendingReceiverStateE13scoped_refptrIN4base19SequencedTaskRunnerEEPKcNSt3__110unique_ptrINS_15MessageReceiverENSA_14default_deleteISC_EEEEbbPNS_34MessageReceiverWithResponderStatusEj(%"class.mojo::internal::BindingStateBase"*, %"struct.mojo::internal::PendingReceiverState"*, %"class.base::SequencedTaskRunner"*, i8*, %"class.mojo::MessageReceiver"*, i1 zeroext, i1 zeroext, %"class.mojo::MessageReceiverWithResponderStatus"*, i32) local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #10

declare void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"*) local_unnamed_addr #4

declare void @_ZN4base8internal12CallbackBase5ResetEv(%"class.base::internal::CallbackBase"*) local_unnamed_addr #4

; Function Attrs: nounwind
declare dereferenceable(8) %"class.base::internal::CallbackBase"* @_ZN4base8internal12CallbackBaseaSEOS1_(%"class.base::internal::CallbackBase"*, %"class.base::internal::CallbackBase"* dereferenceable(8)) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal7InvokerINS0_9BindStateIMN3viz19VideoCaptureOverlay11FrameSourceEFvPS4_EJNS0_17UnretainedWrapperIS5_EES6_EEEFvvEE7RunOnceEPNS0_13BindStateBaseE(%"class.base::internal::BindStateBase"*) #3 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1
  %3 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 2
  %4 = bitcast void (%"class.base::internal::BindStateBase"*)** %3 to i8**
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds void (%"class.base::internal::BindStateBase"*)*, void (%"class.base::internal::BindStateBase"*)** %3, i64 1
  %7 = bitcast void (%"class.base::internal::BindStateBase"*)** %6 to %"class.viz::VideoCaptureOverlay"**
  %8 = bitcast %"class.base::internal::BindStateBase"* %2 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 1
  %11 = bitcast void ()** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds i8, i8* %5, i64 %12
  %14 = bitcast i8* %13 to %"class.viz::VideoCaptureOverlay::FrameSource"*
  %15 = and i64 %9, 1
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %24, label %17

17:                                               ; preds = %1
  %18 = bitcast i8* %13 to i8**
  %19 = load i8*, i8** %18, align 8
  %20 = add i64 %9, -1
  %21 = getelementptr i8, i8* %19, i64 %20
  %22 = bitcast i8* %21 to void (%"class.viz::VideoCaptureOverlay::FrameSource"*, %"class.viz::VideoCaptureOverlay"*)**
  %23 = load void (%"class.viz::VideoCaptureOverlay::FrameSource"*, %"class.viz::VideoCaptureOverlay"*)*, void (%"class.viz::VideoCaptureOverlay::FrameSource"*, %"class.viz::VideoCaptureOverlay"*)** %22, align 8
  br label %26

24:                                               ; preds = %1
  %25 = inttoptr i64 %9 to void (%"class.viz::VideoCaptureOverlay::FrameSource"*, %"class.viz::VideoCaptureOverlay"*)*
  br label %26

26:                                               ; preds = %17, %24
  %27 = phi void (%"class.viz::VideoCaptureOverlay::FrameSource"*, %"class.viz::VideoCaptureOverlay"*)* [ %23, %17 ], [ %25, %24 ]
  %28 = load %"class.viz::VideoCaptureOverlay"*, %"class.viz::VideoCaptureOverlay"** %7, align 8
  tail call void %27(%"class.viz::VideoCaptureOverlay::FrameSource"* %14, %"class.viz::VideoCaptureOverlay"* %28) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal9BindStateIMN3viz19VideoCaptureOverlay11FrameSourceEFvPS3_EJNS0_17UnretainedWrapperIS4_EES5_EE7DestroyEPKNS0_13BindStateBaseE(%"class.base::internal::BindStateBase"*) #3 comdat align 2 {
  %2 = icmp eq %"class.base::internal::BindStateBase"* %0, null
  br i1 %2, label %5, label %3

3:                                                ; preds = %1
  %4 = bitcast %"class.base::internal::BindStateBase"* %0 to i8*
  tail call void @_ZdlPv(i8* %4) #15
  br label %5

5:                                                ; preds = %3, %1
  ret void
}

declare void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"*, void ()*, void (%"class.base::internal::BindStateBase"*)*) unnamed_addr #4

declare void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal7InvokerINS0_9BindStateIMN3viz19VideoCaptureOverlay6SpriteEFvRKN3gfx5PointERKNS6_4RectEPN5media10VideoFrameEEJ13scoped_refptrIS5_ES7_SA_EEEFvSF_EE7RunOnceEPNS0_13BindStateBaseESF_(%"class.base::internal::BindStateBase"*, %"class.media::VideoFrame"*) #3 comdat align 2 {
  %3 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1
  %4 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 2
  %5 = getelementptr inbounds void (%"class.base::internal::BindStateBase"*)*, void (%"class.base::internal::BindStateBase"*)** %4, i64 1
  %6 = bitcast void (%"class.base::internal::BindStateBase"*)** %5 to %"class.gfx::Point"*
  %7 = getelementptr inbounds void (%"class.base::internal::BindStateBase"*)*, void (%"class.base::internal::BindStateBase"*)** %4, i64 2
  %8 = bitcast void (%"class.base::internal::BindStateBase"*)** %7 to %"class.gfx::Rect"*
  %9 = bitcast %"class.base::internal::BindStateBase"* %3 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 1
  %12 = bitcast void ()** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = bitcast void (%"class.base::internal::BindStateBase"*)** %4 to i8**
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds i8, i8* %15, i64 %13
  %17 = bitcast i8* %16 to %"class.viz::VideoCaptureOverlay::Sprite"*
  %18 = and i64 %10, 1
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %27, label %20

20:                                               ; preds = %2
  %21 = bitcast i8* %16 to i8**
  %22 = load i8*, i8** %21, align 8
  %23 = add i64 %10, -1
  %24 = getelementptr i8, i8* %22, i64 %23
  %25 = bitcast i8* %24 to void (%"class.viz::VideoCaptureOverlay::Sprite"*, %"class.gfx::Point"*, %"class.gfx::Rect"*, %"class.media::VideoFrame"*)**
  %26 = load void (%"class.viz::VideoCaptureOverlay::Sprite"*, %"class.gfx::Point"*, %"class.gfx::Rect"*, %"class.media::VideoFrame"*)*, void (%"class.viz::VideoCaptureOverlay::Sprite"*, %"class.gfx::Point"*, %"class.gfx::Rect"*, %"class.media::VideoFrame"*)** %25, align 8
  br label %29

27:                                               ; preds = %2
  %28 = inttoptr i64 %10 to void (%"class.viz::VideoCaptureOverlay::Sprite"*, %"class.gfx::Point"*, %"class.gfx::Rect"*, %"class.media::VideoFrame"*)*
  br label %29

29:                                               ; preds = %20, %27
  %30 = phi void (%"class.viz::VideoCaptureOverlay::Sprite"*, %"class.gfx::Point"*, %"class.gfx::Rect"*, %"class.media::VideoFrame"*)* [ %26, %20 ], [ %28, %27 ]
  tail call void %30(%"class.viz::VideoCaptureOverlay::Sprite"* %17, %"class.gfx::Point"* dereferenceable(8) %6, %"class.gfx::Rect"* dereferenceable(16) %8, %"class.media::VideoFrame"* %1) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal9BindStateIMN3viz19VideoCaptureOverlay6SpriteEFvRKN3gfx5PointERKNS5_4RectEPN5media10VideoFrameEEJ13scoped_refptrIS4_ES6_S9_EE7DestroyEPKNS0_13BindStateBaseE(%"class.base::internal::BindStateBase"*) #3 comdat align 2 {
  %2 = icmp eq %"class.base::internal::BindStateBase"* %0, null
  br i1 %2, label %27, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 2
  %5 = bitcast void (%"class.base::internal::BindStateBase"*)** %4 to %"class.viz::VideoCaptureOverlay::Sprite"**
  %6 = load %"class.viz::VideoCaptureOverlay::Sprite"*, %"class.viz::VideoCaptureOverlay::Sprite"** %5, align 8
  %7 = icmp eq %"class.viz::VideoCaptureOverlay::Sprite"* %6, null
  br i1 %7, label %25, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.viz::VideoCaptureOverlay::Sprite", %"class.viz::VideoCaptureOverlay::Sprite"* %6, i64 0, i32 0
  %10 = getelementptr inbounds %"class.viz::VideoCaptureOverlay::Sprite", %"class.viz::VideoCaptureOverlay::Sprite"* %6, i64 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %10) #14
  %11 = getelementptr inbounds %"class.viz::VideoCaptureOverlay::Sprite", %"class.viz::VideoCaptureOverlay::Sprite"* %6, i64 0, i32 0, i32 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %25

14:                                               ; preds = %8
  %15 = getelementptr inbounds %"class.base::RefCounted.166", %"class.base::RefCounted.166"* %9, i64 36
  %16 = bitcast %"class.base::RefCounted.166"* %15 to float**
  %17 = load float*, float** %16, align 8
  store float* null, float** %16, align 8
  %18 = icmp eq float* %17, null
  br i1 %18, label %21, label %19

19:                                               ; preds = %14
  %20 = bitcast float* %17 to i8*
  tail call void @_ZdaPv(i8* %20) #15
  br label %21

21:                                               ; preds = %19, %14
  %22 = getelementptr inbounds %"class.base::RefCounted.166", %"class.base::RefCounted.166"* %9, i64 2
  %23 = bitcast %"class.base::RefCounted.166"* %22 to %class.SkBitmap*
  tail call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* %23) #14
  %24 = bitcast %"class.viz::VideoCaptureOverlay::Sprite"* %6 to i8*
  tail call void @_ZdlPv(i8* %24) #15
  br label %25

25:                                               ; preds = %3, %8, %21
  %26 = bitcast %"class.base::internal::BindStateBase"* %0 to i8*
  tail call void @_ZdlPv(i8* %26) #15
  br label %27

27:                                               ; preds = %25, %1
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN4base12OnceCallbackIFvPN5media10VideoFrameEEEENS_9allocatorIS7_EEE24__emplace_back_slow_pathIJS7_EEEvDpOT_(%"class.std::__1::vector.258"*, %"class.base::OnceCallback.179"* dereferenceable(8)) local_unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.258", %"class.std::__1::vector.258"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.base::OnceCallback.179"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.258"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 3
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 2305843009213693951
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.258"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #13
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.258", %"class.std::__1::vector.258"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.base::OnceCallback.179"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 3
  %20 = icmp ult i64 %19, 1152921504606846975
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 2
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 2305843009213693951
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #13
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 2305843009213693951, %14 ]
  %31 = shl i64 %30, 3
  %32 = tail call i8* @_Znwm(i64 %31) #15
  %33 = bitcast i8* %32 to %"class.base::OnceCallback.179"*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %"class.base::OnceCallback.179"* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %"class.base::OnceCallback.179", %"class.base::OnceCallback.179"* %36, i64 %9
  %38 = getelementptr inbounds %"class.base::OnceCallback.179", %"class.base::OnceCallback.179"* %36, i64 %35
  %39 = ptrtoint %"class.base::OnceCallback.179"* %38 to i64
  %40 = getelementptr inbounds %"class.base::OnceCallback.179", %"class.base::OnceCallback.179"* %1, i64 0, i32 0, i32 0, i32 0
  %41 = bitcast %"class.base::OnceCallback.179"* %1 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = bitcast %"class.base::OnceCallback.179"* %37 to i64*
  store i64 %42, i64* %43, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %40, align 8
  %44 = getelementptr inbounds %"class.base::OnceCallback.179", %"class.base::OnceCallback.179"* %37, i64 1
  %45 = ptrtoint %"class.base::OnceCallback.179"* %44 to i64
  %46 = getelementptr inbounds %"class.std::__1::vector.258", %"class.std::__1::vector.258"* %0, i64 0, i32 0, i32 0
  %47 = load %"class.base::OnceCallback.179"*, %"class.base::OnceCallback.179"** %46, align 8
  %48 = ptrtoint %"class.base::OnceCallback.179"* %47 to i64
  %49 = load %"class.base::OnceCallback.179"*, %"class.base::OnceCallback.179"** %3, align 8
  %50 = icmp eq %"class.base::OnceCallback.179"* %49, %47
  br i1 %50, label %132, label %51

51:                                               ; preds = %34
  %52 = getelementptr %"class.base::OnceCallback.179", %"class.base::OnceCallback.179"* %49, i64 -1, i32 0, i32 0, i32 0
  %53 = ptrtoint %"class.base::internal::BindStateBase"** %52 to i64
  %54 = sub i64 %53, %48
  %55 = lshr i64 %54, 3
  %56 = add nuw nsw i64 %55, 1
  %57 = and i64 %56, 7
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %71, label %59

59:                                               ; preds = %51, %59
  %60 = phi %"class.base::OnceCallback.179"* [ %63, %59 ], [ %37, %51 ]
  %61 = phi %"class.base::OnceCallback.179"* [ %64, %59 ], [ %49, %51 ]
  %62 = phi i64 [ %69, %59 ], [ %57, %51 ]
  %63 = getelementptr inbounds %"class.base::OnceCallback.179", %"class.base::OnceCallback.179"* %60, i64 -1
  %64 = getelementptr inbounds %"class.base::OnceCallback.179", %"class.base::OnceCallback.179"* %61, i64 -1
  %65 = getelementptr inbounds %"class.base::OnceCallback.179", %"class.base::OnceCallback.179"* %64, i64 0, i32 0, i32 0, i32 0
  %66 = bitcast %"class.base::OnceCallback.179"* %64 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = bitcast %"class.base::OnceCallback.179"* %63 to i64*
  store i64 %67, i64* %68, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %65, align 8
  %69 = add i64 %62, -1
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %59, !llvm.loop !72

71:                                               ; preds = %59, %51
  %72 = phi %"class.base::OnceCallback.179"* [ undef, %51 ], [ %63, %59 ]
  %73 = phi %"class.base::OnceCallback.179"* [ %37, %51 ], [ %63, %59 ]
  %74 = phi %"class.base::OnceCallback.179"* [ %49, %51 ], [ %64, %59 ]
  %75 = icmp ult i64 %54, 56
  br i1 %75, label %128, label %76

76:                                               ; preds = %71, %76
  %77 = phi %"class.base::OnceCallback.179"* [ %121, %76 ], [ %73, %71 ]
  %78 = phi %"class.base::OnceCallback.179"* [ %122, %76 ], [ %74, %71 ]
  %79 = getelementptr inbounds %"class.base::OnceCallback.179", %"class.base::OnceCallback.179"* %77, i64 -1
  %80 = getelementptr inbounds %"class.base::OnceCallback.179", %"class.base::OnceCallback.179"* %78, i64 -1
  %81 = getelementptr inbounds %"class.base::OnceCallback.179", %"class.base::OnceCallback.179"* %80, i64 0, i32 0, i32 0, i32 0
  %82 = bitcast %"class.base::OnceCallback.179"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = bitcast %"class.base::OnceCallback.179"* %79 to i64*
  store i64 %83, i64* %84, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %81, align 8
  %85 = getelementptr inbounds %"class.base::OnceCallback.179", %"class.base::OnceCallback.179"* %77, i64 -2
  %86 = getelementptr inbounds %"class.base::OnceCallback.179", %"class.base::OnceCallback.179"* %78, i64 -2
  %87 = getelementptr inbounds %"class.base::OnceCallback.179", %"class.base::OnceCallback.179"* %86, i64 0, i32 0, i32 0, i32 0
  %88 = bitcast %"class.base::OnceCallback.179"* %86 to i64*
  %89 = load i64, i64* %88, align 8
  %90 = bitcast %"class.base::OnceCallback.179"* %85 to i64*
  store i64 %89, i64* %90, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %87, align 8
  %91 = getelementptr inbounds %"class.base::OnceCallback.179", %"class.base::OnceCallback.179"* %77, i64 -3
  %92 = getelementptr inbounds %"class.base::OnceCallback.179", %"class.base::OnceCallback.179"* %78, i64 -3
  %93 = getelementptr inbounds %"class.base::OnceCallback.179", %"class.base::OnceCallback.179"* %92, i64 0, i32 0, i32 0, i32 0
  %94 = bitcast %"class.base::OnceCallback.179"* %92 to i64*
  %95 = load i64, i64* %94, align 8
  %96 = bitcast %"class.base::OnceCallback.179"* %91 to i64*
  store i64 %95, i64* %96, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %93, align 8
  %97 = getelementptr inbounds %"class.base::OnceCallback.179", %"class.base::OnceCallback.179"* %77, i64 -4
  %98 = getelementptr inbounds %"class.base::OnceCallback.179", %"class.base::OnceCallback.179"* %78, i64 -4
  %99 = getelementptr inbounds %"class.base::OnceCallback.179", %"class.base::OnceCallback.179"* %98, i64 0, i32 0, i32 0, i32 0
  %100 = bitcast %"class.base::OnceCallback.179"* %98 to i64*
  %101 = load i64, i64* %100, align 8
  %102 = bitcast %"class.base::OnceCallback.179"* %97 to i64*
  store i64 %101, i64* %102, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %99, align 8
  %103 = getelementptr inbounds %"class.base::OnceCallback.179", %"class.base::OnceCallback.179"* %77, i64 -5
  %104 = getelementptr inbounds %"class.base::OnceCallback.179", %"class.base::OnceCallback.179"* %78, i64 -5
  %105 = getelementptr inbounds %"class.base::OnceCallback.179", %"class.base::OnceCallback.179"* %104, i64 0, i32 0, i32 0, i32 0
  %106 = bitcast %"class.base::OnceCallback.179"* %104 to i64*
  %107 = load i64, i64* %106, align 8
  %108 = bitcast %"class.base::OnceCallback.179"* %103 to i64*
  store i64 %107, i64* %108, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %105, align 8
  %109 = getelementptr inbounds %"class.base::OnceCallback.179", %"class.base::OnceCallback.179"* %77, i64 -6
  %110 = getelementptr inbounds %"class.base::OnceCallback.179", %"class.base::OnceCallback.179"* %78, i64 -6
  %111 = getelementptr inbounds %"class.base::OnceCallback.179", %"class.base::OnceCallback.179"* %110, i64 0, i32 0, i32 0, i32 0
  %112 = bitcast %"class.base::OnceCallback.179"* %110 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast %"class.base::OnceCallback.179"* %109 to i64*
  store i64 %113, i64* %114, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %111, align 8
  %115 = getelementptr inbounds %"class.base::OnceCallback.179", %"class.base::OnceCallback.179"* %77, i64 -7
  %116 = getelementptr inbounds %"class.base::OnceCallback.179", %"class.base::OnceCallback.179"* %78, i64 -7
  %117 = getelementptr inbounds %"class.base::OnceCallback.179", %"class.base::OnceCallback.179"* %116, i64 0, i32 0, i32 0, i32 0
  %118 = bitcast %"class.base::OnceCallback.179"* %116 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast %"class.base::OnceCallback.179"* %115 to i64*
  store i64 %119, i64* %120, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %117, align 8
  %121 = getelementptr inbounds %"class.base::OnceCallback.179", %"class.base::OnceCallback.179"* %77, i64 -8
  %122 = getelementptr inbounds %"class.base::OnceCallback.179", %"class.base::OnceCallback.179"* %78, i64 -8
  %123 = getelementptr inbounds %"class.base::OnceCallback.179", %"class.base::OnceCallback.179"* %122, i64 0, i32 0, i32 0, i32 0
  %124 = bitcast %"class.base::OnceCallback.179"* %122 to i64*
  %125 = load i64, i64* %124, align 8
  %126 = bitcast %"class.base::OnceCallback.179"* %121 to i64*
  store i64 %125, i64* %126, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %123, align 8
  %127 = icmp eq %"class.base::OnceCallback.179"* %122, %47
  br i1 %127, label %128, label %76

128:                                              ; preds = %76, %71
  %129 = phi %"class.base::OnceCallback.179"* [ %72, %71 ], [ %121, %76 ]
  %130 = load i64, i64* %6, align 8
  %131 = load %"class.base::OnceCallback.179"*, %"class.base::OnceCallback.179"** %3, align 8
  br label %132

132:                                              ; preds = %34, %128
  %133 = phi %"class.base::OnceCallback.179"* [ %131, %128 ], [ %47, %34 ]
  %134 = phi %"class.base::OnceCallback.179"* [ %129, %128 ], [ %37, %34 ]
  %135 = phi i64 [ %130, %128 ], [ %48, %34 ]
  %136 = ptrtoint %"class.base::OnceCallback.179"* %134 to i64
  store i64 %136, i64* %6, align 8
  store i64 %45, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %137 = inttoptr i64 %135 to %"class.base::OnceCallback.179"*
  %138 = icmp eq %"class.base::OnceCallback.179"* %133, %137
  br i1 %138, label %144, label %139

139:                                              ; preds = %132, %139
  %140 = phi %"class.base::OnceCallback.179"* [ %141, %139 ], [ %133, %132 ]
  %141 = getelementptr inbounds %"class.base::OnceCallback.179", %"class.base::OnceCallback.179"* %140, i64 -1
  %142 = getelementptr inbounds %"class.base::OnceCallback.179", %"class.base::OnceCallback.179"* %141, i64 0, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %142) #14
  %143 = icmp eq %"class.base::OnceCallback.179"* %141, %137
  br i1 %143, label %144, label %139

144:                                              ; preds = %139, %132
  %145 = icmp eq i64 %135, 0
  br i1 %145, label %148, label %146

146:                                              ; preds = %144
  %147 = inttoptr i64 %135 to i8*
  tail call void @_ZdlPv(i8* %147) #15
  br label %148

148:                                              ; preds = %144, %146
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #11

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #12

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN4base8internal7InvokerINS0_9BindStateIZN3viz19VideoCaptureOverlay20MakeCombinedRendererERKNSt3__16vectorIPS4_NS5_9allocatorIS7_EEEERKN3gfx4RectEN5media16VideoPixelFormatEE3$_0JNS6_INS_12OnceCallbackIFvPNSH_10VideoFrameEEEENS8_ISO_EEEEEEESN_E7RunOnceEPNS0_13BindStateBaseESM_"(%"class.base::internal::BindStateBase"* nocapture, %"class.media::VideoFrame"*) #3 align 2 {
  %3 = alloca %"class.base::OnceCallback.179", align 8
  %4 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 1
  %5 = bitcast void ()** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds void ()*, void ()** %4, i64 1
  %8 = bitcast void ()** %7 to %"class.base::OnceCallback.179"**
  %9 = load %"class.base::OnceCallback.179"*, %"class.base::OnceCallback.179"** %8, align 8
  %10 = bitcast void ()** %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 24, i1 false) #14
  %11 = inttoptr i64 %6 to %"class.base::OnceCallback.179"*
  %12 = icmp eq %"class.base::OnceCallback.179"* %9, %11
  br i1 %12, label %28, label %13

13:                                               ; preds = %2
  %14 = bitcast %"class.base::OnceCallback.179"* %3 to i8*
  %15 = bitcast %"class.base::OnceCallback.179"* %3 to i64*
  %16 = getelementptr inbounds %"class.base::OnceCallback.179", %"class.base::OnceCallback.179"* %3, i64 0, i32 0
  br label %17

17:                                               ; preds = %17, %13
  %18 = phi %"class.base::OnceCallback.179"* [ %11, %13 ], [ %26, %17 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #14
  %19 = getelementptr inbounds %"class.base::OnceCallback.179", %"class.base::OnceCallback.179"* %18, i64 0, i32 0, i32 0, i32 0
  %20 = bitcast %"class.base::OnceCallback.179"* %18 to i64*
  %21 = load i64, i64* %20, align 8
  store i64 %21, i64* %15, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %19, align 8
  %22 = inttoptr i64 %21 to %"class.base::internal::BindStateBase"*
  %23 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %22, i64 0, i32 1
  %24 = bitcast void ()** %23 to void (%"class.base::internal::BindStateBase"*, %"class.media::VideoFrame"*)**
  %25 = load void (%"class.base::internal::BindStateBase"*, %"class.media::VideoFrame"*)*, void (%"class.base::internal::BindStateBase"*, %"class.media::VideoFrame"*)** %24, align 8
  call void %25(%"class.base::internal::BindStateBase"* %22, %"class.media::VideoFrame"* %1) #14
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %16) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #14
  %26 = getelementptr inbounds %"class.base::OnceCallback.179", %"class.base::OnceCallback.179"* %18, i64 1
  %27 = icmp eq %"class.base::OnceCallback.179"* %26, %9
  br i1 %27, label %28, label %17

28:                                               ; preds = %17, %2
  %29 = icmp eq i64 %6, 0
  br i1 %29, label %38, label %30

30:                                               ; preds = %28
  br i1 %12, label %36, label %31

31:                                               ; preds = %30, %31
  %32 = phi %"class.base::OnceCallback.179"* [ %33, %31 ], [ %9, %30 ]
  %33 = getelementptr inbounds %"class.base::OnceCallback.179", %"class.base::OnceCallback.179"* %32, i64 -1
  %34 = getelementptr inbounds %"class.base::OnceCallback.179", %"class.base::OnceCallback.179"* %33, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %34) #14
  %35 = icmp eq %"class.base::OnceCallback.179"* %33, %11
  br i1 %35, label %36, label %31

36:                                               ; preds = %31, %30
  %37 = inttoptr i64 %6 to i8*
  call void @_ZdlPv(i8* %37) #15
  br label %38

38:                                               ; preds = %28, %36
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN4base8internal9BindStateIZN3viz19VideoCaptureOverlay20MakeCombinedRendererERKNSt3__16vectorIPS3_NS4_9allocatorIS6_EEEERKN3gfx4RectEN5media16VideoPixelFormatEE3$_0JNS5_INS_12OnceCallbackIFvPNSG_10VideoFrameEEEENS7_ISN_EEEEEE7DestroyEPKNS0_13BindStateBaseE"(%"class.base::internal::BindStateBase"*) #3 align 2 {
  %2 = icmp eq %"class.base::internal::BindStateBase"* %0, null
  br i1 %2, label %26, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 1
  %5 = bitcast void ()** %4 to %"class.base::OnceCallback.179"**
  %6 = load %"class.base::OnceCallback.179"*, %"class.base::OnceCallback.179"** %5, align 8
  %7 = icmp eq %"class.base::OnceCallback.179"* %6, null
  br i1 %7, label %24, label %8

8:                                                ; preds = %3
  %9 = bitcast %"class.base::OnceCallback.179"* %6 to i8*
  %10 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 2
  %11 = bitcast void (%"class.base::internal::BindStateBase"*)** %10 to %"class.base::OnceCallback.179"**
  %12 = load %"class.base::OnceCallback.179"*, %"class.base::OnceCallback.179"** %11, align 8
  %13 = icmp eq %"class.base::OnceCallback.179"* %12, %6
  br i1 %13, label %22, label %14

14:                                               ; preds = %8, %14
  %15 = phi %"class.base::OnceCallback.179"* [ %16, %14 ], [ %12, %8 ]
  %16 = getelementptr inbounds %"class.base::OnceCallback.179", %"class.base::OnceCallback.179"* %15, i64 -1
  %17 = getelementptr inbounds %"class.base::OnceCallback.179", %"class.base::OnceCallback.179"* %16, i64 0, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %17) #14
  %18 = icmp eq %"class.base::OnceCallback.179"* %16, %6
  br i1 %18, label %19, label %14

19:                                               ; preds = %14
  %20 = bitcast void ()** %4 to i8**
  %21 = load i8*, i8** %20, align 8
  br label %22

22:                                               ; preds = %19, %8
  %23 = phi i8* [ %21, %19 ], [ %9, %8 ]
  store %"class.base::OnceCallback.179"* %6, %"class.base::OnceCallback.179"** %11, align 8
  tail call void @_ZdlPv(i8* %23) #15
  br label %24

24:                                               ; preds = %3, %22
  %25 = bitcast %"class.base::internal::BindStateBase"* %0 to i8*
  tail call void @_ZdlPv(i8* %25) #15
  br label %26

26:                                               ; preds = %24, %1
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #7

declare i32 @_ZN4base14PlatformThread9CurrentIdEv() local_unnamed_addr #4

declare i64 @_ZN4base6subtle28TimeTicksNowIgnoringOverrideEv() local_unnamed_addr #4

declare i64 @_ZN20trace_event_internal37AddTraceEventWithThreadIdAndTimestampEcPKhPKcS3_yyiRKN4base9TimeTicksEPNS4_11trace_event14TraceArgumentsEj(i8 signext, i8*, i8*, i8*, i64, i64, i32, %"class.base::TimeTicks"* dereferenceable(8), %"class.base::trace_event::TraceArguments"*, i32) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN9protozero21ScatteredStreamWriterD1Ev(%"class.protozero::ScatteredStreamWriter"*) unnamed_addr #6

; Function Attrs: nounwind
declare void @_ZN9protozero19ScatteredHeapBufferD1Ev(%"class.protozero::ScatteredHeapBuffer"*) unnamed_addr #6

; Function Attrs: nounwind
declare void @_ZN9protozero12MessageArenaD1Ev(%"class.protozero::MessageArena"*) unnamed_addr #6

; Function Attrs: nounwind readnone speculatable
declare <4 x float> @llvm.fma.v4f32(<4 x float>, <4 x float>, <4 x float>) #9

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { cold noreturn nounwind }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone speculatable }
attributes #10 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { noreturn nounwind }
attributes #14 = { nounwind }
attributes #15 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3, !5}
!3 = distinct !{!3, !4, !"_ZN4base8internal8BindImplINS_12OnceCallbackEMN3viz19VideoCaptureOverlay11FrameSourceEFvPS4_EJNS0_17UnretainedWrapperIS5_EES6_EEEDcOT0_DpOT1_: argument 0"}
!4 = distinct !{!4, !"_ZN4base8internal8BindImplINS_12OnceCallbackEMN3viz19VideoCaptureOverlay11FrameSourceEFvPS4_EJNS0_17UnretainedWrapperIS5_EES6_EEEDcOT0_DpOT1_"}
!5 = distinct !{!5, !6, !"_ZN4base8BindOnceIMN3viz19VideoCaptureOverlay11FrameSourceEFvPS2_EJNS_8internal17UnretainedWrapperIS3_EES4_EEENS_12OnceCallbackINS7_14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSC_DpOSD_: argument 0"}
!6 = distinct !{!6, !"_ZN4base8BindOnceIMN3viz19VideoCaptureOverlay11FrameSourceEFvPS2_EJNS_8internal17UnretainedWrapperIS3_EES4_EEENS_12OnceCallbackINS7_14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSC_DpOSD_"}
!7 = !{!8, !10}
!8 = distinct !{!8, !9, !"_ZN4base8internal8BindImplINS_12OnceCallbackEMN3viz19VideoCaptureOverlay6SpriteEFvRKN3gfx5PointERKNS6_4RectEPN5media10VideoFrameEEJR13scoped_refptrIS5_ES9_RSA_EEEDcOT0_DpOT1_: argument 0"}
!9 = distinct !{!9, !"_ZN4base8internal8BindImplINS_12OnceCallbackEMN3viz19VideoCaptureOverlay6SpriteEFvRKN3gfx5PointERKNS6_4RectEPN5media10VideoFrameEEJR13scoped_refptrIS5_ES9_RSA_EEEDcOT0_DpOT1_"}
!10 = distinct !{!10, !11, !"_ZN4base8BindOnceIMN3viz19VideoCaptureOverlay6SpriteEFvRKN3gfx5PointERKNS4_4RectEPN5media10VideoFrameEEJR13scoped_refptrIS3_ES7_RS8_EEENS_12OnceCallbackINS_8internal14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSN_DpOSO_: argument 0"}
!11 = distinct !{!11, !"_ZN4base8BindOnceIMN3viz19VideoCaptureOverlay6SpriteEFvRKN3gfx5PointERKNS4_4RectEPN5media10VideoFrameEEJR13scoped_refptrIS3_ES7_RS8_EEENS_12OnceCallbackINS_8internal14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSN_DpOSO_"}
!12 = !{!"branch_weights", i32 2000, i32 1}
!13 = !{!"branch_weights", i32 1, i32 2000}
!14 = !{!15}
!15 = distinct !{!15, !16}
!16 = distinct !{!16, !"LVerDomain"}
!17 = !{!18, !19}
!18 = distinct !{!18, !16}
!19 = distinct !{!19, !16}
!20 = !{!19}
!21 = !{!18}
!22 = distinct !{!22, !23}
!23 = !{!"llvm.loop.isvectorized", i32 1}
!24 = distinct !{!24, !23}
!25 = !{!26}
!26 = distinct !{!26, !27}
!27 = distinct !{!27, !"LVerDomain"}
!28 = !{!29, !30}
!29 = distinct !{!29, !27}
!30 = distinct !{!30, !27}
!31 = !{!30}
!32 = !{!29}
!33 = distinct !{!33, !23}
!34 = distinct !{!34, !23}
!35 = !{!36, !38}
!36 = distinct !{!36, !37, !"_ZN4base8internal8BindImplINS_12OnceCallbackEZN3viz19VideoCaptureOverlay20MakeCombinedRendererERKNSt3__16vectorIPS4_NS5_9allocatorIS7_EEEERKN3gfx4RectEN5media16VideoPixelFormatEE3$_0JNS6_INS2_IFvPNSH_10VideoFrameEEEENS8_ISN_EEEEEEEDcOT0_DpOT1_: argument 0"}
!37 = distinct !{!37, !"_ZN4base8internal8BindImplINS_12OnceCallbackEZN3viz19VideoCaptureOverlay20MakeCombinedRendererERKNSt3__16vectorIPS4_NS5_9allocatorIS7_EEEERKN3gfx4RectEN5media16VideoPixelFormatEE3$_0JNS6_INS2_IFvPNSH_10VideoFrameEEEENS8_ISN_EEEEEEEDcOT0_DpOT1_"}
!38 = distinct !{!38, !39, !"_ZN4base8BindOnceIZN3viz19VideoCaptureOverlay20MakeCombinedRendererERKNSt3__16vectorIPS2_NS3_9allocatorIS5_EEEERKN3gfx4RectEN5media16VideoPixelFormatEE3$_0JNS4_INS_12OnceCallbackIFvPNSF_10VideoFrameEEEENS6_ISM_EEEEEEENSI_INS_8internal14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSR_DpOSS_: argument 0"}
!39 = distinct !{!39, !"_ZN4base8BindOnceIZN3viz19VideoCaptureOverlay20MakeCombinedRendererERKNSt3__16vectorIPS2_NS3_9allocatorIS5_EEEERKN3gfx4RectEN5media16VideoPixelFormatEE3$_0JNS4_INS_12OnceCallbackIFvPNSF_10VideoFrameEEEENS6_ISM_EEEEEEENSI_INS_8internal14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSR_DpOSS_"}
!40 = !{!41, !43, !45}
!41 = distinct !{!41, !42, !"_ZNK11SkColorInfo13refColorSpaceEv: argument 0"}
!42 = distinct !{!42, !"_ZNK11SkColorInfo13refColorSpaceEv"}
!43 = distinct !{!43, !44, !"_ZNK11SkImageInfo13refColorSpaceEv: argument 0"}
!44 = distinct !{!44, !"_ZNK11SkImageInfo13refColorSpaceEv"}
!45 = distinct !{!45, !46, !"_ZNK8SkBitmap13refColorSpaceEv: argument 0"}
!46 = distinct !{!46, !"_ZNK8SkBitmap13refColorSpaceEv"}
!47 = !{!48}
!48 = distinct !{!48, !49, !"_ZN11SkImageInfo4MakeEii11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE: argument 0"}
!49 = distinct !{!49, !"_ZN11SkImageInfo4MakeEii11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE"}
!50 = !{!51}
!51 = distinct !{!51, !52}
!52 = distinct !{!52, !"LVerDomain"}
!53 = !{!54}
!54 = distinct !{!54, !52}
!55 = !{!56, !51}
!56 = distinct !{!56, !52}
!57 = distinct !{!57, !23}
!58 = distinct !{!58, !23}
!59 = !{!60}
!60 = distinct !{!60, !61}
!61 = distinct !{!61, !"LVerDomain"}
!62 = !{!63}
!63 = distinct !{!63, !61}
!64 = !{!65, !60, !66}
!65 = distinct !{!65, !61}
!66 = distinct !{!66, !61}
!67 = !{!66}
!68 = !{!65}
!69 = !{!60, !66}
!70 = distinct !{!70, !23}
!71 = distinct !{!71, !23}
!72 = distinct !{!72, !73}
!73 = !{!"llvm.loop.unroll.disable"}
