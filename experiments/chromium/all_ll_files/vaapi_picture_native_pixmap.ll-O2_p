; ModuleID = '../../media/gpu/vaapi/vaapi_picture_native_pixmap.cc'
source_filename = "../../media/gpu/vaapi/vaapi_picture_native_pixmap.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.media::VaapiPictureNativePixmap" = type { %"class.media::VaapiPicture", %class.scoped_refptr.9, %class.scoped_refptr.10 }
%"class.media::VaapiPicture" = type { i32 (...)**, %class.scoped_refptr, %"class.base::RepeatingCallback.7", %"class.base::RepeatingCallback.8", %"class.gfx::Size", %"class.gfx::Size", i32, i32, i32, i32 }
%class.scoped_refptr = type { %"class.media::VaapiWrapper"* }
%"class.media::VaapiWrapper" = type { i32 (...)**, %"class.base::RefCountedThreadSafe", i32, %"class.base::Lock"*, i8*, i32, i32, i32, i32, %"class.std::__1::vector", %"class.std::__1::unique_ptr", %"class.base::RepeatingCallback" }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i32* }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.media::ScopedVABuffer"* }
%"class.media::ScopedVABuffer" = type { %"class.base::Lock"*, i8*, i32, i32, i64 }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.5 }
%class.scoped_refptr.5 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.6", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.6" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::RepeatingCallback.7" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::RepeatingCallback.8" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.gfx::Size" = type { i32, i32 }
%class.scoped_refptr.9 = type { %"class.gl::GLImage"* }
%"class.gl::GLImage" = type { i32 (...)**, %"class.base::RefCounted", %"class.gfx::ColorSpace" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.gfx::ColorSpace" = type { i8, i8, i8, i8, [9 x float], [7 x float] }
%class.scoped_refptr.10 = type { %"class.media::VASurface"* }
%"class.media::VASurface" = type { %"class.base::RefCountedThreadSafe.11", i32, %"class.gfx::Size", i32, %"class.base::OnceCallback" }
%"class.base::RefCountedThreadSafe.11" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.gfx::Rect" }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }

@_ZTVN5media24VaapiPictureNativePixmapE = hidden unnamed_addr constant { [9 x i8*] } { [9 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.media::VaapiPictureNativePixmap"*)* @_ZN5media24VaapiPictureNativePixmapD2Ev to i8*), i8* bitcast (void (%"class.media::VaapiPictureNativePixmap"*)* @_ZN5media24VaapiPictureNativePixmapD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (i1 (%"class.media::VaapiPictureNativePixmap"*)* @_ZNK5media24VaapiPictureNativePixmap12AllowOverlayEv to i8*), i8* bitcast (i1 (%"class.media::VaapiPictureNativePixmap"*, %"class.media::VASurface"*)* @_ZN5media24VaapiPictureNativePixmap19DownloadFromSurfaceE13scoped_refptrINS_9VASurfaceEE to i8*), i8* bitcast (i32 (%"class.media::VaapiPictureNativePixmap"*)* @_ZNK5media24VaapiPictureNativePixmap13va_surface_idEv to i8*)] }, align 8

@_ZN5media24VaapiPictureNativePixmapD1Ev = hidden unnamed_addr alias void (%"class.media::VaapiPictureNativePixmap"*), void (%"class.media::VaapiPictureNativePixmap"*)* @_ZN5media24VaapiPictureNativePixmapD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media24VaapiPictureNativePixmapC2E13scoped_refptrINS_12VaapiWrapperEERKN4base17RepeatingCallbackIFbvEEERKNS5_IFbjjRKS1_IN2gl7GLImageEEbEEEiRKN3gfx4SizeESM_jjj(%"class.media::VaapiPictureNativePixmap"*, %"class.media::VaapiWrapper"*, %"class.base::RepeatingCallback.7"* dereferenceable(8), %"class.base::RepeatingCallback.8"* dereferenceable(8), i32, %"class.gfx::Size"* dereferenceable(8), %"class.gfx::Size"* dereferenceable(8), i32, i32, i32) unnamed_addr #0 align 2 {
  %11 = getelementptr inbounds %"class.media::VaapiPictureNativePixmap", %"class.media::VaapiPictureNativePixmap"* %0, i64 0, i32 0
  tail call void @_ZN5media12VaapiPictureC2E13scoped_refptrINS_12VaapiWrapperEERKN4base17RepeatingCallbackIFbvEEERKNS5_IFbjjRKS1_IN2gl7GLImageEEbEEEiRKN3gfx4SizeESM_jjj(%"class.media::VaapiPicture"* %11, %"class.media::VaapiWrapper"* %1, %"class.base::RepeatingCallback.7"* dereferenceable(8) %2, %"class.base::RepeatingCallback.8"* dereferenceable(8) %3, i32 %4, %"class.gfx::Size"* dereferenceable(8) %5, %"class.gfx::Size"* dereferenceable(8) %6, i32 %7, i32 %8, i32 %9) #9
  %12 = getelementptr inbounds %"class.media::VaapiPictureNativePixmap", %"class.media::VaapiPictureNativePixmap"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN5media24VaapiPictureNativePixmapE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %12, align 8
  %13 = getelementptr inbounds %"class.media::VaapiPictureNativePixmap", %"class.media::VaapiPictureNativePixmap"* %0, i64 0, i32 1, i32 0
  %14 = bitcast %"class.gl::GLImage"** %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 16, i1 false)
  ret void
}

declare void @_ZN5media12VaapiPictureC2E13scoped_refptrINS_12VaapiWrapperEERKN4base17RepeatingCallbackIFbvEEERKNS5_IFbjjRKS1_IN2gl7GLImageEEbEEEiRKN3gfx4SizeESM_jjj(%"class.media::VaapiPicture"*, %"class.media::VaapiWrapper"*, %"class.base::RepeatingCallback.7"* dereferenceable(8), %"class.base::RepeatingCallback.8"* dereferenceable(8), i32, %"class.gfx::Size"* dereferenceable(8), %"class.gfx::Size"* dereferenceable(8), i32, i32, i32) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media24VaapiPictureNativePixmapD2Ev(%"class.media::VaapiPictureNativePixmap"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.media::VaapiPictureNativePixmap", %"class.media::VaapiPictureNativePixmap"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN5media24VaapiPictureNativePixmapE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.media::VaapiPictureNativePixmap", %"class.media::VaapiPictureNativePixmap"* %0, i64 0, i32 2, i32 0
  %4 = load %"class.media::VASurface"*, %"class.media::VASurface"** %3, align 8
  %5 = icmp eq %"class.media::VASurface"* %4, null
  br i1 %5, label %12, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.media::VASurface", %"class.media::VASurface"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw sub i32* %7, i32 1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %12

10:                                               ; preds = %6
  tail call void @_ZN5media9VASurfaceD1Ev(%"class.media::VASurface"* nonnull %4) #9
  %11 = bitcast %"class.media::VASurface"* %4 to i8*
  tail call void @_ZdlPv(i8* %11) #10
  br label %12

12:                                               ; preds = %1, %6, %10
  %13 = getelementptr inbounds %"class.media::VaapiPictureNativePixmap", %"class.media::VaapiPictureNativePixmap"* %0, i64 0, i32 1, i32 0
  %14 = load %"class.gl::GLImage"*, %"class.gl::GLImage"** %13, align 8
  %15 = icmp eq %"class.gl::GLImage"* %14, null
  br i1 %15, label %29, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %"class.gl::GLImage", %"class.gl::GLImage"* %14, i64 0, i32 1
  %18 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %17, i64 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %18) #9
  %19 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %17, i64 0, i32 0, i32 0
  %20 = load i32, i32* %19, align 4
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %29

22:                                               ; preds = %16
  %23 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %17, i64 -2
  %24 = bitcast %"class.base::RefCounted"* %23 to %"class.gl::GLImage"*
  %25 = bitcast %"class.base::RefCounted"* %23 to void (%"class.gl::GLImage"*)***
  %26 = load void (%"class.gl::GLImage"*)**, void (%"class.gl::GLImage"*)*** %25, align 8
  %27 = getelementptr inbounds void (%"class.gl::GLImage"*)*, void (%"class.gl::GLImage"*)** %26, i64 21
  %28 = load void (%"class.gl::GLImage"*)*, void (%"class.gl::GLImage"*)** %27, align 8
  tail call void %28(%"class.gl::GLImage"* nonnull %24) #9
  br label %29

29:                                               ; preds = %12, %16, %22
  %30 = getelementptr inbounds %"class.media::VaapiPictureNativePixmap", %"class.media::VaapiPictureNativePixmap"* %0, i64 0, i32 0
  tail call void @_ZN5media12VaapiPictureD2Ev(%"class.media::VaapiPicture"* %30) #9
  ret void
}

; Function Attrs: nounwind
declare void @_ZN5media12VaapiPictureD2Ev(%"class.media::VaapiPicture"*) unnamed_addr #2

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN5media24VaapiPictureNativePixmapD0Ev(%"class.media::VaapiPictureNativePixmap"* nocapture readnone) unnamed_addr #3 align 2 {
  tail call void @llvm.trap() #11
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #4

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5media24VaapiPictureNativePixmap19DownloadFromSurfaceE13scoped_refptrINS_9VASurfaceEE(%"class.media::VaapiPictureNativePixmap"* nocapture readonly, %"class.media::VASurface"*) unnamed_addr #0 align 2 {
  %3 = alloca %"class.absl::optional", align 8
  %4 = alloca %"class.absl::optional", align 8
  %5 = getelementptr inbounds %"class.media::VaapiPictureNativePixmap", %"class.media::VaapiPictureNativePixmap"* %0, i64 0, i32 0, i32 1, i32 0
  %6 = load %"class.media::VaapiWrapper"*, %"class.media::VaapiWrapper"** %5, align 8
  %7 = getelementptr inbounds %"class.media::VaapiPictureNativePixmap", %"class.media::VaapiPictureNativePixmap"* %0, i64 0, i32 2, i32 0
  %8 = load %"class.media::VASurface"*, %"class.media::VASurface"** %7, align 8
  %9 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %9, align 8
  %10 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %10, align 8
  %11 = tail call zeroext i1 @_ZN5media12VaapiWrapper11BlitSurfaceERKNS_9VASurfaceES3_N4absl8optionalIN3gfx4RectEEES8_NS_13VideoRotationE(%"class.media::VaapiWrapper"* %6, %"class.media::VASurface"* dereferenceable(32) %1, %"class.media::VASurface"* dereferenceable(32) %8, %"class.absl::optional"* nonnull byval(%"class.absl::optional") align 8 %3, %"class.absl::optional"* nonnull byval(%"class.absl::optional") align 8 %4, i32 0) #9
  %12 = icmp eq %"class.media::VASurface"* %1, null
  br i1 %12, label %19, label %13

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"class.media::VASurface", %"class.media::VASurface"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = atomicrmw sub i32* %14, i32 1 acq_rel
  %16 = icmp eq i32 %15, 1
  br i1 %16, label %17, label %19

17:                                               ; preds = %13
  tail call void @_ZN5media9VASurfaceD1Ev(%"class.media::VASurface"* nonnull %1) #9
  %18 = bitcast %"class.media::VASurface"* %1 to i8*
  tail call void @_ZdlPv(i8* %18) #10
  br label %19

19:                                               ; preds = %2, %13, %17
  ret i1 %11
}

declare zeroext i1 @_ZN5media12VaapiWrapper11BlitSurfaceERKNS_9VASurfaceES3_N4absl8optionalIN3gfx4RectEEES8_NS_13VideoRotationE(%"class.media::VaapiWrapper"*, %"class.media::VASurface"* dereferenceable(32), %"class.media::VASurface"* dereferenceable(32), %"class.absl::optional"* byval(%"class.absl::optional") align 8, %"class.absl::optional"* byval(%"class.absl::optional") align 8, i32) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZNK5media24VaapiPictureNativePixmap12AllowOverlayEv(%"class.media::VaapiPictureNativePixmap"* nocapture readnone) unnamed_addr #5 align 2 {
  ret i1 true
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK5media24VaapiPictureNativePixmap13va_surface_idEv(%"class.media::VaapiPictureNativePixmap"* nocapture readonly) unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.media::VaapiPictureNativePixmap", %"class.media::VaapiPictureNativePixmap"* %0, i64 0, i32 2, i32 0
  %3 = load %"class.media::VASurface"*, %"class.media::VASurface"** %2, align 8
  %4 = getelementptr inbounds %"class.media::VASurface", %"class.media::VASurface"* %3, i64 0, i32 1
  %5 = load i32, i32* %4, align 4
  ret i32 %5
}

declare void @__cxa_pure_virtual() unnamed_addr

declare void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN5media9VASurfaceD1Ev(%"class.media::VASurface"*) unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { cold noreturn nounwind }
attributes #5 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { argmemonly nounwind }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
