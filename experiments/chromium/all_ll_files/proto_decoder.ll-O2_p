; ModuleID = '../../third_party/perfetto/src/protozero/proto_decoder.cc'
source_filename = "../../third_party/perfetto/src/protozero/proto_decoder.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.protozero::ProtoDecoder" = type { i8*, i8*, i8* }
%"class.protozero::TypedProtoDecoderBase" = type <{ %"class.protozero::ProtoDecoder", %"class.std::__1::unique_ptr", %"class.protozero::Field"*, i32, i32, i32, [4 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.protozero::Field"* }
%"class.protozero::Field" = type <{ i64, i32, i16, i8, i8 }>

$_ZN8perfetto4base8BasenameEPKc = comdat any

@.str = private unnamed_addr constant [58 x i8] c"../../third_party/perfetto/src/protozero/proto_decoder.cc\00", align 1
@.str.1 = private unnamed_addr constant [19 x i8] c"%s (errno: %d, %s)\00", align 1
@.str.2 = private unnamed_addr constant [37 x i8] c"PERFETTO_CHECK(new_capacity > size_)\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_ZN9protozero12ProtoDecoder9FindFieldEj(%"class.protozero::ProtoDecoder"* nocapture, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.protozero::ProtoDecoder", %"class.protozero::ProtoDecoder"* %0, i64 0, i32 2
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.protozero::ProtoDecoder"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  store i64 %7, i64* %4, align 8
  %8 = inttoptr i64 %7 to i8*
  %9 = getelementptr inbounds %"class.protozero::ProtoDecoder", %"class.protozero::ProtoDecoder"* %0, i64 0, i32 1
  %10 = load i8*, i8** %9, align 8
  %11 = icmp ugt i8* %10, %8
  br i1 %11, label %12, label %139, !prof !2

12:                                               ; preds = %2
  %13 = ptrtoint i8* %10 to i64
  br label %14

14:                                               ; preds = %135, %12
  %15 = phi i64 [ %7, %12 ], [ %123, %135 ]
  %16 = phi i8* [ %8, %12 ], [ %118, %135 ]
  %17 = load i8, i8* %16, align 1, !noalias !3
  %18 = icmp sgt i8 %17, -1
  %19 = getelementptr inbounds i8, i8* %16, i64 1
  br i1 %18, label %23, label %20, !prof !2

20:                                               ; preds = %14
  %21 = and i8 %17, 127
  %22 = zext i8 %21 to i64
  br label %25

23:                                               ; preds = %14
  %24 = zext i8 %17 to i64
  br label %43

25:                                               ; preds = %32, %20
  %26 = phi i64 [ 7, %20 ], [ %40, %32 ]
  %27 = phi i64 [ %22, %20 ], [ %38, %32 ]
  %28 = phi i8* [ %19, %20 ], [ %34, %32 ]
  %29 = icmp ult i8* %28, %10
  %30 = icmp ult i64 %26, 64
  %31 = and i1 %30, %29
  br i1 %31, label %32, label %139

32:                                               ; preds = %25
  %33 = load i8, i8* %28, align 1, !noalias !3
  %34 = getelementptr inbounds i8, i8* %28, i64 1
  %35 = and i8 %33, 127
  %36 = zext i8 %35 to i64
  %37 = shl i64 %36, %26
  %38 = or i64 %37, %27
  %39 = icmp sgt i8 %33, -1
  %40 = add nuw nsw i64 %26, 7
  br i1 %39, label %41, label %25

41:                                               ; preds = %32
  %42 = icmp eq i8* %34, %16
  br i1 %42, label %139, label %43

43:                                               ; preds = %41, %23
  %44 = phi i64 [ %24, %23 ], [ %38, %41 ]
  %45 = phi i8* [ %19, %23 ], [ %34, %41 ]
  %46 = lshr i64 %44, 3
  %47 = trunc i64 %46 to i32
  %48 = icmp ne i32 %47, 0
  %49 = icmp ult i8* %45, %10
  %50 = and i1 %49, %48
  br i1 %50, label %51, label %139

51:                                               ; preds = %43
  %52 = trunc i64 %44 to i8
  %53 = and i8 %52, 7
  %54 = zext i8 %53 to i32
  switch i32 %54, label %139 [
    i32 0, label %59
    i32 2, label %79
    i32 1, label %101
    i32 5, label %109
  ]

55:                                               ; preds = %59
  %56 = icmp ult i8* %63, %10
  %57 = icmp ult i64 %70, 64
  %58 = and i1 %57, %56
  br i1 %58, label %59, label %139

59:                                               ; preds = %51, %55
  %60 = phi i64 [ %70, %55 ], [ 0, %51 ]
  %61 = phi i64 [ %68, %55 ], [ 0, %51 ]
  %62 = phi i8* [ %63, %55 ], [ %45, %51 ]
  %63 = getelementptr inbounds i8, i8* %62, i64 1
  %64 = load i8, i8* %62, align 1, !noalias !3
  %65 = and i8 %64, 127
  %66 = zext i8 %65 to i64
  %67 = shl i64 %66, %60
  %68 = or i64 %67, %61
  %69 = icmp sgt i8 %64, -1
  %70 = add nuw nsw i64 %60, 7
  br i1 %69, label %71, label %55

71:                                               ; preds = %59
  %72 = trunc i64 %68 to i32
  %73 = and i64 %68, -4294967296
  %74 = icmp eq i8* %63, %45
  br i1 %74, label %139, label %115, !prof !6

75:                                               ; preds = %79
  %76 = icmp ult i8* %83, %10
  %77 = icmp ult i64 %90, 64
  %78 = and i1 %77, %76
  br i1 %78, label %79, label %139

79:                                               ; preds = %51, %75
  %80 = phi i64 [ %90, %75 ], [ 0, %51 ]
  %81 = phi i64 [ %88, %75 ], [ 0, %51 ]
  %82 = phi i8* [ %83, %75 ], [ %45, %51 ]
  %83 = getelementptr inbounds i8, i8* %82, i64 1
  %84 = load i8, i8* %82, align 1, !noalias !3
  %85 = and i8 %84, 127
  %86 = zext i8 %85 to i64
  %87 = shl i64 %86, %80
  %88 = or i64 %87, %81
  %89 = icmp sgt i8 %84, -1
  %90 = add nuw nsw i64 %80, 7
  br i1 %89, label %91, label %75

91:                                               ; preds = %79
  %92 = icmp eq i8* %83, %45
  br i1 %92, label %139, label %93, !prof !6

93:                                               ; preds = %91
  %94 = ptrtoint i8* %83 to i64
  %95 = sub i64 %13, %94
  %96 = icmp ugt i64 %88, %95
  br i1 %96, label %139, label %97

97:                                               ; preds = %93
  %98 = trunc i64 %94 to i32
  %99 = and i64 %94, -4294967296
  %100 = getelementptr inbounds i8, i8* %83, i64 %88
  br label %115

101:                                              ; preds = %51
  %102 = getelementptr inbounds i8, i8* %45, i64 8
  %103 = icmp ugt i8* %102, %10
  br i1 %103, label %139, label %104, !prof !6

104:                                              ; preds = %101
  %105 = bitcast i8* %45 to i64*
  %106 = load i64, i64* %105, align 1, !noalias !3
  %107 = trunc i64 %106 to i32
  %108 = and i64 %106, -4294967296
  br label %115

109:                                              ; preds = %51
  %110 = getelementptr inbounds i8, i8* %45, i64 4
  %111 = icmp ugt i8* %110, %10
  br i1 %111, label %139, label %112, !prof !6

112:                                              ; preds = %109
  %113 = bitcast i8* %45 to i32*
  %114 = load i32, i32* %113, align 1, !noalias !3
  br label %115

115:                                              ; preds = %112, %104, %97, %71
  %116 = phi i64 [ 0, %112 ], [ %108, %104 ], [ %99, %97 ], [ %73, %71 ]
  %117 = phi i32 [ %114, %112 ], [ %107, %104 ], [ %98, %97 ], [ %72, %71 ]
  %118 = phi i8* [ %110, %112 ], [ %102, %104 ], [ %100, %97 ], [ %63, %71 ]
  %119 = phi i64 [ 0, %112 ], [ 0, %104 ], [ %88, %97 ], [ 0, %71 ]
  %120 = icmp ugt i32 %47, 65535
  %121 = icmp ugt i64 %119, 268435455
  %122 = or i1 %120, %121
  %123 = ptrtoint i8* %118 to i64
  br i1 %122, label %135, label %124, !prof !7

124:                                              ; preds = %115
  %125 = ptrtoint i8* %118 to i64
  %126 = zext i32 %117 to i64
  %127 = or i64 %116, %126
  %128 = shl i64 %46, 32
  %129 = and i64 %128, 281470681743360
  %130 = zext i8 %53 to i64
  %131 = shl nuw nsw i64 %130, 48
  %132 = or i64 %131, %129
  %133 = and i64 %119, 4294967295
  %134 = or i64 %132, %133
  br label %139

135:                                              ; preds = %115
  store i64 %123, i64* %4, align 8
  %136 = icmp ult i8* %118, %10
  br i1 %136, label %14, label %137, !prof !2

137:                                              ; preds = %135
  %138 = ptrtoint i8* %118 to i64
  br label %139

139:                                              ; preds = %41, %43, %51, %71, %91, %93, %101, %109, %25, %75, %55, %137, %2, %124
  %140 = phi i64 [ %127, %124 ], [ 0, %2 ], [ 0, %137 ], [ 0, %55 ], [ 0, %75 ], [ 0, %25 ], [ 0, %109 ], [ 0, %101 ], [ 0, %93 ], [ 0, %91 ], [ 0, %71 ], [ 0, %51 ], [ 0, %43 ], [ 0, %41 ]
  %141 = phi i64 [ %134, %124 ], [ 0, %2 ], [ 0, %137 ], [ 0, %55 ], [ 0, %75 ], [ 0, %25 ], [ 0, %109 ], [ 0, %101 ], [ 0, %93 ], [ 0, %91 ], [ 0, %71 ], [ 0, %51 ], [ 0, %43 ], [ 0, %41 ]
  %142 = phi i64 [ %125, %124 ], [ %7, %2 ], [ %138, %137 ], [ %15, %55 ], [ %15, %75 ], [ %15, %25 ], [ %15, %109 ], [ %15, %101 ], [ %15, %93 ], [ %15, %91 ], [ %15, %71 ], [ %15, %51 ], [ %15, %43 ], [ %15, %41 ]
  store i64 %142, i64* %4, align 8
  %143 = lshr i64 %141, 32
  %144 = trunc i64 %143 to i16
  %145 = icmp eq i16 %144, 0
  br i1 %145, label %296, label %146

146:                                              ; preds = %139
  %147 = ptrtoint i8* %10 to i64
  %148 = trunc i64 %143 to i32
  %149 = and i32 %148, 65535
  %150 = icmp eq i32 %149, %1
  br i1 %150, label %155, label %159

151:                                              ; preds = %288
  %152 = trunc i64 %293 to i32
  %153 = and i32 %152, 65535
  %154 = icmp eq i32 %153, %1
  br i1 %154, label %155, label %159

155:                                              ; preds = %151, %146
  %156 = phi i64 [ %140, %146 ], [ %289, %151 ]
  %157 = phi i64 [ %141, %146 ], [ %292, %151 ]
  %158 = and i64 %157, 72057594037927935
  br label %296

159:                                              ; preds = %146, %151
  %160 = phi i64 [ %291, %151 ], [ %142, %146 ]
  %161 = inttoptr i64 %160 to i8*
  %162 = icmp ugt i8* %10, %161
  br i1 %162, label %163, label %288, !prof !2

163:                                              ; preds = %159, %284
  %164 = phi i64 [ %272, %284 ], [ %160, %159 ]
  %165 = phi i8* [ %267, %284 ], [ %161, %159 ]
  %166 = load i8, i8* %165, align 1, !noalias !8
  %167 = icmp sgt i8 %166, -1
  %168 = getelementptr inbounds i8, i8* %165, i64 1
  br i1 %167, label %172, label %169, !prof !2

169:                                              ; preds = %163
  %170 = and i8 %166, 127
  %171 = zext i8 %170 to i64
  br label %174

172:                                              ; preds = %163
  %173 = zext i8 %166 to i64
  br label %192

174:                                              ; preds = %181, %169
  %175 = phi i64 [ 7, %169 ], [ %189, %181 ]
  %176 = phi i64 [ %171, %169 ], [ %187, %181 ]
  %177 = phi i8* [ %168, %169 ], [ %183, %181 ]
  %178 = icmp ult i8* %177, %10
  %179 = icmp ult i64 %175, 64
  %180 = and i1 %179, %178
  br i1 %180, label %181, label %288

181:                                              ; preds = %174
  %182 = load i8, i8* %177, align 1, !noalias !8
  %183 = getelementptr inbounds i8, i8* %177, i64 1
  %184 = and i8 %182, 127
  %185 = zext i8 %184 to i64
  %186 = shl i64 %185, %175
  %187 = or i64 %186, %176
  %188 = icmp sgt i8 %182, -1
  %189 = add nuw nsw i64 %175, 7
  br i1 %188, label %190, label %174

190:                                              ; preds = %181
  %191 = icmp eq i8* %183, %165
  br i1 %191, label %288, label %192

192:                                              ; preds = %190, %172
  %193 = phi i64 [ %173, %172 ], [ %187, %190 ]
  %194 = phi i8* [ %168, %172 ], [ %183, %190 ]
  %195 = lshr i64 %193, 3
  %196 = trunc i64 %195 to i32
  %197 = icmp ne i32 %196, 0
  %198 = icmp ult i8* %194, %10
  %199 = and i1 %198, %197
  br i1 %199, label %200, label %288

200:                                              ; preds = %192
  %201 = trunc i64 %193 to i8
  %202 = and i8 %201, 7
  %203 = zext i8 %202 to i32
  switch i32 %203, label %288 [
    i32 0, label %208
    i32 2, label %228
    i32 1, label %250
    i32 5, label %258
  ]

204:                                              ; preds = %208
  %205 = icmp ult i8* %212, %10
  %206 = icmp ult i64 %219, 64
  %207 = and i1 %206, %205
  br i1 %207, label %208, label %288

208:                                              ; preds = %200, %204
  %209 = phi i64 [ %219, %204 ], [ 0, %200 ]
  %210 = phi i64 [ %217, %204 ], [ 0, %200 ]
  %211 = phi i8* [ %212, %204 ], [ %194, %200 ]
  %212 = getelementptr inbounds i8, i8* %211, i64 1
  %213 = load i8, i8* %211, align 1, !noalias !8
  %214 = and i8 %213, 127
  %215 = zext i8 %214 to i64
  %216 = shl i64 %215, %209
  %217 = or i64 %216, %210
  %218 = icmp sgt i8 %213, -1
  %219 = add nuw nsw i64 %209, 7
  br i1 %218, label %220, label %204

220:                                              ; preds = %208
  %221 = trunc i64 %217 to i32
  %222 = and i64 %217, -4294967296
  %223 = icmp eq i8* %212, %194
  br i1 %223, label %288, label %264, !prof !6

224:                                              ; preds = %228
  %225 = icmp ult i8* %232, %10
  %226 = icmp ult i64 %239, 64
  %227 = and i1 %226, %225
  br i1 %227, label %228, label %288

228:                                              ; preds = %200, %224
  %229 = phi i64 [ %239, %224 ], [ 0, %200 ]
  %230 = phi i64 [ %237, %224 ], [ 0, %200 ]
  %231 = phi i8* [ %232, %224 ], [ %194, %200 ]
  %232 = getelementptr inbounds i8, i8* %231, i64 1
  %233 = load i8, i8* %231, align 1, !noalias !8
  %234 = and i8 %233, 127
  %235 = zext i8 %234 to i64
  %236 = shl i64 %235, %229
  %237 = or i64 %236, %230
  %238 = icmp sgt i8 %233, -1
  %239 = add nuw nsw i64 %229, 7
  br i1 %238, label %240, label %224

240:                                              ; preds = %228
  %241 = icmp eq i8* %232, %194
  br i1 %241, label %288, label %242, !prof !6

242:                                              ; preds = %240
  %243 = ptrtoint i8* %232 to i64
  %244 = sub i64 %147, %243
  %245 = icmp ugt i64 %237, %244
  br i1 %245, label %288, label %246

246:                                              ; preds = %242
  %247 = trunc i64 %243 to i32
  %248 = and i64 %243, -4294967296
  %249 = getelementptr inbounds i8, i8* %232, i64 %237
  br label %264

250:                                              ; preds = %200
  %251 = getelementptr inbounds i8, i8* %194, i64 8
  %252 = icmp ugt i8* %251, %10
  br i1 %252, label %288, label %253, !prof !6

253:                                              ; preds = %250
  %254 = bitcast i8* %194 to i64*
  %255 = load i64, i64* %254, align 1, !noalias !8
  %256 = trunc i64 %255 to i32
  %257 = and i64 %255, -4294967296
  br label %264

258:                                              ; preds = %200
  %259 = getelementptr inbounds i8, i8* %194, i64 4
  %260 = icmp ugt i8* %259, %10
  br i1 %260, label %288, label %261, !prof !6

261:                                              ; preds = %258
  %262 = bitcast i8* %194 to i32*
  %263 = load i32, i32* %262, align 1, !noalias !8
  br label %264

264:                                              ; preds = %261, %253, %246, %220
  %265 = phi i64 [ 0, %261 ], [ %257, %253 ], [ %248, %246 ], [ %222, %220 ]
  %266 = phi i32 [ %263, %261 ], [ %256, %253 ], [ %247, %246 ], [ %221, %220 ]
  %267 = phi i8* [ %259, %261 ], [ %251, %253 ], [ %249, %246 ], [ %212, %220 ]
  %268 = phi i64 [ 0, %261 ], [ 0, %253 ], [ %237, %246 ], [ 0, %220 ]
  %269 = icmp ugt i32 %196, 65535
  %270 = icmp ugt i64 %268, 268435455
  %271 = or i1 %269, %270
  %272 = ptrtoint i8* %267 to i64
  br i1 %271, label %284, label %273, !prof !7

273:                                              ; preds = %264
  %274 = ptrtoint i8* %267 to i64
  %275 = zext i32 %266 to i64
  %276 = or i64 %265, %275
  %277 = shl i64 %195, 32
  %278 = and i64 %277, 281470681743360
  %279 = zext i8 %202 to i64
  %280 = shl nuw nsw i64 %279, 48
  %281 = or i64 %280, %278
  %282 = and i64 %268, 4294967295
  %283 = or i64 %281, %282
  br label %288

284:                                              ; preds = %264
  store i64 %272, i64* %4, align 8
  %285 = icmp ult i8* %267, %10
  br i1 %285, label %163, label %286, !prof !2

286:                                              ; preds = %284
  %287 = ptrtoint i8* %267 to i64
  br label %288

288:                                              ; preds = %190, %192, %200, %220, %240, %242, %250, %258, %174, %224, %204, %286, %159, %273
  %289 = phi i64 [ %276, %273 ], [ 0, %159 ], [ 0, %286 ], [ 0, %204 ], [ 0, %224 ], [ 0, %174 ], [ 0, %258 ], [ 0, %250 ], [ 0, %242 ], [ 0, %240 ], [ 0, %220 ], [ 0, %200 ], [ 0, %192 ], [ 0, %190 ]
  %290 = phi i64 [ %283, %273 ], [ 0, %159 ], [ 0, %286 ], [ 0, %204 ], [ 0, %224 ], [ 0, %174 ], [ 0, %258 ], [ 0, %250 ], [ 0, %242 ], [ 0, %240 ], [ 0, %220 ], [ 0, %200 ], [ 0, %192 ], [ 0, %190 ]
  %291 = phi i64 [ %274, %273 ], [ %160, %159 ], [ %287, %286 ], [ %164, %204 ], [ %164, %224 ], [ %164, %174 ], [ %164, %258 ], [ %164, %250 ], [ %164, %242 ], [ %164, %240 ], [ %164, %220 ], [ %164, %200 ], [ %164, %192 ], [ %164, %190 ]
  store i64 %291, i64* %4, align 8
  %292 = and i64 %290, 72057594037927935
  %293 = lshr i64 %292, 32
  %294 = trunc i64 %293 to i16
  %295 = icmp eq i16 %294, 0
  br i1 %295, label %296, label %151

296:                                              ; preds = %288, %139, %155
  %297 = phi i64 [ %158, %155 ], [ 0, %139 ], [ 0, %288 ]
  %298 = phi i64 [ %156, %155 ], [ 0, %139 ], [ 0, %288 ]
  store i64 %5, i64* %4, align 8
  %299 = insertvalue { i64, i64 } undef, i64 %298, 0
  %300 = insertvalue { i64, i64 } %299, i64 %297, 1
  ret { i64, i64 } %300
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define hidden { i64, i64 } @_ZN9protozero12ProtoDecoder9ReadFieldEv(%"class.protozero::ProtoDecoder"* nocapture) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.protozero::ProtoDecoder", %"class.protozero::ProtoDecoder"* %0, i64 0, i32 2
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.protozero::ProtoDecoder", %"class.protozero::ProtoDecoder"* %0, i64 0, i32 1
  %5 = load i8*, i8** %4, align 8
  %6 = ptrtoint i8* %3 to i64
  %7 = icmp ult i8* %3, %5
  %8 = bitcast i8** %2 to i64*
  br i1 %7, label %9, label %136, !prof !2

9:                                                ; preds = %1
  %10 = ptrtoint i8* %5 to i64
  br label %11

11:                                               ; preds = %9, %132
  %12 = phi i64 [ %6, %9 ], [ %120, %132 ]
  %13 = phi i8* [ %3, %9 ], [ %115, %132 ]
  %14 = load i8, i8* %13, align 1, !noalias !11
  %15 = icmp sgt i8 %14, -1
  %16 = getelementptr inbounds i8, i8* %13, i64 1
  br i1 %15, label %20, label %17, !prof !2

17:                                               ; preds = %11
  %18 = and i8 %14, 127
  %19 = zext i8 %18 to i64
  br label %22

20:                                               ; preds = %11
  %21 = zext i8 %14 to i64
  br label %40

22:                                               ; preds = %29, %17
  %23 = phi i64 [ 7, %17 ], [ %37, %29 ]
  %24 = phi i64 [ %19, %17 ], [ %35, %29 ]
  %25 = phi i8* [ %16, %17 ], [ %31, %29 ]
  %26 = icmp ult i8* %25, %5
  %27 = icmp ult i64 %23, 64
  %28 = and i1 %27, %26
  br i1 %28, label %29, label %136

29:                                               ; preds = %22
  %30 = load i8, i8* %25, align 1, !noalias !11
  %31 = getelementptr inbounds i8, i8* %25, i64 1
  %32 = and i8 %30, 127
  %33 = zext i8 %32 to i64
  %34 = shl i64 %33, %23
  %35 = or i64 %34, %24
  %36 = icmp sgt i8 %30, -1
  %37 = add nuw nsw i64 %23, 7
  br i1 %36, label %38, label %22

38:                                               ; preds = %29
  %39 = icmp eq i8* %31, %13
  br i1 %39, label %136, label %40

40:                                               ; preds = %38, %20
  %41 = phi i64 [ %21, %20 ], [ %35, %38 ]
  %42 = phi i8* [ %16, %20 ], [ %31, %38 ]
  %43 = lshr i64 %41, 3
  %44 = trunc i64 %43 to i32
  %45 = icmp ne i32 %44, 0
  %46 = icmp ult i8* %42, %5
  %47 = and i1 %46, %45
  br i1 %47, label %48, label %136

48:                                               ; preds = %40
  %49 = trunc i64 %41 to i8
  %50 = and i8 %49, 7
  %51 = zext i8 %50 to i32
  switch i32 %51, label %136 [
    i32 0, label %56
    i32 2, label %76
    i32 1, label %98
    i32 5, label %106
  ]

52:                                               ; preds = %56
  %53 = icmp ult i8* %60, %5
  %54 = icmp ult i64 %67, 64
  %55 = and i1 %54, %53
  br i1 %55, label %56, label %136

56:                                               ; preds = %48, %52
  %57 = phi i64 [ %67, %52 ], [ 0, %48 ]
  %58 = phi i64 [ %65, %52 ], [ 0, %48 ]
  %59 = phi i8* [ %60, %52 ], [ %42, %48 ]
  %60 = getelementptr inbounds i8, i8* %59, i64 1
  %61 = load i8, i8* %59, align 1, !noalias !11
  %62 = and i8 %61, 127
  %63 = zext i8 %62 to i64
  %64 = shl i64 %63, %57
  %65 = or i64 %64, %58
  %66 = icmp sgt i8 %61, -1
  %67 = add nuw nsw i64 %57, 7
  br i1 %66, label %68, label %52

68:                                               ; preds = %56
  %69 = trunc i64 %65 to i32
  %70 = and i64 %65, -4294967296
  %71 = icmp eq i8* %60, %42
  br i1 %71, label %136, label %112, !prof !6

72:                                               ; preds = %76
  %73 = icmp ult i8* %80, %5
  %74 = icmp ult i64 %87, 64
  %75 = and i1 %74, %73
  br i1 %75, label %76, label %136

76:                                               ; preds = %48, %72
  %77 = phi i64 [ %87, %72 ], [ 0, %48 ]
  %78 = phi i64 [ %85, %72 ], [ 0, %48 ]
  %79 = phi i8* [ %80, %72 ], [ %42, %48 ]
  %80 = getelementptr inbounds i8, i8* %79, i64 1
  %81 = load i8, i8* %79, align 1, !noalias !11
  %82 = and i8 %81, 127
  %83 = zext i8 %82 to i64
  %84 = shl i64 %83, %77
  %85 = or i64 %84, %78
  %86 = icmp sgt i8 %81, -1
  %87 = add nuw nsw i64 %77, 7
  br i1 %86, label %88, label %72

88:                                               ; preds = %76
  %89 = icmp eq i8* %80, %42
  br i1 %89, label %136, label %90, !prof !6

90:                                               ; preds = %88
  %91 = ptrtoint i8* %80 to i64
  %92 = sub i64 %10, %91
  %93 = icmp ugt i64 %85, %92
  br i1 %93, label %136, label %94

94:                                               ; preds = %90
  %95 = trunc i64 %91 to i32
  %96 = and i64 %91, -4294967296
  %97 = getelementptr inbounds i8, i8* %80, i64 %85
  br label %112

98:                                               ; preds = %48
  %99 = getelementptr inbounds i8, i8* %42, i64 8
  %100 = icmp ugt i8* %99, %5
  br i1 %100, label %136, label %101, !prof !6

101:                                              ; preds = %98
  %102 = bitcast i8* %42 to i64*
  %103 = load i64, i64* %102, align 1, !noalias !11
  %104 = trunc i64 %103 to i32
  %105 = and i64 %103, -4294967296
  br label %112

106:                                              ; preds = %48
  %107 = getelementptr inbounds i8, i8* %42, i64 4
  %108 = icmp ugt i8* %107, %5
  br i1 %108, label %136, label %109, !prof !6

109:                                              ; preds = %106
  %110 = bitcast i8* %42 to i32*
  %111 = load i32, i32* %110, align 1, !noalias !11
  br label %112

112:                                              ; preds = %109, %101, %94, %68
  %113 = phi i64 [ 0, %109 ], [ %105, %101 ], [ %96, %94 ], [ %70, %68 ]
  %114 = phi i32 [ %111, %109 ], [ %104, %101 ], [ %95, %94 ], [ %69, %68 ]
  %115 = phi i8* [ %107, %109 ], [ %99, %101 ], [ %97, %94 ], [ %60, %68 ]
  %116 = phi i64 [ 0, %109 ], [ 0, %101 ], [ %85, %94 ], [ 0, %68 ]
  %117 = icmp ugt i32 %44, 65535
  %118 = icmp ugt i64 %116, 268435455
  %119 = or i1 %117, %118
  %120 = ptrtoint i8* %115 to i64
  br i1 %119, label %132, label %121, !prof !7

121:                                              ; preds = %112
  %122 = ptrtoint i8* %115 to i64
  %123 = zext i32 %114 to i64
  %124 = or i64 %113, %123
  %125 = shl i64 %43, 32
  %126 = and i64 %125, 281470681743360
  %127 = zext i8 %50 to i64
  %128 = shl nuw nsw i64 %127, 48
  %129 = or i64 %128, %126
  %130 = and i64 %116, 4294967295
  %131 = or i64 %129, %130
  br label %136

132:                                              ; preds = %112
  store i64 %120, i64* %8, align 8
  %133 = icmp ult i8* %115, %5
  br i1 %133, label %11, label %134, !prof !2

134:                                              ; preds = %132
  %135 = ptrtoint i8* %115 to i64
  br label %136

136:                                              ; preds = %48, %106, %98, %88, %90, %68, %40, %38, %22, %72, %52, %134, %1, %121
  %137 = phi i64 [ %124, %121 ], [ 0, %1 ], [ 0, %134 ], [ 0, %52 ], [ 0, %72 ], [ 0, %22 ], [ 0, %38 ], [ 0, %40 ], [ 0, %68 ], [ 0, %90 ], [ 0, %88 ], [ 0, %98 ], [ 0, %106 ], [ 0, %48 ]
  %138 = phi i64 [ %131, %121 ], [ 0, %1 ], [ 0, %134 ], [ 0, %52 ], [ 0, %72 ], [ 0, %22 ], [ 0, %38 ], [ 0, %40 ], [ 0, %68 ], [ 0, %90 ], [ 0, %88 ], [ 0, %98 ], [ 0, %106 ], [ 0, %48 ]
  %139 = phi i64 [ %122, %121 ], [ %6, %1 ], [ %135, %134 ], [ %12, %52 ], [ %12, %72 ], [ %12, %22 ], [ %12, %38 ], [ %12, %40 ], [ %12, %68 ], [ %12, %90 ], [ %12, %88 ], [ %12, %98 ], [ %12, %106 ], [ %12, %48 ]
  store i64 %139, i64* %8, align 8
  %140 = insertvalue { i64, i64 } undef, i64 %137, 0
  %141 = insertvalue { i64, i64 } %140, i64 %138, 1
  ret { i64, i64 } %141
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9protozero21TypedProtoDecoderBase14ParseAllFieldsEv(%"class.protozero::TypedProtoDecoderBase"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.protozero::TypedProtoDecoderBase", %"class.protozero::TypedProtoDecoderBase"* %0, i64 0, i32 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.protozero::TypedProtoDecoderBase", %"class.protozero::TypedProtoDecoderBase"* %0, i64 0, i32 0, i32 1
  %5 = getelementptr inbounds %"class.protozero::TypedProtoDecoderBase", %"class.protozero::TypedProtoDecoderBase"* %0, i64 0, i32 3
  %6 = getelementptr inbounds %"class.protozero::TypedProtoDecoderBase", %"class.protozero::TypedProtoDecoderBase"* %0, i64 0, i32 2
  %7 = getelementptr inbounds %"class.protozero::TypedProtoDecoderBase", %"class.protozero::TypedProtoDecoderBase"* %0, i64 0, i32 4
  %8 = getelementptr inbounds %"class.protozero::TypedProtoDecoderBase", %"class.protozero::TypedProtoDecoderBase"* %0, i64 0, i32 5
  %9 = load i8*, i8** %4, align 8
  %10 = icmp ult i8* %3, %9
  br i1 %10, label %11, label %165, !prof !2

11:                                               ; preds = %1, %162
  %12 = phi i8* [ %163, %162 ], [ %9, %1 ]
  %13 = phi i8* [ %116, %162 ], [ %3, %1 ]
  %14 = load i8, i8* %13, align 1, !noalias !14
  %15 = icmp sgt i8 %14, -1
  %16 = getelementptr inbounds i8, i8* %13, i64 1
  br i1 %15, label %20, label %17, !prof !2

17:                                               ; preds = %11
  %18 = and i8 %14, 127
  %19 = zext i8 %18 to i64
  br label %22

20:                                               ; preds = %11
  %21 = zext i8 %14 to i64
  br label %40

22:                                               ; preds = %29, %17
  %23 = phi i64 [ 7, %17 ], [ %37, %29 ]
  %24 = phi i64 [ %19, %17 ], [ %35, %29 ]
  %25 = phi i8* [ %16, %17 ], [ %31, %29 ]
  %26 = icmp ult i8* %25, %12
  %27 = icmp ult i64 %23, 64
  %28 = and i1 %27, %26
  br i1 %28, label %29, label %165

29:                                               ; preds = %22
  %30 = load i8, i8* %25, align 1, !noalias !14
  %31 = getelementptr inbounds i8, i8* %25, i64 1
  %32 = and i8 %30, 127
  %33 = zext i8 %32 to i64
  %34 = shl i64 %33, %23
  %35 = or i64 %34, %24
  %36 = icmp sgt i8 %30, -1
  %37 = add nuw nsw i64 %23, 7
  br i1 %36, label %38, label %22

38:                                               ; preds = %29
  %39 = icmp eq i8* %31, %13
  br i1 %39, label %165, label %40

40:                                               ; preds = %38, %20
  %41 = phi i64 [ %21, %20 ], [ %35, %38 ]
  %42 = phi i8* [ %16, %20 ], [ %31, %38 ]
  %43 = lshr i64 %41, 3
  %44 = trunc i64 %43 to i32
  %45 = icmp ne i32 %44, 0
  %46 = icmp ult i8* %42, %12
  %47 = and i1 %46, %45
  br i1 %47, label %48, label %165

48:                                               ; preds = %40
  %49 = trunc i64 %41 to i8
  %50 = and i8 %49, 7
  %51 = zext i8 %50 to i32
  switch i32 %51, label %165 [
    i32 0, label %56
    i32 2, label %76
    i32 1, label %99
    i32 5, label %107
  ]

52:                                               ; preds = %56
  %53 = icmp ult i8* %60, %12
  %54 = icmp ult i64 %67, 64
  %55 = and i1 %54, %53
  br i1 %55, label %56, label %165

56:                                               ; preds = %48, %52
  %57 = phi i64 [ %67, %52 ], [ 0, %48 ]
  %58 = phi i64 [ %65, %52 ], [ 0, %48 ]
  %59 = phi i8* [ %60, %52 ], [ %42, %48 ]
  %60 = getelementptr inbounds i8, i8* %59, i64 1
  %61 = load i8, i8* %59, align 1, !noalias !14
  %62 = and i8 %61, 127
  %63 = zext i8 %62 to i64
  %64 = shl i64 %63, %57
  %65 = or i64 %64, %58
  %66 = icmp sgt i8 %61, -1
  %67 = add nuw nsw i64 %57, 7
  br i1 %66, label %68, label %52

68:                                               ; preds = %56
  %69 = trunc i64 %65 to i32
  %70 = and i64 %65, -4294967296
  %71 = icmp eq i8* %60, %42
  br i1 %71, label %165, label %113, !prof !6

72:                                               ; preds = %76
  %73 = icmp ult i8* %80, %12
  %74 = icmp ult i64 %87, 64
  %75 = and i1 %74, %73
  br i1 %75, label %76, label %165

76:                                               ; preds = %48, %72
  %77 = phi i64 [ %87, %72 ], [ 0, %48 ]
  %78 = phi i64 [ %85, %72 ], [ 0, %48 ]
  %79 = phi i8* [ %80, %72 ], [ %42, %48 ]
  %80 = getelementptr inbounds i8, i8* %79, i64 1
  %81 = load i8, i8* %79, align 1, !noalias !14
  %82 = and i8 %81, 127
  %83 = zext i8 %82 to i64
  %84 = shl i64 %83, %77
  %85 = or i64 %84, %78
  %86 = icmp sgt i8 %81, -1
  %87 = add nuw nsw i64 %77, 7
  br i1 %86, label %88, label %72

88:                                               ; preds = %76
  %89 = icmp eq i8* %80, %42
  br i1 %89, label %165, label %90, !prof !6

90:                                               ; preds = %88
  %91 = ptrtoint i8* %12 to i64
  %92 = ptrtoint i8* %80 to i64
  %93 = sub i64 %91, %92
  %94 = icmp ugt i64 %85, %93
  br i1 %94, label %165, label %95

95:                                               ; preds = %90
  %96 = trunc i64 %92 to i32
  %97 = and i64 %92, -4294967296
  %98 = getelementptr inbounds i8, i8* %80, i64 %85
  br label %113

99:                                               ; preds = %48
  %100 = getelementptr inbounds i8, i8* %42, i64 8
  %101 = icmp ugt i8* %100, %12
  br i1 %101, label %165, label %102, !prof !6

102:                                              ; preds = %99
  %103 = bitcast i8* %42 to i64*
  %104 = load i64, i64* %103, align 1, !noalias !14
  %105 = trunc i64 %104 to i32
  %106 = and i64 %104, -4294967296
  br label %113

107:                                              ; preds = %48
  %108 = getelementptr inbounds i8, i8* %42, i64 4
  %109 = icmp ugt i8* %108, %12
  br i1 %109, label %165, label %110, !prof !6

110:                                              ; preds = %107
  %111 = bitcast i8* %42 to i32*
  %112 = load i32, i32* %111, align 1, !noalias !14
  br label %113

113:                                              ; preds = %110, %102, %95, %68
  %114 = phi i64 [ 0, %110 ], [ %106, %102 ], [ %97, %95 ], [ %70, %68 ]
  %115 = phi i32 [ %112, %110 ], [ %105, %102 ], [ %96, %95 ], [ %69, %68 ]
  %116 = phi i8* [ %108, %110 ], [ %100, %102 ], [ %98, %95 ], [ %60, %68 ]
  %117 = phi i64 [ 0, %110 ], [ 0, %102 ], [ %85, %95 ], [ 0, %68 ]
  %118 = icmp ugt i32 %44, 65535
  %119 = icmp ugt i64 %117, 268435455
  %120 = or i1 %118, %119
  br i1 %120, label %162, label %121, !prof !7

121:                                              ; preds = %113
  %122 = trunc i64 %43 to i16
  %123 = zext i32 %115 to i64
  %124 = or i64 %114, %123
  %125 = trunc i64 %117 to i32
  %126 = trunc i64 %43 to i32
  %127 = and i32 %126, 65535
  %128 = load i32, i32* %5, align 8
  %129 = icmp ugt i32 %128, %127
  br i1 %129, label %130, label %162, !prof !2

130:                                              ; preds = %121
  %131 = load %"class.protozero::Field"*, %"class.protozero::Field"** %6, align 8
  %132 = and i64 %43, 65535
  %133 = getelementptr inbounds %"class.protozero::Field", %"class.protozero::Field"* %131, i64 %132
  %134 = getelementptr inbounds %"class.protozero::Field", %"class.protozero::Field"* %131, i64 %132, i32 2
  %135 = load i16, i16* %134, align 4
  %136 = icmp eq i16 %135, 0
  br i1 %136, label %137, label %141, !prof !2

137:                                              ; preds = %130
  %138 = getelementptr inbounds %"class.protozero::Field", %"class.protozero::Field"* %133, i64 0, i32 0
  store i64 %124, i64* %138, align 8
  %139 = getelementptr inbounds %"class.protozero::Field", %"class.protozero::Field"* %131, i64 %132, i32 1
  store i32 %125, i32* %139, align 8
  store i16 %122, i16* %134, align 4
  %140 = getelementptr inbounds %"class.protozero::Field", %"class.protozero::Field"* %131, i64 %132, i32 3
  store i8 %50, i8* %140, align 2
  br label %162

141:                                              ; preds = %130
  %142 = load i32, i32* %7, align 4
  %143 = load i32, i32* %8, align 8
  %144 = icmp ult i32 %142, %143
  br i1 %144, label %149, label %145, !prof !2

145:                                              ; preds = %141
  tail call void @_ZN9protozero21TypedProtoDecoderBase17ExpandHeapStorageEv(%"class.protozero::TypedProtoDecoderBase"* %0)
  %146 = load %"class.protozero::Field"*, %"class.protozero::Field"** %6, align 8
  %147 = getelementptr inbounds %"class.protozero::Field", %"class.protozero::Field"* %146, i64 %132
  %148 = load i32, i32* %7, align 4
  br label %149

149:                                              ; preds = %141, %145
  %150 = phi i32 [ %148, %145 ], [ %142, %141 ]
  %151 = phi %"class.protozero::Field"* [ %146, %145 ], [ %131, %141 ]
  %152 = phi %"class.protozero::Field"* [ %147, %145 ], [ %133, %141 ]
  %153 = add i32 %150, 1
  store i32 %153, i32* %7, align 4
  %154 = zext i32 %150 to i64
  %155 = getelementptr inbounds %"class.protozero::Field", %"class.protozero::Field"* %151, i64 %154
  %156 = bitcast %"class.protozero::Field"* %155 to i8*
  %157 = bitcast %"class.protozero::Field"* %152 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %156, i8* align 8 %157, i64 15, i1 false)
  %158 = getelementptr inbounds %"class.protozero::Field", %"class.protozero::Field"* %152, i64 0, i32 0
  store i64 %124, i64* %158, align 8
  %159 = getelementptr inbounds %"class.protozero::Field", %"class.protozero::Field"* %152, i64 0, i32 1
  store i32 %125, i32* %159, align 8
  %160 = getelementptr inbounds %"class.protozero::Field", %"class.protozero::Field"* %152, i64 0, i32 2
  store i16 %122, i16* %160, align 4
  %161 = getelementptr inbounds %"class.protozero::Field", %"class.protozero::Field"* %152, i64 0, i32 3
  store i8 %50, i8* %161, align 2
  br label %162

162:                                              ; preds = %113, %121, %149, %137
  %163 = load i8*, i8** %4, align 8
  %164 = icmp ult i8* %116, %163
  br i1 %164, label %11, label %165, !prof !2

165:                                              ; preds = %162, %38, %40, %68, %90, %88, %99, %107, %48, %22, %72, %52, %1
  %166 = phi i8* [ %3, %1 ], [ %13, %52 ], [ %13, %72 ], [ %13, %22 ], [ %13, %48 ], [ %13, %107 ], [ %13, %99 ], [ %13, %88 ], [ %13, %90 ], [ %13, %68 ], [ %13, %40 ], [ %13, %38 ], [ %116, %162 ]
  %167 = getelementptr inbounds %"class.protozero::TypedProtoDecoderBase", %"class.protozero::TypedProtoDecoderBase"* %0, i64 0, i32 0, i32 2
  store i8* %166, i8** %167, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9protozero21TypedProtoDecoderBase17ExpandHeapStorageEv(%"class.protozero::TypedProtoDecoderBase"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.protozero::TypedProtoDecoderBase", %"class.protozero::TypedProtoDecoderBase"* %0, i64 0, i32 5
  %3 = load i32, i32* %2, align 8
  %4 = shl i32 %3, 1
  %5 = getelementptr inbounds %"class.protozero::TypedProtoDecoderBase", %"class.protozero::TypedProtoDecoderBase"* %0, i64 0, i32 4
  %6 = load i32, i32* %5, align 4
  %7 = icmp ugt i32 %4, %6
  br i1 %7, label %13, label %8, !prof !2

8:                                                ; preds = %1
  %9 = tail call i8* @_ZN8perfetto4base8BasenameEPKc(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str, i64 0, i64 0))
  %10 = tail call i32* @__errno_location() #9
  %11 = load i32, i32* %10, align 4
  %12 = tail call i8* @strerror(i32 %11) #10
  tail call void (i32, i8*, i32, i8*, ...) @_ZN8perfetto4base10LogMessageENS0_6LogLevEPKciS3_z(i32 3, i8* %9, i32 229, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.2, i64 0, i64 0), i32 %11, i8* %12) #10
  tail call void @llvm.trap()
  unreachable

13:                                               ; preds = %1
  %14 = zext i32 %4 to i64
  %15 = shl nuw nsw i64 %14, 4
  %16 = tail call i8* @_Znam(i64 %15) #11
  %17 = ptrtoint i8* %16 to i64
  %18 = getelementptr inbounds %"class.protozero::TypedProtoDecoderBase", %"class.protozero::TypedProtoDecoderBase"* %0, i64 0, i32 2
  %19 = bitcast %"class.protozero::Field"** %18 to i8**
  %20 = load i8*, i8** %19, align 8
  %21 = zext i32 %6 to i64
  %22 = shl nuw nsw i64 %21, 4
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %16, i8* align 8 %20, i64 %22, i1 false)
  %23 = getelementptr inbounds %"class.protozero::TypedProtoDecoderBase", %"class.protozero::TypedProtoDecoderBase"* %0, i64 0, i32 1
  %24 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %23, i64 0, i32 0, i32 0, i32 0
  %25 = load %"class.protozero::Field"*, %"class.protozero::Field"** %24, align 8
  %26 = bitcast %"class.std::__1::unique_ptr"* %23 to i64*
  store i64 %17, i64* %26, align 8
  %27 = icmp eq %"class.protozero::Field"* %25, null
  br i1 %27, label %31, label %28

28:                                               ; preds = %13
  %29 = bitcast %"class.protozero::Field"* %25 to i8*
  tail call void @_ZdaPv(i8* %29) #11
  %30 = load i64, i64* %26, align 8
  br label %31

31:                                               ; preds = %28, %13
  %32 = phi i64 [ %30, %28 ], [ %17, %13 ]
  %33 = bitcast %"class.protozero::Field"** %18 to i64*
  store i64 %32, i64* %33, align 8
  store i32 %4, i32* %2, align 8
  ret void
}

declare void @_ZN8perfetto4base10LogMessageENS0_6LogLevEPKciS3_z(i32, i8*, i32, i8*, ...) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN8perfetto4base8BasenameEPKc(i8*) local_unnamed_addr #0 comdat {
  br label %2

2:                                                ; preds = %2, %1
  %3 = phi i8* [ %0, %1 ], [ %6, %2 ]
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  %6 = getelementptr inbounds i8, i8* %3, i64 1
  br i1 %5, label %7, label %2

7:                                                ; preds = %2, %7
  %8 = phi i8* [ %11, %7 ], [ %0, %2 ]
  %9 = load i8, i8* %8, align 1
  %10 = icmp eq i8 %9, 0
  %11 = getelementptr inbounds i8, i8* %8, i64 1
  br i1 %10, label %12, label %7

12:                                               ; preds = %7, %15
  %13 = phi i8* [ %16, %15 ], [ %3, %7 ]
  %14 = icmp ugt i8* %13, %0
  br i1 %14, label %15, label %21

15:                                               ; preds = %12
  %16 = getelementptr inbounds i8, i8* %13, i64 -1
  %17 = load i8, i8* %16, align 1
  %18 = icmp eq i8 %17, 47
  %19 = icmp ult i8* %16, %8
  %20 = and i1 %19, %18
  br i1 %20, label %21, label %12

21:                                               ; preds = %12, %15
  ret i8* %13
}

; Function Attrs: nounwind readnone
declare i32* @__errno_location() local_unnamed_addr #4

; Function Attrs: nounwind
declare i8* @strerror(i32) local_unnamed_addr #5

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #7

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { alwaysinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { cold noreturn nounwind }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone }
attributes #10 = { nounwind }
attributes #11 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZN9protozero12_GLOBAL__N_113ParseOneFieldEPKhS2_: argument 0"}
!5 = distinct !{!5, !"_ZN9protozero12_GLOBAL__N_113ParseOneFieldEPKhS2_"}
!6 = !{!"branch_weights", i32 1, i32 2000}
!7 = !{!"branch_weights", i32 4001, i32 4000000}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZN9protozero12_GLOBAL__N_113ParseOneFieldEPKhS2_: argument 0"}
!10 = distinct !{!10, !"_ZN9protozero12_GLOBAL__N_113ParseOneFieldEPKhS2_"}
!11 = !{!12}
!12 = distinct !{!12, !13, !"_ZN9protozero12_GLOBAL__N_113ParseOneFieldEPKhS2_: argument 0"}
!13 = distinct !{!13, !"_ZN9protozero12_GLOBAL__N_113ParseOneFieldEPKhS2_"}
!14 = !{!15}
!15 = distinct !{!15, !16, !"_ZN9protozero12_GLOBAL__N_113ParseOneFieldEPKhS2_: argument 0"}
!16 = distinct !{!16, !"_ZN9protozero12_GLOBAL__N_113ParseOneFieldEPKhS2_"}
