; ModuleID = '../../third_party/lzma_sdk/Lzma2Dec.c'
source_filename = "../../third_party/lzma_sdk/Lzma2Dec.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.CLzma2Dec = type { %struct.CLzmaDec, i32, i32, i32, i8, i32, i32, i32 }
%struct.CLzmaDec = type { %struct._CLzmaProps, i32*, i8*, i8*, i32, i32, i64, i64, i32, i32, i32, [4 x i32], i32, i32, i32, i32, i32, [20 x i8] }
%struct._CLzmaProps = type { i32, i32, i32, i32 }
%struct.ISzAlloc = type { i8* (i8*, i64)*, void (i8*, i8*)* }

; Function Attrs: nounwind ssp uwtable
define hidden i32 @Lzma2Dec_AllocateProbs(%struct.CLzma2Dec*, i8 zeroext, %struct.ISzAlloc*) local_unnamed_addr #0 {
  %4 = alloca [5 x i8], align 1
  %5 = getelementptr inbounds [5 x i8], [5 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 5, i8* nonnull %5) #3
  %6 = getelementptr inbounds [5 x i8], [5 x i8]* %4, i64 0, i64 1
  %7 = getelementptr inbounds [5 x i8], [5 x i8]* %4, i64 0, i64 2
  %8 = getelementptr inbounds [5 x i8], [5 x i8]* %4, i64 0, i64 3
  %9 = getelementptr inbounds [5 x i8], [5 x i8]* %4, i64 0, i64 4
  %10 = zext i8 %1 to i32
  %11 = icmp ugt i8 %1, 40
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %5, i8 -86, i64 5, i1 false)
  br i1 %11, label %31, label %12

12:                                               ; preds = %3
  %13 = icmp eq i8 %1, 40
  br i1 %13, label %20, label %14

14:                                               ; preds = %12
  %15 = and i32 %10, 1
  %16 = or i32 %15, 2
  %17 = lshr i32 %10, 1
  %18 = add nuw nsw i32 %17, 11
  %19 = shl i32 %16, %18
  br label %20

20:                                               ; preds = %14, %12
  %21 = phi i32 [ %19, %14 ], [ -1, %12 ]
  store i8 4, i8* %5, align 1
  %22 = trunc i32 %21 to i8
  store i8 %22, i8* %6, align 1
  %23 = lshr i32 %21, 8
  %24 = trunc i32 %23 to i8
  store i8 %24, i8* %7, align 1
  %25 = lshr i32 %21, 16
  %26 = trunc i32 %25 to i8
  store i8 %26, i8* %8, align 1
  %27 = lshr i32 %21, 24
  %28 = trunc i32 %27 to i8
  store i8 %28, i8* %9, align 1
  %29 = getelementptr inbounds %struct.CLzma2Dec, %struct.CLzma2Dec* %0, i64 0, i32 0
  %30 = call i32 @LzmaDec_AllocateProbs(%struct.CLzmaDec* %29, i8* nonnull %5, i32 5, %struct.ISzAlloc* %2) #3
  br label %31

31:                                               ; preds = %3, %20
  %32 = phi i32 [ %30, %20 ], [ 4, %3 ]
  call void @llvm.lifetime.end.p0i8(i64 5, i8* nonnull %5) #3
  ret i32 %32
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @LzmaDec_AllocateProbs(%struct.CLzmaDec*, i8*, i32, %struct.ISzAlloc*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @Lzma2Dec_Allocate(%struct.CLzma2Dec*, i8 zeroext, %struct.ISzAlloc*) local_unnamed_addr #0 {
  %4 = alloca [5 x i8], align 1
  %5 = getelementptr inbounds [5 x i8], [5 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 5, i8* nonnull %5) #3
  %6 = getelementptr inbounds [5 x i8], [5 x i8]* %4, i64 0, i64 1
  %7 = getelementptr inbounds [5 x i8], [5 x i8]* %4, i64 0, i64 2
  %8 = getelementptr inbounds [5 x i8], [5 x i8]* %4, i64 0, i64 3
  %9 = getelementptr inbounds [5 x i8], [5 x i8]* %4, i64 0, i64 4
  %10 = zext i8 %1 to i32
  %11 = icmp ugt i8 %1, 40
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %5, i8 -86, i64 5, i1 false)
  br i1 %11, label %31, label %12

12:                                               ; preds = %3
  %13 = icmp eq i8 %1, 40
  br i1 %13, label %20, label %14

14:                                               ; preds = %12
  %15 = and i32 %10, 1
  %16 = or i32 %15, 2
  %17 = lshr i32 %10, 1
  %18 = add nuw nsw i32 %17, 11
  %19 = shl i32 %16, %18
  br label %20

20:                                               ; preds = %14, %12
  %21 = phi i32 [ %19, %14 ], [ -1, %12 ]
  store i8 4, i8* %5, align 1
  %22 = trunc i32 %21 to i8
  store i8 %22, i8* %6, align 1
  %23 = lshr i32 %21, 8
  %24 = trunc i32 %23 to i8
  store i8 %24, i8* %7, align 1
  %25 = lshr i32 %21, 16
  %26 = trunc i32 %25 to i8
  store i8 %26, i8* %8, align 1
  %27 = lshr i32 %21, 24
  %28 = trunc i32 %27 to i8
  store i8 %28, i8* %9, align 1
  %29 = getelementptr inbounds %struct.CLzma2Dec, %struct.CLzma2Dec* %0, i64 0, i32 0
  %30 = call i32 @LzmaDec_Allocate(%struct.CLzmaDec* %29, i8* nonnull %5, i32 5, %struct.ISzAlloc* %2) #3
  br label %31

31:                                               ; preds = %3, %20
  %32 = phi i32 [ %30, %20 ], [ 4, %3 ]
  call void @llvm.lifetime.end.p0i8(i64 5, i8* nonnull %5) #3
  ret i32 %32
}

declare i32 @LzmaDec_Allocate(%struct.CLzmaDec*, i8*, i32, %struct.ISzAlloc*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @Lzma2Dec_Init(%struct.CLzma2Dec*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.CLzma2Dec, %struct.CLzma2Dec* %0, i64 0, i32 3
  store i32 0, i32* %2, align 8
  %3 = getelementptr inbounds %struct.CLzma2Dec, %struct.CLzma2Dec* %0, i64 0, i32 5
  store i32 1, i32* %3, align 8
  %4 = getelementptr inbounds %struct.CLzma2Dec, %struct.CLzma2Dec* %0, i64 0, i32 6
  store i32 1, i32* %4, align 4
  %5 = getelementptr inbounds %struct.CLzma2Dec, %struct.CLzma2Dec* %0, i64 0, i32 7
  store i32 1, i32* %5, align 8
  %6 = getelementptr inbounds %struct.CLzma2Dec, %struct.CLzma2Dec* %0, i64 0, i32 0
  tail call void @LzmaDec_Init(%struct.CLzmaDec* %6) #3
  ret void
}

declare void @LzmaDec_Init(%struct.CLzmaDec*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @Lzma2Dec_DecodeToDic(%struct.CLzma2Dec*, i64, i8*, i64* nocapture, i32, i32*) local_unnamed_addr #0 {
  %7 = alloca i64, align 8
  %8 = load i64, i64* %3, align 8
  store i64 0, i64* %3, align 8
  store i32 0, i32* %5, align 4
  %9 = getelementptr inbounds %struct.CLzma2Dec, %struct.CLzma2Dec* %0, i64 0, i32 3
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, 8
  br i1 %11, label %241, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.CLzma2Dec, %struct.CLzma2Dec* %0, i64 0, i32 0
  %14 = getelementptr inbounds %struct.CLzma2Dec, %struct.CLzma2Dec* %0, i64 0, i32 0, i32 6
  %15 = icmp eq i32 %4, 0
  %16 = getelementptr inbounds %struct.CLzma2Dec, %struct.CLzma2Dec* %0, i64 0, i32 0, i32 0, i32 2
  %17 = getelementptr inbounds %struct.CLzma2Dec, %struct.CLzma2Dec* %0, i64 0, i32 0, i32 0, i32 0
  %18 = getelementptr inbounds %struct.CLzma2Dec, %struct.CLzma2Dec* %0, i64 0, i32 0, i32 0, i32 1
  %19 = getelementptr inbounds %struct.CLzma2Dec, %struct.CLzma2Dec* %0, i64 0, i32 7
  %20 = getelementptr inbounds %struct.CLzma2Dec, %struct.CLzma2Dec* %0, i64 0, i32 1
  %21 = getelementptr inbounds %struct.CLzma2Dec, %struct.CLzma2Dec* %0, i64 0, i32 4
  %22 = getelementptr inbounds %struct.CLzma2Dec, %struct.CLzma2Dec* %0, i64 0, i32 2
  %23 = bitcast i64* %7 to i8*
  %24 = getelementptr inbounds %struct.CLzma2Dec, %struct.CLzma2Dec* %0, i64 0, i32 5
  %25 = getelementptr inbounds %struct.CLzma2Dec, %struct.CLzma2Dec* %0, i64 0, i32 6
  %26 = getelementptr inbounds %struct.CLzma2Dec, %struct.CLzma2Dec* %0, i64 0, i32 0, i32 2
  %27 = getelementptr inbounds %struct.CLzma2Dec, %struct.CLzma2Dec* %0, i64 0, i32 0, i32 9
  %28 = getelementptr inbounds %struct.CLzma2Dec, %struct.CLzma2Dec* %0, i64 0, i32 0, i32 8
  %29 = getelementptr inbounds %struct.CLzma2Dec, %struct.CLzma2Dec* %0, i64 0, i32 0, i32 0, i32 3
  br label %30

30:                                               ; preds = %12, %237
  %31 = phi i32 [ %10, %12 ], [ %238, %237 ]
  %32 = phi i8* [ %2, %12 ], [ %239, %237 ]
  %33 = load i64, i64* %14, align 8
  %34 = icmp eq i32 %31, 9
  br i1 %34, label %242, label %35

35:                                               ; preds = %30
  %36 = icmp eq i64 %33, %1
  %37 = and i1 %15, %36
  br i1 %37, label %38, label %39

38:                                               ; preds = %35
  store i32 2, i32* %5, align 4
  br label %242

39:                                               ; preds = %35
  %40 = and i32 %31, -2
  %41 = icmp eq i32 %40, 6
  br i1 %41, label %108, label %42

42:                                               ; preds = %39
  %43 = load i64, i64* %3, align 8
  %44 = icmp eq i64 %43, %8
  br i1 %44, label %45, label %46

45:                                               ; preds = %42
  store i32 3, i32* %5, align 4
  br label %242

46:                                               ; preds = %42
  %47 = add i64 %43, 1
  store i64 %47, i64* %3, align 8
  %48 = getelementptr inbounds i8, i8* %32, i64 1
  %49 = load i8, i8* %32, align 1
  %50 = load i32, i32* %9, align 8
  switch i32 %50, label %105 [
    i32 0, label %51
    i32 1, label %64
    i32 2, label %69
    i32 3, label %77
    i32 4, label %80
    i32 5, label %92
  ]

51:                                               ; preds = %46
  store i8 %49, i8* %21, align 4
  %52 = zext i8 %49 to i32
  %53 = icmp eq i8 %49, 0
  br i1 %53, label %54, label %55

54:                                               ; preds = %51
  store i32 8, i32* %9, align 8
  br label %241

55:                                               ; preds = %51
  %56 = icmp sgt i8 %49, -1
  br i1 %56, label %57, label %61

57:                                               ; preds = %55
  %58 = and i32 %52, 127
  %59 = icmp ugt i32 %58, 2
  br i1 %59, label %105, label %60

60:                                               ; preds = %57
  store i32 0, i32* %22, align 4
  br label %105

61:                                               ; preds = %55
  %62 = shl nuw nsw i32 %52, 16
  %63 = and i32 %62, 2031616
  store i32 %63, i32* %22, align 4
  br label %105

64:                                               ; preds = %46
  %65 = zext i8 %49 to i32
  %66 = shl nuw nsw i32 %65, 8
  %67 = load i32, i32* %22, align 4
  %68 = or i32 %67, %66
  store i32 %68, i32* %22, align 4
  br label %105

69:                                               ; preds = %46
  %70 = zext i8 %49 to i32
  %71 = load i32, i32* %22, align 4
  %72 = or i32 %71, %70
  %73 = add i32 %72, 1
  store i32 %73, i32* %22, align 4
  %74 = load i8, i8* %21, align 4
  %75 = icmp sgt i8 %74, -1
  %76 = select i1 %75, i32 6, i32 3
  br label %105

77:                                               ; preds = %46
  %78 = zext i8 %49 to i32
  %79 = shl nuw nsw i32 %78, 8
  store i32 %79, i32* %20, align 8
  br label %105

80:                                               ; preds = %46
  %81 = zext i8 %49 to i32
  %82 = load i32, i32* %20, align 8
  %83 = or i32 %82, %81
  %84 = add i32 %83, 1
  store i32 %84, i32* %20, align 8
  %85 = load i8, i8* %21, align 4
  %86 = and i8 %85, 64
  %87 = icmp eq i8 %86, 0
  br i1 %87, label %88, label %105

88:                                               ; preds = %80
  %89 = load i32, i32* %19, align 8
  %90 = icmp eq i32 %89, 0
  %91 = select i1 %90, i32 6, i32 9
  br label %105

92:                                               ; preds = %46
  %93 = icmp ugt i8 %49, -32
  br i1 %93, label %105, label %94

94:                                               ; preds = %92
  %95 = urem i8 %49, 9
  %96 = zext i8 %95 to i32
  %97 = udiv i8 %49, 9
  %98 = udiv i8 %49, 45
  %99 = zext i8 %98 to i32
  store i32 %99, i32* %16, align 8
  %100 = urem i8 %97, 5
  %101 = zext i8 %100 to i32
  %102 = add nuw nsw i32 %101, %96
  %103 = icmp ugt i32 %102, 4
  br i1 %103, label %105, label %104

104:                                              ; preds = %94
  store i32 %96, i32* %17, align 8
  store i32 %101, i32* %18, align 4
  store i32 0, i32* %19, align 8
  br label %105

105:                                              ; preds = %46, %57, %60, %61, %64, %69, %77, %80, %88, %92, %94, %104
  %106 = phi i32 [ 4, %77 ], [ %76, %69 ], [ 2, %64 ], [ 9, %57 ], [ 1, %61 ], [ 1, %60 ], [ %91, %88 ], [ 5, %80 ], [ 6, %104 ], [ 9, %92 ], [ 9, %94 ], [ 9, %46 ]
  %107 = select i1 %36, i32 9, i32 %106
  store i32 %107, i32* %9, align 8
  br i1 %36, label %242, label %237

108:                                              ; preds = %39
  %109 = sub i64 %1, %33
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23) #3
  %110 = load i64, i64* %3, align 8
  %111 = sub i64 %8, %110
  store i64 %111, i64* %7, align 8
  %112 = load i32, i32* %22, align 4
  %113 = zext i32 %112 to i64
  %114 = icmp ult i64 %109, %113
  %115 = select i1 %114, i64 %109, i64 %113
  %116 = xor i1 %114, true
  %117 = zext i1 %116 to i32
  %118 = load i8, i8* %21, align 4
  %119 = icmp sgt i8 %118, -1
  br i1 %119, label %120, label %173

120:                                              ; preds = %108
  %121 = icmp eq i64 %8, %110
  br i1 %121, label %122, label %123

122:                                              ; preds = %120
  store i32 3, i32* %5, align 4
  br label %232

123:                                              ; preds = %120
  %124 = icmp eq i32 %31, 6
  br i1 %124, label %125, label %135

125:                                              ; preds = %123
  %126 = icmp eq i8 %118, 1
  %127 = zext i1 %126 to i32
  br i1 %126, label %128, label %129

128:                                              ; preds = %125
  store i32 1, i32* %25, align 4
  store i32 1, i32* %19, align 8
  br label %132

129:                                              ; preds = %125
  %130 = load i32, i32* %24, align 8
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %132, label %134

132:                                              ; preds = %128, %129
  store i32 0, i32* %24, align 8
  call void @LzmaDec_InitDicAndState(%struct.CLzmaDec* %13, i32 %127, i32 0) #3
  %133 = load i64, i64* %7, align 8
  br label %135

134:                                              ; preds = %129
  store i32 9, i32* %9, align 8
  br label %232

135:                                              ; preds = %132, %123
  %136 = phi i64 [ %133, %132 ], [ %111, %123 ]
  %137 = icmp ugt i64 %136, %115
  br i1 %137, label %138, label %139

138:                                              ; preds = %135
  store i64 %115, i64* %7, align 8
  br label %139

139:                                              ; preds = %138, %135
  %140 = phi i64 [ %115, %138 ], [ %136, %135 ]
  %141 = icmp eq i64 %140, 0
  br i1 %141, label %142, label %143

142:                                              ; preds = %139
  store i32 9, i32* %9, align 8
  br label %232

143:                                              ; preds = %139
  %144 = load i8*, i8** %26, align 8
  %145 = load i64, i64* %14, align 8
  %146 = getelementptr inbounds i8, i8* %144, i64 %145
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %146, i8* align 1 %32, i64 %140, i1 false) #3
  %147 = load i64, i64* %14, align 8
  %148 = add i64 %147, %140
  store i64 %148, i64* %14, align 8
  %149 = load i32, i32* %27, align 4
  %150 = icmp eq i32 %149, 0
  br i1 %150, label %153, label %151

151:                                              ; preds = %143
  %152 = load i32, i32* %28, align 8
  br label %160

153:                                              ; preds = %143
  %154 = load i32, i32* %29, align 4
  %155 = load i32, i32* %28, align 8
  %156 = sub i32 %154, %155
  %157 = zext i32 %156 to i64
  %158 = icmp ult i64 %140, %157
  br i1 %158, label %160, label %159

159:                                              ; preds = %153
  store i32 %154, i32* %27, align 4
  br label %160

160:                                              ; preds = %151, %153, %159
  %161 = phi i32 [ %152, %151 ], [ %155, %153 ], [ %155, %159 ]
  %162 = trunc i64 %140 to i32
  %163 = add i32 %161, %162
  store i32 %163, i32* %28, align 8
  %164 = load i64, i64* %7, align 8
  %165 = getelementptr inbounds i8, i8* %32, i64 %164
  %166 = load i64, i64* %3, align 8
  %167 = add i64 %166, %164
  store i64 %167, i64* %3, align 8
  %168 = trunc i64 %164 to i32
  %169 = load i32, i32* %22, align 4
  %170 = sub i32 %169, %168
  store i32 %170, i32* %22, align 4
  %171 = icmp eq i32 %170, 0
  %172 = select i1 %171, i32 0, i32 7
  store i32 %172, i32* %9, align 8
  br label %234

173:                                              ; preds = %108
  %174 = icmp eq i32 %31, 6
  br i1 %174, label %175, label %192

175:                                              ; preds = %173
  %176 = lshr i8 %118, 5
  %177 = and i8 %176, 3
  %178 = icmp eq i8 %177, 3
  %179 = zext i1 %178 to i32
  %180 = icmp ne i8 %177, 0
  %181 = zext i1 %180 to i32
  br i1 %178, label %185, label %182

182:                                              ; preds = %175
  %183 = load i32, i32* %24, align 8
  %184 = icmp eq i32 %183, 0
  br i1 %184, label %185, label %189

185:                                              ; preds = %182, %175
  br i1 %180, label %190, label %186

186:                                              ; preds = %185
  %187 = load i32, i32* %25, align 4
  %188 = icmp eq i32 %187, 0
  br i1 %188, label %190, label %189

189:                                              ; preds = %186, %182
  store i32 9, i32* %9, align 8
  br label %232

190:                                              ; preds = %185, %186
  call void @LzmaDec_InitDicAndState(%struct.CLzmaDec* %13, i32 %179, i32 %181) #3
  store i32 0, i32* %24, align 8
  store i32 0, i32* %25, align 4
  store i32 7, i32* %9, align 8
  %191 = load i64, i64* %7, align 8
  br label %192

192:                                              ; preds = %190, %173
  %193 = phi i64 [ %191, %190 ], [ %111, %173 ]
  %194 = load i32, i32* %20, align 8
  %195 = zext i32 %194 to i64
  %196 = icmp ugt i64 %193, %195
  br i1 %196, label %197, label %198

197:                                              ; preds = %192
  store i64 %195, i64* %7, align 8
  br label %198

198:                                              ; preds = %197, %192
  %199 = add i64 %115, %33
  %200 = call i32 @LzmaDec_DecodeToDic(%struct.CLzmaDec* %13, i64 %199, i8* %32, i64* nonnull %7, i32 %117, i32* %5) #3
  %201 = load i64, i64* %7, align 8
  %202 = getelementptr inbounds i8, i8* %32, i64 %201
  %203 = load i64, i64* %3, align 8
  %204 = add i64 %203, %201
  store i64 %204, i64* %3, align 8
  %205 = trunc i64 %201 to i32
  %206 = load i32, i32* %20, align 8
  %207 = sub i32 %206, %205
  store i32 %207, i32* %20, align 8
  %208 = load i64, i64* %14, align 8
  %209 = sub i64 %208, %33
  %210 = trunc i64 %209 to i32
  %211 = load i32, i32* %22, align 4
  %212 = sub i32 %211, %210
  store i32 %212, i32* %22, align 4
  %213 = icmp eq i32 %200, 0
  br i1 %213, label %214, label %232

214:                                              ; preds = %198
  %215 = load i32, i32* %5, align 4
  %216 = icmp eq i32 %215, 3
  br i1 %216, label %232, label %217

217:                                              ; preds = %214
  %218 = or i64 %209, %201
  %219 = icmp eq i64 %218, 0
  br i1 %219, label %220, label %228

220:                                              ; preds = %217
  %221 = icmp eq i32 %215, 4
  %222 = or i32 %212, %207
  %223 = icmp eq i32 %222, 0
  %224 = and i1 %223, %221
  br i1 %224, label %226, label %225

225:                                              ; preds = %220
  store i32 9, i32* %9, align 8
  br label %232

226:                                              ; preds = %220
  store i32 0, i32* %9, align 8
  %227 = load i32, i32* %5, align 4
  br label %228

228:                                              ; preds = %226, %217
  %229 = phi i32 [ %227, %226 ], [ %215, %217 ]
  %230 = icmp eq i32 %229, 4
  br i1 %230, label %231, label %234

231:                                              ; preds = %228
  store i32 2, i32* %5, align 4
  br label %234

232:                                              ; preds = %214, %198, %122, %142, %134, %189, %225
  %233 = phi i32 [ 1, %225 ], [ 1, %189 ], [ 1, %134 ], [ 1, %142 ], [ 0, %122 ], [ 0, %214 ], [ %200, %198 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23) #3
  br label %242

234:                                              ; preds = %228, %231, %160
  %235 = phi i8* [ %165, %160 ], [ %202, %231 ], [ %202, %228 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23) #3
  %236 = load i32, i32* %9, align 8
  br label %237

237:                                              ; preds = %105, %234
  %238 = phi i32 [ %106, %105 ], [ %236, %234 ]
  %239 = phi i8* [ %48, %105 ], [ %235, %234 ]
  %240 = icmp eq i32 %238, 8
  br i1 %240, label %241, label %30

241:                                              ; preds = %237, %54, %6
  store i32 1, i32* %5, align 4
  br label %242

242:                                              ; preds = %105, %30, %232, %45, %38, %241
  %243 = phi i32 [ 0, %241 ], [ 0, %45 ], [ 0, %38 ], [ %233, %232 ], [ 1, %30 ], [ 1, %105 ]
  ret i32 %243
}

declare void @LzmaDec_InitDicAndState(%struct.CLzmaDec*, i32, i32) local_unnamed_addr #2

declare i32 @LzmaDec_DecodeToDic(%struct.CLzmaDec*, i64, i8*, i64*, i32, i32*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @Lzma2Dec_DecodeToBuf(%struct.CLzma2Dec*, i8* nocapture, i64* nocapture, i8*, i64* nocapture, i32, i32*) local_unnamed_addr #0 {
  %8 = alloca i64, align 8
  %9 = load i64, i64* %2, align 8
  %10 = load i64, i64* %4, align 8
  store i64 0, i64* %2, align 8
  store i64 0, i64* %4, align 8
  %11 = bitcast i64* %8 to i8*
  %12 = getelementptr inbounds %struct.CLzma2Dec, %struct.CLzma2Dec* %0, i64 0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.CLzma2Dec, %struct.CLzma2Dec* %0, i64 0, i32 0, i32 7
  %14 = getelementptr inbounds %struct.CLzma2Dec, %struct.CLzma2Dec* %0, i64 0, i32 0, i32 2
  br label %15

15:                                               ; preds = %44, %7
  %16 = phi i8* [ %3, %7 ], [ %47, %44 ]
  %17 = phi i8* [ %1, %7 ], [ %45, %44 ]
  %18 = phi i64 [ %9, %7 ], [ %39, %44 ]
  %19 = phi i64 [ %10, %7 ], [ %46, %44 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #3
  store i64 %19, i64* %8, align 8
  %20 = load i64, i64* %12, align 8
  %21 = load i64, i64* %13, align 8
  %22 = icmp eq i64 %20, %21
  br i1 %22, label %23, label %24

23:                                               ; preds = %15
  store i64 0, i64* %12, align 8
  br label %24

24:                                               ; preds = %23, %15
  %25 = phi i64 [ 0, %23 ], [ %20, %15 ]
  %26 = sub i64 %21, %25
  %27 = icmp ugt i64 %18, %26
  %28 = add i64 %25, %18
  %29 = select i1 %27, i64 %21, i64 %28
  %30 = select i1 %27, i32 0, i32 %5
  %31 = call i32 @Lzma2Dec_DecodeToDic(%struct.CLzma2Dec* %0, i64 %29, i8* %16, i64* nonnull %8, i32 %30, i32* %6)
  %32 = load i64, i64* %8, align 8
  %33 = load i64, i64* %4, align 8
  %34 = add i64 %33, %32
  store i64 %34, i64* %4, align 8
  %35 = load i64, i64* %12, align 8
  %36 = sub i64 %35, %25
  %37 = load i8*, i8** %14, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 %25
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %17, i8* align 1 %38, i64 %36, i1 false)
  %39 = sub i64 %18, %36
  %40 = load i64, i64* %2, align 8
  %41 = add i64 %40, %36
  store i64 %41, i64* %2, align 8
  %42 = icmp eq i32 %31, 0
  br i1 %42, label %44, label %43

43:                                               ; preds = %24
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #3
  br label %51

44:                                               ; preds = %24
  %45 = getelementptr inbounds i8, i8* %17, i64 %36
  %46 = sub i64 %19, %32
  %47 = getelementptr inbounds i8, i8* %16, i64 %32
  %48 = icmp eq i64 %36, 0
  %49 = icmp eq i64 %39, 0
  %50 = or i1 %48, %49
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #3
  br i1 %50, label %51, label %15

51:                                               ; preds = %44, %43
  ret i32 %31
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @Lzma2Decode(i8*, i64* nocapture, i8*, i64* nocapture, i8 zeroext, i32, i32*, %struct.ISzAlloc*) local_unnamed_addr #0 {
  %9 = alloca [5 x i8], align 1
  %10 = alloca %struct.CLzma2Dec, align 8
  %11 = bitcast %struct.CLzma2Dec* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 168, i8* nonnull %11) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 168, i1 false)
  %12 = load i64, i64* %1, align 8
  %13 = load i64, i64* %3, align 8
  store i64 0, i64* %3, align 8
  store i64 0, i64* %1, align 8
  store i32 0, i32* %6, align 4
  %14 = getelementptr inbounds %struct.CLzma2Dec, %struct.CLzma2Dec* %10, i64 0, i32 0
  %15 = getelementptr inbounds %struct.CLzma2Dec, %struct.CLzma2Dec* %10, i64 0, i32 0, i32 2
  %16 = getelementptr inbounds %struct.CLzma2Dec, %struct.CLzma2Dec* %10, i64 0, i32 0, i32 1
  %17 = getelementptr inbounds [5 x i8], [5 x i8]* %9, i64 0, i64 0
  %18 = bitcast i32** %16 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 5, i8* nonnull %17) #3
  %19 = getelementptr inbounds [5 x i8], [5 x i8]* %9, i64 0, i64 1
  %20 = getelementptr inbounds [5 x i8], [5 x i8]* %9, i64 0, i64 2
  %21 = getelementptr inbounds [5 x i8], [5 x i8]* %9, i64 0, i64 3
  %22 = getelementptr inbounds [5 x i8], [5 x i8]* %9, i64 0, i64 4
  %23 = zext i8 %4 to i32
  %24 = icmp ugt i8 %4, 40
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %17, i8 -86, i64 5, i1 false) #3
  br i1 %24, label %25, label %26

25:                                               ; preds = %8
  call void @llvm.lifetime.end.p0i8(i64 5, i8* nonnull %17) #3
  br label %61

26:                                               ; preds = %8
  %27 = icmp eq i8 %4, 40
  br i1 %27, label %34, label %28

28:                                               ; preds = %26
  %29 = and i32 %23, 1
  %30 = or i32 %29, 2
  %31 = lshr i32 %23, 1
  %32 = add nuw nsw i32 %31, 11
  %33 = shl i32 %30, %32
  br label %34

34:                                               ; preds = %26, %28
  %35 = phi i32 [ %33, %28 ], [ -1, %26 ]
  store i8 4, i8* %17, align 1
  %36 = trunc i32 %35 to i8
  store i8 %36, i8* %19, align 1
  %37 = lshr i32 %35, 8
  %38 = trunc i32 %37 to i8
  store i8 %38, i8* %20, align 1
  %39 = lshr i32 %35, 16
  %40 = trunc i32 %39 to i8
  store i8 %40, i8* %21, align 1
  %41 = lshr i32 %35, 24
  %42 = trunc i32 %41 to i8
  store i8 %42, i8* %22, align 1
  %43 = call i32 @LzmaDec_AllocateProbs(%struct.CLzmaDec* nonnull %14, i8* nonnull %17, i32 5, %struct.ISzAlloc* %7) #3
  call void @llvm.lifetime.end.p0i8(i64 5, i8* nonnull %17) #3
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %61

45:                                               ; preds = %34
  store i8* %0, i8** %15, align 8
  %46 = getelementptr inbounds %struct.CLzma2Dec, %struct.CLzma2Dec* %10, i64 0, i32 0, i32 7
  store i64 %12, i64* %46, align 8
  %47 = getelementptr inbounds %struct.CLzma2Dec, %struct.CLzma2Dec* %10, i64 0, i32 3
  store i32 0, i32* %47, align 8
  %48 = getelementptr inbounds %struct.CLzma2Dec, %struct.CLzma2Dec* %10, i64 0, i32 5
  store i32 1, i32* %48, align 8
  %49 = getelementptr inbounds %struct.CLzma2Dec, %struct.CLzma2Dec* %10, i64 0, i32 6
  store i32 1, i32* %49, align 4
  %50 = getelementptr inbounds %struct.CLzma2Dec, %struct.CLzma2Dec* %10, i64 0, i32 7
  store i32 1, i32* %50, align 8
  call void @LzmaDec_Init(%struct.CLzmaDec* nonnull %14) #3
  store i64 %13, i64* %3, align 8
  %51 = call i32 @Lzma2Dec_DecodeToDic(%struct.CLzma2Dec* nonnull %10, i64 %12, i8* %2, i64* %3, i32 %5, i32* %6)
  %52 = getelementptr inbounds %struct.CLzma2Dec, %struct.CLzma2Dec* %10, i64 0, i32 0, i32 6
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %1, align 8
  %54 = icmp eq i32 %51, 0
  br i1 %54, label %55, label %59

55:                                               ; preds = %45
  %56 = load i32, i32* %6, align 4
  %57 = icmp eq i32 %56, 3
  %58 = select i1 %57, i32 6, i32 0
  br label %59

59:                                               ; preds = %55, %45
  %60 = phi i32 [ %51, %45 ], [ %58, %55 ]
  call void @LzmaDec_FreeProbs(%struct.CLzmaDec* nonnull %14, %struct.ISzAlloc* %7) #3
  br label %61

61:                                               ; preds = %25, %34, %59
  %62 = phi i32 [ %60, %59 ], [ 4, %25 ], [ %43, %34 ]
  call void @llvm.lifetime.end.p0i8(i64 168, i8* nonnull %11) #3
  ret i32 %62
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @LzmaDec_FreeProbs(%struct.CLzmaDec*, %struct.ISzAlloc*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
