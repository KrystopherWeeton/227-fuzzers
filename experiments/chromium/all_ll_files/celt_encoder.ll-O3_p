; ModuleID = '../../third_party/opus/src/celt/celt_encoder.c'
source_filename = "../../third_party/opus/src/celt/celt_encoder.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.OpusCustomMode = type { i32, i32, i32, i32, [4 x float], i16*, i32, i32, i32, i32, i8*, i16*, float*, %struct.mdct_lookup, %struct.PulseCache }
%struct.mdct_lookup = type { i32, i32, [4 x %struct.kiss_fft_state*], float* }
%struct.kiss_fft_state = type { i32, float, i32, [16 x i16], i16*, %struct.kiss_twiddle_cpx*, %struct.arch_fft_state* }
%struct.kiss_twiddle_cpx = type { float, float }
%struct.arch_fft_state = type { i32, i8* }
%struct.PulseCache = type { i32, i16*, i8*, i8* }
%struct.OpusCustomEncoder = type { %struct.OpusCustomMode*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32, float, i32, i32, %struct.AnalysisInfo, %struct.SILKInfo, [2 x float], [2 x float], i32, i32, i32, i32, float, float, i32, float*, float, [1 x float] }
%struct.AnalysisInfo = type { i32, float, float, float, float, float, float, float, i32, float, float, [19 x i8] }
%struct.SILKInfo = type { i32, i32 }
%struct.ec_ctx = type { i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }

@.str = private unnamed_addr constant [36 x i8] c"assertion failed: st->signalling==0\00", align 1
@.str.1 = private unnamed_addr constant [47 x i8] c"../../third_party/opus/src/celt/celt_encoder.c\00", align 1
@tapset_icdf = internal constant [3 x i8] c"\02\01\00", align 1
@.str.2 = private unnamed_addr constant [73 x i8] c"assertion failed: !celt_isnan(freq[0]) && (C==1 || !celt_isnan(freq[N]))\00", align 1
@.str.3 = private unnamed_addr constant [26 x i8] c"assertion failed: count>0\00", align 1
@spread_icdf = internal constant [4 x i8] c"\19\17\02\00", align 1
@celt_encode_with_ec.intensity_thresholds = internal constant [21 x float] [float 1.000000e+00, float 2.000000e+00, float 3.000000e+00, float 4.000000e+00, float 5.000000e+00, float 6.000000e+00, float 7.000000e+00, float 8.000000e+00, float 1.600000e+01, float 2.400000e+01, float 3.600000e+01, float 4.400000e+01, float 5.000000e+01, float 5.600000e+01, float 6.200000e+01, float 6.700000e+01, float 7.200000e+01, float 7.900000e+01, float 8.800000e+01, float 1.060000e+02, float 1.340000e+02], align 16
@celt_encode_with_ec.intensity_histeresis = internal constant [21 x float] [float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 3.000000e+00, float 3.000000e+00, float 4.000000e+00, float 5.000000e+00, float 6.000000e+00, float 8.000000e+00, float 8.000000e+00], align 16
@trim_icdf = internal constant [11 x i8] c"~|wmW)\13\09\04\02\00", align 1
@transient_analysis.inv_table = internal unnamed_addr constant [128 x i8] c"\FF\FF\9CnVF;3-(%!\1F\1C\1A\19\17\16\15\14\13\12\11\10\10\0F\0F\0E\0D\0D\0C\0C\0C\0C\0B\0B\0B\0A\0A\0A\09\09\09\09\09\09\08\08\08\08\08\07\07\07\07\07\07\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\05\05\05\05\05\05\05\05\05\05\05\05\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\02", align 16
@.str.4 = private unnamed_addr constant [38 x i8] c"assertion failed: !celt_isnan(tmp[0])\00", align 1
@.str.5 = private unnamed_addr constant [36 x i8] c"assertion failed: !celt_isnan(norm)\00", align 1
@eMeans = external local_unnamed_addr constant [25 x float], align 16
@tf_select_table = external local_unnamed_addr constant [4 x [8 x i8]], align 16

; Function Attrs: nounwind ssp uwtable
define hidden i32 @celt_encoder_get_size(i32) local_unnamed_addr #0 {
  %2 = tail call %struct.OpusCustomMode* @opus_custom_mode_create(i32 48000, i32 960, i32* null) #5
  %3 = getelementptr %struct.OpusCustomMode, %struct.OpusCustomMode* %2, i64 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr %struct.OpusCustomMode, %struct.OpusCustomMode* %2, i64 0, i32 2
  %6 = load i32, i32* %5, align 8
  %7 = shl i32 %4, 2
  %8 = shl i32 %6, 4
  %9 = add i32 %7, 4096
  %10 = add i32 %9, %8
  %11 = mul i32 %10, %0
  %12 = add i32 %11, 252
  ret i32 %12
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare %struct.OpusCustomMode* @opus_custom_mode_create(i32, i32, i32*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @celt_encoder_init(%struct.OpusCustomEncoder*, i32, i32, i32) local_unnamed_addr #0 {
  %5 = tail call %struct.OpusCustomMode* @opus_custom_mode_create(i32 48000, i32 960, i32* null) #5
  %6 = icmp ugt i32 %2, 2
  br i1 %6, label %41, label %7

7:                                                ; preds = %4
  %8 = icmp eq %struct.OpusCustomEncoder* %0, null
  %9 = icmp eq %struct.OpusCustomMode* %5, null
  %10 = or i1 %8, %9
  br i1 %10, label %41, label %11

11:                                               ; preds = %7
  %12 = bitcast %struct.OpusCustomEncoder* %0 to i8*
  %13 = getelementptr %struct.OpusCustomMode, %struct.OpusCustomMode* %5, i64 0, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr %struct.OpusCustomMode, %struct.OpusCustomMode* %5, i64 0, i32 2
  %16 = load i32, i32* %15, align 8
  %17 = shl i32 %14, 2
  %18 = shl i32 %16, 4
  %19 = add i32 %17, 4096
  %20 = add i32 %19, %18
  %21 = mul i32 %20, %2
  %22 = add i32 %21, 252
  %23 = sext i32 %22 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 0, i64 %23, i1 false) #5
  %24 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 0
  store %struct.OpusCustomMode* %5, %struct.OpusCustomMode** %24, align 8
  %25 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 1
  store i32 %2, i32* %25, align 8
  %26 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 2
  store i32 %2, i32* %26, align 4
  %27 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 7
  store i32 1, i32* %27, align 8
  %28 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 8
  store i32 0, i32* %28, align 4
  %29 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %5, i64 0, i32 3
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 9
  store i32 %30, i32* %31, align 8
  %32 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 18
  store i32 %3, i32* %32, align 4
  %33 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 4
  store i32 1, i32* %33, align 4
  %34 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 10
  %35 = bitcast i32* %34 to <4 x i32>*
  store <4 x i32> <i32 -1, i32 0, i32 1, i32 1>, <4 x i32>* %35, align 4
  %36 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 3
  store i32 0, i32* %36, align 8
  %37 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 6
  store i32 5, i32* %37, align 4
  %38 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 15
  store i32 24, i32* %38, align 8
  %39 = tail call i32 (%struct.OpusCustomEncoder*, i32, ...) @opus_custom_encoder_ctl(%struct.OpusCustomEncoder* nonnull %0, i32 4028) #5
  %40 = tail call i32 @resampling_factor(i32 %1) #5
  store i32 %40, i32* %27, align 8
  br label %41

41:                                               ; preds = %7, %4, %11
  %42 = phi i32 [ 0, %11 ], [ -7, %7 ], [ -1, %4 ]
  ret i32 %42
}

declare i32 @resampling_factor(i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @celt_preemphasis(float* noalias nocapture readonly, float* noalias nocapture, i32, i32, i32, float* nocapture readonly, float* nocapture, i32) local_unnamed_addr #0 {
  %9 = load float, float* %5, align 4
  %10 = load float, float* %6, align 4
  %11 = getelementptr inbounds float, float* %5, i64 1
  %12 = load float, float* %11, align 4
  %13 = fcmp une float %12, 0.000000e+00
  %14 = icmp ne i32 %4, 1
  %15 = or i1 %14, %13
  %16 = icmp ne i32 %7, 0
  %17 = or i1 %16, %15
  br i1 %17, label %49, label %18

18:                                               ; preds = %8
  %19 = icmp sgt i32 %2, 0
  br i1 %19, label %20, label %206

20:                                               ; preds = %18
  %21 = sext i32 %3 to i64
  %22 = zext i32 %2 to i64
  %23 = and i64 %22, 1
  %24 = icmp eq i32 %2, 1
  br i1 %24, label %193, label %25

25:                                               ; preds = %20
  %26 = sub nsw i64 %22, %23
  br label %27

27:                                               ; preds = %27, %25
  %28 = phi i64 [ 0, %25 ], [ %46, %27 ]
  %29 = phi float [ %10, %25 ], [ %45, %27 ]
  %30 = phi i64 [ %26, %25 ], [ %47, %27 ]
  %31 = mul nsw i64 %28, %21
  %32 = getelementptr inbounds float, float* %0, i64 %31
  %33 = load float, float* %32, align 4
  %34 = fmul float %33, 3.276800e+04
  %35 = fsub float %34, %29
  %36 = getelementptr inbounds float, float* %1, i64 %28
  store float %35, float* %36, align 4
  %37 = fmul float %9, %34
  %38 = or i64 %28, 1
  %39 = mul nsw i64 %38, %21
  %40 = getelementptr inbounds float, float* %0, i64 %39
  %41 = load float, float* %40, align 4
  %42 = fmul float %41, 3.276800e+04
  %43 = fsub float %42, %37
  %44 = getelementptr inbounds float, float* %1, i64 %38
  store float %43, float* %44, align 4
  %45 = fmul float %9, %42
  %46 = add nuw nsw i64 %28, 2
  %47 = add i64 %30, -2
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %193, label %27

49:                                               ; preds = %8
  %50 = sdiv i32 %2, %4
  %51 = icmp eq i32 %4, 1
  br i1 %51, label %56, label %52

52:                                               ; preds = %49
  %53 = bitcast float* %1 to i8*
  %54 = sext i32 %2 to i64
  %55 = shl nsw i64 %54, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %53, i8 0, i64 %55, i1 false)
  br label %56

56:                                               ; preds = %49, %52
  %57 = icmp sgt i32 %50, 0
  br i1 %57, label %58, label %142

58:                                               ; preds = %56
  %59 = sext i32 %4 to i64
  %60 = sext i32 %3 to i64
  %61 = zext i32 %50 to i64
  %62 = and i64 %61, 1
  %63 = icmp eq i32 %50, 1
  br i1 %63, label %85, label %64

64:                                               ; preds = %58
  %65 = sub nsw i64 %61, %62
  br label %66

66:                                               ; preds = %66, %64
  %67 = phi i64 [ 0, %64 ], [ %82, %66 ]
  %68 = phi i64 [ %65, %64 ], [ %83, %66 ]
  %69 = mul nsw i64 %67, %60
  %70 = getelementptr inbounds float, float* %0, i64 %69
  %71 = load float, float* %70, align 4
  %72 = fmul float %71, 3.276800e+04
  %73 = mul nsw i64 %67, %59
  %74 = getelementptr inbounds float, float* %1, i64 %73
  store float %72, float* %74, align 4
  %75 = or i64 %67, 1
  %76 = mul nsw i64 %75, %60
  %77 = getelementptr inbounds float, float* %0, i64 %76
  %78 = load float, float* %77, align 4
  %79 = fmul float %78, 3.276800e+04
  %80 = mul nsw i64 %75, %59
  %81 = getelementptr inbounds float, float* %1, i64 %80
  store float %79, float* %81, align 4
  %82 = add nuw nsw i64 %67, 2
  %83 = add i64 %68, -2
  %84 = icmp eq i64 %83, 0
  br i1 %84, label %85, label %66

85:                                               ; preds = %66, %58
  %86 = phi i64 [ 0, %58 ], [ %82, %66 ]
  %87 = icmp eq i64 %62, 0
  br i1 %87, label %95, label %88

88:                                               ; preds = %85
  %89 = mul nsw i64 %86, %60
  %90 = getelementptr inbounds float, float* %0, i64 %89
  %91 = load float, float* %90, align 4
  %92 = fmul float %91, 3.276800e+04
  %93 = mul nsw i64 %86, %59
  %94 = getelementptr inbounds float, float* %1, i64 %93
  store float %92, float* %94, align 4
  br label %95

95:                                               ; preds = %85, %88
  %96 = and i1 %16, %57
  br i1 %96, label %97, label %142

97:                                               ; preds = %95
  %98 = sext i32 %4 to i64
  %99 = zext i32 %50 to i64
  %100 = and i64 %99, 1
  %101 = icmp eq i32 %50, 1
  br i1 %101, label %129, label %102

102:                                              ; preds = %97
  %103 = sub nsw i64 %99, %100
  br label %104

104:                                              ; preds = %104, %102
  %105 = phi i64 [ 0, %102 ], [ %126, %104 ]
  %106 = phi i64 [ %103, %102 ], [ %127, %104 ]
  %107 = mul nsw i64 %105, %98
  %108 = getelementptr inbounds float, float* %1, i64 %107
  %109 = load float, float* %108, align 4
  %110 = fcmp ogt float %109, 6.553600e+04
  %111 = select i1 %110, float 6.553600e+04, float %109
  %112 = fcmp olt float %111, -6.553600e+04
  %113 = or i1 %110, %112
  %114 = select i1 %112, float -6.553600e+04, float 6.553600e+04
  %115 = select i1 %113, float %114, float %109
  store float %115, float* %108, align 4
  %116 = or i64 %105, 1
  %117 = mul nsw i64 %116, %98
  %118 = getelementptr inbounds float, float* %1, i64 %117
  %119 = load float, float* %118, align 4
  %120 = fcmp ogt float %119, 6.553600e+04
  %121 = select i1 %120, float 6.553600e+04, float %119
  %122 = fcmp olt float %121, -6.553600e+04
  %123 = or i1 %120, %122
  %124 = select i1 %122, float -6.553600e+04, float 6.553600e+04
  %125 = select i1 %123, float %124, float %119
  store float %125, float* %118, align 4
  %126 = add nuw nsw i64 %105, 2
  %127 = add i64 %106, -2
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %129, label %104

129:                                              ; preds = %104, %97
  %130 = phi i64 [ 0, %97 ], [ %126, %104 ]
  %131 = icmp eq i64 %100, 0
  br i1 %131, label %142, label %132

132:                                              ; preds = %129
  %133 = mul nsw i64 %130, %98
  %134 = getelementptr inbounds float, float* %1, i64 %133
  %135 = load float, float* %134, align 4
  %136 = fcmp ogt float %135, 6.553600e+04
  %137 = select i1 %136, float 6.553600e+04, float %135
  %138 = fcmp olt float %137, -6.553600e+04
  %139 = or i1 %136, %138
  %140 = select i1 %138, float -6.553600e+04, float 6.553600e+04
  %141 = select i1 %139, float %140, float %135
  store float %141, float* %134, align 4
  br label %142

142:                                              ; preds = %132, %129, %56, %95
  %143 = icmp sgt i32 %2, 0
  br i1 %143, label %144, label %206

144:                                              ; preds = %142
  %145 = zext i32 %2 to i64
  %146 = add nsw i64 %145, -1
  %147 = and i64 %145, 3
  %148 = icmp ult i64 %146, 3
  br i1 %148, label %177, label %149

149:                                              ; preds = %144
  %150 = sub nsw i64 %145, %147
  br label %151

151:                                              ; preds = %151, %149
  %152 = phi i64 [ 0, %149 ], [ %174, %151 ]
  %153 = phi float [ %10, %149 ], [ %173, %151 ]
  %154 = phi i64 [ %150, %149 ], [ %175, %151 ]
  %155 = getelementptr inbounds float, float* %1, i64 %152
  %156 = load float, float* %155, align 4
  %157 = fsub float %156, %153
  store float %157, float* %155, align 4
  %158 = fmul float %9, %156
  %159 = or i64 %152, 1
  %160 = getelementptr inbounds float, float* %1, i64 %159
  %161 = load float, float* %160, align 4
  %162 = fsub float %161, %158
  store float %162, float* %160, align 4
  %163 = fmul float %9, %161
  %164 = or i64 %152, 2
  %165 = getelementptr inbounds float, float* %1, i64 %164
  %166 = load float, float* %165, align 4
  %167 = fsub float %166, %163
  store float %167, float* %165, align 4
  %168 = fmul float %9, %166
  %169 = or i64 %152, 3
  %170 = getelementptr inbounds float, float* %1, i64 %169
  %171 = load float, float* %170, align 4
  %172 = fsub float %171, %168
  store float %172, float* %170, align 4
  %173 = fmul float %9, %171
  %174 = add nuw nsw i64 %152, 4
  %175 = add i64 %154, -4
  %176 = icmp eq i64 %175, 0
  br i1 %176, label %177, label %151

177:                                              ; preds = %151, %144
  %178 = phi float [ undef, %144 ], [ %173, %151 ]
  %179 = phi i64 [ 0, %144 ], [ %174, %151 ]
  %180 = phi float [ %10, %144 ], [ %173, %151 ]
  %181 = icmp eq i64 %147, 0
  br i1 %181, label %206, label %182

182:                                              ; preds = %177, %182
  %183 = phi i64 [ %190, %182 ], [ %179, %177 ]
  %184 = phi float [ %189, %182 ], [ %180, %177 ]
  %185 = phi i64 [ %191, %182 ], [ %147, %177 ]
  %186 = getelementptr inbounds float, float* %1, i64 %183
  %187 = load float, float* %186, align 4
  %188 = fsub float %187, %184
  store float %188, float* %186, align 4
  %189 = fmul float %9, %187
  %190 = add nuw nsw i64 %183, 1
  %191 = add i64 %185, -1
  %192 = icmp eq i64 %191, 0
  br i1 %192, label %206, label %182, !llvm.loop !2

193:                                              ; preds = %27, %20
  %194 = phi float [ undef, %20 ], [ %45, %27 ]
  %195 = phi i64 [ 0, %20 ], [ %46, %27 ]
  %196 = phi float [ %10, %20 ], [ %45, %27 ]
  %197 = icmp eq i64 %23, 0
  br i1 %197, label %206, label %198

198:                                              ; preds = %193
  %199 = mul nsw i64 %195, %21
  %200 = getelementptr inbounds float, float* %0, i64 %199
  %201 = load float, float* %200, align 4
  %202 = fmul float %201, 3.276800e+04
  %203 = fsub float %202, %196
  %204 = getelementptr inbounds float, float* %1, i64 %195
  store float %203, float* %204, align 4
  %205 = fmul float %9, %202
  br label %206

206:                                              ; preds = %198, %193, %177, %182, %18, %142
  %207 = phi float [ %10, %142 ], [ %10, %18 ], [ %178, %177 ], [ %189, %182 ], [ %194, %193 ], [ %205, %198 ]
  store float %207, float* %6, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @celt_encode_with_ec(%struct.OpusCustomEncoder* noalias, float* readonly, i32, i8*, i32, %struct.ec_ctx*) local_unnamed_addr #0 {
  %7 = bitcast %struct.OpusCustomEncoder* %0 to i8*
  %8 = alloca [26 x float], align 16
  %9 = alloca %struct.ec_ctx, align 8
  %10 = alloca i32, align 4
  %11 = alloca float, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca float, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = bitcast %struct.ec_ctx* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %19) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %19, i8 -86, i64 56, i1 false)
  %20 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 1
  %21 = load i32, i32* %20, align 8
  %22 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 2
  %23 = load i32, i32* %22, align 4
  %24 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %24) #5
  store i32 15, i32* %10, align 4
  %25 = bitcast float* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %25) #5
  store float 0.000000e+00, float* %11, align 4
  %26 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %26) #5
  store i32 0, i32* %12, align 4
  %27 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %27) #5
  store i32 -1431655766, i32* %13, align 4
  %28 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %28) #5
  store i32 0, i32* %14, align 4
  %29 = bitcast float* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %29) #5
  %30 = bitcast i32* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %30) #5
  store i32 -1431655766, i32* %16, align 4
  %31 = bitcast i32* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %31) #5
  store i32 0, i32* %17, align 4
  %32 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 0
  %33 = load %struct.OpusCustomMode*, %struct.OpusCustomMode** %32, align 8
  %34 = getelementptr %struct.OpusCustomMode, %struct.OpusCustomMode* %33, i64 0, i32 2
  %35 = load i32, i32* %34, align 8
  %36 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %33, i64 0, i32 1
  %37 = load i32, i32* %36, align 4
  %38 = getelementptr %struct.OpusCustomMode, %struct.OpusCustomMode* %33, i64 0, i32 5
  %39 = load i16*, i16** %38, align 8
  %40 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 8
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 9
  %43 = load i32, i32* %42, align 8
  %44 = icmp ne i32 %41, 0
  store float 0.000000e+00, float* %15, align 4
  %45 = icmp slt i32 %4, 2
  %46 = icmp eq float* %1, null
  %47 = or i1 %46, %45
  br i1 %47, label %3620, label %48

48:                                               ; preds = %6
  %49 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 7
  %50 = load i32, i32* %49, align 8
  %51 = mul nsw i32 %50, %2
  %52 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %33, i64 0, i32 6
  %53 = load i32, i32* %52, align 8
  %54 = icmp slt i32 %53, 0
  br i1 %54, label %3620, label %55

55:                                               ; preds = %48
  %56 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %33, i64 0, i32 8
  %57 = load i32, i32* %56, align 8
  br label %58

58:                                               ; preds = %62, %55
  %59 = phi i32 [ 0, %55 ], [ %63, %62 ]
  %60 = shl i32 %57, %59
  %61 = icmp eq i32 %60, %51
  br i1 %61, label %65, label %62

62:                                               ; preds = %58
  %63 = add nuw nsw i32 %59, 1
  %64 = icmp slt i32 %59, %53
  br i1 %64, label %58, label %3620

65:                                               ; preds = %58
  %66 = shl i32 1, %59
  %67 = mul nsw i32 %37, %21
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 43, i64 %68
  %70 = add nsw i32 %37, 1024
  %71 = mul nsw i32 %70, %21
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 43, i64 %72
  %74 = mul i32 %35, %21
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds float, float* %73, i64 %75
  %77 = getelementptr inbounds float, float* %76, i64 %75
  %78 = getelementptr inbounds float, float* %77, i64 %75
  %79 = icmp eq %struct.ec_ctx* %5, null
  br i1 %79, label %91, label %80

80:                                               ; preds = %65
  %81 = tail call i32 @ec_tell_frac(%struct.ec_ctx* nonnull %5) #5
  %82 = getelementptr %struct.ec_ctx, %struct.ec_ctx* %5, i64 0, i32 5
  %83 = load i32, i32* %82, align 8
  %84 = getelementptr %struct.ec_ctx, %struct.ec_ctx* %5, i64 0, i32 7
  %85 = load i32, i32* %84, align 8
  %86 = tail call i32 @llvm.ctlz.i32(i32 %85, i1 true) #5, !range !4
  %87 = or i32 %86, -32
  %88 = add i32 %87, %83
  %89 = add nsw i32 %88, 4
  %90 = ashr i32 %89, 3
  br label %91

91:                                               ; preds = %65, %80
  %92 = phi i32 [ %90, %80 ], [ 0, %65 ]
  %93 = phi i32 [ %88, %80 ], [ 1, %65 ]
  %94 = phi i32 [ %81, %80 ], [ 1, %65 ]
  %95 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 12
  %96 = load i32, i32* %95, align 4
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %99, label %98

98:                                               ; preds = %91
  tail call void @celt_fatal(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i32 1547) #7
  unreachable

99:                                               ; preds = %91
  %100 = icmp slt i32 %4, 1275
  %101 = select i1 %100, i32 %4, i32 1275
  %102 = sub nsw i32 %101, %92
  %103 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 11
  %104 = load i32, i32* %103, align 8
  %105 = icmp eq i32 %104, 0
  %106 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 10
  %107 = load i32, i32* %106, align 4
  %108 = icmp eq i32 %107, -1
  br i1 %105, label %119, label %109

109:                                              ; preds = %99
  br i1 %108, label %136, label %110

110:                                              ; preds = %109
  %111 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %33, i64 0, i32 0
  %112 = load i32, i32* %111, align 8
  %113 = ashr i32 %112, 3
  %114 = mul nsw i32 %107, %51
  %115 = ashr i32 %112, 4
  %116 = add nsw i32 %115, %114
  %117 = sdiv i32 %116, %113
  %118 = ashr i32 %117, 6
  br label %136

119:                                              ; preds = %99
  br i1 %108, label %136, label %120

120:                                              ; preds = %119
  %121 = icmp sgt i32 %93, 1
  %122 = mul nsw i32 %107, %51
  %123 = select i1 %121, i32 %93, i32 0
  %124 = add nsw i32 %122, %123
  %125 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %33, i64 0, i32 0
  %126 = load i32, i32* %125, align 8
  %127 = shl i32 %126, 2
  %128 = add nsw i32 %124, %127
  %129 = shl nsw i32 %126, 3
  %130 = sdiv i32 %128, %129
  %131 = icmp slt i32 %101, %130
  %132 = select i1 %131, i32 %101, i32 %130
  %133 = icmp sgt i32 %132, 2
  %134 = select i1 %133, i32 %132, i32 2
  %135 = sub nsw i32 %134, %92
  br label %136

136:                                              ; preds = %109, %119, %120, %110
  %137 = phi i32 [ %107, %110 ], [ %107, %120 ], [ -1, %119 ], [ -1, %109 ]
  %138 = phi i32 [ %118, %110 ], [ %135, %120 ], [ %102, %119 ], [ %102, %109 ]
  %139 = phi i32 [ %117, %110 ], [ 0, %120 ], [ 0, %119 ], [ 0, %109 ]
  %140 = phi i32 [ %101, %110 ], [ %134, %120 ], [ %101, %119 ], [ %101, %109 ]
  %141 = mul nsw i32 %140, 400
  %142 = sub nsw i32 3, %59
  %143 = shl i32 %141, %142
  %144 = mul nsw i32 %23, 40
  %145 = add nsw i32 %144, 20
  %146 = lshr i32 400, %59
  %147 = add nsw i32 %146, -50
  %148 = mul nsw i32 %147, %145
  %149 = sub nsw i32 %143, %148
  %150 = icmp eq i32 %137, -1
  br i1 %150, label %155, label %151

151:                                              ; preds = %136
  %152 = sub nsw i32 %137, %148
  %153 = icmp slt i32 %149, %152
  %154 = select i1 %153, i32 %149, i32 %152
  br label %155

155:                                              ; preds = %136, %151
  %156 = phi i32 [ %154, %151 ], [ %149, %136 ]
  br i1 %79, label %157, label %158

157:                                              ; preds = %155
  call void @ec_enc_init(%struct.ec_ctx* nonnull %9, i8* %3, i32 %140) #5
  br label %158

158:                                              ; preds = %157, %155
  %159 = phi %struct.ec_ctx* [ %9, %157 ], [ %5, %155 ]
  %160 = icmp sgt i32 %139, 0
  br i1 %160, label %161, label %178

161:                                              ; preds = %158
  %162 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 13
  %163 = load i32, i32* %162, align 8
  %164 = icmp eq i32 %163, 0
  br i1 %164, label %178, label %165

165:                                              ; preds = %161
  %166 = icmp eq i32 %93, 1
  %167 = select i1 %166, i32 2, i32 0
  %168 = shl nsw i32 %139, 1
  %169 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 34
  %170 = load i32, i32* %169, align 4
  %171 = sub nsw i32 %168, %170
  %172 = ashr i32 %171, 6
  %173 = icmp sgt i32 %167, %172
  %174 = select i1 %173, i32 %167, i32 %172
  %175 = icmp slt i32 %174, %102
  br i1 %175, label %176, label %178

176:                                              ; preds = %165
  %177 = add nsw i32 %174, %92
  call void @ec_enc_shrink(%struct.ec_ctx* %159, i32 %177) #5
  br label %178

178:                                              ; preds = %165, %176, %161, %158
  %179 = phi i32 [ %102, %161 ], [ %102, %158 ], [ %174, %176 ], [ %102, %165 ]
  %180 = phi i32 [ %140, %161 ], [ %140, %158 ], [ %177, %176 ], [ %140, %165 ]
  %181 = shl nsw i32 %180, 3
  %182 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %33, i64 0, i32 3
  %183 = load i32, i32* %182, align 4
  %184 = icmp sgt i32 %43, %183
  %185 = select i1 %184, i32 %183, i32 %43
  %186 = add nsw i32 %51, %37
  %187 = mul nsw i32 %186, %21
  %188 = sext i32 %187 to i64
  %189 = shl nsw i64 %188, 2
  %190 = alloca float, i64 %188, align 16
  %191 = bitcast float* %190 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %191, i8 -86, i64 %189, i1 false)
  %192 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 38
  %193 = load float, float* %192, align 4
  %194 = sub nsw i32 %51, %37
  %195 = mul nsw i32 %194, %23
  %196 = load i32, i32* %49, align 8
  %197 = sdiv i32 %195, %196
  %198 = icmp sgt i32 %197, 0
  br i1 %198, label %199, label %262

199:                                              ; preds = %178
  %200 = zext i32 %197 to i64
  %201 = add nsw i64 %200, -1
  %202 = and i64 %200, 3
  %203 = icmp ult i64 %201, 3
  br i1 %203, label %241, label %204

204:                                              ; preds = %199
  %205 = sub nsw i64 %200, %202
  br label %206

206:                                              ; preds = %206, %204
  %207 = phi i64 [ 0, %204 ], [ %238, %206 ]
  %208 = phi float [ 0.000000e+00, %204 ], [ %237, %206 ]
  %209 = phi float [ 0.000000e+00, %204 ], [ %235, %206 ]
  %210 = phi i64 [ %205, %204 ], [ %239, %206 ]
  %211 = getelementptr inbounds float, float* %1, i64 %207
  %212 = load float, float* %211, align 4
  %213 = fcmp ogt float %209, %212
  %214 = select i1 %213, float %209, float %212
  %215 = fcmp olt float %208, %212
  %216 = select i1 %215, float %208, float %212
  %217 = or i64 %207, 1
  %218 = getelementptr inbounds float, float* %1, i64 %217
  %219 = load float, float* %218, align 4
  %220 = fcmp ogt float %214, %219
  %221 = select i1 %220, float %214, float %219
  %222 = fcmp olt float %216, %219
  %223 = select i1 %222, float %216, float %219
  %224 = or i64 %207, 2
  %225 = getelementptr inbounds float, float* %1, i64 %224
  %226 = load float, float* %225, align 4
  %227 = fcmp ogt float %221, %226
  %228 = select i1 %227, float %221, float %226
  %229 = fcmp olt float %223, %226
  %230 = select i1 %229, float %223, float %226
  %231 = or i64 %207, 3
  %232 = getelementptr inbounds float, float* %1, i64 %231
  %233 = load float, float* %232, align 4
  %234 = fcmp ogt float %228, %233
  %235 = select i1 %234, float %228, float %233
  %236 = fcmp olt float %230, %233
  %237 = select i1 %236, float %230, float %233
  %238 = add nuw nsw i64 %207, 4
  %239 = add i64 %210, -4
  %240 = icmp eq i64 %239, 0
  br i1 %240, label %241, label %206

241:                                              ; preds = %206, %199
  %242 = phi float [ undef, %199 ], [ %235, %206 ]
  %243 = phi float [ undef, %199 ], [ %237, %206 ]
  %244 = phi i64 [ 0, %199 ], [ %238, %206 ]
  %245 = phi float [ 0.000000e+00, %199 ], [ %237, %206 ]
  %246 = phi float [ 0.000000e+00, %199 ], [ %235, %206 ]
  %247 = icmp eq i64 %202, 0
  br i1 %247, label %262, label %248

248:                                              ; preds = %241, %248
  %249 = phi i64 [ %259, %248 ], [ %244, %241 ]
  %250 = phi float [ %258, %248 ], [ %245, %241 ]
  %251 = phi float [ %256, %248 ], [ %246, %241 ]
  %252 = phi i64 [ %260, %248 ], [ %202, %241 ]
  %253 = getelementptr inbounds float, float* %1, i64 %249
  %254 = load float, float* %253, align 4
  %255 = fcmp ogt float %251, %254
  %256 = select i1 %255, float %251, float %254
  %257 = fcmp olt float %250, %254
  %258 = select i1 %257, float %250, float %254
  %259 = add nuw nsw i64 %249, 1
  %260 = add i64 %252, -1
  %261 = icmp eq i64 %260, 0
  br i1 %261, label %262, label %248, !llvm.loop !5

262:                                              ; preds = %241, %248, %178
  %263 = phi float [ 0.000000e+00, %178 ], [ %242, %241 ], [ %256, %248 ]
  %264 = phi float [ 0.000000e+00, %178 ], [ %243, %241 ], [ %258, %248 ]
  %265 = fsub float -0.000000e+00, %264
  %266 = fcmp ogt float %263, %265
  %267 = select i1 %266, float %263, float %265
  %268 = fcmp ogt float %193, %267
  br i1 %268, label %339, label %269

269:                                              ; preds = %262
  br i1 %198, label %270, label %333

270:                                              ; preds = %269
  %271 = zext i32 %197 to i64
  %272 = add nsw i64 %271, -1
  %273 = and i64 %271, 3
  %274 = icmp ult i64 %272, 3
  br i1 %274, label %312, label %275

275:                                              ; preds = %270
  %276 = sub nsw i64 %271, %273
  br label %277

277:                                              ; preds = %277, %275
  %278 = phi i64 [ 0, %275 ], [ %309, %277 ]
  %279 = phi float [ 0.000000e+00, %275 ], [ %308, %277 ]
  %280 = phi float [ 0.000000e+00, %275 ], [ %306, %277 ]
  %281 = phi i64 [ %276, %275 ], [ %310, %277 ]
  %282 = getelementptr inbounds float, float* %1, i64 %278
  %283 = load float, float* %282, align 4
  %284 = fcmp ogt float %280, %283
  %285 = select i1 %284, float %280, float %283
  %286 = fcmp olt float %279, %283
  %287 = select i1 %286, float %279, float %283
  %288 = or i64 %278, 1
  %289 = getelementptr inbounds float, float* %1, i64 %288
  %290 = load float, float* %289, align 4
  %291 = fcmp ogt float %285, %290
  %292 = select i1 %291, float %285, float %290
  %293 = fcmp olt float %287, %290
  %294 = select i1 %293, float %287, float %290
  %295 = or i64 %278, 2
  %296 = getelementptr inbounds float, float* %1, i64 %295
  %297 = load float, float* %296, align 4
  %298 = fcmp ogt float %292, %297
  %299 = select i1 %298, float %292, float %297
  %300 = fcmp olt float %294, %297
  %301 = select i1 %300, float %294, float %297
  %302 = or i64 %278, 3
  %303 = getelementptr inbounds float, float* %1, i64 %302
  %304 = load float, float* %303, align 4
  %305 = fcmp ogt float %299, %304
  %306 = select i1 %305, float %299, float %304
  %307 = fcmp olt float %301, %304
  %308 = select i1 %307, float %301, float %304
  %309 = add nuw nsw i64 %278, 4
  %310 = add i64 %281, -4
  %311 = icmp eq i64 %310, 0
  br i1 %311, label %312, label %277

312:                                              ; preds = %277, %270
  %313 = phi float [ undef, %270 ], [ %306, %277 ]
  %314 = phi float [ undef, %270 ], [ %308, %277 ]
  %315 = phi i64 [ 0, %270 ], [ %309, %277 ]
  %316 = phi float [ 0.000000e+00, %270 ], [ %308, %277 ]
  %317 = phi float [ 0.000000e+00, %270 ], [ %306, %277 ]
  %318 = icmp eq i64 %273, 0
  br i1 %318, label %333, label %319

319:                                              ; preds = %312, %319
  %320 = phi i64 [ %330, %319 ], [ %315, %312 ]
  %321 = phi float [ %329, %319 ], [ %316, %312 ]
  %322 = phi float [ %327, %319 ], [ %317, %312 ]
  %323 = phi i64 [ %331, %319 ], [ %273, %312 ]
  %324 = getelementptr inbounds float, float* %1, i64 %320
  %325 = load float, float* %324, align 4
  %326 = fcmp ogt float %322, %325
  %327 = select i1 %326, float %322, float %325
  %328 = fcmp olt float %321, %325
  %329 = select i1 %328, float %321, float %325
  %330 = add nuw nsw i64 %320, 1
  %331 = add i64 %323, -1
  %332 = icmp eq i64 %331, 0
  br i1 %332, label %333, label %319, !llvm.loop !6

333:                                              ; preds = %312, %319, %269
  %334 = phi float [ 0.000000e+00, %269 ], [ %313, %312 ], [ %327, %319 ]
  %335 = phi float [ 0.000000e+00, %269 ], [ %314, %312 ], [ %329, %319 ]
  %336 = fsub float -0.000000e+00, %335
  %337 = fcmp ogt float %334, %336
  %338 = select i1 %337, float %334, float %336
  br label %339

339:                                              ; preds = %262, %333
  %340 = phi float [ %338, %333 ], [ %193, %262 ]
  %341 = sext i32 %197 to i64
  %342 = getelementptr inbounds float, float* %1, i64 %341
  %343 = mul nsw i32 %37, %23
  %344 = sdiv i32 %343, %196
  %345 = icmp sgt i32 %344, 0
  br i1 %345, label %346, label %409

346:                                              ; preds = %339
  %347 = zext i32 %344 to i64
  %348 = add nsw i64 %347, -1
  %349 = and i64 %347, 3
  %350 = icmp ult i64 %348, 3
  br i1 %350, label %388, label %351

351:                                              ; preds = %346
  %352 = sub nsw i64 %347, %349
  br label %353

353:                                              ; preds = %353, %351
  %354 = phi i64 [ 0, %351 ], [ %385, %353 ]
  %355 = phi float [ 0.000000e+00, %351 ], [ %384, %353 ]
  %356 = phi float [ 0.000000e+00, %351 ], [ %382, %353 ]
  %357 = phi i64 [ %352, %351 ], [ %386, %353 ]
  %358 = getelementptr inbounds float, float* %342, i64 %354
  %359 = load float, float* %358, align 4
  %360 = fcmp ogt float %356, %359
  %361 = select i1 %360, float %356, float %359
  %362 = fcmp olt float %355, %359
  %363 = select i1 %362, float %355, float %359
  %364 = or i64 %354, 1
  %365 = getelementptr inbounds float, float* %342, i64 %364
  %366 = load float, float* %365, align 4
  %367 = fcmp ogt float %361, %366
  %368 = select i1 %367, float %361, float %366
  %369 = fcmp olt float %363, %366
  %370 = select i1 %369, float %363, float %366
  %371 = or i64 %354, 2
  %372 = getelementptr inbounds float, float* %342, i64 %371
  %373 = load float, float* %372, align 4
  %374 = fcmp ogt float %368, %373
  %375 = select i1 %374, float %368, float %373
  %376 = fcmp olt float %370, %373
  %377 = select i1 %376, float %370, float %373
  %378 = or i64 %354, 3
  %379 = getelementptr inbounds float, float* %342, i64 %378
  %380 = load float, float* %379, align 4
  %381 = fcmp ogt float %375, %380
  %382 = select i1 %381, float %375, float %380
  %383 = fcmp olt float %377, %380
  %384 = select i1 %383, float %377, float %380
  %385 = add nuw nsw i64 %354, 4
  %386 = add i64 %357, -4
  %387 = icmp eq i64 %386, 0
  br i1 %387, label %388, label %353

388:                                              ; preds = %353, %346
  %389 = phi float [ undef, %346 ], [ %382, %353 ]
  %390 = phi float [ undef, %346 ], [ %384, %353 ]
  %391 = phi i64 [ 0, %346 ], [ %385, %353 ]
  %392 = phi float [ 0.000000e+00, %346 ], [ %384, %353 ]
  %393 = phi float [ 0.000000e+00, %346 ], [ %382, %353 ]
  %394 = icmp eq i64 %349, 0
  br i1 %394, label %409, label %395

395:                                              ; preds = %388, %395
  %396 = phi i64 [ %406, %395 ], [ %391, %388 ]
  %397 = phi float [ %405, %395 ], [ %392, %388 ]
  %398 = phi float [ %403, %395 ], [ %393, %388 ]
  %399 = phi i64 [ %407, %395 ], [ %349, %388 ]
  %400 = getelementptr inbounds float, float* %342, i64 %396
  %401 = load float, float* %400, align 4
  %402 = fcmp ogt float %398, %401
  %403 = select i1 %402, float %398, float %401
  %404 = fcmp olt float %397, %401
  %405 = select i1 %404, float %397, float %401
  %406 = add nuw nsw i64 %396, 1
  %407 = add i64 %399, -1
  %408 = icmp eq i64 %407, 0
  br i1 %408, label %409, label %395, !llvm.loop !7

409:                                              ; preds = %388, %395, %339
  %410 = phi float [ 0.000000e+00, %339 ], [ %389, %388 ], [ %403, %395 ]
  %411 = phi float [ 0.000000e+00, %339 ], [ %390, %388 ], [ %405, %395 ]
  %412 = fsub float -0.000000e+00, %411
  %413 = fcmp ogt float %410, %412
  %414 = select i1 %413, float %410, float %412
  store float %414, float* %192, align 4
  %415 = fcmp ogt float %340, %414
  %416 = select i1 %415, float %340, float %414
  %417 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 15
  %418 = load i32, i32* %417, align 8
  %419 = shl i32 1, %418
  %420 = sitofp i32 %419 to float
  %421 = fdiv float 1.000000e+00, %420
  %422 = fcmp ole float %416, %421
  %423 = icmp eq i32 %93, 1
  br i1 %423, label %424, label %443

424:                                              ; preds = %409
  %425 = zext i1 %422 to i32
  call void @ec_enc_bit_logp(%struct.ec_ctx* %159, i32 %425, i32 15) #5
  br i1 %422, label %426, label %443

426:                                              ; preds = %424
  br i1 %160, label %427, label %432

427:                                              ; preds = %426
  %428 = add nsw i32 %92, 2
  %429 = icmp slt i32 %180, %428
  %430 = select i1 %429, i32 %180, i32 %428
  %431 = shl nsw i32 %430, 3
  call void @ec_enc_shrink(%struct.ec_ctx* %159, i32 %430) #5
  br label %432

432:                                              ; preds = %427, %426
  %433 = phi i32 [ %431, %427 ], [ %181, %426 ]
  %434 = phi i32 [ 2, %427 ], [ %179, %426 ]
  %435 = phi i32 [ %430, %427 ], [ %138, %426 ]
  %436 = phi i32 [ %430, %427 ], [ %180, %426 ]
  %437 = getelementptr %struct.ec_ctx, %struct.ec_ctx* %159, i64 0, i32 5
  %438 = getelementptr %struct.ec_ctx, %struct.ec_ctx* %159, i64 0, i32 7
  %439 = load i32, i32* %438, align 8
  %440 = call i32 @llvm.ctlz.i32(i32 %439, i1 true) #5, !range !4
  %441 = or i32 %440, -32
  %442 = sub i32 %433, %441
  store i32 %442, i32* %437, align 8
  br label %443

443:                                              ; preds = %409, %432, %424
  %444 = phi i1 [ true, %432 ], [ false, %424 ], [ false, %409 ]
  %445 = phi i32 [ 1, %432 ], [ 0, %424 ], [ 0, %409 ]
  %446 = phi i32 [ %434, %432 ], [ %179, %424 ], [ %179, %409 ]
  %447 = phi i32 [ %435, %432 ], [ %138, %424 ], [ %138, %409 ]
  %448 = phi i32 [ %433, %432 ], [ %181, %424 ], [ %181, %409 ]
  %449 = phi i32 [ %433, %432 ], [ 1, %424 ], [ %93, %409 ]
  %450 = phi i32 [ %436, %432 ], [ %180, %424 ], [ %180, %409 ]
  %451 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 4
  %452 = fcmp ogt float %416, 6.553600e+04
  %453 = sext i32 %37 to i64
  %454 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %33, i64 0, i32 4, i64 0
  %455 = sext i32 %21 to i64
  %456 = getelementptr inbounds float, float* %190, i64 %453
  br label %457

457:                                              ; preds = %457, %443
  %458 = phi i64 [ %470, %457 ], [ 0, %443 ]
  %459 = load i32, i32* %451, align 4
  %460 = icmp ne i32 %459, 0
  %461 = and i1 %452, %460
  %462 = zext i1 %461 to i32
  %463 = getelementptr inbounds float, float* %1, i64 %458
  %464 = trunc i64 %458 to i32
  %465 = mul nsw i32 %186, %464
  %466 = sext i32 %465 to i64
  %467 = getelementptr inbounds float, float* %456, i64 %466
  %468 = load i32, i32* %49, align 8
  %469 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 32, i64 %458
  call void @celt_preemphasis(float* %463, float* %467, i32 %51, i32 %21, i32 %468, float* %454, float* %469, i32 %462)
  %470 = add nuw nsw i64 %458, 1
  %471 = icmp slt i64 %470, %455
  br i1 %471, label %457, label %472

472:                                              ; preds = %457
  %473 = bitcast i32* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %473) #5
  store i32 -1431655766, i32* %18, align 4
  %474 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 16
  %475 = load i32, i32* %474, align 4
  %476 = icmp ne i32 %475, 0
  %477 = icmp sgt i32 %446, 3
  %478 = and i1 %477, %476
  %479 = mul nsw i32 %23, 12
  %480 = icmp sgt i32 %446, %479
  %481 = or i1 %480, %478
  %482 = or i32 %445, %41
  %483 = icmp eq i32 %482, 0
  %484 = and i1 %483, %481
  br i1 %484, label %485, label %493

485:                                              ; preds = %472
  %486 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 5
  %487 = load i32, i32* %486, align 8
  %488 = icmp eq i32 %487, 0
  br i1 %488, label %489, label %493

489:                                              ; preds = %485
  %490 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 6
  %491 = load i32, i32* %490, align 4
  %492 = icmp sgt i32 %491, 4
  br label %493

493:                                              ; preds = %472, %485, %489
  %494 = phi i1 [ false, %485 ], [ %492, %489 ], [ false, %472 ]
  %495 = zext i1 %494 to i32
  %496 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 25
  %497 = load i32, i32* %496, align 8
  %498 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 30
  %499 = call fastcc i32 @run_prefilter(%struct.OpusCustomEncoder* %0, float* nonnull %190, float* %69, i32 %21, i32 %51, i32 %497, i32* nonnull %10, float* nonnull %11, i32* nonnull %18, i32 %495, i32 %446, %struct.AnalysisInfo* %498)
  %500 = load float, float* %11, align 4
  %501 = fcmp ogt float %500, 0x3FD99999A0000000
  br i1 %501, label %506, label %502

502:                                              ; preds = %493
  %503 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 27
  %504 = load float, float* %503, align 8
  %505 = fcmp ogt float %504, 0x3FD99999A0000000
  br i1 %505, label %506, label %527

506:                                              ; preds = %502, %493
  %507 = getelementptr inbounds %struct.AnalysisInfo, %struct.AnalysisInfo* %498, i64 0, i32 0
  %508 = load i32, i32* %507, align 4
  %509 = icmp eq i32 %508, 0
  br i1 %509, label %515, label %510

510:                                              ; preds = %506
  %511 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 30, i32 1
  %512 = load float, float* %511, align 4
  %513 = fpext float %512 to double
  %514 = fcmp ogt double %513, 3.000000e-01
  br i1 %514, label %515, label %527

515:                                              ; preds = %506, %510
  %516 = load i32, i32* %10, align 4
  %517 = sitofp i32 %516 to double
  %518 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 26
  %519 = load i32, i32* %518, align 4
  %520 = sitofp i32 %519 to double
  %521 = fmul double %520, 1.260000e+00
  %522 = fcmp olt double %521, %517
  %523 = fmul double %520, 7.900000e-01
  %524 = fcmp ogt double %523, %517
  %525 = or i1 %522, %524
  %526 = zext i1 %525 to i32
  br label %527

527:                                              ; preds = %515, %510, %502
  %528 = phi i32 [ 0, %510 ], [ 0, %502 ], [ %526, %515 ]
  %529 = icmp eq i32 %499, 0
  br i1 %529, label %530, label %535

530:                                              ; preds = %527
  %531 = add nsw i32 %449, 16
  %532 = icmp sgt i32 %531, %448
  %533 = or i1 %44, %532
  br i1 %533, label %544, label %534

534:                                              ; preds = %530
  call void @ec_enc_bit_logp(%struct.ec_ctx* %159, i32 0, i32 1) #5
  br label %544

535:                                              ; preds = %527
  call void @ec_enc_bit_logp(%struct.ec_ctx* %159, i32 1, i32 1) #5
  %536 = load i32, i32* %10, align 4
  %537 = add nsw i32 %536, 1
  %538 = call i32 @llvm.ctlz.i32(i32 %537, i1 true), !range !4
  %539 = sub nsw i32 27, %538
  call void @ec_enc_uint(%struct.ec_ctx* %159, i32 %539, i32 6) #5
  %540 = shl i32 16, %539
  %541 = sub nsw i32 %537, %540
  %542 = xor i32 %538, 31
  call void @ec_enc_bits(%struct.ec_ctx* %159, i32 %541, i32 %542) #5
  store i32 %536, i32* %10, align 4
  %543 = load i32, i32* %18, align 4
  call void @ec_enc_bits(%struct.ec_ctx* %159, i32 %543, i32 3) #5
  call void @ec_enc_icdf(%struct.ec_ctx* %159, i32 %497, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @tapset_icdf, i64 0, i64 0), i32 2) #5
  br label %544

544:                                              ; preds = %530, %534, %535
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %473) #5
  %545 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 6
  %546 = load i32, i32* %545, align 4
  %547 = icmp sgt i32 %546, 0
  br i1 %547, label %548, label %562

548:                                              ; preds = %544
  %549 = load i32, i32* %474, align 4
  %550 = icmp eq i32 %549, 0
  br i1 %550, label %551, label %562

551:                                              ; preds = %548
  %552 = icmp slt i32 %447, 15
  %553 = and i1 %44, %552
  br i1 %553, label %554, label %558

554:                                              ; preds = %551
  %555 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 31, i32 0
  %556 = load i32, i32* %555, align 4
  %557 = icmp ne i32 %556, 2
  br label %558

558:                                              ; preds = %554, %551
  %559 = phi i1 [ false, %551 ], [ %557, %554 ]
  %560 = zext i1 %559 to i32
  %561 = call fastcc i32 @transient_analysis(float* nonnull %190, i32 %186, i32 %21, float* nonnull %15, i32* nonnull %14, i32 %560, i32* nonnull %17)
  br label %562

562:                                              ; preds = %548, %558, %544
  %563 = phi i32 [ 0, %548 ], [ %561, %558 ], [ 0, %544 ]
  %564 = icmp ne i32 %59, 0
  br i1 %564, label %565, label %578

565:                                              ; preds = %562
  %566 = getelementptr %struct.ec_ctx, %struct.ec_ctx* %159, i64 0, i32 5
  %567 = load i32, i32* %566, align 8
  %568 = getelementptr %struct.ec_ctx, %struct.ec_ctx* %159, i64 0, i32 7
  %569 = load i32, i32* %568, align 8
  %570 = call i32 @llvm.ctlz.i32(i32 %569, i1 true) #5, !range !4
  %571 = or i32 %570, -32
  %572 = add i32 %567, 3
  %573 = add i32 %572, %571
  %574 = icmp sgt i32 %573, %448
  br i1 %574, label %578, label %575

575:                                              ; preds = %565
  %576 = icmp eq i32 %563, 0
  %577 = select i1 %576, i32 0, i32 %66
  br label %578

578:                                              ; preds = %575, %562, %565
  %579 = phi i32 [ 0, %565 ], [ 0, %562 ], [ %577, %575 ]
  %580 = phi i32 [ 0, %565 ], [ 0, %562 ], [ %563, %575 ]
  %581 = phi i32 [ 1, %565 ], [ 1, %562 ], [ 0, %575 ]
  %582 = mul nsw i32 %51, %21
  %583 = sext i32 %582 to i64
  %584 = shl nsw i64 %583, 2
  %585 = alloca float, i64 %583, align 16
  %586 = bitcast float* %585 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %586, i8 -86, i64 %584, i1 false)
  %587 = shl nsw i64 %75, 2
  %588 = alloca float, i64 %75, align 16
  %589 = bitcast float* %588 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %589, i8 -86, i64 %587, i1 false)
  %590 = alloca float, i64 %75, align 16
  %591 = bitcast float* %590 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %591, i8 -86, i64 %587, i1 false)
  %592 = icmp ne i32 %579, 0
  br i1 %592, label %599, label %593

593:                                              ; preds = %578
  %594 = mul nsw i32 %35, %23
  %595 = sext i32 %594 to i64
  %596 = shl nsw i64 %595, 2
  %597 = alloca float, i64 %595, align 16
  %598 = bitcast float* %597 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %598, i8 -86, i64 %596, i1 false)
  br label %683

599:                                              ; preds = %578
  %600 = load i32, i32* %545, align 4
  %601 = icmp sgt i32 %600, 7
  %602 = mul i32 %35, %23
  %603 = sext i32 %602 to i64
  %604 = shl nsw i64 %603, 2
  %605 = alloca float, i64 %603, align 16
  %606 = bitcast float* %605 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %606, i8 -86, i64 %604, i1 false)
  br i1 %601, label %607, label %683

607:                                              ; preds = %599
  %608 = load i32, i32* %49, align 8
  %609 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 18
  %610 = load i32, i32* %609, align 4
  call fastcc void @compute_mdcts(%struct.OpusCustomMode* %33, i32 0, float* nonnull %190, float* nonnull %585, i32 %23, i32 %21, i32 %59, i32 %608, i32 %610)
  %611 = load i32, i32* %609, align 4
  call void @compute_band_energies(%struct.OpusCustomMode* %33, float* nonnull %585, float* nonnull %588, i32 %185, i32 %23, i32 %59, i32 %611) #5
  call void @amp2Log2(%struct.OpusCustomMode* %33, i32 %185, i32 %43, float* nonnull %588, float* nonnull %605, i32 %23) #5
  %612 = icmp sgt i32 %602, 0
  br i1 %612, label %613, label %683

613:                                              ; preds = %607
  %614 = sitofp i32 %59 to float
  %615 = fmul float %614, 5.000000e-01
  %616 = zext i32 %602 to i64
  %617 = icmp ult i32 %602, 8
  br i1 %617, label %674, label %618

618:                                              ; preds = %613
  %619 = and i64 %616, 4294967288
  %620 = insertelement <4 x float> undef, float %615, i32 0
  %621 = shufflevector <4 x float> %620, <4 x float> undef, <4 x i32> zeroinitializer
  %622 = insertelement <4 x float> undef, float %615, i32 0
  %623 = shufflevector <4 x float> %622, <4 x float> undef, <4 x i32> zeroinitializer
  %624 = add nsw i64 %619, -8
  %625 = lshr exact i64 %624, 3
  %626 = add nuw nsw i64 %625, 1
  %627 = and i64 %626, 1
  %628 = icmp eq i64 %624, 0
  br i1 %628, label %658, label %629

629:                                              ; preds = %618
  %630 = sub nuw nsw i64 %626, %627
  br label %631

631:                                              ; preds = %631, %629
  %632 = phi i64 [ 0, %629 ], [ %655, %631 ]
  %633 = phi i64 [ %630, %629 ], [ %656, %631 ]
  %634 = getelementptr inbounds float, float* %605, i64 %632
  %635 = bitcast float* %634 to <4 x float>*
  %636 = load <4 x float>, <4 x float>* %635, align 16
  %637 = getelementptr inbounds float, float* %634, i64 4
  %638 = bitcast float* %637 to <4 x float>*
  %639 = load <4 x float>, <4 x float>* %638, align 16
  %640 = fadd <4 x float> %621, %636
  %641 = fadd <4 x float> %623, %639
  %642 = bitcast float* %634 to <4 x float>*
  store <4 x float> %640, <4 x float>* %642, align 16
  %643 = bitcast float* %637 to <4 x float>*
  store <4 x float> %641, <4 x float>* %643, align 16
  %644 = or i64 %632, 8
  %645 = getelementptr inbounds float, float* %605, i64 %644
  %646 = bitcast float* %645 to <4 x float>*
  %647 = load <4 x float>, <4 x float>* %646, align 16
  %648 = getelementptr inbounds float, float* %645, i64 4
  %649 = bitcast float* %648 to <4 x float>*
  %650 = load <4 x float>, <4 x float>* %649, align 16
  %651 = fadd <4 x float> %621, %647
  %652 = fadd <4 x float> %623, %650
  %653 = bitcast float* %645 to <4 x float>*
  store <4 x float> %651, <4 x float>* %653, align 16
  %654 = bitcast float* %648 to <4 x float>*
  store <4 x float> %652, <4 x float>* %654, align 16
  %655 = add i64 %632, 16
  %656 = add i64 %633, -2
  %657 = icmp eq i64 %656, 0
  br i1 %657, label %658, label %631, !llvm.loop !8

658:                                              ; preds = %631, %618
  %659 = phi i64 [ 0, %618 ], [ %655, %631 ]
  %660 = icmp eq i64 %627, 0
  br i1 %660, label %672, label %661

661:                                              ; preds = %658
  %662 = getelementptr inbounds float, float* %605, i64 %659
  %663 = bitcast float* %662 to <4 x float>*
  %664 = load <4 x float>, <4 x float>* %663, align 16
  %665 = getelementptr inbounds float, float* %662, i64 4
  %666 = bitcast float* %665 to <4 x float>*
  %667 = load <4 x float>, <4 x float>* %666, align 16
  %668 = fadd <4 x float> %621, %664
  %669 = fadd <4 x float> %623, %667
  %670 = bitcast float* %662 to <4 x float>*
  store <4 x float> %668, <4 x float>* %670, align 16
  %671 = bitcast float* %665 to <4 x float>*
  store <4 x float> %669, <4 x float>* %671, align 16
  br label %672

672:                                              ; preds = %658, %661
  %673 = icmp eq i64 %619, %616
  br i1 %673, label %683, label %674

674:                                              ; preds = %672, %613
  %675 = phi i64 [ 0, %613 ], [ %619, %672 ]
  br label %676

676:                                              ; preds = %674, %676
  %677 = phi i64 [ %681, %676 ], [ %675, %674 ]
  %678 = getelementptr inbounds float, float* %605, i64 %677
  %679 = load float, float* %678, align 4
  %680 = fadd float %615, %679
  store float %680, float* %678, align 4
  %681 = add nuw nsw i64 %677, 1
  %682 = icmp eq i64 %681, %616
  br i1 %682, label %683, label %676, !llvm.loop !10

683:                                              ; preds = %676, %672, %607, %593, %599
  %684 = phi i8* [ %598, %593 ], [ %606, %599 ], [ %606, %607 ], [ %606, %672 ], [ %606, %676 ]
  %685 = phi float* [ %597, %593 ], [ %605, %599 ], [ %605, %607 ], [ %605, %672 ], [ %605, %676 ]
  %686 = phi i64 [ %596, %593 ], [ %604, %599 ], [ %604, %607 ], [ %604, %672 ], [ %604, %676 ]
  %687 = phi i64 [ %595, %593 ], [ %603, %599 ], [ %603, %607 ], [ %603, %672 ], [ %603, %676 ]
  %688 = phi i32 [ %594, %593 ], [ %602, %599 ], [ %602, %607 ], [ %602, %672 ], [ %602, %676 ]
  %689 = phi i1 [ false, %593 ], [ false, %599 ], [ true, %607 ], [ true, %672 ], [ true, %676 ]
  %690 = load i32, i32* %49, align 8
  %691 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 18
  %692 = load i32, i32* %691, align 4
  call fastcc void @compute_mdcts(%struct.OpusCustomMode* %33, i32 %579, float* nonnull %190, float* nonnull %585, i32 %23, i32 %21, i32 %59, i32 %690, i32 %692)
  %693 = load float, float* %585, align 16
  %694 = fcmp uno float %693, 0.000000e+00
  br i1 %694, label %702, label %695

695:                                              ; preds = %683
  %696 = icmp eq i32 %23, 1
  br i1 %696, label %703, label %697

697:                                              ; preds = %695
  %698 = sext i32 %51 to i64
  %699 = getelementptr inbounds float, float* %585, i64 %698
  %700 = load float, float* %699, align 4
  %701 = fcmp uno float %700, 0.000000e+00
  br i1 %701, label %702, label %706

702:                                              ; preds = %697, %683
  call void @celt_fatal(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i32 1729) #7
  unreachable

703:                                              ; preds = %695
  %704 = icmp eq i32 %21, 2
  br i1 %704, label %705, label %706

705:                                              ; preds = %703
  store i32 0, i32* %14, align 4
  br label %706

706:                                              ; preds = %697, %705, %703
  %707 = phi i1 [ true, %705 ], [ false, %703 ], [ false, %697 ]
  %708 = load i32, i32* %691, align 4
  call void @compute_band_energies(%struct.OpusCustomMode* %33, float* nonnull %585, float* nonnull %588, i32 %185, i32 %23, i32 %59, i32 %708) #5
  %709 = load i32, i32* %474, align 4
  %710 = icmp ne i32 %709, 0
  %711 = icmp sgt i32 %43, 2
  %712 = and i1 %710, %711
  br i1 %712, label %713, label %755

713:                                              ; preds = %706
  %714 = zext i32 %43 to i64
  %715 = add nsw i64 %714, -2
  %716 = and i64 %715, 1
  %717 = icmp eq i32 %43, 3
  br i1 %717, label %743, label %718

718:                                              ; preds = %713
  %719 = sub nsw i64 %715, %716
  br label %720

720:                                              ; preds = %720, %718
  %721 = phi i64 [ 2, %718 ], [ %740, %720 ]
  %722 = phi i64 [ %719, %718 ], [ %741, %720 ]
  %723 = getelementptr inbounds float, float* %588, i64 %721
  %724 = load float, float* %723, align 8
  %725 = load float, float* %588, align 16
  %726 = fmul float %725, 0x3F1A36E2E0000000
  %727 = fcmp olt float %724, %726
  %728 = select i1 %727, float %724, float %726
  %729 = fcmp ogt float %728, 0x3CD203AFA0000000
  %730 = select i1 %729, float %728, float 0x3CD203AFA0000000
  store float %730, float* %723, align 8
  %731 = or i64 %721, 1
  %732 = getelementptr inbounds float, float* %588, i64 %731
  %733 = load float, float* %732, align 4
  %734 = load float, float* %588, align 16
  %735 = fmul float %734, 0x3F1A36E2E0000000
  %736 = fcmp olt float %733, %735
  %737 = select i1 %736, float %733, float %735
  %738 = fcmp ogt float %737, 0x3CD203AFA0000000
  %739 = select i1 %738, float %737, float 0x3CD203AFA0000000
  store float %739, float* %732, align 4
  %740 = add nuw nsw i64 %721, 2
  %741 = add i64 %722, -2
  %742 = icmp eq i64 %741, 0
  br i1 %742, label %743, label %720

743:                                              ; preds = %720, %713
  %744 = phi i64 [ 2, %713 ], [ %740, %720 ]
  %745 = icmp eq i64 %716, 0
  br i1 %745, label %755, label %746

746:                                              ; preds = %743
  %747 = getelementptr inbounds float, float* %588, i64 %744
  %748 = load float, float* %747, align 4
  %749 = load float, float* %588, align 16
  %750 = fmul float %749, 0x3F1A36E2E0000000
  %751 = fcmp olt float %748, %750
  %752 = select i1 %751, float %748, float %750
  %753 = fcmp ogt float %752, 0x3CD203AFA0000000
  %754 = select i1 %753, float %752, float 0x3CD203AFA0000000
  store float %754, float* %747, align 4
  br label %755

755:                                              ; preds = %746, %743, %706
  call void @amp2Log2(%struct.OpusCustomMode* %33, i32 %185, i32 %43, float* nonnull %588, float* nonnull %590, i32 %23) #5
  %756 = alloca float, i64 %687, align 16
  %757 = bitcast float* %756 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %757, i8 -86, i64 %686, i1 false)
  %758 = sext i32 %43 to i64
  %759 = shl nsw i64 %758, 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %757, i8 0, i64 %759, i1 false)
  br i1 %44, label %1143, label %760

760:                                              ; preds = %755
  %761 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 41
  %762 = load float*, float** %761, align 8
  %763 = icmp eq float* %762, null
  br i1 %763, label %1143, label %764

764:                                              ; preds = %760
  %765 = load i32, i32* %474, align 4
  %766 = icmp eq i32 %765, 0
  br i1 %766, label %767, label %1271

767:                                              ; preds = %764
  %768 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 23
  %769 = load i32, i32* %768, align 8
  %770 = icmp sgt i32 %769, 2
  %771 = select i1 %770, i32 %769, i32 2
  %772 = icmp sgt i32 %23, 0
  br i1 %772, label %773, label %826

773:                                              ; preds = %767
  %774 = zext i32 %771 to i64
  %775 = sext i32 %35 to i64
  %776 = zext i32 %23 to i64
  %777 = load i16, i16* %39, align 2
  br label %778

778:                                              ; preds = %821, %773
  %779 = phi i64 [ 0, %773 ], [ %822, %821 ]
  %780 = phi i32 [ 0, %773 ], [ %812, %821 ]
  %781 = phi float [ 0.000000e+00, %773 ], [ %819, %821 ]
  %782 = phi float [ 0.000000e+00, %773 ], [ %811, %821 ]
  %783 = mul nsw i64 %779, %775
  br label %784

784:                                              ; preds = %778, %784
  %785 = phi i16 [ %777, %778 ], [ %805, %784 ]
  %786 = phi i64 [ 0, %778 ], [ %803, %784 ]
  %787 = phi i32 [ %780, %778 ], [ %812, %784 ]
  %788 = phi float [ %781, %778 ], [ %819, %784 ]
  %789 = phi float [ %782, %778 ], [ %811, %784 ]
  %790 = add nsw i64 %786, %783
  %791 = getelementptr inbounds float, float* %762, i64 %790
  %792 = load float, float* %791, align 4
  %793 = fcmp olt float %792, 2.500000e-01
  %794 = select i1 %793, float %792, float 2.500000e-01
  %795 = fcmp ule float %794, -2.000000e+00
  %796 = xor i1 %793, true
  %797 = or i1 %795, %796
  %798 = select i1 %795, float -2.000000e+00, float 2.500000e-01
  %799 = select i1 %797, float %798, float %792
  %800 = fcmp ogt float %799, 0.000000e+00
  %801 = fmul float %799, 5.000000e-01
  %802 = select i1 %800, float %801, float %799
  %803 = add nuw nsw i64 %786, 1
  %804 = getelementptr inbounds i16, i16* %39, i64 %803
  %805 = load i16, i16* %804, align 2
  %806 = sext i16 %805 to i32
  %807 = sext i16 %785 to i32
  %808 = sub nsw i32 %806, %807
  %809 = sitofp i32 %808 to float
  %810 = fmul float %802, %809
  %811 = fadd float %789, %810
  %812 = add nsw i32 %808, %787
  %813 = trunc i64 %786 to i32
  %814 = shl i32 %813, 1
  %815 = or i32 %814, 1
  %816 = sub nsw i32 %815, %771
  %817 = sitofp i32 %816 to float
  %818 = fmul float %802, %817
  %819 = fadd float %788, %818
  %820 = icmp ult i64 %803, %774
  br i1 %820, label %784, label %821

821:                                              ; preds = %784
  %822 = add nuw nsw i64 %779, 1
  %823 = icmp eq i64 %822, %776
  br i1 %823, label %824, label %778

824:                                              ; preds = %821
  %825 = icmp sgt i32 %812, 0
  br i1 %825, label %827, label %826

826:                                              ; preds = %767, %824
  call void @celt_fatal(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i32 1770) #7
  unreachable

827:                                              ; preds = %824
  %828 = sitofp i32 %812 to float
  %829 = fdiv float %811, %828
  %830 = fmul float %819, 6.000000e+00
  %831 = add nsw i32 %771, -1
  %832 = add nuw nsw i32 %771, 1
  %833 = mul i32 %771, %23
  %834 = mul i32 %833, %831
  %835 = mul i32 %834, %832
  %836 = sitofp i32 %835 to float
  %837 = fdiv float %830, %836
  %838 = fmul float %837, 5.000000e-01
  %839 = fcmp olt float %838, 0x3F9FBE76C0000000
  %840 = select i1 %839, float %838, float 0x3F9FBE76C0000000
  %841 = fcmp ogt float %840, 0xBF9FBE76C0000000
  %842 = zext i32 %771 to i64
  %843 = getelementptr inbounds i16, i16* %39, i64 %842
  %844 = load i16, i16* %843, align 2
  %845 = sdiv i16 %844, 2
  br label %846

846:                                              ; preds = %846, %827
  %847 = phi i64 [ %848, %846 ], [ 0, %827 ]
  %848 = add nuw i64 %847, 1
  %849 = getelementptr inbounds i16, i16* %39, i64 %848
  %850 = load i16, i16* %849, align 2
  %851 = icmp slt i16 %850, %845
  br i1 %851, label %846, label %852

852:                                              ; preds = %846
  %853 = fadd float %829, 0x3FC99999A0000000
  %854 = select i1 %841, float %840, float 0xBF9FBE76C0000000
  %855 = trunc i64 %847 to i32
  %856 = icmp eq i32 %23, 2
  br i1 %856, label %926, label %857

857:                                              ; preds = %852
  %858 = icmp ult i32 %771, 4
  br i1 %858, label %859, label %863

859:                                              ; preds = %919, %857
  %860 = phi i64 [ 0, %857 ], [ %864, %919 ]
  %861 = phi i32 [ 0, %857 ], [ %924, %919 ]
  %862 = phi i32 [ 0, %857 ], [ %865, %919 ]
  br label %1030

863:                                              ; preds = %857
  %864 = and i64 %774, 2147483644
  %865 = trunc i64 %864 to i32
  %866 = insertelement <4 x i32> undef, i32 %855, i32 0
  %867 = shufflevector <4 x i32> %866, <4 x i32> undef, <4 x i32> zeroinitializer
  %868 = insertelement <4 x float> undef, float %854, i32 0
  %869 = shufflevector <4 x float> %868, <4 x float> undef, <4 x i32> zeroinitializer
  %870 = insertelement <4 x float> undef, float %853, i32 0
  %871 = shufflevector <4 x float> %870, <4 x float> undef, <4 x i32> zeroinitializer
  br label %872

872:                                              ; preds = %913, %863
  %873 = phi i64 [ 0, %863 ], [ %916, %913 ]
  %874 = phi <4 x i32> [ zeroinitializer, %863 ], [ %915, %913 ]
  %875 = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, %863 ], [ %917, %913 ]
  %876 = sub nsw <4 x i32> %875, %867
  %877 = sitofp <4 x i32> %876 to <4 x float>
  %878 = fmul <4 x float> %869, %877
  %879 = fadd <4 x float> %871, %878
  %880 = getelementptr inbounds float, float* %762, i64 %873
  %881 = bitcast float* %880 to <4 x float>*
  %882 = load <4 x float>, <4 x float>* %881, align 4
  %883 = fcmp olt <4 x float> %882, zeroinitializer
  %884 = select <4 x i1> %883, <4 x float> %882, <4 x float> zeroinitializer
  %885 = fsub <4 x float> %884, %879
  %886 = fcmp ogt <4 x float> %885, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %887 = extractelement <4 x i1> %886, i32 0
  br i1 %887, label %888, label %892

888:                                              ; preds = %872
  %889 = extractelement <4 x float> %885, i32 0
  %890 = fadd float %889, -2.500000e-01
  %891 = getelementptr inbounds float, float* %756, i64 %873
  store float %890, float* %891, align 16
  br label %892

892:                                              ; preds = %888, %872
  %893 = extractelement <4 x i1> %886, i32 1
  br i1 %893, label %894, label %899

894:                                              ; preds = %892
  %895 = extractelement <4 x float> %885, i32 1
  %896 = fadd float %895, -2.500000e-01
  %897 = or i64 %873, 1
  %898 = getelementptr inbounds float, float* %756, i64 %897
  store float %896, float* %898, align 4
  br label %899

899:                                              ; preds = %894, %892
  %900 = extractelement <4 x i1> %886, i32 2
  br i1 %900, label %901, label %906

901:                                              ; preds = %899
  %902 = extractelement <4 x float> %885, i32 2
  %903 = fadd float %902, -2.500000e-01
  %904 = or i64 %873, 2
  %905 = getelementptr inbounds float, float* %756, i64 %904
  store float %903, float* %905, align 8
  br label %906

906:                                              ; preds = %901, %899
  %907 = extractelement <4 x i1> %886, i32 3
  br i1 %907, label %908, label %913

908:                                              ; preds = %906
  %909 = extractelement <4 x float> %885, i32 3
  %910 = fadd float %909, -2.500000e-01
  %911 = or i64 %873, 3
  %912 = getelementptr inbounds float, float* %756, i64 %911
  store float %910, float* %912, align 4
  br label %913

913:                                              ; preds = %908, %906
  %914 = zext <4 x i1> %886 to <4 x i32>
  %915 = add nuw nsw <4 x i32> %874, %914
  %916 = add i64 %873, 4
  %917 = add <4 x i32> %875, <i32 4, i32 4, i32 4, i32 4>
  %918 = icmp eq i64 %916, %864
  br i1 %918, label %919, label %872, !llvm.loop !12

919:                                              ; preds = %913
  %920 = shufflevector <4 x i32> %915, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %921 = add <4 x i32> %915, %920
  %922 = shufflevector <4 x i32> %921, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %923 = add <4 x i32> %921, %922
  %924 = extractelement <4 x i32> %923, i32 0
  %925 = icmp eq i64 %864, %774
  br i1 %925, label %1053, label %859

926:                                              ; preds = %852
  %927 = sext i32 %35 to i64
  %928 = icmp ult i32 %771, 4
  br i1 %928, label %998, label %929

929:                                              ; preds = %926
  %930 = and i64 %774, 2147483644
  %931 = trunc i64 %930 to i32
  %932 = insertelement <4 x i32> undef, i32 %855, i32 0
  %933 = shufflevector <4 x i32> %932, <4 x i32> undef, <4 x i32> zeroinitializer
  %934 = insertelement <4 x float> undef, float %854, i32 0
  %935 = shufflevector <4 x float> %934, <4 x float> undef, <4 x i32> zeroinitializer
  %936 = insertelement <4 x float> undef, float %853, i32 0
  %937 = shufflevector <4 x float> %936, <4 x float> undef, <4 x i32> zeroinitializer
  br label %938

938:                                              ; preds = %985, %929
  %939 = phi i64 [ 0, %929 ], [ %988, %985 ]
  %940 = phi <4 x i32> [ zeroinitializer, %929 ], [ %987, %985 ]
  %941 = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, %929 ], [ %989, %985 ]
  %942 = sub nsw <4 x i32> %941, %933
  %943 = sitofp <4 x i32> %942 to <4 x float>
  %944 = fmul <4 x float> %935, %943
  %945 = fadd <4 x float> %937, %944
  %946 = getelementptr inbounds float, float* %762, i64 %939
  %947 = bitcast float* %946 to <4 x float>*
  %948 = load <4 x float>, <4 x float>* %947, align 4
  %949 = add nsw i64 %939, %927
  %950 = getelementptr inbounds float, float* %762, i64 %949
  %951 = bitcast float* %950 to <4 x float>*
  %952 = load <4 x float>, <4 x float>* %951, align 4
  %953 = fcmp ogt <4 x float> %948, %952
  %954 = select <4 x i1> %953, <4 x float> %948, <4 x float> %952
  %955 = fcmp olt <4 x float> %954, zeroinitializer
  %956 = select <4 x i1> %955, <4 x float> %954, <4 x float> zeroinitializer
  %957 = fsub <4 x float> %956, %945
  %958 = fcmp ogt <4 x float> %957, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %959 = extractelement <4 x i1> %958, i32 0
  br i1 %959, label %960, label %964

960:                                              ; preds = %938
  %961 = extractelement <4 x float> %957, i32 0
  %962 = fadd float %961, -2.500000e-01
  %963 = getelementptr inbounds float, float* %756, i64 %939
  store float %962, float* %963, align 16
  br label %964

964:                                              ; preds = %960, %938
  %965 = extractelement <4 x i1> %958, i32 1
  br i1 %965, label %966, label %971

966:                                              ; preds = %964
  %967 = extractelement <4 x float> %957, i32 1
  %968 = fadd float %967, -2.500000e-01
  %969 = or i64 %939, 1
  %970 = getelementptr inbounds float, float* %756, i64 %969
  store float %968, float* %970, align 4
  br label %971

971:                                              ; preds = %966, %964
  %972 = extractelement <4 x i1> %958, i32 2
  br i1 %972, label %973, label %978

973:                                              ; preds = %971
  %974 = extractelement <4 x float> %957, i32 2
  %975 = fadd float %974, -2.500000e-01
  %976 = or i64 %939, 2
  %977 = getelementptr inbounds float, float* %756, i64 %976
  store float %975, float* %977, align 8
  br label %978

978:                                              ; preds = %973, %971
  %979 = extractelement <4 x i1> %958, i32 3
  br i1 %979, label %980, label %985

980:                                              ; preds = %978
  %981 = extractelement <4 x float> %957, i32 3
  %982 = fadd float %981, -2.500000e-01
  %983 = or i64 %939, 3
  %984 = getelementptr inbounds float, float* %756, i64 %983
  store float %982, float* %984, align 4
  br label %985

985:                                              ; preds = %980, %978
  %986 = zext <4 x i1> %958 to <4 x i32>
  %987 = add nuw nsw <4 x i32> %940, %986
  %988 = add i64 %939, 4
  %989 = add <4 x i32> %941, <i32 4, i32 4, i32 4, i32 4>
  %990 = icmp eq i64 %988, %930
  br i1 %990, label %991, label %938, !llvm.loop !13

991:                                              ; preds = %985
  %992 = shufflevector <4 x i32> %987, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %993 = add <4 x i32> %987, %992
  %994 = shufflevector <4 x i32> %993, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %995 = add <4 x i32> %993, %994
  %996 = extractelement <4 x i32> %995, i32 0
  %997 = icmp eq i64 %930, %774
  br i1 %997, label %1053, label %998

998:                                              ; preds = %991, %926
  %999 = phi i64 [ 0, %926 ], [ %930, %991 ]
  %1000 = phi i32 [ 0, %926 ], [ %996, %991 ]
  %1001 = phi i32 [ 0, %926 ], [ %931, %991 ]
  br label %1002

1002:                                             ; preds = %998, %1025
  %1003 = phi i64 [ %1027, %1025 ], [ %999, %998 ]
  %1004 = phi i32 [ %1026, %1025 ], [ %1000, %998 ]
  %1005 = phi i32 [ %1028, %1025 ], [ %1001, %998 ]
  %1006 = sub nsw i32 %1005, %855
  %1007 = sitofp i32 %1006 to float
  %1008 = fmul float %854, %1007
  %1009 = fadd float %853, %1008
  %1010 = getelementptr inbounds float, float* %762, i64 %1003
  %1011 = load float, float* %1010, align 4
  %1012 = add nsw i64 %1003, %927
  %1013 = getelementptr inbounds float, float* %762, i64 %1012
  %1014 = load float, float* %1013, align 4
  %1015 = fcmp ogt float %1011, %1014
  %1016 = select i1 %1015, float %1011, float %1014
  %1017 = fcmp olt float %1016, 0.000000e+00
  %1018 = select i1 %1017, float %1016, float 0.000000e+00
  %1019 = fsub float %1018, %1009
  %1020 = fcmp ogt float %1019, 2.500000e-01
  br i1 %1020, label %1021, label %1025

1021:                                             ; preds = %1002
  %1022 = fadd float %1019, -2.500000e-01
  %1023 = getelementptr inbounds float, float* %756, i64 %1003
  store float %1022, float* %1023, align 4
  %1024 = add nsw i32 %1004, 1
  br label %1025

1025:                                             ; preds = %1021, %1002
  %1026 = phi i32 [ %1024, %1021 ], [ %1004, %1002 ]
  %1027 = add nuw nsw i64 %1003, 1
  %1028 = add nuw nsw i32 %1005, 1
  %1029 = icmp ult i64 %1027, %842
  br i1 %1029, label %1002, label %1053, !llvm.loop !14

1030:                                             ; preds = %859, %1048
  %1031 = phi i64 [ %1050, %1048 ], [ %860, %859 ]
  %1032 = phi i32 [ %1049, %1048 ], [ %861, %859 ]
  %1033 = phi i32 [ %1051, %1048 ], [ %862, %859 ]
  %1034 = sub nsw i32 %1033, %855
  %1035 = sitofp i32 %1034 to float
  %1036 = fmul float %854, %1035
  %1037 = fadd float %853, %1036
  %1038 = getelementptr inbounds float, float* %762, i64 %1031
  %1039 = load float, float* %1038, align 4
  %1040 = fcmp olt float %1039, 0.000000e+00
  %1041 = select i1 %1040, float %1039, float 0.000000e+00
  %1042 = fsub float %1041, %1037
  %1043 = fcmp ogt float %1042, 2.500000e-01
  br i1 %1043, label %1044, label %1048

1044:                                             ; preds = %1030
  %1045 = fadd float %1042, -2.500000e-01
  %1046 = getelementptr inbounds float, float* %756, i64 %1031
  store float %1045, float* %1046, align 4
  %1047 = add nsw i32 %1032, 1
  br label %1048

1048:                                             ; preds = %1044, %1030
  %1049 = phi i32 [ %1047, %1044 ], [ %1032, %1030 ]
  %1050 = add nuw nsw i64 %1031, 1
  %1051 = add nuw nsw i32 %1033, 1
  %1052 = icmp ult i64 %1050, %842
  br i1 %1052, label %1030, label %1053, !llvm.loop !15

1053:                                             ; preds = %1048, %1025, %919, %991
  %1054 = phi i32 [ %996, %991 ], [ %924, %919 ], [ %1026, %1025 ], [ %1049, %1048 ]
  %1055 = icmp sgt i32 %1054, 2
  br i1 %1055, label %1056, label %1138

1056:                                             ; preds = %1053
  %1057 = fadd float %853, 2.500000e-01
  %1058 = fcmp ogt float %1057, 0.000000e+00
  br i1 %1058, label %1127, label %1059

1059:                                             ; preds = %1056
  %1060 = icmp ult i32 %771, 8
  br i1 %1060, label %1061, label %1063

1061:                                             ; preds = %1125, %1059
  %1062 = phi i64 [ 0, %1059 ], [ %1064, %1125 ]
  br label %1129

1063:                                             ; preds = %1059
  %1064 = and i64 %774, 2147483640
  %1065 = add nsw i64 %1064, -8
  %1066 = lshr exact i64 %1065, 3
  %1067 = add nuw nsw i64 %1066, 1
  %1068 = and i64 %1067, 1
  %1069 = icmp eq i64 %1065, 0
  br i1 %1069, label %1107, label %1070

1070:                                             ; preds = %1063
  %1071 = sub nuw nsw i64 %1067, %1068
  br label %1072

1072:                                             ; preds = %1072, %1070
  %1073 = phi i64 [ 0, %1070 ], [ %1104, %1072 ]
  %1074 = phi i64 [ %1071, %1070 ], [ %1105, %1072 ]
  %1075 = getelementptr inbounds float, float* %756, i64 %1073
  %1076 = bitcast float* %1075 to <4 x float>*
  %1077 = load <4 x float>, <4 x float>* %1076, align 16
  %1078 = getelementptr inbounds float, float* %1075, i64 4
  %1079 = bitcast float* %1078 to <4 x float>*
  %1080 = load <4 x float>, <4 x float>* %1079, align 16
  %1081 = fadd <4 x float> %1077, <float -2.500000e-01, float -2.500000e-01, float -2.500000e-01, float -2.500000e-01>
  %1082 = fadd <4 x float> %1080, <float -2.500000e-01, float -2.500000e-01, float -2.500000e-01, float -2.500000e-01>
  %1083 = fcmp olt <4 x float> %1081, zeroinitializer
  %1084 = fcmp olt <4 x float> %1082, zeroinitializer
  %1085 = select <4 x i1> %1083, <4 x float> zeroinitializer, <4 x float> %1081
  %1086 = select <4 x i1> %1084, <4 x float> zeroinitializer, <4 x float> %1082
  %1087 = bitcast float* %1075 to <4 x float>*
  store <4 x float> %1085, <4 x float>* %1087, align 16
  %1088 = bitcast float* %1078 to <4 x float>*
  store <4 x float> %1086, <4 x float>* %1088, align 16
  %1089 = or i64 %1073, 8
  %1090 = getelementptr inbounds float, float* %756, i64 %1089
  %1091 = bitcast float* %1090 to <4 x float>*
  %1092 = load <4 x float>, <4 x float>* %1091, align 16
  %1093 = getelementptr inbounds float, float* %1090, i64 4
  %1094 = bitcast float* %1093 to <4 x float>*
  %1095 = load <4 x float>, <4 x float>* %1094, align 16
  %1096 = fadd <4 x float> %1092, <float -2.500000e-01, float -2.500000e-01, float -2.500000e-01, float -2.500000e-01>
  %1097 = fadd <4 x float> %1095, <float -2.500000e-01, float -2.500000e-01, float -2.500000e-01, float -2.500000e-01>
  %1098 = fcmp olt <4 x float> %1096, zeroinitializer
  %1099 = fcmp olt <4 x float> %1097, zeroinitializer
  %1100 = select <4 x i1> %1098, <4 x float> zeroinitializer, <4 x float> %1096
  %1101 = select <4 x i1> %1099, <4 x float> zeroinitializer, <4 x float> %1097
  %1102 = bitcast float* %1090 to <4 x float>*
  store <4 x float> %1100, <4 x float>* %1102, align 16
  %1103 = bitcast float* %1093 to <4 x float>*
  store <4 x float> %1101, <4 x float>* %1103, align 16
  %1104 = add i64 %1073, 16
  %1105 = add i64 %1074, -2
  %1106 = icmp eq i64 %1105, 0
  br i1 %1106, label %1107, label %1072, !llvm.loop !16

1107:                                             ; preds = %1072, %1063
  %1108 = phi i64 [ 0, %1063 ], [ %1104, %1072 ]
  %1109 = icmp eq i64 %1068, 0
  br i1 %1109, label %1125, label %1110

1110:                                             ; preds = %1107
  %1111 = getelementptr inbounds float, float* %756, i64 %1108
  %1112 = bitcast float* %1111 to <4 x float>*
  %1113 = load <4 x float>, <4 x float>* %1112, align 16
  %1114 = getelementptr inbounds float, float* %1111, i64 4
  %1115 = bitcast float* %1114 to <4 x float>*
  %1116 = load <4 x float>, <4 x float>* %1115, align 16
  %1117 = fadd <4 x float> %1113, <float -2.500000e-01, float -2.500000e-01, float -2.500000e-01, float -2.500000e-01>
  %1118 = fadd <4 x float> %1116, <float -2.500000e-01, float -2.500000e-01, float -2.500000e-01, float -2.500000e-01>
  %1119 = fcmp olt <4 x float> %1117, zeroinitializer
  %1120 = fcmp olt <4 x float> %1118, zeroinitializer
  %1121 = select <4 x i1> %1119, <4 x float> zeroinitializer, <4 x float> %1117
  %1122 = select <4 x i1> %1120, <4 x float> zeroinitializer, <4 x float> %1118
  %1123 = bitcast float* %1111 to <4 x float>*
  store <4 x float> %1121, <4 x float>* %1123, align 16
  %1124 = bitcast float* %1114 to <4 x float>*
  store <4 x float> %1122, <4 x float>* %1124, align 16
  br label %1125

1125:                                             ; preds = %1107, %1110
  %1126 = icmp eq i64 %1064, %774
  br i1 %1126, label %1138, label %1061

1127:                                             ; preds = %1056
  %1128 = shl nuw nsw i64 %842, 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %757, i8 0, i64 %1128, i1 false)
  br label %1138

1129:                                             ; preds = %1061, %1129
  %1130 = phi i64 [ %1136, %1129 ], [ %1062, %1061 ]
  %1131 = getelementptr inbounds float, float* %756, i64 %1130
  %1132 = load float, float* %1131, align 4
  %1133 = fadd float %1132, -2.500000e-01
  %1134 = fcmp olt float %1133, 0.000000e+00
  %1135 = select i1 %1134, float 0.000000e+00, float %1133
  store float %1135, float* %1131, align 4
  %1136 = add nuw nsw i64 %1130, 1
  %1137 = icmp ult i64 %1136, %842
  br i1 %1137, label %1129, label %1138, !llvm.loop !17

1138:                                             ; preds = %1129, %1125, %1127, %1053
  %1139 = phi float [ 0.000000e+00, %1127 ], [ %853, %1053 ], [ %1057, %1125 ], [ %1057, %1129 ]
  %1140 = phi float [ 0.000000e+00, %1127 ], [ %854, %1053 ], [ %854, %1125 ], [ %854, %1129 ]
  %1141 = fadd float %1139, 0x3FC99999A0000000
  %1142 = fmul float %1140, 6.400000e+01
  br label %1143

1143:                                             ; preds = %760, %1138, %755
  %1144 = phi float [ 0.000000e+00, %760 ], [ %1141, %1138 ], [ 0.000000e+00, %755 ]
  %1145 = phi float [ 0.000000e+00, %760 ], [ %1142, %1138 ], [ 0.000000e+00, %755 ]
  %1146 = load i32, i32* %474, align 4
  %1147 = icmp eq i32 %1146, 0
  br i1 %1147, label %1148, label %1271

1148:                                             ; preds = %1143
  %1149 = sitofp i32 %59 to float
  %1150 = fmul float %1149, 5.000000e-01
  %1151 = select i1 %592, float %1150, float 0.000000e+00
  %1152 = icmp sgt i32 %43, %41
  br i1 %1152, label %1153, label %1257

1153:                                             ; preds = %1148
  %1154 = icmp eq i32 %23, 2
  %1155 = sext i32 %41 to i64
  br i1 %1154, label %1176, label %1156

1156:                                             ; preds = %1153
  %1157 = sub nsw i64 %758, %1155
  %1158 = xor i64 %1155, -1
  %1159 = and i64 %1157, 1
  %1160 = icmp eq i64 %1159, 0
  br i1 %1160, label %1169, label %1161

1161:                                             ; preds = %1156
  %1162 = getelementptr inbounds float, float* %590, i64 %1155
  %1163 = load float, float* %1162, align 4
  %1164 = fsub float %1163, %1151
  %1165 = fcmp olt float %1164, -1.100000e+01
  %1166 = select i1 %1165, float -1.100000e+01, float %1164
  %1167 = fadd float %1166, 0.000000e+00
  %1168 = add nsw i64 %1155, 1
  br label %1169

1169:                                             ; preds = %1156, %1161
  %1170 = phi float [ undef, %1156 ], [ %1167, %1161 ]
  %1171 = phi i64 [ %1155, %1156 ], [ %1168, %1161 ]
  %1172 = phi float [ 0.000000e+00, %1156 ], [ %1167, %1161 ]
  %1173 = phi float [ -1.000000e+01, %1156 ], [ %1166, %1161 ]
  %1174 = sub nsw i64 0, %758
  %1175 = icmp eq i64 %1158, %1174
  br i1 %1175, label %1257, label %1236

1176:                                             ; preds = %1153
  %1177 = sext i32 %35 to i64
  %1178 = sub nsw i64 %758, %1155
  %1179 = xor i64 %1155, -1
  %1180 = and i64 %1178, 1
  %1181 = icmp eq i64 %1180, 0
  br i1 %1181, label %1196, label %1182

1182:                                             ; preds = %1176
  %1183 = getelementptr inbounds float, float* %590, i64 %1155
  %1184 = load float, float* %1183, align 4
  %1185 = fsub float %1184, %1151
  %1186 = fcmp olt float %1185, -1.100000e+01
  %1187 = select i1 %1186, float -1.100000e+01, float %1185
  %1188 = add nsw i64 %1155, %1177
  %1189 = getelementptr inbounds float, float* %590, i64 %1188
  %1190 = load float, float* %1189, align 4
  %1191 = fsub float %1190, %1151
  %1192 = fcmp ogt float %1187, %1191
  %1193 = select i1 %1192, float %1187, float %1191
  %1194 = fadd float %1193, 0.000000e+00
  %1195 = add nsw i64 %1155, 1
  br label %1196

1196:                                             ; preds = %1176, %1182
  %1197 = phi float [ undef, %1176 ], [ %1194, %1182 ]
  %1198 = phi i64 [ %1155, %1176 ], [ %1195, %1182 ]
  %1199 = phi float [ 0.000000e+00, %1176 ], [ %1194, %1182 ]
  %1200 = phi float [ -1.000000e+01, %1176 ], [ %1193, %1182 ]
  %1201 = sub nsw i64 0, %758
  %1202 = icmp eq i64 %1179, %1201
  br i1 %1202, label %1257, label %1203

1203:                                             ; preds = %1196, %1203
  %1204 = phi i64 [ %1234, %1203 ], [ %1198, %1196 ]
  %1205 = phi float [ %1233, %1203 ], [ %1199, %1196 ]
  %1206 = phi float [ %1232, %1203 ], [ %1200, %1196 ]
  %1207 = fadd float %1206, -1.000000e+00
  %1208 = getelementptr inbounds float, float* %590, i64 %1204
  %1209 = load float, float* %1208, align 4
  %1210 = fsub float %1209, %1151
  %1211 = fcmp ogt float %1207, %1210
  %1212 = select i1 %1211, float %1207, float %1210
  %1213 = add nsw i64 %1204, %1177
  %1214 = getelementptr inbounds float, float* %590, i64 %1213
  %1215 = load float, float* %1214, align 4
  %1216 = fsub float %1215, %1151
  %1217 = fcmp ogt float %1212, %1216
  %1218 = select i1 %1217, float %1212, float %1216
  %1219 = fadd float %1205, %1218
  %1220 = add nsw i64 %1204, 1
  %1221 = fadd float %1218, -1.000000e+00
  %1222 = getelementptr inbounds float, float* %590, i64 %1220
  %1223 = load float, float* %1222, align 4
  %1224 = fsub float %1223, %1151
  %1225 = fcmp ogt float %1221, %1224
  %1226 = select i1 %1225, float %1221, float %1224
  %1227 = add nsw i64 %1220, %1177
  %1228 = getelementptr inbounds float, float* %590, i64 %1227
  %1229 = load float, float* %1228, align 4
  %1230 = fsub float %1229, %1151
  %1231 = fcmp ogt float %1226, %1230
  %1232 = select i1 %1231, float %1226, float %1230
  %1233 = fadd float %1219, %1232
  %1234 = add nsw i64 %1204, 2
  %1235 = icmp eq i64 %1234, %758
  br i1 %1235, label %1257, label %1203

1236:                                             ; preds = %1169, %1236
  %1237 = phi i64 [ %1255, %1236 ], [ %1171, %1169 ]
  %1238 = phi float [ %1254, %1236 ], [ %1172, %1169 ]
  %1239 = phi float [ %1253, %1236 ], [ %1173, %1169 ]
  %1240 = fadd float %1239, -1.000000e+00
  %1241 = getelementptr inbounds float, float* %590, i64 %1237
  %1242 = load float, float* %1241, align 4
  %1243 = fsub float %1242, %1151
  %1244 = fcmp ogt float %1240, %1243
  %1245 = select i1 %1244, float %1240, float %1243
  %1246 = fadd float %1238, %1245
  %1247 = add nsw i64 %1237, 1
  %1248 = fadd float %1245, -1.000000e+00
  %1249 = getelementptr inbounds float, float* %590, i64 %1247
  %1250 = load float, float* %1249, align 4
  %1251 = fsub float %1250, %1151
  %1252 = fcmp ogt float %1248, %1251
  %1253 = select i1 %1252, float %1248, float %1251
  %1254 = fadd float %1246, %1253
  %1255 = add nsw i64 %1237, 2
  %1256 = icmp eq i64 %1255, %758
  br i1 %1256, label %1257, label %1236

1257:                                             ; preds = %1169, %1236, %1196, %1203, %1148
  %1258 = phi float [ 0.000000e+00, %1148 ], [ %1197, %1196 ], [ %1233, %1203 ], [ %1170, %1169 ], [ %1254, %1236 ]
  %1259 = sub nsw i32 %43, %41
  %1260 = sitofp i32 %1259 to float
  %1261 = fdiv float %1258, %1260
  %1262 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 42
  %1263 = load float, float* %1262, align 8
  %1264 = fsub float %1261, %1263
  %1265 = fcmp olt float %1264, -1.500000e+00
  %1266 = select i1 %1265, float -1.500000e+00, float %1264
  %1267 = fcmp ogt float %1266, 3.000000e+00
  %1268 = select i1 %1267, float 3.000000e+00, float %1266
  %1269 = fmul float %1268, 0x3F947AE140000000
  %1270 = fadd float %1263, %1269
  store float %1270, float* %1262, align 8
  br label %1271

1271:                                             ; preds = %764, %1143, %1257
  %1272 = phi float [ %1145, %1143 ], [ %1145, %1257 ], [ 0.000000e+00, %764 ]
  %1273 = phi float [ %1144, %1143 ], [ %1144, %1257 ], [ 0.000000e+00, %764 ]
  %1274 = phi i32 [ %1146, %1143 ], [ 0, %1257 ], [ %765, %764 ]
  %1275 = phi float [ 0.000000e+00, %1143 ], [ %1268, %1257 ], [ 0.000000e+00, %764 ]
  br i1 %689, label %1277, label %1276

1276:                                             ; preds = %1271
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %684, i8* nonnull align 16 %591, i64 %686, i1 false)
  br label %1277

1277:                                             ; preds = %1276, %1271
  br i1 %564, label %1278, label %1588

1278:                                             ; preds = %1277
  %1279 = getelementptr %struct.ec_ctx, %struct.ec_ctx* %159, i64 0, i32 5
  %1280 = load i32, i32* %1279, align 8
  %1281 = getelementptr %struct.ec_ctx, %struct.ec_ctx* %159, i64 0, i32 7
  %1282 = load i32, i32* %1281, align 8
  %1283 = call i32 @llvm.ctlz.i32(i32 %1282, i1 true) #5, !range !4
  %1284 = or i32 %1283, -32
  %1285 = add i32 %1280, 3
  %1286 = add i32 %1285, %1284
  %1287 = icmp sgt i32 %1286, %448
  %1288 = icmp ne i32 %580, 0
  %1289 = or i1 %1288, %1287
  br i1 %1289, label %1582, label %1290

1290:                                             ; preds = %1278
  %1291 = load i32, i32* %545, align 4
  %1292 = icmp sgt i32 %1291, 4
  %1293 = or i32 %1274, %41
  %1294 = icmp eq i32 %1293, 0
  %1295 = and i1 %1294, %1292
  br i1 %1295, label %1296, label %1582

1296:                                             ; preds = %1290
  %1297 = bitcast [26 x float]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %1297) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1297, i8 -1, i64 104, i1 false) #5
  %1298 = load float, float* %73, align 4
  br i1 %696, label %1299, label %1329

1299:                                             ; preds = %1296
  %1300 = getelementptr inbounds [26 x float], [26 x float]* %8, i64 0, i64 0
  store float %1298, float* %1300, align 16
  %1301 = icmp sgt i32 %43, 1
  br i1 %1301, label %1302, label %1401

1302:                                             ; preds = %1299
  %1303 = zext i32 %43 to i64
  %1304 = add nsw i64 %1303, -1
  %1305 = and i64 %1304, 1
  %1306 = icmp eq i32 %43, 2
  br i1 %1306, label %1374, label %1307

1307:                                             ; preds = %1302
  %1308 = sub nsw i64 %1304, %1305
  br label %1309

1309:                                             ; preds = %1309, %1307
  %1310 = phi float [ %1298, %1307 ], [ %1324, %1309 ]
  %1311 = phi i64 [ 1, %1307 ], [ %1326, %1309 ]
  %1312 = phi i64 [ %1308, %1307 ], [ %1327, %1309 ]
  %1313 = fadd float %1310, -1.000000e+00
  %1314 = getelementptr inbounds float, float* %73, i64 %1311
  %1315 = load float, float* %1314, align 4
  %1316 = fcmp ogt float %1313, %1315
  %1317 = select i1 %1316, float %1313, float %1315
  %1318 = getelementptr inbounds [26 x float], [26 x float]* %8, i64 0, i64 %1311
  store float %1317, float* %1318, align 4
  %1319 = add nuw nsw i64 %1311, 1
  %1320 = fadd float %1317, -1.000000e+00
  %1321 = getelementptr inbounds float, float* %73, i64 %1319
  %1322 = load float, float* %1321, align 4
  %1323 = fcmp ogt float %1320, %1322
  %1324 = select i1 %1323, float %1320, float %1322
  %1325 = getelementptr inbounds [26 x float], [26 x float]* %8, i64 0, i64 %1319
  store float %1324, float* %1325, align 4
  %1326 = add nuw nsw i64 %1311, 2
  %1327 = add i64 %1312, -2
  %1328 = icmp eq i64 %1327, 0
  br i1 %1328, label %1374, label %1309

1329:                                             ; preds = %1296
  %1330 = sext i32 %35 to i64
  %1331 = getelementptr inbounds float, float* %73, i64 %1330
  %1332 = load float, float* %1331, align 4
  %1333 = fcmp ogt float %1298, %1332
  %1334 = select i1 %1333, float %1298, float %1332
  %1335 = getelementptr inbounds [26 x float], [26 x float]* %8, i64 0, i64 0
  store float %1334, float* %1335, align 16
  %1336 = icmp sgt i32 %43, 1
  br i1 %1336, label %1337, label %1401

1337:                                             ; preds = %1329
  %1338 = zext i32 %43 to i64
  %1339 = add nsw i64 %1338, -1
  %1340 = and i64 %1339, 1
  %1341 = icmp eq i32 %43, 2
  br i1 %1341, label %1385, label %1342

1342:                                             ; preds = %1337
  %1343 = sub nsw i64 %1339, %1340
  br label %1344

1344:                                             ; preds = %1344, %1342
  %1345 = phi float [ %1334, %1342 ], [ %1369, %1344 ]
  %1346 = phi i64 [ 1, %1342 ], [ %1371, %1344 ]
  %1347 = phi i64 [ %1343, %1342 ], [ %1372, %1344 ]
  %1348 = fadd float %1345, -1.000000e+00
  %1349 = getelementptr inbounds float, float* %73, i64 %1346
  %1350 = load float, float* %1349, align 4
  %1351 = add nsw i64 %1346, %1330
  %1352 = getelementptr inbounds float, float* %73, i64 %1351
  %1353 = load float, float* %1352, align 4
  %1354 = fcmp ogt float %1350, %1353
  %1355 = select i1 %1354, float %1350, float %1353
  %1356 = fcmp ogt float %1348, %1355
  %1357 = select i1 %1356, float %1348, float %1355
  %1358 = getelementptr inbounds [26 x float], [26 x float]* %8, i64 0, i64 %1346
  store float %1357, float* %1358, align 4
  %1359 = add nuw nsw i64 %1346, 1
  %1360 = fadd float %1357, -1.000000e+00
  %1361 = getelementptr inbounds float, float* %73, i64 %1359
  %1362 = load float, float* %1361, align 4
  %1363 = add nsw i64 %1359, %1330
  %1364 = getelementptr inbounds float, float* %73, i64 %1363
  %1365 = load float, float* %1364, align 4
  %1366 = fcmp ogt float %1362, %1365
  %1367 = select i1 %1366, float %1362, float %1365
  %1368 = fcmp ogt float %1360, %1367
  %1369 = select i1 %1368, float %1360, float %1367
  %1370 = getelementptr inbounds [26 x float], [26 x float]* %8, i64 0, i64 %1359
  store float %1369, float* %1370, align 4
  %1371 = add nuw nsw i64 %1346, 2
  %1372 = add i64 %1347, -2
  %1373 = icmp eq i64 %1372, 0
  br i1 %1373, label %1385, label %1344

1374:                                             ; preds = %1309, %1302
  %1375 = phi float [ %1298, %1302 ], [ %1324, %1309 ]
  %1376 = phi i64 [ 1, %1302 ], [ %1326, %1309 ]
  %1377 = icmp eq i64 %1305, 0
  br i1 %1377, label %1401, label %1378

1378:                                             ; preds = %1374
  %1379 = fadd float %1375, -1.000000e+00
  %1380 = getelementptr inbounds float, float* %73, i64 %1376
  %1381 = load float, float* %1380, align 4
  %1382 = fcmp ogt float %1379, %1381
  %1383 = select i1 %1382, float %1379, float %1381
  %1384 = getelementptr inbounds [26 x float], [26 x float]* %8, i64 0, i64 %1376
  store float %1383, float* %1384, align 4
  br label %1401

1385:                                             ; preds = %1344, %1337
  %1386 = phi float [ %1334, %1337 ], [ %1369, %1344 ]
  %1387 = phi i64 [ 1, %1337 ], [ %1371, %1344 ]
  %1388 = icmp eq i64 %1340, 0
  br i1 %1388, label %1401, label %1389

1389:                                             ; preds = %1385
  %1390 = fadd float %1386, -1.000000e+00
  %1391 = getelementptr inbounds float, float* %73, i64 %1387
  %1392 = load float, float* %1391, align 4
  %1393 = add nsw i64 %1387, %1330
  %1394 = getelementptr inbounds float, float* %73, i64 %1393
  %1395 = load float, float* %1394, align 4
  %1396 = fcmp ogt float %1392, %1395
  %1397 = select i1 %1396, float %1392, float %1395
  %1398 = fcmp ogt float %1390, %1397
  %1399 = select i1 %1398, float %1390, float %1397
  %1400 = getelementptr inbounds [26 x float], [26 x float]* %8, i64 0, i64 %1387
  store float %1399, float* %1400, align 4
  br label %1401

1401:                                             ; preds = %1389, %1385, %1378, %1374, %1329, %1299
  %1402 = add i32 %43, -2
  %1403 = icmp sgt i32 %1402, -1
  br i1 %1403, label %1404, label %1490

1404:                                             ; preds = %1401
  %1405 = sext i32 %1402 to i64
  br label %1478

1406:                                             ; preds = %1478
  %1407 = add i32 %43, -1
  %1408 = icmp sgt i32 %1407, 2
  br i1 %1408, label %1409, label %1490

1409:                                             ; preds = %1406
  %1410 = sext i32 %23 to i64
  %1411 = sext i32 %35 to i64
  %1412 = zext i32 %1407 to i64
  %1413 = add nsw i64 %1412, -2
  %1414 = and i64 %1413, 1
  %1415 = icmp eq i32 %1407, 3
  %1416 = sub nsw i64 %1413, %1414
  %1417 = icmp eq i64 %1414, 0
  br label %1418

1418:                                             ; preds = %1474, %1409
  %1419 = phi i64 [ 0, %1409 ], [ %1476, %1474 ]
  %1420 = phi float [ 0.000000e+00, %1409 ], [ %1475, %1474 ]
  %1421 = mul nsw i64 %1419, %1411
  br i1 %1415, label %1456, label %1422

1422:                                             ; preds = %1418, %1422
  %1423 = phi i64 [ %1453, %1422 ], [ 2, %1418 ]
  %1424 = phi float [ %1452, %1422 ], [ %1420, %1418 ]
  %1425 = phi i64 [ %1454, %1422 ], [ %1416, %1418 ]
  %1426 = add nsw i64 %1423, %1421
  %1427 = getelementptr inbounds float, float* %590, i64 %1426
  %1428 = load float, float* %1427, align 4
  %1429 = fcmp olt float %1428, 0.000000e+00
  %1430 = select i1 %1429, float 0.000000e+00, float %1428
  %1431 = getelementptr inbounds [26 x float], [26 x float]* %8, i64 0, i64 %1423
  %1432 = load float, float* %1431, align 8
  %1433 = fcmp olt float %1432, 0.000000e+00
  %1434 = select i1 %1433, float 0.000000e+00, float %1432
  %1435 = fsub float %1430, %1434
  %1436 = fcmp olt float %1435, 0.000000e+00
  %1437 = select i1 %1436, float 0.000000e+00, float %1435
  %1438 = fadd float %1424, %1437
  %1439 = or i64 %1423, 1
  %1440 = add nsw i64 %1439, %1421
  %1441 = getelementptr inbounds float, float* %590, i64 %1440
  %1442 = load float, float* %1441, align 4
  %1443 = fcmp olt float %1442, 0.000000e+00
  %1444 = select i1 %1443, float 0.000000e+00, float %1442
  %1445 = getelementptr inbounds [26 x float], [26 x float]* %8, i64 0, i64 %1439
  %1446 = load float, float* %1445, align 4
  %1447 = fcmp olt float %1446, 0.000000e+00
  %1448 = select i1 %1447, float 0.000000e+00, float %1446
  %1449 = fsub float %1444, %1448
  %1450 = fcmp olt float %1449, 0.000000e+00
  %1451 = select i1 %1450, float 0.000000e+00, float %1449
  %1452 = fadd float %1438, %1451
  %1453 = add nuw nsw i64 %1423, 2
  %1454 = add i64 %1425, -2
  %1455 = icmp eq i64 %1454, 0
  br i1 %1455, label %1456, label %1422

1456:                                             ; preds = %1422, %1418
  %1457 = phi float [ undef, %1418 ], [ %1452, %1422 ]
  %1458 = phi i64 [ 2, %1418 ], [ %1453, %1422 ]
  %1459 = phi float [ %1420, %1418 ], [ %1452, %1422 ]
  br i1 %1417, label %1474, label %1460

1460:                                             ; preds = %1456
  %1461 = add nsw i64 %1458, %1421
  %1462 = getelementptr inbounds float, float* %590, i64 %1461
  %1463 = load float, float* %1462, align 4
  %1464 = fcmp olt float %1463, 0.000000e+00
  %1465 = select i1 %1464, float 0.000000e+00, float %1463
  %1466 = getelementptr inbounds [26 x float], [26 x float]* %8, i64 0, i64 %1458
  %1467 = load float, float* %1466, align 4
  %1468 = fcmp olt float %1467, 0.000000e+00
  %1469 = select i1 %1468, float 0.000000e+00, float %1467
  %1470 = fsub float %1465, %1469
  %1471 = fcmp olt float %1470, 0.000000e+00
  %1472 = select i1 %1471, float 0.000000e+00, float %1470
  %1473 = fadd float %1459, %1472
  br label %1474

1474:                                             ; preds = %1456, %1460
  %1475 = phi float [ %1457, %1456 ], [ %1473, %1460 ]
  %1476 = add nuw nsw i64 %1419, 1
  %1477 = icmp slt i64 %1476, %1410
  br i1 %1477, label %1418, label %1490

1478:                                             ; preds = %1478, %1404
  %1479 = phi i64 [ %1405, %1404 ], [ %1488, %1478 ]
  %1480 = getelementptr inbounds [26 x float], [26 x float]* %8, i64 0, i64 %1479
  %1481 = load float, float* %1480, align 4
  %1482 = add nuw nsw i64 %1479, 1
  %1483 = getelementptr inbounds [26 x float], [26 x float]* %8, i64 0, i64 %1482
  %1484 = load float, float* %1483, align 4
  %1485 = fadd float %1484, -1.000000e+00
  %1486 = fcmp ogt float %1481, %1485
  %1487 = select i1 %1486, float %1481, float %1485
  store float %1487, float* %1480, align 4
  %1488 = add nsw i64 %1479, -1
  %1489 = icmp sgt i64 %1479, 0
  br i1 %1489, label %1478, label %1406

1490:                                             ; preds = %1474, %1401, %1406
  %1491 = phi float [ 0.000000e+00, %1406 ], [ 0.000000e+00, %1401 ], [ %1475, %1474 ]
  %1492 = add nsw i32 %43, -3
  %1493 = mul nsw i32 %1492, %23
  %1494 = sitofp i32 %1493 to float
  %1495 = fdiv float %1491, %1494
  %1496 = fcmp ule float %1495, 1.000000e+00
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %1297) #5
  br i1 %1496, label %1573, label %1497

1497:                                             ; preds = %1490
  %1498 = load i32, i32* %49, align 8
  %1499 = load i32, i32* %691, align 4
  call fastcc void @compute_mdcts(%struct.OpusCustomMode* %33, i32 %66, float* nonnull %190, float* nonnull %585, i32 %23, i32 %21, i32 %59, i32 %1498, i32 %1499)
  %1500 = load i32, i32* %691, align 4
  call void @compute_band_energies(%struct.OpusCustomMode* %33, float* nonnull %585, float* nonnull %588, i32 %185, i32 %23, i32 %59, i32 %1500) #5
  call void @amp2Log2(%struct.OpusCustomMode* %33, i32 %185, i32 %43, float* nonnull %588, float* nonnull %590, i32 %23) #5
  %1501 = icmp sgt i32 %688, 0
  br i1 %1501, label %1502, label %1572

1502:                                             ; preds = %1497
  %1503 = sitofp i32 %59 to float
  %1504 = fmul float %1503, 5.000000e-01
  %1505 = zext i32 %688 to i64
  %1506 = icmp ult i32 %688, 8
  br i1 %1506, label %1563, label %1507

1507:                                             ; preds = %1502
  %1508 = and i64 %1505, 4294967288
  %1509 = insertelement <4 x float> undef, float %1504, i32 0
  %1510 = shufflevector <4 x float> %1509, <4 x float> undef, <4 x i32> zeroinitializer
  %1511 = insertelement <4 x float> undef, float %1504, i32 0
  %1512 = shufflevector <4 x float> %1511, <4 x float> undef, <4 x i32> zeroinitializer
  %1513 = add nsw i64 %1508, -8
  %1514 = lshr exact i64 %1513, 3
  %1515 = add nuw nsw i64 %1514, 1
  %1516 = and i64 %1515, 1
  %1517 = icmp eq i64 %1513, 0
  br i1 %1517, label %1547, label %1518

1518:                                             ; preds = %1507
  %1519 = sub nuw nsw i64 %1515, %1516
  br label %1520

1520:                                             ; preds = %1520, %1518
  %1521 = phi i64 [ 0, %1518 ], [ %1544, %1520 ]
  %1522 = phi i64 [ %1519, %1518 ], [ %1545, %1520 ]
  %1523 = getelementptr inbounds float, float* %685, i64 %1521
  %1524 = bitcast float* %1523 to <4 x float>*
  %1525 = load <4 x float>, <4 x float>* %1524, align 16
  %1526 = getelementptr inbounds float, float* %1523, i64 4
  %1527 = bitcast float* %1526 to <4 x float>*
  %1528 = load <4 x float>, <4 x float>* %1527, align 16
  %1529 = fadd <4 x float> %1510, %1525
  %1530 = fadd <4 x float> %1512, %1528
  %1531 = bitcast float* %1523 to <4 x float>*
  store <4 x float> %1529, <4 x float>* %1531, align 16
  %1532 = bitcast float* %1526 to <4 x float>*
  store <4 x float> %1530, <4 x float>* %1532, align 16
  %1533 = or i64 %1521, 8
  %1534 = getelementptr inbounds float, float* %685, i64 %1533
  %1535 = bitcast float* %1534 to <4 x float>*
  %1536 = load <4 x float>, <4 x float>* %1535, align 16
  %1537 = getelementptr inbounds float, float* %1534, i64 4
  %1538 = bitcast float* %1537 to <4 x float>*
  %1539 = load <4 x float>, <4 x float>* %1538, align 16
  %1540 = fadd <4 x float> %1510, %1536
  %1541 = fadd <4 x float> %1512, %1539
  %1542 = bitcast float* %1534 to <4 x float>*
  store <4 x float> %1540, <4 x float>* %1542, align 16
  %1543 = bitcast float* %1537 to <4 x float>*
  store <4 x float> %1541, <4 x float>* %1543, align 16
  %1544 = add i64 %1521, 16
  %1545 = add i64 %1522, -2
  %1546 = icmp eq i64 %1545, 0
  br i1 %1546, label %1547, label %1520, !llvm.loop !18

1547:                                             ; preds = %1520, %1507
  %1548 = phi i64 [ 0, %1507 ], [ %1544, %1520 ]
  %1549 = icmp eq i64 %1516, 0
  br i1 %1549, label %1561, label %1550

1550:                                             ; preds = %1547
  %1551 = getelementptr inbounds float, float* %685, i64 %1548
  %1552 = bitcast float* %1551 to <4 x float>*
  %1553 = load <4 x float>, <4 x float>* %1552, align 16
  %1554 = getelementptr inbounds float, float* %1551, i64 4
  %1555 = bitcast float* %1554 to <4 x float>*
  %1556 = load <4 x float>, <4 x float>* %1555, align 16
  %1557 = fadd <4 x float> %1510, %1553
  %1558 = fadd <4 x float> %1512, %1556
  %1559 = bitcast float* %1551 to <4 x float>*
  store <4 x float> %1557, <4 x float>* %1559, align 16
  %1560 = bitcast float* %1554 to <4 x float>*
  store <4 x float> %1558, <4 x float>* %1560, align 16
  br label %1561

1561:                                             ; preds = %1547, %1550
  %1562 = icmp eq i64 %1508, %1505
  br i1 %1562, label %1572, label %1563

1563:                                             ; preds = %1561, %1502
  %1564 = phi i64 [ 0, %1502 ], [ %1508, %1561 ]
  br label %1565

1565:                                             ; preds = %1563, %1565
  %1566 = phi i64 [ %1570, %1565 ], [ %1564, %1563 ]
  %1567 = getelementptr inbounds float, float* %685, i64 %1566
  %1568 = load float, float* %1567, align 4
  %1569 = fadd float %1504, %1568
  store float %1569, float* %1567, align 4
  %1570 = add nuw nsw i64 %1566, 1
  %1571 = icmp eq i64 %1570, %1505
  br i1 %1571, label %1572, label %1565, !llvm.loop !19

1572:                                             ; preds = %1565, %1561, %1497
  store float 0x3FC99999A0000000, float* %15, align 4
  br label %1573

1573:                                             ; preds = %1572, %1490
  %1574 = phi i32 [ %66, %1572 ], [ %579, %1490 ]
  %1575 = phi i32 [ 1, %1572 ], [ 0, %1490 ]
  %1576 = load i32, i32* %1279, align 8
  %1577 = load i32, i32* %1281, align 8
  %1578 = call i32 @llvm.ctlz.i32(i32 %1577, i1 true) #5, !range !4
  %1579 = or i32 %1578, -32
  %1580 = add i32 %1576, 3
  %1581 = add i32 %1580, %1579
  br label %1582

1582:                                             ; preds = %1573, %1290, %1278
  %1583 = phi i32 [ %1581, %1573 ], [ %1286, %1290 ], [ %1286, %1278 ]
  %1584 = phi i32 [ %1575, %1573 ], [ 0, %1290 ], [ %580, %1278 ]
  %1585 = phi i32 [ %1574, %1573 ], [ %579, %1290 ], [ %579, %1278 ]
  %1586 = icmp sgt i32 %1583, %448
  br i1 %1586, label %1588, label %1587

1587:                                             ; preds = %1582
  call void @ec_enc_bit_logp(%struct.ec_ctx* %159, i32 %1584, i32 3) #5
  br label %1588

1588:                                             ; preds = %1277, %1582, %1587
  %1589 = phi i32 [ %1584, %1582 ], [ %1584, %1587 ], [ %580, %1277 ]
  %1590 = phi i32 [ %1585, %1582 ], [ %1585, %1587 ], [ %579, %1277 ]
  %1591 = mul nsw i32 %51, %23
  %1592 = sext i32 %1591 to i64
  %1593 = shl nsw i64 %1592, 2
  %1594 = alloca float, i64 %1592, align 16
  %1595 = bitcast float* %1594 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1595, i8 -86, i64 %1593, i1 false)
  call void @normalise_bands(%struct.OpusCustomMode* %33, float* nonnull %585, float* nonnull %1594, float* nonnull %588, i32 %185, i32 %23, i32 %66) #5
  %1596 = mul nsw i32 %23, 15
  %1597 = icmp slt i32 %447, %1596
  %1598 = or i1 %44, %1597
  br i1 %1598, label %1605, label %1599

1599:                                             ; preds = %1588
  %1600 = load i32, i32* %545, align 4
  %1601 = icmp sgt i32 %1600, 1
  br i1 %1601, label %1602, label %1605

1602:                                             ; preds = %1599
  %1603 = load i32, i32* %474, align 4
  %1604 = icmp eq i32 %1603, 0
  br label %1605

1605:                                             ; preds = %1588, %1602, %1599
  %1606 = phi i1 [ false, %1599 ], [ false, %1588 ], [ %1604, %1602 ]
  %1607 = sext i32 %35 to i64
  %1608 = shl nsw i64 %1607, 2
  %1609 = alloca i32, i64 %1607, align 16
  %1610 = bitcast i32* %1609 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1610, i8 -86, i64 %1608, i1 false)
  %1611 = alloca i32, i64 %1607, align 16
  %1612 = bitcast i32* %1611 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1612, i8 -86, i64 %1608, i1 false)
  %1613 = alloca i32, i64 %1607, align 16
  %1614 = bitcast i32* %1613 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1614, i8 -86, i64 %1608, i1 false)
  %1615 = load i32, i32* %417, align 8
  %1616 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %33, i64 0, i32 11
  %1617 = load i16*, i16** %1616, align 8
  %1618 = load i32, i32* %103, align 8
  %1619 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 13
  %1620 = load i32, i32* %1619, align 8
  %1621 = load i32, i32* %474, align 4
  %1622 = call fastcc float @dynalloc_analysis(float* nonnull %590, float* nonnull %685, i32 %35, i32 %41, i32 %43, i32 %23, i32* nonnull %1609, i32 %1615, i16* %1617, i32 %1589, i32 %1618, i32 %1620, i16* %39, i32 %59, i32 %447, i32* nonnull %16, i32 %1621, float* nonnull %756, %struct.AnalysisInfo* %498, i32* nonnull %1611, i32* nonnull %1613)
  %1623 = alloca i32, i64 %1607, align 16
  %1624 = bitcast i32* %1623 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1624, i8 -86, i64 %1608, i1 false)
  br i1 %1606, label %1625, label %1644

1625:                                             ; preds = %1605
  %1626 = sdiv i32 20480, %447
  %1627 = icmp sgt i32 %1626, 78
  %1628 = select i1 %1627, i32 %1626, i32 78
  %1629 = add nuw nsw i32 %1628, 2
  %1630 = load float, float* %15, align 4
  %1631 = load i32, i32* %14, align 4
  %1632 = call fastcc i32 @tf_analysis(%struct.OpusCustomMode* %33, i32 %185, i32 %1589, i32* nonnull %1623, i32 %1629, float* nonnull %1594, i32 %51, i32 %59, float %1630, i32 %1631, i32* nonnull %1611)
  br i1 %184, label %1633, label %1826

1633:                                             ; preds = %1625
  %1634 = add nsw i32 %185, -1
  %1635 = sext i32 %1634 to i64
  %1636 = getelementptr inbounds i32, i32* %1623, i64 %1635
  %1637 = sext i32 %185 to i64
  br label %1638

1638:                                             ; preds = %1633, %1638
  %1639 = phi i64 [ %1637, %1633 ], [ %1642, %1638 ]
  %1640 = load i32, i32* %1636, align 4
  %1641 = getelementptr inbounds i32, i32* %1623, i64 %1639
  store i32 %1640, i32* %1641, align 4
  %1642 = add nsw i64 %1639, 1
  %1643 = icmp slt i64 %1642, %758
  br i1 %1643, label %1638, label %1826

1644:                                             ; preds = %1605
  %1645 = load i32, i32* %17, align 4
  %1646 = icmp ne i32 %1645, 0
  %1647 = and i1 %44, %1646
  br i1 %1647, label %1648, label %1729

1648:                                             ; preds = %1644
  %1649 = icmp sgt i32 %43, 0
  br i1 %1649, label %1650, label %1826

1650:                                             ; preds = %1648
  %1651 = zext i32 %43 to i64
  %1652 = icmp ult i32 %43, 8
  br i1 %1652, label %1722, label %1653

1653:                                             ; preds = %1650
  %1654 = and i64 %1651, 4294967288
  %1655 = add nsw i64 %1654, -8
  %1656 = lshr exact i64 %1655, 3
  %1657 = add nuw nsw i64 %1656, 1
  %1658 = and i64 %1657, 7
  %1659 = icmp ult i64 %1655, 56
  br i1 %1659, label %1707, label %1660

1660:                                             ; preds = %1653
  %1661 = sub nsw i64 %1657, %1658
  br label %1662

1662:                                             ; preds = %1662, %1660
  %1663 = phi i64 [ 0, %1660 ], [ %1704, %1662 ]
  %1664 = phi i64 [ %1661, %1660 ], [ %1705, %1662 ]
  %1665 = getelementptr inbounds i32, i32* %1623, i64 %1663
  %1666 = bitcast i32* %1665 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %1666, align 16
  %1667 = getelementptr inbounds i32, i32* %1665, i64 4
  %1668 = bitcast i32* %1667 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %1668, align 16
  %1669 = or i64 %1663, 8
  %1670 = getelementptr inbounds i32, i32* %1623, i64 %1669
  %1671 = bitcast i32* %1670 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %1671, align 16
  %1672 = getelementptr inbounds i32, i32* %1670, i64 4
  %1673 = bitcast i32* %1672 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %1673, align 16
  %1674 = or i64 %1663, 16
  %1675 = getelementptr inbounds i32, i32* %1623, i64 %1674
  %1676 = bitcast i32* %1675 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %1676, align 16
  %1677 = getelementptr inbounds i32, i32* %1675, i64 4
  %1678 = bitcast i32* %1677 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %1678, align 16
  %1679 = or i64 %1663, 24
  %1680 = getelementptr inbounds i32, i32* %1623, i64 %1679
  %1681 = bitcast i32* %1680 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %1681, align 16
  %1682 = getelementptr inbounds i32, i32* %1680, i64 4
  %1683 = bitcast i32* %1682 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %1683, align 16
  %1684 = or i64 %1663, 32
  %1685 = getelementptr inbounds i32, i32* %1623, i64 %1684
  %1686 = bitcast i32* %1685 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %1686, align 16
  %1687 = getelementptr inbounds i32, i32* %1685, i64 4
  %1688 = bitcast i32* %1687 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %1688, align 16
  %1689 = or i64 %1663, 40
  %1690 = getelementptr inbounds i32, i32* %1623, i64 %1689
  %1691 = bitcast i32* %1690 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %1691, align 16
  %1692 = getelementptr inbounds i32, i32* %1690, i64 4
  %1693 = bitcast i32* %1692 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %1693, align 16
  %1694 = or i64 %1663, 48
  %1695 = getelementptr inbounds i32, i32* %1623, i64 %1694
  %1696 = bitcast i32* %1695 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %1696, align 16
  %1697 = getelementptr inbounds i32, i32* %1695, i64 4
  %1698 = bitcast i32* %1697 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %1698, align 16
  %1699 = or i64 %1663, 56
  %1700 = getelementptr inbounds i32, i32* %1623, i64 %1699
  %1701 = bitcast i32* %1700 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %1701, align 16
  %1702 = getelementptr inbounds i32, i32* %1700, i64 4
  %1703 = bitcast i32* %1702 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %1703, align 16
  %1704 = add i64 %1663, 64
  %1705 = add i64 %1664, -8
  %1706 = icmp eq i64 %1705, 0
  br i1 %1706, label %1707, label %1662, !llvm.loop !20

1707:                                             ; preds = %1662, %1653
  %1708 = phi i64 [ 0, %1653 ], [ %1704, %1662 ]
  %1709 = icmp eq i64 %1658, 0
  br i1 %1709, label %1720, label %1710

1710:                                             ; preds = %1707, %1710
  %1711 = phi i64 [ %1717, %1710 ], [ %1708, %1707 ]
  %1712 = phi i64 [ %1718, %1710 ], [ %1658, %1707 ]
  %1713 = getelementptr inbounds i32, i32* %1623, i64 %1711
  %1714 = bitcast i32* %1713 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %1714, align 16
  %1715 = getelementptr inbounds i32, i32* %1713, i64 4
  %1716 = bitcast i32* %1715 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %1716, align 16
  %1717 = add i64 %1711, 8
  %1718 = add i64 %1712, -1
  %1719 = icmp eq i64 %1718, 0
  br i1 %1719, label %1720, label %1710, !llvm.loop !21

1720:                                             ; preds = %1710, %1707
  %1721 = icmp eq i64 %1654, %1651
  br i1 %1721, label %1826, label %1722

1722:                                             ; preds = %1720, %1650
  %1723 = phi i64 [ 0, %1650 ], [ %1654, %1720 ]
  br label %1724

1724:                                             ; preds = %1722, %1724
  %1725 = phi i64 [ %1727, %1724 ], [ %1723, %1722 ]
  %1726 = getelementptr inbounds i32, i32* %1623, i64 %1725
  store i32 1, i32* %1726, align 4
  %1727 = add nuw nsw i64 %1725, 1
  %1728 = icmp eq i64 %1727, %1651
  br i1 %1728, label %1826, label %1724, !llvm.loop !22

1729:                                             ; preds = %1644
  %1730 = icmp slt i32 %447, 15
  %1731 = and i1 %44, %1730
  br i1 %1731, label %1732, label %1741

1732:                                             ; preds = %1729
  %1733 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 31, i32 0
  %1734 = load i32, i32* %1733, align 4
  %1735 = icmp eq i32 %1734, 2
  br i1 %1735, label %1741, label %1736

1736:                                             ; preds = %1732
  %1737 = icmp sgt i32 %43, 0
  br i1 %1737, label %1738, label %1826

1738:                                             ; preds = %1736
  %1739 = zext i32 %43 to i64
  %1740 = shl nuw nsw i64 %1739, 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1624, i8 0, i64 %1740, i1 false)
  br label %1826

1741:                                             ; preds = %1732, %1729
  %1742 = icmp sgt i32 %43, 0
  br i1 %1742, label %1743, label %1826

1743:                                             ; preds = %1741
  %1744 = zext i32 %43 to i64
  %1745 = icmp ult i32 %43, 8
  br i1 %1745, label %1819, label %1746

1746:                                             ; preds = %1743
  %1747 = and i64 %1744, 4294967288
  %1748 = insertelement <4 x i32> undef, i32 %1589, i32 0
  %1749 = shufflevector <4 x i32> %1748, <4 x i32> undef, <4 x i32> zeroinitializer
  %1750 = insertelement <4 x i32> undef, i32 %1589, i32 0
  %1751 = shufflevector <4 x i32> %1750, <4 x i32> undef, <4 x i32> zeroinitializer
  %1752 = add nsw i64 %1747, -8
  %1753 = lshr exact i64 %1752, 3
  %1754 = add nuw nsw i64 %1753, 1
  %1755 = and i64 %1754, 7
  %1756 = icmp ult i64 %1752, 56
  br i1 %1756, label %1804, label %1757

1757:                                             ; preds = %1746
  %1758 = sub nsw i64 %1754, %1755
  br label %1759

1759:                                             ; preds = %1759, %1757
  %1760 = phi i64 [ 0, %1757 ], [ %1801, %1759 ]
  %1761 = phi i64 [ %1758, %1757 ], [ %1802, %1759 ]
  %1762 = getelementptr inbounds i32, i32* %1623, i64 %1760
  %1763 = bitcast i32* %1762 to <4 x i32>*
  store <4 x i32> %1749, <4 x i32>* %1763, align 16
  %1764 = getelementptr inbounds i32, i32* %1762, i64 4
  %1765 = bitcast i32* %1764 to <4 x i32>*
  store <4 x i32> %1751, <4 x i32>* %1765, align 16
  %1766 = or i64 %1760, 8
  %1767 = getelementptr inbounds i32, i32* %1623, i64 %1766
  %1768 = bitcast i32* %1767 to <4 x i32>*
  store <4 x i32> %1749, <4 x i32>* %1768, align 16
  %1769 = getelementptr inbounds i32, i32* %1767, i64 4
  %1770 = bitcast i32* %1769 to <4 x i32>*
  store <4 x i32> %1751, <4 x i32>* %1770, align 16
  %1771 = or i64 %1760, 16
  %1772 = getelementptr inbounds i32, i32* %1623, i64 %1771
  %1773 = bitcast i32* %1772 to <4 x i32>*
  store <4 x i32> %1749, <4 x i32>* %1773, align 16
  %1774 = getelementptr inbounds i32, i32* %1772, i64 4
  %1775 = bitcast i32* %1774 to <4 x i32>*
  store <4 x i32> %1751, <4 x i32>* %1775, align 16
  %1776 = or i64 %1760, 24
  %1777 = getelementptr inbounds i32, i32* %1623, i64 %1776
  %1778 = bitcast i32* %1777 to <4 x i32>*
  store <4 x i32> %1749, <4 x i32>* %1778, align 16
  %1779 = getelementptr inbounds i32, i32* %1777, i64 4
  %1780 = bitcast i32* %1779 to <4 x i32>*
  store <4 x i32> %1751, <4 x i32>* %1780, align 16
  %1781 = or i64 %1760, 32
  %1782 = getelementptr inbounds i32, i32* %1623, i64 %1781
  %1783 = bitcast i32* %1782 to <4 x i32>*
  store <4 x i32> %1749, <4 x i32>* %1783, align 16
  %1784 = getelementptr inbounds i32, i32* %1782, i64 4
  %1785 = bitcast i32* %1784 to <4 x i32>*
  store <4 x i32> %1751, <4 x i32>* %1785, align 16
  %1786 = or i64 %1760, 40
  %1787 = getelementptr inbounds i32, i32* %1623, i64 %1786
  %1788 = bitcast i32* %1787 to <4 x i32>*
  store <4 x i32> %1749, <4 x i32>* %1788, align 16
  %1789 = getelementptr inbounds i32, i32* %1787, i64 4
  %1790 = bitcast i32* %1789 to <4 x i32>*
  store <4 x i32> %1751, <4 x i32>* %1790, align 16
  %1791 = or i64 %1760, 48
  %1792 = getelementptr inbounds i32, i32* %1623, i64 %1791
  %1793 = bitcast i32* %1792 to <4 x i32>*
  store <4 x i32> %1749, <4 x i32>* %1793, align 16
  %1794 = getelementptr inbounds i32, i32* %1792, i64 4
  %1795 = bitcast i32* %1794 to <4 x i32>*
  store <4 x i32> %1751, <4 x i32>* %1795, align 16
  %1796 = or i64 %1760, 56
  %1797 = getelementptr inbounds i32, i32* %1623, i64 %1796
  %1798 = bitcast i32* %1797 to <4 x i32>*
  store <4 x i32> %1749, <4 x i32>* %1798, align 16
  %1799 = getelementptr inbounds i32, i32* %1797, i64 4
  %1800 = bitcast i32* %1799 to <4 x i32>*
  store <4 x i32> %1751, <4 x i32>* %1800, align 16
  %1801 = add i64 %1760, 64
  %1802 = add i64 %1761, -8
  %1803 = icmp eq i64 %1802, 0
  br i1 %1803, label %1804, label %1759, !llvm.loop !23

1804:                                             ; preds = %1759, %1746
  %1805 = phi i64 [ 0, %1746 ], [ %1801, %1759 ]
  %1806 = icmp eq i64 %1755, 0
  br i1 %1806, label %1817, label %1807

1807:                                             ; preds = %1804, %1807
  %1808 = phi i64 [ %1814, %1807 ], [ %1805, %1804 ]
  %1809 = phi i64 [ %1815, %1807 ], [ %1755, %1804 ]
  %1810 = getelementptr inbounds i32, i32* %1623, i64 %1808
  %1811 = bitcast i32* %1810 to <4 x i32>*
  store <4 x i32> %1749, <4 x i32>* %1811, align 16
  %1812 = getelementptr inbounds i32, i32* %1810, i64 4
  %1813 = bitcast i32* %1812 to <4 x i32>*
  store <4 x i32> %1751, <4 x i32>* %1813, align 16
  %1814 = add i64 %1808, 8
  %1815 = add i64 %1809, -1
  %1816 = icmp eq i64 %1815, 0
  br i1 %1816, label %1817, label %1807, !llvm.loop !24

1817:                                             ; preds = %1807, %1804
  %1818 = icmp eq i64 %1747, %1744
  br i1 %1818, label %1826, label %1819

1819:                                             ; preds = %1817, %1743
  %1820 = phi i64 [ 0, %1743 ], [ %1747, %1817 ]
  br label %1821

1821:                                             ; preds = %1819, %1821
  %1822 = phi i64 [ %1824, %1821 ], [ %1820, %1819 ]
  %1823 = getelementptr inbounds i32, i32* %1623, i64 %1822
  store i32 %1589, i32* %1823, align 4
  %1824 = add nuw nsw i64 %1822, 1
  %1825 = icmp eq i64 %1824, %1744
  br i1 %1825, label %1826, label %1821, !llvm.loop !25

1826:                                             ; preds = %1821, %1724, %1638, %1817, %1720, %1738, %1736, %1741, %1648, %1625
  %1827 = phi i32 [ %1632, %1625 ], [ 0, %1648 ], [ 0, %1741 ], [ %1589, %1736 ], [ %1589, %1738 ], [ 0, %1720 ], [ 0, %1817 ], [ %1632, %1638 ], [ 0, %1724 ], [ 0, %1821 ]
  %1828 = alloca float, i64 %687, align 16
  %1829 = bitcast float* %1828 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1829, i8 -86, i64 %686, i1 false)
  %1830 = icmp sgt i32 %43, %41
  br i1 %1830, label %1831, label %1858

1831:                                             ; preds = %1826
  %1832 = sext i32 %41 to i64
  %1833 = sext i32 %23 to i64
  br label %1834

1834:                                             ; preds = %1831, %1855
  %1835 = phi i64 [ 0, %1831 ], [ %1856, %1855 ]
  %1836 = mul nsw i64 %1835, %1607
  br label %1837

1837:                                             ; preds = %1852, %1834
  %1838 = phi i64 [ %1832, %1834 ], [ %1853, %1852 ]
  %1839 = add nsw i64 %1838, %1836
  %1840 = getelementptr inbounds float, float* %590, i64 %1839
  %1841 = load float, float* %1840, align 4
  %1842 = getelementptr inbounds float, float* %73, i64 %1839
  %1843 = load float, float* %1842, align 4
  %1844 = fsub float %1841, %1843
  %1845 = call float @llvm.fabs.f32(float %1844)
  %1846 = fcmp olt float %1845, 2.000000e+00
  br i1 %1846, label %1847, label %1852

1847:                                             ; preds = %1837
  %1848 = getelementptr inbounds float, float* %78, i64 %1839
  %1849 = load float, float* %1848, align 4
  %1850 = fmul float %1849, 2.500000e-01
  %1851 = fsub float %1841, %1850
  store float %1851, float* %1840, align 4
  br label %1852

1852:                                             ; preds = %1847, %1837
  %1853 = add nsw i64 %1838, 1
  %1854 = icmp eq i64 %1853, %758
  br i1 %1854, label %1855, label %1837

1855:                                             ; preds = %1852
  %1856 = add nuw nsw i64 %1835, 1
  %1857 = icmp slt i64 %1856, %1833
  br i1 %1857, label %1834, label %1858

1858:                                             ; preds = %1855, %1826
  %1859 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 3
  %1860 = load i32, i32* %1859, align 8
  %1861 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 21
  %1862 = load i32, i32* %545, align 4
  %1863 = icmp sgt i32 %1862, 3
  %1864 = zext i1 %1863 to i32
  %1865 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 14
  %1866 = load i32, i32* %1865, align 4
  %1867 = load i32, i32* %474, align 4
  call void @quant_coarse_energy(%struct.OpusCustomMode* %33, i32 %41, i32 %43, i32 %185, float* nonnull %590, float* %73, i32 %448, float* nonnull %1828, %struct.ec_ctx* %159, i32 %23, i32 %59, i32 %446, i32 %1860, float* %1861, i32 %1864, i32 %1866, i32 %1867) #5
  %1868 = getelementptr inbounds %struct.ec_ctx, %struct.ec_ctx* %159, i64 0, i32 1
  %1869 = load i32, i32* %1868, align 8
  %1870 = shl i32 %1869, 3
  %1871 = getelementptr %struct.ec_ctx, %struct.ec_ctx* %159, i64 0, i32 5
  %1872 = load i32, i32* %1871, align 8
  %1873 = getelementptr %struct.ec_ctx, %struct.ec_ctx* %159, i64 0, i32 7
  %1874 = load i32, i32* %1873, align 8
  %1875 = call i32 @llvm.ctlz.i32(i32 %1874, i1 true) #5, !range !4
  %1876 = or i32 %1875, -32
  %1877 = add i32 %1876, %1872
  %1878 = icmp ne i32 %1589, 0
  %1879 = select i1 %1878, i32 2, i32 4
  %1880 = icmp eq i32 %59, 0
  br i1 %1880, label %1885, label %1881

1881:                                             ; preds = %1858
  %1882 = or i32 %1879, 1
  %1883 = add i32 %1877, %1882
  %1884 = icmp ule i32 %1883, %1870
  br label %1885

1885:                                             ; preds = %1858, %1881
  %1886 = phi i1 [ false, %1858 ], [ %1884, %1881 ]
  %1887 = zext i1 %1886 to i32
  %1888 = sub i32 %1870, %1887
  br i1 %1830, label %1889, label %1936

1889:                                             ; preds = %1885
  %1890 = select i1 %1878, i32 4, i32 5
  %1891 = sext i32 %41 to i64
  %1892 = add i32 %1879, %1877
  %1893 = icmp ugt i32 %1892, %1888
  %1894 = getelementptr inbounds i32, i32* %1623, i64 %1891
  br i1 %1893, label %1903, label %1895

1895:                                             ; preds = %1889
  %1896 = load i32, i32* %1894, align 4
  call void @ec_enc_bit_logp(%struct.ec_ctx* %159, i32 %1896, i32 %1879) #5
  %1897 = load i32, i32* %1871, align 8
  %1898 = load i32, i32* %1873, align 8
  %1899 = call i32 @llvm.ctlz.i32(i32 %1898, i1 true) #5, !range !4
  %1900 = or i32 %1899, -32
  %1901 = add i32 %1900, %1897
  %1902 = load i32, i32* %1894, align 4
  br label %1904

1903:                                             ; preds = %1889
  store i32 0, i32* %1894, align 4
  br label %1904

1904:                                             ; preds = %1903, %1895
  %1905 = phi i32 [ %1902, %1895 ], [ 0, %1903 ]
  %1906 = phi i32 [ %1901, %1895 ], [ %1877, %1903 ]
  %1907 = add nsw i64 %1891, 1
  %1908 = trunc i64 %1907 to i32
  %1909 = icmp eq i32 %43, %1908
  br i1 %1909, label %1936, label %1910

1910:                                             ; preds = %1904, %1929
  %1911 = phi i64 [ %1933, %1929 ], [ %1907, %1904 ]
  %1912 = phi i32 [ %1932, %1929 ], [ %1906, %1904 ]
  %1913 = phi i32 [ %1931, %1929 ], [ %1905, %1904 ]
  %1914 = phi i32 [ %1930, %1929 ], [ %1905, %1904 ]
  %1915 = add i32 %1890, %1912
  %1916 = icmp ugt i32 %1915, %1888
  %1917 = getelementptr inbounds i32, i32* %1623, i64 %1911
  br i1 %1916, label %1928, label %1918

1918:                                             ; preds = %1910
  %1919 = load i32, i32* %1917, align 4
  %1920 = xor i32 %1919, %1914
  call void @ec_enc_bit_logp(%struct.ec_ctx* %159, i32 %1920, i32 %1890) #5
  %1921 = load i32, i32* %1871, align 8
  %1922 = load i32, i32* %1873, align 8
  %1923 = call i32 @llvm.ctlz.i32(i32 %1922, i1 true) #5, !range !4
  %1924 = or i32 %1923, -32
  %1925 = add i32 %1924, %1921
  %1926 = load i32, i32* %1917, align 4
  %1927 = or i32 %1926, %1913
  br label %1929

1928:                                             ; preds = %1910
  store i32 %1914, i32* %1917, align 4
  br label %1929

1929:                                             ; preds = %1928, %1918
  %1930 = phi i32 [ %1926, %1918 ], [ %1914, %1928 ]
  %1931 = phi i32 [ %1927, %1918 ], [ %1913, %1928 ]
  %1932 = phi i32 [ %1925, %1918 ], [ %1912, %1928 ]
  %1933 = add nsw i64 %1911, 1
  %1934 = trunc i64 %1933 to i32
  %1935 = icmp eq i32 %43, %1934
  br i1 %1935, label %1936, label %1910, !llvm.loop !26

1936:                                             ; preds = %1904, %1929, %1885
  %1937 = phi i32 [ 0, %1885 ], [ %1905, %1904 ], [ %1931, %1929 ]
  br i1 %1886, label %1938, label %1953

1938:                                             ; preds = %1936
  %1939 = zext i32 %59 to i64
  %1940 = shl nsw i32 %1589, 2
  %1941 = add nsw i32 %1937, %1940
  %1942 = sext i32 %1941 to i64
  %1943 = getelementptr inbounds [4 x [8 x i8]], [4 x [8 x i8]]* @tf_select_table, i64 0, i64 %1939, i64 %1942
  %1944 = load i8, i8* %1943, align 1
  %1945 = or i32 %1940, 2
  %1946 = add nsw i32 %1937, %1945
  %1947 = sext i32 %1946 to i64
  %1948 = getelementptr inbounds [4 x [8 x i8]], [4 x [8 x i8]]* @tf_select_table, i64 0, i64 %1939, i64 %1947
  %1949 = load i8, i8* %1948, align 1
  %1950 = icmp eq i8 %1944, %1949
  br i1 %1950, label %1953, label %1951

1951:                                             ; preds = %1938
  call void @ec_enc_bit_logp(%struct.ec_ctx* %159, i32 %1827, i32 1) #5
  %1952 = shl i32 %1827, 1
  br label %1953

1953:                                             ; preds = %1951, %1938, %1936
  %1954 = phi i32 [ %1952, %1951 ], [ 0, %1938 ], [ 0, %1936 ]
  br i1 %1830, label %1955, label %1996

1955:                                             ; preds = %1953
  %1956 = zext i32 %59 to i64
  %1957 = shl i32 %1589, 2
  %1958 = add nsw i32 %1954, %1957
  %1959 = sext i32 %41 to i64
  %1960 = sub nsw i64 %758, %1959
  %1961 = xor i64 %1959, -1
  %1962 = and i64 %1960, 1
  %1963 = icmp eq i64 %1962, 0
  br i1 %1963, label %1973, label %1964

1964:                                             ; preds = %1955
  %1965 = getelementptr inbounds i32, i32* %1623, i64 %1959
  %1966 = load i32, i32* %1965, align 4
  %1967 = add nsw i32 %1958, %1966
  %1968 = sext i32 %1967 to i64
  %1969 = getelementptr inbounds [4 x [8 x i8]], [4 x [8 x i8]]* @tf_select_table, i64 0, i64 %1956, i64 %1968
  %1970 = load i8, i8* %1969, align 1
  %1971 = sext i8 %1970 to i32
  store i32 %1971, i32* %1965, align 4
  %1972 = add nsw i64 %1959, 1
  br label %1973

1973:                                             ; preds = %1955, %1964
  %1974 = phi i64 [ %1959, %1955 ], [ %1972, %1964 ]
  %1975 = sub nsw i64 0, %758
  %1976 = icmp eq i64 %1961, %1975
  br i1 %1976, label %1996, label %1977

1977:                                             ; preds = %1973, %1977
  %1978 = phi i64 [ %1994, %1977 ], [ %1974, %1973 ]
  %1979 = getelementptr inbounds i32, i32* %1623, i64 %1978
  %1980 = load i32, i32* %1979, align 4
  %1981 = add nsw i32 %1958, %1980
  %1982 = sext i32 %1981 to i64
  %1983 = getelementptr inbounds [4 x [8 x i8]], [4 x [8 x i8]]* @tf_select_table, i64 0, i64 %1956, i64 %1982
  %1984 = load i8, i8* %1983, align 1
  %1985 = sext i8 %1984 to i32
  store i32 %1985, i32* %1979, align 4
  %1986 = add nsw i64 %1978, 1
  %1987 = getelementptr inbounds i32, i32* %1623, i64 %1986
  %1988 = load i32, i32* %1987, align 4
  %1989 = add nsw i32 %1958, %1988
  %1990 = sext i32 %1989 to i64
  %1991 = getelementptr inbounds [4 x [8 x i8]], [4 x [8 x i8]]* @tf_select_table, i64 0, i64 %1956, i64 %1990
  %1992 = load i8, i8* %1991, align 1
  %1993 = sext i8 %1992 to i32
  store i32 %1993, i32* %1987, align 4
  %1994 = add nsw i64 %1978, 2
  %1995 = icmp eq i64 %1994, %758
  br i1 %1995, label %1996, label %1977

1996:                                             ; preds = %1973, %1977, %1953
  %1997 = load i32, i32* %1871, align 8
  %1998 = load i32, i32* %1873, align 8
  %1999 = call i32 @llvm.ctlz.i32(i32 %1998, i1 true) #5, !range !4
  %2000 = or i32 %1999, -32
  %2001 = add i32 %1997, 4
  %2002 = add i32 %2001, %2000
  %2003 = icmp sgt i32 %2002, %448
  br i1 %2003, label %2043, label %2004

2004:                                             ; preds = %1996
  %2005 = load i32, i32* %474, align 4
  %2006 = icmp eq i32 %2005, 0
  br i1 %2006, label %2009, label %2007

2007:                                             ; preds = %2004
  store i32 0, i32* %496, align 8
  %2008 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 20
  store i32 2, i32* %2008, align 4
  br label %2041

2009:                                             ; preds = %2004
  br i1 %44, label %2010, label %2020

2010:                                             ; preds = %2009
  %2011 = load i32, i32* %545, align 4
  %2012 = icmp eq i32 %2011, 0
  br i1 %2012, label %2013, label %2015

2013:                                             ; preds = %2010
  %2014 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 20
  store i32 0, i32* %2014, align 4
  br label %2041

2015:                                             ; preds = %2010
  %2016 = icmp eq i32 %1589, 0
  %2017 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 20
  br i1 %2016, label %2019, label %2018

2018:                                             ; preds = %2015
  store i32 2, i32* %2017, align 4
  br label %2041

2019:                                             ; preds = %2015
  store i32 3, i32* %2017, align 4
  br label %2041

2020:                                             ; preds = %2009
  %2021 = icmp eq i32 %1590, 0
  %2022 = load i32, i32* %545, align 4
  br i1 %2021, label %2023, label %2028

2023:                                             ; preds = %2020
  %2024 = icmp slt i32 %2022, 3
  %2025 = mul nsw i32 %23, 10
  %2026 = icmp slt i32 %446, %2025
  %2027 = or i1 %2026, %2024
  br i1 %2027, label %2028, label %2033

2028:                                             ; preds = %2020, %2023
  %2029 = icmp eq i32 %2022, 0
  %2030 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 20
  br i1 %2029, label %2031, label %2032

2031:                                             ; preds = %2028
  store i32 0, i32* %2030, align 4
  br label %2041

2032:                                             ; preds = %2028
  store i32 2, i32* %2030, align 4
  br label %2041

2033:                                             ; preds = %2023
  %2034 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 22
  %2035 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 20
  %2036 = load i32, i32* %2035, align 4
  %2037 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 24
  %2038 = xor i1 %529, true
  %2039 = zext i1 %2038 to i32
  %2040 = call i32 @spreading_decision(%struct.OpusCustomMode* %33, float* nonnull %1594, i32* %2034, i32 %2036, i32* %2037, i32* %496, i32 %2039, i32 %185, i32 %23, i32 %66, i32* nonnull %1613) #5
  store i32 %2040, i32* %2035, align 4
  br label %2041

2041:                                             ; preds = %2018, %2019, %2013, %2031, %2032, %2033, %2007
  %2042 = phi i32 [ 2, %2018 ], [ 3, %2019 ], [ 0, %2013 ], [ 0, %2031 ], [ 2, %2032 ], [ %2040, %2033 ], [ 2, %2007 ]
  call void @ec_enc_icdf(%struct.ec_ctx* %159, i32 %2042, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @spread_icdf, i64 0, i64 0), i32 5) #5
  br label %2043

2043:                                             ; preds = %1996, %2041
  %2044 = load i32, i32* %474, align 4
  %2045 = icmp eq i32 %2044, 0
  br i1 %2045, label %2050, label %2046

2046:                                             ; preds = %2043
  %2047 = icmp sgt i32 %447, 26
  %2048 = sdiv i32 %447, 3
  %2049 = select i1 %2047, i32 8, i32 %2048
  store i32 %2049, i32* %1609, align 16
  br label %2050

2050:                                             ; preds = %2043, %2046
  %2051 = alloca i32, i64 %1607, align 16
  %2052 = bitcast i32* %2051 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %2052, i8 -86, i64 %1608, i1 false)
  call void @init_caps(%struct.OpusCustomMode* %33, i32* nonnull %2051, i32 %59, i32 %23) #5
  %2053 = shl i32 %448, 3
  %2054 = call i32 @ec_tell_frac(%struct.ec_ctx* %159) #5
  br i1 %1830, label %2055, label %2124

2055:                                             ; preds = %2050
  %2056 = sext i32 %41 to i64
  br label %2057

2057:                                             ; preds = %2118, %2055
  %2058 = phi i64 [ %2056, %2055 ], [ %2062, %2118 ]
  %2059 = phi i32 [ %2054, %2055 ], [ %2119, %2118 ]
  %2060 = phi i32 [ 0, %2055 ], [ %2121, %2118 ]
  %2061 = phi i32 [ 6, %2055 ], [ %2122, %2118 ]
  %2062 = add nsw i64 %2058, 1
  %2063 = getelementptr inbounds i16, i16* %39, i64 %2062
  %2064 = load i16, i16* %2063, align 2
  %2065 = sext i16 %2064 to i32
  %2066 = getelementptr inbounds i16, i16* %39, i64 %2058
  %2067 = load i16, i16* %2066, align 2
  %2068 = sext i16 %2067 to i32
  %2069 = sub nsw i32 %2065, %2068
  %2070 = mul nsw i32 %2069, %23
  %2071 = shl i32 %2070, %59
  %2072 = shl i32 %2071, 3
  %2073 = icmp sgt i32 %2071, 48
  %2074 = select i1 %2073, i32 %2071, i32 48
  %2075 = icmp slt i32 %2072, %2074
  %2076 = select i1 %2075, i32 %2072, i32 %2074
  %2077 = getelementptr inbounds i32, i32* %2051, i64 %2058
  %2078 = getelementptr inbounds i32, i32* %1609, i64 %2058
  %2079 = shl i32 %2061, 3
  %2080 = add nsw i32 %2079, %2059
  %2081 = sub nsw i32 %2053, %2060
  %2082 = icmp slt i32 %2080, %2081
  br i1 %2082, label %2083, label %2118

2083:                                             ; preds = %2057
  %2084 = load i32, i32* %2077, align 4
  %2085 = icmp sgt i32 %2084, 0
  br i1 %2085, label %2090, label %2105

2086:                                             ; preds = %2099
  %2087 = add nuw nsw i32 %2094, 1
  %2088 = load i32, i32* %2077, align 4
  %2089 = icmp slt i32 %2100, %2088
  br i1 %2089, label %2090, label %2105

2090:                                             ; preds = %2083, %2086
  %2091 = phi i32 [ %2101, %2086 ], [ %2060, %2083 ]
  %2092 = phi i32 [ 1, %2086 ], [ %2061, %2083 ]
  %2093 = phi i32 [ %2100, %2086 ], [ 0, %2083 ]
  %2094 = phi i32 [ %2087, %2086 ], [ 0, %2083 ]
  %2095 = load i32, i32* %2078, align 4
  %2096 = icmp slt i32 %2094, %2095
  %2097 = zext i1 %2096 to i32
  call void @ec_enc_bit_logp(%struct.ec_ctx* %159, i32 %2097, i32 %2092) #5
  %2098 = call i32 @ec_tell_frac(%struct.ec_ctx* %159) #5
  br i1 %2096, label %2099, label %2105

2099:                                             ; preds = %2090
  %2100 = add nsw i32 %2093, %2076
  %2101 = add nsw i32 %2091, %2076
  %2102 = add nsw i32 %2098, 8
  %2103 = sub nsw i32 %2053, %2101
  %2104 = icmp slt i32 %2102, %2103
  br i1 %2104, label %2086, label %2111

2105:                                             ; preds = %2090, %2086, %2083
  %2106 = phi i32 [ 0, %2083 ], [ %2094, %2090 ], [ 1, %2086 ]
  %2107 = phi i32 [ 0, %2083 ], [ %2093, %2090 ], [ %2100, %2086 ]
  %2108 = phi i32 [ %2060, %2083 ], [ %2091, %2090 ], [ %2101, %2086 ]
  %2109 = phi i32 [ %2059, %2083 ], [ %2098, %2086 ], [ %2098, %2090 ]
  %2110 = icmp eq i32 %2106, 0
  br i1 %2110, label %2118, label %2111

2111:                                             ; preds = %2099, %2105
  %2112 = phi i32 [ %2109, %2105 ], [ %2098, %2099 ]
  %2113 = phi i32 [ %2107, %2105 ], [ %2100, %2099 ]
  %2114 = phi i32 [ %2108, %2105 ], [ %2101, %2099 ]
  %2115 = icmp sgt i32 %2061, 3
  %2116 = select i1 %2115, i32 %2061, i32 3
  %2117 = add nsw i32 %2116, -1
  br label %2118

2118:                                             ; preds = %2057, %2105, %2111
  %2119 = phi i32 [ %2112, %2111 ], [ %2109, %2105 ], [ %2059, %2057 ]
  %2120 = phi i32 [ %2113, %2111 ], [ %2107, %2105 ], [ 0, %2057 ]
  %2121 = phi i32 [ %2114, %2111 ], [ %2108, %2105 ], [ %2060, %2057 ]
  %2122 = phi i32 [ %2117, %2111 ], [ %2061, %2105 ], [ %2061, %2057 ]
  store i32 %2120, i32* %2078, align 4
  %2123 = icmp eq i64 %2062, %758
  br i1 %2123, label %2124, label %2057

2124:                                             ; preds = %2118, %2050
  %2125 = phi i32 [ 0, %2050 ], [ %2121, %2118 ]
  %2126 = phi i32 [ %2054, %2050 ], [ %2119, %2118 ]
  %2127 = icmp eq i32 %23, 2
  br i1 %2127, label %2128, label %2199

2128:                                             ; preds = %2124
  br i1 %1880, label %2189, label %2129

2129:                                             ; preds = %2128
  %2130 = load i16*, i16** %38, align 8
  %2131 = sext i32 %51 to i64
  %2132 = load i16, i16* %2130, align 2
  br label %2136

2133:                                             ; preds = %2151, %2136
  %2134 = phi <2 x float> [ %2139, %2136 ], [ %2168, %2151 ]
  %2135 = icmp eq i64 %2142, 13
  br i1 %2135, label %2171, label %2136

2136:                                             ; preds = %2133, %2129
  %2137 = phi i16 [ %2132, %2129 ], [ %2144, %2133 ]
  %2138 = phi i64 [ 0, %2129 ], [ %2142, %2133 ]
  %2139 = phi <2 x float> [ <float 0x3CD203AFA0000000, float 0x3CD203AFA0000000>, %2129 ], [ %2134, %2133 ]
  %2140 = sext i16 %2137 to i32
  %2141 = shl i32 %2140, %59
  %2142 = add nuw nsw i64 %2138, 1
  %2143 = getelementptr inbounds i16, i16* %2130, i64 %2142
  %2144 = load i16, i16* %2143, align 2
  %2145 = sext i16 %2144 to i32
  %2146 = shl i32 %2145, %59
  %2147 = icmp slt i32 %2141, %2146
  br i1 %2147, label %2148, label %2133

2148:                                             ; preds = %2136
  %2149 = sext i32 %2141 to i64
  %2150 = sext i32 %2146 to i64
  br label %2151

2151:                                             ; preds = %2151, %2148
  %2152 = phi i64 [ %2149, %2148 ], [ %2169, %2151 ]
  %2153 = phi <2 x float> [ %2139, %2148 ], [ %2168, %2151 ]
  %2154 = getelementptr inbounds float, float* %1594, i64 %2152
  %2155 = load float, float* %2154, align 4
  %2156 = add nsw i64 %2152, %2131
  %2157 = getelementptr inbounds float, float* %1594, i64 %2156
  %2158 = load float, float* %2157, align 4
  %2159 = fadd float %2155, %2158
  %2160 = fsub float %2155, %2158
  %2161 = insertelement <2 x float> undef, float %2159, i32 0
  %2162 = insertelement <2 x float> %2161, float %2155, i32 1
  %2163 = call <2 x float> @llvm.fabs.v2f32(<2 x float> %2162)
  %2164 = insertelement <2 x float> undef, float %2160, i32 0
  %2165 = insertelement <2 x float> %2164, float %2158, i32 1
  %2166 = call <2 x float> @llvm.fabs.v2f32(<2 x float> %2165)
  %2167 = fadd <2 x float> %2163, %2166
  %2168 = fadd <2 x float> %2153, %2167
  %2169 = add nsw i64 %2152, 1
  %2170 = icmp eq i64 %2169, %2150
  br i1 %2170, label %2133, label %2151

2171:                                             ; preds = %2133
  %2172 = extractelement <2 x float> %2134, i32 0
  %2173 = fmul float %2172, 0x3FE6A09EE0000000
  %2174 = icmp ult i32 %59, 2
  %2175 = select i1 %2174, i32 5, i32 13
  %2176 = getelementptr inbounds i16, i16* %2130, i64 13
  %2177 = load i16, i16* %2176, align 2
  %2178 = sext i16 %2177 to i32
  %2179 = add nuw nsw i32 %59, 1
  %2180 = shl i32 %2178, %2179
  %2181 = add nsw i32 %2180, %2175
  %2182 = sitofp i32 %2181 to float
  %2183 = fmul float %2173, %2182
  %2184 = sitofp i32 %2180 to float
  %2185 = extractelement <2 x float> %2134, i32 1
  %2186 = fmul float %2185, %2184
  %2187 = fcmp ogt float %2183, %2186
  %2188 = zext i1 %2187 to i32
  store i32 %2188, i32* %12, align 4
  br label %2189

2189:                                             ; preds = %2128, %2171
  %2190 = sdiv i32 %156, 1000
  %2191 = sitofp i32 %2190 to float
  %2192 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 40
  %2193 = load i32, i32* %2192, align 4
  %2194 = call i32 @hysteresis_decision(float %2191, float* getelementptr inbounds ([21 x float], [21 x float]* @celt_encode_with_ec.intensity_thresholds, i64 0, i64 0), float* getelementptr inbounds ([21 x float], [21 x float]* @celt_encode_with_ec.intensity_histeresis, i64 0, i64 0), i32 21, i32 %2193) #5
  %2195 = icmp sgt i32 %41, %2194
  %2196 = select i1 %2195, i32 %41, i32 %2194
  %2197 = icmp slt i32 %43, %2196
  %2198 = select i1 %2197, i32 %43, i32 %2196
  store i32 %2198, i32* %2192, align 4
  br label %2199

2199:                                             ; preds = %2189, %2124
  %2200 = add nsw i32 %2126, 48
  %2201 = sub nsw i32 %2053, %2125
  %2202 = icmp sgt i32 %2200, %2201
  br i1 %2202, label %2535, label %2203

2203:                                             ; preds = %2199
  %2204 = icmp sgt i32 %41, 0
  br i1 %2204, label %2208, label %2205

2205:                                             ; preds = %2203
  %2206 = load i32, i32* %474, align 4
  %2207 = icmp eq i32 %2206, 0
  br i1 %2207, label %2210, label %2208

2208:                                             ; preds = %2205, %2203
  %2209 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 39
  store float 0.000000e+00, float* %2209, align 8
  br label %2532

2210:                                             ; preds = %2205
  %2211 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 39
  %2212 = load float, float* %15, align 4
  %2213 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 40
  %2214 = load i32, i32* %2213, align 4
  %2215 = icmp slt i32 %156, 64000
  br i1 %2215, label %2224, label %2216

2216:                                             ; preds = %2210
  %2217 = icmp slt i32 %156, 80000
  br i1 %2217, label %2218, label %2224

2218:                                             ; preds = %2216
  %2219 = add nsw i32 %156, -64000
  %2220 = ashr i32 %2219, 10
  %2221 = sitofp i32 %2220 to float
  %2222 = fmul float %2221, 6.250000e-02
  %2223 = fadd float %2222, 4.000000e+00
  br label %2224

2224:                                             ; preds = %2218, %2216, %2210
  %2225 = phi float [ %2223, %2218 ], [ 5.000000e+00, %2216 ], [ 4.000000e+00, %2210 ]
  br i1 %2127, label %2226, label %2427

2226:                                             ; preds = %2224
  %2227 = load i16*, i16** %38, align 8
  %2228 = load i16, i16* %2227, align 2
  %2229 = sext i16 %2228 to i32
  %2230 = shl i32 %2229, %59
  %2231 = sext i32 %2230 to i64
  %2232 = getelementptr inbounds float, float* %1594, i64 %2231
  %2233 = add nsw i32 %2230, %51
  %2234 = sext i32 %2233 to i64
  %2235 = getelementptr inbounds float, float* %1594, i64 %2234
  %2236 = getelementptr inbounds i16, i16* %2227, i64 1
  %2237 = load i16, i16* %2236, align 2
  %2238 = sext i16 %2237 to i32
  %2239 = sub nsw i32 %2238, %2229
  %2240 = shl i32 %2239, %59
  %2241 = call float @celt_inner_prod_sse(float* %2232, float* %2235, i32 %2240) #5
  %2242 = fadd float %2241, 0.000000e+00
  %2243 = load i16*, i16** %38, align 8
  %2244 = getelementptr inbounds i16, i16* %2243, i64 1
  %2245 = load i16, i16* %2244, align 2
  %2246 = sext i16 %2245 to i32
  %2247 = shl i32 %2246, %59
  %2248 = sext i32 %2247 to i64
  %2249 = getelementptr inbounds float, float* %1594, i64 %2248
  %2250 = add nsw i32 %2247, %51
  %2251 = sext i32 %2250 to i64
  %2252 = getelementptr inbounds float, float* %1594, i64 %2251
  %2253 = getelementptr inbounds i16, i16* %2243, i64 2
  %2254 = load i16, i16* %2253, align 2
  %2255 = sext i16 %2254 to i32
  %2256 = sub nsw i32 %2255, %2246
  %2257 = shl i32 %2256, %59
  %2258 = call float @celt_inner_prod_sse(float* %2249, float* %2252, i32 %2257) #5
  %2259 = fadd float %2242, %2258
  %2260 = load i16*, i16** %38, align 8
  %2261 = getelementptr inbounds i16, i16* %2260, i64 2
  %2262 = load i16, i16* %2261, align 2
  %2263 = sext i16 %2262 to i32
  %2264 = shl i32 %2263, %59
  %2265 = sext i32 %2264 to i64
  %2266 = getelementptr inbounds float, float* %1594, i64 %2265
  %2267 = add nsw i32 %2264, %51
  %2268 = sext i32 %2267 to i64
  %2269 = getelementptr inbounds float, float* %1594, i64 %2268
  %2270 = getelementptr inbounds i16, i16* %2260, i64 3
  %2271 = load i16, i16* %2270, align 2
  %2272 = sext i16 %2271 to i32
  %2273 = sub nsw i32 %2272, %2263
  %2274 = shl i32 %2273, %59
  %2275 = call float @celt_inner_prod_sse(float* %2266, float* %2269, i32 %2274) #5
  %2276 = fadd float %2259, %2275
  %2277 = load i16*, i16** %38, align 8
  %2278 = getelementptr inbounds i16, i16* %2277, i64 3
  %2279 = load i16, i16* %2278, align 2
  %2280 = sext i16 %2279 to i32
  %2281 = shl i32 %2280, %59
  %2282 = sext i32 %2281 to i64
  %2283 = getelementptr inbounds float, float* %1594, i64 %2282
  %2284 = add nsw i32 %2281, %51
  %2285 = sext i32 %2284 to i64
  %2286 = getelementptr inbounds float, float* %1594, i64 %2285
  %2287 = getelementptr inbounds i16, i16* %2277, i64 4
  %2288 = load i16, i16* %2287, align 2
  %2289 = sext i16 %2288 to i32
  %2290 = sub nsw i32 %2289, %2280
  %2291 = shl i32 %2290, %59
  %2292 = call float @celt_inner_prod_sse(float* %2283, float* %2286, i32 %2291) #5
  %2293 = fadd float %2276, %2292
  %2294 = load i16*, i16** %38, align 8
  %2295 = getelementptr inbounds i16, i16* %2294, i64 4
  %2296 = load i16, i16* %2295, align 2
  %2297 = sext i16 %2296 to i32
  %2298 = shl i32 %2297, %59
  %2299 = sext i32 %2298 to i64
  %2300 = getelementptr inbounds float, float* %1594, i64 %2299
  %2301 = add nsw i32 %2298, %51
  %2302 = sext i32 %2301 to i64
  %2303 = getelementptr inbounds float, float* %1594, i64 %2302
  %2304 = getelementptr inbounds i16, i16* %2294, i64 5
  %2305 = load i16, i16* %2304, align 2
  %2306 = sext i16 %2305 to i32
  %2307 = sub nsw i32 %2306, %2297
  %2308 = shl i32 %2307, %59
  %2309 = call float @celt_inner_prod_sse(float* %2300, float* %2303, i32 %2308) #5
  %2310 = fadd float %2293, %2309
  %2311 = load i16*, i16** %38, align 8
  %2312 = getelementptr inbounds i16, i16* %2311, i64 5
  %2313 = load i16, i16* %2312, align 2
  %2314 = sext i16 %2313 to i32
  %2315 = shl i32 %2314, %59
  %2316 = sext i32 %2315 to i64
  %2317 = getelementptr inbounds float, float* %1594, i64 %2316
  %2318 = add nsw i32 %2315, %51
  %2319 = sext i32 %2318 to i64
  %2320 = getelementptr inbounds float, float* %1594, i64 %2319
  %2321 = getelementptr inbounds i16, i16* %2311, i64 6
  %2322 = load i16, i16* %2321, align 2
  %2323 = sext i16 %2322 to i32
  %2324 = sub nsw i32 %2323, %2314
  %2325 = shl i32 %2324, %59
  %2326 = call float @celt_inner_prod_sse(float* %2317, float* %2320, i32 %2325) #5
  %2327 = fadd float %2310, %2326
  %2328 = load i16*, i16** %38, align 8
  %2329 = getelementptr inbounds i16, i16* %2328, i64 6
  %2330 = load i16, i16* %2329, align 2
  %2331 = sext i16 %2330 to i32
  %2332 = shl i32 %2331, %59
  %2333 = sext i32 %2332 to i64
  %2334 = getelementptr inbounds float, float* %1594, i64 %2333
  %2335 = add nsw i32 %2332, %51
  %2336 = sext i32 %2335 to i64
  %2337 = getelementptr inbounds float, float* %1594, i64 %2336
  %2338 = getelementptr inbounds i16, i16* %2328, i64 7
  %2339 = load i16, i16* %2338, align 2
  %2340 = sext i16 %2339 to i32
  %2341 = sub nsw i32 %2340, %2331
  %2342 = shl i32 %2341, %59
  %2343 = call float @celt_inner_prod_sse(float* %2334, float* %2337, i32 %2342) #5
  %2344 = fadd float %2327, %2343
  %2345 = load i16*, i16** %38, align 8
  %2346 = getelementptr inbounds i16, i16* %2345, i64 7
  %2347 = load i16, i16* %2346, align 2
  %2348 = sext i16 %2347 to i32
  %2349 = shl i32 %2348, %59
  %2350 = sext i32 %2349 to i64
  %2351 = getelementptr inbounds float, float* %1594, i64 %2350
  %2352 = add nsw i32 %2349, %51
  %2353 = sext i32 %2352 to i64
  %2354 = getelementptr inbounds float, float* %1594, i64 %2353
  %2355 = getelementptr inbounds i16, i16* %2345, i64 8
  %2356 = load i16, i16* %2355, align 2
  %2357 = sext i16 %2356 to i32
  %2358 = sub nsw i32 %2357, %2348
  %2359 = shl i32 %2358, %59
  %2360 = call float @celt_inner_prod_sse(float* %2351, float* %2354, i32 %2359) #5
  %2361 = fadd float %2344, %2360
  %2362 = fmul float %2361, 1.250000e-01
  %2363 = call float @llvm.fabs.f32(float %2362) #5
  %2364 = fcmp ogt float %2363, 1.000000e+00
  %2365 = select i1 %2364, float 1.000000e+00, float %2363
  %2366 = icmp sgt i32 %2214, 8
  br i1 %2366, label %2367, label %2393

2367:                                             ; preds = %2226
  %2368 = zext i32 %2214 to i64
  br label %2369

2369:                                             ; preds = %2369, %2367
  %2370 = phi i64 [ 8, %2367 ], [ %2382, %2369 ]
  %2371 = phi float [ %2365, %2367 ], [ %2391, %2369 ]
  %2372 = load i16*, i16** %38, align 8
  %2373 = getelementptr inbounds i16, i16* %2372, i64 %2370
  %2374 = load i16, i16* %2373, align 2
  %2375 = sext i16 %2374 to i32
  %2376 = shl i32 %2375, %59
  %2377 = sext i32 %2376 to i64
  %2378 = getelementptr inbounds float, float* %1594, i64 %2377
  %2379 = add nsw i32 %2376, %51
  %2380 = sext i32 %2379 to i64
  %2381 = getelementptr inbounds float, float* %1594, i64 %2380
  %2382 = add nuw nsw i64 %2370, 1
  %2383 = getelementptr inbounds i16, i16* %2372, i64 %2382
  %2384 = load i16, i16* %2383, align 2
  %2385 = sext i16 %2384 to i32
  %2386 = sub nsw i32 %2385, %2375
  %2387 = shl i32 %2386, %59
  %2388 = call float @celt_inner_prod_sse(float* %2378, float* %2381, i32 %2387) #5
  %2389 = call float @llvm.fabs.f32(float %2388) #5
  %2390 = fcmp olt float %2371, %2389
  %2391 = select i1 %2390, float %2371, float %2389
  %2392 = icmp eq i64 %2382, %2368
  br i1 %2392, label %2393, label %2369

2393:                                             ; preds = %2369, %2226
  %2394 = phi float [ %2365, %2226 ], [ %2391, %2369 ]
  %2395 = call float @llvm.fabs.f32(float %2394) #5
  %2396 = fcmp ogt float %2395, 1.000000e+00
  %2397 = select i1 %2396, float 1.000000e+00, float %2395
  %2398 = fmul float %2365, %2365
  %2399 = fsub float 0x3FF00418A0000000, %2398
  %2400 = fpext float %2399 to double
  %2401 = call double @log(double %2400) #5
  %2402 = fmul double %2401, 0x3FF71547652B82FE
  %2403 = fptrunc double %2402 to float
  %2404 = fmul float %2403, 5.000000e-01
  %2405 = fmul float %2397, %2397
  %2406 = fsub float 0x3FF00418A0000000, %2405
  %2407 = fpext float %2406 to double
  %2408 = call double @log(double %2407) #5
  %2409 = fmul double %2408, 0x3FF71547652B82FE
  %2410 = fptrunc double %2409 to float
  %2411 = fcmp ogt float %2404, %2410
  br i1 %2411, label %2416, label %2412

2412:                                             ; preds = %2393
  %2413 = call double @log(double %2407) #5
  %2414 = fmul double %2413, 0x3FF71547652B82FE
  %2415 = fptrunc double %2414 to float
  br label %2416

2416:                                             ; preds = %2412, %2393
  %2417 = phi float [ %2415, %2412 ], [ %2404, %2393 ]
  %2418 = fmul float %2403, 7.500000e-01
  %2419 = fcmp olt float %2418, -4.000000e+00
  %2420 = select i1 %2419, float -4.000000e+00, float %2418
  %2421 = fadd float %2225, %2420
  %2422 = load float, float* %2211, align 4
  %2423 = fadd float %2422, 2.500000e-01
  %2424 = fmul float %2417, -5.000000e-01
  %2425 = fcmp olt float %2423, %2424
  %2426 = select i1 %2425, float %2423, float %2424
  store float %2426, float* %2211, align 4
  br label %2427

2427:                                             ; preds = %2416, %2224
  %2428 = phi float [ %2421, %2416 ], [ %2225, %2224 ]
  %2429 = add i32 %43, -1
  %2430 = icmp sgt i32 %2429, 0
  %2431 = sub i32 2, %43
  br i1 %2430, label %2432, label %2489

2432:                                             ; preds = %2427
  %2433 = load i32, i32* %34, align 8
  %2434 = zext i32 %2429 to i64
  %2435 = sext i32 %23 to i64
  %2436 = sext i32 %2433 to i64
  %2437 = and i64 %2434, 1
  %2438 = icmp eq i32 %2429, 1
  %2439 = sub nsw i64 %2434, %2437
  %2440 = icmp eq i64 %2437, 0
  br label %2441

2441:                                             ; preds = %2485, %2432
  %2442 = phi i64 [ %2487, %2485 ], [ 0, %2432 ]
  %2443 = phi float [ %2486, %2485 ], [ 0.000000e+00, %2432 ]
  %2444 = mul nsw i64 %2442, %2436
  br i1 %2438, label %2471, label %2445

2445:                                             ; preds = %2441, %2445
  %2446 = phi i64 [ %2468, %2445 ], [ 0, %2441 ]
  %2447 = phi float [ %2467, %2445 ], [ %2443, %2441 ]
  %2448 = phi i64 [ %2469, %2445 ], [ %2439, %2441 ]
  %2449 = add nsw i64 %2446, %2444
  %2450 = getelementptr inbounds float, float* %590, i64 %2449
  %2451 = load float, float* %2450, align 4
  %2452 = trunc i64 %2446 to i32
  %2453 = shl i32 %2452, 1
  %2454 = add i32 %2431, %2453
  %2455 = sitofp i32 %2454 to float
  %2456 = fmul float %2451, %2455
  %2457 = fadd float %2447, %2456
  %2458 = or i64 %2446, 1
  %2459 = add nsw i64 %2458, %2444
  %2460 = getelementptr inbounds float, float* %590, i64 %2459
  %2461 = load float, float* %2460, align 4
  %2462 = trunc i64 %2458 to i32
  %2463 = shl i32 %2462, 1
  %2464 = add i32 %2431, %2463
  %2465 = sitofp i32 %2464 to float
  %2466 = fmul float %2461, %2465
  %2467 = fadd float %2457, %2466
  %2468 = add nuw nsw i64 %2446, 2
  %2469 = add i64 %2448, -2
  %2470 = icmp eq i64 %2469, 0
  br i1 %2470, label %2471, label %2445

2471:                                             ; preds = %2445, %2441
  %2472 = phi float [ undef, %2441 ], [ %2467, %2445 ]
  %2473 = phi i64 [ 0, %2441 ], [ %2468, %2445 ]
  %2474 = phi float [ %2443, %2441 ], [ %2467, %2445 ]
  br i1 %2440, label %2485, label %2475

2475:                                             ; preds = %2471
  %2476 = add nsw i64 %2473, %2444
  %2477 = getelementptr inbounds float, float* %590, i64 %2476
  %2478 = load float, float* %2477, align 4
  %2479 = trunc i64 %2473 to i32
  %2480 = shl i32 %2479, 1
  %2481 = add i32 %2431, %2480
  %2482 = sitofp i32 %2481 to float
  %2483 = fmul float %2478, %2482
  %2484 = fadd float %2474, %2483
  br label %2485

2485:                                             ; preds = %2471, %2475
  %2486 = phi float [ %2472, %2471 ], [ %2484, %2475 ]
  %2487 = add nuw nsw i64 %2442, 1
  %2488 = icmp slt i64 %2487, %2435
  br i1 %2488, label %2441, label %2489

2489:                                             ; preds = %2485, %2427
  %2490 = phi float [ 0.000000e+00, %2427 ], [ %2486, %2485 ]
  %2491 = mul nsw i32 %2429, %23
  %2492 = sitofp i32 %2491 to float
  %2493 = fdiv float %2490, %2492
  %2494 = fadd float %2493, 1.000000e+00
  %2495 = fdiv float %2494, 6.000000e+00
  %2496 = fcmp ogt float %2495, 2.000000e+00
  %2497 = fcmp olt float %2495, -2.000000e+00
  %2498 = xor i1 %2496, true
  %2499 = and i1 %2497, %2498
  %2500 = or i1 %2497, %2496
  %2501 = select i1 %2499, float -2.000000e+00, float 2.000000e+00
  %2502 = select i1 %2500, float %2501, float %2495
  %2503 = fsub float %2428, %2502
  %2504 = fsub float %2503, %1272
  %2505 = fmul float %2212, 2.000000e+00
  %2506 = fsub float %2504, %2505
  %2507 = getelementptr inbounds %struct.AnalysisInfo, %struct.AnalysisInfo* %498, i64 0, i32 0
  %2508 = load i32, i32* %2507, align 4
  %2509 = icmp eq i32 %2508, 0
  br i1 %2509, label %2523, label %2510

2510:                                             ; preds = %2489
  %2511 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 30, i32 2
  %2512 = load float, float* %2511, align 4
  %2513 = fadd float %2512, 0x3FA99999A0000000
  %2514 = fmul float %2513, 2.000000e+00
  %2515 = fcmp ogt float %2514, 2.000000e+00
  %2516 = fcmp olt float %2514, -2.000000e+00
  %2517 = xor i1 %2515, true
  %2518 = and i1 %2516, %2517
  %2519 = or i1 %2516, %2515
  %2520 = select i1 %2518, float -2.000000e+00, float 2.000000e+00
  %2521 = select i1 %2519, float %2520, float %2514
  %2522 = fsub float %2506, %2521
  br label %2523

2523:                                             ; preds = %2489, %2510
  %2524 = phi float [ %2522, %2510 ], [ %2506, %2489 ]
  %2525 = fadd float %2524, 5.000000e-01
  %2526 = call float @llvm.floor.f32(float %2525) #5
  %2527 = fptosi float %2526 to i32
  %2528 = icmp slt i32 %2527, 10
  %2529 = select i1 %2528, i32 %2527, i32 10
  %2530 = icmp sgt i32 %2529, 0
  %2531 = select i1 %2530, i32 %2529, i32 0
  br label %2532

2532:                                             ; preds = %2523, %2208
  %2533 = phi i32 [ 5, %2208 ], [ %2531, %2523 ]
  call void @ec_enc_icdf(%struct.ec_ctx* %159, i32 %2533, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @trim_icdf, i64 0, i64 0), i32 7) #5
  %2534 = call i32 @ec_tell_frac(%struct.ec_ctx* %159) #5
  br label %2535

2535:                                             ; preds = %2199, %2532
  %2536 = phi i32 [ %2533, %2532 ], [ 5, %2199 ]
  %2537 = phi i32 [ %2534, %2532 ], [ %2126, %2199 ]
  br i1 %160, label %2538, label %2814

2538:                                             ; preds = %2535
  %2539 = load i32, i32* %52, align 8
  %2540 = sub nsw i32 %2539, %59
  %2541 = lshr i32 1275, %142
  %2542 = icmp slt i32 %450, %2541
  %2543 = select i1 %2542, i32 %450, i32 %2541
  br i1 %44, label %2547, label %2544

2544:                                             ; preds = %2538
  %2545 = shl i32 %145, 3
  %2546 = sub nsw i32 %139, %2545
  br label %2553

2547:                                             ; preds = %2538
  %2548 = mul i32 %23, -72
  %2549 = add i32 %2548, -32
  %2550 = add i32 %2549, %139
  %2551 = icmp sgt i32 %2550, 0
  %2552 = select i1 %2551, i32 %2550, i32 0
  br label %2553

2553:                                             ; preds = %2547, %2544
  %2554 = phi i32 [ %2552, %2547 ], [ %2546, %2544 ]
  %2555 = load i32, i32* %1619, align 8
  %2556 = icmp eq i32 %2555, 0
  br i1 %2556, label %2562, label %2557

2557:                                             ; preds = %2553
  %2558 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 36
  %2559 = load i32, i32* %2558, align 4
  %2560 = ashr i32 %2559, %2540
  %2561 = add nsw i32 %2560, %2554
  br label %2562

2562:                                             ; preds = %2553, %2557
  %2563 = phi i32 [ %2561, %2557 ], [ %2554, %2553 ]
  br i1 %44, label %2724, label %2564

2564:                                             ; preds = %2562
  %2565 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 23
  %2566 = load i32, i32* %2565, align 8
  %2567 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 40
  %2568 = load i32, i32* %2567, align 4
  %2569 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 39
  %2570 = load float, float* %2569, align 8
  %2571 = load i32, i32* %16, align 4
  %2572 = load float, float* %15, align 4
  %2573 = load i32, i32* %474, align 4
  %2574 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 41
  %2575 = load float*, float** %2574, align 8
  %2576 = icmp eq float* %2575, null
  %2577 = load i32, i32* %34, align 8
  %2578 = load i16*, i16** %38, align 8
  %2579 = icmp eq i32 %2566, 0
  %2580 = select i1 %2579, i32 %2577, i32 %2566
  %2581 = sext i32 %2580 to i64
  %2582 = getelementptr inbounds i16, i16* %2578, i64 %2581
  %2583 = load i16, i16* %2582, align 2
  %2584 = sext i16 %2583 to i32
  %2585 = shl i32 %2584, %59
  br i1 %2127, label %2586, label %2595

2586:                                             ; preds = %2564
  %2587 = icmp sgt i32 %2580, %2568
  %2588 = select i1 %2587, i32 %2568, i32 %2580
  %2589 = sext i32 %2588 to i64
  %2590 = getelementptr inbounds i16, i16* %2578, i64 %2589
  %2591 = load i16, i16* %2590, align 2
  %2592 = sext i16 %2591 to i32
  %2593 = shl i32 %2592, %59
  %2594 = add nsw i32 %2593, %2585
  br label %2595

2595:                                             ; preds = %2586, %2564
  %2596 = phi i32 [ %2594, %2586 ], [ %2585, %2564 ]
  %2597 = getelementptr inbounds %struct.AnalysisInfo, %struct.AnalysisInfo* %498, i64 0, i32 0
  %2598 = load i32, i32* %2597, align 4
  %2599 = icmp eq i32 %2598, 0
  br i1 %2599, label %2612, label %2600

2600:                                             ; preds = %2595
  %2601 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 30, i32 4
  %2602 = load float, float* %2601, align 4
  %2603 = fpext float %2602 to double
  %2604 = fcmp olt double %2603, 4.000000e-01
  br i1 %2604, label %2605, label %2612

2605:                                             ; preds = %2600
  %2606 = shl i32 %2596, 3
  %2607 = sitofp i32 %2606 to float
  %2608 = fsub float 0x3FD99999A0000000, %2602
  %2609 = fmul float %2608, %2607
  %2610 = fptosi float %2609 to i32
  %2611 = sub nsw i32 %2563, %2610
  br label %2612

2612:                                             ; preds = %2605, %2600, %2595
  %2613 = phi i32 [ %2611, %2605 ], [ %2563, %2600 ], [ %2563, %2595 ]
  br i1 %2127, label %2614, label %2639

2614:                                             ; preds = %2612
  %2615 = icmp sgt i32 %2580, %2568
  %2616 = select i1 %2615, i32 %2568, i32 %2580
  %2617 = sext i32 %2616 to i64
  %2618 = getelementptr inbounds i16, i16* %2578, i64 %2617
  %2619 = load i16, i16* %2618, align 2
  %2620 = sext i16 %2619 to i32
  %2621 = shl i32 %2620, %59
  %2622 = sub nsw i32 %2621, %2616
  %2623 = sitofp i32 %2622 to float
  %2624 = fmul float %2623, 0x3FE99999A0000000
  %2625 = sitofp i32 %2596 to float
  %2626 = fdiv float %2624, %2625
  %2627 = fcmp olt float %2570, 1.000000e+00
  %2628 = select i1 %2627, float %2570, float 1.000000e+00
  %2629 = sitofp i32 %2613 to float
  %2630 = fmul float %2626, %2629
  %2631 = fadd float %2628, 0xBFB99999A0000000
  %2632 = shl i32 %2622, 3
  %2633 = sitofp i32 %2632 to float
  %2634 = fmul float %2631, %2633
  %2635 = fcmp olt float %2630, %2634
  %2636 = select i1 %2635, float %2630, float %2634
  %2637 = fptosi float %2636 to i32
  %2638 = sub nsw i32 %2613, %2637
  br label %2639

2639:                                             ; preds = %2614, %2612
  %2640 = phi i32 [ %2638, %2614 ], [ %2613, %2612 ]
  %2641 = shl i32 19, %59
  %2642 = sub nsw i32 %2571, %2641
  %2643 = add nsw i32 %2640, %2642
  %2644 = fadd float %2572, 0xBFA6872B00000000
  %2645 = sitofp i32 %2643 to float
  %2646 = fmul float %2644, %2645
  %2647 = fptosi float %2646 to i32
  %2648 = add nsw i32 %2643, %2647
  %2649 = icmp ne i32 %2573, 0
  %2650 = or i1 %2649, %2599
  br i1 %2650, label %2669, label %2651

2651:                                             ; preds = %2639
  %2652 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 30, i32 1
  %2653 = load float, float* %2652, align 4
  %2654 = fadd float %2653, 0xBFC3333340000000
  %2655 = fcmp olt float %2654, 0.000000e+00
  %2656 = fadd float %2654, 0xBFBEB851E0000000
  %2657 = select i1 %2655, float 0xBFBEB851E0000000, float %2656
  %2658 = shl i32 %2596, 3
  %2659 = sitofp i32 %2658 to float
  %2660 = fmul float %2659, 0x3FF3333340000000
  %2661 = fmul float %2660, %2657
  %2662 = fptosi float %2661 to i32
  %2663 = add nsw i32 %2648, %2662
  %2664 = icmp eq i32 %528, 0
  br i1 %2664, label %2669, label %2665

2665:                                             ; preds = %2651
  %2666 = fmul float %2659, 0x3FE99999A0000000
  %2667 = fptosi float %2666 to i32
  %2668 = add nsw i32 %2663, %2667
  br label %2669

2669:                                             ; preds = %2665, %2651, %2639
  %2670 = phi i32 [ %2648, %2639 ], [ %2668, %2665 ], [ %2663, %2651 ]
  %2671 = or i1 %2649, %2576
  br i1 %2671, label %2681, label %2672

2672:                                             ; preds = %2669
  %2673 = shl i32 %2596, 3
  %2674 = sitofp i32 %2673 to float
  %2675 = fmul float %1273, %2674
  %2676 = fptosi float %2675 to i32
  %2677 = add nsw i32 %2670, %2676
  %2678 = sdiv i32 %2670, 4
  %2679 = icmp sgt i32 %2678, %2677
  %2680 = select i1 %2679, i32 %2678, i32 %2677
  br label %2681

2681:                                             ; preds = %2672, %2669
  %2682 = phi i32 [ %2670, %2669 ], [ %2680, %2672 ]
  %2683 = add nsw i32 %2577, -2
  %2684 = sext i32 %2683 to i64
  %2685 = getelementptr inbounds i16, i16* %2578, i64 %2684
  %2686 = load i16, i16* %2685, align 2
  %2687 = sext i16 %2686 to i32
  %2688 = shl i32 %2687, %59
  %2689 = shl i32 %23, 3
  %2690 = mul i32 %2689, %2688
  %2691 = sitofp i32 %2690 to float
  %2692 = fmul float %1622, %2691
  %2693 = fptosi float %2692 to i32
  %2694 = ashr i32 %2682, 2
  %2695 = icmp slt i32 %2694, %2693
  %2696 = select i1 %2695, i32 %2693, i32 %2694
  %2697 = icmp slt i32 %2682, %2696
  %2698 = select i1 %2697, i32 %2682, i32 %2696
  %2699 = icmp ne i32 %2555, 0
  %2700 = and i1 %2699, %2671
  br i1 %2700, label %2701, label %2707

2701:                                             ; preds = %2681
  %2702 = sub nsw i32 %2698, %2563
  %2703 = sitofp i32 %2702 to float
  %2704 = fmul float %2703, 0x3FE570A3E0000000
  %2705 = fptosi float %2704 to i32
  %2706 = add nsw i32 %2563, %2705
  br label %2707

2707:                                             ; preds = %2701, %2681
  %2708 = phi i32 [ %2706, %2701 ], [ %2698, %2681 ]
  %2709 = fcmp olt float %2572, 0x3FC99999A0000000
  %2710 = and i1 %2709, %2576
  br i1 %2710, label %2711, label %2754

2711:                                             ; preds = %2707
  %2712 = sub nsw i32 96000, %156
  %2713 = icmp slt i32 %2712, 32000
  %2714 = select i1 %2713, i32 %2712, i32 32000
  %2715 = icmp slt i32 %2714, 0
  %2716 = sitofp i32 %2714 to float
  %2717 = fmul float %2716, 0x3ECA013300000000
  %2718 = select i1 %2715, float 0.000000e+00, float %2717
  %2719 = fmul float %2718, %1275
  %2720 = sitofp i32 %2708 to float
  %2721 = fmul float %2719, %2720
  %2722 = fptosi float %2721 to i32
  %2723 = add nsw i32 %2708, %2722
  br label %2754

2724:                                             ; preds = %2562
  %2725 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 31, i32 1
  %2726 = load i32, i32* %2725, align 4
  %2727 = icmp slt i32 %2726, 100
  %2728 = lshr i32 96, %142
  %2729 = select i1 %2727, i32 %2728, i32 0
  %2730 = add nsw i32 %2729, %2563
  %2731 = icmp sgt i32 %2726, 100
  %2732 = lshr i32 144, %142
  %2733 = sub nsw i32 0, %2732
  %2734 = select i1 %2731, i32 %2733, i32 0
  %2735 = add i32 %2730, %2734
  %2736 = load float, float* %15, align 4
  %2737 = fadd float %2736, -2.500000e-01
  %2738 = fmul float %2737, 4.000000e+02
  %2739 = fptosi float %2738 to i32
  %2740 = add nsw i32 %2735, %2739
  %2741 = fcmp ogt float %2736, 0x3FE6666660000000
  %2742 = icmp sgt i32 %2740, 400
  %2743 = select i1 %2742, i32 %2740, i32 400
  %2744 = select i1 %2741, i32 %2743, i32 %2740
  %2745 = add i32 %2125, 63
  %2746 = add i32 %2745, %2537
  %2747 = ashr i32 %2746, 6
  %2748 = add nsw i32 %2747, 2
  %2749 = add i32 %94, 359
  %2750 = add i32 %2749, %2125
  %2751 = ashr i32 %2750, 6
  %2752 = icmp sgt i32 %2748, %2751
  %2753 = select i1 %2752, i32 %2748, i32 %2751
  br label %2763

2754:                                             ; preds = %2711, %2707
  %2755 = phi i32 [ %2723, %2711 ], [ %2708, %2707 ]
  %2756 = shl nsw i32 %2563, 1
  %2757 = icmp slt i32 %2756, %2755
  %2758 = select i1 %2757, i32 %2756, i32 %2755
  %2759 = add i32 %2125, 63
  %2760 = add i32 %2759, %2537
  %2761 = ashr i32 %2760, 6
  %2762 = add nsw i32 %2761, 2
  br label %2763

2763:                                             ; preds = %2754, %2724
  %2764 = phi i32 [ %2744, %2724 ], [ %2758, %2754 ]
  %2765 = phi i32 [ %2753, %2724 ], [ %2762, %2754 ]
  %2766 = add nsw i32 %2764, %2537
  %2767 = add nsw i32 %2766, 32
  %2768 = ashr i32 %2767, 6
  %2769 = icmp sgt i32 %2765, %2768
  %2770 = select i1 %2769, i32 %2765, i32 %2768
  %2771 = icmp slt i32 %2543, %2770
  %2772 = select i1 %2771, i32 %2543, i32 %2770
  %2773 = sub nsw i32 %2766, %139
  %2774 = shl i32 %2772, 6
  %2775 = select i1 %444, i32 2, i32 %2772
  %2776 = select i1 %444, i32 0, i32 %2773
  %2777 = select i1 %444, i32 128, i32 %2774
  %2778 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 37
  %2779 = load i32, i32* %2778, align 8
  %2780 = icmp slt i32 %2779, 970
  br i1 %2780, label %2781, label %2786

2781:                                             ; preds = %2763
  %2782 = add nsw i32 %2779, 1
  store i32 %2782, i32* %2778, align 8
  %2783 = add nsw i32 %2779, 21
  %2784 = sitofp i32 %2783 to float
  %2785 = fdiv float 1.000000e+00, %2784
  br label %2786

2786:                                             ; preds = %2763, %2781
  %2787 = phi float [ %2785, %2781 ], [ 0x3F50624DE0000000, %2763 ]
  br i1 %2556, label %2810, label %2788

2788:                                             ; preds = %2786
  %2789 = sub i32 %2777, %139
  %2790 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 34
  %2791 = load i32, i32* %2790, align 4
  %2792 = add nsw i32 %2789, %2791
  store i32 %2792, i32* %2790, align 4
  %2793 = shl i32 %2776, %2540
  %2794 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 36
  %2795 = load i32, i32* %2794, align 4
  %2796 = sub i32 %2793, %2795
  %2797 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 35
  %2798 = load i32, i32* %2797, align 8
  %2799 = sub i32 %2796, %2798
  %2800 = sitofp i32 %2799 to float
  %2801 = fmul float %2787, %2800
  %2802 = fptosi float %2801 to i32
  %2803 = add nsw i32 %2798, %2802
  store i32 %2803, i32* %2797, align 8
  %2804 = sub nsw i32 0, %2803
  store i32 %2804, i32* %2794, align 4
  %2805 = icmp slt i32 %2792, 0
  br i1 %2805, label %2806, label %2810

2806:                                             ; preds = %2788
  %2807 = sdiv i32 %2792, -64
  %2808 = select i1 %444, i32 0, i32 %2807
  %2809 = add nsw i32 %2808, %2775
  store i32 0, i32* %2790, align 4
  br label %2810

2810:                                             ; preds = %2786, %2806, %2788
  %2811 = phi i32 [ %2809, %2806 ], [ %2775, %2788 ], [ %2775, %2786 ]
  %2812 = icmp slt i32 %2543, %2811
  %2813 = select i1 %2812, i32 %2543, i32 %2811
  call void @ec_enc_shrink(%struct.ec_ctx* %159, i32 %2813) #5
  br label %2814

2814:                                             ; preds = %2810, %2535
  %2815 = phi i32 [ %2813, %2810 ], [ %450, %2535 ]
  %2816 = alloca i32, i64 %1607, align 16
  %2817 = bitcast i32* %2816 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %2817, i8 -86, i64 %1608, i1 false)
  %2818 = alloca i32, i64 %1607, align 16
  %2819 = bitcast i32* %2818 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %2819, i8 -86, i64 %1608, i1 false)
  %2820 = alloca i32, i64 %1607, align 16
  %2821 = bitcast i32* %2820 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %2821, i8 -86, i64 %1608, i1 false)
  %2822 = shl nsw i32 %2815, 3
  %2823 = shl i32 %2815, 6
  %2824 = call i32 @ec_tell_frac(%struct.ec_ctx* %159) #5
  %2825 = xor i32 %2824, -1
  %2826 = add i32 %2823, %2825
  %2827 = icmp ugt i32 %59, 1
  %2828 = and i1 %2827, %1878
  br i1 %2828, label %2829, label %2834

2829:                                             ; preds = %2814
  %2830 = shl i32 %59, 3
  %2831 = add i32 %2830, 16
  %2832 = icmp sge i32 %2826, %2831
  %2833 = select i1 %2832, i32 8, i32 0
  br label %2834

2834:                                             ; preds = %2829, %2814
  %2835 = phi i1 [ false, %2814 ], [ %2832, %2829 ]
  %2836 = phi i32 [ 0, %2814 ], [ %2833, %2829 ]
  %2837 = sub nsw i32 %2826, %2836
  %2838 = add nsw i32 %43, -1
  %2839 = getelementptr inbounds %struct.AnalysisInfo, %struct.AnalysisInfo* %498, i64 0, i32 0
  %2840 = load i32, i32* %2839, align 4
  %2841 = icmp eq i32 %2840, 0
  br i1 %2841, label %2861, label %2842

2842:                                             ; preds = %2834
  %2843 = mul nsw i32 %23, 32000
  %2844 = icmp slt i32 %156, %2843
  br i1 %2844, label %2855, label %2845

2845:                                             ; preds = %2842
  %2846 = mul nsw i32 %23, 48000
  %2847 = icmp slt i32 %156, %2846
  br i1 %2847, label %2855, label %2848

2848:                                             ; preds = %2845
  %2849 = mul nsw i32 %23, 60000
  %2850 = icmp slt i32 %156, %2849
  br i1 %2850, label %2855, label %2851

2851:                                             ; preds = %2848
  %2852 = mul nsw i32 %23, 80000
  %2853 = icmp slt i32 %156, %2852
  %2854 = select i1 %2853, i32 19, i32 20
  br label %2855

2855:                                             ; preds = %2851, %2848, %2845, %2842
  %2856 = phi i32 [ 13, %2842 ], [ 16, %2845 ], [ 18, %2848 ], [ %2854, %2851 ]
  %2857 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 30, i32 8
  %2858 = load i32, i32* %2857, align 4
  %2859 = icmp sgt i32 %2858, %2856
  %2860 = select i1 %2859, i32 %2858, i32 %2856
  br label %2861

2861:                                             ; preds = %2834, %2855
  %2862 = phi i32 [ %2860, %2855 ], [ %2838, %2834 ]
  %2863 = load i32, i32* %474, align 4
  %2864 = icmp eq i32 %2863, 0
  %2865 = select i1 %2864, i32 %2862, i32 1
  %2866 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 40
  %2867 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 23
  %2868 = load i32, i32* %2867, align 8
  %2869 = call i32 @clt_compute_allocation(%struct.OpusCustomMode* %33, i32 %41, i32 %43, i32* nonnull %1609, i32* nonnull %2051, i32 %2536, i32* %2866, i32* nonnull %12, i32 %2837, i32* nonnull %13, i32* nonnull %2818, i32* nonnull %2816, i32* nonnull %2820, i32 %23, i32 %59, %struct.ec_ctx* %159, i32 1, i32 %2868, i32 %2865) #5
  %2870 = load i32, i32* %2867, align 8
  %2871 = icmp eq i32 %2870, 0
  br i1 %2871, label %2879, label %2872

2872:                                             ; preds = %2861
  %2873 = add nsw i32 %2870, 1
  %2874 = add nsw i32 %2870, -1
  %2875 = icmp sgt i32 %2874, %2869
  %2876 = select i1 %2875, i32 %2874, i32 %2869
  %2877 = icmp slt i32 %2873, %2876
  %2878 = select i1 %2877, i32 %2873, i32 %2876
  br label %2879

2879:                                             ; preds = %2872, %2861
  %2880 = phi i32 [ %2869, %2861 ], [ %2878, %2872 ]
  store i32 %2880, i32* %2867, align 8
  call void @quant_fine_energy(%struct.OpusCustomMode* %33, i32 %41, i32 %43, float* %73, float* nonnull %1828, i32* nonnull %2816, %struct.ec_ctx* %159, i32 %23) #5
  %2881 = alloca i8, i64 %687, align 16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %2881, i8 -86, i64 %687, i1 false)
  %2882 = sext i32 %51 to i64
  %2883 = getelementptr inbounds float, float* %1594, i64 %2882
  %2884 = select i1 %2127, float* %2883, float* null
  %2885 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 20
  %2886 = load i32, i32* %2885, align 4
  %2887 = load i32, i32* %12, align 4
  %2888 = load i32, i32* %2866, align 4
  %2889 = sub nsw i32 %2823, %2836
  %2890 = load i32, i32* %13, align 4
  %2891 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 19
  %2892 = load i32, i32* %545, align 4
  %2893 = load i32, i32* %691, align 4
  %2894 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 17
  %2895 = load i32, i32* %2894, align 8
  call void @quant_all_bands(i32 1, %struct.OpusCustomMode* %33, i32 %41, i32 %43, float* nonnull %1594, float* %2884, i8* nonnull %2881, float* nonnull %588, i32* nonnull %2818, i32 %1590, i32 %2886, i32 %2887, i32 %2888, i32* nonnull %1623, i32 %2889, i32 %2890, %struct.ec_ctx* %159, i32 %59, i32 %2869, i32* %2891, i32 %2892, i32 %2893, i32 %2895) #5
  br i1 %2835, label %2896, label %2901

2896:                                             ; preds = %2879
  %2897 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 29
  %2898 = load i32, i32* %2897, align 8
  %2899 = icmp slt i32 %2898, 2
  %2900 = zext i1 %2899 to i32
  call void @ec_enc_bits(%struct.ec_ctx* %159, i32 %2900, i32 1) #5
  br label %2901

2901:                                             ; preds = %2896, %2879
  %2902 = load i32, i32* %1871, align 8
  %2903 = load i32, i32* %1873, align 8
  %2904 = call i32 @llvm.ctlz.i32(i32 %2903, i1 true) #5, !range !4
  %2905 = or i32 %2904, -32
  %2906 = sub i32 %2822, %2902
  %2907 = sub i32 %2906, %2905
  call void @quant_energy_finalise(%struct.OpusCustomMode* %33, i32 %41, i32 %43, float* %73, float* nonnull %1828, i32* nonnull %2816, i32* nonnull %2820, i32 %2907, %struct.ec_ctx* %159, i32 %23) #5
  %2908 = bitcast float* %78 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %2908, i8 0, i64 %587, i1 false)
  br i1 %1830, label %2909, label %2968

2909:                                             ; preds = %2901
  %2910 = sext i32 %41 to i64
  %2911 = sext i32 %23 to i64
  %2912 = sub nsw i64 %758, %2910
  %2913 = icmp ult i64 %2912, 8
  %2914 = and i64 %2912, -8
  %2915 = add nsw i64 %2914, %2910
  %2916 = icmp eq i64 %2912, %2914
  br label %2917

2917:                                             ; preds = %2909, %2965
  %2918 = phi i64 [ 0, %2909 ], [ %2966, %2965 ]
  %2919 = mul nsw i64 %2918, %1607
  br i1 %2913, label %2949, label %2920

2920:                                             ; preds = %2917, %2920
  %2921 = phi i64 [ %2946, %2920 ], [ 0, %2917 ]
  %2922 = add i64 %2921, %2910
  %2923 = add nsw i64 %2922, %2919
  %2924 = getelementptr inbounds float, float* %1828, i64 %2923
  %2925 = bitcast float* %2924 to <4 x float>*
  %2926 = load <4 x float>, <4 x float>* %2925, align 4
  %2927 = getelementptr inbounds float, float* %2924, i64 4
  %2928 = bitcast float* %2927 to <4 x float>*
  %2929 = load <4 x float>, <4 x float>* %2928, align 4
  %2930 = fcmp ogt <4 x float> %2926, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %2931 = fcmp ogt <4 x float> %2929, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %2932 = select <4 x i1> %2930, <4 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, <4 x float> %2926
  %2933 = select <4 x i1> %2931, <4 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, <4 x float> %2929
  %2934 = fcmp olt <4 x float> %2932, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %2935 = fcmp olt <4 x float> %2933, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %2936 = or <4 x i1> %2930, %2934
  %2937 = or <4 x i1> %2931, %2935
  %2938 = select <4 x i1> %2934, <4 x float> <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>, <4 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %2939 = select <4 x i1> %2935, <4 x float> <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>, <4 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %2940 = select <4 x i1> %2936, <4 x float> %2938, <4 x float> %2926
  %2941 = select <4 x i1> %2937, <4 x float> %2939, <4 x float> %2929
  %2942 = getelementptr inbounds float, float* %78, i64 %2923
  %2943 = bitcast float* %2942 to <4 x float>*
  store <4 x float> %2940, <4 x float>* %2943, align 4
  %2944 = getelementptr inbounds float, float* %2942, i64 4
  %2945 = bitcast float* %2944 to <4 x float>*
  store <4 x float> %2941, <4 x float>* %2945, align 4
  %2946 = add i64 %2921, 8
  %2947 = icmp eq i64 %2946, %2914
  br i1 %2947, label %2948, label %2920, !llvm.loop !27

2948:                                             ; preds = %2920
  br i1 %2916, label %2965, label %2949

2949:                                             ; preds = %2948, %2917
  %2950 = phi i64 [ %2910, %2917 ], [ %2915, %2948 ]
  br label %2951

2951:                                             ; preds = %2949, %2951
  %2952 = phi i64 [ %2963, %2951 ], [ %2950, %2949 ]
  %2953 = add nsw i64 %2952, %2919
  %2954 = getelementptr inbounds float, float* %1828, i64 %2953
  %2955 = load float, float* %2954, align 4
  %2956 = fcmp ogt float %2955, 5.000000e-01
  %2957 = select i1 %2956, float 5.000000e-01, float %2955
  %2958 = fcmp olt float %2957, -5.000000e-01
  %2959 = or i1 %2956, %2958
  %2960 = select i1 %2958, float -5.000000e-01, float 5.000000e-01
  %2961 = select i1 %2959, float %2960, float %2955
  %2962 = getelementptr inbounds float, float* %78, i64 %2953
  store float %2961, float* %2962, align 4
  %2963 = add nsw i64 %2952, 1
  %2964 = icmp eq i64 %2963, %758
  br i1 %2964, label %2965, label %2951, !llvm.loop !28

2965:                                             ; preds = %2951, %2948
  %2966 = add nuw nsw i64 %2918, 1
  %2967 = icmp slt i64 %2966, %2911
  br i1 %2967, label %2917, label %2968

2968:                                             ; preds = %2965, %2901
  %2969 = icmp sgt i32 %688, 0
  %2970 = and i1 %444, %2969
  br i1 %2970, label %2971, label %3050

2971:                                             ; preds = %2968
  %2972 = zext i32 %688 to i64
  %2973 = icmp ult i32 %688, 8
  br i1 %2973, label %3043, label %2974

2974:                                             ; preds = %2971
  %2975 = and i64 %2972, 4294967288
  %2976 = add nsw i64 %2975, -8
  %2977 = lshr exact i64 %2976, 3
  %2978 = add nuw nsw i64 %2977, 1
  %2979 = and i64 %2978, 7
  %2980 = icmp ult i64 %2976, 56
  br i1 %2980, label %3028, label %2981

2981:                                             ; preds = %2974
  %2982 = sub nsw i64 %2978, %2979
  br label %2983

2983:                                             ; preds = %2983, %2981
  %2984 = phi i64 [ 0, %2981 ], [ %3025, %2983 ]
  %2985 = phi i64 [ %2982, %2981 ], [ %3026, %2983 ]
  %2986 = getelementptr inbounds float, float* %73, i64 %2984
  %2987 = bitcast float* %2986 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %2987, align 4
  %2988 = getelementptr inbounds float, float* %2986, i64 4
  %2989 = bitcast float* %2988 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %2989, align 4
  %2990 = or i64 %2984, 8
  %2991 = getelementptr inbounds float, float* %73, i64 %2990
  %2992 = bitcast float* %2991 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %2992, align 4
  %2993 = getelementptr inbounds float, float* %2991, i64 4
  %2994 = bitcast float* %2993 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %2994, align 4
  %2995 = or i64 %2984, 16
  %2996 = getelementptr inbounds float, float* %73, i64 %2995
  %2997 = bitcast float* %2996 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %2997, align 4
  %2998 = getelementptr inbounds float, float* %2996, i64 4
  %2999 = bitcast float* %2998 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %2999, align 4
  %3000 = or i64 %2984, 24
  %3001 = getelementptr inbounds float, float* %73, i64 %3000
  %3002 = bitcast float* %3001 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %3002, align 4
  %3003 = getelementptr inbounds float, float* %3001, i64 4
  %3004 = bitcast float* %3003 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %3004, align 4
  %3005 = or i64 %2984, 32
  %3006 = getelementptr inbounds float, float* %73, i64 %3005
  %3007 = bitcast float* %3006 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %3007, align 4
  %3008 = getelementptr inbounds float, float* %3006, i64 4
  %3009 = bitcast float* %3008 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %3009, align 4
  %3010 = or i64 %2984, 40
  %3011 = getelementptr inbounds float, float* %73, i64 %3010
  %3012 = bitcast float* %3011 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %3012, align 4
  %3013 = getelementptr inbounds float, float* %3011, i64 4
  %3014 = bitcast float* %3013 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %3014, align 4
  %3015 = or i64 %2984, 48
  %3016 = getelementptr inbounds float, float* %73, i64 %3015
  %3017 = bitcast float* %3016 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %3017, align 4
  %3018 = getelementptr inbounds float, float* %3016, i64 4
  %3019 = bitcast float* %3018 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %3019, align 4
  %3020 = or i64 %2984, 56
  %3021 = getelementptr inbounds float, float* %73, i64 %3020
  %3022 = bitcast float* %3021 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %3022, align 4
  %3023 = getelementptr inbounds float, float* %3021, i64 4
  %3024 = bitcast float* %3023 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %3024, align 4
  %3025 = add i64 %2984, 64
  %3026 = add i64 %2985, -8
  %3027 = icmp eq i64 %3026, 0
  br i1 %3027, label %3028, label %2983, !llvm.loop !29

3028:                                             ; preds = %2983, %2974
  %3029 = phi i64 [ 0, %2974 ], [ %3025, %2983 ]
  %3030 = icmp eq i64 %2979, 0
  br i1 %3030, label %3041, label %3031

3031:                                             ; preds = %3028, %3031
  %3032 = phi i64 [ %3038, %3031 ], [ %3029, %3028 ]
  %3033 = phi i64 [ %3039, %3031 ], [ %2979, %3028 ]
  %3034 = getelementptr inbounds float, float* %73, i64 %3032
  %3035 = bitcast float* %3034 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %3035, align 4
  %3036 = getelementptr inbounds float, float* %3034, i64 4
  %3037 = bitcast float* %3036 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %3037, align 4
  %3038 = add i64 %3032, 8
  %3039 = add i64 %3033, -1
  %3040 = icmp eq i64 %3039, 0
  br i1 %3040, label %3041, label %3031, !llvm.loop !30

3041:                                             ; preds = %3031, %3028
  %3042 = icmp eq i64 %2975, %2972
  br i1 %3042, label %3050, label %3043

3043:                                             ; preds = %3041, %2971
  %3044 = phi i64 [ 0, %2971 ], [ %2975, %3041 ]
  br label %3045

3045:                                             ; preds = %3043, %3045
  %3046 = phi i64 [ %3048, %3045 ], [ %3044, %3043 ]
  %3047 = getelementptr inbounds float, float* %73, i64 %3046
  store float -2.800000e+01, float* %3047, align 4
  %3048 = add nuw nsw i64 %3046, 1
  %3049 = icmp eq i64 %3048, %2972
  br i1 %3049, label %3050, label %3045, !llvm.loop !31

3050:                                             ; preds = %3045, %3041, %2968
  %3051 = load i32, i32* %10, align 4
  %3052 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 26
  store i32 %3051, i32* %3052, align 4
  %3053 = bitcast float* %11 to i32*
  %3054 = load i32, i32* %3053, align 4
  %3055 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 27
  %3056 = bitcast float* %3055 to i32*
  store i32 %3054, i32* %3056, align 8
  %3057 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 28
  store i32 %497, i32* %3057, align 4
  br i1 %707, label %3058, label %3062

3058:                                             ; preds = %3050
  %3059 = getelementptr inbounds float, float* %73, i64 %1607
  %3060 = bitcast float* %3059 to i8*
  %3061 = bitcast float* %73 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3060, i8* align 4 %3061, i64 %1608, i1 false)
  br label %3062

3062:                                             ; preds = %3058, %3050
  br i1 %1878, label %3063, label %3179

3063:                                             ; preds = %3062
  %3064 = icmp sgt i32 %74, 0
  br i1 %3064, label %3065, label %3200

3065:                                             ; preds = %3063
  %3066 = zext i32 %74 to i64
  %3067 = icmp ult i32 %74, 8
  br i1 %3067, label %3068, label %3085

3068:                                             ; preds = %3177, %3085, %3065
  %3069 = phi i64 [ 0, %3085 ], [ 0, %3065 ], [ %3104, %3177 ]
  %3070 = xor i64 %3069, -1
  %3071 = and i64 %3066, 1
  %3072 = icmp eq i64 %3071, 0
  br i1 %3072, label %3081, label %3073

3073:                                             ; preds = %3068
  %3074 = getelementptr inbounds float, float* %76, i64 %3069
  %3075 = load float, float* %3074, align 4
  %3076 = getelementptr inbounds float, float* %73, i64 %3069
  %3077 = load float, float* %3076, align 4
  %3078 = fcmp olt float %3075, %3077
  %3079 = select i1 %3078, float %3075, float %3077
  store float %3079, float* %3074, align 4
  %3080 = or i64 %3069, 1
  br label %3081

3081:                                             ; preds = %3068, %3073
  %3082 = phi i64 [ %3069, %3068 ], [ %3080, %3073 ]
  %3083 = sub nsw i64 0, %3066
  %3084 = icmp eq i64 %3070, %3083
  br i1 %3084, label %3200, label %3183

3085:                                             ; preds = %3065
  %3086 = shl nsw i64 %75, 2
  %3087 = shl nsw i64 %72, 2
  %3088 = add nsw i64 %3086, %3087
  %3089 = add nsw i64 %3088, 252
  %3090 = getelementptr i8, i8* %7, i64 %3089
  %3091 = shl nuw nsw i64 %3066, 2
  %3092 = add nsw i64 %3088, %3091
  %3093 = add nsw i64 %3092, 252
  %3094 = getelementptr i8, i8* %7, i64 %3093
  %3095 = add nsw i64 %3087, 252
  %3096 = getelementptr i8, i8* %7, i64 %3095
  %3097 = add nsw i64 %3087, %3091
  %3098 = add nsw i64 %3097, 252
  %3099 = getelementptr i8, i8* %7, i64 %3098
  %3100 = icmp ult i8* %3090, %3099
  %3101 = icmp ult i8* %3096, %3094
  %3102 = and i1 %3100, %3101
  br i1 %3102, label %3068, label %3103

3103:                                             ; preds = %3085
  %3104 = and i64 %3066, 4294967288
  %3105 = add nsw i64 %3104, -8
  %3106 = lshr exact i64 %3105, 3
  %3107 = add nuw nsw i64 %3106, 1
  %3108 = and i64 %3107, 1
  %3109 = icmp eq i64 %3105, 0
  br i1 %3109, label %3155, label %3110

3110:                                             ; preds = %3103
  %3111 = sub nuw nsw i64 %3107, %3108
  br label %3112

3112:                                             ; preds = %3112, %3110
  %3113 = phi i64 [ 0, %3110 ], [ %3152, %3112 ]
  %3114 = phi i64 [ %3111, %3110 ], [ %3153, %3112 ]
  %3115 = getelementptr inbounds float, float* %76, i64 %3113
  %3116 = bitcast float* %3115 to <4 x float>*
  %3117 = load <4 x float>, <4 x float>* %3116, align 4, !alias.scope !32, !noalias !35
  %3118 = getelementptr inbounds float, float* %3115, i64 4
  %3119 = bitcast float* %3118 to <4 x float>*
  %3120 = load <4 x float>, <4 x float>* %3119, align 4, !alias.scope !32, !noalias !35
  %3121 = getelementptr inbounds float, float* %73, i64 %3113
  %3122 = bitcast float* %3121 to <4 x float>*
  %3123 = load <4 x float>, <4 x float>* %3122, align 4, !alias.scope !35
  %3124 = getelementptr inbounds float, float* %3121, i64 4
  %3125 = bitcast float* %3124 to <4 x float>*
  %3126 = load <4 x float>, <4 x float>* %3125, align 4, !alias.scope !35
  %3127 = fcmp olt <4 x float> %3117, %3123
  %3128 = fcmp olt <4 x float> %3120, %3126
  %3129 = select <4 x i1> %3127, <4 x float> %3117, <4 x float> %3123
  %3130 = select <4 x i1> %3128, <4 x float> %3120, <4 x float> %3126
  %3131 = bitcast float* %3115 to <4 x float>*
  store <4 x float> %3129, <4 x float>* %3131, align 4, !alias.scope !32, !noalias !35
  %3132 = bitcast float* %3118 to <4 x float>*
  store <4 x float> %3130, <4 x float>* %3132, align 4, !alias.scope !32, !noalias !35
  %3133 = or i64 %3113, 8
  %3134 = getelementptr inbounds float, float* %76, i64 %3133
  %3135 = bitcast float* %3134 to <4 x float>*
  %3136 = load <4 x float>, <4 x float>* %3135, align 4, !alias.scope !32, !noalias !35
  %3137 = getelementptr inbounds float, float* %3134, i64 4
  %3138 = bitcast float* %3137 to <4 x float>*
  %3139 = load <4 x float>, <4 x float>* %3138, align 4, !alias.scope !32, !noalias !35
  %3140 = getelementptr inbounds float, float* %73, i64 %3133
  %3141 = bitcast float* %3140 to <4 x float>*
  %3142 = load <4 x float>, <4 x float>* %3141, align 4, !alias.scope !35
  %3143 = getelementptr inbounds float, float* %3140, i64 4
  %3144 = bitcast float* %3143 to <4 x float>*
  %3145 = load <4 x float>, <4 x float>* %3144, align 4, !alias.scope !35
  %3146 = fcmp olt <4 x float> %3136, %3142
  %3147 = fcmp olt <4 x float> %3139, %3145
  %3148 = select <4 x i1> %3146, <4 x float> %3136, <4 x float> %3142
  %3149 = select <4 x i1> %3147, <4 x float> %3139, <4 x float> %3145
  %3150 = bitcast float* %3134 to <4 x float>*
  store <4 x float> %3148, <4 x float>* %3150, align 4, !alias.scope !32, !noalias !35
  %3151 = bitcast float* %3137 to <4 x float>*
  store <4 x float> %3149, <4 x float>* %3151, align 4, !alias.scope !32, !noalias !35
  %3152 = add i64 %3113, 16
  %3153 = add i64 %3114, -2
  %3154 = icmp eq i64 %3153, 0
  br i1 %3154, label %3155, label %3112, !llvm.loop !37

3155:                                             ; preds = %3112, %3103
  %3156 = phi i64 [ 0, %3103 ], [ %3152, %3112 ]
  %3157 = icmp eq i64 %3108, 0
  br i1 %3157, label %3177, label %3158

3158:                                             ; preds = %3155
  %3159 = getelementptr inbounds float, float* %76, i64 %3156
  %3160 = bitcast float* %3159 to <4 x float>*
  %3161 = load <4 x float>, <4 x float>* %3160, align 4, !alias.scope !32, !noalias !35
  %3162 = getelementptr inbounds float, float* %3159, i64 4
  %3163 = bitcast float* %3162 to <4 x float>*
  %3164 = load <4 x float>, <4 x float>* %3163, align 4, !alias.scope !32, !noalias !35
  %3165 = getelementptr inbounds float, float* %73, i64 %3156
  %3166 = bitcast float* %3165 to <4 x float>*
  %3167 = load <4 x float>, <4 x float>* %3166, align 4, !alias.scope !35
  %3168 = getelementptr inbounds float, float* %3165, i64 4
  %3169 = bitcast float* %3168 to <4 x float>*
  %3170 = load <4 x float>, <4 x float>* %3169, align 4, !alias.scope !35
  %3171 = fcmp olt <4 x float> %3161, %3167
  %3172 = fcmp olt <4 x float> %3164, %3170
  %3173 = select <4 x i1> %3171, <4 x float> %3161, <4 x float> %3167
  %3174 = select <4 x i1> %3172, <4 x float> %3164, <4 x float> %3170
  %3175 = bitcast float* %3159 to <4 x float>*
  store <4 x float> %3173, <4 x float>* %3175, align 4, !alias.scope !32, !noalias !35
  %3176 = bitcast float* %3162 to <4 x float>*
  store <4 x float> %3174, <4 x float>* %3176, align 4, !alias.scope !32, !noalias !35
  br label %3177

3177:                                             ; preds = %3155, %3158
  %3178 = icmp eq i64 %3104, %3066
  br i1 %3178, label %3200, label %3068

3179:                                             ; preds = %3062
  %3180 = bitcast float* %77 to i8*
  %3181 = bitcast float* %76 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3180, i8* align 4 %3181, i64 %587, i1 false)
  %3182 = bitcast float* %73 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3181, i8* align 4 %3182, i64 %587, i1 false)
  br label %3200

3183:                                             ; preds = %3081, %3183
  %3184 = phi i64 [ %3198, %3183 ], [ %3082, %3081 ]
  %3185 = getelementptr inbounds float, float* %76, i64 %3184
  %3186 = load float, float* %3185, align 4
  %3187 = getelementptr inbounds float, float* %73, i64 %3184
  %3188 = load float, float* %3187, align 4
  %3189 = fcmp olt float %3186, %3188
  %3190 = select i1 %3189, float %3186, float %3188
  store float %3190, float* %3185, align 4
  %3191 = add nuw nsw i64 %3184, 1
  %3192 = getelementptr inbounds float, float* %76, i64 %3191
  %3193 = load float, float* %3192, align 4
  %3194 = getelementptr inbounds float, float* %73, i64 %3191
  %3195 = load float, float* %3194, align 4
  %3196 = fcmp olt float %3193, %3195
  %3197 = select i1 %3196, float %3193, float %3195
  store float %3197, float* %3192, align 4
  %3198 = add nuw nsw i64 %3184, 2
  %3199 = icmp eq i64 %3198, %3066
  br i1 %3199, label %3200, label %3183, !llvm.loop !38

3200:                                             ; preds = %3081, %3183, %3177, %3063, %3179
  %3201 = icmp sgt i32 %41, 0
  %3202 = icmp slt i32 %43, %35
  br i1 %3201, label %3203, label %3466

3203:                                             ; preds = %3200
  %3204 = zext i32 %41 to i64
  %3205 = sub nsw i64 %1607, %758
  %3206 = add nsw i64 %758, %72
  %3207 = add nsw i64 %1607, %72
  %3208 = shl nsw i64 %75, 1
  %3209 = add nsw i64 %3208, %758
  %3210 = add nsw i64 %3209, %72
  %3211 = add nsw i64 %3208, %1607
  %3212 = add nsw i64 %3211, %72
  %3213 = add nsw i64 %758, %75
  %3214 = add nsw i64 %3213, %72
  %3215 = add nsw i64 %1607, %75
  %3216 = add nsw i64 %3215, %72
  %3217 = add nsw i64 %72, %3204
  %3218 = shl nsw i64 %75, 1
  %3219 = add nsw i64 %3218, %72
  %3220 = add nsw i64 %3219, %3204
  %3221 = add nsw i64 %75, %72
  %3222 = add nsw i64 %3221, %3204
  %3223 = and i64 %3204, 4294967288
  %3224 = add nsw i64 %3223, -8
  %3225 = lshr exact i64 %3224, 3
  %3226 = add nuw nsw i64 %3225, 1
  %3227 = sub nsw i64 %1607, %758
  %3228 = add nsw i64 %3227, -8
  %3229 = lshr i64 %3228, 3
  %3230 = add nuw nsw i64 %3229, 1
  %3231 = icmp ult i32 %41, 8
  %3232 = and i64 %3204, 4294967288
  %3233 = and i64 %3226, 1
  %3234 = icmp eq i64 %3224, 0
  %3235 = sub nuw nsw i64 %3226, %3233
  %3236 = icmp eq i64 %3233, 0
  %3237 = icmp eq i64 %3232, %3204
  %3238 = and i64 %3204, 1
  %3239 = icmp eq i64 %3238, 0
  %3240 = sub nsw i64 0, %3204
  %3241 = icmp ult i64 %3205, 8
  %3242 = and i64 %3205, -8
  %3243 = add nsw i64 %3242, %758
  %3244 = and i64 %3230, 1
  %3245 = icmp eq i64 %3229, 0
  %3246 = sub nuw nsw i64 %3230, %3244
  %3247 = icmp eq i64 %3244, 0
  %3248 = icmp eq i64 %3205, %3242
  %3249 = sub nsw i64 0, %1607
  br label %3250

3250:                                             ; preds = %3203, %3354
  %3251 = phi i64 [ 0, %3203 ], [ %3355, %3354 ]
  %3252 = mul i64 %3251, %1607
  %3253 = add i64 %3252, %72
  %3254 = getelementptr %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 43, i64 %3253
  %3255 = add i64 %3217, %3252
  %3256 = getelementptr %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 43, i64 %3255
  %3257 = add i64 %3219, %3252
  %3258 = getelementptr %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 43, i64 %3257
  %3259 = add i64 %3220, %3252
  %3260 = getelementptr %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 43, i64 %3259
  %3261 = add i64 %3221, %3252
  %3262 = getelementptr %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 43, i64 %3261
  %3263 = add i64 %3222, %3252
  %3264 = getelementptr %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 43, i64 %3263
  %3265 = mul i64 %3251, %1607
  %3266 = add i64 %3206, %3265
  %3267 = getelementptr %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 43, i64 %3266
  %3268 = add i64 %3207, %3265
  %3269 = getelementptr %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 43, i64 %3268
  %3270 = add i64 %3210, %3265
  %3271 = getelementptr %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 43, i64 %3270
  %3272 = add i64 %3212, %3265
  %3273 = getelementptr %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 43, i64 %3272
  %3274 = add i64 %3214, %3265
  %3275 = getelementptr %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 43, i64 %3274
  %3276 = add i64 %3216, %3265
  %3277 = getelementptr %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 43, i64 %3276
  %3278 = mul nsw i64 %3251, %1607
  br i1 %3231, label %3279, label %3291

3279:                                             ; preds = %3353, %3291, %3250
  %3280 = phi i64 [ 0, %3291 ], [ 0, %3250 ], [ %3232, %3353 ]
  %3281 = xor i64 %3280, -1
  br i1 %3239, label %3288, label %3282

3282:                                             ; preds = %3279
  %3283 = add nsw i64 %3280, %3278
  %3284 = getelementptr inbounds float, float* %73, i64 %3283
  store float 0.000000e+00, float* %3284, align 4
  %3285 = getelementptr inbounds float, float* %77, i64 %3283
  store float -2.800000e+01, float* %3285, align 4
  %3286 = getelementptr inbounds float, float* %76, i64 %3283
  store float -2.800000e+01, float* %3286, align 4
  %3287 = or i64 %3280, 1
  br label %3288

3288:                                             ; preds = %3282, %3279
  %3289 = phi i64 [ %3287, %3282 ], [ %3280, %3279 ]
  %3290 = icmp eq i64 %3281, %3240
  br i1 %3290, label %3383, label %3370

3291:                                             ; preds = %3250
  %3292 = icmp ult float* %3254, %3260
  %3293 = icmp ult float* %3258, %3256
  %3294 = and i1 %3292, %3293
  %3295 = icmp ult float* %3254, %3264
  %3296 = icmp ult float* %3262, %3256
  %3297 = and i1 %3295, %3296
  %3298 = or i1 %3294, %3297
  %3299 = icmp ult float* %3258, %3264
  %3300 = icmp ult float* %3262, %3260
  %3301 = and i1 %3299, %3300
  %3302 = or i1 %3298, %3301
  br i1 %3302, label %3279, label %3303

3303:                                             ; preds = %3291
  br i1 %3234, label %3337, label %3304

3304:                                             ; preds = %3303, %3304
  %3305 = phi i64 [ %3334, %3304 ], [ 0, %3303 ]
  %3306 = phi i64 [ %3335, %3304 ], [ %3235, %3303 ]
  %3307 = add nsw i64 %3305, %3278
  %3308 = getelementptr inbounds float, float* %73, i64 %3307
  %3309 = bitcast float* %3308 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %3309, align 4, !alias.scope !39, !noalias !42
  %3310 = getelementptr inbounds float, float* %3308, i64 4
  %3311 = bitcast float* %3310 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %3311, align 4, !alias.scope !39, !noalias !42
  %3312 = getelementptr inbounds float, float* %77, i64 %3307
  %3313 = bitcast float* %3312 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %3313, align 4, !alias.scope !45, !noalias !46
  %3314 = getelementptr inbounds float, float* %3312, i64 4
  %3315 = bitcast float* %3314 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %3315, align 4, !alias.scope !45, !noalias !46
  %3316 = getelementptr inbounds float, float* %76, i64 %3307
  %3317 = bitcast float* %3316 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %3317, align 4, !alias.scope !46
  %3318 = getelementptr inbounds float, float* %3316, i64 4
  %3319 = bitcast float* %3318 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %3319, align 4, !alias.scope !46
  %3320 = or i64 %3305, 8
  %3321 = add nsw i64 %3320, %3278
  %3322 = getelementptr inbounds float, float* %73, i64 %3321
  %3323 = bitcast float* %3322 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %3323, align 4, !alias.scope !39, !noalias !42
  %3324 = getelementptr inbounds float, float* %3322, i64 4
  %3325 = bitcast float* %3324 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %3325, align 4, !alias.scope !39, !noalias !42
  %3326 = getelementptr inbounds float, float* %77, i64 %3321
  %3327 = bitcast float* %3326 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %3327, align 4, !alias.scope !45, !noalias !46
  %3328 = getelementptr inbounds float, float* %3326, i64 4
  %3329 = bitcast float* %3328 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %3329, align 4, !alias.scope !45, !noalias !46
  %3330 = getelementptr inbounds float, float* %76, i64 %3321
  %3331 = bitcast float* %3330 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %3331, align 4, !alias.scope !46
  %3332 = getelementptr inbounds float, float* %3330, i64 4
  %3333 = bitcast float* %3332 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %3333, align 4, !alias.scope !46
  %3334 = add i64 %3305, 16
  %3335 = add i64 %3306, -2
  %3336 = icmp eq i64 %3335, 0
  br i1 %3336, label %3337, label %3304, !llvm.loop !47

3337:                                             ; preds = %3304, %3303
  %3338 = phi i64 [ 0, %3303 ], [ %3334, %3304 ]
  br i1 %3236, label %3353, label %3339

3339:                                             ; preds = %3337
  %3340 = add nsw i64 %3338, %3278
  %3341 = getelementptr inbounds float, float* %73, i64 %3340
  %3342 = bitcast float* %3341 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %3342, align 4, !alias.scope !39, !noalias !42
  %3343 = getelementptr inbounds float, float* %3341, i64 4
  %3344 = bitcast float* %3343 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %3344, align 4, !alias.scope !39, !noalias !42
  %3345 = getelementptr inbounds float, float* %77, i64 %3340
  %3346 = bitcast float* %3345 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %3346, align 4, !alias.scope !45, !noalias !46
  %3347 = getelementptr inbounds float, float* %3345, i64 4
  %3348 = bitcast float* %3347 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %3348, align 4, !alias.scope !45, !noalias !46
  %3349 = getelementptr inbounds float, float* %76, i64 %3340
  %3350 = bitcast float* %3349 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %3350, align 4, !alias.scope !46
  %3351 = getelementptr inbounds float, float* %3349, i64 4
  %3352 = bitcast float* %3351 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %3352, align 4, !alias.scope !46
  br label %3353

3353:                                             ; preds = %3337, %3339
  br i1 %3237, label %3383, label %3279

3354:                                             ; preds = %3397, %3357, %3465, %3383
  %3355 = add nuw nsw i64 %3251, 1
  %3356 = icmp slt i64 %3355, %455
  br i1 %3356, label %3250, label %3606

3357:                                             ; preds = %3397, %3357
  %3358 = phi i64 [ %3368, %3357 ], [ %3398, %3397 ]
  %3359 = add nsw i64 %3358, %3278
  %3360 = getelementptr inbounds float, float* %73, i64 %3359
  store float 0.000000e+00, float* %3360, align 4
  %3361 = getelementptr inbounds float, float* %77, i64 %3359
  store float -2.800000e+01, float* %3361, align 4
  %3362 = getelementptr inbounds float, float* %76, i64 %3359
  store float -2.800000e+01, float* %3362, align 4
  %3363 = add nsw i64 %3358, 1
  %3364 = add nsw i64 %3363, %3278
  %3365 = getelementptr inbounds float, float* %73, i64 %3364
  store float 0.000000e+00, float* %3365, align 4
  %3366 = getelementptr inbounds float, float* %77, i64 %3364
  store float -2.800000e+01, float* %3366, align 4
  %3367 = getelementptr inbounds float, float* %76, i64 %3364
  store float -2.800000e+01, float* %3367, align 4
  %3368 = add nsw i64 %3358, 2
  %3369 = icmp eq i64 %3368, %1607
  br i1 %3369, label %3354, label %3357, !llvm.loop !48

3370:                                             ; preds = %3288, %3370
  %3371 = phi i64 [ %3381, %3370 ], [ %3289, %3288 ]
  %3372 = add nsw i64 %3371, %3278
  %3373 = getelementptr inbounds float, float* %73, i64 %3372
  store float 0.000000e+00, float* %3373, align 4
  %3374 = getelementptr inbounds float, float* %77, i64 %3372
  store float -2.800000e+01, float* %3374, align 4
  %3375 = getelementptr inbounds float, float* %76, i64 %3372
  store float -2.800000e+01, float* %3375, align 4
  %3376 = add nuw nsw i64 %3371, 1
  %3377 = add nsw i64 %3376, %3278
  %3378 = getelementptr inbounds float, float* %73, i64 %3377
  store float 0.000000e+00, float* %3378, align 4
  %3379 = getelementptr inbounds float, float* %77, i64 %3377
  store float -2.800000e+01, float* %3379, align 4
  %3380 = getelementptr inbounds float, float* %76, i64 %3377
  store float -2.800000e+01, float* %3380, align 4
  %3381 = add nuw nsw i64 %3371, 2
  %3382 = icmp eq i64 %3381, %3204
  br i1 %3382, label %3383, label %3370, !llvm.loop !49

3383:                                             ; preds = %3288, %3370, %3353
  br i1 %3202, label %3384, label %3354

3384:                                             ; preds = %3383
  br i1 %3241, label %3385, label %3400

3385:                                             ; preds = %3465, %3400, %3384
  %3386 = phi i64 [ %758, %3400 ], [ %758, %3384 ], [ %3243, %3465 ]
  %3387 = sub nsw i64 %1607, %3386
  %3388 = xor i64 %3386, -1
  %3389 = and i64 %3387, 1
  %3390 = icmp eq i64 %3389, 0
  br i1 %3390, label %3397, label %3391

3391:                                             ; preds = %3385
  %3392 = add nsw i64 %3386, %3278
  %3393 = getelementptr inbounds float, float* %73, i64 %3392
  store float 0.000000e+00, float* %3393, align 4
  %3394 = getelementptr inbounds float, float* %77, i64 %3392
  store float -2.800000e+01, float* %3394, align 4
  %3395 = getelementptr inbounds float, float* %76, i64 %3392
  store float -2.800000e+01, float* %3395, align 4
  %3396 = add nsw i64 %3386, 1
  br label %3397

3397:                                             ; preds = %3391, %3385
  %3398 = phi i64 [ %3396, %3391 ], [ %3386, %3385 ]
  %3399 = icmp eq i64 %3388, %3249
  br i1 %3399, label %3354, label %3357

3400:                                             ; preds = %3384
  %3401 = icmp ult float* %3267, %3273
  %3402 = icmp ult float* %3271, %3269
  %3403 = and i1 %3401, %3402
  %3404 = icmp ult float* %3267, %3277
  %3405 = icmp ult float* %3275, %3269
  %3406 = and i1 %3404, %3405
  %3407 = or i1 %3403, %3406
  %3408 = icmp ult float* %3271, %3277
  %3409 = icmp ult float* %3275, %3273
  %3410 = and i1 %3408, %3409
  %3411 = or i1 %3407, %3410
  br i1 %3411, label %3385, label %3412

3412:                                             ; preds = %3400
  br i1 %3245, label %3448, label %3413

3413:                                             ; preds = %3412, %3413
  %3414 = phi i64 [ %3445, %3413 ], [ 0, %3412 ]
  %3415 = phi i64 [ %3446, %3413 ], [ %3246, %3412 ]
  %3416 = add i64 %3414, %758
  %3417 = add nsw i64 %3416, %3278
  %3418 = getelementptr inbounds float, float* %73, i64 %3417
  %3419 = bitcast float* %3418 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %3419, align 4, !alias.scope !50, !noalias !53
  %3420 = getelementptr inbounds float, float* %3418, i64 4
  %3421 = bitcast float* %3420 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %3421, align 4, !alias.scope !50, !noalias !53
  %3422 = getelementptr inbounds float, float* %77, i64 %3417
  %3423 = bitcast float* %3422 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %3423, align 4, !alias.scope !56, !noalias !57
  %3424 = getelementptr inbounds float, float* %3422, i64 4
  %3425 = bitcast float* %3424 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %3425, align 4, !alias.scope !56, !noalias !57
  %3426 = getelementptr inbounds float, float* %76, i64 %3417
  %3427 = bitcast float* %3426 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %3427, align 4, !alias.scope !57
  %3428 = getelementptr inbounds float, float* %3426, i64 4
  %3429 = bitcast float* %3428 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %3429, align 4, !alias.scope !57
  %3430 = or i64 %3414, 8
  %3431 = add i64 %3430, %758
  %3432 = add nsw i64 %3431, %3278
  %3433 = getelementptr inbounds float, float* %73, i64 %3432
  %3434 = bitcast float* %3433 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %3434, align 4, !alias.scope !50, !noalias !53
  %3435 = getelementptr inbounds float, float* %3433, i64 4
  %3436 = bitcast float* %3435 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %3436, align 4, !alias.scope !50, !noalias !53
  %3437 = getelementptr inbounds float, float* %77, i64 %3432
  %3438 = bitcast float* %3437 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %3438, align 4, !alias.scope !56, !noalias !57
  %3439 = getelementptr inbounds float, float* %3437, i64 4
  %3440 = bitcast float* %3439 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %3440, align 4, !alias.scope !56, !noalias !57
  %3441 = getelementptr inbounds float, float* %76, i64 %3432
  %3442 = bitcast float* %3441 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %3442, align 4, !alias.scope !57
  %3443 = getelementptr inbounds float, float* %3441, i64 4
  %3444 = bitcast float* %3443 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %3444, align 4, !alias.scope !57
  %3445 = add i64 %3414, 16
  %3446 = add i64 %3415, -2
  %3447 = icmp eq i64 %3446, 0
  br i1 %3447, label %3448, label %3413, !llvm.loop !58

3448:                                             ; preds = %3413, %3412
  %3449 = phi i64 [ 0, %3412 ], [ %3445, %3413 ]
  br i1 %3247, label %3465, label %3450

3450:                                             ; preds = %3448
  %3451 = add i64 %3449, %758
  %3452 = add nsw i64 %3451, %3278
  %3453 = getelementptr inbounds float, float* %73, i64 %3452
  %3454 = bitcast float* %3453 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %3454, align 4, !alias.scope !50, !noalias !53
  %3455 = getelementptr inbounds float, float* %3453, i64 4
  %3456 = bitcast float* %3455 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %3456, align 4, !alias.scope !50, !noalias !53
  %3457 = getelementptr inbounds float, float* %77, i64 %3452
  %3458 = bitcast float* %3457 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %3458, align 4, !alias.scope !56, !noalias !57
  %3459 = getelementptr inbounds float, float* %3457, i64 4
  %3460 = bitcast float* %3459 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %3460, align 4, !alias.scope !56, !noalias !57
  %3461 = getelementptr inbounds float, float* %76, i64 %3452
  %3462 = bitcast float* %3461 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %3462, align 4, !alias.scope !57
  %3463 = getelementptr inbounds float, float* %3461, i64 4
  %3464 = bitcast float* %3463 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %3464, align 4, !alias.scope !57
  br label %3465

3465:                                             ; preds = %3448, %3450
  br i1 %3248, label %3354, label %3385

3466:                                             ; preds = %3200
  br i1 %3202, label %3467, label %3606

3467:                                             ; preds = %3466
  %3468 = sub nsw i64 %1607, %758
  %3469 = add nsw i64 %758, %72
  %3470 = add nsw i64 %1607, %72
  %3471 = shl nsw i64 %75, 1
  %3472 = add nsw i64 %3471, %758
  %3473 = add nsw i64 %3472, %72
  %3474 = add nsw i64 %3471, %1607
  %3475 = add nsw i64 %3474, %72
  %3476 = add nsw i64 %758, %75
  %3477 = add nsw i64 %3476, %72
  %3478 = add nsw i64 %1607, %75
  %3479 = add nsw i64 %3478, %72
  %3480 = sub nsw i64 %1607, %758
  %3481 = add nsw i64 %3480, -8
  %3482 = lshr i64 %3481, 3
  %3483 = add nuw nsw i64 %3482, 1
  %3484 = icmp ult i64 %3468, 8
  %3485 = and i64 %3468, -8
  %3486 = add nsw i64 %3485, %758
  %3487 = and i64 %3483, 1
  %3488 = icmp eq i64 %3482, 0
  %3489 = sub nuw nsw i64 %3483, %3487
  %3490 = icmp eq i64 %3487, 0
  %3491 = icmp eq i64 %3468, %3485
  %3492 = sub nsw i64 0, %1607
  br label %3493

3493:                                             ; preds = %3467, %3603
  %3494 = phi i64 [ %3604, %3603 ], [ 0, %3467 ]
  %3495 = mul i64 %3494, %1607
  %3496 = add i64 %3469, %3495
  %3497 = getelementptr %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 43, i64 %3496
  %3498 = add i64 %3470, %3495
  %3499 = getelementptr %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 43, i64 %3498
  %3500 = add i64 %3473, %3495
  %3501 = getelementptr %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 43, i64 %3500
  %3502 = add i64 %3475, %3495
  %3503 = getelementptr %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 43, i64 %3502
  %3504 = add i64 %3477, %3495
  %3505 = getelementptr %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 43, i64 %3504
  %3506 = add i64 %3479, %3495
  %3507 = getelementptr %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 43, i64 %3506
  %3508 = mul nsw i64 %3494, %1607
  br i1 %3484, label %3575, label %3509

3509:                                             ; preds = %3493
  %3510 = icmp ult float* %3497, %3503
  %3511 = icmp ult float* %3501, %3499
  %3512 = and i1 %3510, %3511
  %3513 = icmp ult float* %3497, %3507
  %3514 = icmp ult float* %3505, %3499
  %3515 = and i1 %3513, %3514
  %3516 = or i1 %3512, %3515
  %3517 = icmp ult float* %3501, %3507
  %3518 = icmp ult float* %3505, %3503
  %3519 = and i1 %3517, %3518
  %3520 = or i1 %3516, %3519
  br i1 %3520, label %3575, label %3521

3521:                                             ; preds = %3509
  br i1 %3488, label %3557, label %3522

3522:                                             ; preds = %3521, %3522
  %3523 = phi i64 [ %3554, %3522 ], [ 0, %3521 ]
  %3524 = phi i64 [ %3555, %3522 ], [ %3489, %3521 ]
  %3525 = add i64 %3523, %758
  %3526 = add nsw i64 %3525, %3508
  %3527 = getelementptr inbounds float, float* %73, i64 %3526
  %3528 = bitcast float* %3527 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %3528, align 4, !alias.scope !59, !noalias !62
  %3529 = getelementptr inbounds float, float* %3527, i64 4
  %3530 = bitcast float* %3529 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %3530, align 4, !alias.scope !59, !noalias !62
  %3531 = getelementptr inbounds float, float* %77, i64 %3526
  %3532 = bitcast float* %3531 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %3532, align 4, !alias.scope !65, !noalias !66
  %3533 = getelementptr inbounds float, float* %3531, i64 4
  %3534 = bitcast float* %3533 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %3534, align 4, !alias.scope !65, !noalias !66
  %3535 = getelementptr inbounds float, float* %76, i64 %3526
  %3536 = bitcast float* %3535 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %3536, align 4, !alias.scope !66
  %3537 = getelementptr inbounds float, float* %3535, i64 4
  %3538 = bitcast float* %3537 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %3538, align 4, !alias.scope !66
  %3539 = or i64 %3523, 8
  %3540 = add i64 %3539, %758
  %3541 = add nsw i64 %3540, %3508
  %3542 = getelementptr inbounds float, float* %73, i64 %3541
  %3543 = bitcast float* %3542 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %3543, align 4, !alias.scope !59, !noalias !62
  %3544 = getelementptr inbounds float, float* %3542, i64 4
  %3545 = bitcast float* %3544 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %3545, align 4, !alias.scope !59, !noalias !62
  %3546 = getelementptr inbounds float, float* %77, i64 %3541
  %3547 = bitcast float* %3546 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %3547, align 4, !alias.scope !65, !noalias !66
  %3548 = getelementptr inbounds float, float* %3546, i64 4
  %3549 = bitcast float* %3548 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %3549, align 4, !alias.scope !65, !noalias !66
  %3550 = getelementptr inbounds float, float* %76, i64 %3541
  %3551 = bitcast float* %3550 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %3551, align 4, !alias.scope !66
  %3552 = getelementptr inbounds float, float* %3550, i64 4
  %3553 = bitcast float* %3552 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %3553, align 4, !alias.scope !66
  %3554 = add i64 %3523, 16
  %3555 = add i64 %3524, -2
  %3556 = icmp eq i64 %3555, 0
  br i1 %3556, label %3557, label %3522, !llvm.loop !67

3557:                                             ; preds = %3522, %3521
  %3558 = phi i64 [ 0, %3521 ], [ %3554, %3522 ]
  br i1 %3490, label %3574, label %3559

3559:                                             ; preds = %3557
  %3560 = add i64 %3558, %758
  %3561 = add nsw i64 %3560, %3508
  %3562 = getelementptr inbounds float, float* %73, i64 %3561
  %3563 = bitcast float* %3562 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %3563, align 4, !alias.scope !59, !noalias !62
  %3564 = getelementptr inbounds float, float* %3562, i64 4
  %3565 = bitcast float* %3564 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %3565, align 4, !alias.scope !59, !noalias !62
  %3566 = getelementptr inbounds float, float* %77, i64 %3561
  %3567 = bitcast float* %3566 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %3567, align 4, !alias.scope !65, !noalias !66
  %3568 = getelementptr inbounds float, float* %3566, i64 4
  %3569 = bitcast float* %3568 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %3569, align 4, !alias.scope !65, !noalias !66
  %3570 = getelementptr inbounds float, float* %76, i64 %3561
  %3571 = bitcast float* %3570 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %3571, align 4, !alias.scope !66
  %3572 = getelementptr inbounds float, float* %3570, i64 4
  %3573 = bitcast float* %3572 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %3573, align 4, !alias.scope !66
  br label %3574

3574:                                             ; preds = %3557, %3559
  br i1 %3491, label %3603, label %3575

3575:                                             ; preds = %3574, %3509, %3493
  %3576 = phi i64 [ %758, %3509 ], [ %758, %3493 ], [ %3486, %3574 ]
  %3577 = sub nsw i64 %1607, %3576
  %3578 = xor i64 %3576, -1
  %3579 = and i64 %3577, 1
  %3580 = icmp eq i64 %3579, 0
  br i1 %3580, label %3587, label %3581

3581:                                             ; preds = %3575
  %3582 = add nsw i64 %3576, %3508
  %3583 = getelementptr inbounds float, float* %73, i64 %3582
  store float 0.000000e+00, float* %3583, align 4
  %3584 = getelementptr inbounds float, float* %77, i64 %3582
  store float -2.800000e+01, float* %3584, align 4
  %3585 = getelementptr inbounds float, float* %76, i64 %3582
  store float -2.800000e+01, float* %3585, align 4
  %3586 = add nsw i64 %3576, 1
  br label %3587

3587:                                             ; preds = %3581, %3575
  %3588 = phi i64 [ %3586, %3581 ], [ %3576, %3575 ]
  %3589 = icmp eq i64 %3578, %3492
  br i1 %3589, label %3603, label %3590

3590:                                             ; preds = %3587, %3590
  %3591 = phi i64 [ %3601, %3590 ], [ %3588, %3587 ]
  %3592 = add nsw i64 %3591, %3508
  %3593 = getelementptr inbounds float, float* %73, i64 %3592
  store float 0.000000e+00, float* %3593, align 4
  %3594 = getelementptr inbounds float, float* %77, i64 %3592
  store float -2.800000e+01, float* %3594, align 4
  %3595 = getelementptr inbounds float, float* %76, i64 %3592
  store float -2.800000e+01, float* %3595, align 4
  %3596 = add nsw i64 %3591, 1
  %3597 = add nsw i64 %3596, %3508
  %3598 = getelementptr inbounds float, float* %73, i64 %3597
  store float 0.000000e+00, float* %3598, align 4
  %3599 = getelementptr inbounds float, float* %77, i64 %3597
  store float -2.800000e+01, float* %3599, align 4
  %3600 = getelementptr inbounds float, float* %76, i64 %3597
  store float -2.800000e+01, float* %3600, align 4
  %3601 = add nsw i64 %3591, 2
  %3602 = icmp eq i64 %3601, %1607
  br i1 %3602, label %3603, label %3590, !llvm.loop !68

3603:                                             ; preds = %3587, %3590, %3574
  %3604 = add nuw nsw i64 %3494, 1
  %3605 = icmp slt i64 %3604, %455
  br i1 %3605, label %3493, label %3606

3606:                                             ; preds = %3603, %3354, %3466
  %3607 = or i32 %1589, %581
  %3608 = icmp eq i32 %3607, 0
  %3609 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 29
  br i1 %3608, label %3613, label %3610

3610:                                             ; preds = %3606
  %3611 = load i32, i32* %3609, align 8
  %3612 = add nsw i32 %3611, 1
  br label %3613

3613:                                             ; preds = %3606, %3610
  %3614 = phi i32 [ %3612, %3610 ], [ 0, %3606 ]
  store i32 %3614, i32* %3609, align 8
  %3615 = load i32, i32* %1873, align 8
  store i32 %3615, i32* %2891, align 8
  call void @ec_enc_done(%struct.ec_ctx* %159) #5
  %3616 = getelementptr %struct.ec_ctx, %struct.ec_ctx* %159, i64 0, i32 11
  %3617 = load i32, i32* %3616, align 8
  %3618 = icmp eq i32 %3617, 0
  %3619 = select i1 %3618, i32 %2815, i32 -3
  br label %3620

3620:                                             ; preds = %62, %48, %3613, %6
  %3621 = phi i32 [ -1, %6 ], [ %3619, %3613 ], [ -1, %48 ], [ -1, %62 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %31) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %30) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %29) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %28) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %27) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %26) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %25) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %24) #5
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %19) #5
  ret i32 %3621
}

declare i32 @ec_tell_frac(%struct.ec_ctx*) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @celt_fatal(i8*, i8*, i32) local_unnamed_addr #3

declare void @ec_enc_init(%struct.ec_ctx*, i8*, i32) local_unnamed_addr #2

declare void @ec_enc_shrink(%struct.ec_ctx*, i32) local_unnamed_addr #2

declare void @ec_enc_bit_logp(%struct.ec_ctx*, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @run_prefilter(%struct.OpusCustomEncoder* nocapture, float*, float* nocapture, i32, i32, i32, i32* nocapture, float* nocapture, i32* nocapture, i32, i32, %struct.AnalysisInfo* nocapture readonly) unnamed_addr #0 {
  %13 = alloca [2 x float*], align 16
  %14 = alloca i32, align 4
  %15 = bitcast [2 x float*]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %15) #5
  %16 = getelementptr inbounds [2 x float*], [2 x float*]* %13, i64 0, i64 0
  %17 = getelementptr inbounds [2 x float*], [2 x float*]* %13, i64 0, i64 1
  %18 = bitcast i32* %14 to i8*
  %19 = bitcast [2 x float*]* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %19, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %18) #5
  store i32 -1431655766, i32* %14, align 4
  %20 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 0
  %21 = load %struct.OpusCustomMode*, %struct.OpusCustomMode** %20, align 8
  %22 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %21, i64 0, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = add nsw i32 %4, 1024
  %25 = mul nsw i32 %24, %3
  %26 = sext i32 %25 to i64
  %27 = shl nsw i64 %26, 2
  %28 = alloca float, i64 %26, align 16
  %29 = bitcast float* %28 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %29, i8 -86, i64 %27, i1 false)
  store float* %28, float** %16, align 16
  %30 = sext i32 %24 to i64
  %31 = getelementptr inbounds float, float* %28, i64 %30
  store float* %31, float** %17, align 8
  %32 = add nsw i32 %23, %4
  %33 = sext i32 %23 to i64
  %34 = sext i32 %4 to i64
  %35 = shl nsw i64 %34, 2
  %36 = sext i32 %3 to i64
  %37 = getelementptr inbounds float, float* %1, i64 %33
  br label %38

38:                                               ; preds = %38, %12
  %39 = phi i64 [ %53, %38 ], [ 0, %12 ]
  %40 = getelementptr inbounds [2 x float*], [2 x float*]* %13, i64 0, i64 %39
  %41 = bitcast float** %40 to i8**
  %42 = load i8*, i8** %41, align 8
  %43 = trunc i64 %39 to i32
  %44 = shl i64 %39, 10
  %45 = and i64 %44, 4294966272
  %46 = getelementptr inbounds float, float* %2, i64 %45
  %47 = bitcast float* %46 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %42, i8* align 4 %47, i64 4096, i1 false)
  %48 = getelementptr inbounds i8, i8* %42, i64 4096
  %49 = mul nsw i32 %32, %43
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds float, float* %37, i64 %50
  %52 = bitcast float* %51 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %48, i8* align 4 %52, i64 %35, i1 false)
  %53 = add nuw nsw i64 %39, 1
  %54 = icmp slt i64 %53, %36
  br i1 %54, label %38, label %55

55:                                               ; preds = %38
  %56 = icmp eq i32 %9, 0
  br i1 %56, label %91, label %57

57:                                               ; preds = %55
  %58 = ashr i32 %24, 1
  %59 = sext i32 %58 to i64
  %60 = shl nsw i64 %59, 2
  %61 = alloca float, i64 %59, align 16
  %62 = bitcast float* %61 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %62, i8 -86, i64 %60, i1 false)
  %63 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 18
  %64 = load i32, i32* %63, align 4
  call void @pitch_downsample(float** nonnull %16, float* nonnull %61, i32 %24, i32 %3, i32 %64) #5
  %65 = getelementptr inbounds float, float* %61, i64 512
  %66 = load i32, i32* %63, align 4
  call void @pitch_search(float* %65, float* nonnull %61, i32 %4, i32 979, i32* nonnull %14, i32 %66) #5
  %67 = load i32, i32* %14, align 4
  %68 = sub nsw i32 1024, %67
  store i32 %68, i32* %14, align 4
  %69 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 26
  %70 = load i32, i32* %69, align 4
  %71 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 27
  %72 = load float, float* %71, align 8
  %73 = load i32, i32* %63, align 4
  %74 = call float @remove_doubling(float* nonnull %61, i32 1024, i32 15, i32 %4, i32* nonnull %14, i32 %70, float %72, i32 %73) #5
  %75 = load i32, i32* %14, align 4
  %76 = icmp sgt i32 %75, 1022
  br i1 %76, label %77, label %78

77:                                               ; preds = %57
  store i32 1022, i32* %14, align 4
  br label %78

78:                                               ; preds = %77, %57
  %79 = phi i32 [ 1022, %77 ], [ %75, %57 ]
  %80 = fmul float %74, 0x3FE6666660000000
  %81 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 14
  %82 = load i32, i32* %81, align 4
  %83 = icmp sgt i32 %82, 2
  %84 = fmul float %80, 5.000000e-01
  %85 = select i1 %83, float %84, float %80
  %86 = icmp sgt i32 %82, 4
  %87 = fmul float %85, 5.000000e-01
  %88 = select i1 %86, float %87, float %85
  %89 = icmp sgt i32 %82, 8
  %90 = select i1 %89, float 0.000000e+00, float %88
  br label %92

91:                                               ; preds = %55
  store i32 15, i32* %14, align 4
  br label %92

92:                                               ; preds = %91, %78
  %93 = phi i32 [ %79, %78 ], [ 15, %91 ]
  %94 = phi float [ %90, %78 ], [ 0.000000e+00, %91 ]
  %95 = getelementptr inbounds %struct.AnalysisInfo, %struct.AnalysisInfo* %11, i64 0, i32 0
  %96 = load i32, i32* %95, align 4
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %102, label %98

98:                                               ; preds = %92
  %99 = getelementptr inbounds %struct.AnalysisInfo, %struct.AnalysisInfo* %11, i64 0, i32 10
  %100 = load float, float* %99, align 4
  %101 = fmul float %94, %100
  br label %102

102:                                              ; preds = %92, %98
  %103 = phi float [ %101, %98 ], [ %94, %92 ]
  %104 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 26
  %105 = load i32, i32* %104, align 4
  %106 = sub nsw i32 %93, %105
  %107 = icmp slt i32 %106, 0
  %108 = sub nsw i32 0, %106
  %109 = select i1 %107, i32 %108, i32 %106
  %110 = mul nsw i32 %109, 10
  %111 = icmp sgt i32 %110, %93
  %112 = select i1 %111, float 0x3FD99999A0000000, float 0x3FC99999A0000000
  %113 = icmp slt i32 %10, 25
  %114 = fadd float %112, 0x3FB99999A0000000
  %115 = select i1 %113, float %114, float %112
  %116 = icmp slt i32 %10, 35
  %117 = fadd float %115, 0x3FB99999A0000000
  %118 = select i1 %116, float %117, float %115
  %119 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 27
  %120 = load float, float* %119, align 8
  %121 = fcmp ogt float %120, 0x3FD99999A0000000
  %122 = fadd float %118, 0xBFB99999A0000000
  %123 = select i1 %121, float %122, float %118
  %124 = fcmp ogt float %120, 0x3FE19999A0000000
  %125 = fadd float %123, 0xBFB99999A0000000
  %126 = select i1 %124, float %125, float %123
  %127 = fcmp ogt float %126, 0x3FC99999A0000000
  %128 = select i1 %127, float %126, float 0x3FC99999A0000000
  %129 = fcmp olt float %103, %128
  br i1 %129, label %148, label %130

130:                                              ; preds = %102
  %131 = fsub float %103, %120
  %132 = call float @llvm.fabs.f32(float %131)
  %133 = fcmp olt float %132, 0x3FB99999A0000000
  %134 = select i1 %133, float %120, float %103
  %135 = fmul float %134, 3.200000e+01
  %136 = fdiv float %135, 3.000000e+00
  %137 = fadd float %136, 5.000000e-01
  %138 = call float @llvm.floor.f32(float %137)
  %139 = fptosi float %138 to i32
  %140 = icmp slt i32 %139, 8
  %141 = select i1 %140, i32 %139, i32 8
  %142 = icmp slt i32 %141, 1
  %143 = add nsw i32 %141, -1
  %144 = select i1 %142, i32 0, i32 %143
  %145 = add nsw i32 %144, 1
  %146 = sitofp i32 %145 to float
  %147 = fmul float %146, 9.375000e-02
  br label %148

148:                                              ; preds = %102, %130
  %149 = phi float [ %147, %130 ], [ 0.000000e+00, %102 ]
  %150 = phi i32 [ 1, %130 ], [ 0, %102 ]
  %151 = phi i32 [ %144, %130 ], [ 0, %102 ]
  %152 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %21, i64 0, i32 8
  %153 = shl nsw i64 %33, 2
  %154 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 28
  %155 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 18
  %156 = fsub float -0.000000e+00, %149
  %157 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %21, i64 0, i32 12
  %158 = icmp sgt i32 %4, 1024
  %159 = sub nsw i32 1024, %4
  %160 = sext i32 %159 to i64
  %161 = shl nsw i64 %160, 2
  %162 = sub nsw i64 0, %34
  br i1 %158, label %163, label %218

163:                                              ; preds = %148
  %164 = sext i32 %32 to i64
  br label %165

165:                                              ; preds = %216, %163
  %166 = phi i32 [ %105, %163 ], [ %217, %216 ]
  %167 = phi i64 [ 0, %163 ], [ %214, %216 ]
  %168 = load i32, i32* %152, align 8
  %169 = sub nsw i32 %168, %23
  %170 = icmp sgt i32 %166, 15
  %171 = select i1 %170, i32 %166, i32 15
  store i32 %171, i32* %104, align 4
  %172 = mul nsw i64 %167, %164
  %173 = getelementptr inbounds float, float* %1, i64 %172
  %174 = bitcast float* %173 to i8*
  %175 = mul nsw i64 %167, %33
  %176 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 43, i64 %175
  %177 = bitcast float* %176 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %174, i8* align 4 %177, i64 %153, i1 false)
  %178 = icmp eq i32 %169, 0
  br i1 %178, label %189, label %179

179:                                              ; preds = %165
  %180 = getelementptr inbounds float, float* %173, i64 %33
  %181 = getelementptr inbounds [2 x float*], [2 x float*]* %13, i64 0, i64 %167
  %182 = load float*, float** %181, align 8
  %183 = getelementptr inbounds float, float* %182, i64 1024
  %184 = load i32, i32* %104, align 4
  %185 = load float, float* %119, align 8
  %186 = fsub float -0.000000e+00, %185
  %187 = load i32, i32* %154, align 4
  %188 = load i32, i32* %155, align 4
  call void @comb_filter(float* %180, float* %183, i32 %184, i32 %184, i32 %169, float %186, float %186, i32 %187, i32 %187, float* null, i32 0, i32 %188) #5
  br label %189

189:                                              ; preds = %179, %165
  %190 = getelementptr inbounds float, float* %173, i64 %33
  %191 = sext i32 %169 to i64
  %192 = getelementptr inbounds float, float* %190, i64 %191
  %193 = getelementptr inbounds [2 x float*], [2 x float*]* %13, i64 0, i64 %167
  %194 = load float*, float** %193, align 8
  %195 = getelementptr inbounds float, float* %194, i64 1024
  %196 = getelementptr inbounds float, float* %195, i64 %191
  %197 = load i32, i32* %104, align 4
  %198 = load i32, i32* %14, align 4
  %199 = sub nsw i32 %4, %169
  %200 = load float, float* %119, align 8
  %201 = fsub float -0.000000e+00, %200
  %202 = load i32, i32* %154, align 4
  %203 = load float*, float** %157, align 8
  %204 = load i32, i32* %155, align 4
  call void @comb_filter(float* %192, float* %196, i32 %197, i32 %198, i32 %199, float %201, float %156, i32 %202, i32 %5, float* %203, i32 %23, i32 %204) #5
  %205 = getelementptr inbounds float, float* %173, i64 %34
  %206 = bitcast float* %205 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %177, i8* align 4 %206, i64 %153, i1 false)
  %207 = shl i64 %167, 10
  %208 = and i64 %207, 4294966272
  %209 = getelementptr inbounds float, float* %2, i64 %208
  %210 = bitcast float* %209 to i8*
  %211 = load float*, float** %193, align 8
  %212 = getelementptr inbounds float, float* %211, i64 %34
  %213 = bitcast float* %212 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %210, i8* align 4 %213, i64 4096, i1 false)
  %214 = add nuw nsw i64 %167, 1
  %215 = icmp slt i64 %214, %36
  br i1 %215, label %216, label %279

216:                                              ; preds = %189
  %217 = load i32, i32* %104, align 4
  br label %165

218:                                              ; preds = %148, %277
  %219 = phi i32 [ %278, %277 ], [ %105, %148 ]
  %220 = phi i64 [ %275, %277 ], [ 0, %148 ]
  %221 = load i32, i32* %152, align 8
  %222 = sub nsw i32 %221, %23
  %223 = icmp sgt i32 %219, 15
  %224 = select i1 %223, i32 %219, i32 15
  store i32 %224, i32* %104, align 4
  %225 = trunc i64 %220 to i32
  %226 = mul nsw i32 %32, %225
  %227 = sext i32 %226 to i64
  %228 = getelementptr inbounds float, float* %1, i64 %227
  %229 = bitcast float* %228 to i8*
  %230 = mul nsw i32 %23, %225
  %231 = sext i32 %230 to i64
  %232 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 43, i64 %231
  %233 = bitcast float* %232 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %229, i8* align 4 %233, i64 %153, i1 false)
  %234 = icmp eq i32 %222, 0
  br i1 %234, label %245, label %235

235:                                              ; preds = %218
  %236 = getelementptr inbounds float, float* %228, i64 %33
  %237 = getelementptr inbounds [2 x float*], [2 x float*]* %13, i64 0, i64 %220
  %238 = load float*, float** %237, align 8
  %239 = getelementptr inbounds float, float* %238, i64 1024
  %240 = load i32, i32* %104, align 4
  %241 = load float, float* %119, align 8
  %242 = fsub float -0.000000e+00, %241
  %243 = load i32, i32* %154, align 4
  %244 = load i32, i32* %155, align 4
  call void @comb_filter(float* %236, float* %239, i32 %240, i32 %240, i32 %222, float %242, float %242, i32 %243, i32 %243, float* null, i32 0, i32 %244) #5
  br label %245

245:                                              ; preds = %218, %235
  %246 = getelementptr inbounds float, float* %228, i64 %33
  %247 = sext i32 %222 to i64
  %248 = getelementptr inbounds float, float* %246, i64 %247
  %249 = getelementptr inbounds [2 x float*], [2 x float*]* %13, i64 0, i64 %220
  %250 = load float*, float** %249, align 8
  %251 = getelementptr inbounds float, float* %250, i64 1024
  %252 = getelementptr inbounds float, float* %251, i64 %247
  %253 = load i32, i32* %104, align 4
  %254 = load i32, i32* %14, align 4
  %255 = sub nsw i32 %4, %222
  %256 = load float, float* %119, align 8
  %257 = fsub float -0.000000e+00, %256
  %258 = load i32, i32* %154, align 4
  %259 = load float*, float** %157, align 8
  %260 = load i32, i32* %155, align 4
  call void @comb_filter(float* %248, float* %252, i32 %253, i32 %254, i32 %255, float %257, float %156, i32 %258, i32 %5, float* %259, i32 %23, i32 %260) #5
  %261 = getelementptr inbounds float, float* %228, i64 %34
  %262 = bitcast float* %261 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %233, i8* align 4 %262, i64 %153, i1 false)
  %263 = shl i64 %220, 10
  %264 = and i64 %263, 4294966272
  %265 = getelementptr inbounds float, float* %2, i64 %264
  %266 = bitcast float* %265 to i8*
  %267 = getelementptr inbounds float, float* %265, i64 %34
  %268 = bitcast float* %267 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %266, i8* align 4 %268, i64 %161, i1 false)
  %269 = getelementptr inbounds float, float* %265, i64 1024
  %270 = getelementptr inbounds float, float* %269, i64 %162
  %271 = bitcast float* %270 to i8*
  %272 = load float*, float** %249, align 8
  %273 = getelementptr inbounds float, float* %272, i64 1024
  %274 = bitcast float* %273 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %271, i8* align 4 %274, i64 %35, i1 false)
  %275 = add nuw nsw i64 %220, 1
  %276 = icmp slt i64 %275, %36
  br i1 %276, label %277, label %279

277:                                              ; preds = %245
  %278 = load i32, i32* %104, align 4
  br label %218

279:                                              ; preds = %245, %189
  store float %149, float* %7, align 4
  %280 = load i32, i32* %14, align 4
  store i32 %280, i32* %6, align 4
  store i32 %151, i32* %8, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %18) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %15) #5
  ret i32 %150
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #4

declare void @ec_enc_uint(%struct.ec_ctx*, i32, i32) local_unnamed_addr #2

declare void @ec_enc_bits(%struct.ec_ctx*, i32, i32) local_unnamed_addr #2

declare void @ec_enc_icdf(%struct.ec_ctx*, i32, i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @transient_analysis(float* noalias nocapture readonly, i32, i32, float* nocapture, i32* nocapture, i32, i32* nocapture) unnamed_addr #0 {
  %8 = sext i32 %1 to i64
  %9 = shl nsw i64 %8, 2
  %10 = alloca float, i64 %8, align 16
  %11 = bitcast float* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 %9, i1 false)
  store i32 0, i32* %6, align 4
  %12 = icmp ne i32 %5, 0
  %13 = select i1 %12, float 3.125000e-02, float 6.250000e-02
  %14 = sdiv i32 %1, 2
  %15 = icmp sgt i32 %2, 0
  br i1 %15, label %16, label %218

16:                                               ; preds = %7
  %17 = icmp sgt i32 %1, 0
  %18 = icmp sgt i32 %1, 1
  %19 = sitofp i32 %14 to double
  %20 = sitofp i32 %14 to float
  %21 = add nsw i32 %14, -5
  %22 = icmp sgt i32 %21, 12
  %23 = mul i32 %14, 6
  %24 = add i32 %23, -102
  %25 = sext i32 %14 to i64
  %26 = sext i32 %21 to i64
  %27 = zext i32 %2 to i64
  %28 = zext i32 %1 to i64
  %29 = zext i32 %14 to i64
  %30 = and i64 %29, 1
  %31 = and i32 %1, -2
  %32 = icmp eq i32 %31, 2
  %33 = sub nsw i64 %29, %30
  %34 = icmp eq i64 %30, 0
  %35 = and i64 %25, 1
  %36 = icmp eq i64 %35, 0
  %37 = add nsw i64 %25, -1
  %38 = getelementptr inbounds float, float* %10, i64 %37
  %39 = and i32 %1, -2
  %40 = icmp eq i32 %39, 2
  br label %41

41:                                               ; preds = %207, %16
  %42 = phi i64 [ 0, %16 ], [ %209, %207 ]
  %43 = phi i32 [ 0, %16 ], [ %208, %207 ]
  br i1 %17, label %44, label %65

44:                                               ; preds = %41
  %45 = mul nsw i64 %42, %8
  br label %46

46:                                               ; preds = %46, %44
  %47 = phi i64 [ 0, %44 ], [ %63, %46 ]
  %48 = phi <2 x float> [ zeroinitializer, %44 ], [ %61, %46 ]
  %49 = add nsw i64 %47, %45
  %50 = getelementptr inbounds float, float* %0, i64 %49
  %51 = load float, float* %50, align 4
  %52 = extractelement <2 x float> %48, i32 0
  %53 = fadd float %52, %51
  %54 = extractelement <2 x float> %48, i32 1
  %55 = fadd float %54, %53
  %56 = insertelement <2 x float> undef, float %51, i32 0
  %57 = insertelement <2 x float> %56, float %53, i32 1
  %58 = fmul <2 x float> %57, <float 2.000000e+00, float 5.000000e-01>
  %59 = insertelement <2 x float> undef, float %55, i32 0
  %60 = insertelement <2 x float> %59, float %51, i32 1
  %61 = fsub <2 x float> %60, %58
  %62 = getelementptr inbounds float, float* %10, i64 %47
  store float %53, float* %62, align 4
  %63 = add nuw nsw i64 %47, 1
  %64 = icmp eq i64 %63, %28
  br i1 %64, label %65, label %46

65:                                               ; preds = %46, %41
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 0, i64 48, i1 false)
  br i1 %18, label %66, label %156

66:                                               ; preds = %65
  br i1 %32, label %67, label %100

67:                                               ; preds = %100, %66
  %68 = phi float [ undef, %66 ], [ %127, %100 ]
  %69 = phi i64 [ 0, %66 ], [ %132, %100 ]
  %70 = phi float [ 0.000000e+00, %66 ], [ %130, %100 ]
  %71 = phi float [ 0.000000e+00, %66 ], [ %127, %100 ]
  br i1 %34, label %86, label %72

72:                                               ; preds = %67
  %73 = shl nuw nsw i64 %69, 1
  %74 = getelementptr inbounds float, float* %10, i64 %73
  %75 = bitcast float* %74 to <2 x float>*
  %76 = load <2 x float>, <2 x float>* %75, align 8
  %77 = fmul <2 x float> %76, %76
  %78 = extractelement <2 x float> %77, i32 0
  %79 = extractelement <2 x float> %77, i32 1
  %80 = fadd float %78, %79
  %81 = fsub float %80, %70
  %82 = fmul float %13, %81
  %83 = fadd float %70, %82
  %84 = getelementptr inbounds float, float* %10, i64 %69
  store float %83, float* %84, align 4
  %85 = fadd float %71, %80
  br label %86

86:                                               ; preds = %67, %72
  %87 = phi float [ %68, %67 ], [ %85, %72 ]
  br i1 %18, label %88, label %156

88:                                               ; preds = %86
  br i1 %36, label %95, label %89

89:                                               ; preds = %88
  %90 = load float, float* %38, align 4
  %91 = fmul float %90, 1.250000e-01
  %92 = fadd float %91, 0.000000e+00
  store float %92, float* %38, align 4
  %93 = fcmp olt float %92, 0.000000e+00
  %94 = select i1 %93, float 0.000000e+00, float %92
  br label %95

95:                                               ; preds = %89, %88
  %96 = phi i64 [ %37, %89 ], [ %25, %88 ]
  %97 = phi float [ %92, %89 ], [ 0.000000e+00, %88 ]
  %98 = phi float [ %94, %89 ], [ 0.000000e+00, %88 ]
  %99 = phi float [ %94, %89 ], [ undef, %88 ]
  br i1 %40, label %156, label %135

100:                                              ; preds = %66, %100
  %101 = phi i64 [ %132, %100 ], [ 0, %66 ]
  %102 = phi float [ %130, %100 ], [ 0.000000e+00, %66 ]
  %103 = phi float [ %127, %100 ], [ 0.000000e+00, %66 ]
  %104 = phi i64 [ %133, %100 ], [ %33, %66 ]
  %105 = shl nuw nsw i64 %101, 1
  %106 = getelementptr inbounds float, float* %10, i64 %105
  %107 = bitcast float* %106 to <2 x float>*
  %108 = load <2 x float>, <2 x float>* %107, align 16
  %109 = fmul <2 x float> %108, %108
  %110 = extractelement <2 x float> %109, i32 0
  %111 = extractelement <2 x float> %109, i32 1
  %112 = fadd float %110, %111
  %113 = fadd float %103, %112
  %114 = fsub float %112, %102
  %115 = fmul float %13, %114
  %116 = fadd float %102, %115
  %117 = getelementptr inbounds float, float* %10, i64 %101
  store float %116, float* %117, align 8
  %118 = or i64 %101, 1
  %119 = shl nuw nsw i64 %118, 1
  %120 = getelementptr inbounds float, float* %10, i64 %119
  %121 = bitcast float* %120 to <2 x float>*
  %122 = load <2 x float>, <2 x float>* %121, align 8
  %123 = fmul <2 x float> %122, %122
  %124 = extractelement <2 x float> %123, i32 0
  %125 = extractelement <2 x float> %123, i32 1
  %126 = fadd float %124, %125
  %127 = fadd float %113, %126
  %128 = fsub float %126, %116
  %129 = fmul float %13, %128
  %130 = fadd float %116, %129
  %131 = getelementptr inbounds float, float* %10, i64 %118
  store float %130, float* %131, align 4
  %132 = add nuw nsw i64 %101, 2
  %133 = add i64 %104, -2
  %134 = icmp eq i64 %133, 0
  br i1 %134, label %67, label %100

135:                                              ; preds = %95, %135
  %136 = phi i64 [ %147, %135 ], [ %96, %95 ]
  %137 = phi float [ %152, %135 ], [ %97, %95 ]
  %138 = phi float [ %154, %135 ], [ %98, %95 ]
  %139 = add nsw i64 %136, -1
  %140 = getelementptr inbounds float, float* %10, i64 %139
  %141 = load float, float* %140, align 4
  %142 = fsub float %141, %137
  %143 = fmul float %142, 1.250000e-01
  %144 = fadd float %137, %143
  store float %144, float* %140, align 4
  %145 = fcmp ogt float %138, %144
  %146 = select i1 %145, float %138, float %144
  %147 = add nsw i64 %136, -2
  %148 = getelementptr inbounds float, float* %10, i64 %147
  %149 = load float, float* %148, align 4
  %150 = fsub float %149, %144
  %151 = fmul float %150, 1.250000e-01
  %152 = fadd float %144, %151
  store float %152, float* %148, align 4
  %153 = fcmp ogt float %146, %152
  %154 = select i1 %153, float %146, float %152
  %155 = icmp sgt i64 %147, 0
  br i1 %155, label %135, label %156

156:                                              ; preds = %95, %135, %65, %86
  %157 = phi float [ %87, %86 ], [ 0.000000e+00, %65 ], [ %87, %135 ], [ %87, %95 ]
  %158 = phi float [ 0.000000e+00, %86 ], [ 0.000000e+00, %65 ], [ %99, %95 ], [ %154, %135 ]
  %159 = fmul float %157, %158
  %160 = fpext float %159 to double
  %161 = fmul double %160, 5.000000e-01
  %162 = fmul double %161, %19
  %163 = tail call double @sqrt(double %162) #5
  %164 = fptrunc double %163 to float
  %165 = fadd float %164, 0x3CD203AFA0000000
  %166 = fdiv float %20, %165
  %167 = load float, float* %10, align 16
  %168 = fcmp uno float %167, 0.000000e+00
  br i1 %168, label %169, label %170

169:                                              ; preds = %156
  tail call void @celt_fatal(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i32 369) #7
  unreachable

170:                                              ; preds = %156
  %171 = fcmp uno float %166, 0.000000e+00
  br i1 %171, label %175, label %172

172:                                              ; preds = %170
  br i1 %22, label %173, label %200

173:                                              ; preds = %172
  %174 = fmul float %166, 6.400000e+01
  br label %176

175:                                              ; preds = %170
  tail call void @celt_fatal(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i32 370) #7
  unreachable

176:                                              ; preds = %173, %176
  %177 = phi i64 [ 12, %173 ], [ %198, %176 ]
  %178 = phi i32 [ 0, %173 ], [ %197, %176 ]
  %179 = getelementptr inbounds float, float* %10, i64 %177
  %180 = load float, float* %179, align 16
  %181 = fadd float %180, 0x3CD203AFA0000000
  %182 = fmul float %174, %181
  %183 = tail call float @llvm.floor.f32(float %182)
  %184 = fcmp ogt float %183, 1.270000e+02
  %185 = fpext float %183 to double
  %186 = fcmp oge float %183, 1.270000e+02
  %187 = select i1 %186, float 1.270000e+02, float %183
  %188 = fcmp olt float %187, 0.000000e+00
  %189 = or i1 %184, %188
  %190 = select i1 %188, double 0.000000e+00, double 1.270000e+02
  %191 = select i1 %189, double %190, double %185
  %192 = fptosi double %191 to i32
  %193 = sext i32 %192 to i64
  %194 = getelementptr inbounds [128 x i8], [128 x i8]* @transient_analysis.inv_table, i64 0, i64 %193
  %195 = load i8, i8* %194, align 1
  %196 = zext i8 %195 to i32
  %197 = add nuw nsw i32 %178, %196
  %198 = add nuw nsw i64 %177, 4
  %199 = icmp slt i64 %198, %26
  br i1 %199, label %176, label %200

200:                                              ; preds = %176, %172
  %201 = phi i32 [ 0, %172 ], [ %197, %176 ]
  %202 = shl nsw i32 %201, 8
  %203 = sdiv i32 %202, %24
  %204 = icmp sgt i32 %203, %43
  br i1 %204, label %205, label %207

205:                                              ; preds = %200
  %206 = trunc i64 %42 to i32
  store i32 %206, i32* %4, align 4
  br label %207

207:                                              ; preds = %205, %200
  %208 = phi i32 [ %203, %205 ], [ %43, %200 ]
  %209 = add nuw nsw i64 %42, 1
  %210 = icmp eq i64 %209, %27
  br i1 %210, label %211, label %41

211:                                              ; preds = %207
  %212 = icmp sgt i32 %208, 200
  %213 = zext i1 %212 to i32
  %214 = add i32 %208, -201
  %215 = icmp ult i32 %214, 399
  %216 = and i1 %12, %215
  br i1 %216, label %217, label %218

217:                                              ; preds = %211
  store i32 1, i32* %6, align 4
  br label %218

218:                                              ; preds = %7, %217, %211
  %219 = phi i32 [ %208, %217 ], [ %208, %211 ], [ 0, %7 ]
  %220 = phi i32 [ 0, %217 ], [ %213, %211 ], [ 0, %7 ]
  %221 = mul nsw i32 %219, 27
  %222 = sitofp i32 %221 to double
  %223 = tail call double @sqrt(double %222) #5
  %224 = fptrunc double %223 to float
  %225 = fadd float %224, -4.200000e+01
  %226 = fcmp olt float %225, 0.000000e+00
  br i1 %226, label %231, label %227

227:                                              ; preds = %218
  %228 = tail call double @sqrt(double %222) #5
  %229 = fptrunc double %228 to float
  %230 = fadd float %229, -4.200000e+01
  br label %231

231:                                              ; preds = %218, %227
  %232 = phi float [ %230, %227 ], [ 0.000000e+00, %218 ]
  %233 = fcmp ogt float %232, 1.630000e+02
  %234 = select i1 %233, float 1.630000e+02, float %232
  %235 = fmul float %234, 0x3F7C432CA0000000
  %236 = fpext float %235 to double
  %237 = fadd double %236, -1.390000e-01
  %238 = fcmp olt double %237, 0.000000e+00
  %239 = select i1 %238, double 0.000000e+00, double %237
  %240 = tail call double @sqrt(double %239) #5
  %241 = fptrunc double %240 to float
  store float %241, float* %3, align 4
  ret i32 %220
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @compute_mdcts(%struct.OpusCustomMode*, i32, float* noalias, float* noalias, i32, i32, i32, i32, i32) unnamed_addr #0 {
  %10 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %1, 0
  %13 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 8
  %14 = load i32, i32* %13, align 8
  br i1 %12, label %15, label %20

15:                                               ; preds = %9
  %16 = shl i32 %14, %6
  %17 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 6
  %18 = load i32, i32* %17, align 8
  %19 = sub nsw i32 %18, %6
  br label %25

20:                                               ; preds = %9
  %21 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 6
  %22 = load i32, i32* %21, align 8
  %23 = icmp sgt i32 %1, 0
  %24 = mul i32 %14, %1
  br i1 %23, label %25, label %56

25:                                               ; preds = %15, %20
  %26 = phi i32 [ %16, %15 ], [ %24, %20 ]
  %27 = phi i32 [ %19, %15 ], [ %22, %20 ]
  %28 = phi i32 [ 1, %15 ], [ %1, %20 ]
  %29 = phi i32 [ %16, %15 ], [ %14, %20 ]
  %30 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 13
  %31 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 12
  %32 = add nsw i32 %26, %11
  %33 = sext i32 %29 to i64
  %34 = sext i32 %28 to i64
  %35 = sext i32 %5 to i64
  %36 = sext i32 %32 to i64
  br label %37

37:                                               ; preds = %25, %53
  %38 = phi i64 [ 0, %25 ], [ %54, %53 ]
  %39 = mul nsw i64 %38, %36
  %40 = getelementptr inbounds float, float* %2, i64 %39
  %41 = trunc i64 %38 to i32
  %42 = mul i32 %26, %41
  %43 = sext i32 %42 to i64
  br label %44

44:                                               ; preds = %37, %44
  %45 = phi i64 [ 0, %37 ], [ %51, %44 ]
  %46 = mul nsw i64 %45, %33
  %47 = getelementptr inbounds float, float* %40, i64 %46
  %48 = add nsw i64 %45, %43
  %49 = getelementptr inbounds float, float* %3, i64 %48
  %50 = load float*, float** %31, align 8
  tail call void @clt_mdct_forward_c(%struct.mdct_lookup* %30, float* %47, float* %49, float* %50, i32 %11, i32 %27, i32 %28, i32 %8) #5
  %51 = add nuw nsw i64 %45, 1
  %52 = icmp slt i64 %51, %34
  br i1 %52, label %44, label %53

53:                                               ; preds = %44
  %54 = add nuw nsw i64 %38, 1
  %55 = icmp slt i64 %54, %35
  br i1 %55, label %37, label %56

56:                                               ; preds = %53, %20
  %57 = phi i32 [ %24, %20 ], [ %26, %53 ]
  %58 = icmp eq i32 %5, 2
  %59 = icmp eq i32 %4, 1
  %60 = and i1 %59, %58
  %61 = icmp sgt i32 %57, 0
  %62 = and i1 %60, %61
  br i1 %62, label %63, label %109

63:                                               ; preds = %56
  %64 = sext i32 %57 to i64
  %65 = icmp ult i32 %57, 8
  br i1 %65, label %95, label %66

66:                                               ; preds = %63
  %67 = and i64 %64, -8
  br label %68

68:                                               ; preds = %68, %66
  %69 = phi i64 [ 0, %66 ], [ %91, %68 ]
  %70 = getelementptr inbounds float, float* %3, i64 %69
  %71 = bitcast float* %70 to <4 x float>*
  %72 = load <4 x float>, <4 x float>* %71, align 4
  %73 = getelementptr inbounds float, float* %70, i64 4
  %74 = bitcast float* %73 to <4 x float>*
  %75 = load <4 x float>, <4 x float>* %74, align 4
  %76 = fmul <4 x float> %72, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %77 = fmul <4 x float> %75, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %78 = add nsw i64 %69, %64
  %79 = getelementptr inbounds float, float* %3, i64 %78
  %80 = bitcast float* %79 to <4 x float>*
  %81 = load <4 x float>, <4 x float>* %80, align 4
  %82 = getelementptr inbounds float, float* %79, i64 4
  %83 = bitcast float* %82 to <4 x float>*
  %84 = load <4 x float>, <4 x float>* %83, align 4
  %85 = fmul <4 x float> %81, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %86 = fmul <4 x float> %84, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %87 = fadd <4 x float> %76, %85
  %88 = fadd <4 x float> %77, %86
  %89 = bitcast float* %70 to <4 x float>*
  store <4 x float> %87, <4 x float>* %89, align 4
  %90 = bitcast float* %73 to <4 x float>*
  store <4 x float> %88, <4 x float>* %90, align 4
  %91 = add i64 %69, 8
  %92 = icmp eq i64 %91, %67
  br i1 %92, label %93, label %68, !llvm.loop !69

93:                                               ; preds = %68
  %94 = icmp eq i64 %67, %64
  br i1 %94, label %109, label %95

95:                                               ; preds = %93, %63
  %96 = phi i64 [ 0, %63 ], [ %67, %93 ]
  br label %97

97:                                               ; preds = %95, %97
  %98 = phi i64 [ %107, %97 ], [ %96, %95 ]
  %99 = getelementptr inbounds float, float* %3, i64 %98
  %100 = load float, float* %99, align 4
  %101 = fmul float %100, 5.000000e-01
  %102 = add nsw i64 %98, %64
  %103 = getelementptr inbounds float, float* %3, i64 %102
  %104 = load float, float* %103, align 4
  %105 = fmul float %104, 5.000000e-01
  %106 = fadd float %101, %105
  store float %106, float* %99, align 4
  %107 = add nuw nsw i64 %98, 1
  %108 = icmp slt i64 %107, %64
  br i1 %108, label %97, label %109, !llvm.loop !70

109:                                              ; preds = %97, %93, %56
  %110 = icmp eq i32 %7, 1
  br i1 %110, label %213, label %111

111:                                              ; preds = %109
  %112 = sdiv i32 %57, %7
  %113 = icmp sgt i32 %112, 0
  %114 = sitofp i32 %7 to float
  %115 = sub nsw i32 %57, %112
  %116 = sext i32 %115 to i64
  %117 = shl nsw i64 %116, 2
  %118 = sext i32 %4 to i64
  br i1 %113, label %119, label %203

119:                                              ; preds = %111
  %120 = zext i32 %112 to i64
  %121 = and i64 %120, 4294967288
  %122 = add nsw i64 %121, -8
  %123 = lshr exact i64 %122, 3
  %124 = add nuw nsw i64 %123, 1
  %125 = icmp ult i32 %112, 8
  %126 = and i64 %120, 4294967288
  %127 = insertelement <4 x float> undef, float %114, i32 0
  %128 = shufflevector <4 x float> %127, <4 x float> undef, <4 x i32> zeroinitializer
  %129 = insertelement <4 x float> undef, float %114, i32 0
  %130 = shufflevector <4 x float> %129, <4 x float> undef, <4 x i32> zeroinitializer
  %131 = and i64 %124, 1
  %132 = icmp eq i64 %122, 0
  %133 = sub nuw nsw i64 %124, %131
  %134 = icmp eq i64 %131, 0
  %135 = icmp eq i64 %126, %120
  br label %136

136:                                              ; preds = %119, %196
  %137 = phi i64 [ 0, %119 ], [ %201, %196 ]
  %138 = trunc i64 %137 to i32
  %139 = mul i32 %57, %138
  %140 = sext i32 %139 to i64
  br i1 %125, label %186, label %141

141:                                              ; preds = %136
  br i1 %132, label %171, label %142

142:                                              ; preds = %141, %142
  %143 = phi i64 [ %168, %142 ], [ 0, %141 ]
  %144 = phi i64 [ %169, %142 ], [ %133, %141 ]
  %145 = add nsw i64 %143, %140
  %146 = getelementptr inbounds float, float* %3, i64 %145
  %147 = bitcast float* %146 to <4 x float>*
  %148 = load <4 x float>, <4 x float>* %147, align 4
  %149 = getelementptr inbounds float, float* %146, i64 4
  %150 = bitcast float* %149 to <4 x float>*
  %151 = load <4 x float>, <4 x float>* %150, align 4
  %152 = fmul <4 x float> %148, %128
  %153 = fmul <4 x float> %151, %130
  %154 = bitcast float* %146 to <4 x float>*
  store <4 x float> %152, <4 x float>* %154, align 4
  %155 = bitcast float* %149 to <4 x float>*
  store <4 x float> %153, <4 x float>* %155, align 4
  %156 = or i64 %143, 8
  %157 = add nsw i64 %156, %140
  %158 = getelementptr inbounds float, float* %3, i64 %157
  %159 = bitcast float* %158 to <4 x float>*
  %160 = load <4 x float>, <4 x float>* %159, align 4
  %161 = getelementptr inbounds float, float* %158, i64 4
  %162 = bitcast float* %161 to <4 x float>*
  %163 = load <4 x float>, <4 x float>* %162, align 4
  %164 = fmul <4 x float> %160, %128
  %165 = fmul <4 x float> %163, %130
  %166 = bitcast float* %158 to <4 x float>*
  store <4 x float> %164, <4 x float>* %166, align 4
  %167 = bitcast float* %161 to <4 x float>*
  store <4 x float> %165, <4 x float>* %167, align 4
  %168 = add i64 %143, 16
  %169 = add i64 %144, -2
  %170 = icmp eq i64 %169, 0
  br i1 %170, label %171, label %142, !llvm.loop !71

171:                                              ; preds = %142, %141
  %172 = phi i64 [ 0, %141 ], [ %168, %142 ]
  br i1 %134, label %185, label %173

173:                                              ; preds = %171
  %174 = add nsw i64 %172, %140
  %175 = getelementptr inbounds float, float* %3, i64 %174
  %176 = bitcast float* %175 to <4 x float>*
  %177 = load <4 x float>, <4 x float>* %176, align 4
  %178 = getelementptr inbounds float, float* %175, i64 4
  %179 = bitcast float* %178 to <4 x float>*
  %180 = load <4 x float>, <4 x float>* %179, align 4
  %181 = fmul <4 x float> %177, %128
  %182 = fmul <4 x float> %180, %130
  %183 = bitcast float* %175 to <4 x float>*
  store <4 x float> %181, <4 x float>* %183, align 4
  %184 = bitcast float* %178 to <4 x float>*
  store <4 x float> %182, <4 x float>* %184, align 4
  br label %185

185:                                              ; preds = %171, %173
  br i1 %135, label %196, label %186

186:                                              ; preds = %185, %136
  %187 = phi i64 [ 0, %136 ], [ %126, %185 ]
  br label %188

188:                                              ; preds = %186, %188
  %189 = phi i64 [ %194, %188 ], [ %187, %186 ]
  %190 = add nsw i64 %189, %140
  %191 = getelementptr inbounds float, float* %3, i64 %190
  %192 = load float, float* %191, align 4
  %193 = fmul float %192, %114
  store float %193, float* %191, align 4
  %194 = add nuw nsw i64 %189, 1
  %195 = icmp eq i64 %194, %120
  br i1 %195, label %196, label %188, !llvm.loop !72

196:                                              ; preds = %188, %185
  %197 = add nsw i32 %139, %112
  %198 = sext i32 %197 to i64
  %199 = getelementptr inbounds float, float* %3, i64 %198
  %200 = bitcast float* %199 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %200, i8 0, i64 %117, i1 false)
  %201 = add nuw nsw i64 %137, 1
  %202 = icmp slt i64 %201, %118
  br i1 %202, label %136, label %213

203:                                              ; preds = %111, %203
  %204 = phi i64 [ %211, %203 ], [ 0, %111 ]
  %205 = trunc i64 %204 to i32
  %206 = mul i32 %57, %205
  %207 = add nsw i32 %206, %112
  %208 = sext i32 %207 to i64
  %209 = getelementptr inbounds float, float* %3, i64 %208
  %210 = bitcast float* %209 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %210, i8 0, i64 %117, i1 false)
  %211 = add nuw nsw i64 %204, 1
  %212 = icmp slt i64 %211, %118
  br i1 %212, label %203, label %213

213:                                              ; preds = %203, %196, %109
  ret void
}

declare void @compute_band_energies(%struct.OpusCustomMode*, float*, float*, i32, i32, i32, i32) local_unnamed_addr #2

declare void @amp2Log2(%struct.OpusCustomMode*, i32, i32, float*, float*, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @normalise_bands(%struct.OpusCustomMode*, float*, float*, float*, i32, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc float @dynalloc_analysis(float* nocapture readonly, float* nocapture readonly, i32, i32, i32, i32, i32* nocapture, i32, i16* nocapture readonly, i32, i32, i32, i16* nocapture readonly, i32, i32, i32* nocapture, i32, float* nocapture readonly, %struct.AnalysisInfo* nocapture readonly, i32* nocapture, i32* nocapture) unnamed_addr #0 {
  %22 = mul nsw i32 %5, %2
  %23 = sext i32 %22 to i64
  %24 = shl nsw i64 %23, 2
  %25 = alloca float, i64 %23, align 16
  %26 = bitcast float* %25 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %26, i8 -86, i64 %24, i1 false)
  %27 = alloca float, i64 %23, align 16
  %28 = bitcast float* %27 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %28, i8 -86, i64 %24, i1 false)
  %29 = bitcast i32* %6 to i8*
  %30 = sext i32 %2 to i64
  %31 = shl nsw i64 %30, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %29, i8 0, i64 %31, i1 false)
  %32 = icmp sgt i32 %4, 0
  br i1 %32, label %33, label %142

33:                                               ; preds = %21
  %34 = sub nsw i32 9, %7
  %35 = sitofp i32 %34 to float
  %36 = zext i32 %4 to i64
  %37 = icmp ult i32 %4, 4
  br i1 %37, label %38, label %40

38:                                               ; preds = %68, %33
  %39 = phi i64 [ 0, %33 ], [ %41, %68 ]
  br label %122

40:                                               ; preds = %33
  %41 = and i64 %36, 4294967292
  %42 = insertelement <4 x float> undef, float %35, i32 0
  %43 = shufflevector <4 x float> %42, <4 x float> undef, <4 x i32> zeroinitializer
  br label %44

44:                                               ; preds = %44, %40
  %45 = phi i64 [ 0, %40 ], [ %65, %44 ]
  %46 = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, %40 ], [ %66, %44 ]
  %47 = getelementptr inbounds i16, i16* %8, i64 %45
  %48 = bitcast i16* %47 to <4 x i16>*
  %49 = load <4 x i16>, <4 x i16>* %48, align 2
  %50 = sitofp <4 x i16> %49 to <4 x float>
  %51 = fmul <4 x float> %50, <float 6.250000e-02, float 6.250000e-02, float 6.250000e-02, float 6.250000e-02>
  %52 = fadd <4 x float> %51, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %53 = fadd <4 x float> %52, %43
  %54 = getelementptr inbounds [25 x float], [25 x float]* @eMeans, i64 0, i64 %45
  %55 = bitcast float* %54 to <4 x float>*
  %56 = load <4 x float>, <4 x float>* %55, align 16
  %57 = fsub <4 x float> %53, %56
  %58 = add <4 x i32> %46, <i32 5, i32 5, i32 5, i32 5>
  %59 = mul nsw <4 x i32> %58, %58
  %60 = sitofp <4 x i32> %59 to <4 x float>
  %61 = fmul <4 x float> %60, <float 0x3F79652BE0000000, float 0x3F79652BE0000000, float 0x3F79652BE0000000, float 0x3F79652BE0000000>
  %62 = fadd <4 x float> %61, %57
  %63 = getelementptr inbounds float, float* %27, i64 %45
  %64 = bitcast float* %63 to <4 x float>*
  store <4 x float> %62, <4 x float>* %64, align 16
  %65 = add i64 %45, 4
  %66 = add <4 x i32> %46, <i32 4, i32 4, i32 4, i32 4>
  %67 = icmp eq i64 %65, %41
  br i1 %67, label %68, label %44, !llvm.loop !73

68:                                               ; preds = %44
  %69 = icmp eq i64 %41, %36
  br i1 %69, label %70, label %38

70:                                               ; preds = %122, %68
  br i1 %32, label %71, label %142

71:                                               ; preds = %70
  %72 = sext i32 %5 to i64
  %73 = and i64 %36, 1
  %74 = icmp eq i32 %4, 1
  %75 = sub nsw i64 %36, %73
  %76 = icmp eq i64 %73, 0
  br label %77

77:                                               ; preds = %71, %118
  %78 = phi i64 [ 0, %71 ], [ %120, %118 ]
  %79 = phi float [ 0xC03FE66660000000, %71 ], [ %119, %118 ]
  %80 = mul nsw i64 %78, %30
  br i1 %74, label %105, label %81

81:                                               ; preds = %77, %81
  %82 = phi i64 [ %102, %81 ], [ 0, %77 ]
  %83 = phi float [ %101, %81 ], [ %79, %77 ]
  %84 = phi i64 [ %103, %81 ], [ %75, %77 ]
  %85 = add nsw i64 %82, %80
  %86 = getelementptr inbounds float, float* %0, i64 %85
  %87 = load float, float* %86, align 4
  %88 = getelementptr inbounds float, float* %27, i64 %82
  %89 = load float, float* %88, align 8
  %90 = fsub float %87, %89
  %91 = fcmp ogt float %83, %90
  %92 = select i1 %91, float %83, float %90
  %93 = or i64 %82, 1
  %94 = add nsw i64 %93, %80
  %95 = getelementptr inbounds float, float* %0, i64 %94
  %96 = load float, float* %95, align 4
  %97 = getelementptr inbounds float, float* %27, i64 %93
  %98 = load float, float* %97, align 4
  %99 = fsub float %96, %98
  %100 = fcmp ogt float %92, %99
  %101 = select i1 %100, float %92, float %99
  %102 = add nuw nsw i64 %82, 2
  %103 = add i64 %84, -2
  %104 = icmp eq i64 %103, 0
  br i1 %104, label %105, label %81

105:                                              ; preds = %81, %77
  %106 = phi float [ undef, %77 ], [ %101, %81 ]
  %107 = phi i64 [ 0, %77 ], [ %102, %81 ]
  %108 = phi float [ %79, %77 ], [ %101, %81 ]
  br i1 %76, label %118, label %109

109:                                              ; preds = %105
  %110 = add nsw i64 %107, %80
  %111 = getelementptr inbounds float, float* %0, i64 %110
  %112 = load float, float* %111, align 4
  %113 = getelementptr inbounds float, float* %27, i64 %107
  %114 = load float, float* %113, align 4
  %115 = fsub float %112, %114
  %116 = fcmp ogt float %108, %115
  %117 = select i1 %116, float %108, float %115
  br label %118

118:                                              ; preds = %105, %109
  %119 = phi float [ %106, %105 ], [ %117, %109 ]
  %120 = add nuw nsw i64 %78, 1
  %121 = icmp slt i64 %120, %72
  br i1 %121, label %77, label %147

122:                                              ; preds = %38, %122
  %123 = phi i64 [ %140, %122 ], [ %39, %38 ]
  %124 = getelementptr inbounds i16, i16* %8, i64 %123
  %125 = load i16, i16* %124, align 2
  %126 = sitofp i16 %125 to float
  %127 = fmul float %126, 6.250000e-02
  %128 = fadd float %127, 5.000000e-01
  %129 = fadd float %128, %35
  %130 = getelementptr inbounds [25 x float], [25 x float]* @eMeans, i64 0, i64 %123
  %131 = load float, float* %130, align 4
  %132 = fsub float %129, %131
  %133 = trunc i64 %123 to i32
  %134 = add i32 %133, 5
  %135 = mul nsw i32 %134, %134
  %136 = sitofp i32 %135 to float
  %137 = fmul float %136, 0x3F79652BE0000000
  %138 = fadd float %137, %132
  %139 = getelementptr inbounds float, float* %27, i64 %123
  store float %138, float* %139, align 4
  %140 = add nuw nsw i64 %123, 1
  %141 = icmp eq i64 %140, %36
  br i1 %141, label %70, label %122, !llvm.loop !74

142:                                              ; preds = %70, %21
  %143 = alloca float, i64 %30, align 16
  %144 = bitcast float* %143 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %144, i8 -86, i64 %31, i1 false)
  %145 = alloca float, i64 %30, align 16
  %146 = bitcast float* %145 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %146, i8 -86, i64 %31, i1 false)
  br label %243

147:                                              ; preds = %118
  %148 = alloca float, i64 %30, align 16
  %149 = bitcast float* %148 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %149, i8 -86, i64 %31, i1 false)
  %150 = alloca float, i64 %30, align 16
  %151 = bitcast float* %150 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %151, i8 -86, i64 %31, i1 false)
  br i1 %32, label %152, label %243

152:                                              ; preds = %147
  %153 = zext i32 %4 to i64
  %154 = icmp ult i32 %4, 8
  br i1 %154, label %231, label %155

155:                                              ; preds = %152
  %156 = and i64 %36, 4294967288
  %157 = add nsw i64 %156, -8
  %158 = lshr exact i64 %157, 3
  %159 = add nuw nsw i64 %158, 1
  %160 = and i64 %159, 1
  %161 = icmp eq i64 %157, 0
  br i1 %161, label %207, label %162

162:                                              ; preds = %155
  %163 = sub nuw nsw i64 %159, %160
  br label %164

164:                                              ; preds = %164, %162
  %165 = phi i64 [ 0, %162 ], [ %204, %164 ]
  %166 = phi i64 [ %163, %162 ], [ %205, %164 ]
  %167 = getelementptr inbounds float, float* %0, i64 %165
  %168 = bitcast float* %167 to <4 x float>*
  %169 = load <4 x float>, <4 x float>* %168, align 4
  %170 = getelementptr inbounds float, float* %167, i64 4
  %171 = bitcast float* %170 to <4 x float>*
  %172 = load <4 x float>, <4 x float>* %171, align 4
  %173 = getelementptr inbounds float, float* %27, i64 %165
  %174 = bitcast float* %173 to <4 x float>*
  %175 = load <4 x float>, <4 x float>* %174, align 16
  %176 = getelementptr inbounds float, float* %173, i64 4
  %177 = bitcast float* %176 to <4 x float>*
  %178 = load <4 x float>, <4 x float>* %177, align 16
  %179 = fsub <4 x float> %169, %175
  %180 = fsub <4 x float> %172, %178
  %181 = getelementptr inbounds float, float* %148, i64 %165
  %182 = bitcast float* %181 to <4 x float>*
  store <4 x float> %179, <4 x float>* %182, align 16
  %183 = getelementptr inbounds float, float* %181, i64 4
  %184 = bitcast float* %183 to <4 x float>*
  store <4 x float> %180, <4 x float>* %184, align 16
  %185 = or i64 %165, 8
  %186 = getelementptr inbounds float, float* %0, i64 %185
  %187 = bitcast float* %186 to <4 x float>*
  %188 = load <4 x float>, <4 x float>* %187, align 4
  %189 = getelementptr inbounds float, float* %186, i64 4
  %190 = bitcast float* %189 to <4 x float>*
  %191 = load <4 x float>, <4 x float>* %190, align 4
  %192 = getelementptr inbounds float, float* %27, i64 %185
  %193 = bitcast float* %192 to <4 x float>*
  %194 = load <4 x float>, <4 x float>* %193, align 16
  %195 = getelementptr inbounds float, float* %192, i64 4
  %196 = bitcast float* %195 to <4 x float>*
  %197 = load <4 x float>, <4 x float>* %196, align 16
  %198 = fsub <4 x float> %188, %194
  %199 = fsub <4 x float> %191, %197
  %200 = getelementptr inbounds float, float* %148, i64 %185
  %201 = bitcast float* %200 to <4 x float>*
  store <4 x float> %198, <4 x float>* %201, align 16
  %202 = getelementptr inbounds float, float* %200, i64 4
  %203 = bitcast float* %202 to <4 x float>*
  store <4 x float> %199, <4 x float>* %203, align 16
  %204 = add i64 %165, 16
  %205 = add i64 %166, -2
  %206 = icmp eq i64 %205, 0
  br i1 %206, label %207, label %164, !llvm.loop !75

207:                                              ; preds = %164, %155
  %208 = phi i64 [ 0, %155 ], [ %204, %164 ]
  %209 = icmp eq i64 %160, 0
  br i1 %209, label %229, label %210

210:                                              ; preds = %207
  %211 = getelementptr inbounds float, float* %0, i64 %208
  %212 = bitcast float* %211 to <4 x float>*
  %213 = load <4 x float>, <4 x float>* %212, align 4
  %214 = getelementptr inbounds float, float* %211, i64 4
  %215 = bitcast float* %214 to <4 x float>*
  %216 = load <4 x float>, <4 x float>* %215, align 4
  %217 = getelementptr inbounds float, float* %27, i64 %208
  %218 = bitcast float* %217 to <4 x float>*
  %219 = load <4 x float>, <4 x float>* %218, align 16
  %220 = getelementptr inbounds float, float* %217, i64 4
  %221 = bitcast float* %220 to <4 x float>*
  %222 = load <4 x float>, <4 x float>* %221, align 16
  %223 = fsub <4 x float> %213, %219
  %224 = fsub <4 x float> %216, %222
  %225 = getelementptr inbounds float, float* %148, i64 %208
  %226 = bitcast float* %225 to <4 x float>*
  store <4 x float> %223, <4 x float>* %226, align 16
  %227 = getelementptr inbounds float, float* %225, i64 4
  %228 = bitcast float* %227 to <4 x float>*
  store <4 x float> %224, <4 x float>* %228, align 16
  br label %229

229:                                              ; preds = %207, %210
  %230 = icmp eq i64 %156, %36
  br i1 %230, label %252, label %231

231:                                              ; preds = %229, %152
  %232 = phi i64 [ 0, %152 ], [ %156, %229 ]
  br label %233

233:                                              ; preds = %231, %233
  %234 = phi i64 [ %241, %233 ], [ %232, %231 ]
  %235 = getelementptr inbounds float, float* %0, i64 %234
  %236 = load float, float* %235, align 4
  %237 = getelementptr inbounds float, float* %27, i64 %234
  %238 = load float, float* %237, align 4
  %239 = fsub float %236, %238
  %240 = getelementptr inbounds float, float* %148, i64 %234
  store float %239, float* %240, align 4
  %241 = add nuw nsw i64 %234, 1
  %242 = icmp eq i64 %241, %153
  br i1 %242, label %252, label %233, !llvm.loop !76

243:                                              ; preds = %147, %142
  %244 = phi i8* [ %151, %147 ], [ %146, %142 ]
  %245 = phi float* [ %150, %147 ], [ %145, %142 ]
  %246 = phi i8* [ %149, %147 ], [ %144, %142 ]
  %247 = phi float* [ %148, %147 ], [ %143, %142 ]
  %248 = phi float [ %119, %147 ], [ 0xC03FE66660000000, %142 ]
  %249 = icmp eq i32 %5, 2
  %250 = sext i32 %4 to i64
  %251 = shl nsw i64 %250, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %244, i8* nonnull align 16 %246, i64 %251, i1 false)
  br label %349

252:                                              ; preds = %233, %229
  %253 = icmp eq i32 %5, 2
  %254 = and i1 %253, %32
  br i1 %254, label %255, label %309

255:                                              ; preds = %252
  %256 = zext i32 %4 to i64
  %257 = icmp ult i32 %4, 8
  br i1 %257, label %293, label %258

258:                                              ; preds = %255
  %259 = and i64 %36, 4294967288
  br label %260

260:                                              ; preds = %260, %258
  %261 = phi i64 [ 0, %258 ], [ %289, %260 ]
  %262 = getelementptr inbounds float, float* %148, i64 %261
  %263 = bitcast float* %262 to <4 x float>*
  %264 = load <4 x float>, <4 x float>* %263, align 16
  %265 = getelementptr inbounds float, float* %262, i64 4
  %266 = bitcast float* %265 to <4 x float>*
  %267 = load <4 x float>, <4 x float>* %266, align 16
  %268 = add nsw i64 %261, %30
  %269 = getelementptr inbounds float, float* %0, i64 %268
  %270 = bitcast float* %269 to <4 x float>*
  %271 = load <4 x float>, <4 x float>* %270, align 4
  %272 = getelementptr inbounds float, float* %269, i64 4
  %273 = bitcast float* %272 to <4 x float>*
  %274 = load <4 x float>, <4 x float>* %273, align 4
  %275 = getelementptr inbounds float, float* %27, i64 %261
  %276 = bitcast float* %275 to <4 x float>*
  %277 = load <4 x float>, <4 x float>* %276, align 16
  %278 = getelementptr inbounds float, float* %275, i64 4
  %279 = bitcast float* %278 to <4 x float>*
  %280 = load <4 x float>, <4 x float>* %279, align 16
  %281 = fsub <4 x float> %271, %277
  %282 = fsub <4 x float> %274, %280
  %283 = fcmp ogt <4 x float> %264, %281
  %284 = fcmp ogt <4 x float> %267, %282
  %285 = select <4 x i1> %283, <4 x float> %264, <4 x float> %281
  %286 = select <4 x i1> %284, <4 x float> %267, <4 x float> %282
  %287 = bitcast float* %262 to <4 x float>*
  store <4 x float> %285, <4 x float>* %287, align 16
  %288 = bitcast float* %265 to <4 x float>*
  store <4 x float> %286, <4 x float>* %288, align 16
  %289 = add i64 %261, 8
  %290 = icmp eq i64 %289, %259
  br i1 %290, label %291, label %260, !llvm.loop !77

291:                                              ; preds = %260
  %292 = icmp eq i64 %259, %36
  br i1 %292, label %309, label %293

293:                                              ; preds = %291, %255
  %294 = phi i64 [ 0, %255 ], [ %259, %291 ]
  br label %295

295:                                              ; preds = %293, %295
  %296 = phi i64 [ %307, %295 ], [ %294, %293 ]
  %297 = getelementptr inbounds float, float* %148, i64 %296
  %298 = load float, float* %297, align 4
  %299 = add nsw i64 %296, %30
  %300 = getelementptr inbounds float, float* %0, i64 %299
  %301 = load float, float* %300, align 4
  %302 = getelementptr inbounds float, float* %27, i64 %296
  %303 = load float, float* %302, align 4
  %304 = fsub float %301, %303
  %305 = fcmp ogt float %298, %304
  %306 = select i1 %305, float %298, float %304
  store float %306, float* %297, align 4
  %307 = add nuw nsw i64 %296, 1
  %308 = icmp eq i64 %307, %256
  br i1 %308, label %309, label %295, !llvm.loop !78

309:                                              ; preds = %295, %291, %252
  %310 = sext i32 %4 to i64
  %311 = shl nsw i64 %310, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %151, i8* nonnull align 16 %149, i64 %311, i1 false)
  %312 = icmp sgt i32 %4, 1
  br i1 %312, label %313, label %349

313:                                              ; preds = %309
  %314 = zext i32 %4 to i64
  %315 = load float, float* %148, align 16
  %316 = add nsw i64 %314, -1
  %317 = and i64 %316, 1
  %318 = icmp eq i32 %4, 2
  br i1 %318, label %339, label %319

319:                                              ; preds = %313
  %320 = sub nsw i64 %316, %317
  br label %321

321:                                              ; preds = %321, %319
  %322 = phi float [ %315, %319 ], [ %335, %321 ]
  %323 = phi i64 [ 1, %319 ], [ %336, %321 ]
  %324 = phi i64 [ %320, %319 ], [ %337, %321 ]
  %325 = getelementptr inbounds float, float* %148, i64 %323
  %326 = load float, float* %325, align 4
  %327 = fadd float %322, -2.000000e+00
  %328 = fcmp ogt float %326, %327
  %329 = select i1 %328, float %326, float %327
  store float %329, float* %325, align 4
  %330 = add nuw nsw i64 %323, 1
  %331 = getelementptr inbounds float, float* %148, i64 %330
  %332 = load float, float* %331, align 4
  %333 = fadd float %329, -2.000000e+00
  %334 = fcmp ogt float %332, %333
  %335 = select i1 %334, float %332, float %333
  store float %335, float* %331, align 4
  %336 = add nuw nsw i64 %323, 2
  %337 = add i64 %324, -2
  %338 = icmp eq i64 %337, 0
  br i1 %338, label %339, label %321

339:                                              ; preds = %321, %313
  %340 = phi float [ %315, %313 ], [ %335, %321 ]
  %341 = phi i64 [ 1, %313 ], [ %336, %321 ]
  %342 = icmp eq i64 %317, 0
  br i1 %342, label %349, label %343

343:                                              ; preds = %339
  %344 = getelementptr inbounds float, float* %148, i64 %341
  %345 = load float, float* %344, align 4
  %346 = fadd float %340, -2.000000e+00
  %347 = fcmp ogt float %345, %346
  %348 = select i1 %347, float %345, float %346
  store float %348, float* %344, align 4
  br label %349

349:                                              ; preds = %343, %339, %243, %309
  %350 = phi i1 [ false, %243 ], [ false, %309 ], [ %312, %339 ], [ %312, %343 ]
  %351 = phi i64 [ %250, %243 ], [ %310, %309 ], [ %310, %339 ], [ %310, %343 ]
  %352 = phi float* [ %245, %243 ], [ %150, %309 ], [ %150, %339 ], [ %150, %343 ]
  %353 = phi float* [ %247, %243 ], [ %148, %309 ], [ %148, %339 ], [ %148, %343 ]
  %354 = phi float [ %248, %243 ], [ %119, %309 ], [ %119, %339 ], [ %119, %343 ]
  %355 = phi i1 [ %249, %243 ], [ %253, %309 ], [ %253, %339 ], [ %253, %343 ]
  %356 = add i32 %4, -2
  %357 = icmp sgt i32 %356, -1
  br i1 %357, label %358, label %360

358:                                              ; preds = %349
  %359 = sext i32 %356 to i64
  br label %414

360:                                              ; preds = %414, %349
  br i1 %32, label %361, label %447

361:                                              ; preds = %360
  %362 = fadd float %354, -1.200000e+01
  %363 = fcmp olt float %362, 0.000000e+00
  %364 = select i1 %363, float 0.000000e+00, float %362
  %365 = zext i32 %4 to i64
  %366 = icmp ult i32 %4, 4
  br i1 %366, label %367, label %369

367:                                              ; preds = %412, %369, %361
  %368 = phi i64 [ 0, %369 ], [ 0, %361 ], [ %385, %412 ]
  br label %426

369:                                              ; preds = %361
  %370 = getelementptr i32, i32* %20, i64 %365
  %371 = getelementptr float, float* %352, i64 %365
  %372 = getelementptr float, float* %353, i64 %365
  %373 = bitcast float* %371 to i32*
  %374 = icmp ugt i32* %373, %20
  %375 = bitcast i32* %370 to float*
  %376 = icmp ult float* %352, %375
  %377 = and i1 %374, %376
  %378 = bitcast float* %372 to i32*
  %379 = icmp ugt i32* %378, %20
  %380 = bitcast i32* %370 to float*
  %381 = icmp ult float* %353, %380
  %382 = and i1 %379, %381
  %383 = or i1 %377, %382
  br i1 %383, label %367, label %384

384:                                              ; preds = %369
  %385 = and i64 %365, 4294967292
  %386 = insertelement <4 x float> undef, float %364, i32 0
  %387 = shufflevector <4 x float> %386, <4 x float> undef, <4 x i32> zeroinitializer
  br label %388

388:                                              ; preds = %388, %384
  %389 = phi i64 [ 0, %384 ], [ %410, %388 ]
  %390 = getelementptr inbounds float, float* %352, i64 %389
  %391 = bitcast float* %390 to <4 x float>*
  %392 = load <4 x float>, <4 x float>* %391, align 4, !alias.scope !79
  %393 = getelementptr inbounds float, float* %353, i64 %389
  %394 = bitcast float* %393 to <4 x float>*
  %395 = load <4 x float>, <4 x float>* %394, align 4, !alias.scope !82
  %396 = fcmp ogt <4 x float> %387, %395
  %397 = select <4 x i1> %396, <4 x float> %387, <4 x float> %395
  %398 = fsub <4 x float> %392, %397
  %399 = fadd <4 x float> %398, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %400 = call <4 x float> @llvm.floor.v4f32(<4 x float> %399)
  %401 = fptosi <4 x float> %400 to <4 x i32>
  %402 = sub nsw <4 x i32> zeroinitializer, %401
  %403 = icmp sgt <4 x i32> %401, zeroinitializer
  %404 = select <4 x i1> %403, <4 x i32> zeroinitializer, <4 x i32> %402
  %405 = icmp slt <4 x i32> %404, <i32 5, i32 5, i32 5, i32 5>
  %406 = select <4 x i1> %405, <4 x i32> %404, <4 x i32> <i32 5, i32 5, i32 5, i32 5>
  %407 = lshr <4 x i32> <i32 32, i32 32, i32 32, i32 32>, %406
  %408 = getelementptr inbounds i32, i32* %20, i64 %389
  %409 = bitcast i32* %408 to <4 x i32>*
  store <4 x i32> %407, <4 x i32>* %409, align 4, !alias.scope !84, !noalias !86
  %410 = add i64 %389, 4
  %411 = icmp eq i64 %410, %385
  br i1 %411, label %412, label %388, !llvm.loop !87

412:                                              ; preds = %388
  %413 = icmp eq i64 %385, %365
  br i1 %413, label %447, label %367

414:                                              ; preds = %358, %414
  %415 = phi i64 [ %359, %358 ], [ %424, %414 ]
  %416 = getelementptr inbounds float, float* %353, i64 %415
  %417 = load float, float* %416, align 4
  %418 = add nuw nsw i64 %415, 1
  %419 = getelementptr inbounds float, float* %353, i64 %418
  %420 = load float, float* %419, align 4
  %421 = fadd float %420, -3.000000e+00
  %422 = fcmp ogt float %417, %421
  %423 = select i1 %422, float %417, float %421
  store float %423, float* %416, align 4
  %424 = add nsw i64 %415, -1
  %425 = icmp sgt i64 %415, 0
  br i1 %425, label %414, label %360

426:                                              ; preds = %367, %426
  %427 = phi i64 [ %445, %426 ], [ %368, %367 ]
  %428 = getelementptr inbounds float, float* %352, i64 %427
  %429 = load float, float* %428, align 4
  %430 = getelementptr inbounds float, float* %353, i64 %427
  %431 = load float, float* %430, align 4
  %432 = fcmp ogt float %364, %431
  %433 = select i1 %432, float %364, float %431
  %434 = fsub float %429, %433
  %435 = fadd float %434, 5.000000e-01
  %436 = tail call float @llvm.floor.f32(float %435)
  %437 = fptosi float %436 to i32
  %438 = sub nsw i32 0, %437
  %439 = icmp sgt i32 %437, 0
  %440 = select i1 %439, i32 0, i32 %438
  %441 = icmp slt i32 %440, 5
  %442 = select i1 %441, i32 %440, i32 5
  %443 = lshr i32 32, %442
  %444 = getelementptr inbounds i32, i32* %20, i64 %427
  store i32 %443, i32* %444, align 4
  %445 = add nuw nsw i64 %427, 1
  %446 = icmp eq i64 %445, %365
  br i1 %446, label %447, label %426, !llvm.loop !88

447:                                              ; preds = %426, %412, %360
  %448 = icmp slt i32 %14, 51
  %449 = icmp slt i32 %13, 1
  %450 = or i1 %449, %448
  %451 = icmp ne i32 %16, 0
  %452 = or i1 %450, %451
  br i1 %452, label %487, label %453

453:                                              ; preds = %447
  %454 = icmp sgt i32 %356, 2
  %455 = add i32 %4, -3
  %456 = sext i32 %356 to i64
  %457 = add nsw i32 %4, -1
  %458 = sext i32 %457 to i64
  %459 = sext i32 %5 to i64
  %460 = zext i32 %4 to i64
  %461 = zext i32 %356 to i64
  %462 = zext i32 %4 to i64
  %463 = add nsw i64 %461, -2
  %464 = add nsw i64 %461, -3
  %465 = add nsw i64 %460, -1
  %466 = and i64 %460, 4294967288
  %467 = add nsw i64 %466, -8
  %468 = lshr exact i64 %467, 3
  %469 = add nuw nsw i64 %468, 1
  %470 = and i64 %465, 1
  %471 = icmp eq i32 %4, 2
  %472 = sub nsw i64 %465, %470
  %473 = icmp eq i64 %470, 0
  %474 = icmp ult i64 %463, 4
  %475 = trunc i64 %464 to i32
  %476 = icmp ugt i64 %464, 4294967295
  %477 = and i64 %463, -4
  %478 = or i64 %477, 2
  %479 = icmp eq i64 %463, %477
  %480 = icmp ult i32 %4, 8
  %481 = and i64 %462, 4294967288
  %482 = and i64 %469, 1
  %483 = icmp eq i64 %467, 0
  %484 = sub nuw nsw i64 %469, %482
  %485 = icmp eq i64 %482, 0
  %486 = icmp eq i64 %481, %462
  br label %550

487:                                              ; preds = %447
  %488 = icmp slt i32 %3, %4
  br i1 %488, label %489, label %1567

489:                                              ; preds = %487
  %490 = sext i32 %3 to i64
  %491 = sub nsw i64 %351, %490
  %492 = icmp ult i64 %491, 8
  br i1 %492, label %493, label %495

493:                                              ; preds = %548, %489
  %494 = phi i64 [ %490, %489 ], [ %497, %548 ]
  br label %1562

495:                                              ; preds = %489
  %496 = and i64 %491, -8
  %497 = add nsw i64 %496, %490
  %498 = add nsw i64 %496, -8
  %499 = lshr exact i64 %498, 3
  %500 = add nuw nsw i64 %499, 1
  %501 = and i64 %500, 3
  %502 = icmp ult i64 %498, 24
  br i1 %502, label %534, label %503

503:                                              ; preds = %495
  %504 = sub nsw i64 %500, %501
  br label %505

505:                                              ; preds = %505, %503
  %506 = phi i64 [ 0, %503 ], [ %531, %505 ]
  %507 = phi i64 [ %504, %503 ], [ %532, %505 ]
  %508 = add i64 %506, %490
  %509 = getelementptr inbounds i32, i32* %19, i64 %508
  %510 = bitcast i32* %509 to <4 x i32>*
  store <4 x i32> <i32 13, i32 13, i32 13, i32 13>, <4 x i32>* %510, align 4
  %511 = getelementptr inbounds i32, i32* %509, i64 4
  %512 = bitcast i32* %511 to <4 x i32>*
  store <4 x i32> <i32 13, i32 13, i32 13, i32 13>, <4 x i32>* %512, align 4
  %513 = or i64 %506, 8
  %514 = add i64 %513, %490
  %515 = getelementptr inbounds i32, i32* %19, i64 %514
  %516 = bitcast i32* %515 to <4 x i32>*
  store <4 x i32> <i32 13, i32 13, i32 13, i32 13>, <4 x i32>* %516, align 4
  %517 = getelementptr inbounds i32, i32* %515, i64 4
  %518 = bitcast i32* %517 to <4 x i32>*
  store <4 x i32> <i32 13, i32 13, i32 13, i32 13>, <4 x i32>* %518, align 4
  %519 = or i64 %506, 16
  %520 = add i64 %519, %490
  %521 = getelementptr inbounds i32, i32* %19, i64 %520
  %522 = bitcast i32* %521 to <4 x i32>*
  store <4 x i32> <i32 13, i32 13, i32 13, i32 13>, <4 x i32>* %522, align 4
  %523 = getelementptr inbounds i32, i32* %521, i64 4
  %524 = bitcast i32* %523 to <4 x i32>*
  store <4 x i32> <i32 13, i32 13, i32 13, i32 13>, <4 x i32>* %524, align 4
  %525 = or i64 %506, 24
  %526 = add i64 %525, %490
  %527 = getelementptr inbounds i32, i32* %19, i64 %526
  %528 = bitcast i32* %527 to <4 x i32>*
  store <4 x i32> <i32 13, i32 13, i32 13, i32 13>, <4 x i32>* %528, align 4
  %529 = getelementptr inbounds i32, i32* %527, i64 4
  %530 = bitcast i32* %529 to <4 x i32>*
  store <4 x i32> <i32 13, i32 13, i32 13, i32 13>, <4 x i32>* %530, align 4
  %531 = add i64 %506, 32
  %532 = add i64 %507, -4
  %533 = icmp eq i64 %532, 0
  br i1 %533, label %534, label %505, !llvm.loop !89

534:                                              ; preds = %505, %495
  %535 = phi i64 [ 0, %495 ], [ %531, %505 ]
  %536 = icmp eq i64 %501, 0
  br i1 %536, label %548, label %537

537:                                              ; preds = %534, %537
  %538 = phi i64 [ %545, %537 ], [ %535, %534 ]
  %539 = phi i64 [ %546, %537 ], [ %501, %534 ]
  %540 = add i64 %538, %490
  %541 = getelementptr inbounds i32, i32* %19, i64 %540
  %542 = bitcast i32* %541 to <4 x i32>*
  store <4 x i32> <i32 13, i32 13, i32 13, i32 13>, <4 x i32>* %542, align 4
  %543 = getelementptr inbounds i32, i32* %541, i64 4
  %544 = bitcast i32* %543 to <4 x i32>*
  store <4 x i32> <i32 13, i32 13, i32 13, i32 13>, <4 x i32>* %544, align 4
  %545 = add i64 %538, 8
  %546 = add i64 %539, -1
  %547 = icmp eq i64 %546, 0
  br i1 %547, label %548, label %537, !llvm.loop !90

548:                                              ; preds = %537, %534
  %549 = icmp eq i64 %491, %496
  br i1 %549, label %1567, label %493

550:                                              ; preds = %453, %958
  %551 = phi i64 [ 0, %453 ], [ %959, %958 ]
  %552 = phi i32 [ 0, %453 ], [ %584, %958 ]
  %553 = trunc i64 %551 to i32
  %554 = mul i32 %553, %2
  %555 = mul nsw i64 %551, %30
  %556 = getelementptr inbounds float, float* %25, i64 %555
  %557 = getelementptr inbounds float, float* %1, i64 %555
  %558 = bitcast float* %557 to i32*
  %559 = load i32, i32* %558, align 4
  %560 = bitcast float* %556 to i32*
  store i32 %559, i32* %560, align 4
  %561 = bitcast i32 %559 to float
  br i1 %350, label %562, label %583

562:                                              ; preds = %550
  br i1 %471, label %563, label %608

563:                                              ; preds = %608, %562
  %564 = phi i32 [ undef, %562 ], [ %637, %608 ]
  %565 = phi float [ %561, %562 ], [ %640, %608 ]
  %566 = phi i64 [ 1, %562 ], [ %642, %608 ]
  %567 = phi i32 [ %552, %562 ], [ %637, %608 ]
  br i1 %473, label %583, label %568

568:                                              ; preds = %563
  %569 = add nsw i64 %566, %555
  %570 = getelementptr inbounds float, float* %1, i64 %569
  %571 = load float, float* %570, align 4
  %572 = add nsw i64 %569, -1
  %573 = getelementptr inbounds float, float* %1, i64 %572
  %574 = load float, float* %573, align 4
  %575 = fadd float %565, 1.500000e+00
  %576 = fcmp olt float %575, %571
  %577 = select i1 %576, float %575, float %571
  %578 = getelementptr inbounds float, float* %556, i64 %566
  store float %577, float* %578, align 4
  %579 = fadd float %574, 5.000000e-01
  %580 = fcmp ogt float %571, %579
  %581 = trunc i64 %566 to i32
  %582 = select i1 %580, i32 %581, i32 %567
  br label %583

583:                                              ; preds = %568, %563, %550
  %584 = phi i32 [ %552, %550 ], [ %564, %563 ], [ %582, %568 ]
  %585 = icmp sgt i32 %584, 0
  br i1 %585, label %586, label %645

586:                                              ; preds = %583
  %587 = sext i32 %584 to i64
  %588 = getelementptr inbounds float, float* %556, i64 %587
  %589 = load float, float* %588, align 4
  %590 = and i64 %587, 1
  %591 = icmp eq i64 %590, 0
  br i1 %591, label %604, label %592

592:                                              ; preds = %586
  %593 = add nsw i64 %587, -1
  %594 = getelementptr inbounds float, float* %556, i64 %593
  %595 = load float, float* %594, align 4
  %596 = fadd float %589, 2.000000e+00
  %597 = add nsw i64 %593, %555
  %598 = getelementptr inbounds float, float* %1, i64 %597
  %599 = load float, float* %598, align 4
  %600 = fcmp olt float %596, %599
  %601 = select i1 %600, float %596, float %599
  %602 = fcmp olt float %595, %601
  %603 = select i1 %602, float %595, float %601
  store float %603, float* %594, align 4
  br label %604

604:                                              ; preds = %592, %586
  %605 = phi float [ %603, %592 ], [ %589, %586 ]
  %606 = phi i64 [ %593, %592 ], [ %587, %586 ]
  %607 = icmp eq i32 %584, 1
  br i1 %607, label %645, label %736

608:                                              ; preds = %562, %608
  %609 = phi float [ %640, %608 ], [ %561, %562 ]
  %610 = phi i64 [ %642, %608 ], [ 1, %562 ]
  %611 = phi i32 [ %637, %608 ], [ %552, %562 ]
  %612 = phi i64 [ %643, %608 ], [ %472, %562 ]
  %613 = add nsw i64 %610, %555
  %614 = getelementptr inbounds float, float* %1, i64 %613
  %615 = load float, float* %614, align 4
  %616 = add nsw i64 %613, -1
  %617 = getelementptr inbounds float, float* %1, i64 %616
  %618 = load float, float* %617, align 4
  %619 = fadd float %618, 5.000000e-01
  %620 = fcmp ogt float %615, %619
  %621 = trunc i64 %610 to i32
  %622 = select i1 %620, i32 %621, i32 %611
  %623 = fadd float %609, 1.500000e+00
  %624 = fcmp olt float %623, %615
  %625 = select i1 %624, float %623, float %615
  %626 = getelementptr inbounds float, float* %556, i64 %610
  store float %625, float* %626, align 4
  %627 = add nuw nsw i64 %610, 1
  %628 = add nsw i64 %627, %555
  %629 = getelementptr inbounds float, float* %1, i64 %628
  %630 = load float, float* %629, align 4
  %631 = add i64 %610, %555
  %632 = getelementptr inbounds float, float* %1, i64 %631
  %633 = load float, float* %632, align 4
  %634 = fadd float %633, 5.000000e-01
  %635 = fcmp ogt float %630, %634
  %636 = trunc i64 %627 to i32
  %637 = select i1 %635, i32 %636, i32 %622
  %638 = fadd float %625, 1.500000e+00
  %639 = fcmp olt float %638, %630
  %640 = select i1 %639, float %638, float %630
  %641 = getelementptr inbounds float, float* %556, i64 %627
  store float %640, float* %641, align 4
  %642 = add nuw nsw i64 %610, 2
  %643 = add i64 %612, -2
  %644 = icmp eq i64 %643, 0
  br i1 %644, label %563, label %608

645:                                              ; preds = %604, %736, %583
  br i1 %454, label %646, label %834

646:                                              ; preds = %645
  %647 = add i64 %555, 4294967294
  br i1 %474, label %648, label %650

648:                                              ; preds = %735, %650, %646
  %649 = phi i64 [ 2, %650 ], [ 2, %646 ], [ %478, %735 ]
  br label %762

650:                                              ; preds = %646
  %651 = add i32 %554, %475
  %652 = icmp slt i32 %651, %554
  %653 = or i1 %652, %476
  br i1 %653, label %648, label %654

654:                                              ; preds = %650, %654
  %655 = phi i64 [ %733, %654 ], [ 0, %650 ]
  %656 = or i64 %655, 2
  %657 = getelementptr inbounds float, float* %556, i64 %656
  %658 = bitcast float* %657 to <4 x float>*
  %659 = load <4 x float>, <4 x float>* %658, align 4
  %660 = add i64 %647, %656
  %661 = shl i64 %660, 32
  %662 = ashr exact i64 %661, 32
  %663 = getelementptr inbounds float, float* %1, i64 %662
  %664 = getelementptr inbounds float, float* %663, i64 2
  %665 = bitcast float* %664 to <4 x float>*
  %666 = load <4 x float>, <4 x float>* %665, align 4
  %667 = bitcast float* %663 to <4 x float>*
  %668 = load <4 x float>, <4 x float>* %667, align 4
  %669 = getelementptr inbounds float, float* %663, i64 1
  %670 = bitcast float* %669 to <4 x float>*
  %671 = load <4 x float>, <4 x float>* %670, align 4
  %672 = fcmp ogt <4 x float> %668, %671
  %673 = select <4 x i1> %672, <4 x float> %668, <4 x float> %671
  %674 = select <4 x i1> %672, <4 x float> %671, <4 x float> %668
  %675 = getelementptr inbounds float, float* %663, i64 3
  %676 = bitcast float* %675 to <4 x float>*
  %677 = load <4 x float>, <4 x float>* %676, align 4
  %678 = getelementptr inbounds float, float* %663, i64 4
  %679 = bitcast float* %678 to <4 x float>*
  %680 = load <4 x float>, <4 x float>* %679, align 4
  %681 = fcmp ogt <4 x float> %677, %680
  %682 = select <4 x i1> %681, <4 x float> %680, <4 x float> %677
  %683 = select <4 x i1> %681, <4 x float> %677, <4 x float> %680
  %684 = fcmp ogt <4 x float> %674, %682
  %685 = select <4 x i1> %684, <4 x float> %683, <4 x float> %673
  %686 = select <4 x i1> %684, <4 x float> %674, <4 x float> %682
  %687 = select <4 x i1> %684, <4 x float> %673, <4 x float> %683
  %688 = fcmp ogt <4 x float> %666, %685
  %689 = fcmp olt <4 x float> %666, %686
  %690 = fcmp olt <4 x float> %666, %687
  %691 = select <4 x i1> %690, <4 x float> %666, <4 x float> %687
  %692 = fcmp olt <4 x float> %685, %686
  %693 = select <4 x i1> %692, <4 x float> %685, <4 x float> %686
  %694 = fcmp uge <4 x float> %685, %686
  %695 = fcmp olt <4 x float> %687, %685
  %696 = select <4 x i1> %695, <4 x float> %687, <4 x float> %685
  %697 = fcmp olt <4 x float> %666, %686
  %698 = select <4 x i1> %697, <4 x float> %666, <4 x float> %686
  %699 = and <4 x i1> %688, %694
  %700 = xor <4 x i1> %688, <i1 true, i1 true, i1 true, i1 true>
  %701 = and <4 x i1> %689, %700
  %702 = xor <4 x i1> %689, <i1 true, i1 true, i1 true, i1 true>
  %703 = and <4 x i1> %702, %700
  %704 = select <4 x i1> %699, <4 x float> %696, <4 x float> %698
  %705 = select <4 x i1> %701, <4 x float> %693, <4 x float> %704
  %706 = select <4 x i1> %703, <4 x float> %691, <4 x float> %705
  %707 = fadd <4 x float> %706, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %708 = fcmp ogt <4 x float> %659, %707
  %709 = fcmp olt <4 x float> %666, %686
  %710 = fcmp olt <4 x float> %666, %687
  %711 = select <4 x i1> %710, <4 x float> %666, <4 x float> %687
  %712 = fcmp olt <4 x float> %685, %686
  %713 = select <4 x i1> %712, <4 x float> %685, <4 x float> %686
  %714 = fcmp uge <4 x float> %685, %686
  %715 = fcmp olt <4 x float> %687, %685
  %716 = select <4 x i1> %715, <4 x float> %687, <4 x float> %685
  %717 = fcmp olt <4 x float> %666, %686
  %718 = select <4 x i1> %717, <4 x float> %666, <4 x float> %686
  %719 = xor <4 x i1> %708, <i1 true, i1 true, i1 true, i1 true>
  %720 = and <4 x i1> %688, %719
  %721 = and <4 x i1> %720, %714
  %722 = xor <4 x i1> %688, <i1 true, i1 true, i1 true, i1 true>
  %723 = and <4 x i1> %722, %719
  %724 = and <4 x i1> %709, %723
  %725 = xor <4 x i1> %709, <i1 true, i1 true, i1 true, i1 true>
  %726 = and <4 x i1> %723, %725
  %727 = select <4 x i1> %721, <4 x float> %716, <4 x float> %718
  %728 = select <4 x i1> %724, <4 x float> %713, <4 x float> %727
  %729 = select <4 x i1> %726, <4 x float> %711, <4 x float> %728
  %730 = fadd <4 x float> %729, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %731 = select <4 x i1> %708, <4 x float> %659, <4 x float> %730
  %732 = bitcast float* %657 to <4 x float>*
  store <4 x float> %731, <4 x float>* %732, align 4
  %733 = add i64 %655, 4
  %734 = icmp eq i64 %733, %477
  br i1 %734, label %735, label %654, !llvm.loop !91

735:                                              ; preds = %654
  br i1 %479, label %834, label %648

736:                                              ; preds = %604, %736
  %737 = phi float [ %760, %736 ], [ %605, %604 ]
  %738 = phi i64 [ %750, %736 ], [ %606, %604 ]
  %739 = add nsw i64 %738, -1
  %740 = getelementptr inbounds float, float* %556, i64 %739
  %741 = load float, float* %740, align 4
  %742 = fadd float %737, 2.000000e+00
  %743 = add nsw i64 %739, %555
  %744 = getelementptr inbounds float, float* %1, i64 %743
  %745 = load float, float* %744, align 4
  %746 = fcmp olt float %742, %745
  %747 = select i1 %746, float %742, float %745
  %748 = fcmp olt float %741, %747
  %749 = select i1 %748, float %741, float %747
  store float %749, float* %740, align 4
  %750 = add nsw i64 %738, -2
  %751 = getelementptr inbounds float, float* %556, i64 %750
  %752 = load float, float* %751, align 4
  %753 = fadd float %749, 2.000000e+00
  %754 = add nsw i64 %750, %555
  %755 = getelementptr inbounds float, float* %1, i64 %754
  %756 = load float, float* %755, align 4
  %757 = fcmp olt float %753, %756
  %758 = select i1 %757, float %753, float %756
  %759 = fcmp olt float %752, %758
  %760 = select i1 %759, float %752, float %758
  store float %760, float* %751, align 4
  %761 = icmp sgt i64 %750, 0
  br i1 %761, label %736, label %645

762:                                              ; preds = %648, %830
  %763 = phi i64 [ %832, %830 ], [ %649, %648 ]
  %764 = getelementptr inbounds float, float* %556, i64 %763
  %765 = load float, float* %764, align 4
  %766 = add i64 %647, %763
  %767 = shl i64 %766, 32
  %768 = ashr exact i64 %767, 32
  %769 = getelementptr inbounds float, float* %1, i64 %768
  %770 = getelementptr inbounds float, float* %769, i64 2
  %771 = load float, float* %770, align 4
  %772 = load float, float* %769, align 4
  %773 = getelementptr inbounds float, float* %769, i64 1
  %774 = load float, float* %773, align 4
  %775 = fcmp ogt float %772, %774
  %776 = select i1 %775, float %772, float %774
  %777 = select i1 %775, float %774, float %772
  %778 = getelementptr inbounds float, float* %769, i64 3
  %779 = load float, float* %778, align 4
  %780 = getelementptr inbounds float, float* %769, i64 4
  %781 = load float, float* %780, align 4
  %782 = fcmp ogt float %779, %781
  %783 = select i1 %782, float %781, float %779
  %784 = select i1 %782, float %779, float %781
  %785 = fcmp ogt float %777, %783
  %786 = select i1 %785, float %784, float %776
  %787 = select i1 %785, float %777, float %783
  %788 = select i1 %785, float %776, float %784
  %789 = fcmp ogt float %771, %786
  br i1 %789, label %790, label %798

790:                                              ; preds = %762
  %791 = fcmp olt float %786, %787
  br i1 %791, label %792, label %795

792:                                              ; preds = %790
  %793 = fcmp olt float %771, %787
  %794 = select i1 %793, float %771, float %787
  br label %806

795:                                              ; preds = %790
  %796 = fcmp olt float %788, %786
  %797 = select i1 %796, float %788, float %786
  br label %806

798:                                              ; preds = %762
  %799 = fcmp olt float %771, %787
  br i1 %799, label %800, label %803

800:                                              ; preds = %798
  %801 = fcmp olt float %786, %787
  %802 = select i1 %801, float %786, float %787
  br label %806

803:                                              ; preds = %798
  %804 = fcmp olt float %771, %788
  %805 = select i1 %804, float %771, float %788
  br label %806

806:                                              ; preds = %792, %795, %800, %803
  %807 = phi float [ %794, %792 ], [ %797, %795 ], [ %802, %800 ], [ %805, %803 ]
  %808 = fadd float %807, -1.000000e+00
  %809 = fcmp ogt float %765, %808
  br i1 %809, label %830, label %810

810:                                              ; preds = %806
  br i1 %789, label %811, label %819

811:                                              ; preds = %810
  %812 = fcmp olt float %786, %787
  br i1 %812, label %813, label %816

813:                                              ; preds = %811
  %814 = fcmp olt float %771, %787
  %815 = select i1 %814, float %771, float %787
  br label %827

816:                                              ; preds = %811
  %817 = fcmp olt float %788, %786
  %818 = select i1 %817, float %788, float %786
  br label %827

819:                                              ; preds = %810
  %820 = fcmp olt float %771, %787
  br i1 %820, label %821, label %824

821:                                              ; preds = %819
  %822 = fcmp olt float %786, %787
  %823 = select i1 %822, float %786, float %787
  br label %827

824:                                              ; preds = %819
  %825 = fcmp olt float %771, %788
  %826 = select i1 %825, float %771, float %788
  br label %827

827:                                              ; preds = %813, %816, %821, %824
  %828 = phi float [ %815, %813 ], [ %818, %816 ], [ %823, %821 ], [ %826, %824 ]
  %829 = fadd float %828, -1.000000e+00
  br label %830

830:                                              ; preds = %806, %827
  %831 = phi float [ %829, %827 ], [ %765, %806 ]
  store float %831, float* %764, align 4
  %832 = add nuw nsw i64 %763, 1
  %833 = icmp eq i64 %832, %461
  br i1 %833, label %834, label %762, !llvm.loop !92

834:                                              ; preds = %830, %735, %645
  %835 = trunc i64 %555 to i32
  %836 = getelementptr float, float* %557, i64 1
  %837 = load float, float* %836, align 4
  %838 = getelementptr float, float* %557, i64 2
  %839 = load float, float* %838, align 4
  %840 = fcmp olt float %837, %561
  %841 = select i1 %840, float %837, float %561
  %842 = select i1 %840, float %561, float %837
  %843 = fcmp olt float %842, %839
  %844 = fcmp olt float %841, %839
  %845 = select i1 %844, float %839, float %841
  %846 = select i1 %843, float %842, float %845
  %847 = fadd float %846, -1.000000e+00
  %848 = load float, float* %556, align 4
  %849 = fcmp ogt float %848, %847
  %850 = select i1 %849, float %848, float %847
  store float %850, float* %556, align 4
  %851 = getelementptr inbounds float, float* %556, i64 1
  %852 = load float, float* %851, align 4
  %853 = fcmp ogt float %852, %847
  %854 = select i1 %853, float %852, float %847
  store float %854, float* %851, align 4
  %855 = add i32 %455, %835
  %856 = sext i32 %855 to i64
  %857 = getelementptr inbounds float, float* %1, i64 %856
  %858 = load float, float* %857, align 4
  %859 = getelementptr float, float* %857, i64 1
  %860 = load float, float* %859, align 4
  %861 = getelementptr float, float* %857, i64 2
  %862 = load float, float* %861, align 4
  %863 = fcmp ogt float %858, %860
  %864 = select i1 %863, float %860, float %858
  %865 = select i1 %863, float %858, float %860
  %866 = fcmp olt float %865, %862
  %867 = fcmp olt float %864, %862
  %868 = select i1 %867, float %862, float %864
  %869 = select i1 %866, float %865, float %868
  %870 = fadd float %869, -1.000000e+00
  %871 = getelementptr inbounds float, float* %556, i64 %456
  %872 = load float, float* %871, align 4
  %873 = fcmp ogt float %872, %870
  %874 = select i1 %873, float %872, float %870
  store float %874, float* %871, align 4
  %875 = getelementptr inbounds float, float* %556, i64 %458
  %876 = load float, float* %875, align 4
  %877 = fcmp ogt float %876, %870
  %878 = select i1 %877, float %876, float %870
  store float %878, float* %875, align 4
  br i1 %32, label %879, label %958

879:                                              ; preds = %834
  br i1 %480, label %946, label %880

880:                                              ; preds = %879
  br i1 %483, label %924, label %881

881:                                              ; preds = %880, %881
  %882 = phi i64 [ %921, %881 ], [ 0, %880 ]
  %883 = phi i64 [ %922, %881 ], [ %484, %880 ]
  %884 = getelementptr inbounds float, float* %556, i64 %882
  %885 = bitcast float* %884 to <4 x float>*
  %886 = load <4 x float>, <4 x float>* %885, align 4
  %887 = getelementptr inbounds float, float* %884, i64 4
  %888 = bitcast float* %887 to <4 x float>*
  %889 = load <4 x float>, <4 x float>* %888, align 4
  %890 = getelementptr inbounds float, float* %27, i64 %882
  %891 = bitcast float* %890 to <4 x float>*
  %892 = load <4 x float>, <4 x float>* %891, align 16
  %893 = getelementptr inbounds float, float* %890, i64 4
  %894 = bitcast float* %893 to <4 x float>*
  %895 = load <4 x float>, <4 x float>* %894, align 16
  %896 = fcmp ogt <4 x float> %886, %892
  %897 = fcmp ogt <4 x float> %889, %895
  %898 = select <4 x i1> %896, <4 x float> %886, <4 x float> %892
  %899 = select <4 x i1> %897, <4 x float> %889, <4 x float> %895
  %900 = bitcast float* %884 to <4 x float>*
  store <4 x float> %898, <4 x float>* %900, align 4
  %901 = bitcast float* %887 to <4 x float>*
  store <4 x float> %899, <4 x float>* %901, align 4
  %902 = or i64 %882, 8
  %903 = getelementptr inbounds float, float* %556, i64 %902
  %904 = bitcast float* %903 to <4 x float>*
  %905 = load <4 x float>, <4 x float>* %904, align 4
  %906 = getelementptr inbounds float, float* %903, i64 4
  %907 = bitcast float* %906 to <4 x float>*
  %908 = load <4 x float>, <4 x float>* %907, align 4
  %909 = getelementptr inbounds float, float* %27, i64 %902
  %910 = bitcast float* %909 to <4 x float>*
  %911 = load <4 x float>, <4 x float>* %910, align 16
  %912 = getelementptr inbounds float, float* %909, i64 4
  %913 = bitcast float* %912 to <4 x float>*
  %914 = load <4 x float>, <4 x float>* %913, align 16
  %915 = fcmp ogt <4 x float> %905, %911
  %916 = fcmp ogt <4 x float> %908, %914
  %917 = select <4 x i1> %915, <4 x float> %905, <4 x float> %911
  %918 = select <4 x i1> %916, <4 x float> %908, <4 x float> %914
  %919 = bitcast float* %903 to <4 x float>*
  store <4 x float> %917, <4 x float>* %919, align 4
  %920 = bitcast float* %906 to <4 x float>*
  store <4 x float> %918, <4 x float>* %920, align 4
  %921 = add i64 %882, 16
  %922 = add i64 %883, -2
  %923 = icmp eq i64 %922, 0
  br i1 %923, label %924, label %881, !llvm.loop !93

924:                                              ; preds = %881, %880
  %925 = phi i64 [ 0, %880 ], [ %921, %881 ]
  br i1 %485, label %945, label %926

926:                                              ; preds = %924
  %927 = getelementptr inbounds float, float* %556, i64 %925
  %928 = bitcast float* %927 to <4 x float>*
  %929 = load <4 x float>, <4 x float>* %928, align 4
  %930 = getelementptr inbounds float, float* %927, i64 4
  %931 = bitcast float* %930 to <4 x float>*
  %932 = load <4 x float>, <4 x float>* %931, align 4
  %933 = getelementptr inbounds float, float* %27, i64 %925
  %934 = bitcast float* %933 to <4 x float>*
  %935 = load <4 x float>, <4 x float>* %934, align 16
  %936 = getelementptr inbounds float, float* %933, i64 4
  %937 = bitcast float* %936 to <4 x float>*
  %938 = load <4 x float>, <4 x float>* %937, align 16
  %939 = fcmp ogt <4 x float> %929, %935
  %940 = fcmp ogt <4 x float> %932, %938
  %941 = select <4 x i1> %939, <4 x float> %929, <4 x float> %935
  %942 = select <4 x i1> %940, <4 x float> %932, <4 x float> %938
  %943 = bitcast float* %927 to <4 x float>*
  store <4 x float> %941, <4 x float>* %943, align 4
  %944 = bitcast float* %930 to <4 x float>*
  store <4 x float> %942, <4 x float>* %944, align 4
  br label %945

945:                                              ; preds = %924, %926
  br i1 %486, label %958, label %946

946:                                              ; preds = %945, %879
  %947 = phi i64 [ 0, %879 ], [ %481, %945 ]
  br label %948

948:                                              ; preds = %946, %948
  %949 = phi i64 [ %956, %948 ], [ %947, %946 ]
  %950 = getelementptr inbounds float, float* %556, i64 %949
  %951 = load float, float* %950, align 4
  %952 = getelementptr inbounds float, float* %27, i64 %949
  %953 = load float, float* %952, align 4
  %954 = fcmp ogt float %951, %953
  %955 = select i1 %954, float %951, float %953
  store float %955, float* %950, align 4
  %956 = add nuw nsw i64 %949, 1
  %957 = icmp eq i64 %956, %462
  br i1 %957, label %958, label %948, !llvm.loop !94

958:                                              ; preds = %948, %945, %834
  %959 = add nuw nsw i64 %551, 1
  %960 = icmp slt i64 %959, %459
  br i1 %960, label %550, label %961

961:                                              ; preds = %958
  %962 = icmp slt i32 %3, %4
  br i1 %355, label %1000, label %963

963:                                              ; preds = %961
  br i1 %962, label %964, label %1219

964:                                              ; preds = %963
  %965 = sext i32 %3 to i64
  %966 = sub nsw i64 %351, %965
  %967 = icmp ult i64 %966, 8
  br i1 %967, label %968, label %970

968:                                              ; preds = %998, %964
  %969 = phi i64 [ %965, %964 ], [ %972, %998 ]
  br label %1090

970:                                              ; preds = %964
  %971 = and i64 %966, -8
  %972 = add nsw i64 %971, %965
  br label %973

973:                                              ; preds = %973, %970
  %974 = phi i64 [ 0, %970 ], [ %996, %973 ]
  %975 = add i64 %974, %965
  %976 = getelementptr inbounds float, float* %0, i64 %975
  %977 = bitcast float* %976 to <4 x float>*
  %978 = load <4 x float>, <4 x float>* %977, align 4
  %979 = getelementptr inbounds float, float* %976, i64 4
  %980 = bitcast float* %979 to <4 x float>*
  %981 = load <4 x float>, <4 x float>* %980, align 4
  %982 = getelementptr inbounds float, float* %25, i64 %975
  %983 = bitcast float* %982 to <4 x float>*
  %984 = load <4 x float>, <4 x float>* %983, align 4
  %985 = getelementptr inbounds float, float* %982, i64 4
  %986 = bitcast float* %985 to <4 x float>*
  %987 = load <4 x float>, <4 x float>* %986, align 4
  %988 = fsub <4 x float> %978, %984
  %989 = fsub <4 x float> %981, %987
  %990 = fcmp olt <4 x float> %988, zeroinitializer
  %991 = fcmp olt <4 x float> %989, zeroinitializer
  %992 = select <4 x i1> %990, <4 x float> zeroinitializer, <4 x float> %988
  %993 = select <4 x i1> %991, <4 x float> zeroinitializer, <4 x float> %989
  %994 = bitcast float* %982 to <4 x float>*
  store <4 x float> %992, <4 x float>* %994, align 4
  %995 = bitcast float* %985 to <4 x float>*
  store <4 x float> %993, <4 x float>* %995, align 4
  %996 = add i64 %974, 8
  %997 = icmp eq i64 %996, %971
  br i1 %997, label %998, label %973, !llvm.loop !95

998:                                              ; preds = %973
  %999 = icmp eq i64 %966, %971
  br i1 %999, label %1101, label %968

1000:                                             ; preds = %961
  br i1 %962, label %1001, label %1219

1001:                                             ; preds = %1000
  %1002 = sext i32 %3 to i64
  %1003 = sub nsw i64 %351, %1002
  %1004 = icmp ult i64 %1003, 4
  br i1 %1004, label %1059, label %1005

1005:                                             ; preds = %1001
  %1006 = add nsw i64 %1002, %30
  %1007 = getelementptr float, float* %25, i64 %1006
  %1008 = add nsw i64 %351, %30
  %1009 = getelementptr float, float* %25, i64 %1008
  %1010 = getelementptr float, float* %25, i64 %1002
  %1011 = getelementptr float, float* %25, i64 %351
  %1012 = icmp ult float* %1007, %1011
  %1013 = icmp ult float* %1010, %1009
  %1014 = and i1 %1012, %1013
  br i1 %1014, label %1059, label %1015

1015:                                             ; preds = %1005
  %1016 = and i64 %1003, -4
  %1017 = add nsw i64 %1016, %1002
  br label %1018

1018:                                             ; preds = %1018, %1015
  %1019 = phi i64 [ 0, %1015 ], [ %1055, %1018 ]
  %1020 = add i64 %1019, %1002
  %1021 = add nsw i64 %1020, %30
  %1022 = getelementptr inbounds float, float* %25, i64 %1021
  %1023 = bitcast float* %1022 to <4 x float>*
  %1024 = load <4 x float>, <4 x float>* %1023, align 4, !alias.scope !96, !noalias !99
  %1025 = getelementptr inbounds float, float* %25, i64 %1020
  %1026 = bitcast float* %1025 to <4 x float>*
  %1027 = load <4 x float>, <4 x float>* %1026, align 4, !alias.scope !99
  %1028 = fadd <4 x float> %1027, <float -4.000000e+00, float -4.000000e+00, float -4.000000e+00, float -4.000000e+00>
  %1029 = fcmp ogt <4 x float> %1024, %1028
  %1030 = select <4 x i1> %1029, <4 x float> %1024, <4 x float> %1028
  %1031 = bitcast float* %1022 to <4 x float>*
  store <4 x float> %1030, <4 x float>* %1031, align 4, !alias.scope !96, !noalias !99
  %1032 = bitcast float* %1025 to <4 x float>*
  %1033 = load <4 x float>, <4 x float>* %1032, align 4, !alias.scope !99
  %1034 = fadd <4 x float> %1030, <float -4.000000e+00, float -4.000000e+00, float -4.000000e+00, float -4.000000e+00>
  %1035 = fcmp ogt <4 x float> %1033, %1034
  %1036 = select <4 x i1> %1035, <4 x float> %1033, <4 x float> %1034
  %1037 = bitcast float* %1025 to <4 x float>*
  store <4 x float> %1036, <4 x float>* %1037, align 4, !alias.scope !99
  %1038 = getelementptr inbounds float, float* %0, i64 %1020
  %1039 = bitcast float* %1038 to <4 x float>*
  %1040 = load <4 x float>, <4 x float>* %1039, align 4, !alias.scope !101
  %1041 = fsub <4 x float> %1040, %1036
  %1042 = fcmp olt <4 x float> %1041, zeroinitializer
  %1043 = select <4 x i1> %1042, <4 x float> zeroinitializer, <4 x float> %1041
  %1044 = getelementptr inbounds float, float* %0, i64 %1021
  %1045 = bitcast float* %1044 to <4 x float>*
  %1046 = load <4 x float>, <4 x float>* %1045, align 4, !alias.scope !103
  %1047 = bitcast float* %1022 to <4 x float>*
  %1048 = load <4 x float>, <4 x float>* %1047, align 4, !alias.scope !96, !noalias !99
  %1049 = fsub <4 x float> %1046, %1048
  %1050 = fcmp olt <4 x float> %1049, zeroinitializer
  %1051 = select <4 x i1> %1050, <4 x float> zeroinitializer, <4 x float> %1049
  %1052 = fadd <4 x float> %1043, %1051
  %1053 = fmul <4 x float> %1052, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %1054 = bitcast float* %1025 to <4 x float>*
  store <4 x float> %1053, <4 x float>* %1054, align 4, !alias.scope !99
  %1055 = add i64 %1019, 4
  %1056 = icmp eq i64 %1055, %1016
  br i1 %1056, label %1057, label %1018, !llvm.loop !105

1057:                                             ; preds = %1018
  %1058 = icmp eq i64 %1003, %1016
  br i1 %1058, label %1101, label %1059

1059:                                             ; preds = %1057, %1005, %1001
  %1060 = phi i64 [ %1002, %1005 ], [ %1002, %1001 ], [ %1017, %1057 ]
  br label %1061

1061:                                             ; preds = %1059, %1061
  %1062 = phi i64 [ %1088, %1061 ], [ %1060, %1059 ]
  %1063 = add nsw i64 %1062, %30
  %1064 = getelementptr inbounds float, float* %25, i64 %1063
  %1065 = load float, float* %1064, align 4
  %1066 = getelementptr inbounds float, float* %25, i64 %1062
  %1067 = load float, float* %1066, align 4
  %1068 = fadd float %1067, -4.000000e+00
  %1069 = fcmp ogt float %1065, %1068
  %1070 = select i1 %1069, float %1065, float %1068
  store float %1070, float* %1064, align 4
  %1071 = load float, float* %1066, align 4
  %1072 = fadd float %1070, -4.000000e+00
  %1073 = fcmp ogt float %1071, %1072
  %1074 = select i1 %1073, float %1071, float %1072
  store float %1074, float* %1066, align 4
  %1075 = getelementptr inbounds float, float* %0, i64 %1062
  %1076 = load float, float* %1075, align 4
  %1077 = fsub float %1076, %1074
  %1078 = fcmp olt float %1077, 0.000000e+00
  %1079 = select i1 %1078, float 0.000000e+00, float %1077
  %1080 = getelementptr inbounds float, float* %0, i64 %1063
  %1081 = load float, float* %1080, align 4
  %1082 = load float, float* %1064, align 4
  %1083 = fsub float %1081, %1082
  %1084 = fcmp olt float %1083, 0.000000e+00
  %1085 = select i1 %1084, float 0.000000e+00, float %1083
  %1086 = fadd float %1079, %1085
  %1087 = fmul float %1086, 5.000000e-01
  store float %1087, float* %1066, align 4
  %1088 = add nsw i64 %1062, 1
  %1089 = icmp eq i64 %1088, %351
  br i1 %1089, label %1101, label %1061, !llvm.loop !106

1090:                                             ; preds = %968, %1090
  %1091 = phi i64 [ %1099, %1090 ], [ %969, %968 ]
  %1092 = getelementptr inbounds float, float* %0, i64 %1091
  %1093 = load float, float* %1092, align 4
  %1094 = getelementptr inbounds float, float* %25, i64 %1091
  %1095 = load float, float* %1094, align 4
  %1096 = fsub float %1093, %1095
  %1097 = fcmp olt float %1096, 0.000000e+00
  %1098 = select i1 %1097, float 0.000000e+00, float %1096
  store float %1098, float* %1094, align 4
  %1099 = add nsw i64 %1091, 1
  %1100 = icmp eq i64 %1099, %351
  br i1 %1100, label %1101, label %1090, !llvm.loop !107

1101:                                             ; preds = %1090, %1061, %998, %1057
  br i1 %962, label %1102, label %1219

1102:                                             ; preds = %1101
  %1103 = sext i32 %3 to i64
  %1104 = sub nsw i64 %351, %1103
  %1105 = icmp ult i64 %1104, 8
  br i1 %1105, label %1106, label %1108

1106:                                             ; preds = %1186, %1102
  %1107 = phi i64 [ %1103, %1102 ], [ %1110, %1186 ]
  br label %1191

1108:                                             ; preds = %1102
  %1109 = and i64 %1104, -8
  %1110 = add nsw i64 %1109, %1103
  %1111 = add nsw i64 %1109, -8
  %1112 = lshr exact i64 %1111, 3
  %1113 = add nuw nsw i64 %1112, 1
  %1114 = and i64 %1113, 1
  %1115 = icmp eq i64 %1111, 0
  br i1 %1115, label %1163, label %1116

1116:                                             ; preds = %1108
  %1117 = sub nuw nsw i64 %1113, %1114
  br label %1118

1118:                                             ; preds = %1118, %1116
  %1119 = phi i64 [ 0, %1116 ], [ %1160, %1118 ]
  %1120 = phi i64 [ %1117, %1116 ], [ %1161, %1118 ]
  %1121 = add i64 %1119, %1103
  %1122 = getelementptr inbounds float, float* %25, i64 %1121
  %1123 = bitcast float* %1122 to <4 x float>*
  %1124 = load <4 x float>, <4 x float>* %1123, align 4
  %1125 = getelementptr inbounds float, float* %1122, i64 4
  %1126 = bitcast float* %1125 to <4 x float>*
  %1127 = load <4 x float>, <4 x float>* %1126, align 4
  %1128 = getelementptr inbounds float, float* %17, i64 %1121
  %1129 = bitcast float* %1128 to <4 x float>*
  %1130 = load <4 x float>, <4 x float>* %1129, align 4
  %1131 = getelementptr inbounds float, float* %1128, i64 4
  %1132 = bitcast float* %1131 to <4 x float>*
  %1133 = load <4 x float>, <4 x float>* %1132, align 4
  %1134 = fcmp ogt <4 x float> %1124, %1130
  %1135 = fcmp ogt <4 x float> %1127, %1133
  %1136 = select <4 x i1> %1134, <4 x float> %1124, <4 x float> %1130
  %1137 = select <4 x i1> %1135, <4 x float> %1127, <4 x float> %1133
  %1138 = bitcast float* %1122 to <4 x float>*
  store <4 x float> %1136, <4 x float>* %1138, align 4
  %1139 = bitcast float* %1125 to <4 x float>*
  store <4 x float> %1137, <4 x float>* %1139, align 4
  %1140 = or i64 %1119, 8
  %1141 = add i64 %1140, %1103
  %1142 = getelementptr inbounds float, float* %25, i64 %1141
  %1143 = bitcast float* %1142 to <4 x float>*
  %1144 = load <4 x float>, <4 x float>* %1143, align 4
  %1145 = getelementptr inbounds float, float* %1142, i64 4
  %1146 = bitcast float* %1145 to <4 x float>*
  %1147 = load <4 x float>, <4 x float>* %1146, align 4
  %1148 = getelementptr inbounds float, float* %17, i64 %1141
  %1149 = bitcast float* %1148 to <4 x float>*
  %1150 = load <4 x float>, <4 x float>* %1149, align 4
  %1151 = getelementptr inbounds float, float* %1148, i64 4
  %1152 = bitcast float* %1151 to <4 x float>*
  %1153 = load <4 x float>, <4 x float>* %1152, align 4
  %1154 = fcmp ogt <4 x float> %1144, %1150
  %1155 = fcmp ogt <4 x float> %1147, %1153
  %1156 = select <4 x i1> %1154, <4 x float> %1144, <4 x float> %1150
  %1157 = select <4 x i1> %1155, <4 x float> %1147, <4 x float> %1153
  %1158 = bitcast float* %1142 to <4 x float>*
  store <4 x float> %1156, <4 x float>* %1158, align 4
  %1159 = bitcast float* %1145 to <4 x float>*
  store <4 x float> %1157, <4 x float>* %1159, align 4
  %1160 = add i64 %1119, 16
  %1161 = add i64 %1120, -2
  %1162 = icmp eq i64 %1161, 0
  br i1 %1162, label %1163, label %1118, !llvm.loop !108

1163:                                             ; preds = %1118, %1108
  %1164 = phi i64 [ 0, %1108 ], [ %1160, %1118 ]
  %1165 = icmp eq i64 %1114, 0
  br i1 %1165, label %1186, label %1166

1166:                                             ; preds = %1163
  %1167 = add i64 %1164, %1103
  %1168 = getelementptr inbounds float, float* %25, i64 %1167
  %1169 = bitcast float* %1168 to <4 x float>*
  %1170 = load <4 x float>, <4 x float>* %1169, align 4
  %1171 = getelementptr inbounds float, float* %1168, i64 4
  %1172 = bitcast float* %1171 to <4 x float>*
  %1173 = load <4 x float>, <4 x float>* %1172, align 4
  %1174 = getelementptr inbounds float, float* %17, i64 %1167
  %1175 = bitcast float* %1174 to <4 x float>*
  %1176 = load <4 x float>, <4 x float>* %1175, align 4
  %1177 = getelementptr inbounds float, float* %1174, i64 4
  %1178 = bitcast float* %1177 to <4 x float>*
  %1179 = load <4 x float>, <4 x float>* %1178, align 4
  %1180 = fcmp ogt <4 x float> %1170, %1176
  %1181 = fcmp ogt <4 x float> %1173, %1179
  %1182 = select <4 x i1> %1180, <4 x float> %1170, <4 x float> %1176
  %1183 = select <4 x i1> %1181, <4 x float> %1173, <4 x float> %1179
  %1184 = bitcast float* %1168 to <4 x float>*
  store <4 x float> %1182, <4 x float>* %1184, align 4
  %1185 = bitcast float* %1171 to <4 x float>*
  store <4 x float> %1183, <4 x float>* %1185, align 4
  br label %1186

1186:                                             ; preds = %1163, %1166
  %1187 = icmp eq i64 %1104, %1109
  br i1 %1187, label %1188, label %1106

1188:                                             ; preds = %1191, %1186
  br i1 %962, label %1189, label %1219

1189:                                             ; preds = %1188
  %1190 = sext i32 %3 to i64
  br label %1201

1191:                                             ; preds = %1106, %1191
  %1192 = phi i64 [ %1199, %1191 ], [ %1107, %1106 ]
  %1193 = getelementptr inbounds float, float* %25, i64 %1192
  %1194 = load float, float* %1193, align 4
  %1195 = getelementptr inbounds float, float* %17, i64 %1192
  %1196 = load float, float* %1195, align 4
  %1197 = fcmp ogt float %1194, %1196
  %1198 = select i1 %1197, float %1194, float %1196
  store float %1198, float* %1193, align 4
  %1199 = add nsw i64 %1192, 1
  %1200 = icmp eq i64 %1199, %351
  br i1 %1200, label %1188, label %1191, !llvm.loop !109

1201:                                             ; preds = %1201, %1189
  %1202 = phi i64 [ %1190, %1189 ], [ %1216, %1201 ]
  %1203 = getelementptr inbounds float, float* %25, i64 %1202
  %1204 = load float, float* %1203, align 4
  %1205 = fcmp olt float %1204, 4.000000e+00
  %1206 = select i1 %1205, float %1204, float 4.000000e+00
  %1207 = fpext float %1206 to double
  %1208 = fmul double %1207, 0x3FE62E42FEFA39EF
  %1209 = tail call double @exp(double %1208) #5
  %1210 = fptrunc double %1209 to float
  %1211 = fmul float %1210, 1.300000e+01
  %1212 = fadd float %1211, 5.000000e-01
  %1213 = tail call float @llvm.floor.f32(float %1212)
  %1214 = fptosi float %1213 to i32
  %1215 = getelementptr inbounds i32, i32* %19, i64 %1202
  store i32 %1214, i32* %1215, align 4
  %1216 = add nsw i64 %1202, 1
  %1217 = trunc i64 %1216 to i32
  %1218 = icmp eq i32 %1217, %4
  br i1 %1218, label %1219, label %1201

1219:                                             ; preds = %1201, %1000, %963, %1101, %1188
  %1220 = icmp ne i32 %10, 0
  %1221 = icmp eq i32 %11, 0
  %1222 = and i1 %1220, %1221
  %1223 = icmp ne i32 %9, 0
  %1224 = or i1 %1223, %1222
  %1225 = xor i1 %1224, true
  %1226 = and i1 %962, %1225
  br i1 %1226, label %1227, label %1296

1227:                                             ; preds = %1219
  %1228 = sext i32 %3 to i64
  %1229 = sub nsw i64 %351, %1228
  %1230 = icmp ult i64 %1229, 8
  br i1 %1230, label %1287, label %1231

1231:                                             ; preds = %1227
  %1232 = and i64 %1229, -8
  %1233 = add nsw i64 %1232, %1228
  %1234 = add nsw i64 %1232, -8
  %1235 = lshr exact i64 %1234, 3
  %1236 = add nuw nsw i64 %1235, 1
  %1237 = and i64 %1236, 1
  %1238 = icmp eq i64 %1234, 0
  br i1 %1238, label %1270, label %1239

1239:                                             ; preds = %1231
  %1240 = sub nuw nsw i64 %1236, %1237
  br label %1241

1241:                                             ; preds = %1241, %1239
  %1242 = phi i64 [ 0, %1239 ], [ %1267, %1241 ]
  %1243 = phi i64 [ %1240, %1239 ], [ %1268, %1241 ]
  %1244 = add i64 %1242, %1228
  %1245 = getelementptr inbounds float, float* %25, i64 %1244
  %1246 = bitcast float* %1245 to <4 x float>*
  %1247 = load <4 x float>, <4 x float>* %1246, align 4
  %1248 = getelementptr inbounds float, float* %1245, i64 4
  %1249 = bitcast float* %1248 to <4 x float>*
  %1250 = load <4 x float>, <4 x float>* %1249, align 4
  %1251 = fmul <4 x float> %1247, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %1252 = fmul <4 x float> %1250, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %1253 = bitcast float* %1245 to <4 x float>*
  store <4 x float> %1251, <4 x float>* %1253, align 4
  %1254 = bitcast float* %1248 to <4 x float>*
  store <4 x float> %1252, <4 x float>* %1254, align 4
  %1255 = or i64 %1242, 8
  %1256 = add i64 %1255, %1228
  %1257 = getelementptr inbounds float, float* %25, i64 %1256
  %1258 = bitcast float* %1257 to <4 x float>*
  %1259 = load <4 x float>, <4 x float>* %1258, align 4
  %1260 = getelementptr inbounds float, float* %1257, i64 4
  %1261 = bitcast float* %1260 to <4 x float>*
  %1262 = load <4 x float>, <4 x float>* %1261, align 4
  %1263 = fmul <4 x float> %1259, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %1264 = fmul <4 x float> %1262, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %1265 = bitcast float* %1257 to <4 x float>*
  store <4 x float> %1263, <4 x float>* %1265, align 4
  %1266 = bitcast float* %1260 to <4 x float>*
  store <4 x float> %1264, <4 x float>* %1266, align 4
  %1267 = add i64 %1242, 16
  %1268 = add i64 %1243, -2
  %1269 = icmp eq i64 %1268, 0
  br i1 %1269, label %1270, label %1241, !llvm.loop !110

1270:                                             ; preds = %1241, %1231
  %1271 = phi i64 [ 0, %1231 ], [ %1267, %1241 ]
  %1272 = icmp eq i64 %1237, 0
  br i1 %1272, label %1285, label %1273

1273:                                             ; preds = %1270
  %1274 = add i64 %1271, %1228
  %1275 = getelementptr inbounds float, float* %25, i64 %1274
  %1276 = bitcast float* %1275 to <4 x float>*
  %1277 = load <4 x float>, <4 x float>* %1276, align 4
  %1278 = getelementptr inbounds float, float* %1275, i64 4
  %1279 = bitcast float* %1278 to <4 x float>*
  %1280 = load <4 x float>, <4 x float>* %1279, align 4
  %1281 = fmul <4 x float> %1277, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %1282 = fmul <4 x float> %1280, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %1283 = bitcast float* %1275 to <4 x float>*
  store <4 x float> %1281, <4 x float>* %1283, align 4
  %1284 = bitcast float* %1278 to <4 x float>*
  store <4 x float> %1282, <4 x float>* %1284, align 4
  br label %1285

1285:                                             ; preds = %1270, %1273
  %1286 = icmp eq i64 %1229, %1232
  br i1 %1286, label %1296, label %1287

1287:                                             ; preds = %1285, %1227
  %1288 = phi i64 [ %1228, %1227 ], [ %1233, %1285 ]
  br label %1289

1289:                                             ; preds = %1287, %1289
  %1290 = phi i64 [ %1294, %1289 ], [ %1288, %1287 ]
  %1291 = getelementptr inbounds float, float* %25, i64 %1290
  %1292 = load float, float* %1291, align 4
  %1293 = fmul float %1292, 5.000000e-01
  store float %1293, float* %1291, align 4
  %1294 = add nsw i64 %1290, 1
  %1295 = icmp eq i64 %1294, %351
  br i1 %1295, label %1296, label %1289, !llvm.loop !111

1296:                                             ; preds = %1289, %1285, %1219
  br i1 %962, label %1297, label %1330

1297:                                             ; preds = %1296
  %1298 = sext i32 %3 to i64
  %1299 = sub nsw i64 %351, %1298
  %1300 = and i64 %1299, 1
  %1301 = icmp eq i64 %1300, 0
  br i1 %1301, label %1313, label %1302

1302:                                             ; preds = %1297
  %1303 = icmp slt i32 %3, 8
  br i1 %1303, label %1306, label %1304

1304:                                             ; preds = %1302
  %1305 = icmp sgt i32 %3, 11
  br i1 %1305, label %1306, label %1311

1306:                                             ; preds = %1304, %1302
  %1307 = phi float [ 2.000000e+00, %1302 ], [ 5.000000e-01, %1304 ]
  %1308 = getelementptr inbounds float, float* %25, i64 %1298
  %1309 = load float, float* %1308, align 4
  %1310 = fmul float %1309, %1307
  store float %1310, float* %1308, align 4
  br label %1311

1311:                                             ; preds = %1306, %1304
  %1312 = add nsw i64 %1298, 1
  br label %1313

1313:                                             ; preds = %1297, %1311
  %1314 = phi i64 [ %1298, %1297 ], [ %1312, %1311 ]
  %1315 = add nsw i64 %1298, 1
  %1316 = icmp eq i64 %351, %1315
  br i1 %1316, label %1330, label %1317

1317:                                             ; preds = %1313, %1576
  %1318 = phi i64 [ %1577, %1576 ], [ %1314, %1313 ]
  %1319 = icmp slt i64 %1318, 8
  br i1 %1319, label %1322, label %1320

1320:                                             ; preds = %1317
  %1321 = icmp sgt i64 %1318, 11
  br i1 %1321, label %1322, label %1327

1322:                                             ; preds = %1320, %1317
  %1323 = phi float [ 2.000000e+00, %1317 ], [ 5.000000e-01, %1320 ]
  %1324 = getelementptr inbounds float, float* %25, i64 %1318
  %1325 = load float, float* %1324, align 4
  %1326 = fmul float %1325, %1323
  store float %1326, float* %1324, align 4
  br label %1327

1327:                                             ; preds = %1322, %1320
  %1328 = add nsw i64 %1318, 1
  %1329 = icmp slt i64 %1328, 8
  br i1 %1329, label %1571, label %1569

1330:                                             ; preds = %1313, %1576, %1296
  %1331 = getelementptr inbounds %struct.AnalysisInfo, %struct.AnalysisInfo* %18, i64 0, i32 0
  %1332 = load i32, i32* %1331, align 4
  %1333 = icmp eq i32 %1332, 0
  br i1 %1333, label %1386, label %1334

1334:                                             ; preds = %1330
  %1335 = icmp slt i32 %4, 19
  %1336 = select i1 %1335, i32 %4, i32 19
  %1337 = icmp sgt i32 %1336, %3
  br i1 %1337, label %1338, label %1386

1338:                                             ; preds = %1334
  %1339 = sext i32 %3 to i64
  %1340 = sext i32 %1336 to i64
  %1341 = sub nsw i64 %1340, %1339
  %1342 = icmp ult i64 %1341, 8
  br i1 %1342, label %1373, label %1343

1343:                                             ; preds = %1338
  %1344 = and i64 %1341, -8
  %1345 = add nsw i64 %1344, %1339
  br label %1346

1346:                                             ; preds = %1346, %1343
  %1347 = phi i64 [ 0, %1343 ], [ %1369, %1346 ]
  %1348 = add i64 %1347, %1339
  %1349 = getelementptr inbounds float, float* %25, i64 %1348
  %1350 = bitcast float* %1349 to <4 x float>*
  %1351 = load <4 x float>, <4 x float>* %1350, align 4
  %1352 = getelementptr inbounds float, float* %1349, i64 4
  %1353 = bitcast float* %1352 to <4 x float>*
  %1354 = load <4 x float>, <4 x float>* %1353, align 4
  %1355 = getelementptr inbounds %struct.AnalysisInfo, %struct.AnalysisInfo* %18, i64 0, i32 11, i64 %1348
  %1356 = bitcast i8* %1355 to <4 x i8>*
  %1357 = load <4 x i8>, <4 x i8>* %1356, align 1
  %1358 = getelementptr inbounds i8, i8* %1355, i64 4
  %1359 = bitcast i8* %1358 to <4 x i8>*
  %1360 = load <4 x i8>, <4 x i8>* %1359, align 1
  %1361 = uitofp <4 x i8> %1357 to <4 x float>
  %1362 = uitofp <4 x i8> %1360 to <4 x float>
  %1363 = fmul <4 x float> %1361, <float 1.562500e-02, float 1.562500e-02, float 1.562500e-02, float 1.562500e-02>
  %1364 = fmul <4 x float> %1362, <float 1.562500e-02, float 1.562500e-02, float 1.562500e-02, float 1.562500e-02>
  %1365 = fadd <4 x float> %1351, %1363
  %1366 = fadd <4 x float> %1354, %1364
  %1367 = bitcast float* %1349 to <4 x float>*
  store <4 x float> %1365, <4 x float>* %1367, align 4
  %1368 = bitcast float* %1352 to <4 x float>*
  store <4 x float> %1366, <4 x float>* %1368, align 4
  %1369 = add i64 %1347, 8
  %1370 = icmp eq i64 %1369, %1344
  br i1 %1370, label %1371, label %1346, !llvm.loop !112

1371:                                             ; preds = %1346
  %1372 = icmp eq i64 %1341, %1344
  br i1 %1372, label %1386, label %1373

1373:                                             ; preds = %1371, %1338
  %1374 = phi i64 [ %1339, %1338 ], [ %1345, %1371 ]
  br label %1375

1375:                                             ; preds = %1373, %1375
  %1376 = phi i64 [ %1384, %1375 ], [ %1374, %1373 ]
  %1377 = getelementptr inbounds float, float* %25, i64 %1376
  %1378 = load float, float* %1377, align 4
  %1379 = getelementptr inbounds %struct.AnalysisInfo, %struct.AnalysisInfo* %18, i64 0, i32 11, i64 %1376
  %1380 = load i8, i8* %1379, align 1
  %1381 = uitofp i8 %1380 to float
  %1382 = fmul float %1381, 1.562500e-02
  %1383 = fadd float %1378, %1382
  store float %1383, float* %1377, align 4
  %1384 = add nsw i64 %1376, 1
  %1385 = icmp slt i64 %1384, %1340
  br i1 %1385, label %1375, label %1386, !llvm.loop !113

1386:                                             ; preds = %1375, %1371, %1334, %1330
  br i1 %962, label %1387, label %1567

1387:                                             ; preds = %1386
  %1388 = or i1 %1223, %1221
  %1389 = and i1 %1220, %1388
  %1390 = shl nsw i32 %14, 1
  %1391 = sdiv i32 %1390, 3
  %1392 = sext i32 %3 to i64
  br i1 %1389, label %1393, label %1513

1393:                                             ; preds = %1387
  %1394 = sub nsw i64 %351, %1392
  %1395 = icmp ult i64 %1394, 4
  br i1 %1395, label %1468, label %1396

1396:                                             ; preds = %1393
  %1397 = getelementptr i32, i32* %6, i64 %1392
  %1398 = getelementptr i32, i32* %6, i64 %351
  %1399 = getelementptr i16, i16* %12, i64 %1392
  %1400 = add nsw i64 %351, 1
  %1401 = getelementptr i16, i16* %12, i64 %1400
  %1402 = bitcast i16* %1401 to i32*
  %1403 = icmp ult i32* %1397, %1402
  %1404 = bitcast i32* %1398 to i16*
  %1405 = icmp ult i16* %1399, %1404
  %1406 = and i1 %1403, %1405
  br i1 %1406, label %1468, label %1407

1407:                                             ; preds = %1396
  %1408 = and i64 %1394, -4
  %1409 = add nsw i64 %1408, %1392
  %1410 = insertelement <4 x i32> undef, i32 %5, i32 0
  %1411 = shufflevector <4 x i32> %1410, <4 x i32> undef, <4 x i32> zeroinitializer
  %1412 = insertelement <4 x i32> undef, i32 %13, i32 0
  %1413 = shufflevector <4 x i32> %1412, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %1414

1414:                                             ; preds = %1414, %1407
  %1415 = phi i64 [ 0, %1407 ], [ %1459, %1414 ]
  %1416 = phi <4 x i32> [ zeroinitializer, %1407 ], [ %1458, %1414 ]
  %1417 = add i64 %1415, %1392
  %1418 = getelementptr inbounds float, float* %25, i64 %1417
  %1419 = bitcast float* %1418 to <4 x float>*
  %1420 = load <4 x float>, <4 x float>* %1419, align 4, !alias.scope !114
  %1421 = fcmp olt <4 x float> %1420, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %1422 = select <4 x i1> %1421, <4 x float> %1420, <4 x float> <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %1423 = bitcast float* %1418 to <4 x float>*
  store <4 x float> %1422, <4 x float>* %1423, align 4, !alias.scope !114
  %1424 = add nsw i64 %1417, 1
  %1425 = getelementptr inbounds i16, i16* %12, i64 %1424
  %1426 = bitcast i16* %1425 to <4 x i16>*
  %1427 = load <4 x i16>, <4 x i16>* %1426, align 2, !alias.scope !117
  %1428 = sext <4 x i16> %1427 to <4 x i32>
  %1429 = getelementptr inbounds i16, i16* %12, i64 %1417
  %1430 = bitcast i16* %1429 to <4 x i16>*
  %1431 = load <4 x i16>, <4 x i16>* %1430, align 2, !alias.scope !117
  %1432 = sext <4 x i16> %1431 to <4 x i32>
  %1433 = sub nsw <4 x i32> %1428, %1432
  %1434 = mul nsw <4 x i32> %1433, %1411
  %1435 = shl <4 x i32> %1434, %1413
  %1436 = icmp sgt <4 x i32> %1435, <i32 5, i32 5, i32 5, i32 5>
  %1437 = icmp sgt <4 x i32> %1435, <i32 48, i32 48, i32 48, i32 48>
  %1438 = sitofp <4 x i32> %1435 to <4 x float>
  %1439 = fmul <4 x float> %1422, %1438
  %1440 = fdiv <4 x float> %1439, <float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00>
  %1441 = fptosi <4 x float> %1440 to <4 x i32>
  %1442 = mul <4 x i32> %1441, <i32 48, i32 48, i32 48, i32 48>
  %1443 = fmul <4 x float> %1422, <float 8.000000e+00, float 8.000000e+00, float 8.000000e+00, float 8.000000e+00>
  %1444 = fptosi <4 x float> %1443 to <4 x i32>
  %1445 = shl <4 x i32> %1444, <i32 3, i32 3, i32 3, i32 3>
  %1446 = mul <4 x i32> %1445, %1435
  %1447 = sdiv <4 x i32> %1446, <i32 8, i32 8, i32 8, i32 8>
  %1448 = fptosi <4 x float> %1422 to <4 x i32>
  %1449 = shl <4 x i32> %1448, <i32 3, i32 3, i32 3, i32 3>
  %1450 = mul <4 x i32> %1449, %1435
  %1451 = xor <4 x i1> %1437, %1436
  %1452 = select <4 x i1> %1437, <4 x i32> %1444, <4 x i32> %1448
  %1453 = select <4 x i1> %1451, <4 x i32> %1441, <4 x i32> %1452
  %1454 = select <4 x i1> %1437, <4 x i32> %1447, <4 x i32> %1450
  %1455 = select <4 x i1> %1451, <4 x i32> %1442, <4 x i32> %1454
  %1456 = getelementptr inbounds i32, i32* %6, i64 %1417
  %1457 = bitcast i32* %1456 to <4 x i32>*
  store <4 x i32> %1453, <4 x i32>* %1457, align 4, !alias.scope !119, !noalias !117
  %1458 = add nsw <4 x i32> %1455, %1416
  %1459 = add i64 %1415, 4
  %1460 = icmp eq i64 %1459, %1408
  br i1 %1460, label %1461, label %1414, !llvm.loop !121

1461:                                             ; preds = %1414
  %1462 = shufflevector <4 x i32> %1458, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1463 = add <4 x i32> %1458, %1462
  %1464 = shufflevector <4 x i32> %1463, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1465 = add <4 x i32> %1463, %1464
  %1466 = extractelement <4 x i32> %1465, i32 0
  %1467 = icmp eq i64 %1394, %1408
  br i1 %1467, label %1567, label %1468

1468:                                             ; preds = %1461, %1396, %1393
  %1469 = phi i64 [ %1392, %1396 ], [ %1392, %1393 ], [ %1409, %1461 ]
  %1470 = phi i32 [ 0, %1396 ], [ 0, %1393 ], [ %1466, %1461 ]
  br label %1471

1471:                                             ; preds = %1468, %1507
  %1472 = phi i64 [ %1478, %1507 ], [ %1469, %1468 ]
  %1473 = phi i32 [ %1511, %1507 ], [ %1470, %1468 ]
  %1474 = getelementptr inbounds float, float* %25, i64 %1472
  %1475 = load float, float* %1474, align 4
  %1476 = fcmp olt float %1475, 4.000000e+00
  %1477 = select i1 %1476, float %1475, float 4.000000e+00
  store float %1477, float* %1474, align 4
  %1478 = add nsw i64 %1472, 1
  %1479 = getelementptr inbounds i16, i16* %12, i64 %1478
  %1480 = load i16, i16* %1479, align 2
  %1481 = sext i16 %1480 to i32
  %1482 = getelementptr inbounds i16, i16* %12, i64 %1472
  %1483 = load i16, i16* %1482, align 2
  %1484 = sext i16 %1483 to i32
  %1485 = sub nsw i32 %1481, %1484
  %1486 = mul nsw i32 %1485, %5
  %1487 = shl i32 %1486, %13
  %1488 = icmp slt i32 %1487, 6
  br i1 %1488, label %1503, label %1489

1489:                                             ; preds = %1471
  %1490 = icmp sgt i32 %1487, 48
  br i1 %1490, label %1497, label %1491

1491:                                             ; preds = %1489
  %1492 = sitofp i32 %1487 to float
  %1493 = fmul float %1477, %1492
  %1494 = fdiv float %1493, 6.000000e+00
  %1495 = fptosi float %1494 to i32
  %1496 = mul i32 %1495, 48
  br label %1507

1497:                                             ; preds = %1489
  %1498 = fmul float %1477, 8.000000e+00
  %1499 = fptosi float %1498 to i32
  %1500 = shl i32 %1499, 3
  %1501 = mul i32 %1500, %1487
  %1502 = sdiv i32 %1501, 8
  br label %1507

1503:                                             ; preds = %1471
  %1504 = fptosi float %1477 to i32
  %1505 = shl i32 %1504, 3
  %1506 = mul i32 %1505, %1487
  br label %1507

1507:                                             ; preds = %1491, %1497, %1503
  %1508 = phi i32 [ %1504, %1503 ], [ %1499, %1497 ], [ %1495, %1491 ]
  %1509 = phi i32 [ %1506, %1503 ], [ %1502, %1497 ], [ %1496, %1491 ]
  %1510 = getelementptr inbounds i32, i32* %6, i64 %1472
  store i32 %1508, i32* %1510, align 4
  %1511 = add nsw i32 %1509, %1473
  %1512 = icmp eq i64 %1478, %351
  br i1 %1512, label %1567, label %1471, !llvm.loop !122

1513:                                             ; preds = %1387, %1559
  %1514 = phi i64 [ %1520, %1559 ], [ %1392, %1387 ]
  %1515 = phi i32 [ %1552, %1559 ], [ 0, %1387 ]
  %1516 = getelementptr inbounds float, float* %25, i64 %1514
  %1517 = load float, float* %1516, align 4
  %1518 = fcmp olt float %1517, 4.000000e+00
  %1519 = select i1 %1518, float %1517, float 4.000000e+00
  store float %1519, float* %1516, align 4
  %1520 = add nsw i64 %1514, 1
  %1521 = getelementptr inbounds i16, i16* %12, i64 %1520
  %1522 = load i16, i16* %1521, align 2
  %1523 = sext i16 %1522 to i32
  %1524 = getelementptr inbounds i16, i16* %12, i64 %1514
  %1525 = load i16, i16* %1524, align 2
  %1526 = sext i16 %1525 to i32
  %1527 = sub nsw i32 %1523, %1526
  %1528 = mul nsw i32 %1527, %5
  %1529 = shl i32 %1528, %13
  %1530 = icmp slt i32 %1529, 6
  br i1 %1530, label %1531, label %1535

1531:                                             ; preds = %1513
  %1532 = fptosi float %1519 to i32
  %1533 = shl i32 %1532, 3
  %1534 = mul i32 %1533, %1529
  br label %1549

1535:                                             ; preds = %1513
  %1536 = icmp sgt i32 %1529, 48
  br i1 %1536, label %1537, label %1543

1537:                                             ; preds = %1535
  %1538 = fmul float %1519, 8.000000e+00
  %1539 = fptosi float %1538 to i32
  %1540 = shl i32 %1539, 3
  %1541 = mul i32 %1540, %1529
  %1542 = sdiv i32 %1541, 8
  br label %1549

1543:                                             ; preds = %1535
  %1544 = sitofp i32 %1529 to float
  %1545 = fmul float %1519, %1544
  %1546 = fdiv float %1545, 6.000000e+00
  %1547 = fptosi float %1546 to i32
  %1548 = mul i32 %1547, 48
  br label %1549

1549:                                             ; preds = %1531, %1543, %1537
  %1550 = phi i32 [ %1532, %1531 ], [ %1539, %1537 ], [ %1547, %1543 ]
  %1551 = phi i32 [ %1534, %1531 ], [ %1542, %1537 ], [ %1548, %1543 ]
  %1552 = add nsw i32 %1551, %1515
  %1553 = ashr i32 %1552, 6
  %1554 = icmp sgt i32 %1553, %1391
  br i1 %1554, label %1555, label %1559

1555:                                             ; preds = %1549
  %1556 = shl i32 %1391, 6
  %1557 = sub nsw i32 %1556, %1515
  %1558 = getelementptr inbounds i32, i32* %6, i64 %1514
  store i32 %1557, i32* %1558, align 4
  br label %1567

1559:                                             ; preds = %1549
  %1560 = getelementptr inbounds i32, i32* %6, i64 %1514
  store i32 %1550, i32* %1560, align 4
  %1561 = icmp eq i64 %1520, %351
  br i1 %1561, label %1567, label %1513

1562:                                             ; preds = %493, %1562
  %1563 = phi i64 [ %1565, %1562 ], [ %494, %493 ]
  %1564 = getelementptr inbounds i32, i32* %19, i64 %1563
  store i32 13, i32* %1564, align 4
  %1565 = add nsw i64 %1563, 1
  %1566 = icmp eq i64 %1565, %351
  br i1 %1566, label %1567, label %1562, !llvm.loop !123

1567:                                             ; preds = %1559, %1507, %1562, %1461, %548, %1386, %487, %1555
  %1568 = phi i32 [ %1556, %1555 ], [ 0, %487 ], [ 0, %1386 ], [ 0, %548 ], [ %1466, %1461 ], [ 0, %1562 ], [ %1511, %1507 ], [ %1552, %1559 ]
  store i32 %1568, i32* %15, align 4
  ret float %354

1569:                                             ; preds = %1327
  %1570 = icmp sgt i64 %1318, 10
  br i1 %1570, label %1571, label %1576

1571:                                             ; preds = %1569, %1327
  %1572 = phi float [ 2.000000e+00, %1327 ], [ 5.000000e-01, %1569 ]
  %1573 = getelementptr inbounds float, float* %25, i64 %1328
  %1574 = load float, float* %1573, align 4
  %1575 = fmul float %1574, %1572
  store float %1575, float* %1573, align 4
  br label %1576

1576:                                             ; preds = %1571, %1569
  %1577 = add nsw i64 %1318, 2
  %1578 = icmp eq i64 %1577, %351
  br i1 %1578, label %1330, label %1317
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @tf_analysis(%struct.OpusCustomMode* nocapture readonly, i32, i32, i32* nocapture, i32, float* nocapture readonly, i32, i32, float, i32, i32* nocapture readonly) unnamed_addr #0 {
  %12 = fsub float 5.000000e-01, %8
  %13 = fcmp olt float %12, -2.500000e-01
  %14 = select i1 %13, float -2.500000e-01, float %12
  %15 = fmul float %14, 0x3FA47AE140000000
  %16 = sext i32 %1 to i64
  %17 = shl nsw i64 %16, 2
  %18 = alloca i32, i64 %16, align 16
  %19 = bitcast i32* %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %19, i8 -86, i64 %17, i1 false)
  %20 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 5
  %21 = load i16*, i16** %20, align 8
  %22 = getelementptr inbounds i16, i16* %21, i64 %16
  %23 = load i16, i16* %22, align 2
  %24 = sext i16 %23 to i32
  %25 = add nsw i32 %1, -1
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds i16, i16* %21, i64 %26
  %28 = load i16, i16* %27, align 2
  %29 = sext i16 %28 to i32
  %30 = sub nsw i32 %24, %29
  %31 = shl i32 %30, %7
  %32 = sext i32 %31 to i64
  %33 = shl nsw i64 %32, 2
  %34 = alloca float, i64 %32, align 16
  %35 = bitcast float* %34 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %35, i8 -86, i64 %33, i1 false)
  %36 = load i16, i16* %22, align 2
  %37 = sext i16 %36 to i32
  %38 = load i16, i16* %27, align 2
  %39 = sext i16 %38 to i32
  %40 = sub nsw i32 %37, %39
  %41 = shl i32 %40, %7
  %42 = sext i32 %41 to i64
  %43 = shl nsw i64 %42, 2
  %44 = alloca float, i64 %42, align 16
  %45 = bitcast float* %44 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %45, i8 -86, i64 %43, i1 false)
  %46 = alloca i32, i64 %16, align 16
  %47 = bitcast i32* %46 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %47, i8 -86, i64 %17, i1 false)
  %48 = alloca i32, i64 %16, align 16
  %49 = bitcast i32* %48 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %49, i8 -86, i64 %17, i1 false)
  %50 = icmp sgt i32 %1, 0
  br i1 %50, label %51, label %64

51:                                               ; preds = %11
  %52 = mul nsw i32 %9, %6
  %53 = icmp ne i32 %2, 0
  %54 = select i1 %53, i32 %7, i32 0
  %55 = sitofp i32 %54 to float
  %56 = fmul float %15, %55
  %57 = icmp eq i32 %2, 0
  %58 = shl i32 1, %7
  %59 = add nsw i32 %7, 1
  %60 = sitofp i32 %59 to float
  %61 = fmul float %15, %60
  %62 = mul nsw i32 %7, -2
  %63 = zext i32 %1 to i64
  br label %173

64:                                               ; preds = %484, %11
  %65 = load i32, i32* %10, align 4
  %66 = load i32, i32* %18, align 16
  %67 = sext i32 %7 to i64
  %68 = shl nsw i32 %2, 2
  %69 = icmp eq i32 %2, 0
  %70 = select i1 %69, i32 %4, i32 0
  %71 = icmp sgt i32 %1, 1
  %72 = sext i32 %68 to i64
  %73 = getelementptr inbounds [4 x [8 x i8]], [4 x [8 x i8]]* @tf_select_table, i64 0, i64 %67, i64 %72
  %74 = load i8, i8* %73, align 4
  %75 = sext i8 %74 to i32
  %76 = shl nsw i32 %75, 1
  %77 = sub nsw i32 %66, %76
  %78 = icmp slt i32 %77, 0
  %79 = sub nsw i32 0, %77
  %80 = select i1 %78, i32 %79, i32 %77
  %81 = mul nsw i32 %80, %65
  %82 = or i64 %72, 1
  %83 = getelementptr inbounds [4 x [8 x i8]], [4 x [8 x i8]]* @tf_select_table, i64 0, i64 %67, i64 %82
  %84 = load i8, i8* %83, align 1
  %85 = sext i8 %84 to i32
  %86 = shl nsw i32 %85, 1
  %87 = sub nsw i32 %66, %86
  %88 = icmp slt i32 %87, 0
  %89 = sub nsw i32 0, %87
  %90 = select i1 %88, i32 %89, i32 %87
  %91 = mul nsw i32 %90, %65
  %92 = add nsw i32 %91, %70
  br i1 %71, label %119, label %93

93:                                               ; preds = %64
  %94 = icmp slt i32 %81, %92
  %95 = select i1 %94, i32 %81, i32 %92
  %96 = or i64 %72, 2
  %97 = getelementptr inbounds [4 x [8 x i8]], [4 x [8 x i8]]* @tf_select_table, i64 0, i64 %67, i64 %96
  %98 = load i8, i8* %97, align 2
  %99 = sext i8 %98 to i32
  %100 = shl nsw i32 %99, 1
  %101 = sub nsw i32 %66, %100
  %102 = icmp slt i32 %101, 0
  %103 = sub nsw i32 0, %101
  %104 = select i1 %102, i32 %103, i32 %101
  %105 = mul nsw i32 %104, %65
  %106 = or i64 %72, 3
  %107 = getelementptr inbounds [4 x [8 x i8]], [4 x [8 x i8]]* @tf_select_table, i64 0, i64 %67, i64 %106
  %108 = load i8, i8* %107, align 1
  %109 = sext i8 %108 to i32
  %110 = shl nsw i32 %109, 1
  %111 = sub nsw i32 %66, %110
  %112 = icmp slt i32 %111, 0
  %113 = sub nsw i32 0, %111
  %114 = select i1 %112, i32 %113, i32 %111
  %115 = mul nsw i32 %114, %65
  %116 = add nsw i32 %115, %70
  %117 = icmp slt i32 %105, %116
  %118 = select i1 %117, i32 %105, i32 %116
  br label %488

119:                                              ; preds = %64
  %120 = zext i32 %1 to i64
  br label %121

121:                                              ; preds = %121, %119
  %122 = phi i64 [ 1, %119 ], [ %147, %121 ]
  %123 = phi i32 [ %92, %119 ], [ %146, %121 ]
  %124 = phi i32 [ %81, %119 ], [ %140, %121 ]
  %125 = add nsw i32 %123, %4
  %126 = icmp slt i32 %124, %125
  %127 = select i1 %126, i32 %124, i32 %125
  %128 = add nsw i32 %124, %4
  %129 = icmp slt i32 %128, %123
  %130 = select i1 %129, i32 %128, i32 %123
  %131 = getelementptr inbounds i32, i32* %10, i64 %122
  %132 = load i32, i32* %131, align 4
  %133 = getelementptr inbounds i32, i32* %18, i64 %122
  %134 = load i32, i32* %133, align 4
  %135 = sub nsw i32 %134, %76
  %136 = icmp slt i32 %135, 0
  %137 = sub nsw i32 0, %135
  %138 = select i1 %136, i32 %137, i32 %135
  %139 = mul nsw i32 %138, %132
  %140 = add nsw i32 %139, %127
  %141 = sub nsw i32 %134, %86
  %142 = icmp slt i32 %141, 0
  %143 = sub nsw i32 0, %141
  %144 = select i1 %142, i32 %143, i32 %141
  %145 = mul nsw i32 %144, %132
  %146 = add nsw i32 %145, %130
  %147 = add nuw nsw i64 %122, 1
  %148 = icmp eq i64 %147, %120
  br i1 %148, label %149, label %121

149:                                              ; preds = %121
  %150 = icmp slt i32 %140, %146
  %151 = select i1 %150, i32 %140, i32 %146
  %152 = or i64 %72, 2
  %153 = getelementptr inbounds [4 x [8 x i8]], [4 x [8 x i8]]* @tf_select_table, i64 0, i64 %67, i64 %152
  %154 = load i8, i8* %153, align 2
  %155 = sext i8 %154 to i32
  %156 = shl nsw i32 %155, 1
  %157 = sub nsw i32 %66, %156
  %158 = icmp slt i32 %157, 0
  %159 = sub nsw i32 0, %157
  %160 = select i1 %158, i32 %159, i32 %157
  %161 = mul nsw i32 %160, %65
  %162 = or i64 %72, 3
  %163 = getelementptr inbounds [4 x [8 x i8]], [4 x [8 x i8]]* @tf_select_table, i64 0, i64 %67, i64 %162
  %164 = load i8, i8* %163, align 1
  %165 = sext i8 %164 to i32
  %166 = shl nsw i32 %165, 1
  %167 = sub nsw i32 %66, %166
  %168 = icmp slt i32 %167, 0
  %169 = sub nsw i32 0, %167
  %170 = select i1 %168, i32 %169, i32 %167
  %171 = mul nsw i32 %170, %65
  %172 = add nsw i32 %171, %70
  br label %579

173:                                              ; preds = %486, %51
  %174 = phi i16* [ %21, %51 ], [ %487, %486 ]
  %175 = phi i64 [ 0, %51 ], [ %176, %486 ]
  %176 = add nuw nsw i64 %175, 1
  %177 = getelementptr inbounds i16, i16* %174, i64 %176
  %178 = load i16, i16* %177, align 2
  %179 = sext i16 %178 to i32
  %180 = getelementptr inbounds i16, i16* %174, i64 %175
  %181 = load i16, i16* %180, align 2
  %182 = sext i16 %181 to i32
  %183 = sub nsw i32 %179, %182
  %184 = shl i32 %183, %7
  %185 = icmp eq i32 %183, 1
  %186 = shl i32 %182, %7
  %187 = add nsw i32 %186, %52
  %188 = sext i32 %187 to i64
  %189 = getelementptr inbounds float, float* %5, i64 %188
  %190 = bitcast float* %189 to i8*
  %191 = sext i32 %184 to i64
  %192 = shl nsw i64 %191, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %35, i8* align 4 %190, i64 %192, i1 false)
  %193 = icmp sgt i32 %184, 0
  br i1 %193, label %194, label %243

194:                                              ; preds = %173
  %195 = zext i32 %184 to i64
  %196 = add nsw i64 %195, -1
  %197 = and i64 %195, 3
  %198 = icmp ult i64 %196, 3
  br i1 %198, label %227, label %199

199:                                              ; preds = %194
  %200 = sub nsw i64 %195, %197
  br label %201

201:                                              ; preds = %201, %199
  %202 = phi i64 [ 0, %199 ], [ %224, %201 ]
  %203 = phi float [ 0.000000e+00, %199 ], [ %223, %201 ]
  %204 = phi i64 [ %200, %199 ], [ %225, %201 ]
  %205 = getelementptr inbounds float, float* %34, i64 %202
  %206 = load float, float* %205, align 16
  %207 = call float @llvm.fabs.f32(float %206) #5
  %208 = fadd float %203, %207
  %209 = or i64 %202, 1
  %210 = getelementptr inbounds float, float* %34, i64 %209
  %211 = load float, float* %210, align 4
  %212 = call float @llvm.fabs.f32(float %211) #5
  %213 = fadd float %208, %212
  %214 = or i64 %202, 2
  %215 = getelementptr inbounds float, float* %34, i64 %214
  %216 = load float, float* %215, align 8
  %217 = call float @llvm.fabs.f32(float %216) #5
  %218 = fadd float %213, %217
  %219 = or i64 %202, 3
  %220 = getelementptr inbounds float, float* %34, i64 %219
  %221 = load float, float* %220, align 4
  %222 = call float @llvm.fabs.f32(float %221) #5
  %223 = fadd float %218, %222
  %224 = add nuw nsw i64 %202, 4
  %225 = add i64 %204, -4
  %226 = icmp eq i64 %225, 0
  br i1 %226, label %227, label %201

227:                                              ; preds = %201, %194
  %228 = phi float [ undef, %194 ], [ %223, %201 ]
  %229 = phi i64 [ 0, %194 ], [ %224, %201 ]
  %230 = phi float [ 0.000000e+00, %194 ], [ %223, %201 ]
  %231 = icmp eq i64 %197, 0
  br i1 %231, label %243, label %232

232:                                              ; preds = %227, %232
  %233 = phi i64 [ %240, %232 ], [ %229, %227 ]
  %234 = phi float [ %239, %232 ], [ %230, %227 ]
  %235 = phi i64 [ %241, %232 ], [ %197, %227 ]
  %236 = getelementptr inbounds float, float* %34, i64 %233
  %237 = load float, float* %236, align 4
  %238 = call float @llvm.fabs.f32(float %237) #5
  %239 = fadd float %234, %238
  %240 = add nuw nsw i64 %233, 1
  %241 = add i64 %235, -1
  %242 = icmp eq i64 %241, 0
  br i1 %242, label %243, label %232, !llvm.loop !124

243:                                              ; preds = %227, %232, %173
  %244 = phi float [ 0.000000e+00, %173 ], [ %228, %227 ], [ %239, %232 ]
  %245 = fmul float %56, %244
  %246 = fadd float %244, %245
  %247 = or i1 %57, %185
  br i1 %247, label %305, label %248

248:                                              ; preds = %243
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %45, i8* nonnull align 16 %35, i64 %192, i1 false)
  %249 = ashr i32 %184, %7
  call void @haar1(float* nonnull %44, i32 %249, i32 %58) #5
  br i1 %193, label %250, label %299

250:                                              ; preds = %248
  %251 = zext i32 %184 to i64
  %252 = add nsw i64 %251, -1
  %253 = and i64 %251, 3
  %254 = icmp ult i64 %252, 3
  br i1 %254, label %283, label %255

255:                                              ; preds = %250
  %256 = sub nsw i64 %251, %253
  br label %257

257:                                              ; preds = %257, %255
  %258 = phi i64 [ 0, %255 ], [ %280, %257 ]
  %259 = phi float [ 0.000000e+00, %255 ], [ %279, %257 ]
  %260 = phi i64 [ %256, %255 ], [ %281, %257 ]
  %261 = getelementptr inbounds float, float* %44, i64 %258
  %262 = load float, float* %261, align 16
  %263 = call float @llvm.fabs.f32(float %262) #5
  %264 = fadd float %259, %263
  %265 = or i64 %258, 1
  %266 = getelementptr inbounds float, float* %44, i64 %265
  %267 = load float, float* %266, align 4
  %268 = call float @llvm.fabs.f32(float %267) #5
  %269 = fadd float %264, %268
  %270 = or i64 %258, 2
  %271 = getelementptr inbounds float, float* %44, i64 %270
  %272 = load float, float* %271, align 8
  %273 = call float @llvm.fabs.f32(float %272) #5
  %274 = fadd float %269, %273
  %275 = or i64 %258, 3
  %276 = getelementptr inbounds float, float* %44, i64 %275
  %277 = load float, float* %276, align 4
  %278 = call float @llvm.fabs.f32(float %277) #5
  %279 = fadd float %274, %278
  %280 = add nuw nsw i64 %258, 4
  %281 = add i64 %260, -4
  %282 = icmp eq i64 %281, 0
  br i1 %282, label %283, label %257

283:                                              ; preds = %257, %250
  %284 = phi float [ undef, %250 ], [ %279, %257 ]
  %285 = phi i64 [ 0, %250 ], [ %280, %257 ]
  %286 = phi float [ 0.000000e+00, %250 ], [ %279, %257 ]
  %287 = icmp eq i64 %253, 0
  br i1 %287, label %299, label %288

288:                                              ; preds = %283, %288
  %289 = phi i64 [ %296, %288 ], [ %285, %283 ]
  %290 = phi float [ %295, %288 ], [ %286, %283 ]
  %291 = phi i64 [ %297, %288 ], [ %253, %283 ]
  %292 = getelementptr inbounds float, float* %44, i64 %289
  %293 = load float, float* %292, align 4
  %294 = call float @llvm.fabs.f32(float %293) #5
  %295 = fadd float %290, %294
  %296 = add nuw nsw i64 %289, 1
  %297 = add i64 %291, -1
  %298 = icmp eq i64 %297, 0
  br i1 %298, label %299, label %288, !llvm.loop !125

299:                                              ; preds = %283, %288, %248
  %300 = phi float [ 0.000000e+00, %248 ], [ %284, %283 ], [ %295, %288 ]
  %301 = fmul float %61, %300
  %302 = fadd float %300, %301
  %303 = fcmp olt float %302, %246
  br i1 %303, label %304, label %305

304:                                              ; preds = %299
  br label %305

305:                                              ; preds = %299, %304, %243
  %306 = phi float [ %246, %243 ], [ %302, %304 ], [ %246, %299 ]
  %307 = phi i32 [ 0, %243 ], [ -1, %304 ], [ 0, %299 ]
  %308 = or i1 %53, %185
  %309 = xor i1 %308, true
  %310 = zext i1 %309 to i32
  %311 = add i32 %310, %7
  %312 = icmp sgt i32 %311, 0
  br i1 %312, label %313, label %472

313:                                              ; preds = %305
  %314 = zext i32 %184 to i64
  br i1 %193, label %315, label %439

315:                                              ; preds = %313
  %316 = add nsw i64 %314, -1
  %317 = and i64 %314, 3
  %318 = icmp ult i64 %316, 3
  %319 = sub nsw i64 %314, %317
  %320 = icmp eq i64 %317, 0
  br i1 %53, label %321, label %381

321:                                              ; preds = %315, %344
  %322 = phi i32 [ %353, %344 ], [ %307, %315 ]
  %323 = phi float [ %352, %344 ], [ %306, %315 ]
  %324 = phi i32 [ %346, %344 ], [ 0, %315 ]
  %325 = xor i32 %324, -1
  %326 = add i32 %325, %7
  %327 = ashr i32 %184, %324
  %328 = shl i32 1, %324
  call void @haar1(float* nonnull %34, i32 %327, i32 %328) #5
  br i1 %318, label %329, label %355

329:                                              ; preds = %355, %321
  %330 = phi float [ undef, %321 ], [ %377, %355 ]
  %331 = phi i64 [ 0, %321 ], [ %378, %355 ]
  %332 = phi float [ 0.000000e+00, %321 ], [ %377, %355 ]
  br i1 %320, label %344, label %333

333:                                              ; preds = %329, %333
  %334 = phi i64 [ %341, %333 ], [ %331, %329 ]
  %335 = phi float [ %340, %333 ], [ %332, %329 ]
  %336 = phi i64 [ %342, %333 ], [ %317, %329 ]
  %337 = getelementptr inbounds float, float* %34, i64 %334
  %338 = load float, float* %337, align 4
  %339 = call float @llvm.fabs.f32(float %338) #5
  %340 = fadd float %335, %339
  %341 = add nuw nsw i64 %334, 1
  %342 = add i64 %336, -1
  %343 = icmp eq i64 %342, 0
  br i1 %343, label %344, label %333, !llvm.loop !126

344:                                              ; preds = %333, %329
  %345 = phi float [ %330, %329 ], [ %340, %333 ]
  %346 = add nuw nsw i32 %324, 1
  %347 = sitofp i32 %326 to float
  %348 = fmul float %15, %347
  %349 = fmul float %348, %345
  %350 = fadd float %345, %349
  %351 = fcmp olt float %350, %323
  %352 = select i1 %351, float %350, float %323
  %353 = select i1 %351, i32 %346, i32 %322
  %354 = icmp eq i32 %346, %311
  br i1 %354, label %472, label %321

355:                                              ; preds = %321, %355
  %356 = phi i64 [ %378, %355 ], [ 0, %321 ]
  %357 = phi float [ %377, %355 ], [ 0.000000e+00, %321 ]
  %358 = phi i64 [ %379, %355 ], [ %319, %321 ]
  %359 = getelementptr inbounds float, float* %34, i64 %356
  %360 = load float, float* %359, align 16
  %361 = call float @llvm.fabs.f32(float %360) #5
  %362 = fadd float %357, %361
  %363 = or i64 %356, 1
  %364 = getelementptr inbounds float, float* %34, i64 %363
  %365 = load float, float* %364, align 4
  %366 = call float @llvm.fabs.f32(float %365) #5
  %367 = fadd float %362, %366
  %368 = or i64 %356, 2
  %369 = getelementptr inbounds float, float* %34, i64 %368
  %370 = load float, float* %369, align 8
  %371 = call float @llvm.fabs.f32(float %370) #5
  %372 = fadd float %367, %371
  %373 = or i64 %356, 3
  %374 = getelementptr inbounds float, float* %34, i64 %373
  %375 = load float, float* %374, align 4
  %376 = call float @llvm.fabs.f32(float %375) #5
  %377 = fadd float %372, %376
  %378 = add nuw nsw i64 %356, 4
  %379 = add i64 %358, -4
  %380 = icmp eq i64 %379, 0
  br i1 %380, label %329, label %355

381:                                              ; preds = %315, %428
  %382 = phi i32 [ %437, %428 ], [ %307, %315 ]
  %383 = phi float [ %436, %428 ], [ %306, %315 ]
  %384 = phi i32 [ %430, %428 ], [ 0, %315 ]
  %385 = ashr i32 %184, %384
  %386 = shl i32 1, %384
  call void @haar1(float* nonnull %34, i32 %385, i32 %386) #5
  br i1 %318, label %413, label %387

387:                                              ; preds = %381, %387
  %388 = phi i64 [ %410, %387 ], [ 0, %381 ]
  %389 = phi float [ %409, %387 ], [ 0.000000e+00, %381 ]
  %390 = phi i64 [ %411, %387 ], [ %319, %381 ]
  %391 = getelementptr inbounds float, float* %34, i64 %388
  %392 = load float, float* %391, align 16
  %393 = call float @llvm.fabs.f32(float %392) #5
  %394 = fadd float %389, %393
  %395 = or i64 %388, 1
  %396 = getelementptr inbounds float, float* %34, i64 %395
  %397 = load float, float* %396, align 4
  %398 = call float @llvm.fabs.f32(float %397) #5
  %399 = fadd float %394, %398
  %400 = or i64 %388, 2
  %401 = getelementptr inbounds float, float* %34, i64 %400
  %402 = load float, float* %401, align 8
  %403 = call float @llvm.fabs.f32(float %402) #5
  %404 = fadd float %399, %403
  %405 = or i64 %388, 3
  %406 = getelementptr inbounds float, float* %34, i64 %405
  %407 = load float, float* %406, align 4
  %408 = call float @llvm.fabs.f32(float %407) #5
  %409 = fadd float %404, %408
  %410 = add nuw nsw i64 %388, 4
  %411 = add i64 %390, -4
  %412 = icmp eq i64 %411, 0
  br i1 %412, label %413, label %387

413:                                              ; preds = %387, %381
  %414 = phi float [ undef, %381 ], [ %409, %387 ]
  %415 = phi i64 [ 0, %381 ], [ %410, %387 ]
  %416 = phi float [ 0.000000e+00, %381 ], [ %409, %387 ]
  br i1 %320, label %428, label %417

417:                                              ; preds = %413, %417
  %418 = phi i64 [ %425, %417 ], [ %415, %413 ]
  %419 = phi float [ %424, %417 ], [ %416, %413 ]
  %420 = phi i64 [ %426, %417 ], [ %317, %413 ]
  %421 = getelementptr inbounds float, float* %34, i64 %418
  %422 = load float, float* %421, align 4
  %423 = call float @llvm.fabs.f32(float %422) #5
  %424 = fadd float %419, %423
  %425 = add nuw nsw i64 %418, 1
  %426 = add i64 %420, -1
  %427 = icmp eq i64 %426, 0
  br i1 %427, label %428, label %417, !llvm.loop !127

428:                                              ; preds = %417, %413
  %429 = phi float [ %414, %413 ], [ %424, %417 ]
  %430 = add nuw nsw i32 %384, 1
  %431 = sitofp i32 %430 to float
  %432 = fmul float %15, %431
  %433 = fmul float %432, %429
  %434 = fadd float %429, %433
  %435 = fcmp olt float %434, %383
  %436 = select i1 %435, float %434, float %383
  %437 = select i1 %435, i32 %430, i32 %382
  %438 = icmp eq i32 %430, %311
  br i1 %438, label %472, label %381

439:                                              ; preds = %313
  br i1 %53, label %440, label %457

440:                                              ; preds = %439, %440
  %441 = phi i32 [ %455, %440 ], [ %307, %439 ]
  %442 = phi float [ %454, %440 ], [ %306, %439 ]
  %443 = phi i32 [ %446, %440 ], [ 0, %439 ]
  %444 = xor i32 %443, -1
  %445 = add i32 %444, %7
  %446 = add nuw nsw i32 %443, 1
  %447 = ashr i32 %184, %443
  %448 = shl i32 1, %443
  call void @haar1(float* nonnull %34, i32 %447, i32 %448) #5
  %449 = sitofp i32 %445 to float
  %450 = fmul float %15, %449
  %451 = fmul float %450, 0.000000e+00
  %452 = fadd float %451, 0.000000e+00
  %453 = fcmp olt float %452, %442
  %454 = select i1 %453, float %452, float %442
  %455 = select i1 %453, i32 %446, i32 %441
  %456 = icmp eq i32 %446, %311
  br i1 %456, label %472, label %440

457:                                              ; preds = %439, %457
  %458 = phi i32 [ %470, %457 ], [ %307, %439 ]
  %459 = phi float [ %469, %457 ], [ %306, %439 ]
  %460 = phi i32 [ %461, %457 ], [ 0, %439 ]
  %461 = add nuw nsw i32 %460, 1
  %462 = ashr i32 %184, %460
  %463 = shl i32 1, %460
  call void @haar1(float* nonnull %34, i32 %462, i32 %463) #5
  %464 = sitofp i32 %461 to float
  %465 = fmul float %15, %464
  %466 = fmul float %465, 0.000000e+00
  %467 = fadd float %466, 0.000000e+00
  %468 = fcmp olt float %467, %459
  %469 = select i1 %468, float %467, float %459
  %470 = select i1 %468, i32 %461, i32 %458
  %471 = icmp eq i32 %461, %311
  br i1 %471, label %472, label %457

472:                                              ; preds = %457, %440, %428, %344, %305
  %473 = phi i32 [ %307, %305 ], [ %353, %344 ], [ %437, %428 ], [ %455, %440 ], [ %470, %457 ]
  %474 = mul nsw i32 %473, -2
  %475 = shl nsw i32 %473, 1
  %476 = select i1 %53, i32 %475, i32 %474
  %477 = getelementptr inbounds i32, i32* %18, i64 %175
  store i32 %476, i32* %477, align 4
  br i1 %185, label %478, label %484

478:                                              ; preds = %472
  %479 = icmp eq i32 %476, 0
  %480 = icmp eq i32 %476, %62
  %481 = or i1 %479, %480
  br i1 %481, label %482, label %484

482:                                              ; preds = %478
  %483 = add nsw i32 %476, -1
  store i32 %483, i32* %477, align 4
  br label %484

484:                                              ; preds = %478, %482, %472
  %485 = icmp eq i64 %176, %63
  br i1 %485, label %64, label %486

486:                                              ; preds = %484
  %487 = load i16*, i16** %20, align 8
  br label %173

488:                                              ; preds = %93, %607
  %489 = phi i32 [ %95, %93 ], [ %151, %607 ]
  %490 = phi i32 [ %118, %93 ], [ %609, %607 ]
  %491 = icmp slt i32 %490, %489
  %492 = icmp ne i32 %2, 0
  %493 = and i1 %492, %491
  %494 = zext i1 %493 to i32
  %495 = shl nuw nsw i32 %494, 1
  %496 = or i32 %495, %68
  %497 = sext i32 %496 to i64
  %498 = getelementptr inbounds [4 x [8 x i8]], [4 x [8 x i8]]* @tf_select_table, i64 0, i64 %67, i64 %497
  %499 = load i8, i8* %498, align 2
  %500 = sext i8 %499 to i32
  %501 = shl nsw i32 %500, 1
  %502 = sub nsw i32 %66, %501
  %503 = icmp slt i32 %502, 0
  %504 = sub nsw i32 0, %502
  %505 = select i1 %503, i32 %504, i32 %502
  %506 = mul nsw i32 %505, %65
  %507 = or i32 %496, 1
  %508 = sext i32 %507 to i64
  %509 = getelementptr inbounds [4 x [8 x i8]], [4 x [8 x i8]]* @tf_select_table, i64 0, i64 %67, i64 %508
  %510 = load i8, i8* %509, align 1
  %511 = sext i8 %510 to i32
  %512 = shl nsw i32 %511, 1
  %513 = sub nsw i32 %66, %512
  %514 = icmp slt i32 %513, 0
  %515 = sub nsw i32 0, %513
  %516 = select i1 %514, i32 %515, i32 %513
  %517 = mul nsw i32 %516, %65
  %518 = select i1 %492, i32 0, i32 %4
  %519 = add nsw i32 %517, %518
  br i1 %71, label %520, label %556

520:                                              ; preds = %488
  %521 = zext i32 %1 to i64
  br label %522

522:                                              ; preds = %522, %520
  %523 = phi i64 [ 1, %520 ], [ %554, %522 ]
  %524 = phi i32 [ %519, %520 ], [ %553, %522 ]
  %525 = phi i32 [ %506, %520 ], [ %547, %522 ]
  %526 = add nsw i32 %524, %4
  %527 = icmp slt i32 %525, %526
  %528 = getelementptr inbounds i32, i32* %46, i64 %523
  %529 = xor i1 %527, true
  %530 = zext i1 %529 to i32
  %531 = select i1 %527, i32 %525, i32 %526
  store i32 %530, i32* %528, align 4
  %532 = add nsw i32 %525, %4
  %533 = icmp slt i32 %532, %524
  %534 = getelementptr inbounds i32, i32* %48, i64 %523
  %535 = xor i1 %533, true
  %536 = zext i1 %535 to i32
  %537 = select i1 %533, i32 %532, i32 %524
  store i32 %536, i32* %534, align 4
  %538 = getelementptr inbounds i32, i32* %10, i64 %523
  %539 = load i32, i32* %538, align 4
  %540 = getelementptr inbounds i32, i32* %18, i64 %523
  %541 = load i32, i32* %540, align 4
  %542 = sub nsw i32 %541, %501
  %543 = icmp slt i32 %542, 0
  %544 = sub nsw i32 0, %542
  %545 = select i1 %543, i32 %544, i32 %542
  %546 = mul nsw i32 %545, %539
  %547 = add nsw i32 %546, %531
  %548 = sub nsw i32 %541, %512
  %549 = icmp slt i32 %548, 0
  %550 = sub nsw i32 0, %548
  %551 = select i1 %549, i32 %550, i32 %548
  %552 = mul nsw i32 %551, %539
  %553 = add nsw i32 %552, %537
  %554 = add nuw nsw i64 %523, 1
  %555 = icmp eq i64 %554, %521
  br i1 %555, label %556, label %522

556:                                              ; preds = %522, %488
  %557 = phi i32 [ %506, %488 ], [ %547, %522 ]
  %558 = phi i32 [ %519, %488 ], [ %553, %522 ]
  %559 = icmp sge i32 %557, %558
  %560 = zext i1 %559 to i32
  %561 = getelementptr inbounds i32, i32* %3, i64 %26
  store i32 %560, i32* %561, align 4
  %562 = add i32 %1, -2
  %563 = icmp sgt i32 %562, -1
  br i1 %563, label %564, label %578

564:                                              ; preds = %556
  %565 = sext i32 %562 to i64
  br label %566

566:                                              ; preds = %564, %566
  %567 = phi i64 [ %565, %564 ], [ %576, %566 ]
  %568 = add nuw nsw i64 %567, 1
  %569 = getelementptr inbounds i32, i32* %3, i64 %568
  %570 = load i32, i32* %569, align 4
  %571 = icmp eq i32 %570, 1
  %572 = select i1 %571, i32* %48, i32* %46
  %573 = getelementptr inbounds i32, i32* %572, i64 %568
  %574 = load i32, i32* %573, align 4
  %575 = getelementptr inbounds i32, i32* %3, i64 %567
  store i32 %574, i32* %575, align 4
  %576 = add nsw i64 %567, -1
  %577 = icmp sgt i64 %567, 0
  br i1 %577, label %566, label %578

578:                                              ; preds = %566, %556
  ret i32 %494

579:                                              ; preds = %579, %149
  %580 = phi i64 [ 1, %149 ], [ %605, %579 ]
  %581 = phi i32 [ %172, %149 ], [ %604, %579 ]
  %582 = phi i32 [ %161, %149 ], [ %598, %579 ]
  %583 = add nsw i32 %581, %4
  %584 = icmp slt i32 %582, %583
  %585 = select i1 %584, i32 %582, i32 %583
  %586 = add nsw i32 %582, %4
  %587 = icmp slt i32 %586, %581
  %588 = select i1 %587, i32 %586, i32 %581
  %589 = getelementptr inbounds i32, i32* %10, i64 %580
  %590 = load i32, i32* %589, align 4
  %591 = getelementptr inbounds i32, i32* %18, i64 %580
  %592 = load i32, i32* %591, align 4
  %593 = sub nsw i32 %592, %156
  %594 = icmp slt i32 %593, 0
  %595 = sub nsw i32 0, %593
  %596 = select i1 %594, i32 %595, i32 %593
  %597 = mul nsw i32 %596, %590
  %598 = add nsw i32 %597, %585
  %599 = sub nsw i32 %592, %166
  %600 = icmp slt i32 %599, 0
  %601 = sub nsw i32 0, %599
  %602 = select i1 %600, i32 %601, i32 %599
  %603 = mul nsw i32 %602, %590
  %604 = add nsw i32 %603, %588
  %605 = add nuw nsw i64 %580, 1
  %606 = icmp eq i64 %605, %120
  br i1 %606, label %607, label %579

607:                                              ; preds = %579
  %608 = icmp slt i32 %598, %604
  %609 = select i1 %608, i32 %598, i32 %604
  br label %488
}

declare void @quant_coarse_energy(%struct.OpusCustomMode*, i32, i32, i32, float*, float*, i32, float*, %struct.ec_ctx*, i32, i32, i32, i32, float*, i32, i32, i32) local_unnamed_addr #2

declare i32 @spreading_decision(%struct.OpusCustomMode*, float*, i32*, i32, i32*, i32*, i32, i32, i32, i32, i32*) local_unnamed_addr #2

declare void @init_caps(%struct.OpusCustomMode*, i32*, i32, i32) local_unnamed_addr #2

declare i32 @hysteresis_decision(float, float*, float*, i32, i32) local_unnamed_addr #2

declare i32 @clt_compute_allocation(%struct.OpusCustomMode*, i32, i32, i32*, i32*, i32, i32*, i32*, i32, i32*, i32*, i32*, i32*, i32, i32, %struct.ec_ctx*, i32, i32, i32) local_unnamed_addr #2

declare void @quant_fine_energy(%struct.OpusCustomMode*, i32, i32, float*, float*, i32*, %struct.ec_ctx*, i32) local_unnamed_addr #2

declare void @quant_all_bands(i32, %struct.OpusCustomMode*, i32, i32, float*, float*, i8*, float*, i32*, i32, i32, i32, i32, i32*, i32, i32, %struct.ec_ctx*, i32, i32, i32*, i32, i32, i32) local_unnamed_addr #2

declare void @quant_energy_finalise(%struct.OpusCustomMode*, i32, i32, float*, float*, i32*, i32*, i32, %struct.ec_ctx*, i32) local_unnamed_addr #2

declare void @ec_enc_done(%struct.ec_ctx*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opus_custom_encoder_ctl(%struct.OpusCustomEncoder* noalias, i32, ...) local_unnamed_addr #0 {
  %3 = alloca [1 x %struct.__va_list_tag], align 16
  %4 = bitcast [1 x %struct.__va_list_tag]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #5
  %5 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %3, i64 0, i64 0, i32 0
  %6 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %3, i64 0, i64 0, i32 2
  %7 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %3, i64 0, i64 0, i32 3
  %8 = bitcast [1 x %struct.__va_list_tag]* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -86, i64 24, i1 false)
  call void @llvm.va_start(i8* nonnull %4)
  switch i32 %1, label %443 [
    i32 4010, label %9
    i32 10010, label %27
    i32 10012, label %51
    i32 10002, label %75
    i32 4014, label %98
    i32 4020, label %116
    i32 4006, label %132
    i32 4002, label %148
    i32 10008, label %173
    i32 4036, label %192
    i32 4037, label %211
    i32 4046, label %228
    i32 4047, label %246
    i32 4028, label %265
    i32 10016, label %314
    i32 10022, label %330
    i32 10028, label %350
    i32 10015, label %371
    i32 4031, label %391
    i32 10024, label %410
    i32 10026, label %426
  ]

9:                                                ; preds = %2
  %10 = load i32, i32* %5, align 16
  %11 = icmp ult i32 %10, 41
  br i1 %11, label %12, label %17

12:                                               ; preds = %9
  %13 = load i8*, i8** %7, align 16
  %14 = sext i32 %10 to i64
  %15 = getelementptr i8, i8* %13, i64 %14
  %16 = add nuw nsw i32 %10, 8
  store i32 %16, i32* %5, align 16
  br label %20

17:                                               ; preds = %9
  %18 = load i8*, i8** %6, align 8
  %19 = getelementptr i8, i8* %18, i64 8
  store i8* %19, i8** %6, align 8
  br label %20

20:                                               ; preds = %17, %12
  %21 = phi i8* [ %15, %12 ], [ %18, %17 ]
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = icmp ugt i32 %23, 10
  br i1 %24, label %443, label %25

25:                                               ; preds = %20
  %26 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 6
  store i32 %23, i32* %26, align 4
  br label %443

27:                                               ; preds = %2
  %28 = load i32, i32* %5, align 16
  %29 = icmp ult i32 %28, 41
  br i1 %29, label %30, label %35

30:                                               ; preds = %27
  %31 = load i8*, i8** %7, align 16
  %32 = sext i32 %28 to i64
  %33 = getelementptr i8, i8* %31, i64 %32
  %34 = add nuw nsw i32 %28, 8
  store i32 %34, i32* %5, align 16
  br label %38

35:                                               ; preds = %27
  %36 = load i8*, i8** %6, align 8
  %37 = getelementptr i8, i8* %36, i64 8
  store i8* %37, i8** %6, align 8
  br label %38

38:                                               ; preds = %35, %30
  %39 = phi i8* [ %33, %30 ], [ %36, %35 ]
  %40 = bitcast i8* %39 to i32*
  %41 = load i32, i32* %40, align 4
  %42 = icmp slt i32 %41, 0
  br i1 %42, label %443, label %43

43:                                               ; preds = %38
  %44 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 0
  %45 = load %struct.OpusCustomMode*, %struct.OpusCustomMode** %44, align 8
  %46 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %45, i64 0, i32 2
  %47 = load i32, i32* %46, align 8
  %48 = icmp slt i32 %41, %47
  br i1 %48, label %49, label %443

49:                                               ; preds = %43
  %50 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 8
  store i32 %41, i32* %50, align 4
  br label %443

51:                                               ; preds = %2
  %52 = load i32, i32* %5, align 16
  %53 = icmp ult i32 %52, 41
  br i1 %53, label %54, label %59

54:                                               ; preds = %51
  %55 = load i8*, i8** %7, align 16
  %56 = sext i32 %52 to i64
  %57 = getelementptr i8, i8* %55, i64 %56
  %58 = add nuw nsw i32 %52, 8
  store i32 %58, i32* %5, align 16
  br label %62

59:                                               ; preds = %51
  %60 = load i8*, i8** %6, align 8
  %61 = getelementptr i8, i8* %60, i64 8
  store i8* %61, i8** %6, align 8
  br label %62

62:                                               ; preds = %59, %54
  %63 = phi i8* [ %57, %54 ], [ %60, %59 ]
  %64 = bitcast i8* %63 to i32*
  %65 = load i32, i32* %64, align 4
  %66 = icmp slt i32 %65, 1
  br i1 %66, label %443, label %67

67:                                               ; preds = %62
  %68 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 0
  %69 = load %struct.OpusCustomMode*, %struct.OpusCustomMode** %68, align 8
  %70 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %69, i64 0, i32 2
  %71 = load i32, i32* %70, align 8
  %72 = icmp sgt i32 %65, %71
  br i1 %72, label %443, label %73

73:                                               ; preds = %67
  %74 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 9
  store i32 %65, i32* %74, align 8
  br label %443

75:                                               ; preds = %2
  %76 = load i32, i32* %5, align 16
  %77 = icmp ult i32 %76, 41
  br i1 %77, label %78, label %83

78:                                               ; preds = %75
  %79 = load i8*, i8** %7, align 16
  %80 = sext i32 %76 to i64
  %81 = getelementptr i8, i8* %79, i64 %80
  %82 = add nuw nsw i32 %76, 8
  store i32 %82, i32* %5, align 16
  br label %86

83:                                               ; preds = %75
  %84 = load i8*, i8** %6, align 8
  %85 = getelementptr i8, i8* %84, i64 8
  store i8* %85, i8** %6, align 8
  br label %86

86:                                               ; preds = %83, %78
  %87 = phi i8* [ %81, %78 ], [ %84, %83 ]
  %88 = bitcast i8* %87 to i32*
  %89 = load i32, i32* %88, align 4
  %90 = icmp ugt i32 %89, 2
  br i1 %90, label %443, label %91

91:                                               ; preds = %86
  %92 = icmp ne i32 %89, 2
  %93 = zext i1 %92 to i32
  %94 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 5
  store i32 %93, i32* %94, align 8
  %95 = icmp eq i32 %89, 0
  %96 = zext i1 %95 to i32
  %97 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 3
  store i32 %96, i32* %97, align 8
  br label %443

98:                                               ; preds = %2
  %99 = load i32, i32* %5, align 16
  %100 = icmp ult i32 %99, 41
  br i1 %100, label %101, label %106

101:                                              ; preds = %98
  %102 = load i8*, i8** %7, align 16
  %103 = sext i32 %99 to i64
  %104 = getelementptr i8, i8* %102, i64 %103
  %105 = add nuw nsw i32 %99, 8
  store i32 %105, i32* %5, align 16
  br label %109

106:                                              ; preds = %98
  %107 = load i8*, i8** %6, align 8
  %108 = getelementptr i8, i8* %107, i64 8
  store i8* %108, i8** %6, align 8
  br label %109

109:                                              ; preds = %106, %101
  %110 = phi i8* [ %104, %101 ], [ %107, %106 ]
  %111 = bitcast i8* %110 to i32*
  %112 = load i32, i32* %111, align 4
  %113 = icmp ugt i32 %112, 100
  br i1 %113, label %443, label %114

114:                                              ; preds = %109
  %115 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 14
  store i32 %112, i32* %115, align 4
  br label %443

116:                                              ; preds = %2
  %117 = load i32, i32* %5, align 16
  %118 = icmp ult i32 %117, 41
  br i1 %118, label %119, label %124

119:                                              ; preds = %116
  %120 = load i8*, i8** %7, align 16
  %121 = sext i32 %117 to i64
  %122 = getelementptr i8, i8* %120, i64 %121
  %123 = add nuw nsw i32 %117, 8
  store i32 %123, i32* %5, align 16
  br label %127

124:                                              ; preds = %116
  %125 = load i8*, i8** %6, align 8
  %126 = getelementptr i8, i8* %125, i64 8
  store i8* %126, i8** %6, align 8
  br label %127

127:                                              ; preds = %124, %119
  %128 = phi i8* [ %122, %119 ], [ %125, %124 ]
  %129 = bitcast i8* %128 to i32*
  %130 = load i32, i32* %129, align 4
  %131 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 13
  store i32 %130, i32* %131, align 8
  br label %443

132:                                              ; preds = %2
  %133 = load i32, i32* %5, align 16
  %134 = icmp ult i32 %133, 41
  br i1 %134, label %135, label %140

135:                                              ; preds = %132
  %136 = load i8*, i8** %7, align 16
  %137 = sext i32 %133 to i64
  %138 = getelementptr i8, i8* %136, i64 %137
  %139 = add nuw nsw i32 %133, 8
  store i32 %139, i32* %5, align 16
  br label %143

140:                                              ; preds = %132
  %141 = load i8*, i8** %6, align 8
  %142 = getelementptr i8, i8* %141, i64 8
  store i8* %142, i8** %6, align 8
  br label %143

143:                                              ; preds = %140, %135
  %144 = phi i8* [ %138, %135 ], [ %141, %140 ]
  %145 = bitcast i8* %144 to i32*
  %146 = load i32, i32* %145, align 4
  %147 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 11
  store i32 %146, i32* %147, align 8
  br label %443

148:                                              ; preds = %2
  %149 = load i32, i32* %5, align 16
  %150 = icmp ult i32 %149, 41
  br i1 %150, label %151, label %156

151:                                              ; preds = %148
  %152 = load i8*, i8** %7, align 16
  %153 = sext i32 %149 to i64
  %154 = getelementptr i8, i8* %152, i64 %153
  %155 = add nuw nsw i32 %149, 8
  store i32 %155, i32* %5, align 16
  br label %159

156:                                              ; preds = %148
  %157 = load i8*, i8** %6, align 8
  %158 = getelementptr i8, i8* %157, i64 8
  store i8* %158, i8** %6, align 8
  br label %159

159:                                              ; preds = %156, %151
  %160 = phi i8* [ %154, %151 ], [ %157, %156 ]
  %161 = bitcast i8* %160 to i32*
  %162 = load i32, i32* %161, align 4
  %163 = icmp slt i32 %162, 501
  %164 = icmp ne i32 %162, -1
  %165 = and i1 %163, %164
  br i1 %165, label %443, label %166

166:                                              ; preds = %159
  %167 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 1
  %168 = load i32, i32* %167, align 8
  %169 = mul nsw i32 %168, 260000
  %170 = icmp slt i32 %162, %169
  %171 = select i1 %170, i32 %162, i32 %169
  %172 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 10
  store i32 %171, i32* %172, align 4
  br label %443

173:                                              ; preds = %2
  %174 = load i32, i32* %5, align 16
  %175 = icmp ult i32 %174, 41
  br i1 %175, label %176, label %181

176:                                              ; preds = %173
  %177 = load i8*, i8** %7, align 16
  %178 = sext i32 %174 to i64
  %179 = getelementptr i8, i8* %177, i64 %178
  %180 = add nuw nsw i32 %174, 8
  store i32 %180, i32* %5, align 16
  br label %184

181:                                              ; preds = %173
  %182 = load i8*, i8** %6, align 8
  %183 = getelementptr i8, i8* %182, i64 8
  store i8* %183, i8** %6, align 8
  br label %184

184:                                              ; preds = %181, %176
  %185 = phi i8* [ %179, %176 ], [ %182, %181 ]
  %186 = bitcast i8* %185 to i32*
  %187 = load i32, i32* %186, align 4
  %188 = add i32 %187, -1
  %189 = icmp ugt i32 %188, 1
  br i1 %189, label %443, label %190

190:                                              ; preds = %184
  %191 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 2
  store i32 %187, i32* %191, align 4
  br label %443

192:                                              ; preds = %2
  %193 = load i32, i32* %5, align 16
  %194 = icmp ult i32 %193, 41
  br i1 %194, label %195, label %200

195:                                              ; preds = %192
  %196 = load i8*, i8** %7, align 16
  %197 = sext i32 %193 to i64
  %198 = getelementptr i8, i8* %196, i64 %197
  %199 = add nuw nsw i32 %193, 8
  store i32 %199, i32* %5, align 16
  br label %203

200:                                              ; preds = %192
  %201 = load i8*, i8** %6, align 8
  %202 = getelementptr i8, i8* %201, i64 8
  store i8* %202, i8** %6, align 8
  br label %203

203:                                              ; preds = %200, %195
  %204 = phi i8* [ %198, %195 ], [ %201, %200 ]
  %205 = bitcast i8* %204 to i32*
  %206 = load i32, i32* %205, align 4
  %207 = add i32 %206, -8
  %208 = icmp ugt i32 %207, 16
  br i1 %208, label %443, label %209

209:                                              ; preds = %203
  %210 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 15
  store i32 %206, i32* %210, align 8
  br label %443

211:                                              ; preds = %2
  %212 = load i32, i32* %5, align 16
  %213 = icmp ult i32 %212, 41
  br i1 %213, label %214, label %219

214:                                              ; preds = %211
  %215 = load i8*, i8** %7, align 16
  %216 = sext i32 %212 to i64
  %217 = getelementptr i8, i8* %215, i64 %216
  %218 = add nuw nsw i32 %212, 8
  store i32 %218, i32* %5, align 16
  br label %222

219:                                              ; preds = %211
  %220 = load i8*, i8** %6, align 8
  %221 = getelementptr i8, i8* %220, i64 8
  store i8* %221, i8** %6, align 8
  br label %222

222:                                              ; preds = %219, %214
  %223 = phi i8* [ %217, %214 ], [ %220, %219 ]
  %224 = bitcast i8* %223 to i32**
  %225 = load i32*, i32** %224, align 8
  %226 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 15
  %227 = load i32, i32* %226, align 8
  store i32 %227, i32* %225, align 4
  br label %443

228:                                              ; preds = %2
  %229 = load i32, i32* %5, align 16
  %230 = icmp ult i32 %229, 41
  br i1 %230, label %231, label %236

231:                                              ; preds = %228
  %232 = load i8*, i8** %7, align 16
  %233 = sext i32 %229 to i64
  %234 = getelementptr i8, i8* %232, i64 %233
  %235 = add nuw nsw i32 %229, 8
  store i32 %235, i32* %5, align 16
  br label %239

236:                                              ; preds = %228
  %237 = load i8*, i8** %6, align 8
  %238 = getelementptr i8, i8* %237, i64 8
  store i8* %238, i8** %6, align 8
  br label %239

239:                                              ; preds = %236, %231
  %240 = phi i8* [ %234, %231 ], [ %237, %236 ]
  %241 = bitcast i8* %240 to i32*
  %242 = load i32, i32* %241, align 4
  %243 = icmp ugt i32 %242, 1
  br i1 %243, label %443, label %244

244:                                              ; preds = %239
  %245 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 17
  store i32 %242, i32* %245, align 8
  br label %443

246:                                              ; preds = %2
  %247 = load i32, i32* %5, align 16
  %248 = icmp ult i32 %247, 41
  br i1 %248, label %249, label %254

249:                                              ; preds = %246
  %250 = load i8*, i8** %7, align 16
  %251 = sext i32 %247 to i64
  %252 = getelementptr i8, i8* %250, i64 %251
  %253 = add nuw nsw i32 %247, 8
  store i32 %253, i32* %5, align 16
  br label %257

254:                                              ; preds = %246
  %255 = load i8*, i8** %6, align 8
  %256 = getelementptr i8, i8* %255, i64 8
  store i8* %256, i8** %6, align 8
  br label %257

257:                                              ; preds = %254, %249
  %258 = phi i8* [ %252, %249 ], [ %255, %254 ]
  %259 = bitcast i8* %258 to i32**
  %260 = load i32*, i32** %259, align 8
  %261 = icmp eq i32* %260, null
  br i1 %261, label %443, label %262

262:                                              ; preds = %257
  %263 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 17
  %264 = load i32, i32* %263, align 8
  store i32 %264, i32* %260, align 4
  br label %443

265:                                              ; preds = %2
  %266 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 1
  %267 = load i32, i32* %266, align 8
  %268 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 0
  %269 = load %struct.OpusCustomMode*, %struct.OpusCustomMode** %268, align 8
  %270 = getelementptr %struct.OpusCustomMode, %struct.OpusCustomMode* %269, i64 0, i32 1
  %271 = load i32, i32* %270, align 4
  %272 = add nsw i32 %271, 1024
  %273 = mul nsw i32 %272, %267
  %274 = sext i32 %273 to i64
  %275 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 43, i64 %274
  %276 = getelementptr %struct.OpusCustomMode, %struct.OpusCustomMode* %269, i64 0, i32 2
  %277 = load i32, i32* %276, align 8
  %278 = mul nsw i32 %277, %267
  %279 = sext i32 %278 to i64
  %280 = getelementptr inbounds float, float* %275, i64 %279
  %281 = getelementptr inbounds float, float* %280, i64 %279
  %282 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 19
  %283 = bitcast i32* %282 to i8*
  %284 = shl i32 %271, 2
  %285 = shl i32 %277, 4
  %286 = add i32 %284, 4096
  %287 = add i32 %286, %285
  %288 = mul i32 %287, %267
  %289 = add i32 %288, 252
  %290 = sext i32 %289 to i64
  %291 = add nsw i64 %290, -80
  call void @llvm.memset.p0i8.i64(i8* align 8 %283, i8 0, i64 %291, i1 false)
  %292 = load i32, i32* %276, align 8
  %293 = mul nsw i32 %292, %267
  %294 = icmp sgt i32 %293, 0
  br i1 %294, label %295, label %307

295:                                              ; preds = %265, %295
  %296 = phi i64 [ %299, %295 ], [ 0, %265 ]
  %297 = getelementptr inbounds float, float* %281, i64 %296
  store float -2.800000e+01, float* %297, align 4
  %298 = getelementptr inbounds float, float* %280, i64 %296
  store float -2.800000e+01, float* %298, align 4
  %299 = add nuw nsw i64 %296, 1
  %300 = load i32, i32* %266, align 8
  %301 = load %struct.OpusCustomMode*, %struct.OpusCustomMode** %268, align 8
  %302 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %301, i64 0, i32 2
  %303 = load i32, i32* %302, align 8
  %304 = mul nsw i32 %303, %300
  %305 = sext i32 %304 to i64
  %306 = icmp slt i64 %299, %305
  br i1 %306, label %295, label %307

307:                                              ; preds = %295, %265
  %308 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 36
  store i32 0, i32* %308, align 4
  %309 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 21
  store float 1.000000e+00, float* %309, align 8
  %310 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 20
  store i32 2, i32* %310, align 4
  %311 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 22
  store i32 256, i32* %311, align 4
  %312 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 24
  store i32 0, i32* %312, align 4
  %313 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 25
  store i32 0, i32* %313, align 8
  br label %443

314:                                              ; preds = %2
  %315 = load i32, i32* %5, align 16
  %316 = icmp ult i32 %315, 41
  br i1 %316, label %317, label %322

317:                                              ; preds = %314
  %318 = load i8*, i8** %7, align 16
  %319 = sext i32 %315 to i64
  %320 = getelementptr i8, i8* %318, i64 %319
  %321 = add nuw nsw i32 %315, 8
  store i32 %321, i32* %5, align 16
  br label %325

322:                                              ; preds = %314
  %323 = load i8*, i8** %6, align 8
  %324 = getelementptr i8, i8* %323, i64 8
  store i8* %324, i8** %6, align 8
  br label %325

325:                                              ; preds = %322, %317
  %326 = phi i8* [ %320, %317 ], [ %323, %322 ]
  %327 = bitcast i8* %326 to i32*
  %328 = load i32, i32* %327, align 4
  %329 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 12
  store i32 %328, i32* %329, align 4
  br label %443

330:                                              ; preds = %2
  %331 = load i32, i32* %5, align 16
  %332 = icmp ult i32 %331, 41
  br i1 %332, label %333, label %338

333:                                              ; preds = %330
  %334 = load i8*, i8** %7, align 16
  %335 = sext i32 %331 to i64
  %336 = getelementptr i8, i8* %334, i64 %335
  %337 = add nuw nsw i32 %331, 8
  store i32 %337, i32* %5, align 16
  br label %341

338:                                              ; preds = %330
  %339 = load i8*, i8** %6, align 8
  %340 = getelementptr i8, i8* %339, i64 8
  store i8* %340, i8** %6, align 8
  br label %341

341:                                              ; preds = %338, %333
  %342 = phi i8* [ %336, %333 ], [ %339, %338 ]
  %343 = bitcast i8* %342 to %struct.AnalysisInfo**
  %344 = load %struct.AnalysisInfo*, %struct.AnalysisInfo** %343, align 8
  %345 = icmp eq %struct.AnalysisInfo* %344, null
  br i1 %345, label %443, label %346

346:                                              ; preds = %341
  %347 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 30
  %348 = bitcast %struct.AnalysisInfo* %347 to i8*
  %349 = bitcast %struct.AnalysisInfo* %344 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %348, i8* nonnull align 4 %349, i64 64, i1 false)
  br label %443

350:                                              ; preds = %2
  %351 = load i32, i32* %5, align 16
  %352 = icmp ult i32 %351, 41
  br i1 %352, label %353, label %358

353:                                              ; preds = %350
  %354 = load i8*, i8** %7, align 16
  %355 = sext i32 %351 to i64
  %356 = getelementptr i8, i8* %354, i64 %355
  %357 = add nuw nsw i32 %351, 8
  store i32 %357, i32* %5, align 16
  br label %361

358:                                              ; preds = %350
  %359 = load i8*, i8** %6, align 8
  %360 = getelementptr i8, i8* %359, i64 8
  store i8* %360, i8** %6, align 8
  br label %361

361:                                              ; preds = %358, %353
  %362 = phi i8* [ %356, %353 ], [ %359, %358 ]
  %363 = bitcast i8* %362 to %struct.SILKInfo**
  %364 = load %struct.SILKInfo*, %struct.SILKInfo** %363, align 8
  %365 = icmp eq %struct.SILKInfo* %364, null
  br i1 %365, label %443, label %366

366:                                              ; preds = %361
  %367 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 31
  %368 = bitcast %struct.SILKInfo* %364 to i64*
  %369 = bitcast %struct.SILKInfo* %367 to i64*
  %370 = load i64, i64* %368, align 4
  store i64 %370, i64* %369, align 4
  br label %443

371:                                              ; preds = %2
  %372 = load i32, i32* %5, align 16
  %373 = icmp ult i32 %372, 41
  br i1 %373, label %374, label %379

374:                                              ; preds = %371
  %375 = load i8*, i8** %7, align 16
  %376 = sext i32 %372 to i64
  %377 = getelementptr i8, i8* %375, i64 %376
  %378 = add nuw nsw i32 %372, 8
  store i32 %378, i32* %5, align 16
  br label %382

379:                                              ; preds = %371
  %380 = load i8*, i8** %6, align 8
  %381 = getelementptr i8, i8* %380, i64 8
  store i8* %381, i8** %6, align 8
  br label %382

382:                                              ; preds = %379, %374
  %383 = phi i8* [ %377, %374 ], [ %380, %379 ]
  %384 = bitcast i8* %383 to %struct.OpusCustomMode***
  %385 = load %struct.OpusCustomMode**, %struct.OpusCustomMode*** %384, align 8
  %386 = icmp eq %struct.OpusCustomMode** %385, null
  br i1 %386, label %443, label %387

387:                                              ; preds = %382
  %388 = bitcast %struct.OpusCustomEncoder* %0 to i64*
  %389 = load i64, i64* %388, align 8
  %390 = bitcast %struct.OpusCustomMode** %385 to i64*
  store i64 %389, i64* %390, align 8
  br label %443

391:                                              ; preds = %2
  %392 = load i32, i32* %5, align 16
  %393 = icmp ult i32 %392, 41
  br i1 %393, label %394, label %399

394:                                              ; preds = %391
  %395 = load i8*, i8** %7, align 16
  %396 = sext i32 %392 to i64
  %397 = getelementptr i8, i8* %395, i64 %396
  %398 = add nuw nsw i32 %392, 8
  store i32 %398, i32* %5, align 16
  br label %402

399:                                              ; preds = %391
  %400 = load i8*, i8** %6, align 8
  %401 = getelementptr i8, i8* %400, i64 8
  store i8* %401, i8** %6, align 8
  br label %402

402:                                              ; preds = %399, %394
  %403 = phi i8* [ %397, %394 ], [ %400, %399 ]
  %404 = bitcast i8* %403 to i32**
  %405 = load i32*, i32** %404, align 8
  %406 = icmp eq i32* %405, null
  br i1 %406, label %443, label %407

407:                                              ; preds = %402
  %408 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 19
  %409 = load i32, i32* %408, align 8
  store i32 %409, i32* %405, align 4
  br label %443

410:                                              ; preds = %2
  %411 = load i32, i32* %5, align 16
  %412 = icmp ult i32 %411, 41
  br i1 %412, label %413, label %418

413:                                              ; preds = %410
  %414 = load i8*, i8** %7, align 16
  %415 = sext i32 %411 to i64
  %416 = getelementptr i8, i8* %414, i64 %415
  %417 = add nuw nsw i32 %411, 8
  store i32 %417, i32* %5, align 16
  br label %421

418:                                              ; preds = %410
  %419 = load i8*, i8** %6, align 8
  %420 = getelementptr i8, i8* %419, i64 8
  store i8* %420, i8** %6, align 8
  br label %421

421:                                              ; preds = %418, %413
  %422 = phi i8* [ %416, %413 ], [ %419, %418 ]
  %423 = bitcast i8* %422 to i32*
  %424 = load i32, i32* %423, align 4
  %425 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 16
  store i32 %424, i32* %425, align 4
  br label %443

426:                                              ; preds = %2
  %427 = load i32, i32* %5, align 16
  %428 = icmp ult i32 %427, 41
  br i1 %428, label %429, label %434

429:                                              ; preds = %426
  %430 = load i8*, i8** %7, align 16
  %431 = sext i32 %427 to i64
  %432 = getelementptr i8, i8* %430, i64 %431
  %433 = add nuw nsw i32 %427, 8
  store i32 %433, i32* %5, align 16
  br label %437

434:                                              ; preds = %426
  %435 = load i8*, i8** %6, align 8
  %436 = getelementptr i8, i8* %435, i64 8
  store i8* %436, i8** %6, align 8
  br label %437

437:                                              ; preds = %434, %429
  %438 = phi i8* [ %432, %429 ], [ %435, %434 ]
  %439 = bitcast i8* %438 to i64*
  %440 = load i64, i64* %439, align 8
  %441 = getelementptr inbounds %struct.OpusCustomEncoder, %struct.OpusCustomEncoder* %0, i64 0, i32 41
  %442 = bitcast float** %441 to i64*
  store i64 %440, i64* %442, align 8
  br label %443

443:                                              ; preds = %2, %20, %86, %109, %159, %184, %203, %239, %257, %382, %402, %43, %38, %67, %62, %127, %143, %222, %307, %325, %421, %437, %341, %346, %361, %366, %25, %49, %73, %91, %114, %166, %190, %209, %244, %262, %387, %407
  %444 = phi i32 [ 0, %407 ], [ 0, %387 ], [ 0, %262 ], [ 0, %244 ], [ 0, %209 ], [ 0, %190 ], [ 0, %166 ], [ 0, %114 ], [ 0, %91 ], [ 0, %73 ], [ 0, %49 ], [ 0, %25 ], [ 0, %366 ], [ 0, %361 ], [ 0, %346 ], [ 0, %341 ], [ 0, %437 ], [ 0, %421 ], [ 0, %325 ], [ 0, %307 ], [ 0, %222 ], [ 0, %143 ], [ 0, %127 ], [ -1, %62 ], [ -1, %67 ], [ -1, %38 ], [ -1, %43 ], [ -1, %402 ], [ -1, %382 ], [ -1, %257 ], [ -1, %239 ], [ -1, %203 ], [ -1, %184 ], [ -1, %159 ], [ -1, %109 ], [ -1, %86 ], [ -1, %20 ], [ -5, %2 ]
  call void @llvm.va_end(i8* nonnull %4)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #5
  ret i32 %444
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #5

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #5

declare void @pitch_downsample(float**, float*, i32, i32, i32) local_unnamed_addr #2

declare void @pitch_search(float*, float*, i32, i32, i32*, i32) local_unnamed_addr #2

declare float @remove_doubling(float*, i32, i32, i32, i32*, i32, float, i32) local_unnamed_addr #2

declare void @comb_filter(float*, float*, i32, i32, i32, float, float, i32, i32, float*, i32, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #6

declare void @clt_mdct_forward_c(%struct.mdct_lookup*, float*, float*, float*, i32, i32, i32, i32) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare double @exp(double) local_unnamed_addr #6

declare void @haar1(float*, i32, i32) local_unnamed_addr #2

declare float @celt_inner_prod_sse(float*, float*, i32) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare double @log(double) local_unnamed_addr #6

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #4

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #4

; Function Attrs: nounwind readnone speculatable
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #4

; Function Attrs: nounwind readnone speculatable
declare <4 x float> @llvm.floor.v4f32(<4 x float>) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nounwind }
attributes #6 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = !{i32 0, i32 33}
!5 = distinct !{!5, !3}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !3}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.isvectorized", i32 1}
!10 = distinct !{!10, !11, !9}
!11 = !{!"llvm.loop.unroll.runtime.disable"}
!12 = distinct !{!12, !9}
!13 = distinct !{!13, !9}
!14 = distinct !{!14, !11, !9}
!15 = distinct !{!15, !11, !9}
!16 = distinct !{!16, !9}
!17 = distinct !{!17, !11, !9}
!18 = distinct !{!18, !9}
!19 = distinct !{!19, !11, !9}
!20 = distinct !{!20, !9}
!21 = distinct !{!21, !3}
!22 = distinct !{!22, !11, !9}
!23 = distinct !{!23, !9}
!24 = distinct !{!24, !3}
!25 = distinct !{!25, !11, !9}
!26 = distinct !{!26, !3}
!27 = distinct !{!27, !9}
!28 = distinct !{!28, !11, !9}
!29 = distinct !{!29, !9}
!30 = distinct !{!30, !3}
!31 = distinct !{!31, !11, !9}
!32 = !{!33}
!33 = distinct !{!33, !34}
!34 = distinct !{!34, !"LVerDomain"}
!35 = !{!36}
!36 = distinct !{!36, !34}
!37 = distinct !{!37, !9}
!38 = distinct !{!38, !9}
!39 = !{!40}
!40 = distinct !{!40, !41}
!41 = distinct !{!41, !"LVerDomain"}
!42 = !{!43, !44}
!43 = distinct !{!43, !41}
!44 = distinct !{!44, !41}
!45 = !{!43}
!46 = !{!44}
!47 = distinct !{!47, !9}
!48 = distinct !{!48, !9}
!49 = distinct !{!49, !9}
!50 = !{!51}
!51 = distinct !{!51, !52}
!52 = distinct !{!52, !"LVerDomain"}
!53 = !{!54, !55}
!54 = distinct !{!54, !52}
!55 = distinct !{!55, !52}
!56 = !{!54}
!57 = !{!55}
!58 = distinct !{!58, !9}
!59 = !{!60}
!60 = distinct !{!60, !61}
!61 = distinct !{!61, !"LVerDomain"}
!62 = !{!63, !64}
!63 = distinct !{!63, !61}
!64 = distinct !{!64, !61}
!65 = !{!63}
!66 = !{!64}
!67 = distinct !{!67, !9}
!68 = distinct !{!68, !9}
!69 = distinct !{!69, !9}
!70 = distinct !{!70, !11, !9}
!71 = distinct !{!71, !9}
!72 = distinct !{!72, !11, !9}
!73 = distinct !{!73, !9}
!74 = distinct !{!74, !11, !9}
!75 = distinct !{!75, !9}
!76 = distinct !{!76, !11, !9}
!77 = distinct !{!77, !9}
!78 = distinct !{!78, !11, !9}
!79 = !{!80}
!80 = distinct !{!80, !81}
!81 = distinct !{!81, !"LVerDomain"}
!82 = !{!83}
!83 = distinct !{!83, !81}
!84 = !{!85}
!85 = distinct !{!85, !81}
!86 = !{!80, !83}
!87 = distinct !{!87, !9}
!88 = distinct !{!88, !9}
!89 = distinct !{!89, !9}
!90 = distinct !{!90, !3}
!91 = distinct !{!91, !9}
!92 = distinct !{!92, !9}
!93 = distinct !{!93, !9}
!94 = distinct !{!94, !11, !9}
!95 = distinct !{!95, !9}
!96 = !{!97}
!97 = distinct !{!97, !98}
!98 = distinct !{!98, !"LVerDomain"}
!99 = !{!100}
!100 = distinct !{!100, !98}
!101 = !{!102}
!102 = distinct !{!102, !98}
!103 = !{!104}
!104 = distinct !{!104, !98}
!105 = distinct !{!105, !9}
!106 = distinct !{!106, !9}
!107 = distinct !{!107, !11, !9}
!108 = distinct !{!108, !9}
!109 = distinct !{!109, !11, !9}
!110 = distinct !{!110, !9}
!111 = distinct !{!111, !11, !9}
!112 = distinct !{!112, !9}
!113 = distinct !{!113, !11, !9}
!114 = !{!115}
!115 = distinct !{!115, !116}
!116 = distinct !{!116, !"LVerDomain"}
!117 = !{!118}
!118 = distinct !{!118, !116}
!119 = !{!120}
!120 = distinct !{!120, !116}
!121 = distinct !{!121, !9}
!122 = distinct !{!122, !9}
!123 = distinct !{!123, !11, !9}
!124 = distinct !{!124, !3}
!125 = distinct !{!125, !3}
!126 = distinct !{!126, !3}
!127 = distinct !{!127, !3}
