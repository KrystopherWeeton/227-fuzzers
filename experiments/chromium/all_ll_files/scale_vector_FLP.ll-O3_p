; ModuleID = '../../third_party/opus/src/silk/float/scale_vector_FLP.c'
source_filename = "../../third_party/opus/src/silk/float/scale_vector_FLP.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @silk_scale_vector_FLP(float* nocapture, float, i32) local_unnamed_addr #0 {
  %4 = and i32 %2, 65532
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %47, label %6

6:                                                ; preds = %3
  %7 = zext i32 %4 to i64
  %8 = add nsw i64 %7, -1
  %9 = lshr i64 %8, 2
  %10 = add nuw nsw i64 %9, 1
  %11 = icmp ult i64 %10, 4
  br i1 %11, label %12, label %14

12:                                               ; preds = %42, %6
  %13 = phi i64 [ 0, %6 ], [ %16, %42 ]
  br label %117

14:                                               ; preds = %6
  %15 = and i64 %10, 9223372036854775804
  %16 = shl i64 %15, 2
  %17 = insertelement <4 x float> undef, float %1, i32 0
  %18 = shufflevector <4 x float> %17, <4 x float> undef, <4 x i32> zeroinitializer
  %19 = getelementptr inbounds float, float* %0, i64 -3
  br label %20

20:                                               ; preds = %20, %14
  %21 = phi i64 [ 0, %14 ], [ %40, %20 ]
  %22 = shl i64 %21, 2
  %23 = getelementptr inbounds float, float* %0, i64 %22
  %24 = bitcast float* %23 to <16 x float>*
  %25 = load <16 x float>, <16 x float>* %24, align 4
  %26 = shufflevector <16 x float> %25, <16 x float> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %27 = shufflevector <16 x float> %25, <16 x float> undef, <4 x i32> <i32 1, i32 5, i32 9, i32 13>
  %28 = shufflevector <16 x float> %25, <16 x float> undef, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %29 = shufflevector <16 x float> %25, <16 x float> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %30 = fmul <4 x float> %26, %18
  %31 = fmul <4 x float> %27, %18
  %32 = fmul <4 x float> %28, %18
  %33 = or i64 %22, 3
  %34 = fmul <4 x float> %29, %18
  %35 = getelementptr inbounds float, float* %19, i64 %33
  %36 = bitcast float* %35 to <16 x float>*
  %37 = shufflevector <4 x float> %30, <4 x float> %31, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %38 = shufflevector <4 x float> %32, <4 x float> %34, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %39 = shufflevector <8 x float> %37, <8 x float> %38, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 1, i32 5, i32 9, i32 13, i32 2, i32 6, i32 10, i32 14, i32 3, i32 7, i32 11, i32 15>
  store <16 x float> %39, <16 x float>* %36, align 4
  %40 = add i64 %21, 4
  %41 = icmp eq i64 %40, %15
  br i1 %41, label %42, label %20, !llvm.loop !2

42:                                               ; preds = %20
  %43 = icmp eq i64 %10, %15
  br i1 %43, label %44, label %12

44:                                               ; preds = %117, %42
  %45 = phi i64 [ %16, %42 ], [ %134, %117 ]
  %46 = trunc i64 %45 to i32
  br label %47

47:                                               ; preds = %44, %3
  %48 = phi i32 [ 0, %3 ], [ %46, %44 ]
  %49 = icmp slt i32 %48, %2
  br i1 %49, label %50, label %143

50:                                               ; preds = %47
  %51 = zext i32 %48 to i64
  %52 = zext i32 %2 to i64
  %53 = sub nsw i64 %52, %51
  %54 = icmp ult i64 %53, 8
  br i1 %54, label %55, label %57

55:                                               ; preds = %115, %50
  %56 = phi i64 [ %51, %50 ], [ %59, %115 ]
  br label %136

57:                                               ; preds = %50
  %58 = and i64 %53, -8
  %59 = add nsw i64 %58, %51
  %60 = insertelement <4 x float> undef, float %1, i32 0
  %61 = shufflevector <4 x float> %60, <4 x float> undef, <4 x i32> zeroinitializer
  %62 = insertelement <4 x float> undef, float %1, i32 0
  %63 = shufflevector <4 x float> %62, <4 x float> undef, <4 x i32> zeroinitializer
  %64 = add nsw i64 %58, -8
  %65 = lshr exact i64 %64, 3
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 1
  %68 = icmp eq i64 %64, 0
  br i1 %68, label %100, label %69

69:                                               ; preds = %57
  %70 = sub nuw nsw i64 %66, %67
  br label %71

71:                                               ; preds = %71, %69
  %72 = phi i64 [ 0, %69 ], [ %97, %71 ]
  %73 = phi i64 [ %70, %69 ], [ %98, %71 ]
  %74 = add i64 %72, %51
  %75 = getelementptr inbounds float, float* %0, i64 %74
  %76 = bitcast float* %75 to <4 x float>*
  %77 = load <4 x float>, <4 x float>* %76, align 4
  %78 = getelementptr inbounds float, float* %75, i64 4
  %79 = bitcast float* %78 to <4 x float>*
  %80 = load <4 x float>, <4 x float>* %79, align 4
  %81 = fmul <4 x float> %77, %61
  %82 = fmul <4 x float> %80, %63
  %83 = bitcast float* %75 to <4 x float>*
  store <4 x float> %81, <4 x float>* %83, align 4
  %84 = bitcast float* %78 to <4 x float>*
  store <4 x float> %82, <4 x float>* %84, align 4
  %85 = or i64 %72, 8
  %86 = add i64 %85, %51
  %87 = getelementptr inbounds float, float* %0, i64 %86
  %88 = bitcast float* %87 to <4 x float>*
  %89 = load <4 x float>, <4 x float>* %88, align 4
  %90 = getelementptr inbounds float, float* %87, i64 4
  %91 = bitcast float* %90 to <4 x float>*
  %92 = load <4 x float>, <4 x float>* %91, align 4
  %93 = fmul <4 x float> %89, %61
  %94 = fmul <4 x float> %92, %63
  %95 = bitcast float* %87 to <4 x float>*
  store <4 x float> %93, <4 x float>* %95, align 4
  %96 = bitcast float* %90 to <4 x float>*
  store <4 x float> %94, <4 x float>* %96, align 4
  %97 = add i64 %72, 16
  %98 = add i64 %73, -2
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %100, label %71, !llvm.loop !4

100:                                              ; preds = %71, %57
  %101 = phi i64 [ 0, %57 ], [ %97, %71 ]
  %102 = icmp eq i64 %67, 0
  br i1 %102, label %115, label %103

103:                                              ; preds = %100
  %104 = add i64 %101, %51
  %105 = getelementptr inbounds float, float* %0, i64 %104
  %106 = bitcast float* %105 to <4 x float>*
  %107 = load <4 x float>, <4 x float>* %106, align 4
  %108 = getelementptr inbounds float, float* %105, i64 4
  %109 = bitcast float* %108 to <4 x float>*
  %110 = load <4 x float>, <4 x float>* %109, align 4
  %111 = fmul <4 x float> %107, %61
  %112 = fmul <4 x float> %110, %63
  %113 = bitcast float* %105 to <4 x float>*
  store <4 x float> %111, <4 x float>* %113, align 4
  %114 = bitcast float* %108 to <4 x float>*
  store <4 x float> %112, <4 x float>* %114, align 4
  br label %115

115:                                              ; preds = %100, %103
  %116 = icmp eq i64 %53, %58
  br i1 %116, label %143, label %55

117:                                              ; preds = %12, %117
  %118 = phi i64 [ %134, %117 ], [ %13, %12 ]
  %119 = getelementptr inbounds float, float* %0, i64 %118
  %120 = load float, float* %119, align 4
  %121 = fmul float %120, %1
  store float %121, float* %119, align 4
  %122 = or i64 %118, 1
  %123 = getelementptr inbounds float, float* %0, i64 %122
  %124 = load float, float* %123, align 4
  %125 = fmul float %124, %1
  store float %125, float* %123, align 4
  %126 = or i64 %118, 2
  %127 = getelementptr inbounds float, float* %0, i64 %126
  %128 = load float, float* %127, align 4
  %129 = fmul float %128, %1
  store float %129, float* %127, align 4
  %130 = or i64 %118, 3
  %131 = getelementptr inbounds float, float* %0, i64 %130
  %132 = load float, float* %131, align 4
  %133 = fmul float %132, %1
  store float %133, float* %131, align 4
  %134 = add nuw nsw i64 %118, 4
  %135 = icmp ult i64 %134, %7
  br i1 %135, label %117, label %44, !llvm.loop !5

136:                                              ; preds = %55, %136
  %137 = phi i64 [ %141, %136 ], [ %56, %55 ]
  %138 = getelementptr inbounds float, float* %0, i64 %137
  %139 = load float, float* %138, align 4
  %140 = fmul float %139, %1
  store float %140, float* %138, align 4
  %141 = add nuw nsw i64 %137, 1
  %142 = icmp eq i64 %141, %52
  br i1 %142, label %143, label %136, !llvm.loop !7

143:                                              ; preds = %136, %115, %47
  ret void
}

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !6, !3}
!6 = !{!"llvm.loop.unroll.runtime.disable"}
!7 = distinct !{!7, !6, !3}
