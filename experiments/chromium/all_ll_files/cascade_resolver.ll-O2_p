; ModuleID = '../../third_party/blink/renderer/core/css/resolver/cascade_resolver.cc'
source_filename = "../../third_party/blink/renderer/core/css/resolver/cascade_resolver.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::CascadeResolver::AutoLock" = type { %"class.blink::CascadeResolver"* }
%"class.blink::CSSProperty" = type <{ %"class.blink::CSSUnresolvedProperty", i32, i32, i8, [7 x i8] }>
%"class.blink::CSSUnresolvedProperty" = type { i32 (...)** }
%"class.blink::CascadeResolver" = type { %"class.WTF::Vector", i32, i32, %"class.blink::CascadeFilter", i8, i32, %struct.anon }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase", [64 x i8] }
%"class.WTF::VectorBufferBase" = type { %"class.blink::CSSProperty"**, i32, i32 }
%"class.blink::CascadeFilter" = type { i32, i32 }
%struct.anon = type { %"class.blink::cssvalue::CSSPendingSubstitutionValue"*, %"class.blink::HeapVector" }
%"class.blink::cssvalue::CSSPendingSubstitutionValue" = type opaque
%"class.blink::HeapVector" = type { %"class.WTF::Vector.0" }
%"class.WTF::Vector.0" = type { %"class.WTF::VectorBuffer.1" }
%"class.WTF::VectorBuffer.1" = type { %"class.WTF::VectorBufferBase.2", [6144 x i8] }
%"class.WTF::VectorBufferBase.2" = type { %"class.blink::CSSPropertyValue"*, i32, i32 }
%"class.blink::CSSPropertyValue" = type { %"struct.blink::CSSPropertyValueMetadata", %"class.blink::Member" }
%"struct.blink::CSSPropertyValueMetadata" = type <{ %"class.WTF::AtomicString", i16, [6 x i8] }>
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::CSSValue"* }
%"class.blink::CSSValue" = type { i8, i8, i8 }
%"class.blink::CSSPropertyName" = type { i32, %"class.WTF::AtomicString" }
%"class.blink::CSSVariableData" = type { %"class.WTF::RefCounted", %"class.WTF::Vector.8", %"class.WTF::Vector.13", %"class.WTF::String", i8, i8, i8, i8, %"class.WTF::String", %"class.WTF::TextEncoding" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.WTF::Vector.8" = type { %"class.WTF::VectorBuffer.9" }
%"class.WTF::VectorBuffer.9" = type { %"class.WTF::VectorBufferBase.10" }
%"class.WTF::VectorBufferBase.10" = type { %"class.WTF::String"*, i32, i32 }
%"class.WTF::Vector.13" = type { %"class.WTF::VectorBuffer.14" }
%"class.WTF::VectorBuffer.14" = type { %"class.WTF::VectorBufferBase.15" }
%"class.WTF::VectorBufferBase.15" = type { %"class.blink::CSSParserToken"*, i32, i32 }
%"class.blink::CSSParserToken" = type { i24, i32, i8*, %union.anon }
%union.anon = type { double }
%"class.WTF::TextEncoding" = type { i8* }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.19 }
%union.anon.19 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZNK3WTF6VectorIPKN5blink11CSSPropertyELj8ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZN3WTF6VectorIPKN5blink11CSSPropertyELj8ENS_18PartitionAllocatorEE14AppendSlowCaseIS4_EEvOT_ = comdat any

$_ZN3WTF6VectorIPKN5blink11CSSPropertyELj8ENS_18PartitionAllocatorEE14ExpandCapacityEj = comdat any

$_ZN3WTF6VectorIPKN5blink11CSSPropertyELj8ENS_18PartitionAllocatorEE16ReallocateBufferEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIPKN5blink11CSSPropertyEEEmm = comdat any

$_ZN3WTF12VectorBufferIPKN5blink11CSSPropertyELj8ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS4_ = comdat any

@.str = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1
@.str.1 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@.str.2 = private unnamed_addr constant [33 x i8] c"expanded_capacity > old_capacity\00", align 1
@.str.4 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.5 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPKN5blink11CSSPropertyEEEPKcv = private unnamed_addr constant [74 x i8] c"const char *WTF::GetStringWithTypeName() [T = const blink::CSSProperty *]\00", align 1

@_ZN5blink15CascadeResolver8AutoLockC1ERKNS_11CSSPropertyERS0_ = hidden unnamed_addr alias void (%"class.blink::CascadeResolver::AutoLock"*, %"class.blink::CSSProperty"*, %"class.blink::CascadeResolver"*), void (%"class.blink::CascadeResolver::AutoLock"*, %"class.blink::CSSProperty"*, %"class.blink::CascadeResolver"*)* @_ZN5blink15CascadeResolver8AutoLockC2ERKNS_11CSSPropertyERS0_
@_ZN5blink15CascadeResolver8AutoLockD1Ev = hidden unnamed_addr alias void (%"class.blink::CascadeResolver::AutoLock"*), void (%"class.blink::CascadeResolver::AutoLock"*)* @_ZN5blink15CascadeResolver8AutoLockD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink15CascadeResolver8IsLockedERKNS_11CSSPropertyE(%"class.blink::CascadeResolver"* nocapture readonly, %"class.blink::CSSProperty"* dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = tail call i32 @_ZNK5blink15CascadeResolver4FindERKNS_11CSSPropertyE(%"class.blink::CascadeResolver"* %0, %"class.blink::CSSProperty"* dereferenceable(24) %1)
  %4 = icmp ne i32 %3, -1
  ret i1 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK5blink15CascadeResolver4FindERKNS_11CSSPropertyE(%"class.blink::CascadeResolver"* nocapture readonly, %"class.blink::CSSProperty"* dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.blink::CSSPropertyName", align 8
  %4 = alloca %"class.blink::CSSPropertyName", align 8
  %5 = getelementptr inbounds %"class.blink::CascadeResolver", %"class.blink::CascadeResolver"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %6 = load %"class.blink::CSSProperty"**, %"class.blink::CSSProperty"*** %5, align 8
  %7 = getelementptr inbounds %"class.blink::CascadeResolver", %"class.blink::CascadeResolver"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %"class.blink::CSSProperty"*, %"class.blink::CSSProperty"** %6, i64 %9
  %11 = icmp eq i32 %8, 0
  br i1 %11, label %74, label %12

12:                                               ; preds = %2
  %13 = bitcast %"class.blink::CSSPropertyName"* %3 to i8*
  %14 = getelementptr inbounds %"class.blink::CSSPropertyName", %"class.blink::CSSPropertyName"* %3, i64 0, i32 0
  %15 = getelementptr inbounds %"class.blink::CSSPropertyName", %"class.blink::CSSPropertyName"* %3, i64 0, i32 1, i32 0, i32 0, i32 0
  %16 = bitcast %"class.blink::CSSPropertyName"* %4 to i8*
  %17 = bitcast %"class.blink::CSSProperty"* %1 to { i32, %"class.WTF::StringImpl"* } (%"class.blink::CSSProperty"*)***
  %18 = getelementptr inbounds %"class.blink::CSSPropertyName", %"class.blink::CSSPropertyName"* %4, i64 0, i32 0
  %19 = getelementptr inbounds %"class.blink::CSSPropertyName", %"class.blink::CSSPropertyName"* %4, i64 0, i32 1, i32 0, i32 0, i32 0
  br label %20

20:                                               ; preds = %12, %70
  %21 = phi %"class.blink::CSSProperty"** [ %6, %12 ], [ %72, %70 ]
  %22 = phi i32 [ 0, %12 ], [ %71, %70 ]
  %23 = load %"class.blink::CSSProperty"*, %"class.blink::CSSProperty"** %21, align 8
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %13) #6
  %24 = bitcast %"class.blink::CSSProperty"* %23 to { i32, %"class.WTF::StringImpl"* } (%"class.blink::CSSProperty"*)***
  %25 = load { i32, %"class.WTF::StringImpl"* } (%"class.blink::CSSProperty"*)**, { i32, %"class.WTF::StringImpl"* } (%"class.blink::CSSProperty"*)*** %24, align 8
  %26 = getelementptr inbounds { i32, %"class.WTF::StringImpl"* } (%"class.blink::CSSProperty"*)*, { i32, %"class.WTF::StringImpl"* } (%"class.blink::CSSProperty"*)** %25, i64 6
  %27 = load { i32, %"class.WTF::StringImpl"* } (%"class.blink::CSSProperty"*)*, { i32, %"class.WTF::StringImpl"* } (%"class.blink::CSSProperty"*)** %26, align 8
  %28 = call { i32, %"class.WTF::StringImpl"* } %27(%"class.blink::CSSProperty"* %23) #6
  %29 = extractvalue { i32, %"class.WTF::StringImpl"* } %28, 0
  store i32 %29, i32* %14, align 8
  %30 = extractvalue { i32, %"class.WTF::StringImpl"* } %28, 1
  store %"class.WTF::StringImpl"* %30, %"class.WTF::StringImpl"** %15, align 8
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %16) #6
  %31 = load { i32, %"class.WTF::StringImpl"* } (%"class.blink::CSSProperty"*)**, { i32, %"class.WTF::StringImpl"* } (%"class.blink::CSSProperty"*)*** %17, align 8
  %32 = getelementptr inbounds { i32, %"class.WTF::StringImpl"* } (%"class.blink::CSSProperty"*)*, { i32, %"class.WTF::StringImpl"* } (%"class.blink::CSSProperty"*)** %31, i64 6
  %33 = load { i32, %"class.WTF::StringImpl"* } (%"class.blink::CSSProperty"*)*, { i32, %"class.WTF::StringImpl"* } (%"class.blink::CSSProperty"*)** %32, align 8
  %34 = call { i32, %"class.WTF::StringImpl"* } %33(%"class.blink::CSSProperty"* %1) #6
  %35 = extractvalue { i32, %"class.WTF::StringImpl"* } %34, 0
  store i32 %35, i32* %18, align 8
  %36 = extractvalue { i32, %"class.WTF::StringImpl"* } %34, 1
  store %"class.WTF::StringImpl"* %36, %"class.WTF::StringImpl"** %19, align 8
  %37 = call zeroext i1 @_ZNK5blink15CSSPropertyNameeqERKS0_(%"class.blink::CSSPropertyName"* nonnull %3, %"class.blink::CSSPropertyName"* nonnull dereferenceable(16) %4) #6
  %38 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %19, align 8
  %39 = icmp eq %"class.WTF::StringImpl"* %38, null
  br i1 %39, label %53, label %40

40:                                               ; preds = %20
  %41 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %38, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %42 = load atomic i32, i32* %41 monotonic, align 4
  %43 = and i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %38, i64 0, i32 0
  %46 = load i32, i32* %45, align 4
  br i1 %44, label %47, label %49

47:                                               ; preds = %40
  %48 = add i32 %46, -1
  store i32 %48, i32* %45, align 4
  br label %49

49:                                               ; preds = %47, %40
  %50 = phi i32 [ %48, %47 ], [ %46, %40 ]
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %53

52:                                               ; preds = %49
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %38) #6
  br label %53

53:                                               ; preds = %20, %49, %52
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %16) #6
  %54 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %15, align 8
  %55 = icmp eq %"class.WTF::StringImpl"* %54, null
  br i1 %55, label %69, label %56

56:                                               ; preds = %53
  %57 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %54, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %58 = load atomic i32, i32* %57 monotonic, align 4
  %59 = and i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %54, i64 0, i32 0
  %62 = load i32, i32* %61, align 4
  br i1 %60, label %63, label %65

63:                                               ; preds = %56
  %64 = add i32 %62, -1
  store i32 %64, i32* %61, align 4
  br label %65

65:                                               ; preds = %63, %56
  %66 = phi i32 [ %64, %63 ], [ %62, %56 ]
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %69

68:                                               ; preds = %65
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %54) #6
  br label %69

69:                                               ; preds = %53, %65, %68
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %13) #6
  br i1 %37, label %74, label %70

70:                                               ; preds = %69
  %71 = add i32 %22, 1
  %72 = getelementptr inbounds %"class.blink::CSSProperty"*, %"class.blink::CSSProperty"** %21, i64 1
  %73 = icmp eq %"class.blink::CSSProperty"** %72, %10
  br i1 %73, label %74, label %20

74:                                               ; preds = %70, %69, %2
  %75 = phi i32 [ -1, %2 ], [ %22, %69 ], [ -1, %70 ]
  ret i32 %75
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink15CascadeResolver17AllowSubstitutionEPNS_15CSSVariableDataE(%"class.blink::CascadeResolver"*, %"class.blink::CSSVariableData"* readonly) local_unnamed_addr #0 align 2 {
  %3 = icmp eq %"class.blink::CSSVariableData"* %1, null
  br i1 %3, label %23, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.blink::CSSVariableData", %"class.blink::CSSVariableData"* %1, i64 0, i32 4
  %6 = load i8, i8* %5, align 8, !range !2
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %23, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %"class.blink::CascadeResolver", %"class.blink::CascadeResolver"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %23, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %"class.blink::CascadeResolver", %"class.blink::CascadeResolver"* %0, i64 0, i32 0
  %14 = add i32 %10, -1
  %15 = tail call dereferenceable(8) %"class.blink::CSSProperty"** @_ZNK3WTF6VectorIPKN5blink11CSSPropertyELj8ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %13, i32 %14) #6
  %16 = load %"class.blink::CSSProperty"*, %"class.blink::CSSProperty"** %15, align 8
  %17 = getelementptr inbounds %"class.blink::CSSProperty", %"class.blink::CSSProperty"* %16, i64 0, i32 1
  %18 = load i32, i32* %17, align 8
  %19 = icmp eq i32 %18, 1
  br i1 %19, label %23, label %20

20:                                               ; preds = %12
  %21 = tail call zeroext i1 @_ZN5blink13CSSAnimations28IsAnimationAffectingPropertyERKNS_11CSSPropertyE(%"class.blink::CSSProperty"* dereferenceable(24) %16) #6
  %22 = xor i1 %21, true
  br label %23

23:                                               ; preds = %4, %2, %8, %20, %12
  %24 = phi i1 [ %22, %20 ], [ true, %12 ], [ true, %8 ], [ true, %2 ], [ true, %4 ]
  ret i1 %24
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare zeroext i1 @_ZN5blink13CSSAnimations28IsAnimationAffectingPropertyERKNS_11CSSPropertyE(%"class.blink::CSSProperty"* dereferenceable(24)) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink15CascadeResolver11DetectCycleERKNS_11CSSPropertyE(%"class.blink::CascadeResolver"* nocapture, %"class.blink::CSSProperty"* dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = tail call i32 @_ZNK5blink15CascadeResolver4FindERKNS_11CSSPropertyE(%"class.blink::CascadeResolver"* %0, %"class.blink::CSSProperty"* dereferenceable(24) %1)
  %4 = icmp eq i32 %3, -1
  br i1 %4, label %13, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %"class.blink::CascadeResolver", %"class.blink::CascadeResolver"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = icmp ult i32 %3, %7
  %9 = select i1 %8, i32 %3, i32 %7
  store i32 %9, i32* %6, align 8
  %10 = getelementptr inbounds %"class.blink::CascadeResolver", %"class.blink::CascadeResolver"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.blink::CascadeResolver", %"class.blink::CascadeResolver"* %0, i64 0, i32 2
  store i32 %11, i32* %12, align 4
  br label %13

13:                                               ; preds = %2, %5
  %14 = phi i1 [ true, %5 ], [ false, %2 ]
  ret i1 %14
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink15CascadeResolver7InCycleEv(%"class.blink::CascadeResolver"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.blink::CascadeResolver", %"class.blink::CascadeResolver"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds %"class.blink::CascadeResolver", %"class.blink::CascadeResolver"* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 8
  %6 = icmp ugt i32 %3, %5
  br i1 %6, label %7, label %11

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.blink::CascadeResolver", %"class.blink::CascadeResolver"* %0, i64 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = icmp ule i32 %3, %9
  br label %11

11:                                               ; preds = %7, %1
  %12 = phi i1 [ false, %1 ], [ %10, %7 ]
  ret i1 %12
}

declare zeroext i1 @_ZNK5blink15CSSPropertyNameeqERKS0_(%"class.blink::CSSPropertyName"*, %"class.blink::CSSPropertyName"* dereferenceable(16)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15CascadeResolver8AutoLockC2ERKNS_11CSSPropertyERS0_(%"class.blink::CascadeResolver::AutoLock"* nocapture, %"class.blink::CSSProperty"* dereferenceable(24), %"class.blink::CascadeResolver"* dereferenceable(6272)) unnamed_addr #0 align 2 {
  %4 = alloca %"class.blink::CSSProperty"*, align 8
  %5 = getelementptr inbounds %"class.blink::CascadeResolver::AutoLock", %"class.blink::CascadeResolver::AutoLock"* %0, i64 0, i32 0
  store %"class.blink::CascadeResolver"* %2, %"class.blink::CascadeResolver"** %5, align 8
  %6 = bitcast %"class.blink::CSSProperty"** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #6
  store %"class.blink::CSSProperty"* %1, %"class.blink::CSSProperty"** %4, align 8
  %7 = getelementptr inbounds %"class.blink::CascadeResolver", %"class.blink::CascadeResolver"* %2, i64 0, i32 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.blink::CascadeResolver", %"class.blink::CascadeResolver"* %2, i64 0, i32 0, i32 0, i32 0, i32 1
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %8, %10
  br i1 %11, label %21, label %12, !prof !3

12:                                               ; preds = %3
  %13 = ptrtoint %"class.blink::CSSProperty"* %1 to i64
  %14 = getelementptr inbounds %"class.blink::CascadeResolver", %"class.blink::CascadeResolver"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %15 = load %"class.blink::CSSProperty"**, %"class.blink::CSSProperty"*** %14, align 8
  %16 = zext i32 %8 to i64
  %17 = getelementptr inbounds %"class.blink::CSSProperty"*, %"class.blink::CSSProperty"** %15, i64 %16
  %18 = bitcast %"class.blink::CSSProperty"** %17 to i64*
  store i64 %13, i64* %18, align 8
  %19 = load i32, i32* %7, align 4
  %20 = add i32 %19, 1
  store i32 %20, i32* %7, align 4
  br label %23

21:                                               ; preds = %3
  %22 = getelementptr inbounds %"class.blink::CascadeResolver", %"class.blink::CascadeResolver"* %2, i64 0, i32 0
  call void @_ZN3WTF6VectorIPKN5blink11CSSPropertyELj8ENS_18PartitionAllocatorEE14AppendSlowCaseIS4_EEvOT_(%"class.WTF::Vector"* %22, %"class.blink::CSSProperty"** nonnull dereferenceable(8) %4) #6
  br label %23

23:                                               ; preds = %12, %21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15CascadeResolver8AutoLockD2Ev(%"class.blink::CascadeResolver::AutoLock"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::CascadeResolver::AutoLock", %"class.blink::CascadeResolver::AutoLock"* %0, i64 0, i32 0
  %3 = load %"class.blink::CascadeResolver"*, %"class.blink::CascadeResolver"** %2, align 8
  %4 = getelementptr inbounds %"class.blink::CascadeResolver", %"class.blink::CascadeResolver"* %3, i64 0, i32 0, i32 0, i32 0, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = add i32 %5, -1
  store i32 %6, i32* %4, align 4
  %7 = load %"class.blink::CascadeResolver"*, %"class.blink::CascadeResolver"** %2, align 8
  %8 = getelementptr inbounds %"class.blink::CascadeResolver", %"class.blink::CascadeResolver"* %7, i64 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, -1
  br i1 %10, label %19, label %11

11:                                               ; preds = %1
  %12 = getelementptr inbounds %"class.blink::CascadeResolver", %"class.blink::CascadeResolver"* %7, i64 0, i32 0, i32 0, i32 0, i32 2
  %13 = load i32, i32* %12, align 4
  %14 = icmp ult i32 %13, %9
  %15 = select i1 %14, i32 %13, i32 %9
  store i32 %15, i32* %8, align 4
  %16 = load %"class.blink::CascadeResolver"*, %"class.blink::CascadeResolver"** %2, align 8
  %17 = getelementptr inbounds %"class.blink::CascadeResolver", %"class.blink::CascadeResolver"* %16, i64 0, i32 2
  %18 = load i32, i32* %17, align 4
  br label %19

19:                                               ; preds = %1, %11
  %20 = phi i32 [ -1, %1 ], [ %18, %11 ]
  %21 = phi %"class.blink::CascadeResolver"* [ %7, %1 ], [ %16, %11 ]
  %22 = getelementptr inbounds %"class.blink::CascadeResolver", %"class.blink::CascadeResolver"* %21, i64 0, i32 1
  %23 = load i32, i32* %22, align 8
  %24 = icmp ugt i32 %20, %23
  br i1 %24, label %28, label %25

25:                                               ; preds = %19
  store i32 -1, i32* %22, align 8
  %26 = load %"class.blink::CascadeResolver"*, %"class.blink::CascadeResolver"** %2, align 8
  %27 = getelementptr inbounds %"class.blink::CascadeResolver", %"class.blink::CascadeResolver"* %26, i64 0, i32 2
  store i32 -1, i32* %27, align 4
  br label %28

28:                                               ; preds = %19, %25
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) %"class.blink::CSSProperty"** @_ZNK3WTF6VectorIPKN5blink11CSSPropertyELj8ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #6
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #6
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #6
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i8* %14, i8* %15) #6
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #6
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 1176, %"class.logging::CheckOpResult"* nonnull %4) #6
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #6
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #6
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #6
  %23 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.blink::CSSProperty"**, %"class.blink::CSSProperty"*** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"class.blink::CSSProperty"*, %"class.blink::CSSProperty"** %24, i64 %25
  ret %"class.blink::CSSProperty"** %26
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #4

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #2

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIPKN5blink11CSSPropertyELj8ENS_18PartitionAllocatorEE14AppendSlowCaseIS4_EEvOT_(%"class.WTF::Vector"*, %"class.blink::CSSProperty"** dereferenceable(8)) local_unnamed_addr #5 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load %"class.blink::CSSProperty"**, %"class.blink::CSSProperty"*** %6, align 8
  %8 = icmp ugt %"class.blink::CSSProperty"** %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds %"class.blink::CSSProperty"*, %"class.blink::CSSProperty"** %7, i64 %10
  %12 = icmp ugt %"class.blink::CSSProperty"** %11, %1
  br i1 %12, label %15, label %13

13:                                               ; preds = %9, %2
  tail call void @_ZN3WTF6VectorIPKN5blink11CSSPropertyELj8ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector"* %0, i32 %5) #6
  %14 = load %"class.blink::CSSProperty"**, %"class.blink::CSSProperty"*** %6, align 8
  br label %22

15:                                               ; preds = %9
  %16 = ptrtoint %"class.blink::CSSProperty"** %1 to i64
  %17 = ptrtoint %"class.blink::CSSProperty"** %7 to i64
  %18 = sub i64 %16, %17
  %19 = ashr exact i64 %18, 3
  tail call void @_ZN3WTF6VectorIPKN5blink11CSSPropertyELj8ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector"* %0, i32 %5) #6
  %20 = load %"class.blink::CSSProperty"**, %"class.blink::CSSProperty"*** %6, align 8
  %21 = getelementptr inbounds %"class.blink::CSSProperty"*, %"class.blink::CSSProperty"** %20, i64 %19
  br label %22

22:                                               ; preds = %13, %15
  %23 = phi %"class.blink::CSSProperty"** [ %14, %13 ], [ %20, %15 ]
  %24 = phi %"class.blink::CSSProperty"** [ %1, %13 ], [ %21, %15 ]
  %25 = load i32, i32* %3, align 4
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds %"class.blink::CSSProperty"*, %"class.blink::CSSProperty"** %23, i64 %26
  %28 = bitcast %"class.blink::CSSProperty"** %24 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = bitcast %"class.blink::CSSProperty"** %27 to i64*
  store i64 %29, i64* %30, align 8
  %31 = load i32, i32* %3, align 4
  %32 = add i32 %31, 1
  store i32 %32, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIPKN5blink11CSSPropertyELj8ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = shl i32 %7, 1
  %9 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #6
  %10 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %10, align 8
  %11 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = icmp ugt i32 %8, %7
  br i1 %12, label %13, label %14

13:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* null, i8** %10, align 8
  br label %23

14:                                               ; preds = %2
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %8) #6
  %16 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #6
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.2, i64 0, i64 0), i8* %15, i8* %16) #6
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* %18, i8** %10, align 8
  %19 = icmp eq i8* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %14
  %21 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #6
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 1715, %"class.logging::CheckOpResult"* nonnull %4) #6
  %22 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #6
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #6
  br label %23

23:                                               ; preds = %13, %14, %20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #6
  %24 = icmp ugt i32 %8, 4
  %25 = select i1 %24, i32 %8, i32 4
  %26 = icmp ugt i32 %25, %1
  %27 = select i1 %26, i32 %25, i32 %1
  %28 = load i32, i32* %6, align 8
  %29 = icmp ult i32 %28, %27
  br i1 %29, label %30, label %51, !prof !4

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %32 = load %"class.blink::CSSProperty"**, %"class.blink::CSSProperty"*** %31, align 8
  %33 = icmp eq %"class.blink::CSSProperty"** %32, null
  br i1 %33, label %34, label %50

34:                                               ; preds = %30
  %35 = icmp ugt i32 %27, 8
  br i1 %35, label %36, label %44

36:                                               ; preds = %34
  %37 = zext i32 %27 to i64
  %38 = call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIPKN5blink11CSSPropertyEEEmm(i64 %37) #6
  %39 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %38, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPKN5blink11CSSPropertyEEEPKcv, i64 0, i64 0)) #6
  %40 = ptrtoint i8* %39 to i64
  %41 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %40, i64* %41 monotonic, align 8
  %42 = lshr i64 %38, 3
  %43 = trunc i64 %42 to i32
  br label %48

44:                                               ; preds = %34
  %45 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 1, i64 0
  %46 = ptrtoint i8* %45 to i64
  %47 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %46, i64* %47 monotonic, align 8
  br label %48

48:                                               ; preds = %44, %36
  %49 = phi i32 [ 8, %44 ], [ %43, %36 ]
  store i32 %49, i32* %6, align 8
  br label %51

50:                                               ; preds = %30
  call void @_ZN3WTF6VectorIPKN5blink11CSSPropertyELj8ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector"* %0, i32 %27) #6
  br label %51

51:                                               ; preds = %23, %48, %50
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIPKN5blink11CSSPropertyELj8ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp ult i32 %1, 9
  br i1 %3, label %4, label %29

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load %"class.blink::CSSProperty"**, %"class.blink::CSSProperty"*** %5, align 8
  %7 = icmp eq %"class.blink::CSSProperty"** %6, null
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 1, i64 0
  %9 = bitcast i8* %8 to %"class.blink::CSSProperty"**
  %10 = icmp eq %"class.blink::CSSProperty"** %6, %9
  %11 = or i1 %10, %7
  br i1 %11, label %12, label %16

12:                                               ; preds = %4
  %13 = ptrtoint i8* %8 to i64
  %14 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %13, i64* %14 monotonic, align 8
  %15 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 8, i32* %15, align 8
  br label %58

16:                                               ; preds = %4
  %17 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0
  %20 = ptrtoint i8* %8 to i64
  %21 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %20, i64* %21 monotonic, align 8
  %22 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 8, i32* %22, align 8
  %23 = icmp eq i8* %8, null
  br i1 %23, label %28, label %24, !prof !3

24:                                               ; preds = %16
  %25 = zext i32 %18 to i64
  %26 = bitcast %"class.blink::CSSProperty"** %6 to i8*
  %27 = shl nuw nsw i64 %25, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %8, i8* nonnull align 8 %26, i64 %27, i1 false) #6
  br label %28

28:                                               ; preds = %24, %16
  tail call void @_ZN3WTF12VectorBufferIPKN5blink11CSSPropertyELj8ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS4_(%"class.WTF::VectorBuffer"* %19, %"class.blink::CSSProperty"** nonnull %6) #6
  br label %58

29:                                               ; preds = %2
  %30 = zext i32 %1 to i64
  %31 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIPKN5blink11CSSPropertyEEEmm(i64 %30) #6
  %32 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %31, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPKN5blink11CSSPropertyEEEPKcv, i64 0, i64 0)) #6
  %33 = lshr i64 %31, 3
  %34 = ptrtoint i8* %32 to i64
  %35 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %36 = load %"class.blink::CSSProperty"**, %"class.blink::CSSProperty"*** %35, align 8
  %37 = icmp ne i8* %32, null
  %38 = icmp ne %"class.blink::CSSProperty"** %36, null
  %39 = and i1 %37, %38
  br i1 %39, label %40, label %47, !prof !4

40:                                               ; preds = %29
  %41 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %42 = load i32, i32* %41, align 4
  %43 = zext i32 %42 to i64
  %44 = bitcast %"class.blink::CSSProperty"** %36 to i8*
  %45 = shl nuw nsw i64 %43, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %32, i8* nonnull align 8 %44, i64 %45, i1 false) #6
  %46 = load %"class.blink::CSSProperty"**, %"class.blink::CSSProperty"*** %35, align 8
  br label %47

47:                                               ; preds = %29, %40
  %48 = phi %"class.blink::CSSProperty"** [ %36, %29 ], [ %46, %40 ]
  %49 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 1, i64 0
  %50 = bitcast i8* %49 to %"class.blink::CSSProperty"**
  %51 = icmp eq %"class.blink::CSSProperty"** %48, %50
  br i1 %51, label %54, label %52, !prof !4

52:                                               ; preds = %47
  %53 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0
  tail call void @_ZN3WTF12VectorBufferIPKN5blink11CSSPropertyELj8ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS4_(%"class.WTF::VectorBuffer"* %53, %"class.blink::CSSProperty"** %48) #6
  br label %54

54:                                               ; preds = %47, %52
  %55 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %34, i64* %55 monotonic, align 8
  %56 = trunc i64 %33 to i32
  %57 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %56, i32* %57, align 8
  br label %58

58:                                               ; preds = %28, %54, %12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIPKN5blink11CSSPropertyEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #6
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 268173312
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #6
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 268173312) #6
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.4, i64 0, i64 0), i8* %11, i8* %12) #6
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #6
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.5, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #6
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #6
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #6
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #6
  %20 = shl i64 %0, 3
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #6
  ret i64 %21
}

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #2

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #2

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12VectorBufferIPKN5blink11CSSPropertyELj8ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS4_(%"class.WTF::VectorBuffer"*, %"class.blink::CSSProperty"**) local_unnamed_addr #5 comdat align 2 {
  %3 = bitcast %"class.blink::CSSProperty"** %1 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %3) #6
  ret void
}

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 2000}
!4 = !{!"branch_weights", i32 2000, i32 1}
