; ModuleID = '../../third_party/libjpeg_turbo/jcsample.c'
source_filename = "../../third_party/libjpeg_turbo/jcsample.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.jpeg_compress_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32, %struct.jpeg_destination_mgr*, i32, i32, i32, i32, double, i32, i32, i32, %struct.jpeg_component_info*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], [16 x i8], [16 x i8], [16 x i8], i32, %struct.jpeg_scan_info*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, i16, i16, i32, i32, i32, i32, i32, i32, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, %struct.jpeg_comp_master*, %struct.jpeg_c_main_controller*, %struct.jpeg_c_prep_controller*, %struct.jpeg_c_coef_controller*, %struct.jpeg_marker_writer*, %struct.jpeg_color_converter*, %struct.jpeg_downsampler*, %struct.jpeg_forward_dct*, %struct.jpeg_entropy_encoder*, %struct.jpeg_scan_info*, i32 }
%struct.jpeg_error_mgr = type { void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*)*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_common_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.jpeg_memory_mgr = type { i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct*, i32)*, {}*, i64, i64 }
%struct.jvirt_sarray_control = type opaque
%struct.jvirt_barray_control = type opaque
%struct.jpeg_progress_mgr = type { {}*, i64, i64, i32, i32 }
%struct.jpeg_destination_mgr = type { i8*, i64, {}*, i32 (%struct.jpeg_compress_struct*)*, {}* }
%struct.jpeg_component_info = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.JQUANT_TBL*, i8* }
%struct.JQUANT_TBL = type { [64 x i16], i32 }
%struct.JHUFF_TBL = type { [17 x i8], [256 x i8], i32 }
%struct.jpeg_comp_master = type { {}*, {}*, {}*, i32, i32 }
%struct.jpeg_c_main_controller = type { void (%struct.jpeg_compress_struct*, i32)*, void (%struct.jpeg_compress_struct*, i8**, i32*, i32)* }
%struct.jpeg_c_prep_controller = type { void (%struct.jpeg_compress_struct*, i32)*, void (%struct.jpeg_compress_struct*, i8**, i32*, i32, i8***, i32*, i32)* }
%struct.jpeg_c_coef_controller = type { void (%struct.jpeg_compress_struct*, i32)*, i32 (%struct.jpeg_compress_struct*, i8***)* }
%struct.jpeg_marker_writer = type { {}*, {}*, {}*, {}*, {}*, void (%struct.jpeg_compress_struct*, i32, i32)*, void (%struct.jpeg_compress_struct*, i32)* }
%struct.jpeg_color_converter = type { {}*, void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)* }
%struct.jpeg_downsampler = type { {}*, void (%struct.jpeg_compress_struct*, i8***, i32, i8***, i32)*, i32 }
%struct.jpeg_forward_dct = type { {}*, void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, [64 x i16]*, i32, i32, i32)* }
%struct.jpeg_entropy_encoder = type { void (%struct.jpeg_compress_struct*, i32)*, i32 (%struct.jpeg_compress_struct*, [64 x i16]**)*, {}* }
%struct.jpeg_scan_info = type { i32, [4 x i32], i32, i32, i32, i32 }
%struct.my_downsampler = type { %struct.jpeg_downsampler, [10 x void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)*] }

; Function Attrs: nounwind ssp uwtable
define hidden void @jinit_downsampler(%struct.jpeg_compress_struct*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 1
  %3 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %2, align 8
  %4 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %3, i64 0, i32 0
  %5 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %4, align 8
  %6 = bitcast %struct.jpeg_compress_struct* %0 to %struct.jpeg_common_struct*
  %7 = tail call i8* %5(%struct.jpeg_common_struct* %6, i32 1, i64 104) #4
  %8 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 60
  %9 = bitcast %struct.jpeg_downsampler** %8 to i8**
  store i8* %7, i8** %9, align 8
  %10 = bitcast i8* %7 to void (%struct.jpeg_compress_struct*)**
  store void (%struct.jpeg_compress_struct*)* @start_pass_downsample, void (%struct.jpeg_compress_struct*)** %10, align 8
  %11 = getelementptr inbounds i8, i8* %7, i64 8
  %12 = bitcast i8* %11 to void (%struct.jpeg_compress_struct*, i8***, i32, i8***, i32)**
  store void (%struct.jpeg_compress_struct*, i8***, i32, i8***, i32)* @sep_downsample, void (%struct.jpeg_compress_struct*, i8***, i32, i8***, i32)** %12, align 8
  %13 = getelementptr inbounds i8, i8* %7, i64 16
  %14 = bitcast i8* %13 to i32*
  store i32 0, i32* %14, align 8
  %15 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 27
  %16 = load i32, i32* %15, align 4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %25, label %18

18:                                               ; preds = %1
  %19 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 0
  %20 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %19, align 8
  %21 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %20, i64 0, i32 5
  store i32 25, i32* %21, align 8
  %22 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %19, align 8
  %23 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %22, i64 0, i32 0
  %24 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %23, align 8
  tail call void %24(%struct.jpeg_common_struct* %6) #4
  br label %25

25:                                               ; preds = %1, %18
  %26 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 13
  %27 = load i32, i32* %26, align 4
  %28 = icmp sgt i32 %27, 0
  br i1 %28, label %29, label %122

29:                                               ; preds = %25
  %30 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 15
  %31 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %30, align 8
  %32 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 41
  %33 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 42
  %34 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 0
  %35 = getelementptr inbounds i8, i8* %7, i64 24
  %36 = bitcast i8* %35 to [10 x void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)*]*
  %37 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 28
  br label %38

38:                                               ; preds = %29, %102
  %39 = phi i64 [ 0, %29 ], [ %104, %102 ]
  %40 = phi i32 [ 1, %29 ], [ %103, %102 ]
  %41 = phi %struct.jpeg_component_info* [ %31, %29 ], [ %105, %102 ]
  %42 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %41, i64 0, i32 2
  %43 = load i32, i32* %42, align 8
  %44 = load i32, i32* %32, align 8
  %45 = icmp eq i32 %43, %44
  br i1 %45, label %46, label %57

46:                                               ; preds = %38
  %47 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %41, i64 0, i32 3
  %48 = load i32, i32* %47, align 4
  %49 = load i32, i32* %33, align 4
  %50 = icmp eq i32 %48, %49
  br i1 %50, label %51, label %57

51:                                               ; preds = %46
  %52 = load i32, i32* %37, align 8
  %53 = icmp eq i32 %52, 0
  %54 = getelementptr inbounds [10 x void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)*], [10 x void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)*]* %36, i64 0, i64 %39
  br i1 %53, label %56, label %55

55:                                               ; preds = %51
  store void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)* @fullsize_smooth_downsample, void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)** %54, align 8
  store i32 1, i32* %14, align 8
  br label %102

56:                                               ; preds = %51
  store void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)* @fullsize_downsample, void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)** %54, align 8
  br label %102

57:                                               ; preds = %46, %38
  %58 = shl nsw i32 %43, 1
  %59 = icmp eq i32 %58, %44
  br i1 %59, label %60, label %85

60:                                               ; preds = %57
  %61 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %41, i64 0, i32 3
  %62 = load i32, i32* %61, align 4
  %63 = load i32, i32* %33, align 4
  %64 = icmp eq i32 %62, %63
  br i1 %64, label %65, label %71

65:                                               ; preds = %60
  %66 = tail call i32 @jsimd_can_h2v1_downsample() #4
  %67 = icmp eq i32 %66, 0
  %68 = getelementptr inbounds [10 x void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)*], [10 x void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)*]* %36, i64 0, i64 %39
  br i1 %67, label %70, label %69

69:                                               ; preds = %65
  store void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)* @jsimd_h2v1_downsample, void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)** %68, align 8
  br label %102

70:                                               ; preds = %65
  store void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)* @h2v1_downsample, void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)** %68, align 8
  br label %102

71:                                               ; preds = %60
  %72 = shl nsw i32 %62, 1
  %73 = icmp eq i32 %72, %63
  br i1 %73, label %74, label %85

74:                                               ; preds = %71
  %75 = load i32, i32* %37, align 8
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = getelementptr inbounds [10 x void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)*], [10 x void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)*]* %36, i64 0, i64 %39
  store void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)* @h2v2_smooth_downsample, void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)** %78, align 8
  store i32 1, i32* %14, align 8
  br label %102

79:                                               ; preds = %74
  %80 = tail call i32 @jsimd_can_h2v2_downsample() #4
  %81 = icmp eq i32 %80, 0
  %82 = getelementptr inbounds [10 x void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)*], [10 x void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)*]* %36, i64 0, i64 %39
  br i1 %81, label %84, label %83

83:                                               ; preds = %79
  store void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)* @jsimd_h2v2_downsample, void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)** %82, align 8
  br label %102

84:                                               ; preds = %79
  store void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)* @h2v2_downsample, void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)** %82, align 8
  br label %102

85:                                               ; preds = %57, %71
  %86 = srem i32 %44, %43
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %88, label %96

88:                                               ; preds = %85
  %89 = load i32, i32* %33, align 4
  %90 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %41, i64 0, i32 3
  %91 = load i32, i32* %90, align 4
  %92 = srem i32 %89, %91
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %94, label %96

94:                                               ; preds = %88
  %95 = getelementptr inbounds [10 x void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)*], [10 x void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)*]* %36, i64 0, i64 %39
  store void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)* @int_downsample, void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)** %95, align 8
  br label %102

96:                                               ; preds = %88, %85
  %97 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %34, align 8
  %98 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %97, i64 0, i32 5
  store i32 38, i32* %98, align 8
  %99 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %34, align 8
  %100 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %99, i64 0, i32 0
  %101 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %100, align 8
  tail call void %101(%struct.jpeg_common_struct* %6) #4
  br label %102

102:                                              ; preds = %56, %55, %83, %84, %77, %96, %94, %69, %70
  %103 = phi i32 [ %40, %55 ], [ %40, %56 ], [ 0, %69 ], [ 0, %70 ], [ %40, %77 ], [ %40, %83 ], [ %40, %84 ], [ 0, %94 ], [ %40, %96 ]
  %104 = add nuw nsw i64 %39, 1
  %105 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %41, i64 1
  %106 = load i32, i32* %26, align 4
  %107 = sext i32 %106 to i64
  %108 = icmp slt i64 %104, %107
  br i1 %108, label %38, label %109

109:                                              ; preds = %102
  %110 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 28
  %111 = load i32, i32* %110, align 8
  %112 = icmp eq i32 %111, 0
  %113 = icmp ne i32 %103, 0
  %114 = or i1 %113, %112
  br i1 %114, label %122, label %115

115:                                              ; preds = %109
  %116 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 0
  %117 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %116, align 8
  %118 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %117, i64 0, i32 5
  store i32 99, i32* %118, align 8
  %119 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %116, align 8
  %120 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %119, i64 0, i32 1
  %121 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %120, align 8
  tail call void %121(%struct.jpeg_common_struct* %6, i32 0) #4
  br label %122

122:                                              ; preds = %25, %109, %115
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal void @start_pass_downsample(%struct.jpeg_compress_struct* nocapture) #1 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @sep_downsample(%struct.jpeg_compress_struct*, i8*** nocapture readonly, i32, i8*** nocapture readonly, i32) #0 {
  %6 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 60
  %7 = bitcast %struct.jpeg_downsampler** %6 to %struct.my_downsampler**
  %8 = load %struct.my_downsampler*, %struct.my_downsampler** %7, align 8
  %9 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 13
  %10 = load i32, i32* %9, align 4
  %11 = icmp sgt i32 %10, 0
  br i1 %11, label %12, label %36

12:                                               ; preds = %5
  %13 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 15
  %14 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %13, align 8
  %15 = zext i32 %2 to i64
  br label %16

16:                                               ; preds = %12, %16
  %17 = phi i64 [ 0, %12 ], [ %31, %16 ]
  %18 = phi %struct.jpeg_component_info* [ %14, %12 ], [ %32, %16 ]
  %19 = getelementptr inbounds i8**, i8*** %1, i64 %17
  %20 = load i8**, i8*** %19, align 8
  %21 = getelementptr inbounds i8*, i8** %20, i64 %15
  %22 = getelementptr inbounds i8**, i8*** %3, i64 %17
  %23 = load i8**, i8*** %22, align 8
  %24 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %18, i64 0, i32 3
  %25 = load i32, i32* %24, align 4
  %26 = mul i32 %25, %4
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds i8*, i8** %23, i64 %27
  %29 = getelementptr inbounds %struct.my_downsampler, %struct.my_downsampler* %8, i64 0, i32 1, i64 %17
  %30 = load void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)*, void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)** %29, align 8
  tail call void %30(%struct.jpeg_compress_struct* %0, %struct.jpeg_component_info* %18, i8** %21, i8** %28) #4
  %31 = add nuw nsw i64 %17, 1
  %32 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %18, i64 1
  %33 = load i32, i32* %9, align 4
  %34 = sext i32 %33 to i64
  %35 = icmp slt i64 %31, %34
  br i1 %35, label %16, label %36

36:                                               ; preds = %16, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @fullsize_smooth_downsample(%struct.jpeg_compress_struct* nocapture readonly, %struct.jpeg_component_info* nocapture readonly, i8** nocapture readonly, i8** nocapture readonly) #0 {
  %5 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %1, i64 0, i32 7
  %6 = load i32, i32* %5, align 4
  %7 = shl i32 %6, 3
  %8 = getelementptr inbounds i8*, i8** %2, i64 -1
  %9 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 42
  %10 = load i32, i32* %9, align 4
  %11 = add nsw i32 %10, 2
  %12 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 7
  %13 = load i32, i32* %12, align 8
  %14 = sub i32 %7, %13
  %15 = icmp sgt i32 %14, 0
  %16 = icmp sgt i32 %11, 0
  %17 = and i1 %16, %15
  br i1 %17, label %18, label %72

18:                                               ; preds = %4
  %19 = zext i32 %13 to i64
  %20 = xor i32 %13, -1
  %21 = add i32 %7, %20
  %22 = zext i32 %21 to i64
  %23 = add nuw nsw i64 %22, 1
  %24 = zext i32 %11 to i64
  %25 = add nsw i64 %24, -1
  %26 = and i64 %24, 3
  %27 = icmp ult i64 %25, 3
  br i1 %27, label %58, label %28

28:                                               ; preds = %18
  %29 = sub nsw i64 %24, %26
  br label %30

30:                                               ; preds = %30, %28
  %31 = phi i64 [ 0, %28 ], [ %55, %30 ]
  %32 = phi i64 [ %29, %28 ], [ %56, %30 ]
  %33 = getelementptr inbounds i8*, i8** %8, i64 %31
  %34 = load i8*, i8** %33, align 8
  %35 = getelementptr inbounds i8, i8* %34, i64 %19
  %36 = getelementptr inbounds i8, i8* %35, i64 -1
  %37 = load i8, i8* %36, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 %37, i64 %23, i1 false) #4
  %38 = getelementptr inbounds i8*, i8** %2, i64 %31
  %39 = load i8*, i8** %38, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 %19
  %41 = getelementptr inbounds i8, i8* %40, i64 -1
  %42 = load i8, i8* %41, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %40, i8 %42, i64 %23, i1 false) #4
  %43 = or i64 %31, 2
  %44 = getelementptr inbounds i8*, i8** %8, i64 %43
  %45 = load i8*, i8** %44, align 8
  %46 = getelementptr inbounds i8, i8* %45, i64 %19
  %47 = getelementptr inbounds i8, i8* %46, i64 -1
  %48 = load i8, i8* %47, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %46, i8 %48, i64 %23, i1 false) #4
  %49 = or i64 %31, 3
  %50 = getelementptr inbounds i8*, i8** %8, i64 %49
  %51 = load i8*, i8** %50, align 8
  %52 = getelementptr inbounds i8, i8* %51, i64 %19
  %53 = getelementptr inbounds i8, i8* %52, i64 -1
  %54 = load i8, i8* %53, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %52, i8 %54, i64 %23, i1 false) #4
  %55 = add nuw nsw i64 %31, 4
  %56 = add i64 %32, -4
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %58, label %30

58:                                               ; preds = %30, %18
  %59 = phi i64 [ 0, %18 ], [ %55, %30 ]
  %60 = icmp eq i64 %26, 0
  br i1 %60, label %72, label %61

61:                                               ; preds = %58, %61
  %62 = phi i64 [ %69, %61 ], [ %59, %58 ]
  %63 = phi i64 [ %70, %61 ], [ %26, %58 ]
  %64 = getelementptr inbounds i8*, i8** %8, i64 %62
  %65 = load i8*, i8** %64, align 8
  %66 = getelementptr inbounds i8, i8* %65, i64 %19
  %67 = getelementptr inbounds i8, i8* %66, i64 -1
  %68 = load i8, i8* %67, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %66, i8 %68, i64 %23, i1 false) #4
  %69 = add nuw nsw i64 %62, 1
  %70 = add i64 %63, -1
  %71 = icmp eq i64 %70, 0
  br i1 %71, label %72, label %61, !llvm.loop !2

72:                                               ; preds = %58, %61, %4
  %73 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 28
  %74 = load i32, i32* %73, align 8
  %75 = sext i32 %74 to i64
  %76 = shl nsw i64 %75, 9
  %77 = sub nsw i64 65536, %76
  %78 = shl nsw i32 %74, 6
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %1, i64 0, i32 3
  %81 = load i32, i32* %80, align 4
  %82 = icmp sgt i32 %81, 0
  br i1 %82, label %83, label %181

83:                                               ; preds = %72
  %84 = add i32 %7, -2
  br label %85

85:                                               ; preds = %83, %164
  %86 = phi i64 [ 0, %83 ], [ %94, %164 ]
  %87 = getelementptr inbounds i8*, i8** %3, i64 %86
  %88 = load i8*, i8** %87, align 8
  %89 = getelementptr inbounds i8*, i8** %2, i64 %86
  %90 = load i8*, i8** %89, align 8
  %91 = add nsw i64 %86, -1
  %92 = getelementptr inbounds i8*, i8** %2, i64 %91
  %93 = load i8*, i8** %92, align 8
  %94 = add nuw nsw i64 %86, 1
  %95 = getelementptr inbounds i8*, i8** %2, i64 %94
  %96 = load i8*, i8** %95, align 8
  %97 = getelementptr inbounds i8, i8* %93, i64 1
  %98 = load i8, i8* %93, align 1
  %99 = zext i8 %98 to i32
  %100 = getelementptr inbounds i8, i8* %96, i64 1
  %101 = load i8, i8* %96, align 1
  %102 = zext i8 %101 to i32
  %103 = add nuw nsw i32 %102, %99
  %104 = load i8, i8* %90, align 1
  %105 = zext i8 %104 to i32
  %106 = add nuw nsw i32 %103, %105
  %107 = getelementptr inbounds i8, i8* %90, i64 1
  %108 = zext i8 %104 to i64
  %109 = load i8, i8* %97, align 1
  %110 = zext i8 %109 to i32
  %111 = load i8, i8* %100, align 1
  %112 = zext i8 %111 to i32
  %113 = add nuw nsw i32 %112, %110
  %114 = load i8, i8* %107, align 1
  %115 = zext i8 %114 to i32
  %116 = add nuw nsw i32 %113, %115
  %117 = zext i32 %116 to i64
  %118 = shl nuw nsw i32 %106, 1
  %119 = zext i32 %118 to i64
  %120 = sub nsw i64 %119, %108
  %121 = add nsw i64 %120, %117
  %122 = mul nsw i64 %77, %108
  %123 = mul nsw i64 %121, %79
  %124 = add nsw i64 %122, 32768
  %125 = add i64 %124, %123
  %126 = lshr i64 %125, 16
  %127 = trunc i64 %126 to i8
  store i8 %127, i8* %88, align 1
  %128 = getelementptr inbounds i8, i8* %88, i64 1
  br label %129

129:                                              ; preds = %85, %129
  %130 = phi i8* [ %128, %85 ], [ %162, %129 ]
  %131 = phi i32 [ %106, %85 ], [ %132, %129 ]
  %132 = phi i32 [ %116, %85 ], [ %149, %129 ]
  %133 = phi i8* [ %100, %85 ], [ %141, %129 ]
  %134 = phi i8* [ %97, %85 ], [ %140, %129 ]
  %135 = phi i8* [ %107, %85 ], [ %137, %129 ]
  %136 = phi i32 [ %84, %85 ], [ %161, %129 ]
  %137 = getelementptr inbounds i8, i8* %135, i64 1
  %138 = load i8, i8* %135, align 1
  %139 = zext i8 %138 to i64
  %140 = getelementptr inbounds i8, i8* %134, i64 1
  %141 = getelementptr inbounds i8, i8* %133, i64 1
  %142 = load i8, i8* %140, align 1
  %143 = zext i8 %142 to i32
  %144 = load i8, i8* %141, align 1
  %145 = zext i8 %144 to i32
  %146 = add nuw nsw i32 %145, %143
  %147 = load i8, i8* %137, align 1
  %148 = zext i8 %147 to i32
  %149 = add nuw nsw i32 %146, %148
  %150 = zext i32 %149 to i64
  %151 = add nuw nsw i32 %131, %132
  %152 = sext i32 %151 to i64
  %153 = sub nsw i64 %152, %139
  %154 = add nsw i64 %153, %150
  %155 = mul nsw i64 %77, %139
  %156 = mul nsw i64 %154, %79
  %157 = add nsw i64 %155, 32768
  %158 = add i64 %157, %156
  %159 = lshr i64 %158, 16
  %160 = trunc i64 %159 to i8
  store i8 %160, i8* %130, align 1
  %161 = add i32 %136, -1
  %162 = getelementptr inbounds i8, i8* %130, i64 1
  %163 = icmp eq i32 %161, 0
  br i1 %163, label %164, label %129

164:                                              ; preds = %129
  %165 = load i8, i8* %137, align 1
  %166 = zext i8 %165 to i64
  %167 = sext i32 %132 to i64
  %168 = shl nuw nsw i32 %149, 1
  %169 = zext i32 %168 to i64
  %170 = add nuw nsw i64 %169, %167
  %171 = sub nsw i64 %170, %166
  %172 = mul nsw i64 %77, %166
  %173 = mul nsw i64 %171, %79
  %174 = add nsw i64 %172, 32768
  %175 = add i64 %174, %173
  %176 = lshr i64 %175, 16
  %177 = trunc i64 %176 to i8
  store i8 %177, i8* %162, align 1
  %178 = load i32, i32* %80, align 4
  %179 = sext i32 %178 to i64
  %180 = icmp slt i64 %94, %179
  br i1 %180, label %85, label %181

181:                                              ; preds = %164, %72
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @fullsize_downsample(%struct.jpeg_compress_struct* nocapture readonly, %struct.jpeg_component_info* nocapture readonly, i8**, i8**) #0 {
  %5 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 42
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 7
  %8 = load i32, i32* %7, align 8
  tail call void @jcopy_sample_rows(i8** %2, i32 0, i8** %3, i32 0, i32 %6, i32 %8) #4
  %9 = load i32, i32* %5, align 4
  %10 = load i32, i32* %7, align 8
  %11 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %1, i64 0, i32 7
  %12 = load i32, i32* %11, align 4
  %13 = shl i32 %12, 3
  %14 = sub i32 %13, %10
  %15 = icmp sgt i32 %14, 0
  %16 = icmp sgt i32 %9, 0
  %17 = and i1 %16, %15
  br i1 %17, label %18, label %73

18:                                               ; preds = %4
  %19 = zext i32 %10 to i64
  %20 = xor i32 %10, -1
  %21 = add i32 %13, %20
  %22 = zext i32 %21 to i64
  %23 = add nuw nsw i64 %22, 1
  %24 = zext i32 %9 to i64
  %25 = add nsw i64 %24, -1
  %26 = and i64 %24, 3
  %27 = icmp ult i64 %25, 3
  br i1 %27, label %59, label %28

28:                                               ; preds = %18
  %29 = sub nsw i64 %24, %26
  br label %30

30:                                               ; preds = %30, %28
  %31 = phi i64 [ 0, %28 ], [ %56, %30 ]
  %32 = phi i64 [ %29, %28 ], [ %57, %30 ]
  %33 = getelementptr inbounds i8*, i8** %3, i64 %31
  %34 = load i8*, i8** %33, align 8
  %35 = getelementptr inbounds i8, i8* %34, i64 %19
  %36 = getelementptr inbounds i8, i8* %35, i64 -1
  %37 = load i8, i8* %36, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 %37, i64 %23, i1 false) #4
  %38 = or i64 %31, 1
  %39 = getelementptr inbounds i8*, i8** %3, i64 %38
  %40 = load i8*, i8** %39, align 8
  %41 = getelementptr inbounds i8, i8* %40, i64 %19
  %42 = getelementptr inbounds i8, i8* %41, i64 -1
  %43 = load i8, i8* %42, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %41, i8 %43, i64 %23, i1 false) #4
  %44 = or i64 %31, 2
  %45 = getelementptr inbounds i8*, i8** %3, i64 %44
  %46 = load i8*, i8** %45, align 8
  %47 = getelementptr inbounds i8, i8* %46, i64 %19
  %48 = getelementptr inbounds i8, i8* %47, i64 -1
  %49 = load i8, i8* %48, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %47, i8 %49, i64 %23, i1 false) #4
  %50 = or i64 %31, 3
  %51 = getelementptr inbounds i8*, i8** %3, i64 %50
  %52 = load i8*, i8** %51, align 8
  %53 = getelementptr inbounds i8, i8* %52, i64 %19
  %54 = getelementptr inbounds i8, i8* %53, i64 -1
  %55 = load i8, i8* %54, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %53, i8 %55, i64 %23, i1 false) #4
  %56 = add nuw nsw i64 %31, 4
  %57 = add i64 %32, -4
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %59, label %30

59:                                               ; preds = %30, %18
  %60 = phi i64 [ 0, %18 ], [ %56, %30 ]
  %61 = icmp eq i64 %26, 0
  br i1 %61, label %73, label %62

62:                                               ; preds = %59, %62
  %63 = phi i64 [ %70, %62 ], [ %60, %59 ]
  %64 = phi i64 [ %71, %62 ], [ %26, %59 ]
  %65 = getelementptr inbounds i8*, i8** %3, i64 %63
  %66 = load i8*, i8** %65, align 8
  %67 = getelementptr inbounds i8, i8* %66, i64 %19
  %68 = getelementptr inbounds i8, i8* %67, i64 -1
  %69 = load i8, i8* %68, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %67, i8 %69, i64 %23, i1 false) #4
  %70 = add nuw nsw i64 %63, 1
  %71 = add i64 %64, -1
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %73, label %62, !llvm.loop !4

73:                                               ; preds = %59, %62, %4
  ret void
}

declare i32 @jsimd_can_h2v1_downsample() local_unnamed_addr #2

declare void @jsimd_h2v1_downsample(%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**) #2

; Function Attrs: nounwind ssp uwtable
define internal void @h2v1_downsample(%struct.jpeg_compress_struct* nocapture readonly, %struct.jpeg_component_info* nocapture readonly, i8** nocapture readonly, i8** nocapture readonly) #0 {
  %5 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %1, i64 0, i32 7
  %6 = load i32, i32* %5, align 4
  %7 = shl i32 %6, 3
  %8 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 42
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 7
  %11 = load i32, i32* %10, align 8
  %12 = shl i32 %6, 4
  %13 = sub i32 %12, %11
  %14 = icmp sgt i32 %13, 0
  %15 = icmp sgt i32 %9, 0
  %16 = and i1 %15, %14
  br i1 %16, label %17, label %72

17:                                               ; preds = %4
  %18 = zext i32 %11 to i64
  %19 = xor i32 %11, -1
  %20 = add i32 %12, %19
  %21 = zext i32 %20 to i64
  %22 = add nuw nsw i64 %21, 1
  %23 = zext i32 %9 to i64
  %24 = add nsw i64 %23, -1
  %25 = and i64 %23, 3
  %26 = icmp ult i64 %24, 3
  br i1 %26, label %58, label %27

27:                                               ; preds = %17
  %28 = sub nsw i64 %23, %25
  br label %29

29:                                               ; preds = %29, %27
  %30 = phi i64 [ 0, %27 ], [ %55, %29 ]
  %31 = phi i64 [ %28, %27 ], [ %56, %29 ]
  %32 = getelementptr inbounds i8*, i8** %2, i64 %30
  %33 = load i8*, i8** %32, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 %18
  %35 = getelementptr inbounds i8, i8* %34, i64 -1
  %36 = load i8, i8* %35, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %34, i8 %36, i64 %22, i1 false) #4
  %37 = or i64 %30, 1
  %38 = getelementptr inbounds i8*, i8** %2, i64 %37
  %39 = load i8*, i8** %38, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 %18
  %41 = getelementptr inbounds i8, i8* %40, i64 -1
  %42 = load i8, i8* %41, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %40, i8 %42, i64 %22, i1 false) #4
  %43 = or i64 %30, 2
  %44 = getelementptr inbounds i8*, i8** %2, i64 %43
  %45 = load i8*, i8** %44, align 8
  %46 = getelementptr inbounds i8, i8* %45, i64 %18
  %47 = getelementptr inbounds i8, i8* %46, i64 -1
  %48 = load i8, i8* %47, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %46, i8 %48, i64 %22, i1 false) #4
  %49 = or i64 %30, 3
  %50 = getelementptr inbounds i8*, i8** %2, i64 %49
  %51 = load i8*, i8** %50, align 8
  %52 = getelementptr inbounds i8, i8* %51, i64 %18
  %53 = getelementptr inbounds i8, i8* %52, i64 -1
  %54 = load i8, i8* %53, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %52, i8 %54, i64 %22, i1 false) #4
  %55 = add nuw nsw i64 %30, 4
  %56 = add i64 %31, -4
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %58, label %29

58:                                               ; preds = %29, %17
  %59 = phi i64 [ 0, %17 ], [ %55, %29 ]
  %60 = icmp eq i64 %25, 0
  br i1 %60, label %72, label %61

61:                                               ; preds = %58, %61
  %62 = phi i64 [ %69, %61 ], [ %59, %58 ]
  %63 = phi i64 [ %70, %61 ], [ %25, %58 ]
  %64 = getelementptr inbounds i8*, i8** %2, i64 %62
  %65 = load i8*, i8** %64, align 8
  %66 = getelementptr inbounds i8, i8* %65, i64 %18
  %67 = getelementptr inbounds i8, i8* %66, i64 -1
  %68 = load i8, i8* %67, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %66, i8 %68, i64 %22, i1 false) #4
  %69 = add nuw nsw i64 %62, 1
  %70 = add i64 %63, -1
  %71 = icmp eq i64 %70, 0
  br i1 %71, label %72, label %61, !llvm.loop !5

72:                                               ; preds = %58, %61, %4
  %73 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %1, i64 0, i32 3
  %74 = load i32, i32* %73, align 4
  %75 = icmp sgt i32 %74, 0
  br i1 %75, label %76, label %120

76:                                               ; preds = %72
  %77 = icmp eq i32 %7, 0
  br label %78

78:                                               ; preds = %76, %115
  %79 = phi i32 [ %74, %76 ], [ %116, %115 ]
  %80 = phi i64 [ 0, %76 ], [ %117, %115 ]
  br i1 %77, label %115, label %81

81:                                               ; preds = %78
  %82 = getelementptr inbounds i8*, i8** %2, i64 %80
  %83 = load i8*, i8** %82, align 8
  %84 = getelementptr inbounds i8*, i8** %3, i64 %80
  %85 = load i8*, i8** %84, align 8
  br label %86

86:                                               ; preds = %86, %81
  %87 = phi i8* [ %85, %81 ], [ %109, %86 ]
  %88 = phi i8* [ %83, %81 ], [ %110, %86 ]
  %89 = phi i32 [ 0, %81 ], [ %111, %86 ]
  %90 = load i8, i8* %88, align 1
  %91 = zext i8 %90 to i32
  %92 = getelementptr inbounds i8, i8* %88, i64 1
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i32
  %95 = add nuw nsw i32 %91, %94
  %96 = lshr i32 %95, 1
  %97 = trunc i32 %96 to i8
  %98 = getelementptr inbounds i8, i8* %87, i64 1
  store i8 %97, i8* %87, align 1
  %99 = getelementptr inbounds i8, i8* %88, i64 2
  %100 = load i8, i8* %99, align 1
  %101 = zext i8 %100 to i32
  %102 = getelementptr inbounds i8, i8* %88, i64 3
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i32
  %105 = add nuw nsw i32 %101, 1
  %106 = add nuw nsw i32 %105, %104
  %107 = lshr i32 %106, 1
  %108 = trunc i32 %107 to i8
  %109 = getelementptr inbounds i8, i8* %87, i64 2
  store i8 %108, i8* %98, align 1
  %110 = getelementptr inbounds i8, i8* %88, i64 4
  %111 = add nuw i32 %89, 2
  %112 = icmp eq i32 %111, %7
  br i1 %112, label %113, label %86

113:                                              ; preds = %86
  %114 = load i32, i32* %73, align 4
  br label %115

115:                                              ; preds = %113, %78
  %116 = phi i32 [ %114, %113 ], [ %79, %78 ]
  %117 = add nuw nsw i64 %80, 1
  %118 = sext i32 %116 to i64
  %119 = icmp slt i64 %117, %118
  br i1 %119, label %78, label %120

120:                                              ; preds = %115, %72
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @h2v2_smooth_downsample(%struct.jpeg_compress_struct* nocapture readonly, %struct.jpeg_component_info* nocapture readonly, i8** nocapture readonly, i8** nocapture readonly) #0 {
  %5 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %1, i64 0, i32 7
  %6 = load i32, i32* %5, align 4
  %7 = shl i32 %6, 3
  %8 = getelementptr inbounds i8*, i8** %2, i64 -1
  %9 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 42
  %10 = load i32, i32* %9, align 4
  %11 = add nsw i32 %10, 2
  %12 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 7
  %13 = load i32, i32* %12, align 8
  %14 = shl i32 %6, 4
  %15 = sub i32 %14, %13
  %16 = icmp sgt i32 %15, 0
  %17 = icmp sgt i32 %11, 0
  %18 = and i1 %17, %16
  br i1 %18, label %19, label %73

19:                                               ; preds = %4
  %20 = zext i32 %13 to i64
  %21 = xor i32 %13, -1
  %22 = add i32 %14, %21
  %23 = zext i32 %22 to i64
  %24 = add nuw nsw i64 %23, 1
  %25 = zext i32 %11 to i64
  %26 = add nsw i64 %25, -1
  %27 = and i64 %25, 3
  %28 = icmp ult i64 %26, 3
  br i1 %28, label %59, label %29

29:                                               ; preds = %19
  %30 = sub nsw i64 %25, %27
  br label %31

31:                                               ; preds = %31, %29
  %32 = phi i64 [ 0, %29 ], [ %56, %31 ]
  %33 = phi i64 [ %30, %29 ], [ %57, %31 ]
  %34 = getelementptr inbounds i8*, i8** %8, i64 %32
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds i8, i8* %35, i64 %20
  %37 = getelementptr inbounds i8, i8* %36, i64 -1
  %38 = load i8, i8* %37, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %36, i8 %38, i64 %24, i1 false) #4
  %39 = getelementptr inbounds i8*, i8** %2, i64 %32
  %40 = load i8*, i8** %39, align 8
  %41 = getelementptr inbounds i8, i8* %40, i64 %20
  %42 = getelementptr inbounds i8, i8* %41, i64 -1
  %43 = load i8, i8* %42, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %41, i8 %43, i64 %24, i1 false) #4
  %44 = or i64 %32, 2
  %45 = getelementptr inbounds i8*, i8** %8, i64 %44
  %46 = load i8*, i8** %45, align 8
  %47 = getelementptr inbounds i8, i8* %46, i64 %20
  %48 = getelementptr inbounds i8, i8* %47, i64 -1
  %49 = load i8, i8* %48, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %47, i8 %49, i64 %24, i1 false) #4
  %50 = or i64 %32, 3
  %51 = getelementptr inbounds i8*, i8** %8, i64 %50
  %52 = load i8*, i8** %51, align 8
  %53 = getelementptr inbounds i8, i8* %52, i64 %20
  %54 = getelementptr inbounds i8, i8* %53, i64 -1
  %55 = load i8, i8* %54, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %53, i8 %55, i64 %24, i1 false) #4
  %56 = add nuw nsw i64 %32, 4
  %57 = add i64 %33, -4
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %59, label %31

59:                                               ; preds = %31, %19
  %60 = phi i64 [ 0, %19 ], [ %56, %31 ]
  %61 = icmp eq i64 %27, 0
  br i1 %61, label %73, label %62

62:                                               ; preds = %59, %62
  %63 = phi i64 [ %70, %62 ], [ %60, %59 ]
  %64 = phi i64 [ %71, %62 ], [ %27, %59 ]
  %65 = getelementptr inbounds i8*, i8** %8, i64 %63
  %66 = load i8*, i8** %65, align 8
  %67 = getelementptr inbounds i8, i8* %66, i64 %20
  %68 = getelementptr inbounds i8, i8* %67, i64 -1
  %69 = load i8, i8* %68, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %67, i8 %69, i64 %24, i1 false) #4
  %70 = add nuw nsw i64 %63, 1
  %71 = add i64 %64, -1
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %73, label %62, !llvm.loop !6

73:                                               ; preds = %59, %62, %4
  %74 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 28
  %75 = load i32, i32* %74, align 8
  %76 = mul i32 %75, -80
  %77 = add i32 %76, 16384
  %78 = sext i32 %77 to i64
  %79 = shl nsw i32 %75, 4
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %1, i64 0, i32 3
  %82 = load i32, i32* %81, align 4
  %83 = icmp sgt i32 %82, 0
  br i1 %83, label %84, label %267

84:                                               ; preds = %73
  %85 = add i32 %7, -2
  br label %86

86:                                               ; preds = %84, %236
  %87 = phi i64 [ 0, %84 ], [ %99, %236 ]
  %88 = phi i64 [ 0, %84 ], [ %263, %236 ]
  %89 = getelementptr inbounds i8*, i8** %3, i64 %88
  %90 = load i8*, i8** %89, align 8
  %91 = getelementptr inbounds i8*, i8** %2, i64 %87
  %92 = load i8*, i8** %91, align 8
  %93 = or i64 %87, 1
  %94 = getelementptr inbounds i8*, i8** %2, i64 %93
  %95 = load i8*, i8** %94, align 8
  %96 = add nsw i64 %87, -1
  %97 = getelementptr inbounds i8*, i8** %2, i64 %96
  %98 = load i8*, i8** %97, align 8
  %99 = add nuw nsw i64 %87, 2
  %100 = and i64 %99, 4294967294
  %101 = getelementptr inbounds i8*, i8** %2, i64 %100
  %102 = load i8*, i8** %101, align 8
  %103 = load i8, i8* %92, align 1
  %104 = zext i8 %103 to i32
  %105 = getelementptr inbounds i8, i8* %92, i64 1
  %106 = load i8, i8* %105, align 1
  %107 = zext i8 %106 to i32
  %108 = load i8, i8* %95, align 1
  %109 = zext i8 %108 to i32
  %110 = getelementptr inbounds i8, i8* %95, i64 1
  %111 = load i8, i8* %110, align 1
  %112 = zext i8 %111 to i32
  %113 = add nuw nsw i32 %109, %104
  %114 = add nuw nsw i32 %113, %107
  %115 = add nuw nsw i32 %114, %112
  %116 = zext i32 %115 to i64
  %117 = load i8, i8* %98, align 1
  %118 = zext i8 %117 to i32
  %119 = getelementptr inbounds i8, i8* %98, i64 1
  %120 = load i8, i8* %119, align 1
  %121 = zext i8 %120 to i32
  %122 = load i8, i8* %102, align 1
  %123 = zext i8 %122 to i32
  %124 = getelementptr inbounds i8, i8* %102, i64 1
  %125 = load i8, i8* %124, align 1
  %126 = zext i8 %125 to i32
  %127 = getelementptr inbounds i8, i8* %92, i64 2
  %128 = load i8, i8* %127, align 1
  %129 = zext i8 %128 to i32
  %130 = getelementptr inbounds i8, i8* %95, i64 2
  %131 = load i8, i8* %130, align 1
  %132 = zext i8 %131 to i32
  %133 = add nuw nsw i32 %113, %118
  %134 = add nuw nsw i32 %133, %121
  %135 = add nuw nsw i32 %134, %123
  %136 = add nuw nsw i32 %135, %126
  %137 = add nuw nsw i32 %136, %129
  %138 = add nuw nsw i32 %137, %132
  %139 = sext i32 %138 to i64
  %140 = shl nsw i64 %139, 1
  %141 = getelementptr inbounds i8, i8* %98, i64 2
  %142 = load i8, i8* %141, align 1
  %143 = zext i8 %142 to i32
  %144 = getelementptr inbounds i8, i8* %102, i64 2
  %145 = load i8, i8* %144, align 1
  %146 = zext i8 %145 to i32
  %147 = add nuw nsw i32 %123, %118
  %148 = add nuw nsw i32 %147, %143
  %149 = add nuw nsw i32 %148, %146
  %150 = zext i32 %149 to i64
  %151 = add nuw nsw i64 %140, %150
  %152 = mul nsw i64 %116, %78
  %153 = mul nsw i64 %151, %80
  %154 = add nsw i64 %152, 32768
  %155 = add i64 %154, %153
  %156 = lshr i64 %155, 16
  %157 = trunc i64 %156 to i8
  store i8 %157, i8* %90, align 1
  br label %158

158:                                              ; preds = %198, %86
  %159 = phi i32 [ %85, %86 ], [ %235, %198 ]
  %160 = phi i8* [ %127, %86 ], [ %199, %198 ]
  %161 = phi i8* [ %130, %86 ], [ %207, %198 ]
  %162 = phi i8* [ %141, %86 ], [ %216, %198 ]
  %163 = phi i8* [ %144, %86 ], [ %224, %198 ]
  %164 = phi i8* [ %90, %86 ], [ %165, %198 ]
  %165 = getelementptr inbounds i8, i8* %164, i64 1
  %166 = icmp eq i32 %159, 0
  %167 = load i8, i8* %160, align 1
  %168 = zext i8 %167 to i32
  %169 = getelementptr inbounds i8, i8* %160, i64 1
  %170 = load i8, i8* %169, align 1
  %171 = zext i8 %170 to i32
  %172 = load i8, i8* %161, align 1
  %173 = zext i8 %172 to i32
  %174 = getelementptr inbounds i8, i8* %161, i64 1
  %175 = load i8, i8* %174, align 1
  %176 = zext i8 %175 to i32
  %177 = add nuw nsw i32 %176, %171
  %178 = add nuw nsw i32 %177, %168
  %179 = add nuw nsw i32 %178, %173
  %180 = load i8, i8* %162, align 1
  %181 = zext i8 %180 to i32
  %182 = getelementptr inbounds i8, i8* %162, i64 1
  %183 = load i8, i8* %182, align 1
  %184 = zext i8 %183 to i32
  %185 = load i8, i8* %163, align 1
  %186 = zext i8 %185 to i32
  %187 = getelementptr inbounds i8, i8* %163, i64 1
  %188 = load i8, i8* %187, align 1
  %189 = zext i8 %188 to i32
  %190 = getelementptr inbounds i8, i8* %160, i64 -1
  %191 = load i8, i8* %190, align 1
  %192 = zext i8 %191 to i32
  %193 = add nuw nsw i32 %189, %184
  %194 = add nuw nsw i32 %193, %181
  %195 = add nuw nsw i32 %194, %186
  %196 = add nuw nsw i32 %195, %192
  %197 = zext i32 %179 to i64
  br i1 %166, label %236, label %198

198:                                              ; preds = %158
  %199 = getelementptr inbounds i8, i8* %160, i64 2
  %200 = load i8, i8* %199, align 1
  %201 = zext i8 %200 to i32
  %202 = add nuw nsw i32 %196, %201
  %203 = getelementptr inbounds i8, i8* %161, i64 -1
  %204 = load i8, i8* %203, align 1
  %205 = zext i8 %204 to i32
  %206 = add nuw nsw i32 %202, %205
  %207 = getelementptr inbounds i8, i8* %161, i64 2
  %208 = load i8, i8* %207, align 1
  %209 = zext i8 %208 to i32
  %210 = add nuw nsw i32 %206, %209
  %211 = sext i32 %210 to i64
  %212 = shl nsw i64 %211, 1
  %213 = getelementptr inbounds i8, i8* %162, i64 -1
  %214 = load i8, i8* %213, align 1
  %215 = zext i8 %214 to i64
  %216 = getelementptr inbounds i8, i8* %162, i64 2
  %217 = load i8, i8* %216, align 1
  %218 = zext i8 %217 to i64
  %219 = add nuw nsw i64 %218, %215
  %220 = getelementptr inbounds i8, i8* %163, i64 -1
  %221 = load i8, i8* %220, align 1
  %222 = zext i8 %221 to i64
  %223 = add nuw nsw i64 %219, %222
  %224 = getelementptr inbounds i8, i8* %163, i64 2
  %225 = load i8, i8* %224, align 1
  %226 = zext i8 %225 to i64
  %227 = add nuw nsw i64 %223, %212
  %228 = add nuw nsw i64 %227, %226
  %229 = mul nsw i64 %197, %78
  %230 = mul nsw i64 %228, %80
  %231 = add nsw i64 %229, 32768
  %232 = add i64 %231, %230
  %233 = lshr i64 %232, 16
  %234 = trunc i64 %233 to i8
  store i8 %234, i8* %165, align 1
  %235 = add i32 %159, -1
  br label %158

236:                                              ; preds = %158
  %237 = zext i32 %179 to i64
  %238 = zext i8 %183 to i64
  %239 = zext i8 %188 to i64
  %240 = getelementptr inbounds i8, i8* %161, i64 -1
  %241 = load i8, i8* %240, align 1
  %242 = zext i8 %241 to i32
  %243 = add nuw nsw i32 %177, %196
  %244 = add nuw nsw i32 %243, %242
  %245 = sext i32 %244 to i64
  %246 = shl nsw i64 %245, 1
  %247 = getelementptr inbounds i8, i8* %162, i64 -1
  %248 = load i8, i8* %247, align 1
  %249 = zext i8 %248 to i64
  %250 = getelementptr inbounds i8, i8* %163, i64 -1
  %251 = load i8, i8* %250, align 1
  %252 = zext i8 %251 to i64
  %253 = add nuw nsw i64 %239, %238
  %254 = add nuw nsw i64 %253, %249
  %255 = add nuw nsw i64 %254, %252
  %256 = add nuw nsw i64 %255, %246
  %257 = mul nsw i64 %237, %78
  %258 = mul nsw i64 %256, %80
  %259 = add nsw i64 %257, 32768
  %260 = add i64 %259, %258
  %261 = lshr i64 %260, 16
  %262 = trunc i64 %261 to i8
  store i8 %262, i8* %165, align 1
  %263 = add nuw nsw i64 %88, 1
  %264 = load i32, i32* %81, align 4
  %265 = sext i32 %264 to i64
  %266 = icmp slt i64 %263, %265
  br i1 %266, label %86, label %267

267:                                              ; preds = %236, %73
  ret void
}

declare i32 @jsimd_can_h2v2_downsample() local_unnamed_addr #2

declare void @jsimd_h2v2_downsample(%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**) #2

; Function Attrs: nounwind ssp uwtable
define internal void @h2v2_downsample(%struct.jpeg_compress_struct* nocapture readonly, %struct.jpeg_component_info* nocapture readonly, i8** nocapture readonly, i8** nocapture readonly) #0 {
  %5 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %1, i64 0, i32 7
  %6 = load i32, i32* %5, align 4
  %7 = shl i32 %6, 3
  %8 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 42
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 7
  %11 = load i32, i32* %10, align 8
  %12 = shl i32 %6, 4
  %13 = sub i32 %12, %11
  %14 = icmp sgt i32 %13, 0
  %15 = icmp sgt i32 %9, 0
  %16 = and i1 %15, %14
  br i1 %16, label %17, label %72

17:                                               ; preds = %4
  %18 = zext i32 %11 to i64
  %19 = xor i32 %11, -1
  %20 = add i32 %12, %19
  %21 = zext i32 %20 to i64
  %22 = add nuw nsw i64 %21, 1
  %23 = zext i32 %9 to i64
  %24 = add nsw i64 %23, -1
  %25 = and i64 %23, 3
  %26 = icmp ult i64 %24, 3
  br i1 %26, label %58, label %27

27:                                               ; preds = %17
  %28 = sub nsw i64 %23, %25
  br label %29

29:                                               ; preds = %29, %27
  %30 = phi i64 [ 0, %27 ], [ %55, %29 ]
  %31 = phi i64 [ %28, %27 ], [ %56, %29 ]
  %32 = getelementptr inbounds i8*, i8** %2, i64 %30
  %33 = load i8*, i8** %32, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 %18
  %35 = getelementptr inbounds i8, i8* %34, i64 -1
  %36 = load i8, i8* %35, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %34, i8 %36, i64 %22, i1 false) #4
  %37 = or i64 %30, 1
  %38 = getelementptr inbounds i8*, i8** %2, i64 %37
  %39 = load i8*, i8** %38, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 %18
  %41 = getelementptr inbounds i8, i8* %40, i64 -1
  %42 = load i8, i8* %41, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %40, i8 %42, i64 %22, i1 false) #4
  %43 = or i64 %30, 2
  %44 = getelementptr inbounds i8*, i8** %2, i64 %43
  %45 = load i8*, i8** %44, align 8
  %46 = getelementptr inbounds i8, i8* %45, i64 %18
  %47 = getelementptr inbounds i8, i8* %46, i64 -1
  %48 = load i8, i8* %47, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %46, i8 %48, i64 %22, i1 false) #4
  %49 = or i64 %30, 3
  %50 = getelementptr inbounds i8*, i8** %2, i64 %49
  %51 = load i8*, i8** %50, align 8
  %52 = getelementptr inbounds i8, i8* %51, i64 %18
  %53 = getelementptr inbounds i8, i8* %52, i64 -1
  %54 = load i8, i8* %53, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %52, i8 %54, i64 %22, i1 false) #4
  %55 = add nuw nsw i64 %30, 4
  %56 = add i64 %31, -4
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %58, label %29

58:                                               ; preds = %29, %17
  %59 = phi i64 [ 0, %17 ], [ %55, %29 ]
  %60 = icmp eq i64 %25, 0
  br i1 %60, label %72, label %61

61:                                               ; preds = %58, %61
  %62 = phi i64 [ %69, %61 ], [ %59, %58 ]
  %63 = phi i64 [ %70, %61 ], [ %25, %58 ]
  %64 = getelementptr inbounds i8*, i8** %2, i64 %62
  %65 = load i8*, i8** %64, align 8
  %66 = getelementptr inbounds i8, i8* %65, i64 %18
  %67 = getelementptr inbounds i8, i8* %66, i64 -1
  %68 = load i8, i8* %67, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %66, i8 %68, i64 %22, i1 false) #4
  %69 = add nuw nsw i64 %62, 1
  %70 = add i64 %63, -1
  %71 = icmp eq i64 %70, 0
  br i1 %71, label %72, label %61, !llvm.loop !7

72:                                               ; preds = %58, %61, %4
  %73 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %1, i64 0, i32 3
  %74 = load i32, i32* %73, align 4
  %75 = icmp sgt i32 %74, 0
  br i1 %75, label %76, label %143

76:                                               ; preds = %72
  %77 = icmp eq i32 %7, 0
  br label %78

78:                                               ; preds = %76, %137
  %79 = phi i32 [ %74, %76 ], [ %138, %137 ]
  %80 = phi i64 [ 0, %76 ], [ %139, %137 ]
  %81 = phi i64 [ 0, %76 ], [ %140, %137 ]
  br i1 %77, label %137, label %82

82:                                               ; preds = %78
  %83 = or i64 %80, 1
  %84 = getelementptr inbounds i8*, i8** %2, i64 %83
  %85 = load i8*, i8** %84, align 8
  %86 = getelementptr inbounds i8*, i8** %2, i64 %80
  %87 = load i8*, i8** %86, align 8
  %88 = getelementptr inbounds i8*, i8** %3, i64 %81
  %89 = load i8*, i8** %88, align 8
  br label %90

90:                                               ; preds = %90, %82
  %91 = phi i8* [ %89, %82 ], [ %130, %90 ]
  %92 = phi i8* [ %85, %82 ], [ %132, %90 ]
  %93 = phi i8* [ %87, %82 ], [ %131, %90 ]
  %94 = phi i32 [ 0, %82 ], [ %133, %90 ]
  %95 = load i8, i8* %93, align 1
  %96 = zext i8 %95 to i32
  %97 = getelementptr inbounds i8, i8* %93, i64 1
  %98 = load i8, i8* %97, align 1
  %99 = zext i8 %98 to i32
  %100 = load i8, i8* %92, align 1
  %101 = zext i8 %100 to i32
  %102 = getelementptr inbounds i8, i8* %92, i64 1
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i32
  %105 = add nuw nsw i32 %96, 1
  %106 = add nuw nsw i32 %105, %99
  %107 = add nuw nsw i32 %106, %101
  %108 = add nuw nsw i32 %107, %104
  %109 = lshr i32 %108, 2
  %110 = trunc i32 %109 to i8
  %111 = getelementptr inbounds i8, i8* %91, i64 1
  store i8 %110, i8* %91, align 1
  %112 = getelementptr inbounds i8, i8* %93, i64 2
  %113 = getelementptr inbounds i8, i8* %92, i64 2
  %114 = load i8, i8* %112, align 1
  %115 = zext i8 %114 to i32
  %116 = getelementptr inbounds i8, i8* %93, i64 3
  %117 = load i8, i8* %116, align 1
  %118 = zext i8 %117 to i32
  %119 = load i8, i8* %113, align 1
  %120 = zext i8 %119 to i32
  %121 = getelementptr inbounds i8, i8* %92, i64 3
  %122 = load i8, i8* %121, align 1
  %123 = zext i8 %122 to i32
  %124 = add nuw nsw i32 %115, 2
  %125 = add nuw nsw i32 %124, %118
  %126 = add nuw nsw i32 %125, %120
  %127 = add nuw nsw i32 %126, %123
  %128 = lshr i32 %127, 2
  %129 = trunc i32 %128 to i8
  %130 = getelementptr inbounds i8, i8* %91, i64 2
  store i8 %129, i8* %111, align 1
  %131 = getelementptr inbounds i8, i8* %93, i64 4
  %132 = getelementptr inbounds i8, i8* %92, i64 4
  %133 = add nuw i32 %94, 2
  %134 = icmp eq i32 %133, %7
  br i1 %134, label %135, label %90

135:                                              ; preds = %90
  %136 = load i32, i32* %73, align 4
  br label %137

137:                                              ; preds = %135, %78
  %138 = phi i32 [ %136, %135 ], [ %79, %78 ]
  %139 = add nuw nsw i64 %80, 2
  %140 = add nuw nsw i64 %81, 1
  %141 = sext i32 %138 to i64
  %142 = icmp slt i64 %140, %141
  br i1 %142, label %78, label %143

143:                                              ; preds = %137, %72
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @int_downsample(%struct.jpeg_compress_struct* nocapture readonly, %struct.jpeg_component_info* nocapture readonly, i8** nocapture readonly, i8** nocapture readonly) #0 {
  %5 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %1, i64 0, i32 7
  %6 = load i32, i32* %5, align 4
  %7 = shl i32 %6, 3
  %8 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 41
  %9 = load i32, i32* %8, align 8
  %10 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %1, i64 0, i32 2
  %11 = load i32, i32* %10, align 8
  %12 = sdiv i32 %9, %11
  %13 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 42
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %1, i64 0, i32 3
  %16 = load i32, i32* %15, align 4
  %17 = sdiv i32 %14, %16
  %18 = mul nsw i32 %17, %12
  %19 = sdiv i32 %18, 2
  %20 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 7
  %21 = load i32, i32* %20, align 8
  %22 = mul i32 %12, %7
  %23 = sub i32 %22, %21
  %24 = icmp sgt i32 %23, 0
  %25 = icmp sgt i32 %14, 0
  %26 = and i1 %25, %24
  br i1 %26, label %27, label %84

27:                                               ; preds = %4
  %28 = zext i32 %21 to i64
  %29 = xor i32 %21, -1
  %30 = add i32 %22, %29
  %31 = zext i32 %30 to i64
  %32 = add nuw nsw i64 %31, 1
  %33 = zext i32 %14 to i64
  %34 = add nsw i64 %33, -1
  %35 = and i64 %33, 3
  %36 = icmp ult i64 %34, 3
  br i1 %36, label %68, label %37

37:                                               ; preds = %27
  %38 = sub nsw i64 %33, %35
  br label %39

39:                                               ; preds = %39, %37
  %40 = phi i64 [ 0, %37 ], [ %65, %39 ]
  %41 = phi i64 [ %38, %37 ], [ %66, %39 ]
  %42 = getelementptr inbounds i8*, i8** %2, i64 %40
  %43 = load i8*, i8** %42, align 8
  %44 = getelementptr inbounds i8, i8* %43, i64 %28
  %45 = getelementptr inbounds i8, i8* %44, i64 -1
  %46 = load i8, i8* %45, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 %46, i64 %32, i1 false) #4
  %47 = or i64 %40, 1
  %48 = getelementptr inbounds i8*, i8** %2, i64 %47
  %49 = load i8*, i8** %48, align 8
  %50 = getelementptr inbounds i8, i8* %49, i64 %28
  %51 = getelementptr inbounds i8, i8* %50, i64 -1
  %52 = load i8, i8* %51, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %50, i8 %52, i64 %32, i1 false) #4
  %53 = or i64 %40, 2
  %54 = getelementptr inbounds i8*, i8** %2, i64 %53
  %55 = load i8*, i8** %54, align 8
  %56 = getelementptr inbounds i8, i8* %55, i64 %28
  %57 = getelementptr inbounds i8, i8* %56, i64 -1
  %58 = load i8, i8* %57, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %56, i8 %58, i64 %32, i1 false) #4
  %59 = or i64 %40, 3
  %60 = getelementptr inbounds i8*, i8** %2, i64 %59
  %61 = load i8*, i8** %60, align 8
  %62 = getelementptr inbounds i8, i8* %61, i64 %28
  %63 = getelementptr inbounds i8, i8* %62, i64 -1
  %64 = load i8, i8* %63, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %62, i8 %64, i64 %32, i1 false) #4
  %65 = add nuw nsw i64 %40, 4
  %66 = add i64 %41, -4
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %39

68:                                               ; preds = %39, %27
  %69 = phi i64 [ 0, %27 ], [ %65, %39 ]
  %70 = icmp eq i64 %35, 0
  br i1 %70, label %82, label %71

71:                                               ; preds = %68, %71
  %72 = phi i64 [ %79, %71 ], [ %69, %68 ]
  %73 = phi i64 [ %80, %71 ], [ %35, %68 ]
  %74 = getelementptr inbounds i8*, i8** %2, i64 %72
  %75 = load i8*, i8** %74, align 8
  %76 = getelementptr inbounds i8, i8* %75, i64 %28
  %77 = getelementptr inbounds i8, i8* %76, i64 -1
  %78 = load i8, i8* %77, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %76, i8 %78, i64 %32, i1 false) #4
  %79 = add nuw nsw i64 %72, 1
  %80 = add i64 %73, -1
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %71, !llvm.loop !8

82:                                               ; preds = %71, %68
  %83 = load i32, i32* %15, align 4
  br label %84

84:                                               ; preds = %82, %4
  %85 = phi i32 [ %83, %82 ], [ %16, %4 ]
  %86 = icmp sgt i32 %85, 0
  br i1 %86, label %87, label %222

87:                                               ; preds = %84
  %88 = icmp eq i32 %7, 0
  %89 = icmp sgt i32 %17, 0
  %90 = icmp sgt i32 %12, 0
  %91 = sext i32 %19 to i64
  %92 = sext i32 %18 to i64
  %93 = sext i32 %17 to i64
  %94 = zext i32 %17 to i64
  %95 = add i32 %12, -1
  %96 = zext i32 %95 to i64
  %97 = add nuw nsw i64 %96, 1
  %98 = and i64 %97, 8589934588
  %99 = add nsw i64 %98, -4
  %100 = lshr exact i64 %99, 2
  %101 = add nuw nsw i64 %100, 1
  %102 = icmp ult i64 %97, 4
  %103 = and i64 %97, 8589934588
  %104 = trunc i64 %103 to i32
  %105 = and i64 %101, 1
  %106 = icmp eq i64 %99, 0
  %107 = sub nuw nsw i64 %101, %105
  %108 = icmp eq i64 %105, 0
  %109 = icmp eq i64 %97, %103
  br label %110

110:                                              ; preds = %87, %216
  %111 = phi i32 [ %85, %87 ], [ %217, %216 ]
  %112 = phi i64 [ 0, %87 ], [ %218, %216 ]
  %113 = phi i64 [ 0, %87 ], [ %219, %216 ]
  br i1 %88, label %216, label %114

114:                                              ; preds = %110
  %115 = getelementptr inbounds i8*, i8** %3, i64 %113
  %116 = load i8*, i8** %115, align 8
  br label %117

117:                                              ; preds = %205, %114
  %118 = phi i8* [ %210, %205 ], [ %116, %114 ]
  %119 = phi i32 [ %212, %205 ], [ 0, %114 ]
  %120 = phi i32 [ %211, %205 ], [ 0, %114 ]
  br i1 %89, label %121, label %205

121:                                              ; preds = %117
  %122 = zext i32 %119 to i64
  br label %123

123:                                              ; preds = %201, %121
  %124 = phi i64 [ 0, %121 ], [ %203, %201 ]
  %125 = phi i64 [ 0, %121 ], [ %202, %201 ]
  br i1 %90, label %126, label %201

126:                                              ; preds = %123
  %127 = add nsw i64 %124, %112
  %128 = getelementptr inbounds i8*, i8** %2, i64 %127
  %129 = load i8*, i8** %128, align 8
  %130 = getelementptr inbounds i8, i8* %129, i64 %122
  br i1 %102, label %187, label %131

131:                                              ; preds = %126
  %132 = getelementptr i8, i8* %130, i64 %103
  %133 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %125, i32 0
  br i1 %106, label %163, label %134

134:                                              ; preds = %131, %134
  %135 = phi i64 [ %160, %134 ], [ 0, %131 ]
  %136 = phi <2 x i64> [ %158, %134 ], [ %133, %131 ]
  %137 = phi <2 x i64> [ %159, %134 ], [ zeroinitializer, %131 ]
  %138 = phi i64 [ %161, %134 ], [ %107, %131 ]
  %139 = getelementptr i8, i8* %130, i64 %135
  %140 = bitcast i8* %139 to <2 x i8>*
  %141 = load <2 x i8>, <2 x i8>* %140, align 1
  %142 = getelementptr i8, i8* %139, i64 2
  %143 = bitcast i8* %142 to <2 x i8>*
  %144 = load <2 x i8>, <2 x i8>* %143, align 1
  %145 = zext <2 x i8> %141 to <2 x i64>
  %146 = zext <2 x i8> %144 to <2 x i64>
  %147 = add nsw <2 x i64> %136, %145
  %148 = add nuw nsw <2 x i64> %137, %146
  %149 = or i64 %135, 4
  %150 = getelementptr i8, i8* %130, i64 %149
  %151 = bitcast i8* %150 to <2 x i8>*
  %152 = load <2 x i8>, <2 x i8>* %151, align 1
  %153 = getelementptr i8, i8* %150, i64 2
  %154 = bitcast i8* %153 to <2 x i8>*
  %155 = load <2 x i8>, <2 x i8>* %154, align 1
  %156 = zext <2 x i8> %152 to <2 x i64>
  %157 = zext <2 x i8> %155 to <2 x i64>
  %158 = add nsw <2 x i64> %147, %156
  %159 = add nuw nsw <2 x i64> %148, %157
  %160 = add i64 %135, 8
  %161 = add i64 %138, -2
  %162 = icmp eq i64 %161, 0
  br i1 %162, label %163, label %134, !llvm.loop !9

163:                                              ; preds = %134, %131
  %164 = phi <2 x i64> [ undef, %131 ], [ %158, %134 ]
  %165 = phi <2 x i64> [ undef, %131 ], [ %159, %134 ]
  %166 = phi i64 [ 0, %131 ], [ %160, %134 ]
  %167 = phi <2 x i64> [ %133, %131 ], [ %158, %134 ]
  %168 = phi <2 x i64> [ zeroinitializer, %131 ], [ %159, %134 ]
  br i1 %108, label %180, label %169

169:                                              ; preds = %163
  %170 = getelementptr i8, i8* %130, i64 %166
  %171 = getelementptr i8, i8* %170, i64 2
  %172 = bitcast i8* %171 to <2 x i8>*
  %173 = load <2 x i8>, <2 x i8>* %172, align 1
  %174 = zext <2 x i8> %173 to <2 x i64>
  %175 = add nuw nsw <2 x i64> %168, %174
  %176 = bitcast i8* %170 to <2 x i8>*
  %177 = load <2 x i8>, <2 x i8>* %176, align 1
  %178 = zext <2 x i8> %177 to <2 x i64>
  %179 = add nsw <2 x i64> %167, %178
  br label %180

180:                                              ; preds = %163, %169
  %181 = phi <2 x i64> [ %164, %163 ], [ %179, %169 ]
  %182 = phi <2 x i64> [ %165, %163 ], [ %175, %169 ]
  %183 = add <2 x i64> %182, %181
  %184 = shufflevector <2 x i64> %183, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %185 = add <2 x i64> %183, %184
  %186 = extractelement <2 x i64> %185, i32 0
  br i1 %109, label %201, label %187

187:                                              ; preds = %180, %126
  %188 = phi i64 [ %125, %126 ], [ %186, %180 ]
  %189 = phi i8* [ %130, %126 ], [ %132, %180 ]
  %190 = phi i32 [ 0, %126 ], [ %104, %180 ]
  br label %191

191:                                              ; preds = %187, %191
  %192 = phi i64 [ %198, %191 ], [ %188, %187 ]
  %193 = phi i8* [ %195, %191 ], [ %189, %187 ]
  %194 = phi i32 [ %199, %191 ], [ %190, %187 ]
  %195 = getelementptr inbounds i8, i8* %193, i64 1
  %196 = load i8, i8* %193, align 1
  %197 = zext i8 %196 to i64
  %198 = add nsw i64 %192, %197
  %199 = add nuw nsw i32 %194, 1
  %200 = icmp eq i32 %199, %12
  br i1 %200, label %201, label %191, !llvm.loop !11

201:                                              ; preds = %191, %180, %123
  %202 = phi i64 [ %125, %123 ], [ %186, %180 ], [ %198, %191 ]
  %203 = add nuw nsw i64 %124, 1
  %204 = icmp eq i64 %203, %94
  br i1 %204, label %205, label %123

205:                                              ; preds = %201, %117
  %206 = phi i64 [ 0, %117 ], [ %202, %201 ]
  %207 = add nsw i64 %206, %91
  %208 = sdiv i64 %207, %92
  %209 = trunc i64 %208 to i8
  %210 = getelementptr inbounds i8, i8* %118, i64 1
  store i8 %209, i8* %118, align 1
  %211 = add nuw i32 %120, 1
  %212 = add i32 %119, %12
  %213 = icmp eq i32 %211, %7
  br i1 %213, label %214, label %117

214:                                              ; preds = %205
  %215 = load i32, i32* %15, align 4
  br label %216

216:                                              ; preds = %214, %110
  %217 = phi i32 [ %215, %214 ], [ %111, %110 ]
  %218 = add nsw i64 %112, %93
  %219 = add nuw nsw i64 %113, 1
  %220 = sext i32 %217 to i64
  %221 = icmp slt i64 %219, %220
  br i1 %221, label %110, label %222

222:                                              ; preds = %216, %84
  ret void
}

declare void @jcopy_sample_rows(i8**, i32, i8**, i32, i32, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !3}
!8 = distinct !{!8, !3}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.isvectorized", i32 1}
!11 = distinct !{!11, !12, !10}
!12 = !{!"llvm.loop.unroll.runtime.disable"}
