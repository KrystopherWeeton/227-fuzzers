; ModuleID = '../../third_party/webrtc/modules/rtp_rtcp/source/video_rtp_depacketizer.cc'
source_filename = "../../third_party/webrtc/modules/rtp_rtcp/source/video_rtp_depacketizer.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.rtc::scoped_refptr" = type { %"class.webrtc::EncodedImageBuffer"* }
%"class.webrtc::EncodedImageBuffer" = type { %"class.webrtc::EncodedImageBufferInterface", i64, i8* }
%"class.webrtc::EncodedImageBufferInterface" = type { %"class.rtc::RefCountInterface" }
%"class.rtc::RefCountInterface" = type { i32 (...)** }
%"class.webrtc::VideoRtpDepacketizer" = type { i32 (...)** }
%"class.rtc::ArrayView.0" = type { %"class.rtc::impl::ArrayViewBase.1" }
%"class.rtc::impl::ArrayViewBase.1" = type { i8*, i64 }

$_ZN6webrtc20VideoRtpDepacketizerD2Ev = comdat any

$_ZN6webrtc20VideoRtpDepacketizerD0Ev = comdat any

@_ZTVN6webrtc20VideoRtpDepacketizerE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.webrtc::VideoRtpDepacketizer"*)* @_ZN6webrtc20VideoRtpDepacketizerD2Ev to i8*), i8* bitcast (void (%"class.webrtc::VideoRtpDepacketizer"*)* @_ZN6webrtc20VideoRtpDepacketizerD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%"class.rtc::scoped_refptr"*, %"class.webrtc::VideoRtpDepacketizer"*, %"class.rtc::ArrayView.0"*, i64)* @_ZN6webrtc20VideoRtpDepacketizer13AssembleFrameEN3rtc9ArrayViewIKNS2_IKhLln4711EEELln4711EEE to i8*)] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc20VideoRtpDepacketizer13AssembleFrameEN3rtc9ArrayViewIKNS2_IKhLln4711EEELln4711EEE(%"class.rtc::scoped_refptr"* noalias sret, %"class.webrtc::VideoRtpDepacketizer"* nocapture readnone, %"class.rtc::ArrayView.0"*, i64) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.rtc::ArrayView.0", %"class.rtc::ArrayView.0"* %2, i64 %3
  %6 = icmp eq i64 %3, 0
  br i1 %6, label %31, label %7

7:                                                ; preds = %4
  %8 = shl nsw i64 %3, 4
  %9 = add i64 %8, -16
  %10 = lshr exact i64 %9, 4
  %11 = add nuw nsw i64 %10, 1
  %12 = and i64 %11, 7
  %13 = icmp ult i64 %9, 112
  br i1 %13, label %16, label %14

14:                                               ; preds = %7
  %15 = sub nsw i64 %11, %12
  br label %63

16:                                               ; preds = %63, %7
  %17 = phi i64 [ undef, %7 ], [ %90, %63 ]
  %18 = phi i64 [ 0, %7 ], [ %90, %63 ]
  %19 = phi %"class.rtc::ArrayView.0"* [ %2, %7 ], [ %91, %63 ]
  %20 = icmp eq i64 %12, 0
  br i1 %20, label %31, label %21

21:                                               ; preds = %16, %21
  %22 = phi i64 [ %27, %21 ], [ %18, %16 ]
  %23 = phi %"class.rtc::ArrayView.0"* [ %28, %21 ], [ %19, %16 ]
  %24 = phi i64 [ %29, %21 ], [ %12, %16 ]
  %25 = getelementptr inbounds %"class.rtc::ArrayView.0", %"class.rtc::ArrayView.0"* %23, i64 0, i32 0, i32 1
  %26 = load i64, i64* %25, align 8
  %27 = add i64 %26, %22
  %28 = getelementptr inbounds %"class.rtc::ArrayView.0", %"class.rtc::ArrayView.0"* %23, i64 1
  %29 = add i64 %24, -1
  %30 = icmp eq i64 %29, 0
  br i1 %30, label %31, label %21, !llvm.loop !2

31:                                               ; preds = %16, %21, %4
  %32 = phi i64 [ 0, %4 ], [ %17, %16 ], [ %27, %21 ]
  %33 = getelementptr inbounds %"class.rtc::scoped_refptr", %"class.rtc::scoped_refptr"* %0, i64 0, i32 0
  store %"class.webrtc::EncodedImageBuffer"* inttoptr (i64 -6148914691236517206 to %"class.webrtc::EncodedImageBuffer"*), %"class.webrtc::EncodedImageBuffer"** %33, align 8
  tail call void @_ZN6webrtc18EncodedImageBuffer6CreateEm(%"class.rtc::scoped_refptr"* sret %0, i64 %32) #4
  %34 = load %"class.webrtc::EncodedImageBuffer"*, %"class.webrtc::EncodedImageBuffer"** %33, align 8
  %35 = bitcast %"class.webrtc::EncodedImageBuffer"* %34 to i8* (%"class.webrtc::EncodedImageBuffer"*)***
  %36 = load i8* (%"class.webrtc::EncodedImageBuffer"*)**, i8* (%"class.webrtc::EncodedImageBuffer"*)*** %35, align 8
  %37 = getelementptr inbounds i8* (%"class.webrtc::EncodedImageBuffer"*)*, i8* (%"class.webrtc::EncodedImageBuffer"*)** %36, i64 5
  %38 = load i8* (%"class.webrtc::EncodedImageBuffer"*)*, i8* (%"class.webrtc::EncodedImageBuffer"*)** %37, align 8
  %39 = tail call i8* %38(%"class.webrtc::EncodedImageBuffer"* %34) #4
  br i1 %6, label %119, label %40

40:                                               ; preds = %31
  %41 = shl nsw i64 %3, 4
  %42 = add i64 %41, -16
  %43 = lshr exact i64 %42, 4
  %44 = add nuw nsw i64 %43, 1
  %45 = and i64 %44, 3
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %59, label %47

47:                                               ; preds = %40, %47
  %48 = phi %"class.rtc::ArrayView.0"* [ %56, %47 ], [ %2, %40 ]
  %49 = phi i8* [ %55, %47 ], [ %39, %40 ]
  %50 = phi i64 [ %57, %47 ], [ %45, %40 ]
  %51 = getelementptr inbounds %"class.rtc::ArrayView.0", %"class.rtc::ArrayView.0"* %48, i64 0, i32 0, i32 0
  %52 = load i8*, i8** %51, align 8
  %53 = getelementptr inbounds %"class.rtc::ArrayView.0", %"class.rtc::ArrayView.0"* %48, i64 0, i32 0, i32 1
  %54 = load i64, i64* %53, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %49, i8* align 1 %52, i64 %54, i1 false)
  %55 = getelementptr inbounds i8, i8* %49, i64 %54
  %56 = getelementptr inbounds %"class.rtc::ArrayView.0", %"class.rtc::ArrayView.0"* %48, i64 1
  %57 = add i64 %50, -1
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %59, label %47, !llvm.loop !4

59:                                               ; preds = %47, %40
  %60 = phi %"class.rtc::ArrayView.0"* [ %2, %40 ], [ %56, %47 ]
  %61 = phi i8* [ %39, %40 ], [ %55, %47 ]
  %62 = icmp ult i64 %42, 48
  br i1 %62, label %119, label %94

63:                                               ; preds = %63, %14
  %64 = phi i64 [ 0, %14 ], [ %90, %63 ]
  %65 = phi %"class.rtc::ArrayView.0"* [ %2, %14 ], [ %91, %63 ]
  %66 = phi i64 [ %15, %14 ], [ %92, %63 ]
  %67 = getelementptr inbounds %"class.rtc::ArrayView.0", %"class.rtc::ArrayView.0"* %65, i64 0, i32 0, i32 1
  %68 = load i64, i64* %67, align 8
  %69 = add i64 %68, %64
  %70 = getelementptr inbounds %"class.rtc::ArrayView.0", %"class.rtc::ArrayView.0"* %65, i64 1, i32 0, i32 1
  %71 = load i64, i64* %70, align 8
  %72 = add i64 %71, %69
  %73 = getelementptr inbounds %"class.rtc::ArrayView.0", %"class.rtc::ArrayView.0"* %65, i64 2, i32 0, i32 1
  %74 = load i64, i64* %73, align 8
  %75 = add i64 %74, %72
  %76 = getelementptr inbounds %"class.rtc::ArrayView.0", %"class.rtc::ArrayView.0"* %65, i64 3, i32 0, i32 1
  %77 = load i64, i64* %76, align 8
  %78 = add i64 %77, %75
  %79 = getelementptr inbounds %"class.rtc::ArrayView.0", %"class.rtc::ArrayView.0"* %65, i64 4, i32 0, i32 1
  %80 = load i64, i64* %79, align 8
  %81 = add i64 %80, %78
  %82 = getelementptr inbounds %"class.rtc::ArrayView.0", %"class.rtc::ArrayView.0"* %65, i64 5, i32 0, i32 1
  %83 = load i64, i64* %82, align 8
  %84 = add i64 %83, %81
  %85 = getelementptr inbounds %"class.rtc::ArrayView.0", %"class.rtc::ArrayView.0"* %65, i64 6, i32 0, i32 1
  %86 = load i64, i64* %85, align 8
  %87 = add i64 %86, %84
  %88 = getelementptr inbounds %"class.rtc::ArrayView.0", %"class.rtc::ArrayView.0"* %65, i64 7, i32 0, i32 1
  %89 = load i64, i64* %88, align 8
  %90 = add i64 %89, %87
  %91 = getelementptr inbounds %"class.rtc::ArrayView.0", %"class.rtc::ArrayView.0"* %65, i64 8
  %92 = add i64 %66, -8
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %16, label %63

94:                                               ; preds = %59, %94
  %95 = phi %"class.rtc::ArrayView.0"* [ %117, %94 ], [ %60, %59 ]
  %96 = phi i8* [ %116, %94 ], [ %61, %59 ]
  %97 = getelementptr inbounds %"class.rtc::ArrayView.0", %"class.rtc::ArrayView.0"* %95, i64 0, i32 0, i32 0
  %98 = load i8*, i8** %97, align 8
  %99 = getelementptr inbounds %"class.rtc::ArrayView.0", %"class.rtc::ArrayView.0"* %95, i64 0, i32 0, i32 1
  %100 = load i64, i64* %99, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %96, i8* align 1 %98, i64 %100, i1 false)
  %101 = getelementptr inbounds i8, i8* %96, i64 %100
  %102 = getelementptr inbounds %"class.rtc::ArrayView.0", %"class.rtc::ArrayView.0"* %95, i64 1, i32 0, i32 0
  %103 = load i8*, i8** %102, align 8
  %104 = getelementptr inbounds %"class.rtc::ArrayView.0", %"class.rtc::ArrayView.0"* %95, i64 1, i32 0, i32 1
  %105 = load i64, i64* %104, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %101, i8* align 1 %103, i64 %105, i1 false)
  %106 = getelementptr inbounds i8, i8* %101, i64 %105
  %107 = getelementptr inbounds %"class.rtc::ArrayView.0", %"class.rtc::ArrayView.0"* %95, i64 2, i32 0, i32 0
  %108 = load i8*, i8** %107, align 8
  %109 = getelementptr inbounds %"class.rtc::ArrayView.0", %"class.rtc::ArrayView.0"* %95, i64 2, i32 0, i32 1
  %110 = load i64, i64* %109, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %106, i8* align 1 %108, i64 %110, i1 false)
  %111 = getelementptr inbounds i8, i8* %106, i64 %110
  %112 = getelementptr inbounds %"class.rtc::ArrayView.0", %"class.rtc::ArrayView.0"* %95, i64 3, i32 0, i32 0
  %113 = load i8*, i8** %112, align 8
  %114 = getelementptr inbounds %"class.rtc::ArrayView.0", %"class.rtc::ArrayView.0"* %95, i64 3, i32 0, i32 1
  %115 = load i64, i64* %114, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %111, i8* align 1 %113, i64 %115, i1 false)
  %116 = getelementptr inbounds i8, i8* %111, i64 %115
  %117 = getelementptr inbounds %"class.rtc::ArrayView.0", %"class.rtc::ArrayView.0"* %95, i64 4
  %118 = icmp eq %"class.rtc::ArrayView.0"* %117, %5
  br i1 %118, label %119, label %94

119:                                              ; preds = %59, %94, %31
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN6webrtc18EncodedImageBuffer6CreateEm(%"class.rtc::scoped_refptr"* sret, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6webrtc20VideoRtpDepacketizerD2Ev(%"class.webrtc::VideoRtpDepacketizer"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6webrtc20VideoRtpDepacketizerD0Ev(%"class.webrtc::VideoRtpDepacketizer"*) unnamed_addr #0 comdat align 2 {
  tail call void @llvm.trap() #5
  unreachable
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { cold noreturn nounwind }
attributes #4 = { nounwind }
attributes #5 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
