; ModuleID = '../../third_party/blink/renderer/platform/graphics/paint/foreign_layer_display_item.cc'
source_filename = "../../third_party/blink/renderer/platform/graphics/paint/foreign_layer_display_item.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::ForeignLayerDisplayItem" = type { %"class.blink::DisplayItem.base", %class.scoped_refptr }
%"class.blink::DisplayItem.base" = type <{ %"class.blink::DisplayItemClient"*, %"class.blink::IntRect", i32, i16 }>
%"class.blink::IntRect" = type { %"class.blink::IntPoint", %"class.blink::IntSize" }
%"class.blink::IntPoint" = type { i32, i32 }
%"class.blink::IntSize" = type { i32, i32 }
%class.scoped_refptr = type { %"class.cc::Layer"* }
%"class.blink::DisplayItemClient" = type <{ i32 (...)**, i8, [7 x i8] }>
%"class.cc::Layer" = type <{ i32 (...)**, %"class.base::RefCounted", [4 x i8], %"class.cc::Layer"*, %"class.cc::LayerTreeHost"*, %"struct.cc::Layer::Inputs", %"class.std::__1::unique_ptr", i32, i32, i32, i32, i32, i32, %"class.gfx::Vector2dF", i8, i16, [5 x i8], %"class.std::__1::unique_ptr.41" }>
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.cc::LayerTreeHost" = type opaque
%"struct.cc::Layer::Inputs" = type { %"class.std::__1::vector", %"class.gfx::Rect", %"class.gfx::Size", i32, i8, i32, %"class.cc::Region", %"class.cc::TouchActionRegion", %"class.cc::Region", %"struct.cc::ElementId" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %class.scoped_refptr*, %class.scoped_refptr*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.scoped_refptr* }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Size" = type { i32, i32 }
%"class.cc::TouchActionRegion" = type { %"class.base::flat_map" }
%"class.base::flat_map" = type { %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector.1" }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.3" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.std::__1::pair"* }
%"class.cc::Region" = type { %class.SkRegion }
%class.SkRegion = type { %struct.SkIRect, %"struct.SkRegion::RunHead"* }
%struct.SkIRect = type { i32, i32, i32, i32 }
%"struct.SkRegion::RunHead" = type opaque
%"struct.cc::ElementId" = type { i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"struct.cc::Layer::LayerTreeInputs"* }
%"struct.cc::Layer::LayerTreeInputs" = type { %"class.gfx::Rect", %"class.cc::PictureLayer"*, float, i32, i8, %"class.gfx::PointF", %"class.gfx::Transform", %"class.gfx::Point3F", %"class.viz::SubtreeCaptureId", i32, %"class.cc::FilterOperations", %"class.cc::FilterOperations", %"class.absl::optional.26", float, i32, %"class.gfx::ScrollOffset", %"class.gfx::Size", %"class.gfx::RoundedCornersF", %"class.base::RepeatingCallback", %"class.std::__1::vector.32" }
%"class.cc::PictureLayer" = type <{ %"class.cc::Layer", %"struct.cc::PictureLayer::PictureLayerInputs", %"class.std::__1::unique_ptr.172", %"struct.cc::devtools_instrumentation::ScopedLayerObjectTracker", %"class.cc::Region", i32, [4 x i8] }>
%"struct.cc::PictureLayer::PictureLayerInputs" = type <{ %"class.cc::ContentLayerClient"*, i8, i8, [6 x i8], %class.scoped_refptr.67, %"class.absl::optional.167", [4 x i8] }>
%"class.cc::ContentLayerClient" = type { i32 (...)** }
%class.scoped_refptr.67 = type { %"class.cc::DisplayItemList"* }
%"class.cc::DisplayItemList" = type <{ %"class.base::RefCountedThreadSafe.68", [4 x i8], %"class.cc::RTree", %"class.cc::DiscardableImageMap", %"class.cc::PaintOpBuffer", %"class.std::__1::vector.14", %"class.std::__1::vector.153", %"class.std::__1::vector.160", i32, [4 x i8] }>
%"class.base::RefCountedThreadSafe.68" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.12" }
%"struct.std::__1::__atomic_base.12" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.cc::RTree" = type <{ i64, %"struct.cc::RTree<unsigned long>::Branch", %"class.std::__1::vector.69", i8, [7 x i8] }>
%"struct.cc::RTree<unsigned long>::Branch" = type { %"struct.cc::RTree<unsigned long>::Node"*, i64, %"class.gfx::Rect" }
%"struct.cc::RTree<unsigned long>::Node" = type opaque
%"class.std::__1::vector.69" = type { %"class.std::__1::__vector_base.70" }
%"class.std::__1::__vector_base.70" = type { %"struct.cc::RTree<unsigned long>::Node"*, %"struct.cc::RTree<unsigned long>::Node"*, %"class.std::__1::__compressed_pair.71" }
%"class.std::__1::__compressed_pair.71" = type { %"struct.std::__1::__compressed_pair_elem.72" }
%"struct.std::__1::__compressed_pair_elem.72" = type { %"struct.cc::RTree<unsigned long>::Node"* }
%"class.cc::DiscardableImageMap" = type { %"class.base::flat_map.76", %"class.std::__1::vector.86", %"class.base::flat_map.100", i8, i8, [6 x i8], %"class.cc::RTree.110", %"class.std::__1::vector.145" }
%"class.base::flat_map.76" = type { %"class.base::internal::flat_tree.77" }
%"class.base::internal::flat_tree.77" = type { %"class.std::__1::vector.78" }
%"class.std::__1::vector.78" = type { %"class.std::__1::__vector_base.79" }
%"class.std::__1::__vector_base.79" = type { %"struct.std::__1::pair.80"*, %"struct.std::__1::pair.80"*, %"class.std::__1::__compressed_pair.81" }
%"struct.std::__1::pair.80" = type opaque
%"class.std::__1::__compressed_pair.81" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"struct.std::__1::__compressed_pair_elem.82" = type { %"struct.std::__1::pair.80"* }
%"class.std::__1::vector.86" = type { %"class.std::__1::__vector_base.87" }
%"class.std::__1::__vector_base.87" = type { %"struct.cc::DiscardableImageMap::AnimatedImageMetadata"*, %"struct.cc::DiscardableImageMap::AnimatedImageMetadata"*, %"class.std::__1::__compressed_pair.95" }
%"struct.cc::DiscardableImageMap::AnimatedImageMetadata" = type { i32, i32, %"class.std::__1::vector.88", i32, i32 }
%"class.std::__1::vector.88" = type { %"class.std::__1::__vector_base.89" }
%"class.std::__1::__vector_base.89" = type { %"struct.cc::FrameMetadata"*, %"struct.cc::FrameMetadata"*, %"class.std::__1::__compressed_pair.90" }
%"struct.cc::FrameMetadata" = type { i8, %"class.base::TimeDelta" }
%"class.base::TimeDelta" = type { i64 }
%"class.std::__1::__compressed_pair.90" = type { %"struct.std::__1::__compressed_pair_elem.91" }
%"struct.std::__1::__compressed_pair_elem.91" = type { %"struct.cc::FrameMetadata"* }
%"class.std::__1::__compressed_pair.95" = type { %"struct.std::__1::__compressed_pair_elem.96" }
%"struct.std::__1::__compressed_pair_elem.96" = type { %"struct.cc::DiscardableImageMap::AnimatedImageMetadata"* }
%"class.base::flat_map.100" = type { %"class.base::internal::flat_tree.101" }
%"class.base::internal::flat_tree.101" = type { %"class.std::__1::vector.102" }
%"class.std::__1::vector.102" = type { %"class.std::__1::__vector_base.103" }
%"class.std::__1::__vector_base.103" = type { %"struct.std::__1::pair.104"*, %"struct.std::__1::pair.104"*, %"class.std::__1::__compressed_pair.105" }
%"struct.std::__1::pair.104" = type { i32, i32 }
%"class.std::__1::__compressed_pair.105" = type { %"struct.std::__1::__compressed_pair_elem.106" }
%"struct.std::__1::__compressed_pair_elem.106" = type { %"struct.std::__1::pair.104"* }
%"class.cc::RTree.110" = type <{ i64, %"struct.cc::RTree<cc::DrawImage>::Branch", %"class.std::__1::vector.137", i8, [7 x i8] }>
%"struct.cc::RTree<cc::DrawImage>::Branch" = type { %"struct.cc::RTree<cc::DrawImage>::Node"*, %"class.cc::DrawImage", %"class.gfx::Rect" }
%"struct.cc::RTree<cc::DrawImage>::Node" = type opaque
%"class.cc::DrawImage" = type <{ %"class.cc::PaintImage", i8, [3 x i8], %struct.SkIRect, i32, %struct.SkSize, i8, [7 x i8], %"class.absl::optional.127", %"class.absl::optional.132", float, [4 x i8] }>
%"class.cc::PaintImage" = type { %class.sk_sp.111, %class.sk_sp.118, %"class.gfx::Rect", i32, %class.sk_sp.123, %class.sk_sp.124, i32, i32, i32, i32, i8, i8, i32, i32, %class.sk_sp.111, %class.scoped_refptr.125 }
%class.sk_sp.118 = type { %"class.cc::PaintOpBuffer"* }
%class.sk_sp.123 = type { %"class.cc::PaintImageGenerator"* }
%"class.cc::PaintImageGenerator" = type { %class.SkRefCnt.base, %struct.SkImageInfo, i32, %"class.std::__1::vector.88" }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.112, i32, i32 }
%class.sk_sp.112 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.113" }
%"struct.std::__1::atomic.113" = type { %"struct.std::__1::__atomic_base.114" }
%"struct.std::__1::__atomic_base.114" = type { %"struct.std::__1::__atomic_base.115" }
%"struct.std::__1::__atomic_base.115" = type { %"struct.std::__1::__cxx_atomic_impl.116" }
%"struct.std::__1::__cxx_atomic_impl.116" = type { %"struct.std::__1::__cxx_atomic_base_impl.117" }
%"struct.std::__1::__cxx_atomic_base_impl.117" = type { i8 }
%struct.SkISize = type { i32, i32 }
%class.sk_sp.124 = type { %"class.cc::TextureBacking"* }
%"class.cc::TextureBacking" = type { %class.SkRefCnt.base, [4 x i8] }
%class.sk_sp.111 = type { %class.SkImage* }
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%class.scoped_refptr.125 = type { %"class.cc::PaintWorkletInput"* }
%"class.cc::PaintWorkletInput" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.126", [4 x i8] }>
%"class.base::RefCountedThreadSafe.126" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%struct.SkSize = type { float, float }
%"class.absl::optional.127" = type { %"class.absl::optional_internal::optional_data.128" }
%"class.absl::optional_internal::optional_data.128" = type { %"class.absl::optional_internal::optional_data_base.129" }
%"class.absl::optional_internal::optional_data_base.129" = type { %"class.absl::optional_internal::optional_data_dtor_base.130" }
%"class.absl::optional_internal::optional_data_dtor_base.130" = type { i8, %union.anon.131 }
%union.anon.131 = type { i64 }
%"class.absl::optional.132" = type { %"class.absl::optional_internal::optional_data.133" }
%"class.absl::optional_internal::optional_data.133" = type { %"class.absl::optional_internal::optional_data_base.134" }
%"class.absl::optional_internal::optional_data_base.134" = type { %"class.absl::optional_internal::optional_data_dtor_base.135" }
%"class.absl::optional_internal::optional_data_dtor_base.135" = type { i8, %union.anon.136 }
%union.anon.136 = type { %"class.gfx::ColorSpace" }
%"class.gfx::ColorSpace" = type { i8, i8, i8, i8, [9 x float], [7 x float] }
%"class.std::__1::vector.137" = type { %"class.std::__1::__vector_base.138" }
%"class.std::__1::__vector_base.138" = type { %"struct.cc::RTree<cc::DrawImage>::Node"*, %"struct.cc::RTree<cc::DrawImage>::Node"*, %"class.std::__1::__compressed_pair.139" }
%"class.std::__1::__compressed_pair.139" = type { %"struct.std::__1::__compressed_pair_elem.140" }
%"struct.std::__1::__compressed_pair_elem.140" = type { %"struct.cc::RTree<cc::DrawImage>::Node"* }
%"class.std::__1::vector.145" = type { %"class.std::__1::__vector_base.146" }
%"class.std::__1::__vector_base.146" = type { %"struct.std::__1::pair.147"*, %"struct.std::__1::pair.147"*, %"class.std::__1::__compressed_pair.148" }
%"struct.std::__1::pair.147" = type opaque
%"class.std::__1::__compressed_pair.148" = type { %"struct.std::__1::__compressed_pair_elem.149" }
%"struct.std::__1::__compressed_pair_elem.149" = type { %"struct.std::__1::pair.147"* }
%"class.cc::PaintOpBuffer" = type <{ %class.SkRefCnt.base, [4 x i8], %"class.std::__1::unique_ptr.119", i64, i64, i64, i64, i64, i32, i8, [3 x i8] }>
%"class.std::__1::unique_ptr.119" = type { %"class.std::__1::__compressed_pair.120" }
%"class.std::__1::__compressed_pair.120" = type { %"struct.std::__1::__compressed_pair_elem.121" }
%"struct.std::__1::__compressed_pair_elem.121" = type { i8* }
%"class.std::__1::vector.14" = type { %"class.std::__1::__vector_base.15" }
%"class.std::__1::__vector_base.15" = type { %"class.gfx::Rect"*, %"class.gfx::Rect"*, %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"class.gfx::Rect"* }
%"class.std::__1::vector.153" = type { %"class.std::__1::__vector_base.154" }
%"class.std::__1::__vector_base.154" = type { i64*, i64*, %"class.std::__1::__compressed_pair.155" }
%"class.std::__1::__compressed_pair.155" = type { %"struct.std::__1::__compressed_pair_elem.156" }
%"struct.std::__1::__compressed_pair_elem.156" = type { i64* }
%"class.std::__1::vector.160" = type { %"class.std::__1::__vector_base.161" }
%"class.std::__1::__vector_base.161" = type { %"struct.cc::DisplayItemList::PairedBeginInfo"*, %"struct.cc::DisplayItemList::PairedBeginInfo"*, %"class.std::__1::__compressed_pair.162" }
%"struct.cc::DisplayItemList::PairedBeginInfo" = type { i64, i64 }
%"class.std::__1::__compressed_pair.162" = type { %"struct.std::__1::__compressed_pair_elem.163" }
%"struct.std::__1::__compressed_pair_elem.163" = type { %"struct.cc::DisplayItemList::PairedBeginInfo"* }
%"class.absl::optional.167" = type { %"class.absl::optional_internal::optional_data.168" }
%"class.absl::optional_internal::optional_data.168" = type { %"class.absl::optional_internal::optional_data_base.169" }
%"class.absl::optional_internal::optional_data_base.169" = type { %"class.absl::optional_internal::optional_data_dtor_base.170" }
%"class.absl::optional_internal::optional_data_dtor_base.170" = type { i8, %union.anon.171 }
%union.anon.171 = type { %"class.gfx::Size" }
%"class.std::__1::unique_ptr.172" = type { %"class.std::__1::__compressed_pair.173" }
%"class.std::__1::__compressed_pair.173" = type { %"struct.std::__1::__compressed_pair_elem.174" }
%"struct.std::__1::__compressed_pair_elem.174" = type { %"class.cc::RecordingSource"* }
%"class.cc::RecordingSource" = type opaque
%"struct.cc::devtools_instrumentation::ScopedLayerObjectTracker" = type { %"class.base::trace_event::TraceScopedTrackableObject.base", [4 x i8] }
%"class.base::trace_event::TraceScopedTrackableObject.base" = type <{ i8*, i32 }>
%"class.gfx::PointF" = type { float, float }
%"class.gfx::Transform" = type { %class.SkMatrix44 }
%class.SkMatrix44 = type <{ [4 x [4 x float]], i8, [3 x i8] }>
%"class.gfx::Point3F" = type { float, float, float }
%"class.viz::SubtreeCaptureId" = type { i32 }
%"class.cc::FilterOperations" = type { %"class.std::__1::vector.10" }
%"class.std::__1::vector.10" = type { %"class.std::__1::__vector_base.11" }
%"class.std::__1::__vector_base.11" = type { %"class.cc::FilterOperation"*, %"class.cc::FilterOperation"*, %"class.std::__1::__compressed_pair.21" }
%"class.cc::FilterOperation" = type <{ i32, float, float, %"class.gfx::Point", i32, %class.sk_sp, [20 x float], i32, [4 x i8], %"class.std::__1::vector.14", i32, [4 x i8] }>
%class.sk_sp = type { %"class.cc::PaintFilter"* }
%"class.cc::PaintFilter" = type { %class.SkRefCnt.base, %class.sk_sp.13, i32, %"class.absl::optional", i8, i32 }
%class.sk_sp.13 = type { %class.SkImageFilter* }
%class.SkImageFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %struct.SkRect }
%struct.SkRect = type { float, float, float, float }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.22" = type { %"class.cc::FilterOperation"* }
%"class.absl::optional.26" = type { %"class.absl::optional_internal::optional_data.27" }
%"class.absl::optional_internal::optional_data.27" = type { %"class.absl::optional_internal::optional_data_base.28" }
%"class.absl::optional_internal::optional_data_base.28" = type { %"class.absl::optional_internal::optional_data_dtor_base.29" }
%"class.absl::optional_internal::optional_data_dtor_base.29" = type { i8, %union.anon.30 }
%union.anon.30 = type { %"class.gfx::RRectF" }
%"class.gfx::RRectF" = type { %class.SkRRect }
%class.SkRRect = type { %struct.SkRect, [4 x %struct.SkPoint], i32 }
%struct.SkPoint = type { float, float }
%"class.gfx::ScrollOffset" = type { float, float }
%"class.gfx::RoundedCornersF" = type { float, float, float, float }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.31 }
%class.scoped_refptr.31 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.std::__1::vector.32" = type { %"class.std::__1::__vector_base.33" }
%"class.std::__1::__vector_base.33" = type { %"class.std::__1::unique_ptr.34"*, %"class.std::__1::unique_ptr.34"*, %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::unique_ptr.34" = type opaque
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %"class.std::__1::unique_ptr.34"* }
%"class.gfx::Vector2dF" = type { float, float }
%"class.std::__1::unique_ptr.41" = type { %"class.std::__1::__compressed_pair.42" }
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"struct.std::__1::__compressed_pair_elem.43" = type { %"struct.cc::LayerDebugInfo"* }
%"struct.cc::LayerDebugInfo" = type { %"class.std::__1::basic_string", i32, i32, %"class.std::__1::vector.50", %"class.std::__1::vector.50", %"class.std::__1::vector.57" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.44" }
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem.45" }
%"struct.std::__1::__compressed_pair_elem.45" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.46 }
%union.anon.46 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector.50" = type { %"class.std::__1::__vector_base.51" }
%"class.std::__1::__vector_base.51" = type { i8**, i8**, %"class.std::__1::__compressed_pair.52" }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"struct.std::__1::__compressed_pair_elem.53" = type { i8** }
%"class.std::__1::vector.57" = type { %"class.std::__1::__vector_base.58" }
%"class.std::__1::__vector_base.58" = type { %"struct.cc::LayerDebugInfo::Invalidation"*, %"struct.cc::LayerDebugInfo::Invalidation"*, %"class.std::__1::__compressed_pair.59" }
%"struct.cc::LayerDebugInfo::Invalidation" = type { %"class.gfx::Rect", i8*, %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.59" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"struct.std::__1::__compressed_pair_elem.60" = type { %"struct.cc::LayerDebugInfo::Invalidation"* }
%"class.blink::GraphicsContext" = type { %"class.cc::PaintCanvas"*, %"class.blink::PaintController"*, %"class.WTF::Vector.288", i32, %"class.blink::GraphicsContextState"*, %"class.cc::PaintRecorder", %"class.printing::MetafileSkia"*, %"class.paint_preview::PaintPreviewTracker"*, float, %"class.std::__1::unique_ptr.361", i8, i8, i8, i32 }
%"class.cc::PaintCanvas" = type { i32 (...)**, %"class.printing::MetafileSkia"*, %"class.paint_preview::PaintPreviewTracker"* }
%"class.blink::PaintController" = type { i32, %class.scoped_refptr.178, %class.scoped_refptr.178, %"class.blink::PaintChunker", i8, i8, %"class.WTF::Vector.265", i32, i32, i32, [4 x i8], %"class.WTF::HashMap", i32, i32, i32, i32, %"class.WTF::String", %"struct.blink::PaintController::SubsequencesData", %"struct.blink::PaintController::SubsequencesData", i32, i32, i32, i32 }
%class.scoped_refptr.178 = type { %"class.blink::PaintArtifact"* }
%"class.blink::PaintArtifact" = type { %"class.WTF::RefCounted", [4 x i8], %"class.blink::DisplayItemList", %"class.WTF::Vector.180" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted.179" }
%"class.base::RefCounted.179" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DisplayItemList" = type <{ %"class.WTF::Vector", i32, [4 x i8] }>
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"struct.blink::DisplayItemList::ItemSlot"*, i32, i32 }
%"struct.blink::DisplayItemList::ItemSlot" = type { [40 x i8] }
%"class.WTF::Vector.180" = type { %"class.WTF::VectorBuffer.181" }
%"class.WTF::VectorBuffer.181" = type { %"class.WTF::VectorBufferBase.182" }
%"class.WTF::VectorBufferBase.182" = type { %"struct.blink::PaintChunk"*, i32, i32 }
%"struct.blink::PaintChunk" = type <{ i32, i32, %"class.blink::Color", float, %"struct.blink::DisplayItem::Id", %"class.blink::RefCountedPropertyTreeState", %"class.std::__1::unique_ptr.186", %"class.std::__1::unique_ptr.235", %"class.blink::IntRect", %"class.blink::IntRect", i8, i8, [6 x i8] }>
%"class.blink::Color" = type { i32 }
%"struct.blink::DisplayItem::Id" = type { %"class.blink::DisplayItemClient"*, i32, i32 }
%"class.blink::RefCountedPropertyTreeState" = type { %class.scoped_refptr.183, %class.scoped_refptr.184, %class.scoped_refptr.185 }
%class.scoped_refptr.183 = type { %"class.blink::TransformPaintPropertyNodeOrAlias"* }
%"class.blink::TransformPaintPropertyNodeOrAlias" = type { %"class.blink::PaintPropertyNode" }
%"class.blink::PaintPropertyNode" = type { %"class.WTF::RefCounted.199", i8, i8, %class.scoped_refptr.183, i32, i32 }
%"class.WTF::RefCounted.199" = type { %"class.base::RefCounted.200" }
%"class.base::RefCounted.200" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.184 = type { %"class.blink::ClipPaintPropertyNodeOrAlias"* }
%"class.blink::ClipPaintPropertyNodeOrAlias" = type { %"class.blink::PaintPropertyNode.414" }
%"class.blink::PaintPropertyNode.414" = type { %"class.WTF::RefCounted.415", i8, i8, %class.scoped_refptr.184, i32, i32 }
%"class.WTF::RefCounted.415" = type { %"class.base::RefCounted.416" }
%"class.base::RefCounted.416" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.185 = type { %"class.blink::EffectPaintPropertyNodeOrAlias"* }
%"class.blink::EffectPaintPropertyNodeOrAlias" = type { %"class.blink::PaintPropertyNode.411" }
%"class.blink::PaintPropertyNode.411" = type { %"class.WTF::RefCounted.412", i8, i8, %class.scoped_refptr.185, i32, i32 }
%"class.WTF::RefCounted.412" = type { %"class.base::RefCounted.413" }
%"class.base::RefCounted.413" = type { %"class.base::subtle::RefCountedBase" }
%"class.std::__1::unique_ptr.186" = type { %"class.std::__1::__compressed_pair.187" }
%"class.std::__1::__compressed_pair.187" = type { %"struct.std::__1::__compressed_pair_elem.188" }
%"struct.std::__1::__compressed_pair_elem.188" = type { %"struct.blink::HitTestData"* }
%"struct.blink::HitTestData" = type { %"class.WTF::Vector.189", %"class.WTF::Vector.194", %"class.blink::IntRect", %"class.blink::TransformPaintPropertyNode"* }
%"class.WTF::Vector.189" = type { %"class.WTF::VectorBuffer.190" }
%"class.WTF::VectorBuffer.190" = type { %"class.WTF::VectorBufferBase.191" }
%"class.WTF::VectorBufferBase.191" = type { %"struct.blink::TouchActionRect"*, i32, i32 }
%"struct.blink::TouchActionRect" = type { %"class.blink::IntRect", i32 }
%"class.WTF::Vector.194" = type { %"class.WTF::VectorBuffer.195" }
%"class.WTF::VectorBuffer.195" = type { %"class.WTF::VectorBufferBase.196" }
%"class.WTF::VectorBufferBase.196" = type { %"class.blink::IntRect"*, i32, i32 }
%"class.blink::TransformPaintPropertyNode" = type { %"class.blink::TransformPaintPropertyNodeOrAlias", %"struct.blink::TransformPaintPropertyNode::State", %"class.std::__1::unique_ptr.214" }
%"struct.blink::TransformPaintPropertyNode::State" = type { %"class.blink::TransformPaintPropertyNode::TransformAndOrigin", %class.scoped_refptr.207, %"struct.blink::TransformPaintPropertyNode::State::Flags", i8, i32, i64, %"struct.cc::ElementId", %"class.std::__1::unique_ptr.208", %"struct.cc::ElementId" }
%"class.blink::TransformPaintPropertyNode::TransformAndOrigin" = type { %"class.blink::FloatSize", %"class.std::__1::unique_ptr.201" }
%"class.blink::FloatSize" = type { float, float }
%"class.std::__1::unique_ptr.201" = type { %"class.std::__1::__compressed_pair.202" }
%"class.std::__1::__compressed_pair.202" = type { %"struct.std::__1::__compressed_pair_elem.203" }
%"struct.std::__1::__compressed_pair_elem.203" = type { %"struct.blink::TransformPaintPropertyNode::TransformAndOrigin::MatrixAndOrigin"* }
%"struct.blink::TransformPaintPropertyNode::TransformAndOrigin::MatrixAndOrigin" = type <{ %"class.blink::TransformationMatrix", %"class.blink::FloatPoint3D", [4 x i8] }>
%"class.blink::TransformationMatrix" = type { %"struct.blink::TransformationMatrix::Matrix4" }
%"struct.blink::TransformationMatrix::Matrix4" = type { [4 x [4 x double]] }
%"class.blink::FloatPoint3D" = type { float, float, float }
%class.scoped_refptr.207 = type { %"class.blink::ScrollPaintPropertyNode"* }
%"class.blink::ScrollPaintPropertyNode" = type { %"class.blink::PaintPropertyNode.396", %"struct.blink::ScrollPaintPropertyNode::State" }
%"class.blink::PaintPropertyNode.396" = type { %"class.WTF::RefCounted.397", i8, i8, %class.scoped_refptr.207, i32, i32 }
%"class.WTF::RefCounted.397" = type { %"class.base::RefCounted.398" }
%"class.base::RefCounted.398" = type { %"class.base::subtle::RefCountedBase" }
%"struct.blink::ScrollPaintPropertyNode::State" = type { %"class.blink::IntRect", %"class.blink::IntSize", i8, i8, i8, i8, i32, %"struct.cc::ElementId", %"struct.cc::OverscrollBehavior", %"class.absl::optional.399" }
%"struct.cc::OverscrollBehavior" = type { i32, i32 }
%"class.absl::optional.399" = type { %"class.absl::optional_internal::optional_data.400" }
%"class.absl::optional_internal::optional_data.400" = type { %"class.absl::optional_internal::optional_data_base.401" }
%"class.absl::optional_internal::optional_data_base.401" = type { %"class.absl::optional_internal::optional_data_dtor_base.402" }
%"class.absl::optional_internal::optional_data_dtor_base.402" = type { i8, %union.anon.403 }
%union.anon.403 = type { %"class.cc::SnapContainerData" }
%"class.cc::SnapContainerData" = type { %"struct.cc::ScrollSnapType", %"class.gfx::RectF", %"class.gfx::ScrollOffset", %"class.gfx::ScrollOffset", %"class.std::__1::vector.404", %"struct.cc::TargetSnapAreaElementIds" }
%"struct.cc::ScrollSnapType" = type { i8, i32, i32 }
%"class.gfx::RectF" = type { %"class.gfx::PointF", %"class.gfx::SizeF" }
%"class.gfx::SizeF" = type { float, float }
%"class.std::__1::vector.404" = type { %"class.std::__1::__vector_base.405" }
%"class.std::__1::__vector_base.405" = type { %"struct.cc::SnapAreaData"*, %"struct.cc::SnapAreaData"*, %"class.std::__1::__compressed_pair.406" }
%"struct.cc::SnapAreaData" = type { %"struct.cc::ScrollSnapAlign", %"class.gfx::RectF", i8, %"struct.cc::ElementId" }
%"struct.cc::ScrollSnapAlign" = type { i32, i32 }
%"class.std::__1::__compressed_pair.406" = type { %"struct.std::__1::__compressed_pair_elem.407" }
%"struct.std::__1::__compressed_pair_elem.407" = type { %"struct.cc::SnapAreaData"* }
%"struct.cc::TargetSnapAreaElementIds" = type { %"struct.cc::ElementId", %"struct.cc::ElementId" }
%"struct.blink::TransformPaintPropertyNode::State::Flags" = type { i8 }
%"class.std::__1::unique_ptr.208" = type { %"class.std::__1::__compressed_pair.209" }
%"class.std::__1::__compressed_pair.209" = type { %"struct.std::__1::__compressed_pair_elem.210" }
%"struct.std::__1::__compressed_pair_elem.210" = type { %"struct.cc::StickyPositionConstraint"* }
%"struct.cc::StickyPositionConstraint" = type { i8, float, float, float, float, %"class.gfx::RectF", %"class.gfx::RectF", %"class.gfx::RectF", %"struct.cc::ElementId", %"struct.cc::ElementId" }
%"class.std::__1::unique_ptr.214" = type { %"class.std::__1::__compressed_pair.215" }
%"class.std::__1::__compressed_pair.215" = type { %"struct.std::__1::__compressed_pair_elem.216" }
%"struct.std::__1::__compressed_pair_elem.216" = type { %"class.blink::GeometryMapperTransformCache"* }
%"class.blink::GeometryMapperTransformCache" = type <{ %"class.blink::FloatSize", %"class.blink::TransformPaintPropertyNode"*, %"class.std::__1::unique_ptr.217", %"class.std::__1::unique_ptr.223", i32, [4 x i8] }>
%"class.std::__1::unique_ptr.217" = type { %"class.std::__1::__compressed_pair.218" }
%"class.std::__1::__compressed_pair.218" = type { %"struct.std::__1::__compressed_pair_elem.219" }
%"struct.std::__1::__compressed_pair_elem.219" = type { %"struct.blink::GeometryMapperTransformCache::PlaneRootTransform"* }
%"struct.blink::GeometryMapperTransformCache::PlaneRootTransform" = type <{ %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix", %"class.blink::TransformPaintPropertyNode"*, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.223" = type { %"class.std::__1::__compressed_pair.224" }
%"class.std::__1::__compressed_pair.224" = type { %"struct.std::__1::__compressed_pair_elem.225" }
%"struct.std::__1::__compressed_pair_elem.225" = type { %"struct.blink::GeometryMapperTransformCache::ScreenTransform"* }
%"struct.blink::GeometryMapperTransformCache::ScreenTransform" = type <{ %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.235" = type { %"class.std::__1::__compressed_pair.236" }
%"class.std::__1::__compressed_pair.236" = type { %"struct.std::__1::__compressed_pair_elem.237" }
%"struct.std::__1::__compressed_pair_elem.237" = type { %"struct.blink::LayerSelectionData"* }
%"struct.blink::LayerSelectionData" = type { %"class.absl::optional.238", %"class.absl::optional.238" }
%"class.absl::optional.238" = type { %"class.absl::optional_internal::optional_data.239" }
%"class.absl::optional_internal::optional_data.239" = type { %"class.absl::optional_internal::optional_data_base.240" }
%"class.absl::optional_internal::optional_data_base.240" = type { %"class.absl::optional_internal::optional_data_dtor_base.241" }
%"class.absl::optional_internal::optional_data_dtor_base.241" = type { i8, [3 x i8], %union.anon.242 }
%union.anon.242 = type { %"struct.blink::PaintedSelectionBound" }
%"struct.blink::PaintedSelectionBound" = type <{ i32, %"class.blink::IntPoint", %"class.blink::IntPoint", i8, [3 x i8] }>
%"class.blink::PaintChunker" = type <{ %"class.WTF::Vector.180"*, %"class.absl::optional.248", %"class.blink::PropertyTreeStateOrAlias", %"class.blink::Region", i8, i8, i8, i8, %"class.blink::Color", float, [4 x i8] }>
%"class.absl::optional.248" = type { %"class.absl::optional_internal::optional_data.249" }
%"class.absl::optional_internal::optional_data.249" = type { %"class.absl::optional_internal::optional_data_base.250" }
%"class.absl::optional_internal::optional_data_base.250" = type { %"class.absl::optional_internal::optional_data_dtor_base.251" }
%"class.absl::optional_internal::optional_data_dtor_base.251" = type { i8, %union.anon.252 }
%union.anon.252 = type { %"struct.blink::DisplayItem::Id" }
%"class.blink::PropertyTreeStateOrAlias" = type { %"class.blink::TransformPaintPropertyNodeOrAlias"*, %"class.blink::ClipPaintPropertyNodeOrAlias"*, %"class.blink::EffectPaintPropertyNodeOrAlias"* }
%"class.blink::Region" = type { %"class.blink::IntRect", %"class.blink::Region::Shape" }
%"class.blink::Region::Shape" = type { %"class.WTF::Vector.255", %"class.WTF::Vector.260" }
%"class.WTF::Vector.255" = type { %"class.WTF::VectorBuffer.256" }
%"class.WTF::VectorBuffer.256" = type { %"class.WTF::VectorBufferBase.257", [128 x i8] }
%"class.WTF::VectorBufferBase.257" = type { i32*, i32, i32 }
%"class.WTF::Vector.260" = type { %"class.WTF::VectorBuffer.261" }
%"class.WTF::VectorBuffer.261" = type { %"class.WTF::VectorBufferBase.262", [128 x i8] }
%"class.WTF::VectorBufferBase.262" = type { %"struct.blink::Region::Span"*, i32, i32 }
%"struct.blink::Region::Span" = type { i32, i32 }
%"class.WTF::Vector.265" = type { %"class.WTF::VectorBuffer.266" }
%"class.WTF::VectorBuffer.266" = type { %"class.WTF::VectorBufferBase.267" }
%"class.WTF::VectorBufferBase.267" = type { %"struct.blink::FrameFirstPaint"*, i32, i32 }
%"struct.blink::FrameFirstPaint" = type <{ i8*, i8, [7 x i8] }>
%"class.WTF::HashMap" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type opaque
%"class.WTF::String" = type { %class.scoped_refptr.272 }
%class.scoped_refptr.272 = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic.273" }
%"struct.std::__1::atomic.273" = type { %"struct.std::__1::__atomic_base.274" }
%"struct.std::__1::__atomic_base.274" = type { %"struct.std::__1::__atomic_base.275" }
%"struct.std::__1::__atomic_base.275" = type { %"struct.std::__1::__cxx_atomic_impl.276" }
%"struct.std::__1::__cxx_atomic_impl.276" = type { %"struct.std::__1::__cxx_atomic_base_impl.277" }
%"struct.std::__1::__cxx_atomic_base_impl.277" = type { i32 }
%"struct.blink::PaintController::SubsequencesData" = type { %"class.WTF::HashMap.278", %"class.WTF::Vector.283" }
%"class.WTF::HashMap.278" = type { %"class.WTF::HashTable.279" }
%"class.WTF::HashTable.279" = type <{ %"struct.WTF::KeyValuePair.282"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.282" = type opaque
%"class.WTF::Vector.283" = type { %"class.WTF::VectorBuffer.284" }
%"class.WTF::VectorBuffer.284" = type { %"class.WTF::VectorBufferBase.285" }
%"class.WTF::VectorBufferBase.285" = type { %"struct.blink::PaintController::SubsequenceMarkers"*, i32, i32 }
%"struct.blink::PaintController::SubsequenceMarkers" = type { %"class.blink::DisplayItemClient"*, i32, i32 }
%"class.WTF::Vector.288" = type { %"class.WTF::VectorBuffer.289" }
%"class.WTF::VectorBuffer.289" = type { %"class.WTF::VectorBufferBase.290" }
%"class.WTF::VectorBufferBase.290" = type { %"class.std::__1::unique_ptr.291"*, i32, i32 }
%"class.std::__1::unique_ptr.291" = type { %"class.std::__1::__compressed_pair.292" }
%"class.std::__1::__compressed_pair.292" = type { %"struct.std::__1::__compressed_pair_elem.293" }
%"struct.std::__1::__compressed_pair_elem.293" = type { %"class.blink::GraphicsContextState"* }
%"class.blink::GraphicsContextState" = type <{ %"class.cc::PaintFlags", %"class.cc::PaintFlags", %"class.blink::StrokeData", i32, i32, i16, i8, [5 x i8] }>
%"class.cc::PaintFlags" = type <{ %class.sk_sp.294, %class.sk_sp.295, %class.sk_sp.325, %class.sk_sp.326, %class.sk_sp.327, %class.sk_sp, i32, float, float, i32, %union.anon.328, [4 x i8] }>
%class.sk_sp.294 = type { %class.SkPathEffect* }
%class.SkPathEffect = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.295 = type { %"class.cc::PaintShader"* }
%"class.cc::PaintShader" = type <{ %class.SkRefCnt.base, i8, [3 x i8], i32, float, float, i32, i32, i32, i8, [3 x i8], %"class.absl::optional.296", %struct.SkPoint, %struct.SkRect, %struct.SkPoint, %struct.SkPoint, float, float, %"class.cc::PaintImage", %class.sk_sp.118, i32, %"class.absl::optional.301", %"class.std::__1::vector.306", %"class.std::__1::vector.313", %class.sk_sp.320, %class.sk_sp.111, i32, [4 x i8] }>
%"class.absl::optional.296" = type { %"class.absl::optional_internal::optional_data.297" }
%"class.absl::optional_internal::optional_data.297" = type { %"class.absl::optional_internal::optional_data_base.298" }
%"class.absl::optional_internal::optional_data_base.298" = type { %"class.absl::optional_internal::optional_data_dtor_base.299" }
%"class.absl::optional_internal::optional_data_dtor_base.299" = type { i8, %union.anon.300 }
%union.anon.300 = type { %class.SkMatrix }
%class.SkMatrix = type { [9 x float], i32 }
%"class.absl::optional.301" = type { %"class.absl::optional_internal::optional_data.302" }
%"class.absl::optional_internal::optional_data.302" = type { %"class.absl::optional_internal::optional_data_base.303" }
%"class.absl::optional_internal::optional_data_base.303" = type { %"class.absl::optional_internal::optional_data_dtor_base.304" }
%"class.absl::optional_internal::optional_data_dtor_base.304" = type { i8, %union.anon.305 }
%union.anon.305 = type { %"class.gfx::SizeF" }
%"class.std::__1::vector.306" = type { %"class.std::__1::__vector_base.307" }
%"class.std::__1::__vector_base.307" = type { i32*, i32*, %"class.std::__1::__compressed_pair.308" }
%"class.std::__1::__compressed_pair.308" = type { %"struct.std::__1::__compressed_pair_elem.309" }
%"struct.std::__1::__compressed_pair_elem.309" = type { i32* }
%"class.std::__1::vector.313" = type { %"class.std::__1::__vector_base.314" }
%"class.std::__1::__vector_base.314" = type { float*, float*, %"class.std::__1::__compressed_pair.315" }
%"class.std::__1::__compressed_pair.315" = type { %"struct.std::__1::__compressed_pair_elem.316" }
%"struct.std::__1::__compressed_pair_elem.316" = type { float* }
%class.sk_sp.320 = type { %class.SkPicture* }
%class.SkPicture = type <{ %class.SkRefCnt.base, i32, %"struct.std::__1::atomic.321", [7 x i8] }>
%"struct.std::__1::atomic.321" = type { %"struct.std::__1::__atomic_base.322" }
%"struct.std::__1::__atomic_base.322" = type { %"struct.std::__1::__cxx_atomic_impl.323" }
%"struct.std::__1::__cxx_atomic_impl.323" = type { %"struct.std::__1::__cxx_atomic_base_impl.324" }
%"struct.std::__1::__cxx_atomic_base_impl.324" = type { i8 }
%class.sk_sp.325 = type { %class.SkMaskFilter* }
%class.SkMaskFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.326 = type { %class.SkColorFilter* }
%class.SkColorFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.327 = type { %class.SkDrawLooper* }
%class.SkDrawLooper = type { %class.SkFlattenable.base, [4 x i8] }
%union.anon.328 = type { i32 }
%"class.blink::StrokeData" = type { i32, float, i32, i32, float, %class.sk_sp.294 }
%"class.cc::PaintRecorder" = type { i32 (...)**, %class.scoped_refptr.67, %"class.std::__1::unique_ptr.334" }
%"class.std::__1::unique_ptr.334" = type { %"class.std::__1::__compressed_pair.335" }
%"class.std::__1::__compressed_pair.335" = type { %"struct.std::__1::__compressed_pair_elem.336" }
%"struct.std::__1::__compressed_pair_elem.336" = type { %"class.cc::RecordPaintCanvas"* }
%"class.cc::RecordPaintCanvas" = type { %"class.cc::PaintCanvas", %"class.cc::DisplayItemList"*, %"class.absl::optional.337", %struct.SkRect }
%"class.absl::optional.337" = type { %"class.absl::optional_internal::optional_data.338" }
%"class.absl::optional_internal::optional_data.338" = type { %"class.absl::optional_internal::optional_data_base.339" }
%"class.absl::optional_internal::optional_data_base.339" = type { %"class.absl::optional_internal::optional_data_dtor_base.340" }
%"class.absl::optional_internal::optional_data_dtor_base.340" = type { i8, %union.anon.341 }
%union.anon.341 = type { %class.SkNoDrawCanvas }
%class.SkNoDrawCanvas = type { %class.SkCanvasVirtualEnforcer }
%class.SkCanvasVirtualEnforcer = type { %class.SkCanvas }
%class.SkCanvas = type { i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp.342, [384 x i64], %class.sk_sp.343, %class.SkSurfaceProps, i32, %"class.std::__1::unique_ptr.344", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.350" }
%class.SkDeque = type { i8*, i8*, %"struct.SkDeque::Block"*, %"struct.SkDeque::Block"*, i64, i8*, i32, i32 }
%"struct.SkDeque::Block" = type opaque
%"class.SkCanvas::MCRec" = type opaque
%class.sk_sp.342 = type { %class.SkMarkerStack* }
%class.SkMarkerStack = type opaque
%class.sk_sp.343 = type { %class.SkBaseDevice* }
%class.SkBaseDevice = type opaque
%class.SkSurfaceProps = type { i32, i32 }
%"class.std::__1::unique_ptr.344" = type { %"class.std::__1::__compressed_pair.345" }
%"class.std::__1::__compressed_pair.345" = type { %"struct.std::__1::__compressed_pair_elem.346" }
%"struct.std::__1::__compressed_pair_elem.346" = type { %class.SkRasterHandleAllocator* }
%class.SkRasterHandleAllocator = type { i32 (...)** }
%class.SkSurface_Base = type opaque
%"class.std::__1::unique_ptr.350" = type { %"class.std::__1::__compressed_pair.351" }
%"class.std::__1::__compressed_pair.351" = type { %"struct.std::__1::__compressed_pair_elem.352" }
%"struct.std::__1::__compressed_pair_elem.352" = type { %class.SkGlyphRunBuilder* }
%class.SkGlyphRunBuilder = type opaque
%"class.printing::MetafileSkia" = type opaque
%"class.paint_preview::PaintPreviewTracker" = type opaque
%"class.std::__1::unique_ptr.361" = type { %"class.std::__1::__compressed_pair.362" }
%"class.std::__1::__compressed_pair.362" = type { %"struct.std::__1::__compressed_pair_elem.363" }
%"struct.std::__1::__compressed_pair_elem.363" = type { %"class.blink::DarkModeFilter"* }
%"class.blink::DarkModeFilter" = type { %"struct.blink::DarkModeFilter::ImmutableData", %"class.absl::optional.382", %"class.std::__1::unique_ptr.387" }
%"struct.blink::DarkModeFilter::ImmutableData" = type { %"struct.blink::DarkModeSettings", %"class.std::__1::unique_ptr.364", %"class.std::__1::unique_ptr.364", %"class.std::__1::unique_ptr.370", %"class.std::__1::unique_ptr.376", %class.sk_sp.326 }
%"struct.blink::DarkModeSettings" = type <{ i32, i8, [3 x i8], float, float, i32, i32, i32, i8, [3 x i8] }>
%"class.std::__1::unique_ptr.364" = type { %"class.std::__1::__compressed_pair.365" }
%"class.std::__1::__compressed_pair.365" = type { %"struct.std::__1::__compressed_pair_elem.366" }
%"struct.std::__1::__compressed_pair_elem.366" = type { %"class.blink::DarkModeColorClassifier"* }
%"class.blink::DarkModeColorClassifier" = type opaque
%"class.std::__1::unique_ptr.370" = type { %"class.std::__1::__compressed_pair.371" }
%"class.std::__1::__compressed_pair.371" = type { %"struct.std::__1::__compressed_pair_elem.372" }
%"struct.std::__1::__compressed_pair_elem.372" = type { %"class.blink::DarkModeImageClassifier"* }
%"class.blink::DarkModeImageClassifier" = type opaque
%"class.std::__1::unique_ptr.376" = type { %"class.std::__1::__compressed_pair.377" }
%"class.std::__1::__compressed_pair.377" = type { %"struct.std::__1::__compressed_pair_elem.378" }
%"struct.std::__1::__compressed_pair_elem.378" = type { %"class.blink::DarkModeColorFilter"* }
%"class.blink::DarkModeColorFilter" = type opaque
%"class.absl::optional.382" = type { %"class.absl::optional_internal::optional_data.383" }
%"class.absl::optional_internal::optional_data.383" = type { %"class.absl::optional_internal::optional_data_base.384" }
%"class.absl::optional_internal::optional_data_base.384" = type { %"class.absl::optional_internal::optional_data_dtor_base.385" }
%"class.absl::optional_internal::optional_data_dtor_base.385" = type { i8, %union.anon.386 }
%union.anon.386 = type { i32 }
%"class.std::__1::unique_ptr.387" = type { %"class.std::__1::__compressed_pair.388" }
%"class.std::__1::__compressed_pair.388" = type { %"struct.std::__1::__compressed_pair_elem.389" }
%"struct.std::__1::__compressed_pair_elem.389" = type { %"class.blink::DarkModeInvertedColorCache"* }
%"class.blink::DarkModeInvertedColorCache" = type opaque
%"class.absl::optional.417" = type { %"class.absl::optional_internal::optional_data.418" }
%"class.absl::optional_internal::optional_data.418" = type { %"class.absl::optional_internal::optional_data_base.419" }
%"class.absl::optional_internal::optional_data_base.419" = type { %"class.absl::optional_internal::optional_data_dtor_base.420" }
%"class.absl::optional_internal::optional_data_dtor_base.420" = type { i8, %union.anon.421 }
%union.anon.421 = type { %"class.blink::PropertyTreeStateOrAlias" }
%"class.blink::DisplayItem" = type <{ %"class.blink::DisplayItemClient"*, %"class.blink::IntRect", i32, i16, [2 x i8] }>
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.logging::CheckOpResult" = type { i8* }

$_ZN5blink15DisplayItemList16AllocateItemSlotEv = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink15DisplayItemList8ItemSlotEEEmm = comdat any

$_ZN3WTF6VectorIN5blink15DisplayItemList8ItemSlotELj0ENS_18PartitionAllocatorEE2atEj = comdat any

@.str = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@.str.2 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.3 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink15DisplayItemList8ItemSlotEEEPKcv = private unnamed_addr constant [80 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::DisplayItemList::ItemSlot]\00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1

@_ZN5blink23ForeignLayerDisplayItemC1ERKNS_17DisplayItemClientENS_11DisplayItem4TypeE13scoped_refptrIN2cc5LayerEERKNS_8IntPointE = hidden unnamed_addr alias void (%"class.blink::ForeignLayerDisplayItem"*, %"class.blink::DisplayItemClient"*, i32, %"class.cc::Layer"*, %"class.blink::IntPoint"*), void (%"class.blink::ForeignLayerDisplayItem"*, %"class.blink::DisplayItemClient"*, i32, %"class.cc::Layer"*, %"class.blink::IntPoint"*)* @_ZN5blink23ForeignLayerDisplayItemC2ERKNS_17DisplayItemClientENS_11DisplayItem4TypeE13scoped_refptrIN2cc5LayerEERKNS_8IntPointE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink23ForeignLayerDisplayItemC2ERKNS_17DisplayItemClientENS_11DisplayItem4TypeE13scoped_refptrIN2cc5LayerEERKNS_8IntPointE(%"class.blink::ForeignLayerDisplayItem"* nocapture, %"class.blink::DisplayItemClient"* dereferenceable(16), i32, %"class.cc::Layer"*, %"class.blink::IntPoint"* nocapture readonly dereferenceable(8)) unnamed_addr #0 align 2 {
  %6 = ptrtoint %"class.cc::Layer"* %3 to i64
  %7 = getelementptr inbounds %"class.cc::Layer", %"class.cc::Layer"* %3, i64 0, i32 5, i32 2, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.cc::Layer", %"class.cc::Layer"* %3, i64 0, i32 5, i32 2, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = bitcast %"class.blink::IntPoint"* %4 to i64*
  %12 = load i64, i64* %11, align 4
  %13 = zext i32 %10 to i64
  %14 = shl nuw i64 %13, 32
  %15 = zext i32 %8 to i64
  %16 = or i64 %14, %15
  %17 = getelementptr inbounds %"class.blink::ForeignLayerDisplayItem", %"class.blink::ForeignLayerDisplayItem"* %0, i64 0, i32 0, i32 0
  store %"class.blink::DisplayItemClient"* %1, %"class.blink::DisplayItemClient"** %17, align 8
  %18 = getelementptr inbounds %"class.blink::ForeignLayerDisplayItem", %"class.blink::ForeignLayerDisplayItem"* %0, i64 0, i32 0, i32 1
  %19 = bitcast %"class.blink::IntRect"* %18 to i64*
  store i64 %12, i64* %19, align 8
  %20 = getelementptr inbounds %"class.blink::ForeignLayerDisplayItem", %"class.blink::ForeignLayerDisplayItem"* %0, i64 0, i32 0, i32 1, i32 1
  %21 = bitcast %"class.blink::IntSize"* %20 to i64*
  store i64 %16, i64* %21, align 8
  %22 = getelementptr inbounds %"class.blink::ForeignLayerDisplayItem", %"class.blink::ForeignLayerDisplayItem"* %0, i64 0, i32 0, i32 2
  store i32 0, i32* %22, align 8
  %23 = getelementptr inbounds %"class.blink::ForeignLayerDisplayItem", %"class.blink::ForeignLayerDisplayItem"* %0, i64 0, i32 0, i32 3
  %24 = trunc i32 %2 to i16
  %25 = load i16, i16* %23, align 4
  %26 = and i16 %24, 255
  %27 = and i16 %25, -256
  %28 = or i16 %27, %26
  store i16 %28, i16* %23, align 4
  %29 = bitcast %"class.blink::DisplayItemClient"* %1 to i8 (%"class.blink::DisplayItemClient"*)***
  %30 = load i8 (%"class.blink::DisplayItemClient"*)**, i8 (%"class.blink::DisplayItemClient"*)*** %29, align 8
  %31 = getelementptr inbounds i8 (%"class.blink::DisplayItemClient"*)*, i8 (%"class.blink::DisplayItemClient"*)** %30, i64 4
  %32 = load i8 (%"class.blink::DisplayItemClient"*)*, i8 (%"class.blink::DisplayItemClient"*)** %31, align 8
  %33 = tail call zeroext i8 %32(%"class.blink::DisplayItemClient"* %1) #6
  %34 = load i16, i16* %23, align 4
  %35 = and i8 %33, 3
  %36 = zext i8 %35 to i16
  %37 = shl nuw nsw i16 %36, 8
  %38 = and i16 %34, -1793
  %39 = or i16 %37, %38
  store i16 %39, i16* %23, align 4
  %40 = getelementptr inbounds %"class.blink::DisplayItemClient", %"class.blink::DisplayItemClient"* %1, i64 0, i32 1
  %41 = load i8, i8* %40, align 8
  %42 = icmp ne i8 %41, 20
  %43 = zext i1 %42 to i16
  %44 = shl nuw nsw i16 %43, 11
  %45 = and i16 %39, -31745
  %46 = or i16 %45, %44
  %47 = or i16 %46, 4096
  store i16 %47, i16* %23, align 4
  %48 = getelementptr inbounds %"class.blink::ForeignLayerDisplayItem", %"class.blink::ForeignLayerDisplayItem"* %0, i64 0, i32 1
  %49 = bitcast %class.scoped_refptr* %48 to i64*
  store i64 %6, i64* %49, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink23ForeignLayerDisplayItem30EqualsForUnderInvalidationImplERKS0_(%"class.blink::ForeignLayerDisplayItem"* nocapture readonly, %"class.blink::ForeignLayerDisplayItem"* nocapture readonly dereferenceable(40)) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.blink::ForeignLayerDisplayItem", %"class.blink::ForeignLayerDisplayItem"* %0, i64 0, i32 1, i32 0
  %4 = load %"class.cc::Layer"*, %"class.cc::Layer"** %3, align 8
  %5 = getelementptr inbounds %"class.blink::ForeignLayerDisplayItem", %"class.blink::ForeignLayerDisplayItem"* %1, i64 0, i32 1, i32 0
  %6 = load %"class.cc::Layer"*, %"class.cc::Layer"** %5, align 8
  %7 = icmp eq %"class.cc::Layer"* %4, %6
  ret i1 %7
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink18RecordForeignLayerERNS_15GraphicsContextERKNS_17DisplayItemClientENS_11DisplayItem4TypeE13scoped_refptrIN2cc5LayerEERKNS_8IntPointEPKNS_24PropertyTreeStateOrAliasE(%"class.blink::GraphicsContext"* nocapture readonly dereferenceable(112), %"class.blink::DisplayItemClient"* dereferenceable(16), i32, %"class.cc::Layer"*, %"class.blink::IntPoint"* nocapture readonly dereferenceable(8), %"class.blink::PropertyTreeStateOrAlias"*) local_unnamed_addr #0 {
  %7 = alloca %"class.absl::optional.417", align 8
  %8 = ptrtoint %"class.cc::Layer"* %3 to i64
  %9 = getelementptr inbounds %"class.blink::GraphicsContext", %"class.blink::GraphicsContext"* %0, i64 0, i32 1
  %10 = load %"class.blink::PaintController"*, %"class.blink::PaintController"** %9, align 8
  %11 = getelementptr inbounds %"class.absl::optional.417", %"class.absl::optional.417"* %7, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #6
  %12 = bitcast %"class.absl::optional.417"* %7 to i64*
  store i64 -6148914691236517206, i64* %12, align 8
  store i8 0, i8* %11, align 8
  %13 = getelementptr inbounds %"class.absl::optional.417", %"class.absl::optional.417"* %7, i64 0, i32 0, i32 0, i32 0, i32 1
  %14 = bitcast %union.anon.421* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 24, i1 false) #6
  %15 = icmp eq %"class.blink::PropertyTreeStateOrAlias"* %5, null
  br i1 %15, label %76, label %16

16:                                               ; preds = %6
  %17 = getelementptr inbounds %"class.blink::PaintController", %"class.blink::PaintController"* %10, i64 0, i32 3, i32 2
  %18 = bitcast %"class.blink::PropertyTreeStateOrAlias"* %17 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %14, i8* align 8 %18, i64 24, i1 false) #6
  store i8 1, i8* %11, align 8
  tail call void @_ZN5blink15PaintController33UpdateCurrentPaintChunkPropertiesEPKNS_11DisplayItem2IdERKNS_24PropertyTreeStateOrAliasE(%"class.blink::PaintController"* %10, %"struct.blink::DisplayItem::Id"* null, %"class.blink::PropertyTreeStateOrAlias"* nonnull dereferenceable(24) %5) #6
  %19 = getelementptr inbounds %"class.blink::PaintController", %"class.blink::PaintController"* %10, i64 0, i32 2, i32 0
  %20 = load %"class.blink::PaintArtifact"*, %"class.blink::PaintArtifact"** %19, align 8
  %21 = getelementptr inbounds %"class.blink::PaintArtifact", %"class.blink::PaintArtifact"* %20, i64 0, i32 2
  %22 = tail call %"struct.blink::DisplayItemList::ItemSlot"* @_ZN5blink15DisplayItemList16AllocateItemSlotEv(%"class.blink::DisplayItemList"* %21) #6
  %23 = getelementptr inbounds %"class.cc::Layer", %"class.cc::Layer"* %3, i64 0, i32 5, i32 2, i32 0
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %"class.cc::Layer", %"class.cc::Layer"* %3, i64 0, i32 5, i32 2, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = bitcast %"class.blink::IntPoint"* %4 to i64*
  %28 = load i64, i64* %27, align 4
  %29 = zext i32 %26 to i64
  %30 = shl nuw i64 %29, 32
  %31 = zext i32 %24 to i64
  %32 = or i64 %30, %31
  %33 = bitcast %"struct.blink::DisplayItemList::ItemSlot"* %22 to %"class.blink::DisplayItemClient"**
  store %"class.blink::DisplayItemClient"* %1, %"class.blink::DisplayItemClient"** %33, align 8
  %34 = getelementptr inbounds %"struct.blink::DisplayItemList::ItemSlot", %"struct.blink::DisplayItemList::ItemSlot"* %22, i64 0, i32 0, i64 8
  %35 = bitcast i8* %34 to i64*
  store i64 %28, i64* %35, align 8
  %36 = getelementptr inbounds %"struct.blink::DisplayItemList::ItemSlot", %"struct.blink::DisplayItemList::ItemSlot"* %22, i64 0, i32 0, i64 16
  %37 = bitcast i8* %36 to i64*
  store i64 %32, i64* %37, align 8
  %38 = getelementptr inbounds %"struct.blink::DisplayItemList::ItemSlot", %"struct.blink::DisplayItemList::ItemSlot"* %22, i64 0, i32 0, i64 24
  %39 = bitcast i8* %38 to i32*
  store i32 0, i32* %39, align 8
  %40 = getelementptr inbounds %"struct.blink::DisplayItemList::ItemSlot", %"struct.blink::DisplayItemList::ItemSlot"* %22, i64 0, i32 0, i64 28
  %41 = bitcast i8* %40 to i16*
  %42 = trunc i32 %2 to i16
  %43 = load i16, i16* %41, align 4
  %44 = and i16 %42, 255
  %45 = and i16 %43, -256
  %46 = or i16 %45, %44
  store i16 %46, i16* %41, align 4
  %47 = bitcast %"class.blink::DisplayItemClient"* %1 to i8 (%"class.blink::DisplayItemClient"*)***
  %48 = load i8 (%"class.blink::DisplayItemClient"*)**, i8 (%"class.blink::DisplayItemClient"*)*** %47, align 8
  %49 = getelementptr inbounds i8 (%"class.blink::DisplayItemClient"*)*, i8 (%"class.blink::DisplayItemClient"*)** %48, i64 4
  %50 = load i8 (%"class.blink::DisplayItemClient"*)*, i8 (%"class.blink::DisplayItemClient"*)** %49, align 8
  %51 = tail call zeroext i8 %50(%"class.blink::DisplayItemClient"* %1) #6
  %52 = load i16, i16* %41, align 4
  %53 = and i8 %51, 3
  %54 = zext i8 %53 to i16
  %55 = shl nuw nsw i16 %54, 8
  %56 = and i16 %52, -1793
  %57 = or i16 %55, %56
  store i16 %57, i16* %41, align 4
  %58 = getelementptr inbounds %"class.blink::DisplayItemClient", %"class.blink::DisplayItemClient"* %1, i64 0, i32 1
  %59 = load i8, i8* %58, align 8
  %60 = icmp ne i8 %59, 20
  %61 = zext i1 %60 to i16
  %62 = shl nuw nsw i16 %61, 11
  %63 = and i16 %57, -31745
  %64 = or i16 %63, %62
  %65 = or i16 %64, 4096
  store i16 %65, i16* %41, align 4
  %66 = getelementptr inbounds %"struct.blink::DisplayItemList::ItemSlot", %"struct.blink::DisplayItemList::ItemSlot"* %22, i64 0, i32 0, i64 32
  %67 = bitcast i8* %66 to i64*
  store i64 %8, i64* %67, align 8
  %68 = bitcast %"struct.blink::DisplayItemList::ItemSlot"* %22 to %"class.blink::DisplayItem"*
  %69 = getelementptr inbounds %"class.blink::PaintController", %"class.blink::PaintController"* %10, i64 0, i32 19
  %70 = load i32, i32* %69, align 8
  store i32 %70, i32* %39, align 8
  tail call void @_ZN5blink15PaintController14ProcessNewItemERNS_11DisplayItemE(%"class.blink::PaintController"* %10, %"class.blink::DisplayItem"* dereferenceable(32) %68) #6
  %71 = load i8, i8* %11, align 8, !range !2
  %72 = icmp eq i8 %71, 0
  br i1 %72, label %73, label %74, !prof !3

73:                                               ; preds = %16
  tail call void @llvm.trap() #6
  unreachable

74:                                               ; preds = %16
  %75 = getelementptr inbounds %"class.absl::optional.417", %"class.absl::optional.417"* %7, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  call void @_ZN5blink15PaintController33UpdateCurrentPaintChunkPropertiesEPKNS_11DisplayItem2IdERKNS_24PropertyTreeStateOrAliasE(%"class.blink::PaintController"* %10, %"struct.blink::DisplayItem::Id"* null, %"class.blink::PropertyTreeStateOrAlias"* dereferenceable(24) %75) #6
  br label %129

76:                                               ; preds = %6
  %77 = getelementptr inbounds %"class.blink::PaintController", %"class.blink::PaintController"* %10, i64 0, i32 2, i32 0
  %78 = load %"class.blink::PaintArtifact"*, %"class.blink::PaintArtifact"** %77, align 8
  %79 = getelementptr inbounds %"class.blink::PaintArtifact", %"class.blink::PaintArtifact"* %78, i64 0, i32 2
  %80 = tail call %"struct.blink::DisplayItemList::ItemSlot"* @_ZN5blink15DisplayItemList16AllocateItemSlotEv(%"class.blink::DisplayItemList"* %79) #6
  %81 = getelementptr inbounds %"class.cc::Layer", %"class.cc::Layer"* %3, i64 0, i32 5, i32 2, i32 0
  %82 = load i32, i32* %81, align 4
  %83 = getelementptr inbounds %"class.cc::Layer", %"class.cc::Layer"* %3, i64 0, i32 5, i32 2, i32 1
  %84 = load i32, i32* %83, align 4
  %85 = bitcast %"class.blink::IntPoint"* %4 to i64*
  %86 = load i64, i64* %85, align 4
  %87 = zext i32 %84 to i64
  %88 = shl nuw i64 %87, 32
  %89 = zext i32 %82 to i64
  %90 = or i64 %88, %89
  %91 = bitcast %"struct.blink::DisplayItemList::ItemSlot"* %80 to %"class.blink::DisplayItemClient"**
  store %"class.blink::DisplayItemClient"* %1, %"class.blink::DisplayItemClient"** %91, align 8
  %92 = getelementptr inbounds %"struct.blink::DisplayItemList::ItemSlot", %"struct.blink::DisplayItemList::ItemSlot"* %80, i64 0, i32 0, i64 8
  %93 = bitcast i8* %92 to i64*
  store i64 %86, i64* %93, align 8
  %94 = getelementptr inbounds %"struct.blink::DisplayItemList::ItemSlot", %"struct.blink::DisplayItemList::ItemSlot"* %80, i64 0, i32 0, i64 16
  %95 = bitcast i8* %94 to i64*
  store i64 %90, i64* %95, align 8
  %96 = getelementptr inbounds %"struct.blink::DisplayItemList::ItemSlot", %"struct.blink::DisplayItemList::ItemSlot"* %80, i64 0, i32 0, i64 24
  %97 = bitcast i8* %96 to i32*
  store i32 0, i32* %97, align 8
  %98 = getelementptr inbounds %"struct.blink::DisplayItemList::ItemSlot", %"struct.blink::DisplayItemList::ItemSlot"* %80, i64 0, i32 0, i64 28
  %99 = bitcast i8* %98 to i16*
  %100 = trunc i32 %2 to i16
  %101 = load i16, i16* %99, align 4
  %102 = and i16 %100, 255
  %103 = and i16 %101, -256
  %104 = or i16 %103, %102
  store i16 %104, i16* %99, align 4
  %105 = bitcast %"class.blink::DisplayItemClient"* %1 to i8 (%"class.blink::DisplayItemClient"*)***
  %106 = load i8 (%"class.blink::DisplayItemClient"*)**, i8 (%"class.blink::DisplayItemClient"*)*** %105, align 8
  %107 = getelementptr inbounds i8 (%"class.blink::DisplayItemClient"*)*, i8 (%"class.blink::DisplayItemClient"*)** %106, i64 4
  %108 = load i8 (%"class.blink::DisplayItemClient"*)*, i8 (%"class.blink::DisplayItemClient"*)** %107, align 8
  %109 = tail call zeroext i8 %108(%"class.blink::DisplayItemClient"* %1) #6
  %110 = load i16, i16* %99, align 4
  %111 = and i8 %109, 3
  %112 = zext i8 %111 to i16
  %113 = shl nuw nsw i16 %112, 8
  %114 = and i16 %110, -1793
  %115 = or i16 %113, %114
  store i16 %115, i16* %99, align 4
  %116 = getelementptr inbounds %"class.blink::DisplayItemClient", %"class.blink::DisplayItemClient"* %1, i64 0, i32 1
  %117 = load i8, i8* %116, align 8
  %118 = icmp ne i8 %117, 20
  %119 = zext i1 %118 to i16
  %120 = shl nuw nsw i16 %119, 11
  %121 = and i16 %115, -31745
  %122 = or i16 %121, %120
  %123 = or i16 %122, 4096
  store i16 %123, i16* %99, align 4
  %124 = getelementptr inbounds %"struct.blink::DisplayItemList::ItemSlot", %"struct.blink::DisplayItemList::ItemSlot"* %80, i64 0, i32 0, i64 32
  %125 = bitcast i8* %124 to i64*
  store i64 %8, i64* %125, align 8
  %126 = bitcast %"struct.blink::DisplayItemList::ItemSlot"* %80 to %"class.blink::DisplayItem"*
  %127 = getelementptr inbounds %"class.blink::PaintController", %"class.blink::PaintController"* %10, i64 0, i32 19
  %128 = load i32, i32* %127, align 8
  store i32 %128, i32* %97, align 8
  tail call void @_ZN5blink15PaintController14ProcessNewItemERNS_11DisplayItemE(%"class.blink::PaintController"* %10, %"class.blink::DisplayItem"* dereferenceable(32) %126) #6
  br label %129

129:                                              ; preds = %74, %76
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN5blink15PaintController33UpdateCurrentPaintChunkPropertiesEPKNS_11DisplayItem2IdERKNS_24PropertyTreeStateOrAliasE(%"class.blink::PaintController"*, %"struct.blink::DisplayItem::Id"*, %"class.blink::PropertyTreeStateOrAlias"* dereferenceable(24)) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN5blink15PaintController14ProcessNewItemERNS_11DisplayItemE(%"class.blink::PaintController"*, %"class.blink::DisplayItem"* dereferenceable(32)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.blink::DisplayItemList::ItemSlot"* @_ZN5blink15DisplayItemList16AllocateItemSlotEv(%"class.blink::DisplayItemList"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::DisplayItemList", %"class.blink::DisplayItemList"* %0, i64 0, i32 0
  %3 = getelementptr inbounds %"class.blink::DisplayItemList", %"class.blink::DisplayItemList"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.blink::DisplayItemList", %"class.blink::DisplayItemList"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %8 = load i32, i32* %7, align 8
  br label %45

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.blink::DisplayItemList", %"class.blink::DisplayItemList"* %0, i64 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds %"class.blink::DisplayItemList", %"class.blink::DisplayItemList"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = icmp ult i32 %13, %11
  br i1 %14, label %15, label %45, !prof !4

15:                                               ; preds = %9
  %16 = getelementptr inbounds %"class.blink::DisplayItemList", %"class.blink::DisplayItemList"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %17 = load %"struct.blink::DisplayItemList::ItemSlot"*, %"struct.blink::DisplayItemList::ItemSlot"** %16, align 8
  %18 = icmp eq %"struct.blink::DisplayItemList::ItemSlot"* %17, null
  %19 = zext i32 %11 to i64
  %20 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink15DisplayItemList8ItemSlotEEEmm(i64 %19) #6
  %21 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %20, i8* getelementptr inbounds ([80 x i8], [80 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink15DisplayItemList8ItemSlotEEEPKcv, i64 0, i64 0)) #6
  br i1 %18, label %22, label %27

22:                                               ; preds = %15
  %23 = ptrtoint i8* %21 to i64
  %24 = bitcast %"class.blink::DisplayItemList"* %0 to i64*
  store atomic i64 %23, i64* %24 monotonic, align 8
  %25 = udiv i64 %20, 40
  %26 = trunc i64 %25 to i32
  store i32 %26, i32* %12, align 8
  br label %45

27:                                               ; preds = %15
  %28 = udiv i64 %20, 40
  %29 = ptrtoint i8* %21 to i64
  %30 = load %"struct.blink::DisplayItemList::ItemSlot"*, %"struct.blink::DisplayItemList::ItemSlot"** %16, align 8
  %31 = icmp ne i8* %21, null
  %32 = icmp ne %"struct.blink::DisplayItemList::ItemSlot"* %30, null
  %33 = and i1 %31, %32
  br i1 %33, label %34, label %40, !prof !4

34:                                               ; preds = %27
  %35 = load i32, i32* %3, align 4
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds %"struct.blink::DisplayItemList::ItemSlot", %"struct.blink::DisplayItemList::ItemSlot"* %30, i64 0, i32 0, i64 0
  %38 = mul nuw nsw i64 %36, 40
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %21, i8* align 8 %37, i64 %38, i1 false) #6
  %39 = load %"struct.blink::DisplayItemList::ItemSlot"*, %"struct.blink::DisplayItemList::ItemSlot"** %16, align 8
  br label %40

40:                                               ; preds = %34, %27
  %41 = phi %"struct.blink::DisplayItemList::ItemSlot"* [ %30, %27 ], [ %39, %34 ]
  %42 = getelementptr inbounds %"struct.blink::DisplayItemList::ItemSlot", %"struct.blink::DisplayItemList::ItemSlot"* %41, i64 0, i32 0, i64 0
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %42) #6
  %43 = bitcast %"class.blink::DisplayItemList"* %0 to i64*
  store atomic i64 %29, i64* %43 monotonic, align 8
  %44 = trunc i64 %28 to i32
  store i32 %44, i32* %12, align 8
  br label %45

45:                                               ; preds = %6, %40, %22, %9
  %46 = phi i32 [ %8, %6 ], [ %44, %40 ], [ %26, %22 ], [ %13, %9 ]
  %47 = load i32, i32* %3, align 4
  %48 = add i32 %47, 1
  %49 = getelementptr inbounds %"class.blink::DisplayItemList", %"class.blink::DisplayItemList"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %50 = icmp ult i32 %46, %48
  br i1 %50, label %51, label %90

51:                                               ; preds = %45
  %52 = lshr i32 %46, 2
  %53 = add nuw i32 %46, 1
  %54 = add i32 %53, %52
  %55 = icmp ugt i32 %54, 4
  %56 = select i1 %55, i32 %54, i32 4
  %57 = icmp ugt i32 %56, %48
  %58 = select i1 %57, i32 %56, i32 %48
  %59 = icmp ult i32 %46, %58
  br i1 %59, label %60, label %90, !prof !4

60:                                               ; preds = %51
  %61 = getelementptr inbounds %"class.blink::DisplayItemList", %"class.blink::DisplayItemList"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %62 = load %"struct.blink::DisplayItemList::ItemSlot"*, %"struct.blink::DisplayItemList::ItemSlot"** %61, align 8
  %63 = icmp eq %"struct.blink::DisplayItemList::ItemSlot"* %62, null
  %64 = zext i32 %58 to i64
  %65 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink15DisplayItemList8ItemSlotEEEmm(i64 %64) #6
  %66 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %65, i8* getelementptr inbounds ([80 x i8], [80 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink15DisplayItemList8ItemSlotEEEPKcv, i64 0, i64 0)) #6
  br i1 %63, label %67, label %72

67:                                               ; preds = %60
  %68 = ptrtoint i8* %66 to i64
  %69 = bitcast %"class.blink::DisplayItemList"* %0 to i64*
  store atomic i64 %68, i64* %69 monotonic, align 8
  %70 = udiv i64 %65, 40
  %71 = trunc i64 %70 to i32
  store i32 %71, i32* %49, align 8
  br label %90

72:                                               ; preds = %60
  %73 = udiv i64 %65, 40
  %74 = ptrtoint i8* %66 to i64
  %75 = load %"struct.blink::DisplayItemList::ItemSlot"*, %"struct.blink::DisplayItemList::ItemSlot"** %61, align 8
  %76 = icmp ne i8* %66, null
  %77 = icmp ne %"struct.blink::DisplayItemList::ItemSlot"* %75, null
  %78 = and i1 %76, %77
  br i1 %78, label %79, label %85, !prof !4

79:                                               ; preds = %72
  %80 = load i32, i32* %3, align 4
  %81 = zext i32 %80 to i64
  %82 = getelementptr inbounds %"struct.blink::DisplayItemList::ItemSlot", %"struct.blink::DisplayItemList::ItemSlot"* %75, i64 0, i32 0, i64 0
  %83 = mul nuw nsw i64 %81, 40
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %66, i8* align 8 %82, i64 %83, i1 false) #6
  %84 = load %"struct.blink::DisplayItemList::ItemSlot"*, %"struct.blink::DisplayItemList::ItemSlot"** %61, align 8
  br label %85

85:                                               ; preds = %79, %72
  %86 = phi %"struct.blink::DisplayItemList::ItemSlot"* [ %75, %72 ], [ %84, %79 ]
  %87 = getelementptr inbounds %"struct.blink::DisplayItemList::ItemSlot", %"struct.blink::DisplayItemList::ItemSlot"* %86, i64 0, i32 0, i64 0
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %87) #6
  %88 = bitcast %"class.blink::DisplayItemList"* %0 to i64*
  store atomic i64 %74, i64* %88 monotonic, align 8
  %89 = trunc i64 %73 to i32
  store i32 %89, i32* %49, align 8
  br label %90

90:                                               ; preds = %45, %51, %67, %85
  %91 = getelementptr inbounds %"class.blink::DisplayItemList", %"class.blink::DisplayItemList"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %92 = load %"struct.blink::DisplayItemList::ItemSlot"*, %"struct.blink::DisplayItemList::ItemSlot"** %91, align 8
  %93 = load i32, i32* %3, align 4
  %94 = zext i32 %93 to i64
  %95 = getelementptr inbounds %"struct.blink::DisplayItemList::ItemSlot", %"struct.blink::DisplayItemList::ItemSlot"* %92, i64 %94
  %96 = zext i32 %48 to i64
  %97 = getelementptr inbounds %"struct.blink::DisplayItemList::ItemSlot", %"struct.blink::DisplayItemList::ItemSlot"* %92, i64 %96
  %98 = getelementptr inbounds %"struct.blink::DisplayItemList::ItemSlot", %"struct.blink::DisplayItemList::ItemSlot"* %95, i64 0, i32 0, i64 0
  %99 = ptrtoint %"struct.blink::DisplayItemList::ItemSlot"* %97 to i64
  %100 = ptrtoint %"struct.blink::DisplayItemList::ItemSlot"* %95 to i64
  %101 = sub i64 %99, %100
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %98, i8 0, i64 %101, i1 false) #6
  store i32 %48, i32* %3, align 4
  %102 = tail call dereferenceable(40) %"struct.blink::DisplayItemList::ItemSlot"* @_ZN3WTF6VectorIN5blink15DisplayItemList8ItemSlotELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %2, i32 %47) #6
  %103 = load i32, i32* %3, align 4
  %104 = add i32 %103, -1
  %105 = tail call dereferenceable(40) %"struct.blink::DisplayItemList::ItemSlot"* @_ZN3WTF6VectorIN5blink15DisplayItemList8ItemSlotELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %2, i32 %104) #6
  ret %"struct.blink::DisplayItemList::ItemSlot"* %105
}

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink15DisplayItemList8ItemSlotEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #6
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 53634662
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #6
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 53634662) #6
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.2, i64 0, i64 0), i8* %11, i8* %12) #6
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #6
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.3, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #6
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #6
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #6
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #6
  %20 = mul i64 %0, 40
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #6
  ret i64 %21
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #3

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #3

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #3

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #3

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #3

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(40) %"struct.blink::DisplayItemList::ItemSlot"* @_ZN3WTF6VectorIN5blink15DisplayItemList8ItemSlotELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #6
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #6
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #6
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i8* %14, i8* %15) #6
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #6
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 1172, %"class.logging::CheckOpResult"* nonnull %4) #6
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #6
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #6
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #6
  %23 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"struct.blink::DisplayItemList::ItemSlot"*, %"struct.blink::DisplayItemList::ItemSlot"** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"struct.blink::DisplayItemList::ItemSlot", %"struct.blink::DisplayItemList::ItemSlot"* %24, i64 %25
  ret %"struct.blink::DisplayItemList::ItemSlot"* %26
}

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #3

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { cold noreturn nounwind }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 2000}
!4 = !{!"branch_weights", i32 2000, i32 1}
