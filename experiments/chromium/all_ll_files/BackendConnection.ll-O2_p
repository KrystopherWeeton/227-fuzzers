; ModuleID = '../../third_party/dawn/src/dawn_native/BackendConnection.cpp'
source_filename = "../../third_party/dawn/src/dawn_native/BackendConnection.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.dawn_native::BackendConnection" = type <{ i32 (...)**, %"class.dawn_native::InstanceBase"*, i32, [4 x i8] }>
%"class.dawn_native::InstanceBase" = type opaque
%class.Result = type { i32, %"class.std::__1::unique_ptr", %"class.std::__1::vector.9" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.dawn_native::ErrorData"* }
%"class.dawn_native::ErrorData" = type { i32, %"class.std::__1::basic_string", %"class.std::__1::vector" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.0" }
%"class.std::__1::__compressed_pair.0" = type { %"struct.std::__1::__compressed_pair_elem.1" }
%"struct.std::__1::__compressed_pair_elem.1" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.dawn_native::ErrorData::BacktraceRecord"*, %"struct.dawn_native::ErrorData::BacktraceRecord"*, %"class.std::__1::__compressed_pair.3" }
%"struct.dawn_native::ErrorData::BacktraceRecord" = type { i8*, i8*, i32 }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.dawn_native::ErrorData::BacktraceRecord"* }
%"class.std::__1::vector.9" = type { %"class.std::__1::__vector_base.10" }
%"class.std::__1::__vector_base.10" = type { %"class.std::__1::unique_ptr.11"*, %"class.std::__1::unique_ptr.11"*, %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::unique_ptr.11" = type { %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"class.dawn_native::AdapterBase"* }
%"class.dawn_native::AdapterBase" = type <{ i32 (...)**, %"struct.dawn_native::PCIInfo", i32, [4 x i8], %"class.std::__1::basic_string", %"struct.dawn_native::ExtensionsSet", %"class.dawn_native::InstanceBase"*, i32, [4 x i8] }>
%"struct.dawn_native::PCIInfo" = type { i32, i32, %"class.std::__1::basic_string" }
%"struct.dawn_native::ExtensionsSet" = type { %"class.std::__1::bitset" }
%"class.std::__1::bitset" = type { %"class.std::__1::__bitset" }
%"class.std::__1::__bitset" = type { i64 }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"class.std::__1::unique_ptr.11"* }
%"struct.dawn_native::AdapterDiscoveryOptionsBase" = type { i32 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

$_ZN11dawn_native17BackendConnectionD2Ev = comdat any

$_ZN11dawn_native17BackendConnectionD0Ev = comdat any

@_ZTVN11dawn_native17BackendConnectionE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.dawn_native::BackendConnection"*)* @_ZN11dawn_native17BackendConnectionD2Ev to i8*), i8* bitcast (void (%"class.dawn_native::BackendConnection"*)* @_ZN11dawn_native17BackendConnectionD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%class.Result*, %"class.dawn_native::BackendConnection"*, %"struct.dawn_native::AdapterDiscoveryOptionsBase"*)* @_ZN11dawn_native17BackendConnection16DiscoverAdaptersEPKNS_27AdapterDiscoveryOptionsBaseE to i8*)] }, align 8
@.str = private unnamed_addr constant [51 x i8] c"DiscoverAdapters not implemented for this backend.\00", align 1
@.str.1 = private unnamed_addr constant [61 x i8] c"../../third_party/dawn/src/dawn_native/BackendConnection.cpp\00", align 1
@__func__._ZN11dawn_native17BackendConnection16DiscoverAdaptersEPKNS_27AdapterDiscoveryOptionsBaseE = private unnamed_addr constant [17 x i8] c"DiscoverAdapters\00", align 1

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN11dawn_native17BackendConnectionC2EPNS_12InstanceBaseEN4wgpu11BackendTypeE(%"class.dawn_native::BackendConnection"* nocapture, %"class.dawn_native::InstanceBase"*, i32) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.dawn_native::BackendConnection", %"class.dawn_native::BackendConnection"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN11dawn_native17BackendConnectionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.dawn_native::BackendConnection", %"class.dawn_native::BackendConnection"* %0, i64 0, i32 1
  store %"class.dawn_native::InstanceBase"* %1, %"class.dawn_native::InstanceBase"** %5, align 8
  %6 = getelementptr inbounds %"class.dawn_native::BackendConnection", %"class.dawn_native::BackendConnection"* %0, i64 0, i32 2
  store i32 %2, i32* %6, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK11dawn_native17BackendConnection7GetTypeEv(%"class.dawn_native::BackendConnection"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.dawn_native::BackendConnection", %"class.dawn_native::BackendConnection"* %0, i64 0, i32 2
  %3 = load i32, i32* %2, align 8
  ret i32 %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.dawn_native::InstanceBase"* @_ZNK11dawn_native17BackendConnection11GetInstanceEv(%"class.dawn_native::BackendConnection"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.dawn_native::BackendConnection", %"class.dawn_native::BackendConnection"* %0, i64 0, i32 1
  %3 = load %"class.dawn_native::InstanceBase"*, %"class.dawn_native::InstanceBase"** %2, align 8
  ret %"class.dawn_native::InstanceBase"* %3
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11dawn_native17BackendConnection16DiscoverAdaptersEPKNS_27AdapterDiscoveryOptionsBaseE(%class.Result* noalias nocapture sret, %"class.dawn_native::BackendConnection"* nocapture readnone, %"struct.dawn_native::AdapterDiscoveryOptionsBase"* nocapture readnone) unnamed_addr #2 align 2 {
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = tail call i8* @_Znwm(i64 64) #8
  %6 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %5, i8** %6, align 8
  %7 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %8 = bitcast i64* %7 to <2 x i64>*
  store <2 x i64> <i64 50, i64 -9223372036854775744>, <2 x i64>* %8, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %5, i8* align 1 getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i64 50, i1 false) #9
  %9 = getelementptr inbounds i8, i8* %5, i64 50
  store i8 0, i8* %9, align 1
  %10 = call %"class.dawn_native::ErrorData"* @_ZN11dawn_native9ErrorData6CreateENS_17InternalErrorTypeENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEPKcSA_i(i32 0, %"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__func__._ZN11dawn_native17BackendConnection16DiscoverAdaptersEPKNS_27AdapterDiscoveryOptionsBaseE, i64 0, i64 0), i32 33) #9
  %11 = ptrtoint %"class.dawn_native::ErrorData"* %10 to i64
  %12 = getelementptr inbounds %class.Result, %class.Result* %0, i64 0, i32 0
  store i32 1, i32* %12, align 8
  %13 = getelementptr inbounds %class.Result, %class.Result* %0, i64 0, i32 1
  %14 = bitcast %"class.std::__1::unique_ptr"* %13 to i64*
  store i64 %11, i64* %14, align 8
  %15 = getelementptr inbounds %class.Result, %class.Result* %0, i64 0, i32 2
  %16 = bitcast %"class.std::__1::vector.9"* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 24, i1 false) #9
  %17 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %18 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %17, i64 0, i32 1, i32 0
  %19 = load i8, i8* %18, align 1
  %20 = icmp slt i8 %19, 0
  br i1 %20, label %21, label %23

21:                                               ; preds = %3
  %22 = load i8*, i8** %6, align 8
  call void @_ZdlPv(i8* %22) #8
  br label %23

23:                                               ; preds = %3, %21
  ret void
}

declare %"class.dawn_native::ErrorData"* @_ZN11dawn_native9ErrorData6CreateENS_17InternalErrorTypeENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEPKcSA_i(i32, %"class.std::__1::basic_string"*, i8*, i8*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN11dawn_native17BackendConnectionD2Ev(%"class.dawn_native::BackendConnection"*) unnamed_addr #2 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN11dawn_native17BackendConnectionD0Ev(%"class.dawn_native::BackendConnection"*) unnamed_addr #2 comdat align 2 {
  tail call void @llvm.trap() #10
  unreachable
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #7

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { cold noreturn nounwind }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { argmemonly nounwind }
attributes #8 = { builtin nounwind }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
