; ModuleID = '../../third_party/skia/src/utils/SkJSON.cpp'
source_filename = "../../third_party/skia/src/utils/SkJSON.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.skjson::Value" = type { [8 x i8] }
%"class.skjson::NullValue" = type { %"class.skjson::Value" }
%"class.skjson::BoolValue" = type { %"class.skjson::Value" }
%"class.skjson::NumberValue" = type { %"class.skjson::Value" }
%"class.skjson::ArrayValue" = type { %"class.skjson::VectorValue" }
%"class.skjson::VectorValue" = type { %"class.skjson::Value" }
%class.SkArenaAlloc = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes, [4 x i8] }>
%class.SkFibBlockSizes = type { i32 }
%"class.skjson::StringValue" = type { %"class.skjson::Value" }
%"class.skjson::ObjectValue" = type { %"class.skjson::VectorValue.0" }
%"class.skjson::VectorValue.0" = type { %"class.skjson::Value" }
%"struct.skjson::Member" = type { %"class.skjson::StringValue", %"class.skjson::Value" }
%"class.skjson::DOM" = type { %class.SkArenaAlloc, %"class.skjson::Value" }
%class.SkString = type { %class.sk_sp }
%class.sk_sp = type { %"struct.SkString::Rec"* }
%"struct.SkString::Rec" = type <{ i32, %"struct.std::__1::atomic", i8, [3 x i8] }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.SkDynamicMemoryWStream = type { %class.SkWStream, %"struct.SkDynamicMemoryWStream::Block"*, %"struct.SkDynamicMemoryWStream::Block"*, i64 }
%class.SkWStream = type { i32 (...)** }
%"struct.SkDynamicMemoryWStream::Block" = type opaque
%class.sk_sp.2 = type { %class.SkData* }
%class.SkData = type { %class.SkNVRefCnt, void (i8*, i8*)*, i8*, i8*, i64 }
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"class.skjson::(anonymous namespace)::DOMParser" = type { %class.SkArenaAlloc*, %"class.std::__1::vector", %"class.std::__1::vector.4", i64, i8*, %class.SkString }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.skjson::Value"*, %"class.skjson::Value"*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.skjson::Value"* }
%"class.std::__1::vector.4" = type { %"class.std::__1::__vector_base.5" }
%"class.std::__1::__vector_base.5" = type { i8*, i8*, %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { i8* }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIcNS_9allocatorIcEEE6insertIPcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIcNS_15iterator_traitsIS7_E9referenceEEE5valueENS_11__wrap_iterIS5_EEE4typeENSB_IPKcEES7_S7_ = comdat any

$_ZNSt3__16vectorIN6skjson5ValueENS_9allocatorIS2_EEE8__appendEm = comdat any

@_ZZNK6skjson11ObjectValueixEPKcE6g_null = internal global %"class.skjson::Value" zeroinitializer, align 8
@_ZGVZNK6skjson11ObjectValueixEPKcE6g_null = internal global i64 0, align 8
@_ZTV22SkDynamicMemoryWStream = external unnamed_addr constant { [7 x i8*] }, align 8
@.str = private unnamed_addr constant [5 x i8] c"null\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"true\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"false\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c",\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"]\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"{\00", align 1
@.str.8 = private unnamed_addr constant [2 x i8] c":\00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c"}\00", align 1
@_ZN6skjson12_GLOBAL__N_113g_token_flagsE = internal unnamed_addr constant <{ [128 x i8], [128 x i8] }> <{ [128 x i8] c"\04\04\04\04\04\04\04\04\04\06\06\04\04\06\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\03\01\04\01\01\01\01\01\01\01\01\01\01\01\11\01\19\19\19\19\19\19\19\19\19\19\01\01\01\01\01\01\01\01\01\01\01\11\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\04%\01\01\01\01\01\01\01\11\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01%\01\01", [128 x i8] zeroinitializer }>, align 16
@_ZZN6skjson12_GLOBAL__N_15pow10EiE13g_pow10_table = internal unnamed_addr constant [63 x float] [float 0x398039D660000000, float 0x39B4484C00000000, float 0x39E95A5F00000000, float 0x3A1FB0F6C0000000, float 0x3A53CE9A40000000, float 0x3A88C240C0000000, float 0x3ABEF2D100000000, float 0x3AF357C2A0000000, float 0x3B282DB340000000, float 0x3B5E392020000000, float 0x3B92E3B400000000, float 0x3BC79CA100000000, float 0x3BFD83C940000000, float 0x3C32725DE0000000, float 0x3C670EF540000000, float 0x3C9CD2B2A0000000, float 0x3CD203AFA0000000, float 0x3D06849B80000000, float 0x3D3C25C260000000, float 0x3D71979980000000, float 0x3DA5FD7FE0000000, float 0x3DDB7CDFE0000000, float 0x3E112E0BE0000000, float 0x3E45798EE0000000, float 0x3E7AD7F2A0000000, float 0x3EB0C6F7A0000000, float 0x3EE4F8B580000000, float 0x3F1A36E2E0000000, float 0x3F50624DE0000000, float 0x3F847AE140000000, float 0x3FB99999A0000000, float 1.000000e+00, float 1.000000e+01, float 1.000000e+02, float 1.000000e+03, float 1.000000e+04, float 1.000000e+05, float 1.000000e+06, float 1.000000e+07, float 1.000000e+08, float 1.000000e+09, float 1.000000e+10, float 0x42374876E0000000, float 0x426D1A94A0000000, float 0x42A2309CE0000000, float 0x42D6BCC420000000, float 0x430C6BF520000000, float 0x4341C37940000000, float 0x4376345780000000, float 0x43ABC16D60000000, float 0x43E158E460000000, float 0x4415AF1D80000000, float 0x444B1AE4E0000000, float 0x4480F0CF00000000, float 0x44B52D02C0000000, float 0x44EA784380000000, float 0x45208B2A20000000, float 0x4554ADF4C0000000, float 0x4589D971E0000000, float 0x45C027E720000000, float 0x45F431E100000000, float 0x46293E5940000000, float 0x465F8DEF80000000], align 16

@_ZN6skjson9NullValueC1Ev = hidden unnamed_addr alias void (%"class.skjson::NullValue"*), void (%"class.skjson::NullValue"*)* @_ZN6skjson9NullValueC2Ev
@_ZN6skjson9BoolValueC1Eb = hidden unnamed_addr alias void (%"class.skjson::BoolValue"*, i1), void (%"class.skjson::BoolValue"*, i1)* @_ZN6skjson9BoolValueC2Eb
@_ZN6skjson11NumberValueC1Ei = hidden unnamed_addr alias void (%"class.skjson::NumberValue"*, i32), void (%"class.skjson::NumberValue"*, i32)* @_ZN6skjson11NumberValueC2Ei
@_ZN6skjson11NumberValueC1Ef = hidden unnamed_addr alias void (%"class.skjson::NumberValue"*, float), void (%"class.skjson::NumberValue"*, float)* @_ZN6skjson11NumberValueC2Ef
@_ZN6skjson10ArrayValueC1EPKNS_5ValueEmR12SkArenaAlloc = hidden unnamed_addr alias void (%"class.skjson::ArrayValue"*, %"class.skjson::Value"*, i64, %class.SkArenaAlloc*), void (%"class.skjson::ArrayValue"*, %"class.skjson::Value"*, i64, %class.SkArenaAlloc*)* @_ZN6skjson10ArrayValueC2EPKNS_5ValueEmR12SkArenaAlloc
@_ZN6skjson11StringValueC1EPKcmR12SkArenaAlloc = hidden unnamed_addr alias void (%"class.skjson::StringValue"*, i8*, i64, %class.SkArenaAlloc*), void (%"class.skjson::StringValue"*, i8*, i64, %class.SkArenaAlloc*)* @_ZN6skjson11StringValueC2EPKcmR12SkArenaAlloc
@_ZN6skjson11ObjectValueC1EPKNS_6MemberEmR12SkArenaAlloc = hidden unnamed_addr alias void (%"class.skjson::ObjectValue"*, %"struct.skjson::Member"*, i64, %class.SkArenaAlloc*), void (%"class.skjson::ObjectValue"*, %"struct.skjson::Member"*, i64, %class.SkArenaAlloc*)* @_ZN6skjson11ObjectValueC2EPKNS_6MemberEmR12SkArenaAlloc
@_ZN6skjson3DOMC1EPKcm = hidden unnamed_addr alias void (%"class.skjson::DOM"*, i8*, i64), void (%"class.skjson::DOM"*, i8*, i64)* @_ZN6skjson3DOMC2EPKcm

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN6skjson5Value11init_taggedENS0_3TagE(%"class.skjson::Value"* nocapture, i8 zeroext) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %0, i64 0, i32 0, i64 0
  %4 = bitcast %"class.skjson::Value"* %0 to i64*
  store i64 0, i64* %4, align 8
  store i8 %1, i8* %3, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6skjson5Value19init_tagged_pointerENS0_3TagEPv(%"class.skjson::Value"* nocapture, i8 zeroext, i8*) local_unnamed_addr #2 align 2 {
  %4 = ptrtoint i8* %2 to i64
  %5 = bitcast %"class.skjson::Value"* %0 to i64*
  store i64 %4, i64* %5, align 8
  %6 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %0, i64 0, i32 0, i64 0
  %7 = trunc i64 %4 to i8
  %8 = or i8 %7, %1
  store i8 %8, i8* %6, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN6skjson9NullValueC2Ev(%"class.skjson::NullValue"* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.skjson::NullValue"* %0 to i64*
  store i64 1, i64* %2, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN6skjson9BoolValueC2Eb(%"class.skjson::BoolValue"* nocapture, i1 zeroext) unnamed_addr #0 align 2 {
  %3 = zext i1 %1 to i8
  %4 = bitcast %"class.skjson::BoolValue"* %0 to i64*
  store i64 2, i64* %4, align 8
  %5 = getelementptr inbounds %"class.skjson::BoolValue", %"class.skjson::BoolValue"* %0, i64 0, i32 0, i32 0, i64 1
  store i8 %3, i8* %5, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN6skjson11NumberValueC2Ei(%"class.skjson::NumberValue"* nocapture, i32) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.skjson::NumberValue"* %0 to i64*
  store i64 3, i64* %3, align 8
  %4 = getelementptr inbounds %"class.skjson::NumberValue", %"class.skjson::NumberValue"* %0, i64 0, i32 0, i32 0, i64 4
  %5 = bitcast i8* %4 to i32*
  store i32 %1, i32* %5, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN6skjson11NumberValueC2Ef(%"class.skjson::NumberValue"* nocapture, float) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.skjson::NumberValue"* %0 to i64*
  store i64 4, i64* %3, align 8
  %4 = getelementptr inbounds %"class.skjson::NumberValue", %"class.skjson::NumberValue"* %0, i64 0, i32 0, i32 0, i64 4
  %5 = bitcast i8* %4 to float*
  store float %1, float* %5, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6skjson10ArrayValueC2EPKNS_5ValueEmR12SkArenaAlloc(%"class.skjson::ArrayValue"* nocapture, %"class.skjson::Value"* nocapture readonly, i64, %class.SkArenaAlloc* dereferenceable(32)) unnamed_addr #3 align 2 {
  %5 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %1, i64 0, i32 0, i64 0
  %6 = shl i64 %2, 3
  %7 = add i64 %6, 8
  %8 = icmp ult i64 %7, 4294967296
  br i1 %8, label %10, label %9

9:                                                ; preds = %4
  tail call void @abort() #13
  unreachable

10:                                               ; preds = %4
  %11 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %3, i64 0, i32 1
  %12 = bitcast i8** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 0, %13
  %15 = and i64 %14, 7
  %16 = and i64 %7, 4294967288
  %17 = or i64 %15, %16
  %18 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %3, i64 0, i32 2
  %19 = bitcast i8** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %13
  %22 = icmp ugt i64 %17, %21
  br i1 %22, label %23, label %28

23:                                               ; preds = %10
  %24 = trunc i64 %7 to i32
  tail call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %3, i32 %24, i32 8) #14
  %25 = load i64, i64* %12, align 8
  %26 = sub i64 0, %25
  %27 = and i64 %26, 7
  br label %28

28:                                               ; preds = %23, %10
  %29 = phi i64 [ %25, %23 ], [ %13, %10 ]
  %30 = phi i64 [ %27, %23 ], [ %15, %10 ]
  %31 = inttoptr i64 %29 to i8*
  %32 = getelementptr inbounds i8, i8* %31, i64 %30
  %33 = getelementptr inbounds i8, i8* %32, i64 %7
  store i8* %33, i8** %11, align 8
  %34 = bitcast i8* %32 to i64*
  store i64 %2, i64* %34, align 8
  %35 = icmp eq i64 %6, 0
  br i1 %35, label %38, label %36

36:                                               ; preds = %28
  %37 = getelementptr inbounds i8, i8* %32, i64 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %37, i8* align 1 %5, i64 %6, i1 false) #14
  br label %38

38:                                               ; preds = %28, %36
  %39 = ptrtoint i8* %32 to i64
  %40 = bitcast %"class.skjson::ArrayValue"* %0 to i64*
  store i64 %39, i64* %40, align 8
  %41 = getelementptr inbounds %"class.skjson::ArrayValue", %"class.skjson::ArrayValue"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %42 = trunc i64 %39 to i8
  %43 = or i8 %42, 6
  store i8 %43, i8* %41, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6skjson11StringValueC2EPKcmR12SkArenaAlloc(%"class.skjson::StringValue"* nocapture, i8* readonly, i64, %class.SkArenaAlloc* dereferenceable(32)) unnamed_addr #3 align 2 {
  %5 = icmp ugt i64 %2, 6
  br i1 %5, label %6, label %50

6:                                                ; preds = %4
  %7 = add i64 %2, 9
  %8 = icmp ult i64 %7, 4294967296
  br i1 %8, label %10, label %9

9:                                                ; preds = %6
  tail call void @abort() #13
  unreachable

10:                                               ; preds = %6
  %11 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %3, i64 0, i32 1
  %12 = bitcast i8** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 0, %13
  %15 = and i64 %14, 7
  %16 = and i64 %7, 4294967295
  %17 = add nuw nsw i64 %15, %16
  %18 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %3, i64 0, i32 2
  %19 = bitcast i8** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %13
  %22 = icmp ugt i64 %17, %21
  br i1 %22, label %23, label %28

23:                                               ; preds = %10
  %24 = trunc i64 %7 to i32
  tail call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %3, i32 %24, i32 8) #14
  %25 = load i64, i64* %12, align 8
  %26 = sub i64 0, %25
  %27 = and i64 %26, 7
  br label %28

28:                                               ; preds = %23, %10
  %29 = phi i64 [ %25, %23 ], [ %13, %10 ]
  %30 = phi i64 [ %27, %23 ], [ %15, %10 ]
  %31 = inttoptr i64 %29 to i8*
  %32 = getelementptr inbounds i8, i8* %31, i64 %30
  %33 = getelementptr inbounds i8, i8* %32, i64 %7
  store i8* %33, i8** %11, align 8
  %34 = bitcast i8* %32 to i64*
  store i64 %2, i64* %34, align 8
  %35 = icmp eq i64 %2, 0
  br i1 %35, label %38, label %36

36:                                               ; preds = %28
  %37 = getelementptr inbounds i8, i8* %32, i64 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %37, i8* align 1 %1, i64 %2, i1 false) #14
  br label %38

38:                                               ; preds = %36, %28
  %39 = ptrtoint i8* %32 to i64
  %40 = bitcast %"class.skjson::StringValue"* %0 to i64*
  store i64 %39, i64* %40, align 8
  %41 = getelementptr inbounds %"class.skjson::StringValue", %"class.skjson::StringValue"* %0, i64 0, i32 0, i32 0, i64 0
  %42 = trunc i64 %39 to i8
  %43 = or i8 %42, 5
  store i8 %43, i8* %41, align 8
  %44 = load i64, i64* %40, align 8
  %45 = and i64 %44, -8
  %46 = inttoptr i64 %45 to i64*
  %47 = getelementptr inbounds i64, i64* %46, i64 1
  %48 = bitcast i64* %47 to i8*
  %49 = getelementptr inbounds i8, i8* %48, i64 %2
  store i8 0, i8* %49, align 1
  br label %55

50:                                               ; preds = %4
  %51 = bitcast %"class.skjson::StringValue"* %0 to i64*
  store i64 0, i64* %51, align 8
  %52 = icmp eq i64 %2, 0
  br i1 %52, label %55, label %53

53:                                               ; preds = %50
  %54 = getelementptr inbounds %"class.skjson::StringValue", %"class.skjson::StringValue"* %0, i64 0, i32 0, i32 0, i64 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %54, i8* align 1 %1, i64 %2, i1 false) #14
  br label %55

55:                                               ; preds = %38, %50, %53
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6skjson11ObjectValueC2EPKNS_6MemberEmR12SkArenaAlloc(%"class.skjson::ObjectValue"* nocapture, %"struct.skjson::Member"* nocapture readonly, i64, %class.SkArenaAlloc* dereferenceable(32)) unnamed_addr #3 align 2 {
  %5 = getelementptr inbounds %"struct.skjson::Member", %"struct.skjson::Member"* %1, i64 0, i32 0, i32 0, i32 0, i64 0
  %6 = shl i64 %2, 4
  %7 = or i64 %6, 8
  %8 = icmp ult i64 %7, 4294967296
  br i1 %8, label %10, label %9

9:                                                ; preds = %4
  tail call void @abort() #13
  unreachable

10:                                               ; preds = %4
  %11 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %3, i64 0, i32 1
  %12 = bitcast i8** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 0, %13
  %15 = and i64 %14, 7
  %16 = and i64 %7, 4294967288
  %17 = or i64 %15, %16
  %18 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %3, i64 0, i32 2
  %19 = bitcast i8** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %13
  %22 = icmp ugt i64 %17, %21
  br i1 %22, label %23, label %28

23:                                               ; preds = %10
  %24 = trunc i64 %7 to i32
  tail call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %3, i32 %24, i32 8) #14
  %25 = load i64, i64* %12, align 8
  %26 = sub i64 0, %25
  %27 = and i64 %26, 7
  br label %28

28:                                               ; preds = %23, %10
  %29 = phi i64 [ %25, %23 ], [ %13, %10 ]
  %30 = phi i64 [ %27, %23 ], [ %15, %10 ]
  %31 = inttoptr i64 %29 to i8*
  %32 = getelementptr inbounds i8, i8* %31, i64 %30
  %33 = getelementptr inbounds i8, i8* %32, i64 %7
  store i8* %33, i8** %11, align 8
  %34 = bitcast i8* %32 to i64*
  store i64 %2, i64* %34, align 8
  %35 = icmp eq i64 %6, 0
  br i1 %35, label %38, label %36

36:                                               ; preds = %28
  %37 = getelementptr inbounds i8, i8* %32, i64 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %37, i8* align 1 %5, i64 %6, i1 false) #14
  br label %38

38:                                               ; preds = %28, %36
  %39 = ptrtoint i8* %32 to i64
  %40 = bitcast %"class.skjson::ObjectValue"* %0 to i64*
  store i64 %39, i64* %40, align 8
  %41 = getelementptr inbounds %"class.skjson::ObjectValue", %"class.skjson::ObjectValue"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %42 = trunc i64 %39 to i8
  %43 = or i8 %42, 7
  store i8 %43, i8* %41, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(8) %"class.skjson::Value"* @_ZNK6skjson11ObjectValueixEPKc(%"class.skjson::ObjectValue"* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #3 align 2 {
  %3 = bitcast %"class.skjson::ObjectValue"* %0 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = and i64 %4, -8
  %6 = inttoptr i64 %5 to i64*
  %7 = getelementptr inbounds i64, i64* %6, i64 1
  %8 = bitcast i64* %7 to %"struct.skjson::Member"*
  %9 = load i64, i64* %6, align 8
  %10 = getelementptr inbounds %"struct.skjson::Member", %"struct.skjson::Member"* %8, i64 %9
  br label %11

11:                                               ; preds = %45, %2
  %12 = phi %"struct.skjson::Member"* [ %10, %2 ], [ %15, %45 ]
  %13 = icmp ugt %"struct.skjson::Member"* %12, %8
  br i1 %13, label %14, label %50

14:                                               ; preds = %11
  %15 = getelementptr inbounds %"struct.skjson::Member", %"struct.skjson::Member"* %12, i64 -1
  %16 = getelementptr inbounds %"struct.skjson::Member", %"struct.skjson::Member"* %15, i64 0, i32 0, i32 0, i32 0, i64 0
  %17 = load i8, i8* %16, align 8
  %18 = and i8 %17, 7
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %20, label %22

20:                                               ; preds = %14
  %21 = getelementptr inbounds %"struct.skjson::Member", %"struct.skjson::Member"* %12, i64 -1, i32 0, i32 0, i32 0, i64 1
  br label %29

22:                                               ; preds = %14
  %23 = bitcast %"struct.skjson::Member"* %15 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = and i64 %24, -8
  %26 = inttoptr i64 %25 to i64*
  %27 = getelementptr inbounds i64, i64* %26, i64 1
  %28 = bitcast i64* %27 to i8*
  br label %29

29:                                               ; preds = %20, %22
  %30 = phi i8* [ %28, %22 ], [ %21, %20 ]
  br label %31

31:                                               ; preds = %29, %36
  %32 = phi i8* [ %37, %36 ], [ %1, %29 ]
  %33 = phi i8* [ %38, %36 ], [ %30, %29 ]
  %34 = load i8, i8* %32, align 1
  %35 = icmp eq i8 %34, 0
  br i1 %35, label %41, label %36

36:                                               ; preds = %31
  %37 = getelementptr inbounds i8, i8* %32, i64 1
  %38 = getelementptr inbounds i8, i8* %33, i64 1
  %39 = load i8, i8* %33, align 1
  %40 = icmp eq i8 %34, %39
  br i1 %40, label %31, label %45

41:                                               ; preds = %31
  %42 = load i8, i8* %33, align 1
  %43 = icmp ne i8 %42, 0
  %44 = zext i1 %43 to i32
  br label %45

45:                                               ; preds = %36, %41
  %46 = phi i32 [ %44, %41 ], [ 1, %36 ]
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %11

48:                                               ; preds = %45
  %49 = getelementptr inbounds %"struct.skjson::Member", %"struct.skjson::Member"* %12, i64 -1, i32 1
  br label %58

50:                                               ; preds = %11
  %51 = load atomic i8, i8* bitcast (i64* @_ZGVZNK6skjson11ObjectValueixEPKcE6g_null to i8*) acquire, align 8
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %53, label %58, !prof !2

53:                                               ; preds = %50
  %54 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZNK6skjson11ObjectValueixEPKcE6g_null) #14
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %58, label %56

56:                                               ; preds = %53
  store i64 1, i64* bitcast (%"class.skjson::Value"* @_ZZNK6skjson11ObjectValueixEPKcE6g_null to i64*), align 8
  %57 = tail call {}* @llvm.invariant.start.p0i8(i64 8, i8* getelementptr inbounds (%"class.skjson::Value", %"class.skjson::Value"* @_ZZNK6skjson11ObjectValueixEPKcE6g_null, i64 0, i32 0, i64 0))
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZNK6skjson11ObjectValueixEPKcE6g_null) #14
  br label %58

58:                                               ; preds = %50, %56, %53, %48
  %59 = phi %"class.skjson::Value"* [ %49, %48 ], [ @_ZZNK6skjson11ObjectValueixEPKcE6g_null, %53 ], [ @_ZZNK6skjson11ObjectValueixEPKcE6g_null, %56 ], [ @_ZZNK6skjson11ObjectValueixEPKcE6g_null, %50 ]
  ret %"class.skjson::Value"* %59
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare {}* @llvm.invariant.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK6skjson5Value8toStringEv(%class.SkString* noalias sret, %"class.skjson::Value"*) local_unnamed_addr #3 align 2 {
  %3 = alloca %class.SkDynamicMemoryWStream, align 8
  %4 = alloca %class.sk_sp.2, align 8
  %5 = bitcast %class.SkDynamicMemoryWStream* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %5) #14
  %6 = getelementptr inbounds %class.SkDynamicMemoryWStream, %class.SkDynamicMemoryWStream* %3, i64 0, i32 0, i32 0
  %7 = getelementptr inbounds %class.SkDynamicMemoryWStream, %class.SkDynamicMemoryWStream* %3, i64 0, i32 1
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTV22SkDynamicMemoryWStream, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %8 = bitcast %"struct.SkDynamicMemoryWStream::Block"** %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 24, i1 false) #14
  %9 = getelementptr inbounds %class.SkDynamicMemoryWStream, %class.SkDynamicMemoryWStream* %3, i64 0, i32 0
  call fastcc void @_ZN6skjson12_GLOBAL__N_15WriteERKNS_5ValueEP9SkWStream(%"class.skjson::Value"* dereferenceable(8) %1, %class.SkWStream* nonnull %9)
  %10 = bitcast %class.sk_sp.2* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #14
  %11 = getelementptr inbounds %class.sk_sp.2, %class.sk_sp.2* %4, i64 0, i32 0
  store %class.SkData* inttoptr (i64 -6148914691236517206 to %class.SkData*), %class.SkData** %11, align 8
  call void @_ZN22SkDynamicMemoryWStream12detachAsDataEv(%class.sk_sp.2* nonnull sret %4, %class.SkDynamicMemoryWStream* nonnull %3) #14
  %12 = load %class.SkData*, %class.SkData** %11, align 8
  %13 = getelementptr inbounds %class.SkData, %class.SkData* %12, i64 0, i32 3
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %class.SkData, %class.SkData* %12, i64 0, i32 4
  %16 = load i64, i64* %15, align 8
  call void @_ZN8SkStringC1EPKcm(%class.SkString* %0, i8* %14, i64 %16) #14
  %17 = load %class.SkData*, %class.SkData** %11, align 8
  %18 = icmp eq %class.SkData* %17, null
  br i1 %18, label %25, label %19

19:                                               ; preds = %2
  %20 = getelementptr inbounds %class.SkData, %class.SkData* %17, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %21 = atomicrmw add i32* %20, i32 -1 acq_rel
  %22 = icmp eq i32 %21, 1
  br i1 %22, label %23, label %25

23:                                               ; preds = %19
  call void @_ZN6SkDataD1Ev(%class.SkData* nonnull %17) #14
  %24 = bitcast %class.SkData* %17 to i8*
  call void @_ZN6SkDatadlEPv(i8* nonnull %24) #14
  br label %25

25:                                               ; preds = %2, %19, %23
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #14
  call void @_ZN22SkDynamicMemoryWStreamD1Ev(%class.SkDynamicMemoryWStream* nonnull %3) #14
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN6skjson12_GLOBAL__N_15WriteERKNS_5ValueEP9SkWStream(%"class.skjson::Value"* dereferenceable(8), %class.SkWStream*) unnamed_addr #3 {
  %3 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %0, i64 0, i32 0, i64 0
  %4 = load i8, i8* %3, align 8
  %5 = and i8 %4, 7
  switch i8 %5, label %6 [
    i8 7, label %101
    i8 2, label %12
    i8 3, label %23
    i8 4, label %23
    i8 0, label %38
    i8 5, label %38
    i8 6, label %67
  ]

6:                                                ; preds = %2
  %7 = bitcast %class.SkWStream* %1 to i1 (%class.SkWStream*, i8*, i64)***
  %8 = load i1 (%class.SkWStream*, i8*, i64)**, i1 (%class.SkWStream*, i8*, i64)*** %7, align 8
  %9 = getelementptr inbounds i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %8, i64 2
  %10 = load i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %9, align 8
  %11 = tail call zeroext i1 %10(%class.SkWStream* %1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i64 4) #14
  br label %146

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %0, i64 0, i32 0, i64 1
  %14 = load i8, i8* %13, align 1, !range !3
  %15 = icmp eq i8 %14, 0
  %16 = select i1 %15, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0)
  %17 = select i1 %15, i64 5, i64 4
  %18 = bitcast %class.SkWStream* %1 to i1 (%class.SkWStream*, i8*, i64)***
  %19 = load i1 (%class.SkWStream*, i8*, i64)**, i1 (%class.SkWStream*, i8*, i64)*** %18, align 8
  %20 = getelementptr inbounds i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %19, i64 2
  %21 = load i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %20, align 8
  %22 = tail call zeroext i1 %21(%class.SkWStream* %1, i8* %16, i64 %17) #14
  br label %146

23:                                               ; preds = %2, %2
  %24 = icmp eq i8 %5, 3
  %25 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %0, i64 0, i32 0, i64 4
  br i1 %24, label %26, label %30

26:                                               ; preds = %23
  %27 = bitcast i8* %25 to i32*
  %28 = load i32, i32* %27, align 4
  %29 = sitofp i32 %28 to double
  br label %34

30:                                               ; preds = %23
  %31 = bitcast i8* %25 to float*
  %32 = load float, float* %31, align 4
  %33 = fpext float %32 to double
  br label %34

34:                                               ; preds = %26, %30
  %35 = phi double [ %29, %26 ], [ %33, %30 ]
  %36 = fptrunc double %35 to float
  %37 = tail call zeroext i1 @_ZN9SkWStream17writeScalarAsTextEf(%class.SkWStream* %1, float %36) #14
  br label %146

38:                                               ; preds = %2, %2
  %39 = bitcast %class.SkWStream* %1 to i1 (%class.SkWStream*, i8*, i64)***
  %40 = load i1 (%class.SkWStream*, i8*, i64)**, i1 (%class.SkWStream*, i8*, i64)*** %39, align 8
  %41 = getelementptr inbounds i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %40, i64 2
  %42 = load i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %41, align 8
  %43 = tail call zeroext i1 %42(%class.SkWStream* %1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0), i64 1) #14
  %44 = load i8, i8* %3, align 8
  %45 = and i8 %44, 7
  %46 = icmp eq i8 %45, 0
  br i1 %46, label %47, label %49

47:                                               ; preds = %38
  %48 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %0, i64 0, i32 0, i64 1
  br label %56

49:                                               ; preds = %38
  %50 = bitcast %"class.skjson::Value"* %0 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = and i64 %51, -8
  %53 = inttoptr i64 %52 to i64*
  %54 = getelementptr inbounds i64, i64* %53, i64 1
  %55 = bitcast i64* %54 to i8*
  br label %56

56:                                               ; preds = %47, %49
  %57 = phi i8* [ %48, %47 ], [ %55, %49 ]
  %58 = tail call i64 @strlen(i8* %57) #15
  %59 = load i1 (%class.SkWStream*, i8*, i64)**, i1 (%class.SkWStream*, i8*, i64)*** %39, align 8
  %60 = getelementptr inbounds i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %59, i64 2
  %61 = load i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %60, align 8
  %62 = tail call zeroext i1 %61(%class.SkWStream* %1, i8* %57, i64 %58) #14
  %63 = load i1 (%class.SkWStream*, i8*, i64)**, i1 (%class.SkWStream*, i8*, i64)*** %39, align 8
  %64 = getelementptr inbounds i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %63, i64 2
  %65 = load i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %64, align 8
  %66 = tail call zeroext i1 %65(%class.SkWStream* %1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0), i64 1) #14
  br label %146

67:                                               ; preds = %2
  %68 = bitcast %class.SkWStream* %1 to i1 (%class.SkWStream*, i8*, i64)***
  %69 = load i1 (%class.SkWStream*, i8*, i64)**, i1 (%class.SkWStream*, i8*, i64)*** %68, align 8
  %70 = getelementptr inbounds i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %69, i64 2
  %71 = load i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %70, align 8
  %72 = tail call zeroext i1 %71(%class.SkWStream* %1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0), i64 1) #14
  %73 = bitcast %"class.skjson::Value"* %0 to i64*
  %74 = load i64, i64* %73, align 8
  %75 = and i64 %74, -8
  %76 = inttoptr i64 %75 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = add nsw i64 %77, 1
  %79 = getelementptr inbounds i64, i64* %76, i64 %78
  %80 = bitcast i64* %79 to %"class.skjson::Value"*
  %81 = icmp eq i64 %77, 0
  br i1 %81, label %88, label %82

82:                                               ; preds = %67
  %83 = getelementptr inbounds i64, i64* %76, i64 1
  %84 = bitcast i64* %83 to %"class.skjson::Value"*
  tail call fastcc void @_ZN6skjson12_GLOBAL__N_15WriteERKNS_5ValueEP9SkWStream(%"class.skjson::Value"* dereferenceable(8) %84, %class.SkWStream* %1)
  %85 = getelementptr inbounds i64, i64* %76, i64 2
  %86 = bitcast i64* %85 to %"class.skjson::Value"*
  %87 = icmp eq i64 %78, 2
  br i1 %87, label %88, label %93

88:                                               ; preds = %82, %93, %67
  %89 = load i1 (%class.SkWStream*, i8*, i64)**, i1 (%class.SkWStream*, i8*, i64)*** %68, align 8
  %90 = getelementptr inbounds i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %89, i64 2
  %91 = load i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %90, align 8
  %92 = tail call zeroext i1 %91(%class.SkWStream* %1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0), i64 1) #14
  br label %146

93:                                               ; preds = %82, %93
  %94 = phi %"class.skjson::Value"* [ %99, %93 ], [ %86, %82 ]
  %95 = load i1 (%class.SkWStream*, i8*, i64)**, i1 (%class.SkWStream*, i8*, i64)*** %68, align 8
  %96 = getelementptr inbounds i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %95, i64 2
  %97 = load i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %96, align 8
  %98 = tail call zeroext i1 %97(%class.SkWStream* %1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i64 1) #14
  tail call fastcc void @_ZN6skjson12_GLOBAL__N_15WriteERKNS_5ValueEP9SkWStream(%"class.skjson::Value"* dereferenceable(8) %94, %class.SkWStream* %1)
  %99 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %94, i64 1
  %100 = icmp eq %"class.skjson::Value"* %99, %80
  br i1 %100, label %88, label %93, !llvm.loop !4

101:                                              ; preds = %2
  %102 = bitcast %class.SkWStream* %1 to i1 (%class.SkWStream*, i8*, i64)***
  %103 = load i1 (%class.SkWStream*, i8*, i64)**, i1 (%class.SkWStream*, i8*, i64)*** %102, align 8
  %104 = getelementptr inbounds i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %103, i64 2
  %105 = load i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %104, align 8
  %106 = tail call zeroext i1 %105(%class.SkWStream* %1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0), i64 1) #14
  %107 = bitcast %"class.skjson::Value"* %0 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = and i64 %108, -8
  %110 = inttoptr i64 %109 to i64*
  %111 = getelementptr inbounds i64, i64* %110, i64 1
  %112 = bitcast i64* %111 to %"struct.skjson::Member"*
  %113 = load i64, i64* %110, align 8
  %114 = getelementptr inbounds %"struct.skjson::Member", %"struct.skjson::Member"* %112, i64 %113
  %115 = icmp eq %"struct.skjson::Member"* %114, %112
  br i1 %115, label %127, label %116

116:                                              ; preds = %101
  %117 = bitcast i64* %111 to %"class.skjson::Value"*
  tail call fastcc void @_ZN6skjson12_GLOBAL__N_15WriteERKNS_5ValueEP9SkWStream(%"class.skjson::Value"* dereferenceable(8) %117, %class.SkWStream* %1)
  %118 = load i1 (%class.SkWStream*, i8*, i64)**, i1 (%class.SkWStream*, i8*, i64)*** %102, align 8
  %119 = getelementptr inbounds i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %118, i64 2
  %120 = load i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %119, align 8
  %121 = tail call zeroext i1 %120(%class.SkWStream* %1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i64 0, i64 0), i64 1) #14
  %122 = getelementptr inbounds i64, i64* %110, i64 2
  %123 = bitcast i64* %122 to %"class.skjson::Value"*
  tail call fastcc void @_ZN6skjson12_GLOBAL__N_15WriteERKNS_5ValueEP9SkWStream(%"class.skjson::Value"* dereferenceable(8) %123, %class.SkWStream* %1)
  %124 = getelementptr inbounds i64, i64* %110, i64 3
  %125 = bitcast i64* %124 to %"struct.skjson::Member"*
  %126 = icmp eq %"struct.skjson::Member"* %114, %125
  br i1 %126, label %127, label %132

127:                                              ; preds = %116, %132, %101
  %128 = load i1 (%class.SkWStream*, i8*, i64)**, i1 (%class.SkWStream*, i8*, i64)*** %102, align 8
  %129 = getelementptr inbounds i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %128, i64 2
  %130 = load i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %129, align 8
  %131 = tail call zeroext i1 %130(%class.SkWStream* %1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0), i64 1) #14
  br label %146

132:                                              ; preds = %116, %132
  %133 = phi %"struct.skjson::Member"* [ %144, %132 ], [ %125, %116 ]
  %134 = load i1 (%class.SkWStream*, i8*, i64)**, i1 (%class.SkWStream*, i8*, i64)*** %102, align 8
  %135 = getelementptr inbounds i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %134, i64 2
  %136 = load i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %135, align 8
  %137 = tail call zeroext i1 %136(%class.SkWStream* %1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i64 1) #14
  %138 = getelementptr inbounds %"struct.skjson::Member", %"struct.skjson::Member"* %133, i64 0, i32 0, i32 0
  tail call fastcc void @_ZN6skjson12_GLOBAL__N_15WriteERKNS_5ValueEP9SkWStream(%"class.skjson::Value"* dereferenceable(8) %138, %class.SkWStream* %1)
  %139 = load i1 (%class.SkWStream*, i8*, i64)**, i1 (%class.SkWStream*, i8*, i64)*** %102, align 8
  %140 = getelementptr inbounds i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %139, i64 2
  %141 = load i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %140, align 8
  %142 = tail call zeroext i1 %141(%class.SkWStream* %1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i64 0, i64 0), i64 1) #14
  %143 = getelementptr inbounds %"struct.skjson::Member", %"struct.skjson::Member"* %133, i64 0, i32 1
  tail call fastcc void @_ZN6skjson12_GLOBAL__N_15WriteERKNS_5ValueEP9SkWStream(%"class.skjson::Value"* dereferenceable(8) %143, %class.SkWStream* %1)
  %144 = getelementptr inbounds %"struct.skjson::Member", %"struct.skjson::Member"* %133, i64 1
  %145 = icmp eq %"struct.skjson::Member"* %144, %114
  br i1 %145, label %127, label %132, !llvm.loop !6

146:                                              ; preds = %127, %88, %56, %34, %12, %6
  ret void
}

declare void @_ZN22SkDynamicMemoryWStream12detachAsDataEv(%class.sk_sp.2* sret, %class.SkDynamicMemoryWStream*) local_unnamed_addr #5

declare void @_ZN8SkStringC1EPKcm(%class.SkString*, i8*, i64) unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN22SkDynamicMemoryWStreamD1Ev(%class.SkDynamicMemoryWStream*) unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6skjson3DOMC2EPKcm(%"class.skjson::DOM"*, i8*, i64) unnamed_addr #3 align 2 {
  %4 = alloca i8*, align 8
  %5 = alloca %"class.skjson::(anonymous namespace)::DOMParser", align 8
  %6 = getelementptr inbounds %"class.skjson::DOM", %"class.skjson::DOM"* %0, i64 0, i32 0
  tail call void @_ZN12SkArenaAllocC2EPcmm(%class.SkArenaAlloc* %6, i8* null, i64 0, i64 4096) #14
  %7 = bitcast %"class.skjson::(anonymous namespace)::DOMParser"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %7) #14
  %8 = getelementptr inbounds %"class.skjson::(anonymous namespace)::DOMParser", %"class.skjson::(anonymous namespace)::DOMParser"* %5, i64 0, i32 5
  %9 = bitcast %class.SkString* %8 to i64*
  store i64 -6148914691236517206, i64* %9, align 8
  %10 = getelementptr inbounds %"class.skjson::(anonymous namespace)::DOMParser", %"class.skjson::(anonymous namespace)::DOMParser"* %5, i64 0, i32 0
  store %class.SkArenaAlloc* %6, %class.SkArenaAlloc** %10, align 8
  %11 = getelementptr inbounds %"class.skjson::(anonymous namespace)::DOMParser", %"class.skjson::(anonymous namespace)::DOMParser"* %5, i64 0, i32 1
  %12 = getelementptr inbounds %"class.skjson::(anonymous namespace)::DOMParser", %"class.skjson::(anonymous namespace)::DOMParser"* %5, i64 0, i32 2
  %13 = getelementptr inbounds %"class.skjson::(anonymous namespace)::DOMParser", %"class.skjson::(anonymous namespace)::DOMParser"* %5, i64 0, i32 5
  %14 = bitcast %"class.std::__1::vector"* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 64, i1 false) #14
  call void @_ZN8SkStringC1Ev(%class.SkString* %13) #14
  %15 = getelementptr inbounds %"class.skjson::(anonymous namespace)::DOMParser", %"class.skjson::(anonymous namespace)::DOMParser"* %5, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.skjson::Value"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = bitcast %"class.std::__1::vector"* %11 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %17, %19
  %21 = ashr exact i64 %20, 3
  %22 = icmp ult i64 %21, 256
  %23 = inttoptr i64 %19 to %"class.skjson::Value"*
  br i1 %22, label %24, label %44

24:                                               ; preds = %3
  %25 = getelementptr inbounds %"class.skjson::(anonymous namespace)::DOMParser", %"class.skjson::(anonymous namespace)::DOMParser"* %5, i64 0, i32 1, i32 0, i32 1
  %26 = bitcast %"class.skjson::Value"** %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = sub i64 %27, %19
  %29 = ashr exact i64 %28, 3
  %30 = call i8* @_Znwm(i64 2048) #16
  %31 = bitcast i8* %30 to %"class.skjson::Value"*
  %32 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %31, i64 %29
  %33 = ptrtoint %"class.skjson::Value"* %32 to i64
  %34 = getelementptr inbounds i8, i8* %30, i64 2048
  %35 = ptrtoint i8* %34 to i64
  %36 = ptrtoint i8* %30 to i64
  %37 = icmp sgt i64 %28, 0
  br i1 %37, label %38, label %40

38:                                               ; preds = %24
  %39 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %23, i64 0, i32 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %30, i8* align 8 %39, i64 %28, i1 false) #14
  br label %40

40:                                               ; preds = %38, %24
  store i64 %36, i64* %18, align 8
  store i64 %33, i64* %26, align 8
  store i64 %35, i64* %16, align 8
  %41 = icmp eq i64 %19, 0
  br i1 %41, label %44, label %42

42:                                               ; preds = %40
  %43 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %23, i64 0, i32 0, i64 0
  call void @_ZdlPv(i8* %43) #16
  br label %44

44:                                               ; preds = %42, %40, %3
  %45 = getelementptr inbounds %"class.skjson::(anonymous namespace)::DOMParser", %"class.skjson::(anonymous namespace)::DOMParser"* %5, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %46 = bitcast i8** %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = bitcast %"class.std::__1::vector.4"* %12 to i64*
  %49 = load i64, i64* %48, align 8
  %50 = sub i64 %47, %49
  %51 = icmp ult i64 %50, 512
  %52 = inttoptr i64 %49 to i8*
  br i1 %51, label %53, label %69

53:                                               ; preds = %44
  %54 = getelementptr inbounds %"class.skjson::(anonymous namespace)::DOMParser", %"class.skjson::(anonymous namespace)::DOMParser"* %5, i64 0, i32 2, i32 0, i32 1
  %55 = bitcast i8** %54 to i64*
  %56 = load i64, i64* %55, align 8
  %57 = sub i64 %56, %49
  %58 = call i8* @_Znwm(i64 512) #16
  %59 = getelementptr inbounds i8, i8* %58, i64 %57
  %60 = ptrtoint i8* %59 to i64
  %61 = getelementptr inbounds i8, i8* %58, i64 512
  %62 = ptrtoint i8* %61 to i64
  %63 = ptrtoint i8* %58 to i64
  %64 = icmp sgt i64 %57, 0
  br i1 %64, label %65, label %66

65:                                               ; preds = %53
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %58, i8* align 1 %52, i64 %57, i1 false) #14
  br label %66

66:                                               ; preds = %65, %53
  store i64 %63, i64* %48, align 8
  store i64 %60, i64* %55, align 8
  store i64 %62, i64* %46, align 8
  %67 = icmp eq i64 %49, 0
  br i1 %67, label %69, label %68

68:                                               ; preds = %66
  call void @_ZdlPv(i8* nonnull %52) #16
  br label %69

69:                                               ; preds = %44, %66, %68
  %70 = icmp eq i64 %2, 0
  br i1 %70, label %1166, label %71

71:                                               ; preds = %69
  %72 = getelementptr inbounds i8, i8* %1, i64 %2
  br label %73

73:                                               ; preds = %73, %71
  %74 = phi i8* [ %72, %71 ], [ %75, %73 ]
  %75 = getelementptr inbounds i8, i8* %74, i64 -1
  %76 = icmp ule i8* %75, %1
  %77 = load i8, i8* %75, align 1
  %78 = zext i8 %77 to i64
  %79 = getelementptr inbounds [256 x i8], [256 x i8]* bitcast (<{ [128 x i8], [128 x i8] }>* @_ZN6skjson12_GLOBAL__N_113g_token_flagsE to [256 x i8]*), i64 0, i64 %78
  %80 = load i8, i8* %79, align 1
  %81 = and i8 %80, 2
  %82 = icmp eq i8 %81, 0
  %83 = or i1 %76, %82
  br i1 %83, label %84, label %73

84:                                               ; preds = %73
  %85 = and i8 %80, 32
  %86 = icmp eq i8 %85, 0
  br i1 %86, label %1166, label %87

87:                                               ; preds = %84, %87
  %88 = phi i8* [ %95, %87 ], [ %1, %84 ]
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i64
  %91 = getelementptr inbounds [256 x i8], [256 x i8]* bitcast (<{ [128 x i8], [128 x i8] }>* @_ZN6skjson12_GLOBAL__N_113g_token_flagsE to [256 x i8]*), i64 0, i64 %90
  %92 = load i8, i8* %91, align 1
  %93 = and i8 %92, 2
  %94 = icmp eq i8 %93, 0
  %95 = getelementptr inbounds i8, i8* %88, i64 1
  br i1 %94, label %96, label %87

96:                                               ; preds = %87
  %97 = sext i8 %89 to i32
  switch i32 %97, label %1166 [
    i32 123, label %98
    i32 91, label %100
  ]

98:                                               ; preds = %257, %96
  %99 = phi i8* [ %88, %96 ], [ %249, %257 ]
  br label %102

100:                                              ; preds = %257, %96
  %101 = phi i8* [ %249, %257 ], [ %88, %96 ]
  br label %1021

102:                                              ; preds = %98, %102
  %103 = phi i8* [ %104, %102 ], [ %99, %98 ]
  %104 = getelementptr inbounds i8, i8* %103, i64 1
  %105 = load i8, i8* %104, align 1
  %106 = zext i8 %105 to i64
  %107 = getelementptr inbounds [256 x i8], [256 x i8]* bitcast (<{ [128 x i8], [128 x i8] }>* @_ZN6skjson12_GLOBAL__N_113g_token_flagsE to [256 x i8]*), i64 0, i64 %106
  %108 = load i8, i8* %107, align 1
  %109 = and i8 %108, 2
  %110 = icmp eq i8 %109, 0
  br i1 %110, label %111, label %102

111:                                              ; preds = %102
  %112 = getelementptr inbounds %"class.skjson::(anonymous namespace)::DOMParser", %"class.skjson::(anonymous namespace)::DOMParser"* %5, i64 0, i32 3
  %113 = load i64, i64* %112, align 8
  %114 = getelementptr inbounds %"class.skjson::(anonymous namespace)::DOMParser", %"class.skjson::(anonymous namespace)::DOMParser"* %5, i64 0, i32 1, i32 0, i32 1
  %115 = load %"class.skjson::Value"*, %"class.skjson::Value"** %114, align 8
  %116 = load %"class.skjson::Value"*, %"class.skjson::Value"** %15, align 8
  %117 = icmp ult %"class.skjson::Value"* %115, %116
  %118 = ptrtoint %"class.skjson::Value"* %116 to i64
  br i1 %117, label %119, label %124

119:                                              ; preds = %111
  %120 = bitcast %"class.skjson::Value"* %115 to i64*
  store i64 %113, i64* %120, align 8
  %121 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %115, i64 1
  %122 = ptrtoint %"class.skjson::Value"* %121 to i64
  %123 = bitcast %"class.skjson::Value"** %114 to i64*
  store i64 %122, i64* %123, align 8
  br label %171

124:                                              ; preds = %111
  %125 = ptrtoint %"class.skjson::Value"* %115 to i64
  %126 = bitcast %"class.skjson::Value"** %114 to i64*
  %127 = load i64, i64* %18, align 8
  %128 = sub i64 %125, %127
  %129 = ashr exact i64 %128, 3
  %130 = add nsw i64 %129, 1
  %131 = icmp ugt i64 %130, 2305843009213693951
  %132 = inttoptr i64 %127 to %"class.skjson::Value"*
  br i1 %131, label %133, label %135

133:                                              ; preds = %124
  %134 = bitcast %"class.std::__1::vector"* %11 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %134) #13
  unreachable

135:                                              ; preds = %124
  %136 = sub i64 %118, %127
  %137 = ashr exact i64 %136, 3
  %138 = icmp ult i64 %137, 1152921504606846975
  br i1 %138, label %139, label %147

139:                                              ; preds = %135
  %140 = ashr exact i64 %136, 2
  %141 = icmp ult i64 %140, %130
  %142 = select i1 %141, i64 %130, i64 %140
  %143 = icmp eq i64 %142, 0
  br i1 %143, label %152, label %144

144:                                              ; preds = %139
  %145 = icmp ugt i64 %142, 2305843009213693951
  br i1 %145, label %146, label %147

146:                                              ; preds = %144
  call void @abort() #13
  unreachable

147:                                              ; preds = %144, %135
  %148 = phi i64 [ %142, %144 ], [ 2305843009213693951, %135 ]
  %149 = shl i64 %148, 3
  %150 = call i8* @_Znwm(i64 %149) #16
  %151 = bitcast i8* %150 to %"class.skjson::Value"*
  br label %152

152:                                              ; preds = %147, %139
  %153 = phi i64 [ %148, %147 ], [ 0, %139 ]
  %154 = phi %"class.skjson::Value"* [ %151, %147 ], [ null, %139 ]
  %155 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %154, i64 %129
  %156 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %154, i64 %153
  %157 = ptrtoint %"class.skjson::Value"* %156 to i64
  %158 = bitcast %"class.skjson::Value"* %155 to i64*
  store i64 %113, i64* %158, align 8
  %159 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %155, i64 1
  %160 = ptrtoint %"class.skjson::Value"* %159 to i64
  %161 = ptrtoint %"class.skjson::Value"* %154 to i64
  %162 = icmp sgt i64 %128, 0
  br i1 %162, label %163, label %166

163:                                              ; preds = %152
  %164 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %154, i64 0, i32 0, i64 0
  %165 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %132, i64 0, i32 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %164, i8* align 8 %165, i64 %128, i1 false) #14
  br label %166

166:                                              ; preds = %163, %152
  store i64 %161, i64* %18, align 8
  store i64 %160, i64* %126, align 8
  store i64 %157, i64* %16, align 8
  %167 = icmp eq i64 %127, 0
  br i1 %167, label %171, label %168

168:                                              ; preds = %166
  %169 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %132, i64 0, i32 0, i64 0
  call void @_ZdlPv(i8* %169) #16
  %170 = load i64, i64* %126, align 8
  br label %171

171:                                              ; preds = %168, %166, %119
  %172 = phi i64 [ %122, %119 ], [ %160, %166 ], [ %170, %168 ]
  %173 = load i64, i64* %18, align 8
  %174 = sub i64 %172, %173
  %175 = ashr exact i64 %174, 3
  store i64 %175, i64* %112, align 8
  %176 = load i8, i8* %104, align 1
  %177 = icmp eq i8 %176, 125
  br i1 %177, label %938, label %178

178:                                              ; preds = %934, %171
  %179 = phi i8* [ %104, %171 ], [ %925, %934 ]
  br label %180

180:                                              ; preds = %178, %180
  %181 = phi i8* [ %188, %180 ], [ %179, %178 ]
  %182 = load i8, i8* %181, align 1
  %183 = zext i8 %182 to i64
  %184 = getelementptr inbounds [256 x i8], [256 x i8]* bitcast (<{ [128 x i8], [128 x i8] }>* @_ZN6skjson12_GLOBAL__N_113g_token_flagsE to [256 x i8]*), i64 0, i64 %183
  %185 = load i8, i8* %184, align 1
  %186 = and i8 %185, 2
  %187 = icmp eq i8 %186, 0
  %188 = getelementptr inbounds i8, i8* %181, i64 1
  br i1 %187, label %189, label %180

189:                                              ; preds = %180
  %190 = icmp eq i8 %182, 34
  br i1 %190, label %191, label %1166

191:                                              ; preds = %189, %229
  %192 = phi i8* [ %230, %229 ], [ %181, %189 ]
  %193 = phi i8 [ %231, %229 ], [ 0, %189 ]
  br label %194

194:                                              ; preds = %194, %191
  %195 = phi i8* [ %192, %191 ], [ %196, %194 ]
  %196 = getelementptr inbounds i8, i8* %195, i64 1
  %197 = load i8, i8* %196, align 1
  %198 = zext i8 %197 to i64
  %199 = getelementptr inbounds [256 x i8], [256 x i8]* bitcast (<{ [128 x i8], [128 x i8] }>* @_ZN6skjson12_GLOBAL__N_113g_token_flagsE to [256 x i8]*), i64 0, i64 %198
  %200 = load i8, i8* %199, align 1
  %201 = and i8 %200, 4
  %202 = icmp eq i8 %201, 0
  br i1 %202, label %194, label %203

203:                                              ; preds = %194
  switch i8 %197, label %226 [
    i8 34, label %204
    i8 92, label %224
  ]

204:                                              ; preds = %203
  %205 = and i8 %193, 1
  %206 = icmp eq i8 %205, 0
  br i1 %206, label %207, label %211

207:                                              ; preds = %204
  %208 = ptrtoint i8* %196 to i64
  %209 = ptrtoint i8* %188 to i64
  %210 = sub i64 %208, %209
  call fastcc void @_ZN6skjson12_GLOBAL__N_19DOMParser10pushStringEPKcmS3_(%"class.skjson::(anonymous namespace)::DOMParser"* nonnull %5, i8* %188, i64 %210, i8* %75) #14
  br label %233

211:                                              ; preds = %204
  %212 = call fastcc %"class.std::__1::vector.4"* @_ZN6skjson12_GLOBAL__N_19DOMParser14unescapeStringEPKcS3_(%"class.skjson::(anonymous namespace)::DOMParser"* nonnull %5, i8* %188, i8* %196) #14
  %213 = icmp eq %"class.std::__1::vector.4"* %212, null
  br i1 %213, label %1166, label %214

214:                                              ; preds = %211
  %215 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %212, i64 0, i32 0, i32 0
  %216 = load i8*, i8** %215, align 8
  %217 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %212, i64 0, i32 0, i32 1
  %218 = bitcast i8** %217 to i64*
  %219 = load i64, i64* %218, align 8
  %220 = ptrtoint i8* %216 to i64
  %221 = sub i64 %219, %220
  %222 = getelementptr inbounds i8, i8* %216, i64 %221
  %223 = getelementptr inbounds i8, i8* %222, i64 -1
  call fastcc void @_ZN6skjson12_GLOBAL__N_19DOMParser10pushStringEPKcmS3_(%"class.skjson::(anonymous namespace)::DOMParser"* nonnull %5, i8* %216, i64 %221, i8* %223) #14
  br label %233

224:                                              ; preds = %203
  %225 = getelementptr inbounds i8, i8* %195, i64 2
  br label %229

226:                                              ; preds = %203
  %227 = and i8 %200, 32
  %228 = icmp eq i8 %227, 0
  br i1 %228, label %1166, label %229

229:                                              ; preds = %226, %224
  %230 = phi i8* [ %225, %224 ], [ %196, %226 ]
  %231 = phi i8 [ 1, %224 ], [ %193, %226 ]
  %232 = icmp eq i8* %230, %75
  br i1 %232, label %1166, label %191

233:                                              ; preds = %214, %207
  %234 = getelementptr inbounds i8, i8* %195, i64 2
  br label %235

235:                                              ; preds = %235, %233
  %236 = phi i8* [ %243, %235 ], [ %234, %233 ]
  %237 = load i8, i8* %236, align 1
  %238 = zext i8 %237 to i64
  %239 = getelementptr inbounds [256 x i8], [256 x i8]* bitcast (<{ [128 x i8], [128 x i8] }>* @_ZN6skjson12_GLOBAL__N_113g_token_flagsE to [256 x i8]*), i64 0, i64 %238
  %240 = load i8, i8* %239, align 1
  %241 = and i8 %240, 2
  %242 = icmp eq i8 %241, 0
  %243 = getelementptr inbounds i8, i8* %236, i64 1
  br i1 %242, label %244, label %235

244:                                              ; preds = %235
  %245 = icmp eq i8 %237, 58
  br i1 %245, label %246, label %1166

246:                                              ; preds = %1090, %934, %244
  %247 = phi i8* [ %243, %244 ], [ %925, %934 ], [ %1023, %1090 ]
  br label %248

248:                                              ; preds = %246, %248
  %249 = phi i8* [ %256, %248 ], [ %247, %246 ]
  %250 = load i8, i8* %249, align 1
  %251 = zext i8 %250 to i64
  %252 = getelementptr inbounds [256 x i8], [256 x i8]* bitcast (<{ [128 x i8], [128 x i8] }>* @_ZN6skjson12_GLOBAL__N_113g_token_flagsE to [256 x i8]*), i64 0, i64 %251
  %253 = load i8, i8* %252, align 1
  %254 = and i8 %253, 2
  %255 = icmp eq i8 %254, 0
  %256 = getelementptr inbounds i8, i8* %249, i64 1
  br i1 %255, label %257, label %248

257:                                              ; preds = %248
  %258 = sext i8 %250 to i32
  switch i32 %258, label %517 [
    i32 0, label %1166
    i32 34, label %259
    i32 91, label %100
    i32 102, label %303
    i32 110, label %377
    i32 116, label %447
    i32 123, label %98
  ]

259:                                              ; preds = %257, %299
  %260 = phi i8* [ %300, %299 ], [ %249, %257 ]
  %261 = phi i8 [ %301, %299 ], [ 0, %257 ]
  br label %262

262:                                              ; preds = %262, %259
  %263 = phi i8* [ %260, %259 ], [ %264, %262 ]
  %264 = getelementptr inbounds i8, i8* %263, i64 1
  %265 = load i8, i8* %264, align 1
  %266 = zext i8 %265 to i64
  %267 = getelementptr inbounds [256 x i8], [256 x i8]* bitcast (<{ [128 x i8], [128 x i8] }>* @_ZN6skjson12_GLOBAL__N_113g_token_flagsE to [256 x i8]*), i64 0, i64 %266
  %268 = load i8, i8* %267, align 1
  %269 = and i8 %268, 4
  %270 = icmp eq i8 %269, 0
  br i1 %270, label %262, label %271

271:                                              ; preds = %262
  switch i8 %265, label %296 [
    i8 34, label %272
    i8 92, label %294
  ]

272:                                              ; preds = %271
  %273 = and i8 %261, 1
  %274 = icmp eq i8 %273, 0
  br i1 %274, label %275, label %279

275:                                              ; preds = %272
  %276 = ptrtoint i8* %264 to i64
  %277 = ptrtoint i8* %256 to i64
  %278 = sub i64 %276, %277
  call fastcc void @_ZN6skjson12_GLOBAL__N_19DOMParser10pushStringEPKcmS3_(%"class.skjson::(anonymous namespace)::DOMParser"* nonnull %5, i8* %256, i64 %278, i8* %75) #14
  br label %292

279:                                              ; preds = %272
  %280 = call fastcc %"class.std::__1::vector.4"* @_ZN6skjson12_GLOBAL__N_19DOMParser14unescapeStringEPKcS3_(%"class.skjson::(anonymous namespace)::DOMParser"* nonnull %5, i8* %256, i8* %264) #14
  %281 = icmp eq %"class.std::__1::vector.4"* %280, null
  br i1 %281, label %1166, label %282

282:                                              ; preds = %279
  %283 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %280, i64 0, i32 0, i32 0
  %284 = load i8*, i8** %283, align 8
  %285 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %280, i64 0, i32 0, i32 1
  %286 = bitcast i8** %285 to i64*
  %287 = load i64, i64* %286, align 8
  %288 = ptrtoint i8* %284 to i64
  %289 = sub i64 %287, %288
  %290 = getelementptr inbounds i8, i8* %284, i64 %289
  %291 = getelementptr inbounds i8, i8* %290, i64 -1
  call fastcc void @_ZN6skjson12_GLOBAL__N_19DOMParser10pushStringEPKcmS3_(%"class.skjson::(anonymous namespace)::DOMParser"* nonnull %5, i8* %284, i64 %289, i8* %291) #14
  br label %292

292:                                              ; preds = %282, %275
  %293 = getelementptr inbounds i8, i8* %263, i64 2
  br label %912

294:                                              ; preds = %271
  %295 = getelementptr inbounds i8, i8* %263, i64 2
  br label %299

296:                                              ; preds = %271
  %297 = and i8 %268, 32
  %298 = icmp eq i8 %297, 0
  br i1 %298, label %1166, label %299

299:                                              ; preds = %296, %294
  %300 = phi i8* [ %295, %294 ], [ %264, %296 ]
  %301 = phi i8 [ 1, %294 ], [ %261, %296 ]
  %302 = icmp eq i8* %300, %75
  br i1 %302, label %1166, label %259

303:                                              ; preds = %257
  %304 = load i8, i8* %256, align 1
  %305 = icmp eq i8 %304, 97
  br i1 %305, label %306, label %1166

306:                                              ; preds = %303
  %307 = getelementptr inbounds i8, i8* %249, i64 2
  %308 = load i8, i8* %307, align 1
  %309 = icmp eq i8 %308, 108
  br i1 %309, label %310, label %1166

310:                                              ; preds = %306
  %311 = getelementptr inbounds i8, i8* %249, i64 3
  %312 = load i8, i8* %311, align 1
  %313 = icmp eq i8 %312, 115
  br i1 %313, label %314, label %1166

314:                                              ; preds = %310
  %315 = getelementptr inbounds i8, i8* %249, i64 4
  %316 = load i8, i8* %315, align 1
  %317 = icmp eq i8 %316, 101
  br i1 %317, label %318, label %1166

318:                                              ; preds = %314
  %319 = getelementptr inbounds %"class.skjson::(anonymous namespace)::DOMParser", %"class.skjson::(anonymous namespace)::DOMParser"* %5, i64 0, i32 1, i32 0, i32 1
  %320 = load %"class.skjson::Value"*, %"class.skjson::Value"** %319, align 8
  %321 = load %"class.skjson::Value"*, %"class.skjson::Value"** %15, align 8
  %322 = icmp ult %"class.skjson::Value"* %320, %321
  %323 = ptrtoint %"class.skjson::Value"* %321 to i64
  br i1 %322, label %324, label %329

324:                                              ; preds = %318
  %325 = bitcast %"class.skjson::Value"* %320 to i64*
  store i64 2, i64* %325, align 8
  %326 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %320, i64 1
  %327 = ptrtoint %"class.skjson::Value"* %326 to i64
  %328 = bitcast %"class.skjson::Value"** %319 to i64*
  store i64 %327, i64* %328, align 8
  br label %375

329:                                              ; preds = %318
  %330 = ptrtoint %"class.skjson::Value"* %320 to i64
  %331 = bitcast %"class.skjson::Value"** %319 to i64*
  %332 = load i64, i64* %18, align 8
  %333 = sub i64 %330, %332
  %334 = ashr exact i64 %333, 3
  %335 = add nsw i64 %334, 1
  %336 = icmp ugt i64 %335, 2305843009213693951
  %337 = inttoptr i64 %332 to %"class.skjson::Value"*
  br i1 %336, label %338, label %340

338:                                              ; preds = %329
  %339 = bitcast %"class.std::__1::vector"* %11 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %339) #13
  unreachable

340:                                              ; preds = %329
  %341 = sub i64 %323, %332
  %342 = ashr exact i64 %341, 3
  %343 = icmp ult i64 %342, 1152921504606846975
  br i1 %343, label %344, label %352

344:                                              ; preds = %340
  %345 = ashr exact i64 %341, 2
  %346 = icmp ult i64 %345, %335
  %347 = select i1 %346, i64 %335, i64 %345
  %348 = icmp eq i64 %347, 0
  br i1 %348, label %357, label %349

349:                                              ; preds = %344
  %350 = icmp ugt i64 %347, 2305843009213693951
  br i1 %350, label %351, label %352

351:                                              ; preds = %349
  call void @abort() #13
  unreachable

352:                                              ; preds = %349, %340
  %353 = phi i64 [ %347, %349 ], [ 2305843009213693951, %340 ]
  %354 = shl i64 %353, 3
  %355 = call i8* @_Znwm(i64 %354) #16
  %356 = bitcast i8* %355 to %"class.skjson::Value"*
  br label %357

357:                                              ; preds = %352, %344
  %358 = phi i64 [ %353, %352 ], [ 0, %344 ]
  %359 = phi %"class.skjson::Value"* [ %356, %352 ], [ null, %344 ]
  %360 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %359, i64 %334
  %361 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %359, i64 %358
  %362 = ptrtoint %"class.skjson::Value"* %361 to i64
  %363 = bitcast %"class.skjson::Value"* %360 to i64*
  store i64 2, i64* %363, align 8
  %364 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %360, i64 1
  %365 = ptrtoint %"class.skjson::Value"* %364 to i64
  %366 = ptrtoint %"class.skjson::Value"* %359 to i64
  %367 = icmp sgt i64 %333, 0
  br i1 %367, label %368, label %371

368:                                              ; preds = %357
  %369 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %359, i64 0, i32 0, i64 0
  %370 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %337, i64 0, i32 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %369, i8* align 8 %370, i64 %333, i1 false) #14
  br label %371

371:                                              ; preds = %368, %357
  store i64 %366, i64* %18, align 8
  store i64 %365, i64* %331, align 8
  store i64 %362, i64* %16, align 8
  %372 = icmp eq i64 %332, 0
  br i1 %372, label %375, label %373

373:                                              ; preds = %371
  %374 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %337, i64 0, i32 0, i64 0
  call void @_ZdlPv(i8* %374) #16
  br label %375

375:                                              ; preds = %373, %371, %324
  %376 = getelementptr inbounds i8, i8* %249, i64 5
  br label %912

377:                                              ; preds = %257
  %378 = load i8, i8* %256, align 1
  %379 = icmp eq i8 %378, 117
  br i1 %379, label %380, label %1166

380:                                              ; preds = %377
  %381 = getelementptr inbounds i8, i8* %249, i64 2
  %382 = load i8, i8* %381, align 1
  %383 = icmp eq i8 %382, 108
  br i1 %383, label %384, label %1166

384:                                              ; preds = %380
  %385 = getelementptr inbounds i8, i8* %249, i64 3
  %386 = load i8, i8* %385, align 1
  %387 = icmp eq i8 %386, 108
  br i1 %387, label %388, label %1166

388:                                              ; preds = %384
  %389 = getelementptr inbounds %"class.skjson::(anonymous namespace)::DOMParser", %"class.skjson::(anonymous namespace)::DOMParser"* %5, i64 0, i32 1, i32 0, i32 1
  %390 = load %"class.skjson::Value"*, %"class.skjson::Value"** %389, align 8
  %391 = load %"class.skjson::Value"*, %"class.skjson::Value"** %15, align 8
  %392 = icmp ult %"class.skjson::Value"* %390, %391
  %393 = ptrtoint %"class.skjson::Value"* %391 to i64
  br i1 %392, label %394, label %399

394:                                              ; preds = %388
  %395 = bitcast %"class.skjson::Value"* %390 to i64*
  store i64 1, i64* %395, align 8
  %396 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %390, i64 1
  %397 = ptrtoint %"class.skjson::Value"* %396 to i64
  %398 = bitcast %"class.skjson::Value"** %389 to i64*
  store i64 %397, i64* %398, align 8
  br label %445

399:                                              ; preds = %388
  %400 = ptrtoint %"class.skjson::Value"* %390 to i64
  %401 = bitcast %"class.skjson::Value"** %389 to i64*
  %402 = load i64, i64* %18, align 8
  %403 = sub i64 %400, %402
  %404 = ashr exact i64 %403, 3
  %405 = add nsw i64 %404, 1
  %406 = icmp ugt i64 %405, 2305843009213693951
  %407 = inttoptr i64 %402 to %"class.skjson::Value"*
  br i1 %406, label %408, label %410

408:                                              ; preds = %399
  %409 = bitcast %"class.std::__1::vector"* %11 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %409) #13
  unreachable

410:                                              ; preds = %399
  %411 = sub i64 %393, %402
  %412 = ashr exact i64 %411, 3
  %413 = icmp ult i64 %412, 1152921504606846975
  br i1 %413, label %414, label %422

414:                                              ; preds = %410
  %415 = ashr exact i64 %411, 2
  %416 = icmp ult i64 %415, %405
  %417 = select i1 %416, i64 %405, i64 %415
  %418 = icmp eq i64 %417, 0
  br i1 %418, label %427, label %419

419:                                              ; preds = %414
  %420 = icmp ugt i64 %417, 2305843009213693951
  br i1 %420, label %421, label %422

421:                                              ; preds = %419
  call void @abort() #13
  unreachable

422:                                              ; preds = %419, %410
  %423 = phi i64 [ %417, %419 ], [ 2305843009213693951, %410 ]
  %424 = shl i64 %423, 3
  %425 = call i8* @_Znwm(i64 %424) #16
  %426 = bitcast i8* %425 to %"class.skjson::Value"*
  br label %427

427:                                              ; preds = %422, %414
  %428 = phi i64 [ %423, %422 ], [ 0, %414 ]
  %429 = phi %"class.skjson::Value"* [ %426, %422 ], [ null, %414 ]
  %430 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %429, i64 %404
  %431 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %429, i64 %428
  %432 = ptrtoint %"class.skjson::Value"* %431 to i64
  %433 = bitcast %"class.skjson::Value"* %430 to i64*
  store i64 1, i64* %433, align 8
  %434 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %430, i64 1
  %435 = ptrtoint %"class.skjson::Value"* %434 to i64
  %436 = ptrtoint %"class.skjson::Value"* %429 to i64
  %437 = icmp sgt i64 %403, 0
  br i1 %437, label %438, label %441

438:                                              ; preds = %427
  %439 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %429, i64 0, i32 0, i64 0
  %440 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %407, i64 0, i32 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %439, i8* align 8 %440, i64 %403, i1 false) #14
  br label %441

441:                                              ; preds = %438, %427
  store i64 %436, i64* %18, align 8
  store i64 %435, i64* %401, align 8
  store i64 %432, i64* %16, align 8
  %442 = icmp eq i64 %402, 0
  br i1 %442, label %445, label %443

443:                                              ; preds = %441
  %444 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %407, i64 0, i32 0, i64 0
  call void @_ZdlPv(i8* %444) #16
  br label %445

445:                                              ; preds = %443, %441, %394
  %446 = getelementptr inbounds i8, i8* %249, i64 4
  br label %912

447:                                              ; preds = %257
  %448 = load i8, i8* %256, align 1
  %449 = icmp eq i8 %448, 114
  br i1 %449, label %450, label %1166

450:                                              ; preds = %447
  %451 = getelementptr inbounds i8, i8* %249, i64 2
  %452 = load i8, i8* %451, align 1
  %453 = icmp eq i8 %452, 117
  br i1 %453, label %454, label %1166

454:                                              ; preds = %450
  %455 = getelementptr inbounds i8, i8* %249, i64 3
  %456 = load i8, i8* %455, align 1
  %457 = icmp eq i8 %456, 101
  br i1 %457, label %458, label %1166

458:                                              ; preds = %454
  %459 = getelementptr inbounds %"class.skjson::(anonymous namespace)::DOMParser", %"class.skjson::(anonymous namespace)::DOMParser"* %5, i64 0, i32 1, i32 0, i32 1
  %460 = load %"class.skjson::Value"*, %"class.skjson::Value"** %459, align 8
  %461 = load %"class.skjson::Value"*, %"class.skjson::Value"** %15, align 8
  %462 = icmp ult %"class.skjson::Value"* %460, %461
  %463 = ptrtoint %"class.skjson::Value"* %461 to i64
  br i1 %462, label %464, label %469

464:                                              ; preds = %458
  %465 = bitcast %"class.skjson::Value"* %460 to i64*
  store i64 258, i64* %465, align 8
  %466 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %460, i64 1
  %467 = ptrtoint %"class.skjson::Value"* %466 to i64
  %468 = bitcast %"class.skjson::Value"** %459 to i64*
  store i64 %467, i64* %468, align 8
  br label %515

469:                                              ; preds = %458
  %470 = ptrtoint %"class.skjson::Value"* %460 to i64
  %471 = bitcast %"class.skjson::Value"** %459 to i64*
  %472 = load i64, i64* %18, align 8
  %473 = sub i64 %470, %472
  %474 = ashr exact i64 %473, 3
  %475 = add nsw i64 %474, 1
  %476 = icmp ugt i64 %475, 2305843009213693951
  %477 = inttoptr i64 %472 to %"class.skjson::Value"*
  br i1 %476, label %478, label %480

478:                                              ; preds = %469
  %479 = bitcast %"class.std::__1::vector"* %11 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %479) #13
  unreachable

480:                                              ; preds = %469
  %481 = sub i64 %463, %472
  %482 = ashr exact i64 %481, 3
  %483 = icmp ult i64 %482, 1152921504606846975
  br i1 %483, label %484, label %492

484:                                              ; preds = %480
  %485 = ashr exact i64 %481, 2
  %486 = icmp ult i64 %485, %475
  %487 = select i1 %486, i64 %475, i64 %485
  %488 = icmp eq i64 %487, 0
  br i1 %488, label %497, label %489

489:                                              ; preds = %484
  %490 = icmp ugt i64 %487, 2305843009213693951
  br i1 %490, label %491, label %492

491:                                              ; preds = %489
  call void @abort() #13
  unreachable

492:                                              ; preds = %489, %480
  %493 = phi i64 [ %487, %489 ], [ 2305843009213693951, %480 ]
  %494 = shl i64 %493, 3
  %495 = call i8* @_Znwm(i64 %494) #16
  %496 = bitcast i8* %495 to %"class.skjson::Value"*
  br label %497

497:                                              ; preds = %492, %484
  %498 = phi i64 [ %493, %492 ], [ 0, %484 ]
  %499 = phi %"class.skjson::Value"* [ %496, %492 ], [ null, %484 ]
  %500 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %499, i64 %474
  %501 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %499, i64 %498
  %502 = ptrtoint %"class.skjson::Value"* %501 to i64
  %503 = bitcast %"class.skjson::Value"* %500 to i64*
  store i64 258, i64* %503, align 8
  %504 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %500, i64 1
  %505 = ptrtoint %"class.skjson::Value"* %504 to i64
  %506 = ptrtoint %"class.skjson::Value"* %499 to i64
  %507 = icmp sgt i64 %473, 0
  br i1 %507, label %508, label %511

508:                                              ; preds = %497
  %509 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %499, i64 0, i32 0, i64 0
  %510 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %477, i64 0, i32 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %509, i8* align 8 %510, i64 %473, i1 false) #14
  br label %511

511:                                              ; preds = %508, %497
  store i64 %506, i64* %18, align 8
  store i64 %505, i64* %471, align 8
  store i64 %502, i64* %16, align 8
  %512 = icmp eq i64 %472, 0
  br i1 %512, label %515, label %513

513:                                              ; preds = %511
  %514 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %477, i64 0, i32 0, i64 0
  call void @_ZdlPv(i8* %514) #16
  br label %515

515:                                              ; preds = %513, %511, %464
  %516 = getelementptr inbounds i8, i8* %249, i64 4
  br label %912

517:                                              ; preds = %257
  %518 = icmp eq i8 %250, 45
  %519 = select i1 %518, i8* %256, i8* %249
  %520 = select i1 %518, i32 -1, i32 1
  %521 = load i8, i8* %519, align 1
  %522 = zext i8 %521 to i64
  %523 = getelementptr inbounds [256 x i8], [256 x i8]* bitcast (<{ [128 x i8], [128 x i8] }>* @_ZN6skjson12_GLOBAL__N_113g_token_flagsE to [256 x i8]*), i64 0, i64 %522
  %524 = load i8, i8* %523, align 1
  %525 = and i8 %524, 8
  %526 = icmp eq i8 %525, 0
  br i1 %526, label %556, label %527

527:                                              ; preds = %517
  %528 = sext i8 %521 to i32
  %529 = add nsw i32 %528, -48
  %530 = getelementptr inbounds i8, i8* %519, i64 1
  %531 = load i8, i8* %530, align 1
  %532 = zext i8 %531 to i64
  %533 = getelementptr inbounds [256 x i8], [256 x i8]* bitcast (<{ [128 x i8], [128 x i8] }>* @_ZN6skjson12_GLOBAL__N_113g_token_flagsE to [256 x i8]*), i64 0, i64 %532
  %534 = load i8, i8* %533, align 1
  %535 = and i8 %534, 8
  %536 = icmp eq i8 %535, 0
  %537 = icmp sgt i32 %529, 214748363
  %538 = or i1 %537, %536
  br i1 %538, label %556, label %539

539:                                              ; preds = %527, %539
  %540 = phi i8 [ %548, %539 ], [ %531, %527 ]
  %541 = phi i8* [ %547, %539 ], [ %530, %527 ]
  %542 = phi i32 [ %546, %539 ], [ %529, %527 ]
  %543 = mul nsw i32 %542, 10
  %544 = sext i8 %540 to i32
  %545 = add nsw i32 %544, -48
  %546 = add i32 %545, %543
  %547 = getelementptr inbounds i8, i8* %541, i64 1
  %548 = load i8, i8* %547, align 1
  %549 = zext i8 %548 to i64
  %550 = getelementptr inbounds [256 x i8], [256 x i8]* bitcast (<{ [128 x i8], [128 x i8] }>* @_ZN6skjson12_GLOBAL__N_113g_token_flagsE to [256 x i8]*), i64 0, i64 %549
  %551 = load i8, i8* %550, align 1
  %552 = and i8 %551, 8
  %553 = icmp eq i8 %552, 0
  %554 = icmp sgt i32 %546, 214748363
  %555 = or i1 %554, %553
  br i1 %555, label %556, label %539

556:                                              ; preds = %539, %527, %517
  %557 = phi i8 [ %534, %527 ], [ %524, %517 ], [ %551, %539 ]
  %558 = phi i8 [ %531, %527 ], [ %521, %517 ], [ %548, %539 ]
  %559 = phi i8* [ %530, %527 ], [ %519, %517 ], [ %547, %539 ]
  %560 = phi i32 [ %529, %527 ], [ 0, %517 ], [ %546, %539 ]
  %561 = and i8 %557, 16
  %562 = icmp eq i8 %561, 0
  br i1 %562, label %563, label %629

563:                                              ; preds = %556
  %564 = icmp ugt i8* %559, %519
  br i1 %564, label %565, label %904

565:                                              ; preds = %563
  %566 = mul nsw i32 %560, %520
  %567 = getelementptr inbounds %"class.skjson::(anonymous namespace)::DOMParser", %"class.skjson::(anonymous namespace)::DOMParser"* %5, i64 0, i32 1, i32 0, i32 1
  %568 = load %"class.skjson::Value"*, %"class.skjson::Value"** %567, align 8
  %569 = load %"class.skjson::Value"*, %"class.skjson::Value"** %15, align 8
  %570 = icmp ult %"class.skjson::Value"* %568, %569
  %571 = ptrtoint %"class.skjson::Value"* %569 to i64
  br i1 %570, label %572, label %580

572:                                              ; preds = %565
  %573 = bitcast %"class.skjson::Value"* %568 to i64*
  %574 = zext i32 %566 to i64
  %575 = shl nuw i64 %574, 32
  %576 = or i64 %575, 3
  store i64 %576, i64* %573, align 8
  %577 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %568, i64 1
  %578 = ptrtoint %"class.skjson::Value"* %577 to i64
  %579 = bitcast %"class.skjson::Value"** %567 to i64*
  store i64 %578, i64* %579, align 8
  br label %901

580:                                              ; preds = %565
  %581 = ptrtoint %"class.skjson::Value"* %568 to i64
  %582 = bitcast %"class.skjson::Value"** %567 to i64*
  %583 = load i64, i64* %18, align 8
  %584 = sub i64 %581, %583
  %585 = ashr exact i64 %584, 3
  %586 = add nsw i64 %585, 1
  %587 = icmp ugt i64 %586, 2305843009213693951
  %588 = inttoptr i64 %583 to %"class.skjson::Value"*
  br i1 %587, label %589, label %591

589:                                              ; preds = %580
  %590 = bitcast %"class.std::__1::vector"* %11 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %590) #13
  unreachable

591:                                              ; preds = %580
  %592 = sub i64 %571, %583
  %593 = ashr exact i64 %592, 3
  %594 = icmp ult i64 %593, 1152921504606846975
  br i1 %594, label %595, label %603

595:                                              ; preds = %591
  %596 = ashr exact i64 %592, 2
  %597 = icmp ult i64 %596, %586
  %598 = select i1 %597, i64 %586, i64 %596
  %599 = icmp eq i64 %598, 0
  br i1 %599, label %608, label %600

600:                                              ; preds = %595
  %601 = icmp ugt i64 %598, 2305843009213693951
  br i1 %601, label %602, label %603

602:                                              ; preds = %600
  call void @abort() #13
  unreachable

603:                                              ; preds = %600, %591
  %604 = phi i64 [ %598, %600 ], [ 2305843009213693951, %591 ]
  %605 = shl i64 %604, 3
  %606 = call i8* @_Znwm(i64 %605) #16
  %607 = bitcast i8* %606 to %"class.skjson::Value"*
  br label %608

608:                                              ; preds = %603, %595
  %609 = phi i64 [ %604, %603 ], [ 0, %595 ]
  %610 = phi %"class.skjson::Value"* [ %607, %603 ], [ null, %595 ]
  %611 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %610, i64 %585
  %612 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %610, i64 %609
  %613 = ptrtoint %"class.skjson::Value"* %612 to i64
  %614 = bitcast %"class.skjson::Value"* %611 to i64*
  %615 = zext i32 %566 to i64
  %616 = shl nuw i64 %615, 32
  %617 = or i64 %616, 3
  store i64 %617, i64* %614, align 8
  %618 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %611, i64 1
  %619 = ptrtoint %"class.skjson::Value"* %618 to i64
  %620 = ptrtoint %"class.skjson::Value"* %610 to i64
  %621 = icmp sgt i64 %584, 0
  br i1 %621, label %622, label %625

622:                                              ; preds = %608
  %623 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %610, i64 0, i32 0, i64 0
  %624 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %588, i64 0, i32 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %623, i8* align 8 %624, i64 %584, i1 false) #14
  br label %625

625:                                              ; preds = %622, %608
  store i64 %620, i64* %18, align 8
  store i64 %619, i64* %582, align 8
  store i64 %613, i64* %16, align 8
  %626 = icmp eq i64 %583, 0
  br i1 %626, label %901, label %627

627:                                              ; preds = %625
  %628 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %588, i64 0, i32 0, i64 0
  call void @_ZdlPv(i8* %628) #16
  br label %901

629:                                              ; preds = %556
  %630 = icmp eq i8 %558, 46
  br i1 %630, label %631, label %773

631:                                              ; preds = %629
  %632 = getelementptr inbounds i8, i8* %559, i64 1
  %633 = load i8, i8* %632, align 1
  %634 = zext i8 %633 to i64
  %635 = getelementptr inbounds [256 x i8], [256 x i8]* bitcast (<{ [128 x i8], [128 x i8] }>* @_ZN6skjson12_GLOBAL__N_113g_token_flagsE to [256 x i8]*), i64 0, i64 %634
  %636 = load i8, i8* %635, align 1
  %637 = and i8 %636, 8
  %638 = icmp eq i8 %637, 0
  %639 = icmp sgt i32 %560, 214748363
  %640 = or i1 %639, %638
  br i1 %640, label %678, label %641

641:                                              ; preds = %631, %660
  %642 = phi i8 [ %668, %660 ], [ %633, %631 ]
  %643 = phi i32 [ %666, %660 ], [ 0, %631 ]
  %644 = phi i32 [ %665, %660 ], [ %560, %631 ]
  %645 = phi i64 [ %662, %660 ], [ 1, %631 ]
  %646 = mul nsw i32 %644, 10
  %647 = add nuw nsw i64 %645, 1
  %648 = getelementptr inbounds i8, i8* %559, i64 %647
  %649 = sext i8 %642 to i32
  %650 = add nsw i32 %649, -48
  %651 = add i32 %650, %646
  %652 = load i8, i8* %648, align 1
  %653 = zext i8 %652 to i64
  %654 = getelementptr inbounds [256 x i8], [256 x i8]* bitcast (<{ [128 x i8], [128 x i8] }>* @_ZN6skjson12_GLOBAL__N_113g_token_flagsE to [256 x i8]*), i64 0, i64 %653
  %655 = load i8, i8* %654, align 1
  %656 = and i8 %655, 8
  %657 = icmp eq i8 %656, 0
  %658 = icmp sgt i32 %651, 214748363
  %659 = or i1 %658, %657
  br i1 %659, label %676, label %660

660:                                              ; preds = %641
  %661 = mul nsw i32 %651, 10
  %662 = add nuw nsw i64 %645, 2
  %663 = sext i8 %652 to i32
  %664 = add nsw i32 %663, -48
  %665 = add i32 %664, %661
  %666 = add nsw i32 %643, -2
  %667 = getelementptr inbounds i8, i8* %559, i64 %662
  %668 = load i8, i8* %667, align 1
  %669 = zext i8 %668 to i64
  %670 = getelementptr inbounds [256 x i8], [256 x i8]* bitcast (<{ [128 x i8], [128 x i8] }>* @_ZN6skjson12_GLOBAL__N_113g_token_flagsE to [256 x i8]*), i64 0, i64 %669
  %671 = load i8, i8* %670, align 1
  %672 = and i8 %671, 8
  %673 = icmp eq i8 %672, 0
  %674 = icmp sgt i32 %665, 214748363
  %675 = or i1 %674, %673
  br i1 %675, label %678, label %641

676:                                              ; preds = %641
  %677 = add nsw i32 %643, -1
  br label %678

678:                                              ; preds = %660, %676, %631
  %679 = phi i8 [ %655, %676 ], [ %636, %631 ], [ %671, %660 ]
  %680 = phi i8 [ %652, %676 ], [ %633, %631 ], [ %668, %660 ]
  %681 = phi i64 [ %647, %676 ], [ 1, %631 ], [ %662, %660 ]
  %682 = phi i32 [ %651, %676 ], [ %560, %631 ], [ %665, %660 ]
  %683 = phi i32 [ %677, %676 ], [ 0, %631 ], [ %666, %660 ]
  %684 = getelementptr inbounds i8, i8* %559, i64 %681
  %685 = and i8 %679, 16
  %686 = icmp eq i8 %685, 0
  br i1 %686, label %687, label %704

687:                                              ; preds = %678
  %688 = icmp sgt i64 %681, 1
  br i1 %688, label %689, label %904

689:                                              ; preds = %687
  %690 = mul nsw i32 %682, %520
  %691 = sitofp i32 %690 to float
  %692 = icmp sgt i32 %683, -32
  br i1 %692, label %693, label %698

693:                                              ; preds = %689
  %694 = add nsw i32 %683, 31
  %695 = sext i32 %694 to i64
  %696 = getelementptr inbounds [63 x float], [63 x float]* @_ZZN6skjson12_GLOBAL__N_15pow10EiE13g_pow10_table, i64 0, i64 %695
  %697 = load float, float* %696, align 4
  br label %701

698:                                              ; preds = %689
  %699 = sitofp i32 %683 to float
  %700 = call float @powf(float 1.000000e+01, float %699) #14
  br label %701

701:                                              ; preds = %698, %693
  %702 = phi float [ %697, %693 ], [ %700, %698 ]
  %703 = fmul float %702, %691
  call fastcc void @_ZN6skjson12_GLOBAL__N_19DOMParser9pushFloatEf(%"class.skjson::(anonymous namespace)::DOMParser"* nonnull %5, float %703) #14
  br label %901

704:                                              ; preds = %678
  %705 = icmp sgt i32 %682, 214748363
  br i1 %705, label %706, label %773

706:                                              ; preds = %704
  %707 = sitofp i32 %682 to float
  %708 = and i8 %679, 8
  %709 = icmp eq i8 %708, 0
  br i1 %709, label %744, label %710

710:                                              ; preds = %706, %727
  %711 = phi i8 [ %735, %727 ], [ %680, %706 ]
  %712 = phi i32 [ %734, %727 ], [ %683, %706 ]
  %713 = phi float [ %733, %727 ], [ %707, %706 ]
  %714 = phi i8* [ %729, %727 ], [ %684, %706 ]
  %715 = fmul float %713, 1.000000e+01
  %716 = getelementptr inbounds i8, i8* %714, i64 1
  %717 = sext i8 %711 to i32
  %718 = add nsw i32 %717, -48
  %719 = sitofp i32 %718 to float
  %720 = fadd float %715, %719
  %721 = load i8, i8* %716, align 1
  %722 = zext i8 %721 to i64
  %723 = getelementptr inbounds [256 x i8], [256 x i8]* bitcast (<{ [128 x i8], [128 x i8] }>* @_ZN6skjson12_GLOBAL__N_113g_token_flagsE to [256 x i8]*), i64 0, i64 %722
  %724 = load i8, i8* %723, align 1
  %725 = and i8 %724, 8
  %726 = icmp eq i8 %725, 0
  br i1 %726, label %741, label %727

727:                                              ; preds = %710
  %728 = fmul float %720, 1.000000e+01
  %729 = getelementptr inbounds i8, i8* %714, i64 2
  %730 = sext i8 %721 to i32
  %731 = add nsw i32 %730, -48
  %732 = sitofp i32 %731 to float
  %733 = fadd float %728, %732
  %734 = add nsw i32 %712, -2
  %735 = load i8, i8* %729, align 1
  %736 = zext i8 %735 to i64
  %737 = getelementptr inbounds [256 x i8], [256 x i8]* bitcast (<{ [128 x i8], [128 x i8] }>* @_ZN6skjson12_GLOBAL__N_113g_token_flagsE to [256 x i8]*), i64 0, i64 %736
  %738 = load i8, i8* %737, align 1
  %739 = and i8 %738, 8
  %740 = icmp eq i8 %739, 0
  br i1 %740, label %744, label %710

741:                                              ; preds = %710
  %742 = getelementptr inbounds i8, i8* %714, i64 1
  %743 = add nsw i32 %712, -1
  br label %744

744:                                              ; preds = %727, %741, %706
  %745 = phi i8 [ %721, %741 ], [ %680, %706 ], [ %735, %727 ]
  %746 = phi i8* [ %742, %741 ], [ %684, %706 ], [ %729, %727 ]
  %747 = phi float [ %720, %741 ], [ %707, %706 ], [ %733, %727 ]
  %748 = phi i32 [ %743, %741 ], [ %683, %706 ], [ %734, %727 ]
  %749 = icmp sgt i32 %748, -32
  br i1 %749, label %750, label %755

750:                                              ; preds = %744
  %751 = add nsw i32 %748, 31
  %752 = sext i32 %751 to i64
  %753 = getelementptr inbounds [63 x float], [63 x float]* @_ZZN6skjson12_GLOBAL__N_15pow10EiE13g_pow10_table, i64 0, i64 %752
  %754 = load float, float* %753, align 4
  br label %759

755:                                              ; preds = %744
  %756 = sitofp i32 %748 to float
  %757 = call float @powf(float 1.000000e+01, float %756) #14
  %758 = load i8, i8* %746, align 1
  br label %759

759:                                              ; preds = %755, %750
  %760 = phi i8 [ %745, %750 ], [ %758, %755 ]
  %761 = phi float [ %754, %750 ], [ %757, %755 ]
  %762 = zext i8 %760 to i64
  %763 = getelementptr inbounds [256 x i8], [256 x i8]* bitcast (<{ [128 x i8], [128 x i8] }>* @_ZN6skjson12_GLOBAL__N_113g_token_flagsE to [256 x i8]*), i64 0, i64 %762
  %764 = load i8, i8* %763, align 1
  %765 = and i8 %764, 16
  %766 = icmp eq i8 %765, 0
  %767 = fcmp une float %761, 0.000000e+00
  %768 = and i1 %767, %766
  br i1 %768, label %769, label %904

769:                                              ; preds = %759
  %770 = sitofp i32 %520 to float
  %771 = fmul float %747, %770
  %772 = fmul float %771, %761
  call fastcc void @_ZN6skjson12_GLOBAL__N_19DOMParser9pushFloatEf(%"class.skjson::(anonymous namespace)::DOMParser"* nonnull %5, float %772) #14
  br label %901

773:                                              ; preds = %704, %629
  %774 = phi i8 [ %679, %704 ], [ %557, %629 ]
  %775 = phi i8 [ %680, %704 ], [ %558, %629 ]
  %776 = phi i8* [ %684, %704 ], [ %559, %629 ]
  %777 = phi i32 [ %682, %704 ], [ %560, %629 ]
  %778 = sitofp i32 %777 to float
  %779 = and i8 %774, 8
  %780 = icmp eq i8 %779, 0
  br i1 %780, label %812, label %781

781:                                              ; preds = %773, %797
  %782 = phi i8 [ %804, %797 ], [ %775, %773 ]
  %783 = phi float [ %803, %797 ], [ %778, %773 ]
  %784 = phi i8* [ %799, %797 ], [ %776, %773 ]
  %785 = fmul float %783, 1.000000e+01
  %786 = getelementptr inbounds i8, i8* %784, i64 1
  %787 = sext i8 %782 to i32
  %788 = add nsw i32 %787, -48
  %789 = sitofp i32 %788 to float
  %790 = fadd float %785, %789
  %791 = load i8, i8* %786, align 1
  %792 = zext i8 %791 to i64
  %793 = getelementptr inbounds [256 x i8], [256 x i8]* bitcast (<{ [128 x i8], [128 x i8] }>* @_ZN6skjson12_GLOBAL__N_113g_token_flagsE to [256 x i8]*), i64 0, i64 %792
  %794 = load i8, i8* %793, align 1
  %795 = and i8 %794, 8
  %796 = icmp eq i8 %795, 0
  br i1 %796, label %810, label %797

797:                                              ; preds = %781
  %798 = fmul float %790, 1.000000e+01
  %799 = getelementptr inbounds i8, i8* %784, i64 2
  %800 = sext i8 %791 to i32
  %801 = add nsw i32 %800, -48
  %802 = sitofp i32 %801 to float
  %803 = fadd float %798, %802
  %804 = load i8, i8* %799, align 1
  %805 = zext i8 %804 to i64
  %806 = getelementptr inbounds [256 x i8], [256 x i8]* bitcast (<{ [128 x i8], [128 x i8] }>* @_ZN6skjson12_GLOBAL__N_113g_token_flagsE to [256 x i8]*), i64 0, i64 %805
  %807 = load i8, i8* %806, align 1
  %808 = and i8 %807, 8
  %809 = icmp eq i8 %808, 0
  br i1 %809, label %812, label %781

810:                                              ; preds = %781
  %811 = getelementptr inbounds i8, i8* %784, i64 1
  br label %812

812:                                              ; preds = %797, %810, %773
  %813 = phi i8 [ %774, %773 ], [ %794, %810 ], [ %807, %797 ]
  %814 = phi i8 [ %775, %773 ], [ %791, %810 ], [ %804, %797 ]
  %815 = phi i8* [ %776, %773 ], [ %811, %810 ], [ %799, %797 ]
  %816 = phi float [ %778, %773 ], [ %790, %810 ], [ %803, %797 ]
  %817 = and i8 %813, 16
  %818 = icmp eq i8 %817, 0
  br i1 %818, label %819, label %822

819:                                              ; preds = %812
  %820 = sitofp i32 %520 to float
  %821 = fmul float %816, %820
  call fastcc void @_ZN6skjson12_GLOBAL__N_19DOMParser9pushFloatEf(%"class.skjson::(anonymous namespace)::DOMParser"* nonnull %5, float %821) #14
  br label %901

822:                                              ; preds = %812
  %823 = icmp eq i8 %814, 46
  br i1 %823, label %824, label %904

824:                                              ; preds = %822
  %825 = getelementptr inbounds i8, i8* %815, i64 1
  %826 = load i8, i8* %825, align 1
  %827 = zext i8 %826 to i64
  %828 = getelementptr inbounds [256 x i8], [256 x i8]* bitcast (<{ [128 x i8], [128 x i8] }>* @_ZN6skjson12_GLOBAL__N_113g_token_flagsE to [256 x i8]*), i64 0, i64 %827
  %829 = load i8, i8* %828, align 1
  %830 = and i8 %829, 8
  %831 = icmp eq i8 %830, 0
  br i1 %831, label %872, label %832

832:                                              ; preds = %824, %849
  %833 = phi i8 [ %857, %849 ], [ %826, %824 ]
  %834 = phi i32 [ %856, %849 ], [ 0, %824 ]
  %835 = phi float [ %855, %849 ], [ %816, %824 ]
  %836 = phi i8* [ %851, %849 ], [ %825, %824 ]
  %837 = fmul float %835, 1.000000e+01
  %838 = getelementptr inbounds i8, i8* %836, i64 1
  %839 = sext i8 %833 to i32
  %840 = add nsw i32 %839, -48
  %841 = sitofp i32 %840 to float
  %842 = fadd float %837, %841
  %843 = load i8, i8* %838, align 1
  %844 = zext i8 %843 to i64
  %845 = getelementptr inbounds [256 x i8], [256 x i8]* bitcast (<{ [128 x i8], [128 x i8] }>* @_ZN6skjson12_GLOBAL__N_113g_token_flagsE to [256 x i8]*), i64 0, i64 %844
  %846 = load i8, i8* %845, align 1
  %847 = and i8 %846, 8
  %848 = icmp eq i8 %847, 0
  br i1 %848, label %863, label %849

849:                                              ; preds = %832
  %850 = fmul float %842, 1.000000e+01
  %851 = getelementptr inbounds i8, i8* %836, i64 2
  %852 = sext i8 %843 to i32
  %853 = add nsw i32 %852, -48
  %854 = sitofp i32 %853 to float
  %855 = fadd float %850, %854
  %856 = add nsw i32 %834, -2
  %857 = load i8, i8* %851, align 1
  %858 = zext i8 %857 to i64
  %859 = getelementptr inbounds [256 x i8], [256 x i8]* bitcast (<{ [128 x i8], [128 x i8] }>* @_ZN6skjson12_GLOBAL__N_113g_token_flagsE to [256 x i8]*), i64 0, i64 %858
  %860 = load i8, i8* %859, align 1
  %861 = and i8 %860, 8
  %862 = icmp eq i8 %861, 0
  br i1 %862, label %866, label %832

863:                                              ; preds = %832
  %864 = getelementptr inbounds i8, i8* %836, i64 1
  %865 = add nsw i32 %834, -1
  br label %866

866:                                              ; preds = %849, %863
  %867 = phi i8 [ %843, %863 ], [ %857, %849 ]
  %868 = phi i8* [ %864, %863 ], [ %851, %849 ]
  %869 = phi float [ %842, %863 ], [ %855, %849 ]
  %870 = phi i32 [ %865, %863 ], [ %856, %849 ]
  %871 = icmp sgt i32 %870, -32
  br i1 %871, label %872, label %881

872:                                              ; preds = %866, %824
  %873 = phi i32 [ %870, %866 ], [ 0, %824 ]
  %874 = phi float [ %869, %866 ], [ %816, %824 ]
  %875 = phi i8* [ %868, %866 ], [ %825, %824 ]
  %876 = phi i8 [ %867, %866 ], [ %826, %824 ]
  %877 = add nsw i32 %873, 31
  %878 = sext i32 %877 to i64
  %879 = getelementptr inbounds [63 x float], [63 x float]* @_ZZN6skjson12_GLOBAL__N_15pow10EiE13g_pow10_table, i64 0, i64 %878
  %880 = load float, float* %879, align 4
  br label %885

881:                                              ; preds = %866
  %882 = sitofp i32 %870 to float
  %883 = call float @powf(float 1.000000e+01, float %882) #14
  %884 = load i8, i8* %868, align 1
  br label %885

885:                                              ; preds = %881, %872
  %886 = phi float [ %874, %872 ], [ %869, %881 ]
  %887 = phi i8* [ %875, %872 ], [ %868, %881 ]
  %888 = phi i8 [ %876, %872 ], [ %884, %881 ]
  %889 = phi float [ %880, %872 ], [ %883, %881 ]
  %890 = zext i8 %888 to i64
  %891 = getelementptr inbounds [256 x i8], [256 x i8]* bitcast (<{ [128 x i8], [128 x i8] }>* @_ZN6skjson12_GLOBAL__N_113g_token_flagsE to [256 x i8]*), i64 0, i64 %890
  %892 = load i8, i8* %891, align 1
  %893 = and i8 %892, 16
  %894 = icmp eq i8 %893, 0
  %895 = fcmp une float %889, 0.000000e+00
  %896 = and i1 %895, %894
  br i1 %896, label %897, label %904

897:                                              ; preds = %885
  %898 = sitofp i32 %520 to float
  %899 = fmul float %886, %898
  %900 = fmul float %899, %889
  call fastcc void @_ZN6skjson12_GLOBAL__N_19DOMParser9pushFloatEf(%"class.skjson::(anonymous namespace)::DOMParser"* nonnull %5, float %900) #14
  br label %901

901:                                              ; preds = %897, %819, %769, %701, %627, %625, %572
  %902 = phi i8* [ %559, %572 ], [ %559, %625 ], [ %559, %627 ], [ %815, %819 ], [ %887, %897 ], [ %746, %769 ], [ %684, %701 ]
  %903 = icmp eq i8* %902, null
  br i1 %903, label %904, label %912

904:                                              ; preds = %901, %885, %822, %759, %687, %563
  %905 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %905) #14
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %4, align 8
  %906 = call float @strtof(i8* %249, i8** nonnull %4) #14
  %907 = load i8*, i8** %4, align 8
  %908 = icmp ugt i8* %907, %249
  br i1 %908, label %909, label %910

909:                                              ; preds = %904
  call fastcc void @_ZN6skjson12_GLOBAL__N_19DOMParser9pushFloatEf(%"class.skjson::(anonymous namespace)::DOMParser"* nonnull %5, float %906) #14
  br label %910

910:                                              ; preds = %909, %904
  %911 = phi i8* [ %907, %909 ], [ null, %904 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %905) #14
  br label %912

912:                                              ; preds = %910, %901, %515, %445, %375, %292
  %913 = phi i8* [ %293, %292 ], [ %376, %375 ], [ %446, %445 ], [ %516, %515 ], [ %911, %910 ], [ %902, %901 ]
  %914 = icmp eq i8* %913, null
  br i1 %914, label %1166, label %915

915:                                              ; preds = %1019, %912
  %916 = phi i8* [ %1020, %1019 ], [ %913, %912 ]
  br label %917

917:                                              ; preds = %915, %917
  %918 = phi i8* [ %925, %917 ], [ %916, %915 ]
  %919 = load i8, i8* %918, align 1
  %920 = zext i8 %919 to i64
  %921 = getelementptr inbounds [256 x i8], [256 x i8]* bitcast (<{ [128 x i8], [128 x i8] }>* @_ZN6skjson12_GLOBAL__N_113g_token_flagsE to [256 x i8]*), i64 0, i64 %920
  %922 = load i8, i8* %921, align 1
  %923 = and i8 %922, 2
  %924 = icmp eq i8 %923, 0
  %925 = getelementptr inbounds i8, i8* %918, i64 1
  br i1 %924, label %926, label %917

926:                                              ; preds = %917
  %927 = sext i8 %919 to i32
  switch i32 %927, label %1166 [
    i32 44, label %934
    i32 93, label %928
    i32 125, label %931
  ]

928:                                              ; preds = %926
  %929 = getelementptr inbounds %"class.skjson::(anonymous namespace)::DOMParser", %"class.skjson::(anonymous namespace)::DOMParser"* %5, i64 0, i32 3
  %930 = load i64, i64* %929, align 8
  br label %1098

931:                                              ; preds = %926
  %932 = getelementptr inbounds %"class.skjson::(anonymous namespace)::DOMParser", %"class.skjson::(anonymous namespace)::DOMParser"* %5, i64 0, i32 3
  %933 = load i64, i64* %932, align 8
  br label %938

934:                                              ; preds = %926
  %935 = getelementptr inbounds %"class.skjson::(anonymous namespace)::DOMParser", %"class.skjson::(anonymous namespace)::DOMParser"* %5, i64 0, i32 3
  %936 = load i64, i64* %935, align 8
  %937 = icmp sgt i64 %936, 0
  br i1 %937, label %178, label %246

938:                                              ; preds = %931, %171
  %939 = phi i64 [ %933, %931 ], [ %175, %171 ]
  %940 = phi i8* [ %918, %931 ], [ %104, %171 ]
  %941 = icmp slt i64 %939, 0
  br i1 %941, label %1166, label %942

942:                                              ; preds = %938
  %943 = getelementptr inbounds %"class.skjson::(anonymous namespace)::DOMParser", %"class.skjson::(anonymous namespace)::DOMParser"* %5, i64 0, i32 3
  %944 = getelementptr inbounds %"class.skjson::(anonymous namespace)::DOMParser", %"class.skjson::(anonymous namespace)::DOMParser"* %5, i64 0, i32 1, i32 0, i32 1
  %945 = bitcast %"class.skjson::Value"** %944 to i64*
  %946 = load i64, i64* %945, align 8
  %947 = load i64, i64* %18, align 8
  %948 = sub i64 %946, %947
  %949 = ashr exact i64 %948, 3
  %950 = sub i64 %949, %939
  %951 = lshr i64 %950, 1
  %952 = inttoptr i64 %947 to %"class.skjson::Value"*
  %953 = add nsw i64 %939, -1
  %954 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %952, i64 %953
  %955 = bitcast %"class.skjson::Value"* %954 to i64*
  %956 = load i64, i64* %955, align 8
  store i64 %956, i64* %943, align 8
  %957 = load %class.SkArenaAlloc*, %class.SkArenaAlloc** %10, align 8
  %958 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %952, i64 %939, i32 0, i64 0
  %959 = shl i64 %951, 4
  %960 = or i64 %959, 8
  %961 = icmp ult i64 %960, 4294967296
  br i1 %961, label %963, label %962

962:                                              ; preds = %942
  call void @abort() #13
  unreachable

963:                                              ; preds = %942
  %964 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %957, i64 0, i32 1
  %965 = bitcast i8** %964 to i64*
  %966 = load i64, i64* %965, align 8
  %967 = sub i64 0, %966
  %968 = and i64 %967, 7
  %969 = and i64 %960, 4294967288
  %970 = or i64 %968, %969
  %971 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %957, i64 0, i32 2
  %972 = bitcast i8** %971 to i64*
  %973 = load i64, i64* %972, align 8
  %974 = sub i64 %973, %966
  %975 = icmp ugt i64 %970, %974
  br i1 %975, label %976, label %981

976:                                              ; preds = %963
  %977 = trunc i64 %960 to i32
  call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %957, i32 %977, i32 8) #14
  %978 = load i64, i64* %965, align 8
  %979 = sub i64 0, %978
  %980 = and i64 %979, 7
  br label %981

981:                                              ; preds = %976, %963
  %982 = phi i64 [ %978, %976 ], [ %966, %963 ]
  %983 = phi i64 [ %980, %976 ], [ %968, %963 ]
  %984 = inttoptr i64 %982 to i8*
  %985 = getelementptr inbounds i8, i8* %984, i64 %983
  %986 = getelementptr inbounds i8, i8* %985, i64 %960
  store i8* %986, i8** %964, align 8
  %987 = bitcast i8* %985 to i64*
  store i64 %951, i64* %987, align 8
  %988 = icmp eq i64 %959, 0
  br i1 %988, label %991, label %989

989:                                              ; preds = %981
  %990 = getelementptr inbounds i8, i8* %985, i64 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %990, i8* align 1 %958, i64 %959, i1 false) #14
  br label %991

991:                                              ; preds = %989, %981
  %992 = ptrtoint i8* %985 to i64
  %993 = or i64 %992, 7
  store i64 %993, i64* %955, align 8
  %994 = load i64, i64* %945, align 8
  %995 = load i64, i64* %18, align 8
  %996 = sub i64 %994, %995
  %997 = ashr exact i64 %996, 3
  %998 = icmp ugt i64 %939, %997
  %999 = inttoptr i64 %995 to %"class.skjson::Value"*
  br i1 %998, label %1000, label %1002

1000:                                             ; preds = %991
  %1001 = sub i64 %939, %997
  call void @_ZNSt3__16vectorIN6skjson5ValueENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector"* %11, i64 %1001) #14
  br label %1006

1002:                                             ; preds = %991
  %1003 = icmp ult i64 %939, %997
  br i1 %1003, label %1004, label %1006

1004:                                             ; preds = %1002
  %1005 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %999, i64 %939
  store %"class.skjson::Value"* %1005, %"class.skjson::Value"** %944, align 8
  br label %1006

1006:                                             ; preds = %1160, %1162, %1164, %1000, %1002, %1004
  %1007 = phi i8* [ %940, %1004 ], [ %940, %1002 ], [ %940, %1000 ], [ %1100, %1164 ], [ %1100, %1162 ], [ %1100, %1160 ]
  %1008 = getelementptr inbounds %"class.skjson::(anonymous namespace)::DOMParser", %"class.skjson::(anonymous namespace)::DOMParser"* %5, i64 0, i32 3
  %1009 = load i64, i64* %1008, align 8
  %1010 = icmp eq i64 %1009, 0
  %1011 = icmp eq i8* %1007, %75
  br i1 %1010, label %1012, label %1018

1012:                                             ; preds = %1006
  br i1 %1011, label %1013, label %1166

1013:                                             ; preds = %1012
  %1014 = getelementptr inbounds %"class.skjson::(anonymous namespace)::DOMParser", %"class.skjson::(anonymous namespace)::DOMParser"* %5, i64 0, i32 1, i32 0, i32 0
  %1015 = bitcast %"class.skjson::Value"** %1014 to i64**
  %1016 = load i64*, i64** %1015, align 8
  %1017 = load i64, i64* %1016, align 8
  br label %1166

1018:                                             ; preds = %1006
  br i1 %1011, label %1166, label %1019

1019:                                             ; preds = %1018
  %1020 = getelementptr inbounds i8, i8* %1007, i64 1
  br label %915

1021:                                             ; preds = %100, %1021
  %1022 = phi i8* [ %1023, %1021 ], [ %101, %100 ]
  %1023 = getelementptr inbounds i8, i8* %1022, i64 1
  %1024 = load i8, i8* %1023, align 1
  %1025 = zext i8 %1024 to i64
  %1026 = getelementptr inbounds [256 x i8], [256 x i8]* bitcast (<{ [128 x i8], [128 x i8] }>* @_ZN6skjson12_GLOBAL__N_113g_token_flagsE to [256 x i8]*), i64 0, i64 %1025
  %1027 = load i8, i8* %1026, align 1
  %1028 = and i8 %1027, 2
  %1029 = icmp eq i8 %1028, 0
  br i1 %1029, label %1030, label %1021

1030:                                             ; preds = %1021
  %1031 = getelementptr inbounds %"class.skjson::(anonymous namespace)::DOMParser", %"class.skjson::(anonymous namespace)::DOMParser"* %5, i64 0, i32 3
  %1032 = load i64, i64* %1031, align 8
  %1033 = getelementptr inbounds %"class.skjson::(anonymous namespace)::DOMParser", %"class.skjson::(anonymous namespace)::DOMParser"* %5, i64 0, i32 1, i32 0, i32 1
  %1034 = load %"class.skjson::Value"*, %"class.skjson::Value"** %1033, align 8
  %1035 = load %"class.skjson::Value"*, %"class.skjson::Value"** %15, align 8
  %1036 = icmp ult %"class.skjson::Value"* %1034, %1035
  %1037 = ptrtoint %"class.skjson::Value"* %1035 to i64
  br i1 %1036, label %1038, label %1043

1038:                                             ; preds = %1030
  %1039 = bitcast %"class.skjson::Value"* %1034 to i64*
  store i64 %1032, i64* %1039, align 8
  %1040 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %1034, i64 1
  %1041 = ptrtoint %"class.skjson::Value"* %1040 to i64
  %1042 = bitcast %"class.skjson::Value"** %1033 to i64*
  store i64 %1041, i64* %1042, align 8
  br label %1090

1043:                                             ; preds = %1030
  %1044 = ptrtoint %"class.skjson::Value"* %1034 to i64
  %1045 = bitcast %"class.skjson::Value"** %1033 to i64*
  %1046 = load i64, i64* %18, align 8
  %1047 = sub i64 %1044, %1046
  %1048 = ashr exact i64 %1047, 3
  %1049 = add nsw i64 %1048, 1
  %1050 = icmp ugt i64 %1049, 2305843009213693951
  %1051 = inttoptr i64 %1046 to %"class.skjson::Value"*
  br i1 %1050, label %1052, label %1054

1052:                                             ; preds = %1043
  %1053 = bitcast %"class.std::__1::vector"* %11 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %1053) #13
  unreachable

1054:                                             ; preds = %1043
  %1055 = sub i64 %1037, %1046
  %1056 = ashr exact i64 %1055, 3
  %1057 = icmp ult i64 %1056, 1152921504606846975
  br i1 %1057, label %1058, label %1066

1058:                                             ; preds = %1054
  %1059 = ashr exact i64 %1055, 2
  %1060 = icmp ult i64 %1059, %1049
  %1061 = select i1 %1060, i64 %1049, i64 %1059
  %1062 = icmp eq i64 %1061, 0
  br i1 %1062, label %1071, label %1063

1063:                                             ; preds = %1058
  %1064 = icmp ugt i64 %1061, 2305843009213693951
  br i1 %1064, label %1065, label %1066

1065:                                             ; preds = %1063
  call void @abort() #13
  unreachable

1066:                                             ; preds = %1063, %1054
  %1067 = phi i64 [ %1061, %1063 ], [ 2305843009213693951, %1054 ]
  %1068 = shl i64 %1067, 3
  %1069 = call i8* @_Znwm(i64 %1068) #16
  %1070 = bitcast i8* %1069 to %"class.skjson::Value"*
  br label %1071

1071:                                             ; preds = %1066, %1058
  %1072 = phi i64 [ %1067, %1066 ], [ 0, %1058 ]
  %1073 = phi %"class.skjson::Value"* [ %1070, %1066 ], [ null, %1058 ]
  %1074 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %1073, i64 %1048
  %1075 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %1073, i64 %1072
  %1076 = ptrtoint %"class.skjson::Value"* %1075 to i64
  %1077 = bitcast %"class.skjson::Value"* %1074 to i64*
  store i64 %1032, i64* %1077, align 8
  %1078 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %1074, i64 1
  %1079 = ptrtoint %"class.skjson::Value"* %1078 to i64
  %1080 = ptrtoint %"class.skjson::Value"* %1073 to i64
  %1081 = icmp sgt i64 %1047, 0
  br i1 %1081, label %1082, label %1085

1082:                                             ; preds = %1071
  %1083 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %1073, i64 0, i32 0, i64 0
  %1084 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %1051, i64 0, i32 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1083, i8* align 8 %1084, i64 %1047, i1 false) #14
  br label %1085

1085:                                             ; preds = %1082, %1071
  store i64 %1080, i64* %18, align 8
  store i64 %1079, i64* %1045, align 8
  store i64 %1076, i64* %16, align 8
  %1086 = icmp eq i64 %1046, 0
  br i1 %1086, label %1090, label %1087

1087:                                             ; preds = %1085
  %1088 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %1051, i64 0, i32 0, i64 0
  call void @_ZdlPv(i8* %1088) #16
  %1089 = load i64, i64* %1045, align 8
  br label %1090

1090:                                             ; preds = %1087, %1085, %1038
  %1091 = phi i64 [ %1041, %1038 ], [ %1079, %1085 ], [ %1089, %1087 ]
  %1092 = load i64, i64* %18, align 8
  %1093 = sub i64 %1091, %1092
  %1094 = ashr exact i64 %1093, 3
  %1095 = sub nsw i64 0, %1094
  store i64 %1095, i64* %1031, align 8
  %1096 = load i8, i8* %1023, align 1
  %1097 = icmp eq i8 %1096, 93
  br i1 %1097, label %1098, label %246

1098:                                             ; preds = %1090, %928
  %1099 = phi i64 [ %930, %928 ], [ %1095, %1090 ]
  %1100 = phi i8* [ %918, %928 ], [ %1023, %1090 ]
  %1101 = icmp sgt i64 %1099, 0
  br i1 %1101, label %1166, label %1102

1102:                                             ; preds = %1098
  %1103 = getelementptr inbounds %"class.skjson::(anonymous namespace)::DOMParser", %"class.skjson::(anonymous namespace)::DOMParser"* %5, i64 0, i32 3
  %1104 = sub nsw i64 0, %1099
  %1105 = getelementptr inbounds %"class.skjson::(anonymous namespace)::DOMParser", %"class.skjson::(anonymous namespace)::DOMParser"* %5, i64 0, i32 1, i32 0, i32 1
  %1106 = bitcast %"class.skjson::Value"** %1105 to i64*
  %1107 = load i64, i64* %1106, align 8
  %1108 = load i64, i64* %18, align 8
  %1109 = sub i64 %1107, %1108
  %1110 = ashr exact i64 %1109, 3
  %1111 = add i64 %1110, %1099
  %1112 = inttoptr i64 %1108 to %"class.skjson::Value"*
  %1113 = xor i64 %1099, -1
  %1114 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %1112, i64 %1113
  %1115 = bitcast %"class.skjson::Value"* %1114 to i64*
  %1116 = load i64, i64* %1115, align 8
  store i64 %1116, i64* %1103, align 8
  %1117 = load %class.SkArenaAlloc*, %class.SkArenaAlloc** %10, align 8
  %1118 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %1112, i64 %1104, i32 0, i64 0
  %1119 = shl i64 %1111, 3
  %1120 = add i64 %1119, 8
  %1121 = icmp ult i64 %1120, 4294967296
  br i1 %1121, label %1123, label %1122

1122:                                             ; preds = %1102
  call void @abort() #13
  unreachable

1123:                                             ; preds = %1102
  %1124 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %1117, i64 0, i32 1
  %1125 = bitcast i8** %1124 to i64*
  %1126 = load i64, i64* %1125, align 8
  %1127 = sub i64 0, %1126
  %1128 = and i64 %1127, 7
  %1129 = and i64 %1120, 4294967288
  %1130 = or i64 %1128, %1129
  %1131 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %1117, i64 0, i32 2
  %1132 = bitcast i8** %1131 to i64*
  %1133 = load i64, i64* %1132, align 8
  %1134 = sub i64 %1133, %1126
  %1135 = icmp ugt i64 %1130, %1134
  br i1 %1135, label %1136, label %1141

1136:                                             ; preds = %1123
  %1137 = trunc i64 %1120 to i32
  call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %1117, i32 %1137, i32 8) #14
  %1138 = load i64, i64* %1125, align 8
  %1139 = sub i64 0, %1138
  %1140 = and i64 %1139, 7
  br label %1141

1141:                                             ; preds = %1136, %1123
  %1142 = phi i64 [ %1138, %1136 ], [ %1126, %1123 ]
  %1143 = phi i64 [ %1140, %1136 ], [ %1128, %1123 ]
  %1144 = inttoptr i64 %1142 to i8*
  %1145 = getelementptr inbounds i8, i8* %1144, i64 %1143
  %1146 = getelementptr inbounds i8, i8* %1145, i64 %1120
  store i8* %1146, i8** %1124, align 8
  %1147 = bitcast i8* %1145 to i64*
  store i64 %1111, i64* %1147, align 8
  %1148 = icmp eq i64 %1119, 0
  br i1 %1148, label %1151, label %1149

1149:                                             ; preds = %1141
  %1150 = getelementptr inbounds i8, i8* %1145, i64 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1150, i8* align 1 %1118, i64 %1119, i1 false) #14
  br label %1151

1151:                                             ; preds = %1149, %1141
  %1152 = ptrtoint i8* %1145 to i64
  %1153 = or i64 %1152, 6
  store i64 %1153, i64* %1115, align 8
  %1154 = load i64, i64* %1106, align 8
  %1155 = load i64, i64* %18, align 8
  %1156 = sub i64 %1154, %1155
  %1157 = ashr exact i64 %1156, 3
  %1158 = icmp ult i64 %1157, %1104
  %1159 = inttoptr i64 %1155 to %"class.skjson::Value"*
  br i1 %1158, label %1160, label %1162

1160:                                             ; preds = %1151
  %1161 = sub i64 %1104, %1157
  call void @_ZNSt3__16vectorIN6skjson5ValueENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector"* %11, i64 %1161) #14
  br label %1006

1162:                                             ; preds = %1151
  %1163 = icmp ugt i64 %1157, %1104
  br i1 %1163, label %1164, label %1006

1164:                                             ; preds = %1162
  %1165 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %1159, i64 %1104
  store %"class.skjson::Value"* %1165, %"class.skjson::Value"** %1105, align 8
  br label %1006

1166:                                             ; preds = %226, %229, %296, %299, %69, %84, %96, %189, %211, %244, %257, %279, %303, %306, %310, %314, %377, %380, %384, %447, %450, %454, %912, %926, %938, %1012, %1013, %1018, %1098
  %1167 = phi i64 [ 1, %69 ], [ 1, %84 ], [ 1, %96 ], [ 1, %189 ], [ 1, %244 ], [ 1, %257 ], [ 1, %912 ], [ 1, %926 ], [ 1, %938 ], [ %1017, %1013 ], [ 1, %1012 ], [ 1, %1018 ], [ 1, %1098 ], [ 1, %211 ], [ 1, %279 ], [ 1, %314 ], [ 1, %310 ], [ 1, %306 ], [ 1, %303 ], [ 1, %384 ], [ 1, %380 ], [ 1, %377 ], [ 1, %454 ], [ 1, %450 ], [ 1, %447 ], [ 1, %299 ], [ 1, %296 ], [ 1, %229 ], [ 1, %226 ]
  %1168 = getelementptr inbounds %"class.skjson::DOM", %"class.skjson::DOM"* %0, i64 0, i32 1
  %1169 = bitcast %"class.skjson::Value"* %1168 to i64*
  store i64 %1167, i64* %1169, align 8
  call void @_ZN8SkStringD1Ev(%class.SkString* %13) #14
  %1170 = getelementptr inbounds %"class.skjson::(anonymous namespace)::DOMParser", %"class.skjson::(anonymous namespace)::DOMParser"* %5, i64 0, i32 2, i32 0, i32 0
  %1171 = load i8*, i8** %1170, align 8
  %1172 = icmp eq i8* %1171, null
  br i1 %1172, label %1177, label %1173

1173:                                             ; preds = %1166
  %1174 = ptrtoint i8* %1171 to i64
  %1175 = getelementptr inbounds %"class.skjson::(anonymous namespace)::DOMParser", %"class.skjson::(anonymous namespace)::DOMParser"* %5, i64 0, i32 2, i32 0, i32 1
  %1176 = bitcast i8** %1175 to i64*
  store i64 %1174, i64* %1176, align 8
  call void @_ZdlPv(i8* nonnull %1171) #16
  br label %1177

1177:                                             ; preds = %1173, %1166
  %1178 = getelementptr inbounds %"class.skjson::(anonymous namespace)::DOMParser", %"class.skjson::(anonymous namespace)::DOMParser"* %5, i64 0, i32 1, i32 0, i32 0
  %1179 = load %"class.skjson::Value"*, %"class.skjson::Value"** %1178, align 8
  %1180 = icmp eq %"class.skjson::Value"* %1179, null
  br i1 %1180, label %1186, label %1181

1181:                                             ; preds = %1177
  %1182 = ptrtoint %"class.skjson::Value"* %1179 to i64
  %1183 = getelementptr inbounds %"class.skjson::(anonymous namespace)::DOMParser", %"class.skjson::(anonymous namespace)::DOMParser"* %5, i64 0, i32 1, i32 0, i32 1
  %1184 = bitcast %"class.skjson::Value"** %1183 to i64*
  store i64 %1182, i64* %1184, align 8
  %1185 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %1179, i64 0, i32 0, i64 0
  call void @_ZdlPv(i8* %1185) #16
  br label %1186

1186:                                             ; preds = %1177, %1181
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %7) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK6skjson3DOM5writeEP9SkWStream(%"class.skjson::DOM"*, %class.SkWStream*) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.skjson::DOM", %"class.skjson::DOM"* %0, i64 0, i32 1
  tail call fastcc void @_ZN6skjson12_GLOBAL__N_15WriteERKNS_5ValueEP9SkWStream(%"class.skjson::Value"* dereferenceable(8) %3, %class.SkWStream* %1)
  ret void
}

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #7

declare void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc*, i32, i32) local_unnamed_addr #5

declare zeroext i1 @_ZN9SkWStream17writeScalarAsTextEf(%class.SkWStream*, float) local_unnamed_addr #5

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #8

declare void @_ZN12SkArenaAllocC2EPcmm(%class.SkArenaAlloc*, i8*, i64, i64) unnamed_addr #5

declare void @_ZN8SkStringC1Ev(%class.SkString*) unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #9

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #10

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #11

; Function Attrs: nounwind ssp uwtable
define internal fastcc %"class.std::__1::vector.4"* @_ZN6skjson12_GLOBAL__N_19DOMParser14unescapeStringEPKcS3_(%"class.skjson::(anonymous namespace)::DOMParser"*, i8* readonly, i8* readnone) unnamed_addr #3 align 2 {
  %4 = alloca i32, align 4
  %5 = alloca [5 x i8], align 1
  %6 = alloca i32, align 4
  %7 = bitcast i32* %6 to [4 x i8]*
  %8 = getelementptr inbounds %"class.skjson::(anonymous namespace)::DOMParser", %"class.skjson::(anonymous namespace)::DOMParser"* %0, i64 0, i32 2
  %9 = bitcast %"class.std::__1::vector.4"* %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %"class.skjson::(anonymous namespace)::DOMParser", %"class.skjson::(anonymous namespace)::DOMParser"* %0, i64 0, i32 2, i32 0, i32 1
  %12 = bitcast i8** %11 to i64*
  store i64 %10, i64* %12, align 8
  %13 = icmp eq i8* %1, %2
  br i1 %13, label %507, label %14

14:                                               ; preds = %3
  %15 = getelementptr inbounds %"class.skjson::(anonymous namespace)::DOMParser", %"class.skjson::(anonymous namespace)::DOMParser"* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast i8** %15 to i64*
  %17 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %8, i64 0, i32 0, i32 0
  %18 = bitcast i32* %4 to i8*
  %19 = getelementptr inbounds [5 x i8], [5 x i8]* %5, i64 0, i64 0
  %20 = getelementptr inbounds [5 x i8], [5 x i8]* %5, i64 0, i64 1
  %21 = getelementptr inbounds [5 x i8], [5 x i8]* %5, i64 0, i64 2
  %22 = getelementptr inbounds [5 x i8], [5 x i8]* %5, i64 0, i64 3
  %23 = getelementptr inbounds [5 x i8], [5 x i8]* %5, i64 0, i64 4
  %24 = bitcast i32* %6 to i8*
  %25 = getelementptr inbounds [5 x i8], [5 x i8]* %5, i64 0, i64 3
  %26 = bitcast i8* %25 to i16*
  br label %27

27:                                               ; preds = %14, %503
  %28 = phi i8* [ %1, %14 ], [ %505, %503 ]
  %29 = load i8, i8* %28, align 1
  %30 = icmp eq i8 %29, 92
  br i1 %30, label %82, label %31

31:                                               ; preds = %27
  %32 = load i8*, i8** %11, align 8
  %33 = load i8*, i8** %15, align 8
  %34 = icmp eq i8* %32, %33
  %35 = ptrtoint i8* %33 to i64
  br i1 %34, label %39, label %36

36:                                               ; preds = %31
  store i8 %29, i8* %32, align 1
  %37 = getelementptr inbounds i8, i8* %32, i64 1
  %38 = ptrtoint i8* %37 to i64
  store i64 %38, i64* %12, align 8
  br label %503

39:                                               ; preds = %31
  %40 = ptrtoint i8* %32 to i64
  %41 = load i64, i64* %9, align 8
  %42 = sub i64 %40, %41
  %43 = add i64 %42, 1
  %44 = icmp slt i64 %43, 0
  br i1 %44, label %45, label %47

45:                                               ; preds = %39
  %46 = bitcast %"class.std::__1::vector.4"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %46) #13
  unreachable

47:                                               ; preds = %39
  %48 = sub i64 %35, %41
  %49 = icmp ult i64 %48, 4611686018427387903
  br i1 %49, label %50, label %55

50:                                               ; preds = %47
  %51 = shl i64 %48, 1
  %52 = icmp ult i64 %51, %43
  %53 = select i1 %52, i64 %43, i64 %51
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %59, label %55

55:                                               ; preds = %50, %47
  %56 = phi i64 [ %53, %50 ], [ 9223372036854775807, %47 ]
  %57 = call i8* @_Znwm(i64 %56) #16
  %58 = load i8, i8* %28, align 1
  br label %59

59:                                               ; preds = %55, %50
  %60 = phi i8 [ %58, %55 ], [ %29, %50 ]
  %61 = phi i64 [ %56, %55 ], [ 0, %50 ]
  %62 = phi i8* [ %57, %55 ], [ null, %50 ]
  %63 = getelementptr inbounds i8, i8* %62, i64 %42
  %64 = getelementptr inbounds i8, i8* %62, i64 %61
  %65 = ptrtoint i8* %64 to i64
  store i8 %60, i8* %63, align 1
  %66 = getelementptr inbounds i8, i8* %63, i64 1
  %67 = ptrtoint i8* %66 to i64
  %68 = load i8*, i8** %17, align 8
  %69 = load i64, i64* %12, align 8
  %70 = ptrtoint i8* %68 to i64
  %71 = sub i64 %69, %70
  %72 = sub i64 0, %71
  %73 = getelementptr inbounds i8, i8* %63, i64 %72
  %74 = ptrtoint i8* %73 to i64
  %75 = icmp sgt i64 %71, 0
  br i1 %75, label %76, label %78

76:                                               ; preds = %59
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %73, i8* align 1 %68, i64 %71, i1 false) #14
  %77 = load i8*, i8** %17, align 8
  br label %78

78:                                               ; preds = %76, %59
  %79 = phi i8* [ %68, %59 ], [ %77, %76 ]
  store i64 %74, i64* %9, align 8
  store i64 %67, i64* %12, align 8
  store i64 %65, i64* %16, align 8
  %80 = icmp eq i8* %79, null
  br i1 %80, label %503, label %81

81:                                               ; preds = %78
  call void @_ZdlPv(i8* nonnull %79) #16
  br label %503

82:                                               ; preds = %27
  %83 = getelementptr inbounds i8, i8* %28, i64 1
  %84 = icmp eq i8* %83, %2
  br i1 %84, label %507, label %85

85:                                               ; preds = %82
  %86 = load i8, i8* %83, align 1
  %87 = sext i8 %86 to i32
  switch i32 %87, label %507 [
    i32 34, label %88
    i32 92, label %137
    i32 47, label %186
    i32 98, label %235
    i32 102, label %284
    i32 110, label %333
    i32 114, label %382
    i32 116, label %431
    i32 117, label %480
  ]

88:                                               ; preds = %85
  %89 = load i8*, i8** %11, align 8
  %90 = load i8*, i8** %15, align 8
  %91 = icmp ult i8* %89, %90
  %92 = ptrtoint i8* %90 to i64
  br i1 %91, label %93, label %96

93:                                               ; preds = %88
  store i8 34, i8* %89, align 1
  %94 = getelementptr inbounds i8, i8* %89, i64 1
  %95 = ptrtoint i8* %94 to i64
  store i64 %95, i64* %12, align 8
  br label %503

96:                                               ; preds = %88
  %97 = ptrtoint i8* %89 to i64
  %98 = load i64, i64* %9, align 8
  %99 = sub i64 %97, %98
  %100 = add i64 %99, 1
  %101 = icmp slt i64 %100, 0
  br i1 %101, label %102, label %104

102:                                              ; preds = %96
  %103 = bitcast %"class.std::__1::vector.4"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %103) #13
  unreachable

104:                                              ; preds = %96
  %105 = sub i64 %92, %98
  %106 = icmp ult i64 %105, 4611686018427387903
  br i1 %106, label %107, label %112

107:                                              ; preds = %104
  %108 = shl i64 %105, 1
  %109 = icmp ult i64 %108, %100
  %110 = select i1 %109, i64 %100, i64 %108
  %111 = icmp eq i64 %110, 0
  br i1 %111, label %115, label %112

112:                                              ; preds = %107, %104
  %113 = phi i64 [ %110, %107 ], [ 9223372036854775807, %104 ]
  %114 = call i8* @_Znwm(i64 %113) #16
  br label %115

115:                                              ; preds = %112, %107
  %116 = phi i64 [ %113, %112 ], [ 0, %107 ]
  %117 = phi i8* [ %114, %112 ], [ null, %107 ]
  %118 = getelementptr inbounds i8, i8* %117, i64 %99
  %119 = getelementptr inbounds i8, i8* %117, i64 %116
  %120 = ptrtoint i8* %119 to i64
  store i8 34, i8* %118, align 1
  %121 = getelementptr inbounds i8, i8* %118, i64 1
  %122 = ptrtoint i8* %121 to i64
  %123 = load i8*, i8** %17, align 8
  %124 = load i64, i64* %12, align 8
  %125 = ptrtoint i8* %123 to i64
  %126 = sub i64 %124, %125
  %127 = sub i64 0, %126
  %128 = getelementptr inbounds i8, i8* %118, i64 %127
  %129 = ptrtoint i8* %128 to i64
  %130 = icmp sgt i64 %126, 0
  br i1 %130, label %131, label %133

131:                                              ; preds = %115
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %128, i8* align 1 %123, i64 %126, i1 false) #14
  %132 = load i8*, i8** %17, align 8
  br label %133

133:                                              ; preds = %131, %115
  %134 = phi i8* [ %123, %115 ], [ %132, %131 ]
  store i64 %129, i64* %9, align 8
  store i64 %122, i64* %12, align 8
  store i64 %120, i64* %16, align 8
  %135 = icmp eq i8* %134, null
  br i1 %135, label %503, label %136

136:                                              ; preds = %133
  call void @_ZdlPv(i8* nonnull %134) #16
  br label %503

137:                                              ; preds = %85
  %138 = load i8*, i8** %11, align 8
  %139 = load i8*, i8** %15, align 8
  %140 = icmp ult i8* %138, %139
  %141 = ptrtoint i8* %139 to i64
  br i1 %140, label %142, label %145

142:                                              ; preds = %137
  store i8 92, i8* %138, align 1
  %143 = getelementptr inbounds i8, i8* %138, i64 1
  %144 = ptrtoint i8* %143 to i64
  store i64 %144, i64* %12, align 8
  br label %503

145:                                              ; preds = %137
  %146 = ptrtoint i8* %138 to i64
  %147 = load i64, i64* %9, align 8
  %148 = sub i64 %146, %147
  %149 = add i64 %148, 1
  %150 = icmp slt i64 %149, 0
  br i1 %150, label %151, label %153

151:                                              ; preds = %145
  %152 = bitcast %"class.std::__1::vector.4"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %152) #13
  unreachable

153:                                              ; preds = %145
  %154 = sub i64 %141, %147
  %155 = icmp ult i64 %154, 4611686018427387903
  br i1 %155, label %156, label %161

156:                                              ; preds = %153
  %157 = shl i64 %154, 1
  %158 = icmp ult i64 %157, %149
  %159 = select i1 %158, i64 %149, i64 %157
  %160 = icmp eq i64 %159, 0
  br i1 %160, label %164, label %161

161:                                              ; preds = %156, %153
  %162 = phi i64 [ %159, %156 ], [ 9223372036854775807, %153 ]
  %163 = call i8* @_Znwm(i64 %162) #16
  br label %164

164:                                              ; preds = %161, %156
  %165 = phi i64 [ %162, %161 ], [ 0, %156 ]
  %166 = phi i8* [ %163, %161 ], [ null, %156 ]
  %167 = getelementptr inbounds i8, i8* %166, i64 %148
  %168 = getelementptr inbounds i8, i8* %166, i64 %165
  %169 = ptrtoint i8* %168 to i64
  store i8 92, i8* %167, align 1
  %170 = getelementptr inbounds i8, i8* %167, i64 1
  %171 = ptrtoint i8* %170 to i64
  %172 = load i8*, i8** %17, align 8
  %173 = load i64, i64* %12, align 8
  %174 = ptrtoint i8* %172 to i64
  %175 = sub i64 %173, %174
  %176 = sub i64 0, %175
  %177 = getelementptr inbounds i8, i8* %167, i64 %176
  %178 = ptrtoint i8* %177 to i64
  %179 = icmp sgt i64 %175, 0
  br i1 %179, label %180, label %182

180:                                              ; preds = %164
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %177, i8* align 1 %172, i64 %175, i1 false) #14
  %181 = load i8*, i8** %17, align 8
  br label %182

182:                                              ; preds = %180, %164
  %183 = phi i8* [ %172, %164 ], [ %181, %180 ]
  store i64 %178, i64* %9, align 8
  store i64 %171, i64* %12, align 8
  store i64 %169, i64* %16, align 8
  %184 = icmp eq i8* %183, null
  br i1 %184, label %503, label %185

185:                                              ; preds = %182
  call void @_ZdlPv(i8* nonnull %183) #16
  br label %503

186:                                              ; preds = %85
  %187 = load i8*, i8** %11, align 8
  %188 = load i8*, i8** %15, align 8
  %189 = icmp ult i8* %187, %188
  %190 = ptrtoint i8* %188 to i64
  br i1 %189, label %191, label %194

191:                                              ; preds = %186
  store i8 47, i8* %187, align 1
  %192 = getelementptr inbounds i8, i8* %187, i64 1
  %193 = ptrtoint i8* %192 to i64
  store i64 %193, i64* %12, align 8
  br label %503

194:                                              ; preds = %186
  %195 = ptrtoint i8* %187 to i64
  %196 = load i64, i64* %9, align 8
  %197 = sub i64 %195, %196
  %198 = add i64 %197, 1
  %199 = icmp slt i64 %198, 0
  br i1 %199, label %200, label %202

200:                                              ; preds = %194
  %201 = bitcast %"class.std::__1::vector.4"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %201) #13
  unreachable

202:                                              ; preds = %194
  %203 = sub i64 %190, %196
  %204 = icmp ult i64 %203, 4611686018427387903
  br i1 %204, label %205, label %210

205:                                              ; preds = %202
  %206 = shl i64 %203, 1
  %207 = icmp ult i64 %206, %198
  %208 = select i1 %207, i64 %198, i64 %206
  %209 = icmp eq i64 %208, 0
  br i1 %209, label %213, label %210

210:                                              ; preds = %205, %202
  %211 = phi i64 [ %208, %205 ], [ 9223372036854775807, %202 ]
  %212 = call i8* @_Znwm(i64 %211) #16
  br label %213

213:                                              ; preds = %210, %205
  %214 = phi i64 [ %211, %210 ], [ 0, %205 ]
  %215 = phi i8* [ %212, %210 ], [ null, %205 ]
  %216 = getelementptr inbounds i8, i8* %215, i64 %197
  %217 = getelementptr inbounds i8, i8* %215, i64 %214
  %218 = ptrtoint i8* %217 to i64
  store i8 47, i8* %216, align 1
  %219 = getelementptr inbounds i8, i8* %216, i64 1
  %220 = ptrtoint i8* %219 to i64
  %221 = load i8*, i8** %17, align 8
  %222 = load i64, i64* %12, align 8
  %223 = ptrtoint i8* %221 to i64
  %224 = sub i64 %222, %223
  %225 = sub i64 0, %224
  %226 = getelementptr inbounds i8, i8* %216, i64 %225
  %227 = ptrtoint i8* %226 to i64
  %228 = icmp sgt i64 %224, 0
  br i1 %228, label %229, label %231

229:                                              ; preds = %213
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %226, i8* align 1 %221, i64 %224, i1 false) #14
  %230 = load i8*, i8** %17, align 8
  br label %231

231:                                              ; preds = %229, %213
  %232 = phi i8* [ %221, %213 ], [ %230, %229 ]
  store i64 %227, i64* %9, align 8
  store i64 %220, i64* %12, align 8
  store i64 %218, i64* %16, align 8
  %233 = icmp eq i8* %232, null
  br i1 %233, label %503, label %234

234:                                              ; preds = %231
  call void @_ZdlPv(i8* nonnull %232) #16
  br label %503

235:                                              ; preds = %85
  %236 = load i8*, i8** %11, align 8
  %237 = load i8*, i8** %15, align 8
  %238 = icmp ult i8* %236, %237
  %239 = ptrtoint i8* %237 to i64
  br i1 %238, label %240, label %243

240:                                              ; preds = %235
  store i8 8, i8* %236, align 1
  %241 = getelementptr inbounds i8, i8* %236, i64 1
  %242 = ptrtoint i8* %241 to i64
  store i64 %242, i64* %12, align 8
  br label %503

243:                                              ; preds = %235
  %244 = ptrtoint i8* %236 to i64
  %245 = load i64, i64* %9, align 8
  %246 = sub i64 %244, %245
  %247 = add i64 %246, 1
  %248 = icmp slt i64 %247, 0
  br i1 %248, label %249, label %251

249:                                              ; preds = %243
  %250 = bitcast %"class.std::__1::vector.4"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %250) #13
  unreachable

251:                                              ; preds = %243
  %252 = sub i64 %239, %245
  %253 = icmp ult i64 %252, 4611686018427387903
  br i1 %253, label %254, label %259

254:                                              ; preds = %251
  %255 = shl i64 %252, 1
  %256 = icmp ult i64 %255, %247
  %257 = select i1 %256, i64 %247, i64 %255
  %258 = icmp eq i64 %257, 0
  br i1 %258, label %262, label %259

259:                                              ; preds = %254, %251
  %260 = phi i64 [ %257, %254 ], [ 9223372036854775807, %251 ]
  %261 = call i8* @_Znwm(i64 %260) #16
  br label %262

262:                                              ; preds = %259, %254
  %263 = phi i64 [ %260, %259 ], [ 0, %254 ]
  %264 = phi i8* [ %261, %259 ], [ null, %254 ]
  %265 = getelementptr inbounds i8, i8* %264, i64 %246
  %266 = getelementptr inbounds i8, i8* %264, i64 %263
  %267 = ptrtoint i8* %266 to i64
  store i8 8, i8* %265, align 1
  %268 = getelementptr inbounds i8, i8* %265, i64 1
  %269 = ptrtoint i8* %268 to i64
  %270 = load i8*, i8** %17, align 8
  %271 = load i64, i64* %12, align 8
  %272 = ptrtoint i8* %270 to i64
  %273 = sub i64 %271, %272
  %274 = sub i64 0, %273
  %275 = getelementptr inbounds i8, i8* %265, i64 %274
  %276 = ptrtoint i8* %275 to i64
  %277 = icmp sgt i64 %273, 0
  br i1 %277, label %278, label %280

278:                                              ; preds = %262
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %275, i8* align 1 %270, i64 %273, i1 false) #14
  %279 = load i8*, i8** %17, align 8
  br label %280

280:                                              ; preds = %278, %262
  %281 = phi i8* [ %270, %262 ], [ %279, %278 ]
  store i64 %276, i64* %9, align 8
  store i64 %269, i64* %12, align 8
  store i64 %267, i64* %16, align 8
  %282 = icmp eq i8* %281, null
  br i1 %282, label %503, label %283

283:                                              ; preds = %280
  call void @_ZdlPv(i8* nonnull %281) #16
  br label %503

284:                                              ; preds = %85
  %285 = load i8*, i8** %11, align 8
  %286 = load i8*, i8** %15, align 8
  %287 = icmp ult i8* %285, %286
  %288 = ptrtoint i8* %286 to i64
  br i1 %287, label %289, label %292

289:                                              ; preds = %284
  store i8 12, i8* %285, align 1
  %290 = getelementptr inbounds i8, i8* %285, i64 1
  %291 = ptrtoint i8* %290 to i64
  store i64 %291, i64* %12, align 8
  br label %503

292:                                              ; preds = %284
  %293 = ptrtoint i8* %285 to i64
  %294 = load i64, i64* %9, align 8
  %295 = sub i64 %293, %294
  %296 = add i64 %295, 1
  %297 = icmp slt i64 %296, 0
  br i1 %297, label %298, label %300

298:                                              ; preds = %292
  %299 = bitcast %"class.std::__1::vector.4"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %299) #13
  unreachable

300:                                              ; preds = %292
  %301 = sub i64 %288, %294
  %302 = icmp ult i64 %301, 4611686018427387903
  br i1 %302, label %303, label %308

303:                                              ; preds = %300
  %304 = shl i64 %301, 1
  %305 = icmp ult i64 %304, %296
  %306 = select i1 %305, i64 %296, i64 %304
  %307 = icmp eq i64 %306, 0
  br i1 %307, label %311, label %308

308:                                              ; preds = %303, %300
  %309 = phi i64 [ %306, %303 ], [ 9223372036854775807, %300 ]
  %310 = call i8* @_Znwm(i64 %309) #16
  br label %311

311:                                              ; preds = %308, %303
  %312 = phi i64 [ %309, %308 ], [ 0, %303 ]
  %313 = phi i8* [ %310, %308 ], [ null, %303 ]
  %314 = getelementptr inbounds i8, i8* %313, i64 %295
  %315 = getelementptr inbounds i8, i8* %313, i64 %312
  %316 = ptrtoint i8* %315 to i64
  store i8 12, i8* %314, align 1
  %317 = getelementptr inbounds i8, i8* %314, i64 1
  %318 = ptrtoint i8* %317 to i64
  %319 = load i8*, i8** %17, align 8
  %320 = load i64, i64* %12, align 8
  %321 = ptrtoint i8* %319 to i64
  %322 = sub i64 %320, %321
  %323 = sub i64 0, %322
  %324 = getelementptr inbounds i8, i8* %314, i64 %323
  %325 = ptrtoint i8* %324 to i64
  %326 = icmp sgt i64 %322, 0
  br i1 %326, label %327, label %329

327:                                              ; preds = %311
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %324, i8* align 1 %319, i64 %322, i1 false) #14
  %328 = load i8*, i8** %17, align 8
  br label %329

329:                                              ; preds = %327, %311
  %330 = phi i8* [ %319, %311 ], [ %328, %327 ]
  store i64 %325, i64* %9, align 8
  store i64 %318, i64* %12, align 8
  store i64 %316, i64* %16, align 8
  %331 = icmp eq i8* %330, null
  br i1 %331, label %503, label %332

332:                                              ; preds = %329
  call void @_ZdlPv(i8* nonnull %330) #16
  br label %503

333:                                              ; preds = %85
  %334 = load i8*, i8** %11, align 8
  %335 = load i8*, i8** %15, align 8
  %336 = icmp ult i8* %334, %335
  %337 = ptrtoint i8* %335 to i64
  br i1 %336, label %338, label %341

338:                                              ; preds = %333
  store i8 10, i8* %334, align 1
  %339 = getelementptr inbounds i8, i8* %334, i64 1
  %340 = ptrtoint i8* %339 to i64
  store i64 %340, i64* %12, align 8
  br label %503

341:                                              ; preds = %333
  %342 = ptrtoint i8* %334 to i64
  %343 = load i64, i64* %9, align 8
  %344 = sub i64 %342, %343
  %345 = add i64 %344, 1
  %346 = icmp slt i64 %345, 0
  br i1 %346, label %347, label %349

347:                                              ; preds = %341
  %348 = bitcast %"class.std::__1::vector.4"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %348) #13
  unreachable

349:                                              ; preds = %341
  %350 = sub i64 %337, %343
  %351 = icmp ult i64 %350, 4611686018427387903
  br i1 %351, label %352, label %357

352:                                              ; preds = %349
  %353 = shl i64 %350, 1
  %354 = icmp ult i64 %353, %345
  %355 = select i1 %354, i64 %345, i64 %353
  %356 = icmp eq i64 %355, 0
  br i1 %356, label %360, label %357

357:                                              ; preds = %352, %349
  %358 = phi i64 [ %355, %352 ], [ 9223372036854775807, %349 ]
  %359 = call i8* @_Znwm(i64 %358) #16
  br label %360

360:                                              ; preds = %357, %352
  %361 = phi i64 [ %358, %357 ], [ 0, %352 ]
  %362 = phi i8* [ %359, %357 ], [ null, %352 ]
  %363 = getelementptr inbounds i8, i8* %362, i64 %344
  %364 = getelementptr inbounds i8, i8* %362, i64 %361
  %365 = ptrtoint i8* %364 to i64
  store i8 10, i8* %363, align 1
  %366 = getelementptr inbounds i8, i8* %363, i64 1
  %367 = ptrtoint i8* %366 to i64
  %368 = load i8*, i8** %17, align 8
  %369 = load i64, i64* %12, align 8
  %370 = ptrtoint i8* %368 to i64
  %371 = sub i64 %369, %370
  %372 = sub i64 0, %371
  %373 = getelementptr inbounds i8, i8* %363, i64 %372
  %374 = ptrtoint i8* %373 to i64
  %375 = icmp sgt i64 %371, 0
  br i1 %375, label %376, label %378

376:                                              ; preds = %360
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %373, i8* align 1 %368, i64 %371, i1 false) #14
  %377 = load i8*, i8** %17, align 8
  br label %378

378:                                              ; preds = %376, %360
  %379 = phi i8* [ %368, %360 ], [ %377, %376 ]
  store i64 %374, i64* %9, align 8
  store i64 %367, i64* %12, align 8
  store i64 %365, i64* %16, align 8
  %380 = icmp eq i8* %379, null
  br i1 %380, label %503, label %381

381:                                              ; preds = %378
  call void @_ZdlPv(i8* nonnull %379) #16
  br label %503

382:                                              ; preds = %85
  %383 = load i8*, i8** %11, align 8
  %384 = load i8*, i8** %15, align 8
  %385 = icmp ult i8* %383, %384
  %386 = ptrtoint i8* %384 to i64
  br i1 %385, label %387, label %390

387:                                              ; preds = %382
  store i8 13, i8* %383, align 1
  %388 = getelementptr inbounds i8, i8* %383, i64 1
  %389 = ptrtoint i8* %388 to i64
  store i64 %389, i64* %12, align 8
  br label %503

390:                                              ; preds = %382
  %391 = ptrtoint i8* %383 to i64
  %392 = load i64, i64* %9, align 8
  %393 = sub i64 %391, %392
  %394 = add i64 %393, 1
  %395 = icmp slt i64 %394, 0
  br i1 %395, label %396, label %398

396:                                              ; preds = %390
  %397 = bitcast %"class.std::__1::vector.4"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %397) #13
  unreachable

398:                                              ; preds = %390
  %399 = sub i64 %386, %392
  %400 = icmp ult i64 %399, 4611686018427387903
  br i1 %400, label %401, label %406

401:                                              ; preds = %398
  %402 = shl i64 %399, 1
  %403 = icmp ult i64 %402, %394
  %404 = select i1 %403, i64 %394, i64 %402
  %405 = icmp eq i64 %404, 0
  br i1 %405, label %409, label %406

406:                                              ; preds = %401, %398
  %407 = phi i64 [ %404, %401 ], [ 9223372036854775807, %398 ]
  %408 = call i8* @_Znwm(i64 %407) #16
  br label %409

409:                                              ; preds = %406, %401
  %410 = phi i64 [ %407, %406 ], [ 0, %401 ]
  %411 = phi i8* [ %408, %406 ], [ null, %401 ]
  %412 = getelementptr inbounds i8, i8* %411, i64 %393
  %413 = getelementptr inbounds i8, i8* %411, i64 %410
  %414 = ptrtoint i8* %413 to i64
  store i8 13, i8* %412, align 1
  %415 = getelementptr inbounds i8, i8* %412, i64 1
  %416 = ptrtoint i8* %415 to i64
  %417 = load i8*, i8** %17, align 8
  %418 = load i64, i64* %12, align 8
  %419 = ptrtoint i8* %417 to i64
  %420 = sub i64 %418, %419
  %421 = sub i64 0, %420
  %422 = getelementptr inbounds i8, i8* %412, i64 %421
  %423 = ptrtoint i8* %422 to i64
  %424 = icmp sgt i64 %420, 0
  br i1 %424, label %425, label %427

425:                                              ; preds = %409
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %422, i8* align 1 %417, i64 %420, i1 false) #14
  %426 = load i8*, i8** %17, align 8
  br label %427

427:                                              ; preds = %425, %409
  %428 = phi i8* [ %417, %409 ], [ %426, %425 ]
  store i64 %423, i64* %9, align 8
  store i64 %416, i64* %12, align 8
  store i64 %414, i64* %16, align 8
  %429 = icmp eq i8* %428, null
  br i1 %429, label %503, label %430

430:                                              ; preds = %427
  call void @_ZdlPv(i8* nonnull %428) #16
  br label %503

431:                                              ; preds = %85
  %432 = load i8*, i8** %11, align 8
  %433 = load i8*, i8** %15, align 8
  %434 = icmp ult i8* %432, %433
  %435 = ptrtoint i8* %433 to i64
  br i1 %434, label %436, label %439

436:                                              ; preds = %431
  store i8 9, i8* %432, align 1
  %437 = getelementptr inbounds i8, i8* %432, i64 1
  %438 = ptrtoint i8* %437 to i64
  store i64 %438, i64* %12, align 8
  br label %503

439:                                              ; preds = %431
  %440 = ptrtoint i8* %432 to i64
  %441 = load i64, i64* %9, align 8
  %442 = sub i64 %440, %441
  %443 = add i64 %442, 1
  %444 = icmp slt i64 %443, 0
  br i1 %444, label %445, label %447

445:                                              ; preds = %439
  %446 = bitcast %"class.std::__1::vector.4"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %446) #13
  unreachable

447:                                              ; preds = %439
  %448 = sub i64 %435, %441
  %449 = icmp ult i64 %448, 4611686018427387903
  br i1 %449, label %450, label %455

450:                                              ; preds = %447
  %451 = shl i64 %448, 1
  %452 = icmp ult i64 %451, %443
  %453 = select i1 %452, i64 %443, i64 %451
  %454 = icmp eq i64 %453, 0
  br i1 %454, label %458, label %455

455:                                              ; preds = %450, %447
  %456 = phi i64 [ %453, %450 ], [ 9223372036854775807, %447 ]
  %457 = call i8* @_Znwm(i64 %456) #16
  br label %458

458:                                              ; preds = %455, %450
  %459 = phi i64 [ %456, %455 ], [ 0, %450 ]
  %460 = phi i8* [ %457, %455 ], [ null, %450 ]
  %461 = getelementptr inbounds i8, i8* %460, i64 %442
  %462 = getelementptr inbounds i8, i8* %460, i64 %459
  %463 = ptrtoint i8* %462 to i64
  store i8 9, i8* %461, align 1
  %464 = getelementptr inbounds i8, i8* %461, i64 1
  %465 = ptrtoint i8* %464 to i64
  %466 = load i8*, i8** %17, align 8
  %467 = load i64, i64* %12, align 8
  %468 = ptrtoint i8* %466 to i64
  %469 = sub i64 %467, %468
  %470 = sub i64 0, %469
  %471 = getelementptr inbounds i8, i8* %461, i64 %470
  %472 = ptrtoint i8* %471 to i64
  %473 = icmp sgt i64 %469, 0
  br i1 %473, label %474, label %476

474:                                              ; preds = %458
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %471, i8* align 1 %466, i64 %469, i1 false) #14
  %475 = load i8*, i8** %17, align 8
  br label %476

476:                                              ; preds = %474, %458
  %477 = phi i8* [ %466, %458 ], [ %475, %474 ]
  store i64 %472, i64* %9, align 8
  store i64 %465, i64* %12, align 8
  store i64 %463, i64* %16, align 8
  %478 = icmp eq i8* %477, null
  br i1 %478, label %503, label %479

479:                                              ; preds = %476
  call void @_ZdlPv(i8* nonnull %477) #16
  br label %503

480:                                              ; preds = %85
  %481 = getelementptr inbounds i8, i8* %28, i64 5
  %482 = icmp ult i8* %481, %2
  br i1 %482, label %483, label %507

483:                                              ; preds = %480
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %18) #14
  store i32 -1431655766, i32* %4, align 4
  call void @llvm.lifetime.start.p0i8(i64 5, i8* nonnull %19) #14
  %484 = getelementptr inbounds i8, i8* %28, i64 2
  store i16 -21846, i16* %26, align 1
  %485 = load i8, i8* %484, align 1
  store i8 %485, i8* %19, align 1
  %486 = getelementptr inbounds i8, i8* %28, i64 3
  %487 = load i8, i8* %486, align 1
  store i8 %487, i8* %20, align 1
  %488 = getelementptr inbounds i8, i8* %28, i64 4
  %489 = load i8, i8* %488, align 1
  store i8 %489, i8* %21, align 1
  %490 = load i8, i8* %481, align 1
  store i8 %490, i8* %22, align 1
  store i8 0, i8* %23, align 1
  %491 = call i8* @_ZN7SkParse7FindHexEPKcPj(i8* nonnull %19, i32* nonnull %4) #14
  %492 = icmp eq i8* %491, null
  br i1 %492, label %496, label %493

493:                                              ; preds = %483
  %494 = load i8, i8* %491, align 1
  %495 = icmp eq i8 %494, 0
  br i1 %495, label %497, label %496

496:                                              ; preds = %493, %483
  call void @llvm.lifetime.end.p0i8(i64 5, i8* nonnull %19) #14
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %18) #14
  br label %507

497:                                              ; preds = %493
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %24) #14
  store i32 -1431655766, i32* %6, align 4
  %498 = load i32, i32* %4, align 4
  %499 = call i64 @_ZN5SkUTF6ToUTF8EiPc(i32 %498, i8* nonnull %24) #14
  %500 = load i8*, i8** %11, align 8
  %501 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 0, i64 %499
  %502 = call i8* @_ZNSt3__16vectorIcNS_9allocatorIcEEE6insertIPcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIcNS_15iterator_traitsIS7_E9referenceEEE5valueENS_11__wrap_iterIS5_EEE4typeENSB_IPKcEES7_S7_(%"class.std::__1::vector.4"* %8, i8* %500, i8* nonnull %24, i8* %501)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %24) #14
  call void @llvm.lifetime.end.p0i8(i64 5, i8* nonnull %19) #14
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %18) #14
  br label %503

503:                                              ; preds = %497, %479, %476, %436, %430, %427, %387, %381, %378, %338, %332, %329, %289, %283, %280, %240, %234, %231, %191, %185, %182, %142, %136, %133, %93, %81, %78, %36
  %504 = phi i8* [ %481, %497 ], [ %28, %36 ], [ %28, %78 ], [ %28, %81 ], [ %83, %93 ], [ %83, %133 ], [ %83, %136 ], [ %83, %142 ], [ %83, %182 ], [ %83, %185 ], [ %83, %191 ], [ %83, %231 ], [ %83, %234 ], [ %83, %240 ], [ %83, %280 ], [ %83, %283 ], [ %83, %289 ], [ %83, %329 ], [ %83, %332 ], [ %83, %338 ], [ %83, %378 ], [ %83, %381 ], [ %83, %387 ], [ %83, %427 ], [ %83, %430 ], [ %83, %436 ], [ %83, %476 ], [ %83, %479 ]
  %505 = getelementptr inbounds i8, i8* %504, i64 1
  %506 = icmp eq i8* %505, %2
  br i1 %506, label %507, label %27

507:                                              ; preds = %503, %82, %480, %85, %3, %496
  %508 = phi %"class.std::__1::vector.4"* [ null, %496 ], [ %8, %3 ], [ %8, %503 ], [ null, %82 ], [ null, %480 ], [ null, %85 ]
  ret %"class.std::__1::vector.4"* %508
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN6skjson12_GLOBAL__N_19DOMParser10pushStringEPKcmS3_(%"class.skjson::(anonymous namespace)::DOMParser"*, i8* readonly, i64, i8* readnone) unnamed_addr #3 align 2 {
  %5 = alloca i56, align 8
  %6 = getelementptr inbounds %"class.skjson::(anonymous namespace)::DOMParser", %"class.skjson::(anonymous namespace)::DOMParser"* %0, i64 0, i32 1
  %7 = getelementptr inbounds %"class.skjson::(anonymous namespace)::DOMParser", %"class.skjson::(anonymous namespace)::DOMParser"* %0, i64 0, i32 0
  %8 = load %class.SkArenaAlloc*, %class.SkArenaAlloc** %7, align 8
  %9 = icmp ugt i64 %2, 6
  br i1 %9, label %10, label %53

10:                                               ; preds = %4
  %11 = add i64 %2, 9
  %12 = icmp ult i64 %11, 4294967296
  br i1 %12, label %14, label %13

13:                                               ; preds = %10
  tail call void @abort() #13
  unreachable

14:                                               ; preds = %10
  %15 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %8, i64 0, i32 1
  %16 = bitcast i8** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 0, %17
  %19 = and i64 %18, 7
  %20 = and i64 %11, 4294967295
  %21 = add nuw nsw i64 %19, %20
  %22 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %8, i64 0, i32 2
  %23 = bitcast i8** %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %24, %17
  %26 = icmp ugt i64 %21, %25
  br i1 %26, label %27, label %32

27:                                               ; preds = %14
  %28 = trunc i64 %11 to i32
  tail call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %8, i32 %28, i32 8) #14
  %29 = load i64, i64* %16, align 8
  %30 = sub i64 0, %29
  %31 = and i64 %30, 7
  br label %32

32:                                               ; preds = %27, %14
  %33 = phi i64 [ %29, %27 ], [ %17, %14 ]
  %34 = phi i64 [ %31, %27 ], [ %19, %14 ]
  %35 = inttoptr i64 %33 to i8*
  %36 = getelementptr inbounds i8, i8* %35, i64 %34
  %37 = getelementptr inbounds i8, i8* %36, i64 %11
  store i8* %37, i8** %15, align 8
  %38 = bitcast i8* %36 to i64*
  store i64 %2, i64* %38, align 8
  %39 = icmp eq i64 %2, 0
  br i1 %39, label %42, label %40

40:                                               ; preds = %32
  %41 = getelementptr inbounds i8, i8* %36, i64 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %41, i8* align 1 %1, i64 %2, i1 false) #14
  br label %42

42:                                               ; preds = %40, %32
  %43 = ptrtoint i8* %36 to i64
  %44 = lshr i64 %43, 8
  %45 = trunc i64 %44 to i56
  store i56 %45, i56* %5, align 8
  %46 = trunc i64 %43 to i8
  %47 = or i8 %46, 5
  %48 = and i64 %43, -8
  %49 = inttoptr i64 %48 to i64*
  %50 = getelementptr inbounds i64, i64* %49, i64 1
  %51 = bitcast i64* %50 to i8*
  %52 = getelementptr inbounds i8, i8* %51, i64 %2
  store i8 0, i8* %52, align 1
  br label %73

53:                                               ; preds = %4
  %54 = icmp eq i8* %1, null
  %55 = getelementptr inbounds i8, i8* %1, i64 6
  %56 = icmp ugt i8* %55, %3
  %57 = or i1 %54, %56
  br i1 %57, label %69, label %58

58:                                               ; preds = %53
  %59 = getelementptr inbounds i8, i8* %1, i64 -1
  %60 = bitcast i8* %59 to i64*
  %61 = load i64, i64* %60, align 1
  %62 = shl i64 %2, 3
  %63 = sub nuw nsw i64 48, %62
  %64 = lshr i64 281474976710655, %63
  %65 = shl i64 %64, 8
  %66 = and i64 %61, %65
  %67 = lshr exact i64 %66, 8
  %68 = trunc i64 %67 to i56
  store i56 %68, i56* %5, align 8
  br label %73

69:                                               ; preds = %53
  store i56 0, i56* %5, align 8
  %70 = icmp eq i64 %2, 0
  br i1 %70, label %73, label %71

71:                                               ; preds = %69
  %72 = bitcast i56* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %72, i8* align 1 %1, i64 %2, i1 false) #14
  br label %73

73:                                               ; preds = %42, %58, %69, %71
  %74 = phi i8 [ %47, %42 ], [ 0, %69 ], [ 0, %71 ], [ 0, %58 ]
  %75 = getelementptr inbounds %"class.skjson::(anonymous namespace)::DOMParser", %"class.skjson::(anonymous namespace)::DOMParser"* %0, i64 0, i32 1, i32 0, i32 1
  %76 = load %"class.skjson::Value"*, %"class.skjson::Value"** %75, align 8
  %77 = getelementptr inbounds %"class.skjson::(anonymous namespace)::DOMParser", %"class.skjson::(anonymous namespace)::DOMParser"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %78 = load %"class.skjson::Value"*, %"class.skjson::Value"** %77, align 8
  %79 = icmp ult %"class.skjson::Value"* %76, %78
  %80 = ptrtoint %"class.skjson::Value"* %78 to i64
  br i1 %79, label %81, label %89

81:                                               ; preds = %73
  %82 = load i56, i56* %5, align 8
  %83 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %76, i64 0, i32 0, i64 0
  store i8 %74, i8* %83, align 8
  %84 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %76, i64 0, i32 0, i64 1
  %85 = bitcast i8* %84 to i56*
  store i56 %82, i56* %85, align 1
  %86 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %76, i64 1
  %87 = ptrtoint %"class.skjson::Value"* %86 to i64
  %88 = bitcast %"class.skjson::Value"** %75 to i64*
  store i64 %87, i64* %88, align 8
  br label %149

89:                                               ; preds = %73
  %90 = ptrtoint %"class.skjson::Value"* %76 to i64
  %91 = bitcast %"class.skjson::Value"** %75 to i64*
  %92 = bitcast %"class.std::__1::vector"* %6 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = sub i64 %90, %93
  %95 = ashr exact i64 %94, 3
  %96 = add nsw i64 %95, 1
  %97 = icmp ugt i64 %96, 2305843009213693951
  br i1 %97, label %98, label %100

98:                                               ; preds = %89
  %99 = bitcast %"class.std::__1::vector"* %6 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %99) #13
  unreachable

100:                                              ; preds = %89
  %101 = bitcast %"class.skjson::Value"** %77 to i64*
  %102 = sub i64 %80, %93
  %103 = ashr exact i64 %102, 3
  %104 = icmp ult i64 %103, 1152921504606846975
  br i1 %104, label %105, label %113

105:                                              ; preds = %100
  %106 = ashr exact i64 %102, 2
  %107 = icmp ult i64 %106, %96
  %108 = select i1 %107, i64 %96, i64 %106
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %118, label %110

110:                                              ; preds = %105
  %111 = icmp ugt i64 %108, 2305843009213693951
  br i1 %111, label %112, label %113

112:                                              ; preds = %110
  tail call void @abort() #13
  unreachable

113:                                              ; preds = %110, %100
  %114 = phi i64 [ %108, %110 ], [ 2305843009213693951, %100 ]
  %115 = shl i64 %114, 3
  %116 = tail call i8* @_Znwm(i64 %115) #16
  %117 = bitcast i8* %116 to %"class.skjson::Value"*
  br label %118

118:                                              ; preds = %113, %105
  %119 = phi i64 [ %114, %113 ], [ 0, %105 ]
  %120 = phi %"class.skjson::Value"* [ %117, %113 ], [ null, %105 ]
  %121 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %120, i64 %95
  %122 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %120, i64 %119
  %123 = ptrtoint %"class.skjson::Value"* %122 to i64
  %124 = load i56, i56* %5, align 8
  %125 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %121, i64 0, i32 0, i64 0
  store i8 %74, i8* %125, align 8
  %126 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %120, i64 %95, i32 0, i64 1
  %127 = bitcast i8* %126 to i56*
  store i56 %124, i56* %127, align 1
  %128 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %121, i64 1
  %129 = ptrtoint %"class.skjson::Value"* %128 to i64
  %130 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 0
  %131 = load %"class.skjson::Value"*, %"class.skjson::Value"** %130, align 8
  %132 = load i64, i64* %91, align 8
  %133 = ptrtoint %"class.skjson::Value"* %131 to i64
  %134 = sub i64 %132, %133
  %135 = ashr exact i64 %134, 3
  %136 = sub nsw i64 0, %135
  %137 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %121, i64 %136
  %138 = ptrtoint %"class.skjson::Value"* %137 to i64
  %139 = icmp sgt i64 %134, 0
  br i1 %139, label %140, label %144

140:                                              ; preds = %118
  %141 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %137, i64 0, i32 0, i64 0
  %142 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %131, i64 0, i32 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %141, i8* align 8 %142, i64 %134, i1 false) #14
  %143 = load %"class.skjson::Value"*, %"class.skjson::Value"** %130, align 8
  br label %144

144:                                              ; preds = %140, %118
  %145 = phi %"class.skjson::Value"* [ %131, %118 ], [ %143, %140 ]
  store i64 %138, i64* %92, align 8
  store i64 %129, i64* %91, align 8
  store i64 %123, i64* %101, align 8
  %146 = icmp eq %"class.skjson::Value"* %145, null
  br i1 %146, label %149, label %147

147:                                              ; preds = %144
  %148 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %145, i64 0, i32 0, i64 0
  tail call void @_ZdlPv(i8* %148) #16
  br label %149

149:                                              ; preds = %81, %144, %147
  ret void
}

declare i8* @_ZN7SkParse7FindHexEPKcPj(i8*, i32*) local_unnamed_addr #5

declare i64 @_ZN5SkUTF6ToUTF8EiPc(i32, i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNSt3__16vectorIcNS_9allocatorIcEEE6insertIPcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIcNS_15iterator_traitsIS7_E9referenceEEE5valueENS_11__wrap_iterIS5_EEE4typeENSB_IPKcEES7_S7_(%"class.std::__1::vector.4"*, i8*, i8*, i8*) local_unnamed_addr #3 comdat align 2 {
  %5 = ptrtoint i8* %1 to i64
  %6 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 0
  %7 = ptrtoint i8* %3 to i64
  %8 = ptrtoint i8* %2 to i64
  %9 = sub i64 %7, %8
  %10 = icmp sgt i64 %9, 0
  br i1 %10, label %11, label %414

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %13 = bitcast i8** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 1
  %16 = load i8*, i8** %15, align 8
  %17 = ptrtoint i8* %16 to i64
  %18 = sub i64 %14, %17
  %19 = icmp sgt i64 %9, %18
  %20 = bitcast i8** %15 to i64*
  br i1 %19, label %164, label %21

21:                                               ; preds = %11
  %22 = sub i64 %17, %5
  %23 = icmp sgt i64 %9, %22
  br i1 %23, label %24, label %37

24:                                               ; preds = %21
  %25 = getelementptr inbounds i8, i8* %2, i64 %22
  %26 = ptrtoint i8* %25 to i64
  %27 = sub i64 %7, %26
  %28 = icmp sgt i64 %27, 0
  br i1 %28, label %29, label %32

29:                                               ; preds = %24
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %16, i8* align 1 %25, i64 %27, i1 false) #14
  %30 = getelementptr inbounds i8, i8* %16, i64 %27
  %31 = ptrtoint i8* %30 to i64
  br label %32

32:                                               ; preds = %29, %24
  %33 = phi i64 [ %31, %29 ], [ %17, %24 ]
  store i64 %33, i64* %20, align 8
  %34 = icmp sgt i64 %22, 0
  br i1 %34, label %35, label %414

35:                                               ; preds = %32
  %36 = inttoptr i64 %33 to i8*
  br label %37

37:                                               ; preds = %35, %21
  %38 = phi i64 [ %33, %35 ], [ %17, %21 ]
  %39 = phi i8* [ %36, %35 ], [ %16, %21 ]
  %40 = phi i8* [ %25, %35 ], [ %3, %21 ]
  %41 = getelementptr inbounds i8, i8* %1, i64 %9
  %42 = ptrtoint i8* %41 to i64
  %43 = sub i64 %38, %42
  %44 = getelementptr inbounds i8, i8* %1, i64 %43
  %45 = icmp ult i8* %44, %16
  br i1 %45, label %46, label %146

46:                                               ; preds = %37
  %47 = sub i64 %9, %38
  %48 = getelementptr i8, i8* %16, i64 %47
  %49 = ptrtoint i8* %48 to i64
  %50 = icmp ult i8* %48, inttoptr (i64 32 to i8*)
  br i1 %50, label %51, label %54

51:                                               ; preds = %141, %54, %46
  %52 = phi i8* [ %44, %54 ], [ %44, %46 ], [ %64, %141 ]
  %53 = phi i8* [ %39, %54 ], [ %39, %46 ], [ %65, %141 ]
  br label %152

54:                                               ; preds = %46
  %55 = sub i64 %9, %38
  %56 = getelementptr i8, i8* %16, i64 %55
  %57 = ptrtoint i8* %56 to i64
  %58 = getelementptr i8, i8* %39, i64 %57
  %59 = icmp ult i8* %39, %16
  %60 = icmp ult i8* %44, %58
  %61 = and i1 %59, %60
  br i1 %61, label %51, label %62

62:                                               ; preds = %54
  %63 = and i64 %49, -32
  %64 = getelementptr i8, i8* %44, i64 %63
  %65 = getelementptr i8, i8* %39, i64 %63
  %66 = add i64 %63, -32
  %67 = lshr exact i64 %66, 5
  %68 = add nuw nsw i64 %67, 1
  %69 = and i64 %68, 3
  %70 = icmp ult i64 %66, 96
  br i1 %70, label %122, label %71

71:                                               ; preds = %62
  %72 = sub nsw i64 %68, %69
  br label %73

73:                                               ; preds = %73, %71
  %74 = phi i64 [ 0, %71 ], [ %119, %73 ]
  %75 = phi i64 [ %72, %71 ], [ %120, %73 ]
  %76 = getelementptr i8, i8* %44, i64 %74
  %77 = getelementptr i8, i8* %39, i64 %74
  %78 = bitcast i8* %76 to <16 x i8>*
  %79 = load <16 x i8>, <16 x i8>* %78, align 1, !alias.scope !7
  %80 = getelementptr i8, i8* %76, i64 16
  %81 = bitcast i8* %80 to <16 x i8>*
  %82 = load <16 x i8>, <16 x i8>* %81, align 1, !alias.scope !7
  %83 = bitcast i8* %77 to <16 x i8>*
  store <16 x i8> %79, <16 x i8>* %83, align 1, !alias.scope !10, !noalias !7
  %84 = getelementptr i8, i8* %77, i64 16
  %85 = bitcast i8* %84 to <16 x i8>*
  store <16 x i8> %82, <16 x i8>* %85, align 1, !alias.scope !10, !noalias !7
  %86 = or i64 %74, 32
  %87 = getelementptr i8, i8* %44, i64 %86
  %88 = getelementptr i8, i8* %39, i64 %86
  %89 = bitcast i8* %87 to <16 x i8>*
  %90 = load <16 x i8>, <16 x i8>* %89, align 1, !alias.scope !7
  %91 = getelementptr i8, i8* %87, i64 16
  %92 = bitcast i8* %91 to <16 x i8>*
  %93 = load <16 x i8>, <16 x i8>* %92, align 1, !alias.scope !7
  %94 = bitcast i8* %88 to <16 x i8>*
  store <16 x i8> %90, <16 x i8>* %94, align 1, !alias.scope !10, !noalias !7
  %95 = getelementptr i8, i8* %88, i64 16
  %96 = bitcast i8* %95 to <16 x i8>*
  store <16 x i8> %93, <16 x i8>* %96, align 1, !alias.scope !10, !noalias !7
  %97 = or i64 %74, 64
  %98 = getelementptr i8, i8* %44, i64 %97
  %99 = getelementptr i8, i8* %39, i64 %97
  %100 = bitcast i8* %98 to <16 x i8>*
  %101 = load <16 x i8>, <16 x i8>* %100, align 1, !alias.scope !7
  %102 = getelementptr i8, i8* %98, i64 16
  %103 = bitcast i8* %102 to <16 x i8>*
  %104 = load <16 x i8>, <16 x i8>* %103, align 1, !alias.scope !7
  %105 = bitcast i8* %99 to <16 x i8>*
  store <16 x i8> %101, <16 x i8>* %105, align 1, !alias.scope !10, !noalias !7
  %106 = getelementptr i8, i8* %99, i64 16
  %107 = bitcast i8* %106 to <16 x i8>*
  store <16 x i8> %104, <16 x i8>* %107, align 1, !alias.scope !10, !noalias !7
  %108 = or i64 %74, 96
  %109 = getelementptr i8, i8* %44, i64 %108
  %110 = getelementptr i8, i8* %39, i64 %108
  %111 = bitcast i8* %109 to <16 x i8>*
  %112 = load <16 x i8>, <16 x i8>* %111, align 1, !alias.scope !7
  %113 = getelementptr i8, i8* %109, i64 16
  %114 = bitcast i8* %113 to <16 x i8>*
  %115 = load <16 x i8>, <16 x i8>* %114, align 1, !alias.scope !7
  %116 = bitcast i8* %110 to <16 x i8>*
  store <16 x i8> %112, <16 x i8>* %116, align 1, !alias.scope !10, !noalias !7
  %117 = getelementptr i8, i8* %110, i64 16
  %118 = bitcast i8* %117 to <16 x i8>*
  store <16 x i8> %115, <16 x i8>* %118, align 1, !alias.scope !10, !noalias !7
  %119 = add i64 %74, 128
  %120 = add i64 %75, -4
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %122, label %73, !llvm.loop !12

122:                                              ; preds = %73, %62
  %123 = phi i64 [ 0, %62 ], [ %119, %73 ]
  %124 = icmp eq i64 %69, 0
  br i1 %124, label %141, label %125

125:                                              ; preds = %122, %125
  %126 = phi i64 [ %138, %125 ], [ %123, %122 ]
  %127 = phi i64 [ %139, %125 ], [ %69, %122 ]
  %128 = getelementptr i8, i8* %44, i64 %126
  %129 = getelementptr i8, i8* %39, i64 %126
  %130 = bitcast i8* %128 to <16 x i8>*
  %131 = load <16 x i8>, <16 x i8>* %130, align 1, !alias.scope !7
  %132 = getelementptr i8, i8* %128, i64 16
  %133 = bitcast i8* %132 to <16 x i8>*
  %134 = load <16 x i8>, <16 x i8>* %133, align 1, !alias.scope !7
  %135 = bitcast i8* %129 to <16 x i8>*
  store <16 x i8> %131, <16 x i8>* %135, align 1, !alias.scope !10, !noalias !7
  %136 = getelementptr i8, i8* %129, i64 16
  %137 = bitcast i8* %136 to <16 x i8>*
  store <16 x i8> %134, <16 x i8>* %137, align 1, !alias.scope !10, !noalias !7
  %138 = add i64 %126, 32
  %139 = add i64 %127, -1
  %140 = icmp eq i64 %139, 0
  br i1 %140, label %141, label %125, !llvm.loop !14

141:                                              ; preds = %125, %122
  %142 = icmp eq i64 %63, %49
  br i1 %142, label %143, label %51

143:                                              ; preds = %152, %141
  %144 = phi i8* [ %65, %141 ], [ %157, %152 ]
  %145 = ptrtoint i8* %144 to i64
  br label %146

146:                                              ; preds = %143, %37
  %147 = phi i64 [ %145, %143 ], [ %38, %37 ]
  store i64 %147, i64* %20, align 8
  %148 = icmp eq i64 %43, 0
  br i1 %148, label %159, label %149

149:                                              ; preds = %146
  %150 = sub i64 0, %43
  %151 = getelementptr inbounds i8, i8* %39, i64 %150
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %151, i8* align 1 %1, i64 %43, i1 false) #14
  br label %159

152:                                              ; preds = %51, %152
  %153 = phi i8* [ %156, %152 ], [ %52, %51 ]
  %154 = phi i8* [ %157, %152 ], [ %53, %51 ]
  %155 = load i8, i8* %153, align 1
  store i8 %155, i8* %154, align 1
  %156 = getelementptr inbounds i8, i8* %153, i64 1
  %157 = getelementptr inbounds i8, i8* %154, i64 1
  %158 = icmp eq i8* %156, %16
  br i1 %158, label %143, label %152, !llvm.loop !15

159:                                              ; preds = %146, %149
  %160 = ptrtoint i8* %40 to i64
  %161 = sub i64 %160, %8
  %162 = icmp eq i64 %161, 0
  br i1 %162, label %414, label %163

163:                                              ; preds = %159
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %2, i64 %161, i1 false) #14
  br label %414

164:                                              ; preds = %11
  %165 = bitcast %"class.std::__1::vector.4"* %0 to i64*
  %166 = load i64, i64* %165, align 8
  %167 = sub i64 %17, %166
  %168 = add i64 %167, %9
  %169 = icmp slt i64 %168, 0
  br i1 %169, label %170, label %172

170:                                              ; preds = %164
  %171 = bitcast %"class.std::__1::vector.4"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %171) #13
  unreachable

172:                                              ; preds = %164
  %173 = sub i64 %14, %166
  %174 = icmp ult i64 %173, 4611686018427387903
  br i1 %174, label %177, label %175

175:                                              ; preds = %172
  %176 = sub i64 %5, %166
  br label %183

177:                                              ; preds = %172
  %178 = shl i64 %173, 1
  %179 = icmp ult i64 %178, %168
  %180 = select i1 %179, i64 %168, i64 %178
  %181 = sub i64 %5, %166
  %182 = icmp eq i64 %180, 0
  br i1 %182, label %187, label %183

183:                                              ; preds = %175, %177
  %184 = phi i64 [ %176, %175 ], [ %181, %177 ]
  %185 = phi i64 [ 9223372036854775807, %175 ], [ %180, %177 ]
  %186 = tail call i8* @_Znwm(i64 %185) #16
  br label %187

187:                                              ; preds = %177, %183
  %188 = phi i64 [ %184, %183 ], [ %181, %177 ]
  %189 = phi i64 [ %185, %183 ], [ 0, %177 ]
  %190 = phi i8* [ %186, %183 ], [ null, %177 ]
  %191 = getelementptr inbounds i8, i8* %190, i64 %188
  %192 = getelementptr inbounds i8, i8* %190, i64 %189
  %193 = getelementptr inbounds i8, i8* %191, i64 %9
  %194 = icmp ult i64 %9, 32
  br i1 %194, label %280, label %195

195:                                              ; preds = %187
  %196 = icmp ult i8* %191, %3
  %197 = icmp ugt i8* %193, %2
  %198 = and i1 %196, %197
  br i1 %198, label %280, label %199

199:                                              ; preds = %195
  %200 = and i64 %9, -32
  %201 = getelementptr i8, i8* %191, i64 %200
  %202 = getelementptr i8, i8* %2, i64 %200
  %203 = add i64 %200, -32
  %204 = lshr exact i64 %203, 5
  %205 = add nuw nsw i64 %204, 1
  %206 = and i64 %205, 3
  %207 = icmp ult i64 %203, 96
  br i1 %207, label %259, label %208

208:                                              ; preds = %199
  %209 = sub nsw i64 %205, %206
  br label %210

210:                                              ; preds = %210, %208
  %211 = phi i64 [ 0, %208 ], [ %256, %210 ]
  %212 = phi i64 [ %209, %208 ], [ %257, %210 ]
  %213 = getelementptr i8, i8* %191, i64 %211
  %214 = getelementptr i8, i8* %2, i64 %211
  %215 = bitcast i8* %214 to <16 x i8>*
  %216 = load <16 x i8>, <16 x i8>* %215, align 1, !alias.scope !16
  %217 = getelementptr i8, i8* %214, i64 16
  %218 = bitcast i8* %217 to <16 x i8>*
  %219 = load <16 x i8>, <16 x i8>* %218, align 1, !alias.scope !16
  %220 = bitcast i8* %213 to <16 x i8>*
  store <16 x i8> %216, <16 x i8>* %220, align 1, !alias.scope !19, !noalias !16
  %221 = getelementptr i8, i8* %213, i64 16
  %222 = bitcast i8* %221 to <16 x i8>*
  store <16 x i8> %219, <16 x i8>* %222, align 1, !alias.scope !19, !noalias !16
  %223 = or i64 %211, 32
  %224 = getelementptr i8, i8* %191, i64 %223
  %225 = getelementptr i8, i8* %2, i64 %223
  %226 = bitcast i8* %225 to <16 x i8>*
  %227 = load <16 x i8>, <16 x i8>* %226, align 1, !alias.scope !16
  %228 = getelementptr i8, i8* %225, i64 16
  %229 = bitcast i8* %228 to <16 x i8>*
  %230 = load <16 x i8>, <16 x i8>* %229, align 1, !alias.scope !16
  %231 = bitcast i8* %224 to <16 x i8>*
  store <16 x i8> %227, <16 x i8>* %231, align 1, !alias.scope !19, !noalias !16
  %232 = getelementptr i8, i8* %224, i64 16
  %233 = bitcast i8* %232 to <16 x i8>*
  store <16 x i8> %230, <16 x i8>* %233, align 1, !alias.scope !19, !noalias !16
  %234 = or i64 %211, 64
  %235 = getelementptr i8, i8* %191, i64 %234
  %236 = getelementptr i8, i8* %2, i64 %234
  %237 = bitcast i8* %236 to <16 x i8>*
  %238 = load <16 x i8>, <16 x i8>* %237, align 1, !alias.scope !16
  %239 = getelementptr i8, i8* %236, i64 16
  %240 = bitcast i8* %239 to <16 x i8>*
  %241 = load <16 x i8>, <16 x i8>* %240, align 1, !alias.scope !16
  %242 = bitcast i8* %235 to <16 x i8>*
  store <16 x i8> %238, <16 x i8>* %242, align 1, !alias.scope !19, !noalias !16
  %243 = getelementptr i8, i8* %235, i64 16
  %244 = bitcast i8* %243 to <16 x i8>*
  store <16 x i8> %241, <16 x i8>* %244, align 1, !alias.scope !19, !noalias !16
  %245 = or i64 %211, 96
  %246 = getelementptr i8, i8* %191, i64 %245
  %247 = getelementptr i8, i8* %2, i64 %245
  %248 = bitcast i8* %247 to <16 x i8>*
  %249 = load <16 x i8>, <16 x i8>* %248, align 1, !alias.scope !16
  %250 = getelementptr i8, i8* %247, i64 16
  %251 = bitcast i8* %250 to <16 x i8>*
  %252 = load <16 x i8>, <16 x i8>* %251, align 1, !alias.scope !16
  %253 = bitcast i8* %246 to <16 x i8>*
  store <16 x i8> %249, <16 x i8>* %253, align 1, !alias.scope !19, !noalias !16
  %254 = getelementptr i8, i8* %246, i64 16
  %255 = bitcast i8* %254 to <16 x i8>*
  store <16 x i8> %252, <16 x i8>* %255, align 1, !alias.scope !19, !noalias !16
  %256 = add i64 %211, 128
  %257 = add i64 %212, -4
  %258 = icmp eq i64 %257, 0
  br i1 %258, label %259, label %210, !llvm.loop !21

259:                                              ; preds = %210, %199
  %260 = phi i64 [ 0, %199 ], [ %256, %210 ]
  %261 = icmp eq i64 %206, 0
  br i1 %261, label %278, label %262

262:                                              ; preds = %259, %262
  %263 = phi i64 [ %275, %262 ], [ %260, %259 ]
  %264 = phi i64 [ %276, %262 ], [ %206, %259 ]
  %265 = getelementptr i8, i8* %191, i64 %263
  %266 = getelementptr i8, i8* %2, i64 %263
  %267 = bitcast i8* %266 to <16 x i8>*
  %268 = load <16 x i8>, <16 x i8>* %267, align 1, !alias.scope !16
  %269 = getelementptr i8, i8* %266, i64 16
  %270 = bitcast i8* %269 to <16 x i8>*
  %271 = load <16 x i8>, <16 x i8>* %270, align 1, !alias.scope !16
  %272 = bitcast i8* %265 to <16 x i8>*
  store <16 x i8> %268, <16 x i8>* %272, align 1, !alias.scope !19, !noalias !16
  %273 = getelementptr i8, i8* %265, i64 16
  %274 = bitcast i8* %273 to <16 x i8>*
  store <16 x i8> %271, <16 x i8>* %274, align 1, !alias.scope !19, !noalias !16
  %275 = add i64 %263, 32
  %276 = add i64 %264, -1
  %277 = icmp eq i64 %276, 0
  br i1 %277, label %278, label %262, !llvm.loop !22

278:                                              ; preds = %262, %259
  %279 = icmp eq i64 %9, %200
  br i1 %279, label %290, label %280

280:                                              ; preds = %278, %195, %187
  %281 = phi i8* [ %191, %195 ], [ %191, %187 ], [ %201, %278 ]
  %282 = phi i8* [ %2, %195 ], [ %2, %187 ], [ %202, %278 ]
  br label %283

283:                                              ; preds = %280, %283
  %284 = phi i8* [ %287, %283 ], [ %281, %280 ]
  %285 = phi i8* [ %288, %283 ], [ %282, %280 ]
  %286 = load i8, i8* %285, align 1
  store i8 %286, i8* %284, align 1
  %287 = getelementptr inbounds i8, i8* %284, i64 1
  %288 = getelementptr inbounds i8, i8* %285, i64 1
  %289 = icmp eq i8* %193, %287
  br i1 %289, label %290, label %283, !llvm.loop !23

290:                                              ; preds = %283, %278
  %291 = ptrtoint i8* %192 to i64
  %292 = load i8*, i8** %6, align 8
  %293 = ptrtoint i8* %292 to i64
  %294 = sub i64 %5, %293
  %295 = sub i64 0, %294
  %296 = getelementptr inbounds i8, i8* %191, i64 %295
  %297 = ptrtoint i8* %296 to i64
  %298 = icmp sgt i64 %294, 0
  br i1 %298, label %299, label %300

299:                                              ; preds = %290
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %296, i8* align 1 %292, i64 %294, i1 false) #14
  br label %300

300:                                              ; preds = %299, %290
  %301 = load i8*, i8** %15, align 8
  %302 = icmp eq i8* %301, %1
  br i1 %302, label %408, label %303

303:                                              ; preds = %300
  %304 = ptrtoint i8* %301 to i64
  %305 = sub i64 %304, %5
  %306 = icmp ult i64 %305, 32
  br i1 %306, label %398, label %307

307:                                              ; preds = %303
  %308 = add i64 %188, %7
  %309 = sub i64 %308, %5
  %310 = sub i64 %309, %8
  %311 = getelementptr i8, i8* %301, i64 %310
  %312 = ptrtoint i8* %311 to i64
  %313 = getelementptr i8, i8* %190, i64 %312
  %314 = icmp ult i8* %193, %301
  %315 = icmp ugt i8* %313, %1
  %316 = and i1 %314, %315
  br i1 %316, label %398, label %317

317:                                              ; preds = %307
  %318 = and i64 %305, -32
  %319 = getelementptr i8, i8* %193, i64 %318
  %320 = getelementptr i8, i8* %1, i64 %318
  %321 = add i64 %318, -32
  %322 = lshr exact i64 %321, 5
  %323 = add nuw nsw i64 %322, 1
  %324 = and i64 %323, 3
  %325 = icmp ult i64 %321, 96
  br i1 %325, label %377, label %326

326:                                              ; preds = %317
  %327 = sub nsw i64 %323, %324
  br label %328

328:                                              ; preds = %328, %326
  %329 = phi i64 [ 0, %326 ], [ %374, %328 ]
  %330 = phi i64 [ %327, %326 ], [ %375, %328 ]
  %331 = getelementptr i8, i8* %193, i64 %329
  %332 = getelementptr i8, i8* %1, i64 %329
  %333 = bitcast i8* %332 to <16 x i8>*
  %334 = load <16 x i8>, <16 x i8>* %333, align 1, !alias.scope !24
  %335 = getelementptr i8, i8* %332, i64 16
  %336 = bitcast i8* %335 to <16 x i8>*
  %337 = load <16 x i8>, <16 x i8>* %336, align 1, !alias.scope !24
  %338 = bitcast i8* %331 to <16 x i8>*
  store <16 x i8> %334, <16 x i8>* %338, align 1, !alias.scope !27, !noalias !24
  %339 = getelementptr i8, i8* %331, i64 16
  %340 = bitcast i8* %339 to <16 x i8>*
  store <16 x i8> %337, <16 x i8>* %340, align 1, !alias.scope !27, !noalias !24
  %341 = or i64 %329, 32
  %342 = getelementptr i8, i8* %193, i64 %341
  %343 = getelementptr i8, i8* %1, i64 %341
  %344 = bitcast i8* %343 to <16 x i8>*
  %345 = load <16 x i8>, <16 x i8>* %344, align 1, !alias.scope !24
  %346 = getelementptr i8, i8* %343, i64 16
  %347 = bitcast i8* %346 to <16 x i8>*
  %348 = load <16 x i8>, <16 x i8>* %347, align 1, !alias.scope !24
  %349 = bitcast i8* %342 to <16 x i8>*
  store <16 x i8> %345, <16 x i8>* %349, align 1, !alias.scope !27, !noalias !24
  %350 = getelementptr i8, i8* %342, i64 16
  %351 = bitcast i8* %350 to <16 x i8>*
  store <16 x i8> %348, <16 x i8>* %351, align 1, !alias.scope !27, !noalias !24
  %352 = or i64 %329, 64
  %353 = getelementptr i8, i8* %193, i64 %352
  %354 = getelementptr i8, i8* %1, i64 %352
  %355 = bitcast i8* %354 to <16 x i8>*
  %356 = load <16 x i8>, <16 x i8>* %355, align 1, !alias.scope !24
  %357 = getelementptr i8, i8* %354, i64 16
  %358 = bitcast i8* %357 to <16 x i8>*
  %359 = load <16 x i8>, <16 x i8>* %358, align 1, !alias.scope !24
  %360 = bitcast i8* %353 to <16 x i8>*
  store <16 x i8> %356, <16 x i8>* %360, align 1, !alias.scope !27, !noalias !24
  %361 = getelementptr i8, i8* %353, i64 16
  %362 = bitcast i8* %361 to <16 x i8>*
  store <16 x i8> %359, <16 x i8>* %362, align 1, !alias.scope !27, !noalias !24
  %363 = or i64 %329, 96
  %364 = getelementptr i8, i8* %193, i64 %363
  %365 = getelementptr i8, i8* %1, i64 %363
  %366 = bitcast i8* %365 to <16 x i8>*
  %367 = load <16 x i8>, <16 x i8>* %366, align 1, !alias.scope !24
  %368 = getelementptr i8, i8* %365, i64 16
  %369 = bitcast i8* %368 to <16 x i8>*
  %370 = load <16 x i8>, <16 x i8>* %369, align 1, !alias.scope !24
  %371 = bitcast i8* %364 to <16 x i8>*
  store <16 x i8> %367, <16 x i8>* %371, align 1, !alias.scope !27, !noalias !24
  %372 = getelementptr i8, i8* %364, i64 16
  %373 = bitcast i8* %372 to <16 x i8>*
  store <16 x i8> %370, <16 x i8>* %373, align 1, !alias.scope !27, !noalias !24
  %374 = add i64 %329, 128
  %375 = add i64 %330, -4
  %376 = icmp eq i64 %375, 0
  br i1 %376, label %377, label %328, !llvm.loop !29

377:                                              ; preds = %328, %317
  %378 = phi i64 [ 0, %317 ], [ %374, %328 ]
  %379 = icmp eq i64 %324, 0
  br i1 %379, label %396, label %380

380:                                              ; preds = %377, %380
  %381 = phi i64 [ %393, %380 ], [ %378, %377 ]
  %382 = phi i64 [ %394, %380 ], [ %324, %377 ]
  %383 = getelementptr i8, i8* %193, i64 %381
  %384 = getelementptr i8, i8* %1, i64 %381
  %385 = bitcast i8* %384 to <16 x i8>*
  %386 = load <16 x i8>, <16 x i8>* %385, align 1, !alias.scope !24
  %387 = getelementptr i8, i8* %384, i64 16
  %388 = bitcast i8* %387 to <16 x i8>*
  %389 = load <16 x i8>, <16 x i8>* %388, align 1, !alias.scope !24
  %390 = bitcast i8* %383 to <16 x i8>*
  store <16 x i8> %386, <16 x i8>* %390, align 1, !alias.scope !27, !noalias !24
  %391 = getelementptr i8, i8* %383, i64 16
  %392 = bitcast i8* %391 to <16 x i8>*
  store <16 x i8> %389, <16 x i8>* %392, align 1, !alias.scope !27, !noalias !24
  %393 = add i64 %381, 32
  %394 = add i64 %382, -1
  %395 = icmp eq i64 %394, 0
  br i1 %395, label %396, label %380, !llvm.loop !30

396:                                              ; preds = %380, %377
  %397 = icmp eq i64 %305, %318
  br i1 %397, label %408, label %398

398:                                              ; preds = %396, %307, %303
  %399 = phi i8* [ %193, %307 ], [ %193, %303 ], [ %319, %396 ]
  %400 = phi i8* [ %1, %307 ], [ %1, %303 ], [ %320, %396 ]
  br label %401

401:                                              ; preds = %398, %401
  %402 = phi i8* [ %406, %401 ], [ %399, %398 ]
  %403 = phi i8* [ %405, %401 ], [ %400, %398 ]
  %404 = load i8, i8* %403, align 1
  store i8 %404, i8* %402, align 1
  %405 = getelementptr inbounds i8, i8* %403, i64 1
  %406 = getelementptr inbounds i8, i8* %402, i64 1
  %407 = icmp eq i8* %405, %301
  br i1 %407, label %408, label %401, !llvm.loop !31

408:                                              ; preds = %401, %396, %300
  %409 = phi i8* [ %193, %300 ], [ %319, %396 ], [ %406, %401 ]
  %410 = ptrtoint i8* %409 to i64
  %411 = load i8*, i8** %6, align 8
  store i64 %297, i64* %165, align 8
  store i64 %410, i64* %20, align 8
  store i64 %291, i64* %13, align 8
  %412 = icmp eq i8* %411, null
  br i1 %412, label %414, label %413

413:                                              ; preds = %408
  tail call void @_ZdlPv(i8* nonnull %411) #16
  br label %414

414:                                              ; preds = %413, %408, %32, %159, %163, %4
  %415 = phi i8* [ %1, %4 ], [ %1, %163 ], [ %1, %159 ], [ %1, %32 ], [ %191, %408 ], [ %191, %413 ]
  ret i8* %415
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nofree nounwind
declare float @strtof(i8* readonly, i8** nocapture) local_unnamed_addr #12

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN6skjson12_GLOBAL__N_19DOMParser9pushFloatEf(%"class.skjson::(anonymous namespace)::DOMParser"*, float) unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.skjson::(anonymous namespace)::DOMParser", %"class.skjson::(anonymous namespace)::DOMParser"* %0, i64 0, i32 1
  %4 = getelementptr inbounds %"class.skjson::(anonymous namespace)::DOMParser", %"class.skjson::(anonymous namespace)::DOMParser"* %0, i64 0, i32 1, i32 0, i32 1
  %5 = load %"class.skjson::Value"*, %"class.skjson::Value"** %4, align 8
  %6 = getelementptr inbounds %"class.skjson::(anonymous namespace)::DOMParser", %"class.skjson::(anonymous namespace)::DOMParser"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %7 = load %"class.skjson::Value"*, %"class.skjson::Value"** %6, align 8
  %8 = icmp ult %"class.skjson::Value"* %5, %7
  %9 = ptrtoint %"class.skjson::Value"* %7 to i64
  br i1 %8, label %10, label %17

10:                                               ; preds = %2
  %11 = bitcast %"class.skjson::Value"* %5 to i32*
  store i32 4, i32* %11, align 8
  %12 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %5, i64 0, i32 0, i64 4
  %13 = bitcast i8* %12 to float*
  store float %1, float* %13, align 4
  %14 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %5, i64 1
  %15 = ptrtoint %"class.skjson::Value"* %14 to i64
  %16 = bitcast %"class.skjson::Value"** %4 to i64*
  store i64 %15, i64* %16, align 8
  br label %76

17:                                               ; preds = %2
  %18 = ptrtoint %"class.skjson::Value"* %5 to i64
  %19 = bitcast %"class.skjson::Value"** %4 to i64*
  %20 = bitcast %"class.std::__1::vector"* %3 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %18, %21
  %23 = ashr exact i64 %22, 3
  %24 = add nsw i64 %23, 1
  %25 = icmp ugt i64 %24, 2305843009213693951
  br i1 %25, label %26, label %28

26:                                               ; preds = %17
  %27 = bitcast %"class.std::__1::vector"* %3 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %27) #13
  unreachable

28:                                               ; preds = %17
  %29 = bitcast %"class.skjson::Value"** %6 to i64*
  %30 = sub i64 %9, %21
  %31 = ashr exact i64 %30, 3
  %32 = icmp ult i64 %31, 1152921504606846975
  br i1 %32, label %33, label %41

33:                                               ; preds = %28
  %34 = ashr exact i64 %30, 2
  %35 = icmp ult i64 %34, %24
  %36 = select i1 %35, i64 %24, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %46, label %38

38:                                               ; preds = %33
  %39 = icmp ugt i64 %36, 2305843009213693951
  br i1 %39, label %40, label %41

40:                                               ; preds = %38
  tail call void @abort() #13
  unreachable

41:                                               ; preds = %38, %28
  %42 = phi i64 [ %36, %38 ], [ 2305843009213693951, %28 ]
  %43 = shl i64 %42, 3
  %44 = tail call i8* @_Znwm(i64 %43) #16
  %45 = bitcast i8* %44 to %"class.skjson::Value"*
  br label %46

46:                                               ; preds = %41, %33
  %47 = phi i64 [ %42, %41 ], [ 0, %33 ]
  %48 = phi %"class.skjson::Value"* [ %45, %41 ], [ null, %33 ]
  %49 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %48, i64 %23
  %50 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %48, i64 %47
  %51 = ptrtoint %"class.skjson::Value"* %50 to i64
  %52 = bitcast %"class.skjson::Value"* %49 to i32*
  store i32 4, i32* %52, align 8
  %53 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %48, i64 %23, i32 0, i64 4
  %54 = bitcast i8* %53 to float*
  store float %1, float* %54, align 4
  %55 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %49, i64 1
  %56 = ptrtoint %"class.skjson::Value"* %55 to i64
  %57 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 0
  %58 = load %"class.skjson::Value"*, %"class.skjson::Value"** %57, align 8
  %59 = load i64, i64* %19, align 8
  %60 = ptrtoint %"class.skjson::Value"* %58 to i64
  %61 = sub i64 %59, %60
  %62 = ashr exact i64 %61, 3
  %63 = sub nsw i64 0, %62
  %64 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %49, i64 %63
  %65 = ptrtoint %"class.skjson::Value"* %64 to i64
  %66 = icmp sgt i64 %61, 0
  br i1 %66, label %67, label %71

67:                                               ; preds = %46
  %68 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %64, i64 0, i32 0, i64 0
  %69 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %58, i64 0, i32 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %68, i8* align 8 %69, i64 %61, i1 false) #14
  %70 = load %"class.skjson::Value"*, %"class.skjson::Value"** %57, align 8
  br label %71

71:                                               ; preds = %67, %46
  %72 = phi %"class.skjson::Value"* [ %58, %46 ], [ %70, %67 ]
  store i64 %65, i64* %20, align 8
  store i64 %56, i64* %19, align 8
  store i64 %51, i64* %29, align 8
  %73 = icmp eq %"class.skjson::Value"* %72, null
  br i1 %73, label %76, label %74

74:                                               ; preds = %71
  %75 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %72, i64 0, i32 0, i64 0
  tail call void @_ZdlPv(i8* %75) #16
  br label %76

76:                                               ; preds = %10, %71, %74
  ret void
}

; Function Attrs: nofree nounwind
declare float @powf(float, float) local_unnamed_addr #12

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN6skjson5ValueENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #3 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.skjson::Value"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"class.skjson::Value"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 3
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %27, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"class.skjson::Value"*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %25, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %13, i64 %1
  %17 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %13, i64 0, i32 0, i64 0
  %18 = add i64 %1, -1
  %19 = sub i64 0, %8
  %20 = getelementptr %"class.skjson::Value", %"class.skjson::Value"* %13, i64 %18, i32 0, i64 %19
  %21 = ptrtoint i8* %20 to i64
  %22 = add i64 %21, 8
  %23 = and i64 %22, -8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %23, i1 false) #14
  %24 = ptrtoint %"class.skjson::Value"* %16 to i64
  br label %25

25:                                               ; preds = %12, %15
  %26 = phi i64 [ %24, %15 ], [ %8, %12 ]
  store i64 %26, i64* %7, align 8
  br label %82

27:                                               ; preds = %2
  %28 = bitcast %"class.std::__1::vector"* %0 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = sub i64 %8, %29
  %31 = ashr exact i64 %30, 3
  %32 = add i64 %31, %1
  %33 = icmp ugt i64 %32, 2305843009213693951
  br i1 %33, label %34, label %36

34:                                               ; preds = %27
  %35 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %35) #13
  unreachable

36:                                               ; preds = %27
  %37 = sub i64 %5, %29
  %38 = ashr exact i64 %37, 3
  %39 = icmp ult i64 %38, 1152921504606846975
  br i1 %39, label %40, label %48

40:                                               ; preds = %36
  %41 = ashr exact i64 %37, 2
  %42 = icmp ult i64 %41, %32
  %43 = select i1 %42, i64 %32, i64 %41
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %53, label %45

45:                                               ; preds = %40
  %46 = icmp ugt i64 %43, 2305843009213693951
  br i1 %46, label %47, label %48

47:                                               ; preds = %45
  tail call void @abort() #13
  unreachable

48:                                               ; preds = %36, %45
  %49 = phi i64 [ %43, %45 ], [ 2305843009213693951, %36 ]
  %50 = shl i64 %49, 3
  %51 = tail call i8* @_Znwm(i64 %50) #16
  %52 = bitcast i8* %51 to %"class.skjson::Value"*
  br label %53

53:                                               ; preds = %40, %48
  %54 = phi i64 [ %49, %48 ], [ 0, %40 ]
  %55 = phi %"class.skjson::Value"* [ %52, %48 ], [ null, %40 ]
  %56 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %55, i64 %31
  %57 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %56, i64 0, i32 0, i64 0
  %58 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %55, i64 %54
  %59 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %56, i64 %1
  %60 = shl nsw i64 %1, 3
  call void @llvm.memset.p0i8.i64(i8* align 8 %57, i8 0, i64 %60, i1 false)
  %61 = ptrtoint %"class.skjson::Value"* %58 to i64
  %62 = ptrtoint %"class.skjson::Value"* %59 to i64
  %63 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %64 = load %"class.skjson::Value"*, %"class.skjson::Value"** %63, align 8
  %65 = load i64, i64* %7, align 8
  %66 = ptrtoint %"class.skjson::Value"* %64 to i64
  %67 = sub i64 %65, %66
  %68 = ashr exact i64 %67, 3
  %69 = sub nsw i64 0, %68
  %70 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %56, i64 %69
  %71 = ptrtoint %"class.skjson::Value"* %70 to i64
  %72 = icmp sgt i64 %67, 0
  br i1 %72, label %73, label %77

73:                                               ; preds = %53
  %74 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %70, i64 0, i32 0, i64 0
  %75 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %64, i64 0, i32 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %74, i8* align 8 %75, i64 %67, i1 false) #14
  %76 = load %"class.skjson::Value"*, %"class.skjson::Value"** %63, align 8
  br label %77

77:                                               ; preds = %53, %73
  %78 = phi %"class.skjson::Value"* [ %64, %53 ], [ %76, %73 ]
  store i64 %71, i64* %28, align 8
  store i64 %62, i64* %7, align 8
  store i64 %61, i64* %4, align 8
  %79 = icmp eq %"class.skjson::Value"* %78, null
  br i1 %79, label %82, label %80

80:                                               ; preds = %77
  %81 = getelementptr inbounds %"class.skjson::Value", %"class.skjson::Value"* %78, i64 0, i32 0, i64 0
  tail call void @_ZdlPv(i8* %81) #16
  br label %82

82:                                               ; preds = %80, %77, %25
  ret void
}

; Function Attrs: nounwind
declare void @_ZN8SkStringD1Ev(%class.SkString*) unnamed_addr #6

; Function Attrs: nounwind
declare void @_ZN6SkDataD1Ev(%class.SkData*) unnamed_addr #6

; Function Attrs: nounwind
declare void @_ZN6SkDatadlEPv(i8*) local_unnamed_addr #6

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { noreturn nounwind }
attributes #14 = { nounwind }
attributes #15 = { nounwind readonly }
attributes #16 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 1048575}
!3 = !{i8 0, i8 2}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.unroll.disable"}
!6 = distinct !{!6, !5}
!7 = !{!8}
!8 = distinct !{!8, !9}
!9 = distinct !{!9, !"LVerDomain"}
!10 = !{!11}
!11 = distinct !{!11, !9}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.isvectorized", i32 1}
!14 = distinct !{!14, !5}
!15 = distinct !{!15, !13}
!16 = !{!17}
!17 = distinct !{!17, !18}
!18 = distinct !{!18, !"LVerDomain"}
!19 = !{!20}
!20 = distinct !{!20, !18}
!21 = distinct !{!21, !13}
!22 = distinct !{!22, !5}
!23 = distinct !{!23, !13}
!24 = !{!25}
!25 = distinct !{!25, !26}
!26 = distinct !{!26, !"LVerDomain"}
!27 = !{!28}
!28 = distinct !{!28, !26}
!29 = distinct !{!29, !13}
!30 = distinct !{!30, !5}
!31 = distinct !{!31, !13}
