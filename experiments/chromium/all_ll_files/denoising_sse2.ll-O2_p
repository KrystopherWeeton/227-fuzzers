; ModuleID = '../../third_party/libvpx/source/libvpx/vp8/encoder/x86/denoising_sse2.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp8/encoder/x86/denoising_sse2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp8_denoiser_filter_sse2(i8* nocapture readonly, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %9 = icmp ne i32 %7, 0
  %10 = icmp ult i32 %6, 25
  %11 = and i1 %10, %9
  %12 = select i1 %11, i8 5, i8 4
  %13 = insertelement <16 x i8> undef, i8 %12, i32 0
  %14 = shufflevector <16 x i8> %13, <16 x i8> undef, <16 x i32> zeroinitializer
  %15 = select i1 %11, i8 8, i8 7
  %16 = select i1 %10, i8 %15, i8 6
  %17 = insertelement <16 x i8> undef, i8 %16, i32 0
  %18 = shufflevector <16 x i8> %17, <16 x i8> undef, <16 x i32> zeroinitializer
  %19 = sext i32 %5 to i64
  %20 = sext i32 %1 to i64
  %21 = sext i32 %3 to i64
  br label %22

22:                                               ; preds = %22, %8
  %23 = phi i8* [ %0, %8 ], [ %66, %22 ]
  %24 = phi i8* [ %2, %8 ], [ %67, %22 ]
  %25 = phi i8* [ %4, %8 ], [ %65, %22 ]
  %26 = phi i32 [ 0, %8 ], [ %68, %22 ]
  %27 = phi <16 x i8> [ zeroinitializer, %8 ], [ %64, %22 ]
  %28 = bitcast i8* %25 to <16 x i8>*
  %29 = load <16 x i8>, <16 x i8>* %28, align 1
  %30 = bitcast i8* %23 to <16 x i8>*
  %31 = load <16 x i8>, <16 x i8>* %30, align 1
  %32 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %31, <16 x i8> %29) #4
  %33 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %29, <16 x i8> %31) #4
  %34 = icmp eq <16 x i8> %32, zeroinitializer
  %35 = sext <16 x i1> %34 to <16 x i8>
  %36 = bitcast <16 x i8> %35 to <2 x i64>
  %37 = or <16 x i8> %33, %32
  %38 = icmp ult <16 x i8> %37, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %39 = select <16 x i1> %38, <16 x i8> %37, <16 x i8> <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %40 = icmp slt <16 x i8> %39, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %41 = icmp slt <16 x i8> %39, <i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8>
  %42 = zext <16 x i1> %41 to <16 x i8>
  %43 = icmp sgt <16 x i8> %14, %39
  %44 = sext <16 x i1> %43 to <16 x i8>
  %45 = bitcast <16 x i8> %44 to <2 x i64>
  %46 = and <16 x i8> %39, %44
  %47 = bitcast <16 x i8> %46 to <2 x i64>
  %48 = select <16 x i1> %40, <16 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <16 x i8> zeroinitializer
  %49 = or <16 x i8> %48, %42
  %50 = sub <16 x i8> %18, %49
  %51 = bitcast <16 x i8> %50 to <2 x i64>
  %52 = xor <2 x i64> %45, <i64 -1, i64 -1>
  %53 = and <2 x i64> %51, %52
  %54 = or <2 x i64> %53, %47
  %55 = xor <2 x i64> %36, <i64 -1, i64 -1>
  %56 = and <2 x i64> %54, %55
  %57 = and <2 x i64> %54, %36
  %58 = bitcast <2 x i64> %56 to <16 x i8>
  %59 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %29, <16 x i8> %58) #4
  %60 = bitcast <2 x i64> %57 to <16 x i8>
  %61 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %59, <16 x i8> %60) #4
  %62 = bitcast i8* %24 to <16 x i8>*
  store <16 x i8> %61, <16 x i8>* %62, align 1
  %63 = tail call <16 x i8> @llvm.sadd.sat.v16i8(<16 x i8> %27, <16 x i8> %58) #4
  %64 = tail call <16 x i8> @llvm.ssub.sat.v16i8(<16 x i8> %63, <16 x i8> %60) #4
  %65 = getelementptr inbounds i8, i8* %25, i64 %19
  %66 = getelementptr inbounds i8, i8* %23, i64 %20
  %67 = getelementptr inbounds i8, i8* %24, i64 %21
  %68 = add nuw nsw i32 %26, 1
  %69 = icmp eq i32 %68, 16
  br i1 %69, label %70, label %22

70:                                               ; preds = %22
  %71 = shufflevector <16 x i8> %64, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %72 = bitcast <16 x i8> %71 to <8 x i16>
  %73 = ashr <8 x i16> %72, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %74 = shufflevector <16 x i8> %64, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 14, i32 15, i32 15>
  %75 = bitcast <16 x i8> %74 to <8 x i16>
  %76 = ashr <8 x i16> %75, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %77 = add nsw <8 x i16> %76, %73
  %78 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %77, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %79 = bitcast <4 x i32> %78 to <16 x i8>
  %80 = shufflevector <16 x i8> %79, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %81 = bitcast <16 x i8> %80 to <4 x i32>
  %82 = add <4 x i32> %78, %81
  %83 = bitcast <4 x i32> %82 to <16 x i8>
  %84 = shufflevector <16 x i8> %83, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %85 = bitcast <16 x i8> %84 to <4 x i32>
  %86 = add <4 x i32> %82, %85
  %87 = extractelement <4 x i32> %86, i32 0
  %88 = icmp slt i32 %87, 0
  %89 = sub nsw i32 0, %87
  %90 = select i1 %88, i32 %89, i32 %87
  %91 = select i1 %9, i32 600, i32 512
  %92 = icmp ugt i32 %90, %91
  br i1 %92, label %93, label %167

93:                                               ; preds = %70
  %94 = sub nsw i32 %90, %91
  %95 = lshr i32 %94, 8
  %96 = add nuw nsw i32 %95, 1
  %97 = icmp ult i32 %96, 4
  br i1 %97, label %98, label %168

98:                                               ; preds = %93
  %99 = trunc i32 %96 to i8
  %100 = insertelement <16 x i8> undef, i8 %99, i32 0
  %101 = shufflevector <16 x i8> %100, <16 x i8> undef, <16 x i32> zeroinitializer
  %102 = shl nsw i32 %5, 4
  %103 = sext i32 %102 to i64
  %104 = sub nsw i64 0, %103
  %105 = getelementptr inbounds i8, i8* %65, i64 %104
  %106 = shl nsw i32 %1, 4
  %107 = sext i32 %106 to i64
  %108 = sub nsw i64 0, %107
  %109 = getelementptr inbounds i8, i8* %66, i64 %108
  %110 = shl nsw i32 %3, 4
  %111 = sext i32 %110 to i64
  %112 = sub nsw i64 0, %111
  %113 = getelementptr inbounds i8, i8* %67, i64 %112
  br label %114

114:                                              ; preds = %114, %98
  %115 = phi i8* [ %109, %98 ], [ %141, %114 ]
  %116 = phi i8* [ %113, %98 ], [ %142, %114 ]
  %117 = phi i8* [ %105, %98 ], [ %140, %114 ]
  %118 = phi i32 [ 0, %98 ], [ %143, %114 ]
  %119 = phi <16 x i8> [ %64, %98 ], [ %139, %114 ]
  %120 = bitcast i8* %116 to <16 x i8>*
  %121 = load <16 x i8>, <16 x i8>* %120, align 1
  %122 = bitcast i8* %117 to <16 x i8>*
  %123 = load <16 x i8>, <16 x i8>* %122, align 1
  %124 = bitcast i8* %115 to <16 x i8>*
  %125 = load <16 x i8>, <16 x i8>* %124, align 1
  %126 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %125, <16 x i8> %123) #4
  %127 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %123, <16 x i8> %125) #4
  %128 = icmp eq <16 x i8> %126, zeroinitializer
  %129 = sext <16 x i1> %128 to <16 x i8>
  %130 = or <16 x i8> %127, %126
  %131 = icmp ult <16 x i8> %130, %101
  %132 = select <16 x i1> %131, <16 x i8> %130, <16 x i8> %101
  %133 = and <16 x i8> %132, %129
  %134 = xor <16 x i8> %129, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %135 = and <16 x i8> %132, %134
  %136 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %121, <16 x i8> %135) #4
  %137 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %136, <16 x i8> %133) #4
  store <16 x i8> %137, <16 x i8>* %120, align 1
  %138 = tail call <16 x i8> @llvm.ssub.sat.v16i8(<16 x i8> %119, <16 x i8> %135) #4
  %139 = tail call <16 x i8> @llvm.sadd.sat.v16i8(<16 x i8> %138, <16 x i8> %133) #4
  %140 = getelementptr inbounds i8, i8* %117, i64 %19
  %141 = getelementptr inbounds i8, i8* %115, i64 %20
  %142 = getelementptr inbounds i8, i8* %116, i64 %21
  %143 = add nuw nsw i32 %118, 1
  %144 = icmp eq i32 %143, 16
  br i1 %144, label %145, label %114

145:                                              ; preds = %114
  %146 = shufflevector <16 x i8> %139, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %147 = bitcast <16 x i8> %146 to <8 x i16>
  %148 = ashr <8 x i16> %147, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %149 = shufflevector <16 x i8> %139, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 14, i32 15, i32 15>
  %150 = bitcast <16 x i8> %149 to <8 x i16>
  %151 = ashr <8 x i16> %150, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %152 = add nsw <8 x i16> %151, %148
  %153 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %152, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %154 = bitcast <4 x i32> %153 to <16 x i8>
  %155 = shufflevector <16 x i8> %154, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %156 = bitcast <16 x i8> %155 to <4 x i32>
  %157 = add <4 x i32> %153, %156
  %158 = bitcast <4 x i32> %157 to <16 x i8>
  %159 = shufflevector <16 x i8> %158, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %160 = bitcast <16 x i8> %159 to <4 x i32>
  %161 = add <4 x i32> %157, %160
  %162 = extractelement <4 x i32> %161, i32 0
  %163 = icmp slt i32 %162, 0
  %164 = sub nsw i32 0, %162
  %165 = select i1 %163, i32 %164, i32 %162
  %166 = icmp ugt i32 %165, %91
  br i1 %166, label %168, label %167

167:                                              ; preds = %145, %70
  tail call void @vp8_copy_mem16x16_sse2(i8* %2, i32 %3, i8* %4, i32 %5) #4
  br label %168

168:                                              ; preds = %145, %93, %167
  %169 = phi i32 [ 1, %167 ], [ 0, %145 ], [ 0, %93 ]
  ret i32 %169
}

declare void @vp8_copy_mem16x16_sse2(i8*, i32, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp8_denoiser_filter_uv_sse2(i8* nocapture readonly, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %9 = icmp ne i32 %7, 0
  %10 = icmp ult i32 %6, 25
  %11 = and i1 %10, %9
  %12 = select i1 %11, i8 5, i8 4
  %13 = insertelement <16 x i8> undef, i8 %12, i32 0
  %14 = select i1 %11, i8 8, i8 7
  %15 = select i1 %10, i8 %14, i8 6
  %16 = insertelement <16 x i8> undef, i8 %15, i32 0
  %17 = sext i32 %5 to i64
  %18 = bitcast i8* %4 to i64*
  %19 = load i64, i64* %18, align 1
  %20 = insertelement <2 x i64> undef, i64 %19, i32 0
  %21 = bitcast <2 x i64> %20 to <16 x i8>
  %22 = shufflevector <16 x i8> %21, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %23 = bitcast <16 x i8> %22 to <8 x i16>
  %24 = getelementptr inbounds i8, i8* %4, i64 %17
  %25 = bitcast i8* %24 to i64*
  %26 = load i64, i64* %25, align 1
  %27 = insertelement <2 x i64> undef, i64 %26, i32 0
  %28 = bitcast <2 x i64> %27 to <16 x i8>
  %29 = shufflevector <16 x i8> %28, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %30 = bitcast <16 x i8> %29 to <8 x i16>
  %31 = add <8 x i16> %23, %30
  %32 = getelementptr inbounds i8, i8* %24, i64 %17
  %33 = bitcast i8* %32 to i64*
  %34 = load i64, i64* %33, align 1
  %35 = insertelement <2 x i64> undef, i64 %34, i32 0
  %36 = bitcast <2 x i64> %35 to <16 x i8>
  %37 = shufflevector <16 x i8> %36, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %38 = bitcast <16 x i8> %37 to <8 x i16>
  %39 = add <8 x i16> %31, %38
  %40 = getelementptr inbounds i8, i8* %32, i64 %17
  %41 = bitcast i8* %40 to i64*
  %42 = load i64, i64* %41, align 1
  %43 = insertelement <2 x i64> undef, i64 %42, i32 0
  %44 = bitcast <2 x i64> %43 to <16 x i8>
  %45 = shufflevector <16 x i8> %44, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %46 = bitcast <16 x i8> %45 to <8 x i16>
  %47 = add <8 x i16> %39, %46
  %48 = getelementptr inbounds i8, i8* %40, i64 %17
  %49 = bitcast i8* %48 to i64*
  %50 = load i64, i64* %49, align 1
  %51 = insertelement <2 x i64> undef, i64 %50, i32 0
  %52 = bitcast <2 x i64> %51 to <16 x i8>
  %53 = shufflevector <16 x i8> %52, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %54 = bitcast <16 x i8> %53 to <8 x i16>
  %55 = add <8 x i16> %47, %54
  %56 = getelementptr inbounds i8, i8* %48, i64 %17
  %57 = bitcast i8* %56 to i64*
  %58 = load i64, i64* %57, align 1
  %59 = insertelement <2 x i64> undef, i64 %58, i32 0
  %60 = bitcast <2 x i64> %59 to <16 x i8>
  %61 = shufflevector <16 x i8> %60, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %62 = bitcast <16 x i8> %61 to <8 x i16>
  %63 = add <8 x i16> %55, %62
  %64 = getelementptr inbounds i8, i8* %56, i64 %17
  %65 = bitcast i8* %64 to i64*
  %66 = load i64, i64* %65, align 1
  %67 = insertelement <2 x i64> undef, i64 %66, i32 0
  %68 = bitcast <2 x i64> %67 to <16 x i8>
  %69 = shufflevector <16 x i8> %68, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %70 = bitcast <16 x i8> %69 to <8 x i16>
  %71 = add <8 x i16> %63, %70
  %72 = getelementptr inbounds i8, i8* %64, i64 %17
  %73 = bitcast i8* %72 to i64*
  %74 = load i64, i64* %73, align 1
  %75 = insertelement <2 x i64> undef, i64 %74, i32 0
  %76 = bitcast <2 x i64> %75 to <16 x i8>
  %77 = shufflevector <16 x i8> %76, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %78 = bitcast <16 x i8> %77 to <8 x i16>
  %79 = add <8 x i16> %71, %78
  %80 = shufflevector <16 x i8> %13, <16 x i8> undef, <16 x i32> zeroinitializer
  %81 = shufflevector <16 x i8> %16, <16 x i8> undef, <16 x i32> zeroinitializer
  %82 = shl nsw i32 %5, 3
  %83 = sext i32 %82 to i64
  %84 = sub nsw i64 0, %83
  %85 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %79, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %86 = bitcast <4 x i32> %85 to <16 x i8>
  %87 = shufflevector <16 x i8> %86, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %88 = bitcast <16 x i8> %87 to <4 x i32>
  %89 = add <4 x i32> %85, %88
  %90 = bitcast <4 x i32> %89 to <16 x i8>
  %91 = shufflevector <16 x i8> %90, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %92 = bitcast <16 x i8> %91 to <4 x i32>
  %93 = add <4 x i32> %89, %92
  %94 = extractelement <4 x i32> %93, i32 0
  %95 = add nsw i32 %94, -8192
  %96 = icmp slt i32 %95, 0
  %97 = sub i32 8192, %94
  %98 = select i1 %96, i32 %97, i32 %95
  %99 = icmp sgt i32 %98, 511
  br i1 %99, label %100, label %413

100:                                              ; preds = %8
  %101 = shl nsw i64 %17, 3
  %102 = getelementptr i8, i8* %4, i64 %101
  %103 = getelementptr inbounds i8, i8* %102, i64 %84
  %104 = sext i32 %1 to i64
  %105 = sext i32 %3 to i64
  %106 = shl nsw i32 %5, 1
  %107 = sext i32 %106 to i64
  %108 = shl nsw i32 %1, 1
  %109 = sext i32 %108 to i64
  %110 = shl nsw i32 %3, 1
  %111 = sext i32 %110 to i64
  br label %112

112:                                              ; preds = %112, %100
  %113 = phi i8* [ %0, %100 ], [ %173, %112 ]
  %114 = phi i8* [ %2, %100 ], [ %174, %112 ]
  %115 = phi i8* [ %103, %100 ], [ %172, %112 ]
  %116 = phi i32 [ 0, %100 ], [ %175, %112 ]
  %117 = phi <16 x i8> [ zeroinitializer, %100 ], [ %171, %112 ]
  %118 = bitcast i8* %115 to double*
  %119 = load double, double* %118, align 1
  %120 = getelementptr inbounds i8, i8* %115, i64 %17
  %121 = bitcast i8* %120 to double*
  %122 = load double, double* %121, align 1
  %123 = insertelement <2 x double> undef, double %119, i32 0
  %124 = insertelement <2 x double> %123, double %122, i32 1
  %125 = bitcast i8* %113 to double*
  %126 = load double, double* %125, align 1
  %127 = getelementptr inbounds i8, i8* %113, i64 %104
  %128 = bitcast i8* %127 to double*
  %129 = load double, double* %128, align 1
  %130 = insertelement <2 x double> undef, double %126, i32 0
  %131 = insertelement <2 x double> %130, double %129, i32 1
  %132 = bitcast <2 x double> %131 to <16 x i8>
  %133 = bitcast <2 x double> %124 to <16 x i8>
  %134 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %132, <16 x i8> %133) #4
  %135 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %133, <16 x i8> %132) #4
  %136 = icmp eq <16 x i8> %134, zeroinitializer
  %137 = sext <16 x i1> %136 to <16 x i8>
  %138 = bitcast <16 x i8> %137 to <2 x i64>
  %139 = or <16 x i8> %135, %134
  %140 = icmp ult <16 x i8> %139, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %141 = select <16 x i1> %140, <16 x i8> %139, <16 x i8> <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %142 = icmp slt <16 x i8> %141, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %143 = icmp slt <16 x i8> %141, <i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8>
  %144 = zext <16 x i1> %143 to <16 x i8>
  %145 = icmp sgt <16 x i8> %80, %141
  %146 = sext <16 x i1> %145 to <16 x i8>
  %147 = bitcast <16 x i8> %146 to <2 x i64>
  %148 = and <16 x i8> %141, %146
  %149 = bitcast <16 x i8> %148 to <2 x i64>
  %150 = select <16 x i1> %142, <16 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>, <16 x i8> zeroinitializer
  %151 = or <16 x i8> %150, %144
  %152 = sub <16 x i8> %81, %151
  %153 = bitcast <16 x i8> %152 to <2 x i64>
  %154 = xor <2 x i64> %147, <i64 -1, i64 -1>
  %155 = and <2 x i64> %153, %154
  %156 = or <2 x i64> %155, %149
  %157 = xor <2 x i64> %138, <i64 -1, i64 -1>
  %158 = and <2 x i64> %156, %157
  %159 = and <2 x i64> %156, %138
  %160 = bitcast <2 x i64> %158 to <16 x i8>
  %161 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %133, <16 x i8> %160) #4
  %162 = bitcast <2 x i64> %159 to <16 x i8>
  %163 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %161, <16 x i8> %162) #4
  %164 = bitcast i8* %114 to double*
  %165 = bitcast <16 x i8> %163 to <2 x double>
  %166 = extractelement <2 x double> %165, i32 0
  store double %166, double* %164, align 1
  %167 = getelementptr inbounds i8, i8* %114, i64 %105
  %168 = bitcast i8* %167 to double*
  %169 = extractelement <2 x double> %165, i32 1
  store double %169, double* %168, align 1
  %170 = tail call <16 x i8> @llvm.sadd.sat.v16i8(<16 x i8> %117, <16 x i8> %160) #4
  %171 = tail call <16 x i8> @llvm.ssub.sat.v16i8(<16 x i8> %170, <16 x i8> %162) #4
  %172 = getelementptr inbounds i8, i8* %115, i64 %107
  %173 = getelementptr inbounds i8, i8* %113, i64 %109
  %174 = getelementptr inbounds i8, i8* %114, i64 %111
  %175 = add nuw nsw i32 %116, 1
  %176 = icmp eq i32 %175, 4
  br i1 %176, label %177, label %112

177:                                              ; preds = %112
  %178 = shufflevector <16 x i8> %171, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %179 = bitcast <16 x i8> %178 to <8 x i16>
  %180 = ashr <8 x i16> %179, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %181 = shufflevector <16 x i8> %171, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 14, i32 15, i32 15>
  %182 = bitcast <16 x i8> %181 to <8 x i16>
  %183 = ashr <8 x i16> %182, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %184 = add nsw <8 x i16> %183, %180
  %185 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %184, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %186 = bitcast <4 x i32> %185 to <16 x i8>
  %187 = shufflevector <16 x i8> %186, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %188 = bitcast <16 x i8> %187 to <4 x i32>
  %189 = add <4 x i32> %185, %188
  %190 = bitcast <4 x i32> %189 to <16 x i8>
  %191 = shufflevector <16 x i8> %190, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %192 = bitcast <16 x i8> %191 to <4 x i32>
  %193 = add <4 x i32> %189, %192
  %194 = extractelement <4 x i32> %193, i32 0
  %195 = icmp slt i32 %194, 0
  %196 = sub nsw i32 0, %194
  %197 = select i1 %195, i32 %196, i32 %194
  %198 = select i1 %9, i32 128, i32 96
  %199 = icmp ugt i32 %197, %198
  br i1 %199, label %200, label %412

200:                                              ; preds = %177
  %201 = sub nsw i32 %197, %198
  %202 = lshr i32 %201, 8
  %203 = add nuw nsw i32 %202, 1
  %204 = icmp ult i32 %203, 4
  br i1 %204, label %205, label %413

205:                                              ; preds = %200
  %206 = trunc i32 %203 to i8
  %207 = insertelement <16 x i8> undef, i8 %206, i32 0
  %208 = shufflevector <16 x i8> %207, <16 x i8> undef, <16 x i32> zeroinitializer
  %209 = getelementptr inbounds i8, i8* %172, i64 %84
  %210 = shl nsw i32 %1, 3
  %211 = sext i32 %210 to i64
  %212 = sub nsw i64 0, %211
  %213 = getelementptr inbounds i8, i8* %173, i64 %212
  %214 = shl nsw i32 %3, 3
  %215 = sext i32 %214 to i64
  %216 = sub nsw i64 0, %215
  %217 = getelementptr inbounds i8, i8* %174, i64 %216
  %218 = bitcast i8* %209 to double*
  %219 = load double, double* %218, align 1
  %220 = getelementptr inbounds i8, i8* %209, i64 %17
  %221 = bitcast i8* %220 to double*
  %222 = load double, double* %221, align 1
  %223 = insertelement <2 x double> undef, double %219, i32 0
  %224 = insertelement <2 x double> %223, double %222, i32 1
  %225 = bitcast i8* %213 to double*
  %226 = load double, double* %225, align 1
  %227 = getelementptr inbounds i8, i8* %213, i64 %104
  %228 = bitcast i8* %227 to double*
  %229 = load double, double* %228, align 1
  %230 = insertelement <2 x double> undef, double %226, i32 0
  %231 = insertelement <2 x double> %230, double %229, i32 1
  %232 = bitcast <2 x double> %231 to <16 x i8>
  %233 = bitcast <2 x double> %224 to <16 x i8>
  %234 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %232, <16 x i8> %233) #4
  %235 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %233, <16 x i8> %232) #4
  %236 = icmp eq <16 x i8> %234, zeroinitializer
  %237 = sext <16 x i1> %236 to <16 x i8>
  %238 = or <16 x i8> %235, %234
  %239 = icmp ult <16 x i8> %238, %208
  %240 = select <16 x i1> %239, <16 x i8> %238, <16 x i8> %208
  %241 = bitcast i8* %217 to double*
  %242 = load double, double* %241, align 1
  %243 = getelementptr inbounds i8, i8* %217, i64 %105
  %244 = bitcast i8* %243 to double*
  %245 = load double, double* %244, align 1
  %246 = insertelement <2 x double> undef, double %242, i32 0
  %247 = insertelement <2 x double> %246, double %245, i32 1
  %248 = and <16 x i8> %240, %237
  %249 = bitcast <2 x double> %247 to <16 x i8>
  %250 = xor <16 x i8> %237, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %251 = and <16 x i8> %240, %250
  %252 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %249, <16 x i8> %251) #4
  %253 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %252, <16 x i8> %248) #4
  %254 = bitcast <16 x i8> %253 to <2 x double>
  %255 = extractelement <2 x double> %254, i32 0
  store double %255, double* %241, align 1
  %256 = extractelement <2 x double> %254, i32 1
  store double %256, double* %244, align 1
  %257 = tail call <16 x i8> @llvm.ssub.sat.v16i8(<16 x i8> %171, <16 x i8> %251) #4
  %258 = tail call <16 x i8> @llvm.sadd.sat.v16i8(<16 x i8> %257, <16 x i8> %248) #4
  %259 = getelementptr inbounds i8, i8* %209, i64 %107
  %260 = getelementptr inbounds i8, i8* %213, i64 %109
  %261 = getelementptr inbounds i8, i8* %217, i64 %111
  %262 = bitcast i8* %259 to double*
  %263 = load double, double* %262, align 1
  %264 = getelementptr inbounds i8, i8* %259, i64 %17
  %265 = bitcast i8* %264 to double*
  %266 = load double, double* %265, align 1
  %267 = insertelement <2 x double> undef, double %263, i32 0
  %268 = insertelement <2 x double> %267, double %266, i32 1
  %269 = bitcast i8* %260 to double*
  %270 = load double, double* %269, align 1
  %271 = getelementptr inbounds i8, i8* %260, i64 %104
  %272 = bitcast i8* %271 to double*
  %273 = load double, double* %272, align 1
  %274 = insertelement <2 x double> undef, double %270, i32 0
  %275 = insertelement <2 x double> %274, double %273, i32 1
  %276 = bitcast <2 x double> %275 to <16 x i8>
  %277 = bitcast <2 x double> %268 to <16 x i8>
  %278 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %276, <16 x i8> %277) #4
  %279 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %277, <16 x i8> %276) #4
  %280 = icmp eq <16 x i8> %278, zeroinitializer
  %281 = sext <16 x i1> %280 to <16 x i8>
  %282 = or <16 x i8> %279, %278
  %283 = icmp ult <16 x i8> %282, %208
  %284 = select <16 x i1> %283, <16 x i8> %282, <16 x i8> %208
  %285 = bitcast i8* %261 to double*
  %286 = load double, double* %285, align 1
  %287 = getelementptr inbounds i8, i8* %261, i64 %105
  %288 = bitcast i8* %287 to double*
  %289 = load double, double* %288, align 1
  %290 = insertelement <2 x double> undef, double %286, i32 0
  %291 = insertelement <2 x double> %290, double %289, i32 1
  %292 = and <16 x i8> %284, %281
  %293 = bitcast <2 x double> %291 to <16 x i8>
  %294 = xor <16 x i8> %281, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %295 = and <16 x i8> %284, %294
  %296 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %293, <16 x i8> %295) #4
  %297 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %296, <16 x i8> %292) #4
  %298 = bitcast <16 x i8> %297 to <2 x double>
  %299 = extractelement <2 x double> %298, i32 0
  store double %299, double* %285, align 1
  %300 = extractelement <2 x double> %298, i32 1
  store double %300, double* %288, align 1
  %301 = tail call <16 x i8> @llvm.ssub.sat.v16i8(<16 x i8> %258, <16 x i8> %295) #4
  %302 = tail call <16 x i8> @llvm.sadd.sat.v16i8(<16 x i8> %301, <16 x i8> %292) #4
  %303 = getelementptr inbounds i8, i8* %259, i64 %107
  %304 = getelementptr inbounds i8, i8* %260, i64 %109
  %305 = getelementptr inbounds i8, i8* %261, i64 %111
  %306 = bitcast i8* %303 to double*
  %307 = load double, double* %306, align 1
  %308 = getelementptr inbounds i8, i8* %303, i64 %17
  %309 = bitcast i8* %308 to double*
  %310 = load double, double* %309, align 1
  %311 = insertelement <2 x double> undef, double %307, i32 0
  %312 = insertelement <2 x double> %311, double %310, i32 1
  %313 = bitcast i8* %304 to double*
  %314 = load double, double* %313, align 1
  %315 = getelementptr inbounds i8, i8* %304, i64 %104
  %316 = bitcast i8* %315 to double*
  %317 = load double, double* %316, align 1
  %318 = insertelement <2 x double> undef, double %314, i32 0
  %319 = insertelement <2 x double> %318, double %317, i32 1
  %320 = bitcast <2 x double> %319 to <16 x i8>
  %321 = bitcast <2 x double> %312 to <16 x i8>
  %322 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %320, <16 x i8> %321) #4
  %323 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %321, <16 x i8> %320) #4
  %324 = icmp eq <16 x i8> %322, zeroinitializer
  %325 = sext <16 x i1> %324 to <16 x i8>
  %326 = or <16 x i8> %323, %322
  %327 = icmp ult <16 x i8> %326, %208
  %328 = select <16 x i1> %327, <16 x i8> %326, <16 x i8> %208
  %329 = bitcast i8* %305 to double*
  %330 = load double, double* %329, align 1
  %331 = getelementptr inbounds i8, i8* %305, i64 %105
  %332 = bitcast i8* %331 to double*
  %333 = load double, double* %332, align 1
  %334 = insertelement <2 x double> undef, double %330, i32 0
  %335 = insertelement <2 x double> %334, double %333, i32 1
  %336 = and <16 x i8> %328, %325
  %337 = bitcast <2 x double> %335 to <16 x i8>
  %338 = xor <16 x i8> %325, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %339 = and <16 x i8> %328, %338
  %340 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %337, <16 x i8> %339) #4
  %341 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %340, <16 x i8> %336) #4
  %342 = bitcast <16 x i8> %341 to <2 x double>
  %343 = extractelement <2 x double> %342, i32 0
  store double %343, double* %329, align 1
  %344 = extractelement <2 x double> %342, i32 1
  store double %344, double* %332, align 1
  %345 = tail call <16 x i8> @llvm.ssub.sat.v16i8(<16 x i8> %302, <16 x i8> %339) #4
  %346 = tail call <16 x i8> @llvm.sadd.sat.v16i8(<16 x i8> %345, <16 x i8> %336) #4
  %347 = getelementptr inbounds i8, i8* %303, i64 %107
  %348 = getelementptr inbounds i8, i8* %304, i64 %109
  %349 = getelementptr inbounds i8, i8* %305, i64 %111
  %350 = bitcast i8* %347 to double*
  %351 = load double, double* %350, align 1
  %352 = getelementptr inbounds i8, i8* %347, i64 %17
  %353 = bitcast i8* %352 to double*
  %354 = load double, double* %353, align 1
  %355 = insertelement <2 x double> undef, double %351, i32 0
  %356 = insertelement <2 x double> %355, double %354, i32 1
  %357 = bitcast i8* %348 to double*
  %358 = load double, double* %357, align 1
  %359 = getelementptr inbounds i8, i8* %348, i64 %104
  %360 = bitcast i8* %359 to double*
  %361 = load double, double* %360, align 1
  %362 = insertelement <2 x double> undef, double %358, i32 0
  %363 = insertelement <2 x double> %362, double %361, i32 1
  %364 = bitcast <2 x double> %363 to <16 x i8>
  %365 = bitcast <2 x double> %356 to <16 x i8>
  %366 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %364, <16 x i8> %365) #4
  %367 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %365, <16 x i8> %364) #4
  %368 = icmp eq <16 x i8> %366, zeroinitializer
  %369 = sext <16 x i1> %368 to <16 x i8>
  %370 = or <16 x i8> %367, %366
  %371 = icmp ult <16 x i8> %370, %208
  %372 = select <16 x i1> %371, <16 x i8> %370, <16 x i8> %208
  %373 = bitcast i8* %349 to double*
  %374 = load double, double* %373, align 1
  %375 = getelementptr inbounds i8, i8* %349, i64 %105
  %376 = bitcast i8* %375 to double*
  %377 = load double, double* %376, align 1
  %378 = insertelement <2 x double> undef, double %374, i32 0
  %379 = insertelement <2 x double> %378, double %377, i32 1
  %380 = and <16 x i8> %372, %369
  %381 = bitcast <2 x double> %379 to <16 x i8>
  %382 = xor <16 x i8> %369, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %383 = and <16 x i8> %372, %382
  %384 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %381, <16 x i8> %383) #4
  %385 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %384, <16 x i8> %380) #4
  %386 = bitcast <16 x i8> %385 to <2 x double>
  %387 = extractelement <2 x double> %386, i32 0
  store double %387, double* %373, align 1
  %388 = extractelement <2 x double> %386, i32 1
  store double %388, double* %376, align 1
  %389 = tail call <16 x i8> @llvm.ssub.sat.v16i8(<16 x i8> %346, <16 x i8> %383) #4
  %390 = tail call <16 x i8> @llvm.sadd.sat.v16i8(<16 x i8> %389, <16 x i8> %380) #4
  %391 = shufflevector <16 x i8> %390, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %392 = bitcast <16 x i8> %391 to <8 x i16>
  %393 = ashr <8 x i16> %392, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %394 = shufflevector <16 x i8> %390, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 14, i32 15, i32 15>
  %395 = bitcast <16 x i8> %394 to <8 x i16>
  %396 = ashr <8 x i16> %395, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %397 = add nsw <8 x i16> %396, %393
  %398 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %397, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %399 = bitcast <4 x i32> %398 to <16 x i8>
  %400 = shufflevector <16 x i8> %399, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %401 = bitcast <16 x i8> %400 to <4 x i32>
  %402 = add <4 x i32> %398, %401
  %403 = bitcast <4 x i32> %402 to <16 x i8>
  %404 = shufflevector <16 x i8> %403, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %405 = bitcast <16 x i8> %404 to <4 x i32>
  %406 = add <4 x i32> %402, %405
  %407 = extractelement <4 x i32> %406, i32 0
  %408 = icmp slt i32 %407, 0
  %409 = sub nsw i32 0, %407
  %410 = select i1 %408, i32 %409, i32 %407
  %411 = icmp ugt i32 %410, %198
  br i1 %411, label %413, label %412

412:                                              ; preds = %205, %177
  tail call void @vp8_copy_mem8x8_mmx(i8* %2, i32 %3, i8* %4, i32 %5) #4
  br label %413

413:                                              ; preds = %205, %200, %8, %412
  %414 = phi i32 [ 1, %412 ], [ 0, %8 ], [ 0, %205 ], [ 0, %200 ]
  ret i32 %414
}

declare void @vp8_copy_mem8x8_mmx(i8*, i32, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare <16 x i8> @llvm.usub.sat.v16i8(<16 x i8>, <16 x i8>) #2

; Function Attrs: nounwind readnone speculatable
declare <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8>, <16 x i8>) #2

; Function Attrs: nounwind readnone speculatable
declare <16 x i8> @llvm.sadd.sat.v16i8(<16 x i8>, <16 x i8>) #2

; Function Attrs: nounwind readnone speculatable
declare <16 x i8> @llvm.ssub.sat.v16i8(<16 x i8>, <16 x i8>) #2

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16>, <8 x i16>) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable }
attributes #3 = { nounwind readnone }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
