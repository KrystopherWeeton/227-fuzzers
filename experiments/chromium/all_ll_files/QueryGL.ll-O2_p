; ModuleID = '../../third_party/angle/src/libANGLE/renderer/gl/QueryGL.cpp'
source_filename = "../../third_party/angle/src/libANGLE/renderer/gl/QueryGL.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.rx::QueryGL" = type { %"class.rx::QueryImpl.base", [7 x i8] }
%"class.rx::QueryImpl.base" = type <{ i32 (...)**, i8 }>
%"class.rx::StandardQueryGL" = type { %"class.rx::QueryGL.base", %"class.rx::FunctionsGL"*, %"class.rx::StateManagerGL"*, i32, %"class.std::__1::deque.662", i64 }
%"class.rx::QueryGL.base" = type { %"class.rx::QueryImpl.base" }
%"class.std::__1::deque.662" = type { %"class.std::__1::__deque_base.663" }
%"class.std::__1::__deque_base.663" = type { %"struct.std::__1::__split_buffer.664", i64, %"class.std::__1::__compressed_pair.670" }
%"struct.std::__1::__split_buffer.664" = type { i32**, i32**, i32**, %"class.std::__1::__compressed_pair.665" }
%"class.std::__1::__compressed_pair.665" = type { %"struct.std::__1::__compressed_pair_elem.666" }
%"struct.std::__1::__compressed_pair_elem.666" = type { i32** }
%"class.std::__1::__compressed_pair.670" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i64 }
%"class.rx::FunctionsGL" = type { %"class.rx::DispatchTableGL", %"struct.gl::Version", i32, i32, %"class.std::__1::vector.125" }
%"class.rx::DispatchTableGL" = type { i32 (...)**, void (i32, i32)*, void (i32)*, void (float, float, float, float)*, void (double)*, void (i32)*, void (i8, i8, i8, i8)*, void (i32)*, void (i32)*, void (i8)*, void (double, double)*, void (i32)*, void (i32)*, void (i32)*, void ()*, void ()*, void (i32)*, void (i32, i8*)*, void (i32, double*)*, i32 ()*, void (i32, float*)*, void (i32, i32*)*, i8* (i32)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32*)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, void (i32, i32)*, i8 (i32)*, void (float)*, void (i32)*, void (i32, float)*, void (i32, i32)*, void (float)*, void (i32, i32)*, void (i32)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32)*, void (i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, float)*, void (i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32, i8*)*, void (i32, i32*)*, i8 (i32)*, void (float, float)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (float, float, float, float)*, void (i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32*)*, void (i32)*, void (i32, i32*)*, void (i32, i32, i32*)*, i8 (i32)*, void (i32, i32)*, i8 (i32)*, void (i32)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i8*)*, void (float, i8)*, void (i32, i32, i32, i32)*, void (i32, i32*, i32*, i32)*, void (i32, i32*, i32, i8**, i32)*, void (i32, float)*, void (i32, float*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32)*, void (i32, i64, i8*, i32)*, void (i32, i64, i64, i8*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i8**)*, void (i32, i64, i64, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, i8 (i32)*, i8 (i32)*, i8* (i32, i32)*, i8 (i32)*, void (i32, i32)*, void (i32, i32, i8*)*, void (i32, i32)*, void (i32)*, i32 ()*, i32 (i32)*, void (i32)*, void (i32)*, void (i32, i32)*, void (i32)*, void (i32, i32*)*, void (i32)*, void (i32, i32, i32, i32*, i32*, i32*, i8*)*, void (i32, i32, i32, i32*, i32*, i32*, i8*)*, void (i32, i32, i32*, i32*)*, i32 (i32, i8*)*, void (i32, i32, i32*, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32*, i8*)*, void (i32, i32, i32*, i8*)*, void (i32, i32, i32*)*, i32 (i32, i8*)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, void (i32, i32, i8**)*, void (i32, i32, double*)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, i8 (i32)*, i8 (i32)*, void (i32)*, void (i32, i32, i8**, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i32)*, void (i32, float)*, void (i32, i32, float*)*, void (i32, i32)*, void (i32, i32, i32*)*, void (i32, float, float)*, void (i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, float, float, float)*, void (i32, i32, float*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, float, float, float, float)*, void (i32, i32, float*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32)*, void (i32)*, void (i32, double)*, void (i32, double*)*, void (i32, float)*, void (i32, float*)*, void (i32, i16)*, void (i32, i16*)*, void (i32, double, double)*, void (i32, double*)*, void (i32, float, float)*, void (i32, float*)*, void (i32, i16, i16)*, void (i32, i16*)*, void (i32, double, double, double)*, void (i32, double*)*, void (i32, float, float, float)*, void (i32, float*)*, void (i32, i16, i16, i16)*, void (i32, i16*)*, void (i32, i8*)*, void (i32, i32*)*, void (i32, i16*)*, void (i32, i8, i8, i8, i8)*, void (i32, i8*)*, void (i32, i32*)*, void (i32, i16*)*, void (i32, i8*)*, void (i32, double, double, double, double)*, void (i32, double*)*, void (i32, float, float, float, float)*, void (i32, float*)*, void (i32, i32*)*, void (i32, i16, i16, i16, i16)*, void (i32, i16*)*, void (i32, i8*)*, void (i32, i32*)*, void (i32, i16*)*, void (i32, i32, i32, i8, i32, i8*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32)*, void (i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i64, i64)*, void (i32, i32, i8*)*, void (i32, i32)*, void (i32, i32)*, void (i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, i32 (i32)*, void (i32, i32)*, void (i32, i32, float, i32)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i8, i8, i8, i8)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32)*, void ()*, void ()*, void (i32, i64, i64)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32)*, void (i32, i32, i8*)*, i32 (i32, i8*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, i8* (i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*, i32*, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, i8 (i32, i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8* (i32, i64, i64, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i8**, i32)*, void (i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32, i32)*, void (i32, i32*)*, void (i32, i32, i32)*, void (i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i8*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i16*)*, void (i32, i8*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i16*)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i64, i64, i64)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i8*, i32)*, void (i32, i32, i32, i32*, i8*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*, i8*)*, void (i32, i32, i32*, i32, i32*)*, i32 (i32, i8*)*, void (i32, i32, i8**, i32*)*, void (i32)*, void (i32, i32, i32)*, void (i32, i32, i32)*, i32 (%struct.__GLsync*, i32, i64)*, void (%struct.__GLsync*)*, void (i32, i32, i32, i8*, i32)*, void (i32, i32, i32, i8*, i32, i32)*, void (i32, i32, i32, i32, i32, i8*, i32)*, %struct.__GLsync* (i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i64*)*, void (i32, i32, i64*)*, void (i32, i64*)*, void (i32, i32, float*)*, void (%struct.__GLsync*, i32, i32, i32*, i32*)*, i8 (%struct.__GLsync*)*, void (i32, i32*, i32, i8**, i32, i32*)*, void (i32)*, void (i32, i32)*, void (i32, i32, i32, i32, i32, i8)*, void (i32, i32, i32, i32, i32, i32, i8)*, void (%struct.__GLsync*, i32, i64)*, void (i32, i32, i32, i8*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32*)*, i32 (i32, i8*)*, void (i32, i32, i64*)*, void (i32, i32, i64*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, i8 (i32)*, void (i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, float)*, void (i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32)*, void (i32, i32, i8, i32)*, void (i32, i32, i8, i32*)*, void (i32, i32, i8, i32)*, void (i32, i32, i8, i32*)*, void (i32, i32, i8, i32)*, void (i32, i32, i8, i32*)*, void (i32, i32, i8, i32)*, void (i32, i32, i8, i32*)*, void (i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32)*, void (i32, i32*)*, void (i32, i8*)*, void (i32, i32, i8*)*, void (i32, i32)*, void (i32, i32, i32)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32, i32, i32, i32*, i8*)*, void (i32, i32, i32, i32, i32*, i8*)*, void (i32, i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)*, void (i32, i32, i32*)*, void (i32, i32, double*)*, i8 (i32)*, void (float)*, void (i32, float*)*, void (i32, i32)*, void ()*, void ()*, void (i32, double)*, void (i32, i32, double*)*, void (i32, double, double)*, void (i32, i32, double*)*, void (i32, double, double, double)*, void (i32, i32, double*)*, void (i32, double, double, double, double)*, void (i32, i32, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i32*)*, void (i32, i32)*, void (i32)*, void (float)*, i32 (i32, i32, i8**)*, void (i32, i32*)*, void (i32, i32, double*)*, void (i32, double, double)*, void (float, float)*, void (i32, i32*)*, void (i32, i32, double*)*, void (i32, i32, float*)*, void (i32, i32, i32*, i32*, i8*)*, void (i32, i32, i32*, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32*, i32*)*, void (i32, i32, double*)*, i8 (i32)*, void (i32, i32, i8*, i32)*, void (i32, i32, i32)*, void (i32, i32, double)*, void (i32, i32, i32, double*)*, void (i32, i32, float)*, void (i32, i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, double, double)*, void (i32, i32, i32, double*)*, void (i32, i32, float, float)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, double, double, double)*, void (i32, i32, i32, double*)*, void (i32, i32, float, float, float)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, double, double, double, double)*, void (i32, i32, i32, double*)*, void (i32, i32, float, float, float, float)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void ()*, void (i32, i32, i32*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i32*, i32, i8*, i32)*, void (i32, i32, i32)*, void (i32)*, void (i32, double)*, void (i32, double*)*, void (i32, double, double)*, void (i32, double*)*, void (i32, double, double, double)*, void (i32, double*)*, void (i32, double, double, double, double)*, void (i32, double*)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, float*)*, void (i32, float, float, float, float)*, void (i32, float*)*, void (i32, i32, i32, i8, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i8*, i32, i32)*, void (i32, i32, i32, i8*, i32, i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32, i32*)*, void (i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i64, i32)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i64, i64, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32)*, void (void (i32, i32, i32, i32, i32, i8*, i8*)*, i8*)*, void (i32, i32, i32, i32, i32*, i8)*, void (i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32)*, void (i64)*, void (i32, i32, i32)*, i32 (i32, i32, i32*, i32*, i32*, i32*, i32*, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32, i64*)*, void (i32, i32, i32, i32*, i8*)*, void (i8*, i32, i32*, i8*)*, void (i32, i8**)*, void (i32, i32, i32, i32*)*, i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)*, void (i32, i32, i32, i32, i32*, i8*)*, void (i32, i32, i32, i32, i32*, i32, i32*, i32*)*, void (i32)*, void (i32, i64, i64)*, void (i32, i32, i32*)*, void (i32, i32, i32*, i32, i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i8*, i32, i32)*, void (i32, i32, i8*, i32, i32)*, void (i32, i32, i32, i8*)*, void (i8*, i32, i8*)*, void ()*, void (i32, i32, i32, i8*)*, void (i32, i32, i32)*, void (i32, i32, i32, i64, i64)*, void (i32, i32, i32, i32, i32, i8)*, void (i32, i32, i32, i32, i32, i32, i8)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i8, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*, i64*, i64*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*, i64*, i32*)*, void (i32, i64, i8*, i32)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, i32 (i32, i32)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i64, i64, i32, i32, i8*)*, void (i32, i32, i32, float, i32)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i64, i64, i64)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32)*, void (i32, i64, i64)*, void (i32)*, void (i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, i32 ()*, void (i32, i32, i64*)*, void (i32, i32, i32*)*, void (i32, i32, i8**)*, void (i32, i64, i64, i8*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i64)*, void (i32, i32, i32, i64)*, void (i32, i32, i32, i64)*, void (i32, i32, i32, i64)*, void (i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i64*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i64*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, double*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*, i32, i32, i32, i32)*, i8* (i32, i32)*, i8* (i32, i64, i64, i32)*, void (i32)*, void (i32, i64, i8*, i32)*, void (i32, i64, i8*, i32)*, void (i32, i64, i64, i8*)*, void (i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i8*)*, void ()*, void (i32, i32, i32)*, void (i32, i32, i32, i64, i64)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, float)*, void (i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i8)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i8)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32)*, void (i32, i32, i32, i64, i64)*, i8 (i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32, i8, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i64, i32)*, void (i32, i32, i32, i32*, i64*, i32*)*, void ()*, void (float, float, float, float, float, float, float, float)*, void (i32)*, void (i32, i8*)*, void ()*, void (i32, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i64, i32, i64)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i8*)*, void (i32, i8*)*, i8 (i32)*, void (i32, i32, i32*)*, void (i32, i64, i32, i64)*, void (i32, i32, i32, i32, i32, i32, i64)*, void (i32, i32, i32, i32, i32, i8, i32, i64)*, void (i32, i32, i32, i32, i32, i32, i32, i64)*, void (i32, i32, i32, i32, i32, i32, i8, i32, i64)*, void (i32, i32, i32, i32, i32, i32, i64)*, void (i32, i32, i32, i32, i32, i8, i32, i64)*, void (i32, i32, i32, i32, i32, i32, i32, i64)*, void (i32, i32, i32, i32, i32, i32, i8, i32, i64)*, void (i32, i64, i32, i32)*, void (i32, i64, i32, i8*)*, void (i32, i64, i32, i8*)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32, i64*)*, i8 (i32)*, void (i32, i32, i64*)*, void (i32, i32, i32*, i32, i32*, i32*)*, void (i32, i32, i32*, i32, i32*, i32*)*, void (i32, i32, i32)*, void (i32, i32, i8*)*, void (i32, i32, i8*)*, void (i32, i32, i32)*, void (i32, i32, i32, i64, i64)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32*)*, void (i32, i8*)*, void (i32, i8*)*, void (i32, i32, i32)*, void (i32, i32, i32, i64, i64)*, void (i32, i32, i32, i32, i32, i32)* }
%struct.__GLsync = type opaque
%"struct.gl::Version" = type { i32, i32 }
%"class.std::__1::vector.125" = type { %"class.std::__1::__vector_base.126" }
%"class.std::__1::__vector_base.126" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.127" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.127" = type { %"struct.std::__1::__compressed_pair_elem.128" }
%"struct.std::__1::__compressed_pair_elem.128" = type { %"class.std::__1::basic_string"* }
%"class.rx::StateManagerGL" = type { %"class.rx::FunctionsGL"*, %"struct.angle::FeaturesGL"*, i32, i32, %"class.std::__1::vector.378", i32, %"struct.rx::VertexArrayStateGL", %"struct.rx::VertexArrayStateGL"*, %"class.angle::PackedEnumMap.640", %"class.angle::PackedEnumMap.642", i64, %"class.angle::PackedEnumMap.651", %"struct.std::__1::array.169", %"class.std::__1::vector.653", i32, %"class.rx::TransformFeedbackGL"*, %"class.angle::PackedEnumMap.660", %"class.angle::PackedEnumMap.660", %"struct.gl::ContextID", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"class.std::__1::vector", i32, i8, %"struct.gl::Rectangle", %"struct.gl::Rectangle", float, float, %"struct.angle::Color", %"class.gl::BlendStateExt", i8, i8, i8, float, i8, i8, %"struct.std::__1::array.373", i8, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, i32, i8, float, float, i8, float, i8, i32, %"struct.angle::Color", float, i32, i8, i8, i8, i8, i8, i8, i8, i32, i8, i32, %"class.angle::BitSetT.476", i64, %"class.angle::BitSetT.168", %"class.angle::BitSetT.166" }
%"struct.angle::FeaturesGL" = type { %"struct.angle::FeatureSetBase", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature" }
%"struct.angle::FeatureSetBase" = type { %"class.std::__1::map.625" }
%"class.std::__1::map.625" = type { %"class.std::__1::__tree.626" }
%"class.std::__1::__tree.626" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.627", %"class.std::__1::__compressed_pair.631" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.627" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.631" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.angle::Feature" = type { i8*, i32, i8*, i8*, i8, i8* }
%"class.std::__1::vector.378" = type { %"class.std::__1::__vector_base.379" }
%"class.std::__1::__vector_base.379" = type { %"struct.gl::VertexAttribCurrentValueData"*, %"struct.gl::VertexAttribCurrentValueData"*, %"class.std::__1::__compressed_pair.381" }
%"struct.gl::VertexAttribCurrentValueData" = type { %union.anon.380, i32 }
%union.anon.380 = type { [4 x float] }
%"class.std::__1::__compressed_pair.381" = type { %"struct.std::__1::__compressed_pair_elem.382" }
%"struct.std::__1::__compressed_pair_elem.382" = type { %"struct.gl::VertexAttribCurrentValueData"* }
%"struct.rx::VertexArrayStateGL" = type { i32, %"class.angle::FixedVector.636", %"class.angle::FixedVector.638" }
%"class.angle::FixedVector.636" = type { %"struct.std::__1::array.637", i64 }
%"struct.std::__1::array.637" = type { [16 x %"struct.rx::VertexAttributeGL"] }
%"struct.rx::VertexAttributeGL" = type { i8, %"struct.angle::Format"*, i8*, i32, i32 }
%"struct.angle::Format" = type { i32, i32, i32, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, void (i8*, i8*)*, void (i8*, i8*)*, %"class.rx::FastCopyFunctionMap"*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, i8, i8, i32 }
%"class.rx::FastCopyFunctionMap" = type { i64, %"struct.rx::FastCopyFunctionMap::Entry"* }
%"struct.rx::FastCopyFunctionMap::Entry" = type { i32, void (i8*, i8*)* }
%"class.angle::FixedVector.638" = type { %"struct.std::__1::array.639", i64 }
%"struct.std::__1::array.639" = type { [16 x %"struct.rx::VertexBindingGL"] }
%"struct.rx::VertexBindingGL" = type <{ i32, i32, i64, i32, [4 x i8] }>
%"class.angle::PackedEnumMap.640" = type { %"struct.std::__1::array.641" }
%"struct.std::__1::array.641" = type { [13 x i32] }
%"class.angle::PackedEnumMap.642" = type { %"struct.std::__1::array.643" }
%"struct.std::__1::array.643" = type { [13 x %"class.std::__1::vector.644"] }
%"class.std::__1::vector.644" = type { %"class.std::__1::__vector_base.645" }
%"class.std::__1::__vector_base.645" = type { %"struct.rx::StateManagerGL::IndexedBufferBinding"*, %"struct.rx::StateManagerGL::IndexedBufferBinding"*, %"class.std::__1::__compressed_pair.646" }
%"struct.rx::StateManagerGL::IndexedBufferBinding" = type <{ i64, i64, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.646" = type { %"struct.std::__1::__compressed_pair_elem.647" }
%"struct.std::__1::__compressed_pair_elem.647" = type { %"struct.rx::StateManagerGL::IndexedBufferBinding"* }
%"class.angle::PackedEnumMap.651" = type { %"struct.std::__1::array.652" }
%"struct.std::__1::array.652" = type { [11 x %"struct.std::__1::array.169"] }
%"struct.std::__1::array.169" = type { [96 x i32] }
%"class.std::__1::vector.653" = type { %"class.std::__1::__vector_base.654" }
%"class.std::__1::__vector_base.654" = type { %"struct.rx::StateManagerGL::ImageUnitBinding"*, %"struct.rx::StateManagerGL::ImageUnitBinding"*, %"class.std::__1::__compressed_pair.655" }
%"struct.rx::StateManagerGL::ImageUnitBinding" = type { i32, i32, i8, i32, i32, i32 }
%"class.std::__1::__compressed_pair.655" = type { %"struct.std::__1::__compressed_pair_elem.656" }
%"struct.std::__1::__compressed_pair_elem.656" = type { %"struct.rx::StateManagerGL::ImageUnitBinding"* }
%"class.rx::TransformFeedbackGL" = type opaque
%"class.angle::PackedEnumMap.660" = type { %"struct.std::__1::array.661" }
%"struct.std::__1::array.661" = type { [7 x %"class.rx::QueryGL"*] }
%"struct.gl::ContextID" = type { i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { i32* }
%"struct.gl::Rectangle" = type { i32, i32, i32, i32 }
%"class.gl::BlendStateExt" = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %"class.angle::BitSetT.147", %"class.angle::BitSetT.147", i64 }
%"class.angle::BitSetT.147" = type { i8 }
%"struct.std::__1::array.373" = type { [2 x i32] }
%"struct.angle::Color" = type { float, float, float, float }
%"class.angle::BitSetT.476" = type { i32 }
%"class.angle::BitSetT.168" = type { i64 }
%"class.angle::BitSetT.166" = type { i64 }
%"class.rx::SyncQueryGL" = type <{ %"class.rx::QueryGL.base", [7 x i8], %"class.rx::FunctionsGL"*, %"class.std::__1::unique_ptr.671", i8, [7 x i8] }>
%"class.std::__1::unique_ptr.671" = type { %"class.std::__1::__compressed_pair.672" }
%"class.std::__1::__compressed_pair.672" = type { %"struct.std::__1::__compressed_pair_elem.673" }
%"struct.std::__1::__compressed_pair_elem.673" = type { %"class.rx::SyncProviderGL"* }
%"class.rx::SyncProviderGL" = type { i32 (...)** }
%"class.gl::Context" = type <{ %"class.egl::LabeledObject", %"class.angle::ObserverInterface", %"class.gl::State", i8, i8, i8, i8, [4 x i8], %"class.gl::ErrorSet", %"class.angle::BitSetT.537", [4 x i8], %"class.std::__1::unique_ptr.538", i8*, %"struct.gl::Extensions", [4 x i8], %"class.gl::BindingPointer", %"struct.egl::Config"*, %"class.angle::PackedEnumMap.544", %"class.gl::ResourceMap.546", %"class.gl::HandleAllocator", %"class.gl::ResourceMap.556", %"class.gl::HandleAllocator", %"class.gl::ResourceMap.566", %"class.gl::HandleAllocator", %"class.gl::ResourceMap.576", %"class.gl::HandleAllocator", i8*, i8*, i8*, i8*, %"class.std::__1::vector.586", i8*, %"class.std::__1::vector.586", %"class.std::__1::unique_ptr.593", i8, i8, i8, i8, i32, i8, i8, i8, [5 x i8], %"class.egl::Surface"*, %"class.egl::Surface"*, %"class.egl::Display"*, i8, i8, i8, [5 x i8], %"class.gl::MemoryProgramCache"*, %"class.angle::BitSetT.536", %"class.gl::StateCache", %"class.angle::BitSetT.168", %"class.angle::BitSetT.168", %"class.angle::BitSetT.536", %"class.angle::BitSetT.168", %"class.angle::BitSetT.536", %"class.angle::BitSetT.168", %"class.angle::BitSetT.536", %"class.angle::BitSetT.168", %"class.angle::BitSetT.536", %"class.angle::BitSetT.168", %"class.angle::BitSetT.536", %"class.angle::BitSetT.168", %"class.angle::BitSetT.536", %"class.angle::ObserverBinding", %"class.angle::ObserverBinding", %"class.angle::ObserverBinding", %"class.std::__1::vector.337", %"class.std::__1::vector.337", %"class.std::__1::vector.337", %struct.Optional.607, %struct.Optional.607, %"class.std::__1::shared_ptr.608", %"class.std::__1::unique_ptr.609", %"class.std::__1::basic_string", i64, %"class.gl::MockOverlay", i8, i8, i8, [4 x i8] }>
%"class.egl::LabeledObject" = type { i32 (...)** }
%"class.angle::ObserverInterface" = type { i32 (...)** }
%"class.gl::State" = type <{ %"struct.gl::ContextID", i32, i32, %"struct.gl::Version", [4 x i8], %"struct.gl::Caps", %"class.gl::TextureCapsMap", %"struct.gl::Extensions", %"struct.gl::Limitations", %"class.egl::ShareGroup"*, %"class.gl::BufferManager"*, %"class.gl::ShaderProgramManager"*, %"class.gl::TextureManager"*, %"class.gl::RenderbufferManager"*, %"class.gl::SamplerManager"*, %"class.gl::SyncManager"*, %"class.gl::FramebufferManager"*, %"class.gl::ProgramPipelineManager"*, %"class.gl::MemoryObjectManager"*, %"class.gl::SemaphoreManager"*, i32, i32, %"struct.angle::Color", float, i32, %"struct.gl::RasterizerState", i8, [3 x i8], %"struct.gl::Rectangle", %"struct.gl::BlendState", [4 x i8], %"class.gl::BlendStateExt", %"struct.angle::Color", i8, i8, [2 x i8], float, i8, i8, [2 x i8], i32, %"struct.std::__1::array.373", i8, [3 x i8], float, %"struct.gl::DepthStencilState", i32, i32, float, i32, i32, i32, i8, i8, [2 x i8], %"struct.gl::Rectangle", float, float, i32, i32, %"class.gl::Framebuffer"*, %"class.gl::Framebuffer"*, %"class.gl::BindingPointer.374", %"class.gl::Program"*, %"class.gl::BindingPointer.376", %"class.gl::ProgramExecutable"*, i8, [7 x i8], %"class.std::__1::vector.378", %"class.gl::VertexArray"*, %"class.angle::BitSetT.148", i64, %"class.angle::PackedEnumMap.406", %"class.gl::ActiveTexturesCache", %"class.std::__1::vector.337", %"class.angle::BitSetArray", %"class.std::__1::vector.418", %"class.std::__1::vector.427", %"class.angle::PackedEnumMap.434", %"class.angle::PackedEnumMap.438", %"class.std::__1::vector.440", %"class.std::__1::vector.440", %"class.std::__1::vector.440", %"class.angle::BitSetArray.447", %"class.angle::BitSetT.448", %"class.angle::BitSetT.168", %"class.gl::BindingPointer.449", %"struct.gl::PixelUnpackState", %"struct.gl::PixelPackState", i8, [3 x i8], %"class.gl::Debug", i8, i8, [2 x i8], i32, i8, i8, i8, i8, i32, %"class.angle::BitSetT.476", i32, %"class.gl::GLES1State", %"class.angle::BitSetT.168", %"class.angle::BitSetT.535", [4 x i8], %"class.angle::BitSetT.536", %"class.angle::BitSetT.166", %"class.angle::BitSetArray", %"class.angle::BitSetArray", %"class.angle::BitSetArray", %"class.angle::BitSetArray", %"class.gl::MockOverlay"*, %"class.angle::BitSetT.147", %"class.angle::BitSetT.147", i8, [5 x i8] }>
%"struct.gl::Caps" = type <{ float, float, i32, [4 x i8], i64, i32, i32, i32, i32, float, i32, i32, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, [4 x i8], %"class.std::__1::vector", %"class.std::__1::vector", %"class.std::__1::vector", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap.30", i32, i32, i32, i32, i32, i32, i32, i32, i32, %"struct.std::__1::array.32", %"struct.std::__1::array.32", i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, float, float, i32, i32, [4 x i8] }>
%"struct.gl::TypePrecision" = type { %"struct.std::__1::array.28", i32 }
%"struct.std::__1::array.28" = type { [2 x i32] }
%"class.angle::PackedEnumMap" = type { %"struct.std::__1::array.29" }
%"struct.std::__1::array.29" = type { [6 x i32] }
%"class.angle::PackedEnumMap.30" = type { %"struct.std::__1::array.31" }
%"struct.std::__1::array.31" = type { [6 x i64] }
%"struct.std::__1::array.32" = type { [3 x i32] }
%"class.gl::TextureCapsMap" = type { %"class.angle::PackedEnumMap.33" }
%"class.angle::PackedEnumMap.33" = type { %"struct.std::__1::array.34" }
%"struct.std::__1::array.34" = type { [227 x %"struct.gl::TextureCaps"] }
%"struct.gl::TextureCaps" = type { i8, i8, i8, i8, i8, %"class.std::__1::set.35" }
%"class.std::__1::set.35" = type { %"class.std::__1::__tree.36" }
%"class.std::__1::__tree.36" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.37", %"class.std::__1::__compressed_pair.41" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.gl::Limitations" = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%"class.egl::ShareGroup" = type opaque
%"class.gl::BufferManager" = type { %"class.gl::TypedResourceManager" }
%"class.gl::TypedResourceManager" = type { %"class.gl::ResourceManagerBase", %"class.gl::ResourceMap" }
%"class.gl::ResourceManagerBase" = type { i32 (...)**, %"class.gl::HandleAllocator", i64 }
%"class.gl::ResourceMap" = type { i64, %"class.gl::Buffer"**, %"class.absl::flat_hash_map" }
%"class.gl::Buffer" = type { %"class.gl::RefCountObject.base.53", %"class.gl::LabeledObject", %"class.angle::ObserverInterface", %"class.angle::Subject", %"class.gl::BufferState", %"class.rx::BufferImpl"*, %"class.angle::ObserverBinding", %"class.gl::IndexRangeCache" }
%"class.gl::RefCountObject.base.53" = type <{ %"class.angle::RefCountObject", %"class.rx::Serial", %"struct.gl::BufferID" }>
%"class.angle::RefCountObject" = type { i32 (...)**, i64 }
%"class.rx::Serial" = type { i64 }
%"struct.gl::BufferID" = type { i32 }
%"class.gl::LabeledObject" = type { i32 (...)** }
%"class.angle::Subject" = type { i32 (...)**, %"class.angle::FastVector" }
%"class.angle::FastVector" = type { %"struct.std::__1::array", %"class.angle::ObserverBindingBase"**, i64, i64 }
%"struct.std::__1::array" = type { [8 x %"class.angle::ObserverBindingBase"*] }
%"class.angle::ObserverBindingBase" = type { i32 (...)**, %"class.angle::ObserverInterface"*, i64 }
%"class.gl::BufferState" = type <{ %"class.std::__1::basic_string", i8, [7 x i8], i64, i32, i32, i8, [7 x i8], i8*, i64, i64, i32, i32, i32, i8, [3 x i8], i32, i8, [3 x i8] }>
%"class.rx::BufferImpl" = type opaque
%"class.gl::IndexRangeCache" = type { %"class.std::__1::map" }
%"class.std::__1::map" = type { %"class.std::__1::__tree.54" }
%"class.std::__1::__tree.54" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.55", %"class.std::__1::__compressed_pair.59" }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.59" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.absl::flat_hash_map" = type { %"class.absl::container_internal::raw_hash_map" }
%"class.absl::container_internal::raw_hash_map" = type { %"class.absl::container_internal::raw_hash_set" }
%"class.absl::container_internal::raw_hash_set" = type { i8*, %"union.absl::container_internal::map_slot_type"*, i64, i64, %"class.absl::container_internal::CompressedTuple" }
%"union.absl::container_internal::map_slot_type" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { i32, %"class.gl::Buffer"* }
%"class.absl::container_internal::CompressedTuple" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"struct.absl::container_internal::internal_compressed_tuple::Storage" = type { i64 }
%"class.gl::ShaderProgramManager" = type { %"class.gl::ResourceManagerBase", %"class.gl::ResourceMap.69", %"class.gl::ResourceMap.122" }
%"class.gl::ResourceMap.69" = type { i64, %"class.gl::Shader"**, %"class.absl::flat_hash_map.113" }
%"class.gl::Shader" = type { %"class.gl::LabeledObject", %"class.gl::ShaderState", %"class.std::__1::unique_ptr.85", %"struct.gl::Limitations", %"struct.gl::ShaderProgramID", i8, i32, i8, %"class.std::__1::basic_string", %"class.gl::BindingPointer", %"class.std::__1::unique_ptr.107", %"class.std::__1::basic_string", %"class.gl::ShaderProgramManager"*, i32, i32 }
%"class.gl::ShaderState" = type <{ %"class.std::__1::basic_string", i8, [3 x i8], i32, %"class.std::__1::basic_string", %"class.std::__1::vector", %"class.std::__1::basic_string", %"struct.sh::WorkGroupSize", [4 x i8], %"class.std::__1::vector.70", %"class.std::__1::vector.70", %"class.std::__1::vector.70", %"class.std::__1::vector.77", %"class.std::__1::vector.77", %"class.std::__1::vector.70", %"class.std::__1::vector.70", %"class.std::__1::vector.70", i8, [3 x i8], %"class.angle::BitSetT", i32, %struct.Optional, %struct.Optional, %struct.Optional.84, i32, i32, i32, i32, i32, i32, i32, [4 x i8] }>
%"struct.sh::WorkGroupSize" = type { [3 x i32] }
%"class.std::__1::vector.77" = type { %"class.std::__1::__vector_base.78" }
%"class.std::__1::__vector_base.78" = type { %"struct.sh::InterfaceBlock"*, %"struct.sh::InterfaceBlock"*, %"class.std::__1::__compressed_pair.79" }
%"struct.sh::InterfaceBlock" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i32, i32, i8, i32, i8, i8, i32, %"class.std::__1::vector.70" }
%"class.std::__1::__compressed_pair.79" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"struct.std::__1::__compressed_pair_elem.80" = type { %"struct.sh::InterfaceBlock"* }
%"class.std::__1::vector.70" = type { %"class.std::__1::__vector_base.71" }
%"class.std::__1::__vector_base.71" = type { %"struct.sh::ShaderVariable"*, %"struct.sh::ShaderVariable"*, %"class.std::__1::__compressed_pair.72" }
%"struct.sh::ShaderVariable" = type { i32, i32, %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::vector", i8, i8, %"class.std::__1::vector.70", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i8, i32, i8, i32, i32, i32, i8, i8, i8, i32, i8, i32, i8, i8, i8, i8, i32 }
%"class.std::__1::__compressed_pair.72" = type { %"struct.std::__1::__compressed_pair_elem.73" }
%"struct.std::__1::__compressed_pair_elem.73" = type { %"struct.sh::ShaderVariable"* }
%"class.angle::BitSetT" = type { i32 }
%struct.Optional = type { i8, i8 }
%struct.Optional.84 = type { i8, i32 }
%"class.std::__1::unique_ptr.85" = type { %"class.std::__1::__compressed_pair.86" }
%"class.std::__1::__compressed_pair.86" = type { %"struct.std::__1::__compressed_pair_elem.87" }
%"struct.std::__1::__compressed_pair_elem.87" = type { %"class.rx::ShaderImpl"* }
%"class.rx::ShaderImpl" = type opaque
%"struct.gl::ShaderProgramID" = type { i32 }
%"class.std::__1::unique_ptr.107" = type { %"class.std::__1::__compressed_pair.108" }
%"class.std::__1::__compressed_pair.108" = type { %"struct.std::__1::__compressed_pair_elem.109" }
%"struct.std::__1::__compressed_pair_elem.109" = type { %"struct.gl::Shader::CompilingState"* }
%"struct.gl::Shader::CompilingState" = type opaque
%"class.absl::flat_hash_map.113" = type { %"class.absl::container_internal::raw_hash_map.114" }
%"class.absl::container_internal::raw_hash_map.114" = type { %"class.absl::container_internal::raw_hash_set.115" }
%"class.absl::container_internal::raw_hash_set.115" = type { i8*, %"union.absl::container_internal::map_slot_type.116"*, i64, i64, %"class.absl::container_internal::CompressedTuple.117" }
%"union.absl::container_internal::map_slot_type.116" = type opaque
%"class.absl::container_internal::CompressedTuple.117" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.118" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.118" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::ResourceMap.122" = type { i64, %"class.gl::Program"**, %"class.absl::flat_hash_map.241" }
%"class.absl::flat_hash_map.241" = type { %"class.absl::container_internal::raw_hash_map.242" }
%"class.absl::container_internal::raw_hash_map.242" = type { %"class.absl::container_internal::raw_hash_set.243" }
%"class.absl::container_internal::raw_hash_set.243" = type { i8*, %"union.absl::container_internal::map_slot_type.244"*, i64, i64, %"class.absl::container_internal::CompressedTuple.245" }
%"union.absl::container_internal::map_slot_type.244" = type { %"struct.std::__1::pair.704" }
%"struct.std::__1::pair.704" = type { i32, %"class.gl::Program"* }
%"class.absl::container_internal::CompressedTuple.245" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.246" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.246" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::TextureManager" = type { %"class.gl::TypedResourceManager.250" }
%"class.gl::TypedResourceManager.250" = type { %"class.gl::ResourceManagerBase", %"class.gl::ResourceMap.251" }
%"class.gl::ResourceMap.251" = type { i64, %"class.gl::Texture"**, %"class.absl::flat_hash_map.270" }
%"class.gl::Texture" = type <{ %"class.gl::RefCountObject.base.253", [4 x i8], %"class.egl::ImageSibling", %"class.gl::LabeledObject", %"class.gl::TextureState", %"class.angle::BitSetT.266", %"class.rx::TextureImpl"*, %"class.angle::ObserverBinding", %"class.angle::ObserverBinding", %"class.std::__1::basic_string", %"class.egl::Surface"*, %"class.egl::Stream"*, %"class.angle::FastVector.268", %"struct.gl::Texture::SamplerCompletenessCache", [4 x i8] }>
%"class.gl::RefCountObject.base.253" = type <{ %"class.angle::RefCountObject", %"class.rx::Serial", %"struct.gl::TextureID" }>
%"struct.gl::TextureID" = type { i32 }
%"class.egl::ImageSibling" = type { %"class.gl::FramebufferAttachmentObject", %"class.std::__1::set", %"class.angle::BindingPointer" }
%"class.gl::FramebufferAttachmentObject" = type { %"class.angle::Subject", %"class.angle::ObserverInterface" }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair", %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.angle::BindingPointer" = type { i32 (...)**, %"class.egl::Image"* }
%"class.egl::Image" = type <{ %"class.angle::RefCountObject.4", %"class.egl::LabeledObject", %"struct.egl::ImageState", %"class.rx::ImageImpl"*, i8, [7 x i8] }>
%"class.angle::RefCountObject.4" = type { i32 (...)**, i64 }
%"struct.egl::ImageState" = type { i8*, i32, %"class.gl::ImageIndex", %"class.egl::ImageSibling"*, %"class.std::__1::set.5", %"struct.gl::Format", i8, %"struct.gl::Extents", i64, i32, i32 }
%"class.gl::ImageIndex" = type { i8, i32, i32, i32 }
%"class.std::__1::set.5" = type { %"class.std::__1::__tree.6" }
%"class.std::__1::__tree.6" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.7", %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.gl::Format" = type { %"struct.gl::InternalFormat"* }
%"struct.gl::InternalFormat" = type { i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, i1 (%"struct.gl::Version"*, %"struct.gl::Extensions"*)*, i1 (%"struct.gl::Version"*, %"struct.gl::Extensions"*)*, i1 (%"struct.gl::Version"*, %"struct.gl::Extensions"*)*, i1 (%"struct.gl::Version"*, %"struct.gl::Extensions"*)*, i1 (%"struct.gl::Version"*, %"struct.gl::Extensions"*)* }
%"struct.gl::Extents" = type { i32, i32, i32 }
%"class.rx::ImageImpl" = type opaque
%"class.gl::TextureState" = type <{ i8, [3 x i8], %"struct.gl::SwizzleState", %"class.gl::SamplerState", i32, i32, i32, i32, i8, i8, [2 x i8], i32, i32, [4 x i8], %"class.std::__1::vector.257", %"struct.gl::Rectangle", i32, [4 x i8], %"class.gl::OffsetBindingPointer", i32, i8, [3 x i8], i32, i8, [3 x i8] }>
%"struct.gl::SwizzleState" = type { i32, i32, i32, i32 }
%"class.gl::SamplerState" = type { i32, i32, i32, i32, i32, float, float, float, i32, i32, i32, %"struct.angle::ColorGeneric", %"union.gl::SamplerState::Completeness" }
%"struct.angle::ColorGeneric" = type <{ %union.anon.254, i8, [3 x i8] }>
%union.anon.254 = type { %"struct.angle::Color" }
%"union.gl::SamplerState::Completeness" = type { i32 }
%"class.std::__1::vector.257" = type { %"class.std::__1::__vector_base.258" }
%"class.std::__1::__vector_base.258" = type { %"struct.gl::ImageDesc"*, %"struct.gl::ImageDesc"*, %"class.std::__1::__compressed_pair.259" }
%"struct.gl::ImageDesc" = type <{ %"struct.gl::Extents", [4 x i8], %"struct.gl::Format", i32, i8, [3 x i8], i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.259" = type { %"struct.std::__1::__compressed_pair_elem.260" }
%"struct.std::__1::__compressed_pair_elem.260" = type { %"struct.gl::ImageDesc"* }
%"class.gl::OffsetBindingPointer" = type { %"class.gl::BindingPointer.264", i64, i64 }
%"class.gl::BindingPointer.264" = type { %"class.angle::BindingPointer.265" }
%"class.angle::BindingPointer.265" = type { i32 (...)**, %"class.gl::Buffer"* }
%"class.angle::BitSetT.266" = type { i64 }
%"class.rx::TextureImpl" = type opaque
%"class.egl::Stream" = type { %"class.egl::LabeledObject", i8*, %"class.egl::Display"*, %"class.rx::StreamProducerImpl"*, %"class.gl::Context"*, i32, i64, i64, i32, i32, i32, %"struct.std::__1::array.267", i32, i32 }
%"class.rx::StreamProducerImpl" = type opaque
%"struct.std::__1::array.267" = type { [3 x %"struct.egl::Stream::PlaneTexture"] }
%"struct.egl::Stream::PlaneTexture" = type { i32, %"class.gl::Texture"* }
%"class.angle::FastVector.268" = type { %"struct.std::__1::array.269", %"class.rx::Serial"*, i64, i64 }
%"struct.std::__1::array.269" = type { [8 x %"class.rx::Serial"] }
%"struct.gl::Texture::SamplerCompletenessCache" = type <{ %"struct.gl::ContextID", %"class.gl::SamplerState", i8, [3 x i8] }>
%"class.absl::flat_hash_map.270" = type { %"class.absl::container_internal::raw_hash_map.271" }
%"class.absl::container_internal::raw_hash_map.271" = type { %"class.absl::container_internal::raw_hash_set.272" }
%"class.absl::container_internal::raw_hash_set.272" = type { i8*, %"union.absl::container_internal::map_slot_type.273"*, i64, i64, %"class.absl::container_internal::CompressedTuple.274" }
%"union.absl::container_internal::map_slot_type.273" = type { %"struct.std::__1::pair.706" }
%"struct.std::__1::pair.706" = type { i32, %"class.gl::Texture"* }
%"class.absl::container_internal::CompressedTuple.274" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.275" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.275" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::RenderbufferManager" = type { %"class.gl::TypedResourceManager.279" }
%"class.gl::TypedResourceManager.279" = type { %"class.gl::ResourceManagerBase", %"class.gl::ResourceMap.280" }
%"class.gl::ResourceMap.280" = type { i64, %"class.gl::Renderbuffer"**, %"class.absl::flat_hash_map.281" }
%"class.gl::Renderbuffer" = type { %"class.gl::RefCountObject.base", %"class.egl::ImageSibling", %"class.gl::LabeledObject", %"class.gl::RenderbufferState", %"class.std::__1::unique_ptr", %"class.std::__1::basic_string", %"class.angle::ObserverBinding" }
%"class.gl::RefCountObject.base" = type <{ %"class.angle::RefCountObject", %"class.rx::Serial", %"struct.gl::RenderbufferID" }>
%"struct.gl::RenderbufferID" = type { i32 }
%"class.gl::RenderbufferState" = type <{ i32, i32, %"struct.gl::Format", i32, i32, i32, [4 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.15" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"class.rx::RenderbufferImpl"* }
%"class.rx::RenderbufferImpl" = type { %"class.rx::FramebufferAttachmentObjectImpl", %"class.gl::RenderbufferState"* }
%"class.rx::FramebufferAttachmentObjectImpl" = type { %"class.angle::Subject" }
%"class.absl::flat_hash_map.281" = type { %"class.absl::container_internal::raw_hash_map.282" }
%"class.absl::container_internal::raw_hash_map.282" = type { %"class.absl::container_internal::raw_hash_set.283" }
%"class.absl::container_internal::raw_hash_set.283" = type { i8*, %"union.absl::container_internal::map_slot_type.284"*, i64, i64, %"class.absl::container_internal::CompressedTuple.285" }
%"union.absl::container_internal::map_slot_type.284" = type { %"struct.std::__1::pair.708" }
%"struct.std::__1::pair.708" = type { i32, %"class.gl::Renderbuffer"* }
%"class.absl::container_internal::CompressedTuple.285" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.286" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.286" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::SamplerManager" = type { %"class.gl::TypedResourceManager.290" }
%"class.gl::TypedResourceManager.290" = type { %"class.gl::ResourceManagerBase", %"class.gl::ResourceMap.291" }
%"class.gl::ResourceMap.291" = type { i64, %"class.gl::Sampler"**, %"class.absl::flat_hash_map.294" }
%"class.gl::Sampler" = type { %"class.gl::RefCountObject.base.293", %"class.gl::LabeledObject", %"class.angle::Subject", %"class.gl::SamplerState", i8, %"class.rx::SamplerImpl"*, %"class.std::__1::basic_string" }
%"class.gl::RefCountObject.base.293" = type <{ %"class.angle::RefCountObject", %"class.rx::Serial", %"struct.gl::SamplerID" }>
%"struct.gl::SamplerID" = type { i32 }
%"class.rx::SamplerImpl" = type opaque
%"class.absl::flat_hash_map.294" = type { %"class.absl::container_internal::raw_hash_map.295" }
%"class.absl::container_internal::raw_hash_map.295" = type { %"class.absl::container_internal::raw_hash_set.296" }
%"class.absl::container_internal::raw_hash_set.296" = type { i8*, %"union.absl::container_internal::map_slot_type.297"*, i64, i64, %"class.absl::container_internal::CompressedTuple.298" }
%"union.absl::container_internal::map_slot_type.297" = type { %"struct.std::__1::pair.710" }
%"struct.std::__1::pair.710" = type { i32, %"class.gl::Sampler"* }
%"class.absl::container_internal::CompressedTuple.298" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.299" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.299" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::SyncManager" = type { %"class.gl::TypedResourceManager.303" }
%"class.gl::TypedResourceManager.303" = type { %"class.gl::ResourceManagerBase", %"class.gl::ResourceMap.304" }
%"class.gl::ResourceMap.304" = type { i64, %"class.gl::Sync"**, %"class.absl::flat_hash_map.305" }
%"class.gl::Sync" = type opaque
%"class.absl::flat_hash_map.305" = type { %"class.absl::container_internal::raw_hash_map.306" }
%"class.absl::container_internal::raw_hash_map.306" = type { %"class.absl::container_internal::raw_hash_set.307" }
%"class.absl::container_internal::raw_hash_set.307" = type { i8*, %"union.absl::container_internal::map_slot_type.308"*, i64, i64, %"class.absl::container_internal::CompressedTuple.309" }
%"union.absl::container_internal::map_slot_type.308" = type opaque
%"class.absl::container_internal::CompressedTuple.309" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.310" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.310" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::FramebufferManager" = type { %"class.gl::TypedResourceManager.314" }
%"class.gl::TypedResourceManager.314" = type { %"class.gl::ResourceManagerBase", %"class.gl::ResourceMap.315" }
%"class.gl::ResourceMap.315" = type { i64, %"class.gl::Framebuffer"**, %"class.absl::flat_hash_map.316" }
%"class.absl::flat_hash_map.316" = type { %"class.absl::container_internal::raw_hash_map.317" }
%"class.absl::container_internal::raw_hash_map.317" = type { %"class.absl::container_internal::raw_hash_set.318" }
%"class.absl::container_internal::raw_hash_set.318" = type { i8*, %"union.absl::container_internal::map_slot_type.319"*, i64, i64, %"class.absl::container_internal::CompressedTuple.320" }
%"union.absl::container_internal::map_slot_type.319" = type { %"struct.std::__1::pair.712" }
%"struct.std::__1::pair.712" = type { i32, %"class.gl::Framebuffer"* }
%"class.absl::container_internal::CompressedTuple.320" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.321" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.321" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::ProgramPipelineManager" = type { %"class.gl::TypedResourceManager.325" }
%"class.gl::TypedResourceManager.325" = type { %"class.gl::ResourceManagerBase", %"class.gl::ResourceMap.326" }
%"class.gl::ResourceMap.326" = type { i64, %"class.gl::ProgramPipeline"**, %"class.absl::flat_hash_map.344" }
%"class.gl::ProgramPipeline" = type { %"class.gl::RefCountObject.base.328", %"class.gl::LabeledObject", %"class.angle::ObserverInterface", %"class.gl::HasAttachedShaders", %"class.std::__1::unique_ptr.329", %"class.gl::ProgramPipelineState", %"class.std::__1::vector.337", %"class.angle::ObserverBinding" }
%"class.gl::RefCountObject.base.328" = type <{ %"class.angle::RefCountObject", %"class.rx::Serial", %"struct.gl::ProgramPipelineID" }>
%"struct.gl::ProgramPipelineID" = type { i32 }
%"class.gl::HasAttachedShaders" = type { i32 (...)** }
%"class.std::__1::unique_ptr.329" = type { %"class.std::__1::__compressed_pair.330" }
%"class.std::__1::__compressed_pair.330" = type { %"struct.std::__1::__compressed_pair_elem.331" }
%"struct.std::__1::__compressed_pair_elem.331" = type { %"class.rx::ProgramPipelineImpl"* }
%"class.rx::ProgramPipelineImpl" = type opaque
%"class.gl::ProgramPipelineState" = type <{ %"class.std::__1::basic_string", %"class.gl::Program"*, %"class.angle::PackedEnumMap.335", i8, [7 x i8], %"class.gl::ProgramExecutable"*, i8, [7 x i8] }>
%"class.angle::PackedEnumMap.335" = type { %"struct.std::__1::array.336" }
%"struct.std::__1::array.336" = type { [6 x %"class.gl::Program"*] }
%"class.absl::flat_hash_map.344" = type { %"class.absl::container_internal::raw_hash_map.345" }
%"class.absl::container_internal::raw_hash_map.345" = type { %"class.absl::container_internal::raw_hash_set.346" }
%"class.absl::container_internal::raw_hash_set.346" = type { i8*, %"union.absl::container_internal::map_slot_type.347"*, i64, i64, %"class.absl::container_internal::CompressedTuple.348" }
%"union.absl::container_internal::map_slot_type.347" = type { %"struct.std::__1::pair.714" }
%"struct.std::__1::pair.714" = type { i32, %"class.gl::ProgramPipeline"* }
%"class.absl::container_internal::CompressedTuple.348" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.349" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.349" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::MemoryObjectManager" = type { %"class.gl::ResourceManagerBase", %"class.gl::ResourceMap.353" }
%"class.gl::ResourceMap.353" = type { i64, %"class.gl::MemoryObject"**, %"class.absl::flat_hash_map.354" }
%"class.gl::MemoryObject" = type opaque
%"class.absl::flat_hash_map.354" = type { %"class.absl::container_internal::raw_hash_map.355" }
%"class.absl::container_internal::raw_hash_map.355" = type { %"class.absl::container_internal::raw_hash_set.356" }
%"class.absl::container_internal::raw_hash_set.356" = type { i8*, %"union.absl::container_internal::map_slot_type.357"*, i64, i64, %"class.absl::container_internal::CompressedTuple.358" }
%"union.absl::container_internal::map_slot_type.357" = type opaque
%"class.absl::container_internal::CompressedTuple.358" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.359" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.359" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::SemaphoreManager" = type { %"class.gl::ResourceManagerBase", %"class.gl::ResourceMap.363" }
%"class.gl::ResourceMap.363" = type { i64, %"class.gl::Semaphore"**, %"class.absl::flat_hash_map.364" }
%"class.gl::Semaphore" = type opaque
%"class.absl::flat_hash_map.364" = type { %"class.absl::container_internal::raw_hash_map.365" }
%"class.absl::container_internal::raw_hash_map.365" = type { %"class.absl::container_internal::raw_hash_set.366" }
%"class.absl::container_internal::raw_hash_set.366" = type { i8*, %"union.absl::container_internal::map_slot_type.367"*, i64, i64, %"class.absl::container_internal::CompressedTuple.368" }
%"union.absl::container_internal::map_slot_type.367" = type opaque
%"class.absl::container_internal::CompressedTuple.368" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.369" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.369" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"struct.gl::RasterizerState" = type { i8, i8, i32, i8, float, float, i8, i8, i8, i8 }
%"struct.gl::BlendState" = type { i8, i32, i32, i32, i32, i32, i32, i8, i8, i8, i8 }
%"struct.gl::DepthStencilState" = type { i8, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"class.gl::Framebuffer" = type { %"class.angle::ObserverInterface", %"class.gl::LabeledObject", %"class.angle::Subject", %"class.gl::FramebufferState", %"class.rx::FramebufferImpl"*, %struct.Optional.622, %"class.std::__1::vector.337", %"class.angle::ObserverBinding", %"class.angle::ObserverBinding", %"class.angle::BitSetT.623", %"class.angle::BitSetT.147", %struct.Optional.624 }
%"class.gl::FramebufferState" = type { %"struct.gl::FramebufferID", %"class.rx::Serial", %"class.std::__1::basic_string", %"class.std::__1::vector.615", %"class.gl::FramebufferAttachment", %"class.gl::FramebufferAttachment", %"class.angle::BitSetT.147", %"class.std::__1::vector", i32, %"class.angle::BitSetT.147", %"class.angle::BitSetT.148", i32, i32, i32, i8, i32, %"class.gl::FramebufferAttachment", %"class.gl::FramebufferAttachment", %"class.gl::FramebufferAttachment", i8, %"class.angle::BitSetT.536", i8, %"class.gl::FramebufferAttachment", i32, %"struct.gl::Offset" }
%"struct.gl::FramebufferID" = type { i32 }
%"class.std::__1::vector.615" = type { %"class.std::__1::__vector_base.616" }
%"class.std::__1::__vector_base.616" = type { %"class.gl::FramebufferAttachment"*, %"class.gl::FramebufferAttachment"*, %"class.std::__1::__compressed_pair.617" }
%"class.std::__1::__compressed_pair.617" = type { %"struct.std::__1::__compressed_pair_elem.618" }
%"struct.std::__1::__compressed_pair_elem.618" = type { %"class.gl::FramebufferAttachment"* }
%"class.gl::FramebufferAttachment" = type { i32, %"class.gl::FramebufferAttachment::Target", %"class.gl::FramebufferAttachmentObject"*, i32, i8, i32, i32 }
%"class.gl::FramebufferAttachment::Target" = type { i32, %"class.gl::ImageIndex" }
%"struct.gl::Offset" = type { i32, i32, i32 }
%"class.rx::FramebufferImpl" = type opaque
%struct.Optional.622 = type { i8, %"struct.gl::FramebufferStatus" }
%"struct.gl::FramebufferStatus" = type { i32, i8* }
%"class.angle::BitSetT.623" = type { i64 }
%struct.Optional.624 = type { i8, %"class.angle::BitSetT.623" }
%"class.gl::BindingPointer.374" = type { %"class.angle::BindingPointer.375" }
%"class.angle::BindingPointer.375" = type { i32 (...)**, %"class.gl::Renderbuffer"* }
%"class.gl::Program" = type { %"class.gl::LabeledObject", %"class.angle::Subject", %"class.gl::HasAttachedShaders", %"class.rx::Serial", %"class.gl::ProgramState", %"class.rx::ProgramImpl"*, i8, %"class.gl::ProgramBindings", %"class.gl::ProgramAliasedBindings", %"class.gl::ProgramAliasedBindings", i8, %"class.std::__1::unique_ptr.235", i8, i32, %"class.gl::ShaderProgramManager"*, %"struct.gl::ShaderProgramID", %"class.angle::BitSetT.201" }
%"class.gl::ProgramState" = type { %"class.std::__1::basic_string", %"struct.sh::WorkGroupSize", %"class.angle::PackedEnumMap.123", i32, %"class.std::__1::vector.125", %"class.std::__1::vector.132", %"class.std::__1::vector.139", %"class.gl::Range", %"class.angle::BitSetT.147", %"class.std::__1::vector", %"class.angle::BitSetT.148", i8, i8, i8, i8, %"class.angle::BitSetT", i32, i32, i32, i32, i32, i32, %"class.gl::ProgramAliasedBindings", %"class.std::__1::shared_ptr" }
%"class.angle::PackedEnumMap.123" = type { %"struct.std::__1::array.124" }
%"struct.std::__1::array.124" = type { [6 x %"class.gl::Shader"*] }
%"class.std::__1::vector.132" = type { %"class.std::__1::__vector_base.133" }
%"class.std::__1::__vector_base.133" = type { %"struct.gl::VariableLocation"*, %"struct.gl::VariableLocation"*, %"class.std::__1::__compressed_pair.134" }
%"struct.gl::VariableLocation" = type <{ i32, i32, i8, [3 x i8] }>
%"class.std::__1::__compressed_pair.134" = type { %"struct.std::__1::__compressed_pair_elem.135" }
%"struct.std::__1::__compressed_pair_elem.135" = type { %"struct.gl::VariableLocation"* }
%"class.std::__1::vector.139" = type { %"class.std::__1::__vector_base.140" }
%"class.std::__1::__vector_base.140" = type { %"struct.gl::BufferVariable"*, %"struct.gl::BufferVariable"*, %"class.std::__1::__compressed_pair.142" }
%"struct.gl::BufferVariable" = type <{ %"struct.gl::ActiveVariable.base", [7 x i8], %"struct.sh::ShaderVariable", i32, %"struct.sh::BlockMemberInfo", i32, [4 x i8] }>
%"struct.gl::ActiveVariable.base" = type <{ i32 (...)**, %"class.angle::BitSetT.141" }>
%"class.angle::BitSetT.141" = type { i8 }
%"struct.sh::BlockMemberInfo" = type { i32, i32, i32, i8, i32 }
%"class.std::__1::__compressed_pair.142" = type { %"struct.std::__1::__compressed_pair_elem.143" }
%"struct.std::__1::__compressed_pair_elem.143" = type { %"struct.gl::BufferVariable"* }
%"class.gl::Range" = type { i32, i32 }
%"class.std::__1::shared_ptr" = type { %"class.gl::ProgramExecutable"*, %"class.std::__1::__shared_weak_count"* }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.rx::ProgramImpl" = type opaque
%"class.gl::ProgramBindings" = type { %"class.absl::flat_hash_map.226" }
%"class.absl::flat_hash_map.226" = type { %"class.absl::container_internal::raw_hash_map.227" }
%"class.absl::container_internal::raw_hash_map.227" = type { %"class.absl::container_internal::raw_hash_set.228" }
%"class.absl::container_internal::raw_hash_set.228" = type { i8*, %"union.absl::container_internal::map_slot_type.229"*, i64, i64, %"class.absl::container_internal::CompressedTuple.230" }
%"union.absl::container_internal::map_slot_type.229" = type opaque
%"class.absl::container_internal::CompressedTuple.230" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.231" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.231" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::ProgramAliasedBindings" = type { %"class.absl::flat_hash_map.149" }
%"class.absl::flat_hash_map.149" = type { %"class.absl::container_internal::raw_hash_map.150" }
%"class.absl::container_internal::raw_hash_map.150" = type { %"class.absl::container_internal::raw_hash_set.151" }
%"class.absl::container_internal::raw_hash_set.151" = type { i8*, %"union.absl::container_internal::map_slot_type.152"*, i64, i64, %"class.absl::container_internal::CompressedTuple.153" }
%"union.absl::container_internal::map_slot_type.152" = type opaque
%"class.absl::container_internal::CompressedTuple.153" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.154" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.154" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.std::__1::unique_ptr.235" = type { %"class.std::__1::__compressed_pair.236" }
%"class.std::__1::__compressed_pair.236" = type { %"struct.std::__1::__compressed_pair_elem.237" }
%"struct.std::__1::__compressed_pair_elem.237" = type { %"struct.gl::Program::LinkingState"* }
%"struct.gl::Program::LinkingState" = type opaque
%"class.angle::BitSetT.201" = type { i64 }
%"class.gl::BindingPointer.376" = type { %"class.angle::BindingPointer.377" }
%"class.angle::BindingPointer.377" = type { i32 (...)**, %"class.gl::ProgramPipeline"* }
%"class.gl::ProgramExecutable" = type <{ %"class.angle::Subject", %"class.gl::InfoLog", %"class.angle::BitSetT.141", %"class.angle::BitSetT.141", [6 x i8], %"class.angle::BitSetT.166", i32, [4 x i8], %"class.angle::BitSetT.148", %"class.angle::BitSetT.166", %"class.angle::BitSetArray", %"struct.std::__1::array.169", %"struct.std::__1::array.170", %"class.angle::BitSetArray", %"struct.std::__1::array.171", %"struct.std::__1::array.172", %"class.angle::BitSetArray", %"struct.std::__1::array.172", i8, [7 x i8], %"class.std::__1::vector.70", %"class.std::__1::vector.132", %"class.std::__1::vector.132", i8, [7 x i8], %"class.std::__1::vector.70", %"class.std::__1::vector.173", %"class.std::__1::vector.180", i32, [4 x i8], %"class.std::__1::vector.187", %"class.gl::Range", %"class.gl::Range", %"class.std::__1::vector.194", %"class.angle::BitSetT.201", %"class.std::__1::vector.202", %"class.gl::Range", %"class.std::__1::vector.194", %"class.std::__1::vector.194", %"class.gl::Range", %"class.std::__1::vector.209", %"class.std::__1::vector.216", %"class.std::__1::vector.216", i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [3 x i8], %"class.angle::PackedEnumMap.223", %"class.angle::PackedEnumMap.223", %"class.angle::PackedEnumMap", i8, i8, [2 x i8], i32, i32, i32, i32, i32, i32, i32, %struct.Optional.225, [6 x i8] }>
%"class.gl::InfoLog" = type { %"class.std::__1::unique_ptr.160" }
%"class.std::__1::unique_ptr.160" = type { %"class.std::__1::__compressed_pair.161" }
%"class.std::__1::__compressed_pair.161" = type { %"struct.std::__1::__compressed_pair_elem.162" }
%"struct.std::__1::__compressed_pair_elem.162" = type { %"class.std::__1::basic_stringstream"* }
%"class.std::__1::basic_stringstream" = type { %"class.std::__1::basic_iostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_iostream.base" = type { %"class.std::__1::basic_istream.base", %"class.std::__1::basic_ostream.base" }
%"class.std::__1::basic_istream.base" = type { i32 (...)**, i64 }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"struct.std::__1::array.170" = type { [96 x i8] }
%"struct.std::__1::array.171" = type { [96 x i8] }
%"struct.std::__1::array.172" = type { [96 x %"class.angle::BitSetT.141"] }
%"class.std::__1::vector.173" = type { %"class.std::__1::__vector_base.174" }
%"class.std::__1::__vector_base.174" = type { %"struct.gl::TransformFeedbackVarying"*, %"struct.gl::TransformFeedbackVarying"*, %"class.std::__1::__compressed_pair.175" }
%"struct.gl::TransformFeedbackVarying" = type <{ %"struct.sh::ShaderVariable", i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.175" = type { %"struct.std::__1::__compressed_pair_elem.176" }
%"struct.std::__1::__compressed_pair_elem.176" = type { %"struct.gl::TransformFeedbackVarying"* }
%"class.std::__1::vector.180" = type { %"class.std::__1::__vector_base.181" }
%"class.std::__1::__vector_base.181" = type { i32*, i32*, %"class.std::__1::__compressed_pair.182" }
%"class.std::__1::__compressed_pair.182" = type { %"struct.std::__1::__compressed_pair_elem.183" }
%"struct.std::__1::__compressed_pair_elem.183" = type { i32* }
%"class.std::__1::vector.187" = type { %"class.std::__1::__vector_base.188" }
%"class.std::__1::__vector_base.188" = type { %"struct.gl::LinkedUniform"*, %"struct.gl::LinkedUniform"*, %"class.std::__1::__compressed_pair.189" }
%"struct.gl::LinkedUniform" = type { %"struct.gl::ActiveVariable.base", %"struct.sh::ShaderVariable", %"struct.gl::UniformTypeInfo"*, i32, %"struct.sh::BlockMemberInfo", %"class.std::__1::vector" }
%"struct.gl::UniformTypeInfo" = type <{ i32, i32, i32, i32, i32, i8, [3 x i8], i32, i32, i32, [4 x i8], i64, i64, i64, i8, i8, i8, [5 x i8] }>
%"class.std::__1::__compressed_pair.189" = type { %"struct.std::__1::__compressed_pair_elem.190" }
%"struct.std::__1::__compressed_pair_elem.190" = type { %"struct.gl::LinkedUniform"* }
%"class.std::__1::vector.202" = type { %"class.std::__1::__vector_base.203" }
%"class.std::__1::__vector_base.203" = type { %"struct.gl::ShaderVariableBuffer"*, %"struct.gl::ShaderVariableBuffer"*, %"class.std::__1::__compressed_pair.204" }
%"struct.gl::ShaderVariableBuffer" = type { %"struct.gl::ActiveVariable.base", i32, i32, %"class.std::__1::vector" }
%"class.std::__1::__compressed_pair.204" = type { %"struct.std::__1::__compressed_pair_elem.205" }
%"struct.std::__1::__compressed_pair_elem.205" = type { %"struct.gl::ShaderVariableBuffer"* }
%"class.std::__1::vector.194" = type { %"class.std::__1::__vector_base.195" }
%"class.std::__1::__vector_base.195" = type { %"struct.gl::InterfaceBlock"*, %"struct.gl::InterfaceBlock"*, %"class.std::__1::__compressed_pair.196" }
%"struct.gl::InterfaceBlock" = type <{ %"struct.gl::ShaderVariableBuffer", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i8, [3 x i8], i32, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.196" = type { %"struct.std::__1::__compressed_pair_elem.197" }
%"struct.std::__1::__compressed_pair_elem.197" = type { %"struct.gl::InterfaceBlock"* }
%"class.std::__1::vector.209" = type { %"class.std::__1::__vector_base.210" }
%"class.std::__1::__vector_base.210" = type { %"struct.gl::SamplerBinding"*, %"struct.gl::SamplerBinding"*, %"class.std::__1::__compressed_pair.211" }
%"struct.gl::SamplerBinding" = type { i8, i32, i8, %"class.std::__1::vector" }
%"class.std::__1::__compressed_pair.211" = type { %"struct.std::__1::__compressed_pair_elem.212" }
%"struct.std::__1::__compressed_pair_elem.212" = type { %"struct.gl::SamplerBinding"* }
%"class.std::__1::vector.216" = type { %"class.std::__1::__vector_base.217" }
%"class.std::__1::__vector_base.217" = type { %"struct.gl::ImageBinding"*, %"struct.gl::ImageBinding"*, %"class.std::__1::__compressed_pair.218" }
%"struct.gl::ImageBinding" = type { i8, %"class.std::__1::vector" }
%"class.std::__1::__compressed_pair.218" = type { %"struct.std::__1::__compressed_pair_elem.219" }
%"struct.std::__1::__compressed_pair_elem.219" = type { %"struct.gl::ImageBinding"* }
%"class.angle::PackedEnumMap.223" = type { %"struct.std::__1::array.224" }
%"struct.std::__1::array.224" = type { [6 x %"class.std::__1::vector.70"] }
%struct.Optional.225 = type { i8, i8 }
%"class.gl::VertexArray" = type <{ %"class.angle::ObserverInterface", %"class.gl::LabeledObject", %"class.angle::Subject", %"struct.gl::VertexArrayID", [4 x i8], %"class.gl::VertexArrayState", %"class.angle::BitSetT.400", %"struct.std::__1::array.401", %"struct.std::__1::array.403", %struct.Optional.405, %"class.rx::VertexArrayImpl"*, %"class.std::__1::vector.337", %"class.angle::BitSetT.166", %"class.gl::VertexArray::IndexRangeCache", i8, [7 x i8] }>
%"struct.gl::VertexArrayID" = type { i32 }
%"class.gl::VertexArrayState" = type { %"class.std::__1::basic_string", %"class.std::__1::vector.386", %"class.gl::SubjectBindingPointer", %"class.std::__1::vector.393", %"class.angle::BitSetT.166", %"class.angle::BitSetT.148", %"class.angle::BitSetT.166", %"class.angle::BitSetT.166", %"class.angle::BitSetT.166", %"class.angle::BitSetT.166", %"class.angle::BitSetT.166" }
%"class.std::__1::vector.386" = type { %"class.std::__1::__vector_base.387" }
%"class.std::__1::__vector_base.387" = type { %"struct.gl::VertexAttribute"*, %"struct.gl::VertexAttribute"*, %"class.std::__1::__compressed_pair.388" }
%"struct.gl::VertexAttribute" = type { i8, %"struct.angle::Format"*, i8*, i32, i32, i32, i64 }
%"class.std::__1::__compressed_pair.388" = type { %"struct.std::__1::__compressed_pair_elem.389" }
%"struct.std::__1::__compressed_pair_elem.389" = type { %"struct.gl::VertexAttribute"* }
%"class.gl::SubjectBindingPointer" = type { %"class.gl::BindingPointer.264", %"class.angle::ObserverBindingBase" }
%"class.std::__1::vector.393" = type { %"class.std::__1::__vector_base.394" }
%"class.std::__1::__vector_base.394" = type { %"class.gl::VertexBinding"*, %"class.gl::VertexBinding"*, %"class.std::__1::__compressed_pair.395" }
%"class.gl::VertexBinding" = type { i32, i32, i64, %"class.gl::BindingPointer.264", %"class.angle::BitSetT.166" }
%"class.std::__1::__compressed_pair.395" = type { %"struct.std::__1::__compressed_pair_elem.396" }
%"struct.std::__1::__compressed_pair_elem.396" = type { %"class.gl::VertexBinding"* }
%"class.angle::BitSetT.400" = type { i64 }
%"struct.std::__1::array.401" = type { [16 x %"class.angle::BitSetT.402"] }
%"class.angle::BitSetT.402" = type { i64 }
%"struct.std::__1::array.403" = type { [16 x %"class.angle::BitSetT.404"] }
%"class.angle::BitSetT.404" = type { i64 }
%struct.Optional.405 = type { i8, %"class.angle::BitSetT.400" }
%"class.rx::VertexArrayImpl" = type opaque
%"class.gl::VertexArray::IndexRangeCache" = type { i64, i32, i64, %"struct.gl::IndexRange" }
%"struct.gl::IndexRange" = type { i64, i64, i64 }
%"class.angle::BitSetT.148" = type { i64 }
%"class.angle::PackedEnumMap.406" = type { %"struct.std::__1::array.407" }
%"struct.std::__1::array.407" = type { [11 x %"class.std::__1::vector.408"] }
%"class.std::__1::vector.408" = type { %"class.std::__1::__vector_base.409" }
%"class.std::__1::__vector_base.409" = type { %"class.gl::BindingPointer.410"*, %"class.gl::BindingPointer.410"*, %"class.std::__1::__compressed_pair.412" }
%"class.gl::BindingPointer.410" = type { %"class.angle::BindingPointer.411" }
%"class.angle::BindingPointer.411" = type { i32 (...)**, %"class.gl::Texture"* }
%"class.std::__1::__compressed_pair.412" = type { %"struct.std::__1::__compressed_pair_elem.413" }
%"struct.std::__1::__compressed_pair_elem.413" = type { %"class.gl::BindingPointer.410"* }
%"class.gl::ActiveTexturesCache" = type { %"struct.std::__1::array.417" }
%"struct.std::__1::array.417" = type { [96 x %"class.gl::Texture"*] }
%"class.std::__1::vector.418" = type { %"class.std::__1::__vector_base.419" }
%"class.std::__1::__vector_base.419" = type { %"class.gl::BindingPointer.420"*, %"class.gl::BindingPointer.420"*, %"class.std::__1::__compressed_pair.422" }
%"class.gl::BindingPointer.420" = type { %"class.angle::BindingPointer.421" }
%"class.angle::BindingPointer.421" = type { i32 (...)**, %"class.gl::Sampler"* }
%"class.std::__1::__compressed_pair.422" = type { %"struct.std::__1::__compressed_pair_elem.423" }
%"struct.std::__1::__compressed_pair_elem.423" = type { %"class.gl::BindingPointer.420"* }
%"class.std::__1::vector.427" = type { %"class.std::__1::__vector_base.428" }
%"class.std::__1::__vector_base.428" = type { %"struct.gl::ImageUnit"*, %"struct.gl::ImageUnit"*, %"class.std::__1::__compressed_pair.429" }
%"struct.gl::ImageUnit" = type <{ %"class.gl::BindingPointer.410", i32, i8, [3 x i8], i32, i32, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.429" = type { %"struct.std::__1::__compressed_pair_elem.430" }
%"struct.std::__1::__compressed_pair_elem.430" = type { %"struct.gl::ImageUnit"* }
%"class.angle::PackedEnumMap.434" = type { %"struct.std::__1::array.435" }
%"struct.std::__1::array.435" = type { [7 x %"class.gl::BindingPointer.436"] }
%"class.gl::BindingPointer.436" = type { %"class.angle::BindingPointer.437" }
%"class.angle::BindingPointer.437" = type { i32 (...)**, %"class.gl::Query"* }
%"class.gl::Query" = type opaque
%"class.angle::PackedEnumMap.438" = type { %"struct.std::__1::array.439" }
%"struct.std::__1::array.439" = type { [13 x %"class.gl::BindingPointer.264"] }
%"class.std::__1::vector.440" = type { %"class.std::__1::__vector_base.441" }
%"class.std::__1::__vector_base.441" = type { %"class.gl::OffsetBindingPointer"*, %"class.gl::OffsetBindingPointer"*, %"class.std::__1::__compressed_pair.442" }
%"class.std::__1::__compressed_pair.442" = type { %"struct.std::__1::__compressed_pair_elem.443" }
%"struct.std::__1::__compressed_pair_elem.443" = type { %"class.gl::OffsetBindingPointer"* }
%"class.angle::BitSetArray.447" = type { %"struct.std::__1::array.167" }
%"struct.std::__1::array.167" = type { [2 x %"class.angle::BitSetT.168"] }
%"class.angle::BitSetT.448" = type { i64 }
%"class.gl::BindingPointer.449" = type { %"class.angle::BindingPointer.450" }
%"class.angle::BindingPointer.450" = type { i32 (...)**, %"class.gl::TransformFeedback"* }
%"class.gl::TransformFeedback" = type { %"class.gl::RefCountObject.base.452", %"class.gl::LabeledObject", %"class.gl::TransformFeedbackState", %"class.rx::TransformFeedbackImpl"* }
%"class.gl::RefCountObject.base.452" = type <{ %"class.angle::RefCountObject", %"class.rx::Serial", %"struct.gl::TransformFeedbackID" }>
%"struct.gl::TransformFeedbackID" = type { i32 }
%"class.gl::TransformFeedbackState" = type { %"class.std::__1::basic_string", i8, i8, i8, i64, i64, %"class.gl::Program"*, %"class.std::__1::vector.440" }
%"class.rx::TransformFeedbackImpl" = type opaque
%"struct.gl::PixelUnpackState" = type { %"struct.gl::PixelStoreStateBase" }
%"struct.gl::PixelStoreStateBase" = type { i32, i32, i32, i32, i32, i32 }
%"struct.gl::PixelPackState" = type <{ %"struct.gl::PixelStoreStateBase", i8, [3 x i8] }>
%"class.gl::Debug" = type { i8, void (i32, i32, i32, i32, i32, i8*, i8*)*, i8*, %"class.std::__1::deque", i32, i8, %"class.std::__1::vector.462" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.458" }
%"struct.std::__1::__split_buffer" = type { %"struct.gl::Debug::Message"**, %"struct.gl::Debug::Message"**, %"struct.gl::Debug::Message"**, %"class.std::__1::__compressed_pair.453" }
%"struct.gl::Debug::Message" = type { i32, i32, i32, i32, %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.453" = type { %"struct.std::__1::__compressed_pair_elem.454" }
%"struct.std::__1::__compressed_pair_elem.454" = type { %"struct.gl::Debug::Message"** }
%"class.std::__1::__compressed_pair.458" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::vector.462" = type { %"class.std::__1::__vector_base.463" }
%"class.std::__1::__vector_base.463" = type { %"struct.gl::Debug::Group"*, %"struct.gl::Debug::Group"*, %"class.std::__1::__compressed_pair.471" }
%"struct.gl::Debug::Group" = type { i32, i32, %"class.std::__1::basic_string", %"class.std::__1::vector.464" }
%"class.std::__1::vector.464" = type { %"class.std::__1::__vector_base.465" }
%"class.std::__1::__vector_base.465" = type { %"struct.gl::Debug::Control"*, %"struct.gl::Debug::Control"*, %"class.std::__1::__compressed_pair.466" }
%"struct.gl::Debug::Control" = type <{ i32, i32, i32, [4 x i8], %"class.std::__1::vector", i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.466" = type { %"struct.std::__1::__compressed_pair_elem.467" }
%"struct.std::__1::__compressed_pair_elem.467" = type { %"struct.gl::Debug::Control"* }
%"class.std::__1::__compressed_pair.471" = type { %"struct.std::__1::__compressed_pair_elem.472" }
%"struct.std::__1::__compressed_pair_elem.472" = type { %"struct.gl::Debug::Group"* }
%"class.gl::GLES1State" = type <{ %"class.gl::State"*, %"class.angle::BitSetT.166", %"class.std::__1::vector.477", i8, i8, i8, i8, [4 x i8], %"class.std::__1::vector.485", i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, %"struct.angle::Color", %"class.angle::Vector", %"class.std::__1::vector.490", i32, i8, [3 x i8], %"class.angle::FixedVector", %"class.angle::FixedVector", %"class.std::__1::vector.505", %"class.std::__1::vector.512", %"struct.gl::MaterialParameters", %"struct.gl::LightModelParameters", %"class.std::__1::vector.519", %"struct.gl::FogParameters", i8, [3 x i8], %"struct.gl::PointParameters", i8, [3 x i8], float, i8, [7 x i8], %"class.std::__1::vector.528", i8, i8, i8, i8, [4 x i8] }>
%"class.std::__1::vector.477" = type { %"class.std::__1::__vector_base.478" }
%"class.std::__1::__vector_base.478" = type { %"class.angle::BitSetT.479"*, %"class.angle::BitSetT.479"*, %"class.std::__1::__compressed_pair.480" }
%"class.angle::BitSetT.479" = type opaque
%"class.std::__1::__compressed_pair.480" = type { %"struct.std::__1::__compressed_pair_elem.481" }
%"struct.std::__1::__compressed_pair_elem.481" = type { %"class.angle::BitSetT.479"* }
%"class.std::__1::vector.485" = type { i64*, i64, %"class.std::__1::__compressed_pair.486" }
%"class.std::__1::__compressed_pair.486" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.angle::Vector" = type { %"class.angle::VectorBase" }
%"class.angle::VectorBase" = type { [3 x float] }
%"class.std::__1::vector.490" = type { %"class.std::__1::__vector_base.491" }
%"class.std::__1::__vector_base.491" = type { %"struct.gl::TextureCoordF"*, %"struct.gl::TextureCoordF"*, %"class.std::__1::__compressed_pair.492" }
%"struct.gl::TextureCoordF" = type { float, float, float, float }
%"class.std::__1::__compressed_pair.492" = type { %"struct.std::__1::__compressed_pair_elem.493" }
%"struct.std::__1::__compressed_pair_elem.493" = type { %"struct.gl::TextureCoordF"* }
%"class.angle::FixedVector" = type { %"struct.std::__1::array.497", i64 }
%"struct.std::__1::array.497" = type { [16 x %"class.angle::Mat4"] }
%"class.angle::Mat4" = type { %"class.angle::Matrix" }
%"class.angle::Matrix" = type { %"class.std::__1::vector.498", i32, i32 }
%"class.std::__1::vector.498" = type { %"class.std::__1::__vector_base.499" }
%"class.std::__1::__vector_base.499" = type { float*, float*, %"class.std::__1::__compressed_pair.500" }
%"class.std::__1::__compressed_pair.500" = type { %"struct.std::__1::__compressed_pair_elem.501" }
%"struct.std::__1::__compressed_pair_elem.501" = type { float* }
%"class.std::__1::vector.505" = type { %"class.std::__1::__vector_base.506" }
%"class.std::__1::__vector_base.506" = type { %"class.angle::FixedVector"*, %"class.angle::FixedVector"*, %"class.std::__1::__compressed_pair.507" }
%"class.std::__1::__compressed_pair.507" = type { %"struct.std::__1::__compressed_pair_elem.508" }
%"struct.std::__1::__compressed_pair_elem.508" = type { %"class.angle::FixedVector"* }
%"class.std::__1::vector.512" = type { %"class.std::__1::__vector_base.513" }
%"class.std::__1::__vector_base.513" = type { %"struct.gl::TextureEnvironmentParameters"*, %"struct.gl::TextureEnvironmentParameters"*, %"class.std::__1::__compressed_pair.514" }
%"struct.gl::TextureEnvironmentParameters" = type <{ i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, %"struct.angle::Color", float, float, i8, [3 x i8] }>
%"class.std::__1::__compressed_pair.514" = type { %"struct.std::__1::__compressed_pair_elem.515" }
%"struct.std::__1::__compressed_pair_elem.515" = type { %"struct.gl::TextureEnvironmentParameters"* }
%"struct.gl::MaterialParameters" = type { %"struct.angle::Color", %"struct.angle::Color", %"struct.angle::Color", %"struct.angle::Color", float }
%"struct.gl::LightModelParameters" = type <{ %"struct.angle::Color", i8, [3 x i8] }>
%"class.std::__1::vector.519" = type { %"class.std::__1::__vector_base.520" }
%"class.std::__1::__vector_base.520" = type { %"struct.gl::LightParameters"*, %"struct.gl::LightParameters"*, %"class.std::__1::__compressed_pair.523" }
%"struct.gl::LightParameters" = type { i8, %"struct.angle::Color", %"struct.angle::Color", %"struct.angle::Color", %"class.angle::Vector.521", %"class.angle::Vector", float, float, float, float, float }
%"class.angle::Vector.521" = type { %"class.angle::VectorBase.522" }
%"class.angle::VectorBase.522" = type { [4 x float] }
%"class.std::__1::__compressed_pair.523" = type { %"struct.std::__1::__compressed_pair_elem.524" }
%"struct.std::__1::__compressed_pair_elem.524" = type { %"struct.gl::LightParameters"* }
%"struct.gl::FogParameters" = type { i8, float, float, float, %"struct.angle::Color" }
%"struct.gl::PointParameters" = type { float, float, float, %"class.angle::Vector", float }
%"class.std::__1::vector.528" = type { %"class.std::__1::__vector_base.529" }
%"class.std::__1::__vector_base.529" = type { %"struct.gl::ClipPlaneParameters"*, %"struct.gl::ClipPlaneParameters"*, %"class.std::__1::__compressed_pair.530" }
%"struct.gl::ClipPlaneParameters" = type { i8, %"class.angle::Vector.521" }
%"class.std::__1::__compressed_pair.530" = type { %"struct.std::__1::__compressed_pair_elem.531" }
%"struct.std::__1::__compressed_pair_elem.531" = type { %"struct.gl::ClipPlaneParameters"* }
%"class.angle::BitSetT.535" = type { i32 }
%"class.angle::BitSetArray" = type { %"struct.std::__1::array.167" }
%"class.gl::ErrorSet" = type { %"class.gl::Context"*, %"class.std::__1::set.35" }
%"class.angle::BitSetT.537" = type { i32 }
%"class.std::__1::unique_ptr.538" = type { %"class.std::__1::__compressed_pair.539" }
%"class.std::__1::__compressed_pair.539" = type { %"struct.std::__1::__compressed_pair_elem.540" }
%"struct.std::__1::__compressed_pair_elem.540" = type { %"class.rx::ContextImpl"* }
%"class.rx::ContextImpl" = type { %"class.rx::GLImplFactory", %"class.gl::State"*, %"class.gl::MemoryProgramCache"*, %"class.gl::ErrorSet"* }
%"class.rx::GLImplFactory" = type { i32 (...)**, %"class.rx::SerialFactoryBase" }
%"class.rx::SerialFactoryBase" = type { i64 }
%"struct.gl::Extensions" = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, float, i8, i8, i8, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%"class.gl::BindingPointer" = type { %"class.angle::BindingPointer.91" }
%"class.angle::BindingPointer.91" = type { i32 (...)**, %"class.gl::Compiler"* }
%"class.gl::Compiler" = type { %"class.angle::RefCountObject", %"class.std::__1::unique_ptr.92", i32, i32, %struct.ShBuiltInResources, %"class.angle::PackedEnumMap.98" }
%"class.std::__1::unique_ptr.92" = type { %"class.std::__1::__compressed_pair.93" }
%"class.std::__1::__compressed_pair.93" = type { %"struct.std::__1::__compressed_pair_elem.94" }
%"struct.std::__1::__compressed_pair_elem.94" = type { %"class.rx::CompilerImpl"* }
%"class.rx::CompilerImpl" = type opaque
%struct.ShBuiltInResources = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64 (i8*, i64)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"struct.std::__1::array.32", %"struct.std::__1::array.32", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"class.angle::PackedEnumMap.98" = type { %"struct.std::__1::array.99" }
%"struct.std::__1::array.99" = type { [6 x %"class.std::__1::vector.100"] }
%"class.std::__1::vector.100" = type { %"class.std::__1::__vector_base.101" }
%"class.std::__1::__vector_base.101" = type { %"class.gl::ShCompilerInstance"*, %"class.gl::ShCompilerInstance"*, %"class.std::__1::__compressed_pair.102" }
%"class.gl::ShCompilerInstance" = type <{ i8*, i32, i8, [3 x i8] }>
%"class.std::__1::__compressed_pair.102" = type { %"struct.std::__1::__compressed_pair_elem.103" }
%"struct.std::__1::__compressed_pair_elem.103" = type { %"class.gl::ShCompilerInstance"* }
%"struct.egl::Config" = type opaque
%"class.angle::PackedEnumMap.544" = type { %"struct.std::__1::array.545" }
%"struct.std::__1::array.545" = type { [11 x %"class.gl::BindingPointer.410"] }
%"class.gl::ResourceMap.546" = type { i64, %"class.gl::FenceNV"**, %"class.absl::flat_hash_map.547" }
%"class.gl::FenceNV" = type opaque
%"class.absl::flat_hash_map.547" = type { %"class.absl::container_internal::raw_hash_map.548" }
%"class.absl::container_internal::raw_hash_map.548" = type { %"class.absl::container_internal::raw_hash_set.549" }
%"class.absl::container_internal::raw_hash_set.549" = type { i8*, %"union.absl::container_internal::map_slot_type.550"*, i64, i64, %"class.absl::container_internal::CompressedTuple.551" }
%"union.absl::container_internal::map_slot_type.550" = type opaque
%"class.absl::container_internal::CompressedTuple.551" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.552" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.552" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::ResourceMap.556" = type { i64, %"class.gl::Query"**, %"class.absl::flat_hash_map.557" }
%"class.absl::flat_hash_map.557" = type { %"class.absl::container_internal::raw_hash_map.558" }
%"class.absl::container_internal::raw_hash_map.558" = type { %"class.absl::container_internal::raw_hash_set.559" }
%"class.absl::container_internal::raw_hash_set.559" = type { i8*, %"union.absl::container_internal::map_slot_type.560"*, i64, i64, %"class.absl::container_internal::CompressedTuple.561" }
%"union.absl::container_internal::map_slot_type.560" = type opaque
%"class.absl::container_internal::CompressedTuple.561" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.562" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.562" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::ResourceMap.566" = type { i64, %"class.gl::VertexArray"**, %"class.absl::flat_hash_map.567" }
%"class.absl::flat_hash_map.567" = type { %"class.absl::container_internal::raw_hash_map.568" }
%"class.absl::container_internal::raw_hash_map.568" = type { %"class.absl::container_internal::raw_hash_set.569" }
%"class.absl::container_internal::raw_hash_set.569" = type { i8*, %"union.absl::container_internal::map_slot_type.570"*, i64, i64, %"class.absl::container_internal::CompressedTuple.571" }
%"union.absl::container_internal::map_slot_type.570" = type opaque
%"class.absl::container_internal::CompressedTuple.571" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.572" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.572" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::ResourceMap.576" = type { i64, %"class.gl::TransformFeedback"**, %"class.absl::flat_hash_map.577" }
%"class.absl::flat_hash_map.577" = type { %"class.absl::container_internal::raw_hash_map.578" }
%"class.absl::container_internal::raw_hash_map.578" = type { %"class.absl::container_internal::raw_hash_set.579" }
%"class.absl::container_internal::raw_hash_set.579" = type { i8*, %"union.absl::container_internal::map_slot_type.580"*, i64, i64, %"class.absl::container_internal::CompressedTuple.581" }
%"union.absl::container_internal::map_slot_type.580" = type opaque
%"class.absl::container_internal::CompressedTuple.581" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.582" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.582" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::HandleAllocator" = type <{ i32, i32, %"class.std::__1::vector", %"class.std::__1::vector.45", %"class.std::__1::vector", i8, [7 x i8] }>
%"class.std::__1::vector.45" = type { %"class.std::__1::__vector_base.46" }
%"class.std::__1::__vector_base.46" = type { %"struct.gl::HandleAllocator::HandleRange"*, %"struct.gl::HandleAllocator::HandleRange"*, %"class.std::__1::__compressed_pair.47" }
%"struct.gl::HandleAllocator::HandleRange" = type { i32, i32 }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48" }
%"struct.std::__1::__compressed_pair_elem.48" = type { %"struct.gl::HandleAllocator::HandleRange"* }
%"class.std::__1::vector.586" = type { %"class.std::__1::__vector_base.587" }
%"class.std::__1::__vector_base.587" = type { i8**, i8**, %"class.std::__1::__compressed_pair.588" }
%"class.std::__1::__compressed_pair.588" = type { %"struct.std::__1::__compressed_pair_elem.589" }
%"struct.std::__1::__compressed_pair_elem.589" = type { i8** }
%"class.std::__1::unique_ptr.593" = type { %"class.std::__1::__compressed_pair.594" }
%"class.std::__1::__compressed_pair.594" = type { %"struct.std::__1::__compressed_pair_elem.595" }
%"struct.std::__1::__compressed_pair_elem.595" = type { %"class.gl::GLES1Renderer"* }
%"class.gl::GLES1Renderer" = type opaque
%"class.egl::Surface" = type opaque
%"class.egl::Display" = type opaque
%"class.gl::MemoryProgramCache" = type opaque
%"class.gl::StateCache" = type <{ %"class.angle::BitSetT.166", %"class.angle::BitSetT.166", %"class.angle::BitSetT.166", i8, [7 x i8], i64, i64, i64, i64, i8, [7 x i8], %"class.angle::BitSetT.168", %"class.angle::BitSetArray", %"class.angle::PackedEnumMap.599", %"class.angle::PackedEnumMap.601", %"class.angle::PackedEnumMap.603", %"class.angle::PackedEnumMap.605", %"class.angle::PackedEnumMap.605", i8, [7 x i8] }>
%"class.angle::PackedEnumMap.599" = type { %"struct.std::__1::array.600" }
%"struct.std::__1::array.600" = type { [16 x i8] }
%"class.angle::PackedEnumMap.601" = type { %"struct.std::__1::array.602" }
%"struct.std::__1::array.602" = type { [12 x i8] }
%"class.angle::PackedEnumMap.603" = type { %"struct.std::__1::array.604" }
%"struct.std::__1::array.604" = type { [4 x i8] }
%"class.angle::PackedEnumMap.605" = type { %"struct.std::__1::array.606" }
%"struct.std::__1::array.606" = type { [19 x i32] }
%"class.angle::BitSetT.536" = type { i64 }
%"class.angle::ObserverBinding" = type { %"class.angle::ObserverBindingBase", %"class.angle::Subject"* }
%"class.std::__1::vector.337" = type { %"class.std::__1::__vector_base.338" }
%"class.std::__1::__vector_base.338" = type { %"class.angle::ObserverBinding"*, %"class.angle::ObserverBinding"*, %"class.std::__1::__compressed_pair.339" }
%"class.std::__1::__compressed_pair.339" = type { %"struct.std::__1::__compressed_pair_elem.340" }
%"struct.std::__1::__compressed_pair_elem.340" = type { %"class.angle::ObserverBinding"* }
%struct.Optional.607 = type { i8, %"class.angle::ScratchBuffer" }
%"class.angle::ScratchBuffer" = type { i32, i32, %"class.angle::MemoryBuffer" }
%"class.angle::MemoryBuffer" = type { i64, i8* }
%"class.std::__1::shared_ptr.608" = type { %"class.angle::WorkerThreadPool"*, %"class.std::__1::__shared_weak_count"* }
%"class.angle::WorkerThreadPool" = type { i32 (...)** }
%"class.std::__1::unique_ptr.609" = type { %"class.std::__1::__compressed_pair.610" }
%"class.std::__1::__compressed_pair.610" = type { %"struct.std::__1::__compressed_pair_elem.611" }
%"struct.std::__1::__compressed_pair_elem.611" = type { %"class.angle::FrameCapture"* }
%"class.angle::FrameCapture" = type opaque
%"class.gl::MockOverlay" = type { %"class.gl::overlay::Mock" }
%"class.gl::overlay::Mock" = type { i8 }
%"class.rx::ContextGL" = type <{ %"class.rx::ContextImpl", %"class.std::__1::shared_ptr.677", i32, [4 x i8] }>
%"class.std::__1::shared_ptr.677" = type { %"class.rx::RendererGL"*, %"class.std::__1::__shared_weak_count"* }
%"class.rx::RendererGL" = type <{ i32 (...)**, %"struct.gl::Version", %"class.std::__1::unique_ptr.678", %"class.rx::StateManagerGL"*, %"class.rx::BlitGL"*, %"class.rx::ClearMultiviewGL"*, i8, i8, [6 x i8], %"struct.gl::Caps", %"class.gl::TextureCapsMap", %"struct.gl::Extensions", %"struct.gl::Limitations", i32, [4 x i8], %"class.absl::flat_hash_map.684", %"class.std::__1::list", %"class.std::__1::mutex", i8, [7 x i8], %"struct.angle::FeaturesGL", i8, [7 x i8] }>
%"class.std::__1::unique_ptr.678" = type { %"class.std::__1::__compressed_pair.679" }
%"class.std::__1::__compressed_pair.679" = type { %"struct.std::__1::__compressed_pair_elem.680" }
%"struct.std::__1::__compressed_pair_elem.680" = type { %"class.rx::FunctionsGL"* }
%"class.rx::BlitGL" = type opaque
%"class.rx::ClearMultiviewGL" = type opaque
%"class.absl::flat_hash_map.684" = type { %"class.absl::container_internal::raw_hash_map.685" }
%"class.absl::container_internal::raw_hash_map.685" = type { %"class.absl::container_internal::raw_hash_set.686" }
%"class.absl::container_internal::raw_hash_set.686" = type { i8*, %"union.absl::container_internal::map_slot_type.687"*, i64, i64, %"class.absl::container_internal::CompressedTuple.688" }
%"union.absl::container_internal::map_slot_type.687" = type opaque
%"class.absl::container_internal::CompressedTuple.688" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.689" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.689" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.699" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.699" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::mutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.rx::QueryImpl" = type <{ i32 (...)**, i8, [7 x i8] }>
%"class.rx::SyncProviderGLSync" = type { %"class.rx::SyncProviderGL", %"class.rx::FunctionsGL"*, %struct.__GLsync* }
%"class.rx::SyncProviderGLQuery" = type <{ %"class.rx::SyncProviderGL", %"class.rx::FunctionsGL"*, i32, [4 x i8] }>
%"struct.std::__1::__split_buffer.717" = type { i32**, i32**, i32**, %"class.std::__1::__compressed_pair.718" }
%"class.std::__1::__compressed_pair.718" = type { %"struct.std::__1::__compressed_pair_elem.666", %"struct.std::__1::__compressed_pair_elem.719" }
%"struct.std::__1::__compressed_pair_elem.719" = type { %"class.std::__1::allocator.668"* }
%"class.std::__1::allocator.668" = type { i8 }

$_ZN2rx18SyncProviderGLSyncD2Ev = comdat any

$_ZN2rx18SyncProviderGLSyncD0Ev = comdat any

$_ZN2rx14SyncProviderGL4initEPKN2gl7ContextENS1_9QueryTypeE = comdat any

$_ZN2rx18SyncProviderGLSync5flushEPKN2gl7ContextEbPb = comdat any

$_ZN2rx19SyncProviderGLQueryD2Ev = comdat any

$_ZN2rx19SyncProviderGLQueryD0Ev = comdat any

$_ZN2rx19SyncProviderGLQuery4initEPKN2gl7ContextENS1_9QueryTypeE = comdat any

$_ZN2rx19SyncProviderGLQuery5flushEPKN2gl7ContextEbPb = comdat any

$_ZNSt3__15dequeIjNS_9allocatorIjEEE19__add_back_capacityEv = comdat any

$_ZNSt3__114__split_bufferIPjNS_9allocatorIS1_EEE9push_backEOS1_ = comdat any

$_ZNSt3__114__split_bufferIPjNS_9allocatorIS1_EEE10push_frontEOS1_ = comdat any

$_ZNSt3__114__split_bufferIPjRNS_9allocatorIS1_EEE10push_frontERKS1_ = comdat any

$_ZTVN2rx18SyncProviderGLSyncE = comdat any

$_ZTVN2rx19SyncProviderGLQueryE = comdat any

@_ZTVN2rx7QueryGLE = hidden unnamed_addr constant { [15 x i8*] } { [15 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.rx::QueryGL"*)* @_ZN2rx7QueryGLD2Ev to i8*), i8* bitcast (void (%"class.rx::QueryGL"*)* @_ZN2rx7QueryGLD0Ev to i8*), i8* bitcast (void (%"class.rx::QueryImpl"*, %"class.gl::Context"*)* @_ZN2rx9QueryImpl9onDestroyEPKN2gl7ContextE to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8
@_ZTVN2rx15StandardQueryGLE = hidden unnamed_addr constant { [15 x i8*] } { [15 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.rx::StandardQueryGL"*)* @_ZN2rx15StandardQueryGLD2Ev to i8*), i8* bitcast (void (%"class.rx::StandardQueryGL"*)* @_ZN2rx15StandardQueryGLD0Ev to i8*), i8* bitcast (void (%"class.rx::QueryImpl"*, %"class.gl::Context"*)* @_ZN2rx9QueryImpl9onDestroyEPKN2gl7ContextE to i8*), i8* bitcast (i32 (%"class.rx::StandardQueryGL"*, %"class.gl::Context"*)* @_ZN2rx15StandardQueryGL5beginEPKN2gl7ContextE to i8*), i8* bitcast (i32 (%"class.rx::StandardQueryGL"*, %"class.gl::Context"*)* @_ZN2rx15StandardQueryGL3endEPKN2gl7ContextE to i8*), i8* bitcast (i32 (%"class.rx::StandardQueryGL"*, %"class.gl::Context"*)* @_ZN2rx15StandardQueryGL12queryCounterEPKN2gl7ContextE to i8*), i8* bitcast (i32 (%"class.rx::StandardQueryGL"*, %"class.gl::Context"*, i32*)* @_ZN2rx15StandardQueryGL9getResultEPKN2gl7ContextEPi to i8*), i8* bitcast (i32 (%"class.rx::StandardQueryGL"*, %"class.gl::Context"*, i32*)* @_ZN2rx15StandardQueryGL9getResultEPKN2gl7ContextEPj to i8*), i8* bitcast (i32 (%"class.rx::StandardQueryGL"*, %"class.gl::Context"*, i64*)* @_ZN2rx15StandardQueryGL9getResultEPKN2gl7ContextEPl to i8*), i8* bitcast (i32 (%"class.rx::StandardQueryGL"*, %"class.gl::Context"*, i64*)* @_ZN2rx15StandardQueryGL9getResultEPKN2gl7ContextEPm to i8*), i8* bitcast (i32 (%"class.rx::StandardQueryGL"*, %"class.gl::Context"*, i8*)* @_ZN2rx15StandardQueryGL17isResultAvailableEPKN2gl7ContextEPb to i8*), i8* bitcast (i32 (%"class.rx::StandardQueryGL"*, %"class.gl::Context"*)* @_ZN2rx15StandardQueryGL5pauseEPKN2gl7ContextE to i8*), i8* bitcast (i32 (%"class.rx::StandardQueryGL"*, %"class.gl::Context"*)* @_ZN2rx15StandardQueryGL6resumeEPKN2gl7ContextE to i8*)] }, align 8
@_ZTVN2rx11SyncQueryGLE = hidden unnamed_addr constant { [15 x i8*] } { [15 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.rx::SyncQueryGL"*)* @_ZN2rx11SyncQueryGLD2Ev to i8*), i8* bitcast (void (%"class.rx::SyncQueryGL"*)* @_ZN2rx11SyncQueryGLD0Ev to i8*), i8* bitcast (void (%"class.rx::QueryImpl"*, %"class.gl::Context"*)* @_ZN2rx9QueryImpl9onDestroyEPKN2gl7ContextE to i8*), i8* bitcast (i32 (%"class.rx::SyncQueryGL"*, %"class.gl::Context"*)* @_ZN2rx11SyncQueryGL5beginEPKN2gl7ContextE to i8*), i8* bitcast (i32 (%"class.rx::SyncQueryGL"*, %"class.gl::Context"*)* @_ZN2rx11SyncQueryGL3endEPKN2gl7ContextE to i8*), i8* bitcast (i32 (%"class.rx::SyncQueryGL"*, %"class.gl::Context"*)* @_ZN2rx11SyncQueryGL12queryCounterEPKN2gl7ContextE to i8*), i8* bitcast (i32 (%"class.rx::SyncQueryGL"*, %"class.gl::Context"*, i32*)* @_ZN2rx11SyncQueryGL9getResultEPKN2gl7ContextEPi to i8*), i8* bitcast (i32 (%"class.rx::SyncQueryGL"*, %"class.gl::Context"*, i32*)* @_ZN2rx11SyncQueryGL9getResultEPKN2gl7ContextEPj to i8*), i8* bitcast (i32 (%"class.rx::SyncQueryGL"*, %"class.gl::Context"*, i64*)* @_ZN2rx11SyncQueryGL9getResultEPKN2gl7ContextEPl to i8*), i8* bitcast (i32 (%"class.rx::SyncQueryGL"*, %"class.gl::Context"*, i64*)* @_ZN2rx11SyncQueryGL9getResultEPKN2gl7ContextEPm to i8*), i8* bitcast (i32 (%"class.rx::SyncQueryGL"*, %"class.gl::Context"*, i8*)* @_ZN2rx11SyncQueryGL17isResultAvailableEPKN2gl7ContextEPb to i8*), i8* bitcast (i32 (%"class.rx::SyncQueryGL"*, %"class.gl::Context"*)* @_ZN2rx11SyncQueryGL5pauseEPKN2gl7ContextE to i8*), i8* bitcast (i32 (%"class.rx::SyncQueryGL"*, %"class.gl::Context"*)* @_ZN2rx11SyncQueryGL6resumeEPKN2gl7ContextE to i8*)] }, align 8
@.str = private unnamed_addr constant [18 x i8] c"Unreachable Code.\00", align 1
@.str.1 = private unnamed_addr constant [61 x i8] c"../../third_party/angle/src/libANGLE/renderer/gl/QueryGL.cpp\00", align 1
@__func__._ZN2rx11SyncQueryGL3endEPKN2gl7ContextE = private unnamed_addr constant [4 x i8] c"end\00", align 1
@_ZTVN2rx18SyncProviderGLSyncE = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.rx::SyncProviderGLSync"*)* @_ZN2rx18SyncProviderGLSyncD2Ev to i8*), i8* bitcast (void (%"class.rx::SyncProviderGLSync"*)* @_ZN2rx18SyncProviderGLSyncD0Ev to i8*), i8* bitcast (i32 (%"class.rx::SyncProviderGL"*, %"class.gl::Context"*, i8)* @_ZN2rx14SyncProviderGL4initEPKN2gl7ContextENS1_9QueryTypeE to i8*), i8* bitcast (i32 (%"class.rx::SyncProviderGLSync"*, %"class.gl::Context"*, i1, i8*)* @_ZN2rx18SyncProviderGLSync5flushEPKN2gl7ContextEbPb to i8*)] }, comdat, align 8
@_ZTVN2rx19SyncProviderGLQueryE = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.rx::SyncProviderGLQuery"*)* @_ZN2rx19SyncProviderGLQueryD2Ev to i8*), i8* bitcast (void (%"class.rx::SyncProviderGLQuery"*)* @_ZN2rx19SyncProviderGLQueryD0Ev to i8*), i8* bitcast (i32 (%"class.rx::SyncProviderGLQuery"*, %"class.gl::Context"*, i8)* @_ZN2rx19SyncProviderGLQuery4initEPKN2gl7ContextENS1_9QueryTypeE to i8*), i8* bitcast (i32 (%"class.rx::SyncProviderGLQuery"*, %"class.gl::Context"*, i1, i8*)* @_ZN2rx19SyncProviderGLQuery5flushEPKN2gl7ContextEbPb to i8*)] }, comdat, align 8

@_ZN2rx7QueryGLD1Ev = hidden unnamed_addr alias void (%"class.rx::QueryGL"*), void (%"class.rx::QueryGL"*)* @_ZN2rx7QueryGLD2Ev
@_ZN2rx15StandardQueryGLC1EN2gl9QueryTypeEPKNS_11FunctionsGLEPNS_14StateManagerGLE = hidden unnamed_addr alias void (%"class.rx::StandardQueryGL"*, i8, %"class.rx::FunctionsGL"*, %"class.rx::StateManagerGL"*), void (%"class.rx::StandardQueryGL"*, i8, %"class.rx::FunctionsGL"*, %"class.rx::StateManagerGL"*)* @_ZN2rx15StandardQueryGLC2EN2gl9QueryTypeEPKNS_11FunctionsGLEPNS_14StateManagerGLE
@_ZN2rx15StandardQueryGLD1Ev = hidden unnamed_addr alias void (%"class.rx::StandardQueryGL"*), void (%"class.rx::StandardQueryGL"*)* @_ZN2rx15StandardQueryGLD2Ev
@_ZN2rx11SyncQueryGLC1EN2gl9QueryTypeEPKNS_11FunctionsGLE = hidden unnamed_addr alias void (%"class.rx::SyncQueryGL"*, i8, %"class.rx::FunctionsGL"*), void (%"class.rx::SyncQueryGL"*, i8, %"class.rx::FunctionsGL"*)* @_ZN2rx11SyncQueryGLC2EN2gl9QueryTypeEPKNS_11FunctionsGLE
@_ZN2rx11SyncQueryGLD1Ev = hidden unnamed_addr alias void (%"class.rx::SyncQueryGL"*), void (%"class.rx::SyncQueryGL"*)* @_ZN2rx11SyncQueryGLD2Ev

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #0

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2rx7QueryGLC2EN2gl9QueryTypeE(%"class.rx::QueryGL"* nocapture, i8 zeroext) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.rx::QueryGL", %"class.rx::QueryGL"* %0, i64 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.rx::QueryGL", %"class.rx::QueryGL"* %0, i64 0, i32 0, i32 1
  store i8 %1, i8* %4, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN2rx7QueryGLE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN2rx7QueryGLD2Ev(%"class.rx::QueryGL"* nocapture) unnamed_addr #2 align 2 {
  ret void
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN2rx7QueryGLD0Ev(%"class.rx::QueryGL"* nocapture readnone) unnamed_addr #3 align 2 {
  tail call void @llvm.trap() #10
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx15StandardQueryGLC2EN2gl9QueryTypeEPKNS_11FunctionsGLEPNS_14StateManagerGLE(%"class.rx::StandardQueryGL"* nocapture, i8 zeroext, %"class.rx::FunctionsGL"*, %"class.rx::StateManagerGL"*) unnamed_addr #4 align 2 {
  %5 = getelementptr inbounds %"class.rx::StandardQueryGL", %"class.rx::StandardQueryGL"* %0, i64 0, i32 0, i32 0, i32 1
  store i8 %1, i8* %5, align 8
  %6 = getelementptr inbounds %"class.rx::StandardQueryGL", %"class.rx::StandardQueryGL"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN2rx15StandardQueryGLE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %7 = getelementptr inbounds %"class.rx::StandardQueryGL", %"class.rx::StandardQueryGL"* %0, i64 0, i32 1
  store %"class.rx::FunctionsGL"* %2, %"class.rx::FunctionsGL"** %7, align 8
  %8 = getelementptr inbounds %"class.rx::StandardQueryGL", %"class.rx::StandardQueryGL"* %0, i64 0, i32 2
  store %"class.rx::StateManagerGL"* %3, %"class.rx::StateManagerGL"** %8, align 8
  %9 = getelementptr inbounds %"class.rx::StandardQueryGL", %"class.rx::StandardQueryGL"* %0, i64 0, i32 3
  store i32 0, i32* %9, align 8
  %10 = getelementptr inbounds %"class.rx::StandardQueryGL", %"class.rx::StandardQueryGL"* %0, i64 0, i32 4
  %11 = bitcast %"class.std::__1::deque.662"* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 56, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx15StandardQueryGLD2Ev(%"class.rx::StandardQueryGL"*) unnamed_addr #4 align 2 {
  %2 = alloca i32, align 4
  %3 = getelementptr inbounds %"class.rx::StandardQueryGL", %"class.rx::StandardQueryGL"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN2rx15StandardQueryGLE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.rx::StandardQueryGL", %"class.rx::StandardQueryGL"* %0, i64 0, i32 3
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %18, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.rx::StandardQueryGL", %"class.rx::StandardQueryGL"* %0, i64 0, i32 2
  %9 = load %"class.rx::StateManagerGL"*, %"class.rx::StateManagerGL"** %8, align 8
  %10 = getelementptr inbounds %"class.rx::StandardQueryGL", %"class.rx::StandardQueryGL"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = load i8, i8* %10, align 8
  %12 = bitcast %"class.rx::StandardQueryGL"* %0 to %"class.rx::QueryGL"*
  tail call void @_ZN2rx14StateManagerGL8endQueryEN2gl9QueryTypeEPNS_7QueryGLEj(%"class.rx::StateManagerGL"* %9, i8 zeroext %11, %"class.rx::QueryGL"* %12, i32 %5) #11
  %13 = getelementptr inbounds %"class.rx::StandardQueryGL", %"class.rx::StandardQueryGL"* %0, i64 0, i32 1
  %14 = bitcast %"class.rx::FunctionsGL"** %13 to %"class.rx::DispatchTableGL"**
  %15 = load %"class.rx::DispatchTableGL"*, %"class.rx::DispatchTableGL"** %14, align 8
  %16 = getelementptr inbounds %"class.rx::DispatchTableGL", %"class.rx::DispatchTableGL"* %15, i64 0, i32 96
  %17 = load void (i32, i32*)*, void (i32, i32*)** %16, align 8
  tail call void %17(i32 1, i32* %4) #11
  store i32 0, i32* %4, align 8
  br label %18

18:                                               ; preds = %1, %7
  %19 = getelementptr inbounds %"class.rx::StandardQueryGL", %"class.rx::StandardQueryGL"* %0, i64 0, i32 4, i32 0, i32 2, i32 0, i32 0
  %20 = load i64, i64* %19, align 8
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %61, label %22

22:                                               ; preds = %18
  %23 = bitcast i32* %2 to i8*
  %24 = getelementptr inbounds %"class.rx::StandardQueryGL", %"class.rx::StandardQueryGL"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %25 = getelementptr inbounds %"class.rx::StandardQueryGL", %"class.rx::StandardQueryGL"* %0, i64 0, i32 4, i32 0, i32 1
  %26 = getelementptr inbounds %"class.rx::StandardQueryGL", %"class.rx::StandardQueryGL"* %0, i64 0, i32 1
  %27 = bitcast %"class.rx::FunctionsGL"** %26 to %"class.rx::DispatchTableGL"**
  %28 = bitcast i32*** %24 to i8***
  %29 = load i64, i64* %25, align 8
  %30 = bitcast i64* %25 to <2 x i64>*
  %31 = bitcast i64* %25 to <2 x i64>*
  br label %32

32:                                               ; preds = %22, %57
  %33 = phi i64 [ %29, %22 ], [ %59, %57 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %23) #11
  store i32 -1431655766, i32* %2, align 4
  %34 = load i32**, i32*** %24, align 8
  %35 = lshr i64 %33, 10
  %36 = getelementptr inbounds i32*, i32** %34, i64 %35
  %37 = load i32*, i32** %36, align 8
  %38 = and i64 %33, 1023
  %39 = getelementptr inbounds i32, i32* %37, i64 %38
  %40 = load i32, i32* %39, align 4
  store i32 %40, i32* %2, align 4
  %41 = load %"class.rx::DispatchTableGL"*, %"class.rx::DispatchTableGL"** %27, align 8
  %42 = getelementptr inbounds %"class.rx::DispatchTableGL", %"class.rx::DispatchTableGL"* %41, i64 0, i32 96
  %43 = load void (i32, i32*)*, void (i32, i32*)** %42, align 8
  call void %43(i32 1, i32* nonnull %2) #11
  %44 = load <2 x i64>, <2 x i64>* %30, align 8
  %45 = add <2 x i64> %44, <i64 1, i64 -1>
  store <2 x i64> %45, <2 x i64>* %31, align 8
  %46 = extractelement <2 x i64> %45, i32 0
  %47 = icmp ult i64 %46, 2048
  %48 = extractelement <2 x i64> %45, i32 1
  br i1 %47, label %57, label %49

49:                                               ; preds = %32
  %50 = load i8**, i8*** %28, align 8
  %51 = load i8*, i8** %50, align 8
  call void @_ZdlPv(i8* %51) #12
  %52 = load i32**, i32*** %24, align 8
  %53 = getelementptr inbounds i32*, i32** %52, i64 1
  store i32** %53, i32*** %24, align 8
  %54 = load i64, i64* %25, align 8
  %55 = add i64 %54, -1024
  store i64 %55, i64* %25, align 8
  %56 = load i64, i64* %19, align 8
  br label %57

57:                                               ; preds = %32, %49
  %58 = phi i64 [ %48, %32 ], [ %56, %49 ]
  %59 = phi i64 [ %46, %32 ], [ %55, %49 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %23) #11
  %60 = icmp eq i64 %58, 0
  br i1 %60, label %61, label %32

61:                                               ; preds = %57, %18
  %62 = getelementptr inbounds %"class.rx::StandardQueryGL", %"class.rx::StandardQueryGL"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %63 = load i32**, i32*** %62, align 8
  %64 = getelementptr inbounds %"class.rx::StandardQueryGL", %"class.rx::StandardQueryGL"* %0, i64 0, i32 4, i32 0, i32 1
  %65 = getelementptr inbounds %"class.rx::StandardQueryGL", %"class.rx::StandardQueryGL"* %0, i64 0, i32 4, i32 0, i32 0, i32 2
  %66 = load i32**, i32*** %65, align 8
  %67 = ptrtoint i32** %66 to i64
  %68 = ptrtoint i32** %63 to i64
  store i64 0, i64* %19, align 8
  %69 = bitcast i32*** %65 to i64*
  %70 = sub i64 %67, %68
  %71 = ashr exact i64 %70, 3
  %72 = icmp ugt i64 %71, 2
  br i1 %72, label %73, label %86

73:                                               ; preds = %61, %73
  %74 = phi i32** [ %78, %73 ], [ %63, %61 ]
  %75 = bitcast i32** %74 to i8**
  %76 = load i8*, i8** %75, align 8
  call void @_ZdlPv(i8* %76) #12
  %77 = load i32**, i32*** %62, align 8
  %78 = getelementptr inbounds i32*, i32** %77, i64 1
  store i32** %78, i32*** %62, align 8
  %79 = load i64, i64* %69, align 8
  %80 = ptrtoint i32** %78 to i64
  %81 = sub i64 %79, %80
  %82 = ashr exact i64 %81, 3
  %83 = icmp ugt i64 %82, 2
  br i1 %83, label %73, label %84

84:                                               ; preds = %73
  %85 = inttoptr i64 %79 to i32**
  br label %86

86:                                               ; preds = %84, %61
  %87 = phi i32** [ %66, %61 ], [ %85, %84 ]
  %88 = phi i32** [ %63, %61 ], [ %78, %84 ]
  %89 = phi i64 [ %71, %61 ], [ %82, %84 ]
  switch i64 %89, label %93 [
    i64 1, label %91
    i64 2, label %90
  ]

90:                                               ; preds = %86
  br label %91

91:                                               ; preds = %86, %90
  %92 = phi i64 [ 1024, %90 ], [ 512, %86 ]
  store i64 %92, i64* %64, align 8
  br label %93

93:                                               ; preds = %91, %86
  %94 = icmp eq i32** %88, %87
  br i1 %94, label %113, label %95

95:                                               ; preds = %93, %95
  %96 = phi i32** [ %99, %95 ], [ %88, %93 ]
  %97 = bitcast i32** %96 to i8**
  %98 = load i8*, i8** %97, align 8
  call void @_ZdlPv(i8* %98) #12
  %99 = getelementptr inbounds i32*, i32** %96, i64 1
  %100 = icmp eq i32** %99, %87
  br i1 %100, label %101, label %95

101:                                              ; preds = %95
  %102 = load i32**, i32*** %62, align 8
  %103 = load i32**, i32*** %65, align 8
  %104 = icmp eq i32** %103, %102
  br i1 %104, label %113, label %105

105:                                              ; preds = %101
  %106 = ptrtoint i32** %102 to i64
  %107 = getelementptr i32*, i32** %103, i64 -1
  %108 = ptrtoint i32** %107 to i64
  %109 = sub i64 %108, %106
  %110 = lshr i64 %109, 3
  %111 = xor i64 %110, -1
  %112 = getelementptr i32*, i32** %103, i64 %111
  store i32** %112, i32*** %65, align 8
  br label %113

113:                                              ; preds = %105, %101, %93
  %114 = getelementptr inbounds %"class.rx::StandardQueryGL", %"class.rx::StandardQueryGL"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %115 = load i32**, i32*** %114, align 8
  %116 = icmp eq i32** %115, null
  br i1 %116, label %119, label %117

117:                                              ; preds = %113
  %118 = bitcast i32** %115 to i8*
  call void @_ZdlPv(i8* %118) #12
  br label %119

119:                                              ; preds = %113, %117
  ret void
}

declare void @_ZN2rx14StateManagerGL8endQueryEN2gl9QueryTypeEPNS_7QueryGLEj(%"class.rx::StateManagerGL"*, i8 zeroext, %"class.rx::QueryGL"*, i32) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #6

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #6

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx15StandardQueryGLD0Ev(%"class.rx::StandardQueryGL"*) unnamed_addr #4 align 2 {
  tail call void @_ZN2rx15StandardQueryGLD2Ev(%"class.rx::StandardQueryGL"* %0) #11
  %2 = bitcast %"class.rx::StandardQueryGL"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #12
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2rx15StandardQueryGL5beginEPKN2gl7ContextE(%"class.rx::StandardQueryGL"*, %"class.gl::Context"*) unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.rx::StandardQueryGL", %"class.rx::StandardQueryGL"* %0, i64 0, i32 5
  store i64 0, i64* %3, align 8
  %4 = bitcast %"class.rx::StandardQueryGL"* %0 to i32 (%"class.rx::StandardQueryGL"*, %"class.gl::Context"*)***
  %5 = load i32 (%"class.rx::StandardQueryGL"*, %"class.gl::Context"*)**, i32 (%"class.rx::StandardQueryGL"*, %"class.gl::Context"*)*** %4, align 8
  %6 = getelementptr inbounds i32 (%"class.rx::StandardQueryGL"*, %"class.gl::Context"*)*, i32 (%"class.rx::StandardQueryGL"*, %"class.gl::Context"*)** %5, i64 12
  %7 = load i32 (%"class.rx::StandardQueryGL"*, %"class.gl::Context"*)*, i32 (%"class.rx::StandardQueryGL"*, %"class.gl::Context"*)** %6, align 8
  %8 = tail call i32 %7(%"class.rx::StandardQueryGL"* %0, %"class.gl::Context"* %1) #11
  ret i32 %8
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2rx15StandardQueryGL3endEPKN2gl7ContextE(%"class.rx::StandardQueryGL"*, %"class.gl::Context"*) unnamed_addr #4 align 2 {
  %3 = bitcast %"class.rx::StandardQueryGL"* %0 to i32 (%"class.rx::StandardQueryGL"*, %"class.gl::Context"*)***
  %4 = load i32 (%"class.rx::StandardQueryGL"*, %"class.gl::Context"*)**, i32 (%"class.rx::StandardQueryGL"*, %"class.gl::Context"*)*** %3, align 8
  %5 = getelementptr inbounds i32 (%"class.rx::StandardQueryGL"*, %"class.gl::Context"*)*, i32 (%"class.rx::StandardQueryGL"*, %"class.gl::Context"*)** %4, i64 11
  %6 = load i32 (%"class.rx::StandardQueryGL"*, %"class.gl::Context"*)*, i32 (%"class.rx::StandardQueryGL"*, %"class.gl::Context"*)** %5, align 8
  %7 = tail call i32 %6(%"class.rx::StandardQueryGL"* %0, %"class.gl::Context"* %1) #11
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2rx15StandardQueryGL12queryCounterEPKN2gl7ContextE(%"class.rx::StandardQueryGL"*, %"class.gl::Context"* nocapture readnone) unnamed_addr #4 align 2 {
  %3 = alloca i32, align 4
  %4 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #11
  store i32 -1431655766, i32* %3, align 4
  %5 = getelementptr inbounds %"class.rx::StandardQueryGL", %"class.rx::StandardQueryGL"* %0, i64 0, i32 1
  %6 = bitcast %"class.rx::FunctionsGL"** %5 to %"class.rx::DispatchTableGL"**
  %7 = load %"class.rx::DispatchTableGL"*, %"class.rx::DispatchTableGL"** %6, align 8
  %8 = getelementptr inbounds %"class.rx::DispatchTableGL", %"class.rx::DispatchTableGL"* %7, i64 0, i32 99
  %9 = load void (i32, i32*)*, void (i32, i32*)** %8, align 8
  call void %9(i32 1, i32* nonnull %3) #11
  %10 = load %"class.rx::DispatchTableGL"*, %"class.rx::DispatchTableGL"** %6, align 8
  %11 = getelementptr inbounds %"class.rx::DispatchTableGL", %"class.rx::DispatchTableGL"* %10, i64 0, i32 336
  %12 = load void (i32, i32)*, void (i32, i32)** %11, align 8
  %13 = load i32, i32* %3, align 4
  call void %12(i32 %13, i32 36392) #11
  %14 = getelementptr inbounds %"class.rx::StandardQueryGL", %"class.rx::StandardQueryGL"* %0, i64 0, i32 4, i32 0, i32 0, i32 2
  %15 = bitcast i32*** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %"class.rx::StandardQueryGL", %"class.rx::StandardQueryGL"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %18 = bitcast i32*** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %16, %19
  %21 = icmp eq i64 %20, 0
  %22 = shl i64 %20, 7
  %23 = add i64 %22, -1
  %24 = select i1 %21, i64 0, i64 %23
  %25 = getelementptr inbounds %"class.rx::StandardQueryGL", %"class.rx::StandardQueryGL"* %0, i64 0, i32 4, i32 0, i32 1
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %"class.rx::StandardQueryGL", %"class.rx::StandardQueryGL"* %0, i64 0, i32 4, i32 0, i32 2, i32 0, i32 0
  %28 = load i64, i64* %27, align 8
  %29 = add i64 %28, %26
  %30 = icmp eq i64 %24, %29
  %31 = inttoptr i64 %19 to i32**
  %32 = inttoptr i64 %16 to i32**
  br i1 %30, label %33, label %40

33:                                               ; preds = %2
  %34 = getelementptr inbounds %"class.rx::StandardQueryGL", %"class.rx::StandardQueryGL"* %0, i64 0, i32 4
  call void @_ZNSt3__15dequeIjNS_9allocatorIjEEE19__add_back_capacityEv(%"class.std::__1::deque.662"* %34) #11
  %35 = load i64, i64* %27, align 8
  %36 = load i64, i64* %25, align 8
  %37 = load i32**, i32*** %17, align 8
  %38 = load i32**, i32*** %14, align 8
  %39 = add i64 %36, %35
  br label %40

40:                                               ; preds = %33, %2
  %41 = phi i64 [ %39, %33 ], [ %29, %2 ]
  %42 = phi i32** [ %38, %33 ], [ %32, %2 ]
  %43 = phi i32** [ %37, %33 ], [ %31, %2 ]
  %44 = icmp eq i32** %42, %43
  br i1 %44, label %51, label %45

45:                                               ; preds = %40
  %46 = lshr i64 %41, 10
  %47 = getelementptr inbounds i32*, i32** %43, i64 %46
  %48 = load i32*, i32** %47, align 8
  %49 = and i64 %41, 1023
  %50 = getelementptr inbounds i32, i32* %48, i64 %49
  br label %51

51:                                               ; preds = %40, %45
  %52 = phi i32* [ %50, %45 ], [ null, %40 ]
  %53 = load i32, i32* %3, align 4
  store i32 %53, i32* %52, align 4
  %54 = load i64, i64* %27, align 8
  %55 = add i64 %54, 1
  store i64 %55, i64* %27, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #11
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2rx15StandardQueryGL9getResultEPKN2gl7ContextEPi(%"class.rx::StandardQueryGL"* nocapture, %"class.gl::Context"* nocapture readnone, i32* nocapture) unnamed_addr #4 align 2 {
  %4 = tail call i32 @_ZN2rx15StandardQueryGL5flushEPKN2gl7ContextEb(%"class.rx::StandardQueryGL"* %0, %"class.gl::Context"* undef, i1 zeroext true) #11
  %5 = getelementptr inbounds %"class.rx::StandardQueryGL", %"class.rx::StandardQueryGL"* %0, i64 0, i32 5
  %6 = load i64, i64* %5, align 8
  %7 = trunc i64 %6 to i32
  store i32 %7, i32* %2, align 4
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2rx15StandardQueryGL9getResultEPKN2gl7ContextEPj(%"class.rx::StandardQueryGL"* nocapture, %"class.gl::Context"* nocapture readnone, i32* nocapture) unnamed_addr #4 align 2 {
  %4 = tail call i32 @_ZN2rx15StandardQueryGL5flushEPKN2gl7ContextEb(%"class.rx::StandardQueryGL"* %0, %"class.gl::Context"* undef, i1 zeroext true) #11
  %5 = getelementptr inbounds %"class.rx::StandardQueryGL", %"class.rx::StandardQueryGL"* %0, i64 0, i32 5
  %6 = load i64, i64* %5, align 8
  %7 = trunc i64 %6 to i32
  store i32 %7, i32* %2, align 4
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2rx15StandardQueryGL9getResultEPKN2gl7ContextEPl(%"class.rx::StandardQueryGL"* nocapture, %"class.gl::Context"* nocapture readnone, i64* nocapture) unnamed_addr #4 align 2 {
  %4 = tail call i32 @_ZN2rx15StandardQueryGL5flushEPKN2gl7ContextEb(%"class.rx::StandardQueryGL"* %0, %"class.gl::Context"* undef, i1 zeroext true) #11
  %5 = getelementptr inbounds %"class.rx::StandardQueryGL", %"class.rx::StandardQueryGL"* %0, i64 0, i32 5
  %6 = load i64, i64* %5, align 8
  store i64 %6, i64* %2, align 8
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2rx15StandardQueryGL9getResultEPKN2gl7ContextEPm(%"class.rx::StandardQueryGL"* nocapture, %"class.gl::Context"* nocapture readnone, i64* nocapture) unnamed_addr #4 align 2 {
  %4 = tail call i32 @_ZN2rx15StandardQueryGL5flushEPKN2gl7ContextEb(%"class.rx::StandardQueryGL"* %0, %"class.gl::Context"* undef, i1 zeroext true) #11
  %5 = getelementptr inbounds %"class.rx::StandardQueryGL", %"class.rx::StandardQueryGL"* %0, i64 0, i32 5
  %6 = load i64, i64* %5, align 8
  store i64 %6, i64* %2, align 8
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2rx15StandardQueryGL17isResultAvailableEPKN2gl7ContextEPb(%"class.rx::StandardQueryGL"* nocapture, %"class.gl::Context"* nocapture readnone, i8* nocapture) unnamed_addr #4 align 2 {
  %4 = tail call i32 @_ZN2rx15StandardQueryGL5flushEPKN2gl7ContextEb(%"class.rx::StandardQueryGL"* %0, %"class.gl::Context"* undef, i1 zeroext false)
  %5 = getelementptr inbounds %"class.rx::StandardQueryGL", %"class.rx::StandardQueryGL"* %0, i64 0, i32 4, i32 0, i32 2, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = icmp eq i64 %6, 0
  %8 = zext i1 %7 to i8
  store i8 %8, i8* %2, align 1
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2rx15StandardQueryGL5flushEPKN2gl7ContextEb(%"class.rx::StandardQueryGL"* nocapture, %"class.gl::Context"* nocapture readnone, i1 zeroext) local_unnamed_addr #4 align 2 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  %8 = getelementptr inbounds %"class.rx::StandardQueryGL", %"class.rx::StandardQueryGL"* %0, i64 0, i32 4, i32 0, i32 2, i32 0, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %109, label %11

11:                                               ; preds = %3
  %12 = bitcast i32* %4 to i8*
  %13 = getelementptr inbounds %"class.rx::StandardQueryGL", %"class.rx::StandardQueryGL"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %14 = getelementptr inbounds %"class.rx::StandardQueryGL", %"class.rx::StandardQueryGL"* %0, i64 0, i32 4, i32 0, i32 1
  %15 = bitcast i32* %5 to i8*
  %16 = getelementptr inbounds %"class.rx::StandardQueryGL", %"class.rx::StandardQueryGL"* %0, i64 0, i32 1
  %17 = bitcast %"class.rx::FunctionsGL"** %16 to %"class.rx::DispatchTableGL"**
  %18 = bitcast i64* %6 to i8*
  %19 = getelementptr inbounds %"class.rx::StandardQueryGL", %"class.rx::StandardQueryGL"* %0, i64 0, i32 0, i32 0, i32 1
  %20 = getelementptr inbounds %"class.rx::StandardQueryGL", %"class.rx::StandardQueryGL"* %0, i64 0, i32 5
  %21 = bitcast i32* %7 to i8*
  %22 = bitcast i32*** %13 to i8***
  %23 = load i64, i64* %14, align 8
  %24 = bitcast i64* %14 to <2 x i64>*
  %25 = bitcast i64* %14 to <2 x i64>*
  br label %26

26:                                               ; preds = %11, %105
  %27 = phi i64 [ %23, %11 ], [ %107, %105 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #11
  store i32 -1431655766, i32* %4, align 4
  %28 = load i32**, i32*** %13, align 8
  %29 = lshr i64 %27, 10
  %30 = getelementptr inbounds i32*, i32** %28, i64 %29
  %31 = load i32*, i32** %30, align 8
  %32 = and i64 %27, 1023
  %33 = getelementptr inbounds i32, i32* %31, i64 %32
  %34 = load i32, i32* %33, align 4
  store i32 %34, i32* %4, align 4
  br i1 %2, label %42, label %35

35:                                               ; preds = %26
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %15) #11
  store i32 0, i32* %5, align 4
  %36 = load %"class.rx::DispatchTableGL"*, %"class.rx::DispatchTableGL"** %17, align 8
  %37 = getelementptr inbounds %"class.rx::DispatchTableGL", %"class.rx::DispatchTableGL"* %36, i64 0, i32 104
  %38 = load void (i32, i32, i32*)*, void (i32, i32, i32*)** %37, align 8
  call void %38(i32 %34, i32 34919, i32* nonnull %5) #11
  %39 = load i32, i32* %5, align 4
  %40 = icmp eq i32 %39, 0
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %15) #11
  br i1 %40, label %41, label %42

41:                                               ; preds = %35
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #11
  br label %109

42:                                               ; preds = %35, %26
  %43 = load %"class.rx::DispatchTableGL"*, %"class.rx::DispatchTableGL"** %17, align 8
  %44 = getelementptr inbounds %"class.rx::DispatchTableGL", %"class.rx::DispatchTableGL"* %43, i64 0, i32 330
  %45 = load void (i32, i32, i64*)*, void (i32, i32, i64*)** %44, align 8
  %46 = icmp eq void (i32, i32, i64*)* %45, null
  br i1 %46, label %66, label %47

47:                                               ; preds = %42
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #11
  store i64 0, i64* %6, align 8
  %48 = load i32, i32* %4, align 4
  call void %45(i32 %48, i32 34918, i64* nonnull %6) #11
  %49 = load i8, i8* %19, align 8
  %50 = load i64, i64* %20, align 8
  %51 = load i64, i64* %6, align 8
  switch i8 %49, label %63 [
    i8 0, label %52
    i8 1, label %52
    i8 6, label %57
    i8 4, label %59
    i8 5, label %64
    i8 3, label %61
  ]

52:                                               ; preds = %47, %47
  %53 = icmp eq i64 %50, 1
  %54 = icmp eq i64 %51, 1
  %55 = or i1 %53, %54
  %56 = zext i1 %55 to i64
  br label %64

57:                                               ; preds = %47
  %58 = add i64 %51, %50
  br label %64

59:                                               ; preds = %47
  %60 = add i64 %51, %50
  br label %64

61:                                               ; preds = %47
  %62 = add i64 %51, %50
  br label %64

63:                                               ; preds = %47
  br label %64

64:                                               ; preds = %47, %52, %57, %59, %61, %63
  %65 = phi i64 [ 0, %63 ], [ %62, %61 ], [ %60, %59 ], [ %58, %57 ], [ %56, %52 ], [ %51, %47 ]
  store i64 %65, i64* %20, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #11
  br label %88

66:                                               ; preds = %42
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %21) #11
  store i32 0, i32* %7, align 4
  %67 = getelementptr inbounds %"class.rx::DispatchTableGL", %"class.rx::DispatchTableGL"* %43, i64 0, i32 104
  %68 = load void (i32, i32, i32*)*, void (i32, i32, i32*)** %67, align 8
  %69 = load i32, i32* %4, align 4
  call void %68(i32 %69, i32 34918, i32* nonnull %7) #11
  %70 = load i8, i8* %19, align 8
  %71 = load i64, i64* %20, align 8
  %72 = load i32, i32* %7, align 4
  %73 = zext i32 %72 to i64
  switch i8 %70, label %85 [
    i8 0, label %74
    i8 1, label %74
    i8 6, label %79
    i8 4, label %81
    i8 5, label %86
    i8 3, label %83
  ]

74:                                               ; preds = %66, %66
  %75 = icmp eq i64 %71, 1
  %76 = icmp eq i32 %72, 1
  %77 = or i1 %75, %76
  %78 = zext i1 %77 to i64
  br label %86

79:                                               ; preds = %66
  %80 = add i64 %71, %73
  br label %86

81:                                               ; preds = %66
  %82 = add i64 %71, %73
  br label %86

83:                                               ; preds = %66
  %84 = add i64 %71, %73
  br label %86

85:                                               ; preds = %66
  br label %86

86:                                               ; preds = %66, %74, %79, %81, %83, %85
  %87 = phi i64 [ 0, %85 ], [ %84, %83 ], [ %82, %81 ], [ %80, %79 ], [ %78, %74 ], [ %73, %66 ]
  store i64 %87, i64* %20, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %21) #11
  br label %88

88:                                               ; preds = %86, %64
  %89 = load %"class.rx::DispatchTableGL"*, %"class.rx::DispatchTableGL"** %17, align 8
  %90 = getelementptr inbounds %"class.rx::DispatchTableGL", %"class.rx::DispatchTableGL"* %89, i64 0, i32 96
  %91 = load void (i32, i32*)*, void (i32, i32*)** %90, align 8
  call void %91(i32 1, i32* nonnull %4) #11
  %92 = load <2 x i64>, <2 x i64>* %24, align 8
  %93 = add <2 x i64> %92, <i64 1, i64 -1>
  store <2 x i64> %93, <2 x i64>* %25, align 8
  %94 = extractelement <2 x i64> %93, i32 0
  %95 = icmp ult i64 %94, 2048
  %96 = extractelement <2 x i64> %93, i32 1
  br i1 %95, label %105, label %97

97:                                               ; preds = %88
  %98 = load i8**, i8*** %22, align 8
  %99 = load i8*, i8** %98, align 8
  call void @_ZdlPv(i8* %99) #12
  %100 = load i32**, i32*** %13, align 8
  %101 = getelementptr inbounds i32*, i32** %100, i64 1
  store i32** %101, i32*** %13, align 8
  %102 = load i64, i64* %14, align 8
  %103 = add i64 %102, -1024
  store i64 %103, i64* %14, align 8
  %104 = load i64, i64* %8, align 8
  br label %105

105:                                              ; preds = %97, %88
  %106 = phi i64 [ %104, %97 ], [ %96, %88 ]
  %107 = phi i64 [ %103, %97 ], [ %94, %88 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #11
  %108 = icmp eq i64 %106, 0
  br i1 %108, label %109, label %26

109:                                              ; preds = %105, %3, %41
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2rx15StandardQueryGL5pauseEPKN2gl7ContextE(%"class.rx::StandardQueryGL"*, %"class.gl::Context"* nocapture readnone) unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.rx::StandardQueryGL", %"class.rx::StandardQueryGL"* %0, i64 0, i32 3
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %9

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.rx::StandardQueryGL", %"class.rx::StandardQueryGL"* %0, i64 0, i32 4, i32 0, i32 2, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  br label %57

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.rx::StandardQueryGL", %"class.rx::StandardQueryGL"* %0, i64 0, i32 2
  %11 = load %"class.rx::StateManagerGL"*, %"class.rx::StateManagerGL"** %10, align 8
  %12 = getelementptr inbounds %"class.rx::StandardQueryGL", %"class.rx::StandardQueryGL"* %0, i64 0, i32 0, i32 0, i32 1
  %13 = load i8, i8* %12, align 8
  %14 = bitcast %"class.rx::StandardQueryGL"* %0 to %"class.rx::QueryGL"*
  tail call void @_ZN2rx14StateManagerGL8endQueryEN2gl9QueryTypeEPNS_7QueryGLEj(%"class.rx::StateManagerGL"* %11, i8 zeroext %13, %"class.rx::QueryGL"* %14, i32 %4) #11
  %15 = getelementptr inbounds %"class.rx::StandardQueryGL", %"class.rx::StandardQueryGL"* %0, i64 0, i32 4, i32 0, i32 0, i32 2
  %16 = bitcast i32*** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %"class.rx::StandardQueryGL", %"class.rx::StandardQueryGL"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %19 = bitcast i32*** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %17, %20
  %22 = icmp eq i64 %21, 0
  %23 = shl i64 %21, 7
  %24 = add i64 %23, -1
  %25 = select i1 %22, i64 0, i64 %24
  %26 = getelementptr inbounds %"class.rx::StandardQueryGL", %"class.rx::StandardQueryGL"* %0, i64 0, i32 4, i32 0, i32 1
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds %"class.rx::StandardQueryGL", %"class.rx::StandardQueryGL"* %0, i64 0, i32 4, i32 0, i32 2, i32 0, i32 0
  %29 = load i64, i64* %28, align 8
  %30 = add i64 %29, %27
  %31 = icmp eq i64 %25, %30
  %32 = inttoptr i64 %20 to i32**
  %33 = inttoptr i64 %17 to i32**
  br i1 %31, label %34, label %41

34:                                               ; preds = %9
  %35 = getelementptr inbounds %"class.rx::StandardQueryGL", %"class.rx::StandardQueryGL"* %0, i64 0, i32 4
  tail call void @_ZNSt3__15dequeIjNS_9allocatorIjEEE19__add_back_capacityEv(%"class.std::__1::deque.662"* %35) #11
  %36 = load i64, i64* %28, align 8
  %37 = load i64, i64* %26, align 8
  %38 = load i32**, i32*** %18, align 8
  %39 = load i32**, i32*** %15, align 8
  %40 = add i64 %37, %36
  br label %41

41:                                               ; preds = %34, %9
  %42 = phi i64 [ %40, %34 ], [ %30, %9 ]
  %43 = phi i32** [ %39, %34 ], [ %33, %9 ]
  %44 = phi i32** [ %38, %34 ], [ %32, %9 ]
  %45 = icmp eq i32** %43, %44
  br i1 %45, label %52, label %46

46:                                               ; preds = %41
  %47 = lshr i64 %42, 10
  %48 = getelementptr inbounds i32*, i32** %44, i64 %47
  %49 = load i32*, i32** %48, align 8
  %50 = and i64 %42, 1023
  %51 = getelementptr inbounds i32, i32* %49, i64 %50
  br label %52

52:                                               ; preds = %41, %46
  %53 = phi i32* [ %51, %46 ], [ null, %41 ]
  %54 = load i32, i32* %3, align 4
  store i32 %54, i32* %53, align 4
  %55 = load i64, i64* %28, align 8
  %56 = add i64 %55, 1
  store i64 %56, i64* %28, align 8
  store i32 0, i32* %3, align 8
  br label %57

57:                                               ; preds = %6, %52
  %58 = phi i64 [ %8, %6 ], [ %56, %52 ]
  %59 = icmp ugt i64 %58, 4
  br i1 %59, label %60, label %62

60:                                               ; preds = %57
  %61 = tail call i32 @_ZN2rx15StandardQueryGL5flushEPKN2gl7ContextEb(%"class.rx::StandardQueryGL"* %0, %"class.gl::Context"* undef, i1 zeroext false)
  ret i32 0

62:                                               ; preds = %57
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2rx15StandardQueryGL6resumeEPKN2gl7ContextE(%"class.rx::StandardQueryGL"*, %"class.gl::Context"* nocapture readnone) unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.rx::StandardQueryGL", %"class.rx::StandardQueryGL"* %0, i64 0, i32 3
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %24

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.rx::StandardQueryGL", %"class.rx::StandardQueryGL"* %0, i64 0, i32 4, i32 0, i32 2, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = icmp ugt i64 %8, 4
  br i1 %9, label %10, label %12

10:                                               ; preds = %6
  %11 = tail call i32 @_ZN2rx15StandardQueryGL5flushEPKN2gl7ContextEb(%"class.rx::StandardQueryGL"* %0, %"class.gl::Context"* undef, i1 zeroext false)
  br label %12

12:                                               ; preds = %10, %6
  %13 = getelementptr inbounds %"class.rx::StandardQueryGL", %"class.rx::StandardQueryGL"* %0, i64 0, i32 1
  %14 = bitcast %"class.rx::FunctionsGL"** %13 to %"class.rx::DispatchTableGL"**
  %15 = load %"class.rx::DispatchTableGL"*, %"class.rx::DispatchTableGL"** %14, align 8
  %16 = getelementptr inbounds %"class.rx::DispatchTableGL", %"class.rx::DispatchTableGL"* %15, i64 0, i32 99
  %17 = load void (i32, i32*)*, void (i32, i32*)** %16, align 8
  tail call void %17(i32 1, i32* %3) #11
  %18 = getelementptr inbounds %"class.rx::StandardQueryGL", %"class.rx::StandardQueryGL"* %0, i64 0, i32 2
  %19 = load %"class.rx::StateManagerGL"*, %"class.rx::StateManagerGL"** %18, align 8
  %20 = getelementptr inbounds %"class.rx::StandardQueryGL", %"class.rx::StandardQueryGL"* %0, i64 0, i32 0, i32 0, i32 1
  %21 = load i8, i8* %20, align 8
  %22 = bitcast %"class.rx::StandardQueryGL"* %0 to %"class.rx::QueryGL"*
  %23 = load i32, i32* %3, align 8
  tail call void @_ZN2rx14StateManagerGL10beginQueryEN2gl9QueryTypeEPNS_7QueryGLEj(%"class.rx::StateManagerGL"* %19, i8 zeroext %21, %"class.rx::QueryGL"* %22, i32 %23) #11
  br label %24

24:                                               ; preds = %2, %12
  ret i32 0
}

declare void @_ZN2rx14StateManagerGL10beginQueryEN2gl9QueryTypeEPNS_7QueryGLEj(%"class.rx::StateManagerGL"*, i8 zeroext, %"class.rx::QueryGL"*, i32) local_unnamed_addr #5

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2rx11SyncQueryGLC2EN2gl9QueryTypeEPKNS_11FunctionsGLE(%"class.rx::SyncQueryGL"* nocapture, i8 zeroext, %"class.rx::FunctionsGL"*) unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.rx::SyncQueryGL", %"class.rx::SyncQueryGL"* %0, i64 0, i32 0, i32 0, i32 1
  store i8 %1, i8* %4, align 8
  %5 = getelementptr inbounds %"class.rx::SyncQueryGL", %"class.rx::SyncQueryGL"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN2rx11SyncQueryGLE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.rx::SyncQueryGL", %"class.rx::SyncQueryGL"* %0, i64 0, i32 2
  store %"class.rx::FunctionsGL"* %2, %"class.rx::FunctionsGL"** %6, align 8
  %7 = getelementptr inbounds %"class.rx::SyncQueryGL", %"class.rx::SyncQueryGL"* %0, i64 0, i32 3
  %8 = bitcast %"class.std::__1::unique_ptr.671"* %7 to i64*
  store i64 0, i64* %8, align 8
  %9 = getelementptr inbounds %"class.rx::SyncQueryGL", %"class.rx::SyncQueryGL"* %0, i64 0, i32 4
  store i8 0, i8* %9, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx11SyncQueryGLD2Ev(%"class.rx::SyncQueryGL"* nocapture) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.rx::SyncQueryGL", %"class.rx::SyncQueryGL"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN2rx11SyncQueryGLE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.rx::SyncQueryGL", %"class.rx::SyncQueryGL"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %4 = load %"class.rx::SyncProviderGL"*, %"class.rx::SyncProviderGL"** %3, align 8
  store %"class.rx::SyncProviderGL"* null, %"class.rx::SyncProviderGL"** %3, align 8
  %5 = icmp eq %"class.rx::SyncProviderGL"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.rx::SyncProviderGL"* %4 to void (%"class.rx::SyncProviderGL"*)***
  %8 = load void (%"class.rx::SyncProviderGL"*)**, void (%"class.rx::SyncProviderGL"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.rx::SyncProviderGL"*)*, void (%"class.rx::SyncProviderGL"*)** %8, i64 1
  %10 = load void (%"class.rx::SyncProviderGL"*)*, void (%"class.rx::SyncProviderGL"*)** %9, align 8
  tail call void %10(%"class.rx::SyncProviderGL"* nonnull %4) #11
  br label %11

11:                                               ; preds = %1, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx11SyncQueryGLD0Ev(%"class.rx::SyncQueryGL"*) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.rx::SyncQueryGL", %"class.rx::SyncQueryGL"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN2rx11SyncQueryGLE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.rx::SyncQueryGL", %"class.rx::SyncQueryGL"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %4 = load %"class.rx::SyncProviderGL"*, %"class.rx::SyncProviderGL"** %3, align 8
  store %"class.rx::SyncProviderGL"* null, %"class.rx::SyncProviderGL"** %3, align 8
  %5 = icmp eq %"class.rx::SyncProviderGL"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.rx::SyncProviderGL"* %4 to void (%"class.rx::SyncProviderGL"*)***
  %8 = load void (%"class.rx::SyncProviderGL"*)**, void (%"class.rx::SyncProviderGL"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.rx::SyncProviderGL"*)*, void (%"class.rx::SyncProviderGL"*)** %8, i64 1
  %10 = load void (%"class.rx::SyncProviderGL"*)*, void (%"class.rx::SyncProviderGL"*)** %9, align 8
  tail call void %10(%"class.rx::SyncProviderGL"* nonnull %4) #11
  br label %11

11:                                               ; preds = %1, %6
  %12 = bitcast %"class.rx::SyncQueryGL"* %0 to i8*
  tail call void @_ZdlPv(i8* %12) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2rx11SyncQueryGL11IsSupportedEPKNS_11FunctionsGLE(%"class.rx::FunctionsGL"*) local_unnamed_addr #4 align 2 {
  %2 = tail call zeroext i1 @_ZN2rx8nativegl17SupportsFenceSyncEPKNS_11FunctionsGLE(%"class.rx::FunctionsGL"* %0) #11
  br i1 %2, label %5, label %3

3:                                                ; preds = %1
  %4 = tail call zeroext i1 @_ZN2rx8nativegl24SupportsOcclusionQueriesEPKNS_11FunctionsGLE(%"class.rx::FunctionsGL"* %0) #11
  br label %5

5:                                                ; preds = %3, %1
  %6 = phi i1 [ true, %1 ], [ %4, %3 ]
  ret i1 %6
}

declare zeroext i1 @_ZN2rx8nativegl17SupportsFenceSyncEPKNS_11FunctionsGLE(%"class.rx::FunctionsGL"*) local_unnamed_addr #5

declare zeroext i1 @_ZN2rx8nativegl24SupportsOcclusionQueriesEPKNS_11FunctionsGLE(%"class.rx::FunctionsGL"*) local_unnamed_addr #5

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZN2rx11SyncQueryGL5beginEPKN2gl7ContextE(%"class.rx::SyncQueryGL"* nocapture readnone, %"class.gl::Context"* nocapture readnone) unnamed_addr #2 align 2 {
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2rx11SyncQueryGL3endEPKN2gl7ContextE(%"class.rx::SyncQueryGL"* nocapture, %"class.gl::Context"*) unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.rx::SyncQueryGL", %"class.rx::SyncQueryGL"* %0, i64 0, i32 2
  %4 = load %"class.rx::FunctionsGL"*, %"class.rx::FunctionsGL"** %3, align 8
  %5 = tail call zeroext i1 @_ZN2rx8nativegl17SupportsFenceSyncEPKNS_11FunctionsGLE(%"class.rx::FunctionsGL"* %4) #11
  br i1 %5, label %6, label %26

6:                                                ; preds = %2
  %7 = tail call i8* @_Znwm(i64 24) #12
  %8 = load %"class.rx::FunctionsGL"*, %"class.rx::FunctionsGL"** %3, align 8
  %9 = bitcast i8* %7 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN2rx18SyncProviderGLSyncE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  %10 = getelementptr inbounds i8, i8* %7, i64 8
  %11 = bitcast i8* %10 to %"class.rx::FunctionsGL"**
  store %"class.rx::FunctionsGL"* %8, %"class.rx::FunctionsGL"** %11, align 8
  %12 = getelementptr inbounds i8, i8* %7, i64 16
  %13 = bitcast i8* %12 to %struct.__GLsync**
  store %struct.__GLsync* null, %struct.__GLsync** %13, align 8
  %14 = getelementptr inbounds %"class.rx::FunctionsGL", %"class.rx::FunctionsGL"* %8, i64 0, i32 0, i32 310
  %15 = load %struct.__GLsync* (i32, i32)*, %struct.__GLsync* (i32, i32)** %14, align 8
  %16 = tail call %struct.__GLsync* %15(i32 37143, i32 0) #11
  store %struct.__GLsync* %16, %struct.__GLsync** %13, align 8
  %17 = getelementptr inbounds %"class.rx::SyncQueryGL", %"class.rx::SyncQueryGL"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %18 = load %"class.rx::SyncProviderGL"*, %"class.rx::SyncProviderGL"** %17, align 8
  %19 = bitcast %"class.rx::SyncProviderGL"** %17 to i8**
  store i8* %7, i8** %19, align 8
  %20 = icmp eq %"class.rx::SyncProviderGL"* %18, null
  br i1 %20, label %62, label %21

21:                                               ; preds = %6
  %22 = bitcast %"class.rx::SyncProviderGL"* %18 to void (%"class.rx::SyncProviderGL"*)***
  %23 = load void (%"class.rx::SyncProviderGL"*)**, void (%"class.rx::SyncProviderGL"*)*** %22, align 8
  %24 = getelementptr inbounds void (%"class.rx::SyncProviderGL"*)*, void (%"class.rx::SyncProviderGL"*)** %23, i64 1
  %25 = load void (%"class.rx::SyncProviderGL"*)*, void (%"class.rx::SyncProviderGL"*)** %24, align 8
  tail call void %25(%"class.rx::SyncProviderGL"* nonnull %18) #11
  br label %62

26:                                               ; preds = %2
  %27 = load %"class.rx::FunctionsGL"*, %"class.rx::FunctionsGL"** %3, align 8
  %28 = tail call zeroext i1 @_ZN2rx8nativegl24SupportsOcclusionQueriesEPKNS_11FunctionsGLE(%"class.rx::FunctionsGL"* %27) #11
  br i1 %28, label %29, label %57

29:                                               ; preds = %26
  %30 = tail call i8* @_Znwm(i64 24) #12
  %31 = bitcast %"class.rx::FunctionsGL"** %3 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = bitcast i8* %30 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN2rx19SyncProviderGLQueryE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %33, align 8
  %34 = getelementptr inbounds i8, i8* %30, i64 8
  %35 = bitcast i8* %34 to i64*
  store i64 %32, i64* %35, align 8
  %36 = getelementptr inbounds i8, i8* %30, i64 16
  %37 = bitcast i8* %36 to i32*
  store i32 0, i32* %37, align 8
  %38 = getelementptr inbounds %"class.rx::SyncQueryGL", %"class.rx::SyncQueryGL"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %39 = load %"class.rx::SyncProviderGL"*, %"class.rx::SyncProviderGL"** %38, align 8
  %40 = bitcast %"class.rx::SyncProviderGL"** %38 to i8**
  store i8* %30, i8** %40, align 8
  %41 = icmp eq %"class.rx::SyncProviderGL"* %39, null
  %42 = bitcast i8* %30 to %"class.rx::SyncProviderGL"*
  br i1 %41, label %49, label %43

43:                                               ; preds = %29
  %44 = bitcast %"class.rx::SyncProviderGL"* %39 to void (%"class.rx::SyncProviderGL"*)***
  %45 = load void (%"class.rx::SyncProviderGL"*)**, void (%"class.rx::SyncProviderGL"*)*** %44, align 8
  %46 = getelementptr inbounds void (%"class.rx::SyncProviderGL"*)*, void (%"class.rx::SyncProviderGL"*)** %45, i64 1
  %47 = load void (%"class.rx::SyncProviderGL"*)*, void (%"class.rx::SyncProviderGL"*)** %46, align 8
  tail call void %47(%"class.rx::SyncProviderGL"* nonnull %39) #11
  %48 = load %"class.rx::SyncProviderGL"*, %"class.rx::SyncProviderGL"** %38, align 8
  br label %49

49:                                               ; preds = %29, %43
  %50 = phi %"class.rx::SyncProviderGL"* [ %42, %29 ], [ %48, %43 ]
  %51 = bitcast %"class.rx::SyncProviderGL"* %50 to i32 (%"class.rx::SyncProviderGL"*, %"class.gl::Context"*, i8)***
  %52 = load i32 (%"class.rx::SyncProviderGL"*, %"class.gl::Context"*, i8)**, i32 (%"class.rx::SyncProviderGL"*, %"class.gl::Context"*, i8)*** %51, align 8
  %53 = getelementptr inbounds i32 (%"class.rx::SyncProviderGL"*, %"class.gl::Context"*, i8)*, i32 (%"class.rx::SyncProviderGL"*, %"class.gl::Context"*, i8)** %52, i64 2
  %54 = load i32 (%"class.rx::SyncProviderGL"*, %"class.gl::Context"*, i8)*, i32 (%"class.rx::SyncProviderGL"*, %"class.gl::Context"*, i8)** %53, align 8
  %55 = tail call i32 %54(%"class.rx::SyncProviderGL"* %50, %"class.gl::Context"* %1, i8 zeroext 0) #11
  %56 = icmp eq i32 %55, 1
  br i1 %56, label %63, label %62

57:                                               ; preds = %26
  %58 = getelementptr inbounds %"class.gl::Context", %"class.gl::Context"* %1, i64 0, i32 11, i32 0, i32 0, i32 0
  %59 = bitcast %"class.rx::ContextImpl"** %58 to %"class.rx::ContextGL"**
  %60 = load %"class.rx::ContextGL"*, %"class.rx::ContextGL"** %59, align 8
  %61 = getelementptr inbounds %"class.rx::ContextGL", %"class.rx::ContextGL"* %60, i64 0, i32 0
  tail call void @_ZN2rx11ContextImpl11handleErrorEjPKcS2_S2_j(%"class.rx::ContextImpl"* %61, i32 1282, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__func__._ZN2rx11SyncQueryGL3endEPKN2gl7ContextE, i64 0, i64 0), i32 344) #11
  br label %63

62:                                               ; preds = %49, %21, %6
  br label %63

63:                                               ; preds = %49, %62, %57
  %64 = phi i32 [ 0, %62 ], [ 1, %49 ], [ 1, %57 ]
  ret i32 %64
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

declare void @_ZN2rx11ContextImpl11handleErrorEjPKcS2_S2_j(%"class.rx::ContextImpl"*, i32, i8*, i8*, i8*, i32) local_unnamed_addr #5

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZN2rx11SyncQueryGL12queryCounterEPKN2gl7ContextE(%"class.rx::SyncQueryGL"* nocapture readnone, %"class.gl::Context"* nocapture readnone) unnamed_addr #2 align 2 {
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2rx11SyncQueryGL9getResultEPKN2gl7ContextEPi(%"class.rx::SyncQueryGL"*, %"class.gl::Context"*, i32* nocapture) unnamed_addr #4 align 2 {
  %4 = getelementptr inbounds %"class.rx::SyncQueryGL", %"class.rx::SyncQueryGL"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %5 = load %"class.rx::SyncProviderGL"*, %"class.rx::SyncProviderGL"** %4, align 8
  %6 = icmp eq %"class.rx::SyncProviderGL"* %5, null
  br i1 %6, label %26, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.rx::SyncQueryGL", %"class.rx::SyncQueryGL"* %0, i64 0, i32 4
  %9 = bitcast %"class.rx::SyncProviderGL"* %5 to i32 (%"class.rx::SyncProviderGL"*, %"class.gl::Context"*, i1, i8*)***
  %10 = load i32 (%"class.rx::SyncProviderGL"*, %"class.gl::Context"*, i1, i8*)**, i32 (%"class.rx::SyncProviderGL"*, %"class.gl::Context"*, i1, i8*)*** %9, align 8
  %11 = getelementptr inbounds i32 (%"class.rx::SyncProviderGL"*, %"class.gl::Context"*, i1, i8*)*, i32 (%"class.rx::SyncProviderGL"*, %"class.gl::Context"*, i1, i8*)** %10, i64 3
  %12 = load i32 (%"class.rx::SyncProviderGL"*, %"class.gl::Context"*, i1, i8*)*, i32 (%"class.rx::SyncProviderGL"*, %"class.gl::Context"*, i1, i8*)** %11, align 8
  %13 = tail call i32 %12(%"class.rx::SyncProviderGL"* nonnull %5, %"class.gl::Context"* %1, i1 zeroext true, i8* %8) #11
  %14 = icmp eq i32 %13, 1
  br i1 %14, label %30, label %15

15:                                               ; preds = %7
  %16 = load i8, i8* %8, align 8, !range !2
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %26, label %18

18:                                               ; preds = %15
  %19 = load %"class.rx::SyncProviderGL"*, %"class.rx::SyncProviderGL"** %4, align 8
  store %"class.rx::SyncProviderGL"* null, %"class.rx::SyncProviderGL"** %4, align 8
  %20 = icmp eq %"class.rx::SyncProviderGL"* %19, null
  br i1 %20, label %26, label %21

21:                                               ; preds = %18
  %22 = bitcast %"class.rx::SyncProviderGL"* %19 to void (%"class.rx::SyncProviderGL"*)***
  %23 = load void (%"class.rx::SyncProviderGL"*)**, void (%"class.rx::SyncProviderGL"*)*** %22, align 8
  %24 = getelementptr inbounds void (%"class.rx::SyncProviderGL"*)*, void (%"class.rx::SyncProviderGL"*)** %23, i64 1
  %25 = load void (%"class.rx::SyncProviderGL"*)*, void (%"class.rx::SyncProviderGL"*)** %24, align 8
  tail call void %25(%"class.rx::SyncProviderGL"* nonnull %19) #11
  br label %26

26:                                               ; preds = %21, %18, %15, %3
  %27 = getelementptr inbounds %"class.rx::SyncQueryGL", %"class.rx::SyncQueryGL"* %0, i64 0, i32 4
  %28 = load i8, i8* %27, align 8, !range !2
  %29 = zext i8 %28 to i32
  store i32 %29, i32* %2, align 4
  br label %30

30:                                               ; preds = %7, %26
  %31 = phi i32 [ 0, %26 ], [ 1, %7 ]
  ret i32 %31
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2rx11SyncQueryGL9getResultEPKN2gl7ContextEPj(%"class.rx::SyncQueryGL"*, %"class.gl::Context"*, i32* nocapture) unnamed_addr #4 align 2 {
  %4 = getelementptr inbounds %"class.rx::SyncQueryGL", %"class.rx::SyncQueryGL"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %5 = load %"class.rx::SyncProviderGL"*, %"class.rx::SyncProviderGL"** %4, align 8
  %6 = icmp eq %"class.rx::SyncProviderGL"* %5, null
  br i1 %6, label %26, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.rx::SyncQueryGL", %"class.rx::SyncQueryGL"* %0, i64 0, i32 4
  %9 = bitcast %"class.rx::SyncProviderGL"* %5 to i32 (%"class.rx::SyncProviderGL"*, %"class.gl::Context"*, i1, i8*)***
  %10 = load i32 (%"class.rx::SyncProviderGL"*, %"class.gl::Context"*, i1, i8*)**, i32 (%"class.rx::SyncProviderGL"*, %"class.gl::Context"*, i1, i8*)*** %9, align 8
  %11 = getelementptr inbounds i32 (%"class.rx::SyncProviderGL"*, %"class.gl::Context"*, i1, i8*)*, i32 (%"class.rx::SyncProviderGL"*, %"class.gl::Context"*, i1, i8*)** %10, i64 3
  %12 = load i32 (%"class.rx::SyncProviderGL"*, %"class.gl::Context"*, i1, i8*)*, i32 (%"class.rx::SyncProviderGL"*, %"class.gl::Context"*, i1, i8*)** %11, align 8
  %13 = tail call i32 %12(%"class.rx::SyncProviderGL"* nonnull %5, %"class.gl::Context"* %1, i1 zeroext true, i8* %8) #11
  %14 = icmp eq i32 %13, 1
  br i1 %14, label %30, label %15

15:                                               ; preds = %7
  %16 = load i8, i8* %8, align 8, !range !2
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %26, label %18

18:                                               ; preds = %15
  %19 = load %"class.rx::SyncProviderGL"*, %"class.rx::SyncProviderGL"** %4, align 8
  store %"class.rx::SyncProviderGL"* null, %"class.rx::SyncProviderGL"** %4, align 8
  %20 = icmp eq %"class.rx::SyncProviderGL"* %19, null
  br i1 %20, label %26, label %21

21:                                               ; preds = %18
  %22 = bitcast %"class.rx::SyncProviderGL"* %19 to void (%"class.rx::SyncProviderGL"*)***
  %23 = load void (%"class.rx::SyncProviderGL"*)**, void (%"class.rx::SyncProviderGL"*)*** %22, align 8
  %24 = getelementptr inbounds void (%"class.rx::SyncProviderGL"*)*, void (%"class.rx::SyncProviderGL"*)** %23, i64 1
  %25 = load void (%"class.rx::SyncProviderGL"*)*, void (%"class.rx::SyncProviderGL"*)** %24, align 8
  tail call void %25(%"class.rx::SyncProviderGL"* nonnull %19) #11
  br label %26

26:                                               ; preds = %21, %18, %15, %3
  %27 = getelementptr inbounds %"class.rx::SyncQueryGL", %"class.rx::SyncQueryGL"* %0, i64 0, i32 4
  %28 = load i8, i8* %27, align 8, !range !2
  %29 = zext i8 %28 to i32
  store i32 %29, i32* %2, align 4
  br label %30

30:                                               ; preds = %7, %26
  %31 = phi i32 [ 0, %26 ], [ 1, %7 ]
  ret i32 %31
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2rx11SyncQueryGL9getResultEPKN2gl7ContextEPl(%"class.rx::SyncQueryGL"*, %"class.gl::Context"*, i64* nocapture) unnamed_addr #4 align 2 {
  %4 = getelementptr inbounds %"class.rx::SyncQueryGL", %"class.rx::SyncQueryGL"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %5 = load %"class.rx::SyncProviderGL"*, %"class.rx::SyncProviderGL"** %4, align 8
  %6 = icmp eq %"class.rx::SyncProviderGL"* %5, null
  br i1 %6, label %26, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.rx::SyncQueryGL", %"class.rx::SyncQueryGL"* %0, i64 0, i32 4
  %9 = bitcast %"class.rx::SyncProviderGL"* %5 to i32 (%"class.rx::SyncProviderGL"*, %"class.gl::Context"*, i1, i8*)***
  %10 = load i32 (%"class.rx::SyncProviderGL"*, %"class.gl::Context"*, i1, i8*)**, i32 (%"class.rx::SyncProviderGL"*, %"class.gl::Context"*, i1, i8*)*** %9, align 8
  %11 = getelementptr inbounds i32 (%"class.rx::SyncProviderGL"*, %"class.gl::Context"*, i1, i8*)*, i32 (%"class.rx::SyncProviderGL"*, %"class.gl::Context"*, i1, i8*)** %10, i64 3
  %12 = load i32 (%"class.rx::SyncProviderGL"*, %"class.gl::Context"*, i1, i8*)*, i32 (%"class.rx::SyncProviderGL"*, %"class.gl::Context"*, i1, i8*)** %11, align 8
  %13 = tail call i32 %12(%"class.rx::SyncProviderGL"* nonnull %5, %"class.gl::Context"* %1, i1 zeroext true, i8* %8) #11
  %14 = icmp eq i32 %13, 1
  br i1 %14, label %30, label %15

15:                                               ; preds = %7
  %16 = load i8, i8* %8, align 8, !range !2
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %26, label %18

18:                                               ; preds = %15
  %19 = load %"class.rx::SyncProviderGL"*, %"class.rx::SyncProviderGL"** %4, align 8
  store %"class.rx::SyncProviderGL"* null, %"class.rx::SyncProviderGL"** %4, align 8
  %20 = icmp eq %"class.rx::SyncProviderGL"* %19, null
  br i1 %20, label %26, label %21

21:                                               ; preds = %18
  %22 = bitcast %"class.rx::SyncProviderGL"* %19 to void (%"class.rx::SyncProviderGL"*)***
  %23 = load void (%"class.rx::SyncProviderGL"*)**, void (%"class.rx::SyncProviderGL"*)*** %22, align 8
  %24 = getelementptr inbounds void (%"class.rx::SyncProviderGL"*)*, void (%"class.rx::SyncProviderGL"*)** %23, i64 1
  %25 = load void (%"class.rx::SyncProviderGL"*)*, void (%"class.rx::SyncProviderGL"*)** %24, align 8
  tail call void %25(%"class.rx::SyncProviderGL"* nonnull %19) #11
  br label %26

26:                                               ; preds = %21, %18, %15, %3
  %27 = getelementptr inbounds %"class.rx::SyncQueryGL", %"class.rx::SyncQueryGL"* %0, i64 0, i32 4
  %28 = load i8, i8* %27, align 8, !range !2
  %29 = zext i8 %28 to i64
  store i64 %29, i64* %2, align 8
  br label %30

30:                                               ; preds = %7, %26
  %31 = phi i32 [ 0, %26 ], [ 1, %7 ]
  ret i32 %31
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2rx11SyncQueryGL9getResultEPKN2gl7ContextEPm(%"class.rx::SyncQueryGL"*, %"class.gl::Context"*, i64* nocapture) unnamed_addr #4 align 2 {
  %4 = getelementptr inbounds %"class.rx::SyncQueryGL", %"class.rx::SyncQueryGL"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %5 = load %"class.rx::SyncProviderGL"*, %"class.rx::SyncProviderGL"** %4, align 8
  %6 = icmp eq %"class.rx::SyncProviderGL"* %5, null
  br i1 %6, label %26, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.rx::SyncQueryGL", %"class.rx::SyncQueryGL"* %0, i64 0, i32 4
  %9 = bitcast %"class.rx::SyncProviderGL"* %5 to i32 (%"class.rx::SyncProviderGL"*, %"class.gl::Context"*, i1, i8*)***
  %10 = load i32 (%"class.rx::SyncProviderGL"*, %"class.gl::Context"*, i1, i8*)**, i32 (%"class.rx::SyncProviderGL"*, %"class.gl::Context"*, i1, i8*)*** %9, align 8
  %11 = getelementptr inbounds i32 (%"class.rx::SyncProviderGL"*, %"class.gl::Context"*, i1, i8*)*, i32 (%"class.rx::SyncProviderGL"*, %"class.gl::Context"*, i1, i8*)** %10, i64 3
  %12 = load i32 (%"class.rx::SyncProviderGL"*, %"class.gl::Context"*, i1, i8*)*, i32 (%"class.rx::SyncProviderGL"*, %"class.gl::Context"*, i1, i8*)** %11, align 8
  %13 = tail call i32 %12(%"class.rx::SyncProviderGL"* nonnull %5, %"class.gl::Context"* %1, i1 zeroext true, i8* %8) #11
  %14 = icmp eq i32 %13, 1
  br i1 %14, label %30, label %15

15:                                               ; preds = %7
  %16 = load i8, i8* %8, align 8, !range !2
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %26, label %18

18:                                               ; preds = %15
  %19 = load %"class.rx::SyncProviderGL"*, %"class.rx::SyncProviderGL"** %4, align 8
  store %"class.rx::SyncProviderGL"* null, %"class.rx::SyncProviderGL"** %4, align 8
  %20 = icmp eq %"class.rx::SyncProviderGL"* %19, null
  br i1 %20, label %26, label %21

21:                                               ; preds = %18
  %22 = bitcast %"class.rx::SyncProviderGL"* %19 to void (%"class.rx::SyncProviderGL"*)***
  %23 = load void (%"class.rx::SyncProviderGL"*)**, void (%"class.rx::SyncProviderGL"*)*** %22, align 8
  %24 = getelementptr inbounds void (%"class.rx::SyncProviderGL"*)*, void (%"class.rx::SyncProviderGL"*)** %23, i64 1
  %25 = load void (%"class.rx::SyncProviderGL"*)*, void (%"class.rx::SyncProviderGL"*)** %24, align 8
  tail call void %25(%"class.rx::SyncProviderGL"* nonnull %19) #11
  br label %26

26:                                               ; preds = %21, %18, %15, %3
  %27 = getelementptr inbounds %"class.rx::SyncQueryGL", %"class.rx::SyncQueryGL"* %0, i64 0, i32 4
  %28 = load i8, i8* %27, align 8, !range !2
  %29 = zext i8 %28 to i64
  store i64 %29, i64* %2, align 8
  br label %30

30:                                               ; preds = %7, %26
  %31 = phi i32 [ 0, %26 ], [ 1, %7 ]
  ret i32 %31
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2rx11SyncQueryGL17isResultAvailableEPKN2gl7ContextEPb(%"class.rx::SyncQueryGL"*, %"class.gl::Context"*, i8* nocapture) unnamed_addr #4 align 2 {
  %4 = getelementptr inbounds %"class.rx::SyncQueryGL", %"class.rx::SyncQueryGL"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %5 = load %"class.rx::SyncProviderGL"*, %"class.rx::SyncProviderGL"** %4, align 8
  %6 = icmp eq %"class.rx::SyncProviderGL"* %5, null
  br i1 %6, label %26, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.rx::SyncQueryGL", %"class.rx::SyncQueryGL"* %0, i64 0, i32 4
  %9 = bitcast %"class.rx::SyncProviderGL"* %5 to i32 (%"class.rx::SyncProviderGL"*, %"class.gl::Context"*, i1, i8*)***
  %10 = load i32 (%"class.rx::SyncProviderGL"*, %"class.gl::Context"*, i1, i8*)**, i32 (%"class.rx::SyncProviderGL"*, %"class.gl::Context"*, i1, i8*)*** %9, align 8
  %11 = getelementptr inbounds i32 (%"class.rx::SyncProviderGL"*, %"class.gl::Context"*, i1, i8*)*, i32 (%"class.rx::SyncProviderGL"*, %"class.gl::Context"*, i1, i8*)** %10, i64 3
  %12 = load i32 (%"class.rx::SyncProviderGL"*, %"class.gl::Context"*, i1, i8*)*, i32 (%"class.rx::SyncProviderGL"*, %"class.gl::Context"*, i1, i8*)** %11, align 8
  %13 = tail call i32 %12(%"class.rx::SyncProviderGL"* nonnull %5, %"class.gl::Context"* %1, i1 zeroext false, i8* %8) #11
  %14 = icmp eq i32 %13, 1
  br i1 %14, label %29, label %15

15:                                               ; preds = %7
  %16 = load i8, i8* %8, align 8, !range !2
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %26, label %18

18:                                               ; preds = %15
  %19 = load %"class.rx::SyncProviderGL"*, %"class.rx::SyncProviderGL"** %4, align 8
  store %"class.rx::SyncProviderGL"* null, %"class.rx::SyncProviderGL"** %4, align 8
  %20 = icmp eq %"class.rx::SyncProviderGL"* %19, null
  br i1 %20, label %26, label %21

21:                                               ; preds = %18
  %22 = bitcast %"class.rx::SyncProviderGL"* %19 to void (%"class.rx::SyncProviderGL"*)***
  %23 = load void (%"class.rx::SyncProviderGL"*)**, void (%"class.rx::SyncProviderGL"*)*** %22, align 8
  %24 = getelementptr inbounds void (%"class.rx::SyncProviderGL"*)*, void (%"class.rx::SyncProviderGL"*)** %23, i64 1
  %25 = load void (%"class.rx::SyncProviderGL"*)*, void (%"class.rx::SyncProviderGL"*)** %24, align 8
  tail call void %25(%"class.rx::SyncProviderGL"* nonnull %19) #11
  br label %26

26:                                               ; preds = %3, %15, %18, %21
  %27 = getelementptr inbounds %"class.rx::SyncQueryGL", %"class.rx::SyncQueryGL"* %0, i64 0, i32 4
  %28 = load i8, i8* %27, align 8, !range !2
  store i8 %28, i8* %2, align 1
  br label %29

29:                                               ; preds = %7, %26
  %30 = phi i32 [ 0, %26 ], [ 1, %7 ]
  ret i32 %30
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2rx11SyncQueryGL5flushEPKN2gl7ContextEb(%"class.rx::SyncQueryGL"*, %"class.gl::Context"*, i1 zeroext) local_unnamed_addr #4 align 2 {
  %4 = getelementptr inbounds %"class.rx::SyncQueryGL", %"class.rx::SyncQueryGL"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %5 = load %"class.rx::SyncProviderGL"*, %"class.rx::SyncProviderGL"** %4, align 8
  %6 = icmp eq %"class.rx::SyncProviderGL"* %5, null
  br i1 %6, label %26, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.rx::SyncQueryGL", %"class.rx::SyncQueryGL"* %0, i64 0, i32 4
  %9 = bitcast %"class.rx::SyncProviderGL"* %5 to i32 (%"class.rx::SyncProviderGL"*, %"class.gl::Context"*, i1, i8*)***
  %10 = load i32 (%"class.rx::SyncProviderGL"*, %"class.gl::Context"*, i1, i8*)**, i32 (%"class.rx::SyncProviderGL"*, %"class.gl::Context"*, i1, i8*)*** %9, align 8
  %11 = getelementptr inbounds i32 (%"class.rx::SyncProviderGL"*, %"class.gl::Context"*, i1, i8*)*, i32 (%"class.rx::SyncProviderGL"*, %"class.gl::Context"*, i1, i8*)** %10, i64 3
  %12 = load i32 (%"class.rx::SyncProviderGL"*, %"class.gl::Context"*, i1, i8*)*, i32 (%"class.rx::SyncProviderGL"*, %"class.gl::Context"*, i1, i8*)** %11, align 8
  %13 = tail call i32 %12(%"class.rx::SyncProviderGL"* nonnull %5, %"class.gl::Context"* %1, i1 zeroext %2, i8* %8) #11
  %14 = icmp eq i32 %13, 1
  br i1 %14, label %26, label %15

15:                                               ; preds = %7
  %16 = load i8, i8* %8, align 8, !range !2
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %26, label %18

18:                                               ; preds = %15
  %19 = load %"class.rx::SyncProviderGL"*, %"class.rx::SyncProviderGL"** %4, align 8
  store %"class.rx::SyncProviderGL"* null, %"class.rx::SyncProviderGL"** %4, align 8
  %20 = icmp eq %"class.rx::SyncProviderGL"* %19, null
  br i1 %20, label %26, label %21

21:                                               ; preds = %18
  %22 = bitcast %"class.rx::SyncProviderGL"* %19 to void (%"class.rx::SyncProviderGL"*)***
  %23 = load void (%"class.rx::SyncProviderGL"*)**, void (%"class.rx::SyncProviderGL"*)*** %22, align 8
  %24 = getelementptr inbounds void (%"class.rx::SyncProviderGL"*)*, void (%"class.rx::SyncProviderGL"*)** %23, i64 1
  %25 = load void (%"class.rx::SyncProviderGL"*)*, void (%"class.rx::SyncProviderGL"*)** %24, align 8
  tail call void %25(%"class.rx::SyncProviderGL"* nonnull %19) #11
  br label %26

26:                                               ; preds = %7, %21, %18, %15, %3
  %27 = phi i32 [ 1, %7 ], [ 0, %3 ], [ 0, %15 ], [ 0, %18 ], [ 0, %21 ]
  ret i32 %27
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZN2rx11SyncQueryGL5pauseEPKN2gl7ContextE(%"class.rx::SyncQueryGL"* nocapture readnone, %"class.gl::Context"* nocapture readnone) unnamed_addr #2 align 2 {
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZN2rx11SyncQueryGL6resumeEPKN2gl7ContextE(%"class.rx::SyncQueryGL"* nocapture readnone, %"class.gl::Context"* nocapture readnone) unnamed_addr #2 align 2 {
  ret i32 0
}

declare void @__cxa_pure_virtual() unnamed_addr

declare void @_ZN2rx9QueryImpl9onDestroyEPKN2gl7ContextE(%"class.rx::QueryImpl"*, %"class.gl::Context"*) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2rx18SyncProviderGLSyncD2Ev(%"class.rx::SyncProviderGLSync"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"class.rx::SyncProviderGLSync", %"class.rx::SyncProviderGLSync"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN2rx18SyncProviderGLSyncE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.rx::SyncProviderGLSync", %"class.rx::SyncProviderGLSync"* %0, i64 0, i32 1
  %4 = bitcast %"class.rx::FunctionsGL"** %3 to %"class.rx::DispatchTableGL"**
  %5 = load %"class.rx::DispatchTableGL"*, %"class.rx::DispatchTableGL"** %4, align 8
  %6 = getelementptr inbounds %"class.rx::DispatchTableGL", %"class.rx::DispatchTableGL"* %5, i64 0, i32 306
  %7 = load void (%struct.__GLsync*)*, void (%struct.__GLsync*)** %6, align 8
  %8 = getelementptr inbounds %"class.rx::SyncProviderGLSync", %"class.rx::SyncProviderGLSync"* %0, i64 0, i32 2
  %9 = load %struct.__GLsync*, %struct.__GLsync** %8, align 8
  tail call void %7(%struct.__GLsync* %9) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2rx18SyncProviderGLSyncD0Ev(%"class.rx::SyncProviderGLSync"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"class.rx::SyncProviderGLSync", %"class.rx::SyncProviderGLSync"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN2rx18SyncProviderGLSyncE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.rx::SyncProviderGLSync", %"class.rx::SyncProviderGLSync"* %0, i64 0, i32 1
  %4 = bitcast %"class.rx::FunctionsGL"** %3 to %"class.rx::DispatchTableGL"**
  %5 = load %"class.rx::DispatchTableGL"*, %"class.rx::DispatchTableGL"** %4, align 8
  %6 = getelementptr inbounds %"class.rx::DispatchTableGL", %"class.rx::DispatchTableGL"* %5, i64 0, i32 306
  %7 = load void (%struct.__GLsync*)*, void (%struct.__GLsync*)** %6, align 8
  %8 = getelementptr inbounds %"class.rx::SyncProviderGLSync", %"class.rx::SyncProviderGLSync"* %0, i64 0, i32 2
  %9 = load %struct.__GLsync*, %struct.__GLsync** %8, align 8
  tail call void %7(%struct.__GLsync* %9) #11
  %10 = bitcast %"class.rx::SyncProviderGLSync"* %0 to i8*
  tail call void @_ZdlPv(i8* %10) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN2rx14SyncProviderGL4initEPKN2gl7ContextENS1_9QueryTypeE(%"class.rx::SyncProviderGL"*, %"class.gl::Context"*, i8 zeroext) unnamed_addr #4 comdat align 2 {
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN2rx18SyncProviderGLSync5flushEPKN2gl7ContextEbPb(%"class.rx::SyncProviderGLSync"*, %"class.gl::Context"*, i1 zeroext, i8*) unnamed_addr #4 comdat align 2 {
  %5 = alloca i32, align 4
  br i1 %2, label %6, label %15

6:                                                ; preds = %4
  %7 = getelementptr inbounds %"class.rx::SyncProviderGLSync", %"class.rx::SyncProviderGLSync"* %0, i64 0, i32 1
  %8 = bitcast %"class.rx::FunctionsGL"** %7 to %"class.rx::DispatchTableGL"**
  %9 = load %"class.rx::DispatchTableGL"*, %"class.rx::DispatchTableGL"** %8, align 8
  %10 = getelementptr inbounds %"class.rx::DispatchTableGL", %"class.rx::DispatchTableGL"* %9, i64 0, i32 305
  %11 = load i32 (%struct.__GLsync*, i32, i64)*, i32 (%struct.__GLsync*, i32, i64)** %10, align 8
  %12 = getelementptr inbounds %"class.rx::SyncProviderGLSync", %"class.rx::SyncProviderGLSync"* %0, i64 0, i32 2
  %13 = load %struct.__GLsync*, %struct.__GLsync** %12, align 8
  %14 = tail call i32 %11(%struct.__GLsync* %13, i32 0, i64 0) #11
  store i8 1, i8* %3, align 1
  br label %27

15:                                               ; preds = %4
  %16 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16) #11
  store i32 0, i32* %5, align 4
  %17 = getelementptr inbounds %"class.rx::SyncProviderGLSync", %"class.rx::SyncProviderGLSync"* %0, i64 0, i32 1
  %18 = bitcast %"class.rx::FunctionsGL"** %17 to %"class.rx::DispatchTableGL"**
  %19 = load %"class.rx::DispatchTableGL"*, %"class.rx::DispatchTableGL"** %18, align 8
  %20 = getelementptr inbounds %"class.rx::DispatchTableGL", %"class.rx::DispatchTableGL"* %19, i64 0, i32 316
  %21 = load void (%struct.__GLsync*, i32, i32, i32*, i32*)*, void (%struct.__GLsync*, i32, i32, i32*, i32*)** %20, align 8
  %22 = getelementptr inbounds %"class.rx::SyncProviderGLSync", %"class.rx::SyncProviderGLSync"* %0, i64 0, i32 2
  %23 = load %struct.__GLsync*, %struct.__GLsync** %22, align 8
  call void %21(%struct.__GLsync* %23, i32 37140, i32 1, i32* null, i32* nonnull %5) #11
  %24 = load i32, i32* %5, align 4
  %25 = icmp eq i32 %24, 37145
  %26 = zext i1 %25 to i8
  store i8 %26, i8* %3, align 1
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16) #11
  br label %27

27:                                               ; preds = %15, %6
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2rx19SyncProviderGLQueryD2Ev(%"class.rx::SyncProviderGLQuery"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"class.rx::SyncProviderGLQuery", %"class.rx::SyncProviderGLQuery"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN2rx19SyncProviderGLQueryE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.rx::SyncProviderGLQuery", %"class.rx::SyncProviderGLQuery"* %0, i64 0, i32 1
  %4 = bitcast %"class.rx::FunctionsGL"** %3 to %"class.rx::DispatchTableGL"**
  %5 = load %"class.rx::DispatchTableGL"*, %"class.rx::DispatchTableGL"** %4, align 8
  %6 = getelementptr inbounds %"class.rx::DispatchTableGL", %"class.rx::DispatchTableGL"* %5, i64 0, i32 96
  %7 = load void (i32, i32*)*, void (i32, i32*)** %6, align 8
  %8 = getelementptr inbounds %"class.rx::SyncProviderGLQuery", %"class.rx::SyncProviderGLQuery"* %0, i64 0, i32 2
  tail call void %7(i32 1, i32* %8) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2rx19SyncProviderGLQueryD0Ev(%"class.rx::SyncProviderGLQuery"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"class.rx::SyncProviderGLQuery", %"class.rx::SyncProviderGLQuery"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN2rx19SyncProviderGLQueryE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.rx::SyncProviderGLQuery", %"class.rx::SyncProviderGLQuery"* %0, i64 0, i32 1
  %4 = bitcast %"class.rx::FunctionsGL"** %3 to %"class.rx::DispatchTableGL"**
  %5 = load %"class.rx::DispatchTableGL"*, %"class.rx::DispatchTableGL"** %4, align 8
  %6 = getelementptr inbounds %"class.rx::DispatchTableGL", %"class.rx::DispatchTableGL"* %5, i64 0, i32 96
  %7 = load void (i32, i32*)*, void (i32, i32*)** %6, align 8
  %8 = getelementptr inbounds %"class.rx::SyncProviderGLQuery", %"class.rx::SyncProviderGLQuery"* %0, i64 0, i32 2
  tail call void %7(i32 1, i32* %8) #11
  %9 = bitcast %"class.rx::SyncProviderGLQuery"* %0 to i8*
  tail call void @_ZdlPv(i8* %9) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN2rx19SyncProviderGLQuery4initEPKN2gl7ContextENS1_9QueryTypeE(%"class.rx::SyncProviderGLQuery"*, %"class.gl::Context"*, i8 zeroext) unnamed_addr #4 comdat align 2 {
  %4 = tail call %"class.rx::StateManagerGL"* @_ZN2rx17GetStateManagerGLEPKN2gl7ContextE(%"class.gl::Context"* %1) #11
  %5 = getelementptr inbounds %"class.rx::SyncProviderGLQuery", %"class.rx::SyncProviderGLQuery"* %0, i64 0, i32 1
  %6 = bitcast %"class.rx::FunctionsGL"** %5 to %"class.rx::DispatchTableGL"**
  %7 = load %"class.rx::DispatchTableGL"*, %"class.rx::DispatchTableGL"** %6, align 8
  %8 = getelementptr inbounds %"class.rx::DispatchTableGL", %"class.rx::DispatchTableGL"* %7, i64 0, i32 99
  %9 = load void (i32, i32*)*, void (i32, i32*)** %8, align 8
  %10 = getelementptr inbounds %"class.rx::SyncProviderGLQuery", %"class.rx::SyncProviderGLQuery"* %0, i64 0, i32 2
  tail call void %9(i32 1, i32* %10) #11
  %11 = tail call i32 @_ZN2rx14StateManagerGL10pauseQueryEPKN2gl7ContextENS1_9QueryTypeE(%"class.rx::StateManagerGL"* %4, %"class.gl::Context"* %1, i8 zeroext %2) #11
  %12 = icmp eq i32 %11, 1
  br i1 %12, label %24, label %13

13:                                               ; preds = %3
  %14 = load %"class.rx::DispatchTableGL"*, %"class.rx::DispatchTableGL"** %6, align 8
  %15 = getelementptr inbounds %"class.rx::DispatchTableGL", %"class.rx::DispatchTableGL"* %14, i64 0, i32 91
  %16 = load void (i32, i32)*, void (i32, i32)** %15, align 8
  %17 = tail call i32 @_ZN2gl8ToGLenumENS_9QueryTypeE(i8 zeroext %2) #11
  %18 = load i32, i32* %10, align 8
  tail call void %16(i32 %17, i32 %18) #11
  %19 = load %"class.rx::DispatchTableGL"*, %"class.rx::DispatchTableGL"** %6, align 8
  %20 = getelementptr inbounds %"class.rx::DispatchTableGL", %"class.rx::DispatchTableGL"* %19, i64 0, i32 97
  %21 = load void (i32)*, void (i32)** %20, align 8
  %22 = tail call i32 @_ZN2gl8ToGLenumENS_9QueryTypeE(i8 zeroext %2) #11
  tail call void %21(i32 %22) #11
  %23 = tail call i32 @_ZN2rx14StateManagerGL11resumeQueryEPKN2gl7ContextENS1_9QueryTypeE(%"class.rx::StateManagerGL"* %4, %"class.gl::Context"* %1, i8 zeroext %2) #11
  br label %24

24:                                               ; preds = %3, %13
  %25 = phi i32 [ %23, %13 ], [ 1, %3 ]
  ret i32 %25
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN2rx19SyncProviderGLQuery5flushEPKN2gl7ContextEbPb(%"class.rx::SyncProviderGLQuery"*, %"class.gl::Context"*, i1 zeroext, i8*) unnamed_addr #4 comdat align 2 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  br i1 %2, label %7, label %16

7:                                                ; preds = %4
  %8 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #11
  store i32 0, i32* %5, align 4
  %9 = getelementptr inbounds %"class.rx::SyncProviderGLQuery", %"class.rx::SyncProviderGLQuery"* %0, i64 0, i32 1
  %10 = bitcast %"class.rx::FunctionsGL"** %9 to %"class.rx::DispatchTableGL"**
  %11 = load %"class.rx::DispatchTableGL"*, %"class.rx::DispatchTableGL"** %10, align 8
  %12 = getelementptr inbounds %"class.rx::DispatchTableGL", %"class.rx::DispatchTableGL"* %11, i64 0, i32 103
  %13 = load void (i32, i32, i32*)*, void (i32, i32, i32*)** %12, align 8
  %14 = getelementptr inbounds %"class.rx::SyncProviderGLQuery", %"class.rx::SyncProviderGLQuery"* %0, i64 0, i32 2
  %15 = load i32, i32* %14, align 8
  call void %13(i32 %15, i32 34918, i32* nonnull %5) #11
  br label %28

16:                                               ; preds = %4
  %17 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %17) #11
  store i32 0, i32* %6, align 4
  %18 = getelementptr inbounds %"class.rx::SyncProviderGLQuery", %"class.rx::SyncProviderGLQuery"* %0, i64 0, i32 1
  %19 = bitcast %"class.rx::FunctionsGL"** %18 to %"class.rx::DispatchTableGL"**
  %20 = load %"class.rx::DispatchTableGL"*, %"class.rx::DispatchTableGL"** %19, align 8
  %21 = getelementptr inbounds %"class.rx::DispatchTableGL", %"class.rx::DispatchTableGL"* %20, i64 0, i32 103
  %22 = load void (i32, i32, i32*)*, void (i32, i32, i32*)** %21, align 8
  %23 = getelementptr inbounds %"class.rx::SyncProviderGLQuery", %"class.rx::SyncProviderGLQuery"* %0, i64 0, i32 2
  %24 = load i32, i32* %23, align 8
  call void %22(i32 %24, i32 34919, i32* nonnull %6) #11
  %25 = load i32, i32* %6, align 4
  %26 = icmp eq i32 %25, 1
  %27 = zext i1 %26 to i8
  br label %28

28:                                               ; preds = %16, %7
  %29 = phi i8 [ %27, %16 ], [ 1, %7 ]
  %30 = phi i8* [ %17, %16 ], [ %8, %7 ]
  store i8 %29, i8* %3, align 1
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %30) #11
  ret i32 0
}

declare %"class.rx::StateManagerGL"* @_ZN2rx17GetStateManagerGLEPKN2gl7ContextE(%"class.gl::Context"*) local_unnamed_addr #5

declare i32 @_ZN2rx14StateManagerGL10pauseQueryEPKN2gl7ContextENS1_9QueryTypeE(%"class.rx::StateManagerGL"*, %"class.gl::Context"*, i8 zeroext) local_unnamed_addr #5

declare i32 @_ZN2gl8ToGLenumENS_9QueryTypeE(i8 zeroext) local_unnamed_addr #5

declare i32 @_ZN2rx14StateManagerGL11resumeQueryEPKN2gl7ContextENS1_9QueryTypeE(%"class.rx::StateManagerGL"*, %"class.gl::Context"*, i8 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__15dequeIjNS_9allocatorIjEEE19__add_back_capacityEv(%"class.std::__1::deque.662"*) local_unnamed_addr #4 comdat align 2 {
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca %"struct.std::__1::__split_buffer.717", align 8
  %5 = getelementptr inbounds %"class.std::__1::deque.662", %"class.std::__1::deque.662"* %0, i64 0, i32 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = icmp ugt i64 %6, 1023
  br i1 %7, label %8, label %162

8:                                                ; preds = %1
  %9 = add i64 %6, -1024
  store i64 %9, i64* %5, align 8
  %10 = getelementptr inbounds %"class.std::__1::deque.662", %"class.std::__1::deque.662"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = load i32**, i32*** %10, align 8
  %12 = bitcast i32** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds i32*, i32** %11, i64 1
  store i32** %14, i32*** %10, align 8
  %15 = getelementptr inbounds %"class.std::__1::deque.662", %"class.std::__1::deque.662"* %0, i64 0, i32 0, i32 0, i32 2
  %16 = load i32**, i32*** %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::deque.662", %"class.std::__1::deque.662"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %18 = load i32**, i32*** %17, align 8
  %19 = icmp eq i32** %16, %18
  %20 = ptrtoint i32** %18 to i64
  %21 = bitcast i32** %16 to i64*
  br i1 %19, label %22, label %158

22:                                               ; preds = %8
  %23 = getelementptr inbounds %"class.std::__1::deque.662", %"class.std::__1::deque.662"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load i32**, i32*** %23, align 8
  %25 = icmp ugt i32** %14, %24
  %26 = ptrtoint i32** %24 to i64
  br i1 %25, label %27, label %47

27:                                               ; preds = %22
  %28 = ptrtoint i32** %14 to i64
  %29 = sub i64 %28, %26
  %30 = ashr exact i64 %29, 3
  %31 = add nsw i64 %30, 1
  %32 = sdiv i64 %31, -2
  %33 = getelementptr inbounds i32*, i32** %14, i64 %32
  %34 = ptrtoint i32** %16 to i64
  %35 = sub i64 %34, %28
  %36 = ashr exact i64 %35, 3
  %37 = icmp eq i64 %35, 0
  br i1 %37, label %42, label %38

38:                                               ; preds = %27
  %39 = bitcast i32** %33 to i8*
  %40 = bitcast i32** %14 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %39, i8* align 8 %40, i64 %35, i1 false) #11
  %41 = load i32**, i32*** %10, align 8
  br label %42

42:                                               ; preds = %38, %27
  %43 = phi i32** [ %14, %27 ], [ %41, %38 ]
  %44 = getelementptr inbounds i32*, i32** %33, i64 %36
  store i32** %44, i32*** %15, align 8
  %45 = getelementptr inbounds i32*, i32** %43, i64 %32
  store i32** %45, i32*** %10, align 8
  %46 = bitcast i32** %44 to i64*
  br label %158

47:                                               ; preds = %22
  %48 = bitcast i32*** %17 to i64*
  %49 = bitcast %"class.std::__1::deque.662"* %0 to i64*
  %50 = sub i64 %20, %26
  %51 = ashr exact i64 %50, 2
  %52 = icmp eq i64 %50, 0
  %53 = select i1 %52, i64 1, i64 %51
  %54 = icmp ugt i64 %53, 2305843009213693951
  br i1 %54, label %55, label %56

55:                                               ; preds = %47
  tail call void @abort() #10
  unreachable

56:                                               ; preds = %47
  %57 = lshr i64 %53, 2
  %58 = shl i64 %53, 3
  %59 = tail call i8* @_Znwm(i64 %58) #12
  %60 = bitcast i8* %59 to i32**
  %61 = ptrtoint i8* %59 to i64
  %62 = getelementptr inbounds i32*, i32** %60, i64 %57
  %63 = ptrtoint i32** %62 to i64
  %64 = getelementptr inbounds i32*, i32** %60, i64 %53
  %65 = ptrtoint i32** %64 to i64
  %66 = ptrtoint i32** %14 to i64
  %67 = ptrtoint i32** %16 to i64
  %68 = sub i64 %67, %66
  %69 = ashr exact i64 %68, 3
  %70 = getelementptr inbounds i32*, i32** %62, i64 %69
  %71 = icmp eq i64 %68, 0
  br i1 %71, label %147, label %72

72:                                               ; preds = %56
  %73 = add i64 %68, -8
  %74 = lshr i64 %73, 3
  %75 = add nuw nsw i64 %74, 1
  %76 = and i64 %75, 7
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %93, label %78

78:                                               ; preds = %72, %78
  %79 = phi i32** [ %86, %78 ], [ %62, %72 ]
  %80 = phi i64 [ %87, %78 ], [ %63, %72 ]
  %81 = phi i32** [ %88, %78 ], [ %14, %72 ]
  %82 = phi i64 [ %89, %78 ], [ %76, %72 ]
  %83 = bitcast i32** %81 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = inttoptr i64 %80 to i64*
  store i64 %84, i64* %85, align 8
  %86 = getelementptr inbounds i32*, i32** %79, i64 1
  %87 = ptrtoint i32** %86 to i64
  %88 = getelementptr inbounds i32*, i32** %81, i64 1
  %89 = add i64 %82, -1
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %78, !llvm.loop !3

91:                                               ; preds = %78
  %92 = ptrtoint i32** %86 to i64
  br label %93

93:                                               ; preds = %72, %91
  %94 = phi i32** [ %62, %72 ], [ %86, %91 ]
  %95 = phi i64 [ %63, %72 ], [ %92, %91 ]
  %96 = phi i32** [ %14, %72 ], [ %88, %91 ]
  %97 = icmp ult i64 %73, 56
  br i1 %97, label %144, label %98

98:                                               ; preds = %93, %98
  %99 = phi i32** [ %140, %98 ], [ %94, %93 ]
  %100 = phi i64 [ %141, %98 ], [ %95, %93 ]
  %101 = phi i32** [ %142, %98 ], [ %96, %93 ]
  %102 = bitcast i32** %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = inttoptr i64 %100 to i64*
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds i32*, i32** %99, i64 1
  %106 = getelementptr inbounds i32*, i32** %101, i64 1
  %107 = bitcast i32** %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = bitcast i32** %105 to i64*
  store i64 %108, i64* %109, align 8
  %110 = getelementptr inbounds i32*, i32** %99, i64 2
  %111 = getelementptr inbounds i32*, i32** %101, i64 2
  %112 = bitcast i32** %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast i32** %110 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds i32*, i32** %99, i64 3
  %116 = getelementptr inbounds i32*, i32** %101, i64 3
  %117 = bitcast i32** %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast i32** %115 to i64*
  store i64 %118, i64* %119, align 8
  %120 = getelementptr inbounds i32*, i32** %99, i64 4
  %121 = getelementptr inbounds i32*, i32** %101, i64 4
  %122 = bitcast i32** %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = bitcast i32** %120 to i64*
  store i64 %123, i64* %124, align 8
  %125 = getelementptr inbounds i32*, i32** %99, i64 5
  %126 = getelementptr inbounds i32*, i32** %101, i64 5
  %127 = bitcast i32** %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = bitcast i32** %125 to i64*
  store i64 %128, i64* %129, align 8
  %130 = getelementptr inbounds i32*, i32** %99, i64 6
  %131 = getelementptr inbounds i32*, i32** %101, i64 6
  %132 = bitcast i32** %131 to i64*
  %133 = load i64, i64* %132, align 8
  %134 = bitcast i32** %130 to i64*
  store i64 %133, i64* %134, align 8
  %135 = getelementptr inbounds i32*, i32** %99, i64 7
  %136 = getelementptr inbounds i32*, i32** %101, i64 7
  %137 = bitcast i32** %136 to i64*
  %138 = load i64, i64* %137, align 8
  %139 = bitcast i32** %135 to i64*
  store i64 %138, i64* %139, align 8
  %140 = getelementptr inbounds i32*, i32** %99, i64 8
  %141 = ptrtoint i32** %140 to i64
  %142 = getelementptr inbounds i32*, i32** %101, i64 8
  %143 = icmp eq i32** %70, %140
  br i1 %143, label %144, label %98

144:                                              ; preds = %98, %93
  %145 = ptrtoint i32** %70 to i64
  %146 = load i32**, i32*** %23, align 8
  br label %147

147:                                              ; preds = %144, %56
  %148 = phi i32** [ %146, %144 ], [ %24, %56 ]
  %149 = phi i64 [ %145, %144 ], [ %63, %56 ]
  store i64 %61, i64* %49, align 8
  %150 = bitcast i32*** %10 to i64*
  store i64 %63, i64* %150, align 8
  %151 = bitcast i32*** %15 to i64*
  store i64 %149, i64* %151, align 8
  store i64 %65, i64* %48, align 8
  %152 = icmp eq i32** %148, null
  %153 = inttoptr i64 %149 to i64*
  br i1 %152, label %158, label %154

154:                                              ; preds = %147
  %155 = bitcast i32** %148 to i8*
  tail call void @_ZdlPv(i8* %155) #12
  %156 = bitcast i32*** %15 to i64**
  %157 = load i64*, i64** %156, align 8
  br label %158

158:                                              ; preds = %8, %42, %147, %154
  %159 = phi i64* [ %157, %154 ], [ %153, %147 ], [ %46, %42 ], [ %21, %8 ]
  store i64 %13, i64* %159, align 8
  %160 = load i32**, i32*** %15, align 8
  %161 = getelementptr inbounds i32*, i32** %160, i64 1
  store i32** %161, i32*** %15, align 8
  br label %460

162:                                              ; preds = %1
  %163 = getelementptr inbounds %"class.std::__1::deque.662", %"class.std::__1::deque.662"* %0, i64 0, i32 0, i32 0
  %164 = getelementptr inbounds %"class.std::__1::deque.662", %"class.std::__1::deque.662"* %0, i64 0, i32 0, i32 0, i32 2
  %165 = bitcast i32*** %164 to i64*
  %166 = load i64, i64* %165, align 8
  %167 = getelementptr inbounds %"class.std::__1::deque.662", %"class.std::__1::deque.662"* %0, i64 0, i32 0, i32 0, i32 1
  %168 = bitcast i32*** %167 to i64*
  %169 = load i64, i64* %168, align 8
  %170 = sub i64 %166, %169
  %171 = ashr exact i64 %170, 3
  %172 = getelementptr inbounds %"class.std::__1::deque.662", %"class.std::__1::deque.662"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %173 = bitcast i32*** %172 to i64*
  %174 = load i64, i64* %173, align 8
  %175 = bitcast %"class.std::__1::deque.662"* %0 to i64*
  %176 = load i64, i64* %175, align 8
  %177 = sub i64 %174, %176
  %178 = ashr exact i64 %177, 3
  %179 = icmp ult i64 %171, %178
  %180 = inttoptr i64 %166 to i32**
  %181 = inttoptr i64 %169 to i32**
  br i1 %179, label %182, label %337

182:                                              ; preds = %162
  %183 = icmp eq i64 %174, %166
  br i1 %183, label %188, label %184

184:                                              ; preds = %182
  %185 = bitcast i32** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %185) #11
  %186 = tail call i8* @_Znwm(i64 4096) #12
  %187 = bitcast i32** %2 to i8**
  store i8* %186, i8** %187, align 8
  call void @_ZNSt3__114__split_bufferIPjNS_9allocatorIS1_EEE9push_backEOS1_(%"struct.std::__1::__split_buffer.664"* %163, i32** nonnull dereferenceable(8) %2)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %185) #11
  br label %460

188:                                              ; preds = %182
  %189 = bitcast i32** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %189) #11
  %190 = tail call i8* @_Znwm(i64 4096) #12
  %191 = bitcast i32** %3 to i8**
  store i8* %190, i8** %191, align 8
  call void @_ZNSt3__114__split_bufferIPjNS_9allocatorIS1_EEE10push_frontEOS1_(%"struct.std::__1::__split_buffer.664"* %163, i32** nonnull dereferenceable(8) %3)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %189) #11
  %192 = load i32**, i32*** %167, align 8
  %193 = bitcast i32** %192 to i64*
  %194 = load i64, i64* %193, align 8
  %195 = getelementptr inbounds i32*, i32** %192, i64 1
  store i32** %195, i32*** %167, align 8
  %196 = load i32**, i32*** %164, align 8
  %197 = load i32**, i32*** %172, align 8
  %198 = icmp eq i32** %196, %197
  %199 = ptrtoint i32** %197 to i64
  %200 = bitcast i32** %196 to i64*
  br i1 %198, label %201, label %333

201:                                              ; preds = %188
  %202 = getelementptr inbounds %"class.std::__1::deque.662", %"class.std::__1::deque.662"* %0, i64 0, i32 0, i32 0, i32 0
  %203 = load i32**, i32*** %202, align 8
  %204 = icmp ugt i32** %195, %203
  %205 = ptrtoint i32** %203 to i64
  br i1 %204, label %206, label %226

206:                                              ; preds = %201
  %207 = ptrtoint i32** %195 to i64
  %208 = sub i64 %207, %205
  %209 = ashr exact i64 %208, 3
  %210 = add nsw i64 %209, 1
  %211 = sdiv i64 %210, -2
  %212 = getelementptr inbounds i32*, i32** %195, i64 %211
  %213 = ptrtoint i32** %196 to i64
  %214 = sub i64 %213, %207
  %215 = ashr exact i64 %214, 3
  %216 = icmp eq i64 %214, 0
  br i1 %216, label %221, label %217

217:                                              ; preds = %206
  %218 = bitcast i32** %212 to i8*
  %219 = bitcast i32** %195 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %218, i8* align 8 %219, i64 %214, i1 false) #11
  %220 = load i32**, i32*** %167, align 8
  br label %221

221:                                              ; preds = %217, %206
  %222 = phi i32** [ %195, %206 ], [ %220, %217 ]
  %223 = getelementptr inbounds i32*, i32** %212, i64 %215
  store i32** %223, i32*** %164, align 8
  %224 = getelementptr inbounds i32*, i32** %222, i64 %211
  store i32** %224, i32*** %167, align 8
  %225 = bitcast i32** %223 to i64*
  br label %333

226:                                              ; preds = %201
  %227 = sub i64 %199, %205
  %228 = ashr exact i64 %227, 2
  %229 = icmp eq i64 %227, 0
  %230 = select i1 %229, i64 1, i64 %228
  %231 = icmp ugt i64 %230, 2305843009213693951
  br i1 %231, label %232, label %233

232:                                              ; preds = %226
  call void @abort() #10
  unreachable

233:                                              ; preds = %226
  %234 = lshr i64 %230, 2
  %235 = shl i64 %230, 3
  %236 = call i8* @_Znwm(i64 %235) #12
  %237 = bitcast i8* %236 to i32**
  %238 = ptrtoint i8* %236 to i64
  %239 = getelementptr inbounds i32*, i32** %237, i64 %234
  %240 = ptrtoint i32** %239 to i64
  %241 = getelementptr inbounds i32*, i32** %237, i64 %230
  %242 = ptrtoint i32** %241 to i64
  %243 = ptrtoint i32** %195 to i64
  %244 = ptrtoint i32** %196 to i64
  %245 = sub i64 %244, %243
  %246 = ashr exact i64 %245, 3
  %247 = getelementptr inbounds i32*, i32** %239, i64 %246
  %248 = icmp eq i64 %245, 0
  br i1 %248, label %324, label %249

249:                                              ; preds = %233
  %250 = add i64 %245, -8
  %251 = lshr i64 %250, 3
  %252 = add nuw nsw i64 %251, 1
  %253 = and i64 %252, 7
  %254 = icmp eq i64 %253, 0
  br i1 %254, label %270, label %255

255:                                              ; preds = %249, %255
  %256 = phi i32** [ %263, %255 ], [ %239, %249 ]
  %257 = phi i64 [ %264, %255 ], [ %240, %249 ]
  %258 = phi i32** [ %265, %255 ], [ %195, %249 ]
  %259 = phi i64 [ %266, %255 ], [ %253, %249 ]
  %260 = bitcast i32** %258 to i64*
  %261 = load i64, i64* %260, align 8
  %262 = inttoptr i64 %257 to i64*
  store i64 %261, i64* %262, align 8
  %263 = getelementptr inbounds i32*, i32** %256, i64 1
  %264 = ptrtoint i32** %263 to i64
  %265 = getelementptr inbounds i32*, i32** %258, i64 1
  %266 = add i64 %259, -1
  %267 = icmp eq i64 %266, 0
  br i1 %267, label %268, label %255, !llvm.loop !5

268:                                              ; preds = %255
  %269 = ptrtoint i32** %263 to i64
  br label %270

270:                                              ; preds = %249, %268
  %271 = phi i32** [ %239, %249 ], [ %263, %268 ]
  %272 = phi i64 [ %240, %249 ], [ %269, %268 ]
  %273 = phi i32** [ %195, %249 ], [ %265, %268 ]
  %274 = icmp ult i64 %250, 56
  br i1 %274, label %321, label %275

275:                                              ; preds = %270, %275
  %276 = phi i32** [ %317, %275 ], [ %271, %270 ]
  %277 = phi i64 [ %318, %275 ], [ %272, %270 ]
  %278 = phi i32** [ %319, %275 ], [ %273, %270 ]
  %279 = bitcast i32** %278 to i64*
  %280 = load i64, i64* %279, align 8
  %281 = inttoptr i64 %277 to i64*
  store i64 %280, i64* %281, align 8
  %282 = getelementptr inbounds i32*, i32** %276, i64 1
  %283 = getelementptr inbounds i32*, i32** %278, i64 1
  %284 = bitcast i32** %283 to i64*
  %285 = load i64, i64* %284, align 8
  %286 = bitcast i32** %282 to i64*
  store i64 %285, i64* %286, align 8
  %287 = getelementptr inbounds i32*, i32** %276, i64 2
  %288 = getelementptr inbounds i32*, i32** %278, i64 2
  %289 = bitcast i32** %288 to i64*
  %290 = load i64, i64* %289, align 8
  %291 = bitcast i32** %287 to i64*
  store i64 %290, i64* %291, align 8
  %292 = getelementptr inbounds i32*, i32** %276, i64 3
  %293 = getelementptr inbounds i32*, i32** %278, i64 3
  %294 = bitcast i32** %293 to i64*
  %295 = load i64, i64* %294, align 8
  %296 = bitcast i32** %292 to i64*
  store i64 %295, i64* %296, align 8
  %297 = getelementptr inbounds i32*, i32** %276, i64 4
  %298 = getelementptr inbounds i32*, i32** %278, i64 4
  %299 = bitcast i32** %298 to i64*
  %300 = load i64, i64* %299, align 8
  %301 = bitcast i32** %297 to i64*
  store i64 %300, i64* %301, align 8
  %302 = getelementptr inbounds i32*, i32** %276, i64 5
  %303 = getelementptr inbounds i32*, i32** %278, i64 5
  %304 = bitcast i32** %303 to i64*
  %305 = load i64, i64* %304, align 8
  %306 = bitcast i32** %302 to i64*
  store i64 %305, i64* %306, align 8
  %307 = getelementptr inbounds i32*, i32** %276, i64 6
  %308 = getelementptr inbounds i32*, i32** %278, i64 6
  %309 = bitcast i32** %308 to i64*
  %310 = load i64, i64* %309, align 8
  %311 = bitcast i32** %307 to i64*
  store i64 %310, i64* %311, align 8
  %312 = getelementptr inbounds i32*, i32** %276, i64 7
  %313 = getelementptr inbounds i32*, i32** %278, i64 7
  %314 = bitcast i32** %313 to i64*
  %315 = load i64, i64* %314, align 8
  %316 = bitcast i32** %312 to i64*
  store i64 %315, i64* %316, align 8
  %317 = getelementptr inbounds i32*, i32** %276, i64 8
  %318 = ptrtoint i32** %317 to i64
  %319 = getelementptr inbounds i32*, i32** %278, i64 8
  %320 = icmp eq i32** %247, %317
  br i1 %320, label %321, label %275

321:                                              ; preds = %275, %270
  %322 = ptrtoint i32** %247 to i64
  %323 = load i32**, i32*** %202, align 8
  br label %324

324:                                              ; preds = %321, %233
  %325 = phi i32** [ %323, %321 ], [ %203, %233 ]
  %326 = phi i64 [ %322, %321 ], [ %240, %233 ]
  store i64 %238, i64* %175, align 8
  store i64 %240, i64* %168, align 8
  store i64 %326, i64* %165, align 8
  store i64 %242, i64* %173, align 8
  %327 = icmp eq i32** %325, null
  %328 = inttoptr i64 %326 to i64*
  br i1 %327, label %333, label %329

329:                                              ; preds = %324
  %330 = bitcast i32** %325 to i8*
  call void @_ZdlPv(i8* %330) #12
  %331 = bitcast i32*** %164 to i64**
  %332 = load i64*, i64** %331, align 8
  br label %333

333:                                              ; preds = %188, %221, %324, %329
  %334 = phi i64* [ %332, %329 ], [ %328, %324 ], [ %225, %221 ], [ %200, %188 ]
  store i64 %194, i64* %334, align 8
  %335 = load i32**, i32*** %164, align 8
  %336 = getelementptr inbounds i32*, i32** %335, i64 1
  store i32** %336, i32*** %164, align 8
  br label %460

337:                                              ; preds = %162
  %338 = bitcast %"struct.std::__1::__split_buffer.717"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %338) #11
  %339 = getelementptr inbounds %"struct.std::__1::__split_buffer.717", %"struct.std::__1::__split_buffer.717"* %4, i64 0, i32 1
  %340 = getelementptr inbounds %"struct.std::__1::__split_buffer.717", %"struct.std::__1::__split_buffer.717"* %4, i64 0, i32 2
  %341 = getelementptr inbounds %"struct.std::__1::__split_buffer.717", %"struct.std::__1::__split_buffer.717"* %4, i64 0, i32 3, i32 0, i32 0
  %342 = getelementptr inbounds %"struct.std::__1::__split_buffer.717", %"struct.std::__1::__split_buffer.717"* %4, i64 0, i32 3, i32 1, i32 0
  %343 = ashr exact i64 %177, 2
  %344 = icmp eq i64 %177, 0
  %345 = select i1 %344, i64 1, i64 %343
  %346 = getelementptr inbounds %"class.std::__1::deque.662", %"class.std::__1::deque.662"* %0, i64 0, i32 0, i32 0, i32 3
  %347 = bitcast %"struct.std::__1::__split_buffer.717"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %347, i8 -86, i64 24, i1 false)
  store i32** null, i32*** %341, align 8
  %348 = bitcast %"class.std::__1::allocator.668"** %342 to %"class.std::__1::__compressed_pair.665"**
  store %"class.std::__1::__compressed_pair.665"* %346, %"class.std::__1::__compressed_pair.665"** %348, align 8
  %349 = icmp ugt i64 %345, 2305843009213693951
  br i1 %349, label %350, label %351

350:                                              ; preds = %337
  tail call void @abort() #10
  unreachable

351:                                              ; preds = %337
  %352 = shl i64 %345, 3
  %353 = tail call i8* @_Znwm(i64 %352) #12
  %354 = bitcast i8* %353 to i32**
  %355 = bitcast %"struct.std::__1::__split_buffer.717"* %4 to i8**
  store i8* %353, i8** %355, align 8
  %356 = getelementptr inbounds i32*, i32** %354, i64 %171
  store i32** %356, i32*** %340, align 8
  store i32** %356, i32*** %339, align 8
  %357 = getelementptr inbounds i32*, i32** %354, i64 %345
  store i32** %357, i32*** %341, align 8
  %358 = tail call i8* @_Znwm(i64 4096) #12
  %359 = ptrtoint i8* %358 to i64
  %360 = icmp eq i64 %171, %345
  %361 = ptrtoint i32** %357 to i64
  %362 = ptrtoint i8* %353 to i64
  %363 = ptrtoint i32** %356 to i64
  br i1 %360, label %364, label %398

364:                                              ; preds = %351
  %365 = icmp ugt i32** %356, %354
  br i1 %365, label %366, label %373

366:                                              ; preds = %364
  %367 = sub i64 %363, %362
  %368 = ashr exact i64 %367, 3
  %369 = add nsw i64 %368, 1
  %370 = sdiv i64 %369, -2
  %371 = getelementptr inbounds i32*, i32** %356, i64 %370
  store i32** %371, i32*** %340, align 8
  store i32** %371, i32*** %339, align 8
  %372 = ptrtoint i32** %371 to i64
  br label %398

373:                                              ; preds = %364
  %374 = sub i64 %361, %362
  %375 = ashr exact i64 %374, 2
  %376 = icmp eq i64 %374, 0
  %377 = select i1 %376, i64 1, i64 %375
  %378 = icmp ugt i64 %377, 2305843009213693951
  br i1 %378, label %379, label %380

379:                                              ; preds = %373
  tail call void @abort() #10
  unreachable

380:                                              ; preds = %373
  %381 = bitcast %"struct.std::__1::__split_buffer.717"* %4 to i64*
  %382 = bitcast i32*** %341 to i64*
  %383 = lshr i64 %377, 2
  %384 = shl i64 %377, 3
  %385 = tail call i8* @_Znwm(i64 %384) #12
  %386 = bitcast i8* %385 to i32**
  %387 = ptrtoint i8* %385 to i64
  %388 = getelementptr inbounds i32*, i32** %386, i64 %383
  %389 = ptrtoint i32** %388 to i64
  %390 = getelementptr inbounds i32*, i32** %386, i64 %377
  %391 = ptrtoint i32** %390 to i64
  store i64 %387, i64* %381, align 8
  %392 = bitcast i32*** %339 to i64*
  store i64 %389, i64* %392, align 8
  %393 = bitcast i32*** %340 to i64*
  store i64 %389, i64* %393, align 8
  store i64 %391, i64* %382, align 8
  tail call void @_ZdlPv(i8* nonnull %353) #12
  %394 = load i32**, i32*** %164, align 8
  %395 = load i32**, i32*** %167, align 8
  %396 = ptrtoint i32** %395 to i64
  %397 = ptrtoint i32** %394 to i64
  br label %398

398:                                              ; preds = %351, %366, %380
  %399 = phi i64 [ %391, %380 ], [ %361, %366 ], [ %361, %351 ]
  %400 = phi i64 [ %397, %380 ], [ %166, %366 ], [ %166, %351 ]
  %401 = phi i64 [ %389, %380 ], [ %372, %366 ], [ %363, %351 ]
  %402 = phi i64 [ %396, %380 ], [ %169, %366 ], [ %169, %351 ]
  %403 = phi i64 [ %387, %380 ], [ %362, %366 ], [ %362, %351 ]
  %404 = phi i32** [ %395, %380 ], [ %181, %366 ], [ %181, %351 ]
  %405 = phi i32** [ %394, %380 ], [ %180, %366 ], [ %180, %351 ]
  %406 = phi i32** [ %388, %380 ], [ %371, %366 ], [ %356, %351 ]
  %407 = bitcast i32** %406 to i64*
  store i64 %359, i64* %407, align 8
  %408 = getelementptr inbounds i32*, i32** %406, i64 1
  store i32** %408, i32*** %340, align 8
  %409 = icmp eq i32** %405, %404
  br i1 %409, label %410, label %455

410:                                              ; preds = %398
  %411 = ptrtoint i32** %408 to i64
  %412 = bitcast %"struct.std::__1::__split_buffer.717"* %4 to i64*
  %413 = bitcast i32*** %339 to i64*
  %414 = bitcast i32*** %340 to i64*
  %415 = bitcast i32*** %341 to i64*
  br label %427

416:                                              ; preds = %455
  %417 = ptrtoint i32** %458 to i64
  %418 = bitcast %"struct.std::__1::__split_buffer.717"* %4 to i64*
  %419 = load i64, i64* %418, align 8
  %420 = bitcast i32*** %339 to i64*
  %421 = load i64, i64* %420, align 8
  %422 = load i64, i64* %165, align 8
  %423 = bitcast i32*** %340 to i64*
  %424 = load i64, i64* %423, align 8
  %425 = bitcast i32*** %341 to i64*
  %426 = load i64, i64* %425, align 8
  br label %427

427:                                              ; preds = %410, %416
  %428 = phi i64* [ %415, %410 ], [ %425, %416 ]
  %429 = phi i64* [ %414, %410 ], [ %423, %416 ]
  %430 = phi i64* [ %413, %410 ], [ %420, %416 ]
  %431 = phi i64* [ %412, %410 ], [ %418, %416 ]
  %432 = phi i64 [ %399, %410 ], [ %426, %416 ]
  %433 = phi i64 [ %411, %410 ], [ %424, %416 ]
  %434 = phi i64 [ %400, %410 ], [ %422, %416 ]
  %435 = phi i64 [ %401, %410 ], [ %421, %416 ]
  %436 = phi i64 [ %402, %410 ], [ %417, %416 ]
  %437 = phi i64 [ %403, %410 ], [ %419, %416 ]
  %438 = load i64, i64* %175, align 8
  store i64 %437, i64* %175, align 8
  store i64 %438, i64* %431, align 8
  store i64 %435, i64* %168, align 8
  store i64 %436, i64* %430, align 8
  store i64 %433, i64* %165, align 8
  store i64 %434, i64* %429, align 8
  %439 = load i64, i64* %173, align 8
  store i64 %432, i64* %173, align 8
  store i64 %439, i64* %428, align 8
  %440 = inttoptr i64 %436 to i32**
  %441 = inttoptr i64 %434 to i32**
  %442 = icmp eq i32** %441, %440
  br i1 %442, label %450, label %443

443:                                              ; preds = %427
  %444 = getelementptr i32*, i32** %441, i64 -1
  %445 = ptrtoint i32** %444 to i64
  %446 = sub i64 %445, %436
  %447 = lshr i64 %446, 3
  %448 = xor i64 %447, -1
  %449 = getelementptr i32*, i32** %441, i64 %448
  store i32** %449, i32*** %340, align 8
  br label %450

450:                                              ; preds = %443, %427
  %451 = icmp eq i64 %438, 0
  br i1 %451, label %454, label %452

452:                                              ; preds = %450
  %453 = inttoptr i64 %438 to i8*
  call void @_ZdlPv(i8* %453) #12
  br label %454

454:                                              ; preds = %450, %452
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %338) #11
  br label %460

455:                                              ; preds = %398, %455
  %456 = phi i32** [ %457, %455 ], [ %405, %398 ]
  %457 = getelementptr inbounds i32*, i32** %456, i64 -1
  call void @_ZNSt3__114__split_bufferIPjRNS_9allocatorIS1_EEE10push_frontERKS1_(%"struct.std::__1::__split_buffer.717"* nonnull %4, i32** dereferenceable(8) %457)
  %458 = load i32**, i32*** %167, align 8
  %459 = icmp eq i32** %457, %458
  br i1 %459, label %416, label %455

460:                                              ; preds = %454, %333, %184, %158
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPjNS_9allocatorIS1_EEE9push_backEOS1_(%"struct.std::__1::__split_buffer.664"*, i32** dereferenceable(8)) local_unnamed_addr #4 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer.664", %"struct.std::__1::__split_buffer.664"* %0, i64 0, i32 2
  %4 = load i32**, i32*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer.664", %"struct.std::__1::__split_buffer.664"* %0, i64 0, i32 3, i32 0, i32 0
  %6 = load i32**, i32*** %5, align 8
  %7 = icmp eq i32** %4, %6
  %8 = ptrtoint i32** %6 to i64
  %9 = bitcast i32** %4 to i64*
  br i1 %7, label %10, label %148

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.std::__1::__split_buffer.664", %"struct.std::__1::__split_buffer.664"* %0, i64 0, i32 1
  %12 = load i32**, i32*** %11, align 8
  %13 = getelementptr inbounds %"struct.std::__1::__split_buffer.664", %"struct.std::__1::__split_buffer.664"* %0, i64 0, i32 0
  %14 = load i32**, i32*** %13, align 8
  %15 = icmp ugt i32** %12, %14
  %16 = ptrtoint i32** %14 to i64
  br i1 %15, label %17, label %37

17:                                               ; preds = %10
  %18 = ptrtoint i32** %12 to i64
  %19 = sub i64 %18, %16
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, -2
  %23 = getelementptr inbounds i32*, i32** %12, i64 %22
  %24 = ptrtoint i32** %4 to i64
  %25 = sub i64 %24, %18
  %26 = ashr exact i64 %25, 3
  %27 = icmp eq i64 %25, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %17
  %29 = bitcast i32** %23 to i8*
  %30 = bitcast i32** %12 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 %25, i1 false) #11
  %31 = load i32**, i32*** %11, align 8
  br label %32

32:                                               ; preds = %17, %28
  %33 = phi i32** [ %12, %17 ], [ %31, %28 ]
  %34 = getelementptr inbounds i32*, i32** %23, i64 %26
  store i32** %34, i32*** %3, align 8
  %35 = getelementptr inbounds i32*, i32** %33, i64 %22
  store i32** %35, i32*** %11, align 8
  %36 = bitcast i32** %34 to i64*
  br label %148

37:                                               ; preds = %10
  %38 = bitcast i32*** %5 to i64*
  %39 = bitcast %"struct.std::__1::__split_buffer.664"* %0 to i64*
  %40 = sub i64 %8, %16
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %37
  tail call void @abort() #10
  unreachable

46:                                               ; preds = %37
  %47 = lshr i64 %43, 2
  %48 = shl i64 %43, 3
  %49 = tail call i8* @_Znwm(i64 %48) #12
  %50 = bitcast i8* %49 to i32**
  %51 = ptrtoint i8* %49 to i64
  %52 = getelementptr inbounds i32*, i32** %50, i64 %47
  %53 = ptrtoint i32** %52 to i64
  %54 = getelementptr inbounds i32*, i32** %50, i64 %43
  %55 = ptrtoint i32** %54 to i64
  %56 = ptrtoint i32** %12 to i64
  %57 = ptrtoint i32** %4 to i64
  %58 = sub i64 %57, %56
  %59 = ashr exact i64 %58, 3
  %60 = getelementptr inbounds i32*, i32** %52, i64 %59
  %61 = icmp eq i64 %58, 0
  br i1 %61, label %137, label %62

62:                                               ; preds = %46
  %63 = add i64 %58, -8
  %64 = lshr i64 %63, 3
  %65 = add nuw nsw i64 %64, 1
  %66 = and i64 %65, 7
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %83, label %68

68:                                               ; preds = %62, %68
  %69 = phi i32** [ %76, %68 ], [ %52, %62 ]
  %70 = phi i64 [ %77, %68 ], [ %53, %62 ]
  %71 = phi i32** [ %78, %68 ], [ %12, %62 ]
  %72 = phi i64 [ %79, %68 ], [ %66, %62 ]
  %73 = bitcast i32** %71 to i64*
  %74 = load i64, i64* %73, align 8
  %75 = inttoptr i64 %70 to i64*
  store i64 %74, i64* %75, align 8
  %76 = getelementptr inbounds i32*, i32** %69, i64 1
  %77 = ptrtoint i32** %76 to i64
  %78 = getelementptr inbounds i32*, i32** %71, i64 1
  %79 = add i64 %72, -1
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %81, label %68, !llvm.loop !6

81:                                               ; preds = %68
  %82 = ptrtoint i32** %76 to i64
  br label %83

83:                                               ; preds = %62, %81
  %84 = phi i32** [ %52, %62 ], [ %76, %81 ]
  %85 = phi i64 [ %53, %62 ], [ %82, %81 ]
  %86 = phi i32** [ %12, %62 ], [ %78, %81 ]
  %87 = icmp ult i64 %63, 56
  br i1 %87, label %134, label %88

88:                                               ; preds = %83, %88
  %89 = phi i32** [ %130, %88 ], [ %84, %83 ]
  %90 = phi i64 [ %131, %88 ], [ %85, %83 ]
  %91 = phi i32** [ %132, %88 ], [ %86, %83 ]
  %92 = bitcast i32** %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = inttoptr i64 %90 to i64*
  store i64 %93, i64* %94, align 8
  %95 = getelementptr inbounds i32*, i32** %89, i64 1
  %96 = getelementptr inbounds i32*, i32** %91, i64 1
  %97 = bitcast i32** %96 to i64*
  %98 = load i64, i64* %97, align 8
  %99 = bitcast i32** %95 to i64*
  store i64 %98, i64* %99, align 8
  %100 = getelementptr inbounds i32*, i32** %89, i64 2
  %101 = getelementptr inbounds i32*, i32** %91, i64 2
  %102 = bitcast i32** %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = bitcast i32** %100 to i64*
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds i32*, i32** %89, i64 3
  %106 = getelementptr inbounds i32*, i32** %91, i64 3
  %107 = bitcast i32** %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = bitcast i32** %105 to i64*
  store i64 %108, i64* %109, align 8
  %110 = getelementptr inbounds i32*, i32** %89, i64 4
  %111 = getelementptr inbounds i32*, i32** %91, i64 4
  %112 = bitcast i32** %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast i32** %110 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds i32*, i32** %89, i64 5
  %116 = getelementptr inbounds i32*, i32** %91, i64 5
  %117 = bitcast i32** %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast i32** %115 to i64*
  store i64 %118, i64* %119, align 8
  %120 = getelementptr inbounds i32*, i32** %89, i64 6
  %121 = getelementptr inbounds i32*, i32** %91, i64 6
  %122 = bitcast i32** %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = bitcast i32** %120 to i64*
  store i64 %123, i64* %124, align 8
  %125 = getelementptr inbounds i32*, i32** %89, i64 7
  %126 = getelementptr inbounds i32*, i32** %91, i64 7
  %127 = bitcast i32** %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = bitcast i32** %125 to i64*
  store i64 %128, i64* %129, align 8
  %130 = getelementptr inbounds i32*, i32** %89, i64 8
  %131 = ptrtoint i32** %130 to i64
  %132 = getelementptr inbounds i32*, i32** %91, i64 8
  %133 = icmp eq i32** %60, %130
  br i1 %133, label %134, label %88

134:                                              ; preds = %88, %83
  %135 = ptrtoint i32** %60 to i64
  %136 = load i32**, i32*** %13, align 8
  br label %137

137:                                              ; preds = %46, %134
  %138 = phi i32** [ %136, %134 ], [ %14, %46 ]
  %139 = phi i64 [ %135, %134 ], [ %53, %46 ]
  store i64 %51, i64* %39, align 8
  %140 = bitcast i32*** %11 to i64*
  store i64 %53, i64* %140, align 8
  %141 = bitcast i32*** %3 to i64*
  store i64 %139, i64* %141, align 8
  store i64 %55, i64* %38, align 8
  %142 = icmp eq i32** %138, null
  %143 = inttoptr i64 %139 to i64*
  br i1 %142, label %148, label %144

144:                                              ; preds = %137
  %145 = bitcast i32** %138 to i8*
  tail call void @_ZdlPv(i8* %145) #12
  %146 = bitcast i32*** %3 to i64**
  %147 = load i64*, i64** %146, align 8
  br label %148

148:                                              ; preds = %144, %137, %32, %2
  %149 = phi i64* [ %147, %144 ], [ %143, %137 ], [ %36, %32 ], [ %9, %2 ]
  %150 = bitcast i32** %1 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %149, align 8
  %152 = load i32**, i32*** %3, align 8
  %153 = getelementptr inbounds i32*, i32** %152, i64 1
  store i32** %153, i32*** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPjNS_9allocatorIS1_EEE10push_frontEOS1_(%"struct.std::__1::__split_buffer.664"*, i32** dereferenceable(8)) local_unnamed_addr #4 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer.664", %"struct.std::__1::__split_buffer.664"* %0, i64 0, i32 1
  %4 = load i32**, i32*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer.664", %"struct.std::__1::__split_buffer.664"* %0, i64 0, i32 0
  %6 = load i32**, i32*** %5, align 8
  %7 = icmp eq i32** %4, %6
  %8 = ptrtoint i32** %6 to i64
  br i1 %7, label %9, label %147

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer.664", %"struct.std::__1::__split_buffer.664"* %0, i64 0, i32 2
  %11 = load i32**, i32*** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer.664", %"struct.std::__1::__split_buffer.664"* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load i32**, i32*** %12, align 8
  %14 = icmp ult i32** %11, %13
  %15 = bitcast i32*** %12 to i64*
  %16 = ptrtoint i32** %13 to i64
  br i1 %14, label %17, label %38

17:                                               ; preds = %9
  %18 = ptrtoint i32** %11 to i64
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, 2
  %23 = getelementptr inbounds i32*, i32** %11, i64 %22
  %24 = ptrtoint i32** %4 to i64
  %25 = sub i64 %18, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %17
  %28 = ashr exact i64 %25, 3
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds i32*, i32** %23, i64 %29
  %31 = bitcast i32** %30 to i8*
  %32 = bitcast i32** %4 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %25, i1 false) #11
  %33 = load i32**, i32*** %10, align 8
  br label %34

34:                                               ; preds = %17, %27
  %35 = phi i32** [ %33, %27 ], [ %11, %17 ]
  %36 = phi i32** [ %30, %27 ], [ %23, %17 ]
  store i32** %36, i32*** %3, align 8
  %37 = getelementptr inbounds i32*, i32** %35, i64 %22
  store i32** %37, i32*** %10, align 8
  br label %147

38:                                               ; preds = %9
  %39 = bitcast %"struct.std::__1::__split_buffer.664"* %0 to i64*
  %40 = sub i64 %16, %8
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %38
  tail call void @abort() #10
  unreachable

46:                                               ; preds = %38
  %47 = add nuw nsw i64 %43, 3
  %48 = lshr i64 %47, 2
  %49 = shl i64 %43, 3
  %50 = tail call i8* @_Znwm(i64 %49) #12
  %51 = bitcast i8* %50 to i32**
  %52 = ptrtoint i8* %50 to i64
  %53 = getelementptr inbounds i32*, i32** %51, i64 %48
  %54 = ptrtoint i32** %53 to i64
  %55 = getelementptr inbounds i32*, i32** %51, i64 %43
  %56 = ptrtoint i32** %55 to i64
  %57 = ptrtoint i32** %4 to i64
  %58 = ptrtoint i32** %11 to i64
  %59 = sub i64 %58, %57
  %60 = ashr exact i64 %59, 3
  %61 = getelementptr inbounds i32*, i32** %53, i64 %60
  %62 = icmp eq i64 %59, 0
  br i1 %62, label %138, label %63

63:                                               ; preds = %46
  %64 = add i64 %59, -8
  %65 = lshr i64 %64, 3
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 7
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %84, label %69

69:                                               ; preds = %63, %69
  %70 = phi i32** [ %77, %69 ], [ %53, %63 ]
  %71 = phi i64 [ %78, %69 ], [ %54, %63 ]
  %72 = phi i32** [ %79, %69 ], [ %4, %63 ]
  %73 = phi i64 [ %80, %69 ], [ %67, %63 ]
  %74 = bitcast i32** %72 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = inttoptr i64 %71 to i64*
  store i64 %75, i64* %76, align 8
  %77 = getelementptr inbounds i32*, i32** %70, i64 1
  %78 = ptrtoint i32** %77 to i64
  %79 = getelementptr inbounds i32*, i32** %72, i64 1
  %80 = add i64 %73, -1
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %69, !llvm.loop !7

82:                                               ; preds = %69
  %83 = ptrtoint i32** %77 to i64
  br label %84

84:                                               ; preds = %63, %82
  %85 = phi i32** [ %53, %63 ], [ %77, %82 ]
  %86 = phi i64 [ %54, %63 ], [ %83, %82 ]
  %87 = phi i32** [ %4, %63 ], [ %79, %82 ]
  %88 = icmp ult i64 %64, 56
  br i1 %88, label %135, label %89

89:                                               ; preds = %84, %89
  %90 = phi i32** [ %131, %89 ], [ %85, %84 ]
  %91 = phi i64 [ %132, %89 ], [ %86, %84 ]
  %92 = phi i32** [ %133, %89 ], [ %87, %84 ]
  %93 = bitcast i32** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = inttoptr i64 %91 to i64*
  store i64 %94, i64* %95, align 8
  %96 = getelementptr inbounds i32*, i32** %90, i64 1
  %97 = getelementptr inbounds i32*, i32** %92, i64 1
  %98 = bitcast i32** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast i32** %96 to i64*
  store i64 %99, i64* %100, align 8
  %101 = getelementptr inbounds i32*, i32** %90, i64 2
  %102 = getelementptr inbounds i32*, i32** %92, i64 2
  %103 = bitcast i32** %102 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = bitcast i32** %101 to i64*
  store i64 %104, i64* %105, align 8
  %106 = getelementptr inbounds i32*, i32** %90, i64 3
  %107 = getelementptr inbounds i32*, i32** %92, i64 3
  %108 = bitcast i32** %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = bitcast i32** %106 to i64*
  store i64 %109, i64* %110, align 8
  %111 = getelementptr inbounds i32*, i32** %90, i64 4
  %112 = getelementptr inbounds i32*, i32** %92, i64 4
  %113 = bitcast i32** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast i32** %111 to i64*
  store i64 %114, i64* %115, align 8
  %116 = getelementptr inbounds i32*, i32** %90, i64 5
  %117 = getelementptr inbounds i32*, i32** %92, i64 5
  %118 = bitcast i32** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast i32** %116 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds i32*, i32** %90, i64 6
  %122 = getelementptr inbounds i32*, i32** %92, i64 6
  %123 = bitcast i32** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = bitcast i32** %121 to i64*
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds i32*, i32** %90, i64 7
  %127 = getelementptr inbounds i32*, i32** %92, i64 7
  %128 = bitcast i32** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast i32** %126 to i64*
  store i64 %129, i64* %130, align 8
  %131 = getelementptr inbounds i32*, i32** %90, i64 8
  %132 = ptrtoint i32** %131 to i64
  %133 = getelementptr inbounds i32*, i32** %92, i64 8
  %134 = icmp eq i32** %61, %131
  br i1 %134, label %135, label %89

135:                                              ; preds = %89, %84
  %136 = ptrtoint i32** %61 to i64
  %137 = load i32**, i32*** %5, align 8
  br label %138

138:                                              ; preds = %46, %135
  %139 = phi i32** [ %137, %135 ], [ %4, %46 ]
  %140 = phi i64 [ %136, %135 ], [ %54, %46 ]
  store i64 %52, i64* %39, align 8
  %141 = bitcast i32*** %3 to i64*
  store i64 %54, i64* %141, align 8
  %142 = bitcast i32*** %10 to i64*
  store i64 %140, i64* %142, align 8
  store i64 %56, i64* %15, align 8
  %143 = icmp eq i32** %139, null
  br i1 %143, label %147, label %144

144:                                              ; preds = %138
  %145 = bitcast i32** %139 to i8*
  tail call void @_ZdlPv(i8* %145) #12
  %146 = load i32**, i32*** %3, align 8
  br label %147

147:                                              ; preds = %144, %138, %34, %2
  %148 = phi i32** [ %146, %144 ], [ %53, %138 ], [ %36, %34 ], [ %4, %2 ]
  %149 = getelementptr inbounds i32*, i32** %148, i64 -1
  %150 = bitcast i32** %1 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = bitcast i32** %149 to i64*
  store i64 %151, i64* %152, align 8
  %153 = load i32**, i32*** %3, align 8
  %154 = getelementptr inbounds i32*, i32** %153, i64 -1
  store i32** %154, i32*** %3, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPjRNS_9allocatorIS1_EEE10push_frontERKS1_(%"struct.std::__1::__split_buffer.717"*, i32** dereferenceable(8)) local_unnamed_addr #4 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer.717", %"struct.std::__1::__split_buffer.717"* %0, i64 0, i32 1
  %4 = load i32**, i32*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer.717", %"struct.std::__1::__split_buffer.717"* %0, i64 0, i32 0
  %6 = load i32**, i32*** %5, align 8
  %7 = icmp eq i32** %4, %6
  %8 = ptrtoint i32** %6 to i64
  br i1 %7, label %9, label %147

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer.717", %"struct.std::__1::__split_buffer.717"* %0, i64 0, i32 2
  %11 = load i32**, i32*** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer.717", %"struct.std::__1::__split_buffer.717"* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load i32**, i32*** %12, align 8
  %14 = icmp ult i32** %11, %13
  %15 = bitcast i32*** %12 to i64*
  %16 = ptrtoint i32** %13 to i64
  br i1 %14, label %17, label %38

17:                                               ; preds = %9
  %18 = ptrtoint i32** %11 to i64
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, 2
  %23 = getelementptr inbounds i32*, i32** %11, i64 %22
  %24 = ptrtoint i32** %4 to i64
  %25 = sub i64 %18, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %17
  %28 = ashr exact i64 %25, 3
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds i32*, i32** %23, i64 %29
  %31 = bitcast i32** %30 to i8*
  %32 = bitcast i32** %4 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %25, i1 false) #11
  %33 = load i32**, i32*** %10, align 8
  br label %34

34:                                               ; preds = %17, %27
  %35 = phi i32** [ %33, %27 ], [ %11, %17 ]
  %36 = phi i32** [ %30, %27 ], [ %23, %17 ]
  store i32** %36, i32*** %3, align 8
  %37 = getelementptr inbounds i32*, i32** %35, i64 %22
  store i32** %37, i32*** %10, align 8
  br label %147

38:                                               ; preds = %9
  %39 = bitcast %"struct.std::__1::__split_buffer.717"* %0 to i64*
  %40 = sub i64 %16, %8
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %38
  tail call void @abort() #10
  unreachable

46:                                               ; preds = %38
  %47 = add nuw nsw i64 %43, 3
  %48 = lshr i64 %47, 2
  %49 = shl i64 %43, 3
  %50 = tail call i8* @_Znwm(i64 %49) #12
  %51 = bitcast i8* %50 to i32**
  %52 = ptrtoint i8* %50 to i64
  %53 = getelementptr inbounds i32*, i32** %51, i64 %48
  %54 = ptrtoint i32** %53 to i64
  %55 = getelementptr inbounds i32*, i32** %51, i64 %43
  %56 = ptrtoint i32** %55 to i64
  %57 = ptrtoint i32** %4 to i64
  %58 = ptrtoint i32** %11 to i64
  %59 = sub i64 %58, %57
  %60 = ashr exact i64 %59, 3
  %61 = getelementptr inbounds i32*, i32** %53, i64 %60
  %62 = icmp eq i64 %59, 0
  br i1 %62, label %138, label %63

63:                                               ; preds = %46
  %64 = add i64 %59, -8
  %65 = lshr i64 %64, 3
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 7
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %84, label %69

69:                                               ; preds = %63, %69
  %70 = phi i32** [ %77, %69 ], [ %53, %63 ]
  %71 = phi i64 [ %78, %69 ], [ %54, %63 ]
  %72 = phi i32** [ %79, %69 ], [ %4, %63 ]
  %73 = phi i64 [ %80, %69 ], [ %67, %63 ]
  %74 = bitcast i32** %72 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = inttoptr i64 %71 to i64*
  store i64 %75, i64* %76, align 8
  %77 = getelementptr inbounds i32*, i32** %70, i64 1
  %78 = ptrtoint i32** %77 to i64
  %79 = getelementptr inbounds i32*, i32** %72, i64 1
  %80 = add i64 %73, -1
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %69, !llvm.loop !8

82:                                               ; preds = %69
  %83 = ptrtoint i32** %77 to i64
  br label %84

84:                                               ; preds = %63, %82
  %85 = phi i32** [ %53, %63 ], [ %77, %82 ]
  %86 = phi i64 [ %54, %63 ], [ %83, %82 ]
  %87 = phi i32** [ %4, %63 ], [ %79, %82 ]
  %88 = icmp ult i64 %64, 56
  br i1 %88, label %135, label %89

89:                                               ; preds = %84, %89
  %90 = phi i32** [ %131, %89 ], [ %85, %84 ]
  %91 = phi i64 [ %132, %89 ], [ %86, %84 ]
  %92 = phi i32** [ %133, %89 ], [ %87, %84 ]
  %93 = bitcast i32** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = inttoptr i64 %91 to i64*
  store i64 %94, i64* %95, align 8
  %96 = getelementptr inbounds i32*, i32** %90, i64 1
  %97 = getelementptr inbounds i32*, i32** %92, i64 1
  %98 = bitcast i32** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast i32** %96 to i64*
  store i64 %99, i64* %100, align 8
  %101 = getelementptr inbounds i32*, i32** %90, i64 2
  %102 = getelementptr inbounds i32*, i32** %92, i64 2
  %103 = bitcast i32** %102 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = bitcast i32** %101 to i64*
  store i64 %104, i64* %105, align 8
  %106 = getelementptr inbounds i32*, i32** %90, i64 3
  %107 = getelementptr inbounds i32*, i32** %92, i64 3
  %108 = bitcast i32** %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = bitcast i32** %106 to i64*
  store i64 %109, i64* %110, align 8
  %111 = getelementptr inbounds i32*, i32** %90, i64 4
  %112 = getelementptr inbounds i32*, i32** %92, i64 4
  %113 = bitcast i32** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast i32** %111 to i64*
  store i64 %114, i64* %115, align 8
  %116 = getelementptr inbounds i32*, i32** %90, i64 5
  %117 = getelementptr inbounds i32*, i32** %92, i64 5
  %118 = bitcast i32** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast i32** %116 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds i32*, i32** %90, i64 6
  %122 = getelementptr inbounds i32*, i32** %92, i64 6
  %123 = bitcast i32** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = bitcast i32** %121 to i64*
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds i32*, i32** %90, i64 7
  %127 = getelementptr inbounds i32*, i32** %92, i64 7
  %128 = bitcast i32** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast i32** %126 to i64*
  store i64 %129, i64* %130, align 8
  %131 = getelementptr inbounds i32*, i32** %90, i64 8
  %132 = ptrtoint i32** %131 to i64
  %133 = getelementptr inbounds i32*, i32** %92, i64 8
  %134 = icmp eq i32** %61, %131
  br i1 %134, label %135, label %89

135:                                              ; preds = %89, %84
  %136 = ptrtoint i32** %61 to i64
  %137 = load i32**, i32*** %5, align 8
  br label %138

138:                                              ; preds = %46, %135
  %139 = phi i32** [ %137, %135 ], [ %4, %46 ]
  %140 = phi i64 [ %136, %135 ], [ %54, %46 ]
  store i64 %52, i64* %39, align 8
  %141 = bitcast i32*** %3 to i64*
  store i64 %54, i64* %141, align 8
  %142 = bitcast i32*** %10 to i64*
  store i64 %140, i64* %142, align 8
  store i64 %56, i64* %15, align 8
  %143 = icmp eq i32** %139, null
  br i1 %143, label %147, label %144

144:                                              ; preds = %138
  %145 = bitcast i32** %139 to i8*
  tail call void @_ZdlPv(i8* %145) #12
  %146 = load i32**, i32*** %3, align 8
  br label %147

147:                                              ; preds = %144, %138, %34, %2
  %148 = phi i32** [ %146, %144 ], [ %53, %138 ], [ %36, %34 ], [ %4, %2 ]
  %149 = getelementptr inbounds i32*, i32** %148, i64 -1
  %150 = bitcast i32** %1 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = bitcast i32** %149 to i64*
  store i64 %151, i64* %152, align 8
  %153 = load i32**, i32*** %3, align 8
  %154 = getelementptr inbounds i32*, i32** %153, i64 -1
  store i32** %154, i32*** %3, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #6

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #9

attributes #0 = { cold noreturn nounwind }
attributes #1 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noreturn nounwind }
attributes #11 = { nounwind }
attributes #12 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.unroll.disable"}
!5 = distinct !{!5, !4}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !4}
!8 = distinct !{!8, !4}
