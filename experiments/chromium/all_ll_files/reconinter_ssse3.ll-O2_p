; ModuleID = '../../third_party/libaom/source/libaom/av1/common/x86/reconinter_ssse3.c'
source_filename = "../../third_party/libaom/source/libaom/av1/common/x86/reconinter_ssse3.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_build_compound_diffwtd_mask_highbd_ssse3(i8*, i8 zeroext, i8*, i32, i8*, i32, i32, i32, i32) local_unnamed_addr #0 {
  %10 = icmp slt i32 %7, 8
  br i1 %10, label %11, label %12

11:                                               ; preds = %9
  tail call void @av1_build_compound_diffwtd_mask_highbd_c(i8* %0, i8 zeroext %1, i8* %2, i32 %3, i8* %4, i32 %5, i32 %6, i32 %7, i32 %8) #3
  br label %197

12:                                               ; preds = %9
  %13 = ptrtoint i8* %2 to i64
  %14 = shl i64 %13, 1
  %15 = inttoptr i64 %14 to i16*
  %16 = ptrtoint i8* %4 to i64
  %17 = shl i64 %16, 1
  %18 = inttoptr i64 %17 to i16*
  %19 = icmp eq i32 %8, 8
  br i1 %19, label %20, label %105

20:                                               ; preds = %12
  %21 = icmp eq i8 %1, 1
  %22 = icmp sgt i32 %6, 0
  br i1 %21, label %28, label %23

23:                                               ; preds = %20
  br i1 %22, label %24, label %197

24:                                               ; preds = %23
  %25 = sext i32 %3 to i64
  %26 = sext i32 %5 to i64
  %27 = sext i32 %7 to i64
  br label %69

28:                                               ; preds = %20
  br i1 %22, label %29, label %197

29:                                               ; preds = %28
  %30 = sext i32 %3 to i64
  %31 = sext i32 %5 to i64
  %32 = sext i32 %7 to i64
  br label %33

33:                                               ; preds = %38, %29
  %34 = phi i8* [ %0, %29 ], [ %41, %38 ]
  %35 = phi i16* [ %15, %29 ], [ %39, %38 ]
  %36 = phi i16* [ %18, %29 ], [ %40, %38 ]
  %37 = phi i32 [ 0, %29 ], [ %42, %38 ]
  br label %44

38:                                               ; preds = %44
  %39 = getelementptr inbounds i16, i16* %35, i64 %30
  %40 = getelementptr inbounds i16, i16* %36, i64 %31
  %41 = getelementptr inbounds i8, i8* %34, i64 %32
  %42 = add nuw nsw i32 %37, 1
  %43 = icmp eq i32 %42, %6
  br i1 %43, label %197, label %33

44:                                               ; preds = %33, %44
  %45 = phi i64 [ 0, %33 ], [ %67, %44 ]
  %46 = getelementptr inbounds i16, i16* %35, i64 %45
  %47 = bitcast i16* %46 to <8 x i16>*
  %48 = load <8 x i16>, <8 x i16>* %47, align 1
  %49 = getelementptr inbounds i16, i16* %36, i64 %45
  %50 = bitcast i16* %49 to <8 x i16>*
  %51 = load <8 x i16>, <8 x i16>* %50, align 1
  %52 = sub <8 x i16> %48, %51
  %53 = sub <8 x i16> zeroinitializer, %52
  %54 = icmp slt <8 x i16> %52, zeroinitializer
  %55 = select <8 x i1> %54, <8 x i16> %53, <8 x i16> %52
  %56 = ashr <8 x i16> %55, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %57 = icmp sgt <8 x i16> %56, <i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38>
  %58 = select <8 x i1> %57, <8 x i16> %56, <8 x i16> <i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38>
  %59 = icmp slt <8 x i16> %58, <i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26>
  %60 = select <8 x i1> %59, <8 x i16> %58, <8 x i16> <i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26>
  %61 = sub nsw <8 x i16> <i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26>, %60
  %62 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %61, <8 x i16> undef) #3
  %63 = bitcast <16 x i8> %62 to <2 x i64>
  %64 = getelementptr inbounds i8, i8* %34, i64 %45
  %65 = extractelement <2 x i64> %63, i32 0
  %66 = bitcast i8* %64 to i64*
  store i64 %65, i64* %66, align 1
  %67 = add nuw nsw i64 %45, 8
  %68 = icmp slt i64 %67, %32
  br i1 %68, label %44, label %38

69:                                               ; preds = %74, %24
  %70 = phi i8* [ %0, %24 ], [ %77, %74 ]
  %71 = phi i16* [ %15, %24 ], [ %75, %74 ]
  %72 = phi i16* [ %18, %24 ], [ %76, %74 ]
  %73 = phi i32 [ 0, %24 ], [ %78, %74 ]
  br label %80

74:                                               ; preds = %80
  %75 = getelementptr inbounds i16, i16* %71, i64 %25
  %76 = getelementptr inbounds i16, i16* %72, i64 %26
  %77 = getelementptr inbounds i8, i8* %70, i64 %27
  %78 = add nuw nsw i32 %73, 1
  %79 = icmp eq i32 %78, %6
  br i1 %79, label %197, label %69

80:                                               ; preds = %69, %80
  %81 = phi i64 [ 0, %69 ], [ %103, %80 ]
  %82 = getelementptr inbounds i16, i16* %71, i64 %81
  %83 = bitcast i16* %82 to <8 x i16>*
  %84 = load <8 x i16>, <8 x i16>* %83, align 1
  %85 = getelementptr inbounds i16, i16* %72, i64 %81
  %86 = bitcast i16* %85 to <8 x i16>*
  %87 = load <8 x i16>, <8 x i16>* %86, align 1
  %88 = sub <8 x i16> %84, %87
  %89 = sub <8 x i16> zeroinitializer, %88
  %90 = icmp slt <8 x i16> %88, zeroinitializer
  %91 = select <8 x i1> %90, <8 x i16> %89, <8 x i16> %88
  %92 = ashr <8 x i16> %91, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %93 = icmp sgt <8 x i16> %92, <i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38>
  %94 = select <8 x i1> %93, <8 x i16> %92, <8 x i16> <i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38>
  %95 = icmp slt <8 x i16> %94, <i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26>
  %96 = select <8 x i1> %95, <8 x i16> %94, <8 x i16> <i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26>
  %97 = add nsw <8 x i16> %96, <i16 38, i16 38, i16 38, i16 38, i16 38, i16 38, i16 38, i16 38>
  %98 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %97, <8 x i16> undef) #3
  %99 = bitcast <16 x i8> %98 to <2 x i64>
  %100 = getelementptr inbounds i8, i8* %70, i64 %81
  %101 = extractelement <2 x i64> %99, i32 0
  %102 = bitcast i8* %100 to i64*
  store i64 %101, i64* %102, align 1
  %103 = add nuw nsw i64 %81, 8
  %104 = icmp slt i64 %103, %27
  br i1 %104, label %80, label %74

105:                                              ; preds = %12
  %106 = add nsw i32 %8, -4
  %107 = zext i32 %106 to i64
  %108 = insertelement <2 x i64> undef, i64 %107, i32 0
  %109 = shufflevector <2 x i64> %108, <2 x i64> undef, <2 x i32> zeroinitializer
  %110 = icmp eq i8 %1, 1
  %111 = icmp sgt i32 %6, 0
  br i1 %110, label %118, label %112

112:                                              ; preds = %105
  br i1 %111, label %113, label %197

113:                                              ; preds = %112
  %114 = bitcast <2 x i64> %109 to <8 x i16>
  %115 = sext i32 %3 to i64
  %116 = sext i32 %5 to i64
  %117 = sext i32 %7 to i64
  br label %161

118:                                              ; preds = %105
  br i1 %111, label %119, label %197

119:                                              ; preds = %118
  %120 = bitcast <2 x i64> %109 to <8 x i16>
  %121 = sext i32 %3 to i64
  %122 = sext i32 %5 to i64
  %123 = sext i32 %7 to i64
  br label %124

124:                                              ; preds = %129, %119
  %125 = phi i8* [ %0, %119 ], [ %132, %129 ]
  %126 = phi i16* [ %15, %119 ], [ %130, %129 ]
  %127 = phi i16* [ %18, %119 ], [ %131, %129 ]
  %128 = phi i32 [ 0, %119 ], [ %133, %129 ]
  br label %135

129:                                              ; preds = %135
  %130 = getelementptr inbounds i16, i16* %126, i64 %121
  %131 = getelementptr inbounds i16, i16* %127, i64 %122
  %132 = getelementptr inbounds i8, i8* %125, i64 %123
  %133 = add nuw nsw i32 %128, 1
  %134 = icmp eq i32 %133, %6
  br i1 %134, label %197, label %124

135:                                              ; preds = %124, %135
  %136 = phi i64 [ 0, %124 ], [ %159, %135 ]
  %137 = getelementptr inbounds i16, i16* %126, i64 %136
  %138 = bitcast i16* %137 to <8 x i16>*
  %139 = load <8 x i16>, <8 x i16>* %138, align 1
  %140 = getelementptr inbounds i16, i16* %127, i64 %136
  %141 = bitcast i16* %140 to <8 x i16>*
  %142 = load <8 x i16>, <8 x i16>* %141, align 1
  %143 = sub <8 x i16> %139, %142
  %144 = sub <8 x i16> zeroinitializer, %143
  %145 = icmp slt <8 x i16> %143, zeroinitializer
  %146 = select <8 x i1> %145, <8 x i16> %144, <8 x i16> %143
  %147 = tail call <8 x i16> @llvm.x86.sse2.psra.w(<8 x i16> %146, <8 x i16> %120) #3
  %148 = add <8 x i16> %147, <i16 38, i16 38, i16 38, i16 38, i16 38, i16 38, i16 38, i16 38>
  %149 = icmp sgt <8 x i16> %148, zeroinitializer
  %150 = select <8 x i1> %149, <8 x i16> %148, <8 x i16> zeroinitializer
  %151 = icmp slt <8 x i16> %150, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %152 = select <8 x i1> %151, <8 x i16> %150, <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %153 = sub nuw nsw <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %152
  %154 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %153, <8 x i16> undef) #3
  %155 = bitcast <16 x i8> %154 to <2 x i64>
  %156 = getelementptr inbounds i8, i8* %125, i64 %136
  %157 = extractelement <2 x i64> %155, i32 0
  %158 = bitcast i8* %156 to i64*
  store i64 %157, i64* %158, align 1
  %159 = add nuw nsw i64 %136, 8
  %160 = icmp slt i64 %159, %123
  br i1 %160, label %135, label %129

161:                                              ; preds = %166, %113
  %162 = phi i8* [ %0, %113 ], [ %169, %166 ]
  %163 = phi i32 [ 0, %113 ], [ %170, %166 ]
  %164 = phi i16* [ %15, %113 ], [ %167, %166 ]
  %165 = phi i16* [ %18, %113 ], [ %168, %166 ]
  br label %172

166:                                              ; preds = %172
  %167 = getelementptr inbounds i16, i16* %164, i64 %115
  %168 = getelementptr inbounds i16, i16* %165, i64 %116
  %169 = getelementptr inbounds i8, i8* %162, i64 %117
  %170 = add nuw nsw i32 %163, 1
  %171 = icmp eq i32 %170, %6
  br i1 %171, label %197, label %161

172:                                              ; preds = %161, %172
  %173 = phi i64 [ 0, %161 ], [ %195, %172 ]
  %174 = getelementptr inbounds i16, i16* %164, i64 %173
  %175 = bitcast i16* %174 to <8 x i16>*
  %176 = load <8 x i16>, <8 x i16>* %175, align 1
  %177 = getelementptr inbounds i16, i16* %165, i64 %173
  %178 = bitcast i16* %177 to <8 x i16>*
  %179 = load <8 x i16>, <8 x i16>* %178, align 1
  %180 = sub <8 x i16> %176, %179
  %181 = sub <8 x i16> zeroinitializer, %180
  %182 = icmp slt <8 x i16> %180, zeroinitializer
  %183 = select <8 x i1> %182, <8 x i16> %181, <8 x i16> %180
  %184 = tail call <8 x i16> @llvm.x86.sse2.psra.w(<8 x i16> %183, <8 x i16> %114) #3
  %185 = add <8 x i16> %184, <i16 38, i16 38, i16 38, i16 38, i16 38, i16 38, i16 38, i16 38>
  %186 = icmp sgt <8 x i16> %185, zeroinitializer
  %187 = select <8 x i1> %186, <8 x i16> %185, <8 x i16> zeroinitializer
  %188 = icmp slt <8 x i16> %187, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %189 = select <8 x i1> %188, <8 x i16> %187, <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %190 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %189, <8 x i16> undef) #3
  %191 = bitcast <16 x i8> %190 to <2 x i64>
  %192 = getelementptr inbounds i8, i8* %162, i64 %173
  %193 = extractelement <2 x i64> %191, i32 0
  %194 = bitcast i8* %192 to i64*
  store i64 %193, i64* %194, align 1
  %195 = add nuw nsw i64 %173, 8
  %196 = icmp slt i64 %195, %117
  br i1 %196, label %172, label %166

197:                                              ; preds = %166, %129, %74, %38, %112, %118, %23, %28, %11
  ret void
}

declare void @av1_build_compound_diffwtd_mask_highbd_c(i8*, i8 zeroext, i8*, i32, i8*, i32, i32, i32, i32) local_unnamed_addr #1

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #2

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.psra.w(<8 x i16>, <8 x i16>) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
