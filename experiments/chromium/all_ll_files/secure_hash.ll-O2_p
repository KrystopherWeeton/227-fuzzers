; ModuleID = '../../crypto/secure_hash.cc'
source_filename = "../../crypto/secure_hash.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.crypto::SecureHash" = type { i32 (...)** }
%struct.sha256_state_st = type { [8 x i32], i32, i32, [64 x i8], i32, i32 }
%"class.crypto::(anonymous namespace)::SecureHashSHA256" = type { %"class.crypto::SecureHash", %struct.sha256_state_st }
%"class.crypto::ScopedOpenSSLSafeSizeBuffer" = type { i8*, i64, [32 x i8] }

@_ZTVN6crypto12_GLOBAL__N_116SecureHashSHA256E = internal unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.crypto::(anonymous namespace)::SecureHashSHA256"*)* @_ZN6crypto12_GLOBAL__N_116SecureHashSHA256D2Ev to i8*), i8* bitcast (void (%"class.crypto::(anonymous namespace)::SecureHashSHA256"*)* @_ZN6crypto12_GLOBAL__N_116SecureHashSHA256D0Ev to i8*), i8* bitcast (void (%"class.crypto::(anonymous namespace)::SecureHashSHA256"*, i8*, i64)* @_ZN6crypto12_GLOBAL__N_116SecureHashSHA2566UpdateEPKvm to i8*), i8* bitcast (void (%"class.crypto::(anonymous namespace)::SecureHashSHA256"*, i8*, i64)* @_ZN6crypto12_GLOBAL__N_116SecureHashSHA2566FinishEPvm to i8*), i8* bitcast (i64 (%"class.crypto::(anonymous namespace)::SecureHashSHA256"*)* @_ZNK6crypto12_GLOBAL__N_116SecureHashSHA25613GetHashLengthEv to i8*), i8* bitcast (%"class.crypto::SecureHash"* (%"class.crypto::(anonymous namespace)::SecureHashSHA256"*)* @_ZNK6crypto12_GLOBAL__N_116SecureHashSHA2565CloneEv to i8*)] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden %"class.crypto::SecureHash"* @_ZN6crypto10SecureHash6CreateENS0_9AlgorithmE(i32) local_unnamed_addr #0 align 2 {
  %2 = icmp eq i32 %0, 0
  br i1 %2, label %3, label %10

3:                                                ; preds = %1
  %4 = tail call i8* @_Znwm(i64 120) #6
  %5 = bitcast i8* %4 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN6crypto12_GLOBAL__N_116SecureHashSHA256E, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  tail call void @_ZN6crypto17EnsureOpenSSLInitEv() #7
  %6 = getelementptr inbounds i8, i8* %4, i64 8
  %7 = bitcast i8* %6 to %struct.sha256_state_st*
  %8 = tail call i32 @SHA256_Init(%struct.sha256_state_st* %7) #7
  %9 = bitcast i8* %4 to %"class.crypto::SecureHash"*
  br label %10

10:                                               ; preds = %1, %3
  %11 = phi %"class.crypto::SecureHash"* [ %9, %3 ], [ null, %1 ]
  ret %"class.crypto::SecureHash"* %11
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #2

declare void @_ZN6crypto17EnsureOpenSSLInitEv() local_unnamed_addr #3

declare i32 @SHA256_Init(%struct.sha256_state_st*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN6crypto12_GLOBAL__N_116SecureHashSHA256D2Ev(%"class.crypto::(anonymous namespace)::SecureHashSHA256"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.crypto::(anonymous namespace)::SecureHashSHA256", %"class.crypto::(anonymous namespace)::SecureHashSHA256"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN6crypto12_GLOBAL__N_116SecureHashSHA256E, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.crypto::(anonymous namespace)::SecureHashSHA256", %"class.crypto::(anonymous namespace)::SecureHashSHA256"* %0, i64 0, i32 1
  %4 = bitcast %struct.sha256_state_st* %3 to i8*
  tail call void @OPENSSL_cleanse(i8* %4, i64 112) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN6crypto12_GLOBAL__N_116SecureHashSHA256D0Ev(%"class.crypto::(anonymous namespace)::SecureHashSHA256"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.crypto::(anonymous namespace)::SecureHashSHA256", %"class.crypto::(anonymous namespace)::SecureHashSHA256"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN6crypto12_GLOBAL__N_116SecureHashSHA256E, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.crypto::(anonymous namespace)::SecureHashSHA256", %"class.crypto::(anonymous namespace)::SecureHashSHA256"* %0, i64 0, i32 1
  %4 = bitcast %struct.sha256_state_st* %3 to i8*
  tail call void @OPENSSL_cleanse(i8* %4, i64 112) #7
  %5 = bitcast %"class.crypto::(anonymous namespace)::SecureHashSHA256"* %0 to i8*
  tail call void @_ZdlPv(i8* %5) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN6crypto12_GLOBAL__N_116SecureHashSHA2566UpdateEPKvm(%"class.crypto::(anonymous namespace)::SecureHashSHA256"*, i8*, i64) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.crypto::(anonymous namespace)::SecureHashSHA256", %"class.crypto::(anonymous namespace)::SecureHashSHA256"* %0, i64 0, i32 1
  %5 = tail call i32 @SHA256_Update(%struct.sha256_state_st* %4, i8* %1, i64 %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN6crypto12_GLOBAL__N_116SecureHashSHA2566FinishEPvm(%"class.crypto::(anonymous namespace)::SecureHashSHA256"*, i8*, i64) unnamed_addr #0 align 2 {
  %4 = alloca %"class.crypto::ScopedOpenSSLSafeSizeBuffer", align 8
  %5 = bitcast %"class.crypto::ScopedOpenSSLSafeSizeBuffer"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %5) #7
  %6 = getelementptr inbounds %"class.crypto::ScopedOpenSSLSafeSizeBuffer", %"class.crypto::ScopedOpenSSLSafeSizeBuffer"* %4, i64 0, i32 2, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 32, i1 false)
  %7 = getelementptr inbounds %"class.crypto::ScopedOpenSSLSafeSizeBuffer", %"class.crypto::ScopedOpenSSLSafeSizeBuffer"* %4, i64 0, i32 0
  store i8* %1, i8** %7, align 8
  %8 = getelementptr inbounds %"class.crypto::ScopedOpenSSLSafeSizeBuffer", %"class.crypto::ScopedOpenSSLSafeSizeBuffer"* %4, i64 0, i32 1
  store i64 %2, i64* %8, align 8
  %9 = icmp ult i64 %2, 32
  %10 = getelementptr inbounds %"class.crypto::ScopedOpenSSLSafeSizeBuffer", %"class.crypto::ScopedOpenSSLSafeSizeBuffer"* %4, i64 0, i32 2, i64 0
  %11 = select i1 %9, i8* %10, i8* %1
  %12 = getelementptr inbounds %"class.crypto::(anonymous namespace)::SecureHashSHA256", %"class.crypto::(anonymous namespace)::SecureHashSHA256"* %0, i64 0, i32 1
  %13 = call i32 @SHA256_Final(i8* %11, %struct.sha256_state_st* %12) #7
  %14 = load i64, i64* %8, align 8
  %15 = icmp ult i64 %14, 32
  br i1 %15, label %16, label %18

16:                                               ; preds = %3
  %17 = load i8*, i8** %7, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %17, i8* align 8 %10, i64 %14, i1 false) #7
  br label %18

18:                                               ; preds = %3, %16
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %5) #7
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i64 @_ZNK6crypto12_GLOBAL__N_116SecureHashSHA25613GetHashLengthEv(%"class.crypto::(anonymous namespace)::SecureHashSHA256"* nocapture readnone) unnamed_addr #4 align 2 {
  ret i64 32
}

; Function Attrs: nounwind ssp uwtable
define internal %"class.crypto::SecureHash"* @_ZNK6crypto12_GLOBAL__N_116SecureHashSHA2565CloneEv(%"class.crypto::(anonymous namespace)::SecureHashSHA256"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = tail call i8* @_Znwm(i64 120) #6
  %3 = bitcast i8* %2 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN6crypto12_GLOBAL__N_116SecureHashSHA256E, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds i8, i8* %2, i64 8
  %5 = getelementptr inbounds %"class.crypto::(anonymous namespace)::SecureHashSHA256", %"class.crypto::(anonymous namespace)::SecureHashSHA256"* %0, i64 0, i32 1
  %6 = bitcast %struct.sha256_state_st* %5 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %6, i64 112, i1 false) #7
  %7 = bitcast i8* %2 to %"class.crypto::SecureHash"*
  ret %"class.crypto::SecureHash"* %7
}

declare void @OPENSSL_cleanse(i8*, i64) local_unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

declare i32 @SHA256_Update(%struct.sha256_state_st*, i8*, i64) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @SHA256_Final(i8*, %struct.sha256_state_st*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { builtin nounwind }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
