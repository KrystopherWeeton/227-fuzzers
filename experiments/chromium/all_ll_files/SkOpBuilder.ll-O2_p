; ModuleID = '../../third_party/skia/src/pathops/SkOpBuilder.cpp'
source_filename = "../../third_party/skia/src/pathops/SkOpBuilder.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkOpContourHead = type { %class.SkOpContour.base, [7 x i8] }
%class.SkOpContour.base = type <{ %class.SkOpGlobalState*, %class.SkOpSegment, %class.SkOpSegment*, %class.SkOpContour*, %struct.SkPathOpsBounds, i32, i32, i32, i8, i8, i8, i8, i8 }>
%class.SkOpGlobalState = type <{ %class.SkArenaAlloc*, %class.SkOpCoincidence*, %class.SkOpContourHead*, i32, i8, i8, i8, i8 }>
%class.SkArenaAlloc = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes, [4 x i8] }>
%class.SkFibBlockSizes = type { i32 }
%class.SkOpCoincidence = type opaque
%class.SkOpSegment = type <{ %class.SkOpSpan, %class.SkOpSpanBase, %class.SkOpContour*, %class.SkOpSegment*, %class.SkOpSegment*, %struct.SkPoint*, %struct.SkPathOpsBounds, float, i32, i32, i32, i8, [7 x i8] }>
%class.SkOpSpan = type <{ %class.SkOpSpanBase.base, [2 x i8], %class.SkOpSpan*, %class.SkOpAngle*, %class.SkOpSpanBase*, i32, i32, i32, i32, i32, i8, i8, [2 x i8] }>
%class.SkOpSpanBase.base = type <{ %class.SkOpPtT, %class.SkOpSegment*, %class.SkOpSpanBase*, %class.SkOpAngle*, %class.SkOpSpan*, i32, i8, i8 }>
%class.SkOpPtT = type <{ double, %struct.SkPoint, %class.SkOpSpanBase*, %class.SkOpPtT*, i8, i8, i8, [5 x i8] }>
%struct.SkPoint = type { float, float }
%class.SkOpAngle = type <{ %struct.SkDCurve, %class.SkDCurveSweep, double, %class.SkLineParameters, %class.SkOpAngle*, %class.SkOpSpanBase*, %class.SkOpSpanBase*, %class.SkOpSpanBase*, %class.SkOpSpanBase*, i32, i8, i8, i8, i8, i8, i8, i8, [5 x i8] }>
%struct.SkDCurve = type { %union.anon }
%union.anon = type { %struct.SkDCubic }
%struct.SkDCubic = type { [4 x %struct.SkDPoint] }
%struct.SkDPoint = type { double, double }
%class.SkDCurveSweep = type <{ %struct.SkDCurve, [2 x %struct.SkDVector], i8, i8, [6 x i8] }>
%struct.SkDVector = type { double, double }
%class.SkLineParameters = type { double, double, double }
%class.SkOpSpanBase = type <{ %class.SkOpPtT, %class.SkOpSegment*, %class.SkOpSpanBase*, %class.SkOpAngle*, %class.SkOpSpan*, i32, i8, i8, [2 x i8] }>
%class.SkOpContour = type <{ %class.SkOpGlobalState*, %class.SkOpSegment, %class.SkOpSegment*, %class.SkOpContour*, %struct.SkPathOpsBounds, i32, i32, i32, i8, i8, i8, i8, i8, [7 x i8] }>
%struct.SkPathOpsBounds = type { %struct.SkRect }
%struct.SkRect = type { float, float, float, float }
%class.SkOpEdgeBuilder = type <{ %class.SkOpGlobalState*, %class.SkPath*, %class.SkTDArray, %class.SkTDArray.2, %class.SkTDArray.1, %class.SkOpContourBuilder, %class.SkOpContourHead*, [2 x i32], i32, i8, i8, i8, i8 }>
%class.SkPath = type <{ %class.sk_sp, i32, %"struct.std::__1::atomic.3", %"struct.std::__1::atomic.3", i8, i8 }>
%class.sk_sp = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.1, %class.SkTDArray.2, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.8 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.3" }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.8 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.9", [3 x i8] }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic.9" = type { %"struct.std::__1::__atomic_base.10" }
%"struct.std::__1::__atomic_base.10" = type { %"struct.std::__1::__cxx_atomic_impl.11" }
%"struct.std::__1::__cxx_atomic_impl.11" = type { %"struct.std::__1::__cxx_atomic_base_impl.12" }
%"struct.std::__1::__cxx_atomic_base_impl.12" = type { i8 }
%"struct.std::__1::atomic.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__cxx_atomic_impl.6" }
%"struct.std::__1::__cxx_atomic_impl.6" = type { %"struct.std::__1::__cxx_atomic_base_impl.7" }
%"struct.std::__1::__cxx_atomic_base_impl.7" = type { i8 }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%class.SkTDArray.2 = type { float*, i32, i32 }
%class.SkTDArray.1 = type { i8*, i32, i32 }
%class.SkOpContourBuilder = type <{ %class.SkOpContour*, [2 x %struct.SkPoint], i8, [7 x i8] }>
%class.SkSTArenaAlloc.15 = type { %"struct.std::__1::array.16", %class.SkArenaAlloc.base, [4 x i8] }
%"struct.std::__1::array.16" = type { [256 x i8] }
%class.SkArenaAlloc.base = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes }>
%class.SkSTArenaAlloc = type { %"struct.std::__1::array", %class.SkArenaAlloc.base, [4 x i8] }
%"struct.std::__1::array" = type { [4096 x i8] }
%class.SkPathWriter = type { %class.SkPath, %class.SkTArray, %class.SkTDArray.13, %class.SkPath*, [2 x %class.SkOpPtT*], %class.SkOpPtT* }
%class.SkTArray = type { %class.SkPath*, i64 }
%class.SkTDArray.13 = type { %class.SkOpPtT**, i32, i32 }
%class.SkOpBuilder = type { %class.SkTArray, %class.SkTDArray.14 }
%class.SkTDArray.14 = type { i32*, i32, i32 }
%class.SkMatrix = type { [9 x float], i32 }

$_ZN8SkTArrayI6SkPathLb0EE12checkReallocEiNS1_11ReallocTypeE = comdat any

@__const._ZN11SkOpBuilder10FixWindingEP6SkPath.contourHead = private unnamed_addr constant %class.SkOpContourHead { %class.SkOpContour.base <{ %class.SkOpGlobalState* inttoptr (i64 -6148914691236517206 to %class.SkOpGlobalState*), %class.SkOpSegment <{ %class.SkOpSpan <{ %class.SkOpSpanBase.base <{ %class.SkOpPtT <{ double 0xFFFFFFFFFFFFFFFF, %struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %class.SkOpSpanBase* inttoptr (i64 -6148914691236517206 to %class.SkOpSpanBase*), %class.SkOpPtT* inttoptr (i64 -6148914691236517206 to %class.SkOpPtT*), i8 -86, i8 -86, i8 -86, [5 x i8] c"\AA\AA\AA\AA\AA" }>, %class.SkOpSegment* inttoptr (i64 -6148914691236517206 to %class.SkOpSegment*), %class.SkOpSpanBase* inttoptr (i64 -6148914691236517206 to %class.SkOpSpanBase*), %class.SkOpAngle* inttoptr (i64 -6148914691236517206 to %class.SkOpAngle*), %class.SkOpSpan* inttoptr (i64 -6148914691236517206 to %class.SkOpSpan*), i32 -1431655766, i8 -86, i8 -86 }>, [2 x i8] c"\AA\AA", %class.SkOpSpan* inttoptr (i64 -6148914691236517206 to %class.SkOpSpan*), %class.SkOpAngle* inttoptr (i64 -6148914691236517206 to %class.SkOpAngle*), %class.SkOpSpanBase* inttoptr (i64 -6148914691236517206 to %class.SkOpSpanBase*), i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i8 -86, i8 -86, [2 x i8] c"\AA\AA" }>, %class.SkOpSpanBase <{ %class.SkOpPtT <{ double 0xFFFFFFFFFFFFFFFF, %struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %class.SkOpSpanBase* inttoptr (i64 -6148914691236517206 to %class.SkOpSpanBase*), %class.SkOpPtT* inttoptr (i64 -6148914691236517206 to %class.SkOpPtT*), i8 -86, i8 -86, i8 -86, [5 x i8] c"\AA\AA\AA\AA\AA" }>, %class.SkOpSegment* inttoptr (i64 -6148914691236517206 to %class.SkOpSegment*), %class.SkOpSpanBase* inttoptr (i64 -6148914691236517206 to %class.SkOpSpanBase*), %class.SkOpAngle* inttoptr (i64 -6148914691236517206 to %class.SkOpAngle*), %class.SkOpSpan* inttoptr (i64 -6148914691236517206 to %class.SkOpSpan*), i32 -1431655766, i8 -86, i8 -86, [2 x i8] c"\AA\AA" }>, %class.SkOpContour* inttoptr (i64 -6148914691236517206 to %class.SkOpContour*), %class.SkOpSegment* inttoptr (i64 -6148914691236517206 to %class.SkOpSegment*), %class.SkOpSegment* inttoptr (i64 -6148914691236517206 to %class.SkOpSegment*), %struct.SkPoint* inttoptr (i64 -6148914691236517206 to %struct.SkPoint*), %struct.SkPathOpsBounds { %struct.SkRect { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 } }, float 0xFFFFFFFFE0000000, i32 -1431655766, i32 -1431655766, i32 -1431655766, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA" }>, %class.SkOpSegment* inttoptr (i64 -6148914691236517206 to %class.SkOpSegment*), %class.SkOpContour* inttoptr (i64 -6148914691236517206 to %class.SkOpContour*), %struct.SkPathOpsBounds { %struct.SkRect { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 } }, i32 -1431655766, i32 -1431655766, i32 -1431655766, i8 -86, i8 -86, i8 -86, i8 -86, i8 -86 }>, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA" }, align 8
@__const._ZN11SkOpBuilder10FixWindingEP6SkPath.builder = private unnamed_addr constant %class.SkOpEdgeBuilder <{ %class.SkOpGlobalState* inttoptr (i64 -6148914691236517206 to %class.SkOpGlobalState*), %class.SkPath* inttoptr (i64 -6148914691236517206 to %class.SkPath*), %class.SkTDArray { %struct.SkPoint* inttoptr (i64 -6148914691236517206 to %struct.SkPoint*), i32 -1431655766, i32 -1431655766 }, %class.SkTDArray.2 { float* inttoptr (i64 -6148914691236517206 to float*), i32 -1431655766, i32 -1431655766 }, %class.SkTDArray.1 { i8* inttoptr (i64 -6148914691236517206 to i8*), i32 -1431655766, i32 -1431655766 }, %class.SkOpContourBuilder <{ %class.SkOpContour* inttoptr (i64 -6148914691236517206 to %class.SkOpContour*), [2 x %struct.SkPoint] [%struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }], i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA" }>, %class.SkOpContourHead* inttoptr (i64 -6148914691236517206 to %class.SkOpContourHead*), [2 x i32] [i32 -1431655766, i32 -1431655766], i32 -1431655766, i8 -86, i8 -86, i8 -86, i8 -86 }>, align 8
@.str = private unnamed_addr constant [51 x i8] c"../../third_party/skia/include/private/SkTDArray.h\00", align 1
@.str.1 = private unnamed_addr constant [11 x i8] c"assert(%s)\00", align 1
@.str.2 = private unnamed_addr constant [22 x i8] c"SkTFitsIn<int>(count)\00", align 1
@.str.3 = private unnamed_addr constant [24 x i8] c"SkTFitsIn<int>(reserve)\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11SkOpBuilder11ReversePathEP6SkPath(%class.SkPath*) local_unnamed_addr #0 align 2 {
  %2 = alloca %class.SkPath, align 8
  %3 = alloca %struct.SkPoint, align 4
  %4 = bitcast %class.SkPath* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #6
  %5 = bitcast %class.SkPath* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 16, i1 false)
  call void @_ZN6SkPathC1Ev(%class.SkPath* nonnull %2) #6
  %6 = bitcast %struct.SkPoint* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #6
  %7 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %3, i64 0, i32 0
  store float 0xFFFFFFFFE0000000, float* %7, align 4
  %8 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %3, i64 0, i32 1
  store float 0xFFFFFFFFE0000000, float* %8, align 4
  %9 = call zeroext i1 @_ZNK6SkPath9getLastPtEP7SkPoint(%class.SkPath* %0, %struct.SkPoint* nonnull %3) #6
  %10 = load float, float* %7, align 4
  %11 = load float, float* %8, align 4
  %12 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath6moveToEff(%class.SkPath* nonnull %2, float %10, float %11) #6
  %13 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath13reversePathToERKS_(%class.SkPath* nonnull %2, %class.SkPath* dereferenceable(16) %0) #6
  %14 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath5closeEv(%class.SkPath* nonnull %2) #6
  %15 = call dereferenceable(16) %class.SkPath* @_ZN6SkPathaSERKS_(%class.SkPath* %0, %class.SkPath* nonnull dereferenceable(16) %2) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #6
  call void @_ZN6SkPathD1Ev(%class.SkPath* nonnull %2) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN6SkPathC1Ev(%class.SkPath*) unnamed_addr #2

declare zeroext i1 @_ZNK6SkPath9getLastPtEP7SkPoint(%class.SkPath*, %struct.SkPoint*) local_unnamed_addr #2

declare dereferenceable(16) %class.SkPath* @_ZN6SkPath13reversePathToERKS_(%class.SkPath*, %class.SkPath* dereferenceable(16)) local_unnamed_addr #2

declare dereferenceable(16) %class.SkPath* @_ZN6SkPath5closeEv(%class.SkPath*) local_unnamed_addr #2

declare dereferenceable(16) %class.SkPath* @_ZN6SkPathaSERKS_(%class.SkPath*, %class.SkPath* dereferenceable(16)) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind
declare void @_ZN6SkPathD1Ev(%class.SkPath*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN11SkOpBuilder10FixWindingEP6SkPath(%class.SkPath*) local_unnamed_addr #0 align 2 {
  %2 = alloca %class.SkPath, align 8
  %3 = alloca %struct.SkPoint, align 4
  %4 = alloca %class.SkSTArenaAlloc.15, align 8
  %5 = alloca %class.SkSTArenaAlloc, align 8
  %6 = alloca %class.SkOpContourHead, align 8
  %7 = alloca %class.SkOpGlobalState, align 8
  %8 = alloca %class.SkOpEdgeBuilder, align 8
  %9 = alloca %class.SkPath, align 8
  %10 = alloca %class.SkPathWriter, align 8
  %11 = getelementptr inbounds %class.SkPath, %class.SkPath* %0, i64 0, i32 4
  %12 = load i8, i8* %11, align 2
  %13 = and i8 %12, 3
  %14 = zext i8 %13 to i32
  switch i32 %14, label %16 [
    i32 3, label %17
    i32 1, label %15
  ]

15:                                               ; preds = %1
  br label %17

16:                                               ; preds = %1
  br label %17

17:                                               ; preds = %1, %16, %15
  %18 = phi i8 [ 0, %15 ], [ 2, %1 ], [ %13, %16 ]
  %19 = getelementptr inbounds %class.SkSTArenaAlloc.15, %class.SkSTArenaAlloc.15* %4, i64 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 288, i8* nonnull %19) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %19, i8 -86, i64 288, i1 false) #6
  %20 = getelementptr inbounds %class.SkSTArenaAlloc.15, %class.SkSTArenaAlloc.15* %4, i64 0, i32 0, i32 0, i64 256
  %21 = bitcast i8* %20 to %class.SkArenaAlloc*
  call void @_ZN12SkArenaAllocC2EPcmm(%class.SkArenaAlloc* %21, i8* nonnull %19, i64 256, i64 256) #6
  %22 = call i32 @_ZNK6SkPath10countVerbsEv(%class.SkPath* %0) #6
  %23 = icmp sgt i32 %22, -1
  br i1 %23, label %25, label %24

24:                                               ; preds = %17
  call void @abort() #7
  unreachable

25:                                               ; preds = %17
  %26 = zext i32 %22 to i64
  %27 = getelementptr inbounds %class.SkSTArenaAlloc.15, %class.SkSTArenaAlloc.15* %4, i64 0, i32 0, i32 0, i64 264
  %28 = bitcast i8* %27 to i8**
  %29 = bitcast i8* %27 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = getelementptr inbounds %class.SkSTArenaAlloc.15, %class.SkSTArenaAlloc.15* %4, i64 0, i32 0, i32 0, i64 272
  %32 = bitcast i8* %31 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = sub i64 %33, %30
  %35 = icmp ult i64 %34, %26
  br i1 %35, label %36, label %38

36:                                               ; preds = %25
  call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %21, i32 %22, i32 1) #6
  %37 = load i64, i64* %29, align 8
  br label %38

38:                                               ; preds = %36, %25
  %39 = phi i64 [ %37, %36 ], [ %30, %25 ]
  %40 = inttoptr i64 %39 to i8*
  %41 = getelementptr inbounds i8, i8* %40, i64 %26
  store i8* %41, i8** %28, align 8
  %42 = call i32 @_ZNK6SkPath8getVerbsEPhi(%class.SkPath* %0, i8* %40, i32 %22) #6
  %43 = icmp sgt i32 %22, 1
  br i1 %43, label %46, label %53

44:                                               ; preds = %46
  %45 = icmp eq i64 %51, %26
  br i1 %45, label %53, label %46

46:                                               ; preds = %38, %44
  %47 = phi i64 [ %51, %44 ], [ 1, %38 ]
  %48 = getelementptr inbounds i8, i8* %40, i64 %47
  %49 = load i8, i8* %48, align 1
  %50 = icmp eq i8 %49, 0
  %51 = add nuw nsw i64 %47, 1
  br i1 %50, label %52, label %44

52:                                               ; preds = %46
  call void @_ZN12SkArenaAllocD2Ev(%class.SkArenaAlloc* %21) #6
  call void @llvm.lifetime.end.p0i8(i64 288, i8* nonnull %19) #6
  br label %71

53:                                               ; preds = %44, %38
  call void @_ZN12SkArenaAllocD2Ev(%class.SkArenaAlloc* %21) #6
  call void @llvm.lifetime.end.p0i8(i64 288, i8* nonnull %19) #6
  %54 = call i32 @_ZN10SkPathPriv21ComputeFirstDirectionERK6SkPath(%class.SkPath* dereferenceable(16) %0) #6
  switch i32 %54, label %67 [
    i32 2, label %71
    i32 0, label %55
  ]

55:                                               ; preds = %53
  %56 = bitcast %class.SkPath* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %56) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %56, i8 -86, i64 16, i1 false) #6
  call void @_ZN6SkPathC1Ev(%class.SkPath* nonnull %2) #6
  %57 = bitcast %struct.SkPoint* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %57) #6
  %58 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %3, i64 0, i32 0
  store float 0xFFFFFFFFE0000000, float* %58, align 4
  %59 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %3, i64 0, i32 1
  store float 0xFFFFFFFFE0000000, float* %59, align 4
  %60 = call zeroext i1 @_ZNK6SkPath9getLastPtEP7SkPoint(%class.SkPath* %0, %struct.SkPoint* nonnull %3) #6
  %61 = load float, float* %58, align 4
  %62 = load float, float* %59, align 4
  %63 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath6moveToEff(%class.SkPath* nonnull %2, float %61, float %62) #6
  %64 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath13reversePathToERKS_(%class.SkPath* nonnull %2, %class.SkPath* dereferenceable(16) %0) #6
  %65 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath5closeEv(%class.SkPath* nonnull %2) #6
  %66 = call dereferenceable(16) %class.SkPath* @_ZN6SkPathaSERKS_(%class.SkPath* %0, %class.SkPath* nonnull dereferenceable(16) %2) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %57) #6
  call void @_ZN6SkPathD1Ev(%class.SkPath* nonnull %2) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %56) #6
  br label %67

67:                                               ; preds = %53, %55
  %68 = load i8, i8* %11, align 2
  %69 = and i8 %68, -4
  %70 = or i8 %69, %18
  store i8 %70, i8* %11, align 2
  br label %242

71:                                               ; preds = %52, %53
  %72 = getelementptr inbounds %class.SkSTArenaAlloc, %class.SkSTArenaAlloc* %5, i64 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4128, i8* nonnull %72) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %72, i8 -86, i64 4128, i1 false)
  %73 = getelementptr inbounds %class.SkSTArenaAlloc, %class.SkSTArenaAlloc* %5, i64 0, i32 0, i32 0, i64 4096
  %74 = bitcast i8* %73 to %class.SkArenaAlloc*
  call void @_ZN12SkArenaAllocC2EPcmm(%class.SkArenaAlloc* %74, i8* nonnull %72, i64 4096, i64 4096) #6
  %75 = bitcast %class.SkOpContourHead* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 344, i8* nonnull %75) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %75, i8* align 8 bitcast (%class.SkOpContourHead* @__const._ZN11SkOpBuilder10FixWindingEP6SkPath.contourHead to i8*), i64 344, i1 false)
  %76 = getelementptr inbounds %class.SkOpContourHead, %class.SkOpContourHead* %6, i64 0, i32 0, i32 2
  %77 = getelementptr inbounds %class.SkOpContourHead, %class.SkOpContourHead* %6, i64 0, i32 0, i32 6
  store i32 0, i32* %77, align 4
  %78 = getelementptr inbounds %class.SkOpContourHead, %class.SkOpContourHead* %6, i64 0, i32 0, i32 8
  store i8 0, i8* %78, align 4
  %79 = bitcast %class.SkOpSegment** %76 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %79, i8 0, i64 16, i1 false) #6
  %80 = bitcast %class.SkOpGlobalState* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %80) #6
  %81 = getelementptr inbounds %class.SkOpGlobalState, %class.SkOpGlobalState* %7, i64 0, i32 3
  %82 = getelementptr inbounds %class.SkOpGlobalState, %class.SkOpGlobalState* %7, i64 0, i32 6
  %83 = bitcast %class.SkOpGlobalState* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %83, i8 -86, i64 32, i1 false)
  call void @_ZN15SkOpGlobalStateC1EP15SkOpContourHeadP12SkArenaAlloc(%class.SkOpGlobalState* nonnull %7, %class.SkOpContourHead* nonnull %6, %class.SkArenaAlloc* %74) #6
  %84 = bitcast %class.SkOpEdgeBuilder* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %84) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %84, i8* align 8 bitcast (%class.SkOpEdgeBuilder* @__const._ZN11SkOpBuilder10FixWindingEP6SkPath.builder to i8*), i64 120, i1 false)
  %85 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %8, i64 0, i32 0
  store %class.SkOpGlobalState* %7, %class.SkOpGlobalState** %85, align 8
  %86 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %8, i64 0, i32 1
  store %class.SkPath* %0, %class.SkPath** %86, align 8
  %87 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %8, i64 0, i32 2
  %88 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %8, i64 0, i32 5
  %89 = bitcast %class.SkOpContourBuilder* %88 to %class.SkOpContourHead**
  %90 = bitcast %class.SkTDArray* %87 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %90, i8 0, i64 48, i1 false) #6
  store %class.SkOpContourHead* %6, %class.SkOpContourHead** %89, align 8
  %91 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %8, i64 0, i32 5, i32 2
  store i8 0, i8* %91, align 8
  %92 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %8, i64 0, i32 6
  store %class.SkOpContourHead* %6, %class.SkOpContourHead** %92, align 8
  %93 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %8, i64 0, i32 10
  store i8 0, i8* %93, align 1
  call void @_ZN15SkOpEdgeBuilder4initEv(%class.SkOpEdgeBuilder* nonnull %8) #6
  %94 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %8, i64 0, i32 11
  %95 = load i8, i8* %94, align 2, !range !2
  %96 = icmp eq i8 %95, 0
  br i1 %96, label %97, label %233

97:                                               ; preds = %71
  %98 = call zeroext i1 @_ZN15SkOpEdgeBuilder6finishEv(%class.SkOpEdgeBuilder* nonnull %8) #6
  br i1 %98, label %99, label %233

99:                                               ; preds = %97
  %100 = bitcast %class.SkOpContourHead* %6 to %class.SkOpContour*
  %101 = load i32, i32* %77, align 4
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %233, label %103

103:                                              ; preds = %99
  %104 = getelementptr inbounds %class.SkOpContourHead, %class.SkOpContourHead* %6, i64 0, i32 0, i32 3
  %105 = load %class.SkOpContour*, %class.SkOpContour** %104, align 8
  %106 = icmp eq %class.SkOpContour* %105, null
  br i1 %106, label %233, label %107

107:                                              ; preds = %103, %126
  %108 = phi %class.SkOpContour* [ %128, %126 ], [ %100, %103 ]
  %109 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %108, i64 0, i32 6
  %110 = load i32, i32* %109, align 4
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %126, label %112

112:                                              ; preds = %107
  %113 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %108, i64 0, i32 1
  br label %114

114:                                              ; preds = %114, %112
  %115 = phi %class.SkOpSegment* [ %113, %112 ], [ %117, %114 ]
  %116 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %115, i64 0, i32 3
  %117 = load %class.SkOpSegment*, %class.SkOpSegment** %116, align 8
  %118 = icmp ne %class.SkOpSegment* %117, null
  %119 = select i1 %118, %class.SkOpSegment* %117, %class.SkOpSegment* %113
  %120 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %119, i64 0, i32 0, i32 0, i32 0
  %121 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %115, i64 0, i32 1, i32 0, i32 3
  %122 = bitcast %class.SkOpPtT** %121 to i64*
  %123 = load i64, i64* %122, align 8
  store %class.SkOpPtT* %120, %class.SkOpPtT** %121, align 8
  %124 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %119, i64 0, i32 0, i32 0, i32 0, i32 3
  %125 = bitcast %class.SkOpPtT** %124 to i64*
  store i64 %123, i64* %125, align 8
  br i1 %118, label %114, label %126

126:                                              ; preds = %114, %107
  %127 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %108, i64 0, i32 3
  %128 = load %class.SkOpContour*, %class.SkOpContour** %127, align 8
  %129 = icmp eq %class.SkOpContour* %128, null
  br i1 %129, label %130, label %107

130:                                              ; preds = %126, %138
  %131 = phi %class.SkOpContour* [ %140, %138 ], [ %100, %126 ]
  %132 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %131, i64 0, i32 6
  %133 = load i32, i32* %132, align 4
  %134 = icmp eq i32 %133, 0
  br i1 %134, label %138, label %135

135:                                              ; preds = %130
  %136 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %131, i64 0, i32 5
  store i32 -1, i32* %136, align 8
  %137 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %131, i64 0, i32 10
  store i8 0, i8* %137, align 2
  br label %138

138:                                              ; preds = %135, %130
  %139 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %131, i64 0, i32 3
  %140 = load %class.SkOpContour*, %class.SkOpContour** %139, align 8
  %141 = icmp eq %class.SkOpContour* %140, null
  br i1 %141, label %142, label %130

142:                                              ; preds = %138
  store i8 3, i8* %82, align 2
  %143 = call %class.SkOpSpan* @_Z15FindSortableTopP15SkOpContourHead(%class.SkOpContourHead* nonnull %6) #6
  %144 = icmp eq %class.SkOpSpan* %143, null
  br i1 %144, label %175, label %145

145:                                              ; preds = %142, %169
  %146 = phi %class.SkOpSpan* [ %170, %169 ], [ %143, %142 ]
  %147 = phi i8 [ %162, %169 ], [ 0, %142 ]
  %148 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %146, i64 0, i32 0, i32 1
  %149 = load %class.SkOpSegment*, %class.SkOpSegment** %148, align 8
  %150 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %149, i64 0, i32 2
  %151 = load %class.SkOpContour*, %class.SkOpContour** %150, align 8
  %152 = load i32, i32* %81, align 8
  %153 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %151, i64 0, i32 5
  %154 = load i32, i32* %153, align 8
  %155 = icmp ne i32 %154, 0
  %156 = and i32 %152, 1
  %157 = icmp ne i32 %156, 0
  %158 = xor i1 %155, %157
  br i1 %158, label %159, label %161

159:                                              ; preds = %145
  %160 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %151, i64 0, i32 10
  store i8 1, i8* %160, align 2
  br label %161

161:                                              ; preds = %159, %145
  %162 = phi i8 [ 1, %159 ], [ %147, %145 ]
  %163 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %151, i64 0, i32 1
  br label %164

164:                                              ; preds = %164, %161
  %165 = phi %class.SkOpSegment* [ %163, %161 ], [ %167, %164 ]
  call void @_ZN11SkOpSegment11markAllDoneEv(%class.SkOpSegment* %165) #6
  %166 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %165, i64 0, i32 3
  %167 = load %class.SkOpSegment*, %class.SkOpSegment** %166, align 8
  %168 = icmp eq %class.SkOpSegment* %167, null
  br i1 %168, label %169, label %164

169:                                              ; preds = %164
  store i32 0, i32* %81, align 8
  %170 = call %class.SkOpSpan* @_Z15FindSortableTopP15SkOpContourHead(%class.SkOpContourHead* nonnull %6) #6
  %171 = icmp eq %class.SkOpSpan* %170, null
  br i1 %171, label %172, label %145

172:                                              ; preds = %169
  %173 = and i8 %162, 1
  %174 = icmp eq i8 %173, 0
  br i1 %174, label %175, label %179

175:                                              ; preds = %142, %172
  %176 = load i8, i8* %11, align 2
  %177 = and i8 %176, -4
  %178 = or i8 %177, %18
  store i8 %178, i8* %11, align 2
  br label %233

179:                                              ; preds = %172
  %180 = bitcast %class.SkPath* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %180) #6
  %181 = bitcast %class.SkPath* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %181, i8 -86, i64 16, i1 false)
  call void @_ZN6SkPathC1Ev(%class.SkPath* nonnull %9) #6
  %182 = bitcast %class.SkPathWriter* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %182) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %182, i8 -86, i64 80, i1 false)
  call void @_ZN12SkPathWriterC1ER6SkPath(%class.SkPathWriter* nonnull %10, %class.SkPath* nonnull dereferenceable(16) %9) #6
  br label %183

183:                                              ; preds = %194, %179
  %184 = phi %class.SkOpContour* [ %100, %179 ], [ %196, %194 ]
  %185 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %184, i64 0, i32 6
  %186 = load i32, i32* %185, align 4
  %187 = icmp eq i32 %186, 0
  br i1 %187, label %194, label %188

188:                                              ; preds = %183
  %189 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %184, i64 0, i32 10
  %190 = load i8, i8* %189, align 2, !range !2
  %191 = icmp eq i8 %190, 0
  br i1 %191, label %193, label %192

192:                                              ; preds = %188
  call void @_ZNK11SkOpContour13toReversePathEP12SkPathWriter(%class.SkOpContour* %184, %class.SkPathWriter* nonnull %10) #6
  br label %194

193:                                              ; preds = %188
  call void @_ZNK11SkOpContour6toPathEP12SkPathWriter(%class.SkOpContour* %184, %class.SkPathWriter* nonnull %10) #6
  br label %194

194:                                              ; preds = %183, %192, %193
  %195 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %184, i64 0, i32 3
  %196 = load %class.SkOpContour*, %class.SkOpContour** %195, align 8
  %197 = icmp eq %class.SkOpContour* %196, null
  br i1 %197, label %198, label %183

198:                                              ; preds = %194
  %199 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %10, i64 0, i32 3
  %200 = load %class.SkPath*, %class.SkPath** %199, align 8
  %201 = call dereferenceable(16) %class.SkPath* @_ZN6SkPathaSERKS_(%class.SkPath* %0, %class.SkPath* dereferenceable(16) %200) #6
  %202 = load i8, i8* %11, align 2
  %203 = and i8 %202, -4
  %204 = or i8 %203, %18
  store i8 %204, i8* %11, align 2
  %205 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %10, i64 0, i32 2
  %206 = bitcast %class.SkTDArray.13* %205 to i8**
  %207 = load i8*, i8** %206, align 8
  call void @_Z7sk_freePv(i8* %207) #6
  %208 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %10, i64 0, i32 1
  %209 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %10, i64 0, i32 1, i32 1
  %210 = load i64, i64* %209, align 8
  %211 = and i64 %210, 4294967294
  %212 = icmp eq i64 %211, 0
  br i1 %212, label %215, label %213

213:                                              ; preds = %198
  %214 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %208, i64 0, i32 0
  br label %219

215:                                              ; preds = %219, %198
  %216 = phi i64 [ %210, %198 ], [ %224, %219 ]
  %217 = and i64 %216, 1
  %218 = icmp eq i64 %217, 0
  br i1 %218, label %231, label %228

219:                                              ; preds = %219, %213
  %220 = phi i64 [ 0, %213 ], [ %223, %219 ]
  %221 = load %class.SkPath*, %class.SkPath** %214, align 8
  %222 = getelementptr inbounds %class.SkPath, %class.SkPath* %221, i64 %220
  call void @_ZN6SkPathD1Ev(%class.SkPath* %222) #6
  %223 = add nuw nsw i64 %220, 1
  %224 = load i64, i64* %209, align 8
  %225 = lshr i64 %224, 1
  %226 = and i64 %225, 2147483647
  %227 = icmp ult i64 %223, %226
  br i1 %227, label %219, label %215

228:                                              ; preds = %215
  %229 = bitcast %class.SkTArray* %208 to i8**
  %230 = load i8*, i8** %229, align 8
  call void @_Z7sk_freePv(i8* %230) #6
  br label %231

231:                                              ; preds = %215, %228
  %232 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %10, i64 0, i32 0
  call void @_ZN6SkPathD1Ev(%class.SkPath* nonnull %232) #6
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %182) #6
  call void @_ZN6SkPathD1Ev(%class.SkPath* nonnull %9) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %180) #6
  br label %233

233:                                              ; preds = %71, %175, %231, %103, %99, %97
  %234 = phi i1 [ false, %97 ], [ false, %71 ], [ true, %99 ], [ false, %103 ], [ true, %231 ], [ true, %175 ]
  %235 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %8, i64 0, i32 4, i32 0
  %236 = load i8*, i8** %235, align 8
  call void @_Z7sk_freePv(i8* %236) #6
  %237 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %8, i64 0, i32 3
  %238 = bitcast %class.SkTDArray.2* %237 to i8**
  %239 = load i8*, i8** %238, align 8
  call void @_Z7sk_freePv(i8* %239) #6
  %240 = bitcast %class.SkTDArray* %87 to i8**
  %241 = load i8*, i8** %240, align 8
  call void @_Z7sk_freePv(i8* %241) #6
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %84) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %80) #6
  call void @llvm.lifetime.end.p0i8(i64 344, i8* nonnull %75) #6
  call void @_ZN12SkArenaAllocD2Ev(%class.SkArenaAlloc* %74) #6
  call void @llvm.lifetime.end.p0i8(i64 4128, i8* nonnull %72) #6
  br label %242

242:                                              ; preds = %67, %233
  %243 = phi i1 [ %234, %233 ], [ true, %67 ]
  ret i1 %243
}

declare i32 @_ZN10SkPathPriv21ComputeFirstDirectionERK6SkPath(%class.SkPath* dereferenceable(16)) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN15SkOpGlobalStateC1EP15SkOpContourHeadP12SkArenaAlloc(%class.SkOpGlobalState*, %class.SkOpContourHead*, %class.SkArenaAlloc*) unnamed_addr #2

declare zeroext i1 @_ZN15SkOpEdgeBuilder6finishEv(%class.SkOpEdgeBuilder*) local_unnamed_addr #2

declare %class.SkOpSpan* @_Z15FindSortableTopP15SkOpContourHead(%class.SkOpContourHead*) local_unnamed_addr #2

declare void @_ZN12SkPathWriterC1ER6SkPath(%class.SkPathWriter*, %class.SkPath* dereferenceable(16)) unnamed_addr #2

declare void @_ZNK11SkOpContour13toReversePathEP12SkPathWriter(%class.SkOpContour*, %class.SkPathWriter*) local_unnamed_addr #2

declare void @_ZNK11SkOpContour6toPathEP12SkPathWriter(%class.SkOpContour*, %class.SkPathWriter*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11SkOpBuilder3addERK6SkPath8SkPathOp(%class.SkOpBuilder*, %class.SkPath* dereferenceable(16), i32) local_unnamed_addr #0 align 2 {
  %4 = alloca %class.SkPath, align 8
  %5 = getelementptr inbounds %class.SkOpBuilder, %class.SkOpBuilder* %0, i64 0, i32 1
  %6 = getelementptr inbounds %class.SkOpBuilder, %class.SkOpBuilder* %0, i64 0, i32 1, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  %9 = icmp ne i32 %2, 2
  %10 = and i1 %9, %8
  br i1 %10, label %11, label %54

11:                                               ; preds = %3
  %12 = bitcast %class.SkPath* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %12) #6
  call void @_ZN6SkPathC1Ev(%class.SkPath* nonnull %4) #6
  %13 = getelementptr inbounds %class.SkOpBuilder, %class.SkOpBuilder* %0, i64 0, i32 0
  call void @_ZN8SkTArrayI6SkPathLb0EE12checkReallocEiNS1_11ReallocTypeE(%class.SkTArray* %13, i32 1, i32 1) #6
  %14 = getelementptr inbounds %class.SkOpBuilder, %class.SkOpBuilder* %0, i64 0, i32 0, i32 0
  %15 = load %class.SkPath*, %class.SkPath** %14, align 8
  %16 = getelementptr inbounds %class.SkOpBuilder, %class.SkOpBuilder* %0, i64 0, i32 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = lshr i64 %17, 1
  %19 = and i64 %18, 2147483647
  %20 = getelementptr inbounds %class.SkPath, %class.SkPath* %15, i64 %19
  %21 = add i64 %17, 2
  %22 = and i64 %21, 4294967294
  %23 = and i64 %17, -4294967295
  %24 = or i64 %22, %23
  store i64 %24, i64* %16, align 8
  call void @_ZN6SkPathC1Ev(%class.SkPath* %20) #6
  %25 = call dereferenceable(16) %class.SkPath* @_ZN6SkPathaSERKS_(%class.SkPath* %20, %class.SkPath* nonnull dereferenceable(16) %4) #6
  call void @_ZN6SkPathD1Ev(%class.SkPath* nonnull %4) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %12) #6
  %26 = load i32, i32* %6, align 4
  %27 = add i32 %26, 1
  %28 = icmp sgt i32 %27, -1
  br i1 %28, label %30, label %29

29:                                               ; preds = %11
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 354, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i64 0, i64 0)) #7
  unreachable

30:                                               ; preds = %11
  %31 = getelementptr inbounds %class.SkOpBuilder, %class.SkOpBuilder* %0, i64 0, i32 1, i32 1
  %32 = load i32, i32* %31, align 8
  %33 = icmp slt i32 %32, %27
  br i1 %33, label %37, label %34

34:                                               ; preds = %30
  %35 = getelementptr inbounds %class.SkTDArray.14, %class.SkTDArray.14* %5, i64 0, i32 0
  %36 = load i32*, i32** %35, align 8
  br label %50

37:                                               ; preds = %30
  %38 = add i32 %26, 5
  %39 = lshr i32 %38, 2
  %40 = add nuw i32 %39, %38
  %41 = icmp sgt i32 %40, -1
  br i1 %41, label %43, label %42

42:                                               ; preds = %37
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 374, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0)) #7
  unreachable

43:                                               ; preds = %37
  store i32 %40, i32* %31, align 8
  %44 = bitcast %class.SkTDArray.14* %5 to i8**
  %45 = load i8*, i8** %44, align 8
  %46 = sext i32 %40 to i64
  %47 = shl nsw i64 %46, 2
  %48 = call i8* @_Z16sk_realloc_throwPvm(i8* %45, i64 %47) #6
  store i8* %48, i8** %44, align 8
  %49 = bitcast i8* %48 to i32*
  br label %50

50:                                               ; preds = %34, %43
  %51 = phi i32* [ %36, %34 ], [ %49, %43 ]
  store i32 %27, i32* %6, align 4
  %52 = sext i32 %26 to i64
  %53 = getelementptr inbounds i32, i32* %51, i64 %52
  store i32 2, i32* %53, align 4
  br label %54

54:                                               ; preds = %50, %3
  %55 = getelementptr inbounds %class.SkOpBuilder, %class.SkOpBuilder* %0, i64 0, i32 0
  call void @_ZN8SkTArrayI6SkPathLb0EE12checkReallocEiNS1_11ReallocTypeE(%class.SkTArray* %55, i32 1, i32 1) #6
  %56 = getelementptr inbounds %class.SkOpBuilder, %class.SkOpBuilder* %0, i64 0, i32 0, i32 0
  %57 = load %class.SkPath*, %class.SkPath** %56, align 8
  %58 = getelementptr inbounds %class.SkOpBuilder, %class.SkOpBuilder* %0, i64 0, i32 0, i32 1
  %59 = load i64, i64* %58, align 8
  %60 = lshr i64 %59, 1
  %61 = and i64 %60, 2147483647
  %62 = getelementptr inbounds %class.SkPath, %class.SkPath* %57, i64 %61
  %63 = add i64 %59, 2
  %64 = and i64 %63, 4294967294
  %65 = and i64 %59, -4294967295
  %66 = or i64 %64, %65
  store i64 %66, i64* %58, align 8
  call void @_ZN6SkPathC1Ev(%class.SkPath* %62) #6
  %67 = call dereferenceable(16) %class.SkPath* @_ZN6SkPathaSERKS_(%class.SkPath* %62, %class.SkPath* dereferenceable(16) %1) #6
  %68 = load i32, i32* %6, align 4
  %69 = add i32 %68, 1
  %70 = icmp sgt i32 %69, -1
  br i1 %70, label %72, label %71

71:                                               ; preds = %54
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 354, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i64 0, i64 0)) #7
  unreachable

72:                                               ; preds = %54
  %73 = getelementptr inbounds %class.SkOpBuilder, %class.SkOpBuilder* %0, i64 0, i32 1, i32 1
  %74 = load i32, i32* %73, align 8
  %75 = icmp slt i32 %74, %69
  br i1 %75, label %79, label %76

76:                                               ; preds = %72
  %77 = getelementptr inbounds %class.SkTDArray.14, %class.SkTDArray.14* %5, i64 0, i32 0
  %78 = load i32*, i32** %77, align 8
  br label %92

79:                                               ; preds = %72
  %80 = add i32 %68, 5
  %81 = lshr i32 %80, 2
  %82 = add nuw i32 %81, %80
  %83 = icmp sgt i32 %82, -1
  br i1 %83, label %85, label %84

84:                                               ; preds = %79
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 374, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0)) #7
  unreachable

85:                                               ; preds = %79
  store i32 %82, i32* %73, align 8
  %86 = bitcast %class.SkTDArray.14* %5 to i8**
  %87 = load i8*, i8** %86, align 8
  %88 = sext i32 %82 to i64
  %89 = shl nsw i64 %88, 2
  %90 = call i8* @_Z16sk_realloc_throwPvm(i8* %87, i64 %89) #6
  store i8* %90, i8** %86, align 8
  %91 = bitcast i8* %90 to i32*
  br label %92

92:                                               ; preds = %76, %85
  %93 = phi i32* [ %78, %76 ], [ %91, %85 ]
  store i32 %69, i32* %6, align 4
  %94 = sext i32 %68 to i64
  %95 = getelementptr inbounds i32, i32* %93, i64 %94
  store i32 %2, i32* %95, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11SkOpBuilder5resetEv(%class.SkOpBuilder*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkOpBuilder, %class.SkOpBuilder* %0, i64 0, i32 0
  %3 = getelementptr inbounds %class.SkOpBuilder, %class.SkOpBuilder* %0, i64 0, i32 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = lshr i64 %4, 1
  %6 = trunc i64 %5 to i32
  %7 = and i32 %6, 2147483647
  %8 = and i64 %4, -4294967295
  store i64 %8, i64* %3, align 8
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %26, label %10

10:                                               ; preds = %1
  %11 = getelementptr inbounds %class.SkOpBuilder, %class.SkOpBuilder* %0, i64 0, i32 0, i32 0
  %12 = load %class.SkPath*, %class.SkPath** %11, align 8
  tail call void @_ZN6SkPathD1Ev(%class.SkPath* %12) #6
  %13 = icmp eq i32 %7, 1
  br i1 %13, label %26, label %14

14:                                               ; preds = %10, %14
  %15 = phi i32 [ %24, %14 ], [ 1, %10 ]
  %16 = load i64, i64* %3, align 8
  %17 = load %class.SkPath*, %class.SkPath** %11, align 8
  %18 = lshr i64 %16, 1
  %19 = trunc i64 %18 to i32
  %20 = and i32 %19, 2147483647
  %21 = add nuw nsw i32 %20, %15
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds %class.SkPath, %class.SkPath* %17, i64 %22
  tail call void @_ZN6SkPathD1Ev(%class.SkPath* %23) #6
  %24 = add nuw nsw i32 %15, 1
  %25 = icmp eq i32 %24, %7
  br i1 %25, label %26, label %14

26:                                               ; preds = %14, %1, %10
  tail call void @_ZN8SkTArrayI6SkPathLb0EE12checkReallocEiNS1_11ReallocTypeE(%class.SkTArray* %2, i32 0, i32 2) #6
  %27 = load i64, i64* %3, align 8
  %28 = and i64 %27, -4294967297
  store i64 %28, i64* %3, align 8
  %29 = getelementptr inbounds %class.SkOpBuilder, %class.SkOpBuilder* %0, i64 0, i32 1
  %30 = getelementptr inbounds %class.SkTDArray.14, %class.SkTDArray.14* %29, i64 0, i32 0
  %31 = load i32*, i32** %30, align 8
  %32 = icmp eq i32* %31, null
  br i1 %32, label %36, label %33

33:                                               ; preds = %26
  %34 = bitcast i32* %31 to i8*
  tail call void @_Z7sk_freePv(i8* nonnull %34) #6
  %35 = bitcast %class.SkTDArray.14* %29 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %35, i8 0, i64 16, i1 false) #6
  br label %36

36:                                               ; preds = %26, %33
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN11SkOpBuilder7resolveEP6SkPath(%class.SkOpBuilder*, %class.SkPath*) local_unnamed_addr #0 align 2 {
  %3 = alloca %class.SkPath, align 8
  %4 = alloca %struct.SkPoint, align 4
  %5 = alloca %class.SkMatrix, align 16
  %6 = alloca %class.SkPath, align 8
  %7 = alloca %class.SkPath, align 8
  %8 = bitcast %class.SkPath* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %8) #6
  %9 = bitcast %class.SkPath* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 16, i1 false)
  call void @_ZN6SkPathC1ERKS_(%class.SkPath* nonnull %6, %class.SkPath* dereferenceable(16) %1) #6
  %10 = getelementptr inbounds %class.SkOpBuilder, %class.SkOpBuilder* %0, i64 0, i32 1
  %11 = getelementptr inbounds %class.SkOpBuilder, %class.SkOpBuilder* %0, i64 0, i32 1, i32 2
  %12 = load i32, i32* %11, align 4
  %13 = icmp sgt i32 %12, 0
  br i1 %13, label %14, label %151

14:                                               ; preds = %2
  %15 = getelementptr inbounds %class.SkOpBuilder, %class.SkOpBuilder* %0, i64 0, i32 0, i32 0
  %16 = getelementptr inbounds %class.SkTDArray.14, %class.SkTDArray.14* %10, i64 0, i32 0
  %17 = bitcast %class.SkPath* %3 to i8*
  %18 = bitcast %struct.SkPoint* %4 to i8*
  %19 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %4, i64 0, i32 0
  %20 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %4, i64 0, i32 1
  %21 = zext i32 %12 to i64
  br label %22

22:                                               ; preds = %121, %14
  %23 = phi i64 [ 0, %14 ], [ %124, %121 ]
  %24 = phi i32 [ 2, %14 ], [ %123, %121 ]
  %25 = phi i8 [ 1, %14 ], [ %122, %121 ]
  %26 = load %class.SkPath*, %class.SkPath** %15, align 8
  %27 = getelementptr inbounds %class.SkPath, %class.SkPath* %26, i64 %23
  %28 = load i32*, i32** %16, align 8
  %29 = getelementptr inbounds i32, i32* %28, i64 %23
  %30 = load i32, i32* %29, align 4
  %31 = icmp eq i32 %30, 2
  br i1 %31, label %32, label %129

32:                                               ; preds = %22
  %33 = getelementptr inbounds %class.SkPath, %class.SkPath* %26, i64 %23, i32 4
  %34 = load i8, i8* %33, align 2
  %35 = and i8 %34, 2
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %37, label %129

37:                                               ; preds = %32
  %38 = call i32 @_ZNK6SkPath12getConvexityEv(%class.SkPath* %27) #6
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %55

40:                                               ; preds = %37
  %41 = call i32 @_ZN10SkPathPriv21ComputeFirstDirectionERK6SkPath(%class.SkPath* dereferenceable(16) %27) #6
  %42 = icmp eq i32 %41, 2
  br i1 %42, label %129, label %43

43:                                               ; preds = %40
  %44 = icmp eq i32 %24, 2
  br i1 %44, label %121, label %45

45:                                               ; preds = %43
  %46 = icmp eq i32 %24, %41
  br i1 %46, label %121, label %47

47:                                               ; preds = %45
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %17) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 -86, i64 16, i1 false) #6
  call void @_ZN6SkPathC1Ev(%class.SkPath* nonnull %3) #6
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #6
  store float 0xFFFFFFFFE0000000, float* %19, align 4
  store float 0xFFFFFFFFE0000000, float* %20, align 4
  %48 = call zeroext i1 @_ZNK6SkPath9getLastPtEP7SkPoint(%class.SkPath* %27, %struct.SkPoint* nonnull %4) #6
  %49 = load float, float* %19, align 4
  %50 = load float, float* %20, align 4
  %51 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath6moveToEff(%class.SkPath* nonnull %3, float %49, float %50) #6
  %52 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath13reversePathToERKS_(%class.SkPath* nonnull %3, %class.SkPath* dereferenceable(16) %27) #6
  %53 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath5closeEv(%class.SkPath* nonnull %3) #6
  %54 = call dereferenceable(16) %class.SkPath* @_ZN6SkPathaSERKS_(%class.SkPath* %27, %class.SkPath* nonnull dereferenceable(16) %3) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #6
  call void @_ZN6SkPathD1Ev(%class.SkPath* nonnull %3) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %17) #6
  br label %121

55:                                               ; preds = %37
  %56 = getelementptr inbounds %class.SkPath, %class.SkPath* %27, i64 0, i32 0, i32 0
  %57 = load %class.SkPathRef*, %class.SkPathRef** %56, align 8
  %58 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %57, i64 0, i32 9
  %59 = load i8, i8* %58, align 8
  %60 = icmp eq i8 %59, 0
  br i1 %60, label %70, label %61

61:                                               ; preds = %55
  %62 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %57, i64 0, i32 1
  %63 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %57, i64 0, i32 3, i32 0
  %64 = load %struct.SkPoint*, %struct.SkPoint** %63, align 8
  %65 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %57, i64 0, i32 3, i32 2
  %66 = load i32, i32* %65, align 4
  %67 = call zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect* %62, %struct.SkPoint* %64, i32 %66) #6
  %68 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %57, i64 0, i32 10
  %69 = zext i1 %67 to i8
  store i8 %69, i8* %68, align 1
  store i8 0, i8* %58, align 8
  br label %70

70:                                               ; preds = %55, %61
  %71 = icmp eq i64 %23, 0
  br i1 %71, label %121, label %72

72:                                               ; preds = %70
  %73 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %57, i64 0, i32 1, i32 0
  %74 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %57, i64 0, i32 1, i32 1
  %75 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %57, i64 0, i32 1, i32 2
  %76 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %57, i64 0, i32 1, i32 3
  br label %79

77:                                               ; preds = %96
  %78 = icmp eq i64 %120, %23
  br i1 %78, label %121, label %79

79:                                               ; preds = %77, %72
  %80 = phi i64 [ 0, %72 ], [ %120, %77 ]
  %81 = load %class.SkPath*, %class.SkPath** %15, align 8
  %82 = getelementptr inbounds %class.SkPath, %class.SkPath* %81, i64 %80, i32 0, i32 0
  %83 = load %class.SkPathRef*, %class.SkPathRef** %82, align 8
  %84 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %83, i64 0, i32 9
  %85 = load i8, i8* %84, align 8
  %86 = icmp eq i8 %85, 0
  br i1 %86, label %96, label %87

87:                                               ; preds = %79
  %88 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %83, i64 0, i32 1
  %89 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %83, i64 0, i32 3, i32 0
  %90 = load %struct.SkPoint*, %struct.SkPoint** %89, align 8
  %91 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %83, i64 0, i32 3, i32 2
  %92 = load i32, i32* %91, align 4
  %93 = call zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect* %88, %struct.SkPoint* %90, i32 %92) #6
  %94 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %83, i64 0, i32 10
  %95 = zext i1 %93 to i8
  store i8 %95, i8* %94, align 1
  store i8 0, i8* %84, align 8
  br label %96

96:                                               ; preds = %79, %87
  %97 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %83, i64 0, i32 1, i32 0
  %98 = load float, float* %97, align 4
  %99 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %83, i64 0, i32 1, i32 1
  %100 = load float, float* %99, align 4
  %101 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %83, i64 0, i32 1, i32 2
  %102 = load float, float* %101, align 4
  %103 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %83, i64 0, i32 1, i32 3
  %104 = load float, float* %103, align 4
  %105 = load float, float* %73, align 4
  %106 = load float, float* %74, align 4
  %107 = load float, float* %75, align 4
  %108 = load float, float* %76, align 4
  %109 = fcmp olt float %98, %105
  %110 = select i1 %109, float %105, float %98
  %111 = fcmp olt float %107, %102
  %112 = select i1 %111, float %107, float %102
  %113 = fcmp olt float %100, %106
  %114 = select i1 %113, float %106, float %100
  %115 = fcmp olt float %108, %104
  %116 = fcmp olt float %110, %112
  %117 = select i1 %115, float %108, float %104
  %118 = fcmp olt float %114, %117
  %119 = and i1 %116, %118
  %120 = add nuw nsw i64 %80, 1
  br i1 %119, label %121, label %77

121:                                              ; preds = %96, %77, %70, %43, %45, %47
  %122 = phi i8 [ %25, %47 ], [ %25, %45 ], [ %25, %43 ], [ %25, %70 ], [ %25, %77 ], [ 0, %96 ]
  %123 = phi i32 [ %24, %47 ], [ %24, %45 ], [ %41, %43 ], [ %24, %70 ], [ %24, %77 ], [ %24, %96 ]
  %124 = add nuw nsw i64 %23, 1
  %125 = icmp eq i64 %124, %21
  br i1 %125, label %126, label %22

126:                                              ; preds = %121
  %127 = and i8 %122, 1
  %128 = icmp eq i8 %127, 0
  br i1 %128, label %129, label %151

129:                                              ; preds = %32, %40, %22, %126
  %130 = getelementptr inbounds %class.SkOpBuilder, %class.SkOpBuilder* %0, i64 0, i32 0, i32 0
  %131 = load %class.SkPath*, %class.SkPath** %130, align 8
  %132 = call dereferenceable(16) %class.SkPath* @_ZN6SkPathaSERKS_(%class.SkPath* %1, %class.SkPath* dereferenceable(16) %131) #6
  %133 = icmp sgt i32 %12, 1
  br i1 %133, label %134, label %150

134:                                              ; preds = %129
  %135 = getelementptr inbounds %class.SkTDArray.14, %class.SkTDArray.14* %10, i64 0, i32 0
  %136 = zext i32 %12 to i64
  br label %139

137:                                              ; preds = %139
  %138 = icmp eq i64 %147, %136
  br i1 %138, label %150, label %139

139:                                              ; preds = %137, %134
  %140 = phi i64 [ 1, %134 ], [ %147, %137 ]
  %141 = load %class.SkPath*, %class.SkPath** %130, align 8
  %142 = getelementptr inbounds %class.SkPath, %class.SkPath* %141, i64 %140
  %143 = load i32*, i32** %135, align 8
  %144 = getelementptr inbounds i32, i32* %143, i64 %140
  %145 = load i32, i32* %144, align 4
  %146 = call zeroext i1 @_Z2OpRK6SkPathS1_8SkPathOpPS_(%class.SkPath* dereferenceable(16) %1, %class.SkPath* dereferenceable(16) %142, i32 %145, %class.SkPath* %1) #6
  %147 = add nuw nsw i64 %140, 1
  br i1 %146, label %137, label %148

148:                                              ; preds = %139
  call void @_ZN11SkOpBuilder5resetEv(%class.SkOpBuilder* %0)
  %149 = call dereferenceable(16) %class.SkPath* @_ZN6SkPathaSERKS_(%class.SkPath* %1, %class.SkPath* nonnull dereferenceable(16) %6) #6
  br label %193

150:                                              ; preds = %137, %129
  call void @_ZN11SkOpBuilder5resetEv(%class.SkOpBuilder* %0)
  br label %193

151:                                              ; preds = %2, %126
  %152 = bitcast %class.SkPath* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %152) #6
  %153 = bitcast %class.SkPath* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %153, i8 -86, i64 16, i1 false)
  call void @_ZN6SkPathC1Ev(%class.SkPath* nonnull %7) #6
  br i1 %13, label %154, label %187

154:                                              ; preds = %151
  %155 = getelementptr inbounds %class.SkOpBuilder, %class.SkOpBuilder* %0, i64 0, i32 0, i32 0
  %156 = bitcast %class.SkMatrix* %5 to i8*
  %157 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 1
  %158 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 4
  %159 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 8
  %160 = zext i32 %12 to i64
  %161 = bitcast %class.SkMatrix* %5 to <4 x float>*
  %162 = bitcast float* %158 to <4 x float>*
  br label %163

163:                                              ; preds = %184, %154
  %164 = phi i64 [ 0, %154 ], [ %185, %184 ]
  %165 = load %class.SkPath*, %class.SkPath** %155, align 8
  %166 = getelementptr inbounds %class.SkPath, %class.SkPath* %165, i64 %164
  %167 = call zeroext i1 @_Z8SimplifyRK6SkPathPS_(%class.SkPath* dereferenceable(16) %166, %class.SkPath* %166) #6
  br i1 %167, label %169, label %168

168:                                              ; preds = %163
  call void @_ZN11SkOpBuilder5resetEv(%class.SkOpBuilder* %0)
  br label %189

169:                                              ; preds = %163
  %170 = load %class.SkPath*, %class.SkPath** %155, align 8
  %171 = getelementptr inbounds %class.SkPath, %class.SkPath* %170, i64 %164
  %172 = getelementptr inbounds %class.SkPath, %class.SkPath* %171, i64 0, i32 0, i32 0
  %173 = load %class.SkPathRef*, %class.SkPathRef** %172, align 8
  %174 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %173, i64 0, i32 4, i32 2
  %175 = load i32, i32* %174, align 4
  %176 = icmp eq i32 %175, 0
  br i1 %176, label %184, label %177

177:                                              ; preds = %169
  %178 = call zeroext i1 @_ZN11SkOpBuilder10FixWindingEP6SkPath(%class.SkPath* %171)
  br i1 %178, label %179, label %189

179:                                              ; preds = %177
  %180 = load %class.SkPath*, %class.SkPath** %155, align 8
  %181 = getelementptr inbounds %class.SkPath, %class.SkPath* %180, i64 %164
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %156) #6
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %161, align 16
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %162, align 16
  store float 1.000000e+00, float* %159, align 16
  store i32 16, i32* %157, align 4
  %182 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix5resetEv(%class.SkMatrix* nonnull %5) #6
  %183 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath7addPathERKS_RK8SkMatrixNS_11AddPathModeE(%class.SkPath* nonnull %7, %class.SkPath* dereferenceable(16) %181, %class.SkMatrix* nonnull dereferenceable(40) %5, i32 0) #6
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %156) #6
  br label %184

184:                                              ; preds = %169, %179
  %185 = add nuw nsw i64 %164, 1
  %186 = icmp eq i64 %185, %160
  br i1 %186, label %187, label %163

187:                                              ; preds = %184, %151
  call void @_ZN11SkOpBuilder5resetEv(%class.SkOpBuilder* %0)
  %188 = call zeroext i1 @_Z8SimplifyRK6SkPathPS_(%class.SkPath* nonnull dereferenceable(16) %7, %class.SkPath* %1) #6
  br i1 %188, label %191, label %189

189:                                              ; preds = %177, %187, %168
  %190 = call dereferenceable(16) %class.SkPath* @_ZN6SkPathaSERKS_(%class.SkPath* %1, %class.SkPath* nonnull dereferenceable(16) %6) #6
  br label %191

191:                                              ; preds = %189, %187
  %192 = phi i1 [ true, %187 ], [ false, %189 ]
  call void @_ZN6SkPathD1Ev(%class.SkPath* nonnull %7) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %152) #6
  br label %193

193:                                              ; preds = %148, %191, %150
  %194 = phi i1 [ %192, %191 ], [ true, %150 ], [ false, %148 ]
  call void @_ZN6SkPathD1Ev(%class.SkPath* nonnull %6) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %8) #6
  ret i1 %194
}

declare void @_ZN6SkPathC1ERKS_(%class.SkPath*, %class.SkPath* dereferenceable(16)) unnamed_addr #2

declare zeroext i1 @_Z2OpRK6SkPathS1_8SkPathOpPS_(%class.SkPath* dereferenceable(16), %class.SkPath* dereferenceable(16), i32, %class.SkPath*) local_unnamed_addr #2

declare zeroext i1 @_Z8SimplifyRK6SkPathPS_(%class.SkPath* dereferenceable(16), %class.SkPath*) local_unnamed_addr #2

declare dereferenceable(16) %class.SkPath* @_ZN6SkPath6moveToEff(%class.SkPath*, float, float) local_unnamed_addr #2

declare i32 @_ZNK6SkPath10countVerbsEv(%class.SkPath*) local_unnamed_addr #2

declare i32 @_ZNK6SkPath8getVerbsEPhi(%class.SkPath*, i8*, i32) local_unnamed_addr #2

declare void @_ZN12SkArenaAllocC2EPcmm(%class.SkArenaAlloc*, i8*, i64, i64) unnamed_addr #2

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #4

declare void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc*, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN12SkArenaAllocD2Ev(%class.SkArenaAlloc*) unnamed_addr #3

declare void @_ZN15SkOpEdgeBuilder4initEv(%class.SkOpEdgeBuilder*) local_unnamed_addr #2

declare void @_ZN11SkOpSegment11markAllDoneEv(%class.SkOpSegment*) local_unnamed_addr #2

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #2

declare i32 @_ZNK6SkPath12getConvexityEv(%class.SkPath*) local_unnamed_addr #2

declare zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect*, %struct.SkPoint*, i32) local_unnamed_addr #2

declare dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix5resetEv(%class.SkMatrix*) local_unnamed_addr #2

declare dereferenceable(16) %class.SkPath* @_ZN6SkPath7addPathERKS_RK8SkMatrixNS_11AddPathModeE(%class.SkPath*, %class.SkPath* dereferenceable(16), %class.SkMatrix* dereferenceable(40), i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkTArrayI6SkPathLb0EE12checkReallocEiNS1_11ReallocTypeE(%class.SkTArray*, i32, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 1
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 2147483647
  %9 = add nsw i32 %8, %1
  %10 = sext i32 %9 to i64
  %11 = lshr i64 %5, 33
  %12 = icmp slt i64 %11, %10
  %13 = mul nsw i64 %10, 3
  %14 = icmp sle i64 %11, %13
  %15 = and i64 %5, 1
  %16 = icmp eq i64 %15, 0
  %17 = or i1 %16, %14
  br i1 %17, label %21, label %18

18:                                               ; preds = %3
  %19 = and i64 %5, 4294967296
  %20 = icmp eq i64 %19, 0
  br label %21

21:                                               ; preds = %3, %18
  %22 = phi i1 [ false, %3 ], [ %20, %18 ]
  %23 = or i1 %12, %22
  br i1 %23, label %24, label %76

24:                                               ; preds = %21
  %25 = icmp eq i32 %2, 0
  br i1 %25, label %32, label %26

26:                                               ; preds = %24
  %27 = add nsw i64 %10, 1
  %28 = ashr i64 %27, 1
  %29 = add nsw i64 %10, 7
  %30 = add nsw i64 %29, %28
  %31 = and i64 %30, -8
  br label %32

32:                                               ; preds = %24, %26
  %33 = phi i64 [ %31, %26 ], [ %10, %24 ]
  %34 = icmp eq i64 %33, %11
  br i1 %34, label %76, label %35

35:                                               ; preds = %32
  %36 = icmp slt i64 %33, 2147483647
  %37 = select i1 %36, i64 %33, i64 2147483647
  %38 = icmp sgt i64 %37, -2147483647
  %39 = select i1 %38, i64 %37, i64 -2147483647
  %40 = shl i64 %39, 33
  %41 = and i64 %5, 8589934591
  %42 = or i64 %40, %41
  store i64 %42, i64* %4, align 8
  %43 = and i64 %39, 2147483647
  %44 = tail call i8* @_Z15sk_malloc_throwmm(i64 %43, i64 16) #6
  %45 = load i64, i64* %4, align 8
  %46 = and i64 %45, 4294967294
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %64, label %48

48:                                               ; preds = %35
  %49 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %0, i64 0, i32 0
  br label %50

50:                                               ; preds = %50, %48
  %51 = phi i64 [ 0, %48 ], [ %59, %50 ]
  %52 = shl nuw nsw i64 %51, 4
  %53 = getelementptr inbounds i8, i8* %44, i64 %52
  %54 = bitcast i8* %53 to %class.SkPath*
  %55 = load %class.SkPath*, %class.SkPath** %49, align 8
  %56 = getelementptr inbounds %class.SkPath, %class.SkPath* %55, i64 %51
  tail call void @_ZN6SkPathC1ERKS_(%class.SkPath* %54, %class.SkPath* dereferenceable(16) %56) #6
  %57 = load %class.SkPath*, %class.SkPath** %49, align 8
  %58 = getelementptr inbounds %class.SkPath, %class.SkPath* %57, i64 %51
  tail call void @_ZN6SkPathD1Ev(%class.SkPath* %58) #6
  %59 = add nuw nsw i64 %51, 1
  %60 = load i64, i64* %4, align 8
  %61 = lshr i64 %60, 1
  %62 = and i64 %61, 2147483647
  %63 = icmp ult i64 %59, %62
  br i1 %63, label %50, label %64

64:                                               ; preds = %50, %35
  %65 = phi i64 [ %45, %35 ], [ %60, %50 ]
  %66 = and i64 %65, 1
  %67 = icmp eq i64 %66, 0
  %68 = bitcast %class.SkTArray* %0 to i8**
  br i1 %67, label %72, label %69

69:                                               ; preds = %64
  %70 = load i8*, i8** %68, align 8
  tail call void @_Z7sk_freePv(i8* %70) #6
  %71 = load i64, i64* %4, align 8
  br label %72

72:                                               ; preds = %64, %69
  %73 = phi i64 [ %71, %69 ], [ %65, %64 ]
  store i8* %44, i8** %68, align 8
  %74 = and i64 %73, -4294967298
  %75 = or i64 %74, 1
  store i64 %75, i64* %4, align 8
  br label %76

76:                                               ; preds = %72, %32, %21
  ret void
}

declare i8* @_Z15sk_malloc_throwmm(i64, i64) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_Z16SkAbort_FileLinePKciS0_z(i8*, i32, i8*, ...) local_unnamed_addr #5

declare i8* @_Z16sk_realloc_throwPvm(i8*, i64) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
