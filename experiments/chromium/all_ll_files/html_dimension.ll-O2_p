; ModuleID = '../../third_party/blink/renderer/core/html/html_dimension.cc'
source_filename = "../../third_party/blink/renderer/core/html/html_dimension.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.blink::HTMLDimension"*, i32, i32 }
%"class.blink::HTMLDimension" = type { i32, double }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.WTF::Vector.1" = type { %"class.WTF::VectorBuffer.2" }
%"class.WTF::VectorBuffer.2" = type { %"class.WTF::VectorBufferBase.3" }
%"class.WTF::VectorBufferBase.3" = type { i8*, i32, i32 }
%"class.WTF::Vector.11" = type { %"class.WTF::VectorBuffer.12" }
%"class.WTF::VectorBuffer.12" = type { %"class.WTF::VectorBufferBase.13" }
%"class.WTF::VectorBufferBase.13" = type { i16*, i32, i32 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.logging::CheckOpResult" = type { i8* }

$_ZN3WTF6VectorIhLj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKhEEvOT_ = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm = comdat any

$_ZN3WTF6VectorIDsLj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKDsEEvOT_ = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm = comdat any

$_ZN3WTF6VectorIN5blink13HTMLDimensionELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS2_EEvOT_ = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink13HTMLDimensionEEEmm = comdat any

@.str.2 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.3 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv = private unnamed_addr constant [61 x i8] c"const char *WTF::GetStringWithTypeName() [T = unsigned char]\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIDsEEPKcv = private unnamed_addr constant [56 x i8] c"const char *WTF::GetStringWithTypeName() [T = char16_t]\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink13HTMLDimensionEEEPKcv = private unnamed_addr constant [68 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::HTMLDimension]\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink21ParseListOfDimensionsERKN3WTF6StringE(%"class.WTF::Vector"* noalias nocapture sret, %"class.WTF::String"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 {
  %3 = alloca %"class.WTF::String", align 8
  %4 = alloca %"class.WTF::Vector", align 8
  %5 = alloca %"class.blink::HTMLDimension", align 8
  %6 = alloca %"class.blink::HTMLDimension", align 8
  %7 = bitcast %"class.WTF::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #9
  %8 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  %9 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  store %"class.WTF::StringImpl"* %10, %"class.WTF::StringImpl"** %8, align 8
  %11 = icmp eq %"class.WTF::StringImpl"* %10, null
  br i1 %11, label %45, label %12

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load atomic i32, i32* %13 monotonic, align 4
  %15 = and i32 %14, 2
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %31

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 0
  %19 = load i32, i32* %18, align 4
  %20 = zext i32 %19 to i33
  %21 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %20, i33 1) #9
  %22 = extractvalue { i33, i1 } %21, 1
  %23 = extractvalue { i33, i1 } %21, 0
  %24 = icmp slt i33 %23, 0
  %25 = or i1 %22, %24
  br i1 %25, label %26, label %27, !prof !2

26:                                               ; preds = %17
  tail call void @llvm.trap() #9
  unreachable

27:                                               ; preds = %17
  %28 = trunc i33 %23 to i32
  store i32 %28, i32* %18, align 4
  %29 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %30 = icmp eq %"class.WTF::StringImpl"* %29, null
  br i1 %30, label %45, label %31

31:                                               ; preds = %12, %27
  %32 = phi %"class.WTF::StringImpl"* [ %29, %27 ], [ %10, %12 ]
  %33 = tail call zeroext i1 @_ZNK3WTF10StringImpl8EndsWithEDs(%"class.WTF::StringImpl"* nonnull %32, i16 zeroext 44) #9
  br i1 %33, label %34, label %40

34:                                               ; preds = %31
  %35 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 1
  %36 = load i32, i32* %35, align 4
  %37 = add i32 %36, -1
  call void @_ZN3WTF6String8TruncateEj(%"class.WTF::String"* nonnull %3, i32 %37) #9
  %38 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %39 = icmp eq %"class.WTF::StringImpl"* %38, null
  br i1 %39, label %45, label %40

40:                                               ; preds = %31, %34
  %41 = phi %"class.WTF::StringImpl"* [ %38, %34 ], [ %32, %31 ]
  %42 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 1
  %43 = load i32, i32* %42, align 4
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %48

45:                                               ; preds = %27, %2, %34, %40
  %46 = phi %"class.WTF::StringImpl"* [ null, %27 ], [ null, %2 ], [ null, %34 ], [ %41, %40 ]
  %47 = bitcast %"class.WTF::Vector"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %47, i8 0, i64 16, i1 false) #9
  br label %162

48:                                               ; preds = %40
  %49 = bitcast %"class.WTF::Vector"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %49) #9
  %50 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %4, i64 0, i32 0, i32 0, i32 0
  %51 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %4, i64 0, i32 0, i32 0, i32 1
  %52 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %4, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %49, i8 0, i64 16, i1 false) #9
  %53 = bitcast %"class.blink::HTMLDimension"* %5 to i8*
  %54 = getelementptr inbounds %"class.blink::HTMLDimension", %"class.blink::HTMLDimension"* %5, i64 0, i32 0
  %55 = getelementptr inbounds %"class.blink::HTMLDimension", %"class.blink::HTMLDimension"* %5, i64 0, i32 1
  br label %59

56:                                               ; preds = %120
  %57 = zext i32 %121 to i64
  %58 = bitcast %"class.blink::HTMLDimension"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %58) #9
  br label %131

59:                                               ; preds = %48, %120
  %60 = phi %"class.WTF::StringImpl"* [ %41, %48 ], [ %122, %120 ]
  %61 = phi i32 [ 0, %48 ], [ %121, %120 ]
  %62 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %63 = load atomic i32, i32* %62 monotonic, align 4
  %64 = and i32 %63, 1
  %65 = icmp eq i32 %64, 0
  %66 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 1
  br i1 %65, label %82, label %67

67:                                               ; preds = %59
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 1
  %69 = load i32, i32* %68, align 4
  %70 = icmp ugt i32 %69, %61
  br i1 %70, label %71, label %124

71:                                               ; preds = %67
  %72 = bitcast %"class.WTF::StringImpl"* %66 to i8*
  %73 = zext i32 %61 to i64
  %74 = getelementptr inbounds i8, i8* %72, i64 %73
  %75 = sub i32 %69, %61
  %76 = zext i32 %75 to i64
  %77 = call i8* @memchr(i8* %74, i32 44, i64 %76) #10
  %78 = icmp eq i8* %77, null
  %79 = ptrtoint i8* %77 to i64
  %80 = ptrtoint %"class.WTF::StringImpl"* %66 to i64
  %81 = sub i64 %79, %80
  br i1 %78, label %124, label %98

82:                                               ; preds = %59
  %83 = bitcast %"class.WTF::StringImpl"* %66 to i16*
  %84 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 1
  %85 = load i32, i32* %84, align 4
  %86 = icmp ugt i32 %85, %61
  br i1 %86, label %87, label %124

87:                                               ; preds = %82
  %88 = zext i32 %61 to i64
  br label %89

89:                                               ; preds = %94, %87
  %90 = phi i64 [ %88, %87 ], [ %95, %94 ]
  %91 = getelementptr inbounds i16, i16* %83, i64 %90
  %92 = load i16, i16* %91, align 2
  %93 = icmp eq i16 %92, 44
  br i1 %93, label %98, label %94

94:                                               ; preds = %89
  %95 = add nuw nsw i64 %90, 1
  %96 = trunc i64 %95 to i32
  %97 = icmp eq i32 %85, %96
  br i1 %97, label %124, label %89

98:                                               ; preds = %89, %71
  %99 = phi i32 [ %69, %71 ], [ %85, %89 ]
  %100 = phi i64 [ %81, %71 ], [ %90, %89 ]
  %101 = trunc i64 %100 to i32
  %102 = icmp eq i32 %101, -1
  br i1 %102, label %124, label %103

103:                                              ; preds = %98
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %53) #9
  %104 = zext i32 %61 to i64
  %105 = and i64 %100, 4294967295
  %106 = call fastcc { i32, double } @_ZN5blinkL14ParseDimensionERKN3WTF6StringEmm(%"class.WTF::String"* nonnull dereferenceable(8) %3, i64 %104, i64 %105)
  %107 = extractvalue { i32, double } %106, 0
  store i32 %107, i32* %54, align 8
  %108 = extractvalue { i32, double } %106, 1
  store double %108, double* %55, align 8
  %109 = load i32, i32* %52, align 4
  %110 = load i32, i32* %51, align 8
  %111 = icmp eq i32 %109, %110
  br i1 %111, label %119, label %112, !prof !2

112:                                              ; preds = %103
  %113 = load %"class.blink::HTMLDimension"*, %"class.blink::HTMLDimension"** %50, align 8
  %114 = zext i32 %109 to i64
  %115 = getelementptr inbounds %"class.blink::HTMLDimension", %"class.blink::HTMLDimension"* %113, i64 %114
  %116 = bitcast %"class.blink::HTMLDimension"* %115 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %116, i8* nonnull align 8 %53, i64 16, i1 false) #9
  %117 = load i32, i32* %52, align 4
  %118 = add i32 %117, 1
  store i32 %118, i32* %52, align 4
  br label %120

119:                                              ; preds = %103
  call void @_ZN3WTF6VectorIN5blink13HTMLDimensionELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS2_EEvOT_(%"class.WTF::Vector"* nonnull %4, %"class.blink::HTMLDimension"* nonnull dereferenceable(16) %5) #9
  br label %120

120:                                              ; preds = %119, %112
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %53) #9
  %121 = add nuw i32 %101, 1
  %122 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %123 = icmp eq %"class.WTF::StringImpl"* %122, null
  br i1 %123, label %56, label %59

124:                                              ; preds = %71, %82, %67, %98, %94
  %125 = phi i32 [ %85, %94 ], [ %69, %71 ], [ %85, %82 ], [ %69, %67 ], [ %99, %98 ]
  %126 = zext i32 %61 to i64
  %127 = bitcast %"class.blink::HTMLDimension"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %127) #9
  %128 = icmp eq %"class.WTF::StringImpl"* %60, null
  br i1 %128, label %131, label %129

129:                                              ; preds = %124
  %130 = zext i32 %125 to i64
  br label %131

131:                                              ; preds = %56, %124, %129
  %132 = phi i64 [ %126, %129 ], [ %126, %124 ], [ %57, %56 ]
  %133 = phi i8* [ %127, %129 ], [ %127, %124 ], [ %58, %56 ]
  %134 = phi i64 [ %130, %129 ], [ 0, %124 ], [ 0, %56 ]
  %135 = call fastcc { i32, double } @_ZN5blinkL14ParseDimensionERKN3WTF6StringEmm(%"class.WTF::String"* nonnull dereferenceable(8) %3, i64 %132, i64 %134)
  %136 = getelementptr inbounds %"class.blink::HTMLDimension", %"class.blink::HTMLDimension"* %6, i64 0, i32 0
  %137 = extractvalue { i32, double } %135, 0
  store i32 %137, i32* %136, align 8
  %138 = getelementptr inbounds %"class.blink::HTMLDimension", %"class.blink::HTMLDimension"* %6, i64 0, i32 1
  %139 = extractvalue { i32, double } %135, 1
  store double %139, double* %138, align 8
  %140 = load i32, i32* %52, align 4
  %141 = load i32, i32* %51, align 8
  %142 = icmp eq i32 %140, %141
  br i1 %142, label %150, label %143, !prof !2

143:                                              ; preds = %131
  %144 = load %"class.blink::HTMLDimension"*, %"class.blink::HTMLDimension"** %50, align 8
  %145 = zext i32 %140 to i64
  %146 = getelementptr inbounds %"class.blink::HTMLDimension", %"class.blink::HTMLDimension"* %144, i64 %145
  %147 = bitcast %"class.blink::HTMLDimension"* %146 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %147, i8* nonnull align 8 %133, i64 16, i1 false) #9
  %148 = load i32, i32* %52, align 4
  %149 = add i32 %148, 1
  store i32 %149, i32* %52, align 4
  br label %152

150:                                              ; preds = %131
  call void @_ZN3WTF6VectorIN5blink13HTMLDimensionELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS2_EEvOT_(%"class.WTF::Vector"* nonnull %4, %"class.blink::HTMLDimension"* nonnull dereferenceable(16) %6) #9
  %151 = load i32, i32* %52, align 4
  br label %152

152:                                              ; preds = %143, %150
  %153 = phi i32 [ %149, %143 ], [ %151, %150 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %133) #9
  %154 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %155 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %156 = bitcast %"class.WTF::Vector"* %4 to i64*
  %157 = bitcast %"class.WTF::Vector"* %0 to i64*
  store i64 0, i64* %157, align 8
  %158 = load i64, i64* %156, align 8
  %159 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 0, i64* %156 monotonic, align 8
  store atomic i64 %158, i64* %159 monotonic, align 8
  %160 = load i32, i32* %51, align 8
  store i32 %160, i32* %154, align 8
  store i32 %153, i32* %155, align 4
  %161 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %49) #9
  br label %162

162:                                              ; preds = %152, %45
  %163 = phi %"class.WTF::StringImpl"* [ %161, %152 ], [ %46, %45 ]
  %164 = icmp eq %"class.WTF::StringImpl"* %163, null
  br i1 %164, label %178, label %165

165:                                              ; preds = %162
  %166 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %163, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %167 = load atomic i32, i32* %166 monotonic, align 4
  %168 = and i32 %167, 2
  %169 = icmp eq i32 %168, 0
  %170 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %163, i64 0, i32 0
  %171 = load i32, i32* %170, align 4
  br i1 %169, label %172, label %174

172:                                              ; preds = %165
  %173 = add i32 %171, -1
  store i32 %173, i32* %170, align 4
  br label %174

174:                                              ; preds = %172, %165
  %175 = phi i32 [ %173, %172 ], [ %171, %165 ]
  %176 = icmp eq i32 %175, 0
  br i1 %176, label %177, label %178

177:                                              ; preds = %174
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %163) #9
  br label %178

178:                                              ; preds = %162, %174, %177
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN3WTF6String8TruncateEj(%"class.WTF::String"*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc { i32, double } @_ZN5blinkL14ParseDimensionERKN3WTF6StringEmm(%"class.WTF::String"* nocapture readonly dereferenceable(8), i64, i64) unnamed_addr #0 {
  %4 = alloca i8, align 1
  %5 = alloca %"class.WTF::Vector.1", align 8
  %6 = alloca i8, align 1
  %7 = alloca %"class.WTF::Vector.11", align 8
  %8 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 0, i32 0, i32 0
  %9 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load atomic i32, i32* %10 monotonic, align 4
  %12 = and i32 %11, 1
  %13 = icmp eq i32 %12, 0
  %14 = icmp eq %"class.WTF::StringImpl"* %9, null
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 1
  br i1 %13, label %143, label %16

16:                                               ; preds = %3
  %17 = bitcast %"class.WTF::StringImpl"* %15 to i8*
  %18 = select i1 %14, i8* null, i8* %17
  %19 = icmp ult i64 %1, %2
  br i1 %19, label %20, label %271

20:                                               ; preds = %16, %26
  %21 = phi i64 [ %27, %26 ], [ %1, %16 ]
  %22 = getelementptr inbounds i8, i8* %18, i64 %21
  %23 = load i8, i8* %22, align 1
  %24 = icmp ult i8 %23, 33
  br i1 %24, label %25, label %29

25:                                               ; preds = %20
  switch i8 %23, label %29 [
    i8 32, label %26
    i8 13, label %26
    i8 12, label %26
    i8 11, label %26
    i8 10, label %26
    i8 9, label %26
  ]

26:                                               ; preds = %25, %25, %25, %25, %25, %25
  %27 = add i64 %21, 1
  %28 = icmp eq i64 %27, %2
  br i1 %28, label %271, label %20

29:                                               ; preds = %25, %20
  %30 = getelementptr inbounds i8, i8* %18, i64 %21
  %31 = icmp ult i64 %21, %2
  %32 = add i8 %23, -48
  %33 = icmp ult i8 %32, 10
  %34 = and i1 %31, %33
  br i1 %34, label %35, label %125

35:                                               ; preds = %29, %39
  %36 = phi i64 [ %37, %39 ], [ %21, %29 ]
  %37 = add i64 %36, 1
  %38 = icmp eq i64 %37, %2
  br i1 %38, label %46, label %39

39:                                               ; preds = %35
  %40 = getelementptr inbounds i8, i8* %18, i64 %37
  %41 = load i8, i8* %40, align 1
  %42 = add i8 %41, -48
  %43 = icmp ult i8 %42, 10
  br i1 %43, label %35, label %44

44:                                               ; preds = %39
  %45 = icmp ult i64 %37, %2
  br label %46

46:                                               ; preds = %35, %44
  %47 = phi i64 [ %37, %44 ], [ %2, %35 ]
  %48 = phi i1 [ %45, %44 ], [ false, %35 ]
  %49 = icmp ugt i64 %47, %21
  br i1 %49, label %50, label %125

50:                                               ; preds = %46
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %4) #9
  store i8 0, i8* %4, align 1
  %51 = sub i64 %47, %21
  %52 = call i32 @_ZN3WTF16CharactersToUIntEPKhmNS_20NumberParsingOptionsEPb(i8* %30, i64 %51, i32 0, i8* nonnull %4) #9
  %53 = load i8, i8* %4, align 1, !range !3
  %54 = icmp eq i8 %53, 0
  br i1 %54, label %121, label %55

55:                                               ; preds = %50
  %56 = uitofp i32 %52 to double
  br i1 %48, label %57, label %122

57:                                               ; preds = %55
  %58 = getelementptr inbounds i8, i8* %18, i64 %47
  %59 = load i8, i8* %58, align 1
  %60 = icmp eq i8 %59, 46
  br i1 %60, label %61, label %122

61:                                               ; preds = %57
  %62 = bitcast %"class.WTF::Vector.1"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %62) #9
  %63 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %5, i64 0, i32 0, i32 0, i32 0
  %64 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %5, i64 0, i32 0, i32 0, i32 1
  %65 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %5, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %62, i8 0, i64 16, i1 false) #9
  %66 = add i64 %47, 1
  %67 = icmp ult i64 %66, %2
  br i1 %67, label %68, label %108

68:                                               ; preds = %61, %88
  %69 = phi i64 [ %89, %88 ], [ %66, %61 ]
  %70 = getelementptr inbounds i8, i8* %18, i64 %69
  %71 = load i8, i8* %70, align 1
  %72 = add i8 %71, -48
  %73 = icmp ult i8 %72, 10
  br i1 %73, label %77, label %74

74:                                               ; preds = %68
  %75 = icmp ult i8 %71, 33
  br i1 %75, label %76, label %91

76:                                               ; preds = %74
  switch i8 %71, label %91 [
    i8 32, label %88
    i8 13, label %88
    i8 12, label %88
    i8 11, label %88
    i8 10, label %88
    i8 9, label %88
  ]

77:                                               ; preds = %68
  %78 = load i32, i32* %65, align 4
  %79 = load i32, i32* %64, align 8
  %80 = icmp eq i32 %78, %79
  br i1 %80, label %87, label %81, !prof !2

81:                                               ; preds = %77
  %82 = load i8*, i8** %63, align 8
  %83 = zext i32 %78 to i64
  %84 = getelementptr inbounds i8, i8* %82, i64 %83
  store i8 %71, i8* %84, align 1
  %85 = load i32, i32* %65, align 4
  %86 = add i32 %85, 1
  store i32 %86, i32* %65, align 4
  br label %88

87:                                               ; preds = %77
  call void @_ZN3WTF6VectorIhLj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKhEEvOT_(%"class.WTF::Vector.1"* nonnull %5, i8* dereferenceable(1) %70) #9
  br label %88

88:                                               ; preds = %87, %81, %76, %76, %76, %76, %76, %76
  %89 = add i64 %69, 1
  %90 = icmp eq i64 %89, %2
  br i1 %90, label %91, label %68

91:                                               ; preds = %88, %76, %74
  %92 = phi i64 [ %2, %88 ], [ %69, %74 ], [ %69, %76 ]
  %93 = load i32, i32* %65, align 4
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %108, label %95

95:                                               ; preds = %91
  %96 = load i8*, i8** %63, align 8
  %97 = zext i32 %93 to i64
  %98 = call i32 @_ZN3WTF16CharactersToUIntEPKhmNS_20NumberParsingOptionsEPb(i8* %96, i64 %97, i32 0, i8* nonnull %4) #9
  %99 = load i8, i8* %4, align 1, !range !3
  %100 = icmp eq i8 %99, 0
  br i1 %100, label %108, label %101

101:                                              ; preds = %95
  %102 = uitofp i32 %98 to double
  %103 = load i32, i32* %65, align 4
  %104 = uitofp i32 %103 to double
  %105 = call double @pow(double 1.000000e+01, double %104) #9
  %106 = fdiv double %102, %105
  %107 = fadd double %106, %56
  br label %108

108:                                              ; preds = %101, %95, %91, %61
  %109 = phi i64 [ %92, %95 ], [ %92, %91 ], [ %92, %101 ], [ %66, %61 ]
  %110 = phi double [ %56, %95 ], [ %56, %91 ], [ %107, %101 ], [ %56, %61 ]
  %111 = phi i32 [ 1, %95 ], [ 0, %91 ], [ 0, %101 ], [ 0, %61 ]
  %112 = load i8*, i8** %63, align 8
  %113 = icmp eq i8* %112, null
  br i1 %113, label %119, label %114, !prof !4

114:                                              ; preds = %108
  %115 = load i32, i32* %65, align 4
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %118, label %117, !prof !2

117:                                              ; preds = %114
  store i32 0, i32* %65, align 4
  br label %118

118:                                              ; preds = %117, %114
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %112) #9
  store i8* null, i8** %63, align 8
  br label %119

119:                                              ; preds = %118, %108
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %62) #9
  %120 = icmp eq i32 %111, 0
  br i1 %120, label %122, label %121

121:                                              ; preds = %119, %50
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4) #9
  br label %271

122:                                              ; preds = %119, %57, %55
  %123 = phi double [ %110, %119 ], [ %56, %57 ], [ %56, %55 ]
  %124 = phi i64 [ %109, %119 ], [ %47, %57 ], [ %47, %55 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4) #9
  br label %125

125:                                              ; preds = %122, %46, %29
  %126 = phi double [ %123, %122 ], [ 0.000000e+00, %46 ], [ 0.000000e+00, %29 ]
  %127 = phi i64 [ %124, %122 ], [ %47, %46 ], [ %21, %29 ]
  %128 = icmp ult i64 %127, %2
  br i1 %128, label %129, label %271

129:                                              ; preds = %125, %135
  %130 = phi i64 [ %136, %135 ], [ %127, %125 ]
  %131 = getelementptr inbounds i8, i8* %18, i64 %130
  %132 = load i8, i8* %131, align 1
  %133 = icmp ult i8 %132, 33
  br i1 %133, label %134, label %138

134:                                              ; preds = %129
  switch i8 %132, label %138 [
    i8 32, label %135
    i8 13, label %135
    i8 12, label %135
    i8 11, label %135
    i8 10, label %135
    i8 9, label %135
  ]

135:                                              ; preds = %134, %134, %134, %134, %134, %134
  %136 = add i64 %130, 1
  %137 = icmp eq i64 %136, %2
  br i1 %137, label %271, label %129

138:                                              ; preds = %134, %129
  %139 = icmp eq i8 %132, 37
  %140 = select i1 %139, i32 1, i32 2
  %141 = icmp eq i8 %132, 42
  %142 = select i1 %141, i32 0, i32 %140
  br label %271

143:                                              ; preds = %3
  %144 = bitcast %"class.WTF::StringImpl"* %15 to i16*
  %145 = select i1 %14, i16* null, i16* %144
  %146 = icmp ult i64 %1, %2
  br i1 %146, label %147, label %271

147:                                              ; preds = %143, %153
  %148 = phi i64 [ %154, %153 ], [ %1, %143 ]
  %149 = getelementptr inbounds i16, i16* %145, i64 %148
  %150 = load i16, i16* %149, align 2
  %151 = icmp ult i16 %150, 33
  br i1 %151, label %152, label %156

152:                                              ; preds = %147
  switch i16 %150, label %156 [
    i16 32, label %153
    i16 13, label %153
    i16 12, label %153
    i16 11, label %153
    i16 10, label %153
    i16 9, label %153
  ]

153:                                              ; preds = %152, %152, %152, %152, %152, %152
  %154 = add i64 %148, 1
  %155 = icmp eq i64 %154, %2
  br i1 %155, label %271, label %147

156:                                              ; preds = %152, %147
  %157 = getelementptr inbounds i16, i16* %145, i64 %148
  %158 = icmp ult i64 %148, %2
  %159 = add i16 %150, -48
  %160 = icmp ult i16 %159, 10
  %161 = and i1 %158, %160
  br i1 %161, label %162, label %253

162:                                              ; preds = %156, %166
  %163 = phi i64 [ %164, %166 ], [ %148, %156 ]
  %164 = add i64 %163, 1
  %165 = icmp eq i64 %164, %2
  br i1 %165, label %173, label %166

166:                                              ; preds = %162
  %167 = getelementptr inbounds i16, i16* %145, i64 %164
  %168 = load i16, i16* %167, align 2
  %169 = add i16 %168, -48
  %170 = icmp ult i16 %169, 10
  br i1 %170, label %162, label %171

171:                                              ; preds = %166
  %172 = icmp ult i64 %164, %2
  br label %173

173:                                              ; preds = %162, %171
  %174 = phi i64 [ %164, %171 ], [ %2, %162 ]
  %175 = phi i1 [ %172, %171 ], [ false, %162 ]
  %176 = icmp ugt i64 %174, %148
  br i1 %176, label %177, label %253

177:                                              ; preds = %173
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %6) #9
  store i8 0, i8* %6, align 1
  %178 = sub i64 %174, %148
  %179 = call i32 @_ZN3WTF16CharactersToUIntEPKDsmNS_20NumberParsingOptionsEPb(i16* %157, i64 %178, i32 0, i8* nonnull %6) #9
  %180 = load i8, i8* %6, align 1, !range !3
  %181 = icmp eq i8 %180, 0
  br i1 %181, label %249, label %182

182:                                              ; preds = %177
  %183 = uitofp i32 %179 to double
  br i1 %175, label %184, label %250

184:                                              ; preds = %182
  %185 = getelementptr inbounds i16, i16* %145, i64 %174
  %186 = load i16, i16* %185, align 2
  %187 = icmp eq i16 %186, 46
  br i1 %187, label %188, label %250

188:                                              ; preds = %184
  %189 = bitcast %"class.WTF::Vector.11"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %189) #9
  %190 = getelementptr inbounds %"class.WTF::Vector.11", %"class.WTF::Vector.11"* %7, i64 0, i32 0, i32 0, i32 0
  %191 = getelementptr inbounds %"class.WTF::Vector.11", %"class.WTF::Vector.11"* %7, i64 0, i32 0, i32 0, i32 1
  %192 = getelementptr inbounds %"class.WTF::Vector.11", %"class.WTF::Vector.11"* %7, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %189, i8 0, i64 16, i1 false) #9
  %193 = add i64 %174, 1
  %194 = icmp ult i64 %193, %2
  br i1 %194, label %195, label %235

195:                                              ; preds = %188, %215
  %196 = phi i64 [ %216, %215 ], [ %193, %188 ]
  %197 = getelementptr inbounds i16, i16* %145, i64 %196
  %198 = load i16, i16* %197, align 2
  %199 = add i16 %198, -48
  %200 = icmp ult i16 %199, 10
  br i1 %200, label %204, label %201

201:                                              ; preds = %195
  %202 = icmp ult i16 %198, 33
  br i1 %202, label %203, label %218

203:                                              ; preds = %201
  switch i16 %198, label %218 [
    i16 32, label %215
    i16 13, label %215
    i16 12, label %215
    i16 11, label %215
    i16 10, label %215
    i16 9, label %215
  ]

204:                                              ; preds = %195
  %205 = load i32, i32* %192, align 4
  %206 = load i32, i32* %191, align 8
  %207 = icmp eq i32 %205, %206
  br i1 %207, label %214, label %208, !prof !2

208:                                              ; preds = %204
  %209 = load i16*, i16** %190, align 8
  %210 = zext i32 %205 to i64
  %211 = getelementptr inbounds i16, i16* %209, i64 %210
  store i16 %198, i16* %211, align 2
  %212 = load i32, i32* %192, align 4
  %213 = add i32 %212, 1
  store i32 %213, i32* %192, align 4
  br label %215

214:                                              ; preds = %204
  call void @_ZN3WTF6VectorIDsLj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKDsEEvOT_(%"class.WTF::Vector.11"* nonnull %7, i16* dereferenceable(2) %197) #9
  br label %215

215:                                              ; preds = %214, %208, %203, %203, %203, %203, %203, %203
  %216 = add i64 %196, 1
  %217 = icmp eq i64 %216, %2
  br i1 %217, label %218, label %195

218:                                              ; preds = %215, %203, %201
  %219 = phi i64 [ %2, %215 ], [ %196, %201 ], [ %196, %203 ]
  %220 = load i32, i32* %192, align 4
  %221 = icmp eq i32 %220, 0
  br i1 %221, label %235, label %222

222:                                              ; preds = %218
  %223 = load i16*, i16** %190, align 8
  %224 = zext i32 %220 to i64
  %225 = call i32 @_ZN3WTF16CharactersToUIntEPKDsmNS_20NumberParsingOptionsEPb(i16* %223, i64 %224, i32 0, i8* nonnull %6) #9
  %226 = load i8, i8* %6, align 1, !range !3
  %227 = icmp eq i8 %226, 0
  br i1 %227, label %235, label %228

228:                                              ; preds = %222
  %229 = uitofp i32 %225 to double
  %230 = load i32, i32* %192, align 4
  %231 = uitofp i32 %230 to double
  %232 = call double @pow(double 1.000000e+01, double %231) #9
  %233 = fdiv double %229, %232
  %234 = fadd double %233, %183
  br label %235

235:                                              ; preds = %228, %222, %218, %188
  %236 = phi i64 [ %219, %222 ], [ %219, %218 ], [ %219, %228 ], [ %193, %188 ]
  %237 = phi double [ %183, %222 ], [ %183, %218 ], [ %234, %228 ], [ %183, %188 ]
  %238 = phi i32 [ 1, %222 ], [ 0, %218 ], [ 0, %228 ], [ 0, %188 ]
  %239 = load i16*, i16** %190, align 8
  %240 = icmp eq i16* %239, null
  %241 = bitcast i16* %239 to i8*
  br i1 %240, label %247, label %242, !prof !4

242:                                              ; preds = %235
  %243 = load i32, i32* %192, align 4
  %244 = icmp eq i32 %243, 0
  br i1 %244, label %246, label %245, !prof !2

245:                                              ; preds = %242
  store i32 0, i32* %192, align 4
  br label %246

246:                                              ; preds = %245, %242
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %241) #9
  store i16* null, i16** %190, align 8
  br label %247

247:                                              ; preds = %246, %235
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %189) #9
  %248 = icmp eq i32 %238, 0
  br i1 %248, label %250, label %249

249:                                              ; preds = %247, %177
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %6) #9
  br label %271

250:                                              ; preds = %247, %184, %182
  %251 = phi double [ %237, %247 ], [ %183, %184 ], [ %183, %182 ]
  %252 = phi i64 [ %236, %247 ], [ %174, %184 ], [ %174, %182 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %6) #9
  br label %253

253:                                              ; preds = %250, %173, %156
  %254 = phi double [ %251, %250 ], [ 0.000000e+00, %173 ], [ 0.000000e+00, %156 ]
  %255 = phi i64 [ %252, %250 ], [ %174, %173 ], [ %148, %156 ]
  %256 = icmp ult i64 %255, %2
  br i1 %256, label %257, label %271

257:                                              ; preds = %253, %263
  %258 = phi i64 [ %264, %263 ], [ %255, %253 ]
  %259 = getelementptr inbounds i16, i16* %145, i64 %258
  %260 = load i16, i16* %259, align 2
  %261 = icmp ult i16 %260, 33
  br i1 %261, label %262, label %266

262:                                              ; preds = %257
  switch i16 %260, label %266 [
    i16 32, label %263
    i16 13, label %263
    i16 12, label %263
    i16 11, label %263
    i16 10, label %263
    i16 9, label %263
  ]

263:                                              ; preds = %262, %262, %262, %262, %262, %262
  %264 = add i64 %258, 1
  %265 = icmp eq i64 %264, %2
  br i1 %265, label %271, label %257

266:                                              ; preds = %262, %257
  %267 = icmp eq i16 %260, 37
  %268 = select i1 %267, i32 1, i32 2
  %269 = icmp eq i16 %260, 42
  %270 = select i1 %269, i32 0, i32 %268
  br label %271

271:                                              ; preds = %26, %135, %153, %263, %266, %253, %249, %143, %138, %125, %121, %16
  %272 = phi i32 [ 0, %121 ], [ %142, %138 ], [ 2, %125 ], [ 0, %16 ], [ 0, %249 ], [ %270, %266 ], [ 2, %253 ], [ 0, %143 ], [ 2, %263 ], [ 0, %153 ], [ 2, %135 ], [ 0, %26 ]
  %273 = phi double [ 0.000000e+00, %121 ], [ %126, %138 ], [ %126, %125 ], [ 0.000000e+00, %16 ], [ 0.000000e+00, %249 ], [ %254, %266 ], [ %254, %253 ], [ 0.000000e+00, %143 ], [ %254, %263 ], [ 0.000000e+00, %153 ], [ %126, %135 ], [ 0.000000e+00, %26 ]
  %274 = insertvalue { i32, double } undef, i32 %272, 0
  %275 = insertvalue { i32, double } %274, double %273, 1
  ret { i32, double } %275
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink19ParseDimensionValueERKN3WTF6StringERNS_13HTMLDimensionE(%"class.WTF::String"* nocapture readonly dereferenceable(8), %"class.blink::HTMLDimension"* nocapture dereferenceable(16)) local_unnamed_addr #0 {
  %3 = alloca i8, align 1
  %4 = alloca i8, align 1
  %5 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 0, i32 0, i32 0
  %6 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %5, align 8
  %7 = icmp eq %"class.WTF::StringImpl"* %6, null
  br i1 %7, label %219, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %219, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load atomic i32, i32* %13 monotonic, align 4
  %15 = and i32 %14, 1
  %16 = icmp eq i32 %15, 0
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 1
  br i1 %16, label %118, label %18

18:                                               ; preds = %12
  %19 = bitcast %"class.WTF::StringImpl"* %17 to i8*
  %20 = zext i32 %10 to i64
  %21 = getelementptr inbounds i8, i8* %19, i64 %20
  %22 = ptrtoint %"class.WTF::StringImpl"* %17 to i64
  %23 = icmp ugt i8* %21, %19
  br i1 %23, label %24, label %42

24:                                               ; preds = %18
  %25 = load i8, i8* %19, align 1
  %26 = icmp ult i8 %25, 33
  br i1 %26, label %31, label %42

27:                                               ; preds = %35
  %28 = ptrtoint i8* %36 to i64
  %29 = load i8, i8* %36, align 1
  %30 = icmp ult i8 %29, 33
  br i1 %30, label %31, label %40

31:                                               ; preds = %24, %27
  %32 = phi i8 [ %29, %27 ], [ %25, %24 ]
  %33 = phi i8* [ %36, %27 ], [ %19, %24 ]
  %34 = phi i64 [ %28, %27 ], [ %22, %24 ]
  switch i8 %32, label %42 [
    i8 32, label %35
    i8 10, label %35
    i8 9, label %35
    i8 13, label %35
    i8 12, label %35
  ]

35:                                               ; preds = %31, %31, %31, %31, %31
  %36 = getelementptr inbounds i8, i8* %33, i64 1
  %37 = icmp eq i8* %36, %21
  br i1 %37, label %38, label %27

38:                                               ; preds = %35
  %39 = ptrtoint i8* %21 to i64
  br label %42

40:                                               ; preds = %27
  %41 = ptrtoint i8* %36 to i64
  br label %42

42:                                               ; preds = %31, %40, %38, %24, %18
  %43 = phi i64 [ %22, %18 ], [ %39, %38 ], [ %22, %24 ], [ %41, %40 ], [ %34, %31 ]
  %44 = inttoptr i64 %43 to i8*
  %45 = icmp ugt i8* %21, %44
  br i1 %45, label %46, label %219

46:                                               ; preds = %42
  %47 = load i8, i8* %44, align 1
  %48 = add i8 %47, -48
  %49 = icmp ult i8 %48, 10
  br i1 %49, label %50, label %219

50:                                               ; preds = %46
  %51 = getelementptr inbounds i8, i8* %44, i64 1
  %52 = ptrtoint i8* %51 to i64
  %53 = icmp ult i8* %51, %21
  br i1 %53, label %54, label %70

54:                                               ; preds = %50
  %55 = load i8, i8* %51, align 1
  %56 = add i8 %55, -48
  %57 = icmp ult i8 %56, 10
  br i1 %57, label %62, label %70

58:                                               ; preds = %62
  %59 = load i8, i8* %64, align 1
  %60 = add i8 %59, -48
  %61 = icmp ult i8 %60, 10
  br i1 %61, label %62, label %68

62:                                               ; preds = %54, %58
  %63 = phi i8* [ %64, %58 ], [ %51, %54 ]
  %64 = getelementptr inbounds i8, i8* %63, i64 1
  %65 = icmp eq i8* %64, %21
  br i1 %65, label %66, label %58

66:                                               ; preds = %62
  %67 = ptrtoint i8* %21 to i64
  br label %70

68:                                               ; preds = %58
  %69 = ptrtoint i8* %64 to i64
  br label %70

70:                                               ; preds = %68, %66, %54, %50
  %71 = phi i64 [ %52, %50 ], [ %67, %66 ], [ %52, %54 ], [ %69, %68 ]
  %72 = inttoptr i64 %71 to i8*
  %73 = icmp ugt i8* %21, %72
  br i1 %73, label %74, label %97

74:                                               ; preds = %70
  %75 = load i8, i8* %72, align 1
  %76 = icmp eq i8 %75, 46
  br i1 %76, label %77, label %97

77:                                               ; preds = %74
  %78 = getelementptr inbounds i8, i8* %72, i64 1
  %79 = ptrtoint i8* %78 to i64
  %80 = icmp ult i8* %78, %21
  br i1 %80, label %81, label %97

81:                                               ; preds = %77
  %82 = load i8, i8* %78, align 1
  %83 = add i8 %82, -48
  %84 = icmp ult i8 %83, 10
  br i1 %84, label %89, label %97

85:                                               ; preds = %89
  %86 = load i8, i8* %91, align 1
  %87 = add i8 %86, -48
  %88 = icmp ult i8 %87, 10
  br i1 %88, label %89, label %95

89:                                               ; preds = %81, %85
  %90 = phi i8* [ %91, %85 ], [ %78, %81 ]
  %91 = getelementptr inbounds i8, i8* %90, i64 1
  %92 = icmp eq i8* %91, %21
  br i1 %92, label %93, label %85

93:                                               ; preds = %89
  %94 = ptrtoint i8* %21 to i64
  br label %97

95:                                               ; preds = %85
  %96 = ptrtoint i8* %91 to i64
  br label %97

97:                                               ; preds = %95, %93, %81, %77, %74, %70
  %98 = phi i64 [ %79, %77 ], [ %71, %74 ], [ %71, %70 ], [ %94, %93 ], [ %79, %81 ], [ %96, %95 ]
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %3) #9
  store i8 -86, i8* %3, align 1
  %99 = sub i64 %98, %43
  %100 = call double @_ZN3WTF18CharactersToDoubleEPKhmPb(i8* %44, i64 %99, i8* nonnull %3) #9
  %101 = load i8, i8* %3, align 1, !range !3
  %102 = icmp eq i8 %101, 0
  br i1 %102, label %116, label %103

103:                                              ; preds = %97
  %104 = inttoptr i64 %98 to i8*
  %105 = icmp ugt i8* %21, %104
  br i1 %105, label %106, label %112

106:                                              ; preds = %103
  %107 = load i8, i8* %104, align 1
  %108 = icmp eq i8 %107, 42
  %109 = select i1 %108, i32 0, i32 2
  %110 = icmp eq i8 %107, 37
  %111 = select i1 %110, i32 1, i32 %109
  br label %112

112:                                              ; preds = %106, %103
  %113 = phi i32 [ 2, %103 ], [ %111, %106 ]
  %114 = getelementptr inbounds %"class.blink::HTMLDimension", %"class.blink::HTMLDimension"* %1, i64 0, i32 0
  store i32 %113, i32* %114, align 8
  %115 = getelementptr inbounds %"class.blink::HTMLDimension", %"class.blink::HTMLDimension"* %1, i64 0, i32 1
  store double %100, double* %115, align 8
  br label %116

116:                                              ; preds = %112, %97
  %117 = phi i1 [ true, %112 ], [ false, %97 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %3) #9
  br label %219

118:                                              ; preds = %12
  %119 = bitcast %"class.WTF::StringImpl"* %17 to i16*
  %120 = zext i32 %10 to i64
  %121 = getelementptr inbounds i16, i16* %119, i64 %120
  %122 = ptrtoint %"class.WTF::StringImpl"* %17 to i64
  %123 = icmp ugt i16* %121, %119
  br i1 %123, label %124, label %142

124:                                              ; preds = %118
  %125 = load i16, i16* %119, align 2
  %126 = icmp ult i16 %125, 33
  br i1 %126, label %130, label %142

127:                                              ; preds = %134
  %128 = load i16, i16* %135, align 2
  %129 = icmp ult i16 %128, 33
  br i1 %129, label %130, label %138

130:                                              ; preds = %124, %127
  %131 = phi i16 [ %128, %127 ], [ %125, %124 ]
  %132 = phi i16* [ %135, %127 ], [ %119, %124 ]
  %133 = phi i64 [ %137, %127 ], [ %122, %124 ]
  switch i16 %131, label %142 [
    i16 32, label %134
    i16 10, label %134
    i16 9, label %134
    i16 13, label %134
    i16 12, label %134
  ]

134:                                              ; preds = %130, %130, %130, %130, %130
  %135 = getelementptr inbounds i16, i16* %132, i64 1
  %136 = icmp ult i16* %135, %121
  %137 = ptrtoint i16* %135 to i64
  br i1 %136, label %127, label %140

138:                                              ; preds = %127
  %139 = ptrtoint i16* %135 to i64
  br label %142

140:                                              ; preds = %134
  %141 = ptrtoint i16* %135 to i64
  br label %142

142:                                              ; preds = %140, %130, %138, %124, %118
  %143 = phi i64 [ %122, %118 ], [ %122, %124 ], [ %139, %138 ], [ %141, %140 ], [ %133, %130 ]
  %144 = inttoptr i64 %143 to i16*
  %145 = icmp ugt i16* %121, %144
  br i1 %145, label %146, label %219

146:                                              ; preds = %142
  %147 = load i16, i16* %144, align 2
  %148 = add i16 %147, -48
  %149 = icmp ult i16 %148, 10
  br i1 %149, label %150, label %219

150:                                              ; preds = %146
  %151 = getelementptr inbounds i16, i16* %144, i64 1
  %152 = ptrtoint i16* %151 to i64
  %153 = icmp ult i16* %151, %121
  br i1 %153, label %154, label %170

154:                                              ; preds = %150
  %155 = load i16, i16* %151, align 2
  %156 = add i16 %155, -48
  %157 = icmp ult i16 %156, 10
  br i1 %157, label %162, label %170

158:                                              ; preds = %162
  %159 = load i16, i16* %164, align 2
  %160 = add i16 %159, -48
  %161 = icmp ult i16 %160, 10
  br i1 %161, label %162, label %168

162:                                              ; preds = %154, %158
  %163 = phi i16* [ %164, %158 ], [ %151, %154 ]
  %164 = getelementptr inbounds i16, i16* %163, i64 1
  %165 = icmp ult i16* %164, %121
  br i1 %165, label %158, label %166

166:                                              ; preds = %162
  %167 = ptrtoint i16* %164 to i64
  br label %170

168:                                              ; preds = %158
  %169 = ptrtoint i16* %164 to i64
  br label %170

170:                                              ; preds = %168, %166, %154, %150
  %171 = phi i64 [ %152, %150 ], [ %167, %166 ], [ %152, %154 ], [ %169, %168 ]
  %172 = inttoptr i64 %171 to i16*
  %173 = icmp ugt i16* %121, %172
  br i1 %173, label %174, label %197

174:                                              ; preds = %170
  %175 = load i16, i16* %172, align 2
  %176 = icmp eq i16 %175, 46
  br i1 %176, label %177, label %197

177:                                              ; preds = %174
  %178 = getelementptr inbounds i16, i16* %172, i64 1
  %179 = ptrtoint i16* %178 to i64
  %180 = icmp ult i16* %178, %121
  br i1 %180, label %181, label %197

181:                                              ; preds = %177
  %182 = load i16, i16* %178, align 2
  %183 = add i16 %182, -48
  %184 = icmp ult i16 %183, 10
  br i1 %184, label %189, label %197

185:                                              ; preds = %189
  %186 = load i16, i16* %191, align 2
  %187 = add i16 %186, -48
  %188 = icmp ult i16 %187, 10
  br i1 %188, label %189, label %195

189:                                              ; preds = %181, %185
  %190 = phi i16* [ %191, %185 ], [ %178, %181 ]
  %191 = getelementptr inbounds i16, i16* %190, i64 1
  %192 = icmp ult i16* %191, %121
  br i1 %192, label %185, label %193

193:                                              ; preds = %189
  %194 = ptrtoint i16* %191 to i64
  br label %197

195:                                              ; preds = %185
  %196 = ptrtoint i16* %191 to i64
  br label %197

197:                                              ; preds = %195, %193, %181, %177, %174, %170
  %198 = phi i64 [ %179, %177 ], [ %171, %174 ], [ %171, %170 ], [ %194, %193 ], [ %179, %181 ], [ %196, %195 ]
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %4) #9
  store i8 -86, i8* %4, align 1
  %199 = sub i64 %198, %143
  %200 = ashr exact i64 %199, 1
  %201 = call double @_ZN3WTF18CharactersToDoubleEPKDsmPb(i16* %144, i64 %200, i8* nonnull %4) #9
  %202 = load i8, i8* %4, align 1, !range !3
  %203 = icmp eq i8 %202, 0
  br i1 %203, label %217, label %204

204:                                              ; preds = %197
  %205 = inttoptr i64 %198 to i16*
  %206 = icmp ugt i16* %121, %205
  br i1 %206, label %207, label %213

207:                                              ; preds = %204
  %208 = load i16, i16* %205, align 2
  %209 = icmp eq i16 %208, 42
  %210 = select i1 %209, i32 0, i32 2
  %211 = icmp eq i16 %208, 37
  %212 = select i1 %211, i32 1, i32 %210
  br label %213

213:                                              ; preds = %207, %204
  %214 = phi i32 [ 2, %204 ], [ %212, %207 ]
  %215 = getelementptr inbounds %"class.blink::HTMLDimension", %"class.blink::HTMLDimension"* %1, i64 0, i32 0
  store i32 %214, i32* %215, align 8
  %216 = getelementptr inbounds %"class.blink::HTMLDimension", %"class.blink::HTMLDimension"* %1, i64 0, i32 1
  store double %201, double* %216, align 8
  br label %217

217:                                              ; preds = %213, %197
  %218 = phi i1 [ true, %213 ], [ false, %197 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4) #9
  br label %219

219:                                              ; preds = %2, %217, %146, %142, %116, %46, %42, %8
  %220 = phi i1 [ false, %8 ], [ %117, %116 ], [ false, %46 ], [ false, %42 ], [ %218, %217 ], [ false, %146 ], [ false, %142 ], [ false, %2 ]
  ret i1 %220
}

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #3

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #4

declare zeroext i1 @_ZNK3WTF10StringImpl8EndsWithEDs(%"class.WTF::StringImpl"*, i16 zeroext) local_unnamed_addr #2

; Function Attrs: nofree nounwind readonly
declare i8* @memchr(i8*, i32, i64) local_unnamed_addr #5

declare i32 @_ZN3WTF16CharactersToUIntEPKhmNS_20NumberParsingOptionsEPb(i8*, i64, i32, i8*) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare double @pow(double, double) local_unnamed_addr #6

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIhLj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKhEEvOT_(%"class.WTF::Vector.1"*, i8* dereferenceable(1)) local_unnamed_addr #7 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = icmp ugt i8* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds i8, i8* %7, i64 %10
  %12 = icmp ugt i8* %11, %1
  br i1 %12, label %46, label %13

13:                                               ; preds = %9, %2
  %14 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = lshr i32 %15, 2
  %17 = add i32 %15, 1
  %18 = add i32 %17, %16
  %19 = icmp ugt i32 %18, 4
  %20 = select i1 %19, i32 %18, i32 4
  %21 = icmp ugt i32 %20, %5
  %22 = select i1 %21, i32 %20, i32 %5
  %23 = icmp ult i32 %15, %22
  br i1 %23, label %24, label %83, !prof !4

24:                                               ; preds = %13
  %25 = icmp eq i8* %7, null
  %26 = zext i32 %22 to i64
  %27 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64 %26) #9
  %28 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %27, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv, i64 0, i64 0)) #9
  %29 = ptrtoint i8* %28 to i64
  br i1 %25, label %30, label %33

30:                                               ; preds = %24
  %31 = bitcast %"class.WTF::Vector.1"* %0 to i64*
  store atomic i64 %29, i64* %31 monotonic, align 8
  %32 = trunc i64 %27 to i32
  store i32 %32, i32* %14, align 8
  br label %83

33:                                               ; preds = %24
  %34 = load i8*, i8** %6, align 8
  %35 = icmp ne i8* %28, null
  %36 = icmp ne i8* %34, null
  %37 = and i1 %35, %36
  br i1 %37, label %38, label %42, !prof !4

38:                                               ; preds = %33
  %39 = load i32, i32* %3, align 4
  %40 = zext i32 %39 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %28, i8* nonnull align 1 %34, i64 %40, i1 false) #9
  %41 = load i8*, i8** %6, align 8
  br label %42

42:                                               ; preds = %38, %33
  %43 = phi i8* [ %34, %33 ], [ %41, %38 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %43) #9
  %44 = bitcast %"class.WTF::Vector.1"* %0 to i64*
  store atomic i64 %29, i64* %44 monotonic, align 8
  %45 = trunc i64 %27 to i32
  store i32 %45, i32* %14, align 8
  br label %83

46:                                               ; preds = %9
  %47 = ptrtoint i8* %1 to i64
  %48 = ptrtoint i8* %7 to i64
  %49 = sub i64 %47, %48
  %50 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 1
  %51 = load i32, i32* %50, align 8
  %52 = lshr i32 %51, 2
  %53 = add i32 %51, 1
  %54 = add i32 %53, %52
  %55 = icmp ugt i32 %54, 4
  %56 = select i1 %55, i32 %54, i32 4
  %57 = icmp ugt i32 %56, %5
  %58 = select i1 %57, i32 %56, i32 %5
  %59 = icmp ult i32 %51, %58
  br i1 %59, label %60, label %80, !prof !4

60:                                               ; preds = %46
  %61 = icmp eq i8* %7, null
  %62 = zext i32 %58 to i64
  %63 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64 %62) #9
  %64 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %63, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv, i64 0, i64 0)) #9
  %65 = ptrtoint i8* %64 to i64
  br i1 %61, label %77, label %66

66:                                               ; preds = %60
  %67 = load i8*, i8** %6, align 8
  %68 = icmp ne i8* %64, null
  %69 = icmp ne i8* %67, null
  %70 = and i1 %68, %69
  br i1 %70, label %71, label %75, !prof !4

71:                                               ; preds = %66
  %72 = load i32, i32* %3, align 4
  %73 = zext i32 %72 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %64, i8* nonnull align 1 %67, i64 %73, i1 false) #9
  %74 = load i8*, i8** %6, align 8
  br label %75

75:                                               ; preds = %71, %66
  %76 = phi i8* [ %67, %66 ], [ %74, %71 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %76) #9
  br label %77

77:                                               ; preds = %60, %75
  %78 = bitcast %"class.WTF::Vector.1"* %0 to i64*
  store atomic i64 %65, i64* %78 monotonic, align 8
  %79 = trunc i64 %63 to i32
  store i32 %79, i32* %50, align 8
  br label %80

80:                                               ; preds = %77, %46
  %81 = phi i8* [ %7, %46 ], [ %64, %77 ]
  %82 = getelementptr inbounds i8, i8* %81, i64 %49
  br label %83

83:                                               ; preds = %42, %30, %13, %80
  %84 = phi i8* [ %81, %80 ], [ %7, %13 ], [ %28, %30 ], [ %28, %42 ]
  %85 = phi i8* [ %82, %80 ], [ %1, %13 ], [ %1, %30 ], [ %1, %42 ]
  %86 = load i32, i32* %3, align 4
  %87 = zext i32 %86 to i64
  %88 = getelementptr inbounds i8, i8* %84, i64 %87
  %89 = load i8, i8* %85, align 1
  store i8 %89, i8* %88, align 1
  %90 = load i32, i32* %3, align 4
  %91 = add i32 %90, 1
  store i32 %91, i32* %3, align 4
  ret void
}

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #9
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 2145386496
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #9
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 2145386496) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.2, i64 0, i64 0), i8* %11, i8* %12) #9
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.3, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #9
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #9
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #9
  %20 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %0) #9
  ret i64 %20
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #2

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #2

declare i32 @_ZN3WTF16CharactersToUIntEPKDsmNS_20NumberParsingOptionsEPb(i16*, i64, i32, i8*) local_unnamed_addr #2

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIDsLj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKDsEEvOT_(%"class.WTF::Vector.11"*, i16* dereferenceable(2)) local_unnamed_addr #7 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.11", %"class.WTF::Vector.11"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.11", %"class.WTF::Vector.11"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load i16*, i16** %6, align 8
  %8 = icmp ugt i16* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds i16, i16* %7, i64 %10
  %12 = icmp ugt i16* %11, %1
  br i1 %12, label %54, label %13

13:                                               ; preds = %9, %2
  %14 = getelementptr inbounds %"class.WTF::Vector.11", %"class.WTF::Vector.11"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = lshr i32 %15, 2
  %17 = add i32 %15, 1
  %18 = add i32 %17, %16
  %19 = icmp ugt i32 %18, 4
  %20 = select i1 %19, i32 %18, i32 4
  %21 = icmp ugt i32 %20, %5
  %22 = select i1 %21, i32 %20, i32 %5
  %23 = icmp ult i32 %15, %22
  br i1 %23, label %24, label %99, !prof !4

24:                                               ; preds = %13
  %25 = icmp eq i16* %7, null
  %26 = zext i32 %22 to i64
  %27 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm(i64 %26) #9
  %28 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %27, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIDsEEPKcv, i64 0, i64 0)) #9
  br i1 %25, label %29, label %35

29:                                               ; preds = %24
  %30 = ptrtoint i8* %28 to i64
  %31 = bitcast %"class.WTF::Vector.11"* %0 to i64*
  store atomic i64 %30, i64* %31 monotonic, align 8
  %32 = lshr i64 %27, 1
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %14, align 8
  %34 = bitcast i8* %28 to i16*
  br label %99

35:                                               ; preds = %24
  %36 = lshr i64 %27, 1
  %37 = ptrtoint i8* %28 to i64
  %38 = load i16*, i16** %6, align 8
  %39 = icmp ne i8* %28, null
  %40 = icmp ne i16* %38, null
  %41 = and i1 %39, %40
  %42 = bitcast i16* %38 to i8*
  br i1 %41, label %43, label %49, !prof !4

43:                                               ; preds = %35
  %44 = load i32, i32* %3, align 4
  %45 = zext i32 %44 to i64
  %46 = shl nuw nsw i64 %45, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %28, i8* nonnull align 2 %42, i64 %46, i1 false) #9
  %47 = bitcast %"class.WTF::Vector.11"* %0 to i8**
  %48 = load i8*, i8** %47, align 8
  br label %49

49:                                               ; preds = %43, %35
  %50 = phi i8* [ %48, %43 ], [ %42, %35 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %50) #9
  %51 = bitcast %"class.WTF::Vector.11"* %0 to i64*
  store atomic i64 %37, i64* %51 monotonic, align 8
  %52 = trunc i64 %36 to i32
  store i32 %52, i32* %14, align 8
  %53 = bitcast i8* %28 to i16*
  br label %99

54:                                               ; preds = %9
  %55 = ptrtoint i16* %1 to i64
  %56 = ptrtoint i16* %7 to i64
  %57 = sub i64 %55, %56
  %58 = ashr exact i64 %57, 1
  %59 = getelementptr inbounds %"class.WTF::Vector.11", %"class.WTF::Vector.11"* %0, i64 0, i32 0, i32 0, i32 1
  %60 = load i32, i32* %59, align 8
  %61 = lshr i32 %60, 2
  %62 = add i32 %60, 1
  %63 = add i32 %62, %61
  %64 = icmp ugt i32 %63, 4
  %65 = select i1 %64, i32 %63, i32 4
  %66 = icmp ugt i32 %65, %5
  %67 = select i1 %66, i32 %65, i32 %5
  %68 = icmp ult i32 %60, %67
  br i1 %68, label %69, label %96, !prof !4

69:                                               ; preds = %54
  %70 = icmp eq i16* %7, null
  %71 = zext i32 %67 to i64
  %72 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm(i64 %71) #9
  %73 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %72, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIDsEEPKcv, i64 0, i64 0)) #9
  %74 = ptrtoint i8* %73 to i64
  br i1 %70, label %75, label %77

75:                                               ; preds = %69
  %76 = bitcast %"class.WTF::Vector.11"* %0 to i64*
  store atomic i64 %74, i64* %76 monotonic, align 8
  br label %92

77:                                               ; preds = %69
  %78 = load i16*, i16** %6, align 8
  %79 = icmp ne i8* %73, null
  %80 = icmp ne i16* %78, null
  %81 = and i1 %79, %80
  %82 = bitcast i16* %78 to i8*
  br i1 %81, label %83, label %89, !prof !4

83:                                               ; preds = %77
  %84 = load i32, i32* %3, align 4
  %85 = zext i32 %84 to i64
  %86 = shl nuw nsw i64 %85, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %73, i8* nonnull align 2 %82, i64 %86, i1 false) #9
  %87 = bitcast %"class.WTF::Vector.11"* %0 to i8**
  %88 = load i8*, i8** %87, align 8
  br label %89

89:                                               ; preds = %83, %77
  %90 = phi i8* [ %88, %83 ], [ %82, %77 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %90) #9
  %91 = bitcast %"class.WTF::Vector.11"* %0 to i64*
  store atomic i64 %74, i64* %91 monotonic, align 8
  br label %92

92:                                               ; preds = %89, %75
  %93 = lshr i64 %72, 1
  %94 = trunc i64 %93 to i32
  store i32 %94, i32* %59, align 8
  %95 = bitcast i8* %73 to i16*
  br label %96

96:                                               ; preds = %92, %54
  %97 = phi i16* [ %7, %54 ], [ %95, %92 ]
  %98 = getelementptr inbounds i16, i16* %97, i64 %58
  br label %99

99:                                               ; preds = %49, %29, %13, %96
  %100 = phi i16* [ %97, %96 ], [ %7, %13 ], [ %34, %29 ], [ %53, %49 ]
  %101 = phi i16* [ %98, %96 ], [ %1, %13 ], [ %1, %29 ], [ %1, %49 ]
  %102 = load i32, i32* %3, align 4
  %103 = zext i32 %102 to i64
  %104 = getelementptr inbounds i16, i16* %100, i64 %103
  %105 = load i16, i16* %101, align 2
  store i16 %105, i16* %104, align 2
  %106 = load i32, i32* %3, align 4
  %107 = add i32 %106, 1
  store i32 %107, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #9
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 1072693248
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #9
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 1072693248) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.2, i64 0, i64 0), i8* %11, i8* %12) #9
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.3, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #9
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #9
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #9
  %20 = shl i64 %0, 1
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #9
  ret i64 %21
}

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #2

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink13HTMLDimensionELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS2_EEvOT_(%"class.WTF::Vector"*, %"class.blink::HTMLDimension"* dereferenceable(16)) local_unnamed_addr #7 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load %"class.blink::HTMLDimension"*, %"class.blink::HTMLDimension"** %6, align 8
  %8 = icmp ugt %"class.blink::HTMLDimension"* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds %"class.blink::HTMLDimension", %"class.blink::HTMLDimension"* %7, i64 %10
  %12 = icmp ugt %"class.blink::HTMLDimension"* %11, %1
  br i1 %12, label %54, label %13

13:                                               ; preds = %9, %2
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = lshr i32 %15, 2
  %17 = add i32 %15, 1
  %18 = add i32 %17, %16
  %19 = icmp ugt i32 %18, 4
  %20 = select i1 %19, i32 %18, i32 4
  %21 = icmp ugt i32 %20, %5
  %22 = select i1 %21, i32 %20, i32 %5
  %23 = icmp ult i32 %15, %22
  br i1 %23, label %24, label %99, !prof !4

24:                                               ; preds = %13
  %25 = icmp eq %"class.blink::HTMLDimension"* %7, null
  %26 = zext i32 %22 to i64
  %27 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink13HTMLDimensionEEEmm(i64 %26) #9
  %28 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %27, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink13HTMLDimensionEEEPKcv, i64 0, i64 0)) #9
  br i1 %25, label %29, label %35

29:                                               ; preds = %24
  %30 = ptrtoint i8* %28 to i64
  %31 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %30, i64* %31 monotonic, align 8
  %32 = lshr i64 %27, 4
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %14, align 8
  %34 = bitcast i8* %28 to %"class.blink::HTMLDimension"*
  br label %99

35:                                               ; preds = %24
  %36 = lshr i64 %27, 4
  %37 = ptrtoint i8* %28 to i64
  %38 = load %"class.blink::HTMLDimension"*, %"class.blink::HTMLDimension"** %6, align 8
  %39 = icmp ne i8* %28, null
  %40 = icmp ne %"class.blink::HTMLDimension"* %38, null
  %41 = and i1 %39, %40
  %42 = bitcast %"class.blink::HTMLDimension"* %38 to i8*
  br i1 %41, label %43, label %49, !prof !4

43:                                               ; preds = %35
  %44 = load i32, i32* %3, align 4
  %45 = zext i32 %44 to i64
  %46 = shl nuw nsw i64 %45, 4
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %28, i8* nonnull align 8 %42, i64 %46, i1 false) #9
  %47 = bitcast %"class.WTF::Vector"* %0 to i8**
  %48 = load i8*, i8** %47, align 8
  br label %49

49:                                               ; preds = %43, %35
  %50 = phi i8* [ %48, %43 ], [ %42, %35 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %50) #9
  %51 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %37, i64* %51 monotonic, align 8
  %52 = trunc i64 %36 to i32
  store i32 %52, i32* %14, align 8
  %53 = bitcast i8* %28 to %"class.blink::HTMLDimension"*
  br label %99

54:                                               ; preds = %9
  %55 = ptrtoint %"class.blink::HTMLDimension"* %1 to i64
  %56 = ptrtoint %"class.blink::HTMLDimension"* %7 to i64
  %57 = sub i64 %55, %56
  %58 = ashr exact i64 %57, 4
  %59 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %60 = load i32, i32* %59, align 8
  %61 = lshr i32 %60, 2
  %62 = add i32 %60, 1
  %63 = add i32 %62, %61
  %64 = icmp ugt i32 %63, 4
  %65 = select i1 %64, i32 %63, i32 4
  %66 = icmp ugt i32 %65, %5
  %67 = select i1 %66, i32 %65, i32 %5
  %68 = icmp ult i32 %60, %67
  br i1 %68, label %69, label %96, !prof !4

69:                                               ; preds = %54
  %70 = icmp eq %"class.blink::HTMLDimension"* %7, null
  %71 = zext i32 %67 to i64
  %72 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink13HTMLDimensionEEEmm(i64 %71) #9
  %73 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %72, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink13HTMLDimensionEEEPKcv, i64 0, i64 0)) #9
  %74 = ptrtoint i8* %73 to i64
  br i1 %70, label %75, label %77

75:                                               ; preds = %69
  %76 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %74, i64* %76 monotonic, align 8
  br label %92

77:                                               ; preds = %69
  %78 = load %"class.blink::HTMLDimension"*, %"class.blink::HTMLDimension"** %6, align 8
  %79 = icmp ne i8* %73, null
  %80 = icmp ne %"class.blink::HTMLDimension"* %78, null
  %81 = and i1 %79, %80
  %82 = bitcast %"class.blink::HTMLDimension"* %78 to i8*
  br i1 %81, label %83, label %89, !prof !4

83:                                               ; preds = %77
  %84 = load i32, i32* %3, align 4
  %85 = zext i32 %84 to i64
  %86 = shl nuw nsw i64 %85, 4
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %73, i8* nonnull align 8 %82, i64 %86, i1 false) #9
  %87 = bitcast %"class.WTF::Vector"* %0 to i8**
  %88 = load i8*, i8** %87, align 8
  br label %89

89:                                               ; preds = %83, %77
  %90 = phi i8* [ %88, %83 ], [ %82, %77 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %90) #9
  %91 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %74, i64* %91 monotonic, align 8
  br label %92

92:                                               ; preds = %89, %75
  %93 = lshr i64 %72, 4
  %94 = trunc i64 %93 to i32
  store i32 %94, i32* %59, align 8
  %95 = bitcast i8* %73 to %"class.blink::HTMLDimension"*
  br label %96

96:                                               ; preds = %92, %54
  %97 = phi %"class.blink::HTMLDimension"* [ %7, %54 ], [ %95, %92 ]
  %98 = getelementptr inbounds %"class.blink::HTMLDimension", %"class.blink::HTMLDimension"* %97, i64 %58
  br label %99

99:                                               ; preds = %49, %29, %13, %96
  %100 = phi %"class.blink::HTMLDimension"* [ %97, %96 ], [ %7, %13 ], [ %34, %29 ], [ %53, %49 ]
  %101 = phi %"class.blink::HTMLDimension"* [ %98, %96 ], [ %1, %13 ], [ %1, %29 ], [ %1, %49 ]
  %102 = load i32, i32* %3, align 4
  %103 = zext i32 %102 to i64
  %104 = getelementptr inbounds %"class.blink::HTMLDimension", %"class.blink::HTMLDimension"* %100, i64 %103
  %105 = bitcast %"class.blink::HTMLDimension"* %104 to i8*
  %106 = bitcast %"class.blink::HTMLDimension"* %101 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %105, i8* align 8 %106, i64 16, i1 false) #9
  %107 = load i32, i32* %3, align 4
  %108 = add i32 %107, 1
  store i32 %108, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink13HTMLDimensionEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #9
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 134086656
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #9
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 134086656) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.2, i64 0, i64 0), i8* %11, i8* %12) #9
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.3, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #9
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #9
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #9
  %20 = shl i64 %0, 4
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #9
  ret i64 %21
}

declare double @_ZN3WTF18CharactersToDoubleEPKhmPb(i8*, i64, i8*) local_unnamed_addr #2

declare double @_ZN3WTF18CharactersToDoubleEPKDsmPb(i16*, i64, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { cold noreturn nounwind }
attributes #5 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{i8 0, i8 2}
!4 = !{!"branch_weights", i32 2000, i32 1}
