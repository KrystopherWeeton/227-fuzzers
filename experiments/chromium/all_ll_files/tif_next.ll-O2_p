; ModuleID = '../../third_party/pdfium/third_party/libtiff/tif_next.c'
source_filename = "../../third_party/pdfium/third_party/libtiff/tif_next.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"

%struct.tiff = type { i8*, i32, i32, i32, i64, i64, i64*, i16, i16, %struct.TIFFDirectory, %struct.TIFFDirectory, %union.anon.0, i16, i32, i16, i32, i64, i64, i16, i64, i32, i32, i64, i32, i32 (%struct.tiff*)*, i32 (%struct.tiff*)*, i32 (%struct.tiff*, i16)*, i32 (%struct.tiff*)*, i32, i32 (%struct.tiff*, i16)*, i32 (%struct.tiff*)*, i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)*, void (%struct.tiff*)*, i32 (%struct.tiff*, i32)*, void (%struct.tiff*)*, i32 (%struct.tiff*, i32)*, void (%struct.tiff*, i32*, i32*)*, i8*, i64, i64, i8*, i64, i64, i64, i8*, i64, i8*, i64, i32 (i8*, i8**, i64*)*, void (i8*, i8*, i64)*, i8*, i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)*, i64 (i8*, i64, i32)*, i32 (i8*)*, i64 (i8*)*, void (%struct.tiff*, i8*, i64)*, %struct._TIFFField**, i64, %struct._TIFFField*, %struct.TIFFTagMethods, %struct.client_info*, %struct._TIFFFieldArray*, i64 }
%struct.TIFFDirectory = type { [4 x i64], i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i16, i16, i16, i16, i32, i16, i16, double*, double*, float, float, i16, i16, float, float, [2 x i16], [3 x i16*], [2 x i16], i16, i16*, i32, i32, i64*, i64*, i32, %struct.TIFFDirEntry, %struct.TIFFDirEntry, i16, i64*, [2 x i16], i16, [3 x i16*], float*, i32, i8*, i32, %struct.TIFFTagValue*, i8 }
%struct.TIFFDirEntry = type { i16, i16, i64, %union.anon, i8 }
%union.anon = type { i64 }
%struct.TIFFTagValue = type { %struct._TIFFField*, i32, i8* }
%union.anon.0 = type { %struct.TIFFHeaderBig }
%struct.TIFFHeaderBig = type { i16, i16, i16, i16, i64 }
%struct._TIFFField = type { i32, i16, i16, i32, i32, i32, i32, i16, i8, i8, i8*, %struct._TIFFFieldArray* }
%struct.TIFFTagMethods = type { i32 (%struct.tiff*, i32, %struct.__va_list_tag*)*, i32 (%struct.tiff*, i32, %struct.__va_list_tag*)*, void (%struct.tiff*, %struct._IO_FILE*, i64)* }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.client_info = type { %struct.client_info*, i8*, i8* }
%struct._TIFFFieldArray = type { i32, i32, i32, %struct._TIFFField* }

@NeXTPreDecode.module = internal constant [14 x i8] c"NeXTPreDecode\00", align 1
@.str = private unnamed_addr constant [31 x i8] c"Unsupported BitsPerSample = %d\00", align 1
@NeXTDecode.module = internal constant [11 x i8] c"NeXTDecode\00", align 1
@.str.1 = private unnamed_addr constant [36 x i8] c"Fractional scanlines cannot be read\00", align 1
@.str.2 = private unnamed_addr constant [30 x i8] c"Invalid data for scanline %ld\00", align 1
@.str.3 = private unnamed_addr constant [33 x i8] c"Not enough data for scanline %ld\00", align 1

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden i32 @TIFFInitNeXT(%struct.tiff* nocapture, i32) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 26
  store i32 (%struct.tiff*, i16)* @NeXTPreDecode, i32 (%struct.tiff*, i16)** %3, align 8
  %4 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 31
  store i32 (%struct.tiff*, i8*, i64, i16)* @NeXTDecode, i32 (%struct.tiff*, i8*, i64, i16)** %4, align 8
  %5 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 33
  store i32 (%struct.tiff*, i8*, i64, i16)* @NeXTDecode, i32 (%struct.tiff*, i8*, i64, i16)** %5, align 8
  %6 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 35
  store i32 (%struct.tiff*, i8*, i64, i16)* @NeXTDecode, i32 (%struct.tiff*, i8*, i64, i16)** %6, align 8
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @NeXTPreDecode(%struct.tiff* nocapture readonly, i16 zeroext) #1 {
  %3 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 8
  %4 = load i16, i16* %3, align 4
  %5 = icmp eq i16 %4, 2
  br i1 %5, label %10, label %6

6:                                                ; preds = %2
  %7 = zext i16 %4 to i32
  %8 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %9 = load i8*, i8** %8, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %9, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @NeXTPreDecode.module, i64 0, i64 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str, i64 0, i64 0), i32 %7) #4
  br label %10

10:                                               ; preds = %2, %6
  %11 = phi i32 [ 0, %6 ], [ 1, %2 ]
  ret i32 %11
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @NeXTDecode(%struct.tiff* nocapture, i8*, i64, i16 zeroext) #1 {
  %5 = icmp sgt i64 %2, 0
  br i1 %5, label %6, label %7

6:                                                ; preds = %4
  call void @llvm.memset.p0i8.i64(i8* align 1 %1, i8 -1, i64 %2, i1 false)
  br label %7

7:                                                ; preds = %6, %4
  %8 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 49
  %9 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 50
  %10 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 43
  %11 = load i64, i64* %10, align 8
  %12 = srem i64 %2, %11
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %17, label %14

14:                                               ; preds = %7
  %15 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %16 = load i8*, i8** %15, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %16, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @NeXTDecode.module, i64 0, i64 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.1, i64 0, i64 0)) #4
  br label %157

17:                                               ; preds = %7
  %18 = load i64, i64* %9, align 8
  %19 = load i8*, i8** %8, align 8
  %20 = icmp sgt i64 %18, 0
  %21 = and i1 %5, %20
  br i1 %21, label %22, label %148

22:                                               ; preds = %17
  %23 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 1
  %24 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 3
  %25 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 4
  br label %26

26:                                               ; preds = %22, %140
  %27 = phi i8* [ %1, %22 ], [ %144, %140 ]
  %28 = phi i64 [ %18, %22 ], [ %142, %140 ]
  %29 = phi i8* [ %19, %22 ], [ %141, %140 ]
  %30 = phi i64 [ %2, %22 ], [ %143, %140 ]
  %31 = getelementptr inbounds i8, i8* %29, i64 1
  %32 = load i8, i8* %29, align 1
  %33 = add nsw i64 %28, -1
  switch i8 %32, label %67 [
    i8 0, label %34
    i8 64, label %39
  ]

34:                                               ; preds = %26
  %35 = icmp sgt i64 %28, %11
  br i1 %35, label %36, label %151

36:                                               ; preds = %34
  tail call void @_TIFFmemcpy(i8* %27, i8* %31, i64 %11) #4
  %37 = getelementptr inbounds i8, i8* %31, i64 %11
  %38 = sub nsw i64 %33, %11
  br label %140

39:                                               ; preds = %26
  %40 = icmp slt i64 %28, 5
  br i1 %40, label %151, label %41

41:                                               ; preds = %39
  %42 = load i8, i8* %31, align 1
  %43 = zext i8 %42 to i64
  %44 = shl nuw nsw i64 %43, 8
  %45 = getelementptr inbounds i8, i8* %29, i64 2
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i64
  %48 = or i64 %44, %47
  %49 = getelementptr inbounds i8, i8* %29, i64 3
  %50 = load i8, i8* %49, align 1
  %51 = zext i8 %50 to i64
  %52 = shl nuw nsw i64 %51, 8
  %53 = getelementptr inbounds i8, i8* %29, i64 4
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i64
  %56 = or i64 %52, %55
  %57 = add nuw nsw i64 %56, 4
  %58 = icmp sle i64 %28, %57
  %59 = add nuw nsw i64 %56, %48
  %60 = icmp sgt i64 %59, %11
  %61 = or i1 %58, %60
  br i1 %61, label %151, label %62

62:                                               ; preds = %41
  %63 = getelementptr inbounds i8, i8* %27, i64 %48
  %64 = getelementptr inbounds i8, i8* %29, i64 5
  tail call void @_TIFFmemcpy(i8* %63, i8* %64, i64 %56) #4
  %65 = getelementptr inbounds i8, i8* %31, i64 %57
  %66 = sub nsw i64 %33, %57
  br label %140

67:                                               ; preds = %26
  %68 = load i32, i32* %24, align 8
  %69 = and i32 %68, 1024
  %70 = icmp eq i32 %69, 0
  %71 = select i1 %70, i32* %23, i32* %25
  %72 = load i32, i32* %71, align 4
  br label %73

73:                                               ; preds = %136, %67
  %74 = phi i8* [ %31, %67 ], [ %137, %136 ]
  %75 = phi i8* [ %27, %67 ], [ %122, %136 ]
  %76 = phi i64 [ %33, %67 ], [ %139, %136 ]
  %77 = phi i8 [ %32, %67 ], [ %138, %136 ]
  %78 = phi i32 [ 0, %67 ], [ %123, %136 ]
  %79 = phi i64 [ 0, %67 ], [ %124, %136 ]
  %80 = lshr i8 %77, 6
  %81 = and i8 %77, 63
  %82 = icmp ne i8 %81, 0
  %83 = icmp ult i32 %78, %72
  %84 = and i1 %82, %83
  %85 = icmp slt i64 %79, %11
  %86 = and i1 %84, %85
  br i1 %86, label %87, label %121

87:                                               ; preds = %73
  %88 = zext i8 %81 to i64
  %89 = shl nuw nsw i8 %80, 2
  %90 = shl nuw nsw i8 %80, 4
  %91 = and i8 %77, -64
  br label %92

92:                                               ; preds = %87, %113
  %93 = phi i64 [ %88, %87 ], [ %97, %113 ]
  %94 = phi i64 [ %79, %87 ], [ %115, %113 ]
  %95 = phi i32 [ %78, %87 ], [ %98, %113 ]
  %96 = phi i8* [ %75, %87 ], [ %114, %113 ]
  %97 = add nsw i64 %93, -1
  %98 = add nuw i32 %95, 1
  %99 = and i32 %95, 3
  switch i32 %99, label %112 [
    i32 0, label %100
    i32 1, label %101
    i32 2, label %104
    i32 3, label %107
  ]

100:                                              ; preds = %92
  store i8 %91, i8* %96, align 1
  br label %113

101:                                              ; preds = %92
  %102 = load i8, i8* %96, align 1
  %103 = or i8 %102, %90
  store i8 %103, i8* %96, align 1
  br label %113

104:                                              ; preds = %92
  %105 = load i8, i8* %96, align 1
  %106 = or i8 %105, %89
  store i8 %106, i8* %96, align 1
  br label %113

107:                                              ; preds = %92
  %108 = getelementptr inbounds i8, i8* %96, i64 1
  %109 = load i8, i8* %96, align 1
  %110 = or i8 %109, %80
  store i8 %110, i8* %96, align 1
  %111 = add nsw i64 %94, 1
  br label %113

112:                                              ; preds = %92
  unreachable

113:                                              ; preds = %107, %104, %101, %100
  %114 = phi i8* [ %108, %107 ], [ %96, %104 ], [ %96, %101 ], [ %96, %100 ]
  %115 = phi i64 [ %111, %107 ], [ %94, %104 ], [ %94, %101 ], [ %94, %100 ]
  %116 = icmp sgt i64 %97, 0
  %117 = icmp ult i32 %98, %72
  %118 = and i1 %116, %117
  %119 = icmp slt i64 %115, %11
  %120 = and i1 %118, %119
  br i1 %120, label %92, label %121

121:                                              ; preds = %113, %73
  %122 = phi i8* [ %75, %73 ], [ %114, %113 ]
  %123 = phi i32 [ %78, %73 ], [ %98, %113 ]
  %124 = phi i64 [ %79, %73 ], [ %115, %113 ]
  %125 = phi i1 [ %83, %73 ], [ %117, %113 ]
  %126 = phi i1 [ %85, %73 ], [ %119, %113 ]
  br i1 %125, label %127, label %140

127:                                              ; preds = %121
  br i1 %126, label %134, label %128

128:                                              ; preds = %127
  %129 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %130 = load i8*, i8** %129, align 8
  %131 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 13
  %132 = load i32, i32* %131, align 4
  %133 = zext i32 %132 to i64
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %130, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @NeXTDecode.module, i64 0, i64 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.2, i64 0, i64 0), i64 %133) #4
  br label %157

134:                                              ; preds = %127
  %135 = icmp eq i64 %76, 0
  br i1 %135, label %151, label %136

136:                                              ; preds = %134
  %137 = getelementptr inbounds i8, i8* %74, i64 1
  %138 = load i8, i8* %74, align 1
  %139 = add nsw i64 %76, -1
  br label %73

140:                                              ; preds = %121, %62, %36
  %141 = phi i8* [ %65, %62 ], [ %37, %36 ], [ %74, %121 ]
  %142 = phi i64 [ %66, %62 ], [ %38, %36 ], [ %76, %121 ]
  %143 = sub nsw i64 %30, %11
  %144 = getelementptr inbounds i8, i8* %27, i64 %11
  %145 = icmp sgt i64 %142, 0
  %146 = icmp sgt i64 %143, 0
  %147 = and i1 %146, %145
  br i1 %147, label %26, label %148

148:                                              ; preds = %140, %17
  %149 = phi i8* [ %19, %17 ], [ %141, %140 ]
  %150 = phi i64 [ %18, %17 ], [ %142, %140 ]
  store i8* %149, i8** %8, align 8
  store i64 %150, i64* %9, align 8
  br label %157

151:                                              ; preds = %41, %39, %34, %134
  %152 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %153 = load i8*, i8** %152, align 8
  %154 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 13
  %155 = load i32, i32* %154, align 4
  %156 = zext i32 %155 to i64
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %153, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @NeXTDecode.module, i64 0, i64 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.3, i64 0, i64 0), i64 %156) #4
  br label %157

157:                                              ; preds = %128, %151, %148, %14
  %158 = phi i32 [ 0, %14 ], [ 0, %151 ], [ 1, %148 ], [ 0, %128 ]
  ret i32 %158
}

declare void @TIFFErrorExt(i8*, i8*, i8*, ...) local_unnamed_addr #2

declare void @_TIFFmemcpy(i8*, i8*, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
