; ModuleID = '../../third_party/swiftshader/third_party/llvm-subzero/lib/Support/FoldingSet.cpp'
source_filename = "../../third_party/swiftshader/third_party/llvm-subzero/lib/Support/FoldingSet.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.llvm::FoldingSetImpl" = type { i32 (...)**, i8**, i32, i32 }
%"class.llvm::FoldingSetIteratorImpl" = type { %"class.llvm::FoldingSetImpl::Node"* }
%"class.llvm::FoldingSetImpl::Node" = type { i8* }
%"class.llvm::FoldingSetBucketIteratorImpl" = type { i8* }
%"class.llvm::FoldingSetNodeIDRef" = type { i32*, i64 }
%"class.llvm::FoldingSetNodeID" = type { %"class.llvm::SmallVector" }
%"class.llvm::SmallVector" = type { %"class.llvm::SmallVectorImpl.base", %"struct.llvm::SmallVectorStorage" }
%"class.llvm::SmallVectorImpl.base" = type { %"class.llvm::SmallVectorTemplateBase.base" }
%"class.llvm::SmallVectorTemplateBase.base" = type { %"class.llvm::SmallVectorTemplateCommon.base" }
%"class.llvm::SmallVectorTemplateCommon.base" = type <{ %"class.llvm::SmallVectorBase", %"struct.llvm::AlignedCharArrayUnion" }>
%"class.llvm::SmallVectorBase" = type { i8*, i8*, i8* }
%"struct.llvm::AlignedCharArrayUnion" = type { %"struct.llvm::AlignedCharArray" }
%"struct.llvm::AlignedCharArray" = type { [4 x i8] }
%"struct.llvm::SmallVectorStorage" = type { [31 x %"struct.llvm::AlignedCharArrayUnion"] }
%"class.llvm::SmallVectorTemplateBase" = type { %"class.llvm::SmallVectorTemplateCommon.base", [4 x i8] }
%"class.llvm::SmallVectorImpl" = type { %"class.llvm::SmallVectorTemplateBase.base", [4 x i8] }
%"class.llvm::BumpPtrAllocatorImpl" = type <{ i8*, i8*, %"class.llvm::SmallVector.0", %"class.llvm::SmallVector.7", i64, %"class.llvm::MallocAllocator", [7 x i8] }>
%"class.llvm::SmallVector.0" = type { %"class.llvm::SmallVectorImpl.1", %"struct.llvm::SmallVectorStorage.6" }
%"class.llvm::SmallVectorImpl.1" = type { %"class.llvm::SmallVectorTemplateBase.2" }
%"class.llvm::SmallVectorTemplateBase.2" = type { %"class.llvm::SmallVectorTemplateCommon.3" }
%"class.llvm::SmallVectorTemplateCommon.3" = type { %"class.llvm::SmallVectorBase", %"struct.llvm::AlignedCharArrayUnion.4" }
%"struct.llvm::AlignedCharArrayUnion.4" = type { %"struct.llvm::AlignedCharArray.5" }
%"struct.llvm::AlignedCharArray.5" = type { [8 x i8] }
%"struct.llvm::SmallVectorStorage.6" = type { [3 x %"struct.llvm::AlignedCharArrayUnion.4"] }
%"class.llvm::SmallVector.7" = type <{ %"class.llvm::SmallVectorImpl.8", %"struct.llvm::SmallVectorStorage.13", [7 x i8] }>
%"class.llvm::SmallVectorImpl.8" = type { %"class.llvm::SmallVectorTemplateBase.9" }
%"class.llvm::SmallVectorTemplateBase.9" = type { %"class.llvm::SmallVectorTemplateCommon.10" }
%"class.llvm::SmallVectorTemplateCommon.10" = type { %"class.llvm::SmallVectorBase", %"struct.llvm::AlignedCharArrayUnion.11" }
%"struct.llvm::AlignedCharArrayUnion.11" = type { %"struct.llvm::AlignedCharArray.12" }
%"struct.llvm::AlignedCharArray.12" = type { [16 x i8] }
%"struct.llvm::SmallVectorStorage.13" = type { i8 }
%"class.llvm::MallocAllocator" = type { i8 }
%"struct.llvm::hashing::detail::hash_state" = type { i64, i64, i64, i64, i64, i64, i64 }
%"struct.std::__1::pair" = type { i8*, i64 }

$_ZN4llvm23SmallVectorTemplateBaseIjLb1EE9push_backERKj = comdat any

$_ZN4llvm15SmallVectorImplIjE6appendIPKjEEvT_S5_ = comdat any

$_ZN4llvm7hashing6detail23hash_combine_range_implIKjEENSt3__19enable_ifIXsr16is_hashable_dataIT_EE5valueENS_9hash_codeEE4typeEPS6_SA_ = comdat any

$_ZN4llvm7hashing6detail10hash_shortEPKcmm = comdat any

$_ZN4llvm7hashing6detail10hash_state6createEPKcm = comdat any

$_ZN4llvm7hashing6detail10hash_state3mixEPKc = comdat any

$_ZN4llvm7hashing6detail10hash_state8finalizeEm = comdat any

$_ZN4llvm7hashing6detail10hash_state12mix_32_bytesEPKcRmS5_ = comdat any

$_ZN4llvm20BumpPtrAllocatorImplINS_15MallocAllocatorELm4096ELm4096EE8AllocateEmm = comdat any

$_ZN4llvm23SmallVectorTemplateBaseINSt3__14pairIPvmEELb1EE9push_backERKS4_ = comdat any

$_ZN4llvm20BumpPtrAllocatorImplINS_15MallocAllocatorELm4096ELm4096EE12StartNewSlabEv = comdat any

$_ZN4llvm23SmallVectorTemplateBaseIPvLb1EE9push_backERKS1_ = comdat any

$_ZZN4llvm7hashing6detail18get_execution_seedEvE4seed = comdat any

$_ZGVZN4llvm7hashing6detail18get_execution_seedEvE4seed = comdat any

@_ZTVN4llvm14FoldingSetImplE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.llvm::FoldingSetImpl"*)* @_ZN4llvm14FoldingSetImpl6anchorEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8
@_ZZN4llvm7hashing6detail18get_execution_seedEvE4seed = linkonce_odr hidden local_unnamed_addr global i64 0, comdat, align 8
@_ZGVZN4llvm7hashing6detail18get_execution_seedEvE4seed = linkonce_odr hidden global i64 0, comdat, align 8
@_ZN4llvm7hashing6detail19fixed_seed_overrideE = external local_unnamed_addr global i64, align 8

@_ZN4llvm14FoldingSetImplD1Ev = hidden unnamed_addr alias void (%"class.llvm::FoldingSetImpl"*), void (%"class.llvm::FoldingSetImpl"*)* @_ZN4llvm14FoldingSetImplD2Ev
@_ZN4llvm22FoldingSetIteratorImplC1EPPv = hidden unnamed_addr alias void (%"class.llvm::FoldingSetIteratorImpl"*, i8**), void (%"class.llvm::FoldingSetIteratorImpl"*, i8**)* @_ZN4llvm22FoldingSetIteratorImplC2EPPv
@_ZN4llvm28FoldingSetBucketIteratorImplC1EPPv = hidden unnamed_addr alias void (%"class.llvm::FoldingSetBucketIteratorImpl"*, i8**), void (%"class.llvm::FoldingSetBucketIteratorImpl"*, i8**)* @_ZN4llvm28FoldingSetBucketIteratorImplC2EPPv

; Function Attrs: nounwind optsize ssp uwtable
define hidden i32 @_ZNK4llvm19FoldingSetNodeIDRef11ComputeHashEv(%"class.llvm::FoldingSetNodeIDRef"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.llvm::FoldingSetNodeIDRef", %"class.llvm::FoldingSetNodeIDRef"* %0, i64 0, i32 0
  %3 = load i32*, i32** %2, align 8
  %4 = getelementptr inbounds %"class.llvm::FoldingSetNodeIDRef", %"class.llvm::FoldingSetNodeIDRef"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds i32, i32* %3, i64 %5
  %7 = tail call i64 @_ZN4llvm7hashing6detail23hash_combine_range_implIKjEENSt3__19enable_ifIXsr16is_hashable_dataIT_EE5valueENS_9hash_codeEE4typeEPS6_SA_(i32* %3, i32* %6) #14
  %8 = trunc i64 %7 to i32
  ret i32 %8
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind optsize readonly ssp uwtable
define hidden zeroext i1 @_ZNK4llvm19FoldingSetNodeIDRefeqES0_(%"class.llvm::FoldingSetNodeIDRef"* nocapture readonly, i32* nocapture readonly, i64) local_unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"class.llvm::FoldingSetNodeIDRef", %"class.llvm::FoldingSetNodeIDRef"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, %2
  br i1 %6, label %7, label %14

7:                                                ; preds = %3
  %8 = bitcast %"class.llvm::FoldingSetNodeIDRef"* %0 to i8**
  %9 = load i8*, i8** %8, align 8
  %10 = bitcast i32* %1 to i8*
  %11 = shl i64 %2, 2
  %12 = tail call i32 @bcmp(i8* %9, i8* %10, i64 %11)
  %13 = icmp eq i32 %12, 0
  br label %14

14:                                               ; preds = %3, %7
  %15 = phi i1 [ %13, %7 ], [ false, %3 ]
  ret i1 %15
}

; Function Attrs: nofree nounwind optsize readonly
declare i32 @memcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #3

; Function Attrs: nounwind optsize readonly ssp uwtable
define hidden zeroext i1 @_ZNK4llvm19FoldingSetNodeIDRefltES0_(%"class.llvm::FoldingSetNodeIDRef"* nocapture readonly, i32* nocapture readonly, i64) local_unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"class.llvm::FoldingSetNodeIDRef", %"class.llvm::FoldingSetNodeIDRef"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, %2
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = icmp ult i64 %5, %2
  br label %16

9:                                                ; preds = %3
  %10 = bitcast %"class.llvm::FoldingSetNodeIDRef"* %0 to i8**
  %11 = load i8*, i8** %10, align 8
  %12 = bitcast i32* %1 to i8*
  %13 = shl i64 %2, 2
  %14 = tail call i32 @memcmp(i8* %11, i8* %12, i64 %13) #15
  %15 = icmp slt i32 %14, 0
  br label %16

16:                                               ; preds = %9, %7
  %17 = phi i1 [ %8, %7 ], [ %15, %9 ]
  ret i1 %17
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN4llvm16FoldingSetNodeID10AddPointerEPKv(%"class.llvm::FoldingSetNodeID"*, i8*) local_unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = ptrtoint i8* %1 to i64
  %6 = trunc i64 %5 to i32
  %7 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #16
  store i32 %6, i32* %4, align 4
  %8 = bitcast %"class.llvm::FoldingSetNodeID"* %0 to %"class.llvm::SmallVectorTemplateBase"*
  call void @_ZN4llvm23SmallVectorTemplateBaseIjLb1EE9push_backERKj(%"class.llvm::SmallVectorTemplateBase"* %8, i32* nonnull dereferenceable(4) %4) #14
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #16
  %9 = lshr i64 %5, 32
  %10 = trunc i64 %9 to i32
  %11 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #16
  store i32 %10, i32* %3, align 4
  call void @_ZN4llvm23SmallVectorTemplateBaseIjLb1EE9push_backERKj(%"class.llvm::SmallVectorTemplateBase"* %8, i32* nonnull dereferenceable(4) %3) #14
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #16
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN4llvm16FoldingSetNodeID10AddIntegerEm(%"class.llvm::FoldingSetNodeID"*, i64) local_unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = trunc i64 %1 to i32
  %6 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #16
  store i32 %5, i32* %4, align 4
  %7 = bitcast %"class.llvm::FoldingSetNodeID"* %0 to %"class.llvm::SmallVectorTemplateBase"*
  call void @_ZN4llvm23SmallVectorTemplateBaseIjLb1EE9push_backERKj(%"class.llvm::SmallVectorTemplateBase"* %7, i32* nonnull dereferenceable(4) %4) #14
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #16
  %8 = lshr i64 %1, 32
  %9 = trunc i64 %8 to i32
  %10 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #16
  store i32 %9, i32* %3, align 4
  call void @_ZN4llvm23SmallVectorTemplateBaseIjLb1EE9push_backERKj(%"class.llvm::SmallVectorTemplateBase"* %7, i32* nonnull dereferenceable(4) %3) #14
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #16
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN4llvm16FoldingSetNodeID10AddIntegerEi(%"class.llvm::FoldingSetNodeID"*, i32) local_unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = bitcast %"class.llvm::FoldingSetNodeID"* %0 to %"class.llvm::SmallVectorTemplateBase"*
  %5 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #16
  store i32 %1, i32* %3, align 4
  call void @_ZN4llvm23SmallVectorTemplateBaseIjLb1EE9push_backERKj(%"class.llvm::SmallVectorTemplateBase"* %4, i32* nonnull dereferenceable(4) %3) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #16
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN4llvm23SmallVectorTemplateBaseIjLb1EE9push_backERKj(%"class.llvm::SmallVectorTemplateBase"*, i32* dereferenceable(4)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.llvm::SmallVectorTemplateBase", %"class.llvm::SmallVectorTemplateBase"* %0, i64 0, i32 0, i32 0, i32 1
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.llvm::SmallVectorTemplateBase", %"class.llvm::SmallVectorTemplateBase"* %0, i64 0, i32 0, i32 0, i32 2
  %6 = load i8*, i8** %5, align 8
  %7 = icmp ult i8* %4, %6
  br i1 %7, label %8, label %11, !prof !2

8:                                                ; preds = %2
  %9 = bitcast i8* %4 to i32*
  %10 = bitcast i8** %3 to i32**
  br label %16

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.llvm::SmallVectorTemplateBase", %"class.llvm::SmallVectorTemplateBase"* %0, i64 0, i32 0, i32 0
  %13 = getelementptr inbounds %"class.llvm::SmallVectorTemplateBase", %"class.llvm::SmallVectorTemplateBase"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i64 0
  tail call void @_ZN4llvm15SmallVectorBase8grow_podEPvmm(%"class.llvm::SmallVectorBase"* %12, i8* %13, i64 0, i64 4) #14
  %14 = bitcast i8** %3 to i32**
  %15 = load i32*, i32** %14, align 8
  br label %16

16:                                               ; preds = %8, %11
  %17 = phi i32** [ %10, %8 ], [ %14, %11 ]
  %18 = phi i32* [ %9, %8 ], [ %15, %11 ]
  %19 = load i32, i32* %1, align 4
  store i32 %19, i32* %18, align 1
  %20 = load i32*, i32** %17, align 8
  %21 = getelementptr inbounds i32, i32* %20, i64 1
  store i32* %21, i32** %17, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN4llvm16FoldingSetNodeID10AddIntegerEj(%"class.llvm::FoldingSetNodeID"*, i32) local_unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  store i32 %1, i32* %3, align 4
  %4 = bitcast %"class.llvm::FoldingSetNodeID"* %0 to %"class.llvm::SmallVectorTemplateBase"*
  call void @_ZN4llvm23SmallVectorTemplateBaseIjLb1EE9push_backERKj(%"class.llvm::SmallVectorTemplateBase"* %4, i32* nonnull dereferenceable(4) %3) #17
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN4llvm16FoldingSetNodeID10AddIntegerEl(%"class.llvm::FoldingSetNodeID"*, i64) local_unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = trunc i64 %1 to i32
  %6 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #16
  store i32 %5, i32* %4, align 4
  %7 = bitcast %"class.llvm::FoldingSetNodeID"* %0 to %"class.llvm::SmallVectorTemplateBase"*
  call void @_ZN4llvm23SmallVectorTemplateBaseIjLb1EE9push_backERKj(%"class.llvm::SmallVectorTemplateBase"* %7, i32* nonnull dereferenceable(4) %4) #14
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #16
  %8 = lshr i64 %1, 32
  %9 = trunc i64 %8 to i32
  %10 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #16
  store i32 %9, i32* %3, align 4
  call void @_ZN4llvm23SmallVectorTemplateBaseIjLb1EE9push_backERKj(%"class.llvm::SmallVectorTemplateBase"* %7, i32* nonnull dereferenceable(4) %3) #14
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #16
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN4llvm16FoldingSetNodeID10AddIntegerEy(%"class.llvm::FoldingSetNodeID"*, i64) local_unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = trunc i64 %1 to i32
  %6 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6)
  store i32 %5, i32* %4, align 4
  %7 = bitcast %"class.llvm::FoldingSetNodeID"* %0 to %"class.llvm::SmallVectorTemplateBase"*
  call void @_ZN4llvm23SmallVectorTemplateBaseIjLb1EE9push_backERKj(%"class.llvm::SmallVectorTemplateBase"* %7, i32* nonnull dereferenceable(4) %4) #14
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6)
  %8 = lshr i64 %1, 32
  %9 = trunc i64 %8 to i32
  %10 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10)
  store i32 %9, i32* %3, align 4
  call void @_ZN4llvm23SmallVectorTemplateBaseIjLb1EE9push_backERKj(%"class.llvm::SmallVectorTemplateBase"* %7, i32* nonnull dereferenceable(4) %3) #14
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10)
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN4llvm16FoldingSetNodeID10AddIntegerEx(%"class.llvm::FoldingSetNodeID"*, i64) local_unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = trunc i64 %1 to i32
  %6 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #16
  store i32 %5, i32* %4, align 4
  %7 = bitcast %"class.llvm::FoldingSetNodeID"* %0 to %"class.llvm::SmallVectorTemplateBase"*
  call void @_ZN4llvm23SmallVectorTemplateBaseIjLb1EE9push_backERKj(%"class.llvm::SmallVectorTemplateBase"* %7, i32* nonnull dereferenceable(4) %4) #14
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #16
  %8 = lshr i64 %1, 32
  %9 = trunc i64 %8 to i32
  %10 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #16
  store i32 %9, i32* %3, align 4
  call void @_ZN4llvm23SmallVectorTemplateBaseIjLb1EE9push_backERKj(%"class.llvm::SmallVectorTemplateBase"* %7, i32* nonnull dereferenceable(4) %3) #14
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #16
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN4llvm16FoldingSetNodeID9AddStringENS_9StringRefE(%"class.llvm::FoldingSetNodeID"*, i8*, i64) local_unnamed_addr #0 align 2 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #16
  %8 = trunc i64 %2 to i32
  store i32 %8, i32* %4, align 4
  %9 = bitcast %"class.llvm::FoldingSetNodeID"* %0 to %"class.llvm::SmallVectorTemplateBase"*
  call void @_ZN4llvm23SmallVectorTemplateBaseIjLb1EE9push_backERKj(%"class.llvm::SmallVectorTemplateBase"* %9, i32* nonnull dereferenceable(4) %4) #17
  %10 = load i32, i32* %4, align 4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %90, label %12

12:                                               ; preds = %3
  %13 = bitcast i8* %1 to i32*
  %14 = ptrtoint i8* %1 to i64
  %15 = and i64 %14, 3
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %21, label %17

17:                                               ; preds = %12
  %18 = icmp ult i32 %10, 4
  br i1 %18, label %60, label %19

19:                                               ; preds = %17
  %20 = bitcast i32* %5 to i8*
  br label %29

21:                                               ; preds = %12
  %22 = lshr i32 %10, 2
  %23 = bitcast %"class.llvm::FoldingSetNodeID"* %0 to %"class.llvm::SmallVectorImpl"*
  %24 = zext i32 %22 to i64
  %25 = getelementptr inbounds i32, i32* %13, i64 %24
  call void @_ZN4llvm15SmallVectorImplIjE6appendIPKjEEvT_S5_(%"class.llvm::SmallVectorImpl"* %23, i32* %13, i32* %25) #17
  %26 = add i32 %10, 4
  %27 = and i32 %26, -4
  %28 = load i32, i32* %4, align 4
  br label %60

29:                                               ; preds = %19, %29
  %30 = phi i32 [ 4, %19 ], [ %57, %29 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %20) #16
  %31 = add i32 %30, -1
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds i8, i8* %1, i64 %32
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = shl nuw i32 %35, 24
  %37 = add i32 %30, -2
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds i8, i8* %1, i64 %38
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i32
  %42 = shl nuw nsw i32 %41, 16
  %43 = or i32 %42, %36
  %44 = add i32 %30, -3
  %45 = zext i32 %44 to i64
  %46 = getelementptr inbounds i8, i8* %1, i64 %45
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = shl nuw nsw i32 %48, 8
  %50 = or i32 %43, %49
  %51 = add i32 %30, -4
  %52 = zext i32 %51 to i64
  %53 = getelementptr inbounds i8, i8* %1, i64 %52
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i32
  %56 = or i32 %50, %55
  store i32 %56, i32* %5, align 4
  call void @_ZN4llvm23SmallVectorTemplateBaseIjLb1EE9push_backERKj(%"class.llvm::SmallVectorTemplateBase"* %9, i32* nonnull dereferenceable(4) %5) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %20) #16
  %57 = add i32 %30, 4
  %58 = load i32, i32* %4, align 4
  %59 = icmp ugt i32 %57, %58
  br i1 %59, label %60, label %29

60:                                               ; preds = %29, %17, %21
  %61 = phi i32 [ %28, %21 ], [ %10, %17 ], [ %58, %29 ]
  %62 = phi i32 [ %27, %21 ], [ 4, %17 ], [ %57, %29 ]
  %63 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %63) #16
  store i32 0, i32* %6, align 4
  %64 = sub i32 %62, %61
  switch i32 %64, label %89 [
    i32 1, label %65
    i32 2, label %72
    i32 3, label %81
  ]

65:                                               ; preds = %60
  %66 = add i32 %61, -3
  %67 = zext i32 %66 to i64
  %68 = getelementptr inbounds i8, i8* %1, i64 %67
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  store i32 %70, i32* %6, align 4
  %71 = shl nuw nsw i32 %70, 8
  br label %72

72:                                               ; preds = %60, %65
  %73 = phi i32 [ 0, %60 ], [ %71, %65 ]
  %74 = add i32 %61, -2
  %75 = zext i32 %74 to i64
  %76 = getelementptr inbounds i8, i8* %1, i64 %75
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i32
  %79 = or i32 %73, %78
  store i32 %79, i32* %6, align 4
  %80 = shl nuw nsw i32 %79, 8
  br label %81

81:                                               ; preds = %60, %72
  %82 = phi i32 [ 0, %60 ], [ %80, %72 ]
  %83 = add i32 %61, -1
  %84 = zext i32 %83 to i64
  %85 = getelementptr inbounds i8, i8* %1, i64 %84
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i32
  %88 = or i32 %82, %87
  store i32 %88, i32* %6, align 4
  call void @_ZN4llvm23SmallVectorTemplateBaseIjLb1EE9push_backERKj(%"class.llvm::SmallVectorTemplateBase"* %9, i32* nonnull dereferenceable(4) %6) #17
  br label %89

89:                                               ; preds = %60, %81
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %63) #16
  br label %90

90:                                               ; preds = %3, %89
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #16
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN4llvm15SmallVectorImplIjE6appendIPKjEEvT_S5_(%"class.llvm::SmallVectorImpl"*, i32*, i32*) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint i32* %2 to i64
  %5 = ptrtoint i32* %1 to i64
  %6 = sub i64 %4, %5
  %7 = ashr exact i64 %6, 2
  %8 = getelementptr inbounds %"class.llvm::SmallVectorImpl", %"class.llvm::SmallVectorImpl"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %9 = bitcast i8** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %"class.llvm::SmallVectorImpl", %"class.llvm::SmallVectorImpl"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %12 = bitcast i8** %11 to i32**
  %13 = bitcast i8** %11 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = sub i64 %10, %14
  %16 = ashr exact i64 %15, 2
  %17 = icmp ugt i64 %7, %16
  br i1 %17, label %18, label %26

18:                                               ; preds = %3
  %19 = bitcast %"class.llvm::SmallVectorImpl"* %0 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = add i64 %14, %6
  %22 = sub i64 %21, %20
  %23 = and i64 %22, -4
  %24 = getelementptr inbounds %"class.llvm::SmallVectorImpl", %"class.llvm::SmallVectorImpl"* %0, i64 0, i32 0, i32 0, i32 0
  %25 = getelementptr inbounds %"class.llvm::SmallVectorImpl", %"class.llvm::SmallVectorImpl"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i64 0
  tail call void @_ZN4llvm15SmallVectorBase8grow_podEPvmm(%"class.llvm::SmallVectorBase"* %24, i8* %25, i64 %23, i64 4) #14
  br label %26

26:                                               ; preds = %18, %3
  %27 = icmp eq i32* %1, %2
  br i1 %27, label %31, label %28

28:                                               ; preds = %26
  %29 = load i8*, i8** %11, align 8
  %30 = bitcast i32* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %29, i8* align 4 %30, i64 %6, i1 false) #16
  br label %31

31:                                               ; preds = %26, %28
  %32 = load i32*, i32** %12, align 8
  %33 = getelementptr inbounds i32, i32* %32, i64 %7
  store i32* %33, i32** %12, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN4llvm16FoldingSetNodeID9AddNodeIDERKS0_(%"class.llvm::FoldingSetNodeID"*, %"class.llvm::FoldingSetNodeID"* nocapture readonly dereferenceable(152)) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.llvm::FoldingSetNodeID"* %0 to %"class.llvm::SmallVectorImpl"*
  %4 = bitcast %"class.llvm::FoldingSetNodeID"* %1 to i32**
  %5 = load i32*, i32** %4, align 8
  %6 = getelementptr inbounds %"class.llvm::FoldingSetNodeID", %"class.llvm::FoldingSetNodeID"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %7 = bitcast i8** %6 to i32**
  %8 = load i32*, i32** %7, align 8
  tail call void @_ZN4llvm15SmallVectorImplIjE6appendIPKjEEvT_S5_(%"class.llvm::SmallVectorImpl"* %3, i32* %5, i32* %8) #17
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden i32 @_ZNK4llvm16FoldingSetNodeID11ComputeHashEv(%"class.llvm::FoldingSetNodeID"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = bitcast %"class.llvm::FoldingSetNodeID"* %0 to i32**
  %3 = load i32*, i32** %2, align 8
  %4 = getelementptr inbounds %"class.llvm::FoldingSetNodeID", %"class.llvm::FoldingSetNodeID"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %5 = bitcast i8** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = ptrtoint i32* %3 to i64
  %8 = sub i64 %6, %7
  %9 = ashr exact i64 %8, 2
  %10 = getelementptr inbounds i32, i32* %3, i64 %9
  %11 = tail call i64 @_ZN4llvm7hashing6detail23hash_combine_range_implIKjEENSt3__19enable_ifIXsr16is_hashable_dataIT_EE5valueENS_9hash_codeEE4typeEPS6_SA_(i32* %3, i32* %10) #14
  %12 = trunc i64 %11 to i32
  ret i32 %12
}

; Function Attrs: nounwind optsize readonly ssp uwtable
define hidden zeroext i1 @_ZNK4llvm16FoldingSetNodeIDeqERKS0_(%"class.llvm::FoldingSetNodeID"* nocapture readonly, %"class.llvm::FoldingSetNodeID"* nocapture readonly dereferenceable(152)) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.llvm::FoldingSetNodeID", %"class.llvm::FoldingSetNodeID"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.llvm::FoldingSetNodeID"* %1 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = getelementptr inbounds %"class.llvm::FoldingSetNodeID", %"class.llvm::FoldingSetNodeID"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %10 = bitcast i8** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.llvm::FoldingSetNodeID"* %0 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 %11, %13
  %15 = icmp eq i64 %14, %8
  br i1 %15, label %16, label %21

16:                                               ; preds = %2
  %17 = inttoptr i64 %7 to i8*
  %18 = inttoptr i64 %13 to i8*
  %19 = tail call i32 @bcmp(i8* %18, i8* %17, i64 %8) #16
  %20 = icmp eq i32 %19, 0
  br label %21

21:                                               ; preds = %2, %16
  %22 = phi i1 [ %20, %16 ], [ false, %2 ]
  ret i1 %22
}

; Function Attrs: nounwind optsize readonly ssp uwtable
define hidden zeroext i1 @_ZNK4llvm16FoldingSetNodeIDeqENS_19FoldingSetNodeIDRefE(%"class.llvm::FoldingSetNodeID"* nocapture readonly, i32* nocapture readonly, i64) local_unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"class.llvm::FoldingSetNodeID", %"class.llvm::FoldingSetNodeID"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %5 = bitcast i8** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.llvm::FoldingSetNodeID"* %0 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp eq i64 %10, %2
  br i1 %11, label %12, label %18

12:                                               ; preds = %3
  %13 = inttoptr i64 %8 to i8*
  %14 = bitcast i32* %1 to i8*
  %15 = shl i64 %2, 2
  %16 = tail call i32 @bcmp(i8* %13, i8* %14, i64 %15) #16
  %17 = icmp eq i32 %16, 0
  br label %18

18:                                               ; preds = %3, %12
  %19 = phi i1 [ %17, %12 ], [ false, %3 ]
  ret i1 %19
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind optsize readonly ssp uwtable
define hidden zeroext i1 @_ZNK4llvm16FoldingSetNodeIDltERKS0_(%"class.llvm::FoldingSetNodeID"* nocapture readonly, %"class.llvm::FoldingSetNodeID"* nocapture readonly dereferenceable(152)) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.llvm::FoldingSetNodeID", %"class.llvm::FoldingSetNodeID"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.llvm::FoldingSetNodeID"* %1 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 2
  %10 = getelementptr inbounds %"class.llvm::FoldingSetNodeID", %"class.llvm::FoldingSetNodeID"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %11 = bitcast i8** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %"class.llvm::FoldingSetNodeID"* %0 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = sub i64 %12, %14
  %16 = ashr exact i64 %15, 2
  %17 = icmp eq i64 %16, %9
  br i1 %17, label %20, label %18

18:                                               ; preds = %2
  %19 = icmp ult i64 %16, %9
  br label %25

20:                                               ; preds = %2
  %21 = inttoptr i64 %7 to i8*
  %22 = inttoptr i64 %14 to i8*
  %23 = tail call i32 @memcmp(i8* %22, i8* %21, i64 %8) #15
  %24 = icmp slt i32 %23, 0
  br label %25

25:                                               ; preds = %18, %20
  %26 = phi i1 [ %19, %18 ], [ %24, %20 ]
  ret i1 %26
}

; Function Attrs: nounwind optsize readonly ssp uwtable
define hidden zeroext i1 @_ZNK4llvm16FoldingSetNodeIDltENS_19FoldingSetNodeIDRefE(%"class.llvm::FoldingSetNodeID"* nocapture readonly, i32* nocapture readonly, i64) local_unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"class.llvm::FoldingSetNodeID", %"class.llvm::FoldingSetNodeID"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %5 = bitcast i8** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.llvm::FoldingSetNodeID"* %0 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp eq i64 %10, %2
  br i1 %11, label %14, label %12

12:                                               ; preds = %3
  %13 = icmp ult i64 %10, %2
  br label %20

14:                                               ; preds = %3
  %15 = inttoptr i64 %8 to i8*
  %16 = bitcast i32* %1 to i8*
  %17 = shl i64 %2, 2
  %18 = tail call i32 @memcmp(i8* %15, i8* %16, i64 %17) #15
  %19 = icmp slt i32 %18, 0
  br label %20

20:                                               ; preds = %12, %14
  %21 = phi i1 [ %13, %12 ], [ %19, %14 ]
  ret i1 %21
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden { i32*, i64 } @_ZNK4llvm16FoldingSetNodeID6InternERNS_20BumpPtrAllocatorImplINS_15MallocAllocatorELm4096ELm4096EEE(%"class.llvm::FoldingSetNodeID"* nocapture readonly, %"class.llvm::BumpPtrAllocatorImpl"* dereferenceable(136)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.llvm::FoldingSetNodeID", %"class.llvm::FoldingSetNodeID"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.llvm::FoldingSetNodeID"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = tail call noalias i8* @_ZN4llvm20BumpPtrAllocatorImplINS_15MallocAllocatorELm4096ELm4096EE8AllocateEmm(%"class.llvm::BumpPtrAllocatorImpl"* %1, i64 %8, i64 4) #14
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast %"class.llvm::FoldingSetNodeID"* %0 to i32**
  %12 = load i32*, i32** %11, align 8
  %13 = bitcast i8** %3 to i32**
  %14 = load i32*, i32** %13, align 8
  %15 = icmp eq i32* %12, %14
  %16 = ptrtoint i32* %14 to i64
  %17 = ptrtoint i32* %12 to i64
  br i1 %15, label %28, label %18

18:                                               ; preds = %2, %18
  %19 = phi i32* [ %23, %18 ], [ %10, %2 ]
  %20 = phi i32* [ %22, %18 ], [ %12, %2 ]
  %21 = load i32, i32* %20, align 4
  store i32 %21, i32* %19, align 4
  %22 = getelementptr inbounds i32, i32* %20, i64 1
  %23 = getelementptr inbounds i32, i32* %19, i64 1
  %24 = icmp eq i32* %22, %14
  br i1 %24, label %25, label %18

25:                                               ; preds = %18
  %26 = load i64, i64* %4, align 8
  %27 = load i64, i64* %6, align 8
  br label %28

28:                                               ; preds = %25, %2
  %29 = phi i64 [ %27, %25 ], [ %17, %2 ]
  %30 = phi i64 [ %26, %25 ], [ %16, %2 ]
  %31 = sub i64 %30, %29
  %32 = ashr exact i64 %31, 2
  %33 = insertvalue { i32*, i64 } undef, i32* %10, 0
  %34 = insertvalue { i32*, i64 } %33, i64 %32, 1
  ret { i32*, i64 } %34
}

; Function Attrs: norecurse nounwind optsize readnone ssp uwtable
define hidden void @_ZN4llvm14FoldingSetImpl6anchorEv(%"class.llvm::FoldingSetImpl"* nocapture) unnamed_addr #4 align 2 {
  ret void
}

; Function Attrs: nofree nounwind optsize ssp uwtable
define hidden void @_ZN4llvm14FoldingSetImplC2Ej(%"class.llvm::FoldingSetImpl"* nocapture, i32) unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %"class.llvm::FoldingSetImpl", %"class.llvm::FoldingSetImpl"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN4llvm14FoldingSetImplE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = shl i32 1, %1
  %5 = getelementptr inbounds %"class.llvm::FoldingSetImpl", %"class.llvm::FoldingSetImpl"* %0, i64 0, i32 2
  store i32 %4, i32* %5, align 8
  %6 = add i32 %4, 1
  %7 = zext i32 %6 to i64
  %8 = tail call noalias i8* @calloc(i64 %7, i64 8) #14
  %9 = bitcast i8* %8 to i8**
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds i8*, i8** %9, i64 %10
  store i8* inttoptr (i64 -1 to i8*), i8** %11, align 8
  %12 = getelementptr inbounds %"class.llvm::FoldingSetImpl", %"class.llvm::FoldingSetImpl"* %0, i64 0, i32 1
  %13 = bitcast i8*** %12 to i8**
  store i8* %8, i8** %13, align 8
  %14 = getelementptr inbounds %"class.llvm::FoldingSetImpl", %"class.llvm::FoldingSetImpl"* %0, i64 0, i32 3
  store i32 0, i32* %14, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable
define hidden void @_ZN4llvm14FoldingSetImplC2EOS0_(%"class.llvm::FoldingSetImpl"* nocapture, %"class.llvm::FoldingSetImpl"* nocapture dereferenceable(24)) unnamed_addr #6 align 2 {
  %3 = getelementptr inbounds %"class.llvm::FoldingSetImpl", %"class.llvm::FoldingSetImpl"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN4llvm14FoldingSetImplE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.llvm::FoldingSetImpl", %"class.llvm::FoldingSetImpl"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %"class.llvm::FoldingSetImpl", %"class.llvm::FoldingSetImpl"* %1, i64 0, i32 1
  %6 = bitcast i8*** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast i8*** %4 to i64*
  store i64 %7, i64* %8, align 8
  %9 = getelementptr inbounds %"class.llvm::FoldingSetImpl", %"class.llvm::FoldingSetImpl"* %0, i64 0, i32 2
  %10 = getelementptr inbounds %"class.llvm::FoldingSetImpl", %"class.llvm::FoldingSetImpl"* %1, i64 0, i32 2
  %11 = load i32, i32* %10, align 8
  store i32 %11, i32* %9, align 8
  %12 = getelementptr inbounds %"class.llvm::FoldingSetImpl", %"class.llvm::FoldingSetImpl"* %0, i64 0, i32 3
  %13 = getelementptr inbounds %"class.llvm::FoldingSetImpl", %"class.llvm::FoldingSetImpl"* %1, i64 0, i32 3
  %14 = load i32, i32* %13, align 4
  store i32 %14, i32* %12, align 4
  %15 = bitcast i8*** %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden dereferenceable(24) %"class.llvm::FoldingSetImpl"* @_ZN4llvm14FoldingSetImplaSEOS0_(%"class.llvm::FoldingSetImpl"* returned, %"class.llvm::FoldingSetImpl"* nocapture dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.llvm::FoldingSetImpl", %"class.llvm::FoldingSetImpl"* %0, i64 0, i32 1
  %4 = bitcast i8*** %3 to i8**
  %5 = load i8*, i8** %4, align 8
  tail call void @free(i8* %5) #14
  %6 = getelementptr inbounds %"class.llvm::FoldingSetImpl", %"class.llvm::FoldingSetImpl"* %1, i64 0, i32 1
  %7 = bitcast i8*** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast i8*** %3 to i64*
  store i64 %8, i64* %9, align 8
  %10 = getelementptr inbounds %"class.llvm::FoldingSetImpl", %"class.llvm::FoldingSetImpl"* %1, i64 0, i32 2
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds %"class.llvm::FoldingSetImpl", %"class.llvm::FoldingSetImpl"* %0, i64 0, i32 2
  store i32 %11, i32* %12, align 8
  %13 = getelementptr inbounds %"class.llvm::FoldingSetImpl", %"class.llvm::FoldingSetImpl"* %1, i64 0, i32 3
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.llvm::FoldingSetImpl", %"class.llvm::FoldingSetImpl"* %0, i64 0, i32 3
  store i32 %14, i32* %15, align 4
  %16 = bitcast i8*** %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 16, i1 false)
  ret %"class.llvm::FoldingSetImpl"* %0
}

; Function Attrs: nounwind optsize
declare void @free(i8* nocapture) local_unnamed_addr #7

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN4llvm14FoldingSetImplD2Ev(%"class.llvm::FoldingSetImpl"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.llvm::FoldingSetImpl", %"class.llvm::FoldingSetImpl"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN4llvm14FoldingSetImplE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.llvm::FoldingSetImpl", %"class.llvm::FoldingSetImpl"* %0, i64 0, i32 1
  %4 = bitcast i8*** %3 to i8**
  %5 = load i8*, i8** %4, align 8
  tail call void @free(i8* %5) #14
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN4llvm14FoldingSetImpl5clearEv(%"class.llvm::FoldingSetImpl"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.llvm::FoldingSetImpl", %"class.llvm::FoldingSetImpl"* %0, i64 0, i32 1
  %3 = bitcast i8*** %2 to i8**
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.llvm::FoldingSetImpl", %"class.llvm::FoldingSetImpl"* %0, i64 0, i32 2
  %6 = load i32, i32* %5, align 8
  %7 = zext i32 %6 to i64
  %8 = shl nuw nsw i64 %7, 3
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 %8, i1 false)
  %9 = load i8**, i8*** %2, align 8
  %10 = load i32, i32* %5, align 8
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds i8*, i8** %9, i64 %11
  store i8* inttoptr (i64 -1 to i8*), i8** %12, align 8
  %13 = getelementptr inbounds %"class.llvm::FoldingSetImpl", %"class.llvm::FoldingSetImpl"* %0, i64 0, i32 3
  store i32 0, i32* %13, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN4llvm14FoldingSetImpl15GrowBucketCountEj(%"class.llvm::FoldingSetImpl"*, i32) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.llvm::FoldingSetNodeID", align 8
  %4 = getelementptr inbounds %"class.llvm::FoldingSetImpl", %"class.llvm::FoldingSetImpl"* %0, i64 0, i32 1
  %5 = load i8**, i8*** %4, align 8
  %6 = getelementptr inbounds %"class.llvm::FoldingSetImpl", %"class.llvm::FoldingSetImpl"* %0, i64 0, i32 2
  %7 = load i32, i32* %6, align 8
  store i32 %1, i32* %6, align 8
  %8 = add i32 %1, 1
  %9 = zext i32 %8 to i64
  %10 = tail call noalias i8* @calloc(i64 %9, i64 8) #14
  %11 = bitcast i8* %10 to i8**
  %12 = zext i32 %1 to i64
  %13 = getelementptr inbounds i8*, i8** %11, i64 %12
  store i8* inttoptr (i64 -1 to i8*), i8** %13, align 8
  %14 = bitcast i8*** %4 to i8**
  store i8* %10, i8** %14, align 8
  %15 = getelementptr inbounds %"class.llvm::FoldingSetImpl", %"class.llvm::FoldingSetImpl"* %0, i64 0, i32 3
  store i32 0, i32* %15, align 4
  %16 = bitcast %"class.llvm::FoldingSetNodeID"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %16) #16
  %17 = getelementptr inbounds %"class.llvm::FoldingSetNodeID", %"class.llvm::FoldingSetNodeID"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 -86, i64 128, i1 false)
  %18 = getelementptr inbounds %"class.llvm::FoldingSetNodeID", %"class.llvm::FoldingSetNodeID"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i64 0
  %19 = getelementptr inbounds %"class.llvm::FoldingSetNodeID", %"class.llvm::FoldingSetNodeID"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %18, i8** %19, align 8
  %20 = getelementptr inbounds %"class.llvm::FoldingSetNodeID", %"class.llvm::FoldingSetNodeID"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i8* %18, i8** %20, align 8
  %21 = getelementptr inbounds %"class.llvm::FoldingSetNodeID", %"class.llvm::FoldingSetNodeID"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %22 = getelementptr inbounds %"class.llvm::FoldingSetNodeID", %"class.llvm::FoldingSetNodeID"* %3, i64 1, i32 0
  %23 = bitcast i8** %21 to %"class.llvm::SmallVector"**
  store %"class.llvm::SmallVector"* %22, %"class.llvm::SmallVector"** %23, align 8
  %24 = icmp eq i32 %7, 0
  br i1 %24, label %30, label %25

25:                                               ; preds = %2
  %26 = bitcast %"class.llvm::FoldingSetImpl"* %0 to i32 (%"class.llvm::FoldingSetImpl"*, %"class.llvm::FoldingSetImpl::Node"*, %"class.llvm::FoldingSetNodeID"*)***
  %27 = bitcast %"class.llvm::FoldingSetNodeID"* %3 to i64*
  %28 = bitcast i8** %20 to i64*
  %29 = zext i32 %7 to i64
  br label %36

30:                                               ; preds = %67, %2
  %31 = bitcast i8** %5 to i8*
  call void @free(i8* %31) #14
  %32 = load i8*, i8** %19, align 8
  %33 = icmp eq i8* %32, %18
  br i1 %33, label %35, label %34

34:                                               ; preds = %30
  call void @free(i8* %32) #14
  br label %35

35:                                               ; preds = %30, %34
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %16) #16
  ret void

36:                                               ; preds = %25, %67
  %37 = phi i64 [ 0, %25 ], [ %68, %67 ]
  %38 = getelementptr inbounds i8*, i8** %5, i64 %37
  %39 = load i8*, i8** %38, align 8
  %40 = icmp eq i8* %39, null
  br i1 %40, label %67, label %41

41:                                               ; preds = %36
  %42 = ptrtoint i8* %39 to i64
  %43 = and i64 %42, 1
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %45, label %67

45:                                               ; preds = %41, %45
  %46 = phi i8* [ %49, %45 ], [ %39, %41 ]
  %47 = bitcast i8* %46 to %"class.llvm::FoldingSetImpl::Node"*
  %48 = bitcast i8* %46 to i8**
  %49 = load i8*, i8** %48, align 8
  store i8* null, i8** %48, align 8
  %50 = load i32 (%"class.llvm::FoldingSetImpl"*, %"class.llvm::FoldingSetImpl::Node"*, %"class.llvm::FoldingSetNodeID"*)**, i32 (%"class.llvm::FoldingSetImpl"*, %"class.llvm::FoldingSetImpl::Node"*, %"class.llvm::FoldingSetNodeID"*)*** %26, align 8
  %51 = getelementptr inbounds i32 (%"class.llvm::FoldingSetImpl"*, %"class.llvm::FoldingSetImpl::Node"*, %"class.llvm::FoldingSetNodeID"*)*, i32 (%"class.llvm::FoldingSetImpl"*, %"class.llvm::FoldingSetImpl::Node"*, %"class.llvm::FoldingSetNodeID"*)** %50, i64 3
  %52 = load i32 (%"class.llvm::FoldingSetImpl"*, %"class.llvm::FoldingSetImpl::Node"*, %"class.llvm::FoldingSetNodeID"*)*, i32 (%"class.llvm::FoldingSetImpl"*, %"class.llvm::FoldingSetImpl::Node"*, %"class.llvm::FoldingSetNodeID"*)** %51, align 8
  %53 = call i32 %52(%"class.llvm::FoldingSetImpl"* %0, %"class.llvm::FoldingSetImpl::Node"* nonnull %47, %"class.llvm::FoldingSetNodeID"* nonnull dereferenceable(152) %3) #14
  %54 = load i8**, i8*** %4, align 8
  %55 = load i32, i32* %6, align 8
  %56 = add i32 %55, -1
  %57 = and i32 %56, %53
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds i8*, i8** %54, i64 %58
  %60 = bitcast i8** %59 to i8*
  call void @_ZN4llvm14FoldingSetImpl10InsertNodeEPNS0_4NodeEPv(%"class.llvm::FoldingSetImpl"* %0, %"class.llvm::FoldingSetImpl::Node"* nonnull %47, i8* %60) #17
  %61 = load i64, i64* %27, align 8
  store i64 %61, i64* %28, align 8
  %62 = ptrtoint i8* %49 to i64
  %63 = and i64 %62, 1
  %64 = icmp ne i64 %63, 0
  %65 = icmp eq i8* %49, null
  %66 = or i1 %65, %64
  br i1 %66, label %67, label %45

67:                                               ; preds = %45, %41, %36
  %68 = add nuw nsw i64 %37, 1
  %69 = icmp eq i64 %68, %29
  br i1 %69, label %30, label %36
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN4llvm14FoldingSetImpl10InsertNodeEPNS0_4NodeEPv(%"class.llvm::FoldingSetImpl"*, %"class.llvm::FoldingSetImpl::Node"*, i8*) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.llvm::FoldingSetNodeID", align 8
  %5 = getelementptr inbounds %"class.llvm::FoldingSetImpl", %"class.llvm::FoldingSetImpl"* %0, i64 0, i32 3
  %6 = load i32, i32* %5, align 4
  %7 = add i32 %6, 1
  %8 = getelementptr inbounds %"class.llvm::FoldingSetImpl", %"class.llvm::FoldingSetImpl"* %0, i64 0, i32 2
  %9 = load i32, i32* %8, align 8
  %10 = shl i32 %9, 1
  %11 = icmp ugt i32 %7, %10
  br i1 %11, label %12, label %40

12:                                               ; preds = %3
  tail call void @_ZN4llvm14FoldingSetImpl15GrowBucketCountEj(%"class.llvm::FoldingSetImpl"* %0, i32 %10) #14
  %13 = bitcast %"class.llvm::FoldingSetNodeID"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %13) #16
  %14 = getelementptr inbounds %"class.llvm::FoldingSetNodeID", %"class.llvm::FoldingSetNodeID"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 -86, i64 128, i1 false)
  %15 = getelementptr inbounds %"class.llvm::FoldingSetNodeID", %"class.llvm::FoldingSetNodeID"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i64 0
  %16 = getelementptr inbounds %"class.llvm::FoldingSetNodeID", %"class.llvm::FoldingSetNodeID"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %15, i8** %16, align 8
  %17 = getelementptr inbounds %"class.llvm::FoldingSetNodeID", %"class.llvm::FoldingSetNodeID"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i8* %15, i8** %17, align 8
  %18 = getelementptr inbounds %"class.llvm::FoldingSetNodeID", %"class.llvm::FoldingSetNodeID"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %19 = getelementptr inbounds %"class.llvm::FoldingSetNodeID", %"class.llvm::FoldingSetNodeID"* %4, i64 1, i32 0
  %20 = bitcast i8** %18 to %"class.llvm::SmallVector"**
  store %"class.llvm::SmallVector"* %19, %"class.llvm::SmallVector"** %20, align 8
  %21 = bitcast %"class.llvm::FoldingSetImpl"* %0 to i32 (%"class.llvm::FoldingSetImpl"*, %"class.llvm::FoldingSetImpl::Node"*, %"class.llvm::FoldingSetNodeID"*)***
  %22 = load i32 (%"class.llvm::FoldingSetImpl"*, %"class.llvm::FoldingSetImpl::Node"*, %"class.llvm::FoldingSetNodeID"*)**, i32 (%"class.llvm::FoldingSetImpl"*, %"class.llvm::FoldingSetImpl::Node"*, %"class.llvm::FoldingSetNodeID"*)*** %21, align 8
  %23 = getelementptr inbounds i32 (%"class.llvm::FoldingSetImpl"*, %"class.llvm::FoldingSetImpl::Node"*, %"class.llvm::FoldingSetNodeID"*)*, i32 (%"class.llvm::FoldingSetImpl"*, %"class.llvm::FoldingSetImpl::Node"*, %"class.llvm::FoldingSetNodeID"*)** %22, i64 3
  %24 = load i32 (%"class.llvm::FoldingSetImpl"*, %"class.llvm::FoldingSetImpl::Node"*, %"class.llvm::FoldingSetNodeID"*)*, i32 (%"class.llvm::FoldingSetImpl"*, %"class.llvm::FoldingSetImpl::Node"*, %"class.llvm::FoldingSetNodeID"*)** %23, align 8
  %25 = call i32 %24(%"class.llvm::FoldingSetImpl"* %0, %"class.llvm::FoldingSetImpl::Node"* %1, %"class.llvm::FoldingSetNodeID"* nonnull dereferenceable(152) %4) #14
  %26 = getelementptr inbounds %"class.llvm::FoldingSetImpl", %"class.llvm::FoldingSetImpl"* %0, i64 0, i32 1
  %27 = load i8**, i8*** %26, align 8
  %28 = load i32, i32* %8, align 8
  %29 = add i32 %28, -1
  %30 = and i32 %29, %25
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds i8*, i8** %27, i64 %31
  %33 = bitcast i8** %32 to i8*
  %34 = load i8*, i8** %16, align 8
  %35 = icmp eq i8* %34, %15
  br i1 %35, label %37, label %36

36:                                               ; preds = %12
  call void @free(i8* %34) #14
  br label %37

37:                                               ; preds = %12, %36
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %13) #16
  %38 = load i32, i32* %5, align 4
  %39 = add i32 %38, 1
  br label %40

40:                                               ; preds = %37, %3
  %41 = phi i32 [ %39, %37 ], [ %7, %3 ]
  %42 = phi i8* [ %33, %37 ], [ %2, %3 ]
  store i32 %41, i32* %5, align 4
  %43 = bitcast i8* %42 to i8**
  %44 = load i8*, i8** %43, align 8
  %45 = icmp eq i8* %44, null
  %46 = ptrtoint i8* %42 to i64
  %47 = or i64 %46, 1
  %48 = inttoptr i64 %47 to i8*
  %49 = select i1 %45, i8* %48, i8* %44
  %50 = getelementptr inbounds %"class.llvm::FoldingSetImpl::Node", %"class.llvm::FoldingSetImpl::Node"* %1, i64 0, i32 0
  store i8* %49, i8** %50, align 8
  %51 = bitcast i8* %42 to %"class.llvm::FoldingSetImpl::Node"**
  store %"class.llvm::FoldingSetImpl::Node"* %1, %"class.llvm::FoldingSetImpl::Node"** %51, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN4llvm14FoldingSetImpl13GrowHashTableEv(%"class.llvm::FoldingSetImpl"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.llvm::FoldingSetImpl", %"class.llvm::FoldingSetImpl"* %0, i64 0, i32 2
  %3 = load i32, i32* %2, align 8
  %4 = shl i32 %3, 1
  tail call void @_ZN4llvm14FoldingSetImpl15GrowBucketCountEj(%"class.llvm::FoldingSetImpl"* %0, i32 %4) #17
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN4llvm14FoldingSetImpl7reserveEj(%"class.llvm::FoldingSetImpl"*, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.llvm::FoldingSetImpl", %"class.llvm::FoldingSetImpl"* %0, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = shl i32 %4, 1
  %6 = icmp ugt i32 %5, %1
  br i1 %6, label %16, label %7

7:                                                ; preds = %2
  %8 = icmp eq i32 %1, 0
  br i1 %8, label %14, label %9

9:                                                ; preds = %7
  %10 = zext i32 %1 to i64
  %11 = tail call i64 @llvm.ctlz.i64(i64 %10, i1 true) #16, !range !3
  %12 = lshr i64 -9223372036854775808, %11
  %13 = trunc i64 %12 to i32
  br label %14

14:                                               ; preds = %7, %9
  %15 = phi i32 [ %13, %9 ], [ 0, %7 ]
  tail call void @_ZN4llvm14FoldingSetImpl15GrowBucketCountEj(%"class.llvm::FoldingSetImpl"* %0, i32 %15) #17
  br label %16

16:                                               ; preds = %2, %14
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden %"class.llvm::FoldingSetImpl::Node"* @_ZN4llvm14FoldingSetImpl19FindNodeOrInsertPosERKNS_16FoldingSetNodeIDERPv(%"class.llvm::FoldingSetImpl"*, %"class.llvm::FoldingSetNodeID"* dereferenceable(152), i8** nocapture dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.llvm::FoldingSetNodeID", align 8
  %5 = bitcast %"class.llvm::FoldingSetNodeID"* %1 to i32**
  %6 = load i32*, i32** %5, align 8
  %7 = getelementptr inbounds %"class.llvm::FoldingSetNodeID", %"class.llvm::FoldingSetNodeID"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %8 = bitcast i8** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = ptrtoint i32* %6 to i64
  %11 = sub i64 %9, %10
  %12 = ashr exact i64 %11, 2
  %13 = getelementptr inbounds i32, i32* %6, i64 %12
  %14 = tail call i64 @_ZN4llvm7hashing6detail23hash_combine_range_implIKjEENSt3__19enable_ifIXsr16is_hashable_dataIT_EE5valueENS_9hash_codeEE4typeEPS6_SA_(i32* %6, i32* %13) #14
  %15 = trunc i64 %14 to i32
  %16 = getelementptr inbounds %"class.llvm::FoldingSetImpl", %"class.llvm::FoldingSetImpl"* %0, i64 0, i32 1
  %17 = load i8**, i8*** %16, align 8
  %18 = getelementptr inbounds %"class.llvm::FoldingSetImpl", %"class.llvm::FoldingSetImpl"* %0, i64 0, i32 2
  %19 = load i32, i32* %18, align 8
  %20 = add i32 %19, -1
  %21 = and i32 %20, %15
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds i8*, i8** %17, i64 %22
  %24 = load i8*, i8** %23, align 8
  store i8* null, i8** %2, align 8
  %25 = bitcast %"class.llvm::FoldingSetNodeID"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %25) #16
  %26 = getelementptr inbounds %"class.llvm::FoldingSetNodeID", %"class.llvm::FoldingSetNodeID"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %26, i8 -86, i64 128, i1 false)
  %27 = getelementptr inbounds %"class.llvm::FoldingSetNodeID", %"class.llvm::FoldingSetNodeID"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i64 0
  %28 = getelementptr inbounds %"class.llvm::FoldingSetNodeID", %"class.llvm::FoldingSetNodeID"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %27, i8** %28, align 8
  %29 = getelementptr inbounds %"class.llvm::FoldingSetNodeID", %"class.llvm::FoldingSetNodeID"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i8* %27, i8** %29, align 8
  %30 = getelementptr inbounds %"class.llvm::FoldingSetNodeID", %"class.llvm::FoldingSetNodeID"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %31 = getelementptr inbounds %"class.llvm::FoldingSetNodeID", %"class.llvm::FoldingSetNodeID"* %4, i64 1, i32 0
  %32 = bitcast i8** %30 to %"class.llvm::SmallVector"**
  store %"class.llvm::SmallVector"* %31, %"class.llvm::SmallVector"** %32, align 8
  %33 = ptrtoint i8* %24 to i64
  %34 = and i64 %33, 1
  %35 = icmp ne i64 %34, 0
  %36 = icmp eq i8* %24, null
  %37 = or i1 %36, %35
  br i1 %37, label %60, label %38

38:                                               ; preds = %3
  %39 = bitcast %"class.llvm::FoldingSetImpl"* %0 to i1 (%"class.llvm::FoldingSetImpl"*, %"class.llvm::FoldingSetImpl::Node"*, %"class.llvm::FoldingSetNodeID"*, i32, %"class.llvm::FoldingSetNodeID"*)***
  %40 = bitcast %"class.llvm::FoldingSetNodeID"* %4 to i64*
  %41 = bitcast i8** %29 to i64*
  br label %42

42:                                               ; preds = %38, %49
  %43 = phi i8* [ %24, %38 ], [ %52, %49 ]
  %44 = bitcast i8* %43 to %"class.llvm::FoldingSetImpl::Node"*
  %45 = load i1 (%"class.llvm::FoldingSetImpl"*, %"class.llvm::FoldingSetImpl::Node"*, %"class.llvm::FoldingSetNodeID"*, i32, %"class.llvm::FoldingSetNodeID"*)**, i1 (%"class.llvm::FoldingSetImpl"*, %"class.llvm::FoldingSetImpl::Node"*, %"class.llvm::FoldingSetNodeID"*, i32, %"class.llvm::FoldingSetNodeID"*)*** %39, align 8
  %46 = getelementptr inbounds i1 (%"class.llvm::FoldingSetImpl"*, %"class.llvm::FoldingSetImpl::Node"*, %"class.llvm::FoldingSetNodeID"*, i32, %"class.llvm::FoldingSetNodeID"*)*, i1 (%"class.llvm::FoldingSetImpl"*, %"class.llvm::FoldingSetImpl::Node"*, %"class.llvm::FoldingSetNodeID"*, i32, %"class.llvm::FoldingSetNodeID"*)** %45, i64 2
  %47 = load i1 (%"class.llvm::FoldingSetImpl"*, %"class.llvm::FoldingSetImpl::Node"*, %"class.llvm::FoldingSetNodeID"*, i32, %"class.llvm::FoldingSetNodeID"*)*, i1 (%"class.llvm::FoldingSetImpl"*, %"class.llvm::FoldingSetImpl::Node"*, %"class.llvm::FoldingSetNodeID"*, i32, %"class.llvm::FoldingSetNodeID"*)** %46, align 8
  %48 = call zeroext i1 %47(%"class.llvm::FoldingSetImpl"* %0, %"class.llvm::FoldingSetImpl::Node"* nonnull %44, %"class.llvm::FoldingSetNodeID"* dereferenceable(152) %1, i32 %15, %"class.llvm::FoldingSetNodeID"* nonnull dereferenceable(152) %4) #14
  br i1 %48, label %63, label %49

49:                                               ; preds = %42
  %50 = load i64, i64* %40, align 8
  store i64 %50, i64* %41, align 8
  %51 = bitcast i8* %43 to i8**
  %52 = load i8*, i8** %51, align 8
  %53 = ptrtoint i8* %52 to i64
  %54 = and i64 %53, 1
  %55 = icmp ne i64 %54, 0
  %56 = icmp eq i8* %52, null
  %57 = or i1 %56, %55
  br i1 %57, label %58, label %42

58:                                               ; preds = %49
  %59 = inttoptr i64 %50 to i8*
  br label %60

60:                                               ; preds = %58, %3
  %61 = phi i8* [ %59, %58 ], [ %27, %3 ]
  %62 = bitcast i8** %2 to i8***
  store i8** %23, i8*** %62, align 8
  br label %66

63:                                               ; preds = %42
  %64 = bitcast i8* %43 to %"class.llvm::FoldingSetImpl::Node"*
  %65 = load i8*, i8** %28, align 8
  br label %66

66:                                               ; preds = %63, %60
  %67 = phi i8* [ %61, %60 ], [ %65, %63 ]
  %68 = phi %"class.llvm::FoldingSetImpl::Node"* [ null, %60 ], [ %64, %63 ]
  %69 = icmp eq i8* %67, %27
  br i1 %69, label %71, label %70

70:                                               ; preds = %66
  call void @free(i8* %67) #14
  br label %71

71:                                               ; preds = %66, %70
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %25) #16
  ret %"class.llvm::FoldingSetImpl::Node"* %68
}

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable
define hidden zeroext i1 @_ZN4llvm14FoldingSetImpl10RemoveNodeEPNS0_4NodeE(%"class.llvm::FoldingSetImpl"* nocapture, %"class.llvm::FoldingSetImpl::Node"*) local_unnamed_addr #6 align 2 {
  %3 = getelementptr inbounds %"class.llvm::FoldingSetImpl::Node", %"class.llvm::FoldingSetImpl::Node"* %1, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %35, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.llvm::FoldingSetImpl", %"class.llvm::FoldingSetImpl"* %0, i64 0, i32 3
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -1
  store i32 %9, i32* %7, align 4
  store i8* null, i8** %3, align 8
  %10 = bitcast %"class.llvm::FoldingSetImpl::Node"* %1 to i8*
  br label %11

11:                                               ; preds = %29, %6
  %12 = phi i8* [ %4, %6 ], [ %30, %29 ]
  %13 = ptrtoint i8* %12 to i64
  %14 = and i64 %13, 1
  %15 = icmp ne i64 %14, 0
  %16 = icmp eq i8* %12, null
  %17 = or i1 %16, %15
  br i1 %17, label %24, label %18

18:                                               ; preds = %11
  %19 = bitcast i8* %12 to i8**
  %20 = load i8*, i8** %19, align 8
  %21 = icmp eq i8* %20, %10
  br i1 %21, label %22, label %29

22:                                               ; preds = %18
  %23 = bitcast i8* %12 to i8**
  br label %33

24:                                               ; preds = %11
  %25 = and i64 %13, -2
  %26 = inttoptr i64 %25 to i8**
  %27 = load i8*, i8** %26, align 8
  %28 = icmp eq i8* %27, %10
  br i1 %28, label %31, label %29

29:                                               ; preds = %24, %18
  %30 = phi i8* [ %20, %18 ], [ %27, %24 ]
  br label %11

31:                                               ; preds = %24
  %32 = inttoptr i64 %25 to i8**
  br label %33

33:                                               ; preds = %22, %31
  %34 = phi i8** [ %32, %31 ], [ %23, %22 ]
  store i8* %4, i8** %34, align 8
  br label %35

35:                                               ; preds = %33, %2
  %36 = phi i1 [ false, %2 ], [ true, %33 ]
  ret i1 %36
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden %"class.llvm::FoldingSetImpl::Node"* @_ZN4llvm14FoldingSetImpl15GetOrInsertNodeEPNS0_4NodeE(%"class.llvm::FoldingSetImpl"*, %"class.llvm::FoldingSetImpl::Node"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.llvm::FoldingSetNodeID", align 8
  %4 = alloca i8*, align 8
  %5 = bitcast %"class.llvm::FoldingSetNodeID"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %5) #16
  %6 = getelementptr inbounds %"class.llvm::FoldingSetNodeID", %"class.llvm::FoldingSetNodeID"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 128, i1 false)
  %7 = getelementptr inbounds %"class.llvm::FoldingSetNodeID", %"class.llvm::FoldingSetNodeID"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i64 0
  %8 = getelementptr inbounds %"class.llvm::FoldingSetNodeID", %"class.llvm::FoldingSetNodeID"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %7, i8** %8, align 8
  %9 = getelementptr inbounds %"class.llvm::FoldingSetNodeID", %"class.llvm::FoldingSetNodeID"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i8* %7, i8** %9, align 8
  %10 = getelementptr inbounds %"class.llvm::FoldingSetNodeID", %"class.llvm::FoldingSetNodeID"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %11 = getelementptr inbounds %"class.llvm::FoldingSetNodeID", %"class.llvm::FoldingSetNodeID"* %3, i64 1, i32 0
  %12 = bitcast i8** %10 to %"class.llvm::SmallVector"**
  store %"class.llvm::SmallVector"* %11, %"class.llvm::SmallVector"** %12, align 8
  %13 = bitcast %"class.llvm::FoldingSetImpl"* %0 to void (%"class.llvm::FoldingSetImpl"*, %"class.llvm::FoldingSetImpl::Node"*, %"class.llvm::FoldingSetNodeID"*)***
  %14 = load void (%"class.llvm::FoldingSetImpl"*, %"class.llvm::FoldingSetImpl::Node"*, %"class.llvm::FoldingSetNodeID"*)**, void (%"class.llvm::FoldingSetImpl"*, %"class.llvm::FoldingSetImpl::Node"*, %"class.llvm::FoldingSetNodeID"*)*** %13, align 8
  %15 = getelementptr inbounds void (%"class.llvm::FoldingSetImpl"*, %"class.llvm::FoldingSetImpl::Node"*, %"class.llvm::FoldingSetNodeID"*)*, void (%"class.llvm::FoldingSetImpl"*, %"class.llvm::FoldingSetImpl::Node"*, %"class.llvm::FoldingSetNodeID"*)** %14, i64 1
  %16 = load void (%"class.llvm::FoldingSetImpl"*, %"class.llvm::FoldingSetImpl::Node"*, %"class.llvm::FoldingSetNodeID"*)*, void (%"class.llvm::FoldingSetImpl"*, %"class.llvm::FoldingSetImpl::Node"*, %"class.llvm::FoldingSetNodeID"*)** %15, align 8
  call void %16(%"class.llvm::FoldingSetImpl"* %0, %"class.llvm::FoldingSetImpl::Node"* %1, %"class.llvm::FoldingSetNodeID"* nonnull dereferenceable(152) %3) #14
  %17 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #16
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %4, align 8
  %18 = call %"class.llvm::FoldingSetImpl::Node"* @_ZN4llvm14FoldingSetImpl19FindNodeOrInsertPosERKNS_16FoldingSetNodeIDERPv(%"class.llvm::FoldingSetImpl"* %0, %"class.llvm::FoldingSetNodeID"* nonnull dereferenceable(152) %3, i8** nonnull dereferenceable(8) %4) #17
  %19 = icmp eq %"class.llvm::FoldingSetImpl::Node"* %18, null
  br i1 %19, label %20, label %22

20:                                               ; preds = %2
  %21 = load i8*, i8** %4, align 8
  call void @_ZN4llvm14FoldingSetImpl10InsertNodeEPNS0_4NodeEPv(%"class.llvm::FoldingSetImpl"* %0, %"class.llvm::FoldingSetImpl::Node"* %1, i8* %21) #17
  br label %22

22:                                               ; preds = %2, %20
  %23 = phi %"class.llvm::FoldingSetImpl::Node"* [ %1, %20 ], [ %18, %2 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #16
  %24 = load i8*, i8** %8, align 8
  %25 = icmp eq i8* %24, %7
  br i1 %25, label %27, label %26

26:                                               ; preds = %22
  call void @free(i8* %24) #14
  br label %27

27:                                               ; preds = %22, %26
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %5) #16
  ret %"class.llvm::FoldingSetImpl::Node"* %23
}

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable
define hidden void @_ZN4llvm22FoldingSetIteratorImplC2EPPv(%"class.llvm::FoldingSetIteratorImpl"* nocapture, i8** nocapture readonly) unnamed_addr #6 align 2 {
  br label %3

3:                                                ; preds = %12, %2
  %4 = phi i8** [ %1, %2 ], [ %13, %12 ]
  %5 = load i8*, i8** %4, align 8
  %6 = ptrtoint i8* %5 to i64
  switch i64 %6, label %7 [
    i64 -1, label %14
    i64 0, label %12
  ]

7:                                                ; preds = %3
  %8 = and i64 %6, 1
  %9 = icmp ne i64 %8, 0
  %10 = icmp eq i8* %5, null
  %11 = or i1 %10, %9
  br i1 %11, label %12, label %14

12:                                               ; preds = %3, %7
  %13 = getelementptr inbounds i8*, i8** %4, i64 1
  br label %3

14:                                               ; preds = %3, %7
  %15 = ptrtoint i8* %5 to i64
  %16 = bitcast %"class.llvm::FoldingSetIteratorImpl"* %0 to i64*
  store i64 %15, i64* %16, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable
define hidden void @_ZN4llvm22FoldingSetIteratorImpl7advanceEv(%"class.llvm::FoldingSetIteratorImpl"* nocapture) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.llvm::FoldingSetIteratorImpl", %"class.llvm::FoldingSetIteratorImpl"* %0, i64 0, i32 0
  %3 = load %"class.llvm::FoldingSetImpl::Node"*, %"class.llvm::FoldingSetImpl::Node"** %2, align 8
  %4 = getelementptr inbounds %"class.llvm::FoldingSetImpl::Node", %"class.llvm::FoldingSetImpl::Node"* %3, i64 0, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = ptrtoint i8* %5 to i64
  %7 = and i64 %6, 1
  %8 = icmp ne i64 %7, 0
  %9 = icmp eq i8* %5, null
  %10 = or i1 %9, %8
  br i1 %10, label %13, label %11

11:                                               ; preds = %1
  %12 = bitcast %"class.llvm::FoldingSetIteratorImpl"* %0 to i8**
  store i8* %5, i8** %12, align 8
  br label %30

13:                                               ; preds = %1
  %14 = and i64 %6, -2
  %15 = inttoptr i64 %14 to i8**
  br label %16

16:                                               ; preds = %26, %13
  %17 = phi i8** [ %15, %13 ], [ %18, %26 ]
  %18 = getelementptr inbounds i8*, i8** %17, i64 1
  %19 = load i8*, i8** %18, align 8
  %20 = ptrtoint i8* %19 to i64
  switch i64 %20, label %21 [
    i64 -1, label %27
    i64 0, label %26
  ]

21:                                               ; preds = %16
  %22 = and i64 %20, 1
  %23 = icmp ne i64 %22, 0
  %24 = icmp eq i8* %19, null
  %25 = or i1 %24, %23
  br i1 %25, label %26, label %27

26:                                               ; preds = %21, %16
  br label %16

27:                                               ; preds = %16, %21
  %28 = ptrtoint i8* %19 to i64
  %29 = bitcast %"class.llvm::FoldingSetIteratorImpl"* %0 to i64*
  store i64 %28, i64* %29, align 8
  br label %30

30:                                               ; preds = %27, %11
  ret void
}

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable
define hidden void @_ZN4llvm28FoldingSetBucketIteratorImplC2EPPv(%"class.llvm::FoldingSetBucketIteratorImpl"* nocapture, i8**) unnamed_addr #6 align 2 {
  %3 = load i8*, i8** %1, align 8
  %4 = icmp eq i8* %3, null
  br i1 %4, label %9, label %5

5:                                                ; preds = %2
  %6 = ptrtoint i8* %3 to i64
  %7 = and i64 %6, 1
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %5, %2
  %10 = bitcast i8** %1 to i8*
  br label %11

11:                                               ; preds = %5, %9
  %12 = phi i8* [ %10, %9 ], [ %3, %5 ]
  %13 = getelementptr inbounds %"class.llvm::FoldingSetBucketIteratorImpl", %"class.llvm::FoldingSetBucketIteratorImpl"* %0, i64 0, i32 0
  store i8* %12, i8** %13, align 8
  ret void
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nofree nounwind optsize
declare noalias i8* @calloc(i64, i64) local_unnamed_addr #8

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctlz.i64(i64, i1 immarg) #9

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden i64 @_ZN4llvm7hashing6detail23hash_combine_range_implIKjEENSt3__19enable_ifIXsr16is_hashable_dataIT_EE5valueENS_9hash_codeEE4typeEPS6_SA_(i32*, i32*) local_unnamed_addr #0 comdat {
  %3 = alloca %"struct.llvm::hashing::detail::hash_state", align 8
  %4 = load atomic i8, i8* bitcast (i64* @_ZGVZN4llvm7hashing6detail18get_execution_seedEvE4seed to i8*) acquire, align 8
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %13, !prof !4

6:                                                ; preds = %2
  %7 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN4llvm7hashing6detail18get_execution_seedEvE4seed) #16
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %13, label %9

9:                                                ; preds = %6
  %10 = load i64, i64* @_ZN4llvm7hashing6detail19fixed_seed_overrideE, align 8
  %11 = icmp eq i64 %10, 0
  %12 = select i1 %11, i64 -49064778989728563, i64 %10
  store i64 %12, i64* @_ZZN4llvm7hashing6detail18get_execution_seedEvE4seed, align 8
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN4llvm7hashing6detail18get_execution_seedEvE4seed) #16
  br label %13

13:                                               ; preds = %2, %6, %9
  %14 = load i64, i64* @_ZZN4llvm7hashing6detail18get_execution_seedEvE4seed, align 8
  %15 = bitcast i32* %0 to i8*
  %16 = ptrtoint i32* %1 to i64
  %17 = ptrtoint i32* %0 to i64
  %18 = sub i64 %16, %17
  %19 = icmp ult i64 %18, 65
  br i1 %19, label %20, label %22

20:                                               ; preds = %13
  %21 = tail call i64 @_ZN4llvm7hashing6detail10hash_shortEPKcmm(i8* %15, i64 %18, i64 %14) #17
  br label %41

22:                                               ; preds = %13
  %23 = and i64 %18, -64
  %24 = getelementptr inbounds i8, i8* %15, i64 %23
  %25 = bitcast %"struct.llvm::hashing::detail::hash_state"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %25) #16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %25, i8 -86, i64 56, i1 false)
  call void @_ZN4llvm7hashing6detail10hash_state6createEPKcm(%"struct.llvm::hashing::detail::hash_state"* nonnull sret %3, i8* %15, i64 %14) #17
  %26 = getelementptr inbounds i32, i32* %0, i64 16
  %27 = bitcast i32* %26 to i8*
  %28 = icmp eq i8* %24, %27
  br i1 %28, label %33, label %29

29:                                               ; preds = %22, %29
  %30 = phi i8* [ %31, %29 ], [ %27, %22 ]
  call void @_ZN4llvm7hashing6detail10hash_state3mixEPKc(%"struct.llvm::hashing::detail::hash_state"* nonnull %3, i8* %30) #17
  %31 = getelementptr inbounds i8, i8* %30, i64 64
  %32 = icmp eq i8* %31, %24
  br i1 %32, label %33, label %29

33:                                               ; preds = %29, %22
  %34 = and i64 %18, 63
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %39, label %36

36:                                               ; preds = %33
  %37 = getelementptr inbounds i32, i32* %1, i64 -16
  %38 = bitcast i32* %37 to i8*
  call void @_ZN4llvm7hashing6detail10hash_state3mixEPKc(%"struct.llvm::hashing::detail::hash_state"* nonnull %3, i8* %38) #17
  br label %39

39:                                               ; preds = %33, %36
  %40 = call i64 @_ZN4llvm7hashing6detail10hash_state8finalizeEm(%"struct.llvm::hashing::detail::hash_state"* nonnull %3, i64 %18) #17
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %25) #16
  br label %41

41:                                               ; preds = %39, %20
  %42 = phi i64 [ %21, %20 ], [ %40, %39 ]
  ret i64 %42
}

; Function Attrs: inlinehint nounwind optsize ssp uwtable
define linkonce_odr hidden i64 @_ZN4llvm7hashing6detail10hash_shortEPKcmm(i8*, i64, i64) local_unnamed_addr #10 comdat {
  %4 = add i64 %1, -4
  %5 = icmp ult i64 %4, 5
  br i1 %5, label %6, label %27

6:                                                ; preds = %3
  %7 = bitcast i8* %0 to i32*
  %8 = load i32, i32* %7, align 1
  %9 = zext i32 %8 to i64
  %10 = shl nuw nsw i64 %9, 3
  %11 = add nuw nsw i64 %10, %1
  %12 = getelementptr inbounds i8, i8* %0, i64 %1
  %13 = getelementptr inbounds i8, i8* %12, i64 -4
  %14 = bitcast i8* %13 to i32*
  %15 = load i32, i32* %14, align 1
  %16 = zext i32 %15 to i64
  %17 = xor i64 %16, %2
  %18 = xor i64 %17, %11
  %19 = mul i64 %18, -7070675565921424023
  %20 = lshr i64 %19, 47
  %21 = xor i64 %19, %17
  %22 = xor i64 %21, %20
  %23 = mul i64 %22, -7070675565921424023
  %24 = lshr i64 %23, 47
  %25 = xor i64 %24, %23
  %26 = mul i64 %25, -7070675565921424023
  br label %208

27:                                               ; preds = %3
  %28 = add i64 %1, -9
  %29 = icmp ult i64 %28, 8
  br i1 %29, label %30, label %53

30:                                               ; preds = %27
  %31 = bitcast i8* %0 to i64*
  %32 = load i64, i64* %31, align 1
  %33 = getelementptr inbounds i8, i8* %0, i64 %1
  %34 = getelementptr inbounds i8, i8* %33, i64 -8
  %35 = bitcast i8* %34 to i64*
  %36 = load i64, i64* %35, align 1
  %37 = xor i64 %32, %2
  %38 = add i64 %36, %1
  %39 = lshr i64 %38, %1
  %40 = sub nuw nsw i64 64, %1
  %41 = shl i64 %38, %40
  %42 = or i64 %41, %39
  %43 = xor i64 %37, %42
  %44 = mul i64 %43, -7070675565921424023
  %45 = lshr i64 %44, 47
  %46 = xor i64 %44, %42
  %47 = xor i64 %46, %45
  %48 = mul i64 %47, -7070675565921424023
  %49 = lshr i64 %48, 47
  %50 = xor i64 %49, %48
  %51 = mul i64 %50, -7070675565921424023
  %52 = xor i64 %51, %36
  br label %208

53:                                               ; preds = %27
  %54 = add i64 %1, -17
  %55 = icmp ult i64 %54, 16
  br i1 %55, label %56, label %99

56:                                               ; preds = %53
  %57 = bitcast i8* %0 to i64*
  %58 = load i64, i64* %57, align 1
  %59 = mul i64 %58, -5435081209227447693
  %60 = getelementptr inbounds i8, i8* %0, i64 8
  %61 = bitcast i8* %60 to i64*
  %62 = load i64, i64* %61, align 1
  %63 = getelementptr inbounds i8, i8* %0, i64 %1
  %64 = getelementptr inbounds i8, i8* %63, i64 -8
  %65 = bitcast i8* %64 to i64*
  %66 = load i64, i64* %65, align 1
  %67 = mul i64 %66, -7286425919675154353
  %68 = getelementptr inbounds i8, i8* %63, i64 -16
  %69 = bitcast i8* %68 to i64*
  %70 = load i64, i64* %69, align 1
  %71 = mul i64 %70, -4348849565147123417
  %72 = sub i64 %59, %62
  %73 = lshr i64 %72, 43
  %74 = shl i64 %72, 21
  %75 = or i64 %74, %73
  %76 = xor i64 %67, %2
  %77 = lshr i64 %76, 30
  %78 = shl i64 %76, 34
  %79 = or i64 %78, %77
  %80 = add i64 %71, %75
  %81 = add i64 %80, %79
  %82 = xor i64 %62, -3942382747735136937
  %83 = lshr i64 %82, 20
  %84 = shl i64 %82, 44
  %85 = or i64 %84, %83
  %86 = add i64 %2, %1
  %87 = add i64 %86, %59
  %88 = sub i64 %87, %67
  %89 = add i64 %88, %85
  %90 = xor i64 %81, %89
  %91 = mul i64 %90, -7070675565921424023
  %92 = lshr i64 %91, 47
  %93 = xor i64 %91, %89
  %94 = xor i64 %93, %92
  %95 = mul i64 %94, -7070675565921424023
  %96 = lshr i64 %95, 47
  %97 = xor i64 %96, %95
  %98 = mul i64 %97, -7070675565921424023
  br label %208

99:                                               ; preds = %53
  %100 = icmp ugt i64 %1, 32
  br i1 %100, label %101, label %181

101:                                              ; preds = %99
  %102 = getelementptr inbounds i8, i8* %0, i64 24
  %103 = bitcast i8* %102 to i64*
  %104 = load i64, i64* %103, align 1
  %105 = bitcast i8* %0 to i64*
  %106 = load i64, i64* %105, align 1
  %107 = getelementptr inbounds i8, i8* %0, i64 %1
  %108 = getelementptr inbounds i8, i8* %107, i64 -16
  %109 = bitcast i8* %108 to i64*
  %110 = load i64, i64* %109, align 1
  %111 = add i64 %110, %1
  %112 = mul i64 %111, -4348849565147123417
  %113 = add i64 %112, %106
  %114 = add i64 %113, %104
  %115 = lshr i64 %114, 52
  %116 = shl i64 %114, 12
  %117 = or i64 %116, %115
  %118 = lshr i64 %113, 37
  %119 = shl i64 %113, 27
  %120 = or i64 %119, %118
  %121 = getelementptr inbounds i8, i8* %0, i64 8
  %122 = bitcast i8* %121 to i64*
  %123 = load i64, i64* %122, align 1
  %124 = add i64 %113, %123
  %125 = lshr i64 %124, 7
  %126 = shl i64 %124, 57
  %127 = or i64 %126, %125
  %128 = getelementptr inbounds i8, i8* %0, i64 16
  %129 = bitcast i8* %128 to i64*
  %130 = load i64, i64* %129, align 1
  %131 = add i64 %124, %130
  %132 = lshr i64 %131, 31
  %133 = shl i64 %131, 33
  %134 = or i64 %133, %132
  %135 = add i64 %127, %120
  %136 = add i64 %135, %117
  %137 = add i64 %136, %134
  %138 = getelementptr inbounds i8, i8* %107, i64 -32
  %139 = bitcast i8* %138 to i64*
  %140 = load i64, i64* %139, align 1
  %141 = add i64 %140, %130
  %142 = getelementptr inbounds i8, i8* %107, i64 -8
  %143 = bitcast i8* %142 to i64*
  %144 = load i64, i64* %143, align 1
  %145 = add i64 %141, %144
  %146 = lshr i64 %145, 52
  %147 = shl i64 %145, 12
  %148 = or i64 %147, %146
  %149 = lshr i64 %141, 37
  %150 = shl i64 %141, 27
  %151 = or i64 %150, %149
  %152 = getelementptr inbounds i8, i8* %107, i64 -24
  %153 = bitcast i8* %152 to i64*
  %154 = load i64, i64* %153, align 1
  %155 = add i64 %154, %141
  %156 = lshr i64 %155, 7
  %157 = shl i64 %155, 57
  %158 = or i64 %157, %156
  %159 = add i64 %155, %110
  %160 = add i64 %159, %144
  %161 = lshr i64 %159, 31
  %162 = shl i64 %159, 33
  %163 = or i64 %162, %161
  %164 = add i64 %131, %104
  %165 = add i64 %164, %151
  %166 = add i64 %165, %148
  %167 = add i64 %166, %158
  %168 = add i64 %167, %163
  %169 = mul i64 %168, -7286425919675154353
  %170 = add i64 %160, %137
  %171 = mul i64 %170, -4348849565147123417
  %172 = add i64 %169, %171
  %173 = lshr i64 %172, 47
  %174 = xor i64 %173, %172
  %175 = mul i64 %174, -4348849565147123417
  %176 = xor i64 %175, %2
  %177 = add i64 %176, %137
  %178 = lshr i64 %177, 47
  %179 = xor i64 %178, %177
  %180 = mul i64 %179, -7286425919675154353
  br label %208

181:                                              ; preds = %99
  %182 = icmp eq i64 %1, 0
  br i1 %182, label %206, label %183

183:                                              ; preds = %181
  %184 = load i8, i8* %0, align 1
  %185 = lshr i64 %1, 1
  %186 = getelementptr inbounds i8, i8* %0, i64 %185
  %187 = load i8, i8* %186, align 1
  %188 = add nsw i64 %1, -1
  %189 = getelementptr inbounds i8, i8* %0, i64 %188
  %190 = load i8, i8* %189, align 1
  %191 = zext i8 %184 to i64
  %192 = zext i8 %187 to i64
  %193 = shl nuw nsw i64 %192, 8
  %194 = or i64 %193, %191
  %195 = zext i8 %190 to i64
  %196 = shl nuw nsw i64 %195, 2
  %197 = add nuw nsw i64 %196, %1
  %198 = mul i64 %194, -7286425919675154353
  %199 = and i64 %197, 4294967295
  %200 = mul i64 %199, -3942382747735136937
  %201 = xor i64 %198, %2
  %202 = xor i64 %201, %200
  %203 = lshr i64 %202, 47
  %204 = xor i64 %203, %202
  %205 = mul i64 %204, -7286425919675154353
  br label %208

206:                                              ; preds = %181
  %207 = xor i64 %2, -7286425919675154353
  br label %208

208:                                              ; preds = %206, %183, %101, %56, %30, %6
  %209 = phi i64 [ %26, %6 ], [ %52, %30 ], [ %98, %56 ], [ %180, %101 ], [ %205, %183 ], [ %207, %206 ]
  ret i64 %209
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN4llvm7hashing6detail10hash_state6createEPKcm(%"struct.llvm::hashing::detail::hash_state"* noalias sret, i8*, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 0
  store i64 0, i64* %4, align 8
  %5 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 1
  store i64 %2, i64* %5, align 8
  %6 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 2
  %7 = xor i64 %2, -5435081209227447693
  %8 = mul i64 %7, -7070675565921424023
  %9 = lshr i64 %8, 47
  %10 = xor i64 %8, -5435081209227447693
  %11 = xor i64 %10, %9
  %12 = mul i64 %11, -7070675565921424023
  %13 = lshr i64 %12, 47
  %14 = xor i64 %13, %12
  %15 = mul i64 %14, -7070675565921424023
  store i64 %15, i64* %6, align 8
  %16 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 3
  %17 = lshr i64 %7, 49
  %18 = shl i64 %7, 15
  %19 = or i64 %18, %17
  store i64 %19, i64* %16, align 8
  %20 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 4
  %21 = mul i64 %2, -5435081209227447693
  store i64 %21, i64* %20, align 8
  %22 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 5
  %23 = lshr i64 %2, 47
  %24 = xor i64 %23, %2
  store i64 %24, i64* %22, align 8
  %25 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 6
  %26 = xor i64 %24, %21
  %27 = mul i64 %26, -7070675565921424023
  %28 = lshr i64 %27, 47
  %29 = xor i64 %27, %24
  %30 = xor i64 %29, %28
  %31 = mul i64 %30, -7070675565921424023
  %32 = lshr i64 %31, 47
  %33 = xor i64 %32, %31
  %34 = mul i64 %33, -7070675565921424023
  store i64 %34, i64* %25, align 8
  tail call void @_ZN4llvm7hashing6detail10hash_state3mixEPKc(%"struct.llvm::hashing::detail::hash_state"* %0, i8* %1) #17
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN4llvm7hashing6detail10hash_state3mixEPKc(%"struct.llvm::hashing::detail::hash_state"*, i8*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, %4
  %8 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 3
  %9 = load i64, i64* %8, align 8
  %10 = add i64 %7, %9
  %11 = getelementptr inbounds i8, i8* %1, i64 8
  %12 = bitcast i8* %11 to i64*
  %13 = load i64, i64* %12, align 1
  %14 = add i64 %10, %13
  %15 = lshr i64 %14, 37
  %16 = shl i64 %14, 27
  %17 = or i64 %16, %15
  %18 = mul i64 %17, -5435081209227447693
  store i64 %18, i64* %3, align 8
  %19 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 4
  %20 = load i64, i64* %19, align 8
  %21 = add i64 %20, %6
  %22 = getelementptr inbounds i8, i8* %1, i64 48
  %23 = bitcast i8* %22 to i64*
  %24 = load i64, i64* %23, align 1
  %25 = add i64 %21, %24
  %26 = lshr i64 %25, 42
  %27 = shl i64 %25, 22
  %28 = or i64 %27, %26
  %29 = mul i64 %28, -5435081209227447693
  store i64 %29, i64* %5, align 8
  %30 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 6
  %31 = load i64, i64* %30, align 8
  %32 = xor i64 %31, %18
  store i64 %32, i64* %3, align 8
  %33 = getelementptr inbounds i8, i8* %1, i64 40
  %34 = bitcast i8* %33 to i64*
  %35 = load i64, i64* %34, align 1
  %36 = add i64 %35, %9
  %37 = add i64 %36, %29
  store i64 %37, i64* %5, align 8
  %38 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 2
  %39 = load i64, i64* %38, align 8
  %40 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 5
  %41 = load i64, i64* %40, align 8
  %42 = add i64 %41, %39
  %43 = lshr i64 %42, 33
  %44 = shl i64 %42, 31
  %45 = or i64 %44, %43
  %46 = mul i64 %45, -5435081209227447693
  store i64 %46, i64* %38, align 8
  %47 = mul i64 %20, -5435081209227447693
  store i64 %47, i64* %8, align 8
  %48 = add i64 %41, %32
  store i64 %48, i64* %19, align 8
  tail call void @_ZN4llvm7hashing6detail10hash_state12mix_32_bytesEPKcRmS5_(i8* %1, i64* dereferenceable(8) %8, i64* dereferenceable(8) %19) #17
  %49 = load i64, i64* %38, align 8
  %50 = load i64, i64* %30, align 8
  %51 = add i64 %50, %49
  store i64 %51, i64* %40, align 8
  %52 = load i64, i64* %5, align 8
  %53 = getelementptr inbounds i8, i8* %1, i64 16
  %54 = bitcast i8* %53 to i64*
  %55 = load i64, i64* %54, align 1
  %56 = add i64 %55, %52
  store i64 %56, i64* %30, align 8
  %57 = getelementptr inbounds i8, i8* %1, i64 32
  tail call void @_ZN4llvm7hashing6detail10hash_state12mix_32_bytesEPKcRmS5_(i8* %57, i64* dereferenceable(8) %40, i64* dereferenceable(8) %30) #17
  %58 = load i64, i64* %38, align 8
  %59 = load i64, i64* %3, align 8
  store i64 %59, i64* %38, align 8
  store i64 %58, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden i64 @_ZN4llvm7hashing6detail10hash_state8finalizeEm(%"struct.llvm::hashing::detail::hash_state"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 3
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 5
  %6 = load i64, i64* %5, align 8
  %7 = xor i64 %6, %4
  %8 = mul i64 %7, -7070675565921424023
  %9 = lshr i64 %8, 47
  %10 = xor i64 %8, %6
  %11 = xor i64 %10, %9
  %12 = mul i64 %11, -7070675565921424023
  %13 = lshr i64 %12, 47
  %14 = xor i64 %13, %12
  %15 = mul i64 %14, -7070675565921424023
  %16 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = lshr i64 %17, 47
  %19 = xor i64 %18, %17
  %20 = mul i64 %19, -5435081209227447693
  %21 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 2
  %22 = load i64, i64* %21, align 8
  %23 = add i64 %20, %22
  %24 = add i64 %23, %15
  %25 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 4
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 6
  %28 = load i64, i64* %27, align 8
  %29 = xor i64 %28, %26
  %30 = mul i64 %29, -7070675565921424023
  %31 = lshr i64 %30, 47
  %32 = xor i64 %30, %28
  %33 = xor i64 %32, %31
  %34 = mul i64 %33, -7070675565921424023
  %35 = lshr i64 %34, 47
  %36 = xor i64 %35, %34
  %37 = mul i64 %36, -7070675565921424023
  %38 = lshr i64 %1, 47
  %39 = xor i64 %38, %1
  %40 = mul i64 %39, -5435081209227447693
  %41 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, %40
  %44 = add i64 %43, %37
  %45 = xor i64 %44, %24
  %46 = mul i64 %45, -7070675565921424023
  %47 = lshr i64 %46, 47
  %48 = xor i64 %46, %44
  %49 = xor i64 %48, %47
  %50 = mul i64 %49, -7070675565921424023
  %51 = lshr i64 %50, 47
  %52 = xor i64 %51, %50
  %53 = mul i64 %52, -7070675565921424023
  ret i64 %53
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #11

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #11

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN4llvm7hashing6detail10hash_state12mix_32_bytesEPKcRmS5_(i8*, i64* dereferenceable(8), i64* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = bitcast i8* %0 to i64*
  %5 = load i64, i64* %4, align 1
  %6 = load i64, i64* %1, align 8
  %7 = add i64 %6, %5
  store i64 %7, i64* %1, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 24
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = load i64, i64* %2, align 8
  %12 = add i64 %10, %7
  %13 = add i64 %12, %11
  %14 = lshr i64 %13, 21
  %15 = shl i64 %13, 43
  %16 = or i64 %15, %14
  store i64 %16, i64* %2, align 8
  %17 = load i64, i64* %1, align 8
  %18 = getelementptr inbounds i8, i8* %0, i64 8
  %19 = bitcast i8* %18 to i64*
  %20 = load i64, i64* %19, align 1
  %21 = getelementptr inbounds i8, i8* %0, i64 16
  %22 = bitcast i8* %21 to i64*
  %23 = load i64, i64* %22, align 1
  %24 = add i64 %20, %17
  %25 = add i64 %24, %23
  store i64 %25, i64* %1, align 8
  %26 = lshr i64 %25, 44
  %27 = shl i64 %25, 20
  %28 = or i64 %27, %26
  %29 = load i64, i64* %2, align 8
  %30 = add i64 %29, %17
  %31 = add i64 %30, %28
  store i64 %31, i64* %2, align 8
  %32 = load i64, i64* %1, align 8
  %33 = add i64 %32, %10
  store i64 %33, i64* %1, align 8
  ret void
}

; Function Attrs: optsize
declare void @_ZN4llvm15SmallVectorBase8grow_podEPvmm(%"class.llvm::SmallVectorBase"*, i8*, i64, i64) local_unnamed_addr #12

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden noalias i8* @_ZN4llvm20BumpPtrAllocatorImplINS_15MallocAllocatorELm4096ELm4096EE8AllocateEmm(%"class.llvm::BumpPtrAllocatorImpl"*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"struct.std::__1::pair", align 8
  %5 = getelementptr inbounds %"class.llvm::BumpPtrAllocatorImpl", %"class.llvm::BumpPtrAllocatorImpl"* %0, i64 0, i32 4
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, %1
  store i64 %7, i64* %5, align 8
  %8 = getelementptr inbounds %"class.llvm::BumpPtrAllocatorImpl", %"class.llvm::BumpPtrAllocatorImpl"* %0, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = ptrtoint i8* %9 to i64
  %11 = add i64 %2, -1
  %12 = add i64 %11, %10
  %13 = sub i64 0, %2
  %14 = and i64 %12, %13
  %15 = sub i64 %14, %10
  %16 = add i64 %15, %1
  %17 = getelementptr inbounds %"class.llvm::BumpPtrAllocatorImpl", %"class.llvm::BumpPtrAllocatorImpl"* %0, i64 0, i32 1
  %18 = bitcast i8** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %19, %10
  %21 = icmp ugt i64 %16, %20
  br i1 %21, label %25, label %22

22:                                               ; preds = %3
  %23 = getelementptr inbounds i8, i8* %9, i64 %15
  %24 = getelementptr inbounds i8, i8* %23, i64 %1
  store i8* %24, i8** %8, align 8
  br label %45

25:                                               ; preds = %3
  %26 = add i64 %11, %1
  %27 = icmp ugt i64 %26, 4096
  br i1 %27, label %28, label %38

28:                                               ; preds = %25
  %29 = tail call noalias i8* @malloc(i64 %26) #14
  %30 = getelementptr inbounds %"class.llvm::BumpPtrAllocatorImpl", %"class.llvm::BumpPtrAllocatorImpl"* %0, i64 0, i32 3, i32 0, i32 0
  %31 = bitcast %"struct.std::__1::pair"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %31) #16
  %32 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %4, i64 0, i32 0
  store i8* %29, i8** %32, align 8
  %33 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %4, i64 0, i32 1
  store i64 %26, i64* %33, align 8
  call void @_ZN4llvm23SmallVectorTemplateBaseINSt3__14pairIPvmEELb1EE9push_backERKS4_(%"class.llvm::SmallVectorTemplateBase.9"* %30, %"struct.std::__1::pair"* nonnull dereferenceable(16) %4) #17
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %31) #16
  %34 = ptrtoint i8* %29 to i64
  %35 = add i64 %11, %34
  %36 = and i64 %35, %13
  %37 = inttoptr i64 %36 to i8*
  br label %45

38:                                               ; preds = %25
  tail call void @_ZN4llvm20BumpPtrAllocatorImplINS_15MallocAllocatorELm4096ELm4096EE12StartNewSlabEv(%"class.llvm::BumpPtrAllocatorImpl"* %0) #17
  %39 = bitcast %"class.llvm::BumpPtrAllocatorImpl"* %0 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = add i64 %40, %11
  %42 = and i64 %41, %13
  %43 = inttoptr i64 %42 to i8*
  %44 = getelementptr inbounds i8, i8* %43, i64 %1
  store i8* %44, i8** %8, align 8
  br label %45

45:                                               ; preds = %28, %38, %22
  %46 = phi i8* [ %23, %22 ], [ %37, %28 ], [ %43, %38 ]
  ret i8* %46
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN4llvm23SmallVectorTemplateBaseINSt3__14pairIPvmEELb1EE9push_backERKS4_(%"class.llvm::SmallVectorTemplateBase.9"*, %"struct.std::__1::pair"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.llvm::SmallVectorTemplateBase.9", %"class.llvm::SmallVectorTemplateBase.9"* %0, i64 0, i32 0, i32 0, i32 1
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.llvm::SmallVectorTemplateBase.9", %"class.llvm::SmallVectorTemplateBase.9"* %0, i64 0, i32 0, i32 0, i32 2
  %6 = load i8*, i8** %5, align 8
  %7 = icmp ult i8* %4, %6
  br i1 %7, label %12, label %8, !prof !2

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.llvm::SmallVectorTemplateBase.9", %"class.llvm::SmallVectorTemplateBase.9"* %0, i64 0, i32 0, i32 0
  %10 = getelementptr inbounds %"class.llvm::SmallVectorTemplateBase.9", %"class.llvm::SmallVectorTemplateBase.9"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i64 0
  tail call void @_ZN4llvm15SmallVectorBase8grow_podEPvmm(%"class.llvm::SmallVectorBase"* %9, i8* %10, i64 0, i64 16) #14
  %11 = load i8*, i8** %3, align 8
  br label %12

12:                                               ; preds = %2, %8
  %13 = phi i8* [ %4, %2 ], [ %11, %8 ]
  %14 = bitcast i8** %3 to %"struct.std::__1::pair"**
  %15 = bitcast %"struct.std::__1::pair"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %13, i8* align 8 %15, i64 16, i1 false)
  %16 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %14, align 8
  %17 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %16, i64 1
  store %"struct.std::__1::pair"* %17, %"struct.std::__1::pair"** %14, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN4llvm20BumpPtrAllocatorImplINS_15MallocAllocatorELm4096ELm4096EE12StartNewSlabEv(%"class.llvm::BumpPtrAllocatorImpl"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca i8*, align 8
  %3 = getelementptr inbounds %"class.llvm::BumpPtrAllocatorImpl", %"class.llvm::BumpPtrAllocatorImpl"* %0, i64 0, i32 2
  %4 = getelementptr inbounds %"class.llvm::BumpPtrAllocatorImpl", %"class.llvm::BumpPtrAllocatorImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 1
  %5 = bitcast i8** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.llvm::SmallVector.0"* %3 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = lshr i64 %9, 10
  %11 = and i64 %10, 33554431
  %12 = icmp ult i64 %11, 30
  %13 = select i1 %12, i64 %11, i64 30
  %14 = shl i64 4096, %13
  %15 = bitcast i8** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #16
  %16 = tail call noalias i8* @malloc(i64 %14) #14
  store i8* %16, i8** %2, align 8
  %17 = getelementptr inbounds %"class.llvm::SmallVector.0", %"class.llvm::SmallVector.0"* %3, i64 0, i32 0, i32 0
  call void @_ZN4llvm23SmallVectorTemplateBaseIPvLb1EE9push_backERKS1_(%"class.llvm::SmallVectorTemplateBase.2"* %17, i8** nonnull dereferenceable(8) %2) #17
  %18 = bitcast i8** %2 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %"class.llvm::BumpPtrAllocatorImpl"* %0 to i64*
  store i64 %19, i64* %20, align 8
  %21 = inttoptr i64 %19 to i8*
  %22 = getelementptr inbounds i8, i8* %21, i64 %14
  %23 = getelementptr inbounds %"class.llvm::BumpPtrAllocatorImpl", %"class.llvm::BumpPtrAllocatorImpl"* %0, i64 0, i32 1
  store i8* %22, i8** %23, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #16
  ret void
}

; Function Attrs: nofree nounwind optsize
declare noalias i8* @malloc(i64) local_unnamed_addr #8

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN4llvm23SmallVectorTemplateBaseIPvLb1EE9push_backERKS1_(%"class.llvm::SmallVectorTemplateBase.2"*, i8** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.llvm::SmallVectorTemplateBase.2", %"class.llvm::SmallVectorTemplateBase.2"* %0, i64 0, i32 0, i32 0, i32 1
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.llvm::SmallVectorTemplateBase.2", %"class.llvm::SmallVectorTemplateBase.2"* %0, i64 0, i32 0, i32 0, i32 2
  %6 = load i8*, i8** %5, align 8
  %7 = icmp ult i8* %4, %6
  br i1 %7, label %8, label %10, !prof !2

8:                                                ; preds = %2
  %9 = bitcast i8* %4 to i64*
  br label %15

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.llvm::SmallVectorTemplateBase.2", %"class.llvm::SmallVectorTemplateBase.2"* %0, i64 0, i32 0, i32 0
  %12 = getelementptr inbounds %"class.llvm::SmallVectorTemplateBase.2", %"class.llvm::SmallVectorTemplateBase.2"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i64 0
  tail call void @_ZN4llvm15SmallVectorBase8grow_podEPvmm(%"class.llvm::SmallVectorBase"* %11, i8* %12, i64 0, i64 8) #14
  %13 = bitcast i8** %3 to i64**
  %14 = load i64*, i64** %13, align 8
  br label %15

15:                                               ; preds = %8, %10
  %16 = phi i64* [ %9, %8 ], [ %14, %10 ]
  %17 = bitcast i8** %3 to i8***
  %18 = bitcast i8** %1 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %16, align 1
  %20 = load i8**, i8*** %17, align 8
  %21 = getelementptr inbounds i8*, i8** %20, i64 1
  store i8** %21, i8*** %17, align 8
  ret void
}

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #13

attributes #0 = { nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind optsize readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind optsize readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind optsize readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree norecurse nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone speculatable }
attributes #10 = { inlinehint nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nofree nounwind }
attributes #12 = { optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nofree nounwind readonly }
attributes #14 = { nounwind optsize }
attributes #15 = { nounwind optsize readonly }
attributes #16 = { nounwind }
attributes #17 = { optsize }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{i64 0, i64 65}
!4 = !{!"branch_weights", i32 1, i32 1048575}
