; ModuleID = '../../ui/aura/event_injector.cc'
source_filename = "../../ui/aura/event_injector.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.aura::EventInjector" = type { i8 }
%"class.aura::WindowTreeHost" = type { %"class.ui::internal::InputMethodDelegate", %"class.ui::EventSource", %"class.display::DisplayObserver", %"class.ui::CompositorObserver", %"class.aura::Window"*, i32, [4 x i8], %"class.base::ObserverList.104", %"class.std::__1::unique_ptr.108", %"class.std::__1::unique_ptr.114", float, %"class.ui::Cursor", %"class.gfx::Point", %"class.std::__1::unique_ptr.123", %"class.ui::InputMethod"*, i8, i8, i8, %"class.base::WeakPtrFactory.129" }
%"class.ui::internal::InputMethodDelegate" = type { i32 (...)** }
%"class.ui::EventSource" = type { i32 (...)**, %"class.std::__1::list" }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i64 }
%"class.display::DisplayObserver" = type { %"class.base::CheckedObserver" }
%"class.base::CheckedObserver" = type { i32 (...)**, %"class.base::WeakPtrFactory" }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.2" }
%"struct.std::__1::atomic.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__cxx_atomic_impl.5" }
%"struct.std::__1::__cxx_atomic_impl.5" = type { %"struct.std::__1::__cxx_atomic_base_impl.6" }
%"struct.std::__1::__cxx_atomic_base_impl.6" = type { i8 }
%"class.ui::CompositorObserver" = type { i32 (...)** }
%"class.aura::Window" = type { %"class.ui::LayerDelegate", %"class.ui::LayerOwner", %"class.ui::EventTarget", %"class.ui::GestureConsumer", %"class.ui::PropertyHandler", %"class.ui::metadata::MetaDataProvider", %"class.viz::HostFrameSinkClient", %"class.gfx::Rect", %"class.aura::WindowTreeHost"*, i32, i8, i8, %"class.aura::WindowDelegate"*, %"class.aura::Window"*, %"class.std::__1::vector.59", i8, i32, %class.SkRegion, i32, i8, i8, %"class.std::__1::unique_ptr.66", %"class.std::__1::unique_ptr.72", %"class.std::__1::vector.78", i32, i32, i32, [4 x i8], %"class.base::ObserverList.85", i32, %"class.viz::SubtreeCaptureId", float, %"class.viz::FrameSinkId", i8, i8, i8, %"class.std::__1::unique_ptr.97", %"class.base::WeakPtr.103" }
%"class.ui::LayerDelegate" = type { i32 (...)** }
%"class.ui::LayerOwner" = type { i32 (...)**, %"class.std::__1::unique_ptr", %"class.ui::Layer"*, %"class.base::ObserverList" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"class.ui::Layer"* }
%"class.ui::Layer" = type opaque
%"class.base::ObserverList" = type <{ %"class.std::__1::vector", %"class.base::LinkedList", i64, i32, [4 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"*, %"class.std::__1::__compressed_pair.10" }
%"class.base::internal::UncheckedObserverAdapter" = type { i8* }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"class.base::internal::UncheckedObserverAdapter"* }
%"class.base::LinkedList" = type { %"class.base::LinkNode" }
%"class.base::LinkNode" = type { %"class.base::internal::LinkNodeBase" }
%"class.base::internal::LinkNodeBase" = type { %"class.base::internal::LinkNodeBase"*, %"class.base::internal::LinkNodeBase"* }
%"class.ui::EventTarget" = type { i32 (...)**, %"class.std::__1::vector.15", %"class.std::__1::vector.31", %"class.ui::EventHandler"* }
%"class.std::__1::vector.15" = type { %"class.std::__1::__vector_base.16" }
%"class.std::__1::__vector_base.16" = type { %"struct.ui::EventTarget::PrioritizedHandler"*, %"struct.ui::EventTarget::PrioritizedHandler"*, %"class.std::__1::__compressed_pair.38" }
%"struct.ui::EventTarget::PrioritizedHandler" = type <{ %"class.ui::EventHandler"*, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %"struct.ui::EventTarget::PrioritizedHandler"* }
%"class.std::__1::vector.31" = type { %"class.std::__1::__vector_base.32" }
%"class.std::__1::__vector_base.32" = type { %"class.ui::EventHandler"**, %"class.ui::EventHandler"**, %"class.std::__1::__compressed_pair.33" }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { %"class.ui::EventHandler"** }
%"class.ui::EventHandler" = type { i32 (...)**, %"class.std::__1::stack" }
%"class.std::__1::stack" = type { %"class.base::circular_deque" }
%"class.base::circular_deque" = type { %"class.base::internal::VectorBuffer", i64, i64 }
%"class.base::internal::VectorBuffer" = type { %"class.ui::EventDispatcher"**, i64 }
%"class.ui::EventDispatcher" = type { i32 (...)**, %"class.ui::EventDispatcherDelegate"*, %"class.ui::Event"*, %"class.std::__1::vector.31" }
%"class.ui::EventDispatcherDelegate" = type { i32 (...)**, %"class.ui::EventDispatcher"* }
%"class.ui::GestureConsumer" = type { i32 (...)** }
%"class.ui::PropertyHandler" = type { i32 (...)**, %"class.std::__1::map" }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.43", %"class.std::__1::__compressed_pair.48" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"struct.std::__1::__compressed_pair_elem.44" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.ui::metadata::MetaDataProvider" = type { i32 (...)**, %"class.std::__1::map.50" }
%"class.std::__1::map.50" = type { %"class.std::__1::__tree.51" }
%"class.std::__1::__tree.51" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.52", %"class.std::__1::__compressed_pair.56" }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.viz::HostFrameSinkClient" = type { i32 (...)** }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Size" = type { i32, i32 }
%"class.aura::WindowDelegate" = type opaque
%"class.std::__1::vector.59" = type { %"class.std::__1::__vector_base.60" }
%"class.std::__1::__vector_base.60" = type { %"class.aura::Window"**, %"class.aura::Window"**, %"class.std::__1::__compressed_pair.61" }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.62" }
%"struct.std::__1::__compressed_pair_elem.62" = type { %"class.aura::Window"** }
%class.SkRegion = type { %struct.SkIRect, %"struct.SkRegion::RunHead"* }
%struct.SkIRect = type { i32, i32, i32, i32 }
%"struct.SkRegion::RunHead" = type opaque
%"class.std::__1::unique_ptr.66" = type { %"class.std::__1::__compressed_pair.67" }
%"class.std::__1::__compressed_pair.67" = type { %"struct.std::__1::__compressed_pair_elem.68" }
%"struct.std::__1::__compressed_pair_elem.68" = type { %"class.aura::LayoutManager"* }
%"class.aura::LayoutManager" = type opaque
%"class.std::__1::unique_ptr.72" = type { %"class.std::__1::__compressed_pair.73" }
%"class.std::__1::__compressed_pair.73" = type { %"struct.std::__1::__compressed_pair_elem.74" }
%"struct.std::__1::__compressed_pair_elem.74" = type { %"class.aura::WindowTargeter"* }
%"class.aura::WindowTargeter" = type opaque
%"class.std::__1::vector.78" = type { %"class.std::__1::__vector_base.79" }
%"class.std::__1::__vector_base.79" = type { %"class.gfx::Rect"*, %"class.gfx::Rect"*, %"class.std::__1::__compressed_pair.80" }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { %"class.gfx::Rect"* }
%"class.base::ObserverList.85" = type <{ %"class.std::__1::vector.86", %"class.base::LinkedList.94", i64, i32, [4 x i8] }>
%"class.std::__1::vector.86" = type { %"class.std::__1::__vector_base.87" }
%"class.std::__1::__vector_base.87" = type { %"class.base::internal::CheckedObserverAdapter"*, %"class.base::internal::CheckedObserverAdapter"*, %"class.std::__1::__compressed_pair.89" }
%"class.base::internal::CheckedObserverAdapter" = type { %"class.base::WeakPtr" }
%"class.base::WeakPtr" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::internal::WeakPtrBase" = type { %"class.base::internal::WeakReference", i64 }
%"class.base::internal::WeakReference" = type { %class.scoped_refptr.88 }
%class.scoped_refptr.88 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.std::__1::__compressed_pair.89" = type { %"struct.std::__1::__compressed_pair_elem.90" }
%"struct.std::__1::__compressed_pair_elem.90" = type { %"class.base::internal::CheckedObserverAdapter"* }
%"class.base::LinkedList.94" = type { %"class.base::LinkNode.95" }
%"class.base::LinkNode.95" = type { %"class.base::internal::LinkNodeBase" }
%"class.viz::SubtreeCaptureId" = type { i32 }
%"class.viz::FrameSinkId" = type { i32, i32 }
%"class.std::__1::unique_ptr.97" = type { %"class.std::__1::__compressed_pair.98" }
%"class.std::__1::__compressed_pair.98" = type { %"struct.std::__1::__compressed_pair_elem.99" }
%"struct.std::__1::__compressed_pair_elem.99" = type { %"class.viz::ParentLocalSurfaceIdAllocator"* }
%"class.viz::ParentLocalSurfaceIdAllocator" = type opaque
%"class.base::WeakPtr.103" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::ObserverList.104" = type <{ %"class.std::__1::vector", %"class.base::LinkedList.105", i64, i32, [4 x i8] }>
%"class.base::LinkedList.105" = type { %"class.base::LinkNode.106" }
%"class.base::LinkNode.106" = type { %"class.base::internal::LinkNodeBase" }
%"class.std::__1::unique_ptr.108" = type { %"class.std::__1::__compressed_pair.109" }
%"class.std::__1::__compressed_pair.109" = type { %"struct.std::__1::__compressed_pair_elem.110" }
%"struct.std::__1::__compressed_pair_elem.110" = type { %"class.aura::WindowEventDispatcher"* }
%"class.aura::WindowEventDispatcher" = type opaque
%"class.std::__1::unique_ptr.114" = type { %"class.std::__1::__compressed_pair.115" }
%"class.std::__1::__compressed_pair.115" = type { %"struct.std::__1::__compressed_pair_elem.116" }
%"struct.std::__1::__compressed_pair_elem.116" = type { %"class.ui::Compositor"* }
%"class.ui::Compositor" = type opaque
%"class.ui::Cursor" = type { i32, %class.scoped_refptr.120, float, %"class.gfx::Point", %class.SkBitmap }
%class.scoped_refptr.120 = type { %"class.ui::PlatformCursor"* }
%"class.ui::PlatformCursor" = type <{ i32 (...)**, %"class.base::RefCounted", [4 x i8] }>
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%class.SkBitmap = type { %class.sk_sp, %class.SkPixmap, %class.sk_sp.122 }
%class.sk_sp = type { %class.SkPixelRef* }
%class.SkPixelRef = type opaque
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.121, i32, i32 }
%class.sk_sp.121 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.2" }
%struct.SkISize = type { i32, i32 }
%class.sk_sp.122 = type { %class.SkMipmap* }
%class.SkMipmap = type opaque
%"class.gfx::Point" = type { i32, i32 }
%"class.std::__1::unique_ptr.123" = type { %"class.std::__1::__compressed_pair.124" }
%"class.std::__1::__compressed_pair.124" = type { %"struct.std::__1::__compressed_pair_elem.125" }
%"struct.std::__1::__compressed_pair_elem.125" = type { %"class.ui::ViewProp"* }
%"class.ui::ViewProp" = type opaque
%"class.ui::InputMethod" = type opaque
%"class.base::WeakPtrFactory.129" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.ui::Event" = type { i32 (...)**, i32, %"class.base::TimeTicks", %"class.ui::LatencyInfo", i32, %"class.ui::Event"*, i8, i8, %"class.ui::EventTarget"*, i32, i32, i32, %"class.std::__1::unique_ptr.24" }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.ui::LatencyInfo" = type { %"class.base::flat_map", i64, i64, i8, i8, i8, i32, float, float, i64 }
%"class.base::flat_map" = type { %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector.17" }
%"class.std::__1::vector.17" = type { %"class.std::__1::__vector_base.18" }
%"class.std::__1::__vector_base.18" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.19" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"struct.std::__1::pair"* }
%"class.std::__1::unique_ptr.24" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"class.base::flat_map.27"* }
%"class.base::flat_map.27" = type opaque
%"class.gfx::Transform" = type { %class.SkMatrix44 }
%class.SkMatrix44 = type <{ [4 x [4 x float]], i8, [3 x i8] }>
%"class.ui::LocatedEvent" = type { %"class.ui::Event", %"class.gfx::PointF", %"class.gfx::PointF" }
%"class.gfx::PointF" = type { float, float }
%"class.ui::EventSink" = type { i32 (...)** }

@_ZN4aura13EventInjectorC1Ev = hidden unnamed_addr alias void (%"class.aura::EventInjector"*), void (%"class.aura::EventInjector"*)* @_ZN4aura13EventInjectorC2Ev
@_ZN4aura13EventInjectorD1Ev = hidden unnamed_addr alias void (%"class.aura::EventInjector"*), void (%"class.aura::EventInjector"*)* @_ZN4aura13EventInjectorD2Ev

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN4aura13EventInjectorC2Ev(%"class.aura::EventInjector"* nocapture) unnamed_addr #0 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN4aura13EventInjectorD2Ev(%"class.aura::EventInjector"* nocapture) unnamed_addr #0 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i24 @_ZN4aura13EventInjector6InjectEPNS_14WindowTreeHostEPN2ui5EventE(%"class.aura::EventInjector"* nocapture readnone, %"class.aura::WindowTreeHost"*, %"class.ui::Event"*) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.gfx::Transform", align 4
  %5 = alloca %"class.gfx::Transform", align 4
  %6 = getelementptr inbounds %"class.ui::Event", %"class.ui::Event"* %2, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  switch i32 %7, label %13 [
    i32 1, label %22
    i32 2, label %22
    i32 3, label %22
    i32 4, label %22
    i32 5, label %22
    i32 6, label %22
    i32 9, label %22
    i32 10, label %22
    i32 34, label %22
    i32 35, label %8
    i32 36, label %8
  ]

8:                                                ; preds = %3, %3
  %9 = getelementptr inbounds %"class.ui::Event", %"class.ui::Event"* %2, i64 0, i32 4
  %10 = load i32, i32* %9, align 8
  %11 = and i32 %10, 262144
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %22, label %16

13:                                               ; preds = %3
  %14 = add i32 %7, -11
  %15 = icmp ult i32 %14, 4
  br i1 %15, label %22, label %16

16:                                               ; preds = %13, %8
  switch i32 %7, label %37 [
    i32 16, label %22
    i32 17, label %22
    i32 18, label %22
    i32 19, label %22
    i32 23, label %22
    i32 21, label %22
    i32 20, label %22
    i32 22, label %22
    i32 24, label %22
    i32 25, label %22
    i32 26, label %22
    i32 27, label %22
    i32 28, label %22
    i32 29, label %22
    i32 30, label %22
    i32 31, label %22
    i32 32, label %22
    i32 33, label %22
    i32 36, label %17
    i32 35, label %17
  ]

17:                                               ; preds = %16, %16
  %18 = getelementptr inbounds %"class.ui::Event", %"class.ui::Event"* %2, i64 0, i32 4
  %19 = load i32, i32* %18, align 8
  %20 = and i32 %19, 262144
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %37, label %22

22:                                               ; preds = %17, %3, %3, %3, %3, %3, %3, %3, %3, %3, %16, %16, %16, %16, %16, %16, %16, %16, %16, %16, %16, %16, %16, %16, %16, %16, %16, %16, %8, %13
  %23 = tail call %"class.ui::LocatedEvent"* @_ZN2ui5Event14AsLocatedEventEv(%"class.ui::Event"* %2) #4
  %24 = bitcast %"class.gfx::Transform"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %24) #4
  %25 = bitcast %"class.aura::WindowTreeHost"* %1 to void (%"class.gfx::Transform"*, %"class.aura::WindowTreeHost"*)***
  %26 = load void (%"class.gfx::Transform"*, %"class.aura::WindowTreeHost"*)**, void (%"class.gfx::Transform"*, %"class.aura::WindowTreeHost"*)*** %25, align 8
  %27 = getelementptr inbounds void (%"class.gfx::Transform"*, %"class.aura::WindowTreeHost"*)*, void (%"class.gfx::Transform"*, %"class.aura::WindowTreeHost"*)** %26, i64 3
  %28 = load void (%"class.gfx::Transform"*, %"class.aura::WindowTreeHost"*)*, void (%"class.gfx::Transform"*, %"class.aura::WindowTreeHost"*)** %27, align 8
  call void %28(%"class.gfx::Transform"* nonnull sret %4, %"class.aura::WindowTreeHost"* %1) #4
  %29 = bitcast %"class.gfx::Transform"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %29) #4
  %30 = load void (%"class.gfx::Transform"*, %"class.aura::WindowTreeHost"*)**, void (%"class.gfx::Transform"*, %"class.aura::WindowTreeHost"*)*** %25, align 8
  %31 = getelementptr inbounds void (%"class.gfx::Transform"*, %"class.aura::WindowTreeHost"*)*, void (%"class.gfx::Transform"*, %"class.aura::WindowTreeHost"*)** %30, i64 6
  %32 = load void (%"class.gfx::Transform"*, %"class.aura::WindowTreeHost"*)*, void (%"class.gfx::Transform"*, %"class.aura::WindowTreeHost"*)** %31, align 8
  call void %32(%"class.gfx::Transform"* nonnull sret %5, %"class.aura::WindowTreeHost"* %1) #4
  %33 = bitcast %"class.ui::LocatedEvent"* %23 to void (%"class.ui::LocatedEvent"*, %"class.gfx::Transform"*, %"class.gfx::Transform"*)***
  %34 = load void (%"class.ui::LocatedEvent"*, %"class.gfx::Transform"*, %"class.gfx::Transform"*)**, void (%"class.ui::LocatedEvent"*, %"class.gfx::Transform"*, %"class.gfx::Transform"*)*** %33, align 8
  %35 = getelementptr inbounds void (%"class.ui::LocatedEvent"*, %"class.gfx::Transform"*, %"class.gfx::Transform"*)*, void (%"class.ui::LocatedEvent"*, %"class.gfx::Transform"*, %"class.gfx::Transform"*)** %34, i64 3
  %36 = load void (%"class.ui::LocatedEvent"*, %"class.gfx::Transform"*, %"class.gfx::Transform"*)*, void (%"class.ui::LocatedEvent"*, %"class.gfx::Transform"*, %"class.gfx::Transform"*)** %35, align 8
  call void %36(%"class.ui::LocatedEvent"* %23, %"class.gfx::Transform"* nonnull dereferenceable(68) %4, %"class.gfx::Transform"* nonnull dereferenceable(68) %5) #4
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %29) #4
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %24) #4
  br label %37

37:                                               ; preds = %17, %16, %22
  %38 = bitcast %"class.aura::WindowTreeHost"* %1 to %"class.ui::EventSink"* (%"class.aura::WindowTreeHost"*)***
  %39 = load %"class.ui::EventSink"* (%"class.aura::WindowTreeHost"*)**, %"class.ui::EventSink"* (%"class.aura::WindowTreeHost"*)*** %38, align 8
  %40 = getelementptr inbounds %"class.ui::EventSink"* (%"class.aura::WindowTreeHost"*)*, %"class.ui::EventSink"* (%"class.aura::WindowTreeHost"*)** %39, i64 10
  %41 = load %"class.ui::EventSink"* (%"class.aura::WindowTreeHost"*)*, %"class.ui::EventSink"* (%"class.aura::WindowTreeHost"*)** %40, align 8
  %42 = call %"class.ui::EventSink"* %41(%"class.aura::WindowTreeHost"* %1) #4
  %43 = bitcast %"class.ui::EventSink"* %42 to i24 (%"class.ui::EventSink"*, %"class.ui::Event"*)***
  %44 = load i24 (%"class.ui::EventSink"*, %"class.ui::Event"*)**, i24 (%"class.ui::EventSink"*, %"class.ui::Event"*)*** %43, align 8
  %45 = getelementptr inbounds i24 (%"class.ui::EventSink"*, %"class.ui::Event"*)*, i24 (%"class.ui::EventSink"*, %"class.ui::Event"*)** %44, i64 2
  %46 = load i24 (%"class.ui::EventSink"*, %"class.ui::Event"*)*, i24 (%"class.ui::EventSink"*, %"class.ui::Event"*)** %45, align 8
  %47 = call i24 %46(%"class.ui::EventSink"* %42, %"class.ui::Event"* %2) #4
  ret i24 %47
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare %"class.ui::LocatedEvent"* @_ZN2ui5Event14AsLocatedEventEv(%"class.ui::Event"*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
