; ModuleID = '../../third_party/blink/renderer/platform/wtf/text/string_to_number.cc'
source_filename = "../../third_party/blink/renderer/platform/wtf/text/string_to_number.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.double_conversion::StringToDoubleConverter" = type <{ i32, [4 x i8], double, double, i8*, i8*, i16, [6 x i8] }>

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN3WTF24IsCharacterAllowedInBaseILi10EEEbDs(i16 zeroext) local_unnamed_addr #0 {
  %2 = add i16 %0, -48
  %3 = icmp ult i16 %2, 10
  ret i1 %3
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN3WTF24IsCharacterAllowedInBaseILi16EEEbDs(i16 zeroext) local_unnamed_addr #0 {
  %2 = add i16 %0, -48
  %3 = icmp ult i16 %2, 10
  br i1 %3, label %8, label %4

4:                                                ; preds = %1
  %5 = or i16 %0, 32
  %6 = add i16 %5, -97
  %7 = icmp ult i16 %6, 6
  br label %8

8:                                                ; preds = %1, %4
  %9 = phi i1 [ %7, %4 ], [ true, %1 ]
  ret i1 %9
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3WTF16CharactersToUIntEPKhmNS_20NumberParsingOptionsEPNS_19NumberParsingResultE(i8* readonly, i64, i32, i32* nocapture) local_unnamed_addr #1 {
  %5 = tail call fastcc i32 @_ZN3WTFL14ToIntegralTypeIjhLi10EEET_PKT0_mNS_20NumberParsingOptionsEPNS_19NumberParsingResultE(i8* %0, i64 %1, i32 %2, i32* %3)
  ret i32 %5
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc i32 @_ZN3WTFL14ToIntegralTypeIjhLi10EEET_PKT0_mNS_20NumberParsingOptionsEPNS_19NumberParsingResultE(i8* readonly, i64, i32, i32* nocapture) unnamed_addr #2 {
  %5 = and i32 %2, 8
  %6 = icmp ne i32 %5, 0
  %7 = icmp eq i8* %0, null
  br i1 %7, label %144, label %8

8:                                                ; preds = %4
  %9 = and i32 %2, 4
  %10 = icmp ne i32 %9, 0
  br i1 %10, label %11, label %29

11:                                               ; preds = %8
  %12 = icmp eq i64 %1, 0
  br i1 %12, label %144, label %13

13:                                               ; preds = %11, %25
  %14 = phi i8* [ %27, %25 ], [ %0, %11 ]
  %15 = phi i64 [ %26, %25 ], [ %1, %11 ]
  %16 = load i8, i8* %14, align 1
  %17 = icmp sgt i8 %16, -1
  br i1 %17, label %18, label %21

18:                                               ; preds = %13
  %19 = icmp ult i8 %16, 33
  br i1 %19, label %20, label %29

20:                                               ; preds = %18
  switch i8 %16, label %29 [
    i8 32, label %25
    i8 13, label %25
    i8 12, label %25
    i8 11, label %25
    i8 10, label %25
    i8 9, label %25
  ]

21:                                               ; preds = %13
  %22 = zext i8 %16 to i32
  %23 = tail call i32 @u_charDirection_69(i32 %22) #6
  %24 = icmp eq i32 %23, 9
  br i1 %24, label %25, label %29

25:                                               ; preds = %20, %20, %20, %20, %20, %20, %21
  %26 = add i64 %15, -1
  %27 = getelementptr inbounds i8, i8* %14, i64 1
  %28 = icmp eq i64 %26, 0
  br i1 %28, label %144, label %13

29:                                               ; preds = %20, %18, %21, %8
  %30 = phi i64 [ %1, %8 ], [ %15, %21 ], [ %15, %18 ], [ %15, %20 ]
  %31 = phi i8* [ %0, %8 ], [ %14, %21 ], [ %14, %18 ], [ %14, %20 ]
  %32 = icmp ne i64 %30, 0
  %33 = and i1 %6, %32
  br i1 %33, label %34, label %37

34:                                               ; preds = %29
  %35 = load i8, i8* %31, align 1
  %36 = icmp eq i8 %35, 45
  br i1 %36, label %44, label %37

37:                                               ; preds = %34, %29
  br i1 %32, label %38, label %144

38:                                               ; preds = %37
  %39 = and i32 %2, 2
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %49, label %41

41:                                               ; preds = %38
  %42 = load i8, i8* %31, align 1
  %43 = icmp eq i8 %42, 43
  br i1 %43, label %44, label %49

44:                                               ; preds = %41, %34
  %45 = phi i1 [ true, %34 ], [ false, %41 ]
  %46 = getelementptr inbounds i8, i8* %31, i64 1
  %47 = add i64 %30, -1
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %144, label %49

49:                                               ; preds = %38, %41, %44
  %50 = phi i1 [ %45, %44 ], [ false, %41 ], [ false, %38 ]
  %51 = phi i8* [ %46, %44 ], [ %31, %41 ], [ %31, %38 ]
  %52 = phi i64 [ %47, %44 ], [ %30, %41 ], [ %30, %38 ]
  %53 = load i8, i8* %51, align 1
  %54 = zext i8 %53 to i16
  %55 = add nsw i16 %54, -48
  %56 = icmp ult i16 %55, 10
  br i1 %56, label %57, label %144

57:                                               ; preds = %49
  %58 = zext i8 %53 to i16
  %59 = add nsw i16 %58, -48
  %60 = icmp ult i16 %59, 10
  br i1 %60, label %61, label %112

61:                                               ; preds = %57, %107
  %62 = phi i64 [ %68, %107 ], [ %52, %57 ]
  %63 = phi i8* [ %105, %107 ], [ %51, %57 ]
  %64 = phi i32 [ %104, %107 ], [ 0, %57 ]
  %65 = phi i32 [ %93, %107 ], [ 1, %57 ]
  %66 = phi i8 [ %94, %107 ], [ 0, %57 ]
  %67 = phi i8 [ %108, %107 ], [ %53, %57 ]
  %68 = add i64 %62, -1
  %69 = add i8 %67, -48
  %70 = icmp ult i8 %69, 10
  %71 = zext i8 %67 to i32
  %72 = icmp ugt i8 %67, 96
  %73 = select i1 %72, i32 -87, i32 -55
  %74 = select i1 %70, i32 -48, i32 %73
  %75 = add nsw i32 %74, %71
  br i1 %50, label %76, label %86

76:                                               ; preds = %61
  br i1 %6, label %77, label %81

77:                                               ; preds = %76
  %78 = icmp eq i32 %75, 0
  %79 = select i1 %78, i32 %65, i32 1
  %80 = select i1 %78, i8 %66, i8 1
  br label %92

81:                                               ; preds = %76
  %82 = udiv i32 %75, 10
  %83 = icmp ult i32 %64, %82
  %84 = select i1 %83, i32 2, i32 %65
  %85 = select i1 %83, i8 1, i8 %66
  br label %92

86:                                               ; preds = %61
  %87 = xor i32 %75, -2
  %88 = udiv i32 %87, 10
  %89 = icmp ugt i32 %64, %88
  %90 = select i1 %89, i32 3, i32 %65
  %91 = select i1 %89, i8 1, i8 %66
  br label %92

92:                                               ; preds = %86, %81, %77
  %93 = phi i32 [ %79, %77 ], [ %84, %81 ], [ %90, %86 ]
  %94 = phi i8 [ %80, %77 ], [ %85, %81 ], [ %91, %86 ]
  %95 = and i8 %94, 1
  %96 = icmp eq i8 %95, 0
  br i1 %96, label %97, label %103

97:                                               ; preds = %92
  %98 = mul i32 %64, 10
  br i1 %50, label %99, label %101

99:                                               ; preds = %97
  %100 = sub i32 %98, %75
  br label %103

101:                                              ; preds = %97
  %102 = add i32 %75, %98
  br label %103

103:                                              ; preds = %92, %99, %101
  %104 = phi i32 [ %64, %92 ], [ %100, %99 ], [ %102, %101 ]
  %105 = getelementptr inbounds i8, i8* %63, i64 1
  %106 = icmp eq i64 %68, 0
  br i1 %106, label %112, label %107

107:                                              ; preds = %103
  %108 = load i8, i8* %105, align 1
  %109 = zext i8 %108 to i16
  %110 = add nsw i16 %109, -48
  %111 = icmp ult i16 %110, 10
  br i1 %111, label %61, label %112

112:                                              ; preds = %103, %107, %57
  %113 = phi i64 [ %52, %57 ], [ 0, %103 ], [ %68, %107 ]
  %114 = phi i8* [ %51, %57 ], [ %105, %107 ], [ %105, %103 ]
  %115 = phi i32 [ 0, %57 ], [ %104, %107 ], [ %104, %103 ]
  %116 = phi i32 [ 1, %57 ], [ %93, %107 ], [ %93, %103 ]
  %117 = phi i8 [ 0, %57 ], [ %94, %107 ], [ %94, %103 ]
  %118 = icmp eq i64 %113, 0
  br i1 %10, label %119, label %136

119:                                              ; preds = %112
  br i1 %118, label %140, label %120

120:                                              ; preds = %119, %132
  %121 = phi i8* [ %134, %132 ], [ %114, %119 ]
  %122 = phi i64 [ %133, %132 ], [ %113, %119 ]
  %123 = load i8, i8* %121, align 1
  %124 = icmp sgt i8 %123, -1
  br i1 %124, label %125, label %128

125:                                              ; preds = %120
  %126 = icmp ult i8 %123, 33
  br i1 %126, label %127, label %137

127:                                              ; preds = %125
  switch i8 %123, label %137 [
    i8 32, label %132
    i8 13, label %132
    i8 12, label %132
    i8 11, label %132
    i8 10, label %132
    i8 9, label %132
  ]

128:                                              ; preds = %120
  %129 = zext i8 %123 to i32
  %130 = tail call i32 @u_charDirection_69(i32 %129) #6
  %131 = icmp eq i32 %130, 9
  br i1 %131, label %132, label %137

132:                                              ; preds = %127, %127, %127, %127, %127, %127, %128
  %133 = add i64 %122, -1
  %134 = getelementptr inbounds i8, i8* %121, i64 1
  %135 = icmp eq i64 %133, 0
  br i1 %135, label %140, label %120

136:                                              ; preds = %112
  br i1 %118, label %140, label %137

137:                                              ; preds = %127, %125, %128, %136
  %138 = and i32 %2, 1
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %144, label %140

140:                                              ; preds = %132, %119, %137, %136
  %141 = and i8 %117, 1
  %142 = icmp eq i8 %141, 0
  br i1 %142, label %143, label %145

143:                                              ; preds = %140
  store i32 0, i32* %3, align 4
  br label %147

144:                                              ; preds = %25, %11, %137, %49, %44, %4, %37
  store i32 1, i32* %3, align 4
  br label %148

145:                                              ; preds = %140
  store i32 %116, i32* %3, align 4
  %146 = icmp eq i32 %116, 0
  br i1 %146, label %147, label %148

147:                                              ; preds = %143, %145
  br label %148

148:                                              ; preds = %144, %145, %147
  %149 = phi i32 [ %115, %147 ], [ 0, %145 ], [ 0, %144 ]
  ret i32 %149
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3WTF16CharactersToUIntEPKDsmNS_20NumberParsingOptionsEPNS_19NumberParsingResultE(i16* readonly, i64, i32, i32* nocapture) local_unnamed_addr #1 {
  %5 = tail call fastcc i32 @_ZN3WTFL14ToIntegralTypeIjDsLi10EEET_PKT0_mNS_20NumberParsingOptionsEPNS_19NumberParsingResultE(i16* %0, i64 %1, i32 %2, i32* %3)
  ret i32 %5
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc i32 @_ZN3WTFL14ToIntegralTypeIjDsLi10EEET_PKT0_mNS_20NumberParsingOptionsEPNS_19NumberParsingResultE(i16* readonly, i64, i32, i32* nocapture) unnamed_addr #2 {
  %5 = and i32 %2, 8
  %6 = icmp ne i32 %5, 0
  %7 = icmp eq i16* %0, null
  br i1 %7, label %138, label %8

8:                                                ; preds = %4
  %9 = and i32 %2, 4
  %10 = icmp ne i32 %9, 0
  br i1 %10, label %11, label %29

11:                                               ; preds = %8
  %12 = icmp eq i64 %1, 0
  br i1 %12, label %138, label %13

13:                                               ; preds = %11, %25
  %14 = phi i16* [ %27, %25 ], [ %0, %11 ]
  %15 = phi i64 [ %26, %25 ], [ %1, %11 ]
  %16 = load i16, i16* %14, align 2
  %17 = icmp ult i16 %16, 128
  br i1 %17, label %18, label %21

18:                                               ; preds = %13
  %19 = icmp ult i16 %16, 33
  br i1 %19, label %20, label %29

20:                                               ; preds = %18
  switch i16 %16, label %29 [
    i16 32, label %25
    i16 13, label %25
    i16 12, label %25
    i16 11, label %25
    i16 10, label %25
    i16 9, label %25
  ]

21:                                               ; preds = %13
  %22 = zext i16 %16 to i32
  %23 = tail call i32 @u_charDirection_69(i32 %22) #6
  %24 = icmp eq i32 %23, 9
  br i1 %24, label %25, label %29

25:                                               ; preds = %20, %20, %20, %20, %20, %20, %21
  %26 = add i64 %15, -1
  %27 = getelementptr inbounds i16, i16* %14, i64 1
  %28 = icmp eq i64 %26, 0
  br i1 %28, label %138, label %13

29:                                               ; preds = %20, %18, %21, %8
  %30 = phi i64 [ %1, %8 ], [ %15, %21 ], [ %15, %18 ], [ %15, %20 ]
  %31 = phi i16* [ %0, %8 ], [ %14, %21 ], [ %14, %18 ], [ %14, %20 ]
  %32 = icmp ne i64 %30, 0
  %33 = and i1 %6, %32
  br i1 %33, label %34, label %37

34:                                               ; preds = %29
  %35 = load i16, i16* %31, align 2
  %36 = icmp eq i16 %35, 45
  br i1 %36, label %44, label %37

37:                                               ; preds = %34, %29
  br i1 %32, label %38, label %138

38:                                               ; preds = %37
  %39 = and i32 %2, 2
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %49, label %41

41:                                               ; preds = %38
  %42 = load i16, i16* %31, align 2
  %43 = icmp eq i16 %42, 43
  br i1 %43, label %44, label %49

44:                                               ; preds = %41, %34
  %45 = phi i1 [ true, %34 ], [ false, %41 ]
  %46 = getelementptr inbounds i16, i16* %31, i64 1
  %47 = add i64 %30, -1
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %138, label %49

49:                                               ; preds = %38, %41, %44
  %50 = phi i1 [ %45, %44 ], [ false, %41 ], [ false, %38 ]
  %51 = phi i16* [ %46, %44 ], [ %31, %41 ], [ %31, %38 ]
  %52 = phi i64 [ %47, %44 ], [ %30, %41 ], [ %30, %38 ]
  %53 = load i16, i16* %51, align 2
  %54 = add i16 %53, -48
  %55 = icmp ult i16 %54, 10
  br i1 %55, label %56, label %138

56:                                               ; preds = %49
  %57 = add i16 %53, -48
  %58 = icmp ult i16 %57, 10
  br i1 %58, label %59, label %106

59:                                               ; preds = %56, %102
  %60 = phi i64 [ %66, %102 ], [ %52, %56 ]
  %61 = phi i16* [ %100, %102 ], [ %51, %56 ]
  %62 = phi i32 [ %99, %102 ], [ 0, %56 ]
  %63 = phi i32 [ %88, %102 ], [ 1, %56 ]
  %64 = phi i8 [ %89, %102 ], [ 0, %56 ]
  %65 = phi i16 [ %103, %102 ], [ %53, %56 ]
  %66 = add i64 %60, -1
  %67 = zext i16 %65 to i32
  %68 = add nsw i32 %67, -48
  br i1 %50, label %69, label %81

69:                                               ; preds = %59
  br i1 %6, label %70, label %74

70:                                               ; preds = %69
  %71 = icmp eq i32 %68, 0
  %72 = select i1 %71, i32 %63, i32 1
  %73 = select i1 %71, i8 %64, i8 1
  br label %87

74:                                               ; preds = %69
  %75 = trunc i32 %68 to i8
  %76 = udiv i8 %75, 10
  %77 = zext i8 %76 to i32
  %78 = icmp ult i32 %62, %77
  %79 = select i1 %78, i32 2, i32 %63
  %80 = select i1 %78, i8 1, i8 %64
  br label %87

81:                                               ; preds = %59
  %82 = xor i32 %68, -2
  %83 = udiv i32 %82, 10
  %84 = icmp ugt i32 %62, %83
  %85 = select i1 %84, i32 3, i32 %63
  %86 = select i1 %84, i8 1, i8 %64
  br label %87

87:                                               ; preds = %81, %74, %70
  %88 = phi i32 [ %72, %70 ], [ %79, %74 ], [ %85, %81 ]
  %89 = phi i8 [ %73, %70 ], [ %80, %74 ], [ %86, %81 ]
  %90 = and i8 %89, 1
  %91 = icmp eq i8 %90, 0
  br i1 %91, label %92, label %98

92:                                               ; preds = %87
  %93 = mul i32 %62, 10
  br i1 %50, label %94, label %96

94:                                               ; preds = %92
  %95 = sub i32 %93, %68
  br label %98

96:                                               ; preds = %92
  %97 = add i32 %68, %93
  br label %98

98:                                               ; preds = %87, %94, %96
  %99 = phi i32 [ %62, %87 ], [ %95, %94 ], [ %97, %96 ]
  %100 = getelementptr inbounds i16, i16* %61, i64 1
  %101 = icmp eq i64 %66, 0
  br i1 %101, label %106, label %102

102:                                              ; preds = %98
  %103 = load i16, i16* %100, align 2
  %104 = add i16 %103, -48
  %105 = icmp ult i16 %104, 10
  br i1 %105, label %59, label %106

106:                                              ; preds = %98, %102, %56
  %107 = phi i64 [ %52, %56 ], [ 0, %98 ], [ %66, %102 ]
  %108 = phi i16* [ %51, %56 ], [ %100, %102 ], [ %100, %98 ]
  %109 = phi i32 [ 0, %56 ], [ %99, %102 ], [ %99, %98 ]
  %110 = phi i32 [ 1, %56 ], [ %88, %102 ], [ %88, %98 ]
  %111 = phi i8 [ 0, %56 ], [ %89, %102 ], [ %89, %98 ]
  %112 = icmp eq i64 %107, 0
  br i1 %10, label %113, label %130

113:                                              ; preds = %106
  br i1 %112, label %134, label %114

114:                                              ; preds = %113, %126
  %115 = phi i16* [ %128, %126 ], [ %108, %113 ]
  %116 = phi i64 [ %127, %126 ], [ %107, %113 ]
  %117 = load i16, i16* %115, align 2
  %118 = icmp ult i16 %117, 128
  br i1 %118, label %119, label %122

119:                                              ; preds = %114
  %120 = icmp ult i16 %117, 33
  br i1 %120, label %121, label %131

121:                                              ; preds = %119
  switch i16 %117, label %131 [
    i16 32, label %126
    i16 13, label %126
    i16 12, label %126
    i16 11, label %126
    i16 10, label %126
    i16 9, label %126
  ]

122:                                              ; preds = %114
  %123 = zext i16 %117 to i32
  %124 = tail call i32 @u_charDirection_69(i32 %123) #6
  %125 = icmp eq i32 %124, 9
  br i1 %125, label %126, label %131

126:                                              ; preds = %121, %121, %121, %121, %121, %121, %122
  %127 = add i64 %116, -1
  %128 = getelementptr inbounds i16, i16* %115, i64 1
  %129 = icmp eq i64 %127, 0
  br i1 %129, label %134, label %114

130:                                              ; preds = %106
  br i1 %112, label %134, label %131

131:                                              ; preds = %121, %119, %122, %130
  %132 = and i32 %2, 1
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %138, label %134

134:                                              ; preds = %126, %113, %131, %130
  %135 = and i8 %111, 1
  %136 = icmp eq i8 %135, 0
  br i1 %136, label %137, label %139

137:                                              ; preds = %134
  store i32 0, i32* %3, align 4
  br label %141

138:                                              ; preds = %25, %11, %131, %49, %44, %4, %37
  store i32 1, i32* %3, align 4
  br label %142

139:                                              ; preds = %134
  store i32 %110, i32* %3, align 4
  %140 = icmp eq i32 %110, 0
  br i1 %140, label %141, label %142

141:                                              ; preds = %137, %139
  br label %142

142:                                              ; preds = %138, %139, %141
  %143 = phi i32 [ %109, %141 ], [ 0, %139 ], [ 0, %138 ]
  ret i32 %143
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3WTF19HexCharactersToUIntEPKhmNS_20NumberParsingOptionsEPb(i8* readonly, i64, i32, i8*) local_unnamed_addr #1 {
  %5 = and i32 %2, 8
  %6 = icmp ne i32 %5, 0
  %7 = icmp eq i8* %0, null
  br i1 %7, label %153, label %8

8:                                                ; preds = %4
  %9 = and i32 %2, 4
  %10 = icmp ne i32 %9, 0
  br i1 %10, label %11, label %29

11:                                               ; preds = %8
  %12 = icmp eq i64 %1, 0
  br i1 %12, label %153, label %13

13:                                               ; preds = %11, %25
  %14 = phi i8* [ %27, %25 ], [ %0, %11 ]
  %15 = phi i64 [ %26, %25 ], [ %1, %11 ]
  %16 = load i8, i8* %14, align 1
  %17 = icmp sgt i8 %16, -1
  br i1 %17, label %18, label %21

18:                                               ; preds = %13
  %19 = icmp ult i8 %16, 33
  br i1 %19, label %20, label %29

20:                                               ; preds = %18
  switch i8 %16, label %29 [
    i8 32, label %25
    i8 13, label %25
    i8 12, label %25
    i8 11, label %25
    i8 10, label %25
    i8 9, label %25
  ]

21:                                               ; preds = %13
  %22 = zext i8 %16 to i32
  %23 = tail call i32 @u_charDirection_69(i32 %22) #6
  %24 = icmp eq i32 %23, 9
  br i1 %24, label %25, label %29

25:                                               ; preds = %21, %20, %20, %20, %20, %20, %20
  %26 = add i64 %15, -1
  %27 = getelementptr inbounds i8, i8* %14, i64 1
  %28 = icmp eq i64 %26, 0
  br i1 %28, label %153, label %13

29:                                               ; preds = %21, %20, %18, %8
  %30 = phi i64 [ %1, %8 ], [ %15, %18 ], [ %15, %20 ], [ %15, %21 ]
  %31 = phi i8* [ %0, %8 ], [ %14, %18 ], [ %14, %20 ], [ %14, %21 ]
  %32 = icmp ne i64 %30, 0
  %33 = and i1 %6, %32
  br i1 %33, label %34, label %37

34:                                               ; preds = %29
  %35 = load i8, i8* %31, align 1
  %36 = icmp eq i8 %35, 45
  br i1 %36, label %44, label %37

37:                                               ; preds = %34, %29
  br i1 %32, label %38, label %153

38:                                               ; preds = %37
  %39 = and i32 %2, 2
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %49, label %41

41:                                               ; preds = %38
  %42 = load i8, i8* %31, align 1
  %43 = icmp eq i8 %42, 43
  br i1 %43, label %44, label %49

44:                                               ; preds = %41, %34
  %45 = phi i1 [ true, %34 ], [ false, %41 ]
  %46 = getelementptr inbounds i8, i8* %31, i64 1
  %47 = add i64 %30, -1
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %153, label %49

49:                                               ; preds = %44, %41, %38
  %50 = phi i1 [ %45, %44 ], [ false, %41 ], [ false, %38 ]
  %51 = phi i8* [ %46, %44 ], [ %31, %41 ], [ %31, %38 ]
  %52 = phi i64 [ %47, %44 ], [ %30, %41 ], [ %30, %38 ]
  %53 = load i8, i8* %51, align 1
  %54 = zext i8 %53 to i16
  %55 = add nsw i16 %54, -48
  %56 = icmp ult i16 %55, 10
  br i1 %56, label %61, label %57

57:                                               ; preds = %49
  %58 = or i16 %54, 32
  %59 = add nsw i16 %58, -97
  %60 = icmp ult i16 %59, 6
  br i1 %60, label %61, label %153

61:                                               ; preds = %57, %49
  br label %62

62:                                               ; preds = %61, %116
  %63 = phi i8 [ %117, %116 ], [ %53, %61 ]
  %64 = phi i8 [ %103, %116 ], [ 0, %61 ]
  %65 = phi i32 [ %102, %116 ], [ 1, %61 ]
  %66 = phi i32 [ %113, %116 ], [ 0, %61 ]
  %67 = phi i8* [ %114, %116 ], [ %51, %61 ]
  %68 = phi i64 [ %77, %116 ], [ %52, %61 ]
  %69 = zext i8 %63 to i16
  %70 = add nsw i16 %69, -48
  %71 = icmp ult i16 %70, 10
  br i1 %71, label %76, label %72

72:                                               ; preds = %62
  %73 = or i16 %69, 32
  %74 = add nsw i16 %73, -97
  %75 = icmp ult i16 %74, 6
  br i1 %75, label %76, label %118

76:                                               ; preds = %72, %62
  %77 = add i64 %68, -1
  %78 = add i8 %63, -48
  %79 = icmp ult i8 %78, 10
  %80 = zext i8 %63 to i32
  %81 = icmp ugt i8 %63, 96
  %82 = select i1 %81, i32 -87, i32 -55
  %83 = select i1 %79, i32 -48, i32 %82
  %84 = add nsw i32 %83, %80
  br i1 %50, label %85, label %95

85:                                               ; preds = %76
  br i1 %6, label %86, label %90

86:                                               ; preds = %85
  %87 = icmp eq i32 %84, 0
  %88 = select i1 %87, i32 %65, i32 1
  %89 = select i1 %87, i8 %64, i8 1
  br label %101

90:                                               ; preds = %85
  %91 = lshr i32 %84, 4
  %92 = icmp ult i32 %66, %91
  %93 = select i1 %92, i32 2, i32 %65
  %94 = select i1 %92, i8 1, i8 %64
  br label %101

95:                                               ; preds = %76
  %96 = lshr i32 %84, 4
  %97 = xor i32 %96, 268435455
  %98 = icmp ugt i32 %66, %97
  %99 = select i1 %98, i32 3, i32 %65
  %100 = select i1 %98, i8 1, i8 %64
  br label %101

101:                                              ; preds = %95, %90, %86
  %102 = phi i32 [ %88, %86 ], [ %93, %90 ], [ %99, %95 ]
  %103 = phi i8 [ %89, %86 ], [ %94, %90 ], [ %100, %95 ]
  %104 = and i8 %103, 1
  %105 = icmp eq i8 %104, 0
  br i1 %105, label %106, label %112

106:                                              ; preds = %101
  %107 = shl i32 %66, 4
  br i1 %50, label %108, label %110

108:                                              ; preds = %106
  %109 = sub i32 %107, %84
  br label %112

110:                                              ; preds = %106
  %111 = add i32 %84, %107
  br label %112

112:                                              ; preds = %110, %108, %101
  %113 = phi i32 [ %66, %101 ], [ %109, %108 ], [ %111, %110 ]
  %114 = getelementptr inbounds i8, i8* %67, i64 1
  %115 = icmp eq i64 %77, 0
  br i1 %115, label %118, label %116

116:                                              ; preds = %112
  %117 = load i8, i8* %114, align 1
  br label %62

118:                                              ; preds = %112, %72
  %119 = phi i64 [ %68, %72 ], [ 0, %112 ]
  %120 = phi i8* [ %67, %72 ], [ %114, %112 ]
  %121 = phi i32 [ %66, %72 ], [ %113, %112 ]
  %122 = phi i32 [ %65, %72 ], [ %102, %112 ]
  %123 = phi i8 [ %64, %72 ], [ %103, %112 ]
  %124 = icmp eq i64 %119, 0
  br i1 %10, label %125, label %142

125:                                              ; preds = %118
  br i1 %124, label %146, label %126

126:                                              ; preds = %125, %138
  %127 = phi i8* [ %140, %138 ], [ %120, %125 ]
  %128 = phi i64 [ %139, %138 ], [ %119, %125 ]
  %129 = load i8, i8* %127, align 1
  %130 = icmp sgt i8 %129, -1
  br i1 %130, label %131, label %134

131:                                              ; preds = %126
  %132 = icmp ult i8 %129, 33
  br i1 %132, label %133, label %143

133:                                              ; preds = %131
  switch i8 %129, label %143 [
    i8 32, label %138
    i8 13, label %138
    i8 12, label %138
    i8 11, label %138
    i8 10, label %138
    i8 9, label %138
  ]

134:                                              ; preds = %126
  %135 = zext i8 %129 to i32
  %136 = tail call i32 @u_charDirection_69(i32 %135) #6
  %137 = icmp eq i32 %136, 9
  br i1 %137, label %138, label %143

138:                                              ; preds = %134, %133, %133, %133, %133, %133, %133
  %139 = add i64 %128, -1
  %140 = getelementptr inbounds i8, i8* %127, i64 1
  %141 = icmp eq i64 %139, 0
  br i1 %141, label %146, label %126

142:                                              ; preds = %118
  br i1 %124, label %146, label %143

143:                                              ; preds = %134, %133, %131, %142
  %144 = and i32 %2, 1
  %145 = icmp eq i32 %144, 0
  br i1 %145, label %153, label %146

146:                                              ; preds = %138, %143, %142, %125
  %147 = and i8 %123, 1
  %148 = icmp eq i8 %147, 0
  %149 = icmp eq i32 %122, 0
  %150 = or i1 %149, %148
  %151 = select i1 %150, i32 0, i32 %122
  %152 = select i1 %150, i32 %121, i32 0
  br label %153

153:                                              ; preds = %25, %146, %143, %57, %44, %37, %11, %4
  %154 = phi i32 [ 1, %143 ], [ 1, %57 ], [ 1, %44 ], [ 1, %37 ], [ 1, %11 ], [ 1, %4 ], [ %151, %146 ], [ 1, %25 ]
  %155 = phi i32 [ 0, %143 ], [ 0, %57 ], [ 0, %44 ], [ 0, %37 ], [ 0, %11 ], [ 0, %4 ], [ %152, %146 ], [ 0, %25 ]
  %156 = icmp eq i8* %3, null
  br i1 %156, label %160, label %157

157:                                              ; preds = %153
  %158 = icmp eq i32 %154, 0
  %159 = zext i1 %158 to i8
  store i8 %159, i8* %3, align 1
  br label %160

160:                                              ; preds = %153, %157
  ret i32 %155
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3WTF19HexCharactersToUIntEPKDsmNS_20NumberParsingOptionsEPb(i16* readonly, i64, i32, i8*) local_unnamed_addr #1 {
  %5 = and i32 %2, 8
  %6 = icmp ne i32 %5, 0
  %7 = icmp eq i16* %0, null
  br i1 %7, label %157, label %8

8:                                                ; preds = %4
  %9 = and i32 %2, 4
  %10 = icmp ne i32 %9, 0
  br i1 %10, label %11, label %29

11:                                               ; preds = %8
  %12 = icmp eq i64 %1, 0
  br i1 %12, label %157, label %13

13:                                               ; preds = %11, %25
  %14 = phi i16* [ %27, %25 ], [ %0, %11 ]
  %15 = phi i64 [ %26, %25 ], [ %1, %11 ]
  %16 = load i16, i16* %14, align 2
  %17 = icmp ult i16 %16, 128
  br i1 %17, label %18, label %21

18:                                               ; preds = %13
  %19 = icmp ult i16 %16, 33
  br i1 %19, label %20, label %29

20:                                               ; preds = %18
  switch i16 %16, label %29 [
    i16 32, label %25
    i16 13, label %25
    i16 12, label %25
    i16 11, label %25
    i16 10, label %25
    i16 9, label %25
  ]

21:                                               ; preds = %13
  %22 = zext i16 %16 to i32
  %23 = tail call i32 @u_charDirection_69(i32 %22) #6
  %24 = icmp eq i32 %23, 9
  br i1 %24, label %25, label %29

25:                                               ; preds = %21, %20, %20, %20, %20, %20, %20
  %26 = add i64 %15, -1
  %27 = getelementptr inbounds i16, i16* %14, i64 1
  %28 = icmp eq i64 %26, 0
  br i1 %28, label %157, label %13

29:                                               ; preds = %21, %20, %18, %8
  %30 = phi i64 [ %1, %8 ], [ %15, %18 ], [ %15, %20 ], [ %15, %21 ]
  %31 = phi i16* [ %0, %8 ], [ %14, %18 ], [ %14, %20 ], [ %14, %21 ]
  %32 = icmp ne i64 %30, 0
  %33 = and i1 %6, %32
  br i1 %33, label %34, label %37

34:                                               ; preds = %29
  %35 = load i16, i16* %31, align 2
  %36 = icmp eq i16 %35, 45
  br i1 %36, label %44, label %37

37:                                               ; preds = %34, %29
  br i1 %32, label %38, label %157

38:                                               ; preds = %37
  %39 = and i32 %2, 2
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %49, label %41

41:                                               ; preds = %38
  %42 = load i16, i16* %31, align 2
  %43 = icmp eq i16 %42, 43
  br i1 %43, label %44, label %49

44:                                               ; preds = %41, %34
  %45 = phi i1 [ true, %34 ], [ false, %41 ]
  %46 = getelementptr inbounds i16, i16* %31, i64 1
  %47 = add i64 %30, -1
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %157, label %49

49:                                               ; preds = %44, %41, %38
  %50 = phi i1 [ %45, %44 ], [ false, %41 ], [ false, %38 ]
  %51 = phi i16* [ %46, %44 ], [ %31, %41 ], [ %31, %38 ]
  %52 = phi i64 [ %47, %44 ], [ %30, %41 ], [ %30, %38 ]
  %53 = load i16, i16* %51, align 2
  %54 = add i16 %53, -48
  %55 = icmp ult i16 %54, 10
  br i1 %55, label %60, label %56

56:                                               ; preds = %49
  %57 = or i16 %53, 32
  %58 = add i16 %57, -97
  %59 = icmp ult i16 %58, 6
  br i1 %59, label %60, label %157

60:                                               ; preds = %56, %49
  br label %61

61:                                               ; preds = %60, %120
  %62 = phi i16 [ %121, %120 ], [ %53, %60 ]
  %63 = phi i8 [ %107, %120 ], [ 0, %60 ]
  %64 = phi i32 [ %106, %120 ], [ 1, %60 ]
  %65 = phi i32 [ %117, %120 ], [ 0, %60 ]
  %66 = phi i16* [ %118, %120 ], [ %51, %60 ]
  %67 = phi i64 [ %87, %120 ], [ %52, %60 ]
  %68 = add i16 %62, -48
  %69 = icmp ult i16 %68, 10
  br i1 %69, label %74, label %70

70:                                               ; preds = %61
  %71 = or i16 %62, 32
  %72 = add i16 %71, -97
  %73 = icmp ult i16 %72, 6
  br i1 %73, label %78, label %122

74:                                               ; preds = %61
  %75 = add i64 %67, -1
  %76 = zext i16 %62 to i32
  %77 = add nsw i32 %76, -48
  br label %86

78:                                               ; preds = %70
  %79 = add i64 %67, -1
  %80 = zext i16 %62 to i32
  %81 = icmp ugt i16 %62, 96
  br i1 %81, label %82, label %84

82:                                               ; preds = %78
  %83 = add nsw i32 %80, -87
  br label %86

84:                                               ; preds = %78
  %85 = add nsw i32 %80, -55
  br label %86

86:                                               ; preds = %84, %82, %74
  %87 = phi i64 [ %75, %74 ], [ %79, %82 ], [ %79, %84 ]
  %88 = phi i32 [ %77, %74 ], [ %83, %82 ], [ %85, %84 ]
  br i1 %50, label %89, label %99

89:                                               ; preds = %86
  br i1 %6, label %90, label %94

90:                                               ; preds = %89
  %91 = icmp eq i32 %88, 0
  %92 = select i1 %91, i32 %64, i32 1
  %93 = select i1 %91, i8 %63, i8 1
  br label %105

94:                                               ; preds = %89
  %95 = lshr i32 %88, 4
  %96 = icmp ult i32 %65, %95
  %97 = select i1 %96, i32 2, i32 %64
  %98 = select i1 %96, i8 1, i8 %63
  br label %105

99:                                               ; preds = %86
  %100 = lshr i32 %88, 4
  %101 = xor i32 %100, 268435455
  %102 = icmp ugt i32 %65, %101
  %103 = select i1 %102, i32 3, i32 %64
  %104 = select i1 %102, i8 1, i8 %63
  br label %105

105:                                              ; preds = %99, %94, %90
  %106 = phi i32 [ %92, %90 ], [ %97, %94 ], [ %103, %99 ]
  %107 = phi i8 [ %93, %90 ], [ %98, %94 ], [ %104, %99 ]
  %108 = and i8 %107, 1
  %109 = icmp eq i8 %108, 0
  br i1 %109, label %110, label %116

110:                                              ; preds = %105
  %111 = shl i32 %65, 4
  br i1 %50, label %112, label %114

112:                                              ; preds = %110
  %113 = sub i32 %111, %88
  br label %116

114:                                              ; preds = %110
  %115 = add i32 %88, %111
  br label %116

116:                                              ; preds = %114, %112, %105
  %117 = phi i32 [ %65, %105 ], [ %113, %112 ], [ %115, %114 ]
  %118 = getelementptr inbounds i16, i16* %66, i64 1
  %119 = icmp eq i64 %87, 0
  br i1 %119, label %122, label %120

120:                                              ; preds = %116
  %121 = load i16, i16* %118, align 2
  br label %61

122:                                              ; preds = %116, %70
  %123 = phi i64 [ %67, %70 ], [ 0, %116 ]
  %124 = phi i16* [ %66, %70 ], [ %118, %116 ]
  %125 = phi i32 [ %65, %70 ], [ %117, %116 ]
  %126 = phi i32 [ %64, %70 ], [ %106, %116 ]
  %127 = phi i8 [ %63, %70 ], [ %107, %116 ]
  %128 = icmp eq i64 %123, 0
  br i1 %10, label %129, label %146

129:                                              ; preds = %122
  br i1 %128, label %150, label %130

130:                                              ; preds = %129, %142
  %131 = phi i16* [ %144, %142 ], [ %124, %129 ]
  %132 = phi i64 [ %143, %142 ], [ %123, %129 ]
  %133 = load i16, i16* %131, align 2
  %134 = icmp ult i16 %133, 128
  br i1 %134, label %135, label %138

135:                                              ; preds = %130
  %136 = icmp ult i16 %133, 33
  br i1 %136, label %137, label %147

137:                                              ; preds = %135
  switch i16 %133, label %147 [
    i16 32, label %142
    i16 13, label %142
    i16 12, label %142
    i16 11, label %142
    i16 10, label %142
    i16 9, label %142
  ]

138:                                              ; preds = %130
  %139 = zext i16 %133 to i32
  %140 = tail call i32 @u_charDirection_69(i32 %139) #6
  %141 = icmp eq i32 %140, 9
  br i1 %141, label %142, label %147

142:                                              ; preds = %138, %137, %137, %137, %137, %137, %137
  %143 = add i64 %132, -1
  %144 = getelementptr inbounds i16, i16* %131, i64 1
  %145 = icmp eq i64 %143, 0
  br i1 %145, label %150, label %130

146:                                              ; preds = %122
  br i1 %128, label %150, label %147

147:                                              ; preds = %138, %137, %135, %146
  %148 = and i32 %2, 1
  %149 = icmp eq i32 %148, 0
  br i1 %149, label %157, label %150

150:                                              ; preds = %142, %147, %146, %129
  %151 = and i8 %127, 1
  %152 = icmp eq i8 %151, 0
  %153 = icmp eq i32 %126, 0
  %154 = or i1 %153, %152
  %155 = select i1 %154, i32 0, i32 %126
  %156 = select i1 %154, i32 %125, i32 0
  br label %157

157:                                              ; preds = %25, %150, %147, %56, %44, %37, %11, %4
  %158 = phi i32 [ 1, %147 ], [ 1, %56 ], [ 1, %44 ], [ 1, %37 ], [ 1, %11 ], [ 1, %4 ], [ %155, %150 ], [ 1, %25 ]
  %159 = phi i32 [ 0, %147 ], [ 0, %56 ], [ 0, %44 ], [ 0, %37 ], [ 0, %11 ], [ 0, %4 ], [ %156, %150 ], [ 0, %25 ]
  %160 = icmp eq i8* %3, null
  br i1 %160, label %164, label %161

161:                                              ; preds = %157
  %162 = icmp eq i32 %158, 0
  %163 = zext i1 %162 to i8
  store i8 %163, i8* %3, align 1
  br label %164

164:                                              ; preds = %157, %161
  ret i32 %159
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN3WTF21HexCharactersToUInt64EPKhmNS_20NumberParsingOptionsEPb(i8* readonly, i64, i32, i8*) local_unnamed_addr #1 {
  %5 = and i32 %2, 8
  %6 = icmp ne i32 %5, 0
  %7 = icmp eq i8* %0, null
  br i1 %7, label %154, label %8

8:                                                ; preds = %4
  %9 = and i32 %2, 4
  %10 = icmp ne i32 %9, 0
  br i1 %10, label %11, label %29

11:                                               ; preds = %8
  %12 = icmp eq i64 %1, 0
  br i1 %12, label %154, label %13

13:                                               ; preds = %11, %25
  %14 = phi i8* [ %27, %25 ], [ %0, %11 ]
  %15 = phi i64 [ %26, %25 ], [ %1, %11 ]
  %16 = load i8, i8* %14, align 1
  %17 = icmp sgt i8 %16, -1
  br i1 %17, label %18, label %21

18:                                               ; preds = %13
  %19 = icmp ult i8 %16, 33
  br i1 %19, label %20, label %29

20:                                               ; preds = %18
  switch i8 %16, label %29 [
    i8 32, label %25
    i8 13, label %25
    i8 12, label %25
    i8 11, label %25
    i8 10, label %25
    i8 9, label %25
  ]

21:                                               ; preds = %13
  %22 = zext i8 %16 to i32
  %23 = tail call i32 @u_charDirection_69(i32 %22) #6
  %24 = icmp eq i32 %23, 9
  br i1 %24, label %25, label %29

25:                                               ; preds = %21, %20, %20, %20, %20, %20, %20
  %26 = add i64 %15, -1
  %27 = getelementptr inbounds i8, i8* %14, i64 1
  %28 = icmp eq i64 %26, 0
  br i1 %28, label %154, label %13

29:                                               ; preds = %21, %20, %18, %8
  %30 = phi i64 [ %1, %8 ], [ %15, %18 ], [ %15, %20 ], [ %15, %21 ]
  %31 = phi i8* [ %0, %8 ], [ %14, %18 ], [ %14, %20 ], [ %14, %21 ]
  %32 = icmp ne i64 %30, 0
  %33 = and i1 %6, %32
  br i1 %33, label %34, label %37

34:                                               ; preds = %29
  %35 = load i8, i8* %31, align 1
  %36 = icmp eq i8 %35, 45
  br i1 %36, label %44, label %37

37:                                               ; preds = %34, %29
  br i1 %32, label %38, label %154

38:                                               ; preds = %37
  %39 = and i32 %2, 2
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %49, label %41

41:                                               ; preds = %38
  %42 = load i8, i8* %31, align 1
  %43 = icmp eq i8 %42, 43
  br i1 %43, label %44, label %49

44:                                               ; preds = %41, %34
  %45 = phi i1 [ true, %34 ], [ false, %41 ]
  %46 = getelementptr inbounds i8, i8* %31, i64 1
  %47 = add i64 %30, -1
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %154, label %49

49:                                               ; preds = %44, %41, %38
  %50 = phi i1 [ %45, %44 ], [ false, %41 ], [ false, %38 ]
  %51 = phi i8* [ %46, %44 ], [ %31, %41 ], [ %31, %38 ]
  %52 = phi i64 [ %47, %44 ], [ %30, %41 ], [ %30, %38 ]
  %53 = load i8, i8* %51, align 1
  %54 = zext i8 %53 to i16
  %55 = add nsw i16 %54, -48
  %56 = icmp ult i16 %55, 10
  br i1 %56, label %61, label %57

57:                                               ; preds = %49
  %58 = or i16 %54, 32
  %59 = add nsw i16 %58, -97
  %60 = icmp ult i16 %59, 6
  br i1 %60, label %61, label %154

61:                                               ; preds = %57, %49
  br label %62

62:                                               ; preds = %61, %117
  %63 = phi i8 [ %118, %117 ], [ %53, %61 ]
  %64 = phi i8 [ %104, %117 ], [ 0, %61 ]
  %65 = phi i32 [ %103, %117 ], [ 1, %61 ]
  %66 = phi i64 [ %114, %117 ], [ 0, %61 ]
  %67 = phi i8* [ %115, %117 ], [ %51, %61 ]
  %68 = phi i64 [ %77, %117 ], [ %52, %61 ]
  %69 = zext i8 %63 to i16
  %70 = add nsw i16 %69, -48
  %71 = icmp ult i16 %70, 10
  br i1 %71, label %76, label %72

72:                                               ; preds = %62
  %73 = or i16 %69, 32
  %74 = add nsw i16 %73, -97
  %75 = icmp ult i16 %74, 6
  br i1 %75, label %76, label %119

76:                                               ; preds = %72, %62
  %77 = add i64 %68, -1
  %78 = add i8 %63, -48
  %79 = icmp ult i8 %78, 10
  %80 = zext i8 %63 to i32
  %81 = icmp ugt i8 %63, 96
  %82 = select i1 %81, i32 -87, i32 -55
  %83 = select i1 %79, i32 -48, i32 %82
  %84 = add nsw i32 %83, %80
  %85 = sext i32 %84 to i64
  br i1 %50, label %86, label %96

86:                                               ; preds = %76
  br i1 %6, label %87, label %91

87:                                               ; preds = %86
  %88 = icmp eq i32 %84, 0
  %89 = select i1 %88, i32 %65, i32 1
  %90 = select i1 %88, i8 %64, i8 1
  br label %102

91:                                               ; preds = %86
  %92 = lshr i64 %85, 4
  %93 = icmp ult i64 %66, %92
  %94 = select i1 %93, i32 2, i32 %65
  %95 = select i1 %93, i8 1, i8 %64
  br label %102

96:                                               ; preds = %76
  %97 = lshr i64 %85, 4
  %98 = xor i64 %97, 1152921504606846975
  %99 = icmp ugt i64 %66, %98
  %100 = select i1 %99, i32 3, i32 %65
  %101 = select i1 %99, i8 1, i8 %64
  br label %102

102:                                              ; preds = %96, %91, %87
  %103 = phi i32 [ %89, %87 ], [ %94, %91 ], [ %100, %96 ]
  %104 = phi i8 [ %90, %87 ], [ %95, %91 ], [ %101, %96 ]
  %105 = and i8 %104, 1
  %106 = icmp eq i8 %105, 0
  br i1 %106, label %107, label %113

107:                                              ; preds = %102
  %108 = shl i64 %66, 4
  br i1 %50, label %109, label %111

109:                                              ; preds = %107
  %110 = sub i64 %108, %85
  br label %113

111:                                              ; preds = %107
  %112 = add i64 %108, %85
  br label %113

113:                                              ; preds = %111, %109, %102
  %114 = phi i64 [ %66, %102 ], [ %110, %109 ], [ %112, %111 ]
  %115 = getelementptr inbounds i8, i8* %67, i64 1
  %116 = icmp eq i64 %77, 0
  br i1 %116, label %119, label %117

117:                                              ; preds = %113
  %118 = load i8, i8* %115, align 1
  br label %62

119:                                              ; preds = %113, %72
  %120 = phi i64 [ %68, %72 ], [ 0, %113 ]
  %121 = phi i8* [ %67, %72 ], [ %115, %113 ]
  %122 = phi i64 [ %66, %72 ], [ %114, %113 ]
  %123 = phi i32 [ %65, %72 ], [ %103, %113 ]
  %124 = phi i8 [ %64, %72 ], [ %104, %113 ]
  %125 = icmp eq i64 %120, 0
  br i1 %10, label %126, label %143

126:                                              ; preds = %119
  br i1 %125, label %147, label %127

127:                                              ; preds = %126, %139
  %128 = phi i8* [ %141, %139 ], [ %121, %126 ]
  %129 = phi i64 [ %140, %139 ], [ %120, %126 ]
  %130 = load i8, i8* %128, align 1
  %131 = icmp sgt i8 %130, -1
  br i1 %131, label %132, label %135

132:                                              ; preds = %127
  %133 = icmp ult i8 %130, 33
  br i1 %133, label %134, label %144

134:                                              ; preds = %132
  switch i8 %130, label %144 [
    i8 32, label %139
    i8 13, label %139
    i8 12, label %139
    i8 11, label %139
    i8 10, label %139
    i8 9, label %139
  ]

135:                                              ; preds = %127
  %136 = zext i8 %130 to i32
  %137 = tail call i32 @u_charDirection_69(i32 %136) #6
  %138 = icmp eq i32 %137, 9
  br i1 %138, label %139, label %144

139:                                              ; preds = %135, %134, %134, %134, %134, %134, %134
  %140 = add i64 %129, -1
  %141 = getelementptr inbounds i8, i8* %128, i64 1
  %142 = icmp eq i64 %140, 0
  br i1 %142, label %147, label %127

143:                                              ; preds = %119
  br i1 %125, label %147, label %144

144:                                              ; preds = %135, %134, %132, %143
  %145 = and i32 %2, 1
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %154, label %147

147:                                              ; preds = %139, %144, %143, %126
  %148 = and i8 %124, 1
  %149 = icmp eq i8 %148, 0
  %150 = icmp eq i32 %123, 0
  %151 = or i1 %150, %149
  %152 = select i1 %151, i32 0, i32 %123
  %153 = select i1 %151, i64 %122, i64 0
  br label %154

154:                                              ; preds = %25, %147, %144, %57, %44, %37, %11, %4
  %155 = phi i32 [ 1, %144 ], [ 1, %57 ], [ 1, %44 ], [ 1, %37 ], [ 1, %11 ], [ 1, %4 ], [ %152, %147 ], [ 1, %25 ]
  %156 = phi i64 [ 0, %144 ], [ 0, %57 ], [ 0, %44 ], [ 0, %37 ], [ 0, %11 ], [ 0, %4 ], [ %153, %147 ], [ 0, %25 ]
  %157 = icmp eq i8* %3, null
  br i1 %157, label %161, label %158

158:                                              ; preds = %154
  %159 = icmp eq i32 %155, 0
  %160 = zext i1 %159 to i8
  store i8 %160, i8* %3, align 1
  br label %161

161:                                              ; preds = %154, %158
  ret i64 %156
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN3WTF21HexCharactersToUInt64EPKDsmNS_20NumberParsingOptionsEPb(i16* readonly, i64, i32, i8*) local_unnamed_addr #1 {
  %5 = and i32 %2, 8
  %6 = icmp ne i32 %5, 0
  %7 = icmp eq i16* %0, null
  br i1 %7, label %158, label %8

8:                                                ; preds = %4
  %9 = and i32 %2, 4
  %10 = icmp ne i32 %9, 0
  br i1 %10, label %11, label %29

11:                                               ; preds = %8
  %12 = icmp eq i64 %1, 0
  br i1 %12, label %158, label %13

13:                                               ; preds = %11, %25
  %14 = phi i16* [ %27, %25 ], [ %0, %11 ]
  %15 = phi i64 [ %26, %25 ], [ %1, %11 ]
  %16 = load i16, i16* %14, align 2
  %17 = icmp ult i16 %16, 128
  br i1 %17, label %18, label %21

18:                                               ; preds = %13
  %19 = icmp ult i16 %16, 33
  br i1 %19, label %20, label %29

20:                                               ; preds = %18
  switch i16 %16, label %29 [
    i16 32, label %25
    i16 13, label %25
    i16 12, label %25
    i16 11, label %25
    i16 10, label %25
    i16 9, label %25
  ]

21:                                               ; preds = %13
  %22 = zext i16 %16 to i32
  %23 = tail call i32 @u_charDirection_69(i32 %22) #6
  %24 = icmp eq i32 %23, 9
  br i1 %24, label %25, label %29

25:                                               ; preds = %21, %20, %20, %20, %20, %20, %20
  %26 = add i64 %15, -1
  %27 = getelementptr inbounds i16, i16* %14, i64 1
  %28 = icmp eq i64 %26, 0
  br i1 %28, label %158, label %13

29:                                               ; preds = %21, %20, %18, %8
  %30 = phi i64 [ %1, %8 ], [ %15, %18 ], [ %15, %20 ], [ %15, %21 ]
  %31 = phi i16* [ %0, %8 ], [ %14, %18 ], [ %14, %20 ], [ %14, %21 ]
  %32 = icmp ne i64 %30, 0
  %33 = and i1 %6, %32
  br i1 %33, label %34, label %37

34:                                               ; preds = %29
  %35 = load i16, i16* %31, align 2
  %36 = icmp eq i16 %35, 45
  br i1 %36, label %44, label %37

37:                                               ; preds = %34, %29
  br i1 %32, label %38, label %158

38:                                               ; preds = %37
  %39 = and i32 %2, 2
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %49, label %41

41:                                               ; preds = %38
  %42 = load i16, i16* %31, align 2
  %43 = icmp eq i16 %42, 43
  br i1 %43, label %44, label %49

44:                                               ; preds = %41, %34
  %45 = phi i1 [ true, %34 ], [ false, %41 ]
  %46 = getelementptr inbounds i16, i16* %31, i64 1
  %47 = add i64 %30, -1
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %158, label %49

49:                                               ; preds = %44, %41, %38
  %50 = phi i1 [ %45, %44 ], [ false, %41 ], [ false, %38 ]
  %51 = phi i16* [ %46, %44 ], [ %31, %41 ], [ %31, %38 ]
  %52 = phi i64 [ %47, %44 ], [ %30, %41 ], [ %30, %38 ]
  %53 = load i16, i16* %51, align 2
  %54 = add i16 %53, -48
  %55 = icmp ult i16 %54, 10
  br i1 %55, label %60, label %56

56:                                               ; preds = %49
  %57 = or i16 %53, 32
  %58 = add i16 %57, -97
  %59 = icmp ult i16 %58, 6
  br i1 %59, label %60, label %158

60:                                               ; preds = %56, %49
  br label %61

61:                                               ; preds = %60, %121
  %62 = phi i16 [ %122, %121 ], [ %53, %60 ]
  %63 = phi i8 [ %108, %121 ], [ 0, %60 ]
  %64 = phi i32 [ %107, %121 ], [ 1, %60 ]
  %65 = phi i64 [ %118, %121 ], [ 0, %60 ]
  %66 = phi i16* [ %119, %121 ], [ %51, %60 ]
  %67 = phi i64 [ %87, %121 ], [ %52, %60 ]
  %68 = add i16 %62, -48
  %69 = icmp ult i16 %68, 10
  br i1 %69, label %74, label %70

70:                                               ; preds = %61
  %71 = or i16 %62, 32
  %72 = add i16 %71, -97
  %73 = icmp ult i16 %72, 6
  br i1 %73, label %78, label %123

74:                                               ; preds = %61
  %75 = add i64 %67, -1
  %76 = zext i16 %62 to i32
  %77 = add nsw i32 %76, -48
  br label %86

78:                                               ; preds = %70
  %79 = add i64 %67, -1
  %80 = zext i16 %62 to i32
  %81 = icmp ugt i16 %62, 96
  br i1 %81, label %82, label %84

82:                                               ; preds = %78
  %83 = add nsw i32 %80, -87
  br label %86

84:                                               ; preds = %78
  %85 = add nsw i32 %80, -55
  br label %86

86:                                               ; preds = %84, %82, %74
  %87 = phi i64 [ %75, %74 ], [ %79, %82 ], [ %79, %84 ]
  %88 = phi i32 [ %77, %74 ], [ %83, %82 ], [ %85, %84 ]
  %89 = sext i32 %88 to i64
  br i1 %50, label %90, label %100

90:                                               ; preds = %86
  br i1 %6, label %91, label %95

91:                                               ; preds = %90
  %92 = icmp eq i32 %88, 0
  %93 = select i1 %92, i32 %64, i32 1
  %94 = select i1 %92, i8 %63, i8 1
  br label %106

95:                                               ; preds = %90
  %96 = lshr i64 %89, 4
  %97 = icmp ult i64 %65, %96
  %98 = select i1 %97, i32 2, i32 %64
  %99 = select i1 %97, i8 1, i8 %63
  br label %106

100:                                              ; preds = %86
  %101 = lshr i64 %89, 4
  %102 = xor i64 %101, 1152921504606846975
  %103 = icmp ugt i64 %65, %102
  %104 = select i1 %103, i32 3, i32 %64
  %105 = select i1 %103, i8 1, i8 %63
  br label %106

106:                                              ; preds = %100, %95, %91
  %107 = phi i32 [ %93, %91 ], [ %98, %95 ], [ %104, %100 ]
  %108 = phi i8 [ %94, %91 ], [ %99, %95 ], [ %105, %100 ]
  %109 = and i8 %108, 1
  %110 = icmp eq i8 %109, 0
  br i1 %110, label %111, label %117

111:                                              ; preds = %106
  %112 = shl i64 %65, 4
  br i1 %50, label %113, label %115

113:                                              ; preds = %111
  %114 = sub i64 %112, %89
  br label %117

115:                                              ; preds = %111
  %116 = add i64 %112, %89
  br label %117

117:                                              ; preds = %115, %113, %106
  %118 = phi i64 [ %65, %106 ], [ %114, %113 ], [ %116, %115 ]
  %119 = getelementptr inbounds i16, i16* %66, i64 1
  %120 = icmp eq i64 %87, 0
  br i1 %120, label %123, label %121

121:                                              ; preds = %117
  %122 = load i16, i16* %119, align 2
  br label %61

123:                                              ; preds = %117, %70
  %124 = phi i64 [ %67, %70 ], [ 0, %117 ]
  %125 = phi i16* [ %66, %70 ], [ %119, %117 ]
  %126 = phi i64 [ %65, %70 ], [ %118, %117 ]
  %127 = phi i32 [ %64, %70 ], [ %107, %117 ]
  %128 = phi i8 [ %63, %70 ], [ %108, %117 ]
  %129 = icmp eq i64 %124, 0
  br i1 %10, label %130, label %147

130:                                              ; preds = %123
  br i1 %129, label %151, label %131

131:                                              ; preds = %130, %143
  %132 = phi i16* [ %145, %143 ], [ %125, %130 ]
  %133 = phi i64 [ %144, %143 ], [ %124, %130 ]
  %134 = load i16, i16* %132, align 2
  %135 = icmp ult i16 %134, 128
  br i1 %135, label %136, label %139

136:                                              ; preds = %131
  %137 = icmp ult i16 %134, 33
  br i1 %137, label %138, label %148

138:                                              ; preds = %136
  switch i16 %134, label %148 [
    i16 32, label %143
    i16 13, label %143
    i16 12, label %143
    i16 11, label %143
    i16 10, label %143
    i16 9, label %143
  ]

139:                                              ; preds = %131
  %140 = zext i16 %134 to i32
  %141 = tail call i32 @u_charDirection_69(i32 %140) #6
  %142 = icmp eq i32 %141, 9
  br i1 %142, label %143, label %148

143:                                              ; preds = %139, %138, %138, %138, %138, %138, %138
  %144 = add i64 %133, -1
  %145 = getelementptr inbounds i16, i16* %132, i64 1
  %146 = icmp eq i64 %144, 0
  br i1 %146, label %151, label %131

147:                                              ; preds = %123
  br i1 %129, label %151, label %148

148:                                              ; preds = %139, %138, %136, %147
  %149 = and i32 %2, 1
  %150 = icmp eq i32 %149, 0
  br i1 %150, label %158, label %151

151:                                              ; preds = %143, %148, %147, %130
  %152 = and i8 %128, 1
  %153 = icmp eq i8 %152, 0
  %154 = icmp eq i32 %127, 0
  %155 = or i1 %154, %153
  %156 = select i1 %155, i32 0, i32 %127
  %157 = select i1 %155, i64 %126, i64 0
  br label %158

158:                                              ; preds = %25, %151, %148, %56, %44, %37, %11, %4
  %159 = phi i32 [ 1, %148 ], [ 1, %56 ], [ 1, %44 ], [ 1, %37 ], [ 1, %11 ], [ 1, %4 ], [ %156, %151 ], [ 1, %25 ]
  %160 = phi i64 [ 0, %148 ], [ 0, %56 ], [ 0, %44 ], [ 0, %37 ], [ 0, %11 ], [ 0, %4 ], [ %157, %151 ], [ 0, %25 ]
  %161 = icmp eq i8* %3, null
  br i1 %161, label %165, label %162

162:                                              ; preds = %158
  %163 = icmp eq i32 %159, 0
  %164 = zext i1 %163 to i8
  store i8 %164, i8* %3, align 1
  br label %165

165:                                              ; preds = %158, %162
  ret i64 %160
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3WTF15CharactersToIntEPKhmNS_20NumberParsingOptionsEPb(i8* readonly, i64, i32, i8*) local_unnamed_addr #1 {
  %5 = icmp eq i8* %0, null
  br i1 %5, label %131, label %6

6:                                                ; preds = %4
  %7 = and i32 %2, 4
  %8 = icmp ne i32 %7, 0
  %9 = icmp eq i64 %1, 0
  br i1 %8, label %10, label %27

10:                                               ; preds = %6
  br i1 %9, label %131, label %11

11:                                               ; preds = %10, %23
  %12 = phi i8* [ %25, %23 ], [ %0, %10 ]
  %13 = phi i64 [ %24, %23 ], [ %1, %10 ]
  %14 = load i8, i8* %12, align 1
  %15 = icmp sgt i8 %14, -1
  br i1 %15, label %16, label %19

16:                                               ; preds = %11
  %17 = icmp ult i8 %14, 33
  br i1 %17, label %18, label %32

18:                                               ; preds = %16
  switch i8 %14, label %28 [
    i8 32, label %23
    i8 13, label %23
    i8 12, label %23
    i8 11, label %23
    i8 10, label %23
    i8 9, label %23
  ]

19:                                               ; preds = %11
  %20 = zext i8 %14 to i32
  %21 = tail call i32 @u_charDirection_69(i32 %20) #6
  %22 = icmp eq i32 %21, 9
  br i1 %22, label %23, label %28

23:                                               ; preds = %19, %18, %18, %18, %18, %18, %18
  %24 = add i64 %13, -1
  %25 = getelementptr inbounds i8, i8* %12, i64 1
  %26 = icmp eq i64 %24, 0
  br i1 %26, label %131, label %11

27:                                               ; preds = %6
  br i1 %9, label %131, label %28

28:                                               ; preds = %19, %18, %27
  %29 = phi i8* [ %0, %27 ], [ %12, %18 ], [ %12, %19 ]
  %30 = phi i64 [ %1, %27 ], [ %13, %18 ], [ %13, %19 ]
  %31 = load i8, i8* %29, align 1
  br label %32

32:                                               ; preds = %16, %28
  %33 = phi i8 [ %31, %28 ], [ %14, %16 ]
  %34 = phi i8* [ %29, %28 ], [ %12, %16 ]
  %35 = phi i64 [ %30, %28 ], [ %13, %16 ]
  %36 = icmp eq i8 %33, 45
  br i1 %36, label %42, label %37

37:                                               ; preds = %32
  %38 = and i32 %2, 2
  %39 = icmp ne i32 %38, 0
  %40 = icmp eq i8 %33, 43
  %41 = and i1 %39, %40
  br i1 %41, label %42, label %49

42:                                               ; preds = %37, %32
  %43 = phi i1 [ true, %32 ], [ false, %37 ]
  %44 = getelementptr inbounds i8, i8* %34, i64 1
  %45 = add i64 %35, -1
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %131, label %47

47:                                               ; preds = %42
  %48 = load i8, i8* %44, align 1
  br label %49

49:                                               ; preds = %47, %37
  %50 = phi i8 [ %48, %47 ], [ %33, %37 ]
  %51 = phi i8* [ %44, %47 ], [ %34, %37 ]
  %52 = phi i1 [ %43, %47 ], [ false, %37 ]
  %53 = phi i64 [ %45, %47 ], [ %35, %37 ]
  %54 = zext i8 %50 to i16
  %55 = add nsw i16 %54, -48
  %56 = icmp ult i16 %55, 10
  br i1 %56, label %57, label %131

57:                                               ; preds = %49, %98
  %58 = phi i64 [ %64, %98 ], [ %53, %49 ]
  %59 = phi i32 [ %95, %98 ], [ 0, %49 ]
  %60 = phi i32 [ %84, %98 ], [ 1, %49 ]
  %61 = phi i8 [ %85, %98 ], [ 0, %49 ]
  %62 = phi i8* [ %96, %98 ], [ %51, %49 ]
  %63 = phi i8 [ %99, %98 ], [ %50, %49 ]
  %64 = add i64 %58, -1
  %65 = add i8 %63, -48
  %66 = icmp ult i8 %65, 10
  %67 = zext i8 %63 to i32
  %68 = icmp ugt i8 %63, 96
  %69 = select i1 %68, i32 -87, i32 -55
  %70 = select i1 %66, i32 -48, i32 %69
  %71 = add nsw i32 %70, %67
  br i1 %52, label %72, label %77

72:                                               ; preds = %57
  %73 = or i32 %71, -2147483648
  %74 = sdiv i32 %73, 10
  %75 = icmp slt i32 %59, %74
  %76 = select i1 %75, i32 2, i32 %60
  br label %82

77:                                               ; preds = %57
  %78 = sub nsw i32 2147483647, %71
  %79 = sdiv i32 %78, 10
  %80 = icmp sgt i32 %59, %79
  %81 = select i1 %80, i32 3, i32 %60
  br label %82

82:                                               ; preds = %77, %72
  %83 = phi i1 [ %80, %77 ], [ %75, %72 ]
  %84 = phi i32 [ %81, %77 ], [ %76, %72 ]
  %85 = select i1 %83, i8 1, i8 %61
  %86 = and i8 %85, 1
  %87 = icmp eq i8 %86, 0
  br i1 %87, label %88, label %94

88:                                               ; preds = %82
  %89 = mul nsw i32 %59, 10
  br i1 %52, label %90, label %92

90:                                               ; preds = %88
  %91 = sub nsw i32 %89, %71
  br label %94

92:                                               ; preds = %88
  %93 = add nsw i32 %71, %89
  br label %94

94:                                               ; preds = %92, %90, %82
  %95 = phi i32 [ %59, %82 ], [ %91, %90 ], [ %93, %92 ]
  %96 = getelementptr inbounds i8, i8* %62, i64 1
  %97 = icmp eq i64 %64, 0
  br i1 %97, label %103, label %98

98:                                               ; preds = %94
  %99 = load i8, i8* %96, align 1
  %100 = zext i8 %99 to i16
  %101 = add nsw i16 %100, -48
  %102 = icmp ult i16 %101, 10
  br i1 %102, label %57, label %103

103:                                              ; preds = %98, %94
  %104 = phi i1 [ false, %98 ], [ true, %94 ]
  br i1 %8, label %105, label %122

105:                                              ; preds = %103
  br i1 %104, label %126, label %106

106:                                              ; preds = %105, %118
  %107 = phi i8* [ %120, %118 ], [ %96, %105 ]
  %108 = phi i64 [ %119, %118 ], [ %64, %105 ]
  %109 = load i8, i8* %107, align 1
  %110 = icmp sgt i8 %109, -1
  br i1 %110, label %111, label %114

111:                                              ; preds = %106
  %112 = icmp ult i8 %109, 33
  br i1 %112, label %113, label %123

113:                                              ; preds = %111
  switch i8 %109, label %123 [
    i8 32, label %118
    i8 13, label %118
    i8 12, label %118
    i8 11, label %118
    i8 10, label %118
    i8 9, label %118
  ]

114:                                              ; preds = %106
  %115 = zext i8 %109 to i32
  %116 = tail call i32 @u_charDirection_69(i32 %115) #6
  %117 = icmp eq i32 %116, 9
  br i1 %117, label %118, label %123

118:                                              ; preds = %114, %113, %113, %113, %113, %113, %113
  %119 = add i64 %108, -1
  %120 = getelementptr inbounds i8, i8* %107, i64 1
  %121 = icmp eq i64 %119, 0
  br i1 %121, label %126, label %106

122:                                              ; preds = %103
  br i1 %104, label %126, label %123

123:                                              ; preds = %114, %113, %111, %122
  %124 = and i32 %2, 1
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %131, label %126

126:                                              ; preds = %118, %123, %122, %105
  %127 = icmp eq i32 %84, 0
  %128 = or i1 %127, %87
  %129 = select i1 %128, i32 0, i32 %84
  %130 = select i1 %128, i32 %95, i32 0
  br label %131

131:                                              ; preds = %23, %126, %123, %49, %42, %27, %10, %4
  %132 = phi i32 [ 1, %123 ], [ 1, %49 ], [ 1, %42 ], [ 1, %27 ], [ 1, %10 ], [ 1, %4 ], [ %129, %126 ], [ 1, %23 ]
  %133 = phi i32 [ 0, %123 ], [ 0, %49 ], [ 0, %42 ], [ 0, %27 ], [ 0, %10 ], [ 0, %4 ], [ %130, %126 ], [ 0, %23 ]
  %134 = icmp eq i8* %3, null
  br i1 %134, label %138, label %135

135:                                              ; preds = %131
  %136 = icmp eq i32 %132, 0
  %137 = zext i1 %136 to i8
  store i8 %137, i8* %3, align 1
  br label %138

138:                                              ; preds = %131, %135
  ret i32 %133
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3WTF15CharactersToIntEPKDsmNS_20NumberParsingOptionsEPb(i16* readonly, i64, i32, i8*) local_unnamed_addr #1 {
  %5 = icmp eq i16* %0, null
  br i1 %5, label %124, label %6

6:                                                ; preds = %4
  %7 = and i32 %2, 4
  %8 = icmp ne i32 %7, 0
  %9 = icmp eq i64 %1, 0
  br i1 %8, label %10, label %27

10:                                               ; preds = %6
  br i1 %9, label %124, label %11

11:                                               ; preds = %10, %23
  %12 = phi i16* [ %25, %23 ], [ %0, %10 ]
  %13 = phi i64 [ %24, %23 ], [ %1, %10 ]
  %14 = load i16, i16* %12, align 2
  %15 = icmp ult i16 %14, 128
  br i1 %15, label %16, label %19

16:                                               ; preds = %11
  %17 = icmp ult i16 %14, 33
  br i1 %17, label %18, label %32

18:                                               ; preds = %16
  switch i16 %14, label %28 [
    i16 32, label %23
    i16 13, label %23
    i16 12, label %23
    i16 11, label %23
    i16 10, label %23
    i16 9, label %23
  ]

19:                                               ; preds = %11
  %20 = zext i16 %14 to i32
  %21 = tail call i32 @u_charDirection_69(i32 %20) #6
  %22 = icmp eq i32 %21, 9
  br i1 %22, label %23, label %28

23:                                               ; preds = %19, %18, %18, %18, %18, %18, %18
  %24 = add i64 %13, -1
  %25 = getelementptr inbounds i16, i16* %12, i64 1
  %26 = icmp eq i64 %24, 0
  br i1 %26, label %124, label %11

27:                                               ; preds = %6
  br i1 %9, label %124, label %28

28:                                               ; preds = %19, %18, %27
  %29 = phi i16* [ %0, %27 ], [ %12, %18 ], [ %12, %19 ]
  %30 = phi i64 [ %1, %27 ], [ %13, %18 ], [ %13, %19 ]
  %31 = load i16, i16* %29, align 2
  br label %32

32:                                               ; preds = %16, %28
  %33 = phi i16 [ %31, %28 ], [ %14, %16 ]
  %34 = phi i16* [ %29, %28 ], [ %12, %16 ]
  %35 = phi i64 [ %30, %28 ], [ %13, %16 ]
  %36 = icmp eq i16 %33, 45
  br i1 %36, label %42, label %37

37:                                               ; preds = %32
  %38 = and i32 %2, 2
  %39 = icmp ne i32 %38, 0
  %40 = icmp eq i16 %33, 43
  %41 = and i1 %39, %40
  br i1 %41, label %42, label %49

42:                                               ; preds = %37, %32
  %43 = phi i1 [ true, %32 ], [ false, %37 ]
  %44 = getelementptr inbounds i16, i16* %34, i64 1
  %45 = add i64 %35, -1
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %124, label %47

47:                                               ; preds = %42
  %48 = load i16, i16* %44, align 2
  br label %49

49:                                               ; preds = %47, %37
  %50 = phi i16 [ %48, %47 ], [ %33, %37 ]
  %51 = phi i16* [ %44, %47 ], [ %34, %37 ]
  %52 = phi i1 [ %43, %47 ], [ false, %37 ]
  %53 = phi i64 [ %45, %47 ], [ %35, %37 ]
  %54 = add i16 %50, -48
  %55 = icmp ult i16 %54, 10
  br i1 %55, label %56, label %124

56:                                               ; preds = %49, %92
  %57 = phi i64 [ %63, %92 ], [ %53, %49 ]
  %58 = phi i32 [ %89, %92 ], [ 0, %49 ]
  %59 = phi i32 [ %78, %92 ], [ 1, %49 ]
  %60 = phi i8 [ %79, %92 ], [ 0, %49 ]
  %61 = phi i16* [ %90, %92 ], [ %51, %49 ]
  %62 = phi i16 [ %93, %92 ], [ %50, %49 ]
  %63 = add i64 %57, -1
  %64 = zext i16 %62 to i32
  %65 = add nsw i32 %64, -48
  br i1 %52, label %66, label %71

66:                                               ; preds = %56
  %67 = or i32 %65, -2147483648
  %68 = sdiv i32 %67, 10
  %69 = icmp slt i32 %58, %68
  %70 = select i1 %69, i32 2, i32 %59
  br label %76

71:                                               ; preds = %56
  %72 = sub nuw i32 -2147483601, %64
  %73 = sdiv i32 %72, 10
  %74 = icmp sgt i32 %58, %73
  %75 = select i1 %74, i32 3, i32 %59
  br label %76

76:                                               ; preds = %71, %66
  %77 = phi i1 [ %74, %71 ], [ %69, %66 ]
  %78 = phi i32 [ %75, %71 ], [ %70, %66 ]
  %79 = select i1 %77, i8 1, i8 %60
  %80 = and i8 %79, 1
  %81 = icmp eq i8 %80, 0
  br i1 %81, label %82, label %88

82:                                               ; preds = %76
  %83 = mul nsw i32 %58, 10
  br i1 %52, label %84, label %86

84:                                               ; preds = %82
  %85 = sub nsw i32 %83, %65
  br label %88

86:                                               ; preds = %82
  %87 = add nsw i32 %65, %83
  br label %88

88:                                               ; preds = %86, %84, %76
  %89 = phi i32 [ %58, %76 ], [ %85, %84 ], [ %87, %86 ]
  %90 = getelementptr inbounds i16, i16* %61, i64 1
  %91 = icmp eq i64 %63, 0
  br i1 %91, label %96, label %92

92:                                               ; preds = %88
  %93 = load i16, i16* %90, align 2
  %94 = add i16 %93, -48
  %95 = icmp ult i16 %94, 10
  br i1 %95, label %56, label %96

96:                                               ; preds = %92, %88
  %97 = phi i1 [ false, %92 ], [ true, %88 ]
  br i1 %8, label %98, label %115

98:                                               ; preds = %96
  br i1 %97, label %119, label %99

99:                                               ; preds = %98, %111
  %100 = phi i16* [ %113, %111 ], [ %90, %98 ]
  %101 = phi i64 [ %112, %111 ], [ %63, %98 ]
  %102 = load i16, i16* %100, align 2
  %103 = icmp ult i16 %102, 128
  br i1 %103, label %104, label %107

104:                                              ; preds = %99
  %105 = icmp ult i16 %102, 33
  br i1 %105, label %106, label %116

106:                                              ; preds = %104
  switch i16 %102, label %116 [
    i16 32, label %111
    i16 13, label %111
    i16 12, label %111
    i16 11, label %111
    i16 10, label %111
    i16 9, label %111
  ]

107:                                              ; preds = %99
  %108 = zext i16 %102 to i32
  %109 = tail call i32 @u_charDirection_69(i32 %108) #6
  %110 = icmp eq i32 %109, 9
  br i1 %110, label %111, label %116

111:                                              ; preds = %107, %106, %106, %106, %106, %106, %106
  %112 = add i64 %101, -1
  %113 = getelementptr inbounds i16, i16* %100, i64 1
  %114 = icmp eq i64 %112, 0
  br i1 %114, label %119, label %99

115:                                              ; preds = %96
  br i1 %97, label %119, label %116

116:                                              ; preds = %107, %106, %104, %115
  %117 = and i32 %2, 1
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %124, label %119

119:                                              ; preds = %111, %116, %115, %98
  %120 = icmp eq i32 %78, 0
  %121 = or i1 %120, %81
  %122 = select i1 %121, i32 0, i32 %78
  %123 = select i1 %121, i32 %89, i32 0
  br label %124

124:                                              ; preds = %23, %119, %116, %49, %42, %27, %10, %4
  %125 = phi i32 [ 1, %116 ], [ 1, %49 ], [ 1, %42 ], [ 1, %27 ], [ 1, %10 ], [ 1, %4 ], [ %122, %119 ], [ 1, %23 ]
  %126 = phi i32 [ 0, %116 ], [ 0, %49 ], [ 0, %42 ], [ 0, %27 ], [ 0, %10 ], [ 0, %4 ], [ %123, %119 ], [ 0, %23 ]
  %127 = icmp eq i8* %3, null
  br i1 %127, label %131, label %128

128:                                              ; preds = %124
  %129 = icmp eq i32 %125, 0
  %130 = zext i1 %129 to i8
  store i8 %130, i8* %3, align 1
  br label %131

131:                                              ; preds = %124, %128
  ret i32 %126
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3WTF16CharactersToUIntEPKhmNS_20NumberParsingOptionsEPb(i8* readonly, i64, i32, i8*) local_unnamed_addr #1 {
  %5 = alloca i32, align 4
  %6 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #6
  store i32 -1431655766, i32* %5, align 4
  %7 = call fastcc i32 @_ZN3WTFL14ToIntegralTypeIjhLi10EEET_PKT0_mNS_20NumberParsingOptionsEPNS_19NumberParsingResultE(i8* %0, i64 %1, i32 %2, i32* nonnull %5) #6
  %8 = icmp eq i8* %3, null
  br i1 %8, label %13, label %9

9:                                                ; preds = %4
  %10 = load i32, i32* %5, align 4
  %11 = icmp eq i32 %10, 0
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %3, align 1
  br label %13

13:                                               ; preds = %4, %9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #6
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3WTF16CharactersToUIntEPKDsmNS_20NumberParsingOptionsEPb(i16* readonly, i64, i32, i8*) local_unnamed_addr #1 {
  %5 = alloca i32, align 4
  %6 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #6
  store i32 -1431655766, i32* %5, align 4
  %7 = call fastcc i32 @_ZN3WTFL14ToIntegralTypeIjDsLi10EEET_PKT0_mNS_20NumberParsingOptionsEPNS_19NumberParsingResultE(i16* %0, i64 %1, i32 %2, i32* nonnull %5) #6
  %8 = icmp eq i8* %3, null
  br i1 %8, label %13, label %9

9:                                                ; preds = %4
  %10 = load i32, i32* %5, align 4
  %11 = icmp eq i32 %10, 0
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %3, align 1
  br label %13

13:                                               ; preds = %4, %9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #6
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN3WTF17CharactersToInt64EPKhmNS_20NumberParsingOptionsEPb(i8* readonly, i64, i32, i8*) local_unnamed_addr #1 {
  %5 = icmp eq i8* %0, null
  br i1 %5, label %131, label %6

6:                                                ; preds = %4
  %7 = and i32 %2, 4
  %8 = icmp ne i32 %7, 0
  %9 = icmp eq i64 %1, 0
  br i1 %8, label %10, label %27

10:                                               ; preds = %6
  br i1 %9, label %131, label %11

11:                                               ; preds = %10, %23
  %12 = phi i8* [ %25, %23 ], [ %0, %10 ]
  %13 = phi i64 [ %24, %23 ], [ %1, %10 ]
  %14 = load i8, i8* %12, align 1
  %15 = icmp sgt i8 %14, -1
  br i1 %15, label %16, label %19

16:                                               ; preds = %11
  %17 = icmp ult i8 %14, 33
  br i1 %17, label %18, label %32

18:                                               ; preds = %16
  switch i8 %14, label %28 [
    i8 32, label %23
    i8 13, label %23
    i8 12, label %23
    i8 11, label %23
    i8 10, label %23
    i8 9, label %23
  ]

19:                                               ; preds = %11
  %20 = zext i8 %14 to i32
  %21 = tail call i32 @u_charDirection_69(i32 %20) #6
  %22 = icmp eq i32 %21, 9
  br i1 %22, label %23, label %28

23:                                               ; preds = %19, %18, %18, %18, %18, %18, %18
  %24 = add i64 %13, -1
  %25 = getelementptr inbounds i8, i8* %12, i64 1
  %26 = icmp eq i64 %24, 0
  br i1 %26, label %131, label %11

27:                                               ; preds = %6
  br i1 %9, label %131, label %28

28:                                               ; preds = %19, %18, %27
  %29 = phi i8* [ %0, %27 ], [ %12, %18 ], [ %12, %19 ]
  %30 = phi i64 [ %1, %27 ], [ %13, %18 ], [ %13, %19 ]
  %31 = load i8, i8* %29, align 1
  br label %32

32:                                               ; preds = %16, %28
  %33 = phi i8 [ %31, %28 ], [ %14, %16 ]
  %34 = phi i8* [ %29, %28 ], [ %12, %16 ]
  %35 = phi i64 [ %30, %28 ], [ %13, %16 ]
  %36 = icmp eq i8 %33, 45
  br i1 %36, label %42, label %37

37:                                               ; preds = %32
  %38 = and i32 %2, 2
  %39 = icmp ne i32 %38, 0
  %40 = icmp eq i8 %33, 43
  %41 = and i1 %39, %40
  br i1 %41, label %42, label %49

42:                                               ; preds = %37, %32
  %43 = phi i1 [ true, %32 ], [ false, %37 ]
  %44 = getelementptr inbounds i8, i8* %34, i64 1
  %45 = add i64 %35, -1
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %131, label %47

47:                                               ; preds = %42
  %48 = load i8, i8* %44, align 1
  br label %49

49:                                               ; preds = %47, %37
  %50 = phi i8 [ %48, %47 ], [ %33, %37 ]
  %51 = phi i8* [ %44, %47 ], [ %34, %37 ]
  %52 = phi i1 [ %43, %47 ], [ false, %37 ]
  %53 = phi i64 [ %45, %47 ], [ %35, %37 ]
  %54 = zext i8 %50 to i16
  %55 = add nsw i16 %54, -48
  %56 = icmp ult i16 %55, 10
  br i1 %56, label %57, label %131

57:                                               ; preds = %49, %98
  %58 = phi i64 [ %64, %98 ], [ %53, %49 ]
  %59 = phi i64 [ %95, %98 ], [ 0, %49 ]
  %60 = phi i32 [ %84, %98 ], [ 1, %49 ]
  %61 = phi i8 [ %85, %98 ], [ 0, %49 ]
  %62 = phi i8* [ %96, %98 ], [ %51, %49 ]
  %63 = phi i8 [ %99, %98 ], [ %50, %49 ]
  %64 = add i64 %58, -1
  %65 = add i8 %63, -48
  %66 = icmp ult i8 %65, 10
  %67 = zext i8 %63 to i64
  %68 = icmp ugt i8 %63, 96
  %69 = select i1 %68, i64 -87, i64 -55
  %70 = select i1 %66, i64 -48, i64 %69
  %71 = add nsw i64 %70, %67
  br i1 %52, label %72, label %77

72:                                               ; preds = %57
  %73 = or i64 %71, -9223372036854775808
  %74 = sdiv i64 %73, 10
  %75 = icmp slt i64 %59, %74
  %76 = select i1 %75, i32 2, i32 %60
  br label %82

77:                                               ; preds = %57
  %78 = sub nsw i64 9223372036854775807, %71
  %79 = sdiv i64 %78, 10
  %80 = icmp sgt i64 %59, %79
  %81 = select i1 %80, i32 3, i32 %60
  br label %82

82:                                               ; preds = %77, %72
  %83 = phi i1 [ %80, %77 ], [ %75, %72 ]
  %84 = phi i32 [ %81, %77 ], [ %76, %72 ]
  %85 = select i1 %83, i8 1, i8 %61
  %86 = and i8 %85, 1
  %87 = icmp eq i8 %86, 0
  br i1 %87, label %88, label %94

88:                                               ; preds = %82
  %89 = mul nsw i64 %59, 10
  br i1 %52, label %90, label %92

90:                                               ; preds = %88
  %91 = sub nsw i64 %89, %71
  br label %94

92:                                               ; preds = %88
  %93 = add nsw i64 %89, %71
  br label %94

94:                                               ; preds = %92, %90, %82
  %95 = phi i64 [ %59, %82 ], [ %91, %90 ], [ %93, %92 ]
  %96 = getelementptr inbounds i8, i8* %62, i64 1
  %97 = icmp eq i64 %64, 0
  br i1 %97, label %103, label %98

98:                                               ; preds = %94
  %99 = load i8, i8* %96, align 1
  %100 = zext i8 %99 to i16
  %101 = add nsw i16 %100, -48
  %102 = icmp ult i16 %101, 10
  br i1 %102, label %57, label %103

103:                                              ; preds = %98, %94
  %104 = phi i1 [ false, %98 ], [ true, %94 ]
  br i1 %8, label %105, label %122

105:                                              ; preds = %103
  br i1 %104, label %126, label %106

106:                                              ; preds = %105, %118
  %107 = phi i8* [ %120, %118 ], [ %96, %105 ]
  %108 = phi i64 [ %119, %118 ], [ %64, %105 ]
  %109 = load i8, i8* %107, align 1
  %110 = icmp sgt i8 %109, -1
  br i1 %110, label %111, label %114

111:                                              ; preds = %106
  %112 = icmp ult i8 %109, 33
  br i1 %112, label %113, label %123

113:                                              ; preds = %111
  switch i8 %109, label %123 [
    i8 32, label %118
    i8 13, label %118
    i8 12, label %118
    i8 11, label %118
    i8 10, label %118
    i8 9, label %118
  ]

114:                                              ; preds = %106
  %115 = zext i8 %109 to i32
  %116 = tail call i32 @u_charDirection_69(i32 %115) #6
  %117 = icmp eq i32 %116, 9
  br i1 %117, label %118, label %123

118:                                              ; preds = %114, %113, %113, %113, %113, %113, %113
  %119 = add i64 %108, -1
  %120 = getelementptr inbounds i8, i8* %107, i64 1
  %121 = icmp eq i64 %119, 0
  br i1 %121, label %126, label %106

122:                                              ; preds = %103
  br i1 %104, label %126, label %123

123:                                              ; preds = %114, %113, %111, %122
  %124 = and i32 %2, 1
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %131, label %126

126:                                              ; preds = %118, %123, %122, %105
  %127 = icmp eq i32 %84, 0
  %128 = or i1 %127, %87
  %129 = select i1 %128, i32 0, i32 %84
  %130 = select i1 %128, i64 %95, i64 0
  br label %131

131:                                              ; preds = %23, %126, %123, %49, %42, %27, %10, %4
  %132 = phi i32 [ 1, %123 ], [ 1, %49 ], [ 1, %42 ], [ 1, %27 ], [ 1, %10 ], [ 1, %4 ], [ %129, %126 ], [ 1, %23 ]
  %133 = phi i64 [ 0, %123 ], [ 0, %49 ], [ 0, %42 ], [ 0, %27 ], [ 0, %10 ], [ 0, %4 ], [ %130, %126 ], [ 0, %23 ]
  %134 = icmp eq i8* %3, null
  br i1 %134, label %138, label %135

135:                                              ; preds = %131
  %136 = icmp eq i32 %132, 0
  %137 = zext i1 %136 to i8
  store i8 %137, i8* %3, align 1
  br label %138

138:                                              ; preds = %131, %135
  ret i64 %133
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN3WTF17CharactersToInt64EPKDsmNS_20NumberParsingOptionsEPb(i16* readonly, i64, i32, i8*) local_unnamed_addr #1 {
  %5 = icmp eq i16* %0, null
  br i1 %5, label %124, label %6

6:                                                ; preds = %4
  %7 = and i32 %2, 4
  %8 = icmp ne i32 %7, 0
  %9 = icmp eq i64 %1, 0
  br i1 %8, label %10, label %27

10:                                               ; preds = %6
  br i1 %9, label %124, label %11

11:                                               ; preds = %10, %23
  %12 = phi i16* [ %25, %23 ], [ %0, %10 ]
  %13 = phi i64 [ %24, %23 ], [ %1, %10 ]
  %14 = load i16, i16* %12, align 2
  %15 = icmp ult i16 %14, 128
  br i1 %15, label %16, label %19

16:                                               ; preds = %11
  %17 = icmp ult i16 %14, 33
  br i1 %17, label %18, label %32

18:                                               ; preds = %16
  switch i16 %14, label %28 [
    i16 32, label %23
    i16 13, label %23
    i16 12, label %23
    i16 11, label %23
    i16 10, label %23
    i16 9, label %23
  ]

19:                                               ; preds = %11
  %20 = zext i16 %14 to i32
  %21 = tail call i32 @u_charDirection_69(i32 %20) #6
  %22 = icmp eq i32 %21, 9
  br i1 %22, label %23, label %28

23:                                               ; preds = %19, %18, %18, %18, %18, %18, %18
  %24 = add i64 %13, -1
  %25 = getelementptr inbounds i16, i16* %12, i64 1
  %26 = icmp eq i64 %24, 0
  br i1 %26, label %124, label %11

27:                                               ; preds = %6
  br i1 %9, label %124, label %28

28:                                               ; preds = %19, %18, %27
  %29 = phi i16* [ %0, %27 ], [ %12, %18 ], [ %12, %19 ]
  %30 = phi i64 [ %1, %27 ], [ %13, %18 ], [ %13, %19 ]
  %31 = load i16, i16* %29, align 2
  br label %32

32:                                               ; preds = %16, %28
  %33 = phi i16 [ %31, %28 ], [ %14, %16 ]
  %34 = phi i16* [ %29, %28 ], [ %12, %16 ]
  %35 = phi i64 [ %30, %28 ], [ %13, %16 ]
  %36 = icmp eq i16 %33, 45
  br i1 %36, label %42, label %37

37:                                               ; preds = %32
  %38 = and i32 %2, 2
  %39 = icmp ne i32 %38, 0
  %40 = icmp eq i16 %33, 43
  %41 = and i1 %39, %40
  br i1 %41, label %42, label %49

42:                                               ; preds = %37, %32
  %43 = phi i1 [ true, %32 ], [ false, %37 ]
  %44 = getelementptr inbounds i16, i16* %34, i64 1
  %45 = add i64 %35, -1
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %124, label %47

47:                                               ; preds = %42
  %48 = load i16, i16* %44, align 2
  br label %49

49:                                               ; preds = %47, %37
  %50 = phi i16 [ %48, %47 ], [ %33, %37 ]
  %51 = phi i16* [ %44, %47 ], [ %34, %37 ]
  %52 = phi i1 [ %43, %47 ], [ false, %37 ]
  %53 = phi i64 [ %45, %47 ], [ %35, %37 ]
  %54 = add i16 %50, -48
  %55 = icmp ult i16 %54, 10
  br i1 %55, label %56, label %124

56:                                               ; preds = %49, %92
  %57 = phi i64 [ %63, %92 ], [ %53, %49 ]
  %58 = phi i64 [ %89, %92 ], [ 0, %49 ]
  %59 = phi i32 [ %78, %92 ], [ 1, %49 ]
  %60 = phi i8 [ %79, %92 ], [ 0, %49 ]
  %61 = phi i16* [ %90, %92 ], [ %51, %49 ]
  %62 = phi i16 [ %93, %92 ], [ %50, %49 ]
  %63 = add i64 %57, -1
  %64 = zext i16 %62 to i64
  %65 = add nsw i64 %64, -48
  br i1 %52, label %66, label %71

66:                                               ; preds = %56
  %67 = or i64 %65, -9223372036854775808
  %68 = sdiv i64 %67, 10
  %69 = icmp slt i64 %58, %68
  %70 = select i1 %69, i32 2, i32 %59
  br label %76

71:                                               ; preds = %56
  %72 = sub nuw i64 -9223372036854775761, %64
  %73 = sdiv i64 %72, 10
  %74 = icmp sgt i64 %58, %73
  %75 = select i1 %74, i32 3, i32 %59
  br label %76

76:                                               ; preds = %71, %66
  %77 = phi i1 [ %74, %71 ], [ %69, %66 ]
  %78 = phi i32 [ %75, %71 ], [ %70, %66 ]
  %79 = select i1 %77, i8 1, i8 %60
  %80 = and i8 %79, 1
  %81 = icmp eq i8 %80, 0
  br i1 %81, label %82, label %88

82:                                               ; preds = %76
  %83 = mul nsw i64 %58, 10
  br i1 %52, label %84, label %86

84:                                               ; preds = %82
  %85 = sub nsw i64 %83, %65
  br label %88

86:                                               ; preds = %82
  %87 = add nsw i64 %65, %83
  br label %88

88:                                               ; preds = %86, %84, %76
  %89 = phi i64 [ %58, %76 ], [ %85, %84 ], [ %87, %86 ]
  %90 = getelementptr inbounds i16, i16* %61, i64 1
  %91 = icmp eq i64 %63, 0
  br i1 %91, label %96, label %92

92:                                               ; preds = %88
  %93 = load i16, i16* %90, align 2
  %94 = add i16 %93, -48
  %95 = icmp ult i16 %94, 10
  br i1 %95, label %56, label %96

96:                                               ; preds = %92, %88
  %97 = phi i1 [ false, %92 ], [ true, %88 ]
  br i1 %8, label %98, label %115

98:                                               ; preds = %96
  br i1 %97, label %119, label %99

99:                                               ; preds = %98, %111
  %100 = phi i16* [ %113, %111 ], [ %90, %98 ]
  %101 = phi i64 [ %112, %111 ], [ %63, %98 ]
  %102 = load i16, i16* %100, align 2
  %103 = icmp ult i16 %102, 128
  br i1 %103, label %104, label %107

104:                                              ; preds = %99
  %105 = icmp ult i16 %102, 33
  br i1 %105, label %106, label %116

106:                                              ; preds = %104
  switch i16 %102, label %116 [
    i16 32, label %111
    i16 13, label %111
    i16 12, label %111
    i16 11, label %111
    i16 10, label %111
    i16 9, label %111
  ]

107:                                              ; preds = %99
  %108 = zext i16 %102 to i32
  %109 = tail call i32 @u_charDirection_69(i32 %108) #6
  %110 = icmp eq i32 %109, 9
  br i1 %110, label %111, label %116

111:                                              ; preds = %107, %106, %106, %106, %106, %106, %106
  %112 = add i64 %101, -1
  %113 = getelementptr inbounds i16, i16* %100, i64 1
  %114 = icmp eq i64 %112, 0
  br i1 %114, label %119, label %99

115:                                              ; preds = %96
  br i1 %97, label %119, label %116

116:                                              ; preds = %107, %106, %104, %115
  %117 = and i32 %2, 1
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %124, label %119

119:                                              ; preds = %111, %116, %115, %98
  %120 = icmp eq i32 %78, 0
  %121 = or i1 %120, %81
  %122 = select i1 %121, i32 0, i32 %78
  %123 = select i1 %121, i64 %89, i64 0
  br label %124

124:                                              ; preds = %23, %119, %116, %49, %42, %27, %10, %4
  %125 = phi i32 [ 1, %116 ], [ 1, %49 ], [ 1, %42 ], [ 1, %27 ], [ 1, %10 ], [ 1, %4 ], [ %122, %119 ], [ 1, %23 ]
  %126 = phi i64 [ 0, %116 ], [ 0, %49 ], [ 0, %42 ], [ 0, %27 ], [ 0, %10 ], [ 0, %4 ], [ %123, %119 ], [ 0, %23 ]
  %127 = icmp eq i8* %3, null
  br i1 %127, label %131, label %128

128:                                              ; preds = %124
  %129 = icmp eq i32 %125, 0
  %130 = zext i1 %129 to i8
  store i8 %130, i8* %3, align 1
  br label %131

131:                                              ; preds = %124, %128
  ret i64 %126
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN3WTF18CharactersToUInt64EPKhmNS_20NumberParsingOptionsEPb(i8* readonly, i64, i32, i8*) local_unnamed_addr #1 {
  %5 = and i32 %2, 8
  %6 = icmp ne i32 %5, 0
  %7 = icmp eq i8* %0, null
  br i1 %7, label %137, label %8

8:                                                ; preds = %4
  %9 = and i32 %2, 4
  %10 = icmp ne i32 %9, 0
  br i1 %10, label %11, label %29

11:                                               ; preds = %8
  %12 = icmp eq i64 %1, 0
  br i1 %12, label %137, label %13

13:                                               ; preds = %11, %25
  %14 = phi i8* [ %27, %25 ], [ %0, %11 ]
  %15 = phi i64 [ %26, %25 ], [ %1, %11 ]
  %16 = load i8, i8* %14, align 1
  %17 = icmp sgt i8 %16, -1
  br i1 %17, label %18, label %21

18:                                               ; preds = %13
  %19 = icmp ult i8 %16, 33
  br i1 %19, label %20, label %29

20:                                               ; preds = %18
  switch i8 %16, label %29 [
    i8 32, label %25
    i8 13, label %25
    i8 12, label %25
    i8 11, label %25
    i8 10, label %25
    i8 9, label %25
  ]

21:                                               ; preds = %13
  %22 = zext i8 %16 to i32
  %23 = tail call i32 @u_charDirection_69(i32 %22) #6
  %24 = icmp eq i32 %23, 9
  br i1 %24, label %25, label %29

25:                                               ; preds = %21, %20, %20, %20, %20, %20, %20
  %26 = add i64 %15, -1
  %27 = getelementptr inbounds i8, i8* %14, i64 1
  %28 = icmp eq i64 %26, 0
  br i1 %28, label %137, label %13

29:                                               ; preds = %21, %20, %18, %8
  %30 = phi i64 [ %1, %8 ], [ %15, %18 ], [ %15, %20 ], [ %15, %21 ]
  %31 = phi i8* [ %0, %8 ], [ %14, %18 ], [ %14, %20 ], [ %14, %21 ]
  %32 = icmp ne i64 %30, 0
  %33 = and i1 %6, %32
  br i1 %33, label %34, label %37

34:                                               ; preds = %29
  %35 = load i8, i8* %31, align 1
  %36 = icmp eq i8 %35, 45
  br i1 %36, label %44, label %37

37:                                               ; preds = %34, %29
  br i1 %32, label %38, label %137

38:                                               ; preds = %37
  %39 = and i32 %2, 2
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %49, label %41

41:                                               ; preds = %38
  %42 = load i8, i8* %31, align 1
  %43 = icmp eq i8 %42, 43
  br i1 %43, label %44, label %49

44:                                               ; preds = %41, %34
  %45 = phi i1 [ true, %34 ], [ false, %41 ]
  %46 = getelementptr inbounds i8, i8* %31, i64 1
  %47 = add i64 %30, -1
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %137, label %49

49:                                               ; preds = %44, %41, %38
  %50 = phi i1 [ %45, %44 ], [ false, %41 ], [ false, %38 ]
  %51 = phi i8* [ %46, %44 ], [ %31, %41 ], [ %31, %38 ]
  %52 = phi i64 [ %47, %44 ], [ %30, %41 ], [ %30, %38 ]
  %53 = load i8, i8* %51, align 1
  %54 = zext i8 %53 to i16
  %55 = add nsw i16 %54, -48
  %56 = icmp ult i16 %55, 10
  br i1 %56, label %57, label %137

57:                                               ; preds = %49, %104
  %58 = phi i64 [ %64, %104 ], [ %52, %49 ]
  %59 = phi i8* [ %102, %104 ], [ %51, %49 ]
  %60 = phi i64 [ %101, %104 ], [ 0, %49 ]
  %61 = phi i32 [ %90, %104 ], [ 1, %49 ]
  %62 = phi i8 [ %91, %104 ], [ 0, %49 ]
  %63 = phi i8 [ %105, %104 ], [ %53, %49 ]
  %64 = add i64 %58, -1
  %65 = add i8 %63, -48
  %66 = icmp ult i8 %65, 10
  %67 = zext i8 %63 to i32
  %68 = icmp ugt i8 %63, 96
  %69 = select i1 %68, i32 -87, i32 -55
  %70 = select i1 %66, i32 -48, i32 %69
  %71 = add nsw i32 %70, %67
  %72 = sext i32 %71 to i64
  br i1 %50, label %73, label %83

73:                                               ; preds = %57
  br i1 %6, label %74, label %78

74:                                               ; preds = %73
  %75 = icmp eq i32 %71, 0
  %76 = select i1 %75, i32 %61, i32 1
  %77 = select i1 %75, i8 %62, i8 1
  br label %89

78:                                               ; preds = %73
  %79 = udiv i64 %72, 10
  %80 = icmp ult i64 %60, %79
  %81 = select i1 %80, i32 2, i32 %61
  %82 = select i1 %80, i8 1, i8 %62
  br label %89

83:                                               ; preds = %57
  %84 = xor i64 %72, -2
  %85 = udiv i64 %84, 10
  %86 = icmp ugt i64 %60, %85
  %87 = select i1 %86, i32 3, i32 %61
  %88 = select i1 %86, i8 1, i8 %62
  br label %89

89:                                               ; preds = %83, %78, %74
  %90 = phi i32 [ %76, %74 ], [ %81, %78 ], [ %87, %83 ]
  %91 = phi i8 [ %77, %74 ], [ %82, %78 ], [ %88, %83 ]
  %92 = and i8 %91, 1
  %93 = icmp eq i8 %92, 0
  br i1 %93, label %94, label %100

94:                                               ; preds = %89
  %95 = mul i64 %60, 10
  br i1 %50, label %96, label %98

96:                                               ; preds = %94
  %97 = sub i64 %95, %72
  br label %100

98:                                               ; preds = %94
  %99 = add i64 %95, %72
  br label %100

100:                                              ; preds = %98, %96, %89
  %101 = phi i64 [ %60, %89 ], [ %97, %96 ], [ %99, %98 ]
  %102 = getelementptr inbounds i8, i8* %59, i64 1
  %103 = icmp eq i64 %64, 0
  br i1 %103, label %109, label %104

104:                                              ; preds = %100
  %105 = load i8, i8* %102, align 1
  %106 = zext i8 %105 to i16
  %107 = add nsw i16 %106, -48
  %108 = icmp ult i16 %107, 10
  br i1 %108, label %57, label %109

109:                                              ; preds = %104, %100
  %110 = phi i1 [ false, %104 ], [ true, %100 ]
  br i1 %10, label %111, label %128

111:                                              ; preds = %109
  br i1 %110, label %132, label %112

112:                                              ; preds = %111, %124
  %113 = phi i8* [ %126, %124 ], [ %102, %111 ]
  %114 = phi i64 [ %125, %124 ], [ %64, %111 ]
  %115 = load i8, i8* %113, align 1
  %116 = icmp sgt i8 %115, -1
  br i1 %116, label %117, label %120

117:                                              ; preds = %112
  %118 = icmp ult i8 %115, 33
  br i1 %118, label %119, label %129

119:                                              ; preds = %117
  switch i8 %115, label %129 [
    i8 32, label %124
    i8 13, label %124
    i8 12, label %124
    i8 11, label %124
    i8 10, label %124
    i8 9, label %124
  ]

120:                                              ; preds = %112
  %121 = zext i8 %115 to i32
  %122 = tail call i32 @u_charDirection_69(i32 %121) #6
  %123 = icmp eq i32 %122, 9
  br i1 %123, label %124, label %129

124:                                              ; preds = %120, %119, %119, %119, %119, %119, %119
  %125 = add i64 %114, -1
  %126 = getelementptr inbounds i8, i8* %113, i64 1
  %127 = icmp eq i64 %125, 0
  br i1 %127, label %132, label %112

128:                                              ; preds = %109
  br i1 %110, label %132, label %129

129:                                              ; preds = %120, %119, %117, %128
  %130 = and i32 %2, 1
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %137, label %132

132:                                              ; preds = %124, %129, %128, %111
  %133 = icmp eq i32 %90, 0
  %134 = or i1 %133, %93
  %135 = select i1 %134, i32 0, i32 %90
  %136 = select i1 %134, i64 %101, i64 0
  br label %137

137:                                              ; preds = %25, %132, %129, %49, %44, %37, %11, %4
  %138 = phi i32 [ 1, %129 ], [ 1, %49 ], [ 1, %44 ], [ 1, %37 ], [ 1, %11 ], [ 1, %4 ], [ %135, %132 ], [ 1, %25 ]
  %139 = phi i64 [ 0, %129 ], [ 0, %49 ], [ 0, %44 ], [ 0, %37 ], [ 0, %11 ], [ 0, %4 ], [ %136, %132 ], [ 0, %25 ]
  %140 = icmp eq i8* %3, null
  br i1 %140, label %144, label %141

141:                                              ; preds = %137
  %142 = icmp eq i32 %138, 0
  %143 = zext i1 %142 to i8
  store i8 %143, i8* %3, align 1
  br label %144

144:                                              ; preds = %137, %141
  ret i64 %139
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN3WTF18CharactersToUInt64EPKDsmNS_20NumberParsingOptionsEPb(i16* readonly, i64, i32, i8*) local_unnamed_addr #1 {
  %5 = and i32 %2, 8
  %6 = icmp ne i32 %5, 0
  %7 = icmp eq i16* %0, null
  br i1 %7, label %132, label %8

8:                                                ; preds = %4
  %9 = and i32 %2, 4
  %10 = icmp ne i32 %9, 0
  br i1 %10, label %11, label %29

11:                                               ; preds = %8
  %12 = icmp eq i64 %1, 0
  br i1 %12, label %132, label %13

13:                                               ; preds = %11, %25
  %14 = phi i16* [ %27, %25 ], [ %0, %11 ]
  %15 = phi i64 [ %26, %25 ], [ %1, %11 ]
  %16 = load i16, i16* %14, align 2
  %17 = icmp ult i16 %16, 128
  br i1 %17, label %18, label %21

18:                                               ; preds = %13
  %19 = icmp ult i16 %16, 33
  br i1 %19, label %20, label %29

20:                                               ; preds = %18
  switch i16 %16, label %29 [
    i16 32, label %25
    i16 13, label %25
    i16 12, label %25
    i16 11, label %25
    i16 10, label %25
    i16 9, label %25
  ]

21:                                               ; preds = %13
  %22 = zext i16 %16 to i32
  %23 = tail call i32 @u_charDirection_69(i32 %22) #6
  %24 = icmp eq i32 %23, 9
  br i1 %24, label %25, label %29

25:                                               ; preds = %21, %20, %20, %20, %20, %20, %20
  %26 = add i64 %15, -1
  %27 = getelementptr inbounds i16, i16* %14, i64 1
  %28 = icmp eq i64 %26, 0
  br i1 %28, label %132, label %13

29:                                               ; preds = %21, %20, %18, %8
  %30 = phi i64 [ %1, %8 ], [ %15, %18 ], [ %15, %20 ], [ %15, %21 ]
  %31 = phi i16* [ %0, %8 ], [ %14, %18 ], [ %14, %20 ], [ %14, %21 ]
  %32 = icmp ne i64 %30, 0
  %33 = and i1 %6, %32
  br i1 %33, label %34, label %37

34:                                               ; preds = %29
  %35 = load i16, i16* %31, align 2
  %36 = icmp eq i16 %35, 45
  br i1 %36, label %44, label %37

37:                                               ; preds = %34, %29
  br i1 %32, label %38, label %132

38:                                               ; preds = %37
  %39 = and i32 %2, 2
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %49, label %41

41:                                               ; preds = %38
  %42 = load i16, i16* %31, align 2
  %43 = icmp eq i16 %42, 43
  br i1 %43, label %44, label %49

44:                                               ; preds = %41, %34
  %45 = phi i1 [ true, %34 ], [ false, %41 ]
  %46 = getelementptr inbounds i16, i16* %31, i64 1
  %47 = add i64 %30, -1
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %132, label %49

49:                                               ; preds = %44, %41, %38
  %50 = phi i1 [ %45, %44 ], [ false, %41 ], [ false, %38 ]
  %51 = phi i16* [ %46, %44 ], [ %31, %41 ], [ %31, %38 ]
  %52 = phi i64 [ %47, %44 ], [ %30, %41 ], [ %30, %38 ]
  %53 = load i16, i16* %51, align 2
  %54 = add i16 %53, -48
  %55 = icmp ult i16 %54, 10
  br i1 %55, label %56, label %132

56:                                               ; preds = %49, %100
  %57 = phi i64 [ %63, %100 ], [ %52, %49 ]
  %58 = phi i16* [ %98, %100 ], [ %51, %49 ]
  %59 = phi i64 [ %97, %100 ], [ 0, %49 ]
  %60 = phi i32 [ %86, %100 ], [ 1, %49 ]
  %61 = phi i8 [ %87, %100 ], [ 0, %49 ]
  %62 = phi i16 [ %101, %100 ], [ %53, %49 ]
  %63 = add i64 %57, -1
  %64 = zext i16 %62 to i32
  %65 = add nsw i32 %64, -48
  %66 = sext i32 %65 to i64
  br i1 %50, label %67, label %79

67:                                               ; preds = %56
  br i1 %6, label %68, label %72

68:                                               ; preds = %67
  %69 = icmp eq i32 %65, 0
  %70 = select i1 %69, i32 %60, i32 1
  %71 = select i1 %69, i8 %61, i8 1
  br label %85

72:                                               ; preds = %67
  %73 = trunc i32 %65 to i8
  %74 = udiv i8 %73, 10
  %75 = zext i8 %74 to i64
  %76 = icmp ult i64 %59, %75
  %77 = select i1 %76, i32 2, i32 %60
  %78 = select i1 %76, i8 1, i8 %61
  br label %85

79:                                               ; preds = %56
  %80 = xor i64 %66, -2
  %81 = udiv i64 %80, 10
  %82 = icmp ugt i64 %59, %81
  %83 = select i1 %82, i32 3, i32 %60
  %84 = select i1 %82, i8 1, i8 %61
  br label %85

85:                                               ; preds = %79, %72, %68
  %86 = phi i32 [ %70, %68 ], [ %77, %72 ], [ %83, %79 ]
  %87 = phi i8 [ %71, %68 ], [ %78, %72 ], [ %84, %79 ]
  %88 = and i8 %87, 1
  %89 = icmp eq i8 %88, 0
  br i1 %89, label %90, label %96

90:                                               ; preds = %85
  %91 = mul i64 %59, 10
  br i1 %50, label %92, label %94

92:                                               ; preds = %90
  %93 = sub i64 %91, %66
  br label %96

94:                                               ; preds = %90
  %95 = add i64 %91, %66
  br label %96

96:                                               ; preds = %94, %92, %85
  %97 = phi i64 [ %59, %85 ], [ %93, %92 ], [ %95, %94 ]
  %98 = getelementptr inbounds i16, i16* %58, i64 1
  %99 = icmp eq i64 %63, 0
  br i1 %99, label %104, label %100

100:                                              ; preds = %96
  %101 = load i16, i16* %98, align 2
  %102 = add i16 %101, -48
  %103 = icmp ult i16 %102, 10
  br i1 %103, label %56, label %104

104:                                              ; preds = %100, %96
  %105 = phi i1 [ false, %100 ], [ true, %96 ]
  br i1 %10, label %106, label %123

106:                                              ; preds = %104
  br i1 %105, label %127, label %107

107:                                              ; preds = %106, %119
  %108 = phi i16* [ %121, %119 ], [ %98, %106 ]
  %109 = phi i64 [ %120, %119 ], [ %63, %106 ]
  %110 = load i16, i16* %108, align 2
  %111 = icmp ult i16 %110, 128
  br i1 %111, label %112, label %115

112:                                              ; preds = %107
  %113 = icmp ult i16 %110, 33
  br i1 %113, label %114, label %124

114:                                              ; preds = %112
  switch i16 %110, label %124 [
    i16 32, label %119
    i16 13, label %119
    i16 12, label %119
    i16 11, label %119
    i16 10, label %119
    i16 9, label %119
  ]

115:                                              ; preds = %107
  %116 = zext i16 %110 to i32
  %117 = tail call i32 @u_charDirection_69(i32 %116) #6
  %118 = icmp eq i32 %117, 9
  br i1 %118, label %119, label %124

119:                                              ; preds = %115, %114, %114, %114, %114, %114, %114
  %120 = add i64 %109, -1
  %121 = getelementptr inbounds i16, i16* %108, i64 1
  %122 = icmp eq i64 %120, 0
  br i1 %122, label %127, label %107

123:                                              ; preds = %104
  br i1 %105, label %127, label %124

124:                                              ; preds = %115, %114, %112, %123
  %125 = and i32 %2, 1
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %132, label %127

127:                                              ; preds = %119, %124, %123, %106
  %128 = icmp eq i32 %86, 0
  %129 = or i1 %128, %89
  %130 = select i1 %129, i32 0, i32 %86
  %131 = select i1 %129, i64 %97, i64 0
  br label %132

132:                                              ; preds = %25, %127, %124, %49, %44, %37, %11, %4
  %133 = phi i32 [ 1, %124 ], [ 1, %49 ], [ 1, %44 ], [ 1, %37 ], [ 1, %11 ], [ 1, %4 ], [ %130, %127 ], [ 1, %25 ]
  %134 = phi i64 [ 0, %124 ], [ 0, %49 ], [ 0, %44 ], [ 0, %37 ], [ 0, %11 ], [ 0, %4 ], [ %131, %127 ], [ 0, %25 ]
  %135 = icmp eq i8* %3, null
  br i1 %135, label %139, label %136

136:                                              ; preds = %132
  %137 = icmp eq i32 %133, 0
  %138 = zext i1 %137 to i8
  store i8 %138, i8* %3, align 1
  br label %139

139:                                              ; preds = %132, %136
  ret i64 %134
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN3WTF18CharactersToDoubleEPKhmPb(i8*, i64, i8*) local_unnamed_addr #1 {
  %4 = alloca i32, align 4
  %5 = icmp eq i64 %1, 0
  br i1 %5, label %15, label %6

6:                                                ; preds = %3, %12
  %7 = phi i64 [ %13, %12 ], [ 0, %3 ]
  %8 = getelementptr inbounds i8, i8* %0, i64 %7
  %9 = load i8, i8* %8, align 1
  %10 = icmp ult i8 %9, 33
  br i1 %10, label %11, label %15

11:                                               ; preds = %6
  switch i8 %9, label %15 [
    i8 32, label %12
    i8 13, label %12
    i8 12, label %12
    i8 11, label %12
    i8 10, label %12
    i8 9, label %12
  ]

12:                                               ; preds = %11, %11, %11, %11, %11, %11
  %13 = add nuw i64 %7, 1
  %14 = icmp eq i64 %13, %1
  br i1 %14, label %15, label %6

15:                                               ; preds = %12, %11, %6, %3
  %16 = phi i64 [ 0, %3 ], [ %1, %12 ], [ %7, %6 ], [ %7, %11 ]
  %17 = getelementptr inbounds i8, i8* %0, i64 %16
  %18 = sub i64 %1, %16
  %19 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %19) #6
  store i32 0, i32* %4, align 4
  %20 = tail call dereferenceable(48) %"class.double_conversion::StringToDoubleConverter"* @_ZN3WTF8internal18GetDoubleConverterEv() #6
  %21 = tail call i1 @llvm.is.constant.i64(i64 %18) #6
  %22 = icmp ult i64 %18, 2147483648
  %23 = trunc i64 %18 to i32
  %24 = select i1 %22, i32 %23, i32 2147483647
  %25 = icmp ult i64 %18, 2147483647
  %26 = select i1 %25, i64 %18, i64 2147483647
  %27 = trunc i64 %26 to i32
  %28 = select i1 %21, i32 %27, i32 %24
  %29 = call double @_ZNK17double_conversion23StringToDoubleConverter14StringToDoubleEPKciPi(%"class.double_conversion::StringToDoubleConverter"* %20, i8* %17, i32 %28, i32* nonnull %4) #6
  %30 = load i32, i32* %4, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %19) #6
  %31 = icmp eq i32 %30, 0
  %32 = icmp eq i8* %2, null
  br i1 %31, label %33, label %35

33:                                               ; preds = %15
  br i1 %32, label %41, label %34

34:                                               ; preds = %33
  store i8 0, i8* %2, align 1
  br label %41

35:                                               ; preds = %15
  br i1 %32, label %41, label %36

36:                                               ; preds = %35
  %37 = sext i32 %30 to i64
  %38 = add i64 %16, %37
  %39 = icmp eq i64 %38, %1
  %40 = zext i1 %39 to i8
  store i8 %40, i8* %2, align 1
  br label %41

41:                                               ; preds = %33, %34, %35, %36
  %42 = phi double [ 0.000000e+00, %33 ], [ 0.000000e+00, %34 ], [ %29, %35 ], [ %29, %36 ]
  ret double %42
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN3WTF18CharactersToDoubleEPKDsmPb(i16*, i64, i8*) local_unnamed_addr #1 {
  %4 = alloca i32, align 4
  %5 = alloca [64 x i8], align 16
  %6 = alloca i64, align 8
  %7 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #6
  store i64 -6148914691236517206, i64* %6, align 8
  %8 = icmp eq i64 %1, 0
  br i1 %8, label %18, label %9

9:                                                ; preds = %3, %15
  %10 = phi i64 [ %16, %15 ], [ 0, %3 ]
  %11 = getelementptr inbounds i16, i16* %0, i64 %10
  %12 = load i16, i16* %11, align 2
  %13 = icmp ult i16 %12, 33
  br i1 %13, label %14, label %18

14:                                               ; preds = %9
  switch i16 %12, label %18 [
    i16 32, label %15
    i16 13, label %15
    i16 12, label %15
    i16 11, label %15
    i16 10, label %15
    i16 9, label %15
  ]

15:                                               ; preds = %14, %14, %14, %14, %14, %14
  %16 = add nuw i64 %10, 1
  %17 = icmp eq i64 %16, %1
  br i1 %17, label %18, label %9

18:                                               ; preds = %15, %14, %9, %3
  %19 = phi i64 [ 0, %3 ], [ %1, %15 ], [ %10, %9 ], [ %10, %14 ]
  %20 = getelementptr inbounds i16, i16* %0, i64 %19
  %21 = sub i64 %1, %19
  %22 = icmp ugt i64 %21, 64
  br i1 %22, label %23, label %26

23:                                               ; preds = %18
  %24 = call double @_ZN3WTF8internal25ParseDoubleFromLongStringEPKDsmRm(i16* %20, i64 %21, i64* nonnull dereferenceable(8) %6) #6
  %25 = load i64, i64* %6, align 8
  br label %127

26:                                               ; preds = %18
  %27 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %27) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %27, i8 -86, i64 64, i1 false) #6
  %28 = icmp eq i64 %21, 0
  br i1 %28, label %103, label %29

29:                                               ; preds = %26
  %30 = icmp ult i64 %21, 16
  br i1 %30, label %31, label %33

31:                                               ; preds = %101, %29
  %32 = phi i64 [ 0, %29 ], [ %34, %101 ]
  br label %117

33:                                               ; preds = %29
  %34 = and i64 %21, -16
  %35 = add i64 %34, -16
  %36 = lshr exact i64 %35, 4
  %37 = add nuw nsw i64 %36, 1
  %38 = and i64 %37, 1
  %39 = icmp eq i64 %35, 0
  br i1 %39, label %81, label %40

40:                                               ; preds = %33
  %41 = sub nuw nsw i64 %37, %38
  br label %42

42:                                               ; preds = %42, %40
  %43 = phi i64 [ 0, %40 ], [ %78, %42 ]
  %44 = phi i64 [ %41, %40 ], [ %79, %42 ]
  %45 = getelementptr inbounds i16, i16* %20, i64 %43
  %46 = bitcast i16* %45 to <8 x i16>*
  %47 = load <8 x i16>, <8 x i16>* %46, align 2
  %48 = getelementptr inbounds i16, i16* %45, i64 8
  %49 = bitcast i16* %48 to <8 x i16>*
  %50 = load <8 x i16>, <8 x i16>* %49, align 2
  %51 = icmp ult <8 x i16> %47, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %52 = icmp ult <8 x i16> %50, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %53 = trunc <8 x i16> %47 to <8 x i8>
  %54 = trunc <8 x i16> %50 to <8 x i8>
  %55 = select <8 x i1> %51, <8 x i8> %53, <8 x i8> zeroinitializer
  %56 = select <8 x i1> %52, <8 x i8> %54, <8 x i8> zeroinitializer
  %57 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i64 0, i64 %43
  %58 = bitcast i8* %57 to <8 x i8>*
  store <8 x i8> %55, <8 x i8>* %58, align 16
  %59 = getelementptr inbounds i8, i8* %57, i64 8
  %60 = bitcast i8* %59 to <8 x i8>*
  store <8 x i8> %56, <8 x i8>* %60, align 8
  %61 = or i64 %43, 16
  %62 = getelementptr inbounds i16, i16* %20, i64 %61
  %63 = bitcast i16* %62 to <8 x i16>*
  %64 = load <8 x i16>, <8 x i16>* %63, align 2
  %65 = getelementptr inbounds i16, i16* %62, i64 8
  %66 = bitcast i16* %65 to <8 x i16>*
  %67 = load <8 x i16>, <8 x i16>* %66, align 2
  %68 = icmp ult <8 x i16> %64, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %69 = icmp ult <8 x i16> %67, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %70 = trunc <8 x i16> %64 to <8 x i8>
  %71 = trunc <8 x i16> %67 to <8 x i8>
  %72 = select <8 x i1> %68, <8 x i8> %70, <8 x i8> zeroinitializer
  %73 = select <8 x i1> %69, <8 x i8> %71, <8 x i8> zeroinitializer
  %74 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i64 0, i64 %61
  %75 = bitcast i8* %74 to <8 x i8>*
  store <8 x i8> %72, <8 x i8>* %75, align 16
  %76 = getelementptr inbounds i8, i8* %74, i64 8
  %77 = bitcast i8* %76 to <8 x i8>*
  store <8 x i8> %73, <8 x i8>* %77, align 8
  %78 = add i64 %43, 32
  %79 = add i64 %44, -2
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %81, label %42, !llvm.loop !2

81:                                               ; preds = %42, %33
  %82 = phi i64 [ 0, %33 ], [ %78, %42 ]
  %83 = icmp eq i64 %38, 0
  br i1 %83, label %101, label %84

84:                                               ; preds = %81
  %85 = getelementptr inbounds i16, i16* %20, i64 %82
  %86 = bitcast i16* %85 to <8 x i16>*
  %87 = load <8 x i16>, <8 x i16>* %86, align 2
  %88 = getelementptr inbounds i16, i16* %85, i64 8
  %89 = bitcast i16* %88 to <8 x i16>*
  %90 = load <8 x i16>, <8 x i16>* %89, align 2
  %91 = icmp ult <8 x i16> %87, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %92 = icmp ult <8 x i16> %90, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %93 = trunc <8 x i16> %87 to <8 x i8>
  %94 = trunc <8 x i16> %90 to <8 x i8>
  %95 = select <8 x i1> %91, <8 x i8> %93, <8 x i8> zeroinitializer
  %96 = select <8 x i1> %92, <8 x i8> %94, <8 x i8> zeroinitializer
  %97 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i64 0, i64 %82
  %98 = bitcast i8* %97 to <8 x i8>*
  store <8 x i8> %95, <8 x i8>* %98, align 16
  %99 = getelementptr inbounds i8, i8* %97, i64 8
  %100 = bitcast i8* %99 to <8 x i8>*
  store <8 x i8> %96, <8 x i8>* %100, align 8
  br label %101

101:                                              ; preds = %81, %84
  %102 = icmp eq i64 %21, %34
  br i1 %102, label %103, label %31

103:                                              ; preds = %117, %101, %26
  %104 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %104) #6
  store i32 0, i32* %4, align 4
  %105 = tail call dereferenceable(48) %"class.double_conversion::StringToDoubleConverter"* @_ZN3WTF8internal18GetDoubleConverterEv() #6
  %106 = tail call i1 @llvm.is.constant.i64(i64 %21) #6
  %107 = icmp ult i64 %21, 2147483648
  %108 = trunc i64 %21 to i32
  %109 = select i1 %107, i32 %108, i32 2147483647
  %110 = icmp ult i64 %21, 2147483647
  %111 = select i1 %110, i64 %21, i64 2147483647
  %112 = trunc i64 %111 to i32
  %113 = select i1 %106, i32 %112, i32 %109
  %114 = call double @_ZNK17double_conversion23StringToDoubleConverter14StringToDoubleEPKciPi(%"class.double_conversion::StringToDoubleConverter"* %105, i8* nonnull %27, i32 %113, i32* nonnull %4) #6
  %115 = load i32, i32* %4, align 4
  %116 = sext i32 %115 to i64
  store i64 %116, i64* %6, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %104) #6
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %27) #6
  br label %127

117:                                              ; preds = %31, %117
  %118 = phi i64 [ %125, %117 ], [ %32, %31 ]
  %119 = getelementptr inbounds i16, i16* %20, i64 %118
  %120 = load i16, i16* %119, align 2
  %121 = icmp ult i16 %120, 128
  %122 = trunc i16 %120 to i8
  %123 = select i1 %121, i8 %122, i8 0
  %124 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i64 0, i64 %118
  store i8 %123, i8* %124, align 1
  %125 = add nuw i64 %118, 1
  %126 = icmp eq i64 %125, %21
  br i1 %126, label %103, label %117, !llvm.loop !4

127:                                              ; preds = %103, %23
  %128 = phi i64 [ %25, %23 ], [ %116, %103 ]
  %129 = phi double [ %24, %23 ], [ %114, %103 ]
  %130 = icmp eq i64 %128, 0
  br i1 %130, label %131, label %134

131:                                              ; preds = %127
  %132 = icmp eq i8* %2, null
  br i1 %132, label %140, label %133

133:                                              ; preds = %131
  store i8 0, i8* %2, align 1
  br label %140

134:                                              ; preds = %127
  %135 = add i64 %128, %19
  store i64 %135, i64* %6, align 8
  %136 = icmp eq i8* %2, null
  br i1 %136, label %140, label %137

137:                                              ; preds = %134
  %138 = icmp eq i64 %135, %1
  %139 = zext i1 %138 to i8
  store i8 %139, i8* %2, align 1
  br label %140

140:                                              ; preds = %131, %133, %134, %137
  %141 = phi double [ 0.000000e+00, %131 ], [ 0.000000e+00, %133 ], [ %129, %134 ], [ %129, %137 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #6
  ret double %141
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN3WTF18CharactersToDoubleEPKhmRm(i8*, i64, i64* nocapture dereferenceable(8)) local_unnamed_addr #1 {
  %4 = alloca i32, align 4
  %5 = icmp eq i64 %1, 0
  br i1 %5, label %15, label %6

6:                                                ; preds = %3, %12
  %7 = phi i64 [ %13, %12 ], [ 0, %3 ]
  %8 = getelementptr inbounds i8, i8* %0, i64 %7
  %9 = load i8, i8* %8, align 1
  %10 = icmp ult i8 %9, 33
  br i1 %10, label %11, label %15

11:                                               ; preds = %6
  switch i8 %9, label %15 [
    i8 32, label %12
    i8 13, label %12
    i8 12, label %12
    i8 11, label %12
    i8 10, label %12
    i8 9, label %12
  ]

12:                                               ; preds = %11, %11, %11, %11, %11, %11
  %13 = add nuw i64 %7, 1
  %14 = icmp eq i64 %13, %1
  br i1 %14, label %15, label %6

15:                                               ; preds = %12, %11, %6, %3
  %16 = phi i64 [ 0, %3 ], [ %1, %12 ], [ %7, %6 ], [ %7, %11 ]
  %17 = getelementptr inbounds i8, i8* %0, i64 %16
  %18 = sub i64 %1, %16
  %19 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %19) #6
  store i32 0, i32* %4, align 4
  %20 = tail call dereferenceable(48) %"class.double_conversion::StringToDoubleConverter"* @_ZN3WTF8internal18GetDoubleConverterEv() #6
  %21 = tail call i1 @llvm.is.constant.i64(i64 %18) #6
  %22 = icmp ult i64 %18, 2147483648
  %23 = trunc i64 %18 to i32
  %24 = select i1 %22, i32 %23, i32 2147483647
  %25 = icmp ult i64 %18, 2147483647
  %26 = select i1 %25, i64 %18, i64 2147483647
  %27 = trunc i64 %26 to i32
  %28 = select i1 %21, i32 %27, i32 %24
  %29 = call double @_ZNK17double_conversion23StringToDoubleConverter14StringToDoubleEPKciPi(%"class.double_conversion::StringToDoubleConverter"* %20, i8* %17, i32 %28, i32* nonnull %4) #6
  %30 = load i32, i32* %4, align 4
  %31 = sext i32 %30 to i64
  store i64 %31, i64* %2, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %19) #6
  %32 = icmp eq i32 %30, 0
  br i1 %32, label %35, label %33

33:                                               ; preds = %15
  %34 = add i64 %16, %31
  store i64 %34, i64* %2, align 8
  br label %35

35:                                               ; preds = %15, %33
  %36 = phi double [ %29, %33 ], [ 0.000000e+00, %15 ]
  ret double %36
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN3WTF18CharactersToDoubleEPKDsmRm(i16*, i64, i64* dereferenceable(8)) local_unnamed_addr #1 {
  %4 = alloca i32, align 4
  %5 = alloca [64 x i8], align 16
  %6 = icmp eq i64 %1, 0
  br i1 %6, label %16, label %7

7:                                                ; preds = %3, %13
  %8 = phi i64 [ %14, %13 ], [ 0, %3 ]
  %9 = getelementptr inbounds i16, i16* %0, i64 %8
  %10 = load i16, i16* %9, align 2
  %11 = icmp ult i16 %10, 33
  br i1 %11, label %12, label %16

12:                                               ; preds = %7
  switch i16 %10, label %16 [
    i16 32, label %13
    i16 13, label %13
    i16 12, label %13
    i16 11, label %13
    i16 10, label %13
    i16 9, label %13
  ]

13:                                               ; preds = %12, %12, %12, %12, %12, %12
  %14 = add nuw i64 %8, 1
  %15 = icmp eq i64 %14, %1
  br i1 %15, label %16, label %7

16:                                               ; preds = %13, %12, %7, %3
  %17 = phi i64 [ 0, %3 ], [ %1, %13 ], [ %8, %7 ], [ %8, %12 ]
  %18 = getelementptr inbounds i16, i16* %0, i64 %17
  %19 = sub i64 %1, %17
  %20 = icmp ugt i64 %19, 64
  br i1 %20, label %21, label %24

21:                                               ; preds = %16
  %22 = tail call double @_ZN3WTF8internal25ParseDoubleFromLongStringEPKDsmRm(i16* %18, i64 %19, i64* dereferenceable(8) %2) #6
  %23 = load i64, i64* %2, align 8
  br label %125

24:                                               ; preds = %16
  %25 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %25) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %25, i8 -86, i64 64, i1 false) #6
  %26 = icmp eq i64 %19, 0
  br i1 %26, label %101, label %27

27:                                               ; preds = %24
  %28 = icmp ult i64 %19, 16
  br i1 %28, label %29, label %31

29:                                               ; preds = %99, %27
  %30 = phi i64 [ 0, %27 ], [ %32, %99 ]
  br label %115

31:                                               ; preds = %27
  %32 = and i64 %19, -16
  %33 = add i64 %32, -16
  %34 = lshr exact i64 %33, 4
  %35 = add nuw nsw i64 %34, 1
  %36 = and i64 %35, 1
  %37 = icmp eq i64 %33, 0
  br i1 %37, label %79, label %38

38:                                               ; preds = %31
  %39 = sub nuw nsw i64 %35, %36
  br label %40

40:                                               ; preds = %40, %38
  %41 = phi i64 [ 0, %38 ], [ %76, %40 ]
  %42 = phi i64 [ %39, %38 ], [ %77, %40 ]
  %43 = getelementptr inbounds i16, i16* %18, i64 %41
  %44 = bitcast i16* %43 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 2
  %46 = getelementptr inbounds i16, i16* %43, i64 8
  %47 = bitcast i16* %46 to <8 x i16>*
  %48 = load <8 x i16>, <8 x i16>* %47, align 2
  %49 = icmp ult <8 x i16> %45, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %50 = icmp ult <8 x i16> %48, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %51 = trunc <8 x i16> %45 to <8 x i8>
  %52 = trunc <8 x i16> %48 to <8 x i8>
  %53 = select <8 x i1> %49, <8 x i8> %51, <8 x i8> zeroinitializer
  %54 = select <8 x i1> %50, <8 x i8> %52, <8 x i8> zeroinitializer
  %55 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i64 0, i64 %41
  %56 = bitcast i8* %55 to <8 x i8>*
  store <8 x i8> %53, <8 x i8>* %56, align 16
  %57 = getelementptr inbounds i8, i8* %55, i64 8
  %58 = bitcast i8* %57 to <8 x i8>*
  store <8 x i8> %54, <8 x i8>* %58, align 8
  %59 = or i64 %41, 16
  %60 = getelementptr inbounds i16, i16* %18, i64 %59
  %61 = bitcast i16* %60 to <8 x i16>*
  %62 = load <8 x i16>, <8 x i16>* %61, align 2
  %63 = getelementptr inbounds i16, i16* %60, i64 8
  %64 = bitcast i16* %63 to <8 x i16>*
  %65 = load <8 x i16>, <8 x i16>* %64, align 2
  %66 = icmp ult <8 x i16> %62, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %67 = icmp ult <8 x i16> %65, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %68 = trunc <8 x i16> %62 to <8 x i8>
  %69 = trunc <8 x i16> %65 to <8 x i8>
  %70 = select <8 x i1> %66, <8 x i8> %68, <8 x i8> zeroinitializer
  %71 = select <8 x i1> %67, <8 x i8> %69, <8 x i8> zeroinitializer
  %72 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i64 0, i64 %59
  %73 = bitcast i8* %72 to <8 x i8>*
  store <8 x i8> %70, <8 x i8>* %73, align 16
  %74 = getelementptr inbounds i8, i8* %72, i64 8
  %75 = bitcast i8* %74 to <8 x i8>*
  store <8 x i8> %71, <8 x i8>* %75, align 8
  %76 = add i64 %41, 32
  %77 = add i64 %42, -2
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %79, label %40, !llvm.loop !6

79:                                               ; preds = %40, %31
  %80 = phi i64 [ 0, %31 ], [ %76, %40 ]
  %81 = icmp eq i64 %36, 0
  br i1 %81, label %99, label %82

82:                                               ; preds = %79
  %83 = getelementptr inbounds i16, i16* %18, i64 %80
  %84 = bitcast i16* %83 to <8 x i16>*
  %85 = load <8 x i16>, <8 x i16>* %84, align 2
  %86 = getelementptr inbounds i16, i16* %83, i64 8
  %87 = bitcast i16* %86 to <8 x i16>*
  %88 = load <8 x i16>, <8 x i16>* %87, align 2
  %89 = icmp ult <8 x i16> %85, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %90 = icmp ult <8 x i16> %88, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %91 = trunc <8 x i16> %85 to <8 x i8>
  %92 = trunc <8 x i16> %88 to <8 x i8>
  %93 = select <8 x i1> %89, <8 x i8> %91, <8 x i8> zeroinitializer
  %94 = select <8 x i1> %90, <8 x i8> %92, <8 x i8> zeroinitializer
  %95 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i64 0, i64 %80
  %96 = bitcast i8* %95 to <8 x i8>*
  store <8 x i8> %93, <8 x i8>* %96, align 16
  %97 = getelementptr inbounds i8, i8* %95, i64 8
  %98 = bitcast i8* %97 to <8 x i8>*
  store <8 x i8> %94, <8 x i8>* %98, align 8
  br label %99

99:                                               ; preds = %79, %82
  %100 = icmp eq i64 %19, %32
  br i1 %100, label %101, label %29

101:                                              ; preds = %115, %99, %24
  %102 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %102) #6
  store i32 0, i32* %4, align 4
  %103 = tail call dereferenceable(48) %"class.double_conversion::StringToDoubleConverter"* @_ZN3WTF8internal18GetDoubleConverterEv() #6
  %104 = tail call i1 @llvm.is.constant.i64(i64 %19) #6
  %105 = icmp ult i64 %19, 2147483648
  %106 = trunc i64 %19 to i32
  %107 = select i1 %105, i32 %106, i32 2147483647
  %108 = icmp ult i64 %19, 2147483647
  %109 = select i1 %108, i64 %19, i64 2147483647
  %110 = trunc i64 %109 to i32
  %111 = select i1 %104, i32 %110, i32 %107
  %112 = call double @_ZNK17double_conversion23StringToDoubleConverter14StringToDoubleEPKciPi(%"class.double_conversion::StringToDoubleConverter"* %103, i8* nonnull %25, i32 %111, i32* nonnull %4) #6
  %113 = load i32, i32* %4, align 4
  %114 = sext i32 %113 to i64
  store i64 %114, i64* %2, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %102) #6
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %25) #6
  br label %125

115:                                              ; preds = %29, %115
  %116 = phi i64 [ %123, %115 ], [ %30, %29 ]
  %117 = getelementptr inbounds i16, i16* %18, i64 %116
  %118 = load i16, i16* %117, align 2
  %119 = icmp ult i16 %118, 128
  %120 = trunc i16 %118 to i8
  %121 = select i1 %119, i8 %120, i8 0
  %122 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i64 0, i64 %116
  store i8 %121, i8* %122, align 1
  %123 = add nuw i64 %116, 1
  %124 = icmp eq i64 %123, %19
  br i1 %124, label %101, label %115, !llvm.loop !7

125:                                              ; preds = %101, %21
  %126 = phi i64 [ %23, %21 ], [ %114, %101 ]
  %127 = phi double [ %22, %21 ], [ %112, %101 ]
  %128 = icmp eq i64 %126, 0
  br i1 %128, label %131, label %129

129:                                              ; preds = %125
  %130 = add i64 %126, %17
  store i64 %130, i64* %2, align 8
  br label %131

131:                                              ; preds = %125, %129
  %132 = phi double [ %127, %129 ], [ 0.000000e+00, %125 ]
  ret double %132
}

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZN3WTF17CharactersToFloatEPKhmPb(i8*, i64, i8*) local_unnamed_addr #1 {
  %4 = alloca i32, align 4
  %5 = icmp eq i64 %1, 0
  br i1 %5, label %15, label %6

6:                                                ; preds = %3, %12
  %7 = phi i64 [ %13, %12 ], [ 0, %3 ]
  %8 = getelementptr inbounds i8, i8* %0, i64 %7
  %9 = load i8, i8* %8, align 1
  %10 = icmp ult i8 %9, 33
  br i1 %10, label %11, label %15

11:                                               ; preds = %6
  switch i8 %9, label %15 [
    i8 32, label %12
    i8 13, label %12
    i8 12, label %12
    i8 11, label %12
    i8 10, label %12
    i8 9, label %12
  ]

12:                                               ; preds = %11, %11, %11, %11, %11, %11
  %13 = add nuw i64 %7, 1
  %14 = icmp eq i64 %13, %1
  br i1 %14, label %15, label %6

15:                                               ; preds = %12, %11, %6, %3
  %16 = phi i64 [ 0, %3 ], [ %1, %12 ], [ %7, %6 ], [ %7, %11 ]
  %17 = getelementptr inbounds i8, i8* %0, i64 %16
  %18 = sub i64 %1, %16
  %19 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %19) #6
  store i32 0, i32* %4, align 4
  %20 = tail call dereferenceable(48) %"class.double_conversion::StringToDoubleConverter"* @_ZN3WTF8internal18GetDoubleConverterEv() #6
  %21 = tail call i1 @llvm.is.constant.i64(i64 %18) #6
  %22 = icmp ult i64 %18, 2147483648
  %23 = trunc i64 %18 to i32
  %24 = select i1 %22, i32 %23, i32 2147483647
  %25 = icmp ult i64 %18, 2147483647
  %26 = select i1 %25, i64 %18, i64 2147483647
  %27 = trunc i64 %26 to i32
  %28 = select i1 %21, i32 %27, i32 %24
  %29 = call double @_ZNK17double_conversion23StringToDoubleConverter14StringToDoubleEPKciPi(%"class.double_conversion::StringToDoubleConverter"* %20, i8* %17, i32 %28, i32* nonnull %4) #6
  %30 = load i32, i32* %4, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %19) #6
  %31 = icmp eq i32 %30, 0
  %32 = icmp eq i8* %2, null
  br i1 %31, label %33, label %35

33:                                               ; preds = %15
  br i1 %32, label %41, label %34

34:                                               ; preds = %33
  store i8 0, i8* %2, align 1
  br label %41

35:                                               ; preds = %15
  br i1 %32, label %41, label %36

36:                                               ; preds = %35
  %37 = sext i32 %30 to i64
  %38 = add i64 %16, %37
  %39 = icmp eq i64 %38, %1
  %40 = zext i1 %39 to i8
  store i8 %40, i8* %2, align 1
  br label %41

41:                                               ; preds = %33, %34, %35, %36
  %42 = phi double [ 0.000000e+00, %33 ], [ 0.000000e+00, %34 ], [ %29, %35 ], [ %29, %36 ]
  %43 = fptrunc double %42 to float
  ret float %43
}

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZN3WTF17CharactersToFloatEPKDsmPb(i16*, i64, i8*) local_unnamed_addr #1 {
  %4 = alloca i32, align 4
  %5 = alloca [64 x i8], align 16
  %6 = alloca i64, align 8
  %7 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #6
  store i64 -6148914691236517206, i64* %6, align 8
  %8 = icmp eq i64 %1, 0
  br i1 %8, label %18, label %9

9:                                                ; preds = %3, %15
  %10 = phi i64 [ %16, %15 ], [ 0, %3 ]
  %11 = getelementptr inbounds i16, i16* %0, i64 %10
  %12 = load i16, i16* %11, align 2
  %13 = icmp ult i16 %12, 33
  br i1 %13, label %14, label %18

14:                                               ; preds = %9
  switch i16 %12, label %18 [
    i16 32, label %15
    i16 13, label %15
    i16 12, label %15
    i16 11, label %15
    i16 10, label %15
    i16 9, label %15
  ]

15:                                               ; preds = %14, %14, %14, %14, %14, %14
  %16 = add nuw i64 %10, 1
  %17 = icmp eq i64 %16, %1
  br i1 %17, label %18, label %9

18:                                               ; preds = %15, %14, %9, %3
  %19 = phi i64 [ 0, %3 ], [ %1, %15 ], [ %10, %9 ], [ %10, %14 ]
  %20 = getelementptr inbounds i16, i16* %0, i64 %19
  %21 = sub i64 %1, %19
  %22 = icmp ugt i64 %21, 64
  br i1 %22, label %23, label %26

23:                                               ; preds = %18
  %24 = call double @_ZN3WTF8internal25ParseDoubleFromLongStringEPKDsmRm(i16* %20, i64 %21, i64* nonnull dereferenceable(8) %6) #6
  %25 = load i64, i64* %6, align 8
  br label %127

26:                                               ; preds = %18
  %27 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %27) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %27, i8 -86, i64 64, i1 false) #6
  %28 = icmp eq i64 %21, 0
  br i1 %28, label %103, label %29

29:                                               ; preds = %26
  %30 = icmp ult i64 %21, 16
  br i1 %30, label %31, label %33

31:                                               ; preds = %101, %29
  %32 = phi i64 [ 0, %29 ], [ %34, %101 ]
  br label %117

33:                                               ; preds = %29
  %34 = and i64 %21, -16
  %35 = add i64 %34, -16
  %36 = lshr exact i64 %35, 4
  %37 = add nuw nsw i64 %36, 1
  %38 = and i64 %37, 1
  %39 = icmp eq i64 %35, 0
  br i1 %39, label %81, label %40

40:                                               ; preds = %33
  %41 = sub nuw nsw i64 %37, %38
  br label %42

42:                                               ; preds = %42, %40
  %43 = phi i64 [ 0, %40 ], [ %78, %42 ]
  %44 = phi i64 [ %41, %40 ], [ %79, %42 ]
  %45 = getelementptr inbounds i16, i16* %20, i64 %43
  %46 = bitcast i16* %45 to <8 x i16>*
  %47 = load <8 x i16>, <8 x i16>* %46, align 2
  %48 = getelementptr inbounds i16, i16* %45, i64 8
  %49 = bitcast i16* %48 to <8 x i16>*
  %50 = load <8 x i16>, <8 x i16>* %49, align 2
  %51 = icmp ult <8 x i16> %47, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %52 = icmp ult <8 x i16> %50, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %53 = trunc <8 x i16> %47 to <8 x i8>
  %54 = trunc <8 x i16> %50 to <8 x i8>
  %55 = select <8 x i1> %51, <8 x i8> %53, <8 x i8> zeroinitializer
  %56 = select <8 x i1> %52, <8 x i8> %54, <8 x i8> zeroinitializer
  %57 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i64 0, i64 %43
  %58 = bitcast i8* %57 to <8 x i8>*
  store <8 x i8> %55, <8 x i8>* %58, align 16
  %59 = getelementptr inbounds i8, i8* %57, i64 8
  %60 = bitcast i8* %59 to <8 x i8>*
  store <8 x i8> %56, <8 x i8>* %60, align 8
  %61 = or i64 %43, 16
  %62 = getelementptr inbounds i16, i16* %20, i64 %61
  %63 = bitcast i16* %62 to <8 x i16>*
  %64 = load <8 x i16>, <8 x i16>* %63, align 2
  %65 = getelementptr inbounds i16, i16* %62, i64 8
  %66 = bitcast i16* %65 to <8 x i16>*
  %67 = load <8 x i16>, <8 x i16>* %66, align 2
  %68 = icmp ult <8 x i16> %64, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %69 = icmp ult <8 x i16> %67, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %70 = trunc <8 x i16> %64 to <8 x i8>
  %71 = trunc <8 x i16> %67 to <8 x i8>
  %72 = select <8 x i1> %68, <8 x i8> %70, <8 x i8> zeroinitializer
  %73 = select <8 x i1> %69, <8 x i8> %71, <8 x i8> zeroinitializer
  %74 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i64 0, i64 %61
  %75 = bitcast i8* %74 to <8 x i8>*
  store <8 x i8> %72, <8 x i8>* %75, align 16
  %76 = getelementptr inbounds i8, i8* %74, i64 8
  %77 = bitcast i8* %76 to <8 x i8>*
  store <8 x i8> %73, <8 x i8>* %77, align 8
  %78 = add i64 %43, 32
  %79 = add i64 %44, -2
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %81, label %42, !llvm.loop !8

81:                                               ; preds = %42, %33
  %82 = phi i64 [ 0, %33 ], [ %78, %42 ]
  %83 = icmp eq i64 %38, 0
  br i1 %83, label %101, label %84

84:                                               ; preds = %81
  %85 = getelementptr inbounds i16, i16* %20, i64 %82
  %86 = bitcast i16* %85 to <8 x i16>*
  %87 = load <8 x i16>, <8 x i16>* %86, align 2
  %88 = getelementptr inbounds i16, i16* %85, i64 8
  %89 = bitcast i16* %88 to <8 x i16>*
  %90 = load <8 x i16>, <8 x i16>* %89, align 2
  %91 = icmp ult <8 x i16> %87, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %92 = icmp ult <8 x i16> %90, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %93 = trunc <8 x i16> %87 to <8 x i8>
  %94 = trunc <8 x i16> %90 to <8 x i8>
  %95 = select <8 x i1> %91, <8 x i8> %93, <8 x i8> zeroinitializer
  %96 = select <8 x i1> %92, <8 x i8> %94, <8 x i8> zeroinitializer
  %97 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i64 0, i64 %82
  %98 = bitcast i8* %97 to <8 x i8>*
  store <8 x i8> %95, <8 x i8>* %98, align 16
  %99 = getelementptr inbounds i8, i8* %97, i64 8
  %100 = bitcast i8* %99 to <8 x i8>*
  store <8 x i8> %96, <8 x i8>* %100, align 8
  br label %101

101:                                              ; preds = %81, %84
  %102 = icmp eq i64 %21, %34
  br i1 %102, label %103, label %31

103:                                              ; preds = %117, %101, %26
  %104 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %104) #6
  store i32 0, i32* %4, align 4
  %105 = tail call dereferenceable(48) %"class.double_conversion::StringToDoubleConverter"* @_ZN3WTF8internal18GetDoubleConverterEv() #6
  %106 = tail call i1 @llvm.is.constant.i64(i64 %21) #6
  %107 = icmp ult i64 %21, 2147483648
  %108 = trunc i64 %21 to i32
  %109 = select i1 %107, i32 %108, i32 2147483647
  %110 = icmp ult i64 %21, 2147483647
  %111 = select i1 %110, i64 %21, i64 2147483647
  %112 = trunc i64 %111 to i32
  %113 = select i1 %106, i32 %112, i32 %109
  %114 = call double @_ZNK17double_conversion23StringToDoubleConverter14StringToDoubleEPKciPi(%"class.double_conversion::StringToDoubleConverter"* %105, i8* nonnull %27, i32 %113, i32* nonnull %4) #6
  %115 = load i32, i32* %4, align 4
  %116 = sext i32 %115 to i64
  store i64 %116, i64* %6, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %104) #6
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %27) #6
  br label %127

117:                                              ; preds = %31, %117
  %118 = phi i64 [ %125, %117 ], [ %32, %31 ]
  %119 = getelementptr inbounds i16, i16* %20, i64 %118
  %120 = load i16, i16* %119, align 2
  %121 = icmp ult i16 %120, 128
  %122 = trunc i16 %120 to i8
  %123 = select i1 %121, i8 %122, i8 0
  %124 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i64 0, i64 %118
  store i8 %123, i8* %124, align 1
  %125 = add nuw i64 %118, 1
  %126 = icmp eq i64 %125, %21
  br i1 %126, label %103, label %117, !llvm.loop !9

127:                                              ; preds = %103, %23
  %128 = phi i64 [ %25, %23 ], [ %116, %103 ]
  %129 = phi double [ %24, %23 ], [ %114, %103 ]
  %130 = icmp eq i64 %128, 0
  br i1 %130, label %131, label %134

131:                                              ; preds = %127
  %132 = icmp eq i8* %2, null
  br i1 %132, label %140, label %133

133:                                              ; preds = %131
  store i8 0, i8* %2, align 1
  br label %140

134:                                              ; preds = %127
  %135 = add i64 %128, %19
  store i64 %135, i64* %6, align 8
  %136 = icmp eq i8* %2, null
  br i1 %136, label %140, label %137

137:                                              ; preds = %134
  %138 = icmp eq i64 %135, %1
  %139 = zext i1 %138 to i8
  store i8 %139, i8* %2, align 1
  br label %140

140:                                              ; preds = %131, %133, %134, %137
  %141 = phi double [ 0.000000e+00, %131 ], [ 0.000000e+00, %133 ], [ %129, %134 ], [ %129, %137 ]
  %142 = fptrunc double %141 to float
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #6
  ret float %142
}

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZN3WTF17CharactersToFloatEPKhmRm(i8*, i64, i64* nocapture dereferenceable(8)) local_unnamed_addr #1 {
  %4 = alloca i32, align 4
  %5 = icmp eq i64 %1, 0
  br i1 %5, label %15, label %6

6:                                                ; preds = %3, %12
  %7 = phi i64 [ %13, %12 ], [ 0, %3 ]
  %8 = getelementptr inbounds i8, i8* %0, i64 %7
  %9 = load i8, i8* %8, align 1
  %10 = icmp ult i8 %9, 33
  br i1 %10, label %11, label %15

11:                                               ; preds = %6
  switch i8 %9, label %15 [
    i8 32, label %12
    i8 13, label %12
    i8 12, label %12
    i8 11, label %12
    i8 10, label %12
    i8 9, label %12
  ]

12:                                               ; preds = %11, %11, %11, %11, %11, %11
  %13 = add nuw i64 %7, 1
  %14 = icmp eq i64 %13, %1
  br i1 %14, label %15, label %6

15:                                               ; preds = %12, %11, %6, %3
  %16 = phi i64 [ 0, %3 ], [ %1, %12 ], [ %7, %6 ], [ %7, %11 ]
  %17 = getelementptr inbounds i8, i8* %0, i64 %16
  %18 = sub i64 %1, %16
  %19 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %19) #6
  store i32 0, i32* %4, align 4
  %20 = tail call dereferenceable(48) %"class.double_conversion::StringToDoubleConverter"* @_ZN3WTF8internal18GetDoubleConverterEv() #6
  %21 = tail call i1 @llvm.is.constant.i64(i64 %18) #6
  %22 = icmp ult i64 %18, 2147483648
  %23 = trunc i64 %18 to i32
  %24 = select i1 %22, i32 %23, i32 2147483647
  %25 = icmp ult i64 %18, 2147483647
  %26 = select i1 %25, i64 %18, i64 2147483647
  %27 = trunc i64 %26 to i32
  %28 = select i1 %21, i32 %27, i32 %24
  %29 = call double @_ZNK17double_conversion23StringToDoubleConverter14StringToDoubleEPKciPi(%"class.double_conversion::StringToDoubleConverter"* %20, i8* %17, i32 %28, i32* nonnull %4) #6
  %30 = load i32, i32* %4, align 4
  %31 = sext i32 %30 to i64
  store i64 %31, i64* %2, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %19) #6
  %32 = icmp eq i32 %30, 0
  br i1 %32, label %36, label %33

33:                                               ; preds = %15
  %34 = add i64 %16, %31
  store i64 %34, i64* %2, align 8
  %35 = fptrunc double %29 to float
  br label %36

36:                                               ; preds = %15, %33
  %37 = phi float [ %35, %33 ], [ 0.000000e+00, %15 ]
  ret float %37
}

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZN3WTF17CharactersToFloatEPKDsmRm(i16*, i64, i64* dereferenceable(8)) local_unnamed_addr #1 {
  %4 = alloca i32, align 4
  %5 = alloca [64 x i8], align 16
  %6 = icmp eq i64 %1, 0
  br i1 %6, label %16, label %7

7:                                                ; preds = %3, %13
  %8 = phi i64 [ %14, %13 ], [ 0, %3 ]
  %9 = getelementptr inbounds i16, i16* %0, i64 %8
  %10 = load i16, i16* %9, align 2
  %11 = icmp ult i16 %10, 33
  br i1 %11, label %12, label %16

12:                                               ; preds = %7
  switch i16 %10, label %16 [
    i16 32, label %13
    i16 13, label %13
    i16 12, label %13
    i16 11, label %13
    i16 10, label %13
    i16 9, label %13
  ]

13:                                               ; preds = %12, %12, %12, %12, %12, %12
  %14 = add nuw i64 %8, 1
  %15 = icmp eq i64 %14, %1
  br i1 %15, label %16, label %7

16:                                               ; preds = %13, %12, %7, %3
  %17 = phi i64 [ 0, %3 ], [ %1, %13 ], [ %8, %7 ], [ %8, %12 ]
  %18 = getelementptr inbounds i16, i16* %0, i64 %17
  %19 = sub i64 %1, %17
  %20 = icmp ugt i64 %19, 64
  br i1 %20, label %21, label %24

21:                                               ; preds = %16
  %22 = tail call double @_ZN3WTF8internal25ParseDoubleFromLongStringEPKDsmRm(i16* %18, i64 %19, i64* dereferenceable(8) %2) #6
  %23 = load i64, i64* %2, align 8
  br label %125

24:                                               ; preds = %16
  %25 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %25) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %25, i8 -86, i64 64, i1 false) #6
  %26 = icmp eq i64 %19, 0
  br i1 %26, label %101, label %27

27:                                               ; preds = %24
  %28 = icmp ult i64 %19, 16
  br i1 %28, label %29, label %31

29:                                               ; preds = %99, %27
  %30 = phi i64 [ 0, %27 ], [ %32, %99 ]
  br label %115

31:                                               ; preds = %27
  %32 = and i64 %19, -16
  %33 = add i64 %32, -16
  %34 = lshr exact i64 %33, 4
  %35 = add nuw nsw i64 %34, 1
  %36 = and i64 %35, 1
  %37 = icmp eq i64 %33, 0
  br i1 %37, label %79, label %38

38:                                               ; preds = %31
  %39 = sub nuw nsw i64 %35, %36
  br label %40

40:                                               ; preds = %40, %38
  %41 = phi i64 [ 0, %38 ], [ %76, %40 ]
  %42 = phi i64 [ %39, %38 ], [ %77, %40 ]
  %43 = getelementptr inbounds i16, i16* %18, i64 %41
  %44 = bitcast i16* %43 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 2
  %46 = getelementptr inbounds i16, i16* %43, i64 8
  %47 = bitcast i16* %46 to <8 x i16>*
  %48 = load <8 x i16>, <8 x i16>* %47, align 2
  %49 = icmp ult <8 x i16> %45, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %50 = icmp ult <8 x i16> %48, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %51 = trunc <8 x i16> %45 to <8 x i8>
  %52 = trunc <8 x i16> %48 to <8 x i8>
  %53 = select <8 x i1> %49, <8 x i8> %51, <8 x i8> zeroinitializer
  %54 = select <8 x i1> %50, <8 x i8> %52, <8 x i8> zeroinitializer
  %55 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i64 0, i64 %41
  %56 = bitcast i8* %55 to <8 x i8>*
  store <8 x i8> %53, <8 x i8>* %56, align 16
  %57 = getelementptr inbounds i8, i8* %55, i64 8
  %58 = bitcast i8* %57 to <8 x i8>*
  store <8 x i8> %54, <8 x i8>* %58, align 8
  %59 = or i64 %41, 16
  %60 = getelementptr inbounds i16, i16* %18, i64 %59
  %61 = bitcast i16* %60 to <8 x i16>*
  %62 = load <8 x i16>, <8 x i16>* %61, align 2
  %63 = getelementptr inbounds i16, i16* %60, i64 8
  %64 = bitcast i16* %63 to <8 x i16>*
  %65 = load <8 x i16>, <8 x i16>* %64, align 2
  %66 = icmp ult <8 x i16> %62, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %67 = icmp ult <8 x i16> %65, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %68 = trunc <8 x i16> %62 to <8 x i8>
  %69 = trunc <8 x i16> %65 to <8 x i8>
  %70 = select <8 x i1> %66, <8 x i8> %68, <8 x i8> zeroinitializer
  %71 = select <8 x i1> %67, <8 x i8> %69, <8 x i8> zeroinitializer
  %72 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i64 0, i64 %59
  %73 = bitcast i8* %72 to <8 x i8>*
  store <8 x i8> %70, <8 x i8>* %73, align 16
  %74 = getelementptr inbounds i8, i8* %72, i64 8
  %75 = bitcast i8* %74 to <8 x i8>*
  store <8 x i8> %71, <8 x i8>* %75, align 8
  %76 = add i64 %41, 32
  %77 = add i64 %42, -2
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %79, label %40, !llvm.loop !10

79:                                               ; preds = %40, %31
  %80 = phi i64 [ 0, %31 ], [ %76, %40 ]
  %81 = icmp eq i64 %36, 0
  br i1 %81, label %99, label %82

82:                                               ; preds = %79
  %83 = getelementptr inbounds i16, i16* %18, i64 %80
  %84 = bitcast i16* %83 to <8 x i16>*
  %85 = load <8 x i16>, <8 x i16>* %84, align 2
  %86 = getelementptr inbounds i16, i16* %83, i64 8
  %87 = bitcast i16* %86 to <8 x i16>*
  %88 = load <8 x i16>, <8 x i16>* %87, align 2
  %89 = icmp ult <8 x i16> %85, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %90 = icmp ult <8 x i16> %88, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %91 = trunc <8 x i16> %85 to <8 x i8>
  %92 = trunc <8 x i16> %88 to <8 x i8>
  %93 = select <8 x i1> %89, <8 x i8> %91, <8 x i8> zeroinitializer
  %94 = select <8 x i1> %90, <8 x i8> %92, <8 x i8> zeroinitializer
  %95 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i64 0, i64 %80
  %96 = bitcast i8* %95 to <8 x i8>*
  store <8 x i8> %93, <8 x i8>* %96, align 16
  %97 = getelementptr inbounds i8, i8* %95, i64 8
  %98 = bitcast i8* %97 to <8 x i8>*
  store <8 x i8> %94, <8 x i8>* %98, align 8
  br label %99

99:                                               ; preds = %79, %82
  %100 = icmp eq i64 %19, %32
  br i1 %100, label %101, label %29

101:                                              ; preds = %115, %99, %24
  %102 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %102) #6
  store i32 0, i32* %4, align 4
  %103 = tail call dereferenceable(48) %"class.double_conversion::StringToDoubleConverter"* @_ZN3WTF8internal18GetDoubleConverterEv() #6
  %104 = tail call i1 @llvm.is.constant.i64(i64 %19) #6
  %105 = icmp ult i64 %19, 2147483648
  %106 = trunc i64 %19 to i32
  %107 = select i1 %105, i32 %106, i32 2147483647
  %108 = icmp ult i64 %19, 2147483647
  %109 = select i1 %108, i64 %19, i64 2147483647
  %110 = trunc i64 %109 to i32
  %111 = select i1 %104, i32 %110, i32 %107
  %112 = call double @_ZNK17double_conversion23StringToDoubleConverter14StringToDoubleEPKciPi(%"class.double_conversion::StringToDoubleConverter"* %103, i8* nonnull %25, i32 %111, i32* nonnull %4) #6
  %113 = load i32, i32* %4, align 4
  %114 = sext i32 %113 to i64
  store i64 %114, i64* %2, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %102) #6
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %25) #6
  br label %125

115:                                              ; preds = %29, %115
  %116 = phi i64 [ %123, %115 ], [ %30, %29 ]
  %117 = getelementptr inbounds i16, i16* %18, i64 %116
  %118 = load i16, i16* %117, align 2
  %119 = icmp ult i16 %118, 128
  %120 = trunc i16 %118 to i8
  %121 = select i1 %119, i8 %120, i8 0
  %122 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i64 0, i64 %116
  store i8 %121, i8* %122, align 1
  %123 = add nuw i64 %116, 1
  %124 = icmp eq i64 %123, %19
  br i1 %124, label %101, label %115, !llvm.loop !11

125:                                              ; preds = %101, %21
  %126 = phi i64 [ %23, %21 ], [ %114, %101 ]
  %127 = phi double [ %22, %21 ], [ %112, %101 ]
  %128 = icmp eq i64 %126, 0
  br i1 %128, label %131, label %129

129:                                              ; preds = %125
  %130 = add i64 %126, %17
  store i64 %130, i64* %2, align 8
  br label %131

131:                                              ; preds = %125, %129
  %132 = phi double [ %127, %129 ], [ 0.000000e+00, %125 ]
  %133 = fptrunc double %132 to float
  ret float %133
}

declare i32 @u_charDirection_69(i32) local_unnamed_addr #4

declare dereferenceable(48) %"class.double_conversion::StringToDoubleConverter"* @_ZN3WTF8internal18GetDoubleConverterEv() local_unnamed_addr #4

declare double @_ZNK17double_conversion23StringToDoubleConverter14StringToDoubleEPKciPi(%"class.double_conversion::StringToDoubleConverter"*, i8*, i32, i32*) local_unnamed_addr #4

; Function Attrs: nounwind readnone
declare i1 @llvm.is.constant.i64(i64) #5

declare double @_ZN3WTF8internal25ParseDoubleFromLongStringEPKDsmRm(i16*, i64, i64* dereferenceable(8)) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !5, !3}
!8 = distinct !{!8, !3}
!9 = distinct !{!9, !5, !3}
!10 = distinct !{!10, !3}
!11 = distinct !{!11, !5, !3}
