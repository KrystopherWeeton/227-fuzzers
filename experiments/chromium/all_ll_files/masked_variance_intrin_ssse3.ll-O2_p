; ModuleID = '../../third_party/libaom/source/libaom/aom_dsp/x86/masked_variance_intrin_ssse3.c'
source_filename = "../../third_party/libaom/source/libaom/aom_dsp/x86/masked_variance_intrin_ssse3.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@bilinear_filters_2t = internal unnamed_addr constant [8 x [2 x i8]] [[2 x i8] c"\80\00", [2 x i8] c"p\10", [2 x i8] c"` ", [2 x i8] c"P0", [2 x i8] c"@@", [2 x i8] c"0P", [2 x i8] c" `", [2 x i8] c"\10p"], align 16

; Function Attrs: nounwind ssp uwtable
define hidden i32 @aom_masked_sub_pixel_variance128x128_ssse3(i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32, i32* nocapture) local_unnamed_addr #0 {
  %12 = alloca [16512 x i8], align 16
  %13 = getelementptr inbounds [16512 x i8], [16512 x i8]* %12, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 16512, i8* nonnull %13) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 16512, i1 false)
  call fastcc void @bilinear_filter(i8* %0, i32 %1, i32 %2, i32 %3, i8* nonnull %13, i32 128, i32 128)
  %14 = icmp eq i32 %9, 0
  %15 = sext i32 %5 to i64
  %16 = sext i32 %8 to i64
  br i1 %14, label %17, label %77

17:                                               ; preds = %11, %67
  %18 = phi i32 [ %72, %67 ], [ 0, %11 ]
  %19 = phi i8* [ %68, %67 ], [ %4, %11 ]
  %20 = phi i8* [ %69, %67 ], [ %13, %11 ]
  %21 = phi i8* [ %70, %67 ], [ %6, %11 ]
  %22 = phi i8* [ %71, %67 ], [ %7, %11 ]
  %23 = phi <4 x i32> [ %60, %67 ], [ zeroinitializer, %11 ]
  %24 = phi <4 x i32> [ %64, %67 ], [ zeroinitializer, %11 ]
  br label %25

25:                                               ; preds = %25, %17
  %26 = phi i64 [ %65, %25 ], [ 0, %17 ]
  %27 = phi <4 x i32> [ %60, %25 ], [ %23, %17 ]
  %28 = phi <4 x i32> [ %64, %25 ], [ %24, %17 ]
  %29 = getelementptr inbounds i8, i8* %19, i64 %26
  %30 = bitcast i8* %29 to <16 x i8>*
  %31 = load <16 x i8>, <16 x i8>* %30, align 1
  %32 = getelementptr inbounds i8, i8* %20, i64 %26
  %33 = bitcast i8* %32 to <16 x i8>*
  %34 = load <16 x i8>, <16 x i8>* %33, align 1
  %35 = getelementptr inbounds i8, i8* %21, i64 %26
  %36 = bitcast i8* %35 to <16 x i8>*
  %37 = load <16 x i8>, <16 x i8>* %36, align 1
  %38 = getelementptr inbounds i8, i8* %22, i64 %26
  %39 = bitcast i8* %38 to <16 x i8>*
  %40 = load <16 x i8>, <16 x i8>* %39, align 1
  %41 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %40
  %42 = shufflevector <16 x i8> %34, <16 x i8> %37, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %43 = shufflevector <16 x i8> %40, <16 x i8> %41, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %44 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %42, <16 x i8> %43) #5
  %45 = lshr <8 x i16> %44, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %46 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %45, <8 x i16> zeroinitializer) #5
  %47 = shufflevector <16 x i8> %34, <16 x i8> %37, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %48 = shufflevector <16 x i8> %40, <16 x i8> %41, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %49 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %47, <16 x i8> %48) #5
  %50 = lshr <8 x i16> %49, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %51 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %50, <8 x i16> zeroinitializer) #5
  %52 = shufflevector <16 x i8> %31, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %53 = shufflevector <16 x i8> %31, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %54 = bitcast <16 x i8> %52 to <8 x i16>
  %55 = sub <8 x i16> %46, %54
  %56 = bitcast <16 x i8> %53 to <8 x i16>
  %57 = sub <8 x i16> %51, %56
  %58 = add <8 x i16> %57, %55
  %59 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %58, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %60 = add <4 x i32> %59, %27
  %61 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %55, <8 x i16> %55) #5
  %62 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %57, <8 x i16> %57) #5
  %63 = add <4 x i32> %61, %28
  %64 = add <4 x i32> %63, %62
  %65 = add nuw nsw i64 %26, 16
  %66 = icmp ult i64 %65, 128
  br i1 %66, label %25, label %67

67:                                               ; preds = %25
  %68 = getelementptr inbounds i8, i8* %19, i64 %15
  %69 = getelementptr inbounds i8, i8* %20, i64 128
  %70 = getelementptr inbounds i8, i8* %21, i64 128
  %71 = getelementptr inbounds i8, i8* %22, i64 %16
  %72 = add nuw nsw i32 %18, 1
  %73 = icmp eq i32 %72, 128
  br i1 %73, label %74, label %17

74:                                               ; preds = %67
  %75 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %60, <4 x i32> %64) #5
  %76 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %75, <4 x i32> %75) #5
  br label %137

77:                                               ; preds = %11, %127
  %78 = phi i32 [ %132, %127 ], [ 0, %11 ]
  %79 = phi i8* [ %128, %127 ], [ %4, %11 ]
  %80 = phi i8* [ %129, %127 ], [ %6, %11 ]
  %81 = phi i8* [ %130, %127 ], [ %13, %11 ]
  %82 = phi i8* [ %131, %127 ], [ %7, %11 ]
  %83 = phi <4 x i32> [ %120, %127 ], [ zeroinitializer, %11 ]
  %84 = phi <4 x i32> [ %124, %127 ], [ zeroinitializer, %11 ]
  br label %85

85:                                               ; preds = %85, %77
  %86 = phi i64 [ %125, %85 ], [ 0, %77 ]
  %87 = phi <4 x i32> [ %120, %85 ], [ %83, %77 ]
  %88 = phi <4 x i32> [ %124, %85 ], [ %84, %77 ]
  %89 = getelementptr inbounds i8, i8* %79, i64 %86
  %90 = bitcast i8* %89 to <16 x i8>*
  %91 = load <16 x i8>, <16 x i8>* %90, align 1
  %92 = getelementptr inbounds i8, i8* %80, i64 %86
  %93 = bitcast i8* %92 to <16 x i8>*
  %94 = load <16 x i8>, <16 x i8>* %93, align 1
  %95 = getelementptr inbounds i8, i8* %81, i64 %86
  %96 = bitcast i8* %95 to <16 x i8>*
  %97 = load <16 x i8>, <16 x i8>* %96, align 1
  %98 = getelementptr inbounds i8, i8* %82, i64 %86
  %99 = bitcast i8* %98 to <16 x i8>*
  %100 = load <16 x i8>, <16 x i8>* %99, align 1
  %101 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %100
  %102 = shufflevector <16 x i8> %94, <16 x i8> %97, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %103 = shufflevector <16 x i8> %100, <16 x i8> %101, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %104 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %102, <16 x i8> %103) #5
  %105 = lshr <8 x i16> %104, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %106 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %105, <8 x i16> zeroinitializer) #5
  %107 = shufflevector <16 x i8> %94, <16 x i8> %97, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %108 = shufflevector <16 x i8> %100, <16 x i8> %101, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %109 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %107, <16 x i8> %108) #5
  %110 = lshr <8 x i16> %109, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %111 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %110, <8 x i16> zeroinitializer) #5
  %112 = shufflevector <16 x i8> %91, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %113 = shufflevector <16 x i8> %91, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %114 = bitcast <16 x i8> %112 to <8 x i16>
  %115 = sub <8 x i16> %106, %114
  %116 = bitcast <16 x i8> %113 to <8 x i16>
  %117 = sub <8 x i16> %111, %116
  %118 = add <8 x i16> %117, %115
  %119 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %118, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %120 = add <4 x i32> %119, %87
  %121 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %115, <8 x i16> %115) #5
  %122 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %117, <8 x i16> %117) #5
  %123 = add <4 x i32> %121, %88
  %124 = add <4 x i32> %123, %122
  %125 = add nuw nsw i64 %86, 16
  %126 = icmp ult i64 %125, 128
  br i1 %126, label %85, label %127

127:                                              ; preds = %85
  %128 = getelementptr inbounds i8, i8* %79, i64 %15
  %129 = getelementptr inbounds i8, i8* %80, i64 128
  %130 = getelementptr inbounds i8, i8* %81, i64 128
  %131 = getelementptr inbounds i8, i8* %82, i64 %16
  %132 = add nuw nsw i32 %78, 1
  %133 = icmp eq i32 %132, 128
  br i1 %133, label %134, label %77

134:                                              ; preds = %127
  %135 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %120, <4 x i32> %124) #5
  %136 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %135, <4 x i32> %135) #5
  br label %137

137:                                              ; preds = %134, %74
  %138 = phi <4 x i32> [ %136, %134 ], [ %76, %74 ]
  %139 = extractelement <4 x i32> %138, i32 0
  %140 = bitcast <4 x i32> %138 to <16 x i8>
  %141 = shufflevector <16 x i8> %140, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %142 = bitcast <16 x i8> %141 to <4 x i32>
  %143 = extractelement <4 x i32> %142, i32 0
  store i32 %143, i32* %10, align 4
  %144 = sext i32 %139 to i64
  %145 = mul nsw i64 %144, %144
  %146 = lshr i64 %145, 14
  %147 = trunc i64 %146 to i32
  %148 = sub i32 %143, %147
  call void @llvm.lifetime.end.p0i8(i64 16512, i8* nonnull %13) #5
  ret i32 %148
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree nounwind ssp uwtable
define internal fastcc void @bilinear_filter(i8* nocapture readonly, i32, i32, i32, i8* nocapture, i32, i32) unnamed_addr #2 {
  switch i32 %2, label %187 [
    i32 0, label %21
    i32 4, label %8
  ]

8:                                                ; preds = %7
  %9 = icmp slt i32 %6, 0
  br i1 %9, label %236, label %10

10:                                               ; preds = %8
  %11 = icmp sgt i32 %5, 0
  %12 = sext i32 %1 to i64
  %13 = sext i32 %5 to i64
  %14 = add nsw i64 %13, -1
  %15 = lshr i64 %14, 4
  %16 = add nuw nsw i64 %15, 1
  %17 = and i64 %16, 3
  %18 = icmp ult i64 %14, 48
  %19 = sub nsw i64 %16, %17
  %20 = icmp eq i64 %17, 0
  br label %110

21:                                               ; preds = %7
  %22 = icmp slt i32 %6, 0
  br i1 %22, label %236, label %23

23:                                               ; preds = %21
  %24 = icmp sgt i32 %5, 0
  %25 = sext i32 %1 to i64
  %26 = sext i32 %5 to i64
  %27 = add nsw i64 %26, -1
  %28 = lshr i64 %27, 4
  %29 = add nuw nsw i64 %28, 1
  %30 = and i64 %29, 7
  %31 = icmp ult i64 %27, 112
  %32 = sub nsw i64 %29, %30
  %33 = icmp eq i64 %30, 0
  br label %34

34:                                               ; preds = %105, %23
  %35 = phi i8* [ %0, %23 ], [ %106, %105 ]
  %36 = phi i32 [ 0, %23 ], [ %108, %105 ]
  %37 = phi i8* [ %4, %23 ], [ %107, %105 ]
  br i1 %24, label %38, label %105

38:                                               ; preds = %34
  br i1 %31, label %92, label %39

39:                                               ; preds = %38, %39
  %40 = phi i64 [ %89, %39 ], [ 0, %38 ]
  %41 = phi i64 [ %90, %39 ], [ %32, %38 ]
  %42 = getelementptr inbounds i8, i8* %35, i64 %40
  %43 = bitcast i8* %42 to <2 x i64>*
  %44 = load <2 x i64>, <2 x i64>* %43, align 1
  %45 = getelementptr inbounds i8, i8* %37, i64 %40
  %46 = bitcast i8* %45 to <2 x i64>*
  store <2 x i64> %44, <2 x i64>* %46, align 1
  %47 = or i64 %40, 16
  %48 = getelementptr inbounds i8, i8* %35, i64 %47
  %49 = bitcast i8* %48 to <2 x i64>*
  %50 = load <2 x i64>, <2 x i64>* %49, align 1
  %51 = getelementptr inbounds i8, i8* %37, i64 %47
  %52 = bitcast i8* %51 to <2 x i64>*
  store <2 x i64> %50, <2 x i64>* %52, align 1
  %53 = or i64 %40, 32
  %54 = getelementptr inbounds i8, i8* %35, i64 %53
  %55 = bitcast i8* %54 to <2 x i64>*
  %56 = load <2 x i64>, <2 x i64>* %55, align 1
  %57 = getelementptr inbounds i8, i8* %37, i64 %53
  %58 = bitcast i8* %57 to <2 x i64>*
  store <2 x i64> %56, <2 x i64>* %58, align 1
  %59 = or i64 %40, 48
  %60 = getelementptr inbounds i8, i8* %35, i64 %59
  %61 = bitcast i8* %60 to <2 x i64>*
  %62 = load <2 x i64>, <2 x i64>* %61, align 1
  %63 = getelementptr inbounds i8, i8* %37, i64 %59
  %64 = bitcast i8* %63 to <2 x i64>*
  store <2 x i64> %62, <2 x i64>* %64, align 1
  %65 = or i64 %40, 64
  %66 = getelementptr inbounds i8, i8* %35, i64 %65
  %67 = bitcast i8* %66 to <2 x i64>*
  %68 = load <2 x i64>, <2 x i64>* %67, align 1
  %69 = getelementptr inbounds i8, i8* %37, i64 %65
  %70 = bitcast i8* %69 to <2 x i64>*
  store <2 x i64> %68, <2 x i64>* %70, align 1
  %71 = or i64 %40, 80
  %72 = getelementptr inbounds i8, i8* %35, i64 %71
  %73 = bitcast i8* %72 to <2 x i64>*
  %74 = load <2 x i64>, <2 x i64>* %73, align 1
  %75 = getelementptr inbounds i8, i8* %37, i64 %71
  %76 = bitcast i8* %75 to <2 x i64>*
  store <2 x i64> %74, <2 x i64>* %76, align 1
  %77 = or i64 %40, 96
  %78 = getelementptr inbounds i8, i8* %35, i64 %77
  %79 = bitcast i8* %78 to <2 x i64>*
  %80 = load <2 x i64>, <2 x i64>* %79, align 1
  %81 = getelementptr inbounds i8, i8* %37, i64 %77
  %82 = bitcast i8* %81 to <2 x i64>*
  store <2 x i64> %80, <2 x i64>* %82, align 1
  %83 = or i64 %40, 112
  %84 = getelementptr inbounds i8, i8* %35, i64 %83
  %85 = bitcast i8* %84 to <2 x i64>*
  %86 = load <2 x i64>, <2 x i64>* %85, align 1
  %87 = getelementptr inbounds i8, i8* %37, i64 %83
  %88 = bitcast i8* %87 to <2 x i64>*
  store <2 x i64> %86, <2 x i64>* %88, align 1
  %89 = add nuw nsw i64 %40, 128
  %90 = add i64 %41, -8
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %92, label %39

92:                                               ; preds = %39, %38
  %93 = phi i64 [ 0, %38 ], [ %89, %39 ]
  br i1 %33, label %105, label %94

94:                                               ; preds = %92, %94
  %95 = phi i64 [ %102, %94 ], [ %93, %92 ]
  %96 = phi i64 [ %103, %94 ], [ %30, %92 ]
  %97 = getelementptr inbounds i8, i8* %35, i64 %95
  %98 = bitcast i8* %97 to <2 x i64>*
  %99 = load <2 x i64>, <2 x i64>* %98, align 1
  %100 = getelementptr inbounds i8, i8* %37, i64 %95
  %101 = bitcast i8* %100 to <2 x i64>*
  store <2 x i64> %99, <2 x i64>* %101, align 1
  %102 = add nuw nsw i64 %95, 16
  %103 = add i64 %96, -1
  %104 = icmp eq i64 %103, 0
  br i1 %104, label %105, label %94, !llvm.loop !2

105:                                              ; preds = %92, %94, %34
  %106 = getelementptr inbounds i8, i8* %35, i64 %25
  %107 = getelementptr inbounds i8, i8* %37, i64 %26
  %108 = add nuw i32 %36, 1
  %109 = icmp eq i32 %36, %6
  br i1 %109, label %236, label %34

110:                                              ; preds = %182, %10
  %111 = phi i8* [ %0, %10 ], [ %183, %182 ]
  %112 = phi i32 [ 0, %10 ], [ %185, %182 ]
  %113 = phi i8* [ %4, %10 ], [ %184, %182 ]
  br i1 %11, label %114, label %182

114:                                              ; preds = %110
  br i1 %18, label %164, label %115

115:                                              ; preds = %114, %115
  %116 = phi i64 [ %154, %115 ], [ 0, %114 ]
  %117 = phi i64 [ %162, %115 ], [ %19, %114 ]
  %118 = getelementptr inbounds i8, i8* %111, i64 %116
  %119 = bitcast i8* %118 to <16 x i8>*
  %120 = load <16 x i8>, <16 x i8>* %119, align 1
  %121 = or i64 %116, 16
  %122 = getelementptr inbounds i8, i8* %111, i64 %121
  %123 = bitcast i8* %122 to <16 x i8>*
  %124 = load <16 x i8>, <16 x i8>* %123, align 1
  %125 = shufflevector <16 x i8> %120, <16 x i8> %124, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %126 = getelementptr inbounds i8, i8* %113, i64 %116
  %127 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %120, <16 x i8> %125) #5
  %128 = bitcast i8* %126 to <16 x i8>*
  store <16 x i8> %127, <16 x i8>* %128, align 1
  %129 = getelementptr inbounds i8, i8* %111, i64 %121
  %130 = bitcast i8* %129 to <16 x i8>*
  %131 = load <16 x i8>, <16 x i8>* %130, align 1
  %132 = or i64 %116, 32
  %133 = getelementptr inbounds i8, i8* %111, i64 %132
  %134 = bitcast i8* %133 to <16 x i8>*
  %135 = load <16 x i8>, <16 x i8>* %134, align 1
  %136 = shufflevector <16 x i8> %131, <16 x i8> %135, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %137 = getelementptr inbounds i8, i8* %113, i64 %121
  %138 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %131, <16 x i8> %136) #5
  %139 = bitcast i8* %137 to <16 x i8>*
  store <16 x i8> %138, <16 x i8>* %139, align 1
  %140 = getelementptr inbounds i8, i8* %111, i64 %132
  %141 = bitcast i8* %140 to <16 x i8>*
  %142 = load <16 x i8>, <16 x i8>* %141, align 1
  %143 = or i64 %116, 48
  %144 = getelementptr inbounds i8, i8* %111, i64 %143
  %145 = bitcast i8* %144 to <16 x i8>*
  %146 = load <16 x i8>, <16 x i8>* %145, align 1
  %147 = shufflevector <16 x i8> %142, <16 x i8> %146, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %148 = getelementptr inbounds i8, i8* %113, i64 %132
  %149 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %142, <16 x i8> %147) #5
  %150 = bitcast i8* %148 to <16 x i8>*
  store <16 x i8> %149, <16 x i8>* %150, align 1
  %151 = getelementptr inbounds i8, i8* %111, i64 %143
  %152 = bitcast i8* %151 to <16 x i8>*
  %153 = load <16 x i8>, <16 x i8>* %152, align 1
  %154 = add nuw nsw i64 %116, 64
  %155 = getelementptr inbounds i8, i8* %111, i64 %154
  %156 = bitcast i8* %155 to <16 x i8>*
  %157 = load <16 x i8>, <16 x i8>* %156, align 1
  %158 = shufflevector <16 x i8> %153, <16 x i8> %157, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %159 = getelementptr inbounds i8, i8* %113, i64 %143
  %160 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %153, <16 x i8> %158) #5
  %161 = bitcast i8* %159 to <16 x i8>*
  store <16 x i8> %160, <16 x i8>* %161, align 1
  %162 = add i64 %117, -4
  %163 = icmp eq i64 %162, 0
  br i1 %163, label %164, label %115

164:                                              ; preds = %115, %114
  %165 = phi i64 [ 0, %114 ], [ %154, %115 ]
  br i1 %20, label %182, label %166

166:                                              ; preds = %164, %166
  %167 = phi i64 [ %172, %166 ], [ %165, %164 ]
  %168 = phi i64 [ %180, %166 ], [ %17, %164 ]
  %169 = getelementptr inbounds i8, i8* %111, i64 %167
  %170 = bitcast i8* %169 to <16 x i8>*
  %171 = load <16 x i8>, <16 x i8>* %170, align 1
  %172 = add nuw nsw i64 %167, 16
  %173 = getelementptr inbounds i8, i8* %111, i64 %172
  %174 = bitcast i8* %173 to <16 x i8>*
  %175 = load <16 x i8>, <16 x i8>* %174, align 1
  %176 = shufflevector <16 x i8> %171, <16 x i8> %175, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %177 = getelementptr inbounds i8, i8* %113, i64 %167
  %178 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %171, <16 x i8> %176) #5
  %179 = bitcast i8* %177 to <16 x i8>*
  store <16 x i8> %178, <16 x i8>* %179, align 1
  %180 = add i64 %168, -1
  %181 = icmp eq i64 %180, 0
  br i1 %181, label %182, label %166, !llvm.loop !4

182:                                              ; preds = %164, %166, %110
  %183 = getelementptr inbounds i8, i8* %111, i64 %12
  %184 = getelementptr inbounds i8, i8* %113, i64 %13
  %185 = add nuw i32 %112, 1
  %186 = icmp eq i32 %112, %6
  br i1 %186, label %236, label %110

187:                                              ; preds = %7
  %188 = sext i32 %2 to i64
  %189 = icmp slt i32 %6, 0
  br i1 %189, label %236, label %190

190:                                              ; preds = %187
  %191 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters_2t, i64 0, i64 %188, i64 1
  %192 = load i8, i8* %191, align 1
  %193 = zext i8 %192 to i16
  %194 = shl nuw i16 %193, 8
  %195 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters_2t, i64 0, i64 %188, i64 0
  %196 = load i8, i8* %195, align 2
  %197 = zext i8 %196 to i16
  %198 = or i16 %194, %197
  %199 = insertelement <8 x i16> undef, i16 %198, i32 0
  %200 = shufflevector <8 x i16> %199, <8 x i16> undef, <8 x i32> zeroinitializer
  %201 = icmp sgt i32 %5, 0
  %202 = bitcast <8 x i16> %200 to <16 x i8>
  %203 = sext i32 %1 to i64
  %204 = sext i32 %5 to i64
  br label %205

205:                                              ; preds = %231, %190
  %206 = phi i8* [ %0, %190 ], [ %232, %231 ]
  %207 = phi i32 [ 0, %190 ], [ %234, %231 ]
  %208 = phi i8* [ %4, %190 ], [ %233, %231 ]
  br i1 %201, label %209, label %231

209:                                              ; preds = %205, %209
  %210 = phi i64 [ %214, %209 ], [ 0, %205 ]
  %211 = getelementptr inbounds i8, i8* %206, i64 %210
  %212 = bitcast i8* %211 to <16 x i8>*
  %213 = load <16 x i8>, <16 x i8>* %212, align 1
  %214 = add nuw nsw i64 %210, 16
  %215 = getelementptr inbounds i8, i8* %206, i64 %214
  %216 = bitcast i8* %215 to <16 x i8>*
  %217 = load <16 x i8>, <16 x i8>* %216, align 1
  %218 = shufflevector <16 x i8> %213, <16 x i8> %217, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %219 = shufflevector <16 x i8> %213, <16 x i8> %218, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %220 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %219, <16 x i8> %202) #5
  %221 = lshr <8 x i16> %220, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %222 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %221, <8 x i16> zeroinitializer) #5
  %223 = shufflevector <16 x i8> %213, <16 x i8> %218, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %224 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %223, <16 x i8> %202) #5
  %225 = lshr <8 x i16> %224, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %226 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %225, <8 x i16> zeroinitializer) #5
  %227 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %222, <8 x i16> %226) #5
  %228 = getelementptr inbounds i8, i8* %208, i64 %210
  %229 = bitcast i8* %228 to <16 x i8>*
  store <16 x i8> %227, <16 x i8>* %229, align 1
  %230 = icmp slt i64 %214, %204
  br i1 %230, label %209, label %231

231:                                              ; preds = %209, %205
  %232 = getelementptr inbounds i8, i8* %206, i64 %203
  %233 = getelementptr inbounds i8, i8* %208, i64 %204
  %234 = add nuw i32 %207, 1
  %235 = icmp eq i32 %207, %6
  br i1 %235, label %236, label %205

236:                                              ; preds = %182, %105, %231, %8, %21, %187
  switch i32 %3, label %314 [
    i32 0, label %358
    i32 4, label %237
  ]

237:                                              ; preds = %236
  %238 = icmp sgt i32 %6, 0
  br i1 %238, label %239, label %358

239:                                              ; preds = %237
  %240 = icmp sgt i32 %5, 0
  %241 = sext i32 %5 to i64
  %242 = add nsw i64 %241, -1
  %243 = lshr i64 %242, 4
  %244 = add nuw nsw i64 %243, 1
  %245 = and i64 %244, 3
  %246 = icmp ult i64 %242, 48
  %247 = sub nsw i64 %244, %245
  %248 = icmp eq i64 %245, 0
  br label %249

249:                                              ; preds = %310, %239
  %250 = phi i8* [ %4, %239 ], [ %311, %310 ]
  %251 = phi i32 [ 0, %239 ], [ %312, %310 ]
  br i1 %240, label %252, label %310

252:                                              ; preds = %249
  br i1 %246, label %294, label %253

253:                                              ; preds = %252, %253
  %254 = phi i64 [ %291, %253 ], [ 0, %252 ]
  %255 = phi i64 [ %292, %253 ], [ %247, %252 ]
  %256 = getelementptr inbounds i8, i8* %250, i64 %254
  %257 = bitcast i8* %256 to <16 x i8>*
  %258 = load <16 x i8>, <16 x i8>* %257, align 1
  %259 = add nsw i64 %254, %241
  %260 = getelementptr inbounds i8, i8* %250, i64 %259
  %261 = bitcast i8* %260 to <16 x i8>*
  %262 = load <16 x i8>, <16 x i8>* %261, align 1
  %263 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %258, <16 x i8> %262) #5
  store <16 x i8> %263, <16 x i8>* %257, align 1
  %264 = or i64 %254, 16
  %265 = getelementptr inbounds i8, i8* %250, i64 %264
  %266 = bitcast i8* %265 to <16 x i8>*
  %267 = load <16 x i8>, <16 x i8>* %266, align 1
  %268 = add nsw i64 %264, %241
  %269 = getelementptr inbounds i8, i8* %250, i64 %268
  %270 = bitcast i8* %269 to <16 x i8>*
  %271 = load <16 x i8>, <16 x i8>* %270, align 1
  %272 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %267, <16 x i8> %271) #5
  store <16 x i8> %272, <16 x i8>* %266, align 1
  %273 = or i64 %254, 32
  %274 = getelementptr inbounds i8, i8* %250, i64 %273
  %275 = bitcast i8* %274 to <16 x i8>*
  %276 = load <16 x i8>, <16 x i8>* %275, align 1
  %277 = add nsw i64 %273, %241
  %278 = getelementptr inbounds i8, i8* %250, i64 %277
  %279 = bitcast i8* %278 to <16 x i8>*
  %280 = load <16 x i8>, <16 x i8>* %279, align 1
  %281 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %276, <16 x i8> %280) #5
  store <16 x i8> %281, <16 x i8>* %275, align 1
  %282 = or i64 %254, 48
  %283 = getelementptr inbounds i8, i8* %250, i64 %282
  %284 = bitcast i8* %283 to <16 x i8>*
  %285 = load <16 x i8>, <16 x i8>* %284, align 1
  %286 = add nsw i64 %282, %241
  %287 = getelementptr inbounds i8, i8* %250, i64 %286
  %288 = bitcast i8* %287 to <16 x i8>*
  %289 = load <16 x i8>, <16 x i8>* %288, align 1
  %290 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %285, <16 x i8> %289) #5
  store <16 x i8> %290, <16 x i8>* %284, align 1
  %291 = add nuw nsw i64 %254, 64
  %292 = add i64 %255, -4
  %293 = icmp eq i64 %292, 0
  br i1 %293, label %294, label %253

294:                                              ; preds = %253, %252
  %295 = phi i64 [ 0, %252 ], [ %291, %253 ]
  br i1 %248, label %310, label %296

296:                                              ; preds = %294, %296
  %297 = phi i64 [ %307, %296 ], [ %295, %294 ]
  %298 = phi i64 [ %308, %296 ], [ %245, %294 ]
  %299 = getelementptr inbounds i8, i8* %250, i64 %297
  %300 = bitcast i8* %299 to <16 x i8>*
  %301 = load <16 x i8>, <16 x i8>* %300, align 1
  %302 = add nsw i64 %297, %241
  %303 = getelementptr inbounds i8, i8* %250, i64 %302
  %304 = bitcast i8* %303 to <16 x i8>*
  %305 = load <16 x i8>, <16 x i8>* %304, align 1
  %306 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %301, <16 x i8> %305) #5
  store <16 x i8> %306, <16 x i8>* %300, align 1
  %307 = add nuw nsw i64 %297, 16
  %308 = add i64 %298, -1
  %309 = icmp eq i64 %308, 0
  br i1 %309, label %310, label %296, !llvm.loop !5

310:                                              ; preds = %294, %296, %249
  %311 = getelementptr inbounds i8, i8* %250, i64 %241
  %312 = add nuw nsw i32 %251, 1
  %313 = icmp eq i32 %312, %6
  br i1 %313, label %358, label %249

314:                                              ; preds = %236
  %315 = sext i32 %3 to i64
  %316 = icmp sgt i32 %6, 0
  br i1 %316, label %317, label %358

317:                                              ; preds = %314
  %318 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters_2t, i64 0, i64 %315, i64 1
  %319 = load i8, i8* %318, align 1
  %320 = zext i8 %319 to i16
  %321 = shl nuw i16 %320, 8
  %322 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters_2t, i64 0, i64 %315, i64 0
  %323 = load i8, i8* %322, align 2
  %324 = zext i8 %323 to i16
  %325 = or i16 %321, %324
  %326 = insertelement <8 x i16> undef, i16 %325, i32 0
  %327 = shufflevector <8 x i16> %326, <8 x i16> undef, <8 x i32> zeroinitializer
  %328 = icmp sgt i32 %5, 0
  %329 = bitcast <8 x i16> %327 to <16 x i8>
  %330 = sext i32 %5 to i64
  br label %331

331:                                              ; preds = %354, %317
  %332 = phi i8* [ %4, %317 ], [ %355, %354 ]
  %333 = phi i32 [ 0, %317 ], [ %356, %354 ]
  br i1 %328, label %334, label %354

334:                                              ; preds = %331, %334
  %335 = phi i64 [ %352, %334 ], [ 0, %331 ]
  %336 = getelementptr inbounds i8, i8* %332, i64 %335
  %337 = bitcast i8* %336 to <16 x i8>*
  %338 = load <16 x i8>, <16 x i8>* %337, align 1
  %339 = add nsw i64 %335, %330
  %340 = getelementptr inbounds i8, i8* %332, i64 %339
  %341 = bitcast i8* %340 to <16 x i8>*
  %342 = load <16 x i8>, <16 x i8>* %341, align 1
  %343 = shufflevector <16 x i8> %338, <16 x i8> %342, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %344 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %343, <16 x i8> %329) #5
  %345 = lshr <8 x i16> %344, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %346 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %345, <8 x i16> zeroinitializer) #5
  %347 = shufflevector <16 x i8> %338, <16 x i8> %342, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %348 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %347, <16 x i8> %329) #5
  %349 = lshr <8 x i16> %348, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %350 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %349, <8 x i16> zeroinitializer) #5
  %351 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %346, <8 x i16> %350) #5
  store <16 x i8> %351, <16 x i8>* %337, align 1
  %352 = add nuw nsw i64 %335, 16
  %353 = icmp slt i64 %352, %330
  br i1 %353, label %334, label %354

354:                                              ; preds = %334, %331
  %355 = getelementptr inbounds i8, i8* %332, i64 %330
  %356 = add nuw nsw i32 %333, 1
  %357 = icmp eq i32 %356, %6
  br i1 %357, label %358, label %331

358:                                              ; preds = %310, %354, %237, %314, %236
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @aom_masked_sub_pixel_variance128x64_ssse3(i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32, i32* nocapture) local_unnamed_addr #0 {
  %12 = alloca [8320 x i8], align 16
  %13 = getelementptr inbounds [8320 x i8], [8320 x i8]* %12, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 8320, i8* nonnull %13) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 8320, i1 false)
  call fastcc void @bilinear_filter(i8* %0, i32 %1, i32 %2, i32 %3, i8* nonnull %13, i32 128, i32 64)
  %14 = icmp eq i32 %9, 0
  %15 = sext i32 %5 to i64
  %16 = sext i32 %8 to i64
  br i1 %14, label %17, label %77

17:                                               ; preds = %11, %67
  %18 = phi i32 [ %72, %67 ], [ 0, %11 ]
  %19 = phi i8* [ %68, %67 ], [ %4, %11 ]
  %20 = phi i8* [ %69, %67 ], [ %13, %11 ]
  %21 = phi i8* [ %70, %67 ], [ %6, %11 ]
  %22 = phi i8* [ %71, %67 ], [ %7, %11 ]
  %23 = phi <4 x i32> [ %60, %67 ], [ zeroinitializer, %11 ]
  %24 = phi <4 x i32> [ %64, %67 ], [ zeroinitializer, %11 ]
  br label %25

25:                                               ; preds = %25, %17
  %26 = phi i64 [ %65, %25 ], [ 0, %17 ]
  %27 = phi <4 x i32> [ %60, %25 ], [ %23, %17 ]
  %28 = phi <4 x i32> [ %64, %25 ], [ %24, %17 ]
  %29 = getelementptr inbounds i8, i8* %19, i64 %26
  %30 = bitcast i8* %29 to <16 x i8>*
  %31 = load <16 x i8>, <16 x i8>* %30, align 1
  %32 = getelementptr inbounds i8, i8* %20, i64 %26
  %33 = bitcast i8* %32 to <16 x i8>*
  %34 = load <16 x i8>, <16 x i8>* %33, align 1
  %35 = getelementptr inbounds i8, i8* %21, i64 %26
  %36 = bitcast i8* %35 to <16 x i8>*
  %37 = load <16 x i8>, <16 x i8>* %36, align 1
  %38 = getelementptr inbounds i8, i8* %22, i64 %26
  %39 = bitcast i8* %38 to <16 x i8>*
  %40 = load <16 x i8>, <16 x i8>* %39, align 1
  %41 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %40
  %42 = shufflevector <16 x i8> %34, <16 x i8> %37, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %43 = shufflevector <16 x i8> %40, <16 x i8> %41, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %44 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %42, <16 x i8> %43) #5
  %45 = lshr <8 x i16> %44, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %46 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %45, <8 x i16> zeroinitializer) #5
  %47 = shufflevector <16 x i8> %34, <16 x i8> %37, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %48 = shufflevector <16 x i8> %40, <16 x i8> %41, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %49 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %47, <16 x i8> %48) #5
  %50 = lshr <8 x i16> %49, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %51 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %50, <8 x i16> zeroinitializer) #5
  %52 = shufflevector <16 x i8> %31, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %53 = shufflevector <16 x i8> %31, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %54 = bitcast <16 x i8> %52 to <8 x i16>
  %55 = sub <8 x i16> %46, %54
  %56 = bitcast <16 x i8> %53 to <8 x i16>
  %57 = sub <8 x i16> %51, %56
  %58 = add <8 x i16> %57, %55
  %59 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %58, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %60 = add <4 x i32> %59, %27
  %61 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %55, <8 x i16> %55) #5
  %62 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %57, <8 x i16> %57) #5
  %63 = add <4 x i32> %61, %28
  %64 = add <4 x i32> %63, %62
  %65 = add nuw nsw i64 %26, 16
  %66 = icmp ult i64 %65, 128
  br i1 %66, label %25, label %67

67:                                               ; preds = %25
  %68 = getelementptr inbounds i8, i8* %19, i64 %15
  %69 = getelementptr inbounds i8, i8* %20, i64 128
  %70 = getelementptr inbounds i8, i8* %21, i64 128
  %71 = getelementptr inbounds i8, i8* %22, i64 %16
  %72 = add nuw nsw i32 %18, 1
  %73 = icmp eq i32 %72, 64
  br i1 %73, label %74, label %17

74:                                               ; preds = %67
  %75 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %60, <4 x i32> %64) #5
  %76 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %75, <4 x i32> %75) #5
  br label %137

77:                                               ; preds = %11, %127
  %78 = phi i32 [ %132, %127 ], [ 0, %11 ]
  %79 = phi i8* [ %128, %127 ], [ %4, %11 ]
  %80 = phi i8* [ %129, %127 ], [ %6, %11 ]
  %81 = phi i8* [ %130, %127 ], [ %13, %11 ]
  %82 = phi i8* [ %131, %127 ], [ %7, %11 ]
  %83 = phi <4 x i32> [ %120, %127 ], [ zeroinitializer, %11 ]
  %84 = phi <4 x i32> [ %124, %127 ], [ zeroinitializer, %11 ]
  br label %85

85:                                               ; preds = %85, %77
  %86 = phi i64 [ %125, %85 ], [ 0, %77 ]
  %87 = phi <4 x i32> [ %120, %85 ], [ %83, %77 ]
  %88 = phi <4 x i32> [ %124, %85 ], [ %84, %77 ]
  %89 = getelementptr inbounds i8, i8* %79, i64 %86
  %90 = bitcast i8* %89 to <16 x i8>*
  %91 = load <16 x i8>, <16 x i8>* %90, align 1
  %92 = getelementptr inbounds i8, i8* %80, i64 %86
  %93 = bitcast i8* %92 to <16 x i8>*
  %94 = load <16 x i8>, <16 x i8>* %93, align 1
  %95 = getelementptr inbounds i8, i8* %81, i64 %86
  %96 = bitcast i8* %95 to <16 x i8>*
  %97 = load <16 x i8>, <16 x i8>* %96, align 1
  %98 = getelementptr inbounds i8, i8* %82, i64 %86
  %99 = bitcast i8* %98 to <16 x i8>*
  %100 = load <16 x i8>, <16 x i8>* %99, align 1
  %101 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %100
  %102 = shufflevector <16 x i8> %94, <16 x i8> %97, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %103 = shufflevector <16 x i8> %100, <16 x i8> %101, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %104 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %102, <16 x i8> %103) #5
  %105 = lshr <8 x i16> %104, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %106 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %105, <8 x i16> zeroinitializer) #5
  %107 = shufflevector <16 x i8> %94, <16 x i8> %97, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %108 = shufflevector <16 x i8> %100, <16 x i8> %101, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %109 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %107, <16 x i8> %108) #5
  %110 = lshr <8 x i16> %109, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %111 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %110, <8 x i16> zeroinitializer) #5
  %112 = shufflevector <16 x i8> %91, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %113 = shufflevector <16 x i8> %91, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %114 = bitcast <16 x i8> %112 to <8 x i16>
  %115 = sub <8 x i16> %106, %114
  %116 = bitcast <16 x i8> %113 to <8 x i16>
  %117 = sub <8 x i16> %111, %116
  %118 = add <8 x i16> %117, %115
  %119 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %118, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %120 = add <4 x i32> %119, %87
  %121 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %115, <8 x i16> %115) #5
  %122 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %117, <8 x i16> %117) #5
  %123 = add <4 x i32> %121, %88
  %124 = add <4 x i32> %123, %122
  %125 = add nuw nsw i64 %86, 16
  %126 = icmp ult i64 %125, 128
  br i1 %126, label %85, label %127

127:                                              ; preds = %85
  %128 = getelementptr inbounds i8, i8* %79, i64 %15
  %129 = getelementptr inbounds i8, i8* %80, i64 128
  %130 = getelementptr inbounds i8, i8* %81, i64 128
  %131 = getelementptr inbounds i8, i8* %82, i64 %16
  %132 = add nuw nsw i32 %78, 1
  %133 = icmp eq i32 %132, 64
  br i1 %133, label %134, label %77

134:                                              ; preds = %127
  %135 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %120, <4 x i32> %124) #5
  %136 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %135, <4 x i32> %135) #5
  br label %137

137:                                              ; preds = %134, %74
  %138 = phi <4 x i32> [ %136, %134 ], [ %76, %74 ]
  %139 = extractelement <4 x i32> %138, i32 0
  %140 = bitcast <4 x i32> %138 to <16 x i8>
  %141 = shufflevector <16 x i8> %140, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %142 = bitcast <16 x i8> %141 to <4 x i32>
  %143 = extractelement <4 x i32> %142, i32 0
  store i32 %143, i32* %10, align 4
  %144 = sext i32 %139 to i64
  %145 = mul nsw i64 %144, %144
  %146 = lshr i64 %145, 13
  %147 = trunc i64 %146 to i32
  %148 = sub i32 %143, %147
  call void @llvm.lifetime.end.p0i8(i64 8320, i8* nonnull %13) #5
  ret i32 %148
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @aom_masked_sub_pixel_variance64x128_ssse3(i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32, i32* nocapture) local_unnamed_addr #0 {
  %12 = alloca [8256 x i8], align 16
  %13 = getelementptr inbounds [8256 x i8], [8256 x i8]* %12, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 8256, i8* nonnull %13) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 8256, i1 false)
  call fastcc void @bilinear_filter(i8* %0, i32 %1, i32 %2, i32 %3, i8* nonnull %13, i32 64, i32 128)
  %14 = icmp eq i32 %9, 0
  %15 = sext i32 %5 to i64
  %16 = sext i32 %8 to i64
  br i1 %14, label %17, label %174

17:                                               ; preds = %11, %17
  %18 = phi i32 [ %169, %17 ], [ 0, %11 ]
  %19 = phi i8* [ %165, %17 ], [ %4, %11 ]
  %20 = phi i8* [ %166, %17 ], [ %13, %11 ]
  %21 = phi i8* [ %167, %17 ], [ %6, %11 ]
  %22 = phi i8* [ %168, %17 ], [ %7, %11 ]
  %23 = phi <4 x i32> [ %160, %17 ], [ zeroinitializer, %11 ]
  %24 = phi <4 x i32> [ %164, %17 ], [ zeroinitializer, %11 ]
  %25 = bitcast i8* %19 to <16 x i8>*
  %26 = load <16 x i8>, <16 x i8>* %25, align 1
  %27 = bitcast i8* %20 to <16 x i8>*
  %28 = load <16 x i8>, <16 x i8>* %27, align 1
  %29 = bitcast i8* %21 to <16 x i8>*
  %30 = load <16 x i8>, <16 x i8>* %29, align 1
  %31 = bitcast i8* %22 to <16 x i8>*
  %32 = load <16 x i8>, <16 x i8>* %31, align 1
  %33 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %32
  %34 = shufflevector <16 x i8> %28, <16 x i8> %30, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %35 = shufflevector <16 x i8> %32, <16 x i8> %33, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %36 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %34, <16 x i8> %35) #5
  %37 = lshr <8 x i16> %36, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %38 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %37, <8 x i16> zeroinitializer) #5
  %39 = shufflevector <16 x i8> %28, <16 x i8> %30, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %40 = shufflevector <16 x i8> %32, <16 x i8> %33, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %41 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %39, <16 x i8> %40) #5
  %42 = lshr <8 x i16> %41, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %43 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %42, <8 x i16> zeroinitializer) #5
  %44 = shufflevector <16 x i8> %26, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %45 = shufflevector <16 x i8> %26, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %46 = bitcast <16 x i8> %44 to <8 x i16>
  %47 = sub <8 x i16> %38, %46
  %48 = bitcast <16 x i8> %45 to <8 x i16>
  %49 = sub <8 x i16> %43, %48
  %50 = add <8 x i16> %49, %47
  %51 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %50, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %52 = add <4 x i32> %51, %23
  %53 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %47, <8 x i16> %47) #5
  %54 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %49, <8 x i16> %49) #5
  %55 = add <4 x i32> %53, %24
  %56 = add <4 x i32> %55, %54
  %57 = getelementptr inbounds i8, i8* %19, i64 16
  %58 = bitcast i8* %57 to <16 x i8>*
  %59 = load <16 x i8>, <16 x i8>* %58, align 1
  %60 = getelementptr inbounds i8, i8* %20, i64 16
  %61 = bitcast i8* %60 to <16 x i8>*
  %62 = load <16 x i8>, <16 x i8>* %61, align 1
  %63 = getelementptr inbounds i8, i8* %21, i64 16
  %64 = bitcast i8* %63 to <16 x i8>*
  %65 = load <16 x i8>, <16 x i8>* %64, align 1
  %66 = getelementptr inbounds i8, i8* %22, i64 16
  %67 = bitcast i8* %66 to <16 x i8>*
  %68 = load <16 x i8>, <16 x i8>* %67, align 1
  %69 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %68
  %70 = shufflevector <16 x i8> %62, <16 x i8> %65, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %71 = shufflevector <16 x i8> %68, <16 x i8> %69, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %72 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %70, <16 x i8> %71) #5
  %73 = lshr <8 x i16> %72, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %74 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %73, <8 x i16> zeroinitializer) #5
  %75 = shufflevector <16 x i8> %62, <16 x i8> %65, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %76 = shufflevector <16 x i8> %68, <16 x i8> %69, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %77 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %75, <16 x i8> %76) #5
  %78 = lshr <8 x i16> %77, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %79 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %78, <8 x i16> zeroinitializer) #5
  %80 = shufflevector <16 x i8> %59, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %81 = shufflevector <16 x i8> %59, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %82 = bitcast <16 x i8> %80 to <8 x i16>
  %83 = sub <8 x i16> %74, %82
  %84 = bitcast <16 x i8> %81 to <8 x i16>
  %85 = sub <8 x i16> %79, %84
  %86 = add <8 x i16> %85, %83
  %87 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %86, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %88 = add <4 x i32> %87, %52
  %89 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %83, <8 x i16> %83) #5
  %90 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %85, <8 x i16> %85) #5
  %91 = add <4 x i32> %89, %56
  %92 = add <4 x i32> %91, %90
  %93 = getelementptr inbounds i8, i8* %19, i64 32
  %94 = bitcast i8* %93 to <16 x i8>*
  %95 = load <16 x i8>, <16 x i8>* %94, align 1
  %96 = getelementptr inbounds i8, i8* %20, i64 32
  %97 = bitcast i8* %96 to <16 x i8>*
  %98 = load <16 x i8>, <16 x i8>* %97, align 1
  %99 = getelementptr inbounds i8, i8* %21, i64 32
  %100 = bitcast i8* %99 to <16 x i8>*
  %101 = load <16 x i8>, <16 x i8>* %100, align 1
  %102 = getelementptr inbounds i8, i8* %22, i64 32
  %103 = bitcast i8* %102 to <16 x i8>*
  %104 = load <16 x i8>, <16 x i8>* %103, align 1
  %105 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %104
  %106 = shufflevector <16 x i8> %98, <16 x i8> %101, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %107 = shufflevector <16 x i8> %104, <16 x i8> %105, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %108 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %106, <16 x i8> %107) #5
  %109 = lshr <8 x i16> %108, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %110 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %109, <8 x i16> zeroinitializer) #5
  %111 = shufflevector <16 x i8> %98, <16 x i8> %101, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %112 = shufflevector <16 x i8> %104, <16 x i8> %105, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %113 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %111, <16 x i8> %112) #5
  %114 = lshr <8 x i16> %113, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %115 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %114, <8 x i16> zeroinitializer) #5
  %116 = shufflevector <16 x i8> %95, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %117 = shufflevector <16 x i8> %95, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %118 = bitcast <16 x i8> %116 to <8 x i16>
  %119 = sub <8 x i16> %110, %118
  %120 = bitcast <16 x i8> %117 to <8 x i16>
  %121 = sub <8 x i16> %115, %120
  %122 = add <8 x i16> %121, %119
  %123 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %122, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %124 = add <4 x i32> %123, %88
  %125 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %119, <8 x i16> %119) #5
  %126 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %121, <8 x i16> %121) #5
  %127 = add <4 x i32> %125, %92
  %128 = add <4 x i32> %127, %126
  %129 = getelementptr inbounds i8, i8* %19, i64 48
  %130 = bitcast i8* %129 to <16 x i8>*
  %131 = load <16 x i8>, <16 x i8>* %130, align 1
  %132 = getelementptr inbounds i8, i8* %20, i64 48
  %133 = bitcast i8* %132 to <16 x i8>*
  %134 = load <16 x i8>, <16 x i8>* %133, align 1
  %135 = getelementptr inbounds i8, i8* %21, i64 48
  %136 = bitcast i8* %135 to <16 x i8>*
  %137 = load <16 x i8>, <16 x i8>* %136, align 1
  %138 = getelementptr inbounds i8, i8* %22, i64 48
  %139 = bitcast i8* %138 to <16 x i8>*
  %140 = load <16 x i8>, <16 x i8>* %139, align 1
  %141 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %140
  %142 = shufflevector <16 x i8> %134, <16 x i8> %137, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %143 = shufflevector <16 x i8> %140, <16 x i8> %141, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %144 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %142, <16 x i8> %143) #5
  %145 = lshr <8 x i16> %144, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %146 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %145, <8 x i16> zeroinitializer) #5
  %147 = shufflevector <16 x i8> %134, <16 x i8> %137, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %148 = shufflevector <16 x i8> %140, <16 x i8> %141, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %149 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %147, <16 x i8> %148) #5
  %150 = lshr <8 x i16> %149, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %151 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %150, <8 x i16> zeroinitializer) #5
  %152 = shufflevector <16 x i8> %131, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %153 = shufflevector <16 x i8> %131, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %154 = bitcast <16 x i8> %152 to <8 x i16>
  %155 = sub <8 x i16> %146, %154
  %156 = bitcast <16 x i8> %153 to <8 x i16>
  %157 = sub <8 x i16> %151, %156
  %158 = add <8 x i16> %157, %155
  %159 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %158, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %160 = add <4 x i32> %159, %124
  %161 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %155, <8 x i16> %155) #5
  %162 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %157, <8 x i16> %157) #5
  %163 = add <4 x i32> %161, %128
  %164 = add <4 x i32> %163, %162
  %165 = getelementptr inbounds i8, i8* %19, i64 %15
  %166 = getelementptr inbounds i8, i8* %20, i64 64
  %167 = getelementptr inbounds i8, i8* %21, i64 64
  %168 = getelementptr inbounds i8, i8* %22, i64 %16
  %169 = add nuw nsw i32 %18, 1
  %170 = icmp eq i32 %169, 128
  br i1 %170, label %171, label %17

171:                                              ; preds = %17
  %172 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %160, <4 x i32> %164) #5
  %173 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %172, <4 x i32> %172) #5
  br label %331

174:                                              ; preds = %11, %174
  %175 = phi i32 [ %326, %174 ], [ 0, %11 ]
  %176 = phi i8* [ %322, %174 ], [ %4, %11 ]
  %177 = phi i8* [ %323, %174 ], [ %6, %11 ]
  %178 = phi i8* [ %324, %174 ], [ %13, %11 ]
  %179 = phi i8* [ %325, %174 ], [ %7, %11 ]
  %180 = phi <4 x i32> [ %317, %174 ], [ zeroinitializer, %11 ]
  %181 = phi <4 x i32> [ %321, %174 ], [ zeroinitializer, %11 ]
  %182 = bitcast i8* %176 to <16 x i8>*
  %183 = load <16 x i8>, <16 x i8>* %182, align 1
  %184 = bitcast i8* %177 to <16 x i8>*
  %185 = load <16 x i8>, <16 x i8>* %184, align 1
  %186 = bitcast i8* %178 to <16 x i8>*
  %187 = load <16 x i8>, <16 x i8>* %186, align 1
  %188 = bitcast i8* %179 to <16 x i8>*
  %189 = load <16 x i8>, <16 x i8>* %188, align 1
  %190 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %189
  %191 = shufflevector <16 x i8> %185, <16 x i8> %187, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %192 = shufflevector <16 x i8> %189, <16 x i8> %190, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %193 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %191, <16 x i8> %192) #5
  %194 = lshr <8 x i16> %193, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %195 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %194, <8 x i16> zeroinitializer) #5
  %196 = shufflevector <16 x i8> %185, <16 x i8> %187, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %197 = shufflevector <16 x i8> %189, <16 x i8> %190, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %198 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %196, <16 x i8> %197) #5
  %199 = lshr <8 x i16> %198, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %200 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %199, <8 x i16> zeroinitializer) #5
  %201 = shufflevector <16 x i8> %183, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %202 = shufflevector <16 x i8> %183, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %203 = bitcast <16 x i8> %201 to <8 x i16>
  %204 = sub <8 x i16> %195, %203
  %205 = bitcast <16 x i8> %202 to <8 x i16>
  %206 = sub <8 x i16> %200, %205
  %207 = add <8 x i16> %206, %204
  %208 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %207, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %209 = add <4 x i32> %208, %180
  %210 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %204, <8 x i16> %204) #5
  %211 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %206, <8 x i16> %206) #5
  %212 = add <4 x i32> %210, %181
  %213 = add <4 x i32> %212, %211
  %214 = getelementptr inbounds i8, i8* %176, i64 16
  %215 = bitcast i8* %214 to <16 x i8>*
  %216 = load <16 x i8>, <16 x i8>* %215, align 1
  %217 = getelementptr inbounds i8, i8* %177, i64 16
  %218 = bitcast i8* %217 to <16 x i8>*
  %219 = load <16 x i8>, <16 x i8>* %218, align 1
  %220 = getelementptr inbounds i8, i8* %178, i64 16
  %221 = bitcast i8* %220 to <16 x i8>*
  %222 = load <16 x i8>, <16 x i8>* %221, align 1
  %223 = getelementptr inbounds i8, i8* %179, i64 16
  %224 = bitcast i8* %223 to <16 x i8>*
  %225 = load <16 x i8>, <16 x i8>* %224, align 1
  %226 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %225
  %227 = shufflevector <16 x i8> %219, <16 x i8> %222, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %228 = shufflevector <16 x i8> %225, <16 x i8> %226, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %229 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %227, <16 x i8> %228) #5
  %230 = lshr <8 x i16> %229, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %231 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %230, <8 x i16> zeroinitializer) #5
  %232 = shufflevector <16 x i8> %219, <16 x i8> %222, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %233 = shufflevector <16 x i8> %225, <16 x i8> %226, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %234 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %232, <16 x i8> %233) #5
  %235 = lshr <8 x i16> %234, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %236 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %235, <8 x i16> zeroinitializer) #5
  %237 = shufflevector <16 x i8> %216, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %238 = shufflevector <16 x i8> %216, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %239 = bitcast <16 x i8> %237 to <8 x i16>
  %240 = sub <8 x i16> %231, %239
  %241 = bitcast <16 x i8> %238 to <8 x i16>
  %242 = sub <8 x i16> %236, %241
  %243 = add <8 x i16> %242, %240
  %244 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %243, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %245 = add <4 x i32> %244, %209
  %246 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %240, <8 x i16> %240) #5
  %247 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %242, <8 x i16> %242) #5
  %248 = add <4 x i32> %246, %213
  %249 = add <4 x i32> %248, %247
  %250 = getelementptr inbounds i8, i8* %176, i64 32
  %251 = bitcast i8* %250 to <16 x i8>*
  %252 = load <16 x i8>, <16 x i8>* %251, align 1
  %253 = getelementptr inbounds i8, i8* %177, i64 32
  %254 = bitcast i8* %253 to <16 x i8>*
  %255 = load <16 x i8>, <16 x i8>* %254, align 1
  %256 = getelementptr inbounds i8, i8* %178, i64 32
  %257 = bitcast i8* %256 to <16 x i8>*
  %258 = load <16 x i8>, <16 x i8>* %257, align 1
  %259 = getelementptr inbounds i8, i8* %179, i64 32
  %260 = bitcast i8* %259 to <16 x i8>*
  %261 = load <16 x i8>, <16 x i8>* %260, align 1
  %262 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %261
  %263 = shufflevector <16 x i8> %255, <16 x i8> %258, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %264 = shufflevector <16 x i8> %261, <16 x i8> %262, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %265 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %263, <16 x i8> %264) #5
  %266 = lshr <8 x i16> %265, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %267 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %266, <8 x i16> zeroinitializer) #5
  %268 = shufflevector <16 x i8> %255, <16 x i8> %258, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %269 = shufflevector <16 x i8> %261, <16 x i8> %262, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %270 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %268, <16 x i8> %269) #5
  %271 = lshr <8 x i16> %270, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %272 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %271, <8 x i16> zeroinitializer) #5
  %273 = shufflevector <16 x i8> %252, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %274 = shufflevector <16 x i8> %252, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %275 = bitcast <16 x i8> %273 to <8 x i16>
  %276 = sub <8 x i16> %267, %275
  %277 = bitcast <16 x i8> %274 to <8 x i16>
  %278 = sub <8 x i16> %272, %277
  %279 = add <8 x i16> %278, %276
  %280 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %279, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %281 = add <4 x i32> %280, %245
  %282 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %276, <8 x i16> %276) #5
  %283 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %278, <8 x i16> %278) #5
  %284 = add <4 x i32> %282, %249
  %285 = add <4 x i32> %284, %283
  %286 = getelementptr inbounds i8, i8* %176, i64 48
  %287 = bitcast i8* %286 to <16 x i8>*
  %288 = load <16 x i8>, <16 x i8>* %287, align 1
  %289 = getelementptr inbounds i8, i8* %177, i64 48
  %290 = bitcast i8* %289 to <16 x i8>*
  %291 = load <16 x i8>, <16 x i8>* %290, align 1
  %292 = getelementptr inbounds i8, i8* %178, i64 48
  %293 = bitcast i8* %292 to <16 x i8>*
  %294 = load <16 x i8>, <16 x i8>* %293, align 1
  %295 = getelementptr inbounds i8, i8* %179, i64 48
  %296 = bitcast i8* %295 to <16 x i8>*
  %297 = load <16 x i8>, <16 x i8>* %296, align 1
  %298 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %297
  %299 = shufflevector <16 x i8> %291, <16 x i8> %294, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %300 = shufflevector <16 x i8> %297, <16 x i8> %298, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %301 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %299, <16 x i8> %300) #5
  %302 = lshr <8 x i16> %301, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %303 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %302, <8 x i16> zeroinitializer) #5
  %304 = shufflevector <16 x i8> %291, <16 x i8> %294, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %305 = shufflevector <16 x i8> %297, <16 x i8> %298, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %306 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %304, <16 x i8> %305) #5
  %307 = lshr <8 x i16> %306, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %308 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %307, <8 x i16> zeroinitializer) #5
  %309 = shufflevector <16 x i8> %288, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %310 = shufflevector <16 x i8> %288, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %311 = bitcast <16 x i8> %309 to <8 x i16>
  %312 = sub <8 x i16> %303, %311
  %313 = bitcast <16 x i8> %310 to <8 x i16>
  %314 = sub <8 x i16> %308, %313
  %315 = add <8 x i16> %314, %312
  %316 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %315, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %317 = add <4 x i32> %316, %281
  %318 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %312, <8 x i16> %312) #5
  %319 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %314, <8 x i16> %314) #5
  %320 = add <4 x i32> %318, %285
  %321 = add <4 x i32> %320, %319
  %322 = getelementptr inbounds i8, i8* %176, i64 %15
  %323 = getelementptr inbounds i8, i8* %177, i64 64
  %324 = getelementptr inbounds i8, i8* %178, i64 64
  %325 = getelementptr inbounds i8, i8* %179, i64 %16
  %326 = add nuw nsw i32 %175, 1
  %327 = icmp eq i32 %326, 128
  br i1 %327, label %328, label %174

328:                                              ; preds = %174
  %329 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %317, <4 x i32> %321) #5
  %330 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %329, <4 x i32> %329) #5
  br label %331

331:                                              ; preds = %328, %171
  %332 = phi <4 x i32> [ %330, %328 ], [ %173, %171 ]
  %333 = extractelement <4 x i32> %332, i32 0
  %334 = bitcast <4 x i32> %332 to <16 x i8>
  %335 = shufflevector <16 x i8> %334, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %336 = bitcast <16 x i8> %335 to <4 x i32>
  %337 = extractelement <4 x i32> %336, i32 0
  store i32 %337, i32* %10, align 4
  %338 = sext i32 %333 to i64
  %339 = mul nsw i64 %338, %338
  %340 = lshr i64 %339, 13
  %341 = trunc i64 %340 to i32
  %342 = sub i32 %337, %341
  call void @llvm.lifetime.end.p0i8(i64 8256, i8* nonnull %13) #5
  ret i32 %342
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @aom_masked_sub_pixel_variance64x64_ssse3(i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32, i32* nocapture) local_unnamed_addr #0 {
  %12 = alloca [4160 x i8], align 16
  %13 = getelementptr inbounds [4160 x i8], [4160 x i8]* %12, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4160, i8* nonnull %13) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 4160, i1 false)
  call fastcc void @bilinear_filter(i8* %0, i32 %1, i32 %2, i32 %3, i8* nonnull %13, i32 64, i32 64)
  %14 = icmp eq i32 %9, 0
  %15 = sext i32 %5 to i64
  %16 = sext i32 %8 to i64
  br i1 %14, label %17, label %174

17:                                               ; preds = %11, %17
  %18 = phi i32 [ %169, %17 ], [ 0, %11 ]
  %19 = phi i8* [ %165, %17 ], [ %4, %11 ]
  %20 = phi i8* [ %166, %17 ], [ %13, %11 ]
  %21 = phi i8* [ %167, %17 ], [ %6, %11 ]
  %22 = phi i8* [ %168, %17 ], [ %7, %11 ]
  %23 = phi <4 x i32> [ %160, %17 ], [ zeroinitializer, %11 ]
  %24 = phi <4 x i32> [ %164, %17 ], [ zeroinitializer, %11 ]
  %25 = bitcast i8* %19 to <16 x i8>*
  %26 = load <16 x i8>, <16 x i8>* %25, align 1
  %27 = bitcast i8* %20 to <16 x i8>*
  %28 = load <16 x i8>, <16 x i8>* %27, align 1
  %29 = bitcast i8* %21 to <16 x i8>*
  %30 = load <16 x i8>, <16 x i8>* %29, align 1
  %31 = bitcast i8* %22 to <16 x i8>*
  %32 = load <16 x i8>, <16 x i8>* %31, align 1
  %33 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %32
  %34 = shufflevector <16 x i8> %28, <16 x i8> %30, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %35 = shufflevector <16 x i8> %32, <16 x i8> %33, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %36 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %34, <16 x i8> %35) #5
  %37 = lshr <8 x i16> %36, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %38 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %37, <8 x i16> zeroinitializer) #5
  %39 = shufflevector <16 x i8> %28, <16 x i8> %30, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %40 = shufflevector <16 x i8> %32, <16 x i8> %33, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %41 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %39, <16 x i8> %40) #5
  %42 = lshr <8 x i16> %41, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %43 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %42, <8 x i16> zeroinitializer) #5
  %44 = shufflevector <16 x i8> %26, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %45 = shufflevector <16 x i8> %26, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %46 = bitcast <16 x i8> %44 to <8 x i16>
  %47 = sub <8 x i16> %38, %46
  %48 = bitcast <16 x i8> %45 to <8 x i16>
  %49 = sub <8 x i16> %43, %48
  %50 = add <8 x i16> %49, %47
  %51 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %50, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %52 = add <4 x i32> %51, %23
  %53 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %47, <8 x i16> %47) #5
  %54 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %49, <8 x i16> %49) #5
  %55 = add <4 x i32> %53, %24
  %56 = add <4 x i32> %55, %54
  %57 = getelementptr inbounds i8, i8* %19, i64 16
  %58 = bitcast i8* %57 to <16 x i8>*
  %59 = load <16 x i8>, <16 x i8>* %58, align 1
  %60 = getelementptr inbounds i8, i8* %20, i64 16
  %61 = bitcast i8* %60 to <16 x i8>*
  %62 = load <16 x i8>, <16 x i8>* %61, align 1
  %63 = getelementptr inbounds i8, i8* %21, i64 16
  %64 = bitcast i8* %63 to <16 x i8>*
  %65 = load <16 x i8>, <16 x i8>* %64, align 1
  %66 = getelementptr inbounds i8, i8* %22, i64 16
  %67 = bitcast i8* %66 to <16 x i8>*
  %68 = load <16 x i8>, <16 x i8>* %67, align 1
  %69 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %68
  %70 = shufflevector <16 x i8> %62, <16 x i8> %65, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %71 = shufflevector <16 x i8> %68, <16 x i8> %69, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %72 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %70, <16 x i8> %71) #5
  %73 = lshr <8 x i16> %72, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %74 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %73, <8 x i16> zeroinitializer) #5
  %75 = shufflevector <16 x i8> %62, <16 x i8> %65, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %76 = shufflevector <16 x i8> %68, <16 x i8> %69, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %77 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %75, <16 x i8> %76) #5
  %78 = lshr <8 x i16> %77, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %79 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %78, <8 x i16> zeroinitializer) #5
  %80 = shufflevector <16 x i8> %59, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %81 = shufflevector <16 x i8> %59, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %82 = bitcast <16 x i8> %80 to <8 x i16>
  %83 = sub <8 x i16> %74, %82
  %84 = bitcast <16 x i8> %81 to <8 x i16>
  %85 = sub <8 x i16> %79, %84
  %86 = add <8 x i16> %85, %83
  %87 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %86, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %88 = add <4 x i32> %87, %52
  %89 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %83, <8 x i16> %83) #5
  %90 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %85, <8 x i16> %85) #5
  %91 = add <4 x i32> %89, %56
  %92 = add <4 x i32> %91, %90
  %93 = getelementptr inbounds i8, i8* %19, i64 32
  %94 = bitcast i8* %93 to <16 x i8>*
  %95 = load <16 x i8>, <16 x i8>* %94, align 1
  %96 = getelementptr inbounds i8, i8* %20, i64 32
  %97 = bitcast i8* %96 to <16 x i8>*
  %98 = load <16 x i8>, <16 x i8>* %97, align 1
  %99 = getelementptr inbounds i8, i8* %21, i64 32
  %100 = bitcast i8* %99 to <16 x i8>*
  %101 = load <16 x i8>, <16 x i8>* %100, align 1
  %102 = getelementptr inbounds i8, i8* %22, i64 32
  %103 = bitcast i8* %102 to <16 x i8>*
  %104 = load <16 x i8>, <16 x i8>* %103, align 1
  %105 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %104
  %106 = shufflevector <16 x i8> %98, <16 x i8> %101, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %107 = shufflevector <16 x i8> %104, <16 x i8> %105, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %108 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %106, <16 x i8> %107) #5
  %109 = lshr <8 x i16> %108, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %110 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %109, <8 x i16> zeroinitializer) #5
  %111 = shufflevector <16 x i8> %98, <16 x i8> %101, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %112 = shufflevector <16 x i8> %104, <16 x i8> %105, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %113 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %111, <16 x i8> %112) #5
  %114 = lshr <8 x i16> %113, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %115 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %114, <8 x i16> zeroinitializer) #5
  %116 = shufflevector <16 x i8> %95, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %117 = shufflevector <16 x i8> %95, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %118 = bitcast <16 x i8> %116 to <8 x i16>
  %119 = sub <8 x i16> %110, %118
  %120 = bitcast <16 x i8> %117 to <8 x i16>
  %121 = sub <8 x i16> %115, %120
  %122 = add <8 x i16> %121, %119
  %123 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %122, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %124 = add <4 x i32> %123, %88
  %125 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %119, <8 x i16> %119) #5
  %126 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %121, <8 x i16> %121) #5
  %127 = add <4 x i32> %125, %92
  %128 = add <4 x i32> %127, %126
  %129 = getelementptr inbounds i8, i8* %19, i64 48
  %130 = bitcast i8* %129 to <16 x i8>*
  %131 = load <16 x i8>, <16 x i8>* %130, align 1
  %132 = getelementptr inbounds i8, i8* %20, i64 48
  %133 = bitcast i8* %132 to <16 x i8>*
  %134 = load <16 x i8>, <16 x i8>* %133, align 1
  %135 = getelementptr inbounds i8, i8* %21, i64 48
  %136 = bitcast i8* %135 to <16 x i8>*
  %137 = load <16 x i8>, <16 x i8>* %136, align 1
  %138 = getelementptr inbounds i8, i8* %22, i64 48
  %139 = bitcast i8* %138 to <16 x i8>*
  %140 = load <16 x i8>, <16 x i8>* %139, align 1
  %141 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %140
  %142 = shufflevector <16 x i8> %134, <16 x i8> %137, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %143 = shufflevector <16 x i8> %140, <16 x i8> %141, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %144 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %142, <16 x i8> %143) #5
  %145 = lshr <8 x i16> %144, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %146 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %145, <8 x i16> zeroinitializer) #5
  %147 = shufflevector <16 x i8> %134, <16 x i8> %137, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %148 = shufflevector <16 x i8> %140, <16 x i8> %141, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %149 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %147, <16 x i8> %148) #5
  %150 = lshr <8 x i16> %149, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %151 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %150, <8 x i16> zeroinitializer) #5
  %152 = shufflevector <16 x i8> %131, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %153 = shufflevector <16 x i8> %131, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %154 = bitcast <16 x i8> %152 to <8 x i16>
  %155 = sub <8 x i16> %146, %154
  %156 = bitcast <16 x i8> %153 to <8 x i16>
  %157 = sub <8 x i16> %151, %156
  %158 = add <8 x i16> %157, %155
  %159 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %158, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %160 = add <4 x i32> %159, %124
  %161 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %155, <8 x i16> %155) #5
  %162 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %157, <8 x i16> %157) #5
  %163 = add <4 x i32> %161, %128
  %164 = add <4 x i32> %163, %162
  %165 = getelementptr inbounds i8, i8* %19, i64 %15
  %166 = getelementptr inbounds i8, i8* %20, i64 64
  %167 = getelementptr inbounds i8, i8* %21, i64 64
  %168 = getelementptr inbounds i8, i8* %22, i64 %16
  %169 = add nuw nsw i32 %18, 1
  %170 = icmp eq i32 %169, 64
  br i1 %170, label %171, label %17

171:                                              ; preds = %17
  %172 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %160, <4 x i32> %164) #5
  %173 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %172, <4 x i32> %172) #5
  br label %331

174:                                              ; preds = %11, %174
  %175 = phi i32 [ %326, %174 ], [ 0, %11 ]
  %176 = phi i8* [ %322, %174 ], [ %4, %11 ]
  %177 = phi i8* [ %323, %174 ], [ %6, %11 ]
  %178 = phi i8* [ %324, %174 ], [ %13, %11 ]
  %179 = phi i8* [ %325, %174 ], [ %7, %11 ]
  %180 = phi <4 x i32> [ %317, %174 ], [ zeroinitializer, %11 ]
  %181 = phi <4 x i32> [ %321, %174 ], [ zeroinitializer, %11 ]
  %182 = bitcast i8* %176 to <16 x i8>*
  %183 = load <16 x i8>, <16 x i8>* %182, align 1
  %184 = bitcast i8* %177 to <16 x i8>*
  %185 = load <16 x i8>, <16 x i8>* %184, align 1
  %186 = bitcast i8* %178 to <16 x i8>*
  %187 = load <16 x i8>, <16 x i8>* %186, align 1
  %188 = bitcast i8* %179 to <16 x i8>*
  %189 = load <16 x i8>, <16 x i8>* %188, align 1
  %190 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %189
  %191 = shufflevector <16 x i8> %185, <16 x i8> %187, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %192 = shufflevector <16 x i8> %189, <16 x i8> %190, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %193 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %191, <16 x i8> %192) #5
  %194 = lshr <8 x i16> %193, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %195 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %194, <8 x i16> zeroinitializer) #5
  %196 = shufflevector <16 x i8> %185, <16 x i8> %187, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %197 = shufflevector <16 x i8> %189, <16 x i8> %190, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %198 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %196, <16 x i8> %197) #5
  %199 = lshr <8 x i16> %198, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %200 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %199, <8 x i16> zeroinitializer) #5
  %201 = shufflevector <16 x i8> %183, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %202 = shufflevector <16 x i8> %183, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %203 = bitcast <16 x i8> %201 to <8 x i16>
  %204 = sub <8 x i16> %195, %203
  %205 = bitcast <16 x i8> %202 to <8 x i16>
  %206 = sub <8 x i16> %200, %205
  %207 = add <8 x i16> %206, %204
  %208 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %207, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %209 = add <4 x i32> %208, %180
  %210 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %204, <8 x i16> %204) #5
  %211 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %206, <8 x i16> %206) #5
  %212 = add <4 x i32> %210, %181
  %213 = add <4 x i32> %212, %211
  %214 = getelementptr inbounds i8, i8* %176, i64 16
  %215 = bitcast i8* %214 to <16 x i8>*
  %216 = load <16 x i8>, <16 x i8>* %215, align 1
  %217 = getelementptr inbounds i8, i8* %177, i64 16
  %218 = bitcast i8* %217 to <16 x i8>*
  %219 = load <16 x i8>, <16 x i8>* %218, align 1
  %220 = getelementptr inbounds i8, i8* %178, i64 16
  %221 = bitcast i8* %220 to <16 x i8>*
  %222 = load <16 x i8>, <16 x i8>* %221, align 1
  %223 = getelementptr inbounds i8, i8* %179, i64 16
  %224 = bitcast i8* %223 to <16 x i8>*
  %225 = load <16 x i8>, <16 x i8>* %224, align 1
  %226 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %225
  %227 = shufflevector <16 x i8> %219, <16 x i8> %222, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %228 = shufflevector <16 x i8> %225, <16 x i8> %226, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %229 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %227, <16 x i8> %228) #5
  %230 = lshr <8 x i16> %229, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %231 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %230, <8 x i16> zeroinitializer) #5
  %232 = shufflevector <16 x i8> %219, <16 x i8> %222, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %233 = shufflevector <16 x i8> %225, <16 x i8> %226, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %234 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %232, <16 x i8> %233) #5
  %235 = lshr <8 x i16> %234, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %236 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %235, <8 x i16> zeroinitializer) #5
  %237 = shufflevector <16 x i8> %216, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %238 = shufflevector <16 x i8> %216, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %239 = bitcast <16 x i8> %237 to <8 x i16>
  %240 = sub <8 x i16> %231, %239
  %241 = bitcast <16 x i8> %238 to <8 x i16>
  %242 = sub <8 x i16> %236, %241
  %243 = add <8 x i16> %242, %240
  %244 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %243, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %245 = add <4 x i32> %244, %209
  %246 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %240, <8 x i16> %240) #5
  %247 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %242, <8 x i16> %242) #5
  %248 = add <4 x i32> %246, %213
  %249 = add <4 x i32> %248, %247
  %250 = getelementptr inbounds i8, i8* %176, i64 32
  %251 = bitcast i8* %250 to <16 x i8>*
  %252 = load <16 x i8>, <16 x i8>* %251, align 1
  %253 = getelementptr inbounds i8, i8* %177, i64 32
  %254 = bitcast i8* %253 to <16 x i8>*
  %255 = load <16 x i8>, <16 x i8>* %254, align 1
  %256 = getelementptr inbounds i8, i8* %178, i64 32
  %257 = bitcast i8* %256 to <16 x i8>*
  %258 = load <16 x i8>, <16 x i8>* %257, align 1
  %259 = getelementptr inbounds i8, i8* %179, i64 32
  %260 = bitcast i8* %259 to <16 x i8>*
  %261 = load <16 x i8>, <16 x i8>* %260, align 1
  %262 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %261
  %263 = shufflevector <16 x i8> %255, <16 x i8> %258, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %264 = shufflevector <16 x i8> %261, <16 x i8> %262, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %265 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %263, <16 x i8> %264) #5
  %266 = lshr <8 x i16> %265, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %267 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %266, <8 x i16> zeroinitializer) #5
  %268 = shufflevector <16 x i8> %255, <16 x i8> %258, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %269 = shufflevector <16 x i8> %261, <16 x i8> %262, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %270 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %268, <16 x i8> %269) #5
  %271 = lshr <8 x i16> %270, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %272 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %271, <8 x i16> zeroinitializer) #5
  %273 = shufflevector <16 x i8> %252, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %274 = shufflevector <16 x i8> %252, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %275 = bitcast <16 x i8> %273 to <8 x i16>
  %276 = sub <8 x i16> %267, %275
  %277 = bitcast <16 x i8> %274 to <8 x i16>
  %278 = sub <8 x i16> %272, %277
  %279 = add <8 x i16> %278, %276
  %280 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %279, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %281 = add <4 x i32> %280, %245
  %282 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %276, <8 x i16> %276) #5
  %283 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %278, <8 x i16> %278) #5
  %284 = add <4 x i32> %282, %249
  %285 = add <4 x i32> %284, %283
  %286 = getelementptr inbounds i8, i8* %176, i64 48
  %287 = bitcast i8* %286 to <16 x i8>*
  %288 = load <16 x i8>, <16 x i8>* %287, align 1
  %289 = getelementptr inbounds i8, i8* %177, i64 48
  %290 = bitcast i8* %289 to <16 x i8>*
  %291 = load <16 x i8>, <16 x i8>* %290, align 1
  %292 = getelementptr inbounds i8, i8* %178, i64 48
  %293 = bitcast i8* %292 to <16 x i8>*
  %294 = load <16 x i8>, <16 x i8>* %293, align 1
  %295 = getelementptr inbounds i8, i8* %179, i64 48
  %296 = bitcast i8* %295 to <16 x i8>*
  %297 = load <16 x i8>, <16 x i8>* %296, align 1
  %298 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %297
  %299 = shufflevector <16 x i8> %291, <16 x i8> %294, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %300 = shufflevector <16 x i8> %297, <16 x i8> %298, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %301 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %299, <16 x i8> %300) #5
  %302 = lshr <8 x i16> %301, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %303 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %302, <8 x i16> zeroinitializer) #5
  %304 = shufflevector <16 x i8> %291, <16 x i8> %294, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %305 = shufflevector <16 x i8> %297, <16 x i8> %298, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %306 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %304, <16 x i8> %305) #5
  %307 = lshr <8 x i16> %306, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %308 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %307, <8 x i16> zeroinitializer) #5
  %309 = shufflevector <16 x i8> %288, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %310 = shufflevector <16 x i8> %288, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %311 = bitcast <16 x i8> %309 to <8 x i16>
  %312 = sub <8 x i16> %303, %311
  %313 = bitcast <16 x i8> %310 to <8 x i16>
  %314 = sub <8 x i16> %308, %313
  %315 = add <8 x i16> %314, %312
  %316 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %315, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %317 = add <4 x i32> %316, %281
  %318 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %312, <8 x i16> %312) #5
  %319 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %314, <8 x i16> %314) #5
  %320 = add <4 x i32> %318, %285
  %321 = add <4 x i32> %320, %319
  %322 = getelementptr inbounds i8, i8* %176, i64 %15
  %323 = getelementptr inbounds i8, i8* %177, i64 64
  %324 = getelementptr inbounds i8, i8* %178, i64 64
  %325 = getelementptr inbounds i8, i8* %179, i64 %16
  %326 = add nuw nsw i32 %175, 1
  %327 = icmp eq i32 %326, 64
  br i1 %327, label %328, label %174

328:                                              ; preds = %174
  %329 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %317, <4 x i32> %321) #5
  %330 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %329, <4 x i32> %329) #5
  br label %331

331:                                              ; preds = %328, %171
  %332 = phi <4 x i32> [ %330, %328 ], [ %173, %171 ]
  %333 = extractelement <4 x i32> %332, i32 0
  %334 = bitcast <4 x i32> %332 to <16 x i8>
  %335 = shufflevector <16 x i8> %334, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %336 = bitcast <16 x i8> %335 to <4 x i32>
  %337 = extractelement <4 x i32> %336, i32 0
  store i32 %337, i32* %10, align 4
  %338 = sext i32 %333 to i64
  %339 = mul nsw i64 %338, %338
  %340 = lshr i64 %339, 12
  %341 = trunc i64 %340 to i32
  %342 = sub i32 %337, %341
  call void @llvm.lifetime.end.p0i8(i64 4160, i8* nonnull %13) #5
  ret i32 %342
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @aom_masked_sub_pixel_variance64x32_ssse3(i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32, i32* nocapture) local_unnamed_addr #0 {
  %12 = alloca [2112 x i8], align 16
  %13 = getelementptr inbounds [2112 x i8], [2112 x i8]* %12, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 2112, i8* nonnull %13) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 2112, i1 false)
  call fastcc void @bilinear_filter(i8* %0, i32 %1, i32 %2, i32 %3, i8* nonnull %13, i32 64, i32 32)
  %14 = icmp eq i32 %9, 0
  %15 = sext i32 %5 to i64
  %16 = sext i32 %8 to i64
  br i1 %14, label %17, label %174

17:                                               ; preds = %11, %17
  %18 = phi i32 [ %169, %17 ], [ 0, %11 ]
  %19 = phi i8* [ %165, %17 ], [ %4, %11 ]
  %20 = phi i8* [ %166, %17 ], [ %13, %11 ]
  %21 = phi i8* [ %167, %17 ], [ %6, %11 ]
  %22 = phi i8* [ %168, %17 ], [ %7, %11 ]
  %23 = phi <4 x i32> [ %160, %17 ], [ zeroinitializer, %11 ]
  %24 = phi <4 x i32> [ %164, %17 ], [ zeroinitializer, %11 ]
  %25 = bitcast i8* %19 to <16 x i8>*
  %26 = load <16 x i8>, <16 x i8>* %25, align 1
  %27 = bitcast i8* %20 to <16 x i8>*
  %28 = load <16 x i8>, <16 x i8>* %27, align 1
  %29 = bitcast i8* %21 to <16 x i8>*
  %30 = load <16 x i8>, <16 x i8>* %29, align 1
  %31 = bitcast i8* %22 to <16 x i8>*
  %32 = load <16 x i8>, <16 x i8>* %31, align 1
  %33 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %32
  %34 = shufflevector <16 x i8> %28, <16 x i8> %30, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %35 = shufflevector <16 x i8> %32, <16 x i8> %33, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %36 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %34, <16 x i8> %35) #5
  %37 = lshr <8 x i16> %36, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %38 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %37, <8 x i16> zeroinitializer) #5
  %39 = shufflevector <16 x i8> %28, <16 x i8> %30, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %40 = shufflevector <16 x i8> %32, <16 x i8> %33, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %41 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %39, <16 x i8> %40) #5
  %42 = lshr <8 x i16> %41, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %43 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %42, <8 x i16> zeroinitializer) #5
  %44 = shufflevector <16 x i8> %26, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %45 = shufflevector <16 x i8> %26, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %46 = bitcast <16 x i8> %44 to <8 x i16>
  %47 = sub <8 x i16> %38, %46
  %48 = bitcast <16 x i8> %45 to <8 x i16>
  %49 = sub <8 x i16> %43, %48
  %50 = add <8 x i16> %49, %47
  %51 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %50, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %52 = add <4 x i32> %51, %23
  %53 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %47, <8 x i16> %47) #5
  %54 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %49, <8 x i16> %49) #5
  %55 = add <4 x i32> %53, %24
  %56 = add <4 x i32> %55, %54
  %57 = getelementptr inbounds i8, i8* %19, i64 16
  %58 = bitcast i8* %57 to <16 x i8>*
  %59 = load <16 x i8>, <16 x i8>* %58, align 1
  %60 = getelementptr inbounds i8, i8* %20, i64 16
  %61 = bitcast i8* %60 to <16 x i8>*
  %62 = load <16 x i8>, <16 x i8>* %61, align 1
  %63 = getelementptr inbounds i8, i8* %21, i64 16
  %64 = bitcast i8* %63 to <16 x i8>*
  %65 = load <16 x i8>, <16 x i8>* %64, align 1
  %66 = getelementptr inbounds i8, i8* %22, i64 16
  %67 = bitcast i8* %66 to <16 x i8>*
  %68 = load <16 x i8>, <16 x i8>* %67, align 1
  %69 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %68
  %70 = shufflevector <16 x i8> %62, <16 x i8> %65, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %71 = shufflevector <16 x i8> %68, <16 x i8> %69, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %72 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %70, <16 x i8> %71) #5
  %73 = lshr <8 x i16> %72, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %74 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %73, <8 x i16> zeroinitializer) #5
  %75 = shufflevector <16 x i8> %62, <16 x i8> %65, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %76 = shufflevector <16 x i8> %68, <16 x i8> %69, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %77 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %75, <16 x i8> %76) #5
  %78 = lshr <8 x i16> %77, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %79 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %78, <8 x i16> zeroinitializer) #5
  %80 = shufflevector <16 x i8> %59, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %81 = shufflevector <16 x i8> %59, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %82 = bitcast <16 x i8> %80 to <8 x i16>
  %83 = sub <8 x i16> %74, %82
  %84 = bitcast <16 x i8> %81 to <8 x i16>
  %85 = sub <8 x i16> %79, %84
  %86 = add <8 x i16> %85, %83
  %87 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %86, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %88 = add <4 x i32> %87, %52
  %89 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %83, <8 x i16> %83) #5
  %90 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %85, <8 x i16> %85) #5
  %91 = add <4 x i32> %89, %56
  %92 = add <4 x i32> %91, %90
  %93 = getelementptr inbounds i8, i8* %19, i64 32
  %94 = bitcast i8* %93 to <16 x i8>*
  %95 = load <16 x i8>, <16 x i8>* %94, align 1
  %96 = getelementptr inbounds i8, i8* %20, i64 32
  %97 = bitcast i8* %96 to <16 x i8>*
  %98 = load <16 x i8>, <16 x i8>* %97, align 1
  %99 = getelementptr inbounds i8, i8* %21, i64 32
  %100 = bitcast i8* %99 to <16 x i8>*
  %101 = load <16 x i8>, <16 x i8>* %100, align 1
  %102 = getelementptr inbounds i8, i8* %22, i64 32
  %103 = bitcast i8* %102 to <16 x i8>*
  %104 = load <16 x i8>, <16 x i8>* %103, align 1
  %105 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %104
  %106 = shufflevector <16 x i8> %98, <16 x i8> %101, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %107 = shufflevector <16 x i8> %104, <16 x i8> %105, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %108 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %106, <16 x i8> %107) #5
  %109 = lshr <8 x i16> %108, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %110 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %109, <8 x i16> zeroinitializer) #5
  %111 = shufflevector <16 x i8> %98, <16 x i8> %101, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %112 = shufflevector <16 x i8> %104, <16 x i8> %105, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %113 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %111, <16 x i8> %112) #5
  %114 = lshr <8 x i16> %113, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %115 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %114, <8 x i16> zeroinitializer) #5
  %116 = shufflevector <16 x i8> %95, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %117 = shufflevector <16 x i8> %95, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %118 = bitcast <16 x i8> %116 to <8 x i16>
  %119 = sub <8 x i16> %110, %118
  %120 = bitcast <16 x i8> %117 to <8 x i16>
  %121 = sub <8 x i16> %115, %120
  %122 = add <8 x i16> %121, %119
  %123 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %122, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %124 = add <4 x i32> %123, %88
  %125 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %119, <8 x i16> %119) #5
  %126 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %121, <8 x i16> %121) #5
  %127 = add <4 x i32> %125, %92
  %128 = add <4 x i32> %127, %126
  %129 = getelementptr inbounds i8, i8* %19, i64 48
  %130 = bitcast i8* %129 to <16 x i8>*
  %131 = load <16 x i8>, <16 x i8>* %130, align 1
  %132 = getelementptr inbounds i8, i8* %20, i64 48
  %133 = bitcast i8* %132 to <16 x i8>*
  %134 = load <16 x i8>, <16 x i8>* %133, align 1
  %135 = getelementptr inbounds i8, i8* %21, i64 48
  %136 = bitcast i8* %135 to <16 x i8>*
  %137 = load <16 x i8>, <16 x i8>* %136, align 1
  %138 = getelementptr inbounds i8, i8* %22, i64 48
  %139 = bitcast i8* %138 to <16 x i8>*
  %140 = load <16 x i8>, <16 x i8>* %139, align 1
  %141 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %140
  %142 = shufflevector <16 x i8> %134, <16 x i8> %137, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %143 = shufflevector <16 x i8> %140, <16 x i8> %141, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %144 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %142, <16 x i8> %143) #5
  %145 = lshr <8 x i16> %144, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %146 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %145, <8 x i16> zeroinitializer) #5
  %147 = shufflevector <16 x i8> %134, <16 x i8> %137, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %148 = shufflevector <16 x i8> %140, <16 x i8> %141, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %149 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %147, <16 x i8> %148) #5
  %150 = lshr <8 x i16> %149, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %151 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %150, <8 x i16> zeroinitializer) #5
  %152 = shufflevector <16 x i8> %131, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %153 = shufflevector <16 x i8> %131, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %154 = bitcast <16 x i8> %152 to <8 x i16>
  %155 = sub <8 x i16> %146, %154
  %156 = bitcast <16 x i8> %153 to <8 x i16>
  %157 = sub <8 x i16> %151, %156
  %158 = add <8 x i16> %157, %155
  %159 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %158, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %160 = add <4 x i32> %159, %124
  %161 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %155, <8 x i16> %155) #5
  %162 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %157, <8 x i16> %157) #5
  %163 = add <4 x i32> %161, %128
  %164 = add <4 x i32> %163, %162
  %165 = getelementptr inbounds i8, i8* %19, i64 %15
  %166 = getelementptr inbounds i8, i8* %20, i64 64
  %167 = getelementptr inbounds i8, i8* %21, i64 64
  %168 = getelementptr inbounds i8, i8* %22, i64 %16
  %169 = add nuw nsw i32 %18, 1
  %170 = icmp eq i32 %169, 32
  br i1 %170, label %171, label %17

171:                                              ; preds = %17
  %172 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %160, <4 x i32> %164) #5
  %173 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %172, <4 x i32> %172) #5
  br label %331

174:                                              ; preds = %11, %174
  %175 = phi i32 [ %326, %174 ], [ 0, %11 ]
  %176 = phi i8* [ %322, %174 ], [ %4, %11 ]
  %177 = phi i8* [ %323, %174 ], [ %6, %11 ]
  %178 = phi i8* [ %324, %174 ], [ %13, %11 ]
  %179 = phi i8* [ %325, %174 ], [ %7, %11 ]
  %180 = phi <4 x i32> [ %317, %174 ], [ zeroinitializer, %11 ]
  %181 = phi <4 x i32> [ %321, %174 ], [ zeroinitializer, %11 ]
  %182 = bitcast i8* %176 to <16 x i8>*
  %183 = load <16 x i8>, <16 x i8>* %182, align 1
  %184 = bitcast i8* %177 to <16 x i8>*
  %185 = load <16 x i8>, <16 x i8>* %184, align 1
  %186 = bitcast i8* %178 to <16 x i8>*
  %187 = load <16 x i8>, <16 x i8>* %186, align 1
  %188 = bitcast i8* %179 to <16 x i8>*
  %189 = load <16 x i8>, <16 x i8>* %188, align 1
  %190 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %189
  %191 = shufflevector <16 x i8> %185, <16 x i8> %187, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %192 = shufflevector <16 x i8> %189, <16 x i8> %190, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %193 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %191, <16 x i8> %192) #5
  %194 = lshr <8 x i16> %193, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %195 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %194, <8 x i16> zeroinitializer) #5
  %196 = shufflevector <16 x i8> %185, <16 x i8> %187, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %197 = shufflevector <16 x i8> %189, <16 x i8> %190, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %198 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %196, <16 x i8> %197) #5
  %199 = lshr <8 x i16> %198, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %200 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %199, <8 x i16> zeroinitializer) #5
  %201 = shufflevector <16 x i8> %183, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %202 = shufflevector <16 x i8> %183, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %203 = bitcast <16 x i8> %201 to <8 x i16>
  %204 = sub <8 x i16> %195, %203
  %205 = bitcast <16 x i8> %202 to <8 x i16>
  %206 = sub <8 x i16> %200, %205
  %207 = add <8 x i16> %206, %204
  %208 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %207, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %209 = add <4 x i32> %208, %180
  %210 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %204, <8 x i16> %204) #5
  %211 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %206, <8 x i16> %206) #5
  %212 = add <4 x i32> %210, %181
  %213 = add <4 x i32> %212, %211
  %214 = getelementptr inbounds i8, i8* %176, i64 16
  %215 = bitcast i8* %214 to <16 x i8>*
  %216 = load <16 x i8>, <16 x i8>* %215, align 1
  %217 = getelementptr inbounds i8, i8* %177, i64 16
  %218 = bitcast i8* %217 to <16 x i8>*
  %219 = load <16 x i8>, <16 x i8>* %218, align 1
  %220 = getelementptr inbounds i8, i8* %178, i64 16
  %221 = bitcast i8* %220 to <16 x i8>*
  %222 = load <16 x i8>, <16 x i8>* %221, align 1
  %223 = getelementptr inbounds i8, i8* %179, i64 16
  %224 = bitcast i8* %223 to <16 x i8>*
  %225 = load <16 x i8>, <16 x i8>* %224, align 1
  %226 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %225
  %227 = shufflevector <16 x i8> %219, <16 x i8> %222, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %228 = shufflevector <16 x i8> %225, <16 x i8> %226, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %229 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %227, <16 x i8> %228) #5
  %230 = lshr <8 x i16> %229, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %231 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %230, <8 x i16> zeroinitializer) #5
  %232 = shufflevector <16 x i8> %219, <16 x i8> %222, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %233 = shufflevector <16 x i8> %225, <16 x i8> %226, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %234 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %232, <16 x i8> %233) #5
  %235 = lshr <8 x i16> %234, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %236 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %235, <8 x i16> zeroinitializer) #5
  %237 = shufflevector <16 x i8> %216, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %238 = shufflevector <16 x i8> %216, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %239 = bitcast <16 x i8> %237 to <8 x i16>
  %240 = sub <8 x i16> %231, %239
  %241 = bitcast <16 x i8> %238 to <8 x i16>
  %242 = sub <8 x i16> %236, %241
  %243 = add <8 x i16> %242, %240
  %244 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %243, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %245 = add <4 x i32> %244, %209
  %246 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %240, <8 x i16> %240) #5
  %247 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %242, <8 x i16> %242) #5
  %248 = add <4 x i32> %246, %213
  %249 = add <4 x i32> %248, %247
  %250 = getelementptr inbounds i8, i8* %176, i64 32
  %251 = bitcast i8* %250 to <16 x i8>*
  %252 = load <16 x i8>, <16 x i8>* %251, align 1
  %253 = getelementptr inbounds i8, i8* %177, i64 32
  %254 = bitcast i8* %253 to <16 x i8>*
  %255 = load <16 x i8>, <16 x i8>* %254, align 1
  %256 = getelementptr inbounds i8, i8* %178, i64 32
  %257 = bitcast i8* %256 to <16 x i8>*
  %258 = load <16 x i8>, <16 x i8>* %257, align 1
  %259 = getelementptr inbounds i8, i8* %179, i64 32
  %260 = bitcast i8* %259 to <16 x i8>*
  %261 = load <16 x i8>, <16 x i8>* %260, align 1
  %262 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %261
  %263 = shufflevector <16 x i8> %255, <16 x i8> %258, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %264 = shufflevector <16 x i8> %261, <16 x i8> %262, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %265 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %263, <16 x i8> %264) #5
  %266 = lshr <8 x i16> %265, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %267 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %266, <8 x i16> zeroinitializer) #5
  %268 = shufflevector <16 x i8> %255, <16 x i8> %258, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %269 = shufflevector <16 x i8> %261, <16 x i8> %262, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %270 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %268, <16 x i8> %269) #5
  %271 = lshr <8 x i16> %270, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %272 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %271, <8 x i16> zeroinitializer) #5
  %273 = shufflevector <16 x i8> %252, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %274 = shufflevector <16 x i8> %252, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %275 = bitcast <16 x i8> %273 to <8 x i16>
  %276 = sub <8 x i16> %267, %275
  %277 = bitcast <16 x i8> %274 to <8 x i16>
  %278 = sub <8 x i16> %272, %277
  %279 = add <8 x i16> %278, %276
  %280 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %279, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %281 = add <4 x i32> %280, %245
  %282 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %276, <8 x i16> %276) #5
  %283 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %278, <8 x i16> %278) #5
  %284 = add <4 x i32> %282, %249
  %285 = add <4 x i32> %284, %283
  %286 = getelementptr inbounds i8, i8* %176, i64 48
  %287 = bitcast i8* %286 to <16 x i8>*
  %288 = load <16 x i8>, <16 x i8>* %287, align 1
  %289 = getelementptr inbounds i8, i8* %177, i64 48
  %290 = bitcast i8* %289 to <16 x i8>*
  %291 = load <16 x i8>, <16 x i8>* %290, align 1
  %292 = getelementptr inbounds i8, i8* %178, i64 48
  %293 = bitcast i8* %292 to <16 x i8>*
  %294 = load <16 x i8>, <16 x i8>* %293, align 1
  %295 = getelementptr inbounds i8, i8* %179, i64 48
  %296 = bitcast i8* %295 to <16 x i8>*
  %297 = load <16 x i8>, <16 x i8>* %296, align 1
  %298 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %297
  %299 = shufflevector <16 x i8> %291, <16 x i8> %294, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %300 = shufflevector <16 x i8> %297, <16 x i8> %298, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %301 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %299, <16 x i8> %300) #5
  %302 = lshr <8 x i16> %301, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %303 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %302, <8 x i16> zeroinitializer) #5
  %304 = shufflevector <16 x i8> %291, <16 x i8> %294, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %305 = shufflevector <16 x i8> %297, <16 x i8> %298, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %306 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %304, <16 x i8> %305) #5
  %307 = lshr <8 x i16> %306, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %308 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %307, <8 x i16> zeroinitializer) #5
  %309 = shufflevector <16 x i8> %288, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %310 = shufflevector <16 x i8> %288, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %311 = bitcast <16 x i8> %309 to <8 x i16>
  %312 = sub <8 x i16> %303, %311
  %313 = bitcast <16 x i8> %310 to <8 x i16>
  %314 = sub <8 x i16> %308, %313
  %315 = add <8 x i16> %314, %312
  %316 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %315, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %317 = add <4 x i32> %316, %281
  %318 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %312, <8 x i16> %312) #5
  %319 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %314, <8 x i16> %314) #5
  %320 = add <4 x i32> %318, %285
  %321 = add <4 x i32> %320, %319
  %322 = getelementptr inbounds i8, i8* %176, i64 %15
  %323 = getelementptr inbounds i8, i8* %177, i64 64
  %324 = getelementptr inbounds i8, i8* %178, i64 64
  %325 = getelementptr inbounds i8, i8* %179, i64 %16
  %326 = add nuw nsw i32 %175, 1
  %327 = icmp eq i32 %326, 32
  br i1 %327, label %328, label %174

328:                                              ; preds = %174
  %329 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %317, <4 x i32> %321) #5
  %330 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %329, <4 x i32> %329) #5
  br label %331

331:                                              ; preds = %328, %171
  %332 = phi <4 x i32> [ %330, %328 ], [ %173, %171 ]
  %333 = extractelement <4 x i32> %332, i32 0
  %334 = bitcast <4 x i32> %332 to <16 x i8>
  %335 = shufflevector <16 x i8> %334, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %336 = bitcast <16 x i8> %335 to <4 x i32>
  %337 = extractelement <4 x i32> %336, i32 0
  store i32 %337, i32* %10, align 4
  %338 = sext i32 %333 to i64
  %339 = mul nsw i64 %338, %338
  %340 = lshr i64 %339, 11
  %341 = trunc i64 %340 to i32
  %342 = sub i32 %337, %341
  call void @llvm.lifetime.end.p0i8(i64 2112, i8* nonnull %13) #5
  ret i32 %342
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @aom_masked_sub_pixel_variance32x64_ssse3(i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32, i32* nocapture) local_unnamed_addr #0 {
  %12 = alloca [2080 x i8], align 16
  %13 = getelementptr inbounds [2080 x i8], [2080 x i8]* %12, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 2080, i8* nonnull %13) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 2080, i1 false)
  call fastcc void @bilinear_filter(i8* %0, i32 %1, i32 %2, i32 %3, i8* nonnull %13, i32 32, i32 64)
  %14 = icmp eq i32 %9, 0
  %15 = sext i32 %5 to i64
  %16 = sext i32 %8 to i64
  br i1 %14, label %17, label %102

17:                                               ; preds = %11, %17
  %18 = phi i32 [ %97, %17 ], [ 0, %11 ]
  %19 = phi i8* [ %93, %17 ], [ %4, %11 ]
  %20 = phi i8* [ %94, %17 ], [ %13, %11 ]
  %21 = phi i8* [ %95, %17 ], [ %6, %11 ]
  %22 = phi i8* [ %96, %17 ], [ %7, %11 ]
  %23 = phi <4 x i32> [ %88, %17 ], [ zeroinitializer, %11 ]
  %24 = phi <4 x i32> [ %92, %17 ], [ zeroinitializer, %11 ]
  %25 = bitcast i8* %19 to <16 x i8>*
  %26 = load <16 x i8>, <16 x i8>* %25, align 1
  %27 = bitcast i8* %20 to <16 x i8>*
  %28 = load <16 x i8>, <16 x i8>* %27, align 1
  %29 = bitcast i8* %21 to <16 x i8>*
  %30 = load <16 x i8>, <16 x i8>* %29, align 1
  %31 = bitcast i8* %22 to <16 x i8>*
  %32 = load <16 x i8>, <16 x i8>* %31, align 1
  %33 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %32
  %34 = shufflevector <16 x i8> %28, <16 x i8> %30, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %35 = shufflevector <16 x i8> %32, <16 x i8> %33, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %36 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %34, <16 x i8> %35) #5
  %37 = lshr <8 x i16> %36, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %38 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %37, <8 x i16> zeroinitializer) #5
  %39 = shufflevector <16 x i8> %28, <16 x i8> %30, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %40 = shufflevector <16 x i8> %32, <16 x i8> %33, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %41 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %39, <16 x i8> %40) #5
  %42 = lshr <8 x i16> %41, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %43 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %42, <8 x i16> zeroinitializer) #5
  %44 = shufflevector <16 x i8> %26, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %45 = shufflevector <16 x i8> %26, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %46 = bitcast <16 x i8> %44 to <8 x i16>
  %47 = sub <8 x i16> %38, %46
  %48 = bitcast <16 x i8> %45 to <8 x i16>
  %49 = sub <8 x i16> %43, %48
  %50 = add <8 x i16> %49, %47
  %51 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %50, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %52 = add <4 x i32> %51, %23
  %53 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %47, <8 x i16> %47) #5
  %54 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %49, <8 x i16> %49) #5
  %55 = add <4 x i32> %53, %24
  %56 = add <4 x i32> %55, %54
  %57 = getelementptr inbounds i8, i8* %19, i64 16
  %58 = bitcast i8* %57 to <16 x i8>*
  %59 = load <16 x i8>, <16 x i8>* %58, align 1
  %60 = getelementptr inbounds i8, i8* %20, i64 16
  %61 = bitcast i8* %60 to <16 x i8>*
  %62 = load <16 x i8>, <16 x i8>* %61, align 1
  %63 = getelementptr inbounds i8, i8* %21, i64 16
  %64 = bitcast i8* %63 to <16 x i8>*
  %65 = load <16 x i8>, <16 x i8>* %64, align 1
  %66 = getelementptr inbounds i8, i8* %22, i64 16
  %67 = bitcast i8* %66 to <16 x i8>*
  %68 = load <16 x i8>, <16 x i8>* %67, align 1
  %69 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %68
  %70 = shufflevector <16 x i8> %62, <16 x i8> %65, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %71 = shufflevector <16 x i8> %68, <16 x i8> %69, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %72 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %70, <16 x i8> %71) #5
  %73 = lshr <8 x i16> %72, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %74 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %73, <8 x i16> zeroinitializer) #5
  %75 = shufflevector <16 x i8> %62, <16 x i8> %65, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %76 = shufflevector <16 x i8> %68, <16 x i8> %69, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %77 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %75, <16 x i8> %76) #5
  %78 = lshr <8 x i16> %77, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %79 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %78, <8 x i16> zeroinitializer) #5
  %80 = shufflevector <16 x i8> %59, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %81 = shufflevector <16 x i8> %59, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %82 = bitcast <16 x i8> %80 to <8 x i16>
  %83 = sub <8 x i16> %74, %82
  %84 = bitcast <16 x i8> %81 to <8 x i16>
  %85 = sub <8 x i16> %79, %84
  %86 = add <8 x i16> %85, %83
  %87 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %86, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %88 = add <4 x i32> %87, %52
  %89 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %83, <8 x i16> %83) #5
  %90 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %85, <8 x i16> %85) #5
  %91 = add <4 x i32> %89, %56
  %92 = add <4 x i32> %91, %90
  %93 = getelementptr inbounds i8, i8* %19, i64 %15
  %94 = getelementptr inbounds i8, i8* %20, i64 32
  %95 = getelementptr inbounds i8, i8* %21, i64 32
  %96 = getelementptr inbounds i8, i8* %22, i64 %16
  %97 = add nuw nsw i32 %18, 1
  %98 = icmp eq i32 %97, 64
  br i1 %98, label %99, label %17

99:                                               ; preds = %17
  %100 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %88, <4 x i32> %92) #5
  %101 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %100, <4 x i32> %100) #5
  br label %187

102:                                              ; preds = %11, %102
  %103 = phi i32 [ %182, %102 ], [ 0, %11 ]
  %104 = phi i8* [ %178, %102 ], [ %4, %11 ]
  %105 = phi i8* [ %179, %102 ], [ %6, %11 ]
  %106 = phi i8* [ %180, %102 ], [ %13, %11 ]
  %107 = phi i8* [ %181, %102 ], [ %7, %11 ]
  %108 = phi <4 x i32> [ %173, %102 ], [ zeroinitializer, %11 ]
  %109 = phi <4 x i32> [ %177, %102 ], [ zeroinitializer, %11 ]
  %110 = bitcast i8* %104 to <16 x i8>*
  %111 = load <16 x i8>, <16 x i8>* %110, align 1
  %112 = bitcast i8* %105 to <16 x i8>*
  %113 = load <16 x i8>, <16 x i8>* %112, align 1
  %114 = bitcast i8* %106 to <16 x i8>*
  %115 = load <16 x i8>, <16 x i8>* %114, align 1
  %116 = bitcast i8* %107 to <16 x i8>*
  %117 = load <16 x i8>, <16 x i8>* %116, align 1
  %118 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %117
  %119 = shufflevector <16 x i8> %113, <16 x i8> %115, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %120 = shufflevector <16 x i8> %117, <16 x i8> %118, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %121 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %119, <16 x i8> %120) #5
  %122 = lshr <8 x i16> %121, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %123 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %122, <8 x i16> zeroinitializer) #5
  %124 = shufflevector <16 x i8> %113, <16 x i8> %115, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %125 = shufflevector <16 x i8> %117, <16 x i8> %118, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %126 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %124, <16 x i8> %125) #5
  %127 = lshr <8 x i16> %126, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %128 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %127, <8 x i16> zeroinitializer) #5
  %129 = shufflevector <16 x i8> %111, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %130 = shufflevector <16 x i8> %111, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %131 = bitcast <16 x i8> %129 to <8 x i16>
  %132 = sub <8 x i16> %123, %131
  %133 = bitcast <16 x i8> %130 to <8 x i16>
  %134 = sub <8 x i16> %128, %133
  %135 = add <8 x i16> %134, %132
  %136 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %135, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %137 = add <4 x i32> %136, %108
  %138 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %132, <8 x i16> %132) #5
  %139 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %134, <8 x i16> %134) #5
  %140 = add <4 x i32> %138, %109
  %141 = add <4 x i32> %140, %139
  %142 = getelementptr inbounds i8, i8* %104, i64 16
  %143 = bitcast i8* %142 to <16 x i8>*
  %144 = load <16 x i8>, <16 x i8>* %143, align 1
  %145 = getelementptr inbounds i8, i8* %105, i64 16
  %146 = bitcast i8* %145 to <16 x i8>*
  %147 = load <16 x i8>, <16 x i8>* %146, align 1
  %148 = getelementptr inbounds i8, i8* %106, i64 16
  %149 = bitcast i8* %148 to <16 x i8>*
  %150 = load <16 x i8>, <16 x i8>* %149, align 1
  %151 = getelementptr inbounds i8, i8* %107, i64 16
  %152 = bitcast i8* %151 to <16 x i8>*
  %153 = load <16 x i8>, <16 x i8>* %152, align 1
  %154 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %153
  %155 = shufflevector <16 x i8> %147, <16 x i8> %150, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %156 = shufflevector <16 x i8> %153, <16 x i8> %154, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %157 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %155, <16 x i8> %156) #5
  %158 = lshr <8 x i16> %157, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %159 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %158, <8 x i16> zeroinitializer) #5
  %160 = shufflevector <16 x i8> %147, <16 x i8> %150, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %161 = shufflevector <16 x i8> %153, <16 x i8> %154, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %162 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %160, <16 x i8> %161) #5
  %163 = lshr <8 x i16> %162, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %164 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %163, <8 x i16> zeroinitializer) #5
  %165 = shufflevector <16 x i8> %144, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %166 = shufflevector <16 x i8> %144, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %167 = bitcast <16 x i8> %165 to <8 x i16>
  %168 = sub <8 x i16> %159, %167
  %169 = bitcast <16 x i8> %166 to <8 x i16>
  %170 = sub <8 x i16> %164, %169
  %171 = add <8 x i16> %170, %168
  %172 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %171, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %173 = add <4 x i32> %172, %137
  %174 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %168, <8 x i16> %168) #5
  %175 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %170, <8 x i16> %170) #5
  %176 = add <4 x i32> %174, %141
  %177 = add <4 x i32> %176, %175
  %178 = getelementptr inbounds i8, i8* %104, i64 %15
  %179 = getelementptr inbounds i8, i8* %105, i64 32
  %180 = getelementptr inbounds i8, i8* %106, i64 32
  %181 = getelementptr inbounds i8, i8* %107, i64 %16
  %182 = add nuw nsw i32 %103, 1
  %183 = icmp eq i32 %182, 64
  br i1 %183, label %184, label %102

184:                                              ; preds = %102
  %185 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %173, <4 x i32> %177) #5
  %186 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %185, <4 x i32> %185) #5
  br label %187

187:                                              ; preds = %184, %99
  %188 = phi <4 x i32> [ %186, %184 ], [ %101, %99 ]
  %189 = extractelement <4 x i32> %188, i32 0
  %190 = bitcast <4 x i32> %188 to <16 x i8>
  %191 = shufflevector <16 x i8> %190, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %192 = bitcast <16 x i8> %191 to <4 x i32>
  %193 = extractelement <4 x i32> %192, i32 0
  store i32 %193, i32* %10, align 4
  %194 = sext i32 %189 to i64
  %195 = mul nsw i64 %194, %194
  %196 = lshr i64 %195, 11
  %197 = trunc i64 %196 to i32
  %198 = sub i32 %193, %197
  call void @llvm.lifetime.end.p0i8(i64 2080, i8* nonnull %13) #5
  ret i32 %198
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @aom_masked_sub_pixel_variance32x32_ssse3(i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32, i32* nocapture) local_unnamed_addr #0 {
  %12 = alloca [1056 x i8], align 16
  %13 = getelementptr inbounds [1056 x i8], [1056 x i8]* %12, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1056, i8* nonnull %13) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 1056, i1 false)
  call fastcc void @bilinear_filter(i8* %0, i32 %1, i32 %2, i32 %3, i8* nonnull %13, i32 32, i32 32)
  %14 = icmp eq i32 %9, 0
  %15 = sext i32 %5 to i64
  %16 = sext i32 %8 to i64
  br i1 %14, label %17, label %102

17:                                               ; preds = %11, %17
  %18 = phi i32 [ %97, %17 ], [ 0, %11 ]
  %19 = phi i8* [ %93, %17 ], [ %4, %11 ]
  %20 = phi i8* [ %94, %17 ], [ %13, %11 ]
  %21 = phi i8* [ %95, %17 ], [ %6, %11 ]
  %22 = phi i8* [ %96, %17 ], [ %7, %11 ]
  %23 = phi <4 x i32> [ %88, %17 ], [ zeroinitializer, %11 ]
  %24 = phi <4 x i32> [ %92, %17 ], [ zeroinitializer, %11 ]
  %25 = bitcast i8* %19 to <16 x i8>*
  %26 = load <16 x i8>, <16 x i8>* %25, align 1
  %27 = bitcast i8* %20 to <16 x i8>*
  %28 = load <16 x i8>, <16 x i8>* %27, align 1
  %29 = bitcast i8* %21 to <16 x i8>*
  %30 = load <16 x i8>, <16 x i8>* %29, align 1
  %31 = bitcast i8* %22 to <16 x i8>*
  %32 = load <16 x i8>, <16 x i8>* %31, align 1
  %33 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %32
  %34 = shufflevector <16 x i8> %28, <16 x i8> %30, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %35 = shufflevector <16 x i8> %32, <16 x i8> %33, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %36 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %34, <16 x i8> %35) #5
  %37 = lshr <8 x i16> %36, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %38 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %37, <8 x i16> zeroinitializer) #5
  %39 = shufflevector <16 x i8> %28, <16 x i8> %30, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %40 = shufflevector <16 x i8> %32, <16 x i8> %33, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %41 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %39, <16 x i8> %40) #5
  %42 = lshr <8 x i16> %41, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %43 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %42, <8 x i16> zeroinitializer) #5
  %44 = shufflevector <16 x i8> %26, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %45 = shufflevector <16 x i8> %26, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %46 = bitcast <16 x i8> %44 to <8 x i16>
  %47 = sub <8 x i16> %38, %46
  %48 = bitcast <16 x i8> %45 to <8 x i16>
  %49 = sub <8 x i16> %43, %48
  %50 = add <8 x i16> %49, %47
  %51 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %50, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %52 = add <4 x i32> %51, %23
  %53 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %47, <8 x i16> %47) #5
  %54 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %49, <8 x i16> %49) #5
  %55 = add <4 x i32> %53, %24
  %56 = add <4 x i32> %55, %54
  %57 = getelementptr inbounds i8, i8* %19, i64 16
  %58 = bitcast i8* %57 to <16 x i8>*
  %59 = load <16 x i8>, <16 x i8>* %58, align 1
  %60 = getelementptr inbounds i8, i8* %20, i64 16
  %61 = bitcast i8* %60 to <16 x i8>*
  %62 = load <16 x i8>, <16 x i8>* %61, align 1
  %63 = getelementptr inbounds i8, i8* %21, i64 16
  %64 = bitcast i8* %63 to <16 x i8>*
  %65 = load <16 x i8>, <16 x i8>* %64, align 1
  %66 = getelementptr inbounds i8, i8* %22, i64 16
  %67 = bitcast i8* %66 to <16 x i8>*
  %68 = load <16 x i8>, <16 x i8>* %67, align 1
  %69 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %68
  %70 = shufflevector <16 x i8> %62, <16 x i8> %65, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %71 = shufflevector <16 x i8> %68, <16 x i8> %69, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %72 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %70, <16 x i8> %71) #5
  %73 = lshr <8 x i16> %72, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %74 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %73, <8 x i16> zeroinitializer) #5
  %75 = shufflevector <16 x i8> %62, <16 x i8> %65, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %76 = shufflevector <16 x i8> %68, <16 x i8> %69, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %77 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %75, <16 x i8> %76) #5
  %78 = lshr <8 x i16> %77, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %79 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %78, <8 x i16> zeroinitializer) #5
  %80 = shufflevector <16 x i8> %59, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %81 = shufflevector <16 x i8> %59, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %82 = bitcast <16 x i8> %80 to <8 x i16>
  %83 = sub <8 x i16> %74, %82
  %84 = bitcast <16 x i8> %81 to <8 x i16>
  %85 = sub <8 x i16> %79, %84
  %86 = add <8 x i16> %85, %83
  %87 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %86, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %88 = add <4 x i32> %87, %52
  %89 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %83, <8 x i16> %83) #5
  %90 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %85, <8 x i16> %85) #5
  %91 = add <4 x i32> %89, %56
  %92 = add <4 x i32> %91, %90
  %93 = getelementptr inbounds i8, i8* %19, i64 %15
  %94 = getelementptr inbounds i8, i8* %20, i64 32
  %95 = getelementptr inbounds i8, i8* %21, i64 32
  %96 = getelementptr inbounds i8, i8* %22, i64 %16
  %97 = add nuw nsw i32 %18, 1
  %98 = icmp eq i32 %97, 32
  br i1 %98, label %99, label %17

99:                                               ; preds = %17
  %100 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %88, <4 x i32> %92) #5
  %101 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %100, <4 x i32> %100) #5
  br label %187

102:                                              ; preds = %11, %102
  %103 = phi i32 [ %182, %102 ], [ 0, %11 ]
  %104 = phi i8* [ %178, %102 ], [ %4, %11 ]
  %105 = phi i8* [ %179, %102 ], [ %6, %11 ]
  %106 = phi i8* [ %180, %102 ], [ %13, %11 ]
  %107 = phi i8* [ %181, %102 ], [ %7, %11 ]
  %108 = phi <4 x i32> [ %173, %102 ], [ zeroinitializer, %11 ]
  %109 = phi <4 x i32> [ %177, %102 ], [ zeroinitializer, %11 ]
  %110 = bitcast i8* %104 to <16 x i8>*
  %111 = load <16 x i8>, <16 x i8>* %110, align 1
  %112 = bitcast i8* %105 to <16 x i8>*
  %113 = load <16 x i8>, <16 x i8>* %112, align 1
  %114 = bitcast i8* %106 to <16 x i8>*
  %115 = load <16 x i8>, <16 x i8>* %114, align 1
  %116 = bitcast i8* %107 to <16 x i8>*
  %117 = load <16 x i8>, <16 x i8>* %116, align 1
  %118 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %117
  %119 = shufflevector <16 x i8> %113, <16 x i8> %115, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %120 = shufflevector <16 x i8> %117, <16 x i8> %118, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %121 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %119, <16 x i8> %120) #5
  %122 = lshr <8 x i16> %121, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %123 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %122, <8 x i16> zeroinitializer) #5
  %124 = shufflevector <16 x i8> %113, <16 x i8> %115, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %125 = shufflevector <16 x i8> %117, <16 x i8> %118, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %126 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %124, <16 x i8> %125) #5
  %127 = lshr <8 x i16> %126, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %128 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %127, <8 x i16> zeroinitializer) #5
  %129 = shufflevector <16 x i8> %111, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %130 = shufflevector <16 x i8> %111, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %131 = bitcast <16 x i8> %129 to <8 x i16>
  %132 = sub <8 x i16> %123, %131
  %133 = bitcast <16 x i8> %130 to <8 x i16>
  %134 = sub <8 x i16> %128, %133
  %135 = add <8 x i16> %134, %132
  %136 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %135, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %137 = add <4 x i32> %136, %108
  %138 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %132, <8 x i16> %132) #5
  %139 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %134, <8 x i16> %134) #5
  %140 = add <4 x i32> %138, %109
  %141 = add <4 x i32> %140, %139
  %142 = getelementptr inbounds i8, i8* %104, i64 16
  %143 = bitcast i8* %142 to <16 x i8>*
  %144 = load <16 x i8>, <16 x i8>* %143, align 1
  %145 = getelementptr inbounds i8, i8* %105, i64 16
  %146 = bitcast i8* %145 to <16 x i8>*
  %147 = load <16 x i8>, <16 x i8>* %146, align 1
  %148 = getelementptr inbounds i8, i8* %106, i64 16
  %149 = bitcast i8* %148 to <16 x i8>*
  %150 = load <16 x i8>, <16 x i8>* %149, align 1
  %151 = getelementptr inbounds i8, i8* %107, i64 16
  %152 = bitcast i8* %151 to <16 x i8>*
  %153 = load <16 x i8>, <16 x i8>* %152, align 1
  %154 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %153
  %155 = shufflevector <16 x i8> %147, <16 x i8> %150, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %156 = shufflevector <16 x i8> %153, <16 x i8> %154, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %157 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %155, <16 x i8> %156) #5
  %158 = lshr <8 x i16> %157, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %159 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %158, <8 x i16> zeroinitializer) #5
  %160 = shufflevector <16 x i8> %147, <16 x i8> %150, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %161 = shufflevector <16 x i8> %153, <16 x i8> %154, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %162 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %160, <16 x i8> %161) #5
  %163 = lshr <8 x i16> %162, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %164 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %163, <8 x i16> zeroinitializer) #5
  %165 = shufflevector <16 x i8> %144, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %166 = shufflevector <16 x i8> %144, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %167 = bitcast <16 x i8> %165 to <8 x i16>
  %168 = sub <8 x i16> %159, %167
  %169 = bitcast <16 x i8> %166 to <8 x i16>
  %170 = sub <8 x i16> %164, %169
  %171 = add <8 x i16> %170, %168
  %172 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %171, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %173 = add <4 x i32> %172, %137
  %174 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %168, <8 x i16> %168) #5
  %175 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %170, <8 x i16> %170) #5
  %176 = add <4 x i32> %174, %141
  %177 = add <4 x i32> %176, %175
  %178 = getelementptr inbounds i8, i8* %104, i64 %15
  %179 = getelementptr inbounds i8, i8* %105, i64 32
  %180 = getelementptr inbounds i8, i8* %106, i64 32
  %181 = getelementptr inbounds i8, i8* %107, i64 %16
  %182 = add nuw nsw i32 %103, 1
  %183 = icmp eq i32 %182, 32
  br i1 %183, label %184, label %102

184:                                              ; preds = %102
  %185 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %173, <4 x i32> %177) #5
  %186 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %185, <4 x i32> %185) #5
  br label %187

187:                                              ; preds = %184, %99
  %188 = phi <4 x i32> [ %186, %184 ], [ %101, %99 ]
  %189 = extractelement <4 x i32> %188, i32 0
  %190 = bitcast <4 x i32> %188 to <16 x i8>
  %191 = shufflevector <16 x i8> %190, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %192 = bitcast <16 x i8> %191 to <4 x i32>
  %193 = extractelement <4 x i32> %192, i32 0
  store i32 %193, i32* %10, align 4
  %194 = sext i32 %189 to i64
  %195 = mul nsw i64 %194, %194
  %196 = lshr i64 %195, 10
  %197 = trunc i64 %196 to i32
  %198 = sub i32 %193, %197
  call void @llvm.lifetime.end.p0i8(i64 1056, i8* nonnull %13) #5
  ret i32 %198
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @aom_masked_sub_pixel_variance32x16_ssse3(i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32, i32* nocapture) local_unnamed_addr #0 {
  %12 = alloca [544 x i8], align 16
  %13 = getelementptr inbounds [544 x i8], [544 x i8]* %12, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 544, i8* nonnull %13) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 544, i1 false)
  call fastcc void @bilinear_filter(i8* %0, i32 %1, i32 %2, i32 %3, i8* nonnull %13, i32 32, i32 16)
  %14 = icmp eq i32 %9, 0
  %15 = sext i32 %5 to i64
  %16 = sext i32 %8 to i64
  br i1 %14, label %17, label %102

17:                                               ; preds = %11, %17
  %18 = phi i32 [ %97, %17 ], [ 0, %11 ]
  %19 = phi i8* [ %93, %17 ], [ %4, %11 ]
  %20 = phi i8* [ %94, %17 ], [ %13, %11 ]
  %21 = phi i8* [ %95, %17 ], [ %6, %11 ]
  %22 = phi i8* [ %96, %17 ], [ %7, %11 ]
  %23 = phi <4 x i32> [ %88, %17 ], [ zeroinitializer, %11 ]
  %24 = phi <4 x i32> [ %92, %17 ], [ zeroinitializer, %11 ]
  %25 = bitcast i8* %19 to <16 x i8>*
  %26 = load <16 x i8>, <16 x i8>* %25, align 1
  %27 = bitcast i8* %20 to <16 x i8>*
  %28 = load <16 x i8>, <16 x i8>* %27, align 1
  %29 = bitcast i8* %21 to <16 x i8>*
  %30 = load <16 x i8>, <16 x i8>* %29, align 1
  %31 = bitcast i8* %22 to <16 x i8>*
  %32 = load <16 x i8>, <16 x i8>* %31, align 1
  %33 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %32
  %34 = shufflevector <16 x i8> %28, <16 x i8> %30, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %35 = shufflevector <16 x i8> %32, <16 x i8> %33, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %36 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %34, <16 x i8> %35) #5
  %37 = lshr <8 x i16> %36, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %38 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %37, <8 x i16> zeroinitializer) #5
  %39 = shufflevector <16 x i8> %28, <16 x i8> %30, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %40 = shufflevector <16 x i8> %32, <16 x i8> %33, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %41 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %39, <16 x i8> %40) #5
  %42 = lshr <8 x i16> %41, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %43 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %42, <8 x i16> zeroinitializer) #5
  %44 = shufflevector <16 x i8> %26, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %45 = shufflevector <16 x i8> %26, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %46 = bitcast <16 x i8> %44 to <8 x i16>
  %47 = sub <8 x i16> %38, %46
  %48 = bitcast <16 x i8> %45 to <8 x i16>
  %49 = sub <8 x i16> %43, %48
  %50 = add <8 x i16> %49, %47
  %51 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %50, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %52 = add <4 x i32> %51, %23
  %53 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %47, <8 x i16> %47) #5
  %54 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %49, <8 x i16> %49) #5
  %55 = add <4 x i32> %53, %24
  %56 = add <4 x i32> %55, %54
  %57 = getelementptr inbounds i8, i8* %19, i64 16
  %58 = bitcast i8* %57 to <16 x i8>*
  %59 = load <16 x i8>, <16 x i8>* %58, align 1
  %60 = getelementptr inbounds i8, i8* %20, i64 16
  %61 = bitcast i8* %60 to <16 x i8>*
  %62 = load <16 x i8>, <16 x i8>* %61, align 1
  %63 = getelementptr inbounds i8, i8* %21, i64 16
  %64 = bitcast i8* %63 to <16 x i8>*
  %65 = load <16 x i8>, <16 x i8>* %64, align 1
  %66 = getelementptr inbounds i8, i8* %22, i64 16
  %67 = bitcast i8* %66 to <16 x i8>*
  %68 = load <16 x i8>, <16 x i8>* %67, align 1
  %69 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %68
  %70 = shufflevector <16 x i8> %62, <16 x i8> %65, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %71 = shufflevector <16 x i8> %68, <16 x i8> %69, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %72 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %70, <16 x i8> %71) #5
  %73 = lshr <8 x i16> %72, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %74 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %73, <8 x i16> zeroinitializer) #5
  %75 = shufflevector <16 x i8> %62, <16 x i8> %65, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %76 = shufflevector <16 x i8> %68, <16 x i8> %69, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %77 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %75, <16 x i8> %76) #5
  %78 = lshr <8 x i16> %77, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %79 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %78, <8 x i16> zeroinitializer) #5
  %80 = shufflevector <16 x i8> %59, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %81 = shufflevector <16 x i8> %59, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %82 = bitcast <16 x i8> %80 to <8 x i16>
  %83 = sub <8 x i16> %74, %82
  %84 = bitcast <16 x i8> %81 to <8 x i16>
  %85 = sub <8 x i16> %79, %84
  %86 = add <8 x i16> %85, %83
  %87 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %86, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %88 = add <4 x i32> %87, %52
  %89 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %83, <8 x i16> %83) #5
  %90 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %85, <8 x i16> %85) #5
  %91 = add <4 x i32> %89, %56
  %92 = add <4 x i32> %91, %90
  %93 = getelementptr inbounds i8, i8* %19, i64 %15
  %94 = getelementptr inbounds i8, i8* %20, i64 32
  %95 = getelementptr inbounds i8, i8* %21, i64 32
  %96 = getelementptr inbounds i8, i8* %22, i64 %16
  %97 = add nuw nsw i32 %18, 1
  %98 = icmp eq i32 %97, 16
  br i1 %98, label %99, label %17

99:                                               ; preds = %17
  %100 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %88, <4 x i32> %92) #5
  %101 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %100, <4 x i32> %100) #5
  br label %187

102:                                              ; preds = %11, %102
  %103 = phi i32 [ %182, %102 ], [ 0, %11 ]
  %104 = phi i8* [ %178, %102 ], [ %4, %11 ]
  %105 = phi i8* [ %179, %102 ], [ %6, %11 ]
  %106 = phi i8* [ %180, %102 ], [ %13, %11 ]
  %107 = phi i8* [ %181, %102 ], [ %7, %11 ]
  %108 = phi <4 x i32> [ %173, %102 ], [ zeroinitializer, %11 ]
  %109 = phi <4 x i32> [ %177, %102 ], [ zeroinitializer, %11 ]
  %110 = bitcast i8* %104 to <16 x i8>*
  %111 = load <16 x i8>, <16 x i8>* %110, align 1
  %112 = bitcast i8* %105 to <16 x i8>*
  %113 = load <16 x i8>, <16 x i8>* %112, align 1
  %114 = bitcast i8* %106 to <16 x i8>*
  %115 = load <16 x i8>, <16 x i8>* %114, align 1
  %116 = bitcast i8* %107 to <16 x i8>*
  %117 = load <16 x i8>, <16 x i8>* %116, align 1
  %118 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %117
  %119 = shufflevector <16 x i8> %113, <16 x i8> %115, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %120 = shufflevector <16 x i8> %117, <16 x i8> %118, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %121 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %119, <16 x i8> %120) #5
  %122 = lshr <8 x i16> %121, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %123 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %122, <8 x i16> zeroinitializer) #5
  %124 = shufflevector <16 x i8> %113, <16 x i8> %115, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %125 = shufflevector <16 x i8> %117, <16 x i8> %118, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %126 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %124, <16 x i8> %125) #5
  %127 = lshr <8 x i16> %126, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %128 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %127, <8 x i16> zeroinitializer) #5
  %129 = shufflevector <16 x i8> %111, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %130 = shufflevector <16 x i8> %111, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %131 = bitcast <16 x i8> %129 to <8 x i16>
  %132 = sub <8 x i16> %123, %131
  %133 = bitcast <16 x i8> %130 to <8 x i16>
  %134 = sub <8 x i16> %128, %133
  %135 = add <8 x i16> %134, %132
  %136 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %135, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %137 = add <4 x i32> %136, %108
  %138 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %132, <8 x i16> %132) #5
  %139 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %134, <8 x i16> %134) #5
  %140 = add <4 x i32> %138, %109
  %141 = add <4 x i32> %140, %139
  %142 = getelementptr inbounds i8, i8* %104, i64 16
  %143 = bitcast i8* %142 to <16 x i8>*
  %144 = load <16 x i8>, <16 x i8>* %143, align 1
  %145 = getelementptr inbounds i8, i8* %105, i64 16
  %146 = bitcast i8* %145 to <16 x i8>*
  %147 = load <16 x i8>, <16 x i8>* %146, align 1
  %148 = getelementptr inbounds i8, i8* %106, i64 16
  %149 = bitcast i8* %148 to <16 x i8>*
  %150 = load <16 x i8>, <16 x i8>* %149, align 1
  %151 = getelementptr inbounds i8, i8* %107, i64 16
  %152 = bitcast i8* %151 to <16 x i8>*
  %153 = load <16 x i8>, <16 x i8>* %152, align 1
  %154 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %153
  %155 = shufflevector <16 x i8> %147, <16 x i8> %150, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %156 = shufflevector <16 x i8> %153, <16 x i8> %154, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %157 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %155, <16 x i8> %156) #5
  %158 = lshr <8 x i16> %157, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %159 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %158, <8 x i16> zeroinitializer) #5
  %160 = shufflevector <16 x i8> %147, <16 x i8> %150, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %161 = shufflevector <16 x i8> %153, <16 x i8> %154, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %162 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %160, <16 x i8> %161) #5
  %163 = lshr <8 x i16> %162, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %164 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %163, <8 x i16> zeroinitializer) #5
  %165 = shufflevector <16 x i8> %144, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %166 = shufflevector <16 x i8> %144, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %167 = bitcast <16 x i8> %165 to <8 x i16>
  %168 = sub <8 x i16> %159, %167
  %169 = bitcast <16 x i8> %166 to <8 x i16>
  %170 = sub <8 x i16> %164, %169
  %171 = add <8 x i16> %170, %168
  %172 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %171, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %173 = add <4 x i32> %172, %137
  %174 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %168, <8 x i16> %168) #5
  %175 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %170, <8 x i16> %170) #5
  %176 = add <4 x i32> %174, %141
  %177 = add <4 x i32> %176, %175
  %178 = getelementptr inbounds i8, i8* %104, i64 %15
  %179 = getelementptr inbounds i8, i8* %105, i64 32
  %180 = getelementptr inbounds i8, i8* %106, i64 32
  %181 = getelementptr inbounds i8, i8* %107, i64 %16
  %182 = add nuw nsw i32 %103, 1
  %183 = icmp eq i32 %182, 16
  br i1 %183, label %184, label %102

184:                                              ; preds = %102
  %185 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %173, <4 x i32> %177) #5
  %186 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %185, <4 x i32> %185) #5
  br label %187

187:                                              ; preds = %184, %99
  %188 = phi <4 x i32> [ %186, %184 ], [ %101, %99 ]
  %189 = extractelement <4 x i32> %188, i32 0
  %190 = bitcast <4 x i32> %188 to <16 x i8>
  %191 = shufflevector <16 x i8> %190, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %192 = bitcast <16 x i8> %191 to <4 x i32>
  %193 = extractelement <4 x i32> %192, i32 0
  store i32 %193, i32* %10, align 4
  %194 = sext i32 %189 to i64
  %195 = mul nsw i64 %194, %194
  %196 = lshr i64 %195, 9
  %197 = trunc i64 %196 to i32
  %198 = sub i32 %193, %197
  call void @llvm.lifetime.end.p0i8(i64 544, i8* nonnull %13) #5
  ret i32 %198
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @aom_masked_sub_pixel_variance16x32_ssse3(i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32, i32* nocapture) local_unnamed_addr #0 {
  %12 = alloca [528 x i8], align 16
  %13 = getelementptr inbounds [528 x i8], [528 x i8]* %12, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 528, i8* nonnull %13) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 528, i1 false)
  call fastcc void @bilinear_filter(i8* %0, i32 %1, i32 %2, i32 %3, i8* nonnull %13, i32 16, i32 32)
  %14 = icmp eq i32 %9, 0
  %15 = sext i32 %5 to i64
  %16 = sext i32 %8 to i64
  br i1 %14, label %17, label %66

17:                                               ; preds = %11, %17
  %18 = phi i32 [ %61, %17 ], [ 0, %11 ]
  %19 = phi i8* [ %57, %17 ], [ %4, %11 ]
  %20 = phi i8* [ %58, %17 ], [ %13, %11 ]
  %21 = phi i8* [ %59, %17 ], [ %6, %11 ]
  %22 = phi i8* [ %60, %17 ], [ %7, %11 ]
  %23 = phi <4 x i32> [ %52, %17 ], [ zeroinitializer, %11 ]
  %24 = phi <4 x i32> [ %56, %17 ], [ zeroinitializer, %11 ]
  %25 = bitcast i8* %19 to <16 x i8>*
  %26 = load <16 x i8>, <16 x i8>* %25, align 1
  %27 = bitcast i8* %20 to <16 x i8>*
  %28 = load <16 x i8>, <16 x i8>* %27, align 1
  %29 = bitcast i8* %21 to <16 x i8>*
  %30 = load <16 x i8>, <16 x i8>* %29, align 1
  %31 = bitcast i8* %22 to <16 x i8>*
  %32 = load <16 x i8>, <16 x i8>* %31, align 1
  %33 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %32
  %34 = shufflevector <16 x i8> %28, <16 x i8> %30, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %35 = shufflevector <16 x i8> %32, <16 x i8> %33, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %36 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %34, <16 x i8> %35) #5
  %37 = lshr <8 x i16> %36, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %38 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %37, <8 x i16> zeroinitializer) #5
  %39 = shufflevector <16 x i8> %28, <16 x i8> %30, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %40 = shufflevector <16 x i8> %32, <16 x i8> %33, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %41 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %39, <16 x i8> %40) #5
  %42 = lshr <8 x i16> %41, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %43 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %42, <8 x i16> zeroinitializer) #5
  %44 = shufflevector <16 x i8> %26, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %45 = shufflevector <16 x i8> %26, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %46 = bitcast <16 x i8> %44 to <8 x i16>
  %47 = sub <8 x i16> %38, %46
  %48 = bitcast <16 x i8> %45 to <8 x i16>
  %49 = sub <8 x i16> %43, %48
  %50 = add <8 x i16> %49, %47
  %51 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %50, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %52 = add <4 x i32> %51, %23
  %53 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %47, <8 x i16> %47) #5
  %54 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %49, <8 x i16> %49) #5
  %55 = add <4 x i32> %53, %24
  %56 = add <4 x i32> %55, %54
  %57 = getelementptr inbounds i8, i8* %19, i64 %15
  %58 = getelementptr inbounds i8, i8* %20, i64 16
  %59 = getelementptr inbounds i8, i8* %21, i64 16
  %60 = getelementptr inbounds i8, i8* %22, i64 %16
  %61 = add nuw nsw i32 %18, 1
  %62 = icmp eq i32 %61, 32
  br i1 %62, label %63, label %17

63:                                               ; preds = %17
  %64 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %52, <4 x i32> %56) #5
  %65 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %64, <4 x i32> %64) #5
  br label %115

66:                                               ; preds = %11, %66
  %67 = phi i32 [ %110, %66 ], [ 0, %11 ]
  %68 = phi i8* [ %106, %66 ], [ %4, %11 ]
  %69 = phi i8* [ %107, %66 ], [ %6, %11 ]
  %70 = phi i8* [ %108, %66 ], [ %13, %11 ]
  %71 = phi i8* [ %109, %66 ], [ %7, %11 ]
  %72 = phi <4 x i32> [ %101, %66 ], [ zeroinitializer, %11 ]
  %73 = phi <4 x i32> [ %105, %66 ], [ zeroinitializer, %11 ]
  %74 = bitcast i8* %68 to <16 x i8>*
  %75 = load <16 x i8>, <16 x i8>* %74, align 1
  %76 = bitcast i8* %69 to <16 x i8>*
  %77 = load <16 x i8>, <16 x i8>* %76, align 1
  %78 = bitcast i8* %70 to <16 x i8>*
  %79 = load <16 x i8>, <16 x i8>* %78, align 1
  %80 = bitcast i8* %71 to <16 x i8>*
  %81 = load <16 x i8>, <16 x i8>* %80, align 1
  %82 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %81
  %83 = shufflevector <16 x i8> %77, <16 x i8> %79, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %84 = shufflevector <16 x i8> %81, <16 x i8> %82, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %85 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %83, <16 x i8> %84) #5
  %86 = lshr <8 x i16> %85, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %87 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %86, <8 x i16> zeroinitializer) #5
  %88 = shufflevector <16 x i8> %77, <16 x i8> %79, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %89 = shufflevector <16 x i8> %81, <16 x i8> %82, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %90 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %88, <16 x i8> %89) #5
  %91 = lshr <8 x i16> %90, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %92 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %91, <8 x i16> zeroinitializer) #5
  %93 = shufflevector <16 x i8> %75, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %94 = shufflevector <16 x i8> %75, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %95 = bitcast <16 x i8> %93 to <8 x i16>
  %96 = sub <8 x i16> %87, %95
  %97 = bitcast <16 x i8> %94 to <8 x i16>
  %98 = sub <8 x i16> %92, %97
  %99 = add <8 x i16> %98, %96
  %100 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %99, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %101 = add <4 x i32> %100, %72
  %102 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %96, <8 x i16> %96) #5
  %103 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %98, <8 x i16> %98) #5
  %104 = add <4 x i32> %102, %73
  %105 = add <4 x i32> %104, %103
  %106 = getelementptr inbounds i8, i8* %68, i64 %15
  %107 = getelementptr inbounds i8, i8* %69, i64 16
  %108 = getelementptr inbounds i8, i8* %70, i64 16
  %109 = getelementptr inbounds i8, i8* %71, i64 %16
  %110 = add nuw nsw i32 %67, 1
  %111 = icmp eq i32 %110, 32
  br i1 %111, label %112, label %66

112:                                              ; preds = %66
  %113 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %101, <4 x i32> %105) #5
  %114 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %113, <4 x i32> %113) #5
  br label %115

115:                                              ; preds = %112, %63
  %116 = phi <4 x i32> [ %114, %112 ], [ %65, %63 ]
  %117 = extractelement <4 x i32> %116, i32 0
  %118 = bitcast <4 x i32> %116 to <16 x i8>
  %119 = shufflevector <16 x i8> %118, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %120 = bitcast <16 x i8> %119 to <4 x i32>
  %121 = extractelement <4 x i32> %120, i32 0
  store i32 %121, i32* %10, align 4
  %122 = sext i32 %117 to i64
  %123 = mul nsw i64 %122, %122
  %124 = lshr i64 %123, 9
  %125 = trunc i64 %124 to i32
  %126 = sub i32 %121, %125
  call void @llvm.lifetime.end.p0i8(i64 528, i8* nonnull %13) #5
  ret i32 %126
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @aom_masked_sub_pixel_variance16x16_ssse3(i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32, i32* nocapture) local_unnamed_addr #0 {
  %12 = alloca [272 x i8], align 16
  %13 = getelementptr inbounds [272 x i8], [272 x i8]* %12, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 272, i8* nonnull %13) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 272, i1 false)
  call fastcc void @bilinear_filter(i8* %0, i32 %1, i32 %2, i32 %3, i8* nonnull %13, i32 16, i32 16)
  %14 = icmp eq i32 %9, 0
  %15 = sext i32 %5 to i64
  %16 = sext i32 %8 to i64
  br i1 %14, label %17, label %66

17:                                               ; preds = %11, %17
  %18 = phi i32 [ %61, %17 ], [ 0, %11 ]
  %19 = phi i8* [ %57, %17 ], [ %4, %11 ]
  %20 = phi i8* [ %58, %17 ], [ %13, %11 ]
  %21 = phi i8* [ %59, %17 ], [ %6, %11 ]
  %22 = phi i8* [ %60, %17 ], [ %7, %11 ]
  %23 = phi <4 x i32> [ %52, %17 ], [ zeroinitializer, %11 ]
  %24 = phi <4 x i32> [ %56, %17 ], [ zeroinitializer, %11 ]
  %25 = bitcast i8* %19 to <16 x i8>*
  %26 = load <16 x i8>, <16 x i8>* %25, align 1
  %27 = bitcast i8* %20 to <16 x i8>*
  %28 = load <16 x i8>, <16 x i8>* %27, align 1
  %29 = bitcast i8* %21 to <16 x i8>*
  %30 = load <16 x i8>, <16 x i8>* %29, align 1
  %31 = bitcast i8* %22 to <16 x i8>*
  %32 = load <16 x i8>, <16 x i8>* %31, align 1
  %33 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %32
  %34 = shufflevector <16 x i8> %28, <16 x i8> %30, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %35 = shufflevector <16 x i8> %32, <16 x i8> %33, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %36 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %34, <16 x i8> %35) #5
  %37 = lshr <8 x i16> %36, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %38 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %37, <8 x i16> zeroinitializer) #5
  %39 = shufflevector <16 x i8> %28, <16 x i8> %30, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %40 = shufflevector <16 x i8> %32, <16 x i8> %33, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %41 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %39, <16 x i8> %40) #5
  %42 = lshr <8 x i16> %41, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %43 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %42, <8 x i16> zeroinitializer) #5
  %44 = shufflevector <16 x i8> %26, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %45 = shufflevector <16 x i8> %26, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %46 = bitcast <16 x i8> %44 to <8 x i16>
  %47 = sub <8 x i16> %38, %46
  %48 = bitcast <16 x i8> %45 to <8 x i16>
  %49 = sub <8 x i16> %43, %48
  %50 = add <8 x i16> %49, %47
  %51 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %50, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %52 = add <4 x i32> %51, %23
  %53 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %47, <8 x i16> %47) #5
  %54 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %49, <8 x i16> %49) #5
  %55 = add <4 x i32> %53, %24
  %56 = add <4 x i32> %55, %54
  %57 = getelementptr inbounds i8, i8* %19, i64 %15
  %58 = getelementptr inbounds i8, i8* %20, i64 16
  %59 = getelementptr inbounds i8, i8* %21, i64 16
  %60 = getelementptr inbounds i8, i8* %22, i64 %16
  %61 = add nuw nsw i32 %18, 1
  %62 = icmp eq i32 %61, 16
  br i1 %62, label %63, label %17

63:                                               ; preds = %17
  %64 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %52, <4 x i32> %56) #5
  %65 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %64, <4 x i32> %64) #5
  br label %115

66:                                               ; preds = %11, %66
  %67 = phi i32 [ %110, %66 ], [ 0, %11 ]
  %68 = phi i8* [ %106, %66 ], [ %4, %11 ]
  %69 = phi i8* [ %107, %66 ], [ %6, %11 ]
  %70 = phi i8* [ %108, %66 ], [ %13, %11 ]
  %71 = phi i8* [ %109, %66 ], [ %7, %11 ]
  %72 = phi <4 x i32> [ %101, %66 ], [ zeroinitializer, %11 ]
  %73 = phi <4 x i32> [ %105, %66 ], [ zeroinitializer, %11 ]
  %74 = bitcast i8* %68 to <16 x i8>*
  %75 = load <16 x i8>, <16 x i8>* %74, align 1
  %76 = bitcast i8* %69 to <16 x i8>*
  %77 = load <16 x i8>, <16 x i8>* %76, align 1
  %78 = bitcast i8* %70 to <16 x i8>*
  %79 = load <16 x i8>, <16 x i8>* %78, align 1
  %80 = bitcast i8* %71 to <16 x i8>*
  %81 = load <16 x i8>, <16 x i8>* %80, align 1
  %82 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %81
  %83 = shufflevector <16 x i8> %77, <16 x i8> %79, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %84 = shufflevector <16 x i8> %81, <16 x i8> %82, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %85 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %83, <16 x i8> %84) #5
  %86 = lshr <8 x i16> %85, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %87 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %86, <8 x i16> zeroinitializer) #5
  %88 = shufflevector <16 x i8> %77, <16 x i8> %79, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %89 = shufflevector <16 x i8> %81, <16 x i8> %82, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %90 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %88, <16 x i8> %89) #5
  %91 = lshr <8 x i16> %90, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %92 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %91, <8 x i16> zeroinitializer) #5
  %93 = shufflevector <16 x i8> %75, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %94 = shufflevector <16 x i8> %75, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %95 = bitcast <16 x i8> %93 to <8 x i16>
  %96 = sub <8 x i16> %87, %95
  %97 = bitcast <16 x i8> %94 to <8 x i16>
  %98 = sub <8 x i16> %92, %97
  %99 = add <8 x i16> %98, %96
  %100 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %99, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %101 = add <4 x i32> %100, %72
  %102 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %96, <8 x i16> %96) #5
  %103 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %98, <8 x i16> %98) #5
  %104 = add <4 x i32> %102, %73
  %105 = add <4 x i32> %104, %103
  %106 = getelementptr inbounds i8, i8* %68, i64 %15
  %107 = getelementptr inbounds i8, i8* %69, i64 16
  %108 = getelementptr inbounds i8, i8* %70, i64 16
  %109 = getelementptr inbounds i8, i8* %71, i64 %16
  %110 = add nuw nsw i32 %67, 1
  %111 = icmp eq i32 %110, 16
  br i1 %111, label %112, label %66

112:                                              ; preds = %66
  %113 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %101, <4 x i32> %105) #5
  %114 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %113, <4 x i32> %113) #5
  br label %115

115:                                              ; preds = %112, %63
  %116 = phi <4 x i32> [ %114, %112 ], [ %65, %63 ]
  %117 = extractelement <4 x i32> %116, i32 0
  %118 = bitcast <4 x i32> %116 to <16 x i8>
  %119 = shufflevector <16 x i8> %118, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %120 = bitcast <16 x i8> %119 to <4 x i32>
  %121 = extractelement <4 x i32> %120, i32 0
  store i32 %121, i32* %10, align 4
  %122 = sext i32 %117 to i64
  %123 = mul nsw i64 %122, %122
  %124 = lshr i64 %123, 8
  %125 = trunc i64 %124 to i32
  %126 = sub i32 %121, %125
  call void @llvm.lifetime.end.p0i8(i64 272, i8* nonnull %13) #5
  ret i32 %126
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @aom_masked_sub_pixel_variance16x8_ssse3(i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32, i32* nocapture) local_unnamed_addr #0 {
  %12 = alloca [144 x i8], align 16
  %13 = getelementptr inbounds [144 x i8], [144 x i8]* %12, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %13) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 144, i1 false)
  call fastcc void @bilinear_filter(i8* %0, i32 %1, i32 %2, i32 %3, i8* nonnull %13, i32 16, i32 8)
  %14 = icmp eq i32 %9, 0
  %15 = sext i32 %5 to i64
  %16 = sext i32 %8 to i64
  br i1 %14, label %17, label %66

17:                                               ; preds = %11, %17
  %18 = phi i32 [ %61, %17 ], [ 0, %11 ]
  %19 = phi i8* [ %57, %17 ], [ %4, %11 ]
  %20 = phi i8* [ %58, %17 ], [ %13, %11 ]
  %21 = phi i8* [ %59, %17 ], [ %6, %11 ]
  %22 = phi i8* [ %60, %17 ], [ %7, %11 ]
  %23 = phi <4 x i32> [ %52, %17 ], [ zeroinitializer, %11 ]
  %24 = phi <4 x i32> [ %56, %17 ], [ zeroinitializer, %11 ]
  %25 = bitcast i8* %19 to <16 x i8>*
  %26 = load <16 x i8>, <16 x i8>* %25, align 1
  %27 = bitcast i8* %20 to <16 x i8>*
  %28 = load <16 x i8>, <16 x i8>* %27, align 1
  %29 = bitcast i8* %21 to <16 x i8>*
  %30 = load <16 x i8>, <16 x i8>* %29, align 1
  %31 = bitcast i8* %22 to <16 x i8>*
  %32 = load <16 x i8>, <16 x i8>* %31, align 1
  %33 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %32
  %34 = shufflevector <16 x i8> %28, <16 x i8> %30, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %35 = shufflevector <16 x i8> %32, <16 x i8> %33, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %36 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %34, <16 x i8> %35) #5
  %37 = lshr <8 x i16> %36, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %38 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %37, <8 x i16> zeroinitializer) #5
  %39 = shufflevector <16 x i8> %28, <16 x i8> %30, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %40 = shufflevector <16 x i8> %32, <16 x i8> %33, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %41 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %39, <16 x i8> %40) #5
  %42 = lshr <8 x i16> %41, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %43 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %42, <8 x i16> zeroinitializer) #5
  %44 = shufflevector <16 x i8> %26, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %45 = shufflevector <16 x i8> %26, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %46 = bitcast <16 x i8> %44 to <8 x i16>
  %47 = sub <8 x i16> %38, %46
  %48 = bitcast <16 x i8> %45 to <8 x i16>
  %49 = sub <8 x i16> %43, %48
  %50 = add <8 x i16> %49, %47
  %51 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %50, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %52 = add <4 x i32> %51, %23
  %53 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %47, <8 x i16> %47) #5
  %54 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %49, <8 x i16> %49) #5
  %55 = add <4 x i32> %53, %24
  %56 = add <4 x i32> %55, %54
  %57 = getelementptr inbounds i8, i8* %19, i64 %15
  %58 = getelementptr inbounds i8, i8* %20, i64 16
  %59 = getelementptr inbounds i8, i8* %21, i64 16
  %60 = getelementptr inbounds i8, i8* %22, i64 %16
  %61 = add nuw nsw i32 %18, 1
  %62 = icmp eq i32 %61, 8
  br i1 %62, label %63, label %17

63:                                               ; preds = %17
  %64 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %52, <4 x i32> %56) #5
  %65 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %64, <4 x i32> %64) #5
  br label %115

66:                                               ; preds = %11, %66
  %67 = phi i32 [ %110, %66 ], [ 0, %11 ]
  %68 = phi i8* [ %106, %66 ], [ %4, %11 ]
  %69 = phi i8* [ %107, %66 ], [ %6, %11 ]
  %70 = phi i8* [ %108, %66 ], [ %13, %11 ]
  %71 = phi i8* [ %109, %66 ], [ %7, %11 ]
  %72 = phi <4 x i32> [ %101, %66 ], [ zeroinitializer, %11 ]
  %73 = phi <4 x i32> [ %105, %66 ], [ zeroinitializer, %11 ]
  %74 = bitcast i8* %68 to <16 x i8>*
  %75 = load <16 x i8>, <16 x i8>* %74, align 1
  %76 = bitcast i8* %69 to <16 x i8>*
  %77 = load <16 x i8>, <16 x i8>* %76, align 1
  %78 = bitcast i8* %70 to <16 x i8>*
  %79 = load <16 x i8>, <16 x i8>* %78, align 1
  %80 = bitcast i8* %71 to <16 x i8>*
  %81 = load <16 x i8>, <16 x i8>* %80, align 1
  %82 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %81
  %83 = shufflevector <16 x i8> %77, <16 x i8> %79, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %84 = shufflevector <16 x i8> %81, <16 x i8> %82, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %85 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %83, <16 x i8> %84) #5
  %86 = lshr <8 x i16> %85, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %87 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %86, <8 x i16> zeroinitializer) #5
  %88 = shufflevector <16 x i8> %77, <16 x i8> %79, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %89 = shufflevector <16 x i8> %81, <16 x i8> %82, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %90 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %88, <16 x i8> %89) #5
  %91 = lshr <8 x i16> %90, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %92 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %91, <8 x i16> zeroinitializer) #5
  %93 = shufflevector <16 x i8> %75, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %94 = shufflevector <16 x i8> %75, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %95 = bitcast <16 x i8> %93 to <8 x i16>
  %96 = sub <8 x i16> %87, %95
  %97 = bitcast <16 x i8> %94 to <8 x i16>
  %98 = sub <8 x i16> %92, %97
  %99 = add <8 x i16> %98, %96
  %100 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %99, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %101 = add <4 x i32> %100, %72
  %102 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %96, <8 x i16> %96) #5
  %103 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %98, <8 x i16> %98) #5
  %104 = add <4 x i32> %102, %73
  %105 = add <4 x i32> %104, %103
  %106 = getelementptr inbounds i8, i8* %68, i64 %15
  %107 = getelementptr inbounds i8, i8* %69, i64 16
  %108 = getelementptr inbounds i8, i8* %70, i64 16
  %109 = getelementptr inbounds i8, i8* %71, i64 %16
  %110 = add nuw nsw i32 %67, 1
  %111 = icmp eq i32 %110, 8
  br i1 %111, label %112, label %66

112:                                              ; preds = %66
  %113 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %101, <4 x i32> %105) #5
  %114 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %113, <4 x i32> %113) #5
  br label %115

115:                                              ; preds = %112, %63
  %116 = phi <4 x i32> [ %114, %112 ], [ %65, %63 ]
  %117 = extractelement <4 x i32> %116, i32 0
  %118 = bitcast <4 x i32> %116 to <16 x i8>
  %119 = shufflevector <16 x i8> %118, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %120 = bitcast <16 x i8> %119 to <4 x i32>
  %121 = extractelement <4 x i32> %120, i32 0
  store i32 %121, i32* %10, align 4
  %122 = sext i32 %117 to i64
  %123 = mul nsw i64 %122, %122
  %124 = lshr i64 %123, 7
  %125 = trunc i64 %124 to i32
  %126 = sub i32 %121, %125
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %13) #5
  ret i32 %126
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @aom_masked_sub_pixel_variance8x16_ssse3(i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32, i32* nocapture) local_unnamed_addr #0 {
  %12 = alloca [136 x i8], align 16
  %13 = getelementptr inbounds [136 x i8], [136 x i8]* %12, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 136, i8* nonnull %13) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 136, i1 false)
  call fastcc void @bilinear_filter8xh(i8* %0, i32 %1, i32 %2, i32 %3, i8* nonnull %13, i32 16)
  %14 = icmp eq i32 %9, 0
  %15 = sext i32 %5 to i64
  %16 = sext i32 %8 to i64
  %17 = shl nsw i32 %5, 1
  %18 = sext i32 %17 to i64
  %19 = shl nsw i32 %8, 1
  %20 = sext i32 %19 to i64
  br i1 %14, label %21, label %82

21:                                               ; preds = %11, %21
  %22 = phi i32 [ %77, %21 ], [ 0, %11 ]
  %23 = phi i8* [ %73, %21 ], [ %4, %11 ]
  %24 = phi i8* [ %74, %21 ], [ %13, %11 ]
  %25 = phi i8* [ %75, %21 ], [ %6, %11 ]
  %26 = phi i8* [ %76, %21 ], [ %7, %11 ]
  %27 = phi <4 x i32> [ %68, %21 ], [ zeroinitializer, %11 ]
  %28 = phi <4 x i32> [ %72, %21 ], [ zeroinitializer, %11 ]
  %29 = bitcast i8* %23 to i64*
  %30 = load i64, i64* %29, align 1
  %31 = insertelement <2 x i64> undef, i64 %30, i32 0
  %32 = getelementptr inbounds i8, i8* %23, i64 %15
  %33 = bitcast i8* %32 to i64*
  %34 = load i64, i64* %33, align 1
  %35 = insertelement <2 x i64> %31, i64 %34, i32 1
  %36 = bitcast i8* %24 to <16 x i8>*
  %37 = load <16 x i8>, <16 x i8>* %36, align 1
  %38 = bitcast i8* %25 to <16 x i8>*
  %39 = load <16 x i8>, <16 x i8>* %38, align 1
  %40 = bitcast i8* %26 to i64*
  %41 = load i64, i64* %40, align 1
  %42 = insertelement <2 x i64> undef, i64 %41, i32 0
  %43 = getelementptr inbounds i8, i8* %26, i64 %16
  %44 = bitcast i8* %43 to i64*
  %45 = load i64, i64* %44, align 1
  %46 = insertelement <2 x i64> %42, i64 %45, i32 1
  %47 = bitcast <2 x i64> %46 to <16 x i8>
  %48 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %47
  %49 = shufflevector <16 x i8> %37, <16 x i8> %39, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %50 = shufflevector <16 x i8> %47, <16 x i8> %48, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %51 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %49, <16 x i8> %50) #5
  %52 = lshr <8 x i16> %51, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %53 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %52, <8 x i16> zeroinitializer) #5
  %54 = shufflevector <16 x i8> %37, <16 x i8> %39, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %55 = shufflevector <16 x i8> %47, <16 x i8> %48, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %56 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %54, <16 x i8> %55) #5
  %57 = lshr <8 x i16> %56, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %58 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %57, <8 x i16> zeroinitializer) #5
  %59 = bitcast <2 x i64> %35 to <16 x i8>
  %60 = shufflevector <16 x i8> %59, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %61 = shufflevector <16 x i8> %59, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %62 = bitcast <16 x i8> %60 to <8 x i16>
  %63 = sub <8 x i16> %53, %62
  %64 = bitcast <16 x i8> %61 to <8 x i16>
  %65 = sub <8 x i16> %58, %64
  %66 = add <8 x i16> %65, %63
  %67 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %66, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %68 = add <4 x i32> %67, %27
  %69 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %63, <8 x i16> %63) #5
  %70 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %65, <8 x i16> %65) #5
  %71 = add <4 x i32> %69, %28
  %72 = add <4 x i32> %71, %70
  %73 = getelementptr inbounds i8, i8* %23, i64 %18
  %74 = getelementptr inbounds i8, i8* %24, i64 16
  %75 = getelementptr inbounds i8, i8* %25, i64 16
  %76 = getelementptr inbounds i8, i8* %26, i64 %20
  %77 = add nuw nsw i32 %22, 2
  %78 = icmp ult i32 %77, 16
  br i1 %78, label %21, label %79

79:                                               ; preds = %21
  %80 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %68, <4 x i32> %72) #5
  %81 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %80, <4 x i32> %80) #5
  br label %143

82:                                               ; preds = %11, %82
  %83 = phi i32 [ %138, %82 ], [ 0, %11 ]
  %84 = phi i8* [ %134, %82 ], [ %4, %11 ]
  %85 = phi i8* [ %135, %82 ], [ %6, %11 ]
  %86 = phi i8* [ %136, %82 ], [ %13, %11 ]
  %87 = phi i8* [ %137, %82 ], [ %7, %11 ]
  %88 = phi <4 x i32> [ %129, %82 ], [ zeroinitializer, %11 ]
  %89 = phi <4 x i32> [ %133, %82 ], [ zeroinitializer, %11 ]
  %90 = bitcast i8* %84 to i64*
  %91 = load i64, i64* %90, align 1
  %92 = insertelement <2 x i64> undef, i64 %91, i32 0
  %93 = getelementptr inbounds i8, i8* %84, i64 %15
  %94 = bitcast i8* %93 to i64*
  %95 = load i64, i64* %94, align 1
  %96 = insertelement <2 x i64> %92, i64 %95, i32 1
  %97 = bitcast i8* %85 to <16 x i8>*
  %98 = load <16 x i8>, <16 x i8>* %97, align 1
  %99 = bitcast i8* %86 to <16 x i8>*
  %100 = load <16 x i8>, <16 x i8>* %99, align 1
  %101 = bitcast i8* %87 to i64*
  %102 = load i64, i64* %101, align 1
  %103 = insertelement <2 x i64> undef, i64 %102, i32 0
  %104 = getelementptr inbounds i8, i8* %87, i64 %16
  %105 = bitcast i8* %104 to i64*
  %106 = load i64, i64* %105, align 1
  %107 = insertelement <2 x i64> %103, i64 %106, i32 1
  %108 = bitcast <2 x i64> %107 to <16 x i8>
  %109 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %108
  %110 = shufflevector <16 x i8> %98, <16 x i8> %100, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %111 = shufflevector <16 x i8> %108, <16 x i8> %109, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %112 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %110, <16 x i8> %111) #5
  %113 = lshr <8 x i16> %112, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %114 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %113, <8 x i16> zeroinitializer) #5
  %115 = shufflevector <16 x i8> %98, <16 x i8> %100, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %116 = shufflevector <16 x i8> %108, <16 x i8> %109, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %117 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %115, <16 x i8> %116) #5
  %118 = lshr <8 x i16> %117, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %119 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %118, <8 x i16> zeroinitializer) #5
  %120 = bitcast <2 x i64> %96 to <16 x i8>
  %121 = shufflevector <16 x i8> %120, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %122 = shufflevector <16 x i8> %120, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %123 = bitcast <16 x i8> %121 to <8 x i16>
  %124 = sub <8 x i16> %114, %123
  %125 = bitcast <16 x i8> %122 to <8 x i16>
  %126 = sub <8 x i16> %119, %125
  %127 = add <8 x i16> %126, %124
  %128 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %127, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %129 = add <4 x i32> %128, %88
  %130 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %124, <8 x i16> %124) #5
  %131 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %126, <8 x i16> %126) #5
  %132 = add <4 x i32> %130, %89
  %133 = add <4 x i32> %132, %131
  %134 = getelementptr inbounds i8, i8* %84, i64 %18
  %135 = getelementptr inbounds i8, i8* %85, i64 16
  %136 = getelementptr inbounds i8, i8* %86, i64 16
  %137 = getelementptr inbounds i8, i8* %87, i64 %20
  %138 = add nuw nsw i32 %83, 2
  %139 = icmp ult i32 %138, 16
  br i1 %139, label %82, label %140

140:                                              ; preds = %82
  %141 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %129, <4 x i32> %133) #5
  %142 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %141, <4 x i32> %141) #5
  br label %143

143:                                              ; preds = %140, %79
  %144 = phi <4 x i32> [ %142, %140 ], [ %81, %79 ]
  %145 = extractelement <4 x i32> %144, i32 0
  %146 = bitcast <4 x i32> %144 to <16 x i8>
  %147 = shufflevector <16 x i8> %146, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %148 = bitcast <16 x i8> %147 to <4 x i32>
  %149 = extractelement <4 x i32> %148, i32 0
  store i32 %149, i32* %10, align 4
  %150 = sext i32 %145 to i64
  %151 = mul nsw i64 %150, %150
  %152 = lshr i64 %151, 7
  %153 = trunc i64 %152 to i32
  %154 = sub i32 %149, %153
  call void @llvm.lifetime.end.p0i8(i64 136, i8* nonnull %13) #5
  ret i32 %154
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @bilinear_filter8xh(i8* nocapture readonly, i32, i32, i32, i8* nocapture, i32) unnamed_addr #0 {
  switch i32 %2, label %95 [
    i32 0, label %16
    i32 4, label %7
  ]

7:                                                ; preds = %6
  %8 = icmp slt i32 %5, 0
  br i1 %8, label %185, label %9

9:                                                ; preds = %7
  %10 = sext i32 %1 to i64
  %11 = add i32 %5, 1
  %12 = and i32 %11, 1
  %13 = icmp eq i32 %5, 0
  br i1 %13, label %173, label %14

14:                                               ; preds = %9
  %15 = sub i32 %11, %12
  br label %71

16:                                               ; preds = %6
  %17 = icmp slt i32 %5, 0
  br i1 %17, label %185, label %18

18:                                               ; preds = %16
  %19 = sext i32 %1 to i64
  %20 = add i32 %5, 1
  %21 = and i32 %20, 7
  %22 = icmp ult i32 %5, 7
  br i1 %22, label %158, label %23

23:                                               ; preds = %18
  %24 = sub i32 %20, %21
  br label %25

25:                                               ; preds = %25, %23
  %26 = phi i8* [ %0, %23 ], [ %67, %25 ]
  %27 = phi i8* [ %4, %23 ], [ %68, %25 ]
  %28 = phi i32 [ %24, %23 ], [ %69, %25 ]
  %29 = bitcast i8* %26 to i64*
  %30 = load i64, i64* %29, align 1
  %31 = bitcast i8* %27 to i64*
  store i64 %30, i64* %31, align 1
  %32 = getelementptr inbounds i8, i8* %26, i64 %19
  %33 = getelementptr inbounds i8, i8* %27, i64 8
  %34 = bitcast i8* %32 to i64*
  %35 = load i64, i64* %34, align 1
  %36 = bitcast i8* %33 to i64*
  store i64 %35, i64* %36, align 1
  %37 = getelementptr inbounds i8, i8* %32, i64 %19
  %38 = getelementptr inbounds i8, i8* %27, i64 16
  %39 = bitcast i8* %37 to i64*
  %40 = load i64, i64* %39, align 1
  %41 = bitcast i8* %38 to i64*
  store i64 %40, i64* %41, align 1
  %42 = getelementptr inbounds i8, i8* %37, i64 %19
  %43 = getelementptr inbounds i8, i8* %27, i64 24
  %44 = bitcast i8* %42 to i64*
  %45 = load i64, i64* %44, align 1
  %46 = bitcast i8* %43 to i64*
  store i64 %45, i64* %46, align 1
  %47 = getelementptr inbounds i8, i8* %42, i64 %19
  %48 = getelementptr inbounds i8, i8* %27, i64 32
  %49 = bitcast i8* %47 to i64*
  %50 = load i64, i64* %49, align 1
  %51 = bitcast i8* %48 to i64*
  store i64 %50, i64* %51, align 1
  %52 = getelementptr inbounds i8, i8* %47, i64 %19
  %53 = getelementptr inbounds i8, i8* %27, i64 40
  %54 = bitcast i8* %52 to i64*
  %55 = load i64, i64* %54, align 1
  %56 = bitcast i8* %53 to i64*
  store i64 %55, i64* %56, align 1
  %57 = getelementptr inbounds i8, i8* %52, i64 %19
  %58 = getelementptr inbounds i8, i8* %27, i64 48
  %59 = bitcast i8* %57 to i64*
  %60 = load i64, i64* %59, align 1
  %61 = bitcast i8* %58 to i64*
  store i64 %60, i64* %61, align 1
  %62 = getelementptr inbounds i8, i8* %57, i64 %19
  %63 = getelementptr inbounds i8, i8* %27, i64 56
  %64 = bitcast i8* %62 to i64*
  %65 = load i64, i64* %64, align 1
  %66 = bitcast i8* %63 to i64*
  store i64 %65, i64* %66, align 1
  %67 = getelementptr inbounds i8, i8* %62, i64 %19
  %68 = getelementptr inbounds i8, i8* %27, i64 64
  %69 = add i32 %28, -8
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %158, label %25

71:                                               ; preds = %71, %14
  %72 = phi i8* [ %0, %14 ], [ %91, %71 ]
  %73 = phi i8* [ %4, %14 ], [ %92, %71 ]
  %74 = phi i32 [ %15, %14 ], [ %93, %71 ]
  %75 = bitcast i8* %72 to <16 x i8>*
  %76 = load <16 x i8>, <16 x i8>* %75, align 1
  %77 = shufflevector <16 x i8> %76, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %78 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %76, <16 x i8> %77) #5
  %79 = bitcast <16 x i8> %78 to <2 x i64>
  %80 = extractelement <2 x i64> %79, i32 0
  %81 = bitcast i8* %73 to i64*
  store i64 %80, i64* %81, align 1
  %82 = getelementptr inbounds i8, i8* %72, i64 %10
  %83 = getelementptr inbounds i8, i8* %73, i64 8
  %84 = bitcast i8* %82 to <16 x i8>*
  %85 = load <16 x i8>, <16 x i8>* %84, align 1
  %86 = shufflevector <16 x i8> %85, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %87 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %85, <16 x i8> %86) #5
  %88 = bitcast <16 x i8> %87 to <2 x i64>
  %89 = extractelement <2 x i64> %88, i32 0
  %90 = bitcast i8* %83 to i64*
  store i64 %89, i64* %90, align 1
  %91 = getelementptr inbounds i8, i8* %82, i64 %10
  %92 = getelementptr inbounds i8, i8* %73, i64 16
  %93 = add i32 %74, -2
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %173, label %71

95:                                               ; preds = %6
  %96 = sext i32 %2 to i64
  %97 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters_2t, i64 0, i64 %96, i64 0
  %98 = load i8, i8* %97, align 2
  %99 = zext i8 %98 to i16
  %100 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters_2t, i64 0, i64 %96, i64 1
  %101 = load i8, i8* %100, align 1
  %102 = zext i8 %101 to i16
  %103 = shl nuw i16 %102, 8
  %104 = or i16 %103, %99
  %105 = insertelement <8 x i16> undef, i16 %104, i32 0
  %106 = shufflevector <8 x i16> %105, <8 x i16> undef, <8 x i32> zeroinitializer
  %107 = icmp sgt i32 %5, 0
  %108 = bitcast i8* %0 to <16 x i8>*
  %109 = load <16 x i8>, <16 x i8>* %108, align 1
  %110 = shufflevector <16 x i8> %109, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  br i1 %107, label %113, label %111

111:                                              ; preds = %95
  %112 = bitcast <8 x i16> %106 to <16 x i8>
  br label %145

113:                                              ; preds = %95
  %114 = sext i32 %1 to i64
  %115 = bitcast <8 x i16> %106 to <16 x i8>
  %116 = shl nsw i32 %1, 1
  %117 = sext i32 %116 to i64
  br label %118

118:                                              ; preds = %113, %118
  %119 = phi <16 x i8> [ %110, %113 ], [ %144, %118 ]
  %120 = phi <16 x i8> [ %109, %113 ], [ %143, %118 ]
  %121 = phi i8* [ %0, %113 ], [ %138, %118 ]
  %122 = phi i32 [ 0, %113 ], [ %140, %118 ]
  %123 = phi i8* [ %4, %113 ], [ %139, %118 ]
  %124 = getelementptr inbounds i8, i8* %121, i64 %114
  %125 = bitcast i8* %124 to <16 x i8>*
  %126 = load <16 x i8>, <16 x i8>* %125, align 1
  %127 = shufflevector <16 x i8> %126, <16 x i8> undef, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %128 = shufflevector <16 x i8> %120, <16 x i8> %119, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %129 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %128, <16 x i8> %115) #5
  %130 = lshr <8 x i16> %129, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %131 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %130, <8 x i16> zeroinitializer) #5
  %132 = shufflevector <16 x i8> %126, <16 x i8> %127, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %133 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %132, <16 x i8> %115) #5
  %134 = lshr <8 x i16> %133, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %135 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %134, <8 x i16> zeroinitializer) #5
  %136 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %131, <8 x i16> %135) #5
  %137 = bitcast i8* %123 to <16 x i8>*
  store <16 x i8> %136, <16 x i8>* %137, align 1
  %138 = getelementptr inbounds i8, i8* %121, i64 %117
  %139 = getelementptr inbounds i8, i8* %123, i64 16
  %140 = add nuw nsw i32 %122, 2
  %141 = icmp slt i32 %140, %5
  %142 = bitcast i8* %138 to <16 x i8>*
  %143 = load <16 x i8>, <16 x i8>* %142, align 1
  %144 = shufflevector <16 x i8> %143, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  br i1 %141, label %118, label %145

145:                                              ; preds = %118, %111
  %146 = phi <16 x i8> [ %112, %111 ], [ %115, %118 ]
  %147 = phi i8* [ %4, %111 ], [ %139, %118 ]
  %148 = phi <16 x i8> [ %109, %111 ], [ %143, %118 ]
  %149 = phi <16 x i8> [ %110, %111 ], [ %144, %118 ]
  %150 = shufflevector <16 x i8> %148, <16 x i8> %149, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %151 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %150, <16 x i8> %146) #5
  %152 = lshr <8 x i16> %151, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %153 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %152, <8 x i16> zeroinitializer) #5
  %154 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %153, <8 x i16> undef) #5
  %155 = bitcast <16 x i8> %154 to <2 x i64>
  %156 = extractelement <2 x i64> %155, i32 0
  %157 = bitcast i8* %147 to i64*
  store i64 %156, i64* %157, align 1
  br label %185

158:                                              ; preds = %25, %18
  %159 = phi i8* [ %0, %18 ], [ %67, %25 ]
  %160 = phi i8* [ %4, %18 ], [ %68, %25 ]
  %161 = icmp eq i32 %21, 0
  br i1 %161, label %185, label %162

162:                                              ; preds = %158, %162
  %163 = phi i8* [ %169, %162 ], [ %159, %158 ]
  %164 = phi i8* [ %170, %162 ], [ %160, %158 ]
  %165 = phi i32 [ %171, %162 ], [ %21, %158 ]
  %166 = bitcast i8* %163 to i64*
  %167 = load i64, i64* %166, align 1
  %168 = bitcast i8* %164 to i64*
  store i64 %167, i64* %168, align 1
  %169 = getelementptr inbounds i8, i8* %163, i64 %19
  %170 = getelementptr inbounds i8, i8* %164, i64 8
  %171 = add i32 %165, -1
  %172 = icmp eq i32 %171, 0
  br i1 %172, label %185, label %162, !llvm.loop !6

173:                                              ; preds = %71, %9
  %174 = phi i8* [ %0, %9 ], [ %91, %71 ]
  %175 = phi i8* [ %4, %9 ], [ %92, %71 ]
  %176 = icmp eq i32 %12, 0
  br i1 %176, label %185, label %177

177:                                              ; preds = %173
  %178 = bitcast i8* %174 to <16 x i8>*
  %179 = load <16 x i8>, <16 x i8>* %178, align 1
  %180 = shufflevector <16 x i8> %179, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %181 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %179, <16 x i8> %180) #5
  %182 = bitcast <16 x i8> %181 to <2 x i64>
  %183 = extractelement <2 x i64> %182, i32 0
  %184 = bitcast i8* %175 to i64*
  store i64 %183, i64* %184, align 1
  br label %185

185:                                              ; preds = %177, %173, %158, %162, %7, %16, %145
  switch i32 %3, label %223 [
    i32 0, label %284
    i32 4, label %186
  ]

186:                                              ; preds = %185
  %187 = icmp sgt i32 %5, 0
  br i1 %187, label %188, label %284

188:                                              ; preds = %186
  %189 = bitcast i8* %4 to i64*
  %190 = load i64, i64* %189, align 1
  %191 = and i32 %5, 1
  %192 = icmp eq i32 %5, 1
  br i1 %192, label %268, label %193

193:                                              ; preds = %188
  %194 = sub i32 %5, %191
  br label %195

195:                                              ; preds = %195, %193
  %196 = phi i64 [ %190, %193 ], [ %214, %195 ]
  %197 = phi i8* [ %4, %193 ], [ %212, %195 ]
  %198 = phi i32 [ %194, %193 ], [ %221, %195 ]
  %199 = bitcast i8* %197 to i64*
  %200 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %196, i32 0
  %201 = getelementptr inbounds i8, i8* %197, i64 8
  %202 = bitcast i8* %201 to i64*
  %203 = load i64, i64* %202, align 1
  %204 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %203, i32 0
  %205 = bitcast <2 x i64> %200 to <16 x i8>
  %206 = bitcast <2 x i64> %204 to <16 x i8>
  %207 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %205, <16 x i8> %206) #5
  %208 = bitcast <16 x i8> %207 to <2 x i64>
  %209 = extractelement <2 x i64> %208, i32 0
  store i64 %209, i64* %199, align 1
  %210 = bitcast i8* %201 to i64*
  %211 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %203, i32 0
  %212 = getelementptr inbounds i8, i8* %197, i64 16
  %213 = bitcast i8* %212 to i64*
  %214 = load i64, i64* %213, align 1
  %215 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %214, i32 0
  %216 = bitcast <2 x i64> %211 to <16 x i8>
  %217 = bitcast <2 x i64> %215 to <16 x i8>
  %218 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %216, <16 x i8> %217) #5
  %219 = bitcast <16 x i8> %218 to <2 x i64>
  %220 = extractelement <2 x i64> %219, i32 0
  store i64 %220, i64* %210, align 1
  %221 = add i32 %198, -2
  %222 = icmp eq i32 %221, 0
  br i1 %222, label %268, label %195

223:                                              ; preds = %185
  %224 = sext i32 %3 to i64
  %225 = icmp sgt i32 %5, 0
  br i1 %225, label %226, label %284

226:                                              ; preds = %223
  %227 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters_2t, i64 0, i64 %224, i64 1
  %228 = load i8, i8* %227, align 1
  %229 = zext i8 %228 to i16
  %230 = shl nuw i16 %229, 8
  %231 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters_2t, i64 0, i64 %224, i64 0
  %232 = load i8, i8* %231, align 2
  %233 = zext i8 %232 to i16
  %234 = or i16 %230, %233
  %235 = insertelement <8 x i16> undef, i16 %234, i32 0
  %236 = shufflevector <8 x i16> %235, <8 x i16> undef, <8 x i32> zeroinitializer
  %237 = bitcast <8 x i16> %236 to <16 x i8>
  %238 = bitcast i8* %4 to i64*
  %239 = load i64, i64* %238, align 1
  br label %240

240:                                              ; preds = %226, %240
  %241 = phi i64 [ %239, %226 ], [ %251, %240 ]
  %242 = phi i8* [ %4, %226 ], [ %249, %240 ]
  %243 = phi i32 [ 0, %226 ], [ %266, %240 ]
  %244 = insertelement <2 x i64> undef, i64 %241, i32 0
  %245 = getelementptr inbounds i8, i8* %242, i64 8
  %246 = bitcast i8* %245 to i64*
  %247 = load i64, i64* %246, align 1
  %248 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %247, i32 0
  %249 = getelementptr inbounds i8, i8* %242, i64 16
  %250 = bitcast i8* %249 to i64*
  %251 = load i64, i64* %250, align 1
  %252 = insertelement <2 x i64> undef, i64 %251, i32 0
  %253 = bitcast <2 x i64> %244 to <16 x i8>
  %254 = bitcast <2 x i64> %248 to <16 x i8>
  %255 = shufflevector <16 x i8> %253, <16 x i8> %254, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %256 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %255, <16 x i8> %237) #5
  %257 = lshr <8 x i16> %256, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %258 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %257, <8 x i16> zeroinitializer) #5
  %259 = bitcast <2 x i64> %252 to <16 x i8>
  %260 = shufflevector <16 x i8> %254, <16 x i8> %259, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %261 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %260, <16 x i8> %237) #5
  %262 = lshr <8 x i16> %261, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %263 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %262, <8 x i16> zeroinitializer) #5
  %264 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %258, <8 x i16> %263) #5
  %265 = bitcast i8* %242 to <16 x i8>*
  store <16 x i8> %264, <16 x i8>* %265, align 1
  %266 = add nuw nsw i32 %243, 2
  %267 = icmp slt i32 %266, %5
  br i1 %267, label %240, label %284

268:                                              ; preds = %195, %188
  %269 = phi i64 [ %190, %188 ], [ %214, %195 ]
  %270 = phi i8* [ %4, %188 ], [ %212, %195 ]
  %271 = icmp eq i32 %191, 0
  br i1 %271, label %284, label %272

272:                                              ; preds = %268
  %273 = bitcast i8* %270 to i64*
  %274 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %269, i32 0
  %275 = getelementptr inbounds i8, i8* %270, i64 8
  %276 = bitcast i8* %275 to i64*
  %277 = load i64, i64* %276, align 1
  %278 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %277, i32 0
  %279 = bitcast <2 x i64> %274 to <16 x i8>
  %280 = bitcast <2 x i64> %278 to <16 x i8>
  %281 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %279, <16 x i8> %280) #5
  %282 = bitcast <16 x i8> %281 to <2 x i64>
  %283 = extractelement <2 x i64> %282, i32 0
  store i64 %283, i64* %273, align 1
  br label %284

284:                                              ; preds = %272, %268, %240, %186, %223, %185
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @aom_masked_sub_pixel_variance8x8_ssse3(i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32, i32* nocapture) local_unnamed_addr #0 {
  %12 = alloca [72 x i8], align 16
  %13 = getelementptr inbounds [72 x i8], [72 x i8]* %12, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %13) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 72, i1 false)
  call fastcc void @bilinear_filter8xh(i8* %0, i32 %1, i32 %2, i32 %3, i8* nonnull %13, i32 8)
  %14 = icmp eq i32 %9, 0
  %15 = sext i32 %5 to i64
  %16 = sext i32 %8 to i64
  %17 = shl nsw i32 %5, 1
  %18 = sext i32 %17 to i64
  %19 = shl nsw i32 %8, 1
  %20 = sext i32 %19 to i64
  %21 = bitcast i8* %4 to i64*
  %22 = load i64, i64* %21, align 1
  %23 = insertelement <2 x i64> undef, i64 %22, i32 0
  %24 = getelementptr inbounds i8, i8* %4, i64 %15
  %25 = bitcast i8* %24 to i64*
  %26 = load i64, i64* %25, align 1
  %27 = insertelement <2 x i64> %23, i64 %26, i32 1
  br i1 %14, label %210, label %28

28:                                               ; preds = %11
  %29 = bitcast i8* %6 to <16 x i8>*
  %30 = load <16 x i8>, <16 x i8>* %29, align 1
  %31 = bitcast [72 x i8]* %12 to <16 x i8>*
  %32 = load <16 x i8>, <16 x i8>* %31, align 16
  %33 = bitcast i8* %7 to i64*
  %34 = load i64, i64* %33, align 1
  %35 = insertelement <2 x i64> undef, i64 %34, i32 0
  %36 = getelementptr inbounds i8, i8* %7, i64 %16
  %37 = bitcast i8* %36 to i64*
  %38 = load i64, i64* %37, align 1
  %39 = insertelement <2 x i64> %35, i64 %38, i32 1
  %40 = bitcast <2 x i64> %39 to <16 x i8>
  %41 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %40
  %42 = shufflevector <16 x i8> %30, <16 x i8> %32, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %43 = shufflevector <16 x i8> %40, <16 x i8> %41, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %44 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %42, <16 x i8> %43) #5
  %45 = lshr <8 x i16> %44, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %46 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %45, <8 x i16> zeroinitializer) #5
  %47 = shufflevector <16 x i8> %30, <16 x i8> %32, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %48 = shufflevector <16 x i8> %40, <16 x i8> %41, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %49 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %47, <16 x i8> %48) #5
  %50 = lshr <8 x i16> %49, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %51 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %50, <8 x i16> zeroinitializer) #5
  %52 = bitcast <2 x i64> %27 to <16 x i8>
  %53 = shufflevector <16 x i8> %52, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %54 = shufflevector <16 x i8> %52, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %55 = bitcast <16 x i8> %53 to <8 x i16>
  %56 = sub <8 x i16> %46, %55
  %57 = bitcast <16 x i8> %54 to <8 x i16>
  %58 = sub <8 x i16> %51, %57
  %59 = add <8 x i16> %58, %56
  %60 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %59, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %61 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %56, <8 x i16> %56) #5
  %62 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %58, <8 x i16> %58) #5
  %63 = add <4 x i32> %61, %62
  %64 = getelementptr inbounds i8, i8* %4, i64 %18
  %65 = getelementptr inbounds i8, i8* %6, i64 16
  %66 = getelementptr inbounds [72 x i8], [72 x i8]* %12, i64 0, i64 16
  %67 = getelementptr inbounds i8, i8* %7, i64 %20
  %68 = bitcast i8* %64 to i64*
  %69 = load i64, i64* %68, align 1
  %70 = insertelement <2 x i64> undef, i64 %69, i32 0
  %71 = getelementptr inbounds i8, i8* %64, i64 %15
  %72 = bitcast i8* %71 to i64*
  %73 = load i64, i64* %72, align 1
  %74 = insertelement <2 x i64> %70, i64 %73, i32 1
  %75 = bitcast i8* %65 to <16 x i8>*
  %76 = load <16 x i8>, <16 x i8>* %75, align 1
  %77 = bitcast i8* %66 to <16 x i8>*
  %78 = load <16 x i8>, <16 x i8>* %77, align 16
  %79 = bitcast i8* %67 to i64*
  %80 = load i64, i64* %79, align 1
  %81 = insertelement <2 x i64> undef, i64 %80, i32 0
  %82 = getelementptr inbounds i8, i8* %67, i64 %16
  %83 = bitcast i8* %82 to i64*
  %84 = load i64, i64* %83, align 1
  %85 = insertelement <2 x i64> %81, i64 %84, i32 1
  %86 = bitcast <2 x i64> %85 to <16 x i8>
  %87 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %86
  %88 = shufflevector <16 x i8> %76, <16 x i8> %78, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %89 = shufflevector <16 x i8> %86, <16 x i8> %87, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %90 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %88, <16 x i8> %89) #5
  %91 = lshr <8 x i16> %90, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %92 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %91, <8 x i16> zeroinitializer) #5
  %93 = shufflevector <16 x i8> %76, <16 x i8> %78, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %94 = shufflevector <16 x i8> %86, <16 x i8> %87, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %95 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %93, <16 x i8> %94) #5
  %96 = lshr <8 x i16> %95, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %97 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %96, <8 x i16> zeroinitializer) #5
  %98 = bitcast <2 x i64> %74 to <16 x i8>
  %99 = shufflevector <16 x i8> %98, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %100 = shufflevector <16 x i8> %98, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %101 = bitcast <16 x i8> %99 to <8 x i16>
  %102 = sub <8 x i16> %92, %101
  %103 = bitcast <16 x i8> %100 to <8 x i16>
  %104 = sub <8 x i16> %97, %103
  %105 = add <8 x i16> %104, %102
  %106 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %105, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %107 = add <4 x i32> %106, %60
  %108 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %102, <8 x i16> %102) #5
  %109 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %104, <8 x i16> %104) #5
  %110 = add <4 x i32> %108, %63
  %111 = add <4 x i32> %110, %109
  %112 = getelementptr inbounds i8, i8* %64, i64 %18
  %113 = getelementptr inbounds i8, i8* %6, i64 32
  %114 = getelementptr inbounds [72 x i8], [72 x i8]* %12, i64 0, i64 32
  %115 = getelementptr inbounds i8, i8* %67, i64 %20
  %116 = bitcast i8* %112 to i64*
  %117 = load i64, i64* %116, align 1
  %118 = insertelement <2 x i64> undef, i64 %117, i32 0
  %119 = getelementptr inbounds i8, i8* %112, i64 %15
  %120 = bitcast i8* %119 to i64*
  %121 = load i64, i64* %120, align 1
  %122 = insertelement <2 x i64> %118, i64 %121, i32 1
  %123 = bitcast i8* %113 to <16 x i8>*
  %124 = load <16 x i8>, <16 x i8>* %123, align 1
  %125 = bitcast i8* %114 to <16 x i8>*
  %126 = load <16 x i8>, <16 x i8>* %125, align 16
  %127 = bitcast i8* %115 to i64*
  %128 = load i64, i64* %127, align 1
  %129 = insertelement <2 x i64> undef, i64 %128, i32 0
  %130 = getelementptr inbounds i8, i8* %115, i64 %16
  %131 = bitcast i8* %130 to i64*
  %132 = load i64, i64* %131, align 1
  %133 = insertelement <2 x i64> %129, i64 %132, i32 1
  %134 = bitcast <2 x i64> %133 to <16 x i8>
  %135 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %134
  %136 = shufflevector <16 x i8> %124, <16 x i8> %126, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %137 = shufflevector <16 x i8> %134, <16 x i8> %135, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %138 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %136, <16 x i8> %137) #5
  %139 = lshr <8 x i16> %138, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %140 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %139, <8 x i16> zeroinitializer) #5
  %141 = shufflevector <16 x i8> %124, <16 x i8> %126, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %142 = shufflevector <16 x i8> %134, <16 x i8> %135, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %143 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %141, <16 x i8> %142) #5
  %144 = lshr <8 x i16> %143, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %145 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %144, <8 x i16> zeroinitializer) #5
  %146 = bitcast <2 x i64> %122 to <16 x i8>
  %147 = shufflevector <16 x i8> %146, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %148 = shufflevector <16 x i8> %146, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %149 = bitcast <16 x i8> %147 to <8 x i16>
  %150 = sub <8 x i16> %140, %149
  %151 = bitcast <16 x i8> %148 to <8 x i16>
  %152 = sub <8 x i16> %145, %151
  %153 = add <8 x i16> %152, %150
  %154 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %153, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %155 = add <4 x i32> %154, %107
  %156 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %150, <8 x i16> %150) #5
  %157 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %152, <8 x i16> %152) #5
  %158 = add <4 x i32> %156, %111
  %159 = add <4 x i32> %158, %157
  %160 = getelementptr inbounds i8, i8* %112, i64 %18
  %161 = getelementptr inbounds i8, i8* %6, i64 48
  %162 = getelementptr inbounds [72 x i8], [72 x i8]* %12, i64 0, i64 48
  %163 = getelementptr inbounds i8, i8* %115, i64 %20
  %164 = bitcast i8* %160 to i64*
  %165 = load i64, i64* %164, align 1
  %166 = insertelement <2 x i64> undef, i64 %165, i32 0
  %167 = getelementptr inbounds i8, i8* %160, i64 %15
  %168 = bitcast i8* %167 to i64*
  %169 = load i64, i64* %168, align 1
  %170 = insertelement <2 x i64> %166, i64 %169, i32 1
  %171 = bitcast i8* %161 to <16 x i8>*
  %172 = load <16 x i8>, <16 x i8>* %171, align 1
  %173 = bitcast i8* %162 to <16 x i8>*
  %174 = load <16 x i8>, <16 x i8>* %173, align 16
  %175 = bitcast i8* %163 to i64*
  %176 = load i64, i64* %175, align 1
  %177 = insertelement <2 x i64> undef, i64 %176, i32 0
  %178 = getelementptr inbounds i8, i8* %163, i64 %16
  %179 = bitcast i8* %178 to i64*
  %180 = load i64, i64* %179, align 1
  %181 = insertelement <2 x i64> %177, i64 %180, i32 1
  %182 = bitcast <2 x i64> %181 to <16 x i8>
  %183 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %182
  %184 = shufflevector <16 x i8> %172, <16 x i8> %174, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %185 = shufflevector <16 x i8> %182, <16 x i8> %183, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %186 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %184, <16 x i8> %185) #5
  %187 = lshr <8 x i16> %186, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %188 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %187, <8 x i16> zeroinitializer) #5
  %189 = shufflevector <16 x i8> %172, <16 x i8> %174, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %190 = shufflevector <16 x i8> %182, <16 x i8> %183, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %191 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %189, <16 x i8> %190) #5
  %192 = lshr <8 x i16> %191, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %193 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %192, <8 x i16> zeroinitializer) #5
  %194 = bitcast <2 x i64> %170 to <16 x i8>
  %195 = shufflevector <16 x i8> %194, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %196 = shufflevector <16 x i8> %194, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %197 = bitcast <16 x i8> %195 to <8 x i16>
  %198 = sub <8 x i16> %188, %197
  %199 = bitcast <16 x i8> %196 to <8 x i16>
  %200 = sub <8 x i16> %193, %199
  %201 = add <8 x i16> %200, %198
  %202 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %201, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %203 = add <4 x i32> %202, %155
  %204 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %198, <8 x i16> %198) #5
  %205 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %200, <8 x i16> %200) #5
  %206 = add <4 x i32> %204, %159
  %207 = add <4 x i32> %206, %205
  %208 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %203, <4 x i32> %207) #5
  %209 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %208, <4 x i32> %208) #5
  br label %392

210:                                              ; preds = %11
  %211 = bitcast [72 x i8]* %12 to <16 x i8>*
  %212 = load <16 x i8>, <16 x i8>* %211, align 16
  %213 = bitcast i8* %6 to <16 x i8>*
  %214 = load <16 x i8>, <16 x i8>* %213, align 1
  %215 = bitcast i8* %7 to i64*
  %216 = load i64, i64* %215, align 1
  %217 = insertelement <2 x i64> undef, i64 %216, i32 0
  %218 = getelementptr inbounds i8, i8* %7, i64 %16
  %219 = bitcast i8* %218 to i64*
  %220 = load i64, i64* %219, align 1
  %221 = insertelement <2 x i64> %217, i64 %220, i32 1
  %222 = bitcast <2 x i64> %221 to <16 x i8>
  %223 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %222
  %224 = shufflevector <16 x i8> %212, <16 x i8> %214, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %225 = shufflevector <16 x i8> %222, <16 x i8> %223, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %226 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %224, <16 x i8> %225) #5
  %227 = lshr <8 x i16> %226, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %228 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %227, <8 x i16> zeroinitializer) #5
  %229 = shufflevector <16 x i8> %212, <16 x i8> %214, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %230 = shufflevector <16 x i8> %222, <16 x i8> %223, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %231 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %229, <16 x i8> %230) #5
  %232 = lshr <8 x i16> %231, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %233 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %232, <8 x i16> zeroinitializer) #5
  %234 = bitcast <2 x i64> %27 to <16 x i8>
  %235 = shufflevector <16 x i8> %234, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %236 = shufflevector <16 x i8> %234, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %237 = bitcast <16 x i8> %235 to <8 x i16>
  %238 = sub <8 x i16> %228, %237
  %239 = bitcast <16 x i8> %236 to <8 x i16>
  %240 = sub <8 x i16> %233, %239
  %241 = add <8 x i16> %240, %238
  %242 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %241, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %243 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %238, <8 x i16> %238) #5
  %244 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %240, <8 x i16> %240) #5
  %245 = add <4 x i32> %243, %244
  %246 = getelementptr inbounds i8, i8* %4, i64 %18
  %247 = getelementptr inbounds [72 x i8], [72 x i8]* %12, i64 0, i64 16
  %248 = getelementptr inbounds i8, i8* %6, i64 16
  %249 = getelementptr inbounds i8, i8* %7, i64 %20
  %250 = bitcast i8* %246 to i64*
  %251 = load i64, i64* %250, align 1
  %252 = insertelement <2 x i64> undef, i64 %251, i32 0
  %253 = getelementptr inbounds i8, i8* %246, i64 %15
  %254 = bitcast i8* %253 to i64*
  %255 = load i64, i64* %254, align 1
  %256 = insertelement <2 x i64> %252, i64 %255, i32 1
  %257 = bitcast i8* %247 to <16 x i8>*
  %258 = load <16 x i8>, <16 x i8>* %257, align 16
  %259 = bitcast i8* %248 to <16 x i8>*
  %260 = load <16 x i8>, <16 x i8>* %259, align 1
  %261 = bitcast i8* %249 to i64*
  %262 = load i64, i64* %261, align 1
  %263 = insertelement <2 x i64> undef, i64 %262, i32 0
  %264 = getelementptr inbounds i8, i8* %249, i64 %16
  %265 = bitcast i8* %264 to i64*
  %266 = load i64, i64* %265, align 1
  %267 = insertelement <2 x i64> %263, i64 %266, i32 1
  %268 = bitcast <2 x i64> %267 to <16 x i8>
  %269 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %268
  %270 = shufflevector <16 x i8> %258, <16 x i8> %260, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %271 = shufflevector <16 x i8> %268, <16 x i8> %269, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %272 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %270, <16 x i8> %271) #5
  %273 = lshr <8 x i16> %272, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %274 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %273, <8 x i16> zeroinitializer) #5
  %275 = shufflevector <16 x i8> %258, <16 x i8> %260, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %276 = shufflevector <16 x i8> %268, <16 x i8> %269, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %277 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %275, <16 x i8> %276) #5
  %278 = lshr <8 x i16> %277, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %279 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %278, <8 x i16> zeroinitializer) #5
  %280 = bitcast <2 x i64> %256 to <16 x i8>
  %281 = shufflevector <16 x i8> %280, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %282 = shufflevector <16 x i8> %280, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %283 = bitcast <16 x i8> %281 to <8 x i16>
  %284 = sub <8 x i16> %274, %283
  %285 = bitcast <16 x i8> %282 to <8 x i16>
  %286 = sub <8 x i16> %279, %285
  %287 = add <8 x i16> %286, %284
  %288 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %287, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %289 = add <4 x i32> %288, %242
  %290 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %284, <8 x i16> %284) #5
  %291 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %286, <8 x i16> %286) #5
  %292 = add <4 x i32> %290, %245
  %293 = add <4 x i32> %292, %291
  %294 = getelementptr inbounds i8, i8* %246, i64 %18
  %295 = getelementptr inbounds [72 x i8], [72 x i8]* %12, i64 0, i64 32
  %296 = getelementptr inbounds i8, i8* %6, i64 32
  %297 = getelementptr inbounds i8, i8* %249, i64 %20
  %298 = bitcast i8* %294 to i64*
  %299 = load i64, i64* %298, align 1
  %300 = insertelement <2 x i64> undef, i64 %299, i32 0
  %301 = getelementptr inbounds i8, i8* %294, i64 %15
  %302 = bitcast i8* %301 to i64*
  %303 = load i64, i64* %302, align 1
  %304 = insertelement <2 x i64> %300, i64 %303, i32 1
  %305 = bitcast i8* %295 to <16 x i8>*
  %306 = load <16 x i8>, <16 x i8>* %305, align 16
  %307 = bitcast i8* %296 to <16 x i8>*
  %308 = load <16 x i8>, <16 x i8>* %307, align 1
  %309 = bitcast i8* %297 to i64*
  %310 = load i64, i64* %309, align 1
  %311 = insertelement <2 x i64> undef, i64 %310, i32 0
  %312 = getelementptr inbounds i8, i8* %297, i64 %16
  %313 = bitcast i8* %312 to i64*
  %314 = load i64, i64* %313, align 1
  %315 = insertelement <2 x i64> %311, i64 %314, i32 1
  %316 = bitcast <2 x i64> %315 to <16 x i8>
  %317 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %316
  %318 = shufflevector <16 x i8> %306, <16 x i8> %308, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %319 = shufflevector <16 x i8> %316, <16 x i8> %317, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %320 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %318, <16 x i8> %319) #5
  %321 = lshr <8 x i16> %320, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %322 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %321, <8 x i16> zeroinitializer) #5
  %323 = shufflevector <16 x i8> %306, <16 x i8> %308, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %324 = shufflevector <16 x i8> %316, <16 x i8> %317, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %325 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %323, <16 x i8> %324) #5
  %326 = lshr <8 x i16> %325, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %327 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %326, <8 x i16> zeroinitializer) #5
  %328 = bitcast <2 x i64> %304 to <16 x i8>
  %329 = shufflevector <16 x i8> %328, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %330 = shufflevector <16 x i8> %328, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %331 = bitcast <16 x i8> %329 to <8 x i16>
  %332 = sub <8 x i16> %322, %331
  %333 = bitcast <16 x i8> %330 to <8 x i16>
  %334 = sub <8 x i16> %327, %333
  %335 = add <8 x i16> %334, %332
  %336 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %335, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %337 = add <4 x i32> %336, %289
  %338 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %332, <8 x i16> %332) #5
  %339 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %334, <8 x i16> %334) #5
  %340 = add <4 x i32> %338, %293
  %341 = add <4 x i32> %340, %339
  %342 = getelementptr inbounds i8, i8* %294, i64 %18
  %343 = getelementptr inbounds [72 x i8], [72 x i8]* %12, i64 0, i64 48
  %344 = getelementptr inbounds i8, i8* %6, i64 48
  %345 = getelementptr inbounds i8, i8* %297, i64 %20
  %346 = bitcast i8* %342 to i64*
  %347 = load i64, i64* %346, align 1
  %348 = insertelement <2 x i64> undef, i64 %347, i32 0
  %349 = getelementptr inbounds i8, i8* %342, i64 %15
  %350 = bitcast i8* %349 to i64*
  %351 = load i64, i64* %350, align 1
  %352 = insertelement <2 x i64> %348, i64 %351, i32 1
  %353 = bitcast i8* %343 to <16 x i8>*
  %354 = load <16 x i8>, <16 x i8>* %353, align 16
  %355 = bitcast i8* %344 to <16 x i8>*
  %356 = load <16 x i8>, <16 x i8>* %355, align 1
  %357 = bitcast i8* %345 to i64*
  %358 = load i64, i64* %357, align 1
  %359 = insertelement <2 x i64> undef, i64 %358, i32 0
  %360 = getelementptr inbounds i8, i8* %345, i64 %16
  %361 = bitcast i8* %360 to i64*
  %362 = load i64, i64* %361, align 1
  %363 = insertelement <2 x i64> %359, i64 %362, i32 1
  %364 = bitcast <2 x i64> %363 to <16 x i8>
  %365 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %364
  %366 = shufflevector <16 x i8> %354, <16 x i8> %356, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %367 = shufflevector <16 x i8> %364, <16 x i8> %365, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %368 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %366, <16 x i8> %367) #5
  %369 = lshr <8 x i16> %368, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %370 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %369, <8 x i16> zeroinitializer) #5
  %371 = shufflevector <16 x i8> %354, <16 x i8> %356, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %372 = shufflevector <16 x i8> %364, <16 x i8> %365, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %373 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %371, <16 x i8> %372) #5
  %374 = lshr <8 x i16> %373, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %375 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %374, <8 x i16> zeroinitializer) #5
  %376 = bitcast <2 x i64> %352 to <16 x i8>
  %377 = shufflevector <16 x i8> %376, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %378 = shufflevector <16 x i8> %376, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %379 = bitcast <16 x i8> %377 to <8 x i16>
  %380 = sub <8 x i16> %370, %379
  %381 = bitcast <16 x i8> %378 to <8 x i16>
  %382 = sub <8 x i16> %375, %381
  %383 = add <8 x i16> %382, %380
  %384 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %383, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %385 = add <4 x i32> %384, %337
  %386 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %380, <8 x i16> %380) #5
  %387 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %382, <8 x i16> %382) #5
  %388 = add <4 x i32> %386, %341
  %389 = add <4 x i32> %388, %387
  %390 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %385, <4 x i32> %389) #5
  %391 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %390, <4 x i32> %390) #5
  br label %392

392:                                              ; preds = %28, %210
  %393 = phi <4 x i32> [ %209, %28 ], [ %391, %210 ]
  %394 = extractelement <4 x i32> %393, i32 0
  %395 = bitcast <4 x i32> %393 to <16 x i8>
  %396 = shufflevector <16 x i8> %395, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %397 = bitcast <16 x i8> %396 to <4 x i32>
  %398 = extractelement <4 x i32> %397, i32 0
  store i32 %398, i32* %10, align 4
  %399 = sext i32 %394 to i64
  %400 = mul nsw i64 %399, %399
  %401 = lshr i64 %400, 6
  %402 = trunc i64 %401 to i32
  %403 = sub i32 %398, %402
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %13) #5
  ret i32 %403
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @aom_masked_sub_pixel_variance8x4_ssse3(i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32, i32* nocapture) local_unnamed_addr #0 {
  %12 = alloca [40 x i8], align 16
  %13 = getelementptr inbounds [40 x i8], [40 x i8]* %12, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %13) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 40, i1 false)
  call fastcc void @bilinear_filter8xh(i8* %0, i32 %1, i32 %2, i32 %3, i8* nonnull %13, i32 4)
  %14 = icmp eq i32 %9, 0
  %15 = sext i32 %5 to i64
  %16 = sext i32 %8 to i64
  %17 = shl nsw i32 %5, 1
  %18 = sext i32 %17 to i64
  %19 = shl nsw i32 %8, 1
  %20 = sext i32 %19 to i64
  %21 = bitcast i8* %4 to i64*
  %22 = load i64, i64* %21, align 1
  %23 = insertelement <2 x i64> undef, i64 %22, i32 0
  %24 = getelementptr inbounds i8, i8* %4, i64 %15
  %25 = bitcast i8* %24 to i64*
  %26 = load i64, i64* %25, align 1
  %27 = insertelement <2 x i64> %23, i64 %26, i32 1
  br i1 %14, label %114, label %28

28:                                               ; preds = %11
  %29 = bitcast i8* %6 to <16 x i8>*
  %30 = load <16 x i8>, <16 x i8>* %29, align 1
  %31 = bitcast [40 x i8]* %12 to <16 x i8>*
  %32 = load <16 x i8>, <16 x i8>* %31, align 16
  %33 = bitcast i8* %7 to i64*
  %34 = load i64, i64* %33, align 1
  %35 = insertelement <2 x i64> undef, i64 %34, i32 0
  %36 = getelementptr inbounds i8, i8* %7, i64 %16
  %37 = bitcast i8* %36 to i64*
  %38 = load i64, i64* %37, align 1
  %39 = insertelement <2 x i64> %35, i64 %38, i32 1
  %40 = bitcast <2 x i64> %39 to <16 x i8>
  %41 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %40
  %42 = shufflevector <16 x i8> %30, <16 x i8> %32, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %43 = shufflevector <16 x i8> %40, <16 x i8> %41, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %44 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %42, <16 x i8> %43) #5
  %45 = lshr <8 x i16> %44, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %46 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %45, <8 x i16> zeroinitializer) #5
  %47 = shufflevector <16 x i8> %30, <16 x i8> %32, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %48 = shufflevector <16 x i8> %40, <16 x i8> %41, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %49 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %47, <16 x i8> %48) #5
  %50 = lshr <8 x i16> %49, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %51 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %50, <8 x i16> zeroinitializer) #5
  %52 = bitcast <2 x i64> %27 to <16 x i8>
  %53 = shufflevector <16 x i8> %52, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %54 = shufflevector <16 x i8> %52, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %55 = bitcast <16 x i8> %53 to <8 x i16>
  %56 = sub <8 x i16> %46, %55
  %57 = bitcast <16 x i8> %54 to <8 x i16>
  %58 = sub <8 x i16> %51, %57
  %59 = add <8 x i16> %58, %56
  %60 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %59, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %61 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %56, <8 x i16> %56) #5
  %62 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %58, <8 x i16> %58) #5
  %63 = add <4 x i32> %61, %62
  %64 = getelementptr inbounds i8, i8* %4, i64 %18
  %65 = getelementptr inbounds i8, i8* %6, i64 16
  %66 = getelementptr inbounds [40 x i8], [40 x i8]* %12, i64 0, i64 16
  %67 = getelementptr inbounds i8, i8* %7, i64 %20
  %68 = bitcast i8* %64 to i64*
  %69 = load i64, i64* %68, align 1
  %70 = insertelement <2 x i64> undef, i64 %69, i32 0
  %71 = getelementptr inbounds i8, i8* %64, i64 %15
  %72 = bitcast i8* %71 to i64*
  %73 = load i64, i64* %72, align 1
  %74 = insertelement <2 x i64> %70, i64 %73, i32 1
  %75 = bitcast i8* %65 to <16 x i8>*
  %76 = load <16 x i8>, <16 x i8>* %75, align 1
  %77 = bitcast i8* %66 to <16 x i8>*
  %78 = load <16 x i8>, <16 x i8>* %77, align 16
  %79 = bitcast i8* %67 to i64*
  %80 = load i64, i64* %79, align 1
  %81 = insertelement <2 x i64> undef, i64 %80, i32 0
  %82 = getelementptr inbounds i8, i8* %67, i64 %16
  %83 = bitcast i8* %82 to i64*
  %84 = load i64, i64* %83, align 1
  %85 = insertelement <2 x i64> %81, i64 %84, i32 1
  %86 = bitcast <2 x i64> %85 to <16 x i8>
  %87 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %86
  %88 = shufflevector <16 x i8> %76, <16 x i8> %78, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %89 = shufflevector <16 x i8> %86, <16 x i8> %87, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %90 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %88, <16 x i8> %89) #5
  %91 = lshr <8 x i16> %90, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %92 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %91, <8 x i16> zeroinitializer) #5
  %93 = shufflevector <16 x i8> %76, <16 x i8> %78, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %94 = shufflevector <16 x i8> %86, <16 x i8> %87, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %95 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %93, <16 x i8> %94) #5
  %96 = lshr <8 x i16> %95, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %97 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %96, <8 x i16> zeroinitializer) #5
  %98 = bitcast <2 x i64> %74 to <16 x i8>
  %99 = shufflevector <16 x i8> %98, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %100 = shufflevector <16 x i8> %98, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %101 = bitcast <16 x i8> %99 to <8 x i16>
  %102 = sub <8 x i16> %92, %101
  %103 = bitcast <16 x i8> %100 to <8 x i16>
  %104 = sub <8 x i16> %97, %103
  %105 = add <8 x i16> %104, %102
  %106 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %105, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %107 = add <4 x i32> %106, %60
  %108 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %102, <8 x i16> %102) #5
  %109 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %104, <8 x i16> %104) #5
  %110 = add <4 x i32> %108, %63
  %111 = add <4 x i32> %110, %109
  %112 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %107, <4 x i32> %111) #5
  %113 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %112, <4 x i32> %112) #5
  br label %200

114:                                              ; preds = %11
  %115 = bitcast [40 x i8]* %12 to <16 x i8>*
  %116 = load <16 x i8>, <16 x i8>* %115, align 16
  %117 = bitcast i8* %6 to <16 x i8>*
  %118 = load <16 x i8>, <16 x i8>* %117, align 1
  %119 = bitcast i8* %7 to i64*
  %120 = load i64, i64* %119, align 1
  %121 = insertelement <2 x i64> undef, i64 %120, i32 0
  %122 = getelementptr inbounds i8, i8* %7, i64 %16
  %123 = bitcast i8* %122 to i64*
  %124 = load i64, i64* %123, align 1
  %125 = insertelement <2 x i64> %121, i64 %124, i32 1
  %126 = bitcast <2 x i64> %125 to <16 x i8>
  %127 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %126
  %128 = shufflevector <16 x i8> %116, <16 x i8> %118, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %129 = shufflevector <16 x i8> %126, <16 x i8> %127, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %130 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %128, <16 x i8> %129) #5
  %131 = lshr <8 x i16> %130, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %132 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %131, <8 x i16> zeroinitializer) #5
  %133 = shufflevector <16 x i8> %116, <16 x i8> %118, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %134 = shufflevector <16 x i8> %126, <16 x i8> %127, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %135 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %133, <16 x i8> %134) #5
  %136 = lshr <8 x i16> %135, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %137 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %136, <8 x i16> zeroinitializer) #5
  %138 = bitcast <2 x i64> %27 to <16 x i8>
  %139 = shufflevector <16 x i8> %138, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %140 = shufflevector <16 x i8> %138, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %141 = bitcast <16 x i8> %139 to <8 x i16>
  %142 = sub <8 x i16> %132, %141
  %143 = bitcast <16 x i8> %140 to <8 x i16>
  %144 = sub <8 x i16> %137, %143
  %145 = add <8 x i16> %144, %142
  %146 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %145, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %147 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %142, <8 x i16> %142) #5
  %148 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %144, <8 x i16> %144) #5
  %149 = add <4 x i32> %147, %148
  %150 = getelementptr inbounds i8, i8* %4, i64 %18
  %151 = getelementptr inbounds [40 x i8], [40 x i8]* %12, i64 0, i64 16
  %152 = getelementptr inbounds i8, i8* %6, i64 16
  %153 = getelementptr inbounds i8, i8* %7, i64 %20
  %154 = bitcast i8* %150 to i64*
  %155 = load i64, i64* %154, align 1
  %156 = insertelement <2 x i64> undef, i64 %155, i32 0
  %157 = getelementptr inbounds i8, i8* %150, i64 %15
  %158 = bitcast i8* %157 to i64*
  %159 = load i64, i64* %158, align 1
  %160 = insertelement <2 x i64> %156, i64 %159, i32 1
  %161 = bitcast i8* %151 to <16 x i8>*
  %162 = load <16 x i8>, <16 x i8>* %161, align 16
  %163 = bitcast i8* %152 to <16 x i8>*
  %164 = load <16 x i8>, <16 x i8>* %163, align 1
  %165 = bitcast i8* %153 to i64*
  %166 = load i64, i64* %165, align 1
  %167 = insertelement <2 x i64> undef, i64 %166, i32 0
  %168 = getelementptr inbounds i8, i8* %153, i64 %16
  %169 = bitcast i8* %168 to i64*
  %170 = load i64, i64* %169, align 1
  %171 = insertelement <2 x i64> %167, i64 %170, i32 1
  %172 = bitcast <2 x i64> %171 to <16 x i8>
  %173 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %172
  %174 = shufflevector <16 x i8> %162, <16 x i8> %164, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %175 = shufflevector <16 x i8> %172, <16 x i8> %173, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %176 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %174, <16 x i8> %175) #5
  %177 = lshr <8 x i16> %176, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %178 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %177, <8 x i16> zeroinitializer) #5
  %179 = shufflevector <16 x i8> %162, <16 x i8> %164, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %180 = shufflevector <16 x i8> %172, <16 x i8> %173, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %181 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %179, <16 x i8> %180) #5
  %182 = lshr <8 x i16> %181, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %183 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %182, <8 x i16> zeroinitializer) #5
  %184 = bitcast <2 x i64> %160 to <16 x i8>
  %185 = shufflevector <16 x i8> %184, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %186 = shufflevector <16 x i8> %184, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %187 = bitcast <16 x i8> %185 to <8 x i16>
  %188 = sub <8 x i16> %178, %187
  %189 = bitcast <16 x i8> %186 to <8 x i16>
  %190 = sub <8 x i16> %183, %189
  %191 = add <8 x i16> %190, %188
  %192 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %191, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %193 = add <4 x i32> %192, %146
  %194 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %188, <8 x i16> %188) #5
  %195 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %190, <8 x i16> %190) #5
  %196 = add <4 x i32> %194, %149
  %197 = add <4 x i32> %196, %195
  %198 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %193, <4 x i32> %197) #5
  %199 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %198, <4 x i32> %198) #5
  br label %200

200:                                              ; preds = %28, %114
  %201 = phi <4 x i32> [ %113, %28 ], [ %199, %114 ]
  %202 = extractelement <4 x i32> %201, i32 0
  %203 = bitcast <4 x i32> %201 to <16 x i8>
  %204 = shufflevector <16 x i8> %203, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %205 = bitcast <16 x i8> %204 to <4 x i32>
  %206 = extractelement <4 x i32> %205, i32 0
  store i32 %206, i32* %10, align 4
  %207 = sext i32 %202 to i64
  %208 = mul nsw i64 %207, %207
  %209 = lshr i64 %208, 5
  %210 = trunc i64 %209 to i32
  %211 = sub i32 %206, %210
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %13) #5
  ret i32 %211
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @aom_masked_sub_pixel_variance4x8_ssse3(i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32, i32* nocapture) local_unnamed_addr #0 {
  %12 = alloca [36 x i8], align 16
  %13 = getelementptr inbounds [36 x i8], [36 x i8]* %12, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %13) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 36, i1 false)
  call fastcc void @bilinear_filter4xh(i8* %0, i32 %1, i32 %2, i32 %3, i8* nonnull %13, i32 8)
  %14 = icmp eq i32 %9, 0
  %15 = sext i32 %5 to i64
  %16 = shl nsw i32 %5, 1
  %17 = sext i32 %16 to i64
  %18 = mul nsw i32 %5, 3
  %19 = sext i32 %18 to i64
  %20 = sext i32 %8 to i64
  %21 = shl nsw i32 %8, 1
  %22 = sext i32 %21 to i64
  %23 = mul nsw i32 %8, 3
  %24 = sext i32 %23 to i64
  %25 = shl nsw i32 %5, 2
  %26 = sext i32 %25 to i64
  %27 = shl nsw i32 %8, 2
  %28 = sext i32 %27 to i64
  %29 = bitcast i8* %4 to i32*
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds i8, i8* %4, i64 %15
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds i8, i8* %4, i64 %17
  %35 = bitcast i8* %34 to i32*
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr inbounds i8, i8* %4, i64 %19
  %38 = bitcast i8* %37 to i32*
  %39 = load i32, i32* %38, align 4
  %40 = insertelement <4 x i32> undef, i32 %30, i32 0
  %41 = insertelement <4 x i32> %40, i32 %33, i32 1
  %42 = insertelement <4 x i32> %41, i32 %36, i32 2
  %43 = insertelement <4 x i32> %42, i32 %39, i32 3
  br i1 %14, label %154, label %44

44:                                               ; preds = %11
  %45 = bitcast i8* %6 to <16 x i8>*
  %46 = load <16 x i8>, <16 x i8>* %45, align 1
  %47 = bitcast [36 x i8]* %12 to <16 x i8>*
  %48 = load <16 x i8>, <16 x i8>* %47, align 16
  %49 = bitcast i8* %7 to i32*
  %50 = load i32, i32* %49, align 4
  %51 = getelementptr inbounds i8, i8* %7, i64 %20
  %52 = bitcast i8* %51 to i32*
  %53 = load i32, i32* %52, align 4
  %54 = getelementptr inbounds i8, i8* %7, i64 %22
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 4
  %57 = getelementptr inbounds i8, i8* %7, i64 %24
  %58 = bitcast i8* %57 to i32*
  %59 = load i32, i32* %58, align 4
  %60 = insertelement <4 x i32> undef, i32 %50, i32 0
  %61 = insertelement <4 x i32> %60, i32 %53, i32 1
  %62 = insertelement <4 x i32> %61, i32 %56, i32 2
  %63 = insertelement <4 x i32> %62, i32 %59, i32 3
  %64 = bitcast <4 x i32> %63 to <16 x i8>
  %65 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %64
  %66 = shufflevector <16 x i8> %46, <16 x i8> %48, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %67 = shufflevector <16 x i8> %64, <16 x i8> %65, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %68 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %66, <16 x i8> %67) #5
  %69 = lshr <8 x i16> %68, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %70 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %69, <8 x i16> zeroinitializer) #5
  %71 = shufflevector <16 x i8> %46, <16 x i8> %48, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %72 = shufflevector <16 x i8> %64, <16 x i8> %65, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %73 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %71, <16 x i8> %72) #5
  %74 = lshr <8 x i16> %73, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %75 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %74, <8 x i16> zeroinitializer) #5
  %76 = bitcast <4 x i32> %43 to <16 x i8>
  %77 = shufflevector <16 x i8> %76, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %78 = shufflevector <16 x i8> %76, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %79 = bitcast <16 x i8> %77 to <8 x i16>
  %80 = sub <8 x i16> %70, %79
  %81 = bitcast <16 x i8> %78 to <8 x i16>
  %82 = sub <8 x i16> %75, %81
  %83 = add <8 x i16> %82, %80
  %84 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %83, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %85 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %80, <8 x i16> %80) #5
  %86 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %82, <8 x i16> %82) #5
  %87 = add <4 x i32> %85, %86
  %88 = getelementptr inbounds i8, i8* %4, i64 %26
  %89 = getelementptr inbounds i8, i8* %6, i64 16
  %90 = getelementptr inbounds [36 x i8], [36 x i8]* %12, i64 0, i64 16
  %91 = getelementptr inbounds i8, i8* %7, i64 %28
  %92 = bitcast i8* %88 to i32*
  %93 = load i32, i32* %92, align 4
  %94 = getelementptr inbounds i8, i8* %88, i64 %15
  %95 = bitcast i8* %94 to i32*
  %96 = load i32, i32* %95, align 4
  %97 = getelementptr inbounds i8, i8* %88, i64 %17
  %98 = bitcast i8* %97 to i32*
  %99 = load i32, i32* %98, align 4
  %100 = getelementptr inbounds i8, i8* %88, i64 %19
  %101 = bitcast i8* %100 to i32*
  %102 = load i32, i32* %101, align 4
  %103 = insertelement <4 x i32> undef, i32 %93, i32 0
  %104 = insertelement <4 x i32> %103, i32 %96, i32 1
  %105 = insertelement <4 x i32> %104, i32 %99, i32 2
  %106 = insertelement <4 x i32> %105, i32 %102, i32 3
  %107 = bitcast i8* %89 to <16 x i8>*
  %108 = load <16 x i8>, <16 x i8>* %107, align 1
  %109 = bitcast i8* %90 to <16 x i8>*
  %110 = load <16 x i8>, <16 x i8>* %109, align 16
  %111 = bitcast i8* %91 to i32*
  %112 = load i32, i32* %111, align 4
  %113 = getelementptr inbounds i8, i8* %91, i64 %20
  %114 = bitcast i8* %113 to i32*
  %115 = load i32, i32* %114, align 4
  %116 = getelementptr inbounds i8, i8* %91, i64 %22
  %117 = bitcast i8* %116 to i32*
  %118 = load i32, i32* %117, align 4
  %119 = getelementptr inbounds i8, i8* %91, i64 %24
  %120 = bitcast i8* %119 to i32*
  %121 = load i32, i32* %120, align 4
  %122 = insertelement <4 x i32> undef, i32 %112, i32 0
  %123 = insertelement <4 x i32> %122, i32 %115, i32 1
  %124 = insertelement <4 x i32> %123, i32 %118, i32 2
  %125 = insertelement <4 x i32> %124, i32 %121, i32 3
  %126 = bitcast <4 x i32> %125 to <16 x i8>
  %127 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %126
  %128 = shufflevector <16 x i8> %108, <16 x i8> %110, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %129 = shufflevector <16 x i8> %126, <16 x i8> %127, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %130 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %128, <16 x i8> %129) #5
  %131 = lshr <8 x i16> %130, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %132 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %131, <8 x i16> zeroinitializer) #5
  %133 = shufflevector <16 x i8> %108, <16 x i8> %110, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %134 = shufflevector <16 x i8> %126, <16 x i8> %127, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %135 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %133, <16 x i8> %134) #5
  %136 = lshr <8 x i16> %135, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %137 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %136, <8 x i16> zeroinitializer) #5
  %138 = bitcast <4 x i32> %106 to <16 x i8>
  %139 = shufflevector <16 x i8> %138, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %140 = shufflevector <16 x i8> %138, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %141 = bitcast <16 x i8> %139 to <8 x i16>
  %142 = sub <8 x i16> %132, %141
  %143 = bitcast <16 x i8> %140 to <8 x i16>
  %144 = sub <8 x i16> %137, %143
  %145 = add <8 x i16> %144, %142
  %146 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %145, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %147 = add <4 x i32> %146, %84
  %148 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %142, <8 x i16> %142) #5
  %149 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %144, <8 x i16> %144) #5
  %150 = add <4 x i32> %148, %87
  %151 = add <4 x i32> %150, %149
  %152 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %147, <4 x i32> %151) #5
  %153 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %152, <4 x i32> %152) #5
  br label %264

154:                                              ; preds = %11
  %155 = bitcast [36 x i8]* %12 to <16 x i8>*
  %156 = load <16 x i8>, <16 x i8>* %155, align 16
  %157 = bitcast i8* %6 to <16 x i8>*
  %158 = load <16 x i8>, <16 x i8>* %157, align 1
  %159 = bitcast i8* %7 to i32*
  %160 = load i32, i32* %159, align 4
  %161 = getelementptr inbounds i8, i8* %7, i64 %20
  %162 = bitcast i8* %161 to i32*
  %163 = load i32, i32* %162, align 4
  %164 = getelementptr inbounds i8, i8* %7, i64 %22
  %165 = bitcast i8* %164 to i32*
  %166 = load i32, i32* %165, align 4
  %167 = getelementptr inbounds i8, i8* %7, i64 %24
  %168 = bitcast i8* %167 to i32*
  %169 = load i32, i32* %168, align 4
  %170 = insertelement <4 x i32> undef, i32 %160, i32 0
  %171 = insertelement <4 x i32> %170, i32 %163, i32 1
  %172 = insertelement <4 x i32> %171, i32 %166, i32 2
  %173 = insertelement <4 x i32> %172, i32 %169, i32 3
  %174 = bitcast <4 x i32> %173 to <16 x i8>
  %175 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %174
  %176 = shufflevector <16 x i8> %156, <16 x i8> %158, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %177 = shufflevector <16 x i8> %174, <16 x i8> %175, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %178 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %176, <16 x i8> %177) #5
  %179 = lshr <8 x i16> %178, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %180 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %179, <8 x i16> zeroinitializer) #5
  %181 = shufflevector <16 x i8> %156, <16 x i8> %158, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %182 = shufflevector <16 x i8> %174, <16 x i8> %175, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %183 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %181, <16 x i8> %182) #5
  %184 = lshr <8 x i16> %183, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %185 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %184, <8 x i16> zeroinitializer) #5
  %186 = bitcast <4 x i32> %43 to <16 x i8>
  %187 = shufflevector <16 x i8> %186, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %188 = shufflevector <16 x i8> %186, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %189 = bitcast <16 x i8> %187 to <8 x i16>
  %190 = sub <8 x i16> %180, %189
  %191 = bitcast <16 x i8> %188 to <8 x i16>
  %192 = sub <8 x i16> %185, %191
  %193 = add <8 x i16> %192, %190
  %194 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %193, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %195 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %190, <8 x i16> %190) #5
  %196 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %192, <8 x i16> %192) #5
  %197 = add <4 x i32> %195, %196
  %198 = getelementptr inbounds i8, i8* %4, i64 %26
  %199 = getelementptr inbounds [36 x i8], [36 x i8]* %12, i64 0, i64 16
  %200 = getelementptr inbounds i8, i8* %6, i64 16
  %201 = getelementptr inbounds i8, i8* %7, i64 %28
  %202 = bitcast i8* %198 to i32*
  %203 = load i32, i32* %202, align 4
  %204 = getelementptr inbounds i8, i8* %198, i64 %15
  %205 = bitcast i8* %204 to i32*
  %206 = load i32, i32* %205, align 4
  %207 = getelementptr inbounds i8, i8* %198, i64 %17
  %208 = bitcast i8* %207 to i32*
  %209 = load i32, i32* %208, align 4
  %210 = getelementptr inbounds i8, i8* %198, i64 %19
  %211 = bitcast i8* %210 to i32*
  %212 = load i32, i32* %211, align 4
  %213 = insertelement <4 x i32> undef, i32 %203, i32 0
  %214 = insertelement <4 x i32> %213, i32 %206, i32 1
  %215 = insertelement <4 x i32> %214, i32 %209, i32 2
  %216 = insertelement <4 x i32> %215, i32 %212, i32 3
  %217 = bitcast i8* %199 to <16 x i8>*
  %218 = load <16 x i8>, <16 x i8>* %217, align 16
  %219 = bitcast i8* %200 to <16 x i8>*
  %220 = load <16 x i8>, <16 x i8>* %219, align 1
  %221 = bitcast i8* %201 to i32*
  %222 = load i32, i32* %221, align 4
  %223 = getelementptr inbounds i8, i8* %201, i64 %20
  %224 = bitcast i8* %223 to i32*
  %225 = load i32, i32* %224, align 4
  %226 = getelementptr inbounds i8, i8* %201, i64 %22
  %227 = bitcast i8* %226 to i32*
  %228 = load i32, i32* %227, align 4
  %229 = getelementptr inbounds i8, i8* %201, i64 %24
  %230 = bitcast i8* %229 to i32*
  %231 = load i32, i32* %230, align 4
  %232 = insertelement <4 x i32> undef, i32 %222, i32 0
  %233 = insertelement <4 x i32> %232, i32 %225, i32 1
  %234 = insertelement <4 x i32> %233, i32 %228, i32 2
  %235 = insertelement <4 x i32> %234, i32 %231, i32 3
  %236 = bitcast <4 x i32> %235 to <16 x i8>
  %237 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %236
  %238 = shufflevector <16 x i8> %218, <16 x i8> %220, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %239 = shufflevector <16 x i8> %236, <16 x i8> %237, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %240 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %238, <16 x i8> %239) #5
  %241 = lshr <8 x i16> %240, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %242 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %241, <8 x i16> zeroinitializer) #5
  %243 = shufflevector <16 x i8> %218, <16 x i8> %220, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %244 = shufflevector <16 x i8> %236, <16 x i8> %237, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %245 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %243, <16 x i8> %244) #5
  %246 = lshr <8 x i16> %245, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %247 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %246, <8 x i16> zeroinitializer) #5
  %248 = bitcast <4 x i32> %216 to <16 x i8>
  %249 = shufflevector <16 x i8> %248, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %250 = shufflevector <16 x i8> %248, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %251 = bitcast <16 x i8> %249 to <8 x i16>
  %252 = sub <8 x i16> %242, %251
  %253 = bitcast <16 x i8> %250 to <8 x i16>
  %254 = sub <8 x i16> %247, %253
  %255 = add <8 x i16> %254, %252
  %256 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %255, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %257 = add <4 x i32> %256, %194
  %258 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %252, <8 x i16> %252) #5
  %259 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %254, <8 x i16> %254) #5
  %260 = add <4 x i32> %258, %197
  %261 = add <4 x i32> %260, %259
  %262 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %257, <4 x i32> %261) #5
  %263 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %262, <4 x i32> %262) #5
  br label %264

264:                                              ; preds = %44, %154
  %265 = phi <4 x i32> [ %153, %44 ], [ %263, %154 ]
  %266 = extractelement <4 x i32> %265, i32 0
  %267 = bitcast <4 x i32> %265 to <16 x i8>
  %268 = shufflevector <16 x i8> %267, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %269 = bitcast <16 x i8> %268 to <4 x i32>
  %270 = extractelement <4 x i32> %269, i32 0
  store i32 %270, i32* %10, align 4
  %271 = sext i32 %266 to i64
  %272 = mul nsw i64 %271, %271
  %273 = lshr i64 %272, 5
  %274 = trunc i64 %273 to i32
  %275 = sub i32 %270, %274
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %13) #5
  ret i32 %275
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @bilinear_filter4xh(i8* nocapture readonly, i32, i32, i32, i8* nocapture, i32) unnamed_addr #0 {
  switch i32 %2, label %99 [
    i32 0, label %16
    i32 4, label %7
  ]

7:                                                ; preds = %6
  %8 = icmp slt i32 %5, 0
  br i1 %8, label %229, label %9

9:                                                ; preds = %7
  %10 = sext i32 %1 to i64
  %11 = add i32 %5, 1
  %12 = and i32 %11, 1
  %13 = icmp eq i32 %5, 0
  br i1 %13, label %215, label %14

14:                                               ; preds = %9
  %15 = sub i32 %11, %12
  br label %71

16:                                               ; preds = %6
  %17 = icmp slt i32 %5, 0
  br i1 %17, label %229, label %18

18:                                               ; preds = %16
  %19 = sext i32 %1 to i64
  %20 = add i32 %5, 1
  %21 = and i32 %20, 7
  %22 = icmp ult i32 %5, 7
  br i1 %22, label %200, label %23

23:                                               ; preds = %18
  %24 = sub i32 %20, %21
  br label %25

25:                                               ; preds = %25, %23
  %26 = phi i8* [ %0, %23 ], [ %67, %25 ]
  %27 = phi i8* [ %4, %23 ], [ %68, %25 ]
  %28 = phi i32 [ %24, %23 ], [ %69, %25 ]
  %29 = bitcast i8* %26 to i32*
  %30 = load i32, i32* %29, align 1
  %31 = bitcast i8* %27 to i32*
  store i32 %30, i32* %31, align 1
  %32 = getelementptr inbounds i8, i8* %26, i64 %19
  %33 = getelementptr inbounds i8, i8* %27, i64 4
  %34 = bitcast i8* %32 to i32*
  %35 = load i32, i32* %34, align 1
  %36 = bitcast i8* %33 to i32*
  store i32 %35, i32* %36, align 1
  %37 = getelementptr inbounds i8, i8* %32, i64 %19
  %38 = getelementptr inbounds i8, i8* %27, i64 8
  %39 = bitcast i8* %37 to i32*
  %40 = load i32, i32* %39, align 1
  %41 = bitcast i8* %38 to i32*
  store i32 %40, i32* %41, align 1
  %42 = getelementptr inbounds i8, i8* %37, i64 %19
  %43 = getelementptr inbounds i8, i8* %27, i64 12
  %44 = bitcast i8* %42 to i32*
  %45 = load i32, i32* %44, align 1
  %46 = bitcast i8* %43 to i32*
  store i32 %45, i32* %46, align 1
  %47 = getelementptr inbounds i8, i8* %42, i64 %19
  %48 = getelementptr inbounds i8, i8* %27, i64 16
  %49 = bitcast i8* %47 to i32*
  %50 = load i32, i32* %49, align 1
  %51 = bitcast i8* %48 to i32*
  store i32 %50, i32* %51, align 1
  %52 = getelementptr inbounds i8, i8* %47, i64 %19
  %53 = getelementptr inbounds i8, i8* %27, i64 20
  %54 = bitcast i8* %52 to i32*
  %55 = load i32, i32* %54, align 1
  %56 = bitcast i8* %53 to i32*
  store i32 %55, i32* %56, align 1
  %57 = getelementptr inbounds i8, i8* %52, i64 %19
  %58 = getelementptr inbounds i8, i8* %27, i64 24
  %59 = bitcast i8* %57 to i32*
  %60 = load i32, i32* %59, align 1
  %61 = bitcast i8* %58 to i32*
  store i32 %60, i32* %61, align 1
  %62 = getelementptr inbounds i8, i8* %57, i64 %19
  %63 = getelementptr inbounds i8, i8* %27, i64 28
  %64 = bitcast i8* %62 to i32*
  %65 = load i32, i32* %64, align 1
  %66 = bitcast i8* %63 to i32*
  store i32 %65, i32* %66, align 1
  %67 = getelementptr inbounds i8, i8* %62, i64 %19
  %68 = getelementptr inbounds i8, i8* %27, i64 32
  %69 = add i32 %28, -8
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %200, label %25

71:                                               ; preds = %71, %14
  %72 = phi i8* [ %0, %14 ], [ %95, %71 ]
  %73 = phi i8* [ %4, %14 ], [ %96, %71 ]
  %74 = phi i32 [ %15, %14 ], [ %97, %71 ]
  %75 = bitcast i8* %72 to i64*
  %76 = load i64, i64* %75, align 1
  %77 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %76, i32 0
  %78 = bitcast <2 x i64> %77 to <16 x i8>
  %79 = shufflevector <16 x i8> %78, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %80 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %78, <16 x i8> %79) #5
  %81 = bitcast <16 x i8> %80 to <4 x i32>
  %82 = extractelement <4 x i32> %81, i32 0
  %83 = bitcast i8* %73 to i32*
  store i32 %82, i32* %83, align 1
  %84 = getelementptr inbounds i8, i8* %72, i64 %10
  %85 = getelementptr inbounds i8, i8* %73, i64 4
  %86 = bitcast i8* %84 to i64*
  %87 = load i64, i64* %86, align 1
  %88 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %87, i32 0
  %89 = bitcast <2 x i64> %88 to <16 x i8>
  %90 = shufflevector <16 x i8> %89, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %91 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %89, <16 x i8> %90) #5
  %92 = bitcast <16 x i8> %91 to <4 x i32>
  %93 = extractelement <4 x i32> %92, i32 0
  %94 = bitcast i8* %85 to i32*
  store i32 %93, i32* %94, align 1
  %95 = getelementptr inbounds i8, i8* %84, i64 %10
  %96 = getelementptr inbounds i8, i8* %73, i64 8
  %97 = add i32 %74, -2
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %215, label %71

99:                                               ; preds = %6
  %100 = sext i32 %2 to i64
  %101 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters_2t, i64 0, i64 %100, i64 0
  %102 = load i8, i8* %101, align 2
  %103 = zext i8 %102 to i16
  %104 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters_2t, i64 0, i64 %100, i64 1
  %105 = load i8, i8* %104, align 1
  %106 = zext i8 %105 to i16
  %107 = shl nuw i16 %106, 8
  %108 = or i16 %107, %103
  %109 = insertelement <8 x i16> undef, i16 %108, i32 0
  %110 = shufflevector <8 x i16> %109, <8 x i16> undef, <8 x i32> zeroinitializer
  %111 = icmp sgt i32 %5, 0
  %112 = bitcast i8* %0 to i64*
  %113 = load i64, i64* %112, align 1
  %114 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %113, i32 0
  %115 = bitcast <2 x i64> %114 to <16 x i8>
  %116 = shufflevector <16 x i8> %115, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  br i1 %111, label %119, label %117

117:                                              ; preds = %99
  %118 = bitcast <8 x i16> %110 to <16 x i8>
  br label %187

119:                                              ; preds = %99
  %120 = sext i32 %1 to i64
  %121 = shl nsw i32 %1, 1
  %122 = sext i32 %121 to i64
  %123 = mul nsw i32 %1, 3
  %124 = sext i32 %123 to i64
  %125 = bitcast <8 x i16> %110 to <16 x i8>
  %126 = shl nsw i32 %1, 2
  %127 = sext i32 %126 to i64
  br label %128

128:                                              ; preds = %119, %128
  %129 = phi <16 x i8> [ %116, %119 ], [ %186, %128 ]
  %130 = phi <2 x i64> [ %114, %119 ], [ %184, %128 ]
  %131 = phi i8* [ %0, %119 ], [ %178, %128 ]
  %132 = phi i32 [ 0, %119 ], [ %180, %128 ]
  %133 = phi i8* [ %4, %119 ], [ %179, %128 ]
  %134 = getelementptr inbounds i8, i8* %131, i64 %120
  %135 = bitcast i8* %134 to i64*
  %136 = load i64, i64* %135, align 1
  %137 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %136, i32 0
  %138 = bitcast <2 x i64> %137 to <16 x i8>
  %139 = shufflevector <16 x i8> %138, <16 x i8> undef, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %140 = getelementptr inbounds i8, i8* %131, i64 %122
  %141 = bitcast i8* %140 to i64*
  %142 = load i64, i64* %141, align 1
  %143 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %142, i32 0
  %144 = bitcast <2 x i64> %143 to <16 x i8>
  %145 = shufflevector <16 x i8> %144, <16 x i8> undef, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %146 = getelementptr inbounds i8, i8* %131, i64 %124
  %147 = bitcast i8* %146 to i64*
  %148 = load i64, i64* %147, align 1
  %149 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %148, i32 0
  %150 = bitcast <2 x i64> %149 to <16 x i8>
  %151 = shufflevector <16 x i8> %150, <16 x i8> undef, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %152 = bitcast <2 x i64> %130 to <4 x i32>
  %153 = bitcast <2 x i64> %137 to <4 x i32>
  %154 = shufflevector <4 x i32> %152, <4 x i32> %153, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %155 = bitcast <16 x i8> %129 to <4 x i32>
  %156 = bitcast <16 x i8> %139 to <4 x i32>
  %157 = shufflevector <4 x i32> %155, <4 x i32> %156, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %158 = bitcast <2 x i64> %143 to <4 x i32>
  %159 = bitcast <2 x i64> %149 to <4 x i32>
  %160 = shufflevector <4 x i32> %158, <4 x i32> %159, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %161 = bitcast <16 x i8> %145 to <4 x i32>
  %162 = bitcast <16 x i8> %151 to <4 x i32>
  %163 = shufflevector <4 x i32> %161, <4 x i32> %162, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %164 = bitcast <4 x i32> %154 to <16 x i8>
  %165 = bitcast <4 x i32> %157 to <16 x i8>
  %166 = shufflevector <16 x i8> %164, <16 x i8> %165, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %167 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %166, <16 x i8> %125) #5
  %168 = lshr <8 x i16> %167, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %169 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %168, <8 x i16> zeroinitializer) #5
  %170 = bitcast <4 x i32> %160 to <16 x i8>
  %171 = bitcast <4 x i32> %163 to <16 x i8>
  %172 = shufflevector <16 x i8> %170, <16 x i8> %171, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %173 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %172, <16 x i8> %125) #5
  %174 = lshr <8 x i16> %173, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %175 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %174, <8 x i16> zeroinitializer) #5
  %176 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %169, <8 x i16> %175) #5
  %177 = bitcast i8* %133 to <16 x i8>*
  store <16 x i8> %176, <16 x i8>* %177, align 1
  %178 = getelementptr inbounds i8, i8* %131, i64 %127
  %179 = getelementptr inbounds i8, i8* %133, i64 16
  %180 = add nuw nsw i32 %132, 4
  %181 = icmp slt i32 %180, %5
  %182 = bitcast i8* %178 to i64*
  %183 = load i64, i64* %182, align 1
  %184 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %183, i32 0
  %185 = bitcast <2 x i64> %184 to <16 x i8>
  %186 = shufflevector <16 x i8> %185, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  br i1 %181, label %128, label %187

187:                                              ; preds = %128, %117
  %188 = phi <16 x i8> [ %118, %117 ], [ %125, %128 ]
  %189 = phi i8* [ %4, %117 ], [ %179, %128 ]
  %190 = phi <16 x i8> [ %115, %117 ], [ %185, %128 ]
  %191 = phi <16 x i8> [ %116, %117 ], [ %186, %128 ]
  %192 = shufflevector <16 x i8> %190, <16 x i8> %191, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %193 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %192, <16 x i8> %188) #5
  %194 = lshr <8 x i16> %193, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %195 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %194, <8 x i16> zeroinitializer) #5
  %196 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %195, <8 x i16> undef) #5
  %197 = bitcast <16 x i8> %196 to <4 x i32>
  %198 = extractelement <4 x i32> %197, i32 0
  %199 = bitcast i8* %189 to i32*
  store i32 %198, i32* %199, align 1
  br label %229

200:                                              ; preds = %25, %18
  %201 = phi i8* [ %0, %18 ], [ %67, %25 ]
  %202 = phi i8* [ %4, %18 ], [ %68, %25 ]
  %203 = icmp eq i32 %21, 0
  br i1 %203, label %229, label %204

204:                                              ; preds = %200, %204
  %205 = phi i8* [ %211, %204 ], [ %201, %200 ]
  %206 = phi i8* [ %212, %204 ], [ %202, %200 ]
  %207 = phi i32 [ %213, %204 ], [ %21, %200 ]
  %208 = bitcast i8* %205 to i32*
  %209 = load i32, i32* %208, align 1
  %210 = bitcast i8* %206 to i32*
  store i32 %209, i32* %210, align 1
  %211 = getelementptr inbounds i8, i8* %205, i64 %19
  %212 = getelementptr inbounds i8, i8* %206, i64 4
  %213 = add i32 %207, -1
  %214 = icmp eq i32 %213, 0
  br i1 %214, label %229, label %204, !llvm.loop !7

215:                                              ; preds = %71, %9
  %216 = phi i8* [ %0, %9 ], [ %95, %71 ]
  %217 = phi i8* [ %4, %9 ], [ %96, %71 ]
  %218 = icmp eq i32 %12, 0
  br i1 %218, label %229, label %219

219:                                              ; preds = %215
  %220 = bitcast i8* %216 to i64*
  %221 = load i64, i64* %220, align 1
  %222 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %221, i32 0
  %223 = bitcast <2 x i64> %222 to <16 x i8>
  %224 = shufflevector <16 x i8> %223, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %225 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %223, <16 x i8> %224) #5
  %226 = bitcast <16 x i8> %225 to <4 x i32>
  %227 = extractelement <4 x i32> %226, i32 0
  %228 = bitcast i8* %217 to i32*
  store i32 %227, i32* %228, align 1
  br label %229

229:                                              ; preds = %219, %215, %200, %204, %7, %16, %187
  switch i32 %3, label %267 [
    i32 0, label %334
    i32 4, label %230
  ]

230:                                              ; preds = %229
  %231 = icmp sgt i32 %5, 0
  br i1 %231, label %232, label %334

232:                                              ; preds = %230
  %233 = bitcast i8* %4 to i32*
  %234 = load i32, i32* %233, align 1
  %235 = and i32 %5, 1
  %236 = icmp eq i32 %5, 1
  br i1 %236, label %318, label %237

237:                                              ; preds = %232
  %238 = sub i32 %5, %235
  br label %239

239:                                              ; preds = %239, %237
  %240 = phi i32 [ %234, %237 ], [ %258, %239 ]
  %241 = phi i8* [ %4, %237 ], [ %256, %239 ]
  %242 = phi i32 [ %238, %237 ], [ %265, %239 ]
  %243 = bitcast i8* %241 to i32*
  %244 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %240, i32 0
  %245 = getelementptr inbounds i8, i8* %241, i64 4
  %246 = bitcast i8* %245 to i32*
  %247 = load i32, i32* %246, align 1
  %248 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %247, i32 0
  %249 = bitcast <4 x i32> %244 to <16 x i8>
  %250 = bitcast <4 x i32> %248 to <16 x i8>
  %251 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %249, <16 x i8> %250) #5
  %252 = bitcast <16 x i8> %251 to <4 x i32>
  %253 = extractelement <4 x i32> %252, i32 0
  store i32 %253, i32* %243, align 1
  %254 = bitcast i8* %245 to i32*
  %255 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %247, i32 0
  %256 = getelementptr inbounds i8, i8* %241, i64 8
  %257 = bitcast i8* %256 to i32*
  %258 = load i32, i32* %257, align 1
  %259 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %258, i32 0
  %260 = bitcast <4 x i32> %255 to <16 x i8>
  %261 = bitcast <4 x i32> %259 to <16 x i8>
  %262 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %260, <16 x i8> %261) #5
  %263 = bitcast <16 x i8> %262 to <4 x i32>
  %264 = extractelement <4 x i32> %263, i32 0
  store i32 %264, i32* %254, align 1
  %265 = add i32 %242, -2
  %266 = icmp eq i32 %265, 0
  br i1 %266, label %318, label %239

267:                                              ; preds = %229
  %268 = sext i32 %3 to i64
  %269 = icmp sgt i32 %5, 0
  br i1 %269, label %270, label %334

270:                                              ; preds = %267
  %271 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters_2t, i64 0, i64 %268, i64 1
  %272 = load i8, i8* %271, align 1
  %273 = zext i8 %272 to i16
  %274 = shl nuw i16 %273, 8
  %275 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters_2t, i64 0, i64 %268, i64 0
  %276 = load i8, i8* %275, align 2
  %277 = zext i8 %276 to i16
  %278 = or i16 %274, %277
  %279 = insertelement <8 x i16> undef, i16 %278, i32 0
  %280 = shufflevector <8 x i16> %279, <8 x i16> undef, <8 x i32> zeroinitializer
  %281 = bitcast <8 x i16> %280 to <16 x i8>
  %282 = bitcast i8* %4 to i32*
  %283 = load i32, i32* %282, align 1
  br label %284

284:                                              ; preds = %270, %284
  %285 = phi i32 [ %283, %270 ], [ %300, %284 ]
  %286 = phi i8* [ %4, %270 ], [ %294, %284 ]
  %287 = phi i32 [ 0, %270 ], [ %316, %284 ]
  %288 = insertelement <4 x i32> undef, i32 %285, i32 0
  %289 = getelementptr inbounds i8, i8* %286, i64 4
  %290 = bitcast i8* %289 to <2 x i32>*
  %291 = load <2 x i32>, <2 x i32>* %290, align 1
  %292 = shufflevector <2 x i32> %291, <2 x i32> undef, <4 x i32> <i32 0, i32 undef, i32 undef, i32 undef>
  %293 = getelementptr inbounds i8, i8* %286, i64 12
  %294 = getelementptr inbounds i8, i8* %286, i64 16
  %295 = bitcast i8* %293 to <2 x i32>*
  %296 = load <2 x i32>, <2 x i32>* %295, align 1
  %297 = shufflevector <4 x i32> %288, <4 x i32> %292, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %298 = shufflevector <2 x i32> %291, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %299 = shufflevector <2 x i32> %291, <2 x i32> %296, <4 x i32> <i32 1, i32 2, i32 undef, i32 undef>
  %300 = extractelement <2 x i32> %296, i32 1
  %301 = shufflevector <2 x i32> %296, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %302 = bitcast <4 x i32> %297 to <16 x i8>
  %303 = bitcast <4 x i32> %298 to <16 x i8>
  %304 = shufflevector <16 x i8> %302, <16 x i8> %303, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %305 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %304, <16 x i8> %281) #5
  %306 = lshr <8 x i16> %305, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %307 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %306, <8 x i16> zeroinitializer) #5
  %308 = bitcast <4 x i32> %299 to <16 x i8>
  %309 = bitcast <4 x i32> %301 to <16 x i8>
  %310 = shufflevector <16 x i8> %308, <16 x i8> %309, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %311 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %310, <16 x i8> %281) #5
  %312 = lshr <8 x i16> %311, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %313 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %312, <8 x i16> zeroinitializer) #5
  %314 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %307, <8 x i16> %313) #5
  %315 = bitcast i8* %286 to <16 x i8>*
  store <16 x i8> %314, <16 x i8>* %315, align 1
  %316 = add nuw nsw i32 %287, 4
  %317 = icmp slt i32 %316, %5
  br i1 %317, label %284, label %334

318:                                              ; preds = %239, %232
  %319 = phi i32 [ %234, %232 ], [ %258, %239 ]
  %320 = phi i8* [ %4, %232 ], [ %256, %239 ]
  %321 = icmp eq i32 %235, 0
  br i1 %321, label %334, label %322

322:                                              ; preds = %318
  %323 = bitcast i8* %320 to i32*
  %324 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %319, i32 0
  %325 = getelementptr inbounds i8, i8* %320, i64 4
  %326 = bitcast i8* %325 to i32*
  %327 = load i32, i32* %326, align 1
  %328 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %327, i32 0
  %329 = bitcast <4 x i32> %324 to <16 x i8>
  %330 = bitcast <4 x i32> %328 to <16 x i8>
  %331 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %329, <16 x i8> %330) #5
  %332 = bitcast <16 x i8> %331 to <4 x i32>
  %333 = extractelement <4 x i32> %332, i32 0
  store i32 %333, i32* %323, align 1
  br label %334

334:                                              ; preds = %322, %318, %284, %230, %267, %229
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @aom_masked_sub_pixel_variance4x4_ssse3(i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32, i32* nocapture) local_unnamed_addr #0 {
  %12 = alloca [20 x i8], align 16
  %13 = getelementptr inbounds [20 x i8], [20 x i8]* %12, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %13) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 20, i1 false)
  call fastcc void @bilinear_filter4xh(i8* %0, i32 %1, i32 %2, i32 %3, i8* nonnull %13, i32 4)
  %14 = icmp eq i32 %9, 0
  %15 = sext i32 %5 to i64
  %16 = shl nsw i32 %5, 1
  %17 = sext i32 %16 to i64
  %18 = mul nsw i32 %5, 3
  %19 = sext i32 %18 to i64
  %20 = sext i32 %8 to i64
  %21 = shl nsw i32 %8, 1
  %22 = sext i32 %21 to i64
  %23 = mul nsw i32 %8, 3
  %24 = sext i32 %23 to i64
  %25 = bitcast i8* %4 to i32*
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds i8, i8* %4, i64 %15
  %28 = bitcast i8* %27 to i32*
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds i8, i8* %4, i64 %17
  %31 = bitcast i8* %30 to i32*
  %32 = load i32, i32* %31, align 4
  %33 = getelementptr inbounds i8, i8* %4, i64 %19
  %34 = bitcast i8* %33 to i32*
  %35 = load i32, i32* %34, align 4
  %36 = insertelement <4 x i32> undef, i32 %26, i32 0
  %37 = insertelement <4 x i32> %36, i32 %29, i32 1
  %38 = insertelement <4 x i32> %37, i32 %32, i32 2
  %39 = insertelement <4 x i32> %38, i32 %35, i32 3
  br i1 %14, label %40, label %86

40:                                               ; preds = %11
  %41 = bitcast [20 x i8]* %12 to <16 x i8>*
  %42 = load <16 x i8>, <16 x i8>* %41, align 16
  %43 = bitcast i8* %6 to <16 x i8>*
  %44 = load <16 x i8>, <16 x i8>* %43, align 1
  %45 = bitcast i8* %7 to i32*
  %46 = load i32, i32* %45, align 4
  %47 = getelementptr inbounds i8, i8* %7, i64 %20
  %48 = bitcast i8* %47 to i32*
  %49 = load i32, i32* %48, align 4
  %50 = getelementptr inbounds i8, i8* %7, i64 %22
  %51 = bitcast i8* %50 to i32*
  %52 = load i32, i32* %51, align 4
  %53 = getelementptr inbounds i8, i8* %7, i64 %24
  %54 = bitcast i8* %53 to i32*
  %55 = load i32, i32* %54, align 4
  %56 = insertelement <4 x i32> undef, i32 %46, i32 0
  %57 = insertelement <4 x i32> %56, i32 %49, i32 1
  %58 = insertelement <4 x i32> %57, i32 %52, i32 2
  %59 = insertelement <4 x i32> %58, i32 %55, i32 3
  %60 = bitcast <4 x i32> %59 to <16 x i8>
  %61 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %60
  %62 = shufflevector <16 x i8> %42, <16 x i8> %44, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %63 = shufflevector <16 x i8> %60, <16 x i8> %61, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %64 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %62, <16 x i8> %63) #5
  %65 = lshr <8 x i16> %64, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %66 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %65, <8 x i16> zeroinitializer) #5
  %67 = shufflevector <16 x i8> %42, <16 x i8> %44, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %68 = shufflevector <16 x i8> %60, <16 x i8> %61, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %69 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %67, <16 x i8> %68) #5
  %70 = lshr <8 x i16> %69, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %71 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %70, <8 x i16> zeroinitializer) #5
  %72 = bitcast <4 x i32> %39 to <16 x i8>
  %73 = shufflevector <16 x i8> %72, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %74 = shufflevector <16 x i8> %72, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %75 = bitcast <16 x i8> %73 to <8 x i16>
  %76 = sub <8 x i16> %66, %75
  %77 = bitcast <16 x i8> %74 to <8 x i16>
  %78 = sub <8 x i16> %71, %77
  %79 = add <8 x i16> %78, %76
  %80 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %79, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %81 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %76, <8 x i16> %76) #5
  %82 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %78, <8 x i16> %78) #5
  %83 = add <4 x i32> %82, %81
  %84 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %80, <4 x i32> %83) #5
  %85 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %84, <4 x i32> %84) #5
  br label %132

86:                                               ; preds = %11
  %87 = bitcast i8* %6 to <16 x i8>*
  %88 = load <16 x i8>, <16 x i8>* %87, align 1
  %89 = bitcast [20 x i8]* %12 to <16 x i8>*
  %90 = load <16 x i8>, <16 x i8>* %89, align 16
  %91 = bitcast i8* %7 to i32*
  %92 = load i32, i32* %91, align 4
  %93 = getelementptr inbounds i8, i8* %7, i64 %20
  %94 = bitcast i8* %93 to i32*
  %95 = load i32, i32* %94, align 4
  %96 = getelementptr inbounds i8, i8* %7, i64 %22
  %97 = bitcast i8* %96 to i32*
  %98 = load i32, i32* %97, align 4
  %99 = getelementptr inbounds i8, i8* %7, i64 %24
  %100 = bitcast i8* %99 to i32*
  %101 = load i32, i32* %100, align 4
  %102 = insertelement <4 x i32> undef, i32 %92, i32 0
  %103 = insertelement <4 x i32> %102, i32 %95, i32 1
  %104 = insertelement <4 x i32> %103, i32 %98, i32 2
  %105 = insertelement <4 x i32> %104, i32 %101, i32 3
  %106 = bitcast <4 x i32> %105 to <16 x i8>
  %107 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %106
  %108 = shufflevector <16 x i8> %88, <16 x i8> %90, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %109 = shufflevector <16 x i8> %106, <16 x i8> %107, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %110 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %108, <16 x i8> %109) #5
  %111 = lshr <8 x i16> %110, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %112 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %111, <8 x i16> zeroinitializer) #5
  %113 = shufflevector <16 x i8> %88, <16 x i8> %90, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %114 = shufflevector <16 x i8> %106, <16 x i8> %107, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %115 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %113, <16 x i8> %114) #5
  %116 = lshr <8 x i16> %115, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %117 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %116, <8 x i16> zeroinitializer) #5
  %118 = bitcast <4 x i32> %39 to <16 x i8>
  %119 = shufflevector <16 x i8> %118, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %120 = shufflevector <16 x i8> %118, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %121 = bitcast <16 x i8> %119 to <8 x i16>
  %122 = sub <8 x i16> %112, %121
  %123 = bitcast <16 x i8> %120 to <8 x i16>
  %124 = sub <8 x i16> %117, %123
  %125 = add <8 x i16> %124, %122
  %126 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %125, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %127 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %122, <8 x i16> %122) #5
  %128 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %124, <8 x i16> %124) #5
  %129 = add <4 x i32> %128, %127
  %130 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %126, <4 x i32> %129) #5
  %131 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %130, <4 x i32> %130) #5
  br label %132

132:                                              ; preds = %86, %40
  %133 = phi <4 x i32> [ %131, %86 ], [ %85, %40 ]
  %134 = extractelement <4 x i32> %133, i32 0
  %135 = bitcast <4 x i32> %133 to <16 x i8>
  %136 = shufflevector <16 x i8> %135, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %137 = bitcast <16 x i8> %136 to <4 x i32>
  %138 = extractelement <4 x i32> %137, i32 0
  store i32 %138, i32* %10, align 4
  %139 = sext i32 %134 to i64
  %140 = mul nsw i64 %139, %139
  %141 = lshr i64 %140, 4
  %142 = trunc i64 %141 to i32
  %143 = sub i32 %138, %142
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %13) #5
  ret i32 %143
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @aom_masked_sub_pixel_variance4x16_ssse3(i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32, i32* nocapture) local_unnamed_addr #0 {
  %12 = alloca [68 x i8], align 16
  %13 = getelementptr inbounds [68 x i8], [68 x i8]* %12, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %13) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 68, i1 false)
  call fastcc void @bilinear_filter4xh(i8* %0, i32 %1, i32 %2, i32 %3, i8* nonnull %13, i32 16)
  %14 = icmp eq i32 %9, 0
  %15 = sext i32 %5 to i64
  %16 = shl nsw i32 %5, 1
  %17 = sext i32 %16 to i64
  %18 = mul nsw i32 %5, 3
  %19 = sext i32 %18 to i64
  %20 = sext i32 %8 to i64
  %21 = shl nsw i32 %8, 1
  %22 = sext i32 %21 to i64
  %23 = mul nsw i32 %8, 3
  %24 = sext i32 %23 to i64
  %25 = shl nsw i32 %5, 2
  %26 = sext i32 %25 to i64
  %27 = shl nsw i32 %8, 2
  %28 = sext i32 %27 to i64
  br i1 %14, label %29, label %106

29:                                               ; preds = %11, %29
  %30 = phi i32 [ %101, %29 ], [ 0, %11 ]
  %31 = phi i8* [ %97, %29 ], [ %4, %11 ]
  %32 = phi i8* [ %98, %29 ], [ %13, %11 ]
  %33 = phi i8* [ %99, %29 ], [ %6, %11 ]
  %34 = phi i8* [ %100, %29 ], [ %7, %11 ]
  %35 = phi <4 x i32> [ %92, %29 ], [ zeroinitializer, %11 ]
  %36 = phi <4 x i32> [ %96, %29 ], [ zeroinitializer, %11 ]
  %37 = bitcast i8* %31 to i32*
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds i8, i8* %31, i64 %15
  %40 = bitcast i8* %39 to i32*
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr inbounds i8, i8* %31, i64 %17
  %43 = bitcast i8* %42 to i32*
  %44 = load i32, i32* %43, align 4
  %45 = getelementptr inbounds i8, i8* %31, i64 %19
  %46 = bitcast i8* %45 to i32*
  %47 = load i32, i32* %46, align 4
  %48 = insertelement <4 x i32> undef, i32 %38, i32 0
  %49 = insertelement <4 x i32> %48, i32 %41, i32 1
  %50 = insertelement <4 x i32> %49, i32 %44, i32 2
  %51 = insertelement <4 x i32> %50, i32 %47, i32 3
  %52 = bitcast i8* %32 to <16 x i8>*
  %53 = load <16 x i8>, <16 x i8>* %52, align 1
  %54 = bitcast i8* %33 to <16 x i8>*
  %55 = load <16 x i8>, <16 x i8>* %54, align 1
  %56 = bitcast i8* %34 to i32*
  %57 = load i32, i32* %56, align 4
  %58 = getelementptr inbounds i8, i8* %34, i64 %20
  %59 = bitcast i8* %58 to i32*
  %60 = load i32, i32* %59, align 4
  %61 = getelementptr inbounds i8, i8* %34, i64 %22
  %62 = bitcast i8* %61 to i32*
  %63 = load i32, i32* %62, align 4
  %64 = getelementptr inbounds i8, i8* %34, i64 %24
  %65 = bitcast i8* %64 to i32*
  %66 = load i32, i32* %65, align 4
  %67 = insertelement <4 x i32> undef, i32 %57, i32 0
  %68 = insertelement <4 x i32> %67, i32 %60, i32 1
  %69 = insertelement <4 x i32> %68, i32 %63, i32 2
  %70 = insertelement <4 x i32> %69, i32 %66, i32 3
  %71 = bitcast <4 x i32> %70 to <16 x i8>
  %72 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %71
  %73 = shufflevector <16 x i8> %53, <16 x i8> %55, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %74 = shufflevector <16 x i8> %71, <16 x i8> %72, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %75 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %73, <16 x i8> %74) #5
  %76 = lshr <8 x i16> %75, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %77 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %76, <8 x i16> zeroinitializer) #5
  %78 = shufflevector <16 x i8> %53, <16 x i8> %55, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %79 = shufflevector <16 x i8> %71, <16 x i8> %72, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %80 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %78, <16 x i8> %79) #5
  %81 = lshr <8 x i16> %80, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %82 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %81, <8 x i16> zeroinitializer) #5
  %83 = bitcast <4 x i32> %51 to <16 x i8>
  %84 = shufflevector <16 x i8> %83, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %85 = shufflevector <16 x i8> %83, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %86 = bitcast <16 x i8> %84 to <8 x i16>
  %87 = sub <8 x i16> %77, %86
  %88 = bitcast <16 x i8> %85 to <8 x i16>
  %89 = sub <8 x i16> %82, %88
  %90 = add <8 x i16> %89, %87
  %91 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %90, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %92 = add <4 x i32> %91, %35
  %93 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %87, <8 x i16> %87) #5
  %94 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %89, <8 x i16> %89) #5
  %95 = add <4 x i32> %93, %36
  %96 = add <4 x i32> %95, %94
  %97 = getelementptr inbounds i8, i8* %31, i64 %26
  %98 = getelementptr inbounds i8, i8* %32, i64 16
  %99 = getelementptr inbounds i8, i8* %33, i64 16
  %100 = getelementptr inbounds i8, i8* %34, i64 %28
  %101 = add nuw nsw i32 %30, 4
  %102 = icmp ult i32 %101, 16
  br i1 %102, label %29, label %103

103:                                              ; preds = %29
  %104 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %92, <4 x i32> %96) #5
  %105 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %104, <4 x i32> %104) #5
  br label %183

106:                                              ; preds = %11, %106
  %107 = phi i32 [ %178, %106 ], [ 0, %11 ]
  %108 = phi i8* [ %174, %106 ], [ %4, %11 ]
  %109 = phi i8* [ %175, %106 ], [ %6, %11 ]
  %110 = phi i8* [ %176, %106 ], [ %13, %11 ]
  %111 = phi i8* [ %177, %106 ], [ %7, %11 ]
  %112 = phi <4 x i32> [ %169, %106 ], [ zeroinitializer, %11 ]
  %113 = phi <4 x i32> [ %173, %106 ], [ zeroinitializer, %11 ]
  %114 = bitcast i8* %108 to i32*
  %115 = load i32, i32* %114, align 4
  %116 = getelementptr inbounds i8, i8* %108, i64 %15
  %117 = bitcast i8* %116 to i32*
  %118 = load i32, i32* %117, align 4
  %119 = getelementptr inbounds i8, i8* %108, i64 %17
  %120 = bitcast i8* %119 to i32*
  %121 = load i32, i32* %120, align 4
  %122 = getelementptr inbounds i8, i8* %108, i64 %19
  %123 = bitcast i8* %122 to i32*
  %124 = load i32, i32* %123, align 4
  %125 = insertelement <4 x i32> undef, i32 %115, i32 0
  %126 = insertelement <4 x i32> %125, i32 %118, i32 1
  %127 = insertelement <4 x i32> %126, i32 %121, i32 2
  %128 = insertelement <4 x i32> %127, i32 %124, i32 3
  %129 = bitcast i8* %109 to <16 x i8>*
  %130 = load <16 x i8>, <16 x i8>* %129, align 1
  %131 = bitcast i8* %110 to <16 x i8>*
  %132 = load <16 x i8>, <16 x i8>* %131, align 1
  %133 = bitcast i8* %111 to i32*
  %134 = load i32, i32* %133, align 4
  %135 = getelementptr inbounds i8, i8* %111, i64 %20
  %136 = bitcast i8* %135 to i32*
  %137 = load i32, i32* %136, align 4
  %138 = getelementptr inbounds i8, i8* %111, i64 %22
  %139 = bitcast i8* %138 to i32*
  %140 = load i32, i32* %139, align 4
  %141 = getelementptr inbounds i8, i8* %111, i64 %24
  %142 = bitcast i8* %141 to i32*
  %143 = load i32, i32* %142, align 4
  %144 = insertelement <4 x i32> undef, i32 %134, i32 0
  %145 = insertelement <4 x i32> %144, i32 %137, i32 1
  %146 = insertelement <4 x i32> %145, i32 %140, i32 2
  %147 = insertelement <4 x i32> %146, i32 %143, i32 3
  %148 = bitcast <4 x i32> %147 to <16 x i8>
  %149 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %148
  %150 = shufflevector <16 x i8> %130, <16 x i8> %132, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %151 = shufflevector <16 x i8> %148, <16 x i8> %149, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %152 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %150, <16 x i8> %151) #5
  %153 = lshr <8 x i16> %152, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %154 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %153, <8 x i16> zeroinitializer) #5
  %155 = shufflevector <16 x i8> %130, <16 x i8> %132, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %156 = shufflevector <16 x i8> %148, <16 x i8> %149, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %157 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %155, <16 x i8> %156) #5
  %158 = lshr <8 x i16> %157, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %159 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %158, <8 x i16> zeroinitializer) #5
  %160 = bitcast <4 x i32> %128 to <16 x i8>
  %161 = shufflevector <16 x i8> %160, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %162 = shufflevector <16 x i8> %160, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %163 = bitcast <16 x i8> %161 to <8 x i16>
  %164 = sub <8 x i16> %154, %163
  %165 = bitcast <16 x i8> %162 to <8 x i16>
  %166 = sub <8 x i16> %159, %165
  %167 = add <8 x i16> %166, %164
  %168 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %167, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %169 = add <4 x i32> %168, %112
  %170 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %164, <8 x i16> %164) #5
  %171 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %166, <8 x i16> %166) #5
  %172 = add <4 x i32> %170, %113
  %173 = add <4 x i32> %172, %171
  %174 = getelementptr inbounds i8, i8* %108, i64 %26
  %175 = getelementptr inbounds i8, i8* %109, i64 16
  %176 = getelementptr inbounds i8, i8* %110, i64 16
  %177 = getelementptr inbounds i8, i8* %111, i64 %28
  %178 = add nuw nsw i32 %107, 4
  %179 = icmp ult i32 %178, 16
  br i1 %179, label %106, label %180

180:                                              ; preds = %106
  %181 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %169, <4 x i32> %173) #5
  %182 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %181, <4 x i32> %181) #5
  br label %183

183:                                              ; preds = %180, %103
  %184 = phi <4 x i32> [ %182, %180 ], [ %105, %103 ]
  %185 = extractelement <4 x i32> %184, i32 0
  %186 = bitcast <4 x i32> %184 to <16 x i8>
  %187 = shufflevector <16 x i8> %186, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %188 = bitcast <16 x i8> %187 to <4 x i32>
  %189 = extractelement <4 x i32> %188, i32 0
  store i32 %189, i32* %10, align 4
  %190 = sext i32 %185 to i64
  %191 = mul nsw i64 %190, %190
  %192 = lshr i64 %191, 6
  %193 = trunc i64 %192 to i32
  %194 = sub i32 %189, %193
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %13) #5
  ret i32 %194
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @aom_masked_sub_pixel_variance16x4_ssse3(i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32, i32* nocapture) local_unnamed_addr #0 {
  %12 = alloca [80 x i8], align 16
  %13 = getelementptr inbounds [80 x i8], [80 x i8]* %12, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %13) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 80, i1 false)
  call fastcc void @bilinear_filter(i8* %0, i32 %1, i32 %2, i32 %3, i8* nonnull %13, i32 16, i32 4)
  %14 = icmp eq i32 %9, 0
  %15 = sext i32 %5 to i64
  %16 = sext i32 %8 to i64
  %17 = bitcast i8* %4 to <16 x i8>*
  %18 = load <16 x i8>, <16 x i8>* %17, align 1
  br i1 %14, label %158, label %19

19:                                               ; preds = %11
  %20 = bitcast i8* %6 to <16 x i8>*
  %21 = load <16 x i8>, <16 x i8>* %20, align 1
  %22 = bitcast [80 x i8]* %12 to <16 x i8>*
  %23 = load <16 x i8>, <16 x i8>* %22, align 16
  %24 = bitcast i8* %7 to <16 x i8>*
  %25 = load <16 x i8>, <16 x i8>* %24, align 1
  %26 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %25
  %27 = shufflevector <16 x i8> %21, <16 x i8> %23, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %28 = shufflevector <16 x i8> %25, <16 x i8> %26, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %29 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %27, <16 x i8> %28) #5
  %30 = lshr <8 x i16> %29, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %31 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %30, <8 x i16> zeroinitializer) #5
  %32 = shufflevector <16 x i8> %21, <16 x i8> %23, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %33 = shufflevector <16 x i8> %25, <16 x i8> %26, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %34 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %32, <16 x i8> %33) #5
  %35 = lshr <8 x i16> %34, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %36 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %35, <8 x i16> zeroinitializer) #5
  %37 = shufflevector <16 x i8> %18, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %38 = shufflevector <16 x i8> %18, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %39 = bitcast <16 x i8> %37 to <8 x i16>
  %40 = sub <8 x i16> %31, %39
  %41 = bitcast <16 x i8> %38 to <8 x i16>
  %42 = sub <8 x i16> %36, %41
  %43 = add <8 x i16> %42, %40
  %44 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %43, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %45 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %40, <8 x i16> %40) #5
  %46 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %42, <8 x i16> %42) #5
  %47 = add <4 x i32> %45, %46
  %48 = getelementptr inbounds i8, i8* %4, i64 %15
  %49 = getelementptr inbounds i8, i8* %6, i64 16
  %50 = getelementptr inbounds [80 x i8], [80 x i8]* %12, i64 0, i64 16
  %51 = getelementptr inbounds i8, i8* %7, i64 %16
  %52 = bitcast i8* %48 to <16 x i8>*
  %53 = load <16 x i8>, <16 x i8>* %52, align 1
  %54 = bitcast i8* %49 to <16 x i8>*
  %55 = load <16 x i8>, <16 x i8>* %54, align 1
  %56 = bitcast i8* %50 to <16 x i8>*
  %57 = load <16 x i8>, <16 x i8>* %56, align 16
  %58 = bitcast i8* %51 to <16 x i8>*
  %59 = load <16 x i8>, <16 x i8>* %58, align 1
  %60 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %59
  %61 = shufflevector <16 x i8> %55, <16 x i8> %57, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %62 = shufflevector <16 x i8> %59, <16 x i8> %60, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %63 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %61, <16 x i8> %62) #5
  %64 = lshr <8 x i16> %63, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %65 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %64, <8 x i16> zeroinitializer) #5
  %66 = shufflevector <16 x i8> %55, <16 x i8> %57, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %67 = shufflevector <16 x i8> %59, <16 x i8> %60, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %68 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %66, <16 x i8> %67) #5
  %69 = lshr <8 x i16> %68, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %70 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %69, <8 x i16> zeroinitializer) #5
  %71 = shufflevector <16 x i8> %53, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %72 = shufflevector <16 x i8> %53, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %73 = bitcast <16 x i8> %71 to <8 x i16>
  %74 = sub <8 x i16> %65, %73
  %75 = bitcast <16 x i8> %72 to <8 x i16>
  %76 = sub <8 x i16> %70, %75
  %77 = add <8 x i16> %76, %74
  %78 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %77, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %79 = add <4 x i32> %78, %44
  %80 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %74, <8 x i16> %74) #5
  %81 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %76, <8 x i16> %76) #5
  %82 = add <4 x i32> %80, %47
  %83 = add <4 x i32> %82, %81
  %84 = getelementptr inbounds i8, i8* %48, i64 %15
  %85 = getelementptr inbounds i8, i8* %6, i64 32
  %86 = getelementptr inbounds [80 x i8], [80 x i8]* %12, i64 0, i64 32
  %87 = getelementptr inbounds i8, i8* %51, i64 %16
  %88 = bitcast i8* %84 to <16 x i8>*
  %89 = load <16 x i8>, <16 x i8>* %88, align 1
  %90 = bitcast i8* %85 to <16 x i8>*
  %91 = load <16 x i8>, <16 x i8>* %90, align 1
  %92 = bitcast i8* %86 to <16 x i8>*
  %93 = load <16 x i8>, <16 x i8>* %92, align 16
  %94 = bitcast i8* %87 to <16 x i8>*
  %95 = load <16 x i8>, <16 x i8>* %94, align 1
  %96 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %95
  %97 = shufflevector <16 x i8> %91, <16 x i8> %93, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %98 = shufflevector <16 x i8> %95, <16 x i8> %96, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %99 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %97, <16 x i8> %98) #5
  %100 = lshr <8 x i16> %99, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %101 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %100, <8 x i16> zeroinitializer) #5
  %102 = shufflevector <16 x i8> %91, <16 x i8> %93, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %103 = shufflevector <16 x i8> %95, <16 x i8> %96, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %104 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %102, <16 x i8> %103) #5
  %105 = lshr <8 x i16> %104, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %106 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %105, <8 x i16> zeroinitializer) #5
  %107 = shufflevector <16 x i8> %89, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %108 = shufflevector <16 x i8> %89, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %109 = bitcast <16 x i8> %107 to <8 x i16>
  %110 = sub <8 x i16> %101, %109
  %111 = bitcast <16 x i8> %108 to <8 x i16>
  %112 = sub <8 x i16> %106, %111
  %113 = add <8 x i16> %112, %110
  %114 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %113, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %115 = add <4 x i32> %114, %79
  %116 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %110, <8 x i16> %110) #5
  %117 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %112, <8 x i16> %112) #5
  %118 = add <4 x i32> %116, %83
  %119 = add <4 x i32> %118, %117
  %120 = getelementptr inbounds i8, i8* %84, i64 %15
  %121 = getelementptr inbounds i8, i8* %6, i64 48
  %122 = getelementptr inbounds [80 x i8], [80 x i8]* %12, i64 0, i64 48
  %123 = getelementptr inbounds i8, i8* %87, i64 %16
  %124 = bitcast i8* %120 to <16 x i8>*
  %125 = load <16 x i8>, <16 x i8>* %124, align 1
  %126 = bitcast i8* %121 to <16 x i8>*
  %127 = load <16 x i8>, <16 x i8>* %126, align 1
  %128 = bitcast i8* %122 to <16 x i8>*
  %129 = load <16 x i8>, <16 x i8>* %128, align 16
  %130 = bitcast i8* %123 to <16 x i8>*
  %131 = load <16 x i8>, <16 x i8>* %130, align 1
  %132 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %131
  %133 = shufflevector <16 x i8> %127, <16 x i8> %129, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %134 = shufflevector <16 x i8> %131, <16 x i8> %132, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %135 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %133, <16 x i8> %134) #5
  %136 = lshr <8 x i16> %135, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %137 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %136, <8 x i16> zeroinitializer) #5
  %138 = shufflevector <16 x i8> %127, <16 x i8> %129, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %139 = shufflevector <16 x i8> %131, <16 x i8> %132, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %140 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %138, <16 x i8> %139) #5
  %141 = lshr <8 x i16> %140, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %142 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %141, <8 x i16> zeroinitializer) #5
  %143 = shufflevector <16 x i8> %125, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %144 = shufflevector <16 x i8> %125, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %145 = bitcast <16 x i8> %143 to <8 x i16>
  %146 = sub <8 x i16> %137, %145
  %147 = bitcast <16 x i8> %144 to <8 x i16>
  %148 = sub <8 x i16> %142, %147
  %149 = add <8 x i16> %148, %146
  %150 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %149, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %151 = add <4 x i32> %150, %115
  %152 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %146, <8 x i16> %146) #5
  %153 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %148, <8 x i16> %148) #5
  %154 = add <4 x i32> %152, %119
  %155 = add <4 x i32> %154, %153
  %156 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %151, <4 x i32> %155) #5
  %157 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %156, <4 x i32> %156) #5
  br label %297

158:                                              ; preds = %11
  %159 = bitcast [80 x i8]* %12 to <16 x i8>*
  %160 = load <16 x i8>, <16 x i8>* %159, align 16
  %161 = bitcast i8* %6 to <16 x i8>*
  %162 = load <16 x i8>, <16 x i8>* %161, align 1
  %163 = bitcast i8* %7 to <16 x i8>*
  %164 = load <16 x i8>, <16 x i8>* %163, align 1
  %165 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %164
  %166 = shufflevector <16 x i8> %160, <16 x i8> %162, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %167 = shufflevector <16 x i8> %164, <16 x i8> %165, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %168 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %166, <16 x i8> %167) #5
  %169 = lshr <8 x i16> %168, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %170 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %169, <8 x i16> zeroinitializer) #5
  %171 = shufflevector <16 x i8> %160, <16 x i8> %162, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %172 = shufflevector <16 x i8> %164, <16 x i8> %165, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %173 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %171, <16 x i8> %172) #5
  %174 = lshr <8 x i16> %173, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %175 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %174, <8 x i16> zeroinitializer) #5
  %176 = shufflevector <16 x i8> %18, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %177 = shufflevector <16 x i8> %18, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %178 = bitcast <16 x i8> %176 to <8 x i16>
  %179 = sub <8 x i16> %170, %178
  %180 = bitcast <16 x i8> %177 to <8 x i16>
  %181 = sub <8 x i16> %175, %180
  %182 = add <8 x i16> %181, %179
  %183 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %182, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %184 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %179, <8 x i16> %179) #5
  %185 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %181, <8 x i16> %181) #5
  %186 = add <4 x i32> %184, %185
  %187 = getelementptr inbounds i8, i8* %4, i64 %15
  %188 = getelementptr inbounds [80 x i8], [80 x i8]* %12, i64 0, i64 16
  %189 = getelementptr inbounds i8, i8* %6, i64 16
  %190 = getelementptr inbounds i8, i8* %7, i64 %16
  %191 = bitcast i8* %187 to <16 x i8>*
  %192 = load <16 x i8>, <16 x i8>* %191, align 1
  %193 = bitcast i8* %188 to <16 x i8>*
  %194 = load <16 x i8>, <16 x i8>* %193, align 16
  %195 = bitcast i8* %189 to <16 x i8>*
  %196 = load <16 x i8>, <16 x i8>* %195, align 1
  %197 = bitcast i8* %190 to <16 x i8>*
  %198 = load <16 x i8>, <16 x i8>* %197, align 1
  %199 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %198
  %200 = shufflevector <16 x i8> %194, <16 x i8> %196, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %201 = shufflevector <16 x i8> %198, <16 x i8> %199, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %202 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %200, <16 x i8> %201) #5
  %203 = lshr <8 x i16> %202, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %204 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %203, <8 x i16> zeroinitializer) #5
  %205 = shufflevector <16 x i8> %194, <16 x i8> %196, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %206 = shufflevector <16 x i8> %198, <16 x i8> %199, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %207 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %205, <16 x i8> %206) #5
  %208 = lshr <8 x i16> %207, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %209 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %208, <8 x i16> zeroinitializer) #5
  %210 = shufflevector <16 x i8> %192, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %211 = shufflevector <16 x i8> %192, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %212 = bitcast <16 x i8> %210 to <8 x i16>
  %213 = sub <8 x i16> %204, %212
  %214 = bitcast <16 x i8> %211 to <8 x i16>
  %215 = sub <8 x i16> %209, %214
  %216 = add <8 x i16> %215, %213
  %217 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %216, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %218 = add <4 x i32> %217, %183
  %219 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %213, <8 x i16> %213) #5
  %220 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %215, <8 x i16> %215) #5
  %221 = add <4 x i32> %219, %186
  %222 = add <4 x i32> %221, %220
  %223 = getelementptr inbounds i8, i8* %187, i64 %15
  %224 = getelementptr inbounds [80 x i8], [80 x i8]* %12, i64 0, i64 32
  %225 = getelementptr inbounds i8, i8* %6, i64 32
  %226 = getelementptr inbounds i8, i8* %190, i64 %16
  %227 = bitcast i8* %223 to <16 x i8>*
  %228 = load <16 x i8>, <16 x i8>* %227, align 1
  %229 = bitcast i8* %224 to <16 x i8>*
  %230 = load <16 x i8>, <16 x i8>* %229, align 16
  %231 = bitcast i8* %225 to <16 x i8>*
  %232 = load <16 x i8>, <16 x i8>* %231, align 1
  %233 = bitcast i8* %226 to <16 x i8>*
  %234 = load <16 x i8>, <16 x i8>* %233, align 1
  %235 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %234
  %236 = shufflevector <16 x i8> %230, <16 x i8> %232, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %237 = shufflevector <16 x i8> %234, <16 x i8> %235, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %238 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %236, <16 x i8> %237) #5
  %239 = lshr <8 x i16> %238, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %240 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %239, <8 x i16> zeroinitializer) #5
  %241 = shufflevector <16 x i8> %230, <16 x i8> %232, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %242 = shufflevector <16 x i8> %234, <16 x i8> %235, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %243 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %241, <16 x i8> %242) #5
  %244 = lshr <8 x i16> %243, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %245 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %244, <8 x i16> zeroinitializer) #5
  %246 = shufflevector <16 x i8> %228, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %247 = shufflevector <16 x i8> %228, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %248 = bitcast <16 x i8> %246 to <8 x i16>
  %249 = sub <8 x i16> %240, %248
  %250 = bitcast <16 x i8> %247 to <8 x i16>
  %251 = sub <8 x i16> %245, %250
  %252 = add <8 x i16> %251, %249
  %253 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %252, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %254 = add <4 x i32> %253, %218
  %255 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %249, <8 x i16> %249) #5
  %256 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %251, <8 x i16> %251) #5
  %257 = add <4 x i32> %255, %222
  %258 = add <4 x i32> %257, %256
  %259 = getelementptr inbounds i8, i8* %223, i64 %15
  %260 = getelementptr inbounds [80 x i8], [80 x i8]* %12, i64 0, i64 48
  %261 = getelementptr inbounds i8, i8* %6, i64 48
  %262 = getelementptr inbounds i8, i8* %226, i64 %16
  %263 = bitcast i8* %259 to <16 x i8>*
  %264 = load <16 x i8>, <16 x i8>* %263, align 1
  %265 = bitcast i8* %260 to <16 x i8>*
  %266 = load <16 x i8>, <16 x i8>* %265, align 16
  %267 = bitcast i8* %261 to <16 x i8>*
  %268 = load <16 x i8>, <16 x i8>* %267, align 1
  %269 = bitcast i8* %262 to <16 x i8>*
  %270 = load <16 x i8>, <16 x i8>* %269, align 1
  %271 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %270
  %272 = shufflevector <16 x i8> %266, <16 x i8> %268, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %273 = shufflevector <16 x i8> %270, <16 x i8> %271, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %274 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %272, <16 x i8> %273) #5
  %275 = lshr <8 x i16> %274, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %276 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %275, <8 x i16> zeroinitializer) #5
  %277 = shufflevector <16 x i8> %266, <16 x i8> %268, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %278 = shufflevector <16 x i8> %270, <16 x i8> %271, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %279 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %277, <16 x i8> %278) #5
  %280 = lshr <8 x i16> %279, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %281 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %280, <8 x i16> zeroinitializer) #5
  %282 = shufflevector <16 x i8> %264, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %283 = shufflevector <16 x i8> %264, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %284 = bitcast <16 x i8> %282 to <8 x i16>
  %285 = sub <8 x i16> %276, %284
  %286 = bitcast <16 x i8> %283 to <8 x i16>
  %287 = sub <8 x i16> %281, %286
  %288 = add <8 x i16> %287, %285
  %289 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %288, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %290 = add <4 x i32> %289, %254
  %291 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %285, <8 x i16> %285) #5
  %292 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %287, <8 x i16> %287) #5
  %293 = add <4 x i32> %291, %258
  %294 = add <4 x i32> %293, %292
  %295 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %290, <4 x i32> %294) #5
  %296 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %295, <4 x i32> %295) #5
  br label %297

297:                                              ; preds = %19, %158
  %298 = phi <4 x i32> [ %157, %19 ], [ %296, %158 ]
  %299 = extractelement <4 x i32> %298, i32 0
  %300 = bitcast <4 x i32> %298 to <16 x i8>
  %301 = shufflevector <16 x i8> %300, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %302 = bitcast <16 x i8> %301 to <4 x i32>
  %303 = extractelement <4 x i32> %302, i32 0
  store i32 %303, i32* %10, align 4
  %304 = sext i32 %299 to i64
  %305 = mul nsw i64 %304, %304
  %306 = lshr i64 %305, 6
  %307 = trunc i64 %306 to i32
  %308 = sub i32 %303, %307
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %13) #5
  ret i32 %308
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @aom_masked_sub_pixel_variance8x32_ssse3(i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32, i32* nocapture) local_unnamed_addr #0 {
  %12 = alloca [264 x i8], align 16
  %13 = getelementptr inbounds [264 x i8], [264 x i8]* %12, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 264, i8* nonnull %13) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 264, i1 false)
  call fastcc void @bilinear_filter8xh(i8* %0, i32 %1, i32 %2, i32 %3, i8* nonnull %13, i32 32)
  %14 = icmp eq i32 %9, 0
  %15 = sext i32 %5 to i64
  %16 = sext i32 %8 to i64
  %17 = shl nsw i32 %5, 1
  %18 = sext i32 %17 to i64
  %19 = shl nsw i32 %8, 1
  %20 = sext i32 %19 to i64
  br i1 %14, label %21, label %82

21:                                               ; preds = %11, %21
  %22 = phi i32 [ %77, %21 ], [ 0, %11 ]
  %23 = phi i8* [ %73, %21 ], [ %4, %11 ]
  %24 = phi i8* [ %74, %21 ], [ %13, %11 ]
  %25 = phi i8* [ %75, %21 ], [ %6, %11 ]
  %26 = phi i8* [ %76, %21 ], [ %7, %11 ]
  %27 = phi <4 x i32> [ %68, %21 ], [ zeroinitializer, %11 ]
  %28 = phi <4 x i32> [ %72, %21 ], [ zeroinitializer, %11 ]
  %29 = bitcast i8* %23 to i64*
  %30 = load i64, i64* %29, align 1
  %31 = insertelement <2 x i64> undef, i64 %30, i32 0
  %32 = getelementptr inbounds i8, i8* %23, i64 %15
  %33 = bitcast i8* %32 to i64*
  %34 = load i64, i64* %33, align 1
  %35 = insertelement <2 x i64> %31, i64 %34, i32 1
  %36 = bitcast i8* %24 to <16 x i8>*
  %37 = load <16 x i8>, <16 x i8>* %36, align 1
  %38 = bitcast i8* %25 to <16 x i8>*
  %39 = load <16 x i8>, <16 x i8>* %38, align 1
  %40 = bitcast i8* %26 to i64*
  %41 = load i64, i64* %40, align 1
  %42 = insertelement <2 x i64> undef, i64 %41, i32 0
  %43 = getelementptr inbounds i8, i8* %26, i64 %16
  %44 = bitcast i8* %43 to i64*
  %45 = load i64, i64* %44, align 1
  %46 = insertelement <2 x i64> %42, i64 %45, i32 1
  %47 = bitcast <2 x i64> %46 to <16 x i8>
  %48 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %47
  %49 = shufflevector <16 x i8> %37, <16 x i8> %39, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %50 = shufflevector <16 x i8> %47, <16 x i8> %48, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %51 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %49, <16 x i8> %50) #5
  %52 = lshr <8 x i16> %51, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %53 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %52, <8 x i16> zeroinitializer) #5
  %54 = shufflevector <16 x i8> %37, <16 x i8> %39, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %55 = shufflevector <16 x i8> %47, <16 x i8> %48, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %56 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %54, <16 x i8> %55) #5
  %57 = lshr <8 x i16> %56, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %58 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %57, <8 x i16> zeroinitializer) #5
  %59 = bitcast <2 x i64> %35 to <16 x i8>
  %60 = shufflevector <16 x i8> %59, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %61 = shufflevector <16 x i8> %59, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %62 = bitcast <16 x i8> %60 to <8 x i16>
  %63 = sub <8 x i16> %53, %62
  %64 = bitcast <16 x i8> %61 to <8 x i16>
  %65 = sub <8 x i16> %58, %64
  %66 = add <8 x i16> %65, %63
  %67 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %66, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %68 = add <4 x i32> %67, %27
  %69 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %63, <8 x i16> %63) #5
  %70 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %65, <8 x i16> %65) #5
  %71 = add <4 x i32> %69, %28
  %72 = add <4 x i32> %71, %70
  %73 = getelementptr inbounds i8, i8* %23, i64 %18
  %74 = getelementptr inbounds i8, i8* %24, i64 16
  %75 = getelementptr inbounds i8, i8* %25, i64 16
  %76 = getelementptr inbounds i8, i8* %26, i64 %20
  %77 = add nuw nsw i32 %22, 2
  %78 = icmp ult i32 %77, 32
  br i1 %78, label %21, label %79

79:                                               ; preds = %21
  %80 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %68, <4 x i32> %72) #5
  %81 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %80, <4 x i32> %80) #5
  br label %143

82:                                               ; preds = %11, %82
  %83 = phi i32 [ %138, %82 ], [ 0, %11 ]
  %84 = phi i8* [ %134, %82 ], [ %4, %11 ]
  %85 = phi i8* [ %135, %82 ], [ %6, %11 ]
  %86 = phi i8* [ %136, %82 ], [ %13, %11 ]
  %87 = phi i8* [ %137, %82 ], [ %7, %11 ]
  %88 = phi <4 x i32> [ %129, %82 ], [ zeroinitializer, %11 ]
  %89 = phi <4 x i32> [ %133, %82 ], [ zeroinitializer, %11 ]
  %90 = bitcast i8* %84 to i64*
  %91 = load i64, i64* %90, align 1
  %92 = insertelement <2 x i64> undef, i64 %91, i32 0
  %93 = getelementptr inbounds i8, i8* %84, i64 %15
  %94 = bitcast i8* %93 to i64*
  %95 = load i64, i64* %94, align 1
  %96 = insertelement <2 x i64> %92, i64 %95, i32 1
  %97 = bitcast i8* %85 to <16 x i8>*
  %98 = load <16 x i8>, <16 x i8>* %97, align 1
  %99 = bitcast i8* %86 to <16 x i8>*
  %100 = load <16 x i8>, <16 x i8>* %99, align 1
  %101 = bitcast i8* %87 to i64*
  %102 = load i64, i64* %101, align 1
  %103 = insertelement <2 x i64> undef, i64 %102, i32 0
  %104 = getelementptr inbounds i8, i8* %87, i64 %16
  %105 = bitcast i8* %104 to i64*
  %106 = load i64, i64* %105, align 1
  %107 = insertelement <2 x i64> %103, i64 %106, i32 1
  %108 = bitcast <2 x i64> %107 to <16 x i8>
  %109 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %108
  %110 = shufflevector <16 x i8> %98, <16 x i8> %100, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %111 = shufflevector <16 x i8> %108, <16 x i8> %109, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %112 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %110, <16 x i8> %111) #5
  %113 = lshr <8 x i16> %112, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %114 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %113, <8 x i16> zeroinitializer) #5
  %115 = shufflevector <16 x i8> %98, <16 x i8> %100, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %116 = shufflevector <16 x i8> %108, <16 x i8> %109, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %117 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %115, <16 x i8> %116) #5
  %118 = lshr <8 x i16> %117, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %119 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %118, <8 x i16> zeroinitializer) #5
  %120 = bitcast <2 x i64> %96 to <16 x i8>
  %121 = shufflevector <16 x i8> %120, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %122 = shufflevector <16 x i8> %120, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %123 = bitcast <16 x i8> %121 to <8 x i16>
  %124 = sub <8 x i16> %114, %123
  %125 = bitcast <16 x i8> %122 to <8 x i16>
  %126 = sub <8 x i16> %119, %125
  %127 = add <8 x i16> %126, %124
  %128 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %127, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %129 = add <4 x i32> %128, %88
  %130 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %124, <8 x i16> %124) #5
  %131 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %126, <8 x i16> %126) #5
  %132 = add <4 x i32> %130, %89
  %133 = add <4 x i32> %132, %131
  %134 = getelementptr inbounds i8, i8* %84, i64 %18
  %135 = getelementptr inbounds i8, i8* %85, i64 16
  %136 = getelementptr inbounds i8, i8* %86, i64 16
  %137 = getelementptr inbounds i8, i8* %87, i64 %20
  %138 = add nuw nsw i32 %83, 2
  %139 = icmp ult i32 %138, 32
  br i1 %139, label %82, label %140

140:                                              ; preds = %82
  %141 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %129, <4 x i32> %133) #5
  %142 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %141, <4 x i32> %141) #5
  br label %143

143:                                              ; preds = %140, %79
  %144 = phi <4 x i32> [ %142, %140 ], [ %81, %79 ]
  %145 = extractelement <4 x i32> %144, i32 0
  %146 = bitcast <4 x i32> %144 to <16 x i8>
  %147 = shufflevector <16 x i8> %146, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %148 = bitcast <16 x i8> %147 to <4 x i32>
  %149 = extractelement <4 x i32> %148, i32 0
  store i32 %149, i32* %10, align 4
  %150 = sext i32 %145 to i64
  %151 = mul nsw i64 %150, %150
  %152 = lshr i64 %151, 8
  %153 = trunc i64 %152 to i32
  %154 = sub i32 %149, %153
  call void @llvm.lifetime.end.p0i8(i64 264, i8* nonnull %13) #5
  ret i32 %154
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @aom_masked_sub_pixel_variance32x8_ssse3(i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32, i32* nocapture) local_unnamed_addr #0 {
  %12 = alloca [288 x i8], align 16
  %13 = getelementptr inbounds [288 x i8], [288 x i8]* %12, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 288, i8* nonnull %13) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 288, i1 false)
  call fastcc void @bilinear_filter(i8* %0, i32 %1, i32 %2, i32 %3, i8* nonnull %13, i32 32, i32 8)
  %14 = icmp eq i32 %9, 0
  %15 = sext i32 %5 to i64
  %16 = sext i32 %8 to i64
  br i1 %14, label %17, label %102

17:                                               ; preds = %11, %17
  %18 = phi i32 [ %97, %17 ], [ 0, %11 ]
  %19 = phi i8* [ %93, %17 ], [ %4, %11 ]
  %20 = phi i8* [ %94, %17 ], [ %13, %11 ]
  %21 = phi i8* [ %95, %17 ], [ %6, %11 ]
  %22 = phi i8* [ %96, %17 ], [ %7, %11 ]
  %23 = phi <4 x i32> [ %88, %17 ], [ zeroinitializer, %11 ]
  %24 = phi <4 x i32> [ %92, %17 ], [ zeroinitializer, %11 ]
  %25 = bitcast i8* %19 to <16 x i8>*
  %26 = load <16 x i8>, <16 x i8>* %25, align 1
  %27 = bitcast i8* %20 to <16 x i8>*
  %28 = load <16 x i8>, <16 x i8>* %27, align 1
  %29 = bitcast i8* %21 to <16 x i8>*
  %30 = load <16 x i8>, <16 x i8>* %29, align 1
  %31 = bitcast i8* %22 to <16 x i8>*
  %32 = load <16 x i8>, <16 x i8>* %31, align 1
  %33 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %32
  %34 = shufflevector <16 x i8> %28, <16 x i8> %30, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %35 = shufflevector <16 x i8> %32, <16 x i8> %33, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %36 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %34, <16 x i8> %35) #5
  %37 = lshr <8 x i16> %36, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %38 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %37, <8 x i16> zeroinitializer) #5
  %39 = shufflevector <16 x i8> %28, <16 x i8> %30, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %40 = shufflevector <16 x i8> %32, <16 x i8> %33, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %41 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %39, <16 x i8> %40) #5
  %42 = lshr <8 x i16> %41, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %43 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %42, <8 x i16> zeroinitializer) #5
  %44 = shufflevector <16 x i8> %26, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %45 = shufflevector <16 x i8> %26, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %46 = bitcast <16 x i8> %44 to <8 x i16>
  %47 = sub <8 x i16> %38, %46
  %48 = bitcast <16 x i8> %45 to <8 x i16>
  %49 = sub <8 x i16> %43, %48
  %50 = add <8 x i16> %49, %47
  %51 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %50, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %52 = add <4 x i32> %51, %23
  %53 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %47, <8 x i16> %47) #5
  %54 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %49, <8 x i16> %49) #5
  %55 = add <4 x i32> %53, %24
  %56 = add <4 x i32> %55, %54
  %57 = getelementptr inbounds i8, i8* %19, i64 16
  %58 = bitcast i8* %57 to <16 x i8>*
  %59 = load <16 x i8>, <16 x i8>* %58, align 1
  %60 = getelementptr inbounds i8, i8* %20, i64 16
  %61 = bitcast i8* %60 to <16 x i8>*
  %62 = load <16 x i8>, <16 x i8>* %61, align 1
  %63 = getelementptr inbounds i8, i8* %21, i64 16
  %64 = bitcast i8* %63 to <16 x i8>*
  %65 = load <16 x i8>, <16 x i8>* %64, align 1
  %66 = getelementptr inbounds i8, i8* %22, i64 16
  %67 = bitcast i8* %66 to <16 x i8>*
  %68 = load <16 x i8>, <16 x i8>* %67, align 1
  %69 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %68
  %70 = shufflevector <16 x i8> %62, <16 x i8> %65, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %71 = shufflevector <16 x i8> %68, <16 x i8> %69, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %72 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %70, <16 x i8> %71) #5
  %73 = lshr <8 x i16> %72, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %74 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %73, <8 x i16> zeroinitializer) #5
  %75 = shufflevector <16 x i8> %62, <16 x i8> %65, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %76 = shufflevector <16 x i8> %68, <16 x i8> %69, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %77 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %75, <16 x i8> %76) #5
  %78 = lshr <8 x i16> %77, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %79 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %78, <8 x i16> zeroinitializer) #5
  %80 = shufflevector <16 x i8> %59, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %81 = shufflevector <16 x i8> %59, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %82 = bitcast <16 x i8> %80 to <8 x i16>
  %83 = sub <8 x i16> %74, %82
  %84 = bitcast <16 x i8> %81 to <8 x i16>
  %85 = sub <8 x i16> %79, %84
  %86 = add <8 x i16> %85, %83
  %87 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %86, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %88 = add <4 x i32> %87, %52
  %89 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %83, <8 x i16> %83) #5
  %90 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %85, <8 x i16> %85) #5
  %91 = add <4 x i32> %89, %56
  %92 = add <4 x i32> %91, %90
  %93 = getelementptr inbounds i8, i8* %19, i64 %15
  %94 = getelementptr inbounds i8, i8* %20, i64 32
  %95 = getelementptr inbounds i8, i8* %21, i64 32
  %96 = getelementptr inbounds i8, i8* %22, i64 %16
  %97 = add nuw nsw i32 %18, 1
  %98 = icmp eq i32 %97, 8
  br i1 %98, label %99, label %17

99:                                               ; preds = %17
  %100 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %88, <4 x i32> %92) #5
  %101 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %100, <4 x i32> %100) #5
  br label %187

102:                                              ; preds = %11, %102
  %103 = phi i32 [ %182, %102 ], [ 0, %11 ]
  %104 = phi i8* [ %178, %102 ], [ %4, %11 ]
  %105 = phi i8* [ %179, %102 ], [ %6, %11 ]
  %106 = phi i8* [ %180, %102 ], [ %13, %11 ]
  %107 = phi i8* [ %181, %102 ], [ %7, %11 ]
  %108 = phi <4 x i32> [ %173, %102 ], [ zeroinitializer, %11 ]
  %109 = phi <4 x i32> [ %177, %102 ], [ zeroinitializer, %11 ]
  %110 = bitcast i8* %104 to <16 x i8>*
  %111 = load <16 x i8>, <16 x i8>* %110, align 1
  %112 = bitcast i8* %105 to <16 x i8>*
  %113 = load <16 x i8>, <16 x i8>* %112, align 1
  %114 = bitcast i8* %106 to <16 x i8>*
  %115 = load <16 x i8>, <16 x i8>* %114, align 1
  %116 = bitcast i8* %107 to <16 x i8>*
  %117 = load <16 x i8>, <16 x i8>* %116, align 1
  %118 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %117
  %119 = shufflevector <16 x i8> %113, <16 x i8> %115, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %120 = shufflevector <16 x i8> %117, <16 x i8> %118, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %121 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %119, <16 x i8> %120) #5
  %122 = lshr <8 x i16> %121, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %123 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %122, <8 x i16> zeroinitializer) #5
  %124 = shufflevector <16 x i8> %113, <16 x i8> %115, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %125 = shufflevector <16 x i8> %117, <16 x i8> %118, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %126 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %124, <16 x i8> %125) #5
  %127 = lshr <8 x i16> %126, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %128 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %127, <8 x i16> zeroinitializer) #5
  %129 = shufflevector <16 x i8> %111, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %130 = shufflevector <16 x i8> %111, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %131 = bitcast <16 x i8> %129 to <8 x i16>
  %132 = sub <8 x i16> %123, %131
  %133 = bitcast <16 x i8> %130 to <8 x i16>
  %134 = sub <8 x i16> %128, %133
  %135 = add <8 x i16> %134, %132
  %136 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %135, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %137 = add <4 x i32> %136, %108
  %138 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %132, <8 x i16> %132) #5
  %139 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %134, <8 x i16> %134) #5
  %140 = add <4 x i32> %138, %109
  %141 = add <4 x i32> %140, %139
  %142 = getelementptr inbounds i8, i8* %104, i64 16
  %143 = bitcast i8* %142 to <16 x i8>*
  %144 = load <16 x i8>, <16 x i8>* %143, align 1
  %145 = getelementptr inbounds i8, i8* %105, i64 16
  %146 = bitcast i8* %145 to <16 x i8>*
  %147 = load <16 x i8>, <16 x i8>* %146, align 1
  %148 = getelementptr inbounds i8, i8* %106, i64 16
  %149 = bitcast i8* %148 to <16 x i8>*
  %150 = load <16 x i8>, <16 x i8>* %149, align 1
  %151 = getelementptr inbounds i8, i8* %107, i64 16
  %152 = bitcast i8* %151 to <16 x i8>*
  %153 = load <16 x i8>, <16 x i8>* %152, align 1
  %154 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %153
  %155 = shufflevector <16 x i8> %147, <16 x i8> %150, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %156 = shufflevector <16 x i8> %153, <16 x i8> %154, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %157 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %155, <16 x i8> %156) #5
  %158 = lshr <8 x i16> %157, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %159 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %158, <8 x i16> zeroinitializer) #5
  %160 = shufflevector <16 x i8> %147, <16 x i8> %150, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %161 = shufflevector <16 x i8> %153, <16 x i8> %154, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %162 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %160, <16 x i8> %161) #5
  %163 = lshr <8 x i16> %162, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %164 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %163, <8 x i16> zeroinitializer) #5
  %165 = shufflevector <16 x i8> %144, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %166 = shufflevector <16 x i8> %144, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %167 = bitcast <16 x i8> %165 to <8 x i16>
  %168 = sub <8 x i16> %159, %167
  %169 = bitcast <16 x i8> %166 to <8 x i16>
  %170 = sub <8 x i16> %164, %169
  %171 = add <8 x i16> %170, %168
  %172 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %171, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %173 = add <4 x i32> %172, %137
  %174 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %168, <8 x i16> %168) #5
  %175 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %170, <8 x i16> %170) #5
  %176 = add <4 x i32> %174, %141
  %177 = add <4 x i32> %176, %175
  %178 = getelementptr inbounds i8, i8* %104, i64 %15
  %179 = getelementptr inbounds i8, i8* %105, i64 32
  %180 = getelementptr inbounds i8, i8* %106, i64 32
  %181 = getelementptr inbounds i8, i8* %107, i64 %16
  %182 = add nuw nsw i32 %103, 1
  %183 = icmp eq i32 %182, 8
  br i1 %183, label %184, label %102

184:                                              ; preds = %102
  %185 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %173, <4 x i32> %177) #5
  %186 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %185, <4 x i32> %185) #5
  br label %187

187:                                              ; preds = %184, %99
  %188 = phi <4 x i32> [ %186, %184 ], [ %101, %99 ]
  %189 = extractelement <4 x i32> %188, i32 0
  %190 = bitcast <4 x i32> %188 to <16 x i8>
  %191 = shufflevector <16 x i8> %190, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %192 = bitcast <16 x i8> %191 to <4 x i32>
  %193 = extractelement <4 x i32> %192, i32 0
  store i32 %193, i32* %10, align 4
  %194 = sext i32 %189 to i64
  %195 = mul nsw i64 %194, %194
  %196 = lshr i64 %195, 8
  %197 = trunc i64 %196 to i32
  %198 = sub i32 %193, %197
  call void @llvm.lifetime.end.p0i8(i64 288, i8* nonnull %13) #5
  ret i32 %198
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @aom_masked_sub_pixel_variance64x16_ssse3(i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32, i32* nocapture) local_unnamed_addr #0 {
  %12 = alloca [1088 x i8], align 16
  %13 = getelementptr inbounds [1088 x i8], [1088 x i8]* %12, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1088, i8* nonnull %13) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 1088, i1 false)
  call fastcc void @bilinear_filter(i8* %0, i32 %1, i32 %2, i32 %3, i8* nonnull %13, i32 64, i32 16)
  %14 = icmp eq i32 %9, 0
  %15 = sext i32 %5 to i64
  %16 = sext i32 %8 to i64
  br i1 %14, label %17, label %174

17:                                               ; preds = %11, %17
  %18 = phi i32 [ %169, %17 ], [ 0, %11 ]
  %19 = phi i8* [ %165, %17 ], [ %4, %11 ]
  %20 = phi i8* [ %166, %17 ], [ %13, %11 ]
  %21 = phi i8* [ %167, %17 ], [ %6, %11 ]
  %22 = phi i8* [ %168, %17 ], [ %7, %11 ]
  %23 = phi <4 x i32> [ %160, %17 ], [ zeroinitializer, %11 ]
  %24 = phi <4 x i32> [ %164, %17 ], [ zeroinitializer, %11 ]
  %25 = bitcast i8* %19 to <16 x i8>*
  %26 = load <16 x i8>, <16 x i8>* %25, align 1
  %27 = bitcast i8* %20 to <16 x i8>*
  %28 = load <16 x i8>, <16 x i8>* %27, align 1
  %29 = bitcast i8* %21 to <16 x i8>*
  %30 = load <16 x i8>, <16 x i8>* %29, align 1
  %31 = bitcast i8* %22 to <16 x i8>*
  %32 = load <16 x i8>, <16 x i8>* %31, align 1
  %33 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %32
  %34 = shufflevector <16 x i8> %28, <16 x i8> %30, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %35 = shufflevector <16 x i8> %32, <16 x i8> %33, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %36 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %34, <16 x i8> %35) #5
  %37 = lshr <8 x i16> %36, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %38 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %37, <8 x i16> zeroinitializer) #5
  %39 = shufflevector <16 x i8> %28, <16 x i8> %30, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %40 = shufflevector <16 x i8> %32, <16 x i8> %33, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %41 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %39, <16 x i8> %40) #5
  %42 = lshr <8 x i16> %41, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %43 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %42, <8 x i16> zeroinitializer) #5
  %44 = shufflevector <16 x i8> %26, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %45 = shufflevector <16 x i8> %26, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %46 = bitcast <16 x i8> %44 to <8 x i16>
  %47 = sub <8 x i16> %38, %46
  %48 = bitcast <16 x i8> %45 to <8 x i16>
  %49 = sub <8 x i16> %43, %48
  %50 = add <8 x i16> %49, %47
  %51 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %50, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %52 = add <4 x i32> %51, %23
  %53 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %47, <8 x i16> %47) #5
  %54 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %49, <8 x i16> %49) #5
  %55 = add <4 x i32> %53, %24
  %56 = add <4 x i32> %55, %54
  %57 = getelementptr inbounds i8, i8* %19, i64 16
  %58 = bitcast i8* %57 to <16 x i8>*
  %59 = load <16 x i8>, <16 x i8>* %58, align 1
  %60 = getelementptr inbounds i8, i8* %20, i64 16
  %61 = bitcast i8* %60 to <16 x i8>*
  %62 = load <16 x i8>, <16 x i8>* %61, align 1
  %63 = getelementptr inbounds i8, i8* %21, i64 16
  %64 = bitcast i8* %63 to <16 x i8>*
  %65 = load <16 x i8>, <16 x i8>* %64, align 1
  %66 = getelementptr inbounds i8, i8* %22, i64 16
  %67 = bitcast i8* %66 to <16 x i8>*
  %68 = load <16 x i8>, <16 x i8>* %67, align 1
  %69 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %68
  %70 = shufflevector <16 x i8> %62, <16 x i8> %65, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %71 = shufflevector <16 x i8> %68, <16 x i8> %69, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %72 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %70, <16 x i8> %71) #5
  %73 = lshr <8 x i16> %72, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %74 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %73, <8 x i16> zeroinitializer) #5
  %75 = shufflevector <16 x i8> %62, <16 x i8> %65, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %76 = shufflevector <16 x i8> %68, <16 x i8> %69, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %77 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %75, <16 x i8> %76) #5
  %78 = lshr <8 x i16> %77, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %79 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %78, <8 x i16> zeroinitializer) #5
  %80 = shufflevector <16 x i8> %59, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %81 = shufflevector <16 x i8> %59, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %82 = bitcast <16 x i8> %80 to <8 x i16>
  %83 = sub <8 x i16> %74, %82
  %84 = bitcast <16 x i8> %81 to <8 x i16>
  %85 = sub <8 x i16> %79, %84
  %86 = add <8 x i16> %85, %83
  %87 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %86, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %88 = add <4 x i32> %87, %52
  %89 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %83, <8 x i16> %83) #5
  %90 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %85, <8 x i16> %85) #5
  %91 = add <4 x i32> %89, %56
  %92 = add <4 x i32> %91, %90
  %93 = getelementptr inbounds i8, i8* %19, i64 32
  %94 = bitcast i8* %93 to <16 x i8>*
  %95 = load <16 x i8>, <16 x i8>* %94, align 1
  %96 = getelementptr inbounds i8, i8* %20, i64 32
  %97 = bitcast i8* %96 to <16 x i8>*
  %98 = load <16 x i8>, <16 x i8>* %97, align 1
  %99 = getelementptr inbounds i8, i8* %21, i64 32
  %100 = bitcast i8* %99 to <16 x i8>*
  %101 = load <16 x i8>, <16 x i8>* %100, align 1
  %102 = getelementptr inbounds i8, i8* %22, i64 32
  %103 = bitcast i8* %102 to <16 x i8>*
  %104 = load <16 x i8>, <16 x i8>* %103, align 1
  %105 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %104
  %106 = shufflevector <16 x i8> %98, <16 x i8> %101, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %107 = shufflevector <16 x i8> %104, <16 x i8> %105, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %108 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %106, <16 x i8> %107) #5
  %109 = lshr <8 x i16> %108, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %110 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %109, <8 x i16> zeroinitializer) #5
  %111 = shufflevector <16 x i8> %98, <16 x i8> %101, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %112 = shufflevector <16 x i8> %104, <16 x i8> %105, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %113 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %111, <16 x i8> %112) #5
  %114 = lshr <8 x i16> %113, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %115 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %114, <8 x i16> zeroinitializer) #5
  %116 = shufflevector <16 x i8> %95, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %117 = shufflevector <16 x i8> %95, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %118 = bitcast <16 x i8> %116 to <8 x i16>
  %119 = sub <8 x i16> %110, %118
  %120 = bitcast <16 x i8> %117 to <8 x i16>
  %121 = sub <8 x i16> %115, %120
  %122 = add <8 x i16> %121, %119
  %123 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %122, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %124 = add <4 x i32> %123, %88
  %125 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %119, <8 x i16> %119) #5
  %126 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %121, <8 x i16> %121) #5
  %127 = add <4 x i32> %125, %92
  %128 = add <4 x i32> %127, %126
  %129 = getelementptr inbounds i8, i8* %19, i64 48
  %130 = bitcast i8* %129 to <16 x i8>*
  %131 = load <16 x i8>, <16 x i8>* %130, align 1
  %132 = getelementptr inbounds i8, i8* %20, i64 48
  %133 = bitcast i8* %132 to <16 x i8>*
  %134 = load <16 x i8>, <16 x i8>* %133, align 1
  %135 = getelementptr inbounds i8, i8* %21, i64 48
  %136 = bitcast i8* %135 to <16 x i8>*
  %137 = load <16 x i8>, <16 x i8>* %136, align 1
  %138 = getelementptr inbounds i8, i8* %22, i64 48
  %139 = bitcast i8* %138 to <16 x i8>*
  %140 = load <16 x i8>, <16 x i8>* %139, align 1
  %141 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %140
  %142 = shufflevector <16 x i8> %134, <16 x i8> %137, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %143 = shufflevector <16 x i8> %140, <16 x i8> %141, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %144 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %142, <16 x i8> %143) #5
  %145 = lshr <8 x i16> %144, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %146 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %145, <8 x i16> zeroinitializer) #5
  %147 = shufflevector <16 x i8> %134, <16 x i8> %137, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %148 = shufflevector <16 x i8> %140, <16 x i8> %141, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %149 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %147, <16 x i8> %148) #5
  %150 = lshr <8 x i16> %149, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %151 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %150, <8 x i16> zeroinitializer) #5
  %152 = shufflevector <16 x i8> %131, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %153 = shufflevector <16 x i8> %131, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %154 = bitcast <16 x i8> %152 to <8 x i16>
  %155 = sub <8 x i16> %146, %154
  %156 = bitcast <16 x i8> %153 to <8 x i16>
  %157 = sub <8 x i16> %151, %156
  %158 = add <8 x i16> %157, %155
  %159 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %158, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %160 = add <4 x i32> %159, %124
  %161 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %155, <8 x i16> %155) #5
  %162 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %157, <8 x i16> %157) #5
  %163 = add <4 x i32> %161, %128
  %164 = add <4 x i32> %163, %162
  %165 = getelementptr inbounds i8, i8* %19, i64 %15
  %166 = getelementptr inbounds i8, i8* %20, i64 64
  %167 = getelementptr inbounds i8, i8* %21, i64 64
  %168 = getelementptr inbounds i8, i8* %22, i64 %16
  %169 = add nuw nsw i32 %18, 1
  %170 = icmp eq i32 %169, 16
  br i1 %170, label %171, label %17

171:                                              ; preds = %17
  %172 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %160, <4 x i32> %164) #5
  %173 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %172, <4 x i32> %172) #5
  br label %331

174:                                              ; preds = %11, %174
  %175 = phi i32 [ %326, %174 ], [ 0, %11 ]
  %176 = phi i8* [ %322, %174 ], [ %4, %11 ]
  %177 = phi i8* [ %323, %174 ], [ %6, %11 ]
  %178 = phi i8* [ %324, %174 ], [ %13, %11 ]
  %179 = phi i8* [ %325, %174 ], [ %7, %11 ]
  %180 = phi <4 x i32> [ %317, %174 ], [ zeroinitializer, %11 ]
  %181 = phi <4 x i32> [ %321, %174 ], [ zeroinitializer, %11 ]
  %182 = bitcast i8* %176 to <16 x i8>*
  %183 = load <16 x i8>, <16 x i8>* %182, align 1
  %184 = bitcast i8* %177 to <16 x i8>*
  %185 = load <16 x i8>, <16 x i8>* %184, align 1
  %186 = bitcast i8* %178 to <16 x i8>*
  %187 = load <16 x i8>, <16 x i8>* %186, align 1
  %188 = bitcast i8* %179 to <16 x i8>*
  %189 = load <16 x i8>, <16 x i8>* %188, align 1
  %190 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %189
  %191 = shufflevector <16 x i8> %185, <16 x i8> %187, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %192 = shufflevector <16 x i8> %189, <16 x i8> %190, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %193 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %191, <16 x i8> %192) #5
  %194 = lshr <8 x i16> %193, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %195 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %194, <8 x i16> zeroinitializer) #5
  %196 = shufflevector <16 x i8> %185, <16 x i8> %187, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %197 = shufflevector <16 x i8> %189, <16 x i8> %190, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %198 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %196, <16 x i8> %197) #5
  %199 = lshr <8 x i16> %198, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %200 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %199, <8 x i16> zeroinitializer) #5
  %201 = shufflevector <16 x i8> %183, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %202 = shufflevector <16 x i8> %183, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %203 = bitcast <16 x i8> %201 to <8 x i16>
  %204 = sub <8 x i16> %195, %203
  %205 = bitcast <16 x i8> %202 to <8 x i16>
  %206 = sub <8 x i16> %200, %205
  %207 = add <8 x i16> %206, %204
  %208 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %207, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %209 = add <4 x i32> %208, %180
  %210 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %204, <8 x i16> %204) #5
  %211 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %206, <8 x i16> %206) #5
  %212 = add <4 x i32> %210, %181
  %213 = add <4 x i32> %212, %211
  %214 = getelementptr inbounds i8, i8* %176, i64 16
  %215 = bitcast i8* %214 to <16 x i8>*
  %216 = load <16 x i8>, <16 x i8>* %215, align 1
  %217 = getelementptr inbounds i8, i8* %177, i64 16
  %218 = bitcast i8* %217 to <16 x i8>*
  %219 = load <16 x i8>, <16 x i8>* %218, align 1
  %220 = getelementptr inbounds i8, i8* %178, i64 16
  %221 = bitcast i8* %220 to <16 x i8>*
  %222 = load <16 x i8>, <16 x i8>* %221, align 1
  %223 = getelementptr inbounds i8, i8* %179, i64 16
  %224 = bitcast i8* %223 to <16 x i8>*
  %225 = load <16 x i8>, <16 x i8>* %224, align 1
  %226 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %225
  %227 = shufflevector <16 x i8> %219, <16 x i8> %222, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %228 = shufflevector <16 x i8> %225, <16 x i8> %226, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %229 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %227, <16 x i8> %228) #5
  %230 = lshr <8 x i16> %229, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %231 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %230, <8 x i16> zeroinitializer) #5
  %232 = shufflevector <16 x i8> %219, <16 x i8> %222, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %233 = shufflevector <16 x i8> %225, <16 x i8> %226, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %234 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %232, <16 x i8> %233) #5
  %235 = lshr <8 x i16> %234, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %236 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %235, <8 x i16> zeroinitializer) #5
  %237 = shufflevector <16 x i8> %216, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %238 = shufflevector <16 x i8> %216, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %239 = bitcast <16 x i8> %237 to <8 x i16>
  %240 = sub <8 x i16> %231, %239
  %241 = bitcast <16 x i8> %238 to <8 x i16>
  %242 = sub <8 x i16> %236, %241
  %243 = add <8 x i16> %242, %240
  %244 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %243, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %245 = add <4 x i32> %244, %209
  %246 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %240, <8 x i16> %240) #5
  %247 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %242, <8 x i16> %242) #5
  %248 = add <4 x i32> %246, %213
  %249 = add <4 x i32> %248, %247
  %250 = getelementptr inbounds i8, i8* %176, i64 32
  %251 = bitcast i8* %250 to <16 x i8>*
  %252 = load <16 x i8>, <16 x i8>* %251, align 1
  %253 = getelementptr inbounds i8, i8* %177, i64 32
  %254 = bitcast i8* %253 to <16 x i8>*
  %255 = load <16 x i8>, <16 x i8>* %254, align 1
  %256 = getelementptr inbounds i8, i8* %178, i64 32
  %257 = bitcast i8* %256 to <16 x i8>*
  %258 = load <16 x i8>, <16 x i8>* %257, align 1
  %259 = getelementptr inbounds i8, i8* %179, i64 32
  %260 = bitcast i8* %259 to <16 x i8>*
  %261 = load <16 x i8>, <16 x i8>* %260, align 1
  %262 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %261
  %263 = shufflevector <16 x i8> %255, <16 x i8> %258, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %264 = shufflevector <16 x i8> %261, <16 x i8> %262, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %265 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %263, <16 x i8> %264) #5
  %266 = lshr <8 x i16> %265, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %267 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %266, <8 x i16> zeroinitializer) #5
  %268 = shufflevector <16 x i8> %255, <16 x i8> %258, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %269 = shufflevector <16 x i8> %261, <16 x i8> %262, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %270 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %268, <16 x i8> %269) #5
  %271 = lshr <8 x i16> %270, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %272 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %271, <8 x i16> zeroinitializer) #5
  %273 = shufflevector <16 x i8> %252, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %274 = shufflevector <16 x i8> %252, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %275 = bitcast <16 x i8> %273 to <8 x i16>
  %276 = sub <8 x i16> %267, %275
  %277 = bitcast <16 x i8> %274 to <8 x i16>
  %278 = sub <8 x i16> %272, %277
  %279 = add <8 x i16> %278, %276
  %280 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %279, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %281 = add <4 x i32> %280, %245
  %282 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %276, <8 x i16> %276) #5
  %283 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %278, <8 x i16> %278) #5
  %284 = add <4 x i32> %282, %249
  %285 = add <4 x i32> %284, %283
  %286 = getelementptr inbounds i8, i8* %176, i64 48
  %287 = bitcast i8* %286 to <16 x i8>*
  %288 = load <16 x i8>, <16 x i8>* %287, align 1
  %289 = getelementptr inbounds i8, i8* %177, i64 48
  %290 = bitcast i8* %289 to <16 x i8>*
  %291 = load <16 x i8>, <16 x i8>* %290, align 1
  %292 = getelementptr inbounds i8, i8* %178, i64 48
  %293 = bitcast i8* %292 to <16 x i8>*
  %294 = load <16 x i8>, <16 x i8>* %293, align 1
  %295 = getelementptr inbounds i8, i8* %179, i64 48
  %296 = bitcast i8* %295 to <16 x i8>*
  %297 = load <16 x i8>, <16 x i8>* %296, align 1
  %298 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %297
  %299 = shufflevector <16 x i8> %291, <16 x i8> %294, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %300 = shufflevector <16 x i8> %297, <16 x i8> %298, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %301 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %299, <16 x i8> %300) #5
  %302 = lshr <8 x i16> %301, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %303 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %302, <8 x i16> zeroinitializer) #5
  %304 = shufflevector <16 x i8> %291, <16 x i8> %294, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %305 = shufflevector <16 x i8> %297, <16 x i8> %298, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %306 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %304, <16 x i8> %305) #5
  %307 = lshr <8 x i16> %306, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %308 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %307, <8 x i16> zeroinitializer) #5
  %309 = shufflevector <16 x i8> %288, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %310 = shufflevector <16 x i8> %288, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %311 = bitcast <16 x i8> %309 to <8 x i16>
  %312 = sub <8 x i16> %303, %311
  %313 = bitcast <16 x i8> %310 to <8 x i16>
  %314 = sub <8 x i16> %308, %313
  %315 = add <8 x i16> %314, %312
  %316 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %315, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %317 = add <4 x i32> %316, %281
  %318 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %312, <8 x i16> %312) #5
  %319 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %314, <8 x i16> %314) #5
  %320 = add <4 x i32> %318, %285
  %321 = add <4 x i32> %320, %319
  %322 = getelementptr inbounds i8, i8* %176, i64 %15
  %323 = getelementptr inbounds i8, i8* %177, i64 64
  %324 = getelementptr inbounds i8, i8* %178, i64 64
  %325 = getelementptr inbounds i8, i8* %179, i64 %16
  %326 = add nuw nsw i32 %175, 1
  %327 = icmp eq i32 %326, 16
  br i1 %327, label %328, label %174

328:                                              ; preds = %174
  %329 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %317, <4 x i32> %321) #5
  %330 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %329, <4 x i32> %329) #5
  br label %331

331:                                              ; preds = %328, %171
  %332 = phi <4 x i32> [ %330, %328 ], [ %173, %171 ]
  %333 = extractelement <4 x i32> %332, i32 0
  %334 = bitcast <4 x i32> %332 to <16 x i8>
  %335 = shufflevector <16 x i8> %334, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %336 = bitcast <16 x i8> %335 to <4 x i32>
  %337 = extractelement <4 x i32> %336, i32 0
  store i32 %337, i32* %10, align 4
  %338 = sext i32 %333 to i64
  %339 = mul nsw i64 %338, %338
  %340 = lshr i64 %339, 10
  %341 = trunc i64 %340 to i32
  %342 = sub i32 %337, %341
  call void @llvm.lifetime.end.p0i8(i64 1088, i8* nonnull %13) #5
  ret i32 %342
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @aom_masked_sub_pixel_variance16x64_ssse3(i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32, i32* nocapture) local_unnamed_addr #0 {
  %12 = alloca [1040 x i8], align 16
  %13 = getelementptr inbounds [1040 x i8], [1040 x i8]* %12, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1040, i8* nonnull %13) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 1040, i1 false)
  call fastcc void @bilinear_filter(i8* %0, i32 %1, i32 %2, i32 %3, i8* nonnull %13, i32 16, i32 64)
  %14 = icmp eq i32 %9, 0
  %15 = sext i32 %5 to i64
  %16 = sext i32 %8 to i64
  br i1 %14, label %17, label %66

17:                                               ; preds = %11, %17
  %18 = phi i32 [ %61, %17 ], [ 0, %11 ]
  %19 = phi i8* [ %57, %17 ], [ %4, %11 ]
  %20 = phi i8* [ %58, %17 ], [ %13, %11 ]
  %21 = phi i8* [ %59, %17 ], [ %6, %11 ]
  %22 = phi i8* [ %60, %17 ], [ %7, %11 ]
  %23 = phi <4 x i32> [ %52, %17 ], [ zeroinitializer, %11 ]
  %24 = phi <4 x i32> [ %56, %17 ], [ zeroinitializer, %11 ]
  %25 = bitcast i8* %19 to <16 x i8>*
  %26 = load <16 x i8>, <16 x i8>* %25, align 1
  %27 = bitcast i8* %20 to <16 x i8>*
  %28 = load <16 x i8>, <16 x i8>* %27, align 1
  %29 = bitcast i8* %21 to <16 x i8>*
  %30 = load <16 x i8>, <16 x i8>* %29, align 1
  %31 = bitcast i8* %22 to <16 x i8>*
  %32 = load <16 x i8>, <16 x i8>* %31, align 1
  %33 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %32
  %34 = shufflevector <16 x i8> %28, <16 x i8> %30, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %35 = shufflevector <16 x i8> %32, <16 x i8> %33, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %36 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %34, <16 x i8> %35) #5
  %37 = lshr <8 x i16> %36, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %38 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %37, <8 x i16> zeroinitializer) #5
  %39 = shufflevector <16 x i8> %28, <16 x i8> %30, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %40 = shufflevector <16 x i8> %32, <16 x i8> %33, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %41 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %39, <16 x i8> %40) #5
  %42 = lshr <8 x i16> %41, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %43 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %42, <8 x i16> zeroinitializer) #5
  %44 = shufflevector <16 x i8> %26, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %45 = shufflevector <16 x i8> %26, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %46 = bitcast <16 x i8> %44 to <8 x i16>
  %47 = sub <8 x i16> %38, %46
  %48 = bitcast <16 x i8> %45 to <8 x i16>
  %49 = sub <8 x i16> %43, %48
  %50 = add <8 x i16> %49, %47
  %51 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %50, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %52 = add <4 x i32> %51, %23
  %53 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %47, <8 x i16> %47) #5
  %54 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %49, <8 x i16> %49) #5
  %55 = add <4 x i32> %53, %24
  %56 = add <4 x i32> %55, %54
  %57 = getelementptr inbounds i8, i8* %19, i64 %15
  %58 = getelementptr inbounds i8, i8* %20, i64 16
  %59 = getelementptr inbounds i8, i8* %21, i64 16
  %60 = getelementptr inbounds i8, i8* %22, i64 %16
  %61 = add nuw nsw i32 %18, 1
  %62 = icmp eq i32 %61, 64
  br i1 %62, label %63, label %17

63:                                               ; preds = %17
  %64 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %52, <4 x i32> %56) #5
  %65 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %64, <4 x i32> %64) #5
  br label %115

66:                                               ; preds = %11, %66
  %67 = phi i32 [ %110, %66 ], [ 0, %11 ]
  %68 = phi i8* [ %106, %66 ], [ %4, %11 ]
  %69 = phi i8* [ %107, %66 ], [ %6, %11 ]
  %70 = phi i8* [ %108, %66 ], [ %13, %11 ]
  %71 = phi i8* [ %109, %66 ], [ %7, %11 ]
  %72 = phi <4 x i32> [ %101, %66 ], [ zeroinitializer, %11 ]
  %73 = phi <4 x i32> [ %105, %66 ], [ zeroinitializer, %11 ]
  %74 = bitcast i8* %68 to <16 x i8>*
  %75 = load <16 x i8>, <16 x i8>* %74, align 1
  %76 = bitcast i8* %69 to <16 x i8>*
  %77 = load <16 x i8>, <16 x i8>* %76, align 1
  %78 = bitcast i8* %70 to <16 x i8>*
  %79 = load <16 x i8>, <16 x i8>* %78, align 1
  %80 = bitcast i8* %71 to <16 x i8>*
  %81 = load <16 x i8>, <16 x i8>* %80, align 1
  %82 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %81
  %83 = shufflevector <16 x i8> %77, <16 x i8> %79, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %84 = shufflevector <16 x i8> %81, <16 x i8> %82, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %85 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %83, <16 x i8> %84) #5
  %86 = lshr <8 x i16> %85, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %87 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %86, <8 x i16> zeroinitializer) #5
  %88 = shufflevector <16 x i8> %77, <16 x i8> %79, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %89 = shufflevector <16 x i8> %81, <16 x i8> %82, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %90 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %88, <16 x i8> %89) #5
  %91 = lshr <8 x i16> %90, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %92 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %91, <8 x i16> zeroinitializer) #5
  %93 = shufflevector <16 x i8> %75, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %94 = shufflevector <16 x i8> %75, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %95 = bitcast <16 x i8> %93 to <8 x i16>
  %96 = sub <8 x i16> %87, %95
  %97 = bitcast <16 x i8> %94 to <8 x i16>
  %98 = sub <8 x i16> %92, %97
  %99 = add <8 x i16> %98, %96
  %100 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %99, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %101 = add <4 x i32> %100, %72
  %102 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %96, <8 x i16> %96) #5
  %103 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %98, <8 x i16> %98) #5
  %104 = add <4 x i32> %102, %73
  %105 = add <4 x i32> %104, %103
  %106 = getelementptr inbounds i8, i8* %68, i64 %15
  %107 = getelementptr inbounds i8, i8* %69, i64 16
  %108 = getelementptr inbounds i8, i8* %70, i64 16
  %109 = getelementptr inbounds i8, i8* %71, i64 %16
  %110 = add nuw nsw i32 %67, 1
  %111 = icmp eq i32 %110, 64
  br i1 %111, label %112, label %66

112:                                              ; preds = %66
  %113 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %101, <4 x i32> %105) #5
  %114 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %113, <4 x i32> %113) #5
  br label %115

115:                                              ; preds = %112, %63
  %116 = phi <4 x i32> [ %114, %112 ], [ %65, %63 ]
  %117 = extractelement <4 x i32> %116, i32 0
  %118 = bitcast <4 x i32> %116 to <16 x i8>
  %119 = shufflevector <16 x i8> %118, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %120 = bitcast <16 x i8> %119 to <4 x i32>
  %121 = extractelement <4 x i32> %120, i32 0
  store i32 %121, i32* %10, align 4
  %122 = sext i32 %117 to i64
  %123 = mul nsw i64 %122, %122
  %124 = lshr i64 %123, 10
  %125 = trunc i64 %124 to i32
  %126 = sub i32 %121, %125
  call void @llvm.lifetime.end.p0i8(i64 1040, i8* nonnull %13) #5
  ret i32 %126
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @aom_comp_mask_pred_ssse3(i8* nocapture, i8*, i32, i32, i8*, i32, i8* nocapture readonly, i32, i32) local_unnamed_addr #2 {
  %10 = icmp ne i32 %8, 0
  %11 = select i1 %10, i8* %1, i8* %4
  %12 = select i1 %10, i8* %4, i8* %1
  %13 = select i1 %10, i32 %2, i32 %5
  %14 = select i1 %10, i32 %5, i32 %2
  switch i32 %2, label %25 [
    i32 8, label %31
    i32 16, label %15
  ]

15:                                               ; preds = %9
  %16 = sext i32 %13 to i64
  %17 = sext i32 %14 to i64
  %18 = sext i32 %7 to i64
  %19 = shl i32 %13, 1
  %20 = sext i32 %19 to i64
  %21 = shl i32 %14, 1
  %22 = sext i32 %21 to i64
  %23 = shl i32 %7, 1
  %24 = sext i32 %23 to i64
  br label %92

25:                                               ; preds = %9
  %26 = sext i32 %13 to i64
  %27 = icmp sgt i32 %2, 0
  %28 = sext i32 %14 to i64
  %29 = sext i32 %7 to i64
  %30 = sext i32 %2 to i64
  br label %138

31:                                               ; preds = %9
  %32 = sext i32 %13 to i64
  %33 = sext i32 %14 to i64
  %34 = sext i32 %7 to i64
  %35 = shl i32 %13, 1
  %36 = sext i32 %35 to i64
  %37 = shl i32 %14, 1
  %38 = sext i32 %37 to i64
  %39 = shl i32 %7, 1
  %40 = sext i32 %39 to i64
  br label %41

41:                                               ; preds = %41, %31
  %42 = phi i32 [ 0, %31 ], [ %90, %41 ]
  %43 = phi i8* [ %6, %31 ], [ %89, %41 ]
  %44 = phi i8* [ %12, %31 ], [ %88, %41 ]
  %45 = phi i8* [ %11, %31 ], [ %87, %41 ]
  %46 = phi i8* [ %0, %31 ], [ %86, %41 ]
  %47 = bitcast i8* %45 to i64*
  %48 = load i64, i64* %47, align 1
  %49 = insertelement <2 x i64> undef, i64 %48, i32 0
  %50 = bitcast i8* %44 to i64*
  %51 = load i64, i64* %50, align 1
  %52 = insertelement <2 x i64> undef, i64 %51, i32 0
  %53 = bitcast i8* %43 to i64*
  %54 = load i64, i64* %53, align 1
  %55 = insertelement <2 x i64> undef, i64 %54, i32 0
  %56 = getelementptr inbounds i8, i8* %45, i64 %32
  %57 = bitcast i8* %56 to i64*
  %58 = load i64, i64* %57, align 1
  %59 = insertelement <2 x i64> undef, i64 %58, i32 0
  %60 = getelementptr inbounds i8, i8* %44, i64 %33
  %61 = bitcast i8* %60 to i64*
  %62 = load i64, i64* %61, align 1
  %63 = insertelement <2 x i64> undef, i64 %62, i32 0
  %64 = bitcast <2 x i64> %55 to <4 x float>
  %65 = getelementptr inbounds i8, i8* %43, i64 %34
  %66 = bitcast i8* %65 to <2 x float>*
  %67 = load <2 x float>, <2 x float>* %66, align 1
  %68 = shufflevector <2 x float> %67, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %69 = shufflevector <4 x float> %64, <4 x float> %68, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %70 = bitcast <2 x i64> %49 to <16 x i8>
  %71 = bitcast <2 x i64> %52 to <16 x i8>
  %72 = shufflevector <16 x i8> %70, <16 x i8> %71, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %73 = bitcast <2 x i64> %59 to <16 x i8>
  %74 = bitcast <2 x i64> %63 to <16 x i8>
  %75 = shufflevector <16 x i8> %73, <16 x i8> %74, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %76 = bitcast <4 x float> %69 to <16 x i8>
  %77 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %76
  %78 = shufflevector <16 x i8> %76, <16 x i8> %77, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %79 = shufflevector <16 x i8> %76, <16 x i8> %77, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %80 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %72, <16 x i8> %78) #5
  %81 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %75, <16 x i8> %79) #5
  %82 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %80, <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %83 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %81, <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %84 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %82, <8 x i16> %83) #5
  %85 = bitcast i8* %46 to <16 x i8>*
  store <16 x i8> %84, <16 x i8>* %85, align 16
  %86 = getelementptr inbounds i8, i8* %46, i64 16
  %87 = getelementptr inbounds i8, i8* %45, i64 %36
  %88 = getelementptr inbounds i8, i8* %44, i64 %38
  %89 = getelementptr inbounds i8, i8* %43, i64 %40
  %90 = add nuw nsw i32 %42, 2
  %91 = icmp slt i32 %90, %3
  br i1 %91, label %41, label %194

92:                                               ; preds = %15, %92
  %93 = phi i8* [ %135, %92 ], [ %6, %15 ]
  %94 = phi i8* [ %132, %92 ], [ %0, %15 ]
  %95 = phi i8* [ %133, %92 ], [ %11, %15 ]
  %96 = phi i8* [ %134, %92 ], [ %12, %15 ]
  %97 = phi i32 [ %136, %92 ], [ 0, %15 ]
  %98 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %95) #5
  %99 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %96) #5
  %100 = bitcast i8* %93 to <16 x i8>*
  %101 = load <16 x i8>, <16 x i8>* %100, align 16
  %102 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %101
  %103 = shufflevector <16 x i8> %98, <16 x i8> %99, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %104 = shufflevector <16 x i8> %101, <16 x i8> %102, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %105 = shufflevector <16 x i8> %98, <16 x i8> %99, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %106 = shufflevector <16 x i8> %101, <16 x i8> %102, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %107 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %103, <16 x i8> %104) #5
  %108 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %105, <16 x i8> %106) #5
  %109 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %107, <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %110 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %108, <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %111 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %109, <8 x i16> %110) #5
  %112 = bitcast i8* %94 to <16 x i8>*
  store <16 x i8> %111, <16 x i8>* %112, align 16
  %113 = getelementptr inbounds i8, i8* %95, i64 %16
  %114 = getelementptr inbounds i8, i8* %96, i64 %17
  %115 = getelementptr inbounds i8, i8* %93, i64 %18
  %116 = getelementptr inbounds i8, i8* %94, i64 16
  %117 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %113) #5
  %118 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %114) #5
  %119 = bitcast i8* %115 to <16 x i8>*
  %120 = load <16 x i8>, <16 x i8>* %119, align 16
  %121 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %120
  %122 = shufflevector <16 x i8> %117, <16 x i8> %118, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %123 = shufflevector <16 x i8> %120, <16 x i8> %121, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %124 = shufflevector <16 x i8> %117, <16 x i8> %118, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %125 = shufflevector <16 x i8> %120, <16 x i8> %121, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %126 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %122, <16 x i8> %123) #5
  %127 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %124, <16 x i8> %125) #5
  %128 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %126, <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %129 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %127, <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %130 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %128, <8 x i16> %129) #5
  %131 = bitcast i8* %116 to <16 x i8>*
  store <16 x i8> %130, <16 x i8>* %131, align 16
  %132 = getelementptr inbounds i8, i8* %94, i64 32
  %133 = getelementptr inbounds i8, i8* %95, i64 %20
  %134 = getelementptr inbounds i8, i8* %96, i64 %22
  %135 = getelementptr inbounds i8, i8* %93, i64 %24
  %136 = add nuw nsw i32 %97, 2
  %137 = icmp slt i32 %136, %3
  br i1 %137, label %92, label %194

138:                                              ; preds = %25, %144
  %139 = phi i8* [ %148, %144 ], [ %6, %25 ]
  %140 = phi i8* [ %145, %144 ], [ %0, %25 ]
  %141 = phi i8* [ %146, %144 ], [ %11, %25 ]
  %142 = phi i8* [ %147, %144 ], [ %12, %25 ]
  %143 = phi i32 [ %149, %144 ], [ 0, %25 ]
  br i1 %27, label %151, label %144

144:                                              ; preds = %151, %138
  %145 = phi i8* [ %140, %138 ], [ %191, %151 ]
  %146 = getelementptr inbounds i8, i8* %141, i64 %26
  %147 = getelementptr inbounds i8, i8* %142, i64 %28
  %148 = getelementptr inbounds i8, i8* %139, i64 %29
  %149 = add nuw nsw i32 %143, 1
  %150 = icmp slt i32 %149, %3
  br i1 %150, label %138, label %194

151:                                              ; preds = %138, %151
  %152 = phi i64 [ %192, %151 ], [ 0, %138 ]
  %153 = phi i8* [ %191, %151 ], [ %140, %138 ]
  %154 = getelementptr inbounds i8, i8* %141, i64 %152
  %155 = getelementptr inbounds i8, i8* %142, i64 %152
  %156 = getelementptr inbounds i8, i8* %139, i64 %152
  %157 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %154) #5
  %158 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %155) #5
  %159 = bitcast i8* %156 to <16 x i8>*
  %160 = load <16 x i8>, <16 x i8>* %159, align 16
  %161 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %160
  %162 = shufflevector <16 x i8> %157, <16 x i8> %158, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %163 = shufflevector <16 x i8> %160, <16 x i8> %161, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %164 = shufflevector <16 x i8> %157, <16 x i8> %158, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %165 = shufflevector <16 x i8> %160, <16 x i8> %161, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %166 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %162, <16 x i8> %163) #5
  %167 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %164, <16 x i8> %165) #5
  %168 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %166, <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %169 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %167, <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %170 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %168, <8 x i16> %169) #5
  %171 = bitcast i8* %153 to <16 x i8>*
  store <16 x i8> %170, <16 x i8>* %171, align 16
  %172 = getelementptr inbounds i8, i8* %154, i64 16
  %173 = getelementptr inbounds i8, i8* %155, i64 16
  %174 = getelementptr inbounds i8, i8* %156, i64 16
  %175 = getelementptr inbounds i8, i8* %153, i64 16
  %176 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %172) #5
  %177 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %173) #5
  %178 = bitcast i8* %174 to <16 x i8>*
  %179 = load <16 x i8>, <16 x i8>* %178, align 16
  %180 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %179
  %181 = shufflevector <16 x i8> %176, <16 x i8> %177, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %182 = shufflevector <16 x i8> %179, <16 x i8> %180, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %183 = shufflevector <16 x i8> %176, <16 x i8> %177, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %184 = shufflevector <16 x i8> %179, <16 x i8> %180, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %185 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %181, <16 x i8> %182) #5
  %186 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %183, <16 x i8> %184) #5
  %187 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %185, <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %188 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %186, <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %189 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %187, <8 x i16> %188) #5
  %190 = bitcast i8* %175 to <16 x i8>*
  store <16 x i8> %189, <16 x i8>* %190, align 16
  %191 = getelementptr inbounds i8, i8* %153, i64 32
  %192 = add nuw nsw i64 %152, 32
  %193 = icmp slt i64 %192, %30
  br i1 %193, label %151, label %144

194:                                              ; preds = %92, %41, %144
  ret void
}

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8>, <16 x i8>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8>, <16 x i8>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32>, <4 x i32>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind readonly
declare <16 x i8> @llvm.x86.sse3.ldu.dq(i8*) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { nounwind readonly }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !3}
