; ModuleID = '../../third_party/libaom/source/libaom/aom_dsp/x86/masked_sad_intrin_avx2.c'
source_filename = "../../third_party/libaom/source/libaom/aom_dsp/x86/masked_sad_intrin_avx2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind ssp uwtable
define hidden i32 @aom_masked_sad4x4_avx2(i8*, i32, i8*, i32, i8*, i8*, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %10, label %12

10:                                               ; preds = %8
  %11 = tail call i32 @aom_masked_sad4xh_ssse3(i8* %0, i32 %1, i8* %2, i32 %3, i8* %4, i32 4, i8* %5, i32 %6, i32 4) #5
  br label %14

12:                                               ; preds = %8
  %13 = tail call i32 @aom_masked_sad4xh_ssse3(i8* %0, i32 %1, i8* %4, i32 4, i8* %2, i32 %3, i8* %5, i32 %6, i32 4) #5
  br label %14

14:                                               ; preds = %10, %12
  %15 = phi i32 [ %13, %12 ], [ %11, %10 ]
  ret i32 %15
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @aom_masked_sad4x8_avx2(i8*, i32, i8*, i32, i8*, i8*, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %10, label %12

10:                                               ; preds = %8
  %11 = tail call i32 @aom_masked_sad4xh_ssse3(i8* %0, i32 %1, i8* %2, i32 %3, i8* %4, i32 4, i8* %5, i32 %6, i32 8) #5
  br label %14

12:                                               ; preds = %8
  %13 = tail call i32 @aom_masked_sad4xh_ssse3(i8* %0, i32 %1, i8* %4, i32 4, i8* %2, i32 %3, i8* %5, i32 %6, i32 8) #5
  br label %14

14:                                               ; preds = %10, %12
  %15 = phi i32 [ %13, %12 ], [ %11, %10 ]
  ret i32 %15
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @aom_masked_sad8x4_avx2(i8*, i32, i8*, i32, i8*, i8*, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %10, label %12

10:                                               ; preds = %8
  %11 = tail call i32 @aom_masked_sad8xh_ssse3(i8* %0, i32 %1, i8* %2, i32 %3, i8* %4, i32 8, i8* %5, i32 %6, i32 4) #5
  br label %14

12:                                               ; preds = %8
  %13 = tail call i32 @aom_masked_sad8xh_ssse3(i8* %0, i32 %1, i8* %4, i32 8, i8* %2, i32 %3, i8* %5, i32 %6, i32 4) #5
  br label %14

14:                                               ; preds = %10, %12
  %15 = phi i32 [ %13, %12 ], [ %11, %10 ]
  ret i32 %15
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @aom_masked_sad8x8_avx2(i8*, i32, i8*, i32, i8*, i8*, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %10, label %12

10:                                               ; preds = %8
  %11 = tail call i32 @aom_masked_sad8xh_ssse3(i8* %0, i32 %1, i8* %2, i32 %3, i8* %4, i32 8, i8* %5, i32 %6, i32 8) #5
  br label %14

12:                                               ; preds = %8
  %13 = tail call i32 @aom_masked_sad8xh_ssse3(i8* %0, i32 %1, i8* %4, i32 8, i8* %2, i32 %3, i8* %5, i32 %6, i32 8) #5
  br label %14

14:                                               ; preds = %10, %12
  %15 = phi i32 [ %13, %12 ], [ %11, %10 ]
  ret i32 %15
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @aom_masked_sad8x16_avx2(i8*, i32, i8*, i32, i8*, i8*, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %10, label %12

10:                                               ; preds = %8
  %11 = tail call i32 @aom_masked_sad8xh_ssse3(i8* %0, i32 %1, i8* %2, i32 %3, i8* %4, i32 8, i8* %5, i32 %6, i32 16) #5
  br label %14

12:                                               ; preds = %8
  %13 = tail call i32 @aom_masked_sad8xh_ssse3(i8* %0, i32 %1, i8* %4, i32 8, i8* %2, i32 %3, i8* %5, i32 %6, i32 16) #5
  br label %14

14:                                               ; preds = %10, %12
  %15 = phi i32 [ %13, %12 ], [ %11, %10 ]
  ret i32 %15
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad16x8_avx2(i8*, i32, i8*, i32, i8*, i8*, i32, i32) local_unnamed_addr #1 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  %13 = shl i32 %1, 1
  %14 = sext i32 %13 to i64
  %15 = shl i32 %3, 1
  %16 = sext i32 %15 to i64
  %17 = shl i32 %6, 1
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds i8, i8* %0, i64 %10
  %20 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %0) #5
  %21 = bitcast <16 x i8> %20 to <2 x i64>
  %22 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %19) #5
  %23 = bitcast <16 x i8> %22 to <2 x i64>
  %24 = shufflevector <2 x i64> %21, <2 x i64> %23, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  br i1 %9, label %201, label %25

25:                                               ; preds = %8
  %26 = getelementptr inbounds i8, i8* %4, i64 16
  %27 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %4) #5
  %28 = bitcast <16 x i8> %27 to <2 x i64>
  %29 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %26) #5
  %30 = bitcast <16 x i8> %29 to <2 x i64>
  %31 = shufflevector <2 x i64> %28, <2 x i64> %30, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %32 = getelementptr inbounds i8, i8* %2, i64 %11
  %33 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %2) #5
  %34 = bitcast <16 x i8> %33 to <2 x i64>
  %35 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %32) #5
  %36 = bitcast <16 x i8> %35 to <2 x i64>
  %37 = shufflevector <2 x i64> %34, <2 x i64> %36, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %38 = getelementptr inbounds i8, i8* %5, i64 %12
  %39 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %5) #5
  %40 = bitcast <16 x i8> %39 to <2 x i64>
  %41 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %38) #5
  %42 = bitcast <16 x i8> %41 to <2 x i64>
  %43 = shufflevector <2 x i64> %40, <2 x i64> %42, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %44 = bitcast <4 x i64> %43 to <32 x i8>
  %45 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %44
  %46 = bitcast <4 x i64> %31 to <32 x i8>
  %47 = bitcast <4 x i64> %37 to <32 x i8>
  %48 = shufflevector <32 x i8> %46, <32 x i8> %47, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %49 = shufflevector <32 x i8> %44, <32 x i8> %45, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %50 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %48, <32 x i8> %49) #5
  %51 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %50, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %52 = shufflevector <32 x i8> %46, <32 x i8> %47, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %53 = shufflevector <32 x i8> %44, <32 x i8> %45, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %54 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %52, <32 x i8> %53) #5
  %55 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %54, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %56 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %51, <16 x i16> %55) #5
  %57 = bitcast <4 x i64> %24 to <32 x i8>
  %58 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %56, <32 x i8> %57) #5
  %59 = bitcast <4 x i64> %58 to <8 x i32>
  %60 = getelementptr inbounds i8, i8* %0, i64 %14
  %61 = getelementptr inbounds i8, i8* %4, i64 32
  %62 = getelementptr inbounds i8, i8* %2, i64 %16
  %63 = getelementptr inbounds i8, i8* %5, i64 %18
  %64 = getelementptr inbounds i8, i8* %60, i64 %10
  %65 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %60) #5
  %66 = bitcast <16 x i8> %65 to <2 x i64>
  %67 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %64) #5
  %68 = bitcast <16 x i8> %67 to <2 x i64>
  %69 = shufflevector <2 x i64> %66, <2 x i64> %68, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %70 = getelementptr inbounds i8, i8* %4, i64 48
  %71 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %61) #5
  %72 = bitcast <16 x i8> %71 to <2 x i64>
  %73 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %70) #5
  %74 = bitcast <16 x i8> %73 to <2 x i64>
  %75 = shufflevector <2 x i64> %72, <2 x i64> %74, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %76 = getelementptr inbounds i8, i8* %62, i64 %11
  %77 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %62) #5
  %78 = bitcast <16 x i8> %77 to <2 x i64>
  %79 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %76) #5
  %80 = bitcast <16 x i8> %79 to <2 x i64>
  %81 = shufflevector <2 x i64> %78, <2 x i64> %80, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %82 = getelementptr inbounds i8, i8* %63, i64 %12
  %83 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %63) #5
  %84 = bitcast <16 x i8> %83 to <2 x i64>
  %85 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %82) #5
  %86 = bitcast <16 x i8> %85 to <2 x i64>
  %87 = shufflevector <2 x i64> %84, <2 x i64> %86, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %88 = bitcast <4 x i64> %87 to <32 x i8>
  %89 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %88
  %90 = bitcast <4 x i64> %75 to <32 x i8>
  %91 = bitcast <4 x i64> %81 to <32 x i8>
  %92 = shufflevector <32 x i8> %90, <32 x i8> %91, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %93 = shufflevector <32 x i8> %88, <32 x i8> %89, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %94 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %92, <32 x i8> %93) #5
  %95 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %94, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %96 = shufflevector <32 x i8> %90, <32 x i8> %91, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %97 = shufflevector <32 x i8> %88, <32 x i8> %89, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %98 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %96, <32 x i8> %97) #5
  %99 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %98, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %100 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %95, <16 x i16> %99) #5
  %101 = bitcast <4 x i64> %69 to <32 x i8>
  %102 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %100, <32 x i8> %101) #5
  %103 = bitcast <4 x i64> %102 to <8 x i32>
  %104 = add <8 x i32> %59, %103
  %105 = getelementptr inbounds i8, i8* %60, i64 %14
  %106 = getelementptr inbounds i8, i8* %4, i64 64
  %107 = getelementptr inbounds i8, i8* %62, i64 %16
  %108 = getelementptr inbounds i8, i8* %63, i64 %18
  %109 = getelementptr inbounds i8, i8* %105, i64 %10
  %110 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %105) #5
  %111 = bitcast <16 x i8> %110 to <2 x i64>
  %112 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %109) #5
  %113 = bitcast <16 x i8> %112 to <2 x i64>
  %114 = shufflevector <2 x i64> %111, <2 x i64> %113, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %115 = getelementptr inbounds i8, i8* %4, i64 80
  %116 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %106) #5
  %117 = bitcast <16 x i8> %116 to <2 x i64>
  %118 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %115) #5
  %119 = bitcast <16 x i8> %118 to <2 x i64>
  %120 = shufflevector <2 x i64> %117, <2 x i64> %119, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %121 = getelementptr inbounds i8, i8* %107, i64 %11
  %122 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %107) #5
  %123 = bitcast <16 x i8> %122 to <2 x i64>
  %124 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %121) #5
  %125 = bitcast <16 x i8> %124 to <2 x i64>
  %126 = shufflevector <2 x i64> %123, <2 x i64> %125, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %127 = getelementptr inbounds i8, i8* %108, i64 %12
  %128 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %108) #5
  %129 = bitcast <16 x i8> %128 to <2 x i64>
  %130 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %127) #5
  %131 = bitcast <16 x i8> %130 to <2 x i64>
  %132 = shufflevector <2 x i64> %129, <2 x i64> %131, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %133 = bitcast <4 x i64> %132 to <32 x i8>
  %134 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %133
  %135 = bitcast <4 x i64> %120 to <32 x i8>
  %136 = bitcast <4 x i64> %126 to <32 x i8>
  %137 = shufflevector <32 x i8> %135, <32 x i8> %136, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %138 = shufflevector <32 x i8> %133, <32 x i8> %134, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %139 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %137, <32 x i8> %138) #5
  %140 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %139, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %141 = shufflevector <32 x i8> %135, <32 x i8> %136, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %142 = shufflevector <32 x i8> %133, <32 x i8> %134, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %143 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %141, <32 x i8> %142) #5
  %144 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %143, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %145 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %140, <16 x i16> %144) #5
  %146 = bitcast <4 x i64> %114 to <32 x i8>
  %147 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %145, <32 x i8> %146) #5
  %148 = bitcast <4 x i64> %147 to <8 x i32>
  %149 = add <8 x i32> %104, %148
  %150 = getelementptr inbounds i8, i8* %105, i64 %14
  %151 = getelementptr inbounds i8, i8* %4, i64 96
  %152 = getelementptr inbounds i8, i8* %107, i64 %16
  %153 = getelementptr inbounds i8, i8* %108, i64 %18
  %154 = getelementptr inbounds i8, i8* %150, i64 %10
  %155 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %150) #5
  %156 = bitcast <16 x i8> %155 to <2 x i64>
  %157 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %154) #5
  %158 = bitcast <16 x i8> %157 to <2 x i64>
  %159 = shufflevector <2 x i64> %156, <2 x i64> %158, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %160 = getelementptr inbounds i8, i8* %4, i64 112
  %161 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %151) #5
  %162 = bitcast <16 x i8> %161 to <2 x i64>
  %163 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %160) #5
  %164 = bitcast <16 x i8> %163 to <2 x i64>
  %165 = shufflevector <2 x i64> %162, <2 x i64> %164, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %166 = getelementptr inbounds i8, i8* %152, i64 %11
  %167 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %152) #5
  %168 = bitcast <16 x i8> %167 to <2 x i64>
  %169 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %166) #5
  %170 = bitcast <16 x i8> %169 to <2 x i64>
  %171 = shufflevector <2 x i64> %168, <2 x i64> %170, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %172 = getelementptr inbounds i8, i8* %153, i64 %12
  %173 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %153) #5
  %174 = bitcast <16 x i8> %173 to <2 x i64>
  %175 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %172) #5
  %176 = bitcast <16 x i8> %175 to <2 x i64>
  %177 = shufflevector <2 x i64> %174, <2 x i64> %176, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %178 = bitcast <4 x i64> %177 to <32 x i8>
  %179 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %178
  %180 = bitcast <4 x i64> %165 to <32 x i8>
  %181 = bitcast <4 x i64> %171 to <32 x i8>
  %182 = shufflevector <32 x i8> %180, <32 x i8> %181, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %183 = shufflevector <32 x i8> %178, <32 x i8> %179, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %184 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %182, <32 x i8> %183) #5
  %185 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %184, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %186 = shufflevector <32 x i8> %180, <32 x i8> %181, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %187 = shufflevector <32 x i8> %178, <32 x i8> %179, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %188 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %186, <32 x i8> %187) #5
  %189 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %188, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %190 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %185, <16 x i16> %189) #5
  %191 = bitcast <4 x i64> %159 to <32 x i8>
  %192 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %190, <32 x i8> %191) #5
  %193 = bitcast <4 x i64> %192 to <8 x i32>
  %194 = add <8 x i32> %149, %193
  %195 = shufflevector <8 x i32> %194, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 1, i32 3, i32 4, i32 6, i32 5, i32 7>
  %196 = bitcast <8 x i32> %195 to <4 x i64>
  %197 = shufflevector <4 x i64> %196, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %198 = bitcast <4 x i64> %197 to <8 x i32>
  %199 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %198, <8 x i32> %198) #5
  %200 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %199, <8 x i32> %199) #5
  br label %377

201:                                              ; preds = %8
  %202 = getelementptr inbounds i8, i8* %2, i64 %11
  %203 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %2) #5
  %204 = bitcast <16 x i8> %203 to <2 x i64>
  %205 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %202) #5
  %206 = bitcast <16 x i8> %205 to <2 x i64>
  %207 = shufflevector <2 x i64> %204, <2 x i64> %206, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %208 = getelementptr inbounds i8, i8* %4, i64 16
  %209 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %4) #5
  %210 = bitcast <16 x i8> %209 to <2 x i64>
  %211 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %208) #5
  %212 = bitcast <16 x i8> %211 to <2 x i64>
  %213 = shufflevector <2 x i64> %210, <2 x i64> %212, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %214 = getelementptr inbounds i8, i8* %5, i64 %12
  %215 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %5) #5
  %216 = bitcast <16 x i8> %215 to <2 x i64>
  %217 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %214) #5
  %218 = bitcast <16 x i8> %217 to <2 x i64>
  %219 = shufflevector <2 x i64> %216, <2 x i64> %218, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %220 = bitcast <4 x i64> %219 to <32 x i8>
  %221 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %220
  %222 = bitcast <4 x i64> %207 to <32 x i8>
  %223 = bitcast <4 x i64> %213 to <32 x i8>
  %224 = shufflevector <32 x i8> %222, <32 x i8> %223, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %225 = shufflevector <32 x i8> %220, <32 x i8> %221, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %226 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %224, <32 x i8> %225) #5
  %227 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %226, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %228 = shufflevector <32 x i8> %222, <32 x i8> %223, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %229 = shufflevector <32 x i8> %220, <32 x i8> %221, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %230 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %228, <32 x i8> %229) #5
  %231 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %230, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %232 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %227, <16 x i16> %231) #5
  %233 = bitcast <4 x i64> %24 to <32 x i8>
  %234 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %232, <32 x i8> %233) #5
  %235 = bitcast <4 x i64> %234 to <8 x i32>
  %236 = getelementptr inbounds i8, i8* %0, i64 %14
  %237 = getelementptr inbounds i8, i8* %2, i64 %16
  %238 = getelementptr inbounds i8, i8* %4, i64 32
  %239 = getelementptr inbounds i8, i8* %5, i64 %18
  %240 = getelementptr inbounds i8, i8* %236, i64 %10
  %241 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %236) #5
  %242 = bitcast <16 x i8> %241 to <2 x i64>
  %243 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %240) #5
  %244 = bitcast <16 x i8> %243 to <2 x i64>
  %245 = shufflevector <2 x i64> %242, <2 x i64> %244, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %246 = getelementptr inbounds i8, i8* %237, i64 %11
  %247 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %237) #5
  %248 = bitcast <16 x i8> %247 to <2 x i64>
  %249 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %246) #5
  %250 = bitcast <16 x i8> %249 to <2 x i64>
  %251 = shufflevector <2 x i64> %248, <2 x i64> %250, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %252 = getelementptr inbounds i8, i8* %4, i64 48
  %253 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %238) #5
  %254 = bitcast <16 x i8> %253 to <2 x i64>
  %255 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %252) #5
  %256 = bitcast <16 x i8> %255 to <2 x i64>
  %257 = shufflevector <2 x i64> %254, <2 x i64> %256, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %258 = getelementptr inbounds i8, i8* %239, i64 %12
  %259 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %239) #5
  %260 = bitcast <16 x i8> %259 to <2 x i64>
  %261 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %258) #5
  %262 = bitcast <16 x i8> %261 to <2 x i64>
  %263 = shufflevector <2 x i64> %260, <2 x i64> %262, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %264 = bitcast <4 x i64> %263 to <32 x i8>
  %265 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %264
  %266 = bitcast <4 x i64> %251 to <32 x i8>
  %267 = bitcast <4 x i64> %257 to <32 x i8>
  %268 = shufflevector <32 x i8> %266, <32 x i8> %267, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %269 = shufflevector <32 x i8> %264, <32 x i8> %265, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %270 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %268, <32 x i8> %269) #5
  %271 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %270, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %272 = shufflevector <32 x i8> %266, <32 x i8> %267, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %273 = shufflevector <32 x i8> %264, <32 x i8> %265, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %274 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %272, <32 x i8> %273) #5
  %275 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %274, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %276 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %271, <16 x i16> %275) #5
  %277 = bitcast <4 x i64> %245 to <32 x i8>
  %278 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %276, <32 x i8> %277) #5
  %279 = bitcast <4 x i64> %278 to <8 x i32>
  %280 = add <8 x i32> %235, %279
  %281 = getelementptr inbounds i8, i8* %236, i64 %14
  %282 = getelementptr inbounds i8, i8* %237, i64 %16
  %283 = getelementptr inbounds i8, i8* %4, i64 64
  %284 = getelementptr inbounds i8, i8* %239, i64 %18
  %285 = getelementptr inbounds i8, i8* %281, i64 %10
  %286 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %281) #5
  %287 = bitcast <16 x i8> %286 to <2 x i64>
  %288 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %285) #5
  %289 = bitcast <16 x i8> %288 to <2 x i64>
  %290 = shufflevector <2 x i64> %287, <2 x i64> %289, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %291 = getelementptr inbounds i8, i8* %282, i64 %11
  %292 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %282) #5
  %293 = bitcast <16 x i8> %292 to <2 x i64>
  %294 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %291) #5
  %295 = bitcast <16 x i8> %294 to <2 x i64>
  %296 = shufflevector <2 x i64> %293, <2 x i64> %295, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %297 = getelementptr inbounds i8, i8* %4, i64 80
  %298 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %283) #5
  %299 = bitcast <16 x i8> %298 to <2 x i64>
  %300 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %297) #5
  %301 = bitcast <16 x i8> %300 to <2 x i64>
  %302 = shufflevector <2 x i64> %299, <2 x i64> %301, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %303 = getelementptr inbounds i8, i8* %284, i64 %12
  %304 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %284) #5
  %305 = bitcast <16 x i8> %304 to <2 x i64>
  %306 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %303) #5
  %307 = bitcast <16 x i8> %306 to <2 x i64>
  %308 = shufflevector <2 x i64> %305, <2 x i64> %307, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %309 = bitcast <4 x i64> %308 to <32 x i8>
  %310 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %309
  %311 = bitcast <4 x i64> %296 to <32 x i8>
  %312 = bitcast <4 x i64> %302 to <32 x i8>
  %313 = shufflevector <32 x i8> %311, <32 x i8> %312, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %314 = shufflevector <32 x i8> %309, <32 x i8> %310, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %315 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %313, <32 x i8> %314) #5
  %316 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %315, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %317 = shufflevector <32 x i8> %311, <32 x i8> %312, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %318 = shufflevector <32 x i8> %309, <32 x i8> %310, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %319 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %317, <32 x i8> %318) #5
  %320 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %319, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %321 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %316, <16 x i16> %320) #5
  %322 = bitcast <4 x i64> %290 to <32 x i8>
  %323 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %321, <32 x i8> %322) #5
  %324 = bitcast <4 x i64> %323 to <8 x i32>
  %325 = add <8 x i32> %280, %324
  %326 = getelementptr inbounds i8, i8* %281, i64 %14
  %327 = getelementptr inbounds i8, i8* %282, i64 %16
  %328 = getelementptr inbounds i8, i8* %4, i64 96
  %329 = getelementptr inbounds i8, i8* %284, i64 %18
  %330 = getelementptr inbounds i8, i8* %326, i64 %10
  %331 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %326) #5
  %332 = bitcast <16 x i8> %331 to <2 x i64>
  %333 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %330) #5
  %334 = bitcast <16 x i8> %333 to <2 x i64>
  %335 = shufflevector <2 x i64> %332, <2 x i64> %334, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %336 = getelementptr inbounds i8, i8* %327, i64 %11
  %337 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %327) #5
  %338 = bitcast <16 x i8> %337 to <2 x i64>
  %339 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %336) #5
  %340 = bitcast <16 x i8> %339 to <2 x i64>
  %341 = shufflevector <2 x i64> %338, <2 x i64> %340, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %342 = getelementptr inbounds i8, i8* %4, i64 112
  %343 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %328) #5
  %344 = bitcast <16 x i8> %343 to <2 x i64>
  %345 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %342) #5
  %346 = bitcast <16 x i8> %345 to <2 x i64>
  %347 = shufflevector <2 x i64> %344, <2 x i64> %346, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %348 = getelementptr inbounds i8, i8* %329, i64 %12
  %349 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %329) #5
  %350 = bitcast <16 x i8> %349 to <2 x i64>
  %351 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %348) #5
  %352 = bitcast <16 x i8> %351 to <2 x i64>
  %353 = shufflevector <2 x i64> %350, <2 x i64> %352, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %354 = bitcast <4 x i64> %353 to <32 x i8>
  %355 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %354
  %356 = bitcast <4 x i64> %341 to <32 x i8>
  %357 = bitcast <4 x i64> %347 to <32 x i8>
  %358 = shufflevector <32 x i8> %356, <32 x i8> %357, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %359 = shufflevector <32 x i8> %354, <32 x i8> %355, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %360 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %358, <32 x i8> %359) #5
  %361 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %360, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %362 = shufflevector <32 x i8> %356, <32 x i8> %357, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %363 = shufflevector <32 x i8> %354, <32 x i8> %355, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %364 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %362, <32 x i8> %363) #5
  %365 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %364, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %366 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %361, <16 x i16> %365) #5
  %367 = bitcast <4 x i64> %335 to <32 x i8>
  %368 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %366, <32 x i8> %367) #5
  %369 = bitcast <4 x i64> %368 to <8 x i32>
  %370 = add <8 x i32> %325, %369
  %371 = shufflevector <8 x i32> %370, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 1, i32 3, i32 4, i32 6, i32 5, i32 7>
  %372 = bitcast <8 x i32> %371 to <4 x i64>
  %373 = shufflevector <4 x i64> %372, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %374 = bitcast <4 x i64> %373 to <8 x i32>
  %375 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %374, <8 x i32> %374) #5
  %376 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %375, <8 x i32> %375) #5
  br label %377

377:                                              ; preds = %201, %25
  %378 = phi <8 x i32> [ %376, %201 ], [ %200, %25 ]
  %379 = extractelement <8 x i32> %378, i64 0
  ret i32 %379
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad16x16_avx2(i8*, i32, i8*, i32, i8*, i8*, i32, i32) local_unnamed_addr #1 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  %13 = shl i32 %1, 1
  %14 = sext i32 %13 to i64
  %15 = shl i32 %3, 1
  %16 = sext i32 %15 to i64
  %17 = shl i32 %6, 1
  %18 = sext i32 %17 to i64
  br i1 %9, label %19, label %80

19:                                               ; preds = %8, %19
  %20 = phi i8* [ %67, %19 ], [ %0, %8 ]
  %21 = phi i8* [ %68, %19 ], [ %2, %8 ]
  %22 = phi i8* [ %69, %19 ], [ %4, %8 ]
  %23 = phi i8* [ %70, %19 ], [ %5, %8 ]
  %24 = phi i32 [ %71, %19 ], [ 0, %8 ]
  %25 = phi <8 x i32> [ %66, %19 ], [ zeroinitializer, %8 ]
  %26 = getelementptr inbounds i8, i8* %20, i64 %10
  %27 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %20) #5
  %28 = bitcast <16 x i8> %27 to <2 x i64>
  %29 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %26) #5
  %30 = bitcast <16 x i8> %29 to <2 x i64>
  %31 = shufflevector <2 x i64> %28, <2 x i64> %30, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %32 = getelementptr inbounds i8, i8* %21, i64 %11
  %33 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %21) #5
  %34 = bitcast <16 x i8> %33 to <2 x i64>
  %35 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %32) #5
  %36 = bitcast <16 x i8> %35 to <2 x i64>
  %37 = shufflevector <2 x i64> %34, <2 x i64> %36, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %38 = getelementptr inbounds i8, i8* %22, i64 16
  %39 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %22) #5
  %40 = bitcast <16 x i8> %39 to <2 x i64>
  %41 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %38) #5
  %42 = bitcast <16 x i8> %41 to <2 x i64>
  %43 = shufflevector <2 x i64> %40, <2 x i64> %42, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %44 = getelementptr inbounds i8, i8* %23, i64 %12
  %45 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %23) #5
  %46 = bitcast <16 x i8> %45 to <2 x i64>
  %47 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %44) #5
  %48 = bitcast <16 x i8> %47 to <2 x i64>
  %49 = shufflevector <2 x i64> %46, <2 x i64> %48, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %50 = bitcast <4 x i64> %49 to <32 x i8>
  %51 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %50
  %52 = bitcast <4 x i64> %37 to <32 x i8>
  %53 = bitcast <4 x i64> %43 to <32 x i8>
  %54 = shufflevector <32 x i8> %52, <32 x i8> %53, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %55 = shufflevector <32 x i8> %50, <32 x i8> %51, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %56 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %54, <32 x i8> %55) #5
  %57 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %56, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %58 = shufflevector <32 x i8> %52, <32 x i8> %53, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %59 = shufflevector <32 x i8> %50, <32 x i8> %51, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %60 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %58, <32 x i8> %59) #5
  %61 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %60, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %62 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %57, <16 x i16> %61) #5
  %63 = bitcast <4 x i64> %31 to <32 x i8>
  %64 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %62, <32 x i8> %63) #5
  %65 = bitcast <4 x i64> %64 to <8 x i32>
  %66 = add <8 x i32> %25, %65
  %67 = getelementptr inbounds i8, i8* %20, i64 %14
  %68 = getelementptr inbounds i8, i8* %21, i64 %16
  %69 = getelementptr inbounds i8, i8* %22, i64 32
  %70 = getelementptr inbounds i8, i8* %23, i64 %18
  %71 = add nuw nsw i32 %24, 2
  %72 = icmp ult i32 %71, 16
  br i1 %72, label %19, label %73

73:                                               ; preds = %19
  %74 = shufflevector <8 x i32> %66, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 1, i32 3, i32 4, i32 6, i32 5, i32 7>
  %75 = bitcast <8 x i32> %74 to <4 x i64>
  %76 = shufflevector <4 x i64> %75, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %77 = bitcast <4 x i64> %76 to <8 x i32>
  %78 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %77, <8 x i32> %77) #5
  %79 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %78, <8 x i32> %78) #5
  br label %141

80:                                               ; preds = %8, %80
  %81 = phi i8* [ %128, %80 ], [ %0, %8 ]
  %82 = phi i8* [ %129, %80 ], [ %4, %8 ]
  %83 = phi i8* [ %130, %80 ], [ %2, %8 ]
  %84 = phi i8* [ %131, %80 ], [ %5, %8 ]
  %85 = phi i32 [ %132, %80 ], [ 0, %8 ]
  %86 = phi <8 x i32> [ %127, %80 ], [ zeroinitializer, %8 ]
  %87 = getelementptr inbounds i8, i8* %81, i64 %10
  %88 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %81) #5
  %89 = bitcast <16 x i8> %88 to <2 x i64>
  %90 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %87) #5
  %91 = bitcast <16 x i8> %90 to <2 x i64>
  %92 = shufflevector <2 x i64> %89, <2 x i64> %91, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %93 = getelementptr inbounds i8, i8* %82, i64 16
  %94 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %82) #5
  %95 = bitcast <16 x i8> %94 to <2 x i64>
  %96 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %93) #5
  %97 = bitcast <16 x i8> %96 to <2 x i64>
  %98 = shufflevector <2 x i64> %95, <2 x i64> %97, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %99 = getelementptr inbounds i8, i8* %83, i64 %11
  %100 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %83) #5
  %101 = bitcast <16 x i8> %100 to <2 x i64>
  %102 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %99) #5
  %103 = bitcast <16 x i8> %102 to <2 x i64>
  %104 = shufflevector <2 x i64> %101, <2 x i64> %103, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %105 = getelementptr inbounds i8, i8* %84, i64 %12
  %106 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %84) #5
  %107 = bitcast <16 x i8> %106 to <2 x i64>
  %108 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %105) #5
  %109 = bitcast <16 x i8> %108 to <2 x i64>
  %110 = shufflevector <2 x i64> %107, <2 x i64> %109, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %111 = bitcast <4 x i64> %110 to <32 x i8>
  %112 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %111
  %113 = bitcast <4 x i64> %98 to <32 x i8>
  %114 = bitcast <4 x i64> %104 to <32 x i8>
  %115 = shufflevector <32 x i8> %113, <32 x i8> %114, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %116 = shufflevector <32 x i8> %111, <32 x i8> %112, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %117 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %115, <32 x i8> %116) #5
  %118 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %117, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %119 = shufflevector <32 x i8> %113, <32 x i8> %114, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %120 = shufflevector <32 x i8> %111, <32 x i8> %112, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %121 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %119, <32 x i8> %120) #5
  %122 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %121, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %123 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %118, <16 x i16> %122) #5
  %124 = bitcast <4 x i64> %92 to <32 x i8>
  %125 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %123, <32 x i8> %124) #5
  %126 = bitcast <4 x i64> %125 to <8 x i32>
  %127 = add <8 x i32> %86, %126
  %128 = getelementptr inbounds i8, i8* %81, i64 %14
  %129 = getelementptr inbounds i8, i8* %82, i64 32
  %130 = getelementptr inbounds i8, i8* %83, i64 %16
  %131 = getelementptr inbounds i8, i8* %84, i64 %18
  %132 = add nuw nsw i32 %85, 2
  %133 = icmp ult i32 %132, 16
  br i1 %133, label %80, label %134

134:                                              ; preds = %80
  %135 = shufflevector <8 x i32> %127, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 1, i32 3, i32 4, i32 6, i32 5, i32 7>
  %136 = bitcast <8 x i32> %135 to <4 x i64>
  %137 = shufflevector <4 x i64> %136, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %138 = bitcast <4 x i64> %137 to <8 x i32>
  %139 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %138, <8 x i32> %138) #5
  %140 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %139, <8 x i32> %139) #5
  br label %141

141:                                              ; preds = %73, %134
  %142 = phi <8 x i32> [ %79, %73 ], [ %140, %134 ]
  %143 = extractelement <8 x i32> %142, i64 0
  ret i32 %143
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad16x32_avx2(i8*, i32, i8*, i32, i8*, i8*, i32, i32) local_unnamed_addr #1 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  %13 = shl i32 %1, 1
  %14 = sext i32 %13 to i64
  %15 = shl i32 %3, 1
  %16 = sext i32 %15 to i64
  %17 = shl i32 %6, 1
  %18 = sext i32 %17 to i64
  br i1 %9, label %19, label %80

19:                                               ; preds = %8, %19
  %20 = phi i8* [ %67, %19 ], [ %0, %8 ]
  %21 = phi i8* [ %68, %19 ], [ %2, %8 ]
  %22 = phi i8* [ %69, %19 ], [ %4, %8 ]
  %23 = phi i8* [ %70, %19 ], [ %5, %8 ]
  %24 = phi i32 [ %71, %19 ], [ 0, %8 ]
  %25 = phi <8 x i32> [ %66, %19 ], [ zeroinitializer, %8 ]
  %26 = getelementptr inbounds i8, i8* %20, i64 %10
  %27 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %20) #5
  %28 = bitcast <16 x i8> %27 to <2 x i64>
  %29 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %26) #5
  %30 = bitcast <16 x i8> %29 to <2 x i64>
  %31 = shufflevector <2 x i64> %28, <2 x i64> %30, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %32 = getelementptr inbounds i8, i8* %21, i64 %11
  %33 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %21) #5
  %34 = bitcast <16 x i8> %33 to <2 x i64>
  %35 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %32) #5
  %36 = bitcast <16 x i8> %35 to <2 x i64>
  %37 = shufflevector <2 x i64> %34, <2 x i64> %36, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %38 = getelementptr inbounds i8, i8* %22, i64 16
  %39 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %22) #5
  %40 = bitcast <16 x i8> %39 to <2 x i64>
  %41 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %38) #5
  %42 = bitcast <16 x i8> %41 to <2 x i64>
  %43 = shufflevector <2 x i64> %40, <2 x i64> %42, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %44 = getelementptr inbounds i8, i8* %23, i64 %12
  %45 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %23) #5
  %46 = bitcast <16 x i8> %45 to <2 x i64>
  %47 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %44) #5
  %48 = bitcast <16 x i8> %47 to <2 x i64>
  %49 = shufflevector <2 x i64> %46, <2 x i64> %48, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %50 = bitcast <4 x i64> %49 to <32 x i8>
  %51 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %50
  %52 = bitcast <4 x i64> %37 to <32 x i8>
  %53 = bitcast <4 x i64> %43 to <32 x i8>
  %54 = shufflevector <32 x i8> %52, <32 x i8> %53, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %55 = shufflevector <32 x i8> %50, <32 x i8> %51, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %56 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %54, <32 x i8> %55) #5
  %57 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %56, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %58 = shufflevector <32 x i8> %52, <32 x i8> %53, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %59 = shufflevector <32 x i8> %50, <32 x i8> %51, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %60 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %58, <32 x i8> %59) #5
  %61 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %60, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %62 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %57, <16 x i16> %61) #5
  %63 = bitcast <4 x i64> %31 to <32 x i8>
  %64 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %62, <32 x i8> %63) #5
  %65 = bitcast <4 x i64> %64 to <8 x i32>
  %66 = add <8 x i32> %25, %65
  %67 = getelementptr inbounds i8, i8* %20, i64 %14
  %68 = getelementptr inbounds i8, i8* %21, i64 %16
  %69 = getelementptr inbounds i8, i8* %22, i64 32
  %70 = getelementptr inbounds i8, i8* %23, i64 %18
  %71 = add nuw nsw i32 %24, 2
  %72 = icmp ult i32 %71, 32
  br i1 %72, label %19, label %73

73:                                               ; preds = %19
  %74 = shufflevector <8 x i32> %66, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 1, i32 3, i32 4, i32 6, i32 5, i32 7>
  %75 = bitcast <8 x i32> %74 to <4 x i64>
  %76 = shufflevector <4 x i64> %75, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %77 = bitcast <4 x i64> %76 to <8 x i32>
  %78 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %77, <8 x i32> %77) #5
  %79 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %78, <8 x i32> %78) #5
  br label %141

80:                                               ; preds = %8, %80
  %81 = phi i8* [ %128, %80 ], [ %0, %8 ]
  %82 = phi i8* [ %129, %80 ], [ %4, %8 ]
  %83 = phi i8* [ %130, %80 ], [ %2, %8 ]
  %84 = phi i8* [ %131, %80 ], [ %5, %8 ]
  %85 = phi i32 [ %132, %80 ], [ 0, %8 ]
  %86 = phi <8 x i32> [ %127, %80 ], [ zeroinitializer, %8 ]
  %87 = getelementptr inbounds i8, i8* %81, i64 %10
  %88 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %81) #5
  %89 = bitcast <16 x i8> %88 to <2 x i64>
  %90 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %87) #5
  %91 = bitcast <16 x i8> %90 to <2 x i64>
  %92 = shufflevector <2 x i64> %89, <2 x i64> %91, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %93 = getelementptr inbounds i8, i8* %82, i64 16
  %94 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %82) #5
  %95 = bitcast <16 x i8> %94 to <2 x i64>
  %96 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %93) #5
  %97 = bitcast <16 x i8> %96 to <2 x i64>
  %98 = shufflevector <2 x i64> %95, <2 x i64> %97, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %99 = getelementptr inbounds i8, i8* %83, i64 %11
  %100 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %83) #5
  %101 = bitcast <16 x i8> %100 to <2 x i64>
  %102 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %99) #5
  %103 = bitcast <16 x i8> %102 to <2 x i64>
  %104 = shufflevector <2 x i64> %101, <2 x i64> %103, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %105 = getelementptr inbounds i8, i8* %84, i64 %12
  %106 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %84) #5
  %107 = bitcast <16 x i8> %106 to <2 x i64>
  %108 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %105) #5
  %109 = bitcast <16 x i8> %108 to <2 x i64>
  %110 = shufflevector <2 x i64> %107, <2 x i64> %109, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %111 = bitcast <4 x i64> %110 to <32 x i8>
  %112 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %111
  %113 = bitcast <4 x i64> %98 to <32 x i8>
  %114 = bitcast <4 x i64> %104 to <32 x i8>
  %115 = shufflevector <32 x i8> %113, <32 x i8> %114, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %116 = shufflevector <32 x i8> %111, <32 x i8> %112, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %117 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %115, <32 x i8> %116) #5
  %118 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %117, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %119 = shufflevector <32 x i8> %113, <32 x i8> %114, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %120 = shufflevector <32 x i8> %111, <32 x i8> %112, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %121 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %119, <32 x i8> %120) #5
  %122 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %121, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %123 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %118, <16 x i16> %122) #5
  %124 = bitcast <4 x i64> %92 to <32 x i8>
  %125 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %123, <32 x i8> %124) #5
  %126 = bitcast <4 x i64> %125 to <8 x i32>
  %127 = add <8 x i32> %86, %126
  %128 = getelementptr inbounds i8, i8* %81, i64 %14
  %129 = getelementptr inbounds i8, i8* %82, i64 32
  %130 = getelementptr inbounds i8, i8* %83, i64 %16
  %131 = getelementptr inbounds i8, i8* %84, i64 %18
  %132 = add nuw nsw i32 %85, 2
  %133 = icmp ult i32 %132, 32
  br i1 %133, label %80, label %134

134:                                              ; preds = %80
  %135 = shufflevector <8 x i32> %127, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 1, i32 3, i32 4, i32 6, i32 5, i32 7>
  %136 = bitcast <8 x i32> %135 to <4 x i64>
  %137 = shufflevector <4 x i64> %136, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %138 = bitcast <4 x i64> %137 to <8 x i32>
  %139 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %138, <8 x i32> %138) #5
  %140 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %139, <8 x i32> %139) #5
  br label %141

141:                                              ; preds = %73, %134
  %142 = phi <8 x i32> [ %79, %73 ], [ %140, %134 ]
  %143 = extractelement <8 x i32> %142, i64 0
  ret i32 %143
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad32x16_avx2(i8*, i32, i8*, i32, i8*, i8*, i32, i32) local_unnamed_addr #1 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  br i1 %9, label %13, label %50

13:                                               ; preds = %8, %13
  %14 = phi i8* [ %37, %13 ], [ %0, %8 ]
  %15 = phi i8* [ %38, %13 ], [ %2, %8 ]
  %16 = phi i8* [ %39, %13 ], [ %4, %8 ]
  %17 = phi i8* [ %40, %13 ], [ %5, %8 ]
  %18 = phi i32 [ %41, %13 ], [ 0, %8 ]
  %19 = phi <8 x i32> [ %36, %13 ], [ zeroinitializer, %8 ]
  %20 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %14) #5
  %21 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %15) #5
  %22 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %16) #5
  %23 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %17) #5
  %24 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %23
  %25 = shufflevector <32 x i8> %21, <32 x i8> %22, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %26 = shufflevector <32 x i8> %23, <32 x i8> %24, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %27 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %25, <32 x i8> %26) #5
  %28 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %27, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %29 = shufflevector <32 x i8> %21, <32 x i8> %22, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %30 = shufflevector <32 x i8> %23, <32 x i8> %24, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %31 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %29, <32 x i8> %30) #5
  %32 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %31, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %33 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %28, <16 x i16> %32) #5
  %34 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %33, <32 x i8> %20) #5
  %35 = bitcast <4 x i64> %34 to <8 x i32>
  %36 = add <8 x i32> %19, %35
  %37 = getelementptr inbounds i8, i8* %14, i64 %10
  %38 = getelementptr inbounds i8, i8* %15, i64 %11
  %39 = getelementptr inbounds i8, i8* %16, i64 32
  %40 = getelementptr inbounds i8, i8* %17, i64 %12
  %41 = add nuw nsw i32 %18, 1
  %42 = icmp eq i32 %41, 16
  br i1 %42, label %43, label %13

43:                                               ; preds = %13
  %44 = shufflevector <8 x i32> %36, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 1, i32 3, i32 4, i32 6, i32 5, i32 7>
  %45 = bitcast <8 x i32> %44 to <4 x i64>
  %46 = shufflevector <4 x i64> %45, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %47 = bitcast <4 x i64> %46 to <8 x i32>
  %48 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %47, <8 x i32> %47) #5
  %49 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %48, <8 x i32> %48) #5
  br label %87

50:                                               ; preds = %8, %50
  %51 = phi i8* [ %74, %50 ], [ %0, %8 ]
  %52 = phi i8* [ %75, %50 ], [ %4, %8 ]
  %53 = phi i8* [ %76, %50 ], [ %2, %8 ]
  %54 = phi i8* [ %77, %50 ], [ %5, %8 ]
  %55 = phi i32 [ %78, %50 ], [ 0, %8 ]
  %56 = phi <8 x i32> [ %73, %50 ], [ zeroinitializer, %8 ]
  %57 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %51) #5
  %58 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %52) #5
  %59 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %53) #5
  %60 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %54) #5
  %61 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %60
  %62 = shufflevector <32 x i8> %58, <32 x i8> %59, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %63 = shufflevector <32 x i8> %60, <32 x i8> %61, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %64 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %62, <32 x i8> %63) #5
  %65 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %64, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %66 = shufflevector <32 x i8> %58, <32 x i8> %59, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %67 = shufflevector <32 x i8> %60, <32 x i8> %61, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %68 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %66, <32 x i8> %67) #5
  %69 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %68, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %70 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %65, <16 x i16> %69) #5
  %71 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %70, <32 x i8> %57) #5
  %72 = bitcast <4 x i64> %71 to <8 x i32>
  %73 = add <8 x i32> %56, %72
  %74 = getelementptr inbounds i8, i8* %51, i64 %10
  %75 = getelementptr inbounds i8, i8* %52, i64 32
  %76 = getelementptr inbounds i8, i8* %53, i64 %11
  %77 = getelementptr inbounds i8, i8* %54, i64 %12
  %78 = add nuw nsw i32 %55, 1
  %79 = icmp eq i32 %78, 16
  br i1 %79, label %80, label %50

80:                                               ; preds = %50
  %81 = shufflevector <8 x i32> %73, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 1, i32 3, i32 4, i32 6, i32 5, i32 7>
  %82 = bitcast <8 x i32> %81 to <4 x i64>
  %83 = shufflevector <4 x i64> %82, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %84 = bitcast <4 x i64> %83 to <8 x i32>
  %85 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %84, <8 x i32> %84) #5
  %86 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %85, <8 x i32> %85) #5
  br label %87

87:                                               ; preds = %43, %80
  %88 = phi <8 x i32> [ %49, %43 ], [ %86, %80 ]
  %89 = extractelement <8 x i32> %88, i64 0
  ret i32 %89
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad32x32_avx2(i8*, i32, i8*, i32, i8*, i8*, i32, i32) local_unnamed_addr #1 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  br i1 %9, label %13, label %50

13:                                               ; preds = %8, %13
  %14 = phi i8* [ %37, %13 ], [ %0, %8 ]
  %15 = phi i8* [ %38, %13 ], [ %2, %8 ]
  %16 = phi i8* [ %39, %13 ], [ %4, %8 ]
  %17 = phi i8* [ %40, %13 ], [ %5, %8 ]
  %18 = phi i32 [ %41, %13 ], [ 0, %8 ]
  %19 = phi <8 x i32> [ %36, %13 ], [ zeroinitializer, %8 ]
  %20 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %14) #5
  %21 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %15) #5
  %22 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %16) #5
  %23 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %17) #5
  %24 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %23
  %25 = shufflevector <32 x i8> %21, <32 x i8> %22, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %26 = shufflevector <32 x i8> %23, <32 x i8> %24, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %27 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %25, <32 x i8> %26) #5
  %28 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %27, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %29 = shufflevector <32 x i8> %21, <32 x i8> %22, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %30 = shufflevector <32 x i8> %23, <32 x i8> %24, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %31 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %29, <32 x i8> %30) #5
  %32 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %31, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %33 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %28, <16 x i16> %32) #5
  %34 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %33, <32 x i8> %20) #5
  %35 = bitcast <4 x i64> %34 to <8 x i32>
  %36 = add <8 x i32> %19, %35
  %37 = getelementptr inbounds i8, i8* %14, i64 %10
  %38 = getelementptr inbounds i8, i8* %15, i64 %11
  %39 = getelementptr inbounds i8, i8* %16, i64 32
  %40 = getelementptr inbounds i8, i8* %17, i64 %12
  %41 = add nuw nsw i32 %18, 1
  %42 = icmp eq i32 %41, 32
  br i1 %42, label %43, label %13

43:                                               ; preds = %13
  %44 = shufflevector <8 x i32> %36, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 1, i32 3, i32 4, i32 6, i32 5, i32 7>
  %45 = bitcast <8 x i32> %44 to <4 x i64>
  %46 = shufflevector <4 x i64> %45, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %47 = bitcast <4 x i64> %46 to <8 x i32>
  %48 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %47, <8 x i32> %47) #5
  %49 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %48, <8 x i32> %48) #5
  br label %87

50:                                               ; preds = %8, %50
  %51 = phi i8* [ %74, %50 ], [ %0, %8 ]
  %52 = phi i8* [ %75, %50 ], [ %4, %8 ]
  %53 = phi i8* [ %76, %50 ], [ %2, %8 ]
  %54 = phi i8* [ %77, %50 ], [ %5, %8 ]
  %55 = phi i32 [ %78, %50 ], [ 0, %8 ]
  %56 = phi <8 x i32> [ %73, %50 ], [ zeroinitializer, %8 ]
  %57 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %51) #5
  %58 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %52) #5
  %59 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %53) #5
  %60 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %54) #5
  %61 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %60
  %62 = shufflevector <32 x i8> %58, <32 x i8> %59, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %63 = shufflevector <32 x i8> %60, <32 x i8> %61, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %64 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %62, <32 x i8> %63) #5
  %65 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %64, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %66 = shufflevector <32 x i8> %58, <32 x i8> %59, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %67 = shufflevector <32 x i8> %60, <32 x i8> %61, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %68 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %66, <32 x i8> %67) #5
  %69 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %68, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %70 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %65, <16 x i16> %69) #5
  %71 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %70, <32 x i8> %57) #5
  %72 = bitcast <4 x i64> %71 to <8 x i32>
  %73 = add <8 x i32> %56, %72
  %74 = getelementptr inbounds i8, i8* %51, i64 %10
  %75 = getelementptr inbounds i8, i8* %52, i64 32
  %76 = getelementptr inbounds i8, i8* %53, i64 %11
  %77 = getelementptr inbounds i8, i8* %54, i64 %12
  %78 = add nuw nsw i32 %55, 1
  %79 = icmp eq i32 %78, 32
  br i1 %79, label %80, label %50

80:                                               ; preds = %50
  %81 = shufflevector <8 x i32> %73, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 1, i32 3, i32 4, i32 6, i32 5, i32 7>
  %82 = bitcast <8 x i32> %81 to <4 x i64>
  %83 = shufflevector <4 x i64> %82, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %84 = bitcast <4 x i64> %83 to <8 x i32>
  %85 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %84, <8 x i32> %84) #5
  %86 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %85, <8 x i32> %85) #5
  br label %87

87:                                               ; preds = %43, %80
  %88 = phi <8 x i32> [ %49, %43 ], [ %86, %80 ]
  %89 = extractelement <8 x i32> %88, i64 0
  ret i32 %89
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad32x64_avx2(i8*, i32, i8*, i32, i8*, i8*, i32, i32) local_unnamed_addr #1 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  br i1 %9, label %13, label %50

13:                                               ; preds = %8, %13
  %14 = phi i8* [ %37, %13 ], [ %0, %8 ]
  %15 = phi i8* [ %38, %13 ], [ %2, %8 ]
  %16 = phi i8* [ %39, %13 ], [ %4, %8 ]
  %17 = phi i8* [ %40, %13 ], [ %5, %8 ]
  %18 = phi i32 [ %41, %13 ], [ 0, %8 ]
  %19 = phi <8 x i32> [ %36, %13 ], [ zeroinitializer, %8 ]
  %20 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %14) #5
  %21 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %15) #5
  %22 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %16) #5
  %23 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %17) #5
  %24 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %23
  %25 = shufflevector <32 x i8> %21, <32 x i8> %22, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %26 = shufflevector <32 x i8> %23, <32 x i8> %24, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %27 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %25, <32 x i8> %26) #5
  %28 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %27, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %29 = shufflevector <32 x i8> %21, <32 x i8> %22, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %30 = shufflevector <32 x i8> %23, <32 x i8> %24, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %31 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %29, <32 x i8> %30) #5
  %32 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %31, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %33 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %28, <16 x i16> %32) #5
  %34 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %33, <32 x i8> %20) #5
  %35 = bitcast <4 x i64> %34 to <8 x i32>
  %36 = add <8 x i32> %19, %35
  %37 = getelementptr inbounds i8, i8* %14, i64 %10
  %38 = getelementptr inbounds i8, i8* %15, i64 %11
  %39 = getelementptr inbounds i8, i8* %16, i64 32
  %40 = getelementptr inbounds i8, i8* %17, i64 %12
  %41 = add nuw nsw i32 %18, 1
  %42 = icmp eq i32 %41, 64
  br i1 %42, label %43, label %13

43:                                               ; preds = %13
  %44 = shufflevector <8 x i32> %36, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 1, i32 3, i32 4, i32 6, i32 5, i32 7>
  %45 = bitcast <8 x i32> %44 to <4 x i64>
  %46 = shufflevector <4 x i64> %45, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %47 = bitcast <4 x i64> %46 to <8 x i32>
  %48 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %47, <8 x i32> %47) #5
  %49 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %48, <8 x i32> %48) #5
  br label %87

50:                                               ; preds = %8, %50
  %51 = phi i8* [ %74, %50 ], [ %0, %8 ]
  %52 = phi i8* [ %75, %50 ], [ %4, %8 ]
  %53 = phi i8* [ %76, %50 ], [ %2, %8 ]
  %54 = phi i8* [ %77, %50 ], [ %5, %8 ]
  %55 = phi i32 [ %78, %50 ], [ 0, %8 ]
  %56 = phi <8 x i32> [ %73, %50 ], [ zeroinitializer, %8 ]
  %57 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %51) #5
  %58 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %52) #5
  %59 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %53) #5
  %60 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %54) #5
  %61 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %60
  %62 = shufflevector <32 x i8> %58, <32 x i8> %59, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %63 = shufflevector <32 x i8> %60, <32 x i8> %61, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %64 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %62, <32 x i8> %63) #5
  %65 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %64, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %66 = shufflevector <32 x i8> %58, <32 x i8> %59, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %67 = shufflevector <32 x i8> %60, <32 x i8> %61, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %68 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %66, <32 x i8> %67) #5
  %69 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %68, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %70 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %65, <16 x i16> %69) #5
  %71 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %70, <32 x i8> %57) #5
  %72 = bitcast <4 x i64> %71 to <8 x i32>
  %73 = add <8 x i32> %56, %72
  %74 = getelementptr inbounds i8, i8* %51, i64 %10
  %75 = getelementptr inbounds i8, i8* %52, i64 32
  %76 = getelementptr inbounds i8, i8* %53, i64 %11
  %77 = getelementptr inbounds i8, i8* %54, i64 %12
  %78 = add nuw nsw i32 %55, 1
  %79 = icmp eq i32 %78, 64
  br i1 %79, label %80, label %50

80:                                               ; preds = %50
  %81 = shufflevector <8 x i32> %73, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 1, i32 3, i32 4, i32 6, i32 5, i32 7>
  %82 = bitcast <8 x i32> %81 to <4 x i64>
  %83 = shufflevector <4 x i64> %82, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %84 = bitcast <4 x i64> %83 to <8 x i32>
  %85 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %84, <8 x i32> %84) #5
  %86 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %85, <8 x i32> %85) #5
  br label %87

87:                                               ; preds = %43, %80
  %88 = phi <8 x i32> [ %49, %43 ], [ %86, %80 ]
  %89 = extractelement <8 x i32> %88, i64 0
  ret i32 %89
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad64x32_avx2(i8*, i32, i8*, i32, i8*, i8*, i32, i32) local_unnamed_addr #1 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  br i1 %9, label %13, label %71

13:                                               ; preds = %8, %13
  %14 = phi i8* [ %58, %13 ], [ %0, %8 ]
  %15 = phi i8* [ %59, %13 ], [ %2, %8 ]
  %16 = phi i8* [ %60, %13 ], [ %4, %8 ]
  %17 = phi i8* [ %61, %13 ], [ %5, %8 ]
  %18 = phi i32 [ %62, %13 ], [ 0, %8 ]
  %19 = phi <8 x i32> [ %57, %13 ], [ zeroinitializer, %8 ]
  %20 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %14) #5
  %21 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %15) #5
  %22 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %16) #5
  %23 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %17) #5
  %24 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %23
  %25 = shufflevector <32 x i8> %21, <32 x i8> %22, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %26 = shufflevector <32 x i8> %23, <32 x i8> %24, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %27 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %25, <32 x i8> %26) #5
  %28 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %27, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %29 = shufflevector <32 x i8> %21, <32 x i8> %22, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %30 = shufflevector <32 x i8> %23, <32 x i8> %24, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %31 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %29, <32 x i8> %30) #5
  %32 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %31, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %33 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %28, <16 x i16> %32) #5
  %34 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %33, <32 x i8> %20) #5
  %35 = bitcast <4 x i64> %34 to <8 x i32>
  %36 = add <8 x i32> %19, %35
  %37 = getelementptr inbounds i8, i8* %14, i64 32
  %38 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %37) #5
  %39 = getelementptr inbounds i8, i8* %15, i64 32
  %40 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %39) #5
  %41 = getelementptr inbounds i8, i8* %16, i64 32
  %42 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %41) #5
  %43 = getelementptr inbounds i8, i8* %17, i64 32
  %44 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %43) #5
  %45 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %44
  %46 = shufflevector <32 x i8> %40, <32 x i8> %42, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %47 = shufflevector <32 x i8> %44, <32 x i8> %45, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %48 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %46, <32 x i8> %47) #5
  %49 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %48, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %50 = shufflevector <32 x i8> %40, <32 x i8> %42, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %51 = shufflevector <32 x i8> %44, <32 x i8> %45, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %52 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %50, <32 x i8> %51) #5
  %53 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %52, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %54 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %49, <16 x i16> %53) #5
  %55 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %54, <32 x i8> %38) #5
  %56 = bitcast <4 x i64> %55 to <8 x i32>
  %57 = add <8 x i32> %36, %56
  %58 = getelementptr inbounds i8, i8* %14, i64 %10
  %59 = getelementptr inbounds i8, i8* %15, i64 %11
  %60 = getelementptr inbounds i8, i8* %16, i64 64
  %61 = getelementptr inbounds i8, i8* %17, i64 %12
  %62 = add nuw nsw i32 %18, 1
  %63 = icmp eq i32 %62, 32
  br i1 %63, label %64, label %13

64:                                               ; preds = %13
  %65 = shufflevector <8 x i32> %57, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 1, i32 3, i32 4, i32 6, i32 5, i32 7>
  %66 = bitcast <8 x i32> %65 to <4 x i64>
  %67 = shufflevector <4 x i64> %66, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %68 = bitcast <4 x i64> %67 to <8 x i32>
  %69 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %68, <8 x i32> %68) #5
  %70 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %69, <8 x i32> %69) #5
  br label %129

71:                                               ; preds = %8, %71
  %72 = phi i8* [ %116, %71 ], [ %0, %8 ]
  %73 = phi i8* [ %117, %71 ], [ %4, %8 ]
  %74 = phi i8* [ %118, %71 ], [ %2, %8 ]
  %75 = phi i8* [ %119, %71 ], [ %5, %8 ]
  %76 = phi i32 [ %120, %71 ], [ 0, %8 ]
  %77 = phi <8 x i32> [ %115, %71 ], [ zeroinitializer, %8 ]
  %78 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %72) #5
  %79 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %73) #5
  %80 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %74) #5
  %81 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %75) #5
  %82 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %81
  %83 = shufflevector <32 x i8> %79, <32 x i8> %80, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %84 = shufflevector <32 x i8> %81, <32 x i8> %82, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %85 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %83, <32 x i8> %84) #5
  %86 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %85, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %87 = shufflevector <32 x i8> %79, <32 x i8> %80, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %88 = shufflevector <32 x i8> %81, <32 x i8> %82, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %89 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %87, <32 x i8> %88) #5
  %90 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %89, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %91 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %86, <16 x i16> %90) #5
  %92 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %91, <32 x i8> %78) #5
  %93 = bitcast <4 x i64> %92 to <8 x i32>
  %94 = add <8 x i32> %77, %93
  %95 = getelementptr inbounds i8, i8* %72, i64 32
  %96 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %95) #5
  %97 = getelementptr inbounds i8, i8* %73, i64 32
  %98 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %97) #5
  %99 = getelementptr inbounds i8, i8* %74, i64 32
  %100 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %99) #5
  %101 = getelementptr inbounds i8, i8* %75, i64 32
  %102 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %101) #5
  %103 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %102
  %104 = shufflevector <32 x i8> %98, <32 x i8> %100, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %105 = shufflevector <32 x i8> %102, <32 x i8> %103, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %106 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %104, <32 x i8> %105) #5
  %107 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %106, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %108 = shufflevector <32 x i8> %98, <32 x i8> %100, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %109 = shufflevector <32 x i8> %102, <32 x i8> %103, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %110 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %108, <32 x i8> %109) #5
  %111 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %110, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %112 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %107, <16 x i16> %111) #5
  %113 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %112, <32 x i8> %96) #5
  %114 = bitcast <4 x i64> %113 to <8 x i32>
  %115 = add <8 x i32> %94, %114
  %116 = getelementptr inbounds i8, i8* %72, i64 %10
  %117 = getelementptr inbounds i8, i8* %73, i64 64
  %118 = getelementptr inbounds i8, i8* %74, i64 %11
  %119 = getelementptr inbounds i8, i8* %75, i64 %12
  %120 = add nuw nsw i32 %76, 1
  %121 = icmp eq i32 %120, 32
  br i1 %121, label %122, label %71

122:                                              ; preds = %71
  %123 = shufflevector <8 x i32> %115, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 1, i32 3, i32 4, i32 6, i32 5, i32 7>
  %124 = bitcast <8 x i32> %123 to <4 x i64>
  %125 = shufflevector <4 x i64> %124, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %126 = bitcast <4 x i64> %125 to <8 x i32>
  %127 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %126, <8 x i32> %126) #5
  %128 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %127, <8 x i32> %127) #5
  br label %129

129:                                              ; preds = %64, %122
  %130 = phi <8 x i32> [ %70, %64 ], [ %128, %122 ]
  %131 = extractelement <8 x i32> %130, i64 0
  ret i32 %131
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad64x64_avx2(i8*, i32, i8*, i32, i8*, i8*, i32, i32) local_unnamed_addr #1 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  br i1 %9, label %13, label %71

13:                                               ; preds = %8, %13
  %14 = phi i8* [ %58, %13 ], [ %0, %8 ]
  %15 = phi i8* [ %59, %13 ], [ %2, %8 ]
  %16 = phi i8* [ %60, %13 ], [ %4, %8 ]
  %17 = phi i8* [ %61, %13 ], [ %5, %8 ]
  %18 = phi i32 [ %62, %13 ], [ 0, %8 ]
  %19 = phi <8 x i32> [ %57, %13 ], [ zeroinitializer, %8 ]
  %20 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %14) #5
  %21 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %15) #5
  %22 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %16) #5
  %23 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %17) #5
  %24 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %23
  %25 = shufflevector <32 x i8> %21, <32 x i8> %22, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %26 = shufflevector <32 x i8> %23, <32 x i8> %24, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %27 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %25, <32 x i8> %26) #5
  %28 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %27, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %29 = shufflevector <32 x i8> %21, <32 x i8> %22, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %30 = shufflevector <32 x i8> %23, <32 x i8> %24, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %31 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %29, <32 x i8> %30) #5
  %32 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %31, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %33 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %28, <16 x i16> %32) #5
  %34 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %33, <32 x i8> %20) #5
  %35 = bitcast <4 x i64> %34 to <8 x i32>
  %36 = add <8 x i32> %19, %35
  %37 = getelementptr inbounds i8, i8* %14, i64 32
  %38 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %37) #5
  %39 = getelementptr inbounds i8, i8* %15, i64 32
  %40 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %39) #5
  %41 = getelementptr inbounds i8, i8* %16, i64 32
  %42 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %41) #5
  %43 = getelementptr inbounds i8, i8* %17, i64 32
  %44 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %43) #5
  %45 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %44
  %46 = shufflevector <32 x i8> %40, <32 x i8> %42, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %47 = shufflevector <32 x i8> %44, <32 x i8> %45, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %48 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %46, <32 x i8> %47) #5
  %49 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %48, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %50 = shufflevector <32 x i8> %40, <32 x i8> %42, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %51 = shufflevector <32 x i8> %44, <32 x i8> %45, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %52 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %50, <32 x i8> %51) #5
  %53 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %52, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %54 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %49, <16 x i16> %53) #5
  %55 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %54, <32 x i8> %38) #5
  %56 = bitcast <4 x i64> %55 to <8 x i32>
  %57 = add <8 x i32> %36, %56
  %58 = getelementptr inbounds i8, i8* %14, i64 %10
  %59 = getelementptr inbounds i8, i8* %15, i64 %11
  %60 = getelementptr inbounds i8, i8* %16, i64 64
  %61 = getelementptr inbounds i8, i8* %17, i64 %12
  %62 = add nuw nsw i32 %18, 1
  %63 = icmp eq i32 %62, 64
  br i1 %63, label %64, label %13

64:                                               ; preds = %13
  %65 = shufflevector <8 x i32> %57, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 1, i32 3, i32 4, i32 6, i32 5, i32 7>
  %66 = bitcast <8 x i32> %65 to <4 x i64>
  %67 = shufflevector <4 x i64> %66, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %68 = bitcast <4 x i64> %67 to <8 x i32>
  %69 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %68, <8 x i32> %68) #5
  %70 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %69, <8 x i32> %69) #5
  br label %129

71:                                               ; preds = %8, %71
  %72 = phi i8* [ %116, %71 ], [ %0, %8 ]
  %73 = phi i8* [ %117, %71 ], [ %4, %8 ]
  %74 = phi i8* [ %118, %71 ], [ %2, %8 ]
  %75 = phi i8* [ %119, %71 ], [ %5, %8 ]
  %76 = phi i32 [ %120, %71 ], [ 0, %8 ]
  %77 = phi <8 x i32> [ %115, %71 ], [ zeroinitializer, %8 ]
  %78 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %72) #5
  %79 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %73) #5
  %80 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %74) #5
  %81 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %75) #5
  %82 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %81
  %83 = shufflevector <32 x i8> %79, <32 x i8> %80, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %84 = shufflevector <32 x i8> %81, <32 x i8> %82, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %85 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %83, <32 x i8> %84) #5
  %86 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %85, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %87 = shufflevector <32 x i8> %79, <32 x i8> %80, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %88 = shufflevector <32 x i8> %81, <32 x i8> %82, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %89 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %87, <32 x i8> %88) #5
  %90 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %89, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %91 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %86, <16 x i16> %90) #5
  %92 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %91, <32 x i8> %78) #5
  %93 = bitcast <4 x i64> %92 to <8 x i32>
  %94 = add <8 x i32> %77, %93
  %95 = getelementptr inbounds i8, i8* %72, i64 32
  %96 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %95) #5
  %97 = getelementptr inbounds i8, i8* %73, i64 32
  %98 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %97) #5
  %99 = getelementptr inbounds i8, i8* %74, i64 32
  %100 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %99) #5
  %101 = getelementptr inbounds i8, i8* %75, i64 32
  %102 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %101) #5
  %103 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %102
  %104 = shufflevector <32 x i8> %98, <32 x i8> %100, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %105 = shufflevector <32 x i8> %102, <32 x i8> %103, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %106 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %104, <32 x i8> %105) #5
  %107 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %106, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %108 = shufflevector <32 x i8> %98, <32 x i8> %100, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %109 = shufflevector <32 x i8> %102, <32 x i8> %103, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %110 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %108, <32 x i8> %109) #5
  %111 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %110, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %112 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %107, <16 x i16> %111) #5
  %113 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %112, <32 x i8> %96) #5
  %114 = bitcast <4 x i64> %113 to <8 x i32>
  %115 = add <8 x i32> %94, %114
  %116 = getelementptr inbounds i8, i8* %72, i64 %10
  %117 = getelementptr inbounds i8, i8* %73, i64 64
  %118 = getelementptr inbounds i8, i8* %74, i64 %11
  %119 = getelementptr inbounds i8, i8* %75, i64 %12
  %120 = add nuw nsw i32 %76, 1
  %121 = icmp eq i32 %120, 64
  br i1 %121, label %122, label %71

122:                                              ; preds = %71
  %123 = shufflevector <8 x i32> %115, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 1, i32 3, i32 4, i32 6, i32 5, i32 7>
  %124 = bitcast <8 x i32> %123 to <4 x i64>
  %125 = shufflevector <4 x i64> %124, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %126 = bitcast <4 x i64> %125 to <8 x i32>
  %127 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %126, <8 x i32> %126) #5
  %128 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %127, <8 x i32> %127) #5
  br label %129

129:                                              ; preds = %64, %122
  %130 = phi <8 x i32> [ %70, %64 ], [ %128, %122 ]
  %131 = extractelement <8 x i32> %130, i64 0
  ret i32 %131
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad64x128_avx2(i8*, i32, i8*, i32, i8*, i8*, i32, i32) local_unnamed_addr #1 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  br i1 %9, label %13, label %71

13:                                               ; preds = %8, %13
  %14 = phi i8* [ %58, %13 ], [ %0, %8 ]
  %15 = phi i8* [ %59, %13 ], [ %2, %8 ]
  %16 = phi i8* [ %60, %13 ], [ %4, %8 ]
  %17 = phi i8* [ %61, %13 ], [ %5, %8 ]
  %18 = phi i32 [ %62, %13 ], [ 0, %8 ]
  %19 = phi <8 x i32> [ %57, %13 ], [ zeroinitializer, %8 ]
  %20 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %14) #5
  %21 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %15) #5
  %22 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %16) #5
  %23 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %17) #5
  %24 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %23
  %25 = shufflevector <32 x i8> %21, <32 x i8> %22, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %26 = shufflevector <32 x i8> %23, <32 x i8> %24, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %27 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %25, <32 x i8> %26) #5
  %28 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %27, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %29 = shufflevector <32 x i8> %21, <32 x i8> %22, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %30 = shufflevector <32 x i8> %23, <32 x i8> %24, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %31 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %29, <32 x i8> %30) #5
  %32 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %31, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %33 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %28, <16 x i16> %32) #5
  %34 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %33, <32 x i8> %20) #5
  %35 = bitcast <4 x i64> %34 to <8 x i32>
  %36 = add <8 x i32> %19, %35
  %37 = getelementptr inbounds i8, i8* %14, i64 32
  %38 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %37) #5
  %39 = getelementptr inbounds i8, i8* %15, i64 32
  %40 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %39) #5
  %41 = getelementptr inbounds i8, i8* %16, i64 32
  %42 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %41) #5
  %43 = getelementptr inbounds i8, i8* %17, i64 32
  %44 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %43) #5
  %45 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %44
  %46 = shufflevector <32 x i8> %40, <32 x i8> %42, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %47 = shufflevector <32 x i8> %44, <32 x i8> %45, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %48 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %46, <32 x i8> %47) #5
  %49 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %48, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %50 = shufflevector <32 x i8> %40, <32 x i8> %42, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %51 = shufflevector <32 x i8> %44, <32 x i8> %45, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %52 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %50, <32 x i8> %51) #5
  %53 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %52, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %54 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %49, <16 x i16> %53) #5
  %55 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %54, <32 x i8> %38) #5
  %56 = bitcast <4 x i64> %55 to <8 x i32>
  %57 = add <8 x i32> %36, %56
  %58 = getelementptr inbounds i8, i8* %14, i64 %10
  %59 = getelementptr inbounds i8, i8* %15, i64 %11
  %60 = getelementptr inbounds i8, i8* %16, i64 64
  %61 = getelementptr inbounds i8, i8* %17, i64 %12
  %62 = add nuw nsw i32 %18, 1
  %63 = icmp eq i32 %62, 128
  br i1 %63, label %64, label %13

64:                                               ; preds = %13
  %65 = shufflevector <8 x i32> %57, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 1, i32 3, i32 4, i32 6, i32 5, i32 7>
  %66 = bitcast <8 x i32> %65 to <4 x i64>
  %67 = shufflevector <4 x i64> %66, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %68 = bitcast <4 x i64> %67 to <8 x i32>
  %69 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %68, <8 x i32> %68) #5
  %70 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %69, <8 x i32> %69) #5
  br label %129

71:                                               ; preds = %8, %71
  %72 = phi i8* [ %116, %71 ], [ %0, %8 ]
  %73 = phi i8* [ %117, %71 ], [ %4, %8 ]
  %74 = phi i8* [ %118, %71 ], [ %2, %8 ]
  %75 = phi i8* [ %119, %71 ], [ %5, %8 ]
  %76 = phi i32 [ %120, %71 ], [ 0, %8 ]
  %77 = phi <8 x i32> [ %115, %71 ], [ zeroinitializer, %8 ]
  %78 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %72) #5
  %79 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %73) #5
  %80 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %74) #5
  %81 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %75) #5
  %82 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %81
  %83 = shufflevector <32 x i8> %79, <32 x i8> %80, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %84 = shufflevector <32 x i8> %81, <32 x i8> %82, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %85 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %83, <32 x i8> %84) #5
  %86 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %85, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %87 = shufflevector <32 x i8> %79, <32 x i8> %80, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %88 = shufflevector <32 x i8> %81, <32 x i8> %82, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %89 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %87, <32 x i8> %88) #5
  %90 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %89, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %91 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %86, <16 x i16> %90) #5
  %92 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %91, <32 x i8> %78) #5
  %93 = bitcast <4 x i64> %92 to <8 x i32>
  %94 = add <8 x i32> %77, %93
  %95 = getelementptr inbounds i8, i8* %72, i64 32
  %96 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %95) #5
  %97 = getelementptr inbounds i8, i8* %73, i64 32
  %98 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %97) #5
  %99 = getelementptr inbounds i8, i8* %74, i64 32
  %100 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %99) #5
  %101 = getelementptr inbounds i8, i8* %75, i64 32
  %102 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %101) #5
  %103 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %102
  %104 = shufflevector <32 x i8> %98, <32 x i8> %100, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %105 = shufflevector <32 x i8> %102, <32 x i8> %103, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %106 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %104, <32 x i8> %105) #5
  %107 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %106, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %108 = shufflevector <32 x i8> %98, <32 x i8> %100, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %109 = shufflevector <32 x i8> %102, <32 x i8> %103, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %110 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %108, <32 x i8> %109) #5
  %111 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %110, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %112 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %107, <16 x i16> %111) #5
  %113 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %112, <32 x i8> %96) #5
  %114 = bitcast <4 x i64> %113 to <8 x i32>
  %115 = add <8 x i32> %94, %114
  %116 = getelementptr inbounds i8, i8* %72, i64 %10
  %117 = getelementptr inbounds i8, i8* %73, i64 64
  %118 = getelementptr inbounds i8, i8* %74, i64 %11
  %119 = getelementptr inbounds i8, i8* %75, i64 %12
  %120 = add nuw nsw i32 %76, 1
  %121 = icmp eq i32 %120, 128
  br i1 %121, label %122, label %71

122:                                              ; preds = %71
  %123 = shufflevector <8 x i32> %115, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 1, i32 3, i32 4, i32 6, i32 5, i32 7>
  %124 = bitcast <8 x i32> %123 to <4 x i64>
  %125 = shufflevector <4 x i64> %124, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %126 = bitcast <4 x i64> %125 to <8 x i32>
  %127 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %126, <8 x i32> %126) #5
  %128 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %127, <8 x i32> %127) #5
  br label %129

129:                                              ; preds = %64, %122
  %130 = phi <8 x i32> [ %70, %64 ], [ %128, %122 ]
  %131 = extractelement <8 x i32> %130, i64 0
  ret i32 %131
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad128x64_avx2(i8*, i32, i8*, i32, i8*, i8*, i32, i32) local_unnamed_addr #1 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  br i1 %9, label %13, label %113

13:                                               ; preds = %8, %13
  %14 = phi i8* [ %100, %13 ], [ %0, %8 ]
  %15 = phi i8* [ %101, %13 ], [ %2, %8 ]
  %16 = phi i8* [ %102, %13 ], [ %4, %8 ]
  %17 = phi i8* [ %103, %13 ], [ %5, %8 ]
  %18 = phi i32 [ %104, %13 ], [ 0, %8 ]
  %19 = phi <8 x i32> [ %99, %13 ], [ zeroinitializer, %8 ]
  %20 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %14) #5
  %21 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %15) #5
  %22 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %16) #5
  %23 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %17) #5
  %24 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %23
  %25 = shufflevector <32 x i8> %21, <32 x i8> %22, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %26 = shufflevector <32 x i8> %23, <32 x i8> %24, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %27 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %25, <32 x i8> %26) #5
  %28 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %27, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %29 = shufflevector <32 x i8> %21, <32 x i8> %22, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %30 = shufflevector <32 x i8> %23, <32 x i8> %24, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %31 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %29, <32 x i8> %30) #5
  %32 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %31, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %33 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %28, <16 x i16> %32) #5
  %34 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %33, <32 x i8> %20) #5
  %35 = bitcast <4 x i64> %34 to <8 x i32>
  %36 = add <8 x i32> %19, %35
  %37 = getelementptr inbounds i8, i8* %14, i64 32
  %38 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %37) #5
  %39 = getelementptr inbounds i8, i8* %15, i64 32
  %40 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %39) #5
  %41 = getelementptr inbounds i8, i8* %16, i64 32
  %42 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %41) #5
  %43 = getelementptr inbounds i8, i8* %17, i64 32
  %44 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %43) #5
  %45 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %44
  %46 = shufflevector <32 x i8> %40, <32 x i8> %42, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %47 = shufflevector <32 x i8> %44, <32 x i8> %45, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %48 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %46, <32 x i8> %47) #5
  %49 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %48, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %50 = shufflevector <32 x i8> %40, <32 x i8> %42, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %51 = shufflevector <32 x i8> %44, <32 x i8> %45, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %52 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %50, <32 x i8> %51) #5
  %53 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %52, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %54 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %49, <16 x i16> %53) #5
  %55 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %54, <32 x i8> %38) #5
  %56 = bitcast <4 x i64> %55 to <8 x i32>
  %57 = add <8 x i32> %36, %56
  %58 = getelementptr inbounds i8, i8* %14, i64 64
  %59 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %58) #5
  %60 = getelementptr inbounds i8, i8* %15, i64 64
  %61 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %60) #5
  %62 = getelementptr inbounds i8, i8* %16, i64 64
  %63 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %62) #5
  %64 = getelementptr inbounds i8, i8* %17, i64 64
  %65 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %64) #5
  %66 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %65
  %67 = shufflevector <32 x i8> %61, <32 x i8> %63, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %68 = shufflevector <32 x i8> %65, <32 x i8> %66, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %69 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %67, <32 x i8> %68) #5
  %70 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %69, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %71 = shufflevector <32 x i8> %61, <32 x i8> %63, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %72 = shufflevector <32 x i8> %65, <32 x i8> %66, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %73 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %71, <32 x i8> %72) #5
  %74 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %73, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %75 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %70, <16 x i16> %74) #5
  %76 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %75, <32 x i8> %59) #5
  %77 = bitcast <4 x i64> %76 to <8 x i32>
  %78 = add <8 x i32> %57, %77
  %79 = getelementptr inbounds i8, i8* %14, i64 96
  %80 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %79) #5
  %81 = getelementptr inbounds i8, i8* %15, i64 96
  %82 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %81) #5
  %83 = getelementptr inbounds i8, i8* %16, i64 96
  %84 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %83) #5
  %85 = getelementptr inbounds i8, i8* %17, i64 96
  %86 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %85) #5
  %87 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %86
  %88 = shufflevector <32 x i8> %82, <32 x i8> %84, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %89 = shufflevector <32 x i8> %86, <32 x i8> %87, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %90 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %88, <32 x i8> %89) #5
  %91 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %90, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %92 = shufflevector <32 x i8> %82, <32 x i8> %84, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %93 = shufflevector <32 x i8> %86, <32 x i8> %87, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %94 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %92, <32 x i8> %93) #5
  %95 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %94, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %96 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %91, <16 x i16> %95) #5
  %97 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %96, <32 x i8> %80) #5
  %98 = bitcast <4 x i64> %97 to <8 x i32>
  %99 = add <8 x i32> %78, %98
  %100 = getelementptr inbounds i8, i8* %14, i64 %10
  %101 = getelementptr inbounds i8, i8* %15, i64 %11
  %102 = getelementptr inbounds i8, i8* %16, i64 128
  %103 = getelementptr inbounds i8, i8* %17, i64 %12
  %104 = add nuw nsw i32 %18, 1
  %105 = icmp eq i32 %104, 64
  br i1 %105, label %106, label %13

106:                                              ; preds = %13
  %107 = shufflevector <8 x i32> %99, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 1, i32 3, i32 4, i32 6, i32 5, i32 7>
  %108 = bitcast <8 x i32> %107 to <4 x i64>
  %109 = shufflevector <4 x i64> %108, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %110 = bitcast <4 x i64> %109 to <8 x i32>
  %111 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %110, <8 x i32> %110) #5
  %112 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %111, <8 x i32> %111) #5
  br label %213

113:                                              ; preds = %8, %113
  %114 = phi i8* [ %200, %113 ], [ %0, %8 ]
  %115 = phi i8* [ %201, %113 ], [ %4, %8 ]
  %116 = phi i8* [ %202, %113 ], [ %2, %8 ]
  %117 = phi i8* [ %203, %113 ], [ %5, %8 ]
  %118 = phi i32 [ %204, %113 ], [ 0, %8 ]
  %119 = phi <8 x i32> [ %199, %113 ], [ zeroinitializer, %8 ]
  %120 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %114) #5
  %121 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %115) #5
  %122 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %116) #5
  %123 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %117) #5
  %124 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %123
  %125 = shufflevector <32 x i8> %121, <32 x i8> %122, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %126 = shufflevector <32 x i8> %123, <32 x i8> %124, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %127 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %125, <32 x i8> %126) #5
  %128 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %127, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %129 = shufflevector <32 x i8> %121, <32 x i8> %122, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %130 = shufflevector <32 x i8> %123, <32 x i8> %124, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %131 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %129, <32 x i8> %130) #5
  %132 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %131, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %133 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %128, <16 x i16> %132) #5
  %134 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %133, <32 x i8> %120) #5
  %135 = bitcast <4 x i64> %134 to <8 x i32>
  %136 = add <8 x i32> %119, %135
  %137 = getelementptr inbounds i8, i8* %114, i64 32
  %138 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %137) #5
  %139 = getelementptr inbounds i8, i8* %115, i64 32
  %140 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %139) #5
  %141 = getelementptr inbounds i8, i8* %116, i64 32
  %142 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %141) #5
  %143 = getelementptr inbounds i8, i8* %117, i64 32
  %144 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %143) #5
  %145 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %144
  %146 = shufflevector <32 x i8> %140, <32 x i8> %142, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %147 = shufflevector <32 x i8> %144, <32 x i8> %145, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %148 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %146, <32 x i8> %147) #5
  %149 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %148, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %150 = shufflevector <32 x i8> %140, <32 x i8> %142, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %151 = shufflevector <32 x i8> %144, <32 x i8> %145, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %152 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %150, <32 x i8> %151) #5
  %153 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %152, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %154 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %149, <16 x i16> %153) #5
  %155 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %154, <32 x i8> %138) #5
  %156 = bitcast <4 x i64> %155 to <8 x i32>
  %157 = add <8 x i32> %136, %156
  %158 = getelementptr inbounds i8, i8* %114, i64 64
  %159 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %158) #5
  %160 = getelementptr inbounds i8, i8* %115, i64 64
  %161 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %160) #5
  %162 = getelementptr inbounds i8, i8* %116, i64 64
  %163 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %162) #5
  %164 = getelementptr inbounds i8, i8* %117, i64 64
  %165 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %164) #5
  %166 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %165
  %167 = shufflevector <32 x i8> %161, <32 x i8> %163, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %168 = shufflevector <32 x i8> %165, <32 x i8> %166, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %169 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %167, <32 x i8> %168) #5
  %170 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %169, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %171 = shufflevector <32 x i8> %161, <32 x i8> %163, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %172 = shufflevector <32 x i8> %165, <32 x i8> %166, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %173 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %171, <32 x i8> %172) #5
  %174 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %173, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %175 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %170, <16 x i16> %174) #5
  %176 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %175, <32 x i8> %159) #5
  %177 = bitcast <4 x i64> %176 to <8 x i32>
  %178 = add <8 x i32> %157, %177
  %179 = getelementptr inbounds i8, i8* %114, i64 96
  %180 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %179) #5
  %181 = getelementptr inbounds i8, i8* %115, i64 96
  %182 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %181) #5
  %183 = getelementptr inbounds i8, i8* %116, i64 96
  %184 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %183) #5
  %185 = getelementptr inbounds i8, i8* %117, i64 96
  %186 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %185) #5
  %187 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %186
  %188 = shufflevector <32 x i8> %182, <32 x i8> %184, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %189 = shufflevector <32 x i8> %186, <32 x i8> %187, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %190 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %188, <32 x i8> %189) #5
  %191 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %190, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %192 = shufflevector <32 x i8> %182, <32 x i8> %184, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %193 = shufflevector <32 x i8> %186, <32 x i8> %187, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %194 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %192, <32 x i8> %193) #5
  %195 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %194, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %196 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %191, <16 x i16> %195) #5
  %197 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %196, <32 x i8> %180) #5
  %198 = bitcast <4 x i64> %197 to <8 x i32>
  %199 = add <8 x i32> %178, %198
  %200 = getelementptr inbounds i8, i8* %114, i64 %10
  %201 = getelementptr inbounds i8, i8* %115, i64 128
  %202 = getelementptr inbounds i8, i8* %116, i64 %11
  %203 = getelementptr inbounds i8, i8* %117, i64 %12
  %204 = add nuw nsw i32 %118, 1
  %205 = icmp eq i32 %204, 64
  br i1 %205, label %206, label %113

206:                                              ; preds = %113
  %207 = shufflevector <8 x i32> %199, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 1, i32 3, i32 4, i32 6, i32 5, i32 7>
  %208 = bitcast <8 x i32> %207 to <4 x i64>
  %209 = shufflevector <4 x i64> %208, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %210 = bitcast <4 x i64> %209 to <8 x i32>
  %211 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %210, <8 x i32> %210) #5
  %212 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %211, <8 x i32> %211) #5
  br label %213

213:                                              ; preds = %106, %206
  %214 = phi <8 x i32> [ %112, %106 ], [ %212, %206 ]
  %215 = extractelement <8 x i32> %214, i64 0
  ret i32 %215
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad128x128_avx2(i8*, i32, i8*, i32, i8*, i8*, i32, i32) local_unnamed_addr #1 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  br i1 %9, label %13, label %113

13:                                               ; preds = %8, %13
  %14 = phi i8* [ %100, %13 ], [ %0, %8 ]
  %15 = phi i8* [ %101, %13 ], [ %2, %8 ]
  %16 = phi i8* [ %102, %13 ], [ %4, %8 ]
  %17 = phi i8* [ %103, %13 ], [ %5, %8 ]
  %18 = phi i32 [ %104, %13 ], [ 0, %8 ]
  %19 = phi <8 x i32> [ %99, %13 ], [ zeroinitializer, %8 ]
  %20 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %14) #5
  %21 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %15) #5
  %22 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %16) #5
  %23 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %17) #5
  %24 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %23
  %25 = shufflevector <32 x i8> %21, <32 x i8> %22, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %26 = shufflevector <32 x i8> %23, <32 x i8> %24, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %27 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %25, <32 x i8> %26) #5
  %28 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %27, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %29 = shufflevector <32 x i8> %21, <32 x i8> %22, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %30 = shufflevector <32 x i8> %23, <32 x i8> %24, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %31 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %29, <32 x i8> %30) #5
  %32 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %31, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %33 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %28, <16 x i16> %32) #5
  %34 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %33, <32 x i8> %20) #5
  %35 = bitcast <4 x i64> %34 to <8 x i32>
  %36 = add <8 x i32> %19, %35
  %37 = getelementptr inbounds i8, i8* %14, i64 32
  %38 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %37) #5
  %39 = getelementptr inbounds i8, i8* %15, i64 32
  %40 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %39) #5
  %41 = getelementptr inbounds i8, i8* %16, i64 32
  %42 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %41) #5
  %43 = getelementptr inbounds i8, i8* %17, i64 32
  %44 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %43) #5
  %45 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %44
  %46 = shufflevector <32 x i8> %40, <32 x i8> %42, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %47 = shufflevector <32 x i8> %44, <32 x i8> %45, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %48 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %46, <32 x i8> %47) #5
  %49 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %48, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %50 = shufflevector <32 x i8> %40, <32 x i8> %42, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %51 = shufflevector <32 x i8> %44, <32 x i8> %45, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %52 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %50, <32 x i8> %51) #5
  %53 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %52, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %54 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %49, <16 x i16> %53) #5
  %55 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %54, <32 x i8> %38) #5
  %56 = bitcast <4 x i64> %55 to <8 x i32>
  %57 = add <8 x i32> %36, %56
  %58 = getelementptr inbounds i8, i8* %14, i64 64
  %59 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %58) #5
  %60 = getelementptr inbounds i8, i8* %15, i64 64
  %61 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %60) #5
  %62 = getelementptr inbounds i8, i8* %16, i64 64
  %63 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %62) #5
  %64 = getelementptr inbounds i8, i8* %17, i64 64
  %65 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %64) #5
  %66 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %65
  %67 = shufflevector <32 x i8> %61, <32 x i8> %63, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %68 = shufflevector <32 x i8> %65, <32 x i8> %66, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %69 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %67, <32 x i8> %68) #5
  %70 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %69, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %71 = shufflevector <32 x i8> %61, <32 x i8> %63, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %72 = shufflevector <32 x i8> %65, <32 x i8> %66, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %73 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %71, <32 x i8> %72) #5
  %74 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %73, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %75 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %70, <16 x i16> %74) #5
  %76 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %75, <32 x i8> %59) #5
  %77 = bitcast <4 x i64> %76 to <8 x i32>
  %78 = add <8 x i32> %57, %77
  %79 = getelementptr inbounds i8, i8* %14, i64 96
  %80 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %79) #5
  %81 = getelementptr inbounds i8, i8* %15, i64 96
  %82 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %81) #5
  %83 = getelementptr inbounds i8, i8* %16, i64 96
  %84 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %83) #5
  %85 = getelementptr inbounds i8, i8* %17, i64 96
  %86 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %85) #5
  %87 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %86
  %88 = shufflevector <32 x i8> %82, <32 x i8> %84, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %89 = shufflevector <32 x i8> %86, <32 x i8> %87, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %90 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %88, <32 x i8> %89) #5
  %91 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %90, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %92 = shufflevector <32 x i8> %82, <32 x i8> %84, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %93 = shufflevector <32 x i8> %86, <32 x i8> %87, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %94 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %92, <32 x i8> %93) #5
  %95 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %94, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %96 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %91, <16 x i16> %95) #5
  %97 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %96, <32 x i8> %80) #5
  %98 = bitcast <4 x i64> %97 to <8 x i32>
  %99 = add <8 x i32> %78, %98
  %100 = getelementptr inbounds i8, i8* %14, i64 %10
  %101 = getelementptr inbounds i8, i8* %15, i64 %11
  %102 = getelementptr inbounds i8, i8* %16, i64 128
  %103 = getelementptr inbounds i8, i8* %17, i64 %12
  %104 = add nuw nsw i32 %18, 1
  %105 = icmp eq i32 %104, 128
  br i1 %105, label %106, label %13

106:                                              ; preds = %13
  %107 = shufflevector <8 x i32> %99, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 1, i32 3, i32 4, i32 6, i32 5, i32 7>
  %108 = bitcast <8 x i32> %107 to <4 x i64>
  %109 = shufflevector <4 x i64> %108, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %110 = bitcast <4 x i64> %109 to <8 x i32>
  %111 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %110, <8 x i32> %110) #5
  %112 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %111, <8 x i32> %111) #5
  br label %213

113:                                              ; preds = %8, %113
  %114 = phi i8* [ %200, %113 ], [ %0, %8 ]
  %115 = phi i8* [ %201, %113 ], [ %4, %8 ]
  %116 = phi i8* [ %202, %113 ], [ %2, %8 ]
  %117 = phi i8* [ %203, %113 ], [ %5, %8 ]
  %118 = phi i32 [ %204, %113 ], [ 0, %8 ]
  %119 = phi <8 x i32> [ %199, %113 ], [ zeroinitializer, %8 ]
  %120 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %114) #5
  %121 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %115) #5
  %122 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %116) #5
  %123 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %117) #5
  %124 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %123
  %125 = shufflevector <32 x i8> %121, <32 x i8> %122, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %126 = shufflevector <32 x i8> %123, <32 x i8> %124, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %127 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %125, <32 x i8> %126) #5
  %128 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %127, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %129 = shufflevector <32 x i8> %121, <32 x i8> %122, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %130 = shufflevector <32 x i8> %123, <32 x i8> %124, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %131 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %129, <32 x i8> %130) #5
  %132 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %131, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %133 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %128, <16 x i16> %132) #5
  %134 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %133, <32 x i8> %120) #5
  %135 = bitcast <4 x i64> %134 to <8 x i32>
  %136 = add <8 x i32> %119, %135
  %137 = getelementptr inbounds i8, i8* %114, i64 32
  %138 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %137) #5
  %139 = getelementptr inbounds i8, i8* %115, i64 32
  %140 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %139) #5
  %141 = getelementptr inbounds i8, i8* %116, i64 32
  %142 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %141) #5
  %143 = getelementptr inbounds i8, i8* %117, i64 32
  %144 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %143) #5
  %145 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %144
  %146 = shufflevector <32 x i8> %140, <32 x i8> %142, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %147 = shufflevector <32 x i8> %144, <32 x i8> %145, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %148 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %146, <32 x i8> %147) #5
  %149 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %148, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %150 = shufflevector <32 x i8> %140, <32 x i8> %142, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %151 = shufflevector <32 x i8> %144, <32 x i8> %145, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %152 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %150, <32 x i8> %151) #5
  %153 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %152, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %154 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %149, <16 x i16> %153) #5
  %155 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %154, <32 x i8> %138) #5
  %156 = bitcast <4 x i64> %155 to <8 x i32>
  %157 = add <8 x i32> %136, %156
  %158 = getelementptr inbounds i8, i8* %114, i64 64
  %159 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %158) #5
  %160 = getelementptr inbounds i8, i8* %115, i64 64
  %161 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %160) #5
  %162 = getelementptr inbounds i8, i8* %116, i64 64
  %163 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %162) #5
  %164 = getelementptr inbounds i8, i8* %117, i64 64
  %165 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %164) #5
  %166 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %165
  %167 = shufflevector <32 x i8> %161, <32 x i8> %163, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %168 = shufflevector <32 x i8> %165, <32 x i8> %166, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %169 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %167, <32 x i8> %168) #5
  %170 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %169, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %171 = shufflevector <32 x i8> %161, <32 x i8> %163, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %172 = shufflevector <32 x i8> %165, <32 x i8> %166, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %173 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %171, <32 x i8> %172) #5
  %174 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %173, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %175 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %170, <16 x i16> %174) #5
  %176 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %175, <32 x i8> %159) #5
  %177 = bitcast <4 x i64> %176 to <8 x i32>
  %178 = add <8 x i32> %157, %177
  %179 = getelementptr inbounds i8, i8* %114, i64 96
  %180 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %179) #5
  %181 = getelementptr inbounds i8, i8* %115, i64 96
  %182 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %181) #5
  %183 = getelementptr inbounds i8, i8* %116, i64 96
  %184 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %183) #5
  %185 = getelementptr inbounds i8, i8* %117, i64 96
  %186 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %185) #5
  %187 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %186
  %188 = shufflevector <32 x i8> %182, <32 x i8> %184, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %189 = shufflevector <32 x i8> %186, <32 x i8> %187, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %190 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %188, <32 x i8> %189) #5
  %191 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %190, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %192 = shufflevector <32 x i8> %182, <32 x i8> %184, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %193 = shufflevector <32 x i8> %186, <32 x i8> %187, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %194 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %192, <32 x i8> %193) #5
  %195 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %194, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %196 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %191, <16 x i16> %195) #5
  %197 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %196, <32 x i8> %180) #5
  %198 = bitcast <4 x i64> %197 to <8 x i32>
  %199 = add <8 x i32> %178, %198
  %200 = getelementptr inbounds i8, i8* %114, i64 %10
  %201 = getelementptr inbounds i8, i8* %115, i64 128
  %202 = getelementptr inbounds i8, i8* %116, i64 %11
  %203 = getelementptr inbounds i8, i8* %117, i64 %12
  %204 = add nuw nsw i32 %118, 1
  %205 = icmp eq i32 %204, 128
  br i1 %205, label %206, label %113

206:                                              ; preds = %113
  %207 = shufflevector <8 x i32> %199, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 1, i32 3, i32 4, i32 6, i32 5, i32 7>
  %208 = bitcast <8 x i32> %207 to <4 x i64>
  %209 = shufflevector <4 x i64> %208, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %210 = bitcast <4 x i64> %209 to <8 x i32>
  %211 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %210, <8 x i32> %210) #5
  %212 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %211, <8 x i32> %211) #5
  br label %213

213:                                              ; preds = %106, %206
  %214 = phi <8 x i32> [ %112, %106 ], [ %212, %206 ]
  %215 = extractelement <8 x i32> %214, i64 0
  ret i32 %215
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @aom_masked_sad4x16_avx2(i8*, i32, i8*, i32, i8*, i8*, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %10, label %12

10:                                               ; preds = %8
  %11 = tail call i32 @aom_masked_sad4xh_ssse3(i8* %0, i32 %1, i8* %2, i32 %3, i8* %4, i32 4, i8* %5, i32 %6, i32 16) #5
  br label %14

12:                                               ; preds = %8
  %13 = tail call i32 @aom_masked_sad4xh_ssse3(i8* %0, i32 %1, i8* %4, i32 4, i8* %2, i32 %3, i8* %5, i32 %6, i32 16) #5
  br label %14

14:                                               ; preds = %10, %12
  %15 = phi i32 [ %13, %12 ], [ %11, %10 ]
  ret i32 %15
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad16x4_avx2(i8*, i32, i8*, i32, i8*, i8*, i32, i32) local_unnamed_addr #1 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  %13 = shl i32 %1, 1
  %14 = sext i32 %13 to i64
  %15 = shl i32 %3, 1
  %16 = sext i32 %15 to i64
  %17 = shl i32 %6, 1
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds i8, i8* %0, i64 %10
  %20 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %0) #5
  %21 = bitcast <16 x i8> %20 to <2 x i64>
  %22 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %19) #5
  %23 = bitcast <16 x i8> %22 to <2 x i64>
  %24 = shufflevector <2 x i64> %21, <2 x i64> %23, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  br i1 %9, label %111, label %25

25:                                               ; preds = %8
  %26 = getelementptr inbounds i8, i8* %4, i64 16
  %27 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %4) #5
  %28 = bitcast <16 x i8> %27 to <2 x i64>
  %29 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %26) #5
  %30 = bitcast <16 x i8> %29 to <2 x i64>
  %31 = shufflevector <2 x i64> %28, <2 x i64> %30, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %32 = getelementptr inbounds i8, i8* %2, i64 %11
  %33 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %2) #5
  %34 = bitcast <16 x i8> %33 to <2 x i64>
  %35 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %32) #5
  %36 = bitcast <16 x i8> %35 to <2 x i64>
  %37 = shufflevector <2 x i64> %34, <2 x i64> %36, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %38 = getelementptr inbounds i8, i8* %5, i64 %12
  %39 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %5) #5
  %40 = bitcast <16 x i8> %39 to <2 x i64>
  %41 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %38) #5
  %42 = bitcast <16 x i8> %41 to <2 x i64>
  %43 = shufflevector <2 x i64> %40, <2 x i64> %42, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %44 = bitcast <4 x i64> %43 to <32 x i8>
  %45 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %44
  %46 = bitcast <4 x i64> %31 to <32 x i8>
  %47 = bitcast <4 x i64> %37 to <32 x i8>
  %48 = shufflevector <32 x i8> %46, <32 x i8> %47, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %49 = shufflevector <32 x i8> %44, <32 x i8> %45, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %50 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %48, <32 x i8> %49) #5
  %51 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %50, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %52 = shufflevector <32 x i8> %46, <32 x i8> %47, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %53 = shufflevector <32 x i8> %44, <32 x i8> %45, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %54 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %52, <32 x i8> %53) #5
  %55 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %54, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %56 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %51, <16 x i16> %55) #5
  %57 = bitcast <4 x i64> %24 to <32 x i8>
  %58 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %56, <32 x i8> %57) #5
  %59 = bitcast <4 x i64> %58 to <8 x i32>
  %60 = getelementptr inbounds i8, i8* %0, i64 %14
  %61 = getelementptr inbounds i8, i8* %4, i64 32
  %62 = getelementptr inbounds i8, i8* %2, i64 %16
  %63 = getelementptr inbounds i8, i8* %5, i64 %18
  %64 = getelementptr inbounds i8, i8* %60, i64 %10
  %65 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %60) #5
  %66 = bitcast <16 x i8> %65 to <2 x i64>
  %67 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %64) #5
  %68 = bitcast <16 x i8> %67 to <2 x i64>
  %69 = shufflevector <2 x i64> %66, <2 x i64> %68, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %70 = getelementptr inbounds i8, i8* %4, i64 48
  %71 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %61) #5
  %72 = bitcast <16 x i8> %71 to <2 x i64>
  %73 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %70) #5
  %74 = bitcast <16 x i8> %73 to <2 x i64>
  %75 = shufflevector <2 x i64> %72, <2 x i64> %74, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %76 = getelementptr inbounds i8, i8* %62, i64 %11
  %77 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %62) #5
  %78 = bitcast <16 x i8> %77 to <2 x i64>
  %79 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %76) #5
  %80 = bitcast <16 x i8> %79 to <2 x i64>
  %81 = shufflevector <2 x i64> %78, <2 x i64> %80, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %82 = getelementptr inbounds i8, i8* %63, i64 %12
  %83 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %63) #5
  %84 = bitcast <16 x i8> %83 to <2 x i64>
  %85 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %82) #5
  %86 = bitcast <16 x i8> %85 to <2 x i64>
  %87 = shufflevector <2 x i64> %84, <2 x i64> %86, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %88 = bitcast <4 x i64> %87 to <32 x i8>
  %89 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %88
  %90 = bitcast <4 x i64> %75 to <32 x i8>
  %91 = bitcast <4 x i64> %81 to <32 x i8>
  %92 = shufflevector <32 x i8> %90, <32 x i8> %91, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %93 = shufflevector <32 x i8> %88, <32 x i8> %89, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %94 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %92, <32 x i8> %93) #5
  %95 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %94, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %96 = shufflevector <32 x i8> %90, <32 x i8> %91, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %97 = shufflevector <32 x i8> %88, <32 x i8> %89, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %98 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %96, <32 x i8> %97) #5
  %99 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %98, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %100 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %95, <16 x i16> %99) #5
  %101 = bitcast <4 x i64> %69 to <32 x i8>
  %102 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %100, <32 x i8> %101) #5
  %103 = bitcast <4 x i64> %102 to <8 x i32>
  %104 = add <8 x i32> %59, %103
  %105 = shufflevector <8 x i32> %104, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 1, i32 3, i32 4, i32 6, i32 5, i32 7>
  %106 = bitcast <8 x i32> %105 to <4 x i64>
  %107 = shufflevector <4 x i64> %106, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %108 = bitcast <4 x i64> %107 to <8 x i32>
  %109 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %108, <8 x i32> %108) #5
  %110 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %109, <8 x i32> %109) #5
  br label %197

111:                                              ; preds = %8
  %112 = getelementptr inbounds i8, i8* %2, i64 %11
  %113 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %2) #5
  %114 = bitcast <16 x i8> %113 to <2 x i64>
  %115 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %112) #5
  %116 = bitcast <16 x i8> %115 to <2 x i64>
  %117 = shufflevector <2 x i64> %114, <2 x i64> %116, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %118 = getelementptr inbounds i8, i8* %4, i64 16
  %119 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %4) #5
  %120 = bitcast <16 x i8> %119 to <2 x i64>
  %121 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %118) #5
  %122 = bitcast <16 x i8> %121 to <2 x i64>
  %123 = shufflevector <2 x i64> %120, <2 x i64> %122, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %124 = getelementptr inbounds i8, i8* %5, i64 %12
  %125 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %5) #5
  %126 = bitcast <16 x i8> %125 to <2 x i64>
  %127 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %124) #5
  %128 = bitcast <16 x i8> %127 to <2 x i64>
  %129 = shufflevector <2 x i64> %126, <2 x i64> %128, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %130 = bitcast <4 x i64> %129 to <32 x i8>
  %131 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %130
  %132 = bitcast <4 x i64> %117 to <32 x i8>
  %133 = bitcast <4 x i64> %123 to <32 x i8>
  %134 = shufflevector <32 x i8> %132, <32 x i8> %133, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %135 = shufflevector <32 x i8> %130, <32 x i8> %131, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %136 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %134, <32 x i8> %135) #5
  %137 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %136, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %138 = shufflevector <32 x i8> %132, <32 x i8> %133, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %139 = shufflevector <32 x i8> %130, <32 x i8> %131, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %140 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %138, <32 x i8> %139) #5
  %141 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %140, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %142 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %137, <16 x i16> %141) #5
  %143 = bitcast <4 x i64> %24 to <32 x i8>
  %144 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %142, <32 x i8> %143) #5
  %145 = bitcast <4 x i64> %144 to <8 x i32>
  %146 = getelementptr inbounds i8, i8* %0, i64 %14
  %147 = getelementptr inbounds i8, i8* %2, i64 %16
  %148 = getelementptr inbounds i8, i8* %4, i64 32
  %149 = getelementptr inbounds i8, i8* %5, i64 %18
  %150 = getelementptr inbounds i8, i8* %146, i64 %10
  %151 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %146) #5
  %152 = bitcast <16 x i8> %151 to <2 x i64>
  %153 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %150) #5
  %154 = bitcast <16 x i8> %153 to <2 x i64>
  %155 = shufflevector <2 x i64> %152, <2 x i64> %154, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %156 = getelementptr inbounds i8, i8* %147, i64 %11
  %157 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %147) #5
  %158 = bitcast <16 x i8> %157 to <2 x i64>
  %159 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %156) #5
  %160 = bitcast <16 x i8> %159 to <2 x i64>
  %161 = shufflevector <2 x i64> %158, <2 x i64> %160, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %162 = getelementptr inbounds i8, i8* %4, i64 48
  %163 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %148) #5
  %164 = bitcast <16 x i8> %163 to <2 x i64>
  %165 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %162) #5
  %166 = bitcast <16 x i8> %165 to <2 x i64>
  %167 = shufflevector <2 x i64> %164, <2 x i64> %166, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %168 = getelementptr inbounds i8, i8* %149, i64 %12
  %169 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %149) #5
  %170 = bitcast <16 x i8> %169 to <2 x i64>
  %171 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %168) #5
  %172 = bitcast <16 x i8> %171 to <2 x i64>
  %173 = shufflevector <2 x i64> %170, <2 x i64> %172, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %174 = bitcast <4 x i64> %173 to <32 x i8>
  %175 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %174
  %176 = bitcast <4 x i64> %161 to <32 x i8>
  %177 = bitcast <4 x i64> %167 to <32 x i8>
  %178 = shufflevector <32 x i8> %176, <32 x i8> %177, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %179 = shufflevector <32 x i8> %174, <32 x i8> %175, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %180 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %178, <32 x i8> %179) #5
  %181 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %180, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %182 = shufflevector <32 x i8> %176, <32 x i8> %177, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %183 = shufflevector <32 x i8> %174, <32 x i8> %175, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %184 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %182, <32 x i8> %183) #5
  %185 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %184, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %186 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %181, <16 x i16> %185) #5
  %187 = bitcast <4 x i64> %155 to <32 x i8>
  %188 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %186, <32 x i8> %187) #5
  %189 = bitcast <4 x i64> %188 to <8 x i32>
  %190 = add <8 x i32> %145, %189
  %191 = shufflevector <8 x i32> %190, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 1, i32 3, i32 4, i32 6, i32 5, i32 7>
  %192 = bitcast <8 x i32> %191 to <4 x i64>
  %193 = shufflevector <4 x i64> %192, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %194 = bitcast <4 x i64> %193 to <8 x i32>
  %195 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %194, <8 x i32> %194) #5
  %196 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %195, <8 x i32> %195) #5
  br label %197

197:                                              ; preds = %111, %25
  %198 = phi <8 x i32> [ %196, %111 ], [ %110, %25 ]
  %199 = extractelement <8 x i32> %198, i64 0
  ret i32 %199
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @aom_masked_sad8x32_avx2(i8*, i32, i8*, i32, i8*, i8*, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %10, label %12

10:                                               ; preds = %8
  %11 = tail call i32 @aom_masked_sad8xh_ssse3(i8* %0, i32 %1, i8* %2, i32 %3, i8* %4, i32 8, i8* %5, i32 %6, i32 32) #5
  br label %14

12:                                               ; preds = %8
  %13 = tail call i32 @aom_masked_sad8xh_ssse3(i8* %0, i32 %1, i8* %4, i32 8, i8* %2, i32 %3, i8* %5, i32 %6, i32 32) #5
  br label %14

14:                                               ; preds = %10, %12
  %15 = phi i32 [ %13, %12 ], [ %11, %10 ]
  ret i32 %15
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad32x8_avx2(i8*, i32, i8*, i32, i8*, i8*, i32, i32) local_unnamed_addr #1 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  %13 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %0) #5
  br i1 %9, label %183, label %14

14:                                               ; preds = %8
  %15 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %4) #5
  %16 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %2) #5
  %17 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %5) #5
  %18 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %17
  %19 = shufflevector <32 x i8> %15, <32 x i8> %16, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %20 = shufflevector <32 x i8> %17, <32 x i8> %18, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %21 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %19, <32 x i8> %20) #5
  %22 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %21, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %23 = shufflevector <32 x i8> %15, <32 x i8> %16, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %24 = shufflevector <32 x i8> %17, <32 x i8> %18, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %25 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %23, <32 x i8> %24) #5
  %26 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %25, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %27 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %22, <16 x i16> %26) #5
  %28 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %27, <32 x i8> %13) #5
  %29 = bitcast <4 x i64> %28 to <8 x i32>
  %30 = getelementptr inbounds i8, i8* %0, i64 %10
  %31 = getelementptr inbounds i8, i8* %4, i64 32
  %32 = getelementptr inbounds i8, i8* %2, i64 %11
  %33 = getelementptr inbounds i8, i8* %5, i64 %12
  %34 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %30) #5
  %35 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %31) #5
  %36 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %32) #5
  %37 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %33) #5
  %38 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %37
  %39 = shufflevector <32 x i8> %35, <32 x i8> %36, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %40 = shufflevector <32 x i8> %37, <32 x i8> %38, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %41 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %39, <32 x i8> %40) #5
  %42 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %41, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %43 = shufflevector <32 x i8> %35, <32 x i8> %36, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %44 = shufflevector <32 x i8> %37, <32 x i8> %38, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %45 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %43, <32 x i8> %44) #5
  %46 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %45, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %47 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %42, <16 x i16> %46) #5
  %48 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %47, <32 x i8> %34) #5
  %49 = bitcast <4 x i64> %48 to <8 x i32>
  %50 = add <8 x i32> %29, %49
  %51 = getelementptr inbounds i8, i8* %30, i64 %10
  %52 = getelementptr inbounds i8, i8* %4, i64 64
  %53 = getelementptr inbounds i8, i8* %32, i64 %11
  %54 = getelementptr inbounds i8, i8* %33, i64 %12
  %55 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %51) #5
  %56 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %52) #5
  %57 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %53) #5
  %58 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %54) #5
  %59 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %58
  %60 = shufflevector <32 x i8> %56, <32 x i8> %57, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %61 = shufflevector <32 x i8> %58, <32 x i8> %59, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %62 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %60, <32 x i8> %61) #5
  %63 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %62, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %64 = shufflevector <32 x i8> %56, <32 x i8> %57, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %65 = shufflevector <32 x i8> %58, <32 x i8> %59, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %66 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %64, <32 x i8> %65) #5
  %67 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %66, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %68 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %63, <16 x i16> %67) #5
  %69 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %68, <32 x i8> %55) #5
  %70 = bitcast <4 x i64> %69 to <8 x i32>
  %71 = add <8 x i32> %50, %70
  %72 = getelementptr inbounds i8, i8* %51, i64 %10
  %73 = getelementptr inbounds i8, i8* %4, i64 96
  %74 = getelementptr inbounds i8, i8* %53, i64 %11
  %75 = getelementptr inbounds i8, i8* %54, i64 %12
  %76 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %72) #5
  %77 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %73) #5
  %78 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %74) #5
  %79 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %75) #5
  %80 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %79
  %81 = shufflevector <32 x i8> %77, <32 x i8> %78, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %82 = shufflevector <32 x i8> %79, <32 x i8> %80, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %83 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %81, <32 x i8> %82) #5
  %84 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %83, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %85 = shufflevector <32 x i8> %77, <32 x i8> %78, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %86 = shufflevector <32 x i8> %79, <32 x i8> %80, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %87 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %85, <32 x i8> %86) #5
  %88 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %87, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %89 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %84, <16 x i16> %88) #5
  %90 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %89, <32 x i8> %76) #5
  %91 = bitcast <4 x i64> %90 to <8 x i32>
  %92 = add <8 x i32> %71, %91
  %93 = getelementptr inbounds i8, i8* %72, i64 %10
  %94 = getelementptr inbounds i8, i8* %4, i64 128
  %95 = getelementptr inbounds i8, i8* %74, i64 %11
  %96 = getelementptr inbounds i8, i8* %75, i64 %12
  %97 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %93) #5
  %98 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %94) #5
  %99 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %95) #5
  %100 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %96) #5
  %101 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %100
  %102 = shufflevector <32 x i8> %98, <32 x i8> %99, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %103 = shufflevector <32 x i8> %100, <32 x i8> %101, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %104 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %102, <32 x i8> %103) #5
  %105 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %104, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %106 = shufflevector <32 x i8> %98, <32 x i8> %99, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %107 = shufflevector <32 x i8> %100, <32 x i8> %101, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %108 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %106, <32 x i8> %107) #5
  %109 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %108, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %110 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %105, <16 x i16> %109) #5
  %111 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %110, <32 x i8> %97) #5
  %112 = bitcast <4 x i64> %111 to <8 x i32>
  %113 = add <8 x i32> %92, %112
  %114 = getelementptr inbounds i8, i8* %93, i64 %10
  %115 = getelementptr inbounds i8, i8* %4, i64 160
  %116 = getelementptr inbounds i8, i8* %95, i64 %11
  %117 = getelementptr inbounds i8, i8* %96, i64 %12
  %118 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %114) #5
  %119 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %115) #5
  %120 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %116) #5
  %121 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %117) #5
  %122 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %121
  %123 = shufflevector <32 x i8> %119, <32 x i8> %120, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %124 = shufflevector <32 x i8> %121, <32 x i8> %122, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %125 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %123, <32 x i8> %124) #5
  %126 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %125, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %127 = shufflevector <32 x i8> %119, <32 x i8> %120, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %128 = shufflevector <32 x i8> %121, <32 x i8> %122, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %129 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %127, <32 x i8> %128) #5
  %130 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %129, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %131 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %126, <16 x i16> %130) #5
  %132 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %131, <32 x i8> %118) #5
  %133 = bitcast <4 x i64> %132 to <8 x i32>
  %134 = add <8 x i32> %113, %133
  %135 = getelementptr inbounds i8, i8* %114, i64 %10
  %136 = getelementptr inbounds i8, i8* %4, i64 192
  %137 = getelementptr inbounds i8, i8* %116, i64 %11
  %138 = getelementptr inbounds i8, i8* %117, i64 %12
  %139 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %135) #5
  %140 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %136) #5
  %141 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %137) #5
  %142 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %138) #5
  %143 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %142
  %144 = shufflevector <32 x i8> %140, <32 x i8> %141, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %145 = shufflevector <32 x i8> %142, <32 x i8> %143, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %146 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %144, <32 x i8> %145) #5
  %147 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %146, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %148 = shufflevector <32 x i8> %140, <32 x i8> %141, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %149 = shufflevector <32 x i8> %142, <32 x i8> %143, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %150 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %148, <32 x i8> %149) #5
  %151 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %150, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %152 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %147, <16 x i16> %151) #5
  %153 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %152, <32 x i8> %139) #5
  %154 = bitcast <4 x i64> %153 to <8 x i32>
  %155 = add <8 x i32> %134, %154
  %156 = getelementptr inbounds i8, i8* %135, i64 %10
  %157 = getelementptr inbounds i8, i8* %4, i64 224
  %158 = getelementptr inbounds i8, i8* %137, i64 %11
  %159 = getelementptr inbounds i8, i8* %138, i64 %12
  %160 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %156) #5
  %161 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %157) #5
  %162 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %158) #5
  %163 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %159) #5
  %164 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %163
  %165 = shufflevector <32 x i8> %161, <32 x i8> %162, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %166 = shufflevector <32 x i8> %163, <32 x i8> %164, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %167 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %165, <32 x i8> %166) #5
  %168 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %167, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %169 = shufflevector <32 x i8> %161, <32 x i8> %162, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %170 = shufflevector <32 x i8> %163, <32 x i8> %164, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %171 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %169, <32 x i8> %170) #5
  %172 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %171, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %173 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %168, <16 x i16> %172) #5
  %174 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %173, <32 x i8> %160) #5
  %175 = bitcast <4 x i64> %174 to <8 x i32>
  %176 = add <8 x i32> %155, %175
  %177 = shufflevector <8 x i32> %176, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 1, i32 3, i32 4, i32 6, i32 5, i32 7>
  %178 = bitcast <8 x i32> %177 to <4 x i64>
  %179 = shufflevector <4 x i64> %178, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %180 = bitcast <4 x i64> %179 to <8 x i32>
  %181 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %180, <8 x i32> %180) #5
  %182 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %181, <8 x i32> %181) #5
  br label %352

183:                                              ; preds = %8
  %184 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %2) #5
  %185 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %4) #5
  %186 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %5) #5
  %187 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %186
  %188 = shufflevector <32 x i8> %184, <32 x i8> %185, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %189 = shufflevector <32 x i8> %186, <32 x i8> %187, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %190 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %188, <32 x i8> %189) #5
  %191 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %190, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %192 = shufflevector <32 x i8> %184, <32 x i8> %185, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %193 = shufflevector <32 x i8> %186, <32 x i8> %187, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %194 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %192, <32 x i8> %193) #5
  %195 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %194, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %196 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %191, <16 x i16> %195) #5
  %197 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %196, <32 x i8> %13) #5
  %198 = bitcast <4 x i64> %197 to <8 x i32>
  %199 = getelementptr inbounds i8, i8* %0, i64 %10
  %200 = getelementptr inbounds i8, i8* %2, i64 %11
  %201 = getelementptr inbounds i8, i8* %4, i64 32
  %202 = getelementptr inbounds i8, i8* %5, i64 %12
  %203 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %199) #5
  %204 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %200) #5
  %205 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %201) #5
  %206 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %202) #5
  %207 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %206
  %208 = shufflevector <32 x i8> %204, <32 x i8> %205, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %209 = shufflevector <32 x i8> %206, <32 x i8> %207, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %210 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %208, <32 x i8> %209) #5
  %211 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %210, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %212 = shufflevector <32 x i8> %204, <32 x i8> %205, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %213 = shufflevector <32 x i8> %206, <32 x i8> %207, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %214 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %212, <32 x i8> %213) #5
  %215 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %214, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %216 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %211, <16 x i16> %215) #5
  %217 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %216, <32 x i8> %203) #5
  %218 = bitcast <4 x i64> %217 to <8 x i32>
  %219 = add <8 x i32> %198, %218
  %220 = getelementptr inbounds i8, i8* %199, i64 %10
  %221 = getelementptr inbounds i8, i8* %200, i64 %11
  %222 = getelementptr inbounds i8, i8* %4, i64 64
  %223 = getelementptr inbounds i8, i8* %202, i64 %12
  %224 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %220) #5
  %225 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %221) #5
  %226 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %222) #5
  %227 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %223) #5
  %228 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %227
  %229 = shufflevector <32 x i8> %225, <32 x i8> %226, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %230 = shufflevector <32 x i8> %227, <32 x i8> %228, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %231 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %229, <32 x i8> %230) #5
  %232 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %231, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %233 = shufflevector <32 x i8> %225, <32 x i8> %226, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %234 = shufflevector <32 x i8> %227, <32 x i8> %228, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %235 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %233, <32 x i8> %234) #5
  %236 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %235, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %237 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %232, <16 x i16> %236) #5
  %238 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %237, <32 x i8> %224) #5
  %239 = bitcast <4 x i64> %238 to <8 x i32>
  %240 = add <8 x i32> %219, %239
  %241 = getelementptr inbounds i8, i8* %220, i64 %10
  %242 = getelementptr inbounds i8, i8* %221, i64 %11
  %243 = getelementptr inbounds i8, i8* %4, i64 96
  %244 = getelementptr inbounds i8, i8* %223, i64 %12
  %245 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %241) #5
  %246 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %242) #5
  %247 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %243) #5
  %248 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %244) #5
  %249 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %248
  %250 = shufflevector <32 x i8> %246, <32 x i8> %247, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %251 = shufflevector <32 x i8> %248, <32 x i8> %249, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %252 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %250, <32 x i8> %251) #5
  %253 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %252, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %254 = shufflevector <32 x i8> %246, <32 x i8> %247, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %255 = shufflevector <32 x i8> %248, <32 x i8> %249, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %256 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %254, <32 x i8> %255) #5
  %257 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %256, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %258 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %253, <16 x i16> %257) #5
  %259 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %258, <32 x i8> %245) #5
  %260 = bitcast <4 x i64> %259 to <8 x i32>
  %261 = add <8 x i32> %240, %260
  %262 = getelementptr inbounds i8, i8* %241, i64 %10
  %263 = getelementptr inbounds i8, i8* %242, i64 %11
  %264 = getelementptr inbounds i8, i8* %4, i64 128
  %265 = getelementptr inbounds i8, i8* %244, i64 %12
  %266 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %262) #5
  %267 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %263) #5
  %268 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %264) #5
  %269 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %265) #5
  %270 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %269
  %271 = shufflevector <32 x i8> %267, <32 x i8> %268, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %272 = shufflevector <32 x i8> %269, <32 x i8> %270, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %273 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %271, <32 x i8> %272) #5
  %274 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %273, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %275 = shufflevector <32 x i8> %267, <32 x i8> %268, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %276 = shufflevector <32 x i8> %269, <32 x i8> %270, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %277 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %275, <32 x i8> %276) #5
  %278 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %277, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %279 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %274, <16 x i16> %278) #5
  %280 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %279, <32 x i8> %266) #5
  %281 = bitcast <4 x i64> %280 to <8 x i32>
  %282 = add <8 x i32> %261, %281
  %283 = getelementptr inbounds i8, i8* %262, i64 %10
  %284 = getelementptr inbounds i8, i8* %263, i64 %11
  %285 = getelementptr inbounds i8, i8* %4, i64 160
  %286 = getelementptr inbounds i8, i8* %265, i64 %12
  %287 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %283) #5
  %288 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %284) #5
  %289 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %285) #5
  %290 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %286) #5
  %291 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %290
  %292 = shufflevector <32 x i8> %288, <32 x i8> %289, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %293 = shufflevector <32 x i8> %290, <32 x i8> %291, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %294 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %292, <32 x i8> %293) #5
  %295 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %294, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %296 = shufflevector <32 x i8> %288, <32 x i8> %289, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %297 = shufflevector <32 x i8> %290, <32 x i8> %291, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %298 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %296, <32 x i8> %297) #5
  %299 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %298, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %300 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %295, <16 x i16> %299) #5
  %301 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %300, <32 x i8> %287) #5
  %302 = bitcast <4 x i64> %301 to <8 x i32>
  %303 = add <8 x i32> %282, %302
  %304 = getelementptr inbounds i8, i8* %283, i64 %10
  %305 = getelementptr inbounds i8, i8* %284, i64 %11
  %306 = getelementptr inbounds i8, i8* %4, i64 192
  %307 = getelementptr inbounds i8, i8* %286, i64 %12
  %308 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %304) #5
  %309 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %305) #5
  %310 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %306) #5
  %311 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %307) #5
  %312 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %311
  %313 = shufflevector <32 x i8> %309, <32 x i8> %310, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %314 = shufflevector <32 x i8> %311, <32 x i8> %312, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %315 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %313, <32 x i8> %314) #5
  %316 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %315, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %317 = shufflevector <32 x i8> %309, <32 x i8> %310, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %318 = shufflevector <32 x i8> %311, <32 x i8> %312, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %319 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %317, <32 x i8> %318) #5
  %320 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %319, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %321 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %316, <16 x i16> %320) #5
  %322 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %321, <32 x i8> %308) #5
  %323 = bitcast <4 x i64> %322 to <8 x i32>
  %324 = add <8 x i32> %303, %323
  %325 = getelementptr inbounds i8, i8* %304, i64 %10
  %326 = getelementptr inbounds i8, i8* %305, i64 %11
  %327 = getelementptr inbounds i8, i8* %4, i64 224
  %328 = getelementptr inbounds i8, i8* %307, i64 %12
  %329 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %325) #5
  %330 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %326) #5
  %331 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %327) #5
  %332 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %328) #5
  %333 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %332
  %334 = shufflevector <32 x i8> %330, <32 x i8> %331, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %335 = shufflevector <32 x i8> %332, <32 x i8> %333, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %336 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %334, <32 x i8> %335) #5
  %337 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %336, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %338 = shufflevector <32 x i8> %330, <32 x i8> %331, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %339 = shufflevector <32 x i8> %332, <32 x i8> %333, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %340 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %338, <32 x i8> %339) #5
  %341 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %340, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %342 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %337, <16 x i16> %341) #5
  %343 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %342, <32 x i8> %329) #5
  %344 = bitcast <4 x i64> %343 to <8 x i32>
  %345 = add <8 x i32> %324, %344
  %346 = shufflevector <8 x i32> %345, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 1, i32 3, i32 4, i32 6, i32 5, i32 7>
  %347 = bitcast <8 x i32> %346 to <4 x i64>
  %348 = shufflevector <4 x i64> %347, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %349 = bitcast <4 x i64> %348 to <8 x i32>
  %350 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %349, <8 x i32> %349) #5
  %351 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %350, <8 x i32> %350) #5
  br label %352

352:                                              ; preds = %183, %14
  %353 = phi <8 x i32> [ %351, %183 ], [ %182, %14 ]
  %354 = extractelement <8 x i32> %353, i64 0
  ret i32 %354
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad16x64_avx2(i8*, i32, i8*, i32, i8*, i8*, i32, i32) local_unnamed_addr #1 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  %13 = shl i32 %1, 1
  %14 = sext i32 %13 to i64
  %15 = shl i32 %3, 1
  %16 = sext i32 %15 to i64
  %17 = shl i32 %6, 1
  %18 = sext i32 %17 to i64
  br i1 %9, label %19, label %80

19:                                               ; preds = %8, %19
  %20 = phi i8* [ %67, %19 ], [ %0, %8 ]
  %21 = phi i8* [ %68, %19 ], [ %2, %8 ]
  %22 = phi i8* [ %69, %19 ], [ %4, %8 ]
  %23 = phi i8* [ %70, %19 ], [ %5, %8 ]
  %24 = phi i32 [ %71, %19 ], [ 0, %8 ]
  %25 = phi <8 x i32> [ %66, %19 ], [ zeroinitializer, %8 ]
  %26 = getelementptr inbounds i8, i8* %20, i64 %10
  %27 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %20) #5
  %28 = bitcast <16 x i8> %27 to <2 x i64>
  %29 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %26) #5
  %30 = bitcast <16 x i8> %29 to <2 x i64>
  %31 = shufflevector <2 x i64> %28, <2 x i64> %30, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %32 = getelementptr inbounds i8, i8* %21, i64 %11
  %33 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %21) #5
  %34 = bitcast <16 x i8> %33 to <2 x i64>
  %35 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %32) #5
  %36 = bitcast <16 x i8> %35 to <2 x i64>
  %37 = shufflevector <2 x i64> %34, <2 x i64> %36, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %38 = getelementptr inbounds i8, i8* %22, i64 16
  %39 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %22) #5
  %40 = bitcast <16 x i8> %39 to <2 x i64>
  %41 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %38) #5
  %42 = bitcast <16 x i8> %41 to <2 x i64>
  %43 = shufflevector <2 x i64> %40, <2 x i64> %42, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %44 = getelementptr inbounds i8, i8* %23, i64 %12
  %45 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %23) #5
  %46 = bitcast <16 x i8> %45 to <2 x i64>
  %47 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %44) #5
  %48 = bitcast <16 x i8> %47 to <2 x i64>
  %49 = shufflevector <2 x i64> %46, <2 x i64> %48, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %50 = bitcast <4 x i64> %49 to <32 x i8>
  %51 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %50
  %52 = bitcast <4 x i64> %37 to <32 x i8>
  %53 = bitcast <4 x i64> %43 to <32 x i8>
  %54 = shufflevector <32 x i8> %52, <32 x i8> %53, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %55 = shufflevector <32 x i8> %50, <32 x i8> %51, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %56 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %54, <32 x i8> %55) #5
  %57 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %56, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %58 = shufflevector <32 x i8> %52, <32 x i8> %53, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %59 = shufflevector <32 x i8> %50, <32 x i8> %51, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %60 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %58, <32 x i8> %59) #5
  %61 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %60, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %62 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %57, <16 x i16> %61) #5
  %63 = bitcast <4 x i64> %31 to <32 x i8>
  %64 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %62, <32 x i8> %63) #5
  %65 = bitcast <4 x i64> %64 to <8 x i32>
  %66 = add <8 x i32> %25, %65
  %67 = getelementptr inbounds i8, i8* %20, i64 %14
  %68 = getelementptr inbounds i8, i8* %21, i64 %16
  %69 = getelementptr inbounds i8, i8* %22, i64 32
  %70 = getelementptr inbounds i8, i8* %23, i64 %18
  %71 = add nuw nsw i32 %24, 2
  %72 = icmp ult i32 %71, 64
  br i1 %72, label %19, label %73

73:                                               ; preds = %19
  %74 = shufflevector <8 x i32> %66, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 1, i32 3, i32 4, i32 6, i32 5, i32 7>
  %75 = bitcast <8 x i32> %74 to <4 x i64>
  %76 = shufflevector <4 x i64> %75, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %77 = bitcast <4 x i64> %76 to <8 x i32>
  %78 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %77, <8 x i32> %77) #5
  %79 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %78, <8 x i32> %78) #5
  br label %141

80:                                               ; preds = %8, %80
  %81 = phi i8* [ %128, %80 ], [ %0, %8 ]
  %82 = phi i8* [ %129, %80 ], [ %4, %8 ]
  %83 = phi i8* [ %130, %80 ], [ %2, %8 ]
  %84 = phi i8* [ %131, %80 ], [ %5, %8 ]
  %85 = phi i32 [ %132, %80 ], [ 0, %8 ]
  %86 = phi <8 x i32> [ %127, %80 ], [ zeroinitializer, %8 ]
  %87 = getelementptr inbounds i8, i8* %81, i64 %10
  %88 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %81) #5
  %89 = bitcast <16 x i8> %88 to <2 x i64>
  %90 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %87) #5
  %91 = bitcast <16 x i8> %90 to <2 x i64>
  %92 = shufflevector <2 x i64> %89, <2 x i64> %91, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %93 = getelementptr inbounds i8, i8* %82, i64 16
  %94 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %82) #5
  %95 = bitcast <16 x i8> %94 to <2 x i64>
  %96 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %93) #5
  %97 = bitcast <16 x i8> %96 to <2 x i64>
  %98 = shufflevector <2 x i64> %95, <2 x i64> %97, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %99 = getelementptr inbounds i8, i8* %83, i64 %11
  %100 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %83) #5
  %101 = bitcast <16 x i8> %100 to <2 x i64>
  %102 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %99) #5
  %103 = bitcast <16 x i8> %102 to <2 x i64>
  %104 = shufflevector <2 x i64> %101, <2 x i64> %103, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %105 = getelementptr inbounds i8, i8* %84, i64 %12
  %106 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %84) #5
  %107 = bitcast <16 x i8> %106 to <2 x i64>
  %108 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %105) #5
  %109 = bitcast <16 x i8> %108 to <2 x i64>
  %110 = shufflevector <2 x i64> %107, <2 x i64> %109, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %111 = bitcast <4 x i64> %110 to <32 x i8>
  %112 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %111
  %113 = bitcast <4 x i64> %98 to <32 x i8>
  %114 = bitcast <4 x i64> %104 to <32 x i8>
  %115 = shufflevector <32 x i8> %113, <32 x i8> %114, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %116 = shufflevector <32 x i8> %111, <32 x i8> %112, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %117 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %115, <32 x i8> %116) #5
  %118 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %117, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %119 = shufflevector <32 x i8> %113, <32 x i8> %114, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %120 = shufflevector <32 x i8> %111, <32 x i8> %112, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %121 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %119, <32 x i8> %120) #5
  %122 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %121, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %123 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %118, <16 x i16> %122) #5
  %124 = bitcast <4 x i64> %92 to <32 x i8>
  %125 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %123, <32 x i8> %124) #5
  %126 = bitcast <4 x i64> %125 to <8 x i32>
  %127 = add <8 x i32> %86, %126
  %128 = getelementptr inbounds i8, i8* %81, i64 %14
  %129 = getelementptr inbounds i8, i8* %82, i64 32
  %130 = getelementptr inbounds i8, i8* %83, i64 %16
  %131 = getelementptr inbounds i8, i8* %84, i64 %18
  %132 = add nuw nsw i32 %85, 2
  %133 = icmp ult i32 %132, 64
  br i1 %133, label %80, label %134

134:                                              ; preds = %80
  %135 = shufflevector <8 x i32> %127, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 1, i32 3, i32 4, i32 6, i32 5, i32 7>
  %136 = bitcast <8 x i32> %135 to <4 x i64>
  %137 = shufflevector <4 x i64> %136, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %138 = bitcast <4 x i64> %137 to <8 x i32>
  %139 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %138, <8 x i32> %138) #5
  %140 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %139, <8 x i32> %139) #5
  br label %141

141:                                              ; preds = %73, %134
  %142 = phi <8 x i32> [ %79, %73 ], [ %140, %134 ]
  %143 = extractelement <8 x i32> %142, i64 0
  ret i32 %143
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad64x16_avx2(i8*, i32, i8*, i32, i8*, i8*, i32, i32) local_unnamed_addr #1 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  br i1 %9, label %13, label %71

13:                                               ; preds = %8, %13
  %14 = phi i8* [ %58, %13 ], [ %0, %8 ]
  %15 = phi i8* [ %59, %13 ], [ %2, %8 ]
  %16 = phi i8* [ %60, %13 ], [ %4, %8 ]
  %17 = phi i8* [ %61, %13 ], [ %5, %8 ]
  %18 = phi i32 [ %62, %13 ], [ 0, %8 ]
  %19 = phi <8 x i32> [ %57, %13 ], [ zeroinitializer, %8 ]
  %20 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %14) #5
  %21 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %15) #5
  %22 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %16) #5
  %23 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %17) #5
  %24 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %23
  %25 = shufflevector <32 x i8> %21, <32 x i8> %22, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %26 = shufflevector <32 x i8> %23, <32 x i8> %24, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %27 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %25, <32 x i8> %26) #5
  %28 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %27, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %29 = shufflevector <32 x i8> %21, <32 x i8> %22, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %30 = shufflevector <32 x i8> %23, <32 x i8> %24, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %31 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %29, <32 x i8> %30) #5
  %32 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %31, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %33 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %28, <16 x i16> %32) #5
  %34 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %33, <32 x i8> %20) #5
  %35 = bitcast <4 x i64> %34 to <8 x i32>
  %36 = add <8 x i32> %19, %35
  %37 = getelementptr inbounds i8, i8* %14, i64 32
  %38 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %37) #5
  %39 = getelementptr inbounds i8, i8* %15, i64 32
  %40 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %39) #5
  %41 = getelementptr inbounds i8, i8* %16, i64 32
  %42 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %41) #5
  %43 = getelementptr inbounds i8, i8* %17, i64 32
  %44 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %43) #5
  %45 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %44
  %46 = shufflevector <32 x i8> %40, <32 x i8> %42, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %47 = shufflevector <32 x i8> %44, <32 x i8> %45, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %48 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %46, <32 x i8> %47) #5
  %49 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %48, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %50 = shufflevector <32 x i8> %40, <32 x i8> %42, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %51 = shufflevector <32 x i8> %44, <32 x i8> %45, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %52 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %50, <32 x i8> %51) #5
  %53 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %52, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %54 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %49, <16 x i16> %53) #5
  %55 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %54, <32 x i8> %38) #5
  %56 = bitcast <4 x i64> %55 to <8 x i32>
  %57 = add <8 x i32> %36, %56
  %58 = getelementptr inbounds i8, i8* %14, i64 %10
  %59 = getelementptr inbounds i8, i8* %15, i64 %11
  %60 = getelementptr inbounds i8, i8* %16, i64 64
  %61 = getelementptr inbounds i8, i8* %17, i64 %12
  %62 = add nuw nsw i32 %18, 1
  %63 = icmp eq i32 %62, 16
  br i1 %63, label %64, label %13

64:                                               ; preds = %13
  %65 = shufflevector <8 x i32> %57, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 1, i32 3, i32 4, i32 6, i32 5, i32 7>
  %66 = bitcast <8 x i32> %65 to <4 x i64>
  %67 = shufflevector <4 x i64> %66, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %68 = bitcast <4 x i64> %67 to <8 x i32>
  %69 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %68, <8 x i32> %68) #5
  %70 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %69, <8 x i32> %69) #5
  br label %129

71:                                               ; preds = %8, %71
  %72 = phi i8* [ %116, %71 ], [ %0, %8 ]
  %73 = phi i8* [ %117, %71 ], [ %4, %8 ]
  %74 = phi i8* [ %118, %71 ], [ %2, %8 ]
  %75 = phi i8* [ %119, %71 ], [ %5, %8 ]
  %76 = phi i32 [ %120, %71 ], [ 0, %8 ]
  %77 = phi <8 x i32> [ %115, %71 ], [ zeroinitializer, %8 ]
  %78 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %72) #5
  %79 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %73) #5
  %80 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %74) #5
  %81 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %75) #5
  %82 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %81
  %83 = shufflevector <32 x i8> %79, <32 x i8> %80, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %84 = shufflevector <32 x i8> %81, <32 x i8> %82, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %85 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %83, <32 x i8> %84) #5
  %86 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %85, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %87 = shufflevector <32 x i8> %79, <32 x i8> %80, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %88 = shufflevector <32 x i8> %81, <32 x i8> %82, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %89 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %87, <32 x i8> %88) #5
  %90 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %89, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %91 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %86, <16 x i16> %90) #5
  %92 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %91, <32 x i8> %78) #5
  %93 = bitcast <4 x i64> %92 to <8 x i32>
  %94 = add <8 x i32> %77, %93
  %95 = getelementptr inbounds i8, i8* %72, i64 32
  %96 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %95) #5
  %97 = getelementptr inbounds i8, i8* %73, i64 32
  %98 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %97) #5
  %99 = getelementptr inbounds i8, i8* %74, i64 32
  %100 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %99) #5
  %101 = getelementptr inbounds i8, i8* %75, i64 32
  %102 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %101) #5
  %103 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %102
  %104 = shufflevector <32 x i8> %98, <32 x i8> %100, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %105 = shufflevector <32 x i8> %102, <32 x i8> %103, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %106 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %104, <32 x i8> %105) #5
  %107 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %106, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %108 = shufflevector <32 x i8> %98, <32 x i8> %100, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %109 = shufflevector <32 x i8> %102, <32 x i8> %103, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %110 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %108, <32 x i8> %109) #5
  %111 = tail call <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16> %110, <16 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %112 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %107, <16 x i16> %111) #5
  %113 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %112, <32 x i8> %96) #5
  %114 = bitcast <4 x i64> %113 to <8 x i32>
  %115 = add <8 x i32> %94, %114
  %116 = getelementptr inbounds i8, i8* %72, i64 %10
  %117 = getelementptr inbounds i8, i8* %73, i64 64
  %118 = getelementptr inbounds i8, i8* %74, i64 %11
  %119 = getelementptr inbounds i8, i8* %75, i64 %12
  %120 = add nuw nsw i32 %76, 1
  %121 = icmp eq i32 %120, 16
  br i1 %121, label %122, label %71

122:                                              ; preds = %71
  %123 = shufflevector <8 x i32> %115, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 1, i32 3, i32 4, i32 6, i32 5, i32 7>
  %124 = bitcast <8 x i32> %123 to <4 x i64>
  %125 = shufflevector <4 x i64> %124, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %126 = bitcast <4 x i64> %125 to <8 x i32>
  %127 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %126, <8 x i32> %126) #5
  %128 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %127, <8 x i32> %127) #5
  br label %129

129:                                              ; preds = %64, %122
  %130 = phi <8 x i32> [ %70, %64 ], [ %128, %122 ]
  %131 = extractelement <8 x i32> %130, i64 0
  ret i32 %131
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @aom_highbd_masked_sad4x4_avx2(i8*, i32, i8*, i32, i8*, i8*, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %10, label %12

10:                                               ; preds = %8
  %11 = tail call i32 @aom_highbd_masked_sad4xh_ssse3(i8* %0, i32 %1, i8* %2, i32 %3, i8* %4, i32 4, i8* %5, i32 %6, i32 4) #5
  br label %14

12:                                               ; preds = %8
  %13 = tail call i32 @aom_highbd_masked_sad4xh_ssse3(i8* %0, i32 %1, i8* %4, i32 4, i8* %2, i32 %3, i8* %5, i32 %6, i32 4) #5
  br label %14

14:                                               ; preds = %10, %12
  %15 = phi i32 [ %13, %12 ], [ %11, %10 ]
  ret i32 %15
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @aom_highbd_masked_sad4x8_avx2(i8*, i32, i8*, i32, i8*, i8*, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %10, label %12

10:                                               ; preds = %8
  %11 = tail call i32 @aom_highbd_masked_sad4xh_ssse3(i8* %0, i32 %1, i8* %2, i32 %3, i8* %4, i32 4, i8* %5, i32 %6, i32 8) #5
  br label %14

12:                                               ; preds = %8
  %13 = tail call i32 @aom_highbd_masked_sad4xh_ssse3(i8* %0, i32 %1, i8* %4, i32 4, i8* %2, i32 %3, i8* %5, i32 %6, i32 8) #5
  br label %14

14:                                               ; preds = %10, %12
  %15 = phi i32 [ %13, %12 ], [ %11, %10 ]
  ret i32 %15
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_masked_sad8x4_avx2(i8*, i32, i8*, i32, i8*, i8* nocapture readonly, i32, i32) local_unnamed_addr #1 {
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %10, label %142

10:                                               ; preds = %8
  %11 = ptrtoint i8* %4 to i64
  %12 = shl i64 %11, 1
  %13 = inttoptr i64 %12 to i16*
  %14 = ptrtoint i8* %2 to i64
  %15 = shl i64 %14, 1
  %16 = inttoptr i64 %15 to i16*
  %17 = ptrtoint i8* %0 to i64
  %18 = shl i64 %17, 1
  %19 = inttoptr i64 %18 to i16*
  %20 = sext i32 %1 to i64
  %21 = sext i32 %3 to i64
  %22 = sext i32 %6 to i64
  %23 = shl i32 %1, 1
  %24 = sext i32 %23 to i64
  %25 = shl i32 %3, 1
  %26 = sext i32 %25 to i64
  %27 = shl i32 %6, 1
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds i16, i16* %19, i64 %20
  %30 = bitcast i16* %29 to i8*
  %31 = inttoptr i64 %18 to i8*
  %32 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %31) #5
  %33 = bitcast <16 x i8> %32 to <2 x i64>
  %34 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %30) #5
  %35 = bitcast <16 x i8> %34 to <2 x i64>
  %36 = shufflevector <2 x i64> %33, <2 x i64> %35, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %37 = getelementptr inbounds i16, i16* %16, i64 %21
  %38 = bitcast i16* %37 to i8*
  %39 = inttoptr i64 %15 to i8*
  %40 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %39) #5
  %41 = bitcast <16 x i8> %40 to <2 x i64>
  %42 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %38) #5
  %43 = bitcast <16 x i8> %42 to <2 x i64>
  %44 = shufflevector <2 x i64> %41, <2 x i64> %43, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %45 = getelementptr inbounds i16, i16* %13, i64 8
  %46 = bitcast i16* %45 to i8*
  %47 = inttoptr i64 %12 to i8*
  %48 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %47) #5
  %49 = bitcast <16 x i8> %48 to <2 x i64>
  %50 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %46) #5
  %51 = bitcast <16 x i8> %50 to <2 x i64>
  %52 = shufflevector <2 x i64> %49, <2 x i64> %51, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %53 = bitcast i8* %5 to i64*
  %54 = load i64, i64* %53, align 1
  %55 = insertelement <2 x i64> undef, i64 %54, i32 0
  %56 = getelementptr inbounds i8, i8* %5, i64 %22
  %57 = bitcast i8* %56 to i64*
  %58 = load i64, i64* %57, align 1
  %59 = insertelement <2 x i64> %55, i64 %58, i32 1
  %60 = bitcast <2 x i64> %59 to <16 x i8>
  %61 = zext <16 x i8> %60 to <16 x i16>
  %62 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %61
  %63 = bitcast <4 x i64> %44 to <16 x i16>
  %64 = bitcast <4 x i64> %52 to <16 x i16>
  %65 = shufflevector <16 x i16> %63, <16 x i16> %64, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %66 = shufflevector <16 x i16> %61, <16 x i16> %62, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %67 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %65, <16 x i16> %66) #5
  %68 = add <8 x i32> %67, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %69 = ashr <8 x i32> %68, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %70 = shufflevector <16 x i16> %63, <16 x i16> %64, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %71 = shufflevector <16 x i16> %61, <16 x i16> %62, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %72 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %70, <16 x i16> %71) #5
  %73 = add <8 x i32> %72, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %74 = ashr <8 x i32> %73, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %75 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %69, <8 x i32> %74) #5
  %76 = bitcast <4 x i64> %36 to <16 x i16>
  %77 = sub <16 x i16> %75, %76
  %78 = sub <16 x i16> zeroinitializer, %77
  %79 = icmp slt <16 x i16> %77, zeroinitializer
  %80 = select <16 x i1> %79, <16 x i16> %78, <16 x i16> %77
  %81 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %80, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %82 = getelementptr inbounds i16, i16* %19, i64 %24
  %83 = getelementptr inbounds i16, i16* %16, i64 %26
  %84 = getelementptr inbounds i16, i16* %13, i64 16
  %85 = getelementptr inbounds i8, i8* %5, i64 %28
  %86 = getelementptr inbounds i16, i16* %82, i64 %20
  %87 = bitcast i16* %86 to i8*
  %88 = bitcast i16* %82 to i8*
  %89 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %88) #5
  %90 = bitcast <16 x i8> %89 to <2 x i64>
  %91 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %87) #5
  %92 = bitcast <16 x i8> %91 to <2 x i64>
  %93 = shufflevector <2 x i64> %90, <2 x i64> %92, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %94 = getelementptr inbounds i16, i16* %83, i64 %21
  %95 = bitcast i16* %94 to i8*
  %96 = bitcast i16* %83 to i8*
  %97 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %96) #5
  %98 = bitcast <16 x i8> %97 to <2 x i64>
  %99 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %95) #5
  %100 = bitcast <16 x i8> %99 to <2 x i64>
  %101 = shufflevector <2 x i64> %98, <2 x i64> %100, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %102 = getelementptr inbounds i16, i16* %13, i64 24
  %103 = bitcast i16* %102 to i8*
  %104 = bitcast i16* %84 to i8*
  %105 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %104) #5
  %106 = bitcast <16 x i8> %105 to <2 x i64>
  %107 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %103) #5
  %108 = bitcast <16 x i8> %107 to <2 x i64>
  %109 = shufflevector <2 x i64> %106, <2 x i64> %108, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %110 = bitcast i8* %85 to i64*
  %111 = load i64, i64* %110, align 1
  %112 = insertelement <2 x i64> undef, i64 %111, i32 0
  %113 = getelementptr inbounds i8, i8* %85, i64 %22
  %114 = bitcast i8* %113 to i64*
  %115 = load i64, i64* %114, align 1
  %116 = insertelement <2 x i64> %112, i64 %115, i32 1
  %117 = bitcast <2 x i64> %116 to <16 x i8>
  %118 = zext <16 x i8> %117 to <16 x i16>
  %119 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %118
  %120 = bitcast <4 x i64> %101 to <16 x i16>
  %121 = bitcast <4 x i64> %109 to <16 x i16>
  %122 = shufflevector <16 x i16> %120, <16 x i16> %121, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %123 = shufflevector <16 x i16> %118, <16 x i16> %119, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %124 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %122, <16 x i16> %123) #5
  %125 = add <8 x i32> %124, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %126 = ashr <8 x i32> %125, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %127 = shufflevector <16 x i16> %120, <16 x i16> %121, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %128 = shufflevector <16 x i16> %118, <16 x i16> %119, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %129 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %127, <16 x i16> %128) #5
  %130 = add <8 x i32> %129, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %131 = ashr <8 x i32> %130, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %132 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %126, <8 x i32> %131) #5
  %133 = bitcast <4 x i64> %93 to <16 x i16>
  %134 = sub <16 x i16> %132, %133
  %135 = sub <16 x i16> zeroinitializer, %134
  %136 = icmp slt <16 x i16> %134, zeroinitializer
  %137 = select <16 x i1> %136, <16 x i16> %135, <16 x i16> %134
  %138 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %137, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %139 = add <8 x i32> %138, %81
  %140 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %139, <8 x i32> %139) #5
  %141 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %140, <8 x i32> %140) #5
  br label %274

142:                                              ; preds = %8
  %143 = ptrtoint i8* %2 to i64
  %144 = shl i64 %143, 1
  %145 = inttoptr i64 %144 to i16*
  %146 = ptrtoint i8* %4 to i64
  %147 = shl i64 %146, 1
  %148 = inttoptr i64 %147 to i16*
  %149 = ptrtoint i8* %0 to i64
  %150 = shl i64 %149, 1
  %151 = inttoptr i64 %150 to i16*
  %152 = sext i32 %1 to i64
  %153 = sext i32 %3 to i64
  %154 = sext i32 %6 to i64
  %155 = shl i32 %1, 1
  %156 = sext i32 %155 to i64
  %157 = shl i32 %3, 1
  %158 = sext i32 %157 to i64
  %159 = shl i32 %6, 1
  %160 = sext i32 %159 to i64
  %161 = getelementptr inbounds i16, i16* %151, i64 %152
  %162 = bitcast i16* %161 to i8*
  %163 = inttoptr i64 %150 to i8*
  %164 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %163) #5
  %165 = bitcast <16 x i8> %164 to <2 x i64>
  %166 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %162) #5
  %167 = bitcast <16 x i8> %166 to <2 x i64>
  %168 = shufflevector <2 x i64> %165, <2 x i64> %167, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %169 = getelementptr inbounds i16, i16* %148, i64 8
  %170 = bitcast i16* %169 to i8*
  %171 = inttoptr i64 %147 to i8*
  %172 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %171) #5
  %173 = bitcast <16 x i8> %172 to <2 x i64>
  %174 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %170) #5
  %175 = bitcast <16 x i8> %174 to <2 x i64>
  %176 = shufflevector <2 x i64> %173, <2 x i64> %175, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %177 = getelementptr inbounds i16, i16* %145, i64 %153
  %178 = bitcast i16* %177 to i8*
  %179 = inttoptr i64 %144 to i8*
  %180 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %179) #5
  %181 = bitcast <16 x i8> %180 to <2 x i64>
  %182 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %178) #5
  %183 = bitcast <16 x i8> %182 to <2 x i64>
  %184 = shufflevector <2 x i64> %181, <2 x i64> %183, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %185 = bitcast i8* %5 to i64*
  %186 = load i64, i64* %185, align 1
  %187 = insertelement <2 x i64> undef, i64 %186, i32 0
  %188 = getelementptr inbounds i8, i8* %5, i64 %154
  %189 = bitcast i8* %188 to i64*
  %190 = load i64, i64* %189, align 1
  %191 = insertelement <2 x i64> %187, i64 %190, i32 1
  %192 = bitcast <2 x i64> %191 to <16 x i8>
  %193 = zext <16 x i8> %192 to <16 x i16>
  %194 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %193
  %195 = bitcast <4 x i64> %176 to <16 x i16>
  %196 = bitcast <4 x i64> %184 to <16 x i16>
  %197 = shufflevector <16 x i16> %195, <16 x i16> %196, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %198 = shufflevector <16 x i16> %193, <16 x i16> %194, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %199 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %197, <16 x i16> %198) #5
  %200 = add <8 x i32> %199, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %201 = ashr <8 x i32> %200, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %202 = shufflevector <16 x i16> %195, <16 x i16> %196, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %203 = shufflevector <16 x i16> %193, <16 x i16> %194, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %204 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %202, <16 x i16> %203) #5
  %205 = add <8 x i32> %204, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %206 = ashr <8 x i32> %205, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %207 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %201, <8 x i32> %206) #5
  %208 = bitcast <4 x i64> %168 to <16 x i16>
  %209 = sub <16 x i16> %207, %208
  %210 = sub <16 x i16> zeroinitializer, %209
  %211 = icmp slt <16 x i16> %209, zeroinitializer
  %212 = select <16 x i1> %211, <16 x i16> %210, <16 x i16> %209
  %213 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %212, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %214 = getelementptr inbounds i16, i16* %151, i64 %156
  %215 = getelementptr inbounds i16, i16* %148, i64 16
  %216 = getelementptr inbounds i16, i16* %145, i64 %158
  %217 = getelementptr inbounds i8, i8* %5, i64 %160
  %218 = getelementptr inbounds i16, i16* %214, i64 %152
  %219 = bitcast i16* %218 to i8*
  %220 = bitcast i16* %214 to i8*
  %221 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %220) #5
  %222 = bitcast <16 x i8> %221 to <2 x i64>
  %223 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %219) #5
  %224 = bitcast <16 x i8> %223 to <2 x i64>
  %225 = shufflevector <2 x i64> %222, <2 x i64> %224, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %226 = getelementptr inbounds i16, i16* %148, i64 24
  %227 = bitcast i16* %226 to i8*
  %228 = bitcast i16* %215 to i8*
  %229 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %228) #5
  %230 = bitcast <16 x i8> %229 to <2 x i64>
  %231 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %227) #5
  %232 = bitcast <16 x i8> %231 to <2 x i64>
  %233 = shufflevector <2 x i64> %230, <2 x i64> %232, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %234 = getelementptr inbounds i16, i16* %216, i64 %153
  %235 = bitcast i16* %234 to i8*
  %236 = bitcast i16* %216 to i8*
  %237 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %236) #5
  %238 = bitcast <16 x i8> %237 to <2 x i64>
  %239 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %235) #5
  %240 = bitcast <16 x i8> %239 to <2 x i64>
  %241 = shufflevector <2 x i64> %238, <2 x i64> %240, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %242 = bitcast i8* %217 to i64*
  %243 = load i64, i64* %242, align 1
  %244 = insertelement <2 x i64> undef, i64 %243, i32 0
  %245 = getelementptr inbounds i8, i8* %217, i64 %154
  %246 = bitcast i8* %245 to i64*
  %247 = load i64, i64* %246, align 1
  %248 = insertelement <2 x i64> %244, i64 %247, i32 1
  %249 = bitcast <2 x i64> %248 to <16 x i8>
  %250 = zext <16 x i8> %249 to <16 x i16>
  %251 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %250
  %252 = bitcast <4 x i64> %233 to <16 x i16>
  %253 = bitcast <4 x i64> %241 to <16 x i16>
  %254 = shufflevector <16 x i16> %252, <16 x i16> %253, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %255 = shufflevector <16 x i16> %250, <16 x i16> %251, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %256 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %254, <16 x i16> %255) #5
  %257 = add <8 x i32> %256, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %258 = ashr <8 x i32> %257, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %259 = shufflevector <16 x i16> %252, <16 x i16> %253, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %260 = shufflevector <16 x i16> %250, <16 x i16> %251, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %261 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %259, <16 x i16> %260) #5
  %262 = add <8 x i32> %261, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %263 = ashr <8 x i32> %262, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %264 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %258, <8 x i32> %263) #5
  %265 = bitcast <4 x i64> %225 to <16 x i16>
  %266 = sub <16 x i16> %264, %265
  %267 = sub <16 x i16> zeroinitializer, %266
  %268 = icmp slt <16 x i16> %266, zeroinitializer
  %269 = select <16 x i1> %268, <16 x i16> %267, <16 x i16> %266
  %270 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %269, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %271 = add <8 x i32> %270, %213
  %272 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %271, <8 x i32> %271) #5
  %273 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %272, <8 x i32> %272) #5
  br label %274

274:                                              ; preds = %10, %142
  %275 = phi <8 x i32> [ %141, %10 ], [ %273, %142 ]
  %276 = extractelement <8 x i32> %275, i64 0
  %277 = extractelement <8 x i32> %275, i64 4
  %278 = add nsw i32 %276, %277
  ret i32 %278
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_masked_sad8x8_avx2(i8*, i32, i8*, i32, i8*, i8* nocapture readonly, i32, i32) local_unnamed_addr #1 {
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %10, label %99

10:                                               ; preds = %8
  %11 = ptrtoint i8* %4 to i64
  %12 = shl i64 %11, 1
  %13 = inttoptr i64 %12 to i16*
  %14 = ptrtoint i8* %2 to i64
  %15 = shl i64 %14, 1
  %16 = inttoptr i64 %15 to i16*
  %17 = ptrtoint i8* %0 to i64
  %18 = shl i64 %17, 1
  %19 = inttoptr i64 %18 to i16*
  %20 = sext i32 %1 to i64
  %21 = sext i32 %3 to i64
  %22 = sext i32 %6 to i64
  %23 = shl i32 %1, 1
  %24 = sext i32 %23 to i64
  %25 = shl i32 %3, 1
  %26 = sext i32 %25 to i64
  %27 = shl i32 %6, 1
  %28 = sext i32 %27 to i64
  br label %29

29:                                               ; preds = %29, %10
  %30 = phi i8* [ %5, %10 ], [ %93, %29 ]
  %31 = phi i16* [ %19, %10 ], [ %90, %29 ]
  %32 = phi i16* [ %16, %10 ], [ %91, %29 ]
  %33 = phi i16* [ %13, %10 ], [ %92, %29 ]
  %34 = phi i32 [ 0, %10 ], [ %94, %29 ]
  %35 = phi <8 x i32> [ zeroinitializer, %10 ], [ %89, %29 ]
  %36 = getelementptr inbounds i16, i16* %31, i64 %20
  %37 = bitcast i16* %36 to i8*
  %38 = bitcast i16* %31 to i8*
  %39 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %38) #5
  %40 = bitcast <16 x i8> %39 to <2 x i64>
  %41 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %37) #5
  %42 = bitcast <16 x i8> %41 to <2 x i64>
  %43 = shufflevector <2 x i64> %40, <2 x i64> %42, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %44 = getelementptr inbounds i16, i16* %32, i64 %21
  %45 = bitcast i16* %44 to i8*
  %46 = bitcast i16* %32 to i8*
  %47 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %46) #5
  %48 = bitcast <16 x i8> %47 to <2 x i64>
  %49 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %45) #5
  %50 = bitcast <16 x i8> %49 to <2 x i64>
  %51 = shufflevector <2 x i64> %48, <2 x i64> %50, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %52 = getelementptr inbounds i16, i16* %33, i64 8
  %53 = bitcast i16* %52 to i8*
  %54 = bitcast i16* %33 to i8*
  %55 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %54) #5
  %56 = bitcast <16 x i8> %55 to <2 x i64>
  %57 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %53) #5
  %58 = bitcast <16 x i8> %57 to <2 x i64>
  %59 = shufflevector <2 x i64> %56, <2 x i64> %58, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %60 = bitcast i8* %30 to i64*
  %61 = load i64, i64* %60, align 1
  %62 = insertelement <2 x i64> undef, i64 %61, i32 0
  %63 = getelementptr inbounds i8, i8* %30, i64 %22
  %64 = bitcast i8* %63 to i64*
  %65 = load i64, i64* %64, align 1
  %66 = insertelement <2 x i64> %62, i64 %65, i32 1
  %67 = bitcast <2 x i64> %66 to <16 x i8>
  %68 = zext <16 x i8> %67 to <16 x i16>
  %69 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %68
  %70 = bitcast <4 x i64> %51 to <16 x i16>
  %71 = bitcast <4 x i64> %59 to <16 x i16>
  %72 = shufflevector <16 x i16> %70, <16 x i16> %71, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %73 = shufflevector <16 x i16> %68, <16 x i16> %69, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %74 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %72, <16 x i16> %73) #5
  %75 = add <8 x i32> %74, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %76 = ashr <8 x i32> %75, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %77 = shufflevector <16 x i16> %70, <16 x i16> %71, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %78 = shufflevector <16 x i16> %68, <16 x i16> %69, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %79 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %77, <16 x i16> %78) #5
  %80 = add <8 x i32> %79, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %81 = ashr <8 x i32> %80, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %82 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %76, <8 x i32> %81) #5
  %83 = bitcast <4 x i64> %43 to <16 x i16>
  %84 = sub <16 x i16> %82, %83
  %85 = sub <16 x i16> zeroinitializer, %84
  %86 = icmp slt <16 x i16> %84, zeroinitializer
  %87 = select <16 x i1> %86, <16 x i16> %85, <16 x i16> %84
  %88 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %87, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %89 = add <8 x i32> %88, %35
  %90 = getelementptr inbounds i16, i16* %31, i64 %24
  %91 = getelementptr inbounds i16, i16* %32, i64 %26
  %92 = getelementptr inbounds i16, i16* %33, i64 16
  %93 = getelementptr inbounds i8, i8* %30, i64 %28
  %94 = add nuw nsw i32 %34, 2
  %95 = icmp ult i32 %94, 8
  br i1 %95, label %29, label %96

96:                                               ; preds = %29
  %97 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %89, <8 x i32> %89) #5
  %98 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %97, <8 x i32> %97) #5
  br label %188

99:                                               ; preds = %8
  %100 = ptrtoint i8* %2 to i64
  %101 = shl i64 %100, 1
  %102 = inttoptr i64 %101 to i16*
  %103 = ptrtoint i8* %4 to i64
  %104 = shl i64 %103, 1
  %105 = inttoptr i64 %104 to i16*
  %106 = ptrtoint i8* %0 to i64
  %107 = shl i64 %106, 1
  %108 = inttoptr i64 %107 to i16*
  %109 = sext i32 %1 to i64
  %110 = sext i32 %3 to i64
  %111 = sext i32 %6 to i64
  %112 = shl i32 %1, 1
  %113 = sext i32 %112 to i64
  %114 = shl i32 %3, 1
  %115 = sext i32 %114 to i64
  %116 = shl i32 %6, 1
  %117 = sext i32 %116 to i64
  br label %118

118:                                              ; preds = %118, %99
  %119 = phi i8* [ %5, %99 ], [ %182, %118 ]
  %120 = phi i16* [ %108, %99 ], [ %179, %118 ]
  %121 = phi i16* [ %105, %99 ], [ %180, %118 ]
  %122 = phi i16* [ %102, %99 ], [ %181, %118 ]
  %123 = phi i32 [ 0, %99 ], [ %183, %118 ]
  %124 = phi <8 x i32> [ zeroinitializer, %99 ], [ %178, %118 ]
  %125 = getelementptr inbounds i16, i16* %120, i64 %109
  %126 = bitcast i16* %125 to i8*
  %127 = bitcast i16* %120 to i8*
  %128 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %127) #5
  %129 = bitcast <16 x i8> %128 to <2 x i64>
  %130 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %126) #5
  %131 = bitcast <16 x i8> %130 to <2 x i64>
  %132 = shufflevector <2 x i64> %129, <2 x i64> %131, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %133 = getelementptr inbounds i16, i16* %121, i64 8
  %134 = bitcast i16* %133 to i8*
  %135 = bitcast i16* %121 to i8*
  %136 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %135) #5
  %137 = bitcast <16 x i8> %136 to <2 x i64>
  %138 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %134) #5
  %139 = bitcast <16 x i8> %138 to <2 x i64>
  %140 = shufflevector <2 x i64> %137, <2 x i64> %139, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %141 = getelementptr inbounds i16, i16* %122, i64 %110
  %142 = bitcast i16* %141 to i8*
  %143 = bitcast i16* %122 to i8*
  %144 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %143) #5
  %145 = bitcast <16 x i8> %144 to <2 x i64>
  %146 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %142) #5
  %147 = bitcast <16 x i8> %146 to <2 x i64>
  %148 = shufflevector <2 x i64> %145, <2 x i64> %147, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %149 = bitcast i8* %119 to i64*
  %150 = load i64, i64* %149, align 1
  %151 = insertelement <2 x i64> undef, i64 %150, i32 0
  %152 = getelementptr inbounds i8, i8* %119, i64 %111
  %153 = bitcast i8* %152 to i64*
  %154 = load i64, i64* %153, align 1
  %155 = insertelement <2 x i64> %151, i64 %154, i32 1
  %156 = bitcast <2 x i64> %155 to <16 x i8>
  %157 = zext <16 x i8> %156 to <16 x i16>
  %158 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %157
  %159 = bitcast <4 x i64> %140 to <16 x i16>
  %160 = bitcast <4 x i64> %148 to <16 x i16>
  %161 = shufflevector <16 x i16> %159, <16 x i16> %160, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %162 = shufflevector <16 x i16> %157, <16 x i16> %158, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %163 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %161, <16 x i16> %162) #5
  %164 = add <8 x i32> %163, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %165 = ashr <8 x i32> %164, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %166 = shufflevector <16 x i16> %159, <16 x i16> %160, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %167 = shufflevector <16 x i16> %157, <16 x i16> %158, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %168 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %166, <16 x i16> %167) #5
  %169 = add <8 x i32> %168, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %170 = ashr <8 x i32> %169, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %171 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %165, <8 x i32> %170) #5
  %172 = bitcast <4 x i64> %132 to <16 x i16>
  %173 = sub <16 x i16> %171, %172
  %174 = sub <16 x i16> zeroinitializer, %173
  %175 = icmp slt <16 x i16> %173, zeroinitializer
  %176 = select <16 x i1> %175, <16 x i16> %174, <16 x i16> %173
  %177 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %176, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %178 = add <8 x i32> %177, %124
  %179 = getelementptr inbounds i16, i16* %120, i64 %113
  %180 = getelementptr inbounds i16, i16* %121, i64 16
  %181 = getelementptr inbounds i16, i16* %122, i64 %115
  %182 = getelementptr inbounds i8, i8* %119, i64 %117
  %183 = add nuw nsw i32 %123, 2
  %184 = icmp ult i32 %183, 8
  br i1 %184, label %118, label %185

185:                                              ; preds = %118
  %186 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %178, <8 x i32> %178) #5
  %187 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %186, <8 x i32> %186) #5
  br label %188

188:                                              ; preds = %96, %185
  %189 = phi <8 x i32> [ %98, %96 ], [ %187, %185 ]
  %190 = extractelement <8 x i32> %189, i64 0
  %191 = extractelement <8 x i32> %189, i64 4
  %192 = add nsw i32 %190, %191
  ret i32 %192
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_masked_sad8x16_avx2(i8*, i32, i8*, i32, i8*, i8* nocapture readonly, i32, i32) local_unnamed_addr #1 {
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %10, label %99

10:                                               ; preds = %8
  %11 = ptrtoint i8* %4 to i64
  %12 = shl i64 %11, 1
  %13 = inttoptr i64 %12 to i16*
  %14 = ptrtoint i8* %2 to i64
  %15 = shl i64 %14, 1
  %16 = inttoptr i64 %15 to i16*
  %17 = ptrtoint i8* %0 to i64
  %18 = shl i64 %17, 1
  %19 = inttoptr i64 %18 to i16*
  %20 = sext i32 %1 to i64
  %21 = sext i32 %3 to i64
  %22 = sext i32 %6 to i64
  %23 = shl i32 %1, 1
  %24 = sext i32 %23 to i64
  %25 = shl i32 %3, 1
  %26 = sext i32 %25 to i64
  %27 = shl i32 %6, 1
  %28 = sext i32 %27 to i64
  br label %29

29:                                               ; preds = %29, %10
  %30 = phi i8* [ %5, %10 ], [ %93, %29 ]
  %31 = phi i16* [ %19, %10 ], [ %90, %29 ]
  %32 = phi i16* [ %16, %10 ], [ %91, %29 ]
  %33 = phi i16* [ %13, %10 ], [ %92, %29 ]
  %34 = phi i32 [ 0, %10 ], [ %94, %29 ]
  %35 = phi <8 x i32> [ zeroinitializer, %10 ], [ %89, %29 ]
  %36 = getelementptr inbounds i16, i16* %31, i64 %20
  %37 = bitcast i16* %36 to i8*
  %38 = bitcast i16* %31 to i8*
  %39 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %38) #5
  %40 = bitcast <16 x i8> %39 to <2 x i64>
  %41 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %37) #5
  %42 = bitcast <16 x i8> %41 to <2 x i64>
  %43 = shufflevector <2 x i64> %40, <2 x i64> %42, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %44 = getelementptr inbounds i16, i16* %32, i64 %21
  %45 = bitcast i16* %44 to i8*
  %46 = bitcast i16* %32 to i8*
  %47 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %46) #5
  %48 = bitcast <16 x i8> %47 to <2 x i64>
  %49 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %45) #5
  %50 = bitcast <16 x i8> %49 to <2 x i64>
  %51 = shufflevector <2 x i64> %48, <2 x i64> %50, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %52 = getelementptr inbounds i16, i16* %33, i64 8
  %53 = bitcast i16* %52 to i8*
  %54 = bitcast i16* %33 to i8*
  %55 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %54) #5
  %56 = bitcast <16 x i8> %55 to <2 x i64>
  %57 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %53) #5
  %58 = bitcast <16 x i8> %57 to <2 x i64>
  %59 = shufflevector <2 x i64> %56, <2 x i64> %58, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %60 = bitcast i8* %30 to i64*
  %61 = load i64, i64* %60, align 1
  %62 = insertelement <2 x i64> undef, i64 %61, i32 0
  %63 = getelementptr inbounds i8, i8* %30, i64 %22
  %64 = bitcast i8* %63 to i64*
  %65 = load i64, i64* %64, align 1
  %66 = insertelement <2 x i64> %62, i64 %65, i32 1
  %67 = bitcast <2 x i64> %66 to <16 x i8>
  %68 = zext <16 x i8> %67 to <16 x i16>
  %69 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %68
  %70 = bitcast <4 x i64> %51 to <16 x i16>
  %71 = bitcast <4 x i64> %59 to <16 x i16>
  %72 = shufflevector <16 x i16> %70, <16 x i16> %71, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %73 = shufflevector <16 x i16> %68, <16 x i16> %69, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %74 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %72, <16 x i16> %73) #5
  %75 = add <8 x i32> %74, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %76 = ashr <8 x i32> %75, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %77 = shufflevector <16 x i16> %70, <16 x i16> %71, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %78 = shufflevector <16 x i16> %68, <16 x i16> %69, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %79 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %77, <16 x i16> %78) #5
  %80 = add <8 x i32> %79, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %81 = ashr <8 x i32> %80, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %82 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %76, <8 x i32> %81) #5
  %83 = bitcast <4 x i64> %43 to <16 x i16>
  %84 = sub <16 x i16> %82, %83
  %85 = sub <16 x i16> zeroinitializer, %84
  %86 = icmp slt <16 x i16> %84, zeroinitializer
  %87 = select <16 x i1> %86, <16 x i16> %85, <16 x i16> %84
  %88 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %87, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %89 = add <8 x i32> %88, %35
  %90 = getelementptr inbounds i16, i16* %31, i64 %24
  %91 = getelementptr inbounds i16, i16* %32, i64 %26
  %92 = getelementptr inbounds i16, i16* %33, i64 16
  %93 = getelementptr inbounds i8, i8* %30, i64 %28
  %94 = add nuw nsw i32 %34, 2
  %95 = icmp ult i32 %94, 16
  br i1 %95, label %29, label %96

96:                                               ; preds = %29
  %97 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %89, <8 x i32> %89) #5
  %98 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %97, <8 x i32> %97) #5
  br label %188

99:                                               ; preds = %8
  %100 = ptrtoint i8* %2 to i64
  %101 = shl i64 %100, 1
  %102 = inttoptr i64 %101 to i16*
  %103 = ptrtoint i8* %4 to i64
  %104 = shl i64 %103, 1
  %105 = inttoptr i64 %104 to i16*
  %106 = ptrtoint i8* %0 to i64
  %107 = shl i64 %106, 1
  %108 = inttoptr i64 %107 to i16*
  %109 = sext i32 %1 to i64
  %110 = sext i32 %3 to i64
  %111 = sext i32 %6 to i64
  %112 = shl i32 %1, 1
  %113 = sext i32 %112 to i64
  %114 = shl i32 %3, 1
  %115 = sext i32 %114 to i64
  %116 = shl i32 %6, 1
  %117 = sext i32 %116 to i64
  br label %118

118:                                              ; preds = %118, %99
  %119 = phi i8* [ %5, %99 ], [ %182, %118 ]
  %120 = phi i16* [ %108, %99 ], [ %179, %118 ]
  %121 = phi i16* [ %105, %99 ], [ %180, %118 ]
  %122 = phi i16* [ %102, %99 ], [ %181, %118 ]
  %123 = phi i32 [ 0, %99 ], [ %183, %118 ]
  %124 = phi <8 x i32> [ zeroinitializer, %99 ], [ %178, %118 ]
  %125 = getelementptr inbounds i16, i16* %120, i64 %109
  %126 = bitcast i16* %125 to i8*
  %127 = bitcast i16* %120 to i8*
  %128 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %127) #5
  %129 = bitcast <16 x i8> %128 to <2 x i64>
  %130 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %126) #5
  %131 = bitcast <16 x i8> %130 to <2 x i64>
  %132 = shufflevector <2 x i64> %129, <2 x i64> %131, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %133 = getelementptr inbounds i16, i16* %121, i64 8
  %134 = bitcast i16* %133 to i8*
  %135 = bitcast i16* %121 to i8*
  %136 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %135) #5
  %137 = bitcast <16 x i8> %136 to <2 x i64>
  %138 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %134) #5
  %139 = bitcast <16 x i8> %138 to <2 x i64>
  %140 = shufflevector <2 x i64> %137, <2 x i64> %139, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %141 = getelementptr inbounds i16, i16* %122, i64 %110
  %142 = bitcast i16* %141 to i8*
  %143 = bitcast i16* %122 to i8*
  %144 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %143) #5
  %145 = bitcast <16 x i8> %144 to <2 x i64>
  %146 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %142) #5
  %147 = bitcast <16 x i8> %146 to <2 x i64>
  %148 = shufflevector <2 x i64> %145, <2 x i64> %147, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %149 = bitcast i8* %119 to i64*
  %150 = load i64, i64* %149, align 1
  %151 = insertelement <2 x i64> undef, i64 %150, i32 0
  %152 = getelementptr inbounds i8, i8* %119, i64 %111
  %153 = bitcast i8* %152 to i64*
  %154 = load i64, i64* %153, align 1
  %155 = insertelement <2 x i64> %151, i64 %154, i32 1
  %156 = bitcast <2 x i64> %155 to <16 x i8>
  %157 = zext <16 x i8> %156 to <16 x i16>
  %158 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %157
  %159 = bitcast <4 x i64> %140 to <16 x i16>
  %160 = bitcast <4 x i64> %148 to <16 x i16>
  %161 = shufflevector <16 x i16> %159, <16 x i16> %160, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %162 = shufflevector <16 x i16> %157, <16 x i16> %158, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %163 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %161, <16 x i16> %162) #5
  %164 = add <8 x i32> %163, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %165 = ashr <8 x i32> %164, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %166 = shufflevector <16 x i16> %159, <16 x i16> %160, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %167 = shufflevector <16 x i16> %157, <16 x i16> %158, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %168 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %166, <16 x i16> %167) #5
  %169 = add <8 x i32> %168, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %170 = ashr <8 x i32> %169, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %171 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %165, <8 x i32> %170) #5
  %172 = bitcast <4 x i64> %132 to <16 x i16>
  %173 = sub <16 x i16> %171, %172
  %174 = sub <16 x i16> zeroinitializer, %173
  %175 = icmp slt <16 x i16> %173, zeroinitializer
  %176 = select <16 x i1> %175, <16 x i16> %174, <16 x i16> %173
  %177 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %176, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %178 = add <8 x i32> %177, %124
  %179 = getelementptr inbounds i16, i16* %120, i64 %113
  %180 = getelementptr inbounds i16, i16* %121, i64 16
  %181 = getelementptr inbounds i16, i16* %122, i64 %115
  %182 = getelementptr inbounds i8, i8* %119, i64 %117
  %183 = add nuw nsw i32 %123, 2
  %184 = icmp ult i32 %183, 16
  br i1 %184, label %118, label %185

185:                                              ; preds = %118
  %186 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %178, <8 x i32> %178) #5
  %187 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %186, <8 x i32> %186) #5
  br label %188

188:                                              ; preds = %96, %185
  %189 = phi <8 x i32> [ %98, %96 ], [ %187, %185 ]
  %190 = extractelement <8 x i32> %189, i64 0
  %191 = extractelement <8 x i32> %189, i64 4
  %192 = add nsw i32 %190, %191
  ret i32 %192
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_masked_sad16x8_avx2(i8*, i32, i8*, i32, i8*, i8*, i32, i32) local_unnamed_addr #1 {
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %10, label %68

10:                                               ; preds = %8
  %11 = ptrtoint i8* %4 to i64
  %12 = shl i64 %11, 1
  %13 = inttoptr i64 %12 to i16*
  %14 = ptrtoint i8* %2 to i64
  %15 = shl i64 %14, 1
  %16 = inttoptr i64 %15 to i16*
  %17 = ptrtoint i8* %0 to i64
  %18 = shl i64 %17, 1
  %19 = inttoptr i64 %18 to i16*
  %20 = sext i32 %1 to i64
  %21 = sext i32 %3 to i64
  %22 = sext i32 %6 to i64
  br label %23

23:                                               ; preds = %23, %10
  %24 = phi i8* [ %5, %10 ], [ %62, %23 ]
  %25 = phi i16* [ %19, %10 ], [ %59, %23 ]
  %26 = phi i16* [ %16, %10 ], [ %60, %23 ]
  %27 = phi i16* [ %13, %10 ], [ %61, %23 ]
  %28 = phi i32 [ 0, %10 ], [ %63, %23 ]
  %29 = phi <8 x i32> [ zeroinitializer, %10 ], [ %58, %23 ]
  %30 = bitcast i16* %25 to i8*
  %31 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %30) #5
  %32 = bitcast i16* %26 to i8*
  %33 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %32) #5
  %34 = bitcast i16* %27 to i8*
  %35 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %34) #5
  %36 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %24) #5
  %37 = zext <16 x i8> %36 to <16 x i16>
  %38 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %37
  %39 = bitcast <32 x i8> %33 to <16 x i16>
  %40 = bitcast <32 x i8> %35 to <16 x i16>
  %41 = shufflevector <16 x i16> %39, <16 x i16> %40, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %42 = shufflevector <16 x i16> %37, <16 x i16> %38, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %43 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %41, <16 x i16> %42) #5
  %44 = add <8 x i32> %43, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %45 = ashr <8 x i32> %44, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %46 = shufflevector <16 x i16> %39, <16 x i16> %40, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %47 = shufflevector <16 x i16> %37, <16 x i16> %38, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %48 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %46, <16 x i16> %47) #5
  %49 = add <8 x i32> %48, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %50 = ashr <8 x i32> %49, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %51 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %45, <8 x i32> %50) #5
  %52 = bitcast <32 x i8> %31 to <16 x i16>
  %53 = sub <16 x i16> %51, %52
  %54 = sub <16 x i16> zeroinitializer, %53
  %55 = icmp slt <16 x i16> %53, zeroinitializer
  %56 = select <16 x i1> %55, <16 x i16> %54, <16 x i16> %53
  %57 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %56, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %58 = add <8 x i32> %57, %29
  %59 = getelementptr inbounds i16, i16* %25, i64 %20
  %60 = getelementptr inbounds i16, i16* %26, i64 %21
  %61 = getelementptr inbounds i16, i16* %27, i64 16
  %62 = getelementptr inbounds i8, i8* %24, i64 %22
  %63 = add nuw nsw i32 %28, 1
  %64 = icmp eq i32 %63, 8
  br i1 %64, label %65, label %23

65:                                               ; preds = %23
  %66 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %58, <8 x i32> %58) #5
  %67 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %66, <8 x i32> %66) #5
  br label %126

68:                                               ; preds = %8
  %69 = ptrtoint i8* %2 to i64
  %70 = shl i64 %69, 1
  %71 = inttoptr i64 %70 to i16*
  %72 = ptrtoint i8* %4 to i64
  %73 = shl i64 %72, 1
  %74 = inttoptr i64 %73 to i16*
  %75 = ptrtoint i8* %0 to i64
  %76 = shl i64 %75, 1
  %77 = inttoptr i64 %76 to i16*
  %78 = sext i32 %1 to i64
  %79 = sext i32 %3 to i64
  %80 = sext i32 %6 to i64
  br label %81

81:                                               ; preds = %81, %68
  %82 = phi i8* [ %5, %68 ], [ %120, %81 ]
  %83 = phi i16* [ %77, %68 ], [ %117, %81 ]
  %84 = phi i16* [ %74, %68 ], [ %118, %81 ]
  %85 = phi i16* [ %71, %68 ], [ %119, %81 ]
  %86 = phi i32 [ 0, %68 ], [ %121, %81 ]
  %87 = phi <8 x i32> [ zeroinitializer, %68 ], [ %116, %81 ]
  %88 = bitcast i16* %83 to i8*
  %89 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %88) #5
  %90 = bitcast i16* %84 to i8*
  %91 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %90) #5
  %92 = bitcast i16* %85 to i8*
  %93 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %92) #5
  %94 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %82) #5
  %95 = zext <16 x i8> %94 to <16 x i16>
  %96 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %95
  %97 = bitcast <32 x i8> %91 to <16 x i16>
  %98 = bitcast <32 x i8> %93 to <16 x i16>
  %99 = shufflevector <16 x i16> %97, <16 x i16> %98, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %100 = shufflevector <16 x i16> %95, <16 x i16> %96, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %101 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %99, <16 x i16> %100) #5
  %102 = add <8 x i32> %101, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %103 = ashr <8 x i32> %102, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %104 = shufflevector <16 x i16> %97, <16 x i16> %98, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %105 = shufflevector <16 x i16> %95, <16 x i16> %96, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %106 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %104, <16 x i16> %105) #5
  %107 = add <8 x i32> %106, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %108 = ashr <8 x i32> %107, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %109 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %103, <8 x i32> %108) #5
  %110 = bitcast <32 x i8> %89 to <16 x i16>
  %111 = sub <16 x i16> %109, %110
  %112 = sub <16 x i16> zeroinitializer, %111
  %113 = icmp slt <16 x i16> %111, zeroinitializer
  %114 = select <16 x i1> %113, <16 x i16> %112, <16 x i16> %111
  %115 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %114, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %116 = add <8 x i32> %115, %87
  %117 = getelementptr inbounds i16, i16* %83, i64 %78
  %118 = getelementptr inbounds i16, i16* %84, i64 16
  %119 = getelementptr inbounds i16, i16* %85, i64 %79
  %120 = getelementptr inbounds i8, i8* %82, i64 %80
  %121 = add nuw nsw i32 %86, 1
  %122 = icmp eq i32 %121, 8
  br i1 %122, label %123, label %81

123:                                              ; preds = %81
  %124 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %116, <8 x i32> %116) #5
  %125 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %124, <8 x i32> %124) #5
  br label %126

126:                                              ; preds = %65, %123
  %127 = phi <8 x i32> [ %67, %65 ], [ %125, %123 ]
  %128 = extractelement <8 x i32> %127, i64 0
  %129 = extractelement <8 x i32> %127, i64 4
  %130 = add nsw i32 %128, %129
  ret i32 %130
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_masked_sad16x16_avx2(i8*, i32, i8*, i32, i8*, i8*, i32, i32) local_unnamed_addr #1 {
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %10, label %68

10:                                               ; preds = %8
  %11 = ptrtoint i8* %4 to i64
  %12 = shl i64 %11, 1
  %13 = inttoptr i64 %12 to i16*
  %14 = ptrtoint i8* %2 to i64
  %15 = shl i64 %14, 1
  %16 = inttoptr i64 %15 to i16*
  %17 = ptrtoint i8* %0 to i64
  %18 = shl i64 %17, 1
  %19 = inttoptr i64 %18 to i16*
  %20 = sext i32 %1 to i64
  %21 = sext i32 %3 to i64
  %22 = sext i32 %6 to i64
  br label %23

23:                                               ; preds = %23, %10
  %24 = phi i8* [ %5, %10 ], [ %62, %23 ]
  %25 = phi i16* [ %19, %10 ], [ %59, %23 ]
  %26 = phi i16* [ %16, %10 ], [ %60, %23 ]
  %27 = phi i16* [ %13, %10 ], [ %61, %23 ]
  %28 = phi i32 [ 0, %10 ], [ %63, %23 ]
  %29 = phi <8 x i32> [ zeroinitializer, %10 ], [ %58, %23 ]
  %30 = bitcast i16* %25 to i8*
  %31 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %30) #5
  %32 = bitcast i16* %26 to i8*
  %33 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %32) #5
  %34 = bitcast i16* %27 to i8*
  %35 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %34) #5
  %36 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %24) #5
  %37 = zext <16 x i8> %36 to <16 x i16>
  %38 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %37
  %39 = bitcast <32 x i8> %33 to <16 x i16>
  %40 = bitcast <32 x i8> %35 to <16 x i16>
  %41 = shufflevector <16 x i16> %39, <16 x i16> %40, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %42 = shufflevector <16 x i16> %37, <16 x i16> %38, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %43 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %41, <16 x i16> %42) #5
  %44 = add <8 x i32> %43, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %45 = ashr <8 x i32> %44, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %46 = shufflevector <16 x i16> %39, <16 x i16> %40, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %47 = shufflevector <16 x i16> %37, <16 x i16> %38, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %48 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %46, <16 x i16> %47) #5
  %49 = add <8 x i32> %48, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %50 = ashr <8 x i32> %49, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %51 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %45, <8 x i32> %50) #5
  %52 = bitcast <32 x i8> %31 to <16 x i16>
  %53 = sub <16 x i16> %51, %52
  %54 = sub <16 x i16> zeroinitializer, %53
  %55 = icmp slt <16 x i16> %53, zeroinitializer
  %56 = select <16 x i1> %55, <16 x i16> %54, <16 x i16> %53
  %57 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %56, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %58 = add <8 x i32> %57, %29
  %59 = getelementptr inbounds i16, i16* %25, i64 %20
  %60 = getelementptr inbounds i16, i16* %26, i64 %21
  %61 = getelementptr inbounds i16, i16* %27, i64 16
  %62 = getelementptr inbounds i8, i8* %24, i64 %22
  %63 = add nuw nsw i32 %28, 1
  %64 = icmp eq i32 %63, 16
  br i1 %64, label %65, label %23

65:                                               ; preds = %23
  %66 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %58, <8 x i32> %58) #5
  %67 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %66, <8 x i32> %66) #5
  br label %126

68:                                               ; preds = %8
  %69 = ptrtoint i8* %2 to i64
  %70 = shl i64 %69, 1
  %71 = inttoptr i64 %70 to i16*
  %72 = ptrtoint i8* %4 to i64
  %73 = shl i64 %72, 1
  %74 = inttoptr i64 %73 to i16*
  %75 = ptrtoint i8* %0 to i64
  %76 = shl i64 %75, 1
  %77 = inttoptr i64 %76 to i16*
  %78 = sext i32 %1 to i64
  %79 = sext i32 %3 to i64
  %80 = sext i32 %6 to i64
  br label %81

81:                                               ; preds = %81, %68
  %82 = phi i8* [ %5, %68 ], [ %120, %81 ]
  %83 = phi i16* [ %77, %68 ], [ %117, %81 ]
  %84 = phi i16* [ %74, %68 ], [ %118, %81 ]
  %85 = phi i16* [ %71, %68 ], [ %119, %81 ]
  %86 = phi i32 [ 0, %68 ], [ %121, %81 ]
  %87 = phi <8 x i32> [ zeroinitializer, %68 ], [ %116, %81 ]
  %88 = bitcast i16* %83 to i8*
  %89 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %88) #5
  %90 = bitcast i16* %84 to i8*
  %91 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %90) #5
  %92 = bitcast i16* %85 to i8*
  %93 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %92) #5
  %94 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %82) #5
  %95 = zext <16 x i8> %94 to <16 x i16>
  %96 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %95
  %97 = bitcast <32 x i8> %91 to <16 x i16>
  %98 = bitcast <32 x i8> %93 to <16 x i16>
  %99 = shufflevector <16 x i16> %97, <16 x i16> %98, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %100 = shufflevector <16 x i16> %95, <16 x i16> %96, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %101 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %99, <16 x i16> %100) #5
  %102 = add <8 x i32> %101, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %103 = ashr <8 x i32> %102, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %104 = shufflevector <16 x i16> %97, <16 x i16> %98, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %105 = shufflevector <16 x i16> %95, <16 x i16> %96, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %106 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %104, <16 x i16> %105) #5
  %107 = add <8 x i32> %106, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %108 = ashr <8 x i32> %107, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %109 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %103, <8 x i32> %108) #5
  %110 = bitcast <32 x i8> %89 to <16 x i16>
  %111 = sub <16 x i16> %109, %110
  %112 = sub <16 x i16> zeroinitializer, %111
  %113 = icmp slt <16 x i16> %111, zeroinitializer
  %114 = select <16 x i1> %113, <16 x i16> %112, <16 x i16> %111
  %115 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %114, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %116 = add <8 x i32> %115, %87
  %117 = getelementptr inbounds i16, i16* %83, i64 %78
  %118 = getelementptr inbounds i16, i16* %84, i64 16
  %119 = getelementptr inbounds i16, i16* %85, i64 %79
  %120 = getelementptr inbounds i8, i8* %82, i64 %80
  %121 = add nuw nsw i32 %86, 1
  %122 = icmp eq i32 %121, 16
  br i1 %122, label %123, label %81

123:                                              ; preds = %81
  %124 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %116, <8 x i32> %116) #5
  %125 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %124, <8 x i32> %124) #5
  br label %126

126:                                              ; preds = %65, %123
  %127 = phi <8 x i32> [ %67, %65 ], [ %125, %123 ]
  %128 = extractelement <8 x i32> %127, i64 0
  %129 = extractelement <8 x i32> %127, i64 4
  %130 = add nsw i32 %128, %129
  ret i32 %130
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_masked_sad16x32_avx2(i8*, i32, i8*, i32, i8*, i8*, i32, i32) local_unnamed_addr #1 {
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %10, label %68

10:                                               ; preds = %8
  %11 = ptrtoint i8* %4 to i64
  %12 = shl i64 %11, 1
  %13 = inttoptr i64 %12 to i16*
  %14 = ptrtoint i8* %2 to i64
  %15 = shl i64 %14, 1
  %16 = inttoptr i64 %15 to i16*
  %17 = ptrtoint i8* %0 to i64
  %18 = shl i64 %17, 1
  %19 = inttoptr i64 %18 to i16*
  %20 = sext i32 %1 to i64
  %21 = sext i32 %3 to i64
  %22 = sext i32 %6 to i64
  br label %23

23:                                               ; preds = %23, %10
  %24 = phi i8* [ %5, %10 ], [ %62, %23 ]
  %25 = phi i16* [ %19, %10 ], [ %59, %23 ]
  %26 = phi i16* [ %16, %10 ], [ %60, %23 ]
  %27 = phi i16* [ %13, %10 ], [ %61, %23 ]
  %28 = phi i32 [ 0, %10 ], [ %63, %23 ]
  %29 = phi <8 x i32> [ zeroinitializer, %10 ], [ %58, %23 ]
  %30 = bitcast i16* %25 to i8*
  %31 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %30) #5
  %32 = bitcast i16* %26 to i8*
  %33 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %32) #5
  %34 = bitcast i16* %27 to i8*
  %35 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %34) #5
  %36 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %24) #5
  %37 = zext <16 x i8> %36 to <16 x i16>
  %38 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %37
  %39 = bitcast <32 x i8> %33 to <16 x i16>
  %40 = bitcast <32 x i8> %35 to <16 x i16>
  %41 = shufflevector <16 x i16> %39, <16 x i16> %40, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %42 = shufflevector <16 x i16> %37, <16 x i16> %38, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %43 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %41, <16 x i16> %42) #5
  %44 = add <8 x i32> %43, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %45 = ashr <8 x i32> %44, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %46 = shufflevector <16 x i16> %39, <16 x i16> %40, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %47 = shufflevector <16 x i16> %37, <16 x i16> %38, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %48 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %46, <16 x i16> %47) #5
  %49 = add <8 x i32> %48, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %50 = ashr <8 x i32> %49, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %51 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %45, <8 x i32> %50) #5
  %52 = bitcast <32 x i8> %31 to <16 x i16>
  %53 = sub <16 x i16> %51, %52
  %54 = sub <16 x i16> zeroinitializer, %53
  %55 = icmp slt <16 x i16> %53, zeroinitializer
  %56 = select <16 x i1> %55, <16 x i16> %54, <16 x i16> %53
  %57 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %56, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %58 = add <8 x i32> %57, %29
  %59 = getelementptr inbounds i16, i16* %25, i64 %20
  %60 = getelementptr inbounds i16, i16* %26, i64 %21
  %61 = getelementptr inbounds i16, i16* %27, i64 16
  %62 = getelementptr inbounds i8, i8* %24, i64 %22
  %63 = add nuw nsw i32 %28, 1
  %64 = icmp eq i32 %63, 32
  br i1 %64, label %65, label %23

65:                                               ; preds = %23
  %66 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %58, <8 x i32> %58) #5
  %67 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %66, <8 x i32> %66) #5
  br label %126

68:                                               ; preds = %8
  %69 = ptrtoint i8* %2 to i64
  %70 = shl i64 %69, 1
  %71 = inttoptr i64 %70 to i16*
  %72 = ptrtoint i8* %4 to i64
  %73 = shl i64 %72, 1
  %74 = inttoptr i64 %73 to i16*
  %75 = ptrtoint i8* %0 to i64
  %76 = shl i64 %75, 1
  %77 = inttoptr i64 %76 to i16*
  %78 = sext i32 %1 to i64
  %79 = sext i32 %3 to i64
  %80 = sext i32 %6 to i64
  br label %81

81:                                               ; preds = %81, %68
  %82 = phi i8* [ %5, %68 ], [ %120, %81 ]
  %83 = phi i16* [ %77, %68 ], [ %117, %81 ]
  %84 = phi i16* [ %74, %68 ], [ %118, %81 ]
  %85 = phi i16* [ %71, %68 ], [ %119, %81 ]
  %86 = phi i32 [ 0, %68 ], [ %121, %81 ]
  %87 = phi <8 x i32> [ zeroinitializer, %68 ], [ %116, %81 ]
  %88 = bitcast i16* %83 to i8*
  %89 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %88) #5
  %90 = bitcast i16* %84 to i8*
  %91 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %90) #5
  %92 = bitcast i16* %85 to i8*
  %93 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %92) #5
  %94 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %82) #5
  %95 = zext <16 x i8> %94 to <16 x i16>
  %96 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %95
  %97 = bitcast <32 x i8> %91 to <16 x i16>
  %98 = bitcast <32 x i8> %93 to <16 x i16>
  %99 = shufflevector <16 x i16> %97, <16 x i16> %98, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %100 = shufflevector <16 x i16> %95, <16 x i16> %96, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %101 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %99, <16 x i16> %100) #5
  %102 = add <8 x i32> %101, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %103 = ashr <8 x i32> %102, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %104 = shufflevector <16 x i16> %97, <16 x i16> %98, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %105 = shufflevector <16 x i16> %95, <16 x i16> %96, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %106 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %104, <16 x i16> %105) #5
  %107 = add <8 x i32> %106, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %108 = ashr <8 x i32> %107, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %109 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %103, <8 x i32> %108) #5
  %110 = bitcast <32 x i8> %89 to <16 x i16>
  %111 = sub <16 x i16> %109, %110
  %112 = sub <16 x i16> zeroinitializer, %111
  %113 = icmp slt <16 x i16> %111, zeroinitializer
  %114 = select <16 x i1> %113, <16 x i16> %112, <16 x i16> %111
  %115 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %114, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %116 = add <8 x i32> %115, %87
  %117 = getelementptr inbounds i16, i16* %83, i64 %78
  %118 = getelementptr inbounds i16, i16* %84, i64 16
  %119 = getelementptr inbounds i16, i16* %85, i64 %79
  %120 = getelementptr inbounds i8, i8* %82, i64 %80
  %121 = add nuw nsw i32 %86, 1
  %122 = icmp eq i32 %121, 32
  br i1 %122, label %123, label %81

123:                                              ; preds = %81
  %124 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %116, <8 x i32> %116) #5
  %125 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %124, <8 x i32> %124) #5
  br label %126

126:                                              ; preds = %65, %123
  %127 = phi <8 x i32> [ %67, %65 ], [ %125, %123 ]
  %128 = extractelement <8 x i32> %127, i64 0
  %129 = extractelement <8 x i32> %127, i64 4
  %130 = add nsw i32 %128, %129
  ret i32 %130
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_masked_sad32x16_avx2(i8*, i32, i8*, i32, i8*, i8*, i32, i32) local_unnamed_addr #1 {
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %10, label %101

10:                                               ; preds = %8
  %11 = ptrtoint i8* %4 to i64
  %12 = shl i64 %11, 1
  %13 = inttoptr i64 %12 to i16*
  %14 = ptrtoint i8* %2 to i64
  %15 = shl i64 %14, 1
  %16 = inttoptr i64 %15 to i16*
  %17 = ptrtoint i8* %0 to i64
  %18 = shl i64 %17, 1
  %19 = inttoptr i64 %18 to i16*
  %20 = sext i32 %1 to i64
  %21 = sext i32 %3 to i64
  %22 = sext i32 %6 to i64
  br label %23

23:                                               ; preds = %23, %10
  %24 = phi i8* [ %5, %10 ], [ %95, %23 ]
  %25 = phi i16* [ %19, %10 ], [ %92, %23 ]
  %26 = phi i16* [ %16, %10 ], [ %93, %23 ]
  %27 = phi i16* [ %13, %10 ], [ %94, %23 ]
  %28 = phi i32 [ 0, %10 ], [ %96, %23 ]
  %29 = phi <8 x i32> [ zeroinitializer, %10 ], [ %91, %23 ]
  %30 = bitcast i16* %25 to i8*
  %31 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %30) #5
  %32 = bitcast i16* %26 to i8*
  %33 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %32) #5
  %34 = bitcast i16* %27 to i8*
  %35 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %34) #5
  %36 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %24) #5
  %37 = zext <16 x i8> %36 to <16 x i16>
  %38 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %37
  %39 = bitcast <32 x i8> %33 to <16 x i16>
  %40 = bitcast <32 x i8> %35 to <16 x i16>
  %41 = shufflevector <16 x i16> %39, <16 x i16> %40, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %42 = shufflevector <16 x i16> %37, <16 x i16> %38, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %43 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %41, <16 x i16> %42) #5
  %44 = add <8 x i32> %43, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %45 = ashr <8 x i32> %44, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %46 = shufflevector <16 x i16> %39, <16 x i16> %40, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %47 = shufflevector <16 x i16> %37, <16 x i16> %38, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %48 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %46, <16 x i16> %47) #5
  %49 = add <8 x i32> %48, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %50 = ashr <8 x i32> %49, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %51 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %45, <8 x i32> %50) #5
  %52 = bitcast <32 x i8> %31 to <16 x i16>
  %53 = sub <16 x i16> %51, %52
  %54 = sub <16 x i16> zeroinitializer, %53
  %55 = icmp slt <16 x i16> %53, zeroinitializer
  %56 = select <16 x i1> %55, <16 x i16> %54, <16 x i16> %53
  %57 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %56, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %58 = add <8 x i32> %57, %29
  %59 = getelementptr inbounds i16, i16* %25, i64 16
  %60 = bitcast i16* %59 to i8*
  %61 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %60) #5
  %62 = getelementptr inbounds i16, i16* %26, i64 16
  %63 = bitcast i16* %62 to i8*
  %64 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %63) #5
  %65 = getelementptr inbounds i16, i16* %27, i64 16
  %66 = bitcast i16* %65 to i8*
  %67 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %66) #5
  %68 = getelementptr inbounds i8, i8* %24, i64 16
  %69 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %68) #5
  %70 = zext <16 x i8> %69 to <16 x i16>
  %71 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %70
  %72 = bitcast <32 x i8> %64 to <16 x i16>
  %73 = bitcast <32 x i8> %67 to <16 x i16>
  %74 = shufflevector <16 x i16> %72, <16 x i16> %73, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %75 = shufflevector <16 x i16> %70, <16 x i16> %71, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %76 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %74, <16 x i16> %75) #5
  %77 = add <8 x i32> %76, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %78 = ashr <8 x i32> %77, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %79 = shufflevector <16 x i16> %72, <16 x i16> %73, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %80 = shufflevector <16 x i16> %70, <16 x i16> %71, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %81 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %79, <16 x i16> %80) #5
  %82 = add <8 x i32> %81, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %83 = ashr <8 x i32> %82, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %84 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %78, <8 x i32> %83) #5
  %85 = bitcast <32 x i8> %61 to <16 x i16>
  %86 = sub <16 x i16> %84, %85
  %87 = sub <16 x i16> zeroinitializer, %86
  %88 = icmp slt <16 x i16> %86, zeroinitializer
  %89 = select <16 x i1> %88, <16 x i16> %87, <16 x i16> %86
  %90 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %89, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %91 = add <8 x i32> %90, %58
  %92 = getelementptr inbounds i16, i16* %25, i64 %20
  %93 = getelementptr inbounds i16, i16* %26, i64 %21
  %94 = getelementptr inbounds i16, i16* %27, i64 32
  %95 = getelementptr inbounds i8, i8* %24, i64 %22
  %96 = add nuw nsw i32 %28, 1
  %97 = icmp eq i32 %96, 16
  br i1 %97, label %98, label %23

98:                                               ; preds = %23
  %99 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %91, <8 x i32> %91) #5
  %100 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %99, <8 x i32> %99) #5
  br label %192

101:                                              ; preds = %8
  %102 = ptrtoint i8* %2 to i64
  %103 = shl i64 %102, 1
  %104 = inttoptr i64 %103 to i16*
  %105 = ptrtoint i8* %4 to i64
  %106 = shl i64 %105, 1
  %107 = inttoptr i64 %106 to i16*
  %108 = ptrtoint i8* %0 to i64
  %109 = shl i64 %108, 1
  %110 = inttoptr i64 %109 to i16*
  %111 = sext i32 %1 to i64
  %112 = sext i32 %3 to i64
  %113 = sext i32 %6 to i64
  br label %114

114:                                              ; preds = %114, %101
  %115 = phi i8* [ %5, %101 ], [ %186, %114 ]
  %116 = phi i16* [ %110, %101 ], [ %183, %114 ]
  %117 = phi i16* [ %107, %101 ], [ %184, %114 ]
  %118 = phi i16* [ %104, %101 ], [ %185, %114 ]
  %119 = phi i32 [ 0, %101 ], [ %187, %114 ]
  %120 = phi <8 x i32> [ zeroinitializer, %101 ], [ %182, %114 ]
  %121 = bitcast i16* %116 to i8*
  %122 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %121) #5
  %123 = bitcast i16* %117 to i8*
  %124 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %123) #5
  %125 = bitcast i16* %118 to i8*
  %126 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %125) #5
  %127 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %115) #5
  %128 = zext <16 x i8> %127 to <16 x i16>
  %129 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %128
  %130 = bitcast <32 x i8> %124 to <16 x i16>
  %131 = bitcast <32 x i8> %126 to <16 x i16>
  %132 = shufflevector <16 x i16> %130, <16 x i16> %131, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %133 = shufflevector <16 x i16> %128, <16 x i16> %129, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %134 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %132, <16 x i16> %133) #5
  %135 = add <8 x i32> %134, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %136 = ashr <8 x i32> %135, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %137 = shufflevector <16 x i16> %130, <16 x i16> %131, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %138 = shufflevector <16 x i16> %128, <16 x i16> %129, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %139 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %137, <16 x i16> %138) #5
  %140 = add <8 x i32> %139, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %141 = ashr <8 x i32> %140, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %142 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %136, <8 x i32> %141) #5
  %143 = bitcast <32 x i8> %122 to <16 x i16>
  %144 = sub <16 x i16> %142, %143
  %145 = sub <16 x i16> zeroinitializer, %144
  %146 = icmp slt <16 x i16> %144, zeroinitializer
  %147 = select <16 x i1> %146, <16 x i16> %145, <16 x i16> %144
  %148 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %147, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %149 = add <8 x i32> %148, %120
  %150 = getelementptr inbounds i16, i16* %116, i64 16
  %151 = bitcast i16* %150 to i8*
  %152 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %151) #5
  %153 = getelementptr inbounds i16, i16* %117, i64 16
  %154 = bitcast i16* %153 to i8*
  %155 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %154) #5
  %156 = getelementptr inbounds i16, i16* %118, i64 16
  %157 = bitcast i16* %156 to i8*
  %158 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %157) #5
  %159 = getelementptr inbounds i8, i8* %115, i64 16
  %160 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %159) #5
  %161 = zext <16 x i8> %160 to <16 x i16>
  %162 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %161
  %163 = bitcast <32 x i8> %155 to <16 x i16>
  %164 = bitcast <32 x i8> %158 to <16 x i16>
  %165 = shufflevector <16 x i16> %163, <16 x i16> %164, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %166 = shufflevector <16 x i16> %161, <16 x i16> %162, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %167 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %165, <16 x i16> %166) #5
  %168 = add <8 x i32> %167, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %169 = ashr <8 x i32> %168, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %170 = shufflevector <16 x i16> %163, <16 x i16> %164, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %171 = shufflevector <16 x i16> %161, <16 x i16> %162, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %172 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %170, <16 x i16> %171) #5
  %173 = add <8 x i32> %172, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %174 = ashr <8 x i32> %173, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %175 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %169, <8 x i32> %174) #5
  %176 = bitcast <32 x i8> %152 to <16 x i16>
  %177 = sub <16 x i16> %175, %176
  %178 = sub <16 x i16> zeroinitializer, %177
  %179 = icmp slt <16 x i16> %177, zeroinitializer
  %180 = select <16 x i1> %179, <16 x i16> %178, <16 x i16> %177
  %181 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %180, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %182 = add <8 x i32> %181, %149
  %183 = getelementptr inbounds i16, i16* %116, i64 %111
  %184 = getelementptr inbounds i16, i16* %117, i64 32
  %185 = getelementptr inbounds i16, i16* %118, i64 %112
  %186 = getelementptr inbounds i8, i8* %115, i64 %113
  %187 = add nuw nsw i32 %119, 1
  %188 = icmp eq i32 %187, 16
  br i1 %188, label %189, label %114

189:                                              ; preds = %114
  %190 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %182, <8 x i32> %182) #5
  %191 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %190, <8 x i32> %190) #5
  br label %192

192:                                              ; preds = %98, %189
  %193 = phi <8 x i32> [ %100, %98 ], [ %191, %189 ]
  %194 = extractelement <8 x i32> %193, i64 0
  %195 = extractelement <8 x i32> %193, i64 4
  %196 = add nsw i32 %194, %195
  ret i32 %196
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_masked_sad32x32_avx2(i8*, i32, i8*, i32, i8*, i8*, i32, i32) local_unnamed_addr #1 {
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %10, label %101

10:                                               ; preds = %8
  %11 = ptrtoint i8* %4 to i64
  %12 = shl i64 %11, 1
  %13 = inttoptr i64 %12 to i16*
  %14 = ptrtoint i8* %2 to i64
  %15 = shl i64 %14, 1
  %16 = inttoptr i64 %15 to i16*
  %17 = ptrtoint i8* %0 to i64
  %18 = shl i64 %17, 1
  %19 = inttoptr i64 %18 to i16*
  %20 = sext i32 %1 to i64
  %21 = sext i32 %3 to i64
  %22 = sext i32 %6 to i64
  br label %23

23:                                               ; preds = %23, %10
  %24 = phi i8* [ %5, %10 ], [ %95, %23 ]
  %25 = phi i16* [ %19, %10 ], [ %92, %23 ]
  %26 = phi i16* [ %16, %10 ], [ %93, %23 ]
  %27 = phi i16* [ %13, %10 ], [ %94, %23 ]
  %28 = phi i32 [ 0, %10 ], [ %96, %23 ]
  %29 = phi <8 x i32> [ zeroinitializer, %10 ], [ %91, %23 ]
  %30 = bitcast i16* %25 to i8*
  %31 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %30) #5
  %32 = bitcast i16* %26 to i8*
  %33 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %32) #5
  %34 = bitcast i16* %27 to i8*
  %35 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %34) #5
  %36 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %24) #5
  %37 = zext <16 x i8> %36 to <16 x i16>
  %38 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %37
  %39 = bitcast <32 x i8> %33 to <16 x i16>
  %40 = bitcast <32 x i8> %35 to <16 x i16>
  %41 = shufflevector <16 x i16> %39, <16 x i16> %40, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %42 = shufflevector <16 x i16> %37, <16 x i16> %38, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %43 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %41, <16 x i16> %42) #5
  %44 = add <8 x i32> %43, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %45 = ashr <8 x i32> %44, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %46 = shufflevector <16 x i16> %39, <16 x i16> %40, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %47 = shufflevector <16 x i16> %37, <16 x i16> %38, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %48 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %46, <16 x i16> %47) #5
  %49 = add <8 x i32> %48, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %50 = ashr <8 x i32> %49, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %51 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %45, <8 x i32> %50) #5
  %52 = bitcast <32 x i8> %31 to <16 x i16>
  %53 = sub <16 x i16> %51, %52
  %54 = sub <16 x i16> zeroinitializer, %53
  %55 = icmp slt <16 x i16> %53, zeroinitializer
  %56 = select <16 x i1> %55, <16 x i16> %54, <16 x i16> %53
  %57 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %56, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %58 = add <8 x i32> %57, %29
  %59 = getelementptr inbounds i16, i16* %25, i64 16
  %60 = bitcast i16* %59 to i8*
  %61 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %60) #5
  %62 = getelementptr inbounds i16, i16* %26, i64 16
  %63 = bitcast i16* %62 to i8*
  %64 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %63) #5
  %65 = getelementptr inbounds i16, i16* %27, i64 16
  %66 = bitcast i16* %65 to i8*
  %67 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %66) #5
  %68 = getelementptr inbounds i8, i8* %24, i64 16
  %69 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %68) #5
  %70 = zext <16 x i8> %69 to <16 x i16>
  %71 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %70
  %72 = bitcast <32 x i8> %64 to <16 x i16>
  %73 = bitcast <32 x i8> %67 to <16 x i16>
  %74 = shufflevector <16 x i16> %72, <16 x i16> %73, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %75 = shufflevector <16 x i16> %70, <16 x i16> %71, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %76 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %74, <16 x i16> %75) #5
  %77 = add <8 x i32> %76, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %78 = ashr <8 x i32> %77, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %79 = shufflevector <16 x i16> %72, <16 x i16> %73, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %80 = shufflevector <16 x i16> %70, <16 x i16> %71, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %81 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %79, <16 x i16> %80) #5
  %82 = add <8 x i32> %81, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %83 = ashr <8 x i32> %82, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %84 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %78, <8 x i32> %83) #5
  %85 = bitcast <32 x i8> %61 to <16 x i16>
  %86 = sub <16 x i16> %84, %85
  %87 = sub <16 x i16> zeroinitializer, %86
  %88 = icmp slt <16 x i16> %86, zeroinitializer
  %89 = select <16 x i1> %88, <16 x i16> %87, <16 x i16> %86
  %90 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %89, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %91 = add <8 x i32> %90, %58
  %92 = getelementptr inbounds i16, i16* %25, i64 %20
  %93 = getelementptr inbounds i16, i16* %26, i64 %21
  %94 = getelementptr inbounds i16, i16* %27, i64 32
  %95 = getelementptr inbounds i8, i8* %24, i64 %22
  %96 = add nuw nsw i32 %28, 1
  %97 = icmp eq i32 %96, 32
  br i1 %97, label %98, label %23

98:                                               ; preds = %23
  %99 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %91, <8 x i32> %91) #5
  %100 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %99, <8 x i32> %99) #5
  br label %192

101:                                              ; preds = %8
  %102 = ptrtoint i8* %2 to i64
  %103 = shl i64 %102, 1
  %104 = inttoptr i64 %103 to i16*
  %105 = ptrtoint i8* %4 to i64
  %106 = shl i64 %105, 1
  %107 = inttoptr i64 %106 to i16*
  %108 = ptrtoint i8* %0 to i64
  %109 = shl i64 %108, 1
  %110 = inttoptr i64 %109 to i16*
  %111 = sext i32 %1 to i64
  %112 = sext i32 %3 to i64
  %113 = sext i32 %6 to i64
  br label %114

114:                                              ; preds = %114, %101
  %115 = phi i8* [ %5, %101 ], [ %186, %114 ]
  %116 = phi i16* [ %110, %101 ], [ %183, %114 ]
  %117 = phi i16* [ %107, %101 ], [ %184, %114 ]
  %118 = phi i16* [ %104, %101 ], [ %185, %114 ]
  %119 = phi i32 [ 0, %101 ], [ %187, %114 ]
  %120 = phi <8 x i32> [ zeroinitializer, %101 ], [ %182, %114 ]
  %121 = bitcast i16* %116 to i8*
  %122 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %121) #5
  %123 = bitcast i16* %117 to i8*
  %124 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %123) #5
  %125 = bitcast i16* %118 to i8*
  %126 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %125) #5
  %127 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %115) #5
  %128 = zext <16 x i8> %127 to <16 x i16>
  %129 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %128
  %130 = bitcast <32 x i8> %124 to <16 x i16>
  %131 = bitcast <32 x i8> %126 to <16 x i16>
  %132 = shufflevector <16 x i16> %130, <16 x i16> %131, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %133 = shufflevector <16 x i16> %128, <16 x i16> %129, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %134 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %132, <16 x i16> %133) #5
  %135 = add <8 x i32> %134, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %136 = ashr <8 x i32> %135, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %137 = shufflevector <16 x i16> %130, <16 x i16> %131, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %138 = shufflevector <16 x i16> %128, <16 x i16> %129, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %139 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %137, <16 x i16> %138) #5
  %140 = add <8 x i32> %139, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %141 = ashr <8 x i32> %140, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %142 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %136, <8 x i32> %141) #5
  %143 = bitcast <32 x i8> %122 to <16 x i16>
  %144 = sub <16 x i16> %142, %143
  %145 = sub <16 x i16> zeroinitializer, %144
  %146 = icmp slt <16 x i16> %144, zeroinitializer
  %147 = select <16 x i1> %146, <16 x i16> %145, <16 x i16> %144
  %148 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %147, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %149 = add <8 x i32> %148, %120
  %150 = getelementptr inbounds i16, i16* %116, i64 16
  %151 = bitcast i16* %150 to i8*
  %152 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %151) #5
  %153 = getelementptr inbounds i16, i16* %117, i64 16
  %154 = bitcast i16* %153 to i8*
  %155 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %154) #5
  %156 = getelementptr inbounds i16, i16* %118, i64 16
  %157 = bitcast i16* %156 to i8*
  %158 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %157) #5
  %159 = getelementptr inbounds i8, i8* %115, i64 16
  %160 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %159) #5
  %161 = zext <16 x i8> %160 to <16 x i16>
  %162 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %161
  %163 = bitcast <32 x i8> %155 to <16 x i16>
  %164 = bitcast <32 x i8> %158 to <16 x i16>
  %165 = shufflevector <16 x i16> %163, <16 x i16> %164, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %166 = shufflevector <16 x i16> %161, <16 x i16> %162, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %167 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %165, <16 x i16> %166) #5
  %168 = add <8 x i32> %167, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %169 = ashr <8 x i32> %168, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %170 = shufflevector <16 x i16> %163, <16 x i16> %164, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %171 = shufflevector <16 x i16> %161, <16 x i16> %162, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %172 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %170, <16 x i16> %171) #5
  %173 = add <8 x i32> %172, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %174 = ashr <8 x i32> %173, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %175 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %169, <8 x i32> %174) #5
  %176 = bitcast <32 x i8> %152 to <16 x i16>
  %177 = sub <16 x i16> %175, %176
  %178 = sub <16 x i16> zeroinitializer, %177
  %179 = icmp slt <16 x i16> %177, zeroinitializer
  %180 = select <16 x i1> %179, <16 x i16> %178, <16 x i16> %177
  %181 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %180, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %182 = add <8 x i32> %181, %149
  %183 = getelementptr inbounds i16, i16* %116, i64 %111
  %184 = getelementptr inbounds i16, i16* %117, i64 32
  %185 = getelementptr inbounds i16, i16* %118, i64 %112
  %186 = getelementptr inbounds i8, i8* %115, i64 %113
  %187 = add nuw nsw i32 %119, 1
  %188 = icmp eq i32 %187, 32
  br i1 %188, label %189, label %114

189:                                              ; preds = %114
  %190 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %182, <8 x i32> %182) #5
  %191 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %190, <8 x i32> %190) #5
  br label %192

192:                                              ; preds = %98, %189
  %193 = phi <8 x i32> [ %100, %98 ], [ %191, %189 ]
  %194 = extractelement <8 x i32> %193, i64 0
  %195 = extractelement <8 x i32> %193, i64 4
  %196 = add nsw i32 %194, %195
  ret i32 %196
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_masked_sad32x64_avx2(i8*, i32, i8*, i32, i8*, i8*, i32, i32) local_unnamed_addr #1 {
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %10, label %101

10:                                               ; preds = %8
  %11 = ptrtoint i8* %4 to i64
  %12 = shl i64 %11, 1
  %13 = inttoptr i64 %12 to i16*
  %14 = ptrtoint i8* %2 to i64
  %15 = shl i64 %14, 1
  %16 = inttoptr i64 %15 to i16*
  %17 = ptrtoint i8* %0 to i64
  %18 = shl i64 %17, 1
  %19 = inttoptr i64 %18 to i16*
  %20 = sext i32 %1 to i64
  %21 = sext i32 %3 to i64
  %22 = sext i32 %6 to i64
  br label %23

23:                                               ; preds = %23, %10
  %24 = phi i8* [ %5, %10 ], [ %95, %23 ]
  %25 = phi i16* [ %19, %10 ], [ %92, %23 ]
  %26 = phi i16* [ %16, %10 ], [ %93, %23 ]
  %27 = phi i16* [ %13, %10 ], [ %94, %23 ]
  %28 = phi i32 [ 0, %10 ], [ %96, %23 ]
  %29 = phi <8 x i32> [ zeroinitializer, %10 ], [ %91, %23 ]
  %30 = bitcast i16* %25 to i8*
  %31 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %30) #5
  %32 = bitcast i16* %26 to i8*
  %33 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %32) #5
  %34 = bitcast i16* %27 to i8*
  %35 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %34) #5
  %36 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %24) #5
  %37 = zext <16 x i8> %36 to <16 x i16>
  %38 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %37
  %39 = bitcast <32 x i8> %33 to <16 x i16>
  %40 = bitcast <32 x i8> %35 to <16 x i16>
  %41 = shufflevector <16 x i16> %39, <16 x i16> %40, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %42 = shufflevector <16 x i16> %37, <16 x i16> %38, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %43 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %41, <16 x i16> %42) #5
  %44 = add <8 x i32> %43, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %45 = ashr <8 x i32> %44, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %46 = shufflevector <16 x i16> %39, <16 x i16> %40, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %47 = shufflevector <16 x i16> %37, <16 x i16> %38, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %48 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %46, <16 x i16> %47) #5
  %49 = add <8 x i32> %48, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %50 = ashr <8 x i32> %49, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %51 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %45, <8 x i32> %50) #5
  %52 = bitcast <32 x i8> %31 to <16 x i16>
  %53 = sub <16 x i16> %51, %52
  %54 = sub <16 x i16> zeroinitializer, %53
  %55 = icmp slt <16 x i16> %53, zeroinitializer
  %56 = select <16 x i1> %55, <16 x i16> %54, <16 x i16> %53
  %57 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %56, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %58 = add <8 x i32> %57, %29
  %59 = getelementptr inbounds i16, i16* %25, i64 16
  %60 = bitcast i16* %59 to i8*
  %61 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %60) #5
  %62 = getelementptr inbounds i16, i16* %26, i64 16
  %63 = bitcast i16* %62 to i8*
  %64 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %63) #5
  %65 = getelementptr inbounds i16, i16* %27, i64 16
  %66 = bitcast i16* %65 to i8*
  %67 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %66) #5
  %68 = getelementptr inbounds i8, i8* %24, i64 16
  %69 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %68) #5
  %70 = zext <16 x i8> %69 to <16 x i16>
  %71 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %70
  %72 = bitcast <32 x i8> %64 to <16 x i16>
  %73 = bitcast <32 x i8> %67 to <16 x i16>
  %74 = shufflevector <16 x i16> %72, <16 x i16> %73, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %75 = shufflevector <16 x i16> %70, <16 x i16> %71, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %76 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %74, <16 x i16> %75) #5
  %77 = add <8 x i32> %76, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %78 = ashr <8 x i32> %77, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %79 = shufflevector <16 x i16> %72, <16 x i16> %73, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %80 = shufflevector <16 x i16> %70, <16 x i16> %71, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %81 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %79, <16 x i16> %80) #5
  %82 = add <8 x i32> %81, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %83 = ashr <8 x i32> %82, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %84 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %78, <8 x i32> %83) #5
  %85 = bitcast <32 x i8> %61 to <16 x i16>
  %86 = sub <16 x i16> %84, %85
  %87 = sub <16 x i16> zeroinitializer, %86
  %88 = icmp slt <16 x i16> %86, zeroinitializer
  %89 = select <16 x i1> %88, <16 x i16> %87, <16 x i16> %86
  %90 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %89, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %91 = add <8 x i32> %90, %58
  %92 = getelementptr inbounds i16, i16* %25, i64 %20
  %93 = getelementptr inbounds i16, i16* %26, i64 %21
  %94 = getelementptr inbounds i16, i16* %27, i64 32
  %95 = getelementptr inbounds i8, i8* %24, i64 %22
  %96 = add nuw nsw i32 %28, 1
  %97 = icmp eq i32 %96, 64
  br i1 %97, label %98, label %23

98:                                               ; preds = %23
  %99 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %91, <8 x i32> %91) #5
  %100 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %99, <8 x i32> %99) #5
  br label %192

101:                                              ; preds = %8
  %102 = ptrtoint i8* %2 to i64
  %103 = shl i64 %102, 1
  %104 = inttoptr i64 %103 to i16*
  %105 = ptrtoint i8* %4 to i64
  %106 = shl i64 %105, 1
  %107 = inttoptr i64 %106 to i16*
  %108 = ptrtoint i8* %0 to i64
  %109 = shl i64 %108, 1
  %110 = inttoptr i64 %109 to i16*
  %111 = sext i32 %1 to i64
  %112 = sext i32 %3 to i64
  %113 = sext i32 %6 to i64
  br label %114

114:                                              ; preds = %114, %101
  %115 = phi i8* [ %5, %101 ], [ %186, %114 ]
  %116 = phi i16* [ %110, %101 ], [ %183, %114 ]
  %117 = phi i16* [ %107, %101 ], [ %184, %114 ]
  %118 = phi i16* [ %104, %101 ], [ %185, %114 ]
  %119 = phi i32 [ 0, %101 ], [ %187, %114 ]
  %120 = phi <8 x i32> [ zeroinitializer, %101 ], [ %182, %114 ]
  %121 = bitcast i16* %116 to i8*
  %122 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %121) #5
  %123 = bitcast i16* %117 to i8*
  %124 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %123) #5
  %125 = bitcast i16* %118 to i8*
  %126 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %125) #5
  %127 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %115) #5
  %128 = zext <16 x i8> %127 to <16 x i16>
  %129 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %128
  %130 = bitcast <32 x i8> %124 to <16 x i16>
  %131 = bitcast <32 x i8> %126 to <16 x i16>
  %132 = shufflevector <16 x i16> %130, <16 x i16> %131, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %133 = shufflevector <16 x i16> %128, <16 x i16> %129, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %134 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %132, <16 x i16> %133) #5
  %135 = add <8 x i32> %134, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %136 = ashr <8 x i32> %135, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %137 = shufflevector <16 x i16> %130, <16 x i16> %131, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %138 = shufflevector <16 x i16> %128, <16 x i16> %129, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %139 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %137, <16 x i16> %138) #5
  %140 = add <8 x i32> %139, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %141 = ashr <8 x i32> %140, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %142 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %136, <8 x i32> %141) #5
  %143 = bitcast <32 x i8> %122 to <16 x i16>
  %144 = sub <16 x i16> %142, %143
  %145 = sub <16 x i16> zeroinitializer, %144
  %146 = icmp slt <16 x i16> %144, zeroinitializer
  %147 = select <16 x i1> %146, <16 x i16> %145, <16 x i16> %144
  %148 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %147, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %149 = add <8 x i32> %148, %120
  %150 = getelementptr inbounds i16, i16* %116, i64 16
  %151 = bitcast i16* %150 to i8*
  %152 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %151) #5
  %153 = getelementptr inbounds i16, i16* %117, i64 16
  %154 = bitcast i16* %153 to i8*
  %155 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %154) #5
  %156 = getelementptr inbounds i16, i16* %118, i64 16
  %157 = bitcast i16* %156 to i8*
  %158 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %157) #5
  %159 = getelementptr inbounds i8, i8* %115, i64 16
  %160 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %159) #5
  %161 = zext <16 x i8> %160 to <16 x i16>
  %162 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %161
  %163 = bitcast <32 x i8> %155 to <16 x i16>
  %164 = bitcast <32 x i8> %158 to <16 x i16>
  %165 = shufflevector <16 x i16> %163, <16 x i16> %164, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %166 = shufflevector <16 x i16> %161, <16 x i16> %162, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %167 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %165, <16 x i16> %166) #5
  %168 = add <8 x i32> %167, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %169 = ashr <8 x i32> %168, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %170 = shufflevector <16 x i16> %163, <16 x i16> %164, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %171 = shufflevector <16 x i16> %161, <16 x i16> %162, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %172 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %170, <16 x i16> %171) #5
  %173 = add <8 x i32> %172, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %174 = ashr <8 x i32> %173, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %175 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %169, <8 x i32> %174) #5
  %176 = bitcast <32 x i8> %152 to <16 x i16>
  %177 = sub <16 x i16> %175, %176
  %178 = sub <16 x i16> zeroinitializer, %177
  %179 = icmp slt <16 x i16> %177, zeroinitializer
  %180 = select <16 x i1> %179, <16 x i16> %178, <16 x i16> %177
  %181 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %180, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %182 = add <8 x i32> %181, %149
  %183 = getelementptr inbounds i16, i16* %116, i64 %111
  %184 = getelementptr inbounds i16, i16* %117, i64 32
  %185 = getelementptr inbounds i16, i16* %118, i64 %112
  %186 = getelementptr inbounds i8, i8* %115, i64 %113
  %187 = add nuw nsw i32 %119, 1
  %188 = icmp eq i32 %187, 64
  br i1 %188, label %189, label %114

189:                                              ; preds = %114
  %190 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %182, <8 x i32> %182) #5
  %191 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %190, <8 x i32> %190) #5
  br label %192

192:                                              ; preds = %98, %189
  %193 = phi <8 x i32> [ %100, %98 ], [ %191, %189 ]
  %194 = extractelement <8 x i32> %193, i64 0
  %195 = extractelement <8 x i32> %193, i64 4
  %196 = add nsw i32 %194, %195
  ret i32 %196
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_masked_sad64x32_avx2(i8*, i32, i8*, i32, i8*, i8*, i32, i32) local_unnamed_addr #1 {
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %10, label %167

10:                                               ; preds = %8
  %11 = ptrtoint i8* %4 to i64
  %12 = shl i64 %11, 1
  %13 = inttoptr i64 %12 to i16*
  %14 = ptrtoint i8* %2 to i64
  %15 = shl i64 %14, 1
  %16 = inttoptr i64 %15 to i16*
  %17 = ptrtoint i8* %0 to i64
  %18 = shl i64 %17, 1
  %19 = inttoptr i64 %18 to i16*
  %20 = sext i32 %1 to i64
  %21 = sext i32 %3 to i64
  %22 = sext i32 %6 to i64
  br label %23

23:                                               ; preds = %23, %10
  %24 = phi i8* [ %5, %10 ], [ %161, %23 ]
  %25 = phi i16* [ %19, %10 ], [ %158, %23 ]
  %26 = phi i16* [ %16, %10 ], [ %159, %23 ]
  %27 = phi i16* [ %13, %10 ], [ %160, %23 ]
  %28 = phi i32 [ 0, %10 ], [ %162, %23 ]
  %29 = phi <8 x i32> [ zeroinitializer, %10 ], [ %157, %23 ]
  %30 = bitcast i16* %25 to i8*
  %31 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %30) #5
  %32 = bitcast i16* %26 to i8*
  %33 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %32) #5
  %34 = bitcast i16* %27 to i8*
  %35 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %34) #5
  %36 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %24) #5
  %37 = zext <16 x i8> %36 to <16 x i16>
  %38 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %37
  %39 = bitcast <32 x i8> %33 to <16 x i16>
  %40 = bitcast <32 x i8> %35 to <16 x i16>
  %41 = shufflevector <16 x i16> %39, <16 x i16> %40, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %42 = shufflevector <16 x i16> %37, <16 x i16> %38, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %43 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %41, <16 x i16> %42) #5
  %44 = add <8 x i32> %43, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %45 = ashr <8 x i32> %44, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %46 = shufflevector <16 x i16> %39, <16 x i16> %40, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %47 = shufflevector <16 x i16> %37, <16 x i16> %38, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %48 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %46, <16 x i16> %47) #5
  %49 = add <8 x i32> %48, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %50 = ashr <8 x i32> %49, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %51 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %45, <8 x i32> %50) #5
  %52 = bitcast <32 x i8> %31 to <16 x i16>
  %53 = sub <16 x i16> %51, %52
  %54 = sub <16 x i16> zeroinitializer, %53
  %55 = icmp slt <16 x i16> %53, zeroinitializer
  %56 = select <16 x i1> %55, <16 x i16> %54, <16 x i16> %53
  %57 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %56, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %58 = add <8 x i32> %57, %29
  %59 = getelementptr inbounds i16, i16* %25, i64 16
  %60 = bitcast i16* %59 to i8*
  %61 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %60) #5
  %62 = getelementptr inbounds i16, i16* %26, i64 16
  %63 = bitcast i16* %62 to i8*
  %64 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %63) #5
  %65 = getelementptr inbounds i16, i16* %27, i64 16
  %66 = bitcast i16* %65 to i8*
  %67 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %66) #5
  %68 = getelementptr inbounds i8, i8* %24, i64 16
  %69 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %68) #5
  %70 = zext <16 x i8> %69 to <16 x i16>
  %71 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %70
  %72 = bitcast <32 x i8> %64 to <16 x i16>
  %73 = bitcast <32 x i8> %67 to <16 x i16>
  %74 = shufflevector <16 x i16> %72, <16 x i16> %73, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %75 = shufflevector <16 x i16> %70, <16 x i16> %71, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %76 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %74, <16 x i16> %75) #5
  %77 = add <8 x i32> %76, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %78 = ashr <8 x i32> %77, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %79 = shufflevector <16 x i16> %72, <16 x i16> %73, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %80 = shufflevector <16 x i16> %70, <16 x i16> %71, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %81 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %79, <16 x i16> %80) #5
  %82 = add <8 x i32> %81, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %83 = ashr <8 x i32> %82, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %84 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %78, <8 x i32> %83) #5
  %85 = bitcast <32 x i8> %61 to <16 x i16>
  %86 = sub <16 x i16> %84, %85
  %87 = sub <16 x i16> zeroinitializer, %86
  %88 = icmp slt <16 x i16> %86, zeroinitializer
  %89 = select <16 x i1> %88, <16 x i16> %87, <16 x i16> %86
  %90 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %89, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %91 = add <8 x i32> %90, %58
  %92 = getelementptr inbounds i16, i16* %25, i64 32
  %93 = bitcast i16* %92 to i8*
  %94 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %93) #5
  %95 = getelementptr inbounds i16, i16* %26, i64 32
  %96 = bitcast i16* %95 to i8*
  %97 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %96) #5
  %98 = getelementptr inbounds i16, i16* %27, i64 32
  %99 = bitcast i16* %98 to i8*
  %100 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %99) #5
  %101 = getelementptr inbounds i8, i8* %24, i64 32
  %102 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %101) #5
  %103 = zext <16 x i8> %102 to <16 x i16>
  %104 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %103
  %105 = bitcast <32 x i8> %97 to <16 x i16>
  %106 = bitcast <32 x i8> %100 to <16 x i16>
  %107 = shufflevector <16 x i16> %105, <16 x i16> %106, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %108 = shufflevector <16 x i16> %103, <16 x i16> %104, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %109 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %107, <16 x i16> %108) #5
  %110 = add <8 x i32> %109, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %111 = ashr <8 x i32> %110, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %112 = shufflevector <16 x i16> %105, <16 x i16> %106, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %113 = shufflevector <16 x i16> %103, <16 x i16> %104, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %114 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %112, <16 x i16> %113) #5
  %115 = add <8 x i32> %114, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %116 = ashr <8 x i32> %115, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %117 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %111, <8 x i32> %116) #5
  %118 = bitcast <32 x i8> %94 to <16 x i16>
  %119 = sub <16 x i16> %117, %118
  %120 = sub <16 x i16> zeroinitializer, %119
  %121 = icmp slt <16 x i16> %119, zeroinitializer
  %122 = select <16 x i1> %121, <16 x i16> %120, <16 x i16> %119
  %123 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %122, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %124 = add <8 x i32> %123, %91
  %125 = getelementptr inbounds i16, i16* %25, i64 48
  %126 = bitcast i16* %125 to i8*
  %127 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %126) #5
  %128 = getelementptr inbounds i16, i16* %26, i64 48
  %129 = bitcast i16* %128 to i8*
  %130 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %129) #5
  %131 = getelementptr inbounds i16, i16* %27, i64 48
  %132 = bitcast i16* %131 to i8*
  %133 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %132) #5
  %134 = getelementptr inbounds i8, i8* %24, i64 48
  %135 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %134) #5
  %136 = zext <16 x i8> %135 to <16 x i16>
  %137 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %136
  %138 = bitcast <32 x i8> %130 to <16 x i16>
  %139 = bitcast <32 x i8> %133 to <16 x i16>
  %140 = shufflevector <16 x i16> %138, <16 x i16> %139, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %141 = shufflevector <16 x i16> %136, <16 x i16> %137, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %142 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %140, <16 x i16> %141) #5
  %143 = add <8 x i32> %142, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %144 = ashr <8 x i32> %143, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %145 = shufflevector <16 x i16> %138, <16 x i16> %139, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %146 = shufflevector <16 x i16> %136, <16 x i16> %137, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %147 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %145, <16 x i16> %146) #5
  %148 = add <8 x i32> %147, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %149 = ashr <8 x i32> %148, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %150 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %144, <8 x i32> %149) #5
  %151 = bitcast <32 x i8> %127 to <16 x i16>
  %152 = sub <16 x i16> %150, %151
  %153 = sub <16 x i16> zeroinitializer, %152
  %154 = icmp slt <16 x i16> %152, zeroinitializer
  %155 = select <16 x i1> %154, <16 x i16> %153, <16 x i16> %152
  %156 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %155, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %157 = add <8 x i32> %156, %124
  %158 = getelementptr inbounds i16, i16* %25, i64 %20
  %159 = getelementptr inbounds i16, i16* %26, i64 %21
  %160 = getelementptr inbounds i16, i16* %27, i64 64
  %161 = getelementptr inbounds i8, i8* %24, i64 %22
  %162 = add nuw nsw i32 %28, 1
  %163 = icmp eq i32 %162, 32
  br i1 %163, label %164, label %23

164:                                              ; preds = %23
  %165 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %157, <8 x i32> %157) #5
  %166 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %165, <8 x i32> %165) #5
  br label %324

167:                                              ; preds = %8
  %168 = ptrtoint i8* %2 to i64
  %169 = shl i64 %168, 1
  %170 = inttoptr i64 %169 to i16*
  %171 = ptrtoint i8* %4 to i64
  %172 = shl i64 %171, 1
  %173 = inttoptr i64 %172 to i16*
  %174 = ptrtoint i8* %0 to i64
  %175 = shl i64 %174, 1
  %176 = inttoptr i64 %175 to i16*
  %177 = sext i32 %1 to i64
  %178 = sext i32 %3 to i64
  %179 = sext i32 %6 to i64
  br label %180

180:                                              ; preds = %180, %167
  %181 = phi i8* [ %5, %167 ], [ %318, %180 ]
  %182 = phi i16* [ %176, %167 ], [ %315, %180 ]
  %183 = phi i16* [ %173, %167 ], [ %316, %180 ]
  %184 = phi i16* [ %170, %167 ], [ %317, %180 ]
  %185 = phi i32 [ 0, %167 ], [ %319, %180 ]
  %186 = phi <8 x i32> [ zeroinitializer, %167 ], [ %314, %180 ]
  %187 = bitcast i16* %182 to i8*
  %188 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %187) #5
  %189 = bitcast i16* %183 to i8*
  %190 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %189) #5
  %191 = bitcast i16* %184 to i8*
  %192 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %191) #5
  %193 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %181) #5
  %194 = zext <16 x i8> %193 to <16 x i16>
  %195 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %194
  %196 = bitcast <32 x i8> %190 to <16 x i16>
  %197 = bitcast <32 x i8> %192 to <16 x i16>
  %198 = shufflevector <16 x i16> %196, <16 x i16> %197, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %199 = shufflevector <16 x i16> %194, <16 x i16> %195, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %200 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %198, <16 x i16> %199) #5
  %201 = add <8 x i32> %200, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %202 = ashr <8 x i32> %201, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %203 = shufflevector <16 x i16> %196, <16 x i16> %197, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %204 = shufflevector <16 x i16> %194, <16 x i16> %195, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %205 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %203, <16 x i16> %204) #5
  %206 = add <8 x i32> %205, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %207 = ashr <8 x i32> %206, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %208 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %202, <8 x i32> %207) #5
  %209 = bitcast <32 x i8> %188 to <16 x i16>
  %210 = sub <16 x i16> %208, %209
  %211 = sub <16 x i16> zeroinitializer, %210
  %212 = icmp slt <16 x i16> %210, zeroinitializer
  %213 = select <16 x i1> %212, <16 x i16> %211, <16 x i16> %210
  %214 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %213, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %215 = add <8 x i32> %214, %186
  %216 = getelementptr inbounds i16, i16* %182, i64 16
  %217 = bitcast i16* %216 to i8*
  %218 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %217) #5
  %219 = getelementptr inbounds i16, i16* %183, i64 16
  %220 = bitcast i16* %219 to i8*
  %221 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %220) #5
  %222 = getelementptr inbounds i16, i16* %184, i64 16
  %223 = bitcast i16* %222 to i8*
  %224 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %223) #5
  %225 = getelementptr inbounds i8, i8* %181, i64 16
  %226 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %225) #5
  %227 = zext <16 x i8> %226 to <16 x i16>
  %228 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %227
  %229 = bitcast <32 x i8> %221 to <16 x i16>
  %230 = bitcast <32 x i8> %224 to <16 x i16>
  %231 = shufflevector <16 x i16> %229, <16 x i16> %230, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %232 = shufflevector <16 x i16> %227, <16 x i16> %228, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %233 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %231, <16 x i16> %232) #5
  %234 = add <8 x i32> %233, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %235 = ashr <8 x i32> %234, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %236 = shufflevector <16 x i16> %229, <16 x i16> %230, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %237 = shufflevector <16 x i16> %227, <16 x i16> %228, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %238 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %236, <16 x i16> %237) #5
  %239 = add <8 x i32> %238, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %240 = ashr <8 x i32> %239, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %241 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %235, <8 x i32> %240) #5
  %242 = bitcast <32 x i8> %218 to <16 x i16>
  %243 = sub <16 x i16> %241, %242
  %244 = sub <16 x i16> zeroinitializer, %243
  %245 = icmp slt <16 x i16> %243, zeroinitializer
  %246 = select <16 x i1> %245, <16 x i16> %244, <16 x i16> %243
  %247 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %246, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %248 = add <8 x i32> %247, %215
  %249 = getelementptr inbounds i16, i16* %182, i64 32
  %250 = bitcast i16* %249 to i8*
  %251 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %250) #5
  %252 = getelementptr inbounds i16, i16* %183, i64 32
  %253 = bitcast i16* %252 to i8*
  %254 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %253) #5
  %255 = getelementptr inbounds i16, i16* %184, i64 32
  %256 = bitcast i16* %255 to i8*
  %257 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %256) #5
  %258 = getelementptr inbounds i8, i8* %181, i64 32
  %259 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %258) #5
  %260 = zext <16 x i8> %259 to <16 x i16>
  %261 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %260
  %262 = bitcast <32 x i8> %254 to <16 x i16>
  %263 = bitcast <32 x i8> %257 to <16 x i16>
  %264 = shufflevector <16 x i16> %262, <16 x i16> %263, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %265 = shufflevector <16 x i16> %260, <16 x i16> %261, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %266 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %264, <16 x i16> %265) #5
  %267 = add <8 x i32> %266, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %268 = ashr <8 x i32> %267, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %269 = shufflevector <16 x i16> %262, <16 x i16> %263, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %270 = shufflevector <16 x i16> %260, <16 x i16> %261, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %271 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %269, <16 x i16> %270) #5
  %272 = add <8 x i32> %271, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %273 = ashr <8 x i32> %272, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %274 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %268, <8 x i32> %273) #5
  %275 = bitcast <32 x i8> %251 to <16 x i16>
  %276 = sub <16 x i16> %274, %275
  %277 = sub <16 x i16> zeroinitializer, %276
  %278 = icmp slt <16 x i16> %276, zeroinitializer
  %279 = select <16 x i1> %278, <16 x i16> %277, <16 x i16> %276
  %280 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %279, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %281 = add <8 x i32> %280, %248
  %282 = getelementptr inbounds i16, i16* %182, i64 48
  %283 = bitcast i16* %282 to i8*
  %284 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %283) #5
  %285 = getelementptr inbounds i16, i16* %183, i64 48
  %286 = bitcast i16* %285 to i8*
  %287 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %286) #5
  %288 = getelementptr inbounds i16, i16* %184, i64 48
  %289 = bitcast i16* %288 to i8*
  %290 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %289) #5
  %291 = getelementptr inbounds i8, i8* %181, i64 48
  %292 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %291) #5
  %293 = zext <16 x i8> %292 to <16 x i16>
  %294 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %293
  %295 = bitcast <32 x i8> %287 to <16 x i16>
  %296 = bitcast <32 x i8> %290 to <16 x i16>
  %297 = shufflevector <16 x i16> %295, <16 x i16> %296, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %298 = shufflevector <16 x i16> %293, <16 x i16> %294, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %299 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %297, <16 x i16> %298) #5
  %300 = add <8 x i32> %299, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %301 = ashr <8 x i32> %300, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %302 = shufflevector <16 x i16> %295, <16 x i16> %296, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %303 = shufflevector <16 x i16> %293, <16 x i16> %294, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %304 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %302, <16 x i16> %303) #5
  %305 = add <8 x i32> %304, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %306 = ashr <8 x i32> %305, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %307 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %301, <8 x i32> %306) #5
  %308 = bitcast <32 x i8> %284 to <16 x i16>
  %309 = sub <16 x i16> %307, %308
  %310 = sub <16 x i16> zeroinitializer, %309
  %311 = icmp slt <16 x i16> %309, zeroinitializer
  %312 = select <16 x i1> %311, <16 x i16> %310, <16 x i16> %309
  %313 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %312, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %314 = add <8 x i32> %313, %281
  %315 = getelementptr inbounds i16, i16* %182, i64 %177
  %316 = getelementptr inbounds i16, i16* %183, i64 64
  %317 = getelementptr inbounds i16, i16* %184, i64 %178
  %318 = getelementptr inbounds i8, i8* %181, i64 %179
  %319 = add nuw nsw i32 %185, 1
  %320 = icmp eq i32 %319, 32
  br i1 %320, label %321, label %180

321:                                              ; preds = %180
  %322 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %314, <8 x i32> %314) #5
  %323 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %322, <8 x i32> %322) #5
  br label %324

324:                                              ; preds = %164, %321
  %325 = phi <8 x i32> [ %166, %164 ], [ %323, %321 ]
  %326 = extractelement <8 x i32> %325, i64 0
  %327 = extractelement <8 x i32> %325, i64 4
  %328 = add nsw i32 %326, %327
  ret i32 %328
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_masked_sad64x64_avx2(i8*, i32, i8*, i32, i8*, i8*, i32, i32) local_unnamed_addr #1 {
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %10, label %167

10:                                               ; preds = %8
  %11 = ptrtoint i8* %4 to i64
  %12 = shl i64 %11, 1
  %13 = inttoptr i64 %12 to i16*
  %14 = ptrtoint i8* %2 to i64
  %15 = shl i64 %14, 1
  %16 = inttoptr i64 %15 to i16*
  %17 = ptrtoint i8* %0 to i64
  %18 = shl i64 %17, 1
  %19 = inttoptr i64 %18 to i16*
  %20 = sext i32 %1 to i64
  %21 = sext i32 %3 to i64
  %22 = sext i32 %6 to i64
  br label %23

23:                                               ; preds = %23, %10
  %24 = phi i8* [ %5, %10 ], [ %161, %23 ]
  %25 = phi i16* [ %19, %10 ], [ %158, %23 ]
  %26 = phi i16* [ %16, %10 ], [ %159, %23 ]
  %27 = phi i16* [ %13, %10 ], [ %160, %23 ]
  %28 = phi i32 [ 0, %10 ], [ %162, %23 ]
  %29 = phi <8 x i32> [ zeroinitializer, %10 ], [ %157, %23 ]
  %30 = bitcast i16* %25 to i8*
  %31 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %30) #5
  %32 = bitcast i16* %26 to i8*
  %33 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %32) #5
  %34 = bitcast i16* %27 to i8*
  %35 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %34) #5
  %36 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %24) #5
  %37 = zext <16 x i8> %36 to <16 x i16>
  %38 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %37
  %39 = bitcast <32 x i8> %33 to <16 x i16>
  %40 = bitcast <32 x i8> %35 to <16 x i16>
  %41 = shufflevector <16 x i16> %39, <16 x i16> %40, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %42 = shufflevector <16 x i16> %37, <16 x i16> %38, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %43 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %41, <16 x i16> %42) #5
  %44 = add <8 x i32> %43, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %45 = ashr <8 x i32> %44, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %46 = shufflevector <16 x i16> %39, <16 x i16> %40, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %47 = shufflevector <16 x i16> %37, <16 x i16> %38, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %48 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %46, <16 x i16> %47) #5
  %49 = add <8 x i32> %48, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %50 = ashr <8 x i32> %49, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %51 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %45, <8 x i32> %50) #5
  %52 = bitcast <32 x i8> %31 to <16 x i16>
  %53 = sub <16 x i16> %51, %52
  %54 = sub <16 x i16> zeroinitializer, %53
  %55 = icmp slt <16 x i16> %53, zeroinitializer
  %56 = select <16 x i1> %55, <16 x i16> %54, <16 x i16> %53
  %57 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %56, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %58 = add <8 x i32> %57, %29
  %59 = getelementptr inbounds i16, i16* %25, i64 16
  %60 = bitcast i16* %59 to i8*
  %61 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %60) #5
  %62 = getelementptr inbounds i16, i16* %26, i64 16
  %63 = bitcast i16* %62 to i8*
  %64 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %63) #5
  %65 = getelementptr inbounds i16, i16* %27, i64 16
  %66 = bitcast i16* %65 to i8*
  %67 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %66) #5
  %68 = getelementptr inbounds i8, i8* %24, i64 16
  %69 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %68) #5
  %70 = zext <16 x i8> %69 to <16 x i16>
  %71 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %70
  %72 = bitcast <32 x i8> %64 to <16 x i16>
  %73 = bitcast <32 x i8> %67 to <16 x i16>
  %74 = shufflevector <16 x i16> %72, <16 x i16> %73, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %75 = shufflevector <16 x i16> %70, <16 x i16> %71, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %76 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %74, <16 x i16> %75) #5
  %77 = add <8 x i32> %76, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %78 = ashr <8 x i32> %77, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %79 = shufflevector <16 x i16> %72, <16 x i16> %73, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %80 = shufflevector <16 x i16> %70, <16 x i16> %71, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %81 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %79, <16 x i16> %80) #5
  %82 = add <8 x i32> %81, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %83 = ashr <8 x i32> %82, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %84 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %78, <8 x i32> %83) #5
  %85 = bitcast <32 x i8> %61 to <16 x i16>
  %86 = sub <16 x i16> %84, %85
  %87 = sub <16 x i16> zeroinitializer, %86
  %88 = icmp slt <16 x i16> %86, zeroinitializer
  %89 = select <16 x i1> %88, <16 x i16> %87, <16 x i16> %86
  %90 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %89, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %91 = add <8 x i32> %90, %58
  %92 = getelementptr inbounds i16, i16* %25, i64 32
  %93 = bitcast i16* %92 to i8*
  %94 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %93) #5
  %95 = getelementptr inbounds i16, i16* %26, i64 32
  %96 = bitcast i16* %95 to i8*
  %97 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %96) #5
  %98 = getelementptr inbounds i16, i16* %27, i64 32
  %99 = bitcast i16* %98 to i8*
  %100 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %99) #5
  %101 = getelementptr inbounds i8, i8* %24, i64 32
  %102 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %101) #5
  %103 = zext <16 x i8> %102 to <16 x i16>
  %104 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %103
  %105 = bitcast <32 x i8> %97 to <16 x i16>
  %106 = bitcast <32 x i8> %100 to <16 x i16>
  %107 = shufflevector <16 x i16> %105, <16 x i16> %106, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %108 = shufflevector <16 x i16> %103, <16 x i16> %104, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %109 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %107, <16 x i16> %108) #5
  %110 = add <8 x i32> %109, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %111 = ashr <8 x i32> %110, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %112 = shufflevector <16 x i16> %105, <16 x i16> %106, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %113 = shufflevector <16 x i16> %103, <16 x i16> %104, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %114 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %112, <16 x i16> %113) #5
  %115 = add <8 x i32> %114, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %116 = ashr <8 x i32> %115, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %117 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %111, <8 x i32> %116) #5
  %118 = bitcast <32 x i8> %94 to <16 x i16>
  %119 = sub <16 x i16> %117, %118
  %120 = sub <16 x i16> zeroinitializer, %119
  %121 = icmp slt <16 x i16> %119, zeroinitializer
  %122 = select <16 x i1> %121, <16 x i16> %120, <16 x i16> %119
  %123 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %122, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %124 = add <8 x i32> %123, %91
  %125 = getelementptr inbounds i16, i16* %25, i64 48
  %126 = bitcast i16* %125 to i8*
  %127 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %126) #5
  %128 = getelementptr inbounds i16, i16* %26, i64 48
  %129 = bitcast i16* %128 to i8*
  %130 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %129) #5
  %131 = getelementptr inbounds i16, i16* %27, i64 48
  %132 = bitcast i16* %131 to i8*
  %133 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %132) #5
  %134 = getelementptr inbounds i8, i8* %24, i64 48
  %135 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %134) #5
  %136 = zext <16 x i8> %135 to <16 x i16>
  %137 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %136
  %138 = bitcast <32 x i8> %130 to <16 x i16>
  %139 = bitcast <32 x i8> %133 to <16 x i16>
  %140 = shufflevector <16 x i16> %138, <16 x i16> %139, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %141 = shufflevector <16 x i16> %136, <16 x i16> %137, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %142 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %140, <16 x i16> %141) #5
  %143 = add <8 x i32> %142, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %144 = ashr <8 x i32> %143, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %145 = shufflevector <16 x i16> %138, <16 x i16> %139, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %146 = shufflevector <16 x i16> %136, <16 x i16> %137, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %147 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %145, <16 x i16> %146) #5
  %148 = add <8 x i32> %147, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %149 = ashr <8 x i32> %148, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %150 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %144, <8 x i32> %149) #5
  %151 = bitcast <32 x i8> %127 to <16 x i16>
  %152 = sub <16 x i16> %150, %151
  %153 = sub <16 x i16> zeroinitializer, %152
  %154 = icmp slt <16 x i16> %152, zeroinitializer
  %155 = select <16 x i1> %154, <16 x i16> %153, <16 x i16> %152
  %156 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %155, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %157 = add <8 x i32> %156, %124
  %158 = getelementptr inbounds i16, i16* %25, i64 %20
  %159 = getelementptr inbounds i16, i16* %26, i64 %21
  %160 = getelementptr inbounds i16, i16* %27, i64 64
  %161 = getelementptr inbounds i8, i8* %24, i64 %22
  %162 = add nuw nsw i32 %28, 1
  %163 = icmp eq i32 %162, 64
  br i1 %163, label %164, label %23

164:                                              ; preds = %23
  %165 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %157, <8 x i32> %157) #5
  %166 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %165, <8 x i32> %165) #5
  br label %324

167:                                              ; preds = %8
  %168 = ptrtoint i8* %2 to i64
  %169 = shl i64 %168, 1
  %170 = inttoptr i64 %169 to i16*
  %171 = ptrtoint i8* %4 to i64
  %172 = shl i64 %171, 1
  %173 = inttoptr i64 %172 to i16*
  %174 = ptrtoint i8* %0 to i64
  %175 = shl i64 %174, 1
  %176 = inttoptr i64 %175 to i16*
  %177 = sext i32 %1 to i64
  %178 = sext i32 %3 to i64
  %179 = sext i32 %6 to i64
  br label %180

180:                                              ; preds = %180, %167
  %181 = phi i8* [ %5, %167 ], [ %318, %180 ]
  %182 = phi i16* [ %176, %167 ], [ %315, %180 ]
  %183 = phi i16* [ %173, %167 ], [ %316, %180 ]
  %184 = phi i16* [ %170, %167 ], [ %317, %180 ]
  %185 = phi i32 [ 0, %167 ], [ %319, %180 ]
  %186 = phi <8 x i32> [ zeroinitializer, %167 ], [ %314, %180 ]
  %187 = bitcast i16* %182 to i8*
  %188 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %187) #5
  %189 = bitcast i16* %183 to i8*
  %190 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %189) #5
  %191 = bitcast i16* %184 to i8*
  %192 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %191) #5
  %193 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %181) #5
  %194 = zext <16 x i8> %193 to <16 x i16>
  %195 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %194
  %196 = bitcast <32 x i8> %190 to <16 x i16>
  %197 = bitcast <32 x i8> %192 to <16 x i16>
  %198 = shufflevector <16 x i16> %196, <16 x i16> %197, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %199 = shufflevector <16 x i16> %194, <16 x i16> %195, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %200 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %198, <16 x i16> %199) #5
  %201 = add <8 x i32> %200, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %202 = ashr <8 x i32> %201, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %203 = shufflevector <16 x i16> %196, <16 x i16> %197, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %204 = shufflevector <16 x i16> %194, <16 x i16> %195, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %205 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %203, <16 x i16> %204) #5
  %206 = add <8 x i32> %205, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %207 = ashr <8 x i32> %206, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %208 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %202, <8 x i32> %207) #5
  %209 = bitcast <32 x i8> %188 to <16 x i16>
  %210 = sub <16 x i16> %208, %209
  %211 = sub <16 x i16> zeroinitializer, %210
  %212 = icmp slt <16 x i16> %210, zeroinitializer
  %213 = select <16 x i1> %212, <16 x i16> %211, <16 x i16> %210
  %214 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %213, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %215 = add <8 x i32> %214, %186
  %216 = getelementptr inbounds i16, i16* %182, i64 16
  %217 = bitcast i16* %216 to i8*
  %218 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %217) #5
  %219 = getelementptr inbounds i16, i16* %183, i64 16
  %220 = bitcast i16* %219 to i8*
  %221 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %220) #5
  %222 = getelementptr inbounds i16, i16* %184, i64 16
  %223 = bitcast i16* %222 to i8*
  %224 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %223) #5
  %225 = getelementptr inbounds i8, i8* %181, i64 16
  %226 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %225) #5
  %227 = zext <16 x i8> %226 to <16 x i16>
  %228 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %227
  %229 = bitcast <32 x i8> %221 to <16 x i16>
  %230 = bitcast <32 x i8> %224 to <16 x i16>
  %231 = shufflevector <16 x i16> %229, <16 x i16> %230, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %232 = shufflevector <16 x i16> %227, <16 x i16> %228, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %233 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %231, <16 x i16> %232) #5
  %234 = add <8 x i32> %233, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %235 = ashr <8 x i32> %234, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %236 = shufflevector <16 x i16> %229, <16 x i16> %230, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %237 = shufflevector <16 x i16> %227, <16 x i16> %228, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %238 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %236, <16 x i16> %237) #5
  %239 = add <8 x i32> %238, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %240 = ashr <8 x i32> %239, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %241 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %235, <8 x i32> %240) #5
  %242 = bitcast <32 x i8> %218 to <16 x i16>
  %243 = sub <16 x i16> %241, %242
  %244 = sub <16 x i16> zeroinitializer, %243
  %245 = icmp slt <16 x i16> %243, zeroinitializer
  %246 = select <16 x i1> %245, <16 x i16> %244, <16 x i16> %243
  %247 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %246, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %248 = add <8 x i32> %247, %215
  %249 = getelementptr inbounds i16, i16* %182, i64 32
  %250 = bitcast i16* %249 to i8*
  %251 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %250) #5
  %252 = getelementptr inbounds i16, i16* %183, i64 32
  %253 = bitcast i16* %252 to i8*
  %254 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %253) #5
  %255 = getelementptr inbounds i16, i16* %184, i64 32
  %256 = bitcast i16* %255 to i8*
  %257 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %256) #5
  %258 = getelementptr inbounds i8, i8* %181, i64 32
  %259 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %258) #5
  %260 = zext <16 x i8> %259 to <16 x i16>
  %261 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %260
  %262 = bitcast <32 x i8> %254 to <16 x i16>
  %263 = bitcast <32 x i8> %257 to <16 x i16>
  %264 = shufflevector <16 x i16> %262, <16 x i16> %263, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %265 = shufflevector <16 x i16> %260, <16 x i16> %261, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %266 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %264, <16 x i16> %265) #5
  %267 = add <8 x i32> %266, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %268 = ashr <8 x i32> %267, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %269 = shufflevector <16 x i16> %262, <16 x i16> %263, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %270 = shufflevector <16 x i16> %260, <16 x i16> %261, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %271 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %269, <16 x i16> %270) #5
  %272 = add <8 x i32> %271, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %273 = ashr <8 x i32> %272, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %274 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %268, <8 x i32> %273) #5
  %275 = bitcast <32 x i8> %251 to <16 x i16>
  %276 = sub <16 x i16> %274, %275
  %277 = sub <16 x i16> zeroinitializer, %276
  %278 = icmp slt <16 x i16> %276, zeroinitializer
  %279 = select <16 x i1> %278, <16 x i16> %277, <16 x i16> %276
  %280 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %279, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %281 = add <8 x i32> %280, %248
  %282 = getelementptr inbounds i16, i16* %182, i64 48
  %283 = bitcast i16* %282 to i8*
  %284 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %283) #5
  %285 = getelementptr inbounds i16, i16* %183, i64 48
  %286 = bitcast i16* %285 to i8*
  %287 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %286) #5
  %288 = getelementptr inbounds i16, i16* %184, i64 48
  %289 = bitcast i16* %288 to i8*
  %290 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %289) #5
  %291 = getelementptr inbounds i8, i8* %181, i64 48
  %292 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %291) #5
  %293 = zext <16 x i8> %292 to <16 x i16>
  %294 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %293
  %295 = bitcast <32 x i8> %287 to <16 x i16>
  %296 = bitcast <32 x i8> %290 to <16 x i16>
  %297 = shufflevector <16 x i16> %295, <16 x i16> %296, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %298 = shufflevector <16 x i16> %293, <16 x i16> %294, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %299 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %297, <16 x i16> %298) #5
  %300 = add <8 x i32> %299, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %301 = ashr <8 x i32> %300, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %302 = shufflevector <16 x i16> %295, <16 x i16> %296, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %303 = shufflevector <16 x i16> %293, <16 x i16> %294, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %304 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %302, <16 x i16> %303) #5
  %305 = add <8 x i32> %304, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %306 = ashr <8 x i32> %305, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %307 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %301, <8 x i32> %306) #5
  %308 = bitcast <32 x i8> %284 to <16 x i16>
  %309 = sub <16 x i16> %307, %308
  %310 = sub <16 x i16> zeroinitializer, %309
  %311 = icmp slt <16 x i16> %309, zeroinitializer
  %312 = select <16 x i1> %311, <16 x i16> %310, <16 x i16> %309
  %313 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %312, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %314 = add <8 x i32> %313, %281
  %315 = getelementptr inbounds i16, i16* %182, i64 %177
  %316 = getelementptr inbounds i16, i16* %183, i64 64
  %317 = getelementptr inbounds i16, i16* %184, i64 %178
  %318 = getelementptr inbounds i8, i8* %181, i64 %179
  %319 = add nuw nsw i32 %185, 1
  %320 = icmp eq i32 %319, 64
  br i1 %320, label %321, label %180

321:                                              ; preds = %180
  %322 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %314, <8 x i32> %314) #5
  %323 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %322, <8 x i32> %322) #5
  br label %324

324:                                              ; preds = %164, %321
  %325 = phi <8 x i32> [ %166, %164 ], [ %323, %321 ]
  %326 = extractelement <8 x i32> %325, i64 0
  %327 = extractelement <8 x i32> %325, i64 4
  %328 = add nsw i32 %326, %327
  ret i32 %328
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_masked_sad64x128_avx2(i8*, i32, i8*, i32, i8*, i8*, i32, i32) local_unnamed_addr #1 {
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %10, label %167

10:                                               ; preds = %8
  %11 = ptrtoint i8* %4 to i64
  %12 = shl i64 %11, 1
  %13 = inttoptr i64 %12 to i16*
  %14 = ptrtoint i8* %2 to i64
  %15 = shl i64 %14, 1
  %16 = inttoptr i64 %15 to i16*
  %17 = ptrtoint i8* %0 to i64
  %18 = shl i64 %17, 1
  %19 = inttoptr i64 %18 to i16*
  %20 = sext i32 %1 to i64
  %21 = sext i32 %3 to i64
  %22 = sext i32 %6 to i64
  br label %23

23:                                               ; preds = %23, %10
  %24 = phi i8* [ %5, %10 ], [ %161, %23 ]
  %25 = phi i16* [ %19, %10 ], [ %158, %23 ]
  %26 = phi i16* [ %16, %10 ], [ %159, %23 ]
  %27 = phi i16* [ %13, %10 ], [ %160, %23 ]
  %28 = phi i32 [ 0, %10 ], [ %162, %23 ]
  %29 = phi <8 x i32> [ zeroinitializer, %10 ], [ %157, %23 ]
  %30 = bitcast i16* %25 to i8*
  %31 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %30) #5
  %32 = bitcast i16* %26 to i8*
  %33 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %32) #5
  %34 = bitcast i16* %27 to i8*
  %35 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %34) #5
  %36 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %24) #5
  %37 = zext <16 x i8> %36 to <16 x i16>
  %38 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %37
  %39 = bitcast <32 x i8> %33 to <16 x i16>
  %40 = bitcast <32 x i8> %35 to <16 x i16>
  %41 = shufflevector <16 x i16> %39, <16 x i16> %40, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %42 = shufflevector <16 x i16> %37, <16 x i16> %38, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %43 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %41, <16 x i16> %42) #5
  %44 = add <8 x i32> %43, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %45 = ashr <8 x i32> %44, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %46 = shufflevector <16 x i16> %39, <16 x i16> %40, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %47 = shufflevector <16 x i16> %37, <16 x i16> %38, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %48 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %46, <16 x i16> %47) #5
  %49 = add <8 x i32> %48, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %50 = ashr <8 x i32> %49, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %51 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %45, <8 x i32> %50) #5
  %52 = bitcast <32 x i8> %31 to <16 x i16>
  %53 = sub <16 x i16> %51, %52
  %54 = sub <16 x i16> zeroinitializer, %53
  %55 = icmp slt <16 x i16> %53, zeroinitializer
  %56 = select <16 x i1> %55, <16 x i16> %54, <16 x i16> %53
  %57 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %56, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %58 = add <8 x i32> %57, %29
  %59 = getelementptr inbounds i16, i16* %25, i64 16
  %60 = bitcast i16* %59 to i8*
  %61 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %60) #5
  %62 = getelementptr inbounds i16, i16* %26, i64 16
  %63 = bitcast i16* %62 to i8*
  %64 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %63) #5
  %65 = getelementptr inbounds i16, i16* %27, i64 16
  %66 = bitcast i16* %65 to i8*
  %67 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %66) #5
  %68 = getelementptr inbounds i8, i8* %24, i64 16
  %69 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %68) #5
  %70 = zext <16 x i8> %69 to <16 x i16>
  %71 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %70
  %72 = bitcast <32 x i8> %64 to <16 x i16>
  %73 = bitcast <32 x i8> %67 to <16 x i16>
  %74 = shufflevector <16 x i16> %72, <16 x i16> %73, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %75 = shufflevector <16 x i16> %70, <16 x i16> %71, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %76 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %74, <16 x i16> %75) #5
  %77 = add <8 x i32> %76, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %78 = ashr <8 x i32> %77, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %79 = shufflevector <16 x i16> %72, <16 x i16> %73, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %80 = shufflevector <16 x i16> %70, <16 x i16> %71, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %81 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %79, <16 x i16> %80) #5
  %82 = add <8 x i32> %81, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %83 = ashr <8 x i32> %82, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %84 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %78, <8 x i32> %83) #5
  %85 = bitcast <32 x i8> %61 to <16 x i16>
  %86 = sub <16 x i16> %84, %85
  %87 = sub <16 x i16> zeroinitializer, %86
  %88 = icmp slt <16 x i16> %86, zeroinitializer
  %89 = select <16 x i1> %88, <16 x i16> %87, <16 x i16> %86
  %90 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %89, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %91 = add <8 x i32> %90, %58
  %92 = getelementptr inbounds i16, i16* %25, i64 32
  %93 = bitcast i16* %92 to i8*
  %94 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %93) #5
  %95 = getelementptr inbounds i16, i16* %26, i64 32
  %96 = bitcast i16* %95 to i8*
  %97 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %96) #5
  %98 = getelementptr inbounds i16, i16* %27, i64 32
  %99 = bitcast i16* %98 to i8*
  %100 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %99) #5
  %101 = getelementptr inbounds i8, i8* %24, i64 32
  %102 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %101) #5
  %103 = zext <16 x i8> %102 to <16 x i16>
  %104 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %103
  %105 = bitcast <32 x i8> %97 to <16 x i16>
  %106 = bitcast <32 x i8> %100 to <16 x i16>
  %107 = shufflevector <16 x i16> %105, <16 x i16> %106, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %108 = shufflevector <16 x i16> %103, <16 x i16> %104, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %109 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %107, <16 x i16> %108) #5
  %110 = add <8 x i32> %109, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %111 = ashr <8 x i32> %110, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %112 = shufflevector <16 x i16> %105, <16 x i16> %106, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %113 = shufflevector <16 x i16> %103, <16 x i16> %104, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %114 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %112, <16 x i16> %113) #5
  %115 = add <8 x i32> %114, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %116 = ashr <8 x i32> %115, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %117 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %111, <8 x i32> %116) #5
  %118 = bitcast <32 x i8> %94 to <16 x i16>
  %119 = sub <16 x i16> %117, %118
  %120 = sub <16 x i16> zeroinitializer, %119
  %121 = icmp slt <16 x i16> %119, zeroinitializer
  %122 = select <16 x i1> %121, <16 x i16> %120, <16 x i16> %119
  %123 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %122, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %124 = add <8 x i32> %123, %91
  %125 = getelementptr inbounds i16, i16* %25, i64 48
  %126 = bitcast i16* %125 to i8*
  %127 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %126) #5
  %128 = getelementptr inbounds i16, i16* %26, i64 48
  %129 = bitcast i16* %128 to i8*
  %130 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %129) #5
  %131 = getelementptr inbounds i16, i16* %27, i64 48
  %132 = bitcast i16* %131 to i8*
  %133 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %132) #5
  %134 = getelementptr inbounds i8, i8* %24, i64 48
  %135 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %134) #5
  %136 = zext <16 x i8> %135 to <16 x i16>
  %137 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %136
  %138 = bitcast <32 x i8> %130 to <16 x i16>
  %139 = bitcast <32 x i8> %133 to <16 x i16>
  %140 = shufflevector <16 x i16> %138, <16 x i16> %139, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %141 = shufflevector <16 x i16> %136, <16 x i16> %137, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %142 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %140, <16 x i16> %141) #5
  %143 = add <8 x i32> %142, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %144 = ashr <8 x i32> %143, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %145 = shufflevector <16 x i16> %138, <16 x i16> %139, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %146 = shufflevector <16 x i16> %136, <16 x i16> %137, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %147 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %145, <16 x i16> %146) #5
  %148 = add <8 x i32> %147, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %149 = ashr <8 x i32> %148, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %150 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %144, <8 x i32> %149) #5
  %151 = bitcast <32 x i8> %127 to <16 x i16>
  %152 = sub <16 x i16> %150, %151
  %153 = sub <16 x i16> zeroinitializer, %152
  %154 = icmp slt <16 x i16> %152, zeroinitializer
  %155 = select <16 x i1> %154, <16 x i16> %153, <16 x i16> %152
  %156 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %155, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %157 = add <8 x i32> %156, %124
  %158 = getelementptr inbounds i16, i16* %25, i64 %20
  %159 = getelementptr inbounds i16, i16* %26, i64 %21
  %160 = getelementptr inbounds i16, i16* %27, i64 64
  %161 = getelementptr inbounds i8, i8* %24, i64 %22
  %162 = add nuw nsw i32 %28, 1
  %163 = icmp eq i32 %162, 128
  br i1 %163, label %164, label %23

164:                                              ; preds = %23
  %165 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %157, <8 x i32> %157) #5
  %166 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %165, <8 x i32> %165) #5
  br label %324

167:                                              ; preds = %8
  %168 = ptrtoint i8* %2 to i64
  %169 = shl i64 %168, 1
  %170 = inttoptr i64 %169 to i16*
  %171 = ptrtoint i8* %4 to i64
  %172 = shl i64 %171, 1
  %173 = inttoptr i64 %172 to i16*
  %174 = ptrtoint i8* %0 to i64
  %175 = shl i64 %174, 1
  %176 = inttoptr i64 %175 to i16*
  %177 = sext i32 %1 to i64
  %178 = sext i32 %3 to i64
  %179 = sext i32 %6 to i64
  br label %180

180:                                              ; preds = %180, %167
  %181 = phi i8* [ %5, %167 ], [ %318, %180 ]
  %182 = phi i16* [ %176, %167 ], [ %315, %180 ]
  %183 = phi i16* [ %173, %167 ], [ %316, %180 ]
  %184 = phi i16* [ %170, %167 ], [ %317, %180 ]
  %185 = phi i32 [ 0, %167 ], [ %319, %180 ]
  %186 = phi <8 x i32> [ zeroinitializer, %167 ], [ %314, %180 ]
  %187 = bitcast i16* %182 to i8*
  %188 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %187) #5
  %189 = bitcast i16* %183 to i8*
  %190 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %189) #5
  %191 = bitcast i16* %184 to i8*
  %192 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %191) #5
  %193 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %181) #5
  %194 = zext <16 x i8> %193 to <16 x i16>
  %195 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %194
  %196 = bitcast <32 x i8> %190 to <16 x i16>
  %197 = bitcast <32 x i8> %192 to <16 x i16>
  %198 = shufflevector <16 x i16> %196, <16 x i16> %197, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %199 = shufflevector <16 x i16> %194, <16 x i16> %195, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %200 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %198, <16 x i16> %199) #5
  %201 = add <8 x i32> %200, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %202 = ashr <8 x i32> %201, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %203 = shufflevector <16 x i16> %196, <16 x i16> %197, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %204 = shufflevector <16 x i16> %194, <16 x i16> %195, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %205 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %203, <16 x i16> %204) #5
  %206 = add <8 x i32> %205, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %207 = ashr <8 x i32> %206, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %208 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %202, <8 x i32> %207) #5
  %209 = bitcast <32 x i8> %188 to <16 x i16>
  %210 = sub <16 x i16> %208, %209
  %211 = sub <16 x i16> zeroinitializer, %210
  %212 = icmp slt <16 x i16> %210, zeroinitializer
  %213 = select <16 x i1> %212, <16 x i16> %211, <16 x i16> %210
  %214 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %213, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %215 = add <8 x i32> %214, %186
  %216 = getelementptr inbounds i16, i16* %182, i64 16
  %217 = bitcast i16* %216 to i8*
  %218 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %217) #5
  %219 = getelementptr inbounds i16, i16* %183, i64 16
  %220 = bitcast i16* %219 to i8*
  %221 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %220) #5
  %222 = getelementptr inbounds i16, i16* %184, i64 16
  %223 = bitcast i16* %222 to i8*
  %224 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %223) #5
  %225 = getelementptr inbounds i8, i8* %181, i64 16
  %226 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %225) #5
  %227 = zext <16 x i8> %226 to <16 x i16>
  %228 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %227
  %229 = bitcast <32 x i8> %221 to <16 x i16>
  %230 = bitcast <32 x i8> %224 to <16 x i16>
  %231 = shufflevector <16 x i16> %229, <16 x i16> %230, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %232 = shufflevector <16 x i16> %227, <16 x i16> %228, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %233 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %231, <16 x i16> %232) #5
  %234 = add <8 x i32> %233, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %235 = ashr <8 x i32> %234, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %236 = shufflevector <16 x i16> %229, <16 x i16> %230, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %237 = shufflevector <16 x i16> %227, <16 x i16> %228, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %238 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %236, <16 x i16> %237) #5
  %239 = add <8 x i32> %238, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %240 = ashr <8 x i32> %239, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %241 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %235, <8 x i32> %240) #5
  %242 = bitcast <32 x i8> %218 to <16 x i16>
  %243 = sub <16 x i16> %241, %242
  %244 = sub <16 x i16> zeroinitializer, %243
  %245 = icmp slt <16 x i16> %243, zeroinitializer
  %246 = select <16 x i1> %245, <16 x i16> %244, <16 x i16> %243
  %247 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %246, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %248 = add <8 x i32> %247, %215
  %249 = getelementptr inbounds i16, i16* %182, i64 32
  %250 = bitcast i16* %249 to i8*
  %251 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %250) #5
  %252 = getelementptr inbounds i16, i16* %183, i64 32
  %253 = bitcast i16* %252 to i8*
  %254 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %253) #5
  %255 = getelementptr inbounds i16, i16* %184, i64 32
  %256 = bitcast i16* %255 to i8*
  %257 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %256) #5
  %258 = getelementptr inbounds i8, i8* %181, i64 32
  %259 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %258) #5
  %260 = zext <16 x i8> %259 to <16 x i16>
  %261 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %260
  %262 = bitcast <32 x i8> %254 to <16 x i16>
  %263 = bitcast <32 x i8> %257 to <16 x i16>
  %264 = shufflevector <16 x i16> %262, <16 x i16> %263, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %265 = shufflevector <16 x i16> %260, <16 x i16> %261, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %266 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %264, <16 x i16> %265) #5
  %267 = add <8 x i32> %266, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %268 = ashr <8 x i32> %267, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %269 = shufflevector <16 x i16> %262, <16 x i16> %263, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %270 = shufflevector <16 x i16> %260, <16 x i16> %261, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %271 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %269, <16 x i16> %270) #5
  %272 = add <8 x i32> %271, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %273 = ashr <8 x i32> %272, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %274 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %268, <8 x i32> %273) #5
  %275 = bitcast <32 x i8> %251 to <16 x i16>
  %276 = sub <16 x i16> %274, %275
  %277 = sub <16 x i16> zeroinitializer, %276
  %278 = icmp slt <16 x i16> %276, zeroinitializer
  %279 = select <16 x i1> %278, <16 x i16> %277, <16 x i16> %276
  %280 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %279, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %281 = add <8 x i32> %280, %248
  %282 = getelementptr inbounds i16, i16* %182, i64 48
  %283 = bitcast i16* %282 to i8*
  %284 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %283) #5
  %285 = getelementptr inbounds i16, i16* %183, i64 48
  %286 = bitcast i16* %285 to i8*
  %287 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %286) #5
  %288 = getelementptr inbounds i16, i16* %184, i64 48
  %289 = bitcast i16* %288 to i8*
  %290 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %289) #5
  %291 = getelementptr inbounds i8, i8* %181, i64 48
  %292 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %291) #5
  %293 = zext <16 x i8> %292 to <16 x i16>
  %294 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %293
  %295 = bitcast <32 x i8> %287 to <16 x i16>
  %296 = bitcast <32 x i8> %290 to <16 x i16>
  %297 = shufflevector <16 x i16> %295, <16 x i16> %296, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %298 = shufflevector <16 x i16> %293, <16 x i16> %294, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %299 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %297, <16 x i16> %298) #5
  %300 = add <8 x i32> %299, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %301 = ashr <8 x i32> %300, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %302 = shufflevector <16 x i16> %295, <16 x i16> %296, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %303 = shufflevector <16 x i16> %293, <16 x i16> %294, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %304 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %302, <16 x i16> %303) #5
  %305 = add <8 x i32> %304, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %306 = ashr <8 x i32> %305, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %307 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %301, <8 x i32> %306) #5
  %308 = bitcast <32 x i8> %284 to <16 x i16>
  %309 = sub <16 x i16> %307, %308
  %310 = sub <16 x i16> zeroinitializer, %309
  %311 = icmp slt <16 x i16> %309, zeroinitializer
  %312 = select <16 x i1> %311, <16 x i16> %310, <16 x i16> %309
  %313 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %312, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %314 = add <8 x i32> %313, %281
  %315 = getelementptr inbounds i16, i16* %182, i64 %177
  %316 = getelementptr inbounds i16, i16* %183, i64 64
  %317 = getelementptr inbounds i16, i16* %184, i64 %178
  %318 = getelementptr inbounds i8, i8* %181, i64 %179
  %319 = add nuw nsw i32 %185, 1
  %320 = icmp eq i32 %319, 128
  br i1 %320, label %321, label %180

321:                                              ; preds = %180
  %322 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %314, <8 x i32> %314) #5
  %323 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %322, <8 x i32> %322) #5
  br label %324

324:                                              ; preds = %164, %321
  %325 = phi <8 x i32> [ %166, %164 ], [ %323, %321 ]
  %326 = extractelement <8 x i32> %325, i64 0
  %327 = extractelement <8 x i32> %325, i64 4
  %328 = add nsw i32 %326, %327
  ret i32 %328
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_masked_sad128x64_avx2(i8*, i32, i8*, i32, i8*, i8*, i32, i32) local_unnamed_addr #1 {
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %10, label %78

10:                                               ; preds = %8
  %11 = ptrtoint i8* %4 to i64
  %12 = shl i64 %11, 1
  %13 = inttoptr i64 %12 to i16*
  %14 = ptrtoint i8* %2 to i64
  %15 = shl i64 %14, 1
  %16 = inttoptr i64 %15 to i16*
  %17 = ptrtoint i8* %0 to i64
  %18 = shl i64 %17, 1
  %19 = inttoptr i64 %18 to i16*
  %20 = sext i32 %1 to i64
  %21 = sext i32 %3 to i64
  %22 = sext i32 %6 to i64
  br label %23

23:                                               ; preds = %68, %10
  %24 = phi i8* [ %5, %10 ], [ %72, %68 ]
  %25 = phi i16* [ %19, %10 ], [ %69, %68 ]
  %26 = phi i16* [ %16, %10 ], [ %70, %68 ]
  %27 = phi i16* [ %13, %10 ], [ %71, %68 ]
  %28 = phi i32 [ 0, %10 ], [ %73, %68 ]
  %29 = phi <8 x i32> [ zeroinitializer, %10 ], [ %65, %68 ]
  br label %30

30:                                               ; preds = %30, %23
  %31 = phi i64 [ %66, %30 ], [ 0, %23 ]
  %32 = phi <8 x i32> [ %65, %30 ], [ %29, %23 ]
  %33 = getelementptr inbounds i16, i16* %25, i64 %31
  %34 = bitcast i16* %33 to i8*
  %35 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %34) #5
  %36 = getelementptr inbounds i16, i16* %26, i64 %31
  %37 = bitcast i16* %36 to i8*
  %38 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %37) #5
  %39 = getelementptr inbounds i16, i16* %27, i64 %31
  %40 = bitcast i16* %39 to i8*
  %41 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %40) #5
  %42 = getelementptr inbounds i8, i8* %24, i64 %31
  %43 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %42) #5
  %44 = zext <16 x i8> %43 to <16 x i16>
  %45 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %44
  %46 = bitcast <32 x i8> %38 to <16 x i16>
  %47 = bitcast <32 x i8> %41 to <16 x i16>
  %48 = shufflevector <16 x i16> %46, <16 x i16> %47, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %49 = shufflevector <16 x i16> %44, <16 x i16> %45, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %50 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %48, <16 x i16> %49) #5
  %51 = add <8 x i32> %50, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %52 = ashr <8 x i32> %51, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %53 = shufflevector <16 x i16> %46, <16 x i16> %47, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %54 = shufflevector <16 x i16> %44, <16 x i16> %45, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %55 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %53, <16 x i16> %54) #5
  %56 = add <8 x i32> %55, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %57 = ashr <8 x i32> %56, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %58 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %52, <8 x i32> %57) #5
  %59 = bitcast <32 x i8> %35 to <16 x i16>
  %60 = sub <16 x i16> %58, %59
  %61 = sub <16 x i16> zeroinitializer, %60
  %62 = icmp slt <16 x i16> %60, zeroinitializer
  %63 = select <16 x i1> %62, <16 x i16> %61, <16 x i16> %60
  %64 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %63, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %65 = add <8 x i32> %64, %32
  %66 = add nuw nsw i64 %31, 16
  %67 = icmp ult i64 %66, 128
  br i1 %67, label %30, label %68

68:                                               ; preds = %30
  %69 = getelementptr inbounds i16, i16* %25, i64 %20
  %70 = getelementptr inbounds i16, i16* %26, i64 %21
  %71 = getelementptr inbounds i16, i16* %27, i64 128
  %72 = getelementptr inbounds i8, i8* %24, i64 %22
  %73 = add nuw nsw i32 %28, 1
  %74 = icmp eq i32 %73, 64
  br i1 %74, label %75, label %23

75:                                               ; preds = %68
  %76 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %65, <8 x i32> %65) #5
  %77 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %76, <8 x i32> %76) #5
  br label %146

78:                                               ; preds = %8
  %79 = ptrtoint i8* %2 to i64
  %80 = shl i64 %79, 1
  %81 = inttoptr i64 %80 to i16*
  %82 = ptrtoint i8* %4 to i64
  %83 = shl i64 %82, 1
  %84 = inttoptr i64 %83 to i16*
  %85 = ptrtoint i8* %0 to i64
  %86 = shl i64 %85, 1
  %87 = inttoptr i64 %86 to i16*
  %88 = sext i32 %1 to i64
  %89 = sext i32 %3 to i64
  %90 = sext i32 %6 to i64
  br label %91

91:                                               ; preds = %136, %78
  %92 = phi i8* [ %5, %78 ], [ %140, %136 ]
  %93 = phi i16* [ %87, %78 ], [ %137, %136 ]
  %94 = phi i16* [ %84, %78 ], [ %138, %136 ]
  %95 = phi i16* [ %81, %78 ], [ %139, %136 ]
  %96 = phi i32 [ 0, %78 ], [ %141, %136 ]
  %97 = phi <8 x i32> [ zeroinitializer, %78 ], [ %133, %136 ]
  br label %98

98:                                               ; preds = %98, %91
  %99 = phi i64 [ %134, %98 ], [ 0, %91 ]
  %100 = phi <8 x i32> [ %133, %98 ], [ %97, %91 ]
  %101 = getelementptr inbounds i16, i16* %93, i64 %99
  %102 = bitcast i16* %101 to i8*
  %103 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %102) #5
  %104 = getelementptr inbounds i16, i16* %94, i64 %99
  %105 = bitcast i16* %104 to i8*
  %106 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %105) #5
  %107 = getelementptr inbounds i16, i16* %95, i64 %99
  %108 = bitcast i16* %107 to i8*
  %109 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %108) #5
  %110 = getelementptr inbounds i8, i8* %92, i64 %99
  %111 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %110) #5
  %112 = zext <16 x i8> %111 to <16 x i16>
  %113 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %112
  %114 = bitcast <32 x i8> %106 to <16 x i16>
  %115 = bitcast <32 x i8> %109 to <16 x i16>
  %116 = shufflevector <16 x i16> %114, <16 x i16> %115, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %117 = shufflevector <16 x i16> %112, <16 x i16> %113, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %118 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %116, <16 x i16> %117) #5
  %119 = add <8 x i32> %118, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %120 = ashr <8 x i32> %119, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %121 = shufflevector <16 x i16> %114, <16 x i16> %115, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %122 = shufflevector <16 x i16> %112, <16 x i16> %113, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %123 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %121, <16 x i16> %122) #5
  %124 = add <8 x i32> %123, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %125 = ashr <8 x i32> %124, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %126 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %120, <8 x i32> %125) #5
  %127 = bitcast <32 x i8> %103 to <16 x i16>
  %128 = sub <16 x i16> %126, %127
  %129 = sub <16 x i16> zeroinitializer, %128
  %130 = icmp slt <16 x i16> %128, zeroinitializer
  %131 = select <16 x i1> %130, <16 x i16> %129, <16 x i16> %128
  %132 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %131, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %133 = add <8 x i32> %132, %100
  %134 = add nuw nsw i64 %99, 16
  %135 = icmp ult i64 %134, 128
  br i1 %135, label %98, label %136

136:                                              ; preds = %98
  %137 = getelementptr inbounds i16, i16* %93, i64 %88
  %138 = getelementptr inbounds i16, i16* %94, i64 128
  %139 = getelementptr inbounds i16, i16* %95, i64 %89
  %140 = getelementptr inbounds i8, i8* %92, i64 %90
  %141 = add nuw nsw i32 %96, 1
  %142 = icmp eq i32 %141, 64
  br i1 %142, label %143, label %91

143:                                              ; preds = %136
  %144 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %133, <8 x i32> %133) #5
  %145 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %144, <8 x i32> %144) #5
  br label %146

146:                                              ; preds = %75, %143
  %147 = phi <8 x i32> [ %77, %75 ], [ %145, %143 ]
  %148 = extractelement <8 x i32> %147, i64 0
  %149 = extractelement <8 x i32> %147, i64 4
  %150 = add nsw i32 %148, %149
  ret i32 %150
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_masked_sad128x128_avx2(i8*, i32, i8*, i32, i8*, i8*, i32, i32) local_unnamed_addr #1 {
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %10, label %78

10:                                               ; preds = %8
  %11 = ptrtoint i8* %4 to i64
  %12 = shl i64 %11, 1
  %13 = inttoptr i64 %12 to i16*
  %14 = ptrtoint i8* %2 to i64
  %15 = shl i64 %14, 1
  %16 = inttoptr i64 %15 to i16*
  %17 = ptrtoint i8* %0 to i64
  %18 = shl i64 %17, 1
  %19 = inttoptr i64 %18 to i16*
  %20 = sext i32 %1 to i64
  %21 = sext i32 %3 to i64
  %22 = sext i32 %6 to i64
  br label %23

23:                                               ; preds = %68, %10
  %24 = phi i8* [ %5, %10 ], [ %72, %68 ]
  %25 = phi i16* [ %19, %10 ], [ %69, %68 ]
  %26 = phi i16* [ %16, %10 ], [ %70, %68 ]
  %27 = phi i16* [ %13, %10 ], [ %71, %68 ]
  %28 = phi i32 [ 0, %10 ], [ %73, %68 ]
  %29 = phi <8 x i32> [ zeroinitializer, %10 ], [ %65, %68 ]
  br label %30

30:                                               ; preds = %30, %23
  %31 = phi i64 [ %66, %30 ], [ 0, %23 ]
  %32 = phi <8 x i32> [ %65, %30 ], [ %29, %23 ]
  %33 = getelementptr inbounds i16, i16* %25, i64 %31
  %34 = bitcast i16* %33 to i8*
  %35 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %34) #5
  %36 = getelementptr inbounds i16, i16* %26, i64 %31
  %37 = bitcast i16* %36 to i8*
  %38 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %37) #5
  %39 = getelementptr inbounds i16, i16* %27, i64 %31
  %40 = bitcast i16* %39 to i8*
  %41 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %40) #5
  %42 = getelementptr inbounds i8, i8* %24, i64 %31
  %43 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %42) #5
  %44 = zext <16 x i8> %43 to <16 x i16>
  %45 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %44
  %46 = bitcast <32 x i8> %38 to <16 x i16>
  %47 = bitcast <32 x i8> %41 to <16 x i16>
  %48 = shufflevector <16 x i16> %46, <16 x i16> %47, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %49 = shufflevector <16 x i16> %44, <16 x i16> %45, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %50 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %48, <16 x i16> %49) #5
  %51 = add <8 x i32> %50, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %52 = ashr <8 x i32> %51, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %53 = shufflevector <16 x i16> %46, <16 x i16> %47, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %54 = shufflevector <16 x i16> %44, <16 x i16> %45, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %55 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %53, <16 x i16> %54) #5
  %56 = add <8 x i32> %55, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %57 = ashr <8 x i32> %56, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %58 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %52, <8 x i32> %57) #5
  %59 = bitcast <32 x i8> %35 to <16 x i16>
  %60 = sub <16 x i16> %58, %59
  %61 = sub <16 x i16> zeroinitializer, %60
  %62 = icmp slt <16 x i16> %60, zeroinitializer
  %63 = select <16 x i1> %62, <16 x i16> %61, <16 x i16> %60
  %64 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %63, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %65 = add <8 x i32> %64, %32
  %66 = add nuw nsw i64 %31, 16
  %67 = icmp ult i64 %66, 128
  br i1 %67, label %30, label %68

68:                                               ; preds = %30
  %69 = getelementptr inbounds i16, i16* %25, i64 %20
  %70 = getelementptr inbounds i16, i16* %26, i64 %21
  %71 = getelementptr inbounds i16, i16* %27, i64 128
  %72 = getelementptr inbounds i8, i8* %24, i64 %22
  %73 = add nuw nsw i32 %28, 1
  %74 = icmp eq i32 %73, 128
  br i1 %74, label %75, label %23

75:                                               ; preds = %68
  %76 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %65, <8 x i32> %65) #5
  %77 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %76, <8 x i32> %76) #5
  br label %146

78:                                               ; preds = %8
  %79 = ptrtoint i8* %2 to i64
  %80 = shl i64 %79, 1
  %81 = inttoptr i64 %80 to i16*
  %82 = ptrtoint i8* %4 to i64
  %83 = shl i64 %82, 1
  %84 = inttoptr i64 %83 to i16*
  %85 = ptrtoint i8* %0 to i64
  %86 = shl i64 %85, 1
  %87 = inttoptr i64 %86 to i16*
  %88 = sext i32 %1 to i64
  %89 = sext i32 %3 to i64
  %90 = sext i32 %6 to i64
  br label %91

91:                                               ; preds = %136, %78
  %92 = phi i8* [ %5, %78 ], [ %140, %136 ]
  %93 = phi i16* [ %87, %78 ], [ %137, %136 ]
  %94 = phi i16* [ %84, %78 ], [ %138, %136 ]
  %95 = phi i16* [ %81, %78 ], [ %139, %136 ]
  %96 = phi i32 [ 0, %78 ], [ %141, %136 ]
  %97 = phi <8 x i32> [ zeroinitializer, %78 ], [ %133, %136 ]
  br label %98

98:                                               ; preds = %98, %91
  %99 = phi i64 [ %134, %98 ], [ 0, %91 ]
  %100 = phi <8 x i32> [ %133, %98 ], [ %97, %91 ]
  %101 = getelementptr inbounds i16, i16* %93, i64 %99
  %102 = bitcast i16* %101 to i8*
  %103 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %102) #5
  %104 = getelementptr inbounds i16, i16* %94, i64 %99
  %105 = bitcast i16* %104 to i8*
  %106 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %105) #5
  %107 = getelementptr inbounds i16, i16* %95, i64 %99
  %108 = bitcast i16* %107 to i8*
  %109 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %108) #5
  %110 = getelementptr inbounds i8, i8* %92, i64 %99
  %111 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %110) #5
  %112 = zext <16 x i8> %111 to <16 x i16>
  %113 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %112
  %114 = bitcast <32 x i8> %106 to <16 x i16>
  %115 = bitcast <32 x i8> %109 to <16 x i16>
  %116 = shufflevector <16 x i16> %114, <16 x i16> %115, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %117 = shufflevector <16 x i16> %112, <16 x i16> %113, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %118 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %116, <16 x i16> %117) #5
  %119 = add <8 x i32> %118, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %120 = ashr <8 x i32> %119, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %121 = shufflevector <16 x i16> %114, <16 x i16> %115, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %122 = shufflevector <16 x i16> %112, <16 x i16> %113, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %123 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %121, <16 x i16> %122) #5
  %124 = add <8 x i32> %123, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %125 = ashr <8 x i32> %124, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %126 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %120, <8 x i32> %125) #5
  %127 = bitcast <32 x i8> %103 to <16 x i16>
  %128 = sub <16 x i16> %126, %127
  %129 = sub <16 x i16> zeroinitializer, %128
  %130 = icmp slt <16 x i16> %128, zeroinitializer
  %131 = select <16 x i1> %130, <16 x i16> %129, <16 x i16> %128
  %132 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %131, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %133 = add <8 x i32> %132, %100
  %134 = add nuw nsw i64 %99, 16
  %135 = icmp ult i64 %134, 128
  br i1 %135, label %98, label %136

136:                                              ; preds = %98
  %137 = getelementptr inbounds i16, i16* %93, i64 %88
  %138 = getelementptr inbounds i16, i16* %94, i64 128
  %139 = getelementptr inbounds i16, i16* %95, i64 %89
  %140 = getelementptr inbounds i8, i8* %92, i64 %90
  %141 = add nuw nsw i32 %96, 1
  %142 = icmp eq i32 %141, 128
  br i1 %142, label %143, label %91

143:                                              ; preds = %136
  %144 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %133, <8 x i32> %133) #5
  %145 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %144, <8 x i32> %144) #5
  br label %146

146:                                              ; preds = %75, %143
  %147 = phi <8 x i32> [ %77, %75 ], [ %145, %143 ]
  %148 = extractelement <8 x i32> %147, i64 0
  %149 = extractelement <8 x i32> %147, i64 4
  %150 = add nsw i32 %148, %149
  ret i32 %150
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @aom_highbd_masked_sad4x16_avx2(i8*, i32, i8*, i32, i8*, i8*, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %10, label %12

10:                                               ; preds = %8
  %11 = tail call i32 @aom_highbd_masked_sad4xh_ssse3(i8* %0, i32 %1, i8* %2, i32 %3, i8* %4, i32 4, i8* %5, i32 %6, i32 16) #5
  br label %14

12:                                               ; preds = %8
  %13 = tail call i32 @aom_highbd_masked_sad4xh_ssse3(i8* %0, i32 %1, i8* %4, i32 4, i8* %2, i32 %3, i8* %5, i32 %6, i32 16) #5
  br label %14

14:                                               ; preds = %10, %12
  %15 = phi i32 [ %13, %12 ], [ %11, %10 ]
  ret i32 %15
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_masked_sad16x4_avx2(i8*, i32, i8*, i32, i8*, i8*, i32, i32) local_unnamed_addr #1 {
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %10, label %152

10:                                               ; preds = %8
  %11 = ptrtoint i8* %4 to i64
  %12 = shl i64 %11, 1
  %13 = inttoptr i64 %12 to i16*
  %14 = ptrtoint i8* %2 to i64
  %15 = shl i64 %14, 1
  %16 = inttoptr i64 %15 to i16*
  %17 = ptrtoint i8* %0 to i64
  %18 = shl i64 %17, 1
  %19 = inttoptr i64 %18 to i16*
  %20 = sext i32 %1 to i64
  %21 = sext i32 %3 to i64
  %22 = sext i32 %6 to i64
  %23 = inttoptr i64 %18 to i8*
  %24 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %23) #5
  %25 = inttoptr i64 %15 to i8*
  %26 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %25) #5
  %27 = inttoptr i64 %12 to i8*
  %28 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %27) #5
  %29 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %5) #5
  %30 = zext <16 x i8> %29 to <16 x i16>
  %31 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %30
  %32 = bitcast <32 x i8> %26 to <16 x i16>
  %33 = bitcast <32 x i8> %28 to <16 x i16>
  %34 = shufflevector <16 x i16> %32, <16 x i16> %33, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %35 = shufflevector <16 x i16> %30, <16 x i16> %31, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %36 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %34, <16 x i16> %35) #5
  %37 = add <8 x i32> %36, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %38 = ashr <8 x i32> %37, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %39 = shufflevector <16 x i16> %32, <16 x i16> %33, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %40 = shufflevector <16 x i16> %30, <16 x i16> %31, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %41 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %39, <16 x i16> %40) #5
  %42 = add <8 x i32> %41, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %43 = ashr <8 x i32> %42, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %44 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %38, <8 x i32> %43) #5
  %45 = bitcast <32 x i8> %24 to <16 x i16>
  %46 = sub <16 x i16> %44, %45
  %47 = sub <16 x i16> zeroinitializer, %46
  %48 = icmp slt <16 x i16> %46, zeroinitializer
  %49 = select <16 x i1> %48, <16 x i16> %47, <16 x i16> %46
  %50 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %49, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %51 = getelementptr inbounds i16, i16* %19, i64 %20
  %52 = getelementptr inbounds i16, i16* %16, i64 %21
  %53 = getelementptr inbounds i16, i16* %13, i64 16
  %54 = getelementptr inbounds i8, i8* %5, i64 %22
  %55 = bitcast i16* %51 to i8*
  %56 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %55) #5
  %57 = bitcast i16* %52 to i8*
  %58 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %57) #5
  %59 = bitcast i16* %53 to i8*
  %60 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %59) #5
  %61 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %54) #5
  %62 = zext <16 x i8> %61 to <16 x i16>
  %63 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %62
  %64 = bitcast <32 x i8> %58 to <16 x i16>
  %65 = bitcast <32 x i8> %60 to <16 x i16>
  %66 = shufflevector <16 x i16> %64, <16 x i16> %65, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %67 = shufflevector <16 x i16> %62, <16 x i16> %63, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %68 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %66, <16 x i16> %67) #5
  %69 = add <8 x i32> %68, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %70 = ashr <8 x i32> %69, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %71 = shufflevector <16 x i16> %64, <16 x i16> %65, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %72 = shufflevector <16 x i16> %62, <16 x i16> %63, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %73 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %71, <16 x i16> %72) #5
  %74 = add <8 x i32> %73, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %75 = ashr <8 x i32> %74, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %76 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %70, <8 x i32> %75) #5
  %77 = bitcast <32 x i8> %56 to <16 x i16>
  %78 = sub <16 x i16> %76, %77
  %79 = sub <16 x i16> zeroinitializer, %78
  %80 = icmp slt <16 x i16> %78, zeroinitializer
  %81 = select <16 x i1> %80, <16 x i16> %79, <16 x i16> %78
  %82 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %81, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %83 = add <8 x i32> %82, %50
  %84 = getelementptr inbounds i16, i16* %51, i64 %20
  %85 = getelementptr inbounds i16, i16* %52, i64 %21
  %86 = getelementptr inbounds i16, i16* %13, i64 32
  %87 = getelementptr inbounds i8, i8* %54, i64 %22
  %88 = bitcast i16* %84 to i8*
  %89 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %88) #5
  %90 = bitcast i16* %85 to i8*
  %91 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %90) #5
  %92 = bitcast i16* %86 to i8*
  %93 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %92) #5
  %94 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %87) #5
  %95 = zext <16 x i8> %94 to <16 x i16>
  %96 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %95
  %97 = bitcast <32 x i8> %91 to <16 x i16>
  %98 = bitcast <32 x i8> %93 to <16 x i16>
  %99 = shufflevector <16 x i16> %97, <16 x i16> %98, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %100 = shufflevector <16 x i16> %95, <16 x i16> %96, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %101 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %99, <16 x i16> %100) #5
  %102 = add <8 x i32> %101, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %103 = ashr <8 x i32> %102, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %104 = shufflevector <16 x i16> %97, <16 x i16> %98, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %105 = shufflevector <16 x i16> %95, <16 x i16> %96, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %106 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %104, <16 x i16> %105) #5
  %107 = add <8 x i32> %106, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %108 = ashr <8 x i32> %107, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %109 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %103, <8 x i32> %108) #5
  %110 = bitcast <32 x i8> %89 to <16 x i16>
  %111 = sub <16 x i16> %109, %110
  %112 = sub <16 x i16> zeroinitializer, %111
  %113 = icmp slt <16 x i16> %111, zeroinitializer
  %114 = select <16 x i1> %113, <16 x i16> %112, <16 x i16> %111
  %115 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %114, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %116 = add <8 x i32> %115, %83
  %117 = getelementptr inbounds i16, i16* %84, i64 %20
  %118 = getelementptr inbounds i16, i16* %85, i64 %21
  %119 = getelementptr inbounds i16, i16* %13, i64 48
  %120 = getelementptr inbounds i8, i8* %87, i64 %22
  %121 = bitcast i16* %117 to i8*
  %122 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %121) #5
  %123 = bitcast i16* %118 to i8*
  %124 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %123) #5
  %125 = bitcast i16* %119 to i8*
  %126 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %125) #5
  %127 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %120) #5
  %128 = zext <16 x i8> %127 to <16 x i16>
  %129 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %128
  %130 = bitcast <32 x i8> %124 to <16 x i16>
  %131 = bitcast <32 x i8> %126 to <16 x i16>
  %132 = shufflevector <16 x i16> %130, <16 x i16> %131, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %133 = shufflevector <16 x i16> %128, <16 x i16> %129, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %134 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %132, <16 x i16> %133) #5
  %135 = add <8 x i32> %134, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %136 = ashr <8 x i32> %135, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %137 = shufflevector <16 x i16> %130, <16 x i16> %131, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %138 = shufflevector <16 x i16> %128, <16 x i16> %129, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %139 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %137, <16 x i16> %138) #5
  %140 = add <8 x i32> %139, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %141 = ashr <8 x i32> %140, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %142 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %136, <8 x i32> %141) #5
  %143 = bitcast <32 x i8> %122 to <16 x i16>
  %144 = sub <16 x i16> %142, %143
  %145 = sub <16 x i16> zeroinitializer, %144
  %146 = icmp slt <16 x i16> %144, zeroinitializer
  %147 = select <16 x i1> %146, <16 x i16> %145, <16 x i16> %144
  %148 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %147, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %149 = add <8 x i32> %148, %116
  %150 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %149, <8 x i32> %149) #5
  %151 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %150, <8 x i32> %150) #5
  br label %294

152:                                              ; preds = %8
  %153 = ptrtoint i8* %2 to i64
  %154 = shl i64 %153, 1
  %155 = inttoptr i64 %154 to i16*
  %156 = ptrtoint i8* %4 to i64
  %157 = shl i64 %156, 1
  %158 = inttoptr i64 %157 to i16*
  %159 = ptrtoint i8* %0 to i64
  %160 = shl i64 %159, 1
  %161 = inttoptr i64 %160 to i16*
  %162 = sext i32 %1 to i64
  %163 = sext i32 %3 to i64
  %164 = sext i32 %6 to i64
  %165 = inttoptr i64 %160 to i8*
  %166 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %165) #5
  %167 = inttoptr i64 %157 to i8*
  %168 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %167) #5
  %169 = inttoptr i64 %154 to i8*
  %170 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %169) #5
  %171 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %5) #5
  %172 = zext <16 x i8> %171 to <16 x i16>
  %173 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %172
  %174 = bitcast <32 x i8> %168 to <16 x i16>
  %175 = bitcast <32 x i8> %170 to <16 x i16>
  %176 = shufflevector <16 x i16> %174, <16 x i16> %175, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %177 = shufflevector <16 x i16> %172, <16 x i16> %173, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %178 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %176, <16 x i16> %177) #5
  %179 = add <8 x i32> %178, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %180 = ashr <8 x i32> %179, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %181 = shufflevector <16 x i16> %174, <16 x i16> %175, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %182 = shufflevector <16 x i16> %172, <16 x i16> %173, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %183 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %181, <16 x i16> %182) #5
  %184 = add <8 x i32> %183, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %185 = ashr <8 x i32> %184, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %186 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %180, <8 x i32> %185) #5
  %187 = bitcast <32 x i8> %166 to <16 x i16>
  %188 = sub <16 x i16> %186, %187
  %189 = sub <16 x i16> zeroinitializer, %188
  %190 = icmp slt <16 x i16> %188, zeroinitializer
  %191 = select <16 x i1> %190, <16 x i16> %189, <16 x i16> %188
  %192 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %191, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %193 = getelementptr inbounds i16, i16* %161, i64 %162
  %194 = getelementptr inbounds i16, i16* %158, i64 16
  %195 = getelementptr inbounds i16, i16* %155, i64 %163
  %196 = getelementptr inbounds i8, i8* %5, i64 %164
  %197 = bitcast i16* %193 to i8*
  %198 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %197) #5
  %199 = bitcast i16* %194 to i8*
  %200 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %199) #5
  %201 = bitcast i16* %195 to i8*
  %202 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %201) #5
  %203 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %196) #5
  %204 = zext <16 x i8> %203 to <16 x i16>
  %205 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %204
  %206 = bitcast <32 x i8> %200 to <16 x i16>
  %207 = bitcast <32 x i8> %202 to <16 x i16>
  %208 = shufflevector <16 x i16> %206, <16 x i16> %207, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %209 = shufflevector <16 x i16> %204, <16 x i16> %205, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %210 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %208, <16 x i16> %209) #5
  %211 = add <8 x i32> %210, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %212 = ashr <8 x i32> %211, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %213 = shufflevector <16 x i16> %206, <16 x i16> %207, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %214 = shufflevector <16 x i16> %204, <16 x i16> %205, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %215 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %213, <16 x i16> %214) #5
  %216 = add <8 x i32> %215, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %217 = ashr <8 x i32> %216, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %218 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %212, <8 x i32> %217) #5
  %219 = bitcast <32 x i8> %198 to <16 x i16>
  %220 = sub <16 x i16> %218, %219
  %221 = sub <16 x i16> zeroinitializer, %220
  %222 = icmp slt <16 x i16> %220, zeroinitializer
  %223 = select <16 x i1> %222, <16 x i16> %221, <16 x i16> %220
  %224 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %223, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %225 = add <8 x i32> %224, %192
  %226 = getelementptr inbounds i16, i16* %193, i64 %162
  %227 = getelementptr inbounds i16, i16* %158, i64 32
  %228 = getelementptr inbounds i16, i16* %195, i64 %163
  %229 = getelementptr inbounds i8, i8* %196, i64 %164
  %230 = bitcast i16* %226 to i8*
  %231 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %230) #5
  %232 = bitcast i16* %227 to i8*
  %233 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %232) #5
  %234 = bitcast i16* %228 to i8*
  %235 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %234) #5
  %236 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %229) #5
  %237 = zext <16 x i8> %236 to <16 x i16>
  %238 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %237
  %239 = bitcast <32 x i8> %233 to <16 x i16>
  %240 = bitcast <32 x i8> %235 to <16 x i16>
  %241 = shufflevector <16 x i16> %239, <16 x i16> %240, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %242 = shufflevector <16 x i16> %237, <16 x i16> %238, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %243 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %241, <16 x i16> %242) #5
  %244 = add <8 x i32> %243, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %245 = ashr <8 x i32> %244, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %246 = shufflevector <16 x i16> %239, <16 x i16> %240, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %247 = shufflevector <16 x i16> %237, <16 x i16> %238, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %248 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %246, <16 x i16> %247) #5
  %249 = add <8 x i32> %248, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %250 = ashr <8 x i32> %249, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %251 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %245, <8 x i32> %250) #5
  %252 = bitcast <32 x i8> %231 to <16 x i16>
  %253 = sub <16 x i16> %251, %252
  %254 = sub <16 x i16> zeroinitializer, %253
  %255 = icmp slt <16 x i16> %253, zeroinitializer
  %256 = select <16 x i1> %255, <16 x i16> %254, <16 x i16> %253
  %257 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %256, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %258 = add <8 x i32> %257, %225
  %259 = getelementptr inbounds i16, i16* %226, i64 %162
  %260 = getelementptr inbounds i16, i16* %158, i64 48
  %261 = getelementptr inbounds i16, i16* %228, i64 %163
  %262 = getelementptr inbounds i8, i8* %229, i64 %164
  %263 = bitcast i16* %259 to i8*
  %264 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %263) #5
  %265 = bitcast i16* %260 to i8*
  %266 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %265) #5
  %267 = bitcast i16* %261 to i8*
  %268 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %267) #5
  %269 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %262) #5
  %270 = zext <16 x i8> %269 to <16 x i16>
  %271 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %270
  %272 = bitcast <32 x i8> %266 to <16 x i16>
  %273 = bitcast <32 x i8> %268 to <16 x i16>
  %274 = shufflevector <16 x i16> %272, <16 x i16> %273, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %275 = shufflevector <16 x i16> %270, <16 x i16> %271, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %276 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %274, <16 x i16> %275) #5
  %277 = add <8 x i32> %276, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %278 = ashr <8 x i32> %277, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %279 = shufflevector <16 x i16> %272, <16 x i16> %273, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %280 = shufflevector <16 x i16> %270, <16 x i16> %271, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %281 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %279, <16 x i16> %280) #5
  %282 = add <8 x i32> %281, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %283 = ashr <8 x i32> %282, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %284 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %278, <8 x i32> %283) #5
  %285 = bitcast <32 x i8> %264 to <16 x i16>
  %286 = sub <16 x i16> %284, %285
  %287 = sub <16 x i16> zeroinitializer, %286
  %288 = icmp slt <16 x i16> %286, zeroinitializer
  %289 = select <16 x i1> %288, <16 x i16> %287, <16 x i16> %286
  %290 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %289, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %291 = add <8 x i32> %290, %258
  %292 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %291, <8 x i32> %291) #5
  %293 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %292, <8 x i32> %292) #5
  br label %294

294:                                              ; preds = %10, %152
  %295 = phi <8 x i32> [ %151, %10 ], [ %293, %152 ]
  %296 = extractelement <8 x i32> %295, i64 0
  %297 = extractelement <8 x i32> %295, i64 4
  %298 = add nsw i32 %296, %297
  ret i32 %298
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_masked_sad8x32_avx2(i8*, i32, i8*, i32, i8*, i8* nocapture readonly, i32, i32) local_unnamed_addr #1 {
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %10, label %99

10:                                               ; preds = %8
  %11 = ptrtoint i8* %4 to i64
  %12 = shl i64 %11, 1
  %13 = inttoptr i64 %12 to i16*
  %14 = ptrtoint i8* %2 to i64
  %15 = shl i64 %14, 1
  %16 = inttoptr i64 %15 to i16*
  %17 = ptrtoint i8* %0 to i64
  %18 = shl i64 %17, 1
  %19 = inttoptr i64 %18 to i16*
  %20 = sext i32 %1 to i64
  %21 = sext i32 %3 to i64
  %22 = sext i32 %6 to i64
  %23 = shl i32 %1, 1
  %24 = sext i32 %23 to i64
  %25 = shl i32 %3, 1
  %26 = sext i32 %25 to i64
  %27 = shl i32 %6, 1
  %28 = sext i32 %27 to i64
  br label %29

29:                                               ; preds = %29, %10
  %30 = phi i8* [ %5, %10 ], [ %93, %29 ]
  %31 = phi i16* [ %19, %10 ], [ %90, %29 ]
  %32 = phi i16* [ %16, %10 ], [ %91, %29 ]
  %33 = phi i16* [ %13, %10 ], [ %92, %29 ]
  %34 = phi i32 [ 0, %10 ], [ %94, %29 ]
  %35 = phi <8 x i32> [ zeroinitializer, %10 ], [ %89, %29 ]
  %36 = getelementptr inbounds i16, i16* %31, i64 %20
  %37 = bitcast i16* %36 to i8*
  %38 = bitcast i16* %31 to i8*
  %39 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %38) #5
  %40 = bitcast <16 x i8> %39 to <2 x i64>
  %41 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %37) #5
  %42 = bitcast <16 x i8> %41 to <2 x i64>
  %43 = shufflevector <2 x i64> %40, <2 x i64> %42, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %44 = getelementptr inbounds i16, i16* %32, i64 %21
  %45 = bitcast i16* %44 to i8*
  %46 = bitcast i16* %32 to i8*
  %47 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %46) #5
  %48 = bitcast <16 x i8> %47 to <2 x i64>
  %49 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %45) #5
  %50 = bitcast <16 x i8> %49 to <2 x i64>
  %51 = shufflevector <2 x i64> %48, <2 x i64> %50, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %52 = getelementptr inbounds i16, i16* %33, i64 8
  %53 = bitcast i16* %52 to i8*
  %54 = bitcast i16* %33 to i8*
  %55 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %54) #5
  %56 = bitcast <16 x i8> %55 to <2 x i64>
  %57 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %53) #5
  %58 = bitcast <16 x i8> %57 to <2 x i64>
  %59 = shufflevector <2 x i64> %56, <2 x i64> %58, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %60 = bitcast i8* %30 to i64*
  %61 = load i64, i64* %60, align 1
  %62 = insertelement <2 x i64> undef, i64 %61, i32 0
  %63 = getelementptr inbounds i8, i8* %30, i64 %22
  %64 = bitcast i8* %63 to i64*
  %65 = load i64, i64* %64, align 1
  %66 = insertelement <2 x i64> %62, i64 %65, i32 1
  %67 = bitcast <2 x i64> %66 to <16 x i8>
  %68 = zext <16 x i8> %67 to <16 x i16>
  %69 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %68
  %70 = bitcast <4 x i64> %51 to <16 x i16>
  %71 = bitcast <4 x i64> %59 to <16 x i16>
  %72 = shufflevector <16 x i16> %70, <16 x i16> %71, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %73 = shufflevector <16 x i16> %68, <16 x i16> %69, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %74 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %72, <16 x i16> %73) #5
  %75 = add <8 x i32> %74, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %76 = ashr <8 x i32> %75, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %77 = shufflevector <16 x i16> %70, <16 x i16> %71, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %78 = shufflevector <16 x i16> %68, <16 x i16> %69, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %79 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %77, <16 x i16> %78) #5
  %80 = add <8 x i32> %79, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %81 = ashr <8 x i32> %80, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %82 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %76, <8 x i32> %81) #5
  %83 = bitcast <4 x i64> %43 to <16 x i16>
  %84 = sub <16 x i16> %82, %83
  %85 = sub <16 x i16> zeroinitializer, %84
  %86 = icmp slt <16 x i16> %84, zeroinitializer
  %87 = select <16 x i1> %86, <16 x i16> %85, <16 x i16> %84
  %88 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %87, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %89 = add <8 x i32> %88, %35
  %90 = getelementptr inbounds i16, i16* %31, i64 %24
  %91 = getelementptr inbounds i16, i16* %32, i64 %26
  %92 = getelementptr inbounds i16, i16* %33, i64 16
  %93 = getelementptr inbounds i8, i8* %30, i64 %28
  %94 = add nuw nsw i32 %34, 2
  %95 = icmp ult i32 %94, 32
  br i1 %95, label %29, label %96

96:                                               ; preds = %29
  %97 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %89, <8 x i32> %89) #5
  %98 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %97, <8 x i32> %97) #5
  br label %188

99:                                               ; preds = %8
  %100 = ptrtoint i8* %2 to i64
  %101 = shl i64 %100, 1
  %102 = inttoptr i64 %101 to i16*
  %103 = ptrtoint i8* %4 to i64
  %104 = shl i64 %103, 1
  %105 = inttoptr i64 %104 to i16*
  %106 = ptrtoint i8* %0 to i64
  %107 = shl i64 %106, 1
  %108 = inttoptr i64 %107 to i16*
  %109 = sext i32 %1 to i64
  %110 = sext i32 %3 to i64
  %111 = sext i32 %6 to i64
  %112 = shl i32 %1, 1
  %113 = sext i32 %112 to i64
  %114 = shl i32 %3, 1
  %115 = sext i32 %114 to i64
  %116 = shl i32 %6, 1
  %117 = sext i32 %116 to i64
  br label %118

118:                                              ; preds = %118, %99
  %119 = phi i8* [ %5, %99 ], [ %182, %118 ]
  %120 = phi i16* [ %108, %99 ], [ %179, %118 ]
  %121 = phi i16* [ %105, %99 ], [ %180, %118 ]
  %122 = phi i16* [ %102, %99 ], [ %181, %118 ]
  %123 = phi i32 [ 0, %99 ], [ %183, %118 ]
  %124 = phi <8 x i32> [ zeroinitializer, %99 ], [ %178, %118 ]
  %125 = getelementptr inbounds i16, i16* %120, i64 %109
  %126 = bitcast i16* %125 to i8*
  %127 = bitcast i16* %120 to i8*
  %128 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %127) #5
  %129 = bitcast <16 x i8> %128 to <2 x i64>
  %130 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %126) #5
  %131 = bitcast <16 x i8> %130 to <2 x i64>
  %132 = shufflevector <2 x i64> %129, <2 x i64> %131, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %133 = getelementptr inbounds i16, i16* %121, i64 8
  %134 = bitcast i16* %133 to i8*
  %135 = bitcast i16* %121 to i8*
  %136 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %135) #5
  %137 = bitcast <16 x i8> %136 to <2 x i64>
  %138 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %134) #5
  %139 = bitcast <16 x i8> %138 to <2 x i64>
  %140 = shufflevector <2 x i64> %137, <2 x i64> %139, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %141 = getelementptr inbounds i16, i16* %122, i64 %110
  %142 = bitcast i16* %141 to i8*
  %143 = bitcast i16* %122 to i8*
  %144 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %143) #5
  %145 = bitcast <16 x i8> %144 to <2 x i64>
  %146 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %142) #5
  %147 = bitcast <16 x i8> %146 to <2 x i64>
  %148 = shufflevector <2 x i64> %145, <2 x i64> %147, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %149 = bitcast i8* %119 to i64*
  %150 = load i64, i64* %149, align 1
  %151 = insertelement <2 x i64> undef, i64 %150, i32 0
  %152 = getelementptr inbounds i8, i8* %119, i64 %111
  %153 = bitcast i8* %152 to i64*
  %154 = load i64, i64* %153, align 1
  %155 = insertelement <2 x i64> %151, i64 %154, i32 1
  %156 = bitcast <2 x i64> %155 to <16 x i8>
  %157 = zext <16 x i8> %156 to <16 x i16>
  %158 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %157
  %159 = bitcast <4 x i64> %140 to <16 x i16>
  %160 = bitcast <4 x i64> %148 to <16 x i16>
  %161 = shufflevector <16 x i16> %159, <16 x i16> %160, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %162 = shufflevector <16 x i16> %157, <16 x i16> %158, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %163 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %161, <16 x i16> %162) #5
  %164 = add <8 x i32> %163, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %165 = ashr <8 x i32> %164, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %166 = shufflevector <16 x i16> %159, <16 x i16> %160, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %167 = shufflevector <16 x i16> %157, <16 x i16> %158, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %168 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %166, <16 x i16> %167) #5
  %169 = add <8 x i32> %168, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %170 = ashr <8 x i32> %169, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %171 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %165, <8 x i32> %170) #5
  %172 = bitcast <4 x i64> %132 to <16 x i16>
  %173 = sub <16 x i16> %171, %172
  %174 = sub <16 x i16> zeroinitializer, %173
  %175 = icmp slt <16 x i16> %173, zeroinitializer
  %176 = select <16 x i1> %175, <16 x i16> %174, <16 x i16> %173
  %177 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %176, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %178 = add <8 x i32> %177, %124
  %179 = getelementptr inbounds i16, i16* %120, i64 %113
  %180 = getelementptr inbounds i16, i16* %121, i64 16
  %181 = getelementptr inbounds i16, i16* %122, i64 %115
  %182 = getelementptr inbounds i8, i8* %119, i64 %117
  %183 = add nuw nsw i32 %123, 2
  %184 = icmp ult i32 %183, 32
  br i1 %184, label %118, label %185

185:                                              ; preds = %118
  %186 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %178, <8 x i32> %178) #5
  %187 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %186, <8 x i32> %186) #5
  br label %188

188:                                              ; preds = %96, %185
  %189 = phi <8 x i32> [ %98, %96 ], [ %187, %185 ]
  %190 = extractelement <8 x i32> %189, i64 0
  %191 = extractelement <8 x i32> %189, i64 4
  %192 = add nsw i32 %190, %191
  ret i32 %192
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_masked_sad32x8_avx2(i8*, i32, i8*, i32, i8*, i8*, i32, i32) local_unnamed_addr #1 {
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %10, label %101

10:                                               ; preds = %8
  %11 = ptrtoint i8* %4 to i64
  %12 = shl i64 %11, 1
  %13 = inttoptr i64 %12 to i16*
  %14 = ptrtoint i8* %2 to i64
  %15 = shl i64 %14, 1
  %16 = inttoptr i64 %15 to i16*
  %17 = ptrtoint i8* %0 to i64
  %18 = shl i64 %17, 1
  %19 = inttoptr i64 %18 to i16*
  %20 = sext i32 %1 to i64
  %21 = sext i32 %3 to i64
  %22 = sext i32 %6 to i64
  br label %23

23:                                               ; preds = %23, %10
  %24 = phi i8* [ %5, %10 ], [ %95, %23 ]
  %25 = phi i16* [ %19, %10 ], [ %92, %23 ]
  %26 = phi i16* [ %16, %10 ], [ %93, %23 ]
  %27 = phi i16* [ %13, %10 ], [ %94, %23 ]
  %28 = phi i32 [ 0, %10 ], [ %96, %23 ]
  %29 = phi <8 x i32> [ zeroinitializer, %10 ], [ %91, %23 ]
  %30 = bitcast i16* %25 to i8*
  %31 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %30) #5
  %32 = bitcast i16* %26 to i8*
  %33 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %32) #5
  %34 = bitcast i16* %27 to i8*
  %35 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %34) #5
  %36 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %24) #5
  %37 = zext <16 x i8> %36 to <16 x i16>
  %38 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %37
  %39 = bitcast <32 x i8> %33 to <16 x i16>
  %40 = bitcast <32 x i8> %35 to <16 x i16>
  %41 = shufflevector <16 x i16> %39, <16 x i16> %40, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %42 = shufflevector <16 x i16> %37, <16 x i16> %38, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %43 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %41, <16 x i16> %42) #5
  %44 = add <8 x i32> %43, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %45 = ashr <8 x i32> %44, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %46 = shufflevector <16 x i16> %39, <16 x i16> %40, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %47 = shufflevector <16 x i16> %37, <16 x i16> %38, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %48 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %46, <16 x i16> %47) #5
  %49 = add <8 x i32> %48, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %50 = ashr <8 x i32> %49, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %51 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %45, <8 x i32> %50) #5
  %52 = bitcast <32 x i8> %31 to <16 x i16>
  %53 = sub <16 x i16> %51, %52
  %54 = sub <16 x i16> zeroinitializer, %53
  %55 = icmp slt <16 x i16> %53, zeroinitializer
  %56 = select <16 x i1> %55, <16 x i16> %54, <16 x i16> %53
  %57 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %56, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %58 = add <8 x i32> %57, %29
  %59 = getelementptr inbounds i16, i16* %25, i64 16
  %60 = bitcast i16* %59 to i8*
  %61 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %60) #5
  %62 = getelementptr inbounds i16, i16* %26, i64 16
  %63 = bitcast i16* %62 to i8*
  %64 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %63) #5
  %65 = getelementptr inbounds i16, i16* %27, i64 16
  %66 = bitcast i16* %65 to i8*
  %67 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %66) #5
  %68 = getelementptr inbounds i8, i8* %24, i64 16
  %69 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %68) #5
  %70 = zext <16 x i8> %69 to <16 x i16>
  %71 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %70
  %72 = bitcast <32 x i8> %64 to <16 x i16>
  %73 = bitcast <32 x i8> %67 to <16 x i16>
  %74 = shufflevector <16 x i16> %72, <16 x i16> %73, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %75 = shufflevector <16 x i16> %70, <16 x i16> %71, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %76 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %74, <16 x i16> %75) #5
  %77 = add <8 x i32> %76, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %78 = ashr <8 x i32> %77, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %79 = shufflevector <16 x i16> %72, <16 x i16> %73, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %80 = shufflevector <16 x i16> %70, <16 x i16> %71, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %81 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %79, <16 x i16> %80) #5
  %82 = add <8 x i32> %81, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %83 = ashr <8 x i32> %82, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %84 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %78, <8 x i32> %83) #5
  %85 = bitcast <32 x i8> %61 to <16 x i16>
  %86 = sub <16 x i16> %84, %85
  %87 = sub <16 x i16> zeroinitializer, %86
  %88 = icmp slt <16 x i16> %86, zeroinitializer
  %89 = select <16 x i1> %88, <16 x i16> %87, <16 x i16> %86
  %90 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %89, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %91 = add <8 x i32> %90, %58
  %92 = getelementptr inbounds i16, i16* %25, i64 %20
  %93 = getelementptr inbounds i16, i16* %26, i64 %21
  %94 = getelementptr inbounds i16, i16* %27, i64 32
  %95 = getelementptr inbounds i8, i8* %24, i64 %22
  %96 = add nuw nsw i32 %28, 1
  %97 = icmp eq i32 %96, 8
  br i1 %97, label %98, label %23

98:                                               ; preds = %23
  %99 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %91, <8 x i32> %91) #5
  %100 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %99, <8 x i32> %99) #5
  br label %192

101:                                              ; preds = %8
  %102 = ptrtoint i8* %2 to i64
  %103 = shl i64 %102, 1
  %104 = inttoptr i64 %103 to i16*
  %105 = ptrtoint i8* %4 to i64
  %106 = shl i64 %105, 1
  %107 = inttoptr i64 %106 to i16*
  %108 = ptrtoint i8* %0 to i64
  %109 = shl i64 %108, 1
  %110 = inttoptr i64 %109 to i16*
  %111 = sext i32 %1 to i64
  %112 = sext i32 %3 to i64
  %113 = sext i32 %6 to i64
  br label %114

114:                                              ; preds = %114, %101
  %115 = phi i8* [ %5, %101 ], [ %186, %114 ]
  %116 = phi i16* [ %110, %101 ], [ %183, %114 ]
  %117 = phi i16* [ %107, %101 ], [ %184, %114 ]
  %118 = phi i16* [ %104, %101 ], [ %185, %114 ]
  %119 = phi i32 [ 0, %101 ], [ %187, %114 ]
  %120 = phi <8 x i32> [ zeroinitializer, %101 ], [ %182, %114 ]
  %121 = bitcast i16* %116 to i8*
  %122 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %121) #5
  %123 = bitcast i16* %117 to i8*
  %124 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %123) #5
  %125 = bitcast i16* %118 to i8*
  %126 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %125) #5
  %127 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %115) #5
  %128 = zext <16 x i8> %127 to <16 x i16>
  %129 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %128
  %130 = bitcast <32 x i8> %124 to <16 x i16>
  %131 = bitcast <32 x i8> %126 to <16 x i16>
  %132 = shufflevector <16 x i16> %130, <16 x i16> %131, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %133 = shufflevector <16 x i16> %128, <16 x i16> %129, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %134 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %132, <16 x i16> %133) #5
  %135 = add <8 x i32> %134, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %136 = ashr <8 x i32> %135, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %137 = shufflevector <16 x i16> %130, <16 x i16> %131, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %138 = shufflevector <16 x i16> %128, <16 x i16> %129, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %139 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %137, <16 x i16> %138) #5
  %140 = add <8 x i32> %139, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %141 = ashr <8 x i32> %140, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %142 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %136, <8 x i32> %141) #5
  %143 = bitcast <32 x i8> %122 to <16 x i16>
  %144 = sub <16 x i16> %142, %143
  %145 = sub <16 x i16> zeroinitializer, %144
  %146 = icmp slt <16 x i16> %144, zeroinitializer
  %147 = select <16 x i1> %146, <16 x i16> %145, <16 x i16> %144
  %148 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %147, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %149 = add <8 x i32> %148, %120
  %150 = getelementptr inbounds i16, i16* %116, i64 16
  %151 = bitcast i16* %150 to i8*
  %152 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %151) #5
  %153 = getelementptr inbounds i16, i16* %117, i64 16
  %154 = bitcast i16* %153 to i8*
  %155 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %154) #5
  %156 = getelementptr inbounds i16, i16* %118, i64 16
  %157 = bitcast i16* %156 to i8*
  %158 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %157) #5
  %159 = getelementptr inbounds i8, i8* %115, i64 16
  %160 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %159) #5
  %161 = zext <16 x i8> %160 to <16 x i16>
  %162 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %161
  %163 = bitcast <32 x i8> %155 to <16 x i16>
  %164 = bitcast <32 x i8> %158 to <16 x i16>
  %165 = shufflevector <16 x i16> %163, <16 x i16> %164, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %166 = shufflevector <16 x i16> %161, <16 x i16> %162, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %167 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %165, <16 x i16> %166) #5
  %168 = add <8 x i32> %167, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %169 = ashr <8 x i32> %168, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %170 = shufflevector <16 x i16> %163, <16 x i16> %164, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %171 = shufflevector <16 x i16> %161, <16 x i16> %162, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %172 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %170, <16 x i16> %171) #5
  %173 = add <8 x i32> %172, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %174 = ashr <8 x i32> %173, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %175 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %169, <8 x i32> %174) #5
  %176 = bitcast <32 x i8> %152 to <16 x i16>
  %177 = sub <16 x i16> %175, %176
  %178 = sub <16 x i16> zeroinitializer, %177
  %179 = icmp slt <16 x i16> %177, zeroinitializer
  %180 = select <16 x i1> %179, <16 x i16> %178, <16 x i16> %177
  %181 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %180, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %182 = add <8 x i32> %181, %149
  %183 = getelementptr inbounds i16, i16* %116, i64 %111
  %184 = getelementptr inbounds i16, i16* %117, i64 32
  %185 = getelementptr inbounds i16, i16* %118, i64 %112
  %186 = getelementptr inbounds i8, i8* %115, i64 %113
  %187 = add nuw nsw i32 %119, 1
  %188 = icmp eq i32 %187, 8
  br i1 %188, label %189, label %114

189:                                              ; preds = %114
  %190 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %182, <8 x i32> %182) #5
  %191 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %190, <8 x i32> %190) #5
  br label %192

192:                                              ; preds = %98, %189
  %193 = phi <8 x i32> [ %100, %98 ], [ %191, %189 ]
  %194 = extractelement <8 x i32> %193, i64 0
  %195 = extractelement <8 x i32> %193, i64 4
  %196 = add nsw i32 %194, %195
  ret i32 %196
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_masked_sad16x64_avx2(i8*, i32, i8*, i32, i8*, i8*, i32, i32) local_unnamed_addr #1 {
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %10, label %68

10:                                               ; preds = %8
  %11 = ptrtoint i8* %4 to i64
  %12 = shl i64 %11, 1
  %13 = inttoptr i64 %12 to i16*
  %14 = ptrtoint i8* %2 to i64
  %15 = shl i64 %14, 1
  %16 = inttoptr i64 %15 to i16*
  %17 = ptrtoint i8* %0 to i64
  %18 = shl i64 %17, 1
  %19 = inttoptr i64 %18 to i16*
  %20 = sext i32 %1 to i64
  %21 = sext i32 %3 to i64
  %22 = sext i32 %6 to i64
  br label %23

23:                                               ; preds = %23, %10
  %24 = phi i8* [ %5, %10 ], [ %62, %23 ]
  %25 = phi i16* [ %19, %10 ], [ %59, %23 ]
  %26 = phi i16* [ %16, %10 ], [ %60, %23 ]
  %27 = phi i16* [ %13, %10 ], [ %61, %23 ]
  %28 = phi i32 [ 0, %10 ], [ %63, %23 ]
  %29 = phi <8 x i32> [ zeroinitializer, %10 ], [ %58, %23 ]
  %30 = bitcast i16* %25 to i8*
  %31 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %30) #5
  %32 = bitcast i16* %26 to i8*
  %33 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %32) #5
  %34 = bitcast i16* %27 to i8*
  %35 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %34) #5
  %36 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %24) #5
  %37 = zext <16 x i8> %36 to <16 x i16>
  %38 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %37
  %39 = bitcast <32 x i8> %33 to <16 x i16>
  %40 = bitcast <32 x i8> %35 to <16 x i16>
  %41 = shufflevector <16 x i16> %39, <16 x i16> %40, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %42 = shufflevector <16 x i16> %37, <16 x i16> %38, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %43 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %41, <16 x i16> %42) #5
  %44 = add <8 x i32> %43, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %45 = ashr <8 x i32> %44, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %46 = shufflevector <16 x i16> %39, <16 x i16> %40, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %47 = shufflevector <16 x i16> %37, <16 x i16> %38, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %48 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %46, <16 x i16> %47) #5
  %49 = add <8 x i32> %48, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %50 = ashr <8 x i32> %49, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %51 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %45, <8 x i32> %50) #5
  %52 = bitcast <32 x i8> %31 to <16 x i16>
  %53 = sub <16 x i16> %51, %52
  %54 = sub <16 x i16> zeroinitializer, %53
  %55 = icmp slt <16 x i16> %53, zeroinitializer
  %56 = select <16 x i1> %55, <16 x i16> %54, <16 x i16> %53
  %57 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %56, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %58 = add <8 x i32> %57, %29
  %59 = getelementptr inbounds i16, i16* %25, i64 %20
  %60 = getelementptr inbounds i16, i16* %26, i64 %21
  %61 = getelementptr inbounds i16, i16* %27, i64 16
  %62 = getelementptr inbounds i8, i8* %24, i64 %22
  %63 = add nuw nsw i32 %28, 1
  %64 = icmp eq i32 %63, 64
  br i1 %64, label %65, label %23

65:                                               ; preds = %23
  %66 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %58, <8 x i32> %58) #5
  %67 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %66, <8 x i32> %66) #5
  br label %126

68:                                               ; preds = %8
  %69 = ptrtoint i8* %2 to i64
  %70 = shl i64 %69, 1
  %71 = inttoptr i64 %70 to i16*
  %72 = ptrtoint i8* %4 to i64
  %73 = shl i64 %72, 1
  %74 = inttoptr i64 %73 to i16*
  %75 = ptrtoint i8* %0 to i64
  %76 = shl i64 %75, 1
  %77 = inttoptr i64 %76 to i16*
  %78 = sext i32 %1 to i64
  %79 = sext i32 %3 to i64
  %80 = sext i32 %6 to i64
  br label %81

81:                                               ; preds = %81, %68
  %82 = phi i8* [ %5, %68 ], [ %120, %81 ]
  %83 = phi i16* [ %77, %68 ], [ %117, %81 ]
  %84 = phi i16* [ %74, %68 ], [ %118, %81 ]
  %85 = phi i16* [ %71, %68 ], [ %119, %81 ]
  %86 = phi i32 [ 0, %68 ], [ %121, %81 ]
  %87 = phi <8 x i32> [ zeroinitializer, %68 ], [ %116, %81 ]
  %88 = bitcast i16* %83 to i8*
  %89 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %88) #5
  %90 = bitcast i16* %84 to i8*
  %91 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %90) #5
  %92 = bitcast i16* %85 to i8*
  %93 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %92) #5
  %94 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %82) #5
  %95 = zext <16 x i8> %94 to <16 x i16>
  %96 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %95
  %97 = bitcast <32 x i8> %91 to <16 x i16>
  %98 = bitcast <32 x i8> %93 to <16 x i16>
  %99 = shufflevector <16 x i16> %97, <16 x i16> %98, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %100 = shufflevector <16 x i16> %95, <16 x i16> %96, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %101 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %99, <16 x i16> %100) #5
  %102 = add <8 x i32> %101, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %103 = ashr <8 x i32> %102, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %104 = shufflevector <16 x i16> %97, <16 x i16> %98, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %105 = shufflevector <16 x i16> %95, <16 x i16> %96, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %106 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %104, <16 x i16> %105) #5
  %107 = add <8 x i32> %106, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %108 = ashr <8 x i32> %107, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %109 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %103, <8 x i32> %108) #5
  %110 = bitcast <32 x i8> %89 to <16 x i16>
  %111 = sub <16 x i16> %109, %110
  %112 = sub <16 x i16> zeroinitializer, %111
  %113 = icmp slt <16 x i16> %111, zeroinitializer
  %114 = select <16 x i1> %113, <16 x i16> %112, <16 x i16> %111
  %115 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %114, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %116 = add <8 x i32> %115, %87
  %117 = getelementptr inbounds i16, i16* %83, i64 %78
  %118 = getelementptr inbounds i16, i16* %84, i64 16
  %119 = getelementptr inbounds i16, i16* %85, i64 %79
  %120 = getelementptr inbounds i8, i8* %82, i64 %80
  %121 = add nuw nsw i32 %86, 1
  %122 = icmp eq i32 %121, 64
  br i1 %122, label %123, label %81

123:                                              ; preds = %81
  %124 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %116, <8 x i32> %116) #5
  %125 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %124, <8 x i32> %124) #5
  br label %126

126:                                              ; preds = %65, %123
  %127 = phi <8 x i32> [ %67, %65 ], [ %125, %123 ]
  %128 = extractelement <8 x i32> %127, i64 0
  %129 = extractelement <8 x i32> %127, i64 4
  %130 = add nsw i32 %128, %129
  ret i32 %130
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_masked_sad64x16_avx2(i8*, i32, i8*, i32, i8*, i8*, i32, i32) local_unnamed_addr #1 {
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %10, label %167

10:                                               ; preds = %8
  %11 = ptrtoint i8* %4 to i64
  %12 = shl i64 %11, 1
  %13 = inttoptr i64 %12 to i16*
  %14 = ptrtoint i8* %2 to i64
  %15 = shl i64 %14, 1
  %16 = inttoptr i64 %15 to i16*
  %17 = ptrtoint i8* %0 to i64
  %18 = shl i64 %17, 1
  %19 = inttoptr i64 %18 to i16*
  %20 = sext i32 %1 to i64
  %21 = sext i32 %3 to i64
  %22 = sext i32 %6 to i64
  br label %23

23:                                               ; preds = %23, %10
  %24 = phi i8* [ %5, %10 ], [ %161, %23 ]
  %25 = phi i16* [ %19, %10 ], [ %158, %23 ]
  %26 = phi i16* [ %16, %10 ], [ %159, %23 ]
  %27 = phi i16* [ %13, %10 ], [ %160, %23 ]
  %28 = phi i32 [ 0, %10 ], [ %162, %23 ]
  %29 = phi <8 x i32> [ zeroinitializer, %10 ], [ %157, %23 ]
  %30 = bitcast i16* %25 to i8*
  %31 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %30) #5
  %32 = bitcast i16* %26 to i8*
  %33 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %32) #5
  %34 = bitcast i16* %27 to i8*
  %35 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %34) #5
  %36 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %24) #5
  %37 = zext <16 x i8> %36 to <16 x i16>
  %38 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %37
  %39 = bitcast <32 x i8> %33 to <16 x i16>
  %40 = bitcast <32 x i8> %35 to <16 x i16>
  %41 = shufflevector <16 x i16> %39, <16 x i16> %40, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %42 = shufflevector <16 x i16> %37, <16 x i16> %38, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %43 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %41, <16 x i16> %42) #5
  %44 = add <8 x i32> %43, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %45 = ashr <8 x i32> %44, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %46 = shufflevector <16 x i16> %39, <16 x i16> %40, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %47 = shufflevector <16 x i16> %37, <16 x i16> %38, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %48 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %46, <16 x i16> %47) #5
  %49 = add <8 x i32> %48, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %50 = ashr <8 x i32> %49, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %51 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %45, <8 x i32> %50) #5
  %52 = bitcast <32 x i8> %31 to <16 x i16>
  %53 = sub <16 x i16> %51, %52
  %54 = sub <16 x i16> zeroinitializer, %53
  %55 = icmp slt <16 x i16> %53, zeroinitializer
  %56 = select <16 x i1> %55, <16 x i16> %54, <16 x i16> %53
  %57 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %56, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %58 = add <8 x i32> %57, %29
  %59 = getelementptr inbounds i16, i16* %25, i64 16
  %60 = bitcast i16* %59 to i8*
  %61 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %60) #5
  %62 = getelementptr inbounds i16, i16* %26, i64 16
  %63 = bitcast i16* %62 to i8*
  %64 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %63) #5
  %65 = getelementptr inbounds i16, i16* %27, i64 16
  %66 = bitcast i16* %65 to i8*
  %67 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %66) #5
  %68 = getelementptr inbounds i8, i8* %24, i64 16
  %69 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %68) #5
  %70 = zext <16 x i8> %69 to <16 x i16>
  %71 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %70
  %72 = bitcast <32 x i8> %64 to <16 x i16>
  %73 = bitcast <32 x i8> %67 to <16 x i16>
  %74 = shufflevector <16 x i16> %72, <16 x i16> %73, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %75 = shufflevector <16 x i16> %70, <16 x i16> %71, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %76 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %74, <16 x i16> %75) #5
  %77 = add <8 x i32> %76, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %78 = ashr <8 x i32> %77, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %79 = shufflevector <16 x i16> %72, <16 x i16> %73, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %80 = shufflevector <16 x i16> %70, <16 x i16> %71, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %81 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %79, <16 x i16> %80) #5
  %82 = add <8 x i32> %81, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %83 = ashr <8 x i32> %82, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %84 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %78, <8 x i32> %83) #5
  %85 = bitcast <32 x i8> %61 to <16 x i16>
  %86 = sub <16 x i16> %84, %85
  %87 = sub <16 x i16> zeroinitializer, %86
  %88 = icmp slt <16 x i16> %86, zeroinitializer
  %89 = select <16 x i1> %88, <16 x i16> %87, <16 x i16> %86
  %90 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %89, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %91 = add <8 x i32> %90, %58
  %92 = getelementptr inbounds i16, i16* %25, i64 32
  %93 = bitcast i16* %92 to i8*
  %94 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %93) #5
  %95 = getelementptr inbounds i16, i16* %26, i64 32
  %96 = bitcast i16* %95 to i8*
  %97 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %96) #5
  %98 = getelementptr inbounds i16, i16* %27, i64 32
  %99 = bitcast i16* %98 to i8*
  %100 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %99) #5
  %101 = getelementptr inbounds i8, i8* %24, i64 32
  %102 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %101) #5
  %103 = zext <16 x i8> %102 to <16 x i16>
  %104 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %103
  %105 = bitcast <32 x i8> %97 to <16 x i16>
  %106 = bitcast <32 x i8> %100 to <16 x i16>
  %107 = shufflevector <16 x i16> %105, <16 x i16> %106, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %108 = shufflevector <16 x i16> %103, <16 x i16> %104, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %109 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %107, <16 x i16> %108) #5
  %110 = add <8 x i32> %109, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %111 = ashr <8 x i32> %110, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %112 = shufflevector <16 x i16> %105, <16 x i16> %106, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %113 = shufflevector <16 x i16> %103, <16 x i16> %104, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %114 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %112, <16 x i16> %113) #5
  %115 = add <8 x i32> %114, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %116 = ashr <8 x i32> %115, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %117 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %111, <8 x i32> %116) #5
  %118 = bitcast <32 x i8> %94 to <16 x i16>
  %119 = sub <16 x i16> %117, %118
  %120 = sub <16 x i16> zeroinitializer, %119
  %121 = icmp slt <16 x i16> %119, zeroinitializer
  %122 = select <16 x i1> %121, <16 x i16> %120, <16 x i16> %119
  %123 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %122, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %124 = add <8 x i32> %123, %91
  %125 = getelementptr inbounds i16, i16* %25, i64 48
  %126 = bitcast i16* %125 to i8*
  %127 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %126) #5
  %128 = getelementptr inbounds i16, i16* %26, i64 48
  %129 = bitcast i16* %128 to i8*
  %130 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %129) #5
  %131 = getelementptr inbounds i16, i16* %27, i64 48
  %132 = bitcast i16* %131 to i8*
  %133 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %132) #5
  %134 = getelementptr inbounds i8, i8* %24, i64 48
  %135 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %134) #5
  %136 = zext <16 x i8> %135 to <16 x i16>
  %137 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %136
  %138 = bitcast <32 x i8> %130 to <16 x i16>
  %139 = bitcast <32 x i8> %133 to <16 x i16>
  %140 = shufflevector <16 x i16> %138, <16 x i16> %139, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %141 = shufflevector <16 x i16> %136, <16 x i16> %137, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %142 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %140, <16 x i16> %141) #5
  %143 = add <8 x i32> %142, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %144 = ashr <8 x i32> %143, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %145 = shufflevector <16 x i16> %138, <16 x i16> %139, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %146 = shufflevector <16 x i16> %136, <16 x i16> %137, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %147 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %145, <16 x i16> %146) #5
  %148 = add <8 x i32> %147, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %149 = ashr <8 x i32> %148, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %150 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %144, <8 x i32> %149) #5
  %151 = bitcast <32 x i8> %127 to <16 x i16>
  %152 = sub <16 x i16> %150, %151
  %153 = sub <16 x i16> zeroinitializer, %152
  %154 = icmp slt <16 x i16> %152, zeroinitializer
  %155 = select <16 x i1> %154, <16 x i16> %153, <16 x i16> %152
  %156 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %155, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %157 = add <8 x i32> %156, %124
  %158 = getelementptr inbounds i16, i16* %25, i64 %20
  %159 = getelementptr inbounds i16, i16* %26, i64 %21
  %160 = getelementptr inbounds i16, i16* %27, i64 64
  %161 = getelementptr inbounds i8, i8* %24, i64 %22
  %162 = add nuw nsw i32 %28, 1
  %163 = icmp eq i32 %162, 16
  br i1 %163, label %164, label %23

164:                                              ; preds = %23
  %165 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %157, <8 x i32> %157) #5
  %166 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %165, <8 x i32> %165) #5
  br label %324

167:                                              ; preds = %8
  %168 = ptrtoint i8* %2 to i64
  %169 = shl i64 %168, 1
  %170 = inttoptr i64 %169 to i16*
  %171 = ptrtoint i8* %4 to i64
  %172 = shl i64 %171, 1
  %173 = inttoptr i64 %172 to i16*
  %174 = ptrtoint i8* %0 to i64
  %175 = shl i64 %174, 1
  %176 = inttoptr i64 %175 to i16*
  %177 = sext i32 %1 to i64
  %178 = sext i32 %3 to i64
  %179 = sext i32 %6 to i64
  br label %180

180:                                              ; preds = %180, %167
  %181 = phi i8* [ %5, %167 ], [ %318, %180 ]
  %182 = phi i16* [ %176, %167 ], [ %315, %180 ]
  %183 = phi i16* [ %173, %167 ], [ %316, %180 ]
  %184 = phi i16* [ %170, %167 ], [ %317, %180 ]
  %185 = phi i32 [ 0, %167 ], [ %319, %180 ]
  %186 = phi <8 x i32> [ zeroinitializer, %167 ], [ %314, %180 ]
  %187 = bitcast i16* %182 to i8*
  %188 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %187) #5
  %189 = bitcast i16* %183 to i8*
  %190 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %189) #5
  %191 = bitcast i16* %184 to i8*
  %192 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %191) #5
  %193 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %181) #5
  %194 = zext <16 x i8> %193 to <16 x i16>
  %195 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %194
  %196 = bitcast <32 x i8> %190 to <16 x i16>
  %197 = bitcast <32 x i8> %192 to <16 x i16>
  %198 = shufflevector <16 x i16> %196, <16 x i16> %197, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %199 = shufflevector <16 x i16> %194, <16 x i16> %195, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %200 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %198, <16 x i16> %199) #5
  %201 = add <8 x i32> %200, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %202 = ashr <8 x i32> %201, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %203 = shufflevector <16 x i16> %196, <16 x i16> %197, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %204 = shufflevector <16 x i16> %194, <16 x i16> %195, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %205 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %203, <16 x i16> %204) #5
  %206 = add <8 x i32> %205, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %207 = ashr <8 x i32> %206, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %208 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %202, <8 x i32> %207) #5
  %209 = bitcast <32 x i8> %188 to <16 x i16>
  %210 = sub <16 x i16> %208, %209
  %211 = sub <16 x i16> zeroinitializer, %210
  %212 = icmp slt <16 x i16> %210, zeroinitializer
  %213 = select <16 x i1> %212, <16 x i16> %211, <16 x i16> %210
  %214 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %213, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %215 = add <8 x i32> %214, %186
  %216 = getelementptr inbounds i16, i16* %182, i64 16
  %217 = bitcast i16* %216 to i8*
  %218 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %217) #5
  %219 = getelementptr inbounds i16, i16* %183, i64 16
  %220 = bitcast i16* %219 to i8*
  %221 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %220) #5
  %222 = getelementptr inbounds i16, i16* %184, i64 16
  %223 = bitcast i16* %222 to i8*
  %224 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %223) #5
  %225 = getelementptr inbounds i8, i8* %181, i64 16
  %226 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %225) #5
  %227 = zext <16 x i8> %226 to <16 x i16>
  %228 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %227
  %229 = bitcast <32 x i8> %221 to <16 x i16>
  %230 = bitcast <32 x i8> %224 to <16 x i16>
  %231 = shufflevector <16 x i16> %229, <16 x i16> %230, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %232 = shufflevector <16 x i16> %227, <16 x i16> %228, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %233 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %231, <16 x i16> %232) #5
  %234 = add <8 x i32> %233, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %235 = ashr <8 x i32> %234, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %236 = shufflevector <16 x i16> %229, <16 x i16> %230, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %237 = shufflevector <16 x i16> %227, <16 x i16> %228, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %238 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %236, <16 x i16> %237) #5
  %239 = add <8 x i32> %238, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %240 = ashr <8 x i32> %239, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %241 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %235, <8 x i32> %240) #5
  %242 = bitcast <32 x i8> %218 to <16 x i16>
  %243 = sub <16 x i16> %241, %242
  %244 = sub <16 x i16> zeroinitializer, %243
  %245 = icmp slt <16 x i16> %243, zeroinitializer
  %246 = select <16 x i1> %245, <16 x i16> %244, <16 x i16> %243
  %247 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %246, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %248 = add <8 x i32> %247, %215
  %249 = getelementptr inbounds i16, i16* %182, i64 32
  %250 = bitcast i16* %249 to i8*
  %251 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %250) #5
  %252 = getelementptr inbounds i16, i16* %183, i64 32
  %253 = bitcast i16* %252 to i8*
  %254 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %253) #5
  %255 = getelementptr inbounds i16, i16* %184, i64 32
  %256 = bitcast i16* %255 to i8*
  %257 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %256) #5
  %258 = getelementptr inbounds i8, i8* %181, i64 32
  %259 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %258) #5
  %260 = zext <16 x i8> %259 to <16 x i16>
  %261 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %260
  %262 = bitcast <32 x i8> %254 to <16 x i16>
  %263 = bitcast <32 x i8> %257 to <16 x i16>
  %264 = shufflevector <16 x i16> %262, <16 x i16> %263, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %265 = shufflevector <16 x i16> %260, <16 x i16> %261, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %266 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %264, <16 x i16> %265) #5
  %267 = add <8 x i32> %266, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %268 = ashr <8 x i32> %267, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %269 = shufflevector <16 x i16> %262, <16 x i16> %263, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %270 = shufflevector <16 x i16> %260, <16 x i16> %261, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %271 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %269, <16 x i16> %270) #5
  %272 = add <8 x i32> %271, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %273 = ashr <8 x i32> %272, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %274 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %268, <8 x i32> %273) #5
  %275 = bitcast <32 x i8> %251 to <16 x i16>
  %276 = sub <16 x i16> %274, %275
  %277 = sub <16 x i16> zeroinitializer, %276
  %278 = icmp slt <16 x i16> %276, zeroinitializer
  %279 = select <16 x i1> %278, <16 x i16> %277, <16 x i16> %276
  %280 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %279, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %281 = add <8 x i32> %280, %248
  %282 = getelementptr inbounds i16, i16* %182, i64 48
  %283 = bitcast i16* %282 to i8*
  %284 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %283) #5
  %285 = getelementptr inbounds i16, i16* %183, i64 48
  %286 = bitcast i16* %285 to i8*
  %287 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %286) #5
  %288 = getelementptr inbounds i16, i16* %184, i64 48
  %289 = bitcast i16* %288 to i8*
  %290 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %289) #5
  %291 = getelementptr inbounds i8, i8* %181, i64 48
  %292 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %291) #5
  %293 = zext <16 x i8> %292 to <16 x i16>
  %294 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %293
  %295 = bitcast <32 x i8> %287 to <16 x i16>
  %296 = bitcast <32 x i8> %290 to <16 x i16>
  %297 = shufflevector <16 x i16> %295, <16 x i16> %296, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %298 = shufflevector <16 x i16> %293, <16 x i16> %294, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %299 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %297, <16 x i16> %298) #5
  %300 = add <8 x i32> %299, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %301 = ashr <8 x i32> %300, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %302 = shufflevector <16 x i16> %295, <16 x i16> %296, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %303 = shufflevector <16 x i16> %293, <16 x i16> %294, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %304 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %302, <16 x i16> %303) #5
  %305 = add <8 x i32> %304, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %306 = ashr <8 x i32> %305, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %307 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %301, <8 x i32> %306) #5
  %308 = bitcast <32 x i8> %284 to <16 x i16>
  %309 = sub <16 x i16> %307, %308
  %310 = sub <16 x i16> zeroinitializer, %309
  %311 = icmp slt <16 x i16> %309, zeroinitializer
  %312 = select <16 x i1> %311, <16 x i16> %310, <16 x i16> %309
  %313 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %312, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #5
  %314 = add <8 x i32> %313, %281
  %315 = getelementptr inbounds i16, i16* %182, i64 %177
  %316 = getelementptr inbounds i16, i16* %183, i64 64
  %317 = getelementptr inbounds i16, i16* %184, i64 %178
  %318 = getelementptr inbounds i8, i8* %181, i64 %179
  %319 = add nuw nsw i32 %185, 1
  %320 = icmp eq i32 %319, 16
  br i1 %320, label %321, label %180

321:                                              ; preds = %180
  %322 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %314, <8 x i32> %314) #5
  %323 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %322, <8 x i32> %322) #5
  br label %324

324:                                              ; preds = %164, %321
  %325 = phi <8 x i32> [ %166, %164 ], [ %323, %321 ]
  %326 = extractelement <8 x i32> %325, i64 0
  %327 = extractelement <8 x i32> %325, i64 4
  %328 = add nsw i32 %326, %327
  ret i32 %328
}

declare i32 @aom_masked_sad4xh_ssse3(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32) local_unnamed_addr #2

declare i32 @aom_masked_sad8xh_ssse3(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind readonly
declare <16 x i8> @llvm.x86.sse3.ldu.dq(i8*) #3

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8>, <32 x i8>) #4

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.pmul.hr.sw(<16 x i16>, <16 x i16>) #4

; Function Attrs: nounwind readnone
declare <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16>, <16 x i16>) #4

; Function Attrs: nounwind readnone
declare <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8>, <32 x i8>) #4

; Function Attrs: nounwind readnone
declare <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32>, <8 x i32>) #4

; Function Attrs: nounwind readonly
declare <32 x i8> @llvm.x86.avx.ldu.dq.256(i8*) #3

declare i32 @aom_highbd_masked_sad4xh_ssse3(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind readnone
declare <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16>, <16 x i16>) #4

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32>, <8 x i32>) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }
attributes #4 = { nounwind readnone }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
