; ModuleID = '../../third_party/farmhash/src/src/farmhash.cc'
source_filename = "../../third_party/farmhash/src/src/farmhash.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZN10farmhashna6Hash64EPKcm(i8* readonly, i64) local_unnamed_addr #0 {
  %3 = icmp ult i64 %1, 33
  br i1 %3, label %4, label %127

4:                                                ; preds = %2
  %5 = icmp ult i64 %1, 17
  br i1 %5, label %6, label %85

6:                                                ; preds = %4
  %7 = icmp ugt i64 %1, 7
  br i1 %7, label %8, label %37

8:                                                ; preds = %6
  %9 = shl i64 %1, 1
  %10 = add nuw nsw i64 %9, -7286425919675154353
  %11 = bitcast i8* %0 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = add i64 %12, -7286425919675154353
  %14 = getelementptr inbounds i8, i8* %0, i64 %1
  %15 = getelementptr inbounds i8, i8* %14, i64 -8
  %16 = bitcast i8* %15 to i64*
  %17 = load i64, i64* %16, align 1
  %18 = lshr i64 %17, 37
  %19 = shl i64 %17, 27
  %20 = or i64 %19, %18
  %21 = mul i64 %20, %10
  %22 = add i64 %21, %13
  %23 = lshr i64 %13, 25
  %24 = shl i64 %13, 39
  %25 = or i64 %24, %23
  %26 = add i64 %25, %17
  %27 = mul i64 %26, %10
  %28 = xor i64 %27, %22
  %29 = mul i64 %28, %10
  %30 = lshr i64 %29, 47
  %31 = xor i64 %29, %27
  %32 = xor i64 %31, %30
  %33 = mul i64 %32, %10
  %34 = lshr i64 %33, 47
  %35 = xor i64 %34, %33
  %36 = mul i64 %35, %10
  br label %429

37:                                               ; preds = %6
  %38 = icmp ugt i64 %1, 3
  br i1 %38, label %39, label %61

39:                                               ; preds = %37
  %40 = shl i64 %1, 1
  %41 = add nuw nsw i64 %40, -7286425919675154353
  %42 = bitcast i8* %0 to i32*
  %43 = load i32, i32* %42, align 1
  %44 = zext i32 %43 to i64
  %45 = shl nuw nsw i64 %44, 3
  %46 = add nuw nsw i64 %45, %1
  %47 = getelementptr inbounds i8, i8* %0, i64 %1
  %48 = getelementptr inbounds i8, i8* %47, i64 -4
  %49 = bitcast i8* %48 to i32*
  %50 = load i32, i32* %49, align 1
  %51 = zext i32 %50 to i64
  %52 = xor i64 %46, %51
  %53 = mul i64 %52, %41
  %54 = lshr i64 %53, 47
  %55 = xor i64 %53, %51
  %56 = xor i64 %55, %54
  %57 = mul i64 %56, %41
  %58 = lshr i64 %57, 47
  %59 = xor i64 %58, %57
  %60 = mul i64 %59, %41
  br label %429

61:                                               ; preds = %37
  %62 = icmp eq i64 %1, 0
  br i1 %62, label %429, label %63

63:                                               ; preds = %61
  %64 = load i8, i8* %0, align 1
  %65 = lshr i64 %1, 1
  %66 = getelementptr inbounds i8, i8* %0, i64 %65
  %67 = load i8, i8* %66, align 1
  %68 = add nsw i64 %1, -1
  %69 = getelementptr inbounds i8, i8* %0, i64 %68
  %70 = load i8, i8* %69, align 1
  %71 = zext i8 %64 to i64
  %72 = zext i8 %67 to i64
  %73 = shl nuw nsw i64 %72, 8
  %74 = or i64 %73, %71
  %75 = zext i8 %70 to i64
  %76 = shl nuw nsw i64 %75, 2
  %77 = add nuw nsw i64 %76, %1
  %78 = mul i64 %74, -7286425919675154353
  %79 = and i64 %77, 4294967295
  %80 = mul i64 %79, -4348849565147123417
  %81 = xor i64 %80, %78
  %82 = lshr i64 %81, 47
  %83 = xor i64 %82, %81
  %84 = mul i64 %83, -7286425919675154353
  br label %429

85:                                               ; preds = %4
  %86 = shl i64 %1, 1
  %87 = add nuw nsw i64 %86, -7286425919675154353
  %88 = bitcast i8* %0 to i64*
  %89 = load i64, i64* %88, align 1
  %90 = mul i64 %89, -5435081209227447693
  %91 = getelementptr inbounds i8, i8* %0, i64 8
  %92 = bitcast i8* %91 to i64*
  %93 = load i64, i64* %92, align 1
  %94 = getelementptr inbounds i8, i8* %0, i64 %1
  %95 = getelementptr inbounds i8, i8* %94, i64 -8
  %96 = bitcast i8* %95 to i64*
  %97 = load i64, i64* %96, align 1
  %98 = mul i64 %97, %87
  %99 = getelementptr inbounds i8, i8* %94, i64 -16
  %100 = bitcast i8* %99 to i64*
  %101 = load i64, i64* %100, align 1
  %102 = mul i64 %101, -7286425919675154353
  %103 = add i64 %90, %93
  %104 = lshr i64 %103, 43
  %105 = shl i64 %103, 21
  %106 = or i64 %105, %104
  %107 = lshr i64 %98, 30
  %108 = shl i64 %98, 34
  %109 = or i64 %108, %107
  %110 = add i64 %102, %106
  %111 = add i64 %110, %109
  %112 = add i64 %93, -7286425919675154353
  %113 = lshr i64 %112, 18
  %114 = shl i64 %112, 46
  %115 = or i64 %114, %113
  %116 = add i64 %98, %90
  %117 = add i64 %116, %115
  %118 = xor i64 %111, %117
  %119 = mul i64 %118, %87
  %120 = lshr i64 %119, 47
  %121 = xor i64 %119, %117
  %122 = xor i64 %121, %120
  %123 = mul i64 %122, %87
  %124 = lshr i64 %123, 47
  %125 = xor i64 %124, %123
  %126 = mul i64 %125, %87
  br label %429

127:                                              ; preds = %2
  %128 = icmp ult i64 %1, 65
  br i1 %128, label %129, label %212

129:                                              ; preds = %127
  %130 = shl i64 %1, 1
  %131 = add nuw nsw i64 %130, -7286425919675154353
  %132 = bitcast i8* %0 to i64*
  %133 = load i64, i64* %132, align 1
  %134 = mul i64 %133, -7286425919675154353
  %135 = getelementptr inbounds i8, i8* %0, i64 8
  %136 = bitcast i8* %135 to i64*
  %137 = load i64, i64* %136, align 1
  %138 = getelementptr inbounds i8, i8* %0, i64 %1
  %139 = getelementptr inbounds i8, i8* %138, i64 -8
  %140 = bitcast i8* %139 to i64*
  %141 = load i64, i64* %140, align 1
  %142 = mul i64 %141, %131
  %143 = getelementptr inbounds i8, i8* %138, i64 -16
  %144 = bitcast i8* %143 to i64*
  %145 = load i64, i64* %144, align 1
  %146 = mul i64 %145, -7286425919675154353
  %147 = add i64 %134, %137
  %148 = lshr i64 %147, 43
  %149 = shl i64 %147, 21
  %150 = or i64 %149, %148
  %151 = lshr i64 %142, 30
  %152 = shl i64 %142, 34
  %153 = or i64 %152, %151
  %154 = add i64 %146, %150
  %155 = add i64 %154, %153
  %156 = add i64 %137, -7286425919675154353
  %157 = lshr i64 %156, 18
  %158 = shl i64 %156, 46
  %159 = or i64 %158, %157
  %160 = add i64 %142, %134
  %161 = add i64 %160, %159
  %162 = xor i64 %155, %161
  %163 = mul i64 %162, %131
  %164 = lshr i64 %163, 47
  %165 = xor i64 %163, %161
  %166 = xor i64 %165, %164
  %167 = mul i64 %166, %131
  %168 = lshr i64 %167, 47
  %169 = xor i64 %168, %167
  %170 = mul i64 %169, %131
  %171 = getelementptr inbounds i8, i8* %0, i64 16
  %172 = bitcast i8* %171 to i64*
  %173 = load i64, i64* %172, align 1
  %174 = mul i64 %173, %131
  %175 = getelementptr inbounds i8, i8* %0, i64 24
  %176 = bitcast i8* %175 to i64*
  %177 = load i64, i64* %176, align 1
  %178 = getelementptr inbounds i8, i8* %138, i64 -32
  %179 = bitcast i8* %178 to i64*
  %180 = load i64, i64* %179, align 1
  %181 = add i64 %155, %180
  %182 = mul i64 %181, %131
  %183 = getelementptr inbounds i8, i8* %138, i64 -24
  %184 = bitcast i8* %183 to i64*
  %185 = load i64, i64* %184, align 1
  %186 = add i64 %170, %185
  %187 = mul i64 %186, %131
  %188 = add i64 %174, %177
  %189 = lshr i64 %188, 43
  %190 = shl i64 %188, 21
  %191 = or i64 %190, %189
  %192 = lshr i64 %182, 30
  %193 = shl i64 %182, 34
  %194 = or i64 %193, %192
  %195 = add i64 %194, %191
  %196 = add i64 %195, %187
  %197 = add i64 %177, %134
  %198 = lshr i64 %197, 18
  %199 = shl i64 %197, 46
  %200 = or i64 %199, %198
  %201 = add i64 %200, %174
  %202 = add i64 %201, %182
  %203 = xor i64 %196, %202
  %204 = mul i64 %203, %131
  %205 = lshr i64 %204, 47
  %206 = xor i64 %204, %202
  %207 = xor i64 %206, %205
  %208 = mul i64 %207, %131
  %209 = lshr i64 %208, 47
  %210 = xor i64 %209, %208
  %211 = mul i64 %210, %131
  br label %429

212:                                              ; preds = %127
  %213 = bitcast i8* %0 to i64*
  %214 = load i64, i64* %213, align 1
  %215 = add i64 %214, 95310865018149119
  %216 = add i64 %1, -1
  %217 = and i64 %216, -64
  %218 = getelementptr inbounds i8, i8* %0, i64 %217
  %219 = and i64 %216, 63
  %220 = getelementptr inbounds i8, i8* %218, i64 %219
  br label %221

221:                                              ; preds = %307, %212
  %222 = phi i64 [ %214, %212 ], [ %309, %307 ]
  %223 = phi i64 [ 0, %212 ], [ %302, %307 ]
  %224 = phi i64 [ 0, %212 ], [ %304, %307 ]
  %225 = phi i64 [ 0, %212 ], [ %280, %307 ]
  %226 = phi i64 [ 0, %212 ], [ %282, %307 ]
  %227 = phi i64 [ 1390051526045402406, %212 ], [ %250, %307 ]
  %228 = phi i64 [ %215, %212 ], [ %260, %307 ]
  %229 = phi i8* [ %0, %212 ], [ %305, %307 ]
  %230 = phi i64 [ 2480279821605975764, %212 ], [ %255, %307 ]
  %231 = getelementptr inbounds i8, i8* %229, i64 8
  %232 = bitcast i8* %231 to i64*
  %233 = load i64, i64* %232, align 1
  %234 = add i64 %228, %225
  %235 = add i64 %234, %230
  %236 = add i64 %235, %233
  %237 = lshr i64 %236, 37
  %238 = shl i64 %236, 27
  %239 = or i64 %238, %237
  %240 = mul i64 %239, -5435081209227447693
  %241 = add i64 %230, %226
  %242 = getelementptr inbounds i8, i8* %229, i64 48
  %243 = bitcast i8* %242 to i64*
  %244 = load i64, i64* %243, align 1
  %245 = add i64 %241, %244
  %246 = lshr i64 %245, 42
  %247 = shl i64 %245, 22
  %248 = or i64 %247, %246
  %249 = mul i64 %248, -5435081209227447693
  %250 = xor i64 %240, %224
  %251 = getelementptr inbounds i8, i8* %229, i64 40
  %252 = bitcast i8* %251 to i64*
  %253 = load i64, i64* %252, align 1
  %254 = add i64 %253, %225
  %255 = add i64 %254, %249
  %256 = add i64 %227, %223
  %257 = lshr i64 %256, 33
  %258 = shl i64 %256, 31
  %259 = or i64 %258, %257
  %260 = mul i64 %259, -5435081209227447693
  %261 = mul i64 %226, -5435081209227447693
  %262 = getelementptr inbounds i8, i8* %229, i64 16
  %263 = bitcast i8* %262 to i64*
  %264 = load i64, i64* %263, align 1
  %265 = getelementptr inbounds i8, i8* %229, i64 24
  %266 = bitcast i8* %265 to i64*
  %267 = load i64, i64* %266, align 1
  %268 = add i64 %222, %261
  %269 = add i64 %268, %223
  %270 = add i64 %269, %267
  %271 = add i64 %270, %250
  %272 = lshr i64 %271, 21
  %273 = shl i64 %271, 43
  %274 = or i64 %273, %272
  %275 = add i64 %268, %233
  %276 = add i64 %275, %264
  %277 = lshr i64 %276, 44
  %278 = shl i64 %276, 20
  %279 = or i64 %278, %277
  %280 = add i64 %276, %267
  %281 = add i64 %279, %268
  %282 = add i64 %281, %274
  %283 = getelementptr inbounds i8, i8* %229, i64 32
  %284 = add i64 %260, %224
  %285 = add i64 %255, %264
  %286 = bitcast i8* %283 to i64*
  %287 = load i64, i64* %286, align 1
  %288 = getelementptr inbounds i8, i8* %229, i64 56
  %289 = bitcast i8* %288 to i64*
  %290 = load i64, i64* %289, align 1
  %291 = add i64 %284, %287
  %292 = add i64 %285, %291
  %293 = add i64 %292, %290
  %294 = lshr i64 %293, 21
  %295 = shl i64 %293, 43
  %296 = or i64 %295, %294
  %297 = add i64 %291, %253
  %298 = add i64 %297, %244
  %299 = lshr i64 %298, 44
  %300 = shl i64 %298, 20
  %301 = or i64 %300, %299
  %302 = add i64 %298, %290
  %303 = add i64 %301, %291
  %304 = add i64 %303, %296
  %305 = getelementptr inbounds i8, i8* %229, i64 64
  %306 = icmp eq i8* %305, %218
  br i1 %306, label %310, label %307

307:                                              ; preds = %221
  %308 = bitcast i8* %305 to i64*
  %309 = load i64, i64* %308, align 1
  br label %221

310:                                              ; preds = %221
  %311 = getelementptr inbounds i8, i8* %220, i64 -63
  %312 = shl i64 %250, 1
  %313 = and i64 %312, 510
  %314 = add nuw nsw i64 %313, -5435081209227447693
  %315 = add i64 %302, %219
  %316 = add i64 %315, %280
  %317 = add i64 %316, %315
  %318 = add i64 %255, %260
  %319 = add i64 %318, %316
  %320 = getelementptr inbounds i8, i8* %311, i64 8
  %321 = bitcast i8* %320 to i64*
  %322 = load i64, i64* %321, align 1
  %323 = add i64 %319, %322
  %324 = lshr i64 %323, 37
  %325 = shl i64 %323, 27
  %326 = or i64 %325, %324
  %327 = mul i64 %326, %314
  %328 = add i64 %282, %255
  %329 = getelementptr inbounds i8, i8* %311, i64 48
  %330 = bitcast i8* %329 to i64*
  %331 = load i64, i64* %330, align 1
  %332 = add i64 %328, %331
  %333 = lshr i64 %332, 42
  %334 = shl i64 %332, 22
  %335 = or i64 %334, %333
  %336 = mul i64 %335, %314
  %337 = mul i64 %304, 9
  %338 = xor i64 %327, %337
  %339 = mul i64 %316, 9
  %340 = getelementptr inbounds i8, i8* %311, i64 40
  %341 = bitcast i8* %340 to i64*
  %342 = load i64, i64* %341, align 1
  %343 = add i64 %342, %339
  %344 = add i64 %343, %336
  %345 = add i64 %317, %250
  %346 = lshr i64 %345, 33
  %347 = shl i64 %345, 31
  %348 = or i64 %347, %346
  %349 = mul i64 %348, %314
  %350 = mul i64 %282, %314
  %351 = bitcast i8* %311 to i64*
  %352 = load i64, i64* %351, align 1
  %353 = getelementptr inbounds i8, i8* %311, i64 16
  %354 = bitcast i8* %353 to i64*
  %355 = load i64, i64* %354, align 1
  %356 = getelementptr inbounds i8, i8* %311, i64 24
  %357 = bitcast i8* %356 to i64*
  %358 = load i64, i64* %357, align 1
  %359 = add i64 %352, %350
  %360 = add i64 %359, %317
  %361 = add i64 %360, %338
  %362 = add i64 %361, %358
  %363 = lshr i64 %362, 21
  %364 = shl i64 %362, 43
  %365 = or i64 %364, %363
  %366 = add i64 %359, %322
  %367 = add i64 %366, %355
  %368 = lshr i64 %367, 44
  %369 = shl i64 %367, 20
  %370 = or i64 %369, %368
  %371 = add i64 %367, %358
  %372 = add i64 %370, %359
  %373 = add i64 %372, %365
  %374 = getelementptr inbounds i8, i8* %311, i64 32
  %375 = add i64 %349, %304
  %376 = add i64 %344, %355
  %377 = bitcast i8* %374 to i64*
  %378 = load i64, i64* %377, align 1
  %379 = getelementptr inbounds i8, i8* %374, i64 24
  %380 = bitcast i8* %379 to i64*
  %381 = load i64, i64* %380, align 1
  %382 = add i64 %375, %378
  %383 = add i64 %376, %382
  %384 = add i64 %383, %381
  %385 = lshr i64 %384, 21
  %386 = shl i64 %384, 43
  %387 = or i64 %386, %385
  %388 = add i64 %382, %342
  %389 = add i64 %388, %331
  %390 = lshr i64 %389, 44
  %391 = shl i64 %389, 20
  %392 = or i64 %391, %390
  %393 = add i64 %389, %381
  %394 = add i64 %392, %382
  %395 = add i64 %394, %387
  %396 = xor i64 %393, %371
  %397 = mul i64 %396, %314
  %398 = lshr i64 %397, 47
  %399 = xor i64 %397, %393
  %400 = xor i64 %399, %398
  %401 = mul i64 %400, %314
  %402 = lshr i64 %401, 47
  %403 = xor i64 %402, %401
  %404 = mul i64 %403, %314
  %405 = lshr i64 %344, 47
  %406 = xor i64 %405, %344
  %407 = mul i64 %406, -4348849565147123417
  %408 = add i64 %407, %338
  %409 = add i64 %408, %404
  %410 = xor i64 %395, %373
  %411 = mul i64 %410, %314
  %412 = lshr i64 %411, 47
  %413 = xor i64 %411, %395
  %414 = xor i64 %413, %412
  %415 = mul i64 %414, %314
  %416 = lshr i64 %415, 47
  %417 = xor i64 %416, %415
  %418 = mul i64 %417, %314
  %419 = add i64 %418, %349
  %420 = xor i64 %419, %409
  %421 = mul i64 %420, %314
  %422 = lshr i64 %421, 47
  %423 = xor i64 %421, %419
  %424 = xor i64 %423, %422
  %425 = mul i64 %424, %314
  %426 = lshr i64 %425, 47
  %427 = xor i64 %426, %425
  %428 = mul i64 %427, %314
  br label %429

429:                                              ; preds = %63, %61, %39, %8, %310, %129, %85
  %430 = phi i64 [ %126, %85 ], [ %211, %129 ], [ %428, %310 ], [ %36, %8 ], [ %60, %39 ], [ %84, %63 ], [ -7286425919675154353, %61 ]
  ret i64 %430
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZN10farmhashna14Hash64WithSeedEPKcmm(i8*, i64, i64) local_unnamed_addr #0 {
  %4 = tail call i64 @_ZN10farmhashna6Hash64EPKcm(i8* %0, i64 %1) #4
  %5 = add i64 %4, 7286425919675154353
  %6 = xor i64 %5, %2
  %7 = mul i64 %6, -7070675565921424023
  %8 = lshr i64 %7, 47
  %9 = xor i64 %7, %2
  %10 = xor i64 %9, %8
  %11 = mul i64 %10, -7070675565921424023
  %12 = lshr i64 %11, 47
  %13 = xor i64 %12, %11
  %14 = mul i64 %13, -7070675565921424023
  ret i64 %14
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZN10farmhashna15Hash64WithSeedsEPKcmmm(i8*, i64, i64, i64) local_unnamed_addr #0 {
  %5 = tail call i64 @_ZN10farmhashna6Hash64EPKcm(i8* %0, i64 %1)
  %6 = sub i64 %5, %2
  %7 = xor i64 %6, %3
  %8 = mul i64 %7, -7070675565921424023
  %9 = lshr i64 %8, 47
  %10 = xor i64 %8, %3
  %11 = xor i64 %10, %9
  %12 = mul i64 %11, -7070675565921424023
  %13 = lshr i64 %12, 47
  %14 = xor i64 %13, %12
  %15 = mul i64 %14, -7070675565921424023
  ret i64 %15
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZN10farmhashuo15Hash64WithSeedsEPKcmmm(i8*, i64, i64, i64) local_unnamed_addr #0 {
  %5 = icmp ult i64 %1, 65
  br i1 %5, label %6, label %18

6:                                                ; preds = %4
  %7 = tail call i64 @_ZN10farmhashna6Hash64EPKcm(i8* %0, i64 %1) #4
  %8 = sub i64 %7, %2
  %9 = xor i64 %8, %3
  %10 = mul i64 %9, -7070675565921424023
  %11 = lshr i64 %10, 47
  %12 = xor i64 %10, %3
  %13 = xor i64 %12, %11
  %14 = mul i64 %13, -7070675565921424023
  %15 = lshr i64 %14, 47
  %16 = xor i64 %15, %14
  %17 = mul i64 %16, -7070675565921424023
  br label %243

18:                                               ; preds = %4
  %19 = mul i64 %3, -7286425919675154353
  %20 = add i64 %19, 113
  %21 = mul i64 %20, -7286425919675154353
  %22 = lshr i64 %21, 47
  %23 = xor i64 %22, %21
  %24 = mul i64 %23, -7286425919675154353
  %25 = sub i64 %2, %24
  %26 = mul i64 %2, -7286425919675154353
  %27 = and i64 %25, 130
  %28 = add nuw nsw i64 %27, -7286425919675154353
  %29 = add i64 %1, -1
  %30 = and i64 %29, -64
  %31 = getelementptr inbounds i8, i8* %0, i64 %30
  %32 = and i64 %29, 63
  %33 = getelementptr inbounds i8, i8* %31, i64 %32
  br label %34

34:                                               ; preds = %34, %18
  %35 = phi i64 [ 0, %18 ], [ %108, %34 ]
  %36 = phi i64 [ 0, %18 ], [ %116, %34 ]
  %37 = phi i64 [ %25, %18 ], [ %98, %34 ]
  %38 = phi i64 [ %2, %18 ], [ %106, %34 ]
  %39 = phi i64 [ %3, %18 ], [ %107, %34 ]
  %40 = phi i64 [ %24, %18 ], [ %82, %34 ]
  %41 = phi i64 [ %20, %18 ], [ %104, %34 ]
  %42 = phi i64 [ %26, %18 ], [ %113, %34 ]
  %43 = phi i8* [ %0, %18 ], [ %117, %34 ]
  %44 = bitcast i8* %43 to i64*
  %45 = load i64, i64* %44, align 1
  %46 = getelementptr inbounds i8, i8* %43, i64 8
  %47 = bitcast i8* %46 to i64*
  %48 = load i64, i64* %47, align 1
  %49 = getelementptr inbounds i8, i8* %43, i64 16
  %50 = bitcast i8* %49 to i64*
  %51 = load i64, i64* %50, align 1
  %52 = getelementptr inbounds i8, i8* %43, i64 24
  %53 = bitcast i8* %52 to i64*
  %54 = load i64, i64* %53, align 1
  %55 = getelementptr inbounds i8, i8* %43, i64 32
  %56 = bitcast i8* %55 to i64*
  %57 = load i64, i64* %56, align 1
  %58 = getelementptr inbounds i8, i8* %43, i64 40
  %59 = bitcast i8* %58 to i64*
  %60 = load i64, i64* %59, align 1
  %61 = getelementptr inbounds i8, i8* %43, i64 48
  %62 = bitcast i8* %61 to i64*
  %63 = load i64, i64* %62, align 1
  %64 = getelementptr inbounds i8, i8* %43, i64 56
  %65 = bitcast i8* %64 to i64*
  %66 = load i64, i64* %65, align 1
  %67 = add i64 %45, %42
  %68 = add i64 %67, %48
  %69 = add i64 %51, %41
  %70 = add i64 %54, %40
  %71 = add i64 %57, %38
  %72 = add i64 %48, %39
  %73 = add i64 %72, %60
  %74 = add i64 %63, %35
  %75 = add i64 %66, %36
  %76 = lshr i64 %68, 26
  %77 = shl i64 %68, 38
  %78 = or i64 %77, %76
  %79 = mul i64 %78, 9
  %80 = lshr i64 %69, 29
  %81 = shl i64 %69, 35
  %82 = or i64 %81, %80
  %83 = mul i64 %70, %28
  %84 = lshr i64 %71, 33
  %85 = shl i64 %71, 31
  %86 = or i64 %85, %84
  %87 = lshr i64 %73, 30
  %88 = shl i64 %73, 34
  %89 = or i64 %88, %87
  %90 = xor i64 %74, %79
  %91 = mul i64 %90, 9
  %92 = lshr i64 %83, 32
  %93 = shl i64 %83, 32
  %94 = or i64 %93, %92
  %95 = add i64 %75, %94
  %96 = mul i64 %95, 9
  %97 = add i64 %63, %45
  %98 = add i64 %97, %96
  %99 = add i64 %86, %51
  %100 = add i64 %89, %54
  %101 = add i64 %91, %57
  %102 = add i64 %79, %48
  %103 = add i64 %66, %37
  %104 = add i64 %103, %99
  %105 = sub i64 %102, %104
  %106 = add i64 %105, %99
  %107 = add i64 %100, %101
  %108 = add i64 %107, %101
  %109 = add i64 %63, %60
  %110 = add i64 %109, %75
  %111 = add i64 %110, %95
  %112 = add i64 %111, %105
  %113 = add i64 %112, %102
  %114 = lshr i64 %112, 34
  %115 = shl i64 %112, 30
  %116 = or i64 %115, %114
  %117 = getelementptr inbounds i8, i8* %43, i64 64
  %118 = icmp eq i8* %117, %31
  br i1 %118, label %119, label %34

119:                                              ; preds = %34
  %120 = getelementptr inbounds i8, i8* %33, i64 -63
  %121 = mul i64 %98, 9
  %122 = lshr i64 %107, 28
  %123 = shl i64 %107, 36
  %124 = or i64 %123, %122
  %125 = lshr i64 %106, 20
  %126 = shl i64 %106, 44
  %127 = or i64 %126, %125
  %128 = add i64 %108, %32
  %129 = add i64 %121, %104
  %130 = add i64 %129, %104
  %131 = getelementptr inbounds i8, i8* %120, i64 8
  %132 = bitcast i8* %131 to i64*
  %133 = load i64, i64* %132, align 1
  %134 = sub i64 %127, %113
  %135 = add i64 %134, %130
  %136 = add i64 %135, %133
  %137 = lshr i64 %136, 37
  %138 = shl i64 %136, 27
  %139 = or i64 %138, %137
  %140 = mul i64 %139, %28
  %141 = xor i64 %130, %124
  %142 = getelementptr inbounds i8, i8* %120, i64 48
  %143 = bitcast i8* %142 to i64*
  %144 = load i64, i64* %143, align 1
  %145 = xor i64 %141, %144
  %146 = lshr i64 %145, 42
  %147 = shl i64 %145, 22
  %148 = or i64 %147, %146
  %149 = mul i64 %148, %28
  %150 = mul i64 %116, 9
  %151 = xor i64 %140, %150
  %152 = getelementptr inbounds i8, i8* %120, i64 40
  %153 = bitcast i8* %152 to i64*
  %154 = load i64, i64* %153, align 1
  %155 = add i64 %154, %127
  %156 = add i64 %155, %149
  %157 = add i64 %128, %82
  %158 = lshr i64 %157, 33
  %159 = shl i64 %157, 31
  %160 = or i64 %159, %158
  %161 = mul i64 %160, %28
  %162 = mul i64 %124, %28
  %163 = bitcast i8* %120 to i64*
  %164 = load i64, i64* %163, align 1
  %165 = getelementptr inbounds i8, i8* %120, i64 16
  %166 = bitcast i8* %165 to i64*
  %167 = load i64, i64* %166, align 1
  %168 = getelementptr inbounds i8, i8* %120, i64 24
  %169 = bitcast i8* %168 to i64*
  %170 = load i64, i64* %169, align 1
  %171 = add i64 %164, %162
  %172 = add i64 %170, %151
  %173 = add i64 %172, %128
  %174 = add i64 %173, %171
  %175 = lshr i64 %174, 21
  %176 = shl i64 %174, 43
  %177 = or i64 %176, %175
  %178 = add i64 %171, %133
  %179 = add i64 %178, %167
  %180 = lshr i64 %179, 44
  %181 = shl i64 %179, 20
  %182 = or i64 %181, %180
  %183 = getelementptr inbounds i8, i8* %120, i64 32
  %184 = add i64 %161, %116
  %185 = add i64 %156, %167
  %186 = bitcast i8* %183 to i64*
  %187 = load i64, i64* %186, align 1
  %188 = getelementptr inbounds i8, i8* %183, i64 24
  %189 = bitcast i8* %188 to i64*
  %190 = load i64, i64* %189, align 1
  %191 = add i64 %184, %187
  %192 = add i64 %185, %191
  %193 = add i64 %192, %190
  %194 = lshr i64 %193, 21
  %195 = shl i64 %193, 43
  %196 = or i64 %195, %194
  %197 = add i64 %191, %154
  %198 = add i64 %197, %144
  %199 = lshr i64 %198, 44
  %200 = shl i64 %198, 20
  %201 = or i64 %200, %199
  %202 = add i64 %198, %190
  %203 = add i64 %172, %179
  %204 = xor i64 %202, %156
  %205 = xor i64 %204, %203
  %206 = mul i64 %205, %28
  %207 = lshr i64 %206, 47
  %208 = xor i64 %206, %204
  %209 = xor i64 %208, %207
  %210 = mul i64 %209, %28
  %211 = lshr i64 %210, 47
  %212 = xor i64 %211, %210
  %213 = mul i64 %212, %28
  %214 = sub i64 %161, %129
  %215 = add i64 %214, %213
  %216 = add i64 %156, %171
  %217 = add i64 %216, %182
  %218 = add i64 %217, %177
  %219 = add i64 %191, %161
  %220 = add i64 %219, %201
  %221 = add i64 %220, %196
  %222 = xor i64 %221, %218
  %223 = mul i64 %222, -7286425919675154353
  %224 = lshr i64 %223, 47
  %225 = xor i64 %223, %221
  %226 = xor i64 %225, %224
  %227 = mul i64 %226, -7286425919675154353
  %228 = lshr i64 %227, 30
  %229 = mul i64 %226, -4737503975807385600
  %230 = or i64 %228, %229
  %231 = mul i64 %230, -7286425919675154353
  %232 = xor i64 %231, %151
  %233 = xor i64 %232, %215
  %234 = mul i64 %233, -7286425919675154353
  %235 = lshr i64 %234, 47
  %236 = xor i64 %234, %232
  %237 = xor i64 %236, %235
  %238 = mul i64 %237, -7286425919675154353
  %239 = lshr i64 %238, 31
  %240 = mul i64 %237, 6854620048951083008
  %241 = or i64 %239, %240
  %242 = mul i64 %241, -7286425919675154353
  br label %243

243:                                              ; preds = %119, %6
  %244 = phi i64 [ %17, %6 ], [ %242, %119 ]
  ret i64 %244
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZN10farmhashuo14Hash64WithSeedEPKcmm(i8*, i64, i64) local_unnamed_addr #0 {
  %4 = icmp ult i64 %1, 65
  br i1 %4, label %5, label %17

5:                                                ; preds = %3
  %6 = tail call i64 @_ZN10farmhashna6Hash64EPKcm(i8* %0, i64 %1) #4
  %7 = add i64 %6, 7286425919675154353
  %8 = xor i64 %7, %2
  %9 = mul i64 %8, -7070675565921424023
  %10 = lshr i64 %9, 47
  %11 = xor i64 %9, %2
  %12 = xor i64 %11, %10
  %13 = mul i64 %12, -7070675565921424023
  %14 = lshr i64 %13, 47
  %15 = xor i64 %14, %13
  %16 = mul i64 %15, -7070675565921424023
  br label %19

17:                                               ; preds = %3
  %18 = tail call i64 @_ZN10farmhashuo15Hash64WithSeedsEPKcmmm(i8* %0, i64 %1, i64 0, i64 %2)
  br label %19

19:                                               ; preds = %17, %5
  %20 = phi i64 [ %16, %5 ], [ %18, %17 ]
  ret i64 %20
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZN10farmhashuo6Hash64EPKcm(i8* readonly, i64) local_unnamed_addr #0 {
  %3 = icmp ult i64 %1, 65
  br i1 %3, label %4, label %6

4:                                                ; preds = %2
  %5 = tail call i64 @_ZN10farmhashna6Hash64EPKcm(i8* %0, i64 %1)
  br label %8

6:                                                ; preds = %2
  %7 = tail call i64 @_ZN10farmhashuo15Hash64WithSeedsEPKcmmm(i8* %0, i64 %1, i64 81, i64 0)
  br label %8

8:                                                ; preds = %6, %4
  %9 = phi i64 [ %5, %4 ], [ %7, %6 ]
  ret i64 %9
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZN10farmhashxo6Hash64EPKcm(i8* readonly, i64) local_unnamed_addr #0 {
  %3 = icmp ult i64 %1, 33
  br i1 %3, label %4, label %127

4:                                                ; preds = %2
  %5 = icmp ult i64 %1, 17
  br i1 %5, label %6, label %85

6:                                                ; preds = %4
  %7 = icmp ugt i64 %1, 7
  br i1 %7, label %8, label %37

8:                                                ; preds = %6
  %9 = shl i64 %1, 1
  %10 = add nuw nsw i64 %9, -7286425919675154353
  %11 = bitcast i8* %0 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = add i64 %12, -7286425919675154353
  %14 = getelementptr inbounds i8, i8* %0, i64 %1
  %15 = getelementptr inbounds i8, i8* %14, i64 -8
  %16 = bitcast i8* %15 to i64*
  %17 = load i64, i64* %16, align 1
  %18 = lshr i64 %17, 37
  %19 = shl i64 %17, 27
  %20 = or i64 %19, %18
  %21 = mul i64 %20, %10
  %22 = add i64 %21, %13
  %23 = lshr i64 %13, 25
  %24 = shl i64 %13, 39
  %25 = or i64 %24, %23
  %26 = add i64 %25, %17
  %27 = mul i64 %26, %10
  %28 = xor i64 %27, %22
  %29 = mul i64 %28, %10
  %30 = lshr i64 %29, 47
  %31 = xor i64 %29, %27
  %32 = xor i64 %31, %30
  %33 = mul i64 %32, %10
  %34 = lshr i64 %33, 47
  %35 = xor i64 %34, %33
  %36 = mul i64 %35, %10
  br label %344

37:                                               ; preds = %6
  %38 = icmp ugt i64 %1, 3
  br i1 %38, label %39, label %61

39:                                               ; preds = %37
  %40 = shl i64 %1, 1
  %41 = add nuw nsw i64 %40, -7286425919675154353
  %42 = bitcast i8* %0 to i32*
  %43 = load i32, i32* %42, align 1
  %44 = zext i32 %43 to i64
  %45 = shl nuw nsw i64 %44, 3
  %46 = add nuw nsw i64 %45, %1
  %47 = getelementptr inbounds i8, i8* %0, i64 %1
  %48 = getelementptr inbounds i8, i8* %47, i64 -4
  %49 = bitcast i8* %48 to i32*
  %50 = load i32, i32* %49, align 1
  %51 = zext i32 %50 to i64
  %52 = xor i64 %46, %51
  %53 = mul i64 %52, %41
  %54 = lshr i64 %53, 47
  %55 = xor i64 %53, %51
  %56 = xor i64 %55, %54
  %57 = mul i64 %56, %41
  %58 = lshr i64 %57, 47
  %59 = xor i64 %58, %57
  %60 = mul i64 %59, %41
  br label %344

61:                                               ; preds = %37
  %62 = icmp eq i64 %1, 0
  br i1 %62, label %344, label %63

63:                                               ; preds = %61
  %64 = load i8, i8* %0, align 1
  %65 = lshr i64 %1, 1
  %66 = getelementptr inbounds i8, i8* %0, i64 %65
  %67 = load i8, i8* %66, align 1
  %68 = add nsw i64 %1, -1
  %69 = getelementptr inbounds i8, i8* %0, i64 %68
  %70 = load i8, i8* %69, align 1
  %71 = zext i8 %64 to i64
  %72 = zext i8 %67 to i64
  %73 = shl nuw nsw i64 %72, 8
  %74 = or i64 %73, %71
  %75 = zext i8 %70 to i64
  %76 = shl nuw nsw i64 %75, 2
  %77 = add nuw nsw i64 %76, %1
  %78 = mul i64 %74, -7286425919675154353
  %79 = and i64 %77, 4294967295
  %80 = mul i64 %79, -4348849565147123417
  %81 = xor i64 %80, %78
  %82 = lshr i64 %81, 47
  %83 = xor i64 %82, %81
  %84 = mul i64 %83, -7286425919675154353
  br label %344

85:                                               ; preds = %4
  %86 = shl i64 %1, 1
  %87 = add nuw nsw i64 %86, -7286425919675154353
  %88 = bitcast i8* %0 to i64*
  %89 = load i64, i64* %88, align 1
  %90 = mul i64 %89, -5435081209227447693
  %91 = getelementptr inbounds i8, i8* %0, i64 8
  %92 = bitcast i8* %91 to i64*
  %93 = load i64, i64* %92, align 1
  %94 = getelementptr inbounds i8, i8* %0, i64 %1
  %95 = getelementptr inbounds i8, i8* %94, i64 -8
  %96 = bitcast i8* %95 to i64*
  %97 = load i64, i64* %96, align 1
  %98 = mul i64 %97, %87
  %99 = getelementptr inbounds i8, i8* %94, i64 -16
  %100 = bitcast i8* %99 to i64*
  %101 = load i64, i64* %100, align 1
  %102 = mul i64 %101, -7286425919675154353
  %103 = add i64 %90, %93
  %104 = lshr i64 %103, 43
  %105 = shl i64 %103, 21
  %106 = or i64 %105, %104
  %107 = lshr i64 %98, 30
  %108 = shl i64 %98, 34
  %109 = or i64 %108, %107
  %110 = add i64 %102, %106
  %111 = add i64 %110, %109
  %112 = add i64 %93, -7286425919675154353
  %113 = lshr i64 %112, 18
  %114 = shl i64 %112, 46
  %115 = or i64 %114, %113
  %116 = add i64 %98, %90
  %117 = add i64 %116, %115
  %118 = xor i64 %111, %117
  %119 = mul i64 %118, %87
  %120 = lshr i64 %119, 47
  %121 = xor i64 %119, %117
  %122 = xor i64 %121, %120
  %123 = mul i64 %122, %87
  %124 = lshr i64 %123, 47
  %125 = xor i64 %124, %123
  %126 = mul i64 %125, %87
  br label %344

127:                                              ; preds = %2
  %128 = icmp ult i64 %1, 65
  br i1 %128, label %129, label %211

129:                                              ; preds = %127
  %130 = shl i64 %1, 1
  %131 = add nuw nsw i64 %130, -7286425919675154383
  %132 = bitcast i8* %0 to i64*
  %133 = load i64, i64* %132, align 1
  %134 = mul i64 %133, -5435081209227447693
  %135 = getelementptr inbounds i8, i8* %0, i64 8
  %136 = bitcast i8* %135 to i64*
  %137 = load i64, i64* %136, align 1
  %138 = getelementptr inbounds i8, i8* %0, i64 24
  %139 = bitcast i8* %138 to i64*
  %140 = load i64, i64* %139, align 1
  %141 = mul i64 %140, -7286425919675154383
  %142 = getelementptr inbounds i8, i8* %0, i64 16
  %143 = bitcast i8* %142 to i64*
  %144 = load i64, i64* %143, align 1
  %145 = mul i64 %144, -7286425919675154353
  %146 = add i64 %134, %137
  %147 = lshr i64 %146, 43
  %148 = shl i64 %146, 21
  %149 = or i64 %148, %147
  %150 = lshr i64 %141, 30
  %151 = mul i64 %140, -4737504491203461120
  %152 = or i64 %150, %151
  %153 = add i64 %149, %145
  %154 = add i64 %153, %152
  %155 = add i64 %137, -7286425919675154353
  %156 = lshr i64 %155, 18
  %157 = shl i64 %155, 46
  %158 = or i64 %157, %156
  %159 = add i64 %141, %134
  %160 = add i64 %159, %158
  %161 = xor i64 %154, %160
  %162 = mul i64 %161, -7286425919675154383
  %163 = lshr i64 %162, 47
  %164 = xor i64 %162, %160
  %165 = xor i64 %164, %163
  %166 = mul i64 %165, -7286425919675154383
  %167 = lshr i64 %166, 47
  %168 = xor i64 %167, %166
  %169 = getelementptr inbounds i8, i8* %0, i64 %1
  %170 = getelementptr inbounds i8, i8* %169, i64 -32
  %171 = bitcast i8* %170 to i64*
  %172 = load i64, i64* %171, align 1
  %173 = mul i64 %172, -5435081209227447693
  %174 = getelementptr inbounds i8, i8* %170, i64 8
  %175 = bitcast i8* %174 to i64*
  %176 = load i64, i64* %175, align 1
  %177 = getelementptr inbounds i8, i8* %170, i64 24
  %178 = bitcast i8* %177 to i64*
  %179 = load i64, i64* %178, align 1
  %180 = mul i64 %179, %131
  %181 = getelementptr inbounds i8, i8* %170, i64 16
  %182 = bitcast i8* %181 to i64*
  %183 = load i64, i64* %182, align 1
  %184 = mul i64 %183, -7286425919675154353
  %185 = add i64 %173, %176
  %186 = lshr i64 %185, 43
  %187 = shl i64 %185, 21
  %188 = or i64 %187, %186
  %189 = lshr i64 %180, 30
  %190 = shl i64 %180, 34
  %191 = or i64 %190, %189
  %192 = add i64 %188, %184
  %193 = add i64 %192, %191
  %194 = add i64 %176, -7286425919675154353
  %195 = lshr i64 %194, 18
  %196 = shl i64 %194, 46
  %197 = or i64 %196, %195
  %198 = add i64 %180, %173
  %199 = add i64 %198, %197
  %200 = xor i64 %193, %199
  %201 = mul i64 %200, %131
  %202 = lshr i64 %201, 47
  %203 = xor i64 %201, %199
  %204 = xor i64 %203, %202
  %205 = mul i64 %204, %131
  %206 = lshr i64 %205, 47
  %207 = xor i64 %206, %205
  %208 = mul i64 %207, %131
  %209 = add i64 %208, %168
  %210 = mul i64 %209, %131
  br label %344

211:                                              ; preds = %127
  %212 = icmp ult i64 %1, 97
  br i1 %212, label %213, label %338

213:                                              ; preds = %211
  %214 = shl i64 %1, 1
  %215 = add nuw nsw i64 %214, -7286425919675154467
  %216 = bitcast i8* %0 to i64*
  %217 = load i64, i64* %216, align 1
  %218 = mul i64 %217, -5435081209227447693
  %219 = getelementptr inbounds i8, i8* %0, i64 8
  %220 = bitcast i8* %219 to i64*
  %221 = load i64, i64* %220, align 1
  %222 = getelementptr inbounds i8, i8* %0, i64 24
  %223 = bitcast i8* %222 to i64*
  %224 = load i64, i64* %223, align 1
  %225 = mul i64 %224, -7286425919675154467
  %226 = getelementptr inbounds i8, i8* %0, i64 16
  %227 = bitcast i8* %226 to i64*
  %228 = load i64, i64* %227, align 1
  %229 = mul i64 %228, -7286425919675154353
  %230 = add i64 %218, %221
  %231 = lshr i64 %230, 43
  %232 = shl i64 %230, 21
  %233 = or i64 %232, %231
  %234 = lshr i64 %225, 30
  %235 = mul i64 %224, -4737505934312472576
  %236 = or i64 %234, %235
  %237 = add i64 %233, %229
  %238 = add i64 %237, %236
  %239 = add i64 %221, -7286425919675154353
  %240 = lshr i64 %239, 18
  %241 = shl i64 %239, 46
  %242 = or i64 %241, %240
  %243 = add i64 %225, %218
  %244 = add i64 %243, %242
  %245 = xor i64 %238, %244
  %246 = mul i64 %245, -7286425919675154467
  %247 = lshr i64 %246, 47
  %248 = xor i64 %246, %244
  %249 = xor i64 %248, %247
  %250 = mul i64 %249, -7286425919675154467
  %251 = lshr i64 %250, 47
  %252 = xor i64 %251, %250
  %253 = getelementptr inbounds i8, i8* %0, i64 32
  %254 = bitcast i8* %253 to i64*
  %255 = load i64, i64* %254, align 1
  %256 = mul i64 %255, -5435081209227447693
  %257 = getelementptr inbounds i8, i8* %0, i64 40
  %258 = bitcast i8* %257 to i64*
  %259 = load i64, i64* %258, align 1
  %260 = getelementptr inbounds i8, i8* %0, i64 56
  %261 = bitcast i8* %260 to i64*
  %262 = load i64, i64* %261, align 1
  %263 = mul i64 %262, %215
  %264 = getelementptr inbounds i8, i8* %0, i64 48
  %265 = bitcast i8* %264 to i64*
  %266 = load i64, i64* %265, align 1
  %267 = mul i64 %266, -7286425919675154353
  %268 = add i64 %256, %259
  %269 = lshr i64 %268, 43
  %270 = shl i64 %268, 21
  %271 = or i64 %270, %269
  %272 = lshr i64 %263, 30
  %273 = shl i64 %263, 34
  %274 = or i64 %273, %272
  %275 = add i64 %271, %267
  %276 = add i64 %275, %274
  %277 = add i64 %259, -7286425919675154353
  %278 = lshr i64 %277, 18
  %279 = shl i64 %277, 46
  %280 = or i64 %279, %278
  %281 = add i64 %263, %256
  %282 = add i64 %281, %280
  %283 = xor i64 %276, %282
  %284 = mul i64 %283, %215
  %285 = lshr i64 %284, 47
  %286 = xor i64 %284, %282
  %287 = xor i64 %286, %285
  %288 = mul i64 %287, %215
  %289 = lshr i64 %288, 47
  %290 = xor i64 %289, %288
  %291 = getelementptr inbounds i8, i8* %0, i64 %1
  %292 = getelementptr inbounds i8, i8* %291, i64 -32
  %293 = bitcast i8* %292 to i64*
  %294 = load i64, i64* %293, align 1
  %295 = mul i64 %294, -5435081209227447693
  %296 = getelementptr inbounds i8, i8* %292, i64 8
  %297 = bitcast i8* %296 to i64*
  %298 = load i64, i64* %297, align 1
  %299 = getelementptr inbounds i8, i8* %292, i64 24
  %300 = bitcast i8* %299 to i64*
  %301 = load i64, i64* %300, align 1
  %302 = mul i64 %301, %215
  %303 = getelementptr inbounds i8, i8* %292, i64 16
  %304 = bitcast i8* %303 to i64*
  %305 = load i64, i64* %304, align 1
  %306 = mul i64 %305, -7286425919675154353
  %307 = add i64 %295, %298
  %308 = lshr i64 %307, 43
  %309 = shl i64 %307, 21
  %310 = or i64 %309, %308
  %311 = lshr i64 %302, 30
  %312 = shl i64 %302, 34
  %313 = or i64 %312, %311
  %314 = add i64 %306, %310
  %315 = add i64 %314, %252
  %316 = add i64 %315, %313
  %317 = add i64 %298, -7286425919675154353
  %318 = lshr i64 %317, 18
  %319 = shl i64 %317, 46
  %320 = or i64 %319, %318
  %321 = add i64 %302, %295
  %322 = add i64 %321, %320
  %323 = add i64 %322, %290
  %324 = xor i64 %323, %316
  %325 = mul i64 %324, %215
  %326 = lshr i64 %325, 47
  %327 = xor i64 %325, %323
  %328 = xor i64 %327, %326
  %329 = mul i64 %328, %215
  %330 = lshr i64 %329, 47
  %331 = xor i64 %330, %329
  %332 = mul i64 %331, 9
  %333 = lshr i64 %250, 17
  %334 = lshr i64 %288, 21
  %335 = add nuw nsw i64 %334, %333
  %336 = add i64 %335, %332
  %337 = mul i64 %336, %215
  br label %344

338:                                              ; preds = %211
  %339 = icmp ult i64 %1, 257
  br i1 %339, label %340, label %342

340:                                              ; preds = %338
  %341 = tail call i64 @_ZN10farmhashna6Hash64EPKcm(i8* %0, i64 %1)
  br label %344

342:                                              ; preds = %338
  %343 = tail call i64 @_ZN10farmhashuo15Hash64WithSeedsEPKcmmm(i8* %0, i64 %1, i64 81, i64 0) #4
  br label %344

344:                                              ; preds = %63, %61, %39, %8, %342, %340, %213, %129, %85
  %345 = phi i64 [ %126, %85 ], [ %210, %129 ], [ %337, %213 ], [ %341, %340 ], [ %343, %342 ], [ %36, %8 ], [ %60, %39 ], [ %84, %63 ], [ -7286425919675154353, %61 ]
  ret i64 %345
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZN10farmhashxo15Hash64WithSeedsEPKcmmm(i8* readonly, i64, i64, i64) local_unnamed_addr #0 {
  %5 = tail call i64 @_ZN10farmhashuo15Hash64WithSeedsEPKcmmm(i8* %0, i64 %1, i64 %2, i64 %3)
  ret i64 %5
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZN10farmhashxo14Hash64WithSeedEPKcmm(i8*, i64, i64) local_unnamed_addr #0 {
  %4 = icmp ult i64 %1, 65
  br i1 %4, label %5, label %17

5:                                                ; preds = %3
  %6 = tail call i64 @_ZN10farmhashna6Hash64EPKcm(i8* %0, i64 %1) #4
  %7 = add i64 %6, 7286425919675154353
  %8 = xor i64 %7, %2
  %9 = mul i64 %8, -7070675565921424023
  %10 = lshr i64 %9, 47
  %11 = xor i64 %9, %2
  %12 = xor i64 %11, %10
  %13 = mul i64 %12, -7070675565921424023
  %14 = lshr i64 %13, 47
  %15 = xor i64 %14, %13
  %16 = mul i64 %15, -7070675565921424023
  br label %19

17:                                               ; preds = %3
  %18 = tail call i64 @_ZN10farmhashuo15Hash64WithSeedsEPKcmmm(i8* %0, i64 %1, i64 0, i64 %2) #4
  br label %19

19:                                               ; preds = %5, %17
  %20 = phi i64 [ %16, %5 ], [ %18, %17 ]
  ret i64 %20
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden i64 @_ZN10farmhashte6Hash64EPKcm(i8* readnone, i64) local_unnamed_addr #1 {
  %3 = urem i64 %1, 17
  %4 = inttoptr i64 %3 to i8*
  store i8 0, i8* %4, align 1
  %5 = icmp eq i8* %0, null
  %6 = select i1 %5, i64 0, i64 %1
  ret i64 %6
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden i64 @_ZN10farmhashte14Hash64WithSeedEPKcmm(i8* readnone, i64, i64) local_unnamed_addr #1 {
  %4 = urem i64 %1, 17
  %5 = inttoptr i64 %4 to i8*
  store i8 0, i8* %5, align 1
  %6 = icmp eq i8* %0, null
  %7 = select i1 %6, i64 0, i64 %1
  %8 = add i64 %7, %2
  ret i64 %8
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden i64 @_ZN10farmhashte15Hash64WithSeedsEPKcmmm(i8* readnone, i64, i64, i64) local_unnamed_addr #1 {
  %5 = urem i64 %1, 17
  %6 = inttoptr i64 %5 to i8*
  store i8 0, i8* %6, align 1
  %7 = icmp eq i8* %0, null
  %8 = select i1 %7, i64 0, i64 %1
  %9 = add i64 %8, %2
  %10 = add i64 %9, %3
  ret i64 %10
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden i32 @_ZN10farmhashnt6Hash32EPKcm(i8* readnone, i64) local_unnamed_addr #1 {
  %3 = urem i64 %1, 17
  %4 = inttoptr i64 %3 to i8*
  store i8 0, i8* %4, align 1
  %5 = icmp eq i8* %0, null
  %6 = trunc i64 %1 to i32
  %7 = select i1 %5, i32 0, i32 %6
  ret i32 %7
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden i32 @_ZN10farmhashnt14Hash32WithSeedEPKcmj(i8* readnone, i64, i32) local_unnamed_addr #1 {
  %4 = urem i64 %1, 17
  %5 = inttoptr i64 %4 to i8*
  store i8 0, i8* %5, align 1
  %6 = icmp eq i8* %0, null
  %7 = trunc i64 %1 to i32
  %8 = select i1 %6, i32 0, i32 %7
  %9 = add i32 %8, %2
  ret i32 %9
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZN10farmhashmk6Hash32EPKcm(i8* nocapture readonly, i64) local_unnamed_addr #2 {
  %3 = icmp ult i64 %1, 25
  br i1 %3, label %4, label %245

4:                                                ; preds = %2
  %5 = icmp ult i64 %1, 13
  br i1 %5, label %6, label %164

6:                                                ; preds = %4
  %7 = icmp ult i64 %1, 5
  br i1 %7, label %8, label %106

8:                                                ; preds = %6
  %9 = icmp eq i64 %1, 0
  br i1 %9, label %72, label %10

10:                                               ; preds = %8
  %11 = add i64 %1, -1
  %12 = and i64 %1, 3
  %13 = icmp ult i64 %11, 3
  br i1 %13, label %51, label %14

14:                                               ; preds = %10
  %15 = sub i64 %1, %12
  br label %16

16:                                               ; preds = %16, %14
  %17 = phi i32 [ 0, %14 ], [ %46, %16 ]
  %18 = phi i64 [ 0, %14 ], [ %48, %16 ]
  %19 = phi i32 [ 9, %14 ], [ %47, %16 ]
  %20 = phi i64 [ %15, %14 ], [ %49, %16 ]
  %21 = getelementptr inbounds i8, i8* %0, i64 %18
  %22 = load i8, i8* %21, align 1
  %23 = mul i32 %17, -862048943
  %24 = sext i8 %22 to i32
  %25 = add i32 %23, %24
  %26 = xor i32 %25, %19
  %27 = or i64 %18, 1
  %28 = getelementptr inbounds i8, i8* %0, i64 %27
  %29 = load i8, i8* %28, align 1
  %30 = mul i32 %25, -862048943
  %31 = sext i8 %29 to i32
  %32 = add i32 %30, %31
  %33 = xor i32 %32, %26
  %34 = or i64 %18, 2
  %35 = getelementptr inbounds i8, i8* %0, i64 %34
  %36 = load i8, i8* %35, align 1
  %37 = mul i32 %32, -862048943
  %38 = sext i8 %36 to i32
  %39 = add i32 %37, %38
  %40 = xor i32 %39, %33
  %41 = or i64 %18, 3
  %42 = getelementptr inbounds i8, i8* %0, i64 %41
  %43 = load i8, i8* %42, align 1
  %44 = mul i32 %39, -862048943
  %45 = sext i8 %43 to i32
  %46 = add i32 %44, %45
  %47 = xor i32 %46, %40
  %48 = add nuw i64 %18, 4
  %49 = add i64 %20, -4
  %50 = icmp eq i64 %49, 0
  br i1 %50, label %51, label %16

51:                                               ; preds = %16, %10
  %52 = phi i32 [ undef, %10 ], [ %46, %16 ]
  %53 = phi i32 [ undef, %10 ], [ %47, %16 ]
  %54 = phi i32 [ 0, %10 ], [ %46, %16 ]
  %55 = phi i64 [ 0, %10 ], [ %48, %16 ]
  %56 = phi i32 [ 9, %10 ], [ %47, %16 ]
  %57 = icmp eq i64 %12, 0
  br i1 %57, label %72, label %58

58:                                               ; preds = %51, %58
  %59 = phi i32 [ %67, %58 ], [ %54, %51 ]
  %60 = phi i64 [ %69, %58 ], [ %55, %51 ]
  %61 = phi i32 [ %68, %58 ], [ %56, %51 ]
  %62 = phi i64 [ %70, %58 ], [ %12, %51 ]
  %63 = getelementptr inbounds i8, i8* %0, i64 %60
  %64 = load i8, i8* %63, align 1
  %65 = mul i32 %59, -862048943
  %66 = sext i8 %64 to i32
  %67 = add i32 %65, %66
  %68 = xor i32 %67, %61
  %69 = add nuw i64 %60, 1
  %70 = add i64 %62, -1
  %71 = icmp eq i64 %70, 0
  br i1 %71, label %72, label %58, !llvm.loop !2

72:                                               ; preds = %51, %58, %8
  %73 = phi i32 [ 9, %8 ], [ %53, %51 ], [ %68, %58 ]
  %74 = phi i32 [ 0, %8 ], [ %52, %51 ], [ %67, %58 ]
  %75 = trunc i64 %1 to i32
  %76 = mul i32 %75, -862048943
  %77 = lshr i32 %76, 17
  %78 = mul i32 %75, 380141568
  %79 = or i32 %77, %78
  %80 = mul i32 %79, 461845907
  %81 = xor i32 %73, %80
  %82 = lshr i32 %81, 19
  %83 = shl i32 %81, 13
  %84 = or i32 %83, %82
  %85 = mul i32 %84, 5
  %86 = add i32 %85, -430675100
  %87 = mul i32 %74, -862048943
  %88 = lshr i32 %87, 17
  %89 = mul i32 %74, 380141568
  %90 = or i32 %88, %89
  %91 = mul i32 %90, 461845907
  %92 = xor i32 %91, %86
  %93 = lshr i32 %92, 19
  %94 = shl i32 %92, 13
  %95 = or i32 %94, %93
  %96 = mul i32 %95, 5
  %97 = add i32 %96, -430675100
  %98 = lshr i32 %97, 16
  %99 = xor i32 %98, %97
  %100 = mul i32 %99, -2048144789
  %101 = lshr i32 %100, 13
  %102 = xor i32 %101, %100
  %103 = mul i32 %102, -1028477387
  %104 = lshr i32 %103, 16
  %105 = xor i32 %104, %103
  br label %422

106:                                              ; preds = %6
  %107 = trunc i64 %1 to i32
  %108 = mul i32 %107, 5
  %109 = bitcast i8* %0 to i32*
  %110 = load i32, i32* %109, align 1
  %111 = add i32 %110, %107
  %112 = getelementptr inbounds i8, i8* %0, i64 %1
  %113 = getelementptr inbounds i8, i8* %112, i64 -4
  %114 = bitcast i8* %113 to i32*
  %115 = load i32, i32* %114, align 1
  %116 = add i32 %115, %108
  %117 = lshr i64 %1, 1
  %118 = and i64 %117, 4
  %119 = getelementptr inbounds i8, i8* %0, i64 %118
  %120 = bitcast i8* %119 to i32*
  %121 = load i32, i32* %120, align 1
  %122 = add i32 %121, 9
  %123 = mul i32 %111, -862048943
  %124 = lshr i32 %123, 17
  %125 = mul i32 %111, 380141568
  %126 = or i32 %124, %125
  %127 = mul i32 %126, 461845907
  %128 = xor i32 %127, %108
  %129 = lshr i32 %128, 19
  %130 = shl i32 %128, 13
  %131 = or i32 %130, %129
  %132 = mul i32 %131, 5
  %133 = add i32 %132, -430675100
  %134 = mul i32 %116, -862048943
  %135 = lshr i32 %134, 17
  %136 = mul i32 %116, 380141568
  %137 = or i32 %135, %136
  %138 = mul i32 %137, 461845907
  %139 = xor i32 %133, %138
  %140 = lshr i32 %139, 19
  %141 = shl i32 %139, 13
  %142 = or i32 %141, %140
  %143 = mul i32 %142, 5
  %144 = add i32 %143, -430675100
  %145 = mul i32 %122, -862048943
  %146 = lshr i32 %145, 17
  %147 = mul i32 %122, 380141568
  %148 = or i32 %146, %147
  %149 = mul i32 %148, 461845907
  %150 = xor i32 %144, %149
  %151 = lshr i32 %150, 19
  %152 = shl i32 %150, 13
  %153 = or i32 %152, %151
  %154 = mul i32 %153, 5
  %155 = add i32 %154, -430675100
  %156 = lshr i32 %155, 16
  %157 = xor i32 %156, %155
  %158 = mul i32 %157, -2048144789
  %159 = lshr i32 %158, 13
  %160 = xor i32 %159, %158
  %161 = mul i32 %160, -1028477387
  %162 = lshr i32 %161, 16
  %163 = xor i32 %162, %161
  br label %422

164:                                              ; preds = %4
  %165 = getelementptr inbounds i8, i8* %0, i64 -4
  %166 = lshr i64 %1, 1
  %167 = getelementptr inbounds i8, i8* %165, i64 %166
  %168 = bitcast i8* %167 to i32*
  %169 = load i32, i32* %168, align 1
  %170 = getelementptr inbounds i8, i8* %0, i64 4
  %171 = bitcast i8* %170 to i32*
  %172 = load i32, i32* %171, align 1
  %173 = getelementptr inbounds i8, i8* %0, i64 %1
  %174 = getelementptr inbounds i8, i8* %173, i64 -8
  %175 = bitcast i8* %174 to i32*
  %176 = load i32, i32* %175, align 1
  %177 = getelementptr inbounds i8, i8* %0, i64 %166
  %178 = bitcast i8* %177 to i32*
  %179 = load i32, i32* %178, align 1
  %180 = bitcast i8* %0 to i32*
  %181 = load i32, i32* %180, align 1
  %182 = getelementptr inbounds i8, i8* %173, i64 -4
  %183 = bitcast i8* %182 to i32*
  %184 = load i32, i32* %183, align 1
  %185 = mul i32 %179, -862048943
  %186 = trunc i64 %1 to i32
  %187 = add i32 %185, %186
  %188 = lshr i32 %169, 12
  %189 = shl i32 %169, 20
  %190 = or i32 %189, %188
  %191 = add i32 %184, %190
  %192 = mul i32 %176, -862048943
  %193 = lshr i32 %192, 17
  %194 = mul i32 %176, 380141568
  %195 = or i32 %193, %194
  %196 = mul i32 %195, 461845907
  %197 = xor i32 %196, %187
  %198 = lshr i32 %197, 19
  %199 = shl i32 %197, 13
  %200 = or i32 %199, %198
  %201 = mul i32 %200, 5
  %202 = add i32 %191, -430675100
  %203 = add i32 %202, %201
  %204 = lshr i32 %191, 3
  %205 = shl i32 %191, 29
  %206 = or i32 %205, %204
  %207 = add i32 %206, %176
  %208 = mul i32 %181, -862048943
  %209 = lshr i32 %208, 17
  %210 = mul i32 %181, 380141568
  %211 = or i32 %209, %210
  %212 = mul i32 %211, 461845907
  %213 = xor i32 %203, %212
  %214 = lshr i32 %213, 19
  %215 = shl i32 %213, 13
  %216 = or i32 %215, %214
  %217 = mul i32 %216, 5
  %218 = add i32 %207, -430675100
  %219 = add i32 %218, %217
  %220 = add i32 %207, %184
  %221 = lshr i32 %220, 12
  %222 = shl i32 %220, 20
  %223 = or i32 %222, %221
  %224 = mul i32 %172, -862048943
  %225 = lshr i32 %224, 17
  %226 = mul i32 %172, 380141568
  %227 = or i32 %225, %226
  %228 = mul i32 %227, 461845907
  %229 = xor i32 %219, %228
  %230 = lshr i32 %229, 19
  %231 = shl i32 %229, 13
  %232 = or i32 %231, %230
  %233 = mul i32 %232, 5
  %234 = add i32 %179, -430675100
  %235 = add i32 %234, %223
  %236 = add i32 %235, %233
  %237 = lshr i32 %236, 16
  %238 = xor i32 %237, %236
  %239 = mul i32 %238, -2048144789
  %240 = lshr i32 %239, 13
  %241 = xor i32 %240, %239
  %242 = mul i32 %241, -1028477387
  %243 = lshr i32 %242, 16
  %244 = xor i32 %243, %242
  br label %422

245:                                              ; preds = %2
  %246 = trunc i64 %1 to i32
  %247 = mul i32 %246, -862048943
  %248 = getelementptr inbounds i8, i8* %0, i64 %1
  %249 = getelementptr inbounds i8, i8* %248, i64 -4
  %250 = bitcast i8* %249 to i32*
  %251 = load i32, i32* %250, align 1
  %252 = mul i32 %251, -862048943
  %253 = lshr i32 %252, 17
  %254 = mul i32 %251, 380141568
  %255 = or i32 %253, %254
  %256 = mul i32 %255, 461845907
  %257 = getelementptr inbounds i8, i8* %248, i64 -8
  %258 = bitcast i8* %257 to i32*
  %259 = load i32, i32* %258, align 1
  %260 = mul i32 %259, -862048943
  %261 = lshr i32 %260, 17
  %262 = mul i32 %259, 380141568
  %263 = or i32 %261, %262
  %264 = mul i32 %263, 461845907
  %265 = getelementptr inbounds i8, i8* %248, i64 -16
  %266 = bitcast i8* %265 to i32*
  %267 = load i32, i32* %266, align 1
  %268 = mul i32 %267, -862048943
  %269 = lshr i32 %268, 17
  %270 = mul i32 %267, 380141568
  %271 = or i32 %269, %270
  %272 = mul i32 %271, 461845907
  %273 = getelementptr inbounds i8, i8* %248, i64 -12
  %274 = bitcast i8* %273 to i32*
  %275 = load i32, i32* %274, align 1
  %276 = mul i32 %275, -862048943
  %277 = lshr i32 %276, 17
  %278 = mul i32 %275, 380141568
  %279 = or i32 %277, %278
  %280 = mul i32 %279, 461845907
  %281 = getelementptr inbounds i8, i8* %248, i64 -20
  %282 = bitcast i8* %281 to i32*
  %283 = load i32, i32* %282, align 1
  %284 = mul i32 %283, -862048943
  %285 = lshr i32 %284, 17
  %286 = mul i32 %283, 380141568
  %287 = or i32 %285, %286
  %288 = mul i32 %287, 461845907
  %289 = xor i32 %256, %246
  %290 = lshr i32 %289, 19
  %291 = shl i32 %289, 13
  %292 = or i32 %291, %290
  %293 = mul i32 %292, 5
  %294 = add i32 %293, -430675100
  %295 = xor i32 %294, %272
  %296 = lshr i32 %295, 19
  %297 = shl i32 %295, 13
  %298 = or i32 %297, %296
  %299 = mul i32 %298, 5
  %300 = add i32 %299, -430675100
  %301 = xor i32 %264, %247
  %302 = lshr i32 %301, 19
  %303 = shl i32 %301, 13
  %304 = or i32 %303, %302
  %305 = mul i32 %304, 5
  %306 = add i32 %305, -430675100
  %307 = xor i32 %306, %280
  %308 = lshr i32 %307, 19
  %309 = shl i32 %307, 13
  %310 = or i32 %309, %308
  %311 = mul i32 %310, 5
  %312 = add i32 %311, -430675100
  %313 = add i32 %288, %247
  %314 = lshr i32 %313, 19
  %315 = shl i32 %313, 13
  %316 = or i32 %315, %314
  %317 = add i32 %316, 113
  %318 = add i64 %1, -1
  %319 = udiv i64 %318, 20
  br label %320

320:                                              ; preds = %320, %245
  %321 = phi i64 [ %319, %245 ], [ %384, %320 ]
  %322 = phi i32 [ %317, %245 ], [ %381, %320 ]
  %323 = phi i32 [ %312, %245 ], [ %382, %320 ]
  %324 = phi i32 [ %300, %245 ], [ %354, %320 ]
  %325 = phi i8* [ %0, %245 ], [ %383, %320 ]
  %326 = bitcast i8* %325 to i32*
  %327 = load i32, i32* %326, align 1
  %328 = getelementptr inbounds i8, i8* %325, i64 4
  %329 = bitcast i8* %328 to i32*
  %330 = load i32, i32* %329, align 1
  %331 = getelementptr inbounds i8, i8* %325, i64 8
  %332 = bitcast i8* %331 to i32*
  %333 = load i32, i32* %332, align 1
  %334 = getelementptr inbounds i8, i8* %325, i64 12
  %335 = bitcast i8* %334 to i32*
  %336 = load i32, i32* %335, align 1
  %337 = getelementptr inbounds i8, i8* %325, i64 16
  %338 = bitcast i8* %337 to i32*
  %339 = load i32, i32* %338, align 1
  %340 = add i32 %327, %324
  %341 = add i32 %330, %323
  %342 = add i32 %333, %322
  %343 = mul i32 %336, -862048943
  %344 = lshr i32 %343, 17
  %345 = mul i32 %336, 380141568
  %346 = or i32 %344, %345
  %347 = mul i32 %346, 461845907
  %348 = xor i32 %347, %340
  %349 = lshr i32 %348, 19
  %350 = shl i32 %348, 13
  %351 = or i32 %350, %349
  %352 = mul i32 %351, 5
  %353 = add i32 %339, -430675100
  %354 = add i32 %353, %352
  %355 = mul i32 %333, -862048943
  %356 = lshr i32 %355, 17
  %357 = mul i32 %333, 380141568
  %358 = or i32 %356, %357
  %359 = mul i32 %358, 461845907
  %360 = xor i32 %359, %341
  %361 = lshr i32 %360, 19
  %362 = shl i32 %360, 13
  %363 = or i32 %362, %361
  %364 = mul i32 %363, 5
  %365 = add i32 %327, -430675100
  %366 = add i32 %365, %364
  %367 = mul i32 %339, -862048943
  %368 = add i32 %367, %330
  %369 = mul i32 %368, -862048943
  %370 = lshr i32 %369, 17
  %371 = mul i32 %368, 380141568
  %372 = or i32 %370, %371
  %373 = mul i32 %372, 461845907
  %374 = xor i32 %373, %342
  %375 = lshr i32 %374, 19
  %376 = shl i32 %374, 13
  %377 = or i32 %376, %375
  %378 = mul i32 %377, 5
  %379 = add i32 %336, -430675100
  %380 = add i32 %379, %366
  %381 = add i32 %380, %378
  %382 = add i32 %381, %366
  %383 = getelementptr inbounds i8, i8* %325, i64 20
  %384 = add i64 %321, -1
  %385 = icmp eq i64 %384, 0
  br i1 %385, label %386, label %320

386:                                              ; preds = %320
  %387 = lshr i32 %382, 11
  %388 = shl i32 %382, 21
  %389 = or i32 %388, %387
  %390 = mul i32 %389, -862048943
  %391 = lshr i32 %390, 17
  %392 = mul i32 %389, 380141568
  %393 = or i32 %391, %392
  %394 = mul i32 %393, -862048943
  %395 = lshr i32 %381, 11
  %396 = shl i32 %381, 21
  %397 = or i32 %396, %395
  %398 = mul i32 %397, -862048943
  %399 = lshr i32 %398, 17
  %400 = mul i32 %397, 380141568
  %401 = or i32 %399, %400
  %402 = add i32 %394, %354
  %403 = lshr i32 %402, 19
  %404 = shl i32 %402, 13
  %405 = or i32 %404, %403
  %406 = mul i32 %405, 5
  %407 = add i32 %406, -430675100
  %408 = lshr i32 %407, 17
  %409 = shl i32 %407, 15
  %410 = or i32 %409, %408
  %411 = add i32 %410, %401
  %412 = mul i32 %411, -862048943
  %413 = lshr i32 %412, 19
  %414 = mul i32 %411, -978706432
  %415 = or i32 %413, %414
  %416 = mul i32 %415, 5
  %417 = add i32 %416, -430675100
  %418 = lshr i32 %417, 17
  %419 = shl i32 %417, 15
  %420 = or i32 %419, %418
  %421 = mul i32 %420, -862048943
  br label %422

422:                                              ; preds = %164, %106, %72, %386
  %423 = phi i32 [ %421, %386 ], [ %244, %164 ], [ %105, %72 ], [ %163, %106 ]
  ret i32 %423
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZN10farmhashmk14Hash32WithSeedEPKcmj(i8* nocapture readonly, i64, i32) local_unnamed_addr #2 {
  %4 = icmp ult i64 %1, 25
  br i1 %4, label %5, label %251

5:                                                ; preds = %3
  %6 = icmp ugt i64 %1, 12
  br i1 %6, label %7, label %91

7:                                                ; preds = %5
  %8 = mul i32 %2, -862048943
  %9 = getelementptr inbounds i8, i8* %0, i64 -4
  %10 = lshr i64 %1, 1
  %11 = getelementptr inbounds i8, i8* %9, i64 %10
  %12 = bitcast i8* %11 to i32*
  %13 = load i32, i32* %12, align 1
  %14 = getelementptr inbounds i8, i8* %0, i64 4
  %15 = bitcast i8* %14 to i32*
  %16 = load i32, i32* %15, align 1
  %17 = getelementptr inbounds i8, i8* %0, i64 %1
  %18 = getelementptr inbounds i8, i8* %17, i64 -8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 1
  %21 = getelementptr inbounds i8, i8* %0, i64 %10
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 1
  %24 = bitcast i8* %0 to i32*
  %25 = load i32, i32* %24, align 1
  %26 = getelementptr inbounds i8, i8* %17, i64 -4
  %27 = bitcast i8* %26 to i32*
  %28 = load i32, i32* %27, align 1
  %29 = mul i32 %23, -862048943
  %30 = trunc i64 %1 to i32
  %31 = add i32 %8, %30
  %32 = add i32 %31, %29
  %33 = lshr i32 %13, 12
  %34 = shl i32 %13, 20
  %35 = or i32 %34, %33
  %36 = add i32 %28, %35
  %37 = mul i32 %20, -862048943
  %38 = lshr i32 %37, 17
  %39 = mul i32 %20, 380141568
  %40 = or i32 %38, %39
  %41 = mul i32 %40, 461845907
  %42 = xor i32 %41, %32
  %43 = lshr i32 %42, 19
  %44 = shl i32 %42, 13
  %45 = or i32 %44, %43
  %46 = mul i32 %45, 5
  %47 = add i32 %36, -430675100
  %48 = add i32 %47, %46
  %49 = lshr i32 %36, 3
  %50 = shl i32 %36, 29
  %51 = or i32 %50, %49
  %52 = add i32 %51, %20
  %53 = mul i32 %25, -862048943
  %54 = lshr i32 %53, 17
  %55 = mul i32 %25, 380141568
  %56 = or i32 %54, %55
  %57 = mul i32 %56, 461845907
  %58 = xor i32 %48, %57
  %59 = lshr i32 %58, 19
  %60 = shl i32 %58, 13
  %61 = or i32 %60, %59
  %62 = mul i32 %61, 5
  %63 = add i32 %52, -430675100
  %64 = add i32 %63, %62
  %65 = add i32 %52, %28
  %66 = lshr i32 %65, 12
  %67 = shl i32 %65, 20
  %68 = or i32 %67, %66
  %69 = xor i32 %16, %8
  %70 = mul i32 %69, -862048943
  %71 = lshr i32 %70, 17
  %72 = mul i32 %69, 380141568
  %73 = or i32 %71, %72
  %74 = mul i32 %73, 461845907
  %75 = xor i32 %64, %74
  %76 = lshr i32 %75, 19
  %77 = shl i32 %75, 13
  %78 = or i32 %77, %76
  %79 = mul i32 %78, 5
  %80 = add i32 %23, -430675100
  %81 = add i32 %80, %68
  %82 = add i32 %81, %79
  %83 = lshr i32 %82, 16
  %84 = xor i32 %83, %82
  %85 = mul i32 %84, -2048144789
  %86 = lshr i32 %85, 13
  %87 = xor i32 %86, %85
  %88 = mul i32 %87, -1028477387
  %89 = lshr i32 %88, 16
  %90 = xor i32 %89, %88
  br label %347

91:                                               ; preds = %5
  %92 = icmp ugt i64 %1, 4
  br i1 %92, label %93, label %153

93:                                               ; preds = %91
  %94 = trunc i64 %1 to i32
  %95 = mul i32 %94, 5
  %96 = add i32 %95, %2
  %97 = bitcast i8* %0 to i32*
  %98 = load i32, i32* %97, align 1
  %99 = add i32 %98, %94
  %100 = getelementptr inbounds i8, i8* %0, i64 %1
  %101 = getelementptr inbounds i8, i8* %100, i64 -4
  %102 = bitcast i8* %101 to i32*
  %103 = load i32, i32* %102, align 1
  %104 = add i32 %103, %95
  %105 = lshr i64 %1, 1
  %106 = and i64 %105, 4
  %107 = getelementptr inbounds i8, i8* %0, i64 %106
  %108 = bitcast i8* %107 to i32*
  %109 = load i32, i32* %108, align 1
  %110 = add i32 %109, 9
  %111 = mul i32 %99, -862048943
  %112 = lshr i32 %111, 17
  %113 = mul i32 %99, 380141568
  %114 = or i32 %112, %113
  %115 = mul i32 %114, 461845907
  %116 = xor i32 %115, %96
  %117 = lshr i32 %116, 19
  %118 = shl i32 %116, 13
  %119 = or i32 %118, %117
  %120 = mul i32 %119, 5
  %121 = add i32 %120, -430675100
  %122 = mul i32 %104, -862048943
  %123 = lshr i32 %122, 17
  %124 = mul i32 %104, 380141568
  %125 = or i32 %123, %124
  %126 = mul i32 %125, 461845907
  %127 = xor i32 %121, %126
  %128 = lshr i32 %127, 19
  %129 = shl i32 %127, 13
  %130 = or i32 %129, %128
  %131 = mul i32 %130, 5
  %132 = add i32 %131, -430675100
  %133 = mul i32 %110, -862048943
  %134 = lshr i32 %133, 17
  %135 = mul i32 %110, 380141568
  %136 = or i32 %134, %135
  %137 = mul i32 %136, 461845907
  %138 = xor i32 %132, %137
  %139 = lshr i32 %138, 19
  %140 = shl i32 %138, 13
  %141 = or i32 %140, %139
  %142 = mul i32 %141, 5
  %143 = add i32 %142, -430675100
  %144 = xor i32 %143, %2
  %145 = lshr i32 %144, 16
  %146 = xor i32 %145, %144
  %147 = mul i32 %146, -2048144789
  %148 = lshr i32 %147, 13
  %149 = xor i32 %148, %147
  %150 = mul i32 %149, -1028477387
  %151 = lshr i32 %150, 16
  %152 = xor i32 %151, %150
  br label %347

153:                                              ; preds = %91
  %154 = icmp eq i64 %1, 0
  br i1 %154, label %217, label %155

155:                                              ; preds = %153
  %156 = add i64 %1, -1
  %157 = and i64 %1, 3
  %158 = icmp ult i64 %156, 3
  br i1 %158, label %196, label %159

159:                                              ; preds = %155
  %160 = sub i64 %1, %157
  br label %161

161:                                              ; preds = %161, %159
  %162 = phi i32 [ %2, %159 ], [ %191, %161 ]
  %163 = phi i64 [ 0, %159 ], [ %193, %161 ]
  %164 = phi i32 [ 9, %159 ], [ %192, %161 ]
  %165 = phi i64 [ %160, %159 ], [ %194, %161 ]
  %166 = getelementptr inbounds i8, i8* %0, i64 %163
  %167 = load i8, i8* %166, align 1
  %168 = mul i32 %162, -862048943
  %169 = sext i8 %167 to i32
  %170 = add i32 %168, %169
  %171 = xor i32 %170, %164
  %172 = or i64 %163, 1
  %173 = getelementptr inbounds i8, i8* %0, i64 %172
  %174 = load i8, i8* %173, align 1
  %175 = mul i32 %170, -862048943
  %176 = sext i8 %174 to i32
  %177 = add i32 %175, %176
  %178 = xor i32 %177, %171
  %179 = or i64 %163, 2
  %180 = getelementptr inbounds i8, i8* %0, i64 %179
  %181 = load i8, i8* %180, align 1
  %182 = mul i32 %177, -862048943
  %183 = sext i8 %181 to i32
  %184 = add i32 %182, %183
  %185 = xor i32 %184, %178
  %186 = or i64 %163, 3
  %187 = getelementptr inbounds i8, i8* %0, i64 %186
  %188 = load i8, i8* %187, align 1
  %189 = mul i32 %184, -862048943
  %190 = sext i8 %188 to i32
  %191 = add i32 %189, %190
  %192 = xor i32 %191, %185
  %193 = add nuw i64 %163, 4
  %194 = add i64 %165, -4
  %195 = icmp eq i64 %194, 0
  br i1 %195, label %196, label %161

196:                                              ; preds = %161, %155
  %197 = phi i32 [ undef, %155 ], [ %191, %161 ]
  %198 = phi i32 [ undef, %155 ], [ %192, %161 ]
  %199 = phi i32 [ %2, %155 ], [ %191, %161 ]
  %200 = phi i64 [ 0, %155 ], [ %193, %161 ]
  %201 = phi i32 [ 9, %155 ], [ %192, %161 ]
  %202 = icmp eq i64 %157, 0
  br i1 %202, label %217, label %203

203:                                              ; preds = %196, %203
  %204 = phi i32 [ %212, %203 ], [ %199, %196 ]
  %205 = phi i64 [ %214, %203 ], [ %200, %196 ]
  %206 = phi i32 [ %213, %203 ], [ %201, %196 ]
  %207 = phi i64 [ %215, %203 ], [ %157, %196 ]
  %208 = getelementptr inbounds i8, i8* %0, i64 %205
  %209 = load i8, i8* %208, align 1
  %210 = mul i32 %204, -862048943
  %211 = sext i8 %209 to i32
  %212 = add i32 %210, %211
  %213 = xor i32 %212, %206
  %214 = add nuw i64 %205, 1
  %215 = add i64 %207, -1
  %216 = icmp eq i64 %215, 0
  br i1 %216, label %217, label %203, !llvm.loop !4

217:                                              ; preds = %196, %203, %153
  %218 = phi i32 [ 9, %153 ], [ %198, %196 ], [ %213, %203 ]
  %219 = phi i32 [ %2, %153 ], [ %197, %196 ], [ %212, %203 ]
  %220 = trunc i64 %1 to i32
  %221 = mul i32 %220, -862048943
  %222 = lshr i32 %221, 17
  %223 = mul i32 %220, 380141568
  %224 = or i32 %222, %223
  %225 = mul i32 %224, 461845907
  %226 = xor i32 %218, %225
  %227 = lshr i32 %226, 19
  %228 = shl i32 %226, 13
  %229 = or i32 %228, %227
  %230 = mul i32 %229, 5
  %231 = add i32 %230, -430675100
  %232 = mul i32 %219, -862048943
  %233 = lshr i32 %232, 17
  %234 = mul i32 %219, 380141568
  %235 = or i32 %233, %234
  %236 = mul i32 %235, 461845907
  %237 = xor i32 %236, %231
  %238 = lshr i32 %237, 19
  %239 = shl i32 %237, 13
  %240 = or i32 %239, %238
  %241 = mul i32 %240, 5
  %242 = add i32 %241, -430675100
  %243 = lshr i32 %242, 16
  %244 = xor i32 %243, %242
  %245 = mul i32 %244, -2048144789
  %246 = lshr i32 %245, 13
  %247 = xor i32 %246, %245
  %248 = mul i32 %247, -1028477387
  %249 = lshr i32 %248, 16
  %250 = xor i32 %249, %248
  br label %347

251:                                              ; preds = %3
  %252 = trunc i64 %1 to i32
  %253 = xor i32 %252, %2
  %254 = getelementptr inbounds i8, i8* %0, i64 8
  %255 = bitcast i8* %254 to i32*
  %256 = load i32, i32* %255, align 1
  %257 = getelementptr inbounds i8, i8* %0, i64 4
  %258 = bitcast i8* %257 to i32*
  %259 = load i32, i32* %258, align 1
  %260 = getelementptr inbounds i8, i8* %0, i64 24
  %261 = getelementptr inbounds i8, i8* %0, i64 16
  %262 = bitcast i8* %261 to i32*
  %263 = load i32, i32* %262, align 1
  %264 = getelementptr inbounds i8, i8* %0, i64 12
  %265 = bitcast i8* %264 to i32*
  %266 = load i32, i32* %265, align 1
  %267 = bitcast i8* %0 to i32*
  %268 = load i32, i32* %267, align 1
  %269 = getelementptr inbounds i8, i8* %0, i64 20
  %270 = bitcast i8* %269 to i32*
  %271 = load i32, i32* %270, align 1
  %272 = mul i32 %266, -862048943
  %273 = add i32 %253, 24
  %274 = add i32 %273, %272
  %275 = lshr i32 %256, 12
  %276 = shl i32 %256, 20
  %277 = or i32 %276, %275
  %278 = add i32 %271, %277
  %279 = mul i32 %263, -862048943
  %280 = lshr i32 %279, 17
  %281 = mul i32 %263, 380141568
  %282 = or i32 %280, %281
  %283 = mul i32 %282, 461845907
  %284 = xor i32 %283, %274
  %285 = lshr i32 %284, 19
  %286 = shl i32 %284, 13
  %287 = or i32 %286, %285
  %288 = mul i32 %287, 5
  %289 = add i32 %278, -430675100
  %290 = add i32 %289, %288
  %291 = lshr i32 %278, 3
  %292 = shl i32 %278, 29
  %293 = or i32 %292, %291
  %294 = add i32 %293, %263
  %295 = mul i32 %268, -862048943
  %296 = lshr i32 %295, 17
  %297 = mul i32 %268, 380141568
  %298 = or i32 %296, %297
  %299 = mul i32 %298, 461845907
  %300 = xor i32 %290, %299
  %301 = lshr i32 %300, 19
  %302 = shl i32 %300, 13
  %303 = or i32 %302, %301
  %304 = mul i32 %303, 5
  %305 = add i32 %294, -430675100
  %306 = add i32 %305, %304
  %307 = add i32 %294, %271
  %308 = lshr i32 %307, 12
  %309 = shl i32 %307, 20
  %310 = or i32 %309, %308
  %311 = xor i32 %259, %253
  %312 = mul i32 %311, -862048943
  %313 = lshr i32 %312, 17
  %314 = mul i32 %311, 380141568
  %315 = or i32 %313, %314
  %316 = mul i32 %315, 461845907
  %317 = xor i32 %306, %316
  %318 = lshr i32 %317, 19
  %319 = shl i32 %317, 13
  %320 = or i32 %319, %318
  %321 = mul i32 %320, 5
  %322 = add i32 %266, -430675100
  %323 = add i32 %322, %310
  %324 = add i32 %323, %321
  %325 = lshr i32 %324, 16
  %326 = xor i32 %325, %324
  %327 = mul i32 %326, -2048144789
  %328 = lshr i32 %327, 13
  %329 = xor i32 %328, %327
  %330 = mul i32 %329, -1028477387
  %331 = lshr i32 %330, 16
  %332 = add i64 %1, -24
  %333 = tail call i32 @_ZN10farmhashmk6Hash32EPKcm(i8* %260, i64 %332)
  %334 = add i32 %333, %2
  %335 = mul i32 %334, -862048943
  %336 = lshr i32 %335, 17
  %337 = mul i32 %334, 380141568
  %338 = or i32 %336, %337
  %339 = mul i32 %338, 461845907
  %340 = xor i32 %330, %339
  %341 = xor i32 %340, %331
  %342 = lshr i32 %340, 19
  %343 = shl i32 %341, 13
  %344 = or i32 %343, %342
  %345 = mul i32 %344, 5
  %346 = add i32 %345, -430675100
  br label %347

347:                                              ; preds = %251, %217, %93, %7
  %348 = phi i32 [ %90, %7 ], [ %152, %93 ], [ %250, %217 ], [ %346, %251 ]
  ret i32 %348
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden i32 @_ZN10farmhashsu6Hash32EPKcm(i8* readnone, i64) local_unnamed_addr #1 {
  %3 = urem i64 %1, 17
  %4 = inttoptr i64 %3 to i8*
  store i8 0, i8* %4, align 1
  %5 = icmp eq i8* %0, null
  %6 = trunc i64 %1 to i32
  %7 = select i1 %5, i32 0, i32 %6
  ret i32 %7
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden i32 @_ZN10farmhashsu14Hash32WithSeedEPKcmj(i8* readnone, i64, i32) local_unnamed_addr #1 {
  %4 = urem i64 %1, 17
  %5 = inttoptr i64 %4 to i8*
  store i8 0, i8* %5, align 1
  %6 = icmp eq i8* %0, null
  %7 = trunc i64 %1 to i32
  %8 = select i1 %6, i32 0, i32 %7
  %9 = add i32 %8, %2
  ret i32 %9
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden i32 @_ZN10farmhashsa6Hash32EPKcm(i8* readnone, i64) local_unnamed_addr #1 {
  %3 = urem i64 %1, 17
  %4 = inttoptr i64 %3 to i8*
  store i8 0, i8* %4, align 1
  %5 = icmp eq i8* %0, null
  %6 = trunc i64 %1 to i32
  %7 = select i1 %5, i32 0, i32 %6
  ret i32 %7
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden i32 @_ZN10farmhashsa14Hash32WithSeedEPKcmj(i8* readnone, i64, i32) local_unnamed_addr #1 {
  %4 = urem i64 %1, 17
  %5 = inttoptr i64 %4 to i8*
  store i8 0, i8* %5, align 1
  %6 = icmp eq i8* %0, null
  %7 = trunc i64 %1 to i32
  %8 = select i1 %6, i32 0, i32 %7
  %9 = add i32 %8, %2
  ret i32 %9
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @_ZN10farmhashcc6Hash32EPKcm(i8* nocapture readonly, i64) local_unnamed_addr #0 {
  %3 = icmp ult i64 %1, 25
  br i1 %3, label %4, label %260

4:                                                ; preds = %2
  %5 = icmp ult i64 %1, 13
  br i1 %5, label %6, label %164

6:                                                ; preds = %4
  %7 = icmp ult i64 %1, 5
  br i1 %7, label %8, label %106

8:                                                ; preds = %6
  %9 = icmp eq i64 %1, 0
  br i1 %9, label %72, label %10

10:                                               ; preds = %8
  %11 = add i64 %1, -1
  %12 = and i64 %1, 3
  %13 = icmp ult i64 %11, 3
  br i1 %13, label %51, label %14

14:                                               ; preds = %10
  %15 = sub i64 %1, %12
  br label %16

16:                                               ; preds = %16, %14
  %17 = phi i32 [ 0, %14 ], [ %46, %16 ]
  %18 = phi i64 [ 0, %14 ], [ %48, %16 ]
  %19 = phi i32 [ 9, %14 ], [ %47, %16 ]
  %20 = phi i64 [ %15, %14 ], [ %49, %16 ]
  %21 = getelementptr inbounds i8, i8* %0, i64 %18
  %22 = load i8, i8* %21, align 1
  %23 = mul i32 %17, -862048943
  %24 = sext i8 %22 to i32
  %25 = add i32 %23, %24
  %26 = xor i32 %25, %19
  %27 = or i64 %18, 1
  %28 = getelementptr inbounds i8, i8* %0, i64 %27
  %29 = load i8, i8* %28, align 1
  %30 = mul i32 %25, -862048943
  %31 = sext i8 %29 to i32
  %32 = add i32 %30, %31
  %33 = xor i32 %32, %26
  %34 = or i64 %18, 2
  %35 = getelementptr inbounds i8, i8* %0, i64 %34
  %36 = load i8, i8* %35, align 1
  %37 = mul i32 %32, -862048943
  %38 = sext i8 %36 to i32
  %39 = add i32 %37, %38
  %40 = xor i32 %39, %33
  %41 = or i64 %18, 3
  %42 = getelementptr inbounds i8, i8* %0, i64 %41
  %43 = load i8, i8* %42, align 1
  %44 = mul i32 %39, -862048943
  %45 = sext i8 %43 to i32
  %46 = add i32 %44, %45
  %47 = xor i32 %46, %40
  %48 = add nuw i64 %18, 4
  %49 = add i64 %20, -4
  %50 = icmp eq i64 %49, 0
  br i1 %50, label %51, label %16

51:                                               ; preds = %16, %10
  %52 = phi i32 [ undef, %10 ], [ %46, %16 ]
  %53 = phi i32 [ undef, %10 ], [ %47, %16 ]
  %54 = phi i32 [ 0, %10 ], [ %46, %16 ]
  %55 = phi i64 [ 0, %10 ], [ %48, %16 ]
  %56 = phi i32 [ 9, %10 ], [ %47, %16 ]
  %57 = icmp eq i64 %12, 0
  br i1 %57, label %72, label %58

58:                                               ; preds = %51, %58
  %59 = phi i32 [ %67, %58 ], [ %54, %51 ]
  %60 = phi i64 [ %69, %58 ], [ %55, %51 ]
  %61 = phi i32 [ %68, %58 ], [ %56, %51 ]
  %62 = phi i64 [ %70, %58 ], [ %12, %51 ]
  %63 = getelementptr inbounds i8, i8* %0, i64 %60
  %64 = load i8, i8* %63, align 1
  %65 = mul i32 %59, -862048943
  %66 = sext i8 %64 to i32
  %67 = add i32 %65, %66
  %68 = xor i32 %67, %61
  %69 = add nuw i64 %60, 1
  %70 = add i64 %62, -1
  %71 = icmp eq i64 %70, 0
  br i1 %71, label %72, label %58, !llvm.loop !5

72:                                               ; preds = %51, %58, %8
  %73 = phi i32 [ 9, %8 ], [ %53, %51 ], [ %68, %58 ]
  %74 = phi i32 [ 0, %8 ], [ %52, %51 ], [ %67, %58 ]
  %75 = trunc i64 %1 to i32
  %76 = mul i32 %75, -862048943
  %77 = lshr i32 %76, 17
  %78 = mul i32 %75, 380141568
  %79 = or i32 %77, %78
  %80 = mul i32 %79, 461845907
  %81 = xor i32 %73, %80
  %82 = lshr i32 %81, 19
  %83 = shl i32 %81, 13
  %84 = or i32 %83, %82
  %85 = mul i32 %84, 5
  %86 = add i32 %85, -430675100
  %87 = mul i32 %74, -862048943
  %88 = lshr i32 %87, 17
  %89 = mul i32 %74, 380141568
  %90 = or i32 %88, %89
  %91 = mul i32 %90, 461845907
  %92 = xor i32 %91, %86
  %93 = lshr i32 %92, 19
  %94 = shl i32 %92, 13
  %95 = or i32 %94, %93
  %96 = mul i32 %95, 5
  %97 = add i32 %96, -430675100
  %98 = lshr i32 %97, 16
  %99 = xor i32 %98, %97
  %100 = mul i32 %99, -2048144789
  %101 = lshr i32 %100, 13
  %102 = xor i32 %101, %100
  %103 = mul i32 %102, -1028477387
  %104 = lshr i32 %103, 16
  %105 = xor i32 %104, %103
  br label %440

106:                                              ; preds = %6
  %107 = trunc i64 %1 to i32
  %108 = mul i32 %107, 5
  %109 = bitcast i8* %0 to i32*
  %110 = load i32, i32* %109, align 1
  %111 = add i32 %110, %107
  %112 = getelementptr inbounds i8, i8* %0, i64 %1
  %113 = getelementptr inbounds i8, i8* %112, i64 -4
  %114 = bitcast i8* %113 to i32*
  %115 = load i32, i32* %114, align 1
  %116 = add i32 %115, %108
  %117 = lshr i64 %1, 1
  %118 = and i64 %117, 4
  %119 = getelementptr inbounds i8, i8* %0, i64 %118
  %120 = bitcast i8* %119 to i32*
  %121 = load i32, i32* %120, align 1
  %122 = add i32 %121, 9
  %123 = mul i32 %111, -862048943
  %124 = lshr i32 %123, 17
  %125 = mul i32 %111, 380141568
  %126 = or i32 %124, %125
  %127 = mul i32 %126, 461845907
  %128 = xor i32 %127, %108
  %129 = lshr i32 %128, 19
  %130 = shl i32 %128, 13
  %131 = or i32 %130, %129
  %132 = mul i32 %131, 5
  %133 = add i32 %132, -430675100
  %134 = mul i32 %116, -862048943
  %135 = lshr i32 %134, 17
  %136 = mul i32 %116, 380141568
  %137 = or i32 %135, %136
  %138 = mul i32 %137, 461845907
  %139 = xor i32 %133, %138
  %140 = lshr i32 %139, 19
  %141 = shl i32 %139, 13
  %142 = or i32 %141, %140
  %143 = mul i32 %142, 5
  %144 = add i32 %143, -430675100
  %145 = mul i32 %122, -862048943
  %146 = lshr i32 %145, 17
  %147 = mul i32 %122, 380141568
  %148 = or i32 %146, %147
  %149 = mul i32 %148, 461845907
  %150 = xor i32 %144, %149
  %151 = lshr i32 %150, 19
  %152 = shl i32 %150, 13
  %153 = or i32 %152, %151
  %154 = mul i32 %153, 5
  %155 = add i32 %154, -430675100
  %156 = lshr i32 %155, 16
  %157 = xor i32 %156, %155
  %158 = mul i32 %157, -2048144789
  %159 = lshr i32 %158, 13
  %160 = xor i32 %159, %158
  %161 = mul i32 %160, -1028477387
  %162 = lshr i32 %161, 16
  %163 = xor i32 %162, %161
  br label %440

164:                                              ; preds = %4
  %165 = getelementptr inbounds i8, i8* %0, i64 -4
  %166 = lshr i64 %1, 1
  %167 = getelementptr inbounds i8, i8* %165, i64 %166
  %168 = bitcast i8* %167 to i32*
  %169 = load i32, i32* %168, align 1
  %170 = getelementptr inbounds i8, i8* %0, i64 4
  %171 = bitcast i8* %170 to i32*
  %172 = load i32, i32* %171, align 1
  %173 = getelementptr inbounds i8, i8* %0, i64 %1
  %174 = getelementptr inbounds i8, i8* %173, i64 -8
  %175 = bitcast i8* %174 to i32*
  %176 = load i32, i32* %175, align 1
  %177 = getelementptr inbounds i8, i8* %0, i64 %166
  %178 = bitcast i8* %177 to i32*
  %179 = load i32, i32* %178, align 1
  %180 = bitcast i8* %0 to i32*
  %181 = load i32, i32* %180, align 1
  %182 = getelementptr inbounds i8, i8* %173, i64 -4
  %183 = bitcast i8* %182 to i32*
  %184 = load i32, i32* %183, align 1
  %185 = trunc i64 %1 to i32
  %186 = mul i32 %169, -862048943
  %187 = lshr i32 %186, 17
  %188 = mul i32 %169, 380141568
  %189 = or i32 %187, %188
  %190 = mul i32 %189, 461845907
  %191 = xor i32 %190, %185
  %192 = lshr i32 %191, 19
  %193 = shl i32 %191, 13
  %194 = or i32 %193, %192
  %195 = mul i32 %194, 5
  %196 = add i32 %195, -430675100
  %197 = mul i32 %172, -862048943
  %198 = lshr i32 %197, 17
  %199 = mul i32 %172, 380141568
  %200 = or i32 %198, %199
  %201 = mul i32 %200, 461845907
  %202 = xor i32 %196, %201
  %203 = lshr i32 %202, 19
  %204 = shl i32 %202, 13
  %205 = or i32 %204, %203
  %206 = mul i32 %205, 5
  %207 = add i32 %206, -430675100
  %208 = mul i32 %176, -862048943
  %209 = lshr i32 %208, 17
  %210 = mul i32 %176, 380141568
  %211 = or i32 %209, %210
  %212 = mul i32 %211, 461845907
  %213 = xor i32 %207, %212
  %214 = lshr i32 %213, 19
  %215 = shl i32 %213, 13
  %216 = or i32 %215, %214
  %217 = mul i32 %216, 5
  %218 = add i32 %217, -430675100
  %219 = mul i32 %179, -862048943
  %220 = lshr i32 %219, 17
  %221 = mul i32 %179, 380141568
  %222 = or i32 %220, %221
  %223 = mul i32 %222, 461845907
  %224 = xor i32 %218, %223
  %225 = lshr i32 %224, 19
  %226 = shl i32 %224, 13
  %227 = or i32 %226, %225
  %228 = mul i32 %227, 5
  %229 = add i32 %228, -430675100
  %230 = mul i32 %181, -862048943
  %231 = lshr i32 %230, 17
  %232 = mul i32 %181, 380141568
  %233 = or i32 %231, %232
  %234 = mul i32 %233, 461845907
  %235 = xor i32 %229, %234
  %236 = lshr i32 %235, 19
  %237 = shl i32 %235, 13
  %238 = or i32 %237, %236
  %239 = mul i32 %238, 5
  %240 = add i32 %239, -430675100
  %241 = mul i32 %184, -862048943
  %242 = lshr i32 %241, 17
  %243 = mul i32 %184, 380141568
  %244 = or i32 %242, %243
  %245 = mul i32 %244, 461845907
  %246 = xor i32 %240, %245
  %247 = lshr i32 %246, 19
  %248 = shl i32 %246, 13
  %249 = or i32 %248, %247
  %250 = mul i32 %249, 5
  %251 = add i32 %250, -430675100
  %252 = lshr i32 %251, 16
  %253 = xor i32 %252, %251
  %254 = mul i32 %253, -2048144789
  %255 = lshr i32 %254, 13
  %256 = xor i32 %255, %254
  %257 = mul i32 %256, -1028477387
  %258 = lshr i32 %257, 16
  %259 = xor i32 %258, %257
  br label %440

260:                                              ; preds = %2
  %261 = trunc i64 %1 to i32
  %262 = mul i32 %261, -862048943
  %263 = getelementptr inbounds i8, i8* %0, i64 %1
  %264 = getelementptr inbounds i8, i8* %263, i64 -4
  %265 = bitcast i8* %264 to i32*
  %266 = load i32, i32* %265, align 1
  %267 = mul i32 %266, -862048943
  %268 = lshr i32 %267, 17
  %269 = mul i32 %266, 380141568
  %270 = or i32 %268, %269
  %271 = mul i32 %270, 461845907
  %272 = getelementptr inbounds i8, i8* %263, i64 -8
  %273 = bitcast i8* %272 to i32*
  %274 = load i32, i32* %273, align 1
  %275 = mul i32 %274, -862048943
  %276 = lshr i32 %275, 17
  %277 = mul i32 %274, 380141568
  %278 = or i32 %276, %277
  %279 = mul i32 %278, 461845907
  %280 = getelementptr inbounds i8, i8* %263, i64 -16
  %281 = bitcast i8* %280 to i32*
  %282 = load i32, i32* %281, align 1
  %283 = mul i32 %282, -862048943
  %284 = lshr i32 %283, 17
  %285 = mul i32 %282, 380141568
  %286 = or i32 %284, %285
  %287 = mul i32 %286, 461845907
  %288 = getelementptr inbounds i8, i8* %263, i64 -12
  %289 = bitcast i8* %288 to i32*
  %290 = load i32, i32* %289, align 1
  %291 = mul i32 %290, -862048943
  %292 = lshr i32 %291, 17
  %293 = mul i32 %290, 380141568
  %294 = or i32 %292, %293
  %295 = mul i32 %294, 461845907
  %296 = getelementptr inbounds i8, i8* %263, i64 -20
  %297 = bitcast i8* %296 to i32*
  %298 = load i32, i32* %297, align 1
  %299 = mul i32 %298, -862048943
  %300 = lshr i32 %299, 17
  %301 = mul i32 %298, 380141568
  %302 = or i32 %300, %301
  %303 = mul i32 %302, 461845907
  %304 = xor i32 %271, %261
  %305 = lshr i32 %304, 19
  %306 = shl i32 %304, 13
  %307 = or i32 %306, %305
  %308 = mul i32 %307, 5
  %309 = add i32 %308, -430675100
  %310 = xor i32 %309, %287
  %311 = lshr i32 %310, 19
  %312 = shl i32 %310, 13
  %313 = or i32 %312, %311
  %314 = mul i32 %313, 5
  %315 = add i32 %314, -430675100
  %316 = xor i32 %279, %262
  %317 = lshr i32 %316, 19
  %318 = shl i32 %316, 13
  %319 = or i32 %318, %317
  %320 = mul i32 %319, 5
  %321 = add i32 %320, -430675100
  %322 = xor i32 %321, %295
  %323 = lshr i32 %322, 19
  %324 = shl i32 %322, 13
  %325 = or i32 %324, %323
  %326 = mul i32 %325, 5
  %327 = add i32 %326, -430675100
  %328 = add i32 %303, %262
  %329 = lshr i32 %328, 19
  %330 = shl i32 %328, 13
  %331 = or i32 %330, %329
  %332 = mul i32 %331, 5
  %333 = add i32 %332, -430675100
  %334 = add i64 %1, -1
  %335 = udiv i64 %334, 20
  br label %336

336:                                              ; preds = %336, %260
  %337 = phi i32 [ %315, %260 ], [ %400, %336 ]
  %338 = phi i32 [ %327, %260 ], [ %399, %336 ]
  %339 = phi i32 [ %333, %260 ], [ %395, %336 ]
  %340 = phi i64 [ %335, %260 ], [ %402, %336 ]
  %341 = phi i8* [ %0, %260 ], [ %401, %336 ]
  %342 = bitcast i8* %341 to i32*
  %343 = load i32, i32* %342, align 1
  %344 = mul i32 %343, -862048943
  %345 = lshr i32 %344, 17
  %346 = mul i32 %343, 380141568
  %347 = or i32 %345, %346
  %348 = mul i32 %347, 461845907
  %349 = getelementptr inbounds i8, i8* %341, i64 4
  %350 = bitcast i8* %349 to i32*
  %351 = load i32, i32* %350, align 1
  %352 = getelementptr inbounds i8, i8* %341, i64 8
  %353 = bitcast i8* %352 to i32*
  %354 = load i32, i32* %353, align 1
  %355 = mul i32 %354, -862048943
  %356 = lshr i32 %355, 17
  %357 = mul i32 %354, 380141568
  %358 = or i32 %356, %357
  %359 = mul i32 %358, 461845907
  %360 = getelementptr inbounds i8, i8* %341, i64 12
  %361 = bitcast i8* %360 to i32*
  %362 = load i32, i32* %361, align 1
  %363 = mul i32 %362, -862048943
  %364 = lshr i32 %363, 17
  %365 = mul i32 %362, 380141568
  %366 = or i32 %364, %365
  %367 = mul i32 %366, 461845907
  %368 = getelementptr inbounds i8, i8* %341, i64 16
  %369 = bitcast i8* %368 to i32*
  %370 = load i32, i32* %369, align 1
  %371 = xor i32 %348, %337
  %372 = lshr i32 %371, 18
  %373 = shl i32 %371, 14
  %374 = or i32 %373, %372
  %375 = mul i32 %374, 5
  %376 = add i32 %375, -430675100
  %377 = add i32 %351, %339
  %378 = lshr i32 %377, 19
  %379 = shl i32 %377, 13
  %380 = or i32 %379, %378
  %381 = mul i32 %380, -862048943
  %382 = add i32 %359, %338
  %383 = lshr i32 %382, 18
  %384 = shl i32 %382, 14
  %385 = or i32 %384, %383
  %386 = mul i32 %385, 5
  %387 = add i32 %386, -430675100
  %388 = add i32 %367, %351
  %389 = xor i32 %376, %388
  %390 = lshr i32 %389, 19
  %391 = shl i32 %389, 13
  %392 = or i32 %391, %390
  %393 = xor i32 %387, %370
  %394 = tail call i32 @llvm.bswap.i32(i32 %393) #4
  %395 = mul i32 %394, 5
  %396 = add i32 %392, %370
  %397 = mul i32 %396, 5
  %398 = add i32 %397, -430675100
  %399 = tail call i32 @llvm.bswap.i32(i32 %398) #4
  %400 = add i32 %381, %348
  %401 = getelementptr inbounds i8, i8* %341, i64 20
  %402 = add i64 %340, -1
  %403 = icmp eq i64 %402, 0
  br i1 %403, label %404, label %336

404:                                              ; preds = %336
  %405 = lshr i32 %399, 11
  %406 = shl i32 %399, 21
  %407 = or i32 %406, %405
  %408 = mul i32 %407, -862048943
  %409 = lshr i32 %408, 17
  %410 = mul i32 %407, 380141568
  %411 = or i32 %409, %410
  %412 = mul i32 %411, -862048943
  %413 = lshr i32 %395, 11
  %414 = mul i32 %394, 10485760
  %415 = or i32 %413, %414
  %416 = mul i32 %415, -862048943
  %417 = lshr i32 %416, 17
  %418 = mul i32 %415, 380141568
  %419 = or i32 %417, %418
  %420 = add i32 %412, %400
  %421 = lshr i32 %420, 19
  %422 = shl i32 %420, 13
  %423 = or i32 %422, %421
  %424 = mul i32 %423, 5
  %425 = add i32 %424, -430675100
  %426 = lshr i32 %425, 17
  %427 = shl i32 %425, 15
  %428 = or i32 %427, %426
  %429 = add i32 %428, %419
  %430 = mul i32 %429, -862048943
  %431 = lshr i32 %430, 19
  %432 = mul i32 %429, -978706432
  %433 = or i32 %431, %432
  %434 = mul i32 %433, 5
  %435 = add i32 %434, -430675100
  %436 = lshr i32 %435, 17
  %437 = shl i32 %435, 15
  %438 = or i32 %437, %436
  %439 = mul i32 %438, -862048943
  br label %440

440:                                              ; preds = %164, %106, %72, %404
  %441 = phi i32 [ %439, %404 ], [ %259, %164 ], [ %105, %72 ], [ %163, %106 ]
  ret i32 %441
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @_ZN10farmhashcc14Hash32WithSeedEPKcmj(i8* nocapture readonly, i64, i32) local_unnamed_addr #0 {
  %4 = icmp ult i64 %1, 25
  br i1 %4, label %5, label %251

5:                                                ; preds = %3
  %6 = icmp ugt i64 %1, 12
  br i1 %6, label %7, label %91

7:                                                ; preds = %5
  %8 = mul i32 %2, -862048943
  %9 = getelementptr inbounds i8, i8* %0, i64 -4
  %10 = lshr i64 %1, 1
  %11 = getelementptr inbounds i8, i8* %9, i64 %10
  %12 = bitcast i8* %11 to i32*
  %13 = load i32, i32* %12, align 1
  %14 = getelementptr inbounds i8, i8* %0, i64 4
  %15 = bitcast i8* %14 to i32*
  %16 = load i32, i32* %15, align 1
  %17 = getelementptr inbounds i8, i8* %0, i64 %1
  %18 = getelementptr inbounds i8, i8* %17, i64 -8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 1
  %21 = getelementptr inbounds i8, i8* %0, i64 %10
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 1
  %24 = bitcast i8* %0 to i32*
  %25 = load i32, i32* %24, align 1
  %26 = getelementptr inbounds i8, i8* %17, i64 -4
  %27 = bitcast i8* %26 to i32*
  %28 = load i32, i32* %27, align 1
  %29 = mul i32 %23, -862048943
  %30 = trunc i64 %1 to i32
  %31 = add i32 %8, %30
  %32 = add i32 %31, %29
  %33 = lshr i32 %13, 12
  %34 = shl i32 %13, 20
  %35 = or i32 %34, %33
  %36 = add i32 %28, %35
  %37 = mul i32 %20, -862048943
  %38 = lshr i32 %37, 17
  %39 = mul i32 %20, 380141568
  %40 = or i32 %38, %39
  %41 = mul i32 %40, 461845907
  %42 = xor i32 %41, %32
  %43 = lshr i32 %42, 19
  %44 = shl i32 %42, 13
  %45 = or i32 %44, %43
  %46 = mul i32 %45, 5
  %47 = add i32 %36, -430675100
  %48 = add i32 %47, %46
  %49 = lshr i32 %36, 3
  %50 = shl i32 %36, 29
  %51 = or i32 %50, %49
  %52 = add i32 %51, %20
  %53 = mul i32 %25, -862048943
  %54 = lshr i32 %53, 17
  %55 = mul i32 %25, 380141568
  %56 = or i32 %54, %55
  %57 = mul i32 %56, 461845907
  %58 = xor i32 %48, %57
  %59 = lshr i32 %58, 19
  %60 = shl i32 %58, 13
  %61 = or i32 %60, %59
  %62 = mul i32 %61, 5
  %63 = add i32 %52, -430675100
  %64 = add i32 %63, %62
  %65 = add i32 %52, %28
  %66 = lshr i32 %65, 12
  %67 = shl i32 %65, 20
  %68 = or i32 %67, %66
  %69 = xor i32 %16, %8
  %70 = mul i32 %69, -862048943
  %71 = lshr i32 %70, 17
  %72 = mul i32 %69, 380141568
  %73 = or i32 %71, %72
  %74 = mul i32 %73, 461845907
  %75 = xor i32 %64, %74
  %76 = lshr i32 %75, 19
  %77 = shl i32 %75, 13
  %78 = or i32 %77, %76
  %79 = mul i32 %78, 5
  %80 = add i32 %23, -430675100
  %81 = add i32 %80, %68
  %82 = add i32 %81, %79
  %83 = lshr i32 %82, 16
  %84 = xor i32 %83, %82
  %85 = mul i32 %84, -2048144789
  %86 = lshr i32 %85, 13
  %87 = xor i32 %86, %85
  %88 = mul i32 %87, -1028477387
  %89 = lshr i32 %88, 16
  %90 = xor i32 %89, %88
  br label %347

91:                                               ; preds = %5
  %92 = icmp ugt i64 %1, 4
  br i1 %92, label %93, label %153

93:                                               ; preds = %91
  %94 = trunc i64 %1 to i32
  %95 = mul i32 %94, 5
  %96 = add i32 %95, %2
  %97 = bitcast i8* %0 to i32*
  %98 = load i32, i32* %97, align 1
  %99 = add i32 %98, %94
  %100 = getelementptr inbounds i8, i8* %0, i64 %1
  %101 = getelementptr inbounds i8, i8* %100, i64 -4
  %102 = bitcast i8* %101 to i32*
  %103 = load i32, i32* %102, align 1
  %104 = add i32 %103, %95
  %105 = lshr i64 %1, 1
  %106 = and i64 %105, 4
  %107 = getelementptr inbounds i8, i8* %0, i64 %106
  %108 = bitcast i8* %107 to i32*
  %109 = load i32, i32* %108, align 1
  %110 = add i32 %109, 9
  %111 = mul i32 %99, -862048943
  %112 = lshr i32 %111, 17
  %113 = mul i32 %99, 380141568
  %114 = or i32 %112, %113
  %115 = mul i32 %114, 461845907
  %116 = xor i32 %115, %96
  %117 = lshr i32 %116, 19
  %118 = shl i32 %116, 13
  %119 = or i32 %118, %117
  %120 = mul i32 %119, 5
  %121 = add i32 %120, -430675100
  %122 = mul i32 %104, -862048943
  %123 = lshr i32 %122, 17
  %124 = mul i32 %104, 380141568
  %125 = or i32 %123, %124
  %126 = mul i32 %125, 461845907
  %127 = xor i32 %121, %126
  %128 = lshr i32 %127, 19
  %129 = shl i32 %127, 13
  %130 = or i32 %129, %128
  %131 = mul i32 %130, 5
  %132 = add i32 %131, -430675100
  %133 = mul i32 %110, -862048943
  %134 = lshr i32 %133, 17
  %135 = mul i32 %110, 380141568
  %136 = or i32 %134, %135
  %137 = mul i32 %136, 461845907
  %138 = xor i32 %132, %137
  %139 = lshr i32 %138, 19
  %140 = shl i32 %138, 13
  %141 = or i32 %140, %139
  %142 = mul i32 %141, 5
  %143 = add i32 %142, -430675100
  %144 = xor i32 %143, %2
  %145 = lshr i32 %144, 16
  %146 = xor i32 %145, %144
  %147 = mul i32 %146, -2048144789
  %148 = lshr i32 %147, 13
  %149 = xor i32 %148, %147
  %150 = mul i32 %149, -1028477387
  %151 = lshr i32 %150, 16
  %152 = xor i32 %151, %150
  br label %347

153:                                              ; preds = %91
  %154 = icmp eq i64 %1, 0
  br i1 %154, label %217, label %155

155:                                              ; preds = %153
  %156 = add i64 %1, -1
  %157 = and i64 %1, 3
  %158 = icmp ult i64 %156, 3
  br i1 %158, label %196, label %159

159:                                              ; preds = %155
  %160 = sub i64 %1, %157
  br label %161

161:                                              ; preds = %161, %159
  %162 = phi i32 [ %2, %159 ], [ %191, %161 ]
  %163 = phi i64 [ 0, %159 ], [ %193, %161 ]
  %164 = phi i32 [ 9, %159 ], [ %192, %161 ]
  %165 = phi i64 [ %160, %159 ], [ %194, %161 ]
  %166 = getelementptr inbounds i8, i8* %0, i64 %163
  %167 = load i8, i8* %166, align 1
  %168 = mul i32 %162, -862048943
  %169 = sext i8 %167 to i32
  %170 = add i32 %168, %169
  %171 = xor i32 %170, %164
  %172 = or i64 %163, 1
  %173 = getelementptr inbounds i8, i8* %0, i64 %172
  %174 = load i8, i8* %173, align 1
  %175 = mul i32 %170, -862048943
  %176 = sext i8 %174 to i32
  %177 = add i32 %175, %176
  %178 = xor i32 %177, %171
  %179 = or i64 %163, 2
  %180 = getelementptr inbounds i8, i8* %0, i64 %179
  %181 = load i8, i8* %180, align 1
  %182 = mul i32 %177, -862048943
  %183 = sext i8 %181 to i32
  %184 = add i32 %182, %183
  %185 = xor i32 %184, %178
  %186 = or i64 %163, 3
  %187 = getelementptr inbounds i8, i8* %0, i64 %186
  %188 = load i8, i8* %187, align 1
  %189 = mul i32 %184, -862048943
  %190 = sext i8 %188 to i32
  %191 = add i32 %189, %190
  %192 = xor i32 %191, %185
  %193 = add nuw i64 %163, 4
  %194 = add i64 %165, -4
  %195 = icmp eq i64 %194, 0
  br i1 %195, label %196, label %161

196:                                              ; preds = %161, %155
  %197 = phi i32 [ undef, %155 ], [ %191, %161 ]
  %198 = phi i32 [ undef, %155 ], [ %192, %161 ]
  %199 = phi i32 [ %2, %155 ], [ %191, %161 ]
  %200 = phi i64 [ 0, %155 ], [ %193, %161 ]
  %201 = phi i32 [ 9, %155 ], [ %192, %161 ]
  %202 = icmp eq i64 %157, 0
  br i1 %202, label %217, label %203

203:                                              ; preds = %196, %203
  %204 = phi i32 [ %212, %203 ], [ %199, %196 ]
  %205 = phi i64 [ %214, %203 ], [ %200, %196 ]
  %206 = phi i32 [ %213, %203 ], [ %201, %196 ]
  %207 = phi i64 [ %215, %203 ], [ %157, %196 ]
  %208 = getelementptr inbounds i8, i8* %0, i64 %205
  %209 = load i8, i8* %208, align 1
  %210 = mul i32 %204, -862048943
  %211 = sext i8 %209 to i32
  %212 = add i32 %210, %211
  %213 = xor i32 %212, %206
  %214 = add nuw i64 %205, 1
  %215 = add i64 %207, -1
  %216 = icmp eq i64 %215, 0
  br i1 %216, label %217, label %203, !llvm.loop !6

217:                                              ; preds = %196, %203, %153
  %218 = phi i32 [ 9, %153 ], [ %198, %196 ], [ %213, %203 ]
  %219 = phi i32 [ %2, %153 ], [ %197, %196 ], [ %212, %203 ]
  %220 = trunc i64 %1 to i32
  %221 = mul i32 %220, -862048943
  %222 = lshr i32 %221, 17
  %223 = mul i32 %220, 380141568
  %224 = or i32 %222, %223
  %225 = mul i32 %224, 461845907
  %226 = xor i32 %218, %225
  %227 = lshr i32 %226, 19
  %228 = shl i32 %226, 13
  %229 = or i32 %228, %227
  %230 = mul i32 %229, 5
  %231 = add i32 %230, -430675100
  %232 = mul i32 %219, -862048943
  %233 = lshr i32 %232, 17
  %234 = mul i32 %219, 380141568
  %235 = or i32 %233, %234
  %236 = mul i32 %235, 461845907
  %237 = xor i32 %236, %231
  %238 = lshr i32 %237, 19
  %239 = shl i32 %237, 13
  %240 = or i32 %239, %238
  %241 = mul i32 %240, 5
  %242 = add i32 %241, -430675100
  %243 = lshr i32 %242, 16
  %244 = xor i32 %243, %242
  %245 = mul i32 %244, -2048144789
  %246 = lshr i32 %245, 13
  %247 = xor i32 %246, %245
  %248 = mul i32 %247, -1028477387
  %249 = lshr i32 %248, 16
  %250 = xor i32 %249, %248
  br label %347

251:                                              ; preds = %3
  %252 = trunc i64 %1 to i32
  %253 = xor i32 %252, %2
  %254 = getelementptr inbounds i8, i8* %0, i64 8
  %255 = bitcast i8* %254 to i32*
  %256 = load i32, i32* %255, align 1
  %257 = getelementptr inbounds i8, i8* %0, i64 4
  %258 = bitcast i8* %257 to i32*
  %259 = load i32, i32* %258, align 1
  %260 = getelementptr inbounds i8, i8* %0, i64 24
  %261 = getelementptr inbounds i8, i8* %0, i64 16
  %262 = bitcast i8* %261 to i32*
  %263 = load i32, i32* %262, align 1
  %264 = getelementptr inbounds i8, i8* %0, i64 12
  %265 = bitcast i8* %264 to i32*
  %266 = load i32, i32* %265, align 1
  %267 = bitcast i8* %0 to i32*
  %268 = load i32, i32* %267, align 1
  %269 = getelementptr inbounds i8, i8* %0, i64 20
  %270 = bitcast i8* %269 to i32*
  %271 = load i32, i32* %270, align 1
  %272 = mul i32 %266, -862048943
  %273 = add i32 %253, 24
  %274 = add i32 %273, %272
  %275 = lshr i32 %256, 12
  %276 = shl i32 %256, 20
  %277 = or i32 %276, %275
  %278 = add i32 %271, %277
  %279 = mul i32 %263, -862048943
  %280 = lshr i32 %279, 17
  %281 = mul i32 %263, 380141568
  %282 = or i32 %280, %281
  %283 = mul i32 %282, 461845907
  %284 = xor i32 %283, %274
  %285 = lshr i32 %284, 19
  %286 = shl i32 %284, 13
  %287 = or i32 %286, %285
  %288 = mul i32 %287, 5
  %289 = add i32 %278, -430675100
  %290 = add i32 %289, %288
  %291 = lshr i32 %278, 3
  %292 = shl i32 %278, 29
  %293 = or i32 %292, %291
  %294 = add i32 %293, %263
  %295 = mul i32 %268, -862048943
  %296 = lshr i32 %295, 17
  %297 = mul i32 %268, 380141568
  %298 = or i32 %296, %297
  %299 = mul i32 %298, 461845907
  %300 = xor i32 %290, %299
  %301 = lshr i32 %300, 19
  %302 = shl i32 %300, 13
  %303 = or i32 %302, %301
  %304 = mul i32 %303, 5
  %305 = add i32 %294, -430675100
  %306 = add i32 %305, %304
  %307 = add i32 %294, %271
  %308 = lshr i32 %307, 12
  %309 = shl i32 %307, 20
  %310 = or i32 %309, %308
  %311 = xor i32 %259, %253
  %312 = mul i32 %311, -862048943
  %313 = lshr i32 %312, 17
  %314 = mul i32 %311, 380141568
  %315 = or i32 %313, %314
  %316 = mul i32 %315, 461845907
  %317 = xor i32 %306, %316
  %318 = lshr i32 %317, 19
  %319 = shl i32 %317, 13
  %320 = or i32 %319, %318
  %321 = mul i32 %320, 5
  %322 = add i32 %266, -430675100
  %323 = add i32 %322, %310
  %324 = add i32 %323, %321
  %325 = lshr i32 %324, 16
  %326 = xor i32 %325, %324
  %327 = mul i32 %326, -2048144789
  %328 = lshr i32 %327, 13
  %329 = xor i32 %328, %327
  %330 = mul i32 %329, -1028477387
  %331 = lshr i32 %330, 16
  %332 = add i64 %1, -24
  %333 = tail call i32 @_ZN10farmhashcc6Hash32EPKcm(i8* %260, i64 %332)
  %334 = add i32 %333, %2
  %335 = mul i32 %334, -862048943
  %336 = lshr i32 %335, 17
  %337 = mul i32 %334, 380141568
  %338 = or i32 %336, %337
  %339 = mul i32 %338, 461845907
  %340 = xor i32 %330, %339
  %341 = xor i32 %340, %331
  %342 = lshr i32 %340, 19
  %343 = shl i32 %341, 13
  %344 = or i32 %343, %342
  %345 = mul i32 %344, 5
  %346 = add i32 %345, -430675100
  br label %347

347:                                              ; preds = %251, %217, %93, %7
  %348 = phi i32 [ %90, %7 ], [ %152, %93 ], [ %250, %217 ], [ %346, %251 ]
  ret i32 %348
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden { i64, i64 } @_ZN10farmhashcc19CityHash128WithSeedEPKcmNSt3__14pairImmEE(i8* nocapture readonly, i64, i64, i64) local_unnamed_addr #0 {
  %5 = icmp ult i64 %1, 128
  br i1 %5, label %6, label %188

6:                                                ; preds = %4
  %7 = add nsw i64 %1, -16
  %8 = icmp slt i64 %7, 1
  br i1 %8, label %9, label %103

9:                                                ; preds = %6
  %10 = mul i64 %2, -5435081209227447693
  %11 = lshr i64 %10, 47
  %12 = xor i64 %11, %10
  %13 = mul i64 %12, -5435081209227447693
  %14 = mul i64 %3, -5435081209227447693
  %15 = icmp ugt i64 %1, 7
  br i1 %15, label %67, label %16

16:                                               ; preds = %9
  %17 = icmp ugt i64 %1, 3
  br i1 %17, label %18, label %40

18:                                               ; preds = %16
  %19 = shl i64 %1, 1
  %20 = add nuw nsw i64 %19, -7286425919675154353
  %21 = bitcast i8* %0 to i32*
  %22 = load i32, i32* %21, align 1
  %23 = zext i32 %22 to i64
  %24 = shl nuw nsw i64 %23, 3
  %25 = add nuw nsw i64 %24, %1
  %26 = getelementptr inbounds i8, i8* %0, i64 %1
  %27 = getelementptr inbounds i8, i8* %26, i64 -4
  %28 = bitcast i8* %27 to i32*
  %29 = load i32, i32* %28, align 1
  %30 = zext i32 %29 to i64
  %31 = xor i64 %25, %30
  %32 = mul i64 %31, %20
  %33 = lshr i64 %32, 47
  %34 = xor i64 %32, %30
  %35 = xor i64 %34, %33
  %36 = mul i64 %35, %20
  %37 = lshr i64 %36, 47
  %38 = xor i64 %37, %36
  %39 = mul i64 %38, %20
  br label %64

40:                                               ; preds = %16
  %41 = icmp eq i64 %1, 0
  br i1 %41, label %64, label %42

42:                                               ; preds = %40
  %43 = load i8, i8* %0, align 1
  %44 = lshr i64 %1, 1
  %45 = getelementptr inbounds i8, i8* %0, i64 %44
  %46 = load i8, i8* %45, align 1
  %47 = add nsw i64 %1, -1
  %48 = getelementptr inbounds i8, i8* %0, i64 %47
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %43 to i64
  %51 = zext i8 %46 to i64
  %52 = shl nuw nsw i64 %51, 8
  %53 = or i64 %52, %50
  %54 = zext i8 %49 to i64
  %55 = shl nuw nsw i64 %54, 2
  %56 = add nuw nsw i64 %55, %1
  %57 = mul i64 %53, -7286425919675154353
  %58 = and i64 %56, 4294967295
  %59 = mul i64 %58, -4348849565147123417
  %60 = xor i64 %59, %57
  %61 = lshr i64 %60, 47
  %62 = xor i64 %61, %60
  %63 = mul i64 %62, -7286425919675154353
  br label %64

64:                                               ; preds = %42, %40, %18
  %65 = phi i64 [ -7286425919675154353, %40 ], [ %63, %42 ], [ %39, %18 ]
  %66 = add i64 %65, %14
  br label %97

67:                                               ; preds = %9
  %68 = shl i64 %1, 1
  %69 = add nuw nsw i64 %68, -7286425919675154353
  %70 = bitcast i8* %0 to i64*
  %71 = load i64, i64* %70, align 1
  %72 = add i64 %71, -7286425919675154353
  %73 = getelementptr inbounds i8, i8* %0, i64 %1
  %74 = getelementptr inbounds i8, i8* %73, i64 -8
  %75 = bitcast i8* %74 to i64*
  %76 = load i64, i64* %75, align 1
  %77 = lshr i64 %76, 37
  %78 = shl i64 %76, 27
  %79 = or i64 %78, %77
  %80 = mul i64 %79, %69
  %81 = add i64 %80, %72
  %82 = lshr i64 %72, 25
  %83 = shl i64 %72, 39
  %84 = or i64 %83, %82
  %85 = add i64 %84, %76
  %86 = mul i64 %85, %69
  %87 = xor i64 %86, %81
  %88 = mul i64 %87, %69
  %89 = lshr i64 %88, 47
  %90 = xor i64 %88, %86
  %91 = xor i64 %90, %89
  %92 = mul i64 %91, %69
  %93 = lshr i64 %92, 47
  %94 = xor i64 %93, %92
  %95 = mul i64 %94, %69
  %96 = add i64 %95, %14
  br label %97

97:                                               ; preds = %67, %64
  %98 = phi i64 [ %96, %67 ], [ %66, %64 ]
  %99 = phi i64 [ %71, %67 ], [ %66, %64 ]
  %100 = add i64 %99, %13
  %101 = lshr i64 %100, 47
  %102 = xor i64 %101, %100
  br label %162

103:                                              ; preds = %6
  %104 = getelementptr inbounds i8, i8* %0, i64 %1
  %105 = getelementptr inbounds i8, i8* %104, i64 -8
  %106 = bitcast i8* %105 to i64*
  %107 = load i64, i64* %106, align 1
  %108 = add i64 %107, -5435081209227447693
  %109 = xor i64 %108, %2
  %110 = mul i64 %109, -7070675565921424023
  %111 = lshr i64 %110, 47
  %112 = xor i64 %110, %2
  %113 = xor i64 %112, %111
  %114 = mul i64 %113, -7070675565921424023
  %115 = lshr i64 %114, 47
  %116 = xor i64 %115, %114
  %117 = mul i64 %116, -7070675565921424023
  %118 = add i64 %3, %1
  %119 = getelementptr inbounds i8, i8* %104, i64 -16
  %120 = bitcast i8* %119 to i64*
  %121 = load i64, i64* %120, align 1
  %122 = add i64 %117, %121
  %123 = xor i64 %122, %118
  %124 = mul i64 %123, -7070675565921424023
  %125 = lshr i64 %124, 47
  %126 = xor i64 %124, %122
  %127 = xor i64 %126, %125
  %128 = mul i64 %127, -7070675565921424023
  %129 = lshr i64 %128, 47
  %130 = xor i64 %129, %128
  %131 = mul i64 %130, -7070675565921424023
  %132 = add i64 %131, %2
  br label %133

133:                                              ; preds = %133, %103
  %134 = phi i64 [ %3, %103 ], [ %148, %133 ]
  %135 = phi i64 [ %132, %103 ], [ %147, %133 ]
  %136 = phi i8* [ %0, %103 ], [ %159, %133 ]
  %137 = phi i64 [ %117, %103 ], [ %157, %133 ]
  %138 = phi i64 [ %131, %103 ], [ %158, %133 ]
  %139 = phi i64 [ %7, %103 ], [ %160, %133 ]
  %140 = bitcast i8* %136 to i64*
  %141 = load i64, i64* %140, align 1
  %142 = mul i64 %141, -5435081209227447693
  %143 = lshr i64 %142, 47
  %144 = xor i64 %143, %142
  %145 = mul i64 %144, -5435081209227447693
  %146 = xor i64 %145, %135
  %147 = mul i64 %146, -5435081209227447693
  %148 = xor i64 %147, %134
  %149 = getelementptr inbounds i8, i8* %136, i64 8
  %150 = bitcast i8* %149 to i64*
  %151 = load i64, i64* %150, align 1
  %152 = mul i64 %151, -5435081209227447693
  %153 = lshr i64 %152, 47
  %154 = xor i64 %153, %152
  %155 = mul i64 %154, -5435081209227447693
  %156 = xor i64 %155, %137
  %157 = mul i64 %156, -5435081209227447693
  %158 = xor i64 %157, %138
  %159 = getelementptr inbounds i8, i8* %136, i64 16
  %160 = add nsw i64 %139, -16
  %161 = icmp sgt i64 %160, 0
  br i1 %161, label %133, label %162

162:                                              ; preds = %133, %97
  %163 = phi i64 [ %3, %97 ], [ %148, %133 ]
  %164 = phi i64 [ %13, %97 ], [ %147, %133 ]
  %165 = phi i64 [ %98, %97 ], [ %157, %133 ]
  %166 = phi i64 [ %102, %97 ], [ %158, %133 ]
  %167 = xor i64 %165, %164
  %168 = mul i64 %167, -7070675565921424023
  %169 = lshr i64 %168, 47
  %170 = xor i64 %168, %165
  %171 = xor i64 %170, %169
  %172 = mul i64 %171, -7070675565921424023
  %173 = lshr i64 %172, 47
  %174 = xor i64 %173, %172
  %175 = mul i64 %174, -7070675565921424023
  %176 = xor i64 %166, %163
  %177 = mul i64 %176, -7070675565921424023
  %178 = lshr i64 %177, 47
  %179 = xor i64 %177, %163
  %180 = xor i64 %179, %178
  %181 = mul i64 %180, -7070675565921424023
  %182 = lshr i64 %181, 47
  %183 = xor i64 %182, %181
  %184 = mul i64 %183, -7070675565921424023
  %185 = xor i64 %184, %175
  %186 = mul i64 %185, -7070675565921424023
  %187 = xor i64 %186, %175
  br label %496

188:                                              ; preds = %4
  %189 = mul i64 %1, -5435081209227447693
  %190 = xor i64 %3, -5435081209227447693
  %191 = lshr i64 %190, 49
  %192 = shl i64 %190, 15
  %193 = or i64 %192, %191
  %194 = mul i64 %193, -5435081209227447693
  %195 = bitcast i8* %0 to i64*
  %196 = load i64, i64* %195, align 1
  %197 = add i64 %196, %194
  %198 = lshr i64 %197, 42
  %199 = shl i64 %197, 22
  %200 = or i64 %199, %198
  %201 = mul i64 %200, -5435081209227447693
  %202 = getelementptr inbounds i8, i8* %0, i64 8
  %203 = bitcast i8* %202 to i64*
  %204 = load i64, i64* %203, align 1
  %205 = add i64 %201, %204
  %206 = add i64 %189, %3
  %207 = lshr i64 %206, 35
  %208 = shl i64 %206, 29
  %209 = or i64 %208, %207
  %210 = mul i64 %209, -5435081209227447693
  %211 = add i64 %210, %2
  %212 = getelementptr inbounds i8, i8* %0, i64 88
  %213 = bitcast i8* %212 to i64*
  %214 = load i64, i64* %213, align 1
  %215 = add i64 %214, %2
  %216 = lshr i64 %215, 53
  %217 = shl i64 %215, 11
  %218 = or i64 %217, %216
  %219 = mul i64 %218, -5435081209227447693
  br label %220

220:                                              ; preds = %383, %188
  %221 = phi i64 [ %196, %188 ], [ %388, %383 ]
  %222 = phi i64 [ %204, %188 ], [ %386, %383 ]
  %223 = phi i64 [ %189, %188 ], [ %323, %383 ]
  %224 = phi i64 [ %2, %188 ], [ %333, %383 ]
  %225 = phi i64 [ %219, %188 ], [ %379, %383 ]
  %226 = phi i64 [ %211, %188 ], [ %377, %383 ]
  %227 = phi i64 [ %205, %188 ], [ %357, %383 ]
  %228 = phi i64 [ %197, %188 ], [ %355, %383 ]
  %229 = phi i64 [ %1, %188 ], [ %381, %383 ]
  %230 = phi i8* [ %0, %188 ], [ %380, %383 ]
  %231 = phi i64 [ %3, %188 ], [ %328, %383 ]
  %232 = add i64 %228, %224
  %233 = add i64 %232, %231
  %234 = add i64 %233, %222
  %235 = lshr i64 %234, 37
  %236 = shl i64 %234, 27
  %237 = or i64 %236, %235
  %238 = mul i64 %237, -5435081209227447693
  %239 = add i64 %231, %227
  %240 = getelementptr inbounds i8, i8* %230, i64 48
  %241 = bitcast i8* %240 to i64*
  %242 = load i64, i64* %241, align 1
  %243 = add i64 %239, %242
  %244 = lshr i64 %243, 42
  %245 = shl i64 %243, 22
  %246 = or i64 %245, %244
  %247 = mul i64 %246, -5435081209227447693
  %248 = xor i64 %238, %225
  %249 = getelementptr inbounds i8, i8* %230, i64 40
  %250 = bitcast i8* %249 to i64*
  %251 = load i64, i64* %250, align 1
  %252 = add i64 %251, %228
  %253 = add i64 %252, %247
  %254 = add i64 %226, %223
  %255 = lshr i64 %254, 33
  %256 = shl i64 %254, 31
  %257 = or i64 %256, %255
  %258 = mul i64 %257, -5435081209227447693
  %259 = mul i64 %227, -5435081209227447693
  %260 = getelementptr inbounds i8, i8* %230, i64 16
  %261 = bitcast i8* %260 to i64*
  %262 = load i64, i64* %261, align 1
  %263 = getelementptr inbounds i8, i8* %230, i64 24
  %264 = bitcast i8* %263 to i64*
  %265 = load i64, i64* %264, align 1
  %266 = add i64 %221, %259
  %267 = add i64 %266, %226
  %268 = add i64 %267, %265
  %269 = add i64 %268, %248
  %270 = lshr i64 %269, 21
  %271 = shl i64 %269, 43
  %272 = or i64 %271, %270
  %273 = add i64 %266, %222
  %274 = add i64 %273, %262
  %275 = lshr i64 %274, 44
  %276 = shl i64 %274, 20
  %277 = or i64 %276, %275
  %278 = add i64 %274, %265
  %279 = add i64 %277, %266
  %280 = add i64 %279, %272
  %281 = getelementptr inbounds i8, i8* %230, i64 32
  %282 = add i64 %258, %225
  %283 = add i64 %253, %262
  %284 = bitcast i8* %281 to i64*
  %285 = load i64, i64* %284, align 1
  %286 = getelementptr inbounds i8, i8* %230, i64 56
  %287 = bitcast i8* %286 to i64*
  %288 = load i64, i64* %287, align 1
  %289 = add i64 %282, %285
  %290 = add i64 %283, %289
  %291 = add i64 %290, %288
  %292 = lshr i64 %291, 21
  %293 = shl i64 %291, 43
  %294 = or i64 %293, %292
  %295 = add i64 %289, %251
  %296 = add i64 %295, %242
  %297 = lshr i64 %296, 44
  %298 = shl i64 %296, 20
  %299 = or i64 %298, %297
  %300 = add i64 %296, %288
  %301 = add i64 %299, %289
  %302 = add i64 %301, %294
  %303 = getelementptr inbounds i8, i8* %230, i64 64
  %304 = add i64 %253, %258
  %305 = add i64 %304, %278
  %306 = getelementptr inbounds i8, i8* %230, i64 72
  %307 = bitcast i8* %306 to i64*
  %308 = load i64, i64* %307, align 1
  %309 = add i64 %305, %308
  %310 = lshr i64 %309, 37
  %311 = shl i64 %309, 27
  %312 = or i64 %311, %310
  %313 = mul i64 %312, -5435081209227447693
  %314 = getelementptr inbounds i8, i8* %230, i64 112
  %315 = bitcast i8* %314 to i64*
  %316 = load i64, i64* %315, align 1
  %317 = add i64 %316, %253
  %318 = add i64 %317, %280
  %319 = lshr i64 %318, 42
  %320 = shl i64 %318, 22
  %321 = or i64 %320, %319
  %322 = mul i64 %321, -5435081209227447693
  %323 = xor i64 %313, %302
  %324 = getelementptr inbounds i8, i8* %230, i64 104
  %325 = bitcast i8* %324 to i64*
  %326 = load i64, i64* %325, align 1
  %327 = add i64 %326, %278
  %328 = add i64 %327, %322
  %329 = add i64 %300, %248
  %330 = lshr i64 %329, 33
  %331 = shl i64 %329, 31
  %332 = or i64 %331, %330
  %333 = mul i64 %332, -5435081209227447693
  %334 = mul i64 %280, -5435081209227447693
  %335 = bitcast i8* %303 to i64*
  %336 = load i64, i64* %335, align 1
  %337 = getelementptr inbounds i8, i8* %230, i64 80
  %338 = bitcast i8* %337 to i64*
  %339 = load i64, i64* %338, align 1
  %340 = getelementptr inbounds i8, i8* %230, i64 88
  %341 = bitcast i8* %340 to i64*
  %342 = load i64, i64* %341, align 1
  %343 = add i64 %336, %334
  %344 = add i64 %343, %300
  %345 = add i64 %344, %323
  %346 = add i64 %345, %342
  %347 = lshr i64 %346, 21
  %348 = shl i64 %346, 43
  %349 = or i64 %348, %347
  %350 = add i64 %343, %308
  %351 = add i64 %350, %339
  %352 = lshr i64 %351, 44
  %353 = shl i64 %351, 20
  %354 = or i64 %353, %352
  %355 = add i64 %351, %342
  %356 = add i64 %354, %343
  %357 = add i64 %356, %349
  %358 = getelementptr inbounds i8, i8* %230, i64 96
  %359 = add i64 %333, %302
  %360 = add i64 %328, %339
  %361 = bitcast i8* %358 to i64*
  %362 = load i64, i64* %361, align 1
  %363 = getelementptr inbounds i8, i8* %230, i64 120
  %364 = bitcast i8* %363 to i64*
  %365 = load i64, i64* %364, align 1
  %366 = add i64 %359, %362
  %367 = add i64 %360, %366
  %368 = add i64 %367, %365
  %369 = lshr i64 %368, 21
  %370 = shl i64 %368, 43
  %371 = or i64 %370, %369
  %372 = add i64 %366, %326
  %373 = add i64 %372, %316
  %374 = lshr i64 %373, 44
  %375 = shl i64 %373, 20
  %376 = or i64 %375, %374
  %377 = add i64 %373, %365
  %378 = add i64 %376, %366
  %379 = add i64 %378, %371
  %380 = getelementptr inbounds i8, i8* %230, i64 128
  %381 = add i64 %229, -128
  %382 = icmp ugt i64 %381, 127
  br i1 %382, label %383, label %389, !prof !7

383:                                              ; preds = %220
  %384 = getelementptr inbounds i8, i8* %230, i64 136
  %385 = bitcast i8* %384 to i64*
  %386 = load i64, i64* %385, align 1
  %387 = bitcast i8* %380 to i64*
  %388 = load i64, i64* %387, align 1
  br label %220

389:                                              ; preds = %220
  %390 = and i64 %1, 127
  %391 = add i64 %355, %323
  %392 = lshr i64 %391, 49
  %393 = shl i64 %391, 15
  %394 = or i64 %393, %392
  %395 = mul i64 %394, -4348849565147123417
  %396 = add i64 %395, %333
  %397 = mul i64 %328, -4348849565147123417
  %398 = lshr i64 %379, 37
  %399 = shl i64 %379, 27
  %400 = or i64 %399, %398
  %401 = add i64 %400, %397
  %402 = mul i64 %323, -4348849565147123417
  %403 = lshr i64 %377, 27
  %404 = shl i64 %377, 37
  %405 = or i64 %404, %403
  %406 = add i64 %405, %402
  %407 = mul i64 %377, 9
  %408 = mul i64 %355, -4348849565147123417
  %409 = icmp eq i64 %390, 0
  br i1 %409, label %453, label %410

410:                                              ; preds = %389
  %411 = getelementptr inbounds i8, i8* %0, i64 %1
  %412 = add i64 %401, %396
  %413 = lshr i64 %412, 42
  %414 = shl i64 %412, 22
  %415 = or i64 %414, %413
  %416 = mul i64 %415, -4348849565147123417
  %417 = add i64 %416, %357
  %418 = getelementptr inbounds i8, i8* %411, i64 -32
  %419 = getelementptr inbounds i8, i8* %418, i64 16
  %420 = bitcast i8* %419 to i64*
  %421 = load i64, i64* %420, align 1
  %422 = add i64 %421, %407
  %423 = mul i64 %396, -4348849565147123417
  %424 = add i64 %422, %423
  %425 = bitcast i8* %418 to i64*
  %426 = load i64, i64* %425, align 1
  %427 = add i64 %379, %406
  %428 = add i64 %427, %426
  %429 = add i64 %408, %379
  %430 = getelementptr inbounds i8, i8* %418, i64 8
  %431 = bitcast i8* %430 to i64*
  %432 = load i64, i64* %431, align 1
  %433 = getelementptr inbounds i8, i8* %418, i64 24
  %434 = bitcast i8* %433 to i64*
  %435 = load i64, i64* %434, align 1
  %436 = add i64 %426, %408
  %437 = add i64 %436, %428
  %438 = add i64 %435, %357
  %439 = add i64 %438, %437
  %440 = lshr i64 %439, 21
  %441 = shl i64 %439, 43
  %442 = or i64 %441, %440
  %443 = add i64 %432, %421
  %444 = add i64 %443, %437
  %445 = lshr i64 %444, 44
  %446 = shl i64 %444, 20
  %447 = or i64 %446, %445
  %448 = add i64 %444, %435
  %449 = add i64 %447, %437
  %450 = add i64 %449, %442
  %451 = mul i64 %448, -4348849565147123417
  %452 = icmp ugt i64 %390, 32
  br i1 %452, label %508, label %453

453:                                              ; preds = %410, %508, %550, %592, %389
  %454 = phi i64 [ %406, %389 ], [ %428, %410 ], [ %525, %508 ], [ %567, %550 ], [ %609, %592 ]
  %455 = phi i64 [ %396, %389 ], [ %424, %410 ], [ %521, %508 ], [ %563, %550 ], [ %605, %592 ]
  %456 = phi i64 [ %379, %389 ], [ %429, %410 ], [ %526, %508 ], [ %568, %550 ], [ %610, %592 ]
  %457 = phi i64 [ %407, %389 ], [ %422, %410 ], [ %519, %508 ], [ %561, %550 ], [ %603, %592 ]
  %458 = phi i64 [ %357, %389 ], [ %450, %410 ], [ %547, %508 ], [ %589, %550 ], [ %631, %592 ]
  %459 = phi i64 [ %401, %389 ], [ %417, %410 ], [ %514, %508 ], [ %556, %550 ], [ %598, %592 ]
  %460 = phi i64 [ %408, %389 ], [ %451, %410 ], [ %548, %508 ], [ %590, %550 ], [ %632, %592 ]
  %461 = xor i64 %460, %455
  %462 = mul i64 %461, -7070675565921424023
  %463 = lshr i64 %462, 47
  %464 = xor i64 %462, %460
  %465 = xor i64 %464, %463
  %466 = mul i64 %465, -7070675565921424023
  %467 = lshr i64 %466, 47
  %468 = xor i64 %467, %466
  %469 = mul i64 %468, -7070675565921424023
  %470 = add i64 %459, %454
  %471 = xor i64 %470, %457
  %472 = mul i64 %471, -7070675565921424023
  %473 = lshr i64 %472, 47
  %474 = xor i64 %472, %457
  %475 = xor i64 %474, %473
  %476 = mul i64 %475, -7070675565921424023
  %477 = lshr i64 %476, 47
  %478 = xor i64 %477, %476
  %479 = mul i64 %478, -7070675565921424023
  %480 = add i64 %469, %458
  %481 = xor i64 %480, %456
  %482 = mul i64 %481, -7070675565921424023
  %483 = lshr i64 %482, 47
  %484 = xor i64 %482, %456
  %485 = xor i64 %484, %483
  %486 = mul i64 %485, -7070675565921424023
  %487 = lshr i64 %486, 47
  %488 = xor i64 %487, %486
  %489 = mul i64 %488, -7070675565921424023
  %490 = add i64 %489, %479
  %491 = add i64 %469, %456
  %492 = add i64 %479, %458
  %493 = xor i64 %492, %491
  %494 = mul i64 %493, -7070675565921424023
  %495 = xor i64 %494, %492
  br label %496

496:                                              ; preds = %453, %162
  %497 = phi i64 [ %494, %453 ], [ %186, %162 ]
  %498 = phi i64 [ %495, %453 ], [ %187, %162 ]
  %499 = phi i64 [ %490, %453 ], [ %185, %162 ]
  %500 = lshr i64 %497, 47
  %501 = xor i64 %498, %500
  %502 = mul i64 %501, -7070675565921424023
  %503 = lshr i64 %502, 47
  %504 = xor i64 %503, %502
  %505 = mul i64 %504, -7070675565921424023
  %506 = insertvalue { i64, i64 } undef, i64 %499, 0
  %507 = insertvalue { i64, i64 } %506, i64 %505, 1
  ret { i64, i64 } %507

508:                                              ; preds = %410
  %509 = add i64 %417, %424
  %510 = lshr i64 %509, 42
  %511 = shl i64 %509, 22
  %512 = or i64 %511, %510
  %513 = mul i64 %512, -4348849565147123417
  %514 = add i64 %513, %450
  %515 = getelementptr inbounds i8, i8* %411, i64 -64
  %516 = getelementptr inbounds i8, i8* %515, i64 16
  %517 = bitcast i8* %516 to i64*
  %518 = load i64, i64* %517, align 1
  %519 = add i64 %518, %422
  %520 = mul i64 %424, -4348849565147123417
  %521 = add i64 %519, %520
  %522 = bitcast i8* %515 to i64*
  %523 = load i64, i64* %522, align 1
  %524 = add i64 %429, %428
  %525 = add i64 %524, %523
  %526 = add i64 %451, %429
  %527 = getelementptr inbounds i8, i8* %515, i64 8
  %528 = bitcast i8* %527 to i64*
  %529 = load i64, i64* %528, align 1
  %530 = getelementptr inbounds i8, i8* %515, i64 24
  %531 = bitcast i8* %530 to i64*
  %532 = load i64, i64* %531, align 1
  %533 = add i64 %523, %451
  %534 = add i64 %533, %525
  %535 = add i64 %532, %450
  %536 = add i64 %535, %534
  %537 = lshr i64 %536, 21
  %538 = shl i64 %536, 43
  %539 = or i64 %538, %537
  %540 = add i64 %529, %518
  %541 = add i64 %540, %534
  %542 = lshr i64 %541, 44
  %543 = shl i64 %541, 20
  %544 = or i64 %543, %542
  %545 = add i64 %541, %532
  %546 = add i64 %544, %534
  %547 = add i64 %546, %539
  %548 = mul i64 %545, -4348849565147123417
  %549 = icmp ugt i64 %390, 64
  br i1 %549, label %550, label %453

550:                                              ; preds = %508
  %551 = add i64 %514, %521
  %552 = lshr i64 %551, 42
  %553 = shl i64 %551, 22
  %554 = or i64 %553, %552
  %555 = mul i64 %554, -4348849565147123417
  %556 = add i64 %555, %547
  %557 = getelementptr inbounds i8, i8* %411, i64 -96
  %558 = getelementptr inbounds i8, i8* %557, i64 16
  %559 = bitcast i8* %558 to i64*
  %560 = load i64, i64* %559, align 1
  %561 = add i64 %560, %519
  %562 = mul i64 %521, -4348849565147123417
  %563 = add i64 %561, %562
  %564 = bitcast i8* %557 to i64*
  %565 = load i64, i64* %564, align 1
  %566 = add i64 %526, %525
  %567 = add i64 %566, %565
  %568 = add i64 %548, %526
  %569 = getelementptr inbounds i8, i8* %557, i64 8
  %570 = bitcast i8* %569 to i64*
  %571 = load i64, i64* %570, align 1
  %572 = getelementptr inbounds i8, i8* %557, i64 24
  %573 = bitcast i8* %572 to i64*
  %574 = load i64, i64* %573, align 1
  %575 = add i64 %565, %548
  %576 = add i64 %575, %567
  %577 = add i64 %574, %547
  %578 = add i64 %577, %576
  %579 = lshr i64 %578, 21
  %580 = shl i64 %578, 43
  %581 = or i64 %580, %579
  %582 = add i64 %571, %560
  %583 = add i64 %582, %576
  %584 = lshr i64 %583, 44
  %585 = shl i64 %583, 20
  %586 = or i64 %585, %584
  %587 = add i64 %583, %574
  %588 = add i64 %586, %576
  %589 = add i64 %588, %581
  %590 = mul i64 %587, -4348849565147123417
  %591 = icmp ugt i64 %390, 96
  br i1 %591, label %592, label %453

592:                                              ; preds = %550
  %593 = add i64 %556, %563
  %594 = lshr i64 %593, 42
  %595 = shl i64 %593, 22
  %596 = or i64 %595, %594
  %597 = mul i64 %596, -4348849565147123417
  %598 = add i64 %597, %589
  %599 = getelementptr inbounds i8, i8* %411, i64 -128
  %600 = getelementptr inbounds i8, i8* %599, i64 16
  %601 = bitcast i8* %600 to i64*
  %602 = load i64, i64* %601, align 1
  %603 = add i64 %602, %561
  %604 = mul i64 %563, -4348849565147123417
  %605 = add i64 %603, %604
  %606 = bitcast i8* %599 to i64*
  %607 = load i64, i64* %606, align 1
  %608 = add i64 %568, %567
  %609 = add i64 %608, %607
  %610 = add i64 %590, %568
  %611 = getelementptr inbounds i8, i8* %599, i64 8
  %612 = bitcast i8* %611 to i64*
  %613 = load i64, i64* %612, align 1
  %614 = getelementptr inbounds i8, i8* %599, i64 24
  %615 = bitcast i8* %614 to i64*
  %616 = load i64, i64* %615, align 1
  %617 = add i64 %607, %590
  %618 = add i64 %617, %609
  %619 = add i64 %616, %589
  %620 = add i64 %619, %618
  %621 = lshr i64 %620, 21
  %622 = shl i64 %620, 43
  %623 = or i64 %622, %621
  %624 = add i64 %613, %602
  %625 = add i64 %624, %618
  %626 = lshr i64 %625, 44
  %627 = shl i64 %625, 20
  %628 = or i64 %627, %626
  %629 = add i64 %625, %616
  %630 = add i64 %628, %618
  %631 = add i64 %630, %623
  %632 = mul i64 %629, -4348849565147123417
  br label %453
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden { i64, i64 } @_ZN10farmhashcc14Fingerprint128EPKcm(i8* nocapture readonly, i64) local_unnamed_addr #0 {
  %3 = icmp ugt i64 %1, 15
  br i1 %3, label %4, label %14

4:                                                ; preds = %2
  %5 = getelementptr inbounds i8, i8* %0, i64 16
  %6 = add i64 %1, -16
  %7 = bitcast i8* %0 to i64*
  %8 = load i64, i64* %7, align 1
  %9 = getelementptr inbounds i8, i8* %0, i64 8
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 1
  %12 = add i64 %11, -4348849565147123417
  %13 = tail call { i64, i64 } @_ZN10farmhashcc19CityHash128WithSeedEPKcmNSt3__14pairImmEE(i8* %5, i64 %6, i64 %8, i64 %12) #4
  br label %16

14:                                               ; preds = %2
  %15 = tail call { i64, i64 } @_ZN10farmhashcc19CityHash128WithSeedEPKcmNSt3__14pairImmEE(i8* %0, i64 %1, i64 -4348849565147123417, i64 -5435081209227447693) #4
  br label %16

16:                                               ; preds = %4, %14
  %17 = phi { i64, i64 } [ %13, %4 ], [ %15, %14 ]
  ret { i64, i64 } %17
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZN4util6Hash32EPKcm(i8* nocapture readonly, i64) local_unnamed_addr #2 {
  %3 = tail call i32 @_ZN10farmhashmk6Hash32EPKcm(i8* %0, i64 %1)
  ret i32 %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZN4util14Hash32WithSeedEPKcmj(i8* nocapture readonly, i64, i32) local_unnamed_addr #2 {
  %4 = tail call i32 @_ZN10farmhashmk14Hash32WithSeedEPKcmj(i8* %0, i64 %1, i32 %2)
  ret i32 %4
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZN4util6Hash64EPKcm(i8* readonly, i64) local_unnamed_addr #0 {
  %3 = tail call i64 @_ZN10farmhashxo6Hash64EPKcm(i8* %0, i64 %1)
  ret i64 %3
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZN4util4HashEPKcm(i8* readonly, i64) local_unnamed_addr #0 {
  %3 = tail call i64 @_ZN10farmhashxo6Hash64EPKcm(i8* %0, i64 %1) #4
  ret i64 %3
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZN4util14Hash64WithSeedEPKcmm(i8*, i64, i64) local_unnamed_addr #0 {
  %4 = tail call i64 @_ZN10farmhashna6Hash64EPKcm(i8* %0, i64 %1) #4
  %5 = add i64 %4, 7286425919675154353
  %6 = xor i64 %5, %2
  %7 = mul i64 %6, -7070675565921424023
  %8 = lshr i64 %7, 47
  %9 = xor i64 %7, %2
  %10 = xor i64 %9, %8
  %11 = mul i64 %10, -7070675565921424023
  %12 = lshr i64 %11, 47
  %13 = xor i64 %12, %11
  %14 = mul i64 %13, -7070675565921424023
  ret i64 %14
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZN4util15Hash64WithSeedsEPKcmmm(i8*, i64, i64, i64) local_unnamed_addr #0 {
  %5 = tail call i64 @_ZN10farmhashna6Hash64EPKcm(i8* %0, i64 %1) #4
  %6 = sub i64 %5, %2
  %7 = xor i64 %6, %3
  %8 = mul i64 %7, -7070675565921424023
  %9 = lshr i64 %8, 47
  %10 = xor i64 %8, %3
  %11 = xor i64 %10, %9
  %12 = mul i64 %11, -7070675565921424023
  %13 = lshr i64 %12, 47
  %14 = xor i64 %13, %12
  %15 = mul i64 %14, -7070675565921424023
  ret i64 %15
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden { i64, i64 } @_ZN4util7Hash128EPKcm(i8* nocapture readonly, i64) local_unnamed_addr #0 {
  %3 = icmp ugt i64 %1, 15
  br i1 %3, label %4, label %14

4:                                                ; preds = %2
  %5 = getelementptr inbounds i8, i8* %0, i64 16
  %6 = add i64 %1, -16
  %7 = bitcast i8* %0 to i64*
  %8 = load i64, i64* %7, align 1
  %9 = getelementptr inbounds i8, i8* %0, i64 8
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 1
  %12 = add i64 %11, -4348849565147123417
  %13 = tail call { i64, i64 } @_ZN10farmhashcc19CityHash128WithSeedEPKcmNSt3__14pairImmEE(i8* %5, i64 %6, i64 %8, i64 %12) #4
  br label %16

14:                                               ; preds = %2
  %15 = tail call { i64, i64 } @_ZN10farmhashcc19CityHash128WithSeedEPKcmNSt3__14pairImmEE(i8* %0, i64 %1, i64 -4348849565147123417, i64 -5435081209227447693) #4
  br label %16

16:                                               ; preds = %4, %14
  %17 = phi { i64, i64 } [ %13, %4 ], [ %15, %14 ]
  ret { i64, i64 } %17
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden { i64, i64 } @_ZN4util15Hash128WithSeedEPKcmNSt3__14pairImmEE(i8* nocapture readonly, i64, i64, i64) local_unnamed_addr #0 {
  %5 = tail call { i64, i64 } @_ZN10farmhashcc19CityHash128WithSeedEPKcmNSt3__14pairImmEE(i8* %0, i64 %1, i64 %2, i64 %3)
  ret { i64, i64 } %5
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZN4util13Fingerprint32EPKcm(i8* nocapture readonly, i64) local_unnamed_addr #2 {
  %3 = tail call i32 @_ZN10farmhashmk6Hash32EPKcm(i8* %0, i64 %1)
  ret i32 %3
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZN4util13Fingerprint64EPKcm(i8* readonly, i64) local_unnamed_addr #0 {
  %3 = tail call i64 @_ZN10farmhashna6Hash64EPKcm(i8* %0, i64 %1)
  ret i64 %3
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden { i64, i64 } @_ZN4util14Fingerprint128EPKcm(i8* nocapture readonly, i64) local_unnamed_addr #0 {
  %3 = icmp ugt i64 %1, 15
  br i1 %3, label %4, label %14

4:                                                ; preds = %2
  %5 = getelementptr inbounds i8, i8* %0, i64 16
  %6 = add i64 %1, -16
  %7 = bitcast i8* %0 to i64*
  %8 = load i64, i64* %7, align 1
  %9 = getelementptr inbounds i8, i8* %0, i64 8
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 1
  %12 = add i64 %11, -4348849565147123417
  %13 = tail call { i64, i64 } @_ZN10farmhashcc19CityHash128WithSeedEPKcmNSt3__14pairImmEE(i8* %5, i64 %6, i64 %8, i64 %12) #4
  br label %16

14:                                               ; preds = %2
  %15 = tail call { i64, i64 } @_ZN10farmhashcc19CityHash128WithSeedEPKcmNSt3__14pairImmEE(i8* %0, i64 %1, i64 -4348849565147123417, i64 -5435081209227447693) #4
  br label %16

16:                                               ; preds = %4, %14
  %17 = phi { i64, i64 } [ %13, %4 ], [ %15, %14 ]
  ret { i64, i64 } %17
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.bswap.i32(i32) #3

attributes #0 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
!6 = distinct !{!6, !3}
!7 = !{!"branch_weights", i32 2000, i32 1}
