; ModuleID = '../../third_party/libzip/src/lib/zip_source_get_file_attributes.c'
source_filename = "../../third_party/libzip/src/lib/zip_source_get_file_attributes.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.zip_file_attributes = type { i64, i8, i8, i8, i8, i32, i16, i16 }
%struct.zip_source = type { %struct.zip_source*, %union.anon, i8*, %struct.zip_error, i64, i32, i32, i8, %struct.zip*, i32, i8, i8 }
%union.anon = type { i64 (i8*, i8*, i64, i32)* }
%struct.zip_error = type { i32, i32, i8* }
%struct.zip = type { %struct.zip_source*, i32, %struct.zip_error, i32, i32, i8*, %struct.zip_string*, %struct.zip_string*, i8, i64, i64, %struct.zip_entry*, i32, i32, %struct.zip_source**, %struct.zip_hash*, %struct.zip_progress* }
%struct.zip_string = type { i8*, i16, i32, i8*, i32 }
%struct.zip_entry = type { %struct.zip_dirent*, %struct.zip_dirent*, %struct.zip_source*, i8 }
%struct.zip_dirent = type { i32, i8, i8, i8, i16, i16, i16, i32, i64, i32, i64, i64, %struct.zip_string*, %struct.zip_extra_field*, %struct.zip_string*, i32, i16, i32, i64, i16, i16, i8* }
%struct.zip_extra_field = type { %struct.zip_extra_field*, i32, i16, i16, i8* }
%struct.zip_hash = type opaque
%struct.zip_progress = type opaque

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @zip_file_attributes_init(%struct.zip_file_attributes* nocapture) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.zip_file_attributes, %struct.zip_file_attributes* %0, i64 0, i32 0
  store i64 0, i64* %2, align 8
  %3 = getelementptr inbounds %struct.zip_file_attributes, %struct.zip_file_attributes* %0, i64 0, i32 1
  store i8 1, i8* %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @zip_source_get_file_attributes(%struct.zip_source*, %struct.zip_file_attributes*) local_unnamed_addr #1 {
  %3 = alloca %struct.zip_file_attributes, align 8
  %4 = getelementptr inbounds %struct.zip_source, %struct.zip_source* %0, i64 0, i32 7
  %5 = load i8, i8* %4, align 8, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %117

7:                                                ; preds = %2
  %8 = icmp eq %struct.zip_file_attributes* %1, null
  br i1 %8, label %9, label %11

9:                                                ; preds = %7
  %10 = getelementptr inbounds %struct.zip_source, %struct.zip_source* %0, i64 0, i32 3
  tail call void @zip_error_set(%struct.zip_error* %10, i32 18, i32 0) #4
  br label %117

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.zip_file_attributes, %struct.zip_file_attributes* %1, i64 0, i32 0
  store i64 0, i64* %12, align 8
  %13 = getelementptr inbounds %struct.zip_file_attributes, %struct.zip_file_attributes* %1, i64 0, i32 1
  store i8 1, i8* %13, align 8
  %14 = getelementptr inbounds %struct.zip_source, %struct.zip_source* %0, i64 0, i32 4
  %15 = load i64, i64* %14, align 8
  %16 = and i64 %15, 524288
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %22, label %18

18:                                               ; preds = %11
  %19 = bitcast %struct.zip_file_attributes* %1 to i8*
  %20 = tail call i64 @_zip_source_call(%struct.zip_source* %0, i8* nonnull %19, i64 24, i32 19) #4
  %21 = icmp slt i64 %20, 0
  br i1 %21, label %117, label %22

22:                                               ; preds = %11, %18
  %23 = getelementptr inbounds %struct.zip_source, %struct.zip_source* %0, i64 0, i32 0
  %24 = load %struct.zip_source*, %struct.zip_source** %23, align 8
  %25 = icmp eq %struct.zip_source* %24, null
  br i1 %25, label %117, label %26

26:                                               ; preds = %22
  %27 = bitcast %struct.zip_file_attributes* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %27) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %27, i8 -86, i64 24, i1 false)
  %28 = call i32 @zip_source_get_file_attributes(%struct.zip_source* nonnull %24, %struct.zip_file_attributes* nonnull %3)
  %29 = icmp slt i32 %28, 0
  br i1 %29, label %30, label %33

30:                                               ; preds = %26
  %31 = getelementptr inbounds %struct.zip_source, %struct.zip_source* %0, i64 0, i32 3
  %32 = load %struct.zip_source*, %struct.zip_source** %23, align 8
  call void @_zip_error_set_from_source(%struct.zip_error* %31, %struct.zip_source* %32) #4
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %27) #4
  br label %117

33:                                               ; preds = %26
  %34 = getelementptr inbounds %struct.zip_file_attributes, %struct.zip_file_attributes* %3, i64 0, i32 0
  %35 = load i64, i64* %34, align 8
  %36 = and i64 %35, 1
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %47, label %38

38:                                               ; preds = %33
  %39 = load i64, i64* %12, align 8
  %40 = and i64 %39, 1
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %42, label %47

42:                                               ; preds = %38
  %43 = getelementptr inbounds %struct.zip_file_attributes, %struct.zip_file_attributes* %3, i64 0, i32 2
  %44 = load i8, i8* %43, align 1
  %45 = getelementptr inbounds %struct.zip_file_attributes, %struct.zip_file_attributes* %1, i64 0, i32 2
  store i8 %44, i8* %45, align 1
  %46 = or i64 %39, 1
  store i64 %46, i64* %12, align 8
  br label %47

47:                                               ; preds = %33, %42, %38
  %48 = and i64 %35, 2
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %59, label %50

50:                                               ; preds = %47
  %51 = load i64, i64* %12, align 8
  %52 = and i64 %51, 2
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %54, label %59

54:                                               ; preds = %50
  %55 = getelementptr inbounds %struct.zip_file_attributes, %struct.zip_file_attributes* %3, i64 0, i32 3
  %56 = load i8, i8* %55, align 2
  %57 = getelementptr inbounds %struct.zip_file_attributes, %struct.zip_file_attributes* %1, i64 0, i32 3
  store i8 %56, i8* %57, align 2
  %58 = or i64 %51, 2
  store i64 %58, i64* %12, align 8
  br label %59

59:                                               ; preds = %47, %54, %50
  %60 = and i64 %35, 4
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %75, label %62

62:                                               ; preds = %59
  %63 = load i64, i64* %12, align 8
  %64 = and i64 %63, 4
  %65 = icmp eq i64 %64, 0
  %66 = getelementptr inbounds %struct.zip_file_attributes, %struct.zip_file_attributes* %3, i64 0, i32 4
  %67 = load i8, i8* %66, align 1
  %68 = getelementptr inbounds %struct.zip_file_attributes, %struct.zip_file_attributes* %1, i64 0, i32 4
  br i1 %65, label %73, label %69

69:                                               ; preds = %62
  %70 = load i8, i8* %68, align 1
  %71 = icmp ugt i8 %67, %70
  %72 = select i1 %71, i8 %67, i8 %70
  store i8 %72, i8* %68, align 1
  br label %75

73:                                               ; preds = %62
  store i8 %67, i8* %68, align 1
  %74 = or i64 %63, 4
  store i64 %74, i64* %12, align 8
  br label %75

75:                                               ; preds = %59, %69, %73
  %76 = and i64 %35, 8
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %87, label %78

78:                                               ; preds = %75
  %79 = load i64, i64* %12, align 8
  %80 = and i64 %79, 8
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %87

82:                                               ; preds = %78
  %83 = getelementptr inbounds %struct.zip_file_attributes, %struct.zip_file_attributes* %3, i64 0, i32 5
  %84 = load i32, i32* %83, align 4
  %85 = getelementptr inbounds %struct.zip_file_attributes, %struct.zip_file_attributes* %1, i64 0, i32 5
  store i32 %84, i32* %85, align 4
  %86 = or i64 %79, 8
  store i64 %86, i64* %12, align 8
  br label %87

87:                                               ; preds = %75, %82, %78
  %88 = and i64 %35, 16
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %116, label %90

90:                                               ; preds = %87
  %91 = load i64, i64* %12, align 8
  %92 = and i64 %91, 16
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %108, label %94

94:                                               ; preds = %90
  %95 = getelementptr inbounds %struct.zip_file_attributes, %struct.zip_file_attributes* %3, i64 0, i32 7
  %96 = load i16, i16* %95, align 2
  %97 = xor i16 %96, -1
  %98 = getelementptr inbounds %struct.zip_file_attributes, %struct.zip_file_attributes* %1, i64 0, i32 6
  %99 = load i16, i16* %98, align 8
  %100 = and i16 %99, %97
  %101 = getelementptr inbounds %struct.zip_file_attributes, %struct.zip_file_attributes* %3, i64 0, i32 6
  %102 = load i16, i16* %101, align 8
  %103 = and i16 %102, %96
  %104 = or i16 %103, %100
  store i16 %104, i16* %98, align 8
  %105 = getelementptr inbounds %struct.zip_file_attributes, %struct.zip_file_attributes* %1, i64 0, i32 7
  %106 = load i16, i16* %105, align 2
  %107 = or i16 %106, %96
  store i16 %107, i16* %105, align 2
  br label %116

108:                                              ; preds = %90
  %109 = or i64 %91, 16
  store i64 %109, i64* %12, align 8
  %110 = getelementptr inbounds %struct.zip_file_attributes, %struct.zip_file_attributes* %3, i64 0, i32 6
  %111 = load i16, i16* %110, align 8
  %112 = getelementptr inbounds %struct.zip_file_attributes, %struct.zip_file_attributes* %1, i64 0, i32 6
  store i16 %111, i16* %112, align 8
  %113 = getelementptr inbounds %struct.zip_file_attributes, %struct.zip_file_attributes* %3, i64 0, i32 7
  %114 = load i16, i16* %113, align 2
  %115 = getelementptr inbounds %struct.zip_file_attributes, %struct.zip_file_attributes* %1, i64 0, i32 7
  store i16 %114, i16* %115, align 2
  br label %116

116:                                              ; preds = %108, %94, %87
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %27) #4
  br label %117

117:                                              ; preds = %22, %116, %30, %18, %2, %9
  %118 = phi i32 [ -1, %9 ], [ -1, %2 ], [ -1, %18 ], [ -1, %30 ], [ 0, %116 ], [ 0, %22 ]
  ret i32 %118
}

declare void @zip_error_set(%struct.zip_error*, i32, i32) local_unnamed_addr #2

declare i64 @_zip_source_call(%struct.zip_source*, i8*, i64, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare void @_zip_error_set_from_source(%struct.zip_error*, %struct.zip_source*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
