; ModuleID = '../../third_party/icu/source/common/ucnv_cnv.cpp'
source_filename = "../../third_party/icu/source/common/ucnv_cnv.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.UConverter = type { void (i8*, %struct.UConverterFromUnicodeArgs*, i16*, i32, i32, i32, i32*)*, void (i8*, %struct.UConverterToUnicodeArgs*, i8*, i32, i32, i32*)*, i8*, i8*, i8*, i8*, %struct.UConverterSharedData*, i32, i8, i8, i8, i8, i8, [7 x i8], i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, [8 x i8], [32 x i8], [2 x i16], [2 x i16], [32 x i16], i32, [19 x i16], [31 x i8], i8, i8, i8, i32 }
%struct.UConverterFromUnicodeArgs = type { i16, i8, %struct.UConverter*, i16*, i16*, i8*, i8*, i32* }
%struct.UConverterToUnicodeArgs = type { i16, i8, %struct.UConverter*, i8*, i8*, i16*, i16*, i32* }
%struct.UConverterSharedData = type { i32, i32, i8*, %struct.UConverterStaticData*, i8, i8, %struct.UConverterImpl*, i32, %struct.UConverterMBCSTable }
%struct.UConverterStaticData = type { i32, [60 x i8], i32, i8, i8, i8, i8, [4 x i8], i8, i8, i8, i8, i8, [19 x i8] }
%struct.UConverterImpl = type { i32, void (%struct.UConverterSharedData*, %struct.UConverterLoadArgs*, i8*, i32*)*, void (%struct.UConverterSharedData*)*, void (%struct.UConverter*, %struct.UConverterLoadArgs*, i32*)*, void (%struct.UConverter*)*, void (%struct.UConverter*, i32)*, void (%struct.UConverterToUnicodeArgs*, i32*)*, void (%struct.UConverterToUnicodeArgs*, i32*)*, void (%struct.UConverterFromUnicodeArgs*, i32*)*, void (%struct.UConverterFromUnicodeArgs*, i32*)*, i32 (%struct.UConverterToUnicodeArgs*, i32*)*, void (%struct.UConverter*, i8*, i32*)*, i8* (%struct.UConverter*)*, void (%struct.UConverterFromUnicodeArgs*, i32, i32*)*, %struct.UConverter* (%struct.UConverter*, i8*, i32*, i32*)*, {}*, void (%struct.UConverterFromUnicodeArgs*, %struct.UConverterToUnicodeArgs*, i32*)*, void (%struct.UConverterFromUnicodeArgs*, %struct.UConverterToUnicodeArgs*, i32*)* }
%struct.UConverterLoadArgs = type { i32, i32, i8, i8, i16, i32, i8*, i8*, i8* }
%struct.UConverterMBCSTable = type { i8, i8, i8, i32, [256 x i32]*, [256 x i32]*, i16*, %struct._MBCSToUFallback*, i16*, i16*, [64 x i16], i8*, i8*, i32, i8, i8, i8, i16, i32, i8*, i8*, %struct.UConverterSharedData*, i32* }
%struct._MBCSToUFallback = type { i32, i32 }
%struct.USetAdder = type { %struct.USet*, void (%struct.USet*, i32)*, void (%struct.USet*, i32, i32)*, void (%struct.USet*, i16*, i32)*, void (%struct.USet*, i32)*, void (%struct.USet*, i32, i32)* }
%struct.USet = type opaque

; Function Attrs: nounwind ssp uwtable
define hidden void @ucnv_getCompleteUnicodeSet_69(%struct.UConverter* nocapture readnone, %struct.USetAdder* nocapture readonly, i32, i32* nocapture readnone) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.USetAdder, %struct.USetAdder* %1, i64 0, i32 2
  %6 = load void (%struct.USet*, i32, i32)*, void (%struct.USet*, i32, i32)** %5, align 8
  %7 = getelementptr inbounds %struct.USetAdder, %struct.USetAdder* %1, i64 0, i32 0
  %8 = load %struct.USet*, %struct.USet** %7, align 8
  tail call void %6(%struct.USet* %8, i32 0, i32 1114111) #2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @ucnv_getNonSurrogateUnicodeSet_69(%struct.UConverter* nocapture readnone, %struct.USetAdder* nocapture readonly, i32, i32* nocapture readnone) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.USetAdder, %struct.USetAdder* %1, i64 0, i32 2
  %6 = load void (%struct.USet*, i32, i32)*, void (%struct.USet*, i32, i32)** %5, align 8
  %7 = getelementptr inbounds %struct.USetAdder, %struct.USetAdder* %1, i64 0, i32 0
  %8 = load %struct.USet*, %struct.USet** %7, align 8
  tail call void %6(%struct.USet* %8, i32 0, i32 55295) #2
  %9 = load void (%struct.USet*, i32, i32)*, void (%struct.USet*, i32, i32)** %5, align 8
  %10 = load %struct.USet*, %struct.USet** %7, align 8
  tail call void %9(%struct.USet* %10, i32 57344, i32 1114111) #2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ucnv_fromUWriteBytes_69(%struct.UConverter*, i8* nocapture readonly, i32, i8** nocapture, i8* readnone, i32**, i32, i32* nocapture) local_unnamed_addr #1 {
  %9 = bitcast %struct.UConverter* %0 to i8*
  %10 = load i8*, i8** %3, align 8
  %11 = ptrtoint i8* %10 to i64
  %12 = icmp eq i32** %5, null
  br i1 %12, label %133, label %13

13:                                               ; preds = %8
  %14 = load i32*, i32** %5, align 8
  %15 = bitcast i32* %14 to i8*
  %16 = icmp eq i32* %14, null
  br i1 %16, label %133, label %17

17:                                               ; preds = %13
  %18 = icmp sgt i32 %2, 0
  %19 = icmp ult i8* %10, %4
  %20 = and i1 %18, %19
  br i1 %20, label %21, label %272

21:                                               ; preds = %17
  %22 = xor i64 %11, -1
  %23 = getelementptr i8, i8* %4, i64 %22
  %24 = ptrtoint i8* %23 to i64
  %25 = add i32 %2, -1
  %26 = zext i32 %25 to i64
  %27 = icmp ult i64 %24, %26
  %28 = select i1 %27, i64 %24, i64 %26
  %29 = add nuw nsw i64 %28, 1
  %30 = icmp ult i64 %29, 8
  br i1 %30, label %31, label %36

31:                                               ; preds = %131, %36, %21
  %32 = phi i32* [ %14, %36 ], [ %14, %21 ], [ %62, %131 ]
  %33 = phi i8* [ %10, %36 ], [ %10, %21 ], [ %63, %131 ]
  %34 = phi i8* [ %1, %36 ], [ %1, %21 ], [ %64, %131 ]
  %35 = phi i32 [ %2, %36 ], [ %2, %21 ], [ %66, %131 ]
  br label %259

36:                                               ; preds = %21
  %37 = xor i64 %11, -1
  %38 = getelementptr i8, i8* %4, i64 %37
  %39 = ptrtoint i8* %38 to i64
  %40 = add i32 %2, -1
  %41 = zext i32 %40 to i64
  %42 = icmp ult i64 %39, %41
  %43 = select i1 %42, i64 %39, i64 %41
  %44 = add nuw nsw i64 %43, 1
  %45 = getelementptr i8, i8* %10, i64 %44
  %46 = getelementptr i32, i32* %14, i64 %44
  %47 = bitcast i32* %46 to i8*
  %48 = getelementptr i8, i8* %1, i64 %44
  %49 = icmp ult i8* %10, %47
  %50 = icmp ugt i8* %45, %15
  %51 = and i1 %49, %50
  %52 = icmp ult i8* %10, %48
  %53 = icmp ugt i8* %45, %1
  %54 = and i1 %52, %53
  %55 = or i1 %51, %54
  %56 = icmp ugt i8* %48, %15
  %57 = icmp ugt i8* %47, %1
  %58 = and i1 %56, %57
  %59 = or i1 %55, %58
  br i1 %59, label %31, label %60

60:                                               ; preds = %36
  %61 = and i64 %29, 8589934584
  %62 = getelementptr i32, i32* %14, i64 %61
  %63 = getelementptr i8, i8* %10, i64 %61
  %64 = getelementptr i8, i8* %1, i64 %61
  %65 = trunc i64 %61 to i32
  %66 = sub i32 %2, %65
  %67 = insertelement <4 x i32> undef, i32 %6, i32 0
  %68 = shufflevector <4 x i32> %67, <4 x i32> undef, <4 x i32> zeroinitializer
  %69 = insertelement <4 x i32> undef, i32 %6, i32 0
  %70 = shufflevector <4 x i32> %69, <4 x i32> undef, <4 x i32> zeroinitializer
  %71 = add nsw i64 %61, -8
  %72 = lshr exact i64 %71, 3
  %73 = add nuw nsw i64 %72, 1
  %74 = and i64 %73, 1
  %75 = icmp eq i64 %71, 0
  br i1 %75, label %113, label %76

76:                                               ; preds = %60
  %77 = sub nuw nsw i64 %73, %74
  br label %78

78:                                               ; preds = %78, %76
  %79 = phi i64 [ 0, %76 ], [ %110, %78 ]
  %80 = phi i64 [ %77, %76 ], [ %111, %78 ]
  %81 = getelementptr i32, i32* %14, i64 %79
  %82 = getelementptr i8, i8* %10, i64 %79
  %83 = getelementptr i8, i8* %1, i64 %79
  %84 = bitcast i8* %83 to i32*
  %85 = load i32, i32* %84, align 1, !alias.scope !2
  %86 = getelementptr i8, i8* %83, i64 4
  %87 = bitcast i8* %86 to i32*
  %88 = load i32, i32* %87, align 1, !alias.scope !2
  %89 = bitcast i8* %82 to i32*
  store i32 %85, i32* %89, align 1, !alias.scope !5, !noalias !7
  %90 = getelementptr i8, i8* %82, i64 4
  %91 = bitcast i8* %90 to i32*
  store i32 %88, i32* %91, align 1, !alias.scope !5, !noalias !7
  %92 = bitcast i32* %81 to <4 x i32>*
  store <4 x i32> %68, <4 x i32>* %92, align 4, !alias.scope !9, !noalias !2
  %93 = getelementptr i32, i32* %81, i64 4
  %94 = bitcast i32* %93 to <4 x i32>*
  store <4 x i32> %70, <4 x i32>* %94, align 4, !alias.scope !9, !noalias !2
  %95 = or i64 %79, 8
  %96 = getelementptr i32, i32* %14, i64 %95
  %97 = getelementptr i8, i8* %10, i64 %95
  %98 = getelementptr i8, i8* %1, i64 %95
  %99 = bitcast i8* %98 to i32*
  %100 = load i32, i32* %99, align 1, !alias.scope !2
  %101 = getelementptr i8, i8* %98, i64 4
  %102 = bitcast i8* %101 to i32*
  %103 = load i32, i32* %102, align 1, !alias.scope !2
  %104 = bitcast i8* %97 to i32*
  store i32 %100, i32* %104, align 1, !alias.scope !5, !noalias !7
  %105 = getelementptr i8, i8* %97, i64 4
  %106 = bitcast i8* %105 to i32*
  store i32 %103, i32* %106, align 1, !alias.scope !5, !noalias !7
  %107 = bitcast i32* %96 to <4 x i32>*
  store <4 x i32> %68, <4 x i32>* %107, align 4, !alias.scope !9, !noalias !2
  %108 = getelementptr i32, i32* %96, i64 4
  %109 = bitcast i32* %108 to <4 x i32>*
  store <4 x i32> %70, <4 x i32>* %109, align 4, !alias.scope !9, !noalias !2
  %110 = add i64 %79, 16
  %111 = add i64 %80, -2
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %113, label %78, !llvm.loop !10

113:                                              ; preds = %78, %60
  %114 = phi i64 [ 0, %60 ], [ %110, %78 ]
  %115 = icmp eq i64 %74, 0
  br i1 %115, label %131, label %116

116:                                              ; preds = %113
  %117 = getelementptr i32, i32* %14, i64 %114
  %118 = getelementptr i8, i8* %10, i64 %114
  %119 = getelementptr i8, i8* %1, i64 %114
  %120 = bitcast i8* %119 to i32*
  %121 = load i32, i32* %120, align 1, !alias.scope !2
  %122 = getelementptr i8, i8* %119, i64 4
  %123 = bitcast i8* %122 to i32*
  %124 = load i32, i32* %123, align 1, !alias.scope !2
  %125 = bitcast i8* %118 to i32*
  store i32 %121, i32* %125, align 1, !alias.scope !5, !noalias !7
  %126 = getelementptr i8, i8* %118, i64 4
  %127 = bitcast i8* %126 to i32*
  store i32 %124, i32* %127, align 1, !alias.scope !5, !noalias !7
  %128 = bitcast i32* %117 to <4 x i32>*
  store <4 x i32> %68, <4 x i32>* %128, align 4, !alias.scope !9, !noalias !2
  %129 = getelementptr i32, i32* %117, i64 4
  %130 = bitcast i32* %129 to <4 x i32>*
  store <4 x i32> %70, <4 x i32>* %130, align 4, !alias.scope !9, !noalias !2
  br label %131

131:                                              ; preds = %113, %116
  %132 = icmp eq i64 %29, %61
  br i1 %132, label %272, label %31

133:                                              ; preds = %13, %8
  %134 = icmp sgt i32 %2, 0
  %135 = icmp ult i8* %10, %4
  %136 = and i1 %134, %135
  br i1 %136, label %137, label %277

137:                                              ; preds = %133
  %138 = xor i64 %11, -1
  %139 = getelementptr i8, i8* %4, i64 %138
  %140 = ptrtoint i8* %139 to i64
  %141 = add i32 %2, -1
  %142 = zext i32 %141 to i64
  %143 = icmp ult i64 %140, %142
  %144 = select i1 %143, i64 %140, i64 %142
  %145 = add nuw nsw i64 %144, 1
  %146 = icmp ult i64 %145, 32
  br i1 %146, label %244, label %147

147:                                              ; preds = %137
  %148 = xor i64 %11, -1
  %149 = getelementptr i8, i8* %4, i64 %148
  %150 = ptrtoint i8* %149 to i64
  %151 = add i32 %2, -1
  %152 = zext i32 %151 to i64
  %153 = icmp ult i64 %150, %152
  %154 = select i1 %153, i64 %150, i64 %152
  %155 = add nuw nsw i64 %154, 1
  %156 = getelementptr i8, i8* %10, i64 %155
  %157 = getelementptr i8, i8* %1, i64 %155
  %158 = icmp ult i8* %10, %157
  %159 = icmp ugt i8* %156, %1
  %160 = and i1 %158, %159
  br i1 %160, label %244, label %161

161:                                              ; preds = %147
  %162 = and i64 %145, 8589934560
  %163 = getelementptr i8, i8* %10, i64 %162
  %164 = getelementptr i8, i8* %1, i64 %162
  %165 = trunc i64 %162 to i32
  %166 = sub i32 %2, %165
  %167 = add nsw i64 %162, -32
  %168 = lshr exact i64 %167, 5
  %169 = add nuw nsw i64 %168, 1
  %170 = and i64 %169, 3
  %171 = icmp ult i64 %167, 96
  br i1 %171, label %223, label %172

172:                                              ; preds = %161
  %173 = sub nsw i64 %169, %170
  br label %174

174:                                              ; preds = %174, %172
  %175 = phi i64 [ 0, %172 ], [ %220, %174 ]
  %176 = phi i64 [ %173, %172 ], [ %221, %174 ]
  %177 = getelementptr i8, i8* %10, i64 %175
  %178 = getelementptr i8, i8* %1, i64 %175
  %179 = bitcast i8* %178 to <16 x i8>*
  %180 = load <16 x i8>, <16 x i8>* %179, align 1, !alias.scope !12
  %181 = getelementptr i8, i8* %178, i64 16
  %182 = bitcast i8* %181 to <16 x i8>*
  %183 = load <16 x i8>, <16 x i8>* %182, align 1, !alias.scope !12
  %184 = bitcast i8* %177 to <16 x i8>*
  store <16 x i8> %180, <16 x i8>* %184, align 1, !alias.scope !15, !noalias !12
  %185 = getelementptr i8, i8* %177, i64 16
  %186 = bitcast i8* %185 to <16 x i8>*
  store <16 x i8> %183, <16 x i8>* %186, align 1, !alias.scope !15, !noalias !12
  %187 = or i64 %175, 32
  %188 = getelementptr i8, i8* %10, i64 %187
  %189 = getelementptr i8, i8* %1, i64 %187
  %190 = bitcast i8* %189 to <16 x i8>*
  %191 = load <16 x i8>, <16 x i8>* %190, align 1, !alias.scope !12
  %192 = getelementptr i8, i8* %189, i64 16
  %193 = bitcast i8* %192 to <16 x i8>*
  %194 = load <16 x i8>, <16 x i8>* %193, align 1, !alias.scope !12
  %195 = bitcast i8* %188 to <16 x i8>*
  store <16 x i8> %191, <16 x i8>* %195, align 1, !alias.scope !15, !noalias !12
  %196 = getelementptr i8, i8* %188, i64 16
  %197 = bitcast i8* %196 to <16 x i8>*
  store <16 x i8> %194, <16 x i8>* %197, align 1, !alias.scope !15, !noalias !12
  %198 = or i64 %175, 64
  %199 = getelementptr i8, i8* %10, i64 %198
  %200 = getelementptr i8, i8* %1, i64 %198
  %201 = bitcast i8* %200 to <16 x i8>*
  %202 = load <16 x i8>, <16 x i8>* %201, align 1, !alias.scope !12
  %203 = getelementptr i8, i8* %200, i64 16
  %204 = bitcast i8* %203 to <16 x i8>*
  %205 = load <16 x i8>, <16 x i8>* %204, align 1, !alias.scope !12
  %206 = bitcast i8* %199 to <16 x i8>*
  store <16 x i8> %202, <16 x i8>* %206, align 1, !alias.scope !15, !noalias !12
  %207 = getelementptr i8, i8* %199, i64 16
  %208 = bitcast i8* %207 to <16 x i8>*
  store <16 x i8> %205, <16 x i8>* %208, align 1, !alias.scope !15, !noalias !12
  %209 = or i64 %175, 96
  %210 = getelementptr i8, i8* %10, i64 %209
  %211 = getelementptr i8, i8* %1, i64 %209
  %212 = bitcast i8* %211 to <16 x i8>*
  %213 = load <16 x i8>, <16 x i8>* %212, align 1, !alias.scope !12
  %214 = getelementptr i8, i8* %211, i64 16
  %215 = bitcast i8* %214 to <16 x i8>*
  %216 = load <16 x i8>, <16 x i8>* %215, align 1, !alias.scope !12
  %217 = bitcast i8* %210 to <16 x i8>*
  store <16 x i8> %213, <16 x i8>* %217, align 1, !alias.scope !15, !noalias !12
  %218 = getelementptr i8, i8* %210, i64 16
  %219 = bitcast i8* %218 to <16 x i8>*
  store <16 x i8> %216, <16 x i8>* %219, align 1, !alias.scope !15, !noalias !12
  %220 = add i64 %175, 128
  %221 = add i64 %176, -4
  %222 = icmp eq i64 %221, 0
  br i1 %222, label %223, label %174, !llvm.loop !17

223:                                              ; preds = %174, %161
  %224 = phi i64 [ 0, %161 ], [ %220, %174 ]
  %225 = icmp eq i64 %170, 0
  br i1 %225, label %242, label %226

226:                                              ; preds = %223, %226
  %227 = phi i64 [ %239, %226 ], [ %224, %223 ]
  %228 = phi i64 [ %240, %226 ], [ %170, %223 ]
  %229 = getelementptr i8, i8* %10, i64 %227
  %230 = getelementptr i8, i8* %1, i64 %227
  %231 = bitcast i8* %230 to <16 x i8>*
  %232 = load <16 x i8>, <16 x i8>* %231, align 1, !alias.scope !12
  %233 = getelementptr i8, i8* %230, i64 16
  %234 = bitcast i8* %233 to <16 x i8>*
  %235 = load <16 x i8>, <16 x i8>* %234, align 1, !alias.scope !12
  %236 = bitcast i8* %229 to <16 x i8>*
  store <16 x i8> %232, <16 x i8>* %236, align 1, !alias.scope !15, !noalias !12
  %237 = getelementptr i8, i8* %229, i64 16
  %238 = bitcast i8* %237 to <16 x i8>*
  store <16 x i8> %235, <16 x i8>* %238, align 1, !alias.scope !15, !noalias !12
  %239 = add i64 %227, 32
  %240 = add i64 %228, -1
  %241 = icmp eq i64 %240, 0
  br i1 %241, label %242, label %226, !llvm.loop !18

242:                                              ; preds = %226, %223
  %243 = icmp eq i64 %145, %162
  br i1 %243, label %277, label %244

244:                                              ; preds = %242, %147, %137
  %245 = phi i8* [ %10, %147 ], [ %10, %137 ], [ %163, %242 ]
  %246 = phi i8* [ %1, %147 ], [ %1, %137 ], [ %164, %242 ]
  %247 = phi i32 [ %2, %147 ], [ %2, %137 ], [ %166, %242 ]
  br label %248

248:                                              ; preds = %244, %248
  %249 = phi i8* [ %254, %248 ], [ %245, %244 ]
  %250 = phi i8* [ %252, %248 ], [ %246, %244 ]
  %251 = phi i32 [ %255, %248 ], [ %247, %244 ]
  %252 = getelementptr inbounds i8, i8* %250, i64 1
  %253 = load i8, i8* %250, align 1
  %254 = getelementptr inbounds i8, i8* %249, i64 1
  store i8 %253, i8* %249, align 1
  %255 = add nsw i32 %251, -1
  %256 = icmp sgt i32 %255, 0
  %257 = icmp ult i8* %254, %4
  %258 = and i1 %256, %257
  br i1 %258, label %248, label %277, !llvm.loop !20

259:                                              ; preds = %31, %259
  %260 = phi i32* [ %267, %259 ], [ %32, %31 ]
  %261 = phi i8* [ %266, %259 ], [ %33, %31 ]
  %262 = phi i8* [ %264, %259 ], [ %34, %31 ]
  %263 = phi i32 [ %268, %259 ], [ %35, %31 ]
  %264 = getelementptr inbounds i8, i8* %262, i64 1
  %265 = load i8, i8* %262, align 1
  %266 = getelementptr inbounds i8, i8* %261, i64 1
  store i8 %265, i8* %261, align 1
  %267 = getelementptr inbounds i32, i32* %260, i64 1
  store i32 %6, i32* %260, align 4
  %268 = add nsw i32 %263, -1
  %269 = icmp sgt i32 %268, 0
  %270 = icmp ult i8* %266, %4
  %271 = and i1 %269, %270
  br i1 %271, label %259, label %272, !llvm.loop !21

272:                                              ; preds = %259, %131, %17
  %273 = phi i32 [ %2, %17 ], [ %66, %131 ], [ %268, %259 ]
  %274 = phi i8* [ %1, %17 ], [ %64, %131 ], [ %264, %259 ]
  %275 = phi i8* [ %10, %17 ], [ %63, %131 ], [ %266, %259 ]
  %276 = phi i32* [ %14, %17 ], [ %62, %131 ], [ %267, %259 ]
  store i32* %276, i32** %5, align 8
  br label %277

277:                                              ; preds = %248, %242, %133, %272
  %278 = phi i32 [ %273, %272 ], [ %2, %133 ], [ %166, %242 ], [ %255, %248 ]
  %279 = phi i8* [ %274, %272 ], [ %1, %133 ], [ %164, %242 ], [ %252, %248 ]
  %280 = phi i8* [ %275, %272 ], [ %10, %133 ], [ %163, %242 ], [ %254, %248 ]
  store i8* %280, i8** %3, align 8
  %281 = icmp sgt i32 %278, 0
  br i1 %281, label %282, label %400

282:                                              ; preds = %277
  %283 = icmp eq %struct.UConverter* %0, null
  br i1 %283, label %399, label %284

284:                                              ; preds = %282
  %285 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 27, i64 0
  %286 = trunc i32 %278 to i8
  %287 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 21
  store i8 %286, i8* %287, align 1
  %288 = add nsw i32 %278, -1
  %289 = zext i32 %288 to i64
  %290 = add nuw nsw i64 %289, 1
  %291 = icmp ult i64 %290, 32
  br i1 %291, label %386, label %292

292:                                              ; preds = %284
  %293 = getelementptr %struct.UConverter, %struct.UConverter* %0, i64 0, i32 27, i64 0
  %294 = add nsw i32 %278, -1
  %295 = zext i32 %294 to i64
  %296 = add nuw nsw i64 %295, 105
  %297 = getelementptr i8, i8* %9, i64 %296
  %298 = add nuw nsw i64 %295, 1
  %299 = getelementptr i8, i8* %279, i64 %298
  %300 = icmp ult i8* %293, %299
  %301 = icmp ult i8* %279, %297
  %302 = and i1 %300, %301
  br i1 %302, label %386, label %303

303:                                              ; preds = %292
  %304 = and i64 %290, 8589934560
  %305 = trunc i64 %304 to i32
  %306 = sub i32 %278, %305
  %307 = getelementptr i8, i8* %279, i64 %304
  %308 = getelementptr %struct.UConverter, %struct.UConverter* %0, i64 0, i32 27, i64 %304
  %309 = add nsw i64 %304, -32
  %310 = lshr exact i64 %309, 5
  %311 = add nuw nsw i64 %310, 1
  %312 = and i64 %311, 3
  %313 = icmp ult i64 %309, 96
  br i1 %313, label %365, label %314

314:                                              ; preds = %303
  %315 = sub nsw i64 %311, %312
  br label %316

316:                                              ; preds = %316, %314
  %317 = phi i64 [ 0, %314 ], [ %362, %316 ]
  %318 = phi i64 [ %315, %314 ], [ %363, %316 ]
  %319 = getelementptr i8, i8* %279, i64 %317
  %320 = getelementptr %struct.UConverter, %struct.UConverter* %0, i64 0, i32 27, i64 %317
  %321 = bitcast i8* %319 to <16 x i8>*
  %322 = load <16 x i8>, <16 x i8>* %321, align 1, !alias.scope !22
  %323 = getelementptr i8, i8* %319, i64 16
  %324 = bitcast i8* %323 to <16 x i8>*
  %325 = load <16 x i8>, <16 x i8>* %324, align 1, !alias.scope !22
  %326 = bitcast i8* %320 to <16 x i8>*
  store <16 x i8> %322, <16 x i8>* %326, align 1, !alias.scope !25, !noalias !22
  %327 = getelementptr i8, i8* %320, i64 16
  %328 = bitcast i8* %327 to <16 x i8>*
  store <16 x i8> %325, <16 x i8>* %328, align 1, !alias.scope !25, !noalias !22
  %329 = or i64 %317, 32
  %330 = getelementptr i8, i8* %279, i64 %329
  %331 = getelementptr %struct.UConverter, %struct.UConverter* %0, i64 0, i32 27, i64 %329
  %332 = bitcast i8* %330 to <16 x i8>*
  %333 = load <16 x i8>, <16 x i8>* %332, align 1, !alias.scope !22
  %334 = getelementptr i8, i8* %330, i64 16
  %335 = bitcast i8* %334 to <16 x i8>*
  %336 = load <16 x i8>, <16 x i8>* %335, align 1, !alias.scope !22
  %337 = bitcast i8* %331 to <16 x i8>*
  store <16 x i8> %333, <16 x i8>* %337, align 1, !alias.scope !25, !noalias !22
  %338 = getelementptr i8, i8* %331, i64 16
  %339 = bitcast i8* %338 to <16 x i8>*
  store <16 x i8> %336, <16 x i8>* %339, align 1, !alias.scope !25, !noalias !22
  %340 = or i64 %317, 64
  %341 = getelementptr i8, i8* %279, i64 %340
  %342 = getelementptr %struct.UConverter, %struct.UConverter* %0, i64 0, i32 27, i64 %340
  %343 = bitcast i8* %341 to <16 x i8>*
  %344 = load <16 x i8>, <16 x i8>* %343, align 1, !alias.scope !22
  %345 = getelementptr i8, i8* %341, i64 16
  %346 = bitcast i8* %345 to <16 x i8>*
  %347 = load <16 x i8>, <16 x i8>* %346, align 1, !alias.scope !22
  %348 = bitcast i8* %342 to <16 x i8>*
  store <16 x i8> %344, <16 x i8>* %348, align 1, !alias.scope !25, !noalias !22
  %349 = getelementptr i8, i8* %342, i64 16
  %350 = bitcast i8* %349 to <16 x i8>*
  store <16 x i8> %347, <16 x i8>* %350, align 1, !alias.scope !25, !noalias !22
  %351 = or i64 %317, 96
  %352 = getelementptr i8, i8* %279, i64 %351
  %353 = getelementptr %struct.UConverter, %struct.UConverter* %0, i64 0, i32 27, i64 %351
  %354 = bitcast i8* %352 to <16 x i8>*
  %355 = load <16 x i8>, <16 x i8>* %354, align 1, !alias.scope !22
  %356 = getelementptr i8, i8* %352, i64 16
  %357 = bitcast i8* %356 to <16 x i8>*
  %358 = load <16 x i8>, <16 x i8>* %357, align 1, !alias.scope !22
  %359 = bitcast i8* %353 to <16 x i8>*
  store <16 x i8> %355, <16 x i8>* %359, align 1, !alias.scope !25, !noalias !22
  %360 = getelementptr i8, i8* %353, i64 16
  %361 = bitcast i8* %360 to <16 x i8>*
  store <16 x i8> %358, <16 x i8>* %361, align 1, !alias.scope !25, !noalias !22
  %362 = add i64 %317, 128
  %363 = add i64 %318, -4
  %364 = icmp eq i64 %363, 0
  br i1 %364, label %365, label %316, !llvm.loop !27

365:                                              ; preds = %316, %303
  %366 = phi i64 [ 0, %303 ], [ %362, %316 ]
  %367 = icmp eq i64 %312, 0
  br i1 %367, label %384, label %368

368:                                              ; preds = %365, %368
  %369 = phi i64 [ %381, %368 ], [ %366, %365 ]
  %370 = phi i64 [ %382, %368 ], [ %312, %365 ]
  %371 = getelementptr i8, i8* %279, i64 %369
  %372 = getelementptr %struct.UConverter, %struct.UConverter* %0, i64 0, i32 27, i64 %369
  %373 = bitcast i8* %371 to <16 x i8>*
  %374 = load <16 x i8>, <16 x i8>* %373, align 1, !alias.scope !22
  %375 = getelementptr i8, i8* %371, i64 16
  %376 = bitcast i8* %375 to <16 x i8>*
  %377 = load <16 x i8>, <16 x i8>* %376, align 1, !alias.scope !22
  %378 = bitcast i8* %372 to <16 x i8>*
  store <16 x i8> %374, <16 x i8>* %378, align 1, !alias.scope !25, !noalias !22
  %379 = getelementptr i8, i8* %372, i64 16
  %380 = bitcast i8* %379 to <16 x i8>*
  store <16 x i8> %377, <16 x i8>* %380, align 1, !alias.scope !25, !noalias !22
  %381 = add i64 %369, 32
  %382 = add i64 %370, -1
  %383 = icmp eq i64 %382, 0
  br i1 %383, label %384, label %368, !llvm.loop !28

384:                                              ; preds = %368, %365
  %385 = icmp eq i64 %290, %304
  br i1 %385, label %399, label %386

386:                                              ; preds = %384, %292, %284
  %387 = phi i32 [ %278, %292 ], [ %278, %284 ], [ %306, %384 ]
  %388 = phi i8* [ %279, %292 ], [ %279, %284 ], [ %307, %384 ]
  %389 = phi i8* [ %285, %292 ], [ %285, %284 ], [ %308, %384 ]
  br label %390

390:                                              ; preds = %386, %390
  %391 = phi i32 [ %397, %390 ], [ %387, %386 ]
  %392 = phi i8* [ %394, %390 ], [ %388, %386 ]
  %393 = phi i8* [ %396, %390 ], [ %389, %386 ]
  %394 = getelementptr inbounds i8, i8* %392, i64 1
  %395 = load i8, i8* %392, align 1
  %396 = getelementptr inbounds i8, i8* %393, i64 1
  store i8 %395, i8* %393, align 1
  %397 = add nsw i32 %391, -1
  %398 = icmp sgt i32 %397, 0
  br i1 %398, label %390, label %399, !llvm.loop !29

399:                                              ; preds = %390, %384, %282
  store i32 15, i32* %7, align 4
  br label %400

400:                                              ; preds = %399, %277
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ucnv_toUWriteUChars_69(%struct.UConverter*, i16* nocapture readonly, i32, i16** nocapture, i16* readnone, i32**, i32, i32* nocapture) local_unnamed_addr #1 {
  %9 = bitcast %struct.UConverter* %0 to i8*
  %10 = load i16*, i16** %3, align 8
  %11 = icmp eq i32** %5, null
  br i1 %11, label %19, label %12

12:                                               ; preds = %8
  %13 = load i32*, i32** %5, align 8
  %14 = icmp eq i32* %13, null
  br i1 %14, label %19, label %15

15:                                               ; preds = %12
  %16 = icmp sgt i32 %2, 0
  %17 = icmp ult i16* %10, %4
  %18 = and i1 %16, %17
  br i1 %18, label %34, label %47

19:                                               ; preds = %12, %8
  %20 = icmp sgt i32 %2, 0
  %21 = icmp ult i16* %10, %4
  %22 = and i1 %20, %21
  br i1 %22, label %23, label %52

23:                                               ; preds = %19, %23
  %24 = phi i16* [ %29, %23 ], [ %10, %19 ]
  %25 = phi i16* [ %27, %23 ], [ %1, %19 ]
  %26 = phi i32 [ %30, %23 ], [ %2, %19 ]
  %27 = getelementptr inbounds i16, i16* %25, i64 1
  %28 = load i16, i16* %25, align 2
  %29 = getelementptr inbounds i16, i16* %24, i64 1
  store i16 %28, i16* %24, align 2
  %30 = add nsw i32 %26, -1
  %31 = icmp sgt i32 %30, 0
  %32 = icmp ult i16* %29, %4
  %33 = and i1 %31, %32
  br i1 %33, label %23, label %52

34:                                               ; preds = %15, %34
  %35 = phi i32* [ %42, %34 ], [ %13, %15 ]
  %36 = phi i16* [ %41, %34 ], [ %10, %15 ]
  %37 = phi i16* [ %39, %34 ], [ %1, %15 ]
  %38 = phi i32 [ %43, %34 ], [ %2, %15 ]
  %39 = getelementptr inbounds i16, i16* %37, i64 1
  %40 = load i16, i16* %37, align 2
  %41 = getelementptr inbounds i16, i16* %36, i64 1
  store i16 %40, i16* %36, align 2
  %42 = getelementptr inbounds i32, i32* %35, i64 1
  store i32 %6, i32* %35, align 4
  %43 = add nsw i32 %38, -1
  %44 = icmp sgt i32 %43, 0
  %45 = icmp ult i16* %41, %4
  %46 = and i1 %44, %45
  br i1 %46, label %34, label %47

47:                                               ; preds = %34, %15
  %48 = phi i32 [ %2, %15 ], [ %43, %34 ]
  %49 = phi i16* [ %1, %15 ], [ %39, %34 ]
  %50 = phi i16* [ %10, %15 ], [ %41, %34 ]
  %51 = phi i32* [ %13, %15 ], [ %42, %34 ]
  store i32* %51, i32** %5, align 8
  br label %52

52:                                               ; preds = %23, %19, %47
  %53 = phi i32 [ %48, %47 ], [ %2, %19 ], [ %30, %23 ]
  %54 = phi i16* [ %49, %47 ], [ %1, %19 ], [ %27, %23 ]
  %55 = phi i16* [ %50, %47 ], [ %10, %19 ], [ %29, %23 ]
  %56 = bitcast i16* %54 to i8*
  store i16* %55, i16** %3, align 8
  %57 = icmp sgt i32 %53, 0
  br i1 %57, label %58, label %177

58:                                               ; preds = %52
  %59 = icmp eq %struct.UConverter* %0, null
  br i1 %59, label %176, label %60

60:                                               ; preds = %58
  %61 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 30, i64 0
  %62 = trunc i32 %53 to i8
  %63 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 23
  store i8 %62, i8* %63, align 1
  %64 = add nsw i32 %53, -1
  %65 = zext i32 %64 to i64
  %66 = add nuw nsw i64 %65, 1
  %67 = icmp ult i64 %66, 16
  br i1 %67, label %163, label %68

68:                                               ; preds = %60
  %69 = getelementptr %struct.UConverter, %struct.UConverter* %0, i64 0, i32 30, i64 0
  %70 = add nsw i32 %53, -1
  %71 = zext i32 %70 to i64
  %72 = shl nuw nsw i64 %71, 1
  %73 = add nuw nsw i64 %72, 146
  %74 = getelementptr i8, i8* %9, i64 %73
  %75 = add nuw nsw i64 %71, 1
  %76 = getelementptr i16, i16* %54, i64 %75
  %77 = icmp ult i16* %69, %76
  %78 = icmp ugt i8* %74, %56
  %79 = and i1 %77, %78
  br i1 %79, label %163, label %80

80:                                               ; preds = %68
  %81 = and i64 %66, 8589934576
  %82 = trunc i64 %81 to i32
  %83 = sub i32 %53, %82
  %84 = getelementptr i16, i16* %54, i64 %81
  %85 = getelementptr %struct.UConverter, %struct.UConverter* %0, i64 0, i32 30, i64 %81
  %86 = add nsw i64 %81, -16
  %87 = lshr exact i64 %86, 4
  %88 = add nuw nsw i64 %87, 1
  %89 = and i64 %88, 3
  %90 = icmp ult i64 %86, 48
  br i1 %90, label %142, label %91

91:                                               ; preds = %80
  %92 = sub nsw i64 %88, %89
  br label %93

93:                                               ; preds = %93, %91
  %94 = phi i64 [ 0, %91 ], [ %139, %93 ]
  %95 = phi i64 [ %92, %91 ], [ %140, %93 ]
  %96 = getelementptr i16, i16* %54, i64 %94
  %97 = getelementptr %struct.UConverter, %struct.UConverter* %0, i64 0, i32 30, i64 %94
  %98 = bitcast i16* %96 to <8 x i16>*
  %99 = load <8 x i16>, <8 x i16>* %98, align 2, !alias.scope !30
  %100 = getelementptr i16, i16* %96, i64 8
  %101 = bitcast i16* %100 to <8 x i16>*
  %102 = load <8 x i16>, <8 x i16>* %101, align 2, !alias.scope !30
  %103 = bitcast i16* %97 to <8 x i16>*
  store <8 x i16> %99, <8 x i16>* %103, align 2, !alias.scope !33, !noalias !30
  %104 = getelementptr i16, i16* %97, i64 8
  %105 = bitcast i16* %104 to <8 x i16>*
  store <8 x i16> %102, <8 x i16>* %105, align 2, !alias.scope !33, !noalias !30
  %106 = or i64 %94, 16
  %107 = getelementptr i16, i16* %54, i64 %106
  %108 = getelementptr %struct.UConverter, %struct.UConverter* %0, i64 0, i32 30, i64 %106
  %109 = bitcast i16* %107 to <8 x i16>*
  %110 = load <8 x i16>, <8 x i16>* %109, align 2, !alias.scope !30
  %111 = getelementptr i16, i16* %107, i64 8
  %112 = bitcast i16* %111 to <8 x i16>*
  %113 = load <8 x i16>, <8 x i16>* %112, align 2, !alias.scope !30
  %114 = bitcast i16* %108 to <8 x i16>*
  store <8 x i16> %110, <8 x i16>* %114, align 2, !alias.scope !33, !noalias !30
  %115 = getelementptr i16, i16* %108, i64 8
  %116 = bitcast i16* %115 to <8 x i16>*
  store <8 x i16> %113, <8 x i16>* %116, align 2, !alias.scope !33, !noalias !30
  %117 = or i64 %94, 32
  %118 = getelementptr i16, i16* %54, i64 %117
  %119 = getelementptr %struct.UConverter, %struct.UConverter* %0, i64 0, i32 30, i64 %117
  %120 = bitcast i16* %118 to <8 x i16>*
  %121 = load <8 x i16>, <8 x i16>* %120, align 2, !alias.scope !30
  %122 = getelementptr i16, i16* %118, i64 8
  %123 = bitcast i16* %122 to <8 x i16>*
  %124 = load <8 x i16>, <8 x i16>* %123, align 2, !alias.scope !30
  %125 = bitcast i16* %119 to <8 x i16>*
  store <8 x i16> %121, <8 x i16>* %125, align 2, !alias.scope !33, !noalias !30
  %126 = getelementptr i16, i16* %119, i64 8
  %127 = bitcast i16* %126 to <8 x i16>*
  store <8 x i16> %124, <8 x i16>* %127, align 2, !alias.scope !33, !noalias !30
  %128 = or i64 %94, 48
  %129 = getelementptr i16, i16* %54, i64 %128
  %130 = getelementptr %struct.UConverter, %struct.UConverter* %0, i64 0, i32 30, i64 %128
  %131 = bitcast i16* %129 to <8 x i16>*
  %132 = load <8 x i16>, <8 x i16>* %131, align 2, !alias.scope !30
  %133 = getelementptr i16, i16* %129, i64 8
  %134 = bitcast i16* %133 to <8 x i16>*
  %135 = load <8 x i16>, <8 x i16>* %134, align 2, !alias.scope !30
  %136 = bitcast i16* %130 to <8 x i16>*
  store <8 x i16> %132, <8 x i16>* %136, align 2, !alias.scope !33, !noalias !30
  %137 = getelementptr i16, i16* %130, i64 8
  %138 = bitcast i16* %137 to <8 x i16>*
  store <8 x i16> %135, <8 x i16>* %138, align 2, !alias.scope !33, !noalias !30
  %139 = add i64 %94, 64
  %140 = add i64 %95, -4
  %141 = icmp eq i64 %140, 0
  br i1 %141, label %142, label %93, !llvm.loop !35

142:                                              ; preds = %93, %80
  %143 = phi i64 [ 0, %80 ], [ %139, %93 ]
  %144 = icmp eq i64 %89, 0
  br i1 %144, label %161, label %145

145:                                              ; preds = %142, %145
  %146 = phi i64 [ %158, %145 ], [ %143, %142 ]
  %147 = phi i64 [ %159, %145 ], [ %89, %142 ]
  %148 = getelementptr i16, i16* %54, i64 %146
  %149 = getelementptr %struct.UConverter, %struct.UConverter* %0, i64 0, i32 30, i64 %146
  %150 = bitcast i16* %148 to <8 x i16>*
  %151 = load <8 x i16>, <8 x i16>* %150, align 2, !alias.scope !30
  %152 = getelementptr i16, i16* %148, i64 8
  %153 = bitcast i16* %152 to <8 x i16>*
  %154 = load <8 x i16>, <8 x i16>* %153, align 2, !alias.scope !30
  %155 = bitcast i16* %149 to <8 x i16>*
  store <8 x i16> %151, <8 x i16>* %155, align 2, !alias.scope !33, !noalias !30
  %156 = getelementptr i16, i16* %149, i64 8
  %157 = bitcast i16* %156 to <8 x i16>*
  store <8 x i16> %154, <8 x i16>* %157, align 2, !alias.scope !33, !noalias !30
  %158 = add i64 %146, 16
  %159 = add i64 %147, -1
  %160 = icmp eq i64 %159, 0
  br i1 %160, label %161, label %145, !llvm.loop !36

161:                                              ; preds = %145, %142
  %162 = icmp eq i64 %66, %81
  br i1 %162, label %176, label %163

163:                                              ; preds = %161, %68, %60
  %164 = phi i32 [ %53, %68 ], [ %53, %60 ], [ %83, %161 ]
  %165 = phi i16* [ %54, %68 ], [ %54, %60 ], [ %84, %161 ]
  %166 = phi i16* [ %61, %68 ], [ %61, %60 ], [ %85, %161 ]
  br label %167

167:                                              ; preds = %163, %167
  %168 = phi i32 [ %174, %167 ], [ %164, %163 ]
  %169 = phi i16* [ %171, %167 ], [ %165, %163 ]
  %170 = phi i16* [ %173, %167 ], [ %166, %163 ]
  %171 = getelementptr inbounds i16, i16* %169, i64 1
  %172 = load i16, i16* %169, align 2
  %173 = getelementptr inbounds i16, i16* %170, i64 1
  store i16 %172, i16* %170, align 2
  %174 = add nsw i32 %168, -1
  %175 = icmp sgt i32 %174, 0
  br i1 %175, label %167, label %176, !llvm.loop !37

176:                                              ; preds = %167, %161, %58
  store i32 15, i32* %7, align 4
  br label %177

177:                                              ; preds = %176, %52
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ucnv_toUWriteCodePoint_69(%struct.UConverter*, i32, i16** nocapture, i16* readnone, i32**, i32, i32* nocapture) local_unnamed_addr #1 {
  %8 = load i16*, i16** %2, align 8
  %9 = icmp ult i16* %8, %3
  br i1 %9, label %10, label %43

10:                                               ; preds = %7
  %11 = icmp slt i32 %1, 65536
  br i1 %11, label %12, label %15

12:                                               ; preds = %10
  %13 = trunc i32 %1 to i16
  %14 = getelementptr inbounds i16, i16* %8, i64 1
  store i16 %13, i16* %8, align 2
  br label %27

15:                                               ; preds = %10
  %16 = lshr i32 %1, 10
  %17 = trunc i32 %16 to i16
  %18 = add i16 %17, -10304
  %19 = getelementptr inbounds i16, i16* %8, i64 1
  store i16 %18, i16* %8, align 2
  %20 = trunc i32 %1 to i16
  %21 = and i16 %20, 1023
  %22 = or i16 %21, -9216
  %23 = zext i16 %22 to i32
  %24 = icmp ult i16* %19, %3
  br i1 %24, label %25, label %27

25:                                               ; preds = %15
  %26 = getelementptr inbounds i16, i16* %8, i64 2
  store i16 %22, i16* %19, align 2
  br label %27

27:                                               ; preds = %15, %25, %12
  %28 = phi i32 [ -1, %12 ], [ -1, %25 ], [ %23, %15 ]
  %29 = phi i16* [ %14, %12 ], [ %26, %25 ], [ %19, %15 ]
  %30 = icmp eq i32** %4, null
  br i1 %30, label %43, label %31

31:                                               ; preds = %27
  %32 = load i32*, i32** %4, align 8
  %33 = icmp eq i32* %32, null
  br i1 %33, label %43, label %34

34:                                               ; preds = %31
  %35 = getelementptr inbounds i32, i32* %32, i64 1
  store i32 %5, i32* %32, align 4
  %36 = load i16*, i16** %2, align 8
  %37 = getelementptr inbounds i16, i16* %36, i64 1
  %38 = icmp ult i16* %37, %29
  br i1 %38, label %39, label %41

39:                                               ; preds = %34
  %40 = getelementptr inbounds i32, i32* %32, i64 2
  store i32 %5, i32* %35, align 4
  br label %41

41:                                               ; preds = %39, %34
  %42 = phi i32* [ %40, %39 ], [ %35, %34 ]
  store i32* %42, i32** %4, align 8
  br label %43

43:                                               ; preds = %31, %27, %41, %7
  %44 = phi i32 [ %28, %41 ], [ %28, %31 ], [ %28, %27 ], [ %1, %7 ]
  %45 = phi i16* [ %29, %41 ], [ %29, %31 ], [ %29, %27 ], [ %8, %7 ]
  store i16* %45, i16** %2, align 8
  %46 = icmp sgt i32 %44, -1
  br i1 %46, label %47, label %67

47:                                               ; preds = %43
  %48 = icmp eq %struct.UConverter* %0, null
  br i1 %48, label %66, label %49

49:                                               ; preds = %47
  %50 = icmp ult i32 %44, 65536
  br i1 %50, label %51, label %53

51:                                               ; preds = %49
  %52 = trunc i32 %44 to i16
  br label %61

53:                                               ; preds = %49
  %54 = lshr i32 %44, 10
  %55 = trunc i32 %54 to i16
  %56 = add i16 %55, -10304
  %57 = trunc i32 %44 to i16
  %58 = and i16 %57, 1023
  %59 = or i16 %58, -9216
  %60 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 30, i64 1
  store i16 %59, i16* %60, align 2
  br label %61

61:                                               ; preds = %53, %51
  %62 = phi i16 [ %56, %53 ], [ %52, %51 ]
  %63 = phi i8 [ 2, %53 ], [ 1, %51 ]
  %64 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 30, i64 0
  store i16 %62, i16* %64, align 2
  %65 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 23
  store i8 %63, i8* %65, align 1
  br label %66

66:                                               ; preds = %47, %61
  store i32 15, i32* %6, align 4
  br label %67

67:                                               ; preds = %66, %43
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = !{!8, !3}
!8 = distinct !{!8, !4}
!9 = !{!8}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.isvectorized", i32 1}
!12 = !{!13}
!13 = distinct !{!13, !14}
!14 = distinct !{!14, !"LVerDomain"}
!15 = !{!16}
!16 = distinct !{!16, !14}
!17 = distinct !{!17, !11}
!18 = distinct !{!18, !19}
!19 = !{!"llvm.loop.unroll.disable"}
!20 = distinct !{!20, !11}
!21 = distinct !{!21, !11}
!22 = !{!23}
!23 = distinct !{!23, !24}
!24 = distinct !{!24, !"LVerDomain"}
!25 = !{!26}
!26 = distinct !{!26, !24}
!27 = distinct !{!27, !11}
!28 = distinct !{!28, !19}
!29 = distinct !{!29, !11}
!30 = !{!31}
!31 = distinct !{!31, !32}
!32 = distinct !{!32, !"LVerDomain"}
!33 = !{!34}
!34 = distinct !{!34, !32}
!35 = distinct !{!35, !11}
!36 = distinct !{!36, !19}
!37 = distinct !{!37, !11}
