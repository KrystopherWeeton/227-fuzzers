; ModuleID = '../../net/websockets/websocket_deflater.cc'
source_filename = "../../net/websockets/websocket_deflater.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::locale::id" = type <{ %"struct.std::__1::once_flag", i32, [4 x i8] }>
%"struct.std::__1::once_flag" = type { i64 }
%"class.net::WebSocketDeflater" = type <{ %"class.std::__1::unique_ptr", i32, [4 x i8], %"class.base::circular_deque", %"class.std::__1::vector", i8, [7 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %struct.z_stream_s* }
%struct.z_stream_s = type { i8*, i32, i64, i8*, i32, i64, i8*, %struct.internal_state*, i8* (i8*, i32, i32)*, void (i8*, i8*)*, i8*, i32, i64, i64 }
%struct.internal_state = type opaque
%"class.base::circular_deque" = type { %"class.base::internal::VectorBuffer", i64, i64 }
%"class.base::internal::VectorBuffer" = type { i8*, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i8* }
%"class.base::internal::circular_deque_iterator" = type { %"class.base::internal::circular_deque_const_iterator" }
%"class.base::internal::circular_deque_const_iterator" = type { %"class.base::circular_deque"*, i64 }
%"class.net::IOBufferWithSize" = type <{ %"class.net::IOBuffer", i32, [4 x i8] }>
%"class.net::IOBuffer" = type { i32 (...)**, %"class.base::RefCountedThreadSafe", i8* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry" = type { i8, %"class.std::__1::basic_ostream"* }
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale::facet" = type { %"class.std::__1::__shared_count" }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::ctype" = type <{ %"class.std::__1::locale::facet", i16*, i8, [7 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

$_ZN4base14circular_dequeIcED2Ev = comdat any

$_ZN4base14circular_dequeIcE6resizeEm = comdat any

$_ZN4base14circular_dequeIcE6insertIPKcEENSt3__19enable_ifIXgssr4base8internal11is_iteratorIT_EE5valueEvE4typeENS_8internal29circular_deque_const_iteratorIcEES7_S7_ = comdat any

$_ZN4base14circular_dequeIcE5eraseENS_8internal29circular_deque_const_iteratorIcEES4_ = comdat any

$_ZN4base14circular_dequeIcE6insertIPcEENSt3__19enable_ifIXgssr4base8internal11is_iteratorIT_EE5valueEvE4typeENS_8internal29circular_deque_const_iteratorIcEES6_S6_ = comdat any

$_ZN4base8internal12VectorBufferIcEixEm = comdat any

$_ZNSt3__16vectorIcNS_9allocatorIcEEE8__appendEm = comdat any

$_ZN4base14circular_dequeIcE25ExpandCapacityIfNecessaryEm = comdat any

$_ZN4base14circular_dequeIcE10MoveBufferERNS_8internal12VectorBufferIcEEmmPS4_PmS7_ = comdat any

$_ZN4base8internal12VectorBufferIcE9MoveRangeIcLi0EEEvPcS4_S4_ = comdat any

$_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m = comdat any

$_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ = comdat any

$_ZNK4base8internal12VectorBufferIcEixEm = comdat any

$_ZN4base14circular_dequeIcE25ShrinkCapacityIfNecessaryEv = comdat any

$_ZN4base14circular_dequeIcE11MakeRoomForEmPNS_8internal23circular_deque_iteratorIcEES5_ = comdat any

@.str = private unnamed_addr constant [7 x i8] c"1.2.11\00", align 1
@_ZZN3net17WebSocketDeflater12PushSyncMarkEvE4data = internal constant [4 x i8] c"\00\00\FF\FF", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"i <= capacity_\00", align 1
@.str.2 = private unnamed_addr constant [38 x i8] c"../../base/containers/vector_buffer.h\00", align 1
@.str.4 = private unnamed_addr constant [41 x i8] c"!RangesOverlap(from_begin, from_end, to)\00", align 1
@.str.5 = private unnamed_addr constant [15 x i8] c"from_begin: 0x\00", align 1
@.str.6 = private unnamed_addr constant [15 x i8] c", from_end: 0x\00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c", to: 0x\00", align 1
@_ZNSt3__15ctypeIcE2idE = external global %"class.std::__1::locale::id", align 8

@_ZN3net17WebSocketDeflaterC1ENS0_19ContextTakeOverModeE = hidden unnamed_addr alias void (%"class.net::WebSocketDeflater"*, i32), void (%"class.net::WebSocketDeflater"*, i32)* @_ZN3net17WebSocketDeflaterC2ENS0_19ContextTakeOverModeE
@_ZN3net17WebSocketDeflaterD1Ev = hidden unnamed_addr alias void (%"class.net::WebSocketDeflater"*), void (%"class.net::WebSocketDeflater"*)* @_ZN3net17WebSocketDeflaterD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net17WebSocketDeflaterC2ENS0_19ContextTakeOverModeE(%"class.net::WebSocketDeflater"* nocapture, i32) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.net::WebSocketDeflater"* %0 to i64*
  store i64 0, i64* %3, align 8
  %4 = getelementptr inbounds %"class.net::WebSocketDeflater", %"class.net::WebSocketDeflater"* %0, i64 0, i32 1
  store i32 %1, i32* %4, align 8
  %5 = getelementptr inbounds %"class.net::WebSocketDeflater", %"class.net::WebSocketDeflater"* %0, i64 0, i32 3
  %6 = bitcast %"class.base::circular_deque"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 57, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net17WebSocketDeflaterD2Ev(%"class.net::WebSocketDeflater"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::WebSocketDeflater", %"class.net::WebSocketDeflater"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %3 = load %struct.z_stream_s*, %struct.z_stream_s** %2, align 8
  %4 = icmp eq %struct.z_stream_s* %3, null
  br i1 %4, label %11, label %5

5:                                                ; preds = %1
  %6 = tail call i32 @Cr_z_deflateEnd(%struct.z_stream_s* nonnull %3) #10
  %7 = load %struct.z_stream_s*, %struct.z_stream_s** %2, align 8
  store %struct.z_stream_s* null, %struct.z_stream_s** %2, align 8
  %8 = icmp eq %struct.z_stream_s* %7, null
  br i1 %8, label %11, label %9

9:                                                ; preds = %5
  %10 = bitcast %struct.z_stream_s* %7 to i8*
  tail call void @_ZdlPv(i8* %10) #11
  br label %11

11:                                               ; preds = %1, %9, %5
  %12 = getelementptr inbounds %"class.net::WebSocketDeflater", %"class.net::WebSocketDeflater"* %0, i64 0, i32 4, i32 0, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = icmp eq i8* %13, null
  br i1 %14, label %19, label %15

15:                                               ; preds = %11
  %16 = ptrtoint i8* %13 to i64
  %17 = getelementptr inbounds %"class.net::WebSocketDeflater", %"class.net::WebSocketDeflater"* %0, i64 0, i32 4, i32 0, i32 1
  %18 = bitcast i8** %17 to i64*
  store i64 %16, i64* %18, align 8
  tail call void @_ZdlPv(i8* nonnull %13) #11
  br label %19

19:                                               ; preds = %11, %15
  %20 = getelementptr inbounds %"class.net::WebSocketDeflater", %"class.net::WebSocketDeflater"* %0, i64 0, i32 3
  tail call void @_ZN4base14circular_dequeIcED2Ev(%"class.base::circular_deque"* %20) #10
  %21 = load %struct.z_stream_s*, %struct.z_stream_s** %2, align 8
  store %struct.z_stream_s* null, %struct.z_stream_s** %2, align 8
  %22 = icmp eq %struct.z_stream_s* %21, null
  br i1 %22, label %25, label %23

23:                                               ; preds = %19
  %24 = bitcast %struct.z_stream_s* %21 to i8*
  tail call void @_ZdlPv(i8* %24) #11
  br label %25

25:                                               ; preds = %19, %23
  ret void
}

declare i32 @Cr_z_deflateEnd(%struct.z_stream_s*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base14circular_dequeIcED2Ev(%"class.base::circular_deque"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 1
  %3 = load i64, i64* %2, align 8
  %4 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 2
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, %3
  br i1 %6, label %18, label %7

7:                                                ; preds = %1
  %8 = icmp ugt i64 %5, %3
  %9 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0
  %10 = tail call dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIcEixEm(%"class.base::internal::VectorBuffer"* %9, i64 %3) #10
  br i1 %8, label %16, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = tail call dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIcEixEm(%"class.base::internal::VectorBuffer"* %9, i64 %13) #10
  %15 = tail call dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIcEixEm(%"class.base::internal::VectorBuffer"* %9, i64 0) #10
  br label %16

16:                                               ; preds = %7, %11
  %17 = tail call dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIcEixEm(%"class.base::internal::VectorBuffer"* %9, i64 %5) #10
  br label %18

18:                                               ; preds = %16, %1
  %19 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  tail call void @free(i8* %20) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3net17WebSocketDeflater10InitializeEi(%"class.net::WebSocketDeflater"*, i32) local_unnamed_addr #0 align 2 {
  %3 = tail call i8* @_Znwm(i64 112) #11
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %3, i8 0, i64 112, i1 false) #10
  %4 = ptrtoint i8* %3 to i64
  %5 = getelementptr inbounds %"class.net::WebSocketDeflater", %"class.net::WebSocketDeflater"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %6 = load %struct.z_stream_s*, %struct.z_stream_s** %5, align 8
  %7 = bitcast %"class.net::WebSocketDeflater"* %0 to i64*
  store i64 %4, i64* %7, align 8
  %8 = icmp eq %struct.z_stream_s* %6, null
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = bitcast %struct.z_stream_s* %6 to i8*
  tail call void @_ZdlPv(i8* %10) #11
  %11 = bitcast %"class.net::WebSocketDeflater"* %0 to i8**
  %12 = load i8*, i8** %11, align 8
  br label %13

13:                                               ; preds = %2, %9
  %14 = phi i8* [ %12, %9 ], [ %3, %2 ]
  %15 = icmp sgt i32 %1, 9
  %16 = select i1 %15, i32 %1, i32 9
  %17 = sub nsw i32 0, %16
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 112, i1 false)
  %18 = load %struct.z_stream_s*, %struct.z_stream_s** %5, align 8
  %19 = tail call i32 @Cr_z_deflateInit2_(%struct.z_stream_s* %18, i32 -1, i32 8, i32 %17, i32 8, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 112) #10
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %28, label %21

21:                                               ; preds = %13
  %22 = load %struct.z_stream_s*, %struct.z_stream_s** %5, align 8
  %23 = tail call i32 @Cr_z_deflateEnd(%struct.z_stream_s* %22) #10
  %24 = load %struct.z_stream_s*, %struct.z_stream_s** %5, align 8
  store %struct.z_stream_s* null, %struct.z_stream_s** %5, align 8
  %25 = icmp eq %struct.z_stream_s* %24, null
  br i1 %25, label %44, label %26

26:                                               ; preds = %21
  %27 = bitcast %struct.z_stream_s* %24 to i8*
  tail call void @_ZdlPv(i8* %27) #11
  br label %44

28:                                               ; preds = %13
  %29 = getelementptr inbounds %"class.net::WebSocketDeflater", %"class.net::WebSocketDeflater"* %0, i64 0, i32 4
  %30 = getelementptr inbounds %"class.net::WebSocketDeflater", %"class.net::WebSocketDeflater"* %0, i64 0, i32 4, i32 0, i32 1
  %31 = bitcast i8** %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = bitcast %"class.std::__1::vector"* %29 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = sub i64 %32, %34
  %36 = icmp ult i64 %35, 4096
  %37 = inttoptr i64 %34 to i8*
  br i1 %36, label %38, label %40

38:                                               ; preds = %28
  %39 = sub nuw nsw i64 4096, %35
  tail call void @_ZNSt3__16vectorIcNS_9allocatorIcEEE8__appendEm(%"class.std::__1::vector"* %29, i64 %39) #10
  br label %44

40:                                               ; preds = %28
  %41 = icmp eq i64 %35, 4096
  br i1 %41, label %44, label %42

42:                                               ; preds = %40
  %43 = getelementptr inbounds i8, i8* %37, i64 4096
  store i8* %43, i8** %30, align 8
  br label %44

44:                                               ; preds = %40, %42, %38, %26, %21
  %45 = phi i1 [ false, %21 ], [ false, %26 ], [ true, %38 ], [ true, %40 ], [ true, %42 ]
  ret i1 %45
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare i32 @Cr_z_deflateInit2_(%struct.z_stream_s*, i32, i32, i32, i32, i32, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3net17WebSocketDeflater8AddBytesEPKcm(%"class.net::WebSocketDeflater"*, i8*, i64) local_unnamed_addr #0 align 2 {
  %4 = icmp eq i64 %2, 0
  br i1 %4, label %46, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %"class.net::WebSocketDeflater", %"class.net::WebSocketDeflater"* %0, i64 0, i32 5
  store i8 1, i8* %6, align 8
  %7 = getelementptr inbounds %"class.net::WebSocketDeflater", %"class.net::WebSocketDeflater"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %8 = load %struct.z_stream_s*, %struct.z_stream_s** %7, align 8
  %9 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %8, i64 0, i32 0
  store i8* %1, i8** %9, align 8
  %10 = trunc i64 %2 to i32
  %11 = load %struct.z_stream_s*, %struct.z_stream_s** %7, align 8
  %12 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %11, i64 0, i32 1
  store i32 %10, i32* %12, align 8
  %13 = getelementptr inbounds %"class.net::WebSocketDeflater", %"class.net::WebSocketDeflater"* %0, i64 0, i32 4
  %14 = bitcast %"class.std::__1::vector"* %13 to i64*
  %15 = getelementptr inbounds %"class.net::WebSocketDeflater", %"class.net::WebSocketDeflater"* %0, i64 0, i32 4, i32 0, i32 1
  %16 = bitcast i8** %15 to i64*
  %17 = getelementptr inbounds %"class.net::WebSocketDeflater", %"class.net::WebSocketDeflater"* %0, i64 0, i32 3
  %18 = getelementptr inbounds %"class.net::WebSocketDeflater", %"class.net::WebSocketDeflater"* %0, i64 0, i32 3, i32 2
  br label %19

19:                                               ; preds = %19, %5
  %20 = load i64, i64* %14, align 8
  %21 = load %struct.z_stream_s*, %struct.z_stream_s** %7, align 8
  %22 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %21, i64 0, i32 3
  %23 = bitcast i8** %22 to i64*
  store i64 %20, i64* %23, align 8
  %24 = load i64, i64* %16, align 8
  %25 = load i64, i64* %14, align 8
  %26 = sub i64 %24, %25
  %27 = trunc i64 %26 to i32
  %28 = load %struct.z_stream_s*, %struct.z_stream_s** %7, align 8
  %29 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %28, i64 0, i32 4
  store i32 %27, i32* %29, align 8
  %30 = load %struct.z_stream_s*, %struct.z_stream_s** %7, align 8
  %31 = tail call i32 @Cr_z_deflate(%struct.z_stream_s* %30, i32 0) #10
  %32 = load i64, i64* %16, align 8
  %33 = load i64, i64* %14, align 8
  %34 = sub i64 %32, %33
  %35 = load %struct.z_stream_s*, %struct.z_stream_s** %7, align 8
  %36 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %35, i64 0, i32 4
  %37 = load i32, i32* %36, align 8
  %38 = zext i32 %37 to i64
  %39 = sub i64 %34, %38
  %40 = load i64, i64* %18, align 8
  %41 = inttoptr i64 %33 to i8*
  %42 = getelementptr inbounds i8, i8* %41, i64 %39
  tail call void @_ZN4base14circular_dequeIcE6insertIPcEENSt3__19enable_ifIXgssr4base8internal11is_iteratorIT_EE5valueEvE4typeENS_8internal29circular_deque_const_iteratorIcEES6_S6_(%"class.base::circular_deque"* %17, %"class.base::circular_deque"* %17, i64 %40, i8* %41, i8* %42) #10
  %43 = icmp eq i32 %31, 0
  br i1 %43, label %19, label %44

44:                                               ; preds = %19
  %45 = icmp eq i32 %31, -5
  br label %46

46:                                               ; preds = %3, %44
  %47 = phi i1 [ %45, %44 ], [ true, %3 ]
  ret i1 %47
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3net17WebSocketDeflater7DeflateEi(%"class.net::WebSocketDeflater"*, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.net::WebSocketDeflater", %"class.net::WebSocketDeflater"* %0, i64 0, i32 4
  %4 = bitcast %"class.std::__1::vector"* %3 to i64*
  %5 = getelementptr inbounds %"class.net::WebSocketDeflater", %"class.net::WebSocketDeflater"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.net::WebSocketDeflater", %"class.net::WebSocketDeflater"* %0, i64 0, i32 4, i32 0, i32 1
  %7 = bitcast i8** %6 to i64*
  %8 = getelementptr inbounds %"class.net::WebSocketDeflater", %"class.net::WebSocketDeflater"* %0, i64 0, i32 3
  %9 = getelementptr inbounds %"class.net::WebSocketDeflater", %"class.net::WebSocketDeflater"* %0, i64 0, i32 3, i32 2
  br label %10

10:                                               ; preds = %10, %2
  %11 = load i64, i64* %4, align 8
  %12 = load %struct.z_stream_s*, %struct.z_stream_s** %5, align 8
  %13 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %12, i64 0, i32 3
  %14 = bitcast i8** %13 to i64*
  store i64 %11, i64* %14, align 8
  %15 = load i64, i64* %7, align 8
  %16 = load i64, i64* %4, align 8
  %17 = sub i64 %15, %16
  %18 = trunc i64 %17 to i32
  %19 = load %struct.z_stream_s*, %struct.z_stream_s** %5, align 8
  %20 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %19, i64 0, i32 4
  store i32 %18, i32* %20, align 8
  %21 = load %struct.z_stream_s*, %struct.z_stream_s** %5, align 8
  %22 = tail call i32 @Cr_z_deflate(%struct.z_stream_s* %21, i32 %1) #10
  %23 = load i64, i64* %7, align 8
  %24 = load i64, i64* %4, align 8
  %25 = sub i64 %23, %24
  %26 = load %struct.z_stream_s*, %struct.z_stream_s** %5, align 8
  %27 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %26, i64 0, i32 4
  %28 = load i32, i32* %27, align 8
  %29 = zext i32 %28 to i64
  %30 = sub i64 %25, %29
  %31 = load i64, i64* %9, align 8
  %32 = inttoptr i64 %24 to i8*
  %33 = getelementptr inbounds i8, i8* %32, i64 %30
  tail call void @_ZN4base14circular_dequeIcE6insertIPcEENSt3__19enable_ifIXgssr4base8internal11is_iteratorIT_EE5valueEvE4typeENS_8internal29circular_deque_const_iteratorIcEES6_S6_(%"class.base::circular_deque"* %8, %"class.base::circular_deque"* %8, i64 %31, i8* %32, i8* %33)
  %34 = icmp eq i32 %22, 0
  br i1 %34, label %10, label %35

35:                                               ; preds = %10
  ret i32 %22
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3net17WebSocketDeflater6FinishEv(%"class.net::WebSocketDeflater"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::WebSocketDeflater", %"class.net::WebSocketDeflater"* %0, i64 0, i32 5
  %3 = load i8, i8* %2, align 8, !range !2
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %5, label %31

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.net::WebSocketDeflater", %"class.net::WebSocketDeflater"* %0, i64 0, i32 3
  tail call void @_ZN4base14circular_dequeIcE25ExpandCapacityIfNecessaryEm(%"class.base::circular_deque"* %6, i64 1) #10
  %7 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %6, i64 0, i32 0
  %8 = getelementptr inbounds %"class.net::WebSocketDeflater", %"class.net::WebSocketDeflater"* %0, i64 0, i32 3, i32 2
  %9 = load i64, i64* %8, align 8
  %10 = tail call dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIcEixEm(%"class.base::internal::VectorBuffer"* %7, i64 %9) #10
  store i8 0, i8* %10, align 1
  %11 = load i64, i64* %8, align 8
  %12 = getelementptr inbounds %"class.net::WebSocketDeflater", %"class.net::WebSocketDeflater"* %0, i64 0, i32 3, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = add i64 %13, -1
  %15 = icmp eq i64 %11, %14
  br i1 %15, label %16, label %17

16:                                               ; preds = %5
  store i64 0, i64* %8, align 8
  br label %20

17:                                               ; preds = %5
  %18 = add i64 %11, 1
  store i64 %18, i64* %8, align 8
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %20, label %21

20:                                               ; preds = %17, %16
  br label %21

21:                                               ; preds = %17, %20
  %22 = phi i64 [ %14, %20 ], [ %11, %17 ]
  %23 = tail call dereferenceable(1) i8* @_ZNK4base8internal12VectorBufferIcEixEm(%"class.base::internal::VectorBuffer"* %7, i64 %22) #10
  %24 = getelementptr inbounds %"class.net::WebSocketDeflater", %"class.net::WebSocketDeflater"* %0, i64 0, i32 1
  %25 = load i32, i32* %24, align 8
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %113

27:                                               ; preds = %21
  %28 = getelementptr inbounds %"class.net::WebSocketDeflater", %"class.net::WebSocketDeflater"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %29 = load %struct.z_stream_s*, %struct.z_stream_s** %28, align 8
  %30 = tail call i32 @Cr_z_deflateReset(%struct.z_stream_s* %29) #10
  br label %113

31:                                               ; preds = %1
  %32 = getelementptr inbounds %"class.net::WebSocketDeflater", %"class.net::WebSocketDeflater"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %33 = load %struct.z_stream_s*, %struct.z_stream_s** %32, align 8
  %34 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %33, i64 0, i32 0
  store i8* null, i8** %34, align 8
  %35 = load %struct.z_stream_s*, %struct.z_stream_s** %32, align 8
  %36 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %35, i64 0, i32 1
  store i32 0, i32* %36, align 8
  %37 = getelementptr inbounds %"class.net::WebSocketDeflater", %"class.net::WebSocketDeflater"* %0, i64 0, i32 4
  %38 = bitcast %"class.std::__1::vector"* %37 to i64*
  %39 = getelementptr inbounds %"class.net::WebSocketDeflater", %"class.net::WebSocketDeflater"* %0, i64 0, i32 4, i32 0, i32 1
  %40 = bitcast i8** %39 to i64*
  %41 = getelementptr inbounds %"class.net::WebSocketDeflater", %"class.net::WebSocketDeflater"* %0, i64 0, i32 3
  %42 = getelementptr inbounds %"class.net::WebSocketDeflater", %"class.net::WebSocketDeflater"* %0, i64 0, i32 3, i32 2
  br label %43

43:                                               ; preds = %43, %31
  %44 = load i64, i64* %38, align 8
  %45 = load %struct.z_stream_s*, %struct.z_stream_s** %32, align 8
  %46 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %45, i64 0, i32 3
  %47 = bitcast i8** %46 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %40, align 8
  %49 = load i64, i64* %38, align 8
  %50 = sub i64 %48, %49
  %51 = trunc i64 %50 to i32
  %52 = load %struct.z_stream_s*, %struct.z_stream_s** %32, align 8
  %53 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %52, i64 0, i32 4
  store i32 %51, i32* %53, align 8
  %54 = load %struct.z_stream_s*, %struct.z_stream_s** %32, align 8
  %55 = tail call i32 @Cr_z_deflate(%struct.z_stream_s* %54, i32 2) #10
  %56 = load i64, i64* %40, align 8
  %57 = load i64, i64* %38, align 8
  %58 = sub i64 %56, %57
  %59 = load %struct.z_stream_s*, %struct.z_stream_s** %32, align 8
  %60 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %59, i64 0, i32 4
  %61 = load i32, i32* %60, align 8
  %62 = zext i32 %61 to i64
  %63 = sub i64 %58, %62
  %64 = load i64, i64* %42, align 8
  %65 = inttoptr i64 %57 to i8*
  %66 = getelementptr inbounds i8, i8* %65, i64 %63
  tail call void @_ZN4base14circular_dequeIcE6insertIPcEENSt3__19enable_ifIXgssr4base8internal11is_iteratorIT_EE5valueEvE4typeENS_8internal29circular_deque_const_iteratorIcEES6_S6_(%"class.base::circular_deque"* %41, %"class.base::circular_deque"* %41, i64 %64, i8* %65, i8* %66) #10
  switch i32 %55, label %67 [
    i32 0, label %43
    i32 -5, label %74
  ]

67:                                               ; preds = %43
  %68 = getelementptr inbounds %"class.net::WebSocketDeflater", %"class.net::WebSocketDeflater"* %0, i64 0, i32 1
  %69 = load i32, i32* %68, align 8
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %71, label %113

71:                                               ; preds = %67
  %72 = load %struct.z_stream_s*, %struct.z_stream_s** %32, align 8
  %73 = tail call i32 @Cr_z_deflateReset(%struct.z_stream_s* %72) #10
  br label %113

74:                                               ; preds = %43
  %75 = getelementptr inbounds %"class.net::WebSocketDeflater", %"class.net::WebSocketDeflater"* %0, i64 0, i32 3, i32 1
  %76 = load i64, i64* %75, align 8
  %77 = load i64, i64* %42, align 8
  %78 = icmp ult i64 %77, %76
  br i1 %78, label %81, label %79

79:                                               ; preds = %74
  %80 = sub i64 %77, %76
  br label %86

81:                                               ; preds = %74
  %82 = getelementptr inbounds %"class.net::WebSocketDeflater", %"class.net::WebSocketDeflater"* %0, i64 0, i32 3, i32 0, i32 1
  %83 = load i64, i64* %82, align 8
  %84 = sub i64 %77, %76
  %85 = add i64 %84, %83
  br label %86

86:                                               ; preds = %79, %81
  %87 = phi i64 [ %80, %79 ], [ %85, %81 ]
  %88 = icmp ult i64 %87, 4
  br i1 %88, label %89, label %96

89:                                               ; preds = %86
  %90 = getelementptr inbounds %"class.net::WebSocketDeflater", %"class.net::WebSocketDeflater"* %0, i64 0, i32 1
  %91 = load i32, i32* %90, align 8
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %93, label %113

93:                                               ; preds = %89
  %94 = load %struct.z_stream_s*, %struct.z_stream_s** %32, align 8
  %95 = tail call i32 @Cr_z_deflateReset(%struct.z_stream_s* %94) #10
  br label %113

96:                                               ; preds = %86
  br i1 %78, label %99, label %97

97:                                               ; preds = %96
  %98 = sub i64 %77, %76
  br label %104

99:                                               ; preds = %96
  %100 = getelementptr inbounds %"class.net::WebSocketDeflater", %"class.net::WebSocketDeflater"* %0, i64 0, i32 3, i32 0, i32 1
  %101 = load i64, i64* %100, align 8
  %102 = sub i64 %77, %76
  %103 = add i64 %102, %101
  br label %104

104:                                              ; preds = %97, %99
  %105 = phi i64 [ %98, %97 ], [ %103, %99 ]
  %106 = add i64 %105, -4
  tail call void @_ZN4base14circular_dequeIcE6resizeEm(%"class.base::circular_deque"* %41, i64 %106)
  %107 = getelementptr inbounds %"class.net::WebSocketDeflater", %"class.net::WebSocketDeflater"* %0, i64 0, i32 1
  %108 = load i32, i32* %107, align 8
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %110, label %113

110:                                              ; preds = %104
  %111 = load %struct.z_stream_s*, %struct.z_stream_s** %32, align 8
  %112 = tail call i32 @Cr_z_deflateReset(%struct.z_stream_s* %111) #10
  br label %113

113:                                              ; preds = %110, %104, %93, %89, %71, %67, %27, %21
  %114 = phi i1 [ true, %21 ], [ true, %27 ], [ false, %67 ], [ false, %71 ], [ false, %89 ], [ false, %93 ], [ true, %104 ], [ true, %110 ]
  store i8 0, i8* %2, align 8
  ret i1 %114
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net17WebSocketDeflater12ResetContextEv(%"class.net::WebSocketDeflater"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::WebSocketDeflater", %"class.net::WebSocketDeflater"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %9

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.net::WebSocketDeflater", %"class.net::WebSocketDeflater"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %7 = load %struct.z_stream_s*, %struct.z_stream_s** %6, align 8
  %8 = tail call i32 @Cr_z_deflateReset(%struct.z_stream_s* %7) #10
  br label %9

9:                                                ; preds = %5, %1
  %10 = getelementptr inbounds %"class.net::WebSocketDeflater", %"class.net::WebSocketDeflater"* %0, i64 0, i32 5
  store i8 0, i8* %10, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base14circular_dequeIcE6resizeEm(%"class.base::circular_deque"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 2
  %6 = load i64, i64* %5, align 8
  %7 = icmp ult i64 %6, %4
  br i1 %7, label %11, label %8

8:                                                ; preds = %2
  %9 = sub i64 %6, %4
  %10 = icmp ult i64 %9, %1
  br i1 %10, label %17, label %50

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 %6, %4
  %15 = add i64 %14, %13
  %16 = icmp ult i64 %15, %1
  br i1 %16, label %17, label %50

17:                                               ; preds = %8, %11
  %18 = phi i64 [ %9, %8 ], [ %15, %11 ]
  %19 = sub i64 %1, %18
  tail call void @_ZN4base14circular_dequeIcE25ExpandCapacityIfNecessaryEm(%"class.base::circular_deque"* %0, i64 %19)
  %20 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0, i32 1
  %21 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0
  br label %22

22:                                               ; preds = %47, %17
  %23 = load i64, i64* %3, align 8
  %24 = load i64, i64* %5, align 8
  %25 = icmp ult i64 %24, %23
  br i1 %25, label %28, label %26

26:                                               ; preds = %22
  %27 = sub i64 %24, %23
  br label %32

28:                                               ; preds = %22
  %29 = load i64, i64* %20, align 8
  %30 = sub i64 %24, %23
  %31 = add i64 %30, %29
  br label %32

32:                                               ; preds = %26, %28
  %33 = phi i64 [ %27, %26 ], [ %31, %28 ]
  %34 = icmp ult i64 %33, %1
  br i1 %34, label %35, label %70

35:                                               ; preds = %32
  tail call void @_ZN4base14circular_dequeIcE25ExpandCapacityIfNecessaryEm(%"class.base::circular_deque"* %0, i64 1) #10
  %36 = load i64, i64* %5, align 8
  %37 = tail call dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIcEixEm(%"class.base::internal::VectorBuffer"* %21, i64 %36) #10
  store i8 0, i8* %37, align 1
  %38 = load i64, i64* %5, align 8
  %39 = load i64, i64* %20, align 8
  %40 = add i64 %39, -1
  %41 = icmp eq i64 %38, %40
  br i1 %41, label %42, label %43

42:                                               ; preds = %35
  store i64 0, i64* %5, align 8
  br label %46

43:                                               ; preds = %35
  %44 = add i64 %38, 1
  store i64 %44, i64* %5, align 8
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %46, label %47

46:                                               ; preds = %43, %42
  br label %47

47:                                               ; preds = %43, %46
  %48 = phi i64 [ %40, %46 ], [ %38, %43 ]
  %49 = tail call dereferenceable(1) i8* @_ZNK4base8internal12VectorBufferIcEixEm(%"class.base::internal::VectorBuffer"* %21, i64 %48) #10
  br label %22

50:                                               ; preds = %8, %11
  %51 = phi i64 [ %9, %8 ], [ %15, %11 ]
  %52 = icmp ugt i64 %51, %1
  br i1 %52, label %53, label %70

53:                                               ; preds = %50
  %54 = add i64 %4, %1
  %55 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0
  %56 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0, i32 1
  %57 = load i64, i64* %56, align 8
  %58 = urem i64 %54, %57
  %59 = icmp eq i64 %6, %58
  br i1 %59, label %69, label %60

60:                                               ; preds = %53
  %61 = icmp ugt i64 %6, %58
  %62 = tail call dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIcEixEm(%"class.base::internal::VectorBuffer"* %55, i64 %58) #10
  br i1 %61, label %67, label %63

63:                                               ; preds = %60
  %64 = load i64, i64* %56, align 8
  %65 = tail call dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIcEixEm(%"class.base::internal::VectorBuffer"* %55, i64 %64) #10
  %66 = tail call dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIcEixEm(%"class.base::internal::VectorBuffer"* %55, i64 0) #10
  br label %67

67:                                               ; preds = %60, %63
  %68 = tail call dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIcEixEm(%"class.base::internal::VectorBuffer"* %55, i64 %6) #10
  br label %69

69:                                               ; preds = %67, %53
  store i64 %58, i64* %5, align 8
  tail call void @_ZN4base14circular_dequeIcE25ShrinkCapacityIfNecessaryEv(%"class.base::circular_deque"* %0)
  br label %70

70:                                               ; preds = %32, %50, %69
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net17WebSocketDeflater12PushSyncMarkEv(%"class.net::WebSocketDeflater"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::WebSocketDeflater", %"class.net::WebSocketDeflater"* %0, i64 0, i32 3
  %3 = getelementptr inbounds %"class.net::WebSocketDeflater", %"class.net::WebSocketDeflater"* %0, i64 0, i32 3, i32 2
  %4 = load i64, i64* %3, align 8
  tail call void @_ZN4base14circular_dequeIcE6insertIPKcEENSt3__19enable_ifIXgssr4base8internal11is_iteratorIT_EE5valueEvE4typeENS_8internal29circular_deque_const_iteratorIcEES7_S7_(%"class.base::circular_deque"* %2, %"class.base::circular_deque"* %2, i64 %4, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @_ZZN3net17WebSocketDeflater12PushSyncMarkEvE4data, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @_ZZN3net17WebSocketDeflater12PushSyncMarkEvE4data, i64 1, i64 0))
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base14circular_dequeIcE6insertIPKcEENSt3__19enable_ifIXgssr4base8internal11is_iteratorIT_EE5valueEvE4typeENS_8internal29circular_deque_const_iteratorIcEES7_S7_(%"class.base::circular_deque"*, %"class.base::circular_deque"*, i64, i8*, i8*) local_unnamed_addr #0 comdat align 2 {
  %6 = alloca %"class.base::internal::circular_deque_iterator", align 8
  %7 = alloca %"class.base::internal::circular_deque_iterator", align 8
  %8 = ptrtoint i8* %4 to i64
  %9 = ptrtoint i8* %3 to i64
  %10 = sub i64 %8, %9
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %79, label %12

12:                                               ; preds = %5
  %13 = bitcast %"class.base::internal::circular_deque_iterator"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %13) #10
  %14 = getelementptr inbounds %"class.base::internal::circular_deque_iterator", %"class.base::internal::circular_deque_iterator"* %6, i64 0, i32 0, i32 0
  %15 = getelementptr inbounds %"class.base::internal::circular_deque_iterator", %"class.base::internal::circular_deque_iterator"* %6, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 0, i64 16, i1 false) #10
  %16 = bitcast %"class.base::internal::circular_deque_iterator"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %16) #10
  %17 = getelementptr inbounds %"class.base::internal::circular_deque_iterator", %"class.base::internal::circular_deque_iterator"* %7, i64 0, i32 0, i32 0
  %18 = getelementptr inbounds %"class.base::internal::circular_deque_iterator", %"class.base::internal::circular_deque_iterator"* %7, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 0, i64 16, i1 false) #10
  %19 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 1
  %20 = load i64, i64* %19, align 8
  %21 = icmp eq i64 %20, %2
  br i1 %21, label %22, label %29

22:                                               ; preds = %12
  tail call void @_ZN4base14circular_dequeIcE25ExpandCapacityIfNecessaryEm(%"class.base::circular_deque"* %0, i64 %10)
  %23 = load i64, i64* %19, align 8
  store %"class.base::circular_deque"* %0, %"class.base::circular_deque"** %17, align 8
  store i64 %23, i64* %18, align 8
  %24 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0, i32 1
  %25 = load i64, i64* %24, align 8
  %26 = sub i64 %23, %10
  %27 = add i64 %26, %25
  %28 = urem i64 %27, %25
  store i64 %28, i64* %19, align 8
  store %"class.base::circular_deque"* %0, %"class.base::circular_deque"** %14, align 8
  store i64 %28, i64* %15, align 8
  br label %32

29:                                               ; preds = %12
  store %"class.base::circular_deque"* %0, %"class.base::circular_deque"** %14, align 8
  store i64 %2, i64* %15, align 8
  call void @_ZN4base14circular_dequeIcE11MakeRoomForEmPNS_8internal23circular_deque_iteratorIcEES5_(%"class.base::circular_deque"* %0, i64 %10, %"class.base::internal::circular_deque_iterator"* nonnull %6, %"class.base::internal::circular_deque_iterator"* nonnull %7)
  %30 = load i64, i64* %15, align 8
  %31 = load %"class.base::circular_deque"*, %"class.base::circular_deque"** %14, align 8
  br label %32

32:                                               ; preds = %29, %22
  %33 = phi %"class.base::circular_deque"* [ %31, %29 ], [ %0, %22 ]
  %34 = phi i64 [ %30, %29 ], [ %28, %22 ]
  %35 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0
  br label %36

36:                                               ; preds = %67, %32
  %37 = phi %"class.base::circular_deque"* [ %33, %32 ], [ %72, %67 ]
  %38 = phi i64 [ %34, %32 ], [ %76, %67 ]
  %39 = phi i8* [ %3, %32 ], [ %77, %67 ]
  %40 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %37, i64 0, i32 1
  %41 = load i64, i64* %40, align 8
  %42 = icmp ult i64 %38, %41
  br i1 %42, label %45, label %43

43:                                               ; preds = %36
  %44 = sub i64 %38, %41
  br label %50

45:                                               ; preds = %36
  %46 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %37, i64 0, i32 0, i32 1
  %47 = load i64, i64* %46, align 8
  %48 = sub i64 %38, %41
  %49 = add i64 %48, %47
  br label %50

50:                                               ; preds = %45, %43
  %51 = phi i64 [ %44, %43 ], [ %49, %45 ]
  %52 = load i64, i64* %18, align 8
  %53 = load %"class.base::circular_deque"*, %"class.base::circular_deque"** %17, align 8
  %54 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %53, i64 0, i32 1
  %55 = load i64, i64* %54, align 8
  %56 = icmp ult i64 %52, %55
  br i1 %56, label %59, label %57

57:                                               ; preds = %50
  %58 = sub i64 %52, %55
  br label %64

59:                                               ; preds = %50
  %60 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %53, i64 0, i32 0, i32 1
  %61 = load i64, i64* %60, align 8
  %62 = sub i64 %52, %55
  %63 = add i64 %62, %61
  br label %64

64:                                               ; preds = %57, %59
  %65 = phi i64 [ %58, %57 ], [ %63, %59 ]
  %66 = icmp ult i64 %51, %65
  br i1 %66, label %67, label %78

67:                                               ; preds = %64
  %68 = call dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIcEixEm(%"class.base::internal::VectorBuffer"* %35, i64 %38)
  %69 = load i8, i8* %39, align 1
  store i8 %69, i8* %68, align 1
  %70 = load i64, i64* %15, align 8
  %71 = add i64 %70, 1
  store i64 %71, i64* %15, align 8
  %72 = load %"class.base::circular_deque"*, %"class.base::circular_deque"** %14, align 8
  %73 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %72, i64 0, i32 0, i32 1
  %74 = load i64, i64* %73, align 8
  %75 = icmp eq i64 %71, %74
  %76 = select i1 %75, i64 0, i64 %71
  store i64 %76, i64* %15, align 8
  %77 = getelementptr inbounds i8, i8* %39, i64 1
  br label %36

78:                                               ; preds = %64
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %16) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %13) #10
  br label %79

79:                                               ; preds = %5, %78
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.net::IOBufferWithSize"* @_ZN3net17WebSocketDeflater9GetOutputEm(%"class.net::WebSocketDeflater"*, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.net::WebSocketDeflater", %"class.net::WebSocketDeflater"* %0, i64 0, i32 3
  %4 = getelementptr inbounds %"class.net::WebSocketDeflater", %"class.net::WebSocketDeflater"* %0, i64 0, i32 3, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.net::WebSocketDeflater", %"class.net::WebSocketDeflater"* %0, i64 0, i32 3, i32 2
  %7 = load i64, i64* %6, align 8
  %8 = icmp ult i64 %7, %5
  br i1 %8, label %11, label %9

9:                                                ; preds = %2
  %10 = sub i64 %7, %5
  br label %16

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.net::WebSocketDeflater", %"class.net::WebSocketDeflater"* %0, i64 0, i32 3, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 %7, %5
  %15 = add i64 %14, %13
  br label %16

16:                                               ; preds = %9, %11
  %17 = phi i64 [ %10, %9 ], [ %15, %11 ]
  %18 = icmp ult i64 %17, %1
  %19 = select i1 %18, i64 %17, i64 %1
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %26, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %"class.net::WebSocketDeflater", %"class.net::WebSocketDeflater"* %0, i64 0, i32 3, i32 0, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = add i64 %19, %5
  %25 = urem i64 %24, %23
  br label %26

26:                                               ; preds = %16, %21
  %27 = phi i64 [ %5, %16 ], [ %25, %21 ]
  %28 = tail call i8* @_Znwm(i64 32) #11
  %29 = bitcast i8* %28 to %"class.net::IOBufferWithSize"*
  tail call void @_ZN3net16IOBufferWithSizeC1Em(%"class.net::IOBufferWithSize"* nonnull %29, i64 %19) #10
  %30 = getelementptr inbounds i8, i8* %28, i64 8
  %31 = bitcast i8* %30 to i32*
  %32 = atomicrmw add i32* %31, i32 1 monotonic
  %33 = icmp eq i64 %5, %27
  br i1 %33, label %51, label %34

34:                                               ; preds = %26
  %35 = getelementptr inbounds i8, i8* %28, i64 16
  %36 = bitcast i8* %35 to i8**
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %3, i64 0, i32 0
  %39 = getelementptr inbounds %"class.net::WebSocketDeflater", %"class.net::WebSocketDeflater"* %0, i64 0, i32 3, i32 0, i32 1
  br label %40

40:                                               ; preds = %40, %34
  %41 = phi i8* [ %37, %34 ], [ %49, %40 ]
  %42 = phi i64 [ %5, %34 ], [ %48, %40 ]
  %43 = tail call dereferenceable(1) i8* @_ZNK4base8internal12VectorBufferIcEixEm(%"class.base::internal::VectorBuffer"* %38, i64 %42) #10
  %44 = load i8, i8* %43, align 1
  store i8 %44, i8* %41, align 1
  %45 = add i64 %42, 1
  %46 = load i64, i64* %39, align 8
  %47 = icmp eq i64 %45, %46
  %48 = select i1 %47, i64 0, i64 %45
  %49 = getelementptr inbounds i8, i8* %41, i64 1
  %50 = icmp eq i64 %48, %27
  br i1 %50, label %51, label %40

51:                                               ; preds = %40, %26
  %52 = tail call { %"class.base::circular_deque"*, i64 } @_ZN4base14circular_dequeIcE5eraseENS_8internal29circular_deque_const_iteratorIcEES4_(%"class.base::circular_deque"* %3, %"class.base::circular_deque"* %3, i64 %5, %"class.base::circular_deque"* %3, i64 %27)
  ret %"class.net::IOBufferWithSize"* %29
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"class.base::circular_deque"*, i64 } @_ZN4base14circular_dequeIcE5eraseENS_8internal29circular_deque_const_iteratorIcEES4_(%"class.base::circular_deque"*, %"class.base::circular_deque"*, i64, %"class.base::circular_deque"*, i64) local_unnamed_addr #0 comdat align 2 {
  %6 = icmp eq i64 %2, %4
  br i1 %6, label %62, label %7

7:                                                ; preds = %5
  %8 = icmp ult i64 %2, %4
  %9 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0
  %10 = tail call dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIcEixEm(%"class.base::internal::VectorBuffer"* %9, i64 %2)
  br i1 %8, label %16, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = tail call dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIcEixEm(%"class.base::internal::VectorBuffer"* %9, i64 %13)
  %15 = tail call dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIcEixEm(%"class.base::internal::VectorBuffer"* %9, i64 0)
  br label %16

16:                                               ; preds = %7, %11
  %17 = tail call dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIcEixEm(%"class.base::internal::VectorBuffer"* %9, i64 %4)
  %18 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = icmp eq i64 %19, %2
  br i1 %20, label %21, label %22

21:                                               ; preds = %16
  store i64 %4, i64* %18, align 8
  br label %62

22:                                               ; preds = %16
  %23 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 2
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0, i32 1
  br label %26

26:                                               ; preds = %49, %22
  %27 = phi i64 [ %19, %22 ], [ %60, %49 ]
  %28 = phi i64 [ %4, %22 ], [ %56, %49 ]
  %29 = phi i64 [ %2, %22 ], [ %59, %49 ]
  %30 = icmp ult i64 %28, %27
  br i1 %30, label %33, label %31

31:                                               ; preds = %26
  %32 = sub i64 %28, %27
  br label %37

33:                                               ; preds = %26
  %34 = load i64, i64* %25, align 8
  %35 = sub i64 %28, %27
  %36 = add i64 %35, %34
  br label %37

37:                                               ; preds = %33, %31
  %38 = phi i64 [ %32, %31 ], [ %36, %33 ]
  %39 = icmp ult i64 %24, %27
  br i1 %39, label %42, label %40

40:                                               ; preds = %37
  %41 = sub i64 %24, %27
  br label %46

42:                                               ; preds = %37
  %43 = load i64, i64* %25, align 8
  %44 = sub i64 %24, %27
  %45 = add i64 %44, %43
  br label %46

46:                                               ; preds = %40, %42
  %47 = phi i64 [ %41, %40 ], [ %45, %42 ]
  %48 = icmp ult i64 %38, %47
  br i1 %48, label %49, label %61

49:                                               ; preds = %46
  %50 = tail call dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIcEixEm(%"class.base::internal::VectorBuffer"* %9, i64 %28)
  %51 = add i64 %28, 1
  %52 = tail call dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIcEixEm(%"class.base::internal::VectorBuffer"* %9, i64 %51)
  %53 = tail call dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIcEixEm(%"class.base::internal::VectorBuffer"* %9, i64 %29)
  tail call void @_ZN4base8internal12VectorBufferIcE9MoveRangeIcLi0EEEvPcS4_S4_(i8* %50, i8* %52, i8* %53)
  %54 = load i64, i64* %25, align 8
  %55 = icmp eq i64 %51, %54
  %56 = select i1 %55, i64 0, i64 %51
  %57 = add i64 %29, 1
  %58 = icmp eq i64 %57, %54
  %59 = select i1 %58, i64 0, i64 %57
  %60 = load i64, i64* %18, align 8
  br label %26

61:                                               ; preds = %46
  store i64 %29, i64* %23, align 8
  br label %62

62:                                               ; preds = %5, %61, %21
  %63 = phi i64 [ %4, %21 ], [ %2, %61 ], [ %2, %5 ]
  %64 = insertvalue { %"class.base::circular_deque"*, i64 } undef, %"class.base::circular_deque"* %0, 0
  %65 = insertvalue { %"class.base::circular_deque"*, i64 } %64, i64 %63, 1
  ret { %"class.base::circular_deque"*, i64 } %65
}

declare i32 @Cr_z_deflateReset(%struct.z_stream_s*) local_unnamed_addr #1

declare i32 @Cr_z_deflate(%struct.z_stream_s*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base14circular_dequeIcE6insertIPcEENSt3__19enable_ifIXgssr4base8internal11is_iteratorIT_EE5valueEvE4typeENS_8internal29circular_deque_const_iteratorIcEES6_S6_(%"class.base::circular_deque"*, %"class.base::circular_deque"*, i64, i8*, i8*) local_unnamed_addr #0 comdat align 2 {
  %6 = alloca %"class.base::internal::circular_deque_iterator", align 8
  %7 = alloca %"class.base::internal::circular_deque_iterator", align 8
  %8 = ptrtoint i8* %4 to i64
  %9 = ptrtoint i8* %3 to i64
  %10 = sub i64 %8, %9
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %79, label %12

12:                                               ; preds = %5
  %13 = bitcast %"class.base::internal::circular_deque_iterator"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %13) #10
  %14 = getelementptr inbounds %"class.base::internal::circular_deque_iterator", %"class.base::internal::circular_deque_iterator"* %6, i64 0, i32 0, i32 0
  %15 = getelementptr inbounds %"class.base::internal::circular_deque_iterator", %"class.base::internal::circular_deque_iterator"* %6, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 0, i64 16, i1 false) #10
  %16 = bitcast %"class.base::internal::circular_deque_iterator"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %16) #10
  %17 = getelementptr inbounds %"class.base::internal::circular_deque_iterator", %"class.base::internal::circular_deque_iterator"* %7, i64 0, i32 0, i32 0
  %18 = getelementptr inbounds %"class.base::internal::circular_deque_iterator", %"class.base::internal::circular_deque_iterator"* %7, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 0, i64 16, i1 false) #10
  %19 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 1
  %20 = load i64, i64* %19, align 8
  %21 = icmp eq i64 %20, %2
  br i1 %21, label %22, label %29

22:                                               ; preds = %12
  tail call void @_ZN4base14circular_dequeIcE25ExpandCapacityIfNecessaryEm(%"class.base::circular_deque"* %0, i64 %10)
  %23 = load i64, i64* %19, align 8
  store %"class.base::circular_deque"* %0, %"class.base::circular_deque"** %17, align 8
  store i64 %23, i64* %18, align 8
  %24 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0, i32 1
  %25 = load i64, i64* %24, align 8
  %26 = sub i64 %23, %10
  %27 = add i64 %26, %25
  %28 = urem i64 %27, %25
  store i64 %28, i64* %19, align 8
  store %"class.base::circular_deque"* %0, %"class.base::circular_deque"** %14, align 8
  store i64 %28, i64* %15, align 8
  br label %32

29:                                               ; preds = %12
  store %"class.base::circular_deque"* %0, %"class.base::circular_deque"** %14, align 8
  store i64 %2, i64* %15, align 8
  call void @_ZN4base14circular_dequeIcE11MakeRoomForEmPNS_8internal23circular_deque_iteratorIcEES5_(%"class.base::circular_deque"* %0, i64 %10, %"class.base::internal::circular_deque_iterator"* nonnull %6, %"class.base::internal::circular_deque_iterator"* nonnull %7)
  %30 = load i64, i64* %15, align 8
  %31 = load %"class.base::circular_deque"*, %"class.base::circular_deque"** %14, align 8
  br label %32

32:                                               ; preds = %29, %22
  %33 = phi %"class.base::circular_deque"* [ %31, %29 ], [ %0, %22 ]
  %34 = phi i64 [ %30, %29 ], [ %28, %22 ]
  %35 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0
  br label %36

36:                                               ; preds = %67, %32
  %37 = phi %"class.base::circular_deque"* [ %33, %32 ], [ %72, %67 ]
  %38 = phi i64 [ %34, %32 ], [ %76, %67 ]
  %39 = phi i8* [ %3, %32 ], [ %77, %67 ]
  %40 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %37, i64 0, i32 1
  %41 = load i64, i64* %40, align 8
  %42 = icmp ult i64 %38, %41
  br i1 %42, label %45, label %43

43:                                               ; preds = %36
  %44 = sub i64 %38, %41
  br label %50

45:                                               ; preds = %36
  %46 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %37, i64 0, i32 0, i32 1
  %47 = load i64, i64* %46, align 8
  %48 = sub i64 %38, %41
  %49 = add i64 %48, %47
  br label %50

50:                                               ; preds = %45, %43
  %51 = phi i64 [ %44, %43 ], [ %49, %45 ]
  %52 = load i64, i64* %18, align 8
  %53 = load %"class.base::circular_deque"*, %"class.base::circular_deque"** %17, align 8
  %54 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %53, i64 0, i32 1
  %55 = load i64, i64* %54, align 8
  %56 = icmp ult i64 %52, %55
  br i1 %56, label %59, label %57

57:                                               ; preds = %50
  %58 = sub i64 %52, %55
  br label %64

59:                                               ; preds = %50
  %60 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %53, i64 0, i32 0, i32 1
  %61 = load i64, i64* %60, align 8
  %62 = sub i64 %52, %55
  %63 = add i64 %62, %61
  br label %64

64:                                               ; preds = %57, %59
  %65 = phi i64 [ %58, %57 ], [ %63, %59 ]
  %66 = icmp ult i64 %51, %65
  br i1 %66, label %67, label %78

67:                                               ; preds = %64
  %68 = call dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIcEixEm(%"class.base::internal::VectorBuffer"* %35, i64 %38)
  %69 = load i8, i8* %39, align 1
  store i8 %69, i8* %68, align 1
  %70 = load i64, i64* %15, align 8
  %71 = add i64 %70, 1
  store i64 %71, i64* %15, align 8
  %72 = load %"class.base::circular_deque"*, %"class.base::circular_deque"** %14, align 8
  %73 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %72, i64 0, i32 0, i32 1
  %74 = load i64, i64* %73, align 8
  %75 = icmp eq i64 %71, %74
  %76 = select i1 %75, i64 0, i64 %71
  store i64 %76, i64* %15, align 8
  %77 = getelementptr inbounds i8, i8* %39, i64 1
  br label %36

78:                                               ; preds = %64
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %16) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %13) #10
  br label %79

79:                                               ; preds = %5, %78
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIcEixEm(%"class.base::internal::VectorBuffer"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #10
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.base::internal::VectorBuffer", %"class.base::internal::VectorBuffer"* %0, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ult i64 %9, %1
  br i1 %11, label %13, label %12

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %1) #10
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %9) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0), i8* %14, i8* %15) #10
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.2, i64 0, i64 0), i32 84, %"class.logging::CheckOpResult"* nonnull %4) #10
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #10
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #10
  %23 = getelementptr inbounds %"class.base::internal::VectorBuffer", %"class.base::internal::VectorBuffer"* %0, i64 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 %1
  ret i8* %25
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #1

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #1

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIcNS_9allocatorIcEEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = icmp ult i64 %9, %1
  br i1 %10, label %22, label %11

11:                                               ; preds = %2
  %12 = inttoptr i64 %8 to i8*
  %13 = icmp eq i64 %1, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = sub i64 %1, %8
  %17 = getelementptr i8, i8* %12, i64 %16
  %18 = ptrtoint i8* %17 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 0, i64 %18, i1 false) #10
  %19 = ptrtoint i8* %15 to i64
  br label %20

20:                                               ; preds = %11, %14
  %21 = phi i64 [ %19, %14 ], [ %8, %11 ]
  store i64 %21, i64* %7, align 8
  br label %68

22:                                               ; preds = %2
  %23 = bitcast %"class.std::__1::vector"* %0 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %8, %24
  %26 = add i64 %25, %1
  %27 = icmp slt i64 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %29) #12
  unreachable

30:                                               ; preds = %22
  %31 = sub i64 %5, %24
  %32 = icmp ult i64 %31, 4611686018427387903
  br i1 %32, label %33, label %38

33:                                               ; preds = %30
  %34 = shl i64 %31, 1
  %35 = icmp ult i64 %34, %26
  %36 = select i1 %35, i64 %26, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %30, %33
  %39 = phi i64 [ %36, %33 ], [ 9223372036854775807, %30 ]
  %40 = tail call i8* @_Znwm(i64 %39) #11
  br label %41

41:                                               ; preds = %38, %33
  %42 = phi i64 [ %39, %38 ], [ 0, %33 ]
  %43 = phi i8* [ %40, %38 ], [ null, %33 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %25
  %45 = ptrtoint i8* %44 to i64
  %46 = getelementptr inbounds i8, i8* %43, i64 %42
  %47 = getelementptr inbounds i8, i8* %44, i64 %1
  %48 = sub i64 %1, %45
  %49 = getelementptr i8, i8* %44, i64 %48
  %50 = ptrtoint i8* %49 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 0, i64 %50, i1 false) #10
  %51 = ptrtoint i8* %46 to i64
  %52 = ptrtoint i8* %47 to i64
  %53 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = load i64, i64* %7, align 8
  %56 = ptrtoint i8* %54 to i64
  %57 = sub i64 %55, %56
  %58 = sub i64 0, %57
  %59 = getelementptr inbounds i8, i8* %44, i64 %58
  %60 = ptrtoint i8* %59 to i64
  %61 = icmp sgt i64 %57, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %41
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %59, i8* align 1 %54, i64 %57, i1 false) #10
  %63 = load i8*, i8** %53, align 8
  br label %64

64:                                               ; preds = %41, %62
  %65 = phi i8* [ %54, %41 ], [ %63, %62 ]
  store i64 %60, i64* %23, align 8
  store i64 %52, i64* %7, align 8
  store i64 %51, i64* %4, align 8
  %66 = icmp eq i8* %65, null
  br i1 %66, label %68, label %67

67:                                               ; preds = %64
  tail call void @_ZdlPv(i8* nonnull %65) #11
  br label %68

68:                                               ; preds = %67, %64, %20
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base14circular_dequeIcE25ExpandCapacityIfNecessaryEm(%"class.base::circular_deque"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca <2 x i64>, align 16
  %4 = bitcast <2 x i64>* %3 to %"class.base::internal::VectorBuffer"*
  %5 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 2
  %8 = load i64, i64* %7, align 8
  %9 = icmp ult i64 %8, %6
  br i1 %9, label %14, label %10

10:                                               ; preds = %2
  %11 = sub i64 %8, %6
  %12 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  br label %19

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %8, %6
  %18 = add i64 %17, %16
  br label %19

19:                                               ; preds = %10, %14
  %20 = phi i64 [ %13, %10 ], [ %16, %14 ]
  %21 = phi i64 [ %11, %10 ], [ %18, %14 ]
  %22 = add i64 %21, %1
  %23 = icmp eq i64 %20, 0
  %24 = add i64 %20, -1
  %25 = select i1 %23, i64 0, i64 %24
  %26 = icmp ult i64 %25, %22
  br i1 %26, label %27, label %44

27:                                               ; preds = %19
  %28 = icmp ugt i64 %22, 3
  %29 = select i1 %28, i64 %22, i64 3
  %30 = lshr i64 %25, 2
  %31 = add i64 %30, %25
  %32 = icmp ult i64 %29, %31
  %33 = select i1 %32, i64 %31, i64 %29
  %34 = bitcast <2 x i64>* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %34) #10
  %35 = bitcast <2 x i64>* %3 to i8**
  %36 = getelementptr inbounds %"class.base::internal::VectorBuffer", %"class.base::internal::VectorBuffer"* %4, i64 0, i32 1
  %37 = add i64 %33, 1
  %38 = tail call noalias i8* @malloc(i64 %37) #10
  store i8* %38, i8** %35, align 16
  store i64 %37, i64* %36, align 8
  %39 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0
  call void @_ZN4base14circular_dequeIcE10MoveBufferERNS_8internal12VectorBufferIcEEmmPS4_PmS7_(%"class.base::internal::VectorBuffer"* dereferenceable(16) %39, i64 %6, i64 %8, %"class.base::internal::VectorBuffer"* nonnull %4, i64* %5, i64* %7) #10
  %40 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0, i32 0
  %41 = load i8*, i8** %40, align 8
  call void @free(i8* %41) #10
  %42 = load <2 x i64>, <2 x i64>* %3, align 16
  %43 = bitcast %"class.base::circular_deque"* %0 to <2 x i64>*
  store <2 x i64> %42, <2 x i64>* %43, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %34) #10
  br label %44

44:                                               ; preds = %19, %27
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base14circular_dequeIcE10MoveBufferERNS_8internal12VectorBufferIcEEmmPS4_PmS7_(%"class.base::internal::VectorBuffer"* dereferenceable(16), i64, i64, %"class.base::internal::VectorBuffer"*, i64*, i64*) local_unnamed_addr #0 comdat align 2 {
  %7 = getelementptr inbounds %"class.base::internal::VectorBuffer", %"class.base::internal::VectorBuffer"* %0, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  store i64 0, i64* %4, align 8
  %9 = icmp ugt i64 %2, %1
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = tail call dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIcEixEm(%"class.base::internal::VectorBuffer"* %0, i64 %1)
  %12 = tail call dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIcEixEm(%"class.base::internal::VectorBuffer"* %0, i64 %2)
  %13 = getelementptr inbounds %"class.base::internal::VectorBuffer", %"class.base::internal::VectorBuffer"* %3, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  tail call void @_ZN4base8internal12VectorBufferIcE9MoveRangeIcLi0EEEvPcS4_S4_(i8* %11, i8* %12, i8* %14)
  %15 = sub i64 %2, %1
  br label %28

16:                                               ; preds = %6
  %17 = icmp ult i64 %2, %1
  br i1 %17, label %18, label %28

18:                                               ; preds = %16
  %19 = tail call dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIcEixEm(%"class.base::internal::VectorBuffer"* %0, i64 %1)
  %20 = tail call dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIcEixEm(%"class.base::internal::VectorBuffer"* %0, i64 %8)
  %21 = getelementptr inbounds %"class.base::internal::VectorBuffer", %"class.base::internal::VectorBuffer"* %3, i64 0, i32 0
  %22 = load i8*, i8** %21, align 8
  tail call void @_ZN4base8internal12VectorBufferIcE9MoveRangeIcLi0EEEvPcS4_S4_(i8* %19, i8* %20, i8* %22)
  %23 = sub i64 %8, %1
  %24 = tail call dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIcEixEm(%"class.base::internal::VectorBuffer"* %0, i64 0)
  %25 = tail call dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIcEixEm(%"class.base::internal::VectorBuffer"* %0, i64 %2)
  %26 = tail call dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIcEixEm(%"class.base::internal::VectorBuffer"* %3, i64 %23)
  tail call void @_ZN4base8internal12VectorBufferIcE9MoveRangeIcLi0EEEvPcS4_S4_(i8* %24, i8* %25, i8* %26)
  %27 = add i64 %23, %2
  br label %28

28:                                               ; preds = %16, %18, %10
  %29 = phi i64 [ %27, %18 ], [ %15, %10 ], [ 0, %16 ]
  store i64 %29, i64* %5, align 8
  ret void
}

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #7

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #8

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal12VectorBufferIcE9MoveRangeIcLi0EEEvPcS4_S4_(i8*, i8*, i8*) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = ptrtoint i8* %0 to i64
  %6 = icmp ult i8* %2, %1
  br i1 %6, label %7, label %41

7:                                                ; preds = %3
  %8 = ptrtoint i8* %2 to i64
  %9 = ptrtoint i8* %1 to i64
  %10 = tail call { i64, i1 } @llvm.usub.with.overflow.i64(i64 %9, i64 %5) #10
  %11 = extractvalue { i64, i1 } %10, 1
  %12 = extractvalue { i64, i1 } %10, 0
  %13 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %8, i64 %12) #10
  %14 = extractvalue { i64, i1 } %13, 1
  %15 = or i1 %11, %14
  br i1 %15, label %16, label %17, !prof !3

16:                                               ; preds = %7
  tail call void @llvm.trap() #10
  unreachable

17:                                               ; preds = %7
  %18 = extractvalue { i64, i1 } %13, 0
  %19 = icmp ugt i64 %18, %5
  br i1 %19, label %20, label %46

20:                                               ; preds = %17
  %21 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #10
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.2, i64 0, i64 0), i32 132, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.4, i64 0, i64 0)) #10
  %22 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #10
  %23 = bitcast %"class.std::__1::basic_ostream"* %22 to i8**
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr i8, i8* %24, i64 -24
  %26 = bitcast i8* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = bitcast %"class.std::__1::basic_ostream"* %22 to i8*
  %29 = getelementptr inbounds i8, i8* %28, i64 %27
  %30 = getelementptr inbounds i8, i8* %29, i64 8
  %31 = bitcast i8* %30 to i32*
  %32 = load i32, i32* %31, align 8
  %33 = and i32 %32, -75
  %34 = or i32 %33, 8
  store i32 %34, i32* %31, align 8
  %35 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %22, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5, i64 0, i64 0), i64 14) #10
  %36 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEm(%"class.std::__1::basic_ostream"* %35, i64 %5) #10
  %37 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %36, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.6, i64 0, i64 0), i64 14) #10
  %38 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEm(%"class.std::__1::basic_ostream"* %37, i64 %9) #10
  %39 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %38, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i64 0, i64 0), i64 8) #10
  %40 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEm(%"class.std::__1::basic_ostream"* %39, i64 %8) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #10
  br label %46

41:                                               ; preds = %3
  %42 = ptrtoint i8* %1 to i64
  %43 = call { i64, i1 } @llvm.usub.with.overflow.i64(i64 %42, i64 %5) #10
  %44 = extractvalue { i64, i1 } %43, 1
  br i1 %44, label %45, label %46, !prof !3

45:                                               ; preds = %41
  call void @llvm.trap() #10
  unreachable

46:                                               ; preds = %20, %17, %41
  %47 = phi { i64, i1 } [ %43, %41 ], [ %10, %17 ], [ %10, %20 ]
  %48 = extractvalue { i64, i1 } %47, 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2, i8* align 1 %0, i64 %48, i1 false)
  ret void
}

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEm(%"class.std::__1::basic_ostream"*, i64) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.uadd.with.overflow.i64(i64, i64) #9

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160), i8*, i64) local_unnamed_addr #0 comdat {
  %4 = alloca %"class.std::__1::locale", align 8
  %5 = alloca %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", align 8
  %6 = getelementptr inbounds %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false)
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5, %"class.std::__1::basic_ostream"* dereferenceable(160) %0) #10
  %7 = load i8, i8* %6, align 8, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %58, label %9

9:                                                ; preds = %3
  %10 = bitcast %"class.std::__1::basic_ostream"* %0 to i8**
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8, i8* %11, i64 -24
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.std::__1::basic_ostream"* %0 to i8*
  %16 = getelementptr inbounds i8, i8* %15, i64 %14
  %17 = getelementptr inbounds i8, i8* %16, i64 40
  %18 = bitcast i8* %17 to %"class.std::__1::basic_streambuf"**
  %19 = load %"class.std::__1::basic_streambuf"*, %"class.std::__1::basic_streambuf"** %18, align 8
  %20 = bitcast i8* %16 to %"class.std::__1::ios_base"*
  %21 = getelementptr inbounds i8, i8* %16, i64 8
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 8
  %24 = and i32 %23, 176
  %25 = icmp eq i32 %24, 32
  %26 = getelementptr inbounds i8, i8* %1, i64 %2
  %27 = select i1 %25, i8* %26, i8* %1
  %28 = getelementptr inbounds i8, i8* %16, i64 144
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, -1
  br i1 %31, label %32, label %42

32:                                               ; preds = %9
  %33 = bitcast %"class.std::__1::locale"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #10
  call void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* nonnull sret %4, %"class.std::__1::ios_base"* %20) #10
  %34 = call %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"* nonnull %4, %"class.std::__1::locale::id"* nonnull dereferenceable(16) @_ZNSt3__15ctypeIcE2idE) #10
  %35 = bitcast %"class.std::__1::locale::facet"* %34 to %"class.std::__1::ctype"*
  %36 = bitcast %"class.std::__1::locale::facet"* %34 to i8 (%"class.std::__1::ctype"*, i8)***
  %37 = load i8 (%"class.std::__1::ctype"*, i8)**, i8 (%"class.std::__1::ctype"*, i8)*** %36, align 8
  %38 = getelementptr inbounds i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %37, i64 7
  %39 = load i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %38, align 8
  %40 = call signext i8 %39(%"class.std::__1::ctype"* %35, i8 signext 32) #10
  call void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #10
  %41 = sext i8 %40 to i32
  store i32 %41, i32* %29, align 8
  br label %42

42:                                               ; preds = %9, %32
  %43 = phi i32 [ %41, %32 ], [ %30, %9 ]
  %44 = trunc i32 %43 to i8
  %45 = call %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"* %19, i8* %1, i8* %27, i8* %26, %"class.std::__1::ios_base"* dereferenceable(136) %20, i8 signext %44)
  %46 = icmp eq %"class.std::__1::basic_streambuf"* %45, null
  br i1 %46, label %47, label %58

47:                                               ; preds = %42
  %48 = load i8*, i8** %10, align 8
  %49 = getelementptr i8, i8* %48, i64 -24
  %50 = bitcast i8* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds i8, i8* %15, i64 %51
  %53 = bitcast i8* %52 to %"class.std::__1::ios_base"*
  %54 = getelementptr inbounds i8, i8* %52, i64 32
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 8
  %57 = or i32 %56, 5
  call void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"* %53, i32 %57) #10
  br label %58

58:                                               ; preds = %3, %42, %47
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #10
  ret %"class.std::__1::basic_ostream"* %0
}

declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*, %"class.std::__1::basic_ostream"* dereferenceable(160)) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"*, i8*, i8*, i8*, %"class.std::__1::ios_base"* dereferenceable(136), i8 signext) local_unnamed_addr #0 comdat {
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = icmp eq %"class.std::__1::basic_streambuf"* %0, null
  br i1 %8, label %78, label %9

9:                                                ; preds = %6
  %10 = ptrtoint i8* %3 to i64
  %11 = ptrtoint i8* %1 to i64
  %12 = sub i64 %10, %11
  %13 = getelementptr inbounds %"class.std::__1::ios_base", %"class.std::__1::ios_base"* %4, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = icmp sgt i64 %14, %12
  %16 = sub nsw i64 %14, %12
  %17 = select i1 %15, i64 %16, i64 0
  %18 = ptrtoint i8* %2 to i64
  %19 = sub i64 %18, %11
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %21, label %28

21:                                               ; preds = %9
  %22 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %23 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %22, align 8
  %24 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %23, i64 12
  %25 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %24, align 8
  %26 = tail call i64 %25(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %1, i64 %19) #10
  %27 = icmp eq i64 %26, %19
  br i1 %27, label %28, label %78

28:                                               ; preds = %21, %9
  %29 = icmp sgt i64 %17, 0
  br i1 %29, label %30, label %67

30:                                               ; preds = %28
  %31 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #10
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = icmp ult i64 %17, 23
  %34 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %34, i8 -86, i64 24, i1 false)
  br i1 %33, label %43, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %38 = add nuw i64 %17, 16
  %39 = and i64 %38, -16
  %40 = tail call i8* @_Znwm(i64 %39) #11
  store i8* %40, i8** %32, align 8
  %41 = or i64 %39, -9223372036854775808
  store i64 %41, i64* %36, align 8
  store i64 %17, i64* %37, align 8
  %42 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %47

43:                                               ; preds = %30
  %44 = trunc i64 %17 to i8
  %45 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %46 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %45, i64 0, i32 1, i32 0
  store i8 %44, i8* %46, align 1
  br label %47

47:                                               ; preds = %35, %43
  %48 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %42, %35 ], [ %45, %43 ]
  %49 = phi i8* [ %40, %35 ], [ %31, %43 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %49, i8 %5, i64 %17, i1 false) #10
  %50 = getelementptr inbounds i8, i8* %49, i64 %17
  store i8 0, i8* %50, align 1
  %51 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %52 = load i8, i8* %51, align 1
  %53 = icmp slt i8 %52, 0
  %54 = load i8*, i8** %32, align 8
  %55 = select i1 %53, i8* %54, i8* %31
  %56 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %57 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %56, align 8
  %58 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %57, i64 12
  %59 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %58, align 8
  %60 = call i64 %59(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %55, i64 %17) #10
  %61 = icmp eq i64 %60, %17
  %62 = load i8, i8* %51, align 1
  %63 = icmp slt i8 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %47
  %65 = load i8*, i8** %32, align 8
  call void @_ZdlPv(i8* %65) #11
  br label %66

66:                                               ; preds = %47, %64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #10
  br i1 %61, label %67, label %78

67:                                               ; preds = %66, %28
  %68 = sub i64 %10, %18
  %69 = icmp sgt i64 %68, 0
  br i1 %69, label %70, label %77

70:                                               ; preds = %67
  %71 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %72 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %71, align 8
  %73 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %72, i64 12
  %74 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %73, align 8
  %75 = call i64 %74(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %2, i64 %68) #10
  %76 = icmp eq i64 %75, %68
  br i1 %76, label %77, label %78

77:                                               ; preds = %70, %67
  store i64 0, i64* %13, align 8
  br label %78

78:                                               ; preds = %77, %66, %21, %70, %6
  %79 = phi %"class.std::__1::basic_streambuf"* [ null, %6 ], [ %0, %77 ], [ null, %66 ], [ null, %21 ], [ null, %70 ]
  ret %"class.std::__1::basic_streambuf"* %79
}

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*) unnamed_addr #3

declare void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* sret, %"class.std::__1::ios_base"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"*) unnamed_addr #3

declare %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"*, %"class.std::__1::locale::id"* dereferenceable(16)) local_unnamed_addr #1

declare void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"*, i32) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.usub.with.overflow.i64(i64, i64) #9

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(1) i8* @_ZNK4base8internal12VectorBufferIcEixEm(%"class.base::internal::VectorBuffer"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #10
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.base::internal::VectorBuffer", %"class.base::internal::VectorBuffer"* %0, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ult i64 %9, %1
  br i1 %11, label %13, label %12

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %1) #10
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %9) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0), i8* %14, i8* %15) #10
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.2, i64 0, i64 0), i32 89, %"class.logging::CheckOpResult"* nonnull %4) #10
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #10
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #10
  %23 = getelementptr inbounds %"class.base::internal::VectorBuffer", %"class.base::internal::VectorBuffer"* %0, i64 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 %1
  ret i8* %25
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base14circular_dequeIcE25ShrinkCapacityIfNecessaryEv(%"class.base::circular_deque"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca <2 x i64>, align 16
  %3 = bitcast <2 x i64>* %2 to %"class.base::internal::VectorBuffer"*
  %4 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  %7 = add i64 %5, -1
  %8 = select i1 %6, i64 0, i64 %7
  %9 = icmp ult i64 %8, 4
  br i1 %9, label %38, label %10

10:                                               ; preds = %1
  %11 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 2
  %14 = load i64, i64* %13, align 8
  %15 = icmp ult i64 %14, %12
  %16 = sub i64 %14, %12
  %17 = select i1 %15, i64 %5, i64 0
  %18 = add i64 %17, %16
  %19 = sub i64 %8, %18
  %20 = icmp ult i64 %19, %18
  br i1 %20, label %38, label %21

21:                                               ; preds = %10
  %22 = lshr i64 %18, 2
  %23 = add i64 %22, %18
  %24 = icmp ugt i64 %23, 3
  %25 = select i1 %24, i64 %23, i64 3
  %26 = icmp ult i64 %25, %8
  br i1 %26, label %27, label %38

27:                                               ; preds = %21
  %28 = bitcast <2 x i64>* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %28) #10
  %29 = bitcast <2 x i64>* %2 to i8**
  %30 = getelementptr inbounds %"class.base::internal::VectorBuffer", %"class.base::internal::VectorBuffer"* %3, i64 0, i32 1
  %31 = add nuw i64 %25, 1
  %32 = tail call noalias i8* @malloc(i64 %31) #10
  store i8* %32, i8** %29, align 16
  store i64 %31, i64* %30, align 8
  %33 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0
  call void @_ZN4base14circular_dequeIcE10MoveBufferERNS_8internal12VectorBufferIcEEmmPS4_PmS7_(%"class.base::internal::VectorBuffer"* dereferenceable(16) %33, i64 %12, i64 %14, %"class.base::internal::VectorBuffer"* nonnull %3, i64* %11, i64* %13) #10
  %34 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0, i32 0
  %35 = load i8*, i8** %34, align 8
  call void @free(i8* %35) #10
  %36 = load <2 x i64>, <2 x i64>* %2, align 16
  %37 = bitcast %"class.base::circular_deque"* %0 to <2 x i64>*
  store <2 x i64> %36, <2 x i64>* %37, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %28) #10
  br label %38

38:                                               ; preds = %10, %27, %21, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base14circular_dequeIcE11MakeRoomForEmPNS_8internal23circular_deque_iteratorIcEES5_(%"class.base::circular_deque"*, i64, %"class.base::internal::circular_deque_iterator"*, %"class.base::internal::circular_deque_iterator"*) local_unnamed_addr #0 comdat align 2 {
  %5 = icmp eq i64 %1, 0
  br i1 %5, label %6, label %9

6:                                                ; preds = %4
  %7 = bitcast %"class.base::internal::circular_deque_iterator"* %3 to i8*
  %8 = bitcast %"class.base::internal::circular_deque_iterator"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 8 %8, i64 16, i1 false)
  br label %65

9:                                                ; preds = %4
  %10 = getelementptr inbounds %"class.base::internal::circular_deque_iterator", %"class.base::internal::circular_deque_iterator"* %2, i64 0, i32 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %"class.base::internal::circular_deque_iterator", %"class.base::internal::circular_deque_iterator"* %2, i64 0, i32 0, i32 0
  %13 = load %"class.base::circular_deque"*, %"class.base::circular_deque"** %12, align 8
  %14 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %13, i64 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = icmp ult i64 %11, %15
  br i1 %16, label %19, label %17

17:                                               ; preds = %9
  %18 = sub i64 %11, %15
  br label %24

19:                                               ; preds = %9
  %20 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %13, i64 0, i32 0, i32 1
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %11, %15
  %23 = add i64 %22, %21
  br label %24

24:                                               ; preds = %17, %19
  %25 = phi i64 [ %18, %17 ], [ %23, %19 ]
  tail call void @_ZN4base14circular_dequeIcE25ExpandCapacityIfNecessaryEm(%"class.base::circular_deque"* %0, i64 %1)
  %26 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 1
  %27 = load i64, i64* %26, align 8
  %28 = add i64 %27, %25
  %29 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0
  %30 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0, i32 1
  %31 = load i64, i64* %30, align 8
  %32 = urem i64 %28, %31
  store i64 %32, i64* %10, align 8
  %33 = add i64 %32, %1
  %34 = load i64, i64* %30, align 8
  %35 = urem i64 %33, %34
  %36 = getelementptr inbounds %"class.base::internal::circular_deque_iterator", %"class.base::internal::circular_deque_iterator"* %3, i64 0, i32 0, i32 0
  store %"class.base::circular_deque"* %0, %"class.base::circular_deque"** %36, align 8
  %37 = getelementptr inbounds %"class.base::internal::circular_deque_iterator", %"class.base::internal::circular_deque_iterator"* %3, i64 0, i32 0, i32 1
  store i64 %35, i64* %37, align 8
  %38 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 2
  %39 = load i64, i64* %38, align 8
  %40 = add i64 %39, %1
  %41 = load i64, i64* %30, align 8
  %42 = urem i64 %40, %41
  store i64 %42, i64* %38, align 8
  %43 = load i64, i64* %10, align 8
  %44 = icmp eq i64 %39, %43
  br i1 %44, label %65, label %45

45:                                               ; preds = %24, %57
  %46 = phi i64 [ %59, %57 ], [ %42, %24 ]
  %47 = phi i64 [ %53, %57 ], [ %39, %24 ]
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %49, label %51

49:                                               ; preds = %45
  %50 = load i64, i64* %30, align 8
  br label %51

51:                                               ; preds = %45, %49
  %52 = phi i64 [ %50, %49 ], [ %47, %45 ]
  %53 = add i64 %52, -1
  %54 = icmp eq i64 %46, 0
  br i1 %54, label %55, label %57

55:                                               ; preds = %51
  %56 = load i64, i64* %30, align 8
  br label %57

57:                                               ; preds = %51, %55
  %58 = phi i64 [ %56, %55 ], [ %46, %51 ]
  %59 = add i64 %58, -1
  %60 = tail call dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIcEixEm(%"class.base::internal::VectorBuffer"* %29, i64 %53)
  %61 = tail call dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIcEixEm(%"class.base::internal::VectorBuffer"* %29, i64 %52)
  %62 = tail call dereferenceable(1) i8* @_ZN4base8internal12VectorBufferIcEixEm(%"class.base::internal::VectorBuffer"* %29, i64 %59)
  tail call void @_ZN4base8internal12VectorBufferIcE9MoveRangeIcLi0EEEvPcS4_S4_(i8* %60, i8* %61, i8* %62)
  %63 = load i64, i64* %10, align 8
  %64 = icmp eq i64 %53, %63
  br i1 %64, label %65, label %45

65:                                               ; preds = %57, %24, %6
  ret void
}

declare void @_ZN3net16IOBufferWithSizeC1Em(%"class.net::IOBufferWithSize"*, i64) unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { cold noreturn nounwind }
attributes #9 = { nounwind readnone speculatable }
attributes #10 = { nounwind }
attributes #11 = { builtin nounwind }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 2000}
