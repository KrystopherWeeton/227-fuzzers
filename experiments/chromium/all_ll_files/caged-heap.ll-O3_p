; ModuleID = '../../v8/src/heap/cppgc/caged-heap.cc'
source_filename = "../../v8/src/heap/cppgc/caged-heap.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.cppgc::internal::CagedHeap" = type { %"class.cppgc::internal::VirtualMemory", %"class.std::__1::unique_ptr" }
%"class.cppgc::internal::VirtualMemory" = type { %"class.v8::PageAllocator"*, i8*, i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.v8::base::BoundedPageAllocator"* }
%"class.v8::base::BoundedPageAllocator" = type { %"class.v8::PageAllocator", %"class.v8::base::Mutex", i64, i64, %"class.v8::PageAllocator"*, %"class.v8::base::RegionAllocator" }
%"class.v8::PageAllocator" = type { i32 (...)** }
%"class.v8::base::Mutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.v8::base::RegionAllocator" = type { %"class.v8::base::RegionAllocator::Region", i64, i64, i64, i64, %"class.std::__1::set", %"class.std::__1::set.6" }
%"class.v8::base::RegionAllocator::Region" = type <{ %"class.v8::base::AddressRegion", i32, [4 x i8] }>
%"class.v8::base::AddressRegion" = type { i64, i64 }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.0", %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.0" = type { %"struct.std::__1::__compressed_pair_elem.1" }
%"struct.std::__1::__compressed_pair_elem.1" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { i64 }
%"class.std::__1::set.6" = type { %"class.std::__1::__tree.7" }
%"class.std::__1::__tree.7" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.0", %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"class.cppgc::internal::HeapBase" = type opaque
%"struct.cppgc::internal::CagedHeapLocalData" = type { i8, %"class.cppgc::internal::HeapBase"* }
%"class.cppgc::internal::(anonymous namespace)::CppgcBoundedPageAllocator" = type { %"class.v8::base::BoundedPageAllocator" }
%"class.v8::PageAllocator::SharedMemory" = type { i32 (...)** }

$_ZN2v84base20BoundedPageAllocatorD2Ev = comdat any

$_ZN2v84base20BoundedPageAllocator16AllocatePageSizeEv = comdat any

$_ZN2v84base20BoundedPageAllocator14CommitPageSizeEv = comdat any

$_ZN2v84base20BoundedPageAllocator17SetRandomMmapSeedEl = comdat any

$_ZN2v84base20BoundedPageAllocator17GetRandomMmapAddrEv = comdat any

$_ZN2v813PageAllocator19AllocateSharedPagesEmPKv = comdat any

$_ZN2v813PageAllocator22CanAllocateSharedPagesEv = comdat any

@.str = private unnamed_addr constant [18 x i8] c"Check failed: %s.\00", align 1
@.str.1 = private unnamed_addr constant [164 x i8] c"platform_allocator->SetPermissions( reserved_area_.address(), RoundUp(sizeof(CagedHeapLocalData), platform_allocator->CommitPageSize()), PageAllocator::kReadWrite)\00", align 1
@.str.2 = private unnamed_addr constant [69 x i8] c"Fatal process out of memory: Failed to reserve memory for caged heap\00", align 1
@_ZTVN5cppgc8internal12_GLOBAL__N_125CppgcBoundedPageAllocatorE = internal unnamed_addr constant { [16 x i8*] } { [16 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.v8::base::BoundedPageAllocator"*)* @_ZN2v84base20BoundedPageAllocatorD2Ev to i8*), i8* bitcast (void (%"class.cppgc::internal::(anonymous namespace)::CppgcBoundedPageAllocator"*)* @_ZN5cppgc8internal12_GLOBAL__N_125CppgcBoundedPageAllocatorD0Ev to i8*), i8* bitcast (i64 (%"class.v8::base::BoundedPageAllocator"*)* @_ZN2v84base20BoundedPageAllocator16AllocatePageSizeEv to i8*), i8* bitcast (i64 (%"class.v8::base::BoundedPageAllocator"*)* @_ZN2v84base20BoundedPageAllocator14CommitPageSizeEv to i8*), i8* bitcast (void (%"class.v8::base::BoundedPageAllocator"*, i64)* @_ZN2v84base20BoundedPageAllocator17SetRandomMmapSeedEl to i8*), i8* bitcast (i8* (%"class.v8::base::BoundedPageAllocator"*)* @_ZN2v84base20BoundedPageAllocator17GetRandomMmapAddrEv to i8*), i8* bitcast (i8* (%"class.v8::base::BoundedPageAllocator"*, i8*, i64, i64, i32)* @_ZN2v84base20BoundedPageAllocator13AllocatePagesEPvmmNS_13PageAllocator10PermissionE to i8*), i8* bitcast (i1 (%"class.cppgc::internal::(anonymous namespace)::CppgcBoundedPageAllocator"*, i8*, i64)* @_ZN5cppgc8internal12_GLOBAL__N_125CppgcBoundedPageAllocator9FreePagesEPvm to i8*), i8* bitcast (i1 (%"class.v8::base::BoundedPageAllocator"*, i8*, i64, i64)* @_ZN2v84base20BoundedPageAllocator12ReleasePagesEPvmm to i8*), i8* bitcast (i1 (%"class.v8::base::BoundedPageAllocator"*, i8*, i64, i32)* @_ZN2v84base20BoundedPageAllocator14SetPermissionsEPvmNS_13PageAllocator10PermissionE to i8*), i8* bitcast (i1 (%"class.v8::base::BoundedPageAllocator"*, i8*, i64)* @_ZN2v84base20BoundedPageAllocator18DiscardSystemPagesEPvm to i8*), i8* bitcast (i1 (%"class.v8::base::BoundedPageAllocator"*, i8*, i64)* @_ZN2v84base20BoundedPageAllocator29ReserveForSharedMemoryMappingEPvm to i8*), i8* bitcast (%"class.v8::PageAllocator::SharedMemory"* (%"class.v8::PageAllocator"*, i64, i8*)* @_ZN2v813PageAllocator19AllocateSharedPagesEmPKv to i8*), i8* bitcast (i1 (%"class.v8::PageAllocator"*)* @_ZN2v813PageAllocator22CanAllocateSharedPagesEv to i8*)] }, align 8
@_ZTVN2v84base20BoundedPageAllocatorE = external unnamed_addr constant { [16 x i8*] }, align 8

@_ZN5cppgc8internal9CagedHeapC1EPNS0_8HeapBaseEPN2v813PageAllocatorE = hidden unnamed_addr alias void (%"class.cppgc::internal::CagedHeap"*, %"class.cppgc::internal::HeapBase"*, %"class.v8::PageAllocator"*), void (%"class.cppgc::internal::CagedHeap"*, %"class.cppgc::internal::HeapBase"*, %"class.v8::PageAllocator"*)* @_ZN5cppgc8internal9CagedHeapC2EPNS0_8HeapBaseEPN2v813PageAllocatorE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5cppgc8internal9CagedHeapC2EPNS0_8HeapBaseEPN2v813PageAllocatorE(%"class.cppgc::internal::CagedHeap"*, %"class.cppgc::internal::HeapBase"*, %"class.v8::PageAllocator"*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.cppgc::internal::CagedHeap", %"class.cppgc::internal::CagedHeap"* %0, i64 0, i32 0
  %5 = bitcast %"class.v8::PageAllocator"* %2 to i8* (%"class.v8::PageAllocator"*)***
  %6 = getelementptr inbounds %"class.cppgc::internal::CagedHeap", %"class.cppgc::internal::CagedHeap"* %0, i64 0, i32 0, i32 1
  %7 = load i8* (%"class.v8::PageAllocator"*)**, i8* (%"class.v8::PageAllocator"*)*** %5, align 8, !noalias !2
  %8 = getelementptr inbounds i8* (%"class.v8::PageAllocator"*)*, i8* (%"class.v8::PageAllocator"*)** %7, i64 5
  %9 = load i8* (%"class.v8::PageAllocator"*)*, i8* (%"class.v8::PageAllocator"*)** %8, align 8, !noalias !2
  %10 = tail call i8* %9(%"class.v8::PageAllocator"* %2) #8, !noalias !2
  %11 = ptrtoint i8* %10 to i64
  %12 = and i64 %11, -4294967296
  %13 = inttoptr i64 %12 to i8*
  tail call void @_ZN5cppgc8internal13VirtualMemoryC1EPN2v813PageAllocatorEmmPv(%"class.cppgc::internal::VirtualMemory"* %4, %"class.v8::PageAllocator"* %2, i64 4294967296, i64 4294967296, i8* %13) #8
  %14 = load i8*, i8** %6, align 8, !alias.scope !2
  %15 = icmp eq i8* %14, null
  br i1 %15, label %16, label %47

16:                                               ; preds = %3
  tail call void @_ZN5cppgc8internal13VirtualMemoryD1Ev(%"class.cppgc::internal::VirtualMemory"* %4) #8
  %17 = load i8* (%"class.v8::PageAllocator"*)**, i8* (%"class.v8::PageAllocator"*)*** %5, align 8, !noalias !2
  %18 = getelementptr inbounds i8* (%"class.v8::PageAllocator"*)*, i8* (%"class.v8::PageAllocator"*)** %17, i64 5
  %19 = load i8* (%"class.v8::PageAllocator"*)*, i8* (%"class.v8::PageAllocator"*)** %18, align 8
  %20 = tail call i8* %19(%"class.v8::PageAllocator"* %2) #8
  %21 = ptrtoint i8* %20 to i64
  %22 = and i64 %21, -4294967296
  %23 = inttoptr i64 %22 to i8*
  tail call void @_ZN5cppgc8internal13VirtualMemoryC1EPN2v813PageAllocatorEmmPv(%"class.cppgc::internal::VirtualMemory"* %4, %"class.v8::PageAllocator"* %2, i64 4294967296, i64 4294967296, i8* %23) #8
  %24 = load i8*, i8** %6, align 8, !alias.scope !2
  %25 = icmp eq i8* %24, null
  br i1 %25, label %26, label %47

26:                                               ; preds = %16
  tail call void @_ZN5cppgc8internal13VirtualMemoryD1Ev(%"class.cppgc::internal::VirtualMemory"* %4) #8
  %27 = load i8* (%"class.v8::PageAllocator"*)**, i8* (%"class.v8::PageAllocator"*)*** %5, align 8, !noalias !2
  %28 = getelementptr inbounds i8* (%"class.v8::PageAllocator"*)*, i8* (%"class.v8::PageAllocator"*)** %27, i64 5
  %29 = load i8* (%"class.v8::PageAllocator"*)*, i8* (%"class.v8::PageAllocator"*)** %28, align 8
  %30 = tail call i8* %29(%"class.v8::PageAllocator"* %2) #8
  %31 = ptrtoint i8* %30 to i64
  %32 = and i64 %31, -4294967296
  %33 = inttoptr i64 %32 to i8*
  tail call void @_ZN5cppgc8internal13VirtualMemoryC1EPN2v813PageAllocatorEmmPv(%"class.cppgc::internal::VirtualMemory"* %4, %"class.v8::PageAllocator"* %2, i64 4294967296, i64 4294967296, i8* %33) #8
  %34 = load i8*, i8** %6, align 8, !alias.scope !2
  %35 = icmp eq i8* %34, null
  br i1 %35, label %36, label %47

36:                                               ; preds = %26
  tail call void @_ZN5cppgc8internal13VirtualMemoryD1Ev(%"class.cppgc::internal::VirtualMemory"* %4) #8
  %37 = load i8* (%"class.v8::PageAllocator"*)**, i8* (%"class.v8::PageAllocator"*)*** %5, align 8, !noalias !2
  %38 = getelementptr inbounds i8* (%"class.v8::PageAllocator"*)*, i8* (%"class.v8::PageAllocator"*)** %37, i64 5
  %39 = load i8* (%"class.v8::PageAllocator"*)*, i8* (%"class.v8::PageAllocator"*)** %38, align 8
  %40 = tail call i8* %39(%"class.v8::PageAllocator"* %2) #8
  %41 = ptrtoint i8* %40 to i64
  %42 = and i64 %41, -4294967296
  %43 = inttoptr i64 %42 to i8*
  tail call void @_ZN5cppgc8internal13VirtualMemoryC1EPN2v813PageAllocatorEmmPv(%"class.cppgc::internal::VirtualMemory"* %4, %"class.v8::PageAllocator"* %2, i64 4294967296, i64 4294967296, i8* %43) #8
  %44 = load i8*, i8** %6, align 8, !alias.scope !2
  %45 = icmp eq i8* %44, null
  br i1 %45, label %46, label %47

46:                                               ; preds = %36
  tail call void @_ZN5cppgc8internal13VirtualMemoryD1Ev(%"class.cppgc::internal::VirtualMemory"* %4) #8
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.2, i64 0, i64 0)) #9
  unreachable

47:                                               ; preds = %3, %16, %26, %36
  %48 = phi i8* [ %14, %3 ], [ %24, %16 ], [ %34, %26 ], [ %44, %36 ]
  %49 = getelementptr inbounds %"class.cppgc::internal::CagedHeap", %"class.cppgc::internal::CagedHeap"* %0, i64 0, i32 1
  %50 = bitcast %"class.std::__1::unique_ptr"* %49 to i64*
  store i64 0, i64* %50, align 8
  %51 = bitcast %"class.v8::PageAllocator"* %2 to i64 (%"class.v8::PageAllocator"*)***
  %52 = load i64 (%"class.v8::PageAllocator"*)**, i64 (%"class.v8::PageAllocator"*)*** %51, align 8
  %53 = getelementptr inbounds i64 (%"class.v8::PageAllocator"*)*, i64 (%"class.v8::PageAllocator"*)** %52, i64 3
  %54 = load i64 (%"class.v8::PageAllocator"*)*, i64 (%"class.v8::PageAllocator"*)** %53, align 8
  %55 = tail call i64 %54(%"class.v8::PageAllocator"* %2) #8
  %56 = add i64 %55, 15
  %57 = sub nsw i64 0, %55
  %58 = and i64 %56, %57
  %59 = bitcast %"class.v8::PageAllocator"* %2 to i1 (%"class.v8::PageAllocator"*, i8*, i64, i32)***
  %60 = load i1 (%"class.v8::PageAllocator"*, i8*, i64, i32)**, i1 (%"class.v8::PageAllocator"*, i8*, i64, i32)*** %59, align 8
  %61 = getelementptr inbounds i1 (%"class.v8::PageAllocator"*, i8*, i64, i32)*, i1 (%"class.v8::PageAllocator"*, i8*, i64, i32)** %60, i64 9
  %62 = load i1 (%"class.v8::PageAllocator"*, i8*, i64, i32)*, i1 (%"class.v8::PageAllocator"*, i8*, i64, i32)** %61, align 8
  %63 = tail call zeroext i1 %62(%"class.v8::PageAllocator"* %2, i8* nonnull %48, i64 %58, i32 2) #8
  br i1 %63, label %65, label %64, !prof !5

64:                                               ; preds = %47
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([164 x i8], [164 x i8]* @.str.1, i64 0, i64 0)) #9
  unreachable

65:                                               ; preds = %47
  %66 = bitcast i8** %6 to %"struct.cppgc::internal::CagedHeapLocalData"**
  %67 = load %"struct.cppgc::internal::CagedHeapLocalData"*, %"struct.cppgc::internal::CagedHeapLocalData"** %66, align 8
  %68 = getelementptr inbounds %"struct.cppgc::internal::CagedHeapLocalData", %"struct.cppgc::internal::CagedHeapLocalData"* %67, i64 0, i32 0
  store i8 0, i8* %68, align 8
  %69 = getelementptr inbounds %"struct.cppgc::internal::CagedHeapLocalData", %"struct.cppgc::internal::CagedHeapLocalData"* %67, i64 0, i32 1
  store %"class.cppgc::internal::HeapBase"* %1, %"class.cppgc::internal::HeapBase"** %69, align 8
  %70 = bitcast i8** %6 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = add i64 %71, 131087
  %73 = and i64 %72, -131072
  %74 = getelementptr inbounds %"class.cppgc::internal::CagedHeap", %"class.cppgc::internal::CagedHeap"* %0, i64 0, i32 0, i32 2
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, %71
  %77 = sub i64 %76, %73
  %78 = tail call i8* @_Znwm(i64 176) #10
  %79 = bitcast i8* %78 to %"class.v8::base::BoundedPageAllocator"*
  tail call void @_ZN2v84base20BoundedPageAllocatorC2EPNS_13PageAllocatorEmmm(%"class.v8::base::BoundedPageAllocator"* nonnull %79, %"class.v8::PageAllocator"* %2, i64 %73, i64 %77, i64 131072) #8
  %80 = bitcast i8* %78 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVN5cppgc8internal12_GLOBAL__N_125CppgcBoundedPageAllocatorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %80, align 8
  %81 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %49, i64 0, i32 0, i32 0, i32 0
  %82 = load %"class.v8::base::BoundedPageAllocator"*, %"class.v8::base::BoundedPageAllocator"** %81, align 8
  %83 = bitcast %"class.std::__1::unique_ptr"* %49 to i8**
  store i8* %78, i8** %83, align 8
  %84 = icmp eq %"class.v8::base::BoundedPageAllocator"* %82, null
  br i1 %84, label %90, label %85

85:                                               ; preds = %65
  %86 = bitcast %"class.v8::base::BoundedPageAllocator"* %82 to void (%"class.v8::base::BoundedPageAllocator"*)***
  %87 = load void (%"class.v8::base::BoundedPageAllocator"*)**, void (%"class.v8::base::BoundedPageAllocator"*)*** %86, align 8
  %88 = getelementptr inbounds void (%"class.v8::base::BoundedPageAllocator"*)*, void (%"class.v8::base::BoundedPageAllocator"*)** %87, i64 1
  %89 = load void (%"class.v8::base::BoundedPageAllocator"*)*, void (%"class.v8::base::BoundedPageAllocator"*)** %88, align 8
  tail call void %89(%"class.v8::base::BoundedPageAllocator"* nonnull %82) #8
  br label %90

90:                                               ; preds = %85, %65
  ret void
}

; Function Attrs: noreturn
declare void @_Z8V8_FatalPKcz(i8*, ...) local_unnamed_addr #1

declare void @_ZN5cppgc8internal13VirtualMemoryC1EPN2v813PageAllocatorEmmPv(%"class.cppgc::internal::VirtualMemory"*, %"class.v8::PageAllocator"*, i64, i64, i8*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN5cppgc8internal13VirtualMemoryD1Ev(%"class.cppgc::internal::VirtualMemory"*) unnamed_addr #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

declare void @_ZN2v84base20BoundedPageAllocatorC2EPNS_13PageAllocatorEmmm(%"class.v8::base::BoundedPageAllocator"*, %"class.v8::PageAllocator"*, i64, i64, i64) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v84base20BoundedPageAllocatorD2Ev(%"class.v8::base::BoundedPageAllocator"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.v8::base::BoundedPageAllocator", %"class.v8::base::BoundedPageAllocator"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVN2v84base20BoundedPageAllocatorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.v8::base::BoundedPageAllocator", %"class.v8::base::BoundedPageAllocator"* %0, i64 0, i32 5
  tail call void @_ZN2v84base15RegionAllocatorD1Ev(%"class.v8::base::RegionAllocator"* %3) #8
  %4 = getelementptr inbounds %"class.v8::base::BoundedPageAllocator", %"class.v8::base::BoundedPageAllocator"* %0, i64 0, i32 1
  tail call void @_ZN2v84base5MutexD1Ev(%"class.v8::base::Mutex"* %4) #8
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN5cppgc8internal12_GLOBAL__N_125CppgcBoundedPageAllocatorD0Ev(%"class.cppgc::internal::(anonymous namespace)::CppgcBoundedPageAllocator"*) unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.cppgc::internal::(anonymous namespace)::CppgcBoundedPageAllocator", %"class.cppgc::internal::(anonymous namespace)::CppgcBoundedPageAllocator"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVN2v84base20BoundedPageAllocatorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.cppgc::internal::(anonymous namespace)::CppgcBoundedPageAllocator", %"class.cppgc::internal::(anonymous namespace)::CppgcBoundedPageAllocator"* %0, i64 0, i32 0, i32 5
  tail call void @_ZN2v84base15RegionAllocatorD1Ev(%"class.v8::base::RegionAllocator"* %3) #8
  %4 = getelementptr inbounds %"class.cppgc::internal::(anonymous namespace)::CppgcBoundedPageAllocator", %"class.cppgc::internal::(anonymous namespace)::CppgcBoundedPageAllocator"* %0, i64 0, i32 0, i32 1
  tail call void @_ZN2v84base5MutexD1Ev(%"class.v8::base::Mutex"* %4) #8
  %5 = bitcast %"class.cppgc::internal::(anonymous namespace)::CppgcBoundedPageAllocator"* %0 to i8*
  tail call void @_ZdlPv(i8* %5) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN2v84base20BoundedPageAllocator16AllocatePageSizeEv(%"class.v8::base::BoundedPageAllocator"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.v8::base::BoundedPageAllocator", %"class.v8::base::BoundedPageAllocator"* %0, i64 0, i32 2
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN2v84base20BoundedPageAllocator14CommitPageSizeEv(%"class.v8::base::BoundedPageAllocator"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.v8::base::BoundedPageAllocator", %"class.v8::base::BoundedPageAllocator"* %0, i64 0, i32 3
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v84base20BoundedPageAllocator17SetRandomMmapSeedEl(%"class.v8::base::BoundedPageAllocator"*, i64) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.v8::base::BoundedPageAllocator", %"class.v8::base::BoundedPageAllocator"* %0, i64 0, i32 4
  %4 = load %"class.v8::PageAllocator"*, %"class.v8::PageAllocator"** %3, align 8
  %5 = bitcast %"class.v8::PageAllocator"* %4 to void (%"class.v8::PageAllocator"*, i64)***
  %6 = load void (%"class.v8::PageAllocator"*, i64)**, void (%"class.v8::PageAllocator"*, i64)*** %5, align 8
  %7 = getelementptr inbounds void (%"class.v8::PageAllocator"*, i64)*, void (%"class.v8::PageAllocator"*, i64)** %6, i64 4
  %8 = load void (%"class.v8::PageAllocator"*, i64)*, void (%"class.v8::PageAllocator"*, i64)** %7, align 8
  tail call void %8(%"class.v8::PageAllocator"* %4, i64 %1) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN2v84base20BoundedPageAllocator17GetRandomMmapAddrEv(%"class.v8::base::BoundedPageAllocator"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.v8::base::BoundedPageAllocator", %"class.v8::base::BoundedPageAllocator"* %0, i64 0, i32 4
  %3 = load %"class.v8::PageAllocator"*, %"class.v8::PageAllocator"** %2, align 8
  %4 = bitcast %"class.v8::PageAllocator"* %3 to i8* (%"class.v8::PageAllocator"*)***
  %5 = load i8* (%"class.v8::PageAllocator"*)**, i8* (%"class.v8::PageAllocator"*)*** %4, align 8
  %6 = getelementptr inbounds i8* (%"class.v8::PageAllocator"*)*, i8* (%"class.v8::PageAllocator"*)** %5, i64 5
  %7 = load i8* (%"class.v8::PageAllocator"*)*, i8* (%"class.v8::PageAllocator"*)** %6, align 8
  %8 = tail call i8* %7(%"class.v8::PageAllocator"* %3) #8
  ret i8* %8
}

declare i8* @_ZN2v84base20BoundedPageAllocator13AllocatePagesEPvmmNS_13PageAllocator10PermissionE(%"class.v8::base::BoundedPageAllocator"*, i8*, i64, i64, i32) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN5cppgc8internal12_GLOBAL__N_125CppgcBoundedPageAllocator9FreePagesEPvm(%"class.cppgc::internal::(anonymous namespace)::CppgcBoundedPageAllocator"*, i8*, i64) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.cppgc::internal::(anonymous namespace)::CppgcBoundedPageAllocator", %"class.cppgc::internal::(anonymous namespace)::CppgcBoundedPageAllocator"* %0, i64 0, i32 0
  %5 = tail call zeroext i1 @_ZN2v84base20BoundedPageAllocator14SetPermissionsEPvmNS_13PageAllocator10PermissionE(%"class.v8::base::BoundedPageAllocator"* %4, i8* %1, i64 %2, i32 2) #8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %1, i8 0, i64 %2, i1 false)
  %6 = tail call zeroext i1 @_ZN2v84base20BoundedPageAllocator9FreePagesEPvm(%"class.v8::base::BoundedPageAllocator"* %4, i8* %1, i64 %2) #8
  ret i1 %6
}

declare zeroext i1 @_ZN2v84base20BoundedPageAllocator12ReleasePagesEPvmm(%"class.v8::base::BoundedPageAllocator"*, i8*, i64, i64) unnamed_addr #2

declare zeroext i1 @_ZN2v84base20BoundedPageAllocator14SetPermissionsEPvmNS_13PageAllocator10PermissionE(%"class.v8::base::BoundedPageAllocator"*, i8*, i64, i32) unnamed_addr #2

declare zeroext i1 @_ZN2v84base20BoundedPageAllocator18DiscardSystemPagesEPvm(%"class.v8::base::BoundedPageAllocator"*, i8*, i64) unnamed_addr #2

declare zeroext i1 @_ZN2v84base20BoundedPageAllocator29ReserveForSharedMemoryMappingEPvm(%"class.v8::base::BoundedPageAllocator"*, i8*, i64) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.v8::PageAllocator::SharedMemory"* @_ZN2v813PageAllocator19AllocateSharedPagesEmPKv(%"class.v8::PageAllocator"*, i64, i8*) unnamed_addr #0 comdat align 2 {
  ret %"class.v8::PageAllocator::SharedMemory"* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2v813PageAllocator22CanAllocateSharedPagesEv(%"class.v8::PageAllocator"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind
declare void @_ZN2v84base15RegionAllocatorD1Ev(%"class.v8::base::RegionAllocator"*) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN2v84base5MutexD1Ev(%"class.v8::base::Mutex"*) unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #7

declare zeroext i1 @_ZN2v84base20BoundedPageAllocator9FreePagesEPvm(%"class.v8::base::BoundedPageAllocator"*, i8*, i64) unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { argmemonly nounwind }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN5cppgc8internal12_GLOBAL__N_116ReserveCagedHeapEPN2v813PageAllocatorE: argument 0"}
!4 = distinct !{!4, !"_ZN5cppgc8internal12_GLOBAL__N_116ReserveCagedHeapEPN2v813PageAllocatorE"}
!5 = !{!"branch_weights", i32 2000, i32 1}
