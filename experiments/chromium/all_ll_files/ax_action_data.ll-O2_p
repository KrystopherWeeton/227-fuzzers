; ModuleID = '../../ui/accessibility/ax_action_data.cc'
source_filename = "../../ui/accessibility/ax_action_data.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.ui::AXActionData" = type { i32, %"class.ui::AXTreeID", %"class.std::__1::basic_string", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"class.gfx::Rect", %"class.gfx::Point", %"class.std::__1::basic_string", i32, i32, i32, i32 }
%"class.ui::AXTreeID" = type { i32, %"class.absl::optional" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Size" = type { i32, i32 }
%"class.gfx::Point" = type { i32, i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.0 }
%union.anon.0 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

@_ZN2ui12AXActionDataC1Ev = hidden unnamed_addr alias void (%"struct.ui::AXActionData"*), void (%"struct.ui::AXActionData"*)* @_ZN2ui12AXActionDataC2Ev
@_ZN2ui12AXActionDataC1ERKS0_ = hidden unnamed_addr alias void (%"struct.ui::AXActionData"*, %"struct.ui::AXActionData"*), void (%"struct.ui::AXActionData"*, %"struct.ui::AXActionData"*)* @_ZN2ui12AXActionDataC2ERKS0_
@_ZN2ui12AXActionDataD1Ev = hidden unnamed_addr alias void (%"struct.ui::AXActionData"*), void (%"struct.ui::AXActionData"*)* @_ZN2ui12AXActionDataD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui12AXActionDataC2Ev(%"struct.ui::AXActionData"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.ui::AXActionData", %"struct.ui::AXActionData"* %0, i64 0, i32 0
  store i32 0, i32* %2, align 8
  %3 = getelementptr inbounds %"struct.ui::AXActionData", %"struct.ui::AXActionData"* %0, i64 0, i32 1
  %4 = tail call dereferenceable(32) %"class.ui::AXTreeID"* @_ZN2ui15AXTreeIDUnknownEv() #4
  tail call void @_ZN2ui8AXTreeIDC1ERKS0_(%"class.ui::AXTreeID"* %3, %"class.ui::AXTreeID"* dereferenceable(32) %4) #4
  %5 = getelementptr inbounds %"struct.ui::AXActionData", %"struct.ui::AXActionData"* %0, i64 0, i32 2
  %6 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 24, i1 false) #4
  %7 = getelementptr inbounds %"struct.ui::AXActionData", %"struct.ui::AXActionData"* %0, i64 0, i32 3
  store i32 -1, i32* %7, align 8
  %8 = getelementptr inbounds %"struct.ui::AXActionData", %"struct.ui::AXActionData"* %0, i64 0, i32 4
  store i32 -1, i32* %8, align 4
  %9 = getelementptr inbounds %"struct.ui::AXActionData", %"struct.ui::AXActionData"* %0, i64 0, i32 5
  store i32 0, i32* %9, align 8
  %10 = getelementptr inbounds %"struct.ui::AXActionData", %"struct.ui::AXActionData"* %0, i64 0, i32 6
  %11 = getelementptr inbounds %"struct.ui::AXActionData", %"struct.ui::AXActionData"* %0, i64 0, i32 12
  %12 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %12, i8 -1, i64 24, i1 false)
  %13 = bitcast i32* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %13, i8 0, i64 68, i1 false)
  ret void
}

declare dereferenceable(32) %"class.ui::AXTreeID"* @_ZN2ui15AXTreeIDUnknownEv() local_unnamed_addr #1

declare void @_ZN2ui8AXTreeIDC1ERKS0_(%"class.ui::AXTreeID"*, %"class.ui::AXTreeID"* dereferenceable(32)) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui12AXActionDataC2ERKS0_(%"struct.ui::AXActionData"*, %"struct.ui::AXActionData"* dereferenceable(168)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"struct.ui::AXActionData", %"struct.ui::AXActionData"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"struct.ui::AXActionData", %"struct.ui::AXActionData"* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  store i32 %5, i32* %3, align 8
  %6 = getelementptr inbounds %"struct.ui::AXActionData", %"struct.ui::AXActionData"* %0, i64 0, i32 1
  %7 = getelementptr inbounds %"struct.ui::AXActionData", %"struct.ui::AXActionData"* %1, i64 0, i32 1
  tail call void @_ZN2ui8AXTreeIDC1ERKS0_(%"class.ui::AXTreeID"* %6, %"class.ui::AXTreeID"* dereferenceable(32) %7) #4
  %8 = getelementptr inbounds %"struct.ui::AXActionData", %"struct.ui::AXActionData"* %0, i64 0, i32 2
  %9 = getelementptr inbounds %"struct.ui::AXActionData", %"struct.ui::AXActionData"* %1, i64 0, i32 2
  %10 = bitcast %"class.std::__1::basic_string"* %9 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %11 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %10, i64 0, i32 1, i32 0
  %12 = load i8, i8* %11, align 1
  %13 = icmp slt i8 %12, 0
  br i1 %13, label %17, label %14

14:                                               ; preds = %2
  %15 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  %16 = bitcast %"class.std::__1::basic_string"* %9 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %15, i8* align 8 %16, i64 24, i1 false) #4
  br label %22

17:                                               ; preds = %2
  %18 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr inbounds %"struct.ui::AXActionData", %"struct.ui::AXActionData"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %21 = load i64, i64* %20, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %8, i8* %19, i64 %21) #4
  br label %22

22:                                               ; preds = %14, %17
  %23 = getelementptr inbounds %"struct.ui::AXActionData", %"struct.ui::AXActionData"* %0, i64 0, i32 3
  %24 = getelementptr inbounds %"struct.ui::AXActionData", %"struct.ui::AXActionData"* %1, i64 0, i32 3
  %25 = bitcast i32* %23 to i8*
  %26 = bitcast i32* %24 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %25, i8* align 8 %26, i64 64, i1 false)
  %27 = getelementptr inbounds %"struct.ui::AXActionData", %"struct.ui::AXActionData"* %0, i64 0, i32 15
  %28 = getelementptr inbounds %"struct.ui::AXActionData", %"struct.ui::AXActionData"* %1, i64 0, i32 15
  %29 = bitcast %"class.std::__1::basic_string"* %28 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %30 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %29, i64 0, i32 1, i32 0
  %31 = load i8, i8* %30, align 1
  %32 = icmp slt i8 %31, 0
  br i1 %32, label %36, label %33

33:                                               ; preds = %22
  %34 = bitcast %"class.std::__1::basic_string"* %27 to i8*
  %35 = bitcast %"class.std::__1::basic_string"* %28 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %34, i8* align 8 %35, i64 24, i1 false) #4
  br label %41

36:                                               ; preds = %22
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %28, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %38 = load i8*, i8** %37, align 8
  %39 = getelementptr inbounds %"struct.ui::AXActionData", %"struct.ui::AXActionData"* %1, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %40 = load i64, i64* %39, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %27, i8* %38, i64 %40) #4
  br label %41

41:                                               ; preds = %33, %36
  %42 = getelementptr inbounds %"struct.ui::AXActionData", %"struct.ui::AXActionData"* %0, i64 0, i32 16
  %43 = getelementptr inbounds %"struct.ui::AXActionData", %"struct.ui::AXActionData"* %1, i64 0, i32 16
  %44 = bitcast i32* %42 to i8*
  %45 = bitcast i32* %43 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %44, i8* align 8 %45, i64 16, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui12AXActionDataD2Ev(%"struct.ui::AXActionData"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.ui::AXActionData", %"struct.ui::AXActionData"* %0, i64 0, i32 15
  %3 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %4 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %3, i64 0, i32 1, i32 0
  %5 = load i8, i8* %4, align 1
  %6 = icmp slt i8 %5, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  tail call void @_ZdlPv(i8* %9) #5
  br label %10

10:                                               ; preds = %1, %7
  %11 = getelementptr inbounds %"struct.ui::AXActionData", %"struct.ui::AXActionData"* %0, i64 0, i32 2
  %12 = bitcast %"class.std::__1::basic_string"* %11 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %13 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %12, i64 0, i32 1, i32 0
  %14 = load i8, i8* %13, align 1
  %15 = icmp slt i8 %14, 0
  br i1 %15, label %16, label %19

16:                                               ; preds = %10
  %17 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  tail call void @_ZdlPv(i8* %18) #5
  br label %19

19:                                               ; preds = %10, %16
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
