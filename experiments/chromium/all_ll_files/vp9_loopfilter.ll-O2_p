; ModuleID = '../../third_party/libvpx/source/libvpx/vp9/common/vp9_loopfilter.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp9/common/vp9_loopfilter.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.VP9Common = type { %struct.vpx_internal_error_info, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.yv12_buffer_config*, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], [8 x i32], [3 x %struct.RefBuffer], i32, i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], i32, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, i32 (%struct.VP9Common*, i32)*, {}*, {}*, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, i32, i32, i32, [2 x i8*], i8*, i8*, i32, i8, [11 x i8], %struct.loop_filter_info_n, i32, [4 x i32], %struct.loopfilter, %struct.segmentation, i8, [2 x i8], i32, %struct.frame_contexts*, %struct.frame_contexts*, i32, %struct.FRAME_COUNTS, i32, i32, i32, i32, i32, %struct.postproc_state, i32, i32, i32, i32, i32, i32, %struct.BufferPool*, i8*, i8*, i32, i32, [8 x i8] }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.RefCntBuffer = type { i32, %struct.MV_REF*, i32, i32, i8, i32, i32, %struct.vpx_codec_frame_buffer, %struct.yv12_buffer_config }
%struct.MV_REF = type { [2 x %union.int_mv], [2 x i8] }
%union.int_mv = type { i32 }
%struct.vpx_codec_frame_buffer = type { i8*, i64, i8* }
%struct.RefBuffer = type { i32, %struct.yv12_buffer_config*, %struct.scale_factors }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)*, [2 x [2 x [2 x void (i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32)*]]], [2 x [2 x [2 x void (i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32)*]]] }
%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.MODE_INFO = type { i8, i8, i8, i8, i8, i8, i8, i8, [2 x i8], [2 x %union.int_mv], [4 x %struct.b_mode_info] }
%struct.b_mode_info = type { i8, [2 x %union.int_mv] }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [8 x [4 x [2 x i8]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { i32, i32, i32, i32, i8, i8, [4 x i8], [4 x i8], [2 x i8], [2 x i8], %struct.LOOP_FILTER_MASK*, i32 }
%struct.LOOP_FILTER_MASK = type { [4 x i64], [4 x i64], i64, [4 x i16], [4 x i16], i16, [64 x i8] }
%struct.segmentation = type { i8, i8, i8, i8, i8, [7 x i8], [3 x i8], [8 x [4 x i16]], [8 x i32], i32 }
%struct.frame_contexts = type { [4 x [9 x i8]], [10 x [9 x i8]], [16 x [3 x i8]], [4 x [2 x [2 x [6 x [6 x [3 x i8]]]]]], [4 x [2 x i8]], [7 x [3 x i8]], [4 x i8], [5 x i8], [5 x [2 x i8]], [5 x i8], %struct.tx_probs, [3 x i8], %struct.nmv_context, i32 }
%struct.tx_probs = type { [2 x [3 x i8]], [2 x [2 x i8]], [2 x [1 x i8]] }
%struct.nmv_context = type { [3 x i8], [2 x %struct.nmv_component] }
%struct.nmv_component = type { i8, [10 x i8], [1 x i8], [10 x i8], [2 x [3 x i8]], [3 x i8], i8, i8 }
%struct.FRAME_COUNTS = type { [4 x [10 x i32]], [10 x [10 x i32]], [16 x [4 x i32]], [4 x [2 x [2 x [6 x [6 x [4 x i32]]]]]], [4 x [2 x [2 x [6 x [6 x i32]]]]], [4 x [3 x i32]], [7 x [4 x i32]], [4 x [2 x i32]], [5 x [2 x i32]], [5 x [2 x [2 x i32]]], [5 x [2 x i32]], %struct.tx_counts, [3 x [2 x i32]], %struct.nmv_context_counts }
%struct.tx_counts = type { [2 x [4 x i32]], [2 x [3 x i32]], [2 x [2 x i32]], [4 x i32] }
%struct.nmv_context_counts = type { [4 x i32], [2 x %struct.nmv_component_counts] }
%struct.nmv_component_counts = type { [2 x i32], [11 x i32], [2 x i32], [10 x [2 x i32]], [2 x [4 x i32]], [4 x i32], [2 x i32], [2 x i32] }
%struct.postproc_state = type { i32, i32, i32, i32, %struct.MODE_INFO*, %struct.MODE_INFO*, i32, i8*, i8* }
%struct.BufferPool = type { i8*, i32 (i8*, i64, %struct.vpx_codec_frame_buffer*)*, i32 (i8*, %struct.vpx_codec_frame_buffer*)*, [12 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }
%struct.macroblockd_plane = type { i32*, i32, i32, %struct.buf_2d, [2 x %struct.buf_2d], i8*, i8*, [8 x [2 x i16]], i16, i16, i8, i8, i16*, i32* }
%struct.buf_2d = type { i8*, i32 }
%struct.macroblockd = type { [3 x %struct.macroblockd_plane], i8, i8, %struct.FRAME_COUNTS*, %struct.TileInfo, i32, %struct.MODE_INFO**, %struct.MODE_INFO*, %struct.MODE_INFO*, i32, i32, [3 x i8]*, i32, i32, i32, i32, %struct.frame_contexts*, [2 x %struct.RefBuffer*], %struct.yv12_buffer_config*, [3 x i8*], [3 x [16 x i8]], i8*, [8 x i8], i32, i32, i32, %struct.vpx_internal_error_info*, i32* }
%struct.TileInfo = type { i32, i32, i32, i32 }
%struct.LoopFilterWorkerData = type { %struct.yv12_buffer_config*, %struct.VP9Common*, [3 x %struct.macroblockd_plane], i32, i32, i32 }

@vp9_setup_mask.shift_32_y = internal unnamed_addr constant [4 x i32] [i32 0, i32 4, i32 32, i32 36], align 16
@vp9_setup_mask.shift_16_y = internal unnamed_addr constant [4 x i32] [i32 0, i32 2, i32 16, i32 18], align 16
@vp9_setup_mask.shift_32_uv = internal unnamed_addr constant [4 x i32] [i32 0, i32 2, i32 8, i32 10], align 16
@vp9_setup_mask.shift_16_uv = internal unnamed_addr constant [4 x i32] [i32 0, i32 1, i32 4, i32 5], align 16
@num_4x4_blocks_wide_lookup = external local_unnamed_addr constant [13 x i8], align 1
@num_8x8_blocks_wide_lookup = external local_unnamed_addr constant [13 x i8], align 1
@num_4x4_blocks_high_lookup = external local_unnamed_addr constant [13 x i8], align 1
@num_8x8_blocks_high_lookup = external local_unnamed_addr constant [13 x i8], align 1
@uv_txsize_lookup = external local_unnamed_addr constant [13 x [4 x [2 x [2 x i8]]]], align 16
@first_block_in_16x16 = internal unnamed_addr constant [8 x [8 x i8]] [[8 x i8] c"\01\00\01\00\01\00\01\00", [8 x i8] zeroinitializer, [8 x i8] c"\01\00\01\00\01\00\01\00", [8 x i8] zeroinitializer, [8 x i8] c"\01\00\01\00\01\00\01\00", [8 x i8] zeroinitializer, [8 x i8] c"\01\00\01\00\01\00\01\00", [8 x i8] zeroinitializer], align 16
@above_prediction_mask = internal unnamed_addr constant [13 x i64] [i64 1, i64 1, i64 1, i64 1, i64 1, i64 3, i64 3, i64 3, i64 15, i64 15, i64 15, i64 255, i64 255], align 16
@left_prediction_mask = internal unnamed_addr constant [13 x i64] [i64 1, i64 1, i64 1, i64 1, i64 257, i64 1, i64 257, i64 16843009, i64 257, i64 16843009, i64 72340172838076673, i64 16843009, i64 72340172838076673], align 16
@above_prediction_mask_uv = internal unnamed_addr constant [13 x i16] [i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 3, i16 3, i16 3, i16 15, i16 15], align 16
@left_prediction_mask_uv = internal unnamed_addr constant [13 x i16] [i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 17, i16 1, i16 17, i16 4369, i16 17, i16 4369], align 16
@size_mask = internal unnamed_addr constant [13 x i64] [i64 1, i64 1, i64 1, i64 1, i64 257, i64 3, i64 771, i64 50529027, i64 3855, i64 252645135, i64 1085102592571150095, i64 4294967295, i64 -1], align 16
@above_64x64_txform_mask = internal unnamed_addr constant [4 x i64] [i64 -1, i64 -1, i64 71777214294589695, i64 1095216660735], align 16
@left_64x64_txform_mask = internal unnamed_addr constant [4 x i64] [i64 -1, i64 -1, i64 6148914691236517205, i64 1229782938247303441], align 16
@size_mask_uv = internal unnamed_addr constant [13 x i16] [i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 17, i16 3, i16 51, i16 13107, i16 255, i16 -1], align 16
@above_64x64_txform_mask_uv = internal unnamed_addr constant [4 x i16] [i16 -1, i16 -1, i16 3855, i16 15], align 2
@left_64x64_txform_mask_uv = internal unnamed_addr constant [4 x i16] [i16 -1, i16 -1, i16 21845, i16 4369], align 2
@mode_lf_lut = internal unnamed_addr constant [14 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 1], align 16
@vpx_lpf_horizontal_16_dual = external local_unnamed_addr global void (i8*, i32, i8*, i8*, i8*)*, align 8
@vpx_lpf_horizontal_16 = external local_unnamed_addr global void (i8*, i32, i8*, i8*, i8*)*, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_loop_filter_init(%struct.VP9Common* nocapture) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 68, i32 2
  %3 = load i32, i32* %2, align 8
  %4 = icmp sgt i32 %3, 0
  %5 = zext i1 %4 to i32
  %6 = icmp sgt i32 %3, 4
  %7 = zext i1 %6 to i32
  %8 = add nuw nsw i32 %5, %7
  %9 = sub nsw i32 9, %3
  br label %10

10:                                               ; preds = %10, %1
  %11 = phi i64 [ 0, %1 ], [ %26, %10 ]
  %12 = trunc i64 %11 to i32
  %13 = lshr i32 %12, %8
  %14 = icmp sgt i32 %13, %9
  %15 = and i1 %4, %14
  %16 = select i1 %15, i32 %9, i32 %13
  %17 = icmp sgt i32 %16, 1
  %18 = select i1 %17, i32 %16, i32 1
  %19 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 65, i32 0, i64 %11, i32 1, i64 0
  %20 = trunc i32 %18 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 16 %19, i8 %20, i64 16, i1 false) #4
  %21 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 65, i32 0, i64 %11, i32 0, i64 0
  %22 = shl i32 %12, 1
  %23 = add i32 %22, 4
  %24 = add nuw nsw i32 %23, %18
  %25 = trunc i32 %24 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 16 %21, i8 %25, i64 16, i1 false) #4
  %26 = add nuw nsw i64 %11, 1
  %27 = icmp eq i64 %26, 64
  br i1 %27, label %28, label %10

28:                                               ; preds = %10
  %29 = load i32, i32* %2, align 8
  %30 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 68, i32 3
  store i32 %29, i32* %30, align 4
  br label %31

31:                                               ; preds = %31, %28
  %32 = phi i64 [ 0, %28 ], [ %52, %31 ]
  %33 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 65, i32 0, i64 %32, i32 2, i64 0
  %34 = trunc i64 %32 to i32
  %35 = lshr i32 %34, 4
  %36 = trunc i32 %35 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 16 %33, i8 %36, i64 16, i1 false)
  %37 = or i64 %32, 1
  %38 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 65, i32 0, i64 %37, i32 2, i64 0
  %39 = trunc i64 %32 to i32
  %40 = lshr i32 %39, 4
  %41 = trunc i32 %40 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 16 %38, i8 %41, i64 16, i1 false)
  %42 = or i64 %32, 2
  %43 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 65, i32 0, i64 %42, i32 2, i64 0
  %44 = trunc i64 %32 to i32
  %45 = lshr i32 %44, 4
  %46 = trunc i32 %45 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 16 %43, i8 %46, i64 16, i1 false)
  %47 = or i64 %32, 3
  %48 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 65, i32 0, i64 %47, i32 2, i64 0
  %49 = trunc i64 %32 to i32
  %50 = lshr i32 %49, 4
  %51 = trunc i32 %50 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 16 %48, i8 %51, i64 16, i1 false)
  %52 = add nuw nsw i64 %32, 4
  %53 = icmp eq i64 %52, 64
  br i1 %53, label %54, label %31

54:                                               ; preds = %31
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_loop_filter_frame_init(%struct.VP9Common* nocapture, i32) local_unnamed_addr #0 {
  %3 = ashr i32 %1, 5
  %4 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 68, i32 3
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 68, i32 2
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %5, %7
  br i1 %8, label %36, label %9

9:                                                ; preds = %2
  %10 = icmp sgt i32 %7, 0
  %11 = zext i1 %10 to i32
  %12 = icmp sgt i32 %7, 4
  %13 = zext i1 %12 to i32
  %14 = add nuw nsw i32 %11, %13
  %15 = sub nsw i32 9, %7
  br label %16

16:                                               ; preds = %16, %9
  %17 = phi i64 [ 0, %9 ], [ %32, %16 ]
  %18 = trunc i64 %17 to i32
  %19 = lshr i32 %18, %14
  %20 = icmp sgt i32 %19, %15
  %21 = and i1 %10, %20
  %22 = select i1 %21, i32 %15, i32 %19
  %23 = icmp sgt i32 %22, 1
  %24 = select i1 %23, i32 %22, i32 1
  %25 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 65, i32 0, i64 %17, i32 1, i64 0
  %26 = trunc i32 %24 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 16 %25, i8 %26, i64 16, i1 false) #4
  %27 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 65, i32 0, i64 %17, i32 0, i64 0
  %28 = shl i32 %18, 1
  %29 = add i32 %28, 4
  %30 = add nuw nsw i32 %29, %24
  %31 = trunc i32 %30 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 16 %27, i8 %31, i64 16, i1 false) #4
  %32 = add nuw nsw i64 %17, 1
  %33 = icmp eq i64 %32, 64
  br i1 %33, label %34, label %16

34:                                               ; preds = %16
  %35 = load i32, i32* %6, align 8
  store i32 %35, i32* %4, align 4
  br label %36

36:                                               ; preds = %2, %34
  %37 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 69, i32 0
  %38 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 69, i32 3
  %39 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 68, i32 4
  %40 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 68, i32 6, i64 0
  %41 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 68, i32 6, i64 1
  %42 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 68, i32 8, i64 0
  %43 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 68, i32 8, i64 1
  %44 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 68, i32 6, i64 2
  %45 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 68, i32 6, i64 3
  br label %46

46:                                               ; preds = %155, %36
  %47 = phi i64 [ 0, %36 ], [ %156, %155 ]
  %48 = load i8, i8* %37, align 4
  %49 = icmp eq i8 %48, 0
  br i1 %49, label %67, label %50

50:                                               ; preds = %46
  %51 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 69, i32 8, i64 %47
  %52 = load i32, i32* %51, align 4
  %53 = and i32 %52, 2
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %67, label %55

55:                                               ; preds = %50
  %56 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 69, i32 7, i64 %47, i64 1
  %57 = load i16, i16* %56, align 2
  %58 = sext i16 %57 to i32
  %59 = load i8, i8* %38, align 1
  %60 = icmp eq i8 %59, 1
  %61 = select i1 %60, i32 0, i32 %1
  %62 = add nsw i32 %61, %58
  %63 = icmp slt i32 %62, 63
  %64 = select i1 %63, i32 %62, i32 63
  %65 = icmp sgt i32 %64, 0
  %66 = select i1 %65, i32 %64, i32 0
  br label %67

67:                                               ; preds = %46, %50, %55
  %68 = phi i32 [ %66, %55 ], [ %1, %50 ], [ %1, %46 ]
  %69 = load i8, i8* %39, align 8
  %70 = icmp eq i8 %69, 0
  br i1 %70, label %71, label %74

71:                                               ; preds = %67
  %72 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 65, i32 1, i64 %47, i64 0, i64 0
  %73 = trunc i32 %68 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %72, i8 %73, i64 8, i1 false)
  br label %155

74:                                               ; preds = %67
  %75 = load i8, i8* %40, align 2
  %76 = sext i8 %75 to i32
  %77 = shl i32 %76, %3
  %78 = add nsw i32 %77, %68
  %79 = icmp slt i32 %78, 63
  %80 = select i1 %79, i32 %78, i32 63
  %81 = icmp sgt i32 %80, 0
  %82 = select i1 %81, i32 %80, i32 0
  %83 = trunc i32 %82 to i8
  %84 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 65, i32 1, i64 %47, i64 0, i64 0
  store i8 %83, i8* %84, align 8
  %85 = load i8, i8* %41, align 1
  %86 = sext i8 %85 to i32
  %87 = shl i32 %86, %3
  %88 = add nsw i32 %87, %68
  %89 = load i8, i8* %42, align 1
  %90 = sext i8 %89 to i32
  %91 = shl i32 %90, %3
  %92 = add nsw i32 %88, %91
  %93 = icmp slt i32 %92, 63
  %94 = select i1 %93, i32 %92, i32 63
  %95 = icmp sgt i32 %94, 0
  %96 = select i1 %95, i32 %94, i32 0
  %97 = trunc i32 %96 to i8
  %98 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 65, i32 1, i64 %47, i64 1, i64 0
  store i8 %97, i8* %98, align 1
  %99 = load i8, i8* %43, align 1
  %100 = sext i8 %99 to i32
  %101 = shl i32 %100, %3
  %102 = add nsw i32 %88, %101
  %103 = icmp slt i32 %102, 63
  %104 = select i1 %103, i32 %102, i32 63
  %105 = icmp sgt i32 %104, 0
  %106 = select i1 %105, i32 %104, i32 0
  %107 = trunc i32 %106 to i8
  %108 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 65, i32 1, i64 %47, i64 1, i64 1
  store i8 %107, i8* %108, align 1
  %109 = load i8, i8* %44, align 1
  %110 = sext i8 %109 to i32
  %111 = shl i32 %110, %3
  %112 = add nsw i32 %111, %68
  %113 = load i8, i8* %42, align 1
  %114 = sext i8 %113 to i32
  %115 = shl i32 %114, %3
  %116 = add nsw i32 %112, %115
  %117 = icmp slt i32 %116, 63
  %118 = select i1 %117, i32 %116, i32 63
  %119 = icmp sgt i32 %118, 0
  %120 = select i1 %119, i32 %118, i32 0
  %121 = trunc i32 %120 to i8
  %122 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 65, i32 1, i64 %47, i64 2, i64 0
  store i8 %121, i8* %122, align 1
  %123 = load i8, i8* %44, align 1
  %124 = sext i8 %123 to i32
  %125 = shl i32 %124, %3
  %126 = add nsw i32 %125, %68
  %127 = load i8, i8* %43, align 1
  %128 = sext i8 %127 to i32
  %129 = shl i32 %128, %3
  %130 = add nsw i32 %126, %129
  %131 = icmp slt i32 %130, 63
  %132 = select i1 %131, i32 %130, i32 63
  %133 = icmp sgt i32 %132, 0
  %134 = select i1 %133, i32 %132, i32 0
  %135 = trunc i32 %134 to i8
  %136 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 65, i32 1, i64 %47, i64 2, i64 1
  store i8 %135, i8* %136, align 1
  %137 = load i8, i8* %45, align 1
  %138 = sext i8 %137 to i32
  %139 = shl i32 %138, %3
  %140 = add nsw i32 %139, %68
  %141 = add nsw i32 %140, %115
  %142 = icmp slt i32 %141, 63
  %143 = select i1 %142, i32 %141, i32 63
  %144 = icmp sgt i32 %143, 0
  %145 = select i1 %144, i32 %143, i32 0
  %146 = trunc i32 %145 to i8
  %147 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 65, i32 1, i64 %47, i64 3, i64 0
  store i8 %146, i8* %147, align 1
  %148 = add nsw i32 %140, %129
  %149 = icmp slt i32 %148, 63
  %150 = select i1 %149, i32 %148, i32 63
  %151 = icmp sgt i32 %150, 0
  %152 = select i1 %151, i32 %150, i32 0
  %153 = trunc i32 %152 to i8
  %154 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 65, i32 1, i64 %47, i64 3, i64 1
  store i8 %153, i8* %154, align 1
  br label %155

155:                                              ; preds = %74, %71
  %156 = add nuw nsw i64 %47, 1
  %157 = icmp eq i64 %156, 8
  br i1 %157, label %158, label %46

158:                                              ; preds = %155
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vp9_adjust_mask(%struct.VP9Common* nocapture readonly, i32, i32, %struct.LOOP_FILTER_MASK*) local_unnamed_addr #2 {
  %5 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 0, i64 3
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 0, i64 2
  %8 = load i64, i64* %7, align 8
  %9 = or i64 %8, %6
  store i64 %9, i64* %7, align 8
  %10 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 1, i64 3
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 1, i64 2
  %13 = load i64, i64* %12, align 8
  %14 = or i64 %13, %11
  store i64 %14, i64* %12, align 8
  %15 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 3, i64 3
  %16 = load i16, i16* %15, align 2
  %17 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 3, i64 2
  %18 = load i16, i16* %17, align 4
  %19 = or i16 %18, %16
  store i16 %19, i16* %17, align 4
  %20 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 4, i64 3
  %21 = load i16, i16* %20, align 2
  %22 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 4, i64 2
  %23 = load i16, i16* %22, align 4
  %24 = or i16 %23, %21
  store i16 %24, i16* %22, align 4
  %25 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 0, i64 0
  %26 = load i64, i64* %25, align 8
  %27 = and i64 %26, 1229782938247303441
  %28 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 0, i64 1
  %29 = load i64, i64* %28, align 8
  %30 = or i64 %29, %27
  store i64 %30, i64* %28, align 8
  %31 = and i64 %26, -1229782938247303442
  store i64 %31, i64* %25, align 8
  %32 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 1, i64 0
  %33 = load i64, i64* %32, align 8
  %34 = and i64 %33, 1095216660735
  %35 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 1, i64 1
  %36 = load i64, i64* %35, align 8
  %37 = or i64 %36, %34
  store i64 %37, i64* %35, align 8
  %38 = and i64 %33, -1095216660736
  store i64 %38, i64* %32, align 8
  %39 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 3, i64 0
  %40 = load i16, i16* %39, align 8
  %41 = and i16 %40, 4369
  %42 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 3, i64 1
  %43 = load i16, i16* %42, align 2
  %44 = or i16 %43, %41
  store i16 %44, i16* %42, align 2
  %45 = and i16 %40, -4370
  store i16 %45, i16* %39, align 8
  %46 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 4, i64 0
  %47 = load i16, i16* %46, align 8
  %48 = and i16 %47, 15
  %49 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 4, i64 1
  %50 = load i16, i16* %49, align 2
  %51 = or i16 %50, %48
  store i16 %51, i16* %49, align 2
  %52 = and i16 %47, -16
  store i16 %52, i16* %46, align 8
  %53 = add nsw i32 %1, 8
  %54 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 33
  %55 = load i32, i32* %54, align 16
  %56 = icmp sgt i32 %53, %55
  br i1 %56, label %57, label %94

57:                                               ; preds = %4
  %58 = sub nsw i32 %55, %1
  %59 = sext i32 %58 to i64
  %60 = shl nsw i64 %59, 3
  %61 = shl nsw i64 -1, %60
  %62 = xor i64 %61, -1
  %63 = add nsw i64 %59, 1
  %64 = lshr i64 %63, 1
  %65 = shl i64 %64, 2
  %66 = trunc i64 %65 to i32
  %67 = shl nsw i32 -1, %66
  %68 = trunc i32 %67 to i16
  %69 = xor i16 %68, -1
  %70 = and i64 %31, %62
  store i64 %70, i64* %25, align 8
  %71 = and i64 %38, %62
  store i64 %71, i64* %32, align 8
  %72 = and i16 %45, %69
  store i16 %72, i16* %39, align 2
  %73 = and i16 %52, %69
  store i16 %73, i16* %46, align 2
  %74 = and i64 %30, %62
  store i64 %74, i64* %28, align 8
  %75 = and i64 %37, %62
  store i64 %75, i64* %35, align 8
  %76 = and i16 %44, %69
  store i16 %76, i16* %42, align 2
  %77 = and i16 %51, %69
  store i16 %77, i16* %49, align 2
  %78 = and i64 %9, %62
  store i64 %78, i64* %7, align 8
  %79 = and i64 %14, %62
  store i64 %79, i64* %12, align 8
  %80 = and i16 %19, %69
  store i16 %80, i16* %17, align 2
  %81 = and i16 %24, %69
  store i16 %81, i16* %22, align 2
  %82 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 2
  %83 = load i64, i64* %82, align 8
  %84 = and i64 %83, %62
  store i64 %84, i64* %82, align 8
  %85 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 5
  %86 = load i16, i16* %85, align 8
  %87 = and i16 %86, %69
  store i16 %87, i16* %85, align 8
  switch i32 %58, label %94 [
    i32 1, label %88
    i32 5, label %90
  ]

88:                                               ; preds = %57
  %89 = or i16 %77, %81
  store i16 %89, i16* %49, align 2
  store i16 0, i16* %22, align 4
  br label %94

90:                                               ; preds = %57
  %91 = and i16 %81, -256
  %92 = or i16 %77, %91
  store i16 %92, i16* %49, align 2
  %93 = and i16 %81, 255
  store i16 %93, i16* %22, align 4
  br label %94

94:                                               ; preds = %88, %90, %57, %4
  %95 = phi i16 [ 0, %88 ], [ %93, %90 ], [ %81, %57 ], [ %24, %4 ]
  %96 = phi i16 [ %80, %88 ], [ %80, %90 ], [ %80, %57 ], [ %19, %4 ]
  %97 = phi i64 [ %79, %88 ], [ %79, %90 ], [ %79, %57 ], [ %14, %4 ]
  %98 = phi i64 [ %78, %88 ], [ %78, %90 ], [ %78, %57 ], [ %9, %4 ]
  %99 = phi i16 [ %89, %88 ], [ %92, %90 ], [ %77, %57 ], [ %51, %4 ]
  %100 = phi i16 [ %76, %88 ], [ %76, %90 ], [ %76, %57 ], [ %44, %4 ]
  %101 = phi i64 [ %75, %88 ], [ %75, %90 ], [ %75, %57 ], [ %37, %4 ]
  %102 = phi i64 [ %74, %88 ], [ %74, %90 ], [ %74, %57 ], [ %30, %4 ]
  %103 = phi i16 [ %73, %88 ], [ %73, %90 ], [ %73, %57 ], [ %52, %4 ]
  %104 = phi i16 [ %72, %88 ], [ %72, %90 ], [ %72, %57 ], [ %45, %4 ]
  %105 = phi i64 [ %71, %88 ], [ %71, %90 ], [ %71, %57 ], [ %38, %4 ]
  %106 = phi i64 [ %70, %88 ], [ %70, %90 ], [ %70, %57 ], [ %31, %4 ]
  %107 = add nsw i32 %2, 8
  %108 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 35
  %109 = load i32, i32* %108, align 8
  %110 = icmp sgt i32 %107, %109
  br i1 %110, label %111, label %154

111:                                              ; preds = %94
  %112 = sub nsw i32 %109, %2
  %113 = sext i32 %112 to i64
  %114 = shl nsw i32 -1, %112
  %115 = xor i32 %114, -1
  %116 = sext i32 %115 to i64
  %117 = mul i64 %116, 72340172838076673
  %118 = add nsw i64 %113, 1
  %119 = lshr i64 %118, 1
  %120 = trunc i64 %119 to i32
  %121 = shl nsw i32 -1, %120
  %122 = ashr i32 %112, 1
  %123 = trunc i32 %121 to i16
  %124 = xor i16 %123, -1
  %125 = mul i16 %124, 4369
  %126 = and i64 %106, %117
  store i64 %126, i64* %25, align 8
  %127 = and i64 %105, %117
  store i64 %127, i64* %32, align 8
  %128 = and i16 %104, %125
  store i16 %128, i16* %39, align 2
  %129 = and i16 %103, %125
  store i16 %129, i16* %46, align 2
  %130 = and i64 %102, %117
  store i64 %130, i64* %28, align 8
  %131 = and i64 %101, %117
  store i64 %131, i64* %35, align 8
  %132 = and i16 %100, %125
  store i16 %132, i16* %42, align 2
  %133 = and i16 %99, %125
  store i16 %133, i16* %49, align 2
  %134 = and i64 %98, %117
  store i64 %134, i64* %7, align 8
  %135 = and i64 %97, %117
  store i64 %135, i64* %12, align 8
  %136 = and i16 %96, %125
  store i16 %136, i16* %17, align 2
  %137 = and i16 %95, %125
  store i16 %137, i16* %22, align 2
  %138 = shl nsw i32 -1, %122
  %139 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 2
  %140 = load i64, i64* %139, align 8
  %141 = and i64 %140, %117
  store i64 %141, i64* %139, align 8
  %142 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 5
  %143 = load i16, i16* %142, align 8
  %144 = trunc i32 %138 to i16
  %145 = xor i16 %144, -1
  %146 = mul i16 %145, 4369
  %147 = and i16 %143, %146
  store i16 %147, i16* %142, align 8
  switch i32 %112, label %154 [
    i32 1, label %148
    i32 5, label %150
  ]

148:                                              ; preds = %111
  %149 = or i16 %132, %136
  store i16 %149, i16* %42, align 2
  store i16 0, i16* %17, align 4
  br label %154

150:                                              ; preds = %111
  %151 = and i16 %136, -13108
  %152 = or i16 %132, %151
  store i16 %152, i16* %42, align 2
  %153 = and i16 %136, 13107
  store i16 %153, i16* %17, align 4
  br label %154

154:                                              ; preds = %148, %150, %111, %94
  %155 = phi i16 [ 0, %148 ], [ %153, %150 ], [ %136, %111 ], [ %96, %94 ]
  %156 = phi i64 [ %134, %148 ], [ %134, %150 ], [ %134, %111 ], [ %98, %94 ]
  %157 = phi i16 [ %149, %148 ], [ %152, %150 ], [ %132, %111 ], [ %100, %94 ]
  %158 = phi i64 [ %130, %148 ], [ %130, %150 ], [ %130, %111 ], [ %102, %94 ]
  %159 = phi i16 [ %128, %148 ], [ %128, %150 ], [ %128, %111 ], [ %104, %94 ]
  %160 = phi i64 [ %126, %148 ], [ %126, %150 ], [ %126, %111 ], [ %106, %94 ]
  %161 = icmp eq i32 %2, 0
  br i1 %161, label %162, label %169

162:                                              ; preds = %154
  %163 = and i64 %160, -72340172838076674
  store i64 %163, i64* %25, align 8
  %164 = and i16 %159, -4370
  store i16 %164, i16* %39, align 2
  %165 = and i64 %158, -72340172838076674
  store i64 %165, i64* %28, align 8
  %166 = and i16 %157, -4370
  store i16 %166, i16* %42, align 2
  %167 = and i64 %156, -72340172838076674
  store i64 %167, i64* %7, align 8
  %168 = and i16 %155, -4370
  store i16 %168, i16* %17, align 2
  br label %169

169:                                              ; preds = %162, %154
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_setup_mask(%struct.VP9Common* nocapture readonly, i32, i32, %struct.MODE_INFO** nocapture readonly, i32, %struct.LOOP_FILTER_MASK* nocapture) local_unnamed_addr #0 {
  %7 = alloca [4 x i32], align 16
  %8 = alloca [4 x i32], align 16
  %9 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 65
  %10 = bitcast [4 x i32]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #4
  %11 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 0
  %12 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 1
  %13 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 2
  %14 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 3
  store i32 4, i32* %11, align 16
  %15 = shl i32 %4, 2
  %16 = add nsw i32 %15, -4
  store i32 %16, i32* %12, align 4
  store i32 4, i32* %13, align 8
  %17 = sub nuw nsw i32 -4, %15
  store i32 %17, i32* %14, align 4
  %18 = bitcast [4 x i32]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %18) #4
  %19 = getelementptr inbounds [4 x i32], [4 x i32]* %8, i64 0, i64 0
  %20 = getelementptr inbounds [4 x i32], [4 x i32]* %8, i64 0, i64 1
  %21 = getelementptr inbounds [4 x i32], [4 x i32]* %8, i64 0, i64 2
  %22 = getelementptr inbounds [4 x i32], [4 x i32]* %8, i64 0, i64 3
  store i32 2, i32* %19, align 16
  %23 = shl i32 %4, 1
  %24 = add nsw i32 %23, -2
  store i32 %24, i32* %20, align 4
  store i32 2, i32* %21, align 8
  %25 = sub nuw nsw i32 -2, %23
  store i32 %25, i32* %22, align 4
  %26 = add nsw i32 %1, 8
  %27 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 33
  %28 = load i32, i32* %27, align 16
  %29 = icmp sgt i32 %26, %28
  %30 = sub nsw i32 %28, %1
  %31 = select i1 %29, i32 %30, i32 8
  %32 = add nsw i32 %2, 8
  %33 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 35
  %34 = load i32, i32* %33, align 8
  %35 = icmp sgt i32 %32, %34
  %36 = sub nsw i32 %34, %2
  %37 = select i1 %35, i32 %36, i32 8
  %38 = bitcast %struct.LOOP_FILTER_MASK* %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %38, i8 0, i64 160, i1 false)
  %39 = load %struct.MODE_INFO*, %struct.MODE_INFO** %3, align 8
  %40 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %39, i64 0, i32 0
  %41 = load i8, i8* %40, align 4
  switch i8 %41, label %42 [
    i8 12, label %49
    i8 11, label %50
    i8 10, label %56
  ]

42:                                               ; preds = %6
  %43 = xor i32 %4, -1
  %44 = add nsw i32 %4, -1
  %45 = sext i32 %23 to i64
  %46 = sext i32 %4 to i64
  %47 = sext i32 %44 to i64
  %48 = sext i32 %43 to i64
  br label %61

49:                                               ; preds = %6
  tail call fastcc void @build_masks(%struct.loop_filter_info_n* %9, %struct.MODE_INFO* %39, i32 0, i32 0, %struct.LOOP_FILTER_MASK* %5)
  br label %159

50:                                               ; preds = %6
  tail call fastcc void @build_masks(%struct.loop_filter_info_n* %9, %struct.MODE_INFO* %39, i32 0, i32 0, %struct.LOOP_FILTER_MASK* %5)
  %51 = icmp slt i32 %31, 5
  br i1 %51, label %159, label %52

52:                                               ; preds = %50
  %53 = sext i32 %15 to i64
  %54 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %3, i64 %53
  %55 = load %struct.MODE_INFO*, %struct.MODE_INFO** %54, align 8
  tail call fastcc void @build_masks(%struct.loop_filter_info_n* %9, %struct.MODE_INFO* %55, i32 32, i32 8, %struct.LOOP_FILTER_MASK* %5)
  br label %159

56:                                               ; preds = %6
  tail call fastcc void @build_masks(%struct.loop_filter_info_n* %9, %struct.MODE_INFO* %39, i32 0, i32 0, %struct.LOOP_FILTER_MASK* %5)
  %57 = icmp slt i32 %37, 5
  br i1 %57, label %159, label %58

58:                                               ; preds = %56
  %59 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %3, i64 4
  %60 = load %struct.MODE_INFO*, %struct.MODE_INFO** %59, align 8
  tail call fastcc void @build_masks(%struct.loop_filter_info_n* %9, %struct.MODE_INFO* %60, i32 4, i32 2, %struct.LOOP_FILTER_MASK* %5)
  br label %159

61:                                               ; preds = %151, %42
  %62 = phi i64 [ 0, %42 ], [ %157, %151 ]
  %63 = phi %struct.MODE_INFO** [ %3, %42 ], [ %156, %151 ]
  %64 = getelementptr inbounds [4 x i32], [4 x i32]* @vp9_setup_mask.shift_32_y, i64 0, i64 %62
  %65 = load i32, i32* %64, align 4
  %66 = getelementptr inbounds [4 x i32], [4 x i32]* @vp9_setup_mask.shift_32_uv, i64 0, i64 %62
  %67 = load i32, i32* %66, align 4
  %68 = trunc i64 %62 to i32
  %69 = shl i32 %68, 2
  %70 = and i32 %69, 4
  %71 = trunc i64 %62 to i32
  %72 = lshr i32 %71, 1
  %73 = shl nuw i32 %72, 2
  %74 = icmp slt i32 %70, %37
  %75 = icmp slt i32 %73, %31
  %76 = and i1 %74, %75
  br i1 %76, label %77, label %151

77:                                               ; preds = %61
  %78 = load %struct.MODE_INFO*, %struct.MODE_INFO** %63, align 8
  %79 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %78, i64 0, i32 0
  %80 = load i8, i8* %79, align 4
  switch i8 %80, label %98 [
    i8 9, label %81
    i8 8, label %82
    i8 7, label %90
  ]

81:                                               ; preds = %77
  tail call fastcc void @build_masks(%struct.loop_filter_info_n* %9, %struct.MODE_INFO* %78, i32 %65, i32 %67, %struct.LOOP_FILTER_MASK* %5)
  br label %151

82:                                               ; preds = %77
  tail call fastcc void @build_masks(%struct.loop_filter_info_n* %9, %struct.MODE_INFO* %78, i32 %65, i32 %67, %struct.LOOP_FILTER_MASK* %5)
  %83 = or i32 %73, 2
  %84 = icmp slt i32 %83, %31
  br i1 %84, label %85, label %151

85:                                               ; preds = %82
  %86 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %63, i64 %45
  %87 = load %struct.MODE_INFO*, %struct.MODE_INFO** %86, align 8
  %88 = add nsw i32 %65, 16
  %89 = add nsw i32 %67, 4
  tail call fastcc void @build_masks(%struct.loop_filter_info_n* %9, %struct.MODE_INFO* %87, i32 %88, i32 %89, %struct.LOOP_FILTER_MASK* %5)
  br label %151

90:                                               ; preds = %77
  tail call fastcc void @build_masks(%struct.loop_filter_info_n* %9, %struct.MODE_INFO* %78, i32 %65, i32 %67, %struct.LOOP_FILTER_MASK* %5)
  %91 = or i32 %70, 2
  %92 = icmp slt i32 %91, %37
  br i1 %92, label %93, label %151

93:                                               ; preds = %90
  %94 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %63, i64 2
  %95 = load %struct.MODE_INFO*, %struct.MODE_INFO** %94, align 8
  %96 = add nsw i32 %65, 2
  %97 = add nsw i32 %67, 1
  tail call fastcc void @build_masks(%struct.loop_filter_info_n* %9, %struct.MODE_INFO* %95, i32 %96, i32 %97, %struct.LOOP_FILTER_MASK* %5)
  br label %151

98:                                               ; preds = %77, %143
  %99 = phi i64 [ %149, %143 ], [ 0, %77 ]
  %100 = phi %struct.MODE_INFO** [ %148, %143 ], [ %63, %77 ]
  %101 = getelementptr inbounds [4 x i32], [4 x i32]* @vp9_setup_mask.shift_16_y, i64 0, i64 %99
  %102 = load i32, i32* %101, align 4
  %103 = add nsw i32 %102, %65
  %104 = getelementptr inbounds [4 x i32], [4 x i32]* @vp9_setup_mask.shift_16_uv, i64 0, i64 %99
  %105 = load i32, i32* %104, align 4
  %106 = add nsw i32 %105, %67
  %107 = trunc i64 %99 to i32
  %108 = shl i32 %107, 1
  %109 = and i32 %108, 2
  %110 = or i32 %109, %70
  %111 = trunc i64 %99 to i32
  %112 = and i32 %111, 2147483646
  %113 = add nsw i32 %112, %73
  %114 = icmp slt i32 %110, %37
  %115 = icmp slt i32 %113, %31
  %116 = and i1 %115, %114
  br i1 %116, label %117, label %143

117:                                              ; preds = %98
  %118 = load %struct.MODE_INFO*, %struct.MODE_INFO** %100, align 8
  %119 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %118, i64 0, i32 0
  %120 = load i8, i8* %119, align 4
  switch i8 %120, label %136 [
    i8 6, label %121
    i8 5, label %122
    i8 4, label %129
  ]

121:                                              ; preds = %117
  tail call fastcc void @build_masks(%struct.loop_filter_info_n* %9, %struct.MODE_INFO* %118, i32 %103, i32 %106, %struct.LOOP_FILTER_MASK* %5)
  br label %143

122:                                              ; preds = %117
  tail call fastcc void @build_masks(%struct.loop_filter_info_n* %9, %struct.MODE_INFO* %118, i32 %103, i32 %106, %struct.LOOP_FILTER_MASK* %5)
  %123 = or i32 %113, 1
  %124 = icmp slt i32 %123, %31
  br i1 %124, label %125, label %143

125:                                              ; preds = %122
  %126 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %100, i64 %46
  %127 = load %struct.MODE_INFO*, %struct.MODE_INFO** %126, align 8
  %128 = add nsw i32 %103, 8
  tail call fastcc void @build_y_mask(%struct.loop_filter_info_n* %9, %struct.MODE_INFO* %127, i32 %128, %struct.LOOP_FILTER_MASK* %5)
  br label %143

129:                                              ; preds = %117
  tail call fastcc void @build_masks(%struct.loop_filter_info_n* %9, %struct.MODE_INFO* %118, i32 %103, i32 %106, %struct.LOOP_FILTER_MASK* %5)
  %130 = or i32 %110, 1
  %131 = icmp slt i32 %130, %37
  br i1 %131, label %132, label %143

132:                                              ; preds = %129
  %133 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %100, i64 1
  %134 = load %struct.MODE_INFO*, %struct.MODE_INFO** %133, align 8
  %135 = add nsw i32 %103, 1
  tail call fastcc void @build_y_mask(%struct.loop_filter_info_n* %9, %struct.MODE_INFO* %134, i32 %135, %struct.LOOP_FILTER_MASK* %5)
  br label %143

136:                                              ; preds = %117
  tail call fastcc void @build_masks(%struct.loop_filter_info_n* %9, %struct.MODE_INFO* %118, i32 %103, i32 %106, %struct.LOOP_FILTER_MASK* %5)
  %137 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %100, i64 1
  %138 = or i32 %110, 1
  %139 = icmp slt i32 %138, %37
  br i1 %139, label %140, label %160

140:                                              ; preds = %136
  %141 = add nsw i32 %103, 1
  %142 = load %struct.MODE_INFO*, %struct.MODE_INFO** %137, align 8
  tail call fastcc void @build_y_mask(%struct.loop_filter_info_n* %9, %struct.MODE_INFO* %142, i32 %141, %struct.LOOP_FILTER_MASK* %5)
  br label %160

143:                                              ; preds = %175, %121, %125, %132, %129, %122, %98
  %144 = phi %struct.MODE_INFO** [ %100, %98 ], [ %100, %122 ], [ %100, %129 ], [ %100, %132 ], [ %100, %125 ], [ %100, %121 ], [ %176, %175 ]
  %145 = getelementptr inbounds [4 x i32], [4 x i32]* %8, i64 0, i64 %99
  %146 = load i32, i32* %145, align 4
  %147 = sext i32 %146 to i64
  %148 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %144, i64 %147
  %149 = add nuw nsw i64 %99, 1
  %150 = icmp eq i64 %149, 4
  br i1 %150, label %151, label %98

151:                                              ; preds = %143, %81, %85, %93, %90, %82, %61
  %152 = phi %struct.MODE_INFO** [ %63, %61 ], [ %63, %82 ], [ %63, %90 ], [ %63, %93 ], [ %63, %85 ], [ %63, %81 ], [ %148, %143 ]
  %153 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 %62
  %154 = load i32, i32* %153, align 4
  %155 = sext i32 %154 to i64
  %156 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %152, i64 %155
  %157 = add nuw nsw i64 %62, 1
  %158 = icmp eq i64 %157, 4
  br i1 %158, label %159, label %61

159:                                              ; preds = %151, %56, %50, %58, %52, %49
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %18) #4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #4
  ret void

160:                                              ; preds = %140, %136
  %161 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %137, i64 %47
  %162 = or i32 %113, 1
  %163 = icmp slt i32 %162, %31
  br i1 %163, label %164, label %167

164:                                              ; preds = %160
  %165 = add nsw i32 %103, 8
  %166 = load %struct.MODE_INFO*, %struct.MODE_INFO** %161, align 8
  tail call fastcc void @build_y_mask(%struct.loop_filter_info_n* %9, %struct.MODE_INFO* %166, i32 %165, %struct.LOOP_FILTER_MASK* %5)
  br label %167

167:                                              ; preds = %164, %160
  %168 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %161, i64 1
  %169 = or i32 %113, 1
  %170 = icmp slt i32 %169, %31
  %171 = and i1 %139, %170
  br i1 %171, label %172, label %175

172:                                              ; preds = %167
  %173 = add nsw i32 %103, 9
  %174 = load %struct.MODE_INFO*, %struct.MODE_INFO** %168, align 8
  tail call fastcc void @build_y_mask(%struct.loop_filter_info_n* %9, %struct.MODE_INFO* %174, i32 %173, %struct.LOOP_FILTER_MASK* %5)
  br label %175

175:                                              ; preds = %172, %167
  %176 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %168, i64 %48
  br label %143
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @build_masks(%struct.loop_filter_info_n* nocapture readonly, %struct.MODE_INFO* nocapture readonly, i32, i32, %struct.LOOP_FILTER_MASK* nocapture) unnamed_addr #0 {
  %6 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1, i64 0, i32 0
  %7 = load i8, i8* %6, align 4
  %8 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1, i64 0, i32 2
  %9 = load i8, i8* %8, align 2
  %10 = zext i8 %7 to i64
  %11 = zext i8 %9 to i64
  %12 = getelementptr inbounds [13 x [4 x [2 x [2 x i8]]]], [13 x [4 x [2 x [2 x i8]]]]* @uv_txsize_lookup, i64 0, i64 %10, i64 %11, i64 1, i64 1
  %13 = load i8, i8* %12, align 1
  %14 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1, i64 0, i32 4
  %15 = load i8, i8* %14, align 4
  %16 = sext i8 %15 to i64
  %17 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1, i64 0, i32 8, i64 0
  %18 = load i8, i8* %17, align 4
  %19 = sext i8 %18 to i64
  %20 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1, i64 0, i32 1
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i64
  %23 = getelementptr inbounds [14 x i32], [14 x i32]* @mode_lf_lut, i64 0, i64 %22
  %24 = load i32, i32* %23, align 4
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds %struct.loop_filter_info_n, %struct.loop_filter_info_n* %0, i64 0, i32 1, i64 %16, i64 %19, i64 %25
  %27 = load i8, i8* %26, align 1
  %28 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %4, i64 0, i32 0, i64 %11
  %29 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %4, i64 0, i32 1, i64 %11
  %30 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %4, i64 0, i32 2
  %31 = zext i8 %13 to i64
  %32 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %4, i64 0, i32 3, i64 %31
  %33 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %4, i64 0, i32 4, i64 %31
  %34 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %4, i64 0, i32 5
  %35 = icmp eq i8 %27, 0
  br i1 %35, label %160, label %36

36:                                               ; preds = %5
  %37 = getelementptr inbounds [13 x i8], [13 x i8]* @num_8x8_blocks_high_lookup, i64 0, i64 %10
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i32
  %40 = icmp eq i8 %38, 0
  br i1 %40, label %82, label %41

41:                                               ; preds = %36
  %42 = getelementptr inbounds [13 x i8], [13 x i8]* @num_8x8_blocks_wide_lookup, i64 0, i64 %10
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i64
  %45 = sext i32 %2 to i64
  %46 = add nsw i32 %39, -1
  %47 = and i32 %39, 7
  %48 = icmp ult i32 %46, 7
  br i1 %48, label %72, label %49

49:                                               ; preds = %41
  %50 = sub nsw i32 %39, %47
  br label %51

51:                                               ; preds = %51, %49
  %52 = phi i64 [ %45, %49 ], [ %69, %51 ]
  %53 = phi i32 [ %50, %49 ], [ %70, %51 ]
  %54 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %4, i64 0, i32 6, i64 %52
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %54, i8 %27, i64 %44, i1 false)
  %55 = add nsw i64 %52, 8
  %56 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %4, i64 0, i32 6, i64 %55
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %56, i8 %27, i64 %44, i1 false)
  %57 = add nsw i64 %52, 16
  %58 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %4, i64 0, i32 6, i64 %57
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %58, i8 %27, i64 %44, i1 false)
  %59 = add nsw i64 %52, 24
  %60 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %4, i64 0, i32 6, i64 %59
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %60, i8 %27, i64 %44, i1 false)
  %61 = add nsw i64 %52, 32
  %62 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %4, i64 0, i32 6, i64 %61
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %62, i8 %27, i64 %44, i1 false)
  %63 = add nsw i64 %52, 40
  %64 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %4, i64 0, i32 6, i64 %63
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %64, i8 %27, i64 %44, i1 false)
  %65 = add nsw i64 %52, 48
  %66 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %4, i64 0, i32 6, i64 %65
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %66, i8 %27, i64 %44, i1 false)
  %67 = add nsw i64 %52, 56
  %68 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %4, i64 0, i32 6, i64 %67
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %68, i8 %27, i64 %44, i1 false)
  %69 = add nsw i64 %52, 64
  %70 = add i32 %53, -8
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %72, label %51

72:                                               ; preds = %51, %41
  %73 = phi i64 [ %45, %41 ], [ %69, %51 ]
  %74 = icmp eq i32 %47, 0
  br i1 %74, label %82, label %75

75:                                               ; preds = %72, %75
  %76 = phi i64 [ %79, %75 ], [ %73, %72 ]
  %77 = phi i32 [ %80, %75 ], [ %47, %72 ]
  %78 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %4, i64 0, i32 6, i64 %76
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %78, i8 %27, i64 %44, i1 false)
  %79 = add nsw i64 %76, 8
  %80 = add i32 %77, -1
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %75, !llvm.loop !2

82:                                               ; preds = %72, %75, %36
  %83 = getelementptr inbounds [13 x i64], [13 x i64]* @above_prediction_mask, i64 0, i64 %10
  %84 = load i64, i64* %83, align 8
  %85 = zext i32 %2 to i64
  %86 = shl i64 %84, %85
  %87 = load i64, i64* %29, align 8
  %88 = or i64 %87, %86
  store i64 %88, i64* %29, align 8
  %89 = getelementptr inbounds [13 x i16], [13 x i16]* @above_prediction_mask_uv, i64 0, i64 %10
  %90 = load i16, i16* %89, align 2
  %91 = zext i16 %90 to i32
  %92 = shl i32 %91, %3
  %93 = load i16, i16* %33, align 2
  %94 = trunc i32 %92 to i16
  %95 = or i16 %93, %94
  store i16 %95, i16* %33, align 2
  %96 = getelementptr inbounds [13 x i64], [13 x i64]* @left_prediction_mask, i64 0, i64 %10
  %97 = load i64, i64* %96, align 8
  %98 = shl i64 %97, %85
  %99 = load i64, i64* %28, align 8
  %100 = or i64 %99, %98
  store i64 %100, i64* %28, align 8
  %101 = getelementptr inbounds [13 x i16], [13 x i16]* @left_prediction_mask_uv, i64 0, i64 %10
  %102 = load i16, i16* %101, align 2
  %103 = zext i16 %102 to i32
  %104 = shl i32 %103, %3
  %105 = load i16, i16* %32, align 2
  %106 = trunc i32 %104 to i16
  %107 = or i16 %105, %106
  store i16 %107, i16* %32, align 2
  %108 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1, i64 0, i32 3
  %109 = load i8, i8* %108, align 1
  %110 = icmp eq i8 %109, 0
  br i1 %110, label %114, label %111

111:                                              ; preds = %82
  %112 = load i8, i8* %17, align 4
  %113 = icmp slt i8 %112, 1
  br i1 %113, label %114, label %160

114:                                              ; preds = %111, %82
  %115 = getelementptr inbounds [13 x i64], [13 x i64]* @size_mask, i64 0, i64 %10
  %116 = load i64, i64* %115, align 8
  %117 = getelementptr inbounds [4 x i64], [4 x i64]* @above_64x64_txform_mask, i64 0, i64 %11
  %118 = load i64, i64* %117, align 8
  %119 = and i64 %118, %116
  %120 = shl i64 %119, %85
  %121 = load i64, i64* %29, align 8
  %122 = or i64 %120, %121
  store i64 %122, i64* %29, align 8
  %123 = getelementptr inbounds [13 x i16], [13 x i16]* @size_mask_uv, i64 0, i64 %10
  %124 = load i16, i16* %123, align 2
  %125 = getelementptr inbounds [4 x i16], [4 x i16]* @above_64x64_txform_mask_uv, i64 0, i64 %31
  %126 = load i16, i16* %125, align 2
  %127 = and i16 %126, %124
  %128 = zext i16 %127 to i32
  %129 = shl i32 %128, %3
  %130 = load i16, i16* %33, align 2
  %131 = trunc i32 %129 to i16
  %132 = or i16 %130, %131
  store i16 %132, i16* %33, align 2
  %133 = getelementptr inbounds [4 x i64], [4 x i64]* @left_64x64_txform_mask, i64 0, i64 %11
  %134 = load i64, i64* %133, align 8
  %135 = and i64 %134, %116
  %136 = shl i64 %135, %85
  %137 = load i64, i64* %28, align 8
  %138 = or i64 %136, %137
  store i64 %138, i64* %28, align 8
  %139 = getelementptr inbounds [4 x i16], [4 x i16]* @left_64x64_txform_mask_uv, i64 0, i64 %31
  %140 = load i16, i16* %139, align 2
  %141 = and i16 %140, %124
  %142 = zext i16 %141 to i32
  %143 = shl i32 %142, %3
  %144 = load i16, i16* %32, align 2
  %145 = trunc i32 %143 to i16
  %146 = or i16 %144, %145
  store i16 %146, i16* %32, align 2
  %147 = icmp eq i8 %9, 0
  br i1 %147, label %148, label %152

148:                                              ; preds = %114
  %149 = shl i64 %116, %85
  %150 = load i64, i64* %30, align 8
  %151 = or i64 %150, %149
  store i64 %151, i64* %30, align 8
  br label %152

152:                                              ; preds = %148, %114
  %153 = icmp eq i8 %13, 0
  br i1 %153, label %154, label %160

154:                                              ; preds = %152
  %155 = zext i16 %124 to i32
  %156 = shl i32 %155, %3
  %157 = load i16, i16* %34, align 2
  %158 = trunc i32 %156 to i16
  %159 = or i16 %157, %158
  store i16 %159, i16* %34, align 2
  br label %160

160:                                              ; preds = %152, %154, %111, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @build_y_mask(%struct.loop_filter_info_n* nocapture readonly, %struct.MODE_INFO* nocapture readonly, i32, %struct.LOOP_FILTER_MASK* nocapture) unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1, i64 0, i32 2
  %6 = load i8, i8* %5, align 2
  %7 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1, i64 0, i32 4
  %8 = load i8, i8* %7, align 4
  %9 = sext i8 %8 to i64
  %10 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1, i64 0, i32 8, i64 0
  %11 = load i8, i8* %10, align 4
  %12 = sext i8 %11 to i64
  %13 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1, i64 0, i32 1
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i64
  %16 = getelementptr inbounds [14 x i32], [14 x i32]* @mode_lf_lut, i64 0, i64 %15
  %17 = load i32, i32* %16, align 4
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds %struct.loop_filter_info_n, %struct.loop_filter_info_n* %0, i64 0, i32 1, i64 %9, i64 %12, i64 %18
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %6 to i64
  %22 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 0, i64 %21
  %23 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 1, i64 %21
  %24 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 2
  %25 = icmp eq i8 %20, 0
  br i1 %25, label %111, label %26

26:                                               ; preds = %4
  %27 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1, i64 0, i32 0
  %28 = load i8, i8* %27, align 4
  %29 = zext i8 %28 to i64
  %30 = getelementptr inbounds [13 x i8], [13 x i8]* @num_8x8_blocks_high_lookup, i64 0, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = icmp eq i8 %31, 0
  br i1 %33, label %75, label %34

34:                                               ; preds = %26
  %35 = getelementptr inbounds [13 x i8], [13 x i8]* @num_8x8_blocks_wide_lookup, i64 0, i64 %29
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i64
  %38 = sext i32 %2 to i64
  %39 = add nsw i32 %32, -1
  %40 = and i32 %32, 7
  %41 = icmp ult i32 %39, 7
  br i1 %41, label %65, label %42

42:                                               ; preds = %34
  %43 = sub nsw i32 %32, %40
  br label %44

44:                                               ; preds = %44, %42
  %45 = phi i64 [ %38, %42 ], [ %62, %44 ]
  %46 = phi i32 [ %43, %42 ], [ %63, %44 ]
  %47 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 6, i64 %45
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %47, i8 %20, i64 %37, i1 false)
  %48 = add nsw i64 %45, 8
  %49 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 6, i64 %48
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %49, i8 %20, i64 %37, i1 false)
  %50 = add nsw i64 %45, 16
  %51 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 6, i64 %50
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %51, i8 %20, i64 %37, i1 false)
  %52 = add nsw i64 %45, 24
  %53 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 6, i64 %52
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %53, i8 %20, i64 %37, i1 false)
  %54 = add nsw i64 %45, 32
  %55 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 6, i64 %54
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %55, i8 %20, i64 %37, i1 false)
  %56 = add nsw i64 %45, 40
  %57 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 6, i64 %56
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %57, i8 %20, i64 %37, i1 false)
  %58 = add nsw i64 %45, 48
  %59 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 6, i64 %58
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %59, i8 %20, i64 %37, i1 false)
  %60 = add nsw i64 %45, 56
  %61 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 6, i64 %60
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %61, i8 %20, i64 %37, i1 false)
  %62 = add nsw i64 %45, 64
  %63 = add i32 %46, -8
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %44

65:                                               ; preds = %44, %34
  %66 = phi i64 [ %38, %34 ], [ %62, %44 ]
  %67 = icmp eq i32 %40, 0
  br i1 %67, label %75, label %68

68:                                               ; preds = %65, %68
  %69 = phi i64 [ %72, %68 ], [ %66, %65 ]
  %70 = phi i32 [ %73, %68 ], [ %40, %65 ]
  %71 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 6, i64 %69
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %71, i8 %20, i64 %37, i1 false)
  %72 = add nsw i64 %69, 8
  %73 = add i32 %70, -1
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %75, label %68, !llvm.loop !4

75:                                               ; preds = %65, %68, %26
  %76 = getelementptr inbounds [13 x i64], [13 x i64]* @above_prediction_mask, i64 0, i64 %29
  %77 = load i64, i64* %76, align 8
  %78 = zext i32 %2 to i64
  %79 = shl i64 %77, %78
  %80 = load i64, i64* %23, align 8
  %81 = or i64 %80, %79
  store i64 %81, i64* %23, align 8
  %82 = getelementptr inbounds [13 x i64], [13 x i64]* @left_prediction_mask, i64 0, i64 %29
  %83 = load i64, i64* %82, align 8
  %84 = shl i64 %83, %78
  %85 = load i64, i64* %22, align 8
  %86 = or i64 %85, %84
  store i64 %86, i64* %22, align 8
  %87 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1, i64 0, i32 3
  %88 = load i8, i8* %87, align 1
  %89 = icmp eq i8 %88, 0
  br i1 %89, label %93, label %90

90:                                               ; preds = %75
  %91 = load i8, i8* %10, align 4
  %92 = icmp slt i8 %91, 1
  br i1 %92, label %93, label %111

93:                                               ; preds = %90, %75
  %94 = getelementptr inbounds [13 x i64], [13 x i64]* @size_mask, i64 0, i64 %29
  %95 = load i64, i64* %94, align 8
  %96 = getelementptr inbounds [4 x i64], [4 x i64]* @above_64x64_txform_mask, i64 0, i64 %21
  %97 = load i64, i64* %96, align 8
  %98 = and i64 %97, %95
  %99 = shl i64 %98, %78
  %100 = or i64 %99, %81
  store i64 %100, i64* %23, align 8
  %101 = getelementptr inbounds [4 x i64], [4 x i64]* @left_64x64_txform_mask, i64 0, i64 %21
  %102 = load i64, i64* %101, align 8
  %103 = and i64 %102, %95
  %104 = shl i64 %103, %78
  %105 = or i64 %104, %86
  store i64 %105, i64* %22, align 8
  %106 = icmp eq i8 %6, 0
  br i1 %106, label %107, label %111

107:                                              ; preds = %93
  %108 = shl i64 %95, %78
  %109 = load i64, i64* %24, align 8
  %110 = or i64 %109, %108
  store i64 %110, i64* %24, align 8
  br label %111

111:                                              ; preds = %93, %107, %90, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_filter_block_plane_non420(%struct.VP9Common*, %struct.macroblockd_plane* nocapture, %struct.MODE_INFO** nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %6 = alloca [8 x i32], align 16
  %7 = alloca [8 x i32], align 16
  %8 = alloca [8 x i32], align 16
  %9 = alloca [8 x i32], align 16
  %10 = alloca [64 x i8], align 16
  %11 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %1, i64 0, i32 1
  %12 = load i32, i32* %11, align 8
  %13 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %1, i64 0, i32 2
  %14 = load i32, i32* %13, align 4
  %15 = shl i32 1, %14
  %16 = shl i32 1, %12
  %17 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 36
  %18 = load i32, i32* %17, align 4
  %19 = shl i32 %18, %14
  %20 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %1, i64 0, i32 3
  %21 = getelementptr inbounds %struct.buf_2d, %struct.buf_2d* %20, i64 0, i32 0
  %22 = bitcast %struct.buf_2d* %20 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = bitcast [8 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %24) #4
  %25 = bitcast [8 x i32]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %25) #4
  %26 = bitcast [8 x i32]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %26) #4
  %27 = bitcast [8 x i32]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %27) #4
  %28 = getelementptr inbounds [64 x i8], [64 x i8]* %10, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %28) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %24, i8 0, i64 32, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %25, i8 0, i64 32, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %26, i8 0, i64 32, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %27, i8 0, i64 32, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %28, i8 0, i64 64, i1 false)
  %29 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 33
  %30 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 35
  %31 = icmp ne i32 %12, 0
  %32 = icmp ne i32 %14, 0
  %33 = icmp eq i32 %4, 0
  %34 = zext i1 %33 to i32
  %35 = xor i32 %34, -1
  %36 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 11
  %37 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %1, i64 0, i32 3, i32 1
  %38 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 80
  %39 = sext i32 %19 to i64
  %40 = sext i32 %16 to i64
  %41 = sext i32 %4 to i64
  %42 = sext i32 %15 to i64
  %43 = sext i32 %3 to i64
  %44 = inttoptr i64 %23 to i8*
  br label %45

45:                                               ; preds = %5, %374
  %46 = phi i8* [ %44, %5 ], [ %379, %374 ]
  %47 = phi i64 [ 0, %5 ], [ %381, %374 ]
  %48 = phi %struct.MODE_INFO** [ %2, %5 ], [ %380, %374 ]
  %49 = add nsw i64 %47, %43
  %50 = load i32, i32* %29, align 16
  %51 = sext i32 %50 to i64
  %52 = icmp slt i64 %49, %51
  br i1 %52, label %53, label %383

53:                                               ; preds = %45
  %54 = add nsw i32 %50, -1
  %55 = trunc i64 %49 to i32
  %56 = icmp eq i32 %54, %55
  %57 = and i1 %32, %56
  %58 = trunc i64 %47 to i32
  %59 = shl i32 %58, 3
  %60 = and i32 %15, %58
  %61 = icmp eq i32 %60, 0
  %62 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 %47
  %63 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 %47
  %64 = ashr i32 %58, %14
  %65 = and i32 %64, 3
  %66 = icmp ne i32 %65, 0
  %67 = icmp eq i32 %65, 0
  %68 = getelementptr inbounds [8 x i32], [8 x i32]* %8, i64 0, i64 %47
  %69 = getelementptr inbounds [8 x i32], [8 x i32]* %9, i64 0, i64 %47
  %70 = load i32, i32* %30, align 8
  %71 = sext i32 %70 to i64
  %72 = add nsw i32 %70, -1
  br label %73

73:                                               ; preds = %53, %235
  %74 = phi i64 [ 0, %53 ], [ %239, %235 ]
  %75 = phi i32 [ 0, %53 ], [ %238, %235 ]
  %76 = phi i32 [ 0, %53 ], [ %237, %235 ]
  %77 = phi i32 [ 0, %53 ], [ %236, %235 ]
  %78 = add nsw i64 %74, %41
  %79 = icmp slt i64 %78, %71
  br i1 %79, label %80, label %241

80:                                               ; preds = %73
  %81 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %48, i64 %74
  %82 = load %struct.MODE_INFO*, %struct.MODE_INFO** %81, align 8
  %83 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %82, i64 0, i32 0
  %84 = load i8, i8* %83, align 4
  %85 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %82, i64 0, i32 3
  %86 = load i8, i8* %85, align 1
  %87 = icmp eq i8 %86, 0
  br i1 %87, label %92, label %88

88:                                               ; preds = %80
  %89 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %82, i64 0, i32 8, i64 0
  %90 = load i8, i8* %89, align 4
  %91 = icmp sgt i8 %90, 0
  br label %92

92:                                               ; preds = %80, %88
  %93 = phi i1 [ false, %80 ], [ %91, %88 ]
  %94 = zext i8 %84 to i64
  %95 = getelementptr inbounds [13 x i8], [13 x i8]* @num_4x4_blocks_wide_lookup, i64 0, i64 %94
  %96 = load i8, i8* %95, align 1
  %97 = icmp ugt i8 %96, 1
  br i1 %97, label %98, label %107

98:                                               ; preds = %92
  %99 = getelementptr inbounds [13 x i8], [13 x i8]* @num_8x8_blocks_wide_lookup, i64 0, i64 %94
  %100 = load i8, i8* %99, align 1
  %101 = zext i8 %100 to i32
  %102 = add nsw i32 %101, -1
  %103 = trunc i64 %74 to i32
  %104 = and i32 %102, %103
  %105 = icmp eq i32 %104, 0
  %106 = zext i1 %105 to i32
  br label %107

107:                                              ; preds = %92, %98
  %108 = phi i32 [ %106, %98 ], [ 1, %92 ]
  %109 = icmp eq i32 %108, 0
  %110 = and i1 %93, %109
  %111 = getelementptr inbounds [13 x i8], [13 x i8]* @num_4x4_blocks_high_lookup, i64 0, i64 %94
  %112 = load i8, i8* %111, align 1
  %113 = icmp ugt i8 %112, 1
  br i1 %113, label %114, label %122

114:                                              ; preds = %107
  %115 = getelementptr inbounds [13 x i8], [13 x i8]* @num_8x8_blocks_high_lookup, i64 0, i64 %94
  %116 = load i8, i8* %115, align 1
  %117 = zext i8 %116 to i32
  %118 = add nsw i32 %117, -1
  %119 = and i32 %118, %58
  %120 = icmp eq i32 %119, 0
  %121 = zext i1 %120 to i32
  br label %122

122:                                              ; preds = %107, %114
  %123 = phi i32 [ %121, %114 ], [ 1, %107 ]
  %124 = icmp eq i32 %123, 0
  %125 = and i1 %93, %124
  %126 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %82, i64 0, i32 2
  %127 = load i8, i8* %126, align 2
  %128 = zext i8 %127 to i64
  %129 = load i32, i32* %11, align 8
  %130 = sext i32 %129 to i64
  %131 = load i32, i32* %13, align 4
  %132 = sext i32 %131 to i64
  %133 = getelementptr inbounds [13 x [4 x [2 x [2 x i8]]]], [13 x [4 x [2 x [2 x i8]]]]* @uv_txsize_lookup, i64 0, i64 %94, i64 %128, i64 %130, i64 %132
  %134 = load i8, i8* %133, align 1
  %135 = trunc i64 %78 to i32
  %136 = icmp eq i32 %72, %135
  %137 = and i1 %31, %136
  %138 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %82, i64 0, i32 4
  %139 = load i8, i8* %138, align 4
  %140 = sext i8 %139 to i64
  %141 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %82, i64 0, i32 8, i64 0
  %142 = load i8, i8* %141, align 4
  %143 = sext i8 %142 to i64
  %144 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %82, i64 0, i32 1
  %145 = load i8, i8* %144, align 1
  %146 = zext i8 %145 to i64
  %147 = getelementptr inbounds [14 x i32], [14 x i32]* @mode_lf_lut, i64 0, i64 %146
  %148 = load i32, i32* %147, align 4
  %149 = sext i32 %148 to i64
  %150 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 65, i32 1, i64 %140, i64 %143, i64 %149
  %151 = load i8, i8* %150, align 1
  %152 = trunc i64 %74 to i32
  %153 = ashr i32 %152, %12
  %154 = add nsw i32 %153, %59
  %155 = sext i32 %154 to i64
  %156 = getelementptr inbounds [64 x i8], [64 x i8]* %10, i64 0, i64 %155
  store i8 %151, i8* %156, align 1
  %157 = icmp eq i8 %151, 0
  br i1 %157, label %235, label %158

158:                                              ; preds = %122
  switch i8 %134, label %206 [
    i8 3, label %159
    i8 2, label %182
  ]

159:                                              ; preds = %158
  %160 = xor i1 %110, true
  %161 = and i32 %153, 3
  %162 = icmp eq i32 %161, 0
  %163 = and i1 %162, %160
  br i1 %163, label %164, label %170

164:                                              ; preds = %159
  %165 = shl i32 1, %153
  br i1 %137, label %168, label %166

166:                                              ; preds = %164
  %167 = or i32 %165, %77
  br label %170

168:                                              ; preds = %164
  %169 = or i32 %76, %165
  br label %170

170:                                              ; preds = %159, %166, %168
  %171 = phi i32 [ %77, %159 ], [ %77, %168 ], [ %167, %166 ]
  %172 = phi i32 [ %76, %159 ], [ %169, %168 ], [ %76, %166 ]
  %173 = or i1 %125, %66
  br i1 %173, label %235, label %174

174:                                              ; preds = %170
  %175 = shl i32 1, %153
  br i1 %57, label %179, label %176

176:                                              ; preds = %174
  %177 = load i32, i32* %62, align 4
  %178 = or i32 %177, %175
  store i32 %178, i32* %62, align 4
  br label %235

179:                                              ; preds = %174
  %180 = load i32, i32* %63, align 4
  %181 = or i32 %180, %175
  store i32 %181, i32* %63, align 4
  br label %235

182:                                              ; preds = %158
  %183 = xor i1 %110, true
  %184 = and i32 %153, 1
  %185 = icmp eq i32 %184, 0
  %186 = and i1 %185, %183
  br i1 %186, label %187, label %193

187:                                              ; preds = %182
  %188 = shl i32 1, %153
  br i1 %137, label %191, label %189

189:                                              ; preds = %187
  %190 = or i32 %188, %77
  br label %193

191:                                              ; preds = %187
  %192 = or i32 %76, %188
  br label %193

193:                                              ; preds = %182, %189, %191
  %194 = phi i32 [ %77, %182 ], [ %77, %191 ], [ %190, %189 ]
  %195 = phi i32 [ %76, %182 ], [ %192, %191 ], [ %76, %189 ]
  %196 = xor i1 %125, true
  %197 = and i1 %61, %196
  br i1 %197, label %198, label %235

198:                                              ; preds = %193
  %199 = shl i32 1, %153
  br i1 %57, label %203, label %200

200:                                              ; preds = %198
  %201 = load i32, i32* %62, align 4
  %202 = or i32 %201, %199
  store i32 %202, i32* %62, align 4
  br label %235

203:                                              ; preds = %198
  %204 = load i32, i32* %63, align 4
  %205 = or i32 %204, %199
  store i32 %205, i32* %63, align 4
  br label %235

206:                                              ; preds = %158
  br i1 %110, label %217, label %207

207:                                              ; preds = %206
  %208 = icmp eq i8 %134, 1
  %209 = and i32 %153, 3
  %210 = icmp eq i32 %209, 0
  %211 = or i1 %210, %208
  %212 = shl i32 1, %153
  br i1 %211, label %213, label %215

213:                                              ; preds = %207
  %214 = or i32 %76, %212
  br label %217

215:                                              ; preds = %207
  %216 = or i32 %75, %212
  br label %217

217:                                              ; preds = %213, %215, %206
  %218 = phi i32 [ %76, %206 ], [ %214, %213 ], [ %76, %215 ]
  %219 = phi i32 [ %75, %206 ], [ %75, %213 ], [ %216, %215 ]
  br i1 %125, label %227, label %220

220:                                              ; preds = %217
  %221 = icmp eq i8 %134, 1
  %222 = or i1 %221, %67
  %223 = shl i32 1, %153
  %224 = select i1 %222, i32* %63, i32* %68
  %225 = load i32, i32* %224, align 4
  %226 = or i32 %225, %223
  store i32 %226, i32* %224, align 4
  br label %227

227:                                              ; preds = %220, %217
  %228 = icmp ne i8 %134, 0
  %229 = or i1 %137, %228
  %230 = or i1 %93, %229
  br i1 %230, label %235, label %231

231:                                              ; preds = %227
  %232 = shl i32 1, %153
  %233 = load i32, i32* %69, align 4
  %234 = or i32 %233, %232
  store i32 %234, i32* %69, align 4
  br label %235

235:                                              ; preds = %170, %193, %176, %179, %227, %231, %203, %200, %122
  %236 = phi i32 [ %77, %122 ], [ %171, %170 ], [ %171, %179 ], [ %171, %176 ], [ %194, %193 ], [ %194, %203 ], [ %194, %200 ], [ %77, %227 ], [ %77, %231 ]
  %237 = phi i32 [ %76, %122 ], [ %172, %170 ], [ %172, %179 ], [ %172, %176 ], [ %195, %193 ], [ %195, %203 ], [ %195, %200 ], [ %218, %227 ], [ %218, %231 ]
  %238 = phi i32 [ %75, %122 ], [ %75, %170 ], [ %75, %179 ], [ %75, %176 ], [ %75, %193 ], [ %75, %203 ], [ %75, %200 ], [ %219, %227 ], [ %219, %231 ]
  %239 = add i64 %74, %40
  %240 = icmp slt i64 %239, 8
  br i1 %240, label %73, label %241

241:                                              ; preds = %235, %73
  %242 = phi i32 [ %236, %235 ], [ %77, %73 ]
  %243 = phi i32 [ %237, %235 ], [ %76, %73 ]
  %244 = phi i32 [ %238, %235 ], [ %75, %73 ]
  %245 = load i32, i32* %36, align 16
  %246 = icmp eq i32 %245, 0
  %247 = load i32, i32* %37, align 8
  %248 = and i32 %242, %35
  %249 = and i32 %243, %35
  %250 = and i32 %244, %35
  %251 = load i32, i32* %69, align 4
  br i1 %246, label %315, label %252

252:                                              ; preds = %241
  %253 = load i32, i32* %38, align 16
  %254 = or i32 %249, %248
  %255 = or i32 %254, %250
  %256 = or i32 %255, %251
  %257 = icmp eq i32 %256, 0
  br i1 %257, label %374, label %258

258:                                              ; preds = %252
  %259 = sext i32 %59 to i64
  %260 = getelementptr inbounds [64 x i8], [64 x i8]* %10, i64 0, i64 %259
  %261 = ptrtoint i8* %46 to i64
  %262 = shl i64 %261, 1
  %263 = inttoptr i64 %262 to i16*
  br label %264

264:                                              ; preds = %258, %306
  %265 = phi i32 [ %313, %306 ], [ %256, %258 ]
  %266 = phi i16* [ %307, %306 ], [ %263, %258 ]
  %267 = phi i8* [ %308, %306 ], [ %260, %258 ]
  %268 = phi i32 [ %309, %306 ], [ %248, %258 ]
  %269 = phi i32 [ %312, %306 ], [ %251, %258 ]
  %270 = phi i32 [ %311, %306 ], [ %250, %258 ]
  %271 = phi i32 [ %310, %306 ], [ %249, %258 ]
  %272 = load i8, i8* %267, align 1
  %273 = zext i8 %272 to i64
  %274 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 65, i32 0, i64 %273
  %275 = and i32 %265, 1
  %276 = icmp eq i32 %275, 0
  br i1 %276, label %298, label %277

277:                                              ; preds = %264
  %278 = and i32 %268, 1
  %279 = icmp eq i32 %278, 0
  br i1 %279, label %284, label %280

280:                                              ; preds = %277
  %281 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %274, i64 0, i32 0, i64 0
  %282 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 65, i32 0, i64 %273, i32 1, i64 0
  %283 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 65, i32 0, i64 %273, i32 2, i64 0
  tail call void @vpx_highbd_lpf_vertical_16_sse2(i16* %266, i32 %247, i8* %281, i8* %282, i8* %283, i32 %253) #4
  br label %298

284:                                              ; preds = %277
  %285 = and i32 %271, 1
  %286 = icmp eq i32 %285, 0
  br i1 %286, label %291, label %287

287:                                              ; preds = %284
  %288 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %274, i64 0, i32 0, i64 0
  %289 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 65, i32 0, i64 %273, i32 1, i64 0
  %290 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 65, i32 0, i64 %273, i32 2, i64 0
  tail call void @vpx_highbd_lpf_vertical_8_sse2(i16* %266, i32 %247, i8* %288, i8* %289, i8* %290, i32 %253) #4
  br label %298

291:                                              ; preds = %284
  %292 = and i32 %270, 1
  %293 = icmp eq i32 %292, 0
  br i1 %293, label %298, label %294

294:                                              ; preds = %291
  %295 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %274, i64 0, i32 0, i64 0
  %296 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 65, i32 0, i64 %273, i32 1, i64 0
  %297 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 65, i32 0, i64 %273, i32 2, i64 0
  tail call void @vpx_highbd_lpf_vertical_4_sse2(i16* %266, i32 %247, i8* %295, i8* %296, i8* %297, i32 %253) #4
  br label %298

298:                                              ; preds = %294, %291, %287, %280, %264
  %299 = and i32 %269, 1
  %300 = icmp eq i32 %299, 0
  br i1 %300, label %306, label %301

301:                                              ; preds = %298
  %302 = getelementptr inbounds i16, i16* %266, i64 4
  %303 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %274, i64 0, i32 0, i64 0
  %304 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 65, i32 0, i64 %273, i32 1, i64 0
  %305 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 65, i32 0, i64 %273, i32 2, i64 0
  tail call void @vpx_highbd_lpf_vertical_4_sse2(i16* %302, i32 %247, i8* %303, i8* %304, i8* %305, i32 %253) #4
  br label %306

306:                                              ; preds = %301, %298
  %307 = getelementptr inbounds i16, i16* %266, i64 8
  %308 = getelementptr inbounds i8, i8* %267, i64 1
  %309 = lshr i32 %268, 1
  %310 = lshr i32 %271, 1
  %311 = lshr i32 %270, 1
  %312 = lshr i32 %269, 1
  %313 = lshr i32 %265, 1
  %314 = icmp eq i32 %313, 0
  br i1 %314, label %374, label %264

315:                                              ; preds = %241
  %316 = or i32 %249, %248
  %317 = or i32 %316, %250
  %318 = or i32 %317, %251
  %319 = icmp eq i32 %318, 0
  br i1 %319, label %374, label %320

320:                                              ; preds = %315
  %321 = sext i32 %59 to i64
  %322 = getelementptr inbounds [64 x i8], [64 x i8]* %10, i64 0, i64 %321
  br label %323

323:                                              ; preds = %320, %365
  %324 = phi i32 [ %372, %365 ], [ %318, %320 ]
  %325 = phi i8* [ %367, %365 ], [ %322, %320 ]
  %326 = phi i8* [ %366, %365 ], [ %46, %320 ]
  %327 = phi i32 [ %371, %365 ], [ %251, %320 ]
  %328 = phi i32 [ %370, %365 ], [ %250, %320 ]
  %329 = phi i32 [ %369, %365 ], [ %249, %320 ]
  %330 = phi i32 [ %368, %365 ], [ %248, %320 ]
  %331 = load i8, i8* %325, align 1
  %332 = zext i8 %331 to i64
  %333 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 65, i32 0, i64 %332
  %334 = and i32 %324, 1
  %335 = icmp eq i32 %334, 0
  br i1 %335, label %357, label %336

336:                                              ; preds = %323
  %337 = and i32 %330, 1
  %338 = icmp eq i32 %337, 0
  br i1 %338, label %343, label %339

339:                                              ; preds = %336
  %340 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %333, i64 0, i32 0, i64 0
  %341 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 65, i32 0, i64 %332, i32 1, i64 0
  %342 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 65, i32 0, i64 %332, i32 2, i64 0
  tail call void @vpx_lpf_vertical_16_sse2(i8* %326, i32 %247, i8* %340, i8* %341, i8* %342) #4
  br label %357

343:                                              ; preds = %336
  %344 = and i32 %329, 1
  %345 = icmp eq i32 %344, 0
  br i1 %345, label %350, label %346

346:                                              ; preds = %343
  %347 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %333, i64 0, i32 0, i64 0
  %348 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 65, i32 0, i64 %332, i32 1, i64 0
  %349 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 65, i32 0, i64 %332, i32 2, i64 0
  tail call void @vpx_lpf_vertical_8_sse2(i8* %326, i32 %247, i8* %347, i8* %348, i8* %349) #4
  br label %357

350:                                              ; preds = %343
  %351 = and i32 %328, 1
  %352 = icmp eq i32 %351, 0
  br i1 %352, label %357, label %353

353:                                              ; preds = %350
  %354 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %333, i64 0, i32 0, i64 0
  %355 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 65, i32 0, i64 %332, i32 1, i64 0
  %356 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 65, i32 0, i64 %332, i32 2, i64 0
  tail call void @vpx_lpf_vertical_4_sse2(i8* %326, i32 %247, i8* %354, i8* %355, i8* %356) #4
  br label %357

357:                                              ; preds = %353, %350, %346, %339, %323
  %358 = and i32 %327, 1
  %359 = icmp eq i32 %358, 0
  br i1 %359, label %365, label %360

360:                                              ; preds = %357
  %361 = getelementptr inbounds i8, i8* %326, i64 4
  %362 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %333, i64 0, i32 0, i64 0
  %363 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 65, i32 0, i64 %332, i32 1, i64 0
  %364 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 65, i32 0, i64 %332, i32 2, i64 0
  tail call void @vpx_lpf_vertical_4_sse2(i8* %361, i32 %247, i8* %362, i8* %363, i8* %364) #4
  br label %365

365:                                              ; preds = %360, %357
  %366 = getelementptr inbounds i8, i8* %326, i64 8
  %367 = getelementptr inbounds i8, i8* %325, i64 1
  %368 = lshr i32 %330, 1
  %369 = lshr i32 %329, 1
  %370 = lshr i32 %328, 1
  %371 = lshr i32 %327, 1
  %372 = lshr i32 %324, 1
  %373 = icmp eq i32 %372, 0
  br i1 %373, label %374, label %323

374:                                              ; preds = %306, %365, %315, %252
  %375 = load i32, i32* %37, align 8
  %376 = shl nsw i32 %375, 3
  %377 = load i8*, i8** %21, align 8
  %378 = sext i32 %376 to i64
  %379 = getelementptr inbounds i8, i8* %377, i64 %378
  store i8* %379, i8** %21, align 8
  %380 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %48, i64 %39
  %381 = add i64 %47, %42
  %382 = icmp slt i64 %381, 8
  br i1 %382, label %45, label %383

383:                                              ; preds = %374, %45
  store i64 %23, i64* %22, align 8
  %384 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 65, i32 0, i64 0
  br label %385

385:                                              ; preds = %383, %432
  %386 = phi i8* [ %44, %383 ], [ %437, %432 ]
  %387 = phi i64 [ 0, %383 ], [ %438, %432 ]
  %388 = add nsw i64 %387, %43
  %389 = load i32, i32* %29, align 16
  %390 = sext i32 %389 to i64
  %391 = icmp slt i64 %388, %390
  br i1 %391, label %392, label %440

392:                                              ; preds = %385
  %393 = add nsw i32 %389, -1
  %394 = trunc i64 %388 to i32
  %395 = icmp eq i32 %393, %394
  %396 = and i1 %32, %395
  br i1 %396, label %400, label %397

397:                                              ; preds = %392
  %398 = getelementptr inbounds [8 x i32], [8 x i32]* %9, i64 0, i64 %387
  %399 = load i32, i32* %398, align 4
  br label %400

400:                                              ; preds = %392, %397
  %401 = phi i32 [ %399, %397 ], [ 0, %392 ]
  %402 = icmp eq i32 %394, 0
  br i1 %402, label %410, label %403

403:                                              ; preds = %400
  %404 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 %387
  %405 = load i32, i32* %404, align 4
  %406 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 %387
  %407 = load i32, i32* %406, align 4
  %408 = getelementptr inbounds [8 x i32], [8 x i32]* %8, i64 0, i64 %387
  %409 = load i32, i32* %408, align 4
  br label %410

410:                                              ; preds = %400, %403
  %411 = phi i32 [ %405, %403 ], [ 0, %400 ]
  %412 = phi i32 [ %407, %403 ], [ 0, %400 ]
  %413 = phi i32 [ %409, %403 ], [ 0, %400 ]
  %414 = load i32, i32* %36, align 16
  %415 = icmp eq i32 %414, 0
  br i1 %415, label %426, label %416

416:                                              ; preds = %410
  %417 = ptrtoint i8* %386 to i64
  %418 = shl i64 %417, 1
  %419 = inttoptr i64 %418 to i16*
  %420 = load i32, i32* %37, align 8
  %421 = trunc i64 %387 to i32
  %422 = shl i32 %421, 3
  %423 = sext i32 %422 to i64
  %424 = getelementptr inbounds [64 x i8], [64 x i8]* %10, i64 0, i64 %423
  %425 = load i32, i32* %38, align 16
  call fastcc void @highbd_filter_selectively_horiz(i16* %419, i32 %420, i32 %411, i32 %412, i32 %413, i32 %401, %struct.loop_filter_thresh* %384, i8* %424, i32 %425)
  br label %432

426:                                              ; preds = %410
  %427 = load i32, i32* %37, align 8
  %428 = trunc i64 %387 to i32
  %429 = shl i32 %428, 3
  %430 = sext i32 %429 to i64
  %431 = getelementptr inbounds [64 x i8], [64 x i8]* %10, i64 0, i64 %430
  call fastcc void @filter_selectively_horiz(i8* %386, i32 %427, i32 %411, i32 %412, i32 %413, i32 %401, %struct.loop_filter_thresh* %384, i8* %431)
  br label %432

432:                                              ; preds = %426, %416
  %433 = load i32, i32* %37, align 8
  %434 = shl nsw i32 %433, 3
  %435 = load i8*, i8** %21, align 8
  %436 = sext i32 %434 to i64
  %437 = getelementptr inbounds i8, i8* %435, i64 %436
  store i8* %437, i8** %21, align 8
  %438 = add i64 %387, %42
  %439 = icmp slt i64 %438, 8
  br i1 %439, label %385, label %440

440:                                              ; preds = %432, %385
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %28) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %27) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %26) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %25) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %24) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @highbd_filter_selectively_horiz(i16*, i32, i32, i32, i32, i32, %struct.loop_filter_thresh*, i8* nocapture readonly, i32) unnamed_addr #0 {
  %10 = or i32 %3, %2
  %11 = or i32 %10, %4
  %12 = or i32 %11, %5
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %137, label %14

14:                                               ; preds = %9
  %15 = shl nsw i32 %1, 2
  %16 = sext i32 %15 to i64
  br label %17

17:                                               ; preds = %14, %124
  %18 = phi i32 [ %12, %14 ], [ %135, %124 ]
  %19 = phi i16* [ %0, %14 ], [ %128, %124 ]
  %20 = phi i8* [ %7, %14 ], [ %130, %124 ]
  %21 = phi i32 [ %2, %14 ], [ %131, %124 ]
  %22 = phi i32 [ %5, %14 ], [ %134, %124 ]
  %23 = phi i32 [ %4, %14 ], [ %133, %124 ]
  %24 = phi i32 [ %3, %14 ], [ %132, %124 ]
  %25 = and i32 %18, 1
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %124, label %27

27:                                               ; preds = %17
  %28 = load i8, i8* %20, align 1
  %29 = zext i8 %28 to i64
  %30 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %6, i64 %29
  %31 = and i32 %21, 1
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %41, label %33

33:                                               ; preds = %27
  %34 = and i32 %21, 3
  %35 = icmp eq i32 %34, 3
  %36 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %30, i64 0, i32 0, i64 0
  %37 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %6, i64 %29, i32 1, i64 0
  %38 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %6, i64 %29, i32 2, i64 0
  br i1 %35, label %39, label %40

39:                                               ; preds = %33
  tail call void @vpx_highbd_lpf_horizontal_16_dual_sse2(i16* %19, i32 %1, i8* %36, i8* %37, i8* %38, i32 %8) #4
  br label %124

40:                                               ; preds = %33
  tail call void @vpx_highbd_lpf_horizontal_16_sse2(i16* %19, i32 %1, i8* %36, i8* %37, i8* %38, i32 %8) #4
  br label %124

41:                                               ; preds = %27
  %42 = and i32 %24, 1
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %80, label %44

44:                                               ; preds = %41
  %45 = and i32 %24, 3
  %46 = icmp eq i32 %45, 3
  br i1 %46, label %47, label %72

47:                                               ; preds = %44
  %48 = getelementptr inbounds i8, i8* %20, i64 1
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i64
  %51 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %30, i64 0, i32 0, i64 0
  %52 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %6, i64 %29, i32 1, i64 0
  %53 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %6, i64 %29, i32 2, i64 0
  %54 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %6, i64 %50, i32 0, i64 0
  %55 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %6, i64 %50, i32 1, i64 0
  %56 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %6, i64 %50, i32 2, i64 0
  tail call void @vpx_highbd_lpf_horizontal_8_dual_sse2(i16* %19, i32 %1, i8* %51, i8* %52, i8* %53, i8* %54, i8* %55, i8* %56, i32 %8) #4
  %57 = and i32 %22, 3
  %58 = icmp eq i32 %57, 3
  br i1 %58, label %59, label %61

59:                                               ; preds = %47
  %60 = getelementptr inbounds i16, i16* %19, i64 %16
  tail call void @vpx_highbd_lpf_horizontal_4_dual_sse2(i16* %60, i32 %1, i8* %51, i8* %52, i8* %53, i8* %54, i8* %55, i8* %56, i32 %8) #4
  br label %124

61:                                               ; preds = %47
  %62 = and i32 %22, 1
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %66, label %64

64:                                               ; preds = %61
  %65 = getelementptr inbounds i16, i16* %19, i64 %16
  tail call void @vpx_highbd_lpf_horizontal_4_sse2(i16* %65, i32 %1, i8* %51, i8* %52, i8* %53, i32 %8) #4
  br label %124

66:                                               ; preds = %61
  %67 = and i32 %22, 2
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %124, label %69

69:                                               ; preds = %66
  %70 = getelementptr inbounds i16, i16* %19, i64 8
  %71 = getelementptr inbounds i16, i16* %70, i64 %16
  tail call void @vpx_highbd_lpf_horizontal_4_sse2(i16* %71, i32 %1, i8* %54, i8* %55, i8* %56, i32 %8) #4
  br label %124

72:                                               ; preds = %44
  %73 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %30, i64 0, i32 0, i64 0
  %74 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %6, i64 %29, i32 1, i64 0
  %75 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %6, i64 %29, i32 2, i64 0
  tail call void @vpx_highbd_lpf_horizontal_8_sse2(i16* %19, i32 %1, i8* %73, i8* %74, i8* %75, i32 %8) #4
  %76 = and i32 %22, 1
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %124, label %78

78:                                               ; preds = %72
  %79 = getelementptr inbounds i16, i16* %19, i64 %16
  tail call void @vpx_highbd_lpf_horizontal_4_sse2(i16* %79, i32 %1, i8* %73, i8* %74, i8* %75, i32 %8) #4
  br label %124

80:                                               ; preds = %41
  %81 = and i32 %23, 1
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %119, label %83

83:                                               ; preds = %80
  %84 = and i32 %23, 3
  %85 = icmp eq i32 %84, 3
  br i1 %85, label %86, label %111

86:                                               ; preds = %83
  %87 = getelementptr inbounds i8, i8* %20, i64 1
  %88 = load i8, i8* %87, align 1
  %89 = zext i8 %88 to i64
  %90 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %30, i64 0, i32 0, i64 0
  %91 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %6, i64 %29, i32 1, i64 0
  %92 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %6, i64 %29, i32 2, i64 0
  %93 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %6, i64 %89, i32 0, i64 0
  %94 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %6, i64 %89, i32 1, i64 0
  %95 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %6, i64 %89, i32 2, i64 0
  tail call void @vpx_highbd_lpf_horizontal_4_dual_sse2(i16* %19, i32 %1, i8* %90, i8* %91, i8* %92, i8* %93, i8* %94, i8* %95, i32 %8) #4
  %96 = and i32 %22, 3
  %97 = icmp eq i32 %96, 3
  br i1 %97, label %98, label %100

98:                                               ; preds = %86
  %99 = getelementptr inbounds i16, i16* %19, i64 %16
  tail call void @vpx_highbd_lpf_horizontal_4_dual_sse2(i16* %99, i32 %1, i8* %90, i8* %91, i8* %92, i8* %93, i8* %94, i8* %95, i32 %8) #4
  br label %124

100:                                              ; preds = %86
  %101 = and i32 %22, 1
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %105, label %103

103:                                              ; preds = %100
  %104 = getelementptr inbounds i16, i16* %19, i64 %16
  tail call void @vpx_highbd_lpf_horizontal_4_sse2(i16* %104, i32 %1, i8* %90, i8* %91, i8* %92, i32 %8) #4
  br label %124

105:                                              ; preds = %100
  %106 = and i32 %22, 2
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %124, label %108

108:                                              ; preds = %105
  %109 = getelementptr inbounds i16, i16* %19, i64 8
  %110 = getelementptr inbounds i16, i16* %109, i64 %16
  tail call void @vpx_highbd_lpf_horizontal_4_sse2(i16* %110, i32 %1, i8* %93, i8* %94, i8* %95, i32 %8) #4
  br label %124

111:                                              ; preds = %83
  %112 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %30, i64 0, i32 0, i64 0
  %113 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %6, i64 %29, i32 1, i64 0
  %114 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %6, i64 %29, i32 2, i64 0
  tail call void @vpx_highbd_lpf_horizontal_4_sse2(i16* %19, i32 %1, i8* %112, i8* %113, i8* %114, i32 %8) #4
  %115 = and i32 %22, 1
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %124, label %117

117:                                              ; preds = %111
  %118 = getelementptr inbounds i16, i16* %19, i64 %16
  tail call void @vpx_highbd_lpf_horizontal_4_sse2(i16* %118, i32 %1, i8* %112, i8* %113, i8* %114, i32 %8) #4
  br label %124

119:                                              ; preds = %80
  %120 = getelementptr inbounds i16, i16* %19, i64 %16
  %121 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %30, i64 0, i32 0, i64 0
  %122 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %6, i64 %29, i32 1, i64 0
  %123 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %6, i64 %29, i32 2, i64 0
  tail call void @vpx_highbd_lpf_horizontal_4_sse2(i16* %120, i32 %1, i8* %121, i8* %122, i8* %123, i32 %8) #4
  br label %124

124:                                              ; preds = %40, %39, %119, %117, %78, %111, %72, %66, %64, %69, %59, %105, %103, %108, %98, %17
  %125 = phi i32 [ 1, %17 ], [ 2, %39 ], [ 1, %40 ], [ 1, %78 ], [ 1, %72 ], [ 1, %117 ], [ 1, %111 ], [ 1, %119 ], [ 2, %66 ], [ 2, %64 ], [ 2, %69 ], [ 2, %59 ], [ 2, %105 ], [ 2, %103 ], [ 2, %108 ], [ 2, %98 ]
  %126 = shl nuw nsw i32 %125, 3
  %127 = zext i32 %126 to i64
  %128 = getelementptr inbounds i16, i16* %19, i64 %127
  %129 = zext i32 %125 to i64
  %130 = getelementptr inbounds i8, i8* %20, i64 %129
  %131 = lshr i32 %21, %125
  %132 = lshr i32 %24, %125
  %133 = lshr i32 %23, %125
  %134 = lshr i32 %22, %125
  %135 = lshr i32 %18, %125
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %137, label %17

137:                                              ; preds = %124, %9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @filter_selectively_horiz(i8*, i32, i32, i32, i32, i32, %struct.loop_filter_thresh*, i8* nocapture readonly) unnamed_addr #0 {
  %9 = or i32 %3, %2
  %10 = or i32 %9, %4
  %11 = or i32 %10, %5
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %141, label %13

13:                                               ; preds = %8
  %14 = shl nsw i32 %1, 2
  %15 = sext i32 %14 to i64
  br label %16

16:                                               ; preds = %13, %128
  %17 = phi i32 [ %11, %13 ], [ %139, %128 ]
  %18 = phi i8* [ %7, %13 ], [ %134, %128 ]
  %19 = phi i8* [ %0, %13 ], [ %132, %128 ]
  %20 = phi i32 [ %5, %13 ], [ %138, %128 ]
  %21 = phi i32 [ %4, %13 ], [ %137, %128 ]
  %22 = phi i32 [ %3, %13 ], [ %136, %128 ]
  %23 = phi i32 [ %2, %13 ], [ %135, %128 ]
  %24 = and i32 %17, 1
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %128, label %26

26:                                               ; preds = %16
  %27 = load i8, i8* %18, align 1
  %28 = zext i8 %27 to i64
  %29 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %6, i64 %28
  %30 = and i32 %23, 1
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %45, label %32

32:                                               ; preds = %26
  %33 = and i32 %23, 3
  %34 = icmp eq i32 %33, 3
  br i1 %34, label %35, label %40

35:                                               ; preds = %32
  %36 = load void (i8*, i32, i8*, i8*, i8*)*, void (i8*, i32, i8*, i8*, i8*)** @vpx_lpf_horizontal_16_dual, align 8
  %37 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %29, i64 0, i32 0, i64 0
  %38 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %6, i64 %28, i32 1, i64 0
  %39 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %6, i64 %28, i32 2, i64 0
  tail call void %36(i8* %19, i32 %1, i8* %37, i8* %38, i8* %39) #4
  br label %128

40:                                               ; preds = %32
  %41 = load void (i8*, i32, i8*, i8*, i8*)*, void (i8*, i32, i8*, i8*, i8*)** @vpx_lpf_horizontal_16, align 8
  %42 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %29, i64 0, i32 0, i64 0
  %43 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %6, i64 %28, i32 1, i64 0
  %44 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %6, i64 %28, i32 2, i64 0
  tail call void %41(i8* %19, i32 %1, i8* %42, i8* %43, i8* %44) #4
  br label %128

45:                                               ; preds = %26
  %46 = and i32 %22, 1
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %84, label %48

48:                                               ; preds = %45
  %49 = and i32 %22, 3
  %50 = icmp eq i32 %49, 3
  br i1 %50, label %51, label %76

51:                                               ; preds = %48
  %52 = getelementptr inbounds i8, i8* %18, i64 1
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i64
  %55 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %29, i64 0, i32 0, i64 0
  %56 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %6, i64 %28, i32 1, i64 0
  %57 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %6, i64 %28, i32 2, i64 0
  %58 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %6, i64 %54, i32 0, i64 0
  %59 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %6, i64 %54, i32 1, i64 0
  %60 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %6, i64 %54, i32 2, i64 0
  tail call void @vpx_lpf_horizontal_8_dual_sse2(i8* %19, i32 %1, i8* %55, i8* %56, i8* %57, i8* %58, i8* %59, i8* %60) #4
  %61 = and i32 %20, 3
  %62 = icmp eq i32 %61, 3
  br i1 %62, label %63, label %65

63:                                               ; preds = %51
  %64 = getelementptr inbounds i8, i8* %19, i64 %15
  tail call void @vpx_lpf_horizontal_4_dual_sse2(i8* %64, i32 %1, i8* %55, i8* %56, i8* %57, i8* %58, i8* %59, i8* %60) #4
  br label %128

65:                                               ; preds = %51
  %66 = and i32 %20, 1
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %70, label %68

68:                                               ; preds = %65
  %69 = getelementptr inbounds i8, i8* %19, i64 %15
  tail call void @vpx_lpf_horizontal_4_sse2(i8* %69, i32 %1, i8* %55, i8* %56, i8* %57) #4
  br label %128

70:                                               ; preds = %65
  %71 = and i32 %20, 2
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %128, label %73

73:                                               ; preds = %70
  %74 = getelementptr inbounds i8, i8* %19, i64 8
  %75 = getelementptr inbounds i8, i8* %74, i64 %15
  tail call void @vpx_lpf_horizontal_4_sse2(i8* %75, i32 %1, i8* %58, i8* %59, i8* %60) #4
  br label %128

76:                                               ; preds = %48
  %77 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %29, i64 0, i32 0, i64 0
  %78 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %6, i64 %28, i32 1, i64 0
  %79 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %6, i64 %28, i32 2, i64 0
  tail call void @vpx_lpf_horizontal_8_sse2(i8* %19, i32 %1, i8* %77, i8* %78, i8* %79) #4
  %80 = and i32 %20, 1
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %128, label %82

82:                                               ; preds = %76
  %83 = getelementptr inbounds i8, i8* %19, i64 %15
  tail call void @vpx_lpf_horizontal_4_sse2(i8* %83, i32 %1, i8* %77, i8* %78, i8* %79) #4
  br label %128

84:                                               ; preds = %45
  %85 = and i32 %21, 1
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %123, label %87

87:                                               ; preds = %84
  %88 = and i32 %21, 3
  %89 = icmp eq i32 %88, 3
  br i1 %89, label %90, label %115

90:                                               ; preds = %87
  %91 = getelementptr inbounds i8, i8* %18, i64 1
  %92 = load i8, i8* %91, align 1
  %93 = zext i8 %92 to i64
  %94 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %29, i64 0, i32 0, i64 0
  %95 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %6, i64 %28, i32 1, i64 0
  %96 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %6, i64 %28, i32 2, i64 0
  %97 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %6, i64 %93, i32 0, i64 0
  %98 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %6, i64 %93, i32 1, i64 0
  %99 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %6, i64 %93, i32 2, i64 0
  tail call void @vpx_lpf_horizontal_4_dual_sse2(i8* %19, i32 %1, i8* %94, i8* %95, i8* %96, i8* %97, i8* %98, i8* %99) #4
  %100 = and i32 %20, 3
  %101 = icmp eq i32 %100, 3
  br i1 %101, label %102, label %104

102:                                              ; preds = %90
  %103 = getelementptr inbounds i8, i8* %19, i64 %15
  tail call void @vpx_lpf_horizontal_4_dual_sse2(i8* %103, i32 %1, i8* %94, i8* %95, i8* %96, i8* %97, i8* %98, i8* %99) #4
  br label %128

104:                                              ; preds = %90
  %105 = and i32 %20, 1
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %109, label %107

107:                                              ; preds = %104
  %108 = getelementptr inbounds i8, i8* %19, i64 %15
  tail call void @vpx_lpf_horizontal_4_sse2(i8* %108, i32 %1, i8* %94, i8* %95, i8* %96) #4
  br label %128

109:                                              ; preds = %104
  %110 = and i32 %20, 2
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %128, label %112

112:                                              ; preds = %109
  %113 = getelementptr inbounds i8, i8* %19, i64 8
  %114 = getelementptr inbounds i8, i8* %113, i64 %15
  tail call void @vpx_lpf_horizontal_4_sse2(i8* %114, i32 %1, i8* %97, i8* %98, i8* %99) #4
  br label %128

115:                                              ; preds = %87
  %116 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %29, i64 0, i32 0, i64 0
  %117 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %6, i64 %28, i32 1, i64 0
  %118 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %6, i64 %28, i32 2, i64 0
  tail call void @vpx_lpf_horizontal_4_sse2(i8* %19, i32 %1, i8* %116, i8* %117, i8* %118) #4
  %119 = and i32 %20, 1
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %128, label %121

121:                                              ; preds = %115
  %122 = getelementptr inbounds i8, i8* %19, i64 %15
  tail call void @vpx_lpf_horizontal_4_sse2(i8* %122, i32 %1, i8* %116, i8* %117, i8* %118) #4
  br label %128

123:                                              ; preds = %84
  %124 = getelementptr inbounds i8, i8* %19, i64 %15
  %125 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %29, i64 0, i32 0, i64 0
  %126 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %6, i64 %28, i32 1, i64 0
  %127 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %6, i64 %28, i32 2, i64 0
  tail call void @vpx_lpf_horizontal_4_sse2(i8* %124, i32 %1, i8* %125, i8* %126, i8* %127) #4
  br label %128

128:                                              ; preds = %40, %35, %123, %121, %82, %115, %76, %70, %68, %73, %63, %109, %107, %112, %102, %16
  %129 = phi i32 [ 1, %16 ], [ 2, %35 ], [ 1, %40 ], [ 1, %82 ], [ 1, %76 ], [ 1, %121 ], [ 1, %115 ], [ 1, %123 ], [ 2, %70 ], [ 2, %68 ], [ 2, %73 ], [ 2, %63 ], [ 2, %109 ], [ 2, %107 ], [ 2, %112 ], [ 2, %102 ]
  %130 = shl nuw nsw i32 %129, 3
  %131 = zext i32 %130 to i64
  %132 = getelementptr inbounds i8, i8* %19, i64 %131
  %133 = zext i32 %129 to i64
  %134 = getelementptr inbounds i8, i8* %18, i64 %133
  %135 = lshr i32 %23, %129
  %136 = lshr i32 %22, %129
  %137 = lshr i32 %21, %129
  %138 = lshr i32 %20, %129
  %139 = lshr i32 %17, %129
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %141, label %16

141:                                              ; preds = %128, %8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_filter_block_plane_ss00(%struct.VP9Common*, %struct.macroblockd_plane* nocapture, i32, %struct.LOOP_FILTER_MASK* nocapture readonly) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %1, i64 0, i32 3
  %6 = getelementptr inbounds %struct.buf_2d, %struct.buf_2d* %5, i64 0, i32 0
  %7 = bitcast %struct.buf_2d* %5 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 0, i64 2
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 0, i64 1
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 0, i64 0
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 2
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 33
  %18 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 11
  %19 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %1, i64 0, i32 1
  %20 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %1, i64 0, i32 3, i32 1
  %21 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 65, i32 0, i64 0
  %22 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 80
  %23 = sext i32 %2 to i64
  %24 = inttoptr i64 %8 to i8*
  br label %25

25:                                               ; preds = %4, %60
  %26 = phi i8* [ %24, %4 ], [ %65, %60 ]
  %27 = phi i64 [ 0, %4 ], [ %70, %60 ]
  %28 = phi i64 [ %16, %4 ], [ %69, %60 ]
  %29 = phi i64 [ %14, %4 ], [ %68, %60 ]
  %30 = phi i64 [ %12, %4 ], [ %67, %60 ]
  %31 = phi i64 [ %10, %4 ], [ %66, %60 ]
  %32 = add nsw i64 %27, %23
  %33 = load i32, i32* %17, align 16
  %34 = sext i32 %33 to i64
  %35 = icmp slt i64 %32, %34
  br i1 %35, label %36, label %72

36:                                               ; preds = %25
  %37 = load i32, i32* %18, align 16
  %38 = icmp eq i32 %37, 0
  %39 = load i32, i32* %19, align 8
  br i1 %38, label %52, label %40

40:                                               ; preds = %36
  %41 = ptrtoint i8* %26 to i64
  %42 = shl i64 %41, 1
  %43 = inttoptr i64 %42 to i16*
  %44 = load i32, i32* %20, align 8
  %45 = trunc i64 %31 to i32
  %46 = trunc i64 %30 to i32
  %47 = trunc i64 %29 to i32
  %48 = trunc i64 %28 to i32
  %49 = shl i64 %27, 3
  %50 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 6, i64 %49
  %51 = load i32, i32* %22, align 16
  tail call fastcc void @highbd_filter_selectively_vert_row2(i32 %39, i16* %43, i32 %44, i32 %45, i32 %46, i32 %47, i32 %48, %struct.loop_filter_thresh* %21, i8* %50, i32 %51)
  br label %60

52:                                               ; preds = %36
  %53 = load i32, i32* %20, align 8
  %54 = trunc i64 %31 to i32
  %55 = trunc i64 %30 to i32
  %56 = trunc i64 %29 to i32
  %57 = trunc i64 %28 to i32
  %58 = shl i64 %27, 3
  %59 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 6, i64 %58
  tail call fastcc void @filter_selectively_vert_row2(i32 %39, i8* %26, i32 %53, i32 %54, i32 %55, i32 %56, i32 %57, %struct.loop_filter_thresh* %21, i8* %59)
  br label %60

60:                                               ; preds = %52, %40
  %61 = load i32, i32* %20, align 8
  %62 = shl nsw i32 %61, 4
  %63 = load i8*, i8** %6, align 8
  %64 = sext i32 %62 to i64
  %65 = getelementptr inbounds i8, i8* %63, i64 %64
  store i8* %65, i8** %6, align 8
  %66 = lshr i64 %31, 16
  %67 = lshr i64 %30, 16
  %68 = lshr i64 %29, 16
  %69 = lshr i64 %28, 16
  %70 = add nuw nsw i64 %27, 2
  %71 = icmp ult i64 %70, 8
  br i1 %71, label %25, label %72

72:                                               ; preds = %60, %25
  store i64 %8, i64* %7, align 8
  %73 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 1, i64 2
  %74 = load i64, i64* %73, align 8
  %75 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 1, i64 1
  %76 = load i64, i64* %75, align 8
  %77 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 1, i64 0
  %78 = load i64, i64* %77, align 8
  %79 = load i64, i64* %15, align 8
  br label %80

80:                                               ; preds = %123, %72
  %81 = phi i8* [ %24, %72 ], [ %128, %123 ]
  %82 = phi i64 [ 0, %72 ], [ %133, %123 ]
  %83 = phi i64 [ %79, %72 ], [ %132, %123 ]
  %84 = phi i64 [ %78, %72 ], [ %131, %123 ]
  %85 = phi i64 [ %76, %72 ], [ %130, %123 ]
  %86 = phi i64 [ %74, %72 ], [ %129, %123 ]
  %87 = add nsw i64 %82, %23
  %88 = load i32, i32* %17, align 16
  %89 = sext i32 %88 to i64
  %90 = icmp slt i64 %87, %89
  br i1 %90, label %91, label %135

91:                                               ; preds = %80
  %92 = trunc i64 %87 to i32
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %101, label %94

94:                                               ; preds = %91
  %95 = trunc i64 %86 to i32
  %96 = and i32 %95, 255
  %97 = trunc i64 %85 to i32
  %98 = and i32 %97, 255
  %99 = trunc i64 %84 to i32
  %100 = and i32 %99, 255
  br label %101

101:                                              ; preds = %91, %94
  %102 = phi i32 [ %96, %94 ], [ 0, %91 ]
  %103 = phi i32 [ %98, %94 ], [ 0, %91 ]
  %104 = phi i32 [ %100, %94 ], [ 0, %91 ]
  %105 = load i32, i32* %18, align 16
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %117, label %107

107:                                              ; preds = %101
  %108 = ptrtoint i8* %81 to i64
  %109 = shl i64 %108, 1
  %110 = inttoptr i64 %109 to i16*
  %111 = load i32, i32* %20, align 8
  %112 = trunc i64 %83 to i32
  %113 = and i32 %112, 255
  %114 = shl i64 %82, 3
  %115 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 6, i64 %114
  %116 = load i32, i32* %22, align 16
  tail call fastcc void @highbd_filter_selectively_horiz(i16* %110, i32 %111, i32 %102, i32 %103, i32 %104, i32 %113, %struct.loop_filter_thresh* %21, i8* %115, i32 %116)
  br label %123

117:                                              ; preds = %101
  %118 = load i32, i32* %20, align 8
  %119 = trunc i64 %83 to i32
  %120 = and i32 %119, 255
  %121 = shl i64 %82, 3
  %122 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 6, i64 %121
  tail call fastcc void @filter_selectively_horiz(i8* %81, i32 %118, i32 %102, i32 %103, i32 %104, i32 %120, %struct.loop_filter_thresh* %21, i8* %122)
  br label %123

123:                                              ; preds = %117, %107
  %124 = load i32, i32* %20, align 8
  %125 = shl nsw i32 %124, 3
  %126 = load i8*, i8** %6, align 8
  %127 = sext i32 %125 to i64
  %128 = getelementptr inbounds i8, i8* %126, i64 %127
  store i8* %128, i8** %6, align 8
  %129 = lshr i64 %86, 8
  %130 = lshr i64 %85, 8
  %131 = lshr i64 %84, 8
  %132 = lshr i64 %83, 8
  %133 = add nuw nsw i64 %82, 1
  %134 = icmp eq i64 %133, 8
  br i1 %134, label %135, label %80

135:                                              ; preds = %123, %80
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @highbd_filter_selectively_vert_row2(i32, i16*, i32, i32, i32, i32, i32, %struct.loop_filter_thresh*, i8* nocapture readonly, i32) unnamed_addr #0 {
  %11 = alloca [2 x i16*], align 16
  %12 = alloca [2 x %struct.loop_filter_thresh*], align 16
  %13 = icmp ne i32 %0, 0
  %14 = select i1 %13, i32 255, i32 65535
  %15 = select i1 %13, i32 4, i32 8
  %16 = shl i32 1, %15
  %17 = or i32 %16, 1
  %18 = bitcast [2 x i16*]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %18) #4
  %19 = getelementptr inbounds [2 x i16*], [2 x i16*]* %11, i64 0, i64 0
  %20 = getelementptr inbounds [2 x i16*], [2 x i16*]* %11, i64 0, i64 1
  %21 = bitcast [2 x i16*]* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %21, i8 -86, i64 16, i1 false)
  store i16* %1, i16** %19, align 16
  %22 = or i32 %4, %3
  %23 = or i32 %22, %5
  %24 = or i32 %23, %6
  %25 = and i32 %24, %14
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %156, label %27

27:                                               ; preds = %10
  %28 = bitcast [2 x %struct.loop_filter_thresh*]* %12 to i8*
  %29 = getelementptr inbounds [2 x %struct.loop_filter_thresh*], [2 x %struct.loop_filter_thresh*]* %12, i64 0, i64 0
  %30 = getelementptr inbounds [2 x %struct.loop_filter_thresh*], [2 x %struct.loop_filter_thresh*]* %12, i64 0, i64 1
  %31 = zext i32 %15 to i64
  %32 = shl nsw i32 %2, 3
  %33 = sext i32 %32 to i64
  %34 = xor i32 %16, -2
  %35 = bitcast [2 x %struct.loop_filter_thresh*]* %12 to i8*
  br label %36

36:                                               ; preds = %27, %146
  %37 = phi i16* [ %1, %27 ], [ %147, %146 ]
  %38 = phi i32 [ %3, %27 ], [ %149, %146 ]
  %39 = phi i32 [ %4, %27 ], [ %150, %146 ]
  %40 = phi i32 [ %5, %27 ], [ %151, %146 ]
  %41 = phi i32 [ %6, %27 ], [ %152, %146 ]
  %42 = phi i32 [ %25, %27 ], [ %154, %146 ]
  %43 = phi i8* [ %8, %27 ], [ %148, %146 ]
  %44 = and i32 %42, %17
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %146, label %46

46:                                               ; preds = %36
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %28) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %35, i8 -86, i64 16, i1 false)
  %47 = load i8, i8* %43, align 1
  %48 = zext i8 %47 to i64
  %49 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %7, i64 %48
  store %struct.loop_filter_thresh* %49, %struct.loop_filter_thresh** %29, align 16
  %50 = getelementptr inbounds i8, i8* %43, i64 %31
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i64
  %53 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %7, i64 %52
  store %struct.loop_filter_thresh* %53, %struct.loop_filter_thresh** %30, align 8
  %54 = getelementptr inbounds i16, i16* %37, i64 %33
  store i16* %54, i16** %20, align 8
  %55 = and i32 %38, %17
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %74, label %57

57:                                               ; preds = %46
  %58 = icmp eq i32 %55, %17
  br i1 %58, label %59, label %63

59:                                               ; preds = %57
  %60 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %49, i64 0, i32 0, i64 0
  %61 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %7, i64 %48, i32 1, i64 0
  %62 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %7, i64 %48, i32 2, i64 0
  tail call void @vpx_highbd_lpf_vertical_16_dual_sse2(i16* %37, i32 %2, i8* %60, i8* %61, i8* %62, i32 %9) #4
  br label %74

63:                                               ; preds = %57
  %64 = and i32 %38, 1
  %65 = xor i32 %64, 1
  %66 = zext i32 %65 to i64
  %67 = getelementptr inbounds [2 x %struct.loop_filter_thresh*], [2 x %struct.loop_filter_thresh*]* %12, i64 0, i64 %66
  %68 = load %struct.loop_filter_thresh*, %struct.loop_filter_thresh** %67, align 8
  %69 = getelementptr inbounds [2 x i16*], [2 x i16*]* %11, i64 0, i64 %66
  %70 = load i16*, i16** %69, align 8
  %71 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %68, i64 0, i32 0, i64 0
  %72 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %68, i64 0, i32 1, i64 0
  %73 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %68, i64 0, i32 2, i64 0
  tail call void @vpx_highbd_lpf_vertical_16_sse2(i16* %70, i32 %2, i8* %71, i8* %72, i8* %73, i32 %9) #4
  br label %74

74:                                               ; preds = %46, %59, %63
  %75 = and i32 %39, %17
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %97, label %77

77:                                               ; preds = %74
  %78 = icmp eq i32 %75, %17
  br i1 %78, label %79, label %86

79:                                               ; preds = %77
  %80 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %49, i64 0, i32 0, i64 0
  %81 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %7, i64 %48, i32 1, i64 0
  %82 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %7, i64 %48, i32 2, i64 0
  %83 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %53, i64 0, i32 0, i64 0
  %84 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %7, i64 %52, i32 1, i64 0
  %85 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %7, i64 %52, i32 2, i64 0
  tail call void @vpx_highbd_lpf_vertical_8_dual_sse2(i16* %37, i32 %2, i8* %80, i8* %81, i8* %82, i8* %83, i8* %84, i8* %85, i32 %9) #4
  br label %97

86:                                               ; preds = %77
  %87 = and i32 %39, 1
  %88 = xor i32 %87, 1
  %89 = zext i32 %88 to i64
  %90 = getelementptr inbounds [2 x %struct.loop_filter_thresh*], [2 x %struct.loop_filter_thresh*]* %12, i64 0, i64 %89
  %91 = load %struct.loop_filter_thresh*, %struct.loop_filter_thresh** %90, align 8
  %92 = getelementptr inbounds [2 x i16*], [2 x i16*]* %11, i64 0, i64 %89
  %93 = load i16*, i16** %92, align 8
  %94 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %91, i64 0, i32 0, i64 0
  %95 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %91, i64 0, i32 1, i64 0
  %96 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %91, i64 0, i32 2, i64 0
  tail call void @vpx_highbd_lpf_vertical_8_sse2(i16* %93, i32 %2, i8* %94, i8* %95, i8* %96, i32 %9) #4
  br label %97

97:                                               ; preds = %74, %79, %86
  %98 = and i32 %40, %17
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %120, label %100

100:                                              ; preds = %97
  %101 = icmp eq i32 %98, %17
  br i1 %101, label %102, label %109

102:                                              ; preds = %100
  %103 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %49, i64 0, i32 0, i64 0
  %104 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %7, i64 %48, i32 1, i64 0
  %105 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %7, i64 %48, i32 2, i64 0
  %106 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %53, i64 0, i32 0, i64 0
  %107 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %7, i64 %52, i32 1, i64 0
  %108 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %7, i64 %52, i32 2, i64 0
  tail call void @vpx_highbd_lpf_vertical_4_dual_sse2(i16* %37, i32 %2, i8* %103, i8* %104, i8* %105, i8* %106, i8* %107, i8* %108, i32 %9) #4
  br label %120

109:                                              ; preds = %100
  %110 = and i32 %40, 1
  %111 = xor i32 %110, 1
  %112 = zext i32 %111 to i64
  %113 = getelementptr inbounds [2 x %struct.loop_filter_thresh*], [2 x %struct.loop_filter_thresh*]* %12, i64 0, i64 %112
  %114 = load %struct.loop_filter_thresh*, %struct.loop_filter_thresh** %113, align 8
  %115 = getelementptr inbounds [2 x i16*], [2 x i16*]* %11, i64 0, i64 %112
  %116 = load i16*, i16** %115, align 8
  %117 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %114, i64 0, i32 0, i64 0
  %118 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %114, i64 0, i32 1, i64 0
  %119 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %114, i64 0, i32 2, i64 0
  tail call void @vpx_highbd_lpf_vertical_4_sse2(i16* %116, i32 %2, i8* %117, i8* %118, i8* %119, i32 %9) #4
  br label %120

120:                                              ; preds = %97, %102, %109
  %121 = and i32 %41, %17
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %145, label %123

123:                                              ; preds = %120
  %124 = icmp eq i32 %121, %17
  br i1 %124, label %125, label %133

125:                                              ; preds = %123
  %126 = getelementptr inbounds i16, i16* %37, i64 4
  %127 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %49, i64 0, i32 0, i64 0
  %128 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %7, i64 %48, i32 1, i64 0
  %129 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %7, i64 %48, i32 2, i64 0
  %130 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %53, i64 0, i32 0, i64 0
  %131 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %7, i64 %52, i32 1, i64 0
  %132 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %7, i64 %52, i32 2, i64 0
  tail call void @vpx_highbd_lpf_vertical_4_dual_sse2(i16* %126, i32 %2, i8* %127, i8* %128, i8* %129, i8* %130, i8* %131, i8* %132, i32 %9) #4
  br label %145

133:                                              ; preds = %123
  %134 = and i32 %41, 1
  %135 = xor i32 %134, 1
  %136 = zext i32 %135 to i64
  %137 = getelementptr inbounds [2 x %struct.loop_filter_thresh*], [2 x %struct.loop_filter_thresh*]* %12, i64 0, i64 %136
  %138 = load %struct.loop_filter_thresh*, %struct.loop_filter_thresh** %137, align 8
  %139 = getelementptr inbounds [2 x i16*], [2 x i16*]* %11, i64 0, i64 %136
  %140 = load i16*, i16** %139, align 8
  %141 = getelementptr inbounds i16, i16* %140, i64 4
  %142 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %138, i64 0, i32 0, i64 0
  %143 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %138, i64 0, i32 1, i64 0
  %144 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %138, i64 0, i32 2, i64 0
  tail call void @vpx_highbd_lpf_vertical_4_sse2(i16* %141, i32 %2, i8* %142, i8* %143, i8* %144, i32 %9) #4
  br label %145

145:                                              ; preds = %120, %125, %133
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %28) #4
  br label %146

146:                                              ; preds = %36, %145
  %147 = getelementptr inbounds i16, i16* %37, i64 8
  store i16* %147, i16** %19, align 16
  %148 = getelementptr inbounds i8, i8* %43, i64 1
  %149 = lshr i32 %38, 1
  %150 = lshr i32 %39, 1
  %151 = lshr i32 %40, 1
  %152 = lshr i32 %41, 1
  %153 = and i32 %42, %34
  %154 = lshr exact i32 %153, 1
  %155 = icmp eq i32 %153, 0
  br i1 %155, label %156, label %36

156:                                              ; preds = %146, %10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %18) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @filter_selectively_vert_row2(i32, i8*, i32, i32, i32, i32, i32, %struct.loop_filter_thresh*, i8* nocapture readonly) unnamed_addr #0 {
  %10 = alloca [2 x i8*], align 16
  %11 = alloca [2 x %struct.loop_filter_thresh*], align 16
  %12 = icmp ne i32 %0, 0
  %13 = select i1 %12, i32 255, i32 65535
  %14 = select i1 %12, i32 4, i32 8
  %15 = shl i32 1, %14
  %16 = or i32 %15, 1
  %17 = bitcast [2 x i8*]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %17) #4
  %18 = getelementptr inbounds [2 x i8*], [2 x i8*]* %10, i64 0, i64 0
  %19 = getelementptr inbounds [2 x i8*], [2 x i8*]* %10, i64 0, i64 1
  %20 = bitcast [2 x i8*]* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 -86, i64 16, i1 false)
  store i8* %1, i8** %18, align 16
  %21 = or i32 %4, %3
  %22 = or i32 %21, %5
  %23 = or i32 %22, %6
  %24 = and i32 %23, %13
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %155, label %26

26:                                               ; preds = %9
  %27 = bitcast [2 x %struct.loop_filter_thresh*]* %11 to i8*
  %28 = getelementptr inbounds [2 x %struct.loop_filter_thresh*], [2 x %struct.loop_filter_thresh*]* %11, i64 0, i64 0
  %29 = getelementptr inbounds [2 x %struct.loop_filter_thresh*], [2 x %struct.loop_filter_thresh*]* %11, i64 0, i64 1
  %30 = zext i32 %14 to i64
  %31 = shl nsw i32 %2, 3
  %32 = sext i32 %31 to i64
  %33 = xor i32 %15, -2
  %34 = bitcast [2 x %struct.loop_filter_thresh*]* %11 to i8*
  br label %35

35:                                               ; preds = %26, %145
  %36 = phi i8* [ %1, %26 ], [ %146, %145 ]
  %37 = phi i32 [ %3, %26 ], [ %148, %145 ]
  %38 = phi i32 [ %4, %26 ], [ %149, %145 ]
  %39 = phi i32 [ %5, %26 ], [ %150, %145 ]
  %40 = phi i32 [ %6, %26 ], [ %151, %145 ]
  %41 = phi i32 [ %24, %26 ], [ %153, %145 ]
  %42 = phi i8* [ %8, %26 ], [ %147, %145 ]
  %43 = and i32 %41, %16
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %145, label %45

45:                                               ; preds = %35
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %27) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %34, i8 -86, i64 16, i1 false)
  %46 = load i8, i8* %42, align 1
  %47 = zext i8 %46 to i64
  %48 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %7, i64 %47
  store %struct.loop_filter_thresh* %48, %struct.loop_filter_thresh** %28, align 16
  %49 = getelementptr inbounds i8, i8* %42, i64 %30
  %50 = load i8, i8* %49, align 1
  %51 = zext i8 %50 to i64
  %52 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %7, i64 %51
  store %struct.loop_filter_thresh* %52, %struct.loop_filter_thresh** %29, align 8
  %53 = getelementptr inbounds i8, i8* %36, i64 %32
  store i8* %53, i8** %19, align 8
  %54 = and i32 %37, %16
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %73, label %56

56:                                               ; preds = %45
  %57 = icmp eq i32 %54, %16
  br i1 %57, label %58, label %62

58:                                               ; preds = %56
  %59 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %48, i64 0, i32 0, i64 0
  %60 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %7, i64 %47, i32 1, i64 0
  %61 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %7, i64 %47, i32 2, i64 0
  tail call void @vpx_lpf_vertical_16_dual_sse2(i8* %36, i32 %2, i8* %59, i8* %60, i8* %61) #4
  br label %73

62:                                               ; preds = %56
  %63 = and i32 %37, 1
  %64 = xor i32 %63, 1
  %65 = zext i32 %64 to i64
  %66 = getelementptr inbounds [2 x %struct.loop_filter_thresh*], [2 x %struct.loop_filter_thresh*]* %11, i64 0, i64 %65
  %67 = load %struct.loop_filter_thresh*, %struct.loop_filter_thresh** %66, align 8
  %68 = getelementptr inbounds [2 x i8*], [2 x i8*]* %10, i64 0, i64 %65
  %69 = load i8*, i8** %68, align 8
  %70 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %67, i64 0, i32 0, i64 0
  %71 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %67, i64 0, i32 1, i64 0
  %72 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %67, i64 0, i32 2, i64 0
  tail call void @vpx_lpf_vertical_16_sse2(i8* %69, i32 %2, i8* %70, i8* %71, i8* %72) #4
  br label %73

73:                                               ; preds = %45, %58, %62
  %74 = and i32 %38, %16
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %96, label %76

76:                                               ; preds = %73
  %77 = icmp eq i32 %74, %16
  br i1 %77, label %78, label %85

78:                                               ; preds = %76
  %79 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %48, i64 0, i32 0, i64 0
  %80 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %7, i64 %47, i32 1, i64 0
  %81 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %7, i64 %47, i32 2, i64 0
  %82 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %52, i64 0, i32 0, i64 0
  %83 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %7, i64 %51, i32 1, i64 0
  %84 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %7, i64 %51, i32 2, i64 0
  tail call void @vpx_lpf_vertical_8_dual_sse2(i8* %36, i32 %2, i8* %79, i8* %80, i8* %81, i8* %82, i8* %83, i8* %84) #4
  br label %96

85:                                               ; preds = %76
  %86 = and i32 %38, 1
  %87 = xor i32 %86, 1
  %88 = zext i32 %87 to i64
  %89 = getelementptr inbounds [2 x %struct.loop_filter_thresh*], [2 x %struct.loop_filter_thresh*]* %11, i64 0, i64 %88
  %90 = load %struct.loop_filter_thresh*, %struct.loop_filter_thresh** %89, align 8
  %91 = getelementptr inbounds [2 x i8*], [2 x i8*]* %10, i64 0, i64 %88
  %92 = load i8*, i8** %91, align 8
  %93 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %90, i64 0, i32 0, i64 0
  %94 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %90, i64 0, i32 1, i64 0
  %95 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %90, i64 0, i32 2, i64 0
  tail call void @vpx_lpf_vertical_8_sse2(i8* %92, i32 %2, i8* %93, i8* %94, i8* %95) #4
  br label %96

96:                                               ; preds = %73, %78, %85
  %97 = and i32 %39, %16
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %119, label %99

99:                                               ; preds = %96
  %100 = icmp eq i32 %97, %16
  br i1 %100, label %101, label %108

101:                                              ; preds = %99
  %102 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %48, i64 0, i32 0, i64 0
  %103 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %7, i64 %47, i32 1, i64 0
  %104 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %7, i64 %47, i32 2, i64 0
  %105 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %52, i64 0, i32 0, i64 0
  %106 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %7, i64 %51, i32 1, i64 0
  %107 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %7, i64 %51, i32 2, i64 0
  tail call void @vpx_lpf_vertical_4_dual_sse2(i8* %36, i32 %2, i8* %102, i8* %103, i8* %104, i8* %105, i8* %106, i8* %107) #4
  br label %119

108:                                              ; preds = %99
  %109 = and i32 %39, 1
  %110 = xor i32 %109, 1
  %111 = zext i32 %110 to i64
  %112 = getelementptr inbounds [2 x %struct.loop_filter_thresh*], [2 x %struct.loop_filter_thresh*]* %11, i64 0, i64 %111
  %113 = load %struct.loop_filter_thresh*, %struct.loop_filter_thresh** %112, align 8
  %114 = getelementptr inbounds [2 x i8*], [2 x i8*]* %10, i64 0, i64 %111
  %115 = load i8*, i8** %114, align 8
  %116 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %113, i64 0, i32 0, i64 0
  %117 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %113, i64 0, i32 1, i64 0
  %118 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %113, i64 0, i32 2, i64 0
  tail call void @vpx_lpf_vertical_4_sse2(i8* %115, i32 %2, i8* %116, i8* %117, i8* %118) #4
  br label %119

119:                                              ; preds = %96, %101, %108
  %120 = and i32 %40, %16
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %144, label %122

122:                                              ; preds = %119
  %123 = icmp eq i32 %120, %16
  br i1 %123, label %124, label %132

124:                                              ; preds = %122
  %125 = getelementptr inbounds i8, i8* %36, i64 4
  %126 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %48, i64 0, i32 0, i64 0
  %127 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %7, i64 %47, i32 1, i64 0
  %128 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %7, i64 %47, i32 2, i64 0
  %129 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %52, i64 0, i32 0, i64 0
  %130 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %7, i64 %51, i32 1, i64 0
  %131 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %7, i64 %51, i32 2, i64 0
  tail call void @vpx_lpf_vertical_4_dual_sse2(i8* %125, i32 %2, i8* %126, i8* %127, i8* %128, i8* %129, i8* %130, i8* %131) #4
  br label %144

132:                                              ; preds = %122
  %133 = and i32 %40, 1
  %134 = xor i32 %133, 1
  %135 = zext i32 %134 to i64
  %136 = getelementptr inbounds [2 x %struct.loop_filter_thresh*], [2 x %struct.loop_filter_thresh*]* %11, i64 0, i64 %135
  %137 = load %struct.loop_filter_thresh*, %struct.loop_filter_thresh** %136, align 8
  %138 = getelementptr inbounds [2 x i8*], [2 x i8*]* %10, i64 0, i64 %135
  %139 = load i8*, i8** %138, align 8
  %140 = getelementptr inbounds i8, i8* %139, i64 4
  %141 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %137, i64 0, i32 0, i64 0
  %142 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %137, i64 0, i32 1, i64 0
  %143 = getelementptr inbounds %struct.loop_filter_thresh, %struct.loop_filter_thresh* %137, i64 0, i32 2, i64 0
  tail call void @vpx_lpf_vertical_4_sse2(i8* %140, i32 %2, i8* %141, i8* %142, i8* %143) #4
  br label %144

144:                                              ; preds = %119, %124, %132
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %27) #4
  br label %145

145:                                              ; preds = %35, %144
  %146 = getelementptr inbounds i8, i8* %36, i64 8
  store i8* %146, i8** %18, align 16
  %147 = getelementptr inbounds i8, i8* %42, i64 1
  %148 = lshr i32 %37, 1
  %149 = lshr i32 %38, 1
  %150 = lshr i32 %39, 1
  %151 = lshr i32 %40, 1
  %152 = and i32 %41, %33
  %153 = lshr exact i32 %152, 1
  %154 = icmp eq i32 %152, 0
  br i1 %154, label %155, label %35

155:                                              ; preds = %145, %9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %17) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_filter_block_plane_ss11(%struct.VP9Common*, %struct.macroblockd_plane* nocapture, i32, %struct.LOOP_FILTER_MASK* nocapture readonly) local_unnamed_addr #0 {
  %5 = alloca [16 x i8], align 16
  %6 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %1, i64 0, i32 3
  %7 = getelementptr inbounds %struct.buf_2d, %struct.buf_2d* %6, i64 0, i32 0
  %8 = bitcast %struct.buf_2d* %6 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #4
  %11 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 3, i64 2
  %12 = load i16, i16* %11, align 4
  %13 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 3, i64 1
  %14 = load i16, i16* %13, align 2
  %15 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 3, i64 0
  %16 = load i16, i16* %15, align 8
  %17 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 5
  %18 = load i16, i16* %17, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 0, i64 16, i1 false)
  %19 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 33
  %20 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 11
  %21 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %1, i64 0, i32 1
  %22 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %1, i64 0, i32 3, i32 1
  %23 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 65, i32 0, i64 0
  %24 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 80
  %25 = sext i32 %2 to i64
  %26 = inttoptr i64 %9 to i8*
  br label %27

27:                                               ; preds = %4, %99
  %28 = phi i8* [ %26, %4 ], [ %104, %99 ]
  %29 = phi i64 [ 0, %4 ], [ %109, %99 ]
  %30 = phi i16 [ %18, %4 ], [ %108, %99 ]
  %31 = phi i16 [ %16, %4 ], [ %107, %99 ]
  %32 = phi i16 [ %14, %4 ], [ %106, %99 ]
  %33 = phi i16 [ %12, %4 ], [ %105, %99 ]
  %34 = add nsw i64 %29, %25
  %35 = load i32, i32* %19, align 16
  %36 = sext i32 %35 to i64
  %37 = icmp slt i64 %34, %36
  br i1 %37, label %38, label %111

38:                                               ; preds = %27
  %39 = shl i64 %29, 3
  %40 = shl nuw i64 %29, 1
  %41 = or i64 %29, 2
  %42 = shl i64 %41, 3
  %43 = shl nuw i64 %41, 1
  %44 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 6, i64 %39
  %45 = load i8, i8* %44, align 1
  %46 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 %40
  store i8 %45, i8* %46, align 8
  %47 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 6, i64 %42
  %48 = load i8, i8* %47, align 1
  %49 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 %43
  store i8 %48, i8* %49, align 4
  %50 = or i64 %39, 2
  %51 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 6, i64 %50
  %52 = load i8, i8* %51, align 1
  %53 = or i64 %40, 1
  %54 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 %53
  store i8 %52, i8* %54, align 1
  %55 = or i64 %42, 2
  %56 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 6, i64 %55
  %57 = load i8, i8* %56, align 1
  %58 = or i64 %43, 1
  %59 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 %58
  store i8 %57, i8* %59, align 1
  %60 = or i64 %39, 4
  %61 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 6, i64 %60
  %62 = load i8, i8* %61, align 1
  %63 = or i64 %40, 2
  %64 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 %63
  store i8 %62, i8* %64, align 2
  %65 = or i64 %42, 4
  %66 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 6, i64 %65
  %67 = load i8, i8* %66, align 1
  %68 = or i64 %43, 2
  %69 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 %68
  store i8 %67, i8* %69, align 2
  %70 = or i64 %39, 6
  %71 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 6, i64 %70
  %72 = load i8, i8* %71, align 1
  %73 = or i64 %40, 3
  %74 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 %73
  store i8 %72, i8* %74, align 1
  %75 = or i64 %42, 6
  %76 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 6, i64 %75
  %77 = load i8, i8* %76, align 1
  %78 = or i64 %43, 3
  %79 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 %78
  store i8 %77, i8* %79, align 1
  %80 = load i32, i32* %20, align 16
  %81 = icmp eq i32 %80, 0
  %82 = load i32, i32* %21, align 8
  br i1 %81, label %93, label %83

83:                                               ; preds = %38
  %84 = ptrtoint i8* %28 to i64
  %85 = shl i64 %84, 1
  %86 = inttoptr i64 %85 to i16*
  %87 = load i32, i32* %22, align 8
  %88 = zext i16 %33 to i32
  %89 = zext i16 %32 to i32
  %90 = zext i16 %31 to i32
  %91 = zext i16 %30 to i32
  %92 = load i32, i32* %24, align 16
  call fastcc void @highbd_filter_selectively_vert_row2(i32 %82, i16* %86, i32 %87, i32 %88, i32 %89, i32 %90, i32 %91, %struct.loop_filter_thresh* %23, i8* %46, i32 %92)
  br label %99

93:                                               ; preds = %38
  %94 = load i32, i32* %22, align 8
  %95 = zext i16 %33 to i32
  %96 = zext i16 %32 to i32
  %97 = zext i16 %31 to i32
  %98 = zext i16 %30 to i32
  call fastcc void @filter_selectively_vert_row2(i32 %82, i8* %28, i32 %94, i32 %95, i32 %96, i32 %97, i32 %98, %struct.loop_filter_thresh* %23, i8* %46)
  br label %99

99:                                               ; preds = %93, %83
  %100 = load i32, i32* %22, align 8
  %101 = shl nsw i32 %100, 4
  %102 = load i8*, i8** %7, align 8
  %103 = sext i32 %101 to i64
  %104 = getelementptr inbounds i8, i8* %102, i64 %103
  store i8* %104, i8** %7, align 8
  %105 = lshr i16 %33, 8
  %106 = lshr i16 %32, 8
  %107 = lshr i16 %31, 8
  %108 = lshr i16 %30, 8
  %109 = add nuw nsw i64 %29, 4
  %110 = icmp ult i64 %109, 8
  br i1 %110, label %27, label %111

111:                                              ; preds = %99, %27
  store i64 %9, i64* %8, align 8
  %112 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 4, i64 2
  %113 = load i16, i16* %112, align 4
  %114 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 4, i64 1
  %115 = load i16, i16* %114, align 2
  %116 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %3, i64 0, i32 4, i64 0
  %117 = load i16, i16* %116, align 8
  %118 = load i16, i16* %17, align 8
  br label %119

119:                                              ; preds = %111, %163
  %120 = phi i8* [ %26, %111 ], [ %168, %163 ]
  %121 = phi i64 [ 0, %111 ], [ %173, %163 ]
  %122 = phi i16 [ %118, %111 ], [ %172, %163 ]
  %123 = phi i16 [ %117, %111 ], [ %171, %163 ]
  %124 = phi i16 [ %115, %111 ], [ %170, %163 ]
  %125 = phi i16 [ %113, %111 ], [ %169, %163 ]
  %126 = add nsw i64 %121, %25
  %127 = load i32, i32* %19, align 16
  %128 = sext i32 %127 to i64
  %129 = icmp slt i64 %126, %128
  br i1 %129, label %130, label %175

130:                                              ; preds = %119
  %131 = add nsw i32 %127, -1
  %132 = trunc i64 %126 to i32
  %133 = icmp eq i32 %131, %132
  %134 = and i16 %122, 15
  %135 = zext i16 %134 to i32
  %136 = select i1 %133, i32 0, i32 %135
  %137 = icmp eq i32 %132, 0
  br i1 %137, label %145, label %138

138:                                              ; preds = %130
  %139 = and i16 %125, 15
  %140 = zext i16 %139 to i32
  %141 = and i16 %124, 15
  %142 = zext i16 %141 to i32
  %143 = and i16 %123, 15
  %144 = zext i16 %143 to i32
  br label %145

145:                                              ; preds = %130, %138
  %146 = phi i32 [ %140, %138 ], [ 0, %130 ]
  %147 = phi i32 [ %142, %138 ], [ 0, %130 ]
  %148 = phi i32 [ %144, %138 ], [ 0, %130 ]
  %149 = load i32, i32* %20, align 16
  %150 = icmp eq i32 %149, 0
  br i1 %150, label %159, label %151

151:                                              ; preds = %145
  %152 = ptrtoint i8* %120 to i64
  %153 = shl i64 %152, 1
  %154 = inttoptr i64 %153 to i16*
  %155 = load i32, i32* %22, align 8
  %156 = shl nuw i64 %121, 1
  %157 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 %156
  %158 = load i32, i32* %24, align 16
  call fastcc void @highbd_filter_selectively_horiz(i16* %154, i32 %155, i32 %146, i32 %147, i32 %148, i32 %136, %struct.loop_filter_thresh* %23, i8* %157, i32 %158)
  br label %163

159:                                              ; preds = %145
  %160 = load i32, i32* %22, align 8
  %161 = shl nuw i64 %121, 1
  %162 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 %161
  call fastcc void @filter_selectively_horiz(i8* %120, i32 %160, i32 %146, i32 %147, i32 %148, i32 %136, %struct.loop_filter_thresh* %23, i8* %162)
  br label %163

163:                                              ; preds = %159, %151
  %164 = load i32, i32* %22, align 8
  %165 = shl nsw i32 %164, 3
  %166 = load i8*, i8** %7, align 8
  %167 = sext i32 %165 to i64
  %168 = getelementptr inbounds i8, i8* %166, i64 %167
  store i8* %168, i8** %7, align 8
  %169 = lshr i16 %125, 4
  %170 = lshr i16 %124, 4
  %171 = lshr i16 %123, 4
  %172 = lshr i16 %122, 4
  %173 = add nuw nsw i64 %121, 2
  %174 = icmp ult i64 %173, 8
  br i1 %174, label %119, label %175

175:                                              ; preds = %163, %119
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_loop_filter_frame(%struct.yv12_buffer_config*, %struct.VP9Common*, %struct.macroblockd*, i32, i32, i32) local_unnamed_addr #0 {
  %7 = icmp eq i32 %3, 0
  br i1 %7, label %25, label %8

8:                                                ; preds = %6
  %9 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %1, i64 0, i32 33
  %10 = load i32, i32* %9, align 16
  %11 = icmp ne i32 %5, 0
  %12 = icmp sgt i32 %10, 8
  %13 = and i1 %11, %12
  br i1 %13, label %14, label %20

14:                                               ; preds = %8
  %15 = lshr i32 %10, 1
  %16 = and i32 %15, 2147483640
  %17 = icmp sgt i32 %10, 71
  %18 = lshr i32 %10, 3
  %19 = select i1 %17, i32 %18, i32 8
  br label %20

20:                                               ; preds = %14, %8
  %21 = phi i32 [ 0, %8 ], [ %16, %14 ]
  %22 = phi i32 [ %10, %8 ], [ %19, %14 ]
  %23 = add nsw i32 %22, %21
  %24 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 0, i64 0
  tail call fastcc void @loop_filter_rows(%struct.yv12_buffer_config* %0, %struct.VP9Common* %1, %struct.macroblockd_plane* %24, i32 %21, i32 %23, i32 %4)
  br label %25

25:                                               ; preds = %6, %20
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @loop_filter_rows(%struct.yv12_buffer_config*, %struct.VP9Common*, %struct.macroblockd_plane*, i32, i32, i32) unnamed_addr #0 {
  %7 = icmp ne i32 %5, 0
  %8 = select i1 %7, i64 1, i64 3
  br i1 %7, label %21, label %9

9:                                                ; preds = %6
  %10 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %2, i64 1, i32 2
  %11 = load i32, i32* %10, align 4
  switch i32 %11, label %20 [
    i32 1, label %12
    i32 0, label %16
  ]

12:                                               ; preds = %9
  %13 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %2, i64 1, i32 1
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq i32 %14, 1
  br i1 %15, label %21, label %20

16:                                               ; preds = %9
  %17 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %2, i64 1, i32 1
  %18 = load i32, i32* %17, align 8
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %21, label %20

20:                                               ; preds = %9, %12, %16
  br label %21

21:                                               ; preds = %16, %12, %6, %20
  %22 = phi i32 [ 2, %20 ], [ 1, %6 ], [ 0, %12 ], [ 1, %16 ]
  %23 = icmp slt i32 %3, %4
  br i1 %23, label %24, label %74

24:                                               ; preds = %21
  %25 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %1, i64 0, i32 53
  %26 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %1, i64 0, i32 36
  %27 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %1, i64 0, i32 68, i32 10
  %28 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %1, i64 0, i32 68, i32 11
  %29 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %1, i64 0, i32 35
  %30 = load i32, i32* %29, align 8
  br label %31

31:                                               ; preds = %24, %70
  %32 = phi i32 [ %30, %24 ], [ %71, %70 ]
  %33 = phi i32 [ %3, %24 ], [ %72, %70 ]
  %34 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %25, align 8
  %35 = load i32, i32* %26, align 4
  %36 = mul nsw i32 %35, %33
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %34, i64 %37
  %39 = icmp sgt i32 %32, 0
  br i1 %39, label %40, label %70

40:                                               ; preds = %31
  %41 = load %struct.LOOP_FILTER_MASK*, %struct.LOOP_FILTER_MASK** %27, align 8
  %42 = load i32, i32* %28, align 8
  %43 = ashr i32 %33, 3
  %44 = mul nsw i32 %42, %43
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %41, i64 %45
  br label %47

47:                                               ; preds = %40, %64
  %48 = phi i64 [ 0, %40 ], [ %65, %64 ]
  %49 = phi %struct.LOOP_FILTER_MASK* [ %46, %40 ], [ %66, %64 ]
  %50 = trunc i64 %48 to i32
  tail call void @vp9_setup_dst_planes(%struct.macroblockd_plane* %2, %struct.yv12_buffer_config* %0, i32 %33, i32 %50) #4
  tail call void @vp9_adjust_mask(%struct.VP9Common* %1, i32 %33, i32 %50, %struct.LOOP_FILTER_MASK* %49)
  tail call void @vp9_filter_block_plane_ss00(%struct.VP9Common* %1, %struct.macroblockd_plane* %2, i32 %33, %struct.LOOP_FILTER_MASK* %49)
  br i1 %7, label %64, label %51

51:                                               ; preds = %47
  %52 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %38, i64 %48
  br label %53

53:                                               ; preds = %51, %61
  %54 = phi i64 [ 1, %51 ], [ %62, %61 ]
  switch i32 %22, label %61 [
    i32 0, label %55
    i32 1, label %57
    i32 2, label %59
  ]

55:                                               ; preds = %53
  %56 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %2, i64 %54
  tail call void @vp9_filter_block_plane_ss11(%struct.VP9Common* %1, %struct.macroblockd_plane* %56, i32 %33, %struct.LOOP_FILTER_MASK* %49)
  br label %61

57:                                               ; preds = %53
  %58 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %2, i64 %54
  tail call void @vp9_filter_block_plane_ss00(%struct.VP9Common* %1, %struct.macroblockd_plane* %58, i32 %33, %struct.LOOP_FILTER_MASK* %49)
  br label %61

59:                                               ; preds = %53
  %60 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %2, i64 %54
  tail call void @vp9_filter_block_plane_non420(%struct.VP9Common* %1, %struct.macroblockd_plane* %60, %struct.MODE_INFO** %52, i32 %33, i32 %50)
  br label %61

61:                                               ; preds = %55, %57, %59, %53
  %62 = add nuw nsw i64 %54, 1
  %63 = icmp ult i64 %62, %8
  br i1 %63, label %53, label %64

64:                                               ; preds = %61, %47
  %65 = add nuw i64 %48, 8
  %66 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %49, i64 1
  %67 = load i32, i32* %29, align 8
  %68 = trunc i64 %65 to i32
  %69 = icmp sgt i32 %67, %68
  br i1 %69, label %47, label %70

70:                                               ; preds = %64, %31
  %71 = phi i32 [ %32, %31 ], [ %67, %64 ]
  %72 = add nsw i32 %33, 8
  %73 = icmp slt i32 %72, %4
  br i1 %73, label %31, label %74

74:                                               ; preds = %70, %21
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_build_mask_frame(%struct.VP9Common* nocapture, i32, i32) local_unnamed_addr #0 {
  %4 = icmp eq i32 %1, 0
  br i1 %4, label %62, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 33
  %7 = load i32, i32* %6, align 16
  %8 = icmp ne i32 %2, 0
  %9 = icmp sgt i32 %7, 8
  %10 = and i1 %8, %9
  br i1 %10, label %11, label %18

11:                                               ; preds = %5
  %12 = lshr i32 %7, 1
  %13 = and i32 %12, 2147483640
  %14 = icmp sgt i32 %7, 71
  %15 = lshr i32 %7, 3
  %16 = select i1 %14, i32 %15, i32 8
  %17 = add nuw nsw i32 %16, %13
  tail call void @vp9_loop_filter_frame_init(%struct.VP9Common* %0, i32 %1)
  br label %20

18:                                               ; preds = %5
  tail call void @vp9_loop_filter_frame_init(%struct.VP9Common* %0, i32 %1)
  %19 = icmp sgt i32 %7, 0
  br i1 %19, label %20, label %62

20:                                               ; preds = %11, %18
  %21 = phi i32 [ %17, %11 ], [ %7, %18 ]
  %22 = phi i32 [ %13, %11 ], [ 0, %18 ]
  %23 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 53
  %24 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 36
  %25 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 35
  %26 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 68, i32 10
  %27 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 68, i32 11
  %28 = load i32, i32* %25, align 8
  br label %29

29:                                               ; preds = %20, %58
  %30 = phi i32 [ %28, %20 ], [ %59, %58 ]
  %31 = phi i32 [ %22, %20 ], [ %60, %58 ]
  %32 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %23, align 8
  %33 = load i32, i32* %24, align 4
  %34 = mul nsw i32 %33, %31
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %32, i64 %35
  %37 = icmp sgt i32 %30, 0
  br i1 %37, label %38, label %58

38:                                               ; preds = %29
  %39 = lshr exact i32 %31, 3
  br label %40

40:                                               ; preds = %56, %38
  %41 = phi i32 [ %33, %38 ], [ %57, %56 ]
  %42 = phi i64 [ 0, %38 ], [ %52, %56 ]
  %43 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %36, i64 %42
  %44 = load %struct.LOOP_FILTER_MASK*, %struct.LOOP_FILTER_MASK** %26, align 8
  %45 = trunc i64 %42 to i32
  %46 = lshr exact i32 %45, 3
  %47 = load i32, i32* %27, align 8
  %48 = mul nsw i32 %47, %39
  %49 = add nsw i32 %48, %46
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %44, i64 %50
  tail call void @vp9_setup_mask(%struct.VP9Common* %0, i32 %31, i32 %45, %struct.MODE_INFO** %43, i32 %41, %struct.LOOP_FILTER_MASK* %51)
  %52 = add nuw i64 %42, 8
  %53 = load i32, i32* %25, align 8
  %54 = trunc i64 %52 to i32
  %55 = icmp sgt i32 %53, %54
  br i1 %55, label %56, label %58

56:                                               ; preds = %40
  %57 = load i32, i32* %24, align 4
  br label %40

58:                                               ; preds = %40, %29
  %59 = phi i32 [ %30, %29 ], [ %53, %40 ]
  %60 = add nuw nsw i32 %31, 8
  %61 = icmp slt i32 %60, %21
  br i1 %61, label %29, label %62

62:                                               ; preds = %58, %18, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_build_mask(%struct.VP9Common* nocapture readonly, %struct.MODE_INFO* nocapture readonly, i32, i32, i32, i32) local_unnamed_addr #0 {
  %7 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1, i64 0, i32 0
  %8 = load i8, i8* %7, align 4
  %9 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1, i64 0, i32 2
  %10 = load i8, i8* %9, align 2
  %11 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1, i64 0, i32 4
  %12 = load i8, i8* %11, align 4
  %13 = sext i8 %12 to i64
  %14 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1, i64 0, i32 8, i64 0
  %15 = load i8, i8* %14, align 4
  %16 = sext i8 %15 to i64
  %17 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1, i64 0, i32 1
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i64
  %20 = getelementptr inbounds [14 x i32], [14 x i32]* @mode_lf_lut, i64 0, i64 %19
  %21 = load i32, i32* %20, align 4
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 65, i32 1, i64 %13, i64 %16, i64 %22
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %8 to i64
  %26 = zext i8 %10 to i64
  %27 = getelementptr inbounds [13 x [4 x [2 x [2 x i8]]]], [13 x [4 x [2 x [2 x i8]]]]* @uv_txsize_lookup, i64 0, i64 %25, i64 %26, i64 1, i64 1
  %28 = load i8, i8* %27, align 1
  %29 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 68, i32 10
  %30 = load %struct.LOOP_FILTER_MASK*, %struct.LOOP_FILTER_MASK** %29, align 8
  %31 = ashr i32 %3, 3
  %32 = ashr i32 %2, 3
  %33 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 68, i32 11
  %34 = load i32, i32* %33, align 8
  %35 = mul nsw i32 %34, %32
  %36 = add nsw i32 %35, %31
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %30, i64 %37, i32 0, i64 %26
  %39 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %30, i64 %37, i32 1, i64 %26
  %40 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %30, i64 %37, i32 2
  %41 = zext i8 %28 to i64
  %42 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %30, i64 %37, i32 3, i64 %41
  %43 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %30, i64 %37, i32 4, i64 %41
  %44 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %30, i64 %37, i32 5
  %45 = and i32 %2, 7
  %46 = and i32 %3, 7
  %47 = shl nuw nsw i32 %45, 3
  %48 = or i32 %46, %47
  %49 = lshr i32 %46, 1
  %50 = lshr i32 %45, 1
  %51 = shl nuw nsw i32 %50, 2
  %52 = or i32 %49, %51
  %53 = zext i32 %45 to i64
  %54 = zext i32 %46 to i64
  %55 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* @first_block_in_16x16, i64 0, i64 %53, i64 %54
  %56 = load i8, i8* %55, align 1
  %57 = icmp eq i8 %24, 0
  br i1 %57, label %179, label %58

58:                                               ; preds = %6
  %59 = icmp sgt i32 %5, 0
  br i1 %59, label %62, label %60

60:                                               ; preds = %58
  %61 = zext i32 %48 to i64
  br label %93

62:                                               ; preds = %58
  %63 = sext i32 %4 to i64
  %64 = zext i32 %48 to i64
  %65 = add i32 %5, -1
  %66 = and i32 %5, 3
  %67 = icmp ult i32 %65, 3
  br i1 %67, label %83, label %68

68:                                               ; preds = %62
  %69 = sub i32 %5, %66
  br label %70

70:                                               ; preds = %70, %68
  %71 = phi i64 [ %64, %68 ], [ %80, %70 ]
  %72 = phi i32 [ %69, %68 ], [ %81, %70 ]
  %73 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %30, i64 %37, i32 6, i64 %71
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %73, i8 %24, i64 %63, i1 false)
  %74 = add nuw nsw i64 %71, 8
  %75 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %30, i64 %37, i32 6, i64 %74
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %75, i8 %24, i64 %63, i1 false)
  %76 = add nuw nsw i64 %71, 16
  %77 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %30, i64 %37, i32 6, i64 %76
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %77, i8 %24, i64 %63, i1 false)
  %78 = add nuw nsw i64 %71, 24
  %79 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %30, i64 %37, i32 6, i64 %78
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %79, i8 %24, i64 %63, i1 false)
  %80 = add nuw nsw i64 %71, 32
  %81 = add i32 %72, -4
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %70

83:                                               ; preds = %70, %62
  %84 = phi i64 [ %64, %62 ], [ %80, %70 ]
  %85 = icmp eq i32 %66, 0
  br i1 %85, label %93, label %86

86:                                               ; preds = %83, %86
  %87 = phi i64 [ %90, %86 ], [ %84, %83 ]
  %88 = phi i32 [ %91, %86 ], [ %66, %83 ]
  %89 = getelementptr inbounds %struct.LOOP_FILTER_MASK, %struct.LOOP_FILTER_MASK* %30, i64 %37, i32 6, i64 %87
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %89, i8 %24, i64 %63, i1 false)
  %90 = add nuw nsw i64 %87, 8
  %91 = add i32 %88, -1
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %93, label %86, !llvm.loop !5

93:                                               ; preds = %83, %86, %60
  %94 = phi i64 [ %61, %60 ], [ %64, %86 ], [ %64, %83 ]
  %95 = getelementptr inbounds [13 x i64], [13 x i64]* @above_prediction_mask, i64 0, i64 %25
  %96 = load i64, i64* %95, align 8
  %97 = shl i64 %96, %94
  %98 = load i64, i64* %39, align 8
  %99 = or i64 %98, %97
  store i64 %99, i64* %39, align 8
  %100 = getelementptr inbounds [13 x i64], [13 x i64]* @left_prediction_mask, i64 0, i64 %25
  %101 = load i64, i64* %100, align 8
  %102 = shl i64 %101, %94
  %103 = load i64, i64* %38, align 8
  %104 = or i64 %103, %102
  store i64 %104, i64* %38, align 8
  %105 = icmp ne i8 %56, 0
  br i1 %105, label %106, label %121

106:                                              ; preds = %93
  %107 = getelementptr inbounds [13 x i16], [13 x i16]* @above_prediction_mask_uv, i64 0, i64 %25
  %108 = load i16, i16* %107, align 2
  %109 = zext i16 %108 to i32
  %110 = shl i32 %109, %52
  %111 = load i16, i16* %43, align 2
  %112 = trunc i32 %110 to i16
  %113 = or i16 %111, %112
  store i16 %113, i16* %43, align 2
  %114 = getelementptr inbounds [13 x i16], [13 x i16]* @left_prediction_mask_uv, i64 0, i64 %25
  %115 = load i16, i16* %114, align 2
  %116 = zext i16 %115 to i32
  %117 = shl i32 %116, %52
  %118 = load i16, i16* %42, align 2
  %119 = trunc i32 %117 to i16
  %120 = or i16 %118, %119
  store i16 %120, i16* %42, align 2
  br label %121

121:                                              ; preds = %106, %93
  %122 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1, i64 0, i32 3
  %123 = load i8, i8* %122, align 1
  %124 = icmp eq i8 %123, 0
  br i1 %124, label %128, label %125

125:                                              ; preds = %121
  %126 = load i8, i8* %14, align 4
  %127 = icmp slt i8 %126, 1
  br i1 %127, label %128, label %179

128:                                              ; preds = %125, %121
  %129 = getelementptr inbounds [13 x i64], [13 x i64]* @size_mask, i64 0, i64 %25
  %130 = load i64, i64* %129, align 8
  %131 = getelementptr inbounds [4 x i64], [4 x i64]* @above_64x64_txform_mask, i64 0, i64 %26
  %132 = load i64, i64* %131, align 8
  %133 = and i64 %132, %130
  %134 = shl i64 %133, %94
  %135 = load i64, i64* %39, align 8
  %136 = or i64 %134, %135
  store i64 %136, i64* %39, align 8
  %137 = getelementptr inbounds [4 x i64], [4 x i64]* @left_64x64_txform_mask, i64 0, i64 %26
  %138 = load i64, i64* %137, align 8
  %139 = and i64 %138, %130
  %140 = shl i64 %139, %94
  %141 = load i64, i64* %38, align 8
  %142 = or i64 %140, %141
  store i64 %142, i64* %38, align 8
  br i1 %105, label %143, label %162

143:                                              ; preds = %128
  %144 = getelementptr inbounds [13 x i16], [13 x i16]* @size_mask_uv, i64 0, i64 %25
  %145 = load i16, i16* %144, align 2
  %146 = getelementptr inbounds [4 x i16], [4 x i16]* @above_64x64_txform_mask_uv, i64 0, i64 %41
  %147 = load i16, i16* %146, align 2
  %148 = and i16 %147, %145
  %149 = zext i16 %148 to i32
  %150 = shl i32 %149, %52
  %151 = load i16, i16* %43, align 2
  %152 = trunc i32 %150 to i16
  %153 = or i16 %151, %152
  store i16 %153, i16* %43, align 2
  %154 = getelementptr inbounds [4 x i16], [4 x i16]* @left_64x64_txform_mask_uv, i64 0, i64 %41
  %155 = load i16, i16* %154, align 2
  %156 = and i16 %155, %145
  %157 = zext i16 %156 to i32
  %158 = shl i32 %157, %52
  %159 = load i16, i16* %42, align 2
  %160 = trunc i32 %158 to i16
  %161 = or i16 %159, %160
  store i16 %161, i16* %42, align 2
  br label %162

162:                                              ; preds = %143, %128
  %163 = icmp eq i8 %10, 0
  br i1 %163, label %164, label %168

164:                                              ; preds = %162
  %165 = shl i64 %130, %94
  %166 = load i64, i64* %40, align 8
  %167 = or i64 %166, %165
  store i64 %167, i64* %40, align 8
  br label %168

168:                                              ; preds = %164, %162
  %169 = icmp eq i8 %28, 0
  %170 = and i1 %169, %105
  br i1 %170, label %171, label %179

171:                                              ; preds = %168
  %172 = getelementptr inbounds [13 x i16], [13 x i16]* @size_mask_uv, i64 0, i64 %25
  %173 = load i16, i16* %172, align 2
  %174 = zext i16 %173 to i32
  %175 = shl i32 %174, %52
  %176 = load i16, i16* %44, align 2
  %177 = trunc i32 %175 to i16
  %178 = or i16 %176, %177
  store i16 %178, i16* %44, align 2
  br label %179

179:                                              ; preds = %168, %171, %125, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_loop_filter_data_reset(%struct.LoopFilterWorkerData* nocapture, %struct.yv12_buffer_config*, %struct.VP9Common*, %struct.macroblockd_plane* nocapture readonly) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.LoopFilterWorkerData, %struct.LoopFilterWorkerData* %0, i64 0, i32 0
  store %struct.yv12_buffer_config* %1, %struct.yv12_buffer_config** %5, align 8
  %6 = getelementptr inbounds %struct.LoopFilterWorkerData, %struct.LoopFilterWorkerData* %0, i64 0, i32 1
  store %struct.VP9Common* %2, %struct.VP9Common** %6, align 8
  %7 = getelementptr inbounds %struct.LoopFilterWorkerData, %struct.LoopFilterWorkerData* %0, i64 0, i32 3
  store i32 0, i32* %7, align 8
  %8 = getelementptr inbounds %struct.LoopFilterWorkerData, %struct.LoopFilterWorkerData* %0, i64 0, i32 4
  store i32 0, i32* %8, align 4
  %9 = getelementptr inbounds %struct.LoopFilterWorkerData, %struct.LoopFilterWorkerData* %0, i64 0, i32 5
  store i32 0, i32* %9, align 8
  %10 = getelementptr inbounds %struct.LoopFilterWorkerData, %struct.LoopFilterWorkerData* %0, i64 0, i32 2, i64 0
  %11 = bitcast %struct.macroblockd_plane* %10 to i8*
  %12 = bitcast %struct.macroblockd_plane* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* align 8 %12, i64 408, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_reset_lfm(%struct.VP9Common* nocapture readonly) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 68, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %18, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 68, i32 10
  %7 = bitcast %struct.LOOP_FILTER_MASK** %6 to i8**
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 33
  %10 = load i32, i32* %9, align 16
  %11 = add nsw i32 %10, 7
  %12 = ashr i32 %11, 3
  %13 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 68, i32 11
  %14 = load i32, i32* %13, align 8
  %15 = mul nsw i32 %12, %14
  %16 = sext i32 %15 to i64
  %17 = mul nsw i64 %16, 160
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 %17, i1 false)
  br label %18

18:                                               ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp9_loop_filter_worker(i8*, i8* nocapture readnone) local_unnamed_addr #0 {
  %3 = bitcast i8* %0 to %struct.yv12_buffer_config**
  %4 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %struct.VP9Common**
  %7 = load %struct.VP9Common*, %struct.VP9Common** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %struct.macroblockd_plane*
  %10 = getelementptr inbounds i8, i8* %0, i64 424
  %11 = bitcast i8* %10 to i32*
  %12 = load i32, i32* %11, align 8
  %13 = getelementptr inbounds i8, i8* %0, i64 428
  %14 = bitcast i8* %13 to i32*
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds i8, i8* %0, i64 432
  %17 = bitcast i8* %16 to i32*
  %18 = load i32, i32* %17, align 8
  tail call fastcc void @loop_filter_rows(%struct.yv12_buffer_config* %4, %struct.VP9Common* %7, %struct.macroblockd_plane* %9, i32 %12, i32 %15, i32 %18)
  ret i32 1
}

declare void @vpx_highbd_lpf_vertical_16_sse2(i16*, i32, i8*, i8*, i8*, i32) local_unnamed_addr #3

declare void @vpx_highbd_lpf_vertical_8_sse2(i16*, i32, i8*, i8*, i8*, i32) local_unnamed_addr #3

declare void @vpx_highbd_lpf_vertical_4_sse2(i16*, i32, i8*, i8*, i8*, i32) local_unnamed_addr #3

declare void @vpx_lpf_vertical_16_sse2(i8*, i32, i8*, i8*, i8*) local_unnamed_addr #3

declare void @vpx_lpf_vertical_8_sse2(i8*, i32, i8*, i8*, i8*) local_unnamed_addr #3

declare void @vpx_lpf_vertical_4_sse2(i8*, i32, i8*, i8*, i8*) local_unnamed_addr #3

declare void @vpx_highbd_lpf_horizontal_16_dual_sse2(i16*, i32, i8*, i8*, i8*, i32) local_unnamed_addr #3

declare void @vpx_highbd_lpf_horizontal_16_sse2(i16*, i32, i8*, i8*, i8*, i32) local_unnamed_addr #3

declare void @vpx_highbd_lpf_horizontal_8_dual_sse2(i16*, i32, i8*, i8*, i8*, i8*, i8*, i8*, i32) local_unnamed_addr #3

declare void @vpx_highbd_lpf_horizontal_4_dual_sse2(i16*, i32, i8*, i8*, i8*, i8*, i8*, i8*, i32) local_unnamed_addr #3

declare void @vpx_highbd_lpf_horizontal_4_sse2(i16*, i32, i8*, i8*, i8*, i32) local_unnamed_addr #3

declare void @vpx_highbd_lpf_horizontal_8_sse2(i16*, i32, i8*, i8*, i8*, i32) local_unnamed_addr #3

declare void @vpx_lpf_horizontal_8_dual_sse2(i8*, i32, i8*, i8*, i8*, i8*, i8*, i8*) local_unnamed_addr #3

declare void @vpx_lpf_horizontal_4_dual_sse2(i8*, i32, i8*, i8*, i8*, i8*, i8*, i8*) local_unnamed_addr #3

declare void @vpx_lpf_horizontal_4_sse2(i8*, i32, i8*, i8*, i8*) local_unnamed_addr #3

declare void @vpx_lpf_horizontal_8_sse2(i8*, i32, i8*, i8*, i8*) local_unnamed_addr #3

declare void @vpx_highbd_lpf_vertical_16_dual_sse2(i16*, i32, i8*, i8*, i8*, i32) local_unnamed_addr #3

declare void @vpx_highbd_lpf_vertical_8_dual_sse2(i16*, i32, i8*, i8*, i8*, i8*, i8*, i8*, i32) local_unnamed_addr #3

declare void @vpx_highbd_lpf_vertical_4_dual_sse2(i16*, i32, i8*, i8*, i8*, i8*, i8*, i8*, i32) local_unnamed_addr #3

declare void @vpx_lpf_vertical_16_dual_sse2(i8*, i32, i8*, i8*, i8*) local_unnamed_addr #3

declare void @vpx_lpf_vertical_8_dual_sse2(i8*, i32, i8*, i8*, i8*, i8*, i8*, i8*) local_unnamed_addr #3

declare void @vpx_lpf_vertical_4_dual_sse2(i8*, i32, i8*, i8*, i8*, i8*, i8*, i8*) local_unnamed_addr #3

declare void @vp9_setup_dst_planes(%struct.macroblockd_plane*, %struct.yv12_buffer_config*, i32, i32) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
