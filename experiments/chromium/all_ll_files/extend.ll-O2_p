; ModuleID = '../../third_party/libvpx/source/libvpx/vp8/common/extend.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp8/common/extend.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_copy_and_extend_frame(%struct.yv12_buffer_config* nocapture readonly, %struct.yv12_buffer_config* nocapture readonly) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 19
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = add nsw i32 %6, %4
  %8 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = sub i32 %7, %9
  %11 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = add nsw i32 %12, %4
  %14 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 0
  %15 = load i32, i32* %14, align 8
  %16 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 15
  %17 = bitcast i8** %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 14
  %20 = bitcast i8** %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %18, %21
  %23 = icmp eq i64 %22, 1
  %24 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 13
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 13
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 4
  %29 = load i32, i32* %28, align 8
  %30 = sext i32 %4 to i64
  %31 = sub nsw i64 0, %30
  %32 = getelementptr inbounds i8, i8* %27, i64 %31
  %33 = sext i32 %15 to i64
  %34 = icmp sgt i32 %9, 0
  br i1 %34, label %35, label %82

35:                                               ; preds = %2
  %36 = sub nsw i32 %13, %15
  %37 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 4
  %38 = load i32, i32* %37, align 8
  %39 = getelementptr inbounds i8, i8* %27, i64 %33
  %40 = add nsw i32 %15, -1
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i8, i8* %25, i64 %41
  %43 = sext i32 %36 to i64
  %44 = sext i32 %38 to i64
  %45 = sext i32 %29 to i64
  %46 = and i32 %9, 1
  %47 = icmp eq i32 %9, 1
  br i1 %47, label %72, label %48

48:                                               ; preds = %35
  %49 = sub i32 %9, %46
  br label %50

50:                                               ; preds = %50, %48
  %51 = phi i8* [ %39, %48 ], [ %69, %50 ]
  %52 = phi i8* [ %32, %48 ], [ %68, %50 ]
  %53 = phi i8* [ %42, %48 ], [ %67, %50 ]
  %54 = phi i8* [ %25, %48 ], [ %66, %50 ]
  %55 = phi i32 [ %49, %48 ], [ %70, %50 ]
  %56 = load i8, i8* %54, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %52, i8 %56, i64 %30, i1 false) #3
  %57 = getelementptr inbounds i8, i8* %52, i64 %30
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %57, i8* align 1 %54, i64 %33, i1 false) #3
  %58 = load i8, i8* %53, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %51, i8 %58, i64 %43, i1 false) #3
  %59 = getelementptr inbounds i8, i8* %54, i64 %44
  %60 = getelementptr inbounds i8, i8* %53, i64 %44
  %61 = getelementptr inbounds i8, i8* %52, i64 %45
  %62 = getelementptr inbounds i8, i8* %51, i64 %45
  %63 = load i8, i8* %59, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %61, i8 %63, i64 %30, i1 false) #3
  %64 = getelementptr inbounds i8, i8* %61, i64 %30
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %64, i8* align 1 %59, i64 %33, i1 false) #3
  %65 = load i8, i8* %60, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %62, i8 %65, i64 %43, i1 false) #3
  %66 = getelementptr inbounds i8, i8* %59, i64 %44
  %67 = getelementptr inbounds i8, i8* %60, i64 %44
  %68 = getelementptr inbounds i8, i8* %61, i64 %45
  %69 = getelementptr inbounds i8, i8* %62, i64 %45
  %70 = add i32 %55, -2
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %72, label %50

72:                                               ; preds = %50, %35
  %73 = phi i8* [ %39, %35 ], [ %69, %50 ]
  %74 = phi i8* [ %32, %35 ], [ %68, %50 ]
  %75 = phi i8* [ %42, %35 ], [ %67, %50 ]
  %76 = phi i8* [ %25, %35 ], [ %66, %50 ]
  %77 = icmp eq i32 %46, 0
  br i1 %77, label %82, label %78

78:                                               ; preds = %72
  %79 = load i8, i8* %76, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %74, i8 %79, i64 %30, i1 false) #3
  %80 = getelementptr inbounds i8, i8* %74, i64 %30
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %80, i8* align 1 %76, i64 %33, i1 false) #3
  %81 = load i8, i8* %75, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %73, i8 %81, i64 %43, i1 false) #3
  br label %82

82:                                               ; preds = %78, %72, %2
  %83 = add nsw i32 %9, -1
  %84 = mul nsw i32 %29, %83
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds i8, i8* %27, i64 %85
  %87 = getelementptr inbounds i8, i8* %86, i64 %31
  %88 = mul nsw i32 %29, %9
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds i8, i8* %27, i64 %89
  %91 = getelementptr inbounds i8, i8* %90, i64 %31
  %92 = add i32 %13, %4
  %93 = icmp sgt i32 %4, 0
  br i1 %93, label %94, label %116

94:                                               ; preds = %82
  %95 = mul i32 %4, %29
  %96 = sub i32 0, %95
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds i8, i8* %27, i64 %97
  %99 = getelementptr inbounds i8, i8* %98, i64 %31
  %100 = sext i32 %92 to i64
  %101 = sext i32 %29 to i64
  %102 = add i32 %4, -1
  %103 = and i32 %4, 3
  %104 = icmp ult i32 %102, 3
  br i1 %104, label %107, label %105

105:                                              ; preds = %94
  %106 = sub i32 %4, %103
  br label %128

107:                                              ; preds = %128, %94
  %108 = phi i8* [ %99, %94 ], [ %134, %128 ]
  %109 = icmp eq i32 %103, 0
  br i1 %109, label %116, label %110

110:                                              ; preds = %107, %110
  %111 = phi i8* [ %113, %110 ], [ %108, %107 ]
  %112 = phi i32 [ %114, %110 ], [ %103, %107 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %111, i8* align 1 %32, i64 %100, i1 false) #3
  %113 = getelementptr inbounds i8, i8* %111, i64 %101
  %114 = add i32 %112, -1
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %116, label %110, !llvm.loop !2

116:                                              ; preds = %107, %110, %82
  %117 = icmp sgt i32 %10, 0
  br i1 %117, label %118, label %155

118:                                              ; preds = %116
  %119 = sext i32 %92 to i64
  %120 = sext i32 %29 to i64
  %121 = add i32 %6, %4
  %122 = xor i32 %9, -1
  %123 = add i32 %121, %122
  %124 = and i32 %10, 3
  %125 = icmp ult i32 %123, 3
  br i1 %125, label %146, label %126

126:                                              ; preds = %118
  %127 = sub i32 %10, %124
  br label %137

128:                                              ; preds = %128, %105
  %129 = phi i8* [ %99, %105 ], [ %134, %128 ]
  %130 = phi i32 [ %106, %105 ], [ %135, %128 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %129, i8* align 1 %32, i64 %100, i1 false) #3
  %131 = getelementptr inbounds i8, i8* %129, i64 %101
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %131, i8* align 1 %32, i64 %100, i1 false) #3
  %132 = getelementptr inbounds i8, i8* %131, i64 %101
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %132, i8* align 1 %32, i64 %100, i1 false) #3
  %133 = getelementptr inbounds i8, i8* %132, i64 %101
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %133, i8* align 1 %32, i64 %100, i1 false) #3
  %134 = getelementptr inbounds i8, i8* %133, i64 %101
  %135 = add i32 %130, -4
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %107, label %128

137:                                              ; preds = %137, %126
  %138 = phi i8* [ %91, %126 ], [ %143, %137 ]
  %139 = phi i32 [ %127, %126 ], [ %144, %137 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %138, i8* align 1 %87, i64 %119, i1 false) #3
  %140 = getelementptr inbounds i8, i8* %138, i64 %120
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %140, i8* align 1 %87, i64 %119, i1 false) #3
  %141 = getelementptr inbounds i8, i8* %140, i64 %120
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %141, i8* align 1 %87, i64 %119, i1 false) #3
  %142 = getelementptr inbounds i8, i8* %141, i64 %120
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %142, i8* align 1 %87, i64 %119, i1 false) #3
  %143 = getelementptr inbounds i8, i8* %142, i64 %120
  %144 = add i32 %139, -4
  %145 = icmp eq i32 %144, 0
  br i1 %145, label %146, label %137

146:                                              ; preds = %137, %118
  %147 = phi i8* [ %91, %118 ], [ %143, %137 ]
  %148 = icmp eq i32 %124, 0
  br i1 %148, label %155, label %149

149:                                              ; preds = %146, %149
  %150 = phi i8* [ %152, %149 ], [ %147, %146 ]
  %151 = phi i32 [ %153, %149 ], [ %124, %146 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %150, i8* align 1 %87, i64 %119, i1 false) #3
  %152 = getelementptr inbounds i8, i8* %150, i64 %120
  %153 = add i32 %151, -1
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %155, label %149, !llvm.loop !4

155:                                              ; preds = %146, %149, %116
  %156 = load i32, i32* %3, align 8
  %157 = ashr i32 %156, 1
  %158 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 6
  %159 = load i32, i32* %158, align 8
  %160 = add nsw i32 %157, %159
  %161 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 6
  %162 = load i32, i32* %161, align 8
  %163 = sub i32 %160, %162
  %164 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 5
  %165 = load i32, i32* %164, align 4
  %166 = add nsw i32 %165, %157
  %167 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 5
  %168 = load i32, i32* %167, align 4
  %169 = sub nsw i32 %166, %168
  %170 = load i8*, i8** %19, align 8
  %171 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 9
  %172 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 14
  %173 = load i8*, i8** %172, align 8
  %174 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 9
  %175 = load i32, i32* %174, align 4
  %176 = select i1 %23, i32 2, i32 1
  %177 = sext i32 %157 to i64
  %178 = sub nsw i64 0, %177
  %179 = getelementptr inbounds i8, i8* %173, i64 %178
  %180 = sext i32 %168 to i64
  %181 = icmp sgt i32 %162, 0
  br i1 %181, label %182, label %353

182:                                              ; preds = %155
  %183 = load i32, i32* %171, align 4
  %184 = getelementptr inbounds i8, i8* %173, i64 %180
  %185 = add nsw i32 %168, -1
  %186 = mul nsw i32 %185, %176
  %187 = sext i32 %186 to i64
  %188 = getelementptr inbounds i8, i8* %170, i64 %187
  %189 = icmp sgt i32 %168, 0
  %190 = sext i32 %169 to i64
  %191 = sext i32 %183 to i64
  %192 = sext i32 %175 to i64
  %193 = zext i32 %168 to i64
  %194 = add nsw i64 %193, -1
  %195 = and i64 %193, 4294967264
  %196 = add nsw i64 %195, -32
  %197 = lshr exact i64 %196, 5
  %198 = add nuw nsw i64 %197, 1
  %199 = icmp ult i32 %168, 32
  %200 = icmp ugt i64 %194, 4294967295
  %201 = or i1 %23, %200
  %202 = or i1 %199, %201
  %203 = and i64 %193, 4294967264
  %204 = and i64 %198, 1
  %205 = icmp eq i64 %196, 0
  %206 = sub nuw nsw i64 %198, %204
  %207 = icmp eq i64 %204, 0
  %208 = icmp eq i64 %203, %193
  %209 = and i64 %193, 3
  %210 = icmp eq i64 %209, 0
  br label %211

211:                                              ; preds = %344, %182
  %212 = phi i64 [ %352, %344 ], [ 0, %182 ]
  %213 = phi i8* [ %349, %344 ], [ %184, %182 ]
  %214 = phi i8* [ %348, %344 ], [ %179, %182 ]
  %215 = phi i8* [ %347, %344 ], [ %188, %182 ]
  %216 = phi i8* [ %346, %344 ], [ %170, %182 ]
  %217 = phi i32 [ %350, %344 ], [ 0, %182 ]
  %218 = mul i64 %212, %192
  %219 = getelementptr i8, i8* %173, i64 %218
  %220 = add i64 %218, %193
  %221 = getelementptr i8, i8* %173, i64 %220
  %222 = mul i64 %212, %191
  %223 = getelementptr i8, i8* %170, i64 %222
  %224 = add i64 %222, %193
  %225 = getelementptr i8, i8* %170, i64 %224
  %226 = load i8, i8* %216, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %214, i8 %226, i64 %177, i1 false) #3
  br i1 %23, label %227, label %307

227:                                              ; preds = %211
  br i1 %189, label %228, label %344

228:                                              ; preds = %227
  br i1 %202, label %229, label %249

229:                                              ; preds = %306, %249, %228
  %230 = phi i64 [ 0, %249 ], [ 0, %228 ], [ %203, %306 ]
  %231 = xor i64 %230, -1
  %232 = add nsw i64 %231, %193
  br i1 %210, label %246, label %233

233:                                              ; preds = %229, %233
  %234 = phi i64 [ %243, %233 ], [ %230, %229 ]
  %235 = phi i64 [ %244, %233 ], [ %209, %229 ]
  %236 = trunc i64 %234 to i32
  %237 = mul i32 %176, %236
  %238 = zext i32 %237 to i64
  %239 = getelementptr inbounds i8, i8* %216, i64 %238
  %240 = load i8, i8* %239, align 1
  %241 = add nsw i64 %234, %177
  %242 = getelementptr inbounds i8, i8* %214, i64 %241
  store i8 %240, i8* %242, align 1
  %243 = add nuw nsw i64 %234, 1
  %244 = add i64 %235, -1
  %245 = icmp eq i64 %244, 0
  br i1 %245, label %246, label %233, !llvm.loop !5

246:                                              ; preds = %233, %229
  %247 = phi i64 [ %230, %229 ], [ %243, %233 ]
  %248 = icmp ult i64 %232, 3
  br i1 %248, label %344, label %309

249:                                              ; preds = %228
  %250 = icmp ult i8* %219, %225
  %251 = icmp ult i8* %223, %221
  %252 = and i1 %250, %251
  br i1 %252, label %229, label %253

253:                                              ; preds = %249
  br i1 %205, label %289, label %254

254:                                              ; preds = %253, %254
  %255 = phi i64 [ %286, %254 ], [ 0, %253 ]
  %256 = phi i64 [ %287, %254 ], [ %206, %253 ]
  %257 = trunc i64 %255 to i32
  %258 = mul i32 %176, %257
  %259 = zext i32 %258 to i64
  %260 = getelementptr inbounds i8, i8* %216, i64 %259
  %261 = bitcast i8* %260 to <16 x i8>*
  %262 = load <16 x i8>, <16 x i8>* %261, align 1, !alias.scope !6
  %263 = getelementptr inbounds i8, i8* %260, i64 16
  %264 = bitcast i8* %263 to <16 x i8>*
  %265 = load <16 x i8>, <16 x i8>* %264, align 1, !alias.scope !6
  %266 = add nsw i64 %255, %177
  %267 = getelementptr inbounds i8, i8* %214, i64 %266
  %268 = bitcast i8* %267 to <16 x i8>*
  store <16 x i8> %262, <16 x i8>* %268, align 1, !alias.scope !9, !noalias !6
  %269 = getelementptr inbounds i8, i8* %267, i64 16
  %270 = bitcast i8* %269 to <16 x i8>*
  store <16 x i8> %265, <16 x i8>* %270, align 1, !alias.scope !9, !noalias !6
  %271 = or i64 %255, 32
  %272 = trunc i64 %271 to i32
  %273 = mul i32 %176, %272
  %274 = zext i32 %273 to i64
  %275 = getelementptr inbounds i8, i8* %216, i64 %274
  %276 = bitcast i8* %275 to <16 x i8>*
  %277 = load <16 x i8>, <16 x i8>* %276, align 1, !alias.scope !6
  %278 = getelementptr inbounds i8, i8* %275, i64 16
  %279 = bitcast i8* %278 to <16 x i8>*
  %280 = load <16 x i8>, <16 x i8>* %279, align 1, !alias.scope !6
  %281 = add nsw i64 %271, %177
  %282 = getelementptr inbounds i8, i8* %214, i64 %281
  %283 = bitcast i8* %282 to <16 x i8>*
  store <16 x i8> %277, <16 x i8>* %283, align 1, !alias.scope !9, !noalias !6
  %284 = getelementptr inbounds i8, i8* %282, i64 16
  %285 = bitcast i8* %284 to <16 x i8>*
  store <16 x i8> %280, <16 x i8>* %285, align 1, !alias.scope !9, !noalias !6
  %286 = add i64 %255, 64
  %287 = add i64 %256, -2
  %288 = icmp eq i64 %287, 0
  br i1 %288, label %289, label %254, !llvm.loop !11

289:                                              ; preds = %254, %253
  %290 = phi i64 [ 0, %253 ], [ %286, %254 ]
  br i1 %207, label %306, label %291

291:                                              ; preds = %289
  %292 = trunc i64 %290 to i32
  %293 = mul i32 %176, %292
  %294 = zext i32 %293 to i64
  %295 = getelementptr inbounds i8, i8* %216, i64 %294
  %296 = bitcast i8* %295 to <16 x i8>*
  %297 = load <16 x i8>, <16 x i8>* %296, align 1, !alias.scope !6
  %298 = getelementptr inbounds i8, i8* %295, i64 16
  %299 = bitcast i8* %298 to <16 x i8>*
  %300 = load <16 x i8>, <16 x i8>* %299, align 1, !alias.scope !6
  %301 = add nsw i64 %290, %177
  %302 = getelementptr inbounds i8, i8* %214, i64 %301
  %303 = bitcast i8* %302 to <16 x i8>*
  store <16 x i8> %297, <16 x i8>* %303, align 1, !alias.scope !9, !noalias !6
  %304 = getelementptr inbounds i8, i8* %302, i64 16
  %305 = bitcast i8* %304 to <16 x i8>*
  store <16 x i8> %300, <16 x i8>* %305, align 1, !alias.scope !9, !noalias !6
  br label %306

306:                                              ; preds = %289, %291
  br i1 %208, label %344, label %229

307:                                              ; preds = %211
  %308 = getelementptr inbounds i8, i8* %214, i64 %177
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %308, i8* align 1 %216, i64 %180, i1 false) #3
  br label %344

309:                                              ; preds = %246, %309
  %310 = phi i64 [ %342, %309 ], [ %247, %246 ]
  %311 = trunc i64 %310 to i32
  %312 = mul i32 %176, %311
  %313 = zext i32 %312 to i64
  %314 = getelementptr inbounds i8, i8* %216, i64 %313
  %315 = load i8, i8* %314, align 1
  %316 = add nsw i64 %310, %177
  %317 = getelementptr inbounds i8, i8* %214, i64 %316
  store i8 %315, i8* %317, align 1
  %318 = add nuw nsw i64 %310, 1
  %319 = trunc i64 %318 to i32
  %320 = mul i32 %176, %319
  %321 = zext i32 %320 to i64
  %322 = getelementptr inbounds i8, i8* %216, i64 %321
  %323 = load i8, i8* %322, align 1
  %324 = add nsw i64 %318, %177
  %325 = getelementptr inbounds i8, i8* %214, i64 %324
  store i8 %323, i8* %325, align 1
  %326 = add nuw nsw i64 %310, 2
  %327 = trunc i64 %326 to i32
  %328 = mul i32 %176, %327
  %329 = zext i32 %328 to i64
  %330 = getelementptr inbounds i8, i8* %216, i64 %329
  %331 = load i8, i8* %330, align 1
  %332 = add nsw i64 %326, %177
  %333 = getelementptr inbounds i8, i8* %214, i64 %332
  store i8 %331, i8* %333, align 1
  %334 = add nuw nsw i64 %310, 3
  %335 = trunc i64 %334 to i32
  %336 = mul i32 %176, %335
  %337 = zext i32 %336 to i64
  %338 = getelementptr inbounds i8, i8* %216, i64 %337
  %339 = load i8, i8* %338, align 1
  %340 = add nsw i64 %334, %177
  %341 = getelementptr inbounds i8, i8* %214, i64 %340
  store i8 %339, i8* %341, align 1
  %342 = add nuw nsw i64 %310, 4
  %343 = icmp eq i64 %342, %193
  br i1 %343, label %344, label %309, !llvm.loop !13

344:                                              ; preds = %246, %309, %306, %307, %227
  %345 = load i8, i8* %215, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %213, i8 %345, i64 %190, i1 false) #3
  %346 = getelementptr inbounds i8, i8* %216, i64 %191
  %347 = getelementptr inbounds i8, i8* %215, i64 %191
  %348 = getelementptr inbounds i8, i8* %214, i64 %192
  %349 = getelementptr inbounds i8, i8* %213, i64 %192
  %350 = add nuw nsw i32 %217, 1
  %351 = icmp eq i32 %350, %162
  %352 = add i64 %212, 1
  br i1 %351, label %353, label %211

353:                                              ; preds = %344, %155
  %354 = add nsw i32 %162, -1
  %355 = mul nsw i32 %175, %354
  %356 = sext i32 %355 to i64
  %357 = getelementptr inbounds i8, i8* %173, i64 %356
  %358 = getelementptr inbounds i8, i8* %357, i64 %178
  %359 = mul nsw i32 %175, %162
  %360 = sext i32 %359 to i64
  %361 = getelementptr inbounds i8, i8* %173, i64 %360
  %362 = getelementptr inbounds i8, i8* %361, i64 %178
  %363 = add i32 %166, %157
  %364 = icmp sgt i32 %156, 1
  br i1 %364, label %365, label %387

365:                                              ; preds = %353
  %366 = mul i32 %157, %175
  %367 = sub i32 0, %366
  %368 = sext i32 %367 to i64
  %369 = getelementptr inbounds i8, i8* %173, i64 %368
  %370 = getelementptr inbounds i8, i8* %369, i64 %178
  %371 = sext i32 %363 to i64
  %372 = sext i32 %175 to i64
  %373 = add nsw i32 %157, -1
  %374 = and i32 %157, 3
  %375 = icmp ult i32 %373, 3
  br i1 %375, label %378, label %376

376:                                              ; preds = %365
  %377 = sub nsw i32 %157, %374
  br label %399

378:                                              ; preds = %399, %365
  %379 = phi i8* [ %370, %365 ], [ %405, %399 ]
  %380 = icmp eq i32 %374, 0
  br i1 %380, label %387, label %381

381:                                              ; preds = %378, %381
  %382 = phi i8* [ %384, %381 ], [ %379, %378 ]
  %383 = phi i32 [ %385, %381 ], [ %374, %378 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %382, i8* align 1 %179, i64 %371, i1 false) #3
  %384 = getelementptr inbounds i8, i8* %382, i64 %372
  %385 = add i32 %383, -1
  %386 = icmp eq i32 %385, 0
  br i1 %386, label %387, label %381, !llvm.loop !14

387:                                              ; preds = %378, %381, %353
  %388 = icmp sgt i32 %163, 0
  br i1 %388, label %389, label %426

389:                                              ; preds = %387
  %390 = sext i32 %363 to i64
  %391 = sext i32 %175 to i64
  %392 = add i32 %159, %157
  %393 = xor i32 %162, -1
  %394 = add i32 %392, %393
  %395 = and i32 %163, 3
  %396 = icmp ult i32 %394, 3
  br i1 %396, label %417, label %397

397:                                              ; preds = %389
  %398 = sub i32 %163, %395
  br label %408

399:                                              ; preds = %399, %376
  %400 = phi i8* [ %370, %376 ], [ %405, %399 ]
  %401 = phi i32 [ %377, %376 ], [ %406, %399 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %400, i8* align 1 %179, i64 %371, i1 false) #3
  %402 = getelementptr inbounds i8, i8* %400, i64 %372
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %402, i8* align 1 %179, i64 %371, i1 false) #3
  %403 = getelementptr inbounds i8, i8* %402, i64 %372
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %403, i8* align 1 %179, i64 %371, i1 false) #3
  %404 = getelementptr inbounds i8, i8* %403, i64 %372
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %404, i8* align 1 %179, i64 %371, i1 false) #3
  %405 = getelementptr inbounds i8, i8* %404, i64 %372
  %406 = add i32 %401, -4
  %407 = icmp eq i32 %406, 0
  br i1 %407, label %378, label %399

408:                                              ; preds = %408, %397
  %409 = phi i8* [ %362, %397 ], [ %414, %408 ]
  %410 = phi i32 [ %398, %397 ], [ %415, %408 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %409, i8* align 1 %358, i64 %390, i1 false) #3
  %411 = getelementptr inbounds i8, i8* %409, i64 %391
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %411, i8* align 1 %358, i64 %390, i1 false) #3
  %412 = getelementptr inbounds i8, i8* %411, i64 %391
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %412, i8* align 1 %358, i64 %390, i1 false) #3
  %413 = getelementptr inbounds i8, i8* %412, i64 %391
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %413, i8* align 1 %358, i64 %390, i1 false) #3
  %414 = getelementptr inbounds i8, i8* %413, i64 %391
  %415 = add i32 %410, -4
  %416 = icmp eq i32 %415, 0
  br i1 %416, label %417, label %408

417:                                              ; preds = %408, %389
  %418 = phi i8* [ %362, %389 ], [ %414, %408 ]
  %419 = icmp eq i32 %395, 0
  br i1 %419, label %426, label %420

420:                                              ; preds = %417, %420
  %421 = phi i8* [ %423, %420 ], [ %418, %417 ]
  %422 = phi i32 [ %424, %420 ], [ %395, %417 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %421, i8* align 1 %358, i64 %390, i1 false) #3
  %423 = getelementptr inbounds i8, i8* %421, i64 %391
  %424 = add i32 %422, -1
  %425 = icmp eq i32 %424, 0
  br i1 %425, label %426, label %420, !llvm.loop !15

426:                                              ; preds = %417, %420, %387
  %427 = load i8*, i8** %16, align 8
  %428 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 15
  %429 = load i8*, i8** %428, align 8
  %430 = load i32, i32* %174, align 4
  %431 = load i32, i32* %161, align 8
  %432 = load i32, i32* %167, align 4
  %433 = getelementptr inbounds i8, i8* %429, i64 %178
  %434 = sext i32 %432 to i64
  %435 = icmp sgt i32 %431, 0
  br i1 %435, label %436, label %607

436:                                              ; preds = %426
  %437 = load i32, i32* %171, align 4
  %438 = getelementptr inbounds i8, i8* %429, i64 %434
  %439 = add nsw i32 %432, -1
  %440 = mul nsw i32 %439, %176
  %441 = sext i32 %440 to i64
  %442 = getelementptr inbounds i8, i8* %427, i64 %441
  %443 = icmp sgt i32 %432, 0
  %444 = sext i32 %169 to i64
  %445 = sext i32 %437 to i64
  %446 = sext i32 %430 to i64
  %447 = zext i32 %432 to i64
  %448 = add nsw i64 %447, -1
  %449 = and i64 %447, 4294967264
  %450 = add nsw i64 %449, -32
  %451 = lshr exact i64 %450, 5
  %452 = add nuw nsw i64 %451, 1
  %453 = icmp ult i32 %432, 32
  %454 = icmp ugt i64 %448, 4294967295
  %455 = or i1 %23, %454
  %456 = or i1 %453, %455
  %457 = and i64 %447, 4294967264
  %458 = and i64 %452, 1
  %459 = icmp eq i64 %450, 0
  %460 = sub nuw nsw i64 %452, %458
  %461 = icmp eq i64 %458, 0
  %462 = icmp eq i64 %457, %447
  %463 = and i64 %447, 3
  %464 = icmp eq i64 %463, 0
  br label %465

465:                                              ; preds = %598, %436
  %466 = phi i64 [ %606, %598 ], [ 0, %436 ]
  %467 = phi i8* [ %603, %598 ], [ %438, %436 ]
  %468 = phi i8* [ %602, %598 ], [ %433, %436 ]
  %469 = phi i8* [ %601, %598 ], [ %442, %436 ]
  %470 = phi i8* [ %600, %598 ], [ %427, %436 ]
  %471 = phi i32 [ %604, %598 ], [ 0, %436 ]
  %472 = mul i64 %466, %446
  %473 = getelementptr i8, i8* %429, i64 %472
  %474 = add i64 %472, %447
  %475 = getelementptr i8, i8* %429, i64 %474
  %476 = mul i64 %466, %445
  %477 = getelementptr i8, i8* %427, i64 %476
  %478 = add i64 %476, %447
  %479 = getelementptr i8, i8* %427, i64 %478
  %480 = load i8, i8* %470, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %468, i8 %480, i64 %177, i1 false) #3
  br i1 %23, label %481, label %561

481:                                              ; preds = %465
  br i1 %443, label %482, label %598

482:                                              ; preds = %481
  br i1 %456, label %483, label %503

483:                                              ; preds = %560, %503, %482
  %484 = phi i64 [ 0, %503 ], [ 0, %482 ], [ %457, %560 ]
  %485 = xor i64 %484, -1
  %486 = add nsw i64 %485, %447
  br i1 %464, label %500, label %487

487:                                              ; preds = %483, %487
  %488 = phi i64 [ %497, %487 ], [ %484, %483 ]
  %489 = phi i64 [ %498, %487 ], [ %463, %483 ]
  %490 = trunc i64 %488 to i32
  %491 = mul i32 %176, %490
  %492 = zext i32 %491 to i64
  %493 = getelementptr inbounds i8, i8* %470, i64 %492
  %494 = load i8, i8* %493, align 1
  %495 = add nsw i64 %488, %177
  %496 = getelementptr inbounds i8, i8* %468, i64 %495
  store i8 %494, i8* %496, align 1
  %497 = add nuw nsw i64 %488, 1
  %498 = add i64 %489, -1
  %499 = icmp eq i64 %498, 0
  br i1 %499, label %500, label %487, !llvm.loop !16

500:                                              ; preds = %487, %483
  %501 = phi i64 [ %484, %483 ], [ %497, %487 ]
  %502 = icmp ult i64 %486, 3
  br i1 %502, label %598, label %563

503:                                              ; preds = %482
  %504 = icmp ult i8* %473, %479
  %505 = icmp ult i8* %477, %475
  %506 = and i1 %504, %505
  br i1 %506, label %483, label %507

507:                                              ; preds = %503
  br i1 %459, label %543, label %508

508:                                              ; preds = %507, %508
  %509 = phi i64 [ %540, %508 ], [ 0, %507 ]
  %510 = phi i64 [ %541, %508 ], [ %460, %507 ]
  %511 = trunc i64 %509 to i32
  %512 = mul i32 %176, %511
  %513 = zext i32 %512 to i64
  %514 = getelementptr inbounds i8, i8* %470, i64 %513
  %515 = bitcast i8* %514 to <16 x i8>*
  %516 = load <16 x i8>, <16 x i8>* %515, align 1, !alias.scope !17
  %517 = getelementptr inbounds i8, i8* %514, i64 16
  %518 = bitcast i8* %517 to <16 x i8>*
  %519 = load <16 x i8>, <16 x i8>* %518, align 1, !alias.scope !17
  %520 = add nsw i64 %509, %177
  %521 = getelementptr inbounds i8, i8* %468, i64 %520
  %522 = bitcast i8* %521 to <16 x i8>*
  store <16 x i8> %516, <16 x i8>* %522, align 1, !alias.scope !20, !noalias !17
  %523 = getelementptr inbounds i8, i8* %521, i64 16
  %524 = bitcast i8* %523 to <16 x i8>*
  store <16 x i8> %519, <16 x i8>* %524, align 1, !alias.scope !20, !noalias !17
  %525 = or i64 %509, 32
  %526 = trunc i64 %525 to i32
  %527 = mul i32 %176, %526
  %528 = zext i32 %527 to i64
  %529 = getelementptr inbounds i8, i8* %470, i64 %528
  %530 = bitcast i8* %529 to <16 x i8>*
  %531 = load <16 x i8>, <16 x i8>* %530, align 1, !alias.scope !17
  %532 = getelementptr inbounds i8, i8* %529, i64 16
  %533 = bitcast i8* %532 to <16 x i8>*
  %534 = load <16 x i8>, <16 x i8>* %533, align 1, !alias.scope !17
  %535 = add nsw i64 %525, %177
  %536 = getelementptr inbounds i8, i8* %468, i64 %535
  %537 = bitcast i8* %536 to <16 x i8>*
  store <16 x i8> %531, <16 x i8>* %537, align 1, !alias.scope !20, !noalias !17
  %538 = getelementptr inbounds i8, i8* %536, i64 16
  %539 = bitcast i8* %538 to <16 x i8>*
  store <16 x i8> %534, <16 x i8>* %539, align 1, !alias.scope !20, !noalias !17
  %540 = add i64 %509, 64
  %541 = add i64 %510, -2
  %542 = icmp eq i64 %541, 0
  br i1 %542, label %543, label %508, !llvm.loop !22

543:                                              ; preds = %508, %507
  %544 = phi i64 [ 0, %507 ], [ %540, %508 ]
  br i1 %461, label %560, label %545

545:                                              ; preds = %543
  %546 = trunc i64 %544 to i32
  %547 = mul i32 %176, %546
  %548 = zext i32 %547 to i64
  %549 = getelementptr inbounds i8, i8* %470, i64 %548
  %550 = bitcast i8* %549 to <16 x i8>*
  %551 = load <16 x i8>, <16 x i8>* %550, align 1, !alias.scope !17
  %552 = getelementptr inbounds i8, i8* %549, i64 16
  %553 = bitcast i8* %552 to <16 x i8>*
  %554 = load <16 x i8>, <16 x i8>* %553, align 1, !alias.scope !17
  %555 = add nsw i64 %544, %177
  %556 = getelementptr inbounds i8, i8* %468, i64 %555
  %557 = bitcast i8* %556 to <16 x i8>*
  store <16 x i8> %551, <16 x i8>* %557, align 1, !alias.scope !20, !noalias !17
  %558 = getelementptr inbounds i8, i8* %556, i64 16
  %559 = bitcast i8* %558 to <16 x i8>*
  store <16 x i8> %554, <16 x i8>* %559, align 1, !alias.scope !20, !noalias !17
  br label %560

560:                                              ; preds = %543, %545
  br i1 %462, label %598, label %483

561:                                              ; preds = %465
  %562 = getelementptr inbounds i8, i8* %468, i64 %177
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %562, i8* align 1 %470, i64 %434, i1 false) #3
  br label %598

563:                                              ; preds = %500, %563
  %564 = phi i64 [ %596, %563 ], [ %501, %500 ]
  %565 = trunc i64 %564 to i32
  %566 = mul i32 %176, %565
  %567 = zext i32 %566 to i64
  %568 = getelementptr inbounds i8, i8* %470, i64 %567
  %569 = load i8, i8* %568, align 1
  %570 = add nsw i64 %564, %177
  %571 = getelementptr inbounds i8, i8* %468, i64 %570
  store i8 %569, i8* %571, align 1
  %572 = add nuw nsw i64 %564, 1
  %573 = trunc i64 %572 to i32
  %574 = mul i32 %176, %573
  %575 = zext i32 %574 to i64
  %576 = getelementptr inbounds i8, i8* %470, i64 %575
  %577 = load i8, i8* %576, align 1
  %578 = add nsw i64 %572, %177
  %579 = getelementptr inbounds i8, i8* %468, i64 %578
  store i8 %577, i8* %579, align 1
  %580 = add nuw nsw i64 %564, 2
  %581 = trunc i64 %580 to i32
  %582 = mul i32 %176, %581
  %583 = zext i32 %582 to i64
  %584 = getelementptr inbounds i8, i8* %470, i64 %583
  %585 = load i8, i8* %584, align 1
  %586 = add nsw i64 %580, %177
  %587 = getelementptr inbounds i8, i8* %468, i64 %586
  store i8 %585, i8* %587, align 1
  %588 = add nuw nsw i64 %564, 3
  %589 = trunc i64 %588 to i32
  %590 = mul i32 %176, %589
  %591 = zext i32 %590 to i64
  %592 = getelementptr inbounds i8, i8* %470, i64 %591
  %593 = load i8, i8* %592, align 1
  %594 = add nsw i64 %588, %177
  %595 = getelementptr inbounds i8, i8* %468, i64 %594
  store i8 %593, i8* %595, align 1
  %596 = add nuw nsw i64 %564, 4
  %597 = icmp eq i64 %596, %447
  br i1 %597, label %598, label %563, !llvm.loop !23

598:                                              ; preds = %500, %563, %560, %561, %481
  %599 = load i8, i8* %469, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %467, i8 %599, i64 %444, i1 false) #3
  %600 = getelementptr inbounds i8, i8* %470, i64 %445
  %601 = getelementptr inbounds i8, i8* %469, i64 %445
  %602 = getelementptr inbounds i8, i8* %468, i64 %446
  %603 = getelementptr inbounds i8, i8* %467, i64 %446
  %604 = add nuw nsw i32 %471, 1
  %605 = icmp eq i32 %604, %431
  %606 = add i64 %466, 1
  br i1 %605, label %607, label %465

607:                                              ; preds = %598, %426
  %608 = add nsw i32 %431, -1
  %609 = mul nsw i32 %608, %430
  %610 = sext i32 %609 to i64
  %611 = getelementptr inbounds i8, i8* %429, i64 %610
  %612 = getelementptr inbounds i8, i8* %611, i64 %178
  %613 = mul nsw i32 %431, %430
  %614 = sext i32 %613 to i64
  %615 = getelementptr inbounds i8, i8* %429, i64 %614
  %616 = getelementptr inbounds i8, i8* %615, i64 %178
  %617 = add i32 %169, %157
  %618 = add i32 %617, %432
  br i1 %364, label %619, label %641

619:                                              ; preds = %607
  %620 = mul i32 %157, %430
  %621 = sub i32 0, %620
  %622 = sext i32 %621 to i64
  %623 = getelementptr inbounds i8, i8* %429, i64 %622
  %624 = getelementptr inbounds i8, i8* %623, i64 %178
  %625 = sext i32 %618 to i64
  %626 = sext i32 %430 to i64
  %627 = add nsw i32 %157, -1
  %628 = and i32 %157, 3
  %629 = icmp ult i32 %627, 3
  br i1 %629, label %632, label %630

630:                                              ; preds = %619
  %631 = sub nsw i32 %157, %628
  br label %652

632:                                              ; preds = %652, %619
  %633 = phi i8* [ %624, %619 ], [ %658, %652 ]
  %634 = icmp eq i32 %628, 0
  br i1 %634, label %641, label %635

635:                                              ; preds = %632, %635
  %636 = phi i8* [ %638, %635 ], [ %633, %632 ]
  %637 = phi i32 [ %639, %635 ], [ %628, %632 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %636, i8* align 1 %433, i64 %625, i1 false) #3
  %638 = getelementptr inbounds i8, i8* %636, i64 %626
  %639 = add i32 %637, -1
  %640 = icmp eq i32 %639, 0
  br i1 %640, label %641, label %635, !llvm.loop !24

641:                                              ; preds = %632, %635, %607
  br i1 %388, label %642, label %679

642:                                              ; preds = %641
  %643 = sext i32 %618 to i64
  %644 = sext i32 %430 to i64
  %645 = add i32 %159, %157
  %646 = xor i32 %162, -1
  %647 = add i32 %645, %646
  %648 = and i32 %163, 3
  %649 = icmp ult i32 %647, 3
  br i1 %649, label %670, label %650

650:                                              ; preds = %642
  %651 = sub i32 %163, %648
  br label %661

652:                                              ; preds = %652, %630
  %653 = phi i8* [ %624, %630 ], [ %658, %652 ]
  %654 = phi i32 [ %631, %630 ], [ %659, %652 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %653, i8* align 1 %433, i64 %625, i1 false) #3
  %655 = getelementptr inbounds i8, i8* %653, i64 %626
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %655, i8* align 1 %433, i64 %625, i1 false) #3
  %656 = getelementptr inbounds i8, i8* %655, i64 %626
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %656, i8* align 1 %433, i64 %625, i1 false) #3
  %657 = getelementptr inbounds i8, i8* %656, i64 %626
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %657, i8* align 1 %433, i64 %625, i1 false) #3
  %658 = getelementptr inbounds i8, i8* %657, i64 %626
  %659 = add i32 %654, -4
  %660 = icmp eq i32 %659, 0
  br i1 %660, label %632, label %652

661:                                              ; preds = %661, %650
  %662 = phi i8* [ %616, %650 ], [ %667, %661 ]
  %663 = phi i32 [ %651, %650 ], [ %668, %661 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %662, i8* align 1 %612, i64 %643, i1 false) #3
  %664 = getelementptr inbounds i8, i8* %662, i64 %644
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %664, i8* align 1 %612, i64 %643, i1 false) #3
  %665 = getelementptr inbounds i8, i8* %664, i64 %644
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %665, i8* align 1 %612, i64 %643, i1 false) #3
  %666 = getelementptr inbounds i8, i8* %665, i64 %644
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %666, i8* align 1 %612, i64 %643, i1 false) #3
  %667 = getelementptr inbounds i8, i8* %666, i64 %644
  %668 = add i32 %663, -4
  %669 = icmp eq i32 %668, 0
  br i1 %669, label %670, label %661

670:                                              ; preds = %661, %642
  %671 = phi i8* [ %616, %642 ], [ %667, %661 ]
  %672 = icmp eq i32 %648, 0
  br i1 %672, label %679, label %673

673:                                              ; preds = %670, %673
  %674 = phi i8* [ %676, %673 ], [ %671, %670 ]
  %675 = phi i32 [ %677, %673 ], [ %648, %670 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %674, i8* align 1 %612, i64 %643, i1 false) #3
  %676 = getelementptr inbounds i8, i8* %674, i64 %644
  %677 = add i32 %675, -1
  %678 = icmp eq i32 %677, 0
  br i1 %678, label %679, label %673, !llvm.loop !25

679:                                              ; preds = %670, %673, %641
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_copy_and_extend_frame_with_rect(%struct.yv12_buffer_config* nocapture readonly, %struct.yv12_buffer_config* nocapture readonly, i32, i32, i32, i32) local_unnamed_addr #0 {
  %7 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 19
  %8 = load i32, i32* %7, align 8
  %9 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = add nsw i32 %10, %8
  %12 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = sub i32 %11, %13
  %15 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 0
  %16 = load i32, i32* %15, align 8
  %17 = add nsw i32 %16, %8
  %18 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 0
  %19 = load i32, i32* %18, align 8
  %20 = sub i32 %17, %19
  %21 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 4
  %22 = load i32, i32* %21, align 8
  %23 = mul nsw i32 %22, %2
  %24 = add nsw i32 %23, %3
  %25 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 4
  %26 = load i32, i32* %25, align 8
  %27 = mul nsw i32 %26, %2
  %28 = add nsw i32 %27, %3
  %29 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 9
  %30 = load i32, i32* %29, align 4
  %31 = mul nsw i32 %30, %2
  %32 = ashr i32 %31, 1
  %33 = ashr i32 %3, 1
  %34 = add nsw i32 %32, %33
  %35 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 9
  %36 = load i32, i32* %35, align 4
  %37 = mul nsw i32 %36, %2
  %38 = ashr i32 %37, 1
  %39 = add nsw i32 %38, %33
  %40 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 15
  %41 = bitcast i8** %40 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 14
  %44 = bitcast i8** %43 to i64*
  %45 = load i64, i64* %44, align 8
  %46 = sub i64 %42, %45
  %47 = icmp eq i64 %46, 1
  %48 = icmp eq i32 %2, 0
  %49 = select i1 %48, i32 %8, i32 0
  %50 = icmp eq i32 %3, 0
  %51 = select i1 %50, i32 %8, i32 0
  %52 = add nsw i32 %4, %2
  %53 = icmp eq i32 %52, %13
  %54 = select i1 %53, i32 %14, i32 0
  %55 = add nsw i32 %5, %3
  %56 = icmp eq i32 %55, %19
  %57 = select i1 %56, i32 %20, i32 0
  %58 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 13
  %59 = load i8*, i8** %58, align 8
  %60 = sext i32 %24 to i64
  %61 = getelementptr inbounds i8, i8* %59, i64 %60
  %62 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 13
  %63 = load i8*, i8** %62, align 8
  %64 = sext i32 %28 to i64
  %65 = getelementptr inbounds i8, i8* %63, i64 %64
  %66 = sext i32 %51 to i64
  %67 = sub nsw i64 0, %66
  %68 = getelementptr inbounds i8, i8* %65, i64 %67
  %69 = sext i32 %5 to i64
  %70 = icmp sgt i32 %4, 0
  br i1 %70, label %71, label %115

71:                                               ; preds = %6
  %72 = getelementptr inbounds i8, i8* %65, i64 %69
  %73 = add nsw i32 %5, -1
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds i8, i8* %61, i64 %74
  %76 = sext i32 %57 to i64
  %77 = sext i32 %22 to i64
  %78 = sext i32 %26 to i64
  %79 = and i32 %4, 1
  %80 = icmp eq i32 %4, 1
  br i1 %80, label %105, label %81

81:                                               ; preds = %71
  %82 = sub i32 %4, %79
  br label %83

83:                                               ; preds = %83, %81
  %84 = phi i8* [ %72, %81 ], [ %102, %83 ]
  %85 = phi i8* [ %68, %81 ], [ %101, %83 ]
  %86 = phi i8* [ %75, %81 ], [ %100, %83 ]
  %87 = phi i8* [ %61, %81 ], [ %99, %83 ]
  %88 = phi i32 [ %82, %81 ], [ %103, %83 ]
  %89 = load i8, i8* %87, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %85, i8 %89, i64 %66, i1 false) #3
  %90 = getelementptr inbounds i8, i8* %85, i64 %66
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %90, i8* align 1 %87, i64 %69, i1 false) #3
  %91 = load i8, i8* %86, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %84, i8 %91, i64 %76, i1 false) #3
  %92 = getelementptr inbounds i8, i8* %87, i64 %77
  %93 = getelementptr inbounds i8, i8* %86, i64 %77
  %94 = getelementptr inbounds i8, i8* %85, i64 %78
  %95 = getelementptr inbounds i8, i8* %84, i64 %78
  %96 = load i8, i8* %92, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %94, i8 %96, i64 %66, i1 false) #3
  %97 = getelementptr inbounds i8, i8* %94, i64 %66
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %97, i8* align 1 %92, i64 %69, i1 false) #3
  %98 = load i8, i8* %93, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %95, i8 %98, i64 %76, i1 false) #3
  %99 = getelementptr inbounds i8, i8* %92, i64 %77
  %100 = getelementptr inbounds i8, i8* %93, i64 %77
  %101 = getelementptr inbounds i8, i8* %94, i64 %78
  %102 = getelementptr inbounds i8, i8* %95, i64 %78
  %103 = add i32 %88, -2
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %105, label %83

105:                                              ; preds = %83, %71
  %106 = phi i8* [ %72, %71 ], [ %102, %83 ]
  %107 = phi i8* [ %68, %71 ], [ %101, %83 ]
  %108 = phi i8* [ %75, %71 ], [ %100, %83 ]
  %109 = phi i8* [ %61, %71 ], [ %99, %83 ]
  %110 = icmp eq i32 %79, 0
  br i1 %110, label %115, label %111

111:                                              ; preds = %105
  %112 = load i8, i8* %109, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %107, i8 %112, i64 %66, i1 false) #3
  %113 = getelementptr inbounds i8, i8* %107, i64 %66
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %113, i8* align 1 %109, i64 %69, i1 false) #3
  %114 = load i8, i8* %108, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %106, i8 %114, i64 %76, i1 false) #3
  br label %115

115:                                              ; preds = %111, %105, %6
  %116 = add nsw i32 %4, -1
  %117 = mul nsw i32 %26, %116
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds i8, i8* %65, i64 %118
  %120 = getelementptr inbounds i8, i8* %119, i64 %67
  %121 = mul nsw i32 %26, %4
  %122 = sext i32 %121 to i64
  %123 = getelementptr inbounds i8, i8* %65, i64 %122
  %124 = getelementptr inbounds i8, i8* %123, i64 %67
  %125 = add i32 %51, %5
  %126 = add i32 %125, %57
  %127 = icmp sgt i32 %49, 0
  br i1 %127, label %128, label %150

128:                                              ; preds = %115
  %129 = mul i32 %49, %26
  %130 = sub i32 0, %129
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds i8, i8* %65, i64 %131
  %133 = getelementptr inbounds i8, i8* %132, i64 %67
  %134 = sext i32 %126 to i64
  %135 = sext i32 %26 to i64
  %136 = add i32 %49, -1
  %137 = and i32 %49, 3
  %138 = icmp ult i32 %136, 3
  br i1 %138, label %141, label %139

139:                                              ; preds = %128
  %140 = sub i32 %49, %137
  br label %160

141:                                              ; preds = %160, %128
  %142 = phi i8* [ %133, %128 ], [ %166, %160 ]
  %143 = icmp eq i32 %137, 0
  br i1 %143, label %150, label %144

144:                                              ; preds = %141, %144
  %145 = phi i8* [ %147, %144 ], [ %142, %141 ]
  %146 = phi i32 [ %148, %144 ], [ %137, %141 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %145, i8* align 1 %68, i64 %134, i1 false) #3
  %147 = getelementptr inbounds i8, i8* %145, i64 %135
  %148 = add i32 %146, -1
  %149 = icmp eq i32 %148, 0
  br i1 %149, label %150, label %144, !llvm.loop !26

150:                                              ; preds = %141, %144, %115
  %151 = icmp sgt i32 %54, 0
  br i1 %151, label %152, label %187

152:                                              ; preds = %150
  %153 = sext i32 %126 to i64
  %154 = sext i32 %26 to i64
  %155 = add i32 %54, -1
  %156 = and i32 %54, 3
  %157 = icmp ult i32 %155, 3
  br i1 %157, label %178, label %158

158:                                              ; preds = %152
  %159 = sub i32 %54, %156
  br label %169

160:                                              ; preds = %160, %139
  %161 = phi i8* [ %133, %139 ], [ %166, %160 ]
  %162 = phi i32 [ %140, %139 ], [ %167, %160 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %161, i8* align 1 %68, i64 %134, i1 false) #3
  %163 = getelementptr inbounds i8, i8* %161, i64 %135
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %163, i8* align 1 %68, i64 %134, i1 false) #3
  %164 = getelementptr inbounds i8, i8* %163, i64 %135
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %164, i8* align 1 %68, i64 %134, i1 false) #3
  %165 = getelementptr inbounds i8, i8* %164, i64 %135
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %165, i8* align 1 %68, i64 %134, i1 false) #3
  %166 = getelementptr inbounds i8, i8* %165, i64 %135
  %167 = add i32 %162, -4
  %168 = icmp eq i32 %167, 0
  br i1 %168, label %141, label %160

169:                                              ; preds = %169, %158
  %170 = phi i8* [ %124, %158 ], [ %175, %169 ]
  %171 = phi i32 [ %159, %158 ], [ %176, %169 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %170, i8* align 1 %120, i64 %153, i1 false) #3
  %172 = getelementptr inbounds i8, i8* %170, i64 %154
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %172, i8* align 1 %120, i64 %153, i1 false) #3
  %173 = getelementptr inbounds i8, i8* %172, i64 %154
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %173, i8* align 1 %120, i64 %153, i1 false) #3
  %174 = getelementptr inbounds i8, i8* %173, i64 %154
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %174, i8* align 1 %120, i64 %153, i1 false) #3
  %175 = getelementptr inbounds i8, i8* %174, i64 %154
  %176 = add i32 %171, -4
  %177 = icmp eq i32 %176, 0
  br i1 %177, label %178, label %169

178:                                              ; preds = %169, %152
  %179 = phi i8* [ %124, %152 ], [ %175, %169 ]
  %180 = icmp eq i32 %156, 0
  br i1 %180, label %187, label %181

181:                                              ; preds = %178, %181
  %182 = phi i8* [ %184, %181 ], [ %179, %178 ]
  %183 = phi i32 [ %185, %181 ], [ %156, %178 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %182, i8* align 1 %120, i64 %153, i1 false) #3
  %184 = getelementptr inbounds i8, i8* %182, i64 %154
  %185 = add i32 %183, -1
  %186 = icmp eq i32 %185, 0
  br i1 %186, label %187, label %181, !llvm.loop !27

187:                                              ; preds = %178, %181, %150
  %188 = add nsw i32 %49, 1
  %189 = ashr i32 %188, 1
  %190 = add nsw i32 %51, 1
  %191 = ashr i32 %190, 1
  %192 = add nsw i32 %54, 1
  %193 = ashr i32 %192, 1
  %194 = add nsw i32 %57, 1
  %195 = ashr i32 %194, 1
  %196 = add nsw i32 %4, 1
  %197 = ashr i32 %196, 1
  %198 = add nsw i32 %5, 1
  %199 = ashr i32 %198, 1
  %200 = load i8*, i8** %43, align 8
  %201 = sext i32 %34 to i64
  %202 = getelementptr inbounds i8, i8* %200, i64 %201
  %203 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 14
  %204 = load i8*, i8** %203, align 8
  %205 = sext i32 %39 to i64
  %206 = getelementptr inbounds i8, i8* %204, i64 %205
  %207 = load i32, i32* %35, align 4
  %208 = select i1 %47, i32 2, i32 1
  %209 = sext i32 %191 to i64
  %210 = sub nsw i64 0, %209
  %211 = getelementptr inbounds i8, i8* %206, i64 %210
  %212 = sext i32 %199 to i64
  br i1 %70, label %213, label %388

213:                                              ; preds = %187
  %214 = load i32, i32* %29, align 4
  %215 = getelementptr inbounds i8, i8* %206, i64 %212
  %216 = add nsw i32 %199, -1
  %217 = mul nsw i32 %208, %216
  %218 = sext i32 %217 to i64
  %219 = getelementptr inbounds i8, i8* %202, i64 %218
  %220 = icmp sgt i32 %5, 0
  %221 = sext i32 %195 to i64
  %222 = sext i32 %214 to i64
  %223 = sext i32 %207 to i64
  %224 = zext i32 %199 to i64
  %225 = add nsw i64 %224, -1
  %226 = add nsw i64 %205, %224
  %227 = add nsw i64 %201, %224
  %228 = and i64 %224, 4294967264
  %229 = add nsw i64 %228, -32
  %230 = lshr exact i64 %229, 5
  %231 = add nuw nsw i64 %230, 1
  %232 = icmp ult i32 %199, 32
  %233 = icmp ugt i64 %225, 4294967295
  %234 = or i1 %47, %233
  %235 = or i1 %232, %234
  %236 = and i64 %224, 4294967264
  %237 = and i64 %231, 1
  %238 = icmp eq i64 %229, 0
  %239 = sub nuw nsw i64 %231, %237
  %240 = icmp eq i64 %237, 0
  %241 = icmp eq i64 %236, %224
  %242 = and i64 %224, 3
  %243 = icmp eq i64 %242, 0
  br label %244

244:                                              ; preds = %379, %213
  %245 = phi i64 [ %387, %379 ], [ 0, %213 ]
  %246 = phi i8* [ %384, %379 ], [ %215, %213 ]
  %247 = phi i8* [ %383, %379 ], [ %211, %213 ]
  %248 = phi i8* [ %382, %379 ], [ %219, %213 ]
  %249 = phi i8* [ %381, %379 ], [ %202, %213 ]
  %250 = phi i32 [ %385, %379 ], [ 0, %213 ]
  %251 = mul i64 %245, %223
  %252 = add i64 %251, %205
  %253 = getelementptr i8, i8* %204, i64 %252
  %254 = add i64 %226, %251
  %255 = getelementptr i8, i8* %204, i64 %254
  %256 = mul i64 %245, %222
  %257 = add i64 %256, %201
  %258 = getelementptr i8, i8* %200, i64 %257
  %259 = add i64 %227, %256
  %260 = getelementptr i8, i8* %200, i64 %259
  %261 = load i8, i8* %249, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %247, i8 %261, i64 %209, i1 false) #3
  br i1 %47, label %262, label %342

262:                                              ; preds = %244
  br i1 %220, label %263, label %379

263:                                              ; preds = %262
  br i1 %235, label %264, label %284

264:                                              ; preds = %341, %284, %263
  %265 = phi i64 [ 0, %284 ], [ 0, %263 ], [ %236, %341 ]
  %266 = xor i64 %265, -1
  %267 = add nsw i64 %266, %224
  br i1 %243, label %281, label %268

268:                                              ; preds = %264, %268
  %269 = phi i64 [ %278, %268 ], [ %265, %264 ]
  %270 = phi i64 [ %279, %268 ], [ %242, %264 ]
  %271 = trunc i64 %269 to i32
  %272 = mul i32 %208, %271
  %273 = zext i32 %272 to i64
  %274 = getelementptr inbounds i8, i8* %249, i64 %273
  %275 = load i8, i8* %274, align 1
  %276 = add nsw i64 %269, %209
  %277 = getelementptr inbounds i8, i8* %247, i64 %276
  store i8 %275, i8* %277, align 1
  %278 = add nuw nsw i64 %269, 1
  %279 = add i64 %270, -1
  %280 = icmp eq i64 %279, 0
  br i1 %280, label %281, label %268, !llvm.loop !28

281:                                              ; preds = %268, %264
  %282 = phi i64 [ %265, %264 ], [ %278, %268 ]
  %283 = icmp ult i64 %267, 3
  br i1 %283, label %379, label %344

284:                                              ; preds = %263
  %285 = icmp ult i8* %253, %260
  %286 = icmp ult i8* %258, %255
  %287 = and i1 %285, %286
  br i1 %287, label %264, label %288

288:                                              ; preds = %284
  br i1 %238, label %324, label %289

289:                                              ; preds = %288, %289
  %290 = phi i64 [ %321, %289 ], [ 0, %288 ]
  %291 = phi i64 [ %322, %289 ], [ %239, %288 ]
  %292 = trunc i64 %290 to i32
  %293 = mul i32 %208, %292
  %294 = zext i32 %293 to i64
  %295 = getelementptr inbounds i8, i8* %249, i64 %294
  %296 = bitcast i8* %295 to <16 x i8>*
  %297 = load <16 x i8>, <16 x i8>* %296, align 1, !alias.scope !29
  %298 = getelementptr inbounds i8, i8* %295, i64 16
  %299 = bitcast i8* %298 to <16 x i8>*
  %300 = load <16 x i8>, <16 x i8>* %299, align 1, !alias.scope !29
  %301 = add nsw i64 %290, %209
  %302 = getelementptr inbounds i8, i8* %247, i64 %301
  %303 = bitcast i8* %302 to <16 x i8>*
  store <16 x i8> %297, <16 x i8>* %303, align 1, !alias.scope !32, !noalias !29
  %304 = getelementptr inbounds i8, i8* %302, i64 16
  %305 = bitcast i8* %304 to <16 x i8>*
  store <16 x i8> %300, <16 x i8>* %305, align 1, !alias.scope !32, !noalias !29
  %306 = or i64 %290, 32
  %307 = trunc i64 %306 to i32
  %308 = mul i32 %208, %307
  %309 = zext i32 %308 to i64
  %310 = getelementptr inbounds i8, i8* %249, i64 %309
  %311 = bitcast i8* %310 to <16 x i8>*
  %312 = load <16 x i8>, <16 x i8>* %311, align 1, !alias.scope !29
  %313 = getelementptr inbounds i8, i8* %310, i64 16
  %314 = bitcast i8* %313 to <16 x i8>*
  %315 = load <16 x i8>, <16 x i8>* %314, align 1, !alias.scope !29
  %316 = add nsw i64 %306, %209
  %317 = getelementptr inbounds i8, i8* %247, i64 %316
  %318 = bitcast i8* %317 to <16 x i8>*
  store <16 x i8> %312, <16 x i8>* %318, align 1, !alias.scope !32, !noalias !29
  %319 = getelementptr inbounds i8, i8* %317, i64 16
  %320 = bitcast i8* %319 to <16 x i8>*
  store <16 x i8> %315, <16 x i8>* %320, align 1, !alias.scope !32, !noalias !29
  %321 = add i64 %290, 64
  %322 = add i64 %291, -2
  %323 = icmp eq i64 %322, 0
  br i1 %323, label %324, label %289, !llvm.loop !34

324:                                              ; preds = %289, %288
  %325 = phi i64 [ 0, %288 ], [ %321, %289 ]
  br i1 %240, label %341, label %326

326:                                              ; preds = %324
  %327 = trunc i64 %325 to i32
  %328 = mul i32 %208, %327
  %329 = zext i32 %328 to i64
  %330 = getelementptr inbounds i8, i8* %249, i64 %329
  %331 = bitcast i8* %330 to <16 x i8>*
  %332 = load <16 x i8>, <16 x i8>* %331, align 1, !alias.scope !29
  %333 = getelementptr inbounds i8, i8* %330, i64 16
  %334 = bitcast i8* %333 to <16 x i8>*
  %335 = load <16 x i8>, <16 x i8>* %334, align 1, !alias.scope !29
  %336 = add nsw i64 %325, %209
  %337 = getelementptr inbounds i8, i8* %247, i64 %336
  %338 = bitcast i8* %337 to <16 x i8>*
  store <16 x i8> %332, <16 x i8>* %338, align 1, !alias.scope !32, !noalias !29
  %339 = getelementptr inbounds i8, i8* %337, i64 16
  %340 = bitcast i8* %339 to <16 x i8>*
  store <16 x i8> %335, <16 x i8>* %340, align 1, !alias.scope !32, !noalias !29
  br label %341

341:                                              ; preds = %324, %326
  br i1 %241, label %379, label %264

342:                                              ; preds = %244
  %343 = getelementptr inbounds i8, i8* %247, i64 %209
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %343, i8* align 1 %249, i64 %212, i1 false) #3
  br label %379

344:                                              ; preds = %281, %344
  %345 = phi i64 [ %377, %344 ], [ %282, %281 ]
  %346 = trunc i64 %345 to i32
  %347 = mul i32 %208, %346
  %348 = zext i32 %347 to i64
  %349 = getelementptr inbounds i8, i8* %249, i64 %348
  %350 = load i8, i8* %349, align 1
  %351 = add nsw i64 %345, %209
  %352 = getelementptr inbounds i8, i8* %247, i64 %351
  store i8 %350, i8* %352, align 1
  %353 = add nuw nsw i64 %345, 1
  %354 = trunc i64 %353 to i32
  %355 = mul i32 %208, %354
  %356 = zext i32 %355 to i64
  %357 = getelementptr inbounds i8, i8* %249, i64 %356
  %358 = load i8, i8* %357, align 1
  %359 = add nsw i64 %353, %209
  %360 = getelementptr inbounds i8, i8* %247, i64 %359
  store i8 %358, i8* %360, align 1
  %361 = add nuw nsw i64 %345, 2
  %362 = trunc i64 %361 to i32
  %363 = mul i32 %208, %362
  %364 = zext i32 %363 to i64
  %365 = getelementptr inbounds i8, i8* %249, i64 %364
  %366 = load i8, i8* %365, align 1
  %367 = add nsw i64 %361, %209
  %368 = getelementptr inbounds i8, i8* %247, i64 %367
  store i8 %366, i8* %368, align 1
  %369 = add nuw nsw i64 %345, 3
  %370 = trunc i64 %369 to i32
  %371 = mul i32 %208, %370
  %372 = zext i32 %371 to i64
  %373 = getelementptr inbounds i8, i8* %249, i64 %372
  %374 = load i8, i8* %373, align 1
  %375 = add nsw i64 %369, %209
  %376 = getelementptr inbounds i8, i8* %247, i64 %375
  store i8 %374, i8* %376, align 1
  %377 = add nuw nsw i64 %345, 4
  %378 = icmp eq i64 %377, %224
  br i1 %378, label %379, label %344, !llvm.loop !35

379:                                              ; preds = %281, %344, %341, %342, %262
  %380 = load i8, i8* %248, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %246, i8 %380, i64 %221, i1 false) #3
  %381 = getelementptr inbounds i8, i8* %249, i64 %222
  %382 = getelementptr inbounds i8, i8* %248, i64 %222
  %383 = getelementptr inbounds i8, i8* %247, i64 %223
  %384 = getelementptr inbounds i8, i8* %246, i64 %223
  %385 = add nuw nsw i32 %250, 1
  %386 = icmp eq i32 %385, %197
  %387 = add i64 %245, 1
  br i1 %386, label %388, label %244

388:                                              ; preds = %379, %187
  %389 = add nsw i32 %197, -1
  %390 = mul nsw i32 %207, %389
  %391 = sext i32 %390 to i64
  %392 = getelementptr inbounds i8, i8* %206, i64 %391
  %393 = getelementptr inbounds i8, i8* %392, i64 %210
  %394 = mul nsw i32 %207, %197
  %395 = sext i32 %394 to i64
  %396 = getelementptr inbounds i8, i8* %206, i64 %395
  %397 = getelementptr inbounds i8, i8* %396, i64 %210
  %398 = add nsw i32 %191, %199
  %399 = add i32 %398, %195
  br i1 %127, label %400, label %422

400:                                              ; preds = %388
  %401 = mul i32 %189, %207
  %402 = sub i32 0, %401
  %403 = sext i32 %402 to i64
  %404 = getelementptr inbounds i8, i8* %206, i64 %403
  %405 = getelementptr inbounds i8, i8* %404, i64 %210
  %406 = sext i32 %399 to i64
  %407 = sext i32 %207 to i64
  %408 = add nsw i32 %189, -1
  %409 = and i32 %189, 3
  %410 = icmp ult i32 %408, 3
  br i1 %410, label %413, label %411

411:                                              ; preds = %400
  %412 = sub nsw i32 %189, %409
  br label %431

413:                                              ; preds = %431, %400
  %414 = phi i8* [ %405, %400 ], [ %437, %431 ]
  %415 = icmp eq i32 %409, 0
  br i1 %415, label %422, label %416

416:                                              ; preds = %413, %416
  %417 = phi i8* [ %419, %416 ], [ %414, %413 ]
  %418 = phi i32 [ %420, %416 ], [ %409, %413 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %417, i8* align 1 %211, i64 %406, i1 false) #3
  %419 = getelementptr inbounds i8, i8* %417, i64 %407
  %420 = add i32 %418, -1
  %421 = icmp eq i32 %420, 0
  br i1 %421, label %422, label %416, !llvm.loop !36

422:                                              ; preds = %413, %416, %388
  br i1 %151, label %423, label %458

423:                                              ; preds = %422
  %424 = sext i32 %399 to i64
  %425 = sext i32 %207 to i64
  %426 = add nsw i32 %193, -1
  %427 = and i32 %193, 3
  %428 = icmp ult i32 %426, 3
  br i1 %428, label %449, label %429

429:                                              ; preds = %423
  %430 = sub nsw i32 %193, %427
  br label %440

431:                                              ; preds = %431, %411
  %432 = phi i8* [ %405, %411 ], [ %437, %431 ]
  %433 = phi i32 [ %412, %411 ], [ %438, %431 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %432, i8* align 1 %211, i64 %406, i1 false) #3
  %434 = getelementptr inbounds i8, i8* %432, i64 %407
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %434, i8* align 1 %211, i64 %406, i1 false) #3
  %435 = getelementptr inbounds i8, i8* %434, i64 %407
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %435, i8* align 1 %211, i64 %406, i1 false) #3
  %436 = getelementptr inbounds i8, i8* %435, i64 %407
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %436, i8* align 1 %211, i64 %406, i1 false) #3
  %437 = getelementptr inbounds i8, i8* %436, i64 %407
  %438 = add i32 %433, -4
  %439 = icmp eq i32 %438, 0
  br i1 %439, label %413, label %431

440:                                              ; preds = %440, %429
  %441 = phi i8* [ %397, %429 ], [ %446, %440 ]
  %442 = phi i32 [ %430, %429 ], [ %447, %440 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %441, i8* align 1 %393, i64 %424, i1 false) #3
  %443 = getelementptr inbounds i8, i8* %441, i64 %425
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %443, i8* align 1 %393, i64 %424, i1 false) #3
  %444 = getelementptr inbounds i8, i8* %443, i64 %425
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %444, i8* align 1 %393, i64 %424, i1 false) #3
  %445 = getelementptr inbounds i8, i8* %444, i64 %425
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %445, i8* align 1 %393, i64 %424, i1 false) #3
  %446 = getelementptr inbounds i8, i8* %445, i64 %425
  %447 = add i32 %442, -4
  %448 = icmp eq i32 %447, 0
  br i1 %448, label %449, label %440

449:                                              ; preds = %440, %423
  %450 = phi i8* [ %397, %423 ], [ %446, %440 ]
  %451 = icmp eq i32 %427, 0
  br i1 %451, label %458, label %452

452:                                              ; preds = %449, %452
  %453 = phi i8* [ %455, %452 ], [ %450, %449 ]
  %454 = phi i32 [ %456, %452 ], [ %427, %449 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %453, i8* align 1 %393, i64 %424, i1 false) #3
  %455 = getelementptr inbounds i8, i8* %453, i64 %425
  %456 = add i32 %454, -1
  %457 = icmp eq i32 %456, 0
  br i1 %457, label %458, label %452, !llvm.loop !37

458:                                              ; preds = %449, %452, %422
  %459 = load i8*, i8** %40, align 8
  %460 = getelementptr inbounds i8, i8* %459, i64 %201
  %461 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 15
  %462 = load i8*, i8** %461, align 8
  %463 = getelementptr inbounds i8, i8* %462, i64 %205
  %464 = load i32, i32* %35, align 4
  %465 = getelementptr inbounds i8, i8* %463, i64 %210
  br i1 %70, label %466, label %641

466:                                              ; preds = %458
  %467 = load i32, i32* %29, align 4
  %468 = getelementptr inbounds i8, i8* %463, i64 %212
  %469 = add nsw i32 %199, -1
  %470 = mul nsw i32 %208, %469
  %471 = sext i32 %470 to i64
  %472 = getelementptr inbounds i8, i8* %460, i64 %471
  %473 = icmp sgt i32 %5, 0
  %474 = sext i32 %195 to i64
  %475 = sext i32 %467 to i64
  %476 = sext i32 %464 to i64
  %477 = zext i32 %199 to i64
  %478 = add nsw i64 %477, -1
  %479 = add nsw i64 %205, %477
  %480 = add nsw i64 %201, %477
  %481 = and i64 %477, 4294967264
  %482 = add nsw i64 %481, -32
  %483 = lshr exact i64 %482, 5
  %484 = add nuw nsw i64 %483, 1
  %485 = icmp ult i32 %199, 32
  %486 = icmp ugt i64 %478, 4294967295
  %487 = or i1 %47, %486
  %488 = or i1 %485, %487
  %489 = and i64 %477, 4294967264
  %490 = and i64 %484, 1
  %491 = icmp eq i64 %482, 0
  %492 = sub nuw nsw i64 %484, %490
  %493 = icmp eq i64 %490, 0
  %494 = icmp eq i64 %489, %477
  %495 = and i64 %477, 3
  %496 = icmp eq i64 %495, 0
  br label %497

497:                                              ; preds = %632, %466
  %498 = phi i64 [ %640, %632 ], [ 0, %466 ]
  %499 = phi i8* [ %637, %632 ], [ %468, %466 ]
  %500 = phi i8* [ %636, %632 ], [ %465, %466 ]
  %501 = phi i8* [ %635, %632 ], [ %472, %466 ]
  %502 = phi i8* [ %634, %632 ], [ %460, %466 ]
  %503 = phi i32 [ %638, %632 ], [ 0, %466 ]
  %504 = mul i64 %498, %476
  %505 = add i64 %504, %205
  %506 = getelementptr i8, i8* %462, i64 %505
  %507 = add i64 %479, %504
  %508 = getelementptr i8, i8* %462, i64 %507
  %509 = mul i64 %498, %475
  %510 = add i64 %509, %201
  %511 = getelementptr i8, i8* %459, i64 %510
  %512 = add i64 %480, %509
  %513 = getelementptr i8, i8* %459, i64 %512
  %514 = load i8, i8* %502, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %500, i8 %514, i64 %209, i1 false) #3
  br i1 %47, label %515, label %595

515:                                              ; preds = %497
  br i1 %473, label %516, label %632

516:                                              ; preds = %515
  br i1 %488, label %517, label %537

517:                                              ; preds = %594, %537, %516
  %518 = phi i64 [ 0, %537 ], [ 0, %516 ], [ %489, %594 ]
  %519 = xor i64 %518, -1
  %520 = add nsw i64 %519, %477
  br i1 %496, label %534, label %521

521:                                              ; preds = %517, %521
  %522 = phi i64 [ %531, %521 ], [ %518, %517 ]
  %523 = phi i64 [ %532, %521 ], [ %495, %517 ]
  %524 = trunc i64 %522 to i32
  %525 = mul i32 %208, %524
  %526 = zext i32 %525 to i64
  %527 = getelementptr inbounds i8, i8* %502, i64 %526
  %528 = load i8, i8* %527, align 1
  %529 = add nsw i64 %522, %209
  %530 = getelementptr inbounds i8, i8* %500, i64 %529
  store i8 %528, i8* %530, align 1
  %531 = add nuw nsw i64 %522, 1
  %532 = add i64 %523, -1
  %533 = icmp eq i64 %532, 0
  br i1 %533, label %534, label %521, !llvm.loop !38

534:                                              ; preds = %521, %517
  %535 = phi i64 [ %518, %517 ], [ %531, %521 ]
  %536 = icmp ult i64 %520, 3
  br i1 %536, label %632, label %597

537:                                              ; preds = %516
  %538 = icmp ult i8* %506, %513
  %539 = icmp ult i8* %511, %508
  %540 = and i1 %538, %539
  br i1 %540, label %517, label %541

541:                                              ; preds = %537
  br i1 %491, label %577, label %542

542:                                              ; preds = %541, %542
  %543 = phi i64 [ %574, %542 ], [ 0, %541 ]
  %544 = phi i64 [ %575, %542 ], [ %492, %541 ]
  %545 = trunc i64 %543 to i32
  %546 = mul i32 %208, %545
  %547 = zext i32 %546 to i64
  %548 = getelementptr inbounds i8, i8* %502, i64 %547
  %549 = bitcast i8* %548 to <16 x i8>*
  %550 = load <16 x i8>, <16 x i8>* %549, align 1, !alias.scope !39
  %551 = getelementptr inbounds i8, i8* %548, i64 16
  %552 = bitcast i8* %551 to <16 x i8>*
  %553 = load <16 x i8>, <16 x i8>* %552, align 1, !alias.scope !39
  %554 = add nsw i64 %543, %209
  %555 = getelementptr inbounds i8, i8* %500, i64 %554
  %556 = bitcast i8* %555 to <16 x i8>*
  store <16 x i8> %550, <16 x i8>* %556, align 1, !alias.scope !42, !noalias !39
  %557 = getelementptr inbounds i8, i8* %555, i64 16
  %558 = bitcast i8* %557 to <16 x i8>*
  store <16 x i8> %553, <16 x i8>* %558, align 1, !alias.scope !42, !noalias !39
  %559 = or i64 %543, 32
  %560 = trunc i64 %559 to i32
  %561 = mul i32 %208, %560
  %562 = zext i32 %561 to i64
  %563 = getelementptr inbounds i8, i8* %502, i64 %562
  %564 = bitcast i8* %563 to <16 x i8>*
  %565 = load <16 x i8>, <16 x i8>* %564, align 1, !alias.scope !39
  %566 = getelementptr inbounds i8, i8* %563, i64 16
  %567 = bitcast i8* %566 to <16 x i8>*
  %568 = load <16 x i8>, <16 x i8>* %567, align 1, !alias.scope !39
  %569 = add nsw i64 %559, %209
  %570 = getelementptr inbounds i8, i8* %500, i64 %569
  %571 = bitcast i8* %570 to <16 x i8>*
  store <16 x i8> %565, <16 x i8>* %571, align 1, !alias.scope !42, !noalias !39
  %572 = getelementptr inbounds i8, i8* %570, i64 16
  %573 = bitcast i8* %572 to <16 x i8>*
  store <16 x i8> %568, <16 x i8>* %573, align 1, !alias.scope !42, !noalias !39
  %574 = add i64 %543, 64
  %575 = add i64 %544, -2
  %576 = icmp eq i64 %575, 0
  br i1 %576, label %577, label %542, !llvm.loop !44

577:                                              ; preds = %542, %541
  %578 = phi i64 [ 0, %541 ], [ %574, %542 ]
  br i1 %493, label %594, label %579

579:                                              ; preds = %577
  %580 = trunc i64 %578 to i32
  %581 = mul i32 %208, %580
  %582 = zext i32 %581 to i64
  %583 = getelementptr inbounds i8, i8* %502, i64 %582
  %584 = bitcast i8* %583 to <16 x i8>*
  %585 = load <16 x i8>, <16 x i8>* %584, align 1, !alias.scope !39
  %586 = getelementptr inbounds i8, i8* %583, i64 16
  %587 = bitcast i8* %586 to <16 x i8>*
  %588 = load <16 x i8>, <16 x i8>* %587, align 1, !alias.scope !39
  %589 = add nsw i64 %578, %209
  %590 = getelementptr inbounds i8, i8* %500, i64 %589
  %591 = bitcast i8* %590 to <16 x i8>*
  store <16 x i8> %585, <16 x i8>* %591, align 1, !alias.scope !42, !noalias !39
  %592 = getelementptr inbounds i8, i8* %590, i64 16
  %593 = bitcast i8* %592 to <16 x i8>*
  store <16 x i8> %588, <16 x i8>* %593, align 1, !alias.scope !42, !noalias !39
  br label %594

594:                                              ; preds = %577, %579
  br i1 %494, label %632, label %517

595:                                              ; preds = %497
  %596 = getelementptr inbounds i8, i8* %500, i64 %209
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %596, i8* align 1 %502, i64 %212, i1 false) #3
  br label %632

597:                                              ; preds = %534, %597
  %598 = phi i64 [ %630, %597 ], [ %535, %534 ]
  %599 = trunc i64 %598 to i32
  %600 = mul i32 %208, %599
  %601 = zext i32 %600 to i64
  %602 = getelementptr inbounds i8, i8* %502, i64 %601
  %603 = load i8, i8* %602, align 1
  %604 = add nsw i64 %598, %209
  %605 = getelementptr inbounds i8, i8* %500, i64 %604
  store i8 %603, i8* %605, align 1
  %606 = add nuw nsw i64 %598, 1
  %607 = trunc i64 %606 to i32
  %608 = mul i32 %208, %607
  %609 = zext i32 %608 to i64
  %610 = getelementptr inbounds i8, i8* %502, i64 %609
  %611 = load i8, i8* %610, align 1
  %612 = add nsw i64 %606, %209
  %613 = getelementptr inbounds i8, i8* %500, i64 %612
  store i8 %611, i8* %613, align 1
  %614 = add nuw nsw i64 %598, 2
  %615 = trunc i64 %614 to i32
  %616 = mul i32 %208, %615
  %617 = zext i32 %616 to i64
  %618 = getelementptr inbounds i8, i8* %502, i64 %617
  %619 = load i8, i8* %618, align 1
  %620 = add nsw i64 %614, %209
  %621 = getelementptr inbounds i8, i8* %500, i64 %620
  store i8 %619, i8* %621, align 1
  %622 = add nuw nsw i64 %598, 3
  %623 = trunc i64 %622 to i32
  %624 = mul i32 %208, %623
  %625 = zext i32 %624 to i64
  %626 = getelementptr inbounds i8, i8* %502, i64 %625
  %627 = load i8, i8* %626, align 1
  %628 = add nsw i64 %622, %209
  %629 = getelementptr inbounds i8, i8* %500, i64 %628
  store i8 %627, i8* %629, align 1
  %630 = add nuw nsw i64 %598, 4
  %631 = icmp eq i64 %630, %477
  br i1 %631, label %632, label %597, !llvm.loop !45

632:                                              ; preds = %534, %597, %594, %595, %515
  %633 = load i8, i8* %501, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %499, i8 %633, i64 %474, i1 false) #3
  %634 = getelementptr inbounds i8, i8* %502, i64 %475
  %635 = getelementptr inbounds i8, i8* %501, i64 %475
  %636 = getelementptr inbounds i8, i8* %500, i64 %476
  %637 = getelementptr inbounds i8, i8* %499, i64 %476
  %638 = add nuw nsw i32 %503, 1
  %639 = icmp eq i32 %638, %197
  %640 = add i64 %498, 1
  br i1 %639, label %641, label %497

641:                                              ; preds = %632, %458
  %642 = mul nsw i32 %464, %389
  %643 = sext i32 %642 to i64
  %644 = getelementptr inbounds i8, i8* %463, i64 %643
  %645 = getelementptr inbounds i8, i8* %644, i64 %210
  %646 = mul nsw i32 %464, %197
  %647 = sext i32 %646 to i64
  %648 = getelementptr inbounds i8, i8* %463, i64 %647
  %649 = getelementptr inbounds i8, i8* %648, i64 %210
  br i1 %127, label %650, label %672

650:                                              ; preds = %641
  %651 = mul i32 %189, %464
  %652 = sub i32 0, %651
  %653 = sext i32 %652 to i64
  %654 = getelementptr inbounds i8, i8* %463, i64 %653
  %655 = getelementptr inbounds i8, i8* %654, i64 %210
  %656 = sext i32 %399 to i64
  %657 = sext i32 %464 to i64
  %658 = add nsw i32 %189, -1
  %659 = and i32 %189, 3
  %660 = icmp ult i32 %658, 3
  br i1 %660, label %663, label %661

661:                                              ; preds = %650
  %662 = sub nsw i32 %189, %659
  br label %681

663:                                              ; preds = %681, %650
  %664 = phi i8* [ %655, %650 ], [ %687, %681 ]
  %665 = icmp eq i32 %659, 0
  br i1 %665, label %672, label %666

666:                                              ; preds = %663, %666
  %667 = phi i8* [ %669, %666 ], [ %664, %663 ]
  %668 = phi i32 [ %670, %666 ], [ %659, %663 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %667, i8* align 1 %465, i64 %656, i1 false) #3
  %669 = getelementptr inbounds i8, i8* %667, i64 %657
  %670 = add i32 %668, -1
  %671 = icmp eq i32 %670, 0
  br i1 %671, label %672, label %666, !llvm.loop !46

672:                                              ; preds = %663, %666, %641
  br i1 %151, label %673, label %708

673:                                              ; preds = %672
  %674 = sext i32 %399 to i64
  %675 = sext i32 %464 to i64
  %676 = add nsw i32 %193, -1
  %677 = and i32 %193, 3
  %678 = icmp ult i32 %676, 3
  br i1 %678, label %699, label %679

679:                                              ; preds = %673
  %680 = sub nsw i32 %193, %677
  br label %690

681:                                              ; preds = %681, %661
  %682 = phi i8* [ %655, %661 ], [ %687, %681 ]
  %683 = phi i32 [ %662, %661 ], [ %688, %681 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %682, i8* align 1 %465, i64 %656, i1 false) #3
  %684 = getelementptr inbounds i8, i8* %682, i64 %657
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %684, i8* align 1 %465, i64 %656, i1 false) #3
  %685 = getelementptr inbounds i8, i8* %684, i64 %657
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %685, i8* align 1 %465, i64 %656, i1 false) #3
  %686 = getelementptr inbounds i8, i8* %685, i64 %657
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %686, i8* align 1 %465, i64 %656, i1 false) #3
  %687 = getelementptr inbounds i8, i8* %686, i64 %657
  %688 = add i32 %683, -4
  %689 = icmp eq i32 %688, 0
  br i1 %689, label %663, label %681

690:                                              ; preds = %690, %679
  %691 = phi i8* [ %649, %679 ], [ %696, %690 ]
  %692 = phi i32 [ %680, %679 ], [ %697, %690 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %691, i8* align 1 %645, i64 %674, i1 false) #3
  %693 = getelementptr inbounds i8, i8* %691, i64 %675
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %693, i8* align 1 %645, i64 %674, i1 false) #3
  %694 = getelementptr inbounds i8, i8* %693, i64 %675
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %694, i8* align 1 %645, i64 %674, i1 false) #3
  %695 = getelementptr inbounds i8, i8* %694, i64 %675
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %695, i8* align 1 %645, i64 %674, i1 false) #3
  %696 = getelementptr inbounds i8, i8* %695, i64 %675
  %697 = add i32 %692, -4
  %698 = icmp eq i32 %697, 0
  br i1 %698, label %699, label %690

699:                                              ; preds = %690, %673
  %700 = phi i8* [ %649, %673 ], [ %696, %690 ]
  %701 = icmp eq i32 %677, 0
  br i1 %701, label %708, label %702

702:                                              ; preds = %699, %702
  %703 = phi i8* [ %705, %702 ], [ %700, %699 ]
  %704 = phi i32 [ %706, %702 ], [ %677, %699 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %703, i8* align 1 %645, i64 %674, i1 false) #3
  %705 = getelementptr inbounds i8, i8* %703, i64 %675
  %706 = add i32 %704, -1
  %707 = icmp eq i32 %706, 0
  br i1 %707, label %708, label %702, !llvm.loop !47

708:                                              ; preds = %699, %702, %672
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vp8_extend_mb_row(%struct.yv12_buffer_config* nocapture readonly, i8* nocapture, i8* nocapture, i8* nocapture) local_unnamed_addr #1 {
  %5 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 4
  %6 = load i32, i32* %5, align 8
  %7 = mul nsw i32 %6, 14
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds i8, i8* %1, i64 %8
  %10 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 9
  %11 = load i32, i32* %10, align 4
  %12 = mul nsw i32 %11, 6
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds i8, i8* %2, i64 %13
  %15 = getelementptr inbounds i8, i8* %3, i64 %13
  %16 = getelementptr inbounds i8, i8* %9, i64 -1
  %17 = getelementptr inbounds i8, i8* %14, i64 -1
  %18 = getelementptr inbounds i8, i8* %15, i64 -1
  %19 = load i8, i8* %16, align 1
  store i8 %19, i8* %9, align 1
  %20 = load i8, i8* %17, align 1
  store i8 %20, i8* %14, align 1
  %21 = load i8, i8* %18, align 1
  store i8 %21, i8* %15, align 1
  %22 = load i8, i8* %16, align 1
  %23 = getelementptr inbounds i8, i8* %9, i64 1
  store i8 %22, i8* %23, align 1
  %24 = load i8, i8* %17, align 1
  %25 = getelementptr inbounds i8, i8* %14, i64 1
  store i8 %24, i8* %25, align 1
  %26 = load i8, i8* %18, align 1
  %27 = getelementptr inbounds i8, i8* %15, i64 1
  store i8 %26, i8* %27, align 1
  %28 = load i8, i8* %16, align 1
  %29 = getelementptr inbounds i8, i8* %9, i64 2
  store i8 %28, i8* %29, align 1
  %30 = load i8, i8* %17, align 1
  %31 = getelementptr inbounds i8, i8* %14, i64 2
  store i8 %30, i8* %31, align 1
  %32 = load i8, i8* %18, align 1
  %33 = getelementptr inbounds i8, i8* %15, i64 2
  store i8 %32, i8* %33, align 1
  %34 = load i8, i8* %16, align 1
  %35 = getelementptr inbounds i8, i8* %9, i64 3
  store i8 %34, i8* %35, align 1
  %36 = load i8, i8* %17, align 1
  %37 = getelementptr inbounds i8, i8* %14, i64 3
  store i8 %36, i8* %37, align 1
  %38 = load i8, i8* %18, align 1
  %39 = getelementptr inbounds i8, i8* %15, i64 3
  store i8 %38, i8* %39, align 1
  %40 = load i32, i32* %5, align 8
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i8, i8* %9, i64 %41
  %43 = load i32, i32* %10, align 4
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds i8, i8* %14, i64 %44
  %46 = getelementptr inbounds i8, i8* %15, i64 %44
  %47 = getelementptr inbounds i8, i8* %42, i64 -1
  %48 = getelementptr inbounds i8, i8* %45, i64 -1
  %49 = getelementptr inbounds i8, i8* %46, i64 -1
  %50 = load i8, i8* %47, align 1
  store i8 %50, i8* %42, align 1
  %51 = load i8, i8* %48, align 1
  store i8 %51, i8* %45, align 1
  %52 = load i8, i8* %49, align 1
  store i8 %52, i8* %46, align 1
  %53 = load i8, i8* %47, align 1
  %54 = getelementptr inbounds i8, i8* %42, i64 1
  store i8 %53, i8* %54, align 1
  %55 = load i8, i8* %48, align 1
  %56 = getelementptr inbounds i8, i8* %45, i64 1
  store i8 %55, i8* %56, align 1
  %57 = load i8, i8* %49, align 1
  %58 = getelementptr inbounds i8, i8* %46, i64 1
  store i8 %57, i8* %58, align 1
  %59 = load i8, i8* %47, align 1
  %60 = getelementptr inbounds i8, i8* %42, i64 2
  store i8 %59, i8* %60, align 1
  %61 = load i8, i8* %48, align 1
  %62 = getelementptr inbounds i8, i8* %45, i64 2
  store i8 %61, i8* %62, align 1
  %63 = load i8, i8* %49, align 1
  %64 = getelementptr inbounds i8, i8* %46, i64 2
  store i8 %63, i8* %64, align 1
  %65 = load i8, i8* %47, align 1
  %66 = getelementptr inbounds i8, i8* %42, i64 3
  store i8 %65, i8* %66, align 1
  %67 = load i8, i8* %48, align 1
  %68 = getelementptr inbounds i8, i8* %45, i64 3
  store i8 %67, i8* %68, align 1
  %69 = load i8, i8* %49, align 1
  %70 = getelementptr inbounds i8, i8* %46, i64 3
  store i8 %69, i8* %70, align 1
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
!6 = !{!7}
!7 = distinct !{!7, !8}
!8 = distinct !{!8, !"LVerDomain"}
!9 = !{!10}
!10 = distinct !{!10, !8}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.isvectorized", i32 1}
!13 = distinct !{!13, !12}
!14 = distinct !{!14, !3}
!15 = distinct !{!15, !3}
!16 = distinct !{!16, !3}
!17 = !{!18}
!18 = distinct !{!18, !19}
!19 = distinct !{!19, !"LVerDomain"}
!20 = !{!21}
!21 = distinct !{!21, !19}
!22 = distinct !{!22, !12}
!23 = distinct !{!23, !12}
!24 = distinct !{!24, !3}
!25 = distinct !{!25, !3}
!26 = distinct !{!26, !3}
!27 = distinct !{!27, !3}
!28 = distinct !{!28, !3}
!29 = !{!30}
!30 = distinct !{!30, !31}
!31 = distinct !{!31, !"LVerDomain"}
!32 = !{!33}
!33 = distinct !{!33, !31}
!34 = distinct !{!34, !12}
!35 = distinct !{!35, !12}
!36 = distinct !{!36, !3}
!37 = distinct !{!37, !3}
!38 = distinct !{!38, !3}
!39 = !{!40}
!40 = distinct !{!40, !41}
!41 = distinct !{!41, !"LVerDomain"}
!42 = !{!43}
!43 = distinct !{!43, !41}
!44 = distinct !{!44, !12}
!45 = distinct !{!45, !12}
!46 = distinct !{!46, !3}
!47 = distinct !{!47, !3}
