; ModuleID = '../../v8/src/heap/cppgc/incremental-marking-schedule.cc'
source_filename = "../../v8/src/heap/cppgc/incremental-marking-schedule.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.cppgc::internal::IncrementalMarkingSchedule" = type { %"class.v8::base::TimeTicks", i64, %"struct.std::__1::atomic", double, i64, double }
%"class.v8::base::TimeTicks" = type { %"class.v8::base::time_internal::TimeBase" }
%"class.v8::base::time_internal::TimeBase" = type { i64 }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }
%"class.v8::base::TimeDelta" = type { i64 }

@_ZN5cppgc8internal26IncrementalMarkingSchedule30kInvalidLastEstimatedLiveBytesE = hidden local_unnamed_addr constant i64 -1, align 8
@_ZN5cppgc8internal26IncrementalMarkingSchedule23kEstimatedMarkingTimeMsE = hidden local_unnamed_addr constant double 5.000000e+02, align 8
@_ZN5cppgc8internal26IncrementalMarkingSchedule37kMinimumMarkedBytesPerIncrementalStepE = hidden local_unnamed_addr constant i64 65536, align 8
@_ZN5cppgc8internal26IncrementalMarkingSchedule38kEphemeronPairsFlushingRatioIncrementsE = hidden local_unnamed_addr constant double 2.500000e-01, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5cppgc8internal26IncrementalMarkingSchedule29NotifyIncrementalMarkingStartEv(%"class.cppgc::internal::IncrementalMarkingSchedule"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = tail call i64 @_ZN2v84base9TimeTicks3NowEv() #6
  %3 = getelementptr inbounds %"class.cppgc::internal::IncrementalMarkingSchedule", %"class.cppgc::internal::IncrementalMarkingSchedule"* %0, i64 0, i32 0, i32 0, i32 0
  store i64 %2, i64* %3, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i64 @_ZN2v84base9TimeTicks3NowEv() local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5cppgc8internal26IncrementalMarkingSchedule30UpdateMutatorThreadMarkedBytesEm(%"class.cppgc::internal::IncrementalMarkingSchedule"* nocapture, i64) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.cppgc::internal::IncrementalMarkingSchedule", %"class.cppgc::internal::IncrementalMarkingSchedule"* %0, i64 0, i32 1
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5cppgc8internal26IncrementalMarkingSchedule26AddConcurrentlyMarkedBytesEm(%"class.cppgc::internal::IncrementalMarkingSchedule"* nocapture, i64) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.cppgc::internal::IncrementalMarkingSchedule", %"class.cppgc::internal::IncrementalMarkingSchedule"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = atomicrmw add i64* %3, i64 %1 monotonic
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i64 @_ZNK5cppgc8internal26IncrementalMarkingSchedule21GetOverallMarkedBytesEv(%"class.cppgc::internal::IncrementalMarkingSchedule"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.cppgc::internal::IncrementalMarkingSchedule", %"class.cppgc::internal::IncrementalMarkingSchedule"* %0, i64 0, i32 1
  %3 = load i64, i64* %2, align 8
  %4 = getelementptr inbounds %"class.cppgc::internal::IncrementalMarkingSchedule", %"class.cppgc::internal::IncrementalMarkingSchedule"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %5 = load atomic i64, i64* %4 monotonic, align 8
  %6 = add i64 %5, %3
  ret i64 %6
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i64 @_ZNK5cppgc8internal26IncrementalMarkingSchedule26GetConcurrentlyMarkedBytesEv(%"class.cppgc::internal::IncrementalMarkingSchedule"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.cppgc::internal::IncrementalMarkingSchedule", %"class.cppgc::internal::IncrementalMarkingSchedule"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load atomic i64, i64* %2 monotonic, align 8
  ret i64 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN5cppgc8internal26IncrementalMarkingSchedule18GetElapsedTimeInMsEN2v84base9TimeTicksE(%"class.cppgc::internal::IncrementalMarkingSchedule"* nocapture, i64) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::base::TimeDelta", align 8
  %4 = getelementptr inbounds %"class.cppgc::internal::IncrementalMarkingSchedule", %"class.cppgc::internal::IncrementalMarkingSchedule"* %0, i64 0, i32 3
  %5 = load double, double* %4, align 8
  %6 = fcmp une double %5, -1.000000e+00
  br i1 %6, label %7, label %8

7:                                                ; preds = %2
  store double -1.000000e+00, double* %4, align 8
  br label %14

8:                                                ; preds = %2
  %9 = bitcast %"class.v8::base::TimeDelta"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #6
  %10 = tail call i64 @_ZN2v84base9TimeTicks3NowEv() #6
  %11 = sub nsw i64 %10, %1
  %12 = getelementptr inbounds %"class.v8::base::TimeDelta", %"class.v8::base::TimeDelta"* %3, i64 0, i32 0
  store i64 %11, i64* %12, align 8
  %13 = call double @_ZNK2v84base9TimeDelta15InMillisecondsFEv(%"class.v8::base::TimeDelta"* nonnull %3) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #6
  br label %14

14:                                               ; preds = %8, %7
  %15 = phi double [ %5, %7 ], [ %13, %8 ]
  ret double %15
}

declare double @_ZNK2v84base9TimeDelta15InMillisecondsFEv(%"class.v8::base::TimeDelta"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN5cppgc8internal26IncrementalMarkingSchedule30GetNextIncrementalStepDurationEm(%"class.cppgc::internal::IncrementalMarkingSchedule"* nocapture, i64) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::base::TimeDelta", align 8
  %4 = getelementptr inbounds %"class.cppgc::internal::IncrementalMarkingSchedule", %"class.cppgc::internal::IncrementalMarkingSchedule"* %0, i64 0, i32 4
  store i64 %1, i64* %4, align 8
  %5 = getelementptr inbounds %"class.cppgc::internal::IncrementalMarkingSchedule", %"class.cppgc::internal::IncrementalMarkingSchedule"* %0, i64 0, i32 3
  %6 = load double, double* %5, align 8
  %7 = fcmp une double %6, -1.000000e+00
  br i1 %7, label %8, label %9

8:                                                ; preds = %2
  store double -1.000000e+00, double* %5, align 8
  br label %17

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.cppgc::internal::IncrementalMarkingSchedule", %"class.cppgc::internal::IncrementalMarkingSchedule"* %0, i64 0, i32 0, i32 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.v8::base::TimeDelta"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #6
  %13 = tail call i64 @_ZN2v84base9TimeTicks3NowEv() #6
  %14 = sub nsw i64 %13, %11
  %15 = getelementptr inbounds %"class.v8::base::TimeDelta", %"class.v8::base::TimeDelta"* %3, i64 0, i32 0
  store i64 %14, i64* %15, align 8
  %16 = call double @_ZNK2v84base9TimeDelta15InMillisecondsFEv(%"class.v8::base::TimeDelta"* nonnull %3) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #6
  br label %17

17:                                               ; preds = %8, %9
  %18 = phi double [ %6, %8 ], [ %16, %9 ]
  %19 = getelementptr inbounds %"class.cppgc::internal::IncrementalMarkingSchedule", %"class.cppgc::internal::IncrementalMarkingSchedule"* %0, i64 0, i32 1
  %20 = load i64, i64* %19, align 8
  %21 = getelementptr inbounds %"class.cppgc::internal::IncrementalMarkingSchedule", %"class.cppgc::internal::IncrementalMarkingSchedule"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = load atomic i64, i64* %21 monotonic, align 8
  %23 = add i64 %22, %20
  %24 = uitofp i64 %1 to double
  %25 = fmul double %18, %24
  %26 = fdiv double %25, 5.000000e+02
  %27 = call double @llvm.ceil.f64(double %26)
  %28 = fptoui double %27 to i64
  %29 = icmp ugt i64 %23, %28
  br i1 %29, label %34, label %30

30:                                               ; preds = %17
  %31 = sub i64 %28, %23
  %32 = icmp ugt i64 %31, 65536
  %33 = select i1 %32, i64 %31, i64 65536
  br label %34

34:                                               ; preds = %17, %30
  %35 = phi i64 [ %33, %30 ], [ 65536, %17 ]
  ret i64 %35
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.ceil.f64(double) #5

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN5cppgc8internal26IncrementalMarkingSchedule25ShouldFlushEphemeronPairsEv(%"class.cppgc::internal::IncrementalMarkingSchedule"* nocapture) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.cppgc::internal::IncrementalMarkingSchedule", %"class.cppgc::internal::IncrementalMarkingSchedule"* %0, i64 0, i32 1
  %3 = load i64, i64* %2, align 8
  %4 = getelementptr inbounds %"class.cppgc::internal::IncrementalMarkingSchedule", %"class.cppgc::internal::IncrementalMarkingSchedule"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %5 = load atomic i64, i64* %4 monotonic, align 8
  %6 = add i64 %5, %3
  %7 = uitofp i64 %6 to double
  %8 = getelementptr inbounds %"class.cppgc::internal::IncrementalMarkingSchedule", %"class.cppgc::internal::IncrementalMarkingSchedule"* %0, i64 0, i32 5
  %9 = load double, double* %8, align 8
  %10 = getelementptr inbounds %"class.cppgc::internal::IncrementalMarkingSchedule", %"class.cppgc::internal::IncrementalMarkingSchedule"* %0, i64 0, i32 4
  %11 = load i64, i64* %10, align 8
  %12 = uitofp i64 %11 to double
  %13 = fmul double %9, %12
  %14 = fcmp ogt double %13, %7
  br i1 %14, label %17, label %15

15:                                               ; preds = %1
  %16 = fadd double %9, 2.500000e-01
  store double %16, double* %8, align 8
  br label %17

17:                                               ; preds = %1, %15
  %18 = phi i1 [ true, %15 ], [ false, %1 ]
  ret i1 %18
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
