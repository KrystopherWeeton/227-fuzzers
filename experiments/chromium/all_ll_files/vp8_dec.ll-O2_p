; ModuleID = '../../third_party/libwebp/src/dec/vp8_dec.c'
source_filename = "../../third_party/libwebp/src/dec/vp8_dec.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.VP8BitReader = type { i64, i32, i32, i8*, i8*, i8*, i32 }
%struct.VP8BandProbas = type { [3 x [11 x i8]] }
%struct.VP8Io = type { i32, i32, i32, i32, i32, i8*, i8*, i8*, i32, i32, i8*, i32 (%struct.VP8Io*)*, i32 (%struct.VP8Io*)*, void (%struct.VP8Io*)*, i32, i64, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8* }
%struct.VP8Decoder = type { i32, i32, i8*, %struct.VP8BitReader, %struct.VP8FrameHeader, %struct.VP8PictureHeader, %struct.VP8FilterHeader, %struct.VP8SegmentHeader, %struct.WebPWorker, i32, i32, i32, %struct.VP8ThreadContext, i32, i32, i32, i32, i32, i32, i32, [8 x %struct.VP8BitReader], i32, %struct.VP8Random, [4 x %struct.VP8QuantMatrix], %struct.VP8Proba, i32, i8, i8*, [4 x i8], %struct.VP8TopSamples*, %struct.VP8MB*, %struct.VP8FInfo*, i8*, i8*, i8*, i8*, i32, i32, i8*, i64, i32, i32, %struct.VP8MBData*, i32, [4 x [2 x %struct.VP8FInfo]], %struct.ALPHDecoder*, i8*, i64, i32, i8*, i8*, i8*, i32 }
%struct.VP8FrameHeader = type { i8, i8, i8, i32 }
%struct.VP8PictureHeader = type { i16, i16, i8, i8, i8, i8 }
%struct.VP8FilterHeader = type { i32, i32, i32, i32, [4 x i32], [4 x i32] }
%struct.VP8SegmentHeader = type { i32, i32, i32, [4 x i8], [4 x i8] }
%struct.WebPWorker = type { i8*, i32, i32 (i8*, i8*)*, i8*, i8*, i32 }
%struct.VP8ThreadContext = type { i32, i32, i32, %struct.VP8FInfo*, %struct.VP8MBData*, %struct.VP8Io }
%struct.VP8Random = type { i32, i32, [55 x i32], i32 }
%struct.VP8QuantMatrix = type { [2 x i32], [2 x i32], [2 x i32], i32, i32 }
%struct.VP8Proba = type { [3 x i8], [4 x [8 x %struct.VP8BandProbas]], [4 x [17 x %struct.VP8BandProbas*]] }
%struct.VP8TopSamples = type { [16 x i8], [8 x i8], [8 x i8] }
%struct.VP8MB = type { i8, i8 }
%struct.VP8FInfo = type { i8, i8, i8, i8 }
%struct.VP8MBData = type { [384 x i16], i8, [16 x i8], i8, i32, i32, i8, i8, i8 }
%struct.ALPHDecoder = type { i32, i32, i32, i32, i32, %struct.VP8LDecoder*, %struct.VP8Io, i32, i8*, i8* }
%struct.VP8LDecoder = type { i32, i32, %struct.VP8Io*, %struct.WebPDecBuffer*, i32*, i32*, %struct.VP8LBitReader, i32, %struct.VP8LBitReader, i32, i32, i32, i32, i32, i32, %struct.VP8LMetadata, i32, [4 x %struct.VP8LTransform], i32, i8*, %struct.WebPRescaler* }
%struct.WebPDecBuffer = type { i32, i32, i32, i32, %union.anon, [4 x i32], i8* }
%union.anon = type { %struct.WebPYUVABuffer }
%struct.WebPYUVABuffer = type { i8*, i8*, i8*, i8*, i32, i32, i32, i32, i64, i64, i64, i64 }
%struct.VP8LBitReader = type { i64, i8*, i64, i64, i32, i32 }
%struct.VP8LMetadata = type { i32, %struct.VP8LColorCache, %struct.VP8LColorCache, i32, i32, i32, i32*, i32, %struct.HTreeGroup*, %struct.HuffmanCode* }
%struct.VP8LColorCache = type { i32*, i32, i32 }
%struct.HTreeGroup = type { [5 x %struct.HuffmanCode*], i32, i32, i32, i32, [64 x %struct.HuffmanCode32] }
%struct.HuffmanCode32 = type { i32, i32 }
%struct.HuffmanCode = type { i8, i16 }
%struct.VP8LTransform = type { i32, i32, i32, i32, i32* }
%struct.WebPRescaler = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i32, i32*, i32* }
%struct.WebPWorkerInterface = type { void (%struct.WebPWorker*)*, i32 (%struct.WebPWorker*)*, i32 (%struct.WebPWorker*)*, void (%struct.WebPWorker*)*, void (%struct.WebPWorker*)*, void (%struct.WebPWorker*)* }

@.str = private unnamed_addr constant [10 x i8] c"no object\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"OK\00", align 1
@.str.2 = private unnamed_addr constant [37 x i8] c"null VP8Io passed to VP8GetHeaders()\00", align 1
@.str.3 = private unnamed_addr constant [18 x i8] c"Truncated header.\00", align 1
@.str.4 = private unnamed_addr constant [31 x i8] c"Incorrect keyframe parameters.\00", align 1
@.str.5 = private unnamed_addr constant [23 x i8] c"Frame not displayable.\00", align 1
@.str.6 = private unnamed_addr constant [28 x i8] c"cannot parse picture header\00", align 1
@.str.7 = private unnamed_addr constant [14 x i8] c"Bad code word\00", align 1
@.str.8 = private unnamed_addr constant [21 x i8] c"bad partition length\00", align 1
@.str.9 = private unnamed_addr constant [28 x i8] c"cannot parse segment header\00", align 1
@.str.10 = private unnamed_addr constant [27 x i8] c"cannot parse filter header\00", align 1
@.str.11 = private unnamed_addr constant [24 x i8] c"cannot parse partitions\00", align 1
@.str.12 = private unnamed_addr constant [17 x i8] c"Not a key frame.\00", align 1
@.str.13 = private unnamed_addr constant [37 x i8] c"NULL VP8Io parameter in VP8Decode().\00", align 1
@InitGetCoeffs.InitGetCoeffs_body_last_cpuinfo_used = internal global i32 (i32)* bitcast (i32 (i32)** @InitGetCoeffs.InitGetCoeffs_body_last_cpuinfo_used to i32 (i32)*), align 8
@VP8GetCPUInfo = external local_unnamed_addr global i32 (i32)*, align 8
@GetCoeffs = internal global i32 (%struct.VP8BitReader*, %struct.VP8BandProbas**, i32, i32*, i32, i16*)* null, align 8
@kZigzag = internal unnamed_addr constant [16 x i8] c"\00\01\04\08\05\02\03\06\09\0C\0D\0A\07\0B\0E\0F", align 16
@kVP8Log2Range = external local_unnamed_addr constant [128 x i8], align 16
@kVP8NewRange = external local_unnamed_addr constant [128 x i8], align 16
@kCat3456 = internal unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @kCat3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @kCat4, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @kCat5, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @kCat6, i32 0, i32 0)], align 16
@kCat3 = internal constant [4 x i8] c"\AD\94\8C\00", align 1
@kCat4 = internal constant [5 x i8] c"\B0\9B\8C\87\00", align 1
@kCat5 = internal constant [6 x i8] c"\B4\9D\8D\86\82\00", align 1
@kCat6 = internal constant [12 x i8] c"\FE\FE\F3\E6\C4\B1\99\8C\85\82\81\00", align 1
@VP8TransformWHT = external local_unnamed_addr global void (i16*, i16*)*, align 8
@.str.14 = private unnamed_addr constant [41 x i8] c"Premature end-of-partition0 encountered.\00", align 1
@.str.15 = private unnamed_addr constant [35 x i8] c"Premature end-of-file encountered.\00", align 1
@.str.16 = private unnamed_addr constant [16 x i8] c"Output aborted.\00", align 1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @WebPGetDecoderVersion() local_unnamed_addr #0 {
  ret i32 66048
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @VP8InitIoInternal(%struct.VP8Io*, i32) local_unnamed_addr #1 {
  %3 = and i32 %1, -256
  %4 = icmp eq i32 %3, 512
  br i1 %4, label %5, label %9

5:                                                ; preds = %2
  %6 = icmp eq %struct.VP8Io* %0, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %5
  %8 = bitcast %struct.VP8Io* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 0, i64 160, i1 false)
  br label %9

9:                                                ; preds = %7, %5, %2
  %10 = phi i32 [ 0, %2 ], [ 1, %5 ], [ 1, %7 ]
  ret i32 %10
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden %struct.VP8Decoder* @VP8New() local_unnamed_addr #1 {
  %1 = tail call i8* @WebPSafeCalloc(i64 1, i64 3024) #7
  %2 = bitcast i8* %1 to %struct.VP8Decoder*
  %3 = icmp eq i8* %1, null
  br i1 %3, label %29, label %4

4:                                                ; preds = %0
  %5 = bitcast i8* %1 to i32*
  store i32 0, i32* %5, align 8
  %6 = getelementptr inbounds i8, i8* %1, i64 8
  %7 = bitcast i8* %6 to i8**
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i8** %7, align 8
  %8 = tail call %struct.WebPWorkerInterface* @WebPGetWorkerInterface() #7
  %9 = getelementptr inbounds %struct.WebPWorkerInterface, %struct.WebPWorkerInterface* %8, i64 0, i32 0
  %10 = load void (%struct.WebPWorker*)*, void (%struct.WebPWorker*)** %9, align 8
  %11 = getelementptr inbounds i8, i8* %1, i64 152
  %12 = bitcast i8* %11 to %struct.WebPWorker*
  tail call void %10(%struct.WebPWorker* %12) #7
  %13 = getelementptr inbounds i8, i8* %1, i64 4
  %14 = bitcast i8* %13 to i32*
  store i32 0, i32* %14, align 4
  %15 = getelementptr inbounds i8, i8* %1, i64 432
  %16 = bitcast i8* %15 to i32*
  store i32 0, i32* %16, align 8
  %17 = load volatile i32 (i32)*, i32 (i32)** @InitGetCoeffs.InitGetCoeffs_body_last_cpuinfo_used, align 8
  %18 = load i32 (i32)*, i32 (i32)** @VP8GetCPUInfo, align 8
  %19 = icmp eq i32 (i32)* %17, %18
  br i1 %19, label %29, label %20

20:                                               ; preds = %4
  %21 = icmp eq i32 (i32)* %18, null
  br i1 %21, label %25, label %22

22:                                               ; preds = %20
  %23 = tail call i32 %18(i32 2) #7
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %26

25:                                               ; preds = %22, %20
  br label %26

26:                                               ; preds = %22, %25
  %27 = phi i32 (%struct.VP8BitReader*, %struct.VP8BandProbas**, i32, i32*, i32, i16*)* [ @GetCoeffsFast, %25 ], [ @GetCoeffsAlt, %22 ]
  store volatile i32 (%struct.VP8BitReader*, %struct.VP8BandProbas**, i32, i32*, i32, i16*)* %27, i32 (%struct.VP8BitReader*, %struct.VP8BandProbas**, i32, i32*, i32, i16*)** @GetCoeffs, align 8
  %28 = load i64, i64* bitcast (i32 (i32)** @VP8GetCPUInfo to i64*), align 8
  store volatile i64 %28, i64* bitcast (i32 (i32)** @InitGetCoeffs.InitGetCoeffs_body_last_cpuinfo_used to i64*), align 8
  br label %29

29:                                               ; preds = %26, %4, %0
  ret %struct.VP8Decoder* %2
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare i8* @WebPSafeCalloc(i64, i64) local_unnamed_addr #3

declare %struct.WebPWorkerInterface* @WebPGetWorkerInterface() local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @VP8Status(%struct.VP8Decoder* readonly) local_unnamed_addr #4 {
  %2 = icmp eq %struct.VP8Decoder* %0, null
  br i1 %2, label %6, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  br label %6

6:                                                ; preds = %1, %3
  %7 = phi i32 [ %5, %3 ], [ 2, %1 ]
  ret i32 %7
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i8* @VP8StatusMessage(%struct.VP8Decoder* readonly) local_unnamed_addr #4 {
  %2 = icmp eq %struct.VP8Decoder* %0, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = icmp eq i8* %5, null
  %7 = select i1 %6, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i8* %5
  br label %8

8:                                                ; preds = %3, %1
  %9 = phi i8* [ getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), %1 ], [ %7, %3 ]
  ret i8* %9
}

; Function Attrs: nounwind ssp uwtable
define hidden void @VP8Delete(%struct.VP8Decoder*) local_unnamed_addr #1 {
  %2 = icmp eq %struct.VP8Decoder* %0, null
  br i1 %2, label %15, label %3

3:                                                ; preds = %1
  %4 = tail call %struct.WebPWorkerInterface* @WebPGetWorkerInterface() #7
  %5 = getelementptr inbounds %struct.WebPWorkerInterface, %struct.WebPWorkerInterface* %4, i64 0, i32 5
  %6 = load void (%struct.WebPWorker*)*, void (%struct.WebPWorker*)** %5, align 8
  %7 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 8
  tail call void %6(%struct.WebPWorker* %7) #7
  tail call void @WebPDeallocateAlphaMemory(%struct.VP8Decoder* nonnull %0) #7
  %8 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 38
  %9 = load i8*, i8** %8, align 8
  tail call void @WebPSafeFree(i8* %9) #7
  %10 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 3
  %11 = bitcast %struct.VP8BitReader* %10 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 48, i1 false) #7
  %12 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 1
  store i32 0, i32* %12, align 4
  %13 = bitcast i8** %8 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 16, i1 false) #7
  %14 = bitcast %struct.VP8Decoder* %0 to i8*
  tail call void @WebPSafeFree(i8* nonnull %14) #7
  br label %15

15:                                               ; preds = %1, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @VP8Clear(%struct.VP8Decoder*) local_unnamed_addr #1 {
  %2 = icmp eq %struct.VP8Decoder* %0, null
  br i1 %2, label %14, label %3

3:                                                ; preds = %1
  %4 = tail call %struct.WebPWorkerInterface* @WebPGetWorkerInterface() #7
  %5 = getelementptr inbounds %struct.WebPWorkerInterface, %struct.WebPWorkerInterface* %4, i64 0, i32 5
  %6 = load void (%struct.WebPWorker*)*, void (%struct.WebPWorker*)** %5, align 8
  %7 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 8
  tail call void %6(%struct.WebPWorker* %7) #7
  tail call void @WebPDeallocateAlphaMemory(%struct.VP8Decoder* nonnull %0) #7
  %8 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 38
  %9 = load i8*, i8** %8, align 8
  tail call void @WebPSafeFree(i8* %9) #7
  %10 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 3
  %11 = bitcast %struct.VP8BitReader* %10 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 48, i1 false)
  %12 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 1
  store i32 0, i32* %12, align 4
  %13 = bitcast i8** %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 16, i1 false)
  br label %14

14:                                               ; preds = %1, %3
  ret void
}

declare void @WebPSafeFree(i8*) local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @VP8SetError(%struct.VP8Decoder* nocapture, i32, i8*) local_unnamed_addr #5 {
  %4 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  store i32 %1, i32* %4, align 8
  %8 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 2
  store i8* %2, i8** %8, align 8
  %9 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 1
  store i32 0, i32* %9, align 4
  br label %10

10:                                               ; preds = %7, %3
  ret i32 0
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @VP8CheckSignature(i8* nocapture readonly, i64) local_unnamed_addr #4 {
  %3 = icmp ugt i64 %1, 2
  br i1 %3, label %4, label %16

4:                                                ; preds = %2
  %5 = load i8, i8* %0, align 1
  %6 = icmp eq i8 %5, -99
  br i1 %6, label %7, label %16

7:                                                ; preds = %4
  %8 = getelementptr inbounds i8, i8* %0, i64 1
  %9 = load i8, i8* %8, align 1
  %10 = icmp eq i8 %9, 1
  br i1 %10, label %11, label %16

11:                                               ; preds = %7
  %12 = getelementptr inbounds i8, i8* %0, i64 2
  %13 = load i8, i8* %12, align 1
  %14 = icmp eq i8 %13, 42
  %15 = zext i1 %14 to i32
  br label %16

16:                                               ; preds = %11, %7, %4, %2
  %17 = phi i32 [ 0, %7 ], [ 0, %4 ], [ 0, %2 ], [ %15, %11 ]
  ret i32 %17
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @VP8GetInfo(i8* readonly, i64, i64, i32*, i32*) local_unnamed_addr #5 {
  %6 = icmp eq i8* %0, null
  %7 = icmp ult i64 %1, 10
  %8 = or i1 %6, %7
  br i1 %8, label %68, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds i8, i8* %0, i64 3
  %11 = load i8, i8* %10, align 1
  %12 = icmp eq i8 %11, -99
  br i1 %12, label %13, label %68

13:                                               ; preds = %9
  %14 = getelementptr inbounds i8, i8* %0, i64 4
  %15 = load i8, i8* %14, align 1
  %16 = icmp eq i8 %15, 1
  br i1 %16, label %17, label %68

17:                                               ; preds = %13
  %18 = getelementptr inbounds i8, i8* %0, i64 5
  %19 = load i8, i8* %18, align 1
  %20 = icmp eq i8 %19, 42
  br i1 %20, label %21, label %68

21:                                               ; preds = %17
  %22 = load i8, i8* %0, align 1
  %23 = zext i8 %22 to i32
  %24 = getelementptr inbounds i8, i8* %0, i64 7
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = shl nuw nsw i32 %26, 8
  %28 = getelementptr inbounds i8, i8* %0, i64 6
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = and i32 %27, 16128
  %32 = or i32 %31, %30
  %33 = getelementptr inbounds i8, i8* %0, i64 9
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = shl nuw nsw i32 %35, 8
  %37 = getelementptr inbounds i8, i8* %0, i64 8
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i32
  %40 = and i32 %36, 16128
  %41 = or i32 %40, %39
  %42 = and i32 %23, 25
  %43 = icmp eq i32 %42, 16
  br i1 %43, label %44, label %68

44:                                               ; preds = %21
  %45 = getelementptr inbounds i8, i8* %0, i64 1
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = shl nuw nsw i32 %47, 8
  %49 = or i32 %48, %23
  %50 = getelementptr inbounds i8, i8* %0, i64 2
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = shl nuw nsw i32 %52, 16
  %54 = or i32 %49, %53
  %55 = lshr i32 %54, 5
  %56 = zext i32 %55 to i64
  %57 = icmp ult i64 %56, %2
  br i1 %57, label %58, label %68

58:                                               ; preds = %44
  %59 = icmp eq i32 %32, 0
  %60 = icmp eq i32 %41, 0
  %61 = or i1 %59, %60
  br i1 %61, label %68, label %62

62:                                               ; preds = %58
  %63 = icmp eq i32* %3, null
  br i1 %63, label %65, label %64

64:                                               ; preds = %62
  store i32 %32, i32* %3, align 4
  br label %65

65:                                               ; preds = %62, %64
  %66 = icmp eq i32* %4, null
  br i1 %66, label %68, label %67

67:                                               ; preds = %65
  store i32 %41, i32* %4, align 4
  br label %68

68:                                               ; preds = %21, %17, %9, %13, %44, %58, %65, %67, %5
  %69 = phi i32 [ 0, %5 ], [ 0, %17 ], [ 0, %21 ], [ 0, %44 ], [ 0, %58 ], [ 1, %65 ], [ 1, %67 ], [ 0, %13 ], [ 0, %9 ]
  ret i32 %69
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @VP8GetHeaders(%struct.VP8Decoder*, %struct.VP8Io*) local_unnamed_addr #1 {
  %3 = icmp eq %struct.VP8Decoder* %0, null
  br i1 %3, label %406, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 0
  store i32 0, i32* %5, align 8
  %6 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 2
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i8** %6, align 8
  %7 = icmp eq %struct.VP8Io* %1, null
  br i1 %7, label %8, label %10

8:                                                ; preds = %4
  store i32 2, i32* %5, align 8
  store i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.2, i64 0, i64 0), i8** %6, align 8
  %9 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 1
  store i32 0, i32* %9, align 4
  br label %406

10:                                               ; preds = %4
  %11 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %1, i64 0, i32 16
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %1, i64 0, i32 15
  %14 = load i64, i64* %13, align 8
  %15 = icmp ult i64 %14, 4
  br i1 %15, label %16, label %18

16:                                               ; preds = %10
  store i32 7, i32* %5, align 8
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8** %6, align 8
  %17 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 1
  store i32 0, i32* %17, align 4
  br label %406

18:                                               ; preds = %10
  %19 = load i8, i8* %12, align 1
  %20 = zext i8 %19 to i32
  %21 = getelementptr inbounds i8, i8* %12, i64 1
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = shl nuw nsw i32 %23, 8
  %25 = or i32 %24, %20
  %26 = getelementptr inbounds i8, i8* %12, i64 2
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = shl nuw nsw i32 %28, 16
  %30 = or i32 %25, %29
  %31 = and i8 %19, 1
  %32 = xor i8 %31, 1
  %33 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 4, i32 0
  store i8 %32, i8* %33, align 4
  %34 = lshr i8 %19, 1
  %35 = and i8 %34, 7
  %36 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 4, i32 1
  store i8 %35, i8* %36, align 1
  %37 = lshr i8 %19, 4
  %38 = and i8 %37, 1
  %39 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 4, i32 2
  store i8 %38, i8* %39, align 2
  %40 = lshr i32 %30, 5
  %41 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 4, i32 3
  store i32 %40, i32* %41, align 4
  %42 = icmp ugt i8 %35, 3
  br i1 %42, label %43, label %45

43:                                               ; preds = %18
  store i32 3, i32* %5, align 8
  store i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.4, i64 0, i64 0), i8** %6, align 8
  %44 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 1
  store i32 0, i32* %44, align 4
  br label %406

45:                                               ; preds = %18
  %46 = icmp eq i8 %38, 0
  br i1 %46, label %47, label %49

47:                                               ; preds = %45
  store i32 4, i32* %5, align 8
  store i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8** %6, align 8
  %48 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 1
  store i32 0, i32* %48, align 4
  br label %406

49:                                               ; preds = %45
  %50 = getelementptr inbounds i8, i8* %12, i64 3
  %51 = add i64 %14, -3
  %52 = icmp eq i8 %32, 0
  br i1 %52, label %127, label %53

53:                                               ; preds = %49
  %54 = icmp ult i64 %51, 7
  br i1 %54, label %55, label %57

55:                                               ; preds = %53
  store i32 7, i32* %5, align 8
  store i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.6, i64 0, i64 0), i8** %6, align 8
  %56 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 1
  store i32 0, i32* %56, align 4
  br label %406

57:                                               ; preds = %53
  %58 = load i8, i8* %50, align 1
  %59 = icmp eq i8 %58, -99
  br i1 %59, label %60, label %68

60:                                               ; preds = %57
  %61 = getelementptr inbounds i8, i8* %12, i64 4
  %62 = load i8, i8* %61, align 1
  %63 = icmp eq i8 %62, 1
  br i1 %63, label %64, label %68

64:                                               ; preds = %60
  %65 = getelementptr inbounds i8, i8* %12, i64 5
  %66 = load i8, i8* %65, align 1
  %67 = icmp eq i8 %66, 42
  br i1 %67, label %70, label %68

68:                                               ; preds = %60, %57, %64
  store i32 3, i32* %5, align 8
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7, i64 0, i64 0), i8** %6, align 8
  %69 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 1
  store i32 0, i32* %69, align 4
  br label %406

70:                                               ; preds = %64
  %71 = getelementptr inbounds i8, i8* %12, i64 7
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i16
  %74 = shl nuw i16 %73, 8
  %75 = getelementptr inbounds i8, i8* %12, i64 6
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %76 to i16
  %78 = and i16 %74, 16128
  %79 = or i16 %78, %77
  %80 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 5, i32 0
  store i16 %79, i16* %80, align 2
  %81 = load i8, i8* %71, align 1
  %82 = lshr i8 %81, 6
  %83 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 5, i32 2
  store i8 %82, i8* %83, align 2
  %84 = getelementptr inbounds i8, i8* %12, i64 9
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %85 to i16
  %87 = shl nuw i16 %86, 8
  %88 = getelementptr inbounds i8, i8* %12, i64 8
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i16
  %91 = and i16 %87, 16128
  %92 = or i16 %91, %90
  %93 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 5, i32 1
  store i16 %92, i16* %93, align 2
  %94 = load i8, i8* %84, align 1
  %95 = lshr i8 %94, 6
  %96 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 5, i32 3
  store i8 %95, i8* %96, align 1
  %97 = getelementptr inbounds i8, i8* %12, i64 10
  %98 = add i64 %14, -10
  %99 = zext i16 %79 to i32
  %100 = add nuw nsw i32 %99, 15
  %101 = lshr i32 %100, 4
  %102 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 13
  store i32 %101, i32* %102, align 8
  %103 = add nuw nsw i16 %92, 15
  %104 = lshr i16 %103, 4
  %105 = zext i16 %104 to i32
  %106 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 14
  store i32 %105, i32* %106, align 4
  %107 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %1, i64 0, i32 0
  store i32 %99, i32* %107, align 8
  %108 = load i16, i16* %93, align 2
  %109 = zext i16 %108 to i32
  %110 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %1, i64 0, i32 1
  store i32 %109, i32* %110, align 4
  %111 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %1, i64 0, i32 18
  store i32 0, i32* %111, align 4
  %112 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %1, i64 0, i32 21
  store i32 0, i32* %112, align 8
  %113 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %1, i64 0, i32 19
  store i32 0, i32* %113, align 8
  %114 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %1, i64 0, i32 20
  store i32 %99, i32* %114, align 4
  %115 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %1, i64 0, i32 22
  store i32 %109, i32* %115, align 4
  %116 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %1, i64 0, i32 23
  store i32 0, i32* %116, align 8
  %117 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %1, i64 0, i32 24
  store i32 %99, i32* %117, align 4
  %118 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %1, i64 0, i32 25
  store i32 %109, i32* %118, align 8
  %119 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %1, i64 0, i32 3
  store i32 %99, i32* %119, align 4
  %120 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %1, i64 0, i32 4
  store i32 %109, i32* %120, align 8
  %121 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 24
  tail call void @VP8ResetProba(%struct.VP8Proba* %121) #7
  %122 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 7, i32 0
  %123 = bitcast i32* %122 to <4 x i32>*
  store <4 x i32> <i32 0, i32 0, i32 1, i32 0>, <4 x i32>* %123, align 4
  %124 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 7, i32 4, i64 0
  %125 = bitcast i8* %124 to i32*
  store i32 0, i32* %125, align 4
  %126 = load i32, i32* %41, align 4
  br label %127

127:                                              ; preds = %49, %70
  %128 = phi i32 [ %126, %70 ], [ %40, %49 ]
  %129 = phi i8* [ %97, %70 ], [ %50, %49 ]
  %130 = phi i64 [ %98, %70 ], [ %51, %49 ]
  %131 = zext i32 %128 to i64
  %132 = icmp ult i64 %130, %131
  br i1 %132, label %133, label %138

133:                                              ; preds = %127
  %134 = load i32, i32* %5, align 8
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %136, label %406

136:                                              ; preds = %133
  store i32 7, i32* %5, align 8
  store i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.8, i64 0, i64 0), i8** %6, align 8
  %137 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 1
  store i32 0, i32* %137, align 4
  br label %406

138:                                              ; preds = %127
  %139 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 3
  tail call void @VP8InitBitReader(%struct.VP8BitReader* %139, i8* %129, i64 %131) #7
  %140 = load i32, i32* %41, align 4
  %141 = zext i32 %140 to i64
  %142 = getelementptr inbounds i8, i8* %129, i64 %141
  %143 = sub i64 %130, %141
  %144 = load i8, i8* %33, align 4
  %145 = icmp eq i8 %144, 0
  br i1 %145, label %153, label %146

146:                                              ; preds = %138
  %147 = tail call i32 @VP8GetValue(%struct.VP8BitReader* %139, i32 1) #7
  %148 = trunc i32 %147 to i8
  %149 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 5, i32 4
  store i8 %148, i8* %149, align 2
  %150 = tail call i32 @VP8GetValue(%struct.VP8BitReader* %139, i32 1) #7
  %151 = trunc i32 %150 to i8
  %152 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 5, i32 5
  store i8 %151, i8* %152, align 1
  br label %153

153:                                              ; preds = %138, %146
  %154 = tail call i32 @VP8GetValue(%struct.VP8BitReader* %139, i32 1) #7
  %155 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 7, i32 0
  store i32 %154, i32* %155, align 4
  %156 = icmp eq i32 %154, 0
  br i1 %156, label %197, label %157

157:                                              ; preds = %153
  %158 = tail call i32 @VP8GetValue(%struct.VP8BitReader* %139, i32 1) #7
  %159 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 7, i32 1
  store i32 %158, i32* %159, align 4
  %160 = tail call i32 @VP8GetValue(%struct.VP8BitReader* %139, i32 1) #7
  %161 = icmp eq i32 %160, 0
  br i1 %161, label %183, label %162

162:                                              ; preds = %157
  %163 = tail call i32 @VP8GetValue(%struct.VP8BitReader* %139, i32 1) #7
  %164 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 7, i32 2
  store i32 %163, i32* %164, align 4
  %165 = tail call i32 @VP8GetValue(%struct.VP8BitReader* %139, i32 1) #7
  %166 = icmp eq i32 %165, 0
  br i1 %166, label %170, label %167

167:                                              ; preds = %162
  %168 = tail call i32 @VP8GetSignedValue(%struct.VP8BitReader* %139, i32 7) #7
  %169 = trunc i32 %168 to i8
  br label %170

170:                                              ; preds = %167, %162
  %171 = phi i8 [ %169, %167 ], [ 0, %162 ]
  %172 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 7, i32 3, i64 0
  store i8 %171, i8* %172, align 1
  %173 = tail call i32 @VP8GetValue(%struct.VP8BitReader* %139, i32 1) #7
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %238, label %235

175:                                              ; preds = %254
  %176 = tail call i32 @VP8GetSignedValue(%struct.VP8BitReader* %139, i32 6) #7
  %177 = trunc i32 %176 to i8
  br label %178

178:                                              ; preds = %254, %175
  %179 = phi i8 [ %177, %175 ], [ 0, %254 ]
  %180 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 7, i32 4, i64 0
  store i8 %179, i8* %180, align 1
  %181 = tail call i32 @VP8GetValue(%struct.VP8BitReader* %139, i32 1) #7
  %182 = icmp eq i32 %181, 0
  br i1 %182, label %216, label %213

183:                                              ; preds = %232, %157
  %184 = load i32, i32* %159, align 4
  %185 = icmp eq i32 %184, 0
  br i1 %185, label %259, label %186

186:                                              ; preds = %183
  %187 = tail call i32 @VP8GetValue(%struct.VP8BitReader* %139, i32 1) #7
  %188 = icmp eq i32 %187, 0
  br i1 %188, label %192, label %189

189:                                              ; preds = %186
  %190 = tail call i32 @VP8GetValue(%struct.VP8BitReader* %139, i32 8) #7
  %191 = trunc i32 %190 to i8
  br label %192

192:                                              ; preds = %189, %186
  %193 = phi i8 [ %191, %189 ], [ -1, %186 ]
  %194 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 24, i32 0, i64 0
  store i8 %193, i8* %194, align 1
  %195 = tail call i32 @VP8GetValue(%struct.VP8BitReader* %139, i32 1) #7
  %196 = icmp eq i32 %195, 0
  br i1 %196, label %202, label %199

197:                                              ; preds = %153
  %198 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 7, i32 1
  store i32 0, i32* %198, align 4
  br label %259

199:                                              ; preds = %192
  %200 = tail call i32 @VP8GetValue(%struct.VP8BitReader* %139, i32 8) #7
  %201 = trunc i32 %200 to i8
  br label %202

202:                                              ; preds = %199, %192
  %203 = phi i8 [ %201, %199 ], [ -1, %192 ]
  %204 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 24, i32 0, i64 1
  store i8 %203, i8* %204, align 1
  %205 = tail call i32 @VP8GetValue(%struct.VP8BitReader* %139, i32 1) #7
  %206 = icmp eq i32 %205, 0
  br i1 %206, label %210, label %207

207:                                              ; preds = %202
  %208 = tail call i32 @VP8GetValue(%struct.VP8BitReader* %139, i32 8) #7
  %209 = trunc i32 %208 to i8
  br label %210

210:                                              ; preds = %207, %202
  %211 = phi i8 [ %209, %207 ], [ -1, %202 ]
  %212 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 24, i32 0, i64 2
  store i8 %211, i8* %212, align 1
  br label %259

213:                                              ; preds = %178
  %214 = tail call i32 @VP8GetSignedValue(%struct.VP8BitReader* %139, i32 6) #7
  %215 = trunc i32 %214 to i8
  br label %216

216:                                              ; preds = %213, %178
  %217 = phi i8 [ %215, %213 ], [ 0, %178 ]
  %218 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 7, i32 4, i64 1
  store i8 %217, i8* %218, align 1
  %219 = tail call i32 @VP8GetValue(%struct.VP8BitReader* %139, i32 1) #7
  %220 = icmp eq i32 %219, 0
  br i1 %220, label %224, label %221

221:                                              ; preds = %216
  %222 = tail call i32 @VP8GetSignedValue(%struct.VP8BitReader* %139, i32 6) #7
  %223 = trunc i32 %222 to i8
  br label %224

224:                                              ; preds = %221, %216
  %225 = phi i8 [ %223, %221 ], [ 0, %216 ]
  %226 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 7, i32 4, i64 2
  store i8 %225, i8* %226, align 1
  %227 = tail call i32 @VP8GetValue(%struct.VP8BitReader* %139, i32 1) #7
  %228 = icmp eq i32 %227, 0
  br i1 %228, label %232, label %229

229:                                              ; preds = %224
  %230 = tail call i32 @VP8GetSignedValue(%struct.VP8BitReader* %139, i32 6) #7
  %231 = trunc i32 %230 to i8
  br label %232

232:                                              ; preds = %229, %224
  %233 = phi i8 [ %231, %229 ], [ 0, %224 ]
  %234 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 7, i32 4, i64 3
  store i8 %233, i8* %234, align 1
  br label %183

235:                                              ; preds = %170
  %236 = tail call i32 @VP8GetSignedValue(%struct.VP8BitReader* %139, i32 7) #7
  %237 = trunc i32 %236 to i8
  br label %238

238:                                              ; preds = %235, %170
  %239 = phi i8 [ %237, %235 ], [ 0, %170 ]
  %240 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 7, i32 3, i64 1
  store i8 %239, i8* %240, align 1
  %241 = tail call i32 @VP8GetValue(%struct.VP8BitReader* %139, i32 1) #7
  %242 = icmp eq i32 %241, 0
  br i1 %242, label %246, label %243

243:                                              ; preds = %238
  %244 = tail call i32 @VP8GetSignedValue(%struct.VP8BitReader* %139, i32 7) #7
  %245 = trunc i32 %244 to i8
  br label %246

246:                                              ; preds = %243, %238
  %247 = phi i8 [ %245, %243 ], [ 0, %238 ]
  %248 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 7, i32 3, i64 2
  store i8 %247, i8* %248, align 1
  %249 = tail call i32 @VP8GetValue(%struct.VP8BitReader* %139, i32 1) #7
  %250 = icmp eq i32 %249, 0
  br i1 %250, label %254, label %251

251:                                              ; preds = %246
  %252 = tail call i32 @VP8GetSignedValue(%struct.VP8BitReader* %139, i32 7) #7
  %253 = trunc i32 %252 to i8
  br label %254

254:                                              ; preds = %251, %246
  %255 = phi i8 [ %253, %251 ], [ 0, %246 ]
  %256 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 7, i32 3, i64 3
  store i8 %255, i8* %256, align 1
  %257 = tail call i32 @VP8GetValue(%struct.VP8BitReader* %139, i32 1) #7
  %258 = icmp eq i32 %257, 0
  br i1 %258, label %178, label %175

259:                                              ; preds = %183, %197, %210
  %260 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 3, i32 6
  %261 = load i32, i32* %260, align 8
  %262 = icmp eq i32 %261, 0
  br i1 %262, label %268, label %263

263:                                              ; preds = %259
  %264 = load i32, i32* %5, align 8
  %265 = icmp eq i32 %264, 0
  br i1 %265, label %266, label %406

266:                                              ; preds = %263
  store i32 3, i32* %5, align 8
  store i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.9, i64 0, i64 0), i8** %6, align 8
  %267 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 1
  store i32 0, i32* %267, align 4
  br label %406

268:                                              ; preds = %259
  %269 = tail call i32 @VP8GetValue(%struct.VP8BitReader* %139, i32 1) #7
  %270 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 6, i32 0
  store i32 %269, i32* %270, align 4
  %271 = tail call i32 @VP8GetValue(%struct.VP8BitReader* %139, i32 6) #7
  %272 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 6, i32 1
  store i32 %271, i32* %272, align 4
  %273 = tail call i32 @VP8GetValue(%struct.VP8BitReader* %139, i32 3) #7
  %274 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 6, i32 2
  store i32 %273, i32* %274, align 4
  %275 = tail call i32 @VP8GetValue(%struct.VP8BitReader* %139, i32 1) #7
  %276 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 6, i32 3
  store i32 %275, i32* %276, align 4
  %277 = icmp eq i32 %275, 0
  br i1 %277, label %296, label %278

278:                                              ; preds = %268
  %279 = tail call i32 @VP8GetValue(%struct.VP8BitReader* %139, i32 1) #7
  %280 = icmp eq i32 %279, 0
  br i1 %280, label %296, label %281

281:                                              ; preds = %278
  %282 = tail call i32 @VP8GetValue(%struct.VP8BitReader* %139, i32 1) #7
  %283 = icmp eq i32 %282, 0
  br i1 %283, label %287, label %284

284:                                              ; preds = %281
  %285 = tail call i32 @VP8GetSignedValue(%struct.VP8BitReader* %139, i32 6) #7
  %286 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 6, i32 4, i64 0
  store i32 %285, i32* %286, align 4
  br label %287

287:                                              ; preds = %284, %281
  %288 = tail call i32 @VP8GetValue(%struct.VP8BitReader* %139, i32 1) #7
  %289 = icmp eq i32 %288, 0
  br i1 %289, label %321, label %318

290:                                              ; preds = %333
  %291 = tail call i32 @VP8GetSignedValue(%struct.VP8BitReader* %139, i32 6) #7
  %292 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 6, i32 5, i64 0
  store i32 %291, i32* %292, align 4
  br label %293

293:                                              ; preds = %333, %290
  %294 = tail call i32 @VP8GetValue(%struct.VP8BitReader* %139, i32 1) #7
  %295 = icmp eq i32 %294, 0
  br i1 %295, label %306, label %303

296:                                              ; preds = %315, %312, %278, %268
  %297 = load i32, i32* %272, align 4
  %298 = icmp eq i32 %297, 0
  br i1 %298, label %336, label %299

299:                                              ; preds = %296
  %300 = load i32, i32* %270, align 4
  %301 = icmp eq i32 %300, 0
  %302 = select i1 %301, i32 2, i32 1
  br label %336

303:                                              ; preds = %293
  %304 = tail call i32 @VP8GetSignedValue(%struct.VP8BitReader* %139, i32 6) #7
  %305 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 6, i32 5, i64 1
  store i32 %304, i32* %305, align 4
  br label %306

306:                                              ; preds = %303, %293
  %307 = tail call i32 @VP8GetValue(%struct.VP8BitReader* %139, i32 1) #7
  %308 = icmp eq i32 %307, 0
  br i1 %308, label %312, label %309

309:                                              ; preds = %306
  %310 = tail call i32 @VP8GetSignedValue(%struct.VP8BitReader* %139, i32 6) #7
  %311 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 6, i32 5, i64 2
  store i32 %310, i32* %311, align 4
  br label %312

312:                                              ; preds = %309, %306
  %313 = tail call i32 @VP8GetValue(%struct.VP8BitReader* %139, i32 1) #7
  %314 = icmp eq i32 %313, 0
  br i1 %314, label %296, label %315

315:                                              ; preds = %312
  %316 = tail call i32 @VP8GetSignedValue(%struct.VP8BitReader* %139, i32 6) #7
  %317 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 6, i32 5, i64 3
  store i32 %316, i32* %317, align 4
  br label %296

318:                                              ; preds = %287
  %319 = tail call i32 @VP8GetSignedValue(%struct.VP8BitReader* %139, i32 6) #7
  %320 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 6, i32 4, i64 1
  store i32 %319, i32* %320, align 4
  br label %321

321:                                              ; preds = %318, %287
  %322 = tail call i32 @VP8GetValue(%struct.VP8BitReader* %139, i32 1) #7
  %323 = icmp eq i32 %322, 0
  br i1 %323, label %327, label %324

324:                                              ; preds = %321
  %325 = tail call i32 @VP8GetSignedValue(%struct.VP8BitReader* %139, i32 6) #7
  %326 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 6, i32 4, i64 2
  store i32 %325, i32* %326, align 4
  br label %327

327:                                              ; preds = %324, %321
  %328 = tail call i32 @VP8GetValue(%struct.VP8BitReader* %139, i32 1) #7
  %329 = icmp eq i32 %328, 0
  br i1 %329, label %333, label %330

330:                                              ; preds = %327
  %331 = tail call i32 @VP8GetSignedValue(%struct.VP8BitReader* %139, i32 6) #7
  %332 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 6, i32 4, i64 3
  store i32 %331, i32* %332, align 4
  br label %333

333:                                              ; preds = %330, %327
  %334 = tail call i32 @VP8GetValue(%struct.VP8BitReader* %139, i32 1) #7
  %335 = icmp eq i32 %334, 0
  br i1 %335, label %293, label %290

336:                                              ; preds = %296, %299
  %337 = phi i32 [ %302, %299 ], [ 0, %296 ]
  %338 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 43
  store i32 %337, i32* %338, align 8
  %339 = load i32, i32* %260, align 8
  %340 = icmp eq i32 %339, 0
  br i1 %340, label %346, label %341

341:                                              ; preds = %336
  %342 = load i32, i32* %5, align 8
  %343 = icmp eq i32 %342, 0
  br i1 %343, label %344, label %406

344:                                              ; preds = %341
  store i32 3, i32* %5, align 8
  store i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.10, i64 0, i64 0), i8** %6, align 8
  %345 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 1
  store i32 0, i32* %345, align 4
  br label %406

346:                                              ; preds = %336
  %347 = getelementptr inbounds i8, i8* %129, i64 %130
  %348 = tail call i32 @VP8GetValue(%struct.VP8BitReader* %139, i32 2) #7
  %349 = shl nsw i32 -1, %348
  %350 = xor i32 %349, -1
  %351 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 19
  store i32 %350, i32* %351, align 8
  %352 = zext i32 %350 to i64
  %353 = mul nuw nsw i64 %352, 3
  %354 = icmp ult i64 %143, %353
  br i1 %354, label %389, label %355

355:                                              ; preds = %346
  %356 = getelementptr inbounds i8, i8* %142, i64 %353
  %357 = sub i64 %143, %353
  %358 = icmp eq i32 %348, 0
  br i1 %358, label %384, label %359

359:                                              ; preds = %355, %359
  %360 = phi i64 [ %382, %359 ], [ 0, %355 ]
  %361 = phi i64 [ %380, %359 ], [ %357, %355 ]
  %362 = phi i8* [ %379, %359 ], [ %356, %355 ]
  %363 = phi i8* [ %381, %359 ], [ %142, %355 ]
  %364 = load i8, i8* %363, align 1
  %365 = zext i8 %364 to i64
  %366 = getelementptr inbounds i8, i8* %363, i64 1
  %367 = load i8, i8* %366, align 1
  %368 = zext i8 %367 to i64
  %369 = shl nuw nsw i64 %368, 8
  %370 = or i64 %369, %365
  %371 = getelementptr inbounds i8, i8* %363, i64 2
  %372 = load i8, i8* %371, align 1
  %373 = zext i8 %372 to i64
  %374 = shl nuw nsw i64 %373, 16
  %375 = or i64 %370, %374
  %376 = icmp ugt i64 %375, %361
  %377 = select i1 %376, i64 %361, i64 %375
  %378 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 20, i64 %360
  tail call void @VP8InitBitReader(%struct.VP8BitReader* %378, i8* %362, i64 %377) #7
  %379 = getelementptr inbounds i8, i8* %362, i64 %377
  %380 = sub i64 %361, %377
  %381 = getelementptr inbounds i8, i8* %363, i64 3
  %382 = add nuw nsw i64 %360, 1
  %383 = icmp ult i64 %382, %352
  br i1 %383, label %359, label %384

384:                                              ; preds = %359, %355
  %385 = phi i8* [ %356, %355 ], [ %379, %359 ]
  %386 = phi i64 [ %357, %355 ], [ %380, %359 ]
  %387 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 20, i64 %352
  tail call void @VP8InitBitReader(%struct.VP8BitReader* %387, i8* %385, i64 %386) #7
  %388 = icmp ult i8* %385, %347
  br i1 %388, label %395, label %389

389:                                              ; preds = %384, %346
  %390 = phi i32 [ 7, %346 ], [ 5, %384 ]
  %391 = load i32, i32* %5, align 8
  %392 = icmp eq i32 %391, 0
  br i1 %392, label %393, label %406

393:                                              ; preds = %389
  store i32 %390, i32* %5, align 8
  store i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.11, i64 0, i64 0), i8** %6, align 8
  %394 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 1
  store i32 0, i32* %394, align 4
  br label %406

395:                                              ; preds = %384
  tail call void @VP8ParseQuant(%struct.VP8Decoder* %0) #7
  %396 = load i8, i8* %33, align 4
  %397 = icmp eq i8 %396, 0
  br i1 %397, label %398, label %403

398:                                              ; preds = %395
  %399 = load i32, i32* %5, align 8
  %400 = icmp eq i32 %399, 0
  br i1 %400, label %401, label %406

401:                                              ; preds = %398
  store i32 4, i32* %5, align 8
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.12, i64 0, i64 0), i8** %6, align 8
  %402 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 1
  store i32 0, i32* %402, align 4
  br label %406

403:                                              ; preds = %395
  %404 = tail call i32 @VP8GetValue(%struct.VP8BitReader* %139, i32 1) #7
  tail call void @VP8ParseProba(%struct.VP8BitReader* %139, %struct.VP8Decoder* %0) #7
  %405 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 1
  store i32 1, i32* %405, align 4
  br label %406

406:                                              ; preds = %47, %43, %401, %398, %393, %389, %344, %341, %266, %263, %136, %133, %68, %55, %2, %403, %16, %8
  %407 = phi i32 [ 0, %8 ], [ 0, %16 ], [ 1, %403 ], [ 0, %2 ], [ 0, %55 ], [ 0, %68 ], [ 0, %133 ], [ 0, %136 ], [ 0, %263 ], [ 0, %266 ], [ 0, %341 ], [ 0, %344 ], [ 0, %389 ], [ 0, %393 ], [ 0, %398 ], [ 0, %401 ], [ 0, %43 ], [ 0, %47 ]
  ret i32 %407
}

declare void @VP8ResetProba(%struct.VP8Proba*) local_unnamed_addr #3

declare void @VP8InitBitReader(%struct.VP8BitReader*, i8*, i64) local_unnamed_addr #3

declare i32 @VP8GetValue(%struct.VP8BitReader*, i32) local_unnamed_addr #3

declare void @VP8ParseQuant(%struct.VP8Decoder*) local_unnamed_addr #3

declare void @VP8ParseProba(%struct.VP8BitReader*, %struct.VP8Decoder*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @VP8DecodeMB(%struct.VP8Decoder*, %struct.VP8BitReader*) local_unnamed_addr #1 {
  %3 = alloca [16 x i16], align 16
  %4 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 30
  %5 = load %struct.VP8MB*, %struct.VP8MB** %4, align 8
  %6 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 40
  %7 = load i32, i32* %6, align 8
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds %struct.VP8MB, %struct.VP8MB* %5, i64 %8
  %10 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 42
  %11 = load %struct.VP8MBData*, %struct.VP8MBData** %10, align 8
  %12 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 25
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %20, label %15

15:                                               ; preds = %2
  %16 = getelementptr inbounds %struct.VP8MBData, %struct.VP8MBData* %11, i64 %8, i32 7
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = icmp eq i8 %17, 0
  br i1 %19, label %20, label %306

20:                                               ; preds = %2, %15
  %21 = getelementptr inbounds %struct.VP8MBData, %struct.VP8MBData* %11, i64 %8
  %22 = getelementptr inbounds %struct.VP8MBData, %struct.VP8MBData* %11, i64 %8, i32 8
  %23 = load i8, i8* %22, align 2
  %24 = zext i8 %23 to i64
  %25 = getelementptr inbounds %struct.VP8MBData, %struct.VP8MBData* %21, i64 0, i32 0, i64 0
  %26 = bitcast %struct.VP8MBData* %21 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 2 %26, i8 0, i64 768, i1 false) #7
  %27 = getelementptr inbounds %struct.VP8MBData, %struct.VP8MBData* %11, i64 %8, i32 1
  %28 = load i8, i8* %27, align 4
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %30, label %72

30:                                               ; preds = %20
  %31 = bitcast [16 x i16]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %31) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %31, i8 0, i64 32, i1 false) #7
  %32 = getelementptr inbounds %struct.VP8MB, %struct.VP8MB* %5, i64 %8, i32 1
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = getelementptr inbounds %struct.VP8MB, %struct.VP8MB* %5, i64 -1, i32 1
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = add nuw nsw i32 %37, %34
  %39 = load volatile i32 (%struct.VP8BitReader*, %struct.VP8BandProbas**, i32, i32*, i32, i16*)*, i32 (%struct.VP8BitReader*, %struct.VP8BandProbas**, i32, i32*, i32, i16*)** @GetCoeffs, align 8
  %40 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 24, i32 2, i64 1, i64 0
  %41 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 23, i64 %24, i32 1, i64 0
  %42 = getelementptr inbounds [16 x i16], [16 x i16]* %3, i64 0, i64 0
  %43 = call i32 %39(%struct.VP8BitReader* %1, %struct.VP8BandProbas** %40, i32 %38, i32* %41, i32 0, i16* nonnull %42) #7
  %44 = icmp sgt i32 %43, 0
  %45 = zext i1 %44 to i8
  store i8 %45, i8* %35, align 1
  store i8 %45, i8* %32, align 1
  %46 = icmp sgt i32 %43, 1
  br i1 %46, label %47, label %49

47:                                               ; preds = %30
  %48 = load void (i16*, i16*)*, void (i16*, i16*)** @VP8TransformWHT, align 8
  call void %48(i16* nonnull %42, i16* %25) #7
  br label %71

49:                                               ; preds = %30
  %50 = load i16, i16* %42, align 16
  %51 = sext i16 %50 to i32
  %52 = add nsw i32 %51, 3
  %53 = ashr i32 %52, 3
  %54 = trunc i32 %53 to i16
  %55 = getelementptr inbounds %struct.VP8MBData, %struct.VP8MBData* %11, i64 %8, i32 0, i64 0
  store i16 %54, i16* %55, align 2
  %56 = getelementptr inbounds %struct.VP8MBData, %struct.VP8MBData* %11, i64 %8, i32 0, i64 16
  store i16 %54, i16* %56, align 2
  %57 = getelementptr inbounds %struct.VP8MBData, %struct.VP8MBData* %11, i64 %8, i32 0, i64 32
  store i16 %54, i16* %57, align 2
  %58 = getelementptr inbounds %struct.VP8MBData, %struct.VP8MBData* %11, i64 %8, i32 0, i64 48
  store i16 %54, i16* %58, align 2
  %59 = getelementptr inbounds %struct.VP8MBData, %struct.VP8MBData* %11, i64 %8, i32 0, i64 64
  store i16 %54, i16* %59, align 2
  %60 = getelementptr inbounds %struct.VP8MBData, %struct.VP8MBData* %11, i64 %8, i32 0, i64 80
  store i16 %54, i16* %60, align 2
  %61 = getelementptr inbounds %struct.VP8MBData, %struct.VP8MBData* %11, i64 %8, i32 0, i64 96
  store i16 %54, i16* %61, align 2
  %62 = getelementptr inbounds %struct.VP8MBData, %struct.VP8MBData* %11, i64 %8, i32 0, i64 112
  store i16 %54, i16* %62, align 2
  %63 = getelementptr inbounds %struct.VP8MBData, %struct.VP8MBData* %11, i64 %8, i32 0, i64 128
  store i16 %54, i16* %63, align 2
  %64 = getelementptr inbounds %struct.VP8MBData, %struct.VP8MBData* %11, i64 %8, i32 0, i64 144
  store i16 %54, i16* %64, align 2
  %65 = getelementptr inbounds %struct.VP8MBData, %struct.VP8MBData* %11, i64 %8, i32 0, i64 160
  store i16 %54, i16* %65, align 2
  %66 = getelementptr inbounds %struct.VP8MBData, %struct.VP8MBData* %11, i64 %8, i32 0, i64 176
  store i16 %54, i16* %66, align 2
  %67 = getelementptr inbounds %struct.VP8MBData, %struct.VP8MBData* %11, i64 %8, i32 0, i64 192
  store i16 %54, i16* %67, align 2
  %68 = getelementptr inbounds %struct.VP8MBData, %struct.VP8MBData* %11, i64 %8, i32 0, i64 208
  store i16 %54, i16* %68, align 2
  %69 = getelementptr inbounds %struct.VP8MBData, %struct.VP8MBData* %11, i64 %8, i32 0, i64 224
  store i16 %54, i16* %69, align 2
  %70 = getelementptr inbounds %struct.VP8MBData, %struct.VP8MBData* %11, i64 %8, i32 0, i64 240
  store i16 %54, i16* %70, align 2
  br label %71

71:                                               ; preds = %49, %47
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %31) #7
  br label %72

72:                                               ; preds = %71, %20
  %73 = phi i32 [ 1, %71 ], [ 0, %20 ]
  %74 = phi i64 [ 0, %71 ], [ 3, %20 ]
  %75 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 24, i32 2, i64 %74, i64 0
  %76 = getelementptr inbounds %struct.VP8MB, %struct.VP8MB* %9, i64 0, i32 0
  %77 = load i8, i8* %76, align 1
  %78 = and i8 %77, 15
  %79 = getelementptr inbounds %struct.VP8MB, %struct.VP8MB* %5, i64 -1, i32 0
  %80 = load i8, i8* %79, align 1
  %81 = and i8 %80, 15
  %82 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 23, i64 %24, i32 0, i64 0
  br label %83

83:                                               ; preds = %83, %72
  %84 = phi i16* [ %25, %72 ], [ %165, %83 ]
  %85 = phi i32 [ 0, %72 ], [ %174, %83 ]
  %86 = phi i32 [ 0, %72 ], [ %173, %83 ]
  %87 = phi i8 [ %81, %72 ], [ %170, %83 ]
  %88 = phi i8 [ %78, %72 ], [ %167, %83 ]
  %89 = zext i8 %87 to i32
  %90 = and i32 %89, 1
  %91 = zext i8 %88 to i32
  %92 = and i32 %91, 1
  %93 = add nuw nsw i32 %92, %90
  %94 = load volatile i32 (%struct.VP8BitReader*, %struct.VP8BandProbas**, i32, i32*, i32, i16*)*, i32 (%struct.VP8BitReader*, %struct.VP8BandProbas**, i32, i32*, i32, i16*)** @GetCoeffs, align 8
  %95 = call i32 %94(%struct.VP8BitReader* %1, %struct.VP8BandProbas** %75, i32 %93, i32* %82, i32 %73, i16* %84) #7
  %96 = icmp sgt i32 %95, %73
  %97 = zext i1 %96 to i32
  %98 = lshr i32 %91, 1
  %99 = shl nuw nsw i32 %97, 7
  %100 = or i32 %99, %98
  %101 = load i16, i16* %84, align 2
  %102 = icmp ne i16 %101, 0
  %103 = zext i1 %102 to i32
  %104 = icmp sgt i32 %95, 3
  %105 = icmp sgt i32 %95, 1
  %106 = getelementptr inbounds i16, i16* %84, i64 16
  %107 = and i32 %98, 1
  %108 = add nuw nsw i32 %107, %97
  %109 = load volatile i32 (%struct.VP8BitReader*, %struct.VP8BandProbas**, i32, i32*, i32, i16*)*, i32 (%struct.VP8BitReader*, %struct.VP8BandProbas**, i32, i32*, i32, i16*)** @GetCoeffs, align 8
  %110 = call i32 %109(%struct.VP8BitReader* %1, %struct.VP8BandProbas** %75, i32 %108, i32* %82, i32 %73, i16* %106) #7
  %111 = icmp sgt i32 %110, %73
  %112 = zext i1 %111 to i32
  %113 = lshr i32 %100, 1
  %114 = shl nuw nsw i32 %112, 7
  %115 = or i32 %114, %113
  %116 = load i16, i16* %106, align 2
  %117 = icmp ne i16 %116, 0
  %118 = zext i1 %117 to i32
  %119 = shl nuw nsw i32 %103, 2
  %120 = select i1 %105, i32 8, i32 %119
  %121 = select i1 %104, i32 12, i32 %120
  %122 = icmp sgt i32 %110, 3
  %123 = icmp sgt i32 %110, 1
  %124 = select i1 %123, i32 2, i32 %118
  %125 = select i1 %122, i32 3, i32 %124
  %126 = or i32 %125, %121
  %127 = getelementptr inbounds i16, i16* %84, i64 32
  %128 = and i32 %113, 1
  %129 = add nuw nsw i32 %128, %112
  %130 = load volatile i32 (%struct.VP8BitReader*, %struct.VP8BandProbas**, i32, i32*, i32, i16*)*, i32 (%struct.VP8BitReader*, %struct.VP8BandProbas**, i32, i32*, i32, i16*)** @GetCoeffs, align 8
  %131 = call i32 %130(%struct.VP8BitReader* %1, %struct.VP8BandProbas** %75, i32 %129, i32* %82, i32 %73, i16* %127) #7
  %132 = icmp sgt i32 %131, %73
  %133 = zext i1 %132 to i32
  %134 = lshr i32 %115, 1
  %135 = shl nuw nsw i32 %133, 7
  %136 = load i16, i16* %127, align 2
  %137 = icmp ne i16 %136, 0
  %138 = zext i1 %137 to i32
  %139 = shl nuw nsw i32 %126, 2
  %140 = icmp sgt i32 %131, 3
  %141 = icmp sgt i32 %131, 1
  %142 = select i1 %141, i32 2, i32 %138
  %143 = select i1 %140, i32 3, i32 %142
  %144 = or i32 %143, %139
  %145 = getelementptr inbounds i16, i16* %84, i64 48
  %146 = and i32 %134, 224
  %147 = or i32 %135, %146
  %148 = and i32 %134, 1
  %149 = add nuw nsw i32 %148, %133
  %150 = load volatile i32 (%struct.VP8BitReader*, %struct.VP8BandProbas**, i32, i32*, i32, i16*)*, i32 (%struct.VP8BitReader*, %struct.VP8BandProbas**, i32, i32*, i32, i16*)** @GetCoeffs, align 8
  %151 = call i32 %150(%struct.VP8BitReader* %1, %struct.VP8BandProbas** %75, i32 %149, i32* %82, i32 %73, i16* %145) #7
  %152 = icmp sgt i32 %151, %73
  %153 = zext i1 %152 to i32
  %154 = lshr exact i32 %147, 1
  %155 = shl nuw nsw i32 %153, 7
  %156 = or i32 %155, %154
  %157 = load i16, i16* %145, align 2
  %158 = icmp ne i16 %157, 0
  %159 = zext i1 %158 to i32
  %160 = shl i32 %144, 2
  %161 = icmp sgt i32 %151, 3
  %162 = icmp sgt i32 %151, 1
  %163 = select i1 %162, i32 2, i32 %159
  %164 = select i1 %161, i32 3, i32 %163
  %165 = getelementptr inbounds i16, i16* %84, i64 64
  %166 = trunc i32 %156 to i8
  %167 = lshr exact i8 %166, 4
  %168 = lshr i32 %89, 1
  %169 = or i32 %155, %168
  %170 = trunc i32 %169 to i8
  %171 = shl i32 %86, 8
  %172 = or i32 %160, %171
  %173 = or i32 %172, %164
  %174 = add nuw nsw i32 %85, 1
  %175 = icmp eq i32 %174, 4
  br i1 %175, label %176, label %83

176:                                              ; preds = %83
  %177 = zext i8 %167 to i32
  %178 = lshr i32 %169, 4
  %179 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 24, i32 2, i64 2, i64 0
  %180 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 23, i64 %24, i32 2, i64 0
  br label %181

181:                                              ; preds = %181, %176
  %182 = phi i16* [ %165, %176 ], [ %275, %181 ]
  %183 = phi i32 [ %178, %176 ], [ %286, %181 ]
  %184 = phi i32 [ %177, %176 ], [ %284, %181 ]
  %185 = phi i32 [ 0, %176 ], [ %287, %181 ]
  %186 = phi i32 [ 0, %176 ], [ %281, %181 ]
  %187 = load i8, i8* %76, align 1
  %188 = zext i8 %187 to i32
  %189 = add nuw nsw i32 %185, 4
  %190 = lshr i32 %188, %189
  %191 = load i8, i8* %79, align 1
  %192 = zext i8 %191 to i32
  %193 = lshr i32 %192, %189
  %194 = and i32 %193, 1
  %195 = and i32 %190, 1
  %196 = add nuw nsw i32 %194, %195
  %197 = load volatile i32 (%struct.VP8BitReader*, %struct.VP8BandProbas**, i32, i32*, i32, i16*)*, i32 (%struct.VP8BitReader*, %struct.VP8BandProbas**, i32, i32*, i32, i16*)** @GetCoeffs, align 8
  %198 = call i32 %197(%struct.VP8BitReader* %1, %struct.VP8BandProbas** %179, i32 %196, i32* %180, i32 0, i16* %182) #7
  %199 = icmp sgt i32 %198, 0
  %200 = zext i1 %199 to i32
  %201 = lshr i32 %190, 1
  %202 = and i32 %201, 120
  %203 = shl nuw nsw i32 %200, 3
  %204 = or i32 %203, %202
  %205 = load i16, i16* %182, align 2
  %206 = icmp ne i16 %205, 0
  %207 = zext i1 %206 to i32
  %208 = icmp sgt i32 %198, 3
  %209 = icmp sgt i32 %198, 1
  %210 = getelementptr inbounds i16, i16* %182, i64 16
  %211 = and i32 %201, 1
  %212 = add nuw nsw i32 %211, %200
  %213 = load volatile i32 (%struct.VP8BitReader*, %struct.VP8BandProbas**, i32, i32*, i32, i16*)*, i32 (%struct.VP8BitReader*, %struct.VP8BandProbas**, i32, i32*, i32, i16*)** @GetCoeffs, align 8
  %214 = call i32 %213(%struct.VP8BitReader* %1, %struct.VP8BandProbas** %179, i32 %212, i32* %180, i32 0, i16* %210) #7
  %215 = icmp sgt i32 %214, 0
  %216 = zext i1 %215 to i32
  %217 = lshr exact i32 %204, 3
  %218 = shl nuw nsw i32 %216, 1
  %219 = or i32 %218, %217
  %220 = load i16, i16* %210, align 2
  %221 = icmp ne i16 %220, 0
  %222 = zext i1 %221 to i32
  %223 = shl nuw nsw i32 %207, 2
  %224 = select i1 %209, i32 8, i32 %223
  %225 = select i1 %208, i32 12, i32 %224
  %226 = icmp sgt i32 %214, 3
  %227 = icmp sgt i32 %214, 1
  %228 = select i1 %227, i32 2, i32 %222
  %229 = select i1 %226, i32 3, i32 %228
  %230 = or i32 %229, %225
  %231 = getelementptr inbounds i16, i16* %182, i64 32
  %232 = lshr i32 %193, 1
  %233 = and i32 %232, 96
  %234 = shl nuw nsw i32 %216, 5
  %235 = or i32 %234, %233
  %236 = and i32 %232, 1
  %237 = and i32 %217, 1
  %238 = add nuw nsw i32 %237, %236
  %239 = load volatile i32 (%struct.VP8BitReader*, %struct.VP8BandProbas**, i32, i32*, i32, i16*)*, i32 (%struct.VP8BitReader*, %struct.VP8BandProbas**, i32, i32*, i32, i16*)** @GetCoeffs, align 8
  %240 = call i32 %239(%struct.VP8BitReader* %1, %struct.VP8BandProbas** %179, i32 %238, i32* %180, i32 0, i16* %231) #7
  %241 = icmp sgt i32 %240, 0
  %242 = zext i1 %241 to i32
  %243 = lshr i32 %219, 1
  %244 = and i32 %243, 120
  %245 = shl nuw nsw i32 %242, 3
  %246 = or i32 %245, %244
  %247 = load i16, i16* %231, align 2
  %248 = icmp ne i16 %247, 0
  %249 = zext i1 %248 to i32
  %250 = shl nuw nsw i32 %230, 2
  %251 = icmp sgt i32 %240, 3
  %252 = icmp sgt i32 %240, 1
  %253 = select i1 %252, i32 2, i32 %249
  %254 = select i1 %251, i32 3, i32 %253
  %255 = or i32 %254, %250
  %256 = getelementptr inbounds i16, i16* %182, i64 48
  %257 = and i32 %243, 1
  %258 = add nuw nsw i32 %257, %242
  %259 = load volatile i32 (%struct.VP8BitReader*, %struct.VP8BandProbas**, i32, i32*, i32, i16*)*, i32 (%struct.VP8BitReader*, %struct.VP8BandProbas**, i32, i32*, i32, i16*)** @GetCoeffs, align 8
  %260 = call i32 %259(%struct.VP8BitReader* %1, %struct.VP8BandProbas** %179, i32 %258, i32* %180, i32 0, i16* %256) #7
  %261 = icmp sgt i32 %260, 0
  %262 = zext i1 %261 to i32
  %263 = lshr exact i32 %246, 3
  %264 = shl nuw nsw i32 %262, 1
  %265 = or i32 %264, %263
  %266 = load i16, i16* %256, align 2
  %267 = icmp ne i16 %266, 0
  %268 = zext i1 %267 to i32
  %269 = shl i32 %255, 2
  %270 = icmp sgt i32 %260, 3
  %271 = icmp sgt i32 %260, 1
  %272 = select i1 %271, i32 2, i32 %268
  %273 = select i1 %270, i32 3, i32 %272
  %274 = or i32 %273, %269
  %275 = getelementptr inbounds i16, i16* %182, i64 64
  %276 = lshr exact i32 %235, 1
  %277 = shl nuw nsw i32 %262, 5
  %278 = or i32 %277, %276
  %279 = shl nsw i32 %185, 2
  %280 = shl i32 %274, %279
  %281 = or i32 %280, %186
  %282 = shl nuw nsw i32 %265, 4
  %283 = shl i32 %282, %185
  %284 = or i32 %283, %184
  %285 = shl i32 %278, %185
  %286 = or i32 %285, %183
  %287 = add nuw nsw i32 %185, 2
  %288 = icmp ult i32 %287, 4
  br i1 %288, label %181, label %289

289:                                              ; preds = %181
  %290 = trunc i32 %284 to i8
  store i8 %290, i8* %76, align 1
  %291 = trunc i32 %286 to i8
  store i8 %291, i8* %79, align 1
  %292 = getelementptr inbounds %struct.VP8MBData, %struct.VP8MBData* %11, i64 %8, i32 4
  store i32 %173, i32* %292, align 4
  %293 = getelementptr inbounds %struct.VP8MBData, %struct.VP8MBData* %11, i64 %8, i32 5
  store i32 %281, i32* %293, align 4
  %294 = and i32 %281, 43690
  %295 = icmp eq i32 %294, 0
  br i1 %295, label %296, label %300

296:                                              ; preds = %289
  %297 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 23, i64 %24, i32 4
  %298 = load i32, i32* %297, align 4
  %299 = trunc i32 %298 to i8
  br label %300

300:                                              ; preds = %289, %296
  %301 = phi i8 [ %299, %296 ], [ 0, %289 ]
  %302 = getelementptr inbounds %struct.VP8MBData, %struct.VP8MBData* %11, i64 %8, i32 6
  store i8 %301, i8* %302, align 4
  %303 = or i32 %281, %173
  %304 = icmp eq i32 %303, 0
  %305 = zext i1 %304 to i32
  br label %318

306:                                              ; preds = %15
  %307 = getelementptr inbounds %struct.VP8MB, %struct.VP8MB* %9, i64 0, i32 0
  store i8 0, i8* %307, align 1
  %308 = getelementptr inbounds %struct.VP8MB, %struct.VP8MB* %5, i64 -1, i32 0
  store i8 0, i8* %308, align 1
  %309 = getelementptr inbounds %struct.VP8MBData, %struct.VP8MBData* %11, i64 %8, i32 1
  %310 = load i8, i8* %309, align 4
  %311 = icmp eq i8 %310, 0
  br i1 %311, label %312, label %315

312:                                              ; preds = %306
  %313 = getelementptr inbounds %struct.VP8MB, %struct.VP8MB* %5, i64 %8, i32 1
  store i8 0, i8* %313, align 1
  %314 = getelementptr inbounds %struct.VP8MB, %struct.VP8MB* %5, i64 -1, i32 1
  store i8 0, i8* %314, align 1
  br label %315

315:                                              ; preds = %306, %312
  %316 = getelementptr inbounds %struct.VP8MBData, %struct.VP8MBData* %11, i64 %8, i32 4
  %317 = bitcast i32* %316 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %317, i8 0, i64 9, i1 false)
  br label %318

318:                                              ; preds = %315, %300
  %319 = phi i32 [ %18, %315 ], [ %305, %300 ]
  %320 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 43
  %321 = load i32, i32* %320, align 8
  %322 = icmp sgt i32 %321, 0
  br i1 %322, label %323, label %344

323:                                              ; preds = %318
  %324 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 31
  %325 = load %struct.VP8FInfo*, %struct.VP8FInfo** %324, align 8
  %326 = load i32, i32* %6, align 8
  %327 = sext i32 %326 to i64
  %328 = getelementptr inbounds %struct.VP8FInfo, %struct.VP8FInfo* %325, i64 %327
  %329 = getelementptr inbounds %struct.VP8MBData, %struct.VP8MBData* %11, i64 %8, i32 8
  %330 = load i8, i8* %329, align 2
  %331 = zext i8 %330 to i64
  %332 = getelementptr inbounds %struct.VP8MBData, %struct.VP8MBData* %11, i64 %8, i32 1
  %333 = load i8, i8* %332, align 4
  %334 = zext i8 %333 to i64
  %335 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 44, i64 %331, i64 %334, i32 0
  %336 = bitcast i8* %335 to i32*
  %337 = bitcast %struct.VP8FInfo* %328 to i32*
  %338 = load i32, i32* %336, align 4
  store i32 %338, i32* %337, align 1
  %339 = icmp eq i32 %319, 0
  %340 = zext i1 %339 to i8
  %341 = getelementptr inbounds %struct.VP8FInfo, %struct.VP8FInfo* %325, i64 %327, i32 2
  %342 = load i8, i8* %341, align 1
  %343 = or i8 %342, %340
  store i8 %343, i8* %341, align 1
  br label %344

344:                                              ; preds = %323, %318
  %345 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %1, i64 0, i32 6
  %346 = load i32, i32* %345, align 8
  %347 = icmp eq i32 %346, 0
  %348 = zext i1 %347 to i32
  ret i32 %348
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @VP8InitScanline(%struct.VP8Decoder* nocapture) local_unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 30
  %3 = load %struct.VP8MB*, %struct.VP8MB** %2, align 8
  %4 = getelementptr inbounds %struct.VP8MB, %struct.VP8MB* %3, i64 -1, i32 0
  store i8 0, i8* %4, align 1
  %5 = getelementptr inbounds %struct.VP8MB, %struct.VP8MB* %3, i64 -1, i32 1
  store i8 0, i8* %5, align 1
  %6 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 28, i64 0
  %7 = bitcast i8* %6 to i32*
  store i32 0, i32* %7, align 8
  %8 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 40
  store i32 0, i32* %8, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @VP8Decode(%struct.VP8Decoder*, %struct.VP8Io*) local_unnamed_addr #1 {
  %3 = icmp eq %struct.VP8Decoder* %0, null
  br i1 %3, label %116, label %4

4:                                                ; preds = %2
  %5 = icmp eq %struct.VP8Io* %1, null
  br i1 %5, label %6, label %13

6:                                                ; preds = %4
  %7 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %116

10:                                               ; preds = %6
  store i32 2, i32* %7, align 8
  %11 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 2
  store i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.13, i64 0, i64 0), i8** %11, align 8
  %12 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 1
  store i32 0, i32* %12, align 4
  br label %116

13:                                               ; preds = %4
  %14 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %20

17:                                               ; preds = %13
  %18 = tail call i32 @VP8GetHeaders(%struct.VP8Decoder* nonnull %0, %struct.VP8Io* nonnull %1)
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %116, label %20

20:                                               ; preds = %17, %13
  %21 = tail call i32 @VP8EnterCritical(%struct.VP8Decoder* nonnull %0, %struct.VP8Io* nonnull %1) #7
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %105

23:                                               ; preds = %20
  %24 = tail call i32 @VP8InitFrame(%struct.VP8Decoder* nonnull %0, %struct.VP8Io* nonnull %1) #7
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %100, label %26

26:                                               ; preds = %23
  %27 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 41
  store i32 0, i32* %27, align 4
  %28 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 18
  %29 = load i32, i32* %28, align 4
  %30 = icmp sgt i32 %29, 0
  br i1 %30, label %31, label %88

31:                                               ; preds = %26
  %32 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 19
  %33 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 3
  %34 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 40
  %35 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 13
  %36 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 30
  %37 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 28, i64 0
  %38 = bitcast i8* %37 to i32*
  br label %39

39:                                               ; preds = %83, %31
  %40 = phi i32 [ 0, %31 ], [ %85, %83 ]
  %41 = load i32, i32* %32, align 8
  %42 = and i32 %41, %40
  %43 = zext i32 %42 to i64
  %44 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 20, i64 %43
  %45 = tail call i32 @VP8ParseIntraModeRow(%struct.VP8BitReader* %33, %struct.VP8Decoder* %0) #7
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %51, label %47

47:                                               ; preds = %39
  %48 = load i32, i32* %34, align 8
  %49 = load i32, i32* %35, align 8
  %50 = icmp slt i32 %48, %49
  br i1 %50, label %57, label %71

51:                                               ; preds = %39
  %52 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 0
  %53 = load i32, i32* %52, align 8
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %100

55:                                               ; preds = %51
  store i32 7, i32* %52, align 8
  %56 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 2
  store i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.14, i64 0, i64 0), i8** %56, align 8
  store i32 0, i32* %14, align 4
  br label %100

57:                                               ; preds = %47, %66
  %58 = tail call i32 @VP8DecodeMB(%struct.VP8Decoder* %0, %struct.VP8BitReader* %44) #7
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %66

60:                                               ; preds = %57
  %61 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 0
  %62 = load i32, i32* %61, align 8
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %64, label %100

64:                                               ; preds = %60
  store i32 7, i32* %61, align 8
  %65 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 2
  store i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.15, i64 0, i64 0), i8** %65, align 8
  store i32 0, i32* %14, align 4
  br label %100

66:                                               ; preds = %57
  %67 = load i32, i32* %34, align 8
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %34, align 8
  %69 = load i32, i32* %35, align 8
  %70 = icmp slt i32 %68, %69
  br i1 %70, label %57, label %71

71:                                               ; preds = %66, %47
  %72 = load %struct.VP8MB*, %struct.VP8MB** %36, align 8
  %73 = getelementptr inbounds %struct.VP8MB, %struct.VP8MB* %72, i64 -1, i32 0
  store i8 0, i8* %73, align 1
  %74 = getelementptr inbounds %struct.VP8MB, %struct.VP8MB* %72, i64 -1, i32 1
  store i8 0, i8* %74, align 1
  store i32 0, i32* %38, align 8
  store i32 0, i32* %34, align 8
  %75 = tail call i32 @VP8ProcessRow(%struct.VP8Decoder* %0, %struct.VP8Io* nonnull %1) #7
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %83

77:                                               ; preds = %71
  %78 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 0
  %79 = load i32, i32* %78, align 8
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %81, label %100

81:                                               ; preds = %77
  store i32 6, i32* %78, align 8
  %82 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 2
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16, i64 0, i64 0), i8** %82, align 8
  store i32 0, i32* %14, align 4
  br label %100

83:                                               ; preds = %71
  %84 = load i32, i32* %27, align 4
  %85 = add nsw i32 %84, 1
  store i32 %85, i32* %27, align 4
  %86 = load i32, i32* %28, align 4
  %87 = icmp slt i32 %85, %86
  br i1 %87, label %39, label %88

88:                                               ; preds = %83, %26
  %89 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 9
  %90 = load i32, i32* %89, align 8
  %91 = icmp sgt i32 %90, 0
  br i1 %91, label %92, label %99

92:                                               ; preds = %88
  %93 = tail call %struct.WebPWorkerInterface* @WebPGetWorkerInterface() #7
  %94 = getelementptr inbounds %struct.WebPWorkerInterface, %struct.WebPWorkerInterface* %93, i64 0, i32 2
  %95 = load i32 (%struct.WebPWorker*)*, i32 (%struct.WebPWorker*)** %94, align 8
  %96 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 8
  %97 = tail call i32 %95(%struct.WebPWorker* %96) #7
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %100, label %99

99:                                               ; preds = %92, %88
  br label %100

100:                                              ; preds = %23, %51, %55, %60, %64, %77, %81, %92, %99
  %101 = phi i32 [ 0, %23 ], [ 1, %99 ], [ 0, %92 ], [ 0, %51 ], [ 0, %55 ], [ 0, %60 ], [ 0, %64 ], [ 0, %77 ], [ 0, %81 ]
  %102 = tail call i32 @VP8ExitCritical(%struct.VP8Decoder* nonnull %0, %struct.VP8Io* nonnull %1) #7
  %103 = and i32 %102, %101
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %105, label %115

105:                                              ; preds = %20, %100
  %106 = tail call %struct.WebPWorkerInterface* @WebPGetWorkerInterface() #7
  %107 = getelementptr inbounds %struct.WebPWorkerInterface, %struct.WebPWorkerInterface* %106, i64 0, i32 5
  %108 = load void (%struct.WebPWorker*)*, void (%struct.WebPWorker*)** %107, align 8
  %109 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 8
  tail call void %108(%struct.WebPWorker* %109) #7
  tail call void @WebPDeallocateAlphaMemory(%struct.VP8Decoder* nonnull %0) #7
  %110 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 38
  %111 = load i8*, i8** %110, align 8
  tail call void @WebPSafeFree(i8* %111) #7
  %112 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 3
  %113 = bitcast %struct.VP8BitReader* %112 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %113, i8 0, i64 48, i1 false) #7
  store i32 0, i32* %14, align 4
  %114 = bitcast i8** %110 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %114, i8 0, i64 16, i1 false) #7
  br label %116

115:                                              ; preds = %100
  store i32 0, i32* %14, align 4
  br label %116

116:                                              ; preds = %10, %6, %17, %2, %115, %105
  %117 = phi i32 [ 1, %115 ], [ 0, %105 ], [ 0, %2 ], [ 0, %17 ], [ 0, %6 ], [ 0, %10 ]
  ret i32 %117
}

declare i32 @VP8EnterCritical(%struct.VP8Decoder*, %struct.VP8Io*) local_unnamed_addr #3

declare i32 @VP8InitFrame(%struct.VP8Decoder*, %struct.VP8Io*) local_unnamed_addr #3

declare i32 @VP8ExitCritical(%struct.VP8Decoder*, %struct.VP8Io*) local_unnamed_addr #3

declare void @WebPDeallocateAlphaMemory(%struct.VP8Decoder*) local_unnamed_addr #3

declare i32 @VP8GetSignedValue(%struct.VP8BitReader*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal i32 @GetCoeffsAlt(%struct.VP8BitReader*, %struct.VP8BandProbas** nocapture readonly, i32, i32* nocapture readonly, i32, i16* nocapture) #1 {
  %7 = icmp slt i32 %4, 16
  br i1 %7, label %8, label %259

8:                                                ; preds = %6
  %9 = sext i32 %4 to i64
  %10 = getelementptr inbounds %struct.VP8BandProbas*, %struct.VP8BandProbas** %1, i64 %9
  %11 = load %struct.VP8BandProbas*, %struct.VP8BandProbas** %10, align 8
  %12 = sext i32 %2 to i64
  %13 = getelementptr inbounds %struct.VP8BandProbas, %struct.VP8BandProbas* %11, i64 0, i32 0, i64 %12, i64 0
  %14 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 1
  %15 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 2
  %16 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 3
  %17 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 5
  %18 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 0
  br label %19

19:                                               ; preds = %8, %226
  %20 = phi i8* [ %13, %8 ], [ %207, %226 ]
  %21 = phi i32 [ %4, %8 ], [ %146, %226 ]
  %22 = load i8, i8* %20, align 1
  %23 = zext i8 %22 to i32
  %24 = load i32, i32* %14, align 8
  %25 = load i32, i32* %15, align 4
  %26 = icmp slt i32 %25, 0
  br i1 %26, label %27, label %43

27:                                               ; preds = %19
  %28 = load i8*, i8** %16, align 8
  %29 = load i8*, i8** %17, align 8
  %30 = icmp ult i8* %28, %29
  br i1 %30, label %31, label %41

31:                                               ; preds = %27
  %32 = bitcast i8* %28 to i64*
  %33 = load i64, i64* %32, align 1
  %34 = getelementptr inbounds i8, i8* %28, i64 7
  store i8* %34, i8** %16, align 8
  %35 = tail call i64 @llvm.bswap.i64(i64 %33) #7
  %36 = lshr i64 %35, 8
  %37 = load i64, i64* %18, align 8
  %38 = shl i64 %37, 56
  %39 = or i64 %38, %36
  store i64 %39, i64* %18, align 8
  %40 = add nsw i32 %25, 56
  store i32 %40, i32* %15, align 4
  br label %43

41:                                               ; preds = %27
  tail call void @VP8LoadFinalBytes(%struct.VP8BitReader* %0) #7
  %42 = load i32, i32* %15, align 4
  br label %43

43:                                               ; preds = %41, %31, %19
  %44 = phi i32 [ %42, %41 ], [ %40, %31 ], [ %25, %19 ]
  %45 = mul i32 %24, %23
  %46 = lshr i32 %45, 8
  %47 = load i64, i64* %18, align 8
  %48 = zext i32 %44 to i64
  %49 = lshr i64 %47, %48
  %50 = trunc i64 %49 to i32
  %51 = icmp ult i32 %46, %50
  br i1 %51, label %52, label %58

52:                                               ; preds = %43
  %53 = add nuw nsw i32 %46, 1
  %54 = sub i32 %24, %53
  %55 = zext i32 %53 to i64
  %56 = shl i64 %55, %48
  %57 = sub i64 %47, %56
  store i64 %57, i64* %18, align 8
  br label %58

58:                                               ; preds = %52, %43
  %59 = phi i64 [ %57, %52 ], [ %47, %43 ]
  %60 = phi i32 [ 1, %52 ], [ 0, %43 ]
  %61 = phi i32 [ %54, %52 ], [ %46, %43 ]
  %62 = icmp ult i32 %61, 127
  br i1 %62, label %63, label %72

63:                                               ; preds = %58
  %64 = zext i32 %61 to i64
  %65 = getelementptr inbounds [128 x i8], [128 x i8]* @kVP8Log2Range, i64 0, i64 %64
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = getelementptr inbounds [128 x i8], [128 x i8]* @kVP8NewRange, i64 0, i64 %64
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = sub nsw i32 %44, %67
  store i32 %71, i32* %15, align 4
  br label %72

72:                                               ; preds = %58, %63
  %73 = phi i32 [ %71, %63 ], [ %44, %58 ]
  %74 = phi i32 [ %70, %63 ], [ %61, %58 ]
  store i32 %74, i32* %14, align 8
  %75 = icmp eq i32 %60, 0
  br i1 %75, label %259, label %76

76:                                               ; preds = %72
  %77 = sext i32 %21 to i64
  br label %78

78:                                               ; preds = %76, %140
  %79 = phi i64 [ %59, %76 ], [ %120, %140 ]
  %80 = phi i32 [ %73, %76 ], [ %134, %140 ]
  %81 = phi i32 [ %74, %76 ], [ %135, %140 ]
  %82 = phi i64 [ %77, %76 ], [ %137, %140 ]
  %83 = phi i8* [ %20, %76 ], [ %141, %140 ]
  %84 = getelementptr inbounds i8, i8* %83, i64 1
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %85 to i32
  %87 = icmp slt i32 %80, 0
  br i1 %87, label %88, label %104

88:                                               ; preds = %78
  %89 = load i8*, i8** %16, align 8
  %90 = load i8*, i8** %17, align 8
  %91 = icmp ult i8* %89, %90
  br i1 %91, label %92, label %101

92:                                               ; preds = %88
  %93 = bitcast i8* %89 to i64*
  %94 = load i64, i64* %93, align 1
  %95 = getelementptr inbounds i8, i8* %89, i64 7
  store i8* %95, i8** %16, align 8
  %96 = tail call i64 @llvm.bswap.i64(i64 %94) #7
  %97 = lshr i64 %96, 8
  %98 = shl i64 %79, 56
  %99 = or i64 %98, %97
  store i64 %99, i64* %18, align 8
  %100 = add nsw i32 %80, 56
  store i32 %100, i32* %15, align 4
  br label %104

101:                                              ; preds = %88
  tail call void @VP8LoadFinalBytes(%struct.VP8BitReader* %0) #7
  %102 = load i32, i32* %15, align 4
  %103 = load i64, i64* %18, align 8
  br label %104

104:                                              ; preds = %101, %92, %78
  %105 = phi i64 [ %103, %101 ], [ %99, %92 ], [ %79, %78 ]
  %106 = phi i32 [ %102, %101 ], [ %100, %92 ], [ %80, %78 ]
  %107 = mul i32 %81, %86
  %108 = lshr i32 %107, 8
  %109 = zext i32 %106 to i64
  %110 = lshr i64 %105, %109
  %111 = trunc i64 %110 to i32
  %112 = icmp ult i32 %108, %111
  br i1 %112, label %113, label %119

113:                                              ; preds = %104
  %114 = add nuw nsw i32 %108, 1
  %115 = sub i32 %81, %114
  %116 = zext i32 %114 to i64
  %117 = shl i64 %116, %109
  %118 = sub i64 %105, %117
  store i64 %118, i64* %18, align 8
  br label %119

119:                                              ; preds = %113, %104
  %120 = phi i64 [ %118, %113 ], [ %105, %104 ]
  %121 = phi i32 [ 1, %113 ], [ 0, %104 ]
  %122 = phi i32 [ %115, %113 ], [ %108, %104 ]
  %123 = icmp ult i32 %122, 127
  br i1 %123, label %124, label %133

124:                                              ; preds = %119
  %125 = zext i32 %122 to i64
  %126 = getelementptr inbounds [128 x i8], [128 x i8]* @kVP8Log2Range, i64 0, i64 %125
  %127 = load i8, i8* %126, align 1
  %128 = zext i8 %127 to i32
  %129 = getelementptr inbounds [128 x i8], [128 x i8]* @kVP8NewRange, i64 0, i64 %125
  %130 = load i8, i8* %129, align 1
  %131 = zext i8 %130 to i32
  %132 = sub nsw i32 %106, %128
  store i32 %132, i32* %15, align 4
  br label %133

133:                                              ; preds = %119, %124
  %134 = phi i32 [ %132, %124 ], [ %106, %119 ]
  %135 = phi i32 [ %131, %124 ], [ %122, %119 ]
  store i32 %135, i32* %14, align 8
  %136 = icmp eq i32 %121, 0
  %137 = add nsw i64 %82, 1
  %138 = getelementptr inbounds %struct.VP8BandProbas*, %struct.VP8BandProbas** %1, i64 %137
  %139 = load %struct.VP8BandProbas*, %struct.VP8BandProbas** %138, align 8
  br i1 %136, label %140, label %144

140:                                              ; preds = %133
  %141 = getelementptr inbounds %struct.VP8BandProbas, %struct.VP8BandProbas* %139, i64 0, i32 0, i64 0, i64 0
  %142 = trunc i64 %137 to i32
  %143 = icmp eq i32 %142, 16
  br i1 %143, label %259, label %78

144:                                              ; preds = %133
  %145 = trunc i64 %82 to i32
  %146 = trunc i64 %137 to i32
  %147 = getelementptr inbounds i8, i8* %83, i64 2
  %148 = load i8, i8* %147, align 1
  %149 = zext i8 %148 to i32
  %150 = icmp slt i32 %134, 0
  br i1 %150, label %151, label %167

151:                                              ; preds = %144
  %152 = load i8*, i8** %16, align 8
  %153 = load i8*, i8** %17, align 8
  %154 = icmp ult i8* %152, %153
  br i1 %154, label %155, label %164

155:                                              ; preds = %151
  %156 = bitcast i8* %152 to i64*
  %157 = load i64, i64* %156, align 1
  %158 = getelementptr inbounds i8, i8* %152, i64 7
  store i8* %158, i8** %16, align 8
  %159 = tail call i64 @llvm.bswap.i64(i64 %157) #7
  %160 = lshr i64 %159, 8
  %161 = shl i64 %120, 56
  %162 = or i64 %161, %160
  store i64 %162, i64* %18, align 8
  %163 = add nsw i32 %134, 56
  store i32 %163, i32* %15, align 4
  br label %167

164:                                              ; preds = %151
  tail call void @VP8LoadFinalBytes(%struct.VP8BitReader* %0) #7
  %165 = load i32, i32* %15, align 4
  %166 = load i64, i64* %18, align 8
  br label %167

167:                                              ; preds = %164, %155, %144
  %168 = phi i64 [ %166, %164 ], [ %162, %155 ], [ %120, %144 ]
  %169 = phi i32 [ %165, %164 ], [ %163, %155 ], [ %134, %144 ]
  %170 = mul i32 %135, %149
  %171 = lshr i32 %170, 8
  %172 = zext i32 %169 to i64
  %173 = lshr i64 %168, %172
  %174 = trunc i64 %173 to i32
  %175 = icmp ult i32 %171, %174
  br i1 %175, label %176, label %182

176:                                              ; preds = %167
  %177 = add nuw nsw i32 %171, 1
  %178 = sub i32 %135, %177
  %179 = zext i32 %177 to i64
  %180 = shl i64 %179, %172
  %181 = sub i64 %168, %180
  store i64 %181, i64* %18, align 8
  br label %182

182:                                              ; preds = %176, %167
  %183 = phi i32 [ 1, %176 ], [ 0, %167 ]
  %184 = phi i32 [ %178, %176 ], [ %171, %167 ]
  %185 = icmp ult i32 %184, 127
  br i1 %185, label %186, label %195

186:                                              ; preds = %182
  %187 = zext i32 %184 to i64
  %188 = getelementptr inbounds [128 x i8], [128 x i8]* @kVP8Log2Range, i64 0, i64 %187
  %189 = load i8, i8* %188, align 1
  %190 = zext i8 %189 to i32
  %191 = getelementptr inbounds [128 x i8], [128 x i8]* @kVP8NewRange, i64 0, i64 %187
  %192 = load i8, i8* %191, align 1
  %193 = zext i8 %192 to i32
  %194 = sub nsw i32 %169, %190
  store i32 %194, i32* %15, align 4
  br label %195

195:                                              ; preds = %182, %186
  %196 = phi i32 [ %194, %186 ], [ %169, %182 ]
  %197 = phi i32 [ %193, %186 ], [ %184, %182 ]
  store i32 %197, i32* %14, align 8
  %198 = icmp eq i32 %183, 0
  br i1 %198, label %199, label %201

199:                                              ; preds = %195
  %200 = getelementptr inbounds %struct.VP8BandProbas, %struct.VP8BandProbas* %139, i64 0, i32 0, i64 1, i64 0
  br label %205

201:                                              ; preds = %195
  %202 = tail call fastcc i32 @GetLargeValue(%struct.VP8BitReader* %0, i8* %83)
  %203 = getelementptr inbounds %struct.VP8BandProbas, %struct.VP8BandProbas* %139, i64 0, i32 0, i64 2, i64 0
  %204 = load i32, i32* %15, align 4
  br label %205

205:                                              ; preds = %201, %199
  %206 = phi i32 [ %204, %201 ], [ %196, %199 ]
  %207 = phi i8* [ %203, %201 ], [ %200, %199 ]
  %208 = phi i32 [ %202, %201 ], [ 1, %199 ]
  %209 = icmp slt i32 %206, 0
  br i1 %209, label %210, label %226

210:                                              ; preds = %205
  %211 = load i8*, i8** %16, align 8
  %212 = load i8*, i8** %17, align 8
  %213 = icmp ult i8* %211, %212
  br i1 %213, label %214, label %224

214:                                              ; preds = %210
  %215 = bitcast i8* %211 to i64*
  %216 = load i64, i64* %215, align 1
  %217 = getelementptr inbounds i8, i8* %211, i64 7
  store i8* %217, i8** %16, align 8
  %218 = tail call i64 @llvm.bswap.i64(i64 %216) #7
  %219 = lshr i64 %218, 8
  %220 = load i64, i64* %18, align 8
  %221 = shl i64 %220, 56
  %222 = or i64 %221, %219
  store i64 %222, i64* %18, align 8
  %223 = add nsw i32 %206, 56
  store i32 %223, i32* %15, align 4
  br label %226

224:                                              ; preds = %210
  tail call void @VP8LoadFinalBytes(%struct.VP8BitReader* %0) #7
  %225 = load i32, i32* %15, align 4
  br label %226

226:                                              ; preds = %205, %214, %224
  %227 = phi i32 [ %225, %224 ], [ %223, %214 ], [ %206, %205 ]
  %228 = load i32, i32* %14, align 8
  %229 = lshr i32 %228, 1
  %230 = load i64, i64* %18, align 8
  %231 = zext i32 %227 to i64
  %232 = lshr i64 %230, %231
  %233 = trunc i64 %232 to i32
  %234 = sub i32 %229, %233
  %235 = ashr i32 %234, 31
  %236 = add nsw i32 %227, -1
  store i32 %236, i32* %15, align 4
  %237 = add i32 %235, %228
  %238 = or i32 %237, 1
  store i32 %238, i32* %14, align 8
  %239 = add nuw i32 %229, 1
  %240 = and i32 %235, %239
  %241 = zext i32 %240 to i64
  %242 = shl i64 %241, %231
  %243 = sub i64 %230, %242
  store i64 %243, i64* %18, align 8
  %244 = xor i32 %235, %208
  %245 = sub nsw i32 %244, %235
  %246 = icmp sgt i32 %145, 0
  %247 = zext i1 %246 to i64
  %248 = getelementptr inbounds i32, i32* %3, i64 %247
  %249 = load i32, i32* %248, align 4
  %250 = mul nsw i32 %245, %249
  %251 = trunc i32 %250 to i16
  %252 = shl i64 %82, 32
  %253 = ashr exact i64 %252, 32
  %254 = getelementptr inbounds [16 x i8], [16 x i8]* @kZigzag, i64 0, i64 %253
  %255 = load i8, i8* %254, align 1
  %256 = zext i8 %255 to i64
  %257 = getelementptr inbounds i16, i16* %5, i64 %256
  store i16 %251, i16* %257, align 2
  %258 = icmp slt i32 %146, 16
  br i1 %258, label %19, label %259

259:                                              ; preds = %72, %226, %140, %6
  %260 = phi i32 [ 16, %6 ], [ 16, %140 ], [ %21, %72 ], [ 16, %226 ]
  ret i32 %260
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @GetCoeffsFast(%struct.VP8BitReader*, %struct.VP8BandProbas** nocapture readonly, i32, i32* nocapture readonly, i32, i16* nocapture) #1 {
  %7 = icmp slt i32 %4, 16
  br i1 %7, label %8, label %236

8:                                                ; preds = %6
  %9 = sext i32 %4 to i64
  %10 = getelementptr inbounds %struct.VP8BandProbas*, %struct.VP8BandProbas** %1, i64 %9
  %11 = load %struct.VP8BandProbas*, %struct.VP8BandProbas** %10, align 8
  %12 = sext i32 %2 to i64
  %13 = getelementptr inbounds %struct.VP8BandProbas, %struct.VP8BandProbas* %11, i64 0, i32 0, i64 %12, i64 0
  %14 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 1
  %15 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 2
  %16 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 3
  %17 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 5
  %18 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 0
  br label %19

19:                                               ; preds = %8, %203
  %20 = phi i8* [ %13, %8 ], [ %184, %203 ]
  %21 = phi i32 [ %4, %8 ], [ %131, %203 ]
  %22 = load i8, i8* %20, align 1
  %23 = zext i8 %22 to i32
  %24 = load i32, i32* %14, align 8
  %25 = load i32, i32* %15, align 4
  %26 = icmp slt i32 %25, 0
  br i1 %26, label %27, label %43

27:                                               ; preds = %19
  %28 = load i8*, i8** %16, align 8
  %29 = load i8*, i8** %17, align 8
  %30 = icmp ult i8* %28, %29
  br i1 %30, label %31, label %41

31:                                               ; preds = %27
  %32 = bitcast i8* %28 to i64*
  %33 = load i64, i64* %32, align 1
  %34 = getelementptr inbounds i8, i8* %28, i64 7
  store i8* %34, i8** %16, align 8
  %35 = tail call i64 @llvm.bswap.i64(i64 %33) #7
  %36 = lshr i64 %35, 8
  %37 = load i64, i64* %18, align 8
  %38 = shl i64 %37, 56
  %39 = or i64 %38, %36
  store i64 %39, i64* %18, align 8
  %40 = add nsw i32 %25, 56
  store i32 %40, i32* %15, align 4
  br label %43

41:                                               ; preds = %27
  tail call void @VP8LoadFinalBytes(%struct.VP8BitReader* %0) #7
  %42 = load i32, i32* %15, align 4
  br label %43

43:                                               ; preds = %41, %31, %19
  %44 = phi i32 [ %42, %41 ], [ %40, %31 ], [ %25, %19 ]
  %45 = mul i32 %24, %23
  %46 = lshr i32 %45, 8
  %47 = load i64, i64* %18, align 8
  %48 = zext i32 %44 to i64
  %49 = lshr i64 %47, %48
  %50 = trunc i64 %49 to i32
  %51 = icmp ult i32 %46, %50
  br i1 %51, label %52, label %58

52:                                               ; preds = %43
  %53 = sub i32 %24, %46
  %54 = add nuw nsw i32 %46, 1
  %55 = zext i32 %54 to i64
  %56 = shl i64 %55, %48
  %57 = sub i64 %47, %56
  store i64 %57, i64* %18, align 8
  br label %60

58:                                               ; preds = %43
  %59 = add nuw nsw i32 %46, 1
  br label %60

60:                                               ; preds = %52, %58
  %61 = phi i64 [ %57, %52 ], [ %47, %58 ]
  %62 = phi i32 [ %53, %52 ], [ %59, %58 ]
  %63 = tail call i32 @llvm.ctlz.i32(i32 %62, i1 true) #7, !range !2
  %64 = xor i32 %63, 24
  %65 = shl i32 %62, %64
  %66 = sub nsw i32 %44, %64
  store i32 %66, i32* %15, align 4
  %67 = add i32 %65, -1
  store i32 %67, i32* %14, align 8
  br i1 %51, label %68, label %236

68:                                               ; preds = %60
  %69 = sext i32 %21 to i64
  br label %72

70:                                               ; preds = %126
  %71 = getelementptr inbounds %struct.VP8BandProbas, %struct.VP8BandProbas* %125, i64 0, i32 0, i64 0, i64 0
  br label %72

72:                                               ; preds = %68, %70
  %73 = phi i64 [ %61, %68 ], [ %116, %70 ]
  %74 = phi i32 [ %67, %68 ], [ %122, %70 ]
  %75 = phi i64 [ %69, %68 ], [ %123, %70 ]
  %76 = phi i32 [ %66, %68 ], [ %121, %70 ]
  %77 = phi i8* [ %20, %68 ], [ %71, %70 ]
  %78 = getelementptr inbounds i8, i8* %77, i64 1
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i32
  %81 = icmp slt i32 %76, 0
  br i1 %81, label %82, label %98

82:                                               ; preds = %72
  %83 = load i8*, i8** %16, align 8
  %84 = load i8*, i8** %17, align 8
  %85 = icmp ult i8* %83, %84
  br i1 %85, label %86, label %95

86:                                               ; preds = %82
  %87 = bitcast i8* %83 to i64*
  %88 = load i64, i64* %87, align 1
  %89 = getelementptr inbounds i8, i8* %83, i64 7
  store i8* %89, i8** %16, align 8
  %90 = tail call i64 @llvm.bswap.i64(i64 %88) #7
  %91 = lshr i64 %90, 8
  %92 = shl i64 %73, 56
  %93 = or i64 %92, %91
  store i64 %93, i64* %18, align 8
  %94 = add nsw i32 %76, 56
  store i32 %94, i32* %15, align 4
  br label %98

95:                                               ; preds = %82
  tail call void @VP8LoadFinalBytes(%struct.VP8BitReader* %0) #7
  %96 = load i32, i32* %15, align 4
  %97 = load i64, i64* %18, align 8
  br label %98

98:                                               ; preds = %95, %86, %72
  %99 = phi i64 [ %97, %95 ], [ %93, %86 ], [ %73, %72 ]
  %100 = phi i32 [ %96, %95 ], [ %94, %86 ], [ %76, %72 ]
  %101 = mul i32 %74, %80
  %102 = lshr i32 %101, 8
  %103 = zext i32 %100 to i64
  %104 = lshr i64 %99, %103
  %105 = trunc i64 %104 to i32
  %106 = icmp ult i32 %102, %105
  br i1 %106, label %107, label %113

107:                                              ; preds = %98
  %108 = sub i32 %74, %102
  %109 = add nuw nsw i32 %102, 1
  %110 = zext i32 %109 to i64
  %111 = shl i64 %110, %103
  %112 = sub i64 %99, %111
  store i64 %112, i64* %18, align 8
  br label %115

113:                                              ; preds = %98
  %114 = add nuw nsw i32 %102, 1
  br label %115

115:                                              ; preds = %107, %113
  %116 = phi i64 [ %112, %107 ], [ %99, %113 ]
  %117 = phi i32 [ %108, %107 ], [ %114, %113 ]
  %118 = tail call i32 @llvm.ctlz.i32(i32 %117, i1 true) #7, !range !2
  %119 = xor i32 %118, 24
  %120 = shl i32 %117, %119
  %121 = sub nsw i32 %100, %119
  store i32 %121, i32* %15, align 4
  %122 = add i32 %120, -1
  store i32 %122, i32* %14, align 8
  %123 = add nsw i64 %75, 1
  %124 = getelementptr inbounds %struct.VP8BandProbas*, %struct.VP8BandProbas** %1, i64 %123
  %125 = load %struct.VP8BandProbas*, %struct.VP8BandProbas** %124, align 8
  br i1 %106, label %129, label %126

126:                                              ; preds = %115
  %127 = trunc i64 %123 to i32
  %128 = icmp eq i32 %127, 16
  br i1 %128, label %236, label %70

129:                                              ; preds = %115
  %130 = trunc i64 %75 to i32
  %131 = trunc i64 %123 to i32
  %132 = getelementptr inbounds i8, i8* %77, i64 2
  %133 = load i8, i8* %132, align 1
  %134 = zext i8 %133 to i32
  %135 = icmp slt i32 %121, 0
  br i1 %135, label %136, label %152

136:                                              ; preds = %129
  %137 = load i8*, i8** %16, align 8
  %138 = load i8*, i8** %17, align 8
  %139 = icmp ult i8* %137, %138
  br i1 %139, label %140, label %149

140:                                              ; preds = %136
  %141 = bitcast i8* %137 to i64*
  %142 = load i64, i64* %141, align 1
  %143 = getelementptr inbounds i8, i8* %137, i64 7
  store i8* %143, i8** %16, align 8
  %144 = tail call i64 @llvm.bswap.i64(i64 %142) #7
  %145 = lshr i64 %144, 8
  %146 = shl i64 %116, 56
  %147 = or i64 %146, %145
  store i64 %147, i64* %18, align 8
  %148 = add nsw i32 %121, 56
  store i32 %148, i32* %15, align 4
  br label %152

149:                                              ; preds = %136
  tail call void @VP8LoadFinalBytes(%struct.VP8BitReader* %0) #7
  %150 = load i32, i32* %15, align 4
  %151 = load i64, i64* %18, align 8
  br label %152

152:                                              ; preds = %149, %140, %129
  %153 = phi i64 [ %151, %149 ], [ %147, %140 ], [ %116, %129 ]
  %154 = phi i32 [ %150, %149 ], [ %148, %140 ], [ %121, %129 ]
  %155 = mul i32 %122, %134
  %156 = lshr i32 %155, 8
  %157 = zext i32 %154 to i64
  %158 = lshr i64 %153, %157
  %159 = trunc i64 %158 to i32
  %160 = icmp ult i32 %156, %159
  br i1 %160, label %161, label %167

161:                                              ; preds = %152
  %162 = sub i32 %122, %156
  %163 = add nuw nsw i32 %156, 1
  %164 = zext i32 %163 to i64
  %165 = shl i64 %164, %157
  %166 = sub i64 %153, %165
  store i64 %166, i64* %18, align 8
  br label %169

167:                                              ; preds = %152
  %168 = add nuw nsw i32 %156, 1
  br label %169

169:                                              ; preds = %161, %167
  %170 = phi i32 [ %162, %161 ], [ %168, %167 ]
  %171 = tail call i32 @llvm.ctlz.i32(i32 %170, i1 true) #7, !range !2
  %172 = xor i32 %171, 24
  %173 = shl i32 %170, %172
  %174 = sub nsw i32 %154, %172
  store i32 %174, i32* %15, align 4
  %175 = add i32 %173, -1
  store i32 %175, i32* %14, align 8
  br i1 %160, label %178, label %176

176:                                              ; preds = %169
  %177 = getelementptr inbounds %struct.VP8BandProbas, %struct.VP8BandProbas* %125, i64 0, i32 0, i64 1, i64 0
  br label %182

178:                                              ; preds = %169
  %179 = tail call fastcc i32 @GetLargeValue(%struct.VP8BitReader* %0, i8* %77)
  %180 = getelementptr inbounds %struct.VP8BandProbas, %struct.VP8BandProbas* %125, i64 0, i32 0, i64 2, i64 0
  %181 = load i32, i32* %15, align 4
  br label %182

182:                                              ; preds = %178, %176
  %183 = phi i32 [ %181, %178 ], [ %174, %176 ]
  %184 = phi i8* [ %180, %178 ], [ %177, %176 ]
  %185 = phi i32 [ %179, %178 ], [ 1, %176 ]
  %186 = icmp slt i32 %183, 0
  br i1 %186, label %187, label %203

187:                                              ; preds = %182
  %188 = load i8*, i8** %16, align 8
  %189 = load i8*, i8** %17, align 8
  %190 = icmp ult i8* %188, %189
  br i1 %190, label %191, label %201

191:                                              ; preds = %187
  %192 = bitcast i8* %188 to i64*
  %193 = load i64, i64* %192, align 1
  %194 = getelementptr inbounds i8, i8* %188, i64 7
  store i8* %194, i8** %16, align 8
  %195 = tail call i64 @llvm.bswap.i64(i64 %193) #7
  %196 = lshr i64 %195, 8
  %197 = load i64, i64* %18, align 8
  %198 = shl i64 %197, 56
  %199 = or i64 %198, %196
  store i64 %199, i64* %18, align 8
  %200 = add nsw i32 %183, 56
  store i32 %200, i32* %15, align 4
  br label %203

201:                                              ; preds = %187
  tail call void @VP8LoadFinalBytes(%struct.VP8BitReader* %0) #7
  %202 = load i32, i32* %15, align 4
  br label %203

203:                                              ; preds = %182, %191, %201
  %204 = phi i32 [ %202, %201 ], [ %200, %191 ], [ %183, %182 ]
  %205 = load i32, i32* %14, align 8
  %206 = lshr i32 %205, 1
  %207 = load i64, i64* %18, align 8
  %208 = zext i32 %204 to i64
  %209 = lshr i64 %207, %208
  %210 = trunc i64 %209 to i32
  %211 = sub i32 %206, %210
  %212 = ashr i32 %211, 31
  %213 = add nsw i32 %204, -1
  store i32 %213, i32* %15, align 4
  %214 = add i32 %212, %205
  %215 = or i32 %214, 1
  store i32 %215, i32* %14, align 8
  %216 = add nuw i32 %206, 1
  %217 = and i32 %212, %216
  %218 = zext i32 %217 to i64
  %219 = shl i64 %218, %208
  %220 = sub i64 %207, %219
  store i64 %220, i64* %18, align 8
  %221 = xor i32 %212, %185
  %222 = sub nsw i32 %221, %212
  %223 = icmp sgt i32 %130, 0
  %224 = zext i1 %223 to i64
  %225 = getelementptr inbounds i32, i32* %3, i64 %224
  %226 = load i32, i32* %225, align 4
  %227 = mul nsw i32 %222, %226
  %228 = trunc i32 %227 to i16
  %229 = shl i64 %75, 32
  %230 = ashr exact i64 %229, 32
  %231 = getelementptr inbounds [16 x i8], [16 x i8]* @kZigzag, i64 0, i64 %230
  %232 = load i8, i8* %231, align 1
  %233 = zext i8 %232 to i64
  %234 = getelementptr inbounds i16, i16* %5, i64 %233
  store i16 %228, i16* %234, align 2
  %235 = icmp slt i32 %131, 16
  br i1 %235, label %19, label %236

236:                                              ; preds = %203, %60, %126, %6
  %237 = phi i32 [ 16, %6 ], [ 16, %126 ], [ 16, %203 ], [ %21, %60 ]
  ret i32 %237
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @GetLargeValue(%struct.VP8BitReader*, i8* nocapture readonly) unnamed_addr #1 {
  %3 = getelementptr inbounds i8, i8* %1, i64 3
  %4 = load i8, i8* %3, align 1
  %5 = zext i8 %4 to i32
  %6 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = icmp slt i32 %9, 0
  br i1 %10, label %11, label %30

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 3
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 5
  %15 = load i8*, i8** %14, align 8
  %16 = icmp ult i8* %13, %15
  br i1 %16, label %17, label %28

17:                                               ; preds = %11
  %18 = bitcast i8* %13 to i64*
  %19 = load i64, i64* %18, align 1
  %20 = getelementptr inbounds i8, i8* %13, i64 7
  store i8* %20, i8** %12, align 8
  %21 = tail call i64 @llvm.bswap.i64(i64 %19) #7
  %22 = lshr i64 %21, 8
  %23 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 0
  %24 = load i64, i64* %23, align 8
  %25 = shl i64 %24, 56
  %26 = or i64 %25, %22
  store i64 %26, i64* %23, align 8
  %27 = add nsw i32 %9, 56
  store i32 %27, i32* %8, align 4
  br label %30

28:                                               ; preds = %11
  tail call void @VP8LoadFinalBytes(%struct.VP8BitReader* %0) #7
  %29 = load i32, i32* %8, align 4
  br label %30

30:                                               ; preds = %28, %17, %2
  %31 = phi i32 [ %29, %28 ], [ %27, %17 ], [ %9, %2 ]
  %32 = mul i32 %7, %5
  %33 = lshr i32 %32, 8
  %34 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 0
  %35 = load i64, i64* %34, align 8
  %36 = zext i32 %31 to i64
  %37 = lshr i64 %35, %36
  %38 = trunc i64 %37 to i32
  %39 = icmp ult i32 %33, %38
  br i1 %39, label %40, label %46

40:                                               ; preds = %30
  %41 = sub i32 %7, %33
  %42 = add nuw nsw i32 %33, 1
  %43 = zext i32 %42 to i64
  %44 = shl i64 %43, %36
  %45 = sub i64 %35, %44
  store i64 %45, i64* %34, align 8
  br label %48

46:                                               ; preds = %30
  %47 = add nuw nsw i32 %33, 1
  br label %48

48:                                               ; preds = %40, %46
  %49 = phi i64 [ %45, %40 ], [ %35, %46 ]
  %50 = phi i32 [ %41, %40 ], [ %47, %46 ]
  %51 = tail call i32 @llvm.ctlz.i32(i32 %50, i1 true) #7, !range !2
  %52 = xor i32 %51, 24
  %53 = shl i32 %50, %52
  %54 = sub nsw i32 %31, %52
  store i32 %54, i32* %8, align 4
  %55 = add i32 %53, -1
  store i32 %55, i32* %6, align 8
  br i1 %39, label %152, label %56

56:                                               ; preds = %48
  %57 = getelementptr inbounds i8, i8* %1, i64 4
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i32
  %60 = icmp slt i32 %54, 0
  br i1 %60, label %61, label %79

61:                                               ; preds = %56
  %62 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 3
  %63 = load i8*, i8** %62, align 8
  %64 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 5
  %65 = load i8*, i8** %64, align 8
  %66 = icmp ult i8* %63, %65
  br i1 %66, label %67, label %76

67:                                               ; preds = %61
  %68 = bitcast i8* %63 to i64*
  %69 = load i64, i64* %68, align 1
  %70 = getelementptr inbounds i8, i8* %63, i64 7
  store i8* %70, i8** %62, align 8
  %71 = tail call i64 @llvm.bswap.i64(i64 %69) #7
  %72 = lshr i64 %71, 8
  %73 = shl i64 %49, 56
  %74 = or i64 %73, %72
  store i64 %74, i64* %34, align 8
  %75 = add nsw i32 %54, 56
  store i32 %75, i32* %8, align 4
  br label %79

76:                                               ; preds = %61
  tail call void @VP8LoadFinalBytes(%struct.VP8BitReader* %0) #7
  %77 = load i32, i32* %8, align 4
  %78 = load i64, i64* %34, align 8
  br label %79

79:                                               ; preds = %76, %67, %56
  %80 = phi i64 [ %78, %76 ], [ %74, %67 ], [ %49, %56 ]
  %81 = phi i32 [ %77, %76 ], [ %75, %67 ], [ %54, %56 ]
  %82 = mul i32 %55, %59
  %83 = lshr i32 %82, 8
  %84 = zext i32 %81 to i64
  %85 = lshr i64 %80, %84
  %86 = trunc i64 %85 to i32
  %87 = icmp ult i32 %83, %86
  br i1 %87, label %88, label %94

88:                                               ; preds = %79
  %89 = sub i32 %55, %83
  %90 = add nuw nsw i32 %83, 1
  %91 = zext i32 %90 to i64
  %92 = shl i64 %91, %84
  %93 = sub i64 %80, %92
  store i64 %93, i64* %34, align 8
  br label %96

94:                                               ; preds = %79
  %95 = add nuw nsw i32 %83, 1
  br label %96

96:                                               ; preds = %88, %94
  %97 = phi i64 [ %93, %88 ], [ %80, %94 ]
  %98 = phi i32 [ %89, %88 ], [ %95, %94 ]
  %99 = tail call i32 @llvm.ctlz.i32(i32 %98, i1 true) #7, !range !2
  %100 = xor i32 %99, 24
  %101 = shl i32 %98, %100
  %102 = sub nsw i32 %81, %100
  store i32 %102, i32* %8, align 4
  %103 = add i32 %101, -1
  store i32 %103, i32* %6, align 8
  br i1 %87, label %104, label %554

104:                                              ; preds = %96
  %105 = getelementptr inbounds i8, i8* %1, i64 5
  %106 = load i8, i8* %105, align 1
  %107 = zext i8 %106 to i32
  %108 = icmp slt i32 %102, 0
  br i1 %108, label %109, label %127

109:                                              ; preds = %104
  %110 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 3
  %111 = load i8*, i8** %110, align 8
  %112 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 5
  %113 = load i8*, i8** %112, align 8
  %114 = icmp ult i8* %111, %113
  br i1 %114, label %115, label %124

115:                                              ; preds = %109
  %116 = bitcast i8* %111 to i64*
  %117 = load i64, i64* %116, align 1
  %118 = getelementptr inbounds i8, i8* %111, i64 7
  store i8* %118, i8** %110, align 8
  %119 = tail call i64 @llvm.bswap.i64(i64 %117) #7
  %120 = lshr i64 %119, 8
  %121 = shl i64 %97, 56
  %122 = or i64 %121, %120
  store i64 %122, i64* %34, align 8
  %123 = add nsw i32 %102, 56
  store i32 %123, i32* %8, align 4
  br label %127

124:                                              ; preds = %109
  tail call void @VP8LoadFinalBytes(%struct.VP8BitReader* %0) #7
  %125 = load i32, i32* %8, align 4
  %126 = load i64, i64* %34, align 8
  br label %127

127:                                              ; preds = %124, %115, %104
  %128 = phi i64 [ %126, %124 ], [ %122, %115 ], [ %97, %104 ]
  %129 = phi i32 [ %125, %124 ], [ %123, %115 ], [ %102, %104 ]
  %130 = mul i32 %103, %107
  %131 = lshr i32 %130, 8
  %132 = zext i32 %129 to i64
  %133 = lshr i64 %128, %132
  %134 = trunc i64 %133 to i32
  %135 = icmp ult i32 %131, %134
  br i1 %135, label %136, label %142

136:                                              ; preds = %127
  %137 = sub i32 %103, %131
  %138 = add nuw nsw i32 %131, 1
  %139 = zext i32 %138 to i64
  %140 = shl i64 %139, %132
  %141 = sub i64 %128, %140
  store i64 %141, i64* %34, align 8
  br label %144

142:                                              ; preds = %127
  %143 = add nuw nsw i32 %131, 1
  br label %144

144:                                              ; preds = %136, %142
  %145 = phi i32 [ %137, %136 ], [ %143, %142 ]
  %146 = tail call i32 @llvm.ctlz.i32(i32 %145, i1 true) #7, !range !2
  %147 = xor i32 %146, 24
  %148 = shl i32 %145, %147
  %149 = sub nsw i32 %129, %147
  store i32 %149, i32* %8, align 4
  %150 = add i32 %148, -1
  store i32 %150, i32* %6, align 8
  %151 = select i1 %135, i32 4, i32 3
  br label %554

152:                                              ; preds = %48
  %153 = getelementptr inbounds i8, i8* %1, i64 6
  %154 = load i8, i8* %153, align 1
  %155 = zext i8 %154 to i32
  %156 = icmp slt i32 %54, 0
  br i1 %156, label %157, label %175

157:                                              ; preds = %152
  %158 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 3
  %159 = load i8*, i8** %158, align 8
  %160 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 5
  %161 = load i8*, i8** %160, align 8
  %162 = icmp ult i8* %159, %161
  br i1 %162, label %163, label %172

163:                                              ; preds = %157
  %164 = bitcast i8* %159 to i64*
  %165 = load i64, i64* %164, align 1
  %166 = getelementptr inbounds i8, i8* %159, i64 7
  store i8* %166, i8** %158, align 8
  %167 = tail call i64 @llvm.bswap.i64(i64 %165) #7
  %168 = lshr i64 %167, 8
  %169 = shl i64 %49, 56
  %170 = or i64 %169, %168
  store i64 %170, i64* %34, align 8
  %171 = add nsw i32 %54, 56
  store i32 %171, i32* %8, align 4
  br label %175

172:                                              ; preds = %157
  tail call void @VP8LoadFinalBytes(%struct.VP8BitReader* %0) #7
  %173 = load i32, i32* %8, align 4
  %174 = load i64, i64* %34, align 8
  br label %175

175:                                              ; preds = %172, %163, %152
  %176 = phi i64 [ %174, %172 ], [ %170, %163 ], [ %49, %152 ]
  %177 = phi i32 [ %173, %172 ], [ %171, %163 ], [ %54, %152 ]
  %178 = mul i32 %55, %155
  %179 = lshr i32 %178, 8
  %180 = zext i32 %177 to i64
  %181 = lshr i64 %176, %180
  %182 = trunc i64 %181 to i32
  %183 = icmp ult i32 %179, %182
  br i1 %183, label %184, label %190

184:                                              ; preds = %175
  %185 = sub i32 %55, %179
  %186 = add nuw nsw i32 %179, 1
  %187 = zext i32 %186 to i64
  %188 = shl i64 %187, %180
  %189 = sub i64 %176, %188
  store i64 %189, i64* %34, align 8
  br label %192

190:                                              ; preds = %175
  %191 = add nuw nsw i32 %179, 1
  br label %192

192:                                              ; preds = %184, %190
  %193 = phi i64 [ %189, %184 ], [ %176, %190 ]
  %194 = phi i32 [ %185, %184 ], [ %191, %190 ]
  %195 = tail call i32 @llvm.ctlz.i32(i32 %194, i1 true) #7, !range !2
  %196 = xor i32 %195, 24
  %197 = shl i32 %194, %196
  %198 = sub nsw i32 %177, %196
  store i32 %198, i32* %8, align 4
  %199 = add i32 %197, -1
  store i32 %199, i32* %6, align 8
  br i1 %183, label %385, label %200

200:                                              ; preds = %192
  %201 = getelementptr inbounds i8, i8* %1, i64 7
  %202 = load i8, i8* %201, align 1
  %203 = zext i8 %202 to i32
  %204 = icmp slt i32 %198, 0
  br i1 %204, label %205, label %223

205:                                              ; preds = %200
  %206 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 3
  %207 = load i8*, i8** %206, align 8
  %208 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 5
  %209 = load i8*, i8** %208, align 8
  %210 = icmp ult i8* %207, %209
  br i1 %210, label %211, label %220

211:                                              ; preds = %205
  %212 = bitcast i8* %207 to i64*
  %213 = load i64, i64* %212, align 1
  %214 = getelementptr inbounds i8, i8* %207, i64 7
  store i8* %214, i8** %206, align 8
  %215 = tail call i64 @llvm.bswap.i64(i64 %213) #7
  %216 = lshr i64 %215, 8
  %217 = shl i64 %193, 56
  %218 = or i64 %217, %216
  store i64 %218, i64* %34, align 8
  %219 = add nsw i32 %198, 56
  store i32 %219, i32* %8, align 4
  br label %223

220:                                              ; preds = %205
  tail call void @VP8LoadFinalBytes(%struct.VP8BitReader* %0) #7
  %221 = load i32, i32* %8, align 4
  %222 = load i64, i64* %34, align 8
  br label %223

223:                                              ; preds = %220, %211, %200
  %224 = phi i64 [ %222, %220 ], [ %218, %211 ], [ %193, %200 ]
  %225 = phi i32 [ %221, %220 ], [ %219, %211 ], [ %198, %200 ]
  %226 = mul i32 %199, %203
  %227 = lshr i32 %226, 8
  %228 = zext i32 %225 to i64
  %229 = lshr i64 %224, %228
  %230 = trunc i64 %229 to i32
  %231 = icmp ult i32 %227, %230
  br i1 %231, label %232, label %238

232:                                              ; preds = %223
  %233 = sub i32 %199, %227
  %234 = add nuw nsw i32 %227, 1
  %235 = zext i32 %234 to i64
  %236 = shl i64 %235, %228
  %237 = sub i64 %224, %236
  store i64 %237, i64* %34, align 8
  br label %240

238:                                              ; preds = %223
  %239 = add nuw nsw i32 %227, 1
  br label %240

240:                                              ; preds = %232, %238
  %241 = phi i64 [ %237, %232 ], [ %224, %238 ]
  %242 = phi i32 [ %233, %232 ], [ %239, %238 ]
  %243 = tail call i32 @llvm.ctlz.i32(i32 %242, i1 true) #7, !range !2
  %244 = xor i32 %243, 24
  %245 = shl i32 %242, %244
  %246 = sub nsw i32 %225, %244
  store i32 %246, i32* %8, align 4
  %247 = add i32 %245, -1
  store i32 %247, i32* %6, align 8
  %248 = icmp slt i32 %246, 0
  br i1 %231, label %293, label %249

249:                                              ; preds = %240
  br i1 %248, label %250, label %268

250:                                              ; preds = %249
  %251 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 3
  %252 = load i8*, i8** %251, align 8
  %253 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 5
  %254 = load i8*, i8** %253, align 8
  %255 = icmp ult i8* %252, %254
  br i1 %255, label %256, label %265

256:                                              ; preds = %250
  %257 = bitcast i8* %252 to i64*
  %258 = load i64, i64* %257, align 1
  %259 = getelementptr inbounds i8, i8* %252, i64 7
  store i8* %259, i8** %251, align 8
  %260 = tail call i64 @llvm.bswap.i64(i64 %258) #7
  %261 = lshr i64 %260, 8
  %262 = shl i64 %241, 56
  %263 = or i64 %262, %261
  store i64 %263, i64* %34, align 8
  %264 = add nsw i32 %246, 56
  store i32 %264, i32* %8, align 4
  br label %268

265:                                              ; preds = %250
  tail call void @VP8LoadFinalBytes(%struct.VP8BitReader* %0) #7
  %266 = load i32, i32* %8, align 4
  %267 = load i64, i64* %34, align 8
  br label %268

268:                                              ; preds = %265, %256, %249
  %269 = phi i64 [ %267, %265 ], [ %263, %256 ], [ %241, %249 ]
  %270 = phi i32 [ %266, %265 ], [ %264, %256 ], [ %246, %249 ]
  %271 = mul i32 %247, 159
  %272 = lshr i32 %271, 8
  %273 = zext i32 %270 to i64
  %274 = lshr i64 %269, %273
  %275 = trunc i64 %274 to i32
  %276 = icmp ult i32 %272, %275
  br i1 %276, label %277, label %283

277:                                              ; preds = %268
  %278 = sub i32 %247, %272
  %279 = add nuw nsw i32 %272, 1
  %280 = zext i32 %279 to i64
  %281 = shl i64 %280, %273
  %282 = sub i64 %269, %281
  store i64 %282, i64* %34, align 8
  br label %285

283:                                              ; preds = %268
  %284 = add nuw nsw i32 %272, 1
  br label %285

285:                                              ; preds = %277, %283
  %286 = phi i32 [ %278, %277 ], [ %284, %283 ]
  %287 = tail call i32 @llvm.ctlz.i32(i32 %286, i1 true) #7, !range !2
  %288 = xor i32 %287, 24
  %289 = shl i32 %286, %288
  %290 = sub nsw i32 %270, %288
  store i32 %290, i32* %8, align 4
  %291 = add i32 %289, -1
  store i32 %291, i32* %6, align 8
  %292 = select i1 %276, i32 6, i32 5
  br label %554

293:                                              ; preds = %240
  br i1 %248, label %294, label %312

294:                                              ; preds = %293
  %295 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 3
  %296 = load i8*, i8** %295, align 8
  %297 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 5
  %298 = load i8*, i8** %297, align 8
  %299 = icmp ult i8* %296, %298
  br i1 %299, label %300, label %309

300:                                              ; preds = %294
  %301 = bitcast i8* %296 to i64*
  %302 = load i64, i64* %301, align 1
  %303 = getelementptr inbounds i8, i8* %296, i64 7
  store i8* %303, i8** %295, align 8
  %304 = tail call i64 @llvm.bswap.i64(i64 %302) #7
  %305 = lshr i64 %304, 8
  %306 = shl i64 %241, 56
  %307 = or i64 %306, %305
  store i64 %307, i64* %34, align 8
  %308 = add nsw i32 %246, 56
  store i32 %308, i32* %8, align 4
  br label %312

309:                                              ; preds = %294
  tail call void @VP8LoadFinalBytes(%struct.VP8BitReader* %0) #7
  %310 = load i32, i32* %8, align 4
  %311 = load i64, i64* %34, align 8
  br label %312

312:                                              ; preds = %309, %300, %293
  %313 = phi i64 [ %311, %309 ], [ %307, %300 ], [ %241, %293 ]
  %314 = phi i32 [ %310, %309 ], [ %308, %300 ], [ %246, %293 ]
  %315 = mul i32 %247, 165
  %316 = lshr i32 %315, 8
  %317 = zext i32 %314 to i64
  %318 = lshr i64 %313, %317
  %319 = trunc i64 %318 to i32
  %320 = icmp ult i32 %316, %319
  %321 = zext i1 %320 to i32
  br i1 %320, label %322, label %328

322:                                              ; preds = %312
  %323 = sub i32 %247, %316
  %324 = add nuw nsw i32 %316, 1
  %325 = zext i32 %324 to i64
  %326 = shl i64 %325, %317
  %327 = sub i64 %313, %326
  store i64 %327, i64* %34, align 8
  br label %330

328:                                              ; preds = %312
  %329 = add nuw nsw i32 %316, 1
  br label %330

330:                                              ; preds = %322, %328
  %331 = phi i64 [ %327, %322 ], [ %313, %328 ]
  %332 = phi i32 [ %323, %322 ], [ %329, %328 ]
  %333 = tail call i32 @llvm.ctlz.i32(i32 %332, i1 true) #7, !range !2
  %334 = xor i32 %333, 24
  %335 = shl i32 %332, %334
  %336 = sub nsw i32 %314, %334
  store i32 %336, i32* %8, align 4
  %337 = add i32 %335, -1
  store i32 %337, i32* %6, align 8
  %338 = shl nuw nsw i32 %321, 1
  %339 = add nuw nsw i32 %338, 7
  %340 = icmp slt i32 %336, 0
  br i1 %340, label %341, label %359

341:                                              ; preds = %330
  %342 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 3
  %343 = load i8*, i8** %342, align 8
  %344 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 5
  %345 = load i8*, i8** %344, align 8
  %346 = icmp ult i8* %343, %345
  br i1 %346, label %347, label %356

347:                                              ; preds = %341
  %348 = bitcast i8* %343 to i64*
  %349 = load i64, i64* %348, align 1
  %350 = getelementptr inbounds i8, i8* %343, i64 7
  store i8* %350, i8** %342, align 8
  %351 = tail call i64 @llvm.bswap.i64(i64 %349) #7
  %352 = lshr i64 %351, 8
  %353 = shl i64 %331, 56
  %354 = or i64 %353, %352
  store i64 %354, i64* %34, align 8
  %355 = add nsw i32 %336, 56
  store i32 %355, i32* %8, align 4
  br label %359

356:                                              ; preds = %341
  tail call void @VP8LoadFinalBytes(%struct.VP8BitReader* %0) #7
  %357 = load i32, i32* %8, align 4
  %358 = load i64, i64* %34, align 8
  br label %359

359:                                              ; preds = %356, %347, %330
  %360 = phi i64 [ %358, %356 ], [ %354, %347 ], [ %331, %330 ]
  %361 = phi i32 [ %357, %356 ], [ %355, %347 ], [ %336, %330 ]
  %362 = mul i32 %337, 145
  %363 = lshr i32 %362, 8
  %364 = zext i32 %361 to i64
  %365 = lshr i64 %360, %364
  %366 = trunc i64 %365 to i32
  %367 = icmp ult i32 %363, %366
  %368 = zext i1 %367 to i32
  br i1 %367, label %369, label %375

369:                                              ; preds = %359
  %370 = sub i32 %337, %363
  %371 = add nuw nsw i32 %363, 1
  %372 = zext i32 %371 to i64
  %373 = shl i64 %372, %364
  %374 = sub i64 %360, %373
  store i64 %374, i64* %34, align 8
  br label %377

375:                                              ; preds = %359
  %376 = add nuw nsw i32 %363, 1
  br label %377

377:                                              ; preds = %369, %375
  %378 = phi i32 [ %370, %369 ], [ %376, %375 ]
  %379 = tail call i32 @llvm.ctlz.i32(i32 %378, i1 true) #7, !range !2
  %380 = xor i32 %379, 24
  %381 = shl i32 %378, %380
  %382 = sub nsw i32 %361, %380
  store i32 %382, i32* %8, align 4
  %383 = add i32 %381, -1
  store i32 %383, i32* %6, align 8
  %384 = add nuw nsw i32 %339, %368
  br label %554

385:                                              ; preds = %192
  %386 = getelementptr inbounds i8, i8* %1, i64 8
  %387 = load i8, i8* %386, align 1
  %388 = zext i8 %387 to i32
  %389 = icmp slt i32 %198, 0
  br i1 %389, label %390, label %408

390:                                              ; preds = %385
  %391 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 3
  %392 = load i8*, i8** %391, align 8
  %393 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 5
  %394 = load i8*, i8** %393, align 8
  %395 = icmp ult i8* %392, %394
  br i1 %395, label %396, label %405

396:                                              ; preds = %390
  %397 = bitcast i8* %392 to i64*
  %398 = load i64, i64* %397, align 1
  %399 = getelementptr inbounds i8, i8* %392, i64 7
  store i8* %399, i8** %391, align 8
  %400 = tail call i64 @llvm.bswap.i64(i64 %398) #7
  %401 = lshr i64 %400, 8
  %402 = shl i64 %193, 56
  %403 = or i64 %402, %401
  store i64 %403, i64* %34, align 8
  %404 = add nsw i32 %198, 56
  store i32 %404, i32* %8, align 4
  br label %408

405:                                              ; preds = %390
  tail call void @VP8LoadFinalBytes(%struct.VP8BitReader* %0) #7
  %406 = load i32, i32* %8, align 4
  %407 = load i64, i64* %34, align 8
  br label %408

408:                                              ; preds = %405, %396, %385
  %409 = phi i64 [ %407, %405 ], [ %403, %396 ], [ %193, %385 ]
  %410 = phi i32 [ %406, %405 ], [ %404, %396 ], [ %198, %385 ]
  %411 = mul i32 %199, %388
  %412 = lshr i32 %411, 8
  %413 = zext i32 %410 to i64
  %414 = lshr i64 %409, %413
  %415 = trunc i64 %414 to i32
  %416 = icmp ult i32 %412, %415
  %417 = zext i1 %416 to i32
  br i1 %416, label %418, label %424

418:                                              ; preds = %408
  %419 = sub i32 %199, %412
  %420 = add nuw nsw i32 %412, 1
  %421 = zext i32 %420 to i64
  %422 = shl i64 %421, %413
  %423 = sub i64 %409, %422
  store i64 %423, i64* %34, align 8
  br label %426

424:                                              ; preds = %408
  %425 = add nuw nsw i32 %412, 1
  br label %426

426:                                              ; preds = %418, %424
  %427 = phi i64 [ %423, %418 ], [ %409, %424 ]
  %428 = phi i32 [ %419, %418 ], [ %425, %424 ]
  %429 = tail call i32 @llvm.ctlz.i32(i32 %428, i1 true) #7, !range !2
  %430 = xor i32 %429, 24
  %431 = shl i32 %428, %430
  %432 = sub nsw i32 %410, %430
  store i32 %432, i32* %8, align 4
  %433 = add i32 %431, -1
  store i32 %433, i32* %6, align 8
  %434 = select i1 %416, i64 10, i64 9
  %435 = getelementptr inbounds i8, i8* %1, i64 %434
  %436 = load i8, i8* %435, align 1
  %437 = zext i8 %436 to i32
  %438 = icmp slt i32 %432, 0
  br i1 %438, label %439, label %457

439:                                              ; preds = %426
  %440 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 3
  %441 = load i8*, i8** %440, align 8
  %442 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 5
  %443 = load i8*, i8** %442, align 8
  %444 = icmp ult i8* %441, %443
  br i1 %444, label %445, label %454

445:                                              ; preds = %439
  %446 = bitcast i8* %441 to i64*
  %447 = load i64, i64* %446, align 1
  %448 = getelementptr inbounds i8, i8* %441, i64 7
  store i8* %448, i8** %440, align 8
  %449 = tail call i64 @llvm.bswap.i64(i64 %447) #7
  %450 = lshr i64 %449, 8
  %451 = shl i64 %427, 56
  %452 = or i64 %451, %450
  store i64 %452, i64* %34, align 8
  %453 = add nsw i32 %432, 56
  store i32 %453, i32* %8, align 4
  br label %457

454:                                              ; preds = %439
  tail call void @VP8LoadFinalBytes(%struct.VP8BitReader* %0) #7
  %455 = load i32, i32* %8, align 4
  %456 = load i64, i64* %34, align 8
  br label %457

457:                                              ; preds = %454, %445, %426
  %458 = phi i64 [ %456, %454 ], [ %452, %445 ], [ %427, %426 ]
  %459 = phi i32 [ %455, %454 ], [ %453, %445 ], [ %432, %426 ]
  %460 = mul i32 %433, %437
  %461 = lshr i32 %460, 8
  %462 = zext i32 %459 to i64
  %463 = lshr i64 %458, %462
  %464 = trunc i64 %463 to i32
  %465 = icmp ult i32 %461, %464
  %466 = zext i1 %465 to i32
  br i1 %465, label %467, label %473

467:                                              ; preds = %457
  %468 = sub i32 %433, %461
  %469 = add nuw nsw i32 %461, 1
  %470 = zext i32 %469 to i64
  %471 = shl i64 %470, %462
  %472 = sub i64 %458, %471
  store i64 %472, i64* %34, align 8
  br label %475

473:                                              ; preds = %457
  %474 = add nuw nsw i32 %461, 1
  br label %475

475:                                              ; preds = %467, %473
  %476 = phi i64 [ %472, %467 ], [ %458, %473 ]
  %477 = phi i32 [ %468, %467 ], [ %474, %473 ]
  %478 = tail call i32 @llvm.ctlz.i32(i32 %477, i1 true) #7, !range !2
  %479 = xor i32 %478, 24
  %480 = shl i32 %477, %479
  %481 = sub nsw i32 %459, %479
  store i32 %481, i32* %8, align 4
  %482 = add i32 %480, -1
  store i32 %482, i32* %6, align 8
  %483 = shl nuw nsw i32 %417, 1
  %484 = or i32 %483, %466
  %485 = zext i32 %484 to i64
  %486 = getelementptr inbounds [4 x i8*], [4 x i8*]* @kCat3456, i64 0, i64 %485
  %487 = load i8*, i8** %486, align 8
  %488 = load i8, i8* %487, align 1
  %489 = icmp eq i8 %488, 0
  br i1 %489, label %549, label %490

490:                                              ; preds = %475
  %491 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 3
  %492 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 5
  br label %493

493:                                              ; preds = %490, %536
  %494 = phi i64 [ %476, %490 ], [ %537, %536 ]
  %495 = phi i32 [ %481, %490 ], [ %542, %536 ]
  %496 = phi i32 [ %482, %490 ], [ %543, %536 ]
  %497 = phi i8 [ %488, %490 ], [ %547, %536 ]
  %498 = phi i32 [ 0, %490 ], [ %545, %536 ]
  %499 = phi i8* [ %487, %490 ], [ %546, %536 ]
  %500 = zext i8 %497 to i32
  %501 = icmp slt i32 %495, 0
  br i1 %501, label %502, label %518

502:                                              ; preds = %493
  %503 = load i8*, i8** %491, align 8
  %504 = load i8*, i8** %492, align 8
  %505 = icmp ult i8* %503, %504
  br i1 %505, label %506, label %515

506:                                              ; preds = %502
  %507 = bitcast i8* %503 to i64*
  %508 = load i64, i64* %507, align 1
  %509 = getelementptr inbounds i8, i8* %503, i64 7
  store i8* %509, i8** %491, align 8
  %510 = tail call i64 @llvm.bswap.i64(i64 %508) #7
  %511 = lshr i64 %510, 8
  %512 = shl i64 %494, 56
  %513 = or i64 %512, %511
  store i64 %513, i64* %34, align 8
  %514 = add nsw i32 %495, 56
  store i32 %514, i32* %8, align 4
  br label %518

515:                                              ; preds = %502
  tail call void @VP8LoadFinalBytes(%struct.VP8BitReader* %0) #7
  %516 = load i32, i32* %8, align 4
  %517 = load i64, i64* %34, align 8
  br label %518

518:                                              ; preds = %515, %506, %493
  %519 = phi i64 [ %517, %515 ], [ %513, %506 ], [ %494, %493 ]
  %520 = phi i32 [ %516, %515 ], [ %514, %506 ], [ %495, %493 ]
  %521 = mul i32 %496, %500
  %522 = lshr i32 %521, 8
  %523 = zext i32 %520 to i64
  %524 = lshr i64 %519, %523
  %525 = trunc i64 %524 to i32
  %526 = icmp ult i32 %522, %525
  %527 = zext i1 %526 to i32
  br i1 %526, label %528, label %534

528:                                              ; preds = %518
  %529 = sub i32 %496, %522
  %530 = add nuw nsw i32 %522, 1
  %531 = zext i32 %530 to i64
  %532 = shl i64 %531, %523
  %533 = sub i64 %519, %532
  store i64 %533, i64* %34, align 8
  br label %536

534:                                              ; preds = %518
  %535 = add nuw nsw i32 %522, 1
  br label %536

536:                                              ; preds = %528, %534
  %537 = phi i64 [ %533, %528 ], [ %519, %534 ]
  %538 = phi i32 [ %529, %528 ], [ %535, %534 ]
  %539 = tail call i32 @llvm.ctlz.i32(i32 %538, i1 true) #7, !range !2
  %540 = xor i32 %539, 24
  %541 = shl i32 %538, %540
  %542 = sub nsw i32 %520, %540
  store i32 %542, i32* %8, align 4
  %543 = add i32 %541, -1
  store i32 %543, i32* %6, align 8
  %544 = shl i32 %498, 1
  %545 = or i32 %544, %527
  %546 = getelementptr inbounds i8, i8* %499, i64 1
  %547 = load i8, i8* %546, align 1
  %548 = icmp eq i8 %547, 0
  br i1 %548, label %549, label %493

549:                                              ; preds = %536, %475
  %550 = phi i32 [ 0, %475 ], [ %545, %536 ]
  %551 = shl i32 8, %484
  %552 = or i32 %551, 3
  %553 = add nsw i32 %550, %552
  br label %554

554:                                              ; preds = %96, %549, %377, %285, %144
  %555 = phi i32 [ %553, %549 ], [ %384, %377 ], [ %292, %285 ], [ %151, %144 ], [ 2, %96 ]
  ret i32 %555
}

declare void @VP8LoadFinalBytes(%struct.VP8BitReader*) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.bswap.i64(i64) #6

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #6

declare i32 @VP8ParseIntraModeRow(%struct.VP8BitReader*, %struct.VP8Decoder*) local_unnamed_addr #3

declare i32 @VP8ProcessRow(%struct.VP8Decoder*, %struct.VP8Io*) local_unnamed_addr #3

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 0, i32 33}
