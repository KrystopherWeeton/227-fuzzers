; ModuleID = '../../ui/events/ozone/evdev/touch_filter/open_palm_detection_filter.cc'
source_filename = "../../ui/events/ozone/evdev/touch_filter/open_palm_detection_filter.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.ui::OpenPalmDetectionFilter" = type { %"class.ui::PalmDetectionFilter" }
%"class.ui::PalmDetectionFilter" = type { i32 (...)**, %"struct.ui::SharedPalmDetectionFilterState"* }
%"struct.ui::SharedPalmDetectionFilterState" = type { %"class.base::TimeTicks", %"class.base::TimeTicks", i32, i32, %"class.base::TimeTicks" }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.std::__1::vector" = type opaque
%"class.std::__1::bitset" = type { %"class.std::__1::__bitset" }
%"class.std::__1::__bitset" = type { i64 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }

@_ZTVN2ui23OpenPalmDetectionFilterE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.ui::OpenPalmDetectionFilter"*)* @_ZN2ui23OpenPalmDetectionFilterD2Ev to i8*), i8* bitcast (void (%"class.ui::OpenPalmDetectionFilter"*)* @_ZN2ui23OpenPalmDetectionFilterD0Ev to i8*), i8* bitcast (void (%"class.ui::OpenPalmDetectionFilter"*, %"class.std::__1::vector"*, i64, %"class.std::__1::bitset"*, %"class.std::__1::bitset"*)* @_ZN2ui23OpenPalmDetectionFilter6FilterERKNSt3__16vectorINS_20InProgressTouchEvdevENS1_9allocatorIS3_EEEEN4base9TimeTicksEPNS1_6bitsetILm20EEESD_ to i8*), i8* bitcast (void (%"class.std::__1::basic_string"*, %"class.ui::OpenPalmDetectionFilter"*)* @_ZNK2ui23OpenPalmDetectionFilter20FilterNameForTestingEv to i8*)] }, align 8
@_ZN2ui23OpenPalmDetectionFilter11kFilterNameE = hidden local_unnamed_addr constant [24 x i8] c"OpenPalmDetectionFilter\00", align 16

@_ZN2ui23OpenPalmDetectionFilterC1EPNS_30SharedPalmDetectionFilterStateE = hidden unnamed_addr alias void (%"class.ui::OpenPalmDetectionFilter"*, %"struct.ui::SharedPalmDetectionFilterState"*), void (%"class.ui::OpenPalmDetectionFilter"*, %"struct.ui::SharedPalmDetectionFilterState"*)* @_ZN2ui23OpenPalmDetectionFilterC2EPNS_30SharedPalmDetectionFilterStateE
@_ZN2ui23OpenPalmDetectionFilterD1Ev = hidden unnamed_addr alias void (%"class.ui::OpenPalmDetectionFilter"*), void (%"class.ui::OpenPalmDetectionFilter"*)* @_ZN2ui23OpenPalmDetectionFilterD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui23OpenPalmDetectionFilterC2EPNS_30SharedPalmDetectionFilterStateE(%"class.ui::OpenPalmDetectionFilter"*, %"struct.ui::SharedPalmDetectionFilterState"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.ui::OpenPalmDetectionFilter", %"class.ui::OpenPalmDetectionFilter"* %0, i64 0, i32 0
  tail call void @_ZN2ui19PalmDetectionFilterC2EPNS_30SharedPalmDetectionFilterStateE(%"class.ui::PalmDetectionFilter"* %3, %"struct.ui::SharedPalmDetectionFilterState"* %1) #7
  %4 = getelementptr inbounds %"class.ui::OpenPalmDetectionFilter", %"class.ui::OpenPalmDetectionFilter"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN2ui23OpenPalmDetectionFilterE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  ret void
}

declare void @_ZN2ui19PalmDetectionFilterC2EPNS_30SharedPalmDetectionFilterStateE(%"class.ui::PalmDetectionFilter"*, %"struct.ui::SharedPalmDetectionFilterState"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN2ui19PalmDetectionFilterD2Ev(%"class.ui::PalmDetectionFilter"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui23OpenPalmDetectionFilterD2Ev(%"class.ui::OpenPalmDetectionFilter"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.ui::OpenPalmDetectionFilter", %"class.ui::OpenPalmDetectionFilter"* %0, i64 0, i32 0
  tail call void @_ZN2ui19PalmDetectionFilterD2Ev(%"class.ui::PalmDetectionFilter"* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui23OpenPalmDetectionFilterD0Ev(%"class.ui::OpenPalmDetectionFilter"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.ui::OpenPalmDetectionFilter", %"class.ui::OpenPalmDetectionFilter"* %0, i64 0, i32 0
  tail call void @_ZN2ui19PalmDetectionFilterD2Ev(%"class.ui::PalmDetectionFilter"* %2) #7
  %3 = bitcast %"class.ui::OpenPalmDetectionFilter"* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #8
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2ui23OpenPalmDetectionFilter6FilterERKNSt3__16vectorINS_20InProgressTouchEvdevENS1_9allocatorIS3_EEEEN4base9TimeTicksEPNS1_6bitsetILm20EEESD_(%"class.ui::OpenPalmDetectionFilter"* nocapture readnone, %"class.std::__1::vector"* nocapture readnone, i64, %"class.std::__1::bitset"* nocapture, %"class.std::__1::bitset"* nocapture) unnamed_addr #4 align 2 {
  %6 = getelementptr inbounds %"class.std::__1::bitset", %"class.std::__1::bitset"* %3, i64 0, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = and i64 %7, -1048576
  store i64 %8, i64* %6, align 8
  %9 = getelementptr inbounds %"class.std::__1::bitset", %"class.std::__1::bitset"* %4, i64 0, i32 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = and i64 %10, -1048576
  store i64 %11, i64* %9, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK2ui23OpenPalmDetectionFilter20FilterNameForTestingEv(%"class.std::__1::basic_string"* noalias sret, %"class.ui::OpenPalmDetectionFilter"* nocapture readnone) unnamed_addr #0 align 2 {
  %3 = tail call i8* @_Znwm(i64 32) #8
  %4 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %3, i8** %4, align 8
  %5 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %6 = bitcast i64* %5 to <2 x i64>*
  store <2 x i64> <i64 23, i64 -9223372036854775776>, <2 x i64>* %6, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %3, i8* align 16 getelementptr inbounds ([24 x i8], [24 x i8]* @_ZN2ui23OpenPalmDetectionFilter11kFilterNameE, i64 0, i64 0), i64 23, i1 false) #7
  %7 = getelementptr inbounds i8, i8* %3, i64 23
  store i8 0, i8* %7, align 1
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
