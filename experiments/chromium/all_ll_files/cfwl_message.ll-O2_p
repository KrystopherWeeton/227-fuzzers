; ModuleID = '../../third_party/pdfium/xfa/fwl/cfwl_message.cpp'
source_filename = "../../third_party/pdfium/xfa/fwl/cfwl_message.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CFWL_Message = type { i32 (...)**, i32, %"class.fxcrt::UnownedPtr", %"class.fxcrt::UnownedPtr" }
%"class.fxcrt::UnownedPtr" = type { %class.CFWL_Widget* }
%class.CFWL_Widget = type opaque

@_ZTV12CFWL_Message = hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.CFWL_Message*)* @_ZN12CFWL_MessageD2Ev to i8*), i8* bitcast (void (%class.CFWL_Message*)* @_ZN12CFWL_MessageD0Ev to i8*)] }, align 8

@_ZN12CFWL_MessageC1ENS_4TypeEP11CFWL_WidgetS2_ = hidden unnamed_addr alias void (%class.CFWL_Message*, i32, %class.CFWL_Widget*, %class.CFWL_Widget*), void (%class.CFWL_Message*, i32, %class.CFWL_Widget*, %class.CFWL_Widget*)* @_ZN12CFWL_MessageC2ENS_4TypeEP11CFWL_WidgetS2_
@_ZN12CFWL_MessageD1Ev = hidden unnamed_addr alias void (%class.CFWL_Message*), void (%class.CFWL_Message*)* @_ZN12CFWL_MessageD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN12CFWL_MessageC2ENS_4TypeEP11CFWL_WidgetS2_(%class.CFWL_Message* nocapture, i32, %class.CFWL_Widget*, %class.CFWL_Widget*) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %class.CFWL_Message, %class.CFWL_Message* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTV12CFWL_Message, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %class.CFWL_Message, %class.CFWL_Message* %0, i64 0, i32 1
  store i32 %1, i32* %6, align 8
  %7 = getelementptr inbounds %class.CFWL_Message, %class.CFWL_Message* %0, i64 0, i32 2, i32 0
  store %class.CFWL_Widget* %2, %class.CFWL_Widget** %7, align 8
  %8 = getelementptr inbounds %class.CFWL_Message, %class.CFWL_Message* %0, i64 0, i32 3, i32 0
  store %class.CFWL_Widget* %3, %class.CFWL_Widget** %8, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN12CFWL_MessageD2Ev(%class.CFWL_Message* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFWL_Message, %class.CFWL_Message* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTV12CFWL_Message, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CFWL_MessageD0Ev(%class.CFWL_Message*) unnamed_addr #1 align 2 {
  %2 = bitcast %class.CFWL_Message* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #3
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
