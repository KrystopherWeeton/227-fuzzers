; ModuleID = '../../third_party/libjpeg_turbo/simd/x86_64/jsimd.c'
source_filename = "../../third_party/libjpeg_turbo/simd/x86_64/jsimd.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.jpeg_compress_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32, %struct.jpeg_destination_mgr*, i32, i32, i32, i32, double, i32, i32, i32, %struct.jpeg_component_info*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], [16 x i8], [16 x i8], [16 x i8], i32, %struct.jpeg_scan_info*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, i16, i16, i32, i32, i32, i32, i32, i32, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, %struct.jpeg_comp_master*, %struct.jpeg_c_main_controller*, %struct.jpeg_c_prep_controller*, %struct.jpeg_c_coef_controller*, %struct.jpeg_marker_writer*, %struct.jpeg_color_converter*, %struct.jpeg_downsampler*, %struct.jpeg_forward_dct*, %struct.jpeg_entropy_encoder*, %struct.jpeg_scan_info*, i32 }
%struct.jpeg_error_mgr = type { void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*)*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_common_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.jpeg_memory_mgr = type { i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct*, i32)*, {}*, i64, i64 }
%struct.jvirt_sarray_control = type opaque
%struct.jvirt_barray_control = type opaque
%struct.jpeg_progress_mgr = type { {}*, i64, i64, i32, i32 }
%struct.jpeg_destination_mgr = type { i8*, i64, void (%struct.jpeg_compress_struct*)*, i32 (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)* }
%struct.jpeg_component_info = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.JQUANT_TBL*, i8* }
%struct.JQUANT_TBL = type { [64 x i16], i32 }
%struct.JHUFF_TBL = type { [17 x i8], [256 x i8], i32 }
%struct.jpeg_comp_master = type { void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)*, i32, i32 }
%struct.jpeg_c_main_controller = type { void (%struct.jpeg_compress_struct*, i32)*, void (%struct.jpeg_compress_struct*, i8**, i32*, i32)* }
%struct.jpeg_c_prep_controller = type { void (%struct.jpeg_compress_struct*, i32)*, void (%struct.jpeg_compress_struct*, i8**, i32*, i32, i8***, i32*, i32)* }
%struct.jpeg_c_coef_controller = type { void (%struct.jpeg_compress_struct*, i32)*, i32 (%struct.jpeg_compress_struct*, i8***)* }
%struct.jpeg_marker_writer = type { void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*, i32, i32)*, void (%struct.jpeg_compress_struct*, i32)* }
%struct.jpeg_color_converter = type { void (%struct.jpeg_compress_struct*)*, {}* }
%struct.jpeg_downsampler = type { void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*, i8***, i32, i8***, i32)*, i32 }
%struct.jpeg_forward_dct = type { void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, [64 x i16]*, i32, i32, i32)* }
%struct.jpeg_entropy_encoder = type { void (%struct.jpeg_compress_struct*, i32)*, i32 (%struct.jpeg_compress_struct*, [64 x i16]**)*, void (%struct.jpeg_compress_struct*)* }
%struct.jpeg_scan_info = type { i32, [4 x i32], i32, i32, i32, i32 }
%struct.jpeg_decompress_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32, %struct.jpeg_source_mgr*, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8**, i32, i32, i32, i32, i32, [64 x i32]*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], i32, %struct.jpeg_component_info*, i32, i32, [16 x i8], [16 x i8], [16 x i8], i32, i32, i8, i8, i8, i16, i16, i32, i8, i32, %struct.jpeg_marker_struct*, i32, i32, i32, i32, i8*, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, i32, %struct.jpeg_decomp_master*, %struct.jpeg_d_main_controller*, %struct.jpeg_d_coef_controller*, %struct.jpeg_d_post_controller*, %struct.jpeg_input_controller*, %struct.jpeg_marker_reader*, %struct.jpeg_entropy_decoder*, %struct.jpeg_inverse_dct*, %struct.jpeg_upsampler*, %struct.jpeg_color_deconverter*, %struct.jpeg_color_quantizer* }
%struct.jpeg_source_mgr = type { i8*, i64, void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i64)*, i32 (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*)* }
%struct.jpeg_marker_struct = type { %struct.jpeg_marker_struct*, i8, i32, i32, i8* }
%struct.jpeg_decomp_master = type { void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, i32, i32, i32, [10 x i32], [10 x i32], i32, i32 }
%struct.jpeg_d_main_controller = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8**, i32*, i32)* }
%struct.jpeg_d_coef_controller = type { void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*, i8***)*, %struct.jvirt_barray_control** }
%struct.jpeg_d_post_controller = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)* }
%struct.jpeg_input_controller = type { i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, i32, i32 }
%struct.jpeg_marker_reader = type { void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, i32, i32, i32, i32 }
%struct.jpeg_entropy_decoder = type { void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*, [64 x i16]**)*, i32 }
%struct.jpeg_inverse_dct = type { void (%struct.jpeg_decompress_struct*)*, [10 x void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32)*] }
%struct.jpeg_upsampler = type { void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)*, i32 }
%struct.jpeg_color_deconverter = type { void (%struct.jpeg_decompress_struct*)*, {}* }
%struct.jpeg_color_quantizer = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)*, void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)* }
%struct.c_derived_tbl = type { [256 x i32], [256 x i8] }

@simd_support = internal unnamed_addr global i32 -1, align 4
@jconst_rgb_ycc_convert_avx2 = external constant [0 x i32], align 4
@jconst_rgb_ycc_convert_sse2 = external constant [0 x i32], align 4
@jconst_rgb_gray_convert_avx2 = external constant [0 x i32], align 4
@jconst_rgb_gray_convert_sse2 = external constant [0 x i32], align 4
@jconst_ycc_rgb_convert_avx2 = external constant [0 x i32], align 4
@jconst_ycc_rgb_convert_sse2 = external constant [0 x i32], align 4
@jconst_fancy_upsample_avx2 = external constant [0 x i32], align 4
@jconst_fancy_upsample_sse2 = external constant [0 x i32], align 4
@jconst_merged_upsample_avx2 = external constant [0 x i32], align 4
@jconst_merged_upsample_sse2 = external constant [0 x i32], align 4
@jconst_fdct_islow_avx2 = external constant [0 x i32], align 4
@jconst_fdct_islow_sse2 = external constant [0 x i32], align 4
@jconst_fdct_ifast_sse2 = external constant [0 x i32], align 4
@jconst_fdct_float_sse = external constant [0 x i32], align 4
@jconst_idct_red_sse2 = external constant [0 x i32], align 4
@jconst_idct_islow_avx2 = external constant [0 x i32], align 4
@jconst_idct_islow_sse2 = external constant [0 x i32], align 4
@jconst_idct_ifast_sse2 = external constant [0 x i32], align 4
@jconst_idct_float_sse2 = external constant [0 x i32], align 4
@simd_huffman = internal unnamed_addr global i1 false, align 4
@jconst_huff_encode_one_block = external constant [0 x i32], align 4
@.str = private unnamed_addr constant [16 x i8] c"JSIMD_FORCESSE2\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@.str.2 = private unnamed_addr constant [16 x i8] c"JSIMD_FORCEAVX2\00", align 1
@.str.3 = private unnamed_addr constant [16 x i8] c"JSIMD_FORCENONE\00", align 1
@.str.4 = private unnamed_addr constant [16 x i8] c"JSIMD_NOHUFFENC\00", align 1
@switch.table.jsimd_rgb_ycc_convert = private unnamed_addr constant [10 x void (i32, i8**, i8***, i32, i32)*] [void (i32, i8**, i8***, i32, i32)* @jsimd_extrgb_ycc_convert_avx2, void (i32, i8**, i8***, i32, i32)* @jsimd_extrgbx_ycc_convert_avx2, void (i32, i8**, i8***, i32, i32)* @jsimd_extbgr_ycc_convert_avx2, void (i32, i8**, i8***, i32, i32)* @jsimd_extbgrx_ycc_convert_avx2, void (i32, i8**, i8***, i32, i32)* @jsimd_extxbgr_ycc_convert_avx2, void (i32, i8**, i8***, i32, i32)* @jsimd_extxrgb_ycc_convert_avx2, void (i32, i8**, i8***, i32, i32)* @jsimd_extrgbx_ycc_convert_avx2, void (i32, i8**, i8***, i32, i32)* @jsimd_extbgrx_ycc_convert_avx2, void (i32, i8**, i8***, i32, i32)* @jsimd_extxbgr_ycc_convert_avx2, void (i32, i8**, i8***, i32, i32)* @jsimd_extxrgb_ycc_convert_avx2], align 8
@switch.table.jsimd_rgb_ycc_convert.5 = private unnamed_addr constant [10 x void (i32, i8**, i8***, i32, i32)*] [void (i32, i8**, i8***, i32, i32)* @jsimd_extrgb_ycc_convert_sse2, void (i32, i8**, i8***, i32, i32)* @jsimd_extrgbx_ycc_convert_sse2, void (i32, i8**, i8***, i32, i32)* @jsimd_extbgr_ycc_convert_sse2, void (i32, i8**, i8***, i32, i32)* @jsimd_extbgrx_ycc_convert_sse2, void (i32, i8**, i8***, i32, i32)* @jsimd_extxbgr_ycc_convert_sse2, void (i32, i8**, i8***, i32, i32)* @jsimd_extxrgb_ycc_convert_sse2, void (i32, i8**, i8***, i32, i32)* @jsimd_extrgbx_ycc_convert_sse2, void (i32, i8**, i8***, i32, i32)* @jsimd_extbgrx_ycc_convert_sse2, void (i32, i8**, i8***, i32, i32)* @jsimd_extxbgr_ycc_convert_sse2, void (i32, i8**, i8***, i32, i32)* @jsimd_extxrgb_ycc_convert_sse2], align 8
@switch.table.jsimd_rgb_gray_convert = private unnamed_addr constant [10 x void (i32, i8**, i8***, i32, i32)*] [void (i32, i8**, i8***, i32, i32)* @jsimd_extrgb_gray_convert_avx2, void (i32, i8**, i8***, i32, i32)* @jsimd_extrgbx_gray_convert_avx2, void (i32, i8**, i8***, i32, i32)* @jsimd_extbgr_gray_convert_avx2, void (i32, i8**, i8***, i32, i32)* @jsimd_extbgrx_gray_convert_avx2, void (i32, i8**, i8***, i32, i32)* @jsimd_extxbgr_gray_convert_avx2, void (i32, i8**, i8***, i32, i32)* @jsimd_extxrgb_gray_convert_avx2, void (i32, i8**, i8***, i32, i32)* @jsimd_extrgbx_gray_convert_avx2, void (i32, i8**, i8***, i32, i32)* @jsimd_extbgrx_gray_convert_avx2, void (i32, i8**, i8***, i32, i32)* @jsimd_extxbgr_gray_convert_avx2, void (i32, i8**, i8***, i32, i32)* @jsimd_extxrgb_gray_convert_avx2], align 8
@switch.table.jsimd_rgb_gray_convert.6 = private unnamed_addr constant [10 x void (i32, i8**, i8***, i32, i32)*] [void (i32, i8**, i8***, i32, i32)* @jsimd_extrgb_gray_convert_sse2, void (i32, i8**, i8***, i32, i32)* @jsimd_extrgbx_gray_convert_sse2, void (i32, i8**, i8***, i32, i32)* @jsimd_extbgr_gray_convert_sse2, void (i32, i8**, i8***, i32, i32)* @jsimd_extbgrx_gray_convert_sse2, void (i32, i8**, i8***, i32, i32)* @jsimd_extxbgr_gray_convert_sse2, void (i32, i8**, i8***, i32, i32)* @jsimd_extxrgb_gray_convert_sse2, void (i32, i8**, i8***, i32, i32)* @jsimd_extrgbx_gray_convert_sse2, void (i32, i8**, i8***, i32, i32)* @jsimd_extbgrx_gray_convert_sse2, void (i32, i8**, i8***, i32, i32)* @jsimd_extxbgr_gray_convert_sse2, void (i32, i8**, i8***, i32, i32)* @jsimd_extxrgb_gray_convert_sse2], align 8
@switch.table.jsimd_ycc_rgb_convert = private unnamed_addr constant [10 x void (i32, i8***, i32, i8**, i32)*] [void (i32, i8***, i32, i8**, i32)* @jsimd_ycc_extrgb_convert_avx2, void (i32, i8***, i32, i8**, i32)* @jsimd_ycc_extrgbx_convert_avx2, void (i32, i8***, i32, i8**, i32)* @jsimd_ycc_extbgr_convert_avx2, void (i32, i8***, i32, i8**, i32)* @jsimd_ycc_extbgrx_convert_avx2, void (i32, i8***, i32, i8**, i32)* @jsimd_ycc_extxbgr_convert_avx2, void (i32, i8***, i32, i8**, i32)* @jsimd_ycc_extxrgb_convert_avx2, void (i32, i8***, i32, i8**, i32)* @jsimd_ycc_extrgbx_convert_avx2, void (i32, i8***, i32, i8**, i32)* @jsimd_ycc_extbgrx_convert_avx2, void (i32, i8***, i32, i8**, i32)* @jsimd_ycc_extxbgr_convert_avx2, void (i32, i8***, i32, i8**, i32)* @jsimd_ycc_extxrgb_convert_avx2], align 8
@switch.table.jsimd_ycc_rgb_convert.7 = private unnamed_addr constant [10 x void (i32, i8***, i32, i8**, i32)*] [void (i32, i8***, i32, i8**, i32)* @jsimd_ycc_extrgb_convert_sse2, void (i32, i8***, i32, i8**, i32)* @jsimd_ycc_extrgbx_convert_sse2, void (i32, i8***, i32, i8**, i32)* @jsimd_ycc_extbgr_convert_sse2, void (i32, i8***, i32, i8**, i32)* @jsimd_ycc_extbgrx_convert_sse2, void (i32, i8***, i32, i8**, i32)* @jsimd_ycc_extxbgr_convert_sse2, void (i32, i8***, i32, i8**, i32)* @jsimd_ycc_extxrgb_convert_sse2, void (i32, i8***, i32, i8**, i32)* @jsimd_ycc_extrgbx_convert_sse2, void (i32, i8***, i32, i8**, i32)* @jsimd_ycc_extbgrx_convert_sse2, void (i32, i8***, i32, i8**, i32)* @jsimd_ycc_extxbgr_convert_sse2, void (i32, i8***, i32, i8**, i32)* @jsimd_ycc_extxrgb_convert_sse2], align 8
@switch.table.jsimd_h2v2_merged_upsample = private unnamed_addr constant [10 x void (i32, i8***, i32, i8**)*] [void (i32, i8***, i32, i8**)* @jsimd_h2v2_extrgb_merged_upsample_avx2, void (i32, i8***, i32, i8**)* @jsimd_h2v2_extrgbx_merged_upsample_avx2, void (i32, i8***, i32, i8**)* @jsimd_h2v2_extbgr_merged_upsample_avx2, void (i32, i8***, i32, i8**)* @jsimd_h2v2_extbgrx_merged_upsample_avx2, void (i32, i8***, i32, i8**)* @jsimd_h2v2_extxbgr_merged_upsample_avx2, void (i32, i8***, i32, i8**)* @jsimd_h2v2_extxrgb_merged_upsample_avx2, void (i32, i8***, i32, i8**)* @jsimd_h2v2_extrgbx_merged_upsample_avx2, void (i32, i8***, i32, i8**)* @jsimd_h2v2_extbgrx_merged_upsample_avx2, void (i32, i8***, i32, i8**)* @jsimd_h2v2_extxbgr_merged_upsample_avx2, void (i32, i8***, i32, i8**)* @jsimd_h2v2_extxrgb_merged_upsample_avx2], align 8
@switch.table.jsimd_h2v2_merged_upsample.8 = private unnamed_addr constant [10 x void (i32, i8***, i32, i8**)*] [void (i32, i8***, i32, i8**)* @jsimd_h2v2_extrgb_merged_upsample_sse2, void (i32, i8***, i32, i8**)* @jsimd_h2v2_extrgbx_merged_upsample_sse2, void (i32, i8***, i32, i8**)* @jsimd_h2v2_extbgr_merged_upsample_sse2, void (i32, i8***, i32, i8**)* @jsimd_h2v2_extbgrx_merged_upsample_sse2, void (i32, i8***, i32, i8**)* @jsimd_h2v2_extxbgr_merged_upsample_sse2, void (i32, i8***, i32, i8**)* @jsimd_h2v2_extxrgb_merged_upsample_sse2, void (i32, i8***, i32, i8**)* @jsimd_h2v2_extrgbx_merged_upsample_sse2, void (i32, i8***, i32, i8**)* @jsimd_h2v2_extbgrx_merged_upsample_sse2, void (i32, i8***, i32, i8**)* @jsimd_h2v2_extxbgr_merged_upsample_sse2, void (i32, i8***, i32, i8**)* @jsimd_h2v2_extxrgb_merged_upsample_sse2], align 8
@switch.table.jsimd_h2v1_merged_upsample = private unnamed_addr constant [10 x void (i32, i8***, i32, i8**)*] [void (i32, i8***, i32, i8**)* @jsimd_h2v1_extrgb_merged_upsample_avx2, void (i32, i8***, i32, i8**)* @jsimd_h2v1_extrgbx_merged_upsample_avx2, void (i32, i8***, i32, i8**)* @jsimd_h2v1_extbgr_merged_upsample_avx2, void (i32, i8***, i32, i8**)* @jsimd_h2v1_extbgrx_merged_upsample_avx2, void (i32, i8***, i32, i8**)* @jsimd_h2v1_extxbgr_merged_upsample_avx2, void (i32, i8***, i32, i8**)* @jsimd_h2v1_extxrgb_merged_upsample_avx2, void (i32, i8***, i32, i8**)* @jsimd_h2v1_extrgbx_merged_upsample_avx2, void (i32, i8***, i32, i8**)* @jsimd_h2v1_extbgrx_merged_upsample_avx2, void (i32, i8***, i32, i8**)* @jsimd_h2v1_extxbgr_merged_upsample_avx2, void (i32, i8***, i32, i8**)* @jsimd_h2v1_extxrgb_merged_upsample_avx2], align 8
@switch.table.jsimd_h2v1_merged_upsample.9 = private unnamed_addr constant [10 x void (i32, i8***, i32, i8**)*] [void (i32, i8***, i32, i8**)* @jsimd_h2v1_extrgb_merged_upsample_sse2, void (i32, i8***, i32, i8**)* @jsimd_h2v1_extrgbx_merged_upsample_sse2, void (i32, i8***, i32, i8**)* @jsimd_h2v1_extbgr_merged_upsample_sse2, void (i32, i8***, i32, i8**)* @jsimd_h2v1_extbgrx_merged_upsample_sse2, void (i32, i8***, i32, i8**)* @jsimd_h2v1_extxbgr_merged_upsample_sse2, void (i32, i8***, i32, i8**)* @jsimd_h2v1_extxrgb_merged_upsample_sse2, void (i32, i8***, i32, i8**)* @jsimd_h2v1_extrgbx_merged_upsample_sse2, void (i32, i8***, i32, i8**)* @jsimd_h2v1_extbgrx_merged_upsample_sse2, void (i32, i8***, i32, i8**)* @jsimd_h2v1_extxbgr_merged_upsample_sse2, void (i32, i8***, i32, i8**)* @jsimd_h2v1_extxrgb_merged_upsample_sse2], align 8

; Function Attrs: nounwind ssp uwtable
define hidden i32 @jsimd_can_rgb_ycc() local_unnamed_addr #0 {
  tail call fastcc void @init_simd()
  %1 = load i32, i32* @simd_support, align 4
  %2 = trunc i32 %1 to i8
  %3 = icmp sgt i8 %2, -1
  %4 = or i1 %3, icmp ne (i64 and (i64 ptrtoint ([0 x i32]* @jconst_rgb_ycc_convert_avx2 to i64), i64 31), i64 0)
  br i1 %4, label %5, label %11

5:                                                ; preds = %0
  %6 = and i32 %1, 8
  %7 = icmp eq i32 %6, 0
  %8 = or i1 %7, icmp ne (i64 and (i64 ptrtoint ([0 x i32]* @jconst_rgb_ycc_convert_sse2 to i64), i64 15), i64 0)
  %9 = xor i1 %8, true
  %10 = zext i1 %9 to i32
  br label %11

11:                                               ; preds = %5, %0
  %12 = phi i32 [ 1, %0 ], [ %10, %5 ]
  ret i32 %12
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @init_simd() unnamed_addr #0 {
  %1 = load i32, i32* @simd_support, align 4
  %2 = icmp eq i32 %1, -1
  br i1 %2, label %3, label %35

3:                                                ; preds = %0
  %4 = tail call i32 @jpeg_simd_cpu_support() #4
  store i32 %4, i32* @simd_support, align 4
  %5 = tail call i8* @getenv(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0)) #4
  %6 = icmp eq i8* %5, null
  br i1 %6, label %12, label %7

7:                                                ; preds = %3
  %8 = tail call i32 @strcmp(i8* nonnull %5, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #5
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %12

10:                                               ; preds = %7
  %11 = and i32 %4, 8
  store i32 %11, i32* @simd_support, align 4
  br label %12

12:                                               ; preds = %3, %10, %7
  %13 = phi i32 [ %4, %3 ], [ %11, %10 ], [ %4, %7 ]
  %14 = tail call i8* @getenv(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0)) #4
  %15 = icmp eq i8* %14, null
  br i1 %15, label %21, label %16

16:                                               ; preds = %12
  %17 = tail call i32 @strcmp(i8* nonnull %14, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #5
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %21

19:                                               ; preds = %16
  %20 = and i32 %13, 128
  store i32 %20, i32* @simd_support, align 4
  br label %21

21:                                               ; preds = %12, %19, %16
  %22 = tail call i8* @getenv(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i64 0, i64 0)) #4
  %23 = icmp eq i8* %22, null
  br i1 %23, label %28, label %24

24:                                               ; preds = %21
  %25 = tail call i32 @strcmp(i8* nonnull %22, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #5
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %28

27:                                               ; preds = %24
  store i32 0, i32* @simd_support, align 4
  br label %28

28:                                               ; preds = %21, %27, %24
  %29 = tail call i8* @getenv(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0)) #4
  %30 = icmp eq i8* %29, null
  br i1 %30, label %35, label %31

31:                                               ; preds = %28
  %32 = tail call i32 @strcmp(i8* nonnull %29, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #5
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %35

34:                                               ; preds = %31
  store i1 true, i1* @simd_huffman, align 4
  br label %35

35:                                               ; preds = %31, %34, %28, %0
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @jsimd_can_rgb_gray() local_unnamed_addr #0 {
  tail call fastcc void @init_simd()
  %1 = load i32, i32* @simd_support, align 4
  %2 = trunc i32 %1 to i8
  %3 = icmp sgt i8 %2, -1
  %4 = or i1 %3, icmp ne (i64 and (i64 ptrtoint ([0 x i32]* @jconst_rgb_gray_convert_avx2 to i64), i64 31), i64 0)
  br i1 %4, label %5, label %11

5:                                                ; preds = %0
  %6 = and i32 %1, 8
  %7 = icmp eq i32 %6, 0
  %8 = or i1 %7, icmp ne (i64 and (i64 ptrtoint ([0 x i32]* @jconst_rgb_gray_convert_sse2 to i64), i64 15), i64 0)
  %9 = xor i1 %8, true
  %10 = zext i1 %9 to i32
  br label %11

11:                                               ; preds = %5, %0
  %12 = phi i32 [ 1, %0 ], [ %10, %5 ]
  ret i32 %12
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @jsimd_can_ycc_rgb() local_unnamed_addr #0 {
  tail call fastcc void @init_simd()
  %1 = load i32, i32* @simd_support, align 4
  %2 = trunc i32 %1 to i8
  %3 = icmp sgt i8 %2, -1
  %4 = or i1 %3, icmp ne (i64 and (i64 ptrtoint ([0 x i32]* @jconst_ycc_rgb_convert_avx2 to i64), i64 31), i64 0)
  br i1 %4, label %5, label %11

5:                                                ; preds = %0
  %6 = and i32 %1, 8
  %7 = icmp eq i32 %6, 0
  %8 = or i1 %7, icmp ne (i64 and (i64 ptrtoint ([0 x i32]* @jconst_ycc_rgb_convert_sse2 to i64), i64 15), i64 0)
  %9 = xor i1 %8, true
  %10 = zext i1 %9 to i32
  br label %11

11:                                               ; preds = %5, %0
  %12 = phi i32 [ 1, %0 ], [ %10, %5 ]
  ret i32 %12
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @jsimd_can_ycc_rgb565() local_unnamed_addr #1 {
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @jsimd_rgb_ycc_convert(%struct.jpeg_compress_struct* nocapture readonly, i8**, i8***, i32, i32) local_unnamed_addr #0 {
  %6 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 10
  %7 = load i32, i32* %6, align 4
  %8 = add i32 %7, -6
  %9 = icmp ult i32 %8, 10
  br i1 %9, label %10, label %17

10:                                               ; preds = %5
  %11 = sext i32 %8 to i64
  %12 = getelementptr inbounds [10 x void (i32, i8**, i8***, i32, i32)*], [10 x void (i32, i8**, i8***, i32, i32)*]* @switch.table.jsimd_rgb_ycc_convert, i64 0, i64 %11
  %13 = load void (i32, i8**, i8***, i32, i32)*, void (i32, i8**, i8***, i32, i32)** %12, align 8
  %14 = sext i32 %8 to i64
  %15 = getelementptr inbounds [10 x void (i32, i8**, i8***, i32, i32)*], [10 x void (i32, i8**, i8***, i32, i32)*]* @switch.table.jsimd_rgb_ycc_convert.5, i64 0, i64 %14
  %16 = load void (i32, i8**, i8***, i32, i32)*, void (i32, i8**, i8***, i32, i32)** %15, align 8
  br label %17

17:                                               ; preds = %5, %10
  %18 = phi void (i32, i8**, i8***, i32, i32)* [ %13, %10 ], [ @jsimd_rgb_ycc_convert_avx2, %5 ]
  %19 = phi void (i32, i8**, i8***, i32, i32)* [ %16, %10 ], [ @jsimd_rgb_ycc_convert_sse2, %5 ]
  %20 = load i32, i32* @simd_support, align 4
  %21 = trunc i32 %20 to i8
  %22 = icmp slt i8 %21, 0
  %23 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 7
  %24 = load i32, i32* %23, align 8
  br i1 %22, label %25, label %26

25:                                               ; preds = %17
  tail call void %18(i32 %24, i8** %1, i8*** %2, i32 %3, i32 %4) #4
  br label %27

26:                                               ; preds = %17
  tail call void %19(i32 %24, i8** %1, i8*** %2, i32 %3, i32 %4) #4
  br label %27

27:                                               ; preds = %26, %25
  ret void
}

declare void @jsimd_extrgb_ycc_convert_avx2(i32, i8**, i8***, i32, i32) local_unnamed_addr #2

declare void @jsimd_extrgb_ycc_convert_sse2(i32, i8**, i8***, i32, i32) local_unnamed_addr #2

declare void @jsimd_extrgbx_ycc_convert_avx2(i32, i8**, i8***, i32, i32) local_unnamed_addr #2

declare void @jsimd_extrgbx_ycc_convert_sse2(i32, i8**, i8***, i32, i32) local_unnamed_addr #2

declare void @jsimd_extbgr_ycc_convert_avx2(i32, i8**, i8***, i32, i32) local_unnamed_addr #2

declare void @jsimd_extbgr_ycc_convert_sse2(i32, i8**, i8***, i32, i32) local_unnamed_addr #2

declare void @jsimd_extbgrx_ycc_convert_avx2(i32, i8**, i8***, i32, i32) local_unnamed_addr #2

declare void @jsimd_extbgrx_ycc_convert_sse2(i32, i8**, i8***, i32, i32) local_unnamed_addr #2

declare void @jsimd_extxbgr_ycc_convert_avx2(i32, i8**, i8***, i32, i32) local_unnamed_addr #2

declare void @jsimd_extxbgr_ycc_convert_sse2(i32, i8**, i8***, i32, i32) local_unnamed_addr #2

declare void @jsimd_extxrgb_ycc_convert_avx2(i32, i8**, i8***, i32, i32) local_unnamed_addr #2

declare void @jsimd_extxrgb_ycc_convert_sse2(i32, i8**, i8***, i32, i32) local_unnamed_addr #2

declare void @jsimd_rgb_ycc_convert_avx2(i32, i8**, i8***, i32, i32) local_unnamed_addr #2

declare void @jsimd_rgb_ycc_convert_sse2(i32, i8**, i8***, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @jsimd_rgb_gray_convert(%struct.jpeg_compress_struct* nocapture readonly, i8**, i8***, i32, i32) local_unnamed_addr #0 {
  %6 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 10
  %7 = load i32, i32* %6, align 4
  %8 = add i32 %7, -6
  %9 = icmp ult i32 %8, 10
  br i1 %9, label %10, label %17

10:                                               ; preds = %5
  %11 = sext i32 %8 to i64
  %12 = getelementptr inbounds [10 x void (i32, i8**, i8***, i32, i32)*], [10 x void (i32, i8**, i8***, i32, i32)*]* @switch.table.jsimd_rgb_gray_convert, i64 0, i64 %11
  %13 = load void (i32, i8**, i8***, i32, i32)*, void (i32, i8**, i8***, i32, i32)** %12, align 8
  %14 = sext i32 %8 to i64
  %15 = getelementptr inbounds [10 x void (i32, i8**, i8***, i32, i32)*], [10 x void (i32, i8**, i8***, i32, i32)*]* @switch.table.jsimd_rgb_gray_convert.6, i64 0, i64 %14
  %16 = load void (i32, i8**, i8***, i32, i32)*, void (i32, i8**, i8***, i32, i32)** %15, align 8
  br label %17

17:                                               ; preds = %5, %10
  %18 = phi void (i32, i8**, i8***, i32, i32)* [ %13, %10 ], [ @jsimd_rgb_gray_convert_avx2, %5 ]
  %19 = phi void (i32, i8**, i8***, i32, i32)* [ %16, %10 ], [ @jsimd_rgb_gray_convert_sse2, %5 ]
  %20 = load i32, i32* @simd_support, align 4
  %21 = trunc i32 %20 to i8
  %22 = icmp slt i8 %21, 0
  %23 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 7
  %24 = load i32, i32* %23, align 8
  br i1 %22, label %25, label %26

25:                                               ; preds = %17
  tail call void %18(i32 %24, i8** %1, i8*** %2, i32 %3, i32 %4) #4
  br label %27

26:                                               ; preds = %17
  tail call void %19(i32 %24, i8** %1, i8*** %2, i32 %3, i32 %4) #4
  br label %27

27:                                               ; preds = %26, %25
  ret void
}

declare void @jsimd_extrgb_gray_convert_avx2(i32, i8**, i8***, i32, i32) local_unnamed_addr #2

declare void @jsimd_extrgb_gray_convert_sse2(i32, i8**, i8***, i32, i32) local_unnamed_addr #2

declare void @jsimd_extrgbx_gray_convert_avx2(i32, i8**, i8***, i32, i32) local_unnamed_addr #2

declare void @jsimd_extrgbx_gray_convert_sse2(i32, i8**, i8***, i32, i32) local_unnamed_addr #2

declare void @jsimd_extbgr_gray_convert_avx2(i32, i8**, i8***, i32, i32) local_unnamed_addr #2

declare void @jsimd_extbgr_gray_convert_sse2(i32, i8**, i8***, i32, i32) local_unnamed_addr #2

declare void @jsimd_extbgrx_gray_convert_avx2(i32, i8**, i8***, i32, i32) local_unnamed_addr #2

declare void @jsimd_extbgrx_gray_convert_sse2(i32, i8**, i8***, i32, i32) local_unnamed_addr #2

declare void @jsimd_extxbgr_gray_convert_avx2(i32, i8**, i8***, i32, i32) local_unnamed_addr #2

declare void @jsimd_extxbgr_gray_convert_sse2(i32, i8**, i8***, i32, i32) local_unnamed_addr #2

declare void @jsimd_extxrgb_gray_convert_avx2(i32, i8**, i8***, i32, i32) local_unnamed_addr #2

declare void @jsimd_extxrgb_gray_convert_sse2(i32, i8**, i8***, i32, i32) local_unnamed_addr #2

declare void @jsimd_rgb_gray_convert_avx2(i32, i8**, i8***, i32, i32) local_unnamed_addr #2

declare void @jsimd_rgb_gray_convert_sse2(i32, i8**, i8***, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @jsimd_ycc_rgb_convert(%struct.jpeg_decompress_struct* nocapture readonly, i8***, i32, i8**, i32) local_unnamed_addr #0 {
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 11
  %7 = load i32, i32* %6, align 8
  %8 = add i32 %7, -6
  %9 = icmp ult i32 %8, 10
  br i1 %9, label %10, label %17

10:                                               ; preds = %5
  %11 = sext i32 %8 to i64
  %12 = getelementptr inbounds [10 x void (i32, i8***, i32, i8**, i32)*], [10 x void (i32, i8***, i32, i8**, i32)*]* @switch.table.jsimd_ycc_rgb_convert, i64 0, i64 %11
  %13 = load void (i32, i8***, i32, i8**, i32)*, void (i32, i8***, i32, i8**, i32)** %12, align 8
  %14 = sext i32 %8 to i64
  %15 = getelementptr inbounds [10 x void (i32, i8***, i32, i8**, i32)*], [10 x void (i32, i8***, i32, i8**, i32)*]* @switch.table.jsimd_ycc_rgb_convert.7, i64 0, i64 %14
  %16 = load void (i32, i8***, i32, i8**, i32)*, void (i32, i8***, i32, i8**, i32)** %15, align 8
  br label %17

17:                                               ; preds = %5, %10
  %18 = phi void (i32, i8***, i32, i8**, i32)* [ %13, %10 ], [ @jsimd_ycc_rgb_convert_avx2, %5 ]
  %19 = phi void (i32, i8***, i32, i8**, i32)* [ %16, %10 ], [ @jsimd_ycc_rgb_convert_sse2, %5 ]
  %20 = load i32, i32* @simd_support, align 4
  %21 = trunc i32 %20 to i8
  %22 = icmp slt i8 %21, 0
  %23 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  %24 = load i32, i32* %23, align 8
  br i1 %22, label %25, label %26

25:                                               ; preds = %17
  tail call void %18(i32 %24, i8*** %1, i32 %2, i8** %3, i32 %4) #4
  br label %27

26:                                               ; preds = %17
  tail call void %19(i32 %24, i8*** %1, i32 %2, i8** %3, i32 %4) #4
  br label %27

27:                                               ; preds = %26, %25
  ret void
}

declare void @jsimd_ycc_extrgb_convert_avx2(i32, i8***, i32, i8**, i32) local_unnamed_addr #2

declare void @jsimd_ycc_extrgb_convert_sse2(i32, i8***, i32, i8**, i32) local_unnamed_addr #2

declare void @jsimd_ycc_extrgbx_convert_avx2(i32, i8***, i32, i8**, i32) local_unnamed_addr #2

declare void @jsimd_ycc_extrgbx_convert_sse2(i32, i8***, i32, i8**, i32) local_unnamed_addr #2

declare void @jsimd_ycc_extbgr_convert_avx2(i32, i8***, i32, i8**, i32) local_unnamed_addr #2

declare void @jsimd_ycc_extbgr_convert_sse2(i32, i8***, i32, i8**, i32) local_unnamed_addr #2

declare void @jsimd_ycc_extbgrx_convert_avx2(i32, i8***, i32, i8**, i32) local_unnamed_addr #2

declare void @jsimd_ycc_extbgrx_convert_sse2(i32, i8***, i32, i8**, i32) local_unnamed_addr #2

declare void @jsimd_ycc_extxbgr_convert_avx2(i32, i8***, i32, i8**, i32) local_unnamed_addr #2

declare void @jsimd_ycc_extxbgr_convert_sse2(i32, i8***, i32, i8**, i32) local_unnamed_addr #2

declare void @jsimd_ycc_extxrgb_convert_avx2(i32, i8***, i32, i8**, i32) local_unnamed_addr #2

declare void @jsimd_ycc_extxrgb_convert_sse2(i32, i8***, i32, i8**, i32) local_unnamed_addr #2

declare void @jsimd_ycc_rgb_convert_avx2(i32, i8***, i32, i8**, i32) local_unnamed_addr #2

declare void @jsimd_ycc_rgb_convert_sse2(i32, i8***, i32, i8**, i32) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @jsimd_ycc_rgb565_convert(%struct.jpeg_decompress_struct* nocapture, i8*** nocapture, i32, i8** nocapture, i32) local_unnamed_addr #1 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @jsimd_can_h2v2_downsample() local_unnamed_addr #0 {
  tail call fastcc void @init_simd()
  %1 = load i32, i32* @simd_support, align 4
  %2 = trunc i32 %1 to i8
  %3 = icmp slt i8 %2, 0
  %4 = lshr i32 %1, 3
  %5 = and i32 %4, 1
  %6 = select i1 %3, i32 1, i32 %5
  ret i32 %6
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @jsimd_can_h2v1_downsample() local_unnamed_addr #0 {
  tail call fastcc void @init_simd()
  %1 = load i32, i32* @simd_support, align 4
  %2 = trunc i32 %1 to i8
  %3 = icmp slt i8 %2, 0
  %4 = lshr i32 %1, 3
  %5 = and i32 %4, 1
  %6 = select i1 %3, i32 1, i32 %5
  ret i32 %6
}

; Function Attrs: nounwind ssp uwtable
define hidden void @jsimd_h2v2_downsample(%struct.jpeg_compress_struct* nocapture readonly, %struct.jpeg_component_info* nocapture readonly, i8**, i8**) local_unnamed_addr #0 {
  %5 = load i32, i32* @simd_support, align 4
  %6 = trunc i32 %5 to i8
  %7 = icmp slt i8 %6, 0
  %8 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 7
  %9 = load i32, i32* %8, align 8
  %10 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 42
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %1, i64 0, i32 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %1, i64 0, i32 7
  %15 = load i32, i32* %14, align 4
  br i1 %7, label %16, label %17

16:                                               ; preds = %4
  tail call void @jsimd_h2v2_downsample_avx2(i32 %9, i32 %11, i32 %13, i32 %15, i8** %2, i8** %3) #4
  br label %18

17:                                               ; preds = %4
  tail call void @jsimd_h2v2_downsample_sse2(i32 %9, i32 %11, i32 %13, i32 %15, i8** %2, i8** %3) #4
  br label %18

18:                                               ; preds = %17, %16
  ret void
}

declare void @jsimd_h2v2_downsample_avx2(i32, i32, i32, i32, i8**, i8**) local_unnamed_addr #2

declare void @jsimd_h2v2_downsample_sse2(i32, i32, i32, i32, i8**, i8**) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @jsimd_h2v1_downsample(%struct.jpeg_compress_struct* nocapture readonly, %struct.jpeg_component_info* nocapture readonly, i8**, i8**) local_unnamed_addr #0 {
  %5 = load i32, i32* @simd_support, align 4
  %6 = trunc i32 %5 to i8
  %7 = icmp slt i8 %6, 0
  %8 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 7
  %9 = load i32, i32* %8, align 8
  %10 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 42
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %1, i64 0, i32 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %1, i64 0, i32 7
  %15 = load i32, i32* %14, align 4
  br i1 %7, label %16, label %17

16:                                               ; preds = %4
  tail call void @jsimd_h2v1_downsample_avx2(i32 %9, i32 %11, i32 %13, i32 %15, i8** %2, i8** %3) #4
  br label %18

17:                                               ; preds = %4
  tail call void @jsimd_h2v1_downsample_sse2(i32 %9, i32 %11, i32 %13, i32 %15, i8** %2, i8** %3) #4
  br label %18

18:                                               ; preds = %17, %16
  ret void
}

declare void @jsimd_h2v1_downsample_avx2(i32, i32, i32, i32, i8**, i8**) local_unnamed_addr #2

declare void @jsimd_h2v1_downsample_sse2(i32, i32, i32, i32, i8**, i8**) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @jsimd_can_h2v2_upsample() local_unnamed_addr #0 {
  tail call fastcc void @init_simd()
  %1 = load i32, i32* @simd_support, align 4
  %2 = trunc i32 %1 to i8
  %3 = icmp slt i8 %2, 0
  %4 = lshr i32 %1, 3
  %5 = and i32 %4, 1
  %6 = select i1 %3, i32 1, i32 %5
  ret i32 %6
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @jsimd_can_h2v1_upsample() local_unnamed_addr #0 {
  tail call fastcc void @init_simd()
  %1 = load i32, i32* @simd_support, align 4
  %2 = trunc i32 %1 to i8
  %3 = icmp slt i8 %2, 0
  %4 = lshr i32 %1, 3
  %5 = and i32 %4, 1
  %6 = select i1 %3, i32 1, i32 %5
  ret i32 %6
}

; Function Attrs: nounwind ssp uwtable
define hidden void @jsimd_h2v2_upsample(%struct.jpeg_decompress_struct* nocapture readonly, %struct.jpeg_component_info* nocapture readnone, i8**, i8***) local_unnamed_addr #0 {
  %5 = load i32, i32* @simd_support, align 4
  %6 = trunc i32 %5 to i8
  %7 = icmp slt i8 %6, 0
  %8 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 62
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  %11 = load i32, i32* %10, align 8
  br i1 %7, label %12, label %13

12:                                               ; preds = %4
  tail call void @jsimd_h2v2_upsample_avx2(i32 %9, i32 %11, i8** %2, i8*** %3) #4
  br label %14

13:                                               ; preds = %4
  tail call void @jsimd_h2v2_upsample_sse2(i32 %9, i32 %11, i8** %2, i8*** %3) #4
  br label %14

14:                                               ; preds = %13, %12
  ret void
}

declare void @jsimd_h2v2_upsample_avx2(i32, i32, i8**, i8***) local_unnamed_addr #2

declare void @jsimd_h2v2_upsample_sse2(i32, i32, i8**, i8***) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @jsimd_h2v1_upsample(%struct.jpeg_decompress_struct* nocapture readonly, %struct.jpeg_component_info* nocapture readnone, i8**, i8***) local_unnamed_addr #0 {
  %5 = load i32, i32* @simd_support, align 4
  %6 = trunc i32 %5 to i8
  %7 = icmp slt i8 %6, 0
  %8 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 62
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  %11 = load i32, i32* %10, align 8
  br i1 %7, label %12, label %13

12:                                               ; preds = %4
  tail call void @jsimd_h2v1_upsample_avx2(i32 %9, i32 %11, i8** %2, i8*** %3) #4
  br label %14

13:                                               ; preds = %4
  tail call void @jsimd_h2v1_upsample_sse2(i32 %9, i32 %11, i8** %2, i8*** %3) #4
  br label %14

14:                                               ; preds = %13, %12
  ret void
}

declare void @jsimd_h2v1_upsample_avx2(i32, i32, i8**, i8***) local_unnamed_addr #2

declare void @jsimd_h2v1_upsample_sse2(i32, i32, i8**, i8***) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @jsimd_can_h2v2_fancy_upsample() local_unnamed_addr #0 {
  tail call fastcc void @init_simd()
  %1 = load i32, i32* @simd_support, align 4
  %2 = trunc i32 %1 to i8
  %3 = icmp sgt i8 %2, -1
  %4 = or i1 %3, icmp ne (i64 and (i64 ptrtoint ([0 x i32]* @jconst_fancy_upsample_avx2 to i64), i64 31), i64 0)
  br i1 %4, label %5, label %11

5:                                                ; preds = %0
  %6 = and i32 %1, 8
  %7 = icmp eq i32 %6, 0
  %8 = or i1 %7, icmp ne (i64 and (i64 ptrtoint ([0 x i32]* @jconst_fancy_upsample_sse2 to i64), i64 15), i64 0)
  %9 = xor i1 %8, true
  %10 = zext i1 %9 to i32
  br label %11

11:                                               ; preds = %5, %0
  %12 = phi i32 [ 1, %0 ], [ %10, %5 ]
  ret i32 %12
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @jsimd_can_h2v1_fancy_upsample() local_unnamed_addr #0 {
  tail call fastcc void @init_simd()
  %1 = load i32, i32* @simd_support, align 4
  %2 = trunc i32 %1 to i8
  %3 = icmp sgt i8 %2, -1
  %4 = or i1 %3, icmp ne (i64 and (i64 ptrtoint ([0 x i32]* @jconst_fancy_upsample_avx2 to i64), i64 31), i64 0)
  br i1 %4, label %5, label %11

5:                                                ; preds = %0
  %6 = and i32 %1, 8
  %7 = icmp eq i32 %6, 0
  %8 = or i1 %7, icmp ne (i64 and (i64 ptrtoint ([0 x i32]* @jconst_fancy_upsample_sse2 to i64), i64 15), i64 0)
  %9 = xor i1 %8, true
  %10 = zext i1 %9 to i32
  br label %11

11:                                               ; preds = %5, %0
  %12 = phi i32 [ 1, %0 ], [ %10, %5 ]
  ret i32 %12
}

; Function Attrs: nounwind ssp uwtable
define hidden void @jsimd_h2v2_fancy_upsample(%struct.jpeg_decompress_struct* nocapture readonly, %struct.jpeg_component_info* nocapture readonly, i8**, i8***) local_unnamed_addr #0 {
  %5 = load i32, i32* @simd_support, align 4
  %6 = trunc i32 %5 to i8
  %7 = icmp slt i8 %6, 0
  %8 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 62
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %1, i64 0, i32 10
  %11 = load i32, i32* %10, align 8
  br i1 %7, label %12, label %13

12:                                               ; preds = %4
  tail call void @jsimd_h2v2_fancy_upsample_avx2(i32 %9, i32 %11, i8** %2, i8*** %3) #4
  br label %14

13:                                               ; preds = %4
  tail call void @jsimd_h2v2_fancy_upsample_sse2(i32 %9, i32 %11, i8** %2, i8*** %3) #4
  br label %14

14:                                               ; preds = %13, %12
  ret void
}

declare void @jsimd_h2v2_fancy_upsample_avx2(i32, i32, i8**, i8***) local_unnamed_addr #2

declare void @jsimd_h2v2_fancy_upsample_sse2(i32, i32, i8**, i8***) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @jsimd_h2v1_fancy_upsample(%struct.jpeg_decompress_struct* nocapture readonly, %struct.jpeg_component_info* nocapture readonly, i8**, i8***) local_unnamed_addr #0 {
  %5 = load i32, i32* @simd_support, align 4
  %6 = trunc i32 %5 to i8
  %7 = icmp slt i8 %6, 0
  %8 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 62
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %1, i64 0, i32 10
  %11 = load i32, i32* %10, align 8
  br i1 %7, label %12, label %13

12:                                               ; preds = %4
  tail call void @jsimd_h2v1_fancy_upsample_avx2(i32 %9, i32 %11, i8** %2, i8*** %3) #4
  br label %14

13:                                               ; preds = %4
  tail call void @jsimd_h2v1_fancy_upsample_sse2(i32 %9, i32 %11, i8** %2, i8*** %3) #4
  br label %14

14:                                               ; preds = %13, %12
  ret void
}

declare void @jsimd_h2v1_fancy_upsample_avx2(i32, i32, i8**, i8***) local_unnamed_addr #2

declare void @jsimd_h2v1_fancy_upsample_sse2(i32, i32, i8**, i8***) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @jsimd_can_h2v2_merged_upsample() local_unnamed_addr #0 {
  tail call fastcc void @init_simd()
  %1 = load i32, i32* @simd_support, align 4
  %2 = trunc i32 %1 to i8
  %3 = icmp sgt i8 %2, -1
  %4 = or i1 %3, icmp ne (i64 and (i64 ptrtoint ([0 x i32]* @jconst_merged_upsample_avx2 to i64), i64 31), i64 0)
  br i1 %4, label %5, label %11

5:                                                ; preds = %0
  %6 = and i32 %1, 8
  %7 = icmp eq i32 %6, 0
  %8 = or i1 %7, icmp ne (i64 and (i64 ptrtoint ([0 x i32]* @jconst_merged_upsample_sse2 to i64), i64 15), i64 0)
  %9 = xor i1 %8, true
  %10 = zext i1 %9 to i32
  br label %11

11:                                               ; preds = %5, %0
  %12 = phi i32 [ 1, %0 ], [ %10, %5 ]
  ret i32 %12
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @jsimd_can_h2v1_merged_upsample() local_unnamed_addr #0 {
  tail call fastcc void @init_simd()
  %1 = load i32, i32* @simd_support, align 4
  %2 = trunc i32 %1 to i8
  %3 = icmp sgt i8 %2, -1
  %4 = or i1 %3, icmp ne (i64 and (i64 ptrtoint ([0 x i32]* @jconst_merged_upsample_avx2 to i64), i64 31), i64 0)
  br i1 %4, label %5, label %11

5:                                                ; preds = %0
  %6 = and i32 %1, 8
  %7 = icmp eq i32 %6, 0
  %8 = or i1 %7, icmp ne (i64 and (i64 ptrtoint ([0 x i32]* @jconst_merged_upsample_sse2 to i64), i64 15), i64 0)
  %9 = xor i1 %8, true
  %10 = zext i1 %9 to i32
  br label %11

11:                                               ; preds = %5, %0
  %12 = phi i32 [ 1, %0 ], [ %10, %5 ]
  ret i32 %12
}

; Function Attrs: nounwind ssp uwtable
define hidden void @jsimd_h2v2_merged_upsample(%struct.jpeg_decompress_struct* nocapture readonly, i8***, i32, i8**) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 11
  %6 = load i32, i32* %5, align 8
  %7 = add i32 %6, -6
  %8 = icmp ult i32 %7, 10
  br i1 %8, label %9, label %16

9:                                                ; preds = %4
  %10 = sext i32 %7 to i64
  %11 = getelementptr inbounds [10 x void (i32, i8***, i32, i8**)*], [10 x void (i32, i8***, i32, i8**)*]* @switch.table.jsimd_h2v2_merged_upsample, i64 0, i64 %10
  %12 = load void (i32, i8***, i32, i8**)*, void (i32, i8***, i32, i8**)** %11, align 8
  %13 = sext i32 %7 to i64
  %14 = getelementptr inbounds [10 x void (i32, i8***, i32, i8**)*], [10 x void (i32, i8***, i32, i8**)*]* @switch.table.jsimd_h2v2_merged_upsample.8, i64 0, i64 %13
  %15 = load void (i32, i8***, i32, i8**)*, void (i32, i8***, i32, i8**)** %14, align 8
  br label %16

16:                                               ; preds = %4, %9
  %17 = phi void (i32, i8***, i32, i8**)* [ %12, %9 ], [ @jsimd_h2v2_merged_upsample_avx2, %4 ]
  %18 = phi void (i32, i8***, i32, i8**)* [ %15, %9 ], [ @jsimd_h2v2_merged_upsample_sse2, %4 ]
  %19 = load i32, i32* @simd_support, align 4
  %20 = trunc i32 %19 to i8
  %21 = icmp slt i8 %20, 0
  %22 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  %23 = load i32, i32* %22, align 8
  br i1 %21, label %24, label %25

24:                                               ; preds = %16
  tail call void %17(i32 %23, i8*** %1, i32 %2, i8** %3) #4
  br label %26

25:                                               ; preds = %16
  tail call void %18(i32 %23, i8*** %1, i32 %2, i8** %3) #4
  br label %26

26:                                               ; preds = %25, %24
  ret void
}

declare void @jsimd_h2v2_extrgb_merged_upsample_avx2(i32, i8***, i32, i8**) local_unnamed_addr #2

declare void @jsimd_h2v2_extrgb_merged_upsample_sse2(i32, i8***, i32, i8**) local_unnamed_addr #2

declare void @jsimd_h2v2_extrgbx_merged_upsample_avx2(i32, i8***, i32, i8**) local_unnamed_addr #2

declare void @jsimd_h2v2_extrgbx_merged_upsample_sse2(i32, i8***, i32, i8**) local_unnamed_addr #2

declare void @jsimd_h2v2_extbgr_merged_upsample_avx2(i32, i8***, i32, i8**) local_unnamed_addr #2

declare void @jsimd_h2v2_extbgr_merged_upsample_sse2(i32, i8***, i32, i8**) local_unnamed_addr #2

declare void @jsimd_h2v2_extbgrx_merged_upsample_avx2(i32, i8***, i32, i8**) local_unnamed_addr #2

declare void @jsimd_h2v2_extbgrx_merged_upsample_sse2(i32, i8***, i32, i8**) local_unnamed_addr #2

declare void @jsimd_h2v2_extxbgr_merged_upsample_avx2(i32, i8***, i32, i8**) local_unnamed_addr #2

declare void @jsimd_h2v2_extxbgr_merged_upsample_sse2(i32, i8***, i32, i8**) local_unnamed_addr #2

declare void @jsimd_h2v2_extxrgb_merged_upsample_avx2(i32, i8***, i32, i8**) local_unnamed_addr #2

declare void @jsimd_h2v2_extxrgb_merged_upsample_sse2(i32, i8***, i32, i8**) local_unnamed_addr #2

declare void @jsimd_h2v2_merged_upsample_avx2(i32, i8***, i32, i8**) local_unnamed_addr #2

declare void @jsimd_h2v2_merged_upsample_sse2(i32, i8***, i32, i8**) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @jsimd_h2v1_merged_upsample(%struct.jpeg_decompress_struct* nocapture readonly, i8***, i32, i8**) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 11
  %6 = load i32, i32* %5, align 8
  %7 = add i32 %6, -6
  %8 = icmp ult i32 %7, 10
  br i1 %8, label %9, label %16

9:                                                ; preds = %4
  %10 = sext i32 %7 to i64
  %11 = getelementptr inbounds [10 x void (i32, i8***, i32, i8**)*], [10 x void (i32, i8***, i32, i8**)*]* @switch.table.jsimd_h2v1_merged_upsample, i64 0, i64 %10
  %12 = load void (i32, i8***, i32, i8**)*, void (i32, i8***, i32, i8**)** %11, align 8
  %13 = sext i32 %7 to i64
  %14 = getelementptr inbounds [10 x void (i32, i8***, i32, i8**)*], [10 x void (i32, i8***, i32, i8**)*]* @switch.table.jsimd_h2v1_merged_upsample.9, i64 0, i64 %13
  %15 = load void (i32, i8***, i32, i8**)*, void (i32, i8***, i32, i8**)** %14, align 8
  br label %16

16:                                               ; preds = %4, %9
  %17 = phi void (i32, i8***, i32, i8**)* [ %12, %9 ], [ @jsimd_h2v1_merged_upsample_avx2, %4 ]
  %18 = phi void (i32, i8***, i32, i8**)* [ %15, %9 ], [ @jsimd_h2v1_merged_upsample_sse2, %4 ]
  %19 = load i32, i32* @simd_support, align 4
  %20 = trunc i32 %19 to i8
  %21 = icmp slt i8 %20, 0
  %22 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  %23 = load i32, i32* %22, align 8
  br i1 %21, label %24, label %25

24:                                               ; preds = %16
  tail call void %17(i32 %23, i8*** %1, i32 %2, i8** %3) #4
  br label %26

25:                                               ; preds = %16
  tail call void %18(i32 %23, i8*** %1, i32 %2, i8** %3) #4
  br label %26

26:                                               ; preds = %25, %24
  ret void
}

declare void @jsimd_h2v1_extrgb_merged_upsample_avx2(i32, i8***, i32, i8**) local_unnamed_addr #2

declare void @jsimd_h2v1_extrgb_merged_upsample_sse2(i32, i8***, i32, i8**) local_unnamed_addr #2

declare void @jsimd_h2v1_extrgbx_merged_upsample_avx2(i32, i8***, i32, i8**) local_unnamed_addr #2

declare void @jsimd_h2v1_extrgbx_merged_upsample_sse2(i32, i8***, i32, i8**) local_unnamed_addr #2

declare void @jsimd_h2v1_extbgr_merged_upsample_avx2(i32, i8***, i32, i8**) local_unnamed_addr #2

declare void @jsimd_h2v1_extbgr_merged_upsample_sse2(i32, i8***, i32, i8**) local_unnamed_addr #2

declare void @jsimd_h2v1_extbgrx_merged_upsample_avx2(i32, i8***, i32, i8**) local_unnamed_addr #2

declare void @jsimd_h2v1_extbgrx_merged_upsample_sse2(i32, i8***, i32, i8**) local_unnamed_addr #2

declare void @jsimd_h2v1_extxbgr_merged_upsample_avx2(i32, i8***, i32, i8**) local_unnamed_addr #2

declare void @jsimd_h2v1_extxbgr_merged_upsample_sse2(i32, i8***, i32, i8**) local_unnamed_addr #2

declare void @jsimd_h2v1_extxrgb_merged_upsample_avx2(i32, i8***, i32, i8**) local_unnamed_addr #2

declare void @jsimd_h2v1_extxrgb_merged_upsample_sse2(i32, i8***, i32, i8**) local_unnamed_addr #2

declare void @jsimd_h2v1_merged_upsample_avx2(i32, i8***, i32, i8**) local_unnamed_addr #2

declare void @jsimd_h2v1_merged_upsample_sse2(i32, i8***, i32, i8**) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @jsimd_can_convsamp() local_unnamed_addr #0 {
  tail call fastcc void @init_simd()
  %1 = load i32, i32* @simd_support, align 4
  %2 = trunc i32 %1 to i8
  %3 = icmp slt i8 %2, 0
  %4 = lshr i32 %1, 3
  %5 = and i32 %4, 1
  %6 = select i1 %3, i32 1, i32 %5
  ret i32 %6
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @jsimd_can_convsamp_float() local_unnamed_addr #0 {
  tail call fastcc void @init_simd()
  %1 = load i32, i32* @simd_support, align 4
  %2 = lshr i32 %1, 3
  %3 = and i32 %2, 1
  ret i32 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden void @jsimd_convsamp(i8**, i32, i16*) local_unnamed_addr #0 {
  %4 = load i32, i32* @simd_support, align 4
  %5 = trunc i32 %4 to i8
  %6 = icmp slt i8 %5, 0
  br i1 %6, label %7, label %8

7:                                                ; preds = %3
  tail call void @jsimd_convsamp_avx2(i8** %0, i32 %1, i16* %2) #4
  br label %9

8:                                                ; preds = %3
  tail call void @jsimd_convsamp_sse2(i8** %0, i32 %1, i16* %2) #4
  br label %9

9:                                                ; preds = %8, %7
  ret void
}

declare void @jsimd_convsamp_avx2(i8**, i32, i16*) local_unnamed_addr #2

declare void @jsimd_convsamp_sse2(i8**, i32, i16*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @jsimd_convsamp_float(i8**, i32, float*) local_unnamed_addr #0 {
  tail call void @jsimd_convsamp_float_sse2(i8** %0, i32 %1, float* %2) #4
  ret void
}

declare void @jsimd_convsamp_float_sse2(i8**, i32, float*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @jsimd_can_fdct_islow() local_unnamed_addr #0 {
  tail call fastcc void @init_simd()
  %1 = load i32, i32* @simd_support, align 4
  %2 = trunc i32 %1 to i8
  %3 = icmp sgt i8 %2, -1
  %4 = or i1 %3, icmp ne (i64 and (i64 ptrtoint ([0 x i32]* @jconst_fdct_islow_avx2 to i64), i64 31), i64 0)
  br i1 %4, label %5, label %11

5:                                                ; preds = %0
  %6 = and i32 %1, 8
  %7 = icmp eq i32 %6, 0
  %8 = or i1 %7, icmp ne (i64 and (i64 ptrtoint ([0 x i32]* @jconst_fdct_islow_sse2 to i64), i64 15), i64 0)
  %9 = xor i1 %8, true
  %10 = zext i1 %9 to i32
  br label %11

11:                                               ; preds = %5, %0
  %12 = phi i32 [ 1, %0 ], [ %10, %5 ]
  ret i32 %12
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @jsimd_can_fdct_ifast() local_unnamed_addr #0 {
  tail call fastcc void @init_simd()
  %1 = load i32, i32* @simd_support, align 4
  %2 = and i32 %1, 8
  %3 = icmp eq i32 %2, 0
  %4 = or i1 %3, icmp ne (i64 and (i64 ptrtoint ([0 x i32]* @jconst_fdct_ifast_sse2 to i64), i64 15), i64 0)
  %5 = xor i1 %4, true
  %6 = zext i1 %5 to i32
  ret i32 %6
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @jsimd_can_fdct_float() local_unnamed_addr #0 {
  tail call fastcc void @init_simd()
  %1 = load i32, i32* @simd_support, align 4
  %2 = and i32 %1, 4
  %3 = icmp eq i32 %2, 0
  %4 = or i1 %3, icmp ne (i64 and (i64 ptrtoint ([0 x i32]* @jconst_fdct_float_sse to i64), i64 15), i64 0)
  %5 = xor i1 %4, true
  %6 = zext i1 %5 to i32
  ret i32 %6
}

; Function Attrs: nounwind ssp uwtable
define hidden void @jsimd_fdct_islow(i16*) local_unnamed_addr #0 {
  %2 = load i32, i32* @simd_support, align 4
  %3 = trunc i32 %2 to i8
  %4 = icmp slt i8 %3, 0
  br i1 %4, label %5, label %6

5:                                                ; preds = %1
  tail call void @jsimd_fdct_islow_avx2(i16* %0) #4
  br label %7

6:                                                ; preds = %1
  tail call void @jsimd_fdct_islow_sse2(i16* %0) #4
  br label %7

7:                                                ; preds = %6, %5
  ret void
}

declare void @jsimd_fdct_islow_avx2(i16*) local_unnamed_addr #2

declare void @jsimd_fdct_islow_sse2(i16*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @jsimd_fdct_ifast(i16*) local_unnamed_addr #0 {
  tail call void @jsimd_fdct_ifast_sse2(i16* %0) #4
  ret void
}

declare void @jsimd_fdct_ifast_sse2(i16*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @jsimd_fdct_float(float*) local_unnamed_addr #0 {
  tail call void @jsimd_fdct_float_sse(float* %0) #4
  ret void
}

declare void @jsimd_fdct_float_sse(float*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @jsimd_can_quantize() local_unnamed_addr #0 {
  tail call fastcc void @init_simd()
  %1 = load i32, i32* @simd_support, align 4
  %2 = trunc i32 %1 to i8
  %3 = icmp slt i8 %2, 0
  %4 = lshr i32 %1, 3
  %5 = and i32 %4, 1
  %6 = select i1 %3, i32 1, i32 %5
  ret i32 %6
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @jsimd_can_quantize_float() local_unnamed_addr #0 {
  tail call fastcc void @init_simd()
  %1 = load i32, i32* @simd_support, align 4
  %2 = lshr i32 %1, 3
  %3 = and i32 %2, 1
  ret i32 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden void @jsimd_quantize(i16*, i16*, i16*) local_unnamed_addr #0 {
  %4 = load i32, i32* @simd_support, align 4
  %5 = trunc i32 %4 to i8
  %6 = icmp slt i8 %5, 0
  br i1 %6, label %7, label %8

7:                                                ; preds = %3
  tail call void @jsimd_quantize_avx2(i16* %0, i16* %1, i16* %2) #4
  br label %9

8:                                                ; preds = %3
  tail call void @jsimd_quantize_sse2(i16* %0, i16* %1, i16* %2) #4
  br label %9

9:                                                ; preds = %8, %7
  ret void
}

declare void @jsimd_quantize_avx2(i16*, i16*, i16*) local_unnamed_addr #2

declare void @jsimd_quantize_sse2(i16*, i16*, i16*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @jsimd_quantize_float(i16*, float*, float*) local_unnamed_addr #0 {
  tail call void @jsimd_quantize_float_sse2(i16* %0, float* %1, float* %2) #4
  ret void
}

declare void @jsimd_quantize_float_sse2(i16*, float*, float*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @jsimd_can_idct_2x2() local_unnamed_addr #0 {
  tail call fastcc void @init_simd()
  %1 = load i32, i32* @simd_support, align 4
  %2 = and i32 %1, 8
  %3 = icmp eq i32 %2, 0
  %4 = or i1 %3, icmp ne (i64 and (i64 ptrtoint ([0 x i32]* @jconst_idct_red_sse2 to i64), i64 15), i64 0)
  %5 = xor i1 %4, true
  %6 = zext i1 %5 to i32
  ret i32 %6
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @jsimd_can_idct_4x4() local_unnamed_addr #0 {
  tail call fastcc void @init_simd()
  %1 = load i32, i32* @simd_support, align 4
  %2 = and i32 %1, 8
  %3 = icmp eq i32 %2, 0
  %4 = or i1 %3, icmp ne (i64 and (i64 ptrtoint ([0 x i32]* @jconst_idct_red_sse2 to i64), i64 15), i64 0)
  %5 = xor i1 %4, true
  %6 = zext i1 %5 to i32
  ret i32 %6
}

; Function Attrs: nounwind ssp uwtable
define hidden void @jsimd_idct_2x2(%struct.jpeg_decompress_struct* nocapture readnone, %struct.jpeg_component_info* nocapture readonly, i16*, i8**, i32) local_unnamed_addr #0 {
  %6 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %1, i64 0, i32 20
  %7 = load i8*, i8** %6, align 8
  tail call void @jsimd_idct_2x2_sse2(i8* %7, i16* %2, i8** %3, i32 %4) #4
  ret void
}

declare void @jsimd_idct_2x2_sse2(i8*, i16*, i8**, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @jsimd_idct_4x4(%struct.jpeg_decompress_struct* nocapture readnone, %struct.jpeg_component_info* nocapture readonly, i16*, i8**, i32) local_unnamed_addr #0 {
  %6 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %1, i64 0, i32 20
  %7 = load i8*, i8** %6, align 8
  tail call void @jsimd_idct_4x4_sse2(i8* %7, i16* %2, i8** %3, i32 %4) #4
  ret void
}

declare void @jsimd_idct_4x4_sse2(i8*, i16*, i8**, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @jsimd_can_idct_islow() local_unnamed_addr #0 {
  tail call fastcc void @init_simd()
  %1 = load i32, i32* @simd_support, align 4
  %2 = trunc i32 %1 to i8
  %3 = icmp sgt i8 %2, -1
  %4 = or i1 %3, icmp ne (i64 and (i64 ptrtoint ([0 x i32]* @jconst_idct_islow_avx2 to i64), i64 31), i64 0)
  br i1 %4, label %5, label %11

5:                                                ; preds = %0
  %6 = and i32 %1, 8
  %7 = icmp eq i32 %6, 0
  %8 = or i1 %7, icmp ne (i64 and (i64 ptrtoint ([0 x i32]* @jconst_idct_islow_sse2 to i64), i64 15), i64 0)
  %9 = xor i1 %8, true
  %10 = zext i1 %9 to i32
  br label %11

11:                                               ; preds = %5, %0
  %12 = phi i32 [ 1, %0 ], [ %10, %5 ]
  ret i32 %12
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @jsimd_can_idct_ifast() local_unnamed_addr #0 {
  tail call fastcc void @init_simd()
  %1 = load i32, i32* @simd_support, align 4
  %2 = and i32 %1, 8
  %3 = icmp eq i32 %2, 0
  %4 = or i1 %3, icmp ne (i64 and (i64 ptrtoint ([0 x i32]* @jconst_idct_ifast_sse2 to i64), i64 15), i64 0)
  %5 = xor i1 %4, true
  %6 = zext i1 %5 to i32
  ret i32 %6
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @jsimd_can_idct_float() local_unnamed_addr #0 {
  tail call fastcc void @init_simd()
  %1 = load i32, i32* @simd_support, align 4
  %2 = and i32 %1, 8
  %3 = icmp eq i32 %2, 0
  %4 = or i1 %3, icmp ne (i64 and (i64 ptrtoint ([0 x i32]* @jconst_idct_float_sse2 to i64), i64 15), i64 0)
  %5 = xor i1 %4, true
  %6 = zext i1 %5 to i32
  ret i32 %6
}

; Function Attrs: nounwind ssp uwtable
define hidden void @jsimd_idct_islow(%struct.jpeg_decompress_struct* nocapture readnone, %struct.jpeg_component_info* nocapture readonly, i16*, i8**, i32) local_unnamed_addr #0 {
  %6 = load i32, i32* @simd_support, align 4
  %7 = trunc i32 %6 to i8
  %8 = icmp slt i8 %7, 0
  %9 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %1, i64 0, i32 20
  %10 = load i8*, i8** %9, align 8
  br i1 %8, label %11, label %12

11:                                               ; preds = %5
  tail call void @jsimd_idct_islow_avx2(i8* %10, i16* %2, i8** %3, i32 %4) #4
  br label %13

12:                                               ; preds = %5
  tail call void @jsimd_idct_islow_sse2(i8* %10, i16* %2, i8** %3, i32 %4) #4
  br label %13

13:                                               ; preds = %12, %11
  ret void
}

declare void @jsimd_idct_islow_avx2(i8*, i16*, i8**, i32) local_unnamed_addr #2

declare void @jsimd_idct_islow_sse2(i8*, i16*, i8**, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @jsimd_idct_ifast(%struct.jpeg_decompress_struct* nocapture readnone, %struct.jpeg_component_info* nocapture readonly, i16*, i8**, i32) local_unnamed_addr #0 {
  %6 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %1, i64 0, i32 20
  %7 = load i8*, i8** %6, align 8
  tail call void @jsimd_idct_ifast_sse2(i8* %7, i16* %2, i8** %3, i32 %4) #4
  ret void
}

declare void @jsimd_idct_ifast_sse2(i8*, i16*, i8**, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @jsimd_idct_float(%struct.jpeg_decompress_struct* nocapture readnone, %struct.jpeg_component_info* nocapture readonly, i16*, i8**, i32) local_unnamed_addr #0 {
  %6 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %1, i64 0, i32 20
  %7 = load i8*, i8** %6, align 8
  tail call void @jsimd_idct_float_sse2(i8* %7, i16* %2, i8** %3, i32 %4) #4
  ret void
}

declare void @jsimd_idct_float_sse2(i8*, i16*, i8**, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @jsimd_can_huff_encode_one_block() local_unnamed_addr #0 {
  tail call fastcc void @init_simd()
  %1 = load i32, i32* @simd_support, align 4
  %2 = and i32 %1, 8
  %3 = icmp eq i32 %2, 0
  %4 = load i1, i1* @simd_huffman, align 4
  %5 = or i1 %4, %3
  %6 = or i1 %5, icmp ne (i64 and (i64 ptrtoint ([0 x i32]* @jconst_huff_encode_one_block to i64), i64 15), i64 0)
  %7 = xor i1 %6, true
  %8 = zext i1 %7 to i32
  ret i32 %8
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @jsimd_huff_encode_one_block(i8*, i8*, i16*, i32, %struct.c_derived_tbl*, %struct.c_derived_tbl*) local_unnamed_addr #0 {
  %7 = tail call i8* @jsimd_huff_encode_one_block_sse2(i8* %0, i8* %1, i16* %2, i32 %3, %struct.c_derived_tbl* %4, %struct.c_derived_tbl* %5) #4
  ret i8* %7
}

declare i8* @jsimd_huff_encode_one_block_sse2(i8*, i8*, i16*, i32, %struct.c_derived_tbl*, %struct.c_derived_tbl*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @jsimd_can_encode_mcu_AC_first_prepare() local_unnamed_addr #0 {
  tail call fastcc void @init_simd()
  %1 = load i32, i32* @simd_support, align 4
  %2 = lshr i32 %1, 3
  %3 = and i32 %2, 1
  ret i32 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden void @jsimd_encode_mcu_AC_first_prepare(i16*, i32*, i32, i32, i16*, i64*) local_unnamed_addr #0 {
  tail call void @jsimd_encode_mcu_AC_first_prepare_sse2(i16* %0, i32* %1, i32 %2, i32 %3, i16* %4, i64* %5) #4
  ret void
}

declare void @jsimd_encode_mcu_AC_first_prepare_sse2(i16*, i32*, i32, i32, i16*, i64*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @jsimd_can_encode_mcu_AC_refine_prepare() local_unnamed_addr #0 {
  tail call fastcc void @init_simd()
  %1 = load i32, i32* @simd_support, align 4
  %2 = lshr i32 %1, 3
  %3 = and i32 %2, 1
  ret i32 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @jsimd_encode_mcu_AC_refine_prepare(i16*, i32*, i32, i32, i16*, i64*) local_unnamed_addr #0 {
  %7 = tail call i32 @jsimd_encode_mcu_AC_refine_prepare_sse2(i16* %0, i32* %1, i32 %2, i32 %3, i16* %4, i64* %5) #4
  ret i32 %7
}

declare i32 @jsimd_encode_mcu_AC_refine_prepare_sse2(i16*, i32*, i32, i32, i16*, i64*) local_unnamed_addr #2

declare i32 @jpeg_simd_cpu_support() local_unnamed_addr #2

; Function Attrs: nofree nounwind readonly
declare i8* @getenv(i8* nocapture) local_unnamed_addr #3

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
