; ModuleID = '../../gpu/vulkan/vulkan_device_queue.cc'
source_filename = "../../gpu/vulkan/vulkan_device_queue.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.crash_reporter::CrashKeyStringCombined" = type { %"class.crash_reporter::internal::CrashKeyStringCombinedImpl", %"class.crash_reporter::CrashKeyStringBreakpad", %"class.crashpad::StringAnnotation" }
%"class.crash_reporter::internal::CrashKeyStringCombinedImpl" = type { %"class.crash_reporter::internal::CrashKeyStringImpl"*, %"class.crashpad::Annotation"* }
%"class.crash_reporter::internal::CrashKeyStringImpl" = type { i8*, i64*, i64 }
%"class.crashpad::Annotation" = type <{ %"struct.std::__1::atomic.97", i8*, i8*, i32, i16, [2 x i8] }>
%"struct.std::__1::atomic.97" = type { %"struct.std::__1::__atomic_base.98" }
%"struct.std::__1::__atomic_base.98" = type { %"struct.std::__1::__cxx_atomic_impl.99" }
%"struct.std::__1::__cxx_atomic_impl.99" = type { %"struct.std::__1::__cxx_atomic_base_impl.100" }
%"struct.std::__1::__cxx_atomic_base_impl.100" = type { %"class.crashpad::Annotation"* }
%"class.crash_reporter::CrashKeyStringBreakpad" = type { %"class.crash_reporter::internal::CrashKeyStringImpl", %"struct.crash_reporter::internal::InitializedArrayImpl" }
%"struct.crash_reporter::internal::InitializedArrayImpl" = type { [1 x i64] }
%"class.crashpad::StringAnnotation" = type { %"class.crashpad::Annotation.base", [16 x i8], [2 x i8] }
%"class.crashpad::Annotation.base" = type <{ %"struct.std::__1::atomic.97", i8*, i8*, i32, i16 }>
%"class.crash_reporter::CrashKeyStringCombined.101" = type { %"class.crash_reporter::internal::CrashKeyStringCombinedImpl", %"class.crash_reporter::CrashKeyStringBreakpad.102", %"class.crashpad::StringAnnotation.104" }
%"class.crash_reporter::CrashKeyStringBreakpad.102" = type { %"class.crash_reporter::internal::CrashKeyStringImpl", %"struct.crash_reporter::internal::InitializedArrayImpl.103" }
%"struct.crash_reporter::internal::InitializedArrayImpl.103" = type { [3 x i64] }
%"class.crashpad::StringAnnotation.104" = type { %"class.crashpad::Annotation.base", [256 x i8], [2 x i8] }
%"struct.std::nothrow_t" = type { i8 }
%"class.gpu::VulkanDeviceQueue" = type { %"class.base::internal::flat_tree", %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties, %struct.VkPhysicalDeviceDriverProperties, %struct.VkDevice_T*, %struct.VkDevice_T*, %struct.VkQueue_T*, i32, %struct.VkInstance_T*, %struct.VmaAllocator_T*, %"class.std::__1::unique_ptr", %struct.VkPhysicalDeviceFeatures2, i8, %struct.VkPhysicalDeviceProtectedMemoryFeatures }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"class.std::__1::__compressed_pair" }
%"class.base::BasicStringPiece" = type { i8*, i64 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.base::BasicStringPiece"* }
%struct.VkPhysicalDevice_T = type opaque
%struct.VkPhysicalDeviceProperties = type { i32, i32, i32, i32, i32, [256 x i8], [16 x i8], %struct.VkPhysicalDeviceLimits, %struct.VkPhysicalDeviceSparseProperties }
%struct.VkPhysicalDeviceLimits = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [3 x i32], i32, [3 x i32], i32, i32, i32, i32, i32, float, float, i32, [2 x i32], [2 x float], i32, i64, i64, i64, i64, i32, i32, i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, [2 x float], [2 x float], float, float, i32, i32, i64, i64, i64 }
%struct.VkPhysicalDeviceSparseProperties = type { i32, i32, i32, i32, i32 }
%struct.VkPhysicalDeviceDriverProperties = type { i32, i8*, i32, [256 x i8], [256 x i8], %struct.VkConformanceVersion }
%struct.VkConformanceVersion = type { i8, i8, i8, i8 }
%struct.VkDevice_T = type opaque
%struct.VkQueue_T = type opaque
%struct.VmaAllocator_T = type opaque
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.gpu::VulkanFenceHelper"* }
%"class.gpu::VulkanFenceHelper" = type { %"class.gpu::VulkanDeviceQueue"*, %"class.std::__1::vector.3", i64, i64, %"class.base::circular_deque", %"class.base::WeakPtrFactory" }
%"class.std::__1::vector.3" = type { %"class.std::__1::__vector_base.4" }
%"class.std::__1::__vector_base.4" = type { %"class.base::OnceCallback"*, %"class.base::OnceCallback"*, %"class.std::__1::__compressed_pair.5" }
%"class.base::OnceCallback" = type opaque
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"class.base::OnceCallback"* }
%"class.base::circular_deque" = type { %"class.base::internal::VectorBuffer", i64, i64 }
%"class.base::internal::VectorBuffer" = type { %"struct.gpu::VulkanFenceHelper::TasksForFence"*, i64 }
%"struct.gpu::VulkanFenceHelper::TasksForFence" = type { %struct.VkFence_T*, i64, %"class.std::__1::vector.3" }
%struct.VkFence_T = type opaque
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.10" }
%"struct.std::__1::__atomic_base.10" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.11" }
%"struct.std::__1::atomic.11" = type { %"struct.std::__1::__atomic_base.12" }
%"struct.std::__1::__atomic_base.12" = type { %"struct.std::__1::__atomic_base.13" }
%"struct.std::__1::__atomic_base.13" = type { %"struct.std::__1::__cxx_atomic_impl.14" }
%"struct.std::__1::__cxx_atomic_impl.14" = type { %"struct.std::__1::__cxx_atomic_base_impl.15" }
%"struct.std::__1::__cxx_atomic_base_impl.15" = type { i8 }
%struct.VkPhysicalDeviceFeatures2 = type { i32, i8*, %struct.VkPhysicalDeviceFeatures }
%struct.VkPhysicalDeviceFeatures = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VkPhysicalDeviceProtectedMemoryFeatures = type { i32, i8*, i32 }
%struct.VkInstance_T = type opaque
%"struct.gpu::GPUInfo" = type { %"class.base::TimeDelta", i8, i8, [6 x i8], %"struct.gpu::GPUInfo::GPUDevice", %"class.std::__1::vector.22", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i32, i8, %"class.std::__1::basic_string", i8, i8, i8, i8, [4 x i8], %"struct.gpu::VideoDecodeAcceleratorCapabilities", %"class.std::__1::vector.36", i8, %"class.std::__1::vector.43", i8, i8, %"class.absl::optional" }
%"class.base::TimeDelta" = type { i64 }
%"struct.gpu::GPUInfo::GPUDevice" = type <{ i32, i32, i8, [7 x i8], %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i32, [4 x i8] }>
%"class.std::__1::vector.22" = type { %"class.std::__1::__vector_base.23" }
%"class.std::__1::__vector_base.23" = type { %"struct.gpu::GPUInfo::GPUDevice"*, %"struct.gpu::GPUInfo::GPUDevice"*, %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"struct.gpu::GPUInfo::GPUDevice"* }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.gpu::VideoDecodeAcceleratorCapabilities" = type <{ %"class.std::__1::vector.29", i32, [4 x i8] }>
%"class.std::__1::vector.29" = type { %"class.std::__1::__vector_base.30" }
%"class.std::__1::__vector_base.30" = type { %"struct.gpu::VideoDecodeAcceleratorSupportedProfile"*, %"struct.gpu::VideoDecodeAcceleratorSupportedProfile"*, %"class.std::__1::__compressed_pair.31" }
%"struct.gpu::VideoDecodeAcceleratorSupportedProfile" = type <{ i32, %"class.gfx::Size", %"class.gfx::Size", i8, [3 x i8] }>
%"class.gfx::Size" = type { i32, i32 }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { %"struct.gpu::VideoDecodeAcceleratorSupportedProfile"* }
%"class.std::__1::vector.36" = type { %"class.std::__1::__vector_base.37" }
%"class.std::__1::__vector_base.37" = type { %"struct.gpu::VideoEncodeAcceleratorSupportedProfile"*, %"struct.gpu::VideoEncodeAcceleratorSupportedProfile"*, %"class.std::__1::__compressed_pair.38" }
%"struct.gpu::VideoEncodeAcceleratorSupportedProfile" = type { i32, %"class.gfx::Size", %"class.gfx::Size", i32, i32 }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %"struct.gpu::VideoEncodeAcceleratorSupportedProfile"* }
%"class.std::__1::vector.43" = type { %"class.std::__1::__vector_base.44" }
%"class.std::__1::__vector_base.44" = type { %"struct.gpu::ImageDecodeAcceleratorSupportedProfile"*, %"struct.gpu::ImageDecodeAcceleratorSupportedProfile"*, %"class.std::__1::__compressed_pair.52" }
%"struct.gpu::ImageDecodeAcceleratorSupportedProfile" = type { i32, %"class.gfx::Size", %"class.gfx::Size", %"class.std::__1::vector.45" }
%"class.std::__1::vector.45" = type { %"class.std::__1::__vector_base.46" }
%"class.std::__1::__vector_base.46" = type { i32*, i32*, %"class.std::__1::__compressed_pair.47" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48" }
%"struct.std::__1::__compressed_pair_elem.48" = type { i32* }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"struct.std::__1::__compressed_pair_elem.53" = type { %"struct.gpu::ImageDecodeAcceleratorSupportedProfile"* }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.57 }
%union.anon.57 = type { %"class.gpu::VulkanInfo" }
%"class.gpu::VulkanInfo" = type { i32, i32, %"class.std::__1::vector.58", %"class.std::__1::vector.65", %"class.std::__1::vector.72", %"class.std::__1::vector.79" }
%"class.std::__1::vector.58" = type { %"class.std::__1::__vector_base.59" }
%"class.std::__1::__vector_base.59" = type { %struct.VkExtensionProperties*, %struct.VkExtensionProperties*, %"class.std::__1::__compressed_pair.60" }
%struct.VkExtensionProperties = type { [256 x i8], i32 }
%"class.std::__1::__compressed_pair.60" = type { %"struct.std::__1::__compressed_pair_elem.61" }
%"struct.std::__1::__compressed_pair_elem.61" = type { %struct.VkExtensionProperties* }
%"class.std::__1::vector.65" = type { %"class.std::__1::__vector_base.66" }
%"class.std::__1::__vector_base.66" = type { i8**, i8**, %"class.std::__1::__compressed_pair.67" }
%"class.std::__1::__compressed_pair.67" = type { %"struct.std::__1::__compressed_pair_elem.68" }
%"struct.std::__1::__compressed_pair_elem.68" = type { i8** }
%"class.std::__1::vector.72" = type { %"class.std::__1::__vector_base.73" }
%"class.std::__1::__vector_base.73" = type { %struct.VkLayerProperties*, %struct.VkLayerProperties*, %"class.std::__1::__compressed_pair.74" }
%struct.VkLayerProperties = type { [256 x i8], i32, i32, [256 x i8] }
%"class.std::__1::__compressed_pair.74" = type { %"struct.std::__1::__compressed_pair_elem.75" }
%"struct.std::__1::__compressed_pair_elem.75" = type { %struct.VkLayerProperties* }
%"class.std::__1::vector.79" = type { %"class.std::__1::__vector_base.80" }
%"class.std::__1::__vector_base.80" = type { %"class.gpu::VulkanPhysicalDeviceInfo"*, %"class.gpu::VulkanPhysicalDeviceInfo"*, %"class.std::__1::__compressed_pair.88" }
%"class.gpu::VulkanPhysicalDeviceInfo" = type { %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties, %struct.VkPhysicalDeviceDriverProperties, %"class.std::__1::vector.58", %struct.VkPhysicalDeviceFeatures, i8, i8, %"class.std::__1::vector.81" }
%"class.std::__1::vector.81" = type { %"class.std::__1::__vector_base.82" }
%"class.std::__1::__vector_base.82" = type { %struct.VkQueueFamilyProperties*, %struct.VkQueueFamilyProperties*, %"class.std::__1::__compressed_pair.83" }
%struct.VkQueueFamilyProperties = type { i32, i32, i32, %struct.VkExtent3D }
%struct.VkExtent3D = type { i32, i32, i32 }
%"class.std::__1::__compressed_pair.83" = type { %"struct.std::__1::__compressed_pair_elem.84" }
%"struct.std::__1::__compressed_pair_elem.84" = type { %struct.VkQueueFamilyProperties* }
%"class.std::__1::__compressed_pair.88" = type { %"struct.std::__1::__compressed_pair_elem.89" }
%"struct.std::__1::__compressed_pair_elem.89" = type { %"class.gpu::VulkanPhysicalDeviceInfo"* }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.93 }
%class.scoped_refptr.93 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.94", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.94" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%struct.VkDeviceQueueCreateInfo = type { i32, i8*, i32, i32, i32, float* }
%struct.VkDeviceCreateInfo = type { i32, i8*, i32, i32, %struct.VkDeviceQueueCreateInfo*, i32, i8**, i32, i8**, %struct.VkPhysicalDeviceFeatures* }
%"struct.std::__1::less" = type { i8 }
%struct.VkDeviceQueueInfo2 = type { i32, i8*, i32, i32, i32 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"struct.gpu::VulkanFunctionPointers" = type { i8*, %"class.gpu::VulkanFunctionPointers::VulkanFunction", %"class.gpu::VulkanFunctionPointers::VulkanFunction.107", %"class.gpu::VulkanFunctionPointers::VulkanFunction.108", %"class.gpu::VulkanFunctionPointers::VulkanFunction.109", %"class.gpu::VulkanFunctionPointers::VulkanFunction.110", %"class.gpu::VulkanFunctionPointers::VulkanFunction.111", %"class.gpu::VulkanFunctionPointers::VulkanFunction.112", %"class.gpu::VulkanFunctionPointers::VulkanFunction.113", %"class.gpu::VulkanFunctionPointers::VulkanFunction.114", %"class.gpu::VulkanFunctionPointers::VulkanFunction.115", %"class.gpu::VulkanFunctionPointers::VulkanFunction.116", %"class.gpu::VulkanFunctionPointers::VulkanFunction.117", %"class.gpu::VulkanFunctionPointers::VulkanFunction.118", %"class.gpu::VulkanFunctionPointers::VulkanFunction.119", %"class.gpu::VulkanFunctionPointers::VulkanFunction.120", %"class.gpu::VulkanFunctionPointers::VulkanFunction.121", %"class.gpu::VulkanFunctionPointers::VulkanFunction.122", %"class.gpu::VulkanFunctionPointers::VulkanFunction.123", %"class.gpu::VulkanFunctionPointers::VulkanFunction.124", %"class.gpu::VulkanFunctionPointers::VulkanFunction.125", %"class.gpu::VulkanFunctionPointers::VulkanFunction.126", %"class.gpu::VulkanFunctionPointers::VulkanFunction.127", %"class.gpu::VulkanFunctionPointers::VulkanFunction.128", %"class.gpu::VulkanFunctionPointers::VulkanFunction.129", %"class.gpu::VulkanFunctionPointers::VulkanFunction.130", %"class.gpu::VulkanFunctionPointers::VulkanFunction.131", %"class.gpu::VulkanFunctionPointers::VulkanFunction.132", %"class.gpu::VulkanFunctionPointers::VulkanFunction.133", %"class.gpu::VulkanFunctionPointers::VulkanFunction.134", %"class.gpu::VulkanFunctionPointers::VulkanFunction.135", %"class.gpu::VulkanFunctionPointers::VulkanFunction.136", %"class.gpu::VulkanFunctionPointers::VulkanFunction.137", %"class.gpu::VulkanFunctionPointers::VulkanFunction.138", %"class.gpu::VulkanFunctionPointers::VulkanFunction.139", %"class.gpu::VulkanFunctionPointers::VulkanFunction.140", %"class.gpu::VulkanFunctionPointers::VulkanFunction.141", %"class.gpu::VulkanFunctionPointers::VulkanFunction.142", %"class.gpu::VulkanFunctionPointers::VulkanFunction.143", %"class.gpu::VulkanFunctionPointers::VulkanFunction.144", %"class.gpu::VulkanFunctionPointers::VulkanFunction.145", %"class.gpu::VulkanFunctionPointers::VulkanFunction.146", %"class.gpu::VulkanFunctionPointers::VulkanFunction.147", %"class.gpu::VulkanFunctionPointers::VulkanFunction.148", %"class.gpu::VulkanFunctionPointers::VulkanFunction.149", %"class.gpu::VulkanFunctionPointers::VulkanFunction.150", %"class.gpu::VulkanFunctionPointers::VulkanFunction.151", %"class.gpu::VulkanFunctionPointers::VulkanFunction.152", %"class.gpu::VulkanFunctionPointers::VulkanFunction.153", %"class.gpu::VulkanFunctionPointers::VulkanFunction.154", %"class.gpu::VulkanFunctionPointers::VulkanFunction.155", %"class.gpu::VulkanFunctionPointers::VulkanFunction.156", %"class.gpu::VulkanFunctionPointers::VulkanFunction.157", %"class.gpu::VulkanFunctionPointers::VulkanFunction.158", %"class.gpu::VulkanFunctionPointers::VulkanFunction.159", %"class.gpu::VulkanFunctionPointers::VulkanFunction.160", %"class.gpu::VulkanFunctionPointers::VulkanFunction.161", %"class.gpu::VulkanFunctionPointers::VulkanFunction.162", %"class.gpu::VulkanFunctionPointers::VulkanFunction.163", %"class.gpu::VulkanFunctionPointers::VulkanFunction.164", %"class.gpu::VulkanFunctionPointers::VulkanFunction.165", %"class.gpu::VulkanFunctionPointers::VulkanFunction.166", %"class.gpu::VulkanFunctionPointers::VulkanFunction.167", %"class.gpu::VulkanFunctionPointers::VulkanFunction.168", %"class.gpu::VulkanFunctionPointers::VulkanFunction.169", %"class.gpu::VulkanFunctionPointers::VulkanFunction.170", %"class.gpu::VulkanFunctionPointers::VulkanFunction.171", %"class.gpu::VulkanFunctionPointers::VulkanFunction.172", %"class.gpu::VulkanFunctionPointers::VulkanFunction.173", %"class.gpu::VulkanFunctionPointers::VulkanFunction.174", %"class.gpu::VulkanFunctionPointers::VulkanFunction.175", %"class.gpu::VulkanFunctionPointers::VulkanFunction.176", %"class.gpu::VulkanFunctionPointers::VulkanFunction.177", %"class.gpu::VulkanFunctionPointers::VulkanFunction.178", %"class.gpu::VulkanFunctionPointers::VulkanFunction.174", %"class.gpu::VulkanFunctionPointers::VulkanFunction.179", %"class.gpu::VulkanFunctionPointers::VulkanFunction.180", %"class.gpu::VulkanFunctionPointers::VulkanFunction.181", %"class.gpu::VulkanFunctionPointers::VulkanFunction.182", %"class.gpu::VulkanFunctionPointers::VulkanFunction.183", %"class.gpu::VulkanFunctionPointers::VulkanFunction.184", %"class.gpu::VulkanFunctionPointers::VulkanFunction.185", %"class.gpu::VulkanFunctionPointers::VulkanFunction.186", %"class.gpu::VulkanFunctionPointers::VulkanFunction.187", %"class.gpu::VulkanFunctionPointers::VulkanFunction.188", %"class.gpu::VulkanFunctionPointers::VulkanFunction.189", %"class.gpu::VulkanFunctionPointers::VulkanFunction.190", %"class.gpu::VulkanFunctionPointers::VulkanFunction.191", %"class.gpu::VulkanFunctionPointers::VulkanFunction.192", %"class.gpu::VulkanFunctionPointers::VulkanFunction.193", %"class.gpu::VulkanFunctionPointers::VulkanFunction.194", %"class.gpu::VulkanFunctionPointers::VulkanFunction.195", %"class.gpu::VulkanFunctionPointers::VulkanFunction.196", %"class.gpu::VulkanFunctionPointers::VulkanFunction.197", %"class.gpu::VulkanFunctionPointers::VulkanFunction.198", %"class.gpu::VulkanFunctionPointers::VulkanFunction.199", %"class.gpu::VulkanFunctionPointers::VulkanFunction.200", %"class.gpu::VulkanFunctionPointers::VulkanFunction.201", %"class.gpu::VulkanFunctionPointers::VulkanFunction.202", %"class.gpu::VulkanFunctionPointers::VulkanFunction.203", %"class.gpu::VulkanFunctionPointers::VulkanFunction.204" }
%"class.gpu::VulkanFunctionPointers::VulkanFunction" = type { void ()* (%struct.VkInstance_T*, i8*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.107" = type { i32 (i32*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.108" = type { i32 (%struct.VkInstanceCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkInstance_T**)* }
%struct.VkInstanceCreateInfo = type { i32, i8*, i32, %struct.VkApplicationInfo*, i32, i8**, i32, i8** }
%struct.VkApplicationInfo = type { i32, i8*, i8*, i32, i8*, i32, i32 }
%struct.VkAllocationCallbacks = type { i8*, i8* (i8*, i64, i64, i32)*, i8* (i8*, i8*, i64, i64, i32)*, void (i8*, i8*)*, void (i8*, i64, i32, i32)*, void (i8*, i64, i32, i32)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.109" = type { i32 (i8*, i32*, %struct.VkExtensionProperties*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.110" = type { i32 (i32*, %struct.VkLayerProperties*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.111" = type { i32 (%struct.VkPhysicalDevice_T*, %struct.VkDeviceCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDevice_T**)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.112" = type { void (%struct.VkInstance_T*, %struct.VkAllocationCallbacks*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.113" = type { i32 (%struct.VkPhysicalDevice_T*, i8*, i32*, %struct.VkExtensionProperties*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.114" = type { i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkLayerProperties*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.115" = type { i32 (%struct.VkInstance_T*, i32*, %struct.VkPhysicalDevice_T**)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.116" = type { void ()* (%struct.VkDevice_T*, i8*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.117" = type { void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceFeatures2*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.118" = type { void (%struct.VkPhysicalDevice_T*, i32, %struct.VkFormatProperties*)* }
%struct.VkFormatProperties = type { i32, i32, i32 }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.119" = type { void (%struct.VkPhysicalDevice_T*, i32, %struct.VkFormatProperties2*)* }
%struct.VkFormatProperties2 = type { i32, i8*, %struct.VkFormatProperties }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.120" = type { i32 (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceImageFormatInfo2*, %struct.VkImageFormatProperties2*)* }
%struct.VkPhysicalDeviceImageFormatInfo2 = type { i32, i8*, i32, i32, i32, i32, i32 }
%struct.VkImageFormatProperties2 = type { i32, i8*, %struct.VkImageFormatProperties }
%struct.VkImageFormatProperties = type { %struct.VkExtent3D, i32, i32, i32, i64 }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.121" = type { void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties*)* }
%struct.VkPhysicalDeviceMemoryProperties = type { i32, [32 x %struct.VkMemoryType], i32, [16 x %struct.VkMemoryHeap] }
%struct.VkMemoryType = type { i32, i32 }
%struct.VkMemoryHeap = type { i64, i32 }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.122" = type { void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties2*)* }
%struct.VkPhysicalDeviceMemoryProperties2 = type { i32, i8*, %struct.VkPhysicalDeviceMemoryProperties }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.123" = type { void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.124" = type { void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties2*)* }
%struct.VkPhysicalDeviceProperties2 = type { i32, i8*, %struct.VkPhysicalDeviceProperties }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.125" = type { void (%struct.VkPhysicalDevice_T*, i32*, %struct.VkQueueFamilyProperties*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.126" = type { void (%struct.VkInstance_T*, %struct.VkSurfaceKHR_T*, %struct.VkAllocationCallbacks*)* }
%struct.VkSurfaceKHR_T = type opaque
%"class.gpu::VulkanFunctionPointers::VulkanFunction.127" = type { i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, %struct.VkSurfaceCapabilitiesKHR*)* }
%struct.VkSurfaceCapabilitiesKHR = type { i32, i32, %struct.VkExtent2D, %struct.VkExtent2D, %struct.VkExtent2D, i32, i32, i32, i32, i32 }
%struct.VkExtent2D = type { i32, i32 }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.128" = type { i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, i32*, %struct.VkSurfaceFormatKHR*)* }
%struct.VkSurfaceFormatKHR = type { i32, i32 }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.129" = type { i32 (%struct.VkPhysicalDevice_T*, i32, %struct.VkSurfaceKHR_T*, i32*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.130" = type { i32 (%struct.VkInstance_T*, %struct.VkXcbSurfaceCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSurfaceKHR_T**)* }
%struct.VkXcbSurfaceCreateInfoKHR = type { i32, i8*, i32, %struct.xcb_connection_t*, i32 }
%struct.xcb_connection_t = type opaque
%"class.gpu::VulkanFunctionPointers::VulkanFunction.131" = type { i32 (%struct.VkPhysicalDevice_T*, i32, %struct.xcb_connection_t*, i32)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.132" = type { i32 (%struct.VkDevice_T*, %struct.VkCommandBufferAllocateInfo*, %struct.VkCommandBuffer_T**)* }
%struct.VkCommandBufferAllocateInfo = type { i32, i8*, %struct.VkCommandPool_T*, i32, i32 }
%struct.VkCommandPool_T = type opaque
%struct.VkCommandBuffer_T = type opaque
%"class.gpu::VulkanFunctionPointers::VulkanFunction.133" = type { i32 (%struct.VkDevice_T*, %struct.VkDescriptorSetAllocateInfo*, %struct.VkDescriptorSet_T**)* }
%struct.VkDescriptorSetAllocateInfo = type { i32, i8*, %struct.VkDescriptorPool_T*, i32, %struct.VkDescriptorSetLayout_T** }
%struct.VkDescriptorPool_T = type opaque
%struct.VkDescriptorSetLayout_T = type opaque
%struct.VkDescriptorSet_T = type opaque
%"class.gpu::VulkanFunctionPointers::VulkanFunction.134" = type { i32 (%struct.VkDevice_T*, %struct.VkMemoryAllocateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDeviceMemory_T**)* }
%struct.VkMemoryAllocateInfo = type { i32, i8*, i64, i32 }
%struct.VkDeviceMemory_T = type opaque
%"class.gpu::VulkanFunctionPointers::VulkanFunction.135" = type { i32 (%struct.VkCommandBuffer_T*, %struct.VkCommandBufferBeginInfo*)* }
%struct.VkCommandBufferBeginInfo = type { i32, i8*, i32, %struct.VkCommandBufferInheritanceInfo* }
%struct.VkCommandBufferInheritanceInfo = type { i32, i8*, %struct.VkRenderPass_T*, i32, %struct.VkFramebuffer_T*, i32, i32, i32 }
%struct.VkRenderPass_T = type opaque
%struct.VkFramebuffer_T = type opaque
%"class.gpu::VulkanFunctionPointers::VulkanFunction.136" = type { i32 (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkDeviceMemory_T*, i64)* }
%struct.VkBuffer_T = type opaque
%"class.gpu::VulkanFunctionPointers::VulkanFunction.137" = type { i32 (%struct.VkDevice_T*, i32, %struct.VkBindBufferMemoryInfo*)* }
%struct.VkBindBufferMemoryInfo = type { i32, i8*, %struct.VkBuffer_T*, %struct.VkDeviceMemory_T*, i64 }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.138" = type { i32 (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkDeviceMemory_T*, i64)* }
%struct.VkImage_T = type opaque
%"class.gpu::VulkanFunctionPointers::VulkanFunction.139" = type { i32 (%struct.VkDevice_T*, i32, %struct.VkBindImageMemoryInfo*)* }
%struct.VkBindImageMemoryInfo = type { i32, i8*, %struct.VkImage_T*, %struct.VkDeviceMemory_T*, i64 }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.140" = type { void (%struct.VkCommandBuffer_T*, %struct.VkRenderPassBeginInfo*, i32)* }
%struct.VkRenderPassBeginInfo = type { i32, i8*, %struct.VkRenderPass_T*, %struct.VkFramebuffer_T*, %struct.VkRect2D, i32, %union.VkClearValue* }
%struct.VkRect2D = type { %struct.VkOffset2D, %struct.VkExtent2D }
%struct.VkOffset2D = type { i32, i32 }
%union.VkClearValue = type { %union.VkClearColorValue }
%union.VkClearColorValue = type { [4 x float] }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.141" = type { void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, %struct.VkBuffer_T*, i32, %struct.VkBufferCopy*)* }
%struct.VkBufferCopy = type { i64, i64, i64 }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.142" = type { void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, %struct.VkImage_T*, i32, i32, %struct.VkBufferImageCopy*)* }
%struct.VkBufferImageCopy = type { i64, i32, i32, %struct.VkImageSubresourceLayers, %struct.VkOffset3D, %struct.VkExtent3D }
%struct.VkImageSubresourceLayers = type { i32, i32, i32, i32 }
%struct.VkOffset3D = type { i32, i32, i32 }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.143" = type { void (%struct.VkCommandBuffer_T*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.144" = type { void (%struct.VkCommandBuffer_T*, i32, %struct.VkCommandBuffer_T**)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.145" = type { void (%struct.VkCommandBuffer_T*, i32)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.146" = type { void (%struct.VkCommandBuffer_T*, i32, i32, i32, i32, %struct.VkMemoryBarrier*, i32, %struct.VkBufferMemoryBarrier*, i32, %struct.VkImageMemoryBarrier*)* }
%struct.VkMemoryBarrier = type { i32, i8*, i32, i32 }
%struct.VkBufferMemoryBarrier = type { i32, i8*, i32, i32, i32, i32, %struct.VkBuffer_T*, i64, i64 }
%struct.VkImageMemoryBarrier = type { i32, i8*, i32, i32, i32, i32, i32, i32, %struct.VkImage_T*, %struct.VkImageSubresourceRange }
%struct.VkImageSubresourceRange = type { i32, i32, i32, i32, i32 }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.147" = type { i32 (%struct.VkDevice_T*, %struct.VkBufferCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkBuffer_T**)* }
%struct.VkBufferCreateInfo = type { i32, i8*, i32, i64, i32, i32, i32, i32* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.148" = type { i32 (%struct.VkDevice_T*, %struct.VkCommandPoolCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkCommandPool_T**)* }
%struct.VkCommandPoolCreateInfo = type { i32, i8*, i32, i32 }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.149" = type { i32 (%struct.VkDevice_T*, %struct.VkDescriptorPoolCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDescriptorPool_T**)* }
%struct.VkDescriptorPoolCreateInfo = type { i32, i8*, i32, i32, i32, %struct.VkDescriptorPoolSize* }
%struct.VkDescriptorPoolSize = type { i32, i32 }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.150" = type { i32 (%struct.VkDevice_T*, %struct.VkDescriptorSetLayoutCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDescriptorSetLayout_T**)* }
%struct.VkDescriptorSetLayoutCreateInfo = type { i32, i8*, i32, i32, %struct.VkDescriptorSetLayoutBinding* }
%struct.VkDescriptorSetLayoutBinding = type { i32, i32, i32, i32, %struct.VkSampler_T** }
%struct.VkSampler_T = type opaque
%"class.gpu::VulkanFunctionPointers::VulkanFunction.151" = type { i32 (%struct.VkDevice_T*, %struct.VkFenceCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkFence_T**)* }
%struct.VkFenceCreateInfo = type { i32, i8*, i32 }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.152" = type { i32 (%struct.VkDevice_T*, %struct.VkFramebufferCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkFramebuffer_T**)* }
%struct.VkFramebufferCreateInfo = type { i32, i8*, i32, %struct.VkRenderPass_T*, i32, %struct.VkImageView_T**, i32, i32, i32 }
%struct.VkImageView_T = type opaque
%"class.gpu::VulkanFunctionPointers::VulkanFunction.153" = type { i32 (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, i32, %struct.VkGraphicsPipelineCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkPipeline_T**)* }
%struct.VkPipelineCache_T = type opaque
%struct.VkGraphicsPipelineCreateInfo = type { i32, i8*, i32, i32, %struct.VkPipelineShaderStageCreateInfo*, %struct.VkPipelineVertexInputStateCreateInfo*, %struct.VkPipelineInputAssemblyStateCreateInfo*, %struct.VkPipelineTessellationStateCreateInfo*, %struct.VkPipelineViewportStateCreateInfo*, %struct.VkPipelineRasterizationStateCreateInfo*, %struct.VkPipelineMultisampleStateCreateInfo*, %struct.VkPipelineDepthStencilStateCreateInfo*, %struct.VkPipelineColorBlendStateCreateInfo*, %struct.VkPipelineDynamicStateCreateInfo*, %struct.VkPipelineLayout_T*, %struct.VkRenderPass_T*, i32, %struct.VkPipeline_T*, i32 }
%struct.VkPipelineShaderStageCreateInfo = type { i32, i8*, i32, i32, %struct.VkShaderModule_T*, i8*, %struct.VkSpecializationInfo* }
%struct.VkShaderModule_T = type opaque
%struct.VkSpecializationInfo = type { i32, %struct.VkSpecializationMapEntry*, i64, i8* }
%struct.VkSpecializationMapEntry = type { i32, i32, i64 }
%struct.VkPipelineVertexInputStateCreateInfo = type { i32, i8*, i32, i32, %struct.VkVertexInputBindingDescription*, i32, %struct.VkVertexInputAttributeDescription* }
%struct.VkVertexInputBindingDescription = type { i32, i32, i32 }
%struct.VkVertexInputAttributeDescription = type { i32, i32, i32, i32 }
%struct.VkPipelineInputAssemblyStateCreateInfo = type { i32, i8*, i32, i32, i32 }
%struct.VkPipelineTessellationStateCreateInfo = type { i32, i8*, i32, i32 }
%struct.VkPipelineViewportStateCreateInfo = type { i32, i8*, i32, i32, %struct.VkViewport*, i32, %struct.VkRect2D* }
%struct.VkViewport = type { float, float, float, float, float, float }
%struct.VkPipelineRasterizationStateCreateInfo = type { i32, i8*, i32, i32, i32, i32, i32, i32, i32, float, float, float, float }
%struct.VkPipelineMultisampleStateCreateInfo = type { i32, i8*, i32, i32, i32, float, i32*, i32, i32 }
%struct.VkPipelineDepthStencilStateCreateInfo = type { i32, i8*, i32, i32, i32, i32, i32, i32, %struct.VkStencilOpState, %struct.VkStencilOpState, float, float }
%struct.VkStencilOpState = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.VkPipelineColorBlendStateCreateInfo = type { i32, i8*, i32, i32, i32, i32, %struct.VkPipelineColorBlendAttachmentState*, [4 x float] }
%struct.VkPipelineColorBlendAttachmentState = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VkPipelineDynamicStateCreateInfo = type { i32, i8*, i32, i32, i32* }
%struct.VkPipelineLayout_T = type opaque
%struct.VkPipeline_T = type opaque
%"class.gpu::VulkanFunctionPointers::VulkanFunction.154" = type { i32 (%struct.VkDevice_T*, %struct.VkImageCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkImage_T**)* }
%struct.VkImageCreateInfo = type { i32, i8*, i32, i32, i32, %struct.VkExtent3D, i32, i32, i32, i32, i32, i32, i32, i32*, i32 }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.155" = type { i32 (%struct.VkDevice_T*, %struct.VkImageViewCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkImageView_T**)* }
%struct.VkImageViewCreateInfo = type { i32, i8*, i32, %struct.VkImage_T*, i32, i32, %struct.VkComponentMapping, %struct.VkImageSubresourceRange }
%struct.VkComponentMapping = type { i32, i32, i32, i32 }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.156" = type { i32 (%struct.VkDevice_T*, %struct.VkRenderPassCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkRenderPass_T**)* }
%struct.VkRenderPassCreateInfo = type { i32, i8*, i32, i32, %struct.VkAttachmentDescription*, i32, %struct.VkSubpassDescription*, i32, %struct.VkSubpassDependency* }
%struct.VkAttachmentDescription = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VkSubpassDescription = type { i32, i32, i32, %struct.VkAttachmentReference*, i32, %struct.VkAttachmentReference*, %struct.VkAttachmentReference*, %struct.VkAttachmentReference*, i32, i32* }
%struct.VkAttachmentReference = type { i32, i32 }
%struct.VkSubpassDependency = type { i32, i32, i32, i32, i32, i32, i32 }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.157" = type { i32 (%struct.VkDevice_T*, %struct.VkSamplerCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkSampler_T**)* }
%struct.VkSamplerCreateInfo = type { i32, i8*, i32, i32, i32, i32, i32, i32, i32, float, i32, float, i32, i32, float, float, i32, i32 }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.158" = type { i32 (%struct.VkDevice_T*, %struct.VkSemaphoreCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkSemaphore_T**)* }
%struct.VkSemaphoreCreateInfo = type { i32, i8*, i32 }
%struct.VkSemaphore_T = type opaque
%"class.gpu::VulkanFunctionPointers::VulkanFunction.159" = type { i32 (%struct.VkDevice_T*, %struct.VkShaderModuleCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkShaderModule_T**)* }
%struct.VkShaderModuleCreateInfo = type { i32, i8*, i32, i64, i32* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.160" = type { void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkAllocationCallbacks*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.161" = type { void (%struct.VkDevice_T*, %struct.VkCommandPool_T*, %struct.VkAllocationCallbacks*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.162" = type { void (%struct.VkDevice_T*, %struct.VkDescriptorPool_T*, %struct.VkAllocationCallbacks*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.163" = type { void (%struct.VkDevice_T*, %struct.VkDescriptorSetLayout_T*, %struct.VkAllocationCallbacks*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.164" = type { void (%struct.VkDevice_T*, %struct.VkAllocationCallbacks*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.165" = type { void (%struct.VkDevice_T*, %struct.VkFence_T*, %struct.VkAllocationCallbacks*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.166" = type { void (%struct.VkDevice_T*, %struct.VkFramebuffer_T*, %struct.VkAllocationCallbacks*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.167" = type { void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkAllocationCallbacks*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.168" = type { void (%struct.VkDevice_T*, %struct.VkImageView_T*, %struct.VkAllocationCallbacks*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.169" = type { void (%struct.VkDevice_T*, %struct.VkRenderPass_T*, %struct.VkAllocationCallbacks*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.170" = type { void (%struct.VkDevice_T*, %struct.VkSampler_T*, %struct.VkAllocationCallbacks*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.171" = type { void (%struct.VkDevice_T*, %struct.VkSemaphore_T*, %struct.VkAllocationCallbacks*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.172" = type { void (%struct.VkDevice_T*, %struct.VkShaderModule_T*, %struct.VkAllocationCallbacks*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.173" = type { i32 (%struct.VkDevice_T*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.175" = type { i32 (%struct.VkCommandBuffer_T*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.176" = type { void (%struct.VkDevice_T*, %struct.VkCommandPool_T*, i32, %struct.VkCommandBuffer_T**)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.177" = type { i32 (%struct.VkDevice_T*, %struct.VkDescriptorPool_T*, i32, %struct.VkDescriptorSet_T**)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.178" = type { void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, %struct.VkAllocationCallbacks*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.174" = type { i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)* }
%struct.VkMappedMemoryRange = type { i32, i8*, %struct.VkDeviceMemory_T*, i64, i64 }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.179" = type { void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkMemoryRequirements*)* }
%struct.VkMemoryRequirements = type { i64, i64, i32 }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.180" = type { void (%struct.VkDevice_T*, %struct.VkBufferMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)* }
%struct.VkBufferMemoryRequirementsInfo2 = type { i32, i8*, %struct.VkBuffer_T* }
%struct.VkMemoryRequirements2 = type { i32, i8*, %struct.VkMemoryRequirements }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.181" = type { void (%struct.VkDevice_T*, i32, i32, %struct.VkQueue_T**)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.182" = type { void (%struct.VkDevice_T*, %struct.VkDeviceQueueInfo2*, %struct.VkQueue_T**)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.183" = type { i32 (%struct.VkDevice_T*, %struct.VkFence_T*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.184" = type { void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkMemoryRequirements*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.185" = type { void (%struct.VkDevice_T*, %struct.VkImageMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)* }
%struct.VkImageMemoryRequirementsInfo2 = type { i32, i8*, %struct.VkImage_T* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.186" = type { void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkImageSubresource*, %struct.VkSubresourceLayout*)* }
%struct.VkImageSubresource = type { i32, i32, i32 }
%struct.VkSubresourceLayout = type { i64, i64, i64, i64, i64 }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.187" = type { i32 (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64, i64, i32, i8**)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.188" = type { i32 (%struct.VkQueue_T*, i32, %struct.VkSubmitInfo*, %struct.VkFence_T*)* }
%struct.VkSubmitInfo = type { i32, i8*, i32, %struct.VkSemaphore_T**, i32*, i32, %struct.VkCommandBuffer_T**, i32, %struct.VkSemaphore_T** }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.189" = type { i32 (%struct.VkQueue_T*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.190" = type { i32 (%struct.VkCommandBuffer_T*, i32)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.191" = type { i32 (%struct.VkDevice_T*, i32, %struct.VkFence_T**)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.192" = type { void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.193" = type { void (%struct.VkDevice_T*, i32, %struct.VkWriteDescriptorSet*, i32, %struct.VkCopyDescriptorSet*)* }
%struct.VkWriteDescriptorSet = type { i32, i8*, %struct.VkDescriptorSet_T*, i32, i32, i32, i32, %struct.VkDescriptorImageInfo*, %struct.VkDescriptorBufferInfo*, %struct.VkBufferView_T** }
%struct.VkDescriptorImageInfo = type { %struct.VkSampler_T*, %struct.VkImageView_T*, i32 }
%struct.VkDescriptorBufferInfo = type { %struct.VkBuffer_T*, i64, i64 }
%struct.VkBufferView_T = type opaque
%struct.VkCopyDescriptorSet = type { i32, i8*, %struct.VkDescriptorSet_T*, i32, i32, %struct.VkDescriptorSet_T*, i32, i32, i32 }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.194" = type { i32 (%struct.VkDevice_T*, i32, %struct.VkFence_T**, i32, i64)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.195" = type { i32 (%struct.VkDevice_T*, %struct.VkSemaphoreGetFdInfoKHR*, i32*)* }
%struct.VkSemaphoreGetFdInfoKHR = type { i32, i8*, %struct.VkSemaphore_T*, i32 }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.196" = type { i32 (%struct.VkDevice_T*, %struct.VkImportSemaphoreFdInfoKHR*)* }
%struct.VkImportSemaphoreFdInfoKHR = type { i32, i8*, %struct.VkSemaphore_T*, i32, i32, i32 }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.197" = type { i32 (%struct.VkDevice_T*, %struct.VkMemoryGetFdInfoKHR*, i32*)* }
%struct.VkMemoryGetFdInfoKHR = type { i32, i8*, %struct.VkDeviceMemory_T*, i32 }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.198" = type { i32 (%struct.VkDevice_T*, i32, i32, %struct.VkMemoryFdPropertiesKHR*)* }
%struct.VkMemoryFdPropertiesKHR = type { i32, i8*, i32 }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.199" = type { i32 (%struct.VkDevice_T*, %struct.VkSwapchainKHR_T*, i64, %struct.VkSemaphore_T*, %struct.VkFence_T*, i32*)* }
%struct.VkSwapchainKHR_T = type opaque
%"class.gpu::VulkanFunctionPointers::VulkanFunction.200" = type { i32 (%struct.VkDevice_T*, %struct.VkSwapchainCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSwapchainKHR_T**)* }
%struct.VkSwapchainCreateInfoKHR = type { i32, i8*, i32, %struct.VkSurfaceKHR_T*, i32, i32, i32, %struct.VkExtent2D, i32, i32, i32, i32, i32*, i32, i32, i32, i32, %struct.VkSwapchainKHR_T* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.201" = type { void (%struct.VkDevice_T*, %struct.VkSwapchainKHR_T*, %struct.VkAllocationCallbacks*)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.202" = type { i32 (%struct.VkDevice_T*, %struct.VkSwapchainKHR_T*, i32*, %struct.VkImage_T**)* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.203" = type { i32 (%struct.VkQueue_T*, %struct.VkPresentInfoKHR*)* }
%struct.VkPresentInfoKHR = type { i32, i8*, i32, %struct.VkSemaphore_T**, i32, %struct.VkSwapchainKHR_T**, i32*, i32* }
%"class.gpu::VulkanFunctionPointers::VulkanFunction.204" = type { i32 (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkImageDrmFormatModifierPropertiesEXT*)* }
%struct.VkImageDrmFormatModifierPropertiesEXT = type { i32, i8*, i64 }
%"class.gpu::VulkanCommandPool" = type <{ %"class.gpu::VulkanDeviceQueue"*, %struct.VkCommandPool_T*, i32, i8, [3 x i8] }>
%"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare" = type { i8 }

$_ZN4base8internal9flat_treeINS_16BasicStringPieceIcNSt3__111char_traitsIcEEEENS_8identityENS3_4lessIvEENS3_6vectorIS6_NS3_9allocatorIS6_EEEEEC2INS3_11__wrap_iterIPPKcEEEET_SL_RKS9_ = comdat any

$_ZN4base8internal9flat_treeINS_16BasicStringPieceIcNSt3__111char_traitsIcEEEENS_8identityENS3_4lessIvEENS3_6vectorIS6_NS3_9allocatorIS6_EEEEE15sort_and_uniqueENS3_11__wrap_iterIPS6_EESH_ = comdat any

$_ZNSt3__16uniqueINS_11__wrap_iterIPN4base16BasicStringPieceIcNS_11char_traitsIcEEEEEENS2_8internal9NotFnImplINS9_9flat_treeIS6_NS2_8identityENS_4lessIvEENS_6vectorIS6_NS_9allocatorIS6_EEEEE13value_compareEEEEET_SM_SM_T0_ = comdat any

$_ZNSt3__113__stable_sortIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_T_NS_15iterator_traitsISL_E15difference_typeEPNSO_10value_typeEl = comdat any

$_ZNSt3__118__stable_sort_moveIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_T_NS_15iterator_traitsISL_E15difference_typeEPNSO_10value_typeE = comdat any

$_ZNSt3__115__inplace_mergeIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_SL_T_NS_15iterator_traitsISL_E15difference_typeESP_PNSO_10value_typeEl = comdat any

$_ZNSt3__121__insertion_sort_moveIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_PNS_15iterator_traitsISL_E10value_typeET_ = comdat any

$_ZNSt3__124__buffered_inplace_mergeIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_SL_T_NS_15iterator_traitsISL_E15difference_typeESP_PNSO_10value_typeE = comdat any

@_ZZN3gpu17VulkanDeviceQueue10InitializeEjPKNS_7GPUInfoERKNS_10VulkanInfoERKNSt3__16vectorIPKcNS7_9allocatorISA_EEEESF_bRKN4base17RepeatingCallbackIFbP18VkPhysicalDevice_TRKNS8_I23VkQueueFamilyPropertiesNSB_ISK_EEEEjEEEjE17kDeviceTypeScores = internal unnamed_addr constant [5 x i32] [i32 0, i32 3, i32 4, i32 2, i32 1], align 16
@_ZN3gpu10crash_keys25vulkan_device_api_versionE = external global %"class.crash_reporter::CrashKeyStringCombined", align 8
@_ZN3gpu10crash_keys28vulkan_device_driver_versionE = external global %"class.crash_reporter::CrashKeyStringCombined", align 8
@.str = private unnamed_addr constant [12 x i8] c"%d.%d.%d.%d\00", align 1
@_ZN3gpu10crash_keys23vulkan_device_vendor_idE = external global %"class.crash_reporter::CrashKeyStringCombined", align 8
@.str.1 = private unnamed_addr constant [7 x i8] c"0x%04x\00", align 1
@_ZN3gpu10crash_keys16vulkan_device_idE = external global %"class.crash_reporter::CrashKeyStringCombined", align 8
@_ZZN3gpu17VulkanDeviceQueue10InitializeEjPKNS_7GPUInfoERKNS_10VulkanInfoERKNSt3__16vectorIPKcNS7_9allocatorISA_EEEESF_bRKN4base17RepeatingCallbackIFbP18VkPhysicalDevice_TRKNS8_I23VkQueueFamilyPropertiesNSB_ISK_EEEEjEEEjE16kDeviceTypeNames = internal unnamed_addr constant [5 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0)], align 16
@.str.2 = private unnamed_addr constant [6 x i8] c"other\00", align 1
@.str.3 = private unnamed_addr constant [11 x i8] c"integrated\00", align 1
@.str.4 = private unnamed_addr constant [9 x i8] c"discrete\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"virtual\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"cpu\00", align 1
@_ZN3gpu10crash_keys18vulkan_device_typeE = external global %"class.crash_reporter::CrashKeyStringCombined", align 8
@_ZN3gpu10crash_keys18vulkan_device_nameE = external global %"class.crash_reporter::CrashKeyStringCombined.101", align 8
@.str.7 = private unnamed_addr constant [34 x i8] c"../../base/strings/string_piece.h\00", align 1
@.str.8 = private unnamed_addr constant [2 x i8] c"s\00", align 1
@_ZSt7nothrow = external global %"struct.std::nothrow_t", align 1

@_ZN3gpu17VulkanDeviceQueueC1EP12VkInstance_T = hidden unnamed_addr alias void (%"class.gpu::VulkanDeviceQueue"*, %struct.VkInstance_T*), void (%"class.gpu::VulkanDeviceQueue"*, %struct.VkInstance_T*)* @_ZN3gpu17VulkanDeviceQueueC2EP12VkInstance_T
@_ZN3gpu17VulkanDeviceQueueD1Ev = hidden unnamed_addr alias void (%"class.gpu::VulkanDeviceQueue"*), void (%"class.gpu::VulkanDeviceQueue"*)* @_ZN3gpu17VulkanDeviceQueueD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gpu17VulkanDeviceQueueC2EP12VkInstance_T(%"class.gpu::VulkanDeviceQueue"* nocapture, %struct.VkInstance_T*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.gpu::VulkanDeviceQueue", %"class.gpu::VulkanDeviceQueue"* %0, i64 0, i32 4
  %4 = getelementptr inbounds %"class.gpu::VulkanDeviceQueue", %"class.gpu::VulkanDeviceQueue"* %0, i64 0, i32 8
  %5 = bitcast %"class.gpu::VulkanDeviceQueue"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 32, i1 false)
  %6 = bitcast %struct.VkDevice_T** %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 28, i1 false)
  store %struct.VkInstance_T* %1, %struct.VkInstance_T** %4, align 8
  %7 = getelementptr inbounds %"class.gpu::VulkanDeviceQueue", %"class.gpu::VulkanDeviceQueue"* %0, i64 0, i32 9
  %8 = getelementptr inbounds %"class.gpu::VulkanDeviceQueue", %"class.gpu::VulkanDeviceQueue"* %0, i64 0, i32 12
  store i8 0, i8* %8, align 8
  %9 = bitcast %struct.VmaAllocator_T** %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gpu17VulkanDeviceQueueD2Ev(%"class.gpu::VulkanDeviceQueue"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.gpu::VulkanDeviceQueue", %"class.gpu::VulkanDeviceQueue"* %0, i64 0, i32 10, i32 0, i32 0, i32 0
  %3 = load %"class.gpu::VulkanFenceHelper"*, %"class.gpu::VulkanFenceHelper"** %2, align 8
  store %"class.gpu::VulkanFenceHelper"* null, %"class.gpu::VulkanFenceHelper"** %2, align 8
  %4 = icmp eq %"class.gpu::VulkanFenceHelper"* %3, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  tail call void @_ZN3gpu17VulkanFenceHelperD1Ev(%"class.gpu::VulkanFenceHelper"* nonnull %3) #12
  %6 = bitcast %"class.gpu::VulkanFenceHelper"* %3 to i8*
  tail call void @_ZdlPv(i8* %6) #13
  br label %7

7:                                                ; preds = %1, %5
  %8 = getelementptr inbounds %"class.gpu::VulkanDeviceQueue", %"class.gpu::VulkanDeviceQueue"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %9 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %8, align 8
  %10 = icmp eq %"class.base::BasicStringPiece"* %9, null
  br i1 %10, label %16, label %11

11:                                               ; preds = %7
  %12 = ptrtoint %"class.base::BasicStringPiece"* %9 to i64
  %13 = getelementptr inbounds %"class.gpu::VulkanDeviceQueue", %"class.gpu::VulkanDeviceQueue"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %14 = bitcast %"class.base::BasicStringPiece"** %13 to i64*
  store i64 %12, i64* %14, align 8
  %15 = bitcast %"class.base::BasicStringPiece"* %9 to i8*
  tail call void @_ZdlPv(i8* %15) #13
  br label %16

16:                                               ; preds = %7, %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3gpu17VulkanDeviceQueue10InitializeEjPKNS_7GPUInfoERKNS_10VulkanInfoERKNSt3__16vectorIPKcNS7_9allocatorISA_EEEESF_bRKN4base17RepeatingCallbackIFbP18VkPhysicalDevice_TRKNS8_I23VkQueueFamilyPropertiesNSB_ISK_EEEEjEEEj(%"class.gpu::VulkanDeviceQueue"*, i32, %"struct.gpu::GPUInfo"* readonly, %"class.gpu::VulkanInfo"* nocapture readonly dereferenceable(104), %"class.std::__1::vector.65"* nocapture readonly dereferenceable(24), %"class.std::__1::vector.65"* nocapture readonly dereferenceable(24), i1 zeroext, %"class.base::RepeatingCallback"* nocapture readonly dereferenceable(8), i32) local_unnamed_addr #0 align 2 {
  %10 = alloca %"class.logging::CheckError", align 8
  %11 = alloca float, align 4
  %12 = alloca %struct.VkDeviceQueueCreateInfo, align 8
  %13 = alloca %"class.std::__1::vector.65", align 8
  %14 = alloca %"class.std::__1::basic_string", align 8
  %15 = alloca %"class.std::__1::basic_string", align 8
  %16 = alloca %"class.std::__1::basic_string", align 8
  %17 = alloca %"class.std::__1::basic_string", align 8
  %18 = alloca %"class.std::__1::basic_string", align 8
  %19 = alloca %struct.VkDeviceCreateInfo, align 8
  %20 = alloca %"class.base::internal::flat_tree", align 16
  %21 = alloca %"struct.std::__1::less", align 1
  %22 = alloca %struct.VkDeviceQueueInfo2, align 8
  %23 = zext i1 %6 to i8
  %24 = getelementptr inbounds %"class.gpu::VulkanDeviceQueue", %"class.gpu::VulkanDeviceQueue"* %0, i64 0, i32 8
  %25 = load %struct.VkInstance_T*, %struct.VkInstance_T** %24, align 8
  %26 = icmp eq %struct.VkInstance_T* %25, null
  br i1 %26, label %701, label %27

27:                                               ; preds = %9
  %28 = and i32 %1, 1
  %29 = getelementptr inbounds %"class.gpu::VulkanInfo", %"class.gpu::VulkanInfo"* %3, i64 0, i32 5
  %30 = getelementptr inbounds %"class.gpu::VulkanInfo", %"class.gpu::VulkanInfo"* %3, i64 0, i32 5, i32 0, i32 1
  %31 = bitcast %"class.gpu::VulkanPhysicalDeviceInfo"** %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = bitcast %"class.std::__1::vector.79"* %29 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = icmp eq i64 %32, %34
  br i1 %35, label %701, label %36

36:                                               ; preds = %27
  %37 = getelementptr inbounds %"class.gpu::VulkanInfo", %"class.gpu::VulkanInfo"* %3, i64 0, i32 1
  %38 = icmp ne %"struct.gpu::GPUInfo"* %2, null
  %39 = getelementptr inbounds %"struct.gpu::GPUInfo", %"struct.gpu::GPUInfo"* %2, i64 0, i32 4, i32 0
  %40 = getelementptr inbounds %"struct.gpu::GPUInfo", %"struct.gpu::GPUInfo"* %2, i64 0, i32 4, i32 1
  %41 = and i32 %1, 2
  %42 = icmp eq i32 %41, 0
  %43 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %7, i64 0, i32 0, i32 0, i32 0, i32 0
  br label %44

44:                                               ; preds = %36, %114
  %45 = phi i64 [ %34, %36 ], [ %120, %114 ]
  %46 = phi i32 [ -1, %36 ], [ %117, %114 ]
  %47 = phi i32 [ -1, %36 ], [ %116, %114 ]
  %48 = phi i32 [ -1, %36 ], [ %115, %114 ]
  %49 = phi i64 [ 0, %36 ], [ %118, %114 ]
  %50 = inttoptr i64 %45 to %"class.gpu::VulkanPhysicalDeviceInfo"*
  %51 = getelementptr inbounds %"class.gpu::VulkanPhysicalDeviceInfo", %"class.gpu::VulkanPhysicalDeviceInfo"* %50, i64 %49, i32 1, i32 0
  %52 = load i32, i32* %51, align 8
  %53 = load i32, i32* %37, align 4
  %54 = icmp ult i32 %52, %53
  br i1 %54, label %114, label %55

55:                                               ; preds = %44
  br i1 %38, label %56, label %66

56:                                               ; preds = %55
  %57 = getelementptr inbounds %"class.gpu::VulkanPhysicalDeviceInfo", %"class.gpu::VulkanPhysicalDeviceInfo"* %50, i64 %49, i32 1, i32 2
  %58 = load i32, i32* %57, align 8
  %59 = load i32, i32* %39, align 8
  %60 = icmp eq i32 %58, %59
  br i1 %60, label %61, label %114

61:                                               ; preds = %56
  %62 = getelementptr inbounds %"class.gpu::VulkanPhysicalDeviceInfo", %"class.gpu::VulkanPhysicalDeviceInfo"* %50, i64 %49, i32 1, i32 3
  %63 = load i32, i32* %62, align 4
  %64 = load i32, i32* %40, align 4
  %65 = icmp eq i32 %63, %64
  br i1 %65, label %66, label %114

66:                                               ; preds = %61, %55
  %67 = getelementptr inbounds %"class.gpu::VulkanPhysicalDeviceInfo", %"class.gpu::VulkanPhysicalDeviceInfo"* %50, i64 %49, i32 1, i32 4
  %68 = load i32, i32* %67, align 8
  %69 = icmp ugt i32 %68, 4
  br i1 %69, label %114, label %70

70:                                               ; preds = %66
  %71 = getelementptr inbounds %"class.gpu::VulkanPhysicalDeviceInfo", %"class.gpu::VulkanPhysicalDeviceInfo"* %50, i64 %49, i32 0
  %72 = getelementptr inbounds %"class.gpu::VulkanPhysicalDeviceInfo", %"class.gpu::VulkanPhysicalDeviceInfo"* %50, i64 %49, i32 7
  %73 = getelementptr inbounds %"class.gpu::VulkanPhysicalDeviceInfo", %"class.gpu::VulkanPhysicalDeviceInfo"* %50, i64 %49, i32 7, i32 0, i32 1
  %74 = bitcast %struct.VkQueueFamilyProperties** %73 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = bitcast %"class.std::__1::vector.81"* %72 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = icmp eq i64 %75, %77
  br i1 %78, label %114, label %79

79:                                               ; preds = %70, %102
  %80 = phi i64 [ %105, %102 ], [ %77, %70 ]
  %81 = phi i64 [ %103, %102 ], [ 0, %70 ]
  %82 = inttoptr i64 %80 to %struct.VkQueueFamilyProperties*
  %83 = getelementptr inbounds %struct.VkQueueFamilyProperties, %struct.VkQueueFamilyProperties* %82, i64 %81, i32 0
  %84 = load i32, i32* %83, align 4
  %85 = and i32 %84, %28
  %86 = icmp eq i32 %85, %28
  br i1 %86, label %87, label %102

87:                                               ; preds = %79
  br i1 %42, label %96, label %88

88:                                               ; preds = %87
  %89 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %71, align 8
  %90 = trunc i64 %81 to i32
  %91 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %43, align 8
  %92 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %91, i64 0, i32 1
  %93 = bitcast void ()** %92 to i1 (%"class.base::internal::BindStateBase"*, %struct.VkPhysicalDevice_T*, %"class.std::__1::vector.81"*, i32)**
  %94 = load i1 (%"class.base::internal::BindStateBase"*, %struct.VkPhysicalDevice_T*, %"class.std::__1::vector.81"*, i32)*, i1 (%"class.base::internal::BindStateBase"*, %struct.VkPhysicalDevice_T*, %"class.std::__1::vector.81"*, i32)** %93, align 8
  %95 = tail call zeroext i1 %94(%"class.base::internal::BindStateBase"* %91, %struct.VkPhysicalDevice_T* %89, %"class.std::__1::vector.81"* dereferenceable(24) %72, i32 %90) #12
  br i1 %95, label %96, label %102

96:                                               ; preds = %87, %88
  %97 = load i32, i32* %67, align 8
  %98 = zext i32 %97 to i64
  %99 = getelementptr inbounds [5 x i32], [5 x i32]* @_ZZN3gpu17VulkanDeviceQueue10InitializeEjPKNS_7GPUInfoERKNS_10VulkanInfoERKNSt3__16vectorIPKcNS7_9allocatorISA_EEEESF_bRKN4base17RepeatingCallbackIFbP18VkPhysicalDevice_TRKNS8_I23VkQueueFamilyPropertiesNSB_ISK_EEEEjEEEjE17kDeviceTypeScores, i64 0, i64 %98
  %100 = load i32, i32* %99, align 4
  %101 = icmp sgt i32 %100, %48
  br i1 %101, label %109, label %102

102:                                              ; preds = %79, %96, %88
  %103 = add nuw i64 %81, 1
  %104 = load i64, i64* %74, align 8
  %105 = load i64, i64* %76, align 8
  %106 = sub i64 %104, %105
  %107 = sdiv exact i64 %106, 24
  %108 = icmp ult i64 %103, %107
  br i1 %108, label %79, label %114

109:                                              ; preds = %96
  br i1 %38, label %124, label %110

110:                                              ; preds = %109
  %111 = trunc i64 %81 to i32
  %112 = trunc i64 %49 to i32
  %113 = icmp eq i32 %97, 2
  br i1 %113, label %127, label %114

114:                                              ; preds = %102, %70, %44, %61, %56, %66, %110
  %115 = phi i32 [ %100, %110 ], [ %48, %66 ], [ %48, %56 ], [ %48, %61 ], [ %48, %44 ], [ %48, %70 ], [ %48, %102 ]
  %116 = phi i32 [ %111, %110 ], [ %47, %66 ], [ %47, %56 ], [ %47, %61 ], [ %47, %44 ], [ %47, %70 ], [ %47, %102 ]
  %117 = phi i32 [ %112, %110 ], [ %46, %66 ], [ %46, %56 ], [ %46, %61 ], [ %46, %44 ], [ %46, %70 ], [ %46, %102 ]
  %118 = add nuw i64 %49, 1
  %119 = load i64, i64* %31, align 8
  %120 = load i64, i64* %33, align 8
  %121 = sub i64 %119, %120
  %122 = sdiv exact i64 %121, 1640
  %123 = icmp ult i64 %118, %122
  br i1 %123, label %44, label %130

124:                                              ; preds = %109
  %125 = trunc i64 %49 to i32
  %126 = trunc i64 %81 to i32
  br label %130

127:                                              ; preds = %110
  %128 = trunc i64 %81 to i32
  %129 = trunc i64 %49 to i32
  br label %130

130:                                              ; preds = %114, %127, %124
  %131 = phi i32 [ %126, %124 ], [ %128, %127 ], [ %116, %114 ]
  %132 = phi i32 [ %125, %124 ], [ %129, %127 ], [ %117, %114 ]
  %133 = icmp eq i32 %132, -1
  br i1 %133, label %701, label %134

134:                                              ; preds = %130
  %135 = sext i32 %132 to i64
  %136 = getelementptr inbounds %"class.std::__1::vector.79", %"class.std::__1::vector.79"* %29, i64 0, i32 0, i32 0
  %137 = load %"class.gpu::VulkanPhysicalDeviceInfo"*, %"class.gpu::VulkanPhysicalDeviceInfo"** %136, align 8
  %138 = getelementptr inbounds %"class.gpu::VulkanPhysicalDeviceInfo", %"class.gpu::VulkanPhysicalDeviceInfo"* %137, i64 %135
  %139 = bitcast %"class.gpu::VulkanPhysicalDeviceInfo"* %138 to i64*
  %140 = load i64, i64* %139, align 8
  %141 = getelementptr inbounds %"class.gpu::VulkanDeviceQueue", %"class.gpu::VulkanDeviceQueue"* %0, i64 0, i32 1
  %142 = bitcast %struct.VkPhysicalDevice_T** %141 to i64*
  store i64 %140, i64* %142, align 8
  %143 = getelementptr inbounds %"class.gpu::VulkanPhysicalDeviceInfo", %"class.gpu::VulkanPhysicalDeviceInfo"* %137, i64 %135, i32 1
  %144 = getelementptr inbounds %"class.gpu::VulkanDeviceQueue", %"class.gpu::VulkanDeviceQueue"* %0, i64 0, i32 2
  %145 = bitcast %struct.VkPhysicalDeviceProperties* %144 to i8*
  %146 = bitcast %struct.VkPhysicalDeviceProperties* %143 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %145, i8* align 8 %146, i64 824, i1 false)
  %147 = getelementptr inbounds %"class.gpu::VulkanPhysicalDeviceInfo", %"class.gpu::VulkanPhysicalDeviceInfo"* %137, i64 %135, i32 2
  %148 = getelementptr inbounds %"class.gpu::VulkanDeviceQueue", %"class.gpu::VulkanDeviceQueue"* %0, i64 0, i32 3
  %149 = bitcast %struct.VkPhysicalDeviceDriverProperties* %148 to i8*
  %150 = bitcast %struct.VkPhysicalDeviceDriverProperties* %147 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %149, i8* align 8 %150, i64 536, i1 false)
  %151 = getelementptr inbounds %"class.gpu::VulkanDeviceQueue", %"class.gpu::VulkanDeviceQueue"* %0, i64 0, i32 7
  store i32 %131, i32* %151, align 8
  %152 = bitcast float* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %152) #12
  store float 0.000000e+00, float* %11, align 4
  %153 = bitcast %struct.VkDeviceQueueCreateInfo* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %153) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %153, i8 0, i64 32, i1 false)
  %154 = getelementptr inbounds %struct.VkDeviceQueueCreateInfo, %struct.VkDeviceQueueCreateInfo* %12, i64 0, i32 0
  store i32 2, i32* %154, align 8
  %155 = getelementptr inbounds %struct.VkDeviceQueueCreateInfo, %struct.VkDeviceQueueCreateInfo* %12, i64 0, i32 3
  store i32 %131, i32* %155, align 4
  %156 = getelementptr inbounds %struct.VkDeviceQueueCreateInfo, %struct.VkDeviceQueueCreateInfo* %12, i64 0, i32 4
  store i32 1, i32* %156, align 8
  %157 = getelementptr inbounds %struct.VkDeviceQueueCreateInfo, %struct.VkDeviceQueueCreateInfo* %12, i64 0, i32 5
  store float* %11, float** %157, align 8
  %158 = zext i1 %6 to i32
  %159 = getelementptr inbounds %struct.VkDeviceQueueCreateInfo, %struct.VkDeviceQueueCreateInfo* %12, i64 0, i32 2
  store i32 %158, i32* %159, align 8
  %160 = bitcast %"class.std::__1::vector.65"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %160) #12
  %161 = getelementptr inbounds %"class.std::__1::vector.65", %"class.std::__1::vector.65"* %13, i64 0, i32 0, i32 0
  %162 = getelementptr inbounds %"class.std::__1::vector.65", %"class.std::__1::vector.65"* %13, i64 0, i32 0, i32 1
  %163 = getelementptr inbounds %"class.std::__1::vector.65", %"class.std::__1::vector.65"* %13, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %160, i8 0, i64 24, i1 false) #12
  %164 = getelementptr inbounds %"class.std::__1::vector.65", %"class.std::__1::vector.65"* %4, i64 0, i32 0, i32 0
  %165 = load i8**, i8*** %164, align 8
  %166 = getelementptr inbounds %"class.std::__1::vector.65", %"class.std::__1::vector.65"* %4, i64 0, i32 0, i32 1
  %167 = load i8**, i8*** %166, align 8
  %168 = icmp eq i8** %165, %167
  br i1 %168, label %250, label %169

169:                                              ; preds = %134
  %170 = getelementptr inbounds %"class.gpu::VulkanPhysicalDeviceInfo", %"class.gpu::VulkanPhysicalDeviceInfo"* %137, i64 %135, i32 3, i32 0, i32 0
  %171 = getelementptr inbounds %"class.gpu::VulkanPhysicalDeviceInfo", %"class.gpu::VulkanPhysicalDeviceInfo"* %137, i64 %135, i32 3, i32 0, i32 1
  %172 = bitcast i8*** %162 to i64*
  %173 = bitcast %"class.std::__1::vector.65"* %13 to i64*
  %174 = bitcast i8*** %163 to i64*
  br label %175

175:                                              ; preds = %169, %247
  %176 = phi i8** [ %165, %169 ], [ %248, %247 ]
  %177 = bitcast i8** %176 to i64*
  %178 = load i64, i64* %177, align 8
  %179 = load %struct.VkExtensionProperties*, %struct.VkExtensionProperties** %170, align 8
  %180 = load %struct.VkExtensionProperties*, %struct.VkExtensionProperties** %171, align 8
  %181 = inttoptr i64 %178 to i8*
  %182 = icmp eq %struct.VkExtensionProperties* %179, %180
  br i1 %182, label %191, label %183

183:                                              ; preds = %175, %188
  %184 = phi %struct.VkExtensionProperties* [ %189, %188 ], [ %179, %175 ]
  %185 = getelementptr inbounds %struct.VkExtensionProperties, %struct.VkExtensionProperties* %184, i64 0, i32 0, i64 0
  %186 = call i32 @strcmp(i8* %181, i8* %185) #14
  %187 = icmp eq i32 %186, 0
  br i1 %187, label %191, label %188

188:                                              ; preds = %183
  %189 = getelementptr inbounds %struct.VkExtensionProperties, %struct.VkExtensionProperties* %184, i64 1
  %190 = icmp eq %struct.VkExtensionProperties* %189, %180
  br i1 %190, label %692, label %183

191:                                              ; preds = %183, %175
  %192 = phi %struct.VkExtensionProperties* [ %179, %175 ], [ %184, %183 ]
  %193 = icmp eq %struct.VkExtensionProperties* %192, %180
  br i1 %193, label %692, label %194

194:                                              ; preds = %191
  %195 = load i8**, i8*** %162, align 8
  %196 = load i8**, i8*** %163, align 8
  %197 = icmp eq i8** %195, %196
  %198 = ptrtoint i8** %196 to i64
  br i1 %197, label %203, label %199

199:                                              ; preds = %194
  %200 = bitcast i8** %195 to i64*
  store i64 %178, i64* %200, align 8
  %201 = getelementptr inbounds i8*, i8** %195, i64 1
  %202 = ptrtoint i8** %201 to i64
  store i64 %202, i64* %172, align 8
  br label %247

203:                                              ; preds = %194
  %204 = ptrtoint i8** %195 to i64
  %205 = load i64, i64* %173, align 8
  %206 = sub i64 %204, %205
  %207 = ashr exact i64 %206, 3
  %208 = add nsw i64 %207, 1
  %209 = icmp ugt i64 %208, 2305843009213693951
  br i1 %209, label %210, label %212

210:                                              ; preds = %203
  %211 = bitcast %"class.std::__1::vector.65"* %13 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %211) #15
  unreachable

212:                                              ; preds = %203
  %213 = sub i64 %198, %205
  %214 = ashr exact i64 %213, 3
  %215 = icmp ult i64 %214, 1152921504606846975
  br i1 %215, label %216, label %224

216:                                              ; preds = %212
  %217 = ashr exact i64 %213, 2
  %218 = icmp ult i64 %217, %208
  %219 = select i1 %218, i64 %208, i64 %217
  %220 = icmp eq i64 %219, 0
  br i1 %220, label %229, label %221

221:                                              ; preds = %216
  %222 = icmp ugt i64 %219, 2305843009213693951
  br i1 %222, label %223, label %224

223:                                              ; preds = %221
  call void @abort() #15
  unreachable

224:                                              ; preds = %221, %212
  %225 = phi i64 [ %219, %221 ], [ 2305843009213693951, %212 ]
  %226 = shl i64 %225, 3
  %227 = call i8* @_Znwm(i64 %226) #13
  %228 = bitcast i8* %227 to i8**
  br label %229

229:                                              ; preds = %224, %216
  %230 = phi i64 [ %225, %224 ], [ 0, %216 ]
  %231 = phi i8* [ %227, %224 ], [ null, %216 ]
  %232 = phi i8** [ %228, %224 ], [ null, %216 ]
  %233 = getelementptr inbounds i8*, i8** %232, i64 %207
  %234 = getelementptr inbounds i8*, i8** %232, i64 %230
  %235 = ptrtoint i8** %234 to i64
  %236 = bitcast i8** %233 to i64*
  store i64 %178, i64* %236, align 8
  %237 = getelementptr inbounds i8*, i8** %233, i64 1
  %238 = ptrtoint i8** %237 to i64
  %239 = ptrtoint i8** %232 to i64
  %240 = icmp sgt i64 %206, 0
  br i1 %240, label %241, label %243

241:                                              ; preds = %229
  %242 = inttoptr i64 %205 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %231, i8* align 8 %242, i64 %206, i1 false) #12
  br label %243

243:                                              ; preds = %241, %229
  store i64 %239, i64* %173, align 8
  store i64 %238, i64* %172, align 8
  store i64 %235, i64* %174, align 8
  %244 = icmp eq i64 %205, 0
  br i1 %244, label %247, label %245

245:                                              ; preds = %243
  %246 = inttoptr i64 %205 to i8*
  call void @_ZdlPv(i8* %246) #13
  br label %247

247:                                              ; preds = %199, %243, %245
  %248 = getelementptr inbounds i8*, i8** %176, i64 1
  %249 = icmp eq i8** %248, %167
  br i1 %249, label %250, label %175

250:                                              ; preds = %247, %134
  %251 = getelementptr inbounds %"class.std::__1::vector.65", %"class.std::__1::vector.65"* %5, i64 0, i32 0, i32 0
  %252 = load i8**, i8*** %251, align 8
  %253 = getelementptr inbounds %"class.std::__1::vector.65", %"class.std::__1::vector.65"* %5, i64 0, i32 0, i32 1
  %254 = load i8**, i8*** %253, align 8
  %255 = icmp eq i8** %252, %254
  br i1 %255, label %262, label %256

256:                                              ; preds = %250
  %257 = getelementptr inbounds %"class.gpu::VulkanPhysicalDeviceInfo", %"class.gpu::VulkanPhysicalDeviceInfo"* %137, i64 %135, i32 3, i32 0, i32 0
  %258 = getelementptr inbounds %"class.gpu::VulkanPhysicalDeviceInfo", %"class.gpu::VulkanPhysicalDeviceInfo"* %137, i64 %135, i32 3, i32 0, i32 1
  %259 = bitcast i8*** %162 to i64*
  %260 = bitcast %"class.std::__1::vector.65"* %13 to i64*
  %261 = bitcast i8*** %163 to i64*
  br label %296

262:                                              ; preds = %368, %250
  %263 = bitcast %"class.std::__1::basic_string"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %263) #12
  %264 = getelementptr inbounds %struct.VkPhysicalDeviceProperties, %struct.VkPhysicalDeviceProperties* %144, i64 0, i32 0
  %265 = load i32, i32* %264, align 8
  call void @_ZN3gpu17VkVersionToStringEj(%"class.std::__1::basic_string"* nonnull sret %14, i32 %265) #12
  %266 = bitcast %"class.std::__1::basic_string"* %14 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %267 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %266, i64 0, i32 1, i32 0
  %268 = load i8, i8* %267, align 1
  %269 = icmp slt i8 %268, 0
  %270 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %14, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %271 = load i8*, i8** %270, align 8
  %272 = select i1 %269, i8* %271, i8* %263
  %273 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %14, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %274 = load i64, i64* %273, align 8
  %275 = zext i8 %268 to i64
  %276 = select i1 %269, i64 %274, i64 %275
  call void @_ZN14crash_reporter8internal18CrashKeyStringImpl3SetEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.crash_reporter::internal::CrashKeyStringImpl"* getelementptr inbounds (%"class.crash_reporter::CrashKeyStringCombined", %"class.crash_reporter::CrashKeyStringCombined"* @_ZN3gpu10crash_keys25vulkan_device_api_versionE, i64 0, i32 1, i32 0), i8* %272, i64 %276) #12
  %277 = call i1 @llvm.is.constant.i64(i64 %276) #12
  %278 = icmp ult i64 %276, 4294967296
  %279 = trunc i64 %276 to i32
  %280 = select i1 %278, i32 %279, i32 -1
  %281 = icmp ult i64 %276, 4294967295
  %282 = select i1 %281, i64 %276, i64 4294967295
  %283 = trunc i64 %282 to i32
  %284 = select i1 %277, i32 %283, i32 %280
  %285 = icmp ult i32 %284, 16
  %286 = select i1 %285, i32 %284, i32 16
  %287 = zext i32 %286 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 getelementptr inbounds (%"class.crash_reporter::CrashKeyStringCombined", %"class.crash_reporter::CrashKeyStringCombined"* @_ZN3gpu10crash_keys25vulkan_device_api_versionE, i64 0, i32 2, i32 1, i64 0), i8* align 1 %272, i64 %287, i1 false) #12
  call void @_ZN8crashpad10Annotation7SetSizeEj(%"class.crashpad::Annotation"* bitcast (%"class.crashpad::StringAnnotation"* getelementptr inbounds (%"class.crash_reporter::CrashKeyStringCombined", %"class.crash_reporter::CrashKeyStringCombined"* @_ZN3gpu10crash_keys25vulkan_device_api_versionE, i64 0, i32 2) to %"class.crashpad::Annotation"*), i32 %286) #12
  %288 = load i8, i8* %267, align 1
  %289 = icmp slt i8 %288, 0
  br i1 %289, label %290, label %292

290:                                              ; preds = %262
  %291 = load i8*, i8** %270, align 8
  call void @_ZdlPv(i8* %291) #13
  br label %292

292:                                              ; preds = %262, %290
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %263) #12
  %293 = getelementptr inbounds %"class.gpu::VulkanDeviceQueue", %"class.gpu::VulkanDeviceQueue"* %0, i64 0, i32 2, i32 2
  %294 = load i32, i32* %293, align 8
  %295 = icmp eq i32 %294, 4318
  br i1 %295, label %371, label %407

296:                                              ; preds = %256, %368
  %297 = phi i8** [ %252, %256 ], [ %369, %368 ]
  %298 = bitcast i8** %297 to i64*
  %299 = load i64, i64* %298, align 8
  %300 = load %struct.VkExtensionProperties*, %struct.VkExtensionProperties** %257, align 8
  %301 = load %struct.VkExtensionProperties*, %struct.VkExtensionProperties** %258, align 8
  %302 = inttoptr i64 %299 to i8*
  %303 = icmp eq %struct.VkExtensionProperties* %300, %301
  br i1 %303, label %312, label %304

304:                                              ; preds = %296, %309
  %305 = phi %struct.VkExtensionProperties* [ %310, %309 ], [ %300, %296 ]
  %306 = getelementptr inbounds %struct.VkExtensionProperties, %struct.VkExtensionProperties* %305, i64 0, i32 0, i64 0
  %307 = call i32 @strcmp(i8* %302, i8* %306) #14
  %308 = icmp eq i32 %307, 0
  br i1 %308, label %312, label %309

309:                                              ; preds = %304
  %310 = getelementptr inbounds %struct.VkExtensionProperties, %struct.VkExtensionProperties* %305, i64 1
  %311 = icmp eq %struct.VkExtensionProperties* %310, %301
  br i1 %311, label %368, label %304

312:                                              ; preds = %304, %296
  %313 = phi %struct.VkExtensionProperties* [ %300, %296 ], [ %305, %304 ]
  %314 = icmp eq %struct.VkExtensionProperties* %313, %301
  br i1 %314, label %368, label %315

315:                                              ; preds = %312
  %316 = load i8**, i8*** %162, align 8
  %317 = load i8**, i8*** %163, align 8
  %318 = icmp eq i8** %316, %317
  %319 = ptrtoint i8** %317 to i64
  br i1 %318, label %324, label %320

320:                                              ; preds = %315
  %321 = bitcast i8** %316 to i64*
  store i64 %299, i64* %321, align 8
  %322 = getelementptr inbounds i8*, i8** %316, i64 1
  %323 = ptrtoint i8** %322 to i64
  store i64 %323, i64* %259, align 8
  br label %368

324:                                              ; preds = %315
  %325 = ptrtoint i8** %316 to i64
  %326 = load i64, i64* %260, align 8
  %327 = sub i64 %325, %326
  %328 = ashr exact i64 %327, 3
  %329 = add nsw i64 %328, 1
  %330 = icmp ugt i64 %329, 2305843009213693951
  br i1 %330, label %331, label %333

331:                                              ; preds = %324
  %332 = bitcast %"class.std::__1::vector.65"* %13 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %332) #15
  unreachable

333:                                              ; preds = %324
  %334 = sub i64 %319, %326
  %335 = ashr exact i64 %334, 3
  %336 = icmp ult i64 %335, 1152921504606846975
  br i1 %336, label %337, label %345

337:                                              ; preds = %333
  %338 = ashr exact i64 %334, 2
  %339 = icmp ult i64 %338, %329
  %340 = select i1 %339, i64 %329, i64 %338
  %341 = icmp eq i64 %340, 0
  br i1 %341, label %350, label %342

342:                                              ; preds = %337
  %343 = icmp ugt i64 %340, 2305843009213693951
  br i1 %343, label %344, label %345

344:                                              ; preds = %342
  call void @abort() #15
  unreachable

345:                                              ; preds = %342, %333
  %346 = phi i64 [ %340, %342 ], [ 2305843009213693951, %333 ]
  %347 = shl i64 %346, 3
  %348 = call i8* @_Znwm(i64 %347) #13
  %349 = bitcast i8* %348 to i8**
  br label %350

350:                                              ; preds = %345, %337
  %351 = phi i64 [ %346, %345 ], [ 0, %337 ]
  %352 = phi i8* [ %348, %345 ], [ null, %337 ]
  %353 = phi i8** [ %349, %345 ], [ null, %337 ]
  %354 = getelementptr inbounds i8*, i8** %353, i64 %328
  %355 = getelementptr inbounds i8*, i8** %353, i64 %351
  %356 = ptrtoint i8** %355 to i64
  %357 = bitcast i8** %354 to i64*
  store i64 %299, i64* %357, align 8
  %358 = getelementptr inbounds i8*, i8** %354, i64 1
  %359 = ptrtoint i8** %358 to i64
  %360 = ptrtoint i8** %353 to i64
  %361 = icmp sgt i64 %327, 0
  br i1 %361, label %362, label %364

362:                                              ; preds = %350
  %363 = inttoptr i64 %326 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %352, i8* align 8 %363, i64 %327, i1 false) #12
  br label %364

364:                                              ; preds = %362, %350
  store i64 %360, i64* %260, align 8
  store i64 %359, i64* %259, align 8
  store i64 %356, i64* %261, align 8
  %365 = icmp eq i64 %326, 0
  br i1 %365, label %368, label %366

366:                                              ; preds = %364
  %367 = inttoptr i64 %326 to i8*
  call void @_ZdlPv(i8* %367) #13
  br label %368

368:                                              ; preds = %309, %366, %364, %320, %312
  %369 = getelementptr inbounds i8*, i8** %297, i64 1
  %370 = icmp eq i8** %369, %254
  br i1 %370, label %262, label %296

371:                                              ; preds = %292
  %372 = getelementptr inbounds %"class.gpu::VulkanDeviceQueue", %"class.gpu::VulkanDeviceQueue"* %0, i64 0, i32 2, i32 1
  %373 = load i32, i32* %372, align 4
  %374 = lshr i32 %373, 22
  %375 = lshr i32 %373, 14
  %376 = and i32 %375, 255
  %377 = lshr i32 %373, 6
  %378 = and i32 %377, 255
  %379 = and i32 %373, 63
  %380 = bitcast %"class.std::__1::basic_string"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %380) #12
  call void (%"class.std::__1::basic_string"*, i8*, ...) @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* nonnull sret %15, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i32 %374, i32 %376, i32 %378, i32 %379) #12
  %381 = bitcast %"class.std::__1::basic_string"* %15 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %382 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %381, i64 0, i32 1, i32 0
  %383 = load i8, i8* %382, align 1
  %384 = icmp slt i8 %383, 0
  %385 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %386 = load i8*, i8** %385, align 8
  %387 = select i1 %384, i8* %386, i8* %380
  %388 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %389 = load i64, i64* %388, align 8
  %390 = zext i8 %383 to i64
  %391 = select i1 %384, i64 %389, i64 %390
  call void @_ZN14crash_reporter8internal18CrashKeyStringImpl3SetEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.crash_reporter::internal::CrashKeyStringImpl"* getelementptr inbounds (%"class.crash_reporter::CrashKeyStringCombined", %"class.crash_reporter::CrashKeyStringCombined"* @_ZN3gpu10crash_keys28vulkan_device_driver_versionE, i64 0, i32 1, i32 0), i8* %387, i64 %391) #12
  %392 = call i1 @llvm.is.constant.i64(i64 %391) #12
  %393 = icmp ult i64 %391, 4294967296
  %394 = trunc i64 %391 to i32
  %395 = select i1 %393, i32 %394, i32 -1
  %396 = icmp ult i64 %391, 4294967295
  %397 = select i1 %396, i64 %391, i64 4294967295
  %398 = trunc i64 %397 to i32
  %399 = select i1 %392, i32 %398, i32 %395
  %400 = icmp ult i32 %399, 16
  %401 = select i1 %400, i32 %399, i32 16
  %402 = zext i32 %401 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 getelementptr inbounds (%"class.crash_reporter::CrashKeyStringCombined", %"class.crash_reporter::CrashKeyStringCombined"* @_ZN3gpu10crash_keys28vulkan_device_driver_versionE, i64 0, i32 2, i32 1, i64 0), i8* align 1 %387, i64 %402, i1 false) #12
  call void @_ZN8crashpad10Annotation7SetSizeEj(%"class.crashpad::Annotation"* bitcast (%"class.crashpad::StringAnnotation"* getelementptr inbounds (%"class.crash_reporter::CrashKeyStringCombined", %"class.crash_reporter::CrashKeyStringCombined"* @_ZN3gpu10crash_keys28vulkan_device_driver_versionE, i64 0, i32 2) to %"class.crashpad::Annotation"*), i32 %401) #12
  %403 = load i8, i8* %382, align 1
  %404 = icmp slt i8 %403, 0
  br i1 %404, label %405, label %437

405:                                              ; preds = %371
  %406 = load i8*, i8** %385, align 8
  call void @_ZdlPv(i8* %406) #13
  br label %437

407:                                              ; preds = %292
  %408 = bitcast %"class.std::__1::basic_string"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %408) #12
  %409 = getelementptr inbounds %"class.gpu::VulkanDeviceQueue", %"class.gpu::VulkanDeviceQueue"* %0, i64 0, i32 2, i32 1
  %410 = load i32, i32* %409, align 4
  call void @_ZN3gpu17VkVersionToStringEj(%"class.std::__1::basic_string"* nonnull sret %16, i32 %410) #12
  %411 = bitcast %"class.std::__1::basic_string"* %16 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %412 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %411, i64 0, i32 1, i32 0
  %413 = load i8, i8* %412, align 1
  %414 = icmp slt i8 %413, 0
  %415 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %416 = load i8*, i8** %415, align 8
  %417 = select i1 %414, i8* %416, i8* %408
  %418 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %419 = load i64, i64* %418, align 8
  %420 = zext i8 %413 to i64
  %421 = select i1 %414, i64 %419, i64 %420
  call void @_ZN14crash_reporter8internal18CrashKeyStringImpl3SetEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.crash_reporter::internal::CrashKeyStringImpl"* getelementptr inbounds (%"class.crash_reporter::CrashKeyStringCombined", %"class.crash_reporter::CrashKeyStringCombined"* @_ZN3gpu10crash_keys28vulkan_device_driver_versionE, i64 0, i32 1, i32 0), i8* %417, i64 %421) #12
  %422 = call i1 @llvm.is.constant.i64(i64 %421) #12
  %423 = icmp ult i64 %421, 4294967296
  %424 = trunc i64 %421 to i32
  %425 = select i1 %423, i32 %424, i32 -1
  %426 = icmp ult i64 %421, 4294967295
  %427 = select i1 %426, i64 %421, i64 4294967295
  %428 = trunc i64 %427 to i32
  %429 = select i1 %422, i32 %428, i32 %425
  %430 = icmp ult i32 %429, 16
  %431 = select i1 %430, i32 %429, i32 16
  %432 = zext i32 %431 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 getelementptr inbounds (%"class.crash_reporter::CrashKeyStringCombined", %"class.crash_reporter::CrashKeyStringCombined"* @_ZN3gpu10crash_keys28vulkan_device_driver_versionE, i64 0, i32 2, i32 1, i64 0), i8* align 1 %417, i64 %432, i1 false) #12
  call void @_ZN8crashpad10Annotation7SetSizeEj(%"class.crashpad::Annotation"* bitcast (%"class.crashpad::StringAnnotation"* getelementptr inbounds (%"class.crash_reporter::CrashKeyStringCombined", %"class.crash_reporter::CrashKeyStringCombined"* @_ZN3gpu10crash_keys28vulkan_device_driver_versionE, i64 0, i32 2) to %"class.crashpad::Annotation"*), i32 %431) #12
  %433 = load i8, i8* %412, align 1
  %434 = icmp slt i8 %433, 0
  br i1 %434, label %435, label %437

435:                                              ; preds = %407
  %436 = load i8*, i8** %415, align 8
  call void @_ZdlPv(i8* %436) #13
  br label %437

437:                                              ; preds = %435, %407, %405, %371
  %438 = phi i8* [ %380, %371 ], [ %380, %405 ], [ %408, %407 ], [ %408, %435 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %438) #12
  %439 = bitcast %"class.std::__1::basic_string"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %439) #12
  %440 = load i32, i32* %293, align 8
  call void (%"class.std::__1::basic_string"*, i8*, ...) @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* nonnull sret %17, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i32 %440) #12
  %441 = bitcast %"class.std::__1::basic_string"* %17 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %442 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %441, i64 0, i32 1, i32 0
  %443 = load i8, i8* %442, align 1
  %444 = icmp slt i8 %443, 0
  %445 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %17, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %446 = load i8*, i8** %445, align 8
  %447 = select i1 %444, i8* %446, i8* %439
  %448 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %17, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %449 = load i64, i64* %448, align 8
  %450 = zext i8 %443 to i64
  %451 = select i1 %444, i64 %449, i64 %450
  call void @_ZN14crash_reporter8internal18CrashKeyStringImpl3SetEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.crash_reporter::internal::CrashKeyStringImpl"* getelementptr inbounds (%"class.crash_reporter::CrashKeyStringCombined", %"class.crash_reporter::CrashKeyStringCombined"* @_ZN3gpu10crash_keys23vulkan_device_vendor_idE, i64 0, i32 1, i32 0), i8* %447, i64 %451) #12
  %452 = call i1 @llvm.is.constant.i64(i64 %451) #12
  %453 = icmp ult i64 %451, 4294967296
  %454 = trunc i64 %451 to i32
  %455 = select i1 %453, i32 %454, i32 -1
  %456 = icmp ult i64 %451, 4294967295
  %457 = select i1 %456, i64 %451, i64 4294967295
  %458 = trunc i64 %457 to i32
  %459 = select i1 %452, i32 %458, i32 %455
  %460 = icmp ult i32 %459, 16
  %461 = select i1 %460, i32 %459, i32 16
  %462 = zext i32 %461 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 getelementptr inbounds (%"class.crash_reporter::CrashKeyStringCombined", %"class.crash_reporter::CrashKeyStringCombined"* @_ZN3gpu10crash_keys23vulkan_device_vendor_idE, i64 0, i32 2, i32 1, i64 0), i8* align 1 %447, i64 %462, i1 false) #12
  call void @_ZN8crashpad10Annotation7SetSizeEj(%"class.crashpad::Annotation"* bitcast (%"class.crashpad::StringAnnotation"* getelementptr inbounds (%"class.crash_reporter::CrashKeyStringCombined", %"class.crash_reporter::CrashKeyStringCombined"* @_ZN3gpu10crash_keys23vulkan_device_vendor_idE, i64 0, i32 2) to %"class.crashpad::Annotation"*), i32 %461) #12
  %463 = load i8, i8* %442, align 1
  %464 = icmp slt i8 %463, 0
  br i1 %464, label %465, label %467

465:                                              ; preds = %437
  %466 = load i8*, i8** %445, align 8
  call void @_ZdlPv(i8* %466) #13
  br label %467

467:                                              ; preds = %437, %465
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %439) #12
  %468 = bitcast %"class.std::__1::basic_string"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %468) #12
  %469 = getelementptr inbounds %"class.gpu::VulkanDeviceQueue", %"class.gpu::VulkanDeviceQueue"* %0, i64 0, i32 2, i32 3
  %470 = load i32, i32* %469, align 4
  call void (%"class.std::__1::basic_string"*, i8*, ...) @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* nonnull sret %18, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i32 %470) #12
  %471 = bitcast %"class.std::__1::basic_string"* %18 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %472 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %471, i64 0, i32 1, i32 0
  %473 = load i8, i8* %472, align 1
  %474 = icmp slt i8 %473, 0
  %475 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %18, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %476 = load i8*, i8** %475, align 8
  %477 = select i1 %474, i8* %476, i8* %468
  %478 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %18, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %479 = load i64, i64* %478, align 8
  %480 = zext i8 %473 to i64
  %481 = select i1 %474, i64 %479, i64 %480
  call void @_ZN14crash_reporter8internal18CrashKeyStringImpl3SetEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.crash_reporter::internal::CrashKeyStringImpl"* getelementptr inbounds (%"class.crash_reporter::CrashKeyStringCombined", %"class.crash_reporter::CrashKeyStringCombined"* @_ZN3gpu10crash_keys16vulkan_device_idE, i64 0, i32 1, i32 0), i8* %477, i64 %481) #12
  %482 = call i1 @llvm.is.constant.i64(i64 %481) #12
  %483 = icmp ult i64 %481, 4294967296
  %484 = trunc i64 %481 to i32
  %485 = select i1 %483, i32 %484, i32 -1
  %486 = icmp ult i64 %481, 4294967295
  %487 = select i1 %486, i64 %481, i64 4294967295
  %488 = trunc i64 %487 to i32
  %489 = select i1 %482, i32 %488, i32 %485
  %490 = icmp ult i32 %489, 16
  %491 = select i1 %490, i32 %489, i32 16
  %492 = zext i32 %491 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 getelementptr inbounds (%"class.crash_reporter::CrashKeyStringCombined", %"class.crash_reporter::CrashKeyStringCombined"* @_ZN3gpu10crash_keys16vulkan_device_idE, i64 0, i32 2, i32 1, i64 0), i8* align 1 %477, i64 %492, i1 false) #12
  call void @_ZN8crashpad10Annotation7SetSizeEj(%"class.crashpad::Annotation"* bitcast (%"class.crashpad::StringAnnotation"* getelementptr inbounds (%"class.crash_reporter::CrashKeyStringCombined", %"class.crash_reporter::CrashKeyStringCombined"* @_ZN3gpu10crash_keys16vulkan_device_idE, i64 0, i32 2) to %"class.crashpad::Annotation"*), i32 %491) #12
  %493 = load i8, i8* %472, align 1
  %494 = icmp slt i8 %493, 0
  br i1 %494, label %495, label %497

495:                                              ; preds = %467
  %496 = load i8*, i8** %475, align 8
  call void @_ZdlPv(i8* %496) #13
  br label %497

497:                                              ; preds = %467, %495
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %468) #12
  %498 = getelementptr inbounds %"class.gpu::VulkanDeviceQueue", %"class.gpu::VulkanDeviceQueue"* %0, i64 0, i32 2, i32 4
  %499 = load i32, i32* %498, align 8
  %500 = icmp ult i32 %499, 5
  %501 = select i1 %500, i32 %499, i32 0
  %502 = zext i32 %501 to i64
  %503 = getelementptr inbounds [5 x i8*], [5 x i8*]* @_ZZN3gpu17VulkanDeviceQueue10InitializeEjPKNS_7GPUInfoERKNS_10VulkanInfoERKNSt3__16vectorIPKcNS7_9allocatorISA_EEEESF_bRKN4base17RepeatingCallbackIFbP18VkPhysicalDevice_TRKNS8_I23VkQueueFamilyPropertiesNSB_ISK_EEEEjEEEjE16kDeviceTypeNames, i64 0, i64 %502
  %504 = load i8*, i8** %503, align 8
  %505 = call i64 @strlen(i8* nonnull %504) #12
  call void @_ZN14crash_reporter8internal18CrashKeyStringImpl3SetEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.crash_reporter::internal::CrashKeyStringImpl"* getelementptr inbounds (%"class.crash_reporter::CrashKeyStringCombined", %"class.crash_reporter::CrashKeyStringCombined"* @_ZN3gpu10crash_keys18vulkan_device_typeE, i64 0, i32 1, i32 0), i8* %504, i64 %505) #12
  %506 = call i1 @llvm.is.constant.i64(i64 %505) #12
  %507 = icmp ult i64 %505, 4294967296
  %508 = trunc i64 %505 to i32
  %509 = icmp ult i64 %505, 4294967295
  %510 = select i1 %507, i32 %508, i32 -1
  %511 = select i1 %509, i64 %505, i64 4294967295
  %512 = trunc i64 %511 to i32
  %513 = select i1 %506, i32 %512, i32 %510
  %514 = icmp ult i32 %513, 16
  %515 = select i1 %514, i32 %513, i32 16
  %516 = zext i32 %515 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 getelementptr inbounds (%"class.crash_reporter::CrashKeyStringCombined", %"class.crash_reporter::CrashKeyStringCombined"* @_ZN3gpu10crash_keys18vulkan_device_typeE, i64 0, i32 2, i32 1, i64 0), i8* align 1 %504, i64 %516, i1 false) #12
  call void @_ZN8crashpad10Annotation7SetSizeEj(%"class.crashpad::Annotation"* bitcast (%"class.crashpad::StringAnnotation"* getelementptr inbounds (%"class.crash_reporter::CrashKeyStringCombined", %"class.crash_reporter::CrashKeyStringCombined"* @_ZN3gpu10crash_keys18vulkan_device_typeE, i64 0, i32 2) to %"class.crashpad::Annotation"*), i32 %515) #12
  %517 = getelementptr inbounds %"class.gpu::VulkanDeviceQueue", %"class.gpu::VulkanDeviceQueue"* %0, i64 0, i32 2, i32 5, i64 0
  %518 = icmp eq i8* %517, null
  br i1 %518, label %521, label %519

519:                                              ; preds = %497
  %520 = call i64 @strlen(i8* nonnull %517) #12
  br label %524

521:                                              ; preds = %497
  %522 = bitcast %"class.logging::CheckError"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %522) #12
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %10, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.7, i64 0, i64 0), i32 125, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i64 0, i64 0)) #12
  %523 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %10) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %10) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %522) #12
  br label %524

524:                                              ; preds = %519, %521
  %525 = phi i64 [ 0, %521 ], [ %520, %519 ]
  call void @_ZN14crash_reporter8internal18CrashKeyStringImpl3SetEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.crash_reporter::internal::CrashKeyStringImpl"* getelementptr inbounds (%"class.crash_reporter::CrashKeyStringCombined.101", %"class.crash_reporter::CrashKeyStringCombined.101"* @_ZN3gpu10crash_keys18vulkan_device_nameE, i64 0, i32 1, i32 0), i8* %517, i64 %525) #12
  %526 = call i1 @llvm.is.constant.i64(i64 %525) #12
  %527 = icmp ult i64 %525, 4294967296
  %528 = trunc i64 %525 to i32
  %529 = icmp ult i64 %525, 4294967295
  %530 = select i1 %527, i32 %528, i32 -1
  %531 = select i1 %529, i64 %525, i64 4294967295
  %532 = trunc i64 %531 to i32
  %533 = select i1 %526, i32 %532, i32 %530
  %534 = icmp ult i32 %533, 256
  %535 = select i1 %534, i32 %533, i32 256
  %536 = zext i32 %535 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 getelementptr inbounds (%"class.crash_reporter::CrashKeyStringCombined.101", %"class.crash_reporter::CrashKeyStringCombined.101"* @_ZN3gpu10crash_keys18vulkan_device_nameE, i64 0, i32 2, i32 1, i64 0), i8* align 1 %517, i64 %536, i1 false) #12
  call void @_ZN8crashpad10Annotation7SetSizeEj(%"class.crashpad::Annotation"* bitcast (%"class.crashpad::StringAnnotation.104"* getelementptr inbounds (%"class.crash_reporter::CrashKeyStringCombined.101", %"class.crash_reporter::CrashKeyStringCombined.101"* @_ZN3gpu10crash_keys18vulkan_device_nameE, i64 0, i32 2) to %"class.crashpad::Annotation"*), i32 %535) #12
  %537 = getelementptr inbounds %"class.gpu::VulkanDeviceQueue", %"class.gpu::VulkanDeviceQueue"* %0, i64 0, i32 11, i32 0
  store i32 1000059000, i32* %537, align 8
  %538 = bitcast %"class.gpu::VulkanDeviceQueue"* %0 to i8*
  %539 = getelementptr inbounds i8, i8* %538, i64 1452
  call void @llvm.memset.p0i8.i64(i8* align 4 %539, i8 0, i64 236, i1 false)
  br i1 %6, label %544, label %540

540:                                              ; preds = %524
  %541 = getelementptr inbounds %"class.gpu::VulkanDeviceQueue", %"class.gpu::VulkanDeviceQueue"* %0, i64 0, i32 11, i32 1
  %542 = bitcast i8** %541 to i64*
  %543 = load i64, i64* %542, align 8
  br label %560

544:                                              ; preds = %524
  %545 = getelementptr inbounds %"class.gpu::VulkanPhysicalDeviceInfo", %"class.gpu::VulkanPhysicalDeviceInfo"* %137, i64 %135, i32 6
  %546 = load i8, i8* %545, align 1, !range !2
  %547 = icmp eq i8 %546, 0
  br i1 %547, label %692, label %548

548:                                              ; preds = %544
  %549 = getelementptr inbounds %"class.gpu::VulkanDeviceQueue", %"class.gpu::VulkanDeviceQueue"* %0, i64 0, i32 13, i32 0
  store i32 1000145001, i32* %549, align 8
  %550 = getelementptr inbounds i8, i8* %538, i64 1700
  call void @llvm.memset.p0i8.i64(i8* align 4 %550, i8 0, i64 20, i1 false)
  %551 = getelementptr inbounds %"class.gpu::VulkanDeviceQueue", %"class.gpu::VulkanDeviceQueue"* %0, i64 0, i32 13
  %552 = getelementptr inbounds %"class.gpu::VulkanDeviceQueue", %"class.gpu::VulkanDeviceQueue"* %0, i64 0, i32 13, i32 2
  store i32 1, i32* %552, align 8
  %553 = getelementptr inbounds %"class.gpu::VulkanDeviceQueue", %"class.gpu::VulkanDeviceQueue"* %0, i64 0, i32 11, i32 1
  %554 = bitcast i8** %553 to i64*
  %555 = load i64, i64* %554, align 8
  %556 = getelementptr inbounds %"class.gpu::VulkanDeviceQueue", %"class.gpu::VulkanDeviceQueue"* %0, i64 0, i32 13, i32 1
  %557 = bitcast i8** %556 to i64*
  store i64 %555, i64* %557, align 8
  %558 = bitcast i8** %553 to %struct.VkPhysicalDeviceProtectedMemoryFeatures**
  store %struct.VkPhysicalDeviceProtectedMemoryFeatures* %551, %struct.VkPhysicalDeviceProtectedMemoryFeatures** %558, align 8
  %559 = ptrtoint %struct.VkPhysicalDeviceProtectedMemoryFeatures* %551 to i64
  br label %560

560:                                              ; preds = %540, %548
  %561 = phi i64 [ %543, %540 ], [ %559, %548 ]
  %562 = bitcast %struct.VkDeviceCreateInfo* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %562) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %562, i8 0, i64 56, i1 false)
  %563 = getelementptr inbounds %struct.VkDeviceCreateInfo, %struct.VkDeviceCreateInfo* %19, i64 0, i32 0
  store i32 3, i32* %563, align 8
  %564 = getelementptr inbounds %struct.VkDeviceCreateInfo, %struct.VkDeviceCreateInfo* %19, i64 0, i32 1
  %565 = bitcast i8** %564 to i64*
  store i64 %561, i64* %565, align 8
  %566 = getelementptr inbounds %struct.VkDeviceCreateInfo, %struct.VkDeviceCreateInfo* %19, i64 0, i32 3
  store i32 1, i32* %566, align 4
  %567 = getelementptr inbounds %struct.VkDeviceCreateInfo, %struct.VkDeviceCreateInfo* %19, i64 0, i32 4
  store %struct.VkDeviceQueueCreateInfo* %12, %struct.VkDeviceQueueCreateInfo** %567, align 8
  %568 = bitcast i8*** %162 to i64*
  %569 = load i64, i64* %568, align 8
  %570 = bitcast %"class.std::__1::vector.65"* %13 to i64*
  %571 = load i64, i64* %570, align 8
  %572 = sub i64 %569, %571
  %573 = lshr exact i64 %572, 3
  %574 = trunc i64 %573 to i32
  %575 = getelementptr inbounds %struct.VkDeviceCreateInfo, %struct.VkDeviceCreateInfo* %19, i64 0, i32 7
  store i32 %574, i32* %575, align 8
  %576 = getelementptr inbounds %struct.VkDeviceCreateInfo, %struct.VkDeviceCreateInfo* %19, i64 0, i32 8
  %577 = bitcast i8*** %576 to i64*
  store i64 %571, i64* %577, align 8
  %578 = getelementptr inbounds %"class.gpu::VulkanDeviceQueue", %"class.gpu::VulkanDeviceQueue"* %0, i64 0, i32 11, i32 2
  %579 = getelementptr inbounds %struct.VkDeviceCreateInfo, %struct.VkDeviceCreateInfo* %19, i64 0, i32 9
  store %struct.VkPhysicalDeviceFeatures* %578, %struct.VkPhysicalDeviceFeatures** %579, align 8
  %580 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %141, align 8
  %581 = getelementptr inbounds %"class.gpu::VulkanDeviceQueue", %"class.gpu::VulkanDeviceQueue"* %0, i64 0, i32 4
  %582 = call %"struct.gpu::VulkanFunctionPointers"* @_ZN3gpu25GetVulkanFunctionPointersEv() #12
  %583 = getelementptr inbounds %"struct.gpu::VulkanFunctionPointers", %"struct.gpu::VulkanFunctionPointers"* %582, i64 0, i32 6, i32 0
  %584 = load i32 (%struct.VkPhysicalDevice_T*, %struct.VkDeviceCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDevice_T**)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkDeviceCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDevice_T**)** %583, align 8
  %585 = call i32 %584(%struct.VkPhysicalDevice_T* %580, %struct.VkDeviceCreateInfo* nonnull %19, %struct.VkAllocationCallbacks* null, %struct.VkDevice_T** %581) #12
  %586 = icmp eq i32 %585, 0
  br i1 %586, label %587, label %690

587:                                              ; preds = %560
  %588 = bitcast %"class.base::internal::flat_tree"* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %588) #12
  %589 = load i8**, i8*** %161, align 8
  %590 = load i8**, i8*** %162, align 8
  %591 = getelementptr inbounds %"struct.std::__1::less", %"struct.std::__1::less"* %21, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %591) #12
  call void @_ZN4base8internal9flat_treeINS_16BasicStringPieceIcNSt3__111char_traitsIcEEEENS_8identityENS3_4lessIvEENS3_6vectorIS6_NS3_9allocatorIS6_EEEEEC2INS3_11__wrap_iterIPPKcEEEET_SL_RKS9_(%"class.base::internal::flat_tree"* nonnull %20, i8** %589, i8** %590, %"struct.std::__1::less"* nonnull dereferenceable(1) %21)
  %592 = getelementptr inbounds %"class.gpu::VulkanDeviceQueue", %"class.gpu::VulkanDeviceQueue"* %0, i64 0, i32 0
  %593 = getelementptr inbounds %"class.gpu::VulkanDeviceQueue", %"class.gpu::VulkanDeviceQueue"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %594 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %593, align 8
  %595 = icmp eq %"class.base::BasicStringPiece"* %594, null
  br i1 %595, label %601, label %596

596:                                              ; preds = %587
  %597 = ptrtoint %"class.base::BasicStringPiece"* %594 to i64
  %598 = getelementptr inbounds %"class.gpu::VulkanDeviceQueue", %"class.gpu::VulkanDeviceQueue"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %599 = bitcast %"class.base::BasicStringPiece"** %598 to i64*
  store i64 %597, i64* %599, align 8
  %600 = bitcast %"class.base::BasicStringPiece"* %594 to i8*
  call void @_ZdlPv(i8* %600) #13
  call void @llvm.memset.p0i8.i64(i8* align 8 %538, i8 0, i64 24, i1 false) #12
  br label %601

601:                                              ; preds = %596, %587
  %602 = bitcast %"class.base::internal::flat_tree"* %20 to <2 x i64>*
  %603 = load <2 x i64>, <2 x i64>* %602, align 16
  %604 = bitcast %"class.gpu::VulkanDeviceQueue"* %0 to <2 x i64>*
  store <2 x i64> %603, <2 x i64>* %604, align 8
  %605 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %20, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %606 = bitcast %"class.base::BasicStringPiece"** %605 to i64*
  %607 = load i64, i64* %606, align 16
  %608 = getelementptr inbounds %"class.gpu::VulkanDeviceQueue", %"class.gpu::VulkanDeviceQueue"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %609 = bitcast %"class.base::BasicStringPiece"** %608 to i64*
  store i64 %607, i64* %609, align 8
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %591) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %588) #12
  %610 = call %"struct.gpu::VulkanFunctionPointers"* @_ZN3gpu25GetVulkanFunctionPointersEv() #12
  %611 = load %struct.VkDevice_T*, %struct.VkDevice_T** %581, align 8
  %612 = getelementptr inbounds %"class.gpu::VulkanInfo", %"class.gpu::VulkanInfo"* %3, i64 0, i32 1
  %613 = load i32, i32* %612, align 4
  %614 = call zeroext i1 @_ZN3gpu22VulkanFunctionPointers26BindDeviceFunctionPointersEP10VkDevice_TjRKN4base8internal9flat_treeINS3_16BasicStringPieceIcNSt3__111char_traitsIcEEEENS3_8identityENS7_4lessIvEENS7_6vectorISA_NS7_9allocatorISA_EEEEEE(%"struct.gpu::VulkanFunctionPointers"* %610, %struct.VkDevice_T* %611, i32 %613, %"class.base::internal::flat_tree"* dereferenceable(24) %592) #12
  %615 = load %struct.VkDevice_T*, %struct.VkDevice_T** %581, align 8
  br i1 %614, label %620, label %616

616:                                              ; preds = %601
  %617 = call %"struct.gpu::VulkanFunctionPointers"* @_ZN3gpu25GetVulkanFunctionPointersEv() #12
  %618 = getelementptr inbounds %"struct.gpu::VulkanFunctionPointers", %"struct.gpu::VulkanFunctionPointers"* %617, i64 0, i32 59, i32 0
  %619 = load void (%struct.VkDevice_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkAllocationCallbacks*)** %618, align 8
  call void %619(%struct.VkDevice_T* %615, %struct.VkAllocationCallbacks* null) #12
  store %struct.VkDevice_T* null, %struct.VkDevice_T** %581, align 8
  br label %690

620:                                              ; preds = %601
  %621 = getelementptr inbounds %"class.gpu::VulkanDeviceQueue", %"class.gpu::VulkanDeviceQueue"* %0, i64 0, i32 5
  store %struct.VkDevice_T* %615, %struct.VkDevice_T** %621, align 8
  br i1 %6, label %622, label %632

622:                                              ; preds = %620
  %623 = bitcast %struct.VkDeviceQueueInfo2* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %623) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %623, i8 0, i64 32, i1 false)
  %624 = getelementptr inbounds %struct.VkDeviceQueueInfo2, %struct.VkDeviceQueueInfo2* %22, i64 0, i32 0
  store i32 1000145003, i32* %624, align 8
  %625 = getelementptr inbounds %struct.VkDeviceQueueInfo2, %struct.VkDeviceQueueInfo2* %22, i64 0, i32 2
  store i32 1, i32* %625, align 8
  %626 = getelementptr inbounds %struct.VkDeviceQueueInfo2, %struct.VkDeviceQueueInfo2* %22, i64 0, i32 3
  store i32 %131, i32* %626, align 4
  %627 = getelementptr inbounds %struct.VkDeviceQueueInfo2, %struct.VkDeviceQueueInfo2* %22, i64 0, i32 4
  store i32 0, i32* %627, align 8
  %628 = getelementptr inbounds %"class.gpu::VulkanDeviceQueue", %"class.gpu::VulkanDeviceQueue"* %0, i64 0, i32 6
  %629 = call %"struct.gpu::VulkanFunctionPointers"* @_ZN3gpu25GetVulkanFunctionPointersEv() #12
  %630 = getelementptr inbounds %"struct.gpu::VulkanFunctionPointers", %"struct.gpu::VulkanFunctionPointers"* %629, i64 0, i32 78, i32 0
  %631 = load void (%struct.VkDevice_T*, %struct.VkDeviceQueueInfo2*, %struct.VkQueue_T**)*, void (%struct.VkDevice_T*, %struct.VkDeviceQueueInfo2*, %struct.VkQueue_T**)** %630, align 8
  call void %631(%struct.VkDevice_T* %615, %struct.VkDeviceQueueInfo2* nonnull %22, %struct.VkQueue_T** %628) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %623) #12
  br label %637

632:                                              ; preds = %620
  %633 = getelementptr inbounds %"class.gpu::VulkanDeviceQueue", %"class.gpu::VulkanDeviceQueue"* %0, i64 0, i32 6
  %634 = call %"struct.gpu::VulkanFunctionPointers"* @_ZN3gpu25GetVulkanFunctionPointersEv() #12
  %635 = getelementptr inbounds %"struct.gpu::VulkanFunctionPointers", %"struct.gpu::VulkanFunctionPointers"* %634, i64 0, i32 77, i32 0
  %636 = load void (%struct.VkDevice_T*, i32, i32, %struct.VkQueue_T**)*, void (%struct.VkDevice_T*, i32, i32, %struct.VkQueue_T**)** %635, align 8
  call void %636(%struct.VkDevice_T* %615, i32 %131, i32 0, %struct.VkQueue_T** %633) #12
  br label %637

637:                                              ; preds = %632, %622
  %638 = icmp eq i32 %8, 0
  %639 = zext i32 %8 to i64
  %640 = select i1 %638, i64 -1, i64 %639
  %641 = call i8* @_Znwm(i64 128) #13
  %642 = bitcast i8* %641 to i64*
  store i64 %640, i64* %642, align 8
  %643 = getelementptr inbounds i8, i8* %641, i64 8
  %644 = bitcast i8* %643 to i64*
  store i64 %640, i64* %644, align 8
  %645 = getelementptr inbounds i8, i8* %641, i64 16
  %646 = bitcast i8* %645 to i64*
  store i64 %640, i64* %646, align 8
  %647 = getelementptr inbounds i8, i8* %641, i64 24
  %648 = bitcast i8* %647 to i64*
  store i64 %640, i64* %648, align 8
  %649 = getelementptr inbounds i8, i8* %641, i64 32
  %650 = bitcast i8* %649 to i64*
  store i64 %640, i64* %650, align 8
  %651 = getelementptr inbounds i8, i8* %641, i64 40
  %652 = bitcast i8* %651 to i64*
  store i64 %640, i64* %652, align 8
  %653 = getelementptr inbounds i8, i8* %641, i64 48
  %654 = bitcast i8* %653 to i64*
  store i64 %640, i64* %654, align 8
  %655 = getelementptr inbounds i8, i8* %641, i64 56
  %656 = bitcast i8* %655 to i64*
  store i64 %640, i64* %656, align 8
  %657 = getelementptr inbounds i8, i8* %641, i64 64
  %658 = bitcast i8* %657 to i64*
  store i64 %640, i64* %658, align 8
  %659 = getelementptr inbounds i8, i8* %641, i64 72
  %660 = bitcast i8* %659 to i64*
  store i64 %640, i64* %660, align 8
  %661 = getelementptr inbounds i8, i8* %641, i64 80
  %662 = bitcast i8* %661 to i64*
  store i64 %640, i64* %662, align 8
  %663 = getelementptr inbounds i8, i8* %641, i64 88
  %664 = bitcast i8* %663 to i64*
  store i64 %640, i64* %664, align 8
  %665 = getelementptr inbounds i8, i8* %641, i64 96
  %666 = bitcast i8* %665 to i64*
  store i64 %640, i64* %666, align 8
  %667 = getelementptr inbounds i8, i8* %641, i64 104
  %668 = bitcast i8* %667 to i64*
  store i64 %640, i64* %668, align 8
  %669 = getelementptr inbounds i8, i8* %641, i64 112
  %670 = bitcast i8* %669 to i64*
  store i64 %640, i64* %670, align 8
  %671 = getelementptr inbounds i8, i8* %641, i64 120
  %672 = bitcast i8* %671 to i64*
  store i64 %640, i64* %672, align 8
  %673 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %141, align 8
  %674 = load %struct.VkDevice_T*, %struct.VkDevice_T** %621, align 8
  %675 = load %struct.VkInstance_T*, %struct.VkInstance_T** %24, align 8
  %676 = getelementptr inbounds %"class.gpu::VulkanDeviceQueue", %"class.gpu::VulkanDeviceQueue"* %0, i64 0, i32 9
  %677 = call i32 @_ZN3gpu3vma15CreateAllocatorEP18VkPhysicalDevice_TP10VkDevice_TP12VkInstance_TPKmPP14VmaAllocator_T(%struct.VkPhysicalDevice_T* %673, %struct.VkDevice_T* %674, %struct.VkInstance_T* %675, i64* nonnull %642, %struct.VmaAllocator_T** %676) #12
  %678 = call i8* @_Znwm(i64 96) #13
  %679 = bitcast i8* %678 to %"class.gpu::VulkanFenceHelper"*
  call void @_ZN3gpu17VulkanFenceHelperC1EPNS_17VulkanDeviceQueueE(%"class.gpu::VulkanFenceHelper"* nonnull %679, %"class.gpu::VulkanDeviceQueue"* %0) #12
  %680 = ptrtoint i8* %678 to i64
  %681 = getelementptr inbounds %"class.gpu::VulkanDeviceQueue", %"class.gpu::VulkanDeviceQueue"* %0, i64 0, i32 10
  %682 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %681, i64 0, i32 0, i32 0, i32 0
  %683 = load %"class.gpu::VulkanFenceHelper"*, %"class.gpu::VulkanFenceHelper"** %682, align 8
  %684 = bitcast %"class.std::__1::unique_ptr"* %681 to i64*
  store i64 %680, i64* %684, align 8
  %685 = icmp eq %"class.gpu::VulkanFenceHelper"* %683, null
  br i1 %685, label %688, label %686

686:                                              ; preds = %637
  call void @_ZN3gpu17VulkanFenceHelperD1Ev(%"class.gpu::VulkanFenceHelper"* nonnull %683) #12
  %687 = bitcast %"class.gpu::VulkanFenceHelper"* %683 to i8*
  call void @_ZdlPv(i8* %687) #13
  br label %688

688:                                              ; preds = %686, %637
  %689 = getelementptr inbounds %"class.gpu::VulkanDeviceQueue", %"class.gpu::VulkanDeviceQueue"* %0, i64 0, i32 12
  store i8 %23, i8* %689, align 8
  call void @_ZdlPv(i8* nonnull %641) #13
  br label %690

690:                                              ; preds = %560, %688, %616
  %691 = phi i1 [ true, %688 ], [ false, %616 ], [ false, %560 ]
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %562) #12
  br label %692

692:                                              ; preds = %191, %188, %690, %544
  %693 = phi i1 [ %691, %690 ], [ false, %544 ], [ false, %188 ], [ false, %191 ]
  %694 = load i8**, i8*** %161, align 8
  %695 = icmp eq i8** %694, null
  br i1 %695, label %700, label %696

696:                                              ; preds = %692
  %697 = ptrtoint i8** %694 to i64
  %698 = bitcast i8*** %162 to i64*
  store i64 %697, i64* %698, align 8
  %699 = bitcast i8** %694 to i8*
  call void @_ZdlPv(i8* %699) #13
  br label %700

700:                                              ; preds = %692, %696
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %160) #12
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %153) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %152) #12
  br label %701

701:                                              ; preds = %27, %700, %130, %9
  %702 = phi i1 [ false, %9 ], [ %693, %700 ], [ false, %130 ], [ false, %27 ]
  ret i1 %702
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN3gpu17VkVersionToStringEj(%"class.std::__1::basic_string"* sret, i32) local_unnamed_addr #2

declare void @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* sret, i8*, ...) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal9flat_treeINS_16BasicStringPieceIcNSt3__111char_traitsIcEEEENS_8identityENS3_4lessIvEENS3_6vectorIS6_NS3_9allocatorIS6_EEEEEC2INS3_11__wrap_iterIPPKcEEEET_SL_RKS9_(%"class.base::internal::flat_tree"*, i8**, i8**, %"struct.std::__1::less"* dereferenceable(1)) unnamed_addr #0 comdat align 2 {
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.base::internal::flat_tree"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 24, i1 false) #12
  %7 = ptrtoint i8** %1 to i64
  %8 = ptrtoint i8** %2 to i64
  %9 = sub i64 %8, %7
  %10 = ashr exact i64 %9, 3
  %11 = icmp eq i64 %9, 0
  br i1 %11, label %54, label %12

12:                                               ; preds = %4
  %13 = icmp ugt i64 %10, 1152921504606846975
  br i1 %13, label %14, label %16

14:                                               ; preds = %12
  %15 = bitcast %"class.base::internal::flat_tree"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %15) #15
  unreachable

16:                                               ; preds = %12
  %17 = shl i64 %9, 1
  %18 = tail call i8* @_Znwm(i64 %17) #13
  %19 = bitcast i8* %18 to %"class.base::BasicStringPiece"*
  %20 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %0, i64 0, i32 0, i32 0, i32 1
  %21 = bitcast %"class.base::BasicStringPiece"** %20 to i8**
  store i8* %18, i8** %21, align 8
  %22 = bitcast %"class.base::internal::flat_tree"* %0 to i8**
  store i8* %18, i8** %22, align 8
  %23 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %19, i64 %10
  %24 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  store %"class.base::BasicStringPiece"* %23, %"class.base::BasicStringPiece"** %24, align 8
  %25 = bitcast %"class.base::BasicStringPiece"** %20 to i64*
  %26 = ptrtoint i8* %18 to i64
  %27 = icmp eq i8** %1, %2
  br i1 %27, label %50, label %28

28:                                               ; preds = %16
  %29 = bitcast %"class.logging::CheckError"* %5 to i8*
  %30 = bitcast i8* %18 to %"class.base::BasicStringPiece"*
  br label %31

31:                                               ; preds = %42, %28
  %32 = phi %"class.base::BasicStringPiece"* [ %30, %28 ], [ %44, %42 ]
  %33 = phi i8** [ %1, %28 ], [ %43, %42 ]
  %34 = load i8*, i8** %33, align 8
  %35 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %32, i64 0, i32 0
  store i8* %34, i8** %35, align 8
  %36 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %32, i64 0, i32 1
  %37 = icmp eq i8* %34, null
  br i1 %37, label %40, label %38

38:                                               ; preds = %31
  %39 = call i64 @strlen(i8* nonnull %34) #12
  store i64 %39, i64* %36, align 8
  br label %42

40:                                               ; preds = %31
  store i64 0, i64* %36, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #12
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.7, i64 0, i64 0), i32 125, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i64 0, i64 0)) #12
  %41 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #12
  br label %42

42:                                               ; preds = %40, %38
  %43 = getelementptr inbounds i8*, i8** %33, i64 1
  %44 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %32, i64 1
  %45 = icmp eq i8** %43, %2
  br i1 %45, label %46, label %31

46:                                               ; preds = %42
  %47 = ptrtoint %"class.base::BasicStringPiece"* %44 to i64
  %48 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %0, i64 0, i32 0, i32 0, i32 0
  %49 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %48, align 8
  br label %50

50:                                               ; preds = %16, %46
  %51 = phi %"class.base::BasicStringPiece"* [ %19, %16 ], [ %49, %46 ]
  %52 = phi i64 [ %26, %16 ], [ %47, %46 ]
  store i64 %52, i64* %25, align 8
  %53 = inttoptr i64 %52 to %"class.base::BasicStringPiece"*
  br label %54

54:                                               ; preds = %4, %50
  %55 = phi %"class.base::BasicStringPiece"* [ null, %4 ], [ %53, %50 ]
  %56 = phi %"class.base::BasicStringPiece"* [ null, %4 ], [ %51, %50 ]
  call void @_ZN4base8internal9flat_treeINS_16BasicStringPieceIcNSt3__111char_traitsIcEEEENS_8identityENS3_4lessIvEENS3_6vectorIS6_NS3_9allocatorIS6_EEEEE15sort_and_uniqueENS3_11__wrap_iterIPS6_EESH_(%"class.base::internal::flat_tree"* %0, %"class.base::BasicStringPiece"* %56, %"class.base::BasicStringPiece"* %55) #12
  ret void
}

declare %"struct.gpu::VulkanFunctionPointers"* @_ZN3gpu25GetVulkanFunctionPointersEv() local_unnamed_addr #2

declare zeroext i1 @_ZN3gpu22VulkanFunctionPointers26BindDeviceFunctionPointersEP10VkDevice_TjRKN4base8internal9flat_treeINS3_16BasicStringPieceIcNSt3__111char_traitsIcEEEENS3_8identityENS7_4lessIvEENS7_6vectorISA_NS7_9allocatorISA_EEEEEE(%"struct.gpu::VulkanFunctionPointers"*, %struct.VkDevice_T*, i32, %"class.base::internal::flat_tree"* dereferenceable(24)) local_unnamed_addr #2

declare i32 @_ZN3gpu3vma15CreateAllocatorEP18VkPhysicalDevice_TP10VkDevice_TP12VkInstance_TPKmPP14VmaAllocator_T(%struct.VkPhysicalDevice_T*, %struct.VkDevice_T*, %struct.VkInstance_T*, i64*, %struct.VmaAllocator_T**) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3gpu17VulkanDeviceQueue20InitializeForWebViewEP18VkPhysicalDevice_TP10VkDevice_TP9VkQueue_TjN4base8internal9flat_treeINS7_16BasicStringPieceIcNSt3__111char_traitsIcEEEENS7_8identityENSB_4lessIvEENSB_6vectorISE_NSB_9allocatorISE_EEEEEE(%"class.gpu::VulkanDeviceQueue"*, %struct.VkPhysicalDevice_T*, %struct.VkDevice_T*, %struct.VkQueue_T*, i32, %"class.base::internal::flat_tree"* nocapture) local_unnamed_addr #0 align 2 {
  %7 = getelementptr inbounds %"class.gpu::VulkanDeviceQueue", %"class.gpu::VulkanDeviceQueue"* %0, i64 0, i32 1
  store %struct.VkPhysicalDevice_T* %1, %struct.VkPhysicalDevice_T** %7, align 8
  %8 = getelementptr inbounds %"class.gpu::VulkanDeviceQueue", %"class.gpu::VulkanDeviceQueue"* %0, i64 0, i32 5
  store %struct.VkDevice_T* %2, %struct.VkDevice_T** %8, align 8
  %9 = getelementptr inbounds %"class.gpu::VulkanDeviceQueue", %"class.gpu::VulkanDeviceQueue"* %0, i64 0, i32 6
  store %struct.VkQueue_T* %3, %struct.VkQueue_T** %9, align 8
  %10 = getelementptr inbounds %"class.gpu::VulkanDeviceQueue", %"class.gpu::VulkanDeviceQueue"* %0, i64 0, i32 7
  store i32 %4, i32* %10, align 8
  %11 = getelementptr inbounds %"class.gpu::VulkanDeviceQueue", %"class.gpu::VulkanDeviceQueue"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %12 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %11, align 8
  %13 = icmp eq %"class.base::BasicStringPiece"* %12, null
  br i1 %13, label %20, label %14

14:                                               ; preds = %6
  %15 = ptrtoint %"class.base::BasicStringPiece"* %12 to i64
  %16 = getelementptr inbounds %"class.gpu::VulkanDeviceQueue", %"class.gpu::VulkanDeviceQueue"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %17 = bitcast %"class.base::BasicStringPiece"** %16 to i64*
  store i64 %15, i64* %17, align 8
  %18 = bitcast %"class.base::BasicStringPiece"* %12 to i8*
  tail call void @_ZdlPv(i8* %18) #13
  %19 = bitcast %"class.gpu::VulkanDeviceQueue"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %19, i8 0, i64 24, i1 false) #12
  br label %20

20:                                               ; preds = %6, %14
  %21 = bitcast %"class.base::internal::flat_tree"* %5 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = bitcast %"class.gpu::VulkanDeviceQueue"* %0 to i64*
  store i64 %22, i64* %23, align 8
  %24 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %5, i64 0, i32 0, i32 0, i32 1
  %25 = bitcast %"class.base::BasicStringPiece"** %24 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %"class.gpu::VulkanDeviceQueue", %"class.gpu::VulkanDeviceQueue"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %28 = bitcast %"class.base::BasicStringPiece"** %27 to i64*
  store i64 %26, i64* %28, align 8
  %29 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %5, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %30 = bitcast %"class.base::BasicStringPiece"** %29 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = getelementptr inbounds %"class.gpu::VulkanDeviceQueue", %"class.gpu::VulkanDeviceQueue"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %33 = bitcast %"class.base::BasicStringPiece"** %32 to i64*
  store i64 %31, i64* %33, align 8
  %34 = bitcast %"class.base::internal::flat_tree"* %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %34, i8 0, i64 24, i1 false) #12
  %35 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %7, align 8
  %36 = load %struct.VkDevice_T*, %struct.VkDevice_T** %8, align 8
  %37 = getelementptr inbounds %"class.gpu::VulkanDeviceQueue", %"class.gpu::VulkanDeviceQueue"* %0, i64 0, i32 8
  %38 = load %struct.VkInstance_T*, %struct.VkInstance_T** %37, align 8
  %39 = getelementptr inbounds %"class.gpu::VulkanDeviceQueue", %"class.gpu::VulkanDeviceQueue"* %0, i64 0, i32 9
  %40 = tail call i32 @_ZN3gpu3vma15CreateAllocatorEP18VkPhysicalDevice_TP10VkDevice_TP12VkInstance_TPKmPP14VmaAllocator_T(%struct.VkPhysicalDevice_T* %35, %struct.VkDevice_T* %36, %struct.VkInstance_T* %38, i64* null, %struct.VmaAllocator_T** %39) #12
  %41 = tail call i8* @_Znwm(i64 96) #13
  %42 = bitcast i8* %41 to %"class.gpu::VulkanFenceHelper"*
  tail call void @_ZN3gpu17VulkanFenceHelperC1EPNS_17VulkanDeviceQueueE(%"class.gpu::VulkanFenceHelper"* nonnull %42, %"class.gpu::VulkanDeviceQueue"* %0) #12
  %43 = ptrtoint i8* %41 to i64
  %44 = getelementptr inbounds %"class.gpu::VulkanDeviceQueue", %"class.gpu::VulkanDeviceQueue"* %0, i64 0, i32 10
  %45 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %44, i64 0, i32 0, i32 0, i32 0
  %46 = load %"class.gpu::VulkanFenceHelper"*, %"class.gpu::VulkanFenceHelper"** %45, align 8
  %47 = bitcast %"class.std::__1::unique_ptr"* %44 to i64*
  store i64 %43, i64* %47, align 8
  %48 = icmp eq %"class.gpu::VulkanFenceHelper"* %46, null
  br i1 %48, label %51, label %49

49:                                               ; preds = %20
  tail call void @_ZN3gpu17VulkanFenceHelperD1Ev(%"class.gpu::VulkanFenceHelper"* nonnull %46) #12
  %50 = bitcast %"class.gpu::VulkanFenceHelper"* %46 to i8*
  tail call void @_ZdlPv(i8* %50) #13
  br label %51

51:                                               ; preds = %49, %20
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gpu17VulkanDeviceQueue7DestroyEv(%"class.gpu::VulkanDeviceQueue"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.gpu::VulkanDeviceQueue", %"class.gpu::VulkanDeviceQueue"* %0, i64 0, i32 10, i32 0, i32 0, i32 0
  %3 = load %"class.gpu::VulkanFenceHelper"*, %"class.gpu::VulkanFenceHelper"** %2, align 8
  %4 = icmp eq %"class.gpu::VulkanFenceHelper"* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  tail call void @_ZN3gpu17VulkanFenceHelper7DestroyEv(%"class.gpu::VulkanFenceHelper"* nonnull %3) #12
  %6 = load %"class.gpu::VulkanFenceHelper"*, %"class.gpu::VulkanFenceHelper"** %2, align 8
  store %"class.gpu::VulkanFenceHelper"* null, %"class.gpu::VulkanFenceHelper"** %2, align 8
  %7 = icmp eq %"class.gpu::VulkanFenceHelper"* %6, null
  br i1 %7, label %10, label %8

8:                                                ; preds = %5
  tail call void @_ZN3gpu17VulkanFenceHelperD1Ev(%"class.gpu::VulkanFenceHelper"* nonnull %6) #12
  %9 = bitcast %"class.gpu::VulkanFenceHelper"* %6 to i8*
  tail call void @_ZdlPv(i8* %9) #13
  br label %10

10:                                               ; preds = %1, %8, %5
  %11 = getelementptr inbounds %"class.gpu::VulkanDeviceQueue", %"class.gpu::VulkanDeviceQueue"* %0, i64 0, i32 9
  %12 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %11, align 8
  %13 = icmp eq %struct.VmaAllocator_T* %12, null
  br i1 %13, label %15, label %14

14:                                               ; preds = %10
  tail call void @_ZN3gpu3vma16DestroyAllocatorEP14VmaAllocator_T(%struct.VmaAllocator_T* nonnull %12) #12
  store %struct.VmaAllocator_T* null, %struct.VmaAllocator_T** %11, align 8
  br label %15

15:                                               ; preds = %10, %14
  %16 = getelementptr inbounds %"class.gpu::VulkanDeviceQueue", %"class.gpu::VulkanDeviceQueue"* %0, i64 0, i32 4
  %17 = load %struct.VkDevice_T*, %struct.VkDevice_T** %16, align 8
  %18 = icmp eq %struct.VkDevice_T* %17, null
  br i1 %18, label %23, label %19

19:                                               ; preds = %15
  %20 = tail call %"struct.gpu::VulkanFunctionPointers"* @_ZN3gpu25GetVulkanFunctionPointersEv() #12
  %21 = getelementptr inbounds %"struct.gpu::VulkanFunctionPointers", %"struct.gpu::VulkanFunctionPointers"* %20, i64 0, i32 59, i32 0
  %22 = load void (%struct.VkDevice_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkAllocationCallbacks*)** %21, align 8
  tail call void %22(%struct.VkDevice_T* nonnull %17, %struct.VkAllocationCallbacks* null) #12
  store %struct.VkDevice_T* null, %struct.VkDevice_T** %16, align 8
  br label %23

23:                                               ; preds = %15, %19
  %24 = getelementptr inbounds %"class.gpu::VulkanDeviceQueue", %"class.gpu::VulkanDeviceQueue"* %0, i64 0, i32 5
  %25 = getelementptr inbounds %"class.gpu::VulkanDeviceQueue", %"class.gpu::VulkanDeviceQueue"* %0, i64 0, i32 1
  store %struct.VkPhysicalDevice_T* null, %struct.VkPhysicalDevice_T** %25, align 8
  %26 = bitcast %struct.VkDevice_T** %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %26, i8 0, i64 20, i1 false)
  ret void
}

declare void @_ZN3gpu17VulkanFenceHelper7DestroyEv(%"class.gpu::VulkanFenceHelper"*) local_unnamed_addr #2

declare void @_ZN3gpu3vma16DestroyAllocatorEP14VmaAllocator_T(%struct.VmaAllocator_T*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.gpu::VulkanCommandPool"* @_ZN3gpu17VulkanDeviceQueue17CreateCommandPoolEv(%"class.gpu::VulkanDeviceQueue"*) local_unnamed_addr #0 align 2 {
  %2 = tail call i8* @_Znwm(i64 24) #13
  %3 = bitcast i8* %2 to %"class.gpu::VulkanCommandPool"*
  tail call void @_ZN3gpu17VulkanCommandPoolC1EPNS_17VulkanDeviceQueueE(%"class.gpu::VulkanCommandPool"* nonnull %3, %"class.gpu::VulkanDeviceQueue"* %0) #12
  %4 = ptrtoint i8* %2 to i64
  %5 = tail call zeroext i1 @_ZN3gpu17VulkanCommandPool10InitializeEv(%"class.gpu::VulkanCommandPool"* nonnull %3) #12
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  tail call void @_ZN3gpu17VulkanCommandPoolD1Ev(%"class.gpu::VulkanCommandPool"* nonnull %3) #12
  tail call void @_ZdlPv(i8* nonnull %2) #13
  br label %7

7:                                                ; preds = %1, %6
  %8 = phi i64 [ 0, %6 ], [ %4, %1 ]
  %9 = inttoptr i64 %8 to %"class.gpu::VulkanCommandPool"*
  ret %"class.gpu::VulkanCommandPool"* %9
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #3

declare void @_ZN3gpu17VulkanCommandPoolC1EPNS_17VulkanDeviceQueueE(%"class.gpu::VulkanCommandPool"*, %"class.gpu::VulkanDeviceQueue"*) unnamed_addr #2

declare zeroext i1 @_ZN3gpu17VulkanCommandPool10InitializeEv(%"class.gpu::VulkanCommandPool"*) local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #5

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #6

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #7

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #8

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #9

declare void @_ZN14crash_reporter8internal18CrashKeyStringImpl3SetEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.crash_reporter::internal::CrashKeyStringImpl"*, i8*, i64) local_unnamed_addr #2

declare void @_ZN8crashpad10Annotation7SetSizeEj(%"class.crashpad::Annotation"*, i32) local_unnamed_addr #2

; Function Attrs: nounwind readnone
declare i1 @llvm.is.constant.i64(i64) #10

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal9flat_treeINS_16BasicStringPieceIcNSt3__111char_traitsIcEEEENS_8identityENS3_4lessIvEENS3_6vectorIS6_NS3_9allocatorIS6_EEEEE15sort_and_uniqueENS3_11__wrap_iterIPS6_EESH_(%"class.base::internal::flat_tree"*, %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare", align 1
  %5 = ptrtoint %"class.base::BasicStringPiece"* %2 to i64
  %6 = getelementptr inbounds %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare", %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* %4, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %6)
  %7 = ptrtoint %"class.base::BasicStringPiece"* %1 to i64
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 4
  %10 = icmp sgt i64 %8, 2048
  br i1 %10, label %11, label %22

11:                                               ; preds = %3
  %12 = icmp slt i64 %9, 576460752303423487
  %13 = select i1 %12, i64 %9, i64 576460752303423487
  br label %14

14:                                               ; preds = %19, %11
  %15 = phi i64 [ %20, %19 ], [ %13, %11 ]
  %16 = shl i64 %15, 4
  %17 = tail call noalias i8* @_ZnwmRKSt9nothrow_t(i64 %16, %"struct.std::nothrow_t"* nonnull dereferenceable(1) @_ZSt7nothrow) #12
  %18 = icmp eq i8* %17, null
  br i1 %18, label %19, label %23

19:                                               ; preds = %14
  %20 = lshr i64 %15, 1
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %22, label %14

22:                                               ; preds = %19, %3
  call void @_ZNSt3__113__stable_sortIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_T_NS_15iterator_traitsISL_E15difference_typeEPNSO_10value_typeEl(%"class.base::BasicStringPiece"* %1, %"class.base::BasicStringPiece"* %2, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* nonnull dereferenceable(1) %4, i64 %9, %"class.base::BasicStringPiece"* null, i64 0) #12
  br label %25

23:                                               ; preds = %14
  %24 = bitcast i8* %17 to %"class.base::BasicStringPiece"*
  call void @_ZNSt3__113__stable_sortIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_T_NS_15iterator_traitsISL_E15difference_typeEPNSO_10value_typeEl(%"class.base::BasicStringPiece"* %1, %"class.base::BasicStringPiece"* %2, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* nonnull dereferenceable(1) %4, i64 %9, %"class.base::BasicStringPiece"* nonnull %24, i64 %15) #12
  call void @_ZdlPv(i8* nonnull %17) #13
  br label %25

25:                                               ; preds = %22, %23
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %6)
  %26 = call %"class.base::BasicStringPiece"* @_ZNSt3__16uniqueINS_11__wrap_iterIPN4base16BasicStringPieceIcNS_11char_traitsIcEEEEEENS2_8internal9NotFnImplINS9_9flat_treeIS6_NS2_8identityENS_4lessIvEENS_6vectorIS6_NS_9allocatorIS6_EEEEE13value_compareEEEEET_SM_SM_T0_(%"class.base::BasicStringPiece"* %1, %"class.base::BasicStringPiece"* %2)
  %27 = icmp eq %"class.base::BasicStringPiece"* %26, %2
  br i1 %27, label %40, label %28

28:                                               ; preds = %25
  %29 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %0, i64 0, i32 0, i32 0, i32 1
  %30 = bitcast %"class.base::BasicStringPiece"** %29 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %31, %5
  %33 = ashr exact i64 %32, 4
  %34 = icmp eq i64 %32, 0
  br i1 %34, label %38, label %35

35:                                               ; preds = %28
  %36 = bitcast %"class.base::BasicStringPiece"* %26 to i8*
  %37 = bitcast %"class.base::BasicStringPiece"* %2 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %36, i8* align 8 %37, i64 %32, i1 false) #12
  br label %38

38:                                               ; preds = %35, %28
  %39 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %26, i64 %33
  store %"class.base::BasicStringPiece"* %39, %"class.base::BasicStringPiece"** %29, align 8
  br label %40

40:                                               ; preds = %25, %38
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.base::BasicStringPiece"* @_ZNSt3__16uniqueINS_11__wrap_iterIPN4base16BasicStringPieceIcNS_11char_traitsIcEEEEEENS2_8internal9NotFnImplINS9_9flat_treeIS6_NS2_8identityENS_4lessIvEENS_6vectorIS6_NS_9allocatorIS6_EEEEE13value_compareEEEEET_SM_SM_T0_(%"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*) local_unnamed_addr #0 comdat {
  %3 = icmp eq %"class.base::BasicStringPiece"* %0, %1
  br i1 %3, label %33, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 1
  %6 = icmp eq %"class.base::BasicStringPiece"* %5, %1
  br i1 %6, label %31, label %7

7:                                                ; preds = %4
  %8 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  br label %10

10:                                               ; preds = %28, %7
  %11 = phi i8* [ %17, %28 ], [ %9, %7 ]
  %12 = phi %"class.base::BasicStringPiece"* [ %29, %28 ], [ %5, %7 ]
  %13 = phi %"class.base::BasicStringPiece"* [ %12, %28 ], [ %0, %7 ]
  %14 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %13, i64 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %12, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %13, i64 1, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = icmp ugt i64 %15, %19
  %21 = select i1 %20, i64 %19, i64 %15
  %22 = tail call i32 @memcmp(i8* %11, i8* %17, i64 %21) #12
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %26

24:                                               ; preds = %10
  %25 = icmp ult i64 %15, %19
  br i1 %25, label %28, label %33

26:                                               ; preds = %10
  %27 = icmp sgt i32 %22, -1
  br i1 %27, label %33, label %28

28:                                               ; preds = %26, %24
  %29 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %12, i64 1
  %30 = icmp eq %"class.base::BasicStringPiece"* %29, %1
  br i1 %30, label %31, label %10

31:                                               ; preds = %28, %4
  %32 = ptrtoint %"class.base::BasicStringPiece"* %1 to i64
  br label %79

33:                                               ; preds = %24, %26, %2
  %34 = phi %"class.base::BasicStringPiece"* [ %0, %2 ], [ %13, %26 ], [ %13, %24 ]
  %35 = ptrtoint %"class.base::BasicStringPiece"* %34 to i64
  %36 = icmp eq %"class.base::BasicStringPiece"* %34, %1
  br i1 %36, label %79, label %37

37:                                               ; preds = %33
  %38 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %34, i64 2
  %39 = icmp eq %"class.base::BasicStringPiece"* %38, %1
  br i1 %39, label %75, label %40

40:                                               ; preds = %37
  %41 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %34, i64 1
  br label %42

42:                                               ; preds = %40, %68
  %43 = phi %"class.base::BasicStringPiece"* [ %72, %68 ], [ %34, %40 ]
  %44 = phi %"class.base::BasicStringPiece"* [ %70, %68 ], [ %38, %40 ]
  %45 = phi %"class.base::BasicStringPiece"* [ %44, %68 ], [ %41, %40 ]
  %46 = phi i64 [ %69, %68 ], [ %35, %40 ]
  %47 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %43, i64 0, i32 0
  %48 = load i8*, i8** %47, align 8
  %49 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %43, i64 0, i32 1
  %50 = load i64, i64* %49, align 8
  %51 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %44, i64 0, i32 0
  %52 = load i8*, i8** %51, align 8
  %53 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %45, i64 1, i32 1
  %54 = load i64, i64* %53, align 8
  %55 = icmp ugt i64 %50, %54
  %56 = select i1 %55, i64 %54, i64 %50
  %57 = tail call i32 @memcmp(i8* %48, i8* %52, i64 %56) #12
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %61

59:                                               ; preds = %42
  %60 = icmp ult i64 %50, %54
  br i1 %60, label %63, label %68

61:                                               ; preds = %42
  %62 = icmp sgt i32 %57, -1
  br i1 %62, label %68, label %63

63:                                               ; preds = %59, %61
  %64 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %43, i64 1
  %65 = ptrtoint %"class.base::BasicStringPiece"* %64 to i64
  %66 = bitcast %"class.base::BasicStringPiece"* %64 to i8*
  %67 = bitcast %"class.base::BasicStringPiece"* %44 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %66, i8* align 8 %67, i64 16, i1 false)
  br label %68

68:                                               ; preds = %59, %63, %61
  %69 = phi i64 [ %46, %61 ], [ %65, %63 ], [ %46, %59 ]
  %70 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %44, i64 1
  %71 = icmp eq %"class.base::BasicStringPiece"* %70, %1
  %72 = inttoptr i64 %69 to %"class.base::BasicStringPiece"*
  br i1 %71, label %73, label %42

73:                                               ; preds = %68
  %74 = inttoptr i64 %69 to %"class.base::BasicStringPiece"*
  br label %75

75:                                               ; preds = %73, %37
  %76 = phi %"class.base::BasicStringPiece"* [ %34, %37 ], [ %74, %73 ]
  %77 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %76, i64 1
  %78 = ptrtoint %"class.base::BasicStringPiece"* %77 to i64
  br label %79

79:                                               ; preds = %33, %31, %75
  %80 = phi i64 [ %78, %75 ], [ %35, %33 ], [ %32, %31 ]
  %81 = inttoptr i64 %80 to %"class.base::BasicStringPiece"*
  ret %"class.base::BasicStringPiece"* %81
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__113__stable_sortIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_T_NS_15iterator_traitsISL_E15difference_typeEPNSO_10value_typeEl(%"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* dereferenceable(1), i64, %"class.base::BasicStringPiece"*, i64) local_unnamed_addr #0 comdat {
  switch i64 %3, label %30 [
    i64 0, label %207
    i64 1, label %207
    i64 2, label %7
  ]

7:                                                ; preds = %6
  %8 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 -1
  %9 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %8, i64 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 -1, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = icmp ugt i64 %12, %16
  %18 = select i1 %17, i64 %16, i64 %12
  %19 = tail call i32 @memcmp(i8* %10, i8* %14, i64 %18) #12
  %20 = icmp eq i32 %19, 0
  %21 = ptrtoint i8* %14 to i64
  br i1 %20, label %22, label %24

22:                                               ; preds = %7
  %23 = icmp ult i64 %12, %16
  br i1 %23, label %26, label %207

24:                                               ; preds = %7
  %25 = icmp slt i32 %19, 0
  br i1 %25, label %26, label %207

26:                                               ; preds = %22, %24
  %27 = bitcast %"class.base::BasicStringPiece"* %0 to i8*
  %28 = bitcast %"class.base::BasicStringPiece"* %8 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %27, i8* align 8 %28, i64 16, i1 false) #12
  %29 = bitcast %"class.base::BasicStringPiece"* %8 to i64*
  store i64 %21, i64* %29, align 8
  store i64 %16, i64* %11, align 8
  br label %207

30:                                               ; preds = %6
  %31 = icmp slt i64 %3, 129
  br i1 %31, label %32, label %70

32:                                               ; preds = %30
  %33 = icmp eq %"class.base::BasicStringPiece"* %0, %1
  br i1 %33, label %207, label %34

34:                                               ; preds = %32
  %35 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 1
  %36 = icmp eq %"class.base::BasicStringPiece"* %35, %1
  br i1 %36, label %207, label %37

37:                                               ; preds = %34, %60
  %38 = phi %"class.base::BasicStringPiece"* [ %64, %60 ], [ %35, %34 ]
  %39 = phi %"class.base::BasicStringPiece"* [ %38, %60 ], [ %0, %34 ]
  %40 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %38, i64 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %39, i64 1, i32 1
  %43 = load i64, i64* %42, align 8
  %44 = icmp eq %"class.base::BasicStringPiece"* %38, %0
  br i1 %44, label %60, label %45

45:                                               ; preds = %37, %66
  %46 = phi %"class.base::BasicStringPiece"* [ %47, %66 ], [ %38, %37 ]
  %47 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %46, i64 -1
  %48 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %47, i64 0, i32 0
  %49 = load i8*, i8** %48, align 8
  %50 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %46, i64 -1, i32 1
  %51 = load i64, i64* %50, align 8
  %52 = icmp ugt i64 %43, %51
  %53 = select i1 %52, i64 %51, i64 %43
  %54 = tail call i32 @memcmp(i8* %41, i8* %49, i64 %53) #12
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %58

56:                                               ; preds = %45
  %57 = icmp ult i64 %43, %51
  br i1 %57, label %66, label %60

58:                                               ; preds = %45
  %59 = icmp slt i32 %54, 0
  br i1 %59, label %66, label %60

60:                                               ; preds = %66, %58, %56, %37
  %61 = phi %"class.base::BasicStringPiece"* [ %0, %37 ], [ %46, %58 ], [ %46, %56 ], [ %0, %66 ]
  %62 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %61, i64 0, i32 0
  store i8* %41, i8** %62, align 8
  %63 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %61, i64 0, i32 1
  store i64 %43, i64* %63, align 8
  %64 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %38, i64 1
  %65 = icmp eq %"class.base::BasicStringPiece"* %64, %1
  br i1 %65, label %207, label %37

66:                                               ; preds = %58, %56
  %67 = bitcast %"class.base::BasicStringPiece"* %46 to i8*
  %68 = bitcast %"class.base::BasicStringPiece"* %47 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %67, i8* align 8 %68, i64 16, i1 false) #12
  %69 = icmp eq %"class.base::BasicStringPiece"* %47, %0
  br i1 %69, label %60, label %45

70:                                               ; preds = %30
  %71 = lshr i64 %3, 1
  %72 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 %71
  %73 = icmp sgt i64 %3, %5
  br i1 %73, label %205, label %74

74:                                               ; preds = %70
  tail call void @_ZNSt3__118__stable_sort_moveIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_T_NS_15iterator_traitsISL_E15difference_typeEPNSO_10value_typeE(%"class.base::BasicStringPiece"* %0, %"class.base::BasicStringPiece"* %72, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* dereferenceable(1) %2, i64 %71, %"class.base::BasicStringPiece"* %4)
  %75 = sub nsw i64 %3, %71
  %76 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %4, i64 %71
  tail call void @_ZNSt3__118__stable_sort_moveIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_T_NS_15iterator_traitsISL_E15difference_typeEPNSO_10value_typeE(%"class.base::BasicStringPiece"* %72, %"class.base::BasicStringPiece"* %1, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* dereferenceable(1) %2, i64 %75, %"class.base::BasicStringPiece"* %76)
  %77 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %4, i64 %3
  br label %104

78:                                               ; preds = %180
  %79 = icmp eq %"class.base::BasicStringPiece"* %181, %77
  br i1 %79, label %207, label %80

80:                                               ; preds = %78
  %81 = ptrtoint %"class.base::BasicStringPiece"* %181 to i64
  %82 = add i64 %3, -1
  %83 = getelementptr %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %4, i64 %82, i32 0
  %84 = ptrtoint i8** %83 to i64
  %85 = sub i64 %84, %81
  %86 = lshr i64 %85, 4
  %87 = add nuw nsw i64 %86, 1
  %88 = and i64 %87, 3
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %100, label %90

90:                                               ; preds = %80, %90
  %91 = phi %"class.base::BasicStringPiece"* [ %96, %90 ], [ %181, %80 ]
  %92 = phi %"class.base::BasicStringPiece"* [ %97, %90 ], [ %183, %80 ]
  %93 = phi i64 [ %98, %90 ], [ %88, %80 ]
  %94 = bitcast %"class.base::BasicStringPiece"* %92 to i8*
  %95 = bitcast %"class.base::BasicStringPiece"* %91 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %94, i8* align 8 %95, i64 16, i1 false) #12
  %96 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %91, i64 1
  %97 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %92, i64 1
  %98 = add i64 %93, -1
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %100, label %90, !llvm.loop !3

100:                                              ; preds = %90, %80
  %101 = phi %"class.base::BasicStringPiece"* [ %181, %80 ], [ %96, %90 ]
  %102 = phi %"class.base::BasicStringPiece"* [ %183, %80 ], [ %97, %90 ]
  %103 = icmp ult i64 %85, 48
  br i1 %103, label %207, label %185

104:                                              ; preds = %74, %180
  %105 = phi %"class.base::BasicStringPiece"* [ %182, %180 ], [ %4, %74 ]
  %106 = phi %"class.base::BasicStringPiece"* [ %181, %180 ], [ %76, %74 ]
  %107 = phi %"class.base::BasicStringPiece"* [ %183, %180 ], [ %0, %74 ]
  %108 = icmp eq %"class.base::BasicStringPiece"* %106, %77
  br i1 %108, label %109, label %155

109:                                              ; preds = %104
  %110 = icmp eq %"class.base::BasicStringPiece"* %105, %76
  br i1 %110, label %207, label %111

111:                                              ; preds = %109
  %112 = ptrtoint %"class.base::BasicStringPiece"* %105 to i64
  %113 = add nsw i64 %71, -1
  %114 = getelementptr %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %4, i64 %113, i32 0
  %115 = ptrtoint i8** %114 to i64
  %116 = sub i64 %115, %112
  %117 = lshr i64 %116, 4
  %118 = add nuw nsw i64 %117, 1
  %119 = and i64 %118, 3
  %120 = icmp eq i64 %119, 0
  br i1 %120, label %131, label %121

121:                                              ; preds = %111, %121
  %122 = phi %"class.base::BasicStringPiece"* [ %127, %121 ], [ %105, %111 ]
  %123 = phi %"class.base::BasicStringPiece"* [ %128, %121 ], [ %107, %111 ]
  %124 = phi i64 [ %129, %121 ], [ %119, %111 ]
  %125 = bitcast %"class.base::BasicStringPiece"* %123 to i8*
  %126 = bitcast %"class.base::BasicStringPiece"* %122 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %125, i8* align 8 %126, i64 16, i1 false) #12
  %127 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %122, i64 1
  %128 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %123, i64 1
  %129 = add i64 %124, -1
  %130 = icmp eq i64 %129, 0
  br i1 %130, label %131, label %121, !llvm.loop !5

131:                                              ; preds = %121, %111
  %132 = phi %"class.base::BasicStringPiece"* [ %105, %111 ], [ %127, %121 ]
  %133 = phi %"class.base::BasicStringPiece"* [ %107, %111 ], [ %128, %121 ]
  %134 = icmp ult i64 %116, 48
  br i1 %134, label %207, label %135

135:                                              ; preds = %131, %135
  %136 = phi %"class.base::BasicStringPiece"* [ %152, %135 ], [ %132, %131 ]
  %137 = phi %"class.base::BasicStringPiece"* [ %153, %135 ], [ %133, %131 ]
  %138 = bitcast %"class.base::BasicStringPiece"* %137 to i8*
  %139 = bitcast %"class.base::BasicStringPiece"* %136 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %138, i8* align 8 %139, i64 16, i1 false) #12
  %140 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %136, i64 1
  %141 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %137, i64 1
  %142 = bitcast %"class.base::BasicStringPiece"* %141 to i8*
  %143 = bitcast %"class.base::BasicStringPiece"* %140 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %142, i8* align 8 %143, i64 16, i1 false) #12
  %144 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %136, i64 2
  %145 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %137, i64 2
  %146 = bitcast %"class.base::BasicStringPiece"* %145 to i8*
  %147 = bitcast %"class.base::BasicStringPiece"* %144 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %146, i8* align 8 %147, i64 16, i1 false) #12
  %148 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %136, i64 3
  %149 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %137, i64 3
  %150 = bitcast %"class.base::BasicStringPiece"* %149 to i8*
  %151 = bitcast %"class.base::BasicStringPiece"* %148 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %150, i8* align 8 %151, i64 16, i1 false) #12
  %152 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %136, i64 4
  %153 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %137, i64 4
  %154 = icmp eq %"class.base::BasicStringPiece"* %152, %76
  br i1 %154, label %207, label %135

155:                                              ; preds = %104
  %156 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %106, i64 0, i32 0
  %157 = load i8*, i8** %156, align 8
  %158 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %106, i64 0, i32 1
  %159 = load i64, i64* %158, align 8
  %160 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %105, i64 0, i32 0
  %161 = load i8*, i8** %160, align 8
  %162 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %105, i64 0, i32 1
  %163 = load i64, i64* %162, align 8
  %164 = icmp ugt i64 %159, %163
  %165 = select i1 %164, i64 %163, i64 %159
  %166 = tail call i32 @memcmp(i8* %157, i8* %161, i64 %165) #12
  %167 = icmp eq i32 %166, 0
  br i1 %167, label %168, label %170

168:                                              ; preds = %155
  %169 = icmp ult i64 %159, %163
  br i1 %169, label %172, label %176

170:                                              ; preds = %155
  %171 = icmp slt i32 %166, 0
  br i1 %171, label %172, label %176

172:                                              ; preds = %170, %168
  %173 = bitcast %"class.base::BasicStringPiece"* %107 to i8*
  %174 = bitcast %"class.base::BasicStringPiece"* %106 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %173, i8* align 8 %174, i64 16, i1 false) #12
  %175 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %106, i64 1
  br label %180

176:                                              ; preds = %170, %168
  %177 = bitcast %"class.base::BasicStringPiece"* %107 to i8*
  %178 = bitcast %"class.base::BasicStringPiece"* %105 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %177, i8* align 8 %178, i64 16, i1 false) #12
  %179 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %105, i64 1
  br label %180

180:                                              ; preds = %176, %172
  %181 = phi %"class.base::BasicStringPiece"* [ %175, %172 ], [ %106, %176 ]
  %182 = phi %"class.base::BasicStringPiece"* [ %105, %172 ], [ %179, %176 ]
  %183 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %107, i64 1
  %184 = icmp eq %"class.base::BasicStringPiece"* %182, %76
  br i1 %184, label %78, label %104

185:                                              ; preds = %100, %185
  %186 = phi %"class.base::BasicStringPiece"* [ %202, %185 ], [ %101, %100 ]
  %187 = phi %"class.base::BasicStringPiece"* [ %203, %185 ], [ %102, %100 ]
  %188 = bitcast %"class.base::BasicStringPiece"* %187 to i8*
  %189 = bitcast %"class.base::BasicStringPiece"* %186 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %188, i8* align 8 %189, i64 16, i1 false) #12
  %190 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %186, i64 1
  %191 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %187, i64 1
  %192 = bitcast %"class.base::BasicStringPiece"* %191 to i8*
  %193 = bitcast %"class.base::BasicStringPiece"* %190 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %192, i8* align 8 %193, i64 16, i1 false) #12
  %194 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %186, i64 2
  %195 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %187, i64 2
  %196 = bitcast %"class.base::BasicStringPiece"* %195 to i8*
  %197 = bitcast %"class.base::BasicStringPiece"* %194 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %196, i8* align 8 %197, i64 16, i1 false) #12
  %198 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %186, i64 3
  %199 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %187, i64 3
  %200 = bitcast %"class.base::BasicStringPiece"* %199 to i8*
  %201 = bitcast %"class.base::BasicStringPiece"* %198 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %200, i8* align 8 %201, i64 16, i1 false) #12
  %202 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %186, i64 4
  %203 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %187, i64 4
  %204 = icmp eq %"class.base::BasicStringPiece"* %202, %77
  br i1 %204, label %207, label %185

205:                                              ; preds = %70
  tail call void @_ZNSt3__113__stable_sortIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_T_NS_15iterator_traitsISL_E15difference_typeEPNSO_10value_typeEl(%"class.base::BasicStringPiece"* %0, %"class.base::BasicStringPiece"* %72, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* dereferenceable(1) %2, i64 %71, %"class.base::BasicStringPiece"* %4, i64 %5)
  %206 = sub nsw i64 %3, %71
  tail call void @_ZNSt3__113__stable_sortIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_T_NS_15iterator_traitsISL_E15difference_typeEPNSO_10value_typeEl(%"class.base::BasicStringPiece"* %72, %"class.base::BasicStringPiece"* %1, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* dereferenceable(1) %2, i64 %206, %"class.base::BasicStringPiece"* %4, i64 %5)
  tail call void @_ZNSt3__115__inplace_mergeIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_SL_T_NS_15iterator_traitsISL_E15difference_typeESP_PNSO_10value_typeEl(%"class.base::BasicStringPiece"* %0, %"class.base::BasicStringPiece"* %72, %"class.base::BasicStringPiece"* %1, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* dereferenceable(1) %2, i64 %71, i64 %206, %"class.base::BasicStringPiece"* %4, i64 %5)
  ret void

207:                                              ; preds = %100, %185, %131, %135, %60, %22, %109, %78, %34, %32, %24, %26, %6, %6
  ret void
}

; Function Attrs: nobuiltin nofree nounwind
declare noalias i8* @_ZnwmRKSt9nothrow_t(i64, %"struct.std::nothrow_t"* dereferenceable(1)) local_unnamed_addr #11

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__118__stable_sort_moveIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_T_NS_15iterator_traitsISL_E15difference_typeEPNSO_10value_typeE(%"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* dereferenceable(1), i64, %"class.base::BasicStringPiece"*) local_unnamed_addr #0 comdat {
  switch i64 %3, label %41 [
    i64 0, label %180
    i64 1, label %6
    i64 2, label %9
  ]

6:                                                ; preds = %5
  %7 = bitcast %"class.base::BasicStringPiece"* %4 to i8*
  %8 = bitcast %"class.base::BasicStringPiece"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 8 %8, i64 16, i1 false)
  br label %180

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 -1
  %11 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %10, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 -1, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %18 = load i64, i64* %17, align 8
  %19 = icmp ugt i64 %14, %18
  %20 = select i1 %19, i64 %18, i64 %14
  %21 = tail call i32 @memcmp(i8* %12, i8* %16, i64 %20) #12
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %26

23:                                               ; preds = %9
  %24 = icmp ult i64 %14, %18
  %25 = bitcast %"class.base::BasicStringPiece"* %4 to i8*
  br i1 %24, label %29, label %35

26:                                               ; preds = %9
  %27 = icmp slt i32 %21, 0
  %28 = bitcast %"class.base::BasicStringPiece"* %4 to i8*
  br i1 %27, label %29, label %35

29:                                               ; preds = %23, %26
  %30 = phi i8* [ %28, %26 ], [ %25, %23 ]
  %31 = bitcast %"class.base::BasicStringPiece"* %10 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %30, i8* align 8 %31, i64 16, i1 false)
  %32 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %4, i64 1
  %33 = bitcast %"class.base::BasicStringPiece"* %32 to i8*
  %34 = bitcast %"class.base::BasicStringPiece"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %33, i8* align 8 %34, i64 16, i1 false)
  br label %180

35:                                               ; preds = %23, %26
  %36 = phi i8* [ %28, %26 ], [ %25, %23 ]
  %37 = bitcast %"class.base::BasicStringPiece"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %36, i8* align 8 %37, i64 16, i1 false)
  %38 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %4, i64 1
  %39 = bitcast %"class.base::BasicStringPiece"* %38 to i8*
  %40 = bitcast %"class.base::BasicStringPiece"* %10 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %39, i8* align 8 %40, i64 16, i1 false)
  br label %180

41:                                               ; preds = %5
  %42 = icmp slt i64 %3, 9
  br i1 %42, label %43, label %44

43:                                               ; preds = %41
  tail call void @_ZNSt3__121__insertion_sort_moveIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_PNS_15iterator_traitsISL_E10value_typeET_(%"class.base::BasicStringPiece"* %0, %"class.base::BasicStringPiece"* %1, %"class.base::BasicStringPiece"* %4, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* dereferenceable(1) %2)
  br label %180

44:                                               ; preds = %41
  %45 = lshr i64 %3, 1
  %46 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 %45
  tail call void @_ZNSt3__113__stable_sortIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_T_NS_15iterator_traitsISL_E15difference_typeEPNSO_10value_typeEl(%"class.base::BasicStringPiece"* %0, %"class.base::BasicStringPiece"* %46, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* dereferenceable(1) %2, i64 %45, %"class.base::BasicStringPiece"* %4, i64 %45)
  %47 = sub nsw i64 %3, %45
  %48 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %4, i64 %45
  tail call void @_ZNSt3__113__stable_sortIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_T_NS_15iterator_traitsISL_E15difference_typeEPNSO_10value_typeEl(%"class.base::BasicStringPiece"* %46, %"class.base::BasicStringPiece"* %1, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* dereferenceable(1) %2, i64 %47, %"class.base::BasicStringPiece"* %48, i64 %47)
  %49 = icmp eq i64 %45, 0
  br i1 %49, label %50, label %97

50:                                               ; preds = %175, %44
  %51 = phi %"class.base::BasicStringPiece"* [ %46, %44 ], [ %176, %175 ]
  %52 = phi %"class.base::BasicStringPiece"* [ %4, %44 ], [ %178, %175 ]
  %53 = icmp eq %"class.base::BasicStringPiece"* %51, %1
  br i1 %53, label %180, label %54

54:                                               ; preds = %50
  %55 = ptrtoint %"class.base::BasicStringPiece"* %51 to i64
  %56 = getelementptr %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 -1, i32 0
  %57 = ptrtoint i8** %56 to i64
  %58 = sub i64 %57, %55
  %59 = lshr i64 %58, 4
  %60 = add nuw nsw i64 %59, 1
  %61 = and i64 %60, 3
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %73, label %63

63:                                               ; preds = %54, %63
  %64 = phi %"class.base::BasicStringPiece"* [ %70, %63 ], [ %52, %54 ]
  %65 = phi %"class.base::BasicStringPiece"* [ %69, %63 ], [ %51, %54 ]
  %66 = phi i64 [ %71, %63 ], [ %61, %54 ]
  %67 = bitcast %"class.base::BasicStringPiece"* %64 to i8*
  %68 = bitcast %"class.base::BasicStringPiece"* %65 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %67, i8* align 8 %68, i64 16, i1 false) #12
  %69 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %65, i64 1
  %70 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %64, i64 1
  %71 = add i64 %66, -1
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %73, label %63, !llvm.loop !6

73:                                               ; preds = %63, %54
  %74 = phi %"class.base::BasicStringPiece"* [ %52, %54 ], [ %70, %63 ]
  %75 = phi %"class.base::BasicStringPiece"* [ %51, %54 ], [ %69, %63 ]
  %76 = icmp ult i64 %58, 48
  br i1 %76, label %180, label %77

77:                                               ; preds = %73, %77
  %78 = phi %"class.base::BasicStringPiece"* [ %95, %77 ], [ %74, %73 ]
  %79 = phi %"class.base::BasicStringPiece"* [ %94, %77 ], [ %75, %73 ]
  %80 = bitcast %"class.base::BasicStringPiece"* %78 to i8*
  %81 = bitcast %"class.base::BasicStringPiece"* %79 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %80, i8* align 8 %81, i64 16, i1 false) #12
  %82 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %79, i64 1
  %83 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %78, i64 1
  %84 = bitcast %"class.base::BasicStringPiece"* %83 to i8*
  %85 = bitcast %"class.base::BasicStringPiece"* %82 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %84, i8* align 8 %85, i64 16, i1 false) #12
  %86 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %79, i64 2
  %87 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %78, i64 2
  %88 = bitcast %"class.base::BasicStringPiece"* %87 to i8*
  %89 = bitcast %"class.base::BasicStringPiece"* %86 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %88, i8* align 8 %89, i64 16, i1 false) #12
  %90 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %79, i64 3
  %91 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %78, i64 3
  %92 = bitcast %"class.base::BasicStringPiece"* %91 to i8*
  %93 = bitcast %"class.base::BasicStringPiece"* %90 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %92, i8* align 8 %93, i64 16, i1 false) #12
  %94 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %79, i64 4
  %95 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %78, i64 4
  %96 = icmp eq %"class.base::BasicStringPiece"* %94, %1
  br i1 %96, label %180, label %77

97:                                               ; preds = %44, %175
  %98 = phi %"class.base::BasicStringPiece"* [ %178, %175 ], [ %4, %44 ]
  %99 = phi %"class.base::BasicStringPiece"* [ %177, %175 ], [ %0, %44 ]
  %100 = phi %"class.base::BasicStringPiece"* [ %176, %175 ], [ %46, %44 ]
  %101 = icmp eq %"class.base::BasicStringPiece"* %100, %1
  br i1 %101, label %102, label %148

102:                                              ; preds = %97
  %103 = icmp eq %"class.base::BasicStringPiece"* %99, %46
  br i1 %103, label %180, label %104

104:                                              ; preds = %102
  %105 = ptrtoint %"class.base::BasicStringPiece"* %99 to i64
  %106 = add nsw i64 %45, -1
  %107 = getelementptr %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 %106, i32 0
  %108 = ptrtoint i8** %107 to i64
  %109 = sub i64 %108, %105
  %110 = lshr i64 %109, 4
  %111 = add nuw nsw i64 %110, 1
  %112 = and i64 %111, 3
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %124, label %114

114:                                              ; preds = %104, %114
  %115 = phi %"class.base::BasicStringPiece"* [ %121, %114 ], [ %98, %104 ]
  %116 = phi %"class.base::BasicStringPiece"* [ %120, %114 ], [ %99, %104 ]
  %117 = phi i64 [ %122, %114 ], [ %112, %104 ]
  %118 = bitcast %"class.base::BasicStringPiece"* %115 to i8*
  %119 = bitcast %"class.base::BasicStringPiece"* %116 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %118, i8* align 8 %119, i64 16, i1 false) #12
  %120 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %116, i64 1
  %121 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %115, i64 1
  %122 = add i64 %117, -1
  %123 = icmp eq i64 %122, 0
  br i1 %123, label %124, label %114, !llvm.loop !7

124:                                              ; preds = %114, %104
  %125 = phi %"class.base::BasicStringPiece"* [ %98, %104 ], [ %121, %114 ]
  %126 = phi %"class.base::BasicStringPiece"* [ %99, %104 ], [ %120, %114 ]
  %127 = icmp ult i64 %109, 48
  br i1 %127, label %180, label %128

128:                                              ; preds = %124, %128
  %129 = phi %"class.base::BasicStringPiece"* [ %146, %128 ], [ %125, %124 ]
  %130 = phi %"class.base::BasicStringPiece"* [ %145, %128 ], [ %126, %124 ]
  %131 = bitcast %"class.base::BasicStringPiece"* %129 to i8*
  %132 = bitcast %"class.base::BasicStringPiece"* %130 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %131, i8* align 8 %132, i64 16, i1 false) #12
  %133 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %130, i64 1
  %134 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %129, i64 1
  %135 = bitcast %"class.base::BasicStringPiece"* %134 to i8*
  %136 = bitcast %"class.base::BasicStringPiece"* %133 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %135, i8* align 8 %136, i64 16, i1 false) #12
  %137 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %130, i64 2
  %138 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %129, i64 2
  %139 = bitcast %"class.base::BasicStringPiece"* %138 to i8*
  %140 = bitcast %"class.base::BasicStringPiece"* %137 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %139, i8* align 8 %140, i64 16, i1 false) #12
  %141 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %130, i64 3
  %142 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %129, i64 3
  %143 = bitcast %"class.base::BasicStringPiece"* %142 to i8*
  %144 = bitcast %"class.base::BasicStringPiece"* %141 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %143, i8* align 8 %144, i64 16, i1 false) #12
  %145 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %130, i64 4
  %146 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %129, i64 4
  %147 = icmp eq %"class.base::BasicStringPiece"* %145, %46
  br i1 %147, label %180, label %128

148:                                              ; preds = %97
  %149 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %100, i64 0, i32 0
  %150 = load i8*, i8** %149, align 8
  %151 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %100, i64 0, i32 1
  %152 = load i64, i64* %151, align 8
  %153 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %99, i64 0, i32 0
  %154 = load i8*, i8** %153, align 8
  %155 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %99, i64 0, i32 1
  %156 = load i64, i64* %155, align 8
  %157 = icmp ugt i64 %152, %156
  %158 = select i1 %157, i64 %156, i64 %152
  %159 = tail call i32 @memcmp(i8* %150, i8* %154, i64 %158) #12
  %160 = icmp eq i32 %159, 0
  br i1 %160, label %161, label %164

161:                                              ; preds = %148
  %162 = icmp ult i64 %152, %156
  %163 = bitcast %"class.base::BasicStringPiece"* %98 to i8*
  br i1 %162, label %167, label %171

164:                                              ; preds = %148
  %165 = icmp slt i32 %159, 0
  %166 = bitcast %"class.base::BasicStringPiece"* %98 to i8*
  br i1 %165, label %167, label %171

167:                                              ; preds = %164, %161
  %168 = phi i8* [ %166, %164 ], [ %163, %161 ]
  %169 = bitcast %"class.base::BasicStringPiece"* %100 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %168, i8* align 8 %169, i64 16, i1 false) #12
  %170 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %100, i64 1
  br label %175

171:                                              ; preds = %164, %161
  %172 = phi i8* [ %166, %164 ], [ %163, %161 ]
  %173 = bitcast %"class.base::BasicStringPiece"* %99 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %172, i8* align 8 %173, i64 16, i1 false) #12
  %174 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %99, i64 1
  br label %175

175:                                              ; preds = %171, %167
  %176 = phi %"class.base::BasicStringPiece"* [ %170, %167 ], [ %100, %171 ]
  %177 = phi %"class.base::BasicStringPiece"* [ %99, %167 ], [ %174, %171 ]
  %178 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %98, i64 1
  %179 = icmp eq %"class.base::BasicStringPiece"* %177, %46
  br i1 %179, label %50, label %97

180:                                              ; preds = %124, %128, %73, %77, %102, %50, %29, %35, %5, %43, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__115__inplace_mergeIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_SL_T_NS_15iterator_traitsISL_E15difference_typeESP_PNSO_10value_typeEl(%"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* dereferenceable(1), i64, i64, %"class.base::BasicStringPiece"*, i64) local_unnamed_addr #0 comdat {
  %9 = icmp eq i64 %5, 0
  br i1 %9, label %319, label %10

10:                                               ; preds = %8
  %11 = ptrtoint %"class.base::BasicStringPiece"* %1 to i64
  %12 = ptrtoint %"class.base::BasicStringPiece"* %0 to i64
  br label %13

13:                                               ; preds = %10, %312
  %14 = phi %"class.base::BasicStringPiece"* [ %317, %312 ], [ %2, %10 ]
  %15 = phi i64 [ %316, %312 ], [ %4, %10 ]
  %16 = phi i64 [ %315, %312 ], [ %5, %10 ]
  %17 = phi i64 [ %314, %312 ], [ %11, %10 ]
  %18 = phi i64 [ %313, %312 ], [ %12, %10 ]
  %19 = icmp sgt i64 %15, %7
  %20 = icmp sgt i64 %16, %7
  %21 = and i1 %20, %19
  br i1 %21, label %22, label %30

22:                                               ; preds = %13
  %23 = icmp eq i64 %15, 0
  br i1 %23, label %319, label %24

24:                                               ; preds = %22
  %25 = inttoptr i64 %17 to %"class.base::BasicStringPiece"*
  %26 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %25, i64 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %25, i64 0, i32 1
  %29 = load i64, i64* %28, align 8
  br label %33

30:                                               ; preds = %13
  %31 = inttoptr i64 %18 to %"class.base::BasicStringPiece"*
  %32 = inttoptr i64 %17 to %"class.base::BasicStringPiece"*
  tail call void @_ZNSt3__124__buffered_inplace_mergeIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_SL_T_NS_15iterator_traitsISL_E15difference_typeESP_PNSO_10value_typeE(%"class.base::BasicStringPiece"* %31, %"class.base::BasicStringPiece"* %32, %"class.base::BasicStringPiece"* %14, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* dereferenceable(1) %3, i64 %15, i64 %16, %"class.base::BasicStringPiece"* %6)
  br label %319

33:                                               ; preds = %24, %49
  %34 = phi i64 [ %15, %24 ], [ %52, %49 ]
  %35 = phi i64 [ %18, %24 ], [ %51, %49 ]
  %36 = inttoptr i64 %35 to %"class.base::BasicStringPiece"*
  %37 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %36, i64 0, i32 0
  %38 = load i8*, i8** %37, align 8
  %39 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %36, i64 0, i32 1
  %40 = load i64, i64* %39, align 8
  %41 = icmp ugt i64 %29, %40
  %42 = select i1 %41, i64 %40, i64 %29
  %43 = tail call i32 @memcmp(i8* %27, i8* %38, i64 %42) #12
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %47

45:                                               ; preds = %33
  %46 = icmp ult i64 %29, %40
  br i1 %46, label %54, label %49

47:                                               ; preds = %33
  %48 = icmp slt i32 %43, 0
  br i1 %48, label %54, label %49

49:                                               ; preds = %45, %47
  %50 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %36, i64 1
  %51 = ptrtoint %"class.base::BasicStringPiece"* %50 to i64
  %52 = add nsw i64 %34, -1
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %319, label %33

54:                                               ; preds = %45, %47
  %55 = inttoptr i64 %35 to %"class.base::BasicStringPiece"*
  %56 = icmp slt i64 %34, %16
  br i1 %56, label %57, label %97

57:                                               ; preds = %54
  %58 = sdiv i64 %16, 2
  %59 = sub i64 %17, %35
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %92, label %61

61:                                               ; preds = %57
  %62 = ashr exact i64 %59, 4
  %63 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %25, i64 %58, i32 0
  %64 = load i8*, i8** %63, align 8
  %65 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %25, i64 %58, i32 1
  %66 = load i64, i64* %65, align 8
  br label %67

67:                                               ; preds = %88, %61
  %68 = phi %"class.base::BasicStringPiece"* [ %55, %61 ], [ %90, %88 ]
  %69 = phi i64 [ %62, %61 ], [ %89, %88 ]
  %70 = lshr i64 %69, 1
  %71 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %68, i64 %70
  %72 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %71, i64 0, i32 0
  %73 = load i8*, i8** %72, align 8
  %74 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %68, i64 %70, i32 1
  %75 = load i64, i64* %74, align 8
  %76 = icmp ugt i64 %66, %75
  %77 = select i1 %76, i64 %75, i64 %66
  %78 = tail call i32 @memcmp(i8* %64, i8* %73, i64 %77) #12
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %82

80:                                               ; preds = %67
  %81 = icmp ult i64 %66, %75
  br i1 %81, label %88, label %84

82:                                               ; preds = %67
  %83 = icmp slt i32 %78, 0
  br i1 %83, label %88, label %84

84:                                               ; preds = %82, %80
  %85 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %71, i64 1
  %86 = xor i64 %70, -1
  %87 = add i64 %69, %86
  br label %88

88:                                               ; preds = %84, %82, %80
  %89 = phi i64 [ %87, %84 ], [ %70, %82 ], [ %70, %80 ]
  %90 = phi %"class.base::BasicStringPiece"* [ %85, %84 ], [ %68, %82 ], [ %68, %80 ]
  %91 = icmp eq i64 %89, 0
  br i1 %91, label %92, label %67

92:                                               ; preds = %88, %57
  %93 = phi %"class.base::BasicStringPiece"* [ %55, %57 ], [ %90, %88 ]
  %94 = ptrtoint %"class.base::BasicStringPiece"* %93 to i64
  %95 = sub i64 %94, %35
  %96 = ashr exact i64 %95, 4
  br label %152

97:                                               ; preds = %54
  %98 = icmp eq i64 %34, 1
  br i1 %98, label %99, label %107

99:                                               ; preds = %97
  %100 = inttoptr i64 %17 to %"class.base::BasicStringPiece"*
  %101 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %100, i64 0, i32 1
  %102 = inttoptr i64 %35 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = inttoptr i64 %35 to i8*
  %105 = inttoptr i64 %17 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %104, i8* align 8 %105, i64 16, i1 false) #12
  %106 = inttoptr i64 %17 to i64*
  store i64 %103, i64* %106, align 8
  store i64 %40, i64* %101, align 8
  br label %319

107:                                              ; preds = %97
  %108 = sdiv i64 %34, 2
  %109 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %55, i64 %108
  %110 = ptrtoint %"class.base::BasicStringPiece"* %109 to i64
  %111 = ptrtoint %"class.base::BasicStringPiece"* %14 to i64
  %112 = sub i64 %111, %17
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %146, label %114

114:                                              ; preds = %107
  %115 = ashr exact i64 %112, 4
  %116 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %109, i64 0, i32 0
  %117 = load i8*, i8** %116, align 8
  %118 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %55, i64 %108, i32 1
  %119 = load i64, i64* %118, align 8
  br label %120

120:                                              ; preds = %142, %114
  %121 = phi i64 [ 0, %114 ], [ %144, %142 ]
  %122 = phi i64 [ %115, %114 ], [ %143, %142 ]
  %123 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %25, i64 %121
  %124 = lshr i64 %122, 1
  %125 = add nsw i64 %124, %121
  %126 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %25, i64 %125, i32 0
  %127 = load i8*, i8** %126, align 8
  %128 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %123, i64 %124, i32 1
  %129 = load i64, i64* %128, align 8
  %130 = icmp ugt i64 %129, %119
  %131 = select i1 %130, i64 %119, i64 %129
  %132 = tail call i32 @memcmp(i8* %127, i8* %117, i64 %131) #12
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %134, label %136

134:                                              ; preds = %120
  %135 = icmp ult i64 %129, %119
  br i1 %135, label %138, label %142

136:                                              ; preds = %120
  %137 = icmp slt i32 %132, 0
  br i1 %137, label %138, label %142

138:                                              ; preds = %136, %134
  %139 = add nsw i64 %125, 1
  %140 = xor i64 %124, -1
  %141 = add i64 %122, %140
  br label %142

142:                                              ; preds = %138, %136, %134
  %143 = phi i64 [ %141, %138 ], [ %124, %136 ], [ %124, %134 ]
  %144 = phi i64 [ %139, %138 ], [ %121, %136 ], [ %121, %134 ]
  %145 = icmp eq i64 %143, 0
  br i1 %145, label %146, label %120

146:                                              ; preds = %142, %107
  %147 = phi i64 [ 0, %107 ], [ %144, %142 ]
  %148 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %25, i64 %147
  %149 = ptrtoint %"class.base::BasicStringPiece"* %148 to i64
  %150 = sub i64 %149, %17
  %151 = ashr exact i64 %150, 4
  br label %152

152:                                              ; preds = %146, %92
  %153 = phi i64 [ %94, %92 ], [ %110, %146 ]
  %154 = phi i64 [ %58, %92 ], [ %147, %146 ]
  %155 = phi i64 [ %58, %92 ], [ %151, %146 ]
  %156 = phi i64 [ %96, %92 ], [ %108, %146 ]
  %157 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %25, i64 %154
  %158 = ptrtoint %"class.base::BasicStringPiece"* %157 to i64
  %159 = sub nsw i64 %34, %156
  %160 = sub nsw i64 %16, %155
  %161 = inttoptr i64 %153 to %"class.base::BasicStringPiece"*
  %162 = icmp eq %"class.base::BasicStringPiece"* %161, %25
  br i1 %162, label %304, label %163

163:                                              ; preds = %152
  %164 = icmp eq i64 %154, 0
  br i1 %164, label %304, label %165

165:                                              ; preds = %163
  %166 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %161, i64 1
  %167 = icmp eq %"class.base::BasicStringPiece"* %166, %25
  br i1 %167, label %168, label %183

168:                                              ; preds = %165
  %169 = inttoptr i64 %153 to i64*
  %170 = load i64, i64* %169, align 8
  %171 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %161, i64 0, i32 1
  %172 = load i64, i64* %171, align 8
  %173 = sub i64 %158, %17
  %174 = ashr exact i64 %173, 4
  %175 = icmp eq i64 %173, 0
  br i1 %175, label %179, label %176

176:                                              ; preds = %168
  %177 = inttoptr i64 %153 to i8*
  %178 = inttoptr i64 %17 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %177, i8* align 8 %178, i64 %173, i1 false) #12
  br label %179

179:                                              ; preds = %176, %168
  %180 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %161, i64 %174
  %181 = bitcast %"class.base::BasicStringPiece"* %180 to i64*
  store i64 %170, i64* %181, align 8
  %182 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %161, i64 %174, i32 1
  store i64 %172, i64* %182, align 8
  br label %304

183:                                              ; preds = %165
  %184 = icmp eq i64 %154, 1
  br i1 %184, label %185, label %204

185:                                              ; preds = %183
  %186 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %157, i64 -1
  %187 = bitcast %"class.base::BasicStringPiece"* %186 to i64*
  %188 = load i64, i64* %187, align 8
  %189 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %157, i64 -1, i32 1
  %190 = load i64, i64* %189, align 8
  %191 = ptrtoint %"class.base::BasicStringPiece"* %186 to i64
  %192 = sub i64 %191, %153
  %193 = icmp eq i64 %192, 0
  br i1 %193, label %200, label %194

194:                                              ; preds = %185
  %195 = ashr exact i64 %192, 4
  %196 = sub nsw i64 0, %195
  %197 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %157, i64 %196
  %198 = bitcast %"class.base::BasicStringPiece"* %197 to i8*
  %199 = inttoptr i64 %153 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %198, i8* align 8 %199, i64 %192, i1 false) #12
  br label %200

200:                                              ; preds = %194, %185
  %201 = phi %"class.base::BasicStringPiece"* [ %197, %194 ], [ %157, %185 ]
  %202 = inttoptr i64 %153 to i64*
  store i64 %188, i64* %202, align 8
  %203 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %161, i64 0, i32 1
  store i64 %190, i64* %203, align 8
  br label %304

204:                                              ; preds = %183
  %205 = sub i64 %17, %153
  %206 = ashr exact i64 %205, 4
  %207 = sub i64 %158, %17
  %208 = ashr exact i64 %207, 4
  %209 = icmp eq i64 %206, %208
  br i1 %209, label %210, label %269

210:                                              ; preds = %204
  %211 = getelementptr %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %25, i64 -1
  %212 = bitcast %"class.base::BasicStringPiece"* %211 to i8*
  %213 = sub i64 0, %153
  %214 = getelementptr i8, i8* %212, i64 %213
  %215 = ptrtoint i8* %214 to i64
  %216 = lshr i64 %215, 4
  %217 = add nuw nsw i64 %216, 1
  %218 = and i64 %217, 3
  %219 = icmp eq i64 %218, 0
  br i1 %219, label %233, label %220

220:                                              ; preds = %210, %220
  %221 = phi %"class.base::BasicStringPiece"* [ %230, %220 ], [ %25, %210 ]
  %222 = phi %"class.base::BasicStringPiece"* [ %229, %220 ], [ %161, %210 ]
  %223 = phi i64 [ %231, %220 ], [ %218, %210 ]
  %224 = bitcast %"class.base::BasicStringPiece"* %222 to <2 x i64>*
  %225 = load <2 x i64>, <2 x i64>* %224, align 8
  %226 = bitcast %"class.base::BasicStringPiece"* %222 to i8*
  %227 = bitcast %"class.base::BasicStringPiece"* %221 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %226, i8* align 8 %227, i64 16, i1 false) #12
  %228 = bitcast %"class.base::BasicStringPiece"* %221 to <2 x i64>*
  store <2 x i64> %225, <2 x i64>* %228, align 8
  %229 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %222, i64 1
  %230 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %221, i64 1
  %231 = add i64 %223, -1
  %232 = icmp eq i64 %231, 0
  br i1 %232, label %233, label %220, !llvm.loop !8

233:                                              ; preds = %220, %210
  %234 = phi %"class.base::BasicStringPiece"* [ %25, %210 ], [ %230, %220 ]
  %235 = phi %"class.base::BasicStringPiece"* [ %161, %210 ], [ %229, %220 ]
  %236 = icmp ult i8* %214, inttoptr (i64 48 to i8*)
  br i1 %236, label %304, label %237

237:                                              ; preds = %233, %237
  %238 = phi %"class.base::BasicStringPiece"* [ %267, %237 ], [ %234, %233 ]
  %239 = phi %"class.base::BasicStringPiece"* [ %266, %237 ], [ %235, %233 ]
  %240 = bitcast %"class.base::BasicStringPiece"* %239 to <2 x i64>*
  %241 = load <2 x i64>, <2 x i64>* %240, align 8
  %242 = bitcast %"class.base::BasicStringPiece"* %239 to i8*
  %243 = bitcast %"class.base::BasicStringPiece"* %238 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %242, i8* align 8 %243, i64 16, i1 false) #12
  %244 = bitcast %"class.base::BasicStringPiece"* %238 to <2 x i64>*
  store <2 x i64> %241, <2 x i64>* %244, align 8
  %245 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %239, i64 1
  %246 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %238, i64 1
  %247 = bitcast %"class.base::BasicStringPiece"* %245 to <2 x i64>*
  %248 = load <2 x i64>, <2 x i64>* %247, align 8
  %249 = bitcast %"class.base::BasicStringPiece"* %245 to i8*
  %250 = bitcast %"class.base::BasicStringPiece"* %246 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %249, i8* align 8 %250, i64 16, i1 false) #12
  %251 = bitcast %"class.base::BasicStringPiece"* %246 to <2 x i64>*
  store <2 x i64> %248, <2 x i64>* %251, align 8
  %252 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %239, i64 2
  %253 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %238, i64 2
  %254 = bitcast %"class.base::BasicStringPiece"* %252 to <2 x i64>*
  %255 = load <2 x i64>, <2 x i64>* %254, align 8
  %256 = bitcast %"class.base::BasicStringPiece"* %252 to i8*
  %257 = bitcast %"class.base::BasicStringPiece"* %253 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %256, i8* align 8 %257, i64 16, i1 false) #12
  %258 = bitcast %"class.base::BasicStringPiece"* %253 to <2 x i64>*
  store <2 x i64> %255, <2 x i64>* %258, align 8
  %259 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %239, i64 3
  %260 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %238, i64 3
  %261 = bitcast %"class.base::BasicStringPiece"* %259 to <2 x i64>*
  %262 = load <2 x i64>, <2 x i64>* %261, align 8
  %263 = bitcast %"class.base::BasicStringPiece"* %259 to i8*
  %264 = bitcast %"class.base::BasicStringPiece"* %260 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %263, i8* align 8 %264, i64 16, i1 false) #12
  %265 = bitcast %"class.base::BasicStringPiece"* %260 to <2 x i64>*
  store <2 x i64> %262, <2 x i64>* %265, align 8
  %266 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %239, i64 4
  %267 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %238, i64 4
  %268 = icmp eq %"class.base::BasicStringPiece"* %266, %25
  br i1 %268, label %304, label %237

269:                                              ; preds = %204, %269
  %270 = phi i64 [ %272, %269 ], [ %208, %204 ]
  %271 = phi i64 [ %270, %269 ], [ %206, %204 ]
  %272 = srem i64 %271, %270
  %273 = icmp eq i64 %272, 0
  br i1 %273, label %274, label %269

274:                                              ; preds = %269
  %275 = icmp eq i64 %270, 0
  br i1 %275, label %278, label %276

276:                                              ; preds = %274
  %277 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %161, i64 %270
  br label %280

278:                                              ; preds = %301, %274
  %279 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %161, i64 %208
  br label %304

280:                                              ; preds = %301, %276
  %281 = phi %"class.base::BasicStringPiece"* [ %282, %301 ], [ %277, %276 ]
  %282 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %281, i64 -1
  %283 = ptrtoint %"class.base::BasicStringPiece"* %282 to i64
  %284 = bitcast %"class.base::BasicStringPiece"* %282 to <2 x i64>*
  %285 = load <2 x i64>, <2 x i64>* %284, align 8
  %286 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %282, i64 %206
  br label %287

287:                                              ; preds = %287, %280
  %288 = phi i64 [ %283, %280 ], [ %290, %287 ]
  %289 = phi %"class.base::BasicStringPiece"* [ %286, %280 ], [ %299, %287 ]
  %290 = ptrtoint %"class.base::BasicStringPiece"* %289 to i64
  %291 = inttoptr i64 %288 to i8*
  %292 = bitcast %"class.base::BasicStringPiece"* %289 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %291, i8* align 8 %292, i64 16, i1 false) #12
  %293 = sub i64 %158, %290
  %294 = ashr exact i64 %293, 4
  %295 = icmp slt i64 %206, %294
  %296 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %289, i64 %206
  %297 = sub nsw i64 %206, %294
  %298 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %161, i64 %297
  %299 = select i1 %295, %"class.base::BasicStringPiece"* %296, %"class.base::BasicStringPiece"* %298
  %300 = icmp eq %"class.base::BasicStringPiece"* %299, %282
  br i1 %300, label %301, label %287

301:                                              ; preds = %287
  %302 = bitcast %"class.base::BasicStringPiece"* %289 to <2 x i64>*
  store <2 x i64> %285, <2 x i64>* %302, align 8
  %303 = icmp eq %"class.base::BasicStringPiece"* %282, %161
  br i1 %303, label %278, label %280

304:                                              ; preds = %233, %237, %278, %200, %179, %152, %163
  %305 = phi %"class.base::BasicStringPiece"* [ %161, %163 ], [ %157, %152 ], [ %180, %179 ], [ %201, %200 ], [ %279, %278 ], [ %25, %237 ], [ %25, %233 ]
  %306 = add nsw i64 %156, %155
  %307 = add nsw i64 %159, %160
  %308 = icmp slt i64 %306, %307
  br i1 %308, label %309, label %311

309:                                              ; preds = %304
  %310 = ptrtoint %"class.base::BasicStringPiece"* %305 to i64
  tail call void @_ZNSt3__115__inplace_mergeIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_SL_T_NS_15iterator_traitsISL_E15difference_typeESP_PNSO_10value_typeEl(%"class.base::BasicStringPiece"* %55, %"class.base::BasicStringPiece"* %161, %"class.base::BasicStringPiece"* %305, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* dereferenceable(1) %3, i64 %156, i64 %155, %"class.base::BasicStringPiece"* %6, i64 %7)
  br label %312

311:                                              ; preds = %304
  tail call void @_ZNSt3__115__inplace_mergeIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_SL_T_NS_15iterator_traitsISL_E15difference_typeESP_PNSO_10value_typeEl(%"class.base::BasicStringPiece"* %305, %"class.base::BasicStringPiece"* %157, %"class.base::BasicStringPiece"* %14, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* dereferenceable(1) %3, i64 %159, i64 %160, %"class.base::BasicStringPiece"* %6, i64 %7)
  br label %312

312:                                              ; preds = %309, %311
  %313 = phi i64 [ %310, %309 ], [ %35, %311 ]
  %314 = phi i64 [ %158, %309 ], [ %153, %311 ]
  %315 = phi i64 [ %160, %309 ], [ %155, %311 ]
  %316 = phi i64 [ %159, %309 ], [ %156, %311 ]
  %317 = phi %"class.base::BasicStringPiece"* [ %14, %309 ], [ %305, %311 ]
  %318 = icmp eq i64 %315, 0
  br i1 %318, label %319, label %13

319:                                              ; preds = %312, %22, %49, %8, %99, %30
  ret void
}

; Function Attrs: nofree nounwind readonly
declare i32 @memcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__121__insertion_sort_moveIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_PNS_15iterator_traitsISL_E10value_typeET_(%"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* dereferenceable(1)) local_unnamed_addr #0 comdat {
  %5 = icmp eq %"class.base::BasicStringPiece"* %0, %1
  br i1 %5, label %67, label %6

6:                                                ; preds = %4
  %7 = bitcast %"class.base::BasicStringPiece"* %2 to i8*
  %8 = bitcast %"class.base::BasicStringPiece"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 8 %8, i64 16, i1 false)
  %9 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 1
  %10 = icmp eq %"class.base::BasicStringPiece"* %9, %1
  br i1 %10, label %67, label %11

11:                                               ; preds = %6, %62
  %12 = phi %"class.base::BasicStringPiece"* [ %65, %62 ], [ %9, %6 ]
  %13 = phi %"class.base::BasicStringPiece"* [ %15, %62 ], [ %2, %6 ]
  %14 = phi %"class.base::BasicStringPiece"* [ %12, %62 ], [ %0, %6 ]
  %15 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %13, i64 1
  %16 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %12, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %14, i64 1, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %13, i64 0, i32 0
  %21 = load i8*, i8** %20, align 8
  %22 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %13, i64 0, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = icmp ugt i64 %19, %23
  %25 = select i1 %24, i64 %23, i64 %19
  %26 = tail call i32 @memcmp(i8* %17, i8* %21, i64 %25) #12
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %31

28:                                               ; preds = %11
  %29 = icmp ult i64 %19, %23
  %30 = bitcast %"class.base::BasicStringPiece"* %15 to i8*
  br i1 %29, label %34, label %62

31:                                               ; preds = %11
  %32 = icmp slt i32 %26, 0
  %33 = bitcast %"class.base::BasicStringPiece"* %15 to i8*
  br i1 %32, label %34, label %62

34:                                               ; preds = %28, %31
  %35 = phi i8* [ %33, %31 ], [ %30, %28 ]
  %36 = bitcast %"class.base::BasicStringPiece"* %13 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %35, i8* align 8 %36, i64 16, i1 false)
  %37 = icmp eq %"class.base::BasicStringPiece"* %13, %2
  br i1 %37, label %62, label %38

38:                                               ; preds = %34, %55
  %39 = phi %"class.base::BasicStringPiece"* [ %40, %55 ], [ %13, %34 ]
  %40 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %39, i64 -1
  %41 = load i8*, i8** %16, align 8
  %42 = load i64, i64* %18, align 8
  %43 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %40, i64 0, i32 0
  %44 = load i8*, i8** %43, align 8
  %45 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %39, i64 -1, i32 1
  %46 = load i64, i64* %45, align 8
  %47 = icmp ugt i64 %42, %46
  %48 = select i1 %47, i64 %46, i64 %42
  %49 = tail call i32 @memcmp(i8* %41, i8* %44, i64 %48) #12
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %53

51:                                               ; preds = %38
  %52 = icmp ult i64 %42, %46
  br i1 %52, label %55, label %59

53:                                               ; preds = %38
  %54 = icmp slt i32 %49, 0
  br i1 %54, label %55, label %59

55:                                               ; preds = %51, %53
  %56 = bitcast %"class.base::BasicStringPiece"* %39 to i8*
  %57 = bitcast %"class.base::BasicStringPiece"* %40 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %56, i8* align 8 %57, i64 16, i1 false)
  %58 = icmp eq %"class.base::BasicStringPiece"* %40, %2
  br i1 %58, label %59, label %38

59:                                               ; preds = %51, %55, %53
  %60 = phi %"class.base::BasicStringPiece"* [ %39, %53 ], [ %2, %55 ], [ %39, %51 ]
  %61 = bitcast %"class.base::BasicStringPiece"* %60 to i8*
  br label %62

62:                                               ; preds = %31, %28, %34, %59
  %63 = phi i8* [ %61, %59 ], [ %7, %34 ], [ %33, %31 ], [ %30, %28 ]
  %64 = bitcast %"class.base::BasicStringPiece"* %12 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %63, i8* align 8 %64, i64 16, i1 false)
  %65 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %12, i64 1
  %66 = icmp eq %"class.base::BasicStringPiece"* %65, %1
  br i1 %66, label %67, label %11

67:                                               ; preds = %62, %6, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__124__buffered_inplace_mergeIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_SL_T_NS_15iterator_traitsISL_E15difference_typeESP_PNSO_10value_typeE(%"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* dereferenceable(1), i64, i64, %"class.base::BasicStringPiece"*) local_unnamed_addr #0 comdat {
  %8 = ptrtoint %"class.base::BasicStringPiece"* %0 to i64
  %9 = ptrtoint %"class.base::BasicStringPiece"* %1 to i64
  %10 = ptrtoint %"class.base::BasicStringPiece"* %6 to i64
  %11 = icmp sgt i64 %4, %5
  br i1 %11, label %37, label %12

12:                                               ; preds = %7
  %13 = icmp eq %"class.base::BasicStringPiece"* %0, %1
  br i1 %13, label %227, label %14

14:                                               ; preds = %12
  %15 = getelementptr %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 -1, i32 0
  %16 = ptrtoint i8** %15 to i64
  %17 = sub i64 %16, %8
  %18 = lshr i64 %17, 4
  %19 = add nuw nsw i64 %18, 1
  %20 = and i64 %19, 3
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %32, label %22

22:                                               ; preds = %14, %22
  %23 = phi %"class.base::BasicStringPiece"* [ %29, %22 ], [ %6, %14 ]
  %24 = phi %"class.base::BasicStringPiece"* [ %28, %22 ], [ %0, %14 ]
  %25 = phi i64 [ %30, %22 ], [ %20, %14 ]
  %26 = bitcast %"class.base::BasicStringPiece"* %23 to i8*
  %27 = bitcast %"class.base::BasicStringPiece"* %24 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %26, i8* align 8 %27, i64 16, i1 false)
  %28 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %24, i64 1
  %29 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %23, i64 1
  %30 = add i64 %25, -1
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %32, label %22, !llvm.loop !9

32:                                               ; preds = %22, %14
  %33 = phi %"class.base::BasicStringPiece"* [ undef, %14 ], [ %29, %22 ]
  %34 = phi %"class.base::BasicStringPiece"* [ %6, %14 ], [ %29, %22 ]
  %35 = phi %"class.base::BasicStringPiece"* [ %0, %14 ], [ %28, %22 ]
  %36 = icmp ult i64 %17, 48
  br i1 %36, label %62, label %108

37:                                               ; preds = %7
  %38 = icmp eq %"class.base::BasicStringPiece"* %1, %2
  br i1 %38, label %227, label %39

39:                                               ; preds = %37
  %40 = getelementptr %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %2, i64 -1, i32 0
  %41 = ptrtoint i8** %40 to i64
  %42 = sub i64 %41, %9
  %43 = lshr i64 %42, 4
  %44 = add nuw nsw i64 %43, 1
  %45 = and i64 %44, 3
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %57, label %47

47:                                               ; preds = %39, %47
  %48 = phi %"class.base::BasicStringPiece"* [ %54, %47 ], [ %6, %39 ]
  %49 = phi %"class.base::BasicStringPiece"* [ %53, %47 ], [ %1, %39 ]
  %50 = phi i64 [ %55, %47 ], [ %45, %39 ]
  %51 = bitcast %"class.base::BasicStringPiece"* %48 to i8*
  %52 = bitcast %"class.base::BasicStringPiece"* %49 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %51, i8* align 8 %52, i64 16, i1 false)
  %53 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %49, i64 1
  %54 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %48, i64 1
  %55 = add i64 %50, -1
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %57, label %47, !llvm.loop !10

57:                                               ; preds = %47, %39
  %58 = phi %"class.base::BasicStringPiece"* [ undef, %39 ], [ %54, %47 ]
  %59 = phi %"class.base::BasicStringPiece"* [ %6, %39 ], [ %54, %47 ]
  %60 = phi %"class.base::BasicStringPiece"* [ %1, %39 ], [ %53, %47 ]
  %61 = icmp ult i64 %42, 48
  br i1 %61, label %128, label %207

62:                                               ; preds = %108, %32
  %63 = phi %"class.base::BasicStringPiece"* [ %33, %32 ], [ %126, %108 ]
  %64 = icmp eq %"class.base::BasicStringPiece"* %63, %6
  br i1 %64, label %227, label %65

65:                                               ; preds = %62, %103
  %66 = phi %"class.base::BasicStringPiece"* [ %105, %103 ], [ %6, %62 ]
  %67 = phi %"class.base::BasicStringPiece"* [ %106, %103 ], [ %0, %62 ]
  %68 = phi %"class.base::BasicStringPiece"* [ %104, %103 ], [ %1, %62 ]
  %69 = icmp eq %"class.base::BasicStringPiece"* %68, %2
  br i1 %69, label %70, label %78

70:                                               ; preds = %65
  %71 = ptrtoint %"class.base::BasicStringPiece"* %63 to i64
  %72 = ptrtoint %"class.base::BasicStringPiece"* %66 to i64
  %73 = sub i64 %71, %72
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %227, label %75

75:                                               ; preds = %70
  %76 = bitcast %"class.base::BasicStringPiece"* %67 to i8*
  %77 = bitcast %"class.base::BasicStringPiece"* %66 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %76, i8* align 8 %77, i64 %73, i1 false) #12
  br label %227

78:                                               ; preds = %65
  %79 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %68, i64 0, i32 0
  %80 = load i8*, i8** %79, align 8
  %81 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %68, i64 0, i32 1
  %82 = load i64, i64* %81, align 8
  %83 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %66, i64 0, i32 0
  %84 = load i8*, i8** %83, align 8
  %85 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %66, i64 0, i32 1
  %86 = load i64, i64* %85, align 8
  %87 = icmp ugt i64 %82, %86
  %88 = select i1 %87, i64 %86, i64 %82
  %89 = tail call i32 @memcmp(i8* %80, i8* %84, i64 %88) #12
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %91, label %93

91:                                               ; preds = %78
  %92 = icmp ult i64 %82, %86
  br i1 %92, label %95, label %99

93:                                               ; preds = %78
  %94 = icmp slt i32 %89, 0
  br i1 %94, label %95, label %99

95:                                               ; preds = %93, %91
  %96 = bitcast %"class.base::BasicStringPiece"* %67 to i8*
  %97 = bitcast %"class.base::BasicStringPiece"* %68 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %96, i8* align 8 %97, i64 16, i1 false) #12
  %98 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %68, i64 1
  br label %103

99:                                               ; preds = %93, %91
  %100 = bitcast %"class.base::BasicStringPiece"* %67 to i8*
  %101 = bitcast %"class.base::BasicStringPiece"* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %100, i8* align 8 %101, i64 16, i1 false) #12
  %102 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %66, i64 1
  br label %103

103:                                              ; preds = %99, %95
  %104 = phi %"class.base::BasicStringPiece"* [ %98, %95 ], [ %68, %99 ]
  %105 = phi %"class.base::BasicStringPiece"* [ %66, %95 ], [ %102, %99 ]
  %106 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %67, i64 1
  %107 = icmp eq %"class.base::BasicStringPiece"* %105, %63
  br i1 %107, label %227, label %65

108:                                              ; preds = %32, %108
  %109 = phi %"class.base::BasicStringPiece"* [ %126, %108 ], [ %34, %32 ]
  %110 = phi %"class.base::BasicStringPiece"* [ %125, %108 ], [ %35, %32 ]
  %111 = bitcast %"class.base::BasicStringPiece"* %109 to i8*
  %112 = bitcast %"class.base::BasicStringPiece"* %110 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %111, i8* align 8 %112, i64 16, i1 false)
  %113 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %110, i64 1
  %114 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %109, i64 1
  %115 = bitcast %"class.base::BasicStringPiece"* %114 to i8*
  %116 = bitcast %"class.base::BasicStringPiece"* %113 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %115, i8* align 8 %116, i64 16, i1 false)
  %117 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %110, i64 2
  %118 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %109, i64 2
  %119 = bitcast %"class.base::BasicStringPiece"* %118 to i8*
  %120 = bitcast %"class.base::BasicStringPiece"* %117 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %119, i8* align 8 %120, i64 16, i1 false)
  %121 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %110, i64 3
  %122 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %109, i64 3
  %123 = bitcast %"class.base::BasicStringPiece"* %122 to i8*
  %124 = bitcast %"class.base::BasicStringPiece"* %121 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %123, i8* align 8 %124, i64 16, i1 false)
  %125 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %110, i64 4
  %126 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %109, i64 4
  %127 = icmp eq %"class.base::BasicStringPiece"* %125, %1
  br i1 %127, label %62, label %108

128:                                              ; preds = %207, %57
  %129 = phi %"class.base::BasicStringPiece"* [ %58, %57 ], [ %225, %207 ]
  %130 = icmp eq %"class.base::BasicStringPiece"* %129, %6
  br i1 %130, label %227, label %131

131:                                              ; preds = %128, %198
  %132 = phi %"class.base::BasicStringPiece"* [ %205, %198 ], [ %2, %128 ]
  %133 = phi %"class.base::BasicStringPiece"* [ %201, %198 ], [ %129, %128 ]
  %134 = phi %"class.base::BasicStringPiece"* [ %200, %198 ], [ %1, %128 ]
  %135 = icmp eq %"class.base::BasicStringPiece"* %134, %0
  br i1 %135, label %136, label %178

136:                                              ; preds = %131
  %137 = getelementptr %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %133, i64 -1, i32 0
  %138 = ptrtoint i8** %137 to i64
  %139 = sub i64 %138, %10
  %140 = lshr i64 %139, 4
  %141 = add nuw nsw i64 %140, 1
  %142 = and i64 %141, 3
  %143 = icmp eq i64 %142, 0
  br i1 %143, label %154, label %144

144:                                              ; preds = %136, %144
  %145 = phi %"class.base::BasicStringPiece"* [ %148, %144 ], [ %133, %136 ]
  %146 = phi %"class.base::BasicStringPiece"* [ %149, %144 ], [ %132, %136 ]
  %147 = phi i64 [ %152, %144 ], [ %142, %136 ]
  %148 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %145, i64 -1
  %149 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %146, i64 -1
  %150 = bitcast %"class.base::BasicStringPiece"* %149 to i8*
  %151 = bitcast %"class.base::BasicStringPiece"* %148 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %150, i8* align 8 %151, i64 16, i1 false) #12
  %152 = add i64 %147, -1
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %154, label %144, !llvm.loop !11

154:                                              ; preds = %144, %136
  %155 = phi %"class.base::BasicStringPiece"* [ %133, %136 ], [ %148, %144 ]
  %156 = phi %"class.base::BasicStringPiece"* [ %132, %136 ], [ %149, %144 ]
  %157 = icmp ult i64 %139, 48
  br i1 %157, label %227, label %158

158:                                              ; preds = %154, %158
  %159 = phi %"class.base::BasicStringPiece"* [ %173, %158 ], [ %155, %154 ]
  %160 = phi %"class.base::BasicStringPiece"* [ %174, %158 ], [ %156, %154 ]
  %161 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %159, i64 -1
  %162 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %160, i64 -1
  %163 = bitcast %"class.base::BasicStringPiece"* %162 to i8*
  %164 = bitcast %"class.base::BasicStringPiece"* %161 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %163, i8* align 8 %164, i64 16, i1 false) #12
  %165 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %159, i64 -2
  %166 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %160, i64 -2
  %167 = bitcast %"class.base::BasicStringPiece"* %166 to i8*
  %168 = bitcast %"class.base::BasicStringPiece"* %165 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %167, i8* align 8 %168, i64 16, i1 false) #12
  %169 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %159, i64 -3
  %170 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %160, i64 -3
  %171 = bitcast %"class.base::BasicStringPiece"* %170 to i8*
  %172 = bitcast %"class.base::BasicStringPiece"* %169 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %171, i8* align 8 %172, i64 16, i1 false) #12
  %173 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %159, i64 -4
  %174 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %160, i64 -4
  %175 = bitcast %"class.base::BasicStringPiece"* %174 to i8*
  %176 = bitcast %"class.base::BasicStringPiece"* %173 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %175, i8* align 8 %176, i64 16, i1 false) #12
  %177 = icmp eq %"class.base::BasicStringPiece"* %173, %6
  br i1 %177, label %227, label %158

178:                                              ; preds = %131
  %179 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %134, i64 -1
  %180 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %133, i64 -1
  %181 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %180, i64 0, i32 0
  %182 = load i8*, i8** %181, align 8
  %183 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %133, i64 -1, i32 1
  %184 = load i64, i64* %183, align 8
  %185 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %179, i64 0, i32 0
  %186 = load i8*, i8** %185, align 8
  %187 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %134, i64 -1, i32 1
  %188 = load i64, i64* %187, align 8
  %189 = icmp ugt i64 %184, %188
  %190 = select i1 %189, i64 %188, i64 %184
  %191 = tail call i32 @memcmp(i8* %182, i8* %186, i64 %190) #12
  %192 = icmp eq i32 %191, 0
  br i1 %192, label %193, label %195

193:                                              ; preds = %178
  %194 = icmp ult i64 %184, %188
  br i1 %194, label %198, label %197

195:                                              ; preds = %178
  %196 = icmp slt i32 %191, 0
  br i1 %196, label %198, label %197

197:                                              ; preds = %195, %193
  br label %198

198:                                              ; preds = %193, %195, %197
  %199 = phi %"class.base::BasicStringPiece"* [ %180, %197 ], [ %179, %195 ], [ %179, %193 ]
  %200 = phi %"class.base::BasicStringPiece"* [ %134, %197 ], [ %179, %195 ], [ %179, %193 ]
  %201 = phi %"class.base::BasicStringPiece"* [ %180, %197 ], [ %133, %195 ], [ %133, %193 ]
  %202 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %132, i64 -1
  %203 = bitcast %"class.base::BasicStringPiece"* %202 to i8*
  %204 = bitcast %"class.base::BasicStringPiece"* %199 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %203, i8* align 8 %204, i64 16, i1 false) #12
  %205 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %132, i64 -1
  %206 = icmp eq %"class.base::BasicStringPiece"* %201, %6
  br i1 %206, label %227, label %131

207:                                              ; preds = %57, %207
  %208 = phi %"class.base::BasicStringPiece"* [ %225, %207 ], [ %59, %57 ]
  %209 = phi %"class.base::BasicStringPiece"* [ %224, %207 ], [ %60, %57 ]
  %210 = bitcast %"class.base::BasicStringPiece"* %208 to i8*
  %211 = bitcast %"class.base::BasicStringPiece"* %209 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %210, i8* align 8 %211, i64 16, i1 false)
  %212 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %209, i64 1
  %213 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %208, i64 1
  %214 = bitcast %"class.base::BasicStringPiece"* %213 to i8*
  %215 = bitcast %"class.base::BasicStringPiece"* %212 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %214, i8* align 8 %215, i64 16, i1 false)
  %216 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %209, i64 2
  %217 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %208, i64 2
  %218 = bitcast %"class.base::BasicStringPiece"* %217 to i8*
  %219 = bitcast %"class.base::BasicStringPiece"* %216 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %218, i8* align 8 %219, i64 16, i1 false)
  %220 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %209, i64 3
  %221 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %208, i64 3
  %222 = bitcast %"class.base::BasicStringPiece"* %221 to i8*
  %223 = bitcast %"class.base::BasicStringPiece"* %220 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %222, i8* align 8 %223, i64 16, i1 false)
  %224 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %209, i64 4
  %225 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %208, i64 4
  %226 = icmp eq %"class.base::BasicStringPiece"* %224, %2
  br i1 %226, label %128, label %207

227:                                              ; preds = %103, %198, %154, %158, %37, %12, %128, %75, %70, %62
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN3gpu17VulkanFenceHelperC1EPNS_17VulkanDeviceQueueE(%"class.gpu::VulkanFenceHelper"*, %"class.gpu::VulkanDeviceQueue"*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN3gpu17VulkanFenceHelperD1Ev(%"class.gpu::VulkanFenceHelper"*) unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN3gpu17VulkanCommandPoolD1Ev(%"class.gpu::VulkanCommandPool"*) unnamed_addr #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind readnone }
attributes #11 = { nobuiltin nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind }
attributes #13 = { builtin nounwind }
attributes #14 = { nounwind readonly }
attributes #15 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.unroll.disable"}
!5 = distinct !{!5, !4}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !4}
!8 = distinct !{!8, !4}
!9 = distinct !{!9, !4}
!10 = distinct !{!10, !4}
!11 = distinct !{!11, !4}
