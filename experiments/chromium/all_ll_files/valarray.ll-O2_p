; ModuleID = '../../buildtools/third_party/libc++/trunk/src/valarray.cpp'
source_filename = "../../buildtools/third_party/libc++/trunk/src/valarray.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::valarray" = type { i64*, i64* }
%"class.std::__1::gslice" = type { %"class.std::__1::valarray", %"class.std::__1::valarray", %"class.std::__1::valarray" }
%"class.std::length_error" = type { %"class.std::logic_error" }
%"class.std::logic_error" = type { %"class.std::exception", %"class.std::__1::__libcpp_refstring" }
%"class.std::exception" = type { i32 (...)** }
%"class.std::__1::__libcpp_refstring" = type { i8* }

$_ZNSt3__18valarrayImEC5Em = comdat any

$_ZNSt3__18valarrayImED5Ev = comdat any

$_ZNSt3__18valarrayImE6resizeEmm = comdat any

$_ZNSt3__120__throw_length_errorEPKc = comdat any

$_ZNSt12length_errorC2EPKc = comdat any

@.str = private unnamed_addr constant [68 x i8] c"allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size\00", align 1
@_ZTISt12length_error = external constant i8*
@_ZTVSt12length_error = external unnamed_addr constant { [5 x i8*] }, align 8

@_ZNSt3__18valarrayImEC1Em = weak_odr hidden unnamed_addr alias void (%"class.std::__1::valarray"*, i64), void (%"class.std::__1::valarray"*, i64)* @_ZNSt3__18valarrayImEC2Em
@_ZNSt3__18valarrayImED1Ev = weak_odr hidden unnamed_addr alias void (%"class.std::__1::valarray"*), void (%"class.std::__1::valarray"*)* @_ZNSt3__18valarrayImED2Ev

; Function Attrs: inlinehint ssp uwtable
define weak_odr hidden void @_ZNSt3__18valarrayImEC2Em(%"class.std::__1::valarray"*, i64) unnamed_addr #0 comdat($_ZNSt3__18valarrayImEC5Em) align 2 {
  %3 = getelementptr inbounds %"class.std::__1::valarray", %"class.std::__1::valarray"* %0, i64 0, i32 1
  %4 = icmp eq i64 %1, 0
  %5 = bitcast %"class.std::__1::valarray"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 16, i1 false)
  br i1 %4, label %39, label %6

6:                                                ; preds = %2
  %7 = icmp ugt i64 %1, 2305843009213693951
  br i1 %7, label %8, label %9

8:                                                ; preds = %6
  tail call void @_ZNSt3__120__throw_length_errorEPKc(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str, i64 0, i64 0)) #9
  unreachable

9:                                                ; preds = %6
  %10 = shl i64 %1, 3
  %11 = tail call i8* @_Znwm(i64 %10) #10
  %12 = bitcast i64** %3 to i8**
  store i8* %11, i8** %12, align 8, !tbaa !2
  %13 = bitcast %"class.std::__1::valarray"* %0 to i8**
  store i8* %11, i8** %13, align 8, !tbaa !7
  %14 = bitcast i8* %11 to i64*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 0, i64 %10, i1 false)
  %15 = add i64 %1, -1
  %16 = and i64 %1, 7
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %26, label %18

18:                                               ; preds = %9, %18
  %19 = phi i64* [ %23, %18 ], [ %14, %9 ]
  %20 = phi i64 [ %22, %18 ], [ %1, %9 ]
  %21 = phi i64 [ %24, %18 ], [ %16, %9 ]
  %22 = add i64 %20, -1
  %23 = getelementptr inbounds i64, i64* %19, i64 1
  %24 = add i64 %21, -1
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %26, label %18, !llvm.loop !8

26:                                               ; preds = %18, %9
  %27 = phi i64* [ undef, %9 ], [ %23, %18 ]
  %28 = phi i64* [ %14, %9 ], [ %23, %18 ]
  %29 = phi i64 [ %1, %9 ], [ %22, %18 ]
  %30 = icmp ult i64 %15, 7
  br i1 %30, label %37, label %31

31:                                               ; preds = %26, %31
  %32 = phi i64* [ %35, %31 ], [ %28, %26 ]
  %33 = phi i64 [ %34, %31 ], [ %29, %26 ]
  %34 = add i64 %33, -8
  %35 = getelementptr inbounds i64, i64* %32, i64 8
  %36 = icmp eq i64 %34, 0
  br i1 %36, label %37, label %31

37:                                               ; preds = %31, %26
  %38 = phi i64* [ %27, %26 ], [ %35, %31 ]
  store i64* %38, i64** %3, align 8, !tbaa !2
  br label %39

39:                                               ; preds = %37, %2
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define weak_odr hidden void @_ZNSt3__18valarrayImED2Ev(%"class.std::__1::valarray"*) unnamed_addr #1 comdat($_ZNSt3__18valarrayImED5Ev) align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %2 = getelementptr inbounds %"class.std::__1::valarray", %"class.std::__1::valarray"* %0, i64 0, i32 1
  %3 = getelementptr inbounds %"class.std::__1::valarray", %"class.std::__1::valarray"* %0, i64 0, i32 0
  %4 = load i64*, i64** %3, align 8, !tbaa !7
  %5 = ptrtoint i64* %4 to i64
  %6 = icmp eq i64* %4, null
  br i1 %6, label %20, label %7

7:                                                ; preds = %1
  %8 = load i64*, i64** %2, align 8, !tbaa !2
  %9 = icmp eq i64* %8, %4
  br i1 %9, label %17, label %10

10:                                               ; preds = %7
  %11 = getelementptr i64, i64* %8, i64 -1
  %12 = ptrtoint i64* %11 to i64
  %13 = sub i64 %12, %5
  %14 = lshr i64 %13, 3
  %15 = xor i64 %14, -1
  %16 = getelementptr i64, i64* %8, i64 %15
  store i64* %16, i64** %2, align 8, !tbaa !2
  br label %17

17:                                               ; preds = %10, %7
  %18 = bitcast i64* %4 to i8*
  tail call void @_ZdlPv(i8* %18) #11
  %19 = bitcast %"class.std::__1::valarray"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %19, i8 0, i64 16, i1 false) #12
  br label %20

20:                                               ; preds = %1, %17
  ret void
}

declare i32 @__gxx_personality_v0(...)

; Function Attrs: ssp uwtable
define weak_odr hidden void @_ZNSt3__18valarrayImE6resizeEmm(%"class.std::__1::valarray"*, i64, i64) local_unnamed_addr #2 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {
  %4 = getelementptr inbounds %"class.std::__1::valarray", %"class.std::__1::valarray"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %"class.std::__1::valarray", %"class.std::__1::valarray"* %0, i64 0, i32 0
  %6 = load i64*, i64** %5, align 8, !tbaa !7
  %7 = ptrtoint i64* %6 to i64
  %8 = icmp eq i64* %6, null
  br i1 %8, label %22, label %9

9:                                                ; preds = %3
  %10 = load i64*, i64** %4, align 8, !tbaa !2
  %11 = icmp eq i64* %10, %6
  br i1 %11, label %19, label %12

12:                                               ; preds = %9
  %13 = getelementptr i64, i64* %10, i64 -1
  %14 = ptrtoint i64* %13 to i64
  %15 = sub i64 %14, %7
  %16 = lshr i64 %15, 3
  %17 = xor i64 %16, -1
  %18 = getelementptr i64, i64* %10, i64 %17
  store i64* %18, i64** %4, align 8, !tbaa !2
  br label %19

19:                                               ; preds = %12, %9
  %20 = bitcast i64* %6 to i8*
  tail call void @_ZdlPv(i8* %20) #11
  %21 = bitcast %"class.std::__1::valarray"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %21, i8 0, i64 16, i1 false) #12
  br label %22

22:                                               ; preds = %3, %19
  %23 = icmp eq i64 %1, 0
  br i1 %23, label %120, label %24

24:                                               ; preds = %22
  %25 = icmp ugt i64 %1, 2305843009213693951
  br i1 %25, label %26, label %27

26:                                               ; preds = %24
  tail call void @_ZNSt3__120__throw_length_errorEPKc(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str, i64 0, i64 0)) #9
  unreachable

27:                                               ; preds = %24
  %28 = shl i64 %1, 3
  %29 = tail call i8* @_Znwm(i64 %28) #10
  %30 = bitcast i64** %4 to i8**
  store i8* %29, i8** %30, align 8, !tbaa !2
  %31 = bitcast %"class.std::__1::valarray"* %0 to i8**
  store i8* %29, i8** %31, align 8, !tbaa !7
  %32 = bitcast i8* %29 to i64*
  %33 = icmp ult i64 %1, 4
  br i1 %33, label %109, label %34

34:                                               ; preds = %27
  %35 = and i64 %1, -4
  %36 = getelementptr i64, i64* %32, i64 %35
  %37 = sub i64 %1, %35
  %38 = insertelement <2 x i64> undef, i64 %2, i32 0
  %39 = shufflevector <2 x i64> %38, <2 x i64> undef, <2 x i32> zeroinitializer
  %40 = insertelement <2 x i64> undef, i64 %2, i32 0
  %41 = shufflevector <2 x i64> %40, <2 x i64> undef, <2 x i32> zeroinitializer
  %42 = add i64 %35, -4
  %43 = lshr exact i64 %42, 2
  %44 = add nuw nsw i64 %43, 1
  %45 = and i64 %44, 7
  %46 = icmp ult i64 %42, 28
  br i1 %46, label %94, label %47

47:                                               ; preds = %34
  %48 = sub nsw i64 %44, %45
  br label %49

49:                                               ; preds = %49, %47
  %50 = phi i64 [ 0, %47 ], [ %91, %49 ]
  %51 = phi i64 [ %48, %47 ], [ %92, %49 ]
  %52 = getelementptr i64, i64* %32, i64 %50
  %53 = bitcast i64* %52 to <2 x i64>*
  store <2 x i64> %39, <2 x i64>* %53, align 8, !tbaa !10
  %54 = getelementptr i64, i64* %52, i64 2
  %55 = bitcast i64* %54 to <2 x i64>*
  store <2 x i64> %41, <2 x i64>* %55, align 8, !tbaa !10
  %56 = or i64 %50, 4
  %57 = getelementptr i64, i64* %32, i64 %56
  %58 = bitcast i64* %57 to <2 x i64>*
  store <2 x i64> %39, <2 x i64>* %58, align 8, !tbaa !10
  %59 = getelementptr i64, i64* %57, i64 2
  %60 = bitcast i64* %59 to <2 x i64>*
  store <2 x i64> %41, <2 x i64>* %60, align 8, !tbaa !10
  %61 = or i64 %50, 8
  %62 = getelementptr i64, i64* %32, i64 %61
  %63 = bitcast i64* %62 to <2 x i64>*
  store <2 x i64> %39, <2 x i64>* %63, align 8, !tbaa !10
  %64 = getelementptr i64, i64* %62, i64 2
  %65 = bitcast i64* %64 to <2 x i64>*
  store <2 x i64> %41, <2 x i64>* %65, align 8, !tbaa !10
  %66 = or i64 %50, 12
  %67 = getelementptr i64, i64* %32, i64 %66
  %68 = bitcast i64* %67 to <2 x i64>*
  store <2 x i64> %39, <2 x i64>* %68, align 8, !tbaa !10
  %69 = getelementptr i64, i64* %67, i64 2
  %70 = bitcast i64* %69 to <2 x i64>*
  store <2 x i64> %41, <2 x i64>* %70, align 8, !tbaa !10
  %71 = or i64 %50, 16
  %72 = getelementptr i64, i64* %32, i64 %71
  %73 = bitcast i64* %72 to <2 x i64>*
  store <2 x i64> %39, <2 x i64>* %73, align 8, !tbaa !10
  %74 = getelementptr i64, i64* %72, i64 2
  %75 = bitcast i64* %74 to <2 x i64>*
  store <2 x i64> %41, <2 x i64>* %75, align 8, !tbaa !10
  %76 = or i64 %50, 20
  %77 = getelementptr i64, i64* %32, i64 %76
  %78 = bitcast i64* %77 to <2 x i64>*
  store <2 x i64> %39, <2 x i64>* %78, align 8, !tbaa !10
  %79 = getelementptr i64, i64* %77, i64 2
  %80 = bitcast i64* %79 to <2 x i64>*
  store <2 x i64> %41, <2 x i64>* %80, align 8, !tbaa !10
  %81 = or i64 %50, 24
  %82 = getelementptr i64, i64* %32, i64 %81
  %83 = bitcast i64* %82 to <2 x i64>*
  store <2 x i64> %39, <2 x i64>* %83, align 8, !tbaa !10
  %84 = getelementptr i64, i64* %82, i64 2
  %85 = bitcast i64* %84 to <2 x i64>*
  store <2 x i64> %41, <2 x i64>* %85, align 8, !tbaa !10
  %86 = or i64 %50, 28
  %87 = getelementptr i64, i64* %32, i64 %86
  %88 = bitcast i64* %87 to <2 x i64>*
  store <2 x i64> %39, <2 x i64>* %88, align 8, !tbaa !10
  %89 = getelementptr i64, i64* %87, i64 2
  %90 = bitcast i64* %89 to <2 x i64>*
  store <2 x i64> %41, <2 x i64>* %90, align 8, !tbaa !10
  %91 = add i64 %50, 32
  %92 = add i64 %51, -8
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %94, label %49, !llvm.loop !12

94:                                               ; preds = %49, %34
  %95 = phi i64 [ 0, %34 ], [ %91, %49 ]
  %96 = icmp eq i64 %45, 0
  br i1 %96, label %107, label %97

97:                                               ; preds = %94, %97
  %98 = phi i64 [ %104, %97 ], [ %95, %94 ]
  %99 = phi i64 [ %105, %97 ], [ %45, %94 ]
  %100 = getelementptr i64, i64* %32, i64 %98
  %101 = bitcast i64* %100 to <2 x i64>*
  store <2 x i64> %39, <2 x i64>* %101, align 8, !tbaa !10
  %102 = getelementptr i64, i64* %100, i64 2
  %103 = bitcast i64* %102 to <2 x i64>*
  store <2 x i64> %41, <2 x i64>* %103, align 8, !tbaa !10
  %104 = add i64 %98, 4
  %105 = add i64 %99, -1
  %106 = icmp eq i64 %105, 0
  br i1 %106, label %107, label %97, !llvm.loop !14

107:                                              ; preds = %97, %94
  %108 = icmp eq i64 %35, %1
  br i1 %108, label %118, label %109

109:                                              ; preds = %107, %27
  %110 = phi i64* [ %32, %27 ], [ %36, %107 ]
  %111 = phi i64 [ %1, %27 ], [ %37, %107 ]
  br label %112

112:                                              ; preds = %109, %112
  %113 = phi i64* [ %116, %112 ], [ %110, %109 ]
  %114 = phi i64 [ %115, %112 ], [ %111, %109 ]
  store i64 %2, i64* %113, align 8, !tbaa !10
  %115 = add i64 %114, -1
  %116 = getelementptr inbounds i64, i64* %113, i64 1
  %117 = icmp eq i64 %115, 0
  br i1 %117, label %118, label %112, !llvm.loop !15

118:                                              ; preds = %112, %107
  %119 = phi i64* [ %36, %107 ], [ %116, %112 ]
  store i64* %119, i64** %4, align 8, !tbaa !2
  br label %120

120:                                              ; preds = %118, %22
  ret void
}

; Function Attrs: ssp uwtable
define hidden void @_ZNSt3__16gslice6__initEm(%"class.std::__1::gslice"* nocapture, i64) local_unnamed_addr #2 align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %3 = getelementptr inbounds %"class.std::__1::gslice", %"class.std::__1::gslice"* %0, i64 0, i32 0, i32 1
  %4 = bitcast i64** %3 to i64*
  %5 = load i64, i64* %4, align 8, !tbaa !2
  %6 = bitcast %"class.std::__1::gslice"* %0 to i64*
  %7 = load i64, i64* %6, align 8, !tbaa !7
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 3
  %10 = icmp eq i64 %8, 0
  %11 = inttoptr i64 %7 to i64*
  br i1 %10, label %20, label %12

12:                                               ; preds = %2
  %13 = icmp ugt i64 %9, 2305843009213693951
  br i1 %13, label %14, label %15

14:                                               ; preds = %12
  tail call void @_ZNSt3__120__throw_length_errorEPKc(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str, i64 0, i64 0)) #9
  unreachable

15:                                               ; preds = %12
  %16 = tail call i8* @_Znwm(i64 %8) #10
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 0, i64 %8, i1 false)
  %17 = getelementptr i8, i8* %16, i64 %8
  %18 = ptrtoint i8* %16 to i64
  %19 = ptrtoint i8* %17 to i64
  br label %92

20:                                               ; preds = %92, %2
  %21 = phi i64 [ 0, %2 ], [ %19, %92 ]
  %22 = phi i64 [ 0, %2 ], [ %18, %92 ]
  %23 = phi i64 [ 0, %2 ], [ %97, %92 ]
  %24 = getelementptr inbounds %"class.std::__1::gslice", %"class.std::__1::gslice"* %0, i64 0, i32 2
  %25 = getelementptr inbounds %"class.std::__1::gslice", %"class.std::__1::gslice"* %0, i64 0, i32 2, i32 1
  %26 = getelementptr inbounds %"class.std::__1::valarray", %"class.std::__1::valarray"* %24, i64 0, i32 0
  %27 = load i64*, i64** %26, align 8, !tbaa !7
  %28 = ptrtoint i64* %27 to i64
  %29 = icmp eq i64* %27, null
  br i1 %29, label %43, label %30

30:                                               ; preds = %20
  %31 = load i64*, i64** %25, align 8, !tbaa !2
  %32 = icmp eq i64* %31, %27
  br i1 %32, label %40, label %33

33:                                               ; preds = %30
  %34 = getelementptr i64, i64* %31, i64 -1
  %35 = ptrtoint i64* %34 to i64
  %36 = sub i64 %35, %28
  %37 = lshr i64 %36, 3
  %38 = xor i64 %37, -1
  %39 = getelementptr i64, i64* %31, i64 %38
  store i64* %39, i64** %25, align 8, !tbaa !2
  br label %40

40:                                               ; preds = %33, %30
  %41 = bitcast i64* %27 to i8*
  tail call void @_ZdlPv(i8* %41) #11
  %42 = bitcast %"class.std::__1::valarray"* %24 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %42, i8 0, i64 16, i1 false) #12
  br label %43

43:                                               ; preds = %40, %20
  %44 = phi i64 [ 0, %40 ], [ %28, %20 ]
  %45 = icmp eq i64 %23, 0
  br i1 %45, label %46, label %49

46:                                               ; preds = %43
  %47 = bitcast i64** %25 to i64*
  %48 = load i64, i64* %47, align 8, !tbaa !2
  br label %100

49:                                               ; preds = %43
  %50 = icmp ugt i64 %23, 2305843009213693951
  br i1 %50, label %51, label %53

51:                                               ; preds = %49
  invoke void @_ZNSt3__120__throw_length_errorEPKc(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str, i64 0, i64 0)) #9
          to label %52 unwind label %86

52:                                               ; preds = %51
  unreachable

53:                                               ; preds = %49
  %54 = shl i64 %23, 3
  %55 = invoke i8* @_Znwm(i64 %54) #10
          to label %56 unwind label %86

56:                                               ; preds = %53
  %57 = bitcast i64** %25 to i8**
  store i8* %55, i8** %57, align 8, !tbaa !2
  %58 = bitcast %"class.std::__1::valarray"* %24 to i8**
  store i8* %55, i8** %58, align 8, !tbaa !7
  %59 = bitcast i8* %55 to i64*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %55, i8 0, i64 %54, i1 false)
  %60 = ptrtoint i8* %55 to i64
  %61 = add i64 %23, -1
  %62 = and i64 %23, 7
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %72, label %64

64:                                               ; preds = %56, %64
  %65 = phi i64* [ %69, %64 ], [ %59, %56 ]
  %66 = phi i64 [ %68, %64 ], [ %23, %56 ]
  %67 = phi i64 [ %70, %64 ], [ %62, %56 ]
  %68 = add i64 %66, -1
  %69 = getelementptr inbounds i64, i64* %65, i64 1
  %70 = add i64 %67, -1
  %71 = icmp eq i64 %70, 0
  br i1 %71, label %72, label %64, !llvm.loop !17

72:                                               ; preds = %64, %56
  %73 = phi i64* [ undef, %56 ], [ %69, %64 ]
  %74 = phi i64* [ %59, %56 ], [ %69, %64 ]
  %75 = phi i64 [ %23, %56 ], [ %68, %64 ]
  %76 = icmp ult i64 %61, 7
  br i1 %76, label %83, label %77

77:                                               ; preds = %72, %77
  %78 = phi i64* [ %81, %77 ], [ %74, %72 ]
  %79 = phi i64 [ %80, %77 ], [ %75, %72 ]
  %80 = add i64 %79, -8
  %81 = getelementptr inbounds i64, i64* %78, i64 8
  %82 = icmp eq i64 %80, 0
  br i1 %82, label %83, label %77

83:                                               ; preds = %77, %72
  %84 = phi i64* [ %73, %72 ], [ %81, %77 ]
  store i64* %84, i64** %25, align 8, !tbaa !2
  %85 = ptrtoint i64* %84 to i64
  br label %100

86:                                               ; preds = %53, %51
  %87 = landingpad { i8*, i32 }
          cleanup
  %88 = icmp eq i64 %22, 0
  br i1 %88, label %91, label %89

89:                                               ; preds = %86
  %90 = inttoptr i64 %22 to i8*
  tail call void @_ZdlPv(i8* %90) #11
  br label %91

91:                                               ; preds = %86, %89
  resume { i8*, i32 } %87

92:                                               ; preds = %15, %92
  %93 = phi i64 [ 0, %15 ], [ %98, %92 ]
  %94 = phi i64 [ 1, %15 ], [ %97, %92 ]
  %95 = getelementptr inbounds i64, i64* %11, i64 %93
  %96 = load i64, i64* %95, align 8, !tbaa !10
  %97 = mul i64 %96, %94
  %98 = add nuw i64 %93, 1
  %99 = icmp ult i64 %98, %9
  br i1 %99, label %92, label %20

100:                                              ; preds = %46, %83
  %101 = phi i64* [ null, %46 ], [ %59, %83 ]
  %102 = phi i64 [ %44, %46 ], [ %60, %83 ]
  %103 = phi i64 [ %48, %46 ], [ %85, %83 ]
  %104 = icmp eq i64 %103, %102
  br i1 %104, label %184, label %105

105:                                              ; preds = %100
  store i64 %1, i64* %101, align 8, !tbaa !10
  %106 = sub i64 %21, %22
  %107 = ashr exact i64 %106, 3
  %108 = add nsw i64 %107, -1
  %109 = inttoptr i64 %22 to i64*
  %110 = getelementptr inbounds i64, i64* %109, i64 %108
  %111 = getelementptr inbounds %"class.std::__1::gslice", %"class.std::__1::gslice"* %0, i64 0, i32 0, i32 0
  %112 = load i64*, i64** %111, align 8, !tbaa !7
  %113 = getelementptr inbounds i64, i64* %112, i64 %108
  %114 = getelementptr inbounds %"class.std::__1::gslice", %"class.std::__1::gslice"* %0, i64 0, i32 1, i32 0
  br label %115

115:                                              ; preds = %133, %105
  %116 = phi i64 [ 0, %105 ], [ %124, %133 ]
  %117 = load i64, i64* %110, align 8, !tbaa !10
  %118 = add i64 %117, 1
  store i64 %118, i64* %110, align 8, !tbaa !10
  %119 = load i64, i64* %113, align 8, !tbaa !10
  %120 = icmp ult i64 %118, %119
  br i1 %120, label %121, label %172

121:                                              ; preds = %176, %115
  %122 = phi i64 [ %107, %115 ], [ %174, %176 ]
  %123 = phi i64 [ %108, %115 ], [ %177, %176 ]
  %124 = add i64 %116, 1
  %125 = getelementptr inbounds i64, i64* %101, i64 %116
  %126 = load i64, i64* %125, align 8, !tbaa !10
  %127 = load i64*, i64** %114, align 8, !tbaa !7
  %128 = getelementptr inbounds i64, i64* %127, i64 %123
  %129 = load i64, i64* %128, align 8, !tbaa !10
  %130 = add i64 %129, %126
  %131 = getelementptr inbounds i64, i64* %101, i64 %124
  store i64 %130, i64* %131, align 8, !tbaa !10
  %132 = icmp eq i64 %107, %122
  br i1 %132, label %133, label %134

133:                                              ; preds = %147, %152, %121
  br label %115

134:                                              ; preds = %121
  %135 = sub i64 %107, %122
  %136 = and i64 %135, 1
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %147, label %138

138:                                              ; preds = %134
  %139 = getelementptr inbounds i64, i64* %127, i64 %122
  %140 = load i64, i64* %139, align 8, !tbaa !10
  %141 = getelementptr inbounds i64, i64* %112, i64 %122
  %142 = load i64, i64* %141, align 8, !tbaa !10
  %143 = add i64 %142, -1
  %144 = mul i64 %143, %140
  %145 = sub i64 %130, %144
  store i64 %145, i64* %131, align 8, !tbaa !10
  %146 = add i64 %122, 1
  br label %147

147:                                              ; preds = %138, %134
  %148 = phi i64 [ %145, %138 ], [ %130, %134 ]
  %149 = phi i64 [ %146, %138 ], [ %122, %134 ]
  %150 = add i64 %122, 1
  %151 = icmp eq i64 %107, %150
  br i1 %151, label %133, label %152

152:                                              ; preds = %147, %152
  %153 = phi i64 [ %169, %152 ], [ %148, %147 ]
  %154 = phi i64 [ %170, %152 ], [ %149, %147 ]
  %155 = getelementptr inbounds i64, i64* %127, i64 %154
  %156 = load i64, i64* %155, align 8, !tbaa !10
  %157 = getelementptr inbounds i64, i64* %112, i64 %154
  %158 = load i64, i64* %157, align 8, !tbaa !10
  %159 = add i64 %158, -1
  %160 = mul i64 %159, %156
  %161 = sub i64 %153, %160
  store i64 %161, i64* %131, align 8, !tbaa !10
  %162 = add i64 %154, 1
  %163 = getelementptr inbounds i64, i64* %127, i64 %162
  %164 = load i64, i64* %163, align 8, !tbaa !10
  %165 = getelementptr inbounds i64, i64* %112, i64 %162
  %166 = load i64, i64* %165, align 8, !tbaa !10
  %167 = add i64 %166, -1
  %168 = mul i64 %167, %164
  %169 = sub i64 %161, %168
  store i64 %169, i64* %131, align 8, !tbaa !10
  %170 = add i64 %154, 2
  %171 = icmp eq i64 %170, %107
  br i1 %171, label %133, label %152

172:                                              ; preds = %115, %176
  %173 = phi i64* [ %178, %176 ], [ %110, %115 ]
  %174 = phi i64 [ %177, %176 ], [ %108, %115 ]
  %175 = icmp eq i64 %174, 0
  br i1 %175, label %184, label %176

176:                                              ; preds = %172
  store i64 0, i64* %173, align 8, !tbaa !10
  %177 = add i64 %174, -1
  %178 = getelementptr inbounds i64, i64* %109, i64 %177
  %179 = load i64, i64* %178, align 8, !tbaa !10
  %180 = add i64 %179, 1
  store i64 %180, i64* %178, align 8, !tbaa !10
  %181 = getelementptr inbounds i64, i64* %112, i64 %177
  %182 = load i64, i64* %181, align 8, !tbaa !10
  %183 = icmp ult i64 %180, %182
  br i1 %183, label %121, label %172

184:                                              ; preds = %172, %100
  %185 = icmp eq i64 %22, 0
  br i1 %185, label %188, label %186

186:                                              ; preds = %184
  %187 = inttoptr i64 %22 to i8*
  tail call void @_ZdlPv(i8* %187) #11
  br label %188

188:                                              ; preds = %184, %186
  ret void
}

; Function Attrs: inlinehint noreturn ssp uwtable
define linkonce_odr hidden void @_ZNSt3__120__throw_length_errorEPKc(i8*) local_unnamed_addr #3 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %2 = tail call i8* @__cxa_allocate_exception(i64 16) #12
  %3 = bitcast i8* %2 to %"class.std::length_error"*
  invoke void @_ZNSt12length_errorC2EPKc(%"class.std::length_error"* %3, i8* %0)
          to label %4 unwind label %5

4:                                                ; preds = %1
  tail call void @__cxa_throw(i8* %2, i8* bitcast (i8** @_ZTISt12length_error to i8*), i8* bitcast (void (%"class.std::length_error"*)* @_ZNSt12length_errorD1Ev to i8*)) #9
  unreachable

5:                                                ; preds = %1
  %6 = landingpad { i8*, i32 }
          cleanup
  tail call void @__cxa_free_exception(i8* %2) #12
  resume { i8*, i32 } %6
}

declare i8* @__cxa_allocate_exception(i64) local_unnamed_addr

; Function Attrs: ssp uwtable
define linkonce_odr hidden void @_ZNSt12length_errorC2EPKc(%"class.std::length_error"*, i8*) unnamed_addr #2 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::length_error", %"class.std::length_error"* %0, i64 0, i32 0
  tail call void @_ZNSt11logic_errorC2EPKc(%"class.std::logic_error"* %3, i8* %1)
  %4 = getelementptr inbounds %"class.std::length_error", %"class.std::length_error"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVSt12length_error, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8, !tbaa !18
  ret void
}

declare void @__cxa_free_exception(i8*) local_unnamed_addr

; Function Attrs: nounwind
declare void @_ZNSt12length_errorD1Ev(%"class.std::length_error"*) unnamed_addr #4

declare void @__cxa_throw(i8*, i8*, i8*) local_unnamed_addr

declare void @_ZNSt11logic_errorC2EPKc(%"class.std::logic_error"*, i8*) unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #8

attributes #0 = { inlinehint ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint noreturn ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { argmemonly nounwind }
attributes #9 = { noreturn }
attributes #10 = { builtin }
attributes #11 = { builtin nounwind }
attributes #12 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3, !4, i64 8}
!3 = !{!"_ZTSNSt3__18valarrayImEE", !4, i64 0, !4, i64 8}
!4 = !{!"any pointer", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C++ TBAA"}
!7 = !{!3, !4, i64 0}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.unroll.disable"}
!10 = !{!11, !11, i64 0}
!11 = !{!"long", !5, i64 0}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.isvectorized", i32 1}
!14 = distinct !{!14, !9}
!15 = distinct !{!15, !16, !13}
!16 = !{!"llvm.loop.unroll.runtime.disable"}
!17 = distinct !{!17, !9}
!18 = !{!19, !19, i64 0}
!19 = !{!"vtable pointer", !6, i64 0}
