; ModuleID = '../../third_party/blink/common/media/watch_time_component.cc'
source_filename = "../../third_party/blink/common/media/watch_time_component.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::WatchTimeComponent" = type { %"class.std::__1::vector", %"class.base::RepeatingCallback", %"class.base::RepeatingCallback.2", %"class.media::mojom::WatchTimeRecorder"*, i8, i8, %"class.base::TimeDelta", %"class.base::TimeDelta", %"class.base::TimeDelta" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i32* }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::RepeatingCallback.2" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::TimeDelta" = type { i64 }
%"class.media::mojom::WatchTimeRecorder" = type { i32 (...)** }
%"class.blink::WatchTimeComponent.4" = type { %"class.std::__1::vector", %"class.base::RepeatingCallback.5", %"class.base::RepeatingCallback.2", %"class.media::mojom::WatchTimeRecorder"*, i32, i32, %"class.base::TimeDelta", %"class.base::TimeDelta", %"class.base::TimeDelta" }
%"class.base::RepeatingCallback.5" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZN5blink18WatchTimeComponentIbEC5EbNSt3__16vectorIN5media12WatchTimeKeyENS2_9allocatorIS5_EEEEN4base17RepeatingCallbackIFS5_bEEENSA_IFNS9_9TimeDeltaEvEEEPNS4_5mojom17WatchTimeRecorderE = comdat any

$_ZN5blink18WatchTimeComponentIbED5Ev = comdat any

$_ZN5blink18WatchTimeComponentIbE18OnReportingStartedEN4base9TimeDeltaE = comdat any

$_ZN5blink18WatchTimeComponentIbE15SetPendingValueEb = comdat any

$_ZN5blink18WatchTimeComponentIbE15SetCurrentValueEb = comdat any

$_ZN5blink18WatchTimeComponentIbE15RecordWatchTimeEN4base9TimeDeltaE = comdat any

$_ZNK5blink18WatchTimeComponentIbE13NeedsFinalizeEv = comdat any

$_ZNK4base9TimeDeltamiES0_ = comdat any

$_ZN5blink18WatchTimeComponentIbE8FinalizeEPNSt3__16vectorIN5media12WatchTimeKeyENS2_9allocatorIS5_EEEE = comdat any

$_ZNSt3__16vectorIN5media12WatchTimeKeyENS_9allocatorIS2_EEE6insertINS_11__wrap_iterIPKS2_EEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsISC_E9referenceEEE5valueENS7_IPS2_EEE4typeESA_SC_SC_ = comdat any

$_ZNK5blink18WatchTimeComponentIbE13end_timestampEv = comdat any

$_ZNK5blink18WatchTimeComponentIbE25current_value_for_testingEv = comdat any

$_ZN5blink18WatchTimeComponentINS_11DisplayTypeEEC5ES1_NSt3__16vectorIN5media12WatchTimeKeyENS3_9allocatorIS6_EEEEN4base17RepeatingCallbackIFS6_S1_EEENSB_IFNSA_9TimeDeltaEvEEEPNS5_5mojom17WatchTimeRecorderE = comdat any

$_ZN5blink18WatchTimeComponentINS_11DisplayTypeEED5Ev = comdat any

$_ZN5blink18WatchTimeComponentINS_11DisplayTypeEE18OnReportingStartedEN4base9TimeDeltaE = comdat any

$_ZN5blink18WatchTimeComponentINS_11DisplayTypeEE15SetPendingValueES1_ = comdat any

$_ZN5blink18WatchTimeComponentINS_11DisplayTypeEE15SetCurrentValueES1_ = comdat any

$_ZN5blink18WatchTimeComponentINS_11DisplayTypeEE15RecordWatchTimeEN4base9TimeDeltaE = comdat any

$_ZNK5blink18WatchTimeComponentINS_11DisplayTypeEE13NeedsFinalizeEv = comdat any

$_ZN5blink18WatchTimeComponentINS_11DisplayTypeEE8FinalizeEPNSt3__16vectorIN5media12WatchTimeKeyENS3_9allocatorIS6_EEEE = comdat any

$_ZNK5blink18WatchTimeComponentINS_11DisplayTypeEE13end_timestampEv = comdat any

$_ZNK5blink18WatchTimeComponentINS_11DisplayTypeEE25current_value_for_testingEv = comdat any

@.str = private unnamed_addr constant [23 x i8] c"delta_ != other.delta_\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"../../base/time/time.h\00", align 1

@_ZN5blink18WatchTimeComponentIbEC1EbNSt3__16vectorIN5media12WatchTimeKeyENS2_9allocatorIS5_EEEEN4base17RepeatingCallbackIFS5_bEEENSA_IFNS9_9TimeDeltaEvEEEPNS4_5mojom17WatchTimeRecorderE = weak_odr hidden unnamed_addr alias void (%"class.blink::WatchTimeComponent"*, i1, %"class.std::__1::vector"*, %"class.base::RepeatingCallback"*, %"class.base::RepeatingCallback.2"*, %"class.media::mojom::WatchTimeRecorder"*), void (%"class.blink::WatchTimeComponent"*, i1, %"class.std::__1::vector"*, %"class.base::RepeatingCallback"*, %"class.base::RepeatingCallback.2"*, %"class.media::mojom::WatchTimeRecorder"*)* @_ZN5blink18WatchTimeComponentIbEC2EbNSt3__16vectorIN5media12WatchTimeKeyENS2_9allocatorIS5_EEEEN4base17RepeatingCallbackIFS5_bEEENSA_IFNS9_9TimeDeltaEvEEEPNS4_5mojom17WatchTimeRecorderE
@_ZN5blink18WatchTimeComponentIbED1Ev = weak_odr hidden unnamed_addr alias void (%"class.blink::WatchTimeComponent"*), void (%"class.blink::WatchTimeComponent"*)* @_ZN5blink18WatchTimeComponentIbED2Ev
@_ZN5blink18WatchTimeComponentINS_11DisplayTypeEEC1ES1_NSt3__16vectorIN5media12WatchTimeKeyENS3_9allocatorIS6_EEEEN4base17RepeatingCallbackIFS6_S1_EEENSB_IFNSA_9TimeDeltaEvEEEPNS5_5mojom17WatchTimeRecorderE = weak_odr hidden unnamed_addr alias void (%"class.blink::WatchTimeComponent.4"*, i32, %"class.std::__1::vector"*, %"class.base::RepeatingCallback.5"*, %"class.base::RepeatingCallback.2"*, %"class.media::mojom::WatchTimeRecorder"*), void (%"class.blink::WatchTimeComponent.4"*, i32, %"class.std::__1::vector"*, %"class.base::RepeatingCallback.5"*, %"class.base::RepeatingCallback.2"*, %"class.media::mojom::WatchTimeRecorder"*)* @_ZN5blink18WatchTimeComponentINS_11DisplayTypeEEC2ES1_NSt3__16vectorIN5media12WatchTimeKeyENS3_9allocatorIS6_EEEEN4base17RepeatingCallbackIFS6_S1_EEENSB_IFNSA_9TimeDeltaEvEEEPNS5_5mojom17WatchTimeRecorderE
@_ZN5blink18WatchTimeComponentINS_11DisplayTypeEED1Ev = weak_odr hidden unnamed_addr alias void (%"class.blink::WatchTimeComponent.4"*), void (%"class.blink::WatchTimeComponent.4"*)* @_ZN5blink18WatchTimeComponentINS_11DisplayTypeEED2Ev

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN5blink18WatchTimeComponentIbEC2EbNSt3__16vectorIN5media12WatchTimeKeyENS2_9allocatorIS5_EEEEN4base17RepeatingCallbackIFS5_bEEENSA_IFNS9_9TimeDeltaEvEEEPNS4_5mojom17WatchTimeRecorderE(%"class.blink::WatchTimeComponent"*, i1 zeroext, %"class.std::__1::vector"*, %"class.base::RepeatingCallback"*, %"class.base::RepeatingCallback.2"*, %"class.media::mojom::WatchTimeRecorder"*) unnamed_addr #0 comdat($_ZN5blink18WatchTimeComponentIbEC5EbNSt3__16vectorIN5media12WatchTimeKeyENS2_9allocatorIS5_EEEEN4base17RepeatingCallbackIFS5_bEEENSA_IFNS9_9TimeDeltaEvEEEPNS4_5mojom17WatchTimeRecorderE) align 2 {
  %7 = zext i1 %1 to i8
  %8 = bitcast %"class.blink::WatchTimeComponent"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 24, i1 false) #9
  %9 = bitcast %"class.std::__1::vector"* %2 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.blink::WatchTimeComponent"* %0 to i64*
  store i64 %10, i64* %11, align 8
  %12 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 1
  %13 = bitcast i32** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.blink::WatchTimeComponent", %"class.blink::WatchTimeComponent"* %0, i64 0, i32 0, i32 0, i32 1
  %16 = bitcast i32** %15 to i64*
  store i64 %14, i64* %16, align 8
  %17 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 2, i32 0, i32 0
  %18 = bitcast i32** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = getelementptr inbounds %"class.blink::WatchTimeComponent", %"class.blink::WatchTimeComponent"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %21 = bitcast i32** %20 to i64*
  store i64 %19, i64* %21, align 8
  %22 = bitcast %"class.std::__1::vector"* %2 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 24, i1 false) #9
  %23 = getelementptr inbounds %"class.blink::WatchTimeComponent", %"class.blink::WatchTimeComponent"* %0, i64 0, i32 1
  %24 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %25 = bitcast %"class.base::RepeatingCallback"* %3 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = bitcast %"class.base::RepeatingCallback"* %23 to i64*
  store i64 %26, i64* %27, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %24, align 8
  %28 = getelementptr inbounds %"class.blink::WatchTimeComponent", %"class.blink::WatchTimeComponent"* %0, i64 0, i32 2
  %29 = getelementptr inbounds %"class.base::RepeatingCallback.2", %"class.base::RepeatingCallback.2"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  %30 = bitcast %"class.base::RepeatingCallback.2"* %4 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = bitcast %"class.base::RepeatingCallback.2"* %28 to i64*
  store i64 %31, i64* %32, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %29, align 8
  %33 = getelementptr inbounds %"class.blink::WatchTimeComponent", %"class.blink::WatchTimeComponent"* %0, i64 0, i32 3
  store %"class.media::mojom::WatchTimeRecorder"* %5, %"class.media::mojom::WatchTimeRecorder"** %33, align 8
  %34 = getelementptr inbounds %"class.blink::WatchTimeComponent", %"class.blink::WatchTimeComponent"* %0, i64 0, i32 4
  store i8 %7, i8* %34, align 8
  %35 = getelementptr inbounds %"class.blink::WatchTimeComponent", %"class.blink::WatchTimeComponent"* %0, i64 0, i32 5
  store i8 %7, i8* %35, align 1
  %36 = getelementptr inbounds %"class.blink::WatchTimeComponent", %"class.blink::WatchTimeComponent"* %0, i64 0, i32 6, i32 0
  %37 = bitcast i64* %36 to <2 x i64>*
  store <2 x i64> <i64 0, i64 -9223372036854775808>, <2 x i64>* %37, align 8
  %38 = getelementptr inbounds %"class.blink::WatchTimeComponent", %"class.blink::WatchTimeComponent"* %0, i64 0, i32 8, i32 0
  store i64 -9223372036854775808, i64* %38, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN5blink18WatchTimeComponentIbED2Ev(%"class.blink::WatchTimeComponent"*) unnamed_addr #0 comdat($_ZN5blink18WatchTimeComponentIbED5Ev) align 2 {
  %2 = getelementptr inbounds %"class.blink::WatchTimeComponent", %"class.blink::WatchTimeComponent"* %0, i64 0, i32 2, i32 0, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %2) #9
  %3 = getelementptr inbounds %"class.blink::WatchTimeComponent", %"class.blink::WatchTimeComponent"* %0, i64 0, i32 1, i32 0, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %3) #9
  %4 = getelementptr inbounds %"class.blink::WatchTimeComponent", %"class.blink::WatchTimeComponent"* %0, i64 0, i32 0, i32 0, i32 0
  %5 = load i32*, i32** %4, align 8
  %6 = icmp eq i32* %5, null
  br i1 %6, label %12, label %7

7:                                                ; preds = %1
  %8 = ptrtoint i32* %5 to i64
  %9 = getelementptr inbounds %"class.blink::WatchTimeComponent", %"class.blink::WatchTimeComponent"* %0, i64 0, i32 0, i32 0, i32 1
  %10 = bitcast i32** %9 to i64*
  store i64 %8, i64* %10, align 8
  %11 = bitcast i32* %5 to i8*
  tail call void @_ZdlPv(i8* %11) #10
  br label %12

12:                                               ; preds = %1, %7
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN5blink18WatchTimeComponentIbE18OnReportingStartedEN4base9TimeDeltaE(%"class.blink::WatchTimeComponent"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.blink::WatchTimeComponent", %"class.blink::WatchTimeComponent"* %0, i64 0, i32 6, i32 0
  store i64 %1, i64* %3, align 8
  %4 = getelementptr inbounds %"class.blink::WatchTimeComponent", %"class.blink::WatchTimeComponent"* %0, i64 0, i32 7, i32 0
  %5 = bitcast i64* %4 to <2 x i64>*
  store <2 x i64> <i64 -9223372036854775808, i64 -9223372036854775808>, <2 x i64>* %5, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN5blink18WatchTimeComponentIbE15SetPendingValueEb(%"class.blink::WatchTimeComponent"*, i1 zeroext) local_unnamed_addr #0 comdat align 2 {
  %3 = zext i1 %1 to i8
  %4 = getelementptr inbounds %"class.blink::WatchTimeComponent", %"class.blink::WatchTimeComponent"* %0, i64 0, i32 5
  store i8 %3, i8* %4, align 1
  %5 = getelementptr inbounds %"class.blink::WatchTimeComponent", %"class.blink::WatchTimeComponent"* %0, i64 0, i32 4
  %6 = load i8, i8* %5, align 8, !range !2
  %7 = zext i8 %6 to i32
  %8 = zext i1 %1 to i32
  %9 = icmp eq i32 %7, %8
  %10 = getelementptr inbounds %"class.blink::WatchTimeComponent", %"class.blink::WatchTimeComponent"* %0, i64 0, i32 7, i32 0
  br i1 %9, label %21, label %11

11:                                               ; preds = %2
  %12 = load i64, i64* %10, align 8
  %13 = icmp eq i64 %12, -9223372036854775808
  br i1 %13, label %14, label %23

14:                                               ; preds = %11
  %15 = getelementptr inbounds %"class.blink::WatchTimeComponent", %"class.blink::WatchTimeComponent"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %16 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %15, align 8
  %17 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %16, i64 0, i32 1
  %18 = bitcast void ()** %17 to i64 (%"class.base::internal::BindStateBase"*)**
  %19 = load i64 (%"class.base::internal::BindStateBase"*)*, i64 (%"class.base::internal::BindStateBase"*)** %18, align 8
  %20 = tail call i64 %19(%"class.base::internal::BindStateBase"* %16) #9
  br label %21

21:                                               ; preds = %2, %14
  %22 = phi i64 [ %20, %14 ], [ -9223372036854775808, %2 ]
  store i64 %22, i64* %10, align 8
  br label %23

23:                                               ; preds = %21, %11
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN5blink18WatchTimeComponentIbE15SetCurrentValueEb(%"class.blink::WatchTimeComponent"*, i1 zeroext) local_unnamed_addr #0 comdat align 2 {
  %3 = zext i1 %1 to i8
  %4 = getelementptr inbounds %"class.blink::WatchTimeComponent", %"class.blink::WatchTimeComponent"* %0, i64 0, i32 4
  store i8 %3, i8* %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN5blink18WatchTimeComponentIbE15RecordWatchTimeEN4base9TimeDeltaE(%"class.blink::WatchTimeComponent"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.blink::WatchTimeComponent", %"class.blink::WatchTimeComponent"* %0, i64 0, i32 7, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, -9223372036854775808
  %6 = icmp slt i64 %4, %1
  %7 = select i1 %6, i64 %4, i64 %1
  %8 = select i1 %5, i64 %1, i64 %7
  %9 = getelementptr inbounds %"class.blink::WatchTimeComponent", %"class.blink::WatchTimeComponent"* %0, i64 0, i32 8
  %10 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %9, i64 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = icmp eq i64 %11, %8
  br i1 %12, label %55, label %13

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"class.blink::WatchTimeComponent", %"class.blink::WatchTimeComponent"* %0, i64 0, i32 8, i32 0
  store i64 %8, i64* %14, align 8
  %15 = getelementptr inbounds %"class.blink::WatchTimeComponent", %"class.blink::WatchTimeComponent"* %0, i64 0, i32 6, i32 0
  %16 = load i64, i64* %15, align 8
  %17 = tail call i64 @_ZNK4base9TimeDeltamiES0_(%"class.base::TimeDelta"* %9, i64 %16)
  %18 = icmp slt i64 %17, 1
  br i1 %18, label %55, label %19

19:                                               ; preds = %13
  %20 = getelementptr inbounds %"class.blink::WatchTimeComponent", %"class.blink::WatchTimeComponent"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %21 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %20, align 8
  %22 = icmp eq %"class.base::internal::BindStateBase"* %21, null
  br i1 %22, label %23, label %41

23:                                               ; preds = %19
  %24 = getelementptr inbounds %"class.blink::WatchTimeComponent", %"class.blink::WatchTimeComponent"* %0, i64 0, i32 0, i32 0, i32 0
  %25 = load i32*, i32** %24, align 8
  %26 = getelementptr inbounds %"class.blink::WatchTimeComponent", %"class.blink::WatchTimeComponent"* %0, i64 0, i32 0, i32 0, i32 1
  %27 = load i32*, i32** %26, align 8
  %28 = icmp eq i32* %25, %27
  br i1 %28, label %55, label %29

29:                                               ; preds = %23
  %30 = getelementptr inbounds %"class.blink::WatchTimeComponent", %"class.blink::WatchTimeComponent"* %0, i64 0, i32 3
  br label %31

31:                                               ; preds = %29, %31
  %32 = phi i32* [ %25, %29 ], [ %39, %31 ]
  %33 = load i32, i32* %32, align 4
  %34 = load %"class.media::mojom::WatchTimeRecorder"*, %"class.media::mojom::WatchTimeRecorder"** %30, align 8
  %35 = bitcast %"class.media::mojom::WatchTimeRecorder"* %34 to void (%"class.media::mojom::WatchTimeRecorder"*, i32, i64)***
  %36 = load void (%"class.media::mojom::WatchTimeRecorder"*, i32, i64)**, void (%"class.media::mojom::WatchTimeRecorder"*, i32, i64)*** %35, align 8
  %37 = getelementptr inbounds void (%"class.media::mojom::WatchTimeRecorder"*, i32, i64)*, void (%"class.media::mojom::WatchTimeRecorder"*, i32, i64)** %36, i64 2
  %38 = load void (%"class.media::mojom::WatchTimeRecorder"*, i32, i64)*, void (%"class.media::mojom::WatchTimeRecorder"*, i32, i64)** %37, align 8
  tail call void %38(%"class.media::mojom::WatchTimeRecorder"* %34, i32 %33, i64 %17) #9
  %39 = getelementptr inbounds i32, i32* %32, i64 1
  %40 = icmp eq i32* %39, %27
  br i1 %40, label %55, label %31

41:                                               ; preds = %19
  %42 = getelementptr inbounds %"class.blink::WatchTimeComponent", %"class.blink::WatchTimeComponent"* %0, i64 0, i32 3
  %43 = load %"class.media::mojom::WatchTimeRecorder"*, %"class.media::mojom::WatchTimeRecorder"** %42, align 8
  %44 = getelementptr inbounds %"class.blink::WatchTimeComponent", %"class.blink::WatchTimeComponent"* %0, i64 0, i32 4
  %45 = load i8, i8* %44, align 8, !range !2
  %46 = icmp ne i8 %45, 0
  %47 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %21, i64 0, i32 1
  %48 = bitcast void ()** %47 to i32 (%"class.base::internal::BindStateBase"*, i1)**
  %49 = load i32 (%"class.base::internal::BindStateBase"*, i1)*, i32 (%"class.base::internal::BindStateBase"*, i1)** %48, align 8
  %50 = tail call i32 %49(%"class.base::internal::BindStateBase"* nonnull %21, i1 zeroext %46) #9
  %51 = bitcast %"class.media::mojom::WatchTimeRecorder"* %43 to void (%"class.media::mojom::WatchTimeRecorder"*, i32, i64)***
  %52 = load void (%"class.media::mojom::WatchTimeRecorder"*, i32, i64)**, void (%"class.media::mojom::WatchTimeRecorder"*, i32, i64)*** %51, align 8
  %53 = getelementptr inbounds void (%"class.media::mojom::WatchTimeRecorder"*, i32, i64)*, void (%"class.media::mojom::WatchTimeRecorder"*, i32, i64)** %52, i64 2
  %54 = load void (%"class.media::mojom::WatchTimeRecorder"*, i32, i64)*, void (%"class.media::mojom::WatchTimeRecorder"*, i32, i64)** %53, align 8
  tail call void %54(%"class.media::mojom::WatchTimeRecorder"* %43, i32 %50, i64 %17) #9
  br label %55

55:                                               ; preds = %31, %23, %41, %13, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden zeroext i1 @_ZNK5blink18WatchTimeComponentIbE13NeedsFinalizeEv(%"class.blink::WatchTimeComponent"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::WatchTimeComponent", %"class.blink::WatchTimeComponent"* %0, i64 0, i32 7, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = icmp ne i64 %3, -9223372036854775808
  ret i1 %4
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK4base9TimeDeltamiES0_(%"class.base::TimeDelta"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = add i64 %1, -9223372036854775807
  %7 = icmp ult i64 %6, 2
  br i1 %7, label %17, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %0, i64 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = icmp sgt i64 %1, -1
  %12 = select i1 %11, i64 -9223372036854775808, i64 9223372036854775807
  %13 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %10, i64 %1) #9
  %14 = extractvalue { i64, i1 } %13, 1
  %15 = extractvalue { i64, i1 } %13, 0
  %16 = select i1 %14, i64 %12, i64 %15, !prof !3
  ret i64 %16

17:                                               ; preds = %2
  %18 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #9
  %19 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %19, align 8
  %20 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %0, i64 0, i32 0
  %21 = load i64, i64* %20, align 8
  %22 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22)
  %23 = icmp eq i64 %21, %1
  br i1 %23, label %25, label %24

24:                                               ; preds = %17
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  store i8* null, i8** %19, align 8
  br label %34

25:                                               ; preds = %17
  %26 = tail call i8* @_ZN7logging15CheckOpValueStrEl(i64 %1) #9
  %27 = tail call i8* @_ZN7logging15CheckOpValueStrEl(i64 %1) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* %26, i8* %27) #9
  %28 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %29 = load i8*, i8** %28, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  store i8* %29, i8** %19, align 8
  %30 = icmp eq i8* %29, null
  br i1 %30, label %34, label %31

31:                                               ; preds = %25
  %32 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %32) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 387, %"class.logging::CheckOpResult"* nonnull %4) #9
  %33 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %32) #9
  br label %34

34:                                               ; preds = %24, %25, %31
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #9
  %35 = icmp slt i64 %1, 0
  %36 = select i1 %35, i64 9223372036854775807, i64 -9223372036854775808
  ret i64 %36
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN5blink18WatchTimeComponentIbE8FinalizeEPNSt3__16vectorIN5media12WatchTimeKeyENS2_9allocatorIS5_EEEE(%"class.blink::WatchTimeComponent"*, %"class.std::__1::vector"*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.blink::WatchTimeComponent", %"class.blink::WatchTimeComponent"* %0, i64 0, i32 5
  %4 = load i8, i8* %3, align 1, !range !2
  %5 = getelementptr inbounds %"class.blink::WatchTimeComponent", %"class.blink::WatchTimeComponent"* %0, i64 0, i32 4
  store i8 %4, i8* %5, align 8
  %6 = getelementptr inbounds %"class.blink::WatchTimeComponent", %"class.blink::WatchTimeComponent"* %0, i64 0, i32 7, i32 0
  %7 = getelementptr inbounds %"class.blink::WatchTimeComponent", %"class.blink::WatchTimeComponent"* %0, i64 0, i32 6, i32 0
  %8 = load i64, i64* %6, align 8
  store i64 %8, i64* %7, align 8
  store i64 -9223372036854775808, i64* %6, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %10 = load i32*, i32** %9, align 8
  %11 = getelementptr inbounds %"class.blink::WatchTimeComponent", %"class.blink::WatchTimeComponent"* %0, i64 0, i32 0, i32 0, i32 0
  %12 = load i32*, i32** %11, align 8
  %13 = getelementptr inbounds %"class.blink::WatchTimeComponent", %"class.blink::WatchTimeComponent"* %0, i64 0, i32 0, i32 0, i32 1
  %14 = load i32*, i32** %13, align 8
  %15 = tail call i32* @_ZNSt3__16vectorIN5media12WatchTimeKeyENS_9allocatorIS2_EEE6insertINS_11__wrap_iterIPKS2_EEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsISC_E9referenceEEE5valueENS7_IPS2_EEE4typeESA_SC_SC_(%"class.std::__1::vector"* %1, i32* %10, i32* %12, i32* %14)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32* @_ZNSt3__16vectorIN5media12WatchTimeKeyENS_9allocatorIS2_EEE6insertINS_11__wrap_iterIPKS2_EEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsISC_E9referenceEEE5valueENS7_IPS2_EEE4typeESA_SC_SC_(%"class.std::__1::vector"*, i32*, i32*, i32*) local_unnamed_addr #0 comdat align 2 {
  %5 = bitcast i32* %2 to i8*
  %6 = bitcast i32* %1 to i8*
  %7 = ptrtoint i32* %1 to i64
  %8 = ptrtoint i32* %2 to i64
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %10 = ptrtoint i32* %3 to i64
  %11 = sub i64 %10, %8
  %12 = ashr exact i64 %11, 2
  %13 = icmp sgt i64 %11, 0
  br i1 %13, label %14, label %706

14:                                               ; preds = %4
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast i32** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %19 = load i32*, i32** %18, align 8
  %20 = ptrtoint i32* %19 to i64
  %21 = sub i64 %17, %20
  %22 = ashr exact i64 %21, 2
  %23 = icmp sgt i64 %12, %22
  %24 = bitcast i32** %18 to i64*
  br i1 %23, label %339, label %25

25:                                               ; preds = %14
  %26 = sub i64 %20, %7
  %27 = ashr exact i64 %26, 2
  %28 = icmp sgt i64 %12, %27
  br i1 %28, label %29, label %196

29:                                               ; preds = %25
  %30 = getelementptr inbounds i32, i32* %2, i64 %27
  %31 = icmp eq i32* %30, %3
  br i1 %31, label %191, label %32

32:                                               ; preds = %29
  %33 = xor i64 %27, -1
  %34 = getelementptr i32, i32* %3, i64 %33
  %35 = ptrtoint i32* %34 to i64
  %36 = sub i64 %35, %8
  %37 = lshr i64 %36, 2
  %38 = add nuw nsw i64 %37, 1
  %39 = icmp ult i64 %38, 8
  br i1 %39, label %135, label %40

40:                                               ; preds = %32
  %41 = xor i64 %27, -1
  %42 = getelementptr i32, i32* %3, i64 %41
  %43 = ptrtoint i32* %42 to i64
  %44 = sub i64 %43, %8
  %45 = lshr i64 %44, 2
  %46 = add nuw nsw i64 %45, 1
  %47 = getelementptr i32, i32* %19, i64 %46
  %48 = add nsw i64 %27, %45
  %49 = add i64 %48, 1
  %50 = getelementptr i32, i32* %2, i64 %49
  %51 = icmp ult i32* %19, %50
  %52 = icmp ult i32* %30, %47
  %53 = and i1 %51, %52
  br i1 %53, label %135, label %54

54:                                               ; preds = %40
  %55 = and i64 %38, 9223372036854775800
  %56 = getelementptr i32, i32* %19, i64 %55
  %57 = getelementptr i32, i32* %30, i64 %55
  %58 = add nsw i64 %55, -8
  %59 = lshr exact i64 %58, 3
  %60 = add nuw nsw i64 %59, 1
  %61 = and i64 %60, 3
  %62 = icmp ult i64 %58, 24
  br i1 %62, label %114, label %63

63:                                               ; preds = %54
  %64 = sub nsw i64 %60, %61
  br label %65

65:                                               ; preds = %65, %63
  %66 = phi i64 [ 0, %63 ], [ %111, %65 ]
  %67 = phi i64 [ %64, %63 ], [ %112, %65 ]
  %68 = getelementptr i32, i32* %19, i64 %66
  %69 = getelementptr i32, i32* %30, i64 %66
  %70 = bitcast i32* %69 to <4 x i32>*
  %71 = load <4 x i32>, <4 x i32>* %70, align 4, !alias.scope !4
  %72 = getelementptr i32, i32* %69, i64 4
  %73 = bitcast i32* %72 to <4 x i32>*
  %74 = load <4 x i32>, <4 x i32>* %73, align 4, !alias.scope !4
  %75 = bitcast i32* %68 to <4 x i32>*
  store <4 x i32> %71, <4 x i32>* %75, align 4, !alias.scope !7, !noalias !4
  %76 = getelementptr i32, i32* %68, i64 4
  %77 = bitcast i32* %76 to <4 x i32>*
  store <4 x i32> %74, <4 x i32>* %77, align 4, !alias.scope !7, !noalias !4
  %78 = or i64 %66, 8
  %79 = getelementptr i32, i32* %19, i64 %78
  %80 = getelementptr i32, i32* %30, i64 %78
  %81 = bitcast i32* %80 to <4 x i32>*
  %82 = load <4 x i32>, <4 x i32>* %81, align 4, !alias.scope !4
  %83 = getelementptr i32, i32* %80, i64 4
  %84 = bitcast i32* %83 to <4 x i32>*
  %85 = load <4 x i32>, <4 x i32>* %84, align 4, !alias.scope !4
  %86 = bitcast i32* %79 to <4 x i32>*
  store <4 x i32> %82, <4 x i32>* %86, align 4, !alias.scope !7, !noalias !4
  %87 = getelementptr i32, i32* %79, i64 4
  %88 = bitcast i32* %87 to <4 x i32>*
  store <4 x i32> %85, <4 x i32>* %88, align 4, !alias.scope !7, !noalias !4
  %89 = or i64 %66, 16
  %90 = getelementptr i32, i32* %19, i64 %89
  %91 = getelementptr i32, i32* %30, i64 %89
  %92 = bitcast i32* %91 to <4 x i32>*
  %93 = load <4 x i32>, <4 x i32>* %92, align 4, !alias.scope !4
  %94 = getelementptr i32, i32* %91, i64 4
  %95 = bitcast i32* %94 to <4 x i32>*
  %96 = load <4 x i32>, <4 x i32>* %95, align 4, !alias.scope !4
  %97 = bitcast i32* %90 to <4 x i32>*
  store <4 x i32> %93, <4 x i32>* %97, align 4, !alias.scope !7, !noalias !4
  %98 = getelementptr i32, i32* %90, i64 4
  %99 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %96, <4 x i32>* %99, align 4, !alias.scope !7, !noalias !4
  %100 = or i64 %66, 24
  %101 = getelementptr i32, i32* %19, i64 %100
  %102 = getelementptr i32, i32* %30, i64 %100
  %103 = bitcast i32* %102 to <4 x i32>*
  %104 = load <4 x i32>, <4 x i32>* %103, align 4, !alias.scope !4
  %105 = getelementptr i32, i32* %102, i64 4
  %106 = bitcast i32* %105 to <4 x i32>*
  %107 = load <4 x i32>, <4 x i32>* %106, align 4, !alias.scope !4
  %108 = bitcast i32* %101 to <4 x i32>*
  store <4 x i32> %104, <4 x i32>* %108, align 4, !alias.scope !7, !noalias !4
  %109 = getelementptr i32, i32* %101, i64 4
  %110 = bitcast i32* %109 to <4 x i32>*
  store <4 x i32> %107, <4 x i32>* %110, align 4, !alias.scope !7, !noalias !4
  %111 = add i64 %66, 32
  %112 = add i64 %67, -4
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %114, label %65, !llvm.loop !9

114:                                              ; preds = %65, %54
  %115 = phi i64 [ 0, %54 ], [ %111, %65 ]
  %116 = icmp eq i64 %61, 0
  br i1 %116, label %133, label %117

117:                                              ; preds = %114, %117
  %118 = phi i64 [ %130, %117 ], [ %115, %114 ]
  %119 = phi i64 [ %131, %117 ], [ %61, %114 ]
  %120 = getelementptr i32, i32* %19, i64 %118
  %121 = getelementptr i32, i32* %30, i64 %118
  %122 = bitcast i32* %121 to <4 x i32>*
  %123 = load <4 x i32>, <4 x i32>* %122, align 4, !alias.scope !4
  %124 = getelementptr i32, i32* %121, i64 4
  %125 = bitcast i32* %124 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 4, !alias.scope !4
  %127 = bitcast i32* %120 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %127, align 4, !alias.scope !7, !noalias !4
  %128 = getelementptr i32, i32* %120, i64 4
  %129 = bitcast i32* %128 to <4 x i32>*
  store <4 x i32> %126, <4 x i32>* %129, align 4, !alias.scope !7, !noalias !4
  %130 = add i64 %118, 8
  %131 = add i64 %119, -1
  %132 = icmp eq i64 %131, 0
  br i1 %132, label %133, label %117, !llvm.loop !11

133:                                              ; preds = %117, %114
  %134 = icmp eq i64 %38, %55
  br i1 %134, label %188, label %135

135:                                              ; preds = %133, %40, %32
  %136 = phi i32* [ %19, %40 ], [ %19, %32 ], [ %56, %133 ]
  %137 = phi i32* [ %30, %40 ], [ %30, %32 ], [ %57, %133 ]
  %138 = ptrtoint i32* %137 to i64
  %139 = getelementptr i32, i32* %3, i64 -1
  %140 = ptrtoint i32* %139 to i64
  %141 = sub i64 %140, %138
  %142 = lshr i64 %141, 2
  %143 = add nuw nsw i64 %142, 1
  %144 = and i64 %143, 7
  %145 = icmp eq i64 %144, 0
  br i1 %145, label %155, label %146

146:                                              ; preds = %135, %146
  %147 = phi i32* [ %152, %146 ], [ %136, %135 ]
  %148 = phi i32* [ %151, %146 ], [ %137, %135 ]
  %149 = phi i64 [ %153, %146 ], [ %144, %135 ]
  %150 = load i32, i32* %148, align 4
  store i32 %150, i32* %147, align 4
  %151 = getelementptr inbounds i32, i32* %148, i64 1
  %152 = getelementptr inbounds i32, i32* %147, i64 1
  %153 = add i64 %149, -1
  %154 = icmp eq i64 %153, 0
  br i1 %154, label %155, label %146, !llvm.loop !13

155:                                              ; preds = %146, %135
  %156 = phi i32* [ undef, %135 ], [ %152, %146 ]
  %157 = phi i32* [ %136, %135 ], [ %152, %146 ]
  %158 = phi i32* [ %137, %135 ], [ %151, %146 ]
  %159 = icmp ult i64 %141, 28
  br i1 %159, label %188, label %160

160:                                              ; preds = %155, %160
  %161 = phi i32* [ %186, %160 ], [ %157, %155 ]
  %162 = phi i32* [ %185, %160 ], [ %158, %155 ]
  %163 = load i32, i32* %162, align 4
  store i32 %163, i32* %161, align 4
  %164 = getelementptr inbounds i32, i32* %162, i64 1
  %165 = getelementptr inbounds i32, i32* %161, i64 1
  %166 = load i32, i32* %164, align 4
  store i32 %166, i32* %165, align 4
  %167 = getelementptr inbounds i32, i32* %162, i64 2
  %168 = getelementptr inbounds i32, i32* %161, i64 2
  %169 = load i32, i32* %167, align 4
  store i32 %169, i32* %168, align 4
  %170 = getelementptr inbounds i32, i32* %162, i64 3
  %171 = getelementptr inbounds i32, i32* %161, i64 3
  %172 = load i32, i32* %170, align 4
  store i32 %172, i32* %171, align 4
  %173 = getelementptr inbounds i32, i32* %162, i64 4
  %174 = getelementptr inbounds i32, i32* %161, i64 4
  %175 = load i32, i32* %173, align 4
  store i32 %175, i32* %174, align 4
  %176 = getelementptr inbounds i32, i32* %162, i64 5
  %177 = getelementptr inbounds i32, i32* %161, i64 5
  %178 = load i32, i32* %176, align 4
  store i32 %178, i32* %177, align 4
  %179 = getelementptr inbounds i32, i32* %162, i64 6
  %180 = getelementptr inbounds i32, i32* %161, i64 6
  %181 = load i32, i32* %179, align 4
  store i32 %181, i32* %180, align 4
  %182 = getelementptr inbounds i32, i32* %162, i64 7
  %183 = getelementptr inbounds i32, i32* %161, i64 7
  %184 = load i32, i32* %182, align 4
  store i32 %184, i32* %183, align 4
  %185 = getelementptr inbounds i32, i32* %162, i64 8
  %186 = getelementptr inbounds i32, i32* %161, i64 8
  %187 = icmp eq i32* %185, %3
  br i1 %187, label %188, label %160, !llvm.loop !14

188:                                              ; preds = %155, %160, %133
  %189 = phi i32* [ %56, %133 ], [ %156, %155 ], [ %186, %160 ]
  %190 = ptrtoint i32* %189 to i64
  br label %191

191:                                              ; preds = %188, %29
  %192 = phi i64 [ %20, %29 ], [ %190, %188 ]
  store i64 %192, i64* %24, align 8
  %193 = icmp sgt i64 %26, 0
  br i1 %193, label %194, label %706

194:                                              ; preds = %191
  %195 = inttoptr i64 %192 to i32*
  br label %196

196:                                              ; preds = %194, %25
  %197 = phi i64 [ %192, %194 ], [ %20, %25 ]
  %198 = phi i32* [ %195, %194 ], [ %19, %25 ]
  %199 = phi i32* [ %30, %194 ], [ %3, %25 ]
  %200 = getelementptr inbounds i32, i32* %1, i64 %12
  %201 = ptrtoint i32* %200 to i64
  %202 = sub i64 %197, %201
  %203 = ashr exact i64 %202, 2
  %204 = getelementptr inbounds i32, i32* %1, i64 %203
  %205 = icmp ult i32* %204, %19
  br i1 %205, label %206, label %319

206:                                              ; preds = %196
  %207 = sub nsw i64 0, %203
  %208 = getelementptr i32, i32* %19, i64 %207
  %209 = bitcast i32* %208 to i8*
  %210 = xor i64 %7, -1
  %211 = getelementptr i8, i8* %209, i64 %210
  %212 = ptrtoint i8* %211 to i64
  %213 = lshr i64 %212, 2
  %214 = add nuw nsw i64 %213, 1
  %215 = icmp ult i64 %214, 8
  br i1 %215, label %216, label %219

216:                                              ; preds = %314, %219, %206
  %217 = phi i32* [ %198, %219 ], [ %198, %206 ], [ %237, %314 ]
  %218 = phi i32* [ %204, %219 ], [ %204, %206 ], [ %238, %314 ]
  br label %327

219:                                              ; preds = %206
  %220 = sub nsw i64 0, %203
  %221 = getelementptr i32, i32* %19, i64 %220
  %222 = bitcast i32* %221 to i8*
  %223 = xor i64 %7, -1
  %224 = getelementptr i8, i8* %222, i64 %223
  %225 = ptrtoint i8* %224 to i64
  %226 = lshr i64 %225, 2
  %227 = add nuw nsw i64 %226, 1
  %228 = getelementptr i32, i32* %198, i64 %227
  %229 = add nsw i64 %203, %226
  %230 = add i64 %229, 1
  %231 = getelementptr i32, i32* %1, i64 %230
  %232 = icmp ult i32* %198, %231
  %233 = icmp ult i32* %204, %228
  %234 = and i1 %232, %233
  br i1 %234, label %216, label %235

235:                                              ; preds = %219
  %236 = and i64 %214, 9223372036854775800
  %237 = getelementptr i32, i32* %198, i64 %236
  %238 = getelementptr i32, i32* %204, i64 %236
  %239 = add nsw i64 %236, -8
  %240 = lshr exact i64 %239, 3
  %241 = add nuw nsw i64 %240, 1
  %242 = and i64 %241, 3
  %243 = icmp ult i64 %239, 24
  br i1 %243, label %295, label %244

244:                                              ; preds = %235
  %245 = sub nsw i64 %241, %242
  br label %246

246:                                              ; preds = %246, %244
  %247 = phi i64 [ 0, %244 ], [ %292, %246 ]
  %248 = phi i64 [ %245, %244 ], [ %293, %246 ]
  %249 = getelementptr i32, i32* %198, i64 %247
  %250 = getelementptr i32, i32* %204, i64 %247
  %251 = bitcast i32* %250 to <4 x i32>*
  %252 = load <4 x i32>, <4 x i32>* %251, align 4, !alias.scope !15
  %253 = getelementptr i32, i32* %250, i64 4
  %254 = bitcast i32* %253 to <4 x i32>*
  %255 = load <4 x i32>, <4 x i32>* %254, align 4, !alias.scope !15
  %256 = bitcast i32* %249 to <4 x i32>*
  store <4 x i32> %252, <4 x i32>* %256, align 4, !alias.scope !18, !noalias !15
  %257 = getelementptr i32, i32* %249, i64 4
  %258 = bitcast i32* %257 to <4 x i32>*
  store <4 x i32> %255, <4 x i32>* %258, align 4, !alias.scope !18, !noalias !15
  %259 = or i64 %247, 8
  %260 = getelementptr i32, i32* %198, i64 %259
  %261 = getelementptr i32, i32* %204, i64 %259
  %262 = bitcast i32* %261 to <4 x i32>*
  %263 = load <4 x i32>, <4 x i32>* %262, align 4, !alias.scope !15
  %264 = getelementptr i32, i32* %261, i64 4
  %265 = bitcast i32* %264 to <4 x i32>*
  %266 = load <4 x i32>, <4 x i32>* %265, align 4, !alias.scope !15
  %267 = bitcast i32* %260 to <4 x i32>*
  store <4 x i32> %263, <4 x i32>* %267, align 4, !alias.scope !18, !noalias !15
  %268 = getelementptr i32, i32* %260, i64 4
  %269 = bitcast i32* %268 to <4 x i32>*
  store <4 x i32> %266, <4 x i32>* %269, align 4, !alias.scope !18, !noalias !15
  %270 = or i64 %247, 16
  %271 = getelementptr i32, i32* %198, i64 %270
  %272 = getelementptr i32, i32* %204, i64 %270
  %273 = bitcast i32* %272 to <4 x i32>*
  %274 = load <4 x i32>, <4 x i32>* %273, align 4, !alias.scope !15
  %275 = getelementptr i32, i32* %272, i64 4
  %276 = bitcast i32* %275 to <4 x i32>*
  %277 = load <4 x i32>, <4 x i32>* %276, align 4, !alias.scope !15
  %278 = bitcast i32* %271 to <4 x i32>*
  store <4 x i32> %274, <4 x i32>* %278, align 4, !alias.scope !18, !noalias !15
  %279 = getelementptr i32, i32* %271, i64 4
  %280 = bitcast i32* %279 to <4 x i32>*
  store <4 x i32> %277, <4 x i32>* %280, align 4, !alias.scope !18, !noalias !15
  %281 = or i64 %247, 24
  %282 = getelementptr i32, i32* %198, i64 %281
  %283 = getelementptr i32, i32* %204, i64 %281
  %284 = bitcast i32* %283 to <4 x i32>*
  %285 = load <4 x i32>, <4 x i32>* %284, align 4, !alias.scope !15
  %286 = getelementptr i32, i32* %283, i64 4
  %287 = bitcast i32* %286 to <4 x i32>*
  %288 = load <4 x i32>, <4 x i32>* %287, align 4, !alias.scope !15
  %289 = bitcast i32* %282 to <4 x i32>*
  store <4 x i32> %285, <4 x i32>* %289, align 4, !alias.scope !18, !noalias !15
  %290 = getelementptr i32, i32* %282, i64 4
  %291 = bitcast i32* %290 to <4 x i32>*
  store <4 x i32> %288, <4 x i32>* %291, align 4, !alias.scope !18, !noalias !15
  %292 = add i64 %247, 32
  %293 = add i64 %248, -4
  %294 = icmp eq i64 %293, 0
  br i1 %294, label %295, label %246, !llvm.loop !20

295:                                              ; preds = %246, %235
  %296 = phi i64 [ 0, %235 ], [ %292, %246 ]
  %297 = icmp eq i64 %242, 0
  br i1 %297, label %314, label %298

298:                                              ; preds = %295, %298
  %299 = phi i64 [ %311, %298 ], [ %296, %295 ]
  %300 = phi i64 [ %312, %298 ], [ %242, %295 ]
  %301 = getelementptr i32, i32* %198, i64 %299
  %302 = getelementptr i32, i32* %204, i64 %299
  %303 = bitcast i32* %302 to <4 x i32>*
  %304 = load <4 x i32>, <4 x i32>* %303, align 4, !alias.scope !15
  %305 = getelementptr i32, i32* %302, i64 4
  %306 = bitcast i32* %305 to <4 x i32>*
  %307 = load <4 x i32>, <4 x i32>* %306, align 4, !alias.scope !15
  %308 = bitcast i32* %301 to <4 x i32>*
  store <4 x i32> %304, <4 x i32>* %308, align 4, !alias.scope !18, !noalias !15
  %309 = getelementptr i32, i32* %301, i64 4
  %310 = bitcast i32* %309 to <4 x i32>*
  store <4 x i32> %307, <4 x i32>* %310, align 4, !alias.scope !18, !noalias !15
  %311 = add i64 %299, 8
  %312 = add i64 %300, -1
  %313 = icmp eq i64 %312, 0
  br i1 %313, label %314, label %298, !llvm.loop !21

314:                                              ; preds = %298, %295
  %315 = icmp eq i64 %214, %236
  br i1 %315, label %316, label %216

316:                                              ; preds = %327, %314
  %317 = phi i32* [ %237, %314 ], [ %332, %327 ]
  %318 = ptrtoint i32* %317 to i64
  br label %319

319:                                              ; preds = %316, %196
  %320 = phi i64 [ %318, %316 ], [ %197, %196 ]
  store i64 %320, i64* %24, align 8
  %321 = icmp eq i64 %202, 0
  br i1 %321, label %334, label %322

322:                                              ; preds = %319
  %323 = sub nsw i64 0, %203
  %324 = getelementptr inbounds i32, i32* %198, i64 %323
  %325 = bitcast i32* %324 to i8*
  %326 = bitcast i32* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %325, i8* align 4 %326, i64 %202, i1 false) #9
  br label %334

327:                                              ; preds = %216, %327
  %328 = phi i32* [ %332, %327 ], [ %217, %216 ]
  %329 = phi i32* [ %331, %327 ], [ %218, %216 ]
  %330 = load i32, i32* %329, align 4
  store i32 %330, i32* %328, align 4
  %331 = getelementptr inbounds i32, i32* %329, i64 1
  %332 = getelementptr inbounds i32, i32* %328, i64 1
  %333 = icmp ult i32* %331, %19
  br i1 %333, label %327, label %316, !llvm.loop !22

334:                                              ; preds = %319, %322
  %335 = ptrtoint i32* %199 to i64
  %336 = sub i64 %335, %8
  %337 = icmp eq i64 %336, 0
  br i1 %337, label %706, label %338

338:                                              ; preds = %334
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %6, i8* align 4 %5, i64 %336, i1 false) #9
  br label %706

339:                                              ; preds = %14
  %340 = bitcast %"class.std::__1::vector"* %0 to i64*
  %341 = load i64, i64* %340, align 8
  %342 = sub i64 %20, %341
  %343 = ashr exact i64 %342, 2
  %344 = add nsw i64 %343, %12
  %345 = icmp ugt i64 %344, 4611686018427387903
  br i1 %345, label %346, label %348

346:                                              ; preds = %339
  %347 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %347) #11
  unreachable

348:                                              ; preds = %339
  %349 = sub i64 %17, %341
  %350 = ashr exact i64 %349, 2
  %351 = icmp ult i64 %350, 2305843009213693951
  br i1 %351, label %355, label %352

352:                                              ; preds = %348
  %353 = sub i64 %7, %341
  %354 = ashr exact i64 %353, 2
  br label %365

355:                                              ; preds = %348
  %356 = ashr exact i64 %349, 1
  %357 = icmp ult i64 %356, %344
  %358 = select i1 %357, i64 %344, i64 %356
  %359 = sub i64 %7, %341
  %360 = ashr exact i64 %359, 2
  %361 = icmp eq i64 %358, 0
  br i1 %361, label %371, label %362

362:                                              ; preds = %355
  %363 = icmp ugt i64 %358, 4611686018427387903
  br i1 %363, label %364, label %365

364:                                              ; preds = %362
  tail call void @abort() #11
  unreachable

365:                                              ; preds = %352, %362
  %366 = phi i64 [ 4611686018427387903, %352 ], [ %358, %362 ]
  %367 = phi i64 [ %354, %352 ], [ %360, %362 ]
  %368 = shl i64 %366, 2
  %369 = tail call i8* @_Znwm(i64 %368) #10
  %370 = bitcast i8* %369 to i32*
  br label %371

371:                                              ; preds = %365, %355
  %372 = phi i64 [ %367, %365 ], [ %360, %355 ]
  %373 = phi i64 [ %366, %365 ], [ 0, %355 ]
  %374 = phi i32* [ %370, %365 ], [ null, %355 ]
  %375 = getelementptr inbounds i32, i32* %374, i64 %372
  %376 = getelementptr inbounds i32, i32* %374, i64 %373
  %377 = ptrtoint i32* %376 to i64
  %378 = getelementptr inbounds i32, i32* %375, i64 %12
  %379 = add i64 %11, -4
  %380 = lshr i64 %379, 2
  %381 = add nuw nsw i64 %380, 1
  %382 = icmp ult i64 %381, 8
  br i1 %382, label %475, label %383

383:                                              ; preds = %371
  %384 = add i64 %11, -4
  %385 = lshr i64 %384, 2
  %386 = add nsw i64 %372, %385
  %387 = add i64 %386, 1
  %388 = getelementptr i32, i32* %374, i64 %387
  %389 = add nuw nsw i64 %385, 1
  %390 = getelementptr i32, i32* %2, i64 %389
  %391 = icmp ult i32* %375, %390
  %392 = icmp ugt i32* %388, %2
  %393 = and i1 %391, %392
  br i1 %393, label %475, label %394

394:                                              ; preds = %383
  %395 = and i64 %381, 9223372036854775800
  %396 = getelementptr i32, i32* %375, i64 %395
  %397 = getelementptr i32, i32* %2, i64 %395
  %398 = add nsw i64 %395, -8
  %399 = lshr exact i64 %398, 3
  %400 = add nuw nsw i64 %399, 1
  %401 = and i64 %400, 3
  %402 = icmp ult i64 %398, 24
  br i1 %402, label %454, label %403

403:                                              ; preds = %394
  %404 = sub nsw i64 %400, %401
  br label %405

405:                                              ; preds = %405, %403
  %406 = phi i64 [ 0, %403 ], [ %451, %405 ]
  %407 = phi i64 [ %404, %403 ], [ %452, %405 ]
  %408 = getelementptr i32, i32* %375, i64 %406
  %409 = getelementptr i32, i32* %2, i64 %406
  %410 = bitcast i32* %409 to <4 x i32>*
  %411 = load <4 x i32>, <4 x i32>* %410, align 4, !alias.scope !23
  %412 = getelementptr i32, i32* %409, i64 4
  %413 = bitcast i32* %412 to <4 x i32>*
  %414 = load <4 x i32>, <4 x i32>* %413, align 4, !alias.scope !23
  %415 = bitcast i32* %408 to <4 x i32>*
  store <4 x i32> %411, <4 x i32>* %415, align 4, !alias.scope !26, !noalias !23
  %416 = getelementptr i32, i32* %408, i64 4
  %417 = bitcast i32* %416 to <4 x i32>*
  store <4 x i32> %414, <4 x i32>* %417, align 4, !alias.scope !26, !noalias !23
  %418 = or i64 %406, 8
  %419 = getelementptr i32, i32* %375, i64 %418
  %420 = getelementptr i32, i32* %2, i64 %418
  %421 = bitcast i32* %420 to <4 x i32>*
  %422 = load <4 x i32>, <4 x i32>* %421, align 4, !alias.scope !23
  %423 = getelementptr i32, i32* %420, i64 4
  %424 = bitcast i32* %423 to <4 x i32>*
  %425 = load <4 x i32>, <4 x i32>* %424, align 4, !alias.scope !23
  %426 = bitcast i32* %419 to <4 x i32>*
  store <4 x i32> %422, <4 x i32>* %426, align 4, !alias.scope !26, !noalias !23
  %427 = getelementptr i32, i32* %419, i64 4
  %428 = bitcast i32* %427 to <4 x i32>*
  store <4 x i32> %425, <4 x i32>* %428, align 4, !alias.scope !26, !noalias !23
  %429 = or i64 %406, 16
  %430 = getelementptr i32, i32* %375, i64 %429
  %431 = getelementptr i32, i32* %2, i64 %429
  %432 = bitcast i32* %431 to <4 x i32>*
  %433 = load <4 x i32>, <4 x i32>* %432, align 4, !alias.scope !23
  %434 = getelementptr i32, i32* %431, i64 4
  %435 = bitcast i32* %434 to <4 x i32>*
  %436 = load <4 x i32>, <4 x i32>* %435, align 4, !alias.scope !23
  %437 = bitcast i32* %430 to <4 x i32>*
  store <4 x i32> %433, <4 x i32>* %437, align 4, !alias.scope !26, !noalias !23
  %438 = getelementptr i32, i32* %430, i64 4
  %439 = bitcast i32* %438 to <4 x i32>*
  store <4 x i32> %436, <4 x i32>* %439, align 4, !alias.scope !26, !noalias !23
  %440 = or i64 %406, 24
  %441 = getelementptr i32, i32* %375, i64 %440
  %442 = getelementptr i32, i32* %2, i64 %440
  %443 = bitcast i32* %442 to <4 x i32>*
  %444 = load <4 x i32>, <4 x i32>* %443, align 4, !alias.scope !23
  %445 = getelementptr i32, i32* %442, i64 4
  %446 = bitcast i32* %445 to <4 x i32>*
  %447 = load <4 x i32>, <4 x i32>* %446, align 4, !alias.scope !23
  %448 = bitcast i32* %441 to <4 x i32>*
  store <4 x i32> %444, <4 x i32>* %448, align 4, !alias.scope !26, !noalias !23
  %449 = getelementptr i32, i32* %441, i64 4
  %450 = bitcast i32* %449 to <4 x i32>*
  store <4 x i32> %447, <4 x i32>* %450, align 4, !alias.scope !26, !noalias !23
  %451 = add i64 %406, 32
  %452 = add i64 %407, -4
  %453 = icmp eq i64 %452, 0
  br i1 %453, label %454, label %405, !llvm.loop !28

454:                                              ; preds = %405, %394
  %455 = phi i64 [ 0, %394 ], [ %451, %405 ]
  %456 = icmp eq i64 %401, 0
  br i1 %456, label %473, label %457

457:                                              ; preds = %454, %457
  %458 = phi i64 [ %470, %457 ], [ %455, %454 ]
  %459 = phi i64 [ %471, %457 ], [ %401, %454 ]
  %460 = getelementptr i32, i32* %375, i64 %458
  %461 = getelementptr i32, i32* %2, i64 %458
  %462 = bitcast i32* %461 to <4 x i32>*
  %463 = load <4 x i32>, <4 x i32>* %462, align 4, !alias.scope !23
  %464 = getelementptr i32, i32* %461, i64 4
  %465 = bitcast i32* %464 to <4 x i32>*
  %466 = load <4 x i32>, <4 x i32>* %465, align 4, !alias.scope !23
  %467 = bitcast i32* %460 to <4 x i32>*
  store <4 x i32> %463, <4 x i32>* %467, align 4, !alias.scope !26, !noalias !23
  %468 = getelementptr i32, i32* %460, i64 4
  %469 = bitcast i32* %468 to <4 x i32>*
  store <4 x i32> %466, <4 x i32>* %469, align 4, !alias.scope !26, !noalias !23
  %470 = add i64 %458, 8
  %471 = add i64 %459, -1
  %472 = icmp eq i64 %471, 0
  br i1 %472, label %473, label %457, !llvm.loop !29

473:                                              ; preds = %457, %454
  %474 = icmp eq i64 %381, %395
  br i1 %474, label %529, label %475

475:                                              ; preds = %473, %383, %371
  %476 = phi i32* [ %375, %383 ], [ %375, %371 ], [ %396, %473 ]
  %477 = phi i32* [ %2, %383 ], [ %2, %371 ], [ %397, %473 ]
  %478 = ptrtoint i32* %476 to i64
  %479 = add nsw i64 %372, %12
  %480 = add nsw i64 %479, -1
  %481 = getelementptr i32, i32* %374, i64 %480
  %482 = ptrtoint i32* %481 to i64
  %483 = sub i64 %482, %478
  %484 = lshr i64 %483, 2
  %485 = add nuw nsw i64 %484, 1
  %486 = and i64 %485, 7
  %487 = icmp eq i64 %486, 0
  br i1 %487, label %497, label %488

488:                                              ; preds = %475, %488
  %489 = phi i32* [ %493, %488 ], [ %476, %475 ]
  %490 = phi i32* [ %494, %488 ], [ %477, %475 ]
  %491 = phi i64 [ %495, %488 ], [ %486, %475 ]
  %492 = load i32, i32* %490, align 4
  store i32 %492, i32* %489, align 4
  %493 = getelementptr inbounds i32, i32* %489, i64 1
  %494 = getelementptr inbounds i32, i32* %490, i64 1
  %495 = add i64 %491, -1
  %496 = icmp eq i64 %495, 0
  br i1 %496, label %497, label %488, !llvm.loop !30

497:                                              ; preds = %488, %475
  %498 = phi i32* [ %476, %475 ], [ %493, %488 ]
  %499 = phi i32* [ %477, %475 ], [ %494, %488 ]
  %500 = icmp ult i64 %483, 28
  br i1 %500, label %529, label %501

501:                                              ; preds = %497, %501
  %502 = phi i32* [ %526, %501 ], [ %498, %497 ]
  %503 = phi i32* [ %527, %501 ], [ %499, %497 ]
  %504 = load i32, i32* %503, align 4
  store i32 %504, i32* %502, align 4
  %505 = getelementptr inbounds i32, i32* %502, i64 1
  %506 = getelementptr inbounds i32, i32* %503, i64 1
  %507 = load i32, i32* %506, align 4
  store i32 %507, i32* %505, align 4
  %508 = getelementptr inbounds i32, i32* %502, i64 2
  %509 = getelementptr inbounds i32, i32* %503, i64 2
  %510 = load i32, i32* %509, align 4
  store i32 %510, i32* %508, align 4
  %511 = getelementptr inbounds i32, i32* %502, i64 3
  %512 = getelementptr inbounds i32, i32* %503, i64 3
  %513 = load i32, i32* %512, align 4
  store i32 %513, i32* %511, align 4
  %514 = getelementptr inbounds i32, i32* %502, i64 4
  %515 = getelementptr inbounds i32, i32* %503, i64 4
  %516 = load i32, i32* %515, align 4
  store i32 %516, i32* %514, align 4
  %517 = getelementptr inbounds i32, i32* %502, i64 5
  %518 = getelementptr inbounds i32, i32* %503, i64 5
  %519 = load i32, i32* %518, align 4
  store i32 %519, i32* %517, align 4
  %520 = getelementptr inbounds i32, i32* %502, i64 6
  %521 = getelementptr inbounds i32, i32* %503, i64 6
  %522 = load i32, i32* %521, align 4
  store i32 %522, i32* %520, align 4
  %523 = getelementptr inbounds i32, i32* %502, i64 7
  %524 = getelementptr inbounds i32, i32* %503, i64 7
  %525 = load i32, i32* %524, align 4
  store i32 %525, i32* %523, align 4
  %526 = getelementptr inbounds i32, i32* %502, i64 8
  %527 = getelementptr inbounds i32, i32* %503, i64 8
  %528 = icmp eq i32* %378, %526
  br i1 %528, label %529, label %501, !llvm.loop !31

529:                                              ; preds = %497, %501, %473
  %530 = load i32*, i32** %9, align 8
  %531 = ptrtoint i32* %530 to i64
  %532 = sub i64 %7, %531
  %533 = ashr exact i64 %532, 2
  %534 = sub nsw i64 0, %533
  %535 = getelementptr inbounds i32, i32* %375, i64 %534
  %536 = ptrtoint i32* %535 to i64
  %537 = icmp sgt i64 %532, 0
  br i1 %537, label %538, label %541

538:                                              ; preds = %529
  %539 = bitcast i32* %535 to i8*
  %540 = bitcast i32* %530 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %539, i8* align 4 %540, i64 %532, i1 false) #9
  br label %541

541:                                              ; preds = %538, %529
  %542 = load i32*, i32** %18, align 8
  %543 = icmp eq i32* %542, %1
  br i1 %543, label %699, label %544

544:                                              ; preds = %541
  %545 = getelementptr i32, i32* %542, i64 -1
  %546 = ptrtoint i32* %545 to i64
  %547 = sub i64 %546, %7
  %548 = lshr i64 %547, 2
  %549 = add nuw nsw i64 %548, 1
  %550 = icmp ult i64 %549, 8
  br i1 %550, label %646, label %551

551:                                              ; preds = %544
  %552 = add nsw i64 %372, %12
  %553 = getelementptr i32, i32* %542, i64 -1
  %554 = ptrtoint i32* %553 to i64
  %555 = sub i64 %554, %7
  %556 = lshr i64 %555, 2
  %557 = add nsw i64 %552, %556
  %558 = add i64 %557, 1
  %559 = getelementptr i32, i32* %374, i64 %558
  %560 = add nuw nsw i64 %556, 1
  %561 = getelementptr i32, i32* %1, i64 %560
  %562 = icmp ult i32* %378, %561
  %563 = icmp ugt i32* %559, %1
  %564 = and i1 %562, %563
  br i1 %564, label %646, label %565

565:                                              ; preds = %551
  %566 = and i64 %549, 9223372036854775800
  %567 = getelementptr i32, i32* %378, i64 %566
  %568 = getelementptr i32, i32* %1, i64 %566
  %569 = add nsw i64 %566, -8
  %570 = lshr exact i64 %569, 3
  %571 = add nuw nsw i64 %570, 1
  %572 = and i64 %571, 3
  %573 = icmp ult i64 %569, 24
  br i1 %573, label %625, label %574

574:                                              ; preds = %565
  %575 = sub nsw i64 %571, %572
  br label %576

576:                                              ; preds = %576, %574
  %577 = phi i64 [ 0, %574 ], [ %622, %576 ]
  %578 = phi i64 [ %575, %574 ], [ %623, %576 ]
  %579 = getelementptr i32, i32* %378, i64 %577
  %580 = getelementptr i32, i32* %1, i64 %577
  %581 = bitcast i32* %580 to <4 x i32>*
  %582 = load <4 x i32>, <4 x i32>* %581, align 4, !alias.scope !32
  %583 = getelementptr i32, i32* %580, i64 4
  %584 = bitcast i32* %583 to <4 x i32>*
  %585 = load <4 x i32>, <4 x i32>* %584, align 4, !alias.scope !32
  %586 = bitcast i32* %579 to <4 x i32>*
  store <4 x i32> %582, <4 x i32>* %586, align 4, !alias.scope !35, !noalias !32
  %587 = getelementptr i32, i32* %579, i64 4
  %588 = bitcast i32* %587 to <4 x i32>*
  store <4 x i32> %585, <4 x i32>* %588, align 4, !alias.scope !35, !noalias !32
  %589 = or i64 %577, 8
  %590 = getelementptr i32, i32* %378, i64 %589
  %591 = getelementptr i32, i32* %1, i64 %589
  %592 = bitcast i32* %591 to <4 x i32>*
  %593 = load <4 x i32>, <4 x i32>* %592, align 4, !alias.scope !32
  %594 = getelementptr i32, i32* %591, i64 4
  %595 = bitcast i32* %594 to <4 x i32>*
  %596 = load <4 x i32>, <4 x i32>* %595, align 4, !alias.scope !32
  %597 = bitcast i32* %590 to <4 x i32>*
  store <4 x i32> %593, <4 x i32>* %597, align 4, !alias.scope !35, !noalias !32
  %598 = getelementptr i32, i32* %590, i64 4
  %599 = bitcast i32* %598 to <4 x i32>*
  store <4 x i32> %596, <4 x i32>* %599, align 4, !alias.scope !35, !noalias !32
  %600 = or i64 %577, 16
  %601 = getelementptr i32, i32* %378, i64 %600
  %602 = getelementptr i32, i32* %1, i64 %600
  %603 = bitcast i32* %602 to <4 x i32>*
  %604 = load <4 x i32>, <4 x i32>* %603, align 4, !alias.scope !32
  %605 = getelementptr i32, i32* %602, i64 4
  %606 = bitcast i32* %605 to <4 x i32>*
  %607 = load <4 x i32>, <4 x i32>* %606, align 4, !alias.scope !32
  %608 = bitcast i32* %601 to <4 x i32>*
  store <4 x i32> %604, <4 x i32>* %608, align 4, !alias.scope !35, !noalias !32
  %609 = getelementptr i32, i32* %601, i64 4
  %610 = bitcast i32* %609 to <4 x i32>*
  store <4 x i32> %607, <4 x i32>* %610, align 4, !alias.scope !35, !noalias !32
  %611 = or i64 %577, 24
  %612 = getelementptr i32, i32* %378, i64 %611
  %613 = getelementptr i32, i32* %1, i64 %611
  %614 = bitcast i32* %613 to <4 x i32>*
  %615 = load <4 x i32>, <4 x i32>* %614, align 4, !alias.scope !32
  %616 = getelementptr i32, i32* %613, i64 4
  %617 = bitcast i32* %616 to <4 x i32>*
  %618 = load <4 x i32>, <4 x i32>* %617, align 4, !alias.scope !32
  %619 = bitcast i32* %612 to <4 x i32>*
  store <4 x i32> %615, <4 x i32>* %619, align 4, !alias.scope !35, !noalias !32
  %620 = getelementptr i32, i32* %612, i64 4
  %621 = bitcast i32* %620 to <4 x i32>*
  store <4 x i32> %618, <4 x i32>* %621, align 4, !alias.scope !35, !noalias !32
  %622 = add i64 %577, 32
  %623 = add i64 %578, -4
  %624 = icmp eq i64 %623, 0
  br i1 %624, label %625, label %576, !llvm.loop !37

625:                                              ; preds = %576, %565
  %626 = phi i64 [ 0, %565 ], [ %622, %576 ]
  %627 = icmp eq i64 %572, 0
  br i1 %627, label %644, label %628

628:                                              ; preds = %625, %628
  %629 = phi i64 [ %641, %628 ], [ %626, %625 ]
  %630 = phi i64 [ %642, %628 ], [ %572, %625 ]
  %631 = getelementptr i32, i32* %378, i64 %629
  %632 = getelementptr i32, i32* %1, i64 %629
  %633 = bitcast i32* %632 to <4 x i32>*
  %634 = load <4 x i32>, <4 x i32>* %633, align 4, !alias.scope !32
  %635 = getelementptr i32, i32* %632, i64 4
  %636 = bitcast i32* %635 to <4 x i32>*
  %637 = load <4 x i32>, <4 x i32>* %636, align 4, !alias.scope !32
  %638 = bitcast i32* %631 to <4 x i32>*
  store <4 x i32> %634, <4 x i32>* %638, align 4, !alias.scope !35, !noalias !32
  %639 = getelementptr i32, i32* %631, i64 4
  %640 = bitcast i32* %639 to <4 x i32>*
  store <4 x i32> %637, <4 x i32>* %640, align 4, !alias.scope !35, !noalias !32
  %641 = add i64 %629, 8
  %642 = add i64 %630, -1
  %643 = icmp eq i64 %642, 0
  br i1 %643, label %644, label %628, !llvm.loop !38

644:                                              ; preds = %628, %625
  %645 = icmp eq i64 %549, %566
  br i1 %645, label %699, label %646

646:                                              ; preds = %644, %551, %544
  %647 = phi i32* [ %378, %551 ], [ %378, %544 ], [ %567, %644 ]
  %648 = phi i32* [ %1, %551 ], [ %1, %544 ], [ %568, %644 ]
  %649 = ptrtoint i32* %648 to i64
  %650 = getelementptr i32, i32* %542, i64 -1
  %651 = ptrtoint i32* %650 to i64
  %652 = sub i64 %651, %649
  %653 = lshr i64 %652, 2
  %654 = add nuw nsw i64 %653, 1
  %655 = and i64 %654, 7
  %656 = icmp eq i64 %655, 0
  br i1 %656, label %666, label %657

657:                                              ; preds = %646, %657
  %658 = phi i32* [ %663, %657 ], [ %647, %646 ]
  %659 = phi i32* [ %662, %657 ], [ %648, %646 ]
  %660 = phi i64 [ %664, %657 ], [ %655, %646 ]
  %661 = load i32, i32* %659, align 4
  store i32 %661, i32* %658, align 4
  %662 = getelementptr inbounds i32, i32* %659, i64 1
  %663 = getelementptr inbounds i32, i32* %658, i64 1
  %664 = add i64 %660, -1
  %665 = icmp eq i64 %664, 0
  br i1 %665, label %666, label %657, !llvm.loop !39

666:                                              ; preds = %657, %646
  %667 = phi i32* [ undef, %646 ], [ %663, %657 ]
  %668 = phi i32* [ %647, %646 ], [ %663, %657 ]
  %669 = phi i32* [ %648, %646 ], [ %662, %657 ]
  %670 = icmp ult i64 %652, 28
  br i1 %670, label %699, label %671

671:                                              ; preds = %666, %671
  %672 = phi i32* [ %697, %671 ], [ %668, %666 ]
  %673 = phi i32* [ %696, %671 ], [ %669, %666 ]
  %674 = load i32, i32* %673, align 4
  store i32 %674, i32* %672, align 4
  %675 = getelementptr inbounds i32, i32* %673, i64 1
  %676 = getelementptr inbounds i32, i32* %672, i64 1
  %677 = load i32, i32* %675, align 4
  store i32 %677, i32* %676, align 4
  %678 = getelementptr inbounds i32, i32* %673, i64 2
  %679 = getelementptr inbounds i32, i32* %672, i64 2
  %680 = load i32, i32* %678, align 4
  store i32 %680, i32* %679, align 4
  %681 = getelementptr inbounds i32, i32* %673, i64 3
  %682 = getelementptr inbounds i32, i32* %672, i64 3
  %683 = load i32, i32* %681, align 4
  store i32 %683, i32* %682, align 4
  %684 = getelementptr inbounds i32, i32* %673, i64 4
  %685 = getelementptr inbounds i32, i32* %672, i64 4
  %686 = load i32, i32* %684, align 4
  store i32 %686, i32* %685, align 4
  %687 = getelementptr inbounds i32, i32* %673, i64 5
  %688 = getelementptr inbounds i32, i32* %672, i64 5
  %689 = load i32, i32* %687, align 4
  store i32 %689, i32* %688, align 4
  %690 = getelementptr inbounds i32, i32* %673, i64 6
  %691 = getelementptr inbounds i32, i32* %672, i64 6
  %692 = load i32, i32* %690, align 4
  store i32 %692, i32* %691, align 4
  %693 = getelementptr inbounds i32, i32* %673, i64 7
  %694 = getelementptr inbounds i32, i32* %672, i64 7
  %695 = load i32, i32* %693, align 4
  store i32 %695, i32* %694, align 4
  %696 = getelementptr inbounds i32, i32* %673, i64 8
  %697 = getelementptr inbounds i32, i32* %672, i64 8
  %698 = icmp eq i32* %696, %542
  br i1 %698, label %699, label %671, !llvm.loop !40

699:                                              ; preds = %666, %671, %644, %541
  %700 = phi i32* [ %378, %541 ], [ %567, %644 ], [ %667, %666 ], [ %697, %671 ]
  %701 = ptrtoint i32* %700 to i64
  %702 = load i32*, i32** %9, align 8
  store i64 %536, i64* %340, align 8
  store i64 %701, i64* %24, align 8
  store i64 %377, i64* %16, align 8
  %703 = icmp eq i32* %702, null
  br i1 %703, label %706, label %704

704:                                              ; preds = %699
  %705 = bitcast i32* %702 to i8*
  tail call void @_ZdlPv(i8* %705) #10
  br label %706

706:                                              ; preds = %704, %699, %191, %334, %338, %4
  %707 = phi i32* [ %1, %4 ], [ %1, %338 ], [ %1, %334 ], [ %1, %191 ], [ %375, %699 ], [ %375, %704 ]
  ret i32* %707
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK5blink18WatchTimeComponentIbE13end_timestampEv(%"class.blink::WatchTimeComponent"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::WatchTimeComponent", %"class.blink::WatchTimeComponent"* %0, i64 0, i32 7, i32 0
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden zeroext i1 @_ZNK5blink18WatchTimeComponentIbE25current_value_for_testingEv(%"class.blink::WatchTimeComponent"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::WatchTimeComponent", %"class.blink::WatchTimeComponent"* %0, i64 0, i32 4
  %3 = load i8, i8* %2, align 8, !range !2
  %4 = icmp ne i8 %3, 0
  ret i1 %4
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN5blink18WatchTimeComponentINS_11DisplayTypeEEC2ES1_NSt3__16vectorIN5media12WatchTimeKeyENS3_9allocatorIS6_EEEEN4base17RepeatingCallbackIFS6_S1_EEENSB_IFNSA_9TimeDeltaEvEEEPNS5_5mojom17WatchTimeRecorderE(%"class.blink::WatchTimeComponent.4"*, i32, %"class.std::__1::vector"*, %"class.base::RepeatingCallback.5"*, %"class.base::RepeatingCallback.2"*, %"class.media::mojom::WatchTimeRecorder"*) unnamed_addr #0 comdat($_ZN5blink18WatchTimeComponentINS_11DisplayTypeEEC5ES1_NSt3__16vectorIN5media12WatchTimeKeyENS3_9allocatorIS6_EEEEN4base17RepeatingCallbackIFS6_S1_EEENSB_IFNSA_9TimeDeltaEvEEEPNS5_5mojom17WatchTimeRecorderE) align 2 {
  %7 = bitcast %"class.blink::WatchTimeComponent.4"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 24, i1 false) #9
  %8 = bitcast %"class.std::__1::vector"* %2 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.blink::WatchTimeComponent.4"* %0 to i64*
  store i64 %9, i64* %10, align 8
  %11 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 1
  %12 = bitcast i32** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %"class.blink::WatchTimeComponent.4", %"class.blink::WatchTimeComponent.4"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = bitcast i32** %14 to i64*
  store i64 %13, i64* %15, align 8
  %16 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 2, i32 0, i32 0
  %17 = bitcast i32** %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds %"class.blink::WatchTimeComponent.4", %"class.blink::WatchTimeComponent.4"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %20 = bitcast i32** %19 to i64*
  store i64 %18, i64* %20, align 8
  %21 = bitcast %"class.std::__1::vector"* %2 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %21, i8 0, i64 24, i1 false) #9
  %22 = getelementptr inbounds %"class.blink::WatchTimeComponent.4", %"class.blink::WatchTimeComponent.4"* %0, i64 0, i32 1
  %23 = getelementptr inbounds %"class.base::RepeatingCallback.5", %"class.base::RepeatingCallback.5"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %24 = bitcast %"class.base::RepeatingCallback.5"* %3 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = bitcast %"class.base::RepeatingCallback.5"* %22 to i64*
  store i64 %25, i64* %26, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %23, align 8
  %27 = getelementptr inbounds %"class.blink::WatchTimeComponent.4", %"class.blink::WatchTimeComponent.4"* %0, i64 0, i32 2
  %28 = getelementptr inbounds %"class.base::RepeatingCallback.2", %"class.base::RepeatingCallback.2"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  %29 = bitcast %"class.base::RepeatingCallback.2"* %4 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = bitcast %"class.base::RepeatingCallback.2"* %27 to i64*
  store i64 %30, i64* %31, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %28, align 8
  %32 = getelementptr inbounds %"class.blink::WatchTimeComponent.4", %"class.blink::WatchTimeComponent.4"* %0, i64 0, i32 3
  store %"class.media::mojom::WatchTimeRecorder"* %5, %"class.media::mojom::WatchTimeRecorder"** %32, align 8
  %33 = getelementptr inbounds %"class.blink::WatchTimeComponent.4", %"class.blink::WatchTimeComponent.4"* %0, i64 0, i32 4
  store i32 %1, i32* %33, align 8
  %34 = getelementptr inbounds %"class.blink::WatchTimeComponent.4", %"class.blink::WatchTimeComponent.4"* %0, i64 0, i32 5
  store i32 %1, i32* %34, align 4
  %35 = getelementptr inbounds %"class.blink::WatchTimeComponent.4", %"class.blink::WatchTimeComponent.4"* %0, i64 0, i32 6, i32 0
  %36 = bitcast i64* %35 to <2 x i64>*
  store <2 x i64> <i64 0, i64 -9223372036854775808>, <2 x i64>* %36, align 8
  %37 = getelementptr inbounds %"class.blink::WatchTimeComponent.4", %"class.blink::WatchTimeComponent.4"* %0, i64 0, i32 8, i32 0
  store i64 -9223372036854775808, i64* %37, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN5blink18WatchTimeComponentINS_11DisplayTypeEED2Ev(%"class.blink::WatchTimeComponent.4"*) unnamed_addr #0 comdat($_ZN5blink18WatchTimeComponentINS_11DisplayTypeEED5Ev) align 2 {
  %2 = getelementptr inbounds %"class.blink::WatchTimeComponent.4", %"class.blink::WatchTimeComponent.4"* %0, i64 0, i32 2, i32 0, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %2) #9
  %3 = getelementptr inbounds %"class.blink::WatchTimeComponent.4", %"class.blink::WatchTimeComponent.4"* %0, i64 0, i32 1, i32 0, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %3) #9
  %4 = getelementptr inbounds %"class.blink::WatchTimeComponent.4", %"class.blink::WatchTimeComponent.4"* %0, i64 0, i32 0, i32 0, i32 0
  %5 = load i32*, i32** %4, align 8
  %6 = icmp eq i32* %5, null
  br i1 %6, label %12, label %7

7:                                                ; preds = %1
  %8 = ptrtoint i32* %5 to i64
  %9 = getelementptr inbounds %"class.blink::WatchTimeComponent.4", %"class.blink::WatchTimeComponent.4"* %0, i64 0, i32 0, i32 0, i32 1
  %10 = bitcast i32** %9 to i64*
  store i64 %8, i64* %10, align 8
  %11 = bitcast i32* %5 to i8*
  tail call void @_ZdlPv(i8* %11) #10
  br label %12

12:                                               ; preds = %1, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN5blink18WatchTimeComponentINS_11DisplayTypeEE18OnReportingStartedEN4base9TimeDeltaE(%"class.blink::WatchTimeComponent.4"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.blink::WatchTimeComponent.4", %"class.blink::WatchTimeComponent.4"* %0, i64 0, i32 6, i32 0
  store i64 %1, i64* %3, align 8
  %4 = getelementptr inbounds %"class.blink::WatchTimeComponent.4", %"class.blink::WatchTimeComponent.4"* %0, i64 0, i32 7, i32 0
  %5 = bitcast i64* %4 to <2 x i64>*
  store <2 x i64> <i64 -9223372036854775808, i64 -9223372036854775808>, <2 x i64>* %5, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN5blink18WatchTimeComponentINS_11DisplayTypeEE15SetPendingValueES1_(%"class.blink::WatchTimeComponent.4"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.blink::WatchTimeComponent.4", %"class.blink::WatchTimeComponent.4"* %0, i64 0, i32 5
  store i32 %1, i32* %3, align 4
  %4 = getelementptr inbounds %"class.blink::WatchTimeComponent.4", %"class.blink::WatchTimeComponent.4"* %0, i64 0, i32 4
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, %1
  %7 = getelementptr inbounds %"class.blink::WatchTimeComponent.4", %"class.blink::WatchTimeComponent.4"* %0, i64 0, i32 7, i32 0
  br i1 %6, label %18, label %8

8:                                                ; preds = %2
  %9 = load i64, i64* %7, align 8
  %10 = icmp eq i64 %9, -9223372036854775808
  br i1 %10, label %11, label %20

11:                                               ; preds = %8
  %12 = getelementptr inbounds %"class.blink::WatchTimeComponent.4", %"class.blink::WatchTimeComponent.4"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %13 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %12, align 8
  %14 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %13, i64 0, i32 1
  %15 = bitcast void ()** %14 to i64 (%"class.base::internal::BindStateBase"*)**
  %16 = load i64 (%"class.base::internal::BindStateBase"*)*, i64 (%"class.base::internal::BindStateBase"*)** %15, align 8
  %17 = tail call i64 %16(%"class.base::internal::BindStateBase"* %13) #9
  br label %18

18:                                               ; preds = %2, %11
  %19 = phi i64 [ %17, %11 ], [ -9223372036854775808, %2 ]
  store i64 %19, i64* %7, align 8
  br label %20

20:                                               ; preds = %18, %8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN5blink18WatchTimeComponentINS_11DisplayTypeEE15SetCurrentValueES1_(%"class.blink::WatchTimeComponent.4"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.blink::WatchTimeComponent.4", %"class.blink::WatchTimeComponent.4"* %0, i64 0, i32 4
  store i32 %1, i32* %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN5blink18WatchTimeComponentINS_11DisplayTypeEE15RecordWatchTimeEN4base9TimeDeltaE(%"class.blink::WatchTimeComponent.4"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.blink::WatchTimeComponent.4", %"class.blink::WatchTimeComponent.4"* %0, i64 0, i32 7, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, -9223372036854775808
  %6 = icmp slt i64 %4, %1
  %7 = select i1 %6, i64 %4, i64 %1
  %8 = select i1 %5, i64 %1, i64 %7
  %9 = getelementptr inbounds %"class.blink::WatchTimeComponent.4", %"class.blink::WatchTimeComponent.4"* %0, i64 0, i32 8
  %10 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %9, i64 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = icmp eq i64 %11, %8
  br i1 %12, label %54, label %13

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"class.blink::WatchTimeComponent.4", %"class.blink::WatchTimeComponent.4"* %0, i64 0, i32 8, i32 0
  store i64 %8, i64* %14, align 8
  %15 = getelementptr inbounds %"class.blink::WatchTimeComponent.4", %"class.blink::WatchTimeComponent.4"* %0, i64 0, i32 6, i32 0
  %16 = load i64, i64* %15, align 8
  %17 = tail call i64 @_ZNK4base9TimeDeltamiES0_(%"class.base::TimeDelta"* %9, i64 %16)
  %18 = icmp slt i64 %17, 1
  br i1 %18, label %54, label %19

19:                                               ; preds = %13
  %20 = getelementptr inbounds %"class.blink::WatchTimeComponent.4", %"class.blink::WatchTimeComponent.4"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %21 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %20, align 8
  %22 = icmp eq %"class.base::internal::BindStateBase"* %21, null
  br i1 %22, label %23, label %41

23:                                               ; preds = %19
  %24 = getelementptr inbounds %"class.blink::WatchTimeComponent.4", %"class.blink::WatchTimeComponent.4"* %0, i64 0, i32 0, i32 0, i32 0
  %25 = load i32*, i32** %24, align 8
  %26 = getelementptr inbounds %"class.blink::WatchTimeComponent.4", %"class.blink::WatchTimeComponent.4"* %0, i64 0, i32 0, i32 0, i32 1
  %27 = load i32*, i32** %26, align 8
  %28 = icmp eq i32* %25, %27
  br i1 %28, label %54, label %29

29:                                               ; preds = %23
  %30 = getelementptr inbounds %"class.blink::WatchTimeComponent.4", %"class.blink::WatchTimeComponent.4"* %0, i64 0, i32 3
  br label %31

31:                                               ; preds = %29, %31
  %32 = phi i32* [ %25, %29 ], [ %39, %31 ]
  %33 = load i32, i32* %32, align 4
  %34 = load %"class.media::mojom::WatchTimeRecorder"*, %"class.media::mojom::WatchTimeRecorder"** %30, align 8
  %35 = bitcast %"class.media::mojom::WatchTimeRecorder"* %34 to void (%"class.media::mojom::WatchTimeRecorder"*, i32, i64)***
  %36 = load void (%"class.media::mojom::WatchTimeRecorder"*, i32, i64)**, void (%"class.media::mojom::WatchTimeRecorder"*, i32, i64)*** %35, align 8
  %37 = getelementptr inbounds void (%"class.media::mojom::WatchTimeRecorder"*, i32, i64)*, void (%"class.media::mojom::WatchTimeRecorder"*, i32, i64)** %36, i64 2
  %38 = load void (%"class.media::mojom::WatchTimeRecorder"*, i32, i64)*, void (%"class.media::mojom::WatchTimeRecorder"*, i32, i64)** %37, align 8
  tail call void %38(%"class.media::mojom::WatchTimeRecorder"* %34, i32 %33, i64 %17) #9
  %39 = getelementptr inbounds i32, i32* %32, i64 1
  %40 = icmp eq i32* %39, %27
  br i1 %40, label %54, label %31

41:                                               ; preds = %19
  %42 = getelementptr inbounds %"class.blink::WatchTimeComponent.4", %"class.blink::WatchTimeComponent.4"* %0, i64 0, i32 3
  %43 = load %"class.media::mojom::WatchTimeRecorder"*, %"class.media::mojom::WatchTimeRecorder"** %42, align 8
  %44 = getelementptr inbounds %"class.blink::WatchTimeComponent.4", %"class.blink::WatchTimeComponent.4"* %0, i64 0, i32 4
  %45 = load i32, i32* %44, align 8
  %46 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %21, i64 0, i32 1
  %47 = bitcast void ()** %46 to i32 (%"class.base::internal::BindStateBase"*, i32)**
  %48 = load i32 (%"class.base::internal::BindStateBase"*, i32)*, i32 (%"class.base::internal::BindStateBase"*, i32)** %47, align 8
  %49 = tail call i32 %48(%"class.base::internal::BindStateBase"* nonnull %21, i32 %45) #9
  %50 = bitcast %"class.media::mojom::WatchTimeRecorder"* %43 to void (%"class.media::mojom::WatchTimeRecorder"*, i32, i64)***
  %51 = load void (%"class.media::mojom::WatchTimeRecorder"*, i32, i64)**, void (%"class.media::mojom::WatchTimeRecorder"*, i32, i64)*** %50, align 8
  %52 = getelementptr inbounds void (%"class.media::mojom::WatchTimeRecorder"*, i32, i64)*, void (%"class.media::mojom::WatchTimeRecorder"*, i32, i64)** %51, i64 2
  %53 = load void (%"class.media::mojom::WatchTimeRecorder"*, i32, i64)*, void (%"class.media::mojom::WatchTimeRecorder"*, i32, i64)** %52, align 8
  tail call void %53(%"class.media::mojom::WatchTimeRecorder"* %43, i32 %49, i64 %17) #9
  br label %54

54:                                               ; preds = %31, %23, %41, %13, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden zeroext i1 @_ZNK5blink18WatchTimeComponentINS_11DisplayTypeEE13NeedsFinalizeEv(%"class.blink::WatchTimeComponent.4"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::WatchTimeComponent.4", %"class.blink::WatchTimeComponent.4"* %0, i64 0, i32 7, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = icmp ne i64 %3, -9223372036854775808
  ret i1 %4
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN5blink18WatchTimeComponentINS_11DisplayTypeEE8FinalizeEPNSt3__16vectorIN5media12WatchTimeKeyENS3_9allocatorIS6_EEEE(%"class.blink::WatchTimeComponent.4"*, %"class.std::__1::vector"*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.blink::WatchTimeComponent.4", %"class.blink::WatchTimeComponent.4"* %0, i64 0, i32 5
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.blink::WatchTimeComponent.4", %"class.blink::WatchTimeComponent.4"* %0, i64 0, i32 4
  store i32 %4, i32* %5, align 8
  %6 = getelementptr inbounds %"class.blink::WatchTimeComponent.4", %"class.blink::WatchTimeComponent.4"* %0, i64 0, i32 7, i32 0
  %7 = getelementptr inbounds %"class.blink::WatchTimeComponent.4", %"class.blink::WatchTimeComponent.4"* %0, i64 0, i32 6, i32 0
  %8 = load i64, i64* %6, align 8
  store i64 %8, i64* %7, align 8
  store i64 -9223372036854775808, i64* %6, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %10 = load i32*, i32** %9, align 8
  %11 = getelementptr inbounds %"class.blink::WatchTimeComponent.4", %"class.blink::WatchTimeComponent.4"* %0, i64 0, i32 0, i32 0, i32 0
  %12 = load i32*, i32** %11, align 8
  %13 = getelementptr inbounds %"class.blink::WatchTimeComponent.4", %"class.blink::WatchTimeComponent.4"* %0, i64 0, i32 0, i32 0, i32 1
  %14 = load i32*, i32** %13, align 8
  %15 = tail call i32* @_ZNSt3__16vectorIN5media12WatchTimeKeyENS_9allocatorIS2_EEE6insertINS_11__wrap_iterIPKS2_EEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsISC_E9referenceEEE5valueENS7_IPS2_EEE4typeESA_SC_SC_(%"class.std::__1::vector"* %1, i32* %10, i32* %12, i32* %14)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK5blink18WatchTimeComponentINS_11DisplayTypeEE13end_timestampEv(%"class.blink::WatchTimeComponent.4"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::WatchTimeComponent.4", %"class.blink::WatchTimeComponent.4"* %0, i64 0, i32 7, i32 0
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZNK5blink18WatchTimeComponentINS_11DisplayTypeEE25current_value_for_testingEv(%"class.blink::WatchTimeComponent.4"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::WatchTimeComponent.4", %"class.blink::WatchTimeComponent.4"* %0, i64 0, i32 4
  %3 = load i32, i32* %2, align 8
  ret i32 %3
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #3

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.ssub.with.overflow.i64(i64, i64) #4

declare i8* @_ZN7logging15CheckOpValueStrEl(i64) local_unnamed_addr #3

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 2000}
!4 = !{!5}
!5 = distinct !{!5, !6}
!6 = distinct !{!6, !"LVerDomain"}
!7 = !{!8}
!8 = distinct !{!8, !6}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.isvectorized", i32 1}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.unroll.disable"}
!13 = distinct !{!13, !12}
!14 = distinct !{!14, !10}
!15 = !{!16}
!16 = distinct !{!16, !17}
!17 = distinct !{!17, !"LVerDomain"}
!18 = !{!19}
!19 = distinct !{!19, !17}
!20 = distinct !{!20, !10}
!21 = distinct !{!21, !12}
!22 = distinct !{!22, !10}
!23 = !{!24}
!24 = distinct !{!24, !25}
!25 = distinct !{!25, !"LVerDomain"}
!26 = !{!27}
!27 = distinct !{!27, !25}
!28 = distinct !{!28, !10}
!29 = distinct !{!29, !12}
!30 = distinct !{!30, !12}
!31 = distinct !{!31, !10}
!32 = !{!33}
!33 = distinct !{!33, !34}
!34 = distinct !{!34, !"LVerDomain"}
!35 = !{!36}
!36 = distinct !{!36, !34}
!37 = distinct !{!37, !10}
!38 = distinct !{!38, !12}
!39 = distinct !{!39, !12}
!40 = distinct !{!40, !10}
