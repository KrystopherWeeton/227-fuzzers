; ModuleID = 'gen/third_party/blink/public/mojom/frame/policy_container.mojom-test-utils.cc'
source_filename = "gen/third_party/blink/public/mojom/frame/policy_container.mojom-test-utils.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::mojom::PolicyContainerHostAsyncWaiter" = type { %"class.blink::mojom::PolicyContainerHost"* }
%"class.blink::mojom::PolicyContainerHost" = type { i32 (...)** }
%"class.blink::mojom::PolicyContainerHostKeepAliveHandleAsyncWaiter" = type { %"class.blink::mojom::PolicyContainerHostKeepAliveHandle"* }
%"class.blink::mojom::PolicyContainerHostKeepAliveHandle" = type { i32 (...)** }
%"class.blink::mojom::PolicyContainerHostInterceptorForTesting" = type { %"class.blink::mojom::PolicyContainerHost" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.mojo::StructPtr"*, %"class.mojo::StructPtr"*, %"class.std::__1::__compressed_pair.42" }
%"class.mojo::StructPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.network::mojom::ContentSecurityPolicy"* }
%"class.network::mojom::ContentSecurityPolicy" = type { %"class.mojo::StructPtr.0", %"class.base::flat_map", %"class.base::flat_map.15", i8, i8, i8, i32, %"class.mojo::InlinedStructPtr", i8, %"class.std::__1::vector.25", i32, %"class.mojo::StructPtr.32", %"class.std::__1::vector.25" }
%"class.mojo::StructPtr.0" = type { %"class.std::__1::unique_ptr.1" }
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.network::mojom::CSPSource"* }
%"class.network::mojom::CSPSource" = type <{ %"class.std::__1::basic_string", %"class.std::__1::basic_string", i32, [4 x i8], %"class.std::__1::basic_string", i8, i8, [6 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.base::flat_map" = type { %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector.8" }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.10" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"struct.std::__1::pair"* }
%"class.base::flat_map.15" = type { %"class.base::internal::flat_tree.16" }
%"class.base::internal::flat_tree.16" = type { %"class.std::__1::vector.17" }
%"class.std::__1::vector.17" = type { %"class.std::__1::__vector_base.18" }
%"class.std::__1::__vector_base.18" = type { %"struct.std::__1::pair.19"*, %"struct.std::__1::pair.19"*, %"class.std::__1::__compressed_pair.20" }
%"struct.std::__1::pair.19" = type opaque
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"struct.std::__1::pair.19"* }
%"class.mojo::InlinedStructPtr" = type <{ %"class.network::mojom::ContentSecurityPolicyHeader", i32, [4 x i8] }>
%"class.network::mojom::ContentSecurityPolicyHeader" = type { %"class.std::__1::basic_string", i32, i32 }
%"class.mojo::StructPtr.32" = type { %"class.std::__1::unique_ptr.33" }
%"class.std::__1::unique_ptr.33" = type { %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %"class.network::mojom::CSPTrustedTypes"* }
%"class.network::mojom::CSPTrustedTypes" = type <{ %"class.std::__1::vector.25", i8, i8, [6 x i8] }>
%"class.std::__1::vector.25" = type { %"class.std::__1::__vector_base.26" }
%"class.std::__1::__vector_base.26" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.27" }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { %"class.std::__1::basic_string"* }
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"struct.std::__1::__compressed_pair_elem.43" = type { %"class.mojo::StructPtr"* }
%"class.mojo::PendingReceiver" = type { %"struct.mojo::internal::PendingReceiverState" }
%"struct.mojo::internal::PendingReceiverState" = type { %"class.mojo::ScopedHandleBase", %"class.mojo::ConnectionGroup::Ref" }
%"class.mojo::ScopedHandleBase" = type { %"class.mojo::MessagePipeHandle" }
%"class.mojo::MessagePipeHandle" = type { %"class.mojo::Handle" }
%"class.mojo::Handle" = type { i32 }
%"class.mojo::ConnectionGroup::Ref" = type { i32, %class.scoped_refptr }
%class.scoped_refptr = type { %"class.mojo::ConnectionGroup"* }
%"class.mojo::ConnectionGroup" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe", [4 x i8], %"class.base::RepeatingCallback", %class.scoped_refptr.50, %"class.mojo::ConnectionGroup::Ref", %"struct.std::__1::atomic.52", [4 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.47" }
%"struct.std::__1::__atomic_base.47" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.48 }
%class.scoped_refptr.48 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.49", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.49" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%class.scoped_refptr.50 = type { %"class.base::SequencedTaskRunner"* }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.51" }>
%"class.base::RefCountedThreadSafe.51" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"struct.std::__1::atomic.52" = type { %"struct.std::__1::__atomic_base.53" }
%"struct.std::__1::__atomic_base.53" = type { %"struct.std::__1::__atomic_base.54" }
%"struct.std::__1::__atomic_base.54" = type { %"struct.std::__1::__cxx_atomic_impl.55" }
%"struct.std::__1::__cxx_atomic_impl.55" = type { %"struct.std::__1::__cxx_atomic_base_impl.56" }
%"struct.std::__1::__cxx_atomic_base_impl.56" = type { i32 }

$_ZN5blink5mojom19PolicyContainerHostD2Ev = comdat any

$_ZN5blink5mojom40PolicyContainerHostInterceptorForTestingD0Ev = comdat any

@_ZTVN5blink5mojom40PolicyContainerHostInterceptorForTestingE = hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::mojom::PolicyContainerHost"*)* @_ZN5blink5mojom19PolicyContainerHostD2Ev to i8*), i8* bitcast (void (%"class.blink::mojom::PolicyContainerHostInterceptorForTesting"*)* @_ZN5blink5mojom40PolicyContainerHostInterceptorForTestingD0Ev to i8*), i8* bitcast (void (%"class.blink::mojom::PolicyContainerHostInterceptorForTesting"*, i32)* @_ZN5blink5mojom40PolicyContainerHostInterceptorForTesting17SetReferrerPolicyEN7network5mojom14ReferrerPolicyE to i8*), i8* bitcast (void (%"class.blink::mojom::PolicyContainerHostInterceptorForTesting"*, %"class.std::__1::vector"*)* @_ZN5blink5mojom40PolicyContainerHostInterceptorForTesting26AddContentSecurityPoliciesENSt3__16vectorIN4mojo9StructPtrIN7network5mojom21ContentSecurityPolicyEEENS2_9allocatorIS9_EEEE to i8*), i8* bitcast (void (%"class.blink::mojom::PolicyContainerHostInterceptorForTesting"*, %"class.mojo::PendingReceiver"*)* @_ZN5blink5mojom40PolicyContainerHostInterceptorForTesting20IssueKeepAliveHandleEN4mojo15PendingReceiverINS0_34PolicyContainerHostKeepAliveHandleEEE to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8

@_ZN5blink5mojom30PolicyContainerHostAsyncWaiterC1EPNS0_19PolicyContainerHostE = hidden unnamed_addr alias void (%"class.blink::mojom::PolicyContainerHostAsyncWaiter"*, %"class.blink::mojom::PolicyContainerHost"*), void (%"class.blink::mojom::PolicyContainerHostAsyncWaiter"*, %"class.blink::mojom::PolicyContainerHost"*)* @_ZN5blink5mojom30PolicyContainerHostAsyncWaiterC2EPNS0_19PolicyContainerHostE
@_ZN5blink5mojom30PolicyContainerHostAsyncWaiterD1Ev = hidden unnamed_addr alias void (%"class.blink::mojom::PolicyContainerHostAsyncWaiter"*), void (%"class.blink::mojom::PolicyContainerHostAsyncWaiter"*)* @_ZN5blink5mojom30PolicyContainerHostAsyncWaiterD2Ev
@_ZN5blink5mojom45PolicyContainerHostKeepAliveHandleAsyncWaiterC1EPNS0_34PolicyContainerHostKeepAliveHandleE = hidden unnamed_addr alias void (%"class.blink::mojom::PolicyContainerHostKeepAliveHandleAsyncWaiter"*, %"class.blink::mojom::PolicyContainerHostKeepAliveHandle"*), void (%"class.blink::mojom::PolicyContainerHostKeepAliveHandleAsyncWaiter"*, %"class.blink::mojom::PolicyContainerHostKeepAliveHandle"*)* @_ZN5blink5mojom45PolicyContainerHostKeepAliveHandleAsyncWaiterC2EPNS0_34PolicyContainerHostKeepAliveHandleE
@_ZN5blink5mojom45PolicyContainerHostKeepAliveHandleAsyncWaiterD1Ev = hidden unnamed_addr alias void (%"class.blink::mojom::PolicyContainerHostKeepAliveHandleAsyncWaiter"*), void (%"class.blink::mojom::PolicyContainerHostKeepAliveHandleAsyncWaiter"*)* @_ZN5blink5mojom45PolicyContainerHostKeepAliveHandleAsyncWaiterD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink5mojom40PolicyContainerHostInterceptorForTesting17SetReferrerPolicyEN7network5mojom14ReferrerPolicyE(%"class.blink::mojom::PolicyContainerHostInterceptorForTesting"*, i32) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.blink::mojom::PolicyContainerHostInterceptorForTesting"* %0 to %"class.blink::mojom::PolicyContainerHost"* (%"class.blink::mojom::PolicyContainerHostInterceptorForTesting"*)***
  %4 = load %"class.blink::mojom::PolicyContainerHost"* (%"class.blink::mojom::PolicyContainerHostInterceptorForTesting"*)**, %"class.blink::mojom::PolicyContainerHost"* (%"class.blink::mojom::PolicyContainerHostInterceptorForTesting"*)*** %3, align 8
  %5 = getelementptr inbounds %"class.blink::mojom::PolicyContainerHost"* (%"class.blink::mojom::PolicyContainerHostInterceptorForTesting"*)*, %"class.blink::mojom::PolicyContainerHost"* (%"class.blink::mojom::PolicyContainerHostInterceptorForTesting"*)** %4, i64 5
  %6 = load %"class.blink::mojom::PolicyContainerHost"* (%"class.blink::mojom::PolicyContainerHostInterceptorForTesting"*)*, %"class.blink::mojom::PolicyContainerHost"* (%"class.blink::mojom::PolicyContainerHostInterceptorForTesting"*)** %5, align 8
  %7 = tail call %"class.blink::mojom::PolicyContainerHost"* %6(%"class.blink::mojom::PolicyContainerHostInterceptorForTesting"* %0) #8
  %8 = bitcast %"class.blink::mojom::PolicyContainerHost"* %7 to void (%"class.blink::mojom::PolicyContainerHost"*, i32)***
  %9 = load void (%"class.blink::mojom::PolicyContainerHost"*, i32)**, void (%"class.blink::mojom::PolicyContainerHost"*, i32)*** %8, align 8
  %10 = getelementptr inbounds void (%"class.blink::mojom::PolicyContainerHost"*, i32)*, void (%"class.blink::mojom::PolicyContainerHost"*, i32)** %9, i64 2
  %11 = load void (%"class.blink::mojom::PolicyContainerHost"*, i32)*, void (%"class.blink::mojom::PolicyContainerHost"*, i32)** %10, align 8
  tail call void %11(%"class.blink::mojom::PolicyContainerHost"* %7, i32 %1) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink5mojom40PolicyContainerHostInterceptorForTesting26AddContentSecurityPoliciesENSt3__16vectorIN4mojo9StructPtrIN7network5mojom21ContentSecurityPolicyEEENS2_9allocatorIS9_EEEE(%"class.blink::mojom::PolicyContainerHostInterceptorForTesting"*, %"class.std::__1::vector"* nocapture) unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::vector", align 16
  %4 = bitcast %"class.blink::mojom::PolicyContainerHostInterceptorForTesting"* %0 to %"class.blink::mojom::PolicyContainerHost"* (%"class.blink::mojom::PolicyContainerHostInterceptorForTesting"*)***
  %5 = load %"class.blink::mojom::PolicyContainerHost"* (%"class.blink::mojom::PolicyContainerHostInterceptorForTesting"*)**, %"class.blink::mojom::PolicyContainerHost"* (%"class.blink::mojom::PolicyContainerHostInterceptorForTesting"*)*** %4, align 8
  %6 = getelementptr inbounds %"class.blink::mojom::PolicyContainerHost"* (%"class.blink::mojom::PolicyContainerHostInterceptorForTesting"*)*, %"class.blink::mojom::PolicyContainerHost"* (%"class.blink::mojom::PolicyContainerHostInterceptorForTesting"*)** %5, i64 5
  %7 = load %"class.blink::mojom::PolicyContainerHost"* (%"class.blink::mojom::PolicyContainerHostInterceptorForTesting"*)*, %"class.blink::mojom::PolicyContainerHost"* (%"class.blink::mojom::PolicyContainerHostInterceptorForTesting"*)** %6, align 8
  %8 = tail call %"class.blink::mojom::PolicyContainerHost"* %7(%"class.blink::mojom::PolicyContainerHostInterceptorForTesting"* %0) #8
  %9 = bitcast %"class.std::__1::vector"* %1 to <2 x i64>*
  %10 = load <2 x i64>, <2 x i64>* %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 1
  %12 = bitcast %"class.std::__1::vector"* %3 to <2 x i64>*
  store <2 x i64> %10, <2 x i64>* %12, align 16
  %13 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  %14 = bitcast %"class.mojo::StructPtr"** %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  %17 = bitcast %"class.mojo::StructPtr"** %16 to i64*
  store i64 %15, i64* %17, align 16
  %18 = bitcast %"class.std::__1::vector"* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 24, i1 false) #8
  %19 = bitcast %"class.blink::mojom::PolicyContainerHost"* %8 to void (%"class.blink::mojom::PolicyContainerHost"*, %"class.std::__1::vector"*)***
  %20 = load void (%"class.blink::mojom::PolicyContainerHost"*, %"class.std::__1::vector"*)**, void (%"class.blink::mojom::PolicyContainerHost"*, %"class.std::__1::vector"*)*** %19, align 8
  %21 = getelementptr inbounds void (%"class.blink::mojom::PolicyContainerHost"*, %"class.std::__1::vector"*)*, void (%"class.blink::mojom::PolicyContainerHost"*, %"class.std::__1::vector"*)** %20, i64 3
  %22 = load void (%"class.blink::mojom::PolicyContainerHost"*, %"class.std::__1::vector"*)*, void (%"class.blink::mojom::PolicyContainerHost"*, %"class.std::__1::vector"*)** %21, align 8
  call void %22(%"class.blink::mojom::PolicyContainerHost"* %8, %"class.std::__1::vector"* nonnull %3) #8
  %23 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 0
  %24 = load %"class.mojo::StructPtr"*, %"class.mojo::StructPtr"** %23, align 16
  %25 = icmp eq %"class.mojo::StructPtr"* %24, null
  br i1 %25, label %45, label %26

26:                                               ; preds = %2
  %27 = bitcast %"class.mojo::StructPtr"* %24 to i8*
  %28 = load %"class.mojo::StructPtr"*, %"class.mojo::StructPtr"** %11, align 8
  %29 = icmp eq %"class.mojo::StructPtr"* %28, %24
  br i1 %29, label %43, label %30

30:                                               ; preds = %26, %38
  %31 = phi %"class.mojo::StructPtr"* [ %32, %38 ], [ %28, %26 ]
  %32 = getelementptr inbounds %"class.mojo::StructPtr", %"class.mojo::StructPtr"* %31, i64 -1
  %33 = getelementptr inbounds %"class.mojo::StructPtr", %"class.mojo::StructPtr"* %32, i64 0, i32 0, i32 0, i32 0, i32 0
  %34 = load %"class.network::mojom::ContentSecurityPolicy"*, %"class.network::mojom::ContentSecurityPolicy"** %33, align 8
  store %"class.network::mojom::ContentSecurityPolicy"* null, %"class.network::mojom::ContentSecurityPolicy"** %33, align 8
  %35 = icmp eq %"class.network::mojom::ContentSecurityPolicy"* %34, null
  br i1 %35, label %38, label %36

36:                                               ; preds = %30
  call void @_ZN7network5mojom21ContentSecurityPolicyD1Ev(%"class.network::mojom::ContentSecurityPolicy"* nonnull %34) #8
  %37 = bitcast %"class.network::mojom::ContentSecurityPolicy"* %34 to i8*
  call void @_ZdlPv(i8* %37) #9
  br label %38

38:                                               ; preds = %36, %30
  %39 = icmp eq %"class.mojo::StructPtr"* %32, %24
  br i1 %39, label %40, label %30

40:                                               ; preds = %38
  %41 = bitcast %"class.std::__1::vector"* %3 to i8**
  %42 = load i8*, i8** %41, align 16
  br label %43

43:                                               ; preds = %40, %26
  %44 = phi i8* [ %42, %40 ], [ %27, %26 ]
  store %"class.mojo::StructPtr"* %24, %"class.mojo::StructPtr"** %11, align 8
  call void @_ZdlPv(i8* %44) #9
  br label %45

45:                                               ; preds = %2, %43
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink5mojom40PolicyContainerHostInterceptorForTesting20IssueKeepAliveHandleEN4mojo15PendingReceiverINS0_34PolicyContainerHostKeepAliveHandleEEE(%"class.blink::mojom::PolicyContainerHostInterceptorForTesting"*, %"class.mojo::PendingReceiver"*) unnamed_addr #0 align 2 {
  %3 = alloca %"class.mojo::PendingReceiver", align 8
  %4 = bitcast %"class.blink::mojom::PolicyContainerHostInterceptorForTesting"* %0 to %"class.blink::mojom::PolicyContainerHost"* (%"class.blink::mojom::PolicyContainerHostInterceptorForTesting"*)***
  %5 = load %"class.blink::mojom::PolicyContainerHost"* (%"class.blink::mojom::PolicyContainerHostInterceptorForTesting"*)**, %"class.blink::mojom::PolicyContainerHost"* (%"class.blink::mojom::PolicyContainerHostInterceptorForTesting"*)*** %4, align 8
  %6 = getelementptr inbounds %"class.blink::mojom::PolicyContainerHost"* (%"class.blink::mojom::PolicyContainerHostInterceptorForTesting"*)*, %"class.blink::mojom::PolicyContainerHost"* (%"class.blink::mojom::PolicyContainerHostInterceptorForTesting"*)** %5, i64 5
  %7 = load %"class.blink::mojom::PolicyContainerHost"* (%"class.blink::mojom::PolicyContainerHostInterceptorForTesting"*)*, %"class.blink::mojom::PolicyContainerHost"* (%"class.blink::mojom::PolicyContainerHostInterceptorForTesting"*)** %6, align 8
  %8 = tail call %"class.blink::mojom::PolicyContainerHost"* %7(%"class.blink::mojom::PolicyContainerHostInterceptorForTesting"* %0) #8
  %9 = getelementptr inbounds %"class.mojo::PendingReceiver", %"class.mojo::PendingReceiver"* %3, i64 0, i32 0
  %10 = getelementptr inbounds %"class.mojo::PendingReceiver", %"class.mojo::PendingReceiver"* %1, i64 0, i32 0
  call void @_ZN4mojo8internal20PendingReceiverStateC1EOS1_(%"struct.mojo::internal::PendingReceiverState"* nonnull %9, %"struct.mojo::internal::PendingReceiverState"* dereferenceable(24) %10) #8
  %11 = bitcast %"class.blink::mojom::PolicyContainerHost"* %8 to void (%"class.blink::mojom::PolicyContainerHost"*, %"class.mojo::PendingReceiver"*)***
  %12 = load void (%"class.blink::mojom::PolicyContainerHost"*, %"class.mojo::PendingReceiver"*)**, void (%"class.blink::mojom::PolicyContainerHost"*, %"class.mojo::PendingReceiver"*)*** %11, align 8
  %13 = getelementptr inbounds void (%"class.blink::mojom::PolicyContainerHost"*, %"class.mojo::PendingReceiver"*)*, void (%"class.blink::mojom::PolicyContainerHost"*, %"class.mojo::PendingReceiver"*)** %12, i64 4
  %14 = load void (%"class.blink::mojom::PolicyContainerHost"*, %"class.mojo::PendingReceiver"*)*, void (%"class.blink::mojom::PolicyContainerHost"*, %"class.mojo::PendingReceiver"*)** %13, align 8
  call void %14(%"class.blink::mojom::PolicyContainerHost"* %8, %"class.mojo::PendingReceiver"* nonnull %3) #8
  call void @_ZN4mojo8internal20PendingReceiverStateD1Ev(%"struct.mojo::internal::PendingReceiverState"* nonnull %9) #8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5blink5mojom30PolicyContainerHostAsyncWaiterC2EPNS0_19PolicyContainerHostE(%"class.blink::mojom::PolicyContainerHostAsyncWaiter"* nocapture, %"class.blink::mojom::PolicyContainerHost"*) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.blink::mojom::PolicyContainerHostAsyncWaiter", %"class.blink::mojom::PolicyContainerHostAsyncWaiter"* %0, i64 0, i32 0
  store %"class.blink::mojom::PolicyContainerHost"* %1, %"class.blink::mojom::PolicyContainerHost"** %3, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN5blink5mojom30PolicyContainerHostAsyncWaiterD2Ev(%"class.blink::mojom::PolicyContainerHostAsyncWaiter"* nocapture) unnamed_addr #2 align 2 {
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5blink5mojom45PolicyContainerHostKeepAliveHandleAsyncWaiterC2EPNS0_34PolicyContainerHostKeepAliveHandleE(%"class.blink::mojom::PolicyContainerHostKeepAliveHandleAsyncWaiter"* nocapture, %"class.blink::mojom::PolicyContainerHostKeepAliveHandle"*) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.blink::mojom::PolicyContainerHostKeepAliveHandleAsyncWaiter", %"class.blink::mojom::PolicyContainerHostKeepAliveHandleAsyncWaiter"* %0, i64 0, i32 0
  store %"class.blink::mojom::PolicyContainerHostKeepAliveHandle"* %1, %"class.blink::mojom::PolicyContainerHostKeepAliveHandle"** %3, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN5blink5mojom45PolicyContainerHostKeepAliveHandleAsyncWaiterD2Ev(%"class.blink::mojom::PolicyContainerHostKeepAliveHandleAsyncWaiter"* nocapture) unnamed_addr #2 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink5mojom19PolicyContainerHostD2Ev(%"class.blink::mojom::PolicyContainerHost"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink5mojom40PolicyContainerHostInterceptorForTestingD0Ev(%"class.blink::mojom::PolicyContainerHostInterceptorForTesting"*) unnamed_addr #3 comdat align 2 {
  tail call void @llvm.trap() #10
  unreachable
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nounwind
declare void @_ZN4mojo8internal20PendingReceiverStateC1EOS1_(%"struct.mojo::internal::PendingReceiverState"*, %"struct.mojo::internal::PendingReceiverState"* dereferenceable(24)) unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN4mojo8internal20PendingReceiverStateD1Ev(%"struct.mojo::internal::PendingReceiverState"*) unnamed_addr #4

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #5

; Function Attrs: nounwind
declare void @_ZN7network5mojom21ContentSecurityPolicyD1Ev(%"class.network::mojom::ContentSecurityPolicy"*) unnamed_addr #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { cold noreturn nounwind }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { argmemonly nounwind }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }
attributes #10 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
