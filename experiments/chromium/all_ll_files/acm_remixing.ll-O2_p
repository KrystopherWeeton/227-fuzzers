; ModuleID = '../../third_party/webrtc/modules/audio_coding/acm2/acm_remixing.cc'
source_filename = "../../third_party/webrtc/modules/audio_coding/acm2/acm_remixing.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.webrtc::AudioFrame" = type { i32, i64, i64, i64, i32, i64, i32, i32, i32, i64, %"class.webrtc::RtpPacketInfos", [7680 x i16], i8, %"class.absl::optional.9" }
%"class.webrtc::RtpPacketInfos" = type { %"class.rtc::scoped_refptr" }
%"class.rtc::scoped_refptr" = type { %"class.webrtc::RtpPacketInfos::Data"* }
%"class.webrtc::RtpPacketInfos::Data" = type { %"class.rtc::RefCountedBase.base", %"class.std::__1::vector" }
%"class.rtc::RefCountedBase.base" = type <{ i32 (...)**, %"class.webrtc::webrtc_impl::RefCounter" }>
%"class.webrtc::webrtc_impl::RefCounter" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.webrtc::RtpPacketInfo"*, %"class.webrtc::RtpPacketInfo"*, %"class.std::__1::__compressed_pair.14" }
%"class.webrtc::RtpPacketInfo" = type { i32, %"class.std::__1::vector.1", i32, %"class.absl::optional", %"class.absl::optional.4", %"class.absl::optional.9", %"class.webrtc::Timestamp" }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { i32*, i32*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i32* }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { i8 }
%"class.absl::optional.4" = type { %"class.absl::optional_internal::optional_data.5" }
%"class.absl::optional_internal::optional_data.5" = type { %"class.absl::optional_internal::optional_data_base.6" }
%"class.absl::optional_internal::optional_data_base.6" = type { %"class.absl::optional_internal::optional_data_dtor_base.7" }
%"class.absl::optional_internal::optional_data_dtor_base.7" = type { i8, %union.anon.8 }
%union.anon.8 = type { %"struct.webrtc::AbsoluteCaptureTime" }
%"struct.webrtc::AbsoluteCaptureTime" = type { i64, %"class.absl::optional.9" }
%"class.webrtc::Timestamp" = type { %"class.webrtc::rtc_units_impl::UnitBase" }
%"class.webrtc::rtc_units_impl::UnitBase" = type { i64 }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"class.webrtc::RtpPacketInfo"* }
%"class.absl::optional.9" = type { %"class.absl::optional_internal::optional_data.10" }
%"class.absl::optional_internal::optional_data.10" = type { %"class.absl::optional_internal::optional_data_base.11" }
%"class.absl::optional_internal::optional_data_base.11" = type { %"class.absl::optional_internal::optional_data_dtor_base.12" }
%"class.absl::optional_internal::optional_data_dtor_base.12" = type { i8, %union.anon.13 }
%union.anon.13 = type { i64 }
%"class.std::__1::vector.19" = type { %"class.std::__1::__vector_base.20" }
%"class.std::__1::__vector_base.20" = type { i16*, i16*, %"class.std::__1::__compressed_pair.21" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.22" = type { i16* }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIsNS_9allocatorIsEEE8__appendEm = comdat any

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc12DownMixFrameERKNS_10AudioFrameEN3rtc9ArrayViewIsLln4711EEE(%"class.webrtc::AudioFrame"* dereferenceable(15464), i16*, i64) local_unnamed_addr #0 {
  %4 = bitcast i16* %1 to i8*
  %5 = tail call zeroext i1 @_ZNK6webrtc10AudioFrame5mutedEv(%"class.webrtc::AudioFrame"* %0) #7
  br i1 %5, label %6, label %17

6:                                                ; preds = %3
  %7 = getelementptr inbounds %"class.webrtc::AudioFrame", %"class.webrtc::AudioFrame"* %0, i64 0, i32 3
  %8 = load i64, i64* %7, align 8
  %9 = shl i64 %8, 1
  %10 = icmp sgt i64 %9, 0
  br i1 %10, label %11, label %39

11:                                               ; preds = %6
  %12 = icmp slt i64 %8, 1
  %13 = select i1 %12, i64 %8, i64 1
  %14 = shl i64 %13, 1
  %15 = add i64 %14, -2
  %16 = sub i64 %9, %15
  call void @llvm.memset.p0i8.i64(i8* align 2 %4, i8 0, i64 %16, i1 false)
  br label %39

17:                                               ; preds = %3
  %18 = tail call i16* @_ZNK6webrtc10AudioFrame4dataEv(%"class.webrtc::AudioFrame"* %0) #7
  %19 = getelementptr inbounds %"class.webrtc::AudioFrame", %"class.webrtc::AudioFrame"* %0, i64 0, i32 3
  %20 = load i64, i64* %19, align 8
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %39, label %22

22:                                               ; preds = %17, %22
  %23 = phi i64 [ %36, %22 ], [ 0, %17 ]
  %24 = shl i64 %23, 1
  %25 = getelementptr inbounds i16, i16* %18, i64 %24
  %26 = load i16, i16* %25, align 2
  %27 = sext i16 %26 to i32
  %28 = or i64 %24, 1
  %29 = getelementptr inbounds i16, i16* %18, i64 %28
  %30 = load i16, i16* %29, align 2
  %31 = sext i16 %30 to i32
  %32 = add nsw i32 %31, %27
  %33 = lshr i32 %32, 1
  %34 = trunc i32 %33 to i16
  %35 = getelementptr inbounds i16, i16* %1, i64 %23
  store i16 %34, i16* %35, align 2
  %36 = add nuw i64 %23, 1
  %37 = load i64, i64* %19, align 8
  %38 = icmp ult i64 %36, %37
  br i1 %38, label %22, label %39

39:                                               ; preds = %22, %11, %17, %6
  ret void
}

declare zeroext i1 @_ZNK6webrtc10AudioFrame5mutedEv(%"class.webrtc::AudioFrame"*) local_unnamed_addr #1

declare i16* @_ZNK6webrtc10AudioFrame4dataEv(%"class.webrtc::AudioFrame"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc10ReMixFrameERKNS_10AudioFrameEmPNSt3__16vectorIsNS3_9allocatorIsEEEE(%"class.webrtc::AudioFrame"* dereferenceable(15464), i64, %"class.std::__1::vector.19"*) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %"class.webrtc::AudioFrame", %"class.webrtc::AudioFrame"* %0, i64 0, i32 3
  %5 = load i64, i64* %4, align 8
  %6 = mul i64 %5, %1
  %7 = getelementptr inbounds %"class.std::__1::vector.19", %"class.std::__1::vector.19"* %2, i64 0, i32 0, i32 1
  %8 = bitcast i16** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.std::__1::vector.19"* %2 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %9, %11
  %13 = ashr exact i64 %12, 1
  %14 = icmp eq i64 %6, %13
  br i1 %14, label %24, label %15

15:                                               ; preds = %3
  %16 = icmp ugt i64 %6, %13
  %17 = inttoptr i64 %11 to i16*
  br i1 %16, label %18, label %20

18:                                               ; preds = %15
  %19 = sub i64 %6, %13
  tail call void @_ZNSt3__16vectorIsNS_9allocatorIsEEE8__appendEm(%"class.std::__1::vector.19"* %2, i64 %19) #7
  br label %24

20:                                               ; preds = %15
  %21 = icmp ult i64 %6, %13
  br i1 %21, label %22, label %24

22:                                               ; preds = %20
  %23 = getelementptr inbounds i16, i16* %17, i64 %6
  store i16* %23, i16** %7, align 8
  br label %24

24:                                               ; preds = %22, %20, %18, %3
  %25 = tail call zeroext i1 @_ZNK6webrtc10AudioFrame5mutedEv(%"class.webrtc::AudioFrame"* %0) #7
  br i1 %25, label %26, label %40

26:                                               ; preds = %24
  %27 = getelementptr inbounds %"class.std::__1::vector.19", %"class.std::__1::vector.19"* %2, i64 0, i32 0, i32 0
  %28 = load i16*, i16** %27, align 8
  %29 = load i64, i64* %8, align 8
  %30 = ptrtoint i16* %28 to i64
  %31 = sub i64 %29, %30
  %32 = icmp sgt i64 %31, 0
  br i1 %32, label %33, label %250

33:                                               ; preds = %26
  %34 = bitcast i16* %28 to i8*
  %35 = and i64 %31, -2
  %36 = icmp eq i64 %31, 1
  %37 = sext i1 %36 to i64
  %38 = shl nsw i64 %37, 1
  %39 = sub i64 %35, %38
  call void @llvm.memset.p0i8.i64(i8* align 2 %34, i8 0, i64 %39, i1 false)
  br label %250

40:                                               ; preds = %24
  %41 = getelementptr inbounds %"class.webrtc::AudioFrame", %"class.webrtc::AudioFrame"* %0, i64 0, i32 5
  %42 = load i64, i64* %41, align 8
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %250, label %44

44:                                               ; preds = %40
  %45 = tail call i16* @_ZNK6webrtc10AudioFrame4dataEv(%"class.webrtc::AudioFrame"* %0) #7
  %46 = load i64, i64* %41, align 8
  %47 = icmp eq i64 %46, 1
  %48 = icmp ugt i64 %1, 1
  %49 = and i1 %48, %47
  br i1 %49, label %50, label %81

50:                                               ; preds = %44
  %51 = load i64, i64* %4, align 8
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %250, label %53

53:                                               ; preds = %50
  %54 = getelementptr inbounds %"class.std::__1::vector.19", %"class.std::__1::vector.19"* %2, i64 0, i32 0, i32 0
  %55 = icmp ugt i64 %1, 2
  br label %56

56:                                               ; preds = %53, %70
  %57 = phi i64 [ 0, %53 ], [ %72, %70 ]
  %58 = phi i64 [ 0, %53 ], [ %71, %70 ]
  %59 = getelementptr inbounds i16, i16* %45, i64 %57
  %60 = load i16, i16* %59, align 2
  %61 = add i64 %58, 1
  %62 = load i16*, i16** %54, align 8
  %63 = getelementptr inbounds i16, i16* %62, i64 %58
  store i16 %60, i16* %63, align 2
  %64 = load i16, i16* %59, align 2
  %65 = add i64 %58, 2
  %66 = load i16*, i16** %54, align 8
  %67 = getelementptr inbounds i16, i16* %66, i64 %61
  store i16 %64, i16* %67, align 2
  br i1 %55, label %68, label %70

68:                                               ; preds = %56
  %69 = add i64 %58, %1
  br label %75

70:                                               ; preds = %75, %56
  %71 = phi i64 [ %65, %56 ], [ %69, %75 ]
  %72 = add nuw i64 %57, 1
  %73 = load i64, i64* %4, align 8
  %74 = icmp ult i64 %72, %73
  br i1 %74, label %56, label %250

75:                                               ; preds = %75, %68
  %76 = phi i64 [ %77, %75 ], [ %65, %68 ]
  %77 = add i64 %76, 1
  %78 = load i16*, i16** %54, align 8
  %79 = getelementptr inbounds i16, i16* %78, i64 %76
  store i16 0, i16* %79, align 2
  %80 = icmp eq i64 %77, %69
  br i1 %80, label %70, label %75

81:                                               ; preds = %44
  %82 = icmp ult i64 %46, %1
  br i1 %82, label %83, label %153

83:                                               ; preds = %81
  %84 = load i64, i64* %4, align 8
  %85 = icmp eq i64 %84, 0
  br i1 %85, label %250, label %86

86:                                               ; preds = %83
  %87 = getelementptr inbounds %"class.std::__1::vector.19", %"class.std::__1::vector.19"* %2, i64 0, i32 0, i32 0
  br label %88

88:                                               ; preds = %136, %86
  %89 = phi i64 [ %46, %86 ], [ %137, %136 ]
  %90 = phi i64 [ 0, %86 ], [ %133, %136 ]
  %91 = phi i64 [ 0, %86 ], [ %96, %136 ]
  %92 = phi i64 [ 0, %86 ], [ %132, %136 ]
  %93 = icmp eq i64 %89, 0
  br i1 %93, label %94, label %118

94:                                               ; preds = %118, %88
  %95 = phi i64 [ %92, %88 ], [ %125, %118 ]
  %96 = phi i64 [ %91, %88 ], [ %122, %118 ]
  %97 = phi i64 [ 0, %88 ], [ %129, %118 ]
  %98 = icmp ult i64 %97, %1
  br i1 %98, label %99, label %131

99:                                               ; preds = %94
  %100 = add i64 %95, %1
  %101 = sub i64 %100, %97
  %102 = sub i64 %1, %97
  %103 = xor i64 %97, -1
  %104 = add i64 %103, %1
  %105 = and i64 %102, 3
  %106 = icmp eq i64 %105, 0
  br i1 %106, label %115, label %107

107:                                              ; preds = %99, %107
  %108 = phi i64 [ %110, %107 ], [ %95, %99 ]
  %109 = phi i64 [ %113, %107 ], [ %105, %99 ]
  %110 = add i64 %108, 1
  %111 = load i16*, i16** %87, align 8
  %112 = getelementptr inbounds i16, i16* %111, i64 %108
  store i16 0, i16* %112, align 2
  %113 = add i64 %109, -1
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %115, label %107, !llvm.loop !2

115:                                              ; preds = %107, %99
  %116 = phi i64 [ %95, %99 ], [ %110, %107 ]
  %117 = icmp ult i64 %104, 3
  br i1 %117, label %131, label %138

118:                                              ; preds = %88, %118
  %119 = phi i64 [ %128, %118 ], [ 0, %88 ]
  %120 = phi i64 [ %122, %118 ], [ %91, %88 ]
  %121 = phi i64 [ %125, %118 ], [ %92, %88 ]
  %122 = add i64 %120, 1
  %123 = getelementptr inbounds i16, i16* %45, i64 %120
  %124 = load i16, i16* %123, align 2
  %125 = add i64 %121, 1
  %126 = load i16*, i16** %87, align 8
  %127 = getelementptr inbounds i16, i16* %126, i64 %121
  store i16 %124, i16* %127, align 2
  %128 = add nuw i64 %119, 1
  %129 = load i64, i64* %41, align 8
  %130 = icmp ult i64 %128, %129
  br i1 %130, label %118, label %94

131:                                              ; preds = %115, %138, %94
  %132 = phi i64 [ %95, %94 ], [ %101, %138 ], [ %101, %115 ]
  %133 = add nuw i64 %90, 1
  %134 = load i64, i64* %4, align 8
  %135 = icmp ult i64 %133, %134
  br i1 %135, label %136, label %250

136:                                              ; preds = %131
  %137 = load i64, i64* %41, align 8
  br label %88

138:                                              ; preds = %115, %138
  %139 = phi i64 [ %149, %138 ], [ %116, %115 ]
  %140 = add i64 %139, 1
  %141 = load i16*, i16** %87, align 8
  %142 = getelementptr inbounds i16, i16* %141, i64 %139
  store i16 0, i16* %142, align 2
  %143 = add i64 %139, 2
  %144 = load i16*, i16** %87, align 8
  %145 = getelementptr inbounds i16, i16* %144, i64 %140
  store i16 0, i16* %145, align 2
  %146 = add i64 %139, 3
  %147 = load i16*, i16** %87, align 8
  %148 = getelementptr inbounds i16, i16* %147, i64 %143
  store i16 0, i16* %148, align 2
  %149 = add i64 %139, 4
  %150 = load i16*, i16** %87, align 8
  %151 = getelementptr inbounds i16, i16* %150, i64 %146
  store i16 0, i16* %151, align 2
  %152 = icmp eq i64 %149, %101
  br i1 %152, label %131, label %138

153:                                              ; preds = %81
  %154 = icmp eq i64 %46, 2
  br i1 %154, label %155, label %178

155:                                              ; preds = %153
  %156 = load i64, i64* %4, align 8
  %157 = icmp eq i64 %156, 0
  br i1 %157, label %250, label %158

158:                                              ; preds = %155
  %159 = getelementptr inbounds %"class.std::__1::vector.19", %"class.std::__1::vector.19"* %2, i64 0, i32 0, i32 0
  br label %160

160:                                              ; preds = %158, %160
  %161 = phi i64 [ 0, %158 ], [ %175, %160 ]
  %162 = shl i64 %161, 1
  %163 = getelementptr inbounds i16, i16* %45, i64 %162
  %164 = load i16, i16* %163, align 2
  %165 = sext i16 %164 to i32
  %166 = or i64 %162, 1
  %167 = getelementptr inbounds i16, i16* %45, i64 %166
  %168 = load i16, i16* %167, align 2
  %169 = sext i16 %168 to i32
  %170 = add nsw i32 %169, %165
  %171 = lshr i32 %170, 1
  %172 = trunc i32 %171 to i16
  %173 = load i16*, i16** %159, align 8
  %174 = getelementptr inbounds i16, i16* %173, i64 %161
  store i16 %172, i16* %174, align 2
  %175 = add nuw i64 %161, 1
  %176 = load i64, i64* %4, align 8
  %177 = icmp ult i64 %175, %176
  br i1 %177, label %160, label %250

178:                                              ; preds = %153
  %179 = sub i64 %46, %1
  %180 = load i64, i64* %4, align 8
  %181 = icmp eq i64 %180, 0
  br i1 %181, label %250, label %182

182:                                              ; preds = %178
  %183 = icmp eq i64 %1, 0
  %184 = getelementptr inbounds %"class.std::__1::vector.19", %"class.std::__1::vector.19"* %2, i64 0, i32 0, i32 0
  %185 = add i64 %1, -1
  %186 = and i64 %1, 3
  %187 = icmp eq i64 %186, 0
  %188 = icmp ult i64 %185, 3
  br label %189

189:                                              ; preds = %182, %215
  %190 = phi i64 [ %180, %182 ], [ %216, %215 ]
  %191 = phi i64 [ 0, %182 ], [ %220, %215 ]
  %192 = phi i64 [ 0, %182 ], [ %219, %215 ]
  %193 = phi i64 [ 0, %182 ], [ %217, %215 ]
  br i1 %183, label %215, label %194

194:                                              ; preds = %189
  %195 = add i64 %193, %1
  br i1 %187, label %208, label %196

196:                                              ; preds = %194, %196
  %197 = phi i64 [ %200, %196 ], [ %192, %194 ]
  %198 = phi i64 [ %203, %196 ], [ %193, %194 ]
  %199 = phi i64 [ %206, %196 ], [ %186, %194 ]
  %200 = add i64 %197, 1
  %201 = getelementptr inbounds i16, i16* %45, i64 %197
  %202 = load i16, i16* %201, align 2
  %203 = add i64 %198, 1
  %204 = load i16*, i16** %184, align 8
  %205 = getelementptr inbounds i16, i16* %204, i64 %198
  store i16 %202, i16* %205, align 2
  %206 = add i64 %199, -1
  %207 = icmp eq i64 %206, 0
  br i1 %207, label %208, label %196, !llvm.loop !4

208:                                              ; preds = %196, %194
  %209 = phi i64 [ undef, %194 ], [ %200, %196 ]
  %210 = phi i64 [ %192, %194 ], [ %200, %196 ]
  %211 = phi i64 [ %193, %194 ], [ %203, %196 ]
  br i1 %188, label %212, label %222

212:                                              ; preds = %222, %208
  %213 = phi i64 [ %209, %208 ], [ %243, %222 ]
  %214 = load i64, i64* %4, align 8
  br label %215

215:                                              ; preds = %212, %189
  %216 = phi i64 [ %190, %189 ], [ %214, %212 ]
  %217 = phi i64 [ %193, %189 ], [ %195, %212 ]
  %218 = phi i64 [ %192, %189 ], [ %213, %212 ]
  %219 = add i64 %179, %218
  %220 = add nuw i64 %191, 1
  %221 = icmp ult i64 %220, %216
  br i1 %221, label %189, label %250

222:                                              ; preds = %208, %222
  %223 = phi i64 [ %243, %222 ], [ %210, %208 ]
  %224 = phi i64 [ %246, %222 ], [ %211, %208 ]
  %225 = add i64 %223, 1
  %226 = getelementptr inbounds i16, i16* %45, i64 %223
  %227 = load i16, i16* %226, align 2
  %228 = add i64 %224, 1
  %229 = load i16*, i16** %184, align 8
  %230 = getelementptr inbounds i16, i16* %229, i64 %224
  store i16 %227, i16* %230, align 2
  %231 = add i64 %223, 2
  %232 = getelementptr inbounds i16, i16* %45, i64 %225
  %233 = load i16, i16* %232, align 2
  %234 = add i64 %224, 2
  %235 = load i16*, i16** %184, align 8
  %236 = getelementptr inbounds i16, i16* %235, i64 %228
  store i16 %233, i16* %236, align 2
  %237 = add i64 %223, 3
  %238 = getelementptr inbounds i16, i16* %45, i64 %231
  %239 = load i16, i16* %238, align 2
  %240 = add i64 %224, 3
  %241 = load i16*, i16** %184, align 8
  %242 = getelementptr inbounds i16, i16* %241, i64 %234
  store i16 %239, i16* %242, align 2
  %243 = add i64 %223, 4
  %244 = getelementptr inbounds i16, i16* %45, i64 %237
  %245 = load i16, i16* %244, align 2
  %246 = add i64 %224, 4
  %247 = load i16*, i16** %184, align 8
  %248 = getelementptr inbounds i16, i16* %247, i64 %240
  store i16 %245, i16* %248, align 2
  %249 = icmp eq i64 %246, %195
  br i1 %249, label %212, label %222

250:                                              ; preds = %215, %160, %131, %70, %33, %50, %83, %155, %178, %26, %40
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIsNS_9allocatorIsEEE8__appendEm(%"class.std::__1::vector.19"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.19", %"class.std::__1::vector.19"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i16** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.19", %"class.std::__1::vector.19"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i16** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 1
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to i16*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds i16, i16* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr i16, i16* %13, i64 %18
  %20 = bitcast i16* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 2
  %25 = and i64 %24, -2
  tail call void @llvm.memset.p0i8.i64(i8* align 2 %17, i8 0, i64 %25, i1 false) #7
  %26 = ptrtoint i16* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %81

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.19"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 1
  %34 = add i64 %33, %1
  %35 = icmp slt i64 %34, 0
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.19"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #8
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 1
  %41 = icmp ult i64 %40, 4611686018427387903
  %42 = icmp ult i64 %39, %34
  %43 = select i1 %42, i64 %34, i64 %39
  %44 = select i1 %41, i64 %43, i64 9223372036854775807
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %53, label %46

46:                                               ; preds = %38
  %47 = icmp slt i64 %44, 0
  br i1 %47, label %48, label %49

48:                                               ; preds = %46
  tail call void @abort() #8
  unreachable

49:                                               ; preds = %46
  %50 = shl i64 %44, 1
  %51 = tail call i8* @_Znwm(i64 %50) #9
  %52 = bitcast i8* %51 to i16*
  br label %53

53:                                               ; preds = %49, %38
  %54 = phi i16* [ %52, %49 ], [ null, %38 ]
  %55 = getelementptr inbounds i16, i16* %54, i64 %33
  %56 = getelementptr inbounds i16, i16* %54, i64 %44
  %57 = getelementptr inbounds i16, i16* %55, i64 %1
  %58 = bitcast i16* %55 to i8*
  %59 = shl i64 %1, 1
  tail call void @llvm.memset.p0i8.i64(i8* align 2 %58, i8 0, i64 %59, i1 false) #7
  %60 = ptrtoint i16* %56 to i64
  %61 = ptrtoint i16* %57 to i64
  %62 = getelementptr inbounds %"class.std::__1::vector.19", %"class.std::__1::vector.19"* %0, i64 0, i32 0, i32 0
  %63 = load i16*, i16** %62, align 8
  %64 = load i64, i64* %7, align 8
  %65 = ptrtoint i16* %63 to i64
  %66 = sub i64 %64, %65
  %67 = ashr exact i64 %66, 1
  %68 = sub nsw i64 0, %67
  %69 = getelementptr inbounds i16, i16* %55, i64 %68
  %70 = ptrtoint i16* %69 to i64
  %71 = icmp sgt i64 %66, 0
  br i1 %71, label %72, label %76

72:                                               ; preds = %53
  %73 = bitcast i16* %69 to i8*
  %74 = bitcast i16* %63 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %73, i8* align 2 %74, i64 %66, i1 false) #7
  %75 = load i16*, i16** %62, align 8
  br label %76

76:                                               ; preds = %53, %72
  %77 = phi i16* [ %63, %53 ], [ %75, %72 ]
  store i64 %70, i64* %30, align 8
  store i64 %61, i64* %7, align 8
  store i64 %60, i64* %4, align 8
  %78 = icmp eq i16* %77, null
  br i1 %78, label %81, label %79

79:                                               ; preds = %76
  %80 = bitcast i16* %77 to i8*
  tail call void @_ZdlPv(i8* %80) #9
  br label %81

81:                                               ; preds = %79, %76, %27
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #3

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
