; ModuleID = '../../third_party/boringssl/src/crypto/pem/pem_x509.c'
source_filename = "../../third_party/boringssl/src/crypto/pem/pem_x509.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.x509_st = type { %struct.x509_cinf_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, %struct.crypto_ex_data_st, i64, i64, i64, i64, i64, i64, %struct.asn1_string_st*, %struct.AUTHORITY_KEYID_st*, %struct.X509_POLICY_CACHE_st*, %struct.stack_st_DIST_POINT*, %struct.stack_st_GENERAL_NAME*, %struct.NAME_CONSTRAINTS_st*, [20 x i8], %struct.x509_cert_aux_st*, %struct.crypto_buffer_st*, %union.crypto_mutex_st }
%struct.x509_cinf_st = type { %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.X509_val_st*, %struct.X509_name_st*, %struct.X509_pubkey_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.X509_val_st = type opaque
%struct.X509_name_st = type { %struct.stack_st_X509_NAME_ENTRY*, i32, %struct.buf_mem_st*, i8*, i32 }
%struct.stack_st_X509_NAME_ENTRY = type opaque
%struct.buf_mem_st = type { i64, i8*, i64 }
%struct.X509_pubkey_st = type opaque
%struct.stack_st_X509_EXTENSION = type opaque
%struct.ASN1_ENCODING_st = type { i8*, i64, i32, i8 }
%struct.X509_algor_st = type { %struct.asn1_object_st*, %struct.asn1_type_st* }
%struct.asn1_object_st = type { i8*, i8*, i32, i32, i8*, i32 }
%struct.asn1_type_st = type { i32, %union.anon }
%union.anon = type { i8* }
%struct.crypto_ex_data_st = type { %struct.stack_st_void* }
%struct.stack_st_void = type opaque
%struct.asn1_string_st = type { i32, i32, i8*, i64 }
%struct.AUTHORITY_KEYID_st = type opaque
%struct.X509_POLICY_CACHE_st = type opaque
%struct.stack_st_DIST_POINT = type opaque
%struct.stack_st_GENERAL_NAME = type opaque
%struct.NAME_CONSTRAINTS_st = type opaque
%struct.x509_cert_aux_st = type opaque
%struct.crypto_buffer_st = type opaque
%union.crypto_mutex_st = type { double, [48 x i8] }
%struct.bio_st = type { %struct.bio_method_st*, i32, i32, i32, i32, i32, i32, i8*, %struct.bio_st*, i64, i64 }
%struct.bio_method_st = type { i32, i8*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*)*, i32 (%struct.bio_st*, i8*, i32)*, i64 (%struct.bio_st*, i32, i64, i8*)*, i32 (%struct.bio_st*)*, i32 (%struct.bio_st*)*, i64 (%struct.bio_st*, i32, i64 (%struct.bio_st*, i32, i8*, i32, i64, i64)*)* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.evp_cipher_st = type { i32, i32, i32, i32, i32, i32, i8*, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i32)*, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i64)*, void (%struct.evp_cipher_ctx_st*)*, i32 (%struct.evp_cipher_ctx_st*, i32, i32, i8*)* }
%struct.evp_cipher_ctx_st = type { %struct.evp_cipher_st*, i8*, i8*, i32, i32, i32, [16 x i8], [16 x i8], [32 x i8], i32, i32, i32, [32 x i8] }

@.str = private unnamed_addr constant [12 x i8] c"CERTIFICATE\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden %struct.x509_st* @PEM_read_bio_X509(%struct.bio_st*, %struct.x509_st**, i32 (i8*, i32, i32, i8*)*, i8*) local_unnamed_addr #0 {
  %5 = bitcast %struct.x509_st** %1 to i8**
  %6 = tail call i8* @PEM_ASN1_read_bio(i8* (i8**, i8**, i64)* nonnull @pem_read_bio_X509_d2i, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), %struct.bio_st* %0, i8** %5, i32 (i8*, i32, i32, i8*)* %2, i8* %3) #2
  %7 = bitcast i8* %6 to %struct.x509_st*
  ret %struct.x509_st* %7
}

declare i8* @PEM_ASN1_read_bio(i8* (i8**, i8**, i64)*, i8*, %struct.bio_st*, i8**, i32 (i8*, i32, i32, i8*)*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal i8* @pem_read_bio_X509_d2i(i8**, i8**, i64) #0 {
  %4 = bitcast i8** %0 to %struct.x509_st**
  %5 = tail call %struct.x509_st* @d2i_X509(%struct.x509_st** %4, i8** %1, i64 %2) #2
  %6 = bitcast %struct.x509_st* %5 to i8*
  ret i8* %6
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.x509_st* @PEM_read_X509(%struct._IO_FILE*, %struct.x509_st**, i32 (i8*, i32, i32, i8*)*, i8*) local_unnamed_addr #0 {
  %5 = bitcast %struct.x509_st** %1 to i8**
  %6 = tail call i8* @PEM_ASN1_read(i8* (i8**, i8**, i64)* nonnull @pem_read_X509_d2i, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), %struct._IO_FILE* %0, i8** %5, i32 (i8*, i32, i32, i8*)* %2, i8* %3) #2
  %7 = bitcast i8* %6 to %struct.x509_st*
  ret %struct.x509_st* %7
}

declare i8* @PEM_ASN1_read(i8* (i8**, i8**, i64)*, i8*, %struct._IO_FILE*, i8**, i32 (i8*, i32, i32, i8*)*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal i8* @pem_read_X509_d2i(i8**, i8**, i64) #0 {
  %4 = bitcast i8** %0 to %struct.x509_st**
  %5 = tail call %struct.x509_st* @d2i_X509(%struct.x509_st** %4, i8** %1, i64 %2) #2
  %6 = bitcast %struct.x509_st* %5 to i8*
  ret i8* %6
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @PEM_write_bio_X509(%struct.bio_st*, %struct.x509_st*) local_unnamed_addr #0 {
  %3 = bitcast %struct.x509_st* %1 to i8*
  %4 = tail call i32 @PEM_ASN1_write_bio(i32 (i8*, i8**)* nonnull @pem_write_bio_X509_i2d, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), %struct.bio_st* %0, i8* %3, %struct.evp_cipher_st* null, i8* null, i32 0, i32 (i8*, i32, i32, i8*)* null, i8* null) #2
  ret i32 %4
}

declare i32 @PEM_ASN1_write_bio(i32 (i8*, i8**)*, i8*, %struct.bio_st*, i8*, %struct.evp_cipher_st*, i8*, i32, i32 (i8*, i32, i32, i8*)*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal i32 @pem_write_bio_X509_i2d(i8*, i8**) #0 {
  %3 = bitcast i8* %0 to %struct.x509_st*
  %4 = tail call i32 @i2d_X509(%struct.x509_st* %3, i8** %1) #2
  ret i32 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @PEM_write_X509(%struct._IO_FILE*, %struct.x509_st*) local_unnamed_addr #0 {
  %3 = bitcast %struct.x509_st* %1 to i8*
  %4 = tail call i32 @PEM_ASN1_write(i32 (i8*, i8**)* nonnull @pem_write_X509_i2d, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), %struct._IO_FILE* %0, i8* %3, %struct.evp_cipher_st* null, i8* null, i32 0, i32 (i8*, i32, i32, i8*)* null, i8* null) #2
  ret i32 %4
}

declare i32 @PEM_ASN1_write(i32 (i8*, i8**)*, i8*, %struct._IO_FILE*, i8*, %struct.evp_cipher_st*, i8*, i32, i32 (i8*, i32, i32, i8*)*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal i32 @pem_write_X509_i2d(i8*, i8**) #0 {
  %3 = bitcast i8* %0 to %struct.x509_st*
  %4 = tail call i32 @i2d_X509(%struct.x509_st* %3, i8** %1) #2
  ret i32 %4
}

declare %struct.x509_st* @d2i_X509(%struct.x509_st**, i8**, i64) local_unnamed_addr #1

declare i32 @i2d_X509(%struct.x509_st*, i8**) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
