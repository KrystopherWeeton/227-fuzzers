; ModuleID = '../../third_party/pdfium/core/fxcodec/basic/basicmodule.cpp'
source_filename = "../../third_party/pdfium/core/fxcodec/basic/basicmodule.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.fxcodec::ScanlineDecoder" = type { i32 (...)**, i32, i32, i32, i32, i32, i32, i32, i32, i8* }
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr", i64 }
%"class.fxcrt::UnownedPtr" = type { i8* }
%"class.fxcodec::(anonymous namespace)::RLScanlineDecoder" = type <{ %"class.fxcodec::ScanlineDecoder", %"class.std::__1::unique_ptr.4", %"class.pdfium::span", i64, i64, i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.4" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { i8* }

@_ZTVN7fxcodec12_GLOBAL__N_117RLScanlineDecoderE = internal unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.fxcodec::(anonymous namespace)::RLScanlineDecoder"*)* @_ZN7fxcodec12_GLOBAL__N_117RLScanlineDecoderD2Ev to i8*), i8* bitcast (void (%"class.fxcodec::(anonymous namespace)::RLScanlineDecoder"*)* @_ZN7fxcodec12_GLOBAL__N_117RLScanlineDecoderD0Ev to i8*), i8* bitcast (i32 (%"class.fxcodec::(anonymous namespace)::RLScanlineDecoder"*)* @_ZN7fxcodec12_GLOBAL__N_117RLScanlineDecoder12GetSrcOffsetEv to i8*), i8* bitcast (i1 (%"class.fxcodec::(anonymous namespace)::RLScanlineDecoder"*)* @_ZN7fxcodec12_GLOBAL__N_117RLScanlineDecoder8v_RewindEv to i8*), i8* bitcast (i8* (%"class.fxcodec::(anonymous namespace)::RLScanlineDecoder"*)* @_ZN7fxcodec12_GLOBAL__N_117RLScanlineDecoder13v_GetNextLineEv to i8*)] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden %"class.fxcodec::ScanlineDecoder"* @_ZN7fxcodec11BasicModule22CreateRunLengthDecoderEN6pdfium4spanIKhEEiiii(%"class.pdfium::span"* nocapture readonly, i32, i32, i32, i32) local_unnamed_addr #0 align 2 {
  %6 = tail call i8* @_Znwm(i64 96) #9
  %7 = bitcast i8* %6 to %"class.fxcodec::ScanlineDecoder"*
  tail call void @_ZN7fxcodec15ScanlineDecoderC2Ev(%"class.fxcodec::ScanlineDecoder"* nonnull %7) #10
  %8 = bitcast i8* %6 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN7fxcodec12_GLOBAL__N_117RLScanlineDecoderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %8, align 8
  %9 = getelementptr inbounds i8, i8* %6, i64 48
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 42, i1 false) #10
  %10 = ptrtoint i8* %6 to i64
  %11 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %0, i64 0, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %0, i64 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds i8, i8* %6, i64 56
  %16 = bitcast i8* %15 to i8**
  %17 = icmp eq i8* %12, null
  br i1 %17, label %19, label %18

18:                                               ; preds = %5
  store i8* %12, i8** %16, align 8
  br label %19

19:                                               ; preds = %18, %5
  %20 = getelementptr inbounds i8, i8* %6, i64 64
  %21 = bitcast i8* %20 to i64*
  store i64 %14, i64* %21, align 8
  %22 = getelementptr inbounds i8, i8* %6, i64 8
  %23 = bitcast i8* %22 to i32*
  store i32 %1, i32* %23, align 8
  %24 = getelementptr inbounds i8, i8* %6, i64 16
  %25 = bitcast i8* %24 to i32*
  store i32 %1, i32* %25, align 8
  %26 = getelementptr inbounds i8, i8* %6, i64 12
  %27 = bitcast i8* %26 to i32*
  store i32 %2, i32* %27, align 4
  %28 = getelementptr inbounds i8, i8* %6, i64 20
  %29 = bitcast i8* %28 to i32*
  store i32 %2, i32* %29, align 4
  %30 = getelementptr inbounds i8, i8* %6, i64 24
  %31 = bitcast i8* %30 to i32*
  store i32 %3, i32* %31, align 8
  %32 = getelementptr inbounds i8, i8* %6, i64 28
  %33 = bitcast i8* %32 to i32*
  store i32 %4, i32* %33, align 4
  %34 = icmp slt i32 %1, 0
  br i1 %34, label %128, label %35

35:                                               ; preds = %19
  %36 = icmp slt i32 %3, 0
  %37 = sub i32 0, %3
  %38 = select i1 %36, i32 %37, i32 %3
  %39 = tail call { i32, i1 } @llvm.umul.with.overflow.i32(i32 %38, i32 %1) #10
  %40 = extractvalue { i32, i1 } %39, 1
  %41 = extractvalue { i32, i1 } %39, 0
  %42 = icmp ne i32 %41, 0
  %43 = and i1 %36, %42
  %44 = or i1 %40, %43
  br i1 %44, label %128, label %45

45:                                               ; preds = %35
  %46 = sub i32 0, %41
  %47 = select i1 %36, i32 %46, i32 %41
  %48 = icmp slt i32 %4, 0
  %49 = sub i32 0, %4
  %50 = select i1 %48, i32 %49, i32 %4
  %51 = tail call { i32, i1 } @llvm.umul.with.overflow.i32(i32 %50, i32 %47) #10
  %52 = extractvalue { i32, i1 } %51, 1
  %53 = extractvalue { i32, i1 } %51, 0
  %54 = icmp ne i32 %53, 0
  %55 = and i1 %48, %54
  %56 = or i1 %52, %55
  br i1 %56, label %128, label %57

57:                                               ; preds = %45
  %58 = sub i32 0, %53
  %59 = select i1 %48, i32 %58, i32 %53
  %60 = zext i32 %59 to i33
  %61 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %60, i33 31) #10
  %62 = extractvalue { i33, i1 } %61, 1
  %63 = extractvalue { i33, i1 } %61, 0
  %64 = icmp slt i33 %63, 0
  %65 = or i1 %62, %64
  %66 = lshr i33 %63, 3
  %67 = and i33 %66, 536870908
  br i1 %65, label %128, label %68

68:                                               ; preds = %57
  %69 = zext i33 %67 to i64
  %70 = trunc i33 %67 to i32
  %71 = getelementptr inbounds i8, i8* %6, i64 32
  %72 = bitcast i8* %71 to i32*
  store i32 %70, i32* %72, align 8
  %73 = mul i32 %3, %1
  %74 = mul i32 %73, %4
  %75 = add i32 %74, 7
  %76 = lshr i32 %75, 3
  %77 = zext i32 %76 to i64
  %78 = getelementptr inbounds i8, i8* %6, i64 72
  %79 = bitcast i8* %78 to i64*
  store i64 %77, i64* %79, align 8
  %80 = tail call i8* @_ZN6pdfium8internal11CallocOrDieEmm(i64 %69, i64 1) #10
  %81 = bitcast i8* %9 to i8**
  %82 = load i8*, i8** %81, align 8
  store i8* %80, i8** %81, align 8
  %83 = icmp eq i8* %82, null
  br i1 %83, label %85, label %84

84:                                               ; preds = %68
  tail call void @_Z7FX_FreePv(i8* nonnull %82) #10
  br label %85

85:                                               ; preds = %84, %68
  %86 = load i64, i64* %21, align 8
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %116, label %88

88:                                               ; preds = %85
  %89 = load i8*, i8** %16, align 8
  br label %90

90:                                               ; preds = %111, %88
  %91 = phi i32 [ 0, %88 ], [ %113, %111 ]
  %92 = phi i64 [ 0, %88 ], [ %114, %111 ]
  %93 = getelementptr inbounds i8, i8* %89, i64 %92
  %94 = load i8, i8* %93, align 1
  %95 = icmp sgt i8 %94, -1
  br i1 %95, label %96, label %104

96:                                               ; preds = %90
  %97 = zext i8 %94 to i32
  %98 = add i32 %91, 1
  %99 = add i32 %98, %97
  %100 = icmp ult i32 %99, %91
  br i1 %100, label %128, label %101

101:                                              ; preds = %96
  %102 = zext i8 %94 to i64
  %103 = add nuw nsw i64 %102, 2
  br label %111

104:                                              ; preds = %90
  %105 = icmp eq i8 %94, -128
  br i1 %105, label %116, label %106

106:                                              ; preds = %104
  %107 = zext i8 %94 to i32
  %108 = sub nuw nsw i32 257, %107
  %109 = add i32 %108, %91
  %110 = icmp ult i32 %109, %91
  br i1 %110, label %128, label %111

111:                                              ; preds = %106, %101
  %112 = phi i64 [ %103, %101 ], [ 2, %106 ]
  %113 = phi i32 [ %99, %101 ], [ %109, %106 ]
  %114 = add i64 %112, %92
  %115 = icmp ult i64 %114, %86
  br i1 %115, label %90, label %116

116:                                              ; preds = %104, %111, %85
  %117 = phi i32 [ 0, %85 ], [ %91, %104 ], [ %113, %111 ]
  %118 = load i32, i32* %23, align 8
  %119 = load i32, i32* %31, align 8
  %120 = mul i32 %119, %118
  %121 = load i32, i32* %33, align 4
  %122 = mul i32 %120, %121
  %123 = load i32, i32* %27, align 4
  %124 = mul i32 %122, %123
  %125 = add i32 %124, 7
  %126 = lshr i32 %125, 3
  %127 = icmp ugt i32 %126, %117
  br i1 %127, label %128, label %134

128:                                              ; preds = %96, %106, %57, %45, %35, %19, %116
  %129 = bitcast i8* %6 to %"class.fxcodec::(anonymous namespace)::RLScanlineDecoder"*
  %130 = bitcast i8* %6 to void (%"class.fxcodec::(anonymous namespace)::RLScanlineDecoder"*)***
  %131 = load void (%"class.fxcodec::(anonymous namespace)::RLScanlineDecoder"*)**, void (%"class.fxcodec::(anonymous namespace)::RLScanlineDecoder"*)*** %130, align 8
  %132 = getelementptr inbounds void (%"class.fxcodec::(anonymous namespace)::RLScanlineDecoder"*)*, void (%"class.fxcodec::(anonymous namespace)::RLScanlineDecoder"*)** %131, i64 1
  %133 = load void (%"class.fxcodec::(anonymous namespace)::RLScanlineDecoder"*)*, void (%"class.fxcodec::(anonymous namespace)::RLScanlineDecoder"*)** %132, align 8
  tail call void %133(%"class.fxcodec::(anonymous namespace)::RLScanlineDecoder"* nonnull %129) #10
  br label %134

134:                                              ; preds = %116, %128
  %135 = phi i64 [ 0, %128 ], [ %10, %116 ]
  %136 = inttoptr i64 %135 to %"class.fxcodec::ScanlineDecoder"*
  ret %"class.fxcodec::ScanlineDecoder"* %136
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7fxcodec11BasicModule15RunLengthEncodeEN6pdfium4spanIKhEEPNSt3__110unique_ptrIh13FxFreeDeleterEEPj(%"class.pdfium::span"* readonly, %"class.std::__1::unique_ptr.4"*, i32*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp ne i64 %5, 0
  %7 = icmp ne %"class.std::__1::unique_ptr.4"* %1, null
  %8 = and i1 %7, %6
  %9 = icmp ne i32* %2, null
  %10 = and i1 %9, %8
  br i1 %10, label %11, label %202

11:                                               ; preds = %3
  %12 = icmp eq i64 %5, 1
  br i1 %12, label %13, label %41

13:                                               ; preds = %11
  store i32 3, i32* %2, align 4
  %14 = tail call i8* @_ZN6pdfium8internal11CallocOrDieEmm(i64 3, i64 1) #10
  %15 = getelementptr inbounds %"class.std::__1::unique_ptr.4", %"class.std::__1::unique_ptr.4"* %1, i64 0, i32 0, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  store i8* %14, i8** %15, align 8
  %17 = icmp eq i8* %16, null
  br i1 %17, label %20, label %18

18:                                               ; preds = %13
  tail call void @_Z7FX_FreePv(i8* nonnull %16) #10
  %19 = load i8*, i8** %15, align 8
  br label %20

20:                                               ; preds = %13, %18
  %21 = phi i8* [ %14, %13 ], [ %19, %18 ]
  %22 = load i32, i32* %2, align 4
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %25, !prof !2

24:                                               ; preds = %20
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #10, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #10, !srcloc !4
  unreachable

25:                                               ; preds = %20
  store i8 0, i8* %21, align 1
  %26 = load i64, i64* %4, align 8
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %28, label %29, !prof !2

28:                                               ; preds = %25
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #10, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #10, !srcloc !4
  unreachable

29:                                               ; preds = %25
  %30 = icmp ugt i32 %22, 1
  br i1 %30, label %32, label %31, !prof !5

31:                                               ; preds = %29
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #10, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #10, !srcloc !4
  unreachable

32:                                               ; preds = %29
  %33 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %0, i64 0, i32 0, i32 0
  %34 = load i8*, i8** %33, align 8
  %35 = load i8, i8* %34, align 1
  %36 = getelementptr inbounds i8, i8* %21, i64 1
  store i8 %35, i8* %36, align 1
  %37 = icmp eq i32 %22, 2
  br i1 %37, label %38, label %39, !prof !2

38:                                               ; preds = %32
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #10, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #10, !srcloc !4
  unreachable

39:                                               ; preds = %32
  %40 = getelementptr inbounds i8, i8* %21, i64 2
  store i8 -128, i8* %40, align 1
  br label %202

41:                                               ; preds = %11
  %42 = zext i64 %5 to i65
  %43 = tail call { i65, i1 } @llvm.sadd.with.overflow.i65(i65 %42, i65 2) #10
  %44 = extractvalue { i65, i1 } %43, 1
  %45 = extractvalue { i65, i1 } %43, 0
  %46 = icmp slt i65 %45, 0
  %47 = or i1 %44, %46
  br i1 %47, label %53, label %48

48:                                               ; preds = %41
  %49 = trunc i65 %45 to i64
  %50 = udiv i64 %49, 3
  %51 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %50, i64 4) #10
  %52 = extractvalue { i64, i1 } %51, 1
  br i1 %52, label %53, label %54

53:                                               ; preds = %41, %48
  tail call void @llvm.trap() #10
  unreachable

54:                                               ; preds = %48
  %55 = extractvalue { i64, i1 } %51, 0
  %56 = or i64 %55, 1
  %57 = tail call i8* @_ZN6pdfium8internal11CallocOrDieEmm(i64 %56, i64 1) #10
  %58 = getelementptr inbounds %"class.std::__1::unique_ptr.4", %"class.std::__1::unique_ptr.4"* %1, i64 0, i32 0, i32 0, i32 0
  %59 = load i8*, i8** %58, align 8
  store i8* %57, i8** %58, align 8
  %60 = icmp eq i8* %59, null
  br i1 %60, label %63, label %61

61:                                               ; preds = %54
  tail call void @_Z7FX_FreePv(i8* nonnull %59) #10
  %62 = load i8*, i8** %58, align 8
  br label %63

63:                                               ; preds = %54, %61
  %64 = phi i8* [ %57, %54 ], [ %62, %61 ]
  %65 = load i64, i64* %4, align 8
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %67, label %68, !prof !2

67:                                               ; preds = %63
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #10, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #10, !srcloc !4
  unreachable

68:                                               ; preds = %63
  %69 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %0, i64 0, i32 0, i32 0
  %70 = load i8*, i8** %69, align 8
  %71 = icmp eq i64 %65, 1
  br i1 %71, label %72, label %73, !prof !2

72:                                               ; preds = %68
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #10, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #10, !srcloc !4
  unreachable

73:                                               ; preds = %68
  %74 = load i8, i8* %70, align 1
  %75 = getelementptr inbounds i8, i8* %70, i64 1
  %76 = load i8, i8* %75, align 1
  br label %77

77:                                               ; preds = %73, %178
  %78 = phi i64 [ %187, %178 ], [ 0, %73 ]
  %79 = phi i64 [ %180, %178 ], [ %65, %73 ]
  %80 = phi i8 [ %185, %178 ], [ %76, %73 ]
  %81 = phi i8 [ %184, %178 ], [ %74, %73 ]
  %82 = phi i32 [ %183, %178 ], [ 1, %73 ]
  %83 = phi i32 [ %182, %178 ], [ 0, %73 ]
  %84 = phi i8* [ %181, %178 ], [ %64, %73 ]
  %85 = sub i64 %79, %78
  %86 = icmp ult i64 %85, 128
  %87 = select i1 %86, i64 %85, i64 128
  %88 = icmp eq i8 %81, %80
  br i1 %88, label %89, label %112

89:                                               ; preds = %77
  %90 = add nsw i64 %87, -1
  br label %91

91:                                               ; preds = %89, %101
  %92 = phi i32 [ %82, %89 ], [ %96, %101 ]
  %93 = sub i32 %92, %83
  %94 = zext i32 %93 to i64
  %95 = icmp ugt i64 %90, %94
  %96 = add i32 %92, 1
  %97 = zext i32 %96 to i64
  %98 = icmp ugt i64 %79, %97
  br i1 %95, label %99, label %106

99:                                               ; preds = %91
  br i1 %98, label %101, label %100, !prof !5

100:                                              ; preds = %99
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #10, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #10, !srcloc !4
  unreachable

101:                                              ; preds = %99
  %102 = load i8*, i8** %69, align 8
  %103 = getelementptr inbounds i8, i8* %102, i64 %97
  %104 = load i8, i8* %103, align 1
  %105 = icmp eq i8 %80, %104
  br i1 %105, label %91, label %112

106:                                              ; preds = %91
  br i1 %98, label %107, label %112

107:                                              ; preds = %106
  %108 = zext i32 %96 to i64
  %109 = load i8*, i8** %69, align 8
  %110 = getelementptr inbounds i8, i8* %109, i64 %108
  %111 = load i8, i8* %110, align 1
  br label %112

112:                                              ; preds = %101, %77, %106, %107
  %113 = phi i32 [ %96, %107 ], [ %96, %106 ], [ %82, %77 ], [ %96, %101 ]
  %114 = phi i8 [ %111, %107 ], [ %80, %106 ], [ %80, %77 ], [ %104, %101 ]
  %115 = sub i32 %113, %83
  %116 = icmp ugt i32 %115, 1
  br i1 %116, label %121, label %117

117:                                              ; preds = %112
  %118 = icmp eq i8 %81, %114
  br i1 %118, label %166, label %119

119:                                              ; preds = %117
  %120 = add nuw nsw i64 %87, %78
  br label %136

121:                                              ; preds = %112
  %122 = trunc i32 %115 to i8
  %123 = sub i8 1, %122
  store i8 %123, i8* %84, align 1
  %124 = getelementptr inbounds i8, i8* %84, i64 1
  store i8 %81, i8* %124, align 1
  %125 = add i32 %113, 1
  %126 = zext i32 %125 to i64
  %127 = load i64, i64* %4, align 8
  %128 = icmp ugt i64 %127, %126
  br i1 %128, label %129, label %133

129:                                              ; preds = %121
  %130 = load i8*, i8** %69, align 8
  %131 = getelementptr inbounds i8, i8* %130, i64 %126
  %132 = load i8, i8* %131, align 1
  br label %133

133:                                              ; preds = %129, %121
  %134 = phi i8 [ %132, %129 ], [ %114, %121 ]
  %135 = getelementptr inbounds i8, i8* %84, i64 2
  br label %178

136:                                              ; preds = %119, %161
  %137 = phi i8 [ %114, %119 ], [ %164, %161 ]
  %138 = phi i8 [ %81, %119 ], [ %137, %161 ]
  %139 = phi i32 [ %113, %119 ], [ %146, %161 ]
  %140 = zext i32 %139 to i64
  %141 = icmp ult i64 %120, %140
  br i1 %141, label %166, label %142

142:                                              ; preds = %136
  %143 = sub i32 %139, %83
  %144 = zext i32 %143 to i64
  %145 = getelementptr inbounds i8, i8* %84, i64 %144
  store i8 %138, i8* %145, align 1
  %146 = add i32 %139, 1
  %147 = zext i32 %146 to i64
  %148 = load i64, i64* %4, align 8
  %149 = icmp eq i64 %148, %147
  br i1 %149, label %150, label %158

150:                                              ; preds = %142
  %151 = zext i32 %146 to i64
  %152 = icmp ult i64 %120, %151
  br i1 %152, label %166, label %153

153:                                              ; preds = %150
  %154 = sub i32 %146, %83
  %155 = zext i32 %154 to i64
  %156 = getelementptr inbounds i8, i8* %84, i64 %155
  store i8 %137, i8* %156, align 1
  %157 = add i32 %139, 2
  br label %166

158:                                              ; preds = %142
  %159 = icmp ugt i64 %148, %147
  br i1 %159, label %161, label %160, !prof !5

160:                                              ; preds = %158
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #10, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #10, !srcloc !4
  unreachable

161:                                              ; preds = %158
  %162 = load i8*, i8** %69, align 8
  %163 = getelementptr inbounds i8, i8* %162, i64 %147
  %164 = load i8, i8* %163, align 1
  %165 = icmp eq i8 %137, %164
  br i1 %165, label %166, label %136

166:                                              ; preds = %161, %136, %117, %150, %153
  %167 = phi i8 [ %137, %153 ], [ %137, %150 ], [ %81, %117 ], [ %137, %136 ], [ %137, %161 ]
  %168 = phi i32 [ %157, %153 ], [ %146, %150 ], [ %113, %117 ], [ %146, %161 ], [ %139, %136 ]
  %169 = phi i8 [ %137, %153 ], [ %137, %150 ], [ %81, %117 ], [ %137, %161 ], [ %138, %136 ]
  %170 = sub i32 %168, %83
  %171 = trunc i32 %170 to i8
  %172 = add i8 %171, -2
  store i8 %172, i8* %84, align 1
  %173 = zext i32 %170 to i64
  %174 = getelementptr inbounds i8, i8* %84, i64 %173
  %175 = add i32 %168, -1
  %176 = load i64, i64* %4, align 8
  %177 = zext i32 %168 to i64
  br label %178

178:                                              ; preds = %166, %133
  %179 = phi i64 [ %177, %166 ], [ %126, %133 ]
  %180 = phi i64 [ %176, %166 ], [ %127, %133 ]
  %181 = phi i8* [ %174, %166 ], [ %135, %133 ]
  %182 = phi i32 [ %175, %166 ], [ %113, %133 ]
  %183 = phi i32 [ %168, %166 ], [ %125, %133 ]
  %184 = phi i8 [ %169, %166 ], [ %114, %133 ]
  %185 = phi i8 [ %167, %166 ], [ %134, %133 ]
  %186 = icmp ugt i64 %180, %179
  %187 = zext i32 %182 to i64
  br i1 %186, label %77, label %188

188:                                              ; preds = %178
  %189 = zext i32 %182 to i64
  %190 = icmp ugt i64 %180, %189
  br i1 %190, label %191, label %194

191:                                              ; preds = %188
  store i8 0, i8* %181, align 1
  %192 = getelementptr inbounds i8, i8* %181, i64 1
  store i8 %184, i8* %192, align 1
  %193 = getelementptr inbounds i8, i8* %181, i64 2
  br label %194

194:                                              ; preds = %191, %188
  %195 = phi i8* [ %193, %191 ], [ %181, %188 ]
  store i8 -128, i8* %195, align 1
  %196 = getelementptr inbounds i8, i8* %195, i64 1
  %197 = bitcast %"class.std::__1::unique_ptr.4"* %1 to i64*
  %198 = load i64, i64* %197, align 8
  %199 = ptrtoint i8* %196 to i64
  %200 = sub i64 %199, %198
  %201 = trunc i64 %200 to i32
  store i32 %201, i32* %2, align 4
  br label %202

202:                                              ; preds = %3, %194, %39
  %203 = phi i1 [ true, %39 ], [ true, %194 ], [ false, %3 ]
  ret i1 %203
}

declare i8* @_ZN6pdfium8internal11CallocOrDieEmm(i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7fxcodec11BasicModule9A85EncodeEN6pdfium4spanIKhEEPNSt3__110unique_ptrIh13FxFreeDeleterEEPj(%"class.pdfium::span"* nocapture readonly, %"class.std::__1::unique_ptr.4"*, i32*) local_unnamed_addr #0 align 2 {
  %4 = icmp ne %"class.std::__1::unique_ptr.4"* %1, null
  %5 = icmp ne i32* %2, null
  %6 = and i1 %4, %5
  br i1 %6, label %7, label %184

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %0, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %181, label %11

11:                                               ; preds = %7
  %12 = lshr i64 %9, 2
  %13 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %12, i64 5) #10
  %14 = extractvalue { i64, i1 } %13, 1
  br i1 %14, label %36, label %15

15:                                               ; preds = %11
  %16 = extractvalue { i64, i1 } %13, 0
  %17 = zext i64 %16 to i65
  %18 = tail call { i65, i1 } @llvm.sadd.with.overflow.i65(i65 %17, i65 4) #10
  %19 = extractvalue { i65, i1 } %18, 1
  %20 = extractvalue { i65, i1 } %18, 0
  %21 = icmp slt i65 %20, 0
  %22 = or i1 %19, %21
  br i1 %22, label %36, label %23

23:                                               ; preds = %15
  %24 = udiv i64 %9, 30
  %25 = trunc i65 %20 to i64
  %26 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %25, i64 %24) #10
  %27 = extractvalue { i64, i1 } %26, 1
  br i1 %27, label %36, label %28

28:                                               ; preds = %23
  %29 = extractvalue { i64, i1 } %26, 0
  %30 = zext i64 %29 to i65
  %31 = tail call { i65, i1 } @llvm.sadd.with.overflow.i65(i65 %30, i65 2) #10
  %32 = extractvalue { i65, i1 } %31, 1
  %33 = extractvalue { i65, i1 } %31, 0
  %34 = icmp slt i65 %33, 0
  %35 = or i1 %32, %34
  br i1 %35, label %36, label %37, !prof !2

36:                                               ; preds = %11, %15, %23, %28
  tail call void @llvm.trap() #10
  unreachable

37:                                               ; preds = %28
  %38 = trunc i65 %33 to i64
  %39 = tail call i8* @_ZN6pdfium8internal11CallocOrDieEmm(i64 %38, i64 1) #10
  %40 = getelementptr inbounds %"class.std::__1::unique_ptr.4", %"class.std::__1::unique_ptr.4"* %1, i64 0, i32 0, i32 0, i32 0
  %41 = load i8*, i8** %40, align 8
  store i8* %39, i8** %40, align 8
  %42 = icmp eq i8* %41, null
  br i1 %42, label %45, label %43

43:                                               ; preds = %37
  tail call void @_Z7FX_FreePv(i8* nonnull %41) #10
  %44 = load i8*, i8** %40, align 8
  br label %45

45:                                               ; preds = %37, %43
  %46 = phi i8* [ %39, %37 ], [ %44, %43 ]
  %47 = load i64, i64* %8, align 8
  %48 = icmp ugt i64 %47, 3
  br i1 %48, label %49, label %138

49:                                               ; preds = %45
  %50 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %0, i64 0, i32 0, i32 0
  br label %51

51:                                               ; preds = %49, %133
  %52 = phi i64 [ %47, %49 ], [ %136, %133 ]
  %53 = phi i32 [ 0, %49 ], [ %135, %133 ]
  %54 = phi i32 [ 0, %49 ], [ %97, %133 ]
  %55 = phi i8* [ %46, %49 ], [ %134, %133 ]
  %56 = zext i32 %54 to i64
  %57 = add i64 %52, -3
  %58 = icmp ugt i64 %57, %56
  br i1 %58, label %59, label %138

59:                                               ; preds = %51
  %60 = icmp ugt i64 %52, %56
  br i1 %60, label %62, label %61, !prof !5

61:                                               ; preds = %59
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #10, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #10, !srcloc !4
  unreachable

62:                                               ; preds = %59
  %63 = load i8*, i8** %50, align 8
  %64 = or i32 %54, 1
  %65 = zext i32 %64 to i64
  %66 = icmp ugt i64 %52, %65
  br i1 %66, label %68, label %67, !prof !5

67:                                               ; preds = %62
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #10, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #10, !srcloc !4
  unreachable

68:                                               ; preds = %62
  %69 = or i32 %54, 2
  %70 = zext i32 %69 to i64
  %71 = icmp ugt i64 %52, %70
  br i1 %71, label %73, label %72, !prof !5

72:                                               ; preds = %68
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #10, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #10, !srcloc !4
  unreachable

73:                                               ; preds = %68
  %74 = or i32 %54, 3
  %75 = zext i32 %74 to i64
  %76 = icmp ugt i64 %52, %75
  br i1 %76, label %78, label %77, !prof !5

77:                                               ; preds = %73
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #10, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #10, !srcloc !4
  unreachable

78:                                               ; preds = %73
  %79 = getelementptr inbounds i8, i8* %63, i64 %56
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i32
  %82 = shl nuw i32 %81, 24
  %83 = getelementptr inbounds i8, i8* %63, i64 %65
  %84 = load i8, i8* %83, align 1
  %85 = zext i8 %84 to i32
  %86 = shl nuw nsw i32 %85, 16
  %87 = or i32 %86, %82
  %88 = getelementptr inbounds i8, i8* %63, i64 %70
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i32
  %91 = shl nuw nsw i32 %90, 8
  %92 = or i32 %87, %91
  %93 = getelementptr inbounds i8, i8* %63, i64 %75
  %94 = load i8, i8* %93, align 1
  %95 = zext i8 %94 to i32
  %96 = or i32 %92, %95
  %97 = add i32 %54, 4
  %98 = icmp eq i32 %96, 0
  br i1 %98, label %123, label %99

99:                                               ; preds = %78
  %100 = urem i32 %96, 85
  %101 = trunc i32 %100 to i8
  %102 = add nuw nsw i8 %101, 33
  %103 = getelementptr inbounds i8, i8* %55, i64 4
  store i8 %102, i8* %103, align 1
  %104 = udiv i32 %96, 85
  %105 = urem i32 %104, 85
  %106 = trunc i32 %105 to i8
  %107 = add nuw nsw i8 %106, 33
  %108 = getelementptr inbounds i8, i8* %55, i64 3
  store i8 %107, i8* %108, align 1
  %109 = udiv i32 %96, 7225
  %110 = urem i32 %109, 85
  %111 = trunc i32 %110 to i8
  %112 = add nuw nsw i8 %111, 33
  %113 = getelementptr inbounds i8, i8* %55, i64 2
  store i8 %112, i8* %113, align 1
  %114 = udiv i32 %96, 614125
  %115 = trunc i32 %114 to i16
  %116 = urem i16 %115, 85
  %117 = trunc i16 %116 to i8
  %118 = add nuw nsw i8 %117, 33
  %119 = getelementptr inbounds i8, i8* %55, i64 1
  store i8 %118, i8* %119, align 1
  %120 = udiv i32 %96, 52200625
  %121 = trunc i32 %120 to i8
  %122 = add nuw nsw i8 %121, 33
  br label %123

123:                                              ; preds = %78, %99
  %124 = phi i8 [ %122, %99 ], [ 122, %78 ]
  %125 = phi i64 [ 5, %99 ], [ 1, %78 ]
  %126 = phi i32 [ 5, %99 ], [ 1, %78 ]
  store i8 %124, i8* %55, align 1
  %127 = getelementptr inbounds i8, i8* %55, i64 %125
  %128 = add nuw nsw i32 %53, %126
  %129 = icmp ugt i32 %128, 74
  br i1 %129, label %130, label %133

130:                                              ; preds = %123
  %131 = getelementptr inbounds i8, i8* %127, i64 1
  store i8 13, i8* %127, align 1
  %132 = getelementptr inbounds i8, i8* %127, i64 2
  store i8 10, i8* %131, align 1
  br label %133

133:                                              ; preds = %130, %123
  %134 = phi i8* [ %132, %130 ], [ %127, %123 ]
  %135 = phi i32 [ 0, %130 ], [ %128, %123 ]
  %136 = load i64, i64* %8, align 8
  %137 = icmp ugt i64 %136, 3
  br i1 %137, label %51, label %138

138:                                              ; preds = %51, %133, %45
  %139 = phi i8* [ %46, %45 ], [ %134, %133 ], [ %55, %51 ]
  %140 = phi i32 [ 0, %45 ], [ %97, %133 ], [ %54, %51 ]
  %141 = phi i64 [ %47, %45 ], [ %136, %133 ], [ %52, %51 ]
  %142 = zext i32 %140 to i64
  %143 = icmp ugt i64 %141, %142
  br i1 %143, label %144, label %172

144:                                              ; preds = %138
  %145 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %0, i64 0, i32 0, i32 0
  %146 = load i8*, i8** %145, align 8
  br label %149

147:                                              ; preds = %149
  %148 = icmp ult i32 %161, 4
  br i1 %148, label %170, label %165

149:                                              ; preds = %144, %149
  %150 = phi i64 [ %142, %144 ], [ %163, %149 ]
  %151 = phi i32 [ 0, %144 ], [ %161, %149 ]
  %152 = phi i32 [ 0, %144 ], [ %160, %149 ]
  %153 = phi i32 [ %140, %144 ], [ %162, %149 ]
  %154 = getelementptr inbounds i8, i8* %146, i64 %150
  %155 = load i8, i8* %154, align 1
  %156 = zext i8 %155 to i32
  %157 = shl i32 %151, 3
  %158 = sub i32 24, %157
  %159 = shl i32 %156, %158
  %160 = add i32 %159, %152
  %161 = add nuw nsw i32 %151, 1
  %162 = add i32 %153, 1
  %163 = zext i32 %162 to i64
  %164 = icmp ugt i64 %141, %163
  br i1 %164, label %149, label %147

165:                                              ; preds = %147
  %166 = urem i32 %160, 85
  %167 = trunc i32 %166 to i8
  %168 = add nuw nsw i8 %167, 33
  %169 = getelementptr inbounds i8, i8* %139, i64 4
  store i8 %168, i8* %169, align 1
  br label %186

170:                                              ; preds = %147
  %171 = icmp eq i32 %161, 3
  br i1 %171, label %186, label %192

172:                                              ; preds = %200, %138
  %173 = phi i8* [ %212, %200 ], [ %139, %138 ]
  store i8 126, i8* %173, align 1
  %174 = getelementptr inbounds i8, i8* %173, i64 1
  store i8 62, i8* %174, align 1
  %175 = getelementptr inbounds i8, i8* %173, i64 2
  %176 = bitcast %"class.std::__1::unique_ptr.4"* %1 to i64*
  %177 = load i64, i64* %176, align 8
  %178 = ptrtoint i8* %175 to i64
  %179 = sub i64 %178, %177
  %180 = trunc i64 %179 to i32
  br label %181

181:                                              ; preds = %7, %172
  %182 = phi i32 [ %180, %172 ], [ 0, %7 ]
  %183 = phi i1 [ true, %172 ], [ false, %7 ]
  store i32 %182, i32* %2, align 4
  br label %184

184:                                              ; preds = %181, %3
  %185 = phi i1 [ false, %3 ], [ %183, %181 ]
  ret i1 %185

186:                                              ; preds = %170, %165
  %187 = udiv i32 %160, 85
  %188 = urem i32 %187, 85
  %189 = trunc i32 %188 to i8
  %190 = add nuw nsw i8 %189, 33
  %191 = getelementptr inbounds i8, i8* %139, i64 3
  store i8 %190, i8* %191, align 1
  br label %194

192:                                              ; preds = %170
  %193 = icmp ult i32 %161, 2
  br i1 %193, label %200, label %194

194:                                              ; preds = %186, %192
  %195 = udiv i32 %160, 7225
  %196 = urem i32 %195, 85
  %197 = trunc i32 %196 to i8
  %198 = add nuw nsw i8 %197, 33
  %199 = getelementptr inbounds i8, i8* %139, i64 2
  store i8 %198, i8* %199, align 1
  br label %200

200:                                              ; preds = %194, %192
  %201 = udiv i32 %160, 614125
  %202 = trunc i32 %201 to i16
  %203 = urem i16 %202, 85
  %204 = trunc i16 %203 to i8
  %205 = add nuw nsw i8 %204, 33
  %206 = getelementptr inbounds i8, i8* %139, i64 1
  store i8 %205, i8* %206, align 1
  %207 = udiv i32 %160, 52200625
  %208 = trunc i32 %207 to i8
  %209 = add nuw nsw i8 %208, 33
  store i8 %209, i8* %139, align 1
  %210 = add nuw nsw i32 %151, 2
  %211 = zext i32 %210 to i64
  %212 = getelementptr inbounds i8, i8* %139, i64 %211
  br label %172
}

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.umul.with.overflow.i32(i32, i32) #3

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #3

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #4

; Function Attrs: nounwind readnone speculatable
declare { i65, i1 } @llvm.sadd.with.overflow.i65(i65, i65) #3

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #3

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.uadd.with.overflow.i64(i64, i64) #3

declare void @_Z7FX_FreePv(i8*) local_unnamed_addr #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

declare void @_ZN7fxcodec15ScanlineDecoderC2Ev(%"class.fxcodec::ScanlineDecoder"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7fxcodec12_GLOBAL__N_117RLScanlineDecoderD2Ev(%"class.fxcodec::(anonymous namespace)::RLScanlineDecoder"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::RLScanlineDecoder", %"class.fxcodec::(anonymous namespace)::RLScanlineDecoder"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN7fxcodec12_GLOBAL__N_117RLScanlineDecoderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::RLScanlineDecoder", %"class.fxcodec::(anonymous namespace)::RLScanlineDecoder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  store i8* null, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  tail call void @_Z7FX_FreePv(i8* nonnull %4) #10
  br label %7

7:                                                ; preds = %1, %6
  %8 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::RLScanlineDecoder", %"class.fxcodec::(anonymous namespace)::RLScanlineDecoder"* %0, i64 0, i32 0
  tail call void @_ZN7fxcodec15ScanlineDecoderD2Ev(%"class.fxcodec::ScanlineDecoder"* %8) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7fxcodec12_GLOBAL__N_117RLScanlineDecoderD0Ev(%"class.fxcodec::(anonymous namespace)::RLScanlineDecoder"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::RLScanlineDecoder", %"class.fxcodec::(anonymous namespace)::RLScanlineDecoder"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN7fxcodec12_GLOBAL__N_117RLScanlineDecoderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::RLScanlineDecoder", %"class.fxcodec::(anonymous namespace)::RLScanlineDecoder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  store i8* null, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  tail call void @_Z7FX_FreePv(i8* nonnull %4) #10
  br label %7

7:                                                ; preds = %1, %6
  %8 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::RLScanlineDecoder", %"class.fxcodec::(anonymous namespace)::RLScanlineDecoder"* %0, i64 0, i32 0
  tail call void @_ZN7fxcodec15ScanlineDecoderD2Ev(%"class.fxcodec::ScanlineDecoder"* %8) #10
  %9 = bitcast %"class.fxcodec::(anonymous namespace)::RLScanlineDecoder"* %0 to i8*
  tail call void @_ZdlPv(i8* %9) #9
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i32 @_ZN7fxcodec12_GLOBAL__N_117RLScanlineDecoder12GetSrcOffsetEv(%"class.fxcodec::(anonymous namespace)::RLScanlineDecoder"* nocapture readonly) unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::RLScanlineDecoder", %"class.fxcodec::(anonymous namespace)::RLScanlineDecoder"* %0, i64 0, i32 4
  %3 = load i64, i64* %2, align 8
  %4 = trunc i64 %3 to i32
  ret i32 %4
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN7fxcodec12_GLOBAL__N_117RLScanlineDecoder8v_RewindEv(%"class.fxcodec::(anonymous namespace)::RLScanlineDecoder"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::RLScanlineDecoder", %"class.fxcodec::(anonymous namespace)::RLScanlineDecoder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::RLScanlineDecoder", %"class.fxcodec::(anonymous namespace)::RLScanlineDecoder"* %0, i64 0, i32 0, i32 7
  %5 = load i32, i32* %4, align 8
  %6 = zext i32 %5 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %3, i8 0, i64 %6, i1 false)
  %7 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::RLScanlineDecoder", %"class.fxcodec::(anonymous namespace)::RLScanlineDecoder"* %0, i64 0, i32 4
  store i64 0, i64* %7, align 8
  %8 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::RLScanlineDecoder", %"class.fxcodec::(anonymous namespace)::RLScanlineDecoder"* %0, i64 0, i32 5
  store i8 0, i8* %8, align 8
  %9 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::RLScanlineDecoder", %"class.fxcodec::(anonymous namespace)::RLScanlineDecoder"* %0, i64 0, i32 6
  store i8 0, i8* %9, align 1
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define internal i8* @_ZN7fxcodec12_GLOBAL__N_117RLScanlineDecoder13v_GetNextLineEv(%"class.fxcodec::(anonymous namespace)::RLScanlineDecoder"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::RLScanlineDecoder", %"class.fxcodec::(anonymous namespace)::RLScanlineDecoder"* %0, i64 0, i32 4
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %5, label %16

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::RLScanlineDecoder", %"class.fxcodec::(anonymous namespace)::RLScanlineDecoder"* %0, i64 0, i32 2, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %13, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::RLScanlineDecoder", %"class.fxcodec::(anonymous namespace)::RLScanlineDecoder"* %0, i64 0, i32 2, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = load i8, i8* %11, align 1
  store i64 1, i64* %2, align 8
  br label %13

13:                                               ; preds = %5, %9
  %14 = phi i8 [ %12, %9 ], [ -128, %5 ]
  %15 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::RLScanlineDecoder", %"class.fxcodec::(anonymous namespace)::RLScanlineDecoder"* %0, i64 0, i32 6
  store i8 %14, i8* %15, align 1
  br label %20

16:                                               ; preds = %1
  %17 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::RLScanlineDecoder", %"class.fxcodec::(anonymous namespace)::RLScanlineDecoder"* %0, i64 0, i32 5
  %18 = load i8, i8* %17, align 8, !range !6
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %20, label %209

20:                                               ; preds = %16, %13
  %21 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::RLScanlineDecoder", %"class.fxcodec::(anonymous namespace)::RLScanlineDecoder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::RLScanlineDecoder", %"class.fxcodec::(anonymous namespace)::RLScanlineDecoder"* %0, i64 0, i32 0, i32 7
  %24 = load i32, i32* %23, align 8
  %25 = zext i32 %24 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %22, i8 0, i64 %25, i1 false)
  %26 = load i64, i64* %2, align 8
  %27 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::RLScanlineDecoder", %"class.fxcodec::(anonymous namespace)::RLScanlineDecoder"* %0, i64 0, i32 2, i32 1
  %28 = load i64, i64* %27, align 8
  %29 = icmp ugt i64 %28, %26
  br i1 %29, label %30, label %207

30:                                               ; preds = %20
  %31 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::RLScanlineDecoder", %"class.fxcodec::(anonymous namespace)::RLScanlineDecoder"* %0, i64 0, i32 6
  %32 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::RLScanlineDecoder", %"class.fxcodec::(anonymous namespace)::RLScanlineDecoder"* %0, i64 0, i32 2, i32 0, i32 0
  %33 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::RLScanlineDecoder", %"class.fxcodec::(anonymous namespace)::RLScanlineDecoder"* %0, i64 0, i32 3
  %34 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::RLScanlineDecoder", %"class.fxcodec::(anonymous namespace)::RLScanlineDecoder"* %0, i64 0, i32 2, i32 0, i32 0
  %35 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::RLScanlineDecoder", %"class.fxcodec::(anonymous namespace)::RLScanlineDecoder"* %0, i64 0, i32 5
  br label %36

36:                                               ; preds = %30, %197
  %37 = phi i64 [ %28, %30 ], [ %202, %197 ]
  %38 = phi i64 [ %26, %30 ], [ %201, %197 ]
  %39 = phi i8 [ 0, %30 ], [ %199, %197 ]
  %40 = phi i32 [ 0, %30 ], [ %200, %197 ]
  %41 = load i8, i8* %31, align 1
  %42 = icmp sgt i8 %41, -1
  br i1 %42, label %43, label %122

43:                                               ; preds = %36
  %44 = zext i8 %41 to i32
  %45 = add nuw nsw i32 %44, 1
  %46 = add i32 %45, %40
  %47 = zext i32 %46 to i64
  %48 = load i64, i64* %33, align 8
  %49 = icmp ugt i64 %48, %47
  %50 = trunc i64 %48 to i32
  %51 = sub i32 %50, %40
  %52 = select i1 %49, i8 %39, i8 1
  %53 = select i1 %49, i32 %45, i32 %51
  %54 = zext i32 %53 to i64
  %55 = sub i64 %37, %38
  %56 = icmp ugt i64 %55, %54
  br i1 %56, label %60, label %57

57:                                               ; preds = %43
  %58 = trunc i64 %55 to i32
  store i8 1, i8* %35, align 8
  %59 = and i64 %55, 4294967295
  br label %60

60:                                               ; preds = %43, %57
  %61 = phi i64 [ %54, %43 ], [ %59, %57 ]
  %62 = phi i32 [ %53, %43 ], [ %58, %57 ]
  %63 = icmp ult i64 %37, %38
  br i1 %63, label %64, label %65, !prof !2

64:                                               ; preds = %60
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #10, !noalias !7, !srcloc !10
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #10, !noalias !7, !srcloc !11
  unreachable

65:                                               ; preds = %60
  %66 = icmp ult i64 %55, %61
  br i1 %66, label %67, label %68, !prof !2

67:                                               ; preds = %65
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #10, !noalias !7, !srcloc !12
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #10, !noalias !7, !srcloc !13
  unreachable

68:                                               ; preds = %65
  %69 = load i8*, i8** %32, align 8, !noalias !7
  %70 = getelementptr inbounds i8, i8* %69, i64 %38
  %71 = load i8*, i8** %21, align 8
  %72 = zext i32 %40 to i64
  %73 = getelementptr inbounds i8, i8* %71, i64 %72
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %73, i8* align 1 %70, i64 %61, i1 false)
  %74 = trunc i32 %62 to i8
  %75 = and i32 %62, 255
  %76 = icmp eq i8 %74, 0
  br i1 %76, label %197, label %77

77:                                               ; preds = %68
  %78 = load i8, i8* %31, align 1
  %79 = icmp sgt i8 %78, -1
  br i1 %79, label %80, label %105

80:                                               ; preds = %77
  %81 = zext i8 %78 to i32
  %82 = add nuw nsw i32 %81, 1
  %83 = icmp eq i32 %82, %75
  br i1 %83, label %84, label %97

84:                                               ; preds = %80
  %85 = zext i32 %75 to i64
  %86 = load i64, i64* %2, align 8
  %87 = add i64 %86, %85
  store i64 %87, i64* %2, align 8
  %88 = load i64, i64* %27, align 8
  %89 = icmp ult i64 %87, %88
  br i1 %89, label %90, label %95

90:                                               ; preds = %84
  %91 = load i8*, i8** %34, align 8
  %92 = getelementptr inbounds i8, i8* %91, i64 %87
  %93 = load i8, i8* %92, align 1
  %94 = add nuw i64 %87, 1
  store i64 %94, i64* %2, align 8
  br label %95

95:                                               ; preds = %90, %84
  %96 = phi i8 [ %93, %90 ], [ -128, %84 ]
  store i8 %96, i8* %31, align 1
  br label %197

97:                                               ; preds = %80
  %98 = sub i8 %78, %74
  store i8 %98, i8* %31, align 1
  %99 = zext i32 %75 to i64
  %100 = load i64, i64* %2, align 8
  %101 = add i64 %100, %99
  store i64 %101, i64* %2, align 8
  %102 = load i64, i64* %27, align 8
  %103 = icmp ult i64 %101, %102
  br i1 %103, label %197, label %104

104:                                              ; preds = %97
  store i8 -128, i8* %31, align 1
  br label %197

105:                                              ; preds = %77
  %106 = sub i8 1, %78
  %107 = icmp eq i8 %106, %74
  br i1 %107, label %108, label %120

108:                                              ; preds = %105
  %109 = load i64, i64* %2, align 8
  %110 = add i64 %109, 1
  store i64 %110, i64* %2, align 8
  %111 = load i64, i64* %27, align 8
  %112 = icmp ult i64 %110, %111
  br i1 %112, label %113, label %118

113:                                              ; preds = %108
  %114 = load i8*, i8** %34, align 8
  %115 = getelementptr inbounds i8, i8* %114, i64 %110
  %116 = load i8, i8* %115, align 1
  %117 = add i64 %109, 2
  store i64 %117, i64* %2, align 8
  br label %118

118:                                              ; preds = %113, %108
  %119 = phi i8 [ %116, %113 ], [ -128, %108 ]
  store i8 %119, i8* %31, align 1
  br label %197

120:                                              ; preds = %105
  %121 = add i8 %78, %74
  store i8 %121, i8* %31, align 1
  br label %197

122:                                              ; preds = %36
  %123 = icmp eq i8 %41, -128
  br i1 %123, label %196, label %124

124:                                              ; preds = %122
  %125 = add i64 %38, -1
  %126 = add i64 %37, -1
  %127 = icmp ult i64 %125, %126
  br i1 %127, label %128, label %132

128:                                              ; preds = %124
  %129 = load i8*, i8** %32, align 8
  %130 = getelementptr inbounds i8, i8* %129, i64 %38
  %131 = load i8, i8* %130, align 1
  br label %132

132:                                              ; preds = %128, %124
  %133 = phi i8 [ %131, %128 ], [ 0, %124 ]
  %134 = zext i8 %41 to i32
  %135 = sub nuw nsw i32 257, %134
  %136 = add i32 %135, %40
  %137 = zext i32 %136 to i64
  %138 = load i64, i64* %33, align 8
  %139 = icmp ugt i64 %138, %137
  %140 = trunc i64 %138 to i32
  %141 = sub i32 %140, %40
  %142 = select i1 %139, i8 %39, i8 1
  %143 = select i1 %139, i32 %135, i32 %141
  %144 = load i8*, i8** %21, align 8
  %145 = zext i32 %40 to i64
  %146 = getelementptr inbounds i8, i8* %144, i64 %145
  %147 = zext i32 %143 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %146, i8 %133, i64 %147, i1 false)
  %148 = trunc i32 %143 to i8
  %149 = and i32 %143, 255
  %150 = icmp eq i8 %148, 0
  br i1 %150, label %197, label %151

151:                                              ; preds = %132
  %152 = load i8, i8* %31, align 1
  %153 = icmp sgt i8 %152, -1
  br i1 %153, label %154, label %179

154:                                              ; preds = %151
  %155 = zext i8 %152 to i32
  %156 = add nuw nsw i32 %155, 1
  %157 = icmp eq i32 %156, %149
  br i1 %157, label %158, label %171

158:                                              ; preds = %154
  %159 = zext i32 %149 to i64
  %160 = load i64, i64* %2, align 8
  %161 = add i64 %160, %159
  store i64 %161, i64* %2, align 8
  %162 = load i64, i64* %27, align 8
  %163 = icmp ult i64 %161, %162
  br i1 %163, label %164, label %169

164:                                              ; preds = %158
  %165 = load i8*, i8** %34, align 8
  %166 = getelementptr inbounds i8, i8* %165, i64 %161
  %167 = load i8, i8* %166, align 1
  %168 = add nuw i64 %161, 1
  store i64 %168, i64* %2, align 8
  br label %169

169:                                              ; preds = %164, %158
  %170 = phi i8 [ %167, %164 ], [ -128, %158 ]
  store i8 %170, i8* %31, align 1
  br label %197

171:                                              ; preds = %154
  %172 = sub i8 %152, %148
  store i8 %172, i8* %31, align 1
  %173 = zext i32 %149 to i64
  %174 = load i64, i64* %2, align 8
  %175 = add i64 %174, %173
  store i64 %175, i64* %2, align 8
  %176 = load i64, i64* %27, align 8
  %177 = icmp ult i64 %175, %176
  br i1 %177, label %197, label %178

178:                                              ; preds = %171
  store i8 -128, i8* %31, align 1
  br label %197

179:                                              ; preds = %151
  %180 = sub i8 1, %152
  %181 = icmp eq i8 %180, %148
  br i1 %181, label %182, label %194

182:                                              ; preds = %179
  %183 = load i64, i64* %2, align 8
  %184 = add i64 %183, 1
  store i64 %184, i64* %2, align 8
  %185 = load i64, i64* %27, align 8
  %186 = icmp ult i64 %184, %185
  br i1 %186, label %187, label %192

187:                                              ; preds = %182
  %188 = load i8*, i8** %34, align 8
  %189 = getelementptr inbounds i8, i8* %188, i64 %184
  %190 = load i8, i8* %189, align 1
  %191 = add i64 %183, 2
  store i64 %191, i64* %2, align 8
  br label %192

192:                                              ; preds = %187, %182
  %193 = phi i8 [ %190, %187 ], [ -128, %182 ]
  store i8 %193, i8* %31, align 1
  br label %197

194:                                              ; preds = %179
  %195 = add i8 %152, %148
  store i8 %195, i8* %31, align 1
  br label %197

196:                                              ; preds = %122
  store i8 1, i8* %35, align 8
  br label %207

197:                                              ; preds = %194, %192, %178, %171, %169, %132, %120, %118, %104, %97, %95, %68
  %198 = phi i32 [ %62, %68 ], [ %62, %95 ], [ %62, %97 ], [ %62, %104 ], [ %62, %118 ], [ %62, %120 ], [ %143, %132 ], [ %143, %169 ], [ %143, %171 ], [ %143, %178 ], [ %143, %192 ], [ %143, %194 ]
  %199 = phi i8 [ %52, %68 ], [ %52, %95 ], [ %52, %97 ], [ %52, %104 ], [ %52, %118 ], [ %52, %120 ], [ %142, %132 ], [ %142, %169 ], [ %142, %171 ], [ %142, %178 ], [ %142, %192 ], [ %142, %194 ]
  %200 = add i32 %198, %40
  %201 = load i64, i64* %2, align 8
  %202 = load i64, i64* %27, align 8
  %203 = icmp ugt i64 %202, %201
  %204 = and i8 %199, 1
  %205 = icmp eq i8 %204, 0
  %206 = and i1 %205, %203
  br i1 %206, label %36, label %207

207:                                              ; preds = %197, %20, %196
  %208 = load i8*, i8** %21, align 8
  br label %209

209:                                              ; preds = %16, %207
  %210 = phi i8* [ %208, %207 ], [ null, %16 ]
  ret i8* %210
}

; Function Attrs: nounwind
declare void @_ZN7fxcodec15ScanlineDecoderD2Ev(%"class.fxcodec::ScanlineDecoder"*) unnamed_addr #7

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #8

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { cold noreturn nounwind }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { builtin nounwind }
attributes #10 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{i32 -2144198868}
!4 = !{i32 -2144198847}
!5 = !{!"branch_weights", i32 2000, i32 1}
!6 = !{i8 0, i8 2}
!7 = !{!8}
!8 = distinct !{!8, !9, !"_ZNK6pdfium4spanIKhE7subspanEmm: argument 0"}
!9 = distinct !{!9, !"_ZNK6pdfium4spanIKhE7subspanEmm"}
!10 = !{i32 -2144199994}
!11 = !{i32 -2144199973}
!12 = !{i32 -2144199407}
!13 = !{i32 -2144199386}
