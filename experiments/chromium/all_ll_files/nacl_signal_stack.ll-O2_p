; ModuleID = '../../native_client/src/trusted/service_runtime/posix/nacl_signal_stack.c'
source_filename = "../../native_client/src/trusted/service_runtime/posix/nacl_signal_stack.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.stack_t = type { i8*, i32, i64 }

@g_signal_stack_size = internal unnamed_addr global i32 12288, align 4
@.str = private unnamed_addr constant [48 x i8] c"Failed to mprotect() the stack guard page:\0A\09%s\0A\00", align 1
@.str.1 = private unnamed_addr constant [40 x i8] c"Fatal error in file %s, line %d: !(%s)\0A\00", align 1
@.str.2 = private unnamed_addr constant [74 x i8] c"../../native_client/src/trusted/service_runtime/posix/nacl_signal_stack.c\00", align 1
@.str.3 = private unnamed_addr constant [14 x i8] c"stack != NULL\00", align 1
@.str.4 = private unnamed_addr constant [38 x i8] c"Failed to munmap() signal stack:\0A\09%s\0A\00", align 1
@.str.5 = private unnamed_addr constant [38 x i8] c"Failed to register signal stack:\0A\09%s\0A\00", align 1
@.str.6 = private unnamed_addr constant [40 x i8] c"Failed to unregister signal stack:\0A\09%s\0A\00", align 1

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @NaClSignalStackSetSize(i32) local_unnamed_addr #0 {
  store i32 %0, i32* @g_signal_stack_size, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NaClSignalStackAllocate(i8** nocapture) local_unnamed_addr #1 {
  %2 = load i32, i32* @g_signal_stack_size, align 4
  %3 = add i32 %2, 4096
  %4 = zext i32 %3 to i64
  %5 = tail call i8* @mmap64(i8* null, i64 %4, i32 3, i32 34, i32 -1, i64 0) #6
  %6 = icmp eq i8* %5, inttoptr (i64 -1 to i8*)
  br i1 %6, label %15, label %7

7:                                                ; preds = %1
  %8 = tail call i32 @mprotect(i8* %5, i64 4096, i32 0) #6
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %14, label %10

10:                                               ; preds = %7
  %11 = tail call i32* @__errno_location() #7
  %12 = load i32, i32* %11, align 4
  %13 = tail call i8* @strerror(i32 %12) #6
  tail call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i8* %13) #6
  br label %14

14:                                               ; preds = %7, %10
  store i8* %5, i8** %0, align 8
  br label %15

15:                                               ; preds = %1, %14
  %16 = phi i32 [ 1, %14 ], [ 0, %1 ]
  ret i32 %16
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind
declare i8* @mmap64(i8*, i64, i32, i32, i32, i64) local_unnamed_addr #3

; Function Attrs: nounwind
declare i32 @mprotect(i8*, i64, i32) local_unnamed_addr #3

declare void @NaClLog(i32, i8*, ...) local_unnamed_addr #4

; Function Attrs: nounwind
declare i8* @strerror(i32) local_unnamed_addr #3

; Function Attrs: nounwind readnone
declare i32* @__errno_location() local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @NaClSignalStackFree(i8*) local_unnamed_addr #1 {
  %2 = icmp eq i8* %0, null
  br i1 %2, label %3, label %4

3:                                                ; preds = %1
  tail call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.2, i64 0, i64 0), i32 64, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0)) #6
  br label %4

4:                                                ; preds = %1, %3
  %5 = load i32, i32* @g_signal_stack_size, align 4
  %6 = add i32 %5, 4096
  %7 = zext i32 %6 to i64
  %8 = tail call i32 @munmap(i8* %0, i64 %7) #6
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %14, label %10

10:                                               ; preds = %4
  %11 = tail call i32* @__errno_location() #7
  %12 = load i32, i32* %11, align 4
  %13 = tail call i8* @strerror(i32 %12) #6
  tail call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.4, i64 0, i64 0), i8* %13) #6
  br label %14

14:                                               ; preds = %4, %10
  ret void
}

; Function Attrs: nounwind
declare i32 @munmap(i8*, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @NaClSignalStackRegister(i8*) local_unnamed_addr #1 {
  %2 = alloca %struct.stack_t, align 8
  %3 = bitcast %struct.stack_t* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %3) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %3, i8 -86, i64 16, i1 false)
  %4 = load i32, i32* @g_signal_stack_size, align 4
  %5 = zext i32 %4 to i64
  %6 = getelementptr inbounds %struct.stack_t, %struct.stack_t* %2, i64 0, i32 2
  store i64 %5, i64* %6, align 8
  %7 = getelementptr inbounds i8, i8* %0, i64 4096
  %8 = getelementptr inbounds %struct.stack_t, %struct.stack_t* %2, i64 0, i32 0
  store i8* %7, i8** %8, align 8
  %9 = getelementptr inbounds %struct.stack_t, %struct.stack_t* %2, i64 0, i32 1
  store i32 0, i32* %9, align 8
  %10 = call i32 @sigaltstack(%struct.stack_t* nonnull %2, %struct.stack_t* null) #6
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %16, label %12

12:                                               ; preds = %1
  %13 = tail call i32* @__errno_location() #7
  %14 = load i32, i32* %13, align 4
  %15 = call i8* @strerror(i32 %14) #6
  call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.5, i64 0, i64 0), i8* %15) #6
  br label %16

16:                                               ; preds = %1, %12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %3) #6
  ret void
}

; Function Attrs: nounwind
declare i32 @sigaltstack(%struct.stack_t*, %struct.stack_t*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @NaClSignalStackUnregister() local_unnamed_addr #1 {
  %1 = alloca %struct.stack_t, align 8
  %2 = bitcast %struct.stack_t* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %2) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %2, i8 -86, i64 16, i1 false)
  %3 = getelementptr inbounds %struct.stack_t, %struct.stack_t* %1, i64 0, i32 2
  store i64 0, i64* %3, align 8
  %4 = getelementptr inbounds %struct.stack_t, %struct.stack_t* %1, i64 0, i32 0
  store i8* null, i8** %4, align 8
  %5 = getelementptr inbounds %struct.stack_t, %struct.stack_t* %1, i64 0, i32 1
  store i32 2, i32* %5, align 8
  %6 = call i32 @sigaltstack(%struct.stack_t* nonnull %1, %struct.stack_t* null) #6
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %12, label %8

8:                                                ; preds = %0
  %9 = tail call i32* @__errno_location() #7
  %10 = load i32, i32* %9, align 4
  %11 = call i8* @strerror(i32 %10) #6
  call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.6, i64 0, i64 0), i8* %11) #6
  br label %12

12:                                               ; preds = %0, %8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %2) #6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
