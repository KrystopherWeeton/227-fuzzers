; ModuleID = '../../native_client/src/trusted/validator_ragel/dfa_validate_common.c'
source_filename = "../../native_client/src/trusted/validator_ragel/dfa_validate_common.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.StubOutCallbackData = type { i32, i8*, i8*, %struct.cpu_feature_struct_X86*, i32 (i8*, i64, i32, %struct.cpu_feature_struct_X86*, i32 (i8*, i8*, i32, i8*)*, i8*)*, i32 }
%struct.cpu_feature_struct_X86 = type { [39 x i8] }

@.str = private unnamed_addr constant [40 x i8] c"Fatal error in file %s, line %d: !(%s)\0A\00", align 1
@.str.1 = private unnamed_addr constant [70 x i8] c"../../native_client/src/trusted/validator_ragel/dfa_validate_common.c\00", align 1
@.str.2 = private unnamed_addr constant [45 x i8] c"instruction_length <= MAX_INSTRUCTION_LENGTH\00", align 1
@kStubOutMem = internal constant [17 x i8] c"\F4\F4\F4\F4\F4\F4\F4\F4\F4\F4\F4\F4\F4\F4\F4\F4\F4", align 16
@.str.3 = private unnamed_addr constant [39 x i8] c"instruction_begin >= data->chunk_begin\00", align 1
@.str.4 = private unnamed_addr constant [46 x i8] c"instruction_end <= bundle_begin + kBundleSize\00", align 1
@.str.5 = private unnamed_addr constant [46 x i8] c"bundle_begin + kBundleSize <= data->chunk_end\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"\0F\18\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"\0F\E7\00", align 1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @NaClDfaProcessValidationError(i8* nocapture readnone, i8* nocapture readnone, i32, i8* nocapture readnone) local_unnamed_addr #0 {
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NaClDfaStubOutUnsupportedInstruction(i8*, i8* readnone, i32, i8*) local_unnamed_addr #1 {
  %5 = bitcast i8* %3 to %struct.StubOutCallbackData*
  %6 = and i32 %2, 100646912
  switch i32 %6, label %16 [
    i32 65536, label %7
    i32 67108864, label %9
  ]

7:                                                ; preds = %4
  %8 = tail call fastcc i32 @RewriteAndRevalidateBundle(i8* %0, i8* %1, %struct.StubOutCallbackData* %5)
  br label %16

9:                                                ; preds = %4
  %10 = bitcast i8* %3 to i32*
  %11 = load i32, i32* %10, align 8
  %12 = and i32 %11, 1
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %9
  %15 = tail call fastcc i32 @RewriteAndRevalidateBundle(i8* %0, i8* %1, %struct.StubOutCallbackData* %5)
  br label %16

16:                                               ; preds = %9, %4, %14, %7
  %17 = phi i32 [ %8, %7 ], [ %15, %14 ], [ 0, %4 ], [ 0, %9 ]
  ret i32 %17
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @RewriteAndRevalidateBundle(i8*, i8* readnone, %struct.StubOutCallbackData*) unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.StubOutCallbackData, %struct.StubOutCallbackData* %2, i64 0, i32 1
  %5 = load i8*, i8** %4, align 8
  %6 = icmp ugt i8* %5, %0
  br i1 %6, label %7, label %9

7:                                                ; preds = %3
  tail call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.1, i64 0, i64 0), i32 229, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.3, i64 0, i64 0)) #6
  %8 = load i8*, i8** %4, align 8
  br label %9

9:                                                ; preds = %3, %7
  %10 = phi i8* [ %5, %3 ], [ %8, %7 ]
  %11 = ptrtoint i8* %0 to i64
  %12 = ptrtoint i8* %10 to i64
  %13 = sub i64 %11, %12
  %14 = and i64 %13, -32
  %15 = getelementptr inbounds i8, i8* %10, i64 %14
  %16 = getelementptr inbounds i8, i8* %15, i64 32
  %17 = icmp ult i8* %16, %1
  br i1 %17, label %18, label %19

18:                                               ; preds = %9
  tail call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.1, i64 0, i64 0), i32 232, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.4, i64 0, i64 0)) #6
  br label %19

19:                                               ; preds = %9, %18
  %20 = getelementptr inbounds %struct.StubOutCallbackData, %struct.StubOutCallbackData* %2, i64 0, i32 2
  %21 = load i8*, i8** %20, align 8
  %22 = icmp ugt i8* %16, %21
  br i1 %22, label %23, label %24

23:                                               ; preds = %19
  tail call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.1, i64 0, i64 0), i32 233, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.5, i64 0, i64 0)) #6
  br label %24

24:                                               ; preds = %19, %23
  %25 = getelementptr inbounds %struct.StubOutCallbackData, %struct.StubOutCallbackData* %2, i64 0, i32 4
  %26 = load i32 (i8*, i64, i32, %struct.cpu_feature_struct_X86*, i32 (i8*, i8*, i32, i8*)*, i8*)*, i32 (i8*, i64, i32, %struct.cpu_feature_struct_X86*, i32 (i8*, i8*, i32, i8*)*, i8*)** %25, align 8
  %27 = getelementptr inbounds %struct.StubOutCallbackData, %struct.StubOutCallbackData* %2, i64 0, i32 3
  %28 = load %struct.cpu_feature_struct_X86*, %struct.cpu_feature_struct_X86** %27, align 8
  %29 = bitcast %struct.StubOutCallbackData* %2 to i8*
  %30 = tail call i32 %26(i8* %15, i64 32, i32 0, %struct.cpu_feature_struct_X86* %28, i32 (i8*, i8*, i32, i8*)* nonnull @BundleValidationApplyRewrite, i8* %29) #6
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %36, label %32

32:                                               ; preds = %24
  %33 = load i32 (i8*, i64, i32, %struct.cpu_feature_struct_X86*, i32 (i8*, i8*, i32, i8*)*, i8*)*, i32 (i8*, i64, i32, %struct.cpu_feature_struct_X86*, i32 (i8*, i8*, i32, i8*)*, i8*)** %25, align 8
  %34 = load %struct.cpu_feature_struct_X86*, %struct.cpu_feature_struct_X86** %27, align 8
  %35 = tail call i32 %33(i8* %15, i64 32, i32 0, %struct.cpu_feature_struct_X86* %34, i32 (i8*, i8*, i32, i8*)* nonnull @BundleValidationCheckAfterRewrite, i8* %29) #6
  br label %36

36:                                               ; preds = %24, %32
  %37 = phi i32 [ %35, %32 ], [ 0, %24 ]
  ret i32 %37
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NaClDfaProcessCodeCopyInstruction(i8*, i8*, i32, i8* nocapture readonly) local_unnamed_addr #1 {
  %5 = ptrtoint i8* %1 to i64
  %6 = ptrtoint i8* %0 to i64
  %7 = sub i64 %5, %6
  %8 = icmp ult i64 %7, 18
  br i1 %8, label %10, label %9

9:                                                ; preds = %4
  tail call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.1, i64 0, i64 0), i32 274, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.2, i64 0, i64 0)) #6
  br label %10

10:                                               ; preds = %9, %4
  %11 = bitcast i8* %3 to i32 (i8*, i8*, i8)**
  %12 = load i32 (i8*, i8*, i8)*, i32 (i8*, i8*, i8)** %11, align 8
  %13 = getelementptr inbounds i8, i8* %3, i64 8
  %14 = bitcast i8* %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds i8, i8* %0, i64 %15
  %17 = and i32 %2, 100646912
  %18 = icmp eq i32 %17, 65536
  %19 = select i1 %18, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @kStubOutMem, i64 0, i64 0), i8* %0
  %20 = trunc i64 %7 to i8
  %21 = tail call i32 %12(i8* %16, i8* %19, i8 zeroext %20) #6
  ret i32 %21
}

declare void @NaClLog(i32, i8*, ...) local_unnamed_addr #2

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @NaClDfaCodeReplacementIsStubouted(i8* nocapture readonly, i64) local_unnamed_addr #3 {
  %3 = tail call i32 @bcmp(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @kStubOutMem, i64 0, i64 0), i8* %0, i64 %1)
  %4 = icmp eq i32 %3, 0
  %5 = zext i1 %4 to i32
  ret i32 %5
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @BundleValidationApplyRewrite(i8*, i8*, i32, i8* nocapture) #1 {
  %5 = and i32 %2, 100646912
  switch i32 %5, label %69 [
    i32 65536, label %6
    i32 67108864, label %12
  ]

6:                                                ; preds = %4
  %7 = getelementptr inbounds i8, i8* %3, i64 40
  %8 = bitcast i8* %7 to i32*
  store i32 1, i32* %8, align 8
  %9 = ptrtoint i8* %1 to i64
  %10 = ptrtoint i8* %0 to i64
  %11 = sub i64 %9, %10
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 -12, i64 %11, i1 false)
  br label %72

12:                                               ; preds = %4
  %13 = bitcast i8* %3 to i32*
  %14 = load i32, i32* %13, align 8
  %15 = and i32 %14, 1
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %69

17:                                               ; preds = %12
  %18 = ptrtoint i8* %1 to i64
  %19 = ptrtoint i8* %0 to i64
  %20 = sub i64 %18, %19
  %21 = icmp sgt i64 %20, 1
  br i1 %21, label %22, label %72

22:                                               ; preds = %17
  %23 = tail call i32 @bcmp(i8* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i64 0, i64 0), i64 2) #6
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %26

25:                                               ; preds = %22
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 -112, i64 %20, i1 false) #6
  br label %66

26:                                               ; preds = %22
  %27 = icmp sgt i64 %20, 2
  br i1 %27, label %28, label %72

28:                                               ; preds = %26
  %29 = load i8, i8* %0, align 1
  %30 = and i8 %29, -16
  %31 = icmp eq i8 %30, 64
  br i1 %31, label %32, label %51

32:                                               ; preds = %28
  %33 = getelementptr inbounds i8, i8* %0, i64 1
  %34 = load i8, i8* %33, align 1
  %35 = icmp eq i8 %34, 15
  br i1 %35, label %36, label %51

36:                                               ; preds = %32
  %37 = getelementptr inbounds i8, i8* %0, i64 2
  %38 = load i8, i8* %37, align 1
  switch i8 %38, label %72 [
    i8 -25, label %39
    i8 43, label %40
    i8 -61, label %41
    i8 24, label %50
  ]

39:                                               ; preds = %36
  store i8 127, i8* %37, align 1
  br label %66

40:                                               ; preds = %36
  store i8 41, i8* %37, align 1
  br label %66

41:                                               ; preds = %36
  %42 = and i32 %2, 8192
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %49, label %44

44:                                               ; preds = %41
  store i8 -119, i8* %33, align 1
  %45 = getelementptr inbounds i8, i8* %0, i64 3
  %46 = add nsw i64 %20, -3
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %37, i8* align 1 %45, i64 %46, i1 false) #6
  %47 = add nsw i64 %20, -1
  %48 = getelementptr inbounds i8, i8* %0, i64 %47
  store i8 -112, i8* %48, align 1
  br label %66

49:                                               ; preds = %41
  store i8 -119, i8* %37, align 1
  store i8 %29, i8* %33, align 1
  store i8 -112, i8* %0, align 1
  br label %66

50:                                               ; preds = %36
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 -112, i64 %20, i1 false) #6
  br label %66

51:                                               ; preds = %32, %28
  %52 = icmp sgt i64 %20, 3
  %53 = icmp eq i8 %29, 102
  %54 = and i1 %52, %53
  br i1 %54, label %55, label %72

55:                                               ; preds = %51
  %56 = getelementptr inbounds i8, i8* %0, i64 1
  %57 = load i8, i8* %56, align 1
  %58 = and i8 %57, -16
  %59 = icmp eq i8 %58, 64
  br i1 %59, label %60, label %72

60:                                               ; preds = %55
  %61 = getelementptr inbounds i8, i8* %0, i64 2
  %62 = tail call i32 @bcmp(i8* %61, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0), i64 2) #6
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %64, label %72

64:                                               ; preds = %60
  %65 = getelementptr inbounds i8, i8* %0, i64 3
  store i8 127, i8* %65, align 1
  br label %66

66:                                               ; preds = %25, %64, %50, %40, %39, %49, %44
  %67 = getelementptr inbounds i8, i8* %3, i64 40
  %68 = bitcast i8* %67 to i32*
  store i32 1, i32* %68, align 8
  br label %72

69:                                               ; preds = %4, %12
  %70 = icmp eq i32 %5, 32768
  %71 = zext i1 %70 to i32
  br label %72

72:                                               ; preds = %60, %55, %51, %36, %26, %17, %69, %66, %6
  %73 = phi i32 [ 1, %6 ], [ 1, %66 ], [ %71, %69 ], [ 0, %17 ], [ 0, %26 ], [ 0, %36 ], [ 0, %51 ], [ 0, %55 ], [ 0, %60 ]
  ret i32 %73
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i32 @BundleValidationCheckAfterRewrite(i8* nocapture readnone, i8* nocapture readnone, i32, i8* nocapture readnone) #0 {
  %5 = and i32 %2, 100646912
  %6 = icmp eq i32 %5, 32768
  %7 = zext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #5

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nofree nounwind readonly }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
