; ModuleID = '../../third_party/libjpeg_turbo/jddctmgr.c'
source_filename = "../../third_party/libjpeg_turbo/jddctmgr.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.jpeg_decompress_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32, %struct.jpeg_source_mgr*, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8**, i32, i32, i32, i32, i32, [64 x i32]*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], i32, %struct.jpeg_component_info*, i32, i32, [16 x i8], [16 x i8], [16 x i8], i32, i32, i8, i8, i8, i16, i16, i32, i8, i32, %struct.jpeg_marker_struct*, i32, i32, i32, i32, i8*, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, i32, %struct.jpeg_decomp_master*, %struct.jpeg_d_main_controller*, %struct.jpeg_d_coef_controller*, %struct.jpeg_d_post_controller*, %struct.jpeg_input_controller*, %struct.jpeg_marker_reader*, %struct.jpeg_entropy_decoder*, %struct.jpeg_inverse_dct*, %struct.jpeg_upsampler*, %struct.jpeg_color_deconverter*, %struct.jpeg_color_quantizer* }
%struct.jpeg_error_mgr = type { void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*)*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_common_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.jpeg_memory_mgr = type { i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct*, i32)*, {}*, i64, i64 }
%struct.jvirt_sarray_control = type opaque
%struct.jvirt_barray_control = type opaque
%struct.jpeg_progress_mgr = type { {}*, i64, i64, i32, i32 }
%struct.jpeg_source_mgr = type { i8*, i64, {}*, i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i64)*, i32 (%struct.jpeg_decompress_struct*, i32)*, {}* }
%struct.JQUANT_TBL = type { [64 x i16], i32 }
%struct.JHUFF_TBL = type { [17 x i8], [256 x i8], i32 }
%struct.jpeg_component_info = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.JQUANT_TBL*, i8* }
%struct.jpeg_marker_struct = type { %struct.jpeg_marker_struct*, i8, i32, i32, i8* }
%struct.jpeg_decomp_master = type { {}*, {}*, i32, i32, i32, [10 x i32], [10 x i32], i32, i32 }
%struct.jpeg_d_main_controller = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8**, i32*, i32)* }
%struct.jpeg_d_coef_controller = type { {}*, i32 (%struct.jpeg_decompress_struct*)*, {}*, i32 (%struct.jpeg_decompress_struct*, i8***)*, %struct.jvirt_barray_control** }
%struct.jpeg_d_post_controller = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)* }
%struct.jpeg_input_controller = type { i32 (%struct.jpeg_decompress_struct*)*, {}*, {}*, {}*, i32, i32 }
%struct.jpeg_marker_reader = type { {}*, i32 (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, i32, i32, i32, i32 }
%struct.jpeg_entropy_decoder = type { {}*, i32 (%struct.jpeg_decompress_struct*, [64 x i16]**)*, i32 }
%struct.jpeg_inverse_dct = type { {}*, [10 x void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32)*] }
%struct.jpeg_upsampler = type { {}*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)*, i32 }
%struct.jpeg_color_deconverter = type { {}*, void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)* }
%struct.jpeg_color_quantizer = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)*, {}*, {}* }
%struct.my_idct_controller = type { %struct.jpeg_inverse_dct, [10 x i32] }

@start_pass.aanscales = internal unnamed_addr constant [64 x i16] [i16 16384, i16 22725, i16 21407, i16 19266, i16 16384, i16 12873, i16 8867, i16 4520, i16 22725, i16 31521, i16 29692, i16 26722, i16 22725, i16 17855, i16 12299, i16 6270, i16 21407, i16 29692, i16 27969, i16 25172, i16 21407, i16 16819, i16 11585, i16 5906, i16 19266, i16 26722, i16 25172, i16 22654, i16 19266, i16 15137, i16 10426, i16 5315, i16 16384, i16 22725, i16 21407, i16 19266, i16 16384, i16 12873, i16 8867, i16 4520, i16 12873, i16 17855, i16 16819, i16 15137, i16 12873, i16 10114, i16 6967, i16 3552, i16 8867, i16 12299, i16 11585, i16 10426, i16 8867, i16 6967, i16 4799, i16 2446, i16 4520, i16 6270, i16 5906, i16 5315, i16 4520, i16 3552, i16 2446, i16 1247], align 16
@start_pass.aanscalefactor = internal unnamed_addr constant [8 x double] [double 1.000000e+00, double 0x3FF63150B14861EF, double 0x3FF4E7AE914D6FCA, double 0x3FF2D062EF6C11AA, double 1.000000e+00, double 0x3FE92469C0A7BF3B, double 0x3FE1517A7BC720BB, double 0x3FD1A855DE72AB5D], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @jinit_inverse_dct(%struct.jpeg_decompress_struct*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 1
  %3 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %2, align 8
  %4 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %3, i64 0, i32 0
  %5 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %4, align 8
  %6 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  %7 = tail call i8* %5(%struct.jpeg_common_struct* %6, i32 1, i64 128) #3
  %8 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 84
  %9 = bitcast %struct.jpeg_inverse_dct** %8 to i8**
  store i8* %7, i8** %9, align 8
  %10 = bitcast i8* %7 to void (%struct.jpeg_decompress_struct*)**
  store void (%struct.jpeg_decompress_struct*)* @start_pass, void (%struct.jpeg_decompress_struct*)** %10, align 8
  %11 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 9
  %12 = load i32, i32* %11, align 8
  %13 = icmp sgt i32 %12, 0
  br i1 %13, label %14, label %33

14:                                               ; preds = %1
  %15 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 44
  %16 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %15, align 8
  %17 = getelementptr inbounds i8, i8* %7, i64 88
  %18 = bitcast i8* %17 to [10 x i32]*
  br label %19

19:                                               ; preds = %14, %19
  %20 = phi i64 [ 0, %14 ], [ %28, %19 ]
  %21 = phi %struct.jpeg_component_info* [ %16, %14 ], [ %29, %19 ]
  %22 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %2, align 8
  %23 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %22, i64 0, i32 0
  %24 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %23, align 8
  %25 = tail call i8* %24(%struct.jpeg_common_struct* %6, i32 1, i64 256) #3
  %26 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %21, i64 0, i32 20
  store i8* %25, i8** %26, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %25, i8 0, i64 256, i1 false)
  %27 = getelementptr inbounds [10 x i32], [10 x i32]* %18, i64 0, i64 %20
  store i32 -1, i32* %27, align 4
  %28 = add nuw nsw i64 %20, 1
  %29 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %21, i64 1
  %30 = load i32, i32* %11, align 8
  %31 = sext i32 %30 to i64
  %32 = icmp slt i64 %28, %31
  br i1 %32, label %19, label %33

33:                                               ; preds = %19, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @start_pass(%struct.jpeg_decompress_struct*) #0 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 84
  %3 = bitcast %struct.jpeg_inverse_dct** %2 to %struct.my_idct_controller**
  %4 = load %struct.my_idct_controller*, %struct.my_idct_controller** %3, align 8
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 9
  %6 = load i32, i32* %5, align 8
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %8, label %271

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 44
  %10 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %9, align 8
  %11 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 17
  %12 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %13 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  br label %14

14:                                               ; preds = %8, %265
  %15 = phi i64 [ 0, %8 ], [ %266, %265 ]
  %16 = phi void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32)* [ null, %8 ], [ %72, %265 ]
  %17 = phi i32 [ 0, %8 ], [ %71, %265 ]
  %18 = phi %struct.jpeg_component_info* [ %10, %8 ], [ %267, %265 ]
  %19 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %18, i64 0, i32 9
  %20 = load i32, i32* %19, align 4
  switch i32 %20, label %61 [
    i32 1, label %70
    i32 2, label %21
    i32 3, label %25
    i32 4, label %26
    i32 5, label %30
    i32 6, label %31
    i32 7, label %32
    i32 8, label %33
    i32 9, label %53
    i32 10, label %54
    i32 11, label %55
    i32 12, label %56
    i32 13, label %57
    i32 14, label %58
    i32 15, label %59
    i32 16, label %60
  ]

21:                                               ; preds = %14
  %22 = tail call i32 @jsimd_can_idct_2x2() #3
  %23 = icmp eq i32 %22, 0
  %24 = select i1 %23, void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32)* @jpeg_idct_2x2, void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32)* @jsimd_idct_2x2
  br label %70

25:                                               ; preds = %14
  br label %70

26:                                               ; preds = %14
  %27 = tail call i32 @jsimd_can_idct_4x4() #3
  %28 = icmp eq i32 %27, 0
  %29 = select i1 %28, void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32)* @jpeg_idct_4x4, void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32)* @jsimd_idct_4x4
  br label %70

30:                                               ; preds = %14
  br label %70

31:                                               ; preds = %14
  br label %70

32:                                               ; preds = %14
  br label %70

33:                                               ; preds = %14
  %34 = load i32, i32* %11, align 8
  switch i32 %34, label %47 [
    i32 0, label %35
    i32 1, label %39
    i32 2, label %43
  ]

35:                                               ; preds = %33
  %36 = tail call i32 @jsimd_can_idct_islow() #3
  %37 = icmp eq i32 %36, 0
  %38 = select i1 %37, void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32)* @jpeg_idct_islow, void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32)* @jsimd_idct_islow
  br label %70

39:                                               ; preds = %33
  %40 = tail call i32 @jsimd_can_idct_ifast() #3
  %41 = icmp eq i32 %40, 0
  %42 = select i1 %41, void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32)* @jpeg_idct_ifast, void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32)* @jsimd_idct_ifast
  br label %70

43:                                               ; preds = %33
  %44 = tail call i32 @jsimd_can_idct_float() #3
  %45 = icmp eq i32 %44, 0
  %46 = select i1 %45, void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32)* @jpeg_idct_float, void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32)* @jsimd_idct_float
  br label %70

47:                                               ; preds = %33
  %48 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %12, align 8
  %49 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %48, i64 0, i32 5
  store i32 48, i32* %49, align 8
  %50 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %12, align 8
  %51 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %50, i64 0, i32 0
  %52 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %51, align 8
  tail call void %52(%struct.jpeg_common_struct* %13) #3
  br label %70

53:                                               ; preds = %14
  br label %70

54:                                               ; preds = %14
  br label %70

55:                                               ; preds = %14
  br label %70

56:                                               ; preds = %14
  br label %70

57:                                               ; preds = %14
  br label %70

58:                                               ; preds = %14
  br label %70

59:                                               ; preds = %14
  br label %70

60:                                               ; preds = %14
  br label %70

61:                                               ; preds = %14
  %62 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %12, align 8
  %63 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %62, i64 0, i32 5
  store i32 7, i32* %63, align 8
  %64 = load i32, i32* %19, align 4
  %65 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %12, align 8
  %66 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %65, i64 0, i32 6, i32 0, i64 0
  store i32 %64, i32* %66, align 4
  %67 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %12, align 8
  %68 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %67, i64 0, i32 0
  %69 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %68, align 8
  tail call void %69(%struct.jpeg_common_struct* %13) #3
  br label %70

70:                                               ; preds = %14, %35, %39, %43, %47, %61, %60, %59, %58, %57, %56, %55, %54, %53, %32, %31, %30, %26, %25, %21
  %71 = phi i32 [ %17, %61 ], [ 0, %60 ], [ 0, %59 ], [ 0, %58 ], [ 0, %57 ], [ 0, %56 ], [ 0, %55 ], [ 0, %54 ], [ 0, %53 ], [ %17, %47 ], [ 2, %43 ], [ 1, %39 ], [ 0, %35 ], [ 0, %32 ], [ 0, %31 ], [ 0, %30 ], [ 0, %26 ], [ 0, %25 ], [ 0, %21 ], [ 0, %14 ]
  %72 = phi void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32)* [ %16, %61 ], [ @jpeg_idct_16x16, %60 ], [ @jpeg_idct_15x15, %59 ], [ @jpeg_idct_14x14, %58 ], [ @jpeg_idct_13x13, %57 ], [ @jpeg_idct_12x12, %56 ], [ @jpeg_idct_11x11, %55 ], [ @jpeg_idct_10x10, %54 ], [ @jpeg_idct_9x9, %53 ], [ %16, %47 ], [ %46, %43 ], [ %42, %39 ], [ %38, %35 ], [ @jpeg_idct_7x7, %32 ], [ @jpeg_idct_6x6, %31 ], [ @jpeg_idct_5x5, %30 ], [ %29, %26 ], [ @jpeg_idct_3x3, %25 ], [ %24, %21 ], [ @jpeg_idct_1x1, %14 ]
  %73 = getelementptr inbounds %struct.my_idct_controller, %struct.my_idct_controller* %4, i64 0, i32 0, i32 1, i64 %15
  store void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32)* %72, void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32)** %73, align 8
  %74 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %18, i64 0, i32 12
  %75 = load i32, i32* %74, align 8
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %265, label %77

77:                                               ; preds = %70
  %78 = getelementptr inbounds %struct.my_idct_controller, %struct.my_idct_controller* %4, i64 0, i32 1, i64 %15
  %79 = load i32, i32* %78, align 4
  %80 = icmp eq i32 %79, %71
  br i1 %80, label %265, label %81

81:                                               ; preds = %77
  %82 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %18, i64 0, i32 19
  %83 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %82, align 8
  %84 = icmp eq %struct.JQUANT_TBL* %83, null
  br i1 %84, label %265, label %85

85:                                               ; preds = %81
  store i32 %71, i32* %78, align 4
  switch i32 %71, label %259 [
    i32 0, label %86
    i32 1, label %155
    i32 2, label %186
  ]

86:                                               ; preds = %85
  %87 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %18, i64 0, i32 20
  %88 = bitcast i8** %87 to i16**
  %89 = load i16*, i16** %88, align 8
  %90 = getelementptr i16, i16* %89, i64 64
  %91 = getelementptr %struct.JQUANT_TBL, %struct.JQUANT_TBL* %83, i64 0, i32 1
  %92 = bitcast i32* %91 to i16*
  %93 = icmp ult i16* %89, %92
  %94 = bitcast i16* %90 to %struct.JQUANT_TBL*
  %95 = icmp ult %struct.JQUANT_TBL* %83, %94
  %96 = and i1 %93, %95
  br i1 %96, label %136, label %97

97:                                               ; preds = %86
  %98 = bitcast %struct.JQUANT_TBL* %83 to <8 x i16>*
  %99 = load <8 x i16>, <8 x i16>* %98, align 2, !alias.scope !2
  %100 = bitcast i16* %89 to <8 x i16>*
  store <8 x i16> %99, <8 x i16>* %100, align 2, !alias.scope !5, !noalias !2
  %101 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %83, i64 0, i32 0, i64 8
  %102 = bitcast i16* %101 to <8 x i16>*
  %103 = load <8 x i16>, <8 x i16>* %102, align 2, !alias.scope !2
  %104 = getelementptr inbounds i16, i16* %89, i64 8
  %105 = bitcast i16* %104 to <8 x i16>*
  store <8 x i16> %103, <8 x i16>* %105, align 2, !alias.scope !5, !noalias !2
  %106 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %83, i64 0, i32 0, i64 16
  %107 = bitcast i16* %106 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 2, !alias.scope !2
  %109 = getelementptr inbounds i16, i16* %89, i64 16
  %110 = bitcast i16* %109 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %110, align 2, !alias.scope !5, !noalias !2
  %111 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %83, i64 0, i32 0, i64 24
  %112 = bitcast i16* %111 to <8 x i16>*
  %113 = load <8 x i16>, <8 x i16>* %112, align 2, !alias.scope !2
  %114 = getelementptr inbounds i16, i16* %89, i64 24
  %115 = bitcast i16* %114 to <8 x i16>*
  store <8 x i16> %113, <8 x i16>* %115, align 2, !alias.scope !5, !noalias !2
  %116 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %83, i64 0, i32 0, i64 32
  %117 = bitcast i16* %116 to <8 x i16>*
  %118 = load <8 x i16>, <8 x i16>* %117, align 2, !alias.scope !2
  %119 = getelementptr inbounds i16, i16* %89, i64 32
  %120 = bitcast i16* %119 to <8 x i16>*
  store <8 x i16> %118, <8 x i16>* %120, align 2, !alias.scope !5, !noalias !2
  %121 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %83, i64 0, i32 0, i64 40
  %122 = bitcast i16* %121 to <8 x i16>*
  %123 = load <8 x i16>, <8 x i16>* %122, align 2, !alias.scope !2
  %124 = getelementptr inbounds i16, i16* %89, i64 40
  %125 = bitcast i16* %124 to <8 x i16>*
  store <8 x i16> %123, <8 x i16>* %125, align 2, !alias.scope !5, !noalias !2
  %126 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %83, i64 0, i32 0, i64 48
  %127 = bitcast i16* %126 to <8 x i16>*
  %128 = load <8 x i16>, <8 x i16>* %127, align 2, !alias.scope !2
  %129 = getelementptr inbounds i16, i16* %89, i64 48
  %130 = bitcast i16* %129 to <8 x i16>*
  store <8 x i16> %128, <8 x i16>* %130, align 2, !alias.scope !5, !noalias !2
  %131 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %83, i64 0, i32 0, i64 56
  %132 = bitcast i16* %131 to <8 x i16>*
  %133 = load <8 x i16>, <8 x i16>* %132, align 2, !alias.scope !2
  %134 = getelementptr inbounds i16, i16* %89, i64 56
  %135 = bitcast i16* %134 to <8 x i16>*
  store <8 x i16> %133, <8 x i16>* %135, align 2, !alias.scope !5, !noalias !2
  br label %265

136:                                              ; preds = %86, %136
  %137 = phi i64 [ %153, %136 ], [ 0, %86 ]
  %138 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %83, i64 0, i32 0, i64 %137
  %139 = load i16, i16* %138, align 2
  %140 = getelementptr inbounds i16, i16* %89, i64 %137
  store i16 %139, i16* %140, align 2
  %141 = or i64 %137, 1
  %142 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %83, i64 0, i32 0, i64 %141
  %143 = load i16, i16* %142, align 2
  %144 = getelementptr inbounds i16, i16* %89, i64 %141
  store i16 %143, i16* %144, align 2
  %145 = or i64 %137, 2
  %146 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %83, i64 0, i32 0, i64 %145
  %147 = load i16, i16* %146, align 2
  %148 = getelementptr inbounds i16, i16* %89, i64 %145
  store i16 %147, i16* %148, align 2
  %149 = or i64 %137, 3
  %150 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %83, i64 0, i32 0, i64 %149
  %151 = load i16, i16* %150, align 2
  %152 = getelementptr inbounds i16, i16* %89, i64 %149
  store i16 %151, i16* %152, align 2
  %153 = add nuw nsw i64 %137, 4
  %154 = icmp eq i64 %153, 64
  br i1 %154, label %265, label %136, !llvm.loop !7

155:                                              ; preds = %85
  %156 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %18, i64 0, i32 20
  %157 = bitcast i8** %156 to i16**
  %158 = load i16*, i16** %157, align 8
  br label %159

159:                                              ; preds = %159, %155
  %160 = phi i64 [ 0, %155 ], [ %184, %159 ]
  %161 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %83, i64 0, i32 0, i64 %160
  %162 = load i16, i16* %161, align 2
  %163 = zext i16 %162 to i64
  %164 = getelementptr inbounds [64 x i16], [64 x i16]* @start_pass.aanscales, i64 0, i64 %160
  %165 = load i16, i16* %164, align 4
  %166 = sext i16 %165 to i64
  %167 = mul nsw i64 %166, %163
  %168 = add nsw i64 %167, 2048
  %169 = lshr i64 %168, 12
  %170 = trunc i64 %169 to i16
  %171 = getelementptr inbounds i16, i16* %158, i64 %160
  store i16 %170, i16* %171, align 2
  %172 = or i64 %160, 1
  %173 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %83, i64 0, i32 0, i64 %172
  %174 = load i16, i16* %173, align 2
  %175 = zext i16 %174 to i64
  %176 = getelementptr inbounds [64 x i16], [64 x i16]* @start_pass.aanscales, i64 0, i64 %172
  %177 = load i16, i16* %176, align 2
  %178 = sext i16 %177 to i64
  %179 = mul nsw i64 %178, %175
  %180 = add nsw i64 %179, 2048
  %181 = lshr i64 %180, 12
  %182 = trunc i64 %181 to i16
  %183 = getelementptr inbounds i16, i16* %158, i64 %172
  store i16 %182, i16* %183, align 2
  %184 = add nuw nsw i64 %160, 2
  %185 = icmp eq i64 %184, 64
  br i1 %185, label %265, label %159

186:                                              ; preds = %85
  %187 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %18, i64 0, i32 20
  %188 = bitcast i8** %187 to float**
  %189 = load float*, float** %188, align 8
  br label %190

190:                                              ; preds = %190, %186
  %191 = phi i64 [ 0, %186 ], [ %257, %190 ]
  %192 = phi i64 [ 0, %186 ], [ %256, %190 ]
  %193 = getelementptr inbounds [8 x double], [8 x double]* @start_pass.aanscalefactor, i64 0, i64 %192
  %194 = load double, double* %193, align 8
  %195 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %83, i64 0, i32 0, i64 %191
  %196 = load i16, i16* %195, align 2
  %197 = uitofp i16 %196 to double
  %198 = fmul double %194, %197
  %199 = fptrunc double %198 to float
  %200 = getelementptr inbounds float, float* %189, i64 %191
  store float %199, float* %200, align 4
  %201 = or i64 %191, 1
  %202 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %83, i64 0, i32 0, i64 %201
  %203 = load i16, i16* %202, align 2
  %204 = uitofp i16 %203 to double
  %205 = fmul double %194, %204
  %206 = fmul double %205, 0x3FF63150B14861EF
  %207 = fptrunc double %206 to float
  %208 = getelementptr inbounds float, float* %189, i64 %201
  store float %207, float* %208, align 4
  %209 = add nuw nsw i64 %201, 1
  %210 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %83, i64 0, i32 0, i64 %209
  %211 = load i16, i16* %210, align 2
  %212 = uitofp i16 %211 to double
  %213 = fmul double %194, %212
  %214 = fmul double %213, 0x3FF4E7AE914D6FCA
  %215 = fptrunc double %214 to float
  %216 = getelementptr inbounds float, float* %189, i64 %209
  store float %215, float* %216, align 4
  %217 = or i64 %191, 3
  %218 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %83, i64 0, i32 0, i64 %217
  %219 = load i16, i16* %218, align 2
  %220 = uitofp i16 %219 to double
  %221 = fmul double %194, %220
  %222 = fmul double %221, 0x3FF2D062EF6C11AA
  %223 = fptrunc double %222 to float
  %224 = getelementptr inbounds float, float* %189, i64 %217
  store float %223, float* %224, align 4
  %225 = add nuw nsw i64 %217, 1
  %226 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %83, i64 0, i32 0, i64 %225
  %227 = load i16, i16* %226, align 2
  %228 = uitofp i16 %227 to double
  %229 = fmul double %194, %228
  %230 = fptrunc double %229 to float
  %231 = getelementptr inbounds float, float* %189, i64 %225
  store float %230, float* %231, align 4
  %232 = add nuw nsw i64 %217, 2
  %233 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %83, i64 0, i32 0, i64 %232
  %234 = load i16, i16* %233, align 2
  %235 = uitofp i16 %234 to double
  %236 = fmul double %194, %235
  %237 = fmul double %236, 0x3FE92469C0A7BF3B
  %238 = fptrunc double %237 to float
  %239 = getelementptr inbounds float, float* %189, i64 %232
  store float %238, float* %239, align 4
  %240 = add nuw nsw i64 %217, 3
  %241 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %83, i64 0, i32 0, i64 %240
  %242 = load i16, i16* %241, align 2
  %243 = uitofp i16 %242 to double
  %244 = fmul double %194, %243
  %245 = fmul double %244, 0x3FE1517A7BC720BB
  %246 = fptrunc double %245 to float
  %247 = getelementptr inbounds float, float* %189, i64 %240
  store float %246, float* %247, align 4
  %248 = or i64 %191, 7
  %249 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %83, i64 0, i32 0, i64 %248
  %250 = load i16, i16* %249, align 2
  %251 = uitofp i16 %250 to double
  %252 = fmul double %194, %251
  %253 = fmul double %252, 0x3FD1A855DE72AB5D
  %254 = fptrunc double %253 to float
  %255 = getelementptr inbounds float, float* %189, i64 %248
  store float %254, float* %255, align 4
  %256 = add nuw nsw i64 %192, 1
  %257 = add nuw nsw i64 %191, 8
  %258 = icmp eq i64 %256, 8
  br i1 %258, label %265, label %190

259:                                              ; preds = %85
  %260 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %12, align 8
  %261 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %260, i64 0, i32 5
  store i32 48, i32* %261, align 8
  %262 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %12, align 8
  %263 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %262, i64 0, i32 0
  %264 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %263, align 8
  tail call void %264(%struct.jpeg_common_struct* %13) #3
  br label %265

265:                                              ; preds = %190, %159, %136, %97, %70, %259, %81, %77
  %266 = add nuw nsw i64 %15, 1
  %267 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %18, i64 1
  %268 = load i32, i32* %5, align 8
  %269 = sext i32 %268 to i64
  %270 = icmp slt i64 %266, %269
  br i1 %270, label %14, label %271

271:                                              ; preds = %265, %1
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @jpeg_idct_1x1(%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32) #2

declare i32 @jsimd_can_idct_2x2() local_unnamed_addr #2

declare void @jsimd_idct_2x2(%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32) #2

declare void @jpeg_idct_2x2(%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32) #2

declare void @jpeg_idct_3x3(%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32) #2

declare i32 @jsimd_can_idct_4x4() local_unnamed_addr #2

declare void @jsimd_idct_4x4(%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32) #2

declare void @jpeg_idct_4x4(%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32) #2

declare void @jpeg_idct_5x5(%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32) #2

declare void @jpeg_idct_6x6(%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32) #2

declare void @jpeg_idct_7x7(%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32) #2

declare i32 @jsimd_can_idct_islow() local_unnamed_addr #2

declare void @jsimd_idct_islow(%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32) #2

declare void @jpeg_idct_islow(%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32) #2

declare i32 @jsimd_can_idct_ifast() local_unnamed_addr #2

declare void @jsimd_idct_ifast(%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32) #2

declare void @jpeg_idct_ifast(%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32) #2

declare i32 @jsimd_can_idct_float() local_unnamed_addr #2

declare void @jsimd_idct_float(%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32) #2

declare void @jpeg_idct_float(%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32) #2

declare void @jpeg_idct_9x9(%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32) #2

declare void @jpeg_idct_10x10(%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32) #2

declare void @jpeg_idct_11x11(%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32) #2

declare void @jpeg_idct_12x12(%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32) #2

declare void @jpeg_idct_13x13(%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32) #2

declare void @jpeg_idct_14x14(%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32) #2

declare void @jpeg_idct_15x15(%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32) #2

declare void @jpeg_idct_16x16(%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
