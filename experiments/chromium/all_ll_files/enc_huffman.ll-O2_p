; ModuleID = '../../third_party/libjxl/src/lib/jxl/enc_huffman.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/enc_huffman.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.jxl::BitWriter" = type { i64, %"class.jxl::PaddedBytes", %"class.jxl::BitWriter::Allotment"* }
%"class.jxl::PaddedBytes" = type { i64, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.jxl::BitWriter::Allotment" = type { i64, i64, i64, i8, %"class.jxl::BitWriter::Allotment"* }

@_ZZN3jxl12_GLOBAL__N_138StoreHuffmanTreeOfHuffmanTreeToBitMaskEiPKhPNS_9BitWriterEE13kStorageOrder = internal unnamed_addr constant [18 x i8] c"\01\02\03\04\00\05\11\06\10\07\08\09\0A\0B\0C\0D\0E\0F", align 16
@_ZZN3jxl12_GLOBAL__N_138StoreHuffmanTreeOfHuffmanTreeToBitMaskEiPKhPNS_9BitWriterEE35kHuffmanBitLengthHuffmanCodeSymbols = internal unnamed_addr constant [6 x i8] c"\00\07\03\02\01\0F", align 1
@_ZZN3jxl12_GLOBAL__N_138StoreHuffmanTreeOfHuffmanTreeToBitMaskEiPKhPNS_9BitWriterEE38kHuffmanBitLengthHuffmanCodeBitLengths = internal unnamed_addr constant [6 x i8] c"\02\04\03\02\02\04", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl24BuildAndStoreHuffmanTreeEPKjmPhPtPNS_9BitWriterE(i32*, i64, i8*, i16*, %"struct.jxl::BitWriter"*) local_unnamed_addr #0 {
  %6 = alloca i64, align 8
  %7 = alloca [18 x i32], align 16
  %8 = alloca [18 x i8], align 16
  %9 = alloca [18 x i16], align 16
  %10 = alloca [4 x i64], align 16
  %11 = bitcast [4 x i64]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 0, i64 32, i1 false)
  %12 = icmp eq i64 %1, 0
  br i1 %12, label %35, label %13

13:                                               ; preds = %5, %27
  %14 = phi i64 [ %29, %27 ], [ 0, %5 ]
  %15 = phi i64 [ %28, %27 ], [ 0, %5 ]
  %16 = getelementptr inbounds i32, i32* %0, i64 %14
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %27, label %19

19:                                               ; preds = %13
  %20 = icmp ult i64 %15, 4
  br i1 %20, label %21, label %23

21:                                               ; preds = %19
  %22 = getelementptr inbounds [4 x i64], [4 x i64]* %10, i64 0, i64 %15
  store i64 %14, i64* %22, align 8
  br label %25

23:                                               ; preds = %19
  %24 = icmp eq i64 %15, 4
  br i1 %24, label %25, label %31

25:                                               ; preds = %23, %21
  %26 = add nuw nsw i64 %15, 1
  br label %27

27:                                               ; preds = %13, %25
  %28 = phi i64 [ %26, %25 ], [ %15, %13 ]
  %29 = add nuw i64 %14, 1
  %30 = icmp eq i64 %29, %1
  br i1 %30, label %31, label %13

31:                                               ; preds = %23, %27
  %32 = phi i64 [ %28, %27 ], [ %15, %23 ]
  %33 = add i64 %1, -1
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %40, label %35

35:                                               ; preds = %5, %31
  %36 = phi i64 [ %33, %31 ], [ -1, %5 ]
  %37 = phi i64 [ %32, %31 ], [ 0, %5 ]
  %38 = call i64 @llvm.ctlz.i64(i64 %36, i1 true), !range !2
  %39 = sub nuw nsw i64 64, %38
  br label %40

40:                                               ; preds = %35, %31
  %41 = phi i64 [ %32, %31 ], [ %37, %35 ]
  %42 = phi i64 [ 0, %31 ], [ %39, %35 ]
  %43 = icmp ult i64 %41, 2
  br i1 %43, label %44, label %47

44:                                               ; preds = %40
  tail call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %4, i64 4, i64 1) #6
  %45 = getelementptr inbounds [4 x i64], [4 x i64]* %10, i64 0, i64 0
  %46 = load i64, i64* %45, align 16
  tail call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %4, i64 %42, i64 %46) #6
  br label %414

47:                                               ; preds = %40
  tail call void @_ZN3jxl17CreateHuffmanTreeEPKjmiPh(i32* %0, i64 %1, i32 15, i8* %2) #6
  tail call void @_ZN3jxl25ConvertBitDepthsToSymbolsEPKhmPt(i8* %2, i64 %1, i16* %3) #6
  %48 = icmp ult i64 %41, 5
  br i1 %48, label %49, label %123

49:                                               ; preds = %47
  tail call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %4, i64 2, i64 1) #6
  %50 = add nsw i64 %41, -1
  tail call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %4, i64 2, i64 %50) #6
  %51 = add i64 %41, -2
  br label %57

52:                                               ; preds = %80, %416, %57
  %53 = icmp eq i64 %59, %41
  br i1 %53, label %54, label %57

54:                                               ; preds = %52
  %55 = getelementptr inbounds [4 x i64], [4 x i64]* %10, i64 0, i64 0
  %56 = icmp eq i64 %41, 2
  br i1 %56, label %105, label %109

57:                                               ; preds = %49, %52
  %58 = phi i64 [ %59, %52 ], [ 0, %49 ]
  %59 = add nuw i64 %58, 1
  %60 = icmp ult i64 %59, %41
  br i1 %60, label %61, label %52

61:                                               ; preds = %57
  %62 = xor i64 %58, 1
  %63 = add i64 %41, %62
  %64 = getelementptr inbounds [4 x i64], [4 x i64]* %10, i64 0, i64 %58
  %65 = load i64, i64* %64, align 8
  %66 = and i64 %63, 1
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %80, label %68

68:                                               ; preds = %61
  %69 = getelementptr inbounds [4 x i64], [4 x i64]* %10, i64 0, i64 %59
  %70 = load i64, i64* %69, align 8
  %71 = getelementptr inbounds i8, i8* %2, i64 %70
  %72 = load i8, i8* %71, align 1
  %73 = getelementptr inbounds i8, i8* %2, i64 %65
  %74 = load i8, i8* %73, align 1
  %75 = icmp ult i8 %72, %74
  br i1 %75, label %76, label %77

76:                                               ; preds = %68
  store i64 %65, i64* %69, align 8
  store i64 %70, i64* %64, align 8
  br label %77

77:                                               ; preds = %76, %68
  %78 = phi i64 [ %65, %68 ], [ %70, %76 ]
  %79 = add nuw i64 %58, 2
  br label %80

80:                                               ; preds = %77, %61
  %81 = phi i64 [ %78, %77 ], [ %65, %61 ]
  %82 = phi i64 [ %79, %77 ], [ %59, %61 ]
  %83 = icmp eq i64 %51, %58
  br i1 %83, label %52, label %84

84:                                               ; preds = %80, %416
  %85 = phi i64 [ %417, %416 ], [ %81, %80 ]
  %86 = phi i64 [ %418, %416 ], [ %82, %80 ]
  %87 = getelementptr inbounds [4 x i64], [4 x i64]* %10, i64 0, i64 %86
  %88 = load i64, i64* %87, align 8
  %89 = getelementptr inbounds i8, i8* %2, i64 %88
  %90 = load i8, i8* %89, align 1
  %91 = getelementptr inbounds i8, i8* %2, i64 %85
  %92 = load i8, i8* %91, align 1
  %93 = icmp ult i8 %90, %92
  br i1 %93, label %94, label %95

94:                                               ; preds = %84
  store i64 %85, i64* %87, align 8
  store i64 %88, i64* %64, align 8
  br label %95

95:                                               ; preds = %94, %84
  %96 = phi i64 [ %85, %84 ], [ %88, %94 ]
  %97 = add nuw i64 %86, 1
  %98 = getelementptr inbounds [4 x i64], [4 x i64]* %10, i64 0, i64 %97
  %99 = load i64, i64* %98, align 8
  %100 = getelementptr inbounds i8, i8* %2, i64 %99
  %101 = load i8, i8* %100, align 1
  %102 = getelementptr inbounds i8, i8* %2, i64 %96
  %103 = load i8, i8* %102, align 1
  %104 = icmp ult i8 %101, %103
  br i1 %104, label %415, label %416

105:                                              ; preds = %54
  %106 = load i64, i64* %55, align 16
  tail call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %4, i64 %42, i64 %106) #6
  %107 = getelementptr inbounds [4 x i64], [4 x i64]* %10, i64 0, i64 1
  %108 = load i64, i64* %107, align 8
  tail call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %4, i64 %42, i64 %108) #6
  br label %414

109:                                              ; preds = %54
  %110 = icmp eq i64 %41, 3
  %111 = load i64, i64* %55, align 16
  tail call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %4, i64 %42, i64 %111) #6
  %112 = getelementptr inbounds [4 x i64], [4 x i64]* %10, i64 0, i64 1
  %113 = load i64, i64* %112, align 8
  tail call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %4, i64 %42, i64 %113) #6
  %114 = getelementptr inbounds [4 x i64], [4 x i64]* %10, i64 0, i64 2
  %115 = load i64, i64* %114, align 16
  tail call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %4, i64 %42, i64 %115) #6
  br i1 %110, label %414, label %116

116:                                              ; preds = %109
  %117 = getelementptr inbounds [4 x i64], [4 x i64]* %10, i64 0, i64 3
  %118 = load i64, i64* %117, align 8
  tail call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %4, i64 %42, i64 %118) #6
  %119 = getelementptr inbounds i8, i8* %2, i64 %111
  %120 = load i8, i8* %119, align 1
  %121 = icmp eq i8 %120, 1
  %122 = zext i1 %121 to i64
  tail call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %4, i64 1, i64 %122) #6
  br label %414

123:                                              ; preds = %47
  %124 = shl i64 %1, 1
  %125 = tail call i8* @_Znam(i64 %124) #7
  %126 = getelementptr inbounds i8, i8* %125, i64 %1
  %127 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %127) #6
  store i64 0, i64* %6, align 8
  call void @_ZN3jxl16WriteHuffmanTreeEPKhmPmPhS3_(i8* %2, i64 %1, i64* nonnull %6, i8* nonnull %125, i8* %126) #6
  %128 = bitcast [18 x i32]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %128) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %128, i8 0, i64 72, i1 false) #6
  %129 = load i64, i64* %6, align 8
  %130 = icmp eq i64 %129, 0
  br i1 %130, label %137, label %131

131:                                              ; preds = %123
  %132 = add i64 %129, -1
  %133 = and i64 %129, 3
  %134 = icmp ult i64 %132, 3
  br i1 %134, label %172, label %135

135:                                              ; preds = %131
  %136 = sub i64 %129, %133
  br label %139

137:                                              ; preds = %123
  %138 = getelementptr inbounds [18 x i32], [18 x i32]* %7, i64 0, i64 0
  br label %281

139:                                              ; preds = %139, %135
  %140 = phi i64 [ 0, %135 ], [ %169, %139 ]
  %141 = phi i64 [ %136, %135 ], [ %170, %139 ]
  %142 = getelementptr inbounds i8, i8* %125, i64 %140
  %143 = load i8, i8* %142, align 1
  %144 = zext i8 %143 to i64
  %145 = getelementptr inbounds [18 x i32], [18 x i32]* %7, i64 0, i64 %144
  %146 = load i32, i32* %145, align 4
  %147 = add i32 %146, 1
  store i32 %147, i32* %145, align 4
  %148 = or i64 %140, 1
  %149 = getelementptr inbounds i8, i8* %125, i64 %148
  %150 = load i8, i8* %149, align 1
  %151 = zext i8 %150 to i64
  %152 = getelementptr inbounds [18 x i32], [18 x i32]* %7, i64 0, i64 %151
  %153 = load i32, i32* %152, align 4
  %154 = add i32 %153, 1
  store i32 %154, i32* %152, align 4
  %155 = or i64 %140, 2
  %156 = getelementptr inbounds i8, i8* %125, i64 %155
  %157 = load i8, i8* %156, align 1
  %158 = zext i8 %157 to i64
  %159 = getelementptr inbounds [18 x i32], [18 x i32]* %7, i64 0, i64 %158
  %160 = load i32, i32* %159, align 4
  %161 = add i32 %160, 1
  store i32 %161, i32* %159, align 4
  %162 = or i64 %140, 3
  %163 = getelementptr inbounds i8, i8* %125, i64 %162
  %164 = load i8, i8* %163, align 1
  %165 = zext i8 %164 to i64
  %166 = getelementptr inbounds [18 x i32], [18 x i32]* %7, i64 0, i64 %165
  %167 = load i32, i32* %166, align 4
  %168 = add i32 %167, 1
  store i32 %168, i32* %166, align 4
  %169 = add nuw i64 %140, 4
  %170 = add i64 %141, -4
  %171 = icmp eq i64 %170, 0
  br i1 %171, label %172, label %139

172:                                              ; preds = %139, %131
  %173 = phi i64 [ 0, %131 ], [ %169, %139 ]
  %174 = icmp eq i64 %133, 0
  br i1 %174, label %187, label %175

175:                                              ; preds = %172, %175
  %176 = phi i64 [ %184, %175 ], [ %173, %172 ]
  %177 = phi i64 [ %185, %175 ], [ %133, %172 ]
  %178 = getelementptr inbounds i8, i8* %125, i64 %176
  %179 = load i8, i8* %178, align 1
  %180 = zext i8 %179 to i64
  %181 = getelementptr inbounds [18 x i32], [18 x i32]* %7, i64 0, i64 %180
  %182 = load i32, i32* %181, align 4
  %183 = add i32 %182, 1
  store i32 %183, i32* %181, align 4
  %184 = add nuw i64 %176, 1
  %185 = add i64 %177, -1
  %186 = icmp eq i64 %185, 0
  br i1 %186, label %187, label %175, !llvm.loop !3

187:                                              ; preds = %175, %172
  %188 = getelementptr inbounds [18 x i32], [18 x i32]* %7, i64 0, i64 0
  %189 = load i32, i32* %188, align 16
  %190 = icmp ne i32 %189, 0
  %191 = getelementptr inbounds [18 x i32], [18 x i32]* %7, i64 0, i64 1
  %192 = load i32, i32* %191, align 4
  %193 = icmp eq i32 %192, 0
  %194 = xor i1 %190, true
  %195 = or i1 %193, %194
  %196 = xor i1 %193, true
  %197 = or i1 %190, %196
  %198 = zext i1 %197 to i32
  %199 = xor i1 %193, true
  %200 = zext i1 %199 to i32
  br i1 %195, label %281, label %201

201:                                              ; preds = %187, %288, %410, %408, %400, %392, %384, %376, %368, %360, %352, %344, %336, %328, %320, %312, %304, %296
  %202 = phi i32* [ %282, %288 ], [ %282, %296 ], [ %282, %304 ], [ %282, %312 ], [ %282, %320 ], [ %282, %328 ], [ %282, %336 ], [ %282, %344 ], [ %282, %352 ], [ %282, %360 ], [ %282, %368 ], [ %282, %376 ], [ %282, %384 ], [ %282, %392 ], [ %282, %400 ], [ %282, %408 ], [ %282, %410 ], [ %188, %187 ]
  %203 = phi i32 [ %284, %288 ], [ %292, %296 ], [ %300, %304 ], [ %308, %312 ], [ %316, %320 ], [ %324, %328 ], [ %332, %336 ], [ %340, %344 ], [ %348, %352 ], [ %356, %360 ], [ %364, %368 ], [ %372, %376 ], [ %380, %384 ], [ %388, %392 ], [ %396, %400 ], [ %404, %408 ], [ %412, %410 ], [ 0, %187 ]
  %204 = phi i32 [ 2, %288 ], [ 2, %296 ], [ 2, %304 ], [ 2, %312 ], [ 2, %320 ], [ 2, %328 ], [ 2, %336 ], [ 2, %344 ], [ 2, %352 ], [ 2, %360 ], [ 2, %368 ], [ 2, %376 ], [ 2, %384 ], [ 2, %392 ], [ 2, %400 ], [ 2, %408 ], [ %411, %410 ], [ 2, %187 ]
  %205 = getelementptr inbounds [18 x i8], [18 x i8]* %8, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 18, i8* nonnull %205) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %205, i8 0, i64 18, i1 false) #6
  %206 = bitcast [18 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %206) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %206, i8 0, i64 36, i1 false) #6
  call void @_ZN3jxl17CreateHuffmanTreeEPKjmiPh(i32* nonnull %202, i64 18, i32 5, i8* nonnull %205) #6
  %207 = getelementptr inbounds [18 x i16], [18 x i16]* %9, i64 0, i64 0
  call void @_ZN3jxl25ConvertBitDepthsToSymbolsEPKhmPt(i8* nonnull %205, i64 18, i16* nonnull %207) #6
  %208 = icmp sgt i32 %204, 1
  br i1 %208, label %209, label %220

209:                                              ; preds = %201, %212
  %210 = phi i64 [ %213, %212 ], [ 18, %201 ]
  %211 = icmp eq i64 %210, 0
  br i1 %211, label %220, label %212

212:                                              ; preds = %209
  %213 = add nsw i64 %210, -1
  %214 = getelementptr inbounds [18 x i8], [18 x i8]* @_ZZN3jxl12_GLOBAL__N_138StoreHuffmanTreeOfHuffmanTreeToBitMaskEiPKhPNS_9BitWriterEE13kStorageOrder, i64 0, i64 %213
  %215 = load i8, i8* %214, align 1
  %216 = zext i8 %215 to i64
  %217 = getelementptr inbounds [18 x i8], [18 x i8]* %8, i64 0, i64 %216
  %218 = load i8, i8* %217, align 1
  %219 = icmp eq i8 %218, 0
  br i1 %219, label %209, label %220

220:                                              ; preds = %212, %209, %201
  %221 = phi i64 [ 18, %201 ], [ 0, %209 ], [ %210, %212 ]
  %222 = getelementptr inbounds [18 x i8], [18 x i8]* %8, i64 0, i64 1
  %223 = load i8, i8* %222, align 1
  %224 = icmp eq i8 %223, 0
  br i1 %224, label %225, label %234

225:                                              ; preds = %220
  %226 = getelementptr inbounds [18 x i8], [18 x i8]* %8, i64 0, i64 2
  %227 = load i8, i8* %226, align 2
  %228 = icmp eq i8 %227, 0
  br i1 %228, label %229, label %234

229:                                              ; preds = %225
  %230 = getelementptr inbounds [18 x i8], [18 x i8]* %8, i64 0, i64 3
  %231 = load i8, i8* %230, align 1
  %232 = icmp eq i8 %231, 0
  %233 = select i1 %232, i64 3, i64 2
  br label %234

234:                                              ; preds = %229, %225, %220
  %235 = phi i64 [ %233, %229 ], [ 0, %225 ], [ 0, %220 ]
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %4, i64 2, i64 %235) #6
  %236 = icmp ult i64 %235, %221
  br i1 %236, label %237, label %253

237:                                              ; preds = %234, %237
  %238 = phi i64 [ %251, %237 ], [ %235, %234 ]
  %239 = getelementptr inbounds [18 x i8], [18 x i8]* @_ZZN3jxl12_GLOBAL__N_138StoreHuffmanTreeOfHuffmanTreeToBitMaskEiPKhPNS_9BitWriterEE13kStorageOrder, i64 0, i64 %238
  %240 = load i8, i8* %239, align 1
  %241 = zext i8 %240 to i64
  %242 = getelementptr inbounds [18 x i8], [18 x i8]* %8, i64 0, i64 %241
  %243 = load i8, i8* %242, align 1
  %244 = zext i8 %243 to i64
  %245 = getelementptr inbounds [6 x i8], [6 x i8]* @_ZZN3jxl12_GLOBAL__N_138StoreHuffmanTreeOfHuffmanTreeToBitMaskEiPKhPNS_9BitWriterEE38kHuffmanBitLengthHuffmanCodeBitLengths, i64 0, i64 %244
  %246 = load i8, i8* %245, align 1
  %247 = zext i8 %246 to i64
  %248 = getelementptr inbounds [6 x i8], [6 x i8]* @_ZZN3jxl12_GLOBAL__N_138StoreHuffmanTreeOfHuffmanTreeToBitMaskEiPKhPNS_9BitWriterEE35kHuffmanBitLengthHuffmanCodeSymbols, i64 0, i64 %244
  %249 = load i8, i8* %248, align 1
  %250 = zext i8 %249 to i64
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %4, i64 %247, i64 %250) #6
  %251 = add nuw nsw i64 %238, 1
  %252 = icmp eq i64 %251, %221
  br i1 %252, label %253, label %237

253:                                              ; preds = %237, %234
  %254 = icmp eq i32 %204, 1
  br i1 %254, label %255, label %258

255:                                              ; preds = %253
  %256 = sext i32 %203 to i64
  %257 = getelementptr inbounds [18 x i8], [18 x i8]* %8, i64 0, i64 %256
  store i8 0, i8* %257, align 1
  br label %258

258:                                              ; preds = %255, %253
  %259 = load i64, i64* %6, align 8
  %260 = icmp eq i64 %259, 0
  br i1 %260, label %413, label %261

261:                                              ; preds = %258, %278
  %262 = phi i64 [ %279, %278 ], [ 0, %258 ]
  %263 = getelementptr inbounds i8, i8* %125, i64 %262
  %264 = load i8, i8* %263, align 1
  %265 = zext i8 %264 to i64
  %266 = getelementptr inbounds [18 x i8], [18 x i8]* %8, i64 0, i64 %265
  %267 = load i8, i8* %266, align 1
  %268 = zext i8 %267 to i64
  %269 = getelementptr inbounds [18 x i16], [18 x i16]* %9, i64 0, i64 %265
  %270 = load i16, i16* %269, align 2
  %271 = zext i16 %270 to i64
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %4, i64 %268, i64 %271) #6
  switch i8 %264, label %278 [
    i8 16, label %273
    i8 17, label %272
  ]

272:                                              ; preds = %261
  br label %273

273:                                              ; preds = %261, %272
  %274 = phi i64 [ 3, %272 ], [ 2, %261 ]
  %275 = getelementptr inbounds i8, i8* %126, i64 %262
  %276 = load i8, i8* %275, align 1
  %277 = zext i8 %276 to i64
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %4, i64 %274, i64 %277) #6
  br label %278

278:                                              ; preds = %273, %261
  %279 = add nuw i64 %262, 1
  %280 = icmp eq i64 %279, %259
  br i1 %280, label %413, label %261

281:                                              ; preds = %187, %137
  %282 = phi i32* [ %188, %187 ], [ %138, %137 ]
  %283 = phi i32 [ %198, %187 ], [ 0, %137 ]
  %284 = phi i32 [ %200, %187 ], [ 0, %137 ]
  %285 = getelementptr inbounds [18 x i32], [18 x i32]* %7, i64 0, i64 2
  %286 = load i32, i32* %285, align 8
  %287 = icmp eq i32 %286, 0
  br i1 %287, label %290, label %288

288:                                              ; preds = %281
  %289 = icmp eq i32 %283, 1
  br i1 %289, label %201, label %290

290:                                              ; preds = %288, %281
  %291 = phi i32 [ %283, %281 ], [ 1, %288 ]
  %292 = phi i32 [ %284, %281 ], [ 2, %288 ]
  %293 = getelementptr inbounds [18 x i32], [18 x i32]* %7, i64 0, i64 3
  %294 = load i32, i32* %293, align 4
  %295 = icmp eq i32 %294, 0
  br i1 %295, label %298, label %296

296:                                              ; preds = %290
  switch i32 %291, label %297 [
    i32 0, label %298
    i32 1, label %201
  ]

297:                                              ; preds = %296
  br label %298

298:                                              ; preds = %297, %296, %290
  %299 = phi i32 [ %291, %290 ], [ 1, %296 ], [ %291, %297 ]
  %300 = phi i32 [ %292, %290 ], [ 3, %296 ], [ %292, %297 ]
  %301 = getelementptr inbounds [18 x i32], [18 x i32]* %7, i64 0, i64 4
  %302 = load i32, i32* %301, align 16
  %303 = icmp eq i32 %302, 0
  br i1 %303, label %306, label %304

304:                                              ; preds = %298
  switch i32 %299, label %305 [
    i32 0, label %306
    i32 1, label %201
  ]

305:                                              ; preds = %304
  br label %306

306:                                              ; preds = %305, %304, %298
  %307 = phi i32 [ %299, %298 ], [ 1, %304 ], [ %299, %305 ]
  %308 = phi i32 [ %300, %298 ], [ 4, %304 ], [ %300, %305 ]
  %309 = getelementptr inbounds [18 x i32], [18 x i32]* %7, i64 0, i64 5
  %310 = load i32, i32* %309, align 4
  %311 = icmp eq i32 %310, 0
  br i1 %311, label %314, label %312

312:                                              ; preds = %306
  switch i32 %307, label %313 [
    i32 0, label %314
    i32 1, label %201
  ]

313:                                              ; preds = %312
  br label %314

314:                                              ; preds = %313, %312, %306
  %315 = phi i32 [ %307, %306 ], [ 1, %312 ], [ %307, %313 ]
  %316 = phi i32 [ %308, %306 ], [ 5, %312 ], [ %308, %313 ]
  %317 = getelementptr inbounds [18 x i32], [18 x i32]* %7, i64 0, i64 6
  %318 = load i32, i32* %317, align 8
  %319 = icmp eq i32 %318, 0
  br i1 %319, label %322, label %320

320:                                              ; preds = %314
  switch i32 %315, label %321 [
    i32 0, label %322
    i32 1, label %201
  ]

321:                                              ; preds = %320
  br label %322

322:                                              ; preds = %321, %320, %314
  %323 = phi i32 [ %315, %314 ], [ 1, %320 ], [ %315, %321 ]
  %324 = phi i32 [ %316, %314 ], [ 6, %320 ], [ %316, %321 ]
  %325 = getelementptr inbounds [18 x i32], [18 x i32]* %7, i64 0, i64 7
  %326 = load i32, i32* %325, align 4
  %327 = icmp eq i32 %326, 0
  br i1 %327, label %330, label %328

328:                                              ; preds = %322
  switch i32 %323, label %329 [
    i32 0, label %330
    i32 1, label %201
  ]

329:                                              ; preds = %328
  br label %330

330:                                              ; preds = %329, %328, %322
  %331 = phi i32 [ %323, %322 ], [ 1, %328 ], [ %323, %329 ]
  %332 = phi i32 [ %324, %322 ], [ 7, %328 ], [ %324, %329 ]
  %333 = getelementptr inbounds [18 x i32], [18 x i32]* %7, i64 0, i64 8
  %334 = load i32, i32* %333, align 16
  %335 = icmp eq i32 %334, 0
  br i1 %335, label %338, label %336

336:                                              ; preds = %330
  switch i32 %331, label %337 [
    i32 0, label %338
    i32 1, label %201
  ]

337:                                              ; preds = %336
  br label %338

338:                                              ; preds = %337, %336, %330
  %339 = phi i32 [ %331, %330 ], [ 1, %336 ], [ %331, %337 ]
  %340 = phi i32 [ %332, %330 ], [ 8, %336 ], [ %332, %337 ]
  %341 = getelementptr inbounds [18 x i32], [18 x i32]* %7, i64 0, i64 9
  %342 = load i32, i32* %341, align 4
  %343 = icmp eq i32 %342, 0
  br i1 %343, label %346, label %344

344:                                              ; preds = %338
  switch i32 %339, label %345 [
    i32 0, label %346
    i32 1, label %201
  ]

345:                                              ; preds = %344
  br label %346

346:                                              ; preds = %345, %344, %338
  %347 = phi i32 [ %339, %338 ], [ 1, %344 ], [ %339, %345 ]
  %348 = phi i32 [ %340, %338 ], [ 9, %344 ], [ %340, %345 ]
  %349 = getelementptr inbounds [18 x i32], [18 x i32]* %7, i64 0, i64 10
  %350 = load i32, i32* %349, align 8
  %351 = icmp eq i32 %350, 0
  br i1 %351, label %354, label %352

352:                                              ; preds = %346
  switch i32 %347, label %353 [
    i32 0, label %354
    i32 1, label %201
  ]

353:                                              ; preds = %352
  br label %354

354:                                              ; preds = %353, %352, %346
  %355 = phi i32 [ %347, %346 ], [ 1, %352 ], [ %347, %353 ]
  %356 = phi i32 [ %348, %346 ], [ 10, %352 ], [ %348, %353 ]
  %357 = getelementptr inbounds [18 x i32], [18 x i32]* %7, i64 0, i64 11
  %358 = load i32, i32* %357, align 4
  %359 = icmp eq i32 %358, 0
  br i1 %359, label %362, label %360

360:                                              ; preds = %354
  switch i32 %355, label %361 [
    i32 0, label %362
    i32 1, label %201
  ]

361:                                              ; preds = %360
  br label %362

362:                                              ; preds = %361, %360, %354
  %363 = phi i32 [ %355, %354 ], [ 1, %360 ], [ %355, %361 ]
  %364 = phi i32 [ %356, %354 ], [ 11, %360 ], [ %356, %361 ]
  %365 = getelementptr inbounds [18 x i32], [18 x i32]* %7, i64 0, i64 12
  %366 = load i32, i32* %365, align 16
  %367 = icmp eq i32 %366, 0
  br i1 %367, label %370, label %368

368:                                              ; preds = %362
  switch i32 %363, label %369 [
    i32 0, label %370
    i32 1, label %201
  ]

369:                                              ; preds = %368
  br label %370

370:                                              ; preds = %369, %368, %362
  %371 = phi i32 [ %363, %362 ], [ 1, %368 ], [ %363, %369 ]
  %372 = phi i32 [ %364, %362 ], [ 12, %368 ], [ %364, %369 ]
  %373 = getelementptr inbounds [18 x i32], [18 x i32]* %7, i64 0, i64 13
  %374 = load i32, i32* %373, align 4
  %375 = icmp eq i32 %374, 0
  br i1 %375, label %378, label %376

376:                                              ; preds = %370
  switch i32 %371, label %377 [
    i32 0, label %378
    i32 1, label %201
  ]

377:                                              ; preds = %376
  br label %378

378:                                              ; preds = %377, %376, %370
  %379 = phi i32 [ %371, %370 ], [ 1, %376 ], [ %371, %377 ]
  %380 = phi i32 [ %372, %370 ], [ 13, %376 ], [ %372, %377 ]
  %381 = getelementptr inbounds [18 x i32], [18 x i32]* %7, i64 0, i64 14
  %382 = load i32, i32* %381, align 8
  %383 = icmp eq i32 %382, 0
  br i1 %383, label %386, label %384

384:                                              ; preds = %378
  switch i32 %379, label %385 [
    i32 0, label %386
    i32 1, label %201
  ]

385:                                              ; preds = %384
  br label %386

386:                                              ; preds = %385, %384, %378
  %387 = phi i32 [ %379, %378 ], [ 1, %384 ], [ %379, %385 ]
  %388 = phi i32 [ %380, %378 ], [ 14, %384 ], [ %380, %385 ]
  %389 = getelementptr inbounds [18 x i32], [18 x i32]* %7, i64 0, i64 15
  %390 = load i32, i32* %389, align 4
  %391 = icmp eq i32 %390, 0
  br i1 %391, label %394, label %392

392:                                              ; preds = %386
  switch i32 %387, label %393 [
    i32 0, label %394
    i32 1, label %201
  ]

393:                                              ; preds = %392
  br label %394

394:                                              ; preds = %393, %392, %386
  %395 = phi i32 [ %387, %386 ], [ 1, %392 ], [ %387, %393 ]
  %396 = phi i32 [ %388, %386 ], [ 15, %392 ], [ %388, %393 ]
  %397 = getelementptr inbounds [18 x i32], [18 x i32]* %7, i64 0, i64 16
  %398 = load i32, i32* %397, align 16
  %399 = icmp eq i32 %398, 0
  br i1 %399, label %402, label %400

400:                                              ; preds = %394
  switch i32 %395, label %401 [
    i32 0, label %402
    i32 1, label %201
  ]

401:                                              ; preds = %400
  br label %402

402:                                              ; preds = %401, %400, %394
  %403 = phi i32 [ %395, %394 ], [ 1, %400 ], [ %395, %401 ]
  %404 = phi i32 [ %396, %394 ], [ 16, %400 ], [ %396, %401 ]
  %405 = getelementptr inbounds [18 x i32], [18 x i32]* %7, i64 0, i64 17
  %406 = load i32, i32* %405, align 4
  %407 = icmp eq i32 %406, 0
  br i1 %407, label %410, label %408

408:                                              ; preds = %402
  switch i32 %403, label %409 [
    i32 0, label %410
    i32 1, label %201
  ]

409:                                              ; preds = %408
  br label %410

410:                                              ; preds = %409, %408, %402
  %411 = phi i32 [ %403, %402 ], [ 1, %408 ], [ %403, %409 ]
  %412 = phi i32 [ %404, %402 ], [ 17, %408 ], [ %404, %409 ]
  br label %201

413:                                              ; preds = %278, %258
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %206) #6
  call void @llvm.lifetime.end.p0i8(i64 18, i8* nonnull %205) #6
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %128) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %127) #6
  call void @_ZdaPv(i8* nonnull %125) #7
  br label %414

414:                                              ; preds = %116, %109, %105, %413, %44
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #6
  ret void

415:                                              ; preds = %95
  store i64 %96, i64* %98, align 8
  store i64 %99, i64* %64, align 8
  br label %416

416:                                              ; preds = %415, %95
  %417 = phi i64 [ %96, %95 ], [ %99, %415 ]
  %418 = add nuw i64 %86, 2
  %419 = icmp eq i64 %418, %41
  br i1 %419, label %52, label %84
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"*, i64, i64) local_unnamed_addr #2

declare void @_ZN3jxl17CreateHuffmanTreeEPKjmiPh(i32*, i64, i32, i8*) local_unnamed_addr #2

declare void @_ZN3jxl25ConvertBitDepthsToSymbolsEPKhmPt(i8*, i64, i16*) local_unnamed_addr #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #3

declare void @_ZN3jxl16WriteHuffmanTreeEPKhmPmPhS3_(i8*, i64, i64*, i8*, i8*) local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctlz.i64(i64, i1 immarg) #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i64 0, i64 65}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.unroll.disable"}
