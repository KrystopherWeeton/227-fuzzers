; ModuleID = '../../third_party/skia/src/pathops/SkPathOpsTightBounds.cpp'
source_filename = "../../third_party/skia/src/pathops/SkPathOpsTightBounds.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.SkRect = type { float, float, float, float }
%class.SkOpContour = type <{ %class.SkOpGlobalState*, %class.SkOpSegment, %class.SkOpSegment*, %class.SkOpContour*, %struct.SkPathOpsBounds, i32, i32, i32, i8, i8, i8, i8, i8, [7 x i8] }>
%class.SkOpGlobalState = type <{ %class.SkArenaAlloc*, %class.SkOpCoincidence*, %class.SkOpContourHead*, i32, i8, i8, i8, i8 }>
%class.SkArenaAlloc = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes, [4 x i8] }>
%class.SkFibBlockSizes = type { i32 }
%class.SkOpCoincidence = type opaque
%class.SkOpContourHead = type { %class.SkOpContour.base, [7 x i8] }
%class.SkOpContour.base = type <{ %class.SkOpGlobalState*, %class.SkOpSegment, %class.SkOpSegment*, %class.SkOpContour*, %struct.SkPathOpsBounds, i32, i32, i32, i8, i8, i8, i8, i8 }>
%class.SkOpSegment = type <{ %class.SkOpSpan, %class.SkOpSpanBase, %class.SkOpContour*, %class.SkOpSegment*, %class.SkOpSegment*, %struct.SkPoint*, %struct.SkPathOpsBounds, float, i32, i32, i32, i8, [7 x i8] }>
%class.SkOpSpan = type <{ %class.SkOpSpanBase.base, [2 x i8], %class.SkOpSpan*, %class.SkOpAngle*, %class.SkOpSpanBase*, i32, i32, i32, i32, i32, i8, i8, [2 x i8] }>
%class.SkOpSpanBase.base = type <{ %class.SkOpPtT, %class.SkOpSegment*, %class.SkOpSpanBase*, %class.SkOpAngle*, %class.SkOpSpan*, i32, i8, i8 }>
%class.SkOpPtT = type <{ double, %struct.SkPoint, %class.SkOpSpanBase*, %class.SkOpPtT*, i8, i8, i8, [5 x i8] }>
%struct.SkPoint = type { float, float }
%class.SkOpAngle = type <{ %struct.SkDCurve, %class.SkDCurveSweep, double, %class.SkLineParameters, %class.SkOpAngle*, %class.SkOpSpanBase*, %class.SkOpSpanBase*, %class.SkOpSpanBase*, %class.SkOpSpanBase*, i32, i8, i8, i8, i8, i8, i8, i8, [5 x i8] }>
%struct.SkDCurve = type { %union.anon }
%union.anon = type { %struct.SkDCubic }
%struct.SkDCubic = type { [4 x %struct.SkDPoint] }
%struct.SkDPoint = type { double, double }
%class.SkDCurveSweep = type <{ %struct.SkDCurve, [2 x %struct.SkDVector], i8, i8, [6 x i8] }>
%struct.SkDVector = type { double, double }
%class.SkLineParameters = type { double, double, double }
%class.SkOpSpanBase = type <{ %class.SkOpPtT, %class.SkOpSegment*, %class.SkOpSpanBase*, %class.SkOpAngle*, %class.SkOpSpan*, i32, i8, i8, [2 x i8] }>
%struct.SkPathOpsBounds = type { %struct.SkRect }
%class.SkOpEdgeBuilder = type <{ %class.SkOpGlobalState*, %class.SkPath*, %class.SkTDArray, %class.SkTDArray.2, %class.SkTDArray.1, %class.SkOpContourBuilder, %class.SkOpContourHead*, [2 x i32], i32, i8, i8, i8, i8 }>
%class.SkPath = type <{ %class.sk_sp, i32, %"struct.std::__1::atomic.3", %"struct.std::__1::atomic.3", i8, i8 }>
%class.sk_sp = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.1, %class.SkTDArray.2, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.8 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.3" }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.8 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.9", [3 x i8] }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic.9" = type { %"struct.std::__1::__atomic_base.10" }
%"struct.std::__1::__atomic_base.10" = type { %"struct.std::__1::__cxx_atomic_impl.11" }
%"struct.std::__1::__cxx_atomic_impl.11" = type { %"struct.std::__1::__cxx_atomic_base_impl.12" }
%"struct.std::__1::__cxx_atomic_base_impl.12" = type { i8 }
%"struct.std::__1::atomic.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__cxx_atomic_impl.6" }
%"struct.std::__1::__cxx_atomic_impl.6" = type { %"struct.std::__1::__cxx_atomic_base_impl.7" }
%"struct.std::__1::__cxx_atomic_base_impl.7" = type { i8 }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%class.SkTDArray.2 = type { float*, i32, i32 }
%class.SkTDArray.1 = type { i8*, i32, i32 }
%class.SkOpContourBuilder = type <{ %class.SkOpContour*, [2 x %struct.SkPoint], i8, [7 x i8] }>
%class.SkSTArenaAlloc = type { %"struct.std::__1::array", %class.SkArenaAlloc.base, [4 x i8] }
%"struct.std::__1::array" = type { [4096 x i8] }
%class.SkArenaAlloc.base = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes }>

@__const._Z11TightBoundsRK6SkPathP6SkRect.moveBounds = private unnamed_addr constant %struct.SkRect { float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000 }, align 4
@__const._Z11TightBoundsRK6SkPathP6SkRect.contour = private unnamed_addr constant %class.SkOpContour <{ %class.SkOpGlobalState* inttoptr (i64 -6148914691236517206 to %class.SkOpGlobalState*), %class.SkOpSegment <{ %class.SkOpSpan <{ %class.SkOpSpanBase.base <{ %class.SkOpPtT <{ double 0xFFFFFFFFFFFFFFFF, %struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %class.SkOpSpanBase* inttoptr (i64 -6148914691236517206 to %class.SkOpSpanBase*), %class.SkOpPtT* inttoptr (i64 -6148914691236517206 to %class.SkOpPtT*), i8 -86, i8 -86, i8 -86, [5 x i8] c"\AA\AA\AA\AA\AA" }>, %class.SkOpSegment* inttoptr (i64 -6148914691236517206 to %class.SkOpSegment*), %class.SkOpSpanBase* inttoptr (i64 -6148914691236517206 to %class.SkOpSpanBase*), %class.SkOpAngle* inttoptr (i64 -6148914691236517206 to %class.SkOpAngle*), %class.SkOpSpan* inttoptr (i64 -6148914691236517206 to %class.SkOpSpan*), i32 -1431655766, i8 -86, i8 -86 }>, [2 x i8] c"\AA\AA", %class.SkOpSpan* inttoptr (i64 -6148914691236517206 to %class.SkOpSpan*), %class.SkOpAngle* inttoptr (i64 -6148914691236517206 to %class.SkOpAngle*), %class.SkOpSpanBase* inttoptr (i64 -6148914691236517206 to %class.SkOpSpanBase*), i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i8 -86, i8 -86, [2 x i8] c"\AA\AA" }>, %class.SkOpSpanBase <{ %class.SkOpPtT <{ double 0xFFFFFFFFFFFFFFFF, %struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %class.SkOpSpanBase* inttoptr (i64 -6148914691236517206 to %class.SkOpSpanBase*), %class.SkOpPtT* inttoptr (i64 -6148914691236517206 to %class.SkOpPtT*), i8 -86, i8 -86, i8 -86, [5 x i8] c"\AA\AA\AA\AA\AA" }>, %class.SkOpSegment* inttoptr (i64 -6148914691236517206 to %class.SkOpSegment*), %class.SkOpSpanBase* inttoptr (i64 -6148914691236517206 to %class.SkOpSpanBase*), %class.SkOpAngle* inttoptr (i64 -6148914691236517206 to %class.SkOpAngle*), %class.SkOpSpan* inttoptr (i64 -6148914691236517206 to %class.SkOpSpan*), i32 -1431655766, i8 -86, i8 -86, [2 x i8] c"\AA\AA" }>, %class.SkOpContour* inttoptr (i64 -6148914691236517206 to %class.SkOpContour*), %class.SkOpSegment* inttoptr (i64 -6148914691236517206 to %class.SkOpSegment*), %class.SkOpSegment* inttoptr (i64 -6148914691236517206 to %class.SkOpSegment*), %struct.SkPoint* inttoptr (i64 -6148914691236517206 to %struct.SkPoint*), %struct.SkPathOpsBounds { %struct.SkRect { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 } }, float 0xFFFFFFFFE0000000, i32 -1431655766, i32 -1431655766, i32 -1431655766, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA" }>, %class.SkOpSegment* inttoptr (i64 -6148914691236517206 to %class.SkOpSegment*), %class.SkOpContour* inttoptr (i64 -6148914691236517206 to %class.SkOpContour*), %struct.SkPathOpsBounds { %struct.SkRect { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 } }, i32 -1431655766, i32 -1431655766, i32 -1431655766, i8 -86, i8 -86, i8 -86, i8 -86, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA" }>, align 8
@__const._Z11TightBoundsRK6SkPathP6SkRect.builder = private unnamed_addr constant %class.SkOpEdgeBuilder <{ %class.SkOpGlobalState* inttoptr (i64 -6148914691236517206 to %class.SkOpGlobalState*), %class.SkPath* inttoptr (i64 -6148914691236517206 to %class.SkPath*), %class.SkTDArray { %struct.SkPoint* inttoptr (i64 -6148914691236517206 to %struct.SkPoint*), i32 -1431655766, i32 -1431655766 }, %class.SkTDArray.2 { float* inttoptr (i64 -6148914691236517206 to float*), i32 -1431655766, i32 -1431655766 }, %class.SkTDArray.1 { i8* inttoptr (i64 -6148914691236517206 to i8*), i32 -1431655766, i32 -1431655766 }, %class.SkOpContourBuilder <{ %class.SkOpContour* inttoptr (i64 -6148914691236517206 to %class.SkOpContour*), [2 x %struct.SkPoint] [%struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }], i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA" }>, %class.SkOpContourHead* inttoptr (i64 -6148914691236517206 to %class.SkOpContourHead*), [2 x i32] [i32 -1431655766, i32 -1431655766], i32 -1431655766, i8 -86, i8 -86, i8 -86, i8 -86 }>, align 8

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_Z11TightBoundsRK6SkPathP6SkRect(%class.SkPath* dereferenceable(16), %struct.SkRect*) local_unnamed_addr #0 {
  %3 = alloca %struct.SkRect, align 4
  %4 = alloca %class.SkSTArenaAlloc, align 8
  %5 = alloca %class.SkOpContour, align 8
  %6 = alloca %class.SkOpContourHead*, align 8
  %7 = alloca %class.SkOpGlobalState, align 8
  %8 = alloca %class.SkOpEdgeBuilder, align 8
  %9 = bitcast %struct.SkRect* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #5
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %9, i8* align 4 bitcast (%struct.SkRect* @__const._Z11TightBoundsRK6SkPathP6SkRect.moveBounds to i8*), i64 16, i1 false)
  %10 = getelementptr inbounds %class.SkPath, %class.SkPath* %0, i64 0, i32 0, i32 0
  %11 = load %class.SkPathRef*, %class.SkPathRef** %10, align 8
  %12 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %11, i64 0, i32 4, i32 0
  %13 = bitcast i8** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %11, i64 0, i32 9
  %16 = load i8, i8* %15, align 8
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %18, label %22

18:                                               ; preds = %2
  %19 = inttoptr i64 %14 to i8*
  %20 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %11, i64 0, i32 10
  %21 = load i8, i8* %20, align 1, !range !2
  br label %34

22:                                               ; preds = %2
  %23 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %11, i64 0, i32 1
  %24 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %11, i64 0, i32 3, i32 0
  %25 = load %struct.SkPoint*, %struct.SkPoint** %24, align 8
  %26 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %11, i64 0, i32 3, i32 2
  %27 = load i32, i32* %26, align 4
  %28 = tail call zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect* %23, %struct.SkPoint* %25, i32 %27) #5
  %29 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %11, i64 0, i32 10
  %30 = zext i1 %28 to i8
  store i8 %30, i8* %29, align 1
  store i8 0, i8* %15, align 8
  %31 = load %class.SkPathRef*, %class.SkPathRef** %10, align 8
  %32 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %31, i64 0, i32 4, i32 0
  %33 = load i8*, i8** %32, align 8
  br label %34

34:                                               ; preds = %22, %18
  %35 = phi i8* [ %19, %18 ], [ %33, %22 ]
  %36 = phi %class.SkPathRef* [ %11, %18 ], [ %31, %22 ]
  %37 = phi i8 [ %21, %18 ], [ %30, %22 ]
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %46, label %39

39:                                               ; preds = %34
  %40 = icmp eq i8* %35, null
  br i1 %40, label %46, label %41

41:                                               ; preds = %39
  %42 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %36, i64 0, i32 4, i32 2
  %43 = load i32, i32* %42, align 4
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds i8, i8* %35, i64 %44
  br label %46

46:                                               ; preds = %34, %39, %41
  %47 = phi i8* [ %45, %41 ], [ null, %39 ], [ %35, %34 ]
  %48 = inttoptr i64 %14 to i8*
  %49 = icmp eq i8* %47, %48
  br i1 %49, label %217, label %50

50:                                               ; preds = %46
  %51 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %36, i64 0, i32 3, i32 0
  %52 = bitcast %struct.SkPoint** %51 to i64*
  %53 = load i64, i64* %52, align 8
  %54 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %3, i64 0, i32 0
  %55 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %3, i64 0, i32 1
  %56 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %3, i64 0, i32 2
  %57 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %3, i64 0, i32 3
  br label %61

58:                                               ; preds = %207
  %59 = and i8 %209, 1
  %60 = icmp eq i8 %59, 0
  br i1 %60, label %234, label %217

61:                                               ; preds = %50, %207
  %62 = phi float [ 0xC7EFFFFFE0000000, %50 ], [ %213, %207 ]
  %63 = phi float [ 0xC7EFFFFFE0000000, %50 ], [ %212, %207 ]
  %64 = phi float [ 0x47EFFFFFE0000000, %50 ], [ %211, %207 ]
  %65 = phi float [ 0x47EFFFFFE0000000, %50 ], [ %210, %207 ]
  %66 = phi i8* [ %48, %50 ], [ %208, %207 ]
  %67 = phi i8 [ 1, %50 ], [ %209, %207 ]
  %68 = phi i64 [ %53, %50 ], [ %215, %207 ]
  %69 = load i8, i8* %66, align 1, !noalias !3
  switch i8 %69, label %70 [
    i8 0, label %73
    i8 1, label %71
    i8 2, label %90
    i8 3, label %90
    i8 4, label %123
    i8 5, label %71
  ]

70:                                               ; preds = %61
  tail call void @llvm.trap() #5, !noalias !3
  unreachable

71:                                               ; preds = %61, %61
  %72 = inttoptr i64 %68 to %struct.SkPoint*
  br label %175

73:                                               ; preds = %61
  %74 = inttoptr i64 %68 to %struct.SkPoint*
  %75 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %74, i64 0, i32 0
  %76 = load float, float* %75, align 4
  %77 = fcmp olt float %76, %65
  %78 = select i1 %77, float %76, float %65
  store float %78, float* %54, align 4
  %79 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %74, i64 0, i32 1
  %80 = load float, float* %79, align 4
  %81 = fcmp olt float %80, %64
  %82 = select i1 %81, float %80, float %64
  store float %82, float* %55, align 4
  %83 = load float, float* %75, align 4
  %84 = fcmp olt float %63, %83
  %85 = select i1 %84, float %83, float %63
  store float %85, float* %56, align 4
  %86 = load float, float* %79, align 4
  %87 = fcmp olt float %62, %86
  %88 = select i1 %87, float %86, float %62
  store float %88, float* %57, align 4
  %89 = load i8, i8* %66, align 1
  br label %175

90:                                               ; preds = %61, %61
  %91 = inttoptr i64 %68 to %struct.SkPoint*
  %92 = and i8 %67, 1
  %93 = icmp eq i8 %92, 0
  br i1 %93, label %175, label %94

94:                                               ; preds = %90
  %95 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %91, i64 -1, i32 0
  %96 = load float, float* %95, align 4
  %97 = fpext float %96 to double
  %98 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %91, i64 0, i32 0
  %99 = load float, float* %98, align 4
  %100 = fpext float %99 to double
  %101 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %91, i64 1, i32 0
  %102 = load float, float* %101, align 4
  %103 = fpext float %102 to double
  %104 = fsub double %97, %100
  %105 = fsub double %103, %100
  %106 = fmul double %104, %105
  %107 = fcmp ole double %106, 0.000000e+00
  %108 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %91, i64 -1, i32 1
  %109 = load float, float* %108, align 4
  %110 = fpext float %109 to double
  %111 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %91, i64 0, i32 1
  %112 = load float, float* %111, align 4
  %113 = fpext float %112 to double
  %114 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %91, i64 1, i32 1
  %115 = load float, float* %114, align 4
  %116 = fpext float %115 to double
  %117 = fsub double %110, %113
  %118 = fsub double %116, %113
  %119 = fmul double %117, %118
  %120 = fcmp ole double %119, 0.000000e+00
  %121 = and i1 %107, %120
  %122 = zext i1 %121 to i8
  br label %175

123:                                              ; preds = %61
  %124 = inttoptr i64 %68 to %struct.SkPoint*
  %125 = and i8 %67, 1
  %126 = icmp eq i8 %125, 0
  br i1 %126, label %172, label %127

127:                                              ; preds = %123
  %128 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %124, i64 -1, i32 0
  %129 = load float, float* %128, align 4
  %130 = fpext float %129 to double
  %131 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %124, i64 0, i32 0
  %132 = load float, float* %131, align 4
  %133 = fpext float %132 to double
  %134 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %124, i64 2, i32 0
  %135 = load float, float* %134, align 4
  %136 = fpext float %135 to double
  %137 = fsub double %130, %133
  %138 = fsub double %136, %133
  %139 = fmul double %137, %138
  %140 = fcmp ole double %139, 0.000000e+00
  %141 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %124, i64 -1, i32 1
  %142 = load float, float* %141, align 4
  %143 = fpext float %142 to double
  %144 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %124, i64 0, i32 1
  %145 = load float, float* %144, align 4
  %146 = fpext float %145 to double
  %147 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %124, i64 2, i32 1
  %148 = load float, float* %147, align 4
  %149 = fpext float %148 to double
  %150 = fsub double %143, %146
  %151 = fsub double %149, %146
  %152 = fmul double %150, %151
  %153 = fcmp ole double %152, 0.000000e+00
  %154 = and i1 %140, %153
  %155 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %124, i64 1, i32 0
  %156 = load float, float* %155, align 4
  %157 = fpext float %156 to double
  %158 = fsub double %130, %157
  %159 = fsub double %136, %157
  %160 = fmul double %158, %159
  %161 = fcmp ole double %160, 0.000000e+00
  %162 = and i1 %154, %161
  %163 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %124, i64 1, i32 1
  %164 = load float, float* %163, align 4
  %165 = fpext float %164 to double
  %166 = fsub double %143, %165
  %167 = fsub double %149, %165
  %168 = fmul double %166, %167
  %169 = fcmp ole double %168, 0.000000e+00
  %170 = and i1 %162, %169
  %171 = zext i1 %170 to i8
  br label %172

172:                                              ; preds = %127, %123
  %173 = phi i8 [ %67, %123 ], [ %171, %127 ]
  %174 = getelementptr inbounds i8, i8* %66, i64 1
  br label %185

175:                                              ; preds = %71, %90, %94, %73
  %176 = phi i8 [ %69, %94 ], [ %69, %90 ], [ %89, %73 ], [ %69, %71 ]
  %177 = phi float [ %62, %94 ], [ %62, %90 ], [ %88, %73 ], [ %62, %71 ]
  %178 = phi float [ %63, %94 ], [ %63, %90 ], [ %85, %73 ], [ %63, %71 ]
  %179 = phi float [ %64, %94 ], [ %64, %90 ], [ %82, %73 ], [ %64, %71 ]
  %180 = phi float [ %65, %94 ], [ %65, %90 ], [ %78, %73 ], [ %65, %71 ]
  %181 = phi %struct.SkPoint* [ %91, %94 ], [ %91, %90 ], [ %74, %73 ], [ %72, %71 ]
  %182 = phi i8 [ %122, %94 ], [ %67, %90 ], [ %67, %73 ], [ %67, %71 ]
  %183 = getelementptr inbounds i8, i8* %66, i64 1
  switch i8 %176, label %194 [
    i8 0, label %195
    i8 1, label %195
    i8 2, label %184
    i8 3, label %205
    i8 4, label %185
    i8 5, label %193
  ]

184:                                              ; preds = %175
  br label %195

185:                                              ; preds = %172, %175
  %186 = phi i8* [ %174, %172 ], [ %183, %175 ]
  %187 = phi i8 [ %173, %172 ], [ %182, %175 ]
  %188 = phi %struct.SkPoint* [ %124, %172 ], [ %181, %175 ]
  %189 = phi float [ %65, %172 ], [ %180, %175 ]
  %190 = phi float [ %64, %172 ], [ %179, %175 ]
  %191 = phi float [ %63, %172 ], [ %178, %175 ]
  %192 = phi float [ %62, %172 ], [ %177, %175 ]
  br label %195

193:                                              ; preds = %175
  br label %195

194:                                              ; preds = %175
  tail call void @llvm.trap() #5
  unreachable

195:                                              ; preds = %193, %185, %184, %175, %175
  %196 = phi i8* [ %183, %175 ], [ %183, %175 ], [ %183, %184 ], [ %186, %185 ], [ %183, %193 ]
  %197 = phi i8 [ %182, %175 ], [ %182, %175 ], [ %182, %184 ], [ %187, %185 ], [ %182, %193 ]
  %198 = phi %struct.SkPoint* [ %181, %175 ], [ %181, %175 ], [ %181, %184 ], [ %188, %185 ], [ %181, %193 ]
  %199 = phi float [ %180, %175 ], [ %180, %175 ], [ %180, %184 ], [ %189, %185 ], [ %180, %193 ]
  %200 = phi float [ %179, %175 ], [ %179, %175 ], [ %179, %184 ], [ %190, %185 ], [ %179, %193 ]
  %201 = phi float [ %178, %175 ], [ %178, %175 ], [ %178, %184 ], [ %191, %185 ], [ %178, %193 ]
  %202 = phi float [ %177, %175 ], [ %177, %175 ], [ %177, %184 ], [ %192, %185 ], [ %177, %193 ]
  %203 = phi i64 [ 1, %175 ], [ 1, %175 ], [ 2, %184 ], [ 3, %185 ], [ 0, %193 ]
  %204 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %198, i64 %203
  br label %207

205:                                              ; preds = %175
  %206 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %181, i64 2
  br label %207

207:                                              ; preds = %195, %205
  %208 = phi i8* [ %196, %195 ], [ %183, %205 ]
  %209 = phi i8 [ %197, %195 ], [ %182, %205 ]
  %210 = phi float [ %199, %195 ], [ %180, %205 ]
  %211 = phi float [ %200, %195 ], [ %179, %205 ]
  %212 = phi float [ %201, %195 ], [ %178, %205 ]
  %213 = phi float [ %202, %195 ], [ %177, %205 ]
  %214 = phi %struct.SkPoint* [ %204, %195 ], [ %206, %205 ]
  %215 = ptrtoint %struct.SkPoint* %214 to i64
  %216 = icmp eq i8* %47, %208
  br i1 %216, label %58, label %61

217:                                              ; preds = %46, %58
  %218 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %36, i64 0, i32 9
  %219 = load i8, i8* %218, align 8
  %220 = icmp eq i8 %219, 0
  br i1 %220, label %230, label %221

221:                                              ; preds = %217
  %222 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %36, i64 0, i32 1
  %223 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %36, i64 0, i32 3, i32 0
  %224 = load %struct.SkPoint*, %struct.SkPoint** %223, align 8
  %225 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %36, i64 0, i32 3, i32 2
  %226 = load i32, i32* %225, align 4
  %227 = tail call zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect* %222, %struct.SkPoint* %224, i32 %226) #5
  %228 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %36, i64 0, i32 10
  %229 = zext i1 %227 to i8
  store i8 %229, i8* %228, align 1
  store i8 0, i8* %218, align 8
  br label %230

230:                                              ; preds = %217, %221
  %231 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %36, i64 0, i32 1
  %232 = bitcast %struct.SkRect* %1 to i8*
  %233 = bitcast %struct.SkRect* %231 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %232, i8* align 4 %233, i64 16, i1 false)
  br label %325

234:                                              ; preds = %58
  %235 = getelementptr inbounds %class.SkSTArenaAlloc, %class.SkSTArenaAlloc* %4, i64 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4128, i8* nonnull %235) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %235, i8 -86, i64 4128, i1 false)
  %236 = getelementptr inbounds %class.SkSTArenaAlloc, %class.SkSTArenaAlloc* %4, i64 0, i32 0, i32 0, i64 4096
  %237 = bitcast i8* %236 to %class.SkArenaAlloc*
  call void @_ZN12SkArenaAllocC2EPcmm(%class.SkArenaAlloc* %237, i8* nonnull %235, i64 4096, i64 4096) #5
  %238 = bitcast %class.SkOpContour* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 344, i8* nonnull %238) #5
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %238, i8* align 8 bitcast (%class.SkOpContour* @__const._Z11TightBoundsRK6SkPathP6SkRect.contour to i8*), i64 344, i1 false)
  %239 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %5, i64 0, i32 2
  %240 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %5, i64 0, i32 6
  store i32 0, i32* %240, align 4
  %241 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %5, i64 0, i32 8
  store i8 0, i8* %241, align 4
  %242 = bitcast %class.SkOpSegment** %239 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %242, i8 0, i64 16, i1 false) #5
  %243 = bitcast %class.SkOpContourHead** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %243) #5
  %244 = bitcast %class.SkOpContourHead** %6 to %class.SkOpContour**
  store %class.SkOpContour* %5, %class.SkOpContour** %244, align 8
  %245 = bitcast %class.SkOpGlobalState* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %245) #5
  %246 = bitcast %class.SkOpContour* %5 to %class.SkOpContourHead*
  %247 = bitcast %class.SkOpGlobalState* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %247, i8 -86, i64 32, i1 false)
  call void @_ZN15SkOpGlobalStateC1EP15SkOpContourHeadP12SkArenaAlloc(%class.SkOpGlobalState* nonnull %7, %class.SkOpContourHead* nonnull %246, %class.SkArenaAlloc* %237) #5
  %248 = bitcast %class.SkOpEdgeBuilder* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %248) #5
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %248, i8* align 8 bitcast (%class.SkOpEdgeBuilder* @__const._Z11TightBoundsRK6SkPathP6SkRect.builder to i8*), i64 120, i1 false)
  %249 = ptrtoint %class.SkOpContour* %5 to i64
  %250 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %8, i64 0, i32 0
  store %class.SkOpGlobalState* %7, %class.SkOpGlobalState** %250, align 8
  %251 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %8, i64 0, i32 1
  store %class.SkPath* %0, %class.SkPath** %251, align 8
  %252 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %8, i64 0, i32 2
  %253 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %8, i64 0, i32 5
  %254 = bitcast %class.SkTDArray* %252 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %254, i8 0, i64 48, i1 false) #5
  %255 = bitcast %class.SkOpContourBuilder* %253 to i64*
  store i64 %249, i64* %255, align 8
  %256 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %8, i64 0, i32 5, i32 2
  store i8 0, i8* %256, align 8
  %257 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %8, i64 0, i32 6
  %258 = bitcast %class.SkOpContourHead** %257 to i64*
  store i64 %249, i64* %258, align 8
  %259 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %8, i64 0, i32 10
  store i8 0, i8* %259, align 1
  call void @_ZN15SkOpEdgeBuilder4initEv(%class.SkOpEdgeBuilder* nonnull %8) #5
  %260 = call zeroext i1 @_ZN15SkOpEdgeBuilder6finishEv(%class.SkOpEdgeBuilder* nonnull %8) #5
  br i1 %260, label %261, label %316

261:                                              ; preds = %234
  %262 = call zeroext i1 @_Z15SortContourListPP15SkOpContourHeadbb(%class.SkOpContourHead** nonnull %6, i1 zeroext false, i1 zeroext false) #5
  br i1 %262, label %265, label %263

263:                                              ; preds = %261
  %264 = bitcast %struct.SkRect* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %264, i8* nonnull align 4 %9, i64 16, i1 false)
  br label %316

265:                                              ; preds = %261
  %266 = load %class.SkOpContour*, %class.SkOpContour** %244, align 8
  %267 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %266, i64 0, i32 4, i32 0, i32 0
  %268 = load float, float* %267, align 4
  %269 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %266, i64 0, i32 4, i32 0, i32 1
  %270 = load float, float* %269, align 4
  %271 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %266, i64 0, i32 4, i32 0, i32 2
  %272 = load float, float* %271, align 4
  %273 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %266, i64 0, i32 4, i32 0, i32 3
  %274 = load float, float* %273, align 4
  %275 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %266, i64 0, i32 3
  %276 = load %class.SkOpContour*, %class.SkOpContour** %275, align 8
  %277 = icmp eq %class.SkOpContour* %276, null
  br i1 %277, label %303, label %278

278:                                              ; preds = %265, %278
  %279 = phi %class.SkOpContour* [ %301, %278 ], [ %276, %265 ]
  %280 = phi float [ %293, %278 ], [ %268, %265 ]
  %281 = phi float [ %295, %278 ], [ %270, %265 ]
  %282 = phi float [ %297, %278 ], [ %272, %265 ]
  %283 = phi float [ %299, %278 ], [ %274, %265 ]
  %284 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %279, i64 0, i32 4, i32 0, i32 0
  %285 = load float, float* %284, align 4
  %286 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %279, i64 0, i32 4, i32 0, i32 1
  %287 = load float, float* %286, align 4
  %288 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %279, i64 0, i32 4, i32 0, i32 2
  %289 = load float, float* %288, align 4
  %290 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %279, i64 0, i32 4, i32 0, i32 3
  %291 = load float, float* %290, align 4
  %292 = fcmp ogt float %280, %285
  %293 = select i1 %292, float %285, float %280
  %294 = fcmp ogt float %281, %287
  %295 = select i1 %294, float %287, float %281
  %296 = fcmp olt float %282, %289
  %297 = select i1 %296, float %289, float %282
  %298 = fcmp olt float %283, %291
  %299 = select i1 %298, float %291, float %283
  %300 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %279, i64 0, i32 3
  %301 = load %class.SkOpContour*, %class.SkOpContour** %300, align 8
  %302 = icmp eq %class.SkOpContour* %301, null
  br i1 %302, label %303, label %278

303:                                              ; preds = %278, %265
  %304 = phi float [ %274, %265 ], [ %299, %278 ]
  %305 = phi float [ %272, %265 ], [ %297, %278 ]
  %306 = phi float [ %270, %265 ], [ %295, %278 ]
  %307 = phi float [ %268, %265 ], [ %293, %278 ]
  %308 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 0
  store float %307, float* %308, align 4
  %309 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 1
  store float %306, float* %309, align 4
  %310 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 2
  store float %305, float* %310, align 4
  %311 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 3
  store float %304, float* %311, align 4
  %312 = fcmp uge float %210, %212
  %313 = fcmp uge float %211, %213
  %314 = or i1 %312, %313
  br i1 %314, label %316, label %315

315:                                              ; preds = %303
  call void @_ZN6SkRect4joinERKS_(%struct.SkRect* %1, %struct.SkRect* nonnull dereferenceable(16) %3) #5
  br label %316

316:                                              ; preds = %303, %315, %234, %263
  %317 = phi i1 [ true, %263 ], [ false, %234 ], [ true, %315 ], [ true, %303 ]
  %318 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %8, i64 0, i32 4, i32 0
  %319 = load i8*, i8** %318, align 8
  call void @_Z7sk_freePv(i8* %319) #5
  %320 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %8, i64 0, i32 3
  %321 = bitcast %class.SkTDArray.2* %320 to i8**
  %322 = load i8*, i8** %321, align 8
  call void @_Z7sk_freePv(i8* %322) #5
  %323 = bitcast %class.SkTDArray* %252 to i8**
  %324 = load i8*, i8** %323, align 8
  call void @_Z7sk_freePv(i8* %324) #5
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %248) #5
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %245) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %243) #5
  call void @llvm.lifetime.end.p0i8(i64 344, i8* nonnull %238) #5
  call void @_ZN12SkArenaAllocD2Ev(%class.SkArenaAlloc* %237) #5
  call void @llvm.lifetime.end.p0i8(i64 4128, i8* nonnull %235) #5
  br label %325

325:                                              ; preds = %316, %230
  %326 = phi i1 [ true, %230 ], [ %317, %316 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #5
  ret i1 %326
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN15SkOpGlobalStateC1EP15SkOpContourHeadP12SkArenaAlloc(%class.SkOpGlobalState*, %class.SkOpContourHead*, %class.SkArenaAlloc*) unnamed_addr #2

declare zeroext i1 @_ZN15SkOpEdgeBuilder6finishEv(%class.SkOpEdgeBuilder*) local_unnamed_addr #2

declare zeroext i1 @_Z15SortContourListPP15SkOpContourHeadbb(%class.SkOpContourHead**, i1 zeroext, i1 zeroext) local_unnamed_addr #2

declare void @_ZN6SkRect4joinERKS_(%struct.SkRect*, %struct.SkRect* dereferenceable(16)) local_unnamed_addr #2

declare zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect*, %struct.SkPoint*, i32) local_unnamed_addr #2

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #3

declare void @_ZN15SkOpEdgeBuilder4initEv(%class.SkOpEdgeBuilder*) local_unnamed_addr #2

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN12SkArenaAllocD2Ev(%class.SkArenaAlloc*) unnamed_addr #4

declare void @_ZN12SkArenaAllocC2EPcmm(%class.SkArenaAlloc*, i8*, i64, i64) unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { cold noreturn nounwind }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZNK6SkPath9RangeIterdeEv: argument 0"}
!5 = distinct !{!5, !"_ZNK6SkPath9RangeIterdeEv"}
