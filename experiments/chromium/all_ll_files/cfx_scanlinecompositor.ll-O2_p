; ModuleID = '../../third_party/pdfium/core/fxge/dib/cfx_scanlinecompositor.cpp'
source_filename = "../../third_party/pdfium/core/fxge/dib/cfx_scanlinecompositor.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CFX_ScanlineCompositor = type <{ i32, i16, i16, %"class.CFX_ScanlineCompositor::Palette", i32, i32, i32, i32, i32, i8, [3 x i8] }>
%"class.CFX_ScanlineCompositor::Palette" = type { i64, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i32* }
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr", i64 }
%"class.fxcrt::UnownedPtr" = type { i32* }
%"class.pdfium::span.1" = type { %"class.fxcrt::UnownedPtr.2", i64 }
%"class.fxcrt::UnownedPtr.2" = type { i8* }
%"class.pdfium::span.3" = type { %"class.fxcrt::UnownedPtr.4", i64 }
%"class.fxcrt::UnownedPtr.4" = type { i32* }
%"class.pdfium::span.5" = type { %"class.fxcrt::UnownedPtr.6", i64 }
%"class.fxcrt::UnownedPtr.6" = type { i8* }

@_ZN12_GLOBAL__N_110color_sqrtE = internal unnamed_addr constant [256 x i8] c"\00\03\07\0B\0F\12\16\19\1D #&),/257:<?ACFHJLNPRTVWY[\5C^`acdeghiklmnpqrstuvwxyz{|}~align 16

@_ZN22CFX_ScanlineCompositorC1Ev = hidden unnamed_addr alias void (%class.CFX_ScanlineCompositor*), void (%class.CFX_ScanlineCompositor*)* @_ZN22CFX_ScanlineCompositorC2Ev
@_ZN22CFX_ScanlineCompositorD1Ev = hidden unnamed_addr alias void (%class.CFX_ScanlineCompositor*), void (%class.CFX_ScanlineCompositor*)* @_ZN22CFX_ScanlineCompositorD2Ev
@_ZN22CFX_ScanlineCompositor7PaletteC1Ev = hidden unnamed_addr alias void (%"class.CFX_ScanlineCompositor::Palette"*), void (%"class.CFX_ScanlineCompositor::Palette"*)* @_ZN22CFX_ScanlineCompositor7PaletteC2Ev
@_ZN22CFX_ScanlineCompositor7PaletteD1Ev = hidden unnamed_addr alias void (%"class.CFX_ScanlineCompositor::Palette"*), void (%"class.CFX_ScanlineCompositor::Palette"*)* @_ZN22CFX_ScanlineCompositor7PaletteD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN22CFX_ScanlineCompositorC2Ev(%class.CFX_ScanlineCompositor* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 3
  %3 = bitcast %"class.CFX_ScanlineCompositor::Palette"* %2 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 24, i1 false) #7
  %4 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 8
  store i32 0, i32* %4, align 8
  %5 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 9
  store i8 0, i8* %5, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN22CFX_ScanlineCompositorD2Ev(%class.CFX_ScanlineCompositor* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 3, i32 2, i32 0, i32 0, i32 0
  %3 = load i32*, i32** %2, align 8
  store i32* null, i32** %2, align 8
  %4 = icmp eq i32* %3, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  %6 = bitcast i32* %3 to i8*
  tail call void @_Z7FX_FreePv(i8* nonnull %6) #7
  br label %7

7:                                                ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN22CFX_ScanlineCompositor4InitE12FXDIB_FormatS0_iN6pdfium4spanIKjEEj9BlendModebb(%class.CFX_ScanlineCompositor* nocapture, i16 zeroext, i16 zeroext, i32, %"class.pdfium::span"* nocapture readonly, i32, i32, i1 zeroext, i1 zeroext) local_unnamed_addr #0 align 2 {
  %10 = alloca %"class.pdfium::span", align 8
  %11 = zext i1 %8 to i8
  %12 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 1
  store i16 %2, i16* %12, align 4
  %13 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 2
  store i16 %1, i16* %13, align 2
  %14 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 8
  store i32 %6, i32* %14, align 8
  %15 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 9
  store i8 %11, i8* %15, align 4
  %16 = and i16 %1, 255
  %17 = icmp eq i16 %16, 1
  %18 = icmp eq i16 %16, 8
  %19 = and i1 %18, %8
  %20 = or i1 %17, %19
  br i1 %20, label %76, label %21

21:                                               ; preds = %9
  switch i16 %2, label %44 [
    i16 257, label %22
    i16 264, label %22
  ]

22:                                               ; preds = %21, %21
  %23 = lshr i32 %5, 24
  %24 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 4
  store i32 %23, i32* %24, align 8
  %25 = lshr i32 %5, 16
  %26 = and i32 %25, 255
  %27 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 5
  store i32 %26, i32* %27, align 4
  %28 = lshr i32 %5, 8
  %29 = and i32 %28, 255
  %30 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 6
  store i32 %29, i32* %30, align 8
  %31 = and i32 %5, 255
  %32 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 7
  store i32 %31, i32* %32, align 4
  %33 = icmp ne i16 %1, 264
  %34 = and i1 %33, %18
  br i1 %34, label %35, label %76

35:                                               ; preds = %22
  %36 = mul nuw nsw i32 %31, 11
  %37 = mul nuw nsw i32 %29, 59
  %38 = add nuw nsw i32 %37, %36
  %39 = mul nuw nsw i32 %26, 30
  %40 = add nuw nsw i32 %38, %39
  %41 = trunc i32 %40 to i16
  %42 = udiv i16 %41, 100
  %43 = zext i16 %42 to i32
  store i32 %43, i32* %27, align 4
  br label %76

44:                                               ; preds = %21
  %45 = and i16 %2, 255
  %46 = icmp ult i16 %45, 9
  br i1 %46, label %47, label %62

47:                                               ; preds = %44
  %48 = icmp eq i16 %1, 264
  br i1 %48, label %76, label %49

49:                                               ; preds = %47
  %50 = bitcast %"class.pdfium::span"* %10 to i8*
  %51 = bitcast %"class.pdfium::span"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %50, i8* align 8 %51, i64 16, i1 false)
  call void @_ZN22CFX_ScanlineCompositor17InitSourcePaletteE12FXDIB_FormatS0_N6pdfium4spanIKjEE(%class.CFX_ScanlineCompositor* %0, i16 zeroext %2, i16 zeroext %1, %"class.pdfium::span"* nonnull %10)
  %52 = icmp eq i16 %1, 544
  %53 = zext i1 %52 to i32
  %54 = lshr i16 %1, 8
  %55 = and i16 %54, 2
  %56 = zext i16 %55 to i32
  %57 = or i32 %56, %53
  %58 = icmp eq i16 %45, 1
  %59 = select i1 %58, i32 8, i32 0
  %60 = or i32 %57, %59
  %61 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 0
  store i32 %60, i32* %61, align 8
  br label %76

62:                                               ; preds = %44
  %63 = lshr i16 %2, 9
  %64 = and i16 %63, 1
  %65 = lshr i16 %1, 8
  %66 = and i16 %65, 2
  %67 = or i16 %64, %66
  %68 = xor i16 %67, 3
  %69 = zext i16 %68 to i32
  %70 = icmp eq i32 %6, 0
  %71 = select i1 %70, i32 4, i32 0
  %72 = or i32 %71, %69
  %73 = select i1 %7, i32 8, i32 0
  %74 = or i32 %72, %73
  %75 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 0
  store i32 %74, i32* %75, align 8
  br label %76

76:                                               ; preds = %35, %22, %47, %9, %62, %49
  %77 = phi i1 [ true, %49 ], [ true, %62 ], [ false, %9 ], [ true, %47 ], [ true, %22 ], [ true, %35 ]
  ret i1 %77
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN22CFX_ScanlineCompositor14InitSourceMaskEj(%class.CFX_ScanlineCompositor* nocapture, i32) local_unnamed_addr #1 align 2 {
  %3 = lshr i32 %1, 24
  %4 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 4
  store i32 %3, i32* %4, align 8
  %5 = lshr i32 %1, 16
  %6 = and i32 %5, 255
  %7 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 5
  store i32 %6, i32* %7, align 4
  %8 = lshr i32 %1, 8
  %9 = and i32 %8, 255
  %10 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 6
  store i32 %9, i32* %10, align 8
  %11 = and i32 %1, 255
  %12 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 7
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 2
  %14 = load i16, i16* %13, align 2
  %15 = icmp ne i16 %14, 264
  %16 = and i16 %14, 255
  %17 = icmp eq i16 %16, 8
  %18 = and i1 %15, %17
  br i1 %18, label %19, label %28

19:                                               ; preds = %2
  %20 = mul nuw nsw i32 %11, 11
  %21 = mul nuw nsw i32 %9, 59
  %22 = add nuw nsw i32 %21, %20
  %23 = mul nuw nsw i32 %6, 30
  %24 = add nuw nsw i32 %22, %23
  %25 = trunc i32 %24 to i16
  %26 = udiv i16 %25, 100
  %27 = zext i16 %26 to i32
  store i32 %27, i32* %7, align 4
  br label %28

28:                                               ; preds = %2, %19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN22CFX_ScanlineCompositor17InitSourcePaletteE12FXDIB_FormatS0_N6pdfium4spanIKjEE(%class.CFX_ScanlineCompositor* nocapture, i16 zeroext, i16 zeroext, %"class.pdfium::span"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 3
  %6 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 3, i32 2, i32 0, i32 0, i32 0
  %7 = bitcast %"class.CFX_ScanlineCompositor::Palette"* %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 16, i1 false) #7
  %8 = load i32*, i32** %6, align 8
  store i32* null, i32** %6, align 8
  %9 = icmp eq i32* %8, null
  br i1 %9, label %12, label %10

10:                                               ; preds = %4
  %11 = bitcast i32* %8 to i8*
  tail call void @_Z7FX_FreePv(i8* nonnull %11) #7
  br label %12

12:                                               ; preds = %4, %10
  %13 = and i16 %2, 255
  %14 = icmp eq i16 %13, 8
  %15 = and i16 %1, 255
  %16 = zext i16 %15 to i64
  %17 = shl i64 1, %16
  %18 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %3, i64 0, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = icmp eq i64 %19, 0
  %21 = getelementptr inbounds %"class.CFX_ScanlineCompositor::Palette", %"class.CFX_ScanlineCompositor::Palette"* %5, i64 0, i32 0
  br i1 %20, label %96, label %22

22:                                               ; preds = %12
  br i1 %14, label %23, label %64

23:                                               ; preds = %22
  store i64 1, i64* %21, align 8, !noalias !2
  %24 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 3, i32 1
  store i64 %17, i64* %24, align 8, !noalias !2
  %25 = tail call i8* @_ZN6pdfium8internal11CallocOrDieEmm(i64 %17, i64 1) #7, !noalias !2
  %26 = load i32*, i32** %6, align 8, !noalias !2
  %27 = bitcast i32** %6 to i8**
  store i8* %25, i8** %27, align 8, !noalias !2
  %28 = icmp eq i32* %26, null
  br i1 %28, label %32, label %29

29:                                               ; preds = %23
  %30 = bitcast i32* %26 to i8*
  tail call void @_Z7FX_FreePv(i8* nonnull %30) #7, !noalias !2
  %31 = load i8*, i8** %27, align 8, !noalias !2
  br label %32

32:                                               ; preds = %23, %29
  %33 = phi i8* [ %31, %29 ], [ %25, %23 ]
  %34 = load i64, i64* %24, align 8, !noalias !2
  %35 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %3, i64 0, i32 0, i32 0
  br label %36

36:                                               ; preds = %32, %47
  %37 = phi i64 [ 0, %32 ], [ %62, %47 ]
  %38 = load i64, i64* %18, align 8
  %39 = icmp ugt i64 %38, %37
  br i1 %39, label %41, label %40, !prof !5

40:                                               ; preds = %36
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !6
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !7
  unreachable

41:                                               ; preds = %36
  %42 = load i32*, i32** %35, align 8
  %43 = getelementptr inbounds i32, i32* %42, i64 %37
  %44 = load i32, i32* %43, align 4
  %45 = icmp eq i64 %37, %34
  br i1 %45, label %46, label %47, !prof !8

46:                                               ; preds = %41
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !6
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !7
  unreachable

47:                                               ; preds = %41
  %48 = and i32 %44, 255
  %49 = mul nuw nsw i32 %48, 11
  %50 = lshr i32 %44, 8
  %51 = and i32 %50, 255
  %52 = mul nuw nsw i32 %51, 59
  %53 = add nuw nsw i32 %52, %49
  %54 = lshr i32 %44, 16
  %55 = and i32 %54, 255
  %56 = mul nuw nsw i32 %55, 30
  %57 = add nuw nsw i32 %53, %56
  %58 = trunc i32 %57 to i16
  %59 = udiv i16 %58, 100
  %60 = trunc i16 %59 to i8
  %61 = getelementptr inbounds i8, i8* %33, i64 %37
  store i8 %60, i8* %61, align 1
  %62 = add nuw i64 %37, 1
  %63 = icmp ult i64 %62, %17
  br i1 %63, label %36, label %173

64:                                               ; preds = %22
  store i64 4, i64* %21, align 8, !noalias !9
  %65 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 3, i32 1
  store i64 %17, i64* %65, align 8, !noalias !9
  %66 = tail call i8* @_ZN6pdfium8internal11CallocOrDieEmm(i64 %17, i64 4) #7, !noalias !9
  %67 = load i32*, i32** %6, align 8, !noalias !9
  %68 = bitcast i32** %6 to i8**
  store i8* %66, i8** %68, align 8, !noalias !9
  %69 = icmp eq i32* %67, null
  br i1 %69, label %70, label %72

70:                                               ; preds = %64
  %71 = ptrtoint i8* %66 to i64
  br label %76

72:                                               ; preds = %64
  %73 = bitcast i32* %67 to i8*
  tail call void @_Z7FX_FreePv(i8* nonnull %73) #7, !noalias !9
  %74 = bitcast i32** %6 to i64*
  %75 = load i64, i64* %74, align 8, !noalias !9
  br label %76

76:                                               ; preds = %70, %72
  %77 = phi i64 [ %71, %70 ], [ %75, %72 ]
  %78 = load i64, i64* %65, align 8, !noalias !9
  %79 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %3, i64 0, i32 0, i32 0
  %80 = inttoptr i64 %77 to i32*
  br label %81

81:                                               ; preds = %76, %89
  %82 = phi i64 [ 0, %76 ], [ %94, %89 ]
  %83 = load i64, i64* %18, align 8
  %84 = icmp ugt i64 %83, %82
  br i1 %84, label %86, label %85, !prof !5

85:                                               ; preds = %81
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !6
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !7
  unreachable

86:                                               ; preds = %81
  %87 = icmp eq i64 %82, %78
  br i1 %87, label %88, label %89, !prof !8

88:                                               ; preds = %86
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !6
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !7
  unreachable

89:                                               ; preds = %86
  %90 = load i32*, i32** %79, align 8
  %91 = getelementptr inbounds i32, i32* %90, i64 %82
  %92 = load i32, i32* %91, align 4
  %93 = getelementptr inbounds i32, i32* %80, i64 %82
  store i32 %92, i32* %93, align 4
  %94 = add nuw i64 %82, 1
  %95 = icmp ult i64 %94, %17
  br i1 %95, label %81, label %173

96:                                               ; preds = %12
  br i1 %14, label %97, label %133

97:                                               ; preds = %96
  store i64 1, i64* %21, align 8, !noalias !12
  %98 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 3, i32 1
  store i64 %17, i64* %98, align 8, !noalias !12
  %99 = tail call i8* @_ZN6pdfium8internal11CallocOrDieEmm(i64 %17, i64 1) #7, !noalias !12
  %100 = load i32*, i32** %6, align 8, !noalias !12
  %101 = bitcast i32** %6 to i8**
  store i8* %99, i8** %101, align 8, !noalias !12
  %102 = icmp eq i32* %100, null
  br i1 %102, label %103, label %105

103:                                              ; preds = %97
  %104 = ptrtoint i8* %99 to i64
  br label %109

105:                                              ; preds = %97
  %106 = bitcast i32* %100 to i8*
  tail call void @_Z7FX_FreePv(i8* nonnull %106) #7, !noalias !12
  %107 = bitcast i32** %6 to i64*
  %108 = load i64, i64* %107, align 8, !noalias !12
  br label %109

109:                                              ; preds = %103, %105
  %110 = phi i64 [ %104, %103 ], [ %108, %105 ]
  %111 = load i64, i64* %98, align 8, !noalias !12
  %112 = icmp eq i16 %15, 1
  br i1 %112, label %115, label %113

113:                                              ; preds = %109
  %114 = inttoptr i64 %110 to i8*
  br label %124

115:                                              ; preds = %109
  %116 = icmp eq i64 %111, 0
  br i1 %116, label %117, label %118, !prof !8

117:                                              ; preds = %115
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !6
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !7
  unreachable

118:                                              ; preds = %115
  %119 = inttoptr i64 %110 to i8*
  store i8 0, i8* %119, align 1
  %120 = icmp eq i64 %111, 1
  br i1 %120, label %121, label %122, !prof !8

121:                                              ; preds = %118
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !6
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !7
  unreachable

122:                                              ; preds = %118
  %123 = getelementptr inbounds i8, i8* %119, i64 1
  store i8 -1, i8* %123, align 1
  br label %173

124:                                              ; preds = %113, %128
  %125 = phi i64 [ 0, %113 ], [ %131, %128 ]
  %126 = icmp eq i64 %125, %111
  br i1 %126, label %127, label %128, !prof !8

127:                                              ; preds = %124
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !6
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !7
  unreachable

128:                                              ; preds = %124
  %129 = trunc i64 %125 to i8
  %130 = getelementptr inbounds i8, i8* %114, i64 %125
  store i8 %129, i8* %130, align 1
  %131 = add nuw i64 %125, 1
  %132 = icmp ult i64 %131, %17
  br i1 %132, label %124, label %173

133:                                              ; preds = %96
  store i64 4, i64* %21, align 8, !noalias !15
  %134 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 3, i32 1
  store i64 %17, i64* %134, align 8, !noalias !15
  %135 = tail call i8* @_ZN6pdfium8internal11CallocOrDieEmm(i64 %17, i64 4) #7, !noalias !15
  %136 = load i32*, i32** %6, align 8, !noalias !15
  %137 = bitcast i32** %6 to i8**
  store i8* %135, i8** %137, align 8, !noalias !15
  %138 = icmp eq i32* %136, null
  br i1 %138, label %139, label %141

139:                                              ; preds = %133
  %140 = ptrtoint i8* %135 to i64
  br label %145

141:                                              ; preds = %133
  %142 = bitcast i32* %136 to i8*
  tail call void @_Z7FX_FreePv(i8* nonnull %142) #7, !noalias !15
  %143 = bitcast i32** %6 to i64*
  %144 = load i64, i64* %143, align 8, !noalias !15
  br label %145

145:                                              ; preds = %139, %141
  %146 = phi i64 [ %140, %139 ], [ %144, %141 ]
  %147 = load i64, i64* %134, align 8, !noalias !15
  %148 = icmp eq i16 %15, 1
  br i1 %148, label %151, label %149

149:                                              ; preds = %145
  %150 = inttoptr i64 %146 to i32*
  br label %160

151:                                              ; preds = %145
  %152 = icmp eq i64 %147, 0
  br i1 %152, label %153, label %154, !prof !8

153:                                              ; preds = %151
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !6
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !7
  unreachable

154:                                              ; preds = %151
  %155 = inttoptr i64 %146 to i32*
  store i32 -16777216, i32* %155, align 4
  %156 = icmp eq i64 %147, 1
  br i1 %156, label %157, label %158, !prof !8

157:                                              ; preds = %154
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !6
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !7
  unreachable

158:                                              ; preds = %154
  %159 = getelementptr inbounds i32, i32* %155, i64 1
  store i32 -1, i32* %159, align 4
  br label %173

160:                                              ; preds = %149, %165
  %161 = phi i64 [ 0, %149 ], [ %171, %165 ]
  %162 = trunc i64 %161 to i32
  %163 = icmp eq i64 %161, %147
  br i1 %163, label %164, label %165, !prof !8

164:                                              ; preds = %160
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !6
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !7
  unreachable

165:                                              ; preds = %160
  %166 = shl i32 %162, 16
  %167 = shl i32 %162, 8
  %168 = or i32 %167, %162
  %169 = or i32 %168, %166
  %170 = getelementptr inbounds i32, i32* %150, i64 %161
  store i32 %169, i32* %170, align 4
  %171 = add nuw i64 %161, 1
  %172 = icmp ult i64 %171, %17
  br i1 %172, label %160, label %173

173:                                              ; preds = %89, %47, %165, %128, %158, %122
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN22CFX_ScanlineCompositor7Palette5ResetEv(%"class.CFX_ScanlineCompositor::Palette"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.CFX_ScanlineCompositor::Palette", %"class.CFX_ScanlineCompositor::Palette"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %3 = bitcast %"class.CFX_ScanlineCompositor::Palette"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 16, i1 false)
  %4 = load i32*, i32** %2, align 8
  store i32* null, i32** %2, align 8
  %5 = icmp eq i32* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  %7 = bitcast i32* %4 to i8*
  tail call void @_Z7FX_FreePv(i8* nonnull %7) #7
  br label %8

8:                                                ; preds = %1, %6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN22CFX_ScanlineCompositor7Palette15Make8BitPaletteEm(%"class.pdfium::span.1"* noalias nocapture sret, %"class.CFX_ScanlineCompositor::Palette"* nocapture, i64) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.CFX_ScanlineCompositor::Palette", %"class.CFX_ScanlineCompositor::Palette"* %1, i64 0, i32 0
  store i64 1, i64* %4, align 8
  %5 = getelementptr inbounds %"class.CFX_ScanlineCompositor::Palette", %"class.CFX_ScanlineCompositor::Palette"* %1, i64 0, i32 1
  store i64 %2, i64* %5, align 8
  %6 = tail call i8* @_ZN6pdfium8internal11CallocOrDieEmm(i64 %2, i64 1) #7
  %7 = getelementptr inbounds %"class.CFX_ScanlineCompositor::Palette", %"class.CFX_ScanlineCompositor::Palette"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %8 = load i32*, i32** %7, align 8
  %9 = bitcast i32** %7 to i8**
  store i8* %6, i8** %9, align 8
  %10 = icmp eq i32* %8, null
  br i1 %10, label %11, label %13

11:                                               ; preds = %3
  %12 = ptrtoint i8* %6 to i64
  br label %17

13:                                               ; preds = %3
  %14 = bitcast i32* %8 to i8*
  tail call void @_Z7FX_FreePv(i8* nonnull %14) #7
  %15 = bitcast i32** %7 to i64*
  %16 = load i64, i64* %15, align 8
  br label %17

17:                                               ; preds = %11, %13
  %18 = phi i64 [ %12, %11 ], [ %16, %13 ]
  %19 = load i64, i64* %5, align 8
  %20 = bitcast %"class.pdfium::span.1"* %0 to i64*
  store i64 %18, i64* %20, align 8
  %21 = getelementptr inbounds %"class.pdfium::span.1", %"class.pdfium::span.1"* %0, i64 0, i32 1
  store i64 %19, i64* %21, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN22CFX_ScanlineCompositor7Palette16Make32BitPaletteEm(%"class.pdfium::span.3"* noalias nocapture sret, %"class.CFX_ScanlineCompositor::Palette"* nocapture, i64) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.CFX_ScanlineCompositor::Palette", %"class.CFX_ScanlineCompositor::Palette"* %1, i64 0, i32 0
  store i64 4, i64* %4, align 8
  %5 = getelementptr inbounds %"class.CFX_ScanlineCompositor::Palette", %"class.CFX_ScanlineCompositor::Palette"* %1, i64 0, i32 1
  store i64 %2, i64* %5, align 8
  %6 = tail call i8* @_ZN6pdfium8internal11CallocOrDieEmm(i64 %2, i64 4) #7
  %7 = getelementptr inbounds %"class.CFX_ScanlineCompositor::Palette", %"class.CFX_ScanlineCompositor::Palette"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %8 = load i32*, i32** %7, align 8
  %9 = bitcast i32** %7 to i8**
  store i8* %6, i8** %9, align 8
  %10 = icmp eq i32* %8, null
  br i1 %10, label %11, label %13

11:                                               ; preds = %3
  %12 = ptrtoint i8* %6 to i64
  br label %17

13:                                               ; preds = %3
  %14 = bitcast i32* %8 to i8*
  tail call void @_Z7FX_FreePv(i8* nonnull %14) #7
  %15 = bitcast i32** %7 to i64*
  %16 = load i64, i64* %15, align 8
  br label %17

17:                                               ; preds = %11, %13
  %18 = phi i64 [ %12, %11 ], [ %16, %13 ]
  %19 = load i64, i64* %5, align 8
  %20 = bitcast %"class.pdfium::span.3"* %0 to i64*
  store i64 %18, i64* %20, align 8
  %21 = getelementptr inbounds %"class.pdfium::span.3", %"class.pdfium::span.3"* %0, i64 0, i32 1
  store i64 %19, i64* %21, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN22CFX_ScanlineCompositor22CompositeRgbBitmapLineEPhPKhiS2_S2_S0_(%class.CFX_ScanlineCompositor* nocapture readonly, i8*, i8* readonly, i32, i8* readonly, i8* readonly, i8*) local_unnamed_addr #0 align 2 {
  %8 = alloca [3 x i8], align 1
  %9 = alloca [3 x i32], align 4
  %10 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 1
  %11 = load i16, i16* %10, align 4
  %12 = lshr i16 %11, 3
  %13 = and i16 %12, 31
  %14 = zext i16 %13 to i32
  %15 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 2
  %16 = load i16, i16* %15, align 2
  %17 = lshr i16 %16, 3
  %18 = and i16 %17, 31
  %19 = zext i16 %18 to i32
  %20 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 9
  %21 = load i8, i8* %20, align 4, !range !18
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %1037, label %23

23:                                               ; preds = %7
  %24 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 0
  %25 = load i32, i32* %24, align 8
  switch i32 %25, label %2974 [
    i32 0, label %26
    i32 4, label %26
    i32 8, label %26
    i32 12, label %26
    i32 1, label %240
    i32 2, label %349
    i32 10, label %349
    i32 3, label %451
    i32 5, label %514
    i32 6, label %542
    i32 14, label %542
    i32 7, label %614
    i32 9, label %647
    i32 11, label %794
    i32 13, label %891
    i32 15, label %973
  ]

26:                                               ; preds = %23, %23, %23, %23
  %27 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 8
  %28 = load i32, i32* %27, align 8
  %29 = bitcast [3 x i32]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %29) #7
  %30 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 0
  store i32 -1431655766, i32* %30, align 4
  %31 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 1
  store i32 -1431655766, i32* %31, align 4
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 2
  store i32 -1431655766, i32* %32, align 4
  %33 = and i32 %28, -4
  %34 = icmp eq i32 %33, 12
  %35 = icmp sgt i32 %3, 0
  br i1 %35, label %36, label %239

36:                                               ; preds = %26
  %37 = icmp eq i8* %4, null
  %38 = getelementptr inbounds [3 x i8], [3 x i8]* %8, i64 0, i64 0
  %39 = getelementptr inbounds [3 x i8], [3 x i8]* %8, i64 0, i64 1
  %40 = getelementptr inbounds [3 x i8], [3 x i8]* %8, i64 0, i64 2
  %41 = icmp eq i32 %28, 0
  %42 = zext i32 %3 to i64
  br label %43

43:                                               ; preds = %134, %36
  %44 = phi i64 [ 0, %36 ], [ %137, %134 ]
  %45 = phi i8* [ %1, %36 ], [ %136, %134 ]
  %46 = phi i8* [ %2, %36 ], [ %135, %134 ]
  %47 = getelementptr inbounds i8, i8* %45, i64 3
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i32
  %50 = icmp eq i8 %48, 0
  br i1 %50, label %51, label %79

51:                                               ; preds = %43
  br i1 %37, label %69, label %52

52:                                               ; preds = %51
  %53 = getelementptr inbounds i8, i8* %4, i64 %44
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i16
  %56 = getelementptr inbounds i8, i8* %46, i64 3
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i16
  %59 = mul nuw i16 %58, %55
  %60 = udiv i16 %59, 255
  %61 = load i8, i8* %46, align 1
  %62 = getelementptr inbounds i8, i8* %45, i64 2
  store i8 %61, i8* %62, align 1
  %63 = getelementptr inbounds i8, i8* %46, i64 1
  %64 = load i8, i8* %63, align 1
  %65 = getelementptr inbounds i8, i8* %45, i64 1
  store i8 %64, i8* %65, align 1
  %66 = getelementptr inbounds i8, i8* %46, i64 2
  %67 = load i8, i8* %66, align 1
  store i8 %67, i8* %45, align 1
  %68 = trunc i16 %60 to i8
  store i8 %68, i8* %47, align 1
  br label %134

69:                                               ; preds = %51
  %70 = getelementptr inbounds i8, i8* %46, i64 3
  %71 = load i8, i8* %70, align 1
  store i8 %71, i8* %47, align 1
  %72 = getelementptr inbounds i8, i8* %46, i64 2
  %73 = load i8, i8* %72, align 1
  store i8 %73, i8* %45, align 1
  %74 = getelementptr inbounds i8, i8* %46, i64 1
  %75 = load i8, i8* %74, align 1
  %76 = getelementptr inbounds i8, i8* %45, i64 1
  store i8 %75, i8* %76, align 1
  %77 = load i8, i8* %46, align 1
  %78 = getelementptr inbounds i8, i8* %45, i64 2
  store i8 %77, i8* %78, align 1
  br label %134

79:                                               ; preds = %43
  %80 = getelementptr inbounds i8, i8* %46, i64 3
  %81 = load i8, i8* %80, align 1
  br i1 %37, label %90, label %82

82:                                               ; preds = %79
  %83 = getelementptr inbounds i8, i8* %4, i64 %44
  %84 = load i8, i8* %83, align 1
  %85 = zext i8 %84 to i16
  %86 = zext i8 %81 to i16
  %87 = mul nuw i16 %85, %86
  %88 = udiv i16 %87, 255
  %89 = zext i16 %88 to i32
  br label %92

90:                                               ; preds = %79
  %91 = zext i8 %81 to i32
  br label %92

92:                                               ; preds = %90, %82
  %93 = phi i32 [ %89, %82 ], [ %91, %90 ]
  %94 = and i32 %93, 255
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %134, label %96

96:                                               ; preds = %92
  %97 = add nuw nsw i32 %93, %49
  %98 = mul nuw nsw i32 %94, %49
  %99 = trunc i32 %98 to i16
  %100 = udiv i16 %99, 255
  %101 = zext i16 %100 to i32
  %102 = sub nsw i32 %97, %101
  %103 = trunc i32 %102 to i8
  store i8 %103, i8* %47, align 1
  %104 = trunc i32 %94 to i16
  %105 = mul nuw i16 %104, 255
  %106 = trunc i32 %102 to i16
  %107 = and i16 %106, 255
  %108 = udiv i16 %105, %107
  %109 = zext i16 %108 to i32
  br i1 %34, label %110, label %116

110:                                              ; preds = %96
  call void @llvm.lifetime.start.p0i8(i64 3, i8* nonnull %38) #7
  %111 = load i8, i8* %45, align 1
  store i8 %111, i8* %40, align 1
  %112 = getelementptr inbounds i8, i8* %45, i64 1
  %113 = load i8, i8* %112, align 1
  store i8 %113, i8* %39, align 1
  %114 = getelementptr inbounds i8, i8* %45, i64 2
  %115 = load i8, i8* %114, align 1
  store i8 %115, i8* %38, align 1
  call fastcc void @_ZN12_GLOBAL__N_19RGB_BlendE9BlendModePKhS2_Pi(i32 %28, i8* %46, i8* nonnull %38, i32* nonnull %30) #7
  call void @llvm.lifetime.end.p0i8(i64 3, i8* nonnull %38) #7
  br label %116

116:                                              ; preds = %110, %96
  %117 = xor i32 %49, 255
  %118 = sub nsw i32 255, %109
  br i1 %41, label %204, label %119

119:                                              ; preds = %116
  br i1 %34, label %120, label %127

120:                                              ; preds = %119
  %121 = load i32, i32* %30, align 4
  %122 = load i8, i8* %46, align 1
  %123 = getelementptr inbounds i8, i8* %45, i64 2
  %124 = load i8, i8* %123, align 1
  %125 = zext i8 %122 to i32
  %126 = zext i8 %124 to i32
  br label %139

127:                                              ; preds = %119
  %128 = getelementptr inbounds i8, i8* %45, i64 2
  %129 = load i8, i8* %128, align 1
  %130 = zext i8 %129 to i32
  %131 = load i8, i8* %46, align 1
  %132 = zext i8 %131 to i32
  %133 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %28, i32 %130, i32 %132) #7
  br label %139

134:                                              ; preds = %232, %92, %69, %52
  %135 = getelementptr inbounds i8, i8* %46, i64 4
  %136 = getelementptr inbounds i8, i8* %45, i64 4
  %137 = add nuw nsw i64 %44, 1
  %138 = icmp eq i64 %137, %42
  br i1 %138, label %239, label %43

139:                                              ; preds = %127, %120
  %140 = phi i32 [ %130, %127 ], [ %126, %120 ]
  %141 = phi i32 [ %132, %127 ], [ %125, %120 ]
  %142 = phi i32 [ %133, %127 ], [ %121, %120 ]
  %143 = mul nuw nsw i32 %141, %117
  %144 = mul nsw i32 %142, %49
  %145 = add nsw i32 %144, %143
  %146 = sdiv i32 %145, 255
  %147 = getelementptr inbounds i8, i8* %45, i64 2
  %148 = mul nsw i32 %140, %118
  %149 = mul nsw i32 %146, %109
  %150 = add nsw i32 %149, %148
  %151 = sdiv i32 %150, 255
  %152 = trunc i32 %151 to i8
  store i8 %152, i8* %147, align 1
  %153 = getelementptr inbounds i8, i8* %46, i64 1
  br i1 %34, label %161, label %154

154:                                              ; preds = %139
  %155 = getelementptr inbounds i8, i8* %45, i64 1
  %156 = load i8, i8* %155, align 1
  %157 = zext i8 %156 to i32
  %158 = load i8, i8* %153, align 1
  %159 = zext i8 %158 to i32
  %160 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %28, i32 %157, i32 %159) #7
  br label %168

161:                                              ; preds = %139
  %162 = load i32, i32* %31, align 4
  %163 = load i8, i8* %153, align 1
  %164 = getelementptr inbounds i8, i8* %45, i64 1
  %165 = load i8, i8* %164, align 1
  %166 = zext i8 %163 to i32
  %167 = zext i8 %165 to i32
  br label %168

168:                                              ; preds = %161, %154
  %169 = phi i32 [ %167, %161 ], [ %157, %154 ]
  %170 = phi i32 [ %166, %161 ], [ %159, %154 ]
  %171 = phi i32 [ %162, %161 ], [ %160, %154 ]
  %172 = mul nuw nsw i32 %170, %117
  %173 = mul nsw i32 %171, %49
  %174 = add nsw i32 %173, %172
  %175 = sdiv i32 %174, 255
  %176 = getelementptr inbounds i8, i8* %45, i64 1
  %177 = mul nsw i32 %169, %118
  %178 = mul nsw i32 %175, %109
  %179 = add nsw i32 %178, %177
  %180 = sdiv i32 %179, 255
  %181 = trunc i32 %180 to i8
  store i8 %181, i8* %176, align 1
  %182 = getelementptr inbounds i8, i8* %46, i64 2
  br i1 %34, label %189, label %183

183:                                              ; preds = %168
  %184 = load i8, i8* %45, align 1
  %185 = zext i8 %184 to i32
  %186 = load i8, i8* %182, align 1
  %187 = zext i8 %186 to i32
  %188 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %28, i32 %185, i32 %187) #7
  br label %195

189:                                              ; preds = %168
  %190 = load i32, i32* %32, align 4
  %191 = load i8, i8* %182, align 1
  %192 = load i8, i8* %45, align 1
  %193 = zext i8 %191 to i32
  %194 = zext i8 %192 to i32
  br label %195

195:                                              ; preds = %189, %183
  %196 = phi i32 [ %194, %189 ], [ %185, %183 ]
  %197 = phi i32 [ %193, %189 ], [ %187, %183 ]
  %198 = phi i32 [ %190, %189 ], [ %188, %183 ]
  %199 = mul nuw nsw i32 %197, %117
  %200 = mul nsw i32 %198, %49
  %201 = add nsw i32 %200, %199
  %202 = sdiv i32 %201, 255
  %203 = mul nsw i32 %196, %118
  br label %232

204:                                              ; preds = %116
  %205 = getelementptr inbounds i8, i8* %45, i64 2
  %206 = load i8, i8* %205, align 1
  %207 = zext i8 %206 to i32
  %208 = mul nsw i32 %118, %207
  %209 = load i8, i8* %46, align 1
  %210 = zext i8 %209 to i32
  %211 = mul nuw nsw i32 %210, %109
  %212 = add nsw i32 %211, %208
  %213 = sdiv i32 %212, 255
  %214 = trunc i32 %213 to i8
  store i8 %214, i8* %205, align 1
  %215 = getelementptr inbounds i8, i8* %46, i64 1
  %216 = getelementptr inbounds i8, i8* %45, i64 1
  %217 = load i8, i8* %216, align 1
  %218 = zext i8 %217 to i32
  %219 = mul nsw i32 %118, %218
  %220 = load i8, i8* %215, align 1
  %221 = zext i8 %220 to i32
  %222 = mul nuw nsw i32 %221, %109
  %223 = add nsw i32 %222, %219
  %224 = sdiv i32 %223, 255
  %225 = trunc i32 %224 to i8
  store i8 %225, i8* %216, align 1
  %226 = getelementptr inbounds i8, i8* %46, i64 2
  %227 = load i8, i8* %45, align 1
  %228 = zext i8 %227 to i32
  %229 = mul nsw i32 %118, %228
  %230 = load i8, i8* %226, align 1
  %231 = zext i8 %230 to i32
  br label %232

232:                                              ; preds = %204, %195
  %233 = phi i32 [ %231, %204 ], [ %202, %195 ]
  %234 = phi i32 [ %229, %204 ], [ %203, %195 ]
  %235 = mul nsw i32 %233, %109
  %236 = add nsw i32 %235, %234
  %237 = sdiv i32 %236, 255
  %238 = trunc i32 %237 to i8
  store i8 %238, i8* %45, align 1
  br label %134

239:                                              ; preds = %134, %26
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %29) #7
  br label %2974

240:                                              ; preds = %23
  %241 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 8
  %242 = load i32, i32* %241, align 8
  %243 = bitcast [3 x i32]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %243) #7
  %244 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 0
  store i32 -1431655766, i32* %244, align 4
  %245 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 1
  store i32 -1431655766, i32* %245, align 4
  %246 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 2
  store i32 -1431655766, i32* %246, align 4
  %247 = and i32 %242, -4
  %248 = icmp eq i32 %247, 12
  %249 = icmp sgt i32 %3, 0
  br i1 %249, label %250, label %348

250:                                              ; preds = %240
  %251 = add nsw i32 %14, -3
  %252 = getelementptr inbounds [3 x i8], [3 x i8]* %8, i64 0, i64 0
  %253 = getelementptr inbounds [3 x i8], [3 x i8]* %8, i64 0, i64 1
  %254 = getelementptr inbounds [3 x i8], [3 x i8]* %8, i64 0, i64 2
  %255 = sext i32 %251 to i64
  %256 = icmp eq i16 %13, 4
  %257 = zext i16 %13 to i64
  br label %258

258:                                              ; preds = %310, %250
  %259 = phi i32 [ 0, %250 ], [ %313, %310 ]
  %260 = phi i8* [ %1, %250 ], [ %312, %310 ]
  %261 = phi i8* [ %2, %250 ], [ %311, %310 ]
  %262 = getelementptr inbounds i8, i8* %260, i64 3
  %263 = load i8, i8* %262, align 1
  %264 = zext i8 %263 to i32
  %265 = icmp eq i8 %263, 0
  br i1 %265, label %266, label %280

266:                                              ; preds = %258
  br i1 %256, label %267, label %270

267:                                              ; preds = %266
  %268 = getelementptr inbounds i8, i8* %261, i64 3
  %269 = load i8, i8* %268, align 1
  br label %270

270:                                              ; preds = %266, %267
  %271 = phi i8 [ %269, %267 ], [ -1, %266 ]
  %272 = getelementptr inbounds i8, i8* %261, i64 2
  store i8 %271, i8* %262, align 1
  %273 = getelementptr inbounds i8, i8* %261, i64 1
  %274 = load i8, i8* %272, align 1
  store i8 %274, i8* %260, align 1
  %275 = load i8, i8* %273, align 1
  %276 = getelementptr inbounds i8, i8* %260, i64 1
  store i8 %275, i8* %276, align 1
  %277 = load i8, i8* %261, align 1
  %278 = getelementptr inbounds i8, i8* %260, i64 2
  store i8 %277, i8* %278, align 1
  %279 = getelementptr inbounds i8, i8* %261, i64 %257
  br label %310

280:                                              ; preds = %258
  store i8 -1, i8* %262, align 1
  br i1 %248, label %281, label %290

281:                                              ; preds = %280
  call void @llvm.lifetime.start.p0i8(i64 3, i8* nonnull %252) #7
  %282 = load i8, i8* %260, align 1
  store i8 %282, i8* %254, align 1
  %283 = getelementptr inbounds i8, i8* %260, i64 1
  %284 = load i8, i8* %283, align 1
  store i8 %284, i8* %253, align 1
  %285 = getelementptr inbounds i8, i8* %260, i64 2
  %286 = load i8, i8* %285, align 1
  store i8 %286, i8* %252, align 1
  call fastcc void @_ZN12_GLOBAL__N_19RGB_BlendE9BlendModePKhS2_Pi(i32 %242, i8* %261, i8* nonnull %252, i32* nonnull %244) #7
  call void @llvm.lifetime.end.p0i8(i64 3, i8* nonnull %252) #7
  %287 = load i8, i8* %261, align 1
  %288 = zext i8 %287 to i32
  %289 = load i32, i32* %244, align 4
  br label %297

290:                                              ; preds = %280
  %291 = load i8, i8* %261, align 1
  %292 = zext i8 %291 to i32
  %293 = getelementptr inbounds i8, i8* %260, i64 2
  %294 = load i8, i8* %293, align 1
  %295 = zext i8 %294 to i32
  %296 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %242, i32 %295, i32 %292) #7
  br label %297

297:                                              ; preds = %290, %281
  %298 = phi i32 [ %288, %281 ], [ %292, %290 ]
  %299 = phi i32 [ %289, %281 ], [ %296, %290 ]
  %300 = xor i32 %264, 255
  %301 = mul nuw nsw i32 %298, %300
  %302 = mul nsw i32 %299, %264
  %303 = add nsw i32 %302, %301
  %304 = sdiv i32 %303, 255
  %305 = trunc i32 %304 to i8
  %306 = getelementptr inbounds i8, i8* %260, i64 2
  store i8 %305, i8* %306, align 1
  %307 = getelementptr inbounds i8, i8* %261, i64 1
  %308 = load i8, i8* %307, align 1
  %309 = zext i8 %308 to i32
  br i1 %248, label %320, label %315

310:                                              ; preds = %339, %270
  %311 = phi i8* [ %279, %270 ], [ %347, %339 ]
  %312 = getelementptr inbounds i8, i8* %260, i64 4
  %313 = add nuw nsw i32 %259, 1
  %314 = icmp eq i32 %313, %3
  br i1 %314, label %348, label %258

315:                                              ; preds = %297
  %316 = getelementptr inbounds i8, i8* %260, i64 1
  %317 = load i8, i8* %316, align 1
  %318 = zext i8 %317 to i32
  %319 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %242, i32 %318, i32 %309) #7
  br label %322

320:                                              ; preds = %297
  %321 = load i32, i32* %245, align 4
  br label %322

322:                                              ; preds = %320, %315
  %323 = phi i32 [ %321, %320 ], [ %319, %315 ]
  %324 = mul nuw nsw i32 %300, %309
  %325 = mul nsw i32 %323, %264
  %326 = add nsw i32 %325, %324
  %327 = sdiv i32 %326, 255
  %328 = trunc i32 %327 to i8
  %329 = getelementptr inbounds i8, i8* %260, i64 1
  store i8 %328, i8* %329, align 1
  %330 = getelementptr inbounds i8, i8* %261, i64 2
  %331 = load i8, i8* %330, align 1
  %332 = zext i8 %331 to i32
  br i1 %248, label %337, label %333

333:                                              ; preds = %322
  %334 = load i8, i8* %260, align 1
  %335 = zext i8 %334 to i32
  %336 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %242, i32 %335, i32 %332) #7
  br label %339

337:                                              ; preds = %322
  %338 = load i32, i32* %246, align 4
  br label %339

339:                                              ; preds = %337, %333
  %340 = phi i32 [ %338, %337 ], [ %336, %333 ]
  %341 = mul nuw nsw i32 %300, %332
  %342 = mul nsw i32 %340, %264
  %343 = add nsw i32 %342, %341
  %344 = sdiv i32 %343, 255
  %345 = trunc i32 %344 to i8
  store i8 %345, i8* %260, align 1
  %346 = getelementptr inbounds i8, i8* %261, i64 3
  %347 = getelementptr inbounds i8, i8* %346, i64 %255
  br label %310

348:                                              ; preds = %310, %240
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %243) #7
  br label %2974

349:                                              ; preds = %23, %23
  %350 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 8
  %351 = load i32, i32* %350, align 8
  %352 = bitcast [3 x i32]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %352) #7
  %353 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 0
  store i32 -1431655766, i32* %353, align 4
  %354 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 1
  store i32 -1431655766, i32* %354, align 4
  %355 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 2
  store i32 -1431655766, i32* %355, align 4
  %356 = and i32 %351, -4
  %357 = icmp eq i32 %356, 12
  %358 = icmp sgt i32 %3, 0
  br i1 %358, label %359, label %450

359:                                              ; preds = %349
  %360 = getelementptr inbounds [3 x i8], [3 x i8]* %8, i64 0, i64 0
  %361 = getelementptr inbounds [3 x i8], [3 x i8]* %8, i64 0, i64 1
  %362 = getelementptr inbounds [3 x i8], [3 x i8]* %8, i64 0, i64 2
  %363 = zext i16 %18 to i64
  br label %364

364:                                              ; preds = %415, %359
  %365 = phi i32 [ 0, %359 ], [ %418, %415 ]
  %366 = phi i8* [ %4, %359 ], [ %381, %415 ]
  %367 = phi i8* [ %1, %359 ], [ %417, %415 ]
  %368 = phi i8* [ %2, %359 ], [ %416, %415 ]
  %369 = icmp eq i8* %366, null
  %370 = getelementptr inbounds i8, i8* %368, i64 3
  %371 = load i8, i8* %370, align 1
  br i1 %369, label %380, label %372

372:                                              ; preds = %364
  %373 = zext i8 %371 to i16
  %374 = getelementptr inbounds i8, i8* %366, i64 1
  %375 = load i8, i8* %366, align 1
  %376 = zext i8 %375 to i16
  %377 = mul nuw i16 %376, %373
  %378 = udiv i16 %377, 255
  %379 = trunc i16 %378 to i8
  br label %380

380:                                              ; preds = %372, %364
  %381 = phi i8* [ %374, %372 ], [ null, %364 ]
  %382 = phi i8 [ %379, %372 ], [ %371, %364 ]
  %383 = zext i8 %382 to i32
  %384 = icmp eq i8 %382, 0
  br i1 %384, label %415, label %385

385:                                              ; preds = %380
  br i1 %357, label %386, label %395

386:                                              ; preds = %385
  call void @llvm.lifetime.start.p0i8(i64 3, i8* nonnull %360) #7
  store i8 -86, i8* %360, align 1
  store i8 -86, i8* %361, align 1
  store i8 -86, i8* %362, align 1
  %387 = load i8, i8* %367, align 1
  store i8 %387, i8* %362, align 1
  %388 = getelementptr inbounds i8, i8* %367, i64 1
  %389 = load i8, i8* %388, align 1
  store i8 %389, i8* %361, align 1
  %390 = getelementptr inbounds i8, i8* %367, i64 2
  %391 = load i8, i8* %390, align 1
  store i8 %391, i8* %360, align 1
  call fastcc void @_ZN12_GLOBAL__N_19RGB_BlendE9BlendModePKhS2_Pi(i32 %351, i8* %368, i8* nonnull %360, i32* nonnull %353) #7
  call void @llvm.lifetime.end.p0i8(i64 3, i8* nonnull %360) #7
  %392 = load i8, i8* %390, align 1
  %393 = zext i8 %392 to i32
  %394 = load i32, i32* %353, align 4
  br label %402

395:                                              ; preds = %385
  %396 = getelementptr inbounds i8, i8* %367, i64 2
  %397 = load i8, i8* %396, align 1
  %398 = zext i8 %397 to i32
  %399 = load i8, i8* %368, align 1
  %400 = zext i8 %399 to i32
  %401 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %351, i32 %398, i32 %400) #7
  br label %402

402:                                              ; preds = %395, %386
  %403 = phi i32 [ %393, %386 ], [ %398, %395 ]
  %404 = phi i8* [ %390, %386 ], [ %396, %395 ]
  %405 = phi i32 [ %394, %386 ], [ %401, %395 ]
  %406 = xor i32 %383, 255
  %407 = mul nuw nsw i32 %403, %406
  %408 = mul nsw i32 %405, %383
  %409 = add nsw i32 %408, %407
  %410 = sdiv i32 %409, 255
  %411 = trunc i32 %410 to i8
  store i8 %411, i8* %404, align 1
  %412 = getelementptr inbounds i8, i8* %367, i64 1
  %413 = load i8, i8* %412, align 1
  %414 = zext i8 %413 to i32
  br i1 %357, label %425, label %420

415:                                              ; preds = %443, %380
  %416 = getelementptr inbounds i8, i8* %368, i64 4
  %417 = getelementptr inbounds i8, i8* %367, i64 %363
  %418 = add nuw nsw i32 %365, 1
  %419 = icmp eq i32 %418, %3
  br i1 %419, label %450, label %364

420:                                              ; preds = %402
  %421 = getelementptr inbounds i8, i8* %368, i64 1
  %422 = load i8, i8* %421, align 1
  %423 = zext i8 %422 to i32
  %424 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %351, i32 %414, i32 %423) #7
  br label %427

425:                                              ; preds = %402
  %426 = load i32, i32* %354, align 4
  br label %427

427:                                              ; preds = %425, %420
  %428 = phi i32 [ %426, %425 ], [ %424, %420 ]
  %429 = mul nuw nsw i32 %406, %414
  %430 = mul nsw i32 %428, %383
  %431 = add nsw i32 %430, %429
  %432 = sdiv i32 %431, 255
  %433 = trunc i32 %432 to i8
  store i8 %433, i8* %412, align 1
  %434 = load i8, i8* %367, align 1
  %435 = zext i8 %434 to i32
  br i1 %357, label %441, label %436

436:                                              ; preds = %427
  %437 = getelementptr inbounds i8, i8* %368, i64 2
  %438 = load i8, i8* %437, align 1
  %439 = zext i8 %438 to i32
  %440 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %351, i32 %435, i32 %439) #7
  br label %443

441:                                              ; preds = %427
  %442 = load i32, i32* %355, align 4
  br label %443

443:                                              ; preds = %441, %436
  %444 = phi i32 [ %442, %441 ], [ %440, %436 ]
  %445 = mul nuw nsw i32 %406, %435
  %446 = mul nsw i32 %444, %383
  %447 = add nsw i32 %446, %445
  %448 = sdiv i32 %447, 255
  %449 = trunc i32 %448 to i8
  store i8 %449, i8* %367, align 1
  br label %415

450:                                              ; preds = %415, %349
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %352) #7
  br label %2974

451:                                              ; preds = %23
  %452 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 8
  %453 = load i32, i32* %452, align 8
  %454 = bitcast [3 x i32]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %454) #7
  %455 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 0
  store i32 -1431655766, i32* %455, align 4
  %456 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 1
  store i32 -1431655766, i32* %456, align 4
  %457 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 2
  store i32 -1431655766, i32* %457, align 4
  %458 = and i32 %453, -4
  %459 = icmp eq i32 %458, 12
  %460 = icmp sgt i32 %3, 0
  br i1 %460, label %461, label %513

461:                                              ; preds = %451
  %462 = add nsw i32 %14, -3
  %463 = getelementptr inbounds [3 x i8], [3 x i8]* %8, i64 0, i64 0
  %464 = getelementptr inbounds [3 x i8], [3 x i8]* %8, i64 0, i64 1
  %465 = getelementptr inbounds [3 x i8], [3 x i8]* %8, i64 0, i64 2
  %466 = zext i16 %18 to i64
  %467 = sext i32 %462 to i64
  br label %468

468:                                              ; preds = %505, %461
  %469 = phi i32 [ 0, %461 ], [ %511, %505 ]
  %470 = phi i8* [ %1, %461 ], [ %509, %505 ]
  %471 = phi i8* [ %2, %461 ], [ %510, %505 ]
  br i1 %459, label %494, label %472

472:                                              ; preds = %468
  %473 = getelementptr inbounds i8, i8* %470, i64 2
  %474 = load i8, i8* %471, align 1
  %475 = zext i8 %474 to i32
  %476 = load i8, i8* %473, align 1
  %477 = zext i8 %476 to i32
  %478 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %453, i32 %477, i32 %475) #7
  %479 = trunc i32 %478 to i8
  store i8 %479, i8* %473, align 1
  %480 = getelementptr inbounds i8, i8* %470, i64 1
  %481 = getelementptr inbounds i8, i8* %471, i64 1
  %482 = load i8, i8* %481, align 1
  %483 = zext i8 %482 to i32
  %484 = load i8, i8* %480, align 1
  %485 = zext i8 %484 to i32
  %486 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %453, i32 %485, i32 %483) #7
  %487 = trunc i32 %486 to i8
  store i8 %487, i8* %480, align 1
  %488 = getelementptr inbounds i8, i8* %471, i64 2
  %489 = load i8, i8* %488, align 1
  %490 = zext i8 %489 to i32
  %491 = load i8, i8* %470, align 1
  %492 = zext i8 %491 to i32
  %493 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %453, i32 %492, i32 %490) #7
  br label %505

494:                                              ; preds = %468
  call void @llvm.lifetime.start.p0i8(i64 3, i8* nonnull %463) #7
  store i8 -86, i8* %463, align 1
  store i8 -86, i8* %464, align 1
  store i8 -86, i8* %465, align 1
  %495 = load i8, i8* %470, align 1
  store i8 %495, i8* %465, align 1
  %496 = getelementptr inbounds i8, i8* %470, i64 1
  %497 = load i8, i8* %496, align 1
  store i8 %497, i8* %464, align 1
  %498 = getelementptr inbounds i8, i8* %470, i64 2
  %499 = load i8, i8* %498, align 1
  store i8 %499, i8* %463, align 1
  call fastcc void @_ZN12_GLOBAL__N_19RGB_BlendE9BlendModePKhS2_Pi(i32 %453, i8* %471, i8* nonnull %463, i32* nonnull %455) #7
  call void @llvm.lifetime.end.p0i8(i64 3, i8* nonnull %463) #7
  %500 = load i32, i32* %455, align 4
  %501 = trunc i32 %500 to i8
  store i8 %501, i8* %498, align 1
  %502 = load i32, i32* %456, align 4
  %503 = trunc i32 %502 to i8
  store i8 %503, i8* %496, align 1
  %504 = load i32, i32* %457, align 4
  br label %505

505:                                              ; preds = %494, %472
  %506 = phi i32 [ %504, %494 ], [ %493, %472 ]
  %507 = trunc i32 %506 to i8
  store i8 %507, i8* %470, align 1
  %508 = getelementptr inbounds i8, i8* %471, i64 3
  %509 = getelementptr inbounds i8, i8* %470, i64 %466
  %510 = getelementptr inbounds i8, i8* %508, i64 %467
  %511 = add nuw nsw i32 %469, 1
  %512 = icmp eq i32 %511, %3
  br i1 %512, label %513, label %468

513:                                              ; preds = %505, %451
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %454) #7
  br label %2974

514:                                              ; preds = %23
  %515 = icmp sgt i32 %3, 0
  br i1 %515, label %516, label %2974

516:                                              ; preds = %514
  %517 = icmp eq i16 %13, 4
  %518 = zext i16 %13 to i64
  %519 = and i32 %3, 1
  %520 = icmp eq i32 %3, 1
  br i1 %520, label %2944, label %521

521:                                              ; preds = %516
  %522 = sub i32 %3, %519
  br label %523

523:                                              ; preds = %2978, %521
  %524 = phi i8* [ %1, %521 ], [ %2988, %2978 ]
  %525 = phi i8* [ %2, %521 ], [ %2989, %2978 ]
  %526 = phi i32 [ %522, %521 ], [ %2990, %2978 ]
  br i1 %517, label %527, label %530

527:                                              ; preds = %523
  %528 = getelementptr inbounds i8, i8* %525, i64 3
  %529 = load i8, i8* %528, align 1
  br label %530

530:                                              ; preds = %523, %527
  %531 = phi i8 [ %529, %527 ], [ -1, %523 ]
  %532 = getelementptr inbounds i8, i8* %524, i64 3
  store i8 %531, i8* %532, align 1
  %533 = getelementptr inbounds i8, i8* %525, i64 2
  %534 = getelementptr inbounds i8, i8* %525, i64 1
  %535 = load i8, i8* %533, align 1
  store i8 %535, i8* %524, align 1
  %536 = load i8, i8* %534, align 1
  %537 = getelementptr inbounds i8, i8* %524, i64 1
  store i8 %536, i8* %537, align 1
  %538 = load i8, i8* %525, align 1
  %539 = getelementptr inbounds i8, i8* %524, i64 2
  store i8 %538, i8* %539, align 1
  %540 = getelementptr inbounds i8, i8* %524, i64 4
  %541 = getelementptr inbounds i8, i8* %525, i64 %518
  br i1 %517, label %2975, label %2978

542:                                              ; preds = %23, %23
  %543 = icmp sgt i32 %3, 0
  br i1 %543, label %544, label %2974

544:                                              ; preds = %542
  %545 = zext i16 %18 to i64
  br label %546

546:                                              ; preds = %609, %544
  %547 = phi i8* [ %1, %544 ], [ %611, %609 ]
  %548 = phi i32 [ 0, %544 ], [ %612, %609 ]
  %549 = phi i8* [ %4, %544 ], [ %563, %609 ]
  %550 = phi i8* [ %2, %544 ], [ %610, %609 ]
  %551 = icmp eq i8* %549, null
  %552 = getelementptr inbounds i8, i8* %550, i64 3
  %553 = load i8, i8* %552, align 1
  br i1 %551, label %562, label %554

554:                                              ; preds = %546
  %555 = zext i8 %553 to i16
  %556 = getelementptr inbounds i8, i8* %549, i64 1
  %557 = load i8, i8* %549, align 1
  %558 = zext i8 %557 to i16
  %559 = mul nuw i16 %558, %555
  %560 = udiv i16 %559, 255
  %561 = trunc i16 %560 to i8
  br label %562

562:                                              ; preds = %554, %546
  %563 = phi i8* [ %556, %554 ], [ null, %546 ]
  %564 = phi i8 [ %561, %554 ], [ %553, %546 ]
  %565 = zext i8 %564 to i32
  switch i8 %564, label %566 [
    i8 -1, label %599
    i8 0, label %609
  ]

566:                                              ; preds = %562
  %567 = xor i32 %565, 255
  %568 = getelementptr inbounds i8, i8* %547, i64 2
  %569 = load i8, i8* %568, align 1
  %570 = zext i8 %569 to i32
  %571 = mul nuw nsw i32 %567, %570
  %572 = load i8, i8* %550, align 1
  %573 = zext i8 %572 to i32
  %574 = mul nuw nsw i32 %573, %565
  %575 = add nuw nsw i32 %574, %571
  %576 = udiv i32 %575, 255
  %577 = trunc i32 %576 to i8
  store i8 %577, i8* %568, align 1
  %578 = getelementptr inbounds i8, i8* %550, i64 1
  %579 = getelementptr inbounds i8, i8* %547, i64 1
  %580 = load i8, i8* %579, align 1
  %581 = zext i8 %580 to i32
  %582 = mul nuw nsw i32 %567, %581
  %583 = load i8, i8* %578, align 1
  %584 = zext i8 %583 to i32
  %585 = mul nuw nsw i32 %584, %565
  %586 = add nuw nsw i32 %585, %582
  %587 = udiv i32 %586, 255
  %588 = trunc i32 %587 to i8
  store i8 %588, i8* %579, align 1
  %589 = getelementptr inbounds i8, i8* %550, i64 2
  %590 = load i8, i8* %547, align 1
  %591 = zext i8 %590 to i32
  %592 = mul nuw nsw i32 %567, %591
  %593 = load i8, i8* %589, align 1
  %594 = zext i8 %593 to i32
  %595 = mul nuw nsw i32 %594, %565
  %596 = add nuw nsw i32 %595, %592
  %597 = udiv i32 %596, 255
  %598 = trunc i32 %597 to i8
  br label %607

599:                                              ; preds = %562
  %600 = load i8, i8* %550, align 1
  %601 = getelementptr inbounds i8, i8* %547, i64 2
  store i8 %600, i8* %601, align 1
  %602 = getelementptr inbounds i8, i8* %550, i64 1
  %603 = load i8, i8* %602, align 1
  %604 = getelementptr inbounds i8, i8* %547, i64 1
  store i8 %603, i8* %604, align 1
  %605 = getelementptr inbounds i8, i8* %550, i64 2
  %606 = load i8, i8* %605, align 1
  br label %607

607:                                              ; preds = %566, %599
  %608 = phi i8 [ %606, %599 ], [ %598, %566 ]
  store i8 %608, i8* %547, align 1
  br label %609

609:                                              ; preds = %607, %562
  %610 = getelementptr inbounds i8, i8* %550, i64 4
  %611 = getelementptr inbounds i8, i8* %547, i64 %545
  %612 = add nuw nsw i32 %548, 1
  %613 = icmp eq i32 %612, %3
  br i1 %613, label %2974, label %546

614:                                              ; preds = %23
  %615 = icmp sgt i32 %3, 0
  br i1 %615, label %616, label %2974

616:                                              ; preds = %614
  %617 = zext i16 %18 to i64
  %618 = zext i16 %13 to i64
  %619 = and i32 %3, 1
  %620 = icmp eq i32 %3, 1
  br i1 %620, label %2962, label %621

621:                                              ; preds = %616
  %622 = sub i32 %3, %619
  br label %623

623:                                              ; preds = %623, %621
  %624 = phi i8* [ %1, %621 ], [ %643, %623 ]
  %625 = phi i8* [ %2, %621 ], [ %644, %623 ]
  %626 = phi i32 [ %622, %621 ], [ %645, %623 ]
  %627 = load i8, i8* %625, align 1
  %628 = getelementptr inbounds i8, i8* %624, i64 2
  store i8 %627, i8* %628, align 1
  %629 = getelementptr inbounds i8, i8* %625, i64 1
  %630 = load i8, i8* %629, align 1
  %631 = getelementptr inbounds i8, i8* %624, i64 1
  store i8 %630, i8* %631, align 1
  %632 = getelementptr inbounds i8, i8* %625, i64 2
  %633 = load i8, i8* %632, align 1
  store i8 %633, i8* %624, align 1
  %634 = getelementptr inbounds i8, i8* %624, i64 %617
  %635 = getelementptr inbounds i8, i8* %625, i64 %618
  %636 = load i8, i8* %635, align 1
  %637 = getelementptr inbounds i8, i8* %634, i64 2
  store i8 %636, i8* %637, align 1
  %638 = getelementptr inbounds i8, i8* %635, i64 1
  %639 = load i8, i8* %638, align 1
  %640 = getelementptr inbounds i8, i8* %634, i64 1
  store i8 %639, i8* %640, align 1
  %641 = getelementptr inbounds i8, i8* %635, i64 2
  %642 = load i8, i8* %641, align 1
  store i8 %642, i8* %634, align 1
  %643 = getelementptr inbounds i8, i8* %634, i64 %617
  %644 = getelementptr inbounds i8, i8* %635, i64 %618
  %645 = add i32 %626, -2
  %646 = icmp eq i32 %645, 0
  br i1 %646, label %2962, label %623

647:                                              ; preds = %23
  %648 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 8
  %649 = load i32, i32* %648, align 8
  %650 = bitcast [3 x i32]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %650) #7
  %651 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 0
  store i32 -1431655766, i32* %651, align 4
  %652 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 1
  store i32 -1431655766, i32* %652, align 4
  %653 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 2
  store i32 -1431655766, i32* %653, align 4
  %654 = and i32 %649, -4
  %655 = icmp eq i32 %654, 12
  %656 = icmp sgt i32 %3, 0
  br i1 %656, label %657, label %793

657:                                              ; preds = %647
  %658 = add nsw i32 %14, -3
  %659 = getelementptr inbounds [3 x i8], [3 x i8]* %8, i64 0, i64 0
  %660 = getelementptr inbounds [3 x i8], [3 x i8]* %8, i64 0, i64 1
  %661 = getelementptr inbounds [3 x i8], [3 x i8]* %8, i64 0, i64 2
  %662 = sext i32 %658 to i64
  %663 = zext i16 %13 to i64
  br label %664

664:                                              ; preds = %740, %657
  %665 = phi i8* [ %1, %657 ], [ %742, %740 ]
  %666 = phi i32 [ 0, %657 ], [ %743, %740 ]
  %667 = phi i8* [ %4, %657 ], [ %669, %740 ]
  %668 = phi i8* [ %2, %657 ], [ %741, %740 ]
  %669 = getelementptr inbounds i8, i8* %667, i64 1
  %670 = load i8, i8* %667, align 1
  %671 = zext i8 %670 to i32
  %672 = getelementptr inbounds i8, i8* %665, i64 3
  %673 = load i8, i8* %672, align 1
  %674 = zext i8 %673 to i32
  %675 = icmp eq i8 %673, 0
  br i1 %675, label %676, label %685

676:                                              ; preds = %664
  %677 = load i8, i8* %668, align 1
  %678 = getelementptr inbounds i8, i8* %665, i64 2
  store i8 %677, i8* %678, align 1
  %679 = getelementptr inbounds i8, i8* %668, i64 1
  %680 = load i8, i8* %679, align 1
  %681 = getelementptr inbounds i8, i8* %665, i64 1
  store i8 %680, i8* %681, align 1
  %682 = getelementptr inbounds i8, i8* %668, i64 2
  %683 = load i8, i8* %682, align 1
  store i8 %683, i8* %665, align 1
  %684 = getelementptr inbounds i8, i8* %668, i64 %663
  br label %740

685:                                              ; preds = %664
  %686 = icmp eq i8 %670, 0
  br i1 %686, label %687, label %689

687:                                              ; preds = %685
  %688 = getelementptr inbounds i8, i8* %668, i64 %663
  br label %740

689:                                              ; preds = %685
  %690 = add nuw nsw i32 %674, %671
  %691 = mul nuw nsw i32 %674, %671
  %692 = trunc i32 %691 to i16
  %693 = udiv i16 %692, 255
  %694 = zext i16 %693 to i32
  %695 = sub nsw i32 %690, %694
  %696 = trunc i32 %695 to i8
  store i8 %696, i8* %672, align 1
  %697 = zext i8 %670 to i16
  %698 = mul nuw i16 %697, 255
  %699 = trunc i32 %695 to i16
  %700 = and i16 %699, 255
  %701 = udiv i16 %698, %700
  %702 = zext i16 %701 to i32
  br i1 %655, label %703, label %714

703:                                              ; preds = %689
  call void @llvm.lifetime.start.p0i8(i64 3, i8* nonnull %659) #7
  %704 = load i8, i8* %665, align 1
  store i8 %704, i8* %661, align 1
  %705 = getelementptr inbounds i8, i8* %665, i64 1
  %706 = load i8, i8* %705, align 1
  store i8 %706, i8* %660, align 1
  %707 = getelementptr inbounds i8, i8* %665, i64 2
  %708 = load i8, i8* %707, align 1
  store i8 %708, i8* %659, align 1
  call fastcc void @_ZN12_GLOBAL__N_19RGB_BlendE9BlendModePKhS2_Pi(i32 %649, i8* %668, i8* nonnull %659, i32* nonnull %651) #7
  call void @llvm.lifetime.end.p0i8(i64 3, i8* nonnull %659) #7
  %709 = load i8, i8* %668, align 1
  %710 = zext i8 %709 to i32
  %711 = load i32, i32* %651, align 4
  %712 = load i8, i8* %707, align 1
  %713 = zext i8 %712 to i32
  br label %721

714:                                              ; preds = %689
  %715 = load i8, i8* %668, align 1
  %716 = zext i8 %715 to i32
  %717 = getelementptr inbounds i8, i8* %665, i64 2
  %718 = load i8, i8* %717, align 1
  %719 = zext i8 %718 to i32
  %720 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %649, i32 %719, i32 %716) #7
  br label %721

721:                                              ; preds = %714, %703
  %722 = phi i32 [ %716, %714 ], [ %710, %703 ]
  %723 = phi i32 [ %719, %714 ], [ %713, %703 ]
  %724 = phi i32 [ %720, %714 ], [ %711, %703 ]
  %725 = xor i32 %674, 255
  %726 = sub nsw i32 255, %702
  %727 = mul nuw nsw i32 %722, %725
  %728 = mul nsw i32 %724, %674
  %729 = add nsw i32 %728, %727
  %730 = sdiv i32 %729, 255
  %731 = getelementptr inbounds i8, i8* %665, i64 2
  %732 = mul nsw i32 %723, %726
  %733 = mul nsw i32 %730, %702
  %734 = add nsw i32 %733, %732
  %735 = sdiv i32 %734, 255
  %736 = trunc i32 %735 to i8
  store i8 %736, i8* %731, align 1
  %737 = getelementptr inbounds i8, i8* %668, i64 1
  %738 = load i8, i8* %737, align 1
  %739 = zext i8 %738 to i32
  br i1 %655, label %750, label %745

740:                                              ; preds = %779, %687, %676
  %741 = phi i8* [ %684, %676 ], [ %688, %687 ], [ %792, %779 ]
  %742 = getelementptr inbounds i8, i8* %665, i64 4
  %743 = add nuw nsw i32 %666, 1
  %744 = icmp eq i32 %743, %3
  br i1 %744, label %793, label %664

745:                                              ; preds = %721
  %746 = getelementptr inbounds i8, i8* %665, i64 1
  %747 = load i8, i8* %746, align 1
  %748 = zext i8 %747 to i32
  %749 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %649, i32 %748, i32 %739) #7
  br label %755

750:                                              ; preds = %721
  %751 = load i32, i32* %652, align 4
  %752 = getelementptr inbounds i8, i8* %665, i64 1
  %753 = load i8, i8* %752, align 1
  %754 = zext i8 %753 to i32
  br label %755

755:                                              ; preds = %750, %745
  %756 = phi i32 [ %754, %750 ], [ %748, %745 ]
  %757 = phi i32 [ %751, %750 ], [ %749, %745 ]
  %758 = mul nuw nsw i32 %725, %739
  %759 = mul nsw i32 %757, %674
  %760 = add nsw i32 %759, %758
  %761 = sdiv i32 %760, 255
  %762 = getelementptr inbounds i8, i8* %665, i64 1
  %763 = mul nsw i32 %756, %726
  %764 = mul nsw i32 %761, %702
  %765 = add nsw i32 %764, %763
  %766 = sdiv i32 %765, 255
  %767 = trunc i32 %766 to i8
  store i8 %767, i8* %762, align 1
  %768 = getelementptr inbounds i8, i8* %668, i64 2
  %769 = load i8, i8* %768, align 1
  %770 = zext i8 %769 to i32
  br i1 %655, label %775, label %771

771:                                              ; preds = %755
  %772 = load i8, i8* %665, align 1
  %773 = zext i8 %772 to i32
  %774 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %649, i32 %773, i32 %770) #7
  br label %779

775:                                              ; preds = %755
  %776 = load i32, i32* %653, align 4
  %777 = load i8, i8* %665, align 1
  %778 = zext i8 %777 to i32
  br label %779

779:                                              ; preds = %775, %771
  %780 = phi i32 [ %778, %775 ], [ %773, %771 ]
  %781 = phi i32 [ %776, %775 ], [ %774, %771 ]
  %782 = mul nuw nsw i32 %725, %770
  %783 = mul nsw i32 %781, %674
  %784 = add nsw i32 %783, %782
  %785 = sdiv i32 %784, 255
  %786 = mul nsw i32 %780, %726
  %787 = mul nsw i32 %785, %702
  %788 = add nsw i32 %787, %786
  %789 = sdiv i32 %788, 255
  %790 = trunc i32 %789 to i8
  store i8 %790, i8* %665, align 1
  %791 = getelementptr inbounds i8, i8* %668, i64 3
  %792 = getelementptr inbounds i8, i8* %791, i64 %662
  br label %740

793:                                              ; preds = %740, %647
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %650) #7
  br label %2974

794:                                              ; preds = %23
  %795 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 8
  %796 = load i32, i32* %795, align 8
  %797 = bitcast [3 x i32]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %797) #7
  %798 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 0
  store i32 -1431655766, i32* %798, align 4
  %799 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 1
  store i32 -1431655766, i32* %799, align 4
  %800 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 2
  store i32 -1431655766, i32* %800, align 4
  %801 = and i32 %796, -4
  %802 = icmp eq i32 %801, 12
  %803 = icmp sgt i32 %3, 0
  br i1 %803, label %804, label %890

804:                                              ; preds = %794
  %805 = add nsw i32 %14, -3
  %806 = getelementptr inbounds [3 x i8], [3 x i8]* %8, i64 0, i64 0
  %807 = getelementptr inbounds [3 x i8], [3 x i8]* %8, i64 0, i64 1
  %808 = getelementptr inbounds [3 x i8], [3 x i8]* %8, i64 0, i64 2
  %809 = sext i32 %805 to i64
  %810 = zext i16 %13 to i64
  %811 = zext i16 %18 to i64
  br label %812

812:                                              ; preds = %853, %804
  %813 = phi i32 [ 0, %804 ], [ %856, %853 ]
  %814 = phi i8* [ %4, %804 ], [ %817, %853 ]
  %815 = phi i8* [ %1, %804 ], [ %855, %853 ]
  %816 = phi i8* [ %2, %804 ], [ %854, %853 ]
  %817 = getelementptr inbounds i8, i8* %814, i64 1
  %818 = load i8, i8* %814, align 1
  %819 = zext i8 %818 to i32
  %820 = icmp eq i8 %818, 0
  br i1 %820, label %821, label %823

821:                                              ; preds = %812
  %822 = getelementptr inbounds i8, i8* %816, i64 %810
  br label %853

823:                                              ; preds = %812
  br i1 %802, label %824, label %833

824:                                              ; preds = %823
  call void @llvm.lifetime.start.p0i8(i64 3, i8* nonnull %806) #7
  store i8 -86, i8* %806, align 1
  store i8 -86, i8* %807, align 1
  store i8 -86, i8* %808, align 1
  %825 = load i8, i8* %815, align 1
  store i8 %825, i8* %808, align 1
  %826 = getelementptr inbounds i8, i8* %815, i64 1
  %827 = load i8, i8* %826, align 1
  store i8 %827, i8* %807, align 1
  %828 = getelementptr inbounds i8, i8* %815, i64 2
  %829 = load i8, i8* %828, align 1
  store i8 %829, i8* %806, align 1
  call fastcc void @_ZN12_GLOBAL__N_19RGB_BlendE9BlendModePKhS2_Pi(i32 %796, i8* %816, i8* nonnull %806, i32* nonnull %798) #7
  call void @llvm.lifetime.end.p0i8(i64 3, i8* nonnull %806) #7
  %830 = load i8, i8* %828, align 1
  %831 = zext i8 %830 to i32
  %832 = load i32, i32* %798, align 4
  br label %840

833:                                              ; preds = %823
  %834 = getelementptr inbounds i8, i8* %815, i64 2
  %835 = load i8, i8* %834, align 1
  %836 = zext i8 %835 to i32
  %837 = load i8, i8* %816, align 1
  %838 = zext i8 %837 to i32
  %839 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %796, i32 %836, i32 %838) #7
  br label %840

840:                                              ; preds = %833, %824
  %841 = phi i32 [ %831, %824 ], [ %836, %833 ]
  %842 = phi i8* [ %828, %824 ], [ %834, %833 ]
  %843 = phi i32 [ %832, %824 ], [ %839, %833 ]
  %844 = xor i32 %819, 255
  %845 = mul nuw nsw i32 %841, %844
  %846 = mul nsw i32 %843, %819
  %847 = add nsw i32 %846, %845
  %848 = sdiv i32 %847, 255
  %849 = trunc i32 %848 to i8
  store i8 %849, i8* %842, align 1
  %850 = getelementptr inbounds i8, i8* %815, i64 1
  %851 = load i8, i8* %850, align 1
  %852 = zext i8 %851 to i32
  br i1 %802, label %863, label %858

853:                                              ; preds = %881, %821
  %854 = phi i8* [ %822, %821 ], [ %889, %881 ]
  %855 = getelementptr inbounds i8, i8* %815, i64 %811
  %856 = add nuw nsw i32 %813, 1
  %857 = icmp eq i32 %856, %3
  br i1 %857, label %890, label %812

858:                                              ; preds = %840
  %859 = getelementptr inbounds i8, i8* %816, i64 1
  %860 = load i8, i8* %859, align 1
  %861 = zext i8 %860 to i32
  %862 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %796, i32 %852, i32 %861) #7
  br label %865

863:                                              ; preds = %840
  %864 = load i32, i32* %799, align 4
  br label %865

865:                                              ; preds = %863, %858
  %866 = phi i32 [ %864, %863 ], [ %862, %858 ]
  %867 = mul nuw nsw i32 %844, %852
  %868 = mul nsw i32 %866, %819
  %869 = add nsw i32 %868, %867
  %870 = sdiv i32 %869, 255
  %871 = trunc i32 %870 to i8
  store i8 %871, i8* %850, align 1
  %872 = load i8, i8* %815, align 1
  %873 = zext i8 %872 to i32
  br i1 %802, label %879, label %874

874:                                              ; preds = %865
  %875 = getelementptr inbounds i8, i8* %816, i64 2
  %876 = load i8, i8* %875, align 1
  %877 = zext i8 %876 to i32
  %878 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %796, i32 %873, i32 %877) #7
  br label %881

879:                                              ; preds = %865
  %880 = load i32, i32* %800, align 4
  br label %881

881:                                              ; preds = %879, %874
  %882 = phi i32 [ %880, %879 ], [ %878, %874 ]
  %883 = mul nuw nsw i32 %844, %873
  %884 = mul nsw i32 %882, %819
  %885 = add nsw i32 %884, %883
  %886 = sdiv i32 %885, 255
  %887 = trunc i32 %886 to i8
  store i8 %887, i8* %815, align 1
  %888 = getelementptr inbounds i8, i8* %816, i64 3
  %889 = getelementptr inbounds i8, i8* %888, i64 %809
  br label %853

890:                                              ; preds = %853, %794
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %797) #7
  br label %2974

891:                                              ; preds = %23
  %892 = icmp sgt i32 %3, 0
  br i1 %892, label %893, label %2974

893:                                              ; preds = %891
  %894 = add nsw i32 %14, -3
  %895 = zext i16 %13 to i64
  %896 = sext i32 %894 to i64
  %897 = zext i32 %3 to i64
  br label %898

898:                                              ; preds = %968, %893
  %899 = phi i64 [ 0, %893 ], [ %971, %968 ]
  %900 = phi i8* [ %1, %893 ], [ %970, %968 ]
  %901 = phi i8* [ %2, %893 ], [ %969, %968 ]
  %902 = getelementptr inbounds i8, i8* %4, i64 %899
  %903 = load i8, i8* %902, align 1
  %904 = zext i8 %903 to i32
  switch i8 %903, label %917 [
    i8 -1, label %905
    i8 0, label %915
  ]

905:                                              ; preds = %898
  %906 = load i8, i8* %901, align 1
  %907 = getelementptr inbounds i8, i8* %900, i64 2
  store i8 %906, i8* %907, align 1
  %908 = getelementptr inbounds i8, i8* %901, i64 1
  %909 = load i8, i8* %908, align 1
  %910 = getelementptr inbounds i8, i8* %900, i64 1
  store i8 %909, i8* %910, align 1
  %911 = getelementptr inbounds i8, i8* %901, i64 2
  %912 = load i8, i8* %911, align 1
  store i8 %912, i8* %900, align 1
  %913 = getelementptr inbounds i8, i8* %900, i64 3
  store i8 -1, i8* %913, align 1
  %914 = getelementptr inbounds i8, i8* %901, i64 %895
  br label %968

915:                                              ; preds = %898
  %916 = getelementptr inbounds i8, i8* %901, i64 %895
  br label %968

917:                                              ; preds = %898
  %918 = getelementptr inbounds i8, i8* %900, i64 3
  %919 = load i8, i8* %918, align 1
  %920 = zext i8 %919 to i32
  %921 = add nuw nsw i32 %920, %904
  %922 = mul nuw nsw i32 %920, %904
  %923 = trunc i32 %922 to i16
  %924 = udiv i16 %923, 255
  %925 = zext i16 %924 to i32
  %926 = sub nsw i32 %921, %925
  %927 = trunc i32 %926 to i8
  store i8 %927, i8* %918, align 1
  %928 = zext i8 %903 to i16
  %929 = mul nuw i16 %928, 255
  %930 = trunc i32 %926 to i16
  %931 = and i16 %930, 255
  %932 = udiv i16 %929, %931
  %933 = zext i16 %932 to i32
  %934 = sub nsw i32 255, %933
  %935 = getelementptr inbounds i8, i8* %900, i64 2
  %936 = load i8, i8* %935, align 1
  %937 = zext i8 %936 to i32
  %938 = mul nsw i32 %934, %937
  %939 = load i8, i8* %901, align 1
  %940 = zext i8 %939 to i32
  %941 = mul nuw nsw i32 %940, %933
  %942 = add nsw i32 %941, %938
  %943 = sdiv i32 %942, 255
  %944 = trunc i32 %943 to i8
  store i8 %944, i8* %935, align 1
  %945 = getelementptr inbounds i8, i8* %901, i64 1
  %946 = getelementptr inbounds i8, i8* %900, i64 1
  %947 = load i8, i8* %946, align 1
  %948 = zext i8 %947 to i32
  %949 = mul nsw i32 %934, %948
  %950 = load i8, i8* %945, align 1
  %951 = zext i8 %950 to i32
  %952 = mul nuw nsw i32 %951, %933
  %953 = add nsw i32 %952, %949
  %954 = sdiv i32 %953, 255
  %955 = trunc i32 %954 to i8
  store i8 %955, i8* %946, align 1
  %956 = getelementptr inbounds i8, i8* %901, i64 2
  %957 = load i8, i8* %900, align 1
  %958 = zext i8 %957 to i32
  %959 = mul nsw i32 %934, %958
  %960 = load i8, i8* %956, align 1
  %961 = zext i8 %960 to i32
  %962 = mul nuw nsw i32 %961, %933
  %963 = add nsw i32 %962, %959
  %964 = sdiv i32 %963, 255
  %965 = trunc i32 %964 to i8
  store i8 %965, i8* %900, align 1
  %966 = getelementptr inbounds i8, i8* %901, i64 3
  %967 = getelementptr inbounds i8, i8* %966, i64 %896
  br label %968

968:                                              ; preds = %917, %915, %905
  %969 = phi i8* [ %914, %905 ], [ %916, %915 ], [ %967, %917 ]
  %970 = getelementptr inbounds i8, i8* %900, i64 4
  %971 = add nuw nsw i64 %899, 1
  %972 = icmp eq i64 %971, %897
  br i1 %972, label %2974, label %898

973:                                              ; preds = %23
  %974 = icmp sgt i32 %3, 0
  br i1 %974, label %975, label %2974

975:                                              ; preds = %973
  %976 = zext i16 %13 to i64
  %977 = add nsw i32 %14, -2
  %978 = sext i32 %977 to i64
  %979 = zext i16 %18 to i64
  %980 = zext i32 %3 to i64
  br label %981

981:                                              ; preds = %1032, %975
  %982 = phi i64 [ 0, %975 ], [ %1035, %1032 ]
  %983 = phi i8* [ %1, %975 ], [ %1034, %1032 ]
  %984 = phi i8* [ %2, %975 ], [ %1033, %1032 ]
  %985 = getelementptr inbounds i8, i8* %4, i64 %982
  %986 = load i8, i8* %985, align 1
  %987 = zext i8 %986 to i32
  switch i8 %986, label %996 [
    i8 -1, label %988
    i8 0, label %1030
  ]

988:                                              ; preds = %981
  %989 = load i8, i8* %984, align 1
  %990 = getelementptr inbounds i8, i8* %983, i64 2
  store i8 %989, i8* %990, align 1
  %991 = getelementptr inbounds i8, i8* %984, i64 1
  %992 = load i8, i8* %991, align 1
  %993 = getelementptr inbounds i8, i8* %983, i64 1
  store i8 %992, i8* %993, align 1
  %994 = getelementptr inbounds i8, i8* %984, i64 2
  %995 = load i8, i8* %994, align 1
  store i8 %995, i8* %983, align 1
  br label %1030

996:                                              ; preds = %981
  %997 = getelementptr inbounds i8, i8* %983, i64 2
  %998 = load i8, i8* %997, align 1
  %999 = zext i8 %998 to i32
  %1000 = xor i32 %987, 255
  %1001 = mul nuw nsw i32 %1000, %999
  %1002 = load i8, i8* %984, align 1
  %1003 = zext i8 %1002 to i32
  %1004 = mul nuw nsw i32 %1003, %987
  %1005 = add nuw nsw i32 %1004, %1001
  %1006 = udiv i32 %1005, 255
  %1007 = trunc i32 %1006 to i8
  store i8 %1007, i8* %997, align 1
  %1008 = getelementptr inbounds i8, i8* %984, i64 1
  %1009 = getelementptr inbounds i8, i8* %983, i64 1
  %1010 = load i8, i8* %1009, align 1
  %1011 = zext i8 %1010 to i32
  %1012 = mul nuw nsw i32 %1000, %1011
  %1013 = load i8, i8* %1008, align 1
  %1014 = zext i8 %1013 to i32
  %1015 = mul nuw nsw i32 %1014, %987
  %1016 = add nuw nsw i32 %1015, %1012
  %1017 = udiv i32 %1016, 255
  %1018 = trunc i32 %1017 to i8
  store i8 %1018, i8* %1009, align 1
  %1019 = getelementptr inbounds i8, i8* %984, i64 2
  %1020 = load i8, i8* %983, align 1
  %1021 = zext i8 %1020 to i32
  %1022 = mul nuw nsw i32 %1000, %1021
  %1023 = load i8, i8* %1019, align 1
  %1024 = zext i8 %1023 to i32
  %1025 = mul nuw nsw i32 %1024, %987
  %1026 = add nuw nsw i32 %1025, %1022
  %1027 = udiv i32 %1026, 255
  %1028 = trunc i32 %1027 to i8
  store i8 %1028, i8* %983, align 1
  %1029 = getelementptr inbounds i8, i8* %1019, i64 %978
  br label %1032

1030:                                             ; preds = %988, %981
  %1031 = getelementptr inbounds i8, i8* %984, i64 %976
  br label %1032

1032:                                             ; preds = %1030, %996
  %1033 = phi i8* [ %1031, %1030 ], [ %1029, %996 ]
  %1034 = getelementptr inbounds i8, i8* %983, i64 %979
  %1035 = add nuw nsw i64 %982, 1
  %1036 = icmp eq i64 %1035, %980
  br i1 %1036, label %2974, label %981

1037:                                             ; preds = %7
  %1038 = icmp eq i16 %16, 264
  br i1 %1038, label %1039, label %1228

1039:                                             ; preds = %1037
  %1040 = and i16 %11, 512
  %1041 = icmp eq i16 %1040, 0
  br i1 %1041, label %1128, label %1042

1042:                                             ; preds = %1039
  %1043 = icmp eq i16 %11, 544
  %1044 = icmp sgt i32 %3, 0
  br i1 %1043, label %1045, label %1087

1045:                                             ; preds = %1042
  br i1 %1044, label %1046, label %2974

1046:                                             ; preds = %1045
  %1047 = getelementptr inbounds i8, i8* %2, i64 3
  %1048 = icmp eq i8* %4, null
  %1049 = zext i32 %3 to i64
  br label %1050

1050:                                             ; preds = %1082, %1046
  %1051 = phi i64 [ 0, %1046 ], [ %1085, %1082 ]
  %1052 = phi i8* [ %1, %1046 ], [ %1083, %1082 ]
  %1053 = phi i8* [ %1047, %1046 ], [ %1084, %1082 ]
  %1054 = load i8, i8* %1053, align 1
  br i1 %1048, label %1063, label %1055

1055:                                             ; preds = %1050
  %1056 = getelementptr inbounds i8, i8* %4, i64 %1051
  %1057 = load i8, i8* %1056, align 1
  %1058 = zext i8 %1057 to i16
  %1059 = zext i8 %1054 to i16
  %1060 = mul nuw i16 %1058, %1059
  %1061 = udiv i16 %1060, 255
  %1062 = zext i16 %1061 to i32
  br label %1065

1063:                                             ; preds = %1050
  %1064 = zext i8 %1054 to i32
  br label %1065

1065:                                             ; preds = %1063, %1055
  %1066 = phi i32 [ %1062, %1055 ], [ %1064, %1063 ]
  %1067 = load i8, i8* %1052, align 1
  %1068 = icmp eq i8 %1067, 0
  br i1 %1068, label %1079, label %1069

1069:                                             ; preds = %1065
  %1070 = icmp eq i32 %1066, 0
  br i1 %1070, label %1082, label %1071

1071:                                             ; preds = %1069
  %1072 = zext i8 %1067 to i32
  %1073 = add nuw nsw i32 %1066, %1072
  %1074 = mul nuw nsw i32 %1066, %1072
  %1075 = trunc i32 %1074 to i16
  %1076 = udiv i16 %1075, 255
  %1077 = zext i16 %1076 to i32
  %1078 = sub nsw i32 %1073, %1077
  br label %1079

1079:                                             ; preds = %1065, %1071
  %1080 = phi i32 [ %1078, %1071 ], [ %1066, %1065 ]
  %1081 = trunc i32 %1080 to i8
  store i8 %1081, i8* %1052, align 1
  br label %1082

1082:                                             ; preds = %1079, %1069
  %1083 = getelementptr inbounds i8, i8* %1052, i64 1
  %1084 = getelementptr inbounds i8, i8* %1053, i64 4
  %1085 = add nuw nsw i64 %1051, 1
  %1086 = icmp eq i64 %1085, %1049
  br i1 %1086, label %2974, label %1050

1087:                                             ; preds = %1042
  br i1 %1044, label %1088, label %2974

1088:                                             ; preds = %1087
  %1089 = icmp eq i8* %4, null
  %1090 = zext i32 %3 to i64
  br label %1091

1091:                                             ; preds = %1123, %1088
  %1092 = phi i64 [ 0, %1088 ], [ %1126, %1123 ]
  %1093 = phi i8* [ %1, %1088 ], [ %1124, %1123 ]
  %1094 = phi i8* [ %5, %1088 ], [ %1125, %1123 ]
  %1095 = load i8, i8* %1094, align 1
  br i1 %1089, label %1104, label %1096

1096:                                             ; preds = %1091
  %1097 = getelementptr inbounds i8, i8* %4, i64 %1092
  %1098 = load i8, i8* %1097, align 1
  %1099 = zext i8 %1098 to i16
  %1100 = zext i8 %1095 to i16
  %1101 = mul nuw i16 %1099, %1100
  %1102 = udiv i16 %1101, 255
  %1103 = zext i16 %1102 to i32
  br label %1106

1104:                                             ; preds = %1091
  %1105 = zext i8 %1095 to i32
  br label %1106

1106:                                             ; preds = %1104, %1096
  %1107 = phi i32 [ %1103, %1096 ], [ %1105, %1104 ]
  %1108 = load i8, i8* %1093, align 1
  %1109 = icmp eq i8 %1108, 0
  br i1 %1109, label %1120, label %1110

1110:                                             ; preds = %1106
  %1111 = icmp eq i32 %1107, 0
  br i1 %1111, label %1123, label %1112

1112:                                             ; preds = %1110
  %1113 = zext i8 %1108 to i32
  %1114 = add nuw nsw i32 %1107, %1113
  %1115 = mul nuw nsw i32 %1107, %1113
  %1116 = trunc i32 %1115 to i16
  %1117 = udiv i16 %1116, 255
  %1118 = zext i16 %1117 to i32
  %1119 = sub nsw i32 %1114, %1118
  br label %1120

1120:                                             ; preds = %1106, %1112
  %1121 = phi i32 [ %1119, %1112 ], [ %1107, %1106 ]
  %1122 = trunc i32 %1121 to i8
  store i8 %1122, i8* %1093, align 1
  br label %1123

1123:                                             ; preds = %1120, %1110
  %1124 = getelementptr inbounds i8, i8* %1093, i64 1
  %1125 = getelementptr inbounds i8, i8* %1094, i64 1
  %1126 = add nuw nsw i64 %1092, 1
  %1127 = icmp eq i64 %1126, %1090
  br i1 %1127, label %2974, label %1091

1128:                                             ; preds = %1039
  %1129 = icmp eq i8* %4, null
  br i1 %1129, label %1198, label %1130

1130:                                             ; preds = %1128
  %1131 = icmp sgt i32 %3, 0
  br i1 %1131, label %1132, label %2974

1132:                                             ; preds = %1130
  %1133 = add i32 %3, -1
  %1134 = zext i32 %1133 to i64
  %1135 = add nuw nsw i64 %1134, 1
  %1136 = icmp ult i64 %1135, 16
  br i1 %1136, label %1137, label %1164

1137:                                             ; preds = %1196, %1164, %1132
  %1138 = phi i32 [ 0, %1164 ], [ 0, %1132 ], [ %1175, %1196 ]
  %1139 = phi i8* [ %4, %1164 ], [ %4, %1132 ], [ %1176, %1196 ]
  %1140 = phi i8* [ %1, %1164 ], [ %1, %1132 ], [ %1177, %1196 ]
  %1141 = sub i32 %3, %1138
  %1142 = xor i32 %1138, -1
  %1143 = and i32 %1141, 1
  %1144 = icmp eq i32 %1143, 0
  br i1 %1144, label %1158, label %1145

1145:                                             ; preds = %1137
  %1146 = load i8, i8* %1140, align 1
  %1147 = zext i8 %1146 to i16
  %1148 = load i8, i8* %1139, align 1
  %1149 = zext i8 %1148 to i16
  %1150 = add i8 %1148, %1146
  %1151 = mul nuw i16 %1149, %1147
  %1152 = udiv i16 %1151, 255
  %1153 = trunc i16 %1152 to i8
  %1154 = sub i8 %1150, %1153
  store i8 %1154, i8* %1140, align 1
  %1155 = getelementptr inbounds i8, i8* %1140, i64 1
  %1156 = getelementptr inbounds i8, i8* %1139, i64 1
  %1157 = add nuw nsw i32 %1138, 1
  br label %1158

1158:                                             ; preds = %1137, %1145
  %1159 = phi i32 [ %1138, %1137 ], [ %1157, %1145 ]
  %1160 = phi i8* [ %1139, %1137 ], [ %1156, %1145 ]
  %1161 = phi i8* [ %1140, %1137 ], [ %1155, %1145 ]
  %1162 = sub i32 0, %3
  %1163 = icmp eq i32 %1142, %1162
  br i1 %1163, label %2974, label %1200

1164:                                             ; preds = %1132
  %1165 = add i32 %3, -1
  %1166 = zext i32 %1165 to i64
  %1167 = add nuw nsw i64 %1166, 1
  %1168 = getelementptr i8, i8* %1, i64 %1167
  %1169 = getelementptr i8, i8* %4, i64 %1167
  %1170 = icmp ugt i8* %1169, %1
  %1171 = icmp ugt i8* %1168, %4
  %1172 = and i1 %1170, %1171
  br i1 %1172, label %1137, label %1173

1173:                                             ; preds = %1164
  %1174 = and i64 %1135, 8589934576
  %1175 = trunc i64 %1174 to i32
  %1176 = getelementptr i8, i8* %4, i64 %1174
  %1177 = getelementptr i8, i8* %1, i64 %1174
  br label %1178

1178:                                             ; preds = %1178, %1173
  %1179 = phi i64 [ 0, %1173 ], [ %1194, %1178 ]
  %1180 = getelementptr i8, i8* %4, i64 %1179
  %1181 = getelementptr i8, i8* %1, i64 %1179
  %1182 = bitcast i8* %1181 to <16 x i8>*
  %1183 = load <16 x i8>, <16 x i8>* %1182, align 1, !alias.scope !19, !noalias !22
  %1184 = zext <16 x i8> %1183 to <16 x i16>
  %1185 = bitcast i8* %1180 to <16 x i8>*
  %1186 = load <16 x i8>, <16 x i8>* %1185, align 1, !alias.scope !22
  %1187 = zext <16 x i8> %1186 to <16 x i16>
  %1188 = add <16 x i8> %1186, %1183
  %1189 = mul nuw <16 x i16> %1187, %1184
  %1190 = udiv <16 x i16> %1189, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %1191 = trunc <16 x i16> %1190 to <16 x i8>
  %1192 = sub <16 x i8> %1188, %1191
  %1193 = bitcast i8* %1181 to <16 x i8>*
  store <16 x i8> %1192, <16 x i8>* %1193, align 1, !alias.scope !19, !noalias !22
  %1194 = add i64 %1179, 16
  %1195 = icmp eq i64 %1194, %1174
  br i1 %1195, label %1196, label %1178, !llvm.loop !24

1196:                                             ; preds = %1178
  %1197 = icmp eq i64 %1135, %1174
  br i1 %1197, label %2974, label %1137

1198:                                             ; preds = %1128
  %1199 = sext i32 %3 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %1, i8 -1, i64 %1199, i1 false) #7
  br label %2974

1200:                                             ; preds = %1158, %1200
  %1201 = phi i32 [ %1226, %1200 ], [ %1159, %1158 ]
  %1202 = phi i8* [ %1225, %1200 ], [ %1160, %1158 ]
  %1203 = phi i8* [ %1224, %1200 ], [ %1161, %1158 ]
  %1204 = load i8, i8* %1203, align 1
  %1205 = zext i8 %1204 to i16
  %1206 = load i8, i8* %1202, align 1
  %1207 = zext i8 %1206 to i16
  %1208 = add i8 %1206, %1204
  %1209 = mul nuw i16 %1207, %1205
  %1210 = udiv i16 %1209, 255
  %1211 = trunc i16 %1210 to i8
  %1212 = sub i8 %1208, %1211
  store i8 %1212, i8* %1203, align 1
  %1213 = getelementptr inbounds i8, i8* %1203, i64 1
  %1214 = getelementptr inbounds i8, i8* %1202, i64 1
  %1215 = load i8, i8* %1213, align 1
  %1216 = zext i8 %1215 to i16
  %1217 = load i8, i8* %1214, align 1
  %1218 = zext i8 %1217 to i16
  %1219 = add i8 %1217, %1215
  %1220 = mul nuw i16 %1218, %1216
  %1221 = udiv i16 %1220, 255
  %1222 = trunc i16 %1221 to i8
  %1223 = sub i8 %1219, %1222
  store i8 %1223, i8* %1213, align 1
  %1224 = getelementptr inbounds i8, i8* %1203, i64 2
  %1225 = getelementptr inbounds i8, i8* %1202, i64 2
  %1226 = add nuw nsw i32 %1201, 2
  %1227 = icmp eq i32 %1226, %3
  br i1 %1227, label %2974, label %1200, !llvm.loop !26

1228:                                             ; preds = %1037
  %1229 = and i16 %16, 255
  %1230 = icmp eq i16 %1229, 8
  br i1 %1230, label %1231, label %1624

1231:                                             ; preds = %1228
  %1232 = and i16 %11, 512
  %1233 = icmp eq i16 %1232, 0
  %1234 = and i16 %16, 512
  %1235 = icmp ne i16 %1234, 0
  %1236 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 8
  %1237 = load i32, i32* %1236, align 8
  %1238 = icmp sgt i32 %3, 0
  br i1 %1233, label %1435, label %1239

1239:                                             ; preds = %1231
  br i1 %1235, label %1240, label %1358

1240:                                             ; preds = %1239
  br i1 %1238, label %1241, label %2974

1241:                                             ; preds = %1240
  %1242 = icmp eq i8* %5, null
  %1243 = icmp eq i8* %4, null
  %1244 = icmp ne i32 %1237, 0
  %1245 = and i32 %1237, -4
  %1246 = icmp eq i32 %1245, 12
  %1247 = icmp eq i32 %1237, 15
  %1248 = select i1 %1242, i64 4, i64 3
  %1249 = zext i32 %3 to i64
  br label %1250

1250:                                             ; preds = %1352, %1241
  %1251 = phi i64 [ 0, %1241 ], [ %1356, %1352 ]
  %1252 = phi i8* [ %6, %1241 ], [ %1353, %1352 ]
  %1253 = phi i8* [ %5, %1241 ], [ %1259, %1352 ]
  %1254 = phi i8* [ %1, %1241 ], [ %1354, %1352 ]
  %1255 = phi i8* [ %2, %1241 ], [ %1355, %1352 ]
  %1256 = icmp eq i8* %1253, null
  %1257 = getelementptr inbounds i8, i8* %1253, i64 1
  %1258 = getelementptr inbounds i8, i8* %1255, i64 3
  %1259 = select i1 %1256, i8* null, i8* %1257
  %1260 = select i1 %1256, i8* %1258, i8* %1253
  %1261 = load i8, i8* %1252, align 1
  %1262 = zext i8 %1261 to i32
  %1263 = icmp eq i8 %1261, 0
  %1264 = load i8, i8* %1260, align 1
  br i1 %1243, label %1273, label %1265

1265:                                             ; preds = %1250
  %1266 = getelementptr inbounds i8, i8* %4, i64 %1251
  %1267 = load i8, i8* %1266, align 1
  %1268 = zext i8 %1267 to i16
  %1269 = zext i8 %1264 to i16
  %1270 = mul nuw i16 %1268, %1269
  %1271 = udiv i16 %1270, 255
  %1272 = zext i16 %1271 to i32
  br label %1275

1273:                                             ; preds = %1250
  %1274 = zext i8 %1264 to i32
  br label %1275

1275:                                             ; preds = %1273, %1265
  %1276 = phi i32 [ %1272, %1265 ], [ %1274, %1273 ]
  br i1 %1263, label %1277, label %1296

1277:                                             ; preds = %1275
  %1278 = icmp eq i32 %1276, 0
  br i1 %1278, label %1352, label %1279

1279:                                             ; preds = %1277
  %1280 = load i8, i8* %1255, align 1
  %1281 = zext i8 %1280 to i16
  %1282 = mul nuw nsw i16 %1281, 11
  %1283 = getelementptr inbounds i8, i8* %1255, i64 1
  %1284 = load i8, i8* %1283, align 1
  %1285 = zext i8 %1284 to i16
  %1286 = mul nuw nsw i16 %1285, 59
  %1287 = add nuw nsw i16 %1286, %1282
  %1288 = getelementptr inbounds i8, i8* %1255, i64 2
  %1289 = load i8, i8* %1288, align 1
  %1290 = zext i8 %1289 to i16
  %1291 = mul nuw nsw i16 %1290, 30
  %1292 = add nuw nsw i16 %1287, %1291
  %1293 = udiv i16 %1292, 100
  %1294 = trunc i16 %1293 to i8
  store i8 %1294, i8* %1254, align 1
  %1295 = trunc i32 %1276 to i8
  store i8 %1295, i8* %1252, align 1
  br label %1352

1296:                                             ; preds = %1275
  %1297 = and i32 %1276, 255
  %1298 = icmp eq i32 %1297, 0
  br i1 %1298, label %1352, label %1299

1299:                                             ; preds = %1296
  %1300 = add nuw nsw i32 %1276, %1262
  %1301 = mul nuw nsw i32 %1297, %1262
  %1302 = trunc i32 %1301 to i16
  %1303 = udiv i16 %1302, 255
  %1304 = zext i16 %1303 to i32
  %1305 = sub nsw i32 %1300, %1304
  %1306 = trunc i32 %1305 to i8
  store i8 %1306, i8* %1252, align 1
  %1307 = trunc i32 %1297 to i16
  %1308 = mul nuw i16 %1307, 255
  %1309 = trunc i32 %1305 to i16
  %1310 = and i16 %1309, 255
  %1311 = udiv i16 %1308, %1310
  %1312 = zext i16 %1311 to i32
  %1313 = load i8, i8* %1255, align 1
  %1314 = zext i8 %1313 to i16
  %1315 = mul nuw nsw i16 %1314, 11
  %1316 = getelementptr inbounds i8, i8* %1255, i64 1
  %1317 = load i8, i8* %1316, align 1
  %1318 = zext i8 %1317 to i16
  %1319 = mul nuw nsw i16 %1318, 59
  %1320 = add nuw nsw i16 %1319, %1315
  %1321 = getelementptr inbounds i8, i8* %1255, i64 2
  %1322 = load i8, i8* %1321, align 1
  %1323 = zext i8 %1322 to i16
  %1324 = mul nuw nsw i16 %1323, 30
  %1325 = add nuw nsw i16 %1320, %1324
  %1326 = udiv i16 %1325, 100
  %1327 = trunc i16 %1326 to i8
  %1328 = icmp ne i8* %1259, null
  %1329 = and i1 %1244, %1328
  br i1 %1329, label %1330, label %1341

1330:                                             ; preds = %1299
  br i1 %1246, label %1331, label %1334

1331:                                             ; preds = %1330
  br i1 %1247, label %1341, label %1332

1332:                                             ; preds = %1331
  %1333 = load i8, i8* %1254, align 1
  br label %1341

1334:                                             ; preds = %1330
  %1335 = load i8, i8* %1254, align 1
  %1336 = zext i8 %1335 to i32
  %1337 = and i16 %1326, 255
  %1338 = zext i16 %1337 to i32
  %1339 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %1237, i32 %1336, i32 %1338) #7
  %1340 = trunc i32 %1339 to i8
  br label %1341

1341:                                             ; preds = %1334, %1332, %1331, %1299
  %1342 = phi i8 [ %1340, %1334 ], [ %1327, %1299 ], [ %1333, %1332 ], [ %1327, %1331 ]
  %1343 = load i8, i8* %1254, align 1
  %1344 = zext i8 %1343 to i32
  %1345 = sub nsw i32 255, %1312
  %1346 = mul nsw i32 %1345, %1344
  %1347 = zext i8 %1342 to i32
  %1348 = mul nuw nsw i32 %1347, %1312
  %1349 = add nsw i32 %1346, %1348
  %1350 = sdiv i32 %1349, 255
  %1351 = trunc i32 %1350 to i8
  store i8 %1351, i8* %1254, align 1
  br label %1352

1352:                                             ; preds = %1341, %1296, %1279, %1277
  %1353 = getelementptr inbounds i8, i8* %1252, i64 1
  %1354 = getelementptr inbounds i8, i8* %1254, i64 1
  %1355 = getelementptr inbounds i8, i8* %1255, i64 %1248
  %1356 = add nuw nsw i64 %1251, 1
  %1357 = icmp eq i64 %1356, %1249
  br i1 %1357, label %2974, label %1250

1358:                                             ; preds = %1239
  br i1 %1238, label %1359, label %2974

1359:                                             ; preds = %1358
  %1360 = icmp eq i8* %5, null
  %1361 = icmp eq i8* %4, null
  %1362 = and i32 %1237, -4
  %1363 = icmp eq i32 %1362, 12
  %1364 = icmp eq i32 %1237, 0
  %1365 = icmp eq i32 %1237, 15
  %1366 = select i1 %1360, i64 4, i64 3
  %1367 = zext i32 %3 to i64
  br label %1368

1368:                                             ; preds = %1430, %1359
  %1369 = phi i64 [ 0, %1359 ], [ %1433, %1430 ]
  %1370 = phi i8* [ %5, %1359 ], [ %1376, %1430 ]
  %1371 = phi i8* [ %1, %1359 ], [ %1431, %1430 ]
  %1372 = phi i8* [ %2, %1359 ], [ %1432, %1430 ]
  %1373 = icmp eq i8* %1370, null
  %1374 = getelementptr inbounds i8, i8* %1370, i64 1
  %1375 = getelementptr inbounds i8, i8* %1372, i64 3
  %1376 = select i1 %1373, i8* null, i8* %1374
  %1377 = select i1 %1373, i8* %1375, i8* %1370
  %1378 = load i8, i8* %1377, align 1
  br i1 %1361, label %1387, label %1379

1379:                                             ; preds = %1368
  %1380 = getelementptr inbounds i8, i8* %4, i64 %1369
  %1381 = load i8, i8* %1380, align 1
  %1382 = zext i8 %1381 to i16
  %1383 = zext i8 %1378 to i16
  %1384 = mul nuw i16 %1382, %1383
  %1385 = udiv i16 %1384, 255
  %1386 = zext i16 %1385 to i32
  br label %1389

1387:                                             ; preds = %1368
  %1388 = zext i8 %1378 to i32
  br label %1389

1389:                                             ; preds = %1387, %1379
  %1390 = phi i32 [ %1386, %1379 ], [ %1388, %1387 ]
  %1391 = icmp eq i32 %1390, 0
  br i1 %1391, label %1430, label %1392

1392:                                             ; preds = %1389
  %1393 = load i8, i8* %1372, align 1
  %1394 = zext i8 %1393 to i16
  %1395 = mul nuw nsw i16 %1394, 11
  %1396 = getelementptr inbounds i8, i8* %1372, i64 1
  %1397 = load i8, i8* %1396, align 1
  %1398 = zext i8 %1397 to i16
  %1399 = mul nuw nsw i16 %1398, 59
  %1400 = add nuw nsw i16 %1399, %1395
  %1401 = getelementptr inbounds i8, i8* %1372, i64 2
  %1402 = load i8, i8* %1401, align 1
  %1403 = zext i8 %1402 to i16
  %1404 = mul nuw nsw i16 %1403, 30
  %1405 = add nuw nsw i16 %1400, %1404
  %1406 = udiv i16 %1405, 100
  %1407 = trunc i16 %1406 to i8
  br i1 %1363, label %1408, label %1411

1408:                                             ; preds = %1392
  br i1 %1365, label %1419, label %1409

1409:                                             ; preds = %1408
  %1410 = load i8, i8* %1371, align 1
  br label %1419

1411:                                             ; preds = %1392
  br i1 %1364, label %1419, label %1412

1412:                                             ; preds = %1411
  %1413 = load i8, i8* %1371, align 1
  %1414 = zext i8 %1413 to i32
  %1415 = and i16 %1406, 255
  %1416 = zext i16 %1415 to i32
  %1417 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %1237, i32 %1414, i32 %1416) #7
  %1418 = trunc i32 %1417 to i8
  br label %1419

1419:                                             ; preds = %1412, %1411, %1409, %1408
  %1420 = phi i8 [ %1418, %1412 ], [ %1407, %1411 ], [ %1410, %1409 ], [ %1407, %1408 ]
  %1421 = load i8, i8* %1371, align 1
  %1422 = zext i8 %1421 to i32
  %1423 = sub nuw nsw i32 255, %1390
  %1424 = mul nsw i32 %1423, %1422
  %1425 = zext i8 %1420 to i32
  %1426 = mul nuw nsw i32 %1390, %1425
  %1427 = add nuw nsw i32 %1424, %1426
  %1428 = sdiv i32 %1427, 255
  %1429 = trunc i32 %1428 to i8
  store i8 %1429, i8* %1371, align 1
  br label %1430

1430:                                             ; preds = %1419, %1389
  %1431 = getelementptr inbounds i8, i8* %1371, i64 1
  %1432 = getelementptr inbounds i8, i8* %1372, i64 %1366
  %1433 = add nuw nsw i64 %1369, 1
  %1434 = icmp eq i64 %1433, %1367
  br i1 %1434, label %2974, label %1368

1435:                                             ; preds = %1231
  br i1 %1235, label %1436, label %1562

1436:                                             ; preds = %1435
  br i1 %1238, label %1437, label %2974

1437:                                             ; preds = %1436
  %1438 = icmp eq i32 %1237, 0
  %1439 = zext i16 %13 to i64
  %1440 = icmp eq i8* %4, null
  %1441 = and i32 %1237, -4
  %1442 = icmp eq i32 %1441, 12
  %1443 = icmp eq i32 %1237, 15
  %1444 = zext i32 %3 to i64
  br label %1445

1445:                                             ; preds = %1556, %1437
  %1446 = phi i64 [ 0, %1437 ], [ %1560, %1556 ]
  %1447 = phi i8* [ %1, %1437 ], [ %1559, %1556 ]
  %1448 = phi i8* [ %2, %1437 ], [ %1557, %1556 ]
  %1449 = phi i8* [ %6, %1437 ], [ %1558, %1556 ]
  br i1 %1438, label %1469, label %1450

1450:                                             ; preds = %1445
  %1451 = load i8, i8* %1449, align 1
  %1452 = icmp eq i8 %1451, 0
  br i1 %1452, label %1453, label %1469

1453:                                             ; preds = %1450
  %1454 = load i8, i8* %1448, align 1
  %1455 = zext i8 %1454 to i16
  %1456 = mul nuw nsw i16 %1455, 11
  %1457 = getelementptr inbounds i8, i8* %1448, i64 1
  %1458 = load i8, i8* %1457, align 1
  %1459 = zext i8 %1458 to i16
  %1460 = mul nuw nsw i16 %1459, 59
  %1461 = add nuw nsw i16 %1460, %1456
  %1462 = getelementptr inbounds i8, i8* %1448, i64 2
  %1463 = load i8, i8* %1462, align 1
  %1464 = zext i8 %1463 to i16
  %1465 = mul nuw nsw i16 %1464, 30
  %1466 = add nuw nsw i16 %1461, %1465
  %1467 = udiv i16 %1466, 100
  %1468 = trunc i16 %1467 to i8
  store i8 %1468, i8* %1447, align 1
  br label %1556

1469:                                             ; preds = %1450, %1445
  br i1 %1440, label %1474, label %1470

1470:                                             ; preds = %1469
  %1471 = getelementptr inbounds i8, i8* %4, i64 %1446
  %1472 = load i8, i8* %1471, align 1
  %1473 = zext i8 %1472 to i32
  switch i8 %1472, label %1503 [
    i8 -1, label %1474
    i8 0, label %1556
  ]

1474:                                             ; preds = %1470, %1469
  %1475 = load i8, i8* %1448, align 1
  %1476 = zext i8 %1475 to i16
  %1477 = mul nuw nsw i16 %1476, 11
  %1478 = getelementptr inbounds i8, i8* %1448, i64 1
  %1479 = load i8, i8* %1478, align 1
  %1480 = zext i8 %1479 to i16
  %1481 = mul nuw nsw i16 %1480, 59
  %1482 = add nuw nsw i16 %1481, %1477
  %1483 = getelementptr inbounds i8, i8* %1448, i64 2
  %1484 = load i8, i8* %1483, align 1
  %1485 = zext i8 %1484 to i16
  %1486 = mul nuw nsw i16 %1485, 30
  %1487 = add nuw nsw i16 %1482, %1486
  %1488 = udiv i16 %1487, 100
  %1489 = trunc i16 %1488 to i8
  br i1 %1442, label %1490, label %1493

1490:                                             ; preds = %1474
  br i1 %1443, label %1501, label %1491

1491:                                             ; preds = %1490
  %1492 = load i8, i8* %1447, align 1
  br label %1501

1493:                                             ; preds = %1474
  br i1 %1438, label %1501, label %1494

1494:                                             ; preds = %1493
  %1495 = load i8, i8* %1447, align 1
  %1496 = zext i8 %1495 to i32
  %1497 = and i16 %1488, 255
  %1498 = zext i16 %1497 to i32
  %1499 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %1237, i32 %1496, i32 %1498) #7
  %1500 = trunc i32 %1499 to i8
  br label %1501

1501:                                             ; preds = %1494, %1493, %1491, %1490
  %1502 = phi i8 [ %1500, %1494 ], [ %1489, %1493 ], [ %1492, %1491 ], [ %1489, %1490 ]
  store i8 %1502, i8* %1447, align 1
  store i8 -1, i8* %1449, align 1
  br label %1556

1503:                                             ; preds = %1470
  %1504 = load i8, i8* %1449, align 1
  %1505 = zext i8 %1504 to i32
  %1506 = add nuw nsw i32 %1505, %1473
  %1507 = mul nuw nsw i32 %1505, %1473
  %1508 = trunc i32 %1507 to i16
  %1509 = udiv i16 %1508, 255
  %1510 = zext i16 %1509 to i32
  %1511 = sub nsw i32 %1506, %1510
  %1512 = trunc i32 %1511 to i8
  store i8 %1512, i8* %1449, align 1
  %1513 = zext i8 %1472 to i16
  %1514 = mul nuw i16 %1513, 255
  %1515 = trunc i32 %1511 to i16
  %1516 = and i16 %1515, 255
  %1517 = udiv i16 %1514, %1516
  %1518 = zext i16 %1517 to i32
  %1519 = load i8, i8* %1448, align 1
  %1520 = zext i8 %1519 to i16
  %1521 = mul nuw nsw i16 %1520, 11
  %1522 = getelementptr inbounds i8, i8* %1448, i64 1
  %1523 = load i8, i8* %1522, align 1
  %1524 = zext i8 %1523 to i16
  %1525 = mul nuw nsw i16 %1524, 59
  %1526 = add nuw nsw i16 %1525, %1521
  %1527 = getelementptr inbounds i8, i8* %1448, i64 2
  %1528 = load i8, i8* %1527, align 1
  %1529 = zext i8 %1528 to i16
  %1530 = mul nuw nsw i16 %1529, 30
  %1531 = add nuw nsw i16 %1526, %1530
  %1532 = udiv i16 %1531, 100
  %1533 = trunc i16 %1532 to i8
  br i1 %1442, label %1534, label %1537

1534:                                             ; preds = %1503
  br i1 %1443, label %1545, label %1535

1535:                                             ; preds = %1534
  %1536 = load i8, i8* %1447, align 1
  br label %1545

1537:                                             ; preds = %1503
  br i1 %1438, label %1545, label %1538

1538:                                             ; preds = %1537
  %1539 = load i8, i8* %1447, align 1
  %1540 = zext i8 %1539 to i32
  %1541 = and i16 %1532, 255
  %1542 = zext i16 %1541 to i32
  %1543 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %1237, i32 %1540, i32 %1542) #7
  %1544 = trunc i32 %1543 to i8
  br label %1545

1545:                                             ; preds = %1538, %1537, %1535, %1534
  %1546 = phi i8 [ %1544, %1538 ], [ %1533, %1537 ], [ %1536, %1535 ], [ %1533, %1534 ]
  %1547 = load i8, i8* %1447, align 1
  %1548 = zext i8 %1547 to i32
  %1549 = sub nsw i32 255, %1518
  %1550 = mul nsw i32 %1549, %1548
  %1551 = zext i8 %1546 to i32
  %1552 = mul nuw nsw i32 %1551, %1518
  %1553 = add nsw i32 %1550, %1552
  %1554 = sdiv i32 %1553, 255
  %1555 = trunc i32 %1554 to i8
  store i8 %1555, i8* %1447, align 1
  br label %1556

1556:                                             ; preds = %1545, %1501, %1470, %1453
  %1557 = getelementptr inbounds i8, i8* %1448, i64 %1439
  %1558 = getelementptr inbounds i8, i8* %1449, i64 1
  %1559 = getelementptr inbounds i8, i8* %1447, i64 1
  %1560 = add nuw nsw i64 %1446, 1
  %1561 = icmp eq i64 %1560, %1444
  br i1 %1561, label %2974, label %1445

1562:                                             ; preds = %1435
  br i1 %1238, label %1563, label %2974

1563:                                             ; preds = %1562
  %1564 = and i32 %1237, -4
  %1565 = icmp eq i32 %1564, 12
  %1566 = icmp eq i32 %1237, 0
  %1567 = icmp eq i32 %1237, 15
  %1568 = icmp eq i8* %4, null
  %1569 = zext i16 %13 to i64
  %1570 = zext i32 %3 to i64
  br label %1571

1571:                                             ; preds = %1618, %1563
  %1572 = phi i64 [ 0, %1563 ], [ %1622, %1618 ]
  %1573 = phi i8* [ %1, %1563 ], [ %1620, %1618 ]
  %1574 = phi i8* [ %2, %1563 ], [ %1621, %1618 ]
  %1575 = load i8, i8* %1574, align 1
  %1576 = zext i8 %1575 to i16
  %1577 = mul nuw nsw i16 %1576, 11
  %1578 = getelementptr inbounds i8, i8* %1574, i64 1
  %1579 = load i8, i8* %1578, align 1
  %1580 = zext i8 %1579 to i16
  %1581 = mul nuw nsw i16 %1580, 59
  %1582 = add nuw nsw i16 %1581, %1577
  %1583 = getelementptr inbounds i8, i8* %1574, i64 2
  %1584 = load i8, i8* %1583, align 1
  %1585 = zext i8 %1584 to i16
  %1586 = mul nuw nsw i16 %1585, 30
  %1587 = add nuw nsw i16 %1582, %1586
  %1588 = udiv i16 %1587, 100
  %1589 = trunc i16 %1588 to i8
  br i1 %1565, label %1590, label %1593

1590:                                             ; preds = %1571
  br i1 %1567, label %1601, label %1591

1591:                                             ; preds = %1590
  %1592 = load i8, i8* %1573, align 1
  br label %1601

1593:                                             ; preds = %1571
  br i1 %1566, label %1601, label %1594

1594:                                             ; preds = %1593
  %1595 = load i8, i8* %1573, align 1
  %1596 = zext i8 %1595 to i32
  %1597 = and i16 %1588, 255
  %1598 = zext i16 %1597 to i32
  %1599 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %1237, i32 %1596, i32 %1598) #7
  %1600 = trunc i32 %1599 to i8
  br label %1601

1601:                                             ; preds = %1594, %1593, %1591, %1590
  %1602 = phi i8 [ %1600, %1594 ], [ %1589, %1593 ], [ %1592, %1591 ], [ %1589, %1590 ]
  br i1 %1568, label %1618, label %1603

1603:                                             ; preds = %1601
  %1604 = getelementptr inbounds i8, i8* %4, i64 %1572
  %1605 = load i8, i8* %1604, align 1
  %1606 = zext i8 %1605 to i32
  %1607 = icmp eq i8 %1605, -1
  br i1 %1607, label %1618, label %1608

1608:                                             ; preds = %1603
  %1609 = load i8, i8* %1573, align 1
  %1610 = zext i8 %1609 to i32
  %1611 = xor i32 %1606, 255
  %1612 = mul nuw nsw i32 %1611, %1610
  %1613 = zext i8 %1602 to i32
  %1614 = mul nuw nsw i32 %1606, %1613
  %1615 = add nuw nsw i32 %1612, %1614
  %1616 = udiv i32 %1615, 255
  %1617 = trunc i32 %1616 to i8
  br label %1618

1618:                                             ; preds = %1608, %1603, %1601
  %1619 = phi i8 [ %1617, %1608 ], [ %1602, %1603 ], [ %1602, %1601 ]
  store i8 %1619, i8* %1573, align 1
  %1620 = getelementptr inbounds i8, i8* %1573, i64 1
  %1621 = getelementptr inbounds i8, i8* %1574, i64 %1569
  %1622 = add nuw nsw i64 %1572, 1
  %1623 = icmp eq i64 %1622, %1570
  br i1 %1623, label %2974, label %1571

1624:                                             ; preds = %1228
  %1625 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 0
  %1626 = load i32, i32* %1625, align 8
  switch i32 %1626, label %2974 [
    i32 0, label %1627
    i32 4, label %1627
    i32 8, label %1627
    i32 12, label %1627
    i32 1, label %1862
    i32 9, label %1972
    i32 5, label %2117
    i32 13, label %2180
    i32 2, label %2330
    i32 10, label %2330
    i32 6, label %2520
    i32 14, label %2520
    i32 3, label %2661
    i32 11, label %2721
    i32 7, label %2814
    i32 15, label %2843
  ]

1627:                                             ; preds = %1624, %1624, %1624, %1624
  %1628 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 8
  %1629 = load i32, i32* %1628, align 8
  %1630 = bitcast [3 x i32]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %1630) #7
  %1631 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 0
  store i32 -1431655766, i32* %1631, align 4
  %1632 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 1
  store i32 -1431655766, i32* %1632, align 4
  %1633 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 2
  store i32 -1431655766, i32* %1633, align 4
  %1634 = icmp ne i8* %6, null
  %1635 = icmp ne i8* %5, null
  %1636 = and i32 %1629, -4
  %1637 = icmp eq i32 %1636, 12
  %1638 = icmp sgt i32 %3, 0
  br i1 %1638, label %1639, label %1861

1639:                                             ; preds = %1627
  %1640 = icmp eq i8* %4, null
  %1641 = icmp eq i32 %1629, 0
  %1642 = select i1 %1634, i64 3, i64 4
  %1643 = select i1 %1635, i64 3, i64 4
  %1644 = or i1 %1635, %1634
  %1645 = zext i32 %3 to i64
  br label %1646

1646:                                             ; preds = %1754, %1639
  %1647 = phi i64 [ 0, %1639 ], [ %1758, %1754 ]
  %1648 = phi i8* [ %5, %1639 ], [ %1657, %1754 ]
  %1649 = phi i8* [ %6, %1639 ], [ %1757, %1754 ]
  %1650 = phi i8* [ %1, %1639 ], [ %1756, %1754 ]
  %1651 = phi i8* [ %2, %1639 ], [ %1755, %1754 ]
  %1652 = getelementptr inbounds i8, i8* %1650, i64 3
  %1653 = select i1 %1634, i8* %1649, i8* %1652
  %1654 = load i8, i8* %1653, align 1
  %1655 = getelementptr inbounds i8, i8* %1648, i64 1
  %1656 = getelementptr inbounds i8, i8* %1651, i64 3
  %1657 = select i1 %1635, i8* %1655, i8* %1648
  %1658 = select i1 %1635, i8* %1648, i8* %1656
  %1659 = load i8, i8* %1658, align 1
  br i1 %1640, label %1668, label %1660

1660:                                             ; preds = %1646
  %1661 = getelementptr inbounds i8, i8* %4, i64 %1647
  %1662 = load i8, i8* %1661, align 1
  %1663 = zext i8 %1662 to i16
  %1664 = zext i8 %1659 to i16
  %1665 = mul nuw i16 %1663, %1664
  %1666 = udiv i16 %1665, 255
  %1667 = zext i16 %1666 to i32
  br label %1670

1668:                                             ; preds = %1646
  %1669 = zext i8 %1659 to i32
  br label %1670

1670:                                             ; preds = %1668, %1660
  %1671 = phi i32 [ %1667, %1660 ], [ %1669, %1668 ]
  %1672 = trunc i32 %1671 to i8
  %1673 = zext i8 %1654 to i32
  %1674 = icmp eq i8 %1654, 0
  br i1 %1674, label %1675, label %1710

1675:                                             ; preds = %1670
  br i1 %1644, label %1689, label %1676

1676:                                             ; preds = %1675
  br i1 %1640, label %1685, label %1677

1677:                                             ; preds = %1676
  %1678 = load i8, i8* %1651, align 1
  %1679 = getelementptr inbounds i8, i8* %1651, i64 1
  %1680 = getelementptr inbounds i8, i8* %1651, i64 2
  store i8 %1678, i8* %1650, align 1
  %1681 = load i8, i8* %1679, align 1
  %1682 = getelementptr inbounds i8, i8* %1650, i64 1
  store i8 %1681, i8* %1682, align 1
  %1683 = load i8, i8* %1680, align 1
  %1684 = getelementptr inbounds i8, i8* %1650, i64 2
  store i8 %1683, i8* %1684, align 1
  store i8 %1672, i8* %1652, align 1
  br label %1702

1685:                                             ; preds = %1676
  %1686 = bitcast i8* %1651 to i32*
  %1687 = bitcast i8* %1650 to i32*
  %1688 = load i32, i32* %1686, align 1
  store i32 %1688, i32* %1687, align 1
  br label %1702

1689:                                             ; preds = %1675
  br i1 %1634, label %1690, label %1694

1690:                                             ; preds = %1689
  store i8 %1672, i8* %1649, align 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1650, i8* align 1 %1651, i64 3, i1 false) #7
  %1691 = getelementptr inbounds i8, i8* %1649, i64 1
  %1692 = getelementptr inbounds i8, i8* %1651, i64 4
  %1693 = select i1 %1635, i8* %1656, i8* %1692
  br label %1702

1694:                                             ; preds = %1689
  %1695 = getelementptr inbounds i8, i8* %1651, i64 2
  %1696 = getelementptr inbounds i8, i8* %1651, i64 1
  %1697 = load i8, i8* %1651, align 1
  store i8 %1697, i8* %1650, align 1
  %1698 = load i8, i8* %1696, align 1
  %1699 = getelementptr inbounds i8, i8* %1650, i64 1
  store i8 %1698, i8* %1699, align 1
  %1700 = load i8, i8* %1695, align 1
  %1701 = getelementptr inbounds i8, i8* %1650, i64 2
  store i8 %1700, i8* %1701, align 1
  store i8 0, i8* %1652, align 1
  br label %1702

1702:                                             ; preds = %1694, %1690, %1685, %1677
  %1703 = phi i8* [ %1651, %1694 ], [ %1651, %1677 ], [ %1651, %1685 ], [ %1693, %1690 ]
  %1704 = phi i8* [ %1650, %1694 ], [ %1650, %1677 ], [ %1650, %1685 ], [ %1652, %1690 ]
  %1705 = phi i8* [ %1649, %1694 ], [ %1649, %1677 ], [ %1649, %1685 ], [ %1691, %1690 ]
  %1706 = getelementptr inbounds i8, i8* %1704, i64 %1642
  %1707 = getelementptr inbounds i8, i8* %1703, i64 %1643
  %1708 = select i1 %1634, i8* %1703, i8* %1707
  %1709 = select i1 %1634, i8* %1704, i8* %1706
  br label %1754

1710:                                             ; preds = %1670
  %1711 = and i32 %1671, 255
  %1712 = icmp eq i32 %1711, 0
  br i1 %1712, label %1713, label %1718

1713:                                             ; preds = %1710
  %1714 = getelementptr inbounds i8, i8* %1650, i64 %1642
  %1715 = getelementptr inbounds i8, i8* %1651, i64 %1643
  %1716 = getelementptr inbounds i8, i8* %1649, i64 1
  %1717 = select i1 %1634, i8* %1716, i8* %1649
  br label %1754

1718:                                             ; preds = %1710
  %1719 = add nuw nsw i32 %1671, %1673
  %1720 = mul nuw nsw i32 %1711, %1673
  %1721 = trunc i32 %1720 to i16
  %1722 = udiv i16 %1721, 255
  %1723 = zext i16 %1722 to i32
  %1724 = sub nsw i32 %1719, %1723
  %1725 = trunc i32 %1724 to i8
  br i1 %1634, label %1726, label %1728

1726:                                             ; preds = %1718
  store i8 %1725, i8* %1649, align 1
  %1727 = getelementptr inbounds i8, i8* %1649, i64 1
  br label %1729

1728:                                             ; preds = %1718
  store i8 %1725, i8* %1652, align 1
  br label %1729

1729:                                             ; preds = %1728, %1726
  %1730 = phi i8* [ %1727, %1726 ], [ %1649, %1728 ]
  %1731 = trunc i32 %1711 to i16
  %1732 = mul nuw i16 %1731, 255
  %1733 = trunc i32 %1724 to i16
  %1734 = and i16 %1733, 255
  %1735 = udiv i16 %1732, %1734
  %1736 = zext i16 %1735 to i32
  br i1 %1637, label %1737, label %1738

1737:                                             ; preds = %1729
  call fastcc void @_ZN12_GLOBAL__N_19RGB_BlendE9BlendModePKhS2_Pi(i32 %1629, i8* %1651, i8* %1650, i32* nonnull %1631) #7
  br label %1738

1738:                                             ; preds = %1737, %1729
  %1739 = xor i32 %1673, 255
  %1740 = sub nsw i32 255, %1736
  br i1 %1641, label %1823, label %1741

1741:                                             ; preds = %1738
  br i1 %1637, label %1742, label %1748

1742:                                             ; preds = %1741
  %1743 = load i32, i32* %1631, align 4
  %1744 = load i8, i8* %1651, align 1
  %1745 = load i8, i8* %1650, align 1
  %1746 = zext i8 %1744 to i32
  %1747 = zext i8 %1745 to i32
  br label %1760

1748:                                             ; preds = %1741
  %1749 = load i8, i8* %1650, align 1
  %1750 = zext i8 %1749 to i32
  %1751 = load i8, i8* %1651, align 1
  %1752 = zext i8 %1751 to i32
  %1753 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %1629, i32 %1750, i32 %1752) #7
  br label %1760

1754:                                             ; preds = %1851, %1713, %1702
  %1755 = phi i8* [ %1715, %1713 ], [ %1708, %1702 ], [ %1860, %1851 ]
  %1756 = phi i8* [ %1714, %1713 ], [ %1709, %1702 ], [ %1859, %1851 ]
  %1757 = phi i8* [ %1717, %1713 ], [ %1705, %1702 ], [ %1730, %1851 ]
  %1758 = add nuw nsw i64 %1647, 1
  %1759 = icmp eq i64 %1758, %1645
  br i1 %1759, label %1861, label %1646

1760:                                             ; preds = %1748, %1742
  %1761 = phi i32 [ %1750, %1748 ], [ %1747, %1742 ]
  %1762 = phi i32 [ %1752, %1748 ], [ %1746, %1742 ]
  %1763 = phi i32 [ %1753, %1748 ], [ %1743, %1742 ]
  %1764 = mul nuw nsw i32 %1762, %1739
  %1765 = mul nsw i32 %1763, %1673
  %1766 = add nsw i32 %1765, %1764
  %1767 = sdiv i32 %1766, 255
  %1768 = mul nsw i32 %1761, %1740
  %1769 = mul nsw i32 %1767, %1736
  %1770 = add nsw i32 %1769, %1768
  %1771 = sdiv i32 %1770, 255
  %1772 = trunc i32 %1771 to i8
  store i8 %1772, i8* %1650, align 1
  %1773 = getelementptr inbounds i8, i8* %1650, i64 1
  %1774 = getelementptr inbounds i8, i8* %1651, i64 1
  br i1 %1637, label %1781, label %1775

1775:                                             ; preds = %1760
  %1776 = load i8, i8* %1773, align 1
  %1777 = zext i8 %1776 to i32
  %1778 = load i8, i8* %1774, align 1
  %1779 = zext i8 %1778 to i32
  %1780 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %1629, i32 %1777, i32 %1779) #7
  br label %1787

1781:                                             ; preds = %1760
  %1782 = load i32, i32* %1632, align 4
  %1783 = load i8, i8* %1774, align 1
  %1784 = load i8, i8* %1773, align 1
  %1785 = zext i8 %1783 to i32
  %1786 = zext i8 %1784 to i32
  br label %1787

1787:                                             ; preds = %1781, %1775
  %1788 = phi i32 [ %1786, %1781 ], [ %1777, %1775 ]
  %1789 = phi i32 [ %1785, %1781 ], [ %1779, %1775 ]
  %1790 = phi i32 [ %1782, %1781 ], [ %1780, %1775 ]
  %1791 = mul nuw nsw i32 %1789, %1739
  %1792 = mul nsw i32 %1790, %1673
  %1793 = add nsw i32 %1792, %1791
  %1794 = sdiv i32 %1793, 255
  %1795 = mul nsw i32 %1788, %1740
  %1796 = mul nsw i32 %1794, %1736
  %1797 = add nsw i32 %1796, %1795
  %1798 = sdiv i32 %1797, 255
  %1799 = trunc i32 %1798 to i8
  store i8 %1799, i8* %1773, align 1
  %1800 = getelementptr inbounds i8, i8* %1650, i64 2
  %1801 = getelementptr inbounds i8, i8* %1651, i64 2
  br i1 %1637, label %1808, label %1802

1802:                                             ; preds = %1787
  %1803 = load i8, i8* %1800, align 1
  %1804 = zext i8 %1803 to i32
  %1805 = load i8, i8* %1801, align 1
  %1806 = zext i8 %1805 to i32
  %1807 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %1629, i32 %1804, i32 %1806) #7
  br label %1814

1808:                                             ; preds = %1787
  %1809 = load i32, i32* %1633, align 4
  %1810 = load i8, i8* %1801, align 1
  %1811 = load i8, i8* %1800, align 1
  %1812 = zext i8 %1810 to i32
  %1813 = zext i8 %1811 to i32
  br label %1814

1814:                                             ; preds = %1808, %1802
  %1815 = phi i32 [ %1813, %1808 ], [ %1804, %1802 ]
  %1816 = phi i32 [ %1812, %1808 ], [ %1806, %1802 ]
  %1817 = phi i32 [ %1809, %1808 ], [ %1807, %1802 ]
  %1818 = mul nuw nsw i32 %1816, %1739
  %1819 = mul nsw i32 %1817, %1673
  %1820 = add nsw i32 %1819, %1818
  %1821 = sdiv i32 %1820, 255
  %1822 = mul nsw i32 %1815, %1740
  br label %1851

1823:                                             ; preds = %1738
  %1824 = load i8, i8* %1650, align 1
  %1825 = zext i8 %1824 to i32
  %1826 = mul nsw i32 %1740, %1825
  %1827 = load i8, i8* %1651, align 1
  %1828 = zext i8 %1827 to i32
  %1829 = mul nuw nsw i32 %1828, %1736
  %1830 = add nsw i32 %1829, %1826
  %1831 = sdiv i32 %1830, 255
  %1832 = trunc i32 %1831 to i8
  store i8 %1832, i8* %1650, align 1
  %1833 = getelementptr inbounds i8, i8* %1650, i64 1
  %1834 = getelementptr inbounds i8, i8* %1651, i64 1
  %1835 = load i8, i8* %1833, align 1
  %1836 = zext i8 %1835 to i32
  %1837 = mul nsw i32 %1740, %1836
  %1838 = load i8, i8* %1834, align 1
  %1839 = zext i8 %1838 to i32
  %1840 = mul nuw nsw i32 %1839, %1736
  %1841 = add nsw i32 %1840, %1837
  %1842 = sdiv i32 %1841, 255
  %1843 = trunc i32 %1842 to i8
  store i8 %1843, i8* %1833, align 1
  %1844 = getelementptr inbounds i8, i8* %1650, i64 2
  %1845 = getelementptr inbounds i8, i8* %1651, i64 2
  %1846 = load i8, i8* %1844, align 1
  %1847 = zext i8 %1846 to i32
  %1848 = mul nsw i32 %1740, %1847
  %1849 = load i8, i8* %1845, align 1
  %1850 = zext i8 %1849 to i32
  br label %1851

1851:                                             ; preds = %1823, %1814
  %1852 = phi i32 [ %1850, %1823 ], [ %1821, %1814 ]
  %1853 = phi i32 [ %1848, %1823 ], [ %1822, %1814 ]
  %1854 = phi i8* [ %1844, %1823 ], [ %1800, %1814 ]
  %1855 = mul nsw i32 %1852, %1736
  %1856 = add nsw i32 %1855, %1853
  %1857 = sdiv i32 %1856, 255
  %1858 = trunc i32 %1857 to i8
  store i8 %1858, i8* %1854, align 1
  %1859 = getelementptr inbounds i8, i8* %1650, i64 %1642
  %1860 = getelementptr inbounds i8, i8* %1651, i64 %1643
  br label %1754

1861:                                             ; preds = %1754, %1627
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %1630) #7
  br label %2974

1862:                                             ; preds = %1624
  %1863 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 8
  %1864 = load i32, i32* %1863, align 8
  %1865 = bitcast [3 x i32]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %1865) #7
  %1866 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 0
  store i32 -1431655766, i32* %1866, align 4
  %1867 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 1
  store i32 -1431655766, i32* %1867, align 4
  %1868 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 2
  store i32 -1431655766, i32* %1868, align 4
  %1869 = and i32 %1864, -4
  %1870 = icmp eq i32 %1869, 12
  %1871 = icmp sgt i32 %3, 0
  br i1 %1871, label %1872, label %1971

1872:                                             ; preds = %1862
  %1873 = add nsw i32 %14, -3
  %1874 = sext i32 %1873 to i64
  %1875 = zext i16 %13 to i64
  br label %1876

1876:                                             ; preds = %1929, %1872
  %1877 = phi i32 [ 0, %1872 ], [ %1933, %1929 ]
  %1878 = phi i8* [ %6, %1872 ], [ %1932, %1929 ]
  %1879 = phi i8* [ %1, %1872 ], [ %1931, %1929 ]
  %1880 = phi i8* [ %2, %1872 ], [ %1930, %1929 ]
  %1881 = icmp ne i8* %1878, null
  %1882 = getelementptr inbounds i8, i8* %1879, i64 3
  %1883 = select i1 %1881, i8* %1878, i8* %1882
  %1884 = load i8, i8* %1883, align 1
  %1885 = zext i8 %1884 to i32
  %1886 = icmp eq i8 %1884, 0
  br i1 %1886, label %1887, label %1905

1887:                                             ; preds = %1876
  br i1 %1881, label %1888, label %1891

1888:                                             ; preds = %1887
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1879, i8* align 1 %1880, i64 3, i1 false) #7
  %1889 = getelementptr inbounds i8, i8* %1880, i64 3
  store i8 -1, i8* %1878, align 1
  %1890 = getelementptr inbounds i8, i8* %1878, i64 1
  br label %1900

1891:                                             ; preds = %1887
  %1892 = getelementptr inbounds i8, i8* %1880, i64 1
  %1893 = load i8, i8* %1880, align 1
  store i8 %1893, i8* %1879, align 1
  %1894 = load i8, i8* %1892, align 1
  %1895 = getelementptr inbounds i8, i8* %1879, i64 1
  store i8 %1894, i8* %1895, align 1
  %1896 = getelementptr inbounds i8, i8* %1880, i64 2
  %1897 = load i8, i8* %1896, align 1
  %1898 = getelementptr inbounds i8, i8* %1879, i64 2
  store i8 %1897, i8* %1898, align 1
  store i8 -1, i8* %1882, align 1
  %1899 = getelementptr inbounds i8, i8* %1879, i64 4
  br label %1900

1900:                                             ; preds = %1891, %1888
  %1901 = phi i8* [ %1889, %1888 ], [ %1880, %1891 ]
  %1902 = phi i8* [ %1882, %1888 ], [ %1899, %1891 ]
  %1903 = phi i8* [ %1890, %1888 ], [ null, %1891 ]
  %1904 = getelementptr inbounds i8, i8* %1901, i64 %1875
  br label %1929

1905:                                             ; preds = %1876
  store i8 -1, i8* %1883, align 1
  br i1 %1870, label %1906, label %1910

1906:                                             ; preds = %1905
  call fastcc void @_ZN12_GLOBAL__N_19RGB_BlendE9BlendModePKhS2_Pi(i32 %1864, i8* %1880, i8* %1879, i32* nonnull %1866) #7
  %1907 = load i8, i8* %1880, align 1
  %1908 = zext i8 %1907 to i32
  %1909 = load i32, i32* %1866, align 4
  br label %1916

1910:                                             ; preds = %1905
  %1911 = load i8, i8* %1880, align 1
  %1912 = zext i8 %1911 to i32
  %1913 = load i8, i8* %1879, align 1
  %1914 = zext i8 %1913 to i32
  %1915 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %1864, i32 %1914, i32 %1912) #7
  br label %1916

1916:                                             ; preds = %1910, %1906
  %1917 = phi i32 [ %1908, %1906 ], [ %1912, %1910 ]
  %1918 = phi i32 [ %1909, %1906 ], [ %1915, %1910 ]
  %1919 = xor i32 %1885, 255
  %1920 = mul nuw nsw i32 %1917, %1919
  %1921 = mul nsw i32 %1918, %1885
  %1922 = add nsw i32 %1921, %1920
  %1923 = sdiv i32 %1922, 255
  %1924 = trunc i32 %1923 to i8
  store i8 %1924, i8* %1879, align 1
  %1925 = getelementptr inbounds i8, i8* %1879, i64 1
  %1926 = getelementptr inbounds i8, i8* %1880, i64 1
  %1927 = load i8, i8* %1926, align 1
  %1928 = zext i8 %1927 to i32
  br i1 %1870, label %1939, label %1935

1929:                                             ; preds = %1958, %1900
  %1930 = phi i8* [ %1904, %1900 ], [ %1970, %1958 ]
  %1931 = phi i8* [ %1902, %1900 ], [ %1968, %1958 ]
  %1932 = phi i8* [ %1903, %1900 ], [ %1969, %1958 ]
  %1933 = add nuw nsw i32 %1877, 1
  %1934 = icmp eq i32 %1933, %3
  br i1 %1934, label %1971, label %1876

1935:                                             ; preds = %1916
  %1936 = load i8, i8* %1925, align 1
  %1937 = zext i8 %1936 to i32
  %1938 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %1864, i32 %1937, i32 %1928) #7
  br label %1941

1939:                                             ; preds = %1916
  %1940 = load i32, i32* %1867, align 4
  br label %1941

1941:                                             ; preds = %1939, %1935
  %1942 = phi i32 [ %1940, %1939 ], [ %1938, %1935 ]
  %1943 = mul nuw nsw i32 %1919, %1928
  %1944 = mul nsw i32 %1942, %1885
  %1945 = add nsw i32 %1944, %1943
  %1946 = sdiv i32 %1945, 255
  %1947 = trunc i32 %1946 to i8
  store i8 %1947, i8* %1925, align 1
  %1948 = getelementptr inbounds i8, i8* %1879, i64 2
  %1949 = getelementptr inbounds i8, i8* %1880, i64 2
  %1950 = load i8, i8* %1949, align 1
  %1951 = zext i8 %1950 to i32
  br i1 %1870, label %1956, label %1952

1952:                                             ; preds = %1941
  %1953 = load i8, i8* %1948, align 1
  %1954 = zext i8 %1953 to i32
  %1955 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %1864, i32 %1954, i32 %1951) #7
  br label %1958

1956:                                             ; preds = %1941
  %1957 = load i32, i32* %1868, align 4
  br label %1958

1958:                                             ; preds = %1956, %1952
  %1959 = phi i32 [ %1957, %1956 ], [ %1955, %1952 ]
  %1960 = mul nuw nsw i32 %1919, %1951
  %1961 = mul nsw i32 %1959, %1885
  %1962 = add nsw i32 %1961, %1960
  %1963 = sdiv i32 %1962, 255
  %1964 = trunc i32 %1963 to i8
  store i8 %1964, i8* %1948, align 1
  %1965 = getelementptr inbounds i8, i8* %1880, i64 3
  %1966 = getelementptr inbounds i8, i8* %1878, i64 1
  %1967 = select i1 %1881, i64 3, i64 4
  %1968 = getelementptr inbounds i8, i8* %1879, i64 %1967
  %1969 = select i1 %1881, i8* %1966, i8* null
  %1970 = getelementptr inbounds i8, i8* %1965, i64 %1874
  br label %1929

1971:                                             ; preds = %1929, %1862
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %1865) #7
  br label %2974

1972:                                             ; preds = %1624
  %1973 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 8
  %1974 = load i32, i32* %1973, align 8
  %1975 = bitcast [3 x i32]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %1975) #7
  %1976 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 0
  store i32 -1431655766, i32* %1976, align 4
  %1977 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 1
  store i32 -1431655766, i32* %1977, align 4
  %1978 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 2
  store i32 -1431655766, i32* %1978, align 4
  %1979 = and i32 %1974, -4
  %1980 = icmp eq i32 %1979, 12
  %1981 = icmp ne i8* %6, null
  %1982 = icmp sgt i32 %3, 0
  br i1 %1982, label %1983, label %2116

1983:                                             ; preds = %1972
  %1984 = add nsw i32 %14, -3
  %1985 = sext i32 %1984 to i64
  %1986 = select i1 %1981, i64 3, i64 4
  %1987 = zext i16 %13 to i64
  br label %1988

1988:                                             ; preds = %2063, %1983
  %1989 = phi i32 [ 0, %1983 ], [ %2067, %2063 ]
  %1990 = phi i8* [ %6, %1983 ], [ %2066, %2063 ]
  %1991 = phi i8* [ %4, %1983 ], [ %1994, %2063 ]
  %1992 = phi i8* [ %1, %1983 ], [ %2065, %2063 ]
  %1993 = phi i8* [ %2, %1983 ], [ %2064, %2063 ]
  %1994 = getelementptr inbounds i8, i8* %1991, i64 1
  %1995 = load i8, i8* %1991, align 1
  %1996 = zext i8 %1995 to i32
  %1997 = getelementptr inbounds i8, i8* %1992, i64 3
  %1998 = select i1 %1981, i8* %1990, i8* %1997
  %1999 = load i8, i8* %1998, align 1
  %2000 = zext i8 %1999 to i32
  %2001 = icmp eq i8 %1999, 0
  br i1 %2001, label %2002, label %2008

2002:                                             ; preds = %1988
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1992, i8* align 1 %1993, i64 3, i1 false) #7
  %2003 = getelementptr inbounds i8, i8* %1993, i64 %1987
  %2004 = getelementptr inbounds i8, i8* %1990, i64 1
  %2005 = getelementptr inbounds i8, i8* %1992, i64 4
  %2006 = select i1 %1981, i8* %1997, i8* %2005
  %2007 = select i1 %1981, i8* %2004, i8* %1990
  br label %2063

2008:                                             ; preds = %1988
  %2009 = icmp eq i8 %1995, 0
  br i1 %2009, label %2010, label %2015

2010:                                             ; preds = %2008
  %2011 = getelementptr inbounds i8, i8* %1992, i64 %1986
  %2012 = getelementptr inbounds i8, i8* %1990, i64 1
  %2013 = select i1 %1981, i8* %2012, i8* %1990
  %2014 = getelementptr inbounds i8, i8* %1993, i64 %1987
  br label %2063

2015:                                             ; preds = %2008
  %2016 = add nuw nsw i32 %2000, %1996
  %2017 = mul nuw nsw i32 %2000, %1996
  %2018 = trunc i32 %2017 to i16
  %2019 = udiv i16 %2018, 255
  %2020 = zext i16 %2019 to i32
  %2021 = sub nsw i32 %2016, %2020
  %2022 = trunc i32 %2021 to i8
  %2023 = getelementptr inbounds i8, i8* %1990, i64 1
  %2024 = select i1 %1981, i8* %1990, i8* %1997
  %2025 = select i1 %1981, i8* %2023, i8* %1990
  store i8 %2022, i8* %2024, align 1
  %2026 = zext i8 %1995 to i16
  %2027 = mul nuw i16 %2026, 255
  %2028 = trunc i32 %2021 to i16
  %2029 = and i16 %2028, 255
  %2030 = udiv i16 %2027, %2029
  %2031 = zext i16 %2030 to i32
  br i1 %1980, label %2032, label %2038

2032:                                             ; preds = %2015
  call fastcc void @_ZN12_GLOBAL__N_19RGB_BlendE9BlendModePKhS2_Pi(i32 %1974, i8* %1993, i8* %1992, i32* nonnull %1976) #7
  %2033 = load i8, i8* %1993, align 1
  %2034 = zext i8 %2033 to i32
  %2035 = load i32, i32* %1976, align 4
  %2036 = load i8, i8* %1992, align 1
  %2037 = zext i8 %2036 to i32
  br label %2044

2038:                                             ; preds = %2015
  %2039 = load i8, i8* %1993, align 1
  %2040 = zext i8 %2039 to i32
  %2041 = load i8, i8* %1992, align 1
  %2042 = zext i8 %2041 to i32
  %2043 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %1974, i32 %2042, i32 %2040) #7
  br label %2044

2044:                                             ; preds = %2038, %2032
  %2045 = phi i32 [ %2040, %2038 ], [ %2034, %2032 ]
  %2046 = phi i32 [ %2042, %2038 ], [ %2037, %2032 ]
  %2047 = phi i32 [ %2043, %2038 ], [ %2035, %2032 ]
  %2048 = xor i32 %2000, 255
  %2049 = sub nsw i32 255, %2031
  %2050 = mul nuw nsw i32 %2045, %2048
  %2051 = mul nsw i32 %2047, %2000
  %2052 = add nsw i32 %2051, %2050
  %2053 = sdiv i32 %2052, 255
  %2054 = mul nsw i32 %2046, %2049
  %2055 = mul nsw i32 %2053, %2031
  %2056 = add nsw i32 %2055, %2054
  %2057 = sdiv i32 %2056, 255
  %2058 = trunc i32 %2057 to i8
  store i8 %2058, i8* %1992, align 1
  %2059 = getelementptr inbounds i8, i8* %1992, i64 1
  %2060 = getelementptr inbounds i8, i8* %1993, i64 1
  %2061 = load i8, i8* %2060, align 1
  %2062 = zext i8 %2061 to i32
  br i1 %1980, label %2073, label %2069

2063:                                             ; preds = %2101, %2010, %2002
  %2064 = phi i8* [ %2014, %2010 ], [ %2114, %2101 ], [ %2003, %2002 ]
  %2065 = phi i8* [ %2011, %2010 ], [ %2115, %2101 ], [ %2006, %2002 ]
  %2066 = phi i8* [ %2013, %2010 ], [ %2025, %2101 ], [ %2007, %2002 ]
  %2067 = add nuw nsw i32 %1989, 1
  %2068 = icmp eq i32 %2067, %3
  br i1 %2068, label %2116, label %1988

2069:                                             ; preds = %2044
  %2070 = load i8, i8* %2059, align 1
  %2071 = zext i8 %2070 to i32
  %2072 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %1974, i32 %2071, i32 %2062) #7
  br label %2077

2073:                                             ; preds = %2044
  %2074 = load i32, i32* %1977, align 4
  %2075 = load i8, i8* %2059, align 1
  %2076 = zext i8 %2075 to i32
  br label %2077

2077:                                             ; preds = %2073, %2069
  %2078 = phi i32 [ %2076, %2073 ], [ %2071, %2069 ]
  %2079 = phi i32 [ %2074, %2073 ], [ %2072, %2069 ]
  %2080 = mul nuw nsw i32 %2048, %2062
  %2081 = mul nsw i32 %2079, %2000
  %2082 = add nsw i32 %2081, %2080
  %2083 = sdiv i32 %2082, 255
  %2084 = mul nsw i32 %2078, %2049
  %2085 = mul nsw i32 %2083, %2031
  %2086 = add nsw i32 %2085, %2084
  %2087 = sdiv i32 %2086, 255
  %2088 = trunc i32 %2087 to i8
  store i8 %2088, i8* %2059, align 1
  %2089 = getelementptr inbounds i8, i8* %1992, i64 2
  %2090 = getelementptr inbounds i8, i8* %1993, i64 2
  %2091 = load i8, i8* %2090, align 1
  %2092 = zext i8 %2091 to i32
  br i1 %1980, label %2097, label %2093

2093:                                             ; preds = %2077
  %2094 = load i8, i8* %2089, align 1
  %2095 = zext i8 %2094 to i32
  %2096 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %1974, i32 %2095, i32 %2092) #7
  br label %2101

2097:                                             ; preds = %2077
  %2098 = load i32, i32* %1978, align 4
  %2099 = load i8, i8* %2089, align 1
  %2100 = zext i8 %2099 to i32
  br label %2101

2101:                                             ; preds = %2097, %2093
  %2102 = phi i32 [ %2100, %2097 ], [ %2095, %2093 ]
  %2103 = phi i32 [ %2098, %2097 ], [ %2096, %2093 ]
  %2104 = mul nuw nsw i32 %2048, %2092
  %2105 = mul nsw i32 %2103, %2000
  %2106 = add nsw i32 %2105, %2104
  %2107 = sdiv i32 %2106, 255
  %2108 = mul nsw i32 %2102, %2049
  %2109 = mul nsw i32 %2107, %2031
  %2110 = add nsw i32 %2109, %2108
  %2111 = sdiv i32 %2110, 255
  %2112 = trunc i32 %2111 to i8
  store i8 %2112, i8* %2089, align 1
  %2113 = getelementptr inbounds i8, i8* %1993, i64 3
  %2114 = getelementptr inbounds i8, i8* %2113, i64 %1985
  %2115 = getelementptr inbounds i8, i8* %1992, i64 %1986
  br label %2063

2116:                                             ; preds = %2063, %1972
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %1975) #7
  br label %2974

2117:                                             ; preds = %1624
  %2118 = icmp eq i8* %6, null
  %2119 = icmp sgt i32 %3, 0
  br i1 %2118, label %2128, label %2120

2120:                                             ; preds = %2117
  br i1 %2119, label %2121, label %2974

2121:                                             ; preds = %2120
  %2122 = zext i16 %13 to i64
  %2123 = add i32 %3, -1
  %2124 = and i32 %3, 3
  %2125 = icmp ult i32 %2123, 3
  br i1 %2125, label %2917, label %2126

2126:                                             ; preds = %2121
  %2127 = sub i32 %3, %2124
  br label %2135

2128:                                             ; preds = %2117
  br i1 %2119, label %2129, label %2974

2129:                                             ; preds = %2128
  %2130 = zext i16 %13 to i64
  %2131 = and i32 %3, 1
  %2132 = icmp eq i32 %3, 1
  br i1 %2132, label %2904, label %2133

2133:                                             ; preds = %2129
  %2134 = sub i32 %3, %2131
  br label %2154

2135:                                             ; preds = %2135, %2126
  %2136 = phi i8* [ %6, %2126 ], [ %2151, %2135 ]
  %2137 = phi i8* [ %1, %2126 ], [ %2149, %2135 ]
  %2138 = phi i8* [ %2, %2126 ], [ %2150, %2135 ]
  %2139 = phi i32 [ %2127, %2126 ], [ %2152, %2135 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2137, i8* align 1 %2138, i64 3, i1 false) #7
  %2140 = getelementptr inbounds i8, i8* %2137, i64 3
  %2141 = getelementptr inbounds i8, i8* %2138, i64 %2122
  %2142 = getelementptr inbounds i8, i8* %2136, i64 1
  store i8 -1, i8* %2136, align 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2140, i8* align 1 %2141, i64 3, i1 false) #7
  %2143 = getelementptr inbounds i8, i8* %2137, i64 6
  %2144 = getelementptr inbounds i8, i8* %2141, i64 %2122
  %2145 = getelementptr inbounds i8, i8* %2136, i64 2
  store i8 -1, i8* %2142, align 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2143, i8* align 1 %2144, i64 3, i1 false) #7
  %2146 = getelementptr inbounds i8, i8* %2137, i64 9
  %2147 = getelementptr inbounds i8, i8* %2144, i64 %2122
  %2148 = getelementptr inbounds i8, i8* %2136, i64 3
  store i8 -1, i8* %2145, align 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2146, i8* align 1 %2147, i64 3, i1 false) #7
  %2149 = getelementptr inbounds i8, i8* %2137, i64 12
  %2150 = getelementptr inbounds i8, i8* %2147, i64 %2122
  %2151 = getelementptr inbounds i8, i8* %2136, i64 4
  store i8 -1, i8* %2148, align 1
  %2152 = add i32 %2139, -4
  %2153 = icmp eq i32 %2152, 0
  br i1 %2153, label %2917, label %2135

2154:                                             ; preds = %2154, %2133
  %2155 = phi i8* [ %1, %2133 ], [ %2176, %2154 ]
  %2156 = phi i8* [ %2, %2133 ], [ %2177, %2154 ]
  %2157 = phi i32 [ %2134, %2133 ], [ %2178, %2154 ]
  %2158 = getelementptr inbounds i8, i8* %2156, i64 1
  %2159 = load i8, i8* %2156, align 1
  store i8 %2159, i8* %2155, align 1
  %2160 = load i8, i8* %2158, align 1
  %2161 = getelementptr inbounds i8, i8* %2155, i64 1
  store i8 %2160, i8* %2161, align 1
  %2162 = getelementptr inbounds i8, i8* %2156, i64 2
  %2163 = load i8, i8* %2162, align 1
  %2164 = getelementptr inbounds i8, i8* %2155, i64 2
  store i8 %2163, i8* %2164, align 1
  %2165 = getelementptr inbounds i8, i8* %2155, i64 3
  store i8 -1, i8* %2165, align 1
  %2166 = getelementptr inbounds i8, i8* %2155, i64 4
  %2167 = getelementptr inbounds i8, i8* %2156, i64 %2130
  %2168 = getelementptr inbounds i8, i8* %2167, i64 1
  %2169 = load i8, i8* %2167, align 1
  store i8 %2169, i8* %2166, align 1
  %2170 = load i8, i8* %2168, align 1
  %2171 = getelementptr inbounds i8, i8* %2155, i64 5
  store i8 %2170, i8* %2171, align 1
  %2172 = getelementptr inbounds i8, i8* %2167, i64 2
  %2173 = load i8, i8* %2172, align 1
  %2174 = getelementptr inbounds i8, i8* %2155, i64 6
  store i8 %2173, i8* %2174, align 1
  %2175 = getelementptr inbounds i8, i8* %2155, i64 7
  store i8 -1, i8* %2175, align 1
  %2176 = getelementptr inbounds i8, i8* %2155, i64 8
  %2177 = getelementptr inbounds i8, i8* %2167, i64 %2130
  %2178 = add i32 %2157, -2
  %2179 = icmp eq i32 %2178, 0
  br i1 %2179, label %2904, label %2154

2180:                                             ; preds = %1624
  %2181 = add nsw i32 %14, -3
  %2182 = icmp eq i8* %6, null
  %2183 = icmp sgt i32 %3, 0
  br i1 %2182, label %2189, label %2184

2184:                                             ; preds = %2180
  br i1 %2183, label %2185, label %2974

2185:                                             ; preds = %2184
  %2186 = zext i16 %13 to i64
  %2187 = sext i32 %2181 to i64
  %2188 = zext i32 %3 to i64
  br label %2194

2189:                                             ; preds = %2180
  br i1 %2183, label %2190, label %2974

2190:                                             ; preds = %2189
  %2191 = zext i16 %13 to i64
  %2192 = sext i32 %2181 to i64
  %2193 = zext i32 %3 to i64
  br label %2262

2194:                                             ; preds = %2256, %2185
  %2195 = phi i64 [ 0, %2185 ], [ %2260, %2256 ]
  %2196 = phi i8* [ %1, %2185 ], [ %2258, %2256 ]
  %2197 = phi i8* [ %2, %2185 ], [ %2257, %2256 ]
  %2198 = phi i8* [ %6, %2185 ], [ %2259, %2256 ]
  %2199 = getelementptr inbounds i8, i8* %4, i64 %2195
  %2200 = load i8, i8* %2199, align 1
  %2201 = zext i8 %2200 to i32
  switch i8 %2200, label %2206 [
    i8 -1, label %2202
    i8 0, label %2204
  ]

2202:                                             ; preds = %2194
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2196, i8* align 1 %2197, i64 3, i1 false) #7
  %2203 = getelementptr inbounds i8, i8* %2197, i64 %2186
  store i8 -1, i8* %2198, align 1
  br label %2256

2204:                                             ; preds = %2194
  %2205 = getelementptr inbounds i8, i8* %2197, i64 %2186
  br label %2256

2206:                                             ; preds = %2194
  %2207 = load i8, i8* %2198, align 1
  %2208 = zext i8 %2207 to i32
  %2209 = add nuw nsw i32 %2208, %2201
  %2210 = mul nuw nsw i32 %2208, %2201
  %2211 = trunc i32 %2210 to i16
  %2212 = udiv i16 %2211, 255
  %2213 = zext i16 %2212 to i32
  %2214 = sub nsw i32 %2209, %2213
  %2215 = trunc i32 %2214 to i8
  store i8 %2215, i8* %2198, align 1
  %2216 = zext i8 %2200 to i16
  %2217 = mul nuw i16 %2216, 255
  %2218 = trunc i32 %2214 to i16
  %2219 = and i16 %2218, 255
  %2220 = udiv i16 %2217, %2219
  %2221 = zext i16 %2220 to i32
  %2222 = sub nsw i32 255, %2221
  %2223 = load i8, i8* %2196, align 1
  %2224 = zext i8 %2223 to i32
  %2225 = mul nsw i32 %2222, %2224
  %2226 = load i8, i8* %2197, align 1
  %2227 = zext i8 %2226 to i32
  %2228 = mul nuw nsw i32 %2227, %2221
  %2229 = add nsw i32 %2228, %2225
  %2230 = sdiv i32 %2229, 255
  %2231 = trunc i32 %2230 to i8
  store i8 %2231, i8* %2196, align 1
  %2232 = getelementptr inbounds i8, i8* %2196, i64 1
  %2233 = getelementptr inbounds i8, i8* %2197, i64 1
  %2234 = load i8, i8* %2232, align 1
  %2235 = zext i8 %2234 to i32
  %2236 = mul nsw i32 %2222, %2235
  %2237 = load i8, i8* %2233, align 1
  %2238 = zext i8 %2237 to i32
  %2239 = mul nuw nsw i32 %2238, %2221
  %2240 = add nsw i32 %2239, %2236
  %2241 = sdiv i32 %2240, 255
  %2242 = trunc i32 %2241 to i8
  store i8 %2242, i8* %2232, align 1
  %2243 = getelementptr inbounds i8, i8* %2196, i64 2
  %2244 = getelementptr inbounds i8, i8* %2197, i64 2
  %2245 = load i8, i8* %2243, align 1
  %2246 = zext i8 %2245 to i32
  %2247 = mul nsw i32 %2222, %2246
  %2248 = load i8, i8* %2244, align 1
  %2249 = zext i8 %2248 to i32
  %2250 = mul nuw nsw i32 %2249, %2221
  %2251 = add nsw i32 %2250, %2247
  %2252 = sdiv i32 %2251, 255
  %2253 = trunc i32 %2252 to i8
  store i8 %2253, i8* %2243, align 1
  %2254 = getelementptr inbounds i8, i8* %2197, i64 3
  %2255 = getelementptr inbounds i8, i8* %2254, i64 %2187
  br label %2256

2256:                                             ; preds = %2206, %2204, %2202
  %2257 = phi i8* [ %2203, %2202 ], [ %2205, %2204 ], [ %2255, %2206 ]
  %2258 = getelementptr inbounds i8, i8* %2196, i64 3
  %2259 = getelementptr inbounds i8, i8* %2198, i64 1
  %2260 = add nuw nsw i64 %2195, 1
  %2261 = icmp eq i64 %2260, %2188
  br i1 %2261, label %2974, label %2194

2262:                                             ; preds = %2325, %2190
  %2263 = phi i64 [ 0, %2190 ], [ %2328, %2325 ]
  %2264 = phi i8* [ %1, %2190 ], [ %2327, %2325 ]
  %2265 = phi i8* [ %2, %2190 ], [ %2326, %2325 ]
  %2266 = getelementptr inbounds i8, i8* %4, i64 %2263
  %2267 = load i8, i8* %2266, align 1
  %2268 = zext i8 %2267 to i32
  switch i8 %2267, label %2274 [
    i8 -1, label %2269
    i8 0, label %2272
  ]

2269:                                             ; preds = %2262
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2264, i8* align 1 %2265, i64 3, i1 false) #7
  %2270 = getelementptr inbounds i8, i8* %2264, i64 3
  store i8 -1, i8* %2270, align 1
  %2271 = getelementptr inbounds i8, i8* %2265, i64 %2191
  br label %2325

2272:                                             ; preds = %2262
  %2273 = getelementptr inbounds i8, i8* %2265, i64 %2191
  br label %2325

2274:                                             ; preds = %2262
  %2275 = getelementptr inbounds i8, i8* %2264, i64 3
  %2276 = load i8, i8* %2275, align 1
  %2277 = zext i8 %2276 to i32
  %2278 = add nuw nsw i32 %2277, %2268
  %2279 = mul nuw nsw i32 %2277, %2268
  %2280 = trunc i32 %2279 to i16
  %2281 = udiv i16 %2280, 255
  %2282 = zext i16 %2281 to i32
  %2283 = sub nsw i32 %2278, %2282
  %2284 = trunc i32 %2283 to i8
  store i8 %2284, i8* %2275, align 1
  %2285 = zext i8 %2267 to i16
  %2286 = mul nuw i16 %2285, 255
  %2287 = trunc i32 %2283 to i16
  %2288 = and i16 %2287, 255
  %2289 = udiv i16 %2286, %2288
  %2290 = zext i16 %2289 to i32
  %2291 = sub nsw i32 255, %2290
  %2292 = load i8, i8* %2264, align 1
  %2293 = zext i8 %2292 to i32
  %2294 = mul nsw i32 %2291, %2293
  %2295 = load i8, i8* %2265, align 1
  %2296 = zext i8 %2295 to i32
  %2297 = mul nuw nsw i32 %2296, %2290
  %2298 = add nsw i32 %2297, %2294
  %2299 = sdiv i32 %2298, 255
  %2300 = trunc i32 %2299 to i8
  store i8 %2300, i8* %2264, align 1
  %2301 = getelementptr inbounds i8, i8* %2264, i64 1
  %2302 = getelementptr inbounds i8, i8* %2265, i64 1
  %2303 = load i8, i8* %2301, align 1
  %2304 = zext i8 %2303 to i32
  %2305 = mul nsw i32 %2291, %2304
  %2306 = load i8, i8* %2302, align 1
  %2307 = zext i8 %2306 to i32
  %2308 = mul nuw nsw i32 %2307, %2290
  %2309 = add nsw i32 %2308, %2305
  %2310 = sdiv i32 %2309, 255
  %2311 = trunc i32 %2310 to i8
  store i8 %2311, i8* %2301, align 1
  %2312 = getelementptr inbounds i8, i8* %2264, i64 2
  %2313 = getelementptr inbounds i8, i8* %2265, i64 2
  %2314 = load i8, i8* %2312, align 1
  %2315 = zext i8 %2314 to i32
  %2316 = mul nsw i32 %2291, %2315
  %2317 = load i8, i8* %2313, align 1
  %2318 = zext i8 %2317 to i32
  %2319 = mul nuw nsw i32 %2318, %2290
  %2320 = add nsw i32 %2319, %2316
  %2321 = sdiv i32 %2320, 255
  %2322 = trunc i32 %2321 to i8
  store i8 %2322, i8* %2312, align 1
  %2323 = getelementptr inbounds i8, i8* %2265, i64 3
  %2324 = getelementptr inbounds i8, i8* %2323, i64 %2192
  br label %2325

2325:                                             ; preds = %2274, %2272, %2269
  %2326 = phi i8* [ %2271, %2269 ], [ %2273, %2272 ], [ %2324, %2274 ]
  %2327 = getelementptr inbounds i8, i8* %2264, i64 4
  %2328 = add nuw nsw i64 %2263, 1
  %2329 = icmp eq i64 %2328, %2193
  br i1 %2329, label %2974, label %2262

2330:                                             ; preds = %1624, %1624
  %2331 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 8
  %2332 = load i32, i32* %2331, align 8
  %2333 = bitcast [3 x i32]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %2333) #7
  %2334 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 0
  store i32 -1431655766, i32* %2334, align 4
  %2335 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 1
  store i32 -1431655766, i32* %2335, align 4
  %2336 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 2
  store i32 -1431655766, i32* %2336, align 4
  %2337 = and i32 %2332, -4
  %2338 = icmp eq i32 %2337, 12
  %2339 = add nsw i32 %19, -3
  %2340 = icmp eq i8* %5, null
  %2341 = icmp sgt i32 %3, 0
  br i1 %2340, label %2346, label %2342

2342:                                             ; preds = %2330
  br i1 %2341, label %2343, label %2519

2343:                                             ; preds = %2342
  %2344 = sext i32 %2339 to i64
  %2345 = zext i16 %18 to i64
  br label %2350

2346:                                             ; preds = %2330
  br i1 %2341, label %2347, label %2519

2347:                                             ; preds = %2346
  %2348 = sext i32 %2339 to i64
  %2349 = zext i16 %18 to i64
  br label %2402

2350:                                             ; preds = %2397, %2343
  %2351 = phi i32 [ 0, %2343 ], [ %2400, %2397 ]
  %2352 = phi i8* [ %5, %2343 ], [ %2357, %2397 ]
  %2353 = phi i8* [ %4, %2343 ], [ %2368, %2397 ]
  %2354 = phi i8* [ %1, %2343 ], [ %2398, %2397 ]
  %2355 = phi i8* [ %2, %2343 ], [ %2399, %2397 ]
  %2356 = icmp eq i8* %2353, null
  %2357 = getelementptr inbounds i8, i8* %2352, i64 1
  %2358 = load i8, i8* %2352, align 1
  br i1 %2356, label %2367, label %2359

2359:                                             ; preds = %2350
  %2360 = zext i8 %2358 to i16
  %2361 = getelementptr inbounds i8, i8* %2353, i64 1
  %2362 = load i8, i8* %2353, align 1
  %2363 = zext i8 %2362 to i16
  %2364 = mul nuw i16 %2363, %2360
  %2365 = udiv i16 %2364, 255
  %2366 = trunc i16 %2365 to i8
  br label %2367

2367:                                             ; preds = %2359, %2350
  %2368 = phi i8* [ %2361, %2359 ], [ null, %2350 ]
  %2369 = phi i8 [ %2366, %2359 ], [ %2358, %2350 ]
  %2370 = zext i8 %2369 to i32
  %2371 = icmp eq i8 %2369, 0
  br i1 %2371, label %2372, label %2374

2372:                                             ; preds = %2367
  %2373 = getelementptr inbounds i8, i8* %2354, i64 %2345
  br label %2397

2374:                                             ; preds = %2367
  br i1 %2338, label %2375, label %2379

2375:                                             ; preds = %2374
  call fastcc void @_ZN12_GLOBAL__N_19RGB_BlendE9BlendModePKhS2_Pi(i32 %2332, i8* %2355, i8* %2354, i32* nonnull %2334) #7
  %2376 = load i8, i8* %2354, align 1
  %2377 = zext i8 %2376 to i32
  %2378 = load i32, i32* %2334, align 4
  br label %2385

2379:                                             ; preds = %2374
  %2380 = load i8, i8* %2354, align 1
  %2381 = zext i8 %2380 to i32
  %2382 = load i8, i8* %2355, align 1
  %2383 = zext i8 %2382 to i32
  %2384 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %2332, i32 %2381, i32 %2383) #7
  br label %2385

2385:                                             ; preds = %2379, %2375
  %2386 = phi i32 [ %2377, %2375 ], [ %2381, %2379 ]
  %2387 = phi i32 [ %2378, %2375 ], [ %2384, %2379 ]
  %2388 = xor i32 %2370, 255
  %2389 = mul nuw nsw i32 %2386, %2388
  %2390 = mul nsw i32 %2387, %2370
  %2391 = add nsw i32 %2390, %2389
  %2392 = sdiv i32 %2391, 255
  %2393 = trunc i32 %2392 to i8
  store i8 %2393, i8* %2354, align 1
  %2394 = getelementptr inbounds i8, i8* %2354, i64 1
  %2395 = load i8, i8* %2394, align 1
  %2396 = zext i8 %2395 to i32
  br i1 %2338, label %2491, label %2486

2397:                                             ; preds = %2510, %2372
  %2398 = phi i8* [ %2373, %2372 ], [ %2518, %2510 ]
  %2399 = getelementptr inbounds i8, i8* %2355, i64 3
  %2400 = add nuw nsw i32 %2351, 1
  %2401 = icmp eq i32 %2400, %3
  br i1 %2401, label %2519, label %2350

2402:                                             ; preds = %2448, %2347
  %2403 = phi i32 [ 0, %2347 ], [ %2451, %2448 ]
  %2404 = phi i8* [ %4, %2347 ], [ %2419, %2448 ]
  %2405 = phi i8* [ %1, %2347 ], [ %2449, %2448 ]
  %2406 = phi i8* [ %2, %2347 ], [ %2450, %2448 ]
  %2407 = icmp eq i8* %2404, null
  %2408 = getelementptr inbounds i8, i8* %2406, i64 3
  %2409 = load i8, i8* %2408, align 1
  br i1 %2407, label %2418, label %2410

2410:                                             ; preds = %2402
  %2411 = zext i8 %2409 to i16
  %2412 = getelementptr inbounds i8, i8* %2404, i64 1
  %2413 = load i8, i8* %2404, align 1
  %2414 = zext i8 %2413 to i16
  %2415 = mul nuw i16 %2414, %2411
  %2416 = udiv i16 %2415, 255
  %2417 = trunc i16 %2416 to i8
  br label %2418

2418:                                             ; preds = %2410, %2402
  %2419 = phi i8* [ %2412, %2410 ], [ null, %2402 ]
  %2420 = phi i8 [ %2417, %2410 ], [ %2409, %2402 ]
  %2421 = zext i8 %2420 to i32
  %2422 = icmp eq i8 %2420, 0
  br i1 %2422, label %2423, label %2425

2423:                                             ; preds = %2418
  %2424 = getelementptr inbounds i8, i8* %2405, i64 %2349
  br label %2448

2425:                                             ; preds = %2418
  br i1 %2338, label %2426, label %2430

2426:                                             ; preds = %2425
  call fastcc void @_ZN12_GLOBAL__N_19RGB_BlendE9BlendModePKhS2_Pi(i32 %2332, i8* %2406, i8* %2405, i32* nonnull %2334) #7
  %2427 = load i8, i8* %2405, align 1
  %2428 = zext i8 %2427 to i32
  %2429 = load i32, i32* %2334, align 4
  br label %2436

2430:                                             ; preds = %2425
  %2431 = load i8, i8* %2405, align 1
  %2432 = zext i8 %2431 to i32
  %2433 = load i8, i8* %2406, align 1
  %2434 = zext i8 %2433 to i32
  %2435 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %2332, i32 %2432, i32 %2434) #7
  br label %2436

2436:                                             ; preds = %2430, %2426
  %2437 = phi i32 [ %2428, %2426 ], [ %2432, %2430 ]
  %2438 = phi i32 [ %2429, %2426 ], [ %2435, %2430 ]
  %2439 = xor i32 %2421, 255
  %2440 = mul nuw nsw i32 %2437, %2439
  %2441 = mul nsw i32 %2438, %2421
  %2442 = add nsw i32 %2441, %2440
  %2443 = sdiv i32 %2442, 255
  %2444 = trunc i32 %2443 to i8
  store i8 %2444, i8* %2405, align 1
  %2445 = getelementptr inbounds i8, i8* %2405, i64 1
  %2446 = load i8, i8* %2445, align 1
  %2447 = zext i8 %2446 to i32
  br i1 %2338, label %2458, label %2453

2448:                                             ; preds = %2477, %2423
  %2449 = phi i8* [ %2424, %2423 ], [ %2485, %2477 ]
  %2450 = getelementptr inbounds i8, i8* %2406, i64 4
  %2451 = add nuw nsw i32 %2403, 1
  %2452 = icmp eq i32 %2451, %3
  br i1 %2452, label %2519, label %2402

2453:                                             ; preds = %2436
  %2454 = getelementptr inbounds i8, i8* %2406, i64 1
  %2455 = load i8, i8* %2454, align 1
  %2456 = zext i8 %2455 to i32
  %2457 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %2332, i32 %2447, i32 %2456) #7
  br label %2460

2458:                                             ; preds = %2436
  %2459 = load i32, i32* %2335, align 4
  br label %2460

2460:                                             ; preds = %2458, %2453
  %2461 = phi i32 [ %2459, %2458 ], [ %2457, %2453 ]
  %2462 = mul nuw nsw i32 %2439, %2447
  %2463 = mul nsw i32 %2461, %2421
  %2464 = add nsw i32 %2463, %2462
  %2465 = sdiv i32 %2464, 255
  %2466 = trunc i32 %2465 to i8
  store i8 %2466, i8* %2445, align 1
  %2467 = getelementptr inbounds i8, i8* %2405, i64 2
  %2468 = load i8, i8* %2467, align 1
  %2469 = zext i8 %2468 to i32
  br i1 %2338, label %2475, label %2470

2470:                                             ; preds = %2460
  %2471 = getelementptr inbounds i8, i8* %2406, i64 2
  %2472 = load i8, i8* %2471, align 1
  %2473 = zext i8 %2472 to i32
  %2474 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %2332, i32 %2469, i32 %2473) #7
  br label %2477

2475:                                             ; preds = %2460
  %2476 = load i32, i32* %2336, align 4
  br label %2477

2477:                                             ; preds = %2475, %2470
  %2478 = phi i32 [ %2476, %2475 ], [ %2474, %2470 ]
  %2479 = mul nuw nsw i32 %2439, %2469
  %2480 = mul nsw i32 %2478, %2421
  %2481 = add nsw i32 %2480, %2479
  %2482 = sdiv i32 %2481, 255
  %2483 = trunc i32 %2482 to i8
  store i8 %2483, i8* %2467, align 1
  %2484 = getelementptr inbounds i8, i8* %2405, i64 3
  %2485 = getelementptr inbounds i8, i8* %2484, i64 %2348
  br label %2448

2486:                                             ; preds = %2385
  %2487 = getelementptr inbounds i8, i8* %2355, i64 1
  %2488 = load i8, i8* %2487, align 1
  %2489 = zext i8 %2488 to i32
  %2490 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %2332, i32 %2396, i32 %2489) #7
  br label %2493

2491:                                             ; preds = %2385
  %2492 = load i32, i32* %2335, align 4
  br label %2493

2493:                                             ; preds = %2491, %2486
  %2494 = phi i32 [ %2492, %2491 ], [ %2490, %2486 ]
  %2495 = mul nuw nsw i32 %2388, %2396
  %2496 = mul nsw i32 %2494, %2370
  %2497 = add nsw i32 %2496, %2495
  %2498 = sdiv i32 %2497, 255
  %2499 = trunc i32 %2498 to i8
  store i8 %2499, i8* %2394, align 1
  %2500 = getelementptr inbounds i8, i8* %2354, i64 2
  %2501 = load i8, i8* %2500, align 1
  %2502 = zext i8 %2501 to i32
  br i1 %2338, label %2508, label %2503

2503:                                             ; preds = %2493
  %2504 = getelementptr inbounds i8, i8* %2355, i64 2
  %2505 = load i8, i8* %2504, align 1
  %2506 = zext i8 %2505 to i32
  %2507 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %2332, i32 %2502, i32 %2506) #7
  br label %2510

2508:                                             ; preds = %2493
  %2509 = load i32, i32* %2336, align 4
  br label %2510

2510:                                             ; preds = %2508, %2503
  %2511 = phi i32 [ %2509, %2508 ], [ %2507, %2503 ]
  %2512 = mul nuw nsw i32 %2388, %2502
  %2513 = mul nsw i32 %2511, %2370
  %2514 = add nsw i32 %2513, %2512
  %2515 = sdiv i32 %2514, 255
  %2516 = trunc i32 %2515 to i8
  store i8 %2516, i8* %2500, align 1
  %2517 = getelementptr inbounds i8, i8* %2354, i64 3
  %2518 = getelementptr inbounds i8, i8* %2517, i64 %2344
  br label %2397

2519:                                             ; preds = %2397, %2448, %2342, %2346
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %2333) #7
  br label %2974

2520:                                             ; preds = %1624, %1624
  %2521 = add nsw i32 %19, -3
  %2522 = icmp eq i8* %5, null
  %2523 = icmp sgt i32 %3, 0
  br i1 %2522, label %2528, label %2524

2524:                                             ; preds = %2520
  br i1 %2523, label %2525, label %2974

2525:                                             ; preds = %2524
  %2526 = zext i16 %18 to i64
  %2527 = sext i32 %2521 to i64
  br label %2532

2528:                                             ; preds = %2520
  br i1 %2523, label %2529, label %2974

2529:                                             ; preds = %2528
  %2530 = zext i16 %18 to i64
  %2531 = sext i32 %2521 to i64
  br label %2597

2532:                                             ; preds = %2592, %2525
  %2533 = phi i32 [ 0, %2525 ], [ %2595, %2592 ]
  %2534 = phi i8* [ %5, %2525 ], [ %2539, %2592 ]
  %2535 = phi i8* [ %4, %2525 ], [ %2550, %2592 ]
  %2536 = phi i8* [ %1, %2525 ], [ %2593, %2592 ]
  %2537 = phi i8* [ %2, %2525 ], [ %2594, %2592 ]
  %2538 = icmp eq i8* %2535, null
  %2539 = getelementptr inbounds i8, i8* %2534, i64 1
  %2540 = load i8, i8* %2534, align 1
  br i1 %2538, label %2549, label %2541

2541:                                             ; preds = %2532
  %2542 = zext i8 %2540 to i16
  %2543 = getelementptr inbounds i8, i8* %2535, i64 1
  %2544 = load i8, i8* %2535, align 1
  %2545 = zext i8 %2544 to i16
  %2546 = mul nuw i16 %2545, %2542
  %2547 = udiv i16 %2546, 255
  %2548 = trunc i16 %2547 to i8
  br label %2549

2549:                                             ; preds = %2541, %2532
  %2550 = phi i8* [ %2543, %2541 ], [ null, %2532 ]
  %2551 = phi i8 [ %2548, %2541 ], [ %2540, %2532 ]
  %2552 = zext i8 %2551 to i32
  switch i8 %2551, label %2553 [
    i8 -1, label %2588
    i8 0, label %2590
  ]

2553:                                             ; preds = %2549
  %2554 = xor i32 %2552, 255
  %2555 = load i8, i8* %2536, align 1
  %2556 = zext i8 %2555 to i32
  %2557 = mul nuw nsw i32 %2554, %2556
  %2558 = load i8, i8* %2537, align 1
  %2559 = zext i8 %2558 to i32
  %2560 = mul nuw nsw i32 %2559, %2552
  %2561 = add nuw nsw i32 %2560, %2557
  %2562 = udiv i32 %2561, 255
  %2563 = trunc i32 %2562 to i8
  store i8 %2563, i8* %2536, align 1
  %2564 = getelementptr inbounds i8, i8* %2536, i64 1
  %2565 = getelementptr inbounds i8, i8* %2537, i64 1
  %2566 = load i8, i8* %2564, align 1
  %2567 = zext i8 %2566 to i32
  %2568 = mul nuw nsw i32 %2554, %2567
  %2569 = load i8, i8* %2565, align 1
  %2570 = zext i8 %2569 to i32
  %2571 = mul nuw nsw i32 %2570, %2552
  %2572 = add nuw nsw i32 %2571, %2568
  %2573 = udiv i32 %2572, 255
  %2574 = trunc i32 %2573 to i8
  store i8 %2574, i8* %2564, align 1
  %2575 = getelementptr inbounds i8, i8* %2536, i64 2
  %2576 = getelementptr inbounds i8, i8* %2537, i64 2
  %2577 = load i8, i8* %2575, align 1
  %2578 = zext i8 %2577 to i32
  %2579 = mul nuw nsw i32 %2554, %2578
  %2580 = load i8, i8* %2576, align 1
  %2581 = zext i8 %2580 to i32
  %2582 = mul nuw nsw i32 %2581, %2552
  %2583 = add nuw nsw i32 %2582, %2579
  %2584 = udiv i32 %2583, 255
  %2585 = trunc i32 %2584 to i8
  store i8 %2585, i8* %2575, align 1
  %2586 = getelementptr inbounds i8, i8* %2536, i64 3
  %2587 = getelementptr inbounds i8, i8* %2586, i64 %2527
  br label %2592

2588:                                             ; preds = %2549
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2536, i8* align 1 %2537, i64 3, i1 false) #7
  %2589 = getelementptr inbounds i8, i8* %2536, i64 %2526
  br label %2592

2590:                                             ; preds = %2549
  %2591 = getelementptr inbounds i8, i8* %2536, i64 %2526
  br label %2592

2592:                                             ; preds = %2590, %2588, %2553
  %2593 = phi i8* [ %2589, %2588 ], [ %2591, %2590 ], [ %2587, %2553 ]
  %2594 = getelementptr inbounds i8, i8* %2537, i64 3
  %2595 = add nuw nsw i32 %2533, 1
  %2596 = icmp eq i32 %2595, %3
  br i1 %2596, label %2974, label %2532

2597:                                             ; preds = %2656, %2529
  %2598 = phi i32 [ 0, %2529 ], [ %2659, %2656 ]
  %2599 = phi i8* [ %4, %2529 ], [ %2614, %2656 ]
  %2600 = phi i8* [ %1, %2529 ], [ %2657, %2656 ]
  %2601 = phi i8* [ %2, %2529 ], [ %2658, %2656 ]
  %2602 = icmp eq i8* %2599, null
  %2603 = getelementptr inbounds i8, i8* %2601, i64 3
  %2604 = load i8, i8* %2603, align 1
  br i1 %2602, label %2613, label %2605

2605:                                             ; preds = %2597
  %2606 = zext i8 %2604 to i16
  %2607 = getelementptr inbounds i8, i8* %2599, i64 1
  %2608 = load i8, i8* %2599, align 1
  %2609 = zext i8 %2608 to i16
  %2610 = mul nuw i16 %2609, %2606
  %2611 = udiv i16 %2610, 255
  %2612 = trunc i16 %2611 to i8
  br label %2613

2613:                                             ; preds = %2605, %2597
  %2614 = phi i8* [ %2607, %2605 ], [ null, %2597 ]
  %2615 = phi i8 [ %2612, %2605 ], [ %2604, %2597 ]
  %2616 = zext i8 %2615 to i32
  switch i8 %2615, label %2617 [
    i8 -1, label %2652
    i8 0, label %2654
  ]

2617:                                             ; preds = %2613
  %2618 = xor i32 %2616, 255
  %2619 = load i8, i8* %2600, align 1
  %2620 = zext i8 %2619 to i32
  %2621 = mul nuw nsw i32 %2618, %2620
  %2622 = load i8, i8* %2601, align 1
  %2623 = zext i8 %2622 to i32
  %2624 = mul nuw nsw i32 %2623, %2616
  %2625 = add nuw nsw i32 %2624, %2621
  %2626 = udiv i32 %2625, 255
  %2627 = trunc i32 %2626 to i8
  store i8 %2627, i8* %2600, align 1
  %2628 = getelementptr inbounds i8, i8* %2600, i64 1
  %2629 = getelementptr inbounds i8, i8* %2601, i64 1
  %2630 = load i8, i8* %2628, align 1
  %2631 = zext i8 %2630 to i32
  %2632 = mul nuw nsw i32 %2618, %2631
  %2633 = load i8, i8* %2629, align 1
  %2634 = zext i8 %2633 to i32
  %2635 = mul nuw nsw i32 %2634, %2616
  %2636 = add nuw nsw i32 %2635, %2632
  %2637 = udiv i32 %2636, 255
  %2638 = trunc i32 %2637 to i8
  store i8 %2638, i8* %2628, align 1
  %2639 = getelementptr inbounds i8, i8* %2600, i64 2
  %2640 = getelementptr inbounds i8, i8* %2601, i64 2
  %2641 = load i8, i8* %2639, align 1
  %2642 = zext i8 %2641 to i32
  %2643 = mul nuw nsw i32 %2618, %2642
  %2644 = load i8, i8* %2640, align 1
  %2645 = zext i8 %2644 to i32
  %2646 = mul nuw nsw i32 %2645, %2616
  %2647 = add nuw nsw i32 %2646, %2643
  %2648 = udiv i32 %2647, 255
  %2649 = trunc i32 %2648 to i8
  store i8 %2649, i8* %2639, align 1
  %2650 = getelementptr inbounds i8, i8* %2600, i64 3
  %2651 = getelementptr inbounds i8, i8* %2650, i64 %2531
  br label %2656

2652:                                             ; preds = %2613
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2600, i8* align 1 %2601, i64 3, i1 false) #7
  %2653 = getelementptr inbounds i8, i8* %2600, i64 %2530
  br label %2656

2654:                                             ; preds = %2613
  %2655 = getelementptr inbounds i8, i8* %2600, i64 %2530
  br label %2656

2656:                                             ; preds = %2654, %2652, %2617
  %2657 = phi i8* [ %2653, %2652 ], [ %2655, %2654 ], [ %2651, %2617 ]
  %2658 = getelementptr inbounds i8, i8* %2601, i64 4
  %2659 = add nuw nsw i32 %2598, 1
  %2660 = icmp eq i32 %2659, %3
  br i1 %2660, label %2974, label %2597

2661:                                             ; preds = %1624
  %2662 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 8
  %2663 = load i32, i32* %2662, align 8
  %2664 = bitcast [3 x i32]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %2664) #7
  %2665 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 0
  store i32 -1431655766, i32* %2665, align 4
  %2666 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 1
  store i32 -1431655766, i32* %2666, align 4
  %2667 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 2
  store i32 -1431655766, i32* %2667, align 4
  %2668 = and i32 %2663, -4
  %2669 = icmp eq i32 %2668, 12
  %2670 = icmp sgt i32 %3, 0
  br i1 %2670, label %2671, label %2720

2671:                                             ; preds = %2661
  %2672 = add nsw i32 %14, -3
  %2673 = add nsw i32 %19, -3
  %2674 = sext i32 %2673 to i64
  %2675 = sext i32 %2672 to i64
  br label %2676

2676:                                             ; preds = %2710, %2671
  %2677 = phi i32 [ 0, %2671 ], [ %2718, %2710 ]
  %2678 = phi i8* [ %1, %2671 ], [ %2716, %2710 ]
  %2679 = phi i8* [ %2, %2671 ], [ %2717, %2710 ]
  br i1 %2669, label %2702, label %2680

2680:                                             ; preds = %2676
  %2681 = load i8, i8* %2679, align 1
  %2682 = zext i8 %2681 to i32
  %2683 = load i8, i8* %2678, align 1
  %2684 = zext i8 %2683 to i32
  %2685 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %2663, i32 %2684, i32 %2682) #7
  %2686 = trunc i32 %2685 to i8
  store i8 %2686, i8* %2678, align 1
  %2687 = getelementptr inbounds i8, i8* %2678, i64 1
  %2688 = getelementptr inbounds i8, i8* %2679, i64 1
  %2689 = load i8, i8* %2688, align 1
  %2690 = zext i8 %2689 to i32
  %2691 = load i8, i8* %2687, align 1
  %2692 = zext i8 %2691 to i32
  %2693 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %2663, i32 %2692, i32 %2690) #7
  %2694 = trunc i32 %2693 to i8
  store i8 %2694, i8* %2687, align 1
  %2695 = getelementptr inbounds i8, i8* %2678, i64 2
  %2696 = getelementptr inbounds i8, i8* %2679, i64 2
  %2697 = load i8, i8* %2696, align 1
  %2698 = zext i8 %2697 to i32
  %2699 = load i8, i8* %2695, align 1
  %2700 = zext i8 %2699 to i32
  %2701 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %2663, i32 %2700, i32 %2698) #7
  br label %2710

2702:                                             ; preds = %2676
  call fastcc void @_ZN12_GLOBAL__N_19RGB_BlendE9BlendModePKhS2_Pi(i32 %2663, i8* %2679, i8* %2678, i32* nonnull %2665) #7
  %2703 = load i32, i32* %2665, align 4
  %2704 = trunc i32 %2703 to i8
  store i8 %2704, i8* %2678, align 1
  %2705 = getelementptr inbounds i8, i8* %2678, i64 1
  %2706 = load i32, i32* %2666, align 4
  %2707 = trunc i32 %2706 to i8
  store i8 %2707, i8* %2705, align 1
  %2708 = getelementptr inbounds i8, i8* %2678, i64 2
  %2709 = load i32, i32* %2667, align 4
  br label %2710

2710:                                             ; preds = %2702, %2680
  %2711 = phi i8* [ %2708, %2702 ], [ %2695, %2680 ]
  %2712 = phi i32 [ %2709, %2702 ], [ %2701, %2680 ]
  %2713 = trunc i32 %2712 to i8
  store i8 %2713, i8* %2711, align 1
  %2714 = getelementptr inbounds i8, i8* %2678, i64 3
  %2715 = getelementptr inbounds i8, i8* %2679, i64 3
  %2716 = getelementptr inbounds i8, i8* %2714, i64 %2674
  %2717 = getelementptr inbounds i8, i8* %2715, i64 %2675
  %2718 = add nuw nsw i32 %2677, 1
  %2719 = icmp eq i32 %2718, %3
  br i1 %2719, label %2720, label %2676

2720:                                             ; preds = %2710, %2661
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %2664) #7
  br label %2974

2721:                                             ; preds = %1624
  %2722 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 8
  %2723 = load i32, i32* %2722, align 8
  %2724 = bitcast [3 x i32]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %2724) #7
  %2725 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 0
  store i32 -1431655766, i32* %2725, align 4
  %2726 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 1
  store i32 -1431655766, i32* %2726, align 4
  %2727 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 2
  store i32 -1431655766, i32* %2727, align 4
  %2728 = and i32 %2723, -4
  %2729 = icmp eq i32 %2728, 12
  %2730 = icmp sgt i32 %3, 0
  br i1 %2730, label %2731, label %2813

2731:                                             ; preds = %2721
  %2732 = add nsw i32 %14, -3
  %2733 = add nsw i32 %19, -3
  %2734 = sext i32 %2733 to i64
  %2735 = sext i32 %2732 to i64
  %2736 = zext i16 %18 to i64
  %2737 = zext i16 %13 to i64
  br label %2738

2738:                                             ; preds = %2773, %2731
  %2739 = phi i32 [ 0, %2731 ], [ %2776, %2773 ]
  %2740 = phi i8* [ %4, %2731 ], [ %2743, %2773 ]
  %2741 = phi i8* [ %1, %2731 ], [ %2775, %2773 ]
  %2742 = phi i8* [ %2, %2731 ], [ %2774, %2773 ]
  %2743 = getelementptr inbounds i8, i8* %2740, i64 1
  %2744 = load i8, i8* %2740, align 1
  %2745 = zext i8 %2744 to i32
  %2746 = icmp eq i8 %2744, 0
  br i1 %2746, label %2747, label %2750

2747:                                             ; preds = %2738
  %2748 = getelementptr inbounds i8, i8* %2741, i64 %2736
  %2749 = getelementptr inbounds i8, i8* %2742, i64 %2737
  br label %2773

2750:                                             ; preds = %2738
  br i1 %2729, label %2751, label %2755

2751:                                             ; preds = %2750
  call fastcc void @_ZN12_GLOBAL__N_19RGB_BlendE9BlendModePKhS2_Pi(i32 %2723, i8* %2742, i8* %2741, i32* nonnull %2725) #7
  %2752 = load i8, i8* %2741, align 1
  %2753 = zext i8 %2752 to i32
  %2754 = load i32, i32* %2725, align 4
  br label %2761

2755:                                             ; preds = %2750
  %2756 = load i8, i8* %2741, align 1
  %2757 = zext i8 %2756 to i32
  %2758 = load i8, i8* %2742, align 1
  %2759 = zext i8 %2758 to i32
  %2760 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %2723, i32 %2757, i32 %2759) #7
  br label %2761

2761:                                             ; preds = %2755, %2751
  %2762 = phi i32 [ %2753, %2751 ], [ %2757, %2755 ]
  %2763 = phi i32 [ %2754, %2751 ], [ %2760, %2755 ]
  %2764 = xor i32 %2745, 255
  %2765 = mul nuw nsw i32 %2762, %2764
  %2766 = mul nsw i32 %2763, %2745
  %2767 = add nsw i32 %2766, %2765
  %2768 = sdiv i32 %2767, 255
  %2769 = trunc i32 %2768 to i8
  store i8 %2769, i8* %2741, align 1
  %2770 = getelementptr inbounds i8, i8* %2741, i64 1
  %2771 = load i8, i8* %2770, align 1
  %2772 = zext i8 %2771 to i32
  br i1 %2729, label %2783, label %2778

2773:                                             ; preds = %2802, %2747
  %2774 = phi i8* [ %2749, %2747 ], [ %2812, %2802 ]
  %2775 = phi i8* [ %2748, %2747 ], [ %2811, %2802 ]
  %2776 = add nuw nsw i32 %2739, 1
  %2777 = icmp eq i32 %2776, %3
  br i1 %2777, label %2813, label %2738

2778:                                             ; preds = %2761
  %2779 = getelementptr inbounds i8, i8* %2742, i64 1
  %2780 = load i8, i8* %2779, align 1
  %2781 = zext i8 %2780 to i32
  %2782 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %2723, i32 %2772, i32 %2781) #7
  br label %2785

2783:                                             ; preds = %2761
  %2784 = load i32, i32* %2726, align 4
  br label %2785

2785:                                             ; preds = %2783, %2778
  %2786 = phi i32 [ %2784, %2783 ], [ %2782, %2778 ]
  %2787 = mul nuw nsw i32 %2764, %2772
  %2788 = mul nsw i32 %2786, %2745
  %2789 = add nsw i32 %2788, %2787
  %2790 = sdiv i32 %2789, 255
  %2791 = trunc i32 %2790 to i8
  store i8 %2791, i8* %2770, align 1
  %2792 = getelementptr inbounds i8, i8* %2741, i64 2
  %2793 = load i8, i8* %2792, align 1
  %2794 = zext i8 %2793 to i32
  br i1 %2729, label %2800, label %2795

2795:                                             ; preds = %2785
  %2796 = getelementptr inbounds i8, i8* %2742, i64 2
  %2797 = load i8, i8* %2796, align 1
  %2798 = zext i8 %2797 to i32
  %2799 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %2723, i32 %2794, i32 %2798) #7
  br label %2802

2800:                                             ; preds = %2785
  %2801 = load i32, i32* %2727, align 4
  br label %2802

2802:                                             ; preds = %2800, %2795
  %2803 = phi i32 [ %2801, %2800 ], [ %2799, %2795 ]
  %2804 = mul nuw nsw i32 %2764, %2794
  %2805 = mul nsw i32 %2803, %2745
  %2806 = add nsw i32 %2805, %2804
  %2807 = sdiv i32 %2806, 255
  %2808 = trunc i32 %2807 to i8
  store i8 %2808, i8* %2792, align 1
  %2809 = getelementptr inbounds i8, i8* %2741, i64 3
  %2810 = getelementptr inbounds i8, i8* %2742, i64 3
  %2811 = getelementptr inbounds i8, i8* %2809, i64 %2734
  %2812 = getelementptr inbounds i8, i8* %2810, i64 %2735
  br label %2773

2813:                                             ; preds = %2773, %2721
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %2724) #7
  br label %2974

2814:                                             ; preds = %1624
  %2815 = icmp eq i16 %18, %13
  br i1 %2815, label %2826, label %2816

2816:                                             ; preds = %2814
  %2817 = icmp sgt i32 %3, 0
  br i1 %2817, label %2818, label %2974

2818:                                             ; preds = %2816
  %2819 = zext i16 %18 to i64
  %2820 = zext i16 %13 to i64
  %2821 = add i32 %3, -1
  %2822 = and i32 %3, 3
  %2823 = icmp ult i32 %2821, 3
  br i1 %2823, label %2932, label %2824

2824:                                             ; preds = %2818
  %2825 = sub i32 %3, %2822
  br label %2829

2826:                                             ; preds = %2814
  %2827 = mul nsw i32 %19, %3
  %2828 = sext i32 %2827 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %2, i64 %2828, i1 false) #7
  br label %2974

2829:                                             ; preds = %2829, %2824
  %2830 = phi i8* [ %1, %2824 ], [ %2839, %2829 ]
  %2831 = phi i8* [ %2, %2824 ], [ %2840, %2829 ]
  %2832 = phi i32 [ %2825, %2824 ], [ %2841, %2829 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2830, i8* align 1 %2831, i64 3, i1 false) #7
  %2833 = getelementptr inbounds i8, i8* %2830, i64 %2819
  %2834 = getelementptr inbounds i8, i8* %2831, i64 %2820
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2833, i8* align 1 %2834, i64 3, i1 false) #7
  %2835 = getelementptr inbounds i8, i8* %2833, i64 %2819
  %2836 = getelementptr inbounds i8, i8* %2834, i64 %2820
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2835, i8* align 1 %2836, i64 3, i1 false) #7
  %2837 = getelementptr inbounds i8, i8* %2835, i64 %2819
  %2838 = getelementptr inbounds i8, i8* %2836, i64 %2820
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2837, i8* align 1 %2838, i64 3, i1 false) #7
  %2839 = getelementptr inbounds i8, i8* %2837, i64 %2819
  %2840 = getelementptr inbounds i8, i8* %2838, i64 %2820
  %2841 = add i32 %2832, -4
  %2842 = icmp eq i32 %2841, 0
  br i1 %2842, label %2932, label %2829

2843:                                             ; preds = %1624
  %2844 = icmp sgt i32 %3, 0
  br i1 %2844, label %2845, label %2974

2845:                                             ; preds = %2843
  %2846 = zext i16 %18 to i64
  %2847 = zext i16 %13 to i64
  %2848 = add nsw i32 %19, -2
  %2849 = sext i32 %2848 to i64
  %2850 = add nsw i32 %14, -2
  %2851 = sext i32 %2850 to i64
  %2852 = zext i32 %3 to i64
  br label %2853

2853:                                             ; preds = %2899, %2845
  %2854 = phi i64 [ 0, %2845 ], [ %2902, %2899 ]
  %2855 = phi i8* [ %1, %2845 ], [ %2901, %2899 ]
  %2856 = phi i8* [ %2, %2845 ], [ %2900, %2899 ]
  %2857 = getelementptr inbounds i8, i8* %4, i64 %2854
  %2858 = load i8, i8* %2857, align 1
  %2859 = zext i8 %2858 to i32
  switch i8 %2858, label %2861 [
    i8 -1, label %2860
    i8 0, label %2896
  ]

2860:                                             ; preds = %2853
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2855, i8* align 1 %2856, i64 3, i1 false) #7
  br label %2896

2861:                                             ; preds = %2853
  %2862 = load i8, i8* %2855, align 1
  %2863 = zext i8 %2862 to i32
  %2864 = xor i32 %2859, 255
  %2865 = mul nuw nsw i32 %2864, %2863
  %2866 = load i8, i8* %2856, align 1
  %2867 = zext i8 %2866 to i32
  %2868 = mul nuw nsw i32 %2867, %2859
  %2869 = add nuw nsw i32 %2868, %2865
  %2870 = udiv i32 %2869, 255
  %2871 = trunc i32 %2870 to i8
  store i8 %2871, i8* %2855, align 1
  %2872 = getelementptr inbounds i8, i8* %2855, i64 1
  %2873 = getelementptr inbounds i8, i8* %2856, i64 1
  %2874 = load i8, i8* %2872, align 1
  %2875 = zext i8 %2874 to i32
  %2876 = mul nuw nsw i32 %2864, %2875
  %2877 = load i8, i8* %2873, align 1
  %2878 = zext i8 %2877 to i32
  %2879 = mul nuw nsw i32 %2878, %2859
  %2880 = add nuw nsw i32 %2879, %2876
  %2881 = udiv i32 %2880, 255
  %2882 = trunc i32 %2881 to i8
  store i8 %2882, i8* %2872, align 1
  %2883 = getelementptr inbounds i8, i8* %2855, i64 2
  %2884 = getelementptr inbounds i8, i8* %2856, i64 2
  %2885 = load i8, i8* %2883, align 1
  %2886 = zext i8 %2885 to i32
  %2887 = mul nuw nsw i32 %2864, %2886
  %2888 = load i8, i8* %2884, align 1
  %2889 = zext i8 %2888 to i32
  %2890 = mul nuw nsw i32 %2889, %2859
  %2891 = add nuw nsw i32 %2890, %2887
  %2892 = udiv i32 %2891, 255
  %2893 = trunc i32 %2892 to i8
  store i8 %2893, i8* %2883, align 1
  %2894 = getelementptr inbounds i8, i8* %2883, i64 %2849
  %2895 = getelementptr inbounds i8, i8* %2884, i64 %2851
  br label %2899

2896:                                             ; preds = %2860, %2853
  %2897 = getelementptr inbounds i8, i8* %2855, i64 %2846
  %2898 = getelementptr inbounds i8, i8* %2856, i64 %2847
  br label %2899

2899:                                             ; preds = %2896, %2861
  %2900 = phi i8* [ %2898, %2896 ], [ %2895, %2861 ]
  %2901 = phi i8* [ %2897, %2896 ], [ %2894, %2861 ]
  %2902 = add nuw nsw i64 %2854, 1
  %2903 = icmp eq i64 %2902, %2852
  br i1 %2903, label %2974, label %2853

2904:                                             ; preds = %2154, %2129
  %2905 = phi i8* [ %1, %2129 ], [ %2176, %2154 ]
  %2906 = phi i8* [ %2, %2129 ], [ %2177, %2154 ]
  %2907 = icmp eq i32 %2131, 0
  br i1 %2907, label %2974, label %2908

2908:                                             ; preds = %2904
  %2909 = getelementptr inbounds i8, i8* %2906, i64 1
  %2910 = load i8, i8* %2906, align 1
  store i8 %2910, i8* %2905, align 1
  %2911 = load i8, i8* %2909, align 1
  %2912 = getelementptr inbounds i8, i8* %2905, i64 1
  store i8 %2911, i8* %2912, align 1
  %2913 = getelementptr inbounds i8, i8* %2906, i64 2
  %2914 = load i8, i8* %2913, align 1
  %2915 = getelementptr inbounds i8, i8* %2905, i64 2
  store i8 %2914, i8* %2915, align 1
  %2916 = getelementptr inbounds i8, i8* %2905, i64 3
  store i8 -1, i8* %2916, align 1
  br label %2974

2917:                                             ; preds = %2135, %2121
  %2918 = phi i8* [ %6, %2121 ], [ %2151, %2135 ]
  %2919 = phi i8* [ %1, %2121 ], [ %2149, %2135 ]
  %2920 = phi i8* [ %2, %2121 ], [ %2150, %2135 ]
  %2921 = icmp eq i32 %2124, 0
  br i1 %2921, label %2974, label %2922

2922:                                             ; preds = %2917, %2922
  %2923 = phi i8* [ %2929, %2922 ], [ %2918, %2917 ]
  %2924 = phi i8* [ %2927, %2922 ], [ %2919, %2917 ]
  %2925 = phi i8* [ %2928, %2922 ], [ %2920, %2917 ]
  %2926 = phi i32 [ %2930, %2922 ], [ %2124, %2917 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2924, i8* align 1 %2925, i64 3, i1 false) #7
  %2927 = getelementptr inbounds i8, i8* %2924, i64 3
  %2928 = getelementptr inbounds i8, i8* %2925, i64 %2122
  %2929 = getelementptr inbounds i8, i8* %2923, i64 1
  store i8 -1, i8* %2923, align 1
  %2930 = add i32 %2926, -1
  %2931 = icmp eq i32 %2930, 0
  br i1 %2931, label %2974, label %2922, !llvm.loop !27

2932:                                             ; preds = %2829, %2818
  %2933 = phi i8* [ %1, %2818 ], [ %2839, %2829 ]
  %2934 = phi i8* [ %2, %2818 ], [ %2840, %2829 ]
  %2935 = icmp eq i32 %2822, 0
  br i1 %2935, label %2974, label %2936

2936:                                             ; preds = %2932, %2936
  %2937 = phi i8* [ %2940, %2936 ], [ %2933, %2932 ]
  %2938 = phi i8* [ %2941, %2936 ], [ %2934, %2932 ]
  %2939 = phi i32 [ %2942, %2936 ], [ %2822, %2932 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2937, i8* align 1 %2938, i64 3, i1 false) #7
  %2940 = getelementptr inbounds i8, i8* %2937, i64 %2819
  %2941 = getelementptr inbounds i8, i8* %2938, i64 %2820
  %2942 = add i32 %2939, -1
  %2943 = icmp eq i32 %2942, 0
  br i1 %2943, label %2974, label %2936, !llvm.loop !29

2944:                                             ; preds = %2978, %516
  %2945 = phi i8* [ %1, %516 ], [ %2988, %2978 ]
  %2946 = phi i8* [ %2, %516 ], [ %2989, %2978 ]
  %2947 = icmp eq i32 %519, 0
  br i1 %2947, label %2974, label %2948

2948:                                             ; preds = %2944
  br i1 %517, label %2949, label %2952

2949:                                             ; preds = %2948
  %2950 = getelementptr inbounds i8, i8* %2946, i64 3
  %2951 = load i8, i8* %2950, align 1
  br label %2952

2952:                                             ; preds = %2949, %2948
  %2953 = phi i8 [ %2951, %2949 ], [ -1, %2948 ]
  %2954 = getelementptr inbounds i8, i8* %2945, i64 3
  store i8 %2953, i8* %2954, align 1
  %2955 = getelementptr inbounds i8, i8* %2946, i64 2
  %2956 = getelementptr inbounds i8, i8* %2946, i64 1
  %2957 = load i8, i8* %2955, align 1
  store i8 %2957, i8* %2945, align 1
  %2958 = load i8, i8* %2956, align 1
  %2959 = getelementptr inbounds i8, i8* %2945, i64 1
  store i8 %2958, i8* %2959, align 1
  %2960 = load i8, i8* %2946, align 1
  %2961 = getelementptr inbounds i8, i8* %2945, i64 2
  store i8 %2960, i8* %2961, align 1
  br label %2974

2962:                                             ; preds = %623, %616
  %2963 = phi i8* [ %1, %616 ], [ %643, %623 ]
  %2964 = phi i8* [ %2, %616 ], [ %644, %623 ]
  %2965 = icmp eq i32 %619, 0
  br i1 %2965, label %2974, label %2966

2966:                                             ; preds = %2962
  %2967 = load i8, i8* %2964, align 1
  %2968 = getelementptr inbounds i8, i8* %2963, i64 2
  store i8 %2967, i8* %2968, align 1
  %2969 = getelementptr inbounds i8, i8* %2964, i64 1
  %2970 = load i8, i8* %2969, align 1
  %2971 = getelementptr inbounds i8, i8* %2963, i64 1
  store i8 %2970, i8* %2971, align 1
  %2972 = getelementptr inbounds i8, i8* %2964, i64 2
  %2973 = load i8, i8* %2972, align 1
  store i8 %2973, i8* %2963, align 1
  br label %2974

2974:                                             ; preds = %1032, %968, %2966, %2962, %609, %2952, %2944, %2899, %2932, %2936, %2592, %2656, %2256, %2325, %2917, %2922, %2908, %2904, %1430, %1352, %1618, %1556, %1123, %1082, %1158, %1200, %1196, %2843, %2826, %2816, %2528, %2524, %2189, %2184, %2128, %2120, %1562, %1436, %1358, %1240, %1198, %1130, %1087, %1045, %973, %891, %614, %542, %514, %1861, %1971, %2116, %2519, %2720, %2813, %1624, %239, %348, %450, %513, %793, %890, %23
  ret void

2975:                                             ; preds = %530
  %2976 = getelementptr inbounds i8, i8* %541, i64 3
  %2977 = load i8, i8* %2976, align 1
  br label %2978

2978:                                             ; preds = %2975, %530
  %2979 = phi i8 [ %2977, %2975 ], [ -1, %530 ]
  %2980 = getelementptr inbounds i8, i8* %524, i64 7
  store i8 %2979, i8* %2980, align 1
  %2981 = getelementptr inbounds i8, i8* %541, i64 2
  %2982 = getelementptr inbounds i8, i8* %541, i64 1
  %2983 = load i8, i8* %2981, align 1
  store i8 %2983, i8* %540, align 1
  %2984 = load i8, i8* %2982, align 1
  %2985 = getelementptr inbounds i8, i8* %524, i64 5
  store i8 %2984, i8* %2985, align 1
  %2986 = load i8, i8* %541, align 1
  %2987 = getelementptr inbounds i8, i8* %524, i64 6
  store i8 %2986, i8* %2987, align 1
  %2988 = getelementptr inbounds i8, i8* %524, i64 8
  %2989 = getelementptr inbounds i8, i8* %541, i64 %518
  %2990 = add i32 %526, -2
  %2991 = icmp eq i32 %2990, 0
  br i1 %2991, label %2944, label %523
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN22CFX_ScanlineCompositor22CompositePalBitmapLineEPhPKhiiS2_S2_S0_(%class.CFX_ScanlineCompositor* readonly, i8*, i8* readonly, i32, i32, i8* readonly, i8* readonly, i8* nocapture) local_unnamed_addr #0 align 2 {
  %9 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 9
  %10 = load i8, i8* %9, align 4, !range !18
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %421, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 1
  %14 = load i16, i16* %13, align 4
  %15 = icmp eq i16 %14, 1
  %16 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 2
  %17 = load i16, i16* %16, align 2
  %18 = icmp eq i16 %17, 8
  br i1 %15, label %19, label %243

19:                                               ; preds = %12
  br i1 %18, label %1818, label %20

20:                                               ; preds = %19
  %21 = icmp eq i16 %17, 544
  %22 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 3
  %23 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 3, i32 2, i32 0, i32 0, i32 0
  %24 = load i32*, i32** %23, align 8
  %25 = icmp eq i32* %24, null
  br i1 %21, label %26, label %138

26:                                               ; preds = %20
  br i1 %25, label %32, label %27

27:                                               ; preds = %26
  %28 = getelementptr inbounds %"class.CFX_ScanlineCompositor::Palette", %"class.CFX_ScanlineCompositor::Palette"* %22, i64 0, i32 0
  %29 = load i64, i64* %28, align 8, !noalias !30
  %30 = icmp eq i64 %29, 4
  br i1 %30, label %32, label %31, !prof !5

31:                                               ; preds = %27
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !noalias !30, !srcloc !33
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !noalias !30, !srcloc !34
  unreachable

32:                                               ; preds = %26, %27
  %33 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 3, i32 1
  %34 = load i64, i64* %33, align 8, !noalias !30
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %53, label %36

36:                                               ; preds = %32
  %37 = load i32, i32* %24, align 4
  %38 = icmp eq i64 %34, 1
  br i1 %38, label %39, label %40, !prof !8

39:                                               ; preds = %36
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !6
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !7
  unreachable

40:                                               ; preds = %36
  %41 = and i32 %37, 255
  %42 = lshr i32 %37, 8
  %43 = and i32 %42, 255
  %44 = lshr i32 %37, 16
  %45 = and i32 %44, 255
  %46 = getelementptr inbounds i32, i32* %24, i64 1
  %47 = load i32, i32* %46, align 4
  %48 = lshr i32 %47, 16
  %49 = and i32 %48, 255
  %50 = lshr i32 %47, 8
  %51 = and i32 %50, 255
  %52 = and i32 %47, 255
  br label %53

53:                                               ; preds = %40, %32
  %54 = phi i32 [ %41, %40 ], [ 0, %32 ]
  %55 = phi i32 [ %49, %40 ], [ 255, %32 ]
  %56 = phi i32 [ %51, %40 ], [ 255, %32 ]
  %57 = phi i32 [ %52, %40 ], [ 255, %32 ]
  %58 = phi i32 [ %43, %40 ], [ 0, %32 ]
  %59 = phi i32 [ %45, %40 ], [ 0, %32 ]
  %60 = icmp sgt i32 %4, 0
  br i1 %60, label %61, label %1818

61:                                               ; preds = %53
  %62 = icmp eq i8* %5, null
  %63 = zext i32 %4 to i64
  br label %64

64:                                               ; preds = %134, %61
  %65 = phi i64 [ 0, %61 ], [ %136, %134 ]
  %66 = phi i8* [ %1, %61 ], [ %135, %134 ]
  %67 = trunc i64 %65 to i32
  %68 = add nsw i32 %67, %3
  %69 = sdiv i32 %68, 8
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds i8, i8* %2, i64 %70
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i32
  %74 = srem i32 %68, 8
  %75 = sub nsw i32 7, %74
  %76 = shl i32 1, %75
  %77 = and i32 %76, %73
  %78 = icmp eq i32 %77, 0
  %79 = select i1 %78, i32 %59, i32 %55
  %80 = select i1 %78, i32 %58, i32 %56
  %81 = select i1 %78, i32 %54, i32 %57
  br i1 %62, label %86, label %82

82:                                               ; preds = %64
  %83 = getelementptr inbounds i8, i8* %5, i64 %65
  %84 = load i8, i8* %83, align 1
  %85 = zext i8 %84 to i32
  switch i8 %84, label %93 [
    i8 -1, label %86
    i8 0, label %134
  ]

86:                                               ; preds = %82, %64
  %87 = trunc i32 %81 to i8
  %88 = getelementptr inbounds i8, i8* %66, i64 2
  store i8 %87, i8* %88, align 1
  %89 = trunc i32 %80 to i8
  %90 = getelementptr inbounds i8, i8* %66, i64 1
  store i8 %89, i8* %90, align 1
  %91 = trunc i32 %79 to i8
  store i8 %91, i8* %66, align 1
  %92 = getelementptr inbounds i8, i8* %66, i64 3
  store i8 -1, i8* %92, align 1
  br label %134

93:                                               ; preds = %82
  %94 = getelementptr inbounds i8, i8* %66, i64 3
  %95 = load i8, i8* %94, align 1
  %96 = zext i8 %95 to i32
  %97 = add nuw nsw i32 %96, %85
  %98 = mul nuw nsw i32 %96, %85
  %99 = trunc i32 %98 to i16
  %100 = udiv i16 %99, 255
  %101 = zext i16 %100 to i32
  %102 = sub nsw i32 %97, %101
  %103 = trunc i32 %102 to i8
  store i8 %103, i8* %94, align 1
  %104 = zext i8 %84 to i16
  %105 = mul nuw i16 %104, 255
  %106 = trunc i32 %102 to i16
  %107 = and i16 %106, 255
  %108 = udiv i16 %105, %107
  %109 = zext i16 %108 to i32
  %110 = getelementptr inbounds i8, i8* %66, i64 2
  %111 = load i8, i8* %110, align 1
  %112 = zext i8 %111 to i32
  %113 = sub nsw i32 255, %109
  %114 = mul nsw i32 %113, %112
  %115 = mul nuw nsw i32 %81, %109
  %116 = add nsw i32 %114, %115
  %117 = sdiv i32 %116, 255
  %118 = trunc i32 %117 to i8
  store i8 %118, i8* %110, align 1
  %119 = getelementptr inbounds i8, i8* %66, i64 1
  %120 = load i8, i8* %119, align 1
  %121 = zext i8 %120 to i32
  %122 = mul nsw i32 %113, %121
  %123 = mul nuw nsw i32 %80, %109
  %124 = add nsw i32 %122, %123
  %125 = sdiv i32 %124, 255
  %126 = trunc i32 %125 to i8
  store i8 %126, i8* %119, align 1
  %127 = load i8, i8* %66, align 1
  %128 = zext i8 %127 to i32
  %129 = mul nsw i32 %113, %128
  %130 = mul nuw nsw i32 %79, %109
  %131 = add nsw i32 %129, %130
  %132 = sdiv i32 %131, 255
  %133 = trunc i32 %132 to i8
  store i8 %133, i8* %66, align 1
  br label %134

134:                                              ; preds = %93, %86, %82
  %135 = getelementptr inbounds i8, i8* %66, i64 4
  %136 = add nuw nsw i64 %65, 1
  %137 = icmp eq i64 %136, %63
  br i1 %137, label %1818, label %64

138:                                              ; preds = %20
  br i1 %25, label %144, label %139

139:                                              ; preds = %138
  %140 = getelementptr inbounds %"class.CFX_ScanlineCompositor::Palette", %"class.CFX_ScanlineCompositor::Palette"* %22, i64 0, i32 0
  %141 = load i64, i64* %140, align 8, !noalias !35
  %142 = icmp eq i64 %141, 4
  br i1 %142, label %144, label %143, !prof !5

143:                                              ; preds = %139
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !noalias !35, !srcloc !33
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !noalias !35, !srcloc !34
  unreachable

144:                                              ; preds = %138, %139
  %145 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 3, i32 1
  %146 = load i64, i64* %145, align 8, !noalias !35
  %147 = lshr i16 %17, 3
  %148 = and i16 %147, 31
  %149 = icmp eq i64 %146, 0
  br i1 %149, label %167, label %150

150:                                              ; preds = %144
  %151 = load i32, i32* %24, align 4
  %152 = icmp eq i64 %146, 1
  br i1 %152, label %153, label %154, !prof !8

153:                                              ; preds = %150
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !6
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !7
  unreachable

154:                                              ; preds = %150
  %155 = and i32 %151, 255
  %156 = lshr i32 %151, 8
  %157 = and i32 %156, 255
  %158 = lshr i32 %151, 16
  %159 = and i32 %158, 255
  %160 = getelementptr inbounds i32, i32* %24, i64 1
  %161 = load i32, i32* %160, align 4
  %162 = lshr i32 %161, 16
  %163 = and i32 %162, 255
  %164 = lshr i32 %161, 8
  %165 = and i32 %164, 255
  %166 = and i32 %161, 255
  br label %167

167:                                              ; preds = %154, %144
  %168 = phi i32 [ %159, %154 ], [ 0, %144 ]
  %169 = phi i32 [ %157, %154 ], [ 0, %144 ]
  %170 = phi i32 [ %155, %154 ], [ 0, %144 ]
  %171 = phi i32 [ %163, %154 ], [ 255, %144 ]
  %172 = phi i32 [ %165, %154 ], [ 255, %144 ]
  %173 = phi i32 [ %166, %154 ], [ 255, %144 ]
  %174 = icmp sgt i32 %4, 0
  br i1 %174, label %175, label %1818

175:                                              ; preds = %167
  %176 = icmp eq i8* %5, null
  %177 = zext i16 %148 to i64
  %178 = zext i32 %4 to i64
  br label %179

179:                                              ; preds = %237, %175
  %180 = phi i64 [ 0, %175 ], [ %241, %237 ]
  %181 = phi i8* [ %1, %175 ], [ %240, %237 ]
  %182 = trunc i64 %180 to i32
  %183 = add nsw i32 %182, %3
  %184 = sdiv i32 %183, 8
  %185 = sext i32 %184 to i64
  %186 = getelementptr inbounds i8, i8* %2, i64 %185
  %187 = load i8, i8* %186, align 1
  %188 = zext i8 %187 to i32
  %189 = srem i32 %183, 8
  %190 = sub nsw i32 7, %189
  %191 = shl i32 1, %190
  %192 = and i32 %191, %188
  %193 = icmp eq i32 %192, 0
  %194 = select i1 %193, i32 %168, i32 %171
  %195 = select i1 %193, i32 %169, i32 %172
  %196 = select i1 %193, i32 %170, i32 %173
  br i1 %176, label %232, label %197

197:                                              ; preds = %179
  %198 = getelementptr inbounds i8, i8* %5, i64 %180
  %199 = load i8, i8* %198, align 1
  %200 = zext i8 %199 to i32
  %201 = icmp eq i8 %199, -1
  br i1 %201, label %232, label %202

202:                                              ; preds = %197
  %203 = getelementptr inbounds i8, i8* %181, i64 2
  %204 = load i8, i8* %203, align 1
  %205 = zext i8 %204 to i32
  %206 = xor i32 %200, 255
  %207 = mul nuw nsw i32 %206, %205
  %208 = mul nuw nsw i32 %196, %200
  %209 = add nuw nsw i32 %207, %208
  %210 = udiv i32 %209, 255
  %211 = trunc i32 %210 to i8
  store i8 %211, i8* %203, align 1
  %212 = getelementptr inbounds i8, i8* %181, i64 1
  %213 = load i8, i8* %212, align 1
  %214 = zext i8 %213 to i32
  %215 = load i8, i8* %198, align 1
  %216 = zext i8 %215 to i32
  %217 = xor i32 %216, 255
  %218 = mul nuw nsw i32 %217, %214
  %219 = mul nuw nsw i32 %195, %216
  %220 = add nuw nsw i32 %218, %219
  %221 = udiv i32 %220, 255
  %222 = trunc i32 %221 to i8
  store i8 %222, i8* %212, align 1
  %223 = load i8, i8* %181, align 1
  %224 = zext i8 %223 to i32
  %225 = load i8, i8* %198, align 1
  %226 = zext i8 %225 to i32
  %227 = xor i32 %226, 255
  %228 = mul nuw nsw i32 %227, %224
  %229 = mul nuw nsw i32 %194, %226
  %230 = add nuw nsw i32 %228, %229
  %231 = udiv i32 %230, 255
  br label %237

232:                                              ; preds = %197, %179
  %233 = trunc i32 %196 to i8
  %234 = getelementptr inbounds i8, i8* %181, i64 2
  store i8 %233, i8* %234, align 1
  %235 = trunc i32 %195 to i8
  %236 = getelementptr inbounds i8, i8* %181, i64 1
  store i8 %235, i8* %236, align 1
  br label %237

237:                                              ; preds = %232, %202
  %238 = phi i32 [ %194, %232 ], [ %231, %202 ]
  %239 = trunc i32 %238 to i8
  store i8 %239, i8* %181, align 1
  %240 = getelementptr inbounds i8, i8* %181, i64 %177
  %241 = add nuw nsw i64 %180, 1
  %242 = icmp eq i64 %241, %178
  br i1 %242, label %1818, label %179

243:                                              ; preds = %12
  br i1 %18, label %1818, label %244

244:                                              ; preds = %243
  %245 = icmp eq i16 %17, 544
  %246 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 3
  %247 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 3, i32 2, i32 0, i32 0, i32 0
  %248 = load i32*, i32** %247, align 8
  %249 = icmp eq i32* %248, null
  br i1 %245, label %250, label %338

250:                                              ; preds = %244
  br i1 %249, label %256, label %251

251:                                              ; preds = %250
  %252 = getelementptr inbounds %"class.CFX_ScanlineCompositor::Palette", %"class.CFX_ScanlineCompositor::Palette"* %246, i64 0, i32 0
  %253 = load i64, i64* %252, align 8, !noalias !38
  %254 = icmp eq i64 %253, 4
  br i1 %254, label %256, label %255, !prof !5

255:                                              ; preds = %251
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !noalias !38, !srcloc !33
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !noalias !38, !srcloc !34
  unreachable

256:                                              ; preds = %250, %251
  %257 = icmp sgt i32 %4, 0
  br i1 %257, label %258, label %1818

258:                                              ; preds = %256
  %259 = icmp eq i8* %5, null
  %260 = zext i32 %4 to i64
  br label %261

261:                                              ; preds = %333, %258
  %262 = phi i64 [ 0, %258 ], [ %336, %333 ]
  %263 = phi i8* [ %1, %258 ], [ %335, %333 ]
  %264 = phi i8* [ %2, %258 ], [ %334, %333 ]
  %265 = load i8, i8* %264, align 1
  br i1 %249, label %275, label %266

266:                                              ; preds = %261
  %267 = zext i8 %265 to i64
  %268 = getelementptr inbounds i32, i32* %248, i64 %267
  %269 = load i32, i32* %268, align 4
  %270 = lshr i32 %269, 16
  %271 = and i32 %270, 255
  %272 = lshr i32 %269, 8
  %273 = and i32 %272, 255
  %274 = and i32 %269, 255
  br label %277

275:                                              ; preds = %261
  %276 = zext i8 %265 to i32
  br label %277

277:                                              ; preds = %275, %266
  %278 = phi i32 [ %271, %266 ], [ %276, %275 ]
  %279 = phi i32 [ %273, %266 ], [ %276, %275 ]
  %280 = phi i32 [ %274, %266 ], [ %276, %275 ]
  br i1 %259, label %285, label %281

281:                                              ; preds = %277
  %282 = getelementptr inbounds i8, i8* %5, i64 %262
  %283 = load i8, i8* %282, align 1
  %284 = zext i8 %283 to i32
  switch i8 %283, label %292 [
    i8 -1, label %285
    i8 0, label %333
  ]

285:                                              ; preds = %281, %277
  %286 = trunc i32 %280 to i8
  %287 = getelementptr inbounds i8, i8* %263, i64 2
  store i8 %286, i8* %287, align 1
  %288 = trunc i32 %279 to i8
  %289 = getelementptr inbounds i8, i8* %263, i64 1
  store i8 %288, i8* %289, align 1
  %290 = trunc i32 %278 to i8
  store i8 %290, i8* %263, align 1
  %291 = getelementptr inbounds i8, i8* %263, i64 3
  store i8 -1, i8* %291, align 1
  br label %333

292:                                              ; preds = %281
  %293 = getelementptr inbounds i8, i8* %263, i64 3
  %294 = load i8, i8* %293, align 1
  %295 = zext i8 %294 to i32
  %296 = add nuw nsw i32 %295, %284
  %297 = mul nuw nsw i32 %295, %284
  %298 = trunc i32 %297 to i16
  %299 = udiv i16 %298, 255
  %300 = zext i16 %299 to i32
  %301 = sub nsw i32 %296, %300
  %302 = trunc i32 %301 to i8
  store i8 %302, i8* %293, align 1
  %303 = zext i8 %283 to i16
  %304 = mul nuw i16 %303, 255
  %305 = trunc i32 %301 to i16
  %306 = and i16 %305, 255
  %307 = udiv i16 %304, %306
  %308 = zext i16 %307 to i32
  %309 = getelementptr inbounds i8, i8* %263, i64 2
  %310 = load i8, i8* %309, align 1
  %311 = zext i8 %310 to i32
  %312 = sub nsw i32 255, %308
  %313 = mul nsw i32 %312, %311
  %314 = mul nuw nsw i32 %280, %308
  %315 = add nsw i32 %313, %314
  %316 = sdiv i32 %315, 255
  %317 = trunc i32 %316 to i8
  store i8 %317, i8* %309, align 1
  %318 = getelementptr inbounds i8, i8* %263, i64 1
  %319 = load i8, i8* %318, align 1
  %320 = zext i8 %319 to i32
  %321 = mul nsw i32 %312, %320
  %322 = mul nuw nsw i32 %279, %308
  %323 = add nsw i32 %321, %322
  %324 = sdiv i32 %323, 255
  %325 = trunc i32 %324 to i8
  store i8 %325, i8* %318, align 1
  %326 = load i8, i8* %263, align 1
  %327 = zext i8 %326 to i32
  %328 = mul nsw i32 %312, %327
  %329 = mul nuw nsw i32 %278, %308
  %330 = add nsw i32 %328, %329
  %331 = sdiv i32 %330, 255
  %332 = trunc i32 %331 to i8
  store i8 %332, i8* %263, align 1
  br label %333

333:                                              ; preds = %292, %285, %281
  %334 = getelementptr inbounds i8, i8* %264, i64 1
  %335 = getelementptr inbounds i8, i8* %263, i64 4
  %336 = add nuw nsw i64 %262, 1
  %337 = icmp eq i64 %336, %260
  br i1 %337, label %1818, label %261

338:                                              ; preds = %244
  br i1 %249, label %344, label %339

339:                                              ; preds = %338
  %340 = getelementptr inbounds %"class.CFX_ScanlineCompositor::Palette", %"class.CFX_ScanlineCompositor::Palette"* %246, i64 0, i32 0
  %341 = load i64, i64* %340, align 8, !noalias !41
  %342 = icmp eq i64 %341, 4
  br i1 %342, label %344, label %343, !prof !5

343:                                              ; preds = %339
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !noalias !41, !srcloc !33
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !noalias !41, !srcloc !34
  unreachable

344:                                              ; preds = %338, %339
  %345 = icmp sgt i32 %4, 0
  br i1 %345, label %346, label %1818

346:                                              ; preds = %344
  %347 = lshr i16 %17, 3
  %348 = and i16 %347, 31
  %349 = icmp eq i8* %5, null
  %350 = zext i16 %348 to i64
  %351 = zext i32 %4 to i64
  br label %352

352:                                              ; preds = %414, %346
  %353 = phi i64 [ 0, %346 ], [ %419, %414 ]
  %354 = phi i8* [ %1, %346 ], [ %417, %414 ]
  %355 = phi i8* [ %2, %346 ], [ %418, %414 ]
  %356 = load i8, i8* %355, align 1
  br i1 %249, label %361, label %357

357:                                              ; preds = %352
  %358 = zext i8 %356 to i64
  %359 = getelementptr inbounds i32, i32* %248, i64 %358
  %360 = load i32, i32* %359, align 4
  br label %367

361:                                              ; preds = %352
  %362 = zext i8 %356 to i32
  %363 = shl nuw nsw i32 %362, 16
  %364 = shl nuw nsw i32 %362, 8
  %365 = or i32 %364, %362
  %366 = or i32 %365, %363
  br label %367

367:                                              ; preds = %361, %357
  %368 = phi i32 [ %360, %357 ], [ %366, %361 ]
  %369 = lshr i32 %368, 16
  %370 = and i32 %369, 255
  %371 = lshr i32 %368, 8
  %372 = trunc i32 %371 to i8
  %373 = and i32 %371, 255
  %374 = trunc i32 %368 to i8
  %375 = and i32 %368, 255
  br i1 %349, label %411, label %376

376:                                              ; preds = %367
  %377 = getelementptr inbounds i8, i8* %5, i64 %353
  %378 = load i8, i8* %377, align 1
  %379 = zext i8 %378 to i32
  %380 = icmp eq i8 %378, -1
  br i1 %380, label %411, label %381

381:                                              ; preds = %376
  %382 = getelementptr inbounds i8, i8* %354, i64 2
  %383 = load i8, i8* %382, align 1
  %384 = zext i8 %383 to i32
  %385 = xor i32 %379, 255
  %386 = mul nuw nsw i32 %385, %384
  %387 = mul nuw nsw i32 %375, %379
  %388 = add nuw nsw i32 %386, %387
  %389 = udiv i32 %388, 255
  %390 = trunc i32 %389 to i8
  store i8 %390, i8* %382, align 1
  %391 = getelementptr inbounds i8, i8* %354, i64 1
  %392 = load i8, i8* %391, align 1
  %393 = zext i8 %392 to i32
  %394 = load i8, i8* %377, align 1
  %395 = zext i8 %394 to i32
  %396 = xor i32 %395, 255
  %397 = mul nuw nsw i32 %396, %393
  %398 = mul nuw nsw i32 %373, %395
  %399 = add nuw nsw i32 %397, %398
  %400 = udiv i32 %399, 255
  %401 = trunc i32 %400 to i8
  store i8 %401, i8* %391, align 1
  %402 = load i8, i8* %354, align 1
  %403 = zext i8 %402 to i32
  %404 = load i8, i8* %377, align 1
  %405 = zext i8 %404 to i32
  %406 = xor i32 %405, 255
  %407 = mul nuw nsw i32 %406, %403
  %408 = mul nuw nsw i32 %370, %405
  %409 = add nuw nsw i32 %407, %408
  %410 = udiv i32 %409, 255
  br label %414

411:                                              ; preds = %376, %367
  %412 = getelementptr inbounds i8, i8* %354, i64 2
  store i8 %374, i8* %412, align 1
  %413 = getelementptr inbounds i8, i8* %354, i64 1
  store i8 %372, i8* %413, align 1
  br label %414

414:                                              ; preds = %411, %381
  %415 = phi i32 [ %369, %411 ], [ %410, %381 ]
  %416 = trunc i32 %415 to i8
  store i8 %416, i8* %354, align 1
  %417 = getelementptr inbounds i8, i8* %354, i64 %350
  %418 = getelementptr inbounds i8, i8* %355, i64 1
  %419 = add nuw nsw i64 %353, 1
  %420 = icmp eq i64 %419, %351
  br i1 %420, label %1818, label %352

421:                                              ; preds = %8
  %422 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 2
  %423 = load i16, i16* %422, align 2
  %424 = icmp eq i16 %423, 264
  br i1 %424, label %425, label %525

425:                                              ; preds = %421
  %426 = icmp eq i8* %5, null
  br i1 %426, label %495, label %427

427:                                              ; preds = %425
  %428 = icmp sgt i32 %4, 0
  br i1 %428, label %429, label %1818

429:                                              ; preds = %427
  %430 = add i32 %4, -1
  %431 = zext i32 %430 to i64
  %432 = add nuw nsw i64 %431, 1
  %433 = icmp ult i64 %432, 16
  br i1 %433, label %434, label %461

434:                                              ; preds = %493, %461, %429
  %435 = phi i32 [ 0, %461 ], [ 0, %429 ], [ %472, %493 ]
  %436 = phi i8* [ %5, %461 ], [ %5, %429 ], [ %473, %493 ]
  %437 = phi i8* [ %1, %461 ], [ %1, %429 ], [ %474, %493 ]
  %438 = sub i32 %4, %435
  %439 = xor i32 %435, -1
  %440 = and i32 %438, 1
  %441 = icmp eq i32 %440, 0
  br i1 %441, label %455, label %442

442:                                              ; preds = %434
  %443 = load i8, i8* %437, align 1
  %444 = zext i8 %443 to i16
  %445 = load i8, i8* %436, align 1
  %446 = zext i8 %445 to i16
  %447 = add i8 %445, %443
  %448 = mul nuw i16 %446, %444
  %449 = udiv i16 %448, 255
  %450 = trunc i16 %449 to i8
  %451 = sub i8 %447, %450
  store i8 %451, i8* %437, align 1
  %452 = getelementptr inbounds i8, i8* %437, i64 1
  %453 = getelementptr inbounds i8, i8* %436, i64 1
  %454 = add nuw nsw i32 %435, 1
  br label %455

455:                                              ; preds = %434, %442
  %456 = phi i32 [ %435, %434 ], [ %454, %442 ]
  %457 = phi i8* [ %436, %434 ], [ %453, %442 ]
  %458 = phi i8* [ %437, %434 ], [ %452, %442 ]
  %459 = sub i32 0, %4
  %460 = icmp eq i32 %439, %459
  br i1 %460, label %1818, label %497

461:                                              ; preds = %429
  %462 = add i32 %4, -1
  %463 = zext i32 %462 to i64
  %464 = add nuw nsw i64 %463, 1
  %465 = getelementptr i8, i8* %1, i64 %464
  %466 = getelementptr i8, i8* %5, i64 %464
  %467 = icmp ugt i8* %466, %1
  %468 = icmp ugt i8* %465, %5
  %469 = and i1 %467, %468
  br i1 %469, label %434, label %470

470:                                              ; preds = %461
  %471 = and i64 %432, 8589934576
  %472 = trunc i64 %471 to i32
  %473 = getelementptr i8, i8* %5, i64 %471
  %474 = getelementptr i8, i8* %1, i64 %471
  br label %475

475:                                              ; preds = %475, %470
  %476 = phi i64 [ 0, %470 ], [ %491, %475 ]
  %477 = getelementptr i8, i8* %5, i64 %476
  %478 = getelementptr i8, i8* %1, i64 %476
  %479 = bitcast i8* %478 to <16 x i8>*
  %480 = load <16 x i8>, <16 x i8>* %479, align 1, !alias.scope !44, !noalias !47
  %481 = zext <16 x i8> %480 to <16 x i16>
  %482 = bitcast i8* %477 to <16 x i8>*
  %483 = load <16 x i8>, <16 x i8>* %482, align 1, !alias.scope !47
  %484 = zext <16 x i8> %483 to <16 x i16>
  %485 = add <16 x i8> %483, %480
  %486 = mul nuw <16 x i16> %484, %481
  %487 = udiv <16 x i16> %486, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %488 = trunc <16 x i16> %487 to <16 x i8>
  %489 = sub <16 x i8> %485, %488
  %490 = bitcast i8* %478 to <16 x i8>*
  store <16 x i8> %489, <16 x i8>* %490, align 1, !alias.scope !44, !noalias !47
  %491 = add i64 %476, 16
  %492 = icmp eq i64 %491, %471
  br i1 %492, label %493, label %475, !llvm.loop !49

493:                                              ; preds = %475
  %494 = icmp eq i64 %432, %471
  br i1 %494, label %1818, label %434

495:                                              ; preds = %425
  %496 = sext i32 %4 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %1, i8 -1, i64 %496, i1 false) #7
  br label %1818

497:                                              ; preds = %455, %497
  %498 = phi i32 [ %523, %497 ], [ %456, %455 ]
  %499 = phi i8* [ %522, %497 ], [ %457, %455 ]
  %500 = phi i8* [ %521, %497 ], [ %458, %455 ]
  %501 = load i8, i8* %500, align 1
  %502 = zext i8 %501 to i16
  %503 = load i8, i8* %499, align 1
  %504 = zext i8 %503 to i16
  %505 = add i8 %503, %501
  %506 = mul nuw i16 %504, %502
  %507 = udiv i16 %506, 255
  %508 = trunc i16 %507 to i8
  %509 = sub i8 %505, %508
  store i8 %509, i8* %500, align 1
  %510 = getelementptr inbounds i8, i8* %500, i64 1
  %511 = getelementptr inbounds i8, i8* %499, i64 1
  %512 = load i8, i8* %510, align 1
  %513 = zext i8 %512 to i16
  %514 = load i8, i8* %511, align 1
  %515 = zext i8 %514 to i16
  %516 = add i8 %514, %512
  %517 = mul nuw i16 %515, %513
  %518 = udiv i16 %517, 255
  %519 = trunc i16 %518 to i8
  %520 = sub i8 %516, %519
  store i8 %520, i8* %510, align 1
  %521 = getelementptr inbounds i8, i8* %500, i64 2
  %522 = getelementptr inbounds i8, i8* %499, i64 2
  %523 = add nuw nsw i32 %498, 2
  %524 = icmp eq i32 %523, %4
  br i1 %524, label %1818, label %497, !llvm.loop !50

525:                                              ; preds = %421
  %526 = and i16 %423, 255
  %527 = icmp eq i16 %526, 8
  %528 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 0
  %529 = load i32, i32* %528, align 8
  br i1 %527, label %530, label %1284

530:                                              ; preds = %525
  %531 = and i32 %529, 8
  %532 = icmp eq i32 %531, 0
  %533 = and i16 %423, 512
  %534 = icmp ne i16 %533, 0
  %535 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 3
  %536 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 3, i32 2, i32 0, i32 0, i32 0
  %537 = load i32*, i32** %536, align 8
  %538 = icmp eq i32* %537, null
  br i1 %532, label %807, label %539

539:                                              ; preds = %530
  br i1 %534, label %540, label %689

540:                                              ; preds = %539
  br i1 %538, label %546, label %541

541:                                              ; preds = %540
  %542 = getelementptr inbounds %"class.CFX_ScanlineCompositor::Palette", %"class.CFX_ScanlineCompositor::Palette"* %535, i64 0, i32 0
  %543 = load i64, i64* %542, align 8, !noalias !51
  %544 = icmp eq i64 %543, 1
  br i1 %544, label %546, label %545, !prof !5

545:                                              ; preds = %541
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !noalias !51, !srcloc !54
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !noalias !51, !srcloc !55
  unreachable

546:                                              ; preds = %540, %541
  %547 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 3, i32 1
  %548 = load i64, i64* %547, align 8, !noalias !51
  %549 = bitcast i32* %537 to i8*
  %550 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 8
  %551 = load i32, i32* %550, align 8
  %552 = icmp eq i64 %548, 0
  br i1 %552, label %553, label %554, !prof !8

553:                                              ; preds = %546
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !6
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !7
  unreachable

554:                                              ; preds = %546
  %555 = load i8, i8* %549, align 1
  %556 = icmp eq i64 %548, 1
  br i1 %556, label %557, label %558, !prof !8

557:                                              ; preds = %554
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !6
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !7
  unreachable

558:                                              ; preds = %554
  %559 = getelementptr inbounds i8, i8* %549, i64 1
  %560 = load i8, i8* %559, align 1
  %561 = icmp eq i32 %551, 0
  br i1 %561, label %562, label %567

562:                                              ; preds = %558
  %563 = icmp sgt i32 %4, 0
  br i1 %563, label %564, label %1818

564:                                              ; preds = %562
  %565 = icmp eq i8* %5, null
  %566 = zext i32 %4 to i64
  br label %637

567:                                              ; preds = %558
  %568 = and i32 %551, -4
  %569 = icmp eq i32 %568, 12
  %570 = icmp sgt i32 %4, 0
  br i1 %570, label %571, label %1818

571:                                              ; preds = %567
  %572 = icmp eq i8* %5, null
  %573 = icmp eq i32 %551, 15
  %574 = zext i32 %4 to i64
  br label %575

575:                                              ; preds = %632, %571
  %576 = phi i64 [ 0, %571 ], [ %635, %632 ]
  %577 = phi i8* [ %1, %571 ], [ %634, %632 ]
  %578 = phi i8* [ %7, %571 ], [ %633, %632 ]
  %579 = trunc i64 %576 to i32
  %580 = add nsw i32 %579, %3
  %581 = sdiv i32 %580, 8
  %582 = sext i32 %581 to i64
  %583 = getelementptr inbounds i8, i8* %2, i64 %582
  %584 = load i8, i8* %583, align 1
  %585 = zext i8 %584 to i32
  %586 = srem i32 %580, 8
  %587 = sub nsw i32 7, %586
  %588 = shl i32 1, %587
  %589 = and i32 %588, %585
  %590 = icmp eq i32 %589, 0
  %591 = select i1 %590, i8 %555, i8 %560
  br i1 %572, label %596, label %592

592:                                              ; preds = %575
  %593 = getelementptr inbounds i8, i8* %5, i64 %576
  %594 = load i8, i8* %593, align 1
  %595 = zext i8 %594 to i32
  switch i8 %594, label %597 [
    i8 -1, label %596
    i8 0, label %632
  ]

596:                                              ; preds = %592, %575
  store i8 %591, i8* %577, align 1
  store i8 -1, i8* %578, align 1
  br label %632

597:                                              ; preds = %592
  %598 = load i8, i8* %578, align 1
  %599 = zext i8 %598 to i32
  %600 = add nuw nsw i32 %599, %595
  %601 = mul nuw nsw i32 %599, %595
  %602 = trunc i32 %601 to i16
  %603 = udiv i16 %602, 255
  %604 = zext i16 %603 to i32
  %605 = sub nsw i32 %600, %604
  %606 = trunc i32 %605 to i8
  store i8 %606, i8* %578, align 1
  %607 = zext i8 %594 to i16
  %608 = mul nuw i16 %607, 255
  %609 = trunc i32 %605 to i16
  %610 = and i16 %609, 255
  %611 = udiv i16 %608, %610
  %612 = zext i16 %611 to i32
  %613 = load i8, i8* %577, align 1
  br i1 %569, label %614, label %617

614:                                              ; preds = %597
  %615 = select i1 %573, i8 %591, i8 %613
  %616 = zext i8 %613 to i32
  br label %622

617:                                              ; preds = %597
  %618 = zext i8 %613 to i32
  %619 = zext i8 %591 to i32
  %620 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %551, i32 %618, i32 %619) #7
  %621 = trunc i32 %620 to i8
  br label %622

622:                                              ; preds = %617, %614
  %623 = phi i32 [ %618, %617 ], [ %616, %614 ]
  %624 = phi i8 [ %621, %617 ], [ %615, %614 ]
  %625 = sub nsw i32 255, %612
  %626 = mul nsw i32 %625, %623
  %627 = zext i8 %624 to i32
  %628 = mul nuw nsw i32 %627, %612
  %629 = add nsw i32 %628, %626
  %630 = sdiv i32 %629, 255
  %631 = trunc i32 %630 to i8
  store i8 %631, i8* %577, align 1
  br label %632

632:                                              ; preds = %622, %596, %592
  %633 = getelementptr inbounds i8, i8* %578, i64 1
  %634 = getelementptr inbounds i8, i8* %577, i64 1
  %635 = add nuw nsw i64 %576, 1
  %636 = icmp eq i64 %635, %574
  br i1 %636, label %1818, label %575

637:                                              ; preds = %684, %564
  %638 = phi i64 [ 0, %564 ], [ %687, %684 ]
  %639 = phi i8* [ %1, %564 ], [ %686, %684 ]
  %640 = phi i8* [ %7, %564 ], [ %685, %684 ]
  %641 = trunc i64 %638 to i32
  %642 = add nsw i32 %641, %3
  %643 = sdiv i32 %642, 8
  %644 = sext i32 %643 to i64
  %645 = getelementptr inbounds i8, i8* %2, i64 %644
  %646 = load i8, i8* %645, align 1
  %647 = zext i8 %646 to i32
  %648 = srem i32 %642, 8
  %649 = sub nsw i32 7, %648
  %650 = shl i32 1, %649
  %651 = and i32 %650, %647
  %652 = icmp eq i32 %651, 0
  %653 = select i1 %652, i8 %555, i8 %560
  br i1 %565, label %658, label %654

654:                                              ; preds = %637
  %655 = getelementptr inbounds i8, i8* %5, i64 %638
  %656 = load i8, i8* %655, align 1
  %657 = zext i8 %656 to i32
  switch i8 %656, label %659 [
    i8 -1, label %658
    i8 0, label %684
  ]

658:                                              ; preds = %654, %637
  store i8 %653, i8* %639, align 1
  store i8 -1, i8* %640, align 1
  br label %684

659:                                              ; preds = %654
  %660 = load i8, i8* %640, align 1
  %661 = zext i8 %660 to i32
  %662 = add nuw nsw i32 %661, %657
  %663 = mul nuw nsw i32 %661, %657
  %664 = trunc i32 %663 to i16
  %665 = udiv i16 %664, 255
  %666 = zext i16 %665 to i32
  %667 = sub nsw i32 %662, %666
  %668 = trunc i32 %667 to i8
  store i8 %668, i8* %640, align 1
  %669 = zext i8 %656 to i16
  %670 = mul nuw i16 %669, 255
  %671 = trunc i32 %667 to i16
  %672 = and i16 %671, 255
  %673 = udiv i16 %670, %672
  %674 = zext i16 %673 to i32
  %675 = load i8, i8* %639, align 1
  %676 = zext i8 %675 to i32
  %677 = sub nsw i32 255, %674
  %678 = mul nsw i32 %677, %676
  %679 = zext i8 %653 to i32
  %680 = mul nuw nsw i32 %674, %679
  %681 = add nsw i32 %678, %680
  %682 = sdiv i32 %681, 255
  %683 = trunc i32 %682 to i8
  store i8 %683, i8* %639, align 1
  br label %684

684:                                              ; preds = %659, %658, %654
  %685 = getelementptr inbounds i8, i8* %640, i64 1
  %686 = getelementptr inbounds i8, i8* %639, i64 1
  %687 = add nuw nsw i64 %638, 1
  %688 = icmp eq i64 %687, %566
  br i1 %688, label %1818, label %637

689:                                              ; preds = %539
  br i1 %538, label %695, label %690

690:                                              ; preds = %689
  %691 = getelementptr inbounds %"class.CFX_ScanlineCompositor::Palette", %"class.CFX_ScanlineCompositor::Palette"* %535, i64 0, i32 0
  %692 = load i64, i64* %691, align 8, !noalias !56
  %693 = icmp eq i64 %692, 1
  br i1 %693, label %695, label %694, !prof !5

694:                                              ; preds = %690
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !noalias !56, !srcloc !54
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !noalias !56, !srcloc !55
  unreachable

695:                                              ; preds = %689, %690
  %696 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 3, i32 1
  %697 = load i64, i64* %696, align 8, !noalias !56
  %698 = bitcast i32* %537 to i8*
  %699 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 8
  %700 = load i32, i32* %699, align 8
  %701 = icmp eq i64 %697, 0
  br i1 %701, label %702, label %703, !prof !8

702:                                              ; preds = %695
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !6
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !7
  unreachable

703:                                              ; preds = %695
  %704 = load i8, i8* %698, align 1
  %705 = icmp eq i64 %697, 1
  br i1 %705, label %706, label %707, !prof !8

706:                                              ; preds = %703
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !6
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !7
  unreachable

707:                                              ; preds = %703
  %708 = getelementptr inbounds i8, i8* %698, i64 1
  %709 = load i8, i8* %708, align 1
  %710 = icmp eq i32 %700, 0
  br i1 %710, label %711, label %716

711:                                              ; preds = %707
  %712 = icmp sgt i32 %4, 0
  br i1 %712, label %713, label %1818

713:                                              ; preds = %711
  %714 = icmp eq i8* %5, null
  %715 = zext i32 %4 to i64
  br label %771

716:                                              ; preds = %707
  %717 = and i32 %700, -4
  %718 = icmp eq i32 %717, 12
  %719 = icmp sgt i32 %4, 0
  br i1 %719, label %720, label %1818

720:                                              ; preds = %716
  %721 = icmp eq i32 %700, 15
  %722 = icmp eq i8* %5, null
  %723 = zext i32 %4 to i64
  br label %724

724:                                              ; preds = %766, %720
  %725 = phi i64 [ 0, %720 ], [ %769, %766 ]
  %726 = phi i8* [ %1, %720 ], [ %768, %766 ]
  %727 = trunc i64 %725 to i32
  %728 = add nsw i32 %727, %3
  %729 = sdiv i32 %728, 8
  %730 = sext i32 %729 to i64
  %731 = getelementptr inbounds i8, i8* %2, i64 %730
  %732 = load i8, i8* %731, align 1
  %733 = zext i8 %732 to i32
  %734 = srem i32 %728, 8
  %735 = sub nsw i32 7, %734
  %736 = shl i32 1, %735
  %737 = and i32 %736, %733
  %738 = icmp eq i32 %737, 0
  %739 = select i1 %738, i8 %704, i8 %709
  br i1 %718, label %740, label %743

740:                                              ; preds = %724
  br i1 %721, label %749, label %741

741:                                              ; preds = %740
  %742 = load i8, i8* %726, align 1
  br label %749

743:                                              ; preds = %724
  %744 = load i8, i8* %726, align 1
  %745 = zext i8 %744 to i32
  %746 = zext i8 %739 to i32
  %747 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %700, i32 %745, i32 %746) #7
  %748 = trunc i32 %747 to i8
  br label %749

749:                                              ; preds = %743, %741, %740
  %750 = phi i8 [ %748, %743 ], [ %742, %741 ], [ %739, %740 ]
  br i1 %722, label %766, label %751

751:                                              ; preds = %749
  %752 = getelementptr inbounds i8, i8* %5, i64 %725
  %753 = load i8, i8* %752, align 1
  %754 = zext i8 %753 to i32
  %755 = icmp eq i8 %753, -1
  br i1 %755, label %766, label %756

756:                                              ; preds = %751
  %757 = load i8, i8* %726, align 1
  %758 = zext i8 %757 to i32
  %759 = xor i32 %754, 255
  %760 = mul nuw nsw i32 %759, %758
  %761 = zext i8 %750 to i32
  %762 = mul nuw nsw i32 %754, %761
  %763 = add nuw nsw i32 %760, %762
  %764 = udiv i32 %763, 255
  %765 = trunc i32 %764 to i8
  br label %766

766:                                              ; preds = %756, %751, %749
  %767 = phi i8 [ %765, %756 ], [ %750, %751 ], [ %750, %749 ]
  store i8 %767, i8* %726, align 1
  %768 = getelementptr inbounds i8, i8* %726, i64 1
  %769 = add nuw nsw i64 %725, 1
  %770 = icmp eq i64 %769, %723
  br i1 %770, label %1818, label %724

771:                                              ; preds = %802, %713
  %772 = phi i64 [ 0, %713 ], [ %805, %802 ]
  %773 = phi i8* [ %1, %713 ], [ %804, %802 ]
  %774 = trunc i64 %772 to i32
  %775 = add nsw i32 %774, %3
  %776 = sdiv i32 %775, 8
  %777 = sext i32 %776 to i64
  %778 = getelementptr inbounds i8, i8* %2, i64 %777
  %779 = load i8, i8* %778, align 1
  %780 = zext i8 %779 to i32
  %781 = srem i32 %775, 8
  %782 = sub nsw i32 7, %781
  %783 = shl i32 1, %782
  %784 = and i32 %783, %780
  %785 = icmp eq i32 %784, 0
  %786 = select i1 %785, i8 %704, i8 %709
  br i1 %714, label %802, label %787

787:                                              ; preds = %771
  %788 = getelementptr inbounds i8, i8* %5, i64 %772
  %789 = load i8, i8* %788, align 1
  %790 = zext i8 %789 to i32
  %791 = icmp eq i8 %789, -1
  br i1 %791, label %802, label %792

792:                                              ; preds = %787
  %793 = load i8, i8* %773, align 1
  %794 = zext i8 %793 to i32
  %795 = xor i32 %790, 255
  %796 = mul nuw nsw i32 %795, %794
  %797 = zext i8 %786 to i32
  %798 = mul nuw nsw i32 %790, %797
  %799 = add nuw nsw i32 %796, %798
  %800 = udiv i32 %799, 255
  %801 = trunc i32 %800 to i8
  br label %802

802:                                              ; preds = %792, %787, %771
  %803 = phi i8 [ %801, %792 ], [ %786, %787 ], [ %786, %771 ]
  store i8 %803, i8* %773, align 1
  %804 = getelementptr inbounds i8, i8* %773, i64 1
  %805 = add nuw nsw i64 %772, 1
  %806 = icmp eq i64 %805, %715
  br i1 %806, label %1818, label %771

807:                                              ; preds = %530
  br i1 %534, label %808, label %1084

808:                                              ; preds = %807
  br i1 %538, label %814, label %809

809:                                              ; preds = %808
  %810 = getelementptr inbounds %"class.CFX_ScanlineCompositor::Palette", %"class.CFX_ScanlineCompositor::Palette"* %535, i64 0, i32 0
  %811 = load i64, i64* %810, align 8, !noalias !59
  %812 = icmp eq i64 %811, 1
  br i1 %812, label %814, label %813, !prof !5

813:                                              ; preds = %809
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !noalias !59, !srcloc !54
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !noalias !59, !srcloc !55
  unreachable

814:                                              ; preds = %808, %809
  %815 = bitcast i32* %537 to i8*
  %816 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 8
  %817 = load i32, i32* %816, align 8
  %818 = icmp eq i8* %6, null
  %819 = icmp ne i32 %817, 0
  br i1 %818, label %970, label %820

820:                                              ; preds = %814
  br i1 %819, label %826, label %821

821:                                              ; preds = %820
  %822 = icmp sgt i32 %4, 0
  br i1 %822, label %823, label %1818

823:                                              ; preds = %821
  %824 = icmp eq i8* %5, null
  %825 = zext i32 %4 to i64
  br label %907

826:                                              ; preds = %820
  %827 = and i32 %817, -4
  %828 = icmp eq i32 %827, 12
  %829 = icmp sgt i32 %4, 0
  br i1 %829, label %830, label %1818

830:                                              ; preds = %826
  %831 = icmp eq i8* %5, null
  %832 = icmp eq i32 %817, 15
  %833 = zext i32 %4 to i64
  br label %834

834:                                              ; preds = %901, %830
  %835 = phi i64 [ 0, %830 ], [ %905, %901 ]
  %836 = phi i8* [ %1, %830 ], [ %903, %901 ]
  %837 = phi i8* [ %2, %830 ], [ %844, %901 ]
  %838 = phi i8* [ %7, %830 ], [ %902, %901 ]
  %839 = phi i8* [ %6, %830 ], [ %904, %901 ]
  %840 = load i8, i8* %837, align 1
  %841 = zext i8 %840 to i64
  %842 = getelementptr inbounds i8, i8* %815, i64 %841
  %843 = load i8, i8* %842, align 1
  %844 = getelementptr inbounds i8, i8* %837, i64 1
  %845 = load i8, i8* %838, align 1
  %846 = zext i8 %845 to i32
  %847 = icmp eq i8 %845, 0
  %848 = load i8, i8* %839, align 1
  br i1 %831, label %857, label %849

849:                                              ; preds = %834
  %850 = getelementptr inbounds i8, i8* %5, i64 %835
  %851 = load i8, i8* %850, align 1
  %852 = zext i8 %851 to i16
  %853 = zext i8 %848 to i16
  %854 = mul nuw i16 %852, %853
  %855 = udiv i16 %854, 255
  %856 = zext i16 %855 to i32
  br label %859

857:                                              ; preds = %834
  %858 = zext i8 %848 to i32
  br label %859

859:                                              ; preds = %857, %849
  %860 = phi i32 [ %856, %849 ], [ %858, %857 ]
  br i1 %847, label %861, label %865

861:                                              ; preds = %859
  %862 = icmp eq i32 %860, 0
  br i1 %862, label %901, label %863

863:                                              ; preds = %861
  store i8 %843, i8* %836, align 1
  %864 = trunc i32 %860 to i8
  store i8 %864, i8* %838, align 1
  br label %901

865:                                              ; preds = %859
  %866 = and i32 %860, 255
  %867 = icmp eq i32 %866, 0
  br i1 %867, label %901, label %868

868:                                              ; preds = %865
  %869 = add nuw nsw i32 %860, %846
  %870 = mul nuw nsw i32 %866, %846
  %871 = trunc i32 %870 to i16
  %872 = udiv i16 %871, 255
  %873 = zext i16 %872 to i32
  %874 = sub nsw i32 %869, %873
  %875 = trunc i32 %874 to i8
  store i8 %875, i8* %838, align 1
  %876 = trunc i32 %866 to i16
  %877 = mul nuw i16 %876, 255
  %878 = trunc i32 %874 to i16
  %879 = and i16 %878, 255
  %880 = udiv i16 %877, %879
  %881 = zext i16 %880 to i32
  %882 = load i8, i8* %836, align 1
  br i1 %828, label %883, label %886

883:                                              ; preds = %868
  %884 = select i1 %832, i8 %843, i8 %882
  %885 = zext i8 %882 to i32
  br label %891

886:                                              ; preds = %868
  %887 = zext i8 %882 to i32
  %888 = zext i8 %843 to i32
  %889 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %817, i32 %887, i32 %888) #7
  %890 = trunc i32 %889 to i8
  br label %891

891:                                              ; preds = %886, %883
  %892 = phi i32 [ %887, %886 ], [ %885, %883 ]
  %893 = phi i8 [ %890, %886 ], [ %884, %883 ]
  %894 = sub nsw i32 255, %881
  %895 = mul nsw i32 %894, %892
  %896 = zext i8 %893 to i32
  %897 = mul nuw nsw i32 %896, %881
  %898 = add nsw i32 %897, %895
  %899 = sdiv i32 %898, 255
  %900 = trunc i32 %899 to i8
  store i8 %900, i8* %836, align 1
  br label %901

901:                                              ; preds = %891, %865, %863, %861
  %902 = getelementptr inbounds i8, i8* %838, i64 1
  %903 = getelementptr inbounds i8, i8* %836, i64 1
  %904 = getelementptr inbounds i8, i8* %839, i64 1
  %905 = add nuw nsw i64 %835, 1
  %906 = icmp eq i64 %905, %833
  br i1 %906, label %1818, label %834

907:                                              ; preds = %964, %823
  %908 = phi i64 [ 0, %823 ], [ %968, %964 ]
  %909 = phi i8* [ %1, %823 ], [ %966, %964 ]
  %910 = phi i8* [ %2, %823 ], [ %917, %964 ]
  %911 = phi i8* [ %7, %823 ], [ %965, %964 ]
  %912 = phi i8* [ %6, %823 ], [ %967, %964 ]
  %913 = load i8, i8* %910, align 1
  %914 = zext i8 %913 to i64
  %915 = getelementptr inbounds i8, i8* %815, i64 %914
  %916 = load i8, i8* %915, align 1
  %917 = getelementptr inbounds i8, i8* %910, i64 1
  %918 = load i8, i8* %911, align 1
  %919 = zext i8 %918 to i32
  %920 = icmp eq i8 %918, 0
  %921 = load i8, i8* %912, align 1
  br i1 %824, label %930, label %922

922:                                              ; preds = %907
  %923 = getelementptr inbounds i8, i8* %5, i64 %908
  %924 = load i8, i8* %923, align 1
  %925 = zext i8 %924 to i16
  %926 = zext i8 %921 to i16
  %927 = mul nuw i16 %925, %926
  %928 = udiv i16 %927, 255
  %929 = zext i16 %928 to i32
  br label %932

930:                                              ; preds = %907
  %931 = zext i8 %921 to i32
  br label %932

932:                                              ; preds = %930, %922
  %933 = phi i32 [ %929, %922 ], [ %931, %930 ]
  br i1 %920, label %934, label %938

934:                                              ; preds = %932
  %935 = icmp eq i32 %933, 0
  br i1 %935, label %964, label %936

936:                                              ; preds = %934
  store i8 %916, i8* %909, align 1
  %937 = trunc i32 %933 to i8
  store i8 %937, i8* %911, align 1
  br label %964

938:                                              ; preds = %932
  %939 = and i32 %933, 255
  %940 = icmp eq i32 %939, 0
  br i1 %940, label %964, label %941

941:                                              ; preds = %938
  %942 = add nuw nsw i32 %933, %919
  %943 = mul nuw nsw i32 %939, %919
  %944 = trunc i32 %943 to i16
  %945 = udiv i16 %944, 255
  %946 = zext i16 %945 to i32
  %947 = sub nsw i32 %942, %946
  %948 = trunc i32 %947 to i8
  store i8 %948, i8* %911, align 1
  %949 = trunc i32 %939 to i16
  %950 = mul nuw i16 %949, 255
  %951 = trunc i32 %947 to i16
  %952 = and i16 %951, 255
  %953 = udiv i16 %950, %952
  %954 = zext i16 %953 to i32
  %955 = load i8, i8* %909, align 1
  %956 = zext i8 %955 to i32
  %957 = sub nsw i32 255, %954
  %958 = mul nsw i32 %957, %956
  %959 = zext i8 %916 to i32
  %960 = mul nuw nsw i32 %954, %959
  %961 = add nsw i32 %958, %960
  %962 = sdiv i32 %961, 255
  %963 = trunc i32 %962 to i8
  store i8 %963, i8* %909, align 1
  br label %964

964:                                              ; preds = %941, %938, %936, %934
  %965 = getelementptr inbounds i8, i8* %911, i64 1
  %966 = getelementptr inbounds i8, i8* %909, i64 1
  %967 = getelementptr inbounds i8, i8* %912, i64 1
  %968 = add nuw nsw i64 %908, 1
  %969 = icmp eq i64 %968, %825
  br i1 %969, label %1818, label %907

970:                                              ; preds = %814
  br i1 %819, label %976, label %971

971:                                              ; preds = %970
  %972 = icmp sgt i32 %4, 0
  br i1 %972, label %973, label %1818

973:                                              ; preds = %971
  %974 = icmp eq i8* %5, null
  %975 = zext i32 %4 to i64
  br label %1039

976:                                              ; preds = %970
  %977 = and i32 %817, -4
  %978 = icmp eq i32 %977, 12
  %979 = icmp sgt i32 %4, 0
  br i1 %979, label %980, label %1818

980:                                              ; preds = %976
  %981 = icmp eq i8* %5, null
  %982 = icmp eq i32 %817, 15
  %983 = zext i32 %4 to i64
  br label %984

984:                                              ; preds = %1034, %980
  %985 = phi i64 [ 0, %980 ], [ %1037, %1034 ]
  %986 = phi i8* [ %1, %980 ], [ %1036, %1034 ]
  %987 = phi i8* [ %2, %980 ], [ %993, %1034 ]
  %988 = phi i8* [ %7, %980 ], [ %1035, %1034 ]
  %989 = load i8, i8* %987, align 1
  %990 = zext i8 %989 to i64
  %991 = getelementptr inbounds i8, i8* %815, i64 %990
  %992 = load i8, i8* %991, align 1
  %993 = getelementptr inbounds i8, i8* %987, i64 1
  br i1 %981, label %998, label %994

994:                                              ; preds = %984
  %995 = getelementptr inbounds i8, i8* %5, i64 %985
  %996 = load i8, i8* %995, align 1
  %997 = zext i8 %996 to i32
  switch i8 %996, label %999 [
    i8 -1, label %998
    i8 0, label %1034
  ]

998:                                              ; preds = %994, %984
  store i8 %992, i8* %986, align 1
  store i8 -1, i8* %988, align 1
  br label %1034

999:                                              ; preds = %994
  %1000 = load i8, i8* %988, align 1
  %1001 = zext i8 %1000 to i32
  %1002 = add nuw nsw i32 %1001, %997
  %1003 = mul nuw nsw i32 %1001, %997
  %1004 = trunc i32 %1003 to i16
  %1005 = udiv i16 %1004, 255
  %1006 = zext i16 %1005 to i32
  %1007 = sub nsw i32 %1002, %1006
  %1008 = trunc i32 %1007 to i8
  store i8 %1008, i8* %988, align 1
  %1009 = zext i8 %996 to i16
  %1010 = mul nuw i16 %1009, 255
  %1011 = trunc i32 %1007 to i16
  %1012 = and i16 %1011, 255
  %1013 = udiv i16 %1010, %1012
  %1014 = zext i16 %1013 to i32
  %1015 = load i8, i8* %986, align 1
  br i1 %978, label %1016, label %1019

1016:                                             ; preds = %999
  %1017 = select i1 %982, i8 %992, i8 %1015
  %1018 = zext i8 %1015 to i32
  br label %1024

1019:                                             ; preds = %999
  %1020 = zext i8 %1015 to i32
  %1021 = zext i8 %992 to i32
  %1022 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %817, i32 %1020, i32 %1021) #7
  %1023 = trunc i32 %1022 to i8
  br label %1024

1024:                                             ; preds = %1019, %1016
  %1025 = phi i32 [ %1020, %1019 ], [ %1018, %1016 ]
  %1026 = phi i8 [ %1023, %1019 ], [ %1017, %1016 ]
  %1027 = sub nsw i32 255, %1014
  %1028 = mul nsw i32 %1027, %1025
  %1029 = zext i8 %1026 to i32
  %1030 = mul nuw nsw i32 %1029, %1014
  %1031 = add nsw i32 %1030, %1028
  %1032 = sdiv i32 %1031, 255
  %1033 = trunc i32 %1032 to i8
  store i8 %1033, i8* %986, align 1
  br label %1034

1034:                                             ; preds = %1024, %998, %994
  %1035 = getelementptr inbounds i8, i8* %988, i64 1
  %1036 = getelementptr inbounds i8, i8* %986, i64 1
  %1037 = add nuw nsw i64 %985, 1
  %1038 = icmp eq i64 %1037, %983
  br i1 %1038, label %1818, label %984

1039:                                             ; preds = %1079, %973
  %1040 = phi i64 [ 0, %973 ], [ %1082, %1079 ]
  %1041 = phi i8* [ %1, %973 ], [ %1081, %1079 ]
  %1042 = phi i8* [ %2, %973 ], [ %1048, %1079 ]
  %1043 = phi i8* [ %7, %973 ], [ %1080, %1079 ]
  %1044 = load i8, i8* %1042, align 1
  %1045 = zext i8 %1044 to i64
  %1046 = getelementptr inbounds i8, i8* %815, i64 %1045
  %1047 = load i8, i8* %1046, align 1
  %1048 = getelementptr inbounds i8, i8* %1042, i64 1
  br i1 %974, label %1053, label %1049

1049:                                             ; preds = %1039
  %1050 = getelementptr inbounds i8, i8* %5, i64 %1040
  %1051 = load i8, i8* %1050, align 1
  %1052 = zext i8 %1051 to i32
  switch i8 %1051, label %1054 [
    i8 -1, label %1053
    i8 0, label %1079
  ]

1053:                                             ; preds = %1049, %1039
  store i8 %1047, i8* %1041, align 1
  store i8 -1, i8* %1043, align 1
  br label %1079

1054:                                             ; preds = %1049
  %1055 = load i8, i8* %1043, align 1
  %1056 = zext i8 %1055 to i32
  %1057 = add nuw nsw i32 %1056, %1052
  %1058 = mul nuw nsw i32 %1056, %1052
  %1059 = trunc i32 %1058 to i16
  %1060 = udiv i16 %1059, 255
  %1061 = zext i16 %1060 to i32
  %1062 = sub nsw i32 %1057, %1061
  %1063 = trunc i32 %1062 to i8
  store i8 %1063, i8* %1043, align 1
  %1064 = zext i8 %1051 to i16
  %1065 = mul nuw i16 %1064, 255
  %1066 = trunc i32 %1062 to i16
  %1067 = and i16 %1066, 255
  %1068 = udiv i16 %1065, %1067
  %1069 = zext i16 %1068 to i32
  %1070 = load i8, i8* %1041, align 1
  %1071 = zext i8 %1070 to i32
  %1072 = sub nsw i32 255, %1069
  %1073 = mul nsw i32 %1072, %1071
  %1074 = zext i8 %1047 to i32
  %1075 = mul nuw nsw i32 %1069, %1074
  %1076 = add nsw i32 %1073, %1075
  %1077 = sdiv i32 %1076, 255
  %1078 = trunc i32 %1077 to i8
  store i8 %1078, i8* %1041, align 1
  br label %1079

1079:                                             ; preds = %1054, %1053, %1049
  %1080 = getelementptr inbounds i8, i8* %1043, i64 1
  %1081 = getelementptr inbounds i8, i8* %1041, i64 1
  %1082 = add nuw nsw i64 %1040, 1
  %1083 = icmp eq i64 %1082, %975
  br i1 %1083, label %1818, label %1039

1084:                                             ; preds = %807
  br i1 %538, label %1090, label %1085

1085:                                             ; preds = %1084
  %1086 = getelementptr inbounds %"class.CFX_ScanlineCompositor::Palette", %"class.CFX_ScanlineCompositor::Palette"* %535, i64 0, i32 0
  %1087 = load i64, i64* %1086, align 8, !noalias !62
  %1088 = icmp eq i64 %1087, 1
  br i1 %1088, label %1090, label %1089, !prof !5

1089:                                             ; preds = %1085
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !noalias !62, !srcloc !54
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !noalias !62, !srcloc !55
  unreachable

1090:                                             ; preds = %1084, %1085
  %1091 = bitcast i32* %537 to i8*
  %1092 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 8
  %1093 = load i32, i32* %1092, align 8
  %1094 = icmp eq i8* %6, null
  %1095 = icmp ne i32 %1093, 0
  br i1 %1094, label %1201, label %1096

1096:                                             ; preds = %1090
  br i1 %1095, label %1102, label %1097

1097:                                             ; preds = %1096
  %1098 = icmp sgt i32 %4, 0
  br i1 %1098, label %1099, label %1818

1099:                                             ; preds = %1097
  %1100 = icmp eq i8* %5, null
  %1101 = zext i32 %4 to i64
  br label %1161

1102:                                             ; preds = %1096
  %1103 = and i32 %1093, -4
  %1104 = icmp eq i32 %1103, 12
  %1105 = icmp sgt i32 %4, 0
  br i1 %1105, label %1106, label %1818

1106:                                             ; preds = %1102
  %1107 = icmp eq i8* %5, null
  %1108 = icmp eq i32 %1093, 15
  %1109 = zext i32 %4 to i64
  br label %1110

1110:                                             ; preds = %1155, %1106
  %1111 = phi i64 [ 0, %1106 ], [ %1159, %1155 ]
  %1112 = phi i8* [ %6, %1106 ], [ %1119, %1155 ]
  %1113 = phi i8* [ %1, %1106 ], [ %1157, %1155 ]
  %1114 = phi i8* [ %2, %1106 ], [ %1158, %1155 ]
  %1115 = load i8, i8* %1114, align 1
  %1116 = zext i8 %1115 to i64
  %1117 = getelementptr inbounds i8, i8* %1091, i64 %1116
  %1118 = load i8, i8* %1117, align 1
  %1119 = getelementptr inbounds i8, i8* %1112, i64 1
  %1120 = load i8, i8* %1112, align 1
  br i1 %1107, label %1129, label %1121

1121:                                             ; preds = %1110
  %1122 = getelementptr inbounds i8, i8* %5, i64 %1111
  %1123 = load i8, i8* %1122, align 1
  %1124 = zext i8 %1123 to i16
  %1125 = zext i8 %1120 to i16
  %1126 = mul nuw i16 %1124, %1125
  %1127 = udiv i16 %1126, 255
  %1128 = zext i16 %1127 to i32
  br label %1131

1129:                                             ; preds = %1110
  %1130 = zext i8 %1120 to i32
  br label %1131

1131:                                             ; preds = %1129, %1121
  %1132 = phi i32 [ %1128, %1121 ], [ %1130, %1129 ]
  br i1 %1104, label %1133, label %1136

1133:                                             ; preds = %1131
  br i1 %1108, label %1142, label %1134

1134:                                             ; preds = %1133
  %1135 = load i8, i8* %1113, align 1
  br label %1142

1136:                                             ; preds = %1131
  %1137 = load i8, i8* %1113, align 1
  %1138 = zext i8 %1137 to i32
  %1139 = zext i8 %1118 to i32
  %1140 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %1093, i32 %1138, i32 %1139) #7
  %1141 = trunc i32 %1140 to i8
  br label %1142

1142:                                             ; preds = %1136, %1134, %1133
  %1143 = phi i8 [ %1141, %1136 ], [ %1135, %1134 ], [ %1118, %1133 ]
  %1144 = icmp eq i32 %1132, 0
  br i1 %1144, label %1155, label %1145

1145:                                             ; preds = %1142
  %1146 = load i8, i8* %1113, align 1
  %1147 = zext i8 %1146 to i32
  %1148 = sub nuw nsw i32 255, %1132
  %1149 = mul nsw i32 %1148, %1147
  %1150 = zext i8 %1143 to i32
  %1151 = mul nuw nsw i32 %1132, %1150
  %1152 = add nuw nsw i32 %1149, %1151
  %1153 = sdiv i32 %1152, 255
  %1154 = trunc i32 %1153 to i8
  br label %1155

1155:                                             ; preds = %1145, %1142
  %1156 = phi i8 [ %1154, %1145 ], [ %1143, %1142 ]
  store i8 %1156, i8* %1113, align 1
  %1157 = getelementptr inbounds i8, i8* %1113, i64 1
  %1158 = getelementptr inbounds i8, i8* %1114, i64 1
  %1159 = add nuw nsw i64 %1111, 1
  %1160 = icmp eq i64 %1159, %1109
  br i1 %1160, label %1818, label %1110

1161:                                             ; preds = %1195, %1099
  %1162 = phi i64 [ 0, %1099 ], [ %1199, %1195 ]
  %1163 = phi i8* [ %6, %1099 ], [ %1170, %1195 ]
  %1164 = phi i8* [ %1, %1099 ], [ %1197, %1195 ]
  %1165 = phi i8* [ %2, %1099 ], [ %1198, %1195 ]
  %1166 = load i8, i8* %1165, align 1
  %1167 = zext i8 %1166 to i64
  %1168 = getelementptr inbounds i8, i8* %1091, i64 %1167
  %1169 = load i8, i8* %1168, align 1
  %1170 = getelementptr inbounds i8, i8* %1163, i64 1
  %1171 = load i8, i8* %1163, align 1
  br i1 %1100, label %1180, label %1172

1172:                                             ; preds = %1161
  %1173 = getelementptr inbounds i8, i8* %5, i64 %1162
  %1174 = load i8, i8* %1173, align 1
  %1175 = zext i8 %1174 to i16
  %1176 = zext i8 %1171 to i16
  %1177 = mul nuw i16 %1175, %1176
  %1178 = udiv i16 %1177, 255
  %1179 = zext i16 %1178 to i32
  br label %1182

1180:                                             ; preds = %1161
  %1181 = zext i8 %1171 to i32
  br label %1182

1182:                                             ; preds = %1180, %1172
  %1183 = phi i32 [ %1179, %1172 ], [ %1181, %1180 ]
  %1184 = icmp eq i32 %1183, 0
  br i1 %1184, label %1195, label %1185

1185:                                             ; preds = %1182
  %1186 = load i8, i8* %1164, align 1
  %1187 = zext i8 %1186 to i32
  %1188 = sub nuw nsw i32 255, %1183
  %1189 = mul nsw i32 %1188, %1187
  %1190 = zext i8 %1169 to i32
  %1191 = mul nuw nsw i32 %1183, %1190
  %1192 = add nuw nsw i32 %1189, %1191
  %1193 = sdiv i32 %1192, 255
  %1194 = trunc i32 %1193 to i8
  br label %1195

1195:                                             ; preds = %1185, %1182
  %1196 = phi i8 [ %1194, %1185 ], [ %1169, %1182 ]
  store i8 %1196, i8* %1164, align 1
  %1197 = getelementptr inbounds i8, i8* %1164, i64 1
  %1198 = getelementptr inbounds i8, i8* %1165, i64 1
  %1199 = add nuw nsw i64 %1162, 1
  %1200 = icmp eq i64 %1199, %1101
  br i1 %1200, label %1818, label %1161

1201:                                             ; preds = %1090
  br i1 %1095, label %1207, label %1202

1202:                                             ; preds = %1201
  %1203 = icmp sgt i32 %4, 0
  br i1 %1203, label %1204, label %1818

1204:                                             ; preds = %1202
  %1205 = icmp eq i8* %5, null
  %1206 = zext i32 %4 to i64
  br label %1255

1207:                                             ; preds = %1201
  %1208 = and i32 %1093, -4
  %1209 = icmp eq i32 %1208, 12
  %1210 = icmp sgt i32 %4, 0
  br i1 %1210, label %1211, label %1818

1211:                                             ; preds = %1207
  %1212 = icmp eq i32 %1093, 15
  %1213 = icmp eq i8* %5, null
  %1214 = zext i32 %4 to i64
  br label %1215

1215:                                             ; preds = %1249, %1211
  %1216 = phi i64 [ 0, %1211 ], [ %1253, %1249 ]
  %1217 = phi i8* [ %1, %1211 ], [ %1251, %1249 ]
  %1218 = phi i8* [ %2, %1211 ], [ %1252, %1249 ]
  %1219 = load i8, i8* %1218, align 1
  %1220 = zext i8 %1219 to i64
  %1221 = getelementptr inbounds i8, i8* %1091, i64 %1220
  %1222 = load i8, i8* %1221, align 1
  br i1 %1209, label %1223, label %1226

1223:                                             ; preds = %1215
  br i1 %1212, label %1232, label %1224

1224:                                             ; preds = %1223
  %1225 = load i8, i8* %1217, align 1
  br label %1232

1226:                                             ; preds = %1215
  %1227 = load i8, i8* %1217, align 1
  %1228 = zext i8 %1227 to i32
  %1229 = zext i8 %1222 to i32
  %1230 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %1093, i32 %1228, i32 %1229) #7
  %1231 = trunc i32 %1230 to i8
  br label %1232

1232:                                             ; preds = %1226, %1224, %1223
  %1233 = phi i8 [ %1231, %1226 ], [ %1225, %1224 ], [ %1222, %1223 ]
  br i1 %1213, label %1249, label %1234

1234:                                             ; preds = %1232
  %1235 = getelementptr inbounds i8, i8* %5, i64 %1216
  %1236 = load i8, i8* %1235, align 1
  %1237 = zext i8 %1236 to i32
  %1238 = icmp eq i8 %1236, -1
  br i1 %1238, label %1249, label %1239

1239:                                             ; preds = %1234
  %1240 = load i8, i8* %1217, align 1
  %1241 = zext i8 %1240 to i32
  %1242 = xor i32 %1237, 255
  %1243 = mul nuw nsw i32 %1242, %1241
  %1244 = zext i8 %1233 to i32
  %1245 = mul nuw nsw i32 %1237, %1244
  %1246 = add nuw nsw i32 %1243, %1245
  %1247 = udiv i32 %1246, 255
  %1248 = trunc i32 %1247 to i8
  br label %1249

1249:                                             ; preds = %1239, %1234, %1232
  %1250 = phi i8 [ %1248, %1239 ], [ %1233, %1234 ], [ %1233, %1232 ]
  store i8 %1250, i8* %1217, align 1
  %1251 = getelementptr inbounds i8, i8* %1217, i64 1
  %1252 = getelementptr inbounds i8, i8* %1218, i64 1
  %1253 = add nuw nsw i64 %1216, 1
  %1254 = icmp eq i64 %1253, %1214
  br i1 %1254, label %1818, label %1215

1255:                                             ; preds = %1278, %1204
  %1256 = phi i64 [ 0, %1204 ], [ %1282, %1278 ]
  %1257 = phi i8* [ %1, %1204 ], [ %1280, %1278 ]
  %1258 = phi i8* [ %2, %1204 ], [ %1281, %1278 ]
  %1259 = load i8, i8* %1258, align 1
  %1260 = zext i8 %1259 to i64
  %1261 = getelementptr inbounds i8, i8* %1091, i64 %1260
  %1262 = load i8, i8* %1261, align 1
  br i1 %1205, label %1278, label %1263

1263:                                             ; preds = %1255
  %1264 = getelementptr inbounds i8, i8* %5, i64 %1256
  %1265 = load i8, i8* %1264, align 1
  %1266 = zext i8 %1265 to i32
  %1267 = icmp eq i8 %1265, -1
  br i1 %1267, label %1278, label %1268

1268:                                             ; preds = %1263
  %1269 = load i8, i8* %1257, align 1
  %1270 = zext i8 %1269 to i32
  %1271 = xor i32 %1266, 255
  %1272 = mul nuw nsw i32 %1271, %1270
  %1273 = zext i8 %1262 to i32
  %1274 = mul nuw nsw i32 %1266, %1273
  %1275 = add nuw nsw i32 %1272, %1274
  %1276 = udiv i32 %1275, 255
  %1277 = trunc i32 %1276 to i8
  br label %1278

1278:                                             ; preds = %1268, %1263, %1255
  %1279 = phi i8 [ %1277, %1268 ], [ %1262, %1263 ], [ %1262, %1255 ]
  store i8 %1279, i8* %1257, align 1
  %1280 = getelementptr inbounds i8, i8* %1257, i64 1
  %1281 = getelementptr inbounds i8, i8* %1258, i64 1
  %1282 = add nuw nsw i64 %1256, 1
  %1283 = icmp eq i64 %1282, %1206
  br i1 %1283, label %1818, label %1255

1284:                                             ; preds = %525
  switch i32 %529, label %1818 [
    i32 3, label %1285
    i32 11, label %1492
    i32 0, label %1594
    i32 8, label %1607
    i32 2, label %1703
    i32 10, label %1716
  ]

1285:                                             ; preds = %1284
  %1286 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 3, i32 2, i32 0, i32 0, i32 0
  %1287 = load i32*, i32** %1286, align 8, !noalias !65
  %1288 = icmp eq i32* %1287, null
  br i1 %1288, label %1294, label %1289

1289:                                             ; preds = %1285
  %1290 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 3, i32 0
  %1291 = load i64, i64* %1290, align 8, !noalias !65
  %1292 = icmp eq i64 %1291, 4
  br i1 %1292, label %1294, label %1293, !prof !5

1293:                                             ; preds = %1289
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !noalias !65, !srcloc !33
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !noalias !65, !srcloc !34
  unreachable

1294:                                             ; preds = %1285, %1289
  %1295 = icmp eq i8* %6, null
  %1296 = icmp sgt i32 %4, 0
  br i1 %1295, label %1301, label %1297

1297:                                             ; preds = %1294
  br i1 %1296, label %1298, label %1818

1298:                                             ; preds = %1297
  %1299 = icmp eq i8* %5, null
  %1300 = zext i32 %4 to i64
  br label %1305

1301:                                             ; preds = %1294
  br i1 %1296, label %1302, label %1818

1302:                                             ; preds = %1301
  %1303 = icmp eq i8* %5, null
  %1304 = zext i32 %4 to i64
  br label %1422

1305:                                             ; preds = %1417, %1298
  %1306 = phi i64 [ 0, %1298 ], [ %1420, %1417 ]
  %1307 = phi i8* [ %1, %1298 ], [ %1419, %1417 ]
  %1308 = phi i8* [ %2, %1298 ], [ %1314, %1417 ]
  %1309 = phi i8* [ %6, %1298 ], [ %1418, %1417 ]
  %1310 = load i8, i8* %1308, align 1
  %1311 = zext i8 %1310 to i64
  %1312 = getelementptr inbounds i32, i32* %1287, i64 %1311
  %1313 = load i32, i32* %1312, align 4
  %1314 = getelementptr inbounds i8, i8* %1308, i64 1
  %1315 = lshr i32 %1313, 16
  %1316 = and i32 %1315, 255
  %1317 = lshr i32 %1313, 8
  %1318 = and i32 %1317, 255
  %1319 = and i32 %1313, 255
  %1320 = getelementptr inbounds i8, i8* %1307, i64 3
  %1321 = load i8, i8* %1320, align 1
  %1322 = zext i8 %1321 to i32
  %1323 = icmp eq i8 %1321, 0
  br i1 %1323, label %1324, label %1360

1324:                                             ; preds = %1305
  br i1 %1299, label %1344, label %1325

1325:                                             ; preds = %1324
  %1326 = getelementptr inbounds i8, i8* %5, i64 %1306
  %1327 = load i8, i8* %1326, align 1
  %1328 = zext i8 %1327 to i16
  %1329 = load i8, i8* %1309, align 1
  %1330 = zext i8 %1329 to i16
  %1331 = mul nuw i16 %1330, %1328
  %1332 = udiv i16 %1331, 255
  %1333 = zext i16 %1332 to i32
  %1334 = shl i32 %1333, 24
  %1335 = shl nuw nsw i32 %1316, 16
  %1336 = shl nuw nsw i32 %1318, 8
  %1337 = or i32 %1336, %1335
  %1338 = or i32 %1337, %1334
  %1339 = trunc i32 %1313 to i8
  store i8 %1339, i8* %1307, align 1
  %1340 = trunc i32 %1317 to i8
  %1341 = getelementptr inbounds i8, i8* %1307, i64 1
  store i8 %1340, i8* %1341, align 1
  %1342 = trunc i32 %1315 to i8
  %1343 = getelementptr inbounds i8, i8* %1307, i64 2
  store i8 %1342, i8* %1343, align 1
  br label %1357

1344:                                             ; preds = %1324
  %1345 = shl nuw nsw i32 %1316, 16
  %1346 = shl nuw nsw i32 %1318, 8
  %1347 = trunc i32 %1313 to i8
  store i8 %1347, i8* %1307, align 1
  %1348 = trunc i32 %1317 to i8
  %1349 = getelementptr inbounds i8, i8* %1307, i64 1
  store i8 %1348, i8* %1349, align 1
  %1350 = trunc i32 %1315 to i8
  %1351 = getelementptr inbounds i8, i8* %1307, i64 2
  store i8 %1350, i8* %1351, align 1
  %1352 = load i8, i8* %1309, align 1
  %1353 = zext i8 %1352 to i32
  %1354 = shl nuw i32 %1353, 24
  %1355 = or i32 %1346, %1345
  %1356 = or i32 %1355, %1354
  br label %1357

1357:                                             ; preds = %1344, %1325
  %1358 = phi i32 [ %1356, %1344 ], [ %1338, %1325 ]
  %1359 = lshr i32 %1358, 24
  br label %1413

1360:                                             ; preds = %1305
  %1361 = load i8, i8* %1309, align 1
  br i1 %1299, label %1370, label %1362

1362:                                             ; preds = %1360
  %1363 = getelementptr inbounds i8, i8* %5, i64 %1306
  %1364 = load i8, i8* %1363, align 1
  %1365 = zext i8 %1364 to i16
  %1366 = zext i8 %1361 to i16
  %1367 = mul nuw i16 %1365, %1366
  %1368 = udiv i16 %1367, 255
  %1369 = zext i16 %1368 to i32
  br label %1372

1370:                                             ; preds = %1360
  %1371 = zext i8 %1361 to i32
  br label %1372

1372:                                             ; preds = %1370, %1362
  %1373 = phi i32 [ %1369, %1362 ], [ %1371, %1370 ]
  %1374 = and i32 %1373, 255
  %1375 = icmp eq i32 %1374, 0
  br i1 %1375, label %1417, label %1376

1376:                                             ; preds = %1372
  %1377 = add nuw nsw i32 %1373, %1322
  %1378 = mul nuw nsw i32 %1374, %1322
  %1379 = trunc i32 %1378 to i16
  %1380 = udiv i16 %1379, 255
  %1381 = zext i16 %1380 to i32
  %1382 = sub nsw i32 %1377, %1381
  %1383 = trunc i32 %1382 to i8
  store i8 %1383, i8* %1320, align 1
  %1384 = trunc i32 %1374 to i16
  %1385 = mul nuw i16 %1384, 255
  %1386 = trunc i32 %1382 to i16
  %1387 = and i16 %1386, 255
  %1388 = udiv i16 %1385, %1387
  %1389 = zext i16 %1388 to i32
  %1390 = load i8, i8* %1307, align 1
  %1391 = zext i8 %1390 to i32
  %1392 = sub nsw i32 255, %1389
  %1393 = mul nsw i32 %1392, %1391
  %1394 = mul nuw nsw i32 %1319, %1389
  %1395 = add nsw i32 %1393, %1394
  %1396 = sdiv i32 %1395, 255
  %1397 = trunc i32 %1396 to i8
  store i8 %1397, i8* %1307, align 1
  %1398 = getelementptr inbounds i8, i8* %1307, i64 1
  %1399 = load i8, i8* %1398, align 1
  %1400 = zext i8 %1399 to i32
  %1401 = mul nsw i32 %1392, %1400
  %1402 = mul nuw nsw i32 %1318, %1389
  %1403 = add nsw i32 %1401, %1402
  %1404 = sdiv i32 %1403, 255
  %1405 = trunc i32 %1404 to i8
  store i8 %1405, i8* %1398, align 1
  %1406 = getelementptr inbounds i8, i8* %1307, i64 2
  %1407 = load i8, i8* %1406, align 1
  %1408 = zext i8 %1407 to i32
  %1409 = mul nsw i32 %1392, %1408
  %1410 = mul nuw nsw i32 %1316, %1389
  %1411 = add nsw i32 %1409, %1410
  %1412 = sdiv i32 %1411, 255
  br label %1413

1413:                                             ; preds = %1357, %1376
  %1414 = phi i32 [ %1412, %1376 ], [ %1359, %1357 ]
  %1415 = phi i8* [ %1406, %1376 ], [ %1320, %1357 ]
  %1416 = trunc i32 %1414 to i8
  store i8 %1416, i8* %1415, align 1
  br label %1417

1417:                                             ; preds = %1413, %1372
  %1418 = getelementptr inbounds i8, i8* %1309, i64 1
  %1419 = getelementptr inbounds i8, i8* %1307, i64 4
  %1420 = add nuw nsw i64 %1306, 1
  %1421 = icmp eq i64 %1420, %1300
  br i1 %1421, label %1818, label %1305

1422:                                             ; preds = %1487, %1302
  %1423 = phi i64 [ 0, %1302 ], [ %1490, %1487 ]
  %1424 = phi i8* [ %1, %1302 ], [ %1489, %1487 ]
  %1425 = phi i8* [ %2, %1302 ], [ %1488, %1487 ]
  %1426 = load i8, i8* %1425, align 1
  %1427 = zext i8 %1426 to i64
  %1428 = getelementptr inbounds i32, i32* %1287, i64 %1427
  %1429 = load i32, i32* %1428, align 4
  %1430 = lshr i32 %1429, 16
  %1431 = trunc i32 %1430 to i8
  %1432 = and i32 %1430, 255
  %1433 = lshr i32 %1429, 8
  %1434 = trunc i32 %1433 to i8
  %1435 = and i32 %1433, 255
  %1436 = trunc i32 %1429 to i8
  %1437 = and i32 %1429, 255
  br i1 %1303, label %1442, label %1438

1438:                                             ; preds = %1422
  %1439 = getelementptr inbounds i8, i8* %5, i64 %1423
  %1440 = load i8, i8* %1439, align 1
  %1441 = zext i8 %1440 to i32
  switch i8 %1440, label %1446 [
    i8 -1, label %1442
    i8 0, label %1487
  ]

1442:                                             ; preds = %1438, %1422
  %1443 = getelementptr inbounds i8, i8* %1424, i64 1
  store i8 %1436, i8* %1424, align 1
  %1444 = getelementptr inbounds i8, i8* %1424, i64 2
  store i8 %1434, i8* %1443, align 1
  %1445 = getelementptr inbounds i8, i8* %1424, i64 3
  store i8 %1431, i8* %1444, align 1
  store i8 -1, i8* %1445, align 1
  br label %1487

1446:                                             ; preds = %1438
  %1447 = getelementptr inbounds i8, i8* %1424, i64 3
  %1448 = load i8, i8* %1447, align 1
  %1449 = zext i8 %1448 to i32
  %1450 = add nuw nsw i32 %1449, %1441
  %1451 = mul nuw nsw i32 %1449, %1441
  %1452 = trunc i32 %1451 to i16
  %1453 = udiv i16 %1452, 255
  %1454 = zext i16 %1453 to i32
  %1455 = sub nsw i32 %1450, %1454
  %1456 = trunc i32 %1455 to i8
  store i8 %1456, i8* %1447, align 1
  %1457 = zext i8 %1440 to i16
  %1458 = mul nuw i16 %1457, 255
  %1459 = trunc i32 %1455 to i16
  %1460 = and i16 %1459, 255
  %1461 = udiv i16 %1458, %1460
  %1462 = zext i16 %1461 to i32
  %1463 = load i8, i8* %1424, align 1
  %1464 = zext i8 %1463 to i32
  %1465 = sub nsw i32 255, %1462
  %1466 = mul nsw i32 %1465, %1464
  %1467 = mul nuw nsw i32 %1437, %1462
  %1468 = add nsw i32 %1466, %1467
  %1469 = sdiv i32 %1468, 255
  %1470 = trunc i32 %1469 to i8
  store i8 %1470, i8* %1424, align 1
  %1471 = getelementptr inbounds i8, i8* %1424, i64 1
  %1472 = load i8, i8* %1471, align 1
  %1473 = zext i8 %1472 to i32
  %1474 = mul nsw i32 %1465, %1473
  %1475 = mul nuw nsw i32 %1435, %1462
  %1476 = add nsw i32 %1474, %1475
  %1477 = sdiv i32 %1476, 255
  %1478 = trunc i32 %1477 to i8
  store i8 %1478, i8* %1471, align 1
  %1479 = getelementptr inbounds i8, i8* %1424, i64 2
  %1480 = load i8, i8* %1479, align 1
  %1481 = zext i8 %1480 to i32
  %1482 = mul nsw i32 %1465, %1481
  %1483 = mul nuw nsw i32 %1432, %1462
  %1484 = add nsw i32 %1482, %1483
  %1485 = sdiv i32 %1484, 255
  %1486 = trunc i32 %1485 to i8
  store i8 %1486, i8* %1479, align 1
  br label %1487

1487:                                             ; preds = %1446, %1442, %1438
  %1488 = getelementptr inbounds i8, i8* %1425, i64 1
  %1489 = getelementptr inbounds i8, i8* %1424, i64 4
  %1490 = add nuw nsw i64 %1423, 1
  %1491 = icmp eq i64 %1490, %1304
  br i1 %1491, label %1818, label %1422

1492:                                             ; preds = %1284
  %1493 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 3, i32 2, i32 0, i32 0, i32 0
  %1494 = load i32*, i32** %1493, align 8, !noalias !68
  %1495 = icmp eq i32* %1494, null
  br i1 %1495, label %1501, label %1496

1496:                                             ; preds = %1492
  %1497 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 3, i32 0
  %1498 = load i64, i64* %1497, align 8, !noalias !68
  %1499 = icmp eq i64 %1498, 4
  br i1 %1499, label %1501, label %1500, !prof !5

1500:                                             ; preds = %1496
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !noalias !68, !srcloc !33
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !noalias !68, !srcloc !34
  unreachable

1501:                                             ; preds = %1492, %1496
  %1502 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 3, i32 1
  %1503 = load i64, i64* %1502, align 8, !noalias !68
  %1504 = icmp eq i64 %1503, 0
  br i1 %1504, label %1505, label %1506, !prof !8

1505:                                             ; preds = %1501
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !6
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !7
  unreachable

1506:                                             ; preds = %1501
  %1507 = load i32, i32* %1494, align 4
  %1508 = icmp eq i64 %1503, 1
  br i1 %1508, label %1509, label %1510, !prof !8

1509:                                             ; preds = %1506
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !6
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !7
  unreachable

1510:                                             ; preds = %1506
  %1511 = getelementptr inbounds i32, i32* %1494, i64 1
  %1512 = load i32, i32* %1511, align 4
  %1513 = icmp sgt i32 %4, 0
  br i1 %1513, label %1514, label %1818

1514:                                             ; preds = %1510
  %1515 = icmp eq i8* %5, null
  %1516 = zext i32 %4 to i64
  br label %1517

1517:                                             ; preds = %1590, %1514
  %1518 = phi i64 [ 0, %1514 ], [ %1592, %1590 ]
  %1519 = phi i8* [ %1, %1514 ], [ %1591, %1590 ]
  %1520 = trunc i64 %1518 to i32
  %1521 = add nsw i32 %1520, %3
  %1522 = sdiv i32 %1521, 8
  %1523 = sext i32 %1522 to i64
  %1524 = getelementptr inbounds i8, i8* %2, i64 %1523
  %1525 = load i8, i8* %1524, align 1
  %1526 = zext i8 %1525 to i32
  %1527 = srem i32 %1521, 8
  %1528 = sub nsw i32 7, %1527
  %1529 = shl i32 1, %1528
  %1530 = and i32 %1529, %1526
  %1531 = icmp eq i32 %1530, 0
  %1532 = select i1 %1531, i32 %1507, i32 %1512
  %1533 = and i32 %1532, 255
  %1534 = lshr i32 %1532, 8
  %1535 = and i32 %1534, 255
  %1536 = lshr i32 %1532, 16
  %1537 = and i32 %1536, 255
  br i1 %1515, label %1542, label %1538

1538:                                             ; preds = %1517
  %1539 = getelementptr inbounds i8, i8* %5, i64 %1518
  %1540 = load i8, i8* %1539, align 1
  %1541 = zext i8 %1540 to i32
  switch i8 %1540, label %1549 [
    i8 -1, label %1542
    i8 0, label %1590
  ]

1542:                                             ; preds = %1538, %1517
  %1543 = trunc i32 %1532 to i8
  %1544 = getelementptr inbounds i8, i8* %1519, i64 1
  store i8 %1543, i8* %1519, align 1
  %1545 = trunc i32 %1534 to i8
  %1546 = getelementptr inbounds i8, i8* %1519, i64 2
  store i8 %1545, i8* %1544, align 1
  %1547 = trunc i32 %1536 to i8
  %1548 = getelementptr inbounds i8, i8* %1519, i64 3
  store i8 %1547, i8* %1546, align 1
  store i8 -1, i8* %1548, align 1
  br label %1590

1549:                                             ; preds = %1538
  %1550 = getelementptr inbounds i8, i8* %1519, i64 3
  %1551 = load i8, i8* %1550, align 1
  %1552 = zext i8 %1551 to i32
  %1553 = add nuw nsw i32 %1552, %1541
  %1554 = mul nuw nsw i32 %1552, %1541
  %1555 = trunc i32 %1554 to i16
  %1556 = udiv i16 %1555, 255
  %1557 = zext i16 %1556 to i32
  %1558 = sub nsw i32 %1553, %1557
  %1559 = trunc i32 %1558 to i8
  store i8 %1559, i8* %1550, align 1
  %1560 = zext i8 %1540 to i16
  %1561 = mul nuw i16 %1560, 255
  %1562 = trunc i32 %1558 to i16
  %1563 = and i16 %1562, 255
  %1564 = udiv i16 %1561, %1563
  %1565 = zext i16 %1564 to i32
  %1566 = load i8, i8* %1519, align 1
  %1567 = zext i8 %1566 to i32
  %1568 = sub nsw i32 255, %1565
  %1569 = mul nsw i32 %1568, %1567
  %1570 = mul nuw nsw i32 %1533, %1565
  %1571 = add nsw i32 %1569, %1570
  %1572 = sdiv i32 %1571, 255
  %1573 = trunc i32 %1572 to i8
  store i8 %1573, i8* %1519, align 1
  %1574 = getelementptr inbounds i8, i8* %1519, i64 1
  %1575 = load i8, i8* %1574, align 1
  %1576 = zext i8 %1575 to i32
  %1577 = mul nsw i32 %1568, %1576
  %1578 = mul nuw nsw i32 %1535, %1565
  %1579 = add nsw i32 %1577, %1578
  %1580 = sdiv i32 %1579, 255
  %1581 = trunc i32 %1580 to i8
  store i8 %1581, i8* %1574, align 1
  %1582 = getelementptr inbounds i8, i8* %1519, i64 2
  %1583 = load i8, i8* %1582, align 1
  %1584 = zext i8 %1583 to i32
  %1585 = mul nsw i32 %1568, %1584
  %1586 = mul nuw nsw i32 %1537, %1565
  %1587 = add nsw i32 %1585, %1586
  %1588 = sdiv i32 %1587, 255
  %1589 = trunc i32 %1588 to i8
  store i8 %1589, i8* %1582, align 1
  br label %1590

1590:                                             ; preds = %1549, %1542, %1538
  %1591 = getelementptr inbounds i8, i8* %1519, i64 4
  %1592 = add nuw nsw i64 %1518, 1
  %1593 = icmp eq i64 %1592, %1516
  br i1 %1593, label %1818, label %1517

1594:                                             ; preds = %1284
  %1595 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 3, i32 2, i32 0, i32 0, i32 0
  %1596 = load i32*, i32** %1595, align 8, !noalias !71
  %1597 = icmp eq i32* %1596, null
  br i1 %1597, label %1603, label %1598

1598:                                             ; preds = %1594
  %1599 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 3, i32 0
  %1600 = load i64, i64* %1599, align 8, !noalias !71
  %1601 = icmp eq i64 %1600, 4
  br i1 %1601, label %1603, label %1602, !prof !5

1602:                                             ; preds = %1598
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !noalias !71, !srcloc !33
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !noalias !71, !srcloc !34
  unreachable

1603:                                             ; preds = %1594, %1598
  %1604 = lshr i16 %423, 3
  %1605 = and i16 %1604, 31
  %1606 = zext i16 %1605 to i32
  tail call fastcc void @_ZN12_GLOBAL__N_132CompositeRow_8bppRgb2Rgb_NoBlendEPhPKhPKjiiS2_S2_(i8* %1, i8* %2, i32* %1596, i32 %4, i32 %1606, i8* %5, i8* %6)
  br label %1818

1607:                                             ; preds = %1284
  %1608 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 3, i32 2, i32 0, i32 0, i32 0
  %1609 = load i32*, i32** %1608, align 8, !noalias !74
  %1610 = icmp eq i32* %1609, null
  br i1 %1610, label %1616, label %1611

1611:                                             ; preds = %1607
  %1612 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 3, i32 0
  %1613 = load i64, i64* %1612, align 8, !noalias !74
  %1614 = icmp eq i64 %1613, 4
  br i1 %1614, label %1616, label %1615, !prof !5

1615:                                             ; preds = %1611
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !noalias !74, !srcloc !33
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !noalias !74, !srcloc !34
  unreachable

1616:                                             ; preds = %1607, %1611
  %1617 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 3, i32 1
  %1618 = load i64, i64* %1617, align 8, !noalias !74
  %1619 = and i16 %423, 248
  %1620 = icmp eq i64 %1618, 0
  br i1 %1620, label %1621, label %1622, !prof !8

1621:                                             ; preds = %1616
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !6
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !7
  unreachable

1622:                                             ; preds = %1616
  %1623 = load i32, i32* %1609, align 4
  %1624 = icmp eq i64 %1618, 1
  br i1 %1624, label %1625, label %1626, !prof !8

1625:                                             ; preds = %1622
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !6
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !7
  unreachable

1626:                                             ; preds = %1622
  %1627 = getelementptr inbounds i32, i32* %1609, i64 1
  %1628 = load i32, i32* %1627, align 4
  %1629 = icmp sgt i32 %4, 0
  br i1 %1629, label %1630, label %1818

1630:                                             ; preds = %1626
  %1631 = icmp eq i8* %5, null
  %1632 = icmp eq i16 %1619, 32
  %1633 = select i1 %1632, i64 4, i64 3
  %1634 = zext i32 %4 to i64
  br label %1635

1635:                                             ; preds = %1696, %1630
  %1636 = phi i64 [ 0, %1630 ], [ %1701, %1696 ]
  %1637 = phi i8* [ %1, %1630 ], [ %1700, %1696 ]
  %1638 = trunc i64 %1636 to i32
  %1639 = add nsw i32 %1638, %3
  %1640 = sdiv i32 %1639, 8
  %1641 = sext i32 %1640 to i64
  %1642 = getelementptr inbounds i8, i8* %2, i64 %1641
  %1643 = load i8, i8* %1642, align 1
  %1644 = zext i8 %1643 to i32
  %1645 = srem i32 %1639, 8
  %1646 = sub nsw i32 7, %1645
  %1647 = shl i32 1, %1646
  %1648 = and i32 %1647, %1644
  %1649 = icmp eq i32 %1648, 0
  %1650 = select i1 %1649, i32 %1623, i32 %1628
  %1651 = and i32 %1650, 255
  %1652 = lshr i32 %1650, 8
  %1653 = and i32 %1652, 255
  %1654 = lshr i32 %1650, 16
  %1655 = and i32 %1654, 255
  br i1 %1631, label %1691, label %1656

1656:                                             ; preds = %1635
  %1657 = getelementptr inbounds i8, i8* %5, i64 %1636
  %1658 = load i8, i8* %1657, align 1
  %1659 = zext i8 %1658 to i32
  %1660 = icmp eq i8 %1658, -1
  br i1 %1660, label %1691, label %1661

1661:                                             ; preds = %1656
  %1662 = load i8, i8* %1637, align 1
  %1663 = zext i8 %1662 to i32
  %1664 = xor i32 %1659, 255
  %1665 = mul nuw nsw i32 %1664, %1663
  %1666 = mul nuw nsw i32 %1651, %1659
  %1667 = add nuw nsw i32 %1665, %1666
  %1668 = udiv i32 %1667, 255
  %1669 = trunc i32 %1668 to i8
  store i8 %1669, i8* %1637, align 1
  %1670 = getelementptr inbounds i8, i8* %1637, i64 1
  %1671 = load i8, i8* %1670, align 1
  %1672 = zext i8 %1671 to i32
  %1673 = load i8, i8* %1657, align 1
  %1674 = zext i8 %1673 to i32
  %1675 = xor i32 %1674, 255
  %1676 = mul nuw nsw i32 %1675, %1672
  %1677 = mul nuw nsw i32 %1653, %1674
  %1678 = add nuw nsw i32 %1676, %1677
  %1679 = udiv i32 %1678, 255
  %1680 = trunc i32 %1679 to i8
  store i8 %1680, i8* %1670, align 1
  %1681 = getelementptr inbounds i8, i8* %1637, i64 2
  %1682 = load i8, i8* %1681, align 1
  %1683 = zext i8 %1682 to i32
  %1684 = load i8, i8* %1657, align 1
  %1685 = zext i8 %1684 to i32
  %1686 = xor i32 %1685, 255
  %1687 = mul nuw nsw i32 %1686, %1683
  %1688 = mul nuw nsw i32 %1655, %1685
  %1689 = add nuw nsw i32 %1687, %1688
  %1690 = udiv i32 %1689, 255
  br label %1696

1691:                                             ; preds = %1656, %1635
  %1692 = trunc i32 %1650 to i8
  %1693 = getelementptr inbounds i8, i8* %1637, i64 1
  store i8 %1692, i8* %1637, align 1
  %1694 = trunc i32 %1652 to i8
  %1695 = getelementptr inbounds i8, i8* %1637, i64 2
  store i8 %1694, i8* %1693, align 1
  br label %1696

1696:                                             ; preds = %1691, %1661
  %1697 = phi i32 [ %1654, %1691 ], [ %1690, %1661 ]
  %1698 = phi i8* [ %1695, %1691 ], [ %1681, %1661 ]
  %1699 = trunc i32 %1697 to i8
  store i8 %1699, i8* %1698, align 1
  %1700 = getelementptr inbounds i8, i8* %1637, i64 %1633
  %1701 = add nuw nsw i64 %1636, 1
  %1702 = icmp eq i64 %1701, %1634
  br i1 %1702, label %1818, label %1635

1703:                                             ; preds = %1284
  %1704 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 3, i32 2, i32 0, i32 0, i32 0
  %1705 = load i32*, i32** %1704, align 8, !noalias !77
  %1706 = icmp eq i32* %1705, null
  br i1 %1706, label %1712, label %1707

1707:                                             ; preds = %1703
  %1708 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 3, i32 0
  %1709 = load i64, i64* %1708, align 8, !noalias !77
  %1710 = icmp eq i64 %1709, 4
  br i1 %1710, label %1712, label %1711, !prof !5

1711:                                             ; preds = %1707
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !noalias !77, !srcloc !33
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !noalias !77, !srcloc !34
  unreachable

1712:                                             ; preds = %1703, %1707
  %1713 = lshr i16 %423, 3
  %1714 = and i16 %1713, 31
  %1715 = zext i16 %1714 to i32
  tail call fastcc void @_ZN12_GLOBAL__N_132CompositeRow_8bppRgb2Rgb_NoBlendEPhPKhPKjiiS2_S2_(i8* %1, i8* %2, i32* %1705, i32 %4, i32 %1715, i8* %5, i8* %6)
  br label %1818

1716:                                             ; preds = %1284
  %1717 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 3, i32 2, i32 0, i32 0, i32 0
  %1718 = load i32*, i32** %1717, align 8, !noalias !80
  %1719 = icmp eq i32* %1718, null
  br i1 %1719, label %1725, label %1720

1720:                                             ; preds = %1716
  %1721 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 3, i32 0
  %1722 = load i64, i64* %1721, align 8, !noalias !80
  %1723 = icmp eq i64 %1722, 4
  br i1 %1723, label %1725, label %1724, !prof !5

1724:                                             ; preds = %1720
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !noalias !80, !srcloc !33
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !noalias !80, !srcloc !34
  unreachable

1725:                                             ; preds = %1716, %1720
  %1726 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 3, i32 1
  %1727 = load i64, i64* %1726, align 8, !noalias !80
  %1728 = icmp eq i64 %1727, 0
  br i1 %1728, label %1729, label %1730, !prof !8

1729:                                             ; preds = %1725
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !6
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !7
  unreachable

1730:                                             ; preds = %1725
  %1731 = load i32, i32* %1718, align 4
  %1732 = icmp eq i64 %1727, 1
  br i1 %1732, label %1733, label %1734, !prof !8

1733:                                             ; preds = %1730
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !6
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !7
  unreachable

1734:                                             ; preds = %1730
  %1735 = getelementptr inbounds i32, i32* %1718, i64 1
  %1736 = load i32, i32* %1735, align 4
  %1737 = icmp sgt i32 %4, 0
  br i1 %1737, label %1738, label %1818

1738:                                             ; preds = %1734
  %1739 = icmp eq i8* %5, null
  %1740 = zext i32 %4 to i64
  br label %1741

1741:                                             ; preds = %1813, %1738
  %1742 = phi i64 [ 0, %1738 ], [ %1816, %1813 ]
  %1743 = phi i8* [ %1, %1738 ], [ %1815, %1813 ]
  %1744 = phi i8* [ %7, %1738 ], [ %1814, %1813 ]
  %1745 = trunc i64 %1742 to i32
  %1746 = add nsw i32 %1745, %3
  %1747 = sdiv i32 %1746, 8
  %1748 = sext i32 %1747 to i64
  %1749 = getelementptr inbounds i8, i8* %2, i64 %1748
  %1750 = load i8, i8* %1749, align 1
  %1751 = zext i8 %1750 to i32
  %1752 = srem i32 %1746, 8
  %1753 = sub nsw i32 7, %1752
  %1754 = shl i32 1, %1753
  %1755 = and i32 %1754, %1751
  %1756 = icmp eq i32 %1755, 0
  %1757 = select i1 %1756, i32 %1731, i32 %1736
  %1758 = and i32 %1757, 255
  %1759 = lshr i32 %1757, 8
  %1760 = and i32 %1759, 255
  %1761 = lshr i32 %1757, 16
  %1762 = and i32 %1761, 255
  br i1 %1739, label %1767, label %1763

1763:                                             ; preds = %1741
  %1764 = getelementptr inbounds i8, i8* %5, i64 %1742
  %1765 = load i8, i8* %1764, align 1
  %1766 = zext i8 %1765 to i32
  switch i8 %1765, label %1773 [
    i8 -1, label %1767
    i8 0, label %1813
  ]

1767:                                             ; preds = %1763, %1741
  %1768 = trunc i32 %1757 to i8
  %1769 = getelementptr inbounds i8, i8* %1743, i64 1
  store i8 %1768, i8* %1743, align 1
  %1770 = trunc i32 %1759 to i8
  %1771 = getelementptr inbounds i8, i8* %1743, i64 2
  store i8 %1770, i8* %1769, align 1
  %1772 = trunc i32 %1761 to i8
  store i8 %1772, i8* %1771, align 1
  store i8 -1, i8* %1744, align 1
  br label %1813

1773:                                             ; preds = %1763
  %1774 = load i8, i8* %1744, align 1
  %1775 = zext i8 %1774 to i32
  %1776 = add nuw nsw i32 %1775, %1766
  %1777 = mul nuw nsw i32 %1775, %1766
  %1778 = trunc i32 %1777 to i16
  %1779 = udiv i16 %1778, 255
  %1780 = zext i16 %1779 to i32
  %1781 = sub nsw i32 %1776, %1780
  %1782 = trunc i32 %1781 to i8
  store i8 %1782, i8* %1744, align 1
  %1783 = zext i8 %1765 to i16
  %1784 = mul nuw i16 %1783, 255
  %1785 = trunc i32 %1781 to i16
  %1786 = and i16 %1785, 255
  %1787 = udiv i16 %1784, %1786
  %1788 = zext i16 %1787 to i32
  %1789 = load i8, i8* %1743, align 1
  %1790 = zext i8 %1789 to i32
  %1791 = sub nsw i32 255, %1788
  %1792 = mul nsw i32 %1791, %1790
  %1793 = mul nuw nsw i32 %1758, %1788
  %1794 = add nsw i32 %1792, %1793
  %1795 = sdiv i32 %1794, 255
  %1796 = trunc i32 %1795 to i8
  store i8 %1796, i8* %1743, align 1
  %1797 = getelementptr inbounds i8, i8* %1743, i64 1
  %1798 = load i8, i8* %1797, align 1
  %1799 = zext i8 %1798 to i32
  %1800 = mul nsw i32 %1791, %1799
  %1801 = mul nuw nsw i32 %1760, %1788
  %1802 = add nsw i32 %1800, %1801
  %1803 = sdiv i32 %1802, 255
  %1804 = trunc i32 %1803 to i8
  store i8 %1804, i8* %1797, align 1
  %1805 = getelementptr inbounds i8, i8* %1743, i64 2
  %1806 = load i8, i8* %1805, align 1
  %1807 = zext i8 %1806 to i32
  %1808 = mul nsw i32 %1791, %1807
  %1809 = mul nuw nsw i32 %1762, %1788
  %1810 = add nsw i32 %1808, %1809
  %1811 = sdiv i32 %1810, 255
  %1812 = trunc i32 %1811 to i8
  store i8 %1812, i8* %1805, align 1
  br label %1813

1813:                                             ; preds = %1773, %1767, %1763
  %1814 = getelementptr inbounds i8, i8* %1744, i64 1
  %1815 = getelementptr inbounds i8, i8* %1743, i64 3
  %1816 = add nuw nsw i64 %1742, 1
  %1817 = icmp eq i64 %1816, %1740
  br i1 %1817, label %1818, label %1741

1818:                                             ; preds = %414, %333, %237, %134, %1813, %1696, %1590, %1417, %1487, %766, %802, %632, %684, %1195, %1155, %1278, %1249, %964, %901, %1079, %1034, %455, %497, %493, %1734, %1626, %1510, %1301, %1297, %1207, %1202, %1102, %1097, %976, %971, %826, %821, %716, %711, %567, %562, %495, %427, %344, %256, %167, %53, %1603, %1712, %1284, %243, %19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK22CFX_ScanlineCompositor7Palette15Get32BitPaletteEv(%"class.pdfium::span"* noalias nocapture sret, %"class.CFX_ScanlineCompositor::Palette"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.CFX_ScanlineCompositor::Palette", %"class.CFX_ScanlineCompositor::Palette"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %4 = load i32*, i32** %3, align 8
  %5 = icmp eq i32* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.CFX_ScanlineCompositor::Palette", %"class.CFX_ScanlineCompositor::Palette"* %1, i64 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = icmp eq i64 %8, 4
  br i1 %9, label %11, label %10, !prof !5

10:                                               ; preds = %6
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !33
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !34
  unreachable

11:                                               ; preds = %6, %2
  %12 = getelementptr inbounds %"class.CFX_ScanlineCompositor::Palette", %"class.CFX_ScanlineCompositor::Palette"* %1, i64 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %0, i64 0, i32 0, i32 0
  store i32* %4, i32** %14, align 8
  %15 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %0, i64 0, i32 1
  store i64 %13, i64* %15, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK22CFX_ScanlineCompositor7Palette14Get8BitPaletteEv(%"class.pdfium::span.5"* noalias nocapture sret, %"class.CFX_ScanlineCompositor::Palette"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.CFX_ScanlineCompositor::Palette", %"class.CFX_ScanlineCompositor::Palette"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %4 = load i32*, i32** %3, align 8
  %5 = icmp eq i32* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.CFX_ScanlineCompositor::Palette", %"class.CFX_ScanlineCompositor::Palette"* %1, i64 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = icmp eq i64 %8, 1
  br i1 %9, label %11, label %10, !prof !5

10:                                               ; preds = %6
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !54
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !55
  unreachable

11:                                               ; preds = %6, %2
  %12 = getelementptr inbounds %"class.CFX_ScanlineCompositor::Palette", %"class.CFX_ScanlineCompositor::Palette"* %1, i64 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = bitcast %"class.pdfium::span.5"* %0 to i32**
  store i32* %4, i32** %14, align 8
  %15 = getelementptr inbounds %"class.pdfium::span.5", %"class.pdfium::span.5"* %0, i64 0, i32 1
  store i64 %13, i64* %15, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @_ZN12_GLOBAL__N_132CompositeRow_8bppRgb2Rgb_NoBlendEPhPKhPKjiiS2_S2_(i8* nocapture, i8* nocapture readonly, i32* nocapture readonly, i32, i32, i8* readonly, i8* readonly) unnamed_addr #1 {
  %8 = icmp eq i8* %6, null
  %9 = icmp sgt i32 %3, 0
  br i1 %8, label %10, label %16

10:                                               ; preds = %7
  br i1 %9, label %11, label %153

11:                                               ; preds = %10
  %12 = icmp eq i8* %5, null
  %13 = icmp eq i32 %4, 4
  %14 = select i1 %13, i64 4, i64 3
  %15 = zext i32 %3 to i64
  br label %93

16:                                               ; preds = %7
  br i1 %9, label %17, label %153

17:                                               ; preds = %16
  %18 = add nsw i32 %4, -3
  %19 = sext i32 %4 to i64
  %20 = sext i32 %18 to i64
  br label %21

21:                                               ; preds = %89, %17
  %22 = phi i32 [ 0, %17 ], [ %91, %89 ]
  %23 = phi i8* [ %6, %17 ], [ %41, %89 ]
  %24 = phi i8* [ %5, %17 ], [ %52, %89 ]
  %25 = phi i8* [ %0, %17 ], [ %90, %89 ]
  %26 = phi i8* [ %1, %17 ], [ %39, %89 ]
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i64
  %29 = getelementptr inbounds i32, i32* %2, i64 %28
  %30 = load i32, i32* %29, align 4
  %31 = lshr i32 %30, 16
  %32 = trunc i32 %31 to i8
  %33 = and i32 %31, 255
  %34 = lshr i32 %30, 8
  %35 = trunc i32 %34 to i8
  %36 = and i32 %34, 255
  %37 = trunc i32 %30 to i8
  %38 = and i32 %30, 255
  %39 = getelementptr inbounds i8, i8* %26, i64 1
  %40 = icmp eq i8* %24, null
  %41 = getelementptr inbounds i8, i8* %23, i64 1
  %42 = load i8, i8* %23, align 1
  br i1 %40, label %51, label %43

43:                                               ; preds = %21
  %44 = zext i8 %42 to i16
  %45 = getelementptr inbounds i8, i8* %24, i64 1
  %46 = load i8, i8* %24, align 1
  %47 = zext i8 %46 to i16
  %48 = mul nuw i16 %47, %44
  %49 = udiv i16 %48, 255
  %50 = trunc i16 %49 to i8
  br label %51

51:                                               ; preds = %21, %43
  %52 = phi i8* [ %45, %43 ], [ null, %21 ]
  %53 = phi i8 [ %50, %43 ], [ %42, %21 ]
  %54 = zext i8 %53 to i32
  switch i8 %53, label %62 [
    i8 -1, label %55
    i8 0, label %60
  ]

55:                                               ; preds = %51
  %56 = getelementptr inbounds i8, i8* %25, i64 1
  store i8 %37, i8* %25, align 1
  %57 = getelementptr inbounds i8, i8* %25, i64 2
  store i8 %35, i8* %56, align 1
  %58 = getelementptr inbounds i8, i8* %25, i64 3
  store i8 %32, i8* %57, align 1
  %59 = getelementptr inbounds i8, i8* %58, i64 %20
  br label %89

60:                                               ; preds = %51
  %61 = getelementptr inbounds i8, i8* %25, i64 %19
  br label %89

62:                                               ; preds = %51
  %63 = load i8, i8* %25, align 1
  %64 = zext i8 %63 to i32
  %65 = xor i32 %54, 255
  %66 = mul nuw nsw i32 %65, %64
  %67 = mul nuw nsw i32 %38, %54
  %68 = add nuw nsw i32 %66, %67
  %69 = udiv i32 %68, 255
  %70 = trunc i32 %69 to i8
  store i8 %70, i8* %25, align 1
  %71 = getelementptr inbounds i8, i8* %25, i64 1
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i32
  %74 = mul nuw nsw i32 %65, %73
  %75 = mul nuw nsw i32 %36, %54
  %76 = add nuw nsw i32 %74, %75
  %77 = udiv i32 %76, 255
  %78 = trunc i32 %77 to i8
  store i8 %78, i8* %71, align 1
  %79 = getelementptr inbounds i8, i8* %25, i64 2
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i32
  %82 = mul nuw nsw i32 %65, %81
  %83 = mul nuw nsw i32 %33, %54
  %84 = add nuw nsw i32 %82, %83
  %85 = udiv i32 %84, 255
  %86 = trunc i32 %85 to i8
  store i8 %86, i8* %79, align 1
  %87 = getelementptr inbounds i8, i8* %25, i64 3
  %88 = getelementptr inbounds i8, i8* %87, i64 %20
  br label %89

89:                                               ; preds = %62, %60, %55
  %90 = phi i8* [ %59, %55 ], [ %61, %60 ], [ %88, %62 ]
  %91 = add nuw nsw i32 %22, 1
  %92 = icmp eq i32 %91, %3
  br i1 %92, label %153, label %21

93:                                               ; preds = %148, %11
  %94 = phi i64 [ 0, %11 ], [ %151, %148 ]
  %95 = phi i8* [ %0, %11 ], [ %149, %148 ]
  %96 = phi i8* [ %1, %11 ], [ %150, %148 ]
  %97 = load i8, i8* %96, align 1
  %98 = zext i8 %97 to i64
  %99 = getelementptr inbounds i32, i32* %2, i64 %98
  %100 = load i32, i32* %99, align 4
  %101 = lshr i32 %100, 16
  %102 = trunc i32 %101 to i8
  %103 = and i32 %101, 255
  %104 = lshr i32 %100, 8
  %105 = trunc i32 %104 to i8
  %106 = and i32 %104, 255
  %107 = trunc i32 %100 to i8
  %108 = and i32 %100, 255
  br i1 %12, label %145, label %109

109:                                              ; preds = %93
  %110 = getelementptr inbounds i8, i8* %5, i64 %94
  %111 = load i8, i8* %110, align 1
  %112 = zext i8 %111 to i32
  %113 = icmp eq i8 %111, -1
  br i1 %113, label %145, label %114

114:                                              ; preds = %109
  %115 = load i8, i8* %95, align 1
  %116 = zext i8 %115 to i32
  %117 = xor i32 %112, 255
  %118 = mul nuw nsw i32 %117, %116
  %119 = mul nuw nsw i32 %108, %112
  %120 = add nuw nsw i32 %118, %119
  %121 = udiv i32 %120, 255
  %122 = trunc i32 %121 to i8
  store i8 %122, i8* %95, align 1
  %123 = getelementptr inbounds i8, i8* %95, i64 1
  %124 = load i8, i8* %123, align 1
  %125 = zext i8 %124 to i32
  %126 = load i8, i8* %110, align 1
  %127 = zext i8 %126 to i32
  %128 = xor i32 %127, 255
  %129 = mul nuw nsw i32 %128, %125
  %130 = mul nuw nsw i32 %106, %127
  %131 = add nuw nsw i32 %129, %130
  %132 = udiv i32 %131, 255
  %133 = trunc i32 %132 to i8
  store i8 %133, i8* %123, align 1
  %134 = getelementptr inbounds i8, i8* %95, i64 2
  %135 = load i8, i8* %134, align 1
  %136 = zext i8 %135 to i32
  %137 = load i8, i8* %110, align 1
  %138 = zext i8 %137 to i32
  %139 = xor i32 %138, 255
  %140 = mul nuw nsw i32 %139, %136
  %141 = mul nuw nsw i32 %103, %138
  %142 = add nuw nsw i32 %140, %141
  %143 = udiv i32 %142, 255
  %144 = trunc i32 %143 to i8
  store i8 %144, i8* %134, align 1
  br label %148

145:                                              ; preds = %109, %93
  %146 = getelementptr inbounds i8, i8* %95, i64 1
  store i8 %107, i8* %95, align 1
  %147 = getelementptr inbounds i8, i8* %95, i64 2
  store i8 %105, i8* %146, align 1
  store i8 %102, i8* %147, align 1
  br label %148

148:                                              ; preds = %145, %114
  %149 = getelementptr inbounds i8, i8* %95, i64 %14
  %150 = getelementptr inbounds i8, i8* %96, i64 1
  %151 = add nuw nsw i64 %94, 1
  %152 = icmp eq i64 %151, %15
  br i1 %152, label %153, label %93

153:                                              ; preds = %89, %148, %16, %10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN22CFX_ScanlineCompositor21CompositeByteMaskLineEPhPKhiS2_S0_(%class.CFX_ScanlineCompositor* nocapture readonly, i8* nocapture, i8* nocapture readonly, i32, i8* readonly, i8* nocapture) local_unnamed_addr #0 align 2 {
  %7 = alloca [3 x i8], align 1
  %8 = alloca [3 x i32], align 4
  %9 = alloca [3 x i8], align 1
  %10 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 2
  %11 = load i16, i16* %10, align 2
  %12 = icmp eq i16 %11, 264
  br i1 %12, label %13, label %56

13:                                               ; preds = %6
  %14 = icmp sgt i32 %3, 0
  br i1 %14, label %15, label %797

15:                                               ; preds = %13
  %16 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 4
  %17 = load i32, i32* %16, align 8
  %18 = and i32 %17, 255
  %19 = icmp eq i8* %4, null
  %20 = zext i32 %3 to i64
  br label %21

21:                                               ; preds = %52, %15
  %22 = phi i64 [ 0, %15 ], [ %54, %52 ]
  %23 = phi i8* [ %1, %15 ], [ %53, %52 ]
  %24 = getelementptr inbounds i8, i8* %2, i64 %22
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = mul nuw nsw i32 %18, %26
  br i1 %19, label %34, label %28

28:                                               ; preds = %21
  %29 = getelementptr inbounds i8, i8* %4, i64 %22
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = mul nuw nsw i32 %27, %31
  %33 = udiv i32 %32, 255
  br label %34

34:                                               ; preds = %28, %21
  %35 = phi i32 [ %33, %28 ], [ %27, %21 ]
  %36 = trunc i32 %35 to i16
  %37 = udiv i16 %36, 255
  %38 = trunc i16 %37 to i8
  %39 = load i8, i8* %23, align 1
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %50, label %41

41:                                               ; preds = %34
  %42 = icmp ult i16 %36, 255
  br i1 %42, label %52, label %43

43:                                               ; preds = %41
  %44 = add i8 %39, %38
  %45 = zext i8 %39 to i16
  %46 = mul i16 %37, %45
  %47 = udiv i16 %46, 255
  %48 = trunc i16 %47 to i8
  %49 = sub i8 %44, %48
  br label %50

50:                                               ; preds = %34, %43
  %51 = phi i8 [ %49, %43 ], [ %38, %34 ]
  store i8 %51, i8* %23, align 1
  br label %52

52:                                               ; preds = %50, %41
  %53 = getelementptr inbounds i8, i8* %23, i64 1
  %54 = add nuw nsw i64 %22, 1
  %55 = icmp eq i64 %54, %20
  br i1 %55, label %797, label %21

56:                                               ; preds = %6
  %57 = and i16 %11, 255
  %58 = icmp eq i16 %57, 8
  br i1 %58, label %59, label %162

59:                                               ; preds = %56
  %60 = and i16 %11, 512
  %61 = icmp eq i16 %60, 0
  %62 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 4
  %63 = load i32, i32* %62, align 8
  %64 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 5
  %65 = load i32, i32* %64, align 4
  %66 = icmp sgt i32 %3, 0
  br i1 %61, label %125, label %67

67:                                               ; preds = %59
  br i1 %66, label %68, label %797

68:                                               ; preds = %67
  %69 = and i32 %63, 255
  %70 = icmp eq i8* %4, null
  %71 = trunc i32 %65 to i8
  %72 = zext i32 %3 to i64
  br label %73

73:                                               ; preds = %120, %68
  %74 = phi i64 [ 0, %68 ], [ %123, %120 ]
  %75 = phi i8* [ %1, %68 ], [ %122, %120 ]
  %76 = phi i8* [ %5, %68 ], [ %121, %120 ]
  %77 = getelementptr inbounds i8, i8* %2, i64 %74
  %78 = load i8, i8* %77, align 1
  %79 = zext i8 %78 to i32
  %80 = mul nuw nsw i32 %69, %79
  br i1 %70, label %87, label %81

81:                                               ; preds = %73
  %82 = getelementptr inbounds i8, i8* %4, i64 %74
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i32
  %85 = mul nuw nsw i32 %80, %84
  %86 = udiv i32 %85, 255
  br label %87

87:                                               ; preds = %81, %73
  %88 = phi i32 [ %86, %81 ], [ %80, %73 ]
  %89 = trunc i32 %88 to i16
  %90 = udiv i16 %89, 255
  %91 = zext i16 %90 to i32
  %92 = load i8, i8* %76, align 1
  %93 = zext i8 %92 to i32
  %94 = icmp eq i8 %92, 0
  br i1 %94, label %95, label %97

95:                                               ; preds = %87
  store i8 %71, i8* %75, align 1
  %96 = trunc i16 %90 to i8
  store i8 %96, i8* %76, align 1
  br label %120

97:                                               ; preds = %87
  %98 = icmp ult i16 %89, 255
  br i1 %98, label %120, label %99

99:                                               ; preds = %97
  %100 = add nuw nsw i32 %91, %93
  %101 = zext i8 %92 to i16
  %102 = mul i16 %90, %101
  %103 = udiv i16 %102, 255
  %104 = zext i16 %103 to i32
  %105 = sub nsw i32 %100, %104
  %106 = trunc i32 %105 to i8
  store i8 %106, i8* %76, align 1
  %107 = mul i16 %90, 255
  %108 = trunc i32 %105 to i16
  %109 = and i16 %108, 255
  %110 = udiv i16 %107, %109
  %111 = zext i16 %110 to i32
  %112 = load i8, i8* %75, align 1
  %113 = zext i8 %112 to i32
  %114 = sub nsw i32 255, %111
  %115 = mul nsw i32 %114, %113
  %116 = mul nsw i32 %65, %111
  %117 = add nsw i32 %115, %116
  %118 = sdiv i32 %117, 255
  %119 = trunc i32 %118 to i8
  store i8 %119, i8* %75, align 1
  br label %120

120:                                              ; preds = %99, %97, %95
  %121 = getelementptr inbounds i8, i8* %76, i64 1
  %122 = getelementptr inbounds i8, i8* %75, i64 1
  %123 = add nuw nsw i64 %74, 1
  %124 = icmp eq i64 %123, %72
  br i1 %124, label %797, label %73

125:                                              ; preds = %59
  br i1 %66, label %126, label %797

126:                                              ; preds = %125
  %127 = and i32 %63, 255
  %128 = icmp eq i8* %4, null
  %129 = zext i32 %3 to i64
  br label %130

130:                                              ; preds = %158, %126
  %131 = phi i64 [ 0, %126 ], [ %160, %158 ]
  %132 = phi i8* [ %1, %126 ], [ %159, %158 ]
  %133 = getelementptr inbounds i8, i8* %2, i64 %131
  %134 = load i8, i8* %133, align 1
  %135 = zext i8 %134 to i32
  %136 = mul nuw nsw i32 %127, %135
  br i1 %128, label %143, label %137

137:                                              ; preds = %130
  %138 = getelementptr inbounds i8, i8* %4, i64 %131
  %139 = load i8, i8* %138, align 1
  %140 = zext i8 %139 to i32
  %141 = mul nuw nsw i32 %136, %140
  %142 = udiv i32 %141, 255
  br label %143

143:                                              ; preds = %137, %130
  %144 = phi i32 [ %142, %137 ], [ %136, %130 ]
  %145 = trunc i32 %144 to i16
  %146 = udiv i16 %145, 255
  %147 = zext i16 %146 to i32
  %148 = icmp ult i16 %145, 255
  br i1 %148, label %158, label %149

149:                                              ; preds = %143
  %150 = load i8, i8* %132, align 1
  %151 = zext i8 %150 to i32
  %152 = sub nuw nsw i32 255, %147
  %153 = mul nsw i32 %152, %151
  %154 = mul nsw i32 %65, %147
  %155 = add nsw i32 %153, %154
  %156 = sdiv i32 %155, 255
  %157 = trunc i32 %156 to i8
  store i8 %157, i8* %132, align 1
  br label %158

158:                                              ; preds = %149, %143
  %159 = getelementptr inbounds i8, i8* %132, i64 1
  %160 = add nuw nsw i64 %131, 1
  %161 = icmp eq i64 %160, %129
  br i1 %161, label %797, label %130

162:                                              ; preds = %56
  %163 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 9
  %164 = load i8, i8* %163, align 4, !range !18
  %165 = icmp eq i8 %164, 0
  %166 = icmp eq i16 %11, 544
  br i1 %165, label %481, label %167

167:                                              ; preds = %162
  %168 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 4
  %169 = load i32, i32* %168, align 8
  %170 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 5
  %171 = load i32, i32* %170, align 4
  %172 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 6
  %173 = load i32, i32* %172, align 8
  %174 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 7
  %175 = load i32, i32* %174, align 4
  %176 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 8
  %177 = load i32, i32* %176, align 8
  %178 = icmp sgt i32 %3, 0
  br i1 %166, label %179, label %351

179:                                              ; preds = %167
  br i1 %178, label %180, label %797

180:                                              ; preds = %179
  %181 = and i32 %169, 255
  %182 = icmp eq i8* %4, null
  %183 = and i32 %177, -4
  %184 = icmp eq i32 %183, 12
  %185 = icmp eq i32 %177, 0
  %186 = bitcast [3 x i32]* %8 to i8*
  %187 = getelementptr inbounds [3 x i32], [3 x i32]* %8, i64 0, i64 0
  %188 = getelementptr inbounds [3 x i32], [3 x i32]* %8, i64 0, i64 1
  %189 = getelementptr inbounds [3 x i32], [3 x i32]* %8, i64 0, i64 2
  %190 = getelementptr inbounds [3 x i8], [3 x i8]* %9, i64 0, i64 0
  %191 = getelementptr inbounds [3 x i8], [3 x i8]* %9, i64 0, i64 1
  %192 = getelementptr inbounds [3 x i8], [3 x i8]* %9, i64 0, i64 2
  %193 = trunc i32 %175 to i8
  %194 = trunc i32 %173 to i8
  %195 = trunc i32 %171 to i8
  %196 = getelementptr inbounds [3 x i8], [3 x i8]* %7, i64 0, i64 0
  %197 = getelementptr inbounds [3 x i8], [3 x i8]* %7, i64 0, i64 1
  %198 = getelementptr inbounds [3 x i8], [3 x i8]* %7, i64 0, i64 2
  %199 = shl i32 %171, 16
  %200 = shl i32 %173, 8
  %201 = or i32 %200, %199
  %202 = or i32 %201, %175
  %203 = zext i32 %3 to i64
  %204 = lshr i32 %202, 16
  %205 = trunc i32 %204 to i8
  %206 = lshr i32 %202, 8
  %207 = trunc i32 %206 to i8
  br label %208

208:                                              ; preds = %347, %180
  %209 = phi i64 [ 0, %180 ], [ %349, %347 ]
  %210 = phi i8* [ %1, %180 ], [ %348, %347 ]
  %211 = getelementptr inbounds i8, i8* %2, i64 %209
  %212 = load i8, i8* %211, align 1
  %213 = zext i8 %212 to i32
  %214 = mul nuw nsw i32 %181, %213
  br i1 %182, label %221, label %215

215:                                              ; preds = %208
  %216 = getelementptr inbounds i8, i8* %4, i64 %209
  %217 = load i8, i8* %216, align 1
  %218 = zext i8 %217 to i32
  %219 = mul nuw nsw i32 %214, %218
  %220 = udiv i32 %219, 255
  br label %221

221:                                              ; preds = %215, %208
  %222 = phi i32 [ %220, %215 ], [ %214, %208 ]
  %223 = trunc i32 %222 to i16
  %224 = udiv i16 %223, 255
  %225 = zext i16 %224 to i32
  %226 = getelementptr inbounds i8, i8* %210, i64 3
  %227 = load i8, i8* %226, align 1
  %228 = zext i8 %227 to i32
  %229 = icmp eq i8 %227, 0
  br i1 %229, label %230, label %237

230:                                              ; preds = %221
  %231 = shl i32 %225, 24
  %232 = or i32 %231, %202
  %233 = lshr i32 %232, 24
  %234 = trunc i32 %233 to i8
  store i8 %234, i8* %226, align 1
  store i8 %205, i8* %210, align 1
  %235 = getelementptr inbounds i8, i8* %210, i64 1
  store i8 %207, i8* %235, align 1
  %236 = getelementptr inbounds i8, i8* %210, i64 2
  store i8 %193, i8* %236, align 1
  br label %347

237:                                              ; preds = %221
  %238 = icmp ult i16 %223, 255
  br i1 %238, label %347, label %239

239:                                              ; preds = %237
  %240 = add nuw nsw i32 %225, %228
  %241 = zext i8 %227 to i16
  %242 = mul i16 %224, %241
  %243 = udiv i16 %242, 255
  %244 = zext i16 %243 to i32
  %245 = sub nsw i32 %240, %244
  %246 = trunc i32 %245 to i8
  store i8 %246, i8* %226, align 1
  %247 = mul i16 %224, 255
  %248 = trunc i32 %245 to i16
  %249 = and i16 %248, 255
  %250 = udiv i16 %247, %249
  %251 = zext i16 %250 to i32
  br i1 %184, label %252, label %283

252:                                              ; preds = %239
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %186) #7
  store i32 -1431655766, i32* %187, align 4
  store i32 -1431655766, i32* %188, align 4
  store i32 -1431655766, i32* %189, align 4
  call void @llvm.lifetime.start.p0i8(i64 3, i8* nonnull %190) #7
  store i8 %193, i8* %190, align 1
  store i8 %194, i8* %191, align 1
  store i8 %195, i8* %192, align 1
  call void @llvm.lifetime.start.p0i8(i64 3, i8* nonnull %196) #7
  %253 = load i8, i8* %210, align 1
  store i8 %253, i8* %198, align 1
  %254 = getelementptr inbounds i8, i8* %210, i64 1
  %255 = load i8, i8* %254, align 1
  store i8 %255, i8* %197, align 1
  %256 = getelementptr inbounds i8, i8* %210, i64 2
  %257 = load i8, i8* %256, align 1
  store i8 %257, i8* %196, align 1
  call fastcc void @_ZN12_GLOBAL__N_19RGB_BlendE9BlendModePKhS2_Pi(i32 %177, i8* nonnull %190, i8* nonnull %196, i32* nonnull %187) #7
  %258 = load i8, i8* %256, align 1
  %259 = zext i8 %258 to i32
  %260 = sub nsw i32 255, %251
  %261 = mul nsw i32 %260, %259
  %262 = load i32, i32* %187, align 4
  %263 = mul nsw i32 %262, %251
  %264 = add nsw i32 %261, %263
  %265 = sdiv i32 %264, 255
  %266 = trunc i32 %265 to i8
  store i8 %266, i8* %256, align 1
  %267 = load i8, i8* %254, align 1
  %268 = zext i8 %267 to i32
  %269 = mul nsw i32 %260, %268
  %270 = load i32, i32* %188, align 4
  %271 = mul nsw i32 %270, %251
  %272 = add nsw i32 %269, %271
  %273 = sdiv i32 %272, 255
  %274 = trunc i32 %273 to i8
  store i8 %274, i8* %254, align 1
  %275 = load i8, i8* %210, align 1
  %276 = zext i8 %275 to i32
  %277 = mul nsw i32 %260, %276
  %278 = load i32, i32* %189, align 4
  %279 = mul nsw i32 %278, %251
  %280 = add nsw i32 %277, %279
  %281 = sdiv i32 %280, 255
  %282 = trunc i32 %281 to i8
  store i8 %282, i8* %210, align 1
  call void @llvm.lifetime.end.p0i8(i64 3, i8* nonnull %196) #7
  call void @llvm.lifetime.end.p0i8(i64 3, i8* nonnull %190) #7
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %186) #7
  br label %347

283:                                              ; preds = %239
  %284 = getelementptr inbounds i8, i8* %210, i64 2
  %285 = load i8, i8* %284, align 1
  %286 = zext i8 %285 to i32
  br i1 %185, label %325, label %287

287:                                              ; preds = %283
  %288 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %177, i32 %286, i32 %175) #7
  %289 = xor i32 %228, 255
  %290 = mul nsw i32 %289, %175
  %291 = mul nsw i32 %288, %228
  %292 = add nsw i32 %291, %290
  %293 = sdiv i32 %292, 255
  %294 = sub nsw i32 255, %251
  %295 = mul nsw i32 %294, %286
  %296 = mul nsw i32 %293, %251
  %297 = add nsw i32 %296, %295
  %298 = sdiv i32 %297, 255
  %299 = trunc i32 %298 to i8
  store i8 %299, i8* %284, align 1
  %300 = getelementptr inbounds i8, i8* %210, i64 1
  %301 = load i8, i8* %300, align 1
  %302 = zext i8 %301 to i32
  %303 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %177, i32 %302, i32 %173) #7
  %304 = mul nsw i32 %289, %173
  %305 = mul nsw i32 %303, %228
  %306 = add nsw i32 %305, %304
  %307 = sdiv i32 %306, 255
  %308 = mul nsw i32 %294, %302
  %309 = mul nsw i32 %307, %251
  %310 = add nsw i32 %309, %308
  %311 = sdiv i32 %310, 255
  %312 = trunc i32 %311 to i8
  store i8 %312, i8* %300, align 1
  %313 = load i8, i8* %210, align 1
  %314 = zext i8 %313 to i32
  %315 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %177, i32 %314, i32 %171) #7
  %316 = mul nsw i32 %289, %171
  %317 = mul nsw i32 %315, %228
  %318 = add nsw i32 %317, %316
  %319 = sdiv i32 %318, 255
  %320 = mul nsw i32 %294, %314
  %321 = mul nsw i32 %319, %251
  %322 = add nsw i32 %321, %320
  %323 = sdiv i32 %322, 255
  %324 = trunc i32 %323 to i8
  store i8 %324, i8* %210, align 1
  br label %347

325:                                              ; preds = %283
  %326 = sub nsw i32 255, %251
  %327 = mul nsw i32 %326, %286
  %328 = mul nsw i32 %175, %251
  %329 = add nsw i32 %327, %328
  %330 = sdiv i32 %329, 255
  %331 = trunc i32 %330 to i8
  store i8 %331, i8* %284, align 1
  %332 = getelementptr inbounds i8, i8* %210, i64 1
  %333 = load i8, i8* %332, align 1
  %334 = zext i8 %333 to i32
  %335 = mul nsw i32 %326, %334
  %336 = mul nsw i32 %173, %251
  %337 = add nsw i32 %335, %336
  %338 = sdiv i32 %337, 255
  %339 = trunc i32 %338 to i8
  store i8 %339, i8* %332, align 1
  %340 = load i8, i8* %210, align 1
  %341 = zext i8 %340 to i32
  %342 = mul nsw i32 %326, %341
  %343 = mul nsw i32 %171, %251
  %344 = add nsw i32 %342, %343
  %345 = sdiv i32 %344, 255
  %346 = trunc i32 %345 to i8
  store i8 %346, i8* %210, align 1
  br label %347

347:                                              ; preds = %325, %287, %252, %237, %230
  %348 = getelementptr inbounds i8, i8* %210, i64 4
  %349 = add nuw nsw i64 %209, 1
  %350 = icmp eq i64 %349, %203
  br i1 %350, label %797, label %208

351:                                              ; preds = %167
  br i1 %178, label %352, label %797

352:                                              ; preds = %351
  %353 = lshr i16 %11, 3
  %354 = and i16 %353, 31
  %355 = and i32 %169, 255
  %356 = icmp eq i8* %4, null
  %357 = and i32 %177, -4
  %358 = icmp eq i32 %357, 12
  %359 = icmp eq i32 %177, 0
  %360 = bitcast [3 x i32]* %8 to i8*
  %361 = getelementptr inbounds [3 x i32], [3 x i32]* %8, i64 0, i64 0
  %362 = getelementptr inbounds [3 x i32], [3 x i32]* %8, i64 0, i64 1
  %363 = getelementptr inbounds [3 x i32], [3 x i32]* %8, i64 0, i64 2
  %364 = getelementptr inbounds [3 x i8], [3 x i8]* %9, i64 0, i64 0
  %365 = getelementptr inbounds [3 x i8], [3 x i8]* %9, i64 0, i64 1
  %366 = getelementptr inbounds [3 x i8], [3 x i8]* %9, i64 0, i64 2
  %367 = trunc i32 %175 to i8
  %368 = trunc i32 %173 to i8
  %369 = trunc i32 %171 to i8
  %370 = getelementptr inbounds [3 x i8], [3 x i8]* %7, i64 0, i64 0
  %371 = getelementptr inbounds [3 x i8], [3 x i8]* %7, i64 0, i64 1
  %372 = getelementptr inbounds [3 x i8], [3 x i8]* %7, i64 0, i64 2
  %373 = zext i16 %354 to i64
  %374 = zext i32 %3 to i64
  br label %375

375:                                              ; preds = %477, %352
  %376 = phi i64 [ 0, %352 ], [ %479, %477 ]
  %377 = phi i8* [ %1, %352 ], [ %478, %477 ]
  %378 = getelementptr inbounds i8, i8* %2, i64 %376
  %379 = load i8, i8* %378, align 1
  %380 = zext i8 %379 to i32
  %381 = mul nuw nsw i32 %355, %380
  br i1 %356, label %388, label %382

382:                                              ; preds = %375
  %383 = getelementptr inbounds i8, i8* %4, i64 %376
  %384 = load i8, i8* %383, align 1
  %385 = zext i8 %384 to i32
  %386 = mul nuw nsw i32 %381, %385
  %387 = udiv i32 %386, 255
  br label %388

388:                                              ; preds = %382, %375
  %389 = phi i32 [ %387, %382 ], [ %381, %375 ]
  %390 = trunc i32 %389 to i16
  %391 = udiv i16 %390, 255
  %392 = zext i16 %391 to i32
  %393 = icmp ult i16 %390, 255
  br i1 %393, label %477, label %394

394:                                              ; preds = %388
  br i1 %358, label %395, label %426

395:                                              ; preds = %394
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %360) #7
  store i32 -1431655766, i32* %361, align 4
  store i32 -1431655766, i32* %362, align 4
  store i32 -1431655766, i32* %363, align 4
  call void @llvm.lifetime.start.p0i8(i64 3, i8* nonnull %364) #7
  store i8 %367, i8* %364, align 1
  store i8 %368, i8* %365, align 1
  store i8 %369, i8* %366, align 1
  call void @llvm.lifetime.start.p0i8(i64 3, i8* nonnull %370) #7
  store i8 -86, i8* %370, align 1
  store i8 -86, i8* %371, align 1
  store i8 -86, i8* %372, align 1
  %396 = load i8, i8* %377, align 1
  store i8 %396, i8* %372, align 1
  %397 = getelementptr inbounds i8, i8* %377, i64 1
  %398 = load i8, i8* %397, align 1
  store i8 %398, i8* %371, align 1
  %399 = getelementptr inbounds i8, i8* %377, i64 2
  %400 = load i8, i8* %399, align 1
  store i8 %400, i8* %370, align 1
  call fastcc void @_ZN12_GLOBAL__N_19RGB_BlendE9BlendModePKhS2_Pi(i32 %177, i8* nonnull %364, i8* nonnull %370, i32* nonnull %361) #7
  %401 = load i8, i8* %399, align 1
  %402 = zext i8 %401 to i32
  %403 = sub nuw nsw i32 255, %392
  %404 = mul nsw i32 %403, %402
  %405 = load i32, i32* %361, align 4
  %406 = mul nsw i32 %405, %392
  %407 = add nsw i32 %404, %406
  %408 = sdiv i32 %407, 255
  %409 = trunc i32 %408 to i8
  store i8 %409, i8* %399, align 1
  %410 = load i8, i8* %397, align 1
  %411 = zext i8 %410 to i32
  %412 = mul nsw i32 %403, %411
  %413 = load i32, i32* %362, align 4
  %414 = mul nsw i32 %413, %392
  %415 = add nsw i32 %412, %414
  %416 = sdiv i32 %415, 255
  %417 = trunc i32 %416 to i8
  store i8 %417, i8* %397, align 1
  %418 = load i8, i8* %377, align 1
  %419 = zext i8 %418 to i32
  %420 = mul nsw i32 %403, %419
  %421 = load i32, i32* %363, align 4
  %422 = mul nsw i32 %421, %392
  %423 = add nsw i32 %420, %422
  %424 = sdiv i32 %423, 255
  %425 = trunc i32 %424 to i8
  store i8 %425, i8* %377, align 1
  call void @llvm.lifetime.end.p0i8(i64 3, i8* nonnull %370) #7
  call void @llvm.lifetime.end.p0i8(i64 3, i8* nonnull %364) #7
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %360) #7
  br label %477

426:                                              ; preds = %394
  %427 = getelementptr inbounds i8, i8* %377, i64 2
  %428 = load i8, i8* %427, align 1
  %429 = zext i8 %428 to i32
  br i1 %359, label %455, label %430

430:                                              ; preds = %426
  %431 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %177, i32 %429, i32 %175) #7
  %432 = sub nuw nsw i32 255, %392
  %433 = mul nsw i32 %432, %429
  %434 = mul nsw i32 %431, %392
  %435 = add nsw i32 %434, %433
  %436 = sdiv i32 %435, 255
  %437 = trunc i32 %436 to i8
  store i8 %437, i8* %427, align 1
  %438 = getelementptr inbounds i8, i8* %377, i64 1
  %439 = load i8, i8* %438, align 1
  %440 = zext i8 %439 to i32
  %441 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %177, i32 %440, i32 %173) #7
  %442 = mul nsw i32 %432, %440
  %443 = mul nsw i32 %441, %392
  %444 = add nsw i32 %442, %443
  %445 = sdiv i32 %444, 255
  %446 = trunc i32 %445 to i8
  store i8 %446, i8* %438, align 1
  %447 = load i8, i8* %377, align 1
  %448 = zext i8 %447 to i32
  %449 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %177, i32 %448, i32 %171) #7
  %450 = mul nsw i32 %432, %448
  %451 = mul nsw i32 %449, %392
  %452 = add nsw i32 %450, %451
  %453 = sdiv i32 %452, 255
  %454 = trunc i32 %453 to i8
  store i8 %454, i8* %377, align 1
  br label %477

455:                                              ; preds = %426
  %456 = sub nuw nsw i32 255, %392
  %457 = mul nsw i32 %456, %429
  %458 = mul nsw i32 %175, %392
  %459 = add nsw i32 %457, %458
  %460 = sdiv i32 %459, 255
  %461 = trunc i32 %460 to i8
  store i8 %461, i8* %427, align 1
  %462 = getelementptr inbounds i8, i8* %377, i64 1
  %463 = load i8, i8* %462, align 1
  %464 = zext i8 %463 to i32
  %465 = mul nsw i32 %456, %464
  %466 = mul nsw i32 %173, %392
  %467 = add nsw i32 %465, %466
  %468 = sdiv i32 %467, 255
  %469 = trunc i32 %468 to i8
  store i8 %469, i8* %462, align 1
  %470 = load i8, i8* %377, align 1
  %471 = zext i8 %470 to i32
  %472 = mul nsw i32 %456, %471
  %473 = mul nsw i32 %171, %392
  %474 = add nsw i32 %472, %473
  %475 = sdiv i32 %474, 255
  %476 = trunc i32 %475 to i8
  store i8 %476, i8* %377, align 1
  br label %477

477:                                              ; preds = %455, %430, %395, %388
  %478 = getelementptr inbounds i8, i8* %377, i64 %373
  %479 = add nuw nsw i64 %376, 1
  %480 = icmp eq i64 %479, %374
  br i1 %480, label %797, label %375

481:                                              ; preds = %162
  br i1 %166, label %482, label %660

482:                                              ; preds = %481
  %483 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 5
  %484 = load i32, i32* %483, align 4
  %485 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 6
  %486 = load i32, i32* %485, align 8
  %487 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 7
  %488 = load i32, i32* %487, align 4
  %489 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 8
  %490 = load i32, i32* %489, align 8
  %491 = icmp sgt i32 %3, 0
  br i1 %491, label %492, label %797

492:                                              ; preds = %482
  %493 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 4
  %494 = load i32, i32* %493, align 8
  %495 = and i32 %494, 255
  %496 = icmp eq i8* %4, null
  %497 = and i32 %490, -4
  %498 = icmp eq i32 %497, 12
  %499 = icmp eq i32 %490, 0
  %500 = bitcast [3 x i32]* %8 to i8*
  %501 = getelementptr inbounds [3 x i32], [3 x i32]* %8, i64 0, i64 0
  %502 = getelementptr inbounds [3 x i32], [3 x i32]* %8, i64 0, i64 1
  %503 = getelementptr inbounds [3 x i32], [3 x i32]* %8, i64 0, i64 2
  %504 = getelementptr inbounds [3 x i8], [3 x i8]* %9, i64 0, i64 0
  %505 = getelementptr inbounds [3 x i8], [3 x i8]* %9, i64 0, i64 1
  %506 = getelementptr inbounds [3 x i8], [3 x i8]* %9, i64 0, i64 2
  %507 = trunc i32 %488 to i8
  %508 = trunc i32 %486 to i8
  %509 = trunc i32 %484 to i8
  %510 = shl i32 %484, 16
  %511 = shl i32 %486, 8
  %512 = or i32 %511, %510
  %513 = or i32 %512, %488
  %514 = zext i32 %3 to i64
  %515 = lshr i32 %513, 8
  %516 = trunc i32 %515 to i8
  %517 = lshr i32 %513, 16
  %518 = trunc i32 %517 to i8
  br label %519

519:                                              ; preds = %656, %492
  %520 = phi i64 [ 0, %492 ], [ %658, %656 ]
  %521 = phi i8* [ %1, %492 ], [ %657, %656 ]
  %522 = getelementptr inbounds i8, i8* %2, i64 %520
  %523 = load i8, i8* %522, align 1
  %524 = zext i8 %523 to i32
  %525 = mul nuw nsw i32 %495, %524
  br i1 %496, label %532, label %526

526:                                              ; preds = %519
  %527 = getelementptr inbounds i8, i8* %4, i64 %520
  %528 = load i8, i8* %527, align 1
  %529 = zext i8 %528 to i32
  %530 = mul nuw nsw i32 %525, %529
  %531 = udiv i32 %530, 255
  br label %532

532:                                              ; preds = %526, %519
  %533 = phi i32 [ %531, %526 ], [ %525, %519 ]
  %534 = trunc i32 %533 to i16
  %535 = udiv i16 %534, 255
  %536 = zext i16 %535 to i32
  %537 = getelementptr inbounds i8, i8* %521, i64 3
  %538 = load i8, i8* %537, align 1
  %539 = zext i8 %538 to i32
  %540 = icmp eq i8 %538, 0
  br i1 %540, label %541, label %548

541:                                              ; preds = %532
  %542 = shl i32 %536, 24
  %543 = or i32 %542, %513
  store i8 %507, i8* %521, align 1
  %544 = getelementptr inbounds i8, i8* %521, i64 1
  store i8 %516, i8* %544, align 1
  %545 = getelementptr inbounds i8, i8* %521, i64 2
  store i8 %518, i8* %545, align 1
  %546 = lshr i32 %543, 24
  %547 = trunc i32 %546 to i8
  store i8 %547, i8* %537, align 1
  br label %656

548:                                              ; preds = %532
  %549 = icmp ult i16 %534, 255
  br i1 %549, label %656, label %550

550:                                              ; preds = %548
  %551 = add nuw nsw i32 %536, %539
  %552 = zext i8 %538 to i16
  %553 = mul i16 %535, %552
  %554 = udiv i16 %553, 255
  %555 = zext i16 %554 to i32
  %556 = sub nsw i32 %551, %555
  %557 = trunc i32 %556 to i8
  store i8 %557, i8* %537, align 1
  %558 = mul i16 %535, 255
  %559 = trunc i32 %556 to i16
  %560 = and i16 %559, 255
  %561 = udiv i16 %558, %560
  %562 = zext i16 %561 to i32
  br i1 %498, label %563, label %591

563:                                              ; preds = %550
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %500) #7
  store i32 -1431655766, i32* %501, align 4
  store i32 -1431655766, i32* %502, align 4
  store i32 -1431655766, i32* %503, align 4
  call void @llvm.lifetime.start.p0i8(i64 3, i8* nonnull %504) #7
  store i8 %507, i8* %504, align 1
  store i8 %508, i8* %505, align 1
  store i8 %509, i8* %506, align 1
  call fastcc void @_ZN12_GLOBAL__N_19RGB_BlendE9BlendModePKhS2_Pi(i32 %490, i8* nonnull %504, i8* %521, i32* nonnull %501) #7
  %564 = load i8, i8* %521, align 1
  %565 = zext i8 %564 to i32
  %566 = sub nsw i32 255, %562
  %567 = mul nsw i32 %566, %565
  %568 = load i32, i32* %501, align 4
  %569 = mul nsw i32 %568, %562
  %570 = add nsw i32 %567, %569
  %571 = sdiv i32 %570, 255
  %572 = trunc i32 %571 to i8
  store i8 %572, i8* %521, align 1
  %573 = getelementptr inbounds i8, i8* %521, i64 1
  %574 = load i8, i8* %573, align 1
  %575 = zext i8 %574 to i32
  %576 = mul nsw i32 %566, %575
  %577 = load i32, i32* %502, align 4
  %578 = mul nsw i32 %577, %562
  %579 = add nsw i32 %576, %578
  %580 = sdiv i32 %579, 255
  %581 = trunc i32 %580 to i8
  store i8 %581, i8* %573, align 1
  %582 = getelementptr inbounds i8, i8* %521, i64 2
  %583 = load i8, i8* %582, align 1
  %584 = zext i8 %583 to i32
  %585 = mul nsw i32 %566, %584
  %586 = load i32, i32* %503, align 4
  %587 = mul nsw i32 %586, %562
  %588 = add nsw i32 %585, %587
  %589 = sdiv i32 %588, 255
  %590 = trunc i32 %589 to i8
  store i8 %590, i8* %582, align 1
  call void @llvm.lifetime.end.p0i8(i64 3, i8* nonnull %504) #7
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %500) #7
  br label %656

591:                                              ; preds = %550
  %592 = load i8, i8* %521, align 1
  %593 = zext i8 %592 to i32
  br i1 %499, label %633, label %594

594:                                              ; preds = %591
  %595 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %490, i32 %593, i32 %488) #7
  %596 = xor i32 %539, 255
  %597 = mul nsw i32 %596, %488
  %598 = mul nsw i32 %595, %539
  %599 = add nsw i32 %598, %597
  %600 = sdiv i32 %599, 255
  %601 = sub nsw i32 255, %562
  %602 = mul nsw i32 %601, %593
  %603 = mul nsw i32 %600, %562
  %604 = add nsw i32 %603, %602
  %605 = sdiv i32 %604, 255
  %606 = trunc i32 %605 to i8
  store i8 %606, i8* %521, align 1
  %607 = getelementptr inbounds i8, i8* %521, i64 1
  %608 = load i8, i8* %607, align 1
  %609 = zext i8 %608 to i32
  %610 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %490, i32 %609, i32 %486) #7
  %611 = mul nsw i32 %596, %486
  %612 = mul nsw i32 %610, %539
  %613 = add nsw i32 %612, %611
  %614 = sdiv i32 %613, 255
  %615 = mul nsw i32 %601, %609
  %616 = mul nsw i32 %614, %562
  %617 = add nsw i32 %616, %615
  %618 = sdiv i32 %617, 255
  %619 = trunc i32 %618 to i8
  store i8 %619, i8* %607, align 1
  %620 = getelementptr inbounds i8, i8* %521, i64 2
  %621 = load i8, i8* %620, align 1
  %622 = zext i8 %621 to i32
  %623 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %490, i32 %622, i32 %484) #7
  %624 = mul nsw i32 %596, %484
  %625 = mul nsw i32 %623, %539
  %626 = add nsw i32 %625, %624
  %627 = sdiv i32 %626, 255
  %628 = mul nsw i32 %601, %622
  %629 = mul nsw i32 %627, %562
  %630 = add nsw i32 %629, %628
  %631 = sdiv i32 %630, 255
  %632 = trunc i32 %631 to i8
  store i8 %632, i8* %620, align 1
  br label %656

633:                                              ; preds = %591
  %634 = sub nsw i32 255, %562
  %635 = mul nsw i32 %634, %593
  %636 = mul nsw i32 %488, %562
  %637 = add nsw i32 %635, %636
  %638 = sdiv i32 %637, 255
  %639 = trunc i32 %638 to i8
  store i8 %639, i8* %521, align 1
  %640 = getelementptr inbounds i8, i8* %521, i64 1
  %641 = load i8, i8* %640, align 1
  %642 = zext i8 %641 to i32
  %643 = mul nsw i32 %634, %642
  %644 = mul nsw i32 %486, %562
  %645 = add nsw i32 %643, %644
  %646 = sdiv i32 %645, 255
  %647 = trunc i32 %646 to i8
  store i8 %647, i8* %640, align 1
  %648 = getelementptr inbounds i8, i8* %521, i64 2
  %649 = load i8, i8* %648, align 1
  %650 = zext i8 %649 to i32
  %651 = mul nsw i32 %634, %650
  %652 = mul nsw i32 %484, %562
  %653 = add nsw i32 %651, %652
  %654 = sdiv i32 %653, 255
  %655 = trunc i32 %654 to i8
  store i8 %655, i8* %648, align 1
  br label %656

656:                                              ; preds = %633, %594, %563, %548, %541
  %657 = getelementptr inbounds i8, i8* %521, i64 4
  %658 = add nuw nsw i64 %520, 1
  %659 = icmp eq i64 %658, %514
  br i1 %659, label %797, label %519

660:                                              ; preds = %481
  switch i16 %11, label %797 [
    i16 24, label %661
    i16 32, label %661
  ]

661:                                              ; preds = %660, %660
  %662 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 5
  %663 = load i32, i32* %662, align 4
  %664 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 6
  %665 = load i32, i32* %664, align 8
  %666 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 7
  %667 = load i32, i32* %666, align 4
  %668 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 8
  %669 = load i32, i32* %668, align 8
  %670 = icmp sgt i32 %3, 0
  br i1 %670, label %671, label %797

671:                                              ; preds = %661
  %672 = lshr i16 %11, 3
  %673 = and i16 %672, 31
  %674 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 4
  %675 = load i32, i32* %674, align 8
  %676 = and i32 %675, 255
  %677 = icmp eq i8* %4, null
  %678 = and i32 %669, -4
  %679 = icmp eq i32 %678, 12
  %680 = icmp eq i32 %669, 0
  %681 = bitcast [3 x i32]* %8 to i8*
  %682 = getelementptr inbounds [3 x i32], [3 x i32]* %8, i64 0, i64 0
  %683 = getelementptr inbounds [3 x i32], [3 x i32]* %8, i64 0, i64 1
  %684 = getelementptr inbounds [3 x i32], [3 x i32]* %8, i64 0, i64 2
  %685 = getelementptr inbounds [3 x i8], [3 x i8]* %9, i64 0, i64 0
  %686 = getelementptr inbounds [3 x i8], [3 x i8]* %9, i64 0, i64 1
  %687 = getelementptr inbounds [3 x i8], [3 x i8]* %9, i64 0, i64 2
  %688 = trunc i32 %667 to i8
  %689 = trunc i32 %665 to i8
  %690 = trunc i32 %663 to i8
  %691 = zext i32 %3 to i64
  %692 = zext i16 %673 to i64
  br label %693

693:                                              ; preds = %793, %671
  %694 = phi i64 [ 0, %671 ], [ %795, %793 ]
  %695 = phi i8* [ %1, %671 ], [ %794, %793 ]
  %696 = getelementptr inbounds i8, i8* %2, i64 %694
  %697 = load i8, i8* %696, align 1
  %698 = zext i8 %697 to i32
  %699 = mul nuw nsw i32 %676, %698
  br i1 %677, label %706, label %700

700:                                              ; preds = %693
  %701 = getelementptr inbounds i8, i8* %4, i64 %694
  %702 = load i8, i8* %701, align 1
  %703 = zext i8 %702 to i32
  %704 = mul nuw nsw i32 %699, %703
  %705 = udiv i32 %704, 255
  br label %706

706:                                              ; preds = %700, %693
  %707 = phi i32 [ %705, %700 ], [ %699, %693 ]
  %708 = trunc i32 %707 to i16
  %709 = udiv i16 %708, 255
  %710 = zext i16 %709 to i32
  %711 = icmp ult i16 %708, 255
  br i1 %711, label %793, label %712

712:                                              ; preds = %706
  br i1 %679, label %713, label %741

713:                                              ; preds = %712
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %681) #7
  store i32 -1431655766, i32* %682, align 4
  store i32 -1431655766, i32* %683, align 4
  store i32 -1431655766, i32* %684, align 4
  call void @llvm.lifetime.start.p0i8(i64 3, i8* nonnull %685) #7
  store i8 %688, i8* %685, align 1
  store i8 %689, i8* %686, align 1
  store i8 %690, i8* %687, align 1
  call fastcc void @_ZN12_GLOBAL__N_19RGB_BlendE9BlendModePKhS2_Pi(i32 %669, i8* nonnull %685, i8* %695, i32* nonnull %682) #7
  %714 = load i8, i8* %695, align 1
  %715 = zext i8 %714 to i32
  %716 = sub nuw nsw i32 255, %710
  %717 = mul nsw i32 %716, %715
  %718 = load i32, i32* %682, align 4
  %719 = mul nsw i32 %718, %710
  %720 = add nsw i32 %717, %719
  %721 = sdiv i32 %720, 255
  %722 = trunc i32 %721 to i8
  store i8 %722, i8* %695, align 1
  %723 = getelementptr inbounds i8, i8* %695, i64 1
  %724 = load i8, i8* %723, align 1
  %725 = zext i8 %724 to i32
  %726 = mul nsw i32 %716, %725
  %727 = load i32, i32* %683, align 4
  %728 = mul nsw i32 %727, %710
  %729 = add nsw i32 %726, %728
  %730 = sdiv i32 %729, 255
  %731 = trunc i32 %730 to i8
  store i8 %731, i8* %723, align 1
  %732 = getelementptr inbounds i8, i8* %695, i64 2
  %733 = load i8, i8* %732, align 1
  %734 = zext i8 %733 to i32
  %735 = mul nsw i32 %716, %734
  %736 = load i32, i32* %684, align 4
  %737 = mul nsw i32 %736, %710
  %738 = add nsw i32 %735, %737
  %739 = sdiv i32 %738, 255
  %740 = trunc i32 %739 to i8
  store i8 %740, i8* %732, align 1
  call void @llvm.lifetime.end.p0i8(i64 3, i8* nonnull %685) #7
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %681) #7
  br label %793

741:                                              ; preds = %712
  %742 = load i8, i8* %695, align 1
  %743 = zext i8 %742 to i32
  br i1 %680, label %770, label %744

744:                                              ; preds = %741
  %745 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %669, i32 %743, i32 %667) #7
  %746 = sub nuw nsw i32 255, %710
  %747 = mul nsw i32 %746, %743
  %748 = mul nsw i32 %745, %710
  %749 = add nsw i32 %748, %747
  %750 = sdiv i32 %749, 255
  %751 = trunc i32 %750 to i8
  store i8 %751, i8* %695, align 1
  %752 = getelementptr inbounds i8, i8* %695, i64 1
  %753 = load i8, i8* %752, align 1
  %754 = zext i8 %753 to i32
  %755 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %669, i32 %754, i32 %665) #7
  %756 = mul nsw i32 %746, %754
  %757 = mul nsw i32 %755, %710
  %758 = add nsw i32 %756, %757
  %759 = sdiv i32 %758, 255
  %760 = trunc i32 %759 to i8
  store i8 %760, i8* %752, align 1
  %761 = getelementptr inbounds i8, i8* %695, i64 2
  %762 = load i8, i8* %761, align 1
  %763 = zext i8 %762 to i32
  %764 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %669, i32 %763, i32 %663) #7
  %765 = mul nsw i32 %746, %763
  %766 = mul nsw i32 %764, %710
  %767 = add nsw i32 %765, %766
  %768 = sdiv i32 %767, 255
  %769 = trunc i32 %768 to i8
  store i8 %769, i8* %761, align 1
  br label %793

770:                                              ; preds = %741
  %771 = sub nuw nsw i32 255, %710
  %772 = mul nsw i32 %771, %743
  %773 = mul nsw i32 %667, %710
  %774 = add nsw i32 %772, %773
  %775 = sdiv i32 %774, 255
  %776 = trunc i32 %775 to i8
  store i8 %776, i8* %695, align 1
  %777 = getelementptr inbounds i8, i8* %695, i64 1
  %778 = load i8, i8* %777, align 1
  %779 = zext i8 %778 to i32
  %780 = mul nsw i32 %771, %779
  %781 = mul nsw i32 %665, %710
  %782 = add nsw i32 %780, %781
  %783 = sdiv i32 %782, 255
  %784 = trunc i32 %783 to i8
  store i8 %784, i8* %777, align 1
  %785 = getelementptr inbounds i8, i8* %695, i64 2
  %786 = load i8, i8* %785, align 1
  %787 = zext i8 %786 to i32
  %788 = mul nsw i32 %771, %787
  %789 = mul nsw i32 %663, %710
  %790 = add nsw i32 %788, %789
  %791 = sdiv i32 %790, 255
  %792 = trunc i32 %791 to i8
  store i8 %792, i8* %785, align 1
  br label %793

793:                                              ; preds = %713, %744, %770, %706
  %794 = getelementptr inbounds i8, i8* %695, i64 %692
  %795 = add nuw nsw i64 %694, 1
  %796 = icmp eq i64 %795, %691
  br i1 %796, label %797, label %693

797:                                              ; preds = %477, %347, %793, %656, %120, %158, %52, %661, %482, %351, %179, %125, %67, %13, %660
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN22CFX_ScanlineCompositor20CompositeBitMaskLineEPhPKhiiS2_S0_(%class.CFX_ScanlineCompositor* nocapture readonly, i8* nocapture, i8* nocapture readonly, i32, i32, i8* readonly, i8* nocapture) local_unnamed_addr #0 align 2 {
  %8 = alloca [3 x i8], align 1
  %9 = alloca [3 x i32], align 4
  %10 = alloca [3 x i8], align 1
  %11 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 2
  %12 = load i16, i16* %11, align 2
  %13 = icmp eq i16 %12, 264
  br i1 %13, label %14, label %66

14:                                               ; preds = %7
  %15 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 4
  %16 = load i32, i32* %15, align 8
  %17 = icmp sgt i32 %4, 0
  br i1 %17, label %18, label %991

18:                                               ; preds = %14
  %19 = icmp eq i8* %5, null
  %20 = trunc i32 %16 to i16
  %21 = and i16 %20, 255
  %22 = and i32 %16, 255
  %23 = zext i32 %4 to i64
  br label %24

24:                                               ; preds = %62, %18
  %25 = phi i64 [ 0, %18 ], [ %64, %62 ]
  %26 = phi i8* [ %1, %18 ], [ %63, %62 ]
  %27 = trunc i64 %25 to i32
  %28 = add nsw i32 %27, %3
  %29 = sdiv i32 %28, 8
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds i8, i8* %2, i64 %30
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = srem i32 %28, 8
  %35 = sub nsw i32 7, %34
  %36 = shl i32 1, %35
  %37 = and i32 %36, %33
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %62, label %39

39:                                               ; preds = %24
  br i1 %19, label %47, label %40

40:                                               ; preds = %39
  %41 = getelementptr inbounds i8, i8* %5, i64 %25
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i16
  %44 = mul nuw i16 %21, %43
  %45 = udiv i16 %44, 255
  %46 = zext i16 %45 to i32
  br label %47

47:                                               ; preds = %40, %39
  %48 = phi i32 [ %46, %40 ], [ %22, %39 ]
  %49 = load i8, i8* %26, align 1
  %50 = icmp eq i8 %49, 0
  br i1 %50, label %51, label %53

51:                                               ; preds = %47
  %52 = trunc i32 %48 to i8
  store i8 %52, i8* %26, align 1
  br label %62

53:                                               ; preds = %47
  %54 = icmp eq i32 %48, 0
  br i1 %54, label %62, label %55

55:                                               ; preds = %53
  %56 = zext i8 %49 to i32
  %57 = add nuw nsw i32 %48, %56
  %58 = mul nuw nsw i32 %48, %56
  %59 = udiv i32 %58, 255
  %60 = sub nsw i32 %57, %59
  %61 = trunc i32 %60 to i8
  store i8 %61, i8* %26, align 1
  br label %62

62:                                               ; preds = %55, %53, %51, %24
  %63 = getelementptr inbounds i8, i8* %26, i64 1
  %64 = add nuw nsw i64 %25, 1
  %65 = icmp eq i64 %64, %23
  br i1 %65, label %991, label %24

66:                                               ; preds = %7
  %67 = and i16 %12, 255
  %68 = icmp eq i16 %67, 8
  br i1 %68, label %69, label %186

69:                                               ; preds = %66
  %70 = and i16 %12, 512
  %71 = icmp eq i16 %70, 0
  %72 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 4
  %73 = load i32, i32* %72, align 8
  %74 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 5
  %75 = load i32, i32* %74, align 4
  %76 = icmp sgt i32 %4, 0
  br i1 %71, label %140, label %77

77:                                               ; preds = %69
  br i1 %76, label %78, label %991

78:                                               ; preds = %77
  %79 = icmp eq i8* %5, null
  %80 = trunc i32 %73 to i16
  %81 = and i16 %80, 255
  %82 = and i32 %73, 255
  %83 = trunc i32 %75 to i8
  %84 = zext i32 %4 to i64
  br label %85

85:                                               ; preds = %135, %78
  %86 = phi i64 [ 0, %78 ], [ %138, %135 ]
  %87 = phi i8* [ %1, %78 ], [ %137, %135 ]
  %88 = phi i8* [ %6, %78 ], [ %136, %135 ]
  %89 = trunc i64 %86 to i32
  %90 = add nsw i32 %89, %3
  %91 = sdiv i32 %90, 8
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds i8, i8* %2, i64 %92
  %94 = load i8, i8* %93, align 1
  %95 = zext i8 %94 to i32
  %96 = srem i32 %90, 8
  %97 = sub nsw i32 7, %96
  %98 = shl i32 1, %97
  %99 = and i32 %98, %95
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %135, label %101

101:                                              ; preds = %85
  br i1 %79, label %109, label %102

102:                                              ; preds = %101
  %103 = getelementptr inbounds i8, i8* %5, i64 %86
  %104 = load i8, i8* %103, align 1
  %105 = zext i8 %104 to i16
  %106 = mul nuw i16 %81, %105
  %107 = udiv i16 %106, 255
  %108 = zext i16 %107 to i32
  br label %109

109:                                              ; preds = %102, %101
  %110 = phi i32 [ %108, %102 ], [ %82, %101 ]
  %111 = load i8, i8* %88, align 1
  %112 = zext i8 %111 to i32
  %113 = icmp eq i8 %111, 0
  br i1 %113, label %114, label %116

114:                                              ; preds = %109
  store i8 %83, i8* %87, align 1
  %115 = trunc i32 %110 to i8
  store i8 %115, i8* %88, align 1
  br label %135

116:                                              ; preds = %109
  %117 = icmp eq i32 %110, 0
  br i1 %117, label %135, label %118

118:                                              ; preds = %116
  %119 = add nuw nsw i32 %110, %112
  %120 = mul nuw nsw i32 %110, %112
  %121 = udiv i32 %120, 255
  %122 = sub nsw i32 %119, %121
  %123 = trunc i32 %122 to i8
  store i8 %123, i8* %88, align 1
  %124 = mul nuw nsw i32 %110, 255
  %125 = and i32 %122, 255
  %126 = udiv i32 %124, %125
  %127 = load i8, i8* %87, align 1
  %128 = zext i8 %127 to i32
  %129 = sub nsw i32 255, %126
  %130 = mul nsw i32 %129, %128
  %131 = mul nsw i32 %126, %75
  %132 = add nsw i32 %130, %131
  %133 = sdiv i32 %132, 255
  %134 = trunc i32 %133 to i8
  store i8 %134, i8* %87, align 1
  br label %135

135:                                              ; preds = %118, %116, %114, %85
  %136 = getelementptr inbounds i8, i8* %88, i64 1
  %137 = getelementptr inbounds i8, i8* %87, i64 1
  %138 = add nuw nsw i64 %86, 1
  %139 = icmp eq i64 %138, %84
  br i1 %139, label %991, label %85

140:                                              ; preds = %69
  br i1 %76, label %141, label %991

141:                                              ; preds = %140
  %142 = icmp eq i8* %5, null
  %143 = trunc i32 %73 to i16
  %144 = and i16 %143, 255
  %145 = and i32 %73, 255
  %146 = zext i32 %4 to i64
  br label %147

147:                                              ; preds = %182, %141
  %148 = phi i64 [ 0, %141 ], [ %184, %182 ]
  %149 = phi i8* [ %1, %141 ], [ %183, %182 ]
  %150 = trunc i64 %148 to i32
  %151 = add nsw i32 %150, %3
  %152 = sdiv i32 %151, 8
  %153 = sext i32 %152 to i64
  %154 = getelementptr inbounds i8, i8* %2, i64 %153
  %155 = load i8, i8* %154, align 1
  %156 = zext i8 %155 to i32
  %157 = srem i32 %151, 8
  %158 = sub nsw i32 7, %157
  %159 = shl i32 1, %158
  %160 = and i32 %159, %156
  %161 = icmp eq i32 %160, 0
  br i1 %161, label %182, label %162

162:                                              ; preds = %147
  br i1 %142, label %170, label %163

163:                                              ; preds = %162
  %164 = getelementptr inbounds i8, i8* %5, i64 %148
  %165 = load i8, i8* %164, align 1
  %166 = zext i8 %165 to i16
  %167 = mul nuw i16 %144, %166
  %168 = udiv i16 %167, 255
  %169 = zext i16 %168 to i32
  br label %170

170:                                              ; preds = %163, %162
  %171 = phi i32 [ %169, %163 ], [ %145, %162 ]
  %172 = icmp eq i32 %171, 0
  br i1 %172, label %182, label %173

173:                                              ; preds = %170
  %174 = load i8, i8* %149, align 1
  %175 = zext i8 %174 to i32
  %176 = sub nuw nsw i32 255, %171
  %177 = mul nsw i32 %176, %175
  %178 = mul nsw i32 %171, %75
  %179 = add nsw i32 %177, %178
  %180 = sdiv i32 %179, 255
  %181 = trunc i32 %180 to i8
  store i8 %181, i8* %149, align 1
  br label %182

182:                                              ; preds = %173, %170, %147
  %183 = getelementptr inbounds i8, i8* %149, i64 1
  %184 = add nuw nsw i64 %148, 1
  %185 = icmp eq i64 %184, %146
  br i1 %185, label %991, label %147

186:                                              ; preds = %66
  %187 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 9
  %188 = load i8, i8* %187, align 4, !range !18
  %189 = icmp eq i8 %188, 0
  %190 = icmp eq i16 %12, 544
  br i1 %189, label %591, label %191

191:                                              ; preds = %186
  %192 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 4
  %193 = load i32, i32* %192, align 8
  %194 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 5
  %195 = load i32, i32* %194, align 4
  %196 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 6
  %197 = load i32, i32* %196, align 8
  %198 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 7
  %199 = load i32, i32* %198, align 4
  %200 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 8
  %201 = load i32, i32* %200, align 8
  br i1 %190, label %202, label %418

202:                                              ; preds = %191
  %203 = icmp ne i32 %201, 0
  %204 = icmp ne i8* %5, null
  %205 = or i1 %204, %203
  %206 = xor i1 %205, true
  %207 = icmp eq i32 %193, 255
  %208 = and i1 %207, %206
  br i1 %208, label %240, label %209

209:                                              ; preds = %202
  %210 = icmp sgt i32 %4, 0
  br i1 %210, label %211, label %991

211:                                              ; preds = %209
  %212 = icmp eq i8* %5, null
  %213 = trunc i32 %193 to i16
  %214 = and i16 %213, 255
  %215 = and i32 %193, 255
  %216 = and i32 %201, -4
  %217 = icmp eq i32 %216, 12
  %218 = bitcast [3 x i32]* %9 to i8*
  %219 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 0
  %220 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 1
  %221 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 2
  %222 = getelementptr inbounds [3 x i8], [3 x i8]* %10, i64 0, i64 0
  %223 = getelementptr inbounds [3 x i8], [3 x i8]* %10, i64 0, i64 1
  %224 = getelementptr inbounds [3 x i8], [3 x i8]* %10, i64 0, i64 2
  %225 = trunc i32 %199 to i8
  %226 = trunc i32 %197 to i8
  %227 = trunc i32 %195 to i8
  %228 = getelementptr inbounds [3 x i8], [3 x i8]* %8, i64 0, i64 0
  %229 = getelementptr inbounds [3 x i8], [3 x i8]* %8, i64 0, i64 1
  %230 = getelementptr inbounds [3 x i8], [3 x i8]* %8, i64 0, i64 2
  %231 = shl i32 %195, 16
  %232 = shl i32 %197, 8
  %233 = or i32 %232, %231
  %234 = or i32 %233, %199
  %235 = zext i32 %4 to i64
  %236 = lshr i32 %234, 16
  %237 = trunc i32 %236 to i8
  %238 = lshr i32 %234, 8
  %239 = trunc i32 %238 to i8
  br label %274

240:                                              ; preds = %202
  %241 = shl i32 %195, 16
  %242 = shl i32 %197, 8
  %243 = or i32 %242, %241
  %244 = or i32 %243, %199
  %245 = icmp sgt i32 %4, 0
  br i1 %245, label %246, label %991

246:                                              ; preds = %240
  %247 = lshr i32 %244, 16
  %248 = trunc i32 %247 to i8
  %249 = lshr i32 %244, 8
  %250 = trunc i32 %249 to i8
  %251 = trunc i32 %199 to i8
  br label %252

252:                                              ; preds = %270, %246
  %253 = phi i8* [ %1, %246 ], [ %271, %270 ]
  %254 = phi i32 [ 0, %246 ], [ %272, %270 ]
  %255 = add nsw i32 %254, %3
  %256 = sdiv i32 %255, 8
  %257 = sext i32 %256 to i64
  %258 = getelementptr inbounds i8, i8* %2, i64 %257
  %259 = load i8, i8* %258, align 1
  %260 = zext i8 %259 to i32
  %261 = srem i32 %255, 8
  %262 = sub nsw i32 7, %261
  %263 = shl i32 1, %262
  %264 = and i32 %263, %260
  %265 = icmp eq i32 %264, 0
  br i1 %265, label %270, label %266

266:                                              ; preds = %252
  %267 = getelementptr inbounds i8, i8* %253, i64 3
  store i8 -1, i8* %267, align 1
  store i8 %248, i8* %253, align 1
  %268 = getelementptr inbounds i8, i8* %253, i64 1
  store i8 %250, i8* %268, align 1
  %269 = getelementptr inbounds i8, i8* %253, i64 2
  store i8 %251, i8* %269, align 1
  br label %270

270:                                              ; preds = %266, %252
  %271 = getelementptr inbounds i8, i8* %253, i64 4
  %272 = add nuw nsw i32 %254, 1
  %273 = icmp eq i32 %272, %4
  br i1 %273, label %991, label %252

274:                                              ; preds = %414, %211
  %275 = phi i64 [ 0, %211 ], [ %416, %414 ]
  %276 = phi i8* [ %1, %211 ], [ %415, %414 ]
  %277 = trunc i64 %275 to i32
  %278 = add nsw i32 %277, %3
  %279 = sdiv i32 %278, 8
  %280 = sext i32 %279 to i64
  %281 = getelementptr inbounds i8, i8* %2, i64 %280
  %282 = load i8, i8* %281, align 1
  %283 = zext i8 %282 to i32
  %284 = srem i32 %278, 8
  %285 = sub nsw i32 7, %284
  %286 = shl i32 1, %285
  %287 = and i32 %286, %283
  %288 = icmp eq i32 %287, 0
  br i1 %288, label %414, label %289

289:                                              ; preds = %274
  br i1 %212, label %297, label %290

290:                                              ; preds = %289
  %291 = getelementptr inbounds i8, i8* %5, i64 %275
  %292 = load i8, i8* %291, align 1
  %293 = zext i8 %292 to i16
  %294 = mul nuw i16 %214, %293
  %295 = udiv i16 %294, 255
  %296 = zext i16 %295 to i32
  br label %297

297:                                              ; preds = %290, %289
  %298 = phi i32 [ %296, %290 ], [ %215, %289 ]
  %299 = getelementptr inbounds i8, i8* %276, i64 3
  %300 = load i8, i8* %299, align 1
  %301 = zext i8 %300 to i32
  %302 = icmp eq i8 %300, 0
  br i1 %302, label %303, label %310

303:                                              ; preds = %297
  %304 = shl i32 %298, 24
  %305 = or i32 %304, %234
  %306 = lshr i32 %305, 24
  %307 = trunc i32 %306 to i8
  store i8 %307, i8* %299, align 1
  store i8 %237, i8* %276, align 1
  %308 = getelementptr inbounds i8, i8* %276, i64 1
  store i8 %239, i8* %308, align 1
  %309 = getelementptr inbounds i8, i8* %276, i64 2
  store i8 %225, i8* %309, align 1
  br label %414

310:                                              ; preds = %297
  %311 = add nuw nsw i32 %298, %301
  %312 = mul nuw nsw i32 %298, %301
  %313 = udiv i32 %312, 255
  %314 = sub nsw i32 %311, %313
  %315 = trunc i32 %314 to i8
  store i8 %315, i8* %299, align 1
  %316 = mul nuw nsw i32 %298, 255
  %317 = and i32 %314, 255
  %318 = udiv i32 %316, %317
  br i1 %217, label %319, label %350

319:                                              ; preds = %310
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %218) #7
  store i32 -1431655766, i32* %219, align 4
  store i32 -1431655766, i32* %220, align 4
  store i32 -1431655766, i32* %221, align 4
  call void @llvm.lifetime.start.p0i8(i64 3, i8* nonnull %222) #7
  store i8 %225, i8* %222, align 1
  store i8 %226, i8* %223, align 1
  store i8 %227, i8* %224, align 1
  call void @llvm.lifetime.start.p0i8(i64 3, i8* nonnull %228) #7
  %320 = load i8, i8* %276, align 1
  store i8 %320, i8* %230, align 1
  %321 = getelementptr inbounds i8, i8* %276, i64 1
  %322 = load i8, i8* %321, align 1
  store i8 %322, i8* %229, align 1
  %323 = getelementptr inbounds i8, i8* %276, i64 2
  %324 = load i8, i8* %323, align 1
  store i8 %324, i8* %228, align 1
  call fastcc void @_ZN12_GLOBAL__N_19RGB_BlendE9BlendModePKhS2_Pi(i32 %201, i8* nonnull %222, i8* nonnull %228, i32* nonnull %219) #7
  %325 = load i8, i8* %323, align 1
  %326 = zext i8 %325 to i32
  %327 = sub nsw i32 255, %318
  %328 = mul nsw i32 %327, %326
  %329 = load i32, i32* %219, align 4
  %330 = mul nsw i32 %329, %318
  %331 = add nsw i32 %328, %330
  %332 = sdiv i32 %331, 255
  %333 = trunc i32 %332 to i8
  store i8 %333, i8* %323, align 1
  %334 = load i8, i8* %321, align 1
  %335 = zext i8 %334 to i32
  %336 = mul nsw i32 %327, %335
  %337 = load i32, i32* %220, align 4
  %338 = mul nsw i32 %337, %318
  %339 = add nsw i32 %336, %338
  %340 = sdiv i32 %339, 255
  %341 = trunc i32 %340 to i8
  store i8 %341, i8* %321, align 1
  %342 = load i8, i8* %276, align 1
  %343 = zext i8 %342 to i32
  %344 = mul nsw i32 %327, %343
  %345 = load i32, i32* %221, align 4
  %346 = mul nsw i32 %345, %318
  %347 = add nsw i32 %344, %346
  %348 = sdiv i32 %347, 255
  %349 = trunc i32 %348 to i8
  store i8 %349, i8* %276, align 1
  call void @llvm.lifetime.end.p0i8(i64 3, i8* nonnull %228) #7
  call void @llvm.lifetime.end.p0i8(i64 3, i8* nonnull %222) #7
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %218) #7
  br label %414

350:                                              ; preds = %310
  %351 = getelementptr inbounds i8, i8* %276, i64 2
  %352 = load i8, i8* %351, align 1
  %353 = zext i8 %352 to i32
  br i1 %203, label %354, label %392

354:                                              ; preds = %350
  %355 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %201, i32 %353, i32 %199) #7
  %356 = xor i32 %301, 255
  %357 = mul nsw i32 %356, %199
  %358 = mul nsw i32 %355, %301
  %359 = add nsw i32 %358, %357
  %360 = sdiv i32 %359, 255
  %361 = sub nsw i32 255, %318
  %362 = mul nsw i32 %361, %353
  %363 = mul nsw i32 %360, %318
  %364 = add nsw i32 %363, %362
  %365 = sdiv i32 %364, 255
  %366 = trunc i32 %365 to i8
  store i8 %366, i8* %351, align 1
  %367 = getelementptr inbounds i8, i8* %276, i64 1
  %368 = load i8, i8* %367, align 1
  %369 = zext i8 %368 to i32
  %370 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %201, i32 %369, i32 %197) #7
  %371 = mul nsw i32 %356, %197
  %372 = mul nsw i32 %370, %301
  %373 = add nsw i32 %372, %371
  %374 = sdiv i32 %373, 255
  %375 = mul nsw i32 %361, %369
  %376 = mul nsw i32 %374, %318
  %377 = add nsw i32 %376, %375
  %378 = sdiv i32 %377, 255
  %379 = trunc i32 %378 to i8
  store i8 %379, i8* %367, align 1
  %380 = load i8, i8* %276, align 1
  %381 = zext i8 %380 to i32
  %382 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %201, i32 %381, i32 %195) #7
  %383 = mul nsw i32 %356, %195
  %384 = mul nsw i32 %382, %301
  %385 = add nsw i32 %384, %383
  %386 = sdiv i32 %385, 255
  %387 = mul nsw i32 %361, %381
  %388 = mul nsw i32 %386, %318
  %389 = add nsw i32 %388, %387
  %390 = sdiv i32 %389, 255
  %391 = trunc i32 %390 to i8
  store i8 %391, i8* %276, align 1
  br label %414

392:                                              ; preds = %350
  %393 = sub nsw i32 255, %318
  %394 = mul nsw i32 %393, %353
  %395 = mul nsw i32 %318, %199
  %396 = add nsw i32 %394, %395
  %397 = sdiv i32 %396, 255
  %398 = trunc i32 %397 to i8
  store i8 %398, i8* %351, align 1
  %399 = getelementptr inbounds i8, i8* %276, i64 1
  %400 = load i8, i8* %399, align 1
  %401 = zext i8 %400 to i32
  %402 = mul nsw i32 %393, %401
  %403 = mul nsw i32 %318, %197
  %404 = add nsw i32 %402, %403
  %405 = sdiv i32 %404, 255
  %406 = trunc i32 %405 to i8
  store i8 %406, i8* %399, align 1
  %407 = load i8, i8* %276, align 1
  %408 = zext i8 %407 to i32
  %409 = mul nsw i32 %393, %408
  %410 = mul nsw i32 %318, %195
  %411 = add nsw i32 %409, %410
  %412 = sdiv i32 %411, 255
  %413 = trunc i32 %412 to i8
  store i8 %413, i8* %276, align 1
  br label %414

414:                                              ; preds = %392, %354, %319, %303, %274
  %415 = getelementptr inbounds i8, i8* %276, i64 4
  %416 = add nuw nsw i64 %275, 1
  %417 = icmp eq i64 %416, %235
  br i1 %417, label %991, label %274

418:                                              ; preds = %191
  %419 = lshr i16 %12, 3
  %420 = and i16 %419, 31
  %421 = icmp ne i32 %201, 0
  %422 = icmp ne i8* %5, null
  %423 = or i1 %422, %421
  %424 = xor i1 %423, true
  %425 = icmp eq i32 %193, 255
  %426 = and i1 %425, %424
  %427 = icmp sgt i32 %4, 0
  br i1 %426, label %451, label %428

428:                                              ; preds = %418
  br i1 %427, label %429, label %991

429:                                              ; preds = %428
  %430 = icmp eq i8* %5, null
  %431 = trunc i32 %193 to i16
  %432 = and i16 %431, 255
  %433 = and i32 %193, 255
  %434 = and i32 %201, -4
  %435 = icmp eq i32 %434, 12
  %436 = bitcast [3 x i32]* %9 to i8*
  %437 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 0
  %438 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 1
  %439 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 2
  %440 = getelementptr inbounds [3 x i8], [3 x i8]* %10, i64 0, i64 0
  %441 = getelementptr inbounds [3 x i8], [3 x i8]* %10, i64 0, i64 1
  %442 = getelementptr inbounds [3 x i8], [3 x i8]* %10, i64 0, i64 2
  %443 = trunc i32 %199 to i8
  %444 = trunc i32 %197 to i8
  %445 = trunc i32 %195 to i8
  %446 = getelementptr inbounds [3 x i8], [3 x i8]* %8, i64 0, i64 0
  %447 = getelementptr inbounds [3 x i8], [3 x i8]* %8, i64 0, i64 1
  %448 = getelementptr inbounds [3 x i8], [3 x i8]* %8, i64 0, i64 2
  %449 = zext i16 %420 to i64
  %450 = zext i32 %4 to i64
  br label %478

451:                                              ; preds = %418
  br i1 %427, label %452, label %991

452:                                              ; preds = %451
  %453 = trunc i32 %199 to i8
  %454 = trunc i32 %197 to i8
  %455 = trunc i32 %195 to i8
  %456 = zext i16 %420 to i64
  br label %457

457:                                              ; preds = %474, %452
  %458 = phi i8* [ %1, %452 ], [ %475, %474 ]
  %459 = phi i32 [ 0, %452 ], [ %476, %474 ]
  %460 = add nsw i32 %459, %3
  %461 = sdiv i32 %460, 8
  %462 = sext i32 %461 to i64
  %463 = getelementptr inbounds i8, i8* %2, i64 %462
  %464 = load i8, i8* %463, align 1
  %465 = zext i8 %464 to i32
  %466 = srem i32 %460, 8
  %467 = sub nsw i32 7, %466
  %468 = shl i32 1, %467
  %469 = and i32 %468, %465
  %470 = icmp eq i32 %469, 0
  br i1 %470, label %474, label %471

471:                                              ; preds = %457
  %472 = getelementptr inbounds i8, i8* %458, i64 2
  store i8 %453, i8* %472, align 1
  %473 = getelementptr inbounds i8, i8* %458, i64 1
  store i8 %454, i8* %473, align 1
  store i8 %455, i8* %458, align 1
  br label %474

474:                                              ; preds = %471, %457
  %475 = getelementptr inbounds i8, i8* %458, i64 %456
  %476 = add nuw nsw i32 %459, 1
  %477 = icmp eq i32 %476, %4
  br i1 %477, label %991, label %457

478:                                              ; preds = %587, %429
  %479 = phi i64 [ 0, %429 ], [ %589, %587 ]
  %480 = phi i8* [ %1, %429 ], [ %588, %587 ]
  %481 = trunc i64 %479 to i32
  %482 = add nsw i32 %481, %3
  %483 = sdiv i32 %482, 8
  %484 = sext i32 %483 to i64
  %485 = getelementptr inbounds i8, i8* %2, i64 %484
  %486 = load i8, i8* %485, align 1
  %487 = zext i8 %486 to i32
  %488 = srem i32 %482, 8
  %489 = sub nsw i32 7, %488
  %490 = shl i32 1, %489
  %491 = and i32 %490, %487
  %492 = icmp eq i32 %491, 0
  br i1 %492, label %587, label %493

493:                                              ; preds = %478
  br i1 %430, label %501, label %494

494:                                              ; preds = %493
  %495 = getelementptr inbounds i8, i8* %5, i64 %479
  %496 = load i8, i8* %495, align 1
  %497 = zext i8 %496 to i16
  %498 = mul nuw i16 %432, %497
  %499 = udiv i16 %498, 255
  %500 = zext i16 %499 to i32
  br label %501

501:                                              ; preds = %494, %493
  %502 = phi i32 [ %500, %494 ], [ %433, %493 ]
  %503 = icmp eq i32 %502, 0
  br i1 %503, label %587, label %504

504:                                              ; preds = %501
  br i1 %435, label %505, label %536

505:                                              ; preds = %504
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %436) #7
  store i32 -1431655766, i32* %437, align 4
  store i32 -1431655766, i32* %438, align 4
  store i32 -1431655766, i32* %439, align 4
  call void @llvm.lifetime.start.p0i8(i64 3, i8* nonnull %440) #7
  store i8 %443, i8* %440, align 1
  store i8 %444, i8* %441, align 1
  store i8 %445, i8* %442, align 1
  call void @llvm.lifetime.start.p0i8(i64 3, i8* nonnull %446) #7
  store i8 -86, i8* %446, align 1
  store i8 -86, i8* %447, align 1
  store i8 -86, i8* %448, align 1
  %506 = load i8, i8* %480, align 1
  store i8 %506, i8* %448, align 1
  %507 = getelementptr inbounds i8, i8* %480, i64 1
  %508 = load i8, i8* %507, align 1
  store i8 %508, i8* %447, align 1
  %509 = getelementptr inbounds i8, i8* %480, i64 2
  %510 = load i8, i8* %509, align 1
  store i8 %510, i8* %446, align 1
  call fastcc void @_ZN12_GLOBAL__N_19RGB_BlendE9BlendModePKhS2_Pi(i32 %201, i8* nonnull %440, i8* nonnull %446, i32* nonnull %437) #7
  %511 = load i8, i8* %509, align 1
  %512 = zext i8 %511 to i32
  %513 = sub nuw nsw i32 255, %502
  %514 = mul nsw i32 %513, %512
  %515 = load i32, i32* %437, align 4
  %516 = mul nsw i32 %515, %502
  %517 = add nsw i32 %514, %516
  %518 = sdiv i32 %517, 255
  %519 = trunc i32 %518 to i8
  store i8 %519, i8* %509, align 1
  %520 = load i8, i8* %507, align 1
  %521 = zext i8 %520 to i32
  %522 = mul nsw i32 %513, %521
  %523 = load i32, i32* %438, align 4
  %524 = mul nsw i32 %523, %502
  %525 = add nsw i32 %522, %524
  %526 = sdiv i32 %525, 255
  %527 = trunc i32 %526 to i8
  store i8 %527, i8* %507, align 1
  %528 = load i8, i8* %480, align 1
  %529 = zext i8 %528 to i32
  %530 = mul nsw i32 %513, %529
  %531 = load i32, i32* %439, align 4
  %532 = mul nsw i32 %531, %502
  %533 = add nsw i32 %530, %532
  %534 = sdiv i32 %533, 255
  %535 = trunc i32 %534 to i8
  store i8 %535, i8* %480, align 1
  call void @llvm.lifetime.end.p0i8(i64 3, i8* nonnull %446) #7
  call void @llvm.lifetime.end.p0i8(i64 3, i8* nonnull %440) #7
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %436) #7
  br label %587

536:                                              ; preds = %504
  %537 = getelementptr inbounds i8, i8* %480, i64 2
  %538 = load i8, i8* %537, align 1
  %539 = zext i8 %538 to i32
  br i1 %421, label %540, label %565

540:                                              ; preds = %536
  %541 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %201, i32 %539, i32 %199) #7
  %542 = sub nuw nsw i32 255, %502
  %543 = mul nsw i32 %542, %539
  %544 = mul nsw i32 %541, %502
  %545 = add nsw i32 %544, %543
  %546 = sdiv i32 %545, 255
  %547 = trunc i32 %546 to i8
  store i8 %547, i8* %537, align 1
  %548 = getelementptr inbounds i8, i8* %480, i64 1
  %549 = load i8, i8* %548, align 1
  %550 = zext i8 %549 to i32
  %551 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %201, i32 %550, i32 %197) #7
  %552 = mul nsw i32 %542, %550
  %553 = mul nsw i32 %551, %502
  %554 = add nsw i32 %552, %553
  %555 = sdiv i32 %554, 255
  %556 = trunc i32 %555 to i8
  store i8 %556, i8* %548, align 1
  %557 = load i8, i8* %480, align 1
  %558 = zext i8 %557 to i32
  %559 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %201, i32 %558, i32 %195) #7
  %560 = mul nsw i32 %542, %558
  %561 = mul nsw i32 %559, %502
  %562 = add nsw i32 %560, %561
  %563 = sdiv i32 %562, 255
  %564 = trunc i32 %563 to i8
  store i8 %564, i8* %480, align 1
  br label %587

565:                                              ; preds = %536
  %566 = sub nuw nsw i32 255, %502
  %567 = mul nsw i32 %566, %539
  %568 = mul nsw i32 %502, %199
  %569 = add nsw i32 %567, %568
  %570 = sdiv i32 %569, 255
  %571 = trunc i32 %570 to i8
  store i8 %571, i8* %537, align 1
  %572 = getelementptr inbounds i8, i8* %480, i64 1
  %573 = load i8, i8* %572, align 1
  %574 = zext i8 %573 to i32
  %575 = mul nsw i32 %566, %574
  %576 = mul nsw i32 %502, %197
  %577 = add nsw i32 %575, %576
  %578 = sdiv i32 %577, 255
  %579 = trunc i32 %578 to i8
  store i8 %579, i8* %572, align 1
  %580 = load i8, i8* %480, align 1
  %581 = zext i8 %580 to i32
  %582 = mul nsw i32 %566, %581
  %583 = mul nsw i32 %502, %195
  %584 = add nsw i32 %582, %583
  %585 = sdiv i32 %584, 255
  %586 = trunc i32 %585 to i8
  store i8 %586, i8* %480, align 1
  br label %587

587:                                              ; preds = %565, %540, %505, %501, %478
  %588 = getelementptr inbounds i8, i8* %480, i64 %449
  %589 = add nuw nsw i64 %479, 1
  %590 = icmp eq i64 %589, %450
  br i1 %590, label %991, label %478

591:                                              ; preds = %186
  br i1 %190, label %592, label %813

592:                                              ; preds = %591
  %593 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 4
  %594 = load i32, i32* %593, align 8
  %595 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 5
  %596 = load i32, i32* %595, align 4
  %597 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 6
  %598 = load i32, i32* %597, align 8
  %599 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 7
  %600 = load i32, i32* %599, align 4
  %601 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 8
  %602 = load i32, i32* %601, align 8
  %603 = icmp ne i32 %602, 0
  %604 = icmp ne i8* %5, null
  %605 = or i1 %604, %603
  %606 = xor i1 %605, true
  %607 = icmp eq i32 %594, 255
  %608 = and i1 %607, %606
  br i1 %608, label %637, label %609

609:                                              ; preds = %592
  %610 = icmp sgt i32 %4, 0
  br i1 %610, label %611, label %991

611:                                              ; preds = %609
  %612 = icmp eq i8* %5, null
  %613 = trunc i32 %594 to i16
  %614 = and i16 %613, 255
  %615 = and i32 %594, 255
  %616 = and i32 %602, -4
  %617 = icmp eq i32 %616, 12
  %618 = bitcast [3 x i32]* %9 to i8*
  %619 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 0
  %620 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 1
  %621 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 2
  %622 = getelementptr inbounds [3 x i8], [3 x i8]* %10, i64 0, i64 0
  %623 = getelementptr inbounds [3 x i8], [3 x i8]* %10, i64 0, i64 1
  %624 = getelementptr inbounds [3 x i8], [3 x i8]* %10, i64 0, i64 2
  %625 = trunc i32 %600 to i8
  %626 = trunc i32 %598 to i8
  %627 = trunc i32 %596 to i8
  %628 = shl i32 %596, 16
  %629 = shl i32 %598, 8
  %630 = or i32 %629, %628
  %631 = or i32 %630, %600
  %632 = zext i32 %4 to i64
  %633 = lshr i32 %631, 8
  %634 = trunc i32 %633 to i8
  %635 = lshr i32 %631, 16
  %636 = trunc i32 %635 to i8
  br label %671

637:                                              ; preds = %592
  %638 = shl i32 %596, 16
  %639 = shl i32 %598, 8
  %640 = or i32 %639, %638
  %641 = or i32 %640, %600
  %642 = icmp sgt i32 %4, 0
  br i1 %642, label %643, label %991

643:                                              ; preds = %637
  %644 = trunc i32 %600 to i8
  %645 = lshr i32 %641, 8
  %646 = trunc i32 %645 to i8
  %647 = lshr i32 %641, 16
  %648 = trunc i32 %647 to i8
  br label %649

649:                                              ; preds = %667, %643
  %650 = phi i8* [ %1, %643 ], [ %668, %667 ]
  %651 = phi i32 [ 0, %643 ], [ %669, %667 ]
  %652 = add nsw i32 %651, %3
  %653 = sdiv i32 %652, 8
  %654 = sext i32 %653 to i64
  %655 = getelementptr inbounds i8, i8* %2, i64 %654
  %656 = load i8, i8* %655, align 1
  %657 = zext i8 %656 to i32
  %658 = srem i32 %652, 8
  %659 = sub nsw i32 7, %658
  %660 = shl i32 1, %659
  %661 = and i32 %660, %657
  %662 = icmp eq i32 %661, 0
  br i1 %662, label %667, label %663

663:                                              ; preds = %649
  store i8 %644, i8* %650, align 1
  %664 = getelementptr inbounds i8, i8* %650, i64 1
  store i8 %646, i8* %664, align 1
  %665 = getelementptr inbounds i8, i8* %650, i64 2
  store i8 %648, i8* %665, align 1
  %666 = getelementptr inbounds i8, i8* %650, i64 3
  store i8 -1, i8* %666, align 1
  br label %667

667:                                              ; preds = %663, %649
  %668 = getelementptr inbounds i8, i8* %650, i64 4
  %669 = add nuw nsw i32 %651, 1
  %670 = icmp eq i32 %669, %4
  br i1 %670, label %991, label %649

671:                                              ; preds = %809, %611
  %672 = phi i64 [ 0, %611 ], [ %811, %809 ]
  %673 = phi i8* [ %1, %611 ], [ %810, %809 ]
  %674 = trunc i64 %672 to i32
  %675 = add nsw i32 %674, %3
  %676 = sdiv i32 %675, 8
  %677 = sext i32 %676 to i64
  %678 = getelementptr inbounds i8, i8* %2, i64 %677
  %679 = load i8, i8* %678, align 1
  %680 = zext i8 %679 to i32
  %681 = srem i32 %675, 8
  %682 = sub nsw i32 7, %681
  %683 = shl i32 1, %682
  %684 = and i32 %683, %680
  %685 = icmp eq i32 %684, 0
  br i1 %685, label %809, label %686

686:                                              ; preds = %671
  br i1 %612, label %694, label %687

687:                                              ; preds = %686
  %688 = getelementptr inbounds i8, i8* %5, i64 %672
  %689 = load i8, i8* %688, align 1
  %690 = zext i8 %689 to i16
  %691 = mul nuw i16 %614, %690
  %692 = udiv i16 %691, 255
  %693 = zext i16 %692 to i32
  br label %694

694:                                              ; preds = %687, %686
  %695 = phi i32 [ %693, %687 ], [ %615, %686 ]
  %696 = getelementptr inbounds i8, i8* %673, i64 3
  %697 = load i8, i8* %696, align 1
  %698 = zext i8 %697 to i32
  %699 = icmp eq i8 %697, 0
  br i1 %699, label %700, label %707

700:                                              ; preds = %694
  %701 = shl i32 %695, 24
  %702 = or i32 %701, %631
  store i8 %625, i8* %673, align 1
  %703 = getelementptr inbounds i8, i8* %673, i64 1
  store i8 %634, i8* %703, align 1
  %704 = getelementptr inbounds i8, i8* %673, i64 2
  store i8 %636, i8* %704, align 1
  %705 = lshr i32 %702, 24
  %706 = trunc i32 %705 to i8
  store i8 %706, i8* %696, align 1
  br label %809

707:                                              ; preds = %694
  %708 = add nuw nsw i32 %695, %698
  %709 = mul nuw nsw i32 %695, %698
  %710 = udiv i32 %709, 255
  %711 = sub nsw i32 %708, %710
  %712 = trunc i32 %711 to i8
  store i8 %712, i8* %696, align 1
  %713 = mul nuw nsw i32 %695, 255
  %714 = and i32 %711, 255
  %715 = udiv i32 %713, %714
  br i1 %617, label %716, label %744

716:                                              ; preds = %707
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %618) #7
  store i32 -1431655766, i32* %619, align 4
  store i32 -1431655766, i32* %620, align 4
  store i32 -1431655766, i32* %621, align 4
  call void @llvm.lifetime.start.p0i8(i64 3, i8* nonnull %622) #7
  store i8 %625, i8* %622, align 1
  store i8 %626, i8* %623, align 1
  store i8 %627, i8* %624, align 1
  call fastcc void @_ZN12_GLOBAL__N_19RGB_BlendE9BlendModePKhS2_Pi(i32 %602, i8* nonnull %622, i8* %673, i32* nonnull %619) #7
  %717 = load i8, i8* %673, align 1
  %718 = zext i8 %717 to i32
  %719 = sub nsw i32 255, %715
  %720 = mul nsw i32 %719, %718
  %721 = load i32, i32* %619, align 4
  %722 = mul nsw i32 %721, %715
  %723 = add nsw i32 %720, %722
  %724 = sdiv i32 %723, 255
  %725 = trunc i32 %724 to i8
  store i8 %725, i8* %673, align 1
  %726 = getelementptr inbounds i8, i8* %673, i64 1
  %727 = load i8, i8* %726, align 1
  %728 = zext i8 %727 to i32
  %729 = mul nsw i32 %719, %728
  %730 = load i32, i32* %620, align 4
  %731 = mul nsw i32 %730, %715
  %732 = add nsw i32 %729, %731
  %733 = sdiv i32 %732, 255
  %734 = trunc i32 %733 to i8
  store i8 %734, i8* %726, align 1
  %735 = getelementptr inbounds i8, i8* %673, i64 2
  %736 = load i8, i8* %735, align 1
  %737 = zext i8 %736 to i32
  %738 = mul nsw i32 %719, %737
  %739 = load i32, i32* %621, align 4
  %740 = mul nsw i32 %739, %715
  %741 = add nsw i32 %738, %740
  %742 = sdiv i32 %741, 255
  %743 = trunc i32 %742 to i8
  store i8 %743, i8* %735, align 1
  call void @llvm.lifetime.end.p0i8(i64 3, i8* nonnull %622) #7
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %618) #7
  br label %809

744:                                              ; preds = %707
  %745 = load i8, i8* %673, align 1
  %746 = zext i8 %745 to i32
  br i1 %603, label %747, label %786

747:                                              ; preds = %744
  %748 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %602, i32 %746, i32 %600) #7
  %749 = xor i32 %698, 255
  %750 = mul nsw i32 %749, %600
  %751 = mul nsw i32 %748, %698
  %752 = add nsw i32 %751, %750
  %753 = sdiv i32 %752, 255
  %754 = sub nsw i32 255, %715
  %755 = mul nsw i32 %754, %746
  %756 = mul nsw i32 %753, %715
  %757 = add nsw i32 %756, %755
  %758 = sdiv i32 %757, 255
  %759 = trunc i32 %758 to i8
  store i8 %759, i8* %673, align 1
  %760 = getelementptr inbounds i8, i8* %673, i64 1
  %761 = load i8, i8* %760, align 1
  %762 = zext i8 %761 to i32
  %763 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %602, i32 %762, i32 %598) #7
  %764 = mul nsw i32 %749, %598
  %765 = mul nsw i32 %763, %698
  %766 = add nsw i32 %765, %764
  %767 = sdiv i32 %766, 255
  %768 = mul nsw i32 %754, %762
  %769 = mul nsw i32 %767, %715
  %770 = add nsw i32 %769, %768
  %771 = sdiv i32 %770, 255
  %772 = trunc i32 %771 to i8
  store i8 %772, i8* %760, align 1
  %773 = getelementptr inbounds i8, i8* %673, i64 2
  %774 = load i8, i8* %773, align 1
  %775 = zext i8 %774 to i32
  %776 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %602, i32 %775, i32 %596) #7
  %777 = mul nsw i32 %749, %596
  %778 = mul nsw i32 %776, %698
  %779 = add nsw i32 %778, %777
  %780 = sdiv i32 %779, 255
  %781 = mul nsw i32 %754, %775
  %782 = mul nsw i32 %780, %715
  %783 = add nsw i32 %782, %781
  %784 = sdiv i32 %783, 255
  %785 = trunc i32 %784 to i8
  store i8 %785, i8* %773, align 1
  br label %809

786:                                              ; preds = %744
  %787 = sub nsw i32 255, %715
  %788 = mul nsw i32 %787, %746
  %789 = mul nsw i32 %715, %600
  %790 = add nsw i32 %788, %789
  %791 = sdiv i32 %790, 255
  %792 = trunc i32 %791 to i8
  store i8 %792, i8* %673, align 1
  %793 = getelementptr inbounds i8, i8* %673, i64 1
  %794 = load i8, i8* %793, align 1
  %795 = zext i8 %794 to i32
  %796 = mul nsw i32 %787, %795
  %797 = mul nsw i32 %715, %598
  %798 = add nsw i32 %796, %797
  %799 = sdiv i32 %798, 255
  %800 = trunc i32 %799 to i8
  store i8 %800, i8* %793, align 1
  %801 = getelementptr inbounds i8, i8* %673, i64 2
  %802 = load i8, i8* %801, align 1
  %803 = zext i8 %802 to i32
  %804 = mul nsw i32 %787, %803
  %805 = mul nsw i32 %715, %596
  %806 = add nsw i32 %804, %805
  %807 = sdiv i32 %806, 255
  %808 = trunc i32 %807 to i8
  store i8 %808, i8* %801, align 1
  br label %809

809:                                              ; preds = %786, %747, %716, %700, %671
  %810 = getelementptr inbounds i8, i8* %673, i64 4
  %811 = add nuw nsw i64 %672, 1
  %812 = icmp eq i64 %811, %632
  br i1 %812, label %991, label %671

813:                                              ; preds = %591
  switch i16 %12, label %991 [
    i16 24, label %814
    i16 32, label %814
  ]

814:                                              ; preds = %813, %813
  %815 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 4
  %816 = load i32, i32* %815, align 8
  %817 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 5
  %818 = load i32, i32* %817, align 4
  %819 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 6
  %820 = load i32, i32* %819, align 8
  %821 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 7
  %822 = load i32, i32* %821, align 4
  %823 = getelementptr inbounds %class.CFX_ScanlineCompositor, %class.CFX_ScanlineCompositor* %0, i64 0, i32 8
  %824 = load i32, i32* %823, align 8
  %825 = lshr i16 %12, 3
  %826 = and i16 %825, 31
  %827 = zext i16 %826 to i64
  %828 = icmp ne i32 %824, 0
  %829 = icmp ne i8* %5, null
  %830 = or i1 %829, %828
  %831 = xor i1 %830, true
  %832 = icmp eq i32 %816, 255
  %833 = and i1 %832, %831
  %834 = icmp sgt i32 %4, 0
  br i1 %833, label %854, label %835

835:                                              ; preds = %814
  br i1 %834, label %836, label %991

836:                                              ; preds = %835
  %837 = icmp eq i8* %5, null
  %838 = trunc i32 %816 to i16
  %839 = and i16 %838, 255
  %840 = and i32 %816, 255
  %841 = and i32 %824, -4
  %842 = icmp eq i32 %841, 12
  %843 = bitcast [3 x i32]* %9 to i8*
  %844 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 0
  %845 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 1
  %846 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 2
  %847 = getelementptr inbounds [3 x i8], [3 x i8]* %10, i64 0, i64 0
  %848 = getelementptr inbounds [3 x i8], [3 x i8]* %10, i64 0, i64 1
  %849 = getelementptr inbounds [3 x i8], [3 x i8]* %10, i64 0, i64 2
  %850 = trunc i32 %822 to i8
  %851 = trunc i32 %820 to i8
  %852 = trunc i32 %818 to i8
  %853 = zext i32 %4 to i64
  br label %880

854:                                              ; preds = %814
  br i1 %834, label %855, label %991

855:                                              ; preds = %854
  %856 = trunc i32 %818 to i8
  %857 = trunc i32 %820 to i8
  %858 = trunc i32 %822 to i8
  br label %859

859:                                              ; preds = %876, %855
  %860 = phi i8* [ %1, %855 ], [ %877, %876 ]
  %861 = phi i32 [ 0, %855 ], [ %878, %876 ]
  %862 = add nsw i32 %861, %3
  %863 = sdiv i32 %862, 8
  %864 = sext i32 %863 to i64
  %865 = getelementptr inbounds i8, i8* %2, i64 %864
  %866 = load i8, i8* %865, align 1
  %867 = zext i8 %866 to i32
  %868 = srem i32 %862, 8
  %869 = sub nsw i32 7, %868
  %870 = shl i32 1, %869
  %871 = and i32 %870, %867
  %872 = icmp eq i32 %871, 0
  br i1 %872, label %876, label %873

873:                                              ; preds = %859
  %874 = getelementptr inbounds i8, i8* %860, i64 2
  store i8 %856, i8* %874, align 1
  %875 = getelementptr inbounds i8, i8* %860, i64 1
  store i8 %857, i8* %875, align 1
  store i8 %858, i8* %860, align 1
  br label %876

876:                                              ; preds = %873, %859
  %877 = getelementptr inbounds i8, i8* %860, i64 %827
  %878 = add nuw nsw i32 %861, 1
  %879 = icmp eq i32 %878, %4
  br i1 %879, label %991, label %859

880:                                              ; preds = %987, %836
  %881 = phi i64 [ 0, %836 ], [ %989, %987 ]
  %882 = phi i8* [ %1, %836 ], [ %988, %987 ]
  %883 = trunc i64 %881 to i32
  %884 = add nsw i32 %883, %3
  %885 = sdiv i32 %884, 8
  %886 = sext i32 %885 to i64
  %887 = getelementptr inbounds i8, i8* %2, i64 %886
  %888 = load i8, i8* %887, align 1
  %889 = zext i8 %888 to i32
  %890 = srem i32 %884, 8
  %891 = sub nsw i32 7, %890
  %892 = shl i32 1, %891
  %893 = and i32 %892, %889
  %894 = icmp eq i32 %893, 0
  br i1 %894, label %987, label %895

895:                                              ; preds = %880
  br i1 %837, label %903, label %896

896:                                              ; preds = %895
  %897 = getelementptr inbounds i8, i8* %5, i64 %881
  %898 = load i8, i8* %897, align 1
  %899 = zext i8 %898 to i16
  %900 = mul nuw i16 %839, %899
  %901 = udiv i16 %900, 255
  %902 = zext i16 %901 to i32
  br label %903

903:                                              ; preds = %896, %895
  %904 = phi i32 [ %902, %896 ], [ %840, %895 ]
  %905 = icmp eq i32 %904, 0
  br i1 %905, label %987, label %906

906:                                              ; preds = %903
  br i1 %842, label %907, label %935

907:                                              ; preds = %906
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %843) #7
  store i32 -1431655766, i32* %844, align 4
  store i32 -1431655766, i32* %845, align 4
  store i32 -1431655766, i32* %846, align 4
  call void @llvm.lifetime.start.p0i8(i64 3, i8* nonnull %847) #7
  store i8 %850, i8* %847, align 1
  store i8 %851, i8* %848, align 1
  store i8 %852, i8* %849, align 1
  call fastcc void @_ZN12_GLOBAL__N_19RGB_BlendE9BlendModePKhS2_Pi(i32 %824, i8* nonnull %847, i8* %882, i32* nonnull %844) #7
  %908 = load i8, i8* %882, align 1
  %909 = zext i8 %908 to i32
  %910 = sub nuw nsw i32 255, %904
  %911 = mul nsw i32 %910, %909
  %912 = load i32, i32* %844, align 4
  %913 = mul nsw i32 %912, %904
  %914 = add nsw i32 %911, %913
  %915 = sdiv i32 %914, 255
  %916 = trunc i32 %915 to i8
  store i8 %916, i8* %882, align 1
  %917 = getelementptr inbounds i8, i8* %882, i64 1
  %918 = load i8, i8* %917, align 1
  %919 = zext i8 %918 to i32
  %920 = mul nsw i32 %910, %919
  %921 = load i32, i32* %845, align 4
  %922 = mul nsw i32 %921, %904
  %923 = add nsw i32 %920, %922
  %924 = sdiv i32 %923, 255
  %925 = trunc i32 %924 to i8
  store i8 %925, i8* %917, align 1
  %926 = getelementptr inbounds i8, i8* %882, i64 2
  %927 = load i8, i8* %926, align 1
  %928 = zext i8 %927 to i32
  %929 = mul nsw i32 %910, %928
  %930 = load i32, i32* %846, align 4
  %931 = mul nsw i32 %930, %904
  %932 = add nsw i32 %929, %931
  %933 = sdiv i32 %932, 255
  %934 = trunc i32 %933 to i8
  store i8 %934, i8* %926, align 1
  call void @llvm.lifetime.end.p0i8(i64 3, i8* nonnull %847) #7
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %843) #7
  br label %987

935:                                              ; preds = %906
  %936 = load i8, i8* %882, align 1
  %937 = zext i8 %936 to i32
  br i1 %828, label %938, label %964

938:                                              ; preds = %935
  %939 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %824, i32 %937, i32 %822) #7
  %940 = sub nuw nsw i32 255, %904
  %941 = mul nsw i32 %940, %937
  %942 = mul nsw i32 %939, %904
  %943 = add nsw i32 %942, %941
  %944 = sdiv i32 %943, 255
  %945 = trunc i32 %944 to i8
  store i8 %945, i8* %882, align 1
  %946 = getelementptr inbounds i8, i8* %882, i64 1
  %947 = load i8, i8* %946, align 1
  %948 = zext i8 %947 to i32
  %949 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %824, i32 %948, i32 %820) #7
  %950 = mul nsw i32 %940, %948
  %951 = mul nsw i32 %949, %904
  %952 = add nsw i32 %950, %951
  %953 = sdiv i32 %952, 255
  %954 = trunc i32 %953 to i8
  store i8 %954, i8* %946, align 1
  %955 = getelementptr inbounds i8, i8* %882, i64 2
  %956 = load i8, i8* %955, align 1
  %957 = zext i8 %956 to i32
  %958 = tail call fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32 %824, i32 %957, i32 %818) #7
  %959 = mul nsw i32 %940, %957
  %960 = mul nsw i32 %958, %904
  %961 = add nsw i32 %959, %960
  %962 = sdiv i32 %961, 255
  %963 = trunc i32 %962 to i8
  store i8 %963, i8* %955, align 1
  br label %987

964:                                              ; preds = %935
  %965 = sub nuw nsw i32 255, %904
  %966 = mul nsw i32 %965, %937
  %967 = mul nsw i32 %904, %822
  %968 = add nsw i32 %966, %967
  %969 = sdiv i32 %968, 255
  %970 = trunc i32 %969 to i8
  store i8 %970, i8* %882, align 1
  %971 = getelementptr inbounds i8, i8* %882, i64 1
  %972 = load i8, i8* %971, align 1
  %973 = zext i8 %972 to i32
  %974 = mul nsw i32 %965, %973
  %975 = mul nsw i32 %904, %820
  %976 = add nsw i32 %974, %975
  %977 = sdiv i32 %976, 255
  %978 = trunc i32 %977 to i8
  store i8 %978, i8* %971, align 1
  %979 = getelementptr inbounds i8, i8* %882, i64 2
  %980 = load i8, i8* %979, align 1
  %981 = zext i8 %980 to i32
  %982 = mul nsw i32 %965, %981
  %983 = mul nsw i32 %904, %818
  %984 = add nsw i32 %982, %983
  %985 = sdiv i32 %984, 255
  %986 = trunc i32 %985 to i8
  store i8 %986, i8* %979, align 1
  br label %987

987:                                              ; preds = %907, %938, %964, %903, %880
  %988 = getelementptr inbounds i8, i8* %882, i64 %827
  %989 = add nuw nsw i64 %881, 1
  %990 = icmp eq i64 %989, %853
  br i1 %990, label %991, label %880

991:                                              ; preds = %587, %474, %414, %270, %987, %876, %809, %667, %135, %182, %62, %854, %835, %637, %609, %451, %428, %240, %209, %140, %77, %14, %813
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN22CFX_ScanlineCompositor7PaletteC2Ev(%"class.CFX_ScanlineCompositor::Palette"* nocapture) unnamed_addr #3 align 2 {
  %2 = bitcast %"class.CFX_ScanlineCompositor::Palette"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 24, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN22CFX_ScanlineCompositor7PaletteD2Ev(%"class.CFX_ScanlineCompositor::Palette"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.CFX_ScanlineCompositor::Palette", %"class.CFX_ScanlineCompositor::Palette"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %3 = load i32*, i32** %2, align 8
  store i32* null, i32** %2, align 8
  %4 = icmp eq i32* %3, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  %6 = bitcast i32* %3 to i8*
  tail call void @_Z7FX_FreePv(i8* nonnull %6) #7
  br label %7

7:                                                ; preds = %1, %5
  ret void
}

declare i8* @_ZN6pdfium8internal11CallocOrDieEmm(i64, i64) local_unnamed_addr #4

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @_ZN12_GLOBAL__N_19RGB_BlendE9BlendModePKhS2_Pi(i32, i8* nocapture readonly, i8* nocapture readonly, i32* nocapture) unnamed_addr #1 {
  %5 = getelementptr inbounds i8, i8* %1, i64 2
  %6 = load i8, i8* %5, align 1
  %7 = getelementptr inbounds i8, i8* %1, i64 1
  %8 = load i8, i8* %7, align 1
  %9 = load i8, i8* %1, align 1
  %10 = zext i8 %9 to i32
  %11 = getelementptr inbounds i8, i8* %2, i64 2
  %12 = load i8, i8* %11, align 1
  %13 = getelementptr inbounds i8, i8* %2, i64 1
  %14 = load i8, i8* %13, align 1
  %15 = load i8, i8* %2, align 1
  %16 = zext i8 %15 to i32
  switch i32 %0, label %171 [
    i32 12, label %17
    i32 13, label %73
    i32 14, label %129
    i32 15, label %150
  ]

17:                                               ; preds = %4
  %18 = zext i8 %6 to i32
  %19 = zext i8 %12 to i32
  %20 = zext i8 %14 to i32
  %21 = icmp ult i32 %20, %16
  %22 = select i1 %21, i32 %16, i32 %20
  %23 = icmp sgt i32 %22, %19
  %24 = select i1 %23, i32 %22, i32 %19
  %25 = icmp ugt i32 %20, %16
  %26 = select i1 %25, i32 %16, i32 %20
  %27 = icmp slt i32 %26, %19
  %28 = select i1 %27, i32 %26, i32 %19
  %29 = sub nsw i32 %24, %28
  %30 = zext i8 %8 to i32
  %31 = icmp ugt i32 %30, %10
  %32 = select i1 %31, i32 %10, i32 %30
  %33 = icmp slt i32 %32, %18
  %34 = select i1 %33, i32 %32, i32 %18
  %35 = icmp ult i32 %30, %10
  %36 = select i1 %35, i32 %10, i32 %30
  %37 = icmp sgt i32 %36, %18
  %38 = select i1 %37, i32 %36, i32 %18
  %39 = icmp eq i32 %38, %34
  br i1 %39, label %54, label %40

40:                                               ; preds = %17
  %41 = sub nsw i32 %18, %34
  %42 = mul nsw i32 %29, %41
  %43 = sub nsw i32 %38, %34
  %44 = sdiv i32 %42, %43
  %45 = sub nsw i32 %30, %34
  %46 = mul nsw i32 %29, %45
  %47 = sdiv i32 %46, %43
  %48 = sub nsw i32 %10, %34
  %49 = mul nsw i32 %29, %48
  %50 = sdiv i32 %49, %43
  %51 = zext i32 %47 to i64
  %52 = shl nuw i64 %51, 32
  %53 = zext i32 %44 to i64
  br label %54

54:                                               ; preds = %17, %40
  %55 = phi i32 [ %50, %40 ], [ 0, %17 ]
  %56 = phi i64 [ %53, %40 ], [ 0, %17 ]
  %57 = phi i64 [ %52, %40 ], [ 0, %17 ]
  %58 = or i64 %57, %56
  %59 = mul nuw nsw i32 %19, 30
  %60 = mul nuw nsw i32 %20, 59
  %61 = mul nuw nsw i32 %16, 11
  %62 = add nuw nsw i32 %60, %59
  %63 = add nuw nsw i32 %62, %61
  %64 = trunc i32 %63 to i16
  %65 = udiv i16 %64, 100
  %66 = zext i16 %65 to i32
  %67 = tail call fastcc { i64, i32 } @_ZN12_GLOBAL__N_16SetLumENS_3RGBEi(i64 %58, i32 %55, i32 %66)
  %68 = extractvalue { i64, i32 } %67, 0
  %69 = extractvalue { i64, i32 } %67, 1
  %70 = trunc i64 %68 to i32
  %71 = lshr i64 %68, 32
  %72 = trunc i64 %71 to i32
  br label %171

73:                                               ; preds = %4
  %74 = zext i8 %12 to i32
  %75 = zext i8 %6 to i32
  %76 = zext i8 %8 to i32
  %77 = icmp ult i32 %76, %10
  %78 = select i1 %77, i32 %10, i32 %76
  %79 = icmp sgt i32 %78, %75
  %80 = select i1 %79, i32 %78, i32 %75
  %81 = icmp ugt i32 %76, %10
  %82 = select i1 %81, i32 %10, i32 %76
  %83 = icmp slt i32 %82, %75
  %84 = select i1 %83, i32 %82, i32 %75
  %85 = sub nsw i32 %80, %84
  %86 = zext i8 %14 to i32
  %87 = icmp ugt i32 %86, %16
  %88 = select i1 %87, i32 %16, i32 %86
  %89 = icmp slt i32 %88, %74
  %90 = select i1 %89, i32 %88, i32 %74
  %91 = icmp ult i32 %86, %16
  %92 = select i1 %91, i32 %16, i32 %86
  %93 = icmp sgt i32 %92, %74
  %94 = select i1 %93, i32 %92, i32 %74
  %95 = icmp eq i32 %94, %90
  br i1 %95, label %110, label %96

96:                                               ; preds = %73
  %97 = sub nsw i32 %74, %90
  %98 = mul nsw i32 %97, %85
  %99 = sub nsw i32 %94, %90
  %100 = sdiv i32 %98, %99
  %101 = sub nsw i32 %86, %90
  %102 = mul nsw i32 %101, %85
  %103 = sdiv i32 %102, %99
  %104 = sub nsw i32 %16, %90
  %105 = mul nsw i32 %104, %85
  %106 = sdiv i32 %105, %99
  %107 = zext i32 %103 to i64
  %108 = shl nuw i64 %107, 32
  %109 = zext i32 %100 to i64
  br label %110

110:                                              ; preds = %73, %96
  %111 = phi i32 [ %106, %96 ], [ 0, %73 ]
  %112 = phi i64 [ %109, %96 ], [ 0, %73 ]
  %113 = phi i64 [ %108, %96 ], [ 0, %73 ]
  %114 = or i64 %113, %112
  %115 = mul nuw nsw i32 %74, 30
  %116 = mul nuw nsw i32 %86, 59
  %117 = mul nuw nsw i32 %16, 11
  %118 = add nuw nsw i32 %116, %115
  %119 = add nuw nsw i32 %118, %117
  %120 = trunc i32 %119 to i16
  %121 = udiv i16 %120, 100
  %122 = zext i16 %121 to i32
  %123 = tail call fastcc { i64, i32 } @_ZN12_GLOBAL__N_16SetLumENS_3RGBEi(i64 %114, i32 %111, i32 %122)
  %124 = extractvalue { i64, i32 } %123, 0
  %125 = extractvalue { i64, i32 } %123, 1
  %126 = trunc i64 %124 to i32
  %127 = lshr i64 %124, 32
  %128 = trunc i64 %127 to i32
  br label %171

129:                                              ; preds = %4
  %130 = zext i8 %8 to i64
  %131 = shl nuw nsw i64 %130, 32
  %132 = zext i8 %6 to i64
  %133 = or i64 %131, %132
  %134 = zext i8 %12 to i32
  %135 = zext i8 %14 to i32
  %136 = mul nuw nsw i32 %134, 30
  %137 = mul nuw nsw i32 %135, 59
  %138 = mul nuw nsw i32 %16, 11
  %139 = add nuw nsw i32 %137, %136
  %140 = add nuw nsw i32 %139, %138
  %141 = trunc i32 %140 to i16
  %142 = udiv i16 %141, 100
  %143 = zext i16 %142 to i32
  %144 = tail call fastcc { i64, i32 } @_ZN12_GLOBAL__N_16SetLumENS_3RGBEi(i64 %133, i32 %10, i32 %143)
  %145 = extractvalue { i64, i32 } %144, 0
  %146 = extractvalue { i64, i32 } %144, 1
  %147 = trunc i64 %145 to i32
  %148 = lshr i64 %145, 32
  %149 = trunc i64 %148 to i32
  br label %171

150:                                              ; preds = %4
  %151 = zext i8 %14 to i64
  %152 = shl nuw nsw i64 %151, 32
  %153 = zext i8 %12 to i64
  %154 = or i64 %152, %153
  %155 = zext i8 %6 to i32
  %156 = zext i8 %8 to i32
  %157 = mul nuw nsw i32 %155, 30
  %158 = mul nuw nsw i32 %156, 59
  %159 = mul nuw nsw i32 %10, 11
  %160 = add nuw nsw i32 %158, %157
  %161 = add nuw nsw i32 %160, %159
  %162 = trunc i32 %161 to i16
  %163 = udiv i16 %162, 100
  %164 = zext i16 %163 to i32
  %165 = tail call fastcc { i64, i32 } @_ZN12_GLOBAL__N_16SetLumENS_3RGBEi(i64 %154, i32 %16, i32 %164)
  %166 = extractvalue { i64, i32 } %165, 0
  %167 = extractvalue { i64, i32 } %165, 1
  %168 = trunc i64 %166 to i32
  %169 = lshr i64 %166, 32
  %170 = trunc i64 %169 to i32
  br label %171

171:                                              ; preds = %4, %150, %129, %110, %54
  %172 = phi i32 [ 0, %4 ], [ %167, %150 ], [ %146, %129 ], [ %125, %110 ], [ %69, %54 ]
  %173 = phi i32 [ 0, %4 ], [ %170, %150 ], [ %149, %129 ], [ %128, %110 ], [ %72, %54 ]
  %174 = phi i32 [ 0, %4 ], [ %168, %150 ], [ %147, %129 ], [ %126, %110 ], [ %70, %54 ]
  store i32 %172, i32* %3, align 4
  %175 = getelementptr inbounds i32, i32* %3, i64 1
  store i32 %173, i32* %175, align 4
  %176 = getelementptr inbounds i32, i32* %3, i64 2
  store i32 %174, i32* %176, align 4
  ret void
}

; Function Attrs: nounwind readnone ssp uwtable
define internal fastcc i32 @_ZN12_GLOBAL__N_15BlendE9BlendModeii(i32, i32, i32) unnamed_addr #5 {
  switch i32 %0, label %92 [
    i32 11, label %86
    i32 1, label %4
    i32 2, label %7
    i32 3, label %12
    i32 4, label %25
    i32 5, label %28
    i32 6, label %31
    i32 7, label %39
    i32 8, label %48
    i32 9, label %61
    i32 10, label %81
  ]

4:                                                ; preds = %3
  %5 = mul nsw i32 %2, %1
  %6 = sdiv i32 %5, 255
  br label %92

7:                                                ; preds = %3
  %8 = add nsw i32 %2, %1
  %9 = mul nsw i32 %2, %1
  %10 = sdiv i32 %9, -255
  %11 = add i32 %8, %10
  br label %92

12:                                               ; preds = %3
  %13 = icmp slt i32 %1, 128
  br i1 %13, label %14, label %18

14:                                               ; preds = %12
  %15 = mul nsw i32 %2, %1
  %16 = shl i32 %15, 1
  %17 = sdiv i32 %16, 255
  br label %92

18:                                               ; preds = %12
  %19 = shl nsw i32 %1, 1
  %20 = add nsw i32 %19, -255
  %21 = add nsw i32 %20, %2
  %22 = mul nsw i32 %20, %2
  %23 = sdiv i32 %22, -255
  %24 = add i32 %21, %23
  br label %92

25:                                               ; preds = %3
  %26 = icmp slt i32 %2, %1
  %27 = select i1 %26, i32 %2, i32 %1
  br label %92

28:                                               ; preds = %3
  %29 = icmp sgt i32 %2, %1
  %30 = select i1 %29, i32 %2, i32 %1
  br label %92

31:                                               ; preds = %3
  %32 = icmp eq i32 %2, 255
  br i1 %32, label %92, label %33

33:                                               ; preds = %31
  %34 = mul nsw i32 %1, 255
  %35 = sub nsw i32 255, %2
  %36 = sdiv i32 %34, %35
  %37 = icmp slt i32 %36, 255
  %38 = select i1 %37, i32 %36, i32 255
  br label %92

39:                                               ; preds = %3
  %40 = icmp eq i32 %2, 0
  br i1 %40, label %92, label %41

41:                                               ; preds = %39
  %42 = sub nsw i32 255, %1
  %43 = mul nsw i32 %42, 255
  %44 = sdiv i32 %43, %2
  %45 = icmp slt i32 %44, 255
  %46 = select i1 %45, i32 %44, i32 255
  %47 = sub nsw i32 255, %46
  br label %92

48:                                               ; preds = %3
  %49 = icmp slt i32 %2, 128
  br i1 %49, label %50, label %54

50:                                               ; preds = %48
  %51 = mul nsw i32 %2, %1
  %52 = shl i32 %51, 1
  %53 = sdiv i32 %52, 255
  br label %92

54:                                               ; preds = %48
  %55 = shl nsw i32 %2, 1
  %56 = add nsw i32 %55, -255
  %57 = add nsw i32 %56, %1
  %58 = mul nsw i32 %56, %1
  %59 = sdiv i32 %58, -255
  %60 = add i32 %57, %59
  br label %92

61:                                               ; preds = %3
  %62 = icmp slt i32 %2, 128
  %63 = shl nsw i32 %2, 1
  br i1 %62, label %64, label %71

64:                                               ; preds = %61
  %65 = sub nsw i32 255, %63
  %66 = sub nsw i32 255, %1
  %67 = mul i32 %66, %1
  %68 = mul i32 %67, %65
  %69 = sdiv i32 %68, 65025
  %70 = sub nsw i32 %1, %69
  br label %92

71:                                               ; preds = %61
  %72 = add nsw i32 %63, -255
  %73 = sext i32 %1 to i64
  %74 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN12_GLOBAL__N_110color_sqrtE, i64 0, i64 %73
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i32
  %77 = sub nsw i32 %76, %1
  %78 = mul nsw i32 %77, %72
  %79 = sdiv i32 %78, 255
  %80 = add nsw i32 %79, %1
  br label %92

81:                                               ; preds = %3
  %82 = icmp slt i32 %1, %2
  %83 = sub nsw i32 %2, %1
  %84 = sub nsw i32 %1, %2
  %85 = select i1 %82, i32 %83, i32 %84
  br label %92

86:                                               ; preds = %3
  %87 = add nsw i32 %2, %1
  %88 = mul i32 %2, %1
  %89 = shl i32 %88, 1
  %90 = sdiv i32 %89, -255
  %91 = add i32 %87, %90
  br label %92

92:                                               ; preds = %18, %14, %3, %81, %39, %31, %86, %71, %64, %54, %50, %41, %33, %28, %25, %7, %4
  %93 = phi i32 [ %91, %86 ], [ %70, %64 ], [ %80, %71 ], [ %53, %50 ], [ %60, %54 ], [ %47, %41 ], [ %38, %33 ], [ %30, %28 ], [ %27, %25 ], [ %11, %7 ], [ %6, %4 ], [ 255, %31 ], [ 0, %39 ], [ %85, %81 ], [ %2, %3 ], [ %17, %14 ], [ %24, %18 ]
  ret i32 %93
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal fastcc { i64, i32 } @_ZN12_GLOBAL__N_16SetLumENS_3RGBEi(i64, i32, i32) unnamed_addr #6 {
  %4 = trunc i64 %0 to i32
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = mul nsw i32 %4, 30
  %8 = mul nsw i32 %6, 59
  %9 = mul nsw i32 %1, 11
  %10 = add i32 %9, %7
  %11 = add i32 %10, %8
  %12 = sdiv i32 %11, 100
  %13 = sub nsw i32 %2, %12
  %14 = add nsw i32 %13, %4
  %15 = add nsw i32 %13, %6
  %16 = add nsw i32 %13, %1
  %17 = mul nsw i32 %14, 30
  %18 = mul nsw i32 %15, 59
  %19 = mul nsw i32 %16, 11
  %20 = add i32 %19, %17
  %21 = add i32 %20, %18
  %22 = sdiv i32 %21, 100
  %23 = icmp sgt i32 %15, %16
  %24 = select i1 %23, i32 %16, i32 %15
  %25 = icmp slt i32 %24, %14
  %26 = select i1 %25, i32 %24, i32 %14
  %27 = icmp slt i32 %15, %16
  %28 = select i1 %27, i32 %16, i32 %15
  %29 = icmp sgt i32 %28, %14
  %30 = select i1 %29, i32 %28, i32 %14
  %31 = icmp slt i32 %26, 0
  br i1 %31, label %32, label %46

32:                                               ; preds = %3
  %33 = sub nsw i32 %14, %22
  %34 = mul nsw i32 %33, %22
  %35 = sub nsw i32 %22, %26
  %36 = sdiv i32 %34, %35
  %37 = add nsw i32 %36, %22
  %38 = sub nsw i32 %15, %22
  %39 = mul nsw i32 %38, %22
  %40 = sdiv i32 %39, %35
  %41 = add nsw i32 %40, %22
  %42 = sub nsw i32 %16, %22
  %43 = mul nsw i32 %42, %22
  %44 = sdiv i32 %43, %35
  %45 = add nsw i32 %44, %22
  br label %46

46:                                               ; preds = %32, %3
  %47 = phi i32 [ %37, %32 ], [ %14, %3 ]
  %48 = phi i32 [ %41, %32 ], [ %15, %3 ]
  %49 = phi i32 [ %45, %32 ], [ %16, %3 ]
  %50 = icmp sgt i32 %30, 255
  br i1 %50, label %51, label %66

51:                                               ; preds = %46
  %52 = sub nsw i32 %47, %22
  %53 = sub nsw i32 255, %22
  %54 = mul nsw i32 %52, %53
  %55 = sub nsw i32 %30, %22
  %56 = sdiv i32 %54, %55
  %57 = add nsw i32 %56, %22
  %58 = sub nsw i32 %48, %22
  %59 = mul nsw i32 %58, %53
  %60 = sdiv i32 %59, %55
  %61 = add nsw i32 %60, %22
  %62 = sub nsw i32 %49, %22
  %63 = mul nsw i32 %62, %53
  %64 = sdiv i32 %63, %55
  %65 = add nsw i32 %64, %22
  br label %66

66:                                               ; preds = %46, %51
  %67 = phi i32 [ %57, %51 ], [ %47, %46 ]
  %68 = phi i32 [ %61, %51 ], [ %48, %46 ]
  %69 = phi i32 [ %65, %51 ], [ %49, %46 ]
  %70 = zext i32 %68 to i64
  %71 = shl nuw i64 %70, 32
  %72 = zext i32 %67 to i64
  %73 = or i64 %71, %72
  %74 = insertvalue { i64, i32 } undef, i64 %73, 0
  %75 = insertvalue { i64, i32 } %74, i32 %69, 1
  ret { i64, i32 } %75
}

declare void @_Z7FX_FreePv(i8*) local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN22CFX_ScanlineCompositor7Palette15Make8BitPaletteEm: argument 0"}
!4 = distinct !{!4, !"_ZN22CFX_ScanlineCompositor7Palette15Make8BitPaletteEm"}
!5 = !{!"branch_weights", i32 2000, i32 1}
!6 = !{i32 -2143706104}
!7 = !{i32 -2143706083}
!8 = !{!"branch_weights", i32 1, i32 2000}
!9 = !{!10}
!10 = distinct !{!10, !11, !"_ZN22CFX_ScanlineCompositor7Palette16Make32BitPaletteEm: argument 0"}
!11 = distinct !{!11, !"_ZN22CFX_ScanlineCompositor7Palette16Make32BitPaletteEm"}
!12 = !{!13}
!13 = distinct !{!13, !14, !"_ZN22CFX_ScanlineCompositor7Palette15Make8BitPaletteEm: argument 0"}
!14 = distinct !{!14, !"_ZN22CFX_ScanlineCompositor7Palette15Make8BitPaletteEm"}
!15 = !{!16}
!16 = distinct !{!16, !17, !"_ZN22CFX_ScanlineCompositor7Palette16Make32BitPaletteEm: argument 0"}
!17 = distinct !{!17, !"_ZN22CFX_ScanlineCompositor7Palette16Make32BitPaletteEm"}
!18 = !{i8 0, i8 2}
!19 = !{!20}
!20 = distinct !{!20, !21}
!21 = distinct !{!21, !"LVerDomain"}
!22 = !{!23}
!23 = distinct !{!23, !21}
!24 = distinct !{!24, !25}
!25 = !{!"llvm.loop.isvectorized", i32 1}
!26 = distinct !{!26, !25}
!27 = distinct !{!27, !28}
!28 = !{!"llvm.loop.unroll.disable"}
!29 = distinct !{!29, !28}
!30 = !{!31}
!31 = distinct !{!31, !32, !"_ZNK22CFX_ScanlineCompositor7Palette15Get32BitPaletteEv: argument 0"}
!32 = distinct !{!32, !"_ZNK22CFX_ScanlineCompositor7Palette15Get32BitPaletteEv"}
!33 = !{i32 -2143669837}
!34 = !{i32 -2143669816}
!35 = !{!36}
!36 = distinct !{!36, !37, !"_ZNK22CFX_ScanlineCompositor7Palette15Get32BitPaletteEv: argument 0"}
!37 = distinct !{!37, !"_ZNK22CFX_ScanlineCompositor7Palette15Get32BitPaletteEv"}
!38 = !{!39}
!39 = distinct !{!39, !40, !"_ZNK22CFX_ScanlineCompositor7Palette15Get32BitPaletteEv: argument 0"}
!40 = distinct !{!40, !"_ZNK22CFX_ScanlineCompositor7Palette15Get32BitPaletteEv"}
!41 = !{!42}
!42 = distinct !{!42, !43, !"_ZNK22CFX_ScanlineCompositor7Palette15Get32BitPaletteEv: argument 0"}
!43 = distinct !{!43, !"_ZNK22CFX_ScanlineCompositor7Palette15Get32BitPaletteEv"}
!44 = !{!45}
!45 = distinct !{!45, !46}
!46 = distinct !{!46, !"LVerDomain"}
!47 = !{!48}
!48 = distinct !{!48, !46}
!49 = distinct !{!49, !25}
!50 = distinct !{!50, !25}
!51 = !{!52}
!52 = distinct !{!52, !53, !"_ZNK22CFX_ScanlineCompositor7Palette14Get8BitPaletteEv: argument 0"}
!53 = distinct !{!53, !"_ZNK22CFX_ScanlineCompositor7Palette14Get8BitPaletteEv"}
!54 = !{i32 -2143670428}
!55 = !{i32 -2143670407}
!56 = !{!57}
!57 = distinct !{!57, !58, !"_ZNK22CFX_ScanlineCompositor7Palette14Get8BitPaletteEv: argument 0"}
!58 = distinct !{!58, !"_ZNK22CFX_ScanlineCompositor7Palette14Get8BitPaletteEv"}
!59 = !{!60}
!60 = distinct !{!60, !61, !"_ZNK22CFX_ScanlineCompositor7Palette14Get8BitPaletteEv: argument 0"}
!61 = distinct !{!61, !"_ZNK22CFX_ScanlineCompositor7Palette14Get8BitPaletteEv"}
!62 = !{!63}
!63 = distinct !{!63, !64, !"_ZNK22CFX_ScanlineCompositor7Palette14Get8BitPaletteEv: argument 0"}
!64 = distinct !{!64, !"_ZNK22CFX_ScanlineCompositor7Palette14Get8BitPaletteEv"}
!65 = !{!66}
!66 = distinct !{!66, !67, !"_ZNK22CFX_ScanlineCompositor7Palette15Get32BitPaletteEv: argument 0"}
!67 = distinct !{!67, !"_ZNK22CFX_ScanlineCompositor7Palette15Get32BitPaletteEv"}
!68 = !{!69}
!69 = distinct !{!69, !70, !"_ZNK22CFX_ScanlineCompositor7Palette15Get32BitPaletteEv: argument 0"}
!70 = distinct !{!70, !"_ZNK22CFX_ScanlineCompositor7Palette15Get32BitPaletteEv"}
!71 = !{!72}
!72 = distinct !{!72, !73, !"_ZNK22CFX_ScanlineCompositor7Palette15Get32BitPaletteEv: argument 0"}
!73 = distinct !{!73, !"_ZNK22CFX_ScanlineCompositor7Palette15Get32BitPaletteEv"}
!74 = !{!75}
!75 = distinct !{!75, !76, !"_ZNK22CFX_ScanlineCompositor7Palette15Get32BitPaletteEv: argument 0"}
!76 = distinct !{!76, !"_ZNK22CFX_ScanlineCompositor7Palette15Get32BitPaletteEv"}
!77 = !{!78}
!78 = distinct !{!78, !79, !"_ZNK22CFX_ScanlineCompositor7Palette15Get32BitPaletteEv: argument 0"}
!79 = distinct !{!79, !"_ZNK22CFX_ScanlineCompositor7Palette15Get32BitPaletteEv"}
!80 = !{!81}
!81 = distinct !{!81, !82, !"_ZNK22CFX_ScanlineCompositor7Palette15Get32BitPaletteEv: argument 0"}
!82 = distinct !{!82, !"_ZNK22CFX_ScanlineCompositor7Palette15Get32BitPaletteEv"}
