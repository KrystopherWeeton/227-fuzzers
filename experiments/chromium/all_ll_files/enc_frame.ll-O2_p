; ModuleID = '../../third_party/libjxl/src/lib/jxl/enc_frame.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/enc_frame.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.jxl::YCbCrChromaSubsampling" = type <{ %"class.jxl::Fields", [3 x i32], i8, i8, [2 x i8] }>
%"class.jxl::Fields" = type { i32 (...)** }
%"class.jxl::Plane" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::PlaneBase" = type { i32, i32, i32, i32, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"struct.jxl::ButteraugliParams" = type <{ float, float, float, i8, [3 x i8] }>
%"struct.jxl::ModularOptions" = type <{ i64, float, i32, %"class.std::__1::vector", float, [4 x i8], i64, i32, i32, float, i32, i8, [3 x i8], i32, i8, [7 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i32* }
%"struct.std::__1::pair" = type { float, float }
%"class.jxl::QuantEncoding" = type { %"struct.jxl::QuantEncodingInternal.base", [7 x i8] }
%"struct.jxl::QuantEncodingInternal.base" = type <{ i32, [4 x i8], %"struct.jxl::DctQuantWeightParams", %union.anon.108, %"struct.jxl::DctQuantWeightParams", %union.anon.125 }>
%union.anon.108 = type { %"struct.std::__1::array.115", [4 x i8] }
%"struct.std::__1::array.115" = type { [3 x %"struct.std::__1::array.116"] }
%"struct.std::__1::array.116" = type { [9 x float] }
%"struct.jxl::DctQuantWeightParams" = type <{ i64, %"struct.std::__1::array.106", [4 x i8] }>
%"struct.std::__1::array.106" = type { [3 x %"struct.std::__1::array.107"] }
%"struct.std::__1::array.107" = type { [17 x float] }
%union.anon.125 = type { i8 }
%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"struct.jxl::CompressParams" = type { float, i64, float, float, float, i8, [3 x float], i32, i64, i32, i32, i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", i8, i64, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, i32, i8, i64, float, %"class.jxl::Plane"*, i8*, i8*, i8, i8, [2 x i8], %"struct.jxl::ButteraugliParams", i8, [3 x i8], %"struct.jxl::ModularOptions", i32, %"struct.std::__1::pair", i32, float, float, i32, i32, i8, i8, i64, i64 }
%"struct.jxl::FrameInfo" = type { i8, i8, i32, i64, i8, i8, i64 }
%"struct.jxl::CodecMetadata" = type { %"struct.jxl::ImageMetadata", %"class.jxl::SizeHeader", %"struct.jxl::CustomTransformData" }
%"struct.jxl::ImageMetadata" = type <{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], %"struct.jxl::ColorEncoding", i32, i8, i8, i8, i8, %"class.jxl::SizeHeader", %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector.4", %"struct.jxl::CustomTransformData", %"class.jxl::PreviewHeader", %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }>
%"struct.jxl::BitDepth" = type <{ %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8] }>
%"struct.jxl::ColorEncoding" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::CustomTransferFunction", i32, i8, i8, %"class.jxl::PaddedBytes", i32, %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }
%"struct.jxl::CustomTransferFunction" = type { %"class.jxl::Fields", i32, i8, i32, i32 }
%"class.jxl::PaddedBytes" = type { i64, i64, %"class.std::__1::unique_ptr" }
%"struct.jxl::Customxy" = type { %"class.jxl::Fields", i32, i32 }
%"struct.jxl::ToneMapping" = type <{ %"class.jxl::Fields", i8, [3 x i8], float, float, i8, [3 x i8], float, [4 x i8] }>
%"class.std::__1::vector.4" = type { %"class.std::__1::__vector_base.5" }
%"class.std::__1::__vector_base.5" = type { %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"*, %"class.std::__1::__compressed_pair.11" }
%"struct.jxl::ExtraChannelInfo" = type { %"class.jxl::Fields", i8, i32, %"struct.jxl::BitDepth", i32, %"class.std::__1::basic_string", i8, [4 x float], i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"struct.jxl::ExtraChannelInfo"* }
%"class.jxl::PreviewHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::AnimationHeader" = type <{ %"class.jxl::Fields", i32, i32, i32, i8, [3 x i8] }>
%"class.jxl::SizeHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::CustomTransformData" = type <{ %"class.jxl::Fields", i8, i8, [6 x i8], %"struct.jxl::OpsinInverseMatrix", i32, [15 x float], [55 x float], [210 x float], [4 x i8] }>
%"struct.jxl::OpsinInverseMatrix" = type <{ %"class.jxl::Fields", i8, [3 x i8], [9 x float], [3 x float], [4 x float], [4 x i8] }>
%"class.jxl::ImageBundle" = type { %"class.std::__1::unique_ptr.16", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", %"struct.jxl::ColorEncoding", %"class.std::__1::vector.85", i64 }
%"class.std::__1::unique_ptr.16" = type { %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"struct.jxl::jpeg::JPEGData"* }
%"struct.jxl::jpeg::JPEGData" = type { %"class.jxl::Fields", i32, i32, i32, %"class.std::__1::vector.19", %"class.std::__1::vector.32", %"class.std::__1::vector.19", %"class.std::__1::vector.39", %"class.std::__1::vector.46", %"class.std::__1::vector.55", %"class.std::__1::vector.69", %"class.std::__1::vector.21", %"class.std::__1::vector.19", %"class.std::__1::vector.21", i32, i8, %"class.std::__1::vector.21" }
%"class.std::__1::vector.32" = type { %"class.std::__1::__vector_base.33" }
%"class.std::__1::__vector_base.33" = type { i32*, i32*, %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { i32* }
%"class.std::__1::vector.39" = type { %"class.std::__1::__vector_base.40" }
%"class.std::__1::__vector_base.40" = type { %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"*, %"class.std::__1::__compressed_pair.41" }
%"struct.jxl::jpeg::JPEGQuantTable" = type <{ %"struct.std::__1::array", i32, i32, i8, [3 x i8] }>
%"struct.std::__1::array" = type { [64 x i32] }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { %"struct.jxl::jpeg::JPEGQuantTable"* }
%"class.std::__1::vector.46" = type { %"class.std::__1::__vector_base.47" }
%"class.std::__1::__vector_base.47" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"class.std::__1::__compressed_pair.50" }
%"struct.jxl::jpeg::JPEGHuffmanCode" = type <{ %"struct.std::__1::array.48", %"struct.std::__1::array.49", i32, i8, [3 x i8] }>
%"struct.std::__1::array.48" = type { [17 x i32] }
%"struct.std::__1::array.49" = type { [257 x i32] }
%"class.std::__1::__compressed_pair.50" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"struct.std::__1::__compressed_pair_elem.51" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"* }
%"class.std::__1::vector.55" = type { %"class.std::__1::__vector_base.56" }
%"class.std::__1::__vector_base.56" = type { %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"*, %"class.std::__1::__compressed_pair.64" }
%"struct.jxl::jpeg::JPEGComponent" = type { i32, i32, i32, i32, i32, i32, %"class.std::__1::vector.57" }
%"class.std::__1::vector.57" = type { %"class.std::__1::__vector_base.58" }
%"class.std::__1::__vector_base.58" = type { i16*, i16*, %"class.std::__1::__compressed_pair.59" }
%"class.std::__1::__compressed_pair.59" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"struct.std::__1::__compressed_pair_elem.60" = type { i16* }
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { %"struct.jxl::jpeg::JPEGComponent"* }
%"class.std::__1::vector.69" = type { %"class.std::__1::__vector_base.70" }
%"class.std::__1::__vector_base.70" = type { %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"*, %"class.std::__1::__compressed_pair.79" }
%"struct.jxl::jpeg::JPEGScanInfo" = type { i32, i32, i32, i32, i32, %"struct.std::__1::array.71", i32, %"class.std::__1::vector", %"class.std::__1::vector.72" }
%"struct.std::__1::array.71" = type { [4 x %"struct.jxl::jpeg::JPEGComponentScanInfo"] }
%"struct.jxl::jpeg::JPEGComponentScanInfo" = type { i32, i32, i32 }
%"class.std::__1::vector.72" = type { %"class.std::__1::__vector_base.73" }
%"class.std::__1::__vector_base.73" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"class.std::__1::__compressed_pair.74" }
%"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo" = type { i32, i32 }
%"class.std::__1::__compressed_pair.74" = type { %"struct.std::__1::__compressed_pair_elem.75" }
%"struct.std::__1::__compressed_pair_elem.75" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* }
%"class.std::__1::__compressed_pair.79" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"struct.std::__1::__compressed_pair_elem.80" = type { %"struct.jxl::jpeg::JPEGScanInfo"* }
%"class.std::__1::vector.19" = type { %"class.std::__1::__vector_base.20" }
%"class.std::__1::__vector_base.20" = type { %"class.std::__1::vector.21"*, %"class.std::__1::vector.21"*, %"class.std::__1::__compressed_pair.27" }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { %"class.std::__1::vector.21"* }
%"class.std::__1::vector.21" = type { %"class.std::__1::__vector_base.22" }
%"class.std::__1::__vector_base.22" = type { i8*, i8*, %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.jxl::FrameOrigin" = type { i32, i32 }
%"class.jxl::Image3" = type { [3 x %"class.jxl::Plane"] }
%"class.std::__1::vector.85" = type { %"class.std::__1::__vector_base.86" }
%"class.std::__1::__vector_base.86" = type { %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.std::__1::__compressed_pair.87" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.88" }
%"struct.std::__1::__compressed_pair_elem.88" = type { %"class.jxl::Plane"* }
%"struct.jxl::PassesEncoderState" = type { %"struct.jxl::PassesSharedState", %"class.jxl::Plane", %"class.jxl::Plane", %"class.std::__1::vector.178", %"class.std::__1::vector.191", %"class.jxl::ProgressiveSplitter", %"struct.jxl::CompressParams", %"class.std::__1::vector.199", %"class.std::__1::vector.21", %"class.std::__1::vector", float, float, %"class.std::__1::unique_ptr.235" }
%"struct.jxl::PassesSharedState" = type { %"struct.jxl::CodecMetadata"*, %"struct.jxl::FrameHeader", %"struct.jxl::FrameDimensions", %"class.jxl::AcStrategyImage", %"class.jxl::DequantMatrices", %"class.jxl::Quantizer", %"class.jxl::Plane.131", %"class.jxl::Plane.99", %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ImageFeatures", i64, %"class.std::__1::vector", %"class.jxl::Plane.99", %"class.jxl::Image3", %"class.jxl::Image3"*, %"struct.jxl::BlockCtxMap", [4 x %"class.jxl::Image3"], [4 x %struct.anon.176], i64 }
%"struct.jxl::FrameHeader" = type { %"class.jxl::Fields", i8, i32, i32, i64, i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", i32, i32, i32, %"class.std::__1::basic_string", %"struct.jxl::Passes", i8, %"struct.jxl::FrameSize", i32, %"class.std::__1::vector", %"struct.jxl::FrameOrigin", %"struct.jxl::BlendingInfo", %"class.std::__1::vector.92", %"struct.jxl::AnimationFrame", i8, i32, i8, i32, %"struct.jxl::CodecMetadata"*, %"struct.jxl::LoopFilter", i8, i64 }
%"struct.jxl::Passes" = type <{ %"class.jxl::Fields", i32, i32, [11 x i32], [11 x i32], [11 x i32], [4 x i8] }>
%"struct.jxl::FrameSize" = type { i32, i32 }
%"struct.jxl::BlendingInfo" = type <{ %"class.jxl::Fields", i32, i32, i8, [3 x i8], i32, i64, i8, [7 x i8] }>
%"class.std::__1::vector.92" = type { %"class.std::__1::__vector_base.93" }
%"class.std::__1::__vector_base.93" = type { %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"*, %"class.std::__1::__compressed_pair.94" }
%"class.std::__1::__compressed_pair.94" = type { %"struct.std::__1::__compressed_pair_elem.95" }
%"struct.std::__1::__compressed_pair_elem.95" = type { %"struct.jxl::BlendingInfo"* }
%"struct.jxl::AnimationFrame" = type { %"class.jxl::Fields", i32, i32, %"struct.jxl::CodecMetadata"* }
%"struct.jxl::LoopFilter" = type <{ %"class.jxl::Fields", i8, i8, i8, i8, float, float, float, float, float, float, i32, i8, [3 x i8], [8 x float], i8, [3 x i8], [3 x float], float, float, i8, [3 x i8], float, float, float, float, float, [4 x i8], i64, i8, [7 x i8] }>
%"struct.jxl::FrameDimensions" = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%"class.jxl::AcStrategyImage" = type { %"class.jxl::Plane.99", i8*, i64 }
%"class.jxl::DequantMatrices" = type { %"class.std::__1::unique_ptr.100", float*, float*, [3 x float], [3 x float], [81 x i64], %"class.std::__1::vector.104" }
%"class.std::__1::unique_ptr.100" = type { %"class.std::__1::__compressed_pair.101" }
%"class.std::__1::__compressed_pair.101" = type { %"struct.std::__1::__compressed_pair_elem.102", %"struct.std::__1::__compressed_pair_elem.103" }
%"struct.std::__1::__compressed_pair_elem.102" = type { float* }
%"struct.std::__1::__compressed_pair_elem.103" = type { %"class.hwy::AlignedFreer" }
%"class.hwy::AlignedFreer" = type { void (i8*, i8*)*, i8* }
%"class.std::__1::vector.104" = type { %"class.std::__1::__vector_base.105" }
%"class.std::__1::__vector_base.105" = type { %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"*, %"class.std::__1::__compressed_pair.126" }
%"class.std::__1::__compressed_pair.126" = type { %"struct.std::__1::__compressed_pair_elem.127" }
%"struct.std::__1::__compressed_pair_elem.127" = type { %"class.jxl::QuantEncoding"* }
%"class.jxl::Quantizer" = type { [4 x float], [4 x float], i32, i32, float, float, float, [3 x float], %"class.jxl::DequantMatrices"* }
%"class.jxl::Plane.131" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::ColorCorrelationMap" = type { %"class.jxl::Plane.132", %"class.jxl::Plane.132", [4 x float], i32, float, float, float, i32, i32 }
%"class.jxl::Plane.132" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::ImageFeatures" = type { %"struct.jxl::NoiseParams", %"class.jxl::PatchDictionary", %"class.jxl::Splines" }
%"struct.jxl::NoiseParams" = type { [8 x float] }
%"class.jxl::PatchDictionary" = type { %"struct.jxl::PassesSharedState"*, %"class.std::__1::vector.133", %"class.std::__1::vector.147", %"class.std::__1::vector.147" }
%"class.std::__1::vector.133" = type { %"class.std::__1::__vector_base.134" }
%"class.std::__1::__vector_base.134" = type { %"struct.jxl::PatchPosition"*, %"struct.jxl::PatchPosition"*, %"class.std::__1::__compressed_pair.142" }
%"struct.jxl::PatchPosition" = type { i64, i64, %"class.std::__1::vector.135", %"struct.jxl::PatchReferencePosition" }
%"class.std::__1::vector.135" = type { %"class.std::__1::__vector_base.136" }
%"class.std::__1::__vector_base.136" = type { %"struct.jxl::PatchBlending"*, %"struct.jxl::PatchBlending"*, %"class.std::__1::__compressed_pair.137" }
%"struct.jxl::PatchBlending" = type { i8, i32, i8 }
%"class.std::__1::__compressed_pair.137" = type { %"struct.std::__1::__compressed_pair_elem.138" }
%"struct.std::__1::__compressed_pair_elem.138" = type { %"struct.jxl::PatchBlending"* }
%"struct.jxl::PatchReferencePosition" = type { i64, i64, i64, i64, i64 }
%"class.std::__1::__compressed_pair.142" = type { %"struct.std::__1::__compressed_pair_elem.143" }
%"struct.std::__1::__compressed_pair_elem.143" = type { %"struct.jxl::PatchPosition"* }
%"class.std::__1::vector.147" = type { %"class.std::__1::__vector_base.148" }
%"class.std::__1::__vector_base.148" = type { i64*, i64*, %"class.std::__1::__compressed_pair.149" }
%"class.std::__1::__compressed_pair.149" = type { %"struct.std::__1::__compressed_pair_elem.150" }
%"struct.std::__1::__compressed_pair_elem.150" = type { i64* }
%"class.jxl::Splines" = type { i32, %"class.std::__1::vector.154", %"class.std::__1::vector.169" }
%"class.std::__1::vector.154" = type { %"class.std::__1::__vector_base.155" }
%"class.std::__1::__vector_base.155" = type { %"class.jxl::QuantizedSpline"*, %"class.jxl::QuantizedSpline"*, %"class.std::__1::__compressed_pair.164" }
%"class.jxl::QuantizedSpline" = type { %"class.std::__1::vector.156", [3 x [32 x i32]], [32 x i32] }
%"class.std::__1::vector.156" = type { %"class.std::__1::__vector_base.157" }
%"class.std::__1::__vector_base.157" = type { %"struct.std::__1::pair.158"*, %"struct.std::__1::pair.158"*, %"class.std::__1::__compressed_pair.159" }
%"struct.std::__1::pair.158" = type { i64, i64 }
%"class.std::__1::__compressed_pair.159" = type { %"struct.std::__1::__compressed_pair_elem.160" }
%"struct.std::__1::__compressed_pair_elem.160" = type { %"struct.std::__1::pair.158"* }
%"class.std::__1::__compressed_pair.164" = type { %"struct.std::__1::__compressed_pair_elem.165" }
%"struct.std::__1::__compressed_pair_elem.165" = type { %"class.jxl::QuantizedSpline"* }
%"class.std::__1::vector.169" = type { %"class.std::__1::__vector_base.170" }
%"class.std::__1::__vector_base.170" = type { %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"*, %"class.std::__1::__compressed_pair.171" }
%"struct.jxl::Spline::Point" = type { float, float }
%"class.std::__1::__compressed_pair.171" = type { %"struct.std::__1::__compressed_pair_elem.172" }
%"struct.std::__1::__compressed_pair_elem.172" = type { %"struct.jxl::Spline::Point"* }
%"class.jxl::Plane.99" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::BlockCtxMap" = type { [3 x %"class.std::__1::vector.118"], %"class.std::__1::vector", %"class.std::__1::vector.21", i64, i64 }
%"class.std::__1::vector.118" = type { %"class.std::__1::__vector_base.119" }
%"class.std::__1::__vector_base.119" = type { i32*, i32*, %"class.std::__1::__compressed_pair.120" }
%"class.std::__1::__compressed_pair.120" = type { %"struct.std::__1::__compressed_pair_elem.121" }
%"struct.std::__1::__compressed_pair_elem.121" = type { i32* }
%struct.anon.176 = type <{ %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"*, i8, [7 x i8] }>
%"class.std::__1::vector.178" = type { %"class.std::__1::__vector_base.179" }
%"class.std::__1::__vector_base.179" = type { %"class.std::__1::unique_ptr.180"*, %"class.std::__1::unique_ptr.180"*, %"class.std::__1::__compressed_pair.186" }
%"class.std::__1::unique_ptr.180" = type { %"class.std::__1::__compressed_pair.181" }
%"class.std::__1::__compressed_pair.181" = type { %"struct.std::__1::__compressed_pair_elem.182" }
%"struct.std::__1::__compressed_pair_elem.182" = type { %"class.jxl::ACImage"* }
%"class.jxl::ACImage" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.186" = type { %"struct.std::__1::__compressed_pair_elem.187" }
%"struct.std::__1::__compressed_pair_elem.187" = type { %"class.std::__1::unique_ptr.180"* }
%"class.std::__1::vector.191" = type { %"class.std::__1::__vector_base.192" }
%"class.std::__1::__vector_base.192" = type { %"class.std::__1::unique_ptr.193"*, %"class.std::__1::unique_ptr.193"*, %"class.std::__1::__compressed_pair.194" }
%"class.std::__1::unique_ptr.193" = type { %"class.std::__1::__compressed_pair.394" }
%"class.std::__1::__compressed_pair.394" = type { %"struct.std::__1::__compressed_pair_elem.369" }
%"struct.std::__1::__compressed_pair_elem.369" = type { %"struct.jxl::BitWriter"* }
%"class.std::__1::__compressed_pair.194" = type { %"struct.std::__1::__compressed_pair_elem.195" }
%"struct.std::__1::__compressed_pair_elem.195" = type { %"class.std::__1::unique_ptr.193"* }
%"class.jxl::ProgressiveSplitter" = type <{ %"struct.jxl::ProgressiveMode", %"class.jxl::Plane"*, float, [4 x i8] }>
%"struct.jxl::ProgressiveMode" = type { i64, [11 x %"struct.jxl::PassDefinition"] }
%"struct.jxl::PassDefinition" = type { i64, i64, i8, i64 }
%"class.std::__1::vector.199" = type { %"class.std::__1::__vector_base.200" }
%"class.std::__1::__vector_base.200" = type { %"struct.jxl::PassesEncoderState::PassData"*, %"struct.jxl::PassesEncoderState::PassData"*, %"class.std::__1::__compressed_pair.230" }
%"struct.jxl::PassesEncoderState::PassData" = type { %"class.std::__1::vector.201", %"class.std::__1::vector.21", %"struct.jxl::EntropyEncodingData" }
%"class.std::__1::vector.201" = type { %"class.std::__1::__vector_base.202" }
%"class.std::__1::__vector_base.202" = type { %"class.std::__1::vector.203"*, %"class.std::__1::vector.203"*, %"class.std::__1::__compressed_pair.210" }
%"class.std::__1::vector.203" = type { %"class.std::__1::__vector_base.204" }
%"class.std::__1::__vector_base.204" = type { %"struct.jxl::Token"*, %"struct.jxl::Token"*, %"class.std::__1::__compressed_pair.205" }
%"struct.jxl::Token" = type { i32, i32 }
%"class.std::__1::__compressed_pair.205" = type { %"struct.std::__1::__compressed_pair_elem.206" }
%"struct.std::__1::__compressed_pair_elem.206" = type { %"struct.jxl::Token"* }
%"class.std::__1::__compressed_pair.210" = type { %"struct.std::__1::__compressed_pair_elem.211" }
%"struct.std::__1::__compressed_pair_elem.211" = type { %"class.std::__1::vector.203"* }
%"struct.jxl::EntropyEncodingData" = type { %"class.std::__1::vector.215", i8, %"class.std::__1::vector.223", %"struct.jxl::LZ77Params" }
%"class.std::__1::vector.215" = type { %"class.std::__1::__vector_base.216" }
%"class.std::__1::__vector_base.216" = type { %"class.std::__1::vector.217"*, %"class.std::__1::vector.217"*, %"class.std::__1::__compressed_pair.218" }
%"class.std::__1::vector.217" = type { %"class.std::__1::__vector_base.381" }
%"class.std::__1::__vector_base.381" = type { %"struct.jxl::ANSEncSymbolInfo"*, %"struct.jxl::ANSEncSymbolInfo"*, %"class.std::__1::__compressed_pair.389" }
%"struct.jxl::ANSEncSymbolInfo" = type <{ i16, [6 x i8], %"class.std::__1::vector.382", i64, i8, i8, i16, [4 x i8] }>
%"class.std::__1::vector.382" = type { %"class.std::__1::__vector_base.383" }
%"class.std::__1::__vector_base.383" = type { i16*, i16*, %"class.std::__1::__compressed_pair.384" }
%"class.std::__1::__compressed_pair.384" = type { %"struct.std::__1::__compressed_pair_elem.385" }
%"struct.std::__1::__compressed_pair_elem.385" = type { i16* }
%"class.std::__1::__compressed_pair.389" = type { %"struct.std::__1::__compressed_pair_elem.390" }
%"struct.std::__1::__compressed_pair_elem.390" = type { %"struct.jxl::ANSEncSymbolInfo"* }
%"class.std::__1::__compressed_pair.218" = type { %"struct.std::__1::__compressed_pair_elem.219" }
%"struct.std::__1::__compressed_pair_elem.219" = type { %"class.std::__1::vector.217"* }
%"class.std::__1::vector.223" = type { %"class.std::__1::__vector_base.224" }
%"class.std::__1::__vector_base.224" = type { %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"*, %"class.std::__1::__compressed_pair.225" }
%"struct.jxl::HybridUintConfig" = type { i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair.225" = type { %"struct.std::__1::__compressed_pair_elem.226" }
%"struct.std::__1::__compressed_pair_elem.226" = type { %"struct.jxl::HybridUintConfig"* }
%"struct.jxl::LZ77Params" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::HybridUintConfig", i64 }
%"class.std::__1::__compressed_pair.230" = type { %"struct.std::__1::__compressed_pair_elem.231" }
%"struct.std::__1::__compressed_pair_elem.231" = type { %"struct.jxl::PassesEncoderState::PassData"* }
%"class.std::__1::unique_ptr.235" = type { %"class.std::__1::__compressed_pair.236" }
%"class.std::__1::__compressed_pair.236" = type { %"struct.std::__1::__compressed_pair_elem.237" }
%"struct.std::__1::__compressed_pair_elem.237" = type { %"class.jxl::EncoderHeuristics"* }
%"class.jxl::EncoderHeuristics" = type { i32 (...)** }
%"class.jxl::ThreadPool" = type { i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i8* }
%"struct.jxl::BitWriter" = type { i64, %"class.jxl::PaddedBytes", %"class.jxl::BitWriter::Allotment"* }
%"class.jxl::BitWriter::Allotment" = type { i64, i64, i64, i8, %"class.jxl::BitWriter::Allotment"* }
%"struct.jxl::AuxOut" = type { %"struct.std::__1::array.241", i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %"struct.std::__1::array.242", %"struct.std::__1::array.242", i32, %"class.std::__1::basic_string", i64, %"class.std::__1::function", %"class.std::__1::function.243" }
%"struct.std::__1::array.241" = type { [21 x %"struct.jxl::AuxOut::LayerTotals"] }
%"struct.jxl::AuxOut::LayerTotals" = type { i64, i64, i64, i64, double }
%"struct.std::__1::array.242" = type { [8 x i32] }
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"struct.std::__1::__function::__policy_invoker" = type { i1 (%"union.std::__1::__function::__policy_storage"*, i8*, %"class.jxl::Image3"*)* }
%"class.std::__1::function.243" = type { %"class.std::__1::__function::__policy_func.247" }
%"class.std::__1::__function::__policy_func.247" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker.248", %"struct.std::__1::__function::__policy"* }
%"struct.std::__1::__function::__policy_invoker.248" = type { i32 (%"union.std::__1::__function::__policy_storage"*, %"class.jxl::CodecInOut"*, %"class.std::__1::basic_string"*)* }
%"class.jxl::CodecInOut" = type { %"struct.jxl::SizeConstraints", %"class.jxl::DecoderHints", i32, float, i64, %"struct.jxl::Blobs", %"struct.jxl::CodecMetadata", %"class.jxl::ImageBundle", %"class.std::__1::vector.256", i8, i64 }
%"struct.jxl::SizeConstraints" = type { i32, i32, i64 }
%"class.jxl::DecoderHints" = type { %"class.std::__1::vector.249" }
%"class.std::__1::vector.249" = type { %"class.std::__1::__vector_base.250" }
%"class.std::__1::__vector_base.250" = type { %"struct.jxl::DecoderHints::KeyValue"*, %"struct.jxl::DecoderHints::KeyValue"*, %"class.std::__1::__compressed_pair.251" }
%"struct.jxl::DecoderHints::KeyValue" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.251" = type { %"struct.std::__1::__compressed_pair_elem.252" }
%"struct.std::__1::__compressed_pair_elem.252" = type { %"struct.jxl::DecoderHints::KeyValue"* }
%"struct.jxl::Blobs" = type { %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes" }
%"class.std::__1::vector.256" = type { %"class.std::__1::__vector_base.257" }
%"class.std::__1::__vector_base.257" = type { %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"*, %"class.std::__1::__compressed_pair.258" }
%"class.std::__1::__compressed_pair.258" = type { %"struct.std::__1::__compressed_pair_elem.259" }
%"struct.std::__1::__compressed_pair_elem.259" = type { %"class.jxl::ImageBundle"* }
%"class.jxl::ThreadPool::RunCallState.464" = type { %"class.std::__1::function.282"*, %class.anon.375* }
%"class.std::__1::function.282" = type { %"class.std::__1::__function::__policy_func.285" }
%"class.std::__1::__function::__policy_func.285" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker.286", %"struct.std::__1::__function::__policy"* }
%"struct.std::__1::__function::__policy_invoker.286" = type { i32 (%"union.std::__1::__function::__policy_storage"*, i64)* }
%class.anon.375 = type { %"struct.jxl::AuxOut"**, %"class.std::__1::vector.275"*, %class.anon.373*, %"class.std::__1::unique_ptr.263"*, %"class.std::__1::unique_ptr.295"*, %"class.jxl::LossyFrameEncoder"* }
%"class.std::__1::vector.275" = type { %"class.std::__1::__vector_base.276" }
%"class.std::__1::__vector_base.276" = type { %"struct.jxl::AuxOut"*, %"struct.jxl::AuxOut"*, %"class.std::__1::__compressed_pair.277" }
%"class.std::__1::__compressed_pair.277" = type { %"struct.std::__1::__compressed_pair_elem.278" }
%"struct.std::__1::__compressed_pair_elem.278" = type { %"struct.jxl::AuxOut"* }
%class.anon.373 = type { %"class.std::__1::vector.366"*, i8* }
%"class.std::__1::vector.366" = type { %"class.std::__1::__vector_base.367" }
%"class.std::__1::__vector_base.367" = type { %"struct.jxl::BitWriter"*, %"struct.jxl::BitWriter"*, %"class.std::__1::__compressed_pair.368" }
%"class.std::__1::__compressed_pair.368" = type { %"struct.std::__1::__compressed_pair_elem.369" }
%"class.std::__1::unique_ptr.263" = type { %"class.std::__1::__compressed_pair.264" }
%"class.std::__1::__compressed_pair.264" = type { %"struct.std::__1::__compressed_pair_elem.265" }
%"struct.std::__1::__compressed_pair_elem.265" = type { %"struct.jxl::FrameHeader"* }
%"class.std::__1::unique_ptr.295" = type { %"class.std::__1::__compressed_pair.296" }
%"class.std::__1::__compressed_pair.296" = type { %"struct.std::__1::__compressed_pair_elem.297" }
%"struct.std::__1::__compressed_pair_elem.297" = type { %"class.jxl::ModularFrameEncoder"* }
%"class.jxl::ModularFrameEncoder" = type { %"class.std::__1::vector.147", %"class.std::__1::vector.21", %"class.std::__1::vector.298", %"class.std::__1::vector.326", %"class.std::__1::vector.333", %"class.std::__1::vector.201", %"class.std::__1::vector.340", %"class.std::__1::vector.201", %"struct.jxl::EntropyEncodingData", %"class.std::__1::vector.21", %"struct.jxl::FrameDimensions", %"struct.jxl::CompressParams", float, float, %"class.std::__1::vector.147", %"class.std::__1::vector.347", %"class.std::__1::vector.356", %"class.std::__1::vector.147" }
%"class.std::__1::vector.298" = type { %"class.std::__1::__vector_base.299" }
%"class.std::__1::__vector_base.299" = type { %"class.jxl::Image"*, %"class.jxl::Image"*, %"class.std::__1::__compressed_pair.321" }
%"class.jxl::Image" = type <{ %"class.std::__1::vector.300", %"class.std::__1::vector.307", i64, i64, i32, i32, i64, i64, i64, i8, [7 x i8] }>
%"class.std::__1::vector.300" = type { %"class.std::__1::__vector_base.301" }
%"class.std::__1::__vector_base.301" = type { %"class.jxl::Channel"*, %"class.jxl::Channel"*, %"class.std::__1::__compressed_pair.302" }
%"class.jxl::Channel" = type { %"class.jxl::Plane.131", i64, i64, i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair.302" = type { %"struct.std::__1::__compressed_pair_elem.303" }
%"struct.std::__1::__compressed_pair_elem.303" = type { %"class.jxl::Channel"* }
%"class.std::__1::vector.307" = type { %"class.std::__1::__vector_base.308" }
%"class.std::__1::__vector_base.308" = type { %"class.jxl::Transform"*, %"class.jxl::Transform"*, %"class.std::__1::__compressed_pair.316" }
%"class.jxl::Transform" = type <{ %"class.jxl::Fields", i32, i32, i32, i32, i32, i32, %"class.std::__1::vector.309", i32, i32, i8, i8, [6 x i8] }>
%"class.std::__1::vector.309" = type { %"class.std::__1::__vector_base.310" }
%"class.std::__1::__vector_base.310" = type { %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"*, %"class.std::__1::__compressed_pair.311" }
%"struct.jxl::SqueezeParams" = type <{ %"class.jxl::Fields", i8, i8, [2 x i8], i32, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.311" = type { %"struct.std::__1::__compressed_pair_elem.312" }
%"struct.std::__1::__compressed_pair_elem.312" = type { %"struct.jxl::SqueezeParams"* }
%"class.std::__1::__compressed_pair.316" = type { %"struct.std::__1::__compressed_pair_elem.317" }
%"struct.std::__1::__compressed_pair_elem.317" = type { %"class.jxl::Transform"* }
%"class.std::__1::__compressed_pair.321" = type { %"struct.std::__1::__compressed_pair_elem.322" }
%"struct.std::__1::__compressed_pair_elem.322" = type { %"class.jxl::Image"* }
%"class.std::__1::vector.326" = type { %"class.std::__1::__vector_base.327" }
%"class.std::__1::__vector_base.327" = type { %"struct.jxl::ModularOptions"*, %"struct.jxl::ModularOptions"*, %"class.std::__1::__compressed_pair.328" }
%"class.std::__1::__compressed_pair.328" = type { %"struct.std::__1::__compressed_pair_elem.329" }
%"struct.std::__1::__compressed_pair_elem.329" = type { %"struct.jxl::ModularOptions"* }
%"class.std::__1::vector.333" = type { %"class.std::__1::__vector_base.334" }
%"class.std::__1::__vector_base.334" = type { %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"*, %"class.std::__1::__compressed_pair.335" }
%"struct.jxl::PropertyDecisionNode" = type <{ i32, i16, [2 x i8], i32, i32, i32, [4 x i8], i64, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.335" = type { %"struct.std::__1::__compressed_pair_elem.336" }
%"struct.std::__1::__compressed_pair_elem.336" = type { %"struct.jxl::PropertyDecisionNode"* }
%"class.std::__1::vector.340" = type { %"class.std::__1::__vector_base.341" }
%"class.std::__1::__vector_base.341" = type { %"struct.jxl::GroupHeader"*, %"struct.jxl::GroupHeader"*, %"class.std::__1::__compressed_pair.342" }
%"struct.jxl::GroupHeader" = type { %"class.jxl::Fields", i8, %"struct.jxl::weighted::Header", %"class.std::__1::vector.307" }
%"struct.jxl::weighted::Header" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32, i32, i32, [4 x i32] }
%"class.std::__1::__compressed_pair.342" = type { %"struct.std::__1::__compressed_pair_elem.343" }
%"struct.std::__1::__compressed_pair_elem.343" = type { %"struct.jxl::GroupHeader"* }
%"class.std::__1::vector.347" = type { %"class.std::__1::__vector_base.348" }
%"class.std::__1::__vector_base.348" = type { %"struct.jxl::ModularMultiplierInfo"*, %"struct.jxl::ModularMultiplierInfo"*, %"class.std::__1::__compressed_pair.351" }
%"struct.jxl::ModularMultiplierInfo" = type { %"struct.std::__1::array.349", i32 }
%"struct.std::__1::array.349" = type { [2 x %"struct.std::__1::array.350"] }
%"struct.std::__1::array.350" = type { [2 x i32] }
%"class.std::__1::__compressed_pair.351" = type { %"struct.std::__1::__compressed_pair_elem.352" }
%"struct.std::__1::__compressed_pair_elem.352" = type { %"struct.jxl::ModularMultiplierInfo"* }
%"class.std::__1::vector.356" = type { %"class.std::__1::__vector_base.357" }
%"class.std::__1::__vector_base.357" = type { %"class.std::__1::vector"*, %"class.std::__1::vector"*, %"class.std::__1::__compressed_pair.358" }
%"class.std::__1::__compressed_pair.358" = type { %"struct.std::__1::__compressed_pair_elem.359" }
%"struct.std::__1::__compressed_pair_elem.359" = type { %"class.std::__1::vector"* }
%"class.jxl::LossyFrameEncoder" = type { %"struct.jxl::PassesEncoderState"*, %"class.jxl::ThreadPool"*, %"struct.jxl::AuxOut"*, %"class.std::__1::vector.287" }
%"class.std::__1::vector.287" = type { %"class.std::__1::__vector_base.288" }
%"class.std::__1::__vector_base.288" = type { %"struct.jxl::EncCache"*, %"struct.jxl::EncCache"*, %"class.std::__1::__compressed_pair.290" }
%"struct.jxl::EncCache" = type { %"class.jxl::Image3.289" }
%"class.jxl::Image3.289" = type { [3 x %"class.jxl::Plane.131"] }
%"class.std::__1::__compressed_pair.290" = type { %"struct.std::__1::__compressed_pair_elem.291" }
%"struct.std::__1::__compressed_pair_elem.291" = type { %"struct.jxl::EncCache"* }
%"class.jxl::ThreadPool::RunCallState.465" = type { %"class.std::__1::function.282"*, %class.anon.377* }
%class.anon.377 = type { %"struct.jxl::AuxOut"**, %"class.std::__1::vector.275"*, i64*, %"class.std::__1::unique_ptr.263"*, %"class.jxl::LossyFrameEncoder"*, %class.anon.374*, %"struct.std::__1::atomic"*, %"class.std::__1::unique_ptr.295"* }
%class.anon.374 = type { %class.anon.373*, %"struct.jxl::FrameDimensions"* }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.376" }
%"struct.std::__1::__atomic_base.376" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.anon.380 = type { %class.anon.379* }
%class.anon.379 = type { %"struct.jxl::PassesEncoderState"**, i64*, i64* }
%"class.jxl::Rect" = type { i64, i64, i64, i64 }
%"struct.jxl::HistogramParams" = type <{ i32, i32, i32, i32, %"class.std::__1::vector.147", i64, i8, [7 x i8] }>
%"struct.jxl::ModularStreamId" = type { i32, i64, i64, i64 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::unique_ptr.402" = type { %"class.std::__1::__compressed_pair.403" }
%"class.std::__1::__compressed_pair.403" = type { %"struct.std::__1::__compressed_pair_elem.404" }
%"struct.std::__1::__compressed_pair_elem.404" = type { %"class.jxl::ACImageT"* }
%"class.jxl::ACImageT" = type { %"class.jxl::ACImage", %"class.jxl::Image3.289" }
%"struct.std::__1::array.408" = type { [3 x i32] }
%class.anon.409 = type { %"struct.jxl::jpeg::JPEGData"*, %"struct.std::__1::array.408"* }
%class.anon.410 = type { %"class.jxl::Plane.132"**, %"struct.jxl::FrameDimensions"*, %class.anon.409*, i64*, %"class.std::__1::vector.118"*, float*, float*, float* }
%"struct.jxl::ThreadPool::SkipInit" = type { i8 }
%class.anon.412 = type { %"class.jxl::ModularFrameEncoder"**, %"class.jxl::Image3"*, %"class.jxl::LossyFrameEncoder"* }
%class.anon.414 = type { %"class.jxl::LossyFrameEncoder"* }
%class.anon.415 = type { %"struct.jxl::PassesSharedState"*, %"class.jxl::LossyFrameEncoder"*, %"struct.jxl::FrameHeader"** }
%class.anon.442 = type { %"class.jxl::LossyFrameEncoder"* }
%class.anon.443 = type { %"struct.jxl::PassesSharedState"*, %"class.jxl::LossyFrameEncoder"*, %"struct.jxl::FrameHeader"** }
%"class.std::__1::vector.445" = type { %"class.std::__1::__vector_base.446" }
%"class.std::__1::__vector_base.446" = type { float*, float*, %"class.std::__1::__compressed_pair.447" }
%"class.std::__1::__compressed_pair.447" = type { %"struct.std::__1::__compressed_pair_elem.102" }
%class.anon.451 = type { %"struct.jxl::HistogramParams"*, %"struct.jxl::EntropyEncodingData"*, %"class.std::__1::vector.21"* }
%class.anon.453 = type { %"class.std::__1::vector.201"*, %class.anon.451*, i64*, %"class.std::__1::vector.445"* }
%class.anon.456 = type { %"class.std::__1::vector.201"*, %"struct.jxl::PassesEncoderState"**, i64*, %class.anon.451* }
%"class.jxl::Visitor" = type { i32 (...)** }
%"class.jxl::ThreadPool::RunCallState" = type { i32 (i64)*, %class.anon.410* }
%"class.jxl::ThreadPool::RunCallState.430" = type { i32 (i64)*, %class.anon.412* }
%"class.jxl::ThreadPool::RunCallState.437" = type { %class.anon.414*, %class.anon.415* }
%"struct.std::__1::__split_buffer.438" = type { %"struct.jxl::EncCache"*, %"struct.jxl::EncCache"*, %"struct.jxl::EncCache"*, %"class.std::__1::__compressed_pair.439" }
%"class.std::__1::__compressed_pair.439" = type { %"struct.std::__1::__compressed_pair_elem.291", %"struct.std::__1::__compressed_pair_elem.440" }
%"struct.std::__1::__compressed_pair_elem.440" = type { %"class.std::__1::allocator.293"* }
%"class.std::__1::allocator.293" = type { i8 }
%"class.jxl::ThreadPool::RunCallState.444" = type { %class.anon.442*, %class.anon.443* }
%"struct.std::__1::__split_buffer.460" = type { %"struct.jxl::AuxOut"*, %"struct.jxl::AuxOut"*, %"struct.jxl::AuxOut"*, %"class.std::__1::__compressed_pair.461" }
%"class.std::__1::__compressed_pair.461" = type { %"struct.std::__1::__compressed_pair_elem.278", %"struct.std::__1::__compressed_pair_elem.462" }
%"struct.std::__1::__compressed_pair_elem.462" = type { %"class.std::__1::allocator.280"* }
%"class.std::__1::allocator.280" = type { i8 }

$_ZNK3jxl11FrameHeader17ToFrameDimensionsEv = comdat any

$_ZN3jxl17LossyFrameEncoderC2ERKNS_14CompressParamsERKNS_11FrameHeaderEPNS_18PassesEncoderStateEPNS_10ThreadPoolEPNS_6AuxOutE = comdat any

$_ZN3jxl17LossyFrameEncoder26ComputeJPEGTranscodingDataERKNS_4jpeg8JPEGDataEPNS_19ModularFrameEncoderEPNS_11FrameHeaderE = comdat any

$_ZN3jxl17LossyFrameEncoder19ComputeEncodingDataEPKNS_11ImageBundleEPNS_6Image3IfEEPNS_10ThreadPoolEPNS_19ModularFrameEncoderEPNS_9BitWriterEPNS_11FrameHeaderE = comdat any

$_ZN3jxl9CopyImageIfEENS_5PlaneIT_EERKS3_ = comdat any

$_ZN3jxl17LossyFrameEncoder18EncodeGlobalACInfoEPNS_9BitWriterEPNS_19ModularFrameEncoderE = comdat any

$_ZN3jxl11ImageBundleD2Ev = comdat any

$_ZN3jxl22YCbCrChromaSubsamplingD0Ev = comdat any

$_ZNK3jxl22YCbCrChromaSubsampling4NameEv = comdat any

$_ZN3jxl22YCbCrChromaSubsampling11VisitFieldsEPNS_7VisitorE = comdat any

$_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEmRKj = comdat any

$_ZNSt3__16vectorIjNS_9allocatorIjEEE6assignIPjEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_ = comdat any

$_ZN3jxl18PassesEncoderState8PassDataD2Ev = comdat any

$_ZNSt3__16vectorIN3jxl13QuantEncodingENS_9allocatorIS2_EEEC2EmRKS2_ = comdat any

$_ZN3jxl13QuantEncodingaSERKS0_ = comdat any

$_ZN3jxl9RunOnPoolINS_10ThreadPool8SkipInitEZNS_17LossyFrameEncoder26ComputeJPEGTranscodingDataERKNS_4jpeg8JPEGDataEPNS_19ModularFrameEncoderEPNS_11FrameHeaderEEUliiE_EEbPS1_jjRKT_RKT0_PKc = comdat any

$_ZN3jxl9RunOnPoolINS_10ThreadPool8SkipInitEZNS_17LossyFrameEncoder26ComputeJPEGTranscodingDataERKNS_4jpeg8JPEGDataEPNS_19ModularFrameEncoderEPNS_11FrameHeaderEEUliiE0_EEbPS1_jjRKT_RKT0_PKc = comdat any

$_ZN3jxl17LossyFrameEncoder21ComputeAllCoeffOrdersERKNS_15FrameDimensionsE = comdat any

$_ZN3jxl9RunOnPoolIZNS_17LossyFrameEncoder26ComputeJPEGTranscodingDataERKNS_4jpeg8JPEGDataEPNS_19ModularFrameEncoderEPNS_11FrameHeaderEEUlmE_ZNS1_26ComputeJPEGTranscodingDataES5_S7_S9_EUliiE1_EEbPNS_10ThreadPoolEjjRKT_RKT0_PKc = comdat any

$_ZNSt3__16vectorINS_10unique_ptrIN3jxl7ACImageENS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE24__emplace_back_slow_pathIJNS1_INS2_8ACImageTIiEENS4_ISC_EEEEEEEvDpOT_ = comdat any

$_ZN3jxl8ACImageTIiEC2Emm = comdat any

$_ZN3jxl8ACImageTIiED2Ev = comdat any

$_ZN3jxl8ACImageTIiED0Ev = comdat any

$_ZNK3jxl8ACImageTIiE4TypeEv = comdat any

$_ZN3jxl8ACImageTIiE8PlaneRowEmmm = comdat any

$_ZNK3jxl8ACImageTIiE8PlaneRowEmmm = comdat any

$_ZNK3jxl8ACImageTIiE12PixelsPerRowEv = comdat any

$_ZN3jxl8ACImageTIiE8ZeroFillEv = comdat any

$_ZN3jxl8ACImageTIiE13ZeroFillPlaneEm = comdat any

$_ZNK3jxl8ACImageTIiE7IsEmptyEv = comdat any

$_ZNSt3__16vectorIiNS_9allocatorIiEEE6assignIPiEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIiNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_ = comdat any

$_ZN3jxl10ThreadPool14ReturnTrueInitEm = comdat any

$_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_17LossyFrameEncoder26ComputeJPEGTranscodingDataERKNS_4jpeg8JPEGDataEPNS_19ModularFrameEncoderEPNS_11FrameHeaderEEUliiE_E12CallInitFuncEPvm = comdat any

$_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_17LossyFrameEncoder26ComputeJPEGTranscodingDataERKNS_4jpeg8JPEGDataEPNS_19ModularFrameEncoderEPNS_11FrameHeaderEEUliiE_E12CallDataFuncEPvjm = comdat any

$_ZZN3jxl17LossyFrameEncoder26ComputeJPEGTranscodingDataERKNS_4jpeg8JPEGDataEPNS_19ModularFrameEncoderEPNS_11FrameHeaderEENKUliiE_clEii = comdat any

$_ZNSt3__16vectorImNS_9allocatorImEEE8__appendEm = comdat any

$_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEmRKh = comdat any

$_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm = comdat any

$_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_17LossyFrameEncoder26ComputeJPEGTranscodingDataERKNS_4jpeg8JPEGDataEPNS_19ModularFrameEncoderEPNS_11FrameHeaderEEUliiE0_E12CallInitFuncEPvm = comdat any

$_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_17LossyFrameEncoder26ComputeJPEGTranscodingDataERKNS_4jpeg8JPEGDataEPNS_19ModularFrameEncoderEPNS_11FrameHeaderEEUliiE0_E12CallDataFuncEPvjm = comdat any

$_ZNSt3__16vectorIN3jxl18PassesEncoderState8PassDataENS_9allocatorIS3_EEE8__appendEm = comdat any

$_ZNSt3__16vectorINS0_IN3jxl5TokenENS_9allocatorIS2_EEEENS3_IS5_EEE8__appendEm = comdat any

$_ZN3jxl10ThreadPool12RunCallStateIZNS_17LossyFrameEncoder26ComputeJPEGTranscodingDataERKNS_4jpeg8JPEGDataEPNS_19ModularFrameEncoderEPNS_11FrameHeaderEEUlmE_ZNS2_26ComputeJPEGTranscodingDataES6_S8_SA_EUliiE1_E12CallInitFuncEPvm = comdat any

$_ZN3jxl10ThreadPool12RunCallStateIZNS_17LossyFrameEncoder26ComputeJPEGTranscodingDataERKNS_4jpeg8JPEGDataEPNS_19ModularFrameEncoderEPNS_11FrameHeaderEEUlmE_ZNS2_26ComputeJPEGTranscodingDataES6_S8_SA_EUliiE1_E12CallDataFuncEPvjm = comdat any

$_ZNSt3__16vectorIN3jxl8EncCacheENS_9allocatorIS2_EEE6resizeEm = comdat any

$_ZNSt3__16vectorIN3jxl8EncCacheENS_9allocatorIS2_EEE8__appendEm = comdat any

$_ZNSt3__16vectorIN3jxl8EncCacheENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE = comdat any

$_ZZN3jxl17LossyFrameEncoder26ComputeJPEGTranscodingDataERKNS_4jpeg8JPEGDataEPNS_19ModularFrameEncoderEPNS_11FrameHeaderEENKUliiE1_clEii = comdat any

$_ZNSt3__16vectorIN3jxl12BlendingInfoENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_ = comdat any

$_ZN3jxl9RunOnPoolIZNS_17LossyFrameEncoder19ComputeEncodingDataEPKNS_11ImageBundleEPNS_6Image3IfEEPNS_10ThreadPoolEPNS_19ModularFrameEncoderEPNS_9BitWriterEPNS_11FrameHeaderEEUlmE_ZNS1_19ComputeEncodingDataES4_S7_S9_SB_SD_SF_EUliiE_EEbS9_jjRKT_RKT0_PKc = comdat any

$_ZN3jxl10ThreadPool12RunCallStateIZNS_17LossyFrameEncoder19ComputeEncodingDataEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_19ModularFrameEncoderEPNS_9BitWriterEPNS_11FrameHeaderEEUlmE_ZNS2_19ComputeEncodingDataES5_S8_S9_SB_SD_SF_EUliiE_E12CallInitFuncEPvm = comdat any

$_ZN3jxl10ThreadPool12RunCallStateIZNS_17LossyFrameEncoder19ComputeEncodingDataEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_19ModularFrameEncoderEPNS_9BitWriterEPNS_11FrameHeaderEEUlmE_ZNS2_19ComputeEncodingDataES5_S8_S9_SB_SD_SF_EUliiE_E12CallDataFuncEPvjm = comdat any

$_ZZN3jxl17LossyFrameEncoder19ComputeEncodingDataEPKNS_11ImageBundleEPNS_6Image3IfEEPNS_10ThreadPoolEPNS_19ModularFrameEncoderEPNS_9BitWriterEPNS_11FrameHeaderEENKUliiE_clEii = comdat any

$_ZNSt3__16vectorINS0_IN3jxl5TokenENS_9allocatorIS2_EEEENS3_IS5_EEEC2ERKS7_ = comdat any

$_ZN3jxl6FieldsD2Ev = comdat any

$_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJS3_EEEvDpOT_ = comdat any

$_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm = comdat any

$_ZNSt3__125__throw_bad_function_callEv = comdat any

$_ZN3jxl6AuxOut10AssimilateERKS0_ = comdat any

$_ZNSt3__16vectorIN3jxl6AuxOutENS_9allocatorIS2_EEE8__appendEm = comdat any

$_ZNSt3__16vectorIN3jxl6AuxOutENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE = comdat any

$_ZNSt3__110__function16__policy_invokerIFbPKcRKN3jxl6Image3IfEEEE12__call_emptyEPKNS0_16__policy_storageES3_S8_ = comdat any

$_ZNSt3__110__function16__policy_invokerIFN3jxl6StatusERKNS2_10CodecInOutERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEE12__call_emptyEPKNS0_16__policy_storageES6_SE_ = comdat any

$_ZN3jxl19ModularFrameEncoderD2Ev = comdat any

$_ZN3jxl11CopyImageToIfEEvRKNS_4RectERKNS_6Image3IT_EES3_PS6_ = comdat any

$_ZTVN3jxl22YCbCrChromaSubsamplingE = comdat any

$_ZTVN3jxl8ACImageTIiEE = comdat any

$_ZZNSt3__110__function8__policy14__create_emptyEvE9__policy_ = comdat any

@__const._ZN3jxl11EncodeFrameERKNS_14CompressParamsERKNS_9FrameInfoEPKNS_13CodecMetadataERKNS_11ImageBundleEPNS_18PassesEncoderStateEPNS_10ThreadPoolEPNS_9BitWriterEPNS_6AuxOutE.cparams = private unnamed_addr constant { float, [4 x i8], i64, float, float, float, i8, [3 x i8], [3 x float], i32, i64, i32, i32, i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", i8, [7 x i8], i64, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, [1 x i8], i32, i8, [3 x i8], i64, float, [4 x i8], %"class.jxl::Plane"*, i8*, i8*, i8, i8, [2 x i8], %"struct.jxl::ButteraugliParams", i8, [3 x i8], %"struct.jxl::ModularOptions", i32, %"struct.std::__1::pair", i32, float, float, i32, i32, i8, i8, [6 x i8], i64, i64 } { float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA", i64 -6148914691236517206, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, i8 -86, [3 x i8] c"\AA\AA\AA", [3 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], i32 -1431655766, i64 -6148914691236517206, i32 -1431655766, i32 -1431655766, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"struct.jxl::YCbCrChromaSubsampling" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, [3 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766], i8 -86, i8 -86, [2 x i8] c"\AA\AA" }>, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", i64 -6148914691236517206, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i8 -86, i8 -86, i8 -86, [1 x i8] c"\AA", i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA", i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA", %"class.jxl::Plane"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Plane"*), i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*), i8 -86, i8 -86, [2 x i8] c"\AA\AA", %"struct.jxl::ButteraugliParams" <{ float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, i8 -86, [3 x i8] c"\AA\AA\AA" }>, i8 -86, [3 x i8] c"\AA\AA\AA", %"struct.jxl::ModularOptions" <{ i64 -6148914691236517206, float 0xFFFFFFFFE0000000, i32 -1431655766, %"class.std::__1::vector" { %"class.std::__1::__vector_base" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.1" { %"struct.std::__1::__compressed_pair_elem.2" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA", i64 -6148914691236517206, i32 -1431655766, i32 -1431655766, float 0xFFFFFFFFE0000000, i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA" }>, i32 -1431655766, %"struct.std::__1::pair" { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, i32 -1431655766, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, i32 -1431655766, i32 -1431655766, i8 -86, i8 -86, [6 x i8] c"\AA\AA\AA\AA\AA\AA", i64 -6148914691236517206, i64 -6148914691236517206 }, align 8
@.str.1 = private unnamed_addr constant [50 x i8] c"../../third_party/libjxl/src/lib/jxl/enc_frame.cc\00", align 1
@.str.5 = private unnamed_addr constant [23 x i8] c"%s:%d: JXL_ASSERT: %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [77 x i8] c"metadata->m.xyb_encoded == (cparams.color_transform == ColorTransform::kXYB)\00", align 1
@.str.12 = private unnamed_addr constant [29 x i8] c"enc_frame:OpsinDynamicsImage\00", align 1
@.str.22 = private unnamed_addr constant [14 x i8] c"EncodeDCGroup\00", align 1
@.str.24 = private unnamed_addr constant [24 x i8] c"EncodeGroupCoefficients\00", align 1
@_ZTVN3jxl22YCbCrChromaSubsamplingE = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.jxl::Fields"*)* @_ZN3jxl6FieldsD2Ev to i8*), i8* bitcast (void (%"struct.jxl::YCbCrChromaSubsampling"*)* @_ZN3jxl22YCbCrChromaSubsamplingD0Ev to i8*), i8* bitcast (i8* (%"struct.jxl::YCbCrChromaSubsampling"*)* @_ZNK3jxl22YCbCrChromaSubsampling4NameEv to i8*), i8* bitcast (i32 (%"struct.jxl::YCbCrChromaSubsampling"*, %"class.jxl::Visitor"*)* @_ZN3jxl22YCbCrChromaSubsampling11VisitFieldsEPNS_7VisitorE to i8*)] }, comdat, align 8
@.str.27 = private unnamed_addr constant [23 x i8] c"YCbCrChromaSubsampling\00", align 1
@_ZN3jxl22YCbCrChromaSubsampling7kHShiftE = external local_unnamed_addr constant [4 x i8], align 1
@_ZN3jxl22YCbCrChromaSubsampling7kVShiftE = external local_unnamed_addr constant [4 x i8], align 1
@.str.35 = private unnamed_addr constant [57 x i8] c"../../third_party/libjxl/src/lib/jxl/progressive_split.h\00", align 1
@.str.36 = private unnamed_addr constant [24 x i8] c"passes->num_passes != 0\00", align 1
@_ZZN3jxl12_GLOBAL__N_120LoopFilterFromParamsERKNS_14CompressParamsEPNS_11FrameHeaderEE11kThresholds = internal unnamed_addr constant [3 x float] [float 0x3FE6666660000000, float 1.500000e+00, float 4.000000e+00], align 4
@.str.37 = private unnamed_addr constant [22 x i8] c"%s:%d: JXL_CHECK: %s\0A\00", align 1
@.str.38 = private unnamed_addr constant [69 x i8] c"InitializePassesSharedState(frame_header, &enc_state_->shared, true)\00", align 1
@.str.39 = private unnamed_addr constant [16 x i8] c"FindCorrelation\00", align 1
@.ref.tmp.40 = private constant [3 x i32] [i32 1, i32 0, i32 2], align 4
@.str.41 = private unnamed_addr constant [18 x i8] c"Compute DC coeffs\00", align 1
@.str.42 = private unnamed_addr constant [31 x i8] c"enc_state_->passes.size() == 1\00", align 1
@.str.43 = private unnamed_addr constant [14 x i8] c"TokenizeGroup\00", align 1
@_ZTVN3jxl8ACImageTIiEE = linkonce_odr hidden unnamed_addr constant { [11 x i8*] } { [11 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.jxl::ACImageT"*)* @_ZN3jxl8ACImageTIiED2Ev to i8*), i8* bitcast (void (%"class.jxl::ACImageT"*)* @_ZN3jxl8ACImageTIiED0Ev to i8*), i8* bitcast (i32 (%"class.jxl::ACImageT"*)* @_ZNK3jxl8ACImageTIiE4TypeEv to i8*), i8* bitcast (i32* (%"class.jxl::ACImageT"*, i64, i64, i64)* @_ZN3jxl8ACImageTIiE8PlaneRowEmmm to i8*), i8* bitcast (i32* (%"class.jxl::ACImageT"*, i64, i64, i64)* @_ZNK3jxl8ACImageTIiE8PlaneRowEmmm to i8*), i8* bitcast (i64 (%"class.jxl::ACImageT"*)* @_ZNK3jxl8ACImageTIiE12PixelsPerRowEv to i8*), i8* bitcast (void (%"class.jxl::ACImageT"*)* @_ZN3jxl8ACImageTIiE8ZeroFillEv to i8*), i8* bitcast (void (%"class.jxl::ACImageT"*, i64)* @_ZN3jxl8ACImageTIiE13ZeroFillPlaneEm to i8*), i8* bitcast (i1 (%"class.jxl::ACImageT"*)* @_ZNK3jxl8ACImageTIiE7IsEmptyEv to i8*)] }, comdat, align 8
@.str.46 = private unnamed_addr constant [52 x i8] c"../../third_party/libjxl/src/lib/jxl/frame_header.h\00", align 1
@.str.47 = private unnamed_addr constant [27 x i8] c"ct != ColorTransform::kXYB\00", align 1
@__const._ZN3jxl13QuantEncoding3RAWERKNSt3__16vectorIiNS1_9allocatorIiEEEEi.encoding = private unnamed_addr constant %"class.jxl::QuantEncoding" { %"struct.jxl::QuantEncodingInternal.base" <{ i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"struct.jxl::DctQuantWeightParams" <{ i64 -6148914691236517206, %"struct.std::__1::array.106" { [3 x %"struct.std::__1::array.107"] [%"struct.std::__1::array.107" { [17 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000] }, %"struct.std::__1::array.107" { [17 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000] }, %"struct.std::__1::array.107" { [17 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000] }] }, [4 x i8] c"\AA\AA\AA\AA" }>, %union.anon.108 { %"struct.std::__1::array.115" { [3 x %"struct.std::__1::array.116"] [%"struct.std::__1::array.116" { [9 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000] }, %"struct.std::__1::array.116" { [9 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000] }, %"struct.std::__1::array.116" { [9 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000] }] }, [4 x i8] c"\AA\AA\AA\AA" }, %"struct.jxl::DctQuantWeightParams" <{ i64 -6148914691236517206, %"struct.std::__1::array.106" { [3 x %"struct.std::__1::array.107"] [%"struct.std::__1::array.107" { [17 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000] }, %"struct.std::__1::array.107" { [17 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000] }, %"struct.std::__1::array.107" { [17 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000] }] }, [4 x i8] c"\AA\AA\AA\AA" }>, %union.anon.125 { i8 -86 } }>, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA" }, align 8
@.str.49 = private unnamed_addr constant [58 x i8] c"../../third_party/libjxl/src/lib/jxl/base/data_parallel.h\00", align 1
@.str.50 = private unnamed_addr constant [13 x i8] c"begin <= end\00", align 1
@_ZN3jxl22YCbCrChromaSubsampling7kHShiftE.const = private unnamed_addr constant [4 x i8] c"\00\01\01\00", align 1
@_ZN3jxl22YCbCrChromaSubsampling7kVShiftE.const = private unnamed_addr constant [4 x i8] c"\00\01\00\01", align 1
@_ZTVN3jxl10LZ77ParamsE = external unnamed_addr constant { [6 x i8*] }, align 8
@.str.52 = private unnamed_addr constant [52 x i8] c"enc_state_->coeffs[idx_pass]->Type() == ACType::k32\00", align 1
@_ZTVN3jxl12BlendingInfoE = external unnamed_addr constant { [6 x i8*] }, align 8
@.str.53 = private unnamed_addr constant [71 x i8] c"(opsin->xsize() % kBlockDim) == 0 && (opsin->ysize() % kBlockDim) == 0\00", align 1
@.str.58 = private unnamed_addr constant [63 x i8] c"U32Coder::Write(kOrderEnc, enc_state_->used_orders[i], writer)\00", align 1
@.str.59 = private unnamed_addr constant [54 x i8] c"../../third_party/libjxl/src/lib/jxl/enc_bit_writer.h\00", align 1
@.str.60 = private unnamed_addr constant [34 x i8] c"bits_written_ % kBitsPerByte == 0\00", align 1
@_ZTVN3jxl13ColorEncodingE = external unnamed_addr constant { [6 x i8*] }, align 8
@.str.61 = private unnamed_addr constant [49 x i8] c"../../third_party/libjxl/src/lib/jxl/image_ops.h\00", align 1
@.str.62 = private unnamed_addr constant [20 x i8] c"SameSize(from, *to)\00", align 1
@_ZZNSt3__110__function8__policy14__create_emptyEvE9__policy_ = linkonce_odr hidden constant %"struct.std::__1::__function::__policy" { i8* (i8*)* null, void (i8*)* null, i8 1, %"class.std::type_info"* null }, comdat, align 8
@"_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN3jxl11EncodeFrameERKNS4_14CompressParamsERKNS4_9FrameInfoEPKNS4_13CodecMetadataERKNS4_11ImageBundleEPNS4_18PassesEncoderStateEPNS4_10ThreadPoolEPNS4_9BitWriterEPNS4_6AuxOutEE3$_0FNS4_6StatusEmEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_" = internal constant %"struct.std::__1::__function::__policy" zeroinitializer, align 8
@.str.63 = private unnamed_addr constant [45 x i8] c"../../third_party/libjxl/src/lib/jxl/image.h\00", align 1
@.str.64 = private unnamed_addr constant [21 x i8] c"xsize <= orig_xsize_\00", align 1
@.str.65 = private unnamed_addr constant [21 x i8] c"ysize <= orig_ysize_\00", align 1
@.str.66 = private unnamed_addr constant [29 x i8] c"SameSize(rect_from, rect_to)\00", align 1
@.str.67 = private unnamed_addr constant [107 x i8] c"modular_frame_encoder->EncodeStream( output, my_aux_out, kLayerDC, ModularStreamId::VarDCTDC(group_index))\00", align 1
@.str.68 = private unnamed_addr constant [120 x i8] c"modular_frame_encoder->EncodeStream( output, my_aux_out, kLayerModularDcGroup, ModularStreamId::ModularDC(group_index))\00", align 1
@.str.69 = private unnamed_addr constant [120 x i8] c"modular_frame_encoder->EncodeStream( output, my_aux_out, kLayerControlFields, ModularStreamId::ACMetadata(group_index))\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl11EncodeFrameERKNS_14CompressParamsERKNS_9FrameInfoEPKNS_13CodecMetadataERKNS_11ImageBundleEPNS_18PassesEncoderStateEPNS_10ThreadPoolEPNS_9BitWriterEPNS_6AuxOutE(%"struct.jxl::CompressParams"* nocapture readonly dereferenceable(360), %"struct.jxl::FrameInfo"* nocapture readonly dereferenceable(32), %"struct.jxl::CodecMetadata"*, %"class.jxl::ImageBundle"* dereferenceable(368), %"struct.jxl::PassesEncoderState"*, %"class.jxl::ThreadPool"*, %"struct.jxl::BitWriter"*, %"struct.jxl::AuxOut"*) local_unnamed_addr #0 {
  %9 = alloca %"class.jxl::ThreadPool::RunCallState.464", align 8
  %10 = alloca %"class.jxl::ThreadPool::RunCallState.464", align 8
  %11 = alloca double, align 8
  %12 = alloca %"class.jxl::ThreadPool", align 8
  %13 = alloca %"class.jxl::ThreadPool::RunCallState.465", align 8
  %14 = alloca %"class.jxl::ThreadPool::RunCallState.465", align 8
  %15 = alloca double, align 8
  %16 = alloca %"class.jxl::ThreadPool", align 8
  %17 = alloca %class.anon.380, align 8
  %18 = alloca %"class.jxl::Rect", align 8
  %19 = alloca %"class.jxl::Rect", align 8
  %20 = alloca i32, align 4
  %21 = alloca %"struct.jxl::PassesEncoderState"*, align 8
  %22 = alloca %"struct.jxl::AuxOut"*, align 8
  %23 = alloca %"struct.jxl::CompressParams", align 8
  %24 = alloca float, align 4
  %25 = alloca float, align 4
  %26 = alloca %"class.std::__1::unique_ptr.263", align 8
  %27 = alloca %"struct.jxl::FrameDimensions", align 8
  %28 = alloca %"class.jxl::Image3", align 8
  %29 = alloca %"class.jxl::ImageBundle", align 8
  %30 = alloca %"class.std::__1::vector.275", align 8
  %31 = alloca %"class.std::__1::function.282", align 8
  %32 = alloca %"class.jxl::LossyFrameEncoder", align 8
  %33 = alloca %"class.std::__1::unique_ptr.295", align 8
  %34 = alloca %"class.std::__1::vector.85", align 8
  %35 = alloca %"class.jxl::Image3", align 8
  %36 = alloca %"class.jxl::Plane", align 8
  %37 = alloca i64, align 8
  %38 = alloca %"class.std::__1::vector.366", align 16
  %39 = alloca i8, align 1
  %40 = alloca %class.anon.373, align 8
  %41 = alloca %class.anon.374, align 8
  %42 = alloca %"struct.jxl::HistogramParams", align 16
  %43 = alloca %"struct.jxl::ModularStreamId", align 8
  %44 = alloca %class.anon.375, align 8
  %45 = alloca %"struct.std::__1::atomic", align 4
  %46 = alloca %class.anon.377, align 8
  %47 = alloca %"class.std::__1::vector", align 8
  %48 = alloca %"class.std::__1::vector", align 8
  %49 = alloca i64, align 8
  %50 = alloca i64, align 8
  %51 = alloca %class.anon.379, align 8
  %52 = alloca %"class.std::__1::vector", align 8
  %53 = alloca %"class.std::__1::vector.366", align 16
  store %"struct.jxl::PassesEncoderState"* %4, %"struct.jxl::PassesEncoderState"** %21, align 8
  store %"struct.jxl::AuxOut"* %7, %"struct.jxl::AuxOut"** %22, align 8
  tail call void @_ZNK3jxl11ImageBundle14VerifyMetadataEv(%"class.jxl::ImageBundle"* %3) #8
  %54 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %4, i64 0, i32 4, i32 0, i32 0
  %55 = load %"class.std::__1::unique_ptr.193"*, %"class.std::__1::unique_ptr.193"** %54, align 8
  %56 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %4, i64 0, i32 4, i32 0, i32 1
  %57 = load %"class.std::__1::unique_ptr.193"*, %"class.std::__1::unique_ptr.193"** %56, align 8
  %58 = icmp eq %"class.std::__1::unique_ptr.193"* %57, %55
  br i1 %58, label %74, label %59

59:                                               ; preds = %8, %72
  %60 = phi %"class.std::__1::unique_ptr.193"* [ %61, %72 ], [ %57, %8 ]
  %61 = getelementptr inbounds %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.193"* %60, i64 -1
  %62 = getelementptr inbounds %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.193"* %61, i64 0, i32 0, i32 0, i32 0
  %63 = load %"struct.jxl::BitWriter"*, %"struct.jxl::BitWriter"** %62, align 8
  store %"struct.jxl::BitWriter"* null, %"struct.jxl::BitWriter"** %62, align 8
  %64 = icmp eq %"struct.jxl::BitWriter"* %63, null
  br i1 %64, label %72, label %65

65:                                               ; preds = %59
  %66 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %63, i64 0, i32 1, i32 2, i32 0, i32 0, i32 0
  %67 = load i8*, i8** %66, align 8
  store i8* null, i8** %66, align 8
  %68 = icmp eq i8* %67, null
  br i1 %68, label %70, label %69

69:                                               ; preds = %65
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %67) #8
  br label %70

70:                                               ; preds = %69, %65
  %71 = bitcast %"struct.jxl::BitWriter"* %63 to i8*
  tail call void @_ZdlPv(i8* %71) #13
  br label %72

72:                                               ; preds = %70, %59
  %73 = icmp eq %"class.std::__1::unique_ptr.193"* %61, %55
  br i1 %73, label %74, label %59

74:                                               ; preds = %72, %8
  store %"class.std::__1::unique_ptr.193"* %55, %"class.std::__1::unique_ptr.193"** %56, align 8
  %75 = bitcast %"struct.jxl::CompressParams"* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 360, i8* nonnull %75) #8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %75, i8* align 8 bitcast ({ float, [4 x i8], i64, float, float, float, i8, [3 x i8], [3 x float], i32, i64, i32, i32, i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", i8, [7 x i8], i64, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, [1 x i8], i32, i8, [3 x i8], i64, float, [4 x i8], %"class.jxl::Plane"*, i8*, i8*, i8, i8, [2 x i8], %"struct.jxl::ButteraugliParams", i8, [3 x i8], %"struct.jxl::ModularOptions", i32, %"struct.std::__1::pair", i32, float, float, i32, i32, i8, i8, [6 x i8], i64, i64 }* @__const._ZN3jxl11EncodeFrameERKNS_14CompressParamsERKNS_9FrameInfoEPKNS_13CodecMetadataERKNS_11ImageBundleEPNS_18PassesEncoderStateEPNS_10ThreadPoolEPNS_9BitWriterEPNS_6AuxOutE.cparams to i8*), i64 360, i1 false)
  %76 = bitcast %"struct.jxl::CompressParams"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %75, i8* align 8 %76, i64 68, i1 false) #8
  %77 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %23, i64 0, i32 13, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl22YCbCrChromaSubsamplingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %77, align 8
  %78 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %23, i64 0, i32 13, i32 1
  %79 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %0, i64 0, i32 13, i32 1
  %80 = bitcast [3 x i32]* %78 to i8*
  %81 = bitcast [3 x i32]* %79 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %80, i8* align 8 %81, i64 14, i1 false) #8
  %82 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %23, i64 0, i32 14
  %83 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %0, i64 0, i32 14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %82, i8* align 8 %83, i64 117, i1 false) #8
  %84 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %23, i64 0, i32 39
  %85 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %0, i64 0, i32 39
  %86 = bitcast %"struct.jxl::ModularOptions"* %84 to i8*
  %87 = bitcast %"struct.jxl::ModularOptions"* %85 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %86, i8* align 8 %87, i64 16, i1 false) #8
  %88 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %23, i64 0, i32 39, i32 3
  %89 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %0, i64 0, i32 39, i32 3
  %90 = bitcast %"class.std::__1::vector"* %88 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %90, i8 0, i64 24, i1 false) #8
  %91 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %0, i64 0, i32 39, i32 3, i32 0, i32 1
  %92 = bitcast i32** %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = bitcast %"class.std::__1::vector"* %89 to i64*
  %95 = load i64, i64* %94, align 8
  %96 = sub i64 %93, %95
  %97 = ashr exact i64 %96, 2
  %98 = icmp eq i64 %96, 0
  br i1 %98, label %121, label %99

99:                                               ; preds = %74
  %100 = icmp ugt i64 %97, 4611686018427387903
  br i1 %100, label %101, label %103

101:                                              ; preds = %99
  %102 = bitcast %"class.std::__1::vector"* %88 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %102) #14
  unreachable

103:                                              ; preds = %99
  %104 = tail call i8* @_Znwm(i64 %96) #13
  %105 = bitcast i8* %104 to i32*
  %106 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %23, i64 0, i32 39, i32 3, i32 0, i32 1
  %107 = bitcast i32** %106 to i8**
  store i8* %104, i8** %107, align 8
  %108 = bitcast %"class.std::__1::vector"* %88 to i8**
  store i8* %104, i8** %108, align 8
  %109 = getelementptr inbounds i32, i32* %105, i64 %97
  %110 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %23, i64 0, i32 39, i32 3, i32 0, i32 2, i32 0, i32 0
  store i32* %109, i32** %110, align 8
  %111 = bitcast i32** %106 to i64*
  %112 = ptrtoint i8* %104 to i64
  %113 = icmp sgt i64 %96, 0
  br i1 %113, label %114, label %119

114:                                              ; preds = %103
  %115 = lshr exact i64 %96, 2
  %116 = inttoptr i64 %95 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %104, i8* align 4 %116, i64 %96, i1 false) #8
  %117 = getelementptr inbounds i32, i32* %105, i64 %115
  %118 = ptrtoint i32* %117 to i64
  br label %119

119:                                              ; preds = %114, %103
  %120 = phi i64 [ %118, %114 ], [ %112, %103 ]
  store i64 %120, i64* %111, align 8
  br label %121

121:                                              ; preds = %74, %119
  %122 = phi i8* [ null, %74 ], [ %104, %119 ]
  %123 = phi i32* [ null, %74 ], [ %105, %119 ]
  %124 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %23, i64 0, i32 39, i32 4
  %125 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %0, i64 0, i32 39, i32 4
  %126 = bitcast float* %124 to i8*
  %127 = bitcast float* %125 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %126, i8* align 8 %127, i64 41, i1 false) #8
  %128 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %23, i64 0, i32 40
  %129 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %0, i64 0, i32 40
  %130 = bitcast i32* %128 to i8*
  %131 = bitcast i32* %129 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %130, i8* align 8 %131, i64 56, i1 false) #8
  %132 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %23, i64 0, i32 26
  %133 = load i32, i32* %132, align 8
  %134 = icmp slt i32 %133, 0
  br i1 %134, label %135, label %142

135:                                              ; preds = %121
  %136 = icmp eq i32 %133, -1
  br i1 %136, label %137, label %2268

137:                                              ; preds = %135
  store i32 0, i32* %132, align 8
  %138 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %23, i64 0, i32 0
  %139 = load float, float* %138, align 8
  %140 = fcmp ult float %139, 4.500000e+00
  br i1 %140, label %142, label %141

141:                                              ; preds = %137
  store i32 1, i32* %132, align 8
  br label %142

142:                                              ; preds = %137, %141, %121
  %143 = phi i32 [ 0, %137 ], [ 1, %141 ], [ %133, %121 ]
  %144 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %23, i64 0, i32 50
  %145 = load i64, i64* %144, align 8
  %146 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %23, i64 0, i32 49
  %147 = load i64, i64* %146, align 8
  %148 = icmp ult i64 %145, %147
  br i1 %148, label %149, label %150

149:                                              ; preds = %142
  store i64 %147, i64* %144, align 8
  br label %150

150:                                              ; preds = %149, %142
  %151 = phi i64 [ %147, %149 ], [ %145, %142 ]
  %152 = getelementptr inbounds %"struct.jxl::FrameInfo", %"struct.jxl::FrameInfo"* %1, i64 0, i32 3
  %153 = load i64, i64* %152, align 8
  %154 = sext i32 %143 to i64
  %155 = add i64 %153, %154
  %156 = icmp ugt i64 %155, 4
  br i1 %156, label %2268, label %157

157:                                              ; preds = %150
  %158 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %23, i64 0, i32 0
  %159 = load float, float* %158, align 8
  %160 = fcmp une float %159, 0.000000e+00
  %161 = fcmp olt float %159, 0x3F847AE140000000
  %162 = and i1 %160, %161
  br i1 %162, label %2268, label %163

163:                                              ; preds = %157
  %164 = fcmp ogt float %159, 0x3FECCCCCC0000000
  %165 = load i8, i8* %82, align 8
  %166 = icmp eq i8 %165, 0
  %167 = and i1 %164, %166
  br i1 %167, label %168, label %182

168:                                              ; preds = %163
  %169 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %23, i64 0, i32 41, i32 0
  %170 = load float, float* %169, align 4
  %171 = fcmp oeq float %170, 1.000000e+02
  br i1 %171, label %172, label %182

172:                                              ; preds = %168
  %173 = bitcast float* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %173)
  store float 9.000000e+01, float* %24, align 4
  %174 = bitcast float* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %174)
  %175 = fmul float %159, 0x3FD3333340000000
  %176 = fsub float 9.900000e+01, %175
  store float %176, float* %25, align 4
  %177 = fcmp ogt float %176, 9.000000e+01
  %178 = select i1 %177, float* %25, float* %24
  %179 = bitcast float* %178 to i32*
  %180 = load i32, i32* %179, align 4
  %181 = bitcast float* %169 to i32*
  store i32 %180, i32* %181, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %174)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %173)
  br label %182

182:                                              ; preds = %172, %168, %163
  %183 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %184 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %183, align 8
  %185 = icmp eq %"struct.jxl::jpeg::JPEGData"* %184, null
  br i1 %185, label %195, label %186

186:                                              ; preds = %182
  %187 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %23, i64 0, i32 20
  store i32 0, i32* %187, align 8
  %188 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %23, i64 0, i32 21
  store i32 0, i32* %188, align 4
  store i8 0, i8* %82, align 8
  %189 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %184, i64 0, i32 1
  %190 = load i32, i32* %189, align 8
  %191 = sext i32 %190 to i64
  %192 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %184, i64 0, i32 2
  %193 = load i32, i32* %192, align 4
  %194 = sext i32 %193 to i64
  br label %225

195:                                              ; preds = %182
  %196 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 10, i32 0, i64 0, i32 0, i32 0
  %197 = load i32, i32* %196, align 8
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %199, label %208

199:                                              ; preds = %195
  %200 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 12, i32 0, i32 0
  %201 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %200, align 8
  %202 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 12, i32 0, i32 1
  %203 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %202, align 8
  %204 = icmp eq %"class.jxl::Plane"* %201, %203
  br i1 %204, label %208, label %205

205:                                              ; preds = %199
  %206 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %201, i64 0, i32 0, i32 0
  %207 = load i32, i32* %206, align 8
  br label %208

208:                                              ; preds = %199, %195, %205
  %209 = phi i32 [ %207, %205 ], [ %197, %195 ], [ 0, %199 ]
  %210 = zext i32 %209 to i64
  %211 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 10, i32 0, i64 0, i32 0, i32 1
  %212 = load i32, i32* %211, align 4
  %213 = zext i32 %212 to i64
  %214 = icmp eq i32 %212, 0
  br i1 %214, label %215, label %225

215:                                              ; preds = %208
  %216 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 12, i32 0, i32 0
  %217 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %216, align 8
  %218 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 12, i32 0, i32 1
  %219 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %218, align 8
  %220 = icmp eq %"class.jxl::Plane"* %217, %219
  br i1 %220, label %2268, label %221

221:                                              ; preds = %215
  %222 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %217, i64 0, i32 0, i32 1
  %223 = load i32, i32* %222, align 4
  %224 = zext i32 %223 to i64
  br label %225

225:                                              ; preds = %186, %208, %221
  %226 = phi i8 [ 0, %186 ], [ %165, %221 ], [ %165, %208 ]
  %227 = phi i64 [ %191, %186 ], [ %210, %221 ], [ %210, %208 ]
  %228 = phi i64 [ %194, %186 ], [ %224, %221 ], [ %213, %208 ]
  %229 = icmp eq i64 %227, 0
  %230 = icmp eq i64 %228, 0
  %231 = or i1 %229, %230
  br i1 %231, label %2268, label %232

232:                                              ; preds = %225
  %233 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %2, i64 0, i32 0, i32 5
  %234 = load i8, i8* %233, align 1, !range !2
  %235 = zext i8 %234 to i32
  %236 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %23, i64 0, i32 11
  %237 = load i32, i32* %236, align 8
  %238 = icmp eq i32 %237, 0
  %239 = zext i1 %238 to i32
  %240 = icmp eq i32 %235, %239
  br i1 %240, label %244, label %241

241:                                              ; preds = %232
  %242 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.1, i64 0, i64 0), i32 1067, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.6, i64 0, i64 0)) #8
  %243 = tail call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

244:                                              ; preds = %232
  %245 = bitcast %"class.std::__1::unique_ptr.263"* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %245) #8
  %246 = getelementptr inbounds %"class.std::__1::unique_ptr.263", %"class.std::__1::unique_ptr.263"* %26, i64 0, i32 0, i32 0, i32 0
  %247 = tail call i8* @_Znwm(i64 576) #13
  %248 = bitcast i8* %247 to %"struct.jxl::FrameHeader"*
  tail call void @_ZN3jxl11FrameHeaderC1EPKNS_13CodecMetadataE(%"struct.jxl::FrameHeader"* nonnull %248, %"struct.jxl::CodecMetadata"* %2) #8
  %249 = bitcast %"class.std::__1::unique_ptr.263"* %26 to i8**
  store i8* %247, i8** %249, align 8
  %250 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %21, align 8
  %251 = getelementptr inbounds %"struct.jxl::FrameInfo", %"struct.jxl::FrameInfo"* %1, i64 0, i32 5
  %252 = load i8, i8* %251, align 1, !range !2, !noalias !3
  %253 = getelementptr inbounds i8, i8* %247, i64 560
  store i8 %252, i8* %253, align 8, !alias.scope !3
  %254 = getelementptr inbounds %"struct.jxl::FrameInfo", %"struct.jxl::FrameInfo"* %1, i64 0, i32 4
  %255 = load i8, i8* %254, align 8, !range !2, !noalias !3
  %256 = getelementptr inbounds i8, i8* %247, i64 392
  store i8 %255, i8* %256, align 8, !alias.scope !3
  %257 = getelementptr inbounds %"struct.jxl::FrameInfo", %"struct.jxl::FrameInfo"* %1, i64 0, i32 0
  %258 = load i8, i8* %257, align 8, !range !2, !noalias !3
  %259 = getelementptr inbounds i8, i8* %247, i64 400
  store i8 %258, i8* %259, align 8, !alias.scope !3
  %260 = getelementptr inbounds %"struct.jxl::FrameInfo", %"struct.jxl::FrameInfo"* %1, i64 0, i32 2
  %261 = load i32, i32* %260, align 4, !noalias !3
  %262 = getelementptr inbounds i8, i8* %247, i64 16
  %263 = bitcast i8* %262 to i32*
  store i32 %261, i32* %263, align 8, !alias.scope !3
  %264 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 8
  %265 = getelementptr inbounds i8, i8* %247, i64 80
  %266 = bitcast i8* %265 to %"class.std::__1::basic_string"*
  %267 = icmp eq %"class.std::__1::basic_string"* %264, %266
  br i1 %267, label %295, label %268

268:                                              ; preds = %244
  %269 = getelementptr inbounds i8, i8* %247, i64 103
  %270 = load i8, i8* %269, align 1, !alias.scope !3
  %271 = icmp slt i8 %270, 0
  %272 = bitcast %"class.std::__1::basic_string"* %264 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %273 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %272, i64 0, i32 1, i32 0
  %274 = load i8, i8* %273, align 1, !noalias !3
  %275 = icmp slt i8 %274, 0
  br i1 %271, label %285, label %276

276:                                              ; preds = %268
  br i1 %275, label %279, label %277

277:                                              ; preds = %276
  %278 = bitcast %"class.std::__1::basic_string"* %264 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %265, i8* align 8 %278, i64 24, i1 false) #8
  br label %295

279:                                              ; preds = %276
  %280 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %264, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %281 = load i8*, i8** %280, align 8, !noalias !3
  %282 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 8, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %283 = load i64, i64* %282, align 8, !noalias !3
  %284 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb1EEERS5_PKcm(%"class.std::__1::basic_string"* %266, i8* %281, i64 %283) #8
  br label %295

285:                                              ; preds = %268
  %286 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %264, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %287 = load i8*, i8** %286, align 8, !noalias !3
  %288 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 8, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %289 = load i64, i64* %288, align 8, !noalias !3
  %290 = bitcast %"class.std::__1::basic_string"* %264 to i8*
  %291 = zext i8 %274 to i64
  %292 = select i1 %275, i8* %287, i8* %290
  %293 = select i1 %275, i64 %289, i64 %291
  %294 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb0EEERS5_PKcm(%"class.std::__1::basic_string"* %266, i8* %292, i64 %293) #8
  br label %295

295:                                              ; preds = %285, %279, %277, %244
  %296 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %250, i64 0, i32 5, i32 0, i32 0
  %297 = load i64, i64* %296, align 8, !noalias !6
  %298 = trunc i64 %297 to i32
  %299 = getelementptr inbounds i8, i8* %247, i64 112
  %300 = bitcast i8* %299 to i32*
  store i32 %298, i32* %300, align 8, !alias.scope !6
  %301 = getelementptr inbounds i8, i8* %247, i64 116
  %302 = bitcast i8* %301 to i32*
  store i32 0, i32* %302, align 4, !alias.scope !6
  switch i32 %298, label %303 [
    i32 0, label %306
    i32 1, label %330
  ]

303:                                              ; preds = %295
  %304 = add i64 %297, -1
  %305 = icmp eq i64 %304, 0
  br i1 %305, label %330, label %309

306:                                              ; preds = %295
  %307 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.35, i64 0, i64 0), i32 115, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.36, i64 0, i64 0)) #8, !noalias !9
  %308 = tail call zeroext i1 @_ZN3jxl5AbortEv() #14, !noalias !9
  unreachable

309:                                              ; preds = %303, %325
  %310 = phi i32 [ %326, %325 ], [ 0, %303 ]
  %311 = phi i64 [ %328, %325 ], [ 0, %303 ]
  %312 = phi i32 [ %327, %325 ], [ 0, %303 ]
  %313 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %250, i64 0, i32 5, i32 0, i32 1, i64 %311, i32 3
  %314 = load i64, i64* %313, align 8, !noalias !6
  %315 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %250, i64 0, i32 5, i32 0, i32 1, i64 %311, i32 1
  %316 = load i64, i64* %315, align 8, !noalias !6
  %317 = trunc i64 %316 to i32
  %318 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %248, i64 0, i32 12, i32 5, i64 %311
  store i32 %317, i32* %318, align 4, !alias.scope !6
  switch i64 %314, label %319 [
    i64 -1, label %325
    i64 1, label %325
    i64 0, label %325
  ]

319:                                              ; preds = %309
  %320 = trunc i64 %314 to i32
  %321 = zext i32 %310 to i64
  %322 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %248, i64 0, i32 12, i32 3, i64 %321
  store i32 %320, i32* %322, align 4, !alias.scope !6
  %323 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %248, i64 0, i32 12, i32 4, i64 %321
  store i32 %312, i32* %323, align 4, !alias.scope !6
  %324 = add i32 %310, 1
  store i32 %324, i32* %302, align 4, !alias.scope !6
  br label %325

325:                                              ; preds = %319, %309, %309, %309
  %326 = phi i32 [ %310, %309 ], [ %310, %309 ], [ %310, %309 ], [ %324, %319 ]
  %327 = add i32 %312, 1
  %328 = zext i32 %327 to i64
  %329 = icmp ugt i64 %304, %328
  br i1 %329, label %309, label %330

330:                                              ; preds = %325, %303, %295
  %331 = icmp eq i8 %226, 0
  br i1 %331, label %340, label %332

332:                                              ; preds = %330
  %333 = getelementptr inbounds i8, i8* %247, i64 12
  %334 = bitcast i8* %333 to i32*
  store i32 1, i32* %334, align 4, !alias.scope !3
  %335 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %23, i64 0, i32 15
  %336 = load i64, i64* %335, align 8, !noalias !3
  %337 = trunc i64 %336 to i32
  %338 = getelementptr inbounds i8, i8* %247, i64 64
  %339 = bitcast i8* %338 to i32*
  store i32 %337, i32* %339, align 8, !alias.scope !3
  br label %340

340:                                              ; preds = %332, %330
  %341 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %183, align 8, !noalias !3
  %342 = icmp eq %"struct.jxl::jpeg::JPEGData"* %341, null
  br i1 %342, label %353, label %343

343:                                              ; preds = %340
  %344 = getelementptr inbounds i8, i8* %247, i64 12
  %345 = bitcast i8* %344 to i32*
  store i32 0, i32* %345, align 4, !alias.scope !3
  %346 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 1
  %347 = load i32, i32* %346, align 8, !noalias !3
  %348 = getelementptr inbounds i8, i8* %247, i64 32
  %349 = bitcast i8* %348 to i32*
  store i32 %347, i32* %349, align 8, !alias.scope !3
  %350 = getelementptr inbounds i8, i8* %247, i64 48
  %351 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 3, i32 1
  %352 = bitcast [3 x i32]* %351 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %350, i8* align 8 %352, i64 14, i1 false) #8
  br label %365

353:                                              ; preds = %340
  %354 = getelementptr inbounds i8, i8* %247, i64 32
  %355 = bitcast i8* %354 to i32*
  store i32 %237, i32* %355, align 8, !alias.scope !3
  %356 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %23, i64 0, i32 13, i32 2
  %357 = load i8, i8* %356, align 4, !noalias !3
  %358 = icmp eq i8 %357, 0
  br i1 %358, label %359, label %2251

359:                                              ; preds = %353
  %360 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %23, i64 0, i32 13, i32 3
  %361 = load i8, i8* %360, align 1, !noalias !3
  %362 = icmp eq i8 %361, 0
  br i1 %362, label %363, label %2251

363:                                              ; preds = %359
  %364 = getelementptr inbounds i8, i8* %247, i64 48
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %364, i8* align 8 %80, i64 14, i1 false) #8
  br label %365

365:                                              ; preds = %363, %343
  %366 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %23, i64 0, i32 17
  %367 = load i32, i32* %366, align 4, !noalias !3
  switch i32 %367, label %368 [
    i32 1, label %370
    i32 0, label %371
  ]

368:                                              ; preds = %365
  %369 = fcmp ult float %159, 9.900000e+01
  br i1 %369, label %371, label %370

370:                                              ; preds = %368, %365
  br label %371

371:                                              ; preds = %370, %368, %365
  %372 = phi i64 [ 1, %370 ], [ 0, %368 ], [ 0, %365 ]
  %373 = icmp sgt i32 %143, 0
  %374 = or i64 %372, 32
  %375 = and i1 %331, %373
  %376 = select i1 %375, i64 %374, i64 %372
  %377 = getelementptr inbounds i8, i8* %247, i64 24
  %378 = bitcast i8* %377 to i64*
  store i64 %376, i64* %378, align 8, !alias.scope !3
  %379 = getelementptr inbounds i8, i8* %247, i64 12
  %380 = bitcast i8* %379 to i32*
  %381 = load i32, i32* %380, align 4, !alias.scope !3
  %382 = icmp eq i32 %381, 0
  br i1 %382, label %385, label %383

383:                                              ; preds = %371
  %384 = and i64 %376, 32
  store i64 %384, i64* %378, align 8, !alias.scope !3
  br label %385

385:                                              ; preds = %383, %371
  %386 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %23, i64 0, i32 20
  %387 = load i32, i32* %386, align 8, !noalias !10
  %388 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %23, i64 0, i32 7
  %389 = load i32, i32* %388, align 4, !noalias !10
  %390 = icmp sgt i32 %389, 5
  %391 = xor i1 %382, true
  %392 = or i1 %390, %391
  br i1 %392, label %397, label %393

393:                                              ; preds = %385
  %394 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %23, i64 0, i32 8
  %395 = load i64, i64* %394, align 8, !noalias !10
  %396 = icmp ult i64 %395, 4
  br label %397

397:                                              ; preds = %393, %385
  %398 = phi i1 [ false, %385 ], [ %396, %393 ]
  switch i32 %387, label %400 [
    i32 1, label %401
    i32 0, label %399
  ]

399:                                              ; preds = %397
  br label %401

400:                                              ; preds = %397
  br label %401

401:                                              ; preds = %400, %399, %397
  %402 = phi i1 [ false, %399 ], [ %398, %400 ], [ true, %397 ]
  %403 = getelementptr inbounds i8, i8* %247, i64 425
  %404 = zext i1 %402 to i8
  store i8 %404, i8* %403, align 1, !alias.scope !10
  %405 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %23, i64 0, i32 21
  %406 = load i32, i32* %405, align 4, !noalias !10
  %407 = icmp eq i32 %406, -1
  br i1 %407, label %411, label %408

408:                                              ; preds = %401
  %409 = getelementptr inbounds i8, i8* %247, i64 452
  %410 = bitcast i8* %409 to i32*
  store i32 %406, i32* %410, align 4, !alias.scope !10
  br label %432

411:                                              ; preds = %401
  %412 = icmp eq i32 %381, 1
  %413 = getelementptr inbounds i8, i8* %247, i64 452
  %414 = bitcast i8* %413 to i32*
  store i32 0, i32* %414, align 4, !alias.scope !10
  br i1 %412, label %434, label %415

415:                                              ; preds = %411
  %416 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %23, i64 0, i32 8
  %417 = load i64, i64* %416, align 8, !noalias !10
  %418 = icmp ult i64 %417, 3
  br i1 %418, label %419, label %451

419:                                              ; preds = %415
  %420 = icmp eq i64 %417, 2
  %421 = zext i1 %420 to i64
  %422 = getelementptr inbounds [3 x float], [3 x float]* @_ZZN3jxl12_GLOBAL__N_120LoopFilterFromParamsERKNS_14CompressParamsEPNS_11FrameHeaderEE11kThresholds, i64 0, i64 %421
  %423 = load float, float* %422, align 4, !noalias !13
  %424 = fcmp ult float %159, %423
  br i1 %424, label %426, label %425

425:                                              ; preds = %419
  store i32 1, i32* %414, align 4, !alias.scope !10
  br label %426

426:                                              ; preds = %425, %419
  %427 = phi i32 [ 0, %419 ], [ 1, %425 ]
  %428 = select i1 %420, i64 2, i64 1
  %429 = getelementptr inbounds [3 x float], [3 x float]* @_ZZN3jxl12_GLOBAL__N_120LoopFilterFromParamsERKNS_14CompressParamsEPNS_11FrameHeaderEE11kThresholds, i64 0, i64 %428
  %430 = load float, float* %429, align 4, !noalias !13
  %431 = fcmp ult float %159, %430
  br i1 %431, label %2280, label %2278

432:                                              ; preds = %2284, %2288, %2280, %408
  %433 = icmp eq i32 %381, 1
  br i1 %433, label %434, label %451

434:                                              ; preds = %432, %411
  %435 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %23, i64 0, i32 41, i32 0
  %436 = load float, float* %435, align 4, !noalias !10
  %437 = fcmp olt float %436, 1.000000e+02
  br i1 %437, label %438, label %444

438:                                              ; preds = %434
  %439 = fdiv float %436, 1.000000e+02
  %440 = fsub float 1.000000e+00, %439
  %441 = fmul float %440, 2.000000e+01
  %442 = getelementptr inbounds i8, i8* %247, i64 536
  %443 = bitcast i8* %442 to float*
  store float %441, float* %443, align 8, !alias.scope !10
  br label %444

444:                                              ; preds = %438, %434
  %445 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %23, i64 0, i32 47
  %446 = load i8, i8* %445, align 8, !range !2, !noalias !10
  %447 = icmp eq i8 %446, 0
  br i1 %447, label %451, label %448

448:                                              ; preds = %444
  %449 = getelementptr inbounds i8, i8* %247, i64 536
  %450 = bitcast i8* %449 to float*
  store float 1.000000e+00, float* %450, align 8, !alias.scope !10
  br label %451

451:                                              ; preds = %448, %444, %432, %415
  %452 = load i64, i64* %152, align 8, !noalias !3
  %453 = trunc i64 %452 to i32
  %454 = getelementptr inbounds i8, i8* %247, i64 404
  %455 = bitcast i8* %454 to i32*
  store i32 %453, i32* %455, align 4, !alias.scope !3
  %456 = icmp ugt i32 %453, 2
  br i1 %456, label %2251, label %457

457:                                              ; preds = %451
  br i1 %373, label %458, label %462

458:                                              ; preds = %457
  %459 = icmp eq i64 %151, 1
  %460 = icmp eq i64 %147, 1
  %461 = and i1 %459, %460
  br i1 %461, label %464, label %2251

462:                                              ; preds = %457
  switch i64 %147, label %2251 [
    i64 1, label %463
    i64 2, label %463
    i64 4, label %463
    i64 8, label %463
  ]

463:                                              ; preds = %462, %462, %462, %462
  switch i64 %151, label %2251 [
    i64 1, label %464
    i64 2, label %464
    i64 4, label %464
    i64 8, label %464
  ]

464:                                              ; preds = %458, %463, %463, %463, %463
  %465 = load i32, i32* %260, align 4, !noalias !3
  %466 = icmp eq i32 %465, 1
  br i1 %466, label %615, label %467

467:                                              ; preds = %464
  %468 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 4
  %469 = getelementptr inbounds i8, i8* %247, i64 296
  %470 = bitcast %"struct.jxl::FrameOrigin"* %468 to i64*
  %471 = bitcast i8* %469 to i64*
  %472 = load i64, i64* %470, align 4, !noalias !3
  store i64 %472, i64* %471, align 8, !alias.scope !3
  %473 = trunc i64 %472 to i32
  br i1 %342, label %474, label %487

474:                                              ; preds = %467
  %475 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 10, i32 0, i64 0, i32 0, i32 0
  %476 = load i32, i32* %475, align 8, !noalias !3
  %477 = icmp eq i32 %476, 0
  br i1 %477, label %478, label %494

478:                                              ; preds = %474
  %479 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 12, i32 0, i32 0
  %480 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %479, align 8, !noalias !3
  %481 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 12, i32 0, i32 1
  %482 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %481, align 8, !noalias !3
  %483 = icmp eq %"class.jxl::Plane"* %480, %482
  br i1 %483, label %494, label %484

484:                                              ; preds = %478
  %485 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %480, i64 0, i32 0, i32 0
  %486 = load i32, i32* %485, align 8
  br label %494

487:                                              ; preds = %467
  %488 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %341, i64 0, i32 1
  %489 = load i32, i32* %488, align 8
  %490 = getelementptr inbounds i8, i8* %247, i64 260
  %491 = bitcast i8* %490 to i32*
  store i32 %489, i32* %491, align 4, !alias.scope !3
  %492 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %341, i64 0, i32 2
  %493 = load i32, i32* %492, align 4
  br label %510

494:                                              ; preds = %484, %478, %474
  %495 = phi i32 [ %476, %474 ], [ 0, %478 ], [ %486, %484 ]
  %496 = getelementptr inbounds i8, i8* %247, i64 260
  %497 = bitcast i8* %496 to i32*
  store i32 %495, i32* %497, align 4, !alias.scope !3
  %498 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 10, i32 0, i64 0, i32 0, i32 1
  %499 = load i32, i32* %498, align 4, !noalias !3
  %500 = icmp eq i32 %499, 0
  br i1 %500, label %501, label %510

501:                                              ; preds = %494
  %502 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 12, i32 0, i32 0
  %503 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %502, align 8, !noalias !3
  %504 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 12, i32 0, i32 1
  %505 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %504, align 8, !noalias !3
  %506 = icmp eq %"class.jxl::Plane"* %503, %505
  br i1 %506, label %510, label %507

507:                                              ; preds = %501
  %508 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %503, i64 0, i32 0, i32 1
  %509 = load i32, i32* %508, align 4
  br label %510

510:                                              ; preds = %507, %501, %494, %487
  %511 = phi i32 [ %493, %487 ], [ %509, %507 ], [ 0, %501 ], [ %499, %494 ]
  %512 = getelementptr inbounds i8, i8* %247, i64 264
  %513 = bitcast i8* %512 to i32*
  store i32 %511, i32* %513, align 4, !alias.scope !3
  %514 = icmp eq i32 %473, 0
  br i1 %514, label %515, label %613

515:                                              ; preds = %510
  %516 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 4, i32 1
  %517 = load i32, i32* %516, align 4, !noalias !3
  %518 = icmp eq i32 %517, 0
  br i1 %518, label %519, label %613

519:                                              ; preds = %515
  br i1 %342, label %524, label %520

520:                                              ; preds = %519
  %521 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %341, i64 0, i32 1
  %522 = load i32, i32* %521, align 8
  %523 = sext i32 %522 to i64
  br label %539

524:                                              ; preds = %519
  %525 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 10, i32 0, i64 0, i32 0, i32 0
  %526 = load i32, i32* %525, align 8, !noalias !3
  %527 = zext i32 %526 to i64
  %528 = icmp eq i32 %526, 0
  br i1 %528, label %529, label %539

529:                                              ; preds = %524
  %530 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 12, i32 0, i32 0
  %531 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %530, align 8, !noalias !3
  %532 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 12, i32 0, i32 1
  %533 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %532, align 8, !noalias !3
  %534 = icmp eq %"class.jxl::Plane"* %531, %533
  br i1 %534, label %539, label %535

535:                                              ; preds = %529
  %536 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %531, i64 0, i32 0, i32 0
  %537 = load i32, i32* %536, align 8
  %538 = zext i32 %537 to i64
  br label %539

539:                                              ; preds = %535, %529, %524, %520
  %540 = phi i64 [ %523, %520 ], [ %538, %535 ], [ 0, %529 ], [ %527, %524 ]
  %541 = getelementptr inbounds i8, i8* %247, i64 408
  %542 = bitcast i8* %541 to %"struct.jxl::CodecMetadata"**
  %543 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %542, align 8, !alias.scope !3
  %544 = icmp eq %"struct.jxl::CodecMetadata"* %543, null
  br i1 %544, label %554, label %545

545:                                              ; preds = %539
  %546 = load i8, i8* %253, align 8, !range !2, !alias.scope !3
  %547 = icmp eq i8 %546, 0
  br i1 %547, label %551, label %548

548:                                              ; preds = %545
  %549 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %543, i64 0, i32 0, i32 19
  %550 = tail call i64 @_ZNK3jxl13PreviewHeader5xsizeEv(%"class.jxl::PreviewHeader"* %549) #8
  br label %554

551:                                              ; preds = %545
  %552 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %543, i64 0, i32 1
  %553 = tail call i64 @_ZNK3jxl10SizeHeader5xsizeEv(%"class.jxl::SizeHeader"* %552) #8
  br label %554

554:                                              ; preds = %551, %548, %539
  %555 = phi i64 [ %550, %548 ], [ %553, %551 ], [ 0, %539 ]
  %556 = icmp eq i64 %540, %555
  br i1 %556, label %557, label %613

557:                                              ; preds = %554
  %558 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %183, align 8, !noalias !3
  %559 = icmp eq %"struct.jxl::jpeg::JPEGData"* %558, null
  br i1 %559, label %564, label %560

560:                                              ; preds = %557
  %561 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %558, i64 0, i32 2
  %562 = load i32, i32* %561, align 4
  %563 = sext i32 %562 to i64
  br label %579

564:                                              ; preds = %557
  %565 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 10, i32 0, i64 0, i32 0, i32 1
  %566 = load i32, i32* %565, align 4, !noalias !3
  %567 = zext i32 %566 to i64
  %568 = icmp eq i32 %566, 0
  br i1 %568, label %569, label %579

569:                                              ; preds = %564
  %570 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 12, i32 0, i32 0
  %571 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %570, align 8, !noalias !3
  %572 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 12, i32 0, i32 1
  %573 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %572, align 8, !noalias !3
  %574 = icmp eq %"class.jxl::Plane"* %571, %573
  br i1 %574, label %579, label %575

575:                                              ; preds = %569
  %576 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %571, i64 0, i32 0, i32 1
  %577 = load i32, i32* %576, align 4
  %578 = zext i32 %577 to i64
  br label %579

579:                                              ; preds = %575, %569, %564, %560
  %580 = phi i64 [ %563, %560 ], [ %578, %575 ], [ 0, %569 ], [ %567, %564 ]
  %581 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %542, align 8, !alias.scope !3
  %582 = icmp eq %"struct.jxl::CodecMetadata"* %581, null
  br i1 %582, label %609, label %583

583:                                              ; preds = %579
  %584 = load i8, i8* %253, align 8, !range !2, !alias.scope !3
  %585 = icmp eq i8 %584, 0
  br i1 %585, label %597, label %586

586:                                              ; preds = %583
  %587 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %581, i64 0, i32 0, i32 19, i32 1
  %588 = load i8, i8* %587, align 8, !range !2
  %589 = icmp eq i8 %588, 0
  br i1 %589, label %594, label %590

590:                                              ; preds = %586
  %591 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %581, i64 0, i32 0, i32 19, i32 2
  %592 = load i32, i32* %591, align 4
  %593 = shl i32 %592, 3
  br label %609

594:                                              ; preds = %586
  %595 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %581, i64 0, i32 0, i32 19, i32 3
  %596 = load i32, i32* %595, align 8
  br label %609

597:                                              ; preds = %583
  %598 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %581, i64 0, i32 1, i32 1
  %599 = load i8, i8* %598, align 8, !range !2
  %600 = icmp eq i8 %599, 0
  br i1 %600, label %606, label %601

601:                                              ; preds = %597
  %602 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %581, i64 0, i32 1, i32 2
  %603 = load i32, i32* %602, align 4
  %604 = shl i32 %603, 3
  %605 = add i32 %604, 8
  br label %609

606:                                              ; preds = %597
  %607 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %581, i64 0, i32 1, i32 3
  %608 = load i32, i32* %607, align 8
  br label %609

609:                                              ; preds = %606, %601, %594, %590, %579
  %610 = phi i32 [ 0, %579 ], [ %593, %590 ], [ %596, %594 ], [ %605, %601 ], [ %608, %606 ]
  %611 = zext i32 %610 to i64
  %612 = icmp eq i64 %580, %611
  br i1 %612, label %615, label %613

613:                                              ; preds = %609, %554, %515, %510
  %614 = getelementptr inbounds i8, i8* %247, i64 256
  store i8 1, i8* %614, align 8, !alias.scope !3
  br label %615

615:                                              ; preds = %613, %609, %464
  %616 = trunc i64 %147 to i32
  %617 = getelementptr inbounds i8, i8* %247, i64 268
  %618 = bitcast i8* %617 to i32*
  store i32 %616, i32* %618, align 4, !alias.scope !3
  %619 = getelementptr inbounds i8, i8* %247, i64 408
  %620 = bitcast i8* %619 to %"struct.jxl::CodecMetadata"**
  %621 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %620, align 8, !alias.scope !3
  %622 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %621, i64 0, i32 0, i32 17
  %623 = getelementptr inbounds i8, i8* %247, i64 272
  %624 = bitcast i8* %623 to i64*
  %625 = load i64, i64* %624, align 8, !alias.scope !3
  %626 = getelementptr inbounds i8, i8* %247, i64 280
  %627 = bitcast i8* %626 to i64*
  store i64 %625, i64* %627, align 8, !alias.scope !3
  %628 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %621, i64 0, i32 0, i32 17, i32 0, i32 1
  %629 = bitcast %"struct.jxl::ExtraChannelInfo"** %628 to i64*
  %630 = load i64, i64* %629, align 8
  %631 = bitcast %"class.std::__1::vector.4"* %622 to i64*
  %632 = load i64, i64* %631, align 8
  %633 = sub i64 %630, %632
  %634 = bitcast i32* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %634) #8, !noalias !3
  %635 = trunc i64 %151 to i32
  store i32 %635, i32* %20, align 4, !noalias !3
  %636 = icmp eq i64 %633, 0
  br i1 %636, label %640, label %637

637:                                              ; preds = %615
  %638 = bitcast i8* %623 to %"class.std::__1::vector"*
  %639 = sdiv exact i64 %633, 96
  call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEmRKj(%"class.std::__1::vector"* %638, i64 %639, i32* nonnull dereferenceable(4) %20) #8
  br label %640

640:                                              ; preds = %637, %615
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %634) #8, !noalias !3
  %641 = getelementptr inbounds %"struct.jxl::FrameInfo", %"struct.jxl::FrameInfo"* %1, i64 0, i32 6
  %642 = load i64, i64* %641, align 8, !noalias !3
  %643 = trunc i64 %642 to i32
  %644 = getelementptr inbounds i8, i8* %247, i64 396
  %645 = bitcast i8* %644 to i32*
  store i32 %643, i32* %645, align 4, !alias.scope !3
  %646 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 7
  %647 = load i8, i8* %646, align 1, !range !2, !noalias !3
  %648 = icmp eq i8 %647, 0
  br i1 %648, label %649, label %653

649:                                              ; preds = %640
  %650 = getelementptr inbounds i8, i8* %247, i64 256
  %651 = load i8, i8* %650, align 8, !range !2, !alias.scope !3
  %652 = icmp eq i8 %651, 0
  br i1 %652, label %709, label %653

653:                                              ; preds = %649, %640
  %654 = load i64, i64* %629, align 8
  %655 = load i64, i64* %631, align 8
  %656 = sub i64 %654, %655
  %657 = sdiv exact i64 %656, 96
  %658 = icmp ugt i64 %657, 1
  %659 = inttoptr i64 %655 to %"struct.jxl::ExtraChannelInfo"*
  br i1 %658, label %660, label %668

660:                                              ; preds = %653, %665
  %661 = phi i64 [ %666, %665 ], [ 0, %653 ]
  %662 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %659, i64 %661, i32 2
  %663 = load i32, i32* %662, align 4
  %664 = icmp eq i32 %663, 0
  br i1 %664, label %668, label %665

665:                                              ; preds = %660
  %666 = add nuw i64 %661, 1
  %667 = icmp eq i64 %666, %657
  br i1 %667, label %668, label %660

668:                                              ; preds = %665, %660, %653
  %669 = phi i64 [ 0, %653 ], [ 0, %665 ], [ %661, %660 ]
  %670 = trunc i64 %669 to i32
  %671 = getelementptr inbounds i8, i8* %247, i64 316
  %672 = bitcast i8* %671 to i32*
  store i32 %670, i32* %672, align 4, !alias.scope !3
  %673 = select i1 %648, i32 0, i32 2
  %674 = getelementptr inbounds i8, i8* %247, i64 312
  %675 = bitcast i8* %674 to i32*
  store i32 %673, i32* %675, align 8, !alias.scope !3
  %676 = getelementptr inbounds i8, i8* %247, i64 324
  %677 = bitcast i8* %676 to i32*
  store i32 1, i32* %677, align 4, !alias.scope !3
  %678 = load i64, i64* %629, align 8
  %679 = load i64, i64* %631, align 8
  %680 = icmp eq i64 %678, %679
  br i1 %680, label %709, label %681

681:                                              ; preds = %668
  %682 = getelementptr inbounds i8, i8* %247, i64 344
  %683 = bitcast i8* %682 to %"struct.jxl::BlendingInfo"**
  %684 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %622, i64 0, i32 0, i32 0
  br label %685

685:                                              ; preds = %685, %681
  %686 = phi i64 [ 0, %681 ], [ %703, %685 ]
  %687 = load %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"** %683, align 8, !alias.scope !3
  %688 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %687, i64 %686, i32 2
  store i32 %670, i32* %688, align 4
  %689 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %684, align 8
  %690 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %689, i64 %686, i32 2
  %691 = load i32, i32* %690, align 4
  %692 = icmp eq i32 %691, 4
  %693 = icmp eq i64 %686, %669
  %694 = or i1 %693, %692
  %695 = select i1 %694, i32 2, i32 1
  %696 = load i8, i8* %646, align 1, !range !2, !noalias !3
  %697 = icmp eq i8 %696, 0
  %698 = select i1 %697, i32 0, i32 %695
  %699 = load %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"** %683, align 8, !alias.scope !3
  %700 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %699, i64 %686, i32 1
  store i32 %698, i32* %700, align 8
  %701 = load %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"** %683, align 8, !alias.scope !3
  %702 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %701, i64 %686, i32 5
  store i32 1, i32* %702, align 4
  %703 = add nuw i64 %686, 1
  %704 = load i64, i64* %629, align 8
  %705 = load i64, i64* %631, align 8
  %706 = sub i64 %704, %705
  %707 = sdiv exact i64 %706, 96
  %708 = icmp ult i64 %703, %707
  br i1 %708, label %685, label %709

709:                                              ; preds = %685, %668, %649
  %710 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 5
  %711 = load i32, i32* %710, align 8, !noalias !3
  %712 = getelementptr inbounds i8, i8* %247, i64 376
  %713 = bitcast i8* %712 to i32*
  store i32 %711, i32* %713, align 8, !alias.scope !3
  %714 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %0, i64 0, i32 11
  %715 = load i32, i32* %714, align 8
  %716 = icmp eq i32 %715, 0
  %717 = load %"struct.jxl::FrameHeader"*, %"struct.jxl::FrameHeader"** %246, align 8
  %718 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %717, i64 0, i32 5
  %719 = load i32, i32* %718, align 8
  %720 = icmp eq i32 %719, 0
  br i1 %716, label %721, label %722

721:                                              ; preds = %709
  br i1 %720, label %723, label %2252

722:                                              ; preds = %709
  br i1 %720, label %2252, label %723

723:                                              ; preds = %721, %722
  %724 = bitcast %"struct.jxl::FrameDimensions"* %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %724) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %724, i8 -86, i64 144, i1 false)
  call void @_ZNK3jxl11FrameHeader17ToFrameDimensionsEv(%"struct.jxl::FrameDimensions"* nonnull sret %27, %"struct.jxl::FrameHeader"* %717)
  %725 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %27, i64 0, i32 14
  %726 = load i64, i64* %725, align 8
  %727 = bitcast %"class.jxl::Image3"* %28 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %727) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %727, i8 0, i64 96, i1 false) #8
  %728 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 11, i32 9
  %729 = load i32, i32* %728, align 8
  %730 = icmp eq i32 %729, 1
  %731 = call dereferenceable(152) %"struct.jxl::ColorEncoding"* @_ZN3jxl13ColorEncoding10LinearSRGBEb(i1 zeroext %730) #8
  %732 = call i8* @_Znwm(i64 1600) #13
  %733 = bitcast i8* %732 to %"struct.jxl::ImageMetadata"*
  call void @_ZN3jxl13ImageMetadataC1Ev(%"struct.jxl::ImageMetadata"* nonnull %733) #8
  %734 = load i32, i32* %236, align 8
  %735 = icmp eq i32 %734, 0
  %736 = getelementptr inbounds i8, i8* %732, i64 41
  %737 = zext i1 %735 to i8
  store i8 %737, i8* %736, align 1
  %738 = getelementptr inbounds i8, i8* %732, i64 56
  %739 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %731, i64 0, i32 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %738, i8* align 8 %739, i64 12, i1 false) #8
  %740 = getelementptr inbounds i8, i8* %732, i64 80
  %741 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %731, i64 0, i32 4, i32 1
  %742 = bitcast i32* %741 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %740, i8* align 8 %742, i64 16, i1 false) #8
  %743 = getelementptr inbounds i8, i8* %732, i64 96
  %744 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %731, i64 0, i32 5
  %745 = bitcast i32* %744 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %743, i8* align 8 %745, i64 6, i1 false) #8
  %746 = getelementptr inbounds i8, i8* %732, i64 104
  %747 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %731, i64 0, i32 8, i32 0
  %748 = load i64, i64* %747, align 8
  %749 = getelementptr inbounds i8, i8* %732, i64 112
  %750 = bitcast i8* %749 to i64*
  %751 = load i64, i64* %750, align 8
  %752 = icmp ult i64 %751, %748
  br i1 %752, label %753, label %755

753:                                              ; preds = %723
  %754 = bitcast i8* %746 to %"class.jxl::PaddedBytes"*
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %754, i64 %748) #8
  br label %755

755:                                              ; preds = %753, %723
  %756 = getelementptr inbounds i8, i8* %732, i64 120
  %757 = bitcast i8* %756 to i8**
  %758 = load i8*, i8** %757, align 8
  %759 = icmp eq i8* %758, null
  %760 = select i1 %759, i64 0, i64 %748
  %761 = bitcast i8* %746 to i64*
  store i64 %760, i64* %761, align 8
  br i1 %759, label %765, label %762

762:                                              ; preds = %755
  %763 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %731, i64 0, i32 8, i32 2, i32 0, i32 0, i32 0
  %764 = load i8*, i8** %763, align 8
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 1 %758, i8* align 1 %764, i64 %760, i1 false) #8
  br label %765

765:                                              ; preds = %755, %762
  %766 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %731, i64 0, i32 9
  %767 = load i32, i32* %766, align 8
  %768 = getelementptr inbounds i8, i8* %732, i64 128
  %769 = bitcast i8* %768 to i32*
  store i32 %767, i32* %769, align 8
  %770 = getelementptr inbounds i8, i8* %732, i64 144
  %771 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %731, i64 0, i32 10, i32 1
  %772 = bitcast i32* %771 to i64*
  %773 = bitcast i8* %770 to i64*
  %774 = load i64, i64* %772, align 8
  store i64 %774, i64* %773, align 8
  %775 = getelementptr inbounds i8, i8* %732, i64 160
  %776 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %731, i64 0, i32 11, i32 1
  %777 = bitcast i32* %776 to i64*
  %778 = bitcast i8* %775 to i64*
  %779 = load i64, i64* %777, align 8
  store i64 %779, i64* %778, align 8
  %780 = getelementptr inbounds i8, i8* %732, i64 176
  %781 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %731, i64 0, i32 12, i32 1
  %782 = bitcast i32* %781 to i64*
  %783 = bitcast i8* %780 to i64*
  %784 = load i64, i64* %782, align 8
  store i64 %784, i64* %783, align 8
  %785 = getelementptr inbounds i8, i8* %732, i64 192
  %786 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %731, i64 0, i32 13, i32 1
  %787 = bitcast i32* %786 to i64*
  %788 = bitcast i8* %785 to i64*
  %789 = load i64, i64* %787, align 8
  store i64 %789, i64* %788, align 8
  %790 = bitcast %"class.jxl::ImageBundle"* %29 to i8*
  call void @llvm.lifetime.start.p0i8(i64 368, i8* nonnull %790) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %790, i8 -86, i64 368, i1 false)
  %791 = bitcast %"class.jxl::ImageBundle"* %29 to i64*
  store i64 0, i64* %791, align 8
  %792 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 0, i32 1
  store i32 1, i32* %792, align 8
  %793 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 0, i32 3
  call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %793) #8
  %794 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 0, i32 4, i32 0
  %795 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 0, i32 8
  %796 = bitcast %"class.std::__1::basic_string"* %795 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %796, i8 0, i64 24, i1 false) #8
  %797 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 0, i32 9
  %798 = bitcast i32* %794 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %798, i8 0, i64 14, i1 false) #8
  %799 = bitcast %"struct.jxl::ImageMetadata"** %797 to i8**
  store i8* %732, i8** %799, align 8
  %800 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 0, i32 10
  %801 = bitcast %"class.jxl::Image3"* %800 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %801, i8 0, i64 96, i1 false) #8
  %802 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 0, i32 11
  call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %802) #8
  %803 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 0, i32 12
  %804 = bitcast %"class.std::__1::vector.85"* %803 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %804, i8 0, i64 32, i1 false) #8
  %805 = bitcast %"class.std::__1::vector.275"* %30 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %805) #8
  %806 = getelementptr inbounds %"class.std::__1::vector.275", %"class.std::__1::vector.275"* %30, i64 0, i32 0, i32 0
  %807 = getelementptr inbounds %"class.std::__1::vector.275", %"class.std::__1::vector.275"* %30, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %805, i8 0, i64 24, i1 false) #8
  %808 = bitcast %"class.std::__1::function.282"* %31 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %808) #8
  %809 = getelementptr inbounds %"class.std::__1::function.282", %"class.std::__1::function.282"* %31, i64 0, i32 0, i32 0, i32 0
  %810 = getelementptr inbounds %"class.std::__1::function.282", %"class.std::__1::function.282"* %31, i64 0, i32 0, i32 1, i32 0
  %811 = getelementptr inbounds %"class.std::__1::function.282", %"class.std::__1::function.282"* %31, i64 0, i32 0, i32 2
  %812 = load %"struct.jxl::AuxOut"*, %"struct.jxl::AuxOut"** %22, align 8
  store i32 (%"union.std::__1::__function::__policy_storage"*, i64)* @"_ZNSt3__110__function16__policy_invokerIFN3jxl6StatusEmEE11__call_implINS0_20__default_alloc_funcIZNS2_11EncodeFrameERKNS2_14CompressParamsERKNS2_9FrameInfoEPKNS2_13CodecMetadataERKNS2_11ImageBundleEPNS2_18PassesEncoderStateEPNS2_10ThreadPoolEPNS2_9BitWriterEPNS2_6AuxOutEE3$_0S4_EEEES3_PKNS0_16__policy_storageEm", i32 (%"union.std::__1::__function::__policy_storage"*, i64)** %810, align 8
  store %"struct.std::__1::__function::__policy"* @"_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN3jxl11EncodeFrameERKNS4_14CompressParamsERKNS4_9FrameInfoEPKNS4_13CodecMetadataERKNS4_11ImageBundleEPNS4_18PassesEncoderStateEPNS4_10ThreadPoolEPNS4_9BitWriterEPNS4_6AuxOutEE3$_0FNS4_6StatusEmEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_", %"struct.std::__1::__function::__policy"** %811, align 8
  %813 = bitcast %"class.std::__1::function.282"* %31 to %"class.std::__1::vector.275"**
  store %"class.std::__1::vector.275"* %30, %"class.std::__1::vector.275"** %813, align 8
  %814 = getelementptr inbounds %"class.std::__1::function.282", %"class.std::__1::function.282"* %31, i64 0, i32 0, i32 0, i32 1
  %815 = bitcast [8 x i8]* %814 to %"struct.jxl::AuxOut"**
  store %"struct.jxl::AuxOut"* %812, %"struct.jxl::AuxOut"** %815, align 8
  %816 = bitcast %"class.jxl::LossyFrameEncoder"* %32 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %816) #8
  %817 = getelementptr inbounds %"class.jxl::LossyFrameEncoder", %"class.jxl::LossyFrameEncoder"* %32, i64 0, i32 0
  %818 = getelementptr inbounds %"class.jxl::LossyFrameEncoder", %"class.jxl::LossyFrameEncoder"* %32, i64 0, i32 2
  %819 = getelementptr inbounds %"class.jxl::LossyFrameEncoder", %"class.jxl::LossyFrameEncoder"* %32, i64 0, i32 3, i32 0, i32 1
  %820 = bitcast %"class.jxl::LossyFrameEncoder"* %32 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %820, i8 -86, i64 48, i1 false)
  %821 = load %"struct.jxl::FrameHeader"*, %"struct.jxl::FrameHeader"** %246, align 8
  %822 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %21, align 8
  call void @_ZN3jxl17LossyFrameEncoderC2ERKNS_14CompressParamsERKNS_11FrameHeaderEPNS_18PassesEncoderStateEPNS_10ThreadPoolEPNS_6AuxOutE(%"class.jxl::LossyFrameEncoder"* nonnull %32, %"struct.jxl::CompressParams"* nonnull dereferenceable(360) %23, %"struct.jxl::FrameHeader"* dereferenceable(576) %821, %"struct.jxl::PassesEncoderState"* %822, %"class.jxl::ThreadPool"* %5, %"struct.jxl::AuxOut"* %812)
  %823 = bitcast %"class.std::__1::unique_ptr.295"* %33 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %823) #8
  %824 = getelementptr inbounds %"class.std::__1::unique_ptr.295", %"class.std::__1::unique_ptr.295"* %33, i64 0, i32 0, i32 0, i32 0
  store %"class.jxl::ModularFrameEncoder"* inttoptr (i64 -6148914691236517206 to %"class.jxl::ModularFrameEncoder"*), %"class.jxl::ModularFrameEncoder"** %824, align 8
  %825 = load %"struct.jxl::FrameHeader"*, %"struct.jxl::FrameHeader"** %246, align 8
  %826 = call i8* @_Znwm(i64 928) #13
  %827 = bitcast i8* %826 to %"class.jxl::ModularFrameEncoder"*
  call void @_ZN3jxl19ModularFrameEncoderC1ERKNS_11FrameHeaderERKNS_14CompressParamsE(%"class.jxl::ModularFrameEncoder"* nonnull %827, %"struct.jxl::FrameHeader"* dereferenceable(576) %825, %"struct.jxl::CompressParams"* nonnull dereferenceable(360) %23) #8
  %828 = bitcast %"class.std::__1::unique_ptr.295"* %33 to i8**
  store i8* %826, i8** %828, align 8
  %829 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 12
  %830 = bitcast %"class.std::__1::vector.85"* %34 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %830) #8
  %831 = getelementptr inbounds %"class.std::__1::vector.85", %"class.std::__1::vector.85"* %34, i64 0, i32 0, i32 0
  %832 = getelementptr inbounds %"class.std::__1::vector.85", %"class.std::__1::vector.85"* %34, i64 0, i32 0, i32 1
  %833 = getelementptr inbounds %"class.std::__1::vector.85", %"class.std::__1::vector.85"* %34, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %830, i8 0, i64 24, i1 false) #8
  %834 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %183, align 8
  %835 = icmp eq %"struct.jxl::jpeg::JPEGData"* %834, null
  br i1 %835, label %840, label %836

836:                                              ; preds = %765
  %837 = load %"struct.jxl::FrameHeader"*, %"struct.jxl::FrameHeader"** %246, align 8
  %838 = call i32 @_ZN3jxl17LossyFrameEncoder26ComputeJPEGTranscodingDataERKNS_4jpeg8JPEGDataEPNS_19ModularFrameEncoderEPNS_11FrameHeaderE(%"class.jxl::LossyFrameEncoder"* nonnull %32, %"struct.jxl::jpeg::JPEGData"* nonnull dereferenceable(296) %834, %"class.jxl::ModularFrameEncoder"* nonnull %827, %"struct.jxl::FrameHeader"* %837)
  %839 = icmp eq i32 %838, 0
  br i1 %839, label %1170, label %2120

840:                                              ; preds = %765
  %841 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %817, align 8
  %842 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %841, i64 0, i32 12, i32 0, i32 0, i32 0
  %843 = load %"class.jxl::EncoderHeuristics"*, %"class.jxl::EncoderHeuristics"** %842, align 8
  %844 = bitcast %"class.jxl::EncoderHeuristics"* %843 to i1 (%"class.jxl::EncoderHeuristics"*, %"struct.jxl::CompressParams"*, %"class.jxl::ImageBundle"*)***
  %845 = load i1 (%"class.jxl::EncoderHeuristics"*, %"struct.jxl::CompressParams"*, %"class.jxl::ImageBundle"*)**, i1 (%"class.jxl::EncoderHeuristics"*, %"struct.jxl::CompressParams"*, %"class.jxl::ImageBundle"*)*** %844, align 8
  %846 = getelementptr inbounds i1 (%"class.jxl::EncoderHeuristics"*, %"struct.jxl::CompressParams"*, %"class.jxl::ImageBundle"*)*, i1 (%"class.jxl::EncoderHeuristics"*, %"struct.jxl::CompressParams"*, %"class.jxl::ImageBundle"*)** %845, i64 4
  %847 = load i1 (%"class.jxl::EncoderHeuristics"*, %"struct.jxl::CompressParams"*, %"class.jxl::ImageBundle"*)*, i1 (%"class.jxl::EncoderHeuristics"*, %"struct.jxl::CompressParams"*, %"class.jxl::ImageBundle"*)** %846, align 8
  %848 = call zeroext i1 %847(%"class.jxl::EncoderHeuristics"* %843, %"struct.jxl::CompressParams"* nonnull dereferenceable(360) %23, %"class.jxl::ImageBundle"* dereferenceable(368) %3) #8
  br i1 %848, label %849, label %854

849:                                              ; preds = %840
  %850 = load %"struct.jxl::FrameHeader"*, %"struct.jxl::FrameHeader"** %246, align 8
  %851 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %850, i64 0, i32 2
  %852 = load i32, i32* %851, align 4
  %853 = icmp eq i32 %852, 0
  br i1 %853, label %1166, label %854

854:                                              ; preds = %849, %840
  %855 = bitcast %"class.jxl::Image3"* %35 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %855) #8
  %856 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %183, align 8
  %857 = icmp eq %"struct.jxl::jpeg::JPEGData"* %856, null
  br i1 %857, label %858, label %871

858:                                              ; preds = %854
  %859 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 10, i32 0, i64 0, i32 0, i32 0
  %860 = load i32, i32* %859, align 8
  %861 = icmp eq i32 %860, 0
  br i1 %861, label %862, label %880

862:                                              ; preds = %858
  %863 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 12, i32 0, i32 0
  %864 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %863, align 8
  %865 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 12, i32 0, i32 1
  %866 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %865, align 8
  %867 = icmp eq %"class.jxl::Plane"* %864, %866
  br i1 %867, label %880, label %868

868:                                              ; preds = %862
  %869 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %864, i64 0, i32 0, i32 0
  %870 = load i32, i32* %869, align 8
  br label %880

871:                                              ; preds = %854
  %872 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %856, i64 0, i32 1
  %873 = load i32, i32* %872, align 8
  %874 = sext i32 %873 to i64
  %875 = add nsw i64 %874, 7
  %876 = and i64 %875, -8
  %877 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %856, i64 0, i32 2
  %878 = load i32, i32* %877, align 4
  %879 = sext i32 %878 to i64
  br label %899

880:                                              ; preds = %858, %862, %868
  %881 = phi i32 [ %860, %858 ], [ 0, %862 ], [ %870, %868 ]
  %882 = zext i32 %881 to i64
  %883 = add nuw nsw i64 %882, 7
  %884 = and i64 %883, 8589934584
  %885 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 10, i32 0, i64 0, i32 0, i32 1
  %886 = load i32, i32* %885, align 4
  %887 = zext i32 %886 to i64
  %888 = icmp eq i32 %886, 0
  br i1 %888, label %889, label %899

889:                                              ; preds = %880
  %890 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 12, i32 0, i32 0
  %891 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %890, align 8
  %892 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 12, i32 0, i32 1
  %893 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %892, align 8
  %894 = icmp eq %"class.jxl::Plane"* %891, %893
  br i1 %894, label %899, label %895

895:                                              ; preds = %889
  %896 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %891, i64 0, i32 0, i32 1
  %897 = load i32, i32* %896, align 4
  %898 = zext i32 %897 to i64
  br label %899

899:                                              ; preds = %871, %880, %889, %895
  %900 = phi i64 [ %876, %871 ], [ %884, %895 ], [ %884, %889 ], [ %884, %880 ]
  %901 = phi i64 [ %879, %871 ], [ %898, %895 ], [ 0, %889 ], [ %887, %880 ]
  %902 = add nsw i64 %901, 7
  %903 = and i64 %902, -8
  %904 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %35, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %904, i64 %900, i64 %903, i64 4) #8
  %905 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %35, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %905, i64 %900, i64 %903, i64 4) #8
  %906 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %35, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %906, i64 %900, i64 %903, i64 4) #8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %727, i8* nonnull align 8 %855, i64 24, i1 false) #8
  %907 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %28, i64 0, i32 0, i64 0, i32 0, i32 5
  %908 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %35, i64 0, i32 0, i64 0, i32 0, i32 5
  %909 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %908, i64 0, i32 0, i32 0, i32 0
  %910 = bitcast %"class.std::__1::unique_ptr"* %908 to i64*
  %911 = load i64, i64* %910, align 8
  store i8* null, i8** %909, align 8
  %912 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %907, i64 0, i32 0, i32 0, i32 0
  %913 = load i8*, i8** %912, align 8
  %914 = bitcast %"class.std::__1::unique_ptr"* %907 to i64*
  store i64 %911, i64* %914, align 8
  %915 = icmp eq i8* %913, null
  br i1 %915, label %917, label %916

916:                                              ; preds = %899
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %913) #8
  br label %917

917:                                              ; preds = %916, %899
  %918 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %35, i64 0, i32 0, i64 1
  %919 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %28, i64 0, i32 0, i64 1
  %920 = bitcast %"class.jxl::Plane"* %919 to i8*
  %921 = bitcast %"class.jxl::Plane"* %918 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %920, i8* align 8 %921, i64 24, i1 false) #8
  %922 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %28, i64 0, i32 0, i64 1, i32 0, i32 5
  %923 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %35, i64 0, i32 0, i64 1, i32 0, i32 5
  %924 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %923, i64 0, i32 0, i32 0, i32 0
  %925 = bitcast %"class.std::__1::unique_ptr"* %923 to i64*
  %926 = load i64, i64* %925, align 8
  store i8* null, i8** %924, align 8
  %927 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %922, i64 0, i32 0, i32 0, i32 0
  %928 = load i8*, i8** %927, align 8
  %929 = bitcast %"class.std::__1::unique_ptr"* %922 to i64*
  store i64 %926, i64* %929, align 8
  %930 = icmp eq i8* %928, null
  br i1 %930, label %932, label %931

931:                                              ; preds = %917
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %928) #8
  br label %932

932:                                              ; preds = %931, %917
  %933 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %35, i64 0, i32 0, i64 2
  %934 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %28, i64 0, i32 0, i64 2
  %935 = bitcast %"class.jxl::Plane"* %934 to i8*
  %936 = bitcast %"class.jxl::Plane"* %933 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %935, i8* align 8 %936, i64 24, i1 false) #8
  %937 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %28, i64 0, i32 0, i64 2, i32 0, i32 5
  %938 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %35, i64 0, i32 0, i64 2, i32 0, i32 5
  %939 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %938, i64 0, i32 0, i32 0, i32 0
  %940 = bitcast %"class.std::__1::unique_ptr"* %938 to i64*
  %941 = load i64, i64* %940, align 8
  store i8* null, i8** %939, align 8
  %942 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %937, i64 0, i32 0, i32 0, i32 0
  %943 = load i8*, i8** %942, align 8
  %944 = bitcast %"class.std::__1::unique_ptr"* %937 to i64*
  store i64 %941, i64* %944, align 8
  %945 = icmp eq i8* %943, null
  br i1 %945, label %946, label %948

946:                                              ; preds = %932
  %947 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %35, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %947, align 8
  br label %954

948:                                              ; preds = %932
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %943) #8
  %949 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %35, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %950 = load i8*, i8** %949, align 8
  %951 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %35, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %951, align 8
  %952 = icmp eq i8* %950, null
  br i1 %952, label %954, label %953

953:                                              ; preds = %948
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %950) #8
  br label %954

954:                                              ; preds = %946, %953, %948
  %955 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %35, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %956 = load i8*, i8** %955, align 8
  store i8* null, i8** %955, align 8
  %957 = icmp eq i8* %956, null
  br i1 %957, label %959, label %958

958:                                              ; preds = %954
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %956) #8
  br label %959

959:                                              ; preds = %958, %954
  %960 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %35, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %961 = load i8*, i8** %960, align 8
  store i8* null, i8** %960, align 8
  %962 = icmp eq i8* %961, null
  br i1 %962, label %964, label %963

963:                                              ; preds = %959
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %961) #8
  br label %964

964:                                              ; preds = %959, %963
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %855) #8
  %965 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %183, align 8
  %966 = icmp eq %"struct.jxl::jpeg::JPEGData"* %965, null
  br i1 %966, label %967, label %980

967:                                              ; preds = %964
  %968 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 10, i32 0, i64 0, i32 0, i32 0
  %969 = load i32, i32* %968, align 8
  %970 = icmp eq i32 %969, 0
  br i1 %970, label %971, label %987

971:                                              ; preds = %967
  %972 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 12, i32 0, i32 0
  %973 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %972, align 8
  %974 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 12, i32 0, i32 1
  %975 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %974, align 8
  %976 = icmp eq %"class.jxl::Plane"* %973, %975
  br i1 %976, label %987, label %977

977:                                              ; preds = %971
  %978 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %973, i64 0, i32 0, i32 0
  %979 = load i32, i32* %978, align 8
  br label %987

980:                                              ; preds = %964
  %981 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %965, i64 0, i32 1
  %982 = load i32, i32* %981, align 8
  %983 = sext i32 %982 to i64
  %984 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %965, i64 0, i32 2
  %985 = load i32, i32* %984, align 4
  %986 = sext i32 %985 to i64
  br label %1004

987:                                              ; preds = %967, %971, %977
  %988 = phi i32 [ %969, %967 ], [ 0, %971 ], [ %979, %977 ]
  %989 = zext i32 %988 to i64
  %990 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 10, i32 0, i64 0, i32 0, i32 1
  %991 = load i32, i32* %990, align 4
  %992 = zext i32 %991 to i64
  %993 = icmp eq i32 %991, 0
  br i1 %993, label %994, label %1004

994:                                              ; preds = %987
  %995 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 12, i32 0, i32 0
  %996 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %995, align 8
  %997 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 12, i32 0, i32 1
  %998 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %997, align 8
  %999 = icmp eq %"class.jxl::Plane"* %996, %998
  br i1 %999, label %1004, label %1000

1000:                                             ; preds = %994
  %1001 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %996, i64 0, i32 0, i32 1
  %1002 = load i32, i32* %1001, align 4
  %1003 = zext i32 %1002 to i64
  br label %1004

1004:                                             ; preds = %980, %987, %994, %1000
  %1005 = phi i64 [ %983, %980 ], [ %989, %1000 ], [ %989, %994 ], [ %989, %987 ]
  %1006 = phi i64 [ %986, %980 ], [ %1003, %1000 ], [ 0, %994 ], [ %992, %987 ]
  %1007 = trunc i64 %1005 to i32
  %1008 = trunc i64 %1006 to i32
  %1009 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %28, i64 0, i32 0, i64 0, i32 0, i32 2
  %1010 = load i32, i32* %1009, align 8
  %1011 = zext i32 %1010 to i64
  %1012 = icmp ugt i64 %1005, %1011
  br i1 %1012, label %1013, label %1016

1013:                                             ; preds = %1036, %1024, %1004
  %1014 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.37, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.63, i64 0, i64 0), i32 63, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.64, i64 0, i64 0)) #8
  %1015 = call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

1016:                                             ; preds = %1004
  %1017 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %28, i64 0, i32 0, i64 0, i32 0, i32 3
  %1018 = load i32, i32* %1017, align 4
  %1019 = zext i32 %1018 to i64
  %1020 = icmp ugt i64 %1006, %1019
  br i1 %1020, label %1021, label %1024

1021:                                             ; preds = %1043, %1031, %1016
  %1022 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.37, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.63, i64 0, i64 0), i32 64, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.65, i64 0, i64 0)) #8
  %1023 = call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

1024:                                             ; preds = %1016
  %1025 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %28, i64 0, i32 0, i64 0, i32 0, i32 0
  store i32 %1007, i32* %1025, align 8
  %1026 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %28, i64 0, i32 0, i64 0, i32 0, i32 1
  store i32 %1008, i32* %1026, align 4
  %1027 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %28, i64 0, i32 0, i64 1, i32 0, i32 2
  %1028 = load i32, i32* %1027, align 8
  %1029 = zext i32 %1028 to i64
  %1030 = icmp ugt i64 %1005, %1029
  br i1 %1030, label %1013, label %1031

1031:                                             ; preds = %1024
  %1032 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %28, i64 0, i32 0, i64 1, i32 0, i32 3
  %1033 = load i32, i32* %1032, align 4
  %1034 = zext i32 %1033 to i64
  %1035 = icmp ugt i64 %1006, %1034
  br i1 %1035, label %1021, label %1036

1036:                                             ; preds = %1031
  %1037 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %28, i64 0, i32 0, i64 1, i32 0, i32 0
  store i32 %1007, i32* %1037, align 8
  %1038 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %28, i64 0, i32 0, i64 1, i32 0, i32 1
  store i32 %1008, i32* %1038, align 4
  %1039 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %28, i64 0, i32 0, i64 2, i32 0, i32 2
  %1040 = load i32, i32* %1039, align 8
  %1041 = zext i32 %1040 to i64
  %1042 = icmp ugt i64 %1005, %1041
  br i1 %1042, label %1013, label %1043

1043:                                             ; preds = %1036
  %1044 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %28, i64 0, i32 0, i64 2, i32 0, i32 3
  %1045 = load i32, i32* %1044, align 4
  %1046 = zext i32 %1045 to i64
  %1047 = icmp ugt i64 %1006, %1046
  br i1 %1047, label %1021, label %1048

1048:                                             ; preds = %1043
  %1049 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %28, i64 0, i32 0, i64 2, i32 0, i32 0
  store i32 %1007, i32* %1049, align 8
  %1050 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %28, i64 0, i32 0, i64 2, i32 0, i32 1
  store i32 %1008, i32* %1050, align 4
  %1051 = load %"struct.jxl::FrameHeader"*, %"struct.jxl::FrameHeader"** %246, align 8
  %1052 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1051, i64 0, i32 2
  %1053 = load i32, i32* %1052, align 4
  %1054 = icmp eq i32 %1053, 0
  %1055 = load i32, i32* %388, align 4
  %1056 = icmp slt i32 %1055, 3
  %1057 = and i1 %1054, %1056
  %1058 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1051, i64 0, i32 5
  %1059 = load i32, i32* %1058, align 8
  %1060 = icmp eq i32 %1059, 0
  br i1 %1060, label %1061, label %1068

1061:                                             ; preds = %1048
  %1062 = getelementptr inbounds %"struct.jxl::FrameInfo", %"struct.jxl::FrameInfo"* %1, i64 0, i32 1
  %1063 = load i8, i8* %1062, align 1, !range !2
  %1064 = icmp eq i8 %1063, 0
  br i1 %1064, label %1068, label %1065

1065:                                             ; preds = %1061
  %1066 = select i1 %1057, %"class.jxl::ImageBundle"* %29, %"class.jxl::ImageBundle"* null
  %1067 = call %"class.jxl::ImageBundle"* @_ZN3jxl5ToXYBERKNS_11ImageBundleEPNS_10ThreadPoolEPNS_6Image3IfEEPS0_(%"class.jxl::ImageBundle"* dereferenceable(368) %3, %"class.jxl::ThreadPool"* %5, %"class.jxl::Image3"* nonnull %28, %"class.jxl::ImageBundle"* %1066) #8
  br label %1081

1068:                                             ; preds = %1061, %1048
  %1069 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 10
  %1070 = bitcast %"class.jxl::Rect"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1070) #8, !noalias !14
  %1071 = bitcast %"class.jxl::Image3"* %1069 to <2 x i32>*
  %1072 = load <2 x i32>, <2 x i32>* %1071, align 8, !noalias !14
  %1073 = zext <2 x i32> %1072 to <2 x i64>
  %1074 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %18, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1070, i8 0, i64 16, i1 false) #8, !noalias !14
  %1075 = bitcast i64* %1074 to <2 x i64>*
  store <2 x i64> %1073, <2 x i64>* %1075, align 8, !noalias !14
  %1076 = bitcast %"class.jxl::Rect"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1076) #8, !noalias !14
  %1077 = and i64 %1005, 4294967295
  %1078 = and i64 %1006, 4294967295
  %1079 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %19, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1076, i8 0, i64 16, i1 false) #8, !noalias !14
  store i64 %1077, i64* %1079, align 8, !noalias !14
  %1080 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %19, i64 0, i32 3
  store i64 %1078, i64* %1080, align 8, !noalias !14
  call void @_ZN3jxl11CopyImageToIfEEvRKNS_4RectERKNS_6Image3IT_EES3_PS6_(%"class.jxl::Rect"* nonnull dereferenceable(32) %18, %"class.jxl::Image3"* dereferenceable(96) %1069, %"class.jxl::Rect"* nonnull dereferenceable(32) %19, %"class.jxl::Image3"* nonnull %28) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1076) #8, !noalias !14
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1070) #8, !noalias !14
  br label %1081

1081:                                             ; preds = %1068, %1065
  %1082 = phi %"class.jxl::ImageBundle"* [ %1067, %1065 ], [ %3, %1068 ]
  %1083 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 9
  %1084 = load %"struct.jxl::ImageMetadata"*, %"struct.jxl::ImageMetadata"** %1083, align 8
  %1085 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %1084, i64 0, i32 17, i32 0, i32 0
  %1086 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %1085, align 8
  %1087 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %1084, i64 0, i32 17, i32 0, i32 1
  %1088 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %1087, align 8
  %1089 = icmp eq %"struct.jxl::ExtraChannelInfo"* %1086, %1088
  br i1 %1089, label %1136, label %1092

1090:                                             ; preds = %1092
  %1091 = icmp eq %"struct.jxl::ExtraChannelInfo"* %1097, %1088
  br i1 %1091, label %1136, label %1092

1092:                                             ; preds = %1081, %1090
  %1093 = phi %"struct.jxl::ExtraChannelInfo"* [ %1097, %1090 ], [ %1086, %1081 ]
  %1094 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %1093, i64 0, i32 2
  %1095 = load i32, i32* %1094, align 4
  %1096 = icmp eq i32 %1095, 0
  %1097 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %1093, i64 1
  br i1 %1096, label %1098, label %1090

1098:                                             ; preds = %1092
  %1099 = icmp eq %"struct.jxl::ExtraChannelInfo"* %1093, null
  br i1 %1099, label %1136, label %1102

1100:                                             ; preds = %1102
  %1101 = icmp eq %"struct.jxl::ExtraChannelInfo"* %1107, %1088
  br i1 %1101, label %1114, label %1102

1102:                                             ; preds = %1098, %1100
  %1103 = phi %"struct.jxl::ExtraChannelInfo"* [ %1107, %1100 ], [ %1086, %1098 ]
  %1104 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %1103, i64 0, i32 2
  %1105 = load i32, i32* %1104, align 4
  %1106 = icmp eq i32 %1105, 0
  %1107 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %1103, i64 1
  br i1 %1106, label %1108, label %1100

1108:                                             ; preds = %1102
  %1109 = icmp eq %"struct.jxl::ExtraChannelInfo"* %1103, null
  br i1 %1109, label %1114, label %1110

1110:                                             ; preds = %1108
  %1111 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %1103, i64 0, i32 6
  %1112 = load i8, i8* %1111, align 8, !range !2
  %1113 = icmp eq i8 %1112, 0
  br i1 %1113, label %1114, label %1136

1114:                                             ; preds = %1100, %1110, %1108
  %1115 = load %"struct.jxl::FrameHeader"*, %"struct.jxl::FrameHeader"** %246, align 8
  %1116 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1115, i64 0, i32 2
  %1117 = load i32, i32* %1116, align 4
  %1118 = icmp eq i32 %1117, 0
  br i1 %1118, label %1123, label %1119

1119:                                             ; preds = %1114
  %1120 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %23, i64 0, i32 41, i32 0
  %1121 = load float, float* %1120, align 4
  %1122 = fcmp olt float %1121, 1.000000e+02
  br i1 %1122, label %1123, label %1136

1123:                                             ; preds = %1119, %1114
  %1124 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %23, i64 0, i32 27
  %1125 = load i8, i8* %1124, align 4, !range !2
  %1126 = icmp eq i8 %1125, 0
  br i1 %1126, label %1127, label %1136

1127:                                             ; preds = %1123
  %1128 = load i64, i64* %144, align 8
  %1129 = load i64, i64* %146, align 8
  %1130 = icmp eq i64 %1128, %1129
  br i1 %1130, label %1131, label %1136

1131:                                             ; preds = %1127
  %1132 = call dereferenceable(32) %"class.jxl::Plane"* @_ZNK3jxl11ImageBundle5alphaEv(%"class.jxl::ImageBundle"* %3) #8
  call fastcc void @_ZN3jxl12_GLOBAL__N_117SimplifyInvisibleEPNS_6Image3IfEERKNS_5PlaneIfEE(%"class.jxl::Image3"* nonnull %28, %"class.jxl::Plane"* dereferenceable(32) %1132)
  br i1 %1057, label %1133, label %1136

1133:                                             ; preds = %1131
  %1134 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1082, i64 0, i32 10
  %1135 = call dereferenceable(32) %"class.jxl::Plane"* @_ZNK3jxl11ImageBundle5alphaEv(%"class.jxl::ImageBundle"* %3) #8
  call fastcc void @_ZN3jxl12_GLOBAL__N_117SimplifyInvisibleEPNS_6Image3IfEERKNS_5PlaneIfEE(%"class.jxl::Image3"* %1134, %"class.jxl::Plane"* dereferenceable(32) %1135)
  br label %1136

1136:                                             ; preds = %1090, %1110, %1098, %1081, %1123, %1131, %1133, %1127, %1119
  %1137 = load %"struct.jxl::AuxOut"*, %"struct.jxl::AuxOut"** %22, align 8
  %1138 = icmp eq %"struct.jxl::AuxOut"* %1137, null
  br i1 %1138, label %1150, label %1139

1139:                                             ; preds = %1136
  %1140 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %1137, i64 0, i32 17, i32 0, i32 2
  %1141 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %1140, align 8
  %1142 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %1141, i64 0, i32 2
  %1143 = load i8, i8* %1142, align 8, !range !2
  %1144 = icmp eq i8 %1143, 0
  br i1 %1144, label %1145, label %1150

1145:                                             ; preds = %1139
  %1146 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %1137, i64 0, i32 17, i32 0, i32 1, i32 0
  %1147 = load i1 (%"union.std::__1::__function::__policy_storage"*, i8*, %"class.jxl::Image3"*)*, i1 (%"union.std::__1::__function::__policy_storage"*, i8*, %"class.jxl::Image3"*)** %1146, align 8
  %1148 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %1137, i64 0, i32 17, i32 0, i32 0
  %1149 = call zeroext i1 %1147(%"union.std::__1::__function::__policy_storage"* %1148, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.12, i64 0, i64 0), %"class.jxl::Image3"* nonnull dereferenceable(96) %28) #8
  br i1 %1149, label %1150, label %2120

1150:                                             ; preds = %1139, %1136, %1145
  %1151 = load %"struct.jxl::FrameHeader"*, %"struct.jxl::FrameHeader"** %246, align 8
  %1152 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1151, i64 0, i32 2
  %1153 = load i32, i32* %1152, align 4
  %1154 = icmp eq i32 %1153, 0
  br i1 %1154, label %1155, label %1160

1155:                                             ; preds = %1150
  call void @_ZN3jxl30PadImageToBlockMultipleInPlaceEPNS_6Image3IfEE(%"class.jxl::Image3"* nonnull %28) #8
  %1156 = load %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ModularFrameEncoder"** %824, align 8
  %1157 = load %"struct.jxl::FrameHeader"*, %"struct.jxl::FrameHeader"** %246, align 8
  %1158 = call i32 @_ZN3jxl17LossyFrameEncoder19ComputeEncodingDataEPKNS_11ImageBundleEPNS_6Image3IfEEPNS_10ThreadPoolEPNS_19ModularFrameEncoderEPNS_9BitWriterEPNS_11FrameHeaderE(%"class.jxl::LossyFrameEncoder"* nonnull %32, %"class.jxl::ImageBundle"* %1082, %"class.jxl::Image3"* nonnull %28, %"class.jxl::ThreadPool"* %5, %"class.jxl::ModularFrameEncoder"* %1156, %"struct.jxl::BitWriter"* %6, %"struct.jxl::FrameHeader"* %1157)
  %1159 = icmp eq i32 %1158, 0
  br i1 %1159, label %1170, label %2120

1160:                                             ; preds = %1150
  %1161 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1151, i64 0, i32 15
  %1162 = load i32, i32* %1161, align 4
  %1163 = icmp eq i32 %1162, 1
  br i1 %1163, label %1170, label %1164

1164:                                             ; preds = %1160
  %1165 = zext i32 %1162 to i64
  call void @_ZN3jxl15DownsampleImageEPNS_6Image3IfEEm(%"class.jxl::Image3"* nonnull %28, i64 %1165) #8
  br label %1170

1166:                                             ; preds = %849
  %1167 = load %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ModularFrameEncoder"** %824, align 8
  %1168 = call i32 @_ZN3jxl17LossyFrameEncoder19ComputeEncodingDataEPKNS_11ImageBundleEPNS_6Image3IfEEPNS_10ThreadPoolEPNS_19ModularFrameEncoderEPNS_9BitWriterEPNS_11FrameHeaderE(%"class.jxl::LossyFrameEncoder"* nonnull %32, %"class.jxl::ImageBundle"* %3, %"class.jxl::Image3"* nonnull %28, %"class.jxl::ThreadPool"* %5, %"class.jxl::ModularFrameEncoder"* %1167, %"struct.jxl::BitWriter"* %6, %"struct.jxl::FrameHeader"* %850)
  %1169 = icmp eq i32 %1168, 0
  br i1 %1169, label %1170, label %2120

1170:                                             ; preds = %1160, %1164, %1155, %1166, %836
  %1171 = load i64, i64* %144, align 8
  %1172 = icmp eq i64 %1171, 1
  br i1 %1172, label %1217, label %1173

1173:                                             ; preds = %1170
  %1174 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 12, i32 0, i32 1
  %1175 = bitcast %"class.jxl::Plane"** %1174 to i64*
  %1176 = load i64, i64* %1175, align 8
  %1177 = bitcast %"class.std::__1::vector.85"* %829 to i64*
  %1178 = load i64, i64* %1177, align 8
  %1179 = icmp eq i64 %1176, %1178
  br i1 %1179, label %1217, label %1180

1180:                                             ; preds = %1173
  %1181 = bitcast %"class.jxl::Plane"* %36 to i8*
  %1182 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %36, i64 0, i32 0, i32 5
  %1183 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %1182, i64 0, i32 0, i32 0, i32 0
  %1184 = bitcast %"class.std::__1::unique_ptr"* %1182 to i64*
  %1185 = bitcast %"class.jxl::Plane"** %832 to i64*
  %1186 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %36, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %1187

1187:                                             ; preds = %1180, %1207
  %1188 = phi i64 [ %1178, %1180 ], [ %1213, %1207 ]
  %1189 = phi i64 [ 0, %1180 ], [ %1211, %1207 ]
  %1190 = inttoptr i64 %1188 to %"class.jxl::Plane"*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1181) #8
  %1191 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1190, i64 %1189
  call void @_ZN3jxl9CopyImageIfEENS_5PlaneIT_EERKS3_(%"class.jxl::Plane"* nonnull sret %36, %"class.jxl::Plane"* dereferenceable(32) %1191)
  %1192 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %832, align 8
  %1193 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %833, align 8
  %1194 = icmp ult %"class.jxl::Plane"* %1192, %1193
  br i1 %1194, label %1195, label %1202

1195:                                             ; preds = %1187
  %1196 = bitcast %"class.jxl::Plane"* %1192 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1196, i8* nonnull align 8 %1181, i64 24, i1 false) #8
  %1197 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1192, i64 0, i32 0, i32 5
  %1198 = load i64, i64* %1184, align 8
  store i8* null, i8** %1183, align 8
  %1199 = bitcast %"class.std::__1::unique_ptr"* %1197 to i64*
  store i64 %1198, i64* %1199, align 8
  %1200 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1192, i64 1
  %1201 = ptrtoint %"class.jxl::Plane"* %1200 to i64
  store i64 %1201, i64* %1185, align 8
  br label %1203

1202:                                             ; preds = %1187
  call void @_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJS3_EEEvDpOT_(%"class.std::__1::vector.85"* nonnull %34, %"class.jxl::Plane"* nonnull dereferenceable(32) %36) #8
  br label %1203

1203:                                             ; preds = %1195, %1202
  %1204 = load i8*, i8** %1186, align 8
  store i8* null, i8** %1186, align 8
  %1205 = icmp eq i8* %1204, null
  br i1 %1205, label %1207, label %1206

1206:                                             ; preds = %1203
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1204) #8
  br label %1207

1207:                                             ; preds = %1203, %1206
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1181) #8
  %1208 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %832, align 8
  %1209 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1208, i64 -1
  %1210 = load i64, i64* %144, align 8
  call void @_ZN3jxl15DownsampleImageEPNS_5PlaneIfEEm(%"class.jxl::Plane"* %1209, i64 %1210) #8
  %1211 = add nuw i64 %1189, 1
  %1212 = load i64, i64* %1175, align 8
  %1213 = load i64, i64* %1177, align 8
  %1214 = sub i64 %1212, %1213
  %1215 = ashr exact i64 %1214, 5
  %1216 = icmp ult i64 %1211, %1215
  br i1 %1216, label %1187, label %1217

1217:                                             ; preds = %1207, %1173, %1170
  %1218 = phi %"class.std::__1::vector.85"* [ %829, %1170 ], [ %34, %1173 ], [ %34, %1207 ]
  %1219 = load %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ModularFrameEncoder"** %824, align 8
  %1220 = load %"struct.jxl::FrameHeader"*, %"struct.jxl::FrameHeader"** %246, align 8
  %1221 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 9
  %1222 = load %"struct.jxl::ImageMetadata"*, %"struct.jxl::ImageMetadata"** %1221, align 8
  %1223 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %817, align 8
  %1224 = load %"struct.jxl::AuxOut"*, %"struct.jxl::AuxOut"** %22, align 8
  %1225 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1220, i64 0, i32 2
  %1226 = load i32, i32* %1225, align 4
  %1227 = icmp eq i32 %1226, 1
  %1228 = call i32 @_ZN3jxl19ModularFrameEncoder19ComputeEncodingDataERKNS_11FrameHeaderERKNS_13ImageMetadataEPNS_6Image3IfEERKNSt3__16vectorINS_5PlaneIfEENSA_9allocatorISD_EEEEPNS_18PassesEncoderStateEPNS_10ThreadPoolEPNS_6AuxOutEb(%"class.jxl::ModularFrameEncoder"* %1219, %"struct.jxl::FrameHeader"* dereferenceable(576) %1220, %"struct.jxl::ImageMetadata"* dereferenceable(1600) %1222, %"class.jxl::Image3"* nonnull %28, %"class.std::__1::vector.85"* dereferenceable(24) %1218, %"struct.jxl::PassesEncoderState"* %1223, %"class.jxl::ThreadPool"* %5, %"struct.jxl::AuxOut"* %1224, i1 zeroext %1227) #8
  %1229 = icmp eq i32 %1228, 0
  br i1 %1229, label %1230, label %2120

1230:                                             ; preds = %1217
  %1231 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %817, align 8
  %1232 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1231, i64 0, i32 4
  call void @_ZN3jxl9BitWriter17AppendByteAlignedERKNSt3__16vectorINS1_10unique_ptrIS0_NS1_14default_deleteIS0_EEEENS1_9allocatorIS6_EEEE(%"struct.jxl::BitWriter"* %6, %"class.std::__1::vector.191"* dereferenceable(24) %1232) #8
  %1233 = load %"struct.jxl::FrameHeader"*, %"struct.jxl::FrameHeader"** %246, align 8
  %1234 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %817, align 8
  %1235 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1234, i64 0, i32 0, i32 9, i32 1, i32 1, i32 0, i32 0
  %1236 = load %"struct.jxl::PatchPosition"*, %"struct.jxl::PatchPosition"** %1235, align 8
  %1237 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1234, i64 0, i32 0, i32 9, i32 1, i32 1, i32 0, i32 1
  %1238 = load %"struct.jxl::PatchPosition"*, %"struct.jxl::PatchPosition"** %1237, align 8
  %1239 = icmp eq %"struct.jxl::PatchPosition"* %1236, %1238
  %1240 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1233, i64 0, i32 4
  %1241 = load i64, i64* %1240, align 8
  %1242 = and i64 %1241, -3
  %1243 = or i64 %1241, 2
  %1244 = select i1 %1239, i64 %1242, i64 %1243
  store i64 %1244, i64* %1240, align 8
  %1245 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1234, i64 0, i32 0, i32 9, i32 2, i32 1, i32 0, i32 0
  %1246 = load %"class.jxl::QuantizedSpline"*, %"class.jxl::QuantizedSpline"** %1245, align 8
  %1247 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1234, i64 0, i32 0, i32 9, i32 2, i32 1, i32 0, i32 1
  %1248 = load %"class.jxl::QuantizedSpline"*, %"class.jxl::QuantizedSpline"** %1247, align 8
  %1249 = icmp eq %"class.jxl::QuantizedSpline"* %1246, %1248
  %1250 = and i64 %1244, -17
  %1251 = or i64 %1244, 16
  %1252 = select i1 %1249, i64 %1250, i64 %1251
  store i64 %1252, i64* %1240, align 8
  %1253 = load %"struct.jxl::AuxOut"*, %"struct.jxl::AuxOut"** %22, align 8
  %1254 = call i32 @_ZN3jxl16WriteFrameHeaderERKNS_11FrameHeaderEPNS_9BitWriterEPNS_6AuxOutE(%"struct.jxl::FrameHeader"* dereferenceable(576) %1233, %"struct.jxl::BitWriter"* %6, %"struct.jxl::AuxOut"* %1253) #8
  %1255 = icmp eq i32 %1254, 0
  br i1 %1255, label %1256, label %2120

1256:                                             ; preds = %1230
  %1257 = bitcast i64* %37 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1257) #8
  %1258 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %21, align 8
  %1259 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1258, i64 0, i32 5, i32 0, i32 0
  %1260 = load i64, i64* %1259, align 8
  store i64 %1260, i64* %37, align 8
  %1261 = bitcast %"class.std::__1::vector.366"* %38 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1261) #8
  %1262 = getelementptr inbounds %"class.std::__1::vector.366", %"class.std::__1::vector.366"* %38, i64 0, i32 0, i32 0
  %1263 = getelementptr inbounds %"class.std::__1::vector.366", %"class.std::__1::vector.366"* %38, i64 0, i32 0, i32 1
  %1264 = getelementptr inbounds %"class.std::__1::vector.366", %"class.std::__1::vector.366"* %38, i64 0, i32 0, i32 2, i32 0, i32 0
  %1265 = bitcast %"class.std::__1::vector.366"* %38 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1265, i8 -86, i64 24, i1 false)
  %1266 = load i64, i64* %725, align 8
  %1267 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %27, i64 0, i32 15
  %1268 = load i64, i64* %1267, align 8
  %1269 = icmp eq i64 %1266, 1
  %1270 = icmp eq i64 %1260, 1
  %1271 = and i1 %1270, %1269
  br i1 %1271, label %1272, label %1273

1272:                                             ; preds = %1256
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1261, i8 0, i64 24, i1 false) #8
  br label %1282

1273:                                             ; preds = %1256
  %1274 = add i64 %1268, 2
  %1275 = mul i64 %1266, %1260
  %1276 = add i64 %1274, %1275
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1261, i8 0, i64 24, i1 false) #8
  %1277 = icmp eq i64 %1276, 0
  br i1 %1277, label %1299, label %1278

1278:                                             ; preds = %1273
  %1279 = icmp ugt i64 %1276, 461168601842738790
  br i1 %1279, label %1280, label %1282

1280:                                             ; preds = %1278
  %1281 = bitcast %"class.std::__1::vector.366"* %38 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1281) #14
  unreachable

1282:                                             ; preds = %1272, %1278
  %1283 = phi i64 [ 1, %1272 ], [ %1276, %1278 ]
  %1284 = mul i64 %1283, 40
  %1285 = call i8* @_Znwm(i64 %1284) #13
  %1286 = bitcast i8* %1285 to %"struct.jxl::BitWriter"*
  %1287 = bitcast %"class.std::__1::vector.366"* %38 to i8**
  store i8* %1285, i8** %1287, align 16
  %1288 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %1286, i64 %1283
  store %"struct.jxl::BitWriter"* %1288, %"struct.jxl::BitWriter"** %1264, align 16
  %1289 = bitcast %"struct.jxl::BitWriter"** %1263 to i64*
  %1290 = ptrtoint i8* %1285 to i64
  %1291 = add nsw i64 %1283, -1
  %1292 = getelementptr %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %1286, i64 %1291, i32 0
  %1293 = ptrtoint i64* %1292 to i64
  %1294 = sub i64 %1293, %1290
  %1295 = urem i64 %1294, 40
  %1296 = add i64 %1294, 40
  %1297 = sub i64 %1296, %1295
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1285, i8 0, i64 %1297, i1 false) #8
  %1298 = ptrtoint %"struct.jxl::BitWriter"* %1288 to i64
  store i64 %1298, i64* %1289, align 8
  br label %1299

1299:                                             ; preds = %1273, %1282
  %1300 = phi %"struct.jxl::BitWriter"* [ null, %1273 ], [ %1286, %1282 ]
  %1301 = add i64 %1268, 1
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %39) #8
  %1302 = zext i1 %1271 to i8
  store i8 %1302, i8* %39, align 1
  %1303 = bitcast %class.anon.373* %40 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1303) #8
  %1304 = getelementptr inbounds %class.anon.373, %class.anon.373* %40, i64 0, i32 0
  %1305 = getelementptr inbounds %class.anon.373, %class.anon.373* %40, i64 0, i32 1
  store %"class.std::__1::vector.366"* %38, %"class.std::__1::vector.366"** %1304, align 8
  store i8* %39, i8** %1305, align 8
  %1306 = bitcast %class.anon.374* %41 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1306) #8
  %1307 = getelementptr inbounds %class.anon.374, %class.anon.374* %41, i64 0, i32 0
  %1308 = getelementptr inbounds %class.anon.374, %class.anon.374* %41, i64 0, i32 1
  store %class.anon.373* %40, %class.anon.373** %1307, align 8
  store %"struct.jxl::FrameDimensions"* %27, %"struct.jxl::FrameDimensions"** %1308, align 8
  %1309 = load %"struct.jxl::FrameHeader"*, %"struct.jxl::FrameHeader"** %246, align 8
  %1310 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1309, i64 0, i32 4
  %1311 = load i64, i64* %1310, align 8
  %1312 = and i64 %1311, 2
  %1313 = icmp eq i64 %1312, 0
  br i1 %1313, label %1321, label %1314

1314:                                             ; preds = %1299
  %1315 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %817, align 8
  %1316 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1315, i64 0, i32 0, i32 9, i32 1
  %1317 = load %"struct.jxl::AuxOut"*, %"struct.jxl::AuxOut"** %22, align 8
  call void @_ZN3jxl22PatchDictionaryEncoder6EncodeERKNS_15PatchDictionaryEPNS_9BitWriterEmPNS_6AuxOutE(%"class.jxl::PatchDictionary"* dereferenceable(80) %1316, %"struct.jxl::BitWriter"* %1300, i64 10, %"struct.jxl::AuxOut"* %1317) #8
  %1318 = load %"struct.jxl::FrameHeader"*, %"struct.jxl::FrameHeader"** %246, align 8
  %1319 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1318, i64 0, i32 4
  %1320 = load i64, i64* %1319, align 8
  br label %1321

1321:                                             ; preds = %1299, %1314
  %1322 = phi i64 [ %1311, %1299 ], [ %1320, %1314 ]
  %1323 = and i64 %1322, 16
  %1324 = icmp eq i64 %1323, 0
  br i1 %1324, label %1350, label %1325

1325:                                             ; preds = %1321
  %1326 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %817, align 8
  %1327 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1326, i64 0, i32 0, i32 9, i32 2
  %1328 = load %"class.std::__1::vector.366"*, %"class.std::__1::vector.366"** %1304, align 8
  %1329 = getelementptr inbounds %"class.std::__1::vector.366", %"class.std::__1::vector.366"* %1328, i64 0, i32 0, i32 0
  %1330 = load %"struct.jxl::BitWriter"*, %"struct.jxl::BitWriter"** %1329, align 8
  %1331 = bitcast %"struct.jxl::HistogramParams"* %42 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %1331) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1331, i8 0, i64 56, i1 false)
  %1332 = bitcast %"struct.jxl::HistogramParams"* %42 to <4 x i32>*
  store <4 x i32> <i32 2, i32 3, i32 1, i32 2>, <4 x i32>* %1332, align 16
  %1333 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %42, i64 0, i32 4
  %1334 = bitcast %"class.std::__1::vector.147"* %1333 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %1334, i8 0, i64 24, i1 false) #8
  %1335 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %42, i64 0, i32 5
  store i64 -1, i64* %1335, align 8
  %1336 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %42, i64 0, i32 6
  store i8 0, i8* %1336, align 16
  %1337 = load %"struct.jxl::AuxOut"*, %"struct.jxl::AuxOut"** %22, align 8
  call void @_ZN3jxl13EncodeSplinesERKNS_7SplinesEPNS_9BitWriterEmRKNS_15HistogramParamsEPNS_6AuxOutE(%"class.jxl::Splines"* dereferenceable(56) %1327, %"struct.jxl::BitWriter"* %1330, i64 12, %"struct.jxl::HistogramParams"* nonnull dereferenceable(56) %42, %"struct.jxl::AuxOut"* %1337) #8
  %1338 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %42, i64 0, i32 4, i32 0, i32 0
  %1339 = load i64*, i64** %1338, align 16
  %1340 = icmp eq i64* %1339, null
  br i1 %1340, label %1346, label %1341

1341:                                             ; preds = %1325
  %1342 = ptrtoint i64* %1339 to i64
  %1343 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %42, i64 0, i32 4, i32 0, i32 1
  %1344 = bitcast i64** %1343 to i64*
  store i64 %1342, i64* %1344, align 8
  %1345 = bitcast i64* %1339 to i8*
  call void @_ZdlPv(i8* %1345) #13
  br label %1346

1346:                                             ; preds = %1325, %1341
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %1331) #8
  %1347 = load %"struct.jxl::FrameHeader"*, %"struct.jxl::FrameHeader"** %246, align 8
  %1348 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1347, i64 0, i32 4
  %1349 = load i64, i64* %1348, align 8
  br label %1350

1350:                                             ; preds = %1321, %1346
  %1351 = phi i64 [ %1322, %1321 ], [ %1349, %1346 ]
  %1352 = and i64 %1351, 1
  %1353 = icmp eq i64 %1352, 0
  br i1 %1353, label %1361, label %1354

1354:                                             ; preds = %1350
  %1355 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %817, align 8
  %1356 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1355, i64 0, i32 0, i32 9, i32 0
  %1357 = load %"class.std::__1::vector.366"*, %"class.std::__1::vector.366"** %1304, align 8
  %1358 = getelementptr inbounds %"class.std::__1::vector.366", %"class.std::__1::vector.366"* %1357, i64 0, i32 0, i32 0
  %1359 = load %"struct.jxl::BitWriter"*, %"struct.jxl::BitWriter"** %1358, align 8
  %1360 = load %"struct.jxl::AuxOut"*, %"struct.jxl::AuxOut"** %22, align 8
  call void @_ZN3jxl11EncodeNoiseERKNS_11NoiseParamsEPNS_9BitWriterEmPNS_6AuxOutE(%"struct.jxl::NoiseParams"* dereferenceable(32) %1356, %"struct.jxl::BitWriter"* %1359, i64 2, %"struct.jxl::AuxOut"* %1360) #8
  br label %1361

1361:                                             ; preds = %1350, %1354
  %1362 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %817, align 8
  %1363 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1362, i64 0, i32 0, i32 4
  %1364 = load %"class.std::__1::vector.366"*, %"class.std::__1::vector.366"** %1304, align 8
  %1365 = getelementptr inbounds %"class.std::__1::vector.366", %"class.std::__1::vector.366"* %1364, i64 0, i32 0, i32 0
  %1366 = load %"struct.jxl::BitWriter"*, %"struct.jxl::BitWriter"** %1365, align 8
  %1367 = load %"struct.jxl::AuxOut"*, %"struct.jxl::AuxOut"** %22, align 8
  %1368 = call i32 @_ZN3jxl23DequantMatricesEncodeDCEPKNS_15DequantMatricesEPNS_9BitWriterEmPNS_6AuxOutE(%"class.jxl::DequantMatrices"* %1363, %"struct.jxl::BitWriter"* %1366, i64 4, %"struct.jxl::AuxOut"* %1367) #8
  %1369 = icmp eq i32 %1368, 0
  br i1 %1369, label %1370, label %2097

1370:                                             ; preds = %1361
  %1371 = load %"struct.jxl::FrameHeader"*, %"struct.jxl::FrameHeader"** %246, align 8
  %1372 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1371, i64 0, i32 2
  %1373 = load i32, i32* %1372, align 4
  %1374 = icmp eq i32 %1373, 0
  br i1 %1374, label %1375, label %1391

1375:                                             ; preds = %1370
  %1376 = load %"class.std::__1::vector.366"*, %"class.std::__1::vector.366"** %1304, align 8
  %1377 = getelementptr inbounds %"class.std::__1::vector.366", %"class.std::__1::vector.366"* %1376, i64 0, i32 0, i32 0
  %1378 = load %"struct.jxl::BitWriter"*, %"struct.jxl::BitWriter"** %1377, align 8
  %1379 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %817, align 8
  %1380 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1379, i64 0, i32 0, i32 5
  %1381 = load %"struct.jxl::AuxOut"*, %"struct.jxl::AuxOut"** %818, align 8
  %1382 = call i32 @_ZNK3jxl9Quantizer6EncodeEPNS_9BitWriterEmPNS_6AuxOutE(%"class.jxl::Quantizer"* %1380, %"struct.jxl::BitWriter"* %1378, i64 3, %"struct.jxl::AuxOut"* %1381) #8
  %1383 = icmp eq i32 %1382, 0
  br i1 %1383, label %1384, label %2097

1384:                                             ; preds = %1375
  %1385 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %817, align 8
  %1386 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1385, i64 0, i32 0, i32 15
  %1387 = load %"struct.jxl::AuxOut"*, %"struct.jxl::AuxOut"** %818, align 8
  call void @_ZN3jxl17EncodeBlockCtxMapERKNS_11BlockCtxMapEPNS_9BitWriterEPNS_6AuxOutE(%"struct.jxl::BlockCtxMap"* dereferenceable(136) %1386, %"struct.jxl::BitWriter"* %1378, %"struct.jxl::AuxOut"* %1387) #8
  %1388 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %817, align 8
  %1389 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1388, i64 0, i32 0, i32 8
  %1390 = load %"struct.jxl::AuxOut"*, %"struct.jxl::AuxOut"** %818, align 8
  call void @_ZN3jxl27ColorCorrelationMapEncodeDCEPNS_19ColorCorrelationMapEPNS_9BitWriterEmPNS_6AuxOutE(%"struct.jxl::ColorCorrelationMap"* %1389, %"struct.jxl::BitWriter"* %1378, i64 6, %"struct.jxl::AuxOut"* %1390) #8
  br label %1391

1391:                                             ; preds = %1384, %1370
  %1392 = load %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ModularFrameEncoder"** %824, align 8
  %1393 = load %"class.std::__1::vector.366"*, %"class.std::__1::vector.366"** %1304, align 8
  %1394 = getelementptr inbounds %"class.std::__1::vector.366", %"class.std::__1::vector.366"* %1393, i64 0, i32 0, i32 0
  %1395 = load %"struct.jxl::BitWriter"*, %"struct.jxl::BitWriter"** %1394, align 8
  %1396 = load %"struct.jxl::AuxOut"*, %"struct.jxl::AuxOut"** %22, align 8
  %1397 = call i32 @_ZN3jxl19ModularFrameEncoder16EncodeGlobalInfoEPNS_9BitWriterEPNS_6AuxOutE(%"class.jxl::ModularFrameEncoder"* %1392, %"struct.jxl::BitWriter"* %1395, %"struct.jxl::AuxOut"* %1396) #8
  %1398 = icmp eq i32 %1397, 0
  br i1 %1398, label %1399, label %2097

1399:                                             ; preds = %1391
  %1400 = load %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ModularFrameEncoder"** %824, align 8
  %1401 = load %"class.std::__1::vector.366"*, %"class.std::__1::vector.366"** %1304, align 8
  %1402 = getelementptr inbounds %"class.std::__1::vector.366", %"class.std::__1::vector.366"* %1401, i64 0, i32 0, i32 0
  %1403 = load %"struct.jxl::BitWriter"*, %"struct.jxl::BitWriter"** %1402, align 8
  %1404 = load %"struct.jxl::AuxOut"*, %"struct.jxl::AuxOut"** %22, align 8
  %1405 = bitcast %"struct.jxl::ModularStreamId"* %43 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1405) #8
  %1406 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %43, i64 0, i32 0
  store i32 0, i32* %1406, align 8, !alias.scope !17
  %1407 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %43, i64 0, i32 1
  %1408 = bitcast i64* %1407 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1408, i8 0, i64 24, i1 false) #8, !alias.scope !17
  %1409 = call i32 @_ZN3jxl19ModularFrameEncoder12EncodeStreamEPNS_9BitWriterEPNS_6AuxOutEmRKNS_15ModularStreamIdE(%"class.jxl::ModularFrameEncoder"* %1400, %"struct.jxl::BitWriter"* %1403, %"struct.jxl::AuxOut"* %1404, i64 14, %"struct.jxl::ModularStreamId"* nonnull dereferenceable(32) %43) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1405) #8
  %1410 = icmp eq i32 %1409, 0
  br i1 %1410, label %1411, label %2097

1411:                                             ; preds = %1399
  %1412 = bitcast %class.anon.375* %44 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %1412) #8
  %1413 = getelementptr inbounds %class.anon.375, %class.anon.375* %44, i64 0, i32 0
  %1414 = getelementptr inbounds %class.anon.375, %class.anon.375* %44, i64 0, i32 1
  %1415 = getelementptr inbounds %class.anon.375, %class.anon.375* %44, i64 0, i32 2
  %1416 = getelementptr inbounds %class.anon.375, %class.anon.375* %44, i64 0, i32 3
  %1417 = getelementptr inbounds %class.anon.375, %class.anon.375* %44, i64 0, i32 4
  %1418 = getelementptr inbounds %class.anon.375, %class.anon.375* %44, i64 0, i32 5
  store %"struct.jxl::AuxOut"** %22, %"struct.jxl::AuxOut"*** %1413, align 8
  store %"class.std::__1::vector.275"* %30, %"class.std::__1::vector.275"** %1414, align 8
  store %class.anon.373* %40, %class.anon.373** %1415, align 8
  store %"class.std::__1::unique_ptr.263"* %26, %"class.std::__1::unique_ptr.263"** %1416, align 8
  store %"class.std::__1::unique_ptr.295"* %33, %"class.std::__1::unique_ptr.295"** %1417, align 8
  store %"class.jxl::LossyFrameEncoder"* %32, %"class.jxl::LossyFrameEncoder"** %1418, align 8
  %1419 = load i64, i64* %1267, align 8
  %1420 = trunc i64 %1419 to i32
  %1421 = bitcast double* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1421) #8
  store double 0xFFFFFFFFFFFFFFFF, double* %11, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.22, i64 0, i64 0), double* nonnull %11) #8
  %1422 = icmp eq %"class.jxl::ThreadPool"* %5, null
  br i1 %1422, label %1423, label %1434

1423:                                             ; preds = %1411
  %1424 = bitcast %"class.jxl::ThreadPool"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1424) #8
  %1425 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %12, i64 0, i32 0
  %1426 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %12, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %1425, align 8
  %1427 = bitcast i8** %1426 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %12, %"class.jxl::ThreadPool"** %1427, align 8
  %1428 = icmp eq i32 %1420, 0
  br i1 %1428, label %1445, label %1429

1429:                                             ; preds = %1423
  %1430 = bitcast %"class.jxl::ThreadPool::RunCallState.464"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1430) #8
  %1431 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.464", %"class.jxl::ThreadPool::RunCallState.464"* %9, i64 0, i32 0
  %1432 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.464", %"class.jxl::ThreadPool::RunCallState.464"* %9, i64 0, i32 1
  store %"class.std::__1::function.282"* %31, %"class.std::__1::function.282"** %1431, align 8
  store %class.anon.375* %44, %class.anon.375** %1432, align 8
  %1433 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %1424, i8* nonnull %1430, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateINSt3__18functionIFNS_6StatusEmEEEZNS_11EncodeFrameERKNS_14CompressParamsERKNS_9FrameInfoEPKNS_13CodecMetadataERKNS_11ImageBundleEPNS_18PassesEncoderStateEPS0_PNS_9BitWriterEPNS_6AuxOutEE3$_2E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateINSt3__18functionIFNS_6StatusEmEEEZNS_11EncodeFrameERKNS_14CompressParamsERKNS_9FrameInfoEPKNS_13CodecMetadataERKNS_11ImageBundleEPNS_18PassesEncoderStateEPS0_PNS_9BitWriterEPNS_6AuxOutEE3$_2E12CallDataFuncEPvjm", i32 0, i32 %1420) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1430) #8
  br label %1445

1434:                                             ; preds = %1411
  %1435 = icmp eq i32 %1420, 0
  br i1 %1435, label %1447, label %1436

1436:                                             ; preds = %1434
  %1437 = bitcast %"class.jxl::ThreadPool::RunCallState.464"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1437) #8
  %1438 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.464", %"class.jxl::ThreadPool::RunCallState.464"* %10, i64 0, i32 0
  %1439 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.464", %"class.jxl::ThreadPool::RunCallState.464"* %10, i64 0, i32 1
  store %"class.std::__1::function.282"* %31, %"class.std::__1::function.282"** %1438, align 8
  store %class.anon.375* %44, %class.anon.375** %1439, align 8
  %1440 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %5, i64 0, i32 0
  %1441 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %1440, align 8
  %1442 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %5, i64 0, i32 1
  %1443 = load i8*, i8** %1442, align 8
  %1444 = call i32 %1441(i8* %1443, i8* nonnull %1437, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateINSt3__18functionIFNS_6StatusEmEEEZNS_11EncodeFrameERKNS_14CompressParamsERKNS_9FrameInfoEPKNS_13CodecMetadataERKNS_11ImageBundleEPNS_18PassesEncoderStateEPS0_PNS_9BitWriterEPNS_6AuxOutEE3$_2E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateINSt3__18functionIFNS_6StatusEmEEEZNS_11EncodeFrameERKNS_14CompressParamsERKNS_9FrameInfoEPKNS_13CodecMetadataERKNS_11ImageBundleEPNS_18PassesEncoderStateEPS0_PNS_9BitWriterEPNS_6AuxOutEE3$_2E12CallDataFuncEPvjm", i32 0, i32 %1420) #8
  br label %1445

1445:                                             ; preds = %1423, %1429, %1436
  %1446 = phi i8* [ %1437, %1436 ], [ %1424, %1429 ], [ %1424, %1423 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1446) #8
  br label %1447

1447:                                             ; preds = %1445, %1434
  %1448 = load double, double* %11, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.22, i64 0, i64 0), double %1448) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1421) #8
  %1449 = load %"struct.jxl::FrameHeader"*, %"struct.jxl::FrameHeader"** %246, align 8
  %1450 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1449, i64 0, i32 2
  %1451 = load i32, i32* %1450, align 4
  %1452 = icmp eq i32 %1451, 0
  br i1 %1452, label %1453, label %1465

1453:                                             ; preds = %1447
  %1454 = load %"class.std::__1::vector.366"*, %"class.std::__1::vector.366"** %1304, align 8
  %1455 = load i8*, i8** %1305, align 8
  %1456 = load i8, i8* %1455, align 1, !range !2
  %1457 = icmp eq i8 %1456, 0
  %1458 = select i1 %1457, i64 %1301, i64 0
  %1459 = getelementptr inbounds %"class.std::__1::vector.366", %"class.std::__1::vector.366"* %1454, i64 0, i32 0, i32 0
  %1460 = load %"struct.jxl::BitWriter"*, %"struct.jxl::BitWriter"** %1459, align 8
  %1461 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %1460, i64 %1458
  %1462 = load %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ModularFrameEncoder"** %824, align 8
  %1463 = call i32 @_ZN3jxl17LossyFrameEncoder18EncodeGlobalACInfoEPNS_9BitWriterEPNS_19ModularFrameEncoderE(%"class.jxl::LossyFrameEncoder"* nonnull %32, %"struct.jxl::BitWriter"* %1461, %"class.jxl::ModularFrameEncoder"* %1462)
  %1464 = icmp eq i32 %1463, 0
  br i1 %1464, label %1465, label %2095

1465:                                             ; preds = %1453, %1447
  %1466 = bitcast %"struct.std::__1::atomic"* %45 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1466) #8
  %1467 = getelementptr inbounds %"struct.std::__1::atomic", %"struct.std::__1::atomic"* %45, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 0, i32* %1467, align 4
  %1468 = bitcast %class.anon.377* %46 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %1468) #8
  %1469 = getelementptr inbounds %class.anon.377, %class.anon.377* %46, i64 0, i32 0
  store %"struct.jxl::AuxOut"** %22, %"struct.jxl::AuxOut"*** %1469, align 8
  %1470 = getelementptr inbounds %class.anon.377, %class.anon.377* %46, i64 0, i32 1
  store %"class.std::__1::vector.275"* %30, %"class.std::__1::vector.275"** %1470, align 8
  %1471 = getelementptr inbounds %class.anon.377, %class.anon.377* %46, i64 0, i32 2
  store i64* %37, i64** %1471, align 8
  %1472 = getelementptr inbounds %class.anon.377, %class.anon.377* %46, i64 0, i32 3
  store %"class.std::__1::unique_ptr.263"* %26, %"class.std::__1::unique_ptr.263"** %1472, align 8
  %1473 = getelementptr inbounds %class.anon.377, %class.anon.377* %46, i64 0, i32 4
  store %"class.jxl::LossyFrameEncoder"* %32, %"class.jxl::LossyFrameEncoder"** %1473, align 8
  %1474 = getelementptr inbounds %class.anon.377, %class.anon.377* %46, i64 0, i32 5
  store %class.anon.374* %41, %class.anon.374** %1474, align 8
  %1475 = getelementptr inbounds %class.anon.377, %class.anon.377* %46, i64 0, i32 6
  store %"struct.std::__1::atomic"* %45, %"struct.std::__1::atomic"** %1475, align 8
  %1476 = getelementptr inbounds %class.anon.377, %class.anon.377* %46, i64 0, i32 7
  store %"class.std::__1::unique_ptr.295"* %33, %"class.std::__1::unique_ptr.295"** %1476, align 8
  %1477 = trunc i64 %726 to i32
  %1478 = bitcast double* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1478) #8
  store double 0xFFFFFFFFFFFFFFFF, double* %15, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.24, i64 0, i64 0), double* nonnull %15) #8
  br i1 %1422, label %1479, label %1490

1479:                                             ; preds = %1465
  %1480 = bitcast %"class.jxl::ThreadPool"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1480) #8
  %1481 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %16, i64 0, i32 0
  %1482 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %16, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %1481, align 8
  %1483 = bitcast i8** %1482 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %16, %"class.jxl::ThreadPool"** %1483, align 8
  %1484 = icmp eq i32 %1477, 0
  br i1 %1484, label %1501, label %1485

1485:                                             ; preds = %1479
  %1486 = bitcast %"class.jxl::ThreadPool::RunCallState.465"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1486) #8
  %1487 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.465", %"class.jxl::ThreadPool::RunCallState.465"* %13, i64 0, i32 0
  %1488 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.465", %"class.jxl::ThreadPool::RunCallState.465"* %13, i64 0, i32 1
  store %"class.std::__1::function.282"* %31, %"class.std::__1::function.282"** %1487, align 8
  store %class.anon.377* %46, %class.anon.377** %1488, align 8
  %1489 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %1480, i8* nonnull %1486, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateINSt3__18functionIFNS_6StatusEmEEEZNS_11EncodeFrameERKNS_14CompressParamsERKNS_9FrameInfoEPKNS_13CodecMetadataERKNS_11ImageBundleEPNS_18PassesEncoderStateEPS0_PNS_9BitWriterEPNS_6AuxOutEE3$_3E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateINSt3__18functionIFNS_6StatusEmEEEZNS_11EncodeFrameERKNS_14CompressParamsERKNS_9FrameInfoEPKNS_13CodecMetadataERKNS_11ImageBundleEPNS_18PassesEncoderStateEPS0_PNS_9BitWriterEPNS_6AuxOutEE3$_3E12CallDataFuncEPvjm", i32 0, i32 %1477) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1486) #8
  br label %1501

1490:                                             ; preds = %1465
  %1491 = icmp eq i32 %1477, 0
  br i1 %1491, label %1503, label %1492

1492:                                             ; preds = %1490
  %1493 = bitcast %"class.jxl::ThreadPool::RunCallState.465"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1493) #8
  %1494 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.465", %"class.jxl::ThreadPool::RunCallState.465"* %14, i64 0, i32 0
  %1495 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.465", %"class.jxl::ThreadPool::RunCallState.465"* %14, i64 0, i32 1
  store %"class.std::__1::function.282"* %31, %"class.std::__1::function.282"** %1494, align 8
  store %class.anon.377* %46, %class.anon.377** %1495, align 8
  %1496 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %5, i64 0, i32 0
  %1497 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %1496, align 8
  %1498 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %5, i64 0, i32 1
  %1499 = load i8*, i8** %1498, align 8
  %1500 = call i32 %1497(i8* %1499, i8* nonnull %1493, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateINSt3__18functionIFNS_6StatusEmEEEZNS_11EncodeFrameERKNS_14CompressParamsERKNS_9FrameInfoEPKNS_13CodecMetadataERKNS_11ImageBundleEPNS_18PassesEncoderStateEPS0_PNS_9BitWriterEPNS_6AuxOutEE3$_3E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateINSt3__18functionIFNS_6StatusEmEEEZNS_11EncodeFrameERKNS_14CompressParamsERKNS_9FrameInfoEPKNS_13CodecMetadataERKNS_11ImageBundleEPNS_18PassesEncoderStateEPS0_PNS_9BitWriterEPNS_6AuxOutEE3$_3E12CallDataFuncEPvjm", i32 0, i32 %1477) #8
  br label %1501

1501:                                             ; preds = %1479, %1485, %1492
  %1502 = phi i8* [ %1493, %1492 ], [ %1480, %1485 ], [ %1480, %1479 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1502) #8
  br label %1503

1503:                                             ; preds = %1501, %1490
  %1504 = load double, double* %15, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.24, i64 0, i64 0), double %1504) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1478) #8
  %1505 = load i32 (%"union.std::__1::__function::__policy_storage"*, i64)*, i32 (%"union.std::__1::__function::__policy_storage"*, i64)** %810, align 8
  %1506 = getelementptr inbounds %"class.std::__1::function.282", %"class.std::__1::function.282"* %31, i64 0, i32 0, i32 0
  %1507 = call i32 %1505(%"union.std::__1::__function::__policy_storage"* nonnull %1506, i64 0) #8
  %1508 = load atomic i32, i32* %1467 monotonic, align 4
  %1509 = icmp eq i32 %1508, 0
  br i1 %1509, label %1510, label %2093

1510:                                             ; preds = %1503
  %1511 = load %"struct.jxl::BitWriter"*, %"struct.jxl::BitWriter"** %1262, align 16
  %1512 = load %"struct.jxl::BitWriter"*, %"struct.jxl::BitWriter"** %1263, align 8
  %1513 = icmp eq %"struct.jxl::BitWriter"* %1511, %1512
  br i1 %1513, label %1514, label %1522

1514:                                             ; preds = %1537, %1510
  %1515 = bitcast %"class.std::__1::vector"* %47 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1515) #8
  %1516 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %47, i64 0, i32 0, i32 0
  %1517 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %47, i64 0, i32 0, i32 1
  %1518 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %47, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1515, i8 0, i64 24, i1 false) #8
  %1519 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %23, i64 0, i32 25
  %1520 = load i8, i8* %1519, align 2, !range !2
  %1521 = icmp eq i8 %1520, 0
  br i1 %1521, label %2066, label %1540

1522:                                             ; preds = %1510, %1537
  %1523 = phi %"struct.jxl::BitWriter"* [ %1538, %1537 ], [ %1511, %1510 ]
  %1524 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %1523, i64 0, i32 0
  %1525 = load i64, i64* %1524, align 8
  %1526 = add i64 %1525, 7
  %1527 = and i64 %1526, -8
  %1528 = sub i64 %1527, %1525
  %1529 = icmp eq i64 %1528, 0
  br i1 %1529, label %1537, label %1530

1530:                                             ; preds = %1522
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %1523, i64 %1528, i64 0) #8
  %1531 = load i64, i64* %1524, align 8
  %1532 = and i64 %1531, 7
  %1533 = icmp eq i64 %1532, 0
  br i1 %1533, label %1537, label %1534

1534:                                             ; preds = %1530
  %1535 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.59, i64 0, i64 0), i32 133, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.60, i64 0, i64 0)) #8
  %1536 = call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

1537:                                             ; preds = %1522, %1530
  %1538 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %1523, i64 1
  %1539 = icmp eq %"struct.jxl::BitWriter"* %1538, %1512
  br i1 %1539, label %1514, label %1522

1540:                                             ; preds = %1514
  %1541 = load i64, i64* %37, align 8
  %1542 = icmp eq i64 %1541, 1
  %1543 = icmp eq i64 %726, 1
  %1544 = and i1 %1543, %1542
  br i1 %1544, label %2066, label %1545

1545:                                             ; preds = %1540
  %1546 = add i64 %1268, 2
  %1547 = bitcast i32** %1517 to i64*
  %1548 = bitcast %"class.std::__1::vector"* %47 to i64*
  %1549 = icmp eq i64 %1546, 0
  br i1 %1549, label %1635, label %1550

1550:                                             ; preds = %1545
  call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm(%"class.std::__1::vector"* nonnull %47, i64 %1546) #8
  %1551 = load i32*, i32** %1516, align 8
  %1552 = load i32*, i32** %1517, align 8
  %1553 = icmp eq i32* %1551, %1552
  br i1 %1553, label %1635, label %1554

1554:                                             ; preds = %1550
  %1555 = ptrtoint i32* %1551 to i64
  %1556 = getelementptr i32, i32* %1552, i64 -1
  %1557 = ptrtoint i32* %1556 to i64
  %1558 = sub i64 %1557, %1555
  %1559 = lshr i64 %1558, 2
  %1560 = add nuw nsw i64 %1559, 1
  %1561 = icmp ult i64 %1560, 8
  br i1 %1561, label %1626, label %1562

1562:                                             ; preds = %1554
  %1563 = and i64 %1560, 9223372036854775800
  %1564 = trunc i64 %1563 to i32
  %1565 = getelementptr i32, i32* %1551, i64 %1563
  %1566 = add nsw i64 %1563, -8
  %1567 = lshr exact i64 %1566, 3
  %1568 = add nuw nsw i64 %1567, 1
  %1569 = and i64 %1568, 3
  %1570 = icmp ult i64 %1566, 24
  br i1 %1570, label %1607, label %1571

1571:                                             ; preds = %1562
  %1572 = sub nsw i64 %1568, %1569
  br label %1573

1573:                                             ; preds = %1573, %1571
  %1574 = phi i64 [ 0, %1571 ], [ %1603, %1573 ]
  %1575 = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, %1571 ], [ %1604, %1573 ]
  %1576 = phi i64 [ %1572, %1571 ], [ %1605, %1573 ]
  %1577 = add <4 x i32> %1575, <i32 4, i32 4, i32 4, i32 4>
  %1578 = getelementptr i32, i32* %1551, i64 %1574
  %1579 = bitcast i32* %1578 to <4 x i32>*
  store <4 x i32> %1575, <4 x i32>* %1579, align 4
  %1580 = getelementptr i32, i32* %1578, i64 4
  %1581 = bitcast i32* %1580 to <4 x i32>*
  store <4 x i32> %1577, <4 x i32>* %1581, align 4
  %1582 = or i64 %1574, 8
  %1583 = add <4 x i32> %1575, <i32 8, i32 8, i32 8, i32 8>
  %1584 = add <4 x i32> %1575, <i32 12, i32 12, i32 12, i32 12>
  %1585 = getelementptr i32, i32* %1551, i64 %1582
  %1586 = bitcast i32* %1585 to <4 x i32>*
  store <4 x i32> %1583, <4 x i32>* %1586, align 4
  %1587 = getelementptr i32, i32* %1585, i64 4
  %1588 = bitcast i32* %1587 to <4 x i32>*
  store <4 x i32> %1584, <4 x i32>* %1588, align 4
  %1589 = or i64 %1574, 16
  %1590 = add <4 x i32> %1575, <i32 16, i32 16, i32 16, i32 16>
  %1591 = add <4 x i32> %1575, <i32 20, i32 20, i32 20, i32 20>
  %1592 = getelementptr i32, i32* %1551, i64 %1589
  %1593 = bitcast i32* %1592 to <4 x i32>*
  store <4 x i32> %1590, <4 x i32>* %1593, align 4
  %1594 = getelementptr i32, i32* %1592, i64 4
  %1595 = bitcast i32* %1594 to <4 x i32>*
  store <4 x i32> %1591, <4 x i32>* %1595, align 4
  %1596 = or i64 %1574, 24
  %1597 = add <4 x i32> %1575, <i32 24, i32 24, i32 24, i32 24>
  %1598 = add <4 x i32> %1575, <i32 28, i32 28, i32 28, i32 28>
  %1599 = getelementptr i32, i32* %1551, i64 %1596
  %1600 = bitcast i32* %1599 to <4 x i32>*
  store <4 x i32> %1597, <4 x i32>* %1600, align 4
  %1601 = getelementptr i32, i32* %1599, i64 4
  %1602 = bitcast i32* %1601 to <4 x i32>*
  store <4 x i32> %1598, <4 x i32>* %1602, align 4
  %1603 = add i64 %1574, 32
  %1604 = add <4 x i32> %1575, <i32 32, i32 32, i32 32, i32 32>
  %1605 = add i64 %1576, -4
  %1606 = icmp eq i64 %1605, 0
  br i1 %1606, label %1607, label %1573, !llvm.loop !20

1607:                                             ; preds = %1573, %1562
  %1608 = phi i64 [ 0, %1562 ], [ %1603, %1573 ]
  %1609 = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, %1562 ], [ %1604, %1573 ]
  %1610 = icmp eq i64 %1569, 0
  br i1 %1610, label %1624, label %1611

1611:                                             ; preds = %1607, %1611
  %1612 = phi i64 [ %1620, %1611 ], [ %1608, %1607 ]
  %1613 = phi <4 x i32> [ %1621, %1611 ], [ %1609, %1607 ]
  %1614 = phi i64 [ %1622, %1611 ], [ %1569, %1607 ]
  %1615 = add <4 x i32> %1613, <i32 4, i32 4, i32 4, i32 4>
  %1616 = getelementptr i32, i32* %1551, i64 %1612
  %1617 = bitcast i32* %1616 to <4 x i32>*
  store <4 x i32> %1613, <4 x i32>* %1617, align 4
  %1618 = getelementptr i32, i32* %1616, i64 4
  %1619 = bitcast i32* %1618 to <4 x i32>*
  store <4 x i32> %1615, <4 x i32>* %1619, align 4
  %1620 = add i64 %1612, 8
  %1621 = add <4 x i32> %1613, <i32 8, i32 8, i32 8, i32 8>
  %1622 = add i64 %1614, -1
  %1623 = icmp eq i64 %1622, 0
  br i1 %1623, label %1624, label %1611, !llvm.loop !22

1624:                                             ; preds = %1611, %1607
  %1625 = icmp eq i64 %1560, %1563
  br i1 %1625, label %1635, label %1626

1626:                                             ; preds = %1624, %1554
  %1627 = phi i32 [ 0, %1554 ], [ %1564, %1624 ]
  %1628 = phi i32* [ %1551, %1554 ], [ %1565, %1624 ]
  br label %1629

1629:                                             ; preds = %1626, %1629
  %1630 = phi i32 [ %1633, %1629 ], [ %1627, %1626 ]
  %1631 = phi i32* [ %1632, %1629 ], [ %1628, %1626 ]
  store i32 %1630, i32* %1631, align 4
  %1632 = getelementptr inbounds i32, i32* %1631, i64 1
  %1633 = add nuw nsw i32 %1630, 1
  %1634 = icmp eq i32* %1632, %1552
  br i1 %1634, label %1635, label %1629, !llvm.loop !24

1635:                                             ; preds = %1629, %1624, %1545, %1550
  %1636 = bitcast %"class.std::__1::vector"* %48 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1636) #8
  %1637 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %48, i64 0, i32 0, i32 0
  %1638 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %48, i64 0, i32 0, i32 1
  %1639 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %48, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1636, i8 0, i64 24, i1 false) #8
  %1640 = icmp eq i64 %726, 0
  br i1 %1640, label %1740, label %1641

1641:                                             ; preds = %1635
  %1642 = icmp ugt i64 %726, 4611686018427387903
  br i1 %1642, label %1643, label %1645

1643:                                             ; preds = %1641
  %1644 = bitcast %"class.std::__1::vector"* %48 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1644) #14
  unreachable

1645:                                             ; preds = %1641
  %1646 = shl i64 %726, 2
  %1647 = call i8* @_Znwm(i64 %1646) #13
  %1648 = bitcast i8* %1647 to i32*
  %1649 = bitcast %"class.std::__1::vector"* %48 to i8**
  store i8* %1647, i8** %1649, align 8
  %1650 = getelementptr inbounds i32, i32* %1648, i64 %726
  store i32* %1650, i32** %1639, align 8
  %1651 = bitcast i32** %1638 to i64*
  %1652 = ptrtoint i8* %1647 to i64
  %1653 = add nsw i64 %726, -1
  %1654 = getelementptr i32, i32* %1648, i64 %1653
  %1655 = ptrtoint i32* %1654 to i64
  %1656 = sub i64 4, %1652
  %1657 = add i64 %1656, %1655
  %1658 = and i64 %1657, -4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %1647, i8 0, i64 %1658, i1 false) #8
  %1659 = ptrtoint i32* %1650 to i64
  store i64 %1659, i64* %1651, align 8
  %1660 = icmp eq i32* %1650, %1648
  br i1 %1660, label %1740, label %1661

1661:                                             ; preds = %1645
  %1662 = shl nsw i64 %726, 2
  %1663 = add i64 %1662, -4
  %1664 = lshr exact i64 %1663, 2
  %1665 = add nuw nsw i64 %1664, 1
  %1666 = icmp ult i64 %1665, 8
  br i1 %1666, label %1731, label %1667

1667:                                             ; preds = %1661
  %1668 = and i64 %1665, 9223372036854775800
  %1669 = trunc i64 %1668 to i32
  %1670 = getelementptr i32, i32* %1648, i64 %1668
  %1671 = add nsw i64 %1668, -8
  %1672 = lshr exact i64 %1671, 3
  %1673 = add nuw nsw i64 %1672, 1
  %1674 = and i64 %1673, 3
  %1675 = icmp ult i64 %1671, 24
  br i1 %1675, label %1712, label %1676

1676:                                             ; preds = %1667
  %1677 = sub nsw i64 %1673, %1674
  br label %1678

1678:                                             ; preds = %1678, %1676
  %1679 = phi i64 [ 0, %1676 ], [ %1708, %1678 ]
  %1680 = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, %1676 ], [ %1709, %1678 ]
  %1681 = phi i64 [ %1677, %1676 ], [ %1710, %1678 ]
  %1682 = add <4 x i32> %1680, <i32 4, i32 4, i32 4, i32 4>
  %1683 = getelementptr i32, i32* %1648, i64 %1679
  %1684 = bitcast i32* %1683 to <4 x i32>*
  store <4 x i32> %1680, <4 x i32>* %1684, align 4
  %1685 = getelementptr i32, i32* %1683, i64 4
  %1686 = bitcast i32* %1685 to <4 x i32>*
  store <4 x i32> %1682, <4 x i32>* %1686, align 4
  %1687 = or i64 %1679, 8
  %1688 = add <4 x i32> %1680, <i32 8, i32 8, i32 8, i32 8>
  %1689 = add <4 x i32> %1680, <i32 12, i32 12, i32 12, i32 12>
  %1690 = getelementptr i32, i32* %1648, i64 %1687
  %1691 = bitcast i32* %1690 to <4 x i32>*
  store <4 x i32> %1688, <4 x i32>* %1691, align 4
  %1692 = getelementptr i32, i32* %1690, i64 4
  %1693 = bitcast i32* %1692 to <4 x i32>*
  store <4 x i32> %1689, <4 x i32>* %1693, align 4
  %1694 = or i64 %1679, 16
  %1695 = add <4 x i32> %1680, <i32 16, i32 16, i32 16, i32 16>
  %1696 = add <4 x i32> %1680, <i32 20, i32 20, i32 20, i32 20>
  %1697 = getelementptr i32, i32* %1648, i64 %1694
  %1698 = bitcast i32* %1697 to <4 x i32>*
  store <4 x i32> %1695, <4 x i32>* %1698, align 4
  %1699 = getelementptr i32, i32* %1697, i64 4
  %1700 = bitcast i32* %1699 to <4 x i32>*
  store <4 x i32> %1696, <4 x i32>* %1700, align 4
  %1701 = or i64 %1679, 24
  %1702 = add <4 x i32> %1680, <i32 24, i32 24, i32 24, i32 24>
  %1703 = add <4 x i32> %1680, <i32 28, i32 28, i32 28, i32 28>
  %1704 = getelementptr i32, i32* %1648, i64 %1701
  %1705 = bitcast i32* %1704 to <4 x i32>*
  store <4 x i32> %1702, <4 x i32>* %1705, align 4
  %1706 = getelementptr i32, i32* %1704, i64 4
  %1707 = bitcast i32* %1706 to <4 x i32>*
  store <4 x i32> %1703, <4 x i32>* %1707, align 4
  %1708 = add i64 %1679, 32
  %1709 = add <4 x i32> %1680, <i32 32, i32 32, i32 32, i32 32>
  %1710 = add i64 %1681, -4
  %1711 = icmp eq i64 %1710, 0
  br i1 %1711, label %1712, label %1678, !llvm.loop !26

1712:                                             ; preds = %1678, %1667
  %1713 = phi i64 [ 0, %1667 ], [ %1708, %1678 ]
  %1714 = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, %1667 ], [ %1709, %1678 ]
  %1715 = icmp eq i64 %1674, 0
  br i1 %1715, label %1729, label %1716

1716:                                             ; preds = %1712, %1716
  %1717 = phi i64 [ %1725, %1716 ], [ %1713, %1712 ]
  %1718 = phi <4 x i32> [ %1726, %1716 ], [ %1714, %1712 ]
  %1719 = phi i64 [ %1727, %1716 ], [ %1674, %1712 ]
  %1720 = add <4 x i32> %1718, <i32 4, i32 4, i32 4, i32 4>
  %1721 = getelementptr i32, i32* %1648, i64 %1717
  %1722 = bitcast i32* %1721 to <4 x i32>*
  store <4 x i32> %1718, <4 x i32>* %1722, align 4
  %1723 = getelementptr i32, i32* %1721, i64 4
  %1724 = bitcast i32* %1723 to <4 x i32>*
  store <4 x i32> %1720, <4 x i32>* %1724, align 4
  %1725 = add i64 %1717, 8
  %1726 = add <4 x i32> %1718, <i32 8, i32 8, i32 8, i32 8>
  %1727 = add i64 %1719, -1
  %1728 = icmp eq i64 %1727, 0
  br i1 %1728, label %1729, label %1716, !llvm.loop !27

1729:                                             ; preds = %1716, %1712
  %1730 = icmp eq i64 %1665, %1668
  br i1 %1730, label %1740, label %1731

1731:                                             ; preds = %1729, %1661
  %1732 = phi i32 [ 0, %1661 ], [ %1669, %1729 ]
  %1733 = phi i32* [ %1648, %1661 ], [ %1670, %1729 ]
  br label %1734

1734:                                             ; preds = %1731, %1734
  %1735 = phi i32 [ %1738, %1734 ], [ %1732, %1731 ]
  %1736 = phi i32* [ %1737, %1734 ], [ %1733, %1731 ]
  store i32 %1735, i32* %1736, align 4
  %1737 = getelementptr inbounds i32, i32* %1736, i64 1
  %1738 = add nuw nsw i32 %1735, 1
  %1739 = icmp eq i32* %1737, %1650
  br i1 %1739, label %1740, label %1734, !llvm.loop !28

1740:                                             ; preds = %1734, %1729, %1635, %1645
  %1741 = bitcast i64* %49 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1741) #8
  store i64 -6148914691236517206, i64* %49, align 8
  %1742 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %183, align 8
  %1743 = icmp eq %"struct.jxl::jpeg::JPEGData"* %1742, null
  br i1 %1743, label %1744, label %1757

1744:                                             ; preds = %1740
  %1745 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 10, i32 0, i64 0, i32 0, i32 0
  %1746 = load i32, i32* %1745, align 8
  %1747 = icmp eq i32 %1746, 0
  br i1 %1747, label %1748, label %1766

1748:                                             ; preds = %1744
  %1749 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 12, i32 0, i32 0
  %1750 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %1749, align 8
  %1751 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 12, i32 0, i32 1
  %1752 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %1751, align 8
  %1753 = icmp eq %"class.jxl::Plane"* %1750, %1752
  br i1 %1753, label %1766, label %1754

1754:                                             ; preds = %1748
  %1755 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1750, i64 0, i32 0, i32 0
  %1756 = load i32, i32* %1755, align 8
  br label %1766

1757:                                             ; preds = %1740
  %1758 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1742, i64 0, i32 1
  %1759 = load i32, i32* %1758, align 8
  %1760 = sext i32 %1759 to i64
  %1761 = lshr i64 %1760, 1
  store i64 %1761, i64* %49, align 8
  %1762 = bitcast i64* %50 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1762) #8
  store i64 -6148914691236517206, i64* %50, align 8
  %1763 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1742, i64 0, i32 2
  %1764 = load i32, i32* %1763, align 4
  %1765 = sext i32 %1764 to i64
  br label %1785

1766:                                             ; preds = %1744, %1748, %1754
  %1767 = phi i32 [ %1746, %1744 ], [ 0, %1748 ], [ %1756, %1754 ]
  %1768 = lshr i32 %1767, 1
  %1769 = zext i32 %1768 to i64
  store i64 %1769, i64* %49, align 8
  %1770 = bitcast i64* %50 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1770) #8
  store i64 -6148914691236517206, i64* %50, align 8
  %1771 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 10, i32 0, i64 0, i32 0, i32 1
  %1772 = load i32, i32* %1771, align 4
  %1773 = zext i32 %1772 to i64
  %1774 = icmp eq i32 %1772, 0
  br i1 %1774, label %1775, label %1785

1775:                                             ; preds = %1766
  %1776 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 12, i32 0, i32 0
  %1777 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %1776, align 8
  %1778 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 12, i32 0, i32 1
  %1779 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %1778, align 8
  %1780 = icmp eq %"class.jxl::Plane"* %1777, %1779
  br i1 %1780, label %1785, label %1781

1781:                                             ; preds = %1775
  %1782 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1777, i64 0, i32 0, i32 1
  %1783 = load i32, i32* %1782, align 4
  %1784 = zext i32 %1783 to i64
  br label %1785

1785:                                             ; preds = %1757, %1766, %1775, %1781
  %1786 = phi i8* [ %1762, %1757 ], [ %1770, %1781 ], [ %1770, %1775 ], [ %1770, %1766 ]
  %1787 = phi i64 [ %1765, %1757 ], [ %1784, %1781 ], [ 0, %1775 ], [ %1773, %1766 ]
  %1788 = lshr i64 %1787, 1
  store i64 %1788, i64* %50, align 8
  %1789 = bitcast %class.anon.379* %51 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1789) #8
  %1790 = getelementptr inbounds %class.anon.379, %class.anon.379* %51, i64 0, i32 0
  %1791 = getelementptr inbounds %class.anon.379, %class.anon.379* %51, i64 0, i32 1
  %1792 = getelementptr inbounds %class.anon.379, %class.anon.379* %51, i64 0, i32 2
  store %"struct.jxl::PassesEncoderState"** %21, %"struct.jxl::PassesEncoderState"*** %1790, align 8
  store i64* %49, i64** %1791, align 8
  store i64* %50, i64** %1792, align 8
  %1793 = load i32*, i32** %1637, align 8
  %1794 = load i32*, i32** %1638, align 8
  %1795 = bitcast %class.anon.380* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1795)
  %1796 = getelementptr inbounds %class.anon.380, %class.anon.380* %17, i64 0, i32 0
  store %class.anon.379* %51, %class.anon.379** %1796, align 8
  call fastcc void @"_ZNSt3__16__sortIRZN3jxl11EncodeFrameERKNS1_14CompressParamsERKNS1_9FrameInfoEPKNS1_13CodecMetadataERKNS1_11ImageBundleEPNS1_18PassesEncoderStateEPNS1_10ThreadPoolEPNS1_9BitWriterEPNS1_6AuxOutEE3$_4PjEEvT0_SP_T_"(i32* %1793, i32* %1794, %class.anon.380* nonnull dereferenceable(8) %17) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1795)
  %1797 = bitcast %"class.std::__1::vector"* %52 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1797) #8
  %1798 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %52, i64 0, i32 0, i32 0
  %1799 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %52, i64 0, i32 0, i32 1
  %1800 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %52, i64 0, i32 0, i32 2, i32 0, i32 0
  %1801 = bitcast i32** %1638 to i64*
  %1802 = load i64, i64* %1801, align 8
  %1803 = bitcast %"class.std::__1::vector"* %48 to i64*
  %1804 = load i64, i64* %1803, align 8
  %1805 = sub i64 %1802, %1804
  %1806 = ashr exact i64 %1805, 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1797, i8 0, i64 24, i1 false) #8
  %1807 = icmp eq i64 %1805, 0
  br i1 %1807, label %1820, label %1808

1808:                                             ; preds = %1785
  %1809 = icmp ugt i64 %1806, 4611686018427387903
  br i1 %1809, label %1810, label %1812

1810:                                             ; preds = %1808
  %1811 = bitcast %"class.std::__1::vector"* %52 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1811) #14
  unreachable

1812:                                             ; preds = %1808
  %1813 = call i8* @_Znwm(i64 %1805) #13
  %1814 = bitcast i8* %1813 to i32*
  %1815 = bitcast %"class.std::__1::vector"* %52 to i8**
  store i8* %1813, i8** %1815, align 8
  %1816 = getelementptr inbounds i32, i32* %1814, i64 %1806
  store i32* %1816, i32** %1800, align 8
  %1817 = and i64 %1805, -4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %1813, i8 0, i64 %1817, i1 false)
  %1818 = bitcast i32** %1799 to i64*
  %1819 = ptrtoint i32* %1816 to i64
  store i64 %1819, i64* %1818, align 8
  br label %1820

1820:                                             ; preds = %1785, %1812
  %1821 = phi i32* [ null, %1785 ], [ %1814, %1812 ]
  %1822 = icmp eq i64 %1802, %1804
  br i1 %1822, label %1833, label %1823

1823:                                             ; preds = %1820
  %1824 = inttoptr i64 %1804 to i32*
  %1825 = load i32, i32* %1824, align 4
  %1826 = zext i32 %1825 to i64
  %1827 = getelementptr inbounds i32, i32* %1821, i64 %1826
  store i32 0, i32* %1827, align 4
  %1828 = load i64, i64* %1801, align 8
  %1829 = load i64, i64* %1803, align 8
  %1830 = sub i64 %1828, %1829
  %1831 = ashr exact i64 %1830, 2
  %1832 = icmp ugt i64 %1831, 1
  br i1 %1832, label %1838, label %1833

1833:                                             ; preds = %1838, %1823, %1820
  %1834 = load i64, i64* %37, align 8
  %1835 = icmp eq i64 %1834, 0
  br i1 %1835, label %1854, label %1836

1836:                                             ; preds = %1833
  %1837 = bitcast i32** %1518 to i64*
  br label %1891

1838:                                             ; preds = %1823, %1838
  %1839 = phi i64 [ %1850, %1838 ], [ %1829, %1823 ]
  %1840 = phi i64 [ %1848, %1838 ], [ 1, %1823 ]
  %1841 = load i32*, i32** %1798, align 8
  %1842 = inttoptr i64 %1839 to i32*
  %1843 = trunc i64 %1840 to i32
  %1844 = getelementptr inbounds i32, i32* %1842, i64 %1840
  %1845 = load i32, i32* %1844, align 4
  %1846 = zext i32 %1845 to i64
  %1847 = getelementptr inbounds i32, i32* %1841, i64 %1846
  store i32 %1843, i32* %1847, align 4
  %1848 = add nuw i64 %1840, 1
  %1849 = load i64, i64* %1801, align 8
  %1850 = load i64, i64* %1803, align 8
  %1851 = sub i64 %1849, %1850
  %1852 = ashr exact i64 %1851, 2
  %1853 = icmp ult i64 %1848, %1852
  br i1 %1853, label %1838, label %1833

1854:                                             ; preds = %1906, %1833
  %1855 = bitcast %"class.std::__1::vector.366"* %53 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1855) #8
  %1856 = getelementptr inbounds %"class.std::__1::vector.366", %"class.std::__1::vector.366"* %53, i64 0, i32 0, i32 0
  %1857 = getelementptr inbounds %"class.std::__1::vector.366", %"class.std::__1::vector.366"* %53, i64 0, i32 0, i32 1
  %1858 = getelementptr inbounds %"class.std::__1::vector.366", %"class.std::__1::vector.366"* %53, i64 0, i32 0, i32 2, i32 0, i32 0
  %1859 = bitcast %"struct.jxl::BitWriter"** %1263 to i64*
  %1860 = load i64, i64* %1859, align 8
  %1861 = bitcast %"class.std::__1::vector.366"* %38 to i64*
  %1862 = load i64, i64* %1861, align 16
  %1863 = sub i64 %1860, %1862
  %1864 = sdiv exact i64 %1863, 40
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1855, i8 0, i64 24, i1 false) #8
  %1865 = icmp eq i64 %1863, 0
  %1866 = inttoptr i64 %1862 to %"struct.jxl::BitWriter"*
  br i1 %1865, label %1886, label %1867

1867:                                             ; preds = %1854
  %1868 = icmp ugt i64 %1864, 461168601842738790
  br i1 %1868, label %1869, label %1871

1869:                                             ; preds = %1867
  %1870 = bitcast %"class.std::__1::vector.366"* %53 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1870) #14
  unreachable

1871:                                             ; preds = %1867
  %1872 = call i8* @_Znwm(i64 %1863) #13
  %1873 = bitcast i8* %1872 to %"struct.jxl::BitWriter"*
  %1874 = bitcast %"class.std::__1::vector.366"* %53 to i8**
  store i8* %1872, i8** %1874, align 16
  %1875 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %1873, i64 %1864
  store %"struct.jxl::BitWriter"* %1875, %"struct.jxl::BitWriter"** %1858, align 16
  %1876 = bitcast %"struct.jxl::BitWriter"** %1857 to i64*
  %1877 = ptrtoint i8* %1872 to i64
  %1878 = add nsw i64 %1864, -1
  %1879 = getelementptr %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %1873, i64 %1878, i32 0
  %1880 = ptrtoint i64* %1879 to i64
  %1881 = sub i64 %1880, %1877
  %1882 = urem i64 %1881, 40
  %1883 = add i64 %1881, 40
  %1884 = sub i64 %1883, %1882
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1872, i8 0, i64 %1884, i1 false) #8
  %1885 = ptrtoint %"struct.jxl::BitWriter"* %1875 to i64
  store i64 %1885, i64* %1876, align 8
  br label %1886

1886:                                             ; preds = %1854, %1871
  %1887 = phi %"struct.jxl::BitWriter"* [ null, %1854 ], [ %1873, %1871 ]
  %1888 = load i64, i64* %1547, align 8
  %1889 = load i64, i64* %1548, align 8
  %1890 = icmp eq i64 %1888, %1889
  br i1 %1890, label %1975, label %2016

1891:                                             ; preds = %1836, %1906
  %1892 = phi i64 [ %1834, %1836 ], [ %1907, %1906 ]
  %1893 = phi i64 [ 0, %1836 ], [ %1908, %1906 ]
  %1894 = load i32*, i32** %1798, align 8
  %1895 = load i32*, i32** %1799, align 8
  %1896 = icmp eq i32* %1894, %1895
  br i1 %1896, label %1906, label %1897

1897:                                             ; preds = %1891
  %1898 = load i64, i64* %1547, align 8
  %1899 = load i64, i64* %1548, align 8
  %1900 = sub i64 %1898, %1899
  %1901 = lshr exact i64 %1900, 2
  %1902 = trunc i64 %1901 to i32
  %1903 = inttoptr i64 %1898 to i32*
  br label %1910

1904:                                             ; preds = %1969
  %1905 = load i64, i64* %37, align 8
  br label %1906

1906:                                             ; preds = %1904, %1891
  %1907 = phi i64 [ %1905, %1904 ], [ %1892, %1891 ]
  %1908 = add nuw i64 %1893, 1
  %1909 = icmp ult i64 %1908, %1907
  br i1 %1909, label %1891, label %1854

1910:                                             ; preds = %1972, %1897
  %1911 = phi i64 [ %1898, %1897 ], [ %1974, %1972 ]
  %1912 = phi i32* [ %1903, %1897 ], [ %1973, %1972 ]
  %1913 = phi i32* [ %1894, %1897 ], [ %1970, %1972 ]
  %1914 = load i32, i32* %1913, align 4
  %1915 = add i32 %1914, %1902
  %1916 = load i32*, i32** %1518, align 8
  %1917 = icmp ult i32* %1912, %1916
  %1918 = ptrtoint i32* %1916 to i64
  br i1 %1917, label %1919, label %1922

1919:                                             ; preds = %1910
  store i32 %1915, i32* %1912, align 4
  %1920 = getelementptr inbounds i32, i32* %1912, i64 1
  %1921 = ptrtoint i32* %1920 to i64
  store i64 %1921, i64* %1547, align 8
  br label %1969

1922:                                             ; preds = %1910
  %1923 = ptrtoint i32* %1912 to i64
  %1924 = load i64, i64* %1548, align 8
  %1925 = sub i64 %1923, %1924
  %1926 = ashr exact i64 %1925, 2
  %1927 = add nsw i64 %1926, 1
  %1928 = icmp ugt i64 %1927, 4611686018427387903
  br i1 %1928, label %1929, label %1931

1929:                                             ; preds = %1922
  %1930 = bitcast %"class.std::__1::vector"* %47 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1930) #14
  unreachable

1931:                                             ; preds = %1922
  %1932 = sub i64 %1918, %1924
  %1933 = ashr exact i64 %1932, 2
  %1934 = icmp ult i64 %1933, 2305843009213693951
  br i1 %1934, label %1935, label %1943

1935:                                             ; preds = %1931
  %1936 = ashr exact i64 %1932, 1
  %1937 = icmp ult i64 %1936, %1927
  %1938 = select i1 %1937, i64 %1927, i64 %1936
  %1939 = icmp eq i64 %1938, 0
  br i1 %1939, label %1948, label %1940

1940:                                             ; preds = %1935
  %1941 = icmp ugt i64 %1938, 4611686018427387903
  br i1 %1941, label %1942, label %1943

1942:                                             ; preds = %1940
  call void @abort() #14
  unreachable

1943:                                             ; preds = %1940, %1931
  %1944 = phi i64 [ %1938, %1940 ], [ 4611686018427387903, %1931 ]
  %1945 = shl i64 %1944, 2
  %1946 = call i8* @_Znwm(i64 %1945) #13
  %1947 = bitcast i8* %1946 to i32*
  br label %1948

1948:                                             ; preds = %1943, %1935
  %1949 = phi i64 [ %1944, %1943 ], [ 0, %1935 ]
  %1950 = phi i32* [ %1947, %1943 ], [ null, %1935 ]
  %1951 = getelementptr inbounds i32, i32* %1950, i64 %1926
  %1952 = getelementptr inbounds i32, i32* %1950, i64 %1949
  %1953 = ptrtoint i32* %1952 to i64
  store i32 %1915, i32* %1951, align 4
  %1954 = getelementptr inbounds i32, i32* %1951, i64 1
  %1955 = ptrtoint i32* %1954 to i64
  %1956 = sub i64 %1911, %1924
  %1957 = ashr exact i64 %1956, 2
  %1958 = sub nsw i64 0, %1957
  %1959 = getelementptr inbounds i32, i32* %1951, i64 %1958
  %1960 = ptrtoint i32* %1959 to i64
  %1961 = icmp sgt i64 %1956, 0
  br i1 %1961, label %1962, label %1965

1962:                                             ; preds = %1948
  %1963 = bitcast i32* %1959 to i8*
  %1964 = inttoptr i64 %1924 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1963, i8* align 4 %1964, i64 %1956, i1 false) #8
  br label %1965

1965:                                             ; preds = %1962, %1948
  store i64 %1960, i64* %1548, align 8
  store i64 %1955, i64* %1547, align 8
  store i64 %1953, i64* %1837, align 8
  %1966 = icmp eq i64 %1924, 0
  br i1 %1966, label %1969, label %1967

1967:                                             ; preds = %1965
  %1968 = inttoptr i64 %1924 to i8*
  call void @_ZdlPv(i8* %1968) #13
  br label %1969

1969:                                             ; preds = %1919, %1965, %1967
  %1970 = getelementptr inbounds i32, i32* %1913, i64 1
  %1971 = icmp eq i32* %1970, %1895
  br i1 %1971, label %1904, label %1972

1972:                                             ; preds = %1969
  %1973 = load i32*, i32** %1517, align 8
  %1974 = ptrtoint i32* %1973 to i64
  br label %1910

1975:                                             ; preds = %2051, %1886
  %1976 = phi %"struct.jxl::BitWriter"* [ %1866, %1886 ], [ %2063, %2051 ]
  %1977 = icmp eq %"struct.jxl::BitWriter"* %1976, null
  br i1 %1977, label %1996, label %1978

1978:                                             ; preds = %1975
  %1979 = bitcast %"struct.jxl::BitWriter"* %1976 to i8*
  %1980 = load %"struct.jxl::BitWriter"*, %"struct.jxl::BitWriter"** %1263, align 8
  %1981 = icmp eq %"struct.jxl::BitWriter"* %1980, %1976
  br i1 %1981, label %1994, label %1982

1982:                                             ; preds = %1978, %1989
  %1983 = phi %"struct.jxl::BitWriter"* [ %1984, %1989 ], [ %1980, %1978 ]
  %1984 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %1983, i64 -1
  %1985 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %1983, i64 -1, i32 1, i32 2, i32 0, i32 0, i32 0
  %1986 = load i8*, i8** %1985, align 8
  store i8* null, i8** %1985, align 8
  %1987 = icmp eq i8* %1986, null
  br i1 %1987, label %1989, label %1988

1988:                                             ; preds = %1982
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1986) #8
  br label %1989

1989:                                             ; preds = %1988, %1982
  %1990 = icmp eq %"struct.jxl::BitWriter"* %1984, %1976
  br i1 %1990, label %1991, label %1982

1991:                                             ; preds = %1989
  %1992 = bitcast %"class.std::__1::vector.366"* %38 to i8**
  %1993 = load i8*, i8** %1992, align 16
  br label %1994

1994:                                             ; preds = %1991, %1978
  %1995 = phi i8* [ %1993, %1991 ], [ %1979, %1978 ]
  store %"struct.jxl::BitWriter"* %1976, %"struct.jxl::BitWriter"** %1263, align 8
  call void @_ZdlPv(i8* %1995) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1261, i8 0, i64 24, i1 false) #8
  br label %1996

1996:                                             ; preds = %1975, %1994
  %1997 = bitcast %"class.std::__1::vector.366"* %53 to <2 x i64>*
  %1998 = load <2 x i64>, <2 x i64>* %1997, align 16
  %1999 = bitcast %"class.std::__1::vector.366"* %38 to <2 x i64>*
  store <2 x i64> %1998, <2 x i64>* %1999, align 16
  %2000 = bitcast %"struct.jxl::BitWriter"** %1858 to i64*
  %2001 = load i64, i64* %2000, align 16
  %2002 = bitcast %"struct.jxl::BitWriter"** %1264 to i64*
  store i64 %2001, i64* %2002, align 16
  %2003 = load i32*, i32** %1798, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1855) #8
  %2004 = icmp eq i32* %2003, null
  br i1 %2004, label %2009, label %2005

2005:                                             ; preds = %1996
  %2006 = bitcast i32* %2003 to i8*
  %2007 = ptrtoint i32* %2003 to i64
  %2008 = bitcast i32** %1799 to i64*
  store i64 %2007, i64* %2008, align 8
  call void @_ZdlPv(i8* %2006) #13
  br label %2009

2009:                                             ; preds = %1996, %2005
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1797) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1789) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1786) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1741) #8
  %2010 = load i32*, i32** %1637, align 8
  %2011 = icmp eq i32* %2010, null
  br i1 %2011, label %2015, label %2012

2012:                                             ; preds = %2009
  %2013 = ptrtoint i32* %2010 to i64
  store i64 %2013, i64* %1801, align 8
  %2014 = bitcast i32* %2010 to i8*
  call void @_ZdlPv(i8* %2014) #13
  br label %2015

2015:                                             ; preds = %2009, %2012
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1636) #8
  br label %2066

2016:                                             ; preds = %1886, %2064
  %2017 = phi %"struct.jxl::BitWriter"* [ %2065, %2064 ], [ %1887, %1886 ]
  %2018 = phi i64 [ %2059, %2064 ], [ %1889, %1886 ]
  %2019 = phi %"struct.jxl::BitWriter"* [ %2063, %2064 ], [ %1866, %1886 ]
  %2020 = phi i64 [ %2057, %2064 ], [ 0, %1886 ]
  %2021 = inttoptr i64 %2018 to i32*
  %2022 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %2019, i64 %2020
  %2023 = getelementptr inbounds i32, i32* %2021, i64 %2020
  %2024 = load i32, i32* %2023, align 4
  %2025 = zext i32 %2024 to i64
  %2026 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %2017, i64 %2025
  %2027 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %2022, i64 0, i32 0
  %2028 = load i64, i64* %2027, align 8
  %2029 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %2026, i64 0, i32 0
  store i64 %2028, i64* %2029, align 8
  %2030 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %2019, i64 %2020, i32 1
  %2031 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %2030, i64 0, i32 0
  %2032 = load i64, i64* %2031, align 8
  %2033 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %2017, i64 %2025, i32 1, i32 0
  store i64 %2032, i64* %2033, align 8
  %2034 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %2019, i64 %2020, i32 1, i32 1
  %2035 = load i64, i64* %2034, align 8
  %2036 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %2017, i64 %2025, i32 1, i32 1
  store i64 %2035, i64* %2036, align 8
  %2037 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %2019, i64 %2020, i32 1, i32 2
  %2038 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %2017, i64 %2025, i32 1, i32 2
  %2039 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %2037, i64 0, i32 0, i32 0, i32 0
  %2040 = bitcast %"class.std::__1::unique_ptr"* %2037 to i64*
  %2041 = load i64, i64* %2040, align 8
  store i8* null, i8** %2039, align 8
  %2042 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %2038, i64 0, i32 0, i32 0, i32 0
  %2043 = load i8*, i8** %2042, align 8
  %2044 = bitcast %"class.std::__1::unique_ptr"* %2038 to i64*
  store i64 %2041, i64* %2044, align 8
  %2045 = icmp eq i8* %2043, null
  br i1 %2045, label %2047, label %2046

2046:                                             ; preds = %2016
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %2043) #8
  br label %2047

2047:                                             ; preds = %2046, %2016
  %2048 = icmp eq %"struct.jxl::BitWriter"* %2022, %2026
  br i1 %2048, label %2051, label %2049

2049:                                             ; preds = %2047
  %2050 = bitcast %"class.jxl::PaddedBytes"* %2030 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2050, i8 0, i64 16, i1 false) #8
  br label %2051

2051:                                             ; preds = %2047, %2049
  %2052 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %2019, i64 %2020, i32 2
  %2053 = bitcast %"class.jxl::BitWriter::Allotment"** %2052 to i64*
  %2054 = load i64, i64* %2053, align 8
  %2055 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %2017, i64 %2025, i32 2
  %2056 = bitcast %"class.jxl::BitWriter::Allotment"** %2055 to i64*
  store i64 %2054, i64* %2056, align 8
  %2057 = add nuw i64 %2020, 1
  %2058 = load i64, i64* %1547, align 8
  %2059 = load i64, i64* %1548, align 8
  %2060 = sub i64 %2058, %2059
  %2061 = ashr exact i64 %2060, 2
  %2062 = icmp ult i64 %2057, %2061
  %2063 = load %"struct.jxl::BitWriter"*, %"struct.jxl::BitWriter"** %1262, align 16
  br i1 %2062, label %2064, label %1975

2064:                                             ; preds = %2051
  %2065 = load %"struct.jxl::BitWriter"*, %"struct.jxl::BitWriter"** %1856, align 16
  br label %2016

2066:                                             ; preds = %1514, %2015, %1540
  %2067 = phi %"class.std::__1::vector"* [ null, %1540 ], [ %47, %2015 ], [ null, %1514 ]
  %2068 = load %"struct.jxl::AuxOut"*, %"struct.jxl::AuxOut"** %22, align 8
  %2069 = call i32 @_ZN3jxl17WriteGroupOffsetsERKNSt3__16vectorINS_9BitWriterENS0_9allocatorIS2_EEEEPKNS1_IjNS3_IjEEEEPS2_PNS_6AuxOutE(%"class.std::__1::vector.366"* nonnull dereferenceable(24) %38, %"class.std::__1::vector"* %2067, %"struct.jxl::BitWriter"* %6, %"struct.jxl::AuxOut"* %2068) #8
  %2070 = icmp eq i32 %2069, 0
  br i1 %2070, label %2071, label %2085

2071:                                             ; preds = %2066
  call void @_ZN3jxl9BitWriter17AppendByteAlignedERKNSt3__16vectorIS0_NS1_9allocatorIS0_EEEE(%"struct.jxl::BitWriter"* %6, %"class.std::__1::vector.366"* nonnull dereferenceable(24) %38) #8
  %2072 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %6, i64 0, i32 0
  %2073 = load i64, i64* %2072, align 8
  %2074 = add i64 %2073, 7
  %2075 = and i64 %2074, -8
  %2076 = sub i64 %2075, %2073
  %2077 = icmp eq i64 %2076, 0
  br i1 %2077, label %2085, label %2078

2078:                                             ; preds = %2071
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %6, i64 %2076, i64 0) #8
  %2079 = load i64, i64* %2072, align 8
  %2080 = and i64 %2079, 7
  %2081 = icmp eq i64 %2080, 0
  br i1 %2081, label %2085, label %2082

2082:                                             ; preds = %2078
  %2083 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.59, i64 0, i64 0), i32 133, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.60, i64 0, i64 0)) #8
  %2084 = call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

2085:                                             ; preds = %2078, %2071, %2066
  %2086 = load i32*, i32** %1516, align 8
  %2087 = icmp eq i32* %2086, null
  br i1 %2087, label %2092, label %2088

2088:                                             ; preds = %2085
  %2089 = ptrtoint i32* %2086 to i64
  %2090 = bitcast i32** %1517 to i64*
  store i64 %2089, i64* %2090, align 8
  %2091 = bitcast i32* %2086 to i8*
  call void @_ZdlPv(i8* %2091) #13
  br label %2092

2092:                                             ; preds = %2085, %2088
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1515) #8
  br label %2093

2093:                                             ; preds = %1503, %2092
  %2094 = phi i32 [ %2069, %2092 ], [ 1, %1503 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %1468) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1466) #8
  br label %2095

2095:                                             ; preds = %1453, %2093
  %2096 = phi i32 [ %2094, %2093 ], [ %1463, %1453 ]
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %1412) #8
  br label %2097

2097:                                             ; preds = %1399, %1391, %1375, %1361, %2095
  %2098 = phi i32 [ %2096, %2095 ], [ %1368, %1361 ], [ %1382, %1375 ], [ %1397, %1391 ], [ %1409, %1399 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1306) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1303) #8
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %39) #8
  %2099 = load %"struct.jxl::BitWriter"*, %"struct.jxl::BitWriter"** %1262, align 16
  %2100 = icmp eq %"struct.jxl::BitWriter"* %2099, null
  br i1 %2100, label %2119, label %2101

2101:                                             ; preds = %2097
  %2102 = bitcast %"struct.jxl::BitWriter"* %2099 to i8*
  %2103 = load %"struct.jxl::BitWriter"*, %"struct.jxl::BitWriter"** %1263, align 8
  %2104 = icmp eq %"struct.jxl::BitWriter"* %2103, %2099
  br i1 %2104, label %2117, label %2105

2105:                                             ; preds = %2101, %2112
  %2106 = phi %"struct.jxl::BitWriter"* [ %2107, %2112 ], [ %2103, %2101 ]
  %2107 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %2106, i64 -1
  %2108 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %2106, i64 -1, i32 1, i32 2, i32 0, i32 0, i32 0
  %2109 = load i8*, i8** %2108, align 8
  store i8* null, i8** %2108, align 8
  %2110 = icmp eq i8* %2109, null
  br i1 %2110, label %2112, label %2111

2111:                                             ; preds = %2105
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %2109) #8
  br label %2112

2112:                                             ; preds = %2111, %2105
  %2113 = icmp eq %"struct.jxl::BitWriter"* %2107, %2099
  br i1 %2113, label %2114, label %2105

2114:                                             ; preds = %2112
  %2115 = bitcast %"class.std::__1::vector.366"* %38 to i8**
  %2116 = load i8*, i8** %2115, align 16
  br label %2117

2117:                                             ; preds = %2114, %2101
  %2118 = phi i8* [ %2116, %2114 ], [ %2102, %2101 ]
  store %"struct.jxl::BitWriter"* %2099, %"struct.jxl::BitWriter"** %1263, align 8
  call void @_ZdlPv(i8* %2118) #13
  br label %2119

2119:                                             ; preds = %2097, %2117
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1261) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1257) #8
  br label %2120

2120:                                             ; preds = %1230, %1217, %1166, %1155, %1145, %836, %2119
  %2121 = phi i32 [ %2098, %2119 ], [ %838, %836 ], [ 1, %1145 ], [ %1158, %1155 ], [ %1168, %1166 ], [ %1228, %1217 ], [ %1254, %1230 ]
  %2122 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %831, align 8
  %2123 = icmp eq %"class.jxl::Plane"* %2122, null
  br i1 %2123, label %2142, label %2124

2124:                                             ; preds = %2120
  %2125 = bitcast %"class.jxl::Plane"* %2122 to i8*
  %2126 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %832, align 8
  %2127 = icmp eq %"class.jxl::Plane"* %2126, %2122
  br i1 %2127, label %2140, label %2128

2128:                                             ; preds = %2124, %2135
  %2129 = phi %"class.jxl::Plane"* [ %2130, %2135 ], [ %2126, %2124 ]
  %2130 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %2129, i64 -1
  %2131 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %2129, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %2132 = load i8*, i8** %2131, align 8
  store i8* null, i8** %2131, align 8
  %2133 = icmp eq i8* %2132, null
  br i1 %2133, label %2135, label %2134

2134:                                             ; preds = %2128
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %2132) #8
  br label %2135

2135:                                             ; preds = %2134, %2128
  %2136 = icmp eq %"class.jxl::Plane"* %2130, %2122
  br i1 %2136, label %2137, label %2128

2137:                                             ; preds = %2135
  %2138 = bitcast %"class.std::__1::vector.85"* %34 to i8**
  %2139 = load i8*, i8** %2138, align 8
  br label %2140

2140:                                             ; preds = %2137, %2124
  %2141 = phi i8* [ %2139, %2137 ], [ %2125, %2124 ]
  store %"class.jxl::Plane"* %2122, %"class.jxl::Plane"** %832, align 8
  call void @_ZdlPv(i8* %2141) #13
  br label %2142

2142:                                             ; preds = %2120, %2140
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %830) #8
  %2143 = load %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ModularFrameEncoder"** %824, align 8
  store %"class.jxl::ModularFrameEncoder"* null, %"class.jxl::ModularFrameEncoder"** %824, align 8
  %2144 = icmp eq %"class.jxl::ModularFrameEncoder"* %2143, null
  br i1 %2144, label %2147, label %2145

2145:                                             ; preds = %2142
  call void @_ZN3jxl19ModularFrameEncoderD2Ev(%"class.jxl::ModularFrameEncoder"* nonnull %2143) #8
  %2146 = bitcast %"class.jxl::ModularFrameEncoder"* %2143 to i8*
  call void @_ZdlPv(i8* %2146) #13
  br label %2147

2147:                                             ; preds = %2142, %2145
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %823) #8
  %2148 = getelementptr inbounds %"class.jxl::LossyFrameEncoder", %"class.jxl::LossyFrameEncoder"* %32, i64 0, i32 3
  %2149 = getelementptr inbounds %"class.std::__1::vector.287", %"class.std::__1::vector.287"* %2148, i64 0, i32 0, i32 0
  %2150 = load %"struct.jxl::EncCache"*, %"struct.jxl::EncCache"** %2149, align 8
  %2151 = icmp eq %"struct.jxl::EncCache"* %2150, null
  br i1 %2151, label %2180, label %2152

2152:                                             ; preds = %2147
  %2153 = bitcast %"struct.jxl::EncCache"* %2150 to i8*
  %2154 = load %"struct.jxl::EncCache"*, %"struct.jxl::EncCache"** %819, align 8
  %2155 = icmp eq %"struct.jxl::EncCache"* %2154, %2150
  br i1 %2155, label %2178, label %2156

2156:                                             ; preds = %2152, %2173
  %2157 = phi %"struct.jxl::EncCache"* [ %2158, %2173 ], [ %2154, %2152 ]
  %2158 = getelementptr inbounds %"struct.jxl::EncCache", %"struct.jxl::EncCache"* %2157, i64 -1
  %2159 = getelementptr inbounds %"struct.jxl::EncCache", %"struct.jxl::EncCache"* %2157, i64 -1, i32 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %2160 = load i8*, i8** %2159, align 8
  store i8* null, i8** %2159, align 8
  %2161 = icmp eq i8* %2160, null
  br i1 %2161, label %2163, label %2162

2162:                                             ; preds = %2156
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %2160) #8
  br label %2163

2163:                                             ; preds = %2162, %2156
  %2164 = getelementptr inbounds %"struct.jxl::EncCache", %"struct.jxl::EncCache"* %2157, i64 -1, i32 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %2165 = load i8*, i8** %2164, align 8
  store i8* null, i8** %2164, align 8
  %2166 = icmp eq i8* %2165, null
  br i1 %2166, label %2168, label %2167

2167:                                             ; preds = %2163
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %2165) #8
  br label %2168

2168:                                             ; preds = %2167, %2163
  %2169 = getelementptr inbounds %"struct.jxl::EncCache", %"struct.jxl::EncCache"* %2157, i64 -1, i32 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %2170 = load i8*, i8** %2169, align 8
  store i8* null, i8** %2169, align 8
  %2171 = icmp eq i8* %2170, null
  br i1 %2171, label %2173, label %2172

2172:                                             ; preds = %2168
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %2170) #8
  br label %2173

2173:                                             ; preds = %2172, %2168
  %2174 = icmp eq %"struct.jxl::EncCache"* %2158, %2150
  br i1 %2174, label %2175, label %2156

2175:                                             ; preds = %2173
  %2176 = bitcast %"class.std::__1::vector.287"* %2148 to i8**
  %2177 = load i8*, i8** %2176, align 8
  br label %2178

2178:                                             ; preds = %2175, %2152
  %2179 = phi i8* [ %2177, %2175 ], [ %2153, %2152 ]
  store %"struct.jxl::EncCache"* %2150, %"struct.jxl::EncCache"** %819, align 8
  call void @_ZdlPv(i8* %2179) #13
  br label %2180

2180:                                             ; preds = %2147, %2178
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %816) #8
  %2181 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %811, align 8
  %2182 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %2181, i64 0, i32 1
  %2183 = load void (i8*)*, void (i8*)** %2182, align 8
  %2184 = icmp eq void (i8*)* %2183, null
  br i1 %2184, label %2187, label %2185

2185:                                             ; preds = %2180
  %2186 = load i8*, i8** %809, align 8
  call void %2183(i8* %2186) #8
  br label %2187

2187:                                             ; preds = %2180, %2185
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %808) #8
  %2188 = load %"struct.jxl::AuxOut"*, %"struct.jxl::AuxOut"** %806, align 8
  %2189 = icmp eq %"struct.jxl::AuxOut"* %2188, null
  br i1 %2189, label %2230, label %2190

2190:                                             ; preds = %2187
  %2191 = bitcast %"struct.jxl::AuxOut"* %2188 to i8*
  %2192 = load %"struct.jxl::AuxOut"*, %"struct.jxl::AuxOut"** %807, align 8
  %2193 = icmp eq %"struct.jxl::AuxOut"* %2192, %2188
  br i1 %2193, label %2228, label %2194

2194:                                             ; preds = %2190, %2223
  %2195 = phi %"struct.jxl::AuxOut"* [ %2196, %2223 ], [ %2192, %2190 ]
  %2196 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %2195, i64 -1
  %2197 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %2195, i64 -1, i32 18, i32 0, i32 2
  %2198 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %2197, align 8
  %2199 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %2198, i64 0, i32 1
  %2200 = load void (i8*)*, void (i8*)** %2199, align 8
  %2201 = icmp eq void (i8*)* %2200, null
  br i1 %2201, label %2205, label %2202

2202:                                             ; preds = %2194
  %2203 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %2195, i64 -1, i32 18, i32 0, i32 0, i32 0
  %2204 = load i8*, i8** %2203, align 8
  call void %2200(i8* %2204) #8
  br label %2205

2205:                                             ; preds = %2202, %2194
  %2206 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %2195, i64 -1, i32 17, i32 0, i32 2
  %2207 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %2206, align 8
  %2208 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %2207, i64 0, i32 1
  %2209 = load void (i8*)*, void (i8*)** %2208, align 8
  %2210 = icmp eq void (i8*)* %2209, null
  br i1 %2210, label %2214, label %2211

2211:                                             ; preds = %2205
  %2212 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %2195, i64 -1, i32 17, i32 0, i32 0, i32 0
  %2213 = load i8*, i8** %2212, align 8
  call void %2209(i8* %2213) #8
  br label %2214

2214:                                             ; preds = %2211, %2205
  %2215 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %2195, i64 -1, i32 15
  %2216 = bitcast %"class.std::__1::basic_string"* %2215 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %2217 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %2216, i64 0, i32 1, i32 0
  %2218 = load i8, i8* %2217, align 1
  %2219 = icmp slt i8 %2218, 0
  br i1 %2219, label %2220, label %2223

2220:                                             ; preds = %2214
  %2221 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2215, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %2222 = load i8*, i8** %2221, align 8
  call void @_ZdlPv(i8* %2222) #13
  br label %2223

2223:                                             ; preds = %2220, %2214
  %2224 = icmp eq %"struct.jxl::AuxOut"* %2196, %2188
  br i1 %2224, label %2225, label %2194

2225:                                             ; preds = %2223
  %2226 = bitcast %"class.std::__1::vector.275"* %30 to i8**
  %2227 = load i8*, i8** %2226, align 8
  br label %2228

2228:                                             ; preds = %2225, %2190
  %2229 = phi i8* [ %2227, %2225 ], [ %2191, %2190 ]
  store %"struct.jxl::AuxOut"* %2188, %"struct.jxl::AuxOut"** %807, align 8
  call void @_ZdlPv(i8* %2229) #13
  br label %2230

2230:                                             ; preds = %2187, %2228
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %805) #8
  call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* nonnull %29) #8
  call void @llvm.lifetime.end.p0i8(i64 368, i8* nonnull %790) #8
  %2231 = bitcast i8* %732 to void (%"struct.jxl::ImageMetadata"*)***
  %2232 = load void (%"struct.jxl::ImageMetadata"*)**, void (%"struct.jxl::ImageMetadata"*)*** %2231, align 8
  %2233 = getelementptr inbounds void (%"struct.jxl::ImageMetadata"*)*, void (%"struct.jxl::ImageMetadata"*)** %2232, i64 1
  %2234 = load void (%"struct.jxl::ImageMetadata"*)*, void (%"struct.jxl::ImageMetadata"*)** %2233, align 8
  call void %2234(%"struct.jxl::ImageMetadata"* nonnull %733) #8
  %2235 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %28, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %2236 = load i8*, i8** %2235, align 8
  store i8* null, i8** %2235, align 8
  %2237 = icmp eq i8* %2236, null
  br i1 %2237, label %2239, label %2238

2238:                                             ; preds = %2230
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %2236) #8
  br label %2239

2239:                                             ; preds = %2238, %2230
  %2240 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %28, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %2241 = load i8*, i8** %2240, align 8
  store i8* null, i8** %2240, align 8
  %2242 = icmp eq i8* %2241, null
  br i1 %2242, label %2244, label %2243

2243:                                             ; preds = %2239
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %2241) #8
  br label %2244

2244:                                             ; preds = %2243, %2239
  %2245 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %28, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %2246 = load i8*, i8** %2245, align 8
  store i8* null, i8** %2245, align 8
  %2247 = icmp eq i8* %2246, null
  br i1 %2247, label %2249, label %2248

2248:                                             ; preds = %2244
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %2246) #8
  br label %2249

2249:                                             ; preds = %2244, %2248
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %727) #8
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %724) #8
  %2250 = load %"struct.jxl::FrameHeader"*, %"struct.jxl::FrameHeader"** %246, align 8
  br label %2252

2251:                                             ; preds = %463, %462, %458, %451, %353, %359
  store %"struct.jxl::FrameHeader"* null, %"struct.jxl::FrameHeader"** %246, align 8
  br label %2256

2252:                                             ; preds = %2249, %722, %721
  %2253 = phi %"struct.jxl::FrameHeader"* [ %717, %722 ], [ %717, %721 ], [ %2250, %2249 ]
  %2254 = phi i32 [ 1, %722 ], [ 1, %721 ], [ %2121, %2249 ]
  store %"struct.jxl::FrameHeader"* null, %"struct.jxl::FrameHeader"** %246, align 8
  %2255 = icmp eq %"struct.jxl::FrameHeader"* %2253, null
  br i1 %2255, label %2263, label %2256

2256:                                             ; preds = %2251, %2252
  %2257 = phi i32 [ 1, %2251 ], [ %2254, %2252 ]
  %2258 = phi %"struct.jxl::FrameHeader"* [ %248, %2251 ], [ %2253, %2252 ]
  %2259 = bitcast %"struct.jxl::FrameHeader"* %2258 to void (%"struct.jxl::FrameHeader"*)***
  %2260 = load void (%"struct.jxl::FrameHeader"*)**, void (%"struct.jxl::FrameHeader"*)*** %2259, align 8
  %2261 = getelementptr inbounds void (%"struct.jxl::FrameHeader"*)*, void (%"struct.jxl::FrameHeader"*)** %2260, i64 1
  %2262 = load void (%"struct.jxl::FrameHeader"*)*, void (%"struct.jxl::FrameHeader"*)** %2261, align 8
  call void %2262(%"struct.jxl::FrameHeader"* nonnull %2258) #8
  br label %2263

2263:                                             ; preds = %2252, %2256
  %2264 = phi i32 [ %2254, %2252 ], [ %2257, %2256 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %245) #8
  %2265 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %23, i64 0, i32 39, i32 3, i32 0, i32 0
  %2266 = load i32*, i32** %2265, align 8
  %2267 = bitcast i32* %2266 to i8*
  br label %2268

2268:                                             ; preds = %215, %225, %157, %150, %135, %2263
  %2269 = phi i8* [ %2267, %2263 ], [ %122, %135 ], [ %122, %150 ], [ %122, %157 ], [ %122, %225 ], [ %122, %215 ]
  %2270 = phi i32* [ %2266, %2263 ], [ %123, %135 ], [ %123, %150 ], [ %123, %157 ], [ %123, %225 ], [ %123, %215 ]
  %2271 = phi i32 [ %2264, %2263 ], [ 1, %135 ], [ 1, %150 ], [ 1, %157 ], [ 1, %225 ], [ 1, %215 ]
  %2272 = icmp eq i32* %2270, null
  br i1 %2272, label %2277, label %2273

2273:                                             ; preds = %2268
  %2274 = ptrtoint i32* %2270 to i64
  %2275 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %23, i64 0, i32 39, i32 3, i32 0, i32 1
  %2276 = bitcast i32** %2275 to i64*
  store i64 %2274, i64* %2276, align 8
  call void @_ZdlPv(i8* %2269) #13
  br label %2277

2277:                                             ; preds = %2268, %2273
  call void @llvm.lifetime.end.p0i8(i64 360, i8* nonnull %75) #8
  ret i32 %2271

2278:                                             ; preds = %426
  %2279 = add nuw nsw i32 %427, 1
  store i32 %2279, i32* %414, align 4, !alias.scope !10
  br label %2280

2280:                                             ; preds = %2278, %426
  %2281 = phi i32 [ %427, %426 ], [ %2279, %2278 ]
  %2282 = add nuw nsw i64 %428, 1
  %2283 = icmp eq i64 %2282, 3
  br i1 %2283, label %432, label %2284

2284:                                             ; preds = %2280
  %2285 = getelementptr inbounds [3 x float], [3 x float]* @_ZZN3jxl12_GLOBAL__N_120LoopFilterFromParamsERKNS_14CompressParamsEPNS_11FrameHeaderEE11kThresholds, i64 0, i64 %2282
  %2286 = load float, float* %2285, align 4, !noalias !13
  %2287 = fcmp ult float %159, %2286
  br i1 %2287, label %432, label %2288

2288:                                             ; preds = %2284
  %2289 = add nsw i32 %2281, 1
  store i32 %2289, i32* %414, align 4, !alias.scope !10
  br label %432
}

declare void @_ZNK3jxl11ImageBundle14VerifyMetadataEv(%"class.jxl::ImageBundle"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare zeroext i1 @_ZN3jxl5DebugEPKcz(i8*, ...) local_unnamed_addr #1

; Function Attrs: noreturn
declare zeroext i1 @_ZN3jxl5AbortEv() local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3jxl11FrameHeader17ToFrameDimensionsEv(%"struct.jxl::FrameDimensions"* noalias sret, %"struct.jxl::FrameHeader"*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1, i64 0, i32 25
  %4 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %3, align 8
  %5 = icmp eq %"struct.jxl::CodecMetadata"* %4, null
  br i1 %5, label %46, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1, i64 0, i32 27
  %8 = load i8, i8* %7, align 8, !range !2
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %13, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %4, i64 0, i32 0, i32 19
  %12 = tail call i64 @_ZNK3jxl13PreviewHeader5xsizeEv(%"class.jxl::PreviewHeader"* %11) #8
  br label %16

13:                                               ; preds = %6
  %14 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %4, i64 0, i32 1
  %15 = tail call i64 @_ZNK3jxl10SizeHeader5xsizeEv(%"class.jxl::SizeHeader"* %14) #8
  br label %16

16:                                               ; preds = %10, %13
  %17 = phi i64 [ %15, %13 ], [ %12, %10 ]
  %18 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %3, align 8
  %19 = icmp eq %"struct.jxl::CodecMetadata"* %18, null
  br i1 %19, label %46, label %20

20:                                               ; preds = %16
  %21 = load i8, i8* %7, align 8, !range !2
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %34, label %23

23:                                               ; preds = %20
  %24 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %18, i64 0, i32 0, i32 19, i32 1
  %25 = load i8, i8* %24, align 8, !range !2
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %31, label %27

27:                                               ; preds = %23
  %28 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %18, i64 0, i32 0, i32 19, i32 2
  %29 = load i32, i32* %28, align 4
  %30 = shl i32 %29, 3
  br label %46

31:                                               ; preds = %23
  %32 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %18, i64 0, i32 0, i32 19, i32 3
  %33 = load i32, i32* %32, align 8
  br label %46

34:                                               ; preds = %20
  %35 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %18, i64 0, i32 1, i32 1
  %36 = load i8, i8* %35, align 8, !range !2
  %37 = icmp eq i8 %36, 0
  br i1 %37, label %43, label %38

38:                                               ; preds = %34
  %39 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %18, i64 0, i32 1, i32 2
  %40 = load i32, i32* %39, align 4
  %41 = shl i32 %40, 3
  %42 = add i32 %41, 8
  br label %46

43:                                               ; preds = %34
  %44 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %18, i64 0, i32 1, i32 3
  %45 = load i32, i32* %44, align 8
  br label %46

46:                                               ; preds = %2, %16, %27, %31, %38, %43
  %47 = phi i64 [ %17, %16 ], [ %17, %27 ], [ %17, %31 ], [ %17, %38 ], [ %17, %43 ], [ 0, %2 ]
  %48 = phi i32 [ 0, %16 ], [ %30, %27 ], [ %33, %31 ], [ %42, %38 ], [ %45, %43 ], [ 0, %2 ]
  %49 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1, i64 0, i32 14, i32 0
  %50 = load i32, i32* %49, align 4
  %51 = icmp eq i32 %50, 0
  %52 = zext i32 %50 to i64
  %53 = select i1 %51, i64 %47, i64 %52
  %54 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1, i64 0, i32 14, i32 1
  %55 = load i32, i32* %54, align 4
  %56 = icmp eq i32 %55, 0
  %57 = select i1 %56, i32 %48, i32 %55
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1, i64 0, i32 24
  %60 = load i32, i32* %59, align 4
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %71, label %62

62:                                               ; preds = %46
  %63 = mul i32 %60, 3
  %64 = shl i32 1, %63
  %65 = sext i32 %64 to i64
  %66 = add nsw i64 %65, -1
  %67 = add i64 %66, %53
  %68 = udiv i64 %67, %65
  %69 = add nsw i64 %66, %58
  %70 = udiv i64 %69, %65
  br label %71

71:                                               ; preds = %46, %62
  %72 = phi i64 [ %68, %62 ], [ %53, %46 ]
  %73 = phi i64 [ %70, %62 ], [ %58, %46 ]
  %74 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 4
  %75 = bitcast i64* %74 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %75, i8 -86, i64 96, i1 false)
  %76 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1, i64 0, i32 8
  %77 = load i32, i32* %76, align 8
  %78 = zext i32 %77 to i64
  %79 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1, i64 0, i32 7, i32 2
  %80 = load i8, i8* %79, align 4
  %81 = zext i8 %80 to i64
  %82 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1, i64 0, i32 7, i32 3
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i64
  %85 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1, i64 0, i32 2
  %86 = load i32, i32* %85, align 4
  %87 = icmp eq i32 %86, 1
  %88 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1, i64 0, i32 15
  %89 = load i32, i32* %88, align 4
  %90 = zext i32 %89 to i64
  %91 = shl i64 128, %78
  %92 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 16
  store i64 %91, i64* %92, align 8
  %93 = shl i64 %91, 3
  %94 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 17
  store i64 %93, i64* %94, align 8
  %95 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 2
  store i64 %72, i64* %95, align 8
  %96 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 3
  store i64 %73, i64* %96, align 8
  %97 = add nsw i64 %90, -1
  %98 = add i64 %97, %72
  %99 = udiv i64 %98, %90
  %100 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 0
  store i64 %99, i64* %100, align 8
  %101 = add i64 %97, %73
  %102 = udiv i64 %101, %90
  %103 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 1
  store i64 %102, i64* %103, align 8
  %104 = shl i64 8, %81
  %105 = add i64 %99, -1
  %106 = add i64 %105, %104
  %107 = add nuw nsw i64 %81, 3
  %108 = lshr i64 %106, %107
  %109 = shl i64 %108, %81
  %110 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 8
  store i64 %109, i64* %110, align 8
  %111 = shl i64 8, %84
  %112 = add i64 %102, -1
  %113 = add i64 %112, %111
  %114 = add nuw nsw i64 %84, 3
  %115 = lshr i64 %113, %114
  %116 = shl i64 %115, %84
  %117 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 9
  store i64 %116, i64* %117, align 8
  %118 = shl i64 %109, 3
  %119 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 6
  store i64 %118, i64* %119, align 8
  %120 = shl i64 %116, 3
  %121 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 7
  store i64 %120, i64* %121, align 8
  br i1 %87, label %122, label %123

122:                                              ; preds = %71
  store i64 %99, i64* %119, align 8
  store i64 %102, i64* %121, align 8
  br label %123

123:                                              ; preds = %71, %122
  %124 = phi i64 [ %102, %122 ], [ %120, %71 ]
  %125 = phi i64 [ %99, %122 ], [ %118, %71 ]
  %126 = mul i64 %125, %90
  %127 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 4
  store i64 %126, i64* %127, align 8
  %128 = mul i64 %124, %90
  %129 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 5
  store i64 %128, i64* %129, align 8
  %130 = add i64 %105, %91
  %131 = add nuw nsw i64 %78, 7
  %132 = lshr i64 %130, %131
  %133 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 10
  store i64 %132, i64* %133, align 8
  %134 = add i64 %112, %91
  %135 = lshr i64 %134, %131
  %136 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 11
  store i64 %135, i64* %136, align 8
  %137 = add i64 %91, -1
  %138 = add i64 %109, %137
  %139 = lshr i64 %138, %131
  %140 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 12
  store i64 %139, i64* %140, align 8
  %141 = add i64 %116, %137
  %142 = lshr i64 %141, %131
  %143 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 13
  store i64 %142, i64* %143, align 8
  %144 = mul i64 %135, %132
  %145 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 14
  store i64 %144, i64* %145, align 8
  %146 = mul i64 %142, %139
  %147 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 15
  store i64 %146, i64* %147, align 8
  ret void
}

declare dereferenceable(152) %"struct.jxl::ColorEncoding"* @_ZN3jxl13ColorEncoding10LinearSRGBEb(i1 zeroext) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl17LossyFrameEncoderC2ERKNS_14CompressParamsERKNS_11FrameHeaderEPNS_18PassesEncoderStateEPNS_10ThreadPoolEPNS_6AuxOutE(%"class.jxl::LossyFrameEncoder"*, %"struct.jxl::CompressParams"* dereferenceable(360), %"struct.jxl::FrameHeader"* dereferenceable(576), %"struct.jxl::PassesEncoderState"* noalias, %"class.jxl::ThreadPool"*, %"struct.jxl::AuxOut"*) unnamed_addr #0 comdat align 2 {
  %7 = getelementptr inbounds %"class.jxl::LossyFrameEncoder", %"class.jxl::LossyFrameEncoder"* %0, i64 0, i32 0
  store %"struct.jxl::PassesEncoderState"* %3, %"struct.jxl::PassesEncoderState"** %7, align 8
  %8 = getelementptr inbounds %"class.jxl::LossyFrameEncoder", %"class.jxl::LossyFrameEncoder"* %0, i64 0, i32 1
  store %"class.jxl::ThreadPool"* %4, %"class.jxl::ThreadPool"** %8, align 8
  %9 = getelementptr inbounds %"class.jxl::LossyFrameEncoder", %"class.jxl::LossyFrameEncoder"* %0, i64 0, i32 2
  store %"struct.jxl::AuxOut"* %5, %"struct.jxl::AuxOut"** %9, align 8
  %10 = getelementptr inbounds %"class.jxl::LossyFrameEncoder", %"class.jxl::LossyFrameEncoder"* %0, i64 0, i32 3
  %11 = bitcast %"class.std::__1::vector.287"* %10 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 24, i1 false) #8
  %12 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %3, i64 0, i32 0
  %13 = tail call i32 @_ZN3jxl27InitializePassesSharedStateERKNS_11FrameHeaderEPNS_17PassesSharedStateEb(%"struct.jxl::FrameHeader"* dereferenceable(576) %2, %"struct.jxl::PassesSharedState"* %12, i1 zeroext true) #8
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %18, label %15

15:                                               ; preds = %6
  %16 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.37, i64 0, i64 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.1, i64 0, i64 0), i32 476, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.38, i64 0, i64 0)) #8
  %17 = tail call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

18:                                               ; preds = %6
  %19 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %7, align 8
  %20 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %19, i64 0, i32 6
  %21 = bitcast %"struct.jxl::CompressParams"* %20 to i8*
  %22 = bitcast %"struct.jxl::CompressParams"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 68, i1 false) #8
  %23 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %19, i64 0, i32 6, i32 13, i32 1
  %24 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %1, i64 0, i32 13, i32 1
  %25 = bitcast [3 x i32]* %23 to i8*
  %26 = bitcast [3 x i32]* %24 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %25, i8* align 8 %26, i64 14, i1 false) #8
  %27 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %19, i64 0, i32 6, i32 14
  %28 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %1, i64 0, i32 14
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %27, i8* align 8 %28, i64 117, i1 false) #8
  %29 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %19, i64 0, i32 6, i32 39
  %30 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %1, i64 0, i32 39
  %31 = bitcast %"struct.jxl::ModularOptions"* %29 to i8*
  %32 = bitcast %"struct.jxl::ModularOptions"* %30 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 16, i1 false) #8
  %33 = icmp eq %"struct.jxl::CompressParams"* %20, %1
  br i1 %33, label %40, label %34

34:                                               ; preds = %18
  %35 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %19, i64 0, i32 6, i32 39, i32 3
  %36 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %1, i64 0, i32 39, i32 3, i32 0, i32 0
  %37 = load i32*, i32** %36, align 8
  %38 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %1, i64 0, i32 39, i32 3, i32 0, i32 1
  %39 = load i32*, i32** %38, align 8
  tail call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE6assignIPjEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector"* %35, i32* %37, i32* %39) #8
  br label %40

40:                                               ; preds = %18, %34
  %41 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %19, i64 0, i32 6, i32 39, i32 4
  %42 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %1, i64 0, i32 39, i32 4
  %43 = bitcast float* %41 to i8*
  %44 = bitcast float* %42 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %43, i8* align 8 %44, i64 41, i1 false) #8
  %45 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %1, i64 0, i32 40
  %46 = load i32, i32* %45, align 8
  %47 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %19, i64 0, i32 6, i32 40
  store i32 %46, i32* %47, align 8
  %48 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %19, i64 0, i32 6, i32 41
  %49 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %1, i64 0, i32 41
  %50 = bitcast %"struct.std::__1::pair"* %49 to i32*
  %51 = load i32, i32* %50, align 4
  %52 = bitcast %"struct.std::__1::pair"* %48 to i32*
  store i32 %51, i32* %52, align 4
  %53 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %1, i64 0, i32 41, i32 1
  %54 = bitcast float* %53 to i32*
  %55 = load i32, i32* %54, align 4
  %56 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %19, i64 0, i32 6, i32 41, i32 1
  %57 = bitcast float* %56 to i32*
  store i32 %55, i32* %57, align 4
  %58 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %19, i64 0, i32 6, i32 42
  %59 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %1, i64 0, i32 42
  %60 = bitcast i32* %58 to i8*
  %61 = bitcast i32* %59 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %60, i8* align 4 %61, i64 44, i1 false) #8
  %62 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %7, align 8
  %63 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %62, i64 0, i32 7, i32 0, i32 0
  %64 = load %"struct.jxl::PassesEncoderState::PassData"*, %"struct.jxl::PassesEncoderState::PassData"** %63, align 8
  %65 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %62, i64 0, i32 7, i32 0, i32 1
  %66 = load %"struct.jxl::PassesEncoderState::PassData"*, %"struct.jxl::PassesEncoderState::PassData"** %65, align 8
  %67 = icmp eq %"struct.jxl::PassesEncoderState::PassData"* %66, %64
  br i1 %67, label %72, label %68

68:                                               ; preds = %40, %68
  %69 = phi %"struct.jxl::PassesEncoderState::PassData"* [ %70, %68 ], [ %66, %40 ]
  %70 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %69, i64 -1
  tail call void @_ZN3jxl18PassesEncoderState8PassDataD2Ev(%"struct.jxl::PassesEncoderState::PassData"* %70) #8
  %71 = icmp eq %"struct.jxl::PassesEncoderState::PassData"* %70, %64
  br i1 %71, label %72, label %68

72:                                               ; preds = %68, %40
  store %"struct.jxl::PassesEncoderState::PassData"* %64, %"struct.jxl::PassesEncoderState::PassData"** %65, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3jxl17LossyFrameEncoder26ComputeJPEGTranscodingDataERKNS_4jpeg8JPEGDataEPNS_19ModularFrameEncoderEPNS_11FrameHeaderE(%"class.jxl::LossyFrameEncoder"*, %"struct.jxl::jpeg::JPEGData"* dereferenceable(296), %"class.jxl::ModularFrameEncoder"*, %"struct.jxl::FrameHeader"*) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca [216 x i8], align 4
  %6 = alloca [112 x i8], align 4
  %7 = alloca [216 x i8], align 4
  %8 = alloca %"class.jxl::ModularFrameEncoder"*, align 8
  %9 = alloca %"struct.jxl::FrameHeader"*, align 8
  %10 = alloca %"struct.jxl::FrameDimensions", align 8
  %11 = alloca %"struct.jxl::ColorCorrelationMap", align 8
  %12 = alloca %"class.std::__1::unique_ptr.402", align 8
  %13 = alloca [3 x float], align 4
  %14 = alloca %"class.std::__1::vector.104", align 8
  %15 = alloca %"class.jxl::QuantEncoding", align 8
  %16 = alloca %"struct.std::__1::array.408", align 8
  %17 = alloca [3 x float], align 4
  %18 = alloca %"class.jxl::QuantEncoding", align 8
  %19 = alloca %"class.jxl::Quantizer", align 8
  %20 = alloca %"class.std::__1::vector.118", align 8
  %21 = alloca %class.anon.409, align 8
  %22 = alloca %"class.jxl::Image3", align 8
  %23 = alloca i64, align 8
  %24 = alloca %"class.jxl::Plane.132"*, align 8
  %25 = alloca float, align 4
  %26 = alloca float, align 4
  %27 = alloca float, align 4
  %28 = alloca %class.anon.410, align 8
  %29 = alloca %"struct.jxl::ThreadPool::SkipInit", align 1
  %30 = alloca [3 x %"class.std::__1::vector.147"], align 16
  %31 = bitcast [3 x %"class.std::__1::vector.147"]* %30 to i8*
  %32 = alloca [3 x i64], align 16
  %33 = alloca i8, align 1
  %34 = alloca %class.anon.412, align 8
  %35 = alloca %"struct.jxl::ThreadPool::SkipInit", align 1
  %36 = alloca %class.anon.414, align 8
  %37 = alloca %class.anon.415, align 8
  store %"class.jxl::ModularFrameEncoder"* %2, %"class.jxl::ModularFrameEncoder"** %8, align 8
  store %"struct.jxl::FrameHeader"* %3, %"struct.jxl::FrameHeader"** %9, align 8
  %38 = getelementptr inbounds %"class.jxl::LossyFrameEncoder", %"class.jxl::LossyFrameEncoder"* %0, i64 0, i32 0
  %39 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %38, align 8
  %40 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0
  %41 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %3, i64 0, i32 9
  store i32 2, i32* %41, align 4
  %42 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %3, i64 0, i32 10
  store i32 2, i32* %42, align 8
  %43 = bitcast %"struct.jxl::FrameDimensions"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %43) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %43, i8 -86, i64 144, i1 false)
  call void @_ZNK3jxl11FrameHeader17ToFrameDimensionsEv(%"struct.jxl::FrameDimensions"* nonnull sret %10, %"struct.jxl::FrameHeader"* %3)
  %44 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %10, i64 0, i32 6
  %45 = load i64, i64* %44, align 8
  %46 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %10, i64 0, i32 7
  %47 = load i64, i64* %46, align 8
  %48 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %10, i64 0, i32 8
  %49 = load i64, i64* %48, align 8
  %50 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %10, i64 0, i32 9
  %51 = load i64, i64* %50, align 8
  %52 = bitcast %"struct.jxl::ColorCorrelationMap"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %52) #8
  call void @_ZN3jxl19ColorCorrelationMapC1Emmb(%"struct.jxl::ColorCorrelationMap"* nonnull %11, i64 %45, i64 %47, i1 zeroext false) #8
  %53 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 8
  %54 = bitcast %"struct.jxl::ColorCorrelationMap"* %53 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %54, i8* nonnull align 8 %52, i64 24, i1 false) #8
  %55 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 8, i32 0, i32 0, i32 5
  %56 = getelementptr inbounds %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ColorCorrelationMap"* %11, i64 0, i32 0, i32 0, i32 5
  %57 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %56, i64 0, i32 0, i32 0, i32 0
  %58 = bitcast %"class.std::__1::unique_ptr"* %56 to i64*
  %59 = load i64, i64* %58, align 8
  store i8* null, i8** %57, align 8
  %60 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %55, i64 0, i32 0, i32 0, i32 0
  %61 = load i8*, i8** %60, align 8
  %62 = bitcast %"class.std::__1::unique_ptr"* %55 to i64*
  store i64 %59, i64* %62, align 8
  %63 = icmp eq i8* %61, null
  br i1 %63, label %65, label %64

64:                                               ; preds = %4
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %61) #8
  br label %65

65:                                               ; preds = %64, %4
  %66 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 8, i32 1
  %67 = getelementptr inbounds %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ColorCorrelationMap"* %11, i64 0, i32 1
  %68 = bitcast %"class.jxl::Plane.132"* %66 to i8*
  %69 = bitcast %"class.jxl::Plane.132"* %67 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %68, i8* align 8 %69, i64 24, i1 false) #8
  %70 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 8, i32 1, i32 0, i32 5
  %71 = getelementptr inbounds %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ColorCorrelationMap"* %11, i64 0, i32 1, i32 0, i32 5
  %72 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %71, i64 0, i32 0, i32 0, i32 0
  %73 = bitcast %"class.std::__1::unique_ptr"* %71 to i64*
  %74 = load i64, i64* %73, align 8
  store i8* null, i8** %72, align 8
  %75 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %70, i64 0, i32 0, i32 0, i32 0
  %76 = load i8*, i8** %75, align 8
  %77 = bitcast %"class.std::__1::unique_ptr"* %70 to i64*
  store i64 %74, i64* %77, align 8
  %78 = icmp eq i8* %76, null
  br i1 %78, label %82, label %79

79:                                               ; preds = %65
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %76) #8
  %80 = getelementptr inbounds %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ColorCorrelationMap"* %11, i64 0, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %81 = load i8*, i8** %80, align 8
  br label %82

82:                                               ; preds = %65, %79
  %83 = phi i8* [ null, %65 ], [ %81, %79 ]
  %84 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 8, i32 2
  %85 = getelementptr inbounds %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ColorCorrelationMap"* %11, i64 0, i32 2
  %86 = bitcast [4 x float]* %84 to i8*
  %87 = bitcast [4 x float]* %85 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %86, i8* align 8 %87, i64 40, i1 false) #8
  %88 = getelementptr inbounds %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ColorCorrelationMap"* %11, i64 0, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %88, align 8
  %89 = icmp eq i8* %83, null
  br i1 %89, label %91, label %90

90:                                               ; preds = %82
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %83) #8
  br label %91

91:                                               ; preds = %90, %82
  %92 = getelementptr inbounds %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ColorCorrelationMap"* %11, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %93 = load i8*, i8** %92, align 8
  store i8* null, i8** %92, align 8
  %94 = icmp eq i8* %93, null
  br i1 %94, label %96, label %95

95:                                               ; preds = %91
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %93) #8
  br label %96

96:                                               ; preds = %91, %95
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %52) #8
  %97 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 3, i32 0, i32 0, i32 0
  %98 = load i32, i32* %97, align 8
  %99 = zext i32 %98 to i64
  %100 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 3, i32 0, i32 0, i32 1
  %101 = load i32, i32* %100, align 4
  %102 = zext i32 %101 to i64
  %103 = icmp eq i32 %101, 0
  br i1 %103, label %144, label %104

104:                                              ; preds = %96
  %105 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 3, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %106 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 3, i32 0, i32 0, i32 4
  %107 = icmp eq i32 %98, 0
  %108 = and i64 %102, 1
  %109 = icmp eq i32 %101, 1
  br i1 %109, label %132, label %110

110:                                              ; preds = %104
  %111 = sub nsw i64 %102, %108
  br label %112

112:                                              ; preds = %1776, %110
  %113 = phi i64 [ 0, %110 ], [ %1777, %1776 ]
  %114 = phi i64 [ %111, %110 ], [ %1778, %1776 ]
  %115 = load i8*, i8** %105, align 8
  %116 = load i64, i64* %106, align 8
  %117 = mul i64 %116, %113
  %118 = getelementptr inbounds i8, i8* %115, i64 %117
  %119 = ptrtoint i8* %118 to i64
  %120 = and i64 %119, 63
  %121 = icmp eq i64 %120, 0
  call void @llvm.assume(i1 %121) #8
  br i1 %107, label %123, label %122

122:                                              ; preds = %112
  call void @llvm.memset.p0i8.i64(i8* align 64 %118, i8 1, i64 %99, i1 false) #8
  br label %123

123:                                              ; preds = %122, %112
  %124 = or i64 %113, 1
  %125 = load i8*, i8** %105, align 8
  %126 = load i64, i64* %106, align 8
  %127 = mul i64 %126, %124
  %128 = getelementptr inbounds i8, i8* %125, i64 %127
  %129 = ptrtoint i8* %128 to i64
  %130 = and i64 %129, 63
  %131 = icmp eq i64 %130, 0
  call void @llvm.assume(i1 %131) #8
  br i1 %107, label %1776, label %1775

132:                                              ; preds = %1776, %104
  %133 = phi i64 [ 0, %104 ], [ %1777, %1776 ]
  %134 = icmp eq i64 %108, 0
  br i1 %134, label %144, label %135

135:                                              ; preds = %132
  %136 = load i8*, i8** %105, align 8
  %137 = load i64, i64* %106, align 8
  %138 = mul i64 %137, %133
  %139 = getelementptr inbounds i8, i8* %136, i64 %138
  %140 = ptrtoint i8* %139 to i64
  %141 = and i64 %140, 63
  %142 = icmp eq i64 %141, 0
  call void @llvm.assume(i1 %142) #8
  br i1 %107, label %144, label %143

143:                                              ; preds = %135
  call void @llvm.memset.p0i8.i64(i8* align 64 %139, i8 1, i64 %99, i1 false) #8
  br label %144

144:                                              ; preds = %132, %135, %143, %96
  %145 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 7, i32 0, i32 1
  %146 = load i32, i32* %145, align 4
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %180, label %148

148:                                              ; preds = %144
  %149 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 7, i32 0, i32 5, i32 0, i32 0, i32 0
  %150 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 7, i32 0, i32 4
  %151 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 7, i32 0, i32 0
  %152 = load i32, i32* %151, align 8
  br label %153

153:                                              ; preds = %167, %148
  %154 = phi i32 [ %146, %148 ], [ %168, %167 ]
  %155 = phi i32 [ %152, %148 ], [ %169, %167 ]
  %156 = phi i64 [ 0, %148 ], [ %170, %167 ]
  %157 = load i8*, i8** %149, align 8
  %158 = load i64, i64* %150, align 8
  %159 = mul i64 %158, %156
  %160 = getelementptr inbounds i8, i8* %157, i64 %159
  %161 = ptrtoint i8* %160 to i64
  %162 = and i64 %161, 63
  %163 = icmp eq i64 %162, 0
  call void @llvm.assume(i1 %163) #8
  %164 = icmp eq i32 %155, 0
  br i1 %164, label %167, label %173

165:                                              ; preds = %173
  %166 = load i32, i32* %145, align 4
  br label %167

167:                                              ; preds = %165, %153
  %168 = phi i32 [ %166, %165 ], [ %154, %153 ]
  %169 = phi i32 [ %177, %165 ], [ 0, %153 ]
  %170 = add nuw nsw i64 %156, 1
  %171 = zext i32 %168 to i64
  %172 = icmp ult i64 %170, %171
  br i1 %172, label %153, label %180

173:                                              ; preds = %153, %173
  %174 = phi i64 [ %176, %173 ], [ 0, %153 ]
  %175 = getelementptr inbounds i8, i8* %160, i64 %174
  store i8 0, i8* %175, align 1
  %176 = add nuw nsw i64 %174, 1
  %177 = load i32, i32* %151, align 8
  %178 = zext i32 %177 to i64
  %179 = icmp ult i64 %176, %178
  br i1 %179, label %173, label %165

180:                                              ; preds = %167, %144
  %181 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %38, align 8
  %182 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %181, i64 0, i32 3, i32 0, i32 0
  %183 = load %"class.std::__1::unique_ptr.180"*, %"class.std::__1::unique_ptr.180"** %182, align 8
  %184 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %181, i64 0, i32 3, i32 0, i32 1
  %185 = load %"class.std::__1::unique_ptr.180"*, %"class.std::__1::unique_ptr.180"** %184, align 8
  %186 = icmp eq %"class.std::__1::unique_ptr.180"* %185, %183
  br i1 %186, label %200, label %187

187:                                              ; preds = %180, %198
  %188 = phi %"class.std::__1::unique_ptr.180"* [ %189, %198 ], [ %185, %180 ]
  %189 = getelementptr inbounds %"class.std::__1::unique_ptr.180", %"class.std::__1::unique_ptr.180"* %188, i64 -1
  %190 = getelementptr inbounds %"class.std::__1::unique_ptr.180", %"class.std::__1::unique_ptr.180"* %189, i64 0, i32 0, i32 0, i32 0
  %191 = load %"class.jxl::ACImage"*, %"class.jxl::ACImage"** %190, align 8
  store %"class.jxl::ACImage"* null, %"class.jxl::ACImage"** %190, align 8
  %192 = icmp eq %"class.jxl::ACImage"* %191, null
  br i1 %192, label %198, label %193

193:                                              ; preds = %187
  %194 = bitcast %"class.jxl::ACImage"* %191 to void (%"class.jxl::ACImage"*)***
  %195 = load void (%"class.jxl::ACImage"*)**, void (%"class.jxl::ACImage"*)*** %194, align 8
  %196 = getelementptr inbounds void (%"class.jxl::ACImage"*)*, void (%"class.jxl::ACImage"*)** %195, i64 1
  %197 = load void (%"class.jxl::ACImage"*)*, void (%"class.jxl::ACImage"*)** %196, align 8
  call void %197(%"class.jxl::ACImage"* nonnull %191) #8
  br label %198

198:                                              ; preds = %193, %187
  %199 = icmp eq %"class.std::__1::unique_ptr.180"* %189, %183
  br i1 %199, label %200, label %187

200:                                              ; preds = %198, %180
  store %"class.std::__1::unique_ptr.180"* %183, %"class.std::__1::unique_ptr.180"** %184, align 8
  %201 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %38, align 8
  %202 = bitcast %"class.std::__1::unique_ptr.402"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %202) #8
  %203 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %10, i64 0, i32 14
  %204 = call i8* @_Znwm(i64 104) #13
  %205 = bitcast i8* %204 to %"class.jxl::ACImageT"*
  %206 = load i64, i64* %203, align 8
  call void @_ZN3jxl8ACImageTIiEC2Emm(%"class.jxl::ACImageT"* nonnull %205, i64 65536, i64 %206) #8
  %207 = getelementptr inbounds %"class.std::__1::unique_ptr.402", %"class.std::__1::unique_ptr.402"* %12, i64 0, i32 0, i32 0, i32 0
  %208 = bitcast %"class.std::__1::unique_ptr.402"* %12 to i8**
  store i8* %204, i8** %208, align 8
  %209 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %201, i64 0, i32 3, i32 0, i32 1
  %210 = load %"class.std::__1::unique_ptr.180"*, %"class.std::__1::unique_ptr.180"** %209, align 8
  %211 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %201, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0
  %212 = load %"class.std::__1::unique_ptr.180"*, %"class.std::__1::unique_ptr.180"** %211, align 8
  %213 = icmp ult %"class.std::__1::unique_ptr.180"* %210, %212
  br i1 %213, label %214, label %220

214:                                              ; preds = %200
  %215 = ptrtoint i8* %204 to i64
  store %"class.jxl::ACImageT"* null, %"class.jxl::ACImageT"** %207, align 8
  %216 = bitcast %"class.std::__1::unique_ptr.180"* %210 to i64*
  store i64 %215, i64* %216, align 8
  %217 = getelementptr inbounds %"class.std::__1::unique_ptr.180", %"class.std::__1::unique_ptr.180"* %210, i64 1
  %218 = ptrtoint %"class.std::__1::unique_ptr.180"* %217 to i64
  %219 = bitcast %"class.std::__1::unique_ptr.180"** %209 to i64*
  store i64 %218, i64* %219, align 8
  br label %222

220:                                              ; preds = %200
  %221 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %201, i64 0, i32 3
  call void @_ZNSt3__16vectorINS_10unique_ptrIN3jxl7ACImageENS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE24__emplace_back_slow_pathIJNS1_INS2_8ACImageTIiEENS4_ISC_EEEEEEEvDpOT_(%"class.std::__1::vector.178"* %221, %"class.std::__1::unique_ptr.402"* nonnull dereferenceable(8) %12) #8
  br label %222

222:                                              ; preds = %214, %220
  %223 = load %"class.jxl::ACImageT"*, %"class.jxl::ACImageT"** %207, align 8
  store %"class.jxl::ACImageT"* null, %"class.jxl::ACImageT"** %207, align 8
  %224 = icmp eq %"class.jxl::ACImageT"* %223, null
  br i1 %224, label %230, label %225

225:                                              ; preds = %222
  %226 = bitcast %"class.jxl::ACImageT"* %223 to void (%"class.jxl::ACImageT"*)***
  %227 = load void (%"class.jxl::ACImageT"*)**, void (%"class.jxl::ACImageT"*)*** %226, align 8
  %228 = getelementptr inbounds void (%"class.jxl::ACImageT"*)*, void (%"class.jxl::ACImageT"*)** %227, i64 1
  %229 = load void (%"class.jxl::ACImageT"*)*, void (%"class.jxl::ACImageT"*)** %228, align 8
  call void %229(%"class.jxl::ACImageT"* nonnull %223) #8
  br label %230

230:                                              ; preds = %222, %225
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %202) #8
  %231 = bitcast [3 x float]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %231) #8
  %232 = getelementptr inbounds [3 x float], [3 x float]* %13, i64 0, i64 0
  store float 0xFFFFFFFFE0000000, float* %232, align 4
  %233 = getelementptr inbounds [3 x float], [3 x float]* %13, i64 0, i64 1
  store float 0xFFFFFFFFE0000000, float* %233, align 4
  %234 = getelementptr inbounds [3 x float], [3 x float]* %13, i64 0, i64 2
  store float 0xFFFFFFFFE0000000, float* %234, align 4
  %235 = bitcast %"class.std::__1::vector.104"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %235) #8
  %236 = getelementptr inbounds %"class.std::__1::vector.104", %"class.std::__1::vector.104"* %14, i64 0, i32 0, i32 0
  %237 = getelementptr inbounds %"class.std::__1::vector.104", %"class.std::__1::vector.104"* %14, i64 0, i32 0, i32 1
  %238 = bitcast %"class.jxl::QuantEncoding"* %15 to i8*
  %239 = bitcast %"class.std::__1::vector.104"* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %239, i8 -86, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 560, i8* nonnull %238) #8
  %240 = getelementptr inbounds [216 x i8], [216 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %240)
  %241 = getelementptr inbounds [112 x i8], [112 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 112, i8* nonnull %241)
  %242 = getelementptr inbounds [216 x i8], [216 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %242)
  %243 = getelementptr inbounds [216 x i8], [216 x i8]* %5, i64 0, i64 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %243, i8 0, i64 212, i1 false), !alias.scope !29, !noalias !32
  %244 = getelementptr inbounds [112 x i8], [112 x i8]* %6, i64 0, i64 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %244, i8 0, i64 108, i1 false), !alias.scope !29, !noalias !32
  %245 = getelementptr inbounds [216 x i8], [216 x i8]* %7, i64 0, i64 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %245, i8 0, i64 212, i1 false), !alias.scope !29, !noalias !32
  %246 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %15, i64 0, i32 0, i32 0
  store i32 0, i32* %246, align 8, !alias.scope !32
  %247 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %15, i64 0, i32 0, i32 1, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %247, i8* nonnull align 4 %240, i64 216, i1 false) #8
  %248 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %15, i64 0, i32 0, i32 2, i32 2, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %248, i8* nonnull align 4 %241, i64 112, i1 false) #8
  %249 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %15, i64 0, i32 0, i32 3, i32 1, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %249, i8* nonnull align 4 %242, i64 216, i1 false) #8
  %250 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %15, i64 0, i32 0, i32 5, i32 0
  store i8 0, i8* %250, align 8, !alias.scope !32
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %240)
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %241)
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %242)
  call void @_ZNSt3__16vectorIN3jxl13QuantEncodingENS_9allocatorIS2_EEEC2EmRKS2_(%"class.std::__1::vector.104"* nonnull %14, i64 17, %"class.jxl::QuantEncoding"* nonnull dereferenceable(560) %15)
  %251 = load i32, i32* %246, align 8
  %252 = icmp eq i32 %251, 7
  br i1 %252, label %253, label %269

253:                                              ; preds = %230
  %254 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %15, i64 0, i32 0, i32 3
  %255 = bitcast %union.anon.108* %254 to %"class.std::__1::vector.118"**
  %256 = load %"class.std::__1::vector.118"*, %"class.std::__1::vector.118"** %255, align 8
  %257 = icmp eq %"class.std::__1::vector.118"* %256, null
  br i1 %257, label %269, label %258

258:                                              ; preds = %253
  %259 = getelementptr inbounds %"class.std::__1::vector.118", %"class.std::__1::vector.118"* %256, i64 0, i32 0, i32 0
  %260 = load i32*, i32** %259, align 8
  %261 = icmp eq i32* %260, null
  br i1 %261, label %267, label %262

262:                                              ; preds = %258
  %263 = ptrtoint i32* %260 to i64
  %264 = getelementptr inbounds %"class.std::__1::vector.118", %"class.std::__1::vector.118"* %256, i64 0, i32 0, i32 1
  %265 = bitcast i32** %264 to i64*
  store i64 %263, i64* %265, align 8
  %266 = bitcast i32* %260 to i8*
  call void @_ZdlPv(i8* %266) #13
  br label %267

267:                                              ; preds = %262, %258
  %268 = bitcast %"class.std::__1::vector.118"* %256 to i8*
  call void @_ZdlPv(i8* %268) #13
  br label %269

269:                                              ; preds = %230, %253, %267
  call void @llvm.lifetime.end.p0i8(i64 560, i8* nonnull %238) #8
  %270 = bitcast %"struct.std::__1::array.408"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %270) #8
  %271 = getelementptr inbounds %"struct.std::__1::array.408", %"struct.std::__1::array.408"* %16, i64 0, i32 0, i64 0
  store i32 -1431655766, i32* %271, align 8
  %272 = getelementptr inbounds %"struct.std::__1::array.408", %"struct.std::__1::array.408"* %16, i64 0, i32 0, i64 1
  store i32 -1431655766, i32* %272, align 4
  %273 = getelementptr inbounds %"struct.std::__1::array.408", %"struct.std::__1::array.408"* %16, i64 0, i32 0, i64 2
  store i32 -1431655766, i32* %273, align 8
  %274 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 9
  %275 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 9, i32 0, i32 1
  %276 = bitcast %"struct.jxl::jpeg::JPEGComponent"** %275 to i64*
  %277 = load i64, i64* %276, align 8
  %278 = bitcast %"class.std::__1::vector.55"* %274 to i64*
  %279 = load i64, i64* %278, align 8
  %280 = sub i64 %277, %279
  %281 = icmp eq i64 %280, 48
  %282 = inttoptr i64 %279 to %"struct.jxl::jpeg::JPEGComponent"*
  br i1 %281, label %291, label %283

283:                                              ; preds = %269
  %284 = load %"struct.jxl::FrameHeader"*, %"struct.jxl::FrameHeader"** %9, align 8
  %285 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %284, i64 0, i32 5
  %286 = load i32, i32* %285, align 8
  switch i32 %286, label %290 [
    i32 0, label %287
    i32 2, label %291
  ]

287:                                              ; preds = %283
  %288 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.46, i64 0, i64 0), i32 78, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.47, i64 0, i64 0)) #8
  %289 = call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

290:                                              ; preds = %283
  br label %291

291:                                              ; preds = %269, %283, %290
  %292 = phi i64 [ 0, %290 ], [ 0, %269 ], [ 1, %283 ]
  %293 = phi i64 [ 4294967296, %290 ], [ 0, %269 ], [ 0, %283 ]
  %294 = phi i32 [ 2, %290 ], [ 0, %269 ], [ %286, %283 ]
  %295 = or i64 %293, %292
  %296 = bitcast %"struct.std::__1::array.408"* %16 to i64*
  store i64 %295, i64* %296, align 8
  store i32 %294, i32* %273, align 8
  %297 = call i8* @_Znwm(i64 768) #13
  %298 = bitcast i8* %297 to i32*
  %299 = getelementptr inbounds i8, i8* %297, i64 768
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %297, i8 0, i64 768, i1 false) #8
  %300 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 7, i32 0, i32 0
  %301 = trunc i64 %292 to i32
  %302 = load %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"** %300, align 8
  br label %449

303:                                              ; preds = %506
  %304 = bitcast i8* %299 to i32*
  %305 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 4
  call void @_ZN3jxl26DequantMatricesSetCustomDCEPNS_15DequantMatricesEPKf(%"class.jxl::DequantMatrices"* %305, float* nonnull %232) #8
  %306 = bitcast [3 x float]* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %306) #8
  %307 = getelementptr inbounds [3 x float], [3 x float]* %17, i64 0, i64 0
  %308 = getelementptr inbounds [3 x float], [3 x float]* %17, i64 0, i64 1
  %309 = getelementptr inbounds [3 x float], [3 x float]* %17, i64 0, i64 2
  %310 = load float, float* %232, align 4
  %311 = fdiv float 1.000000e+00, %310
  store float %311, float* %307, align 4
  %312 = load float, float* %233, align 4
  %313 = fdiv float 1.000000e+00, %312
  store float %313, float* %308, align 4
  %314 = load float, float* %234, align 4
  %315 = fdiv float 1.000000e+00, %314
  store float %315, float* %309, align 4
  %316 = bitcast %"class.jxl::QuantEncoding"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 560, i8* nonnull %316) #8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %316, i8* align 8 bitcast (%"class.jxl::QuantEncoding"* @__const._ZN3jxl13QuantEncoding3RAWERKNSt3__16vectorIiNS1_9allocatorIiEEEEi.encoding to i8*), i64 560, i1 false) #8
  %317 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %18, i64 0, i32 0, i32 0
  store i32 7, i32* %317, align 8, !alias.scope !35
  %318 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %18, i64 0, i32 0, i32 2
  %319 = bitcast %"struct.jxl::DctQuantWeightParams"* %318 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %319, i8 0, i64 212, i1 false) #8, !alias.scope !35
  %320 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %18, i64 0, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 2
  %321 = bitcast float* %320 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %321, i8 0, i64 100, i1 false) #8, !alias.scope !35
  %322 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %18, i64 0, i32 0, i32 4
  %323 = bitcast %"struct.jxl::DctQuantWeightParams"* %322 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %323, i8 0, i64 212, i1 false) #8, !alias.scope !35
  %324 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %18, i64 0, i32 0, i32 5, i32 0
  store i8 0, i8* %324, align 8, !alias.scope !35
  %325 = call i8* @_Znwm(i64 24) #13, !noalias !35
  %326 = bitcast i8* %325 to %"class.std::__1::vector.118"*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %325, i8 0, i64 24, i1 false) #8, !noalias !35
  %327 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %18, i64 0, i32 0, i32 3
  %328 = bitcast %union.anon.108* %327 to i8**
  store i8* %325, i8** %328, align 8, !alias.scope !35
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE6assignIPiEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIiNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector.118"* nonnull %326, i32* nonnull %298, i32* %304) #8, !noalias !35
  store float 0x3F40101020000000, float* %320, align 8, !alias.scope !35
  %329 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %236, align 8
  %330 = call dereferenceable(560) %"class.jxl::QuantEncoding"* @_ZN3jxl13QuantEncodingaSERKS0_(%"class.jxl::QuantEncoding"* %329, %"class.jxl::QuantEncoding"* nonnull dereferenceable(560) %18)
  %331 = load i32, i32* %317, align 8
  %332 = icmp eq i32 %331, 7
  br i1 %332, label %333, label %348

333:                                              ; preds = %303
  %334 = bitcast %union.anon.108* %327 to %"class.std::__1::vector.118"**
  %335 = load %"class.std::__1::vector.118"*, %"class.std::__1::vector.118"** %334, align 8
  %336 = icmp eq %"class.std::__1::vector.118"* %335, null
  br i1 %336, label %348, label %337

337:                                              ; preds = %333
  %338 = getelementptr inbounds %"class.std::__1::vector.118", %"class.std::__1::vector.118"* %335, i64 0, i32 0, i32 0
  %339 = load i32*, i32** %338, align 8
  %340 = icmp eq i32* %339, null
  br i1 %340, label %346, label %341

341:                                              ; preds = %337
  %342 = ptrtoint i32* %339 to i64
  %343 = getelementptr inbounds %"class.std::__1::vector.118", %"class.std::__1::vector.118"* %335, i64 0, i32 0, i32 1
  %344 = bitcast i32** %343 to i64*
  store i64 %342, i64* %344, align 8
  %345 = bitcast i32* %339 to i8*
  call void @_ZdlPv(i8* %345) #13
  br label %346

346:                                              ; preds = %341, %337
  %347 = bitcast %"class.std::__1::vector.118"* %335 to i8*
  call void @_ZdlPv(i8* %347) #13
  br label %348

348:                                              ; preds = %303, %333, %346
  call void @llvm.lifetime.end.p0i8(i64 560, i8* nonnull %316) #8
  %349 = load %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ModularFrameEncoder"** %8, align 8
  call void @_ZN3jxl24DequantMatricesSetCustomEPNS_15DequantMatricesERKNSt3__16vectorINS_13QuantEncodingENS2_9allocatorIS4_EEEEPNS_19ModularFrameEncoderE(%"class.jxl::DequantMatrices"* %305, %"class.std::__1::vector.104"* nonnull dereferenceable(24) %14, %"class.jxl::ModularFrameEncoder"* %349) #8
  %350 = bitcast %"class.jxl::Quantizer"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %350) #8
  call void @_ZN3jxl9QuantizerC1EPKNS_15DequantMatricesEii(%"class.jxl::Quantizer"* nonnull %19, %"class.jxl::DequantMatrices"* %305, i32 1, i32 65536) #8
  %351 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 5
  %352 = bitcast %"class.jxl::Quantizer"* %351 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %352, i8* nonnull align 8 %350, i64 72, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %350) #8
  %353 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 5, i32 2
  %354 = load i32, i32* %353, align 8
  %355 = sitofp i32 %354 to double
  %356 = fmul double %355, 0x3EF0000000000000
  %357 = fptrunc double %356 to float
  %358 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 5, i32 5
  store float %357, float* %358, align 4
  %359 = fdiv double 6.553600e+04, %355
  %360 = fptrunc double %359 to float
  %361 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 5, i32 4
  store float %360, float* %361, align 8
  %362 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 5, i32 3
  %363 = load i32, i32* %362, align 4
  %364 = sitofp i32 %363 to float
  %365 = fdiv float %360, %364
  %366 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 5, i32 6
  store float %365, float* %366, align 8
  %367 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 5, i32 8
  %368 = load %"class.jxl::DequantMatrices"*, %"class.jxl::DequantMatrices"** %367, align 8
  %369 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %368, i64 0, i32 3, i64 0
  %370 = load float, float* %369, align 4
  %371 = fmul float %365, %370
  %372 = getelementptr inbounds %"class.jxl::Quantizer", %"class.jxl::Quantizer"* %351, i64 0, i32 0, i64 0
  store float %371, float* %372, align 4
  %373 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %368, i64 0, i32 4, i64 0
  %374 = load float, float* %373, align 4
  %375 = fmul float %357, %364
  %376 = fmul float %375, %374
  %377 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 5, i32 1, i64 0
  store float %376, float* %377, align 4
  %378 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %368, i64 0, i32 3, i64 1
  %379 = load float, float* %378, align 4
  %380 = fmul float %365, %379
  %381 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 5, i32 0, i64 1
  store float %380, float* %381, align 4
  %382 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %368, i64 0, i32 4, i64 1
  %383 = load float, float* %382, align 4
  %384 = fmul float %375, %383
  %385 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 5, i32 1, i64 1
  store float %384, float* %385, align 4
  %386 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %368, i64 0, i32 3, i64 2
  %387 = load float, float* %386, align 4
  %388 = fmul float %365, %387
  %389 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 5, i32 0, i64 2
  store float %388, float* %389, align 4
  %390 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %368, i64 0, i32 4, i64 2
  %391 = load float, float* %390, align 4
  %392 = fmul float %375, %391
  %393 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 5, i32 1, i64 2
  store float %392, float* %393, align 4
  %394 = fptosi float %360 to i32
  %395 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 6, i32 0, i32 1
  %396 = load i32, i32* %395, align 4
  %397 = icmp eq i32 %396, 0
  br i1 %397, label %431, label %398

398:                                              ; preds = %348
  %399 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 6, i32 0, i32 5, i32 0, i32 0, i32 0
  %400 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 6, i32 0, i32 4
  %401 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 6, i32 0, i32 0
  %402 = load i32, i32* %401, align 8
  br label %403

403:                                              ; preds = %418, %398
  %404 = phi i32 [ %396, %398 ], [ %419, %418 ]
  %405 = phi i32 [ %402, %398 ], [ %420, %418 ]
  %406 = phi i64 [ 0, %398 ], [ %421, %418 ]
  %407 = load i8*, i8** %399, align 8
  %408 = load i64, i64* %400, align 8
  %409 = mul i64 %408, %406
  %410 = getelementptr inbounds i8, i8* %407, i64 %409
  %411 = ptrtoint i8* %410 to i64
  %412 = and i64 %411, 63
  %413 = icmp eq i64 %412, 0
  call void @llvm.assume(i1 %413) #8
  %414 = bitcast i8* %410 to i32*
  %415 = icmp eq i32 %405, 0
  br i1 %415, label %418, label %424

416:                                              ; preds = %424
  %417 = load i32, i32* %395, align 4
  br label %418

418:                                              ; preds = %416, %403
  %419 = phi i32 [ %417, %416 ], [ %404, %403 ]
  %420 = phi i32 [ %428, %416 ], [ 0, %403 ]
  %421 = add nuw nsw i64 %406, 1
  %422 = zext i32 %419 to i64
  %423 = icmp ult i64 %421, %422
  br i1 %423, label %403, label %431

424:                                              ; preds = %403, %424
  %425 = phi i64 [ %427, %424 ], [ 0, %403 ]
  %426 = getelementptr inbounds i32, i32* %414, i64 %425
  store i32 %394, i32* %426, align 4
  %427 = add nuw nsw i64 %425, 1
  %428 = load i32, i32* %401, align 8
  %429 = zext i32 %428 to i64
  %430 = icmp ult i64 %427, %429
  br i1 %430, label %424, label %416

431:                                              ; preds = %418, %348
  %432 = bitcast %"class.std::__1::vector.118"* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %432) #8
  %433 = getelementptr inbounds %"class.std::__1::vector.118", %"class.std::__1::vector.118"* %20, i64 0, i32 0, i32 0
  %434 = getelementptr inbounds %"class.std::__1::vector.118", %"class.std::__1::vector.118"* %20, i64 0, i32 0, i32 1
  %435 = getelementptr inbounds %"class.std::__1::vector.118", %"class.std::__1::vector.118"* %20, i64 0, i32 0, i32 2, i32 0, i32 0
  %436 = call i8* @_Znwm(i64 768) #13
  %437 = bitcast %"class.std::__1::vector.118"* %20 to i8**
  store i8* %436, i8** %437, align 8
  %438 = getelementptr inbounds i8, i8* %436, i64 768
  %439 = bitcast i32** %435 to i8**
  store i8* %438, i8** %439, align 8
  %440 = bitcast i32** %434 to i64*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %436, i8 0, i64 768, i1 false) #8
  %441 = ptrtoint i8* %438 to i64
  store i64 %441, i64* %440, align 8
  %442 = bitcast i8* %436 to i32*
  %443 = getelementptr inbounds i8, i8* %297, i64 256
  %444 = bitcast i8* %443 to i32*
  %445 = load i32, i32* %444, align 4
  %446 = shl nsw i32 %445, 11
  %447 = load i32, i32* %298, align 4
  %448 = sdiv i32 %446, %447
  store i32 %448, i32* %442, align 4
  br label %516

449:                                              ; preds = %509, %291
  %450 = phi i32 [ %301, %291 ], [ %511, %509 ]
  %451 = phi i64 [ 0, %291 ], [ %507, %509 ]
  %452 = sext i32 %450 to i64
  %453 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %282, i64 %452, i32 3
  %454 = load i32, i32* %453, align 4
  %455 = zext i32 %454 to i64
  %456 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %302, i64 %455, i32 0, i32 0, i64 0
  %457 = load i32, i32* %456, align 4
  %458 = sitofp i32 %457 to float
  %459 = fdiv float 2.040000e+03, %458
  %460 = getelementptr inbounds [3 x float], [3 x float]* %13, i64 0, i64 %451
  store float %459, float* %460, align 4
  %461 = shl i64 %451, 6
  br label %462

462:                                              ; preds = %462, %449
  %463 = phi i64 [ 0, %449 ], [ %504, %462 ]
  %464 = shl i64 %463, 3
  %465 = add nuw nsw i64 %463, %461
  %466 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %302, i64 %455, i32 0, i32 0, i64 %464
  %467 = load i32, i32* %466, align 4
  %468 = getelementptr inbounds i32, i32* %298, i64 %465
  store i32 %467, i32* %468, align 4
  %469 = or i64 %464, 1
  %470 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %302, i64 %455, i32 0, i32 0, i64 %469
  %471 = load i32, i32* %470, align 4
  %472 = add nuw nsw i64 %465, 8
  %473 = getelementptr inbounds i32, i32* %298, i64 %472
  store i32 %471, i32* %473, align 4
  %474 = or i64 %464, 2
  %475 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %302, i64 %455, i32 0, i32 0, i64 %474
  %476 = load i32, i32* %475, align 4
  %477 = add nuw nsw i64 %465, 16
  %478 = getelementptr inbounds i32, i32* %298, i64 %477
  store i32 %476, i32* %478, align 4
  %479 = or i64 %464, 3
  %480 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %302, i64 %455, i32 0, i32 0, i64 %479
  %481 = load i32, i32* %480, align 4
  %482 = add nuw nsw i64 %465, 24
  %483 = getelementptr inbounds i32, i32* %298, i64 %482
  store i32 %481, i32* %483, align 4
  %484 = or i64 %464, 4
  %485 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %302, i64 %455, i32 0, i32 0, i64 %484
  %486 = load i32, i32* %485, align 4
  %487 = add nuw nsw i64 %465, 32
  %488 = getelementptr inbounds i32, i32* %298, i64 %487
  store i32 %486, i32* %488, align 4
  %489 = or i64 %464, 5
  %490 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %302, i64 %455, i32 0, i32 0, i64 %489
  %491 = load i32, i32* %490, align 4
  %492 = add nuw nsw i64 %465, 40
  %493 = getelementptr inbounds i32, i32* %298, i64 %492
  store i32 %491, i32* %493, align 4
  %494 = or i64 %464, 6
  %495 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %302, i64 %455, i32 0, i32 0, i64 %494
  %496 = load i32, i32* %495, align 4
  %497 = add nuw nsw i64 %465, 48
  %498 = getelementptr inbounds i32, i32* %298, i64 %497
  store i32 %496, i32* %498, align 4
  %499 = or i64 %464, 7
  %500 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %302, i64 %455, i32 0, i32 0, i64 %499
  %501 = load i32, i32* %500, align 4
  %502 = add nuw nsw i64 %465, 56
  %503 = getelementptr inbounds i32, i32* %298, i64 %502
  store i32 %501, i32* %503, align 4
  %504 = add nuw nsw i64 %463, 1
  %505 = icmp eq i64 %504, 8
  br i1 %505, label %506, label %462

506:                                              ; preds = %462
  %507 = add nuw nsw i64 %451, 1
  %508 = icmp eq i64 %507, 3
  br i1 %508, label %303, label %509

509:                                              ; preds = %506
  %510 = getelementptr inbounds %"struct.std::__1::array.408", %"struct.std::__1::array.408"* %16, i64 0, i32 0, i64 %507
  %511 = load i32, i32* %510, align 4
  br label %449

512:                                              ; preds = %1746
  %513 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1758, i64 0, i32 7, i32 1, i64 2
  %514 = load i32, i32* %513, align 4
  %515 = icmp eq i32 %514, %1760
  br i1 %515, label %529, label %544

516:                                              ; preds = %1764, %431
  %517 = phi i64 [ 1, %431 ], [ %1774, %1764 ]
  %518 = load i32*, i32** %433, align 8
  %519 = add nuw nsw i64 %517, 64
  %520 = getelementptr inbounds i32, i32* %298, i64 %519
  %521 = load i32, i32* %520, align 4
  %522 = shl nsw i32 %521, 11
  %523 = getelementptr inbounds i32, i32* %298, i64 %517
  %524 = load i32, i32* %523, align 4
  %525 = sdiv i32 %522, %524
  %526 = getelementptr inbounds i32, i32* %518, i64 %517
  store i32 %525, i32* %526, align 4
  %527 = add nuw nsw i64 %517, 1
  %528 = icmp eq i64 %527, 64
  br i1 %528, label %1706, label %1764

529:                                              ; preds = %512
  %530 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %38, align 8
  %531 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %530, i64 0, i32 6, i32 37
  %532 = load i8, i8* %531, align 4, !range !2
  %533 = icmp eq i8 %532, 0
  br i1 %533, label %544, label %534

534:                                              ; preds = %529
  %535 = load i64, i64* %276, align 8
  %536 = load i64, i64* %278, align 8
  %537 = sub i64 %535, %536
  %538 = icmp eq i64 %537, 144
  br i1 %538, label %1664, label %544

539:                                              ; preds = %1664, %1746
  %540 = phi i32 [ %1705, %1664 ], [ %1762, %1746 ]
  %541 = phi i32 [ %1703, %1664 ], [ %1760, %1746 ]
  %542 = phi %"struct.jxl::FrameHeader"* [ %1701, %1664 ], [ %1758, %1746 ]
  %543 = icmp eq i32 %540, %541
  br i1 %543, label %544, label %550

544:                                              ; preds = %512, %534, %529, %539
  %545 = phi %"struct.jxl::FrameHeader"* [ %542, %539 ], [ %1758, %529 ], [ %1758, %534 ], [ %1758, %512 ]
  %546 = phi i32 [ %540, %539 ], [ %1760, %529 ], [ %1760, %534 ], [ %1760, %512 ]
  %547 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %545, i64 0, i32 7, i32 1, i64 2
  %548 = load i32, i32* %547, align 4
  %549 = icmp eq i32 %548, %546
  br i1 %549, label %633, label %550

550:                                              ; preds = %539, %544
  %551 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %22, i64 0, i32 0, i64 0, i32 0, i32 1
  %552 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %22, i64 0, i32 0, i64 0, i32 0, i32 4
  %553 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %22, i64 0, i32 0, i64 0, i32 0, i32 0
  %554 = load i32, i32* %551, align 4
  %555 = icmp eq i32 %554, 0
  br i1 %555, label %623, label %556

556:                                              ; preds = %550
  %557 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %22, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %560

558:                                              ; preds = %560
  %559 = icmp eq i32 %576, 0
  br i1 %559, label %623, label %579

560:                                              ; preds = %560, %556
  %561 = phi i64 [ 0, %556 ], [ %575, %560 ]
  %562 = load i64, i64* %552, align 8
  %563 = mul i64 %562, %561
  %564 = load i8*, i8** %557, align 8
  %565 = ptrtoint i8* %564 to i64
  %566 = and i64 %565, 63
  %567 = icmp eq i64 %566, 0
  call void @llvm.assume(i1 %567) #8
  %568 = getelementptr inbounds i8, i8* %564, i64 %563
  %569 = ptrtoint i8* %568 to i64
  %570 = and i64 %569, 63
  %571 = icmp eq i64 %570, 0
  call void @llvm.assume(i1 %571) #8
  %572 = load i32, i32* %553, align 8
  %573 = zext i32 %572 to i64
  %574 = shl nuw nsw i64 %573, 2
  call void @llvm.memset.p0i8.i64(i8* align 64 %568, i8 0, i64 %574, i1 false) #8
  %575 = add nuw nsw i64 %561, 1
  %576 = load i32, i32* %551, align 4
  %577 = zext i32 %576 to i64
  %578 = icmp ult i64 %575, %577
  br i1 %578, label %560, label %558

579:                                              ; preds = %558
  %580 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %22, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %581

581:                                              ; preds = %581, %579
  %582 = phi i64 [ 0, %579 ], [ %596, %581 ]
  %583 = load i64, i64* %552, align 8
  %584 = mul i64 %583, %582
  %585 = load i8*, i8** %580, align 8
  %586 = ptrtoint i8* %585 to i64
  %587 = and i64 %586, 63
  %588 = icmp eq i64 %587, 0
  call void @llvm.assume(i1 %588) #8
  %589 = getelementptr inbounds i8, i8* %585, i64 %584
  %590 = ptrtoint i8* %589 to i64
  %591 = and i64 %590, 63
  %592 = icmp eq i64 %591, 0
  call void @llvm.assume(i1 %592) #8
  %593 = load i32, i32* %553, align 8
  %594 = zext i32 %593 to i64
  %595 = shl nuw nsw i64 %594, 2
  call void @llvm.memset.p0i8.i64(i8* align 64 %589, i8 0, i64 %595, i1 false) #8
  %596 = add nuw nsw i64 %582, 1
  %597 = load i32, i32* %551, align 4
  %598 = zext i32 %597 to i64
  %599 = icmp ult i64 %596, %598
  br i1 %599, label %581, label %600

600:                                              ; preds = %581
  %601 = icmp eq i32 %597, 0
  br i1 %601, label %623, label %602

602:                                              ; preds = %600
  %603 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %22, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %604

604:                                              ; preds = %604, %602
  %605 = phi i64 [ 0, %602 ], [ %619, %604 ]
  %606 = load i64, i64* %552, align 8
  %607 = mul i64 %606, %605
  %608 = load i8*, i8** %603, align 8
  %609 = ptrtoint i8* %608 to i64
  %610 = and i64 %609, 63
  %611 = icmp eq i64 %610, 0
  call void @llvm.assume(i1 %611) #8
  %612 = getelementptr inbounds i8, i8* %608, i64 %607
  %613 = ptrtoint i8* %612 to i64
  %614 = and i64 %613, 63
  %615 = icmp eq i64 %614, 0
  call void @llvm.assume(i1 %615) #8
  %616 = load i32, i32* %553, align 8
  %617 = zext i32 %616 to i64
  %618 = shl nuw nsw i64 %617, 2
  call void @llvm.memset.p0i8.i64(i8* align 64 %612, i8 0, i64 %618, i1 false) #8
  %619 = add nuw nsw i64 %605, 1
  %620 = load i32, i32* %551, align 4
  %621 = zext i32 %620 to i64
  %622 = icmp ult i64 %619, %621
  br i1 %622, label %604, label %623

623:                                              ; preds = %604, %550, %558, %600
  %624 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %38, align 8
  %625 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %624, i64 0, i32 3, i32 0, i32 0
  %626 = load %"class.std::__1::unique_ptr.180"*, %"class.std::__1::unique_ptr.180"** %625, align 8
  %627 = getelementptr inbounds %"class.std::__1::unique_ptr.180", %"class.std::__1::unique_ptr.180"* %626, i64 0, i32 0, i32 0, i32 0
  %628 = load %"class.jxl::ACImage"*, %"class.jxl::ACImage"** %627, align 8
  %629 = bitcast %"class.jxl::ACImage"* %628 to void (%"class.jxl::ACImage"*)***
  %630 = load void (%"class.jxl::ACImage"*)**, void (%"class.jxl::ACImage"*)*** %629, align 8
  %631 = getelementptr inbounds void (%"class.jxl::ACImage"*)*, void (%"class.jxl::ACImage"*)** %630, i64 6
  %632 = load void (%"class.jxl::ACImage"*)*, void (%"class.jxl::ACImage"*)** %631, align 8
  call void %632(%"class.jxl::ACImage"* %628) #8
  br label %633

633:                                              ; preds = %623, %544
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %31) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %31, i8 0, i64 72, i1 false)
  %634 = getelementptr inbounds [3 x %"class.std::__1::vector.147"], [3 x %"class.std::__1::vector.147"]* %30, i64 0, i64 0
  call void @_ZNSt3__16vectorImNS_9allocatorImEEE8__appendEm(%"class.std::__1::vector.147"* nonnull %634, i64 2048) #8
  %635 = getelementptr inbounds [3 x %"class.std::__1::vector.147"], [3 x %"class.std::__1::vector.147"]* %30, i64 0, i64 1, i32 0, i32 1
  %636 = bitcast i64** %635 to i64*
  %637 = load i64, i64* %636, align 8
  %638 = getelementptr inbounds [3 x %"class.std::__1::vector.147"], [3 x %"class.std::__1::vector.147"]* %30, i64 0, i64 1
  %639 = bitcast %"class.std::__1::vector.147"* %638 to i64*
  %640 = load i64, i64* %639, align 8
  %641 = getelementptr inbounds [3 x %"class.std::__1::vector.147"], [3 x %"class.std::__1::vector.147"]* %30, i64 0, i64 1, i32 0, i32 1
  %642 = sub i64 %637, %640
  %643 = ashr exact i64 %642, 3
  %644 = icmp ult i64 %643, 2048
  %645 = inttoptr i64 %640 to i64*
  br i1 %644, label %646, label %649

646:                                              ; preds = %633
  %647 = getelementptr inbounds [3 x %"class.std::__1::vector.147"], [3 x %"class.std::__1::vector.147"]* %30, i64 0, i64 1
  %648 = sub nuw nsw i64 2048, %643
  call void @_ZNSt3__16vectorImNS_9allocatorImEEE8__appendEm(%"class.std::__1::vector.147"* %647, i64 %648) #8
  br label %653

649:                                              ; preds = %633
  %650 = icmp eq i64 %642, 16384
  br i1 %650, label %653, label %651

651:                                              ; preds = %649
  %652 = getelementptr inbounds i64, i64* %645, i64 2048
  store i64* %652, i64** %641, align 8
  br label %653

653:                                              ; preds = %649, %646, %651
  %654 = getelementptr inbounds [3 x %"class.std::__1::vector.147"], [3 x %"class.std::__1::vector.147"]* %30, i64 0, i64 2
  %655 = getelementptr inbounds [3 x %"class.std::__1::vector.147"], [3 x %"class.std::__1::vector.147"]* %30, i64 0, i64 2, i32 0, i32 1
  %656 = bitcast i64** %655 to i64*
  %657 = load i64, i64* %656, align 8
  %658 = bitcast %"class.std::__1::vector.147"* %654 to i64*
  %659 = load i64, i64* %658, align 16
  %660 = sub i64 %657, %659
  %661 = ashr exact i64 %660, 3
  %662 = icmp ult i64 %661, 2048
  %663 = inttoptr i64 %659 to i64*
  br i1 %662, label %664, label %666

664:                                              ; preds = %653
  %665 = sub nuw nsw i64 2048, %661
  call void @_ZNSt3__16vectorImNS_9allocatorImEEE8__appendEm(%"class.std::__1::vector.147"* %654, i64 %665) #8
  br label %670

666:                                              ; preds = %653
  %667 = icmp eq i64 %660, 16384
  br i1 %667, label %670, label %668

668:                                              ; preds = %666
  %669 = getelementptr inbounds i64, i64* %663, i64 2048
  store i64* %669, i64** %655, align 8
  br label %670

670:                                              ; preds = %666, %664, %668
  %671 = bitcast [3 x i64]* %32 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %671) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %671, i8 0, i64 24, i1 false)
  %672 = getelementptr inbounds %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ColorCorrelationMap"* %53, i64 0, i32 0
  %673 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %10, i64 0, i32 10
  %674 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %22, i64 0, i32 0, i64 0, i32 0, i32 4
  br label %678

675:                                              ; preds = %1147
  %676 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %38, align 8
  %677 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %676, i64 0, i32 0, i32 15, i32 4
  store i64 1, i64* %677, align 8
  br label %1177

678:                                              ; preds = %670, %1147
  %679 = phi i32* [ getelementptr inbounds ([3 x i32], [3 x i32]* @.ref.tmp.40, i64 0, i64 0), %670 ], [ %1148, %1147 ]
  %680 = load i32, i32* %679, align 4
  %681 = sext i32 %680 to i64
  %682 = load i64, i64* %276, align 8
  %683 = load i64, i64* %278, align 8
  %684 = sub i64 %682, %683
  %685 = icmp eq i64 %684, 48
  %686 = icmp ne i32 %680, 1
  %687 = and i1 %686, %685
  br i1 %687, label %688, label %737

688:                                              ; preds = %678
  %689 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %38, align 8
  %690 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %689, i64 0, i32 3, i32 0, i32 0
  %691 = load %"class.std::__1::unique_ptr.180"*, %"class.std::__1::unique_ptr.180"** %690, align 8
  %692 = getelementptr inbounds %"class.std::__1::unique_ptr.180", %"class.std::__1::unique_ptr.180"* %691, i64 0, i32 0, i32 0, i32 0
  %693 = load %"class.jxl::ACImage"*, %"class.jxl::ACImage"** %692, align 8
  %694 = bitcast %"class.jxl::ACImage"* %693 to void (%"class.jxl::ACImage"*, i64)***
  %695 = load void (%"class.jxl::ACImage"*, i64)**, void (%"class.jxl::ACImage"*, i64)*** %694, align 8
  %696 = getelementptr inbounds void (%"class.jxl::ACImage"*, i64)*, void (%"class.jxl::ACImage"*, i64)** %695, i64 7
  %697 = load void (%"class.jxl::ACImage"*, i64)*, void (%"class.jxl::ACImage"*, i64)** %696, align 8
  call void %697(%"class.jxl::ACImage"* %693, i64 %681) #8
  %698 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %22, i64 0, i32 0, i64 %681, i32 0, i32 0
  %699 = load i32, i32* %698, align 8
  %700 = icmp eq i32 %699, 0
  br i1 %700, label %732, label %701

701:                                              ; preds = %688
  %702 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %22, i64 0, i32 0, i64 %681, i32 0, i32 1
  %703 = load i32, i32* %702, align 4
  %704 = icmp eq i32 %703, 0
  br i1 %704, label %732, label %705

705:                                              ; preds = %701
  %706 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %22, i64 0, i32 0, i64 %681, i32 0, i32 5, i32 0, i32 0, i32 0
  %707 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %22, i64 0, i32 0, i64 %681, i32 0, i32 4
  %708 = load i8*, i8** %706, align 8
  %709 = ptrtoint i8* %708 to i64
  %710 = and i64 %709, 63
  %711 = icmp eq i64 %710, 0
  call void @llvm.assume(i1 %711) #8
  %712 = zext i32 %699 to i64
  %713 = shl nuw nsw i64 %712, 2
  call void @llvm.memset.p0i8.i64(i8* align 64 %708, i8 0, i64 %713, i1 false) #8
  %714 = load i32, i32* %702, align 4
  %715 = icmp ugt i32 %714, 1
  br i1 %715, label %716, label %732

716:                                              ; preds = %705, %716
  %717 = phi i64 [ %728, %716 ], [ 1, %705 ]
  %718 = load i32, i32* %698, align 8
  %719 = load i8*, i8** %706, align 8
  %720 = load i64, i64* %707, align 8
  %721 = mul i64 %720, %717
  %722 = getelementptr inbounds i8, i8* %719, i64 %721
  %723 = ptrtoint i8* %722 to i64
  %724 = and i64 %723, 63
  %725 = icmp eq i64 %724, 0
  call void @llvm.assume(i1 %725) #8
  %726 = zext i32 %718 to i64
  %727 = shl nuw nsw i64 %726, 2
  call void @llvm.memset.p0i8.i64(i8* align 64 %722, i8 0, i64 %727, i1 false) #8
  %728 = add nuw nsw i64 %717, 1
  %729 = load i32, i32* %702, align 4
  %730 = zext i32 %729 to i64
  %731 = icmp ult i64 %728, %730
  br i1 %731, label %716, label %732

732:                                              ; preds = %716, %705, %688, %701
  %733 = getelementptr inbounds [3 x %"class.std::__1::vector.147"], [3 x %"class.std::__1::vector.147"]* %30, i64 0, i64 %681, i32 0, i32 0
  %734 = load i64*, i64** %733, align 8
  %735 = getelementptr inbounds i64, i64* %734, i64 1024
  store i64 1, i64* %735, align 8
  %736 = getelementptr inbounds [3 x i64], [3 x i64]* %32, i64 0, i64 %681
  store i64 1, i64* %736, align 8
  br label %1147

737:                                              ; preds = %678
  %738 = load %"struct.jxl::FrameHeader"*, %"struct.jxl::FrameHeader"** %9, align 8
  %739 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %738, i64 0, i32 7, i32 2
  %740 = load i8, i8* %739, align 4
  %741 = zext i8 %740 to i64
  %742 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %738, i64 0, i32 7, i32 1, i64 %681
  %743 = load i32, i32* %742, align 4
  %744 = zext i32 %743 to i64
  %745 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE.const, i64 0, i64 %744
  %746 = load i8, i8* %745, align 1
  %747 = zext i8 %746 to i64
  %748 = sub nsw i64 %741, %747
  %749 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %738, i64 0, i32 7, i32 3
  %750 = load i8, i8* %749, align 1
  %751 = zext i8 %750 to i64
  %752 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE.const, i64 0, i64 %744
  %753 = load i8, i8* %752, align 1
  %754 = zext i8 %753 to i64
  %755 = sub nsw i64 %751, %754
  %756 = icmp eq i32 %680, 0
  %757 = select i1 %756, %"class.jxl::Plane.132"* %672, %"class.jxl::Plane.132"* %66
  %758 = load i64, i64* %203, align 8
  %759 = icmp eq i64 %758, 0
  br i1 %759, label %1147, label %760

760:                                              ; preds = %737
  %761 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %22, i64 0, i32 0, i64 %681, i32 0, i32 5, i32 0, i32 0, i32 0
  %762 = getelementptr inbounds %"class.jxl::Plane.132", %"class.jxl::Plane.132"* %757, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %763 = getelementptr inbounds %"class.jxl::Plane.132", %"class.jxl::Plane.132"* %757, i64 0, i32 0, i32 4
  %764 = shl nsw i64 %681, 6
  %765 = getelementptr inbounds i32, i32* %298, i64 %764
  %766 = getelementptr inbounds [3 x %"class.std::__1::vector.147"], [3 x %"class.std::__1::vector.147"]* %30, i64 0, i64 %681, i32 0, i32 0
  %767 = getelementptr inbounds [3 x i64], [3 x i64]* %32, i64 0, i64 %681
  %768 = getelementptr inbounds [3 x float], [3 x float]* %17, i64 0, i64 %681
  %769 = icmp eq i32 %680, 1
  br label %770

770:                                              ; preds = %760, %796
  %771 = phi i64 [ 0, %760 ], [ %797, %796 ]
  %772 = load i64, i64* %673, align 8
  %773 = udiv i64 %771, %772
  %774 = urem i64 %771, %772
  %775 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %38, align 8
  %776 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %775, i64 0, i32 3, i32 0, i32 0
  %777 = load %"class.std::__1::unique_ptr.180"*, %"class.std::__1::unique_ptr.180"** %776, align 8
  %778 = getelementptr inbounds %"class.std::__1::unique_ptr.180", %"class.std::__1::unique_ptr.180"* %777, i64 0, i32 0, i32 0, i32 0
  %779 = load %"class.jxl::ACImage"*, %"class.jxl::ACImage"** %778, align 8
  %780 = bitcast %"class.jxl::ACImage"* %779 to i32* (%"class.jxl::ACImage"*, i64, i64, i64)***
  %781 = load i32* (%"class.jxl::ACImage"*, i64, i64, i64)**, i32* (%"class.jxl::ACImage"*, i64, i64, i64)*** %780, align 8
  %782 = getelementptr inbounds i32* (%"class.jxl::ACImage"*, i64, i64, i64)*, i32* (%"class.jxl::ACImage"*, i64, i64, i64)** %781, i64 3
  %783 = load i32* (%"class.jxl::ACImage"*, i64, i64, i64)*, i32* (%"class.jxl::ACImage"*, i64, i64, i64)** %782, align 8
  %784 = call i32* %783(%"class.jxl::ACImage"* %779, i64 %681, i64 %771, i64 0) #8
  %785 = shl i64 %773, 5
  %786 = icmp ult i64 %785, %51
  %787 = add i64 %785, 32
  %788 = icmp ne i64 %785, -32
  %789 = and i1 %786, %788
  br i1 %789, label %790, label %796

790:                                              ; preds = %770
  %791 = shl i64 %774, 5
  %792 = icmp ult i64 %791, %49
  %793 = add i64 %791, 32
  %794 = icmp ne i64 %791, -32
  %795 = and i1 %792, %794
  br label %800

796:                                              ; preds = %1141, %770
  %797 = add nuw i64 %771, 1
  %798 = load i64, i64* %203, align 8
  %799 = icmp ult i64 %797, %798
  br i1 %799, label %770, label %1147

800:                                              ; preds = %790, %1141
  %801 = phi i64 [ %785, %790 ], [ %1143, %1141 ]
  %802 = phi i64 [ 0, %790 ], [ %1142, %1141 ]
  %803 = lshr i64 %801, %755
  %804 = shl i64 %803, %755
  %805 = icmp eq i64 %804, %801
  br i1 %805, label %806, label %1141

806:                                              ; preds = %800
  %807 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %1748, align 8
  %808 = load %"struct.std::__1::array.408"*, %"struct.std::__1::array.408"** %1749, align 8
  %809 = getelementptr inbounds %"struct.std::__1::array.408", %"struct.std::__1::array.408"* %808, i64 0, i32 0, i64 %681
  %810 = load i32, i32* %809, align 4
  %811 = sext i32 %810 to i64
  %812 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %807, i64 0, i32 9, i32 0, i32 0
  %813 = load %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"** %812, align 8
  %814 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %813, i64 %811, i32 6, i32 0, i32 0
  %815 = load i16*, i16** %814, align 8
  %816 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %813, i64 %811, i32 4
  %817 = load i32, i32* %816, align 8
  %818 = zext i32 %817 to i64
  %819 = shl i64 %803, 6
  %820 = mul i64 %819, %818
  %821 = getelementptr inbounds i16, i16* %815, i64 %820
  %822 = getelementptr inbounds %"struct.std::__1::array.408", %"struct.std::__1::array.408"* %808, i64 0, i32 0, i64 1
  %823 = load i32, i32* %822, align 4
  %824 = sext i32 %823 to i64
  %825 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %813, i64 %824, i32 6, i32 0, i32 0
  %826 = load i16*, i16** %825, align 8
  %827 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %813, i64 %824, i32 4
  %828 = load i32, i32* %827, align 8
  %829 = zext i32 %828 to i64
  %830 = shl i64 %801, 6
  %831 = mul i64 %830, %829
  %832 = getelementptr inbounds i16, i16* %826, i64 %831
  %833 = load i64, i64* %674, align 8
  %834 = mul i64 %833, %803
  %835 = load i8*, i8** %761, align 8
  %836 = ptrtoint i8* %835 to i64
  %837 = and i64 %836, 63
  %838 = icmp eq i64 %837, 0
  call void @llvm.assume(i1 %838) #8
  %839 = getelementptr inbounds i8, i8* %835, i64 %834
  %840 = ptrtoint i8* %839 to i64
  %841 = and i64 %840, 63
  %842 = icmp eq i64 %841, 0
  call void @llvm.assume(i1 %842) #8
  %843 = bitcast i8* %839 to float*
  %844 = lshr i64 %801, 3
  %845 = load i8*, i8** %762, align 8
  %846 = load i64, i64* %763, align 8
  %847 = mul i64 %846, %844
  %848 = getelementptr inbounds i8, i8* %845, i64 %847
  %849 = ptrtoint i8* %848 to i64
  %850 = and i64 %849, 63
  %851 = icmp eq i64 %850, 0
  call void @llvm.assume(i1 %851) #8
  br i1 %795, label %852, label %1141

852:                                              ; preds = %806, %1135
  %853 = phi i64 [ %1137, %1135 ], [ %791, %806 ]
  %854 = phi i64 [ %1136, %1135 ], [ %802, %806 ]
  %855 = lshr i64 %853, %748
  %856 = shl i64 %855, %748
  %857 = icmp eq i64 %856, %853
  br i1 %857, label %858, label %1135

858:                                              ; preds = %852
  %859 = shl i64 %855, 6
  %860 = getelementptr inbounds i16, i16* %821, i64 %859
  %861 = load i16, i16* %860, align 2
  %862 = sext i16 %861 to i32
  br i1 %1757, label %867, label %863

863:                                              ; preds = %858
  %864 = load i32, i32* %765, align 4
  %865 = sdiv i32 1024, %864
  %866 = add nsw i32 %865, %862
  br label %867

867:                                              ; preds = %858, %863
  %868 = phi i32 [ %866, %863 ], [ %862, %858 ]
  %869 = add nsw i32 %868, 1024
  %870 = icmp ult i32 %869, 2047
  %871 = select i1 %870, i32 %869, i32 2047
  %872 = zext i32 %871 to i64
  %873 = load i64*, i64** %766, align 8
  %874 = getelementptr inbounds i64, i64* %873, i64 %872
  %875 = load i64, i64* %874, align 8
  %876 = add i64 %875, 1
  store i64 %876, i64* %874, align 8
  %877 = load i64, i64* %767, align 8
  %878 = add i64 %877, 1
  store i64 %878, i64* %767, align 8
  %879 = sitofp i32 %868 to float
  %880 = load float, float* %768, align 4
  %881 = fmul float %880, %879
  %882 = getelementptr inbounds float, float* %843, i64 %855
  store float %881, float* %882, align 4
  br i1 %769, label %899, label %883

883:                                              ; preds = %867
  %884 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %38, align 8
  %885 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %884, i64 0, i32 6, i32 37
  %886 = load i8, i8* %885, align 4, !range !2
  %887 = icmp eq i8 %886, 0
  br i1 %887, label %899, label %888

888:                                              ; preds = %883
  %889 = load %"struct.jxl::FrameHeader"*, %"struct.jxl::FrameHeader"** %9, align 8
  %890 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %889, i64 0, i32 7, i32 1, i64 1
  %891 = load i32, i32* %890, align 4
  %892 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %889, i64 0, i32 7, i32 1, i64 0
  %893 = load i32, i32* %892, align 4
  %894 = icmp eq i32 %893, %891
  br i1 %894, label %895, label %899

895:                                              ; preds = %888
  %896 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %889, i64 0, i32 7, i32 1, i64 2
  %897 = load i32, i32* %896, align 4
  %898 = icmp eq i32 %897, %891
  br i1 %898, label %953, label %899

899:                                              ; preds = %888, %883, %895, %867
  br label %900

900:                                              ; preds = %899, %900
  %901 = phi i64 [ %951, %900 ], [ 0, %899 ]
  %902 = add nuw nsw i64 %901, %859
  %903 = shl i64 %901, 3
  %904 = add i64 %903, %854
  %905 = getelementptr inbounds i16, i16* %821, i64 %902
  %906 = load i16, i16* %905, align 2
  %907 = sext i16 %906 to i32
  %908 = getelementptr inbounds i32, i32* %784, i64 %904
  store i32 %907, i32* %908, align 4
  %909 = add nuw nsw i64 %902, 8
  %910 = getelementptr inbounds i16, i16* %821, i64 %909
  %911 = load i16, i16* %910, align 2
  %912 = sext i16 %911 to i32
  %913 = add i64 %904, 1
  %914 = getelementptr inbounds i32, i32* %784, i64 %913
  store i32 %912, i32* %914, align 4
  %915 = add nuw nsw i64 %902, 16
  %916 = getelementptr inbounds i16, i16* %821, i64 %915
  %917 = load i16, i16* %916, align 2
  %918 = sext i16 %917 to i32
  %919 = add i64 %904, 2
  %920 = getelementptr inbounds i32, i32* %784, i64 %919
  store i32 %918, i32* %920, align 4
  %921 = add nuw nsw i64 %902, 24
  %922 = getelementptr inbounds i16, i16* %821, i64 %921
  %923 = load i16, i16* %922, align 2
  %924 = sext i16 %923 to i32
  %925 = add i64 %904, 3
  %926 = getelementptr inbounds i32, i32* %784, i64 %925
  store i32 %924, i32* %926, align 4
  %927 = add nuw nsw i64 %902, 32
  %928 = getelementptr inbounds i16, i16* %821, i64 %927
  %929 = load i16, i16* %928, align 2
  %930 = sext i16 %929 to i32
  %931 = add i64 %904, 4
  %932 = getelementptr inbounds i32, i32* %784, i64 %931
  store i32 %930, i32* %932, align 4
  %933 = add nuw nsw i64 %902, 40
  %934 = getelementptr inbounds i16, i16* %821, i64 %933
  %935 = load i16, i16* %934, align 2
  %936 = sext i16 %935 to i32
  %937 = add i64 %904, 5
  %938 = getelementptr inbounds i32, i32* %784, i64 %937
  store i32 %936, i32* %938, align 4
  %939 = add nuw nsw i64 %902, 48
  %940 = getelementptr inbounds i16, i16* %821, i64 %939
  %941 = load i16, i16* %940, align 2
  %942 = sext i16 %941 to i32
  %943 = add i64 %904, 6
  %944 = getelementptr inbounds i32, i32* %784, i64 %943
  store i32 %942, i32* %944, align 4
  %945 = add nuw nsw i64 %902, 56
  %946 = getelementptr inbounds i16, i16* %821, i64 %945
  %947 = load i16, i16* %946, align 2
  %948 = sext i16 %947 to i32
  %949 = add i64 %904, 7
  %950 = getelementptr inbounds i32, i32* %784, i64 %949
  store i32 %948, i32* %950, align 4
  %951 = add nuw nsw i64 %901, 1
  %952 = icmp eq i64 %951, 8
  br i1 %952, label %1133, label %900

953:                                              ; preds = %895
  %954 = lshr i64 %853, 3
  %955 = getelementptr inbounds i8, i8* %848, i64 %954
  %956 = load i8, i8* %955, align 1
  %957 = sext i8 %956 to i32
  %958 = shl nsw i32 %957, 11
  %959 = sdiv i32 %958, 84
  %960 = shl i64 %853, 6
  br label %961

961:                                              ; preds = %961, %953
  %962 = phi i64 [ 0, %953 ], [ %1131, %961 ]
  %963 = add nuw i64 %962, %960
  %964 = shl i64 %962, 3
  %965 = getelementptr inbounds i16, i16* %832, i64 %963
  %966 = load i16, i16* %965, align 2
  %967 = sext i16 %966 to i32
  %968 = getelementptr inbounds i16, i16* %821, i64 %963
  %969 = load i16, i16* %968, align 2
  %970 = sext i16 %969 to i32
  %971 = add nuw nsw i64 %964, %764
  %972 = load i32*, i32** %433, align 8
  %973 = getelementptr inbounds i32, i32* %972, i64 %971
  %974 = load i32, i32* %973, align 4
  %975 = mul nsw i32 %974, %959
  %976 = add nsw i32 %975, 1024
  %977 = ashr i32 %976, 11
  %978 = mul nsw i32 %977, %967
  %979 = add nsw i32 %978, 1024
  %980 = ashr i32 %979, 11
  %981 = sub nsw i32 %970, %980
  %982 = add i64 %964, %854
  %983 = getelementptr inbounds i32, i32* %784, i64 %982
  store i32 %981, i32* %983, align 4
  %984 = add i64 %963, 8
  %985 = getelementptr inbounds i16, i16* %832, i64 %984
  %986 = load i16, i16* %985, align 2
  %987 = sext i16 %986 to i32
  %988 = getelementptr inbounds i16, i16* %821, i64 %984
  %989 = load i16, i16* %988, align 2
  %990 = sext i16 %989 to i32
  %991 = or i64 %964, 1
  %992 = add nuw nsw i64 %991, %764
  %993 = load i32*, i32** %433, align 8
  %994 = getelementptr inbounds i32, i32* %993, i64 %992
  %995 = load i32, i32* %994, align 4
  %996 = mul nsw i32 %995, %959
  %997 = add nsw i32 %996, 1024
  %998 = ashr i32 %997, 11
  %999 = mul nsw i32 %998, %987
  %1000 = add nsw i32 %999, 1024
  %1001 = ashr i32 %1000, 11
  %1002 = sub nsw i32 %990, %1001
  %1003 = add i64 %991, %854
  %1004 = getelementptr inbounds i32, i32* %784, i64 %1003
  store i32 %1002, i32* %1004, align 4
  %1005 = add i64 %963, 16
  %1006 = getelementptr inbounds i16, i16* %832, i64 %1005
  %1007 = load i16, i16* %1006, align 2
  %1008 = sext i16 %1007 to i32
  %1009 = getelementptr inbounds i16, i16* %821, i64 %1005
  %1010 = load i16, i16* %1009, align 2
  %1011 = sext i16 %1010 to i32
  %1012 = or i64 %964, 2
  %1013 = add nuw nsw i64 %1012, %764
  %1014 = load i32*, i32** %433, align 8
  %1015 = getelementptr inbounds i32, i32* %1014, i64 %1013
  %1016 = load i32, i32* %1015, align 4
  %1017 = mul nsw i32 %1016, %959
  %1018 = add nsw i32 %1017, 1024
  %1019 = ashr i32 %1018, 11
  %1020 = mul nsw i32 %1019, %1008
  %1021 = add nsw i32 %1020, 1024
  %1022 = ashr i32 %1021, 11
  %1023 = sub nsw i32 %1011, %1022
  %1024 = add i64 %1012, %854
  %1025 = getelementptr inbounds i32, i32* %784, i64 %1024
  store i32 %1023, i32* %1025, align 4
  %1026 = add i64 %963, 24
  %1027 = getelementptr inbounds i16, i16* %832, i64 %1026
  %1028 = load i16, i16* %1027, align 2
  %1029 = sext i16 %1028 to i32
  %1030 = getelementptr inbounds i16, i16* %821, i64 %1026
  %1031 = load i16, i16* %1030, align 2
  %1032 = sext i16 %1031 to i32
  %1033 = or i64 %964, 3
  %1034 = add nuw nsw i64 %1033, %764
  %1035 = load i32*, i32** %433, align 8
  %1036 = getelementptr inbounds i32, i32* %1035, i64 %1034
  %1037 = load i32, i32* %1036, align 4
  %1038 = mul nsw i32 %1037, %959
  %1039 = add nsw i32 %1038, 1024
  %1040 = ashr i32 %1039, 11
  %1041 = mul nsw i32 %1040, %1029
  %1042 = add nsw i32 %1041, 1024
  %1043 = ashr i32 %1042, 11
  %1044 = sub nsw i32 %1032, %1043
  %1045 = add i64 %1033, %854
  %1046 = getelementptr inbounds i32, i32* %784, i64 %1045
  store i32 %1044, i32* %1046, align 4
  %1047 = add i64 %963, 32
  %1048 = getelementptr inbounds i16, i16* %832, i64 %1047
  %1049 = load i16, i16* %1048, align 2
  %1050 = sext i16 %1049 to i32
  %1051 = getelementptr inbounds i16, i16* %821, i64 %1047
  %1052 = load i16, i16* %1051, align 2
  %1053 = sext i16 %1052 to i32
  %1054 = or i64 %964, 4
  %1055 = add nuw nsw i64 %1054, %764
  %1056 = load i32*, i32** %433, align 8
  %1057 = getelementptr inbounds i32, i32* %1056, i64 %1055
  %1058 = load i32, i32* %1057, align 4
  %1059 = mul nsw i32 %1058, %959
  %1060 = add nsw i32 %1059, 1024
  %1061 = ashr i32 %1060, 11
  %1062 = mul nsw i32 %1061, %1050
  %1063 = add nsw i32 %1062, 1024
  %1064 = ashr i32 %1063, 11
  %1065 = sub nsw i32 %1053, %1064
  %1066 = add i64 %1054, %854
  %1067 = getelementptr inbounds i32, i32* %784, i64 %1066
  store i32 %1065, i32* %1067, align 4
  %1068 = add i64 %963, 40
  %1069 = getelementptr inbounds i16, i16* %832, i64 %1068
  %1070 = load i16, i16* %1069, align 2
  %1071 = sext i16 %1070 to i32
  %1072 = getelementptr inbounds i16, i16* %821, i64 %1068
  %1073 = load i16, i16* %1072, align 2
  %1074 = sext i16 %1073 to i32
  %1075 = or i64 %964, 5
  %1076 = add nuw nsw i64 %1075, %764
  %1077 = load i32*, i32** %433, align 8
  %1078 = getelementptr inbounds i32, i32* %1077, i64 %1076
  %1079 = load i32, i32* %1078, align 4
  %1080 = mul nsw i32 %1079, %959
  %1081 = add nsw i32 %1080, 1024
  %1082 = ashr i32 %1081, 11
  %1083 = mul nsw i32 %1082, %1071
  %1084 = add nsw i32 %1083, 1024
  %1085 = ashr i32 %1084, 11
  %1086 = sub nsw i32 %1074, %1085
  %1087 = add i64 %1075, %854
  %1088 = getelementptr inbounds i32, i32* %784, i64 %1087
  store i32 %1086, i32* %1088, align 4
  %1089 = add i64 %963, 48
  %1090 = getelementptr inbounds i16, i16* %832, i64 %1089
  %1091 = load i16, i16* %1090, align 2
  %1092 = sext i16 %1091 to i32
  %1093 = getelementptr inbounds i16, i16* %821, i64 %1089
  %1094 = load i16, i16* %1093, align 2
  %1095 = sext i16 %1094 to i32
  %1096 = or i64 %964, 6
  %1097 = add nuw nsw i64 %1096, %764
  %1098 = load i32*, i32** %433, align 8
  %1099 = getelementptr inbounds i32, i32* %1098, i64 %1097
  %1100 = load i32, i32* %1099, align 4
  %1101 = mul nsw i32 %1100, %959
  %1102 = add nsw i32 %1101, 1024
  %1103 = ashr i32 %1102, 11
  %1104 = mul nsw i32 %1103, %1092
  %1105 = add nsw i32 %1104, 1024
  %1106 = ashr i32 %1105, 11
  %1107 = sub nsw i32 %1095, %1106
  %1108 = add i64 %1096, %854
  %1109 = getelementptr inbounds i32, i32* %784, i64 %1108
  store i32 %1107, i32* %1109, align 4
  %1110 = add i64 %963, 56
  %1111 = getelementptr inbounds i16, i16* %832, i64 %1110
  %1112 = load i16, i16* %1111, align 2
  %1113 = sext i16 %1112 to i32
  %1114 = getelementptr inbounds i16, i16* %821, i64 %1110
  %1115 = load i16, i16* %1114, align 2
  %1116 = sext i16 %1115 to i32
  %1117 = or i64 %964, 7
  %1118 = add nuw nsw i64 %1117, %764
  %1119 = load i32*, i32** %433, align 8
  %1120 = getelementptr inbounds i32, i32* %1119, i64 %1118
  %1121 = load i32, i32* %1120, align 4
  %1122 = mul nsw i32 %1121, %959
  %1123 = add nsw i32 %1122, 1024
  %1124 = ashr i32 %1123, 11
  %1125 = mul nsw i32 %1124, %1113
  %1126 = add nsw i32 %1125, 1024
  %1127 = ashr i32 %1126, 11
  %1128 = sub nsw i32 %1116, %1127
  %1129 = add i64 %1117, %854
  %1130 = getelementptr inbounds i32, i32* %784, i64 %1129
  store i32 %1128, i32* %1130, align 4
  %1131 = add nuw nsw i64 %962, 1
  %1132 = icmp eq i64 %1131, 8
  br i1 %1132, label %1133, label %961

1133:                                             ; preds = %961, %900
  %1134 = add i64 %854, 64
  br label %1135

1135:                                             ; preds = %852, %1133
  %1136 = phi i64 [ %854, %852 ], [ %1134, %1133 ]
  %1137 = add i64 %853, 1
  %1138 = icmp ult i64 %1137, %49
  %1139 = icmp ult i64 %1137, %793
  %1140 = and i1 %1138, %1139
  br i1 %1140, label %852, label %1141

1141:                                             ; preds = %1135, %806, %800
  %1142 = phi i64 [ %802, %800 ], [ %802, %806 ], [ %1136, %1135 ]
  %1143 = add nuw i64 %801, 1
  %1144 = icmp ult i64 %1143, %51
  %1145 = icmp ult i64 %1143, %787
  %1146 = and i1 %1144, %1145
  br i1 %1146, label %800, label %796

1147:                                             ; preds = %796, %737, %732
  %1148 = getelementptr inbounds i32, i32* %679, i64 1
  %1149 = icmp eq i32* %1148, getelementptr inbounds ([3 x i32], [3 x i32]* @.ref.tmp.40, i64 1, i64 0)
  br i1 %1149, label %675, label %678

1150:                                             ; preds = %1206
  %1151 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %38, align 8
  %1152 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1151, i64 0, i32 0, i32 15, i32 2
  %1153 = bitcast %"class.std::__1::vector.21"* %1152 to i64*
  %1154 = load i64, i64* %1153, align 8
  %1155 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1151, i64 0, i32 0, i32 15, i32 2, i32 0, i32 1
  %1156 = bitcast i8** %1155 to i64*
  store i64 %1154, i64* %1156, align 8
  %1157 = load i64, i64* %677, align 8
  %1158 = mul i64 %1157, 39
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %33) #8
  store i8 0, i8* %33, align 1
  %1159 = icmp eq i64 %1158, 0
  br i1 %1159, label %1162, label %1160

1160:                                             ; preds = %1150
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEmRKh(%"class.std::__1::vector.21"* %1152, i64 %1158, i8* nonnull dereferenceable(1) %33) #8
  %1161 = load i64, i64* %677, align 8
  br label %1162

1162:                                             ; preds = %1150, %1160
  %1163 = phi i64 [ %1157, %1150 ], [ %1161, %1160 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %33) #8
  %1164 = icmp eq i64 %1163, 0
  br i1 %1164, label %1304, label %1165

1165:                                             ; preds = %1162
  %1166 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %676, i64 0, i32 0, i32 15, i32 0, i64 1, i32 0, i32 1
  %1167 = bitcast i32** %1166 to i64*
  %1168 = load i64, i64* %1167, align 8
  %1169 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %676, i64 0, i32 0, i32 15, i32 0, i64 1
  %1170 = bitcast %"class.std::__1::vector.118"* %1169 to i64*
  %1171 = load i64, i64* %1170, align 8
  %1172 = sub i64 %1168, %1171
  %1173 = shl i64 %1172, 30
  %1174 = add i64 %1173, 4294967296
  %1175 = ashr exact i64 %1174, 32
  %1176 = getelementptr inbounds %"class.std::__1::vector.21", %"class.std::__1::vector.21"* %1152, i64 0, i32 0, i32 0
  br label %1400

1177:                                             ; preds = %1206, %675
  %1178 = phi i64 [ 0, %675 ], [ %1212, %1206 ]
  %1179 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %676, i64 0, i32 0, i32 15, i32 0, i64 %1178
  %1180 = bitcast %"class.std::__1::vector.118"* %1179 to i64*
  %1181 = load i64, i64* %1180, align 8
  %1182 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %676, i64 0, i32 0, i32 15, i32 0, i64 %1178, i32 0, i32 1
  %1183 = bitcast i32** %1182 to i64*
  store i64 %1181, i64* %1183, align 8
  %1184 = getelementptr inbounds [3 x i64], [3 x i64]* %32, i64 0, i64 %1178
  %1185 = load i64, i64* %1184, align 8
  %1186 = call i64 @llvm.ctlz.i64(i64 %1185, i1 true) #8, !range !38
  %1187 = call i64 @llvm.ctpop.i64(i64 %1185) #8, !range !38
  %1188 = icmp ugt i64 %1187, 1
  %1189 = zext i1 %1188 to i64
  %1190 = sub nsw i64 53, %1186
  %1191 = add nsw i64 %1190, %1189
  %1192 = lshr i64 %1191, 1
  %1193 = trunc i64 %1192 to i32
  %1194 = icmp sgt i32 %1193, 0
  %1195 = select i1 %1194, i32 %1193, i32 0
  %1196 = icmp slt i32 %1195, 2
  %1197 = select i1 %1196, i32 %1195, i32 2
  %1198 = add nuw nsw i32 %1197, 1
  %1199 = zext i32 %1198 to i64
  %1200 = udiv i64 %1185, %1199
  %1201 = getelementptr inbounds [3 x %"class.std::__1::vector.147"], [3 x %"class.std::__1::vector.147"]* %30, i64 0, i64 %1178, i32 0, i32 0
  %1202 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %676, i64 0, i32 0, i32 15, i32 0, i64 %1178, i32 0, i32 2, i32 0, i32 0
  %1203 = bitcast i32** %1202 to i64*
  %1204 = getelementptr inbounds %"class.std::__1::vector.118", %"class.std::__1::vector.118"* %1179, i64 0, i32 0, i32 0
  %1205 = inttoptr i64 %1181 to i32*
  br label %1214

1206:                                             ; preds = %1297
  %1207 = sub i64 %1298, %1299
  %1208 = ashr exact i64 %1207, 2
  %1209 = add nsw i64 %1208, 1
  %1210 = load i64, i64* %677, align 8
  %1211 = mul i64 %1209, %1210
  store i64 %1211, i64* %677, align 8
  %1212 = add nuw nsw i64 %1178, 1
  %1213 = icmp eq i64 %1212, 3
  br i1 %1213, label %1150, label %1177

1214:                                             ; preds = %1297, %1177
  %1215 = phi i64 [ %1181, %1177 ], [ %1298, %1297 ]
  %1216 = phi i64 [ %1181, %1177 ], [ %1299, %1297 ]
  %1217 = phi i32* [ %1205, %1177 ], [ %1300, %1297 ]
  %1218 = phi i64 [ 0, %1177 ], [ %1302, %1297 ]
  %1219 = phi i64 [ %1200, %1177 ], [ %1301, %1297 ]
  %1220 = phi i64 [ 0, %1177 ], [ %1224, %1297 ]
  %1221 = load i64*, i64** %1201, align 8
  %1222 = getelementptr inbounds i64, i64* %1221, i64 %1218
  %1223 = load i64, i64* %1222, align 8
  %1224 = add i64 %1223, %1220
  %1225 = icmp ugt i64 %1224, %1219
  br i1 %1225, label %1226, label %1297

1226:                                             ; preds = %1214
  %1227 = add nsw i64 %1218, -1025
  %1228 = load i32*, i32** %1202, align 8
  %1229 = icmp ult i32* %1217, %1228
  %1230 = ptrtoint i32* %1228 to i64
  br i1 %1229, label %1231, label %1235

1231:                                             ; preds = %1226
  %1232 = trunc i64 %1227 to i32
  store i32 %1232, i32* %1217, align 4
  %1233 = getelementptr inbounds i32, i32* %1217, i64 1
  %1234 = ptrtoint i32* %1233 to i64
  store i64 %1234, i64* %1183, align 8
  br label %1288

1235:                                             ; preds = %1226
  %1236 = ptrtoint i32* %1217 to i64
  %1237 = sub i64 %1236, %1216
  %1238 = ashr exact i64 %1237, 2
  %1239 = add nsw i64 %1238, 1
  %1240 = icmp ugt i64 %1239, 4611686018427387903
  br i1 %1240, label %1241, label %1243

1241:                                             ; preds = %1235
  %1242 = bitcast %"class.std::__1::vector.118"* %1179 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %1242) #14
  unreachable

1243:                                             ; preds = %1235
  %1244 = sub i64 %1230, %1216
  %1245 = ashr exact i64 %1244, 2
  %1246 = icmp ult i64 %1245, 2305843009213693951
  br i1 %1246, label %1247, label %1255

1247:                                             ; preds = %1243
  %1248 = ashr exact i64 %1244, 1
  %1249 = icmp ult i64 %1248, %1239
  %1250 = select i1 %1249, i64 %1239, i64 %1248
  %1251 = icmp eq i64 %1250, 0
  br i1 %1251, label %1260, label %1252

1252:                                             ; preds = %1247
  %1253 = icmp ugt i64 %1250, 4611686018427387903
  br i1 %1253, label %1254, label %1255

1254:                                             ; preds = %1252
  call void @abort() #14
  unreachable

1255:                                             ; preds = %1252, %1243
  %1256 = phi i64 [ %1250, %1252 ], [ 4611686018427387903, %1243 ]
  %1257 = shl i64 %1256, 2
  %1258 = call i8* @_Znwm(i64 %1257) #13
  %1259 = bitcast i8* %1258 to i32*
  br label %1260

1260:                                             ; preds = %1255, %1247
  %1261 = phi i64 [ %1256, %1255 ], [ 0, %1247 ]
  %1262 = phi i32* [ %1259, %1255 ], [ null, %1247 ]
  %1263 = getelementptr inbounds i32, i32* %1262, i64 %1238
  %1264 = getelementptr inbounds i32, i32* %1262, i64 %1261
  %1265 = ptrtoint i32* %1264 to i64
  %1266 = trunc i64 %1227 to i32
  store i32 %1266, i32* %1263, align 4
  %1267 = getelementptr inbounds i32, i32* %1263, i64 1
  %1268 = ptrtoint i32* %1267 to i64
  %1269 = load i32*, i32** %1204, align 8
  %1270 = load i64, i64* %1183, align 8
  %1271 = ptrtoint i32* %1269 to i64
  %1272 = sub i64 %1270, %1271
  %1273 = ashr exact i64 %1272, 2
  %1274 = sub nsw i64 0, %1273
  %1275 = getelementptr inbounds i32, i32* %1263, i64 %1274
  %1276 = ptrtoint i32* %1275 to i64
  %1277 = icmp sgt i64 %1272, 0
  br i1 %1277, label %1278, label %1282

1278:                                             ; preds = %1260
  %1279 = bitcast i32* %1275 to i8*
  %1280 = bitcast i32* %1269 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1279, i8* align 4 %1280, i64 %1272, i1 false) #8
  %1281 = load i32*, i32** %1204, align 8
  br label %1282

1282:                                             ; preds = %1278, %1260
  %1283 = phi i32* [ %1269, %1260 ], [ %1281, %1278 ]
  store i64 %1276, i64* %1180, align 8
  store i64 %1268, i64* %1183, align 8
  store i64 %1265, i64* %1203, align 8
  %1284 = icmp eq i32* %1283, null
  br i1 %1284, label %1288, label %1285

1285:                                             ; preds = %1282
  %1286 = bitcast i32* %1283 to i8*
  call void @_ZdlPv(i8* %1286) #13
  %1287 = load i64, i64* %1183, align 8
  br label %1288

1288:                                             ; preds = %1231, %1282, %1285
  %1289 = phi i64 [ %1234, %1231 ], [ %1268, %1282 ], [ %1287, %1285 ]
  %1290 = load i64, i64* %1180, align 8
  %1291 = sub i64 %1289, %1290
  %1292 = ashr exact i64 %1291, 2
  %1293 = add nsw i64 %1292, 1
  %1294 = mul i64 %1293, %1185
  %1295 = udiv i64 %1294, %1199
  %1296 = inttoptr i64 %1289 to i32*
  br label %1297

1297:                                             ; preds = %1214, %1288
  %1298 = phi i64 [ %1289, %1288 ], [ %1215, %1214 ]
  %1299 = phi i64 [ %1290, %1288 ], [ %1216, %1214 ]
  %1300 = phi i32* [ %1296, %1288 ], [ %1217, %1214 ]
  %1301 = phi i64 [ %1295, %1288 ], [ %1219, %1214 ]
  %1302 = add nuw nsw i64 %1218, 1
  %1303 = icmp eq i64 %1302, 2048
  br i1 %1303, label %1206, label %1214

1304:                                             ; preds = %1400, %1162
  %1305 = getelementptr inbounds %"class.std::__1::vector.21", %"class.std::__1::vector.21"* %1152, i64 0, i32 0, i32 0
  %1306 = load i8*, i8** %1305, align 8
  %1307 = load i8*, i8** %1155, align 8
  %1308 = ptrtoint i8* %1306 to i64
  %1309 = icmp eq i8* %1306, %1307
  br i1 %1309, label %1324, label %1310

1310:                                             ; preds = %1304
  %1311 = getelementptr inbounds i8, i8* %1306, i64 1
  %1312 = icmp eq i8* %1311, %1307
  br i1 %1312, label %1324, label %1313

1313:                                             ; preds = %1310, %1313
  %1314 = phi i8* [ %1322, %1313 ], [ %1311, %1310 ]
  %1315 = phi i64 [ %1321, %1313 ], [ %1308, %1310 ]
  %1316 = ptrtoint i8* %1314 to i64
  %1317 = inttoptr i64 %1315 to i8*
  %1318 = load i8, i8* %1317, align 1
  %1319 = load i8, i8* %1314, align 1
  %1320 = icmp ult i8 %1318, %1319
  %1321 = select i1 %1320, i64 %1316, i64 %1315
  %1322 = getelementptr inbounds i8, i8* %1314, i64 1
  %1323 = icmp eq i8* %1322, %1307
  br i1 %1323, label %1324, label %1313

1324:                                             ; preds = %1313, %1304, %1310
  %1325 = phi i64 [ %1308, %1304 ], [ %1308, %1310 ], [ %1321, %1313 ]
  %1326 = inttoptr i64 %1325 to i8*
  %1327 = load i8, i8* %1326, align 1
  %1328 = zext i8 %1327 to i64
  %1329 = add nuw nsw i64 %1328, 1
  %1330 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %38, align 8
  %1331 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1330, i64 0, i32 0, i32 15, i32 3
  store i64 %1329, i64* %1331, align 8
  %1332 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %38, align 8
  %1333 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1332, i64 0, i32 8
  %1334 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 2, i32 14
  %1335 = load i64, i64* %1334, align 8
  %1336 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1332, i64 0, i32 8, i32 0, i32 1
  %1337 = bitcast i8** %1336 to i64*
  %1338 = load i64, i64* %1337, align 8
  %1339 = bitcast %"class.std::__1::vector.21"* %1333 to i64*
  %1340 = load i64, i64* %1339, align 8
  %1341 = sub i64 %1338, %1340
  %1342 = icmp ugt i64 %1335, %1341
  %1343 = inttoptr i64 %1340 to i8*
  br i1 %1342, label %1344, label %1346

1344:                                             ; preds = %1324
  %1345 = sub i64 %1335, %1341
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector.21"* %1333, i64 %1345) #8
  br label %1350

1346:                                             ; preds = %1324
  %1347 = icmp ult i64 %1335, %1341
  br i1 %1347, label %1348, label %1350

1348:                                             ; preds = %1346
  %1349 = getelementptr inbounds i8, i8* %1343, i64 %1335
  store i8* %1349, i8** %1336, align 8
  br label %1350

1350:                                             ; preds = %1344, %1346, %1348
  %1351 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 1, i32 4
  %1352 = load i64, i64* %1351, align 8
  %1353 = and i64 %1352, -33
  store i64 %1353, i64* %1351, align 8
  %1354 = bitcast %class.anon.412* %34 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1354) #8
  %1355 = getelementptr inbounds %class.anon.412, %class.anon.412* %34, i64 0, i32 0
  %1356 = getelementptr inbounds %class.anon.412, %class.anon.412* %34, i64 0, i32 1
  %1357 = getelementptr inbounds %class.anon.412, %class.anon.412* %34, i64 0, i32 2
  store %"class.jxl::ModularFrameEncoder"** %8, %"class.jxl::ModularFrameEncoder"*** %1355, align 8
  store %"class.jxl::Image3"* %22, %"class.jxl::Image3"** %1356, align 8
  store %"class.jxl::LossyFrameEncoder"* %0, %"class.jxl::LossyFrameEncoder"** %1357, align 8
  %1358 = getelementptr inbounds %"class.jxl::LossyFrameEncoder", %"class.jxl::LossyFrameEncoder"* %0, i64 0, i32 1
  %1359 = load %"class.jxl::ThreadPool"*, %"class.jxl::ThreadPool"** %1358, align 8
  %1360 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 2, i32 15
  %1361 = load i64, i64* %1360, align 8
  %1362 = trunc i64 %1361 to i32
  %1363 = getelementptr inbounds %"struct.jxl::ThreadPool::SkipInit", %"struct.jxl::ThreadPool::SkipInit"* %35, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %1363) #8
  %1364 = call zeroext i1 @_ZN3jxl9RunOnPoolINS_10ThreadPool8SkipInitEZNS_17LossyFrameEncoder26ComputeJPEGTranscodingDataERKNS_4jpeg8JPEGDataEPNS_19ModularFrameEncoderEPNS_11FrameHeaderEEUliiE0_EEbPS1_jjRKT_RKT0_PKc(%"class.jxl::ThreadPool"* %1359, i32 0, i32 %1362, %"struct.jxl::ThreadPool::SkipInit"* nonnull dereferenceable(1) %35, %class.anon.412* nonnull dereferenceable(24) %34, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.41, i64 0, i64 0))
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %1363) #8
  %1365 = load i64, i64* %1351, align 8
  %1366 = or i64 %1365, 128
  store i64 %1366, i64* %1351, align 8
  %1367 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %38, align 8
  %1368 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1367, i64 0, i32 7
  %1369 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1367, i64 0, i32 5, i32 0, i32 0
  %1370 = load i64, i64* %1369, align 8
  %1371 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1367, i64 0, i32 7, i32 0, i32 1
  %1372 = bitcast %"struct.jxl::PassesEncoderState::PassData"** %1371 to i64*
  %1373 = load i64, i64* %1372, align 8
  %1374 = bitcast %"class.std::__1::vector.199"* %1368 to i64*
  %1375 = load i64, i64* %1374, align 8
  %1376 = sub i64 %1373, %1375
  %1377 = sdiv exact i64 %1376, 152
  %1378 = icmp ugt i64 %1370, %1377
  %1379 = inttoptr i64 %1375 to %"struct.jxl::PassesEncoderState::PassData"*
  %1380 = inttoptr i64 %1373 to %"struct.jxl::PassesEncoderState::PassData"*
  br i1 %1378, label %1381, label %1383

1381:                                             ; preds = %1350
  %1382 = sub i64 %1370, %1377
  call void @_ZNSt3__16vectorIN3jxl18PassesEncoderState8PassDataENS_9allocatorIS3_EEE8__appendEm(%"class.std::__1::vector.199"* %1368, i64 %1382) #8
  br label %1393

1383:                                             ; preds = %1350
  %1384 = icmp ult i64 %1370, %1377
  br i1 %1384, label %1385, label %1393

1385:                                             ; preds = %1383
  %1386 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %1379, i64 %1370
  %1387 = icmp eq %"struct.jxl::PassesEncoderState::PassData"* %1386, %1380
  br i1 %1387, label %1392, label %1388

1388:                                             ; preds = %1385, %1388
  %1389 = phi %"struct.jxl::PassesEncoderState::PassData"* [ %1390, %1388 ], [ %1380, %1385 ]
  %1390 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %1389, i64 -1
  call void @_ZN3jxl18PassesEncoderState8PassDataD2Ev(%"struct.jxl::PassesEncoderState::PassData"* %1390) #8
  %1391 = icmp eq %"struct.jxl::PassesEncoderState::PassData"* %1390, %1386
  br i1 %1391, label %1392, label %1388

1392:                                             ; preds = %1388, %1385
  store %"struct.jxl::PassesEncoderState::PassData"* %1386, %"struct.jxl::PassesEncoderState::PassData"** %1371, align 8
  br label %1393

1393:                                             ; preds = %1381, %1383, %1392
  %1394 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %38, align 8
  %1395 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1394, i64 0, i32 7, i32 0, i32 0
  %1396 = load %"struct.jxl::PassesEncoderState::PassData"*, %"struct.jxl::PassesEncoderState::PassData"** %1395, align 8
  %1397 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1394, i64 0, i32 7, i32 0, i32 1
  %1398 = load %"struct.jxl::PassesEncoderState::PassData"*, %"struct.jxl::PassesEncoderState::PassData"** %1397, align 8
  %1399 = icmp eq %"struct.jxl::PassesEncoderState::PassData"* %1396, %1398
  br i1 %1399, label %1428, label %1438

1400:                                             ; preds = %1165, %1400
  %1401 = phi i64 [ 0, %1165 ], [ %1423, %1400 ]
  %1402 = udiv i64 %1401, %1175
  %1403 = trunc i64 %1402 to i8
  %1404 = load i8*, i8** %1176, align 8
  %1405 = getelementptr inbounds i8, i8* %1404, i64 %1401
  store i8 %1403, i8* %1405, align 1
  %1406 = load i64, i64* %677, align 8
  %1407 = udiv i64 %1406, %1175
  %1408 = urem i64 %1401, %1175
  %1409 = add i64 %1408, %1407
  %1410 = trunc i64 %1409 to i8
  %1411 = mul i64 %1406, 13
  %1412 = add i64 %1411, %1401
  %1413 = load i8*, i8** %1176, align 8
  %1414 = getelementptr inbounds i8, i8* %1413, i64 %1412
  store i8 %1410, i8* %1414, align 1
  %1415 = load i64, i64* %677, align 8
  %1416 = udiv i64 %1415, %1175
  %1417 = add i64 %1416, %1408
  %1418 = trunc i64 %1417 to i8
  %1419 = mul i64 %1415, 26
  %1420 = add i64 %1419, %1401
  %1421 = load i8*, i8** %1176, align 8
  %1422 = getelementptr inbounds i8, i8* %1421, i64 %1420
  store i8 %1418, i8* %1422, align 1
  %1423 = add nuw i64 %1401, 1
  %1424 = load i64, i64* %677, align 8
  %1425 = icmp ult i64 %1423, %1424
  br i1 %1425, label %1400, label %1304

1426:                                             ; preds = %1473
  %1427 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %38, align 8
  br label %1428

1428:                                             ; preds = %1426, %1393
  %1429 = phi %"struct.jxl::PassesEncoderState"* [ %1427, %1426 ], [ %1394, %1393 ]
  %1430 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1429, i64 0, i32 7
  %1431 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1429, i64 0, i32 7, i32 0, i32 1
  %1432 = bitcast %"struct.jxl::PassesEncoderState::PassData"** %1431 to i64*
  %1433 = load i64, i64* %1432, align 8
  %1434 = bitcast %"class.std::__1::vector.199"* %1430 to i64*
  %1435 = load i64, i64* %1434, align 8
  %1436 = sub i64 %1433, %1435
  %1437 = icmp eq i64 %1436, 152
  br i1 %1437, label %1479, label %1476

1438:                                             ; preds = %1393, %1473
  %1439 = phi %"struct.jxl::PassesEncoderState::PassData"* [ %1474, %1473 ], [ %1396, %1393 ]
  %1440 = load i64, i64* %1334, align 8
  %1441 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %1439, i64 0, i32 0, i32 0, i32 1
  %1442 = bitcast %"class.std::__1::vector.203"** %1441 to i64*
  %1443 = load i64, i64* %1442, align 8
  %1444 = bitcast %"struct.jxl::PassesEncoderState::PassData"* %1439 to i64*
  %1445 = load i64, i64* %1444, align 8
  %1446 = sub i64 %1443, %1445
  %1447 = sdiv exact i64 %1446, 24
  %1448 = icmp ugt i64 %1440, %1447
  %1449 = inttoptr i64 %1445 to %"class.std::__1::vector.203"*
  %1450 = inttoptr i64 %1443 to %"class.std::__1::vector.203"*
  br i1 %1448, label %1451, label %1454

1451:                                             ; preds = %1438
  %1452 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %1439, i64 0, i32 0
  %1453 = sub i64 %1440, %1447
  call void @_ZNSt3__16vectorINS0_IN3jxl5TokenENS_9allocatorIS2_EEEENS3_IS5_EEE8__appendEm(%"class.std::__1::vector.201"* %1452, i64 %1453) #8
  br label %1473

1454:                                             ; preds = %1438
  %1455 = icmp ult i64 %1440, %1447
  br i1 %1455, label %1456, label %1473

1456:                                             ; preds = %1454
  %1457 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %1449, i64 %1440
  %1458 = icmp eq %"class.std::__1::vector.203"* %1457, %1450
  br i1 %1458, label %1472, label %1459

1459:                                             ; preds = %1456, %1470
  %1460 = phi %"class.std::__1::vector.203"* [ %1461, %1470 ], [ %1450, %1456 ]
  %1461 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %1460, i64 -1
  %1462 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %1461, i64 0, i32 0, i32 0
  %1463 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %1462, align 8
  %1464 = icmp eq %"struct.jxl::Token"* %1463, null
  br i1 %1464, label %1470, label %1465

1465:                                             ; preds = %1459
  %1466 = ptrtoint %"struct.jxl::Token"* %1463 to i64
  %1467 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %1460, i64 -1, i32 0, i32 1
  %1468 = bitcast %"struct.jxl::Token"** %1467 to i64*
  store i64 %1466, i64* %1468, align 8
  %1469 = bitcast %"struct.jxl::Token"* %1463 to i8*
  call void @_ZdlPv(i8* %1469) #13
  br label %1470

1470:                                             ; preds = %1465, %1459
  %1471 = icmp eq %"class.std::__1::vector.203"* %1461, %1457
  br i1 %1471, label %1472, label %1459

1472:                                             ; preds = %1470, %1456
  store %"class.std::__1::vector.203"* %1457, %"class.std::__1::vector.203"** %1441, align 8
  br label %1473

1473:                                             ; preds = %1451, %1454, %1472
  %1474 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %1439, i64 1
  %1475 = icmp eq %"struct.jxl::PassesEncoderState::PassData"* %1474, %1398
  br i1 %1475, label %1426, label %1438

1476:                                             ; preds = %1428
  %1477 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.37, i64 0, i64 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.1, i64 0, i64 0), i32 859, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.42, i64 0, i64 0)) #8
  %1478 = call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

1479:                                             ; preds = %1428
  call void @_ZN3jxl17LossyFrameEncoder21ComputeAllCoeffOrdersERKNS_15FrameDimensionsE(%"class.jxl::LossyFrameEncoder"* %0, %"struct.jxl::FrameDimensions"* nonnull dereferenceable(144) %10)
  %1480 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 18
  store i64 1, i64* %1480, align 8
  %1481 = bitcast %class.anon.414* %36 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1481) #8
  %1482 = getelementptr inbounds %class.anon.414, %class.anon.414* %36, i64 0, i32 0
  store %"class.jxl::LossyFrameEncoder"* %0, %"class.jxl::LossyFrameEncoder"** %1482, align 8
  %1483 = bitcast %class.anon.415* %37 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1483) #8
  %1484 = getelementptr inbounds %class.anon.415, %class.anon.415* %37, i64 0, i32 0
  %1485 = getelementptr inbounds %class.anon.415, %class.anon.415* %37, i64 0, i32 1
  %1486 = getelementptr inbounds %class.anon.415, %class.anon.415* %37, i64 0, i32 2
  store %"struct.jxl::PassesSharedState"* %40, %"struct.jxl::PassesSharedState"** %1484, align 8
  store %"class.jxl::LossyFrameEncoder"* %0, %"class.jxl::LossyFrameEncoder"** %1485, align 8
  store %"struct.jxl::FrameHeader"** %9, %"struct.jxl::FrameHeader"*** %1486, align 8
  %1487 = load %"class.jxl::ThreadPool"*, %"class.jxl::ThreadPool"** %1358, align 8
  %1488 = load i64, i64* %1334, align 8
  %1489 = trunc i64 %1488 to i32
  %1490 = call zeroext i1 @_ZN3jxl9RunOnPoolIZNS_17LossyFrameEncoder26ComputeJPEGTranscodingDataERKNS_4jpeg8JPEGDataEPNS_19ModularFrameEncoderEPNS_11FrameHeaderEEUlmE_ZNS1_26ComputeJPEGTranscodingDataES5_S7_S9_EUliiE1_EEbPNS_10ThreadPoolEjjRKT_RKT0_PKc(%"class.jxl::ThreadPool"* %1487, i32 0, i32 %1489, %class.anon.414* nonnull dereferenceable(8) %36, %class.anon.415* nonnull dereferenceable(24) %37, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.43, i64 0, i64 0))
  %1491 = load %"struct.jxl::FrameHeader"*, %"struct.jxl::FrameHeader"** %9, align 8
  %1492 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1491, i64 0, i32 1
  %1493 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 1, i32 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1492, i8* align 8 %1493, i64 28, i1 false) #8
  %1494 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1491, i64 0, i32 7, i32 1
  %1495 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 1, i32 7, i32 1
  %1496 = bitcast [3 x i32]* %1494 to i8*
  %1497 = bitcast [3 x i32]* %1495 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1496, i8* align 8 %1497, i64 14, i1 false) #8
  %1498 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1491, i64 0, i32 8
  %1499 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 1, i32 8
  %1500 = bitcast i32* %1498 to i8*
  %1501 = bitcast i32* %1499 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1500, i8* align 8 %1501, i64 12, i1 false) #8
  %1502 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1491, i64 0, i32 11
  %1503 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 1, i32 11
  %1504 = icmp eq %"struct.jxl::FrameHeader"* %1491, %1754
  br i1 %1504, label %1546, label %1505

1505:                                             ; preds = %1479
  %1506 = bitcast %"class.std::__1::basic_string"* %1502 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %1507 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %1506, i64 0, i32 1, i32 0
  %1508 = load i8, i8* %1507, align 1
  %1509 = icmp slt i8 %1508, 0
  %1510 = bitcast %"class.std::__1::basic_string"* %1503 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %1511 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %1510, i64 0, i32 1, i32 0
  %1512 = load i8, i8* %1511, align 1
  %1513 = icmp slt i8 %1512, 0
  br i1 %1509, label %1524, label %1514

1514:                                             ; preds = %1505
  br i1 %1513, label %1518, label %1515

1515:                                             ; preds = %1514
  %1516 = bitcast %"class.std::__1::basic_string"* %1502 to i8*
  %1517 = bitcast %"class.std::__1::basic_string"* %1503 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1516, i8* align 8 %1517, i64 24, i1 false) #8
  br label %1534

1518:                                             ; preds = %1514
  %1519 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1503, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %1520 = load i8*, i8** %1519, align 8
  %1521 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 1, i32 11, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %1522 = load i64, i64* %1521, align 8
  %1523 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb1EEERS5_PKcm(%"class.std::__1::basic_string"* %1502, i8* %1520, i64 %1522) #8
  br label %1534

1524:                                             ; preds = %1505
  %1525 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1503, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %1526 = load i8*, i8** %1525, align 8
  %1527 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 1, i32 11, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %1528 = load i64, i64* %1527, align 8
  %1529 = bitcast %"class.std::__1::basic_string"* %1503 to i8*
  %1530 = zext i8 %1512 to i64
  %1531 = select i1 %1513, i8* %1526, i8* %1529
  %1532 = select i1 %1513, i64 %1528, i64 %1530
  %1533 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb0EEERS5_PKcm(%"class.std::__1::basic_string"* %1502, i8* %1531, i64 %1532) #8
  br label %1534

1534:                                             ; preds = %1515, %1518, %1524
  %1535 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1491, i64 0, i32 12, i32 1
  %1536 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 1, i32 12, i32 1
  %1537 = bitcast i32* %1535 to i8*
  %1538 = bitcast i32* %1536 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1537, i8* align 8 %1538, i64 140, i1 false) #8
  %1539 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1491, i64 0, i32 13
  %1540 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 1, i32 13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1539, i8* align 8 %1540, i64 16, i1 false) #8
  %1541 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1491, i64 0, i32 16
  %1542 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 1, i32 16, i32 0, i32 0
  %1543 = load i32*, i32** %1542, align 8
  %1544 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 1, i32 16, i32 0, i32 1
  %1545 = load i32*, i32** %1544, align 8
  call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE6assignIPjEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector"* %1541, i32* %1543, i32* %1545) #8
  br label %1553

1546:                                             ; preds = %1479
  %1547 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 1, i32 12, i32 1
  %1548 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 1, i32 12, i32 1
  %1549 = bitcast i32* %1547 to i8*
  %1550 = bitcast i32* %1548 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1549, i8* align 8 %1550, i64 140, i1 false) #8
  %1551 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 1, i32 13
  %1552 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 1, i32 13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1551, i8* align 8 %1552, i64 16, i1 false) #8
  br label %1553

1553:                                             ; preds = %1546, %1534
  %1554 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1491, i64 0, i32 17
  %1555 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 1, i32 17
  %1556 = bitcast %"struct.jxl::FrameOrigin"* %1555 to i64*
  %1557 = bitcast %"struct.jxl::FrameOrigin"* %1554 to i64*
  %1558 = load i64, i64* %1556, align 8
  store i64 %1558, i64* %1557, align 8
  %1559 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1491, i64 0, i32 18, i32 1
  %1560 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 1, i32 18, i32 1
  %1561 = bitcast i32* %1559 to i8*
  %1562 = bitcast i32* %1560 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1561, i8* align 8 %1562, i64 25, i1 false) #8
  br i1 %1504, label %1569, label %1563

1563:                                             ; preds = %1553
  %1564 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1491, i64 0, i32 19
  %1565 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 1, i32 19, i32 0, i32 0
  %1566 = load %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"** %1565, align 8
  %1567 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 1, i32 19, i32 0, i32 1
  %1568 = load %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"** %1567, align 8
  call void @_ZNSt3__16vectorIN3jxl12BlendingInfoENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_(%"class.std::__1::vector.92"* %1564, %"struct.jxl::BlendingInfo"* %1566, %"struct.jxl::BlendingInfo"* %1568) #8
  br label %1569

1569:                                             ; preds = %1553, %1563
  %1570 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1491, i64 0, i32 20, i32 1
  %1571 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 1, i32 20, i32 1
  %1572 = bitcast i32* %1570 to i8*
  %1573 = bitcast i32* %1571 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1572, i8* align 8 %1573, i64 16, i1 false) #8
  %1574 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1491, i64 0, i32 21
  %1575 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 1, i32 21
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1574, i8* align 8 %1575, i64 24, i1 false) #8
  %1576 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1491, i64 0, i32 26, i32 1
  %1577 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 1, i32 26, i32 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1576, i8* align 8 %1577, i64 129, i1 false) #8
  %1578 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1491, i64 0, i32 27
  %1579 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 1, i32 27
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1578, i8* align 8 %1579, i64 16, i1 false) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1483) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1481) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1354) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %671) #8
  %1580 = getelementptr inbounds [3 x %"class.std::__1::vector.147"], [3 x %"class.std::__1::vector.147"]* %30, i64 0, i64 2, i32 0, i32 0
  %1581 = load i64*, i64** %1580, align 16
  %1582 = icmp eq i64* %1581, null
  br i1 %1582, label %1588, label %1583

1583:                                             ; preds = %1569
  %1584 = ptrtoint i64* %1581 to i64
  %1585 = getelementptr inbounds [3 x %"class.std::__1::vector.147"], [3 x %"class.std::__1::vector.147"]* %30, i64 0, i64 2, i32 0, i32 1
  %1586 = bitcast i64** %1585 to i64*
  store i64 %1584, i64* %1586, align 8
  %1587 = bitcast i64* %1581 to i8*
  call void @_ZdlPv(i8* %1587) #13
  br label %1588

1588:                                             ; preds = %1569, %1583
  %1589 = getelementptr inbounds [3 x %"class.std::__1::vector.147"], [3 x %"class.std::__1::vector.147"]* %30, i64 0, i64 1, i32 0, i32 0
  %1590 = load i64*, i64** %1589, align 8
  %1591 = icmp eq i64* %1590, null
  br i1 %1591, label %1651, label %1646

1592:                                             ; preds = %1660
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1662) #8
  br label %1593

1593:                                             ; preds = %1592, %1660
  %1594 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %22, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %1595 = load i8*, i8** %1594, align 8
  store i8* null, i8** %1594, align 8
  %1596 = icmp eq i8* %1595, null
  br i1 %1596, label %1598, label %1597

1597:                                             ; preds = %1593
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1595) #8
  br label %1598

1598:                                             ; preds = %1597, %1593
  %1599 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %22, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %1600 = load i8*, i8** %1599, align 8
  store i8* null, i8** %1599, align 8
  %1601 = icmp eq i8* %1600, null
  br i1 %1601, label %1603, label %1602

1602:                                             ; preds = %1598
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1600) #8
  br label %1603

1603:                                             ; preds = %1598, %1602
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %1750) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1747) #8
  %1604 = load i32*, i32** %433, align 8
  %1605 = icmp eq i32* %1604, null
  br i1 %1605, label %1609, label %1606

1606:                                             ; preds = %1603
  %1607 = ptrtoint i32* %1604 to i64
  store i64 %1607, i64* %440, align 8
  %1608 = bitcast i32* %1604 to i8*
  call void @_ZdlPv(i8* %1608) #13
  br label %1609

1609:                                             ; preds = %1603, %1606
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %432) #8
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %306) #8
  call void @_ZdlPv(i8* nonnull %297) #13
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %270) #8
  %1610 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %236, align 8
  %1611 = icmp eq %"class.jxl::QuantEncoding"* %1610, null
  br i1 %1611, label %1645, label %1612

1612:                                             ; preds = %1609
  %1613 = bitcast %"class.jxl::QuantEncoding"* %1610 to i8*
  %1614 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %237, align 8
  %1615 = icmp eq %"class.jxl::QuantEncoding"* %1614, %1610
  br i1 %1615, label %1643, label %1616

1616:                                             ; preds = %1612, %1638
  %1617 = phi %"class.jxl::QuantEncoding"* [ %1618, %1638 ], [ %1614, %1612 ]
  %1618 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %1617, i64 -1
  %1619 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %1618, i64 0, i32 0, i32 0
  %1620 = load i32, i32* %1619, align 8
  %1621 = icmp eq i32 %1620, 7
  br i1 %1621, label %1622, label %1638

1622:                                             ; preds = %1616
  %1623 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %1617, i64 -1, i32 0, i32 3
  %1624 = bitcast %union.anon.108* %1623 to %"class.std::__1::vector.118"**
  %1625 = load %"class.std::__1::vector.118"*, %"class.std::__1::vector.118"** %1624, align 8
  %1626 = icmp eq %"class.std::__1::vector.118"* %1625, null
  br i1 %1626, label %1638, label %1627

1627:                                             ; preds = %1622
  %1628 = getelementptr inbounds %"class.std::__1::vector.118", %"class.std::__1::vector.118"* %1625, i64 0, i32 0, i32 0
  %1629 = load i32*, i32** %1628, align 8
  %1630 = icmp eq i32* %1629, null
  br i1 %1630, label %1636, label %1631

1631:                                             ; preds = %1627
  %1632 = ptrtoint i32* %1629 to i64
  %1633 = getelementptr inbounds %"class.std::__1::vector.118", %"class.std::__1::vector.118"* %1625, i64 0, i32 0, i32 1
  %1634 = bitcast i32** %1633 to i64*
  store i64 %1632, i64* %1634, align 8
  %1635 = bitcast i32* %1629 to i8*
  call void @_ZdlPv(i8* %1635) #13
  br label %1636

1636:                                             ; preds = %1631, %1627
  %1637 = bitcast %"class.std::__1::vector.118"* %1625 to i8*
  call void @_ZdlPv(i8* %1637) #13
  br label %1638

1638:                                             ; preds = %1636, %1622, %1616
  %1639 = icmp eq %"class.jxl::QuantEncoding"* %1618, %1610
  br i1 %1639, label %1640, label %1616

1640:                                             ; preds = %1638
  %1641 = bitcast %"class.std::__1::vector.104"* %14 to i8**
  %1642 = load i8*, i8** %1641, align 8
  br label %1643

1643:                                             ; preds = %1640, %1612
  %1644 = phi i8* [ %1642, %1640 ], [ %1613, %1612 ]
  store %"class.jxl::QuantEncoding"* %1610, %"class.jxl::QuantEncoding"** %237, align 8
  call void @_ZdlPv(i8* %1644) #13
  br label %1645

1645:                                             ; preds = %1609, %1643
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %235) #8
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %231) #8
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %43) #8
  ret i32 0

1646:                                             ; preds = %1588
  %1647 = ptrtoint i64* %1590 to i64
  %1648 = getelementptr inbounds [3 x %"class.std::__1::vector.147"], [3 x %"class.std::__1::vector.147"]* %30, i64 0, i64 1, i32 0, i32 1
  %1649 = bitcast i64** %1648 to i64*
  store i64 %1647, i64* %1649, align 8
  %1650 = bitcast i64* %1590 to i8*
  call void @_ZdlPv(i8* %1650) #13
  br label %1651

1651:                                             ; preds = %1646, %1588
  %1652 = getelementptr inbounds [3 x %"class.std::__1::vector.147"], [3 x %"class.std::__1::vector.147"]* %30, i64 0, i64 0, i32 0, i32 0
  %1653 = load i64*, i64** %1652, align 16
  %1654 = icmp eq i64* %1653, null
  br i1 %1654, label %1660, label %1655

1655:                                             ; preds = %1651
  %1656 = ptrtoint i64* %1653 to i64
  %1657 = getelementptr inbounds [3 x %"class.std::__1::vector.147"], [3 x %"class.std::__1::vector.147"]* %30, i64 0, i64 0, i32 0, i32 1
  %1658 = bitcast i64** %1657 to i64*
  store i64 %1656, i64* %1658, align 8
  %1659 = bitcast i64* %1653 to i8*
  call void @_ZdlPv(i8* %1659) #13
  br label %1660

1660:                                             ; preds = %1655, %1651
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %31) #8
  %1661 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %22, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %1662 = load i8*, i8** %1661, align 8
  store i8* null, i8** %1661, align 8
  %1663 = icmp eq i8* %1662, null
  br i1 %1663, label %1593, label %1592

1664:                                             ; preds = %534
  %1665 = bitcast i64* %23 to i8*
  %1666 = bitcast %"class.jxl::Plane.132"** %24 to i8*
  %1667 = getelementptr inbounds %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ColorCorrelationMap"* %53, i64 0, i32 0
  %1668 = bitcast float* %25 to i8*
  %1669 = bitcast float* %26 to i8*
  %1670 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 8, i32 6
  %1671 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 8, i32 4
  %1672 = bitcast float* %27 to i8*
  %1673 = bitcast %class.anon.410* %28 to i8*
  %1674 = getelementptr inbounds %class.anon.410, %class.anon.410* %28, i64 0, i32 0
  %1675 = getelementptr inbounds %class.anon.410, %class.anon.410* %28, i64 0, i32 1
  %1676 = getelementptr inbounds %class.anon.410, %class.anon.410* %28, i64 0, i32 2
  %1677 = getelementptr inbounds %class.anon.410, %class.anon.410* %28, i64 0, i32 3
  %1678 = getelementptr inbounds %class.anon.410, %class.anon.410* %28, i64 0, i32 4
  %1679 = getelementptr inbounds %class.anon.410, %class.anon.410* %28, i64 0, i32 5
  %1680 = getelementptr inbounds %class.anon.410, %class.anon.410* %28, i64 0, i32 6
  %1681 = getelementptr inbounds %class.anon.410, %class.anon.410* %28, i64 0, i32 7
  %1682 = getelementptr inbounds %"class.jxl::LossyFrameEncoder", %"class.jxl::LossyFrameEncoder"* %0, i64 0, i32 1
  %1683 = getelementptr inbounds %"struct.jxl::ThreadPool::SkipInit", %"struct.jxl::ThreadPool::SkipInit"* %29, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1665) #8
  store i64 0, i64* %23, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1666) #8
  store %"class.jxl::Plane.132"* %1667, %"class.jxl::Plane.132"** %24, align 8
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1668) #8
  store float 8.400000e+01, float* %25, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1669) #8
  %1684 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 8, i32 5
  %1685 = load float, float* %1684, align 8
  %1686 = load float, float* %1671, align 4
  %1687 = fmul float %1686, 0.000000e+00
  %1688 = fadd float %1685, %1687
  store float %1688, float* %26, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1672) #8
  store float 0x4044FF7660000000, float* %27, align 4
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %1673) #8
  store %"class.jxl::Plane.132"** %24, %"class.jxl::Plane.132"*** %1674, align 8
  store %"struct.jxl::FrameDimensions"* %10, %"struct.jxl::FrameDimensions"** %1675, align 8
  store %class.anon.409* %21, %class.anon.409** %1676, align 8
  store i64* %23, i64** %1677, align 8
  store %"class.std::__1::vector.118"* %20, %"class.std::__1::vector.118"** %1678, align 8
  store float* %25, float** %1679, align 8
  store float* %26, float** %1680, align 8
  store float* %27, float** %1681, align 8
  %1689 = load %"class.jxl::ThreadPool"*, %"class.jxl::ThreadPool"** %1682, align 8
  %1690 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 8, i32 0, i32 0, i32 1
  %1691 = load i32, i32* %1690, align 4
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %1683) #8
  %1692 = call zeroext i1 @_ZN3jxl9RunOnPoolINS_10ThreadPool8SkipInitEZNS_17LossyFrameEncoder26ComputeJPEGTranscodingDataERKNS_4jpeg8JPEGDataEPNS_19ModularFrameEncoderEPNS_11FrameHeaderEEUliiE_EEbPS1_jjRKT_RKT0_PKc(%"class.jxl::ThreadPool"* %1689, i32 0, i32 %1691, %"struct.jxl::ThreadPool::SkipInit"* nonnull dereferenceable(1) %29, %class.anon.410* nonnull dereferenceable(64) %28, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.39, i64 0, i64 0))
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %1683) #8
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %1673) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1672) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1669) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1668) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1666) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1665) #8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1665) #8
  store i64 2, i64* %23, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1666) #8
  store %"class.jxl::Plane.132"* %66, %"class.jxl::Plane.132"** %24, align 8
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1668) #8
  store float 8.400000e+01, float* %25, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1669) #8
  %1693 = load float, float* %1670, align 4
  %1694 = load float, float* %1671, align 4
  %1695 = fmul float %1694, 0.000000e+00
  %1696 = fadd float %1693, %1695
  store float %1696, float* %26, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1672) #8
  store float 0x4044FF7660000000, float* %27, align 4
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %1673) #8
  store %"class.jxl::Plane.132"** %24, %"class.jxl::Plane.132"*** %1674, align 8
  store %"struct.jxl::FrameDimensions"* %10, %"struct.jxl::FrameDimensions"** %1675, align 8
  store %class.anon.409* %21, %class.anon.409** %1676, align 8
  store i64* %23, i64** %1677, align 8
  store %"class.std::__1::vector.118"* %20, %"class.std::__1::vector.118"** %1678, align 8
  store float* %25, float** %1679, align 8
  store float* %26, float** %1680, align 8
  store float* %27, float** %1681, align 8
  %1697 = load %"class.jxl::ThreadPool"*, %"class.jxl::ThreadPool"** %1682, align 8
  %1698 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 8, i32 1, i32 0, i32 1
  %1699 = load i32, i32* %1698, align 4
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %1683) #8
  %1700 = call zeroext i1 @_ZN3jxl9RunOnPoolINS_10ThreadPool8SkipInitEZNS_17LossyFrameEncoder26ComputeJPEGTranscodingDataERKNS_4jpeg8JPEGDataEPNS_19ModularFrameEncoderEPNS_11FrameHeaderEEUliiE_EEbPS1_jjRKT_RKT0_PKc(%"class.jxl::ThreadPool"* %1697, i32 0, i32 %1699, %"struct.jxl::ThreadPool::SkipInit"* nonnull dereferenceable(1) %29, %class.anon.410* nonnull dereferenceable(64) %28, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.39, i64 0, i64 0))
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %1683) #8
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %1673) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1672) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1669) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1668) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1666) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1665) #8
  %1701 = load %"struct.jxl::FrameHeader"*, %"struct.jxl::FrameHeader"** %9, align 8
  %1702 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1701, i64 0, i32 7, i32 1, i64 1
  %1703 = load i32, i32* %1702, align 4
  %1704 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1701, i64 0, i32 7, i32 1, i64 0
  %1705 = load i32, i32* %1704, align 4
  br label %539

1706:                                             ; preds = %516, %1706
  %1707 = phi i64 [ %1720, %1706 ], [ 0, %516 ]
  %1708 = add nuw nsw i64 %1707, 64
  %1709 = load i32*, i32** %433, align 8
  %1710 = getelementptr inbounds i32, i32* %1709, i64 %1708
  store i32 2048, i32* %1710, align 4
  %1711 = add nuw nsw i64 %1707, 65
  %1712 = load i32*, i32** %433, align 8
  %1713 = getelementptr inbounds i32, i32* %1712, i64 %1711
  store i32 2048, i32* %1713, align 4
  %1714 = add nuw nsw i64 %1707, 66
  %1715 = load i32*, i32** %433, align 8
  %1716 = getelementptr inbounds i32, i32* %1715, i64 %1714
  store i32 2048, i32* %1716, align 4
  %1717 = add nuw nsw i64 %1707, 67
  %1718 = load i32*, i32** %433, align 8
  %1719 = getelementptr inbounds i32, i32* %1718, i64 %1717
  store i32 2048, i32* %1719, align 4
  %1720 = add nuw nsw i64 %1707, 4
  %1721 = icmp eq i64 %1720, 64
  br i1 %1721, label %1722, label %1706

1722:                                             ; preds = %1706, %1722
  %1723 = phi i64 [ %1744, %1722 ], [ 0, %1706 ]
  %1724 = add nuw nsw i64 %1723, 64
  %1725 = getelementptr inbounds i32, i32* %298, i64 %1724
  %1726 = load i32, i32* %1725, align 4
  %1727 = shl nsw i32 %1726, 11
  %1728 = add nuw nsw i64 %1723, 128
  %1729 = getelementptr inbounds i32, i32* %298, i64 %1728
  %1730 = load i32, i32* %1729, align 4
  %1731 = sdiv i32 %1727, %1730
  %1732 = load i32*, i32** %433, align 8
  %1733 = getelementptr inbounds i32, i32* %1732, i64 %1728
  store i32 %1731, i32* %1733, align 4
  %1734 = add nuw nsw i64 %1723, 65
  %1735 = getelementptr inbounds i32, i32* %298, i64 %1734
  %1736 = load i32, i32* %1735, align 4
  %1737 = shl nsw i32 %1736, 11
  %1738 = add nuw nsw i64 %1723, 129
  %1739 = getelementptr inbounds i32, i32* %298, i64 %1738
  %1740 = load i32, i32* %1739, align 4
  %1741 = sdiv i32 %1737, %1740
  %1742 = load i32*, i32** %433, align 8
  %1743 = getelementptr inbounds i32, i32* %1742, i64 %1738
  store i32 %1741, i32* %1743, align 4
  %1744 = add nuw nsw i64 %1723, 2
  %1745 = icmp eq i64 %1744, 64
  br i1 %1745, label %1746, label %1722

1746:                                             ; preds = %1722
  %1747 = bitcast %class.anon.409* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1747) #8
  %1748 = getelementptr inbounds %class.anon.409, %class.anon.409* %21, i64 0, i32 0
  %1749 = getelementptr inbounds %class.anon.409, %class.anon.409* %21, i64 0, i32 1
  store %"struct.jxl::jpeg::JPEGData"* %1, %"struct.jxl::jpeg::JPEGData"** %1748, align 8
  store %"struct.std::__1::array.408"* %16, %"struct.std::__1::array.408"** %1749, align 8
  %1750 = bitcast %"class.jxl::Image3"* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %1750) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1750, i8 -86, i64 96, i1 false)
  %1751 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %22, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %1751, i64 %49, i64 %51, i64 4) #8
  %1752 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %22, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %1752, i64 %49, i64 %51, i64 4) #8
  %1753 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %22, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %1753, i64 %49, i64 %51, i64 4) #8
  %1754 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 1
  %1755 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 0, i32 1, i32 5
  %1756 = load i32, i32* %1755, align 8
  %1757 = icmp eq i32 %1756, 2
  %1758 = load %"struct.jxl::FrameHeader"*, %"struct.jxl::FrameHeader"** %9, align 8
  %1759 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1758, i64 0, i32 7, i32 1, i64 1
  %1760 = load i32, i32* %1759, align 4
  %1761 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1758, i64 0, i32 7, i32 1, i64 0
  %1762 = load i32, i32* %1761, align 4
  %1763 = icmp eq i32 %1762, %1760
  br i1 %1763, label %512, label %539

1764:                                             ; preds = %516
  %1765 = load i32*, i32** %433, align 8
  %1766 = add nuw nsw i64 %517, 65
  %1767 = getelementptr inbounds i32, i32* %298, i64 %1766
  %1768 = load i32, i32* %1767, align 4
  %1769 = shl nsw i32 %1768, 11
  %1770 = getelementptr inbounds i32, i32* %298, i64 %527
  %1771 = load i32, i32* %1770, align 4
  %1772 = sdiv i32 %1769, %1771
  %1773 = getelementptr inbounds i32, i32* %1765, i64 %527
  store i32 %1772, i32* %1773, align 4
  %1774 = add nuw nsw i64 %517, 2
  br label %516

1775:                                             ; preds = %123
  call void @llvm.memset.p0i8.i64(i8* align 64 %128, i8 1, i64 %99, i1 false) #8
  br label %1776

1776:                                             ; preds = %1775, %123
  %1777 = add nuw nsw i64 %113, 2
  %1778 = add i64 %114, -2
  %1779 = icmp eq i64 %1778, 0
  br i1 %1779, label %132, label %112
}

declare %"class.jxl::ImageBundle"* @_ZN3jxl5ToXYBERKNS_11ImageBundleEPNS_10ThreadPoolEPNS_6Image3IfEEPS0_(%"class.jxl::ImageBundle"* dereferenceable(368), %"class.jxl::ThreadPool"*, %"class.jxl::Image3"*, %"class.jxl::ImageBundle"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN3jxl12_GLOBAL__N_117SimplifyInvisibleEPNS_6Image3IfEERKNS_5PlaneIfEE(%"class.jxl::Image3"* nocapture readonly, %"class.jxl::Plane"* nocapture readonly dereferenceable(32)) unnamed_addr #0 {
  %3 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 1
  %4 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 4
  %5 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 4
  %7 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 0
  %8 = load i32, i32* %3, align 4
  br label %9

9:                                                ; preds = %24, %2
  %10 = phi i32 [ %8, %2 ], [ %25, %24 ]
  %11 = phi i32 [ %8, %2 ], [ %26, %24 ]
  %12 = phi i64 [ 0, %2 ], [ %27, %24 ]
  %13 = icmp eq i32 %11, 0
  br i1 %13, label %24, label %14

14:                                               ; preds = %9
  %15 = zext i32 %11 to i64
  %16 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 %12, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %29

17:                                               ; preds = %24
  ret void

18:                                               ; preds = %208
  %19 = load i32, i32* %3, align 4
  br label %20

20:                                               ; preds = %18, %91
  %21 = phi i32 [ %19, %18 ], [ %30, %91 ]
  %22 = zext i32 %21 to i64
  %23 = icmp ult i64 %55, %22
  br i1 %23, label %29, label %24

24:                                               ; preds = %20, %9
  %25 = phi i32 [ %10, %9 ], [ %21, %20 ]
  %26 = phi i32 [ 0, %9 ], [ %21, %20 ]
  %27 = add nuw nsw i64 %12, 1
  %28 = icmp eq i64 %27, 3
  br i1 %28, label %17, label %9

29:                                               ; preds = %14, %20
  %30 = phi i32 [ %10, %14 ], [ %21, %20 ]
  %31 = phi i64 [ %15, %14 ], [ %22, %20 ]
  %32 = phi i64 [ 0, %14 ], [ %55, %20 ]
  %33 = load i64, i64* %4, align 8
  %34 = mul i64 %33, %32
  %35 = load i8*, i8** %16, align 8
  %36 = ptrtoint i8* %35 to i64
  %37 = and i64 %36, 63
  %38 = icmp eq i64 %37, 0
  tail call void @llvm.assume(i1 %38) #8
  %39 = getelementptr inbounds i8, i8* %35, i64 %34
  %40 = ptrtoint i8* %39 to i64
  %41 = and i64 %40, 63
  %42 = icmp eq i64 %41, 0
  tail call void @llvm.assume(i1 %42) #8
  %43 = bitcast i8* %39 to float*
  %44 = icmp ne i64 %32, 0
  br i1 %44, label %45, label %53

45:                                               ; preds = %29
  %46 = add nsw i64 %32, -1
  %47 = mul i64 %33, %46
  %48 = getelementptr inbounds i8, i8* %35, i64 %47
  %49 = ptrtoint i8* %48 to i64
  %50 = and i64 %49, 63
  %51 = icmp eq i64 %50, 0
  tail call void @llvm.assume(i1 %51) #8
  %52 = bitcast i8* %48 to float*
  br label %53

53:                                               ; preds = %29, %45
  %54 = phi float* [ %52, %45 ], [ null, %29 ]
  %55 = add nuw nsw i64 %32, 1
  %56 = icmp ult i64 %55, %31
  br i1 %56, label %57, label %64

57:                                               ; preds = %53
  %58 = mul i64 %33, %55
  %59 = getelementptr inbounds i8, i8* %35, i64 %58
  %60 = ptrtoint i8* %59 to i64
  %61 = and i64 %60, 63
  %62 = icmp eq i64 %61, 0
  tail call void @llvm.assume(i1 %62) #8
  %63 = bitcast i8* %59 to float*
  br label %64

64:                                               ; preds = %53, %57
  %65 = phi float* [ %63, %57 ], [ null, %53 ]
  %66 = load i8*, i8** %5, align 8
  %67 = load i64, i64* %6, align 8
  %68 = mul i64 %67, %32
  %69 = getelementptr inbounds i8, i8* %66, i64 %68
  %70 = ptrtoint i8* %69 to i64
  %71 = and i64 %70, 63
  %72 = icmp eq i64 %71, 0
  tail call void @llvm.assume(i1 %72) #8
  %73 = bitcast i8* %69 to float*
  br i1 %44, label %74, label %82

74:                                               ; preds = %64
  %75 = add nsw i64 %32, -1
  %76 = mul i64 %67, %75
  %77 = getelementptr inbounds i8, i8* %66, i64 %76
  %78 = ptrtoint i8* %77 to i64
  %79 = and i64 %78, 63
  %80 = icmp eq i64 %79, 0
  tail call void @llvm.assume(i1 %80) #8
  %81 = bitcast i8* %77 to float*
  br label %82

82:                                               ; preds = %64, %74
  %83 = phi float* [ %81, %74 ], [ null, %64 ]
  br i1 %56, label %84, label %91

84:                                               ; preds = %82
  %85 = mul i64 %67, %55
  %86 = getelementptr inbounds i8, i8* %66, i64 %85
  %87 = ptrtoint i8* %86 to i64
  %88 = and i64 %87, 63
  %89 = icmp eq i64 %88, 0
  tail call void @llvm.assume(i1 %89) #8
  %90 = bitcast i8* %86 to float*
  br label %91

91:                                               ; preds = %82, %84
  %92 = phi float* [ %90, %84 ], [ null, %82 ]
  %93 = load i32, i32* %7, align 8
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %20, label %95

95:                                               ; preds = %91, %208
  %96 = phi i64 [ %209, %208 ], [ 0, %91 ]
  %97 = getelementptr inbounds float, float* %73, i64 %96
  %98 = load float, float* %97, align 4
  %99 = fcmp oeq float %98, 0.000000e+00
  br i1 %99, label %102, label %100

100:                                              ; preds = %95
  %101 = add nuw nsw i64 %96, 1
  br label %208

102:                                              ; preds = %95
  %103 = getelementptr inbounds float, float* %43, i64 %96
  store float 0.000000e+00, float* %103, align 4
  %104 = icmp eq i64 %96, 0
  br i1 %104, label %115, label %105

105:                                              ; preds = %102
  %106 = add nsw i64 %96, -1
  %107 = getelementptr inbounds float, float* %43, i64 %106
  %108 = load float, float* %107, align 4
  %109 = fadd float %108, 0.000000e+00
  store float %109, float* %103, align 4
  %110 = getelementptr inbounds float, float* %73, i64 %106
  %111 = load float, float* %110, align 4
  %112 = fcmp ogt float %111, 0.000000e+00
  br i1 %112, label %113, label %115

113:                                              ; preds = %105
  %114 = fadd float %108, %109
  store float %114, float* %103, align 4
  br label %115

115:                                              ; preds = %102, %105, %113
  %116 = phi float [ %114, %113 ], [ %109, %105 ], [ 0.000000e+00, %102 ]
  %117 = phi float [ 2.000000e+00, %113 ], [ 1.000000e+00, %105 ], [ 0.000000e+00, %102 ]
  %118 = add nuw nsw i64 %96, 1
  %119 = load i32, i32* %7, align 8
  %120 = zext i32 %119 to i64
  %121 = icmp ult i64 %118, %120
  %122 = insertelement <2 x float> undef, float %116, i32 0
  %123 = insertelement <2 x float> %122, float %117, i32 1
  br i1 %121, label %124, label %172

124:                                              ; preds = %115
  br i1 %44, label %125, label %131

125:                                              ; preds = %124
  %126 = getelementptr inbounds float, float* %54, i64 %118
  %127 = load float, float* %126, align 4
  %128 = insertelement <2 x float> <float undef, float 1.000000e+00>, float %127, i32 0
  %129 = fadd <2 x float> %128, %123
  %130 = extractelement <2 x float> %129, i32 0
  store float %130, float* %103, align 4
  br label %131

131:                                              ; preds = %125, %124
  %132 = phi <2 x float> [ %129, %125 ], [ %123, %124 ]
  %133 = getelementptr inbounds float, float* %73, i64 %118
  %134 = load float, float* %133, align 4
  %135 = fcmp ogt float %134, 0.000000e+00
  br i1 %135, label %136, label %143

136:                                              ; preds = %131
  %137 = getelementptr inbounds float, float* %43, i64 %118
  %138 = load float, float* %137, align 4
  %139 = fmul float %138, 2.000000e+00
  %140 = insertelement <2 x float> <float undef, float 2.000000e+00>, float %139, i32 0
  %141 = fadd <2 x float> %132, %140
  %142 = extractelement <2 x float> %141, i32 0
  store float %142, float* %103, align 4
  br label %143

143:                                              ; preds = %136, %131
  %144 = phi <2 x float> [ %141, %136 ], [ %132, %131 ]
  br i1 %44, label %145, label %156

145:                                              ; preds = %143
  %146 = getelementptr inbounds float, float* %83, i64 %118
  %147 = load float, float* %146, align 4
  %148 = fcmp ogt float %147, 0.000000e+00
  br i1 %148, label %149, label %156

149:                                              ; preds = %145
  %150 = getelementptr inbounds float, float* %54, i64 %118
  %151 = load float, float* %150, align 4
  %152 = fmul float %151, 2.000000e+00
  %153 = insertelement <2 x float> <float undef, float 2.000000e+00>, float %152, i32 0
  %154 = fadd <2 x float> %144, %153
  %155 = extractelement <2 x float> %154, i32 0
  store float %155, float* %103, align 4
  br label %156

156:                                              ; preds = %149, %145, %143
  %157 = phi <2 x float> [ %154, %149 ], [ %144, %145 ], [ %144, %143 ]
  %158 = load i32, i32* %3, align 4
  %159 = zext i32 %158 to i64
  %160 = icmp ult i64 %55, %159
  br i1 %160, label %161, label %172

161:                                              ; preds = %156
  %162 = getelementptr inbounds float, float* %92, i64 %118
  %163 = load float, float* %162, align 4
  %164 = fcmp ogt float %163, 0.000000e+00
  br i1 %164, label %165, label %172

165:                                              ; preds = %161
  %166 = getelementptr inbounds float, float* %65, i64 %118
  %167 = load float, float* %166, align 4
  %168 = fmul float %167, 2.000000e+00
  %169 = insertelement <2 x float> <float undef, float 2.000000e+00>, float %168, i32 0
  %170 = fadd <2 x float> %157, %169
  %171 = extractelement <2 x float> %170, i32 0
  store float %171, float* %103, align 4
  br label %172

172:                                              ; preds = %156, %161, %165, %115
  %173 = phi <2 x float> [ %170, %165 ], [ %157, %161 ], [ %157, %156 ], [ %123, %115 ]
  br i1 %44, label %174, label %185

174:                                              ; preds = %172
  %175 = getelementptr inbounds float, float* %83, i64 %96
  %176 = load float, float* %175, align 4
  %177 = fcmp ogt float %176, 0.000000e+00
  br i1 %177, label %178, label %185

178:                                              ; preds = %174
  %179 = getelementptr inbounds float, float* %54, i64 %96
  %180 = load float, float* %179, align 4
  %181 = fmul float %180, 2.000000e+00
  %182 = insertelement <2 x float> <float undef, float 2.000000e+00>, float %181, i32 0
  %183 = fadd <2 x float> %173, %182
  %184 = extractelement <2 x float> %183, i32 0
  store float %184, float* %103, align 4
  br label %185

185:                                              ; preds = %178, %174, %172
  %186 = phi <2 x float> [ %183, %178 ], [ %173, %174 ], [ %173, %172 ]
  %187 = load i32, i32* %3, align 4
  %188 = zext i32 %187 to i64
  %189 = icmp ult i64 %55, %188
  br i1 %189, label %190, label %201

190:                                              ; preds = %185
  %191 = getelementptr inbounds float, float* %92, i64 %96
  %192 = load float, float* %191, align 4
  %193 = fcmp ogt float %192, 0.000000e+00
  br i1 %193, label %194, label %201

194:                                              ; preds = %190
  %195 = getelementptr inbounds float, float* %65, i64 %96
  %196 = load float, float* %195, align 4
  %197 = fmul float %196, 2.000000e+00
  %198 = insertelement <2 x float> <float undef, float 2.000000e+00>, float %197, i32 0
  %199 = fadd <2 x float> %186, %198
  %200 = extractelement <2 x float> %199, i32 0
  store float %200, float* %103, align 4
  br label %201

201:                                              ; preds = %194, %190, %185
  %202 = phi <2 x float> [ %199, %194 ], [ %186, %190 ], [ %186, %185 ]
  %203 = extractelement <2 x float> %202, i32 1
  %204 = fcmp ogt float %203, 1.000000e+00
  br i1 %204, label %205, label %208

205:                                              ; preds = %201
  %206 = extractelement <2 x float> %202, i32 0
  %207 = fdiv float %206, %203
  store float %207, float* %103, align 4
  br label %208

208:                                              ; preds = %100, %201, %205
  %209 = phi i64 [ %101, %100 ], [ %118, %201 ], [ %118, %205 ]
  %210 = load i32, i32* %7, align 8
  %211 = zext i32 %210 to i64
  %212 = icmp ult i64 %209, %211
  br i1 %212, label %95, label %18
}

declare dereferenceable(32) %"class.jxl::Plane"* @_ZNK3jxl11ImageBundle5alphaEv(%"class.jxl::ImageBundle"*) local_unnamed_addr #1

declare void @_ZN3jxl30PadImageToBlockMultipleInPlaceEPNS_6Image3IfEE(%"class.jxl::Image3"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3jxl17LossyFrameEncoder19ComputeEncodingDataEPKNS_11ImageBundleEPNS_6Image3IfEEPNS_10ThreadPoolEPNS_19ModularFrameEncoderEPNS_9BitWriterEPNS_11FrameHeaderE(%"class.jxl::LossyFrameEncoder"*, %"class.jxl::ImageBundle"*, %"class.jxl::Image3"* noalias, %"class.jxl::ThreadPool"*, %"class.jxl::ModularFrameEncoder"*, %"struct.jxl::BitWriter"* noalias, %"struct.jxl::FrameHeader"*) local_unnamed_addr #0 comdat align 2 {
  %8 = alloca %"struct.jxl::FrameHeader"*, align 8
  %9 = alloca %class.anon.442, align 8
  %10 = alloca %class.anon.443, align 8
  store %"struct.jxl::FrameHeader"* %6, %"struct.jxl::FrameHeader"** %8, align 8
  %11 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 0, i32 0, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = and i32 %12, 7
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %20

15:                                               ; preds = %7
  %16 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 0, i32 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = and i32 %17, 7
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %23, label %20

20:                                               ; preds = %7, %15
  %21 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.1, i64 0, i64 0), i32 488, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.53, i64 0, i64 0)) #8
  %22 = tail call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

23:                                               ; preds = %15
  %24 = getelementptr inbounds %"class.jxl::LossyFrameEncoder", %"class.jxl::LossyFrameEncoder"* %0, i64 0, i32 0
  %25 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %24, align 8
  %26 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %25, i64 0, i32 0
  %27 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %25, i64 0, i32 6, i32 5
  %28 = load i8, i8* %27, align 4, !range !2
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %30, label %45

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %25, i64 0, i32 0, i32 1, i32 9
  store i32 1, i32* %31, align 4
  %32 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %24, align 8
  %33 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %32, i64 0, i32 6, i32 0
  %34 = load float, float* %33, align 8
  %35 = fcmp ogt float %34, 0x3FE4CCCCC0000000
  br i1 %35, label %36, label %40

36:                                               ; preds = %30
  store i32 2, i32* %31, align 4
  %37 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %24, align 8
  %38 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %37, i64 0, i32 6, i32 0
  %39 = load float, float* %38, align 8
  br label %40

40:                                               ; preds = %36, %30
  %41 = phi i32 [ 2, %36 ], [ 1, %30 ]
  %42 = phi float [ %39, %36 ], [ %34, %30 ]
  %43 = phi %"struct.jxl::PassesEncoderState"* [ %37, %36 ], [ %32, %30 ]
  %44 = fcmp ogt float %42, 1.250000e+00
  br i1 %44, label %242, label %247

45:                                               ; preds = %247, %252, %23
  %46 = phi %"struct.jxl::PassesEncoderState"* [ %25, %23 ], [ %254, %252 ], [ %250, %247 ]
  %47 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %46, i64 0, i32 12, i32 0, i32 0, i32 0
  %48 = load %"class.jxl::EncoderHeuristics"*, %"class.jxl::EncoderHeuristics"** %47, align 8
  %49 = getelementptr inbounds %"class.jxl::LossyFrameEncoder", %"class.jxl::LossyFrameEncoder"* %0, i64 0, i32 1
  %50 = load %"class.jxl::ThreadPool"*, %"class.jxl::ThreadPool"** %49, align 8
  %51 = getelementptr inbounds %"class.jxl::LossyFrameEncoder", %"class.jxl::LossyFrameEncoder"* %0, i64 0, i32 2
  %52 = load %"struct.jxl::AuxOut"*, %"struct.jxl::AuxOut"** %51, align 8
  %53 = bitcast %"class.jxl::EncoderHeuristics"* %48 to i32 (%"class.jxl::EncoderHeuristics"*, %"struct.jxl::PassesEncoderState"*, %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ImageBundle"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::AuxOut"*)***
  %54 = load i32 (%"class.jxl::EncoderHeuristics"*, %"struct.jxl::PassesEncoderState"*, %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ImageBundle"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::AuxOut"*)**, i32 (%"class.jxl::EncoderHeuristics"*, %"struct.jxl::PassesEncoderState"*, %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ImageBundle"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::AuxOut"*)*** %53, align 8
  %55 = getelementptr inbounds i32 (%"class.jxl::EncoderHeuristics"*, %"struct.jxl::PassesEncoderState"*, %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ImageBundle"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::AuxOut"*)*, i32 (%"class.jxl::EncoderHeuristics"*, %"struct.jxl::PassesEncoderState"*, %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ImageBundle"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::AuxOut"*)** %54, i64 2
  %56 = load i32 (%"class.jxl::EncoderHeuristics"*, %"struct.jxl::PassesEncoderState"*, %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ImageBundle"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::AuxOut"*)*, i32 (%"class.jxl::EncoderHeuristics"*, %"struct.jxl::PassesEncoderState"*, %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ImageBundle"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::AuxOut"*)** %55, align 8
  %57 = call i32 %56(%"class.jxl::EncoderHeuristics"* %48, %"struct.jxl::PassesEncoderState"* %46, %"class.jxl::ModularFrameEncoder"* %4, %"class.jxl::ImageBundle"* %1, %"class.jxl::Image3"* %2, %"class.jxl::ThreadPool"* %50, %"struct.jxl::AuxOut"* %52) #8
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %240

59:                                               ; preds = %45
  %60 = load %"class.jxl::ThreadPool"*, %"class.jxl::ThreadPool"** %49, align 8
  %61 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %24, align 8
  %62 = load %"struct.jxl::AuxOut"*, %"struct.jxl::AuxOut"** %51, align 8
  call void @_ZN3jxl23InitializePassesEncoderERKNS_6Image3IfEEPNS_10ThreadPoolEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPNS_6AuxOutE(%"class.jxl::Image3"* dereferenceable(96) %2, %"class.jxl::ThreadPool"* %60, %"struct.jxl::PassesEncoderState"* %61, %"class.jxl::ModularFrameEncoder"* %4, %"struct.jxl::AuxOut"* %62) #8
  %63 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %24, align 8
  %64 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %63, i64 0, i32 7
  %65 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %63, i64 0, i32 5, i32 0, i32 0
  %66 = load i64, i64* %65, align 8
  %67 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %63, i64 0, i32 7, i32 0, i32 1
  %68 = bitcast %"struct.jxl::PassesEncoderState::PassData"** %67 to i64*
  %69 = load i64, i64* %68, align 8
  %70 = bitcast %"class.std::__1::vector.199"* %64 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = sub i64 %69, %71
  %73 = sdiv exact i64 %72, 152
  %74 = icmp ugt i64 %66, %73
  %75 = inttoptr i64 %71 to %"struct.jxl::PassesEncoderState::PassData"*
  %76 = inttoptr i64 %69 to %"struct.jxl::PassesEncoderState::PassData"*
  br i1 %74, label %77, label %79

77:                                               ; preds = %59
  %78 = sub i64 %66, %73
  call void @_ZNSt3__16vectorIN3jxl18PassesEncoderState8PassDataENS_9allocatorIS3_EEE8__appendEm(%"class.std::__1::vector.199"* %64, i64 %78) #8
  br label %89

79:                                               ; preds = %59
  %80 = icmp ult i64 %66, %73
  br i1 %80, label %81, label %89

81:                                               ; preds = %79
  %82 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %75, i64 %66
  %83 = icmp eq %"struct.jxl::PassesEncoderState::PassData"* %82, %76
  br i1 %83, label %88, label %84

84:                                               ; preds = %81, %84
  %85 = phi %"struct.jxl::PassesEncoderState::PassData"* [ %86, %84 ], [ %76, %81 ]
  %86 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %85, i64 -1
  call void @_ZN3jxl18PassesEncoderState8PassDataD2Ev(%"struct.jxl::PassesEncoderState::PassData"* %86) #8
  %87 = icmp eq %"struct.jxl::PassesEncoderState::PassData"* %86, %82
  br i1 %87, label %88, label %84

88:                                               ; preds = %84, %81
  store %"struct.jxl::PassesEncoderState::PassData"* %82, %"struct.jxl::PassesEncoderState::PassData"** %67, align 8
  br label %89

89:                                               ; preds = %77, %79, %88
  %90 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %24, align 8
  %91 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %90, i64 0, i32 7, i32 0, i32 0
  %92 = load %"struct.jxl::PassesEncoderState::PassData"*, %"struct.jxl::PassesEncoderState::PassData"** %91, align 8
  %93 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %90, i64 0, i32 7, i32 0, i32 1
  %94 = load %"struct.jxl::PassesEncoderState::PassData"*, %"struct.jxl::PassesEncoderState::PassData"** %93, align 8
  %95 = icmp eq %"struct.jxl::PassesEncoderState::PassData"* %92, %94
  br i1 %95, label %98, label %96

96:                                               ; preds = %89
  %97 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %25, i64 0, i32 0, i32 2, i32 14
  br label %202

98:                                               ; preds = %237, %89
  %99 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %25, i64 0, i32 0, i32 2
  call void @_ZN3jxl17LossyFrameEncoder21ComputeAllCoeffOrdersERKNS_15FrameDimensionsE(%"class.jxl::LossyFrameEncoder"* %0, %"struct.jxl::FrameDimensions"* dereferenceable(144) %99)
  %100 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %25, i64 0, i32 0, i32 18
  store i64 1, i64* %100, align 8
  %101 = bitcast %class.anon.442* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %101) #8
  %102 = getelementptr inbounds %class.anon.442, %class.anon.442* %9, i64 0, i32 0
  store %"class.jxl::LossyFrameEncoder"* %0, %"class.jxl::LossyFrameEncoder"** %102, align 8
  %103 = bitcast %class.anon.443* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %103) #8
  %104 = getelementptr inbounds %class.anon.443, %class.anon.443* %10, i64 0, i32 0
  %105 = getelementptr inbounds %class.anon.443, %class.anon.443* %10, i64 0, i32 1
  %106 = getelementptr inbounds %class.anon.443, %class.anon.443* %10, i64 0, i32 2
  store %"struct.jxl::PassesSharedState"* %26, %"struct.jxl::PassesSharedState"** %104, align 8
  store %"class.jxl::LossyFrameEncoder"* %0, %"class.jxl::LossyFrameEncoder"** %105, align 8
  store %"struct.jxl::FrameHeader"** %8, %"struct.jxl::FrameHeader"*** %106, align 8
  %107 = load %"class.jxl::ThreadPool"*, %"class.jxl::ThreadPool"** %49, align 8
  %108 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %25, i64 0, i32 0, i32 2, i32 14
  %109 = load i64, i64* %108, align 8
  %110 = trunc i64 %109 to i32
  %111 = call zeroext i1 @_ZN3jxl9RunOnPoolIZNS_17LossyFrameEncoder19ComputeEncodingDataEPKNS_11ImageBundleEPNS_6Image3IfEEPNS_10ThreadPoolEPNS_19ModularFrameEncoderEPNS_9BitWriterEPNS_11FrameHeaderEEUlmE_ZNS1_19ComputeEncodingDataES4_S7_S9_SB_SD_SF_EUliiE_EEbS9_jjRKT_RKT0_PKc(%"class.jxl::ThreadPool"* %107, i32 0, i32 %110, %class.anon.442* nonnull dereferenceable(8) %9, %class.anon.443* nonnull dereferenceable(24) %10, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.43, i64 0, i64 0))
  %112 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %25, i64 0, i32 0, i32 1
  %113 = load %"struct.jxl::FrameHeader"*, %"struct.jxl::FrameHeader"** %8, align 8
  %114 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %113, i64 0, i32 1
  %115 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %25, i64 0, i32 0, i32 1, i32 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %114, i8* align 8 %115, i64 28, i1 false) #8
  %116 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %113, i64 0, i32 7, i32 1
  %117 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %25, i64 0, i32 0, i32 1, i32 7, i32 1
  %118 = bitcast [3 x i32]* %116 to i8*
  %119 = bitcast [3 x i32]* %117 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %118, i8* align 8 %119, i64 14, i1 false) #8
  %120 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %113, i64 0, i32 8
  %121 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %25, i64 0, i32 0, i32 1, i32 8
  %122 = bitcast i32* %120 to i8*
  %123 = bitcast i32* %121 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %122, i8* align 8 %123, i64 12, i1 false) #8
  %124 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %113, i64 0, i32 11
  %125 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %25, i64 0, i32 0, i32 1, i32 11
  %126 = icmp eq %"struct.jxl::FrameHeader"* %113, %112
  br i1 %126, label %168, label %127

127:                                              ; preds = %98
  %128 = bitcast %"class.std::__1::basic_string"* %124 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %129 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %128, i64 0, i32 1, i32 0
  %130 = load i8, i8* %129, align 1
  %131 = icmp slt i8 %130, 0
  %132 = bitcast %"class.std::__1::basic_string"* %125 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %133 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %132, i64 0, i32 1, i32 0
  %134 = load i8, i8* %133, align 1
  %135 = icmp slt i8 %134, 0
  br i1 %131, label %146, label %136

136:                                              ; preds = %127
  br i1 %135, label %140, label %137

137:                                              ; preds = %136
  %138 = bitcast %"class.std::__1::basic_string"* %124 to i8*
  %139 = bitcast %"class.std::__1::basic_string"* %125 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %138, i8* align 8 %139, i64 24, i1 false) #8
  br label %156

140:                                              ; preds = %136
  %141 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %125, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %142 = load i8*, i8** %141, align 8
  %143 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %25, i64 0, i32 0, i32 1, i32 11, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %144 = load i64, i64* %143, align 8
  %145 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb1EEERS5_PKcm(%"class.std::__1::basic_string"* %124, i8* %142, i64 %144) #8
  br label %156

146:                                              ; preds = %127
  %147 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %125, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %148 = load i8*, i8** %147, align 8
  %149 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %25, i64 0, i32 0, i32 1, i32 11, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %150 = load i64, i64* %149, align 8
  %151 = bitcast %"class.std::__1::basic_string"* %125 to i8*
  %152 = zext i8 %134 to i64
  %153 = select i1 %135, i8* %148, i8* %151
  %154 = select i1 %135, i64 %150, i64 %152
  %155 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb0EEERS5_PKcm(%"class.std::__1::basic_string"* %124, i8* %153, i64 %154) #8
  br label %156

156:                                              ; preds = %137, %140, %146
  %157 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %113, i64 0, i32 12, i32 1
  %158 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %25, i64 0, i32 0, i32 1, i32 12, i32 1
  %159 = bitcast i32* %157 to i8*
  %160 = bitcast i32* %158 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %159, i8* align 8 %160, i64 140, i1 false) #8
  %161 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %113, i64 0, i32 13
  %162 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %25, i64 0, i32 0, i32 1, i32 13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %161, i8* align 8 %162, i64 16, i1 false) #8
  %163 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %113, i64 0, i32 16
  %164 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %25, i64 0, i32 0, i32 1, i32 16, i32 0, i32 0
  %165 = load i32*, i32** %164, align 8
  %166 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %25, i64 0, i32 0, i32 1, i32 16, i32 0, i32 1
  %167 = load i32*, i32** %166, align 8
  call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE6assignIPjEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector"* %163, i32* %165, i32* %167) #8
  br label %175

168:                                              ; preds = %98
  %169 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %25, i64 0, i32 0, i32 1, i32 12, i32 1
  %170 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %25, i64 0, i32 0, i32 1, i32 12, i32 1
  %171 = bitcast i32* %169 to i8*
  %172 = bitcast i32* %170 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %171, i8* align 8 %172, i64 140, i1 false) #8
  %173 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %25, i64 0, i32 0, i32 1, i32 13
  %174 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %25, i64 0, i32 0, i32 1, i32 13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %173, i8* align 8 %174, i64 16, i1 false) #8
  br label %175

175:                                              ; preds = %168, %156
  %176 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %113, i64 0, i32 17
  %177 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %25, i64 0, i32 0, i32 1, i32 17
  %178 = bitcast %"struct.jxl::FrameOrigin"* %177 to i64*
  %179 = bitcast %"struct.jxl::FrameOrigin"* %176 to i64*
  %180 = load i64, i64* %178, align 8
  store i64 %180, i64* %179, align 8
  %181 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %113, i64 0, i32 18, i32 1
  %182 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %25, i64 0, i32 0, i32 1, i32 18, i32 1
  %183 = bitcast i32* %181 to i8*
  %184 = bitcast i32* %182 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %183, i8* align 8 %184, i64 25, i1 false) #8
  br i1 %126, label %191, label %185

185:                                              ; preds = %175
  %186 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %113, i64 0, i32 19
  %187 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %25, i64 0, i32 0, i32 1, i32 19, i32 0, i32 0
  %188 = load %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"** %187, align 8
  %189 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %25, i64 0, i32 0, i32 1, i32 19, i32 0, i32 1
  %190 = load %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"** %189, align 8
  call void @_ZNSt3__16vectorIN3jxl12BlendingInfoENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_(%"class.std::__1::vector.92"* %186, %"struct.jxl::BlendingInfo"* %188, %"struct.jxl::BlendingInfo"* %190) #8
  br label %191

191:                                              ; preds = %175, %185
  %192 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %113, i64 0, i32 20, i32 1
  %193 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %25, i64 0, i32 0, i32 1, i32 20, i32 1
  %194 = bitcast i32* %192 to i8*
  %195 = bitcast i32* %193 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %194, i8* align 8 %195, i64 16, i1 false) #8
  %196 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %113, i64 0, i32 21
  %197 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %25, i64 0, i32 0, i32 1, i32 21
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %196, i8* align 8 %197, i64 24, i1 false) #8
  %198 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %113, i64 0, i32 26, i32 1
  %199 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %25, i64 0, i32 0, i32 1, i32 26, i32 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %198, i8* align 8 %199, i64 129, i1 false) #8
  %200 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %113, i64 0, i32 27
  %201 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %25, i64 0, i32 0, i32 1, i32 27
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %200, i8* align 8 %201, i64 16, i1 false) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %103) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %101) #8
  br label %240

202:                                              ; preds = %96, %237
  %203 = phi %"struct.jxl::PassesEncoderState::PassData"* [ %92, %96 ], [ %238, %237 ]
  %204 = load i64, i64* %97, align 8
  %205 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %203, i64 0, i32 0, i32 0, i32 1
  %206 = bitcast %"class.std::__1::vector.203"** %205 to i64*
  %207 = load i64, i64* %206, align 8
  %208 = bitcast %"struct.jxl::PassesEncoderState::PassData"* %203 to i64*
  %209 = load i64, i64* %208, align 8
  %210 = sub i64 %207, %209
  %211 = sdiv exact i64 %210, 24
  %212 = icmp ugt i64 %204, %211
  %213 = inttoptr i64 %209 to %"class.std::__1::vector.203"*
  %214 = inttoptr i64 %207 to %"class.std::__1::vector.203"*
  br i1 %212, label %215, label %218

215:                                              ; preds = %202
  %216 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %203, i64 0, i32 0
  %217 = sub i64 %204, %211
  call void @_ZNSt3__16vectorINS0_IN3jxl5TokenENS_9allocatorIS2_EEEENS3_IS5_EEE8__appendEm(%"class.std::__1::vector.201"* %216, i64 %217) #8
  br label %237

218:                                              ; preds = %202
  %219 = icmp ult i64 %204, %211
  br i1 %219, label %220, label %237

220:                                              ; preds = %218
  %221 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %213, i64 %204
  %222 = icmp eq %"class.std::__1::vector.203"* %221, %214
  br i1 %222, label %236, label %223

223:                                              ; preds = %220, %234
  %224 = phi %"class.std::__1::vector.203"* [ %225, %234 ], [ %214, %220 ]
  %225 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %224, i64 -1
  %226 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %225, i64 0, i32 0, i32 0
  %227 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %226, align 8
  %228 = icmp eq %"struct.jxl::Token"* %227, null
  br i1 %228, label %234, label %229

229:                                              ; preds = %223
  %230 = ptrtoint %"struct.jxl::Token"* %227 to i64
  %231 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %224, i64 -1, i32 0, i32 1
  %232 = bitcast %"struct.jxl::Token"** %231 to i64*
  store i64 %230, i64* %232, align 8
  %233 = bitcast %"struct.jxl::Token"* %227 to i8*
  call void @_ZdlPv(i8* %233) #13
  br label %234

234:                                              ; preds = %229, %223
  %235 = icmp eq %"class.std::__1::vector.203"* %225, %221
  br i1 %235, label %236, label %223

236:                                              ; preds = %234, %220
  store %"class.std::__1::vector.203"* %221, %"class.std::__1::vector.203"** %205, align 8
  br label %237

237:                                              ; preds = %215, %218, %236
  %238 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %203, i64 1
  %239 = icmp eq %"struct.jxl::PassesEncoderState::PassData"* %238, %94
  br i1 %239, label %98, label %202

240:                                              ; preds = %45, %191
  %241 = phi i32 [ 0, %191 ], [ %57, %45 ]
  ret i32 %241

242:                                              ; preds = %40
  %243 = add nuw nsw i32 %41, 1
  store i32 %243, i32* %31, align 4
  %244 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %24, align 8
  %245 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %244, i64 0, i32 6, i32 0
  %246 = load float, float* %245, align 8
  br label %247

247:                                              ; preds = %242, %40
  %248 = phi i32 [ %243, %242 ], [ %41, %40 ]
  %249 = phi float [ %246, %242 ], [ %42, %40 ]
  %250 = phi %"struct.jxl::PassesEncoderState"* [ %244, %242 ], [ %43, %40 ]
  %251 = fcmp ogt float %249, 9.000000e+00
  br i1 %251, label %252, label %45

252:                                              ; preds = %247
  %253 = add nuw nsw i32 %248, 1
  store i32 %253, i32* %31, align 4
  %254 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %24, align 8
  br label %45
}

declare void @_ZN3jxl15DownsampleImageEPNS_6Image3IfEEm(%"class.jxl::Image3"*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl9CopyImageIfEENS_5PlaneIT_EERKS3_(%"class.jxl::Plane"* noalias sret, %"class.jxl::Plane"* dereferenceable(32)) local_unnamed_addr #0 comdat {
  %3 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 4
  %5 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 0
  %7 = bitcast %"class.jxl::Plane"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 -86, i64 32, i1 false)
  %8 = load i32, i32* %6, align 8
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %13, i64 %9, i64 %12, i64 4) #8
  %14 = load i32, i32* %6, align 8, !noalias !39
  %15 = load i32, i32* %3, align 8, !alias.scope !39
  %16 = icmp eq i32 %14, %15
  br i1 %16, label %17, label %22

17:                                               ; preds = %2
  %18 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 1
  %19 = load i32, i32* %10, align 4, !noalias !39
  %20 = load i32, i32* %18, align 4, !alias.scope !39
  %21 = icmp eq i32 %19, %20
  br i1 %21, label %25, label %22

22:                                               ; preds = %17, %2
  %23 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.61, i64 0, i64 0), i32 34, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.62, i64 0, i64 0)) #8, !noalias !39
  %24 = tail call zeroext i1 @_ZN3jxl5AbortEv() #14, !noalias !39
  unreachable

25:                                               ; preds = %17
  %26 = icmp eq i32 %19, 0
  %27 = icmp eq i32 %14, 0
  %28 = or i1 %27, %26
  br i1 %28, label %66, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %31 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 4
  %32 = load i8*, i8** %5, align 8, !alias.scope !39
  %33 = load i64, i64* %4, align 8, !alias.scope !39
  %34 = load i8*, i8** %30, align 8, !noalias !39
  %35 = ptrtoint i8* %34 to i64
  %36 = and i64 %35, 63
  %37 = icmp eq i64 %36, 0
  tail call void @llvm.assume(i1 %37) #8, !noalias !39
  %38 = ptrtoint i8* %32 to i64
  %39 = and i64 %38, 63
  %40 = icmp eq i64 %39, 0
  tail call void @llvm.assume(i1 %40) #8, !noalias !39
  %41 = zext i32 %14 to i64
  %42 = shl nuw nsw i64 %41, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 64 %32, i8* align 64 %34, i64 %42, i1 false) #8, !noalias !39
  %43 = load i32, i32* %10, align 4, !noalias !39
  %44 = icmp ugt i32 %43, 1
  br i1 %44, label %45, label %66

45:                                               ; preds = %29, %45
  %46 = phi i64 [ %62, %45 ], [ 1, %29 ]
  %47 = load i32, i32* %6, align 8, !noalias !39
  %48 = load i8*, i8** %30, align 8, !noalias !39
  %49 = load i64, i64* %31, align 8, !noalias !39
  %50 = mul i64 %49, %46
  %51 = getelementptr inbounds i8, i8* %48, i64 %50
  %52 = ptrtoint i8* %51 to i64
  %53 = and i64 %52, 63
  %54 = icmp eq i64 %53, 0
  tail call void @llvm.assume(i1 %54) #8, !noalias !39
  %55 = mul i64 %46, %33
  %56 = getelementptr inbounds i8, i8* %32, i64 %55
  %57 = ptrtoint i8* %56 to i64
  %58 = and i64 %57, 63
  %59 = icmp eq i64 %58, 0
  tail call void @llvm.assume(i1 %59) #8, !noalias !39
  %60 = zext i32 %47 to i64
  %61 = shl nuw nsw i64 %60, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 64 %56, i8* align 64 %51, i64 %61, i1 false) #8, !noalias !39
  %62 = add nuw nsw i64 %46, 1
  %63 = load i32, i32* %10, align 4, !noalias !39
  %64 = zext i32 %63 to i64
  %65 = icmp ult i64 %62, %64
  br i1 %65, label %45, label %66

66:                                               ; preds = %45, %29, %25
  ret void
}

declare void @_ZN3jxl15DownsampleImageEPNS_5PlaneIfEEm(%"class.jxl::Plane"*, i64) local_unnamed_addr #1

declare i32 @_ZN3jxl19ModularFrameEncoder19ComputeEncodingDataERKNS_11FrameHeaderERKNS_13ImageMetadataEPNS_6Image3IfEERKNSt3__16vectorINS_5PlaneIfEENSA_9allocatorISD_EEEEPNS_18PassesEncoderStateEPNS_10ThreadPoolEPNS_6AuxOutEb(%"class.jxl::ModularFrameEncoder"*, %"struct.jxl::FrameHeader"* dereferenceable(576), %"struct.jxl::ImageMetadata"* dereferenceable(1600), %"class.jxl::Image3"*, %"class.std::__1::vector.85"* dereferenceable(24), %"struct.jxl::PassesEncoderState"*, %"class.jxl::ThreadPool"*, %"struct.jxl::AuxOut"*, i1 zeroext) local_unnamed_addr #1

declare void @_ZN3jxl9BitWriter17AppendByteAlignedERKNSt3__16vectorINS1_10unique_ptrIS0_NS1_14default_deleteIS0_EEEENS1_9allocatorIS6_EEEE(%"struct.jxl::BitWriter"*, %"class.std::__1::vector.191"* dereferenceable(24)) local_unnamed_addr #1

declare i32 @_ZN3jxl16WriteFrameHeaderERKNS_11FrameHeaderEPNS_9BitWriterEPNS_6AuxOutE(%"struct.jxl::FrameHeader"* dereferenceable(576), %"struct.jxl::BitWriter"*, %"struct.jxl::AuxOut"*) local_unnamed_addr #1

declare void @_ZN3jxl22PatchDictionaryEncoder6EncodeERKNS_15PatchDictionaryEPNS_9BitWriterEmPNS_6AuxOutE(%"class.jxl::PatchDictionary"* dereferenceable(80), %"struct.jxl::BitWriter"*, i64, %"struct.jxl::AuxOut"*) local_unnamed_addr #1

declare void @_ZN3jxl13EncodeSplinesERKNS_7SplinesEPNS_9BitWriterEmRKNS_15HistogramParamsEPNS_6AuxOutE(%"class.jxl::Splines"* dereferenceable(56), %"struct.jxl::BitWriter"*, i64, %"struct.jxl::HistogramParams"* dereferenceable(56), %"struct.jxl::AuxOut"*) local_unnamed_addr #1

declare void @_ZN3jxl11EncodeNoiseERKNS_11NoiseParamsEPNS_9BitWriterEmPNS_6AuxOutE(%"struct.jxl::NoiseParams"* dereferenceable(32), %"struct.jxl::BitWriter"*, i64, %"struct.jxl::AuxOut"*) local_unnamed_addr #1

declare i32 @_ZN3jxl23DequantMatricesEncodeDCEPKNS_15DequantMatricesEPNS_9BitWriterEmPNS_6AuxOutE(%"class.jxl::DequantMatrices"*, %"struct.jxl::BitWriter"*, i64, %"struct.jxl::AuxOut"*) local_unnamed_addr #1

declare i32 @_ZN3jxl19ModularFrameEncoder16EncodeGlobalInfoEPNS_9BitWriterEPNS_6AuxOutE(%"class.jxl::ModularFrameEncoder"*, %"struct.jxl::BitWriter"*, %"struct.jxl::AuxOut"*) local_unnamed_addr #1

declare i32 @_ZN3jxl19ModularFrameEncoder12EncodeStreamEPNS_9BitWriterEPNS_6AuxOutEmRKNS_15ModularStreamIdE(%"class.jxl::ModularFrameEncoder"*, %"struct.jxl::BitWriter"*, %"struct.jxl::AuxOut"*, i64, %"struct.jxl::ModularStreamId"* dereferenceable(32)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3jxl17LossyFrameEncoder18EncodeGlobalACInfoEPNS_9BitWriterEPNS_19ModularFrameEncoderE(%"class.jxl::LossyFrameEncoder"*, %"struct.jxl::BitWriter"*, %"class.jxl::ModularFrameEncoder"*) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"struct.jxl::PassesEncoderState"*, align 8
  %5 = alloca %"class.std::__1::vector.21", align 8
  %6 = alloca %"struct.jxl::EntropyEncodingData", align 8
  %7 = alloca i64, align 8
  %8 = alloca %"class.std::__1::vector.445", align 8
  %9 = alloca %"struct.jxl::HistogramParams", align 8
  %10 = alloca %class.anon.451, align 8
  %11 = alloca %"class.std::__1::vector.201", align 8
  %12 = alloca [1 x %"class.std::__1::vector.203"], align 8
  %13 = alloca %class.anon.453, align 8
  %14 = alloca %"class.std::__1::vector.147", align 8
  %15 = alloca %"class.std::__1::vector.147", align 8
  %16 = alloca %"class.std::__1::vector.445", align 8
  %17 = alloca %"class.std::__1::vector.147", align 8
  %18 = alloca %class.anon.456, align 8
  %19 = alloca %"class.std::__1::vector.147", align 8
  %20 = alloca %"class.std::__1::vector.147", align 8
  %21 = alloca %"class.std::__1::vector.147", align 8
  %22 = alloca %"class.std::__1::vector.147", align 8
  %23 = alloca %"class.jxl::BitWriter::Allotment", align 8
  %24 = alloca i64, align 8
  %25 = alloca %"class.jxl::BitWriter::Allotment", align 8
  %26 = alloca %"struct.jxl::HistogramParams", align 16
  %27 = getelementptr inbounds %"class.jxl::LossyFrameEncoder", %"class.jxl::LossyFrameEncoder"* %0, i64 0, i32 0
  %28 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %27, align 8
  %29 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %28, i64 0, i32 0, i32 4
  %30 = getelementptr inbounds %"class.jxl::LossyFrameEncoder", %"class.jxl::LossyFrameEncoder"* %0, i64 0, i32 2
  %31 = load %"struct.jxl::AuxOut"*, %"struct.jxl::AuxOut"** %30, align 8
  %32 = tail call i32 @_ZN3jxl21DequantMatricesEncodeEPKNS_15DequantMatricesEPNS_9BitWriterEmPNS_6AuxOutEPNS_19ModularFrameEncoderE(%"class.jxl::DequantMatrices"* %29, %"struct.jxl::BitWriter"* %1, i64 4, %"struct.jxl::AuxOut"* %31, %"class.jxl::ModularFrameEncoder"* %2) #8
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %1456

34:                                               ; preds = %3
  %35 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %27, align 8
  %36 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %35, i64 0, i32 6, i32 7
  %37 = load i32, i32* %36, align 4
  %38 = icmp slt i32 %37, 2
  br i1 %38, label %39, label %1336

39:                                               ; preds = %34
  %40 = bitcast %"struct.jxl::PassesEncoderState"** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %40)
  %41 = bitcast %"class.std::__1::vector.147"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %41)
  %42 = bitcast %"class.std::__1::vector.147"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %42)
  store %"struct.jxl::PassesEncoderState"* %35, %"struct.jxl::PassesEncoderState"** %4, align 8
  %43 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %35, i64 0, i32 0, i32 1, i32 12, i32 1
  %44 = load i32, i32* %43, align 8
  %45 = icmp ugt i32 %44, 1
  br i1 %45, label %1334, label %46

46:                                               ; preds = %39
  %47 = bitcast %"class.std::__1::vector.21"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %47) #8
  %48 = getelementptr inbounds %"class.std::__1::vector.21", %"class.std::__1::vector.21"* %5, i64 0, i32 0, i32 0
  %49 = getelementptr inbounds %"class.std::__1::vector.21", %"class.std::__1::vector.21"* %5, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %47, i8 0, i64 24, i1 false) #8
  %50 = bitcast %"struct.jxl::EntropyEncodingData"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %50) #8
  %51 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %6, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %51, i8 -86, i64 80, i1 false) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %50, i8 0, i64 24, i1 false) #8
  %52 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %6, i64 0, i32 2
  %53 = bitcast %"class.std::__1::vector.223"* %52 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %53, i8 0, i64 24, i1 false) #8
  %54 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %6, i64 0, i32 3
  call void @_ZN3jxl10LZ77ParamsC1Ev(%"struct.jxl::LZ77Params"* %54) #8
  %55 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %4, align 8
  %56 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %55, i64 0, i32 7, i32 0, i32 0
  %57 = load %"struct.jxl::PassesEncoderState::PassData"*, %"struct.jxl::PassesEncoderState::PassData"** %56, align 8
  %58 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %57, i64 0, i32 0
  %59 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %57, i64 0, i32 0, i32 0, i32 1
  %60 = bitcast %"class.std::__1::vector.203"** %59 to i64*
  %61 = load i64, i64* %60, align 8
  %62 = bitcast %"struct.jxl::PassesEncoderState::PassData"* %57 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = sub i64 %61, %63
  %65 = sdiv exact i64 %64, 24
  %66 = uitofp i64 %65 to double
  %67 = call double @sqrt(double %66) #8
  %68 = call double @llvm.ceil.f64(double %67) #8
  %69 = fptoui double %68 to i64
  %70 = icmp eq i64 %69, 1
  br i1 %70, label %1272, label %71

71:                                               ; preds = %46
  %72 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %72) #8
  %73 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %4, align 8
  %74 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %73, i64 0, i32 0, i32 15, i32 3
  %75 = load i64, i64* %74, align 8
  %76 = mul i64 %75, 495
  %77 = and i64 %76, 4294967295
  store i64 %77, i64* %7, align 8
  %78 = bitcast %"class.std::__1::vector.445"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %78) #8
  %79 = getelementptr inbounds %"class.std::__1::vector.445", %"class.std::__1::vector.445"* %8, i64 0, i32 0, i32 0
  %80 = getelementptr inbounds %"class.std::__1::vector.445", %"class.std::__1::vector.445"* %8, i64 0, i32 0, i32 1
  %81 = getelementptr inbounds %"class.std::__1::vector.445", %"class.std::__1::vector.445"* %8, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %78, i8 -86, i64 24, i1 false) #8
  %82 = load i64, i64* %60, align 8
  %83 = load i64, i64* %62, align 8
  %84 = sub i64 %82, %83
  %85 = sdiv exact i64 %84, 24
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %78, i8 0, i64 24, i1 false) #8
  %86 = icmp eq i64 %84, 0
  br i1 %86, label %106, label %87

87:                                               ; preds = %71
  %88 = icmp ugt i64 %85, 4611686018427387903
  br i1 %88, label %89, label %91

89:                                               ; preds = %87
  %90 = bitcast %"class.std::__1::vector.445"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %90) #14
  unreachable

91:                                               ; preds = %87
  %92 = shl nsw i64 %85, 2
  %93 = call i8* @_Znwm(i64 %92) #13
  %94 = bitcast i8* %93 to float*
  %95 = bitcast %"class.std::__1::vector.445"* %8 to i8**
  store i8* %93, i8** %95, align 8
  %96 = getelementptr inbounds float, float* %94, i64 %85
  store float* %96, float** %81, align 8
  %97 = bitcast float** %80 to i64*
  %98 = ptrtoint i8* %93 to i64
  %99 = add nsw i64 %85, -1
  %100 = getelementptr float, float* %94, i64 %99
  %101 = ptrtoint float* %100 to i64
  %102 = sub i64 4, %98
  %103 = add i64 %102, %101
  %104 = and i64 %103, -4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %93, i8 0, i64 %104, i1 false) #8
  %105 = ptrtoint float* %96 to i64
  store i64 %105, i64* %97, align 8
  br label %106

106:                                              ; preds = %91, %71
  %107 = bitcast %"struct.jxl::HistogramParams"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %107) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %107, i8 -86, i64 56, i1 false) #8
  %108 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %9, i64 0, i32 0
  store i32 2, i32* %108, align 8
  %109 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %9, i64 0, i32 1
  %110 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %9, i64 0, i32 2
  %111 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %9, i64 0, i32 3
  %112 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %9, i64 0, i32 4
  %113 = bitcast %"class.std::__1::vector.147"* %112 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %113, i8 0, i64 24, i1 false) #8
  %114 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %9, i64 0, i32 5
  store i64 -1, i64* %114, align 8
  %115 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %9, i64 0, i32 6
  store i8 0, i8* %115, align 8
  store i32 0, i32* %109, align 4
  store i32 0, i32* %110, align 8
  store i32 1, i32* %111, align 4
  %116 = bitcast %class.anon.451* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %116) #8
  %117 = getelementptr inbounds %class.anon.451, %class.anon.451* %10, i64 0, i32 0
  %118 = getelementptr inbounds %class.anon.451, %class.anon.451* %10, i64 0, i32 1
  %119 = getelementptr inbounds %class.anon.451, %class.anon.451* %10, i64 0, i32 2
  store %"struct.jxl::HistogramParams"* %9, %"struct.jxl::HistogramParams"** %117, align 8
  store %"struct.jxl::EntropyEncodingData"* %6, %"struct.jxl::EntropyEncodingData"** %118, align 8
  store %"class.std::__1::vector.21"* %5, %"class.std::__1::vector.21"** %119, align 8
  %120 = load i64, i64* %60, align 8
  %121 = load i64, i64* %62, align 8
  %122 = icmp eq i64 %120, %121
  br i1 %122, label %139, label %123

123:                                              ; preds = %106
  %124 = bitcast %"class.std::__1::vector.201"* %11 to i8*
  %125 = getelementptr inbounds %"class.std::__1::vector.201", %"class.std::__1::vector.201"* %11, i64 0, i32 0, i32 0
  %126 = getelementptr inbounds %"class.std::__1::vector.201", %"class.std::__1::vector.201"* %11, i64 0, i32 0, i32 1
  %127 = getelementptr inbounds %"class.std::__1::vector.201", %"class.std::__1::vector.201"* %11, i64 0, i32 0, i32 2, i32 0, i32 0
  %128 = bitcast [1 x %"class.std::__1::vector.203"]* %12 to i8*
  %129 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %57, i64 0, i32 0, i32 0, i32 0
  %130 = getelementptr inbounds [1 x %"class.std::__1::vector.203"], [1 x %"class.std::__1::vector.203"]* %12, i64 0, i64 0, i32 0, i32 1
  %131 = bitcast %"struct.jxl::Token"** %130 to i8**
  %132 = bitcast [1 x %"class.std::__1::vector.203"]* %12 to i8**
  %133 = getelementptr inbounds [1 x %"class.std::__1::vector.203"], [1 x %"class.std::__1::vector.203"]* %12, i64 0, i64 0, i32 0, i32 2, i32 0, i32 0
  %134 = bitcast %"struct.jxl::Token"** %130 to i64*
  %135 = bitcast %"class.std::__1::vector.203"** %126 to i8**
  %136 = bitcast %"class.std::__1::vector.201"* %11 to i8**
  %137 = bitcast %"class.std::__1::vector.203"** %127 to i8**
  %138 = bitcast %"class.std::__1::vector.203"** %126 to i64*
  br label %221

139:                                              ; preds = %338, %106
  %140 = phi i64 [ 0, %106 ], [ %314, %338 ]
  %141 = bitcast %class.anon.453* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %141) #8
  %142 = getelementptr inbounds %class.anon.453, %class.anon.453* %13, i64 0, i32 0
  %143 = getelementptr inbounds %class.anon.453, %class.anon.453* %13, i64 0, i32 1
  %144 = getelementptr inbounds %class.anon.453, %class.anon.453* %13, i64 0, i32 2
  %145 = getelementptr inbounds %class.anon.453, %class.anon.453* %13, i64 0, i32 3
  store %"class.std::__1::vector.201"* %58, %"class.std::__1::vector.201"** %142, align 8
  store %class.anon.451* %10, %class.anon.451** %143, align 8
  store i64* %7, i64** %144, align 8
  store %"class.std::__1::vector.445"* %8, %"class.std::__1::vector.445"** %145, align 8
  %146 = bitcast %"class.std::__1::vector.147"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %146) #8
  %147 = getelementptr inbounds %"class.std::__1::vector.147", %"class.std::__1::vector.147"* %14, i64 0, i32 0, i32 0
  %148 = getelementptr inbounds %"class.std::__1::vector.147", %"class.std::__1::vector.147"* %14, i64 0, i32 0, i32 1
  %149 = getelementptr inbounds %"class.std::__1::vector.147", %"class.std::__1::vector.147"* %14, i64 0, i32 0, i32 2, i32 0, i32 0
  %150 = call i8* @_Znwm(i64 8) #13
  %151 = bitcast i8* %150 to i64*
  %152 = bitcast %"class.std::__1::vector.147"* %14 to i8**
  store i8* %150, i8** %152, align 8
  %153 = getelementptr inbounds i8, i8* %150, i64 8
  %154 = bitcast i64** %149 to i8**
  store i8* %153, i8** %154, align 8
  %155 = bitcast i64** %148 to i64*
  store i64 %140, i64* %151, align 8
  %156 = ptrtoint i8* %153 to i64
  store i64 %156, i64* %155, align 8
  %157 = bitcast %"class.std::__1::vector.147"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %157) #8
  %158 = getelementptr inbounds %"class.std::__1::vector.147", %"class.std::__1::vector.147"* %15, i64 0, i32 0, i32 0
  %159 = getelementptr inbounds %"class.std::__1::vector.147", %"class.std::__1::vector.147"* %15, i64 0, i32 0, i32 1
  %160 = getelementptr inbounds %"class.std::__1::vector.147", %"class.std::__1::vector.147"* %15, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %157, i8 -86, i64 24, i1 false) #8
  %161 = load i64, i64* %60, align 8
  %162 = load i64, i64* %62, align 8
  %163 = sub i64 %161, %162
  %164 = sdiv exact i64 %163, 24
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %157, i8 0, i64 24, i1 false) #8
  %165 = icmp eq i64 %163, 0
  br i1 %165, label %185, label %166

166:                                              ; preds = %139
  %167 = icmp ugt i64 %164, 2305843009213693951
  br i1 %167, label %168, label %170

168:                                              ; preds = %166
  %169 = bitcast %"class.std::__1::vector.147"* %15 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %169) #14
  unreachable

170:                                              ; preds = %166
  %171 = shl nsw i64 %164, 3
  %172 = call i8* @_Znwm(i64 %171) #13
  %173 = bitcast i8* %172 to i64*
  %174 = bitcast %"class.std::__1::vector.147"* %15 to i8**
  store i8* %172, i8** %174, align 8
  %175 = getelementptr inbounds i64, i64* %173, i64 %164
  store i64* %175, i64** %160, align 8
  %176 = bitcast i64** %159 to i64*
  %177 = ptrtoint i8* %172 to i64
  %178 = add nsw i64 %164, -1
  %179 = getelementptr i64, i64* %173, i64 %178
  %180 = ptrtoint i64* %179 to i64
  %181 = sub i64 8, %177
  %182 = add i64 %181, %180
  %183 = and i64 %182, -8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %172, i8 0, i64 %183, i1 false) #8
  %184 = ptrtoint i64* %175 to i64
  store i64 %184, i64* %176, align 8
  br label %185

185:                                              ; preds = %170, %139
  %186 = bitcast %"class.std::__1::vector.445"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %186) #8
  %187 = getelementptr inbounds %"class.std::__1::vector.445", %"class.std::__1::vector.445"* %16, i64 0, i32 0, i32 0
  %188 = getelementptr inbounds %"class.std::__1::vector.445", %"class.std::__1::vector.445"* %16, i64 0, i32 0, i32 1
  %189 = getelementptr inbounds %"class.std::__1::vector.445", %"class.std::__1::vector.445"* %16, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %186, i8 -86, i64 24, i1 false) #8
  %190 = load i64, i64* %60, align 8
  %191 = load i64, i64* %62, align 8
  %192 = sub i64 %190, %191
  %193 = sdiv exact i64 %192, 24
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %186, i8 0, i64 24, i1 false) #8
  %194 = icmp eq i64 %192, 0
  br i1 %194, label %214, label %195

195:                                              ; preds = %185
  %196 = icmp ugt i64 %193, 4611686018427387903
  br i1 %196, label %197, label %199

197:                                              ; preds = %195
  %198 = bitcast %"class.std::__1::vector.445"* %16 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %198) #14
  unreachable

199:                                              ; preds = %195
  %200 = shl nsw i64 %193, 2
  %201 = call i8* @_Znwm(i64 %200) #13
  %202 = bitcast i8* %201 to float*
  %203 = bitcast %"class.std::__1::vector.445"* %16 to i8**
  store i8* %201, i8** %203, align 8
  %204 = getelementptr inbounds float, float* %202, i64 %193
  store float* %204, float** %189, align 8
  %205 = bitcast float** %188 to i64*
  %206 = ptrtoint i8* %201 to i64
  %207 = add nsw i64 %193, -1
  %208 = getelementptr float, float* %202, i64 %207
  %209 = ptrtoint float* %208 to i64
  %210 = sub i64 4, %206
  %211 = add i64 %210, %209
  %212 = and i64 %211, -4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %201, i8 0, i64 %212, i1 false) #8
  %213 = ptrtoint float* %204 to i64
  store i64 %213, i64* %205, align 8
  br label %214

214:                                              ; preds = %199, %185
  %215 = phi float* [ null, %185 ], [ %202, %199 ]
  %216 = load i64, i64* %60, align 8
  %217 = load i64, i64* %62, align 8
  %218 = icmp eq i64 %216, %217
  br i1 %218, label %345, label %219

219:                                              ; preds = %214
  %220 = trunc i64 %140 to i32
  br label %354

221:                                              ; preds = %338, %123
  %222 = phi i64 [ 0, %123 ], [ %314, %338 ]
  %223 = phi i64 [ 0, %123 ], [ %339, %338 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %124) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %124, i8 -86, i64 24, i1 false) #8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %128) #8
  %224 = load %"class.std::__1::vector.203"*, %"class.std::__1::vector.203"** %129, align 8
  %225 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %224, i64 %223
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %128, i8 0, i64 24, i1 false) #8
  %226 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %224, i64 %223, i32 0, i32 1
  %227 = bitcast %"struct.jxl::Token"** %226 to i64*
  %228 = load i64, i64* %227, align 8
  %229 = bitcast %"class.std::__1::vector.203"* %225 to i64*
  %230 = load i64, i64* %229, align 8
  %231 = sub i64 %228, %230
  %232 = ashr exact i64 %231, 3
  %233 = icmp eq i64 %231, 0
  br i1 %233, label %256, label %234

234:                                              ; preds = %221
  %235 = icmp ugt i64 %232, 2305843009213693951
  br i1 %235, label %236, label %238

236:                                              ; preds = %234
  %237 = bitcast [1 x %"class.std::__1::vector.203"]* %12 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %237) #14
  unreachable

238:                                              ; preds = %234
  %239 = call i8* @_Znwm(i64 %231) #13
  %240 = bitcast i8* %239 to %"struct.jxl::Token"*
  store i8* %239, i8** %131, align 8
  store i8* %239, i8** %132, align 8
  %241 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %240, i64 %232
  store %"struct.jxl::Token"* %241, %"struct.jxl::Token"** %133, align 8
  %242 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %225, i64 0, i32 0, i32 0
  %243 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %242, align 8
  %244 = load i64, i64* %227, align 8
  %245 = ptrtoint i8* %239 to i64
  %246 = ptrtoint %"struct.jxl::Token"* %243 to i64
  %247 = sub i64 %244, %246
  %248 = icmp sgt i64 %247, 0
  br i1 %248, label %249, label %254

249:                                              ; preds = %238
  %250 = lshr exact i64 %247, 3
  %251 = bitcast %"struct.jxl::Token"* %243 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %239, i8* align 4 %251, i64 %247, i1 false) #8
  %252 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %240, i64 %250
  %253 = ptrtoint %"struct.jxl::Token"* %252 to i64
  br label %254

254:                                              ; preds = %249, %238
  %255 = phi i64 [ %253, %249 ], [ %245, %238 ]
  store i64 %255, i64* %134, align 8
  br label %256

256:                                              ; preds = %254, %221
  %257 = phi i8* [ null, %221 ], [ %239, %254 ]
  %258 = phi %"struct.jxl::Token"* [ null, %221 ], [ %240, %254 ]
  %259 = phi i64 [ 0, %221 ], [ %245, %254 ]
  %260 = phi i64 [ 0, %221 ], [ %255, %254 ]
  %261 = call i8* @_Znwm(i64 24) #13
  store i8* %261, i8** %135, align 8
  store i8* %261, i8** %136, align 8
  %262 = getelementptr inbounds i8, i8* %261, i64 24
  store i8* %262, i8** %137, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %261, i8 0, i64 24, i1 false) #8
  %263 = sub i64 %260, %259
  %264 = ashr exact i64 %263, 3
  %265 = icmp eq i64 %263, 0
  br i1 %265, label %290, label %266

266:                                              ; preds = %256
  %267 = icmp ugt i64 %264, 2305843009213693951
  br i1 %267, label %268, label %270

268:                                              ; preds = %266
  %269 = bitcast i8* %261 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %269) #14
  unreachable

270:                                              ; preds = %266
  %271 = call i8* @_Znwm(i64 %263) #13
  %272 = bitcast i8* %271 to %"struct.jxl::Token"*
  %273 = getelementptr inbounds i8, i8* %261, i64 8
  %274 = bitcast i8* %273 to i8**
  store i8* %271, i8** %274, align 8
  %275 = bitcast i8* %261 to i8**
  store i8* %271, i8** %275, align 8
  %276 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %272, i64 %264
  %277 = getelementptr inbounds i8, i8* %261, i64 16
  %278 = bitcast i8* %277 to %"struct.jxl::Token"**
  store %"struct.jxl::Token"* %276, %"struct.jxl::Token"** %278, align 8
  %279 = bitcast i8* %273 to i64*
  %280 = ptrtoint i8* %271 to i64
  %281 = ptrtoint %"struct.jxl::Token"* %258 to i64
  %282 = sub i64 %260, %281
  %283 = icmp sgt i64 %282, 0
  br i1 %283, label %284, label %288

284:                                              ; preds = %270
  %285 = lshr exact i64 %282, 3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %271, i8* align 4 %257, i64 %282, i1 false) #8
  %286 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %272, i64 %285
  %287 = ptrtoint %"struct.jxl::Token"* %286 to i64
  br label %288

288:                                              ; preds = %284, %270
  %289 = phi i64 [ %287, %284 ], [ %280, %270 ]
  store i64 %289, i64* %279, align 8
  br label %290

290:                                              ; preds = %288, %256
  %291 = ptrtoint i8* %262 to i64
  store i64 %291, i64* %138, align 8
  %292 = icmp eq %"struct.jxl::Token"* %258, null
  br i1 %292, label %295, label %293

293:                                              ; preds = %290
  %294 = ptrtoint %"struct.jxl::Token"* %258 to i64
  store i64 %294, i64* %134, align 8
  call void @_ZdlPv(i8* %257) #13
  br label %295

295:                                              ; preds = %293, %290
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %128) #8
  %296 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %4, align 8
  %297 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %296, i64 0, i32 0, i32 15, i32 3
  %298 = load i64, i64* %297, align 8
  %299 = mul i64 %298, 495
  %300 = and i64 %299, 4294967295
  %301 = load %"struct.jxl::HistogramParams"*, %"struct.jxl::HistogramParams"** %117, align 8
  %302 = load %"struct.jxl::EntropyEncodingData"*, %"struct.jxl::EntropyEncodingData"** %118, align 8
  %303 = load %"class.std::__1::vector.21"*, %"class.std::__1::vector.21"** %119, align 8
  %304 = call i64 @_ZN3jxl24BuildAndEncodeHistogramsERKNS_15HistogramParamsEmRNSt3__16vectorINS4_INS_5TokenENS3_9allocatorIS5_EEEENS6_IS8_EEEEPNS_19EntropyEncodingDataEPNS4_IhNS6_IhEEEEPNS_9BitWriterEmPNS_6AuxOutE(%"struct.jxl::HistogramParams"* dereferenceable(56) %301, i64 %300, %"class.std::__1::vector.201"* nonnull dereferenceable(24) %11, %"struct.jxl::EntropyEncodingData"* %302, %"class.std::__1::vector.21"* %303, %"struct.jxl::BitWriter"* null, i64 0, %"struct.jxl::AuxOut"* null) #8
  %305 = uitofp i64 %304 to float
  %306 = load float*, float** %79, align 8
  %307 = getelementptr inbounds float, float* %306, i64 %223
  store float %305, float* %307, align 4
  %308 = load float*, float** %79, align 8
  %309 = getelementptr inbounds float, float* %308, i64 %223
  %310 = load float, float* %309, align 4
  %311 = getelementptr inbounds float, float* %308, i64 %222
  %312 = load float, float* %311, align 4
  %313 = fcmp ogt float %310, %312
  %314 = select i1 %313, i64 %223, i64 %222
  %315 = load %"class.std::__1::vector.203"*, %"class.std::__1::vector.203"** %125, align 8
  %316 = icmp eq %"class.std::__1::vector.203"* %315, null
  br i1 %316, label %338, label %317

317:                                              ; preds = %295
  %318 = bitcast %"class.std::__1::vector.203"* %315 to i8*
  %319 = load %"class.std::__1::vector.203"*, %"class.std::__1::vector.203"** %126, align 8
  %320 = icmp eq %"class.std::__1::vector.203"* %319, %315
  br i1 %320, label %336, label %321

321:                                              ; preds = %317, %332
  %322 = phi %"class.std::__1::vector.203"* [ %323, %332 ], [ %319, %317 ]
  %323 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %322, i64 -1
  %324 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %323, i64 0, i32 0, i32 0
  %325 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %324, align 8
  %326 = icmp eq %"struct.jxl::Token"* %325, null
  br i1 %326, label %332, label %327

327:                                              ; preds = %321
  %328 = ptrtoint %"struct.jxl::Token"* %325 to i64
  %329 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %322, i64 -1, i32 0, i32 1
  %330 = bitcast %"struct.jxl::Token"** %329 to i64*
  store i64 %328, i64* %330, align 8
  %331 = bitcast %"struct.jxl::Token"* %325 to i8*
  call void @_ZdlPv(i8* %331) #13
  br label %332

332:                                              ; preds = %327, %321
  %333 = icmp eq %"class.std::__1::vector.203"* %323, %315
  br i1 %333, label %334, label %321

334:                                              ; preds = %332
  %335 = load i8*, i8** %136, align 8
  br label %336

336:                                              ; preds = %334, %317
  %337 = phi i8* [ %335, %334 ], [ %318, %317 ]
  store %"class.std::__1::vector.203"* %315, %"class.std::__1::vector.203"** %126, align 8
  call void @_ZdlPv(i8* %337) #13
  br label %338

338:                                              ; preds = %336, %295
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %124) #8
  %339 = add nuw i64 %223, 1
  %340 = load i64, i64* %60, align 8
  %341 = load i64, i64* %62, align 8
  %342 = sub i64 %340, %341
  %343 = sdiv exact i64 %342, 24
  %344 = icmp ult i64 %339, %343
  br i1 %344, label %221, label %139

345:                                              ; preds = %371, %214
  %346 = phi float* [ %215, %214 ], [ %372, %371 ]
  %347 = phi i64 [ 0, %214 ], [ %373, %371 ]
  %348 = getelementptr inbounds float, float* %346, i64 %347
  %349 = load float, float* %348, align 4
  %350 = fcmp ogt float %349, 0.000000e+00
  %351 = bitcast %"class.std::__1::vector.147"* %14 to i64*
  br i1 %350, label %352, label %503

352:                                              ; preds = %345
  %353 = bitcast i64** %149 to i64*
  br label %386

354:                                              ; preds = %371, %219
  %355 = phi float* [ %215, %219 ], [ %372, %371 ]
  %356 = phi i64 [ 0, %219 ], [ %374, %371 ]
  %357 = phi i64 [ 0, %219 ], [ %373, %371 ]
  %358 = icmp eq i64 %356, %140
  br i1 %358, label %371, label %359

359:                                              ; preds = %354
  %360 = trunc i64 %356 to i32
  %361 = call fastcc float @"_ZZN3jxl12_GLOBAL__N_113ClusterGroupsEPNS_18PassesEncoderStateEENK3$_6clEii"(%class.anon.453* nonnull %13, i32 %220, i32 %360) #8
  %362 = load float*, float** %187, align 8
  %363 = getelementptr inbounds float, float* %362, i64 %356
  store float %361, float* %363, align 4
  %364 = load float*, float** %187, align 8
  %365 = getelementptr inbounds float, float* %364, i64 %356
  %366 = load float, float* %365, align 4
  %367 = getelementptr inbounds float, float* %364, i64 %357
  %368 = load float, float* %367, align 4
  %369 = fcmp ogt float %366, %368
  br i1 %369, label %370, label %371

370:                                              ; preds = %359
  br label %371

371:                                              ; preds = %370, %359, %354
  %372 = phi float* [ %355, %354 ], [ %364, %370 ], [ %364, %359 ]
  %373 = phi i64 [ %357, %354 ], [ %356, %370 ], [ %357, %359 ]
  %374 = add nuw i64 %356, 1
  %375 = load i64, i64* %60, align 8
  %376 = load i64, i64* %62, align 8
  %377 = sub i64 %375, %376
  %378 = sdiv exact i64 %377, 24
  %379 = icmp ult i64 %374, %378
  br i1 %379, label %354, label %345

380:                                              ; preds = %490, %453
  %381 = phi float* [ %454, %453 ], [ %492, %490 ]
  %382 = phi i64 [ %387, %453 ], [ %496, %490 ]
  %383 = getelementptr inbounds float, float* %381, i64 %382
  %384 = load float, float* %383, align 4
  %385 = fcmp ogt float %384, 0.000000e+00
  br i1 %385, label %386, label %503

386:                                              ; preds = %380, %352
  %387 = phi i64 [ %347, %352 ], [ %382, %380 ]
  %388 = load i64, i64* %155, align 8
  %389 = load i64, i64* %351, align 8
  %390 = sub i64 %388, %389
  %391 = ashr exact i64 %390, 3
  %392 = icmp ult i64 %391, %69
  %393 = inttoptr i64 %388 to i64*
  br i1 %392, label %394, label %503

394:                                              ; preds = %386
  %395 = load i64*, i64** %149, align 8
  %396 = icmp eq i64* %395, %393
  br i1 %396, label %400, label %397

397:                                              ; preds = %394
  store i64 %387, i64* %393, align 8
  %398 = getelementptr inbounds i64, i64* %393, i64 1
  %399 = ptrtoint i64* %398 to i64
  store i64 %399, i64* %155, align 8
  br label %437

400:                                              ; preds = %394
  %401 = add nsw i64 %391, 1
  %402 = icmp ugt i64 %401, 2305843009213693951
  br i1 %402, label %403, label %405

403:                                              ; preds = %400
  %404 = bitcast %"class.std::__1::vector.147"* %14 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %404) #14
  unreachable

405:                                              ; preds = %400
  %406 = icmp ult i64 %391, 1152921504606846975
  br i1 %406, label %407, label %415

407:                                              ; preds = %405
  %408 = ashr exact i64 %390, 2
  %409 = icmp ult i64 %408, %401
  %410 = select i1 %409, i64 %401, i64 %408
  %411 = icmp eq i64 %410, 0
  br i1 %411, label %420, label %412

412:                                              ; preds = %407
  %413 = icmp ugt i64 %410, 2305843009213693951
  br i1 %413, label %414, label %415

414:                                              ; preds = %412
  call void @abort() #14
  unreachable

415:                                              ; preds = %412, %405
  %416 = phi i64 [ %410, %412 ], [ 2305843009213693951, %405 ]
  %417 = shl i64 %416, 3
  %418 = call i8* @_Znwm(i64 %417) #13
  %419 = bitcast i8* %418 to i64*
  br label %420

420:                                              ; preds = %415, %407
  %421 = phi i64 [ %416, %415 ], [ 0, %407 ]
  %422 = phi i8* [ %418, %415 ], [ null, %407 ]
  %423 = phi i64* [ %419, %415 ], [ null, %407 ]
  %424 = getelementptr inbounds i64, i64* %423, i64 %391
  %425 = getelementptr inbounds i64, i64* %423, i64 %421
  %426 = ptrtoint i64* %425 to i64
  store i64 %387, i64* %424, align 8
  %427 = getelementptr inbounds i64, i64* %424, i64 1
  %428 = ptrtoint i64* %427 to i64
  %429 = ptrtoint i64* %423 to i64
  %430 = icmp sgt i64 %390, 0
  br i1 %430, label %431, label %433

431:                                              ; preds = %420
  %432 = inttoptr i64 %389 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %422, i8* align 8 %432, i64 %390, i1 false) #8
  br label %433

433:                                              ; preds = %431, %420
  store i64 %429, i64* %351, align 8
  store i64 %428, i64* %155, align 8
  store i64 %426, i64* %353, align 8
  %434 = icmp eq i64 %389, 0
  br i1 %434, label %437, label %435

435:                                              ; preds = %433
  %436 = inttoptr i64 %389 to i8*
  call void @_ZdlPv(i8* %436) #13
  br label %437

437:                                              ; preds = %435, %433, %397
  %438 = load float*, float** %187, align 8
  %439 = getelementptr inbounds float, float* %438, i64 %387
  store float 0.000000e+00, float* %439, align 4
  %440 = load i64, i64* %155, align 8
  %441 = load i64, i64* %351, align 8
  %442 = sub i64 %440, %441
  %443 = lshr exact i64 %442, 3
  %444 = trunc i64 %443 to i8
  %445 = add i8 %444, -1
  %446 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %4, align 8
  %447 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %446, i64 0, i32 8, i32 0, i32 0
  %448 = load i8*, i8** %447, align 8
  %449 = getelementptr inbounds i8, i8* %448, i64 %387
  store i8 %445, i8* %449, align 1
  %450 = load i64, i64* %60, align 8
  %451 = load i64, i64* %62, align 8
  %452 = icmp eq i64 %450, %451
  br i1 %452, label %453, label %455

453:                                              ; preds = %437
  %454 = load float*, float** %187, align 8
  br label %380

455:                                              ; preds = %437, %490
  %456 = phi i64 [ %497, %490 ], [ 0, %437 ]
  %457 = phi i64 [ %496, %490 ], [ %387, %437 ]
  %458 = load i64*, i64** %148, align 8
  %459 = getelementptr inbounds i64, i64* %458, i64 -1
  %460 = load i64, i64* %459, align 8
  %461 = trunc i64 %460 to i32
  %462 = trunc i64 %456 to i32
  %463 = call fastcc float @"_ZZN3jxl12_GLOBAL__N_113ClusterGroupsEPNS_18PassesEncoderStateEENK3$_6clEii"(%class.anon.453* nonnull %13, i32 %461, i32 %462) #8
  %464 = load float*, float** %187, align 8
  %465 = getelementptr inbounds float, float* %464, i64 %456
  %466 = load float, float* %465, align 4
  %467 = fcmp olt float %463, %466
  br i1 %467, label %468, label %490

468:                                              ; preds = %455
  store float %463, float* %465, align 4
  %469 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %4, align 8
  %470 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %469, i64 0, i32 8, i32 0, i32 0
  %471 = load i8*, i8** %470, align 8
  %472 = getelementptr inbounds i8, i8* %471, i64 %456
  %473 = load i8, i8* %472, align 1
  %474 = zext i8 %473 to i64
  %475 = load i64*, i64** %158, align 8
  %476 = getelementptr inbounds i64, i64* %475, i64 %456
  store i64 %474, i64* %476, align 8
  %477 = load i64, i64* %155, align 8
  %478 = load i64, i64* %351, align 8
  %479 = sub i64 %477, %478
  %480 = lshr exact i64 %479, 3
  %481 = trunc i64 %480 to i8
  %482 = add i8 %481, -1
  %483 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %4, align 8
  %484 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %483, i64 0, i32 8, i32 0, i32 0
  %485 = load i8*, i8** %484, align 8
  %486 = getelementptr inbounds i8, i8* %485, i64 %456
  store i8 %482, i8* %486, align 1
  %487 = load float*, float** %187, align 8
  %488 = getelementptr inbounds float, float* %487, i64 %456
  %489 = load float, float* %488, align 4
  br label %490

490:                                              ; preds = %468, %455
  %491 = phi float [ %489, %468 ], [ %466, %455 ]
  %492 = phi float* [ %487, %468 ], [ %464, %455 ]
  %493 = getelementptr inbounds float, float* %492, i64 %457
  %494 = load float, float* %493, align 4
  %495 = fcmp ogt float %491, %494
  %496 = select i1 %495, i64 %456, i64 %457
  %497 = add nuw i64 %456, 1
  %498 = load i64, i64* %60, align 8
  %499 = load i64, i64* %62, align 8
  %500 = sub i64 %498, %499
  %501 = sdiv exact i64 %500, 24
  %502 = icmp ult i64 %497, %501
  br i1 %502, label %455, label %380

503:                                              ; preds = %386, %380, %345
  %504 = bitcast %"class.std::__1::vector.147"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %504) #8
  %505 = getelementptr inbounds %"class.std::__1::vector.147", %"class.std::__1::vector.147"* %17, i64 0, i32 0, i32 0
  %506 = getelementptr inbounds %"class.std::__1::vector.147", %"class.std::__1::vector.147"* %17, i64 0, i32 0, i32 1
  %507 = getelementptr inbounds %"class.std::__1::vector.147", %"class.std::__1::vector.147"* %17, i64 0, i32 0, i32 2, i32 0, i32 0
  %508 = load i64, i64* %155, align 8
  %509 = load i64, i64* %351, align 8
  %510 = sub i64 %508, %509
  %511 = ashr exact i64 %510, 3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %504, i8 0, i64 24, i1 false) #8
  %512 = icmp eq i64 %510, 0
  br i1 %512, label %609, label %513

513:                                              ; preds = %503
  %514 = icmp ugt i64 %511, 2305843009213693951
  br i1 %514, label %515, label %517

515:                                              ; preds = %513
  %516 = bitcast %"class.std::__1::vector.147"* %17 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %516) #14
  unreachable

517:                                              ; preds = %513
  %518 = call i8* @_Znwm(i64 %510) #13
  %519 = bitcast i8* %518 to i64*
  %520 = bitcast %"class.std::__1::vector.147"* %17 to i8**
  store i8* %518, i8** %520, align 8
  %521 = getelementptr inbounds i64, i64* %519, i64 %511
  store i64* %521, i64** %507, align 8
  %522 = bitcast i64** %506 to i64*
  %523 = ptrtoint i8* %518 to i64
  %524 = add nsw i64 %511, -1
  %525 = getelementptr i64, i64* %519, i64 %524
  %526 = ptrtoint i64* %525 to i64
  %527 = sub i64 8, %523
  %528 = add i64 %527, %526
  %529 = and i64 %528, -8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %518, i8 0, i64 %529, i1 false) #8
  %530 = ptrtoint i64* %521 to i64
  store i64 %530, i64* %522, align 8
  %531 = icmp eq i64* %521, %519
  br i1 %531, label %609, label %532

532:                                              ; preds = %517
  %533 = add i64 %510, -8
  %534 = lshr i64 %533, 3
  %535 = add nuw nsw i64 %534, 1
  %536 = icmp ult i64 %535, 4
  br i1 %536, label %600, label %537

537:                                              ; preds = %532
  %538 = and i64 %535, 4611686018427387900
  %539 = getelementptr i64, i64* %519, i64 %538
  %540 = add nsw i64 %538, -4
  %541 = lshr exact i64 %540, 2
  %542 = add nuw nsw i64 %541, 1
  %543 = and i64 %542, 3
  %544 = icmp ult i64 %540, 12
  br i1 %544, label %581, label %545

545:                                              ; preds = %537
  %546 = sub nsw i64 %542, %543
  br label %547

547:                                              ; preds = %547, %545
  %548 = phi i64 [ 0, %545 ], [ %577, %547 ]
  %549 = phi <2 x i64> [ <i64 0, i64 1>, %545 ], [ %578, %547 ]
  %550 = phi i64 [ %546, %545 ], [ %579, %547 ]
  %551 = add <2 x i64> %549, <i64 2, i64 2>
  %552 = getelementptr i64, i64* %519, i64 %548
  %553 = bitcast i64* %552 to <2 x i64>*
  store <2 x i64> %549, <2 x i64>* %553, align 8
  %554 = getelementptr i64, i64* %552, i64 2
  %555 = bitcast i64* %554 to <2 x i64>*
  store <2 x i64> %551, <2 x i64>* %555, align 8
  %556 = or i64 %548, 4
  %557 = add <2 x i64> %549, <i64 4, i64 4>
  %558 = add <2 x i64> %549, <i64 6, i64 6>
  %559 = getelementptr i64, i64* %519, i64 %556
  %560 = bitcast i64* %559 to <2 x i64>*
  store <2 x i64> %557, <2 x i64>* %560, align 8
  %561 = getelementptr i64, i64* %559, i64 2
  %562 = bitcast i64* %561 to <2 x i64>*
  store <2 x i64> %558, <2 x i64>* %562, align 8
  %563 = or i64 %548, 8
  %564 = add <2 x i64> %549, <i64 8, i64 8>
  %565 = add <2 x i64> %549, <i64 10, i64 10>
  %566 = getelementptr i64, i64* %519, i64 %563
  %567 = bitcast i64* %566 to <2 x i64>*
  store <2 x i64> %564, <2 x i64>* %567, align 8
  %568 = getelementptr i64, i64* %566, i64 2
  %569 = bitcast i64* %568 to <2 x i64>*
  store <2 x i64> %565, <2 x i64>* %569, align 8
  %570 = or i64 %548, 12
  %571 = add <2 x i64> %549, <i64 12, i64 12>
  %572 = add <2 x i64> %549, <i64 14, i64 14>
  %573 = getelementptr i64, i64* %519, i64 %570
  %574 = bitcast i64* %573 to <2 x i64>*
  store <2 x i64> %571, <2 x i64>* %574, align 8
  %575 = getelementptr i64, i64* %573, i64 2
  %576 = bitcast i64* %575 to <2 x i64>*
  store <2 x i64> %572, <2 x i64>* %576, align 8
  %577 = add i64 %548, 16
  %578 = add <2 x i64> %549, <i64 16, i64 16>
  %579 = add i64 %550, -4
  %580 = icmp eq i64 %579, 0
  br i1 %580, label %581, label %547, !llvm.loop !42

581:                                              ; preds = %547, %537
  %582 = phi i64 [ 0, %537 ], [ %577, %547 ]
  %583 = phi <2 x i64> [ <i64 0, i64 1>, %537 ], [ %578, %547 ]
  %584 = icmp eq i64 %543, 0
  br i1 %584, label %598, label %585

585:                                              ; preds = %581, %585
  %586 = phi i64 [ %594, %585 ], [ %582, %581 ]
  %587 = phi <2 x i64> [ %595, %585 ], [ %583, %581 ]
  %588 = phi i64 [ %596, %585 ], [ %543, %581 ]
  %589 = add <2 x i64> %587, <i64 2, i64 2>
  %590 = getelementptr i64, i64* %519, i64 %586
  %591 = bitcast i64* %590 to <2 x i64>*
  store <2 x i64> %587, <2 x i64>* %591, align 8
  %592 = getelementptr i64, i64* %590, i64 2
  %593 = bitcast i64* %592 to <2 x i64>*
  store <2 x i64> %589, <2 x i64>* %593, align 8
  %594 = add i64 %586, 4
  %595 = add <2 x i64> %587, <i64 4, i64 4>
  %596 = add i64 %588, -1
  %597 = icmp eq i64 %596, 0
  br i1 %597, label %598, label %585, !llvm.loop !43

598:                                              ; preds = %585, %581
  %599 = icmp eq i64 %535, %538
  br i1 %599, label %609, label %600

600:                                              ; preds = %598, %532
  %601 = phi i64 [ 0, %532 ], [ %538, %598 ]
  %602 = phi i64* [ %519, %532 ], [ %539, %598 ]
  br label %603

603:                                              ; preds = %600, %603
  %604 = phi i64 [ %607, %603 ], [ %601, %600 ]
  %605 = phi i64* [ %606, %603 ], [ %602, %600 ]
  store i64 %604, i64* %605, align 8
  %606 = getelementptr inbounds i64, i64* %605, i64 1
  %607 = add nuw nsw i64 %604, 1
  %608 = icmp eq i64* %606, %521
  br i1 %608, label %609, label %603, !llvm.loop !44

609:                                              ; preds = %603, %598, %517, %503
  %610 = phi i64* [ %519, %517 ], [ null, %503 ], [ %519, %598 ], [ %519, %603 ]
  %611 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %4, align 8
  %612 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %611, i64 0, i32 8
  %613 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %611, i64 0, i32 8, i32 0, i32 1
  %614 = bitcast i8** %613 to i64*
  %615 = load i64, i64* %614, align 8
  %616 = bitcast %"class.std::__1::vector.21"* %612 to i64*
  %617 = load i64, i64* %616, align 8
  %618 = icmp eq i64 %615, %617
  %619 = inttoptr i64 %617 to i8*
  br i1 %618, label %638, label %620

620:                                              ; preds = %609
  %621 = load i8, i8* %619, align 1
  %622 = zext i8 %621 to i64
  %623 = getelementptr inbounds i64, i64* %610, i64 %622
  %624 = load i64, i64* %623, align 8
  %625 = trunc i64 %624 to i8
  store i8 %625, i8* %619, align 1
  %626 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %4, align 8
  %627 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %626, i64 0, i32 8
  %628 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %626, i64 0, i32 8, i32 0, i32 1
  %629 = bitcast i8** %628 to i64*
  %630 = load i64, i64* %629, align 8
  %631 = bitcast %"class.std::__1::vector.21"* %627 to i64*
  %632 = load i64, i64* %631, align 8
  %633 = sub i64 %630, %632
  %634 = icmp ugt i64 %633, 1
  br i1 %634, label %669, label %635

635:                                              ; preds = %669, %620
  %636 = load i64, i64* %155, align 8
  %637 = load i64, i64* %351, align 8
  br label %638

638:                                              ; preds = %635, %609
  %639 = phi i64 [ %637, %635 ], [ %509, %609 ]
  %640 = phi i64 [ %636, %635 ], [ %508, %609 ]
  %641 = bitcast %class.anon.456* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %641) #8
  %642 = getelementptr inbounds %class.anon.456, %class.anon.456* %18, i64 0, i32 0
  %643 = getelementptr inbounds %class.anon.456, %class.anon.456* %18, i64 0, i32 1
  %644 = getelementptr inbounds %class.anon.456, %class.anon.456* %18, i64 0, i32 2
  %645 = getelementptr inbounds %class.anon.456, %class.anon.456* %18, i64 0, i32 3
  store %"class.std::__1::vector.201"* %58, %"class.std::__1::vector.201"** %642, align 8
  store %"struct.jxl::PassesEncoderState"** %4, %"struct.jxl::PassesEncoderState"*** %643, align 8
  store i64* %7, i64** %644, align 8
  store %class.anon.451* %10, %class.anon.451** %645, align 8
  %646 = icmp eq i64 %640, %639
  %647 = bitcast i64** %506 to i64*
  %648 = bitcast %"class.std::__1::vector.147"* %17 to i64*
  br i1 %646, label %691, label %649

649:                                              ; preds = %638
  %650 = getelementptr inbounds %"class.std::__1::vector.147", %"class.std::__1::vector.147"* %19, i64 0, i32 0, i32 1
  %651 = bitcast i64** %650 to i8**
  %652 = bitcast %"class.std::__1::vector.147"* %19 to i8**
  %653 = getelementptr inbounds %"class.std::__1::vector.147", %"class.std::__1::vector.147"* %19, i64 0, i32 0, i32 2, i32 0, i32 0
  %654 = bitcast i64** %650 to i64*
  %655 = getelementptr inbounds %"class.std::__1::vector.147", %"class.std::__1::vector.147"* %19, i64 0, i32 0, i32 0
  %656 = bitcast %"class.std::__1::vector.147"* %20 to i8*
  %657 = getelementptr inbounds %"class.std::__1::vector.147", %"class.std::__1::vector.147"* %20, i64 0, i32 0, i32 0
  %658 = getelementptr inbounds %"class.std::__1::vector.147", %"class.std::__1::vector.147"* %20, i64 0, i32 0, i32 1
  %659 = getelementptr inbounds %"class.std::__1::vector.147", %"class.std::__1::vector.147"* %20, i64 0, i32 0, i32 2, i32 0, i32 0
  %660 = bitcast i64** %658 to i8**
  %661 = bitcast %"class.std::__1::vector.147"* %20 to i8**
  %662 = bitcast i64** %658 to i64*
  %663 = getelementptr inbounds %"class.std::__1::vector.147", %"class.std::__1::vector.147"* %21, i64 0, i32 0, i32 1
  %664 = bitcast i64** %663 to i8**
  %665 = bitcast %"class.std::__1::vector.147"* %21 to i8**
  %666 = getelementptr inbounds %"class.std::__1::vector.147", %"class.std::__1::vector.147"* %21, i64 0, i32 0, i32 2, i32 0, i32 0
  %667 = bitcast i64** %663 to i64*
  %668 = getelementptr inbounds %"class.std::__1::vector.147", %"class.std::__1::vector.147"* %21, i64 0, i32 0, i32 0
  br label %799

669:                                              ; preds = %620, %669
  %670 = phi %"struct.jxl::PassesEncoderState"* [ %682, %669 ], [ %626, %620 ]
  %671 = phi i64 [ %681, %669 ], [ 1, %620 ]
  %672 = load i64*, i64** %505, align 8
  %673 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %670, i64 0, i32 8, i32 0, i32 0
  %674 = load i8*, i8** %673, align 8
  %675 = getelementptr inbounds i8, i8* %674, i64 %671
  %676 = load i8, i8* %675, align 1
  %677 = zext i8 %676 to i64
  %678 = getelementptr inbounds i64, i64* %672, i64 %677
  %679 = load i64, i64* %678, align 8
  %680 = trunc i64 %679 to i8
  store i8 %680, i8* %675, align 1
  %681 = add nuw i64 %671, 1
  %682 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %4, align 8
  %683 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %682, i64 0, i32 8
  %684 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %682, i64 0, i32 8, i32 0, i32 1
  %685 = bitcast i8** %684 to i64*
  %686 = load i64, i64* %685, align 8
  %687 = bitcast %"class.std::__1::vector.21"* %683 to i64*
  %688 = load i64, i64* %687, align 8
  %689 = sub i64 %686, %688
  %690 = icmp ult i64 %681, %689
  br i1 %690, label %669, label %635

691:                                              ; preds = %1004, %638
  %692 = bitcast %"class.std::__1::vector.147"* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %692) #8
  %693 = getelementptr inbounds %"class.std::__1::vector.147", %"class.std::__1::vector.147"* %22, i64 0, i32 0, i32 0
  %694 = getelementptr inbounds %"class.std::__1::vector.147", %"class.std::__1::vector.147"* %22, i64 0, i32 0, i32 1
  %695 = getelementptr inbounds %"class.std::__1::vector.147", %"class.std::__1::vector.147"* %22, i64 0, i32 0, i32 2, i32 0, i32 0
  %696 = load i64, i64* %647, align 8
  %697 = load i64, i64* %648, align 8
  %698 = sub i64 %696, %697
  %699 = ashr exact i64 %698, 3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %692, i8 0, i64 24, i1 false) #8
  %700 = icmp eq i64 %698, 0
  %701 = inttoptr i64 %697 to i64*
  br i1 %700, label %1012, label %702

702:                                              ; preds = %691
  %703 = icmp ugt i64 %699, 2305843009213693951
  br i1 %703, label %704, label %706

704:                                              ; preds = %702
  %705 = bitcast %"class.std::__1::vector.147"* %22 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %705) #14
  unreachable

706:                                              ; preds = %702
  %707 = call i8* @_Znwm(i64 %698) #13
  %708 = bitcast i8* %707 to i64*
  %709 = bitcast i64** %694 to i8**
  store i8* %707, i8** %709, align 8
  %710 = bitcast %"class.std::__1::vector.147"* %22 to i8**
  store i8* %707, i8** %710, align 8
  %711 = getelementptr inbounds i64, i64* %708, i64 %699
  store i64* %711, i64** %695, align 8
  %712 = add i64 %698, -8
  %713 = lshr i64 %712, 3
  %714 = add nuw nsw i64 %713, 1
  %715 = icmp ult i64 %714, 4
  br i1 %715, label %790, label %716

716:                                              ; preds = %706
  %717 = and i64 %714, 4611686018427387900
  %718 = getelementptr i64, i64* %708, i64 %717
  %719 = insertelement <2 x i64> undef, i64 %699, i32 0
  %720 = shufflevector <2 x i64> %719, <2 x i64> undef, <2 x i32> zeroinitializer
  %721 = insertelement <2 x i64> undef, i64 %699, i32 0
  %722 = shufflevector <2 x i64> %721, <2 x i64> undef, <2 x i32> zeroinitializer
  %723 = add nsw i64 %717, -4
  %724 = lshr exact i64 %723, 2
  %725 = add nuw nsw i64 %724, 1
  %726 = and i64 %725, 7
  %727 = icmp ult i64 %723, 28
  br i1 %727, label %775, label %728

728:                                              ; preds = %716
  %729 = sub nsw i64 %725, %726
  br label %730

730:                                              ; preds = %730, %728
  %731 = phi i64 [ 0, %728 ], [ %772, %730 ]
  %732 = phi i64 [ %729, %728 ], [ %773, %730 ]
  %733 = getelementptr i64, i64* %708, i64 %731
  %734 = bitcast i64* %733 to <2 x i64>*
  store <2 x i64> %720, <2 x i64>* %734, align 8
  %735 = getelementptr i64, i64* %733, i64 2
  %736 = bitcast i64* %735 to <2 x i64>*
  store <2 x i64> %722, <2 x i64>* %736, align 8
  %737 = or i64 %731, 4
  %738 = getelementptr i64, i64* %708, i64 %737
  %739 = bitcast i64* %738 to <2 x i64>*
  store <2 x i64> %720, <2 x i64>* %739, align 8
  %740 = getelementptr i64, i64* %738, i64 2
  %741 = bitcast i64* %740 to <2 x i64>*
  store <2 x i64> %722, <2 x i64>* %741, align 8
  %742 = or i64 %731, 8
  %743 = getelementptr i64, i64* %708, i64 %742
  %744 = bitcast i64* %743 to <2 x i64>*
  store <2 x i64> %720, <2 x i64>* %744, align 8
  %745 = getelementptr i64, i64* %743, i64 2
  %746 = bitcast i64* %745 to <2 x i64>*
  store <2 x i64> %722, <2 x i64>* %746, align 8
  %747 = or i64 %731, 12
  %748 = getelementptr i64, i64* %708, i64 %747
  %749 = bitcast i64* %748 to <2 x i64>*
  store <2 x i64> %720, <2 x i64>* %749, align 8
  %750 = getelementptr i64, i64* %748, i64 2
  %751 = bitcast i64* %750 to <2 x i64>*
  store <2 x i64> %722, <2 x i64>* %751, align 8
  %752 = or i64 %731, 16
  %753 = getelementptr i64, i64* %708, i64 %752
  %754 = bitcast i64* %753 to <2 x i64>*
  store <2 x i64> %720, <2 x i64>* %754, align 8
  %755 = getelementptr i64, i64* %753, i64 2
  %756 = bitcast i64* %755 to <2 x i64>*
  store <2 x i64> %722, <2 x i64>* %756, align 8
  %757 = or i64 %731, 20
  %758 = getelementptr i64, i64* %708, i64 %757
  %759 = bitcast i64* %758 to <2 x i64>*
  store <2 x i64> %720, <2 x i64>* %759, align 8
  %760 = getelementptr i64, i64* %758, i64 2
  %761 = bitcast i64* %760 to <2 x i64>*
  store <2 x i64> %722, <2 x i64>* %761, align 8
  %762 = or i64 %731, 24
  %763 = getelementptr i64, i64* %708, i64 %762
  %764 = bitcast i64* %763 to <2 x i64>*
  store <2 x i64> %720, <2 x i64>* %764, align 8
  %765 = getelementptr i64, i64* %763, i64 2
  %766 = bitcast i64* %765 to <2 x i64>*
  store <2 x i64> %722, <2 x i64>* %766, align 8
  %767 = or i64 %731, 28
  %768 = getelementptr i64, i64* %708, i64 %767
  %769 = bitcast i64* %768 to <2 x i64>*
  store <2 x i64> %720, <2 x i64>* %769, align 8
  %770 = getelementptr i64, i64* %768, i64 2
  %771 = bitcast i64* %770 to <2 x i64>*
  store <2 x i64> %722, <2 x i64>* %771, align 8
  %772 = add i64 %731, 32
  %773 = add i64 %732, -8
  %774 = icmp eq i64 %773, 0
  br i1 %774, label %775, label %730, !llvm.loop !45

775:                                              ; preds = %730, %716
  %776 = phi i64 [ 0, %716 ], [ %772, %730 ]
  %777 = icmp eq i64 %726, 0
  br i1 %777, label %788, label %778

778:                                              ; preds = %775, %778
  %779 = phi i64 [ %785, %778 ], [ %776, %775 ]
  %780 = phi i64 [ %786, %778 ], [ %726, %775 ]
  %781 = getelementptr i64, i64* %708, i64 %779
  %782 = bitcast i64* %781 to <2 x i64>*
  store <2 x i64> %720, <2 x i64>* %782, align 8
  %783 = getelementptr i64, i64* %781, i64 2
  %784 = bitcast i64* %783 to <2 x i64>*
  store <2 x i64> %722, <2 x i64>* %784, align 8
  %785 = add i64 %779, 4
  %786 = add i64 %780, -1
  %787 = icmp eq i64 %786, 0
  br i1 %787, label %788, label %778, !llvm.loop !46

788:                                              ; preds = %778, %775
  %789 = icmp eq i64 %714, %717
  br i1 %789, label %796, label %790

790:                                              ; preds = %788, %706
  %791 = phi i64* [ %708, %706 ], [ %718, %788 ]
  br label %792

792:                                              ; preds = %790, %792
  %793 = phi i64* [ %794, %792 ], [ %791, %790 ]
  store i64 %699, i64* %793, align 8
  %794 = getelementptr inbounds i64, i64* %793, i64 1
  %795 = icmp eq i64* %794, %711
  br i1 %795, label %796, label %792, !llvm.loop !47

796:                                              ; preds = %792, %788
  %797 = bitcast i64** %694 to i64*
  %798 = ptrtoint i64* %711 to i64
  store i64 %798, i64* %797, align 8
  br label %1110

799:                                              ; preds = %1004, %649
  %800 = phi i64 [ 0, %649 ], [ %832, %1004 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %41, i8 0, i64 24, i1 false) #8
  %801 = load i64, i64* %647, align 8
  %802 = load i64, i64* %648, align 8
  %803 = sub i64 %801, %802
  %804 = ashr exact i64 %803, 3
  %805 = icmp eq i64 %803, 0
  br i1 %805, label %823, label %806

806:                                              ; preds = %799
  %807 = icmp ugt i64 %804, 2305843009213693951
  br i1 %807, label %808, label %810

808:                                              ; preds = %806
  %809 = bitcast %"class.std::__1::vector.147"* %19 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %809) #14
  unreachable

810:                                              ; preds = %806
  %811 = call i8* @_Znwm(i64 %803) #13
  %812 = bitcast i8* %811 to i64*
  store i8* %811, i8** %651, align 8
  store i8* %811, i8** %652, align 8
  %813 = getelementptr inbounds i64, i64* %812, i64 %804
  store i64* %813, i64** %653, align 8
  %814 = ptrtoint i8* %811 to i64
  %815 = icmp sgt i64 %803, 0
  br i1 %815, label %816, label %821

816:                                              ; preds = %810
  %817 = lshr exact i64 %803, 3
  %818 = inttoptr i64 %802 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %811, i8* align 8 %818, i64 %803, i1 false) #8
  %819 = getelementptr inbounds i64, i64* %812, i64 %817
  %820 = ptrtoint i64* %819 to i64
  br label %821

821:                                              ; preds = %816, %810
  %822 = phi i64 [ %820, %816 ], [ %814, %810 ]
  store i64 %822, i64* %654, align 8
  br label %823

823:                                              ; preds = %821, %799
  %824 = call fastcc i64 @"_ZZN3jxl12_GLOBAL__N_113ClusterGroupsEPNS_18PassesEncoderStateEENK3$_7clENSt3__16vectorImNS4_9allocatorImEEEE"(%class.anon.456* nonnull %18, %"class.std::__1::vector.147"* nonnull %19) #8
  %825 = uitofp i64 %824 to float
  %826 = load i64*, i64** %655, align 8
  %827 = icmp eq i64* %826, null
  br i1 %827, label %831, label %828

828:                                              ; preds = %823
  %829 = ptrtoint i64* %826 to i64
  store i64 %829, i64* %654, align 8
  %830 = bitcast i64* %826 to i8*
  call void @_ZdlPv(i8* %830) #13
  br label %831

831:                                              ; preds = %828, %823
  %832 = add nuw i64 %800, 1
  %833 = load i64, i64* %155, align 8
  %834 = load i64, i64* %351, align 8
  %835 = sub i64 %833, %834
  %836 = ashr exact i64 %835, 3
  %837 = icmp ult i64 %832, %836
  br i1 %837, label %843, label %838

838:                                              ; preds = %956, %831
  %839 = phi i64 [ %834, %831 ], [ %957, %956 ]
  %840 = phi i64 [ %833, %831 ], [ %958, %956 ]
  %841 = phi i64 [ %800, %831 ], [ %960, %956 ]
  %842 = icmp eq i64 %800, %841
  br i1 %842, label %1004, label %965

843:                                              ; preds = %831, %956
  %844 = phi i64 [ %957, %956 ], [ %834, %831 ]
  %845 = phi i64 [ %958, %956 ], [ %833, %831 ]
  %846 = phi i64 [ %961, %956 ], [ %832, %831 ]
  %847 = phi i64 [ %960, %956 ], [ %800, %831 ]
  %848 = phi float [ %959, %956 ], [ %825, %831 ]
  %849 = load i64*, i64** %505, align 8
  %850 = getelementptr inbounds i64, i64* %849, i64 %800
  %851 = load i64, i64* %850, align 8
  %852 = getelementptr inbounds i64, i64* %849, i64 %846
  %853 = load i64, i64* %852, align 8
  %854 = icmp eq i64 %851, %853
  br i1 %854, label %956, label %855

855:                                              ; preds = %843
  %856 = ptrtoint i64* %849 to i64
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %656) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %656, i8 0, i64 24, i1 false) #8
  %857 = load i64, i64* %647, align 8
  %858 = sub i64 %857, %856
  %859 = ashr exact i64 %858, 3
  %860 = icmp eq i64 %858, 0
  br i1 %860, label %910, label %861

861:                                              ; preds = %855
  %862 = icmp ugt i64 %859, 2305843009213693951
  br i1 %862, label %863, label %865

863:                                              ; preds = %861
  %864 = bitcast %"class.std::__1::vector.147"* %20 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %864) #14
  unreachable

865:                                              ; preds = %861
  %866 = call i8* @_Znwm(i64 %858) #13
  %867 = ptrtoint i8* %866 to i64
  %868 = bitcast i8* %866 to i64*
  store i8* %866, i8** %660, align 8
  store i8* %866, i8** %661, align 8
  %869 = getelementptr inbounds i64, i64* %868, i64 %859
  store i64* %869, i64** %659, align 8
  %870 = icmp sgt i64 %858, 0
  br i1 %870, label %871, label %876

871:                                              ; preds = %865
  %872 = lshr exact i64 %858, 3
  %873 = bitcast i64* %849 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %866, i8* align 8 %873, i64 %858, i1 false) #8
  %874 = getelementptr inbounds i64, i64* %868, i64 %872
  %875 = ptrtoint i64* %874 to i64
  br label %876

876:                                              ; preds = %871, %865
  %877 = phi i64 [ %875, %871 ], [ %867, %865 ]
  store i64 %877, i64* %662, align 8
  %878 = inttoptr i64 %877 to i64*
  %879 = icmp eq i64* %868, %878
  br i1 %879, label %910, label %880

880:                                              ; preds = %876
  %881 = getelementptr i64, i64* %878, i64 -1
  %882 = ptrtoint i64* %881 to i64
  %883 = sub i64 %882, %867
  %884 = and i64 %883, 8
  %885 = icmp eq i64 %884, 0
  br i1 %885, label %886, label %895

886:                                              ; preds = %880
  %887 = load i64, i64* %868, align 8
  %888 = load i64, i64* %850, align 8
  %889 = icmp eq i64 %887, %888
  br i1 %889, label %890, label %892

890:                                              ; preds = %886
  %891 = load i64, i64* %852, align 8
  store i64 %891, i64* %868, align 8
  br label %892

892:                                              ; preds = %890, %886
  %893 = getelementptr inbounds i8, i8* %866, i64 8
  %894 = bitcast i8* %893 to i64*
  br label %895

895:                                              ; preds = %892, %880
  %896 = phi i64* [ %894, %892 ], [ %868, %880 ]
  %897 = icmp ult i64 %883, 8
  br i1 %897, label %910, label %898

898:                                              ; preds = %895, %1460
  %899 = phi i64* [ %1461, %1460 ], [ %896, %895 ]
  %900 = load i64, i64* %899, align 8
  %901 = load i64, i64* %850, align 8
  %902 = icmp eq i64 %900, %901
  br i1 %902, label %903, label %905

903:                                              ; preds = %898
  %904 = load i64, i64* %852, align 8
  store i64 %904, i64* %899, align 8
  br label %905

905:                                              ; preds = %903, %898
  %906 = getelementptr inbounds i64, i64* %899, i64 1
  %907 = load i64, i64* %906, align 8
  %908 = load i64, i64* %850, align 8
  %909 = icmp eq i64 %907, %908
  br i1 %909, label %1458, label %1460

910:                                              ; preds = %895, %1460, %876, %855
  %911 = phi i64 [ %877, %876 ], [ 0, %855 ], [ %877, %1460 ], [ %877, %895 ]
  %912 = phi i64 [ %867, %876 ], [ 0, %855 ], [ %867, %1460 ], [ %867, %895 ]
  %913 = phi i64* [ %868, %876 ], [ null, %855 ], [ %868, %1460 ], [ %868, %895 ]
  %914 = phi i8* [ %866, %876 ], [ null, %855 ], [ %866, %1460 ], [ %866, %895 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %42, i8 0, i64 24, i1 false) #8
  %915 = sub i64 %911, %912
  %916 = ashr exact i64 %915, 3
  %917 = icmp eq i64 %915, 0
  br i1 %917, label %936, label %918

918:                                              ; preds = %910
  %919 = icmp ugt i64 %916, 2305843009213693951
  br i1 %919, label %920, label %922

920:                                              ; preds = %918
  %921 = bitcast %"class.std::__1::vector.147"* %21 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %921) #14
  unreachable

922:                                              ; preds = %918
  %923 = call i8* @_Znwm(i64 %915) #13
  %924 = bitcast i8* %923 to i64*
  store i8* %923, i8** %664, align 8
  store i8* %923, i8** %665, align 8
  %925 = getelementptr inbounds i64, i64* %924, i64 %916
  store i64* %925, i64** %666, align 8
  %926 = ptrtoint i8* %923 to i64
  %927 = ptrtoint i64* %913 to i64
  %928 = sub i64 %911, %927
  %929 = icmp sgt i64 %928, 0
  br i1 %929, label %930, label %934

930:                                              ; preds = %922
  %931 = lshr exact i64 %928, 3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %923, i8* align 8 %914, i64 %928, i1 false) #8
  %932 = getelementptr inbounds i64, i64* %924, i64 %931
  %933 = ptrtoint i64* %932 to i64
  br label %934

934:                                              ; preds = %930, %922
  %935 = phi i64 [ %933, %930 ], [ %926, %922 ]
  store i64 %935, i64* %667, align 8
  br label %936

936:                                              ; preds = %934, %910
  %937 = call fastcc i64 @"_ZZN3jxl12_GLOBAL__N_113ClusterGroupsEPNS_18PassesEncoderStateEENK3$_7clENSt3__16vectorImNS4_9allocatorImEEEE"(%class.anon.456* nonnull %18, %"class.std::__1::vector.147"* nonnull %21) #8
  %938 = uitofp i64 %937 to float
  %939 = load i64*, i64** %668, align 8
  %940 = icmp eq i64* %939, null
  br i1 %940, label %944, label %941

941:                                              ; preds = %936
  %942 = ptrtoint i64* %939 to i64
  store i64 %942, i64* %667, align 8
  %943 = bitcast i64* %939 to i8*
  call void @_ZdlPv(i8* %943) #13
  br label %944

944:                                              ; preds = %941, %936
  %945 = fcmp ogt float %848, %938
  %946 = select i1 %945, float %938, float %848
  %947 = select i1 %945, i64 %846, i64 %847
  %948 = load i64*, i64** %657, align 8
  %949 = icmp eq i64* %948, null
  br i1 %949, label %953, label %950

950:                                              ; preds = %944
  %951 = ptrtoint i64* %948 to i64
  store i64 %951, i64* %662, align 8
  %952 = bitcast i64* %948 to i8*
  call void @_ZdlPv(i8* %952) #13
  br label %953

953:                                              ; preds = %950, %944
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %656) #8
  %954 = load i64, i64* %155, align 8
  %955 = load i64, i64* %351, align 8
  br label %956

956:                                              ; preds = %953, %843
  %957 = phi i64 [ %844, %843 ], [ %955, %953 ]
  %958 = phi i64 [ %845, %843 ], [ %954, %953 ]
  %959 = phi float [ %848, %843 ], [ %946, %953 ]
  %960 = phi i64 [ %847, %843 ], [ %947, %953 ]
  %961 = add i64 %846, 1
  %962 = sub i64 %958, %957
  %963 = ashr exact i64 %962, 3
  %964 = icmp ult i64 %961, %963
  br i1 %964, label %843, label %838

965:                                              ; preds = %838
  %966 = load i64*, i64** %505, align 8
  %967 = load i64*, i64** %506, align 8
  %968 = getelementptr inbounds i64, i64* %966, i64 %800
  %969 = getelementptr inbounds i64, i64* %966, i64 %841
  %970 = icmp eq i64* %966, %967
  br i1 %970, label %1004, label %971

971:                                              ; preds = %965
  %972 = ptrtoint i64* %966 to i64
  %973 = getelementptr i64, i64* %967, i64 -1
  %974 = ptrtoint i64* %973 to i64
  %975 = sub i64 %974, %972
  %976 = and i64 %975, 8
  %977 = icmp eq i64 %976, 0
  br i1 %977, label %978, label %986

978:                                              ; preds = %971
  %979 = load i64, i64* %966, align 8
  %980 = load i64, i64* %968, align 8
  %981 = icmp eq i64 %979, %980
  br i1 %981, label %982, label %984

982:                                              ; preds = %978
  %983 = load i64, i64* %969, align 8
  store i64 %983, i64* %966, align 8
  br label %984

984:                                              ; preds = %982, %978
  %985 = getelementptr inbounds i64, i64* %966, i64 1
  br label %986

986:                                              ; preds = %984, %971
  %987 = phi i64* [ %985, %984 ], [ %966, %971 ]
  %988 = icmp ult i64 %975, 8
  br i1 %988, label %1001, label %989

989:                                              ; preds = %986, %1465
  %990 = phi i64* [ %1466, %1465 ], [ %987, %986 ]
  %991 = load i64, i64* %990, align 8
  %992 = load i64, i64* %968, align 8
  %993 = icmp eq i64 %991, %992
  br i1 %993, label %994, label %996

994:                                              ; preds = %989
  %995 = load i64, i64* %969, align 8
  store i64 %995, i64* %990, align 8
  br label %996

996:                                              ; preds = %994, %989
  %997 = getelementptr inbounds i64, i64* %990, i64 1
  %998 = load i64, i64* %997, align 8
  %999 = load i64, i64* %968, align 8
  %1000 = icmp eq i64 %998, %999
  br i1 %1000, label %1463, label %1465

1001:                                             ; preds = %1465, %986
  %1002 = load i64, i64* %155, align 8
  %1003 = load i64, i64* %351, align 8
  br label %1004

1004:                                             ; preds = %1001, %965, %838
  %1005 = phi i64 [ %1003, %1001 ], [ %839, %965 ], [ %839, %838 ]
  %1006 = phi i64 [ %1002, %1001 ], [ %840, %965 ], [ %840, %838 ]
  %1007 = sub i64 %1006, %1005
  %1008 = ashr exact i64 %1007, 3
  %1009 = icmp ult i64 %832, %1008
  br i1 %1009, label %799, label %691

1010:                                             ; preds = %1129
  %1011 = inttoptr i64 %1136 to i64*
  br label %1012

1012:                                             ; preds = %1010, %691
  %1013 = phi i64* [ %701, %691 ], [ %1011, %1010 ]
  %1014 = phi i64 [ %696, %691 ], [ %1135, %1010 ]
  %1015 = phi i64 [ %697, %691 ], [ %1136, %1010 ]
  %1016 = ptrtoint i64* %1013 to i64
  %1017 = inttoptr i64 %1014 to i64*
  %1018 = icmp eq i64* %1013, %1017
  br i1 %1018, label %1080, label %1019

1019:                                             ; preds = %1012
  %1020 = getelementptr inbounds i64, i64* %1013, i64 1
  %1021 = icmp eq i64* %1020, %1017
  br i1 %1021, label %1080, label %1022

1022:                                             ; preds = %1019
  %1023 = getelementptr i64, i64* %1017, i64 -2
  %1024 = ptrtoint i64* %1023 to i64
  %1025 = sub i64 %1024, %1016
  %1026 = lshr i64 %1025, 3
  %1027 = add nuw nsw i64 %1026, 1
  %1028 = and i64 %1027, 3
  %1029 = icmp eq i64 %1028, 0
  br i1 %1029, label %1043, label %1030

1030:                                             ; preds = %1022, %1030
  %1031 = phi i64* [ %1040, %1030 ], [ %1020, %1022 ]
  %1032 = phi i64 [ %1039, %1030 ], [ %1015, %1022 ]
  %1033 = phi i64 [ %1041, %1030 ], [ %1028, %1022 ]
  %1034 = ptrtoint i64* %1031 to i64
  %1035 = inttoptr i64 %1032 to i64*
  %1036 = load i64, i64* %1035, align 8
  %1037 = load i64, i64* %1031, align 8
  %1038 = icmp ult i64 %1036, %1037
  %1039 = select i1 %1038, i64 %1034, i64 %1032
  %1040 = getelementptr inbounds i64, i64* %1031, i64 1
  %1041 = add i64 %1033, -1
  %1042 = icmp eq i64 %1041, 0
  br i1 %1042, label %1043, label %1030, !llvm.loop !48

1043:                                             ; preds = %1030, %1022
  %1044 = phi i64 [ undef, %1022 ], [ %1039, %1030 ]
  %1045 = phi i64* [ %1020, %1022 ], [ %1040, %1030 ]
  %1046 = phi i64 [ %1015, %1022 ], [ %1039, %1030 ]
  %1047 = icmp ult i64 %1025, 24
  br i1 %1047, label %1080, label %1048

1048:                                             ; preds = %1043, %1048
  %1049 = phi i64* [ %1078, %1048 ], [ %1045, %1043 ]
  %1050 = phi i64 [ %1077, %1048 ], [ %1046, %1043 ]
  %1051 = ptrtoint i64* %1049 to i64
  %1052 = inttoptr i64 %1050 to i64*
  %1053 = load i64, i64* %1052, align 8
  %1054 = load i64, i64* %1049, align 8
  %1055 = icmp ult i64 %1053, %1054
  %1056 = select i1 %1055, i64 %1051, i64 %1050
  %1057 = getelementptr inbounds i64, i64* %1049, i64 1
  %1058 = ptrtoint i64* %1057 to i64
  %1059 = inttoptr i64 %1056 to i64*
  %1060 = load i64, i64* %1059, align 8
  %1061 = load i64, i64* %1057, align 8
  %1062 = icmp ult i64 %1060, %1061
  %1063 = select i1 %1062, i64 %1058, i64 %1056
  %1064 = getelementptr inbounds i64, i64* %1049, i64 2
  %1065 = ptrtoint i64* %1064 to i64
  %1066 = inttoptr i64 %1063 to i64*
  %1067 = load i64, i64* %1066, align 8
  %1068 = load i64, i64* %1064, align 8
  %1069 = icmp ult i64 %1067, %1068
  %1070 = select i1 %1069, i64 %1065, i64 %1063
  %1071 = getelementptr inbounds i64, i64* %1049, i64 3
  %1072 = ptrtoint i64* %1071 to i64
  %1073 = inttoptr i64 %1070 to i64*
  %1074 = load i64, i64* %1073, align 8
  %1075 = load i64, i64* %1071, align 8
  %1076 = icmp ult i64 %1074, %1075
  %1077 = select i1 %1076, i64 %1072, i64 %1070
  %1078 = getelementptr inbounds i64, i64* %1049, i64 4
  %1079 = icmp eq i64* %1078, %1017
  br i1 %1079, label %1080, label %1048

1080:                                             ; preds = %1043, %1048, %1019, %1012
  %1081 = phi i64 [ %1015, %1012 ], [ %1015, %1019 ], [ %1044, %1043 ], [ %1077, %1048 ]
  %1082 = inttoptr i64 %1081 to i64*
  %1083 = load i64, i64* %1082, align 8
  %1084 = add i64 %1083, 1
  %1085 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %4, align 8
  %1086 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1085, i64 0, i32 0, i32 18
  store i64 %1084, i64* %1086, align 8
  %1087 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1085, i64 0, i32 8
  %1088 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1085, i64 0, i32 8, i32 0, i32 1
  %1089 = bitcast i8** %1088 to i64*
  %1090 = load i64, i64* %1089, align 8
  %1091 = bitcast %"class.std::__1::vector.21"* %1087 to i64*
  %1092 = load i64, i64* %1091, align 8
  %1093 = icmp eq i64 %1090, %1092
  %1094 = inttoptr i64 %1092 to i8*
  br i1 %1093, label %1143, label %1095

1095:                                             ; preds = %1080
  %1096 = load i8, i8* %1094, align 1
  %1097 = zext i8 %1096 to i64
  %1098 = getelementptr inbounds i64, i64* %1013, i64 %1097
  %1099 = load i64, i64* %1098, align 8
  %1100 = trunc i64 %1099 to i8
  store i8 %1100, i8* %1094, align 1
  %1101 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %4, align 8
  %1102 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1101, i64 0, i32 8
  %1103 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1101, i64 0, i32 8, i32 0, i32 1
  %1104 = bitcast i8** %1103 to i64*
  %1105 = load i64, i64* %1104, align 8
  %1106 = bitcast %"class.std::__1::vector.21"* %1102 to i64*
  %1107 = load i64, i64* %1106, align 8
  %1108 = sub i64 %1105, %1107
  %1109 = icmp ugt i64 %1108, 1
  br i1 %1109, label %1149, label %1143

1110:                                             ; preds = %796, %1141
  %1111 = phi i64* [ %1142, %1141 ], [ %708, %796 ]
  %1112 = phi i64* [ %1140, %1141 ], [ %701, %796 ]
  %1113 = phi i64 [ %1138, %1141 ], [ %699, %796 ]
  %1114 = phi i64 [ %1134, %1141 ], [ 0, %796 ]
  %1115 = phi i64 [ %1132, %1141 ], [ 0, %796 ]
  %1116 = getelementptr inbounds i64, i64* %1112, i64 %1114
  %1117 = load i64, i64* %1116, align 8
  %1118 = getelementptr inbounds i64, i64* %1111, i64 %1117
  %1119 = load i64, i64* %1118, align 8
  %1120 = icmp eq i64 %1119, %1113
  br i1 %1120, label %1121, label %1129

1121:                                             ; preds = %1110
  %1122 = add i64 %1115, 1
  store i64 %1115, i64* %1118, align 8
  %1123 = load i64*, i64** %505, align 8
  %1124 = load i64*, i64** %693, align 8
  %1125 = getelementptr inbounds i64, i64* %1123, i64 %1114
  %1126 = load i64, i64* %1125, align 8
  %1127 = getelementptr inbounds i64, i64* %1124, i64 %1126
  %1128 = load i64, i64* %1127, align 8
  br label %1129

1129:                                             ; preds = %1121, %1110
  %1130 = phi i64 [ %1128, %1121 ], [ %1119, %1110 ]
  %1131 = phi i64* [ %1123, %1121 ], [ %1112, %1110 ]
  %1132 = phi i64 [ %1122, %1121 ], [ %1115, %1110 ]
  %1133 = getelementptr inbounds i64, i64* %1131, i64 %1114
  store i64 %1130, i64* %1133, align 8
  %1134 = add nuw i64 %1114, 1
  %1135 = load i64, i64* %647, align 8
  %1136 = load i64, i64* %648, align 8
  %1137 = sub i64 %1135, %1136
  %1138 = ashr exact i64 %1137, 3
  %1139 = icmp ult i64 %1134, %1138
  %1140 = inttoptr i64 %1136 to i64*
  br i1 %1139, label %1141, label %1010

1141:                                             ; preds = %1129
  %1142 = load i64*, i64** %693, align 8
  br label %1110

1143:                                             ; preds = %1149, %1095, %1080
  %1144 = load i64, i64* %60, align 8
  %1145 = load i64, i64* %62, align 8
  %1146 = icmp eq i64 %1144, %1145
  br i1 %1146, label %1183, label %1147

1147:                                             ; preds = %1143
  %1148 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %57, i64 0, i32 0, i32 0, i32 0
  br label %1171

1149:                                             ; preds = %1095, %1149
  %1150 = phi %"struct.jxl::PassesEncoderState"* [ %1162, %1149 ], [ %1101, %1095 ]
  %1151 = phi i64 [ %1161, %1149 ], [ 1, %1095 ]
  %1152 = load i64*, i64** %505, align 8
  %1153 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1150, i64 0, i32 8, i32 0, i32 0
  %1154 = load i8*, i8** %1153, align 8
  %1155 = getelementptr inbounds i8, i8* %1154, i64 %1151
  %1156 = load i8, i8* %1155, align 1
  %1157 = zext i8 %1156 to i64
  %1158 = getelementptr inbounds i64, i64* %1152, i64 %1157
  %1159 = load i64, i64* %1158, align 8
  %1160 = trunc i64 %1159 to i8
  store i8 %1160, i8* %1155, align 1
  %1161 = add nuw i64 %1151, 1
  %1162 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %4, align 8
  %1163 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1162, i64 0, i32 8
  %1164 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1162, i64 0, i32 8, i32 0, i32 1
  %1165 = bitcast i8** %1164 to i64*
  %1166 = load i64, i64* %1165, align 8
  %1167 = bitcast %"class.std::__1::vector.21"* %1163 to i64*
  %1168 = load i64, i64* %1167, align 8
  %1169 = sub i64 %1166, %1168
  %1170 = icmp ult i64 %1161, %1169
  br i1 %1170, label %1149, label %1143

1171:                                             ; preds = %1236, %1147
  %1172 = phi i64 [ %1145, %1147 ], [ %1237, %1236 ]
  %1173 = phi i64 [ %1144, %1147 ], [ %1238, %1236 ]
  %1174 = phi i64 [ 0, %1147 ], [ %1239, %1236 ]
  %1175 = inttoptr i64 %1172 to %"class.std::__1::vector.203"*
  %1176 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %1175, i64 %1174
  %1177 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %1175, i64 %1174, i32 0, i32 1
  %1178 = bitcast %"struct.jxl::Token"** %1177 to i64*
  %1179 = load i64, i64* %1178, align 8
  %1180 = bitcast %"class.std::__1::vector.203"* %1176 to i64*
  %1181 = load i64, i64* %1180, align 8
  %1182 = icmp eq i64 %1179, %1181
  br i1 %1182, label %1236, label %1243

1183:                                             ; preds = %1236, %1143
  %1184 = load i64*, i64** %693, align 8
  %1185 = icmp eq i64* %1184, null
  br i1 %1185, label %1190, label %1186

1186:                                             ; preds = %1183
  %1187 = ptrtoint i64* %1184 to i64
  %1188 = bitcast i64** %694 to i64*
  store i64 %1187, i64* %1188, align 8
  %1189 = bitcast i64* %1184 to i8*
  call void @_ZdlPv(i8* %1189) #13
  br label %1190

1190:                                             ; preds = %1186, %1183
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %692) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %641) #8
  %1191 = load i64*, i64** %505, align 8
  %1192 = icmp eq i64* %1191, null
  br i1 %1192, label %1196, label %1193

1193:                                             ; preds = %1190
  %1194 = ptrtoint i64* %1191 to i64
  store i64 %1194, i64* %647, align 8
  %1195 = bitcast i64* %1191 to i8*
  call void @_ZdlPv(i8* %1195) #13
  br label %1196

1196:                                             ; preds = %1193, %1190
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %504) #8
  %1197 = load float*, float** %187, align 8
  %1198 = icmp eq float* %1197, null
  br i1 %1198, label %1203, label %1199

1199:                                             ; preds = %1196
  %1200 = ptrtoint float* %1197 to i64
  %1201 = bitcast float** %188 to i64*
  store i64 %1200, i64* %1201, align 8
  %1202 = bitcast float* %1197 to i8*
  call void @_ZdlPv(i8* %1202) #13
  br label %1203

1203:                                             ; preds = %1199, %1196
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %186) #8
  %1204 = load i64*, i64** %158, align 8
  %1205 = icmp eq i64* %1204, null
  br i1 %1205, label %1210, label %1206

1206:                                             ; preds = %1203
  %1207 = ptrtoint i64* %1204 to i64
  %1208 = bitcast i64** %159 to i64*
  store i64 %1207, i64* %1208, align 8
  %1209 = bitcast i64* %1204 to i8*
  call void @_ZdlPv(i8* %1209) #13
  br label %1210

1210:                                             ; preds = %1206, %1203
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %157) #8
  %1211 = load i64*, i64** %147, align 8
  %1212 = icmp eq i64* %1211, null
  br i1 %1212, label %1216, label %1213

1213:                                             ; preds = %1210
  %1214 = ptrtoint i64* %1211 to i64
  store i64 %1214, i64* %155, align 8
  %1215 = bitcast i64* %1211 to i8*
  call void @_ZdlPv(i8* %1215) #13
  br label %1216

1216:                                             ; preds = %1213, %1210
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %146) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %141) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %116) #8
  %1217 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %9, i64 0, i32 4, i32 0, i32 0
  %1218 = load i64*, i64** %1217, align 8
  %1219 = icmp eq i64* %1218, null
  br i1 %1219, label %1225, label %1220

1220:                                             ; preds = %1216
  %1221 = ptrtoint i64* %1218 to i64
  %1222 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %9, i64 0, i32 4, i32 0, i32 1
  %1223 = bitcast i64** %1222 to i64*
  store i64 %1221, i64* %1223, align 8
  %1224 = bitcast i64* %1218 to i8*
  call void @_ZdlPv(i8* %1224) #13
  br label %1225

1225:                                             ; preds = %1220, %1216
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %107) #8
  %1226 = load float*, float** %79, align 8
  %1227 = icmp eq float* %1226, null
  br i1 %1227, label %1232, label %1228

1228:                                             ; preds = %1225
  %1229 = ptrtoint float* %1226 to i64
  %1230 = bitcast float** %80 to i64*
  store i64 %1229, i64* %1230, align 8
  %1231 = bitcast float* %1226 to i8*
  call void @_ZdlPv(i8* %1231) #13
  br label %1232

1232:                                             ; preds = %1228, %1225
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %78) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %72) #8
  br label %1272

1233:                                             ; preds = %1243
  %1234 = ptrtoint %"class.std::__1::vector.203"* %1262 to i64
  %1235 = load i64, i64* %60, align 8
  br label %1236

1236:                                             ; preds = %1233, %1171
  %1237 = phi i64 [ %1234, %1233 ], [ %1172, %1171 ]
  %1238 = phi i64 [ %1235, %1233 ], [ %1173, %1171 ]
  %1239 = add nuw i64 %1174, 1
  %1240 = sub i64 %1238, %1237
  %1241 = sdiv exact i64 %1240, 24
  %1242 = icmp ult i64 %1239, %1241
  br i1 %1242, label %1171, label %1183

1243:                                             ; preds = %1171, %1243
  %1244 = phi %"class.std::__1::vector.203"* [ %1262, %1243 ], [ %1175, %1171 ]
  %1245 = phi i64 [ %1261, %1243 ], [ 0, %1171 ]
  %1246 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %4, align 8
  %1247 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1246, i64 0, i32 8, i32 0, i32 0
  %1248 = load i8*, i8** %1247, align 8
  %1249 = getelementptr inbounds i8, i8* %1248, i64 %1174
  %1250 = load i8, i8* %1249, align 1
  %1251 = zext i8 %1250 to i64
  %1252 = load i64, i64* %7, align 8
  %1253 = mul i64 %1252, %1251
  %1254 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %1244, i64 %1174, i32 0, i32 0
  %1255 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %1254, align 8
  %1256 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1255, i64 %1245, i32 0
  %1257 = load i32, i32* %1256, align 4
  %1258 = trunc i64 %1253 to i32
  %1259 = shl i32 %1258, 1
  %1260 = add i32 %1259, %1257
  store i32 %1260, i32* %1256, align 4
  %1261 = add nuw i64 %1245, 1
  %1262 = load %"class.std::__1::vector.203"*, %"class.std::__1::vector.203"** %1148, align 8
  %1263 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %1262, i64 %1174
  %1264 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %1262, i64 %1174, i32 0, i32 1
  %1265 = bitcast %"struct.jxl::Token"** %1264 to i64*
  %1266 = load i64, i64* %1265, align 8
  %1267 = bitcast %"class.std::__1::vector.203"* %1263 to i64*
  %1268 = load i64, i64* %1267, align 8
  %1269 = sub i64 %1266, %1268
  %1270 = ashr exact i64 %1269, 3
  %1271 = icmp ult i64 %1261, %1270
  br i1 %1271, label %1243, label %1233

1272:                                             ; preds = %1232, %46
  %1273 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %6, i64 0, i32 2, i32 0, i32 0
  %1274 = load %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"** %1273, align 8
  %1275 = icmp eq %"struct.jxl::HybridUintConfig"* %1274, null
  br i1 %1275, label %1281, label %1276

1276:                                             ; preds = %1272
  %1277 = ptrtoint %"struct.jxl::HybridUintConfig"* %1274 to i64
  %1278 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %6, i64 0, i32 2, i32 0, i32 1
  %1279 = bitcast %"struct.jxl::HybridUintConfig"** %1278 to i64*
  store i64 %1277, i64* %1279, align 8
  %1280 = bitcast %"struct.jxl::HybridUintConfig"* %1274 to i8*
  call void @_ZdlPv(i8* %1280) #13
  br label %1281

1281:                                             ; preds = %1276, %1272
  %1282 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %6, i64 0, i32 0, i32 0, i32 0
  %1283 = load %"class.std::__1::vector.217"*, %"class.std::__1::vector.217"** %1282, align 8
  %1284 = icmp eq %"class.std::__1::vector.217"* %1283, null
  br i1 %1284, label %1326, label %1285

1285:                                             ; preds = %1281
  %1286 = bitcast %"class.std::__1::vector.217"* %1283 to i8*
  %1287 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %6, i64 0, i32 0, i32 0, i32 1
  %1288 = load %"class.std::__1::vector.217"*, %"class.std::__1::vector.217"** %1287, align 8
  %1289 = icmp eq %"class.std::__1::vector.217"* %1288, %1283
  br i1 %1289, label %1324, label %1290

1290:                                             ; preds = %1285, %1319
  %1291 = phi %"class.std::__1::vector.217"* [ %1292, %1319 ], [ %1288, %1285 ]
  %1292 = getelementptr inbounds %"class.std::__1::vector.217", %"class.std::__1::vector.217"* %1291, i64 -1
  %1293 = getelementptr inbounds %"class.std::__1::vector.217", %"class.std::__1::vector.217"* %1292, i64 0, i32 0, i32 0
  %1294 = load %"struct.jxl::ANSEncSymbolInfo"*, %"struct.jxl::ANSEncSymbolInfo"** %1293, align 8
  %1295 = icmp eq %"struct.jxl::ANSEncSymbolInfo"* %1294, null
  br i1 %1295, label %1319, label %1296

1296:                                             ; preds = %1290
  %1297 = bitcast %"struct.jxl::ANSEncSymbolInfo"* %1294 to i8*
  %1298 = getelementptr inbounds %"class.std::__1::vector.217", %"class.std::__1::vector.217"* %1291, i64 -1, i32 0, i32 1
  %1299 = load %"struct.jxl::ANSEncSymbolInfo"*, %"struct.jxl::ANSEncSymbolInfo"** %1298, align 8
  %1300 = icmp eq %"struct.jxl::ANSEncSymbolInfo"* %1299, %1294
  br i1 %1300, label %1317, label %1301

1301:                                             ; preds = %1296, %1312
  %1302 = phi %"struct.jxl::ANSEncSymbolInfo"* [ %1303, %1312 ], [ %1299, %1296 ]
  %1303 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %1302, i64 -1
  %1304 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %1302, i64 -1, i32 2, i32 0, i32 0
  %1305 = load i16*, i16** %1304, align 8
  %1306 = icmp eq i16* %1305, null
  br i1 %1306, label %1312, label %1307

1307:                                             ; preds = %1301
  %1308 = ptrtoint i16* %1305 to i64
  %1309 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %1302, i64 -1, i32 2, i32 0, i32 1
  %1310 = bitcast i16** %1309 to i64*
  store i64 %1308, i64* %1310, align 8
  %1311 = bitcast i16* %1305 to i8*
  call void @_ZdlPv(i8* %1311) #13
  br label %1312

1312:                                             ; preds = %1307, %1301
  %1313 = icmp eq %"struct.jxl::ANSEncSymbolInfo"* %1303, %1294
  br i1 %1313, label %1314, label %1301

1314:                                             ; preds = %1312
  %1315 = bitcast %"class.std::__1::vector.217"* %1292 to i8**
  %1316 = load i8*, i8** %1315, align 8
  br label %1317

1317:                                             ; preds = %1314, %1296
  %1318 = phi i8* [ %1316, %1314 ], [ %1297, %1296 ]
  store %"struct.jxl::ANSEncSymbolInfo"* %1294, %"struct.jxl::ANSEncSymbolInfo"** %1298, align 8
  call void @_ZdlPv(i8* %1318) #13
  br label %1319

1319:                                             ; preds = %1317, %1290
  %1320 = icmp eq %"class.std::__1::vector.217"* %1292, %1283
  br i1 %1320, label %1321, label %1290

1321:                                             ; preds = %1319
  %1322 = bitcast %"struct.jxl::EntropyEncodingData"* %6 to i8**
  %1323 = load i8*, i8** %1322, align 8
  br label %1324

1324:                                             ; preds = %1321, %1285
  %1325 = phi i8* [ %1323, %1321 ], [ %1286, %1285 ]
  store %"class.std::__1::vector.217"* %1283, %"class.std::__1::vector.217"** %1287, align 8
  call void @_ZdlPv(i8* %1325) #13
  br label %1326

1326:                                             ; preds = %1324, %1281
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %50) #8
  %1327 = load i8*, i8** %48, align 8
  %1328 = icmp eq i8* %1327, null
  br i1 %1328, label %1332, label %1329

1329:                                             ; preds = %1326
  %1330 = ptrtoint i8* %1327 to i64
  %1331 = bitcast i8** %49 to i64*
  store i64 %1330, i64* %1331, align 8
  call void @_ZdlPv(i8* nonnull %1327) #13
  br label %1332

1332:                                             ; preds = %1329, %1326
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %47) #8
  %1333 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %27, align 8
  br label %1334

1334:                                             ; preds = %39, %1332
  %1335 = phi %"struct.jxl::PassesEncoderState"* [ %35, %39 ], [ %1333, %1332 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %41)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %42)
  br label %1336

1336:                                             ; preds = %1334, %34
  %1337 = phi %"struct.jxl::PassesEncoderState"* [ %1335, %1334 ], [ %35, %34 ]
  %1338 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1337, i64 0, i32 0, i32 2, i32 14
  %1339 = load i64, i64* %1338, align 8
  %1340 = call i64 @llvm.ctlz.i64(i64 %1339, i1 true) #8, !range !38
  %1341 = xor i64 %1340, 63
  %1342 = call i64 @llvm.ctpop.i64(i64 %1339) #8, !range !38
  %1343 = icmp ugt i64 %1342, 1
  %1344 = zext i1 %1343 to i64
  %1345 = add nuw nsw i64 %1341, %1344
  %1346 = icmp eq i64 %1345, 0
  br i1 %1346, label %1355, label %1347

1347:                                             ; preds = %1336
  %1348 = bitcast %"class.jxl::BitWriter::Allotment"* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %1348) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1348, i8 -86, i64 40, i1 false)
  call void @_ZN3jxl9BitWriter9AllotmentC1EPS0_m(%"class.jxl::BitWriter::Allotment"* nonnull %23, %"struct.jxl::BitWriter"* %1, i64 %1345) #8
  %1349 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %27, align 8
  %1350 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1349, i64 0, i32 0, i32 18
  %1351 = load i64, i64* %1350, align 8
  %1352 = add i64 %1351, -1
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %1, i64 %1345, i64 %1352) #8
  %1353 = load %"struct.jxl::AuxOut"*, %"struct.jxl::AuxOut"** %30, align 8
  call void @_ZN3jxl16ReclaimAndChargeEPNS_9BitWriterEPNS0_9AllotmentEmPNS_6AuxOutE(%"struct.jxl::BitWriter"* %1, %"class.jxl::BitWriter::Allotment"* nonnull %23, i64 8, %"struct.jxl::AuxOut"* %1353) #8
  call void @_ZN3jxl9BitWriter9AllotmentD1Ev(%"class.jxl::BitWriter::Allotment"* nonnull %23) #8
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %1348) #8
  %1354 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %27, align 8
  br label %1355

1355:                                             ; preds = %1336, %1347
  %1356 = phi %"struct.jxl::PassesEncoderState"* [ %1337, %1336 ], [ %1354, %1347 ]
  %1357 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1356, i64 0, i32 5, i32 0, i32 0
  %1358 = load i64, i64* %1357, align 8
  %1359 = icmp eq i64 %1358, 0
  br i1 %1359, label %1456, label %1360

1360:                                             ; preds = %1355
  %1361 = bitcast i64* %24 to i8*
  %1362 = bitcast %"class.jxl::BitWriter::Allotment"* %25 to i8*
  %1363 = bitcast %"struct.jxl::HistogramParams"* %26 to i8*
  %1364 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %26, i64 0, i32 0
  %1365 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %26, i64 0, i32 1
  %1366 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %26, i64 0, i32 2
  %1367 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %26, i64 0, i32 3
  %1368 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %26, i64 0, i32 4
  %1369 = bitcast %"class.std::__1::vector.147"* %1368 to i8*
  %1370 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %26, i64 0, i32 5
  %1371 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %26, i64 0, i32 6
  %1372 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %26, i64 0, i32 4, i32 0, i32 0
  %1373 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %26, i64 0, i32 4, i32 0, i32 1
  %1374 = bitcast i64** %1373 to i64*
  %1375 = bitcast %"struct.jxl::HistogramParams"* %26 to <4 x i32>*
  br label %1376

1376:                                             ; preds = %1360, %1449
  %1377 = phi %"struct.jxl::PassesEncoderState"* [ %1356, %1360 ], [ %1451, %1449 ]
  %1378 = phi i64 [ 0, %1360 ], [ %1450, %1449 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1361) #8
  store i64 0, i64* %24, align 8
  %1379 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1377, i64 0, i32 9, i32 0, i32 0
  %1380 = load i32*, i32** %1379, align 8
  %1381 = getelementptr inbounds i32, i32* %1380, i64 %1378
  %1382 = load i32, i32* %1381, align 4
  %1383 = call i32 @_ZN3jxl8U32Coder9CanEncodeENS_6U32EncEjPm(i64 -9223371953102913441, i64 53687091200, i32 %1382, i64* nonnull %24) #8
  %1384 = icmp eq i32 %1383, 0
  br i1 %1384, label %1385, label %1455

1385:                                             ; preds = %1376
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %1362) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1362, i8 -86, i64 40, i1 false)
  %1386 = load i64, i64* %24, align 8
  call void @_ZN3jxl9BitWriter9AllotmentC1EPS0_m(%"class.jxl::BitWriter::Allotment"* nonnull %25, %"struct.jxl::BitWriter"* %1, i64 %1386) #8
  %1387 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %27, align 8
  %1388 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1387, i64 0, i32 9, i32 0, i32 0
  %1389 = load i32*, i32** %1388, align 8
  %1390 = getelementptr inbounds i32, i32* %1389, i64 %1378
  %1391 = load i32, i32* %1390, align 4
  %1392 = call i32 @_ZN3jxl8U32Coder5WriteENS_6U32EncEjPNS_9BitWriterE(i64 -9223371953102913441, i64 53687091200, i32 %1391, %"struct.jxl::BitWriter"* %1) #8
  %1393 = icmp eq i32 %1392, 0
  br i1 %1393, label %1397, label %1394

1394:                                             ; preds = %1385
  %1395 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.37, i64 0, i64 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.1, i64 0, i64 0), i32 930, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.58, i64 0, i64 0)) #8
  %1396 = call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

1397:                                             ; preds = %1385
  %1398 = load %"struct.jxl::AuxOut"*, %"struct.jxl::AuxOut"** %30, align 8
  call void @_ZN3jxl16ReclaimAndChargeEPNS_9BitWriterEPNS0_9AllotmentEmPNS_6AuxOutE(%"struct.jxl::BitWriter"* %1, %"class.jxl::BitWriter::Allotment"* nonnull %25, i64 5, %"struct.jxl::AuxOut"* %1398) #8
  %1399 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %27, align 8
  %1400 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1399, i64 0, i32 9, i32 0, i32 0
  %1401 = load i32*, i32** %1400, align 8
  %1402 = getelementptr inbounds i32, i32* %1401, i64 %1378
  %1403 = load i32, i32* %1402, align 4
  %1404 = trunc i32 %1403 to i16
  %1405 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1399, i64 0, i32 0, i32 10
  %1406 = load i64, i64* %1405, align 8
  %1407 = mul i64 %1406, %1378
  %1408 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1399, i64 0, i32 0, i32 11, i32 0, i32 0
  %1409 = load i32*, i32** %1408, align 8
  %1410 = getelementptr inbounds i32, i32* %1409, i64 %1407
  %1411 = load %"struct.jxl::AuxOut"*, %"struct.jxl::AuxOut"** %30, align 8
  call void @_ZN3jxl17EncodeCoeffOrdersEtPKjPNS_9BitWriterEmPNS_6AuxOutE(i16 zeroext %1404, i32* %1410, %"struct.jxl::BitWriter"* %1, i64 5, %"struct.jxl::AuxOut"* %1411) #8
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %1363) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1363, i8 -86, i64 56, i1 false)
  %1412 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %27, align 8
  %1413 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1412, i64 0, i32 6, i32 7
  %1414 = load i32, i32* %1413, align 4
  %1415 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1412, i64 0, i32 0, i32 15, i32 3
  %1416 = load i64, i64* %1415, align 8
  %1417 = mul i64 %1416, 495
  store <4 x i32> <i32 2, i32 3, i32 1, i32 2>, <4 x i32>* %1375, align 16
  call void @llvm.memset.p0i8.i64(i8* align 16 %1369, i8 0, i64 24, i1 false) #8
  store i64 -1, i64* %1370, align 8
  store i8 0, i8* %1371, align 16
  %1418 = icmp eq i32 %1414, 7
  br i1 %1418, label %1419, label %1420

1419:                                             ; preds = %1397
  store i32 0, i32* %1364, align 16
  store i32 0, i32* %1366, align 8
  store i32 0, i32* %1365, align 4
  br label %1424

1420:                                             ; preds = %1397
  %1421 = icmp sgt i32 %1414, 1
  br i1 %1421, label %1422, label %1425

1422:                                             ; preds = %1420
  store i32 1, i32* %1364, align 16
  store i32 0, i32* %1365, align 4
  %1423 = icmp eq i32 %1414, 2
  br i1 %1423, label %1426, label %1424

1424:                                             ; preds = %1422, %1419
  store i32 1, i32* %1367, align 4
  br label %1426

1425:                                             ; preds = %1420
  store i32 2, i32* %1364, align 16
  br label %1427

1426:                                             ; preds = %1422, %1424
  store i32 0, i32* %1366, align 8
  br label %1427

1427:                                             ; preds = %1425, %1426
  %1428 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1412, i64 0, i32 6, i32 8
  %1429 = load i64, i64* %1428, align 8
  %1430 = icmp eq i64 %1429, 0
  br i1 %1430, label %1432, label %1431

1431:                                             ; preds = %1427
  store i64 6, i64* %1370, align 8
  br label %1432

1432:                                             ; preds = %1427, %1431
  %1433 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1412, i64 0, i32 0, i32 18
  %1434 = load i64, i64* %1433, align 8
  %1435 = and i64 %1417, 4294967295
  %1436 = mul i64 %1434, %1435
  %1437 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1412, i64 0, i32 7, i32 0, i32 0
  %1438 = load %"struct.jxl::PassesEncoderState::PassData"*, %"struct.jxl::PassesEncoderState::PassData"** %1437, align 8
  %1439 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %1438, i64 %1378, i32 0
  %1440 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %1438, i64 %1378, i32 2
  %1441 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %1438, i64 %1378, i32 1
  %1442 = load %"struct.jxl::AuxOut"*, %"struct.jxl::AuxOut"** %30, align 8
  %1443 = call i64 @_ZN3jxl24BuildAndEncodeHistogramsERKNS_15HistogramParamsEmRNSt3__16vectorINS4_INS_5TokenENS3_9allocatorIS5_EEEENS6_IS8_EEEEPNS_19EntropyEncodingDataEPNS4_IhNS6_IhEEEEPNS_9BitWriterEmPNS_6AuxOutE(%"struct.jxl::HistogramParams"* nonnull dereferenceable(56) %26, i64 %1436, %"class.std::__1::vector.201"* dereferenceable(24) %1439, %"struct.jxl::EntropyEncodingData"* %1440, %"class.std::__1::vector.21"* %1441, %"struct.jxl::BitWriter"* %1, i64 8, %"struct.jxl::AuxOut"* %1442) #8
  %1444 = load i64*, i64** %1372, align 16
  %1445 = icmp eq i64* %1444, null
  br i1 %1445, label %1449, label %1446

1446:                                             ; preds = %1432
  %1447 = ptrtoint i64* %1444 to i64
  store i64 %1447, i64* %1374, align 8
  %1448 = bitcast i64* %1444 to i8*
  call void @_ZdlPv(i8* %1448) #13
  br label %1449

1449:                                             ; preds = %1446, %1432
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %1363) #8
  call void @_ZN3jxl9BitWriter9AllotmentD1Ev(%"class.jxl::BitWriter::Allotment"* nonnull %25) #8
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %1362) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1361) #8
  %1450 = add nuw i64 %1378, 1
  %1451 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %27, align 8
  %1452 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1451, i64 0, i32 5, i32 0, i32 0
  %1453 = load i64, i64* %1452, align 8
  %1454 = icmp ult i64 %1450, %1453
  br i1 %1454, label %1376, label %1456

1455:                                             ; preds = %1376
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1361) #8
  br label %1456

1456:                                             ; preds = %1449, %1355, %1455, %3
  %1457 = phi i32 [ %1383, %1455 ], [ %32, %3 ], [ 0, %1355 ], [ 0, %1449 ]
  ret i32 %1457

1458:                                             ; preds = %905
  %1459 = load i64, i64* %852, align 8
  store i64 %1459, i64* %906, align 8
  br label %1460

1460:                                             ; preds = %1458, %905
  %1461 = getelementptr inbounds i64, i64* %899, i64 2
  %1462 = icmp eq i64* %1461, %878
  br i1 %1462, label %910, label %898

1463:                                             ; preds = %996
  %1464 = load i64, i64* %969, align 8
  store i64 %1464, i64* %997, align 8
  br label %1465

1465:                                             ; preds = %1463, %996
  %1466 = getelementptr inbounds i64, i64* %990, i64 2
  %1467 = icmp eq i64* %1466, %967
  br i1 %1467, label %1001, label %989
}

declare i32 @_ZN3jxl17WriteGroupOffsetsERKNSt3__16vectorINS_9BitWriterENS0_9allocatorIS2_EEEEPKNS1_IjNS3_IjEEEEPS2_PNS_6AuxOutE(%"class.std::__1::vector.366"* dereferenceable(24), %"class.std::__1::vector"*, %"struct.jxl::BitWriter"*, %"struct.jxl::AuxOut"*) local_unnamed_addr #1

declare void @_ZN3jxl9BitWriter17AppendByteAlignedERKNSt3__16vectorIS0_NS1_9allocatorIS0_EEEE(%"struct.jxl::BitWriter"*, %"class.std::__1::vector.366"* dereferenceable(24)) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12
  %3 = getelementptr inbounds %"class.std::__1::vector.85", %"class.std::__1::vector.85"* %2, i64 0, i32 0, i32 0
  %4 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %3, align 8
  %5 = icmp eq %"class.jxl::Plane"* %4, null
  br i1 %5, label %25, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.jxl::Plane"* %4 to i8*
  %8 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %9 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %8, align 8
  %10 = icmp eq %"class.jxl::Plane"* %9, %4
  br i1 %10, label %23, label %11

11:                                               ; preds = %6, %18
  %12 = phi %"class.jxl::Plane"* [ %13, %18 ], [ %9, %6 ]
  %13 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %12, i64 -1
  %14 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %12, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  store i8* null, i8** %14, align 8
  %16 = icmp eq i8* %15, null
  br i1 %16, label %18, label %17

17:                                               ; preds = %11
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %15) #8
  br label %18

18:                                               ; preds = %17, %11
  %19 = icmp eq %"class.jxl::Plane"* %13, %4
  br i1 %19, label %20, label %11

20:                                               ; preds = %18
  %21 = bitcast %"class.std::__1::vector.85"* %2 to i8**
  %22 = load i8*, i8** %21, align 8
  br label %23

23:                                               ; preds = %20, %6
  %24 = phi i8* [ %22, %20 ], [ %7, %6 ]
  store %"class.jxl::Plane"* %4, %"class.jxl::Plane"** %8, align 8
  tail call void @_ZdlPv(i8* %24) #13
  br label %25

25:                                               ; preds = %1, %23
  %26 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ColorEncodingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %26, align 8
  %27 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 2, i32 0, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  store i8* null, i8** %27, align 8
  %29 = icmp eq i8* %28, null
  br i1 %29, label %31, label %30

30:                                               ; preds = %25
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %28) #8
  br label %31

31:                                               ; preds = %25, %30
  %32 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %33 = load i8*, i8** %32, align 8
  store i8* null, i8** %32, align 8
  %34 = icmp eq i8* %33, null
  br i1 %34, label %36, label %35

35:                                               ; preds = %31
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %33) #8
  br label %36

36:                                               ; preds = %35, %31
  %37 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %38 = load i8*, i8** %37, align 8
  store i8* null, i8** %37, align 8
  %39 = icmp eq i8* %38, null
  br i1 %39, label %41, label %40

40:                                               ; preds = %36
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %38) #8
  br label %41

41:                                               ; preds = %40, %36
  %42 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %43 = load i8*, i8** %42, align 8
  store i8* null, i8** %42, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %46, label %45

45:                                               ; preds = %41
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %43) #8
  br label %46

46:                                               ; preds = %41, %45
  %47 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 8
  %48 = bitcast %"class.std::__1::basic_string"* %47 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %49 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %50 = load i8, i8* %49, align 1
  %51 = icmp slt i8 %50, 0
  br i1 %51, label %52, label %55

52:                                               ; preds = %46
  %53 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %47, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  tail call void @_ZdlPv(i8* %54) #13
  br label %55

55:                                               ; preds = %46, %52
  %56 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %57 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %56, align 8
  store %"struct.jxl::jpeg::JPEGData"* null, %"struct.jxl::jpeg::JPEGData"** %56, align 8
  %58 = icmp eq %"struct.jxl::jpeg::JPEGData"* %57, null
  br i1 %58, label %64, label %59

59:                                               ; preds = %55
  %60 = bitcast %"struct.jxl::jpeg::JPEGData"* %57 to void (%"struct.jxl::jpeg::JPEGData"*)***
  %61 = load void (%"struct.jxl::jpeg::JPEGData"*)**, void (%"struct.jxl::jpeg::JPEGData"*)*** %60, align 8
  %62 = getelementptr inbounds void (%"struct.jxl::jpeg::JPEGData"*)*, void (%"struct.jxl::jpeg::JPEGData"*)** %61, i64 1
  %63 = load void (%"struct.jxl::jpeg::JPEGData"*)*, void (%"struct.jxl::jpeg::JPEGData"*)** %62, align 8
  tail call void %63(%"struct.jxl::jpeg::JPEGData"* nonnull %57) #8
  br label %64

64:                                               ; preds = %55, %59
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl22YCbCrChromaSubsamplingD0Ev(%"struct.jxl::YCbCrChromaSubsampling"*) unnamed_addr #4 comdat align 2 {
  %2 = bitcast %"struct.jxl::YCbCrChromaSubsampling"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK3jxl22YCbCrChromaSubsampling4NameEv(%"struct.jxl::YCbCrChromaSubsampling"*) unnamed_addr #0 comdat align 2 {
  ret i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.27, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3jxl22YCbCrChromaSubsampling11VisitFieldsEPNS_7VisitorE(%"struct.jxl::YCbCrChromaSubsampling"*, %"class.jxl::Visitor"* noalias) unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i32, i32*)***
  %4 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 1, i64 0
  %5 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %3, align 8
  %6 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %5, i64 5
  %7 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %6, align 8
  %8 = tail call i32 %7(%"class.jxl::Visitor"* %1, i64 2, i32 0, i32* %4) #8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %17

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 1, i64 1
  %12 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %3, align 8
  %13 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %12, i64 5
  %14 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %13, align 8
  %15 = tail call i32 %14(%"class.jxl::Visitor"* %1, i64 2, i32 0, i32* %11) #8
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %19, label %17

17:                                               ; preds = %2, %10, %19, %26
  %18 = phi i32 [ 0, %26 ], [ %8, %2 ], [ %15, %10 ], [ %24, %19 ]
  ret i32 %18

19:                                               ; preds = %10
  %20 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 1, i64 2
  %21 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %3, align 8
  %22 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %21, i64 5
  %23 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %22, align 8
  %24 = tail call i32 %23(%"class.jxl::Visitor"* %1, i64 2, i32 0, i32* %20) #8
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %17

26:                                               ; preds = %19
  %27 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 2
  %28 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 3
  %29 = load i32, i32* %4, align 4
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE, i64 0, i64 %30
  %32 = load i8, i8* %31, align 1
  %33 = add nsw i64 %30, -1
  %34 = icmp ult i64 %33, 2
  %35 = select i1 %34, i8 %32, i8 0
  %36 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE, i64 0, i64 %30
  %37 = load i8, i8* %36, align 1
  %38 = or i64 %30, 2
  %39 = icmp eq i64 %38, 3
  %40 = select i1 %39, i8 %37, i8 0
  %41 = load i32, i32* %11, align 4
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE, i64 0, i64 %42
  %44 = load i8, i8* %43, align 1
  %45 = icmp ult i8 %35, %44
  %46 = select i1 %45, i8 %44, i8 %35
  %47 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE, i64 0, i64 %42
  %48 = load i8, i8* %47, align 1
  %49 = icmp ult i8 %40, %48
  %50 = select i1 %49, i8 %48, i8 %40
  %51 = load i32, i32* %20, align 4
  %52 = zext i32 %51 to i64
  %53 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE, i64 0, i64 %52
  %54 = load i8, i8* %53, align 1
  %55 = icmp ult i8 %46, %54
  %56 = select i1 %55, i8 %54, i8 %46
  store i8 %56, i8* %27, align 4
  %57 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE, i64 0, i64 %52
  %58 = load i8, i8* %57, align 1
  %59 = icmp ult i8 %50, %58
  %60 = select i1 %59, i8 %58, i8 %50
  store i8 %60, i8* %28, align 1
  br label %17
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #3

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb1EEERS5_PKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #1

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb0EEERS5_PKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #1

declare i64 @_ZNK3jxl13PreviewHeader5xsizeEv(%"class.jxl::PreviewHeader"*) local_unnamed_addr #1

declare i64 @_ZNK3jxl10SizeHeader5xsizeEv(%"class.jxl::SizeHeader"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEmRKj(%"class.std::__1::vector"*, i64, i32* dereferenceable(4)) local_unnamed_addr #0 comdat align 2 {
  %4 = bitcast i32* %2 to i8*
  %5 = bitcast i32* %2 to i8*
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %10 = bitcast i32** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %8, %11
  %13 = ashr exact i64 %12, 2
  %14 = icmp ult i64 %13, %1
  br i1 %14, label %130, label %15

15:                                               ; preds = %3
  %16 = inttoptr i64 %11 to i32*
  %17 = inttoptr i64 %11 to i8*
  %18 = getelementptr inbounds i32, i32* %16, i64 %1
  %19 = icmp eq i64 %1, 0
  br i1 %19, label %128, label %20

20:                                               ; preds = %15
  %21 = shl nsw i64 %1, 2
  %22 = add i64 %21, -4
  %23 = lshr exact i64 %22, 2
  %24 = add nuw nsw i64 %23, 1
  %25 = icmp ult i64 %24, 8
  br i1 %25, label %26, label %47

26:                                               ; preds = %105, %47, %20
  %27 = phi i32* [ %16, %47 ], [ %16, %20 ], [ %59, %105 ]
  %28 = ptrtoint i32* %27 to i64
  %29 = add i64 %1, -1
  %30 = getelementptr i32, i32* %16, i64 %29
  %31 = ptrtoint i32* %30 to i64
  %32 = sub i64 %31, %28
  %33 = lshr i64 %32, 2
  %34 = add nuw nsw i64 %33, 1
  %35 = and i64 %34, 7
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %44, label %37

37:                                               ; preds = %26, %37
  %38 = phi i32* [ %41, %37 ], [ %27, %26 ]
  %39 = phi i64 [ %42, %37 ], [ %35, %26 ]
  %40 = load i32, i32* %2, align 4
  store i32 %40, i32* %38, align 4
  %41 = getelementptr inbounds i32, i32* %38, i64 1
  %42 = add i64 %39, -1
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %44, label %37, !llvm.loop !49

44:                                               ; preds = %37, %26
  %45 = phi i32* [ %27, %26 ], [ %41, %37 ]
  %46 = icmp ult i64 %32, 28
  br i1 %46, label %107, label %109

47:                                               ; preds = %20
  %48 = shl nsw i64 %1, 2
  %49 = add i64 %48, -4
  %50 = lshr exact i64 %49, 2
  %51 = add nuw nsw i64 %50, 1
  %52 = getelementptr i32, i32* %16, i64 %51
  %53 = getelementptr i8, i8* %5, i64 1
  %54 = icmp ugt i8* %53, %17
  %55 = icmp ugt i32* %52, %2
  %56 = and i1 %54, %55
  br i1 %56, label %26, label %57

57:                                               ; preds = %47
  %58 = and i64 %24, 9223372036854775800
  %59 = getelementptr i32, i32* %16, i64 %58
  %60 = add nsw i64 %58, -8
  %61 = lshr exact i64 %60, 3
  %62 = add nuw nsw i64 %61, 1
  %63 = and i64 %62, 1
  %64 = icmp eq i64 %60, 0
  br i1 %64, label %92, label %65

65:                                               ; preds = %57
  %66 = sub nuw nsw i64 %62, %63
  %67 = load i32, i32* %2, align 4, !alias.scope !50
  %68 = insertelement <4 x i32> undef, i32 %67, i32 0
  %69 = shufflevector <4 x i32> %68, <4 x i32> undef, <4 x i32> zeroinitializer
  %70 = insertelement <4 x i32> undef, i32 %67, i32 0
  %71 = shufflevector <4 x i32> %70, <4 x i32> undef, <4 x i32> zeroinitializer
  %72 = load i32, i32* %2, align 4, !alias.scope !50
  %73 = insertelement <4 x i32> undef, i32 %72, i32 0
  %74 = shufflevector <4 x i32> %73, <4 x i32> undef, <4 x i32> zeroinitializer
  %75 = insertelement <4 x i32> undef, i32 %72, i32 0
  %76 = shufflevector <4 x i32> %75, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %77

77:                                               ; preds = %77, %65
  %78 = phi i64 [ 0, %65 ], [ %89, %77 ]
  %79 = phi i64 [ %66, %65 ], [ %90, %77 ]
  %80 = getelementptr i32, i32* %16, i64 %78
  %81 = bitcast i32* %80 to <4 x i32>*
  store <4 x i32> %69, <4 x i32>* %81, align 4, !alias.scope !53, !noalias !50
  %82 = getelementptr i32, i32* %80, i64 4
  %83 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %71, <4 x i32>* %83, align 4, !alias.scope !53, !noalias !50
  %84 = or i64 %78, 8
  %85 = getelementptr i32, i32* %16, i64 %84
  %86 = bitcast i32* %85 to <4 x i32>*
  store <4 x i32> %74, <4 x i32>* %86, align 4, !alias.scope !53, !noalias !50
  %87 = getelementptr i32, i32* %85, i64 4
  %88 = bitcast i32* %87 to <4 x i32>*
  store <4 x i32> %76, <4 x i32>* %88, align 4, !alias.scope !53, !noalias !50
  %89 = add i64 %78, 16
  %90 = add i64 %79, -2
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %92, label %77, !llvm.loop !55

92:                                               ; preds = %77, %57
  %93 = phi i64 [ 0, %57 ], [ %89, %77 ]
  %94 = icmp eq i64 %63, 0
  br i1 %94, label %105, label %95

95:                                               ; preds = %92
  %96 = getelementptr i32, i32* %16, i64 %93
  %97 = load i32, i32* %2, align 4, !alias.scope !50
  %98 = insertelement <4 x i32> undef, i32 %97, i32 0
  %99 = shufflevector <4 x i32> %98, <4 x i32> undef, <4 x i32> zeroinitializer
  %100 = insertelement <4 x i32> undef, i32 %97, i32 0
  %101 = shufflevector <4 x i32> %100, <4 x i32> undef, <4 x i32> zeroinitializer
  %102 = bitcast i32* %96 to <4 x i32>*
  store <4 x i32> %99, <4 x i32>* %102, align 4, !alias.scope !53, !noalias !50
  %103 = getelementptr i32, i32* %96, i64 4
  %104 = bitcast i32* %103 to <4 x i32>*
  store <4 x i32> %101, <4 x i32>* %104, align 4, !alias.scope !53, !noalias !50
  br label %105

105:                                              ; preds = %92, %95
  %106 = icmp eq i64 %24, %58
  br i1 %106, label %107, label %26

107:                                              ; preds = %44, %109, %105
  %108 = ptrtoint i32* %18 to i64
  br label %128

109:                                              ; preds = %44, %109
  %110 = phi i32* [ %126, %109 ], [ %45, %44 ]
  %111 = load i32, i32* %2, align 4
  store i32 %111, i32* %110, align 4
  %112 = getelementptr inbounds i32, i32* %110, i64 1
  %113 = load i32, i32* %2, align 4
  store i32 %113, i32* %112, align 4
  %114 = getelementptr inbounds i32, i32* %110, i64 2
  %115 = load i32, i32* %2, align 4
  store i32 %115, i32* %114, align 4
  %116 = getelementptr inbounds i32, i32* %110, i64 3
  %117 = load i32, i32* %2, align 4
  store i32 %117, i32* %116, align 4
  %118 = getelementptr inbounds i32, i32* %110, i64 4
  %119 = load i32, i32* %2, align 4
  store i32 %119, i32* %118, align 4
  %120 = getelementptr inbounds i32, i32* %110, i64 5
  %121 = load i32, i32* %2, align 4
  store i32 %121, i32* %120, align 4
  %122 = getelementptr inbounds i32, i32* %110, i64 6
  %123 = load i32, i32* %2, align 4
  store i32 %123, i32* %122, align 4
  %124 = getelementptr inbounds i32, i32* %110, i64 7
  %125 = load i32, i32* %2, align 4
  store i32 %125, i32* %124, align 4
  %126 = getelementptr inbounds i32, i32* %110, i64 8
  %127 = icmp eq i32* %126, %18
  br i1 %127, label %107, label %109, !llvm.loop !56

128:                                              ; preds = %15, %107
  %129 = phi i64 [ %108, %107 ], [ %11, %15 ]
  store i64 %129, i64* %10, align 8
  br label %292

130:                                              ; preds = %3
  %131 = bitcast %"class.std::__1::vector"* %0 to i64*
  %132 = load i64, i64* %131, align 8
  %133 = sub i64 %11, %132
  %134 = ashr exact i64 %133, 2
  %135 = add i64 %134, %1
  %136 = icmp ugt i64 %135, 4611686018427387903
  br i1 %136, label %137, label %139

137:                                              ; preds = %130
  %138 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %138) #14
  unreachable

139:                                              ; preds = %130
  %140 = sub i64 %8, %132
  %141 = ashr exact i64 %140, 2
  %142 = icmp ult i64 %141, 2305843009213693951
  br i1 %142, label %143, label %151

143:                                              ; preds = %139
  %144 = ashr exact i64 %140, 1
  %145 = icmp ult i64 %144, %135
  %146 = select i1 %145, i64 %135, i64 %144
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %156, label %148

148:                                              ; preds = %143
  %149 = icmp ugt i64 %146, 4611686018427387903
  br i1 %149, label %150, label %151

150:                                              ; preds = %148
  tail call void @abort() #14
  unreachable

151:                                              ; preds = %139, %148
  %152 = phi i64 [ %146, %148 ], [ 4611686018427387903, %139 ]
  %153 = shl i64 %152, 2
  %154 = tail call i8* @_Znwm(i64 %153) #13
  %155 = bitcast i8* %154 to i32*
  br label %156

156:                                              ; preds = %143, %151
  %157 = phi i64 [ %152, %151 ], [ 0, %143 ]
  %158 = phi i32* [ %155, %151 ], [ null, %143 ]
  %159 = getelementptr inbounds i32, i32* %158, i64 %134
  %160 = getelementptr inbounds i32, i32* %158, i64 %157
  %161 = getelementptr inbounds i32, i32* %159, i64 %1
  %162 = shl nsw i64 %1, 2
  %163 = add i64 %162, -4
  %164 = lshr exact i64 %163, 2
  %165 = add nuw nsw i64 %164, 1
  %166 = icmp ult i64 %165, 8
  br i1 %166, label %229, label %167

167:                                              ; preds = %156
  %168 = bitcast i32* %159 to i8*
  %169 = shl nsw i64 %1, 2
  %170 = add i64 %169, -4
  %171 = lshr exact i64 %170, 2
  %172 = add nsw i64 %134, %171
  %173 = add i64 %172, 1
  %174 = getelementptr i32, i32* %158, i64 %173
  %175 = getelementptr i8, i8* %4, i64 1
  %176 = icmp ugt i8* %175, %168
  %177 = icmp ugt i32* %174, %2
  %178 = and i1 %176, %177
  br i1 %178, label %229, label %179

179:                                              ; preds = %167
  %180 = and i64 %165, 9223372036854775800
  %181 = getelementptr i32, i32* %159, i64 %180
  %182 = add nsw i64 %180, -8
  %183 = lshr exact i64 %182, 3
  %184 = add nuw nsw i64 %183, 1
  %185 = and i64 %184, 1
  %186 = icmp eq i64 %182, 0
  br i1 %186, label %214, label %187

187:                                              ; preds = %179
  %188 = sub nuw nsw i64 %184, %185
  %189 = load i32, i32* %2, align 4, !alias.scope !57
  %190 = insertelement <4 x i32> undef, i32 %189, i32 0
  %191 = shufflevector <4 x i32> %190, <4 x i32> undef, <4 x i32> zeroinitializer
  %192 = insertelement <4 x i32> undef, i32 %189, i32 0
  %193 = shufflevector <4 x i32> %192, <4 x i32> undef, <4 x i32> zeroinitializer
  %194 = load i32, i32* %2, align 4, !alias.scope !57
  %195 = insertelement <4 x i32> undef, i32 %194, i32 0
  %196 = shufflevector <4 x i32> %195, <4 x i32> undef, <4 x i32> zeroinitializer
  %197 = insertelement <4 x i32> undef, i32 %194, i32 0
  %198 = shufflevector <4 x i32> %197, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %199

199:                                              ; preds = %199, %187
  %200 = phi i64 [ 0, %187 ], [ %211, %199 ]
  %201 = phi i64 [ %188, %187 ], [ %212, %199 ]
  %202 = getelementptr i32, i32* %159, i64 %200
  %203 = bitcast i32* %202 to <4 x i32>*
  store <4 x i32> %191, <4 x i32>* %203, align 4, !alias.scope !60, !noalias !57
  %204 = getelementptr i32, i32* %202, i64 4
  %205 = bitcast i32* %204 to <4 x i32>*
  store <4 x i32> %193, <4 x i32>* %205, align 4, !alias.scope !60, !noalias !57
  %206 = or i64 %200, 8
  %207 = getelementptr i32, i32* %159, i64 %206
  %208 = bitcast i32* %207 to <4 x i32>*
  store <4 x i32> %196, <4 x i32>* %208, align 4, !alias.scope !60, !noalias !57
  %209 = getelementptr i32, i32* %207, i64 4
  %210 = bitcast i32* %209 to <4 x i32>*
  store <4 x i32> %198, <4 x i32>* %210, align 4, !alias.scope !60, !noalias !57
  %211 = add i64 %200, 16
  %212 = add i64 %201, -2
  %213 = icmp eq i64 %212, 0
  br i1 %213, label %214, label %199, !llvm.loop !62

214:                                              ; preds = %199, %179
  %215 = phi i64 [ 0, %179 ], [ %211, %199 ]
  %216 = icmp eq i64 %185, 0
  br i1 %216, label %227, label %217

217:                                              ; preds = %214
  %218 = getelementptr i32, i32* %159, i64 %215
  %219 = load i32, i32* %2, align 4, !alias.scope !57
  %220 = insertelement <4 x i32> undef, i32 %219, i32 0
  %221 = shufflevector <4 x i32> %220, <4 x i32> undef, <4 x i32> zeroinitializer
  %222 = insertelement <4 x i32> undef, i32 %219, i32 0
  %223 = shufflevector <4 x i32> %222, <4 x i32> undef, <4 x i32> zeroinitializer
  %224 = bitcast i32* %218 to <4 x i32>*
  store <4 x i32> %221, <4 x i32>* %224, align 4, !alias.scope !60, !noalias !57
  %225 = getelementptr i32, i32* %218, i64 4
  %226 = bitcast i32* %225 to <4 x i32>*
  store <4 x i32> %223, <4 x i32>* %226, align 4, !alias.scope !60, !noalias !57
  br label %227

227:                                              ; preds = %214, %217
  %228 = icmp eq i64 %165, %180
  br i1 %228, label %270, label %229

229:                                              ; preds = %227, %167, %156
  %230 = phi i32* [ %159, %167 ], [ %159, %156 ], [ %181, %227 ]
  %231 = ptrtoint i32* %230 to i64
  %232 = add i64 %134, %1
  %233 = add i64 %232, -1
  %234 = getelementptr i32, i32* %158, i64 %233
  %235 = ptrtoint i32* %234 to i64
  %236 = sub i64 %235, %231
  %237 = lshr i64 %236, 2
  %238 = add nuw nsw i64 %237, 1
  %239 = and i64 %238, 7
  %240 = icmp eq i64 %239, 0
  br i1 %240, label %248, label %241

241:                                              ; preds = %229, %241
  %242 = phi i32* [ %245, %241 ], [ %230, %229 ]
  %243 = phi i64 [ %246, %241 ], [ %239, %229 ]
  %244 = load i32, i32* %2, align 4
  store i32 %244, i32* %242, align 4
  %245 = getelementptr inbounds i32, i32* %242, i64 1
  %246 = add i64 %243, -1
  %247 = icmp eq i64 %246, 0
  br i1 %247, label %248, label %241, !llvm.loop !63

248:                                              ; preds = %241, %229
  %249 = phi i32* [ %230, %229 ], [ %245, %241 ]
  %250 = icmp ult i64 %236, 28
  br i1 %250, label %270, label %251

251:                                              ; preds = %248, %251
  %252 = phi i32* [ %268, %251 ], [ %249, %248 ]
  %253 = load i32, i32* %2, align 4
  store i32 %253, i32* %252, align 4
  %254 = getelementptr inbounds i32, i32* %252, i64 1
  %255 = load i32, i32* %2, align 4
  store i32 %255, i32* %254, align 4
  %256 = getelementptr inbounds i32, i32* %252, i64 2
  %257 = load i32, i32* %2, align 4
  store i32 %257, i32* %256, align 4
  %258 = getelementptr inbounds i32, i32* %252, i64 3
  %259 = load i32, i32* %2, align 4
  store i32 %259, i32* %258, align 4
  %260 = getelementptr inbounds i32, i32* %252, i64 4
  %261 = load i32, i32* %2, align 4
  store i32 %261, i32* %260, align 4
  %262 = getelementptr inbounds i32, i32* %252, i64 5
  %263 = load i32, i32* %2, align 4
  store i32 %263, i32* %262, align 4
  %264 = getelementptr inbounds i32, i32* %252, i64 6
  %265 = load i32, i32* %2, align 4
  store i32 %265, i32* %264, align 4
  %266 = getelementptr inbounds i32, i32* %252, i64 7
  %267 = load i32, i32* %2, align 4
  store i32 %267, i32* %266, align 4
  %268 = getelementptr inbounds i32, i32* %252, i64 8
  %269 = icmp eq i32* %161, %268
  br i1 %269, label %270, label %251, !llvm.loop !64

270:                                              ; preds = %248, %251, %227
  %271 = ptrtoint i32* %160 to i64
  %272 = ptrtoint i32* %161 to i64
  %273 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %274 = load i32*, i32** %273, align 8
  %275 = load i64, i64* %10, align 8
  %276 = ptrtoint i32* %274 to i64
  %277 = sub i64 %275, %276
  %278 = ashr exact i64 %277, 2
  %279 = sub nsw i64 0, %278
  %280 = getelementptr inbounds i32, i32* %159, i64 %279
  %281 = ptrtoint i32* %280 to i64
  %282 = icmp sgt i64 %277, 0
  br i1 %282, label %283, label %287

283:                                              ; preds = %270
  %284 = bitcast i32* %280 to i8*
  %285 = bitcast i32* %274 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %284, i8* align 4 %285, i64 %277, i1 false) #8
  %286 = load i32*, i32** %273, align 8
  br label %287

287:                                              ; preds = %270, %283
  %288 = phi i32* [ %274, %270 ], [ %286, %283 ]
  store i64 %281, i64* %131, align 8
  store i64 %272, i64* %10, align 8
  store i64 %271, i64* %7, align 8
  %289 = icmp eq i32* %288, null
  br i1 %289, label %292, label %290

290:                                              ; preds = %287
  %291 = bitcast i32* %288 to i8*
  tail call void @_ZdlPv(i8* %291) #13
  br label %292

292:                                              ; preds = %290, %287, %128
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

declare void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"*, i64) local_unnamed_addr #1

declare void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"*) unnamed_addr #1

declare void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"*) unnamed_addr #1

declare i32 @_ZN3jxl27InitializePassesSharedStateERKNS_11FrameHeaderEPNS_17PassesSharedStateEb(%"struct.jxl::FrameHeader"* dereferenceable(576), %"struct.jxl::PassesSharedState"*, i1 zeroext) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIjNS_9allocatorIjEEE6assignIPjEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector"*, i32*, i32*) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint i32* %2 to i64
  %5 = ptrtoint i32* %1 to i64
  %6 = sub i64 %4, %5
  %7 = ashr exact i64 %6, 2
  %8 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %9 = bitcast i32** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = ashr exact i64 %13, 2
  %15 = icmp ugt i64 %7, %14
  %16 = inttoptr i64 %12 to i32*
  br i1 %15, label %49, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %19 = bitcast i32** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %12
  %22 = ashr exact i64 %21, 2
  %23 = icmp ugt i64 %7, %22
  %24 = getelementptr inbounds i32, i32* %1, i64 %22
  %25 = select i1 %23, i32* %24, i32* %2
  %26 = ptrtoint i32* %25 to i64
  %27 = sub i64 %26, %5
  %28 = ashr exact i64 %27, 2
  %29 = icmp eq i64 %27, 0
  br i1 %29, label %33, label %30

30:                                               ; preds = %17
  %31 = inttoptr i64 %12 to i8*
  %32 = bitcast i32* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %31, i8* align 4 %32, i64 %27, i1 false) #8
  br label %33

33:                                               ; preds = %17, %30
  br i1 %23, label %34, label %47

34:                                               ; preds = %33
  %35 = load i64, i64* %19, align 8
  %36 = sub i64 %4, %26
  %37 = icmp sgt i64 %36, 0
  br i1 %37, label %38, label %45

38:                                               ; preds = %34
  %39 = lshr exact i64 %36, 2
  %40 = inttoptr i64 %35 to i8*
  %41 = bitcast i32* %25 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %40, i8* align 4 %41, i64 %36, i1 false) #8
  %42 = inttoptr i64 %35 to i32*
  %43 = getelementptr inbounds i32, i32* %42, i64 %39
  %44 = ptrtoint i32* %43 to i64
  br label %45

45:                                               ; preds = %34, %38
  %46 = phi i64 [ %44, %38 ], [ %35, %34 ]
  store i64 %46, i64* %19, align 8
  br label %90

47:                                               ; preds = %33
  %48 = getelementptr inbounds i32, i32* %16, i64 %28
  store i32* %48, i32** %18, align 8
  br label %90

49:                                               ; preds = %3
  %50 = icmp eq i64 %12, 0
  br i1 %50, label %56, label %51

51:                                               ; preds = %49
  %52 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %53 = bitcast i32** %52 to i64*
  store i64 %12, i64* %53, align 8
  %54 = inttoptr i64 %12 to i8*
  tail call void @_ZdlPv(i8* %54) #13
  %55 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %55, i8 0, i64 24, i1 false) #8
  br label %56

56:                                               ; preds = %49, %51
  %57 = phi i64 [ %10, %49 ], [ 0, %51 ]
  %58 = icmp ugt i64 %7, 4611686018427387903
  br i1 %58, label %59, label %61

59:                                               ; preds = %56
  %60 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %60) #14
  unreachable

61:                                               ; preds = %56
  %62 = ashr exact i64 %57, 2
  %63 = icmp ult i64 %62, 2305843009213693951
  br i1 %63, label %64, label %71

64:                                               ; preds = %61
  %65 = ashr exact i64 %57, 1
  %66 = icmp ult i64 %65, %7
  br i1 %66, label %71, label %67

67:                                               ; preds = %64
  %68 = icmp ugt i64 %65, 4611686018427387903
  br i1 %68, label %69, label %71

69:                                               ; preds = %67
  %70 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %70) #14
  unreachable

71:                                               ; preds = %64, %61, %67
  %72 = phi i64 [ %65, %67 ], [ 4611686018427387903, %61 ], [ %7, %64 ]
  %73 = shl i64 %72, 2
  %74 = tail call i8* @_Znwm(i64 %73) #13
  %75 = bitcast i8* %74 to i32*
  %76 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %77 = bitcast i32** %76 to i8**
  store i8* %74, i8** %77, align 8
  %78 = bitcast %"class.std::__1::vector"* %0 to i8**
  store i8* %74, i8** %78, align 8
  %79 = getelementptr inbounds i32, i32* %75, i64 %72
  store i32* %79, i32** %8, align 8
  %80 = bitcast i32** %76 to i64*
  %81 = ptrtoint i8* %74 to i64
  %82 = icmp sgt i64 %6, 0
  br i1 %82, label %83, label %88

83:                                               ; preds = %71
  %84 = lshr exact i64 %6, 2
  %85 = bitcast i32* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %74, i8* align 4 %85, i64 %6, i1 false) #8
  %86 = getelementptr inbounds i32, i32* %75, i64 %84
  %87 = ptrtoint i32* %86 to i64
  br label %88

88:                                               ; preds = %71, %83
  %89 = phi i64 [ %87, %83 ], [ %81, %71 ]
  store i64 %89, i64* %80, align 8
  br label %90

90:                                               ; preds = %45, %47, %88
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl18PassesEncoderState8PassDataD2Ev(%"struct.jxl::PassesEncoderState::PassData"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %0, i64 0, i32 2
  %3 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %0, i64 0, i32 2, i32 2, i32 0, i32 0
  %4 = load %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"** %3, align 8
  %5 = icmp eq %"struct.jxl::HybridUintConfig"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint %"struct.jxl::HybridUintConfig"* %4 to i64
  %8 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %0, i64 0, i32 2, i32 2, i32 0, i32 1
  %9 = bitcast %"struct.jxl::HybridUintConfig"** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast %"struct.jxl::HybridUintConfig"* %4 to i8*
  tail call void @_ZdlPv(i8* %10) #13
  br label %11

11:                                               ; preds = %6, %1
  %12 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %2, i64 0, i32 0, i32 0, i32 0
  %13 = load %"class.std::__1::vector.217"*, %"class.std::__1::vector.217"** %12, align 8
  %14 = icmp eq %"class.std::__1::vector.217"* %13, null
  br i1 %14, label %56, label %15

15:                                               ; preds = %11
  %16 = bitcast %"class.std::__1::vector.217"* %13 to i8*
  %17 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %18 = load %"class.std::__1::vector.217"*, %"class.std::__1::vector.217"** %17, align 8
  %19 = icmp eq %"class.std::__1::vector.217"* %18, %13
  br i1 %19, label %54, label %20

20:                                               ; preds = %15, %49
  %21 = phi %"class.std::__1::vector.217"* [ %22, %49 ], [ %18, %15 ]
  %22 = getelementptr inbounds %"class.std::__1::vector.217", %"class.std::__1::vector.217"* %21, i64 -1
  %23 = getelementptr inbounds %"class.std::__1::vector.217", %"class.std::__1::vector.217"* %22, i64 0, i32 0, i32 0
  %24 = load %"struct.jxl::ANSEncSymbolInfo"*, %"struct.jxl::ANSEncSymbolInfo"** %23, align 8
  %25 = icmp eq %"struct.jxl::ANSEncSymbolInfo"* %24, null
  br i1 %25, label %49, label %26

26:                                               ; preds = %20
  %27 = bitcast %"struct.jxl::ANSEncSymbolInfo"* %24 to i8*
  %28 = getelementptr inbounds %"class.std::__1::vector.217", %"class.std::__1::vector.217"* %21, i64 -1, i32 0, i32 1
  %29 = load %"struct.jxl::ANSEncSymbolInfo"*, %"struct.jxl::ANSEncSymbolInfo"** %28, align 8
  %30 = icmp eq %"struct.jxl::ANSEncSymbolInfo"* %29, %24
  br i1 %30, label %47, label %31

31:                                               ; preds = %26, %42
  %32 = phi %"struct.jxl::ANSEncSymbolInfo"* [ %33, %42 ], [ %29, %26 ]
  %33 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %32, i64 -1
  %34 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %32, i64 -1, i32 2, i32 0, i32 0
  %35 = load i16*, i16** %34, align 8
  %36 = icmp eq i16* %35, null
  br i1 %36, label %42, label %37

37:                                               ; preds = %31
  %38 = ptrtoint i16* %35 to i64
  %39 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %32, i64 -1, i32 2, i32 0, i32 1
  %40 = bitcast i16** %39 to i64*
  store i64 %38, i64* %40, align 8
  %41 = bitcast i16* %35 to i8*
  tail call void @_ZdlPv(i8* %41) #13
  br label %42

42:                                               ; preds = %37, %31
  %43 = icmp eq %"struct.jxl::ANSEncSymbolInfo"* %33, %24
  br i1 %43, label %44, label %31

44:                                               ; preds = %42
  %45 = bitcast %"class.std::__1::vector.217"* %22 to i8**
  %46 = load i8*, i8** %45, align 8
  br label %47

47:                                               ; preds = %44, %26
  %48 = phi i8* [ %46, %44 ], [ %27, %26 ]
  store %"struct.jxl::ANSEncSymbolInfo"* %24, %"struct.jxl::ANSEncSymbolInfo"** %28, align 8
  tail call void @_ZdlPv(i8* %48) #13
  br label %49

49:                                               ; preds = %47, %20
  %50 = icmp eq %"class.std::__1::vector.217"* %22, %13
  br i1 %50, label %51, label %20

51:                                               ; preds = %49
  %52 = bitcast %"struct.jxl::EntropyEncodingData"* %2 to i8**
  %53 = load i8*, i8** %52, align 8
  br label %54

54:                                               ; preds = %51, %15
  %55 = phi i8* [ %53, %51 ], [ %16, %15 ]
  store %"class.std::__1::vector.217"* %13, %"class.std::__1::vector.217"** %17, align 8
  tail call void @_ZdlPv(i8* %55) #13
  br label %56

56:                                               ; preds = %11, %54
  %57 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %0, i64 0, i32 1, i32 0, i32 0
  %58 = load i8*, i8** %57, align 8
  %59 = icmp eq i8* %58, null
  br i1 %59, label %64, label %60

60:                                               ; preds = %56
  %61 = ptrtoint i8* %58 to i64
  %62 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %0, i64 0, i32 1, i32 0, i32 1
  %63 = bitcast i8** %62 to i64*
  store i64 %61, i64* %63, align 8
  tail call void @_ZdlPv(i8* nonnull %58) #13
  br label %64

64:                                               ; preds = %56, %60
  %65 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %0, i64 0, i32 0, i32 0, i32 0
  %66 = load %"class.std::__1::vector.203"*, %"class.std::__1::vector.203"** %65, align 8
  %67 = icmp eq %"class.std::__1::vector.203"* %66, null
  br i1 %67, label %91, label %68

68:                                               ; preds = %64
  %69 = bitcast %"class.std::__1::vector.203"* %66 to i8*
  %70 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %0, i64 0, i32 0, i32 0, i32 1
  %71 = load %"class.std::__1::vector.203"*, %"class.std::__1::vector.203"** %70, align 8
  %72 = icmp eq %"class.std::__1::vector.203"* %71, %66
  br i1 %72, label %89, label %73

73:                                               ; preds = %68, %84
  %74 = phi %"class.std::__1::vector.203"* [ %75, %84 ], [ %71, %68 ]
  %75 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %74, i64 -1
  %76 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %75, i64 0, i32 0, i32 0
  %77 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %76, align 8
  %78 = icmp eq %"struct.jxl::Token"* %77, null
  br i1 %78, label %84, label %79

79:                                               ; preds = %73
  %80 = ptrtoint %"struct.jxl::Token"* %77 to i64
  %81 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %74, i64 -1, i32 0, i32 1
  %82 = bitcast %"struct.jxl::Token"** %81 to i64*
  store i64 %80, i64* %82, align 8
  %83 = bitcast %"struct.jxl::Token"* %77 to i8*
  tail call void @_ZdlPv(i8* %83) #13
  br label %84

84:                                               ; preds = %79, %73
  %85 = icmp eq %"class.std::__1::vector.203"* %75, %66
  br i1 %85, label %86, label %73

86:                                               ; preds = %84
  %87 = bitcast %"struct.jxl::PassesEncoderState::PassData"* %0 to i8**
  %88 = load i8*, i8** %87, align 8
  br label %89

89:                                               ; preds = %86, %68
  %90 = phi i8* [ %88, %86 ], [ %69, %68 ]
  store %"class.std::__1::vector.203"* %66, %"class.std::__1::vector.203"** %70, align 8
  tail call void @_ZdlPv(i8* %90) #13
  br label %91

91:                                               ; preds = %64, %89
  ret void
}

declare void @_ZN3jxl19ColorCorrelationMapC1Emmb(%"struct.jxl::ColorCorrelationMap"*, i64, i64, i1 zeroext) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl13QuantEncodingENS_9allocatorIS2_EEEC2EmRKS2_(%"class.std::__1::vector.104"*, i64, %"class.jxl::QuantEncoding"* dereferenceable(560)) unnamed_addr #0 comdat align 2 {
  %4 = bitcast %"class.std::__1::vector.104"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 24, i1 false) #8
  %5 = icmp eq i64 %1, 0
  br i1 %5, label %80, label %6

6:                                                ; preds = %3
  %7 = icmp ugt i64 %1, 32940614417338485
  br i1 %7, label %8, label %10

8:                                                ; preds = %6
  %9 = bitcast %"class.std::__1::vector.104"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %9) #14
  unreachable

10:                                               ; preds = %6
  %11 = mul i64 %1, 560
  %12 = tail call i8* @_Znwm(i64 %11) #13
  %13 = bitcast i8* %12 to %"class.jxl::QuantEncoding"*
  %14 = getelementptr inbounds %"class.std::__1::vector.104", %"class.std::__1::vector.104"* %0, i64 0, i32 0, i32 1
  %15 = bitcast %"class.jxl::QuantEncoding"** %14 to i8**
  store i8* %12, i8** %15, align 8
  %16 = bitcast %"class.std::__1::vector.104"* %0 to i8**
  store i8* %12, i8** %16, align 8
  %17 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %13, i64 %1
  %18 = getelementptr inbounds %"class.std::__1::vector.104", %"class.std::__1::vector.104"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  store %"class.jxl::QuantEncoding"* %17, %"class.jxl::QuantEncoding"** %18, align 8
  %19 = bitcast %"class.jxl::QuantEncoding"** %14 to i64*
  %20 = bitcast %"class.jxl::QuantEncoding"* %2 to i8*
  %21 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %2, i64 0, i32 0, i32 3
  %22 = bitcast %union.anon.108* %21 to %"class.std::__1::vector.118"**
  br label %23

23:                                               ; preds = %75, %10
  %24 = phi %"class.jxl::QuantEncoding"* [ %13, %10 ], [ %76, %75 ]
  %25 = bitcast %"class.jxl::QuantEncoding"* %24 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %25, i8* align 8 %20, i64 553, i1 false) #8
  %26 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %24, i64 0, i32 0, i32 0
  %27 = load i32, i32* %26, align 8
  %28 = icmp eq i32 %27, 7
  br i1 %28, label %29, label %75

29:                                               ; preds = %23
  %30 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %24, i64 0, i32 0, i32 3
  %31 = bitcast %union.anon.108* %30 to %"class.std::__1::vector.118"**
  %32 = load %"class.std::__1::vector.118"*, %"class.std::__1::vector.118"** %31, align 8
  %33 = icmp eq %"class.std::__1::vector.118"* %32, null
  br i1 %33, label %75, label %34

34:                                               ; preds = %29
  %35 = tail call i8* @_Znwm(i64 24) #13
  %36 = load %"class.std::__1::vector.118"*, %"class.std::__1::vector.118"** %22, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %35, i8 0, i64 24, i1 false) #8
  %37 = getelementptr inbounds %"class.std::__1::vector.118", %"class.std::__1::vector.118"* %36, i64 0, i32 0, i32 1
  %38 = bitcast i32** %37 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = bitcast %"class.std::__1::vector.118"* %36 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = sub i64 %39, %41
  %43 = ashr exact i64 %42, 2
  %44 = icmp eq i64 %42, 0
  br i1 %44, label %73, label %45

45:                                               ; preds = %34
  %46 = icmp ugt i64 %43, 4611686018427387903
  br i1 %46, label %47, label %49

47:                                               ; preds = %45
  %48 = bitcast i8* %35 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %48) #14
  unreachable

49:                                               ; preds = %45
  %50 = tail call i8* @_Znwm(i64 %42) #13
  %51 = bitcast i8* %50 to i32*
  %52 = getelementptr inbounds i8, i8* %35, i64 8
  %53 = bitcast i8* %52 to i8**
  store i8* %50, i8** %53, align 8
  %54 = bitcast i8* %35 to i8**
  store i8* %50, i8** %54, align 8
  %55 = getelementptr inbounds i32, i32* %51, i64 %43
  %56 = getelementptr inbounds i8, i8* %35, i64 16
  %57 = bitcast i8* %56 to i32**
  store i32* %55, i32** %57, align 8
  %58 = getelementptr inbounds %"class.std::__1::vector.118", %"class.std::__1::vector.118"* %36, i64 0, i32 0, i32 0
  %59 = load i32*, i32** %58, align 8
  %60 = load i64, i64* %38, align 8
  %61 = bitcast i8* %52 to i64*
  %62 = ptrtoint i8* %50 to i64
  %63 = ptrtoint i32* %59 to i64
  %64 = sub i64 %60, %63
  %65 = icmp sgt i64 %64, 0
  br i1 %65, label %66, label %71

66:                                               ; preds = %49
  %67 = lshr exact i64 %64, 2
  %68 = bitcast i32* %59 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %50, i8* align 4 %68, i64 %64, i1 false) #8
  %69 = getelementptr inbounds i32, i32* %51, i64 %67
  %70 = ptrtoint i32* %69 to i64
  br label %71

71:                                               ; preds = %66, %49
  %72 = phi i64 [ %70, %66 ], [ %62, %49 ]
  store i64 %72, i64* %61, align 8
  br label %73

73:                                               ; preds = %71, %34
  %74 = bitcast %union.anon.108* %30 to i8**
  store i8* %35, i8** %74, align 8
  br label %75

75:                                               ; preds = %73, %29, %23
  %76 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %24, i64 1
  %77 = icmp eq %"class.jxl::QuantEncoding"* %76, %17
  br i1 %77, label %78, label %23

78:                                               ; preds = %75
  %79 = ptrtoint %"class.jxl::QuantEncoding"* %17 to i64
  store i64 %79, i64* %19, align 8
  br label %80

80:                                               ; preds = %3, %78
  ret void
}

declare void @_ZN3jxl26DequantMatricesSetCustomDCEPNS_15DequantMatricesEPKf(%"class.jxl::DequantMatrices"*, float*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(560) %"class.jxl::QuantEncoding"* @_ZN3jxl13QuantEncodingaSERKS0_(%"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"* dereferenceable(560)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 7
  br i1 %5, label %6, label %22

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3
  %8 = bitcast %union.anon.108* %7 to %"class.std::__1::vector.118"**
  %9 = load %"class.std::__1::vector.118"*, %"class.std::__1::vector.118"** %8, align 8
  %10 = icmp eq %"class.std::__1::vector.118"* %9, null
  br i1 %10, label %22, label %11

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.std::__1::vector.118", %"class.std::__1::vector.118"* %9, i64 0, i32 0, i32 0
  %13 = load i32*, i32** %12, align 8
  %14 = icmp eq i32* %13, null
  br i1 %14, label %20, label %15

15:                                               ; preds = %11
  %16 = ptrtoint i32* %13 to i64
  %17 = getelementptr inbounds %"class.std::__1::vector.118", %"class.std::__1::vector.118"* %9, i64 0, i32 0, i32 1
  %18 = bitcast i32** %17 to i64*
  store i64 %16, i64* %18, align 8
  %19 = bitcast i32* %13 to i8*
  tail call void @_ZdlPv(i8* %19) #13
  br label %20

20:                                               ; preds = %11, %15
  %21 = bitcast %"class.std::__1::vector.118"* %9 to i8*
  tail call void @_ZdlPv(i8* %21) #13
  br label %22

22:                                               ; preds = %6, %20, %2
  %23 = bitcast %"class.jxl::QuantEncoding"* %1 to i8*
  %24 = bitcast %"class.jxl::QuantEncoding"* %0 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %24, i8* align 8 %23, i64 553, i1 false)
  %25 = load i32, i32* %3, align 8
  %26 = icmp eq i32 %25, 7
  br i1 %26, label %27, label %75

27:                                               ; preds = %22
  %28 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3
  %29 = bitcast %union.anon.108* %28 to %"class.std::__1::vector.118"**
  %30 = load %"class.std::__1::vector.118"*, %"class.std::__1::vector.118"** %29, align 8
  %31 = icmp eq %"class.std::__1::vector.118"* %30, null
  br i1 %31, label %75, label %32

32:                                               ; preds = %27
  %33 = tail call i8* @_Znwm(i64 24) #13
  %34 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %1, i64 0, i32 0, i32 3
  %35 = bitcast %union.anon.108* %34 to %"class.std::__1::vector.118"**
  %36 = load %"class.std::__1::vector.118"*, %"class.std::__1::vector.118"** %35, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %33, i8 0, i64 24, i1 false) #8
  %37 = getelementptr inbounds %"class.std::__1::vector.118", %"class.std::__1::vector.118"* %36, i64 0, i32 0, i32 1
  %38 = bitcast i32** %37 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = bitcast %"class.std::__1::vector.118"* %36 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = sub i64 %39, %41
  %43 = ashr exact i64 %42, 2
  %44 = icmp eq i64 %42, 0
  br i1 %44, label %73, label %45

45:                                               ; preds = %32
  %46 = icmp ugt i64 %43, 4611686018427387903
  br i1 %46, label %47, label %49

47:                                               ; preds = %45
  %48 = bitcast i8* %33 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %48) #14
  unreachable

49:                                               ; preds = %45
  %50 = tail call i8* @_Znwm(i64 %42) #13
  %51 = bitcast i8* %50 to i32*
  %52 = getelementptr inbounds i8, i8* %33, i64 8
  %53 = bitcast i8* %52 to i8**
  store i8* %50, i8** %53, align 8
  %54 = bitcast i8* %33 to i8**
  store i8* %50, i8** %54, align 8
  %55 = getelementptr inbounds i32, i32* %51, i64 %43
  %56 = getelementptr inbounds i8, i8* %33, i64 16
  %57 = bitcast i8* %56 to i32**
  store i32* %55, i32** %57, align 8
  %58 = getelementptr inbounds %"class.std::__1::vector.118", %"class.std::__1::vector.118"* %36, i64 0, i32 0, i32 0
  %59 = load i32*, i32** %58, align 8
  %60 = load i64, i64* %38, align 8
  %61 = bitcast i8* %52 to i64*
  %62 = ptrtoint i8* %50 to i64
  %63 = ptrtoint i32* %59 to i64
  %64 = sub i64 %60, %63
  %65 = icmp sgt i64 %64, 0
  br i1 %65, label %66, label %71

66:                                               ; preds = %49
  %67 = lshr exact i64 %64, 2
  %68 = bitcast i32* %59 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %50, i8* align 4 %68, i64 %64, i1 false) #8
  %69 = getelementptr inbounds i32, i32* %51, i64 %67
  %70 = ptrtoint i32* %69 to i64
  br label %71

71:                                               ; preds = %66, %49
  %72 = phi i64 [ %70, %66 ], [ %62, %49 ]
  store i64 %72, i64* %61, align 8
  br label %73

73:                                               ; preds = %32, %71
  %74 = bitcast %union.anon.108* %28 to i8**
  store i8* %33, i8** %74, align 8
  br label %75

75:                                               ; preds = %27, %73, %22
  ret %"class.jxl::QuantEncoding"* %0
}

declare void @_ZN3jxl24DequantMatricesSetCustomEPNS_15DequantMatricesERKNSt3__16vectorINS_13QuantEncodingENS2_9allocatorIS4_EEEEPNS_19ModularFrameEncoderE(%"class.jxl::DequantMatrices"*, %"class.std::__1::vector.104"* dereferenceable(24), %"class.jxl::ModularFrameEncoder"*) local_unnamed_addr #1

declare void @_ZN3jxl9QuantizerC1EPKNS_15DequantMatricesEii(%"class.jxl::Quantizer"*, %"class.jxl::DequantMatrices"*, i32, i32) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN3jxl9RunOnPoolINS_10ThreadPool8SkipInitEZNS_17LossyFrameEncoder26ComputeJPEGTranscodingDataERKNS_4jpeg8JPEGDataEPNS_19ModularFrameEncoderEPNS_11FrameHeaderEEUliiE_EEbPS1_jjRKT_RKT0_PKc(%"class.jxl::ThreadPool"*, i32, i32, %"struct.jxl::ThreadPool::SkipInit"* dereferenceable(1), %class.anon.410* dereferenceable(64), i8*) local_unnamed_addr #0 comdat {
  %7 = alloca %"class.jxl::ThreadPool::RunCallState", align 8
  %8 = alloca %"class.jxl::ThreadPool::RunCallState", align 8
  %9 = alloca double, align 8
  %10 = alloca %"class.jxl::ThreadPool", align 8
  %11 = bitcast double* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #8
  store double 0xFFFFFFFFFFFFFFFF, double* %9, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* %5, double* nonnull %9) #8
  %12 = icmp eq %"class.jxl::ThreadPool"* %0, null
  br i1 %12, label %13, label %33

13:                                               ; preds = %6
  %14 = bitcast %"class.jxl::ThreadPool"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %14) #8
  %15 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %10, i64 0, i32 0
  %16 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %10, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %15, align 8
  %17 = bitcast i8** %16 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %10, %"class.jxl::ThreadPool"** %17, align 8
  %18 = icmp ugt i32 %1, %2
  br i1 %18, label %19, label %22

19:                                               ; preds = %13
  %20 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.49, i64 0, i64 0), i32 55, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.50, i64 0, i64 0)) #8
  %21 = call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

22:                                               ; preds = %13
  %23 = icmp eq i32 %1, %2
  br i1 %23, label %31, label %24

24:                                               ; preds = %22
  %25 = bitcast %"class.jxl::ThreadPool::RunCallState"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %25) #8
  %26 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %7, i64 0, i32 0
  %27 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %7, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %26, align 8
  store %class.anon.410* %4, %class.anon.410** %27, align 8
  %28 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %14, i8* nonnull %25, i32 (i8*, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_17LossyFrameEncoder26ComputeJPEGTranscodingDataERKNS_4jpeg8JPEGDataEPNS_19ModularFrameEncoderEPNS_11FrameHeaderEEUliiE_E12CallInitFuncEPvm, void (i8*, i32, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_17LossyFrameEncoder26ComputeJPEGTranscodingDataERKNS_4jpeg8JPEGDataEPNS_19ModularFrameEncoderEPNS_11FrameHeaderEEUliiE_E12CallDataFuncEPvjm, i32 %1, i32 %2) #8
  %29 = icmp ne i32 %28, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %25) #8
  %30 = zext i1 %29 to i32
  br label %31

31:                                               ; preds = %22, %24
  %32 = phi i32 [ %30, %24 ], [ 0, %22 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %14) #8
  br label %51

33:                                               ; preds = %6
  %34 = icmp ugt i32 %1, %2
  br i1 %34, label %35, label %38

35:                                               ; preds = %33
  %36 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.49, i64 0, i64 0), i32 55, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.50, i64 0, i64 0)) #8
  %37 = call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

38:                                               ; preds = %33
  %39 = icmp eq i32 %1, %2
  br i1 %39, label %51, label %40

40:                                               ; preds = %38
  %41 = bitcast %"class.jxl::ThreadPool::RunCallState"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %41) #8
  %42 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %8, i64 0, i32 0
  %43 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %8, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %42, align 8
  store %class.anon.410* %4, %class.anon.410** %43, align 8
  %44 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %0, i64 0, i32 0
  %45 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %44, align 8
  %46 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %0, i64 0, i32 1
  %47 = load i8*, i8** %46, align 8
  %48 = call i32 %45(i8* %47, i8* nonnull %41, i32 (i8*, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_17LossyFrameEncoder26ComputeJPEGTranscodingDataERKNS_4jpeg8JPEGDataEPNS_19ModularFrameEncoderEPNS_11FrameHeaderEEUliiE_E12CallInitFuncEPvm, void (i8*, i32, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_17LossyFrameEncoder26ComputeJPEGTranscodingDataERKNS_4jpeg8JPEGDataEPNS_19ModularFrameEncoderEPNS_11FrameHeaderEEUliiE_E12CallDataFuncEPvjm, i32 %1, i32 %2) #8
  %49 = icmp ne i32 %48, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %41) #8
  %50 = zext i1 %49 to i32
  br label %51

51:                                               ; preds = %40, %38, %31
  %52 = phi i32 [ %32, %31 ], [ %50, %40 ], [ 0, %38 ]
  %53 = load double, double* %9, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* %5, double %53) #8
  %54 = icmp eq i32 %52, 0
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #8
  ret i1 %54
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN3jxl9RunOnPoolINS_10ThreadPool8SkipInitEZNS_17LossyFrameEncoder26ComputeJPEGTranscodingDataERKNS_4jpeg8JPEGDataEPNS_19ModularFrameEncoderEPNS_11FrameHeaderEEUliiE0_EEbPS1_jjRKT_RKT0_PKc(%"class.jxl::ThreadPool"*, i32, i32, %"struct.jxl::ThreadPool::SkipInit"* dereferenceable(1), %class.anon.412* dereferenceable(24), i8*) local_unnamed_addr #0 comdat {
  %7 = alloca %"class.jxl::ThreadPool::RunCallState.430", align 8
  %8 = alloca %"class.jxl::ThreadPool::RunCallState.430", align 8
  %9 = alloca double, align 8
  %10 = alloca %"class.jxl::ThreadPool", align 8
  %11 = bitcast double* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #8
  store double 0xFFFFFFFFFFFFFFFF, double* %9, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* %5, double* nonnull %9) #8
  %12 = icmp eq %"class.jxl::ThreadPool"* %0, null
  br i1 %12, label %13, label %33

13:                                               ; preds = %6
  %14 = bitcast %"class.jxl::ThreadPool"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %14) #8
  %15 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %10, i64 0, i32 0
  %16 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %10, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %15, align 8
  %17 = bitcast i8** %16 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %10, %"class.jxl::ThreadPool"** %17, align 8
  %18 = icmp ugt i32 %1, %2
  br i1 %18, label %19, label %22

19:                                               ; preds = %13
  %20 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.49, i64 0, i64 0), i32 55, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.50, i64 0, i64 0)) #8
  %21 = call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

22:                                               ; preds = %13
  %23 = icmp eq i32 %1, %2
  br i1 %23, label %31, label %24

24:                                               ; preds = %22
  %25 = bitcast %"class.jxl::ThreadPool::RunCallState.430"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %25) #8
  %26 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.430", %"class.jxl::ThreadPool::RunCallState.430"* %7, i64 0, i32 0
  %27 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.430", %"class.jxl::ThreadPool::RunCallState.430"* %7, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %26, align 8
  store %class.anon.412* %4, %class.anon.412** %27, align 8
  %28 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %14, i8* nonnull %25, i32 (i8*, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_17LossyFrameEncoder26ComputeJPEGTranscodingDataERKNS_4jpeg8JPEGDataEPNS_19ModularFrameEncoderEPNS_11FrameHeaderEEUliiE0_E12CallInitFuncEPvm, void (i8*, i32, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_17LossyFrameEncoder26ComputeJPEGTranscodingDataERKNS_4jpeg8JPEGDataEPNS_19ModularFrameEncoderEPNS_11FrameHeaderEEUliiE0_E12CallDataFuncEPvjm, i32 %1, i32 %2) #8
  %29 = icmp ne i32 %28, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %25) #8
  %30 = zext i1 %29 to i32
  br label %31

31:                                               ; preds = %22, %24
  %32 = phi i32 [ %30, %24 ], [ 0, %22 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %14) #8
  br label %51

33:                                               ; preds = %6
  %34 = icmp ugt i32 %1, %2
  br i1 %34, label %35, label %38

35:                                               ; preds = %33
  %36 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.49, i64 0, i64 0), i32 55, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.50, i64 0, i64 0)) #8
  %37 = call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

38:                                               ; preds = %33
  %39 = icmp eq i32 %1, %2
  br i1 %39, label %51, label %40

40:                                               ; preds = %38
  %41 = bitcast %"class.jxl::ThreadPool::RunCallState.430"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %41) #8
  %42 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.430", %"class.jxl::ThreadPool::RunCallState.430"* %8, i64 0, i32 0
  %43 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.430", %"class.jxl::ThreadPool::RunCallState.430"* %8, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %42, align 8
  store %class.anon.412* %4, %class.anon.412** %43, align 8
  %44 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %0, i64 0, i32 0
  %45 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %44, align 8
  %46 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %0, i64 0, i32 1
  %47 = load i8*, i8** %46, align 8
  %48 = call i32 %45(i8* %47, i8* nonnull %41, i32 (i8*, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_17LossyFrameEncoder26ComputeJPEGTranscodingDataERKNS_4jpeg8JPEGDataEPNS_19ModularFrameEncoderEPNS_11FrameHeaderEEUliiE0_E12CallInitFuncEPvm, void (i8*, i32, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_17LossyFrameEncoder26ComputeJPEGTranscodingDataERKNS_4jpeg8JPEGDataEPNS_19ModularFrameEncoderEPNS_11FrameHeaderEEUliiE0_E12CallDataFuncEPvjm, i32 %1, i32 %2) #8
  %49 = icmp ne i32 %48, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %41) #8
  %50 = zext i1 %49 to i32
  br label %51

51:                                               ; preds = %40, %38, %31
  %52 = phi i32 [ %32, %31 ], [ %50, %40 ], [ 0, %38 ]
  %53 = load double, double* %9, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* %5, double %53) #8
  %54 = icmp eq i32 %52, 0
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #8
  ret i1 %54
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl17LossyFrameEncoder21ComputeAllCoeffOrdersERKNS_15FrameDimensionsE(%"class.jxl::LossyFrameEncoder"*, %"struct.jxl::FrameDimensions"* dereferenceable(144)) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.jxl::Rect", align 8
  %4 = getelementptr inbounds %"class.jxl::LossyFrameEncoder", %"class.jxl::LossyFrameEncoder"* %0, i64 0, i32 0
  %5 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %4, align 8
  %6 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %5, i64 0, i32 9
  %7 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %5, i64 0, i32 5, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %5, i64 0, i32 9, i32 0, i32 1
  %10 = bitcast i32** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.std::__1::vector"* %6 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 %11, %13
  %15 = ashr exact i64 %14, 2
  %16 = icmp ugt i64 %8, %15
  %17 = inttoptr i64 %13 to i32*
  br i1 %16, label %18, label %20

18:                                               ; preds = %2
  %19 = sub i64 %8, %15
  tail call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm(%"class.std::__1::vector"* %6, i64 %19) #8
  br label %24

20:                                               ; preds = %2
  %21 = icmp ult i64 %8, %15
  br i1 %21, label %22, label %24

22:                                               ; preds = %20
  %23 = getelementptr inbounds i32, i32* %17, i64 %8
  store i32* %23, i32** %9, align 8
  br label %24

24:                                               ; preds = %18, %20, %22
  %25 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %4, align 8
  %26 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %25, i64 0, i32 5, i32 0, i32 0
  %27 = load i64, i64* %26, align 8
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %33, label %29

29:                                               ; preds = %24
  %30 = bitcast %"class.jxl::Rect"* %3 to i8*
  %31 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %3, i64 0, i32 2
  %32 = bitcast i64* %31 to <2 x i64>*
  br label %34

33:                                               ; preds = %54, %24
  ret void

34:                                               ; preds = %29, %54
  %35 = phi %"struct.jxl::PassesEncoderState"* [ %25, %29 ], [ %72, %54 ]
  %36 = phi i64 [ 0, %29 ], [ %71, %54 ]
  %37 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %35, i64 0, i32 6, i32 7
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 7
  br i1 %39, label %54, label %40

40:                                               ; preds = %34
  %41 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %35, i64 0, i32 0, i32 3
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %30) #8
  %42 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %35, i64 0, i32 0, i32 6, i32 0, i32 0
  %43 = bitcast i32* %42 to <2 x i32>*
  %44 = load <2 x i32>, <2 x i32>* %43, align 8
  %45 = zext <2 x i32> %44 to <2 x i64>
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %30, i8 0, i64 16, i1 false) #8
  store <2 x i64> %45, <2 x i64>* %32, align 8
  %46 = call i32 @_ZN3jxl17ComputeUsedOrdersENS_9SpeedTierERKNS_15AcStrategyImageERKNS_4RectE(i32 %38, %"class.jxl::AcStrategyImage"* dereferenceable(48) %41, %"class.jxl::Rect"* nonnull dereferenceable(32) %3) #8
  %47 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %4, align 8
  %48 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %47, i64 0, i32 9, i32 0, i32 0
  %49 = load i32*, i32** %48, align 8
  %50 = getelementptr inbounds i32, i32* %49, i64 %36
  store i32 %46, i32* %50, align 4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %30) #8
  %51 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %4, align 8
  %52 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %51, i64 0, i32 6, i32 7
  %53 = load i32, i32* %52, align 4
  br label %54

54:                                               ; preds = %34, %40
  %55 = phi i32 [ 7, %34 ], [ %53, %40 ]
  %56 = phi %"struct.jxl::PassesEncoderState"* [ %35, %34 ], [ %51, %40 ]
  %57 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %56, i64 0, i32 3, i32 0, i32 0
  %58 = load %"class.std::__1::unique_ptr.180"*, %"class.std::__1::unique_ptr.180"** %57, align 8
  %59 = getelementptr inbounds %"class.std::__1::unique_ptr.180", %"class.std::__1::unique_ptr.180"* %58, i64 %36, i32 0, i32 0, i32 0
  %60 = load %"class.jxl::ACImage"*, %"class.jxl::ACImage"** %59, align 8
  %61 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %56, i64 0, i32 0, i32 3
  %62 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %56, i64 0, i32 9, i32 0, i32 0
  %63 = load i32*, i32** %62, align 8
  %64 = getelementptr inbounds i32, i32* %63, i64 %36
  %65 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %56, i64 0, i32 0, i32 10
  %66 = load i64, i64* %65, align 8
  %67 = mul i64 %66, %36
  %68 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %56, i64 0, i32 0, i32 11, i32 0, i32 0
  %69 = load i32*, i32** %68, align 8
  %70 = getelementptr inbounds i32, i32* %69, i64 %67
  call void @_ZN3jxl17ComputeCoeffOrderENS_9SpeedTierERKNS_7ACImageERKNS_15AcStrategyImageERKNS_15FrameDimensionsERjPj(i32 %55, %"class.jxl::ACImage"* dereferenceable(8) %60, %"class.jxl::AcStrategyImage"* dereferenceable(48) %61, %"struct.jxl::FrameDimensions"* dereferenceable(144) %1, i32* dereferenceable(4) %64, i32* %70) #8
  %71 = add nuw i64 %36, 1
  %72 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %4, align 8
  %73 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %72, i64 0, i32 5, i32 0, i32 0
  %74 = load i64, i64* %73, align 8
  %75 = icmp ult i64 %71, %74
  br i1 %75, label %34, label %33
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN3jxl9RunOnPoolIZNS_17LossyFrameEncoder26ComputeJPEGTranscodingDataERKNS_4jpeg8JPEGDataEPNS_19ModularFrameEncoderEPNS_11FrameHeaderEEUlmE_ZNS1_26ComputeJPEGTranscodingDataES5_S7_S9_EUliiE1_EEbPNS_10ThreadPoolEjjRKT_RKT0_PKc(%"class.jxl::ThreadPool"*, i32, i32, %class.anon.414* dereferenceable(8), %class.anon.415* dereferenceable(24), i8*) local_unnamed_addr #0 comdat {
  %7 = alloca %"class.jxl::ThreadPool::RunCallState.437", align 8
  %8 = alloca %"class.jxl::ThreadPool::RunCallState.437", align 8
  %9 = alloca double, align 8
  %10 = alloca %"class.jxl::ThreadPool", align 8
  %11 = bitcast double* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #8
  store double 0xFFFFFFFFFFFFFFFF, double* %9, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* %5, double* nonnull %9) #8
  %12 = icmp eq %"class.jxl::ThreadPool"* %0, null
  br i1 %12, label %13, label %30

13:                                               ; preds = %6
  %14 = bitcast %"class.jxl::ThreadPool"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %14) #8
  %15 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %10, i64 0, i32 0
  %16 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %10, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %15, align 8
  %17 = bitcast i8** %16 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %10, %"class.jxl::ThreadPool"** %17, align 8
  %18 = icmp ugt i32 %1, %2
  br i1 %18, label %19, label %22

19:                                               ; preds = %13
  %20 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.49, i64 0, i64 0), i32 55, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.50, i64 0, i64 0)) #8
  %21 = call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

22:                                               ; preds = %13
  %23 = icmp eq i32 %1, %2
  br i1 %23, label %47, label %24

24:                                               ; preds = %22
  %25 = bitcast %"class.jxl::ThreadPool::RunCallState.437"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %25) #8
  %26 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.437", %"class.jxl::ThreadPool::RunCallState.437"* %7, i64 0, i32 0
  %27 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.437", %"class.jxl::ThreadPool::RunCallState.437"* %7, i64 0, i32 1
  store %class.anon.414* %3, %class.anon.414** %26, align 8
  store %class.anon.415* %4, %class.anon.415** %27, align 8
  %28 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %14, i8* nonnull %25, i32 (i8*, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIZNS_17LossyFrameEncoder26ComputeJPEGTranscodingDataERKNS_4jpeg8JPEGDataEPNS_19ModularFrameEncoderEPNS_11FrameHeaderEEUlmE_ZNS2_26ComputeJPEGTranscodingDataES6_S8_SA_EUliiE1_E12CallInitFuncEPvm, void (i8*, i32, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIZNS_17LossyFrameEncoder26ComputeJPEGTranscodingDataERKNS_4jpeg8JPEGDataEPNS_19ModularFrameEncoderEPNS_11FrameHeaderEEUlmE_ZNS2_26ComputeJPEGTranscodingDataES6_S8_SA_EUliiE1_E12CallDataFuncEPvjm, i32 %1, i32 %2) #8
  %29 = icmp ne i32 %28, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %25) #8
  br label %47

30:                                               ; preds = %6
  %31 = icmp ugt i32 %1, %2
  br i1 %31, label %32, label %35

32:                                               ; preds = %30
  %33 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.49, i64 0, i64 0), i32 55, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.50, i64 0, i64 0)) #8
  %34 = call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

35:                                               ; preds = %30
  %36 = icmp eq i32 %1, %2
  br i1 %36, label %51, label %37

37:                                               ; preds = %35
  %38 = bitcast %"class.jxl::ThreadPool::RunCallState.437"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %38) #8
  %39 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.437", %"class.jxl::ThreadPool::RunCallState.437"* %8, i64 0, i32 0
  %40 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.437", %"class.jxl::ThreadPool::RunCallState.437"* %8, i64 0, i32 1
  store %class.anon.414* %3, %class.anon.414** %39, align 8
  store %class.anon.415* %4, %class.anon.415** %40, align 8
  %41 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %0, i64 0, i32 0
  %42 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %41, align 8
  %43 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %0, i64 0, i32 1
  %44 = load i8*, i8** %43, align 8
  %45 = call i32 %42(i8* %44, i8* nonnull %38, i32 (i8*, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIZNS_17LossyFrameEncoder26ComputeJPEGTranscodingDataERKNS_4jpeg8JPEGDataEPNS_19ModularFrameEncoderEPNS_11FrameHeaderEEUlmE_ZNS2_26ComputeJPEGTranscodingDataES6_S8_SA_EUliiE1_E12CallInitFuncEPvm, void (i8*, i32, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIZNS_17LossyFrameEncoder26ComputeJPEGTranscodingDataERKNS_4jpeg8JPEGDataEPNS_19ModularFrameEncoderEPNS_11FrameHeaderEEUlmE_ZNS2_26ComputeJPEGTranscodingDataES6_S8_SA_EUliiE1_E12CallDataFuncEPvjm, i32 %1, i32 %2) #8
  %46 = icmp ne i32 %45, 0
  br label %47

47:                                               ; preds = %24, %22, %37
  %48 = phi i8* [ %38, %37 ], [ %14, %22 ], [ %14, %24 ]
  %49 = phi i1 [ %46, %37 ], [ false, %22 ], [ %29, %24 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %48) #8
  %50 = xor i1 %49, true
  br label %51

51:                                               ; preds = %47, %35
  %52 = phi i1 [ true, %35 ], [ %50, %47 ]
  %53 = load double, double* %9, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* %5, double %53) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #8
  ret i1 %52
}

declare void @_ZN3jxl12CacheAligned4FreeEPKv(i8*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @llvm.assume(i1) #8

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS_10unique_ptrIN3jxl7ACImageENS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE24__emplace_back_slow_pathIJNS1_INS2_8ACImageTIiEENS4_ISC_EEEEEEEvDpOT_(%"class.std::__1::vector.178"*, %"class.std::__1::unique_ptr.402"* dereferenceable(8)) local_unnamed_addr #4 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.178", %"class.std::__1::vector.178"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.std::__1::unique_ptr.180"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.178"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 3
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 2305843009213693951
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.178"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #14
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.178", %"class.std::__1::vector.178"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.std::__1::unique_ptr.180"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 3
  %20 = icmp ult i64 %19, 1152921504606846975
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 2
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 2305843009213693951
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #14
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 2305843009213693951, %14 ]
  %31 = shl i64 %30, 3
  %32 = tail call i8* @_Znwm(i64 %31) #13
  %33 = bitcast i8* %32 to %"class.std::__1::unique_ptr.180"*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %"class.std::__1::unique_ptr.180"* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %"class.std::__1::unique_ptr.180", %"class.std::__1::unique_ptr.180"* %36, i64 %9
  %38 = getelementptr inbounds %"class.std::__1::unique_ptr.180", %"class.std::__1::unique_ptr.180"* %36, i64 %35
  %39 = ptrtoint %"class.std::__1::unique_ptr.180"* %38 to i64
  %40 = getelementptr inbounds %"class.std::__1::unique_ptr.402", %"class.std::__1::unique_ptr.402"* %1, i64 0, i32 0, i32 0, i32 0
  %41 = bitcast %"class.std::__1::unique_ptr.402"* %1 to i64*
  %42 = load i64, i64* %41, align 8
  store %"class.jxl::ACImageT"* null, %"class.jxl::ACImageT"** %40, align 8
  %43 = bitcast %"class.std::__1::unique_ptr.180"* %37 to i64*
  store i64 %42, i64* %43, align 8
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr.180", %"class.std::__1::unique_ptr.180"* %37, i64 1
  %45 = ptrtoint %"class.std::__1::unique_ptr.180"* %44 to i64
  %46 = getelementptr inbounds %"class.std::__1::vector.178", %"class.std::__1::vector.178"* %0, i64 0, i32 0, i32 0
  %47 = load %"class.std::__1::unique_ptr.180"*, %"class.std::__1::unique_ptr.180"** %46, align 8
  %48 = ptrtoint %"class.std::__1::unique_ptr.180"* %47 to i64
  %49 = load %"class.std::__1::unique_ptr.180"*, %"class.std::__1::unique_ptr.180"** %3, align 8
  %50 = icmp eq %"class.std::__1::unique_ptr.180"* %49, %47
  br i1 %50, label %132, label %51

51:                                               ; preds = %34
  %52 = getelementptr %"class.std::__1::unique_ptr.180", %"class.std::__1::unique_ptr.180"* %49, i64 -1, i32 0, i32 0, i32 0
  %53 = ptrtoint %"class.jxl::ACImage"** %52 to i64
  %54 = sub i64 %53, %48
  %55 = lshr i64 %54, 3
  %56 = add nuw nsw i64 %55, 1
  %57 = and i64 %56, 7
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %71, label %59

59:                                               ; preds = %51, %59
  %60 = phi %"class.std::__1::unique_ptr.180"* [ %63, %59 ], [ %37, %51 ]
  %61 = phi %"class.std::__1::unique_ptr.180"* [ %64, %59 ], [ %49, %51 ]
  %62 = phi i64 [ %69, %59 ], [ %57, %51 ]
  %63 = getelementptr inbounds %"class.std::__1::unique_ptr.180", %"class.std::__1::unique_ptr.180"* %60, i64 -1
  %64 = getelementptr inbounds %"class.std::__1::unique_ptr.180", %"class.std::__1::unique_ptr.180"* %61, i64 -1
  %65 = getelementptr inbounds %"class.std::__1::unique_ptr.180", %"class.std::__1::unique_ptr.180"* %64, i64 0, i32 0, i32 0, i32 0
  %66 = bitcast %"class.std::__1::unique_ptr.180"* %64 to i64*
  %67 = load i64, i64* %66, align 8
  store %"class.jxl::ACImage"* null, %"class.jxl::ACImage"** %65, align 8
  %68 = bitcast %"class.std::__1::unique_ptr.180"* %63 to i64*
  store i64 %67, i64* %68, align 8
  %69 = add i64 %62, -1
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %59, !llvm.loop !65

71:                                               ; preds = %59, %51
  %72 = phi %"class.std::__1::unique_ptr.180"* [ undef, %51 ], [ %63, %59 ]
  %73 = phi %"class.std::__1::unique_ptr.180"* [ %37, %51 ], [ %63, %59 ]
  %74 = phi %"class.std::__1::unique_ptr.180"* [ %49, %51 ], [ %64, %59 ]
  %75 = icmp ult i64 %54, 56
  br i1 %75, label %128, label %76

76:                                               ; preds = %71, %76
  %77 = phi %"class.std::__1::unique_ptr.180"* [ %121, %76 ], [ %73, %71 ]
  %78 = phi %"class.std::__1::unique_ptr.180"* [ %122, %76 ], [ %74, %71 ]
  %79 = getelementptr inbounds %"class.std::__1::unique_ptr.180", %"class.std::__1::unique_ptr.180"* %77, i64 -1
  %80 = getelementptr inbounds %"class.std::__1::unique_ptr.180", %"class.std::__1::unique_ptr.180"* %78, i64 -1
  %81 = getelementptr inbounds %"class.std::__1::unique_ptr.180", %"class.std::__1::unique_ptr.180"* %80, i64 0, i32 0, i32 0, i32 0
  %82 = bitcast %"class.std::__1::unique_ptr.180"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  store %"class.jxl::ACImage"* null, %"class.jxl::ACImage"** %81, align 8
  %84 = bitcast %"class.std::__1::unique_ptr.180"* %79 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"class.std::__1::unique_ptr.180", %"class.std::__1::unique_ptr.180"* %77, i64 -2
  %86 = getelementptr inbounds %"class.std::__1::unique_ptr.180", %"class.std::__1::unique_ptr.180"* %78, i64 -2
  %87 = getelementptr inbounds %"class.std::__1::unique_ptr.180", %"class.std::__1::unique_ptr.180"* %86, i64 0, i32 0, i32 0, i32 0
  %88 = bitcast %"class.std::__1::unique_ptr.180"* %86 to i64*
  %89 = load i64, i64* %88, align 8
  store %"class.jxl::ACImage"* null, %"class.jxl::ACImage"** %87, align 8
  %90 = bitcast %"class.std::__1::unique_ptr.180"* %85 to i64*
  store i64 %89, i64* %90, align 8
  %91 = getelementptr inbounds %"class.std::__1::unique_ptr.180", %"class.std::__1::unique_ptr.180"* %77, i64 -3
  %92 = getelementptr inbounds %"class.std::__1::unique_ptr.180", %"class.std::__1::unique_ptr.180"* %78, i64 -3
  %93 = getelementptr inbounds %"class.std::__1::unique_ptr.180", %"class.std::__1::unique_ptr.180"* %92, i64 0, i32 0, i32 0, i32 0
  %94 = bitcast %"class.std::__1::unique_ptr.180"* %92 to i64*
  %95 = load i64, i64* %94, align 8
  store %"class.jxl::ACImage"* null, %"class.jxl::ACImage"** %93, align 8
  %96 = bitcast %"class.std::__1::unique_ptr.180"* %91 to i64*
  store i64 %95, i64* %96, align 8
  %97 = getelementptr inbounds %"class.std::__1::unique_ptr.180", %"class.std::__1::unique_ptr.180"* %77, i64 -4
  %98 = getelementptr inbounds %"class.std::__1::unique_ptr.180", %"class.std::__1::unique_ptr.180"* %78, i64 -4
  %99 = getelementptr inbounds %"class.std::__1::unique_ptr.180", %"class.std::__1::unique_ptr.180"* %98, i64 0, i32 0, i32 0, i32 0
  %100 = bitcast %"class.std::__1::unique_ptr.180"* %98 to i64*
  %101 = load i64, i64* %100, align 8
  store %"class.jxl::ACImage"* null, %"class.jxl::ACImage"** %99, align 8
  %102 = bitcast %"class.std::__1::unique_ptr.180"* %97 to i64*
  store i64 %101, i64* %102, align 8
  %103 = getelementptr inbounds %"class.std::__1::unique_ptr.180", %"class.std::__1::unique_ptr.180"* %77, i64 -5
  %104 = getelementptr inbounds %"class.std::__1::unique_ptr.180", %"class.std::__1::unique_ptr.180"* %78, i64 -5
  %105 = getelementptr inbounds %"class.std::__1::unique_ptr.180", %"class.std::__1::unique_ptr.180"* %104, i64 0, i32 0, i32 0, i32 0
  %106 = bitcast %"class.std::__1::unique_ptr.180"* %104 to i64*
  %107 = load i64, i64* %106, align 8
  store %"class.jxl::ACImage"* null, %"class.jxl::ACImage"** %105, align 8
  %108 = bitcast %"class.std::__1::unique_ptr.180"* %103 to i64*
  store i64 %107, i64* %108, align 8
  %109 = getelementptr inbounds %"class.std::__1::unique_ptr.180", %"class.std::__1::unique_ptr.180"* %77, i64 -6
  %110 = getelementptr inbounds %"class.std::__1::unique_ptr.180", %"class.std::__1::unique_ptr.180"* %78, i64 -6
  %111 = getelementptr inbounds %"class.std::__1::unique_ptr.180", %"class.std::__1::unique_ptr.180"* %110, i64 0, i32 0, i32 0, i32 0
  %112 = bitcast %"class.std::__1::unique_ptr.180"* %110 to i64*
  %113 = load i64, i64* %112, align 8
  store %"class.jxl::ACImage"* null, %"class.jxl::ACImage"** %111, align 8
  %114 = bitcast %"class.std::__1::unique_ptr.180"* %109 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds %"class.std::__1::unique_ptr.180", %"class.std::__1::unique_ptr.180"* %77, i64 -7
  %116 = getelementptr inbounds %"class.std::__1::unique_ptr.180", %"class.std::__1::unique_ptr.180"* %78, i64 -7
  %117 = getelementptr inbounds %"class.std::__1::unique_ptr.180", %"class.std::__1::unique_ptr.180"* %116, i64 0, i32 0, i32 0, i32 0
  %118 = bitcast %"class.std::__1::unique_ptr.180"* %116 to i64*
  %119 = load i64, i64* %118, align 8
  store %"class.jxl::ACImage"* null, %"class.jxl::ACImage"** %117, align 8
  %120 = bitcast %"class.std::__1::unique_ptr.180"* %115 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds %"class.std::__1::unique_ptr.180", %"class.std::__1::unique_ptr.180"* %77, i64 -8
  %122 = getelementptr inbounds %"class.std::__1::unique_ptr.180", %"class.std::__1::unique_ptr.180"* %78, i64 -8
  %123 = getelementptr inbounds %"class.std::__1::unique_ptr.180", %"class.std::__1::unique_ptr.180"* %122, i64 0, i32 0, i32 0, i32 0
  %124 = bitcast %"class.std::__1::unique_ptr.180"* %122 to i64*
  %125 = load i64, i64* %124, align 8
  store %"class.jxl::ACImage"* null, %"class.jxl::ACImage"** %123, align 8
  %126 = bitcast %"class.std::__1::unique_ptr.180"* %121 to i64*
  store i64 %125, i64* %126, align 8
  %127 = icmp eq %"class.std::__1::unique_ptr.180"* %122, %47
  br i1 %127, label %128, label %76

128:                                              ; preds = %76, %71
  %129 = phi %"class.std::__1::unique_ptr.180"* [ %72, %71 ], [ %121, %76 ]
  %130 = load i64, i64* %6, align 8
  %131 = load %"class.std::__1::unique_ptr.180"*, %"class.std::__1::unique_ptr.180"** %3, align 8
  br label %132

132:                                              ; preds = %34, %128
  %133 = phi %"class.std::__1::unique_ptr.180"* [ %131, %128 ], [ %47, %34 ]
  %134 = phi %"class.std::__1::unique_ptr.180"* [ %129, %128 ], [ %37, %34 ]
  %135 = phi i64 [ %130, %128 ], [ %48, %34 ]
  %136 = ptrtoint %"class.std::__1::unique_ptr.180"* %134 to i64
  store i64 %136, i64* %6, align 8
  store i64 %45, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %137 = inttoptr i64 %135 to %"class.std::__1::unique_ptr.180"*
  %138 = icmp eq %"class.std::__1::unique_ptr.180"* %133, %137
  br i1 %138, label %152, label %139

139:                                              ; preds = %132, %150
  %140 = phi %"class.std::__1::unique_ptr.180"* [ %141, %150 ], [ %133, %132 ]
  %141 = getelementptr inbounds %"class.std::__1::unique_ptr.180", %"class.std::__1::unique_ptr.180"* %140, i64 -1
  %142 = getelementptr inbounds %"class.std::__1::unique_ptr.180", %"class.std::__1::unique_ptr.180"* %141, i64 0, i32 0, i32 0, i32 0
  %143 = load %"class.jxl::ACImage"*, %"class.jxl::ACImage"** %142, align 8
  store %"class.jxl::ACImage"* null, %"class.jxl::ACImage"** %142, align 8
  %144 = icmp eq %"class.jxl::ACImage"* %143, null
  br i1 %144, label %150, label %145

145:                                              ; preds = %139
  %146 = bitcast %"class.jxl::ACImage"* %143 to void (%"class.jxl::ACImage"*)***
  %147 = load void (%"class.jxl::ACImage"*)**, void (%"class.jxl::ACImage"*)*** %146, align 8
  %148 = getelementptr inbounds void (%"class.jxl::ACImage"*)*, void (%"class.jxl::ACImage"*)** %147, i64 1
  %149 = load void (%"class.jxl::ACImage"*)*, void (%"class.jxl::ACImage"*)** %148, align 8
  tail call void %149(%"class.jxl::ACImage"* nonnull %143) #8
  br label %150

150:                                              ; preds = %145, %139
  %151 = icmp eq %"class.std::__1::unique_ptr.180"* %141, %137
  br i1 %151, label %152, label %139

152:                                              ; preds = %150, %132
  %153 = icmp eq i64 %135, 0
  br i1 %153, label %156, label %154

154:                                              ; preds = %152
  %155 = inttoptr i64 %135 to i8*
  tail call void @_ZdlPv(i8* %155) #13
  br label %156

156:                                              ; preds = %152, %154
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl8ACImageTIiEC2Emm(%"class.jxl::ACImageT"*, i64, i64) unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.jxl::Image3.289", align 8
  %5 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN3jxl8ACImageTIiEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1
  %7 = bitcast %"class.jxl::Image3.289"* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 96, i1 false) #8
  %8 = bitcast %"class.jxl::Image3.289"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %8) #8
  %9 = getelementptr inbounds %"class.jxl::Image3.289", %"class.jxl::Image3.289"* %4, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %9, i64 %1, i64 %2, i64 4) #8
  %10 = getelementptr inbounds %"class.jxl::Image3.289", %"class.jxl::Image3.289"* %4, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %10, i64 %1, i64 %2, i64 4) #8
  %11 = getelementptr inbounds %"class.jxl::Image3.289", %"class.jxl::Image3.289"* %4, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %11, i64 %1, i64 %2, i64 4) #8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* nonnull align 8 %8, i64 24, i1 false) #8
  %12 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 5
  %13 = getelementptr inbounds %"class.jxl::Image3.289", %"class.jxl::Image3.289"* %4, i64 0, i32 0, i64 0, i32 0, i32 5
  %14 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %13, i64 0, i32 0, i32 0, i32 0
  %15 = bitcast %"class.std::__1::unique_ptr"* %13 to i64*
  %16 = load i64, i64* %15, align 8
  store i8* null, i8** %14, align 8
  %17 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %12, i64 0, i32 0, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = bitcast %"class.std::__1::unique_ptr"* %12 to i64*
  store i64 %16, i64* %19, align 8
  %20 = icmp eq i8* %18, null
  br i1 %20, label %22, label %21

21:                                               ; preds = %3
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %18) #8
  br label %22

22:                                               ; preds = %21, %3
  %23 = getelementptr inbounds %"class.jxl::Image3.289", %"class.jxl::Image3.289"* %4, i64 0, i32 0, i64 1
  %24 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 1
  %25 = bitcast %"class.jxl::Plane.131"* %24 to i8*
  %26 = bitcast %"class.jxl::Plane.131"* %23 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %25, i8* align 8 %26, i64 24, i1 false) #8
  %27 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 1, i32 0, i32 5
  %28 = getelementptr inbounds %"class.jxl::Image3.289", %"class.jxl::Image3.289"* %4, i64 0, i32 0, i64 1, i32 0, i32 5
  %29 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %28, i64 0, i32 0, i32 0, i32 0
  %30 = bitcast %"class.std::__1::unique_ptr"* %28 to i64*
  %31 = load i64, i64* %30, align 8
  store i8* null, i8** %29, align 8
  %32 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %27, i64 0, i32 0, i32 0, i32 0
  %33 = load i8*, i8** %32, align 8
  %34 = bitcast %"class.std::__1::unique_ptr"* %27 to i64*
  store i64 %31, i64* %34, align 8
  %35 = icmp eq i8* %33, null
  br i1 %35, label %37, label %36

36:                                               ; preds = %22
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %33) #8
  br label %37

37:                                               ; preds = %36, %22
  %38 = getelementptr inbounds %"class.jxl::Image3.289", %"class.jxl::Image3.289"* %4, i64 0, i32 0, i64 2
  %39 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 2
  %40 = bitcast %"class.jxl::Plane.131"* %39 to i8*
  %41 = bitcast %"class.jxl::Plane.131"* %38 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 24, i1 false) #8
  %42 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 2, i32 0, i32 5
  %43 = getelementptr inbounds %"class.jxl::Image3.289", %"class.jxl::Image3.289"* %4, i64 0, i32 0, i64 2, i32 0, i32 5
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %43, i64 0, i32 0, i32 0, i32 0
  %45 = bitcast %"class.std::__1::unique_ptr"* %43 to i64*
  %46 = load i64, i64* %45, align 8
  store i8* null, i8** %44, align 8
  %47 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %42, i64 0, i32 0, i32 0, i32 0
  %48 = load i8*, i8** %47, align 8
  %49 = bitcast %"class.std::__1::unique_ptr"* %42 to i64*
  store i64 %46, i64* %49, align 8
  %50 = icmp eq i8* %48, null
  br i1 %50, label %51, label %53

51:                                               ; preds = %37
  %52 = getelementptr inbounds %"class.jxl::Image3.289", %"class.jxl::Image3.289"* %4, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %52, align 8
  br label %59

53:                                               ; preds = %37
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %48) #8
  %54 = getelementptr inbounds %"class.jxl::Image3.289", %"class.jxl::Image3.289"* %4, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %55 = load i8*, i8** %54, align 8
  %56 = getelementptr inbounds %"class.jxl::Image3.289", %"class.jxl::Image3.289"* %4, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %56, align 8
  %57 = icmp eq i8* %55, null
  br i1 %57, label %59, label %58

58:                                               ; preds = %53
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %55) #8
  br label %59

59:                                               ; preds = %51, %58, %53
  %60 = getelementptr inbounds %"class.jxl::Image3.289", %"class.jxl::Image3.289"* %4, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %61 = load i8*, i8** %60, align 8
  store i8* null, i8** %60, align 8
  %62 = icmp eq i8* %61, null
  br i1 %62, label %64, label %63

63:                                               ; preds = %59
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %61) #8
  br label %64

64:                                               ; preds = %63, %59
  %65 = getelementptr inbounds %"class.jxl::Image3.289", %"class.jxl::Image3.289"* %4, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %66 = load i8*, i8** %65, align 8
  store i8* null, i8** %65, align 8
  %67 = icmp eq i8* %66, null
  br i1 %67, label %69, label %68

68:                                               ; preds = %64
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %66) #8
  br label %69

69:                                               ; preds = %64, %68
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %8) #8
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl8ACImageTIiED2Ev(%"class.jxl::ACImageT"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN3jxl8ACImageTIiEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  store i8* null, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %4) #8
  br label %7

7:                                                ; preds = %6, %1
  %8 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  store i8* null, i8** %8, align 8
  %10 = icmp eq i8* %9, null
  br i1 %10, label %12, label %11

11:                                               ; preds = %7
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %9) #8
  br label %12

12:                                               ; preds = %11, %7
  %13 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  store i8* null, i8** %13, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %17, label %16

16:                                               ; preds = %12
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %14) #8
  br label %17

17:                                               ; preds = %12, %16
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl8ACImageTIiED0Ev(%"class.jxl::ACImageT"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN3jxl8ACImageTIiEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  store i8* null, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %4) #8
  br label %7

7:                                                ; preds = %6, %1
  %8 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  store i8* null, i8** %8, align 8
  %10 = icmp eq i8* %9, null
  br i1 %10, label %12, label %11

11:                                               ; preds = %7
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %9) #8
  br label %12

12:                                               ; preds = %11, %7
  %13 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  store i8* null, i8** %13, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %17, label %16

16:                                               ; preds = %12
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %14) #8
  br label %17

17:                                               ; preds = %12, %16
  %18 = bitcast %"class.jxl::ACImageT"* %0 to i8*
  tail call void @_ZdlPv(i8* %18) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3jxl8ACImageTIiE4TypeEv(%"class.jxl::ACImageT"*) unnamed_addr #0 comdat align 2 {
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32* @_ZN3jxl8ACImageTIiE8PlaneRowEmmm(%"class.jxl::ACImageT"*, i64, i64, i64) unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 4
  %6 = load i64, i64* %5, align 8
  %7 = mul i64 %6, %2
  %8 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 %1, i32 0, i32 5, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = ptrtoint i8* %9 to i64
  %11 = and i64 %10, 63
  %12 = icmp eq i64 %11, 0
  tail call void @llvm.assume(i1 %12) #8
  %13 = getelementptr inbounds i8, i8* %9, i64 %7
  %14 = ptrtoint i8* %13 to i64
  %15 = and i64 %14, 63
  %16 = icmp eq i64 %15, 0
  tail call void @llvm.assume(i1 %16) #8
  %17 = bitcast i8* %13 to i32*
  %18 = getelementptr inbounds i32, i32* %17, i64 %3
  ret i32* %18
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32* @_ZNK3jxl8ACImageTIiE8PlaneRowEmmm(%"class.jxl::ACImageT"*, i64, i64, i64) unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 4
  %6 = load i64, i64* %5, align 8
  %7 = mul i64 %6, %2
  %8 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 %1, i32 0, i32 5, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = ptrtoint i8* %9 to i64
  %11 = and i64 %10, 63
  %12 = icmp eq i64 %11, 0
  tail call void @llvm.assume(i1 %12) #8
  %13 = getelementptr inbounds i8, i8* %9, i64 %7
  %14 = ptrtoint i8* %13 to i64
  %15 = and i64 %14, 63
  %16 = icmp eq i64 %15, 0
  tail call void @llvm.assume(i1 %16) #8
  %17 = bitcast i8* %13 to i32*
  %18 = getelementptr inbounds i32, i32* %17, i64 %3
  ret i32* %18
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK3jxl8ACImageTIiE12PixelsPerRowEv(%"class.jxl::ACImageT"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 4
  %3 = load i64, i64* %2, align 8
  %4 = lshr i64 %3, 2
  ret i64 %4
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl8ACImageTIiE8ZeroFillEv(%"class.jxl::ACImageT"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 1
  %3 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 4
  %4 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 0
  %5 = load i32, i32* %2, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %74, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %11

9:                                                ; preds = %11
  %10 = icmp eq i32 %27, 0
  br i1 %10, label %74, label %30

11:                                               ; preds = %11, %7
  %12 = phi i64 [ 0, %7 ], [ %26, %11 ]
  %13 = load i64, i64* %3, align 8
  %14 = mul i64 %13, %12
  %15 = load i8*, i8** %8, align 8
  %16 = ptrtoint i8* %15 to i64
  %17 = and i64 %16, 63
  %18 = icmp eq i64 %17, 0
  tail call void @llvm.assume(i1 %18) #8
  %19 = getelementptr inbounds i8, i8* %15, i64 %14
  %20 = ptrtoint i8* %19 to i64
  %21 = and i64 %20, 63
  %22 = icmp eq i64 %21, 0
  tail call void @llvm.assume(i1 %22) #8
  %23 = load i32, i32* %4, align 8
  %24 = zext i32 %23 to i64
  %25 = shl nuw nsw i64 %24, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 64 %19, i8 0, i64 %25, i1 false) #8
  %26 = add nuw nsw i64 %12, 1
  %27 = load i32, i32* %2, align 4
  %28 = zext i32 %27 to i64
  %29 = icmp ult i64 %26, %28
  br i1 %29, label %11, label %9

30:                                               ; preds = %9
  %31 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %32

32:                                               ; preds = %32, %30
  %33 = phi i64 [ 0, %30 ], [ %47, %32 ]
  %34 = load i64, i64* %3, align 8
  %35 = mul i64 %34, %33
  %36 = load i8*, i8** %31, align 8
  %37 = ptrtoint i8* %36 to i64
  %38 = and i64 %37, 63
  %39 = icmp eq i64 %38, 0
  tail call void @llvm.assume(i1 %39) #8
  %40 = getelementptr inbounds i8, i8* %36, i64 %35
  %41 = ptrtoint i8* %40 to i64
  %42 = and i64 %41, 63
  %43 = icmp eq i64 %42, 0
  tail call void @llvm.assume(i1 %43) #8
  %44 = load i32, i32* %4, align 8
  %45 = zext i32 %44 to i64
  %46 = shl nuw nsw i64 %45, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 64 %40, i8 0, i64 %46, i1 false) #8
  %47 = add nuw nsw i64 %33, 1
  %48 = load i32, i32* %2, align 4
  %49 = zext i32 %48 to i64
  %50 = icmp ult i64 %47, %49
  br i1 %50, label %32, label %51

51:                                               ; preds = %32
  %52 = icmp eq i32 %48, 0
  br i1 %52, label %74, label %53

53:                                               ; preds = %51
  %54 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %55

55:                                               ; preds = %55, %53
  %56 = phi i64 [ 0, %53 ], [ %70, %55 ]
  %57 = load i64, i64* %3, align 8
  %58 = mul i64 %57, %56
  %59 = load i8*, i8** %54, align 8
  %60 = ptrtoint i8* %59 to i64
  %61 = and i64 %60, 63
  %62 = icmp eq i64 %61, 0
  tail call void @llvm.assume(i1 %62) #8
  %63 = getelementptr inbounds i8, i8* %59, i64 %58
  %64 = ptrtoint i8* %63 to i64
  %65 = and i64 %64, 63
  %66 = icmp eq i64 %65, 0
  tail call void @llvm.assume(i1 %66) #8
  %67 = load i32, i32* %4, align 8
  %68 = zext i32 %67 to i64
  %69 = shl nuw nsw i64 %68, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 64 %63, i8 0, i64 %69, i1 false) #8
  %70 = add nuw nsw i64 %56, 1
  %71 = load i32, i32* %2, align 4
  %72 = zext i32 %71 to i64
  %73 = icmp ult i64 %70, %72
  br i1 %73, label %55, label %74

74:                                               ; preds = %55, %1, %9, %51
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl8ACImageTIiE13ZeroFillPlaneEm(%"class.jxl::ACImageT"*, i64) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 %1, i32 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %37, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 %1, i32 0, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %37, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 %1, i32 0, i32 5, i32 0, i32 0, i32 0
  %12 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 %1, i32 0, i32 4
  %13 = load i8*, i8** %11, align 8
  %14 = ptrtoint i8* %13 to i64
  %15 = and i64 %14, 63
  %16 = icmp eq i64 %15, 0
  tail call void @llvm.assume(i1 %16) #8
  %17 = zext i32 %4 to i64
  %18 = shl nuw nsw i64 %17, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 64 %13, i8 0, i64 %18, i1 false) #8
  %19 = load i32, i32* %7, align 4
  %20 = icmp ugt i32 %19, 1
  br i1 %20, label %21, label %37

21:                                               ; preds = %10, %21
  %22 = phi i64 [ %33, %21 ], [ 1, %10 ]
  %23 = load i32, i32* %3, align 8
  %24 = load i8*, i8** %11, align 8
  %25 = load i64, i64* %12, align 8
  %26 = mul i64 %25, %22
  %27 = getelementptr inbounds i8, i8* %24, i64 %26
  %28 = ptrtoint i8* %27 to i64
  %29 = and i64 %28, 63
  %30 = icmp eq i64 %29, 0
  tail call void @llvm.assume(i1 %30) #8
  %31 = zext i32 %23 to i64
  %32 = shl nuw nsw i64 %31, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 64 %27, i8 0, i64 %32, i1 false) #8
  %33 = add nuw nsw i64 %22, 1
  %34 = load i32, i32* %7, align 4
  %35 = zext i32 %34 to i64
  %36 = icmp ult i64 %33, %35
  br i1 %36, label %21, label %37

37:                                               ; preds = %21, %10, %2, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK3jxl8ACImageTIiE7IsEmptyEv(%"class.jxl::ACImageT"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  br label %9

9:                                                ; preds = %5, %1
  %10 = phi i1 [ true, %1 ], [ %8, %5 ]
  ret i1 %10
}

declare void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"*, i64, i64, i64) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIiNS_9allocatorIiEEE6assignIPiEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIiNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector.118"*, i32*, i32*) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint i32* %2 to i64
  %5 = ptrtoint i32* %1 to i64
  %6 = sub i64 %4, %5
  %7 = ashr exact i64 %6, 2
  %8 = getelementptr inbounds %"class.std::__1::vector.118", %"class.std::__1::vector.118"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %9 = bitcast i32** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector.118"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = ashr exact i64 %13, 2
  %15 = icmp ugt i64 %7, %14
  %16 = inttoptr i64 %12 to i32*
  br i1 %15, label %49, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.std::__1::vector.118", %"class.std::__1::vector.118"* %0, i64 0, i32 0, i32 1
  %19 = bitcast i32** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %12
  %22 = ashr exact i64 %21, 2
  %23 = icmp ugt i64 %7, %22
  %24 = getelementptr inbounds i32, i32* %1, i64 %22
  %25 = select i1 %23, i32* %24, i32* %2
  %26 = ptrtoint i32* %25 to i64
  %27 = sub i64 %26, %5
  %28 = ashr exact i64 %27, 2
  %29 = icmp eq i64 %27, 0
  br i1 %29, label %33, label %30

30:                                               ; preds = %17
  %31 = inttoptr i64 %12 to i8*
  %32 = bitcast i32* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %31, i8* align 4 %32, i64 %27, i1 false) #8
  br label %33

33:                                               ; preds = %17, %30
  br i1 %23, label %34, label %47

34:                                               ; preds = %33
  %35 = load i64, i64* %19, align 8
  %36 = sub i64 %4, %26
  %37 = icmp sgt i64 %36, 0
  br i1 %37, label %38, label %45

38:                                               ; preds = %34
  %39 = lshr exact i64 %36, 2
  %40 = inttoptr i64 %35 to i8*
  %41 = bitcast i32* %25 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %40, i8* align 4 %41, i64 %36, i1 false) #8
  %42 = inttoptr i64 %35 to i32*
  %43 = getelementptr inbounds i32, i32* %42, i64 %39
  %44 = ptrtoint i32* %43 to i64
  br label %45

45:                                               ; preds = %34, %38
  %46 = phi i64 [ %44, %38 ], [ %35, %34 ]
  store i64 %46, i64* %19, align 8
  br label %90

47:                                               ; preds = %33
  %48 = getelementptr inbounds i32, i32* %16, i64 %28
  store i32* %48, i32** %18, align 8
  br label %90

49:                                               ; preds = %3
  %50 = icmp eq i64 %12, 0
  br i1 %50, label %56, label %51

51:                                               ; preds = %49
  %52 = getelementptr inbounds %"class.std::__1::vector.118", %"class.std::__1::vector.118"* %0, i64 0, i32 0, i32 1
  %53 = bitcast i32** %52 to i64*
  store i64 %12, i64* %53, align 8
  %54 = inttoptr i64 %12 to i8*
  tail call void @_ZdlPv(i8* %54) #13
  %55 = bitcast %"class.std::__1::vector.118"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %55, i8 0, i64 24, i1 false) #8
  br label %56

56:                                               ; preds = %49, %51
  %57 = phi i64 [ %10, %49 ], [ 0, %51 ]
  %58 = icmp ugt i64 %7, 4611686018427387903
  br i1 %58, label %59, label %61

59:                                               ; preds = %56
  %60 = bitcast %"class.std::__1::vector.118"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %60) #14
  unreachable

61:                                               ; preds = %56
  %62 = ashr exact i64 %57, 2
  %63 = icmp ult i64 %62, 2305843009213693951
  br i1 %63, label %64, label %71

64:                                               ; preds = %61
  %65 = ashr exact i64 %57, 1
  %66 = icmp ult i64 %65, %7
  br i1 %66, label %71, label %67

67:                                               ; preds = %64
  %68 = icmp ugt i64 %65, 4611686018427387903
  br i1 %68, label %69, label %71

69:                                               ; preds = %67
  %70 = bitcast %"class.std::__1::vector.118"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %70) #14
  unreachable

71:                                               ; preds = %64, %61, %67
  %72 = phi i64 [ %65, %67 ], [ 4611686018427387903, %61 ], [ %7, %64 ]
  %73 = shl i64 %72, 2
  %74 = tail call i8* @_Znwm(i64 %73) #13
  %75 = bitcast i8* %74 to i32*
  %76 = getelementptr inbounds %"class.std::__1::vector.118", %"class.std::__1::vector.118"* %0, i64 0, i32 0, i32 1
  %77 = bitcast i32** %76 to i8**
  store i8* %74, i8** %77, align 8
  %78 = bitcast %"class.std::__1::vector.118"* %0 to i8**
  store i8* %74, i8** %78, align 8
  %79 = getelementptr inbounds i32, i32* %75, i64 %72
  store i32* %79, i32** %8, align 8
  %80 = bitcast i32** %76 to i64*
  %81 = ptrtoint i8* %74 to i64
  %82 = icmp sgt i64 %6, 0
  br i1 %82, label %83, label %88

83:                                               ; preds = %71
  %84 = lshr exact i64 %6, 2
  %85 = bitcast i32* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %74, i8* align 4 %85, i64 %6, i1 false) #8
  %86 = getelementptr inbounds i32, i32* %75, i64 %84
  %87 = ptrtoint i32* %86 to i64
  br label %88

88:                                               ; preds = %71, %83
  %89 = phi i64 [ %87, %83 ], [ %81, %71 ]
  store i64 %89, i64* %80, align 8
  br label %90

90:                                               ; preds = %45, %47, %88
  ret void
}

declare void @_ZN3jxl13TraceRunBeginEPKcPd(i8*, double*) local_unnamed_addr #1

declare void @_ZN3jxl11TraceRunEndEPKcd(i8*, double) local_unnamed_addr #1

declare i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3jxl10ThreadPool14ReturnTrueInitEm(i64) #0 comdat align 2 {
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_17LossyFrameEncoder26ComputeJPEGTranscodingDataERKNS_4jpeg8JPEGDataEPNS_19ModularFrameEncoderEPNS_11FrameHeaderEEUliiE_E12CallInitFuncEPvm(i8*, i64) #0 comdat align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #8
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_17LossyFrameEncoder26ComputeJPEGTranscodingDataERKNS_4jpeg8JPEGDataEPNS_19ModularFrameEncoderEPNS_11FrameHeaderEEUliiE_E12CallDataFuncEPvjm(i8*, i32, i64) #0 comdat align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.410**
  %6 = load %class.anon.410*, %class.anon.410** %5, align 8
  %7 = trunc i64 %2 to i32
  tail call void @_ZZN3jxl17LossyFrameEncoder26ComputeJPEGTranscodingDataERKNS_4jpeg8JPEGDataEPNS_19ModularFrameEncoderEPNS_11FrameHeaderEENKUliiE_clEii(%class.anon.410* %6, i32 %1, i32 %7)
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZZN3jxl17LossyFrameEncoder26ComputeJPEGTranscodingDataERKNS_4jpeg8JPEGDataEPNS_19ModularFrameEncoderEPNS_11FrameHeaderEENKUliiE_clEii(%class.anon.410*, i32, i32) local_unnamed_addr #4 comdat align 2 {
  %4 = alloca [257 x i32], align 16
  %5 = sext i32 %1 to i64
  %6 = getelementptr inbounds %class.anon.410, %class.anon.410* %0, i64 0, i32 0
  %7 = load %"class.jxl::Plane.132"**, %"class.jxl::Plane.132"*** %6, align 8
  %8 = load %"class.jxl::Plane.132"*, %"class.jxl::Plane.132"** %7, align 8
  %9 = getelementptr inbounds %"class.jxl::Plane.132", %"class.jxl::Plane.132"* %8, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds %"class.jxl::Plane.132", %"class.jxl::Plane.132"* %8, i64 0, i32 0, i32 4
  %12 = load i64, i64* %11, align 8
  %13 = mul i64 %12, %5
  %14 = getelementptr inbounds i8, i8* %10, i64 %13
  %15 = ptrtoint i8* %14 to i64
  %16 = and i64 %15, 63
  %17 = icmp eq i64 %16, 0
  tail call void @llvm.assume(i1 %17) #8
  %18 = bitcast %class.anon.410* %0 to %"struct.jxl::PlaneBase"***
  %19 = getelementptr inbounds %"class.jxl::Plane.132", %"class.jxl::Plane.132"* %8, i64 0, i32 0, i32 0
  %20 = load i32, i32* %19, align 8
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %32, label %22

22:                                               ; preds = %3
  %23 = shl nsw i64 %5, 3
  %24 = getelementptr inbounds %class.anon.410, %class.anon.410* %0, i64 0, i32 1
  %25 = add nsw i64 %23, 8
  %26 = bitcast [257 x i32]* %4 to i8*
  %27 = getelementptr inbounds %class.anon.410, %class.anon.410* %0, i64 0, i32 2
  %28 = getelementptr inbounds %class.anon.410, %class.anon.410* %0, i64 0, i32 3
  %29 = getelementptr inbounds %class.anon.410, %class.anon.410* %0, i64 0, i32 4
  %30 = getelementptr inbounds %class.anon.410, %class.anon.410* %0, i64 0, i32 6
  %31 = getelementptr inbounds %class.anon.410, %class.anon.410* %0, i64 0, i32 7
  br label %33

32:                                               ; preds = %191, %3
  ret void

33:                                               ; preds = %22, %191
  %34 = phi i64 [ 0, %22 ], [ %42, %191 ]
  %35 = shl i64 %34, 3
  %36 = load %"struct.jxl::FrameDimensions"*, %"struct.jxl::FrameDimensions"** %24, align 8
  %37 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %36, i64 0, i32 9
  %38 = load i64, i64* %37, align 8
  %39 = icmp ult i64 %25, %38
  %40 = select i1 %39, i64 %25, i64 %38
  %41 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %36, i64 0, i32 8
  %42 = add nuw nsw i64 %34, 1
  %43 = shl i64 %42, 3
  %44 = load i64, i64* %41, align 8
  %45 = icmp ult i64 %43, %44
  %46 = select i1 %45, i64 %43, i64 %44
  call void @llvm.lifetime.start.p0i8(i64 1028, i8* nonnull %26) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %26, i8 0, i64 1028, i1 false)
  %47 = icmp ult i64 %23, %40
  br i1 %47, label %49, label %48

48:                                               ; preds = %133, %33
  br label %77

49:                                               ; preds = %33
  %50 = load %class.anon.409*, %class.anon.409** %27, align 8
  %51 = getelementptr inbounds %class.anon.409, %class.anon.409* %50, i64 0, i32 0
  %52 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %51, align 8
  %53 = getelementptr inbounds %class.anon.409, %class.anon.409* %50, i64 0, i32 1
  %54 = load %"struct.std::__1::array.408"*, %"struct.std::__1::array.408"** %53, align 8
  %55 = getelementptr inbounds %"struct.std::__1::array.408", %"struct.std::__1::array.408"* %54, i64 0, i32 0, i64 1
  %56 = load i32, i32* %55, align 4
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %52, i64 0, i32 9, i32 0, i32 0
  %59 = load %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"** %58, align 8
  %60 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %59, i64 %57, i32 6, i32 0, i32 0
  %61 = load i16*, i16** %60, align 8
  %62 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %59, i64 %57, i32 4
  %63 = load i32, i32* %62, align 8
  %64 = zext i32 %63 to i64
  %65 = load i64*, i64** %28, align 8
  %66 = load i64, i64* %65, align 8
  %67 = getelementptr inbounds %"struct.std::__1::array.408", %"struct.std::__1::array.408"* %54, i64 0, i32 0, i64 %66
  %68 = load i32, i32* %67, align 4
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %59, i64 %69, i32 6, i32 0, i32 0
  %71 = load i16*, i16** %70, align 8
  %72 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %59, i64 %69, i32 4
  %73 = load i32, i32* %72, align 8
  %74 = zext i32 %73 to i64
  %75 = icmp ult i64 %35, %46
  %76 = shl i64 %66, 6
  br label %115

77:                                               ; preds = %77, %48
  %78 = phi i64 [ 0, %48 ], [ %113, %77 ]
  %79 = phi i32 [ 0, %48 ], [ %112, %77 ]
  %80 = phi i32 [ 0, %48 ], [ %108, %77 ]
  %81 = phi i32 [ 0, %48 ], [ %111, %77 ]
  %82 = getelementptr inbounds [257 x i32], [257 x i32]* %4, i64 0, i64 %78
  %83 = load i32, i32* %82, align 16
  %84 = add nsw i32 %83, %80
  %85 = icmp sgt i32 %84, %81
  %86 = trunc i64 %78 to i32
  %87 = select i1 %85, i32 %84, i32 %81
  %88 = select i1 %85, i32 %86, i32 %79
  %89 = or i64 %78, 1
  %90 = getelementptr inbounds [257 x i32], [257 x i32]* %4, i64 0, i64 %89
  %91 = load i32, i32* %90, align 4
  %92 = add nsw i32 %91, %84
  %93 = icmp sgt i32 %92, %87
  %94 = trunc i64 %89 to i32
  %95 = select i1 %93, i32 %92, i32 %87
  %96 = select i1 %93, i32 %94, i32 %88
  %97 = or i64 %78, 2
  %98 = getelementptr inbounds [257 x i32], [257 x i32]* %4, i64 0, i64 %97
  %99 = load i32, i32* %98, align 8
  %100 = add nsw i32 %99, %92
  %101 = icmp sgt i32 %100, %95
  %102 = trunc i64 %97 to i32
  %103 = select i1 %101, i32 %100, i32 %95
  %104 = select i1 %101, i32 %102, i32 %96
  %105 = or i64 %78, 3
  %106 = getelementptr inbounds [257 x i32], [257 x i32]* %4, i64 0, i64 %105
  %107 = load i32, i32* %106, align 4
  %108 = add nsw i32 %107, %100
  %109 = icmp sgt i32 %108, %103
  %110 = trunc i64 %105 to i32
  %111 = select i1 %109, i32 %108, i32 %103
  %112 = select i1 %109, i32 %110, i32 %104
  %113 = add nuw nsw i64 %78, 4
  %114 = icmp eq i64 %113, 256
  br i1 %114, label %204, label %77

115:                                              ; preds = %49, %133
  %116 = phi i64 [ %23, %49 ], [ %134, %133 ]
  %117 = shl i64 %116, 6
  %118 = mul i64 %117, %64
  %119 = getelementptr inbounds i16, i16* %61, i64 %118
  %120 = mul i64 %117, %74
  %121 = getelementptr inbounds i16, i16* %71, i64 %120
  br i1 %75, label %122, label %133

122:                                              ; preds = %115
  %123 = load %"class.std::__1::vector.118"*, %"class.std::__1::vector.118"** %29, align 8
  %124 = getelementptr inbounds %"class.std::__1::vector.118", %"class.std::__1::vector.118"* %123, i64 0, i32 0, i32 0
  %125 = load i32*, i32** %124, align 8
  %126 = load float*, float** %30, align 8
  %127 = load float, float* %126, align 4
  %128 = fmul float %127, 8.400000e+01
  %129 = fsub float 1.270000e+02, %128
  br label %130

130:                                              ; preds = %122, %136
  %131 = phi i64 [ %35, %122 ], [ %137, %136 ]
  %132 = shl i64 %131, 6
  br label %139

133:                                              ; preds = %136, %115
  %134 = add nuw i64 %116, 1
  %135 = icmp ult i64 %134, %40
  br i1 %135, label %115, label %48

136:                                              ; preds = %188
  %137 = add nuw i64 %131, 1
  %138 = icmp ult i64 %137, %46
  br i1 %138, label %130, label %133

139:                                              ; preds = %188, %130
  %140 = phi i64 [ 1, %130 ], [ %189, %188 ]
  %141 = add i64 %140, %132
  %142 = getelementptr inbounds i16, i16* %119, i64 %141
  %143 = load i16, i16* %142, align 2
  %144 = sext i16 %143 to i32
  %145 = add nuw nsw i64 %140, %76
  %146 = getelementptr inbounds i32, i32* %125, i64 %145
  %147 = load i32, i32* %146, align 4
  %148 = mul nsw i32 %147, %144
  %149 = sitofp i32 %148 to float
  %150 = fmul float %149, 0x3F40000000000000
  %151 = getelementptr inbounds i16, i16* %121, i64 %141
  %152 = load i16, i16* %151, align 2
  %153 = sitofp i16 %152 to float
  %154 = fmul float %153, 8.400000e+01
  %155 = fmul float %150, %129
  %156 = fadd float %154, %155
  %157 = tail call float @llvm.fabs.f32(float %150) #8
  %158 = fcmp ogt float %157, 0x3E45798EE0000000
  br i1 %158, label %159, label %188

159:                                              ; preds = %139
  %160 = fcmp ogt float %150, 0.000000e+00
  %161 = load float*, float** %31, align 8
  %162 = load float, float* %161, align 4
  %163 = fsub float %156, %162
  %164 = fadd float %156, %162
  %165 = select i1 %160, float %163, float %164
  %166 = select i1 %160, float %164, float %163
  %167 = fdiv float %166, %150
  %168 = fdiv float %165, %150
  %169 = fcmp olt float %168, 0.000000e+00
  %170 = select i1 %169, float 0.000000e+00, float %168
  %171 = fcmp ogt float %167, 2.550000e+02
  %172 = select i1 %171, float 2.550000e+02, float %167
  %173 = fcmp ugt float %170, %172
  br i1 %173, label %188, label %174

174:                                              ; preds = %159
  %175 = tail call float @llvm.ceil.f32(float %170) #8
  %176 = fptosi float %175 to i32
  %177 = sext i32 %176 to i64
  %178 = getelementptr inbounds [257 x i32], [257 x i32]* %4, i64 0, i64 %177
  %179 = load i32, i32* %178, align 4
  %180 = add nsw i32 %179, 1
  store i32 %180, i32* %178, align 4
  %181 = fadd float %172, 1.000000e+00
  %182 = tail call float @llvm.floor.f32(float %181) #8
  %183 = fptosi float %182 to i32
  %184 = sext i32 %183 to i64
  %185 = getelementptr inbounds [257 x i32], [257 x i32]* %4, i64 0, i64 %184
  %186 = load i32, i32* %185, align 4
  %187 = add nsw i32 %186, -1
  store i32 %187, i32* %185, align 4
  br label %188

188:                                              ; preds = %174, %159, %139
  %189 = add nuw nsw i64 %140, 1
  %190 = icmp eq i64 %189, 64
  br i1 %190, label %136, label %139

191:                                              ; preds = %236
  %192 = getelementptr inbounds i8, i8* %14, i64 %34
  %193 = add nsw i32 %237, 1
  %194 = icmp sgt i32 %111, %193
  %195 = trunc i32 %112 to i8
  %196 = add i8 %195, -127
  %197 = select i1 %194, i8 %196, i8 0
  store i8 %197, i8* %192, align 1
  call void @llvm.lifetime.end.p0i8(i64 1028, i8* nonnull %26) #8
  %198 = load %"struct.jxl::PlaneBase"**, %"struct.jxl::PlaneBase"*** %18, align 8
  %199 = load %"struct.jxl::PlaneBase"*, %"struct.jxl::PlaneBase"** %198, align 8
  %200 = getelementptr inbounds %"struct.jxl::PlaneBase", %"struct.jxl::PlaneBase"* %199, i64 0, i32 0
  %201 = load i32, i32* %200, align 8
  %202 = zext i32 %201 to i64
  %203 = icmp ult i64 %42, %202
  br i1 %203, label %33, label %32

204:                                              ; preds = %77, %236
  %205 = phi i64 [ %238, %236 ], [ 0, %77 ]
  %206 = phi i32 [ %237, %236 ], [ 0, %77 ]
  %207 = icmp ult i64 %205, 128
  br i1 %207, label %208, label %212

208:                                              ; preds = %204
  %209 = getelementptr inbounds [257 x i32], [257 x i32]* %4, i64 0, i64 %205
  %210 = load i32, i32* %209, align 16
  %211 = add nsw i32 %210, %206
  br label %212

212:                                              ; preds = %204, %208
  %213 = phi i32 [ %211, %208 ], [ %206, %204 ]
  %214 = or i64 %205, 1
  %215 = icmp ult i64 %214, 128
  br i1 %215, label %216, label %220

216:                                              ; preds = %212
  %217 = getelementptr inbounds [257 x i32], [257 x i32]* %4, i64 0, i64 %214
  %218 = load i32, i32* %217, align 4
  %219 = add nsw i32 %218, %213
  br label %220

220:                                              ; preds = %216, %212
  %221 = phi i32 [ %219, %216 ], [ %213, %212 ]
  %222 = or i64 %205, 2
  %223 = icmp ult i64 %222, 128
  br i1 %223, label %224, label %228

224:                                              ; preds = %220
  %225 = getelementptr inbounds [257 x i32], [257 x i32]* %4, i64 0, i64 %222
  %226 = load i32, i32* %225, align 8
  %227 = add nsw i32 %226, %221
  br label %228

228:                                              ; preds = %224, %220
  %229 = phi i32 [ %227, %224 ], [ %221, %220 ]
  %230 = or i64 %205, 3
  %231 = icmp ult i64 %230, 128
  br i1 %231, label %232, label %236

232:                                              ; preds = %228
  %233 = getelementptr inbounds [257 x i32], [257 x i32]* %4, i64 0, i64 %230
  %234 = load i32, i32* %233, align 4
  %235 = add nsw i32 %234, %229
  br label %236

236:                                              ; preds = %232, %228
  %237 = phi i32 [ %235, %232 ], [ %229, %228 ]
  %238 = add nuw nsw i64 %205, 4
  %239 = icmp eq i64 %238, 256
  br i1 %239, label %191, label %204
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #9

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #9

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #9

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorImNS_9allocatorImEEE8__appendEm(%"class.std::__1::vector.147"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.147", %"class.std::__1::vector.147"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i64** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.147", %"class.std::__1::vector.147"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i64** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 3
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to i64*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds i64, i64* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr i64, i64* %13, i64 %18
  %20 = bitcast i64* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 8
  %25 = and i64 %24, -8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %25, i1 false) #8
  %26 = ptrtoint i64* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.147"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 3
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 2305843009213693951
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.147"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #14
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 3
  %41 = icmp ult i64 %40, 1152921504606846975
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 2
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 2305843009213693951
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #14
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 2305843009213693951, %38 ]
  %52 = shl i64 %51, 3
  %53 = tail call i8* @_Znwm(i64 %52) #13
  %54 = bitcast i8* %53 to i64*
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi i64* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds i64, i64* %57, i64 %33
  %59 = getelementptr inbounds i64, i64* %57, i64 %56
  %60 = getelementptr inbounds i64, i64* %58, i64 %1
  %61 = bitcast i64* %58 to i8*
  %62 = shl i64 %1, 3
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %61, i8 0, i64 %62, i1 false) #8
  %63 = ptrtoint i64* %59 to i64
  %64 = ptrtoint i64* %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector.147", %"class.std::__1::vector.147"* %0, i64 0, i32 0, i32 0
  %66 = load i64*, i64** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint i64* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 3
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds i64, i64* %58, i64 %71
  %73 = ptrtoint i64* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast i64* %72 to i8*
  %77 = bitcast i64* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %76, i8* align 8 %77, i64 %69, i1 false) #8
  %78 = load i64*, i64** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi i64* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq i64* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast i64* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #13
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctlz.i64(i64, i1 immarg) #9

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEmRKh(%"class.std::__1::vector.21"*, i64, i8* dereferenceable(1)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.std::__1::vector.21", %"class.std::__1::vector.21"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %5 = bitcast i8** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.std::__1::vector.21", %"class.std::__1::vector.21"* %0, i64 0, i32 0, i32 1
  %8 = bitcast i8** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %6, %9
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %84, label %12

12:                                               ; preds = %3
  %13 = inttoptr i64 %9 to i8*
  %14 = getelementptr inbounds i8, i8* %13, i64 %1
  %15 = icmp eq i64 %1, 0
  br i1 %15, label %82, label %16

16:                                               ; preds = %12
  %17 = icmp ult i64 %1, 32
  br i1 %17, label %18, label %20

18:                                               ; preds = %73, %20, %16
  %19 = phi i8* [ %13, %20 ], [ %13, %16 ], [ %27, %73 ]
  br label %77

20:                                               ; preds = %16
  %21 = getelementptr i8, i8* %2, i64 1
  %22 = icmp ugt i8* %21, %13
  %23 = icmp ugt i8* %14, %2
  %24 = and i1 %22, %23
  br i1 %24, label %18, label %25

25:                                               ; preds = %20
  %26 = and i64 %1, -32
  %27 = getelementptr i8, i8* %13, i64 %26
  %28 = add i64 %26, -32
  %29 = lshr exact i64 %28, 5
  %30 = add nuw nsw i64 %29, 1
  %31 = and i64 %30, 1
  %32 = icmp eq i64 %28, 0
  br i1 %32, label %60, label %33

33:                                               ; preds = %25
  %34 = sub nuw nsw i64 %30, %31
  %35 = load i8, i8* %2, align 1, !alias.scope !66
  %36 = insertelement <16 x i8> undef, i8 %35, i32 0
  %37 = shufflevector <16 x i8> %36, <16 x i8> undef, <16 x i32> zeroinitializer
  %38 = insertelement <16 x i8> undef, i8 %35, i32 0
  %39 = shufflevector <16 x i8> %38, <16 x i8> undef, <16 x i32> zeroinitializer
  %40 = load i8, i8* %2, align 1, !alias.scope !66
  %41 = insertelement <16 x i8> undef, i8 %40, i32 0
  %42 = shufflevector <16 x i8> %41, <16 x i8> undef, <16 x i32> zeroinitializer
  %43 = insertelement <16 x i8> undef, i8 %40, i32 0
  %44 = shufflevector <16 x i8> %43, <16 x i8> undef, <16 x i32> zeroinitializer
  br label %45

45:                                               ; preds = %45, %33
  %46 = phi i64 [ 0, %33 ], [ %57, %45 ]
  %47 = phi i64 [ %34, %33 ], [ %58, %45 ]
  %48 = getelementptr i8, i8* %13, i64 %46
  %49 = bitcast i8* %48 to <16 x i8>*
  store <16 x i8> %37, <16 x i8>* %49, align 1, !alias.scope !69, !noalias !66
  %50 = getelementptr i8, i8* %48, i64 16
  %51 = bitcast i8* %50 to <16 x i8>*
  store <16 x i8> %39, <16 x i8>* %51, align 1, !alias.scope !69, !noalias !66
  %52 = or i64 %46, 32
  %53 = getelementptr i8, i8* %13, i64 %52
  %54 = bitcast i8* %53 to <16 x i8>*
  store <16 x i8> %42, <16 x i8>* %54, align 1, !alias.scope !69, !noalias !66
  %55 = getelementptr i8, i8* %53, i64 16
  %56 = bitcast i8* %55 to <16 x i8>*
  store <16 x i8> %44, <16 x i8>* %56, align 1, !alias.scope !69, !noalias !66
  %57 = add i64 %46, 64
  %58 = add i64 %47, -2
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %60, label %45, !llvm.loop !71

60:                                               ; preds = %45, %25
  %61 = phi i64 [ 0, %25 ], [ %57, %45 ]
  %62 = icmp eq i64 %31, 0
  br i1 %62, label %73, label %63

63:                                               ; preds = %60
  %64 = getelementptr i8, i8* %13, i64 %61
  %65 = load i8, i8* %2, align 1, !alias.scope !66
  %66 = insertelement <16 x i8> undef, i8 %65, i32 0
  %67 = shufflevector <16 x i8> %66, <16 x i8> undef, <16 x i32> zeroinitializer
  %68 = insertelement <16 x i8> undef, i8 %65, i32 0
  %69 = shufflevector <16 x i8> %68, <16 x i8> undef, <16 x i32> zeroinitializer
  %70 = bitcast i8* %64 to <16 x i8>*
  store <16 x i8> %67, <16 x i8>* %70, align 1, !alias.scope !69, !noalias !66
  %71 = getelementptr i8, i8* %64, i64 16
  %72 = bitcast i8* %71 to <16 x i8>*
  store <16 x i8> %69, <16 x i8>* %72, align 1, !alias.scope !69, !noalias !66
  br label %73

73:                                               ; preds = %60, %63
  %74 = icmp eq i64 %26, %1
  br i1 %74, label %75, label %18

75:                                               ; preds = %77, %73
  %76 = ptrtoint i8* %14 to i64
  br label %82

77:                                               ; preds = %18, %77
  %78 = phi i8* [ %80, %77 ], [ %19, %18 ]
  %79 = load i8, i8* %2, align 1
  store i8 %79, i8* %78, align 1
  %80 = getelementptr inbounds i8, i8* %78, i64 1
  %81 = icmp eq i8* %80, %14
  br i1 %81, label %75, label %77, !llvm.loop !72

82:                                               ; preds = %12, %75
  %83 = phi i64 [ %76, %75 ], [ %9, %12 ]
  store i64 %83, i64* %8, align 8
  br label %190

84:                                               ; preds = %3
  %85 = bitcast %"class.std::__1::vector.21"* %0 to i64*
  %86 = load i64, i64* %85, align 8
  %87 = sub i64 %9, %86
  %88 = add i64 %87, %1
  %89 = icmp slt i64 %88, 0
  br i1 %89, label %90, label %92

90:                                               ; preds = %84
  %91 = bitcast %"class.std::__1::vector.21"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %91) #14
  unreachable

92:                                               ; preds = %84
  %93 = sub i64 %6, %86
  %94 = icmp ult i64 %93, 4611686018427387903
  br i1 %94, label %95, label %100

95:                                               ; preds = %92
  %96 = shl i64 %93, 1
  %97 = icmp ult i64 %96, %88
  %98 = select i1 %97, i64 %88, i64 %96
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %103, label %100

100:                                              ; preds = %92, %95
  %101 = phi i64 [ %98, %95 ], [ 9223372036854775807, %92 ]
  %102 = tail call i8* @_Znwm(i64 %101) #13
  br label %103

103:                                              ; preds = %95, %100
  %104 = phi i64 [ %101, %100 ], [ 0, %95 ]
  %105 = phi i8* [ %102, %100 ], [ null, %95 ]
  %106 = getelementptr inbounds i8, i8* %105, i64 %87
  %107 = getelementptr inbounds i8, i8* %105, i64 %104
  %108 = getelementptr inbounds i8, i8* %106, i64 %1
  %109 = icmp ult i64 %1, 32
  br i1 %109, label %165, label %110

110:                                              ; preds = %103
  %111 = getelementptr i8, i8* %2, i64 1
  %112 = icmp ult i8* %106, %111
  %113 = icmp ugt i8* %108, %2
  %114 = and i1 %112, %113
  br i1 %114, label %165, label %115

115:                                              ; preds = %110
  %116 = and i64 %1, -32
  %117 = getelementptr i8, i8* %106, i64 %116
  %118 = add i64 %116, -32
  %119 = lshr exact i64 %118, 5
  %120 = add nuw nsw i64 %119, 1
  %121 = and i64 %120, 1
  %122 = icmp eq i64 %118, 0
  br i1 %122, label %150, label %123

123:                                              ; preds = %115
  %124 = sub nuw nsw i64 %120, %121
  %125 = load i8, i8* %2, align 1, !alias.scope !73
  %126 = insertelement <16 x i8> undef, i8 %125, i32 0
  %127 = shufflevector <16 x i8> %126, <16 x i8> undef, <16 x i32> zeroinitializer
  %128 = insertelement <16 x i8> undef, i8 %125, i32 0
  %129 = shufflevector <16 x i8> %128, <16 x i8> undef, <16 x i32> zeroinitializer
  %130 = load i8, i8* %2, align 1, !alias.scope !73
  %131 = insertelement <16 x i8> undef, i8 %130, i32 0
  %132 = shufflevector <16 x i8> %131, <16 x i8> undef, <16 x i32> zeroinitializer
  %133 = insertelement <16 x i8> undef, i8 %130, i32 0
  %134 = shufflevector <16 x i8> %133, <16 x i8> undef, <16 x i32> zeroinitializer
  br label %135

135:                                              ; preds = %135, %123
  %136 = phi i64 [ 0, %123 ], [ %147, %135 ]
  %137 = phi i64 [ %124, %123 ], [ %148, %135 ]
  %138 = getelementptr i8, i8* %106, i64 %136
  %139 = bitcast i8* %138 to <16 x i8>*
  store <16 x i8> %127, <16 x i8>* %139, align 1, !alias.scope !76, !noalias !73
  %140 = getelementptr i8, i8* %138, i64 16
  %141 = bitcast i8* %140 to <16 x i8>*
  store <16 x i8> %129, <16 x i8>* %141, align 1, !alias.scope !76, !noalias !73
  %142 = or i64 %136, 32
  %143 = getelementptr i8, i8* %106, i64 %142
  %144 = bitcast i8* %143 to <16 x i8>*
  store <16 x i8> %132, <16 x i8>* %144, align 1, !alias.scope !76, !noalias !73
  %145 = getelementptr i8, i8* %143, i64 16
  %146 = bitcast i8* %145 to <16 x i8>*
  store <16 x i8> %134, <16 x i8>* %146, align 1, !alias.scope !76, !noalias !73
  %147 = add i64 %136, 64
  %148 = add i64 %137, -2
  %149 = icmp eq i64 %148, 0
  br i1 %149, label %150, label %135, !llvm.loop !78

150:                                              ; preds = %135, %115
  %151 = phi i64 [ 0, %115 ], [ %147, %135 ]
  %152 = icmp eq i64 %121, 0
  br i1 %152, label %163, label %153

153:                                              ; preds = %150
  %154 = getelementptr i8, i8* %106, i64 %151
  %155 = load i8, i8* %2, align 1, !alias.scope !73
  %156 = insertelement <16 x i8> undef, i8 %155, i32 0
  %157 = shufflevector <16 x i8> %156, <16 x i8> undef, <16 x i32> zeroinitializer
  %158 = insertelement <16 x i8> undef, i8 %155, i32 0
  %159 = shufflevector <16 x i8> %158, <16 x i8> undef, <16 x i32> zeroinitializer
  %160 = bitcast i8* %154 to <16 x i8>*
  store <16 x i8> %157, <16 x i8>* %160, align 1, !alias.scope !76, !noalias !73
  %161 = getelementptr i8, i8* %154, i64 16
  %162 = bitcast i8* %161 to <16 x i8>*
  store <16 x i8> %159, <16 x i8>* %162, align 1, !alias.scope !76, !noalias !73
  br label %163

163:                                              ; preds = %150, %153
  %164 = icmp eq i64 %116, %1
  br i1 %164, label %172, label %165

165:                                              ; preds = %163, %110, %103
  %166 = phi i8* [ %106, %110 ], [ %106, %103 ], [ %117, %163 ]
  br label %167

167:                                              ; preds = %165, %167
  %168 = phi i8* [ %170, %167 ], [ %166, %165 ]
  %169 = load i8, i8* %2, align 1
  store i8 %169, i8* %168, align 1
  %170 = getelementptr inbounds i8, i8* %168, i64 1
  %171 = icmp eq i8* %108, %170
  br i1 %171, label %172, label %167, !llvm.loop !79

172:                                              ; preds = %167, %163
  %173 = ptrtoint i8* %107 to i64
  %174 = ptrtoint i8* %108 to i64
  %175 = getelementptr inbounds %"class.std::__1::vector.21", %"class.std::__1::vector.21"* %0, i64 0, i32 0, i32 0
  %176 = load i8*, i8** %175, align 8
  %177 = load i64, i64* %8, align 8
  %178 = ptrtoint i8* %176 to i64
  %179 = sub i64 %177, %178
  %180 = sub i64 0, %179
  %181 = getelementptr inbounds i8, i8* %106, i64 %180
  %182 = ptrtoint i8* %181 to i64
  %183 = icmp sgt i64 %179, 0
  br i1 %183, label %184, label %186

184:                                              ; preds = %172
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %181, i8* align 1 %176, i64 %179, i1 false) #8
  %185 = load i8*, i8** %175, align 8
  br label %186

186:                                              ; preds = %172, %184
  %187 = phi i8* [ %176, %172 ], [ %185, %184 ]
  store i64 %182, i64* %85, align 8
  store i64 %174, i64* %8, align 8
  store i64 %173, i64* %5, align 8
  %188 = icmp eq i8* %187, null
  br i1 %188, label %190, label %189

189:                                              ; preds = %186
  tail call void @_ZdlPv(i8* nonnull %187) #13
  br label %190

190:                                              ; preds = %189, %186, %82
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector.21"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.21", %"class.std::__1::vector.21"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.21", %"class.std::__1::vector.21"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = icmp ult i64 %9, %1
  br i1 %10, label %22, label %11

11:                                               ; preds = %2
  %12 = inttoptr i64 %8 to i8*
  %13 = icmp eq i64 %1, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = sub i64 %1, %8
  %17 = getelementptr i8, i8* %12, i64 %16
  %18 = ptrtoint i8* %17 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 0, i64 %18, i1 false) #8
  %19 = ptrtoint i8* %15 to i64
  br label %20

20:                                               ; preds = %11, %14
  %21 = phi i64 [ %19, %14 ], [ %8, %11 ]
  store i64 %21, i64* %7, align 8
  br label %68

22:                                               ; preds = %2
  %23 = bitcast %"class.std::__1::vector.21"* %0 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %8, %24
  %26 = add i64 %25, %1
  %27 = icmp slt i64 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = bitcast %"class.std::__1::vector.21"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %29) #14
  unreachable

30:                                               ; preds = %22
  %31 = sub i64 %5, %24
  %32 = icmp ult i64 %31, 4611686018427387903
  br i1 %32, label %33, label %38

33:                                               ; preds = %30
  %34 = shl i64 %31, 1
  %35 = icmp ult i64 %34, %26
  %36 = select i1 %35, i64 %26, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %30, %33
  %39 = phi i64 [ %36, %33 ], [ 9223372036854775807, %30 ]
  %40 = tail call i8* @_Znwm(i64 %39) #13
  br label %41

41:                                               ; preds = %38, %33
  %42 = phi i64 [ %39, %38 ], [ 0, %33 ]
  %43 = phi i8* [ %40, %38 ], [ null, %33 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %25
  %45 = ptrtoint i8* %44 to i64
  %46 = getelementptr inbounds i8, i8* %43, i64 %42
  %47 = getelementptr inbounds i8, i8* %44, i64 %1
  %48 = sub i64 %1, %45
  %49 = getelementptr i8, i8* %44, i64 %48
  %50 = ptrtoint i8* %49 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 0, i64 %50, i1 false) #8
  %51 = ptrtoint i8* %46 to i64
  %52 = ptrtoint i8* %47 to i64
  %53 = getelementptr inbounds %"class.std::__1::vector.21", %"class.std::__1::vector.21"* %0, i64 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = load i64, i64* %7, align 8
  %56 = ptrtoint i8* %54 to i64
  %57 = sub i64 %55, %56
  %58 = sub i64 0, %57
  %59 = getelementptr inbounds i8, i8* %44, i64 %58
  %60 = ptrtoint i8* %59 to i64
  %61 = icmp sgt i64 %57, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %41
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %59, i8* align 1 %54, i64 %57, i1 false) #8
  %63 = load i8*, i8** %53, align 8
  br label %64

64:                                               ; preds = %41, %62
  %65 = phi i8* [ %54, %41 ], [ %63, %62 ]
  store i64 %60, i64* %23, align 8
  store i64 %52, i64* %7, align 8
  store i64 %51, i64* %4, align 8
  %66 = icmp eq i8* %65, null
  br i1 %66, label %68, label %67

67:                                               ; preds = %64
  tail call void @_ZdlPv(i8* nonnull %65) #13
  br label %68

68:                                               ; preds = %67, %64, %20
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_17LossyFrameEncoder26ComputeJPEGTranscodingDataERKNS_4jpeg8JPEGDataEPNS_19ModularFrameEncoderEPNS_11FrameHeaderEEUliiE0_E12CallInitFuncEPvm(i8*, i64) #0 comdat align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #8
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_17LossyFrameEncoder26ComputeJPEGTranscodingDataERKNS_4jpeg8JPEGDataEPNS_19ModularFrameEncoderEPNS_11FrameHeaderEEUliiE0_E12CallDataFuncEPvjm(i8*, i32, i64) #0 comdat align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.412**
  %6 = load %class.anon.412*, %class.anon.412** %5, align 8
  %7 = getelementptr inbounds %class.anon.412, %class.anon.412* %6, i64 0, i32 2
  %8 = load %"class.jxl::LossyFrameEncoder"*, %"class.jxl::LossyFrameEncoder"** %7, align 8
  %9 = getelementptr inbounds %class.anon.412, %class.anon.412* %6, i64 0, i32 0
  %10 = load %"class.jxl::ModularFrameEncoder"**, %"class.jxl::ModularFrameEncoder"*** %9, align 8
  %11 = load %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ModularFrameEncoder"** %10, align 8
  %12 = getelementptr inbounds %class.anon.412, %class.anon.412* %6, i64 0, i32 1
  %13 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %12, align 8
  %14 = sext i32 %1 to i64
  %15 = getelementptr inbounds %"class.jxl::LossyFrameEncoder", %"class.jxl::LossyFrameEncoder"* %8, i64 0, i32 0
  %16 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %15, align 8
  tail call void @_ZN3jxl19ModularFrameEncoder11AddVarDCTDCERKNS_6Image3IfEEmbPNS_18PassesEncoderStateE(%"class.jxl::ModularFrameEncoder"* %11, %"class.jxl::Image3"* dereferenceable(96) %13, i64 %14, i1 zeroext false, %"struct.jxl::PassesEncoderState"* %16) #8
  %17 = load %"class.jxl::ModularFrameEncoder"**, %"class.jxl::ModularFrameEncoder"*** %9, align 8
  %18 = load %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ModularFrameEncoder"** %17, align 8
  %19 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %15, align 8
  tail call void @_ZN3jxl19ModularFrameEncoder13AddACMetadataEmbPNS_18PassesEncoderStateE(%"class.jxl::ModularFrameEncoder"* %18, i64 %14, i1 zeroext true, %"struct.jxl::PassesEncoderState"* %19) #8
  ret void
}

declare void @_ZN3jxl19ModularFrameEncoder11AddVarDCTDCERKNS_6Image3IfEEmbPNS_18PassesEncoderStateE(%"class.jxl::ModularFrameEncoder"*, %"class.jxl::Image3"* dereferenceable(96), i64, i1 zeroext, %"struct.jxl::PassesEncoderState"*) local_unnamed_addr #1

declare void @_ZN3jxl19ModularFrameEncoder13AddACMetadataEmbPNS_18PassesEncoderStateE(%"class.jxl::ModularFrameEncoder"*, i64, i1 zeroext, %"struct.jxl::PassesEncoderState"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl18PassesEncoderState8PassDataENS_9allocatorIS3_EEE8__appendEm(%"class.std::__1::vector.199"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.199", %"class.std::__1::vector.199"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"struct.jxl::PassesEncoderState::PassData"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.199", %"class.std::__1::vector.199"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"struct.jxl::PassesEncoderState::PassData"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 152
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %26, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"struct.jxl::PassesEncoderState::PassData"*
  %14 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %13, i64 %1
  %15 = icmp eq i64 %1, 0
  br i1 %15, label %24, label %18

16:                                               ; preds = %18
  %17 = ptrtoint %"struct.jxl::PassesEncoderState::PassData"* %14 to i64
  br label %24

18:                                               ; preds = %12, %18
  %19 = phi %"struct.jxl::PassesEncoderState::PassData"* [ %22, %18 ], [ %13, %12 ]
  %20 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %19, i64 0, i32 2, i32 3
  %21 = bitcast %"struct.jxl::PassesEncoderState::PassData"* %19 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %21, i8 0, i64 152, i1 false) #8
  tail call void @_ZN3jxl10LZ77ParamsC1Ev(%"struct.jxl::LZ77Params"* %20) #8
  %22 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %19, i64 1
  %23 = icmp eq %"struct.jxl::PassesEncoderState::PassData"* %22, %14
  br i1 %23, label %16, label %18

24:                                               ; preds = %12, %16
  %25 = phi i64 [ %17, %16 ], [ %8, %12 ]
  store i64 %25, i64* %7, align 8
  br label %169

26:                                               ; preds = %2
  %27 = bitcast %"class.std::__1::vector.199"* %0 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = sub i64 %8, %28
  %30 = sdiv exact i64 %29, 152
  %31 = add i64 %30, %1
  %32 = icmp ugt i64 %31, 121360158379668102
  br i1 %32, label %33, label %35

33:                                               ; preds = %26
  %34 = bitcast %"class.std::__1::vector.199"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %34) #14
  unreachable

35:                                               ; preds = %26
  %36 = sub i64 %5, %28
  %37 = sdiv exact i64 %36, 152
  %38 = icmp ult i64 %37, 60680079189834051
  br i1 %38, label %39, label %44

39:                                               ; preds = %35
  %40 = shl nsw i64 %37, 1
  %41 = icmp ult i64 %40, %31
  %42 = select i1 %41, i64 %31, i64 %40
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %49, label %44

44:                                               ; preds = %35, %39
  %45 = phi i64 [ %42, %39 ], [ 121360158379668102, %35 ]
  %46 = mul i64 %45, 152
  %47 = tail call i8* @_Znwm(i64 %46) #13
  %48 = bitcast i8* %47 to %"struct.jxl::PassesEncoderState::PassData"*
  br label %49

49:                                               ; preds = %39, %44
  %50 = phi i64 [ %45, %44 ], [ 0, %39 ]
  %51 = phi %"struct.jxl::PassesEncoderState::PassData"* [ %48, %44 ], [ null, %39 ]
  %52 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %51, i64 %30
  %53 = ptrtoint %"struct.jxl::PassesEncoderState::PassData"* %52 to i64
  %54 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %51, i64 %50
  %55 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %52, i64 %1
  br label %56

56:                                               ; preds = %49, %56
  %57 = phi %"struct.jxl::PassesEncoderState::PassData"* [ %61, %56 ], [ %52, %49 ]
  %58 = phi i64 [ %62, %56 ], [ %53, %49 ]
  %59 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %57, i64 0, i32 2, i32 3
  %60 = inttoptr i64 %58 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %60, i8 0, i64 152, i1 false) #8
  tail call void @_ZN3jxl10LZ77ParamsC1Ev(%"struct.jxl::LZ77Params"* %59) #8
  %61 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %57, i64 1
  %62 = ptrtoint %"struct.jxl::PassesEncoderState::PassData"* %61 to i64
  %63 = icmp eq %"struct.jxl::PassesEncoderState::PassData"* %55, %61
  br i1 %63, label %64, label %56

64:                                               ; preds = %56
  %65 = ptrtoint %"struct.jxl::PassesEncoderState::PassData"* %54 to i64
  %66 = ptrtoint %"struct.jxl::PassesEncoderState::PassData"* %55 to i64
  %67 = getelementptr inbounds %"class.std::__1::vector.199", %"class.std::__1::vector.199"* %0, i64 0, i32 0, i32 0
  %68 = load %"struct.jxl::PassesEncoderState::PassData"*, %"struct.jxl::PassesEncoderState::PassData"** %67, align 8
  %69 = load %"struct.jxl::PassesEncoderState::PassData"*, %"struct.jxl::PassesEncoderState::PassData"** %6, align 8
  %70 = icmp eq %"struct.jxl::PassesEncoderState::PassData"* %69, %68
  br i1 %70, label %71, label %73

71:                                               ; preds = %64
  %72 = ptrtoint %"struct.jxl::PassesEncoderState::PassData"* %68 to i64
  br label %155

73:                                               ; preds = %64, %73
  %74 = phi %"struct.jxl::PassesEncoderState::PassData"* [ %76, %73 ], [ %52, %64 ]
  %75 = phi %"struct.jxl::PassesEncoderState::PassData"* [ %77, %73 ], [ %69, %64 ]
  %76 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %74, i64 -1
  %77 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %75, i64 -1
  %78 = bitcast %"struct.jxl::PassesEncoderState::PassData"* %76 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %78, i8 0, i64 24, i1 false) #8
  %79 = bitcast %"struct.jxl::PassesEncoderState::PassData"* %77 to i64*
  %80 = load i64, i64* %79, align 8
  %81 = bitcast %"struct.jxl::PassesEncoderState::PassData"* %76 to i64*
  store i64 %80, i64* %81, align 8
  %82 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %75, i64 -1, i32 0, i32 0, i32 1
  %83 = bitcast %"class.std::__1::vector.203"** %82 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %74, i64 -1, i32 0, i32 0, i32 1
  %86 = bitcast %"class.std::__1::vector.203"** %85 to i64*
  store i64 %84, i64* %86, align 8
  %87 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %75, i64 -1, i32 0, i32 0, i32 2, i32 0, i32 0
  %88 = bitcast %"class.std::__1::vector.203"** %87 to i64*
  %89 = load i64, i64* %88, align 8
  %90 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %74, i64 -1, i32 0, i32 0, i32 2, i32 0, i32 0
  %91 = bitcast %"class.std::__1::vector.203"** %90 to i64*
  store i64 %89, i64* %91, align 8
  %92 = bitcast %"struct.jxl::PassesEncoderState::PassData"* %77 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %92, i8 0, i64 24, i1 false) #8
  %93 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %74, i64 -1, i32 1
  %94 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %75, i64 -1, i32 1
  %95 = bitcast %"class.std::__1::vector.21"* %93 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %95, i8 0, i64 24, i1 false) #8
  %96 = bitcast %"class.std::__1::vector.21"* %94 to i64*
  %97 = load i64, i64* %96, align 8
  %98 = bitcast %"class.std::__1::vector.21"* %93 to i64*
  store i64 %97, i64* %98, align 8
  %99 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %75, i64 -1, i32 1, i32 0, i32 1
  %100 = bitcast i8** %99 to i64*
  %101 = load i64, i64* %100, align 8
  %102 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %74, i64 -1, i32 1, i32 0, i32 1
  %103 = bitcast i8** %102 to i64*
  store i64 %101, i64* %103, align 8
  %104 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %75, i64 -1, i32 1, i32 0, i32 2, i32 0, i32 0
  %105 = bitcast i8** %104 to i64*
  %106 = load i64, i64* %105, align 8
  %107 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %74, i64 -1, i32 1, i32 0, i32 2, i32 0, i32 0
  %108 = bitcast i8** %107 to i64*
  store i64 %106, i64* %108, align 8
  %109 = bitcast %"class.std::__1::vector.21"* %94 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %109, i8 0, i64 24, i1 false) #8
  %110 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %74, i64 -1, i32 2
  %111 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %75, i64 -1, i32 2
  %112 = bitcast %"struct.jxl::EntropyEncodingData"* %110 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 24, i1 false) #8
  %113 = bitcast %"struct.jxl::EntropyEncodingData"* %111 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast %"struct.jxl::EntropyEncodingData"* %110 to i64*
  store i64 %114, i64* %115, align 8
  %116 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %75, i64 -1, i32 2, i32 0, i32 0, i32 1
  %117 = bitcast %"class.std::__1::vector.217"** %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %74, i64 -1, i32 2, i32 0, i32 0, i32 1
  %120 = bitcast %"class.std::__1::vector.217"** %119 to i64*
  store i64 %118, i64* %120, align 8
  %121 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %75, i64 -1, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %122 = bitcast %"class.std::__1::vector.217"** %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %74, i64 -1, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %125 = bitcast %"class.std::__1::vector.217"** %124 to i64*
  store i64 %123, i64* %125, align 8
  %126 = bitcast %"struct.jxl::EntropyEncodingData"* %111 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %126, i8 0, i64 24, i1 false) #8
  %127 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %74, i64 -1, i32 2, i32 1
  %128 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %75, i64 -1, i32 2, i32 1
  %129 = load i8, i8* %128, align 8, !range !2
  store i8 %129, i8* %127, align 8
  %130 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %74, i64 -1, i32 2, i32 2
  %131 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %75, i64 -1, i32 2, i32 2
  %132 = bitcast %"class.std::__1::vector.223"* %130 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %132, i8 0, i64 24, i1 false) #8
  %133 = bitcast %"class.std::__1::vector.223"* %131 to i64*
  %134 = load i64, i64* %133, align 8
  %135 = bitcast %"class.std::__1::vector.223"* %130 to i64*
  store i64 %134, i64* %135, align 8
  %136 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %75, i64 -1, i32 2, i32 2, i32 0, i32 1
  %137 = bitcast %"struct.jxl::HybridUintConfig"** %136 to i64*
  %138 = load i64, i64* %137, align 8
  %139 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %74, i64 -1, i32 2, i32 2, i32 0, i32 1
  %140 = bitcast %"struct.jxl::HybridUintConfig"** %139 to i64*
  store i64 %138, i64* %140, align 8
  %141 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %75, i64 -1, i32 2, i32 2, i32 0, i32 2, i32 0, i32 0
  %142 = bitcast %"struct.jxl::HybridUintConfig"** %141 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %74, i64 -1, i32 2, i32 2, i32 0, i32 2, i32 0, i32 0
  %145 = bitcast %"struct.jxl::HybridUintConfig"** %144 to i64*
  store i64 %143, i64* %145, align 8
  %146 = bitcast %"class.std::__1::vector.223"* %131 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %146, i8 0, i64 24, i1 false) #8
  %147 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %74, i64 -1, i32 2, i32 3, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl10LZ77ParamsE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %147, align 8
  %148 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %74, i64 -1, i32 2, i32 3, i32 1
  %149 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %75, i64 -1, i32 2, i32 3, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %148, i8* align 8 %149, i64 40, i1 false) #8
  %150 = icmp eq %"struct.jxl::PassesEncoderState::PassData"* %77, %68
  br i1 %150, label %151, label %73

151:                                              ; preds = %73
  %152 = ptrtoint %"struct.jxl::PassesEncoderState::PassData"* %76 to i64
  %153 = load i64, i64* %27, align 8
  %154 = load %"struct.jxl::PassesEncoderState::PassData"*, %"struct.jxl::PassesEncoderState::PassData"** %6, align 8
  br label %155

155:                                              ; preds = %71, %151
  %156 = phi %"struct.jxl::PassesEncoderState::PassData"* [ %68, %71 ], [ %154, %151 ]
  %157 = phi i64 [ %53, %71 ], [ %152, %151 ]
  %158 = phi i64 [ %72, %71 ], [ %153, %151 ]
  store i64 %157, i64* %27, align 8
  store i64 %66, i64* %7, align 8
  store i64 %65, i64* %4, align 8
  %159 = inttoptr i64 %158 to %"struct.jxl::PassesEncoderState::PassData"*
  %160 = icmp eq %"struct.jxl::PassesEncoderState::PassData"* %156, %159
  br i1 %160, label %165, label %161

161:                                              ; preds = %155, %161
  %162 = phi %"struct.jxl::PassesEncoderState::PassData"* [ %163, %161 ], [ %156, %155 ]
  %163 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %162, i64 -1
  tail call void @_ZN3jxl18PassesEncoderState8PassDataD2Ev(%"struct.jxl::PassesEncoderState::PassData"* %163) #8
  %164 = icmp eq %"struct.jxl::PassesEncoderState::PassData"* %163, %159
  br i1 %164, label %165, label %161

165:                                              ; preds = %161, %155
  %166 = icmp eq i64 %158, 0
  br i1 %166, label %169, label %167

167:                                              ; preds = %165
  %168 = inttoptr i64 %158 to i8*
  tail call void @_ZdlPv(i8* %168) #13
  br label %169

169:                                              ; preds = %167, %165, %24
  ret void
}

declare void @_ZN3jxl10LZ77ParamsC1Ev(%"struct.jxl::LZ77Params"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS0_IN3jxl5TokenENS_9allocatorIS2_EEEENS3_IS5_EEE8__appendEm(%"class.std::__1::vector.201"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.201", %"class.std::__1::vector.201"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.std::__1::vector.203"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.201", %"class.std::__1::vector.201"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"class.std::__1::vector.203"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 24
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %30, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"class.std::__1::vector.203"*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %28, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %13, i64 %18, i32 0, i32 0
  %20 = bitcast %"struct.jxl::Token"** %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = urem i64 %23, 24
  %25 = add i64 %23, 24
  %26 = sub i64 %25, %24
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %26, i1 false) #8
  %27 = ptrtoint %"class.std::__1::vector.203"* %16 to i64
  br label %28

28:                                               ; preds = %12, %15
  %29 = phi i64 [ %27, %15 ], [ %8, %12 ]
  store i64 %29, i64* %7, align 8
  br label %124

30:                                               ; preds = %2
  %31 = bitcast %"class.std::__1::vector.201"* %0 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = sub i64 %8, %32
  %34 = sdiv exact i64 %33, 24
  %35 = add i64 %34, %1
  %36 = icmp ugt i64 %35, 768614336404564650
  br i1 %36, label %37, label %39

37:                                               ; preds = %30
  %38 = bitcast %"class.std::__1::vector.201"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %38) #14
  unreachable

39:                                               ; preds = %30
  %40 = sub i64 %5, %32
  %41 = sdiv exact i64 %40, 24
  %42 = icmp ult i64 %41, 384307168202282325
  br i1 %42, label %43, label %48

43:                                               ; preds = %39
  %44 = shl nsw i64 %41, 1
  %45 = icmp ult i64 %44, %35
  %46 = select i1 %45, i64 %35, i64 %44
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %53, label %48

48:                                               ; preds = %39, %43
  %49 = phi i64 [ %46, %43 ], [ 768614336404564650, %39 ]
  %50 = mul i64 %49, 24
  %51 = tail call i8* @_Znwm(i64 %50) #13
  %52 = bitcast i8* %51 to %"class.std::__1::vector.203"*
  br label %53

53:                                               ; preds = %43, %48
  %54 = phi i64 [ %49, %48 ], [ 0, %43 ]
  %55 = phi %"class.std::__1::vector.203"* [ %52, %48 ], [ null, %43 ]
  %56 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %55, i64 %34
  %57 = ptrtoint %"class.std::__1::vector.203"* %56 to i64
  %58 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %55, i64 %54
  %59 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %56, i64 %1
  br label %60

60:                                               ; preds = %53, %60
  %61 = phi %"class.std::__1::vector.203"* [ %64, %60 ], [ %56, %53 ]
  %62 = phi i64 [ %65, %60 ], [ %57, %53 ]
  %63 = inttoptr i64 %62 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %63, i8 0, i64 24, i1 false) #8
  %64 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %61, i64 1
  %65 = ptrtoint %"class.std::__1::vector.203"* %64 to i64
  %66 = icmp eq %"class.std::__1::vector.203"* %59, %64
  br i1 %66, label %67, label %60

67:                                               ; preds = %60
  %68 = ptrtoint %"class.std::__1::vector.203"* %58 to i64
  %69 = ptrtoint %"class.std::__1::vector.203"* %59 to i64
  %70 = getelementptr inbounds %"class.std::__1::vector.201", %"class.std::__1::vector.201"* %0, i64 0, i32 0, i32 0
  %71 = load %"class.std::__1::vector.203"*, %"class.std::__1::vector.203"** %70, align 8
  %72 = load %"class.std::__1::vector.203"*, %"class.std::__1::vector.203"** %6, align 8
  %73 = icmp eq %"class.std::__1::vector.203"* %72, %71
  br i1 %73, label %74, label %76

74:                                               ; preds = %67
  %75 = ptrtoint %"class.std::__1::vector.203"* %71 to i64
  br label %101

76:                                               ; preds = %67, %76
  %77 = phi %"class.std::__1::vector.203"* [ %79, %76 ], [ %56, %67 ]
  %78 = phi %"class.std::__1::vector.203"* [ %80, %76 ], [ %72, %67 ]
  %79 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %77, i64 -1
  %80 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %78, i64 -1
  %81 = bitcast %"class.std::__1::vector.203"* %79 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %81, i8 0, i64 24, i1 false) #8
  %82 = bitcast %"class.std::__1::vector.203"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = bitcast %"class.std::__1::vector.203"* %79 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %78, i64 -1, i32 0, i32 1
  %86 = bitcast %"struct.jxl::Token"** %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %77, i64 -1, i32 0, i32 1
  %89 = bitcast %"struct.jxl::Token"** %88 to i64*
  store i64 %87, i64* %89, align 8
  %90 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %78, i64 -1, i32 0, i32 2, i32 0, i32 0
  %91 = bitcast %"struct.jxl::Token"** %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %77, i64 -1, i32 0, i32 2, i32 0, i32 0
  %94 = bitcast %"struct.jxl::Token"** %93 to i64*
  store i64 %92, i64* %94, align 8
  %95 = bitcast %"class.std::__1::vector.203"* %80 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %95, i8 0, i64 24, i1 false) #8
  %96 = icmp eq %"class.std::__1::vector.203"* %80, %71
  br i1 %96, label %97, label %76

97:                                               ; preds = %76
  %98 = ptrtoint %"class.std::__1::vector.203"* %79 to i64
  %99 = load i64, i64* %31, align 8
  %100 = load %"class.std::__1::vector.203"*, %"class.std::__1::vector.203"** %6, align 8
  br label %101

101:                                              ; preds = %74, %97
  %102 = phi %"class.std::__1::vector.203"* [ %71, %74 ], [ %100, %97 ]
  %103 = phi i64 [ %57, %74 ], [ %98, %97 ]
  %104 = phi i64 [ %75, %74 ], [ %99, %97 ]
  store i64 %103, i64* %31, align 8
  store i64 %69, i64* %7, align 8
  store i64 %68, i64* %4, align 8
  %105 = inttoptr i64 %104 to %"class.std::__1::vector.203"*
  %106 = icmp eq %"class.std::__1::vector.203"* %102, %105
  br i1 %106, label %120, label %107

107:                                              ; preds = %101, %118
  %108 = phi %"class.std::__1::vector.203"* [ %109, %118 ], [ %102, %101 ]
  %109 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %108, i64 -1
  %110 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %109, i64 0, i32 0, i32 0
  %111 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %110, align 8
  %112 = icmp eq %"struct.jxl::Token"* %111, null
  br i1 %112, label %118, label %113

113:                                              ; preds = %107
  %114 = ptrtoint %"struct.jxl::Token"* %111 to i64
  %115 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %108, i64 -1, i32 0, i32 1
  %116 = bitcast %"struct.jxl::Token"** %115 to i64*
  store i64 %114, i64* %116, align 8
  %117 = bitcast %"struct.jxl::Token"* %111 to i8*
  tail call void @_ZdlPv(i8* %117) #13
  br label %118

118:                                              ; preds = %113, %107
  %119 = icmp eq %"class.std::__1::vector.203"* %109, %105
  br i1 %119, label %120, label %107

120:                                              ; preds = %118, %101
  %121 = icmp eq i64 %104, 0
  br i1 %121, label %124, label %122

122:                                              ; preds = %120
  %123 = inttoptr i64 %104 to i8*
  tail call void @_ZdlPv(i8* %123) #13
  br label %124

124:                                              ; preds = %122, %120, %28
  ret void
}

declare i32 @_ZN3jxl17ComputeUsedOrdersENS_9SpeedTierERKNS_15AcStrategyImageERKNS_4RectE(i32, %"class.jxl::AcStrategyImage"* dereferenceable(48), %"class.jxl::Rect"* dereferenceable(32)) local_unnamed_addr #1

declare void @_ZN3jxl17ComputeCoeffOrderENS_9SpeedTierERKNS_7ACImageERKNS_15AcStrategyImageERKNS_15FrameDimensionsERjPj(i32, %"class.jxl::ACImage"* dereferenceable(8), %"class.jxl::AcStrategyImage"* dereferenceable(48), %"struct.jxl::FrameDimensions"* dereferenceable(144), i32* dereferenceable(4), i32*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3jxl10ThreadPool12RunCallStateIZNS_17LossyFrameEncoder26ComputeJPEGTranscodingDataERKNS_4jpeg8JPEGDataEPNS_19ModularFrameEncoderEPNS_11FrameHeaderEEUlmE_ZNS2_26ComputeJPEGTranscodingDataES6_S8_SA_EUliiE1_E12CallInitFuncEPvm(i8*, i64) #0 comdat align 2 {
  %3 = bitcast i8* %0 to %class.anon.414**
  %4 = load %class.anon.414*, %class.anon.414** %3, align 8
  %5 = getelementptr inbounds %class.anon.414, %class.anon.414* %4, i64 0, i32 0
  %6 = load %"class.jxl::LossyFrameEncoder"*, %"class.jxl::LossyFrameEncoder"** %5, align 8
  %7 = getelementptr inbounds %"class.jxl::LossyFrameEncoder", %"class.jxl::LossyFrameEncoder"* %6, i64 0, i32 3
  tail call void @_ZNSt3__16vectorIN3jxl8EncCacheENS_9allocatorIS2_EEE6resizeEm(%"class.std::__1::vector.287"* %7, i64 %1) #8
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl10ThreadPool12RunCallStateIZNS_17LossyFrameEncoder26ComputeJPEGTranscodingDataERKNS_4jpeg8JPEGDataEPNS_19ModularFrameEncoderEPNS_11FrameHeaderEEUlmE_ZNS2_26ComputeJPEGTranscodingDataES6_S8_SA_EUliiE1_E12CallDataFuncEPvjm(i8*, i32, i64) #0 comdat align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.415**
  %6 = load %class.anon.415*, %class.anon.415** %5, align 8
  %7 = trunc i64 %2 to i32
  tail call void @_ZZN3jxl17LossyFrameEncoder26ComputeJPEGTranscodingDataERKNS_4jpeg8JPEGDataEPNS_19ModularFrameEncoderEPNS_11FrameHeaderEENKUliiE1_clEii(%class.anon.415* %6, i32 %1, i32 %7)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl8EncCacheENS_9allocatorIS2_EEE6resizeEm(%"class.std::__1::vector.287"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.287", %"class.std::__1::vector.287"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"struct.jxl::EncCache"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.287"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 96
  %10 = icmp ult i64 %9, %1
  %11 = inttoptr i64 %7 to %"struct.jxl::EncCache"*
  %12 = inttoptr i64 %5 to %"struct.jxl::EncCache"*
  br i1 %10, label %13, label %15

13:                                               ; preds = %2
  %14 = sub i64 %1, %9
  tail call void @_ZNSt3__16vectorIN3jxl8EncCacheENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.287"* %0, i64 %14)
  br label %40

15:                                               ; preds = %2
  %16 = icmp ugt i64 %9, %1
  br i1 %16, label %17, label %40

17:                                               ; preds = %15
  %18 = getelementptr inbounds %"struct.jxl::EncCache", %"struct.jxl::EncCache"* %11, i64 %1
  %19 = icmp eq %"struct.jxl::EncCache"* %18, %12
  br i1 %19, label %39, label %20

20:                                               ; preds = %17, %37
  %21 = phi %"struct.jxl::EncCache"* [ %22, %37 ], [ %12, %17 ]
  %22 = getelementptr inbounds %"struct.jxl::EncCache", %"struct.jxl::EncCache"* %21, i64 -1
  %23 = getelementptr inbounds %"struct.jxl::EncCache", %"struct.jxl::EncCache"* %21, i64 -1, i32 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  store i8* null, i8** %23, align 8
  %25 = icmp eq i8* %24, null
  br i1 %25, label %27, label %26

26:                                               ; preds = %20
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %24) #8
  br label %27

27:                                               ; preds = %26, %20
  %28 = getelementptr inbounds %"struct.jxl::EncCache", %"struct.jxl::EncCache"* %21, i64 -1, i32 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %29 = load i8*, i8** %28, align 8
  store i8* null, i8** %28, align 8
  %30 = icmp eq i8* %29, null
  br i1 %30, label %32, label %31

31:                                               ; preds = %27
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %29) #8
  br label %32

32:                                               ; preds = %31, %27
  %33 = getelementptr inbounds %"struct.jxl::EncCache", %"struct.jxl::EncCache"* %21, i64 -1, i32 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %34 = load i8*, i8** %33, align 8
  store i8* null, i8** %33, align 8
  %35 = icmp eq i8* %34, null
  br i1 %35, label %37, label %36

36:                                               ; preds = %32
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %34) #8
  br label %37

37:                                               ; preds = %36, %32
  %38 = icmp eq %"struct.jxl::EncCache"* %22, %18
  br i1 %38, label %39, label %20

39:                                               ; preds = %37, %17
  store %"struct.jxl::EncCache"* %18, %"struct.jxl::EncCache"** %3, align 8
  br label %40

40:                                               ; preds = %15, %39, %13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl8EncCacheENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.287"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"struct.std::__1::__split_buffer.438", align 8
  %4 = getelementptr inbounds %"class.std::__1::vector.287", %"class.std::__1::vector.287"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %5 = bitcast %"struct.jxl::EncCache"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.std::__1::vector.287", %"class.std::__1::vector.287"* %0, i64 0, i32 0, i32 1
  %8 = bitcast %"struct.jxl::EncCache"** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %6, %9
  %11 = sdiv exact i64 %10, 96
  %12 = icmp ult i64 %11, %1
  br i1 %12, label %31, label %13

13:                                               ; preds = %2
  %14 = inttoptr i64 %9 to %"struct.jxl::EncCache"*
  %15 = icmp eq i64 %1, 0
  br i1 %15, label %29, label %16

16:                                               ; preds = %13
  %17 = getelementptr inbounds %"struct.jxl::EncCache", %"struct.jxl::EncCache"* %14, i64 %1
  %18 = inttoptr i64 %9 to i8*
  %19 = add i64 %1, -1
  %20 = getelementptr %"struct.jxl::EncCache", %"struct.jxl::EncCache"* %14, i64 %19, i32 0, i32 0, i64 0, i32 0, i32 0
  %21 = bitcast i32* %20 to i8*
  %22 = sub i64 0, %9
  %23 = getelementptr i8, i8* %21, i64 %22
  %24 = ptrtoint i8* %23 to i64
  %25 = urem i64 %24, 96
  %26 = add i64 %24, 96
  %27 = sub i64 %26, %25
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 %27, i1 false) #8
  %28 = ptrtoint %"struct.jxl::EncCache"* %17 to i64
  br label %29

29:                                               ; preds = %13, %16
  %30 = phi i64 [ %28, %16 ], [ %9, %13 ]
  store i64 %30, i64* %8, align 8
  br label %108

31:                                               ; preds = %2
  %32 = getelementptr inbounds %"class.std::__1::vector.287", %"class.std::__1::vector.287"* %0, i64 0, i32 0, i32 2
  %33 = bitcast %"struct.std::__1::__split_buffer.438"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %33) #8
  %34 = getelementptr inbounds %"struct.std::__1::__split_buffer.438", %"struct.std::__1::__split_buffer.438"* %3, i64 0, i32 0
  %35 = getelementptr inbounds %"struct.std::__1::__split_buffer.438", %"struct.std::__1::__split_buffer.438"* %3, i64 0, i32 1
  %36 = getelementptr inbounds %"struct.std::__1::__split_buffer.438", %"struct.std::__1::__split_buffer.438"* %3, i64 0, i32 2
  %37 = getelementptr inbounds %"struct.std::__1::__split_buffer.438", %"struct.std::__1::__split_buffer.438"* %3, i64 0, i32 3, i32 0, i32 0
  %38 = getelementptr inbounds %"struct.std::__1::__split_buffer.438", %"struct.std::__1::__split_buffer.438"* %3, i64 0, i32 3, i32 1, i32 0
  %39 = bitcast %"class.std::__1::vector.287"* %0 to i64*
  %40 = bitcast %"struct.std::__1::__split_buffer.438"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %40, i8 -86, i64 40, i1 false)
  %41 = load i64, i64* %39, align 8
  %42 = sub i64 %9, %41
  %43 = sdiv exact i64 %42, 96
  %44 = add i64 %43, %1
  %45 = icmp ugt i64 %44, 192153584101141162
  br i1 %45, label %46, label %48

46:                                               ; preds = %31
  %47 = bitcast %"class.std::__1::vector.287"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %47) #14
  unreachable

48:                                               ; preds = %31
  %49 = sub i64 %6, %41
  %50 = sdiv exact i64 %49, 96
  %51 = icmp ult i64 %50, 96076792050570581
  br i1 %51, label %54, label %52

52:                                               ; preds = %48
  store %"struct.jxl::EncCache"* null, %"struct.jxl::EncCache"** %37, align 8
  %53 = bitcast %"class.std::__1::allocator.293"** %38 to %"class.std::__1::__compressed_pair.290"**
  store %"class.std::__1::__compressed_pair.290"* %32, %"class.std::__1::__compressed_pair.290"** %53, align 8
  br label %60

54:                                               ; preds = %48
  %55 = shl nsw i64 %50, 1
  %56 = icmp ult i64 %55, %44
  %57 = select i1 %56, i64 %44, i64 %55
  store %"struct.jxl::EncCache"* null, %"struct.jxl::EncCache"** %37, align 8
  %58 = bitcast %"class.std::__1::allocator.293"** %38 to %"class.std::__1::__compressed_pair.290"**
  store %"class.std::__1::__compressed_pair.290"* %32, %"class.std::__1::__compressed_pair.290"** %58, align 8
  %59 = icmp eq i64 %57, 0
  br i1 %59, label %65, label %60

60:                                               ; preds = %54, %52
  %61 = phi i64 [ 192153584101141162, %52 ], [ %57, %54 ]
  %62 = mul i64 %61, 96
  %63 = tail call i8* @_Znwm(i64 %62) #13
  %64 = bitcast i8* %63 to %"struct.jxl::EncCache"*
  br label %65

65:                                               ; preds = %54, %60
  %66 = phi i64 [ %61, %60 ], [ 0, %54 ]
  %67 = phi %"struct.jxl::EncCache"* [ %64, %60 ], [ null, %54 ]
  store %"struct.jxl::EncCache"* %67, %"struct.jxl::EncCache"** %34, align 8
  %68 = getelementptr inbounds %"struct.jxl::EncCache", %"struct.jxl::EncCache"* %67, i64 %43
  %69 = bitcast %"struct.jxl::EncCache"* %68 to i8*
  store %"struct.jxl::EncCache"* %68, %"struct.jxl::EncCache"** %35, align 8
  %70 = getelementptr inbounds %"struct.jxl::EncCache", %"struct.jxl::EncCache"* %67, i64 %66
  store %"struct.jxl::EncCache"* %70, %"struct.jxl::EncCache"** %37, align 8
  %71 = getelementptr inbounds %"struct.jxl::EncCache", %"struct.jxl::EncCache"* %68, i64 %1
  %72 = mul nsw i64 %1, 96
  %73 = add i64 %72, -96
  %74 = urem i64 %73, 96
  %75 = sub i64 %73, %74
  %76 = add i64 %75, 96
  call void @llvm.memset.p0i8.i64(i8* align 8 %69, i8 0, i64 %76, i1 false)
  %77 = bitcast %"struct.jxl::EncCache"** %36 to i64*
  %78 = ptrtoint %"struct.jxl::EncCache"* %71 to i64
  store i64 %78, i64* %77, align 8
  call void @_ZNSt3__16vectorIN3jxl8EncCacheENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE(%"class.std::__1::vector.287"* %0, %"struct.std::__1::__split_buffer.438"* nonnull dereferenceable(40) %3)
  %79 = load %"struct.jxl::EncCache"*, %"struct.jxl::EncCache"** %35, align 8
  %80 = load %"struct.jxl::EncCache"*, %"struct.jxl::EncCache"** %36, align 8
  %81 = icmp eq %"struct.jxl::EncCache"* %80, %79
  br i1 %81, label %102, label %82

82:                                               ; preds = %65, %99
  %83 = phi %"struct.jxl::EncCache"* [ %100, %99 ], [ %80, %65 ]
  %84 = getelementptr inbounds %"struct.jxl::EncCache", %"struct.jxl::EncCache"* %83, i64 -1
  store %"struct.jxl::EncCache"* %84, %"struct.jxl::EncCache"** %36, align 8
  %85 = getelementptr inbounds %"struct.jxl::EncCache", %"struct.jxl::EncCache"* %83, i64 -1, i32 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %86 = load i8*, i8** %85, align 8
  store i8* null, i8** %85, align 8
  %87 = icmp eq i8* %86, null
  br i1 %87, label %89, label %88

88:                                               ; preds = %82
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %86) #8
  br label %89

89:                                               ; preds = %88, %82
  %90 = getelementptr inbounds %"struct.jxl::EncCache", %"struct.jxl::EncCache"* %83, i64 -1, i32 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %91 = load i8*, i8** %90, align 8
  store i8* null, i8** %90, align 8
  %92 = icmp eq i8* %91, null
  br i1 %92, label %94, label %93

93:                                               ; preds = %89
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %91) #8
  br label %94

94:                                               ; preds = %93, %89
  %95 = getelementptr inbounds %"struct.jxl::EncCache", %"struct.jxl::EncCache"* %83, i64 -1, i32 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %96 = load i8*, i8** %95, align 8
  store i8* null, i8** %95, align 8
  %97 = icmp eq i8* %96, null
  br i1 %97, label %99, label %98

98:                                               ; preds = %94
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %96) #8
  br label %99

99:                                               ; preds = %98, %94
  %100 = load %"struct.jxl::EncCache"*, %"struct.jxl::EncCache"** %36, align 8
  %101 = icmp eq %"struct.jxl::EncCache"* %100, %79
  br i1 %101, label %102, label %82

102:                                              ; preds = %99, %65
  %103 = load %"struct.jxl::EncCache"*, %"struct.jxl::EncCache"** %34, align 8
  %104 = icmp eq %"struct.jxl::EncCache"* %103, null
  br i1 %104, label %107, label %105

105:                                              ; preds = %102
  %106 = bitcast %"struct.jxl::EncCache"* %103 to i8*
  call void @_ZdlPv(i8* %106) #13
  br label %107

107:                                              ; preds = %102, %105
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %33) #8
  br label %108

108:                                              ; preds = %107, %29
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl8EncCacheENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE(%"class.std::__1::vector.287"*, %"struct.std::__1::__split_buffer.438"* dereferenceable(40)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.287", %"class.std::__1::vector.287"* %0, i64 0, i32 0, i32 0
  %4 = load %"struct.jxl::EncCache"*, %"struct.jxl::EncCache"** %3, align 8
  %5 = getelementptr inbounds %"class.std::__1::vector.287", %"class.std::__1::vector.287"* %0, i64 0, i32 0, i32 1
  %6 = load %"struct.jxl::EncCache"*, %"struct.jxl::EncCache"** %5, align 8
  %7 = getelementptr inbounds %"struct.std::__1::__split_buffer.438", %"struct.std::__1::__split_buffer.438"* %1, i64 0, i32 1
  %8 = icmp eq %"struct.jxl::EncCache"* %6, %4
  br i1 %8, label %9, label %14

9:                                                ; preds = %2
  %10 = ptrtoint %"struct.jxl::EncCache"* %4 to i64
  %11 = bitcast %"struct.jxl::EncCache"** %7 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %"class.std::__1::vector.287"* %0 to i64*
  br label %73

14:                                               ; preds = %2
  %15 = load %"struct.jxl::EncCache"*, %"struct.jxl::EncCache"** %7, align 8
  br label %16

16:                                               ; preds = %64, %14
  %17 = phi %"struct.jxl::EncCache"* [ %66, %64 ], [ %15, %14 ]
  %18 = phi %"struct.jxl::EncCache"* [ %20, %64 ], [ %6, %14 ]
  %19 = getelementptr inbounds %"struct.jxl::EncCache", %"struct.jxl::EncCache"* %17, i64 -1
  %20 = getelementptr inbounds %"struct.jxl::EncCache", %"struct.jxl::EncCache"* %18, i64 -1
  %21 = bitcast %"struct.jxl::EncCache"* %19 to i8*
  %22 = bitcast %"struct.jxl::EncCache"* %20 to i8*
  %23 = getelementptr %"struct.jxl::EncCache", %"struct.jxl::EncCache"* %17, i64 -1, i32 0, i32 0, i64 0, i32 0, i32 5
  %24 = bitcast %"class.std::__1::unique_ptr"* %23 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %24, i8 0, i64 72, i1 false) #8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 24, i1 false) #8
  %25 = getelementptr inbounds %"struct.jxl::EncCache", %"struct.jxl::EncCache"* %18, i64 -1, i32 0, i32 0, i64 0, i32 0, i32 5
  %26 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %25, i64 0, i32 0, i32 0, i32 0
  %27 = bitcast %"class.std::__1::unique_ptr"* %25 to i64*
  %28 = load i64, i64* %27, align 8
  store i8* null, i8** %26, align 8
  %29 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %23, i64 0, i32 0, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = bitcast %"class.std::__1::unique_ptr"* %23 to i64*
  store i64 %28, i64* %31, align 8
  %32 = icmp eq i8* %30, null
  br i1 %32, label %34, label %33

33:                                               ; preds = %16
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %30) #8
  br label %34

34:                                               ; preds = %33, %16
  %35 = getelementptr inbounds %"struct.jxl::EncCache", %"struct.jxl::EncCache"* %18, i64 -1, i32 0, i32 0, i64 1
  %36 = getelementptr inbounds %"struct.jxl::EncCache", %"struct.jxl::EncCache"* %17, i64 -1, i32 0, i32 0, i64 1
  %37 = bitcast %"class.jxl::Plane.131"* %36 to i8*
  %38 = bitcast %"class.jxl::Plane.131"* %35 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %38, i64 24, i1 false) #8
  %39 = getelementptr inbounds %"struct.jxl::EncCache", %"struct.jxl::EncCache"* %17, i64 -1, i32 0, i32 0, i64 1, i32 0, i32 5
  %40 = getelementptr inbounds %"struct.jxl::EncCache", %"struct.jxl::EncCache"* %18, i64 -1, i32 0, i32 0, i64 1, i32 0, i32 5
  %41 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %40, i64 0, i32 0, i32 0, i32 0
  %42 = bitcast %"class.std::__1::unique_ptr"* %40 to i64*
  %43 = load i64, i64* %42, align 8
  store i8* null, i8** %41, align 8
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %39, i64 0, i32 0, i32 0, i32 0
  %45 = load i8*, i8** %44, align 8
  %46 = bitcast %"class.std::__1::unique_ptr"* %39 to i64*
  store i64 %43, i64* %46, align 8
  %47 = icmp eq i8* %45, null
  br i1 %47, label %49, label %48

48:                                               ; preds = %34
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %45) #8
  br label %49

49:                                               ; preds = %48, %34
  %50 = getelementptr inbounds %"struct.jxl::EncCache", %"struct.jxl::EncCache"* %18, i64 -1, i32 0, i32 0, i64 2
  %51 = getelementptr inbounds %"struct.jxl::EncCache", %"struct.jxl::EncCache"* %17, i64 -1, i32 0, i32 0, i64 2
  %52 = bitcast %"class.jxl::Plane.131"* %51 to i8*
  %53 = bitcast %"class.jxl::Plane.131"* %50 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %52, i8* align 8 %53, i64 24, i1 false) #8
  %54 = getelementptr inbounds %"struct.jxl::EncCache", %"struct.jxl::EncCache"* %17, i64 -1, i32 0, i32 0, i64 2, i32 0, i32 5
  %55 = getelementptr inbounds %"struct.jxl::EncCache", %"struct.jxl::EncCache"* %18, i64 -1, i32 0, i32 0, i64 2, i32 0, i32 5
  %56 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %55, i64 0, i32 0, i32 0, i32 0
  %57 = bitcast %"class.std::__1::unique_ptr"* %55 to i64*
  %58 = load i64, i64* %57, align 8
  store i8* null, i8** %56, align 8
  %59 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %54, i64 0, i32 0, i32 0, i32 0
  %60 = load i8*, i8** %59, align 8
  %61 = bitcast %"class.std::__1::unique_ptr"* %54 to i64*
  store i64 %58, i64* %61, align 8
  %62 = icmp eq i8* %60, null
  br i1 %62, label %64, label %63

63:                                               ; preds = %49
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %60) #8
  br label %64

64:                                               ; preds = %63, %49
  %65 = load %"struct.jxl::EncCache"*, %"struct.jxl::EncCache"** %7, align 8
  %66 = getelementptr inbounds %"struct.jxl::EncCache", %"struct.jxl::EncCache"* %65, i64 -1
  store %"struct.jxl::EncCache"* %66, %"struct.jxl::EncCache"** %7, align 8
  %67 = icmp eq %"struct.jxl::EncCache"* %20, %4
  br i1 %67, label %68, label %16

68:                                               ; preds = %64
  %69 = ptrtoint %"struct.jxl::EncCache"* %66 to i64
  %70 = bitcast %"class.std::__1::vector.287"* %0 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = bitcast %"struct.jxl::EncCache"** %7 to i64*
  br label %73

73:                                               ; preds = %9, %68
  %74 = phi i64* [ %11, %9 ], [ %72, %68 ]
  %75 = phi i64* [ %13, %9 ], [ %70, %68 ]
  %76 = phi i64 [ %12, %9 ], [ %69, %68 ]
  %77 = phi i64 [ %10, %9 ], [ %71, %68 ]
  store i64 %76, i64* %75, align 8
  store i64 %77, i64* %74, align 8
  %78 = getelementptr inbounds %"struct.std::__1::__split_buffer.438", %"struct.std::__1::__split_buffer.438"* %1, i64 0, i32 2
  %79 = bitcast %"struct.jxl::EncCache"** %5 to i64*
  %80 = load i64, i64* %79, align 8
  %81 = bitcast %"struct.jxl::EncCache"** %78 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %79, align 8
  store i64 %80, i64* %81, align 8
  %83 = getelementptr inbounds %"class.std::__1::vector.287", %"class.std::__1::vector.287"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %84 = getelementptr inbounds %"struct.std::__1::__split_buffer.438", %"struct.std::__1::__split_buffer.438"* %1, i64 0, i32 3, i32 0, i32 0
  %85 = bitcast %"struct.jxl::EncCache"** %83 to i64*
  %86 = load i64, i64* %85, align 8
  %87 = bitcast %"struct.jxl::EncCache"** %84 to i64*
  %88 = load i64, i64* %87, align 8
  store i64 %88, i64* %85, align 8
  store i64 %86, i64* %87, align 8
  %89 = load i64, i64* %74, align 8
  %90 = bitcast %"struct.std::__1::__split_buffer.438"* %1 to i64*
  store i64 %89, i64* %90, align 8
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZZN3jxl17LossyFrameEncoder26ComputeJPEGTranscodingDataERKNS_4jpeg8JPEGDataEPNS_19ModularFrameEncoderEPNS_11FrameHeaderEENKUliiE1_clEii(%class.anon.415*, i32, i32) local_unnamed_addr #4 comdat align 2 {
  %4 = alloca %"class.jxl::Rect", align 8
  %5 = alloca [3 x i32*], align 16
  %6 = alloca %"struct.jxl::YCbCrChromaSubsampling", align 8
  %7 = getelementptr inbounds %class.anon.415, %class.anon.415* %0, i64 0, i32 1
  %8 = load %"class.jxl::LossyFrameEncoder"*, %"class.jxl::LossyFrameEncoder"** %7, align 8
  %9 = bitcast %"class.jxl::Rect"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #8
  %10 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 0
  %11 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 1
  %12 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 2
  %13 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 3
  %14 = getelementptr inbounds %class.anon.415, %class.anon.415* %0, i64 0, i32 0
  %15 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %14, align 8
  %16 = sext i32 %1 to i64
  %17 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %15, i64 0, i32 2, i32 10
  %18 = load i64, i64* %17, align 8, !noalias !80
  %19 = urem i64 %16, %18
  %20 = udiv i64 %16, %18
  %21 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %15, i64 0, i32 2, i32 16
  %22 = load i64, i64* %21, align 8, !noalias !80
  %23 = lshr i64 %22, 3
  %24 = mul i64 %23, %19
  %25 = mul i64 %23, %20
  %26 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %15, i64 0, i32 2, i32 8
  %27 = load i64, i64* %26, align 8, !noalias !80
  %28 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %15, i64 0, i32 2, i32 9
  %29 = load i64, i64* %28, align 8, !noalias !80
  store i64 %24, i64* %10, align 8, !alias.scope !80
  store i64 %25, i64* %11, align 8, !alias.scope !80
  %30 = add i64 %24, %23
  %31 = icmp ugt i64 %30, %27
  %32 = tail call i64 @llvm.usub.sat.i64(i64 %27, i64 %24) #8
  %33 = select i1 %31, i64 %32, i64 %23
  store i64 %33, i64* %12, align 8, !alias.scope !80
  %34 = add i64 %25, %23
  %35 = icmp ugt i64 %34, %29
  %36 = tail call i64 @llvm.usub.sat.i64(i64 %29, i64 %25) #8
  %37 = select i1 %35, i64 %36, i64 %23
  store i64 %37, i64* %13, align 8, !alias.scope !80
  %38 = getelementptr inbounds %"class.jxl::LossyFrameEncoder", %"class.jxl::LossyFrameEncoder"* %8, i64 0, i32 0
  %39 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %38, align 8
  %40 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 7
  %41 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 7, i32 0, i32 1
  %42 = bitcast %"struct.jxl::PassesEncoderState::PassData"** %41 to i64*
  %43 = load i64, i64* %42, align 8
  %44 = bitcast %"class.std::__1::vector.199"* %40 to i64*
  %45 = load i64, i64* %44, align 8
  %46 = icmp eq i64 %43, %45
  br i1 %46, label %59, label %47

47:                                               ; preds = %3
  %48 = bitcast [3 x i32*]* %5 to i8*
  %49 = getelementptr inbounds [3 x i32*], [3 x i32*]* %5, i64 0, i64 0
  %50 = getelementptr inbounds [3 x i32*], [3 x i32*]* %5, i64 0, i64 1
  %51 = getelementptr inbounds [3 x i32*], [3 x i32*]* %5, i64 0, i64 2
  %52 = sext i32 %2 to i64
  %53 = getelementptr inbounds %"class.jxl::LossyFrameEncoder", %"class.jxl::LossyFrameEncoder"* %8, i64 0, i32 3, i32 0, i32 0
  %54 = getelementptr inbounds %class.anon.415, %class.anon.415* %0, i64 0, i32 2
  %55 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %6, i64 0, i32 0, i32 0
  %56 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %6, i64 0, i32 1
  %57 = bitcast [3 x i32]* %56 to i8*
  %58 = bitcast [3 x i32*]* %5 to i8*
  br label %60

59:                                               ; preds = %76, %3
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #8
  ret void

60:                                               ; preds = %47, %76
  %61 = phi %"struct.jxl::PassesEncoderState"* [ %39, %47 ], [ %133, %76 ]
  %62 = phi i64 [ 0, %47 ], [ %132, %76 ]
  %63 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %61, i64 0, i32 3, i32 0, i32 0
  %64 = load %"class.std::__1::unique_ptr.180"*, %"class.std::__1::unique_ptr.180"** %63, align 8
  %65 = getelementptr inbounds %"class.std::__1::unique_ptr.180", %"class.std::__1::unique_ptr.180"* %64, i64 %62, i32 0, i32 0, i32 0
  %66 = load %"class.jxl::ACImage"*, %"class.jxl::ACImage"** %65, align 8
  %67 = bitcast %"class.jxl::ACImage"* %66 to i32 (%"class.jxl::ACImage"*)***
  %68 = load i32 (%"class.jxl::ACImage"*)**, i32 (%"class.jxl::ACImage"*)*** %67, align 8
  %69 = getelementptr inbounds i32 (%"class.jxl::ACImage"*)*, i32 (%"class.jxl::ACImage"*)** %68, i64 2
  %70 = load i32 (%"class.jxl::ACImage"*)*, i32 (%"class.jxl::ACImage"*)** %69, align 8
  %71 = call i32 %70(%"class.jxl::ACImage"* %66) #8
  %72 = icmp eq i32 %71, 1
  br i1 %72, label %76, label %73

73:                                               ; preds = %60
  %74 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.1, i64 0, i64 0), i32 873, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.52, i64 0, i64 0)) #8
  %75 = call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

76:                                               ; preds = %60
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %48) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %58, i8 -86, i64 24, i1 false)
  %77 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %38, align 8
  %78 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %77, i64 0, i32 3, i32 0, i32 0
  %79 = load %"class.std::__1::unique_ptr.180"*, %"class.std::__1::unique_ptr.180"** %78, align 8
  %80 = getelementptr inbounds %"class.std::__1::unique_ptr.180", %"class.std::__1::unique_ptr.180"* %79, i64 %62, i32 0, i32 0, i32 0
  %81 = load %"class.jxl::ACImage"*, %"class.jxl::ACImage"** %80, align 8
  %82 = bitcast %"class.jxl::ACImage"* %81 to i32* (%"class.jxl::ACImage"*, i64, i64, i64)***
  %83 = load i32* (%"class.jxl::ACImage"*, i64, i64, i64)**, i32* (%"class.jxl::ACImage"*, i64, i64, i64)*** %82, align 8
  %84 = getelementptr inbounds i32* (%"class.jxl::ACImage"*, i64, i64, i64)*, i32* (%"class.jxl::ACImage"*, i64, i64, i64)** %83, i64 3
  %85 = load i32* (%"class.jxl::ACImage"*, i64, i64, i64)*, i32* (%"class.jxl::ACImage"*, i64, i64, i64)** %84, align 8
  %86 = call i32* %85(%"class.jxl::ACImage"* %81, i64 0, i64 %16, i64 0) #8
  store i32* %86, i32** %49, align 16
  %87 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %38, align 8
  %88 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %87, i64 0, i32 3, i32 0, i32 0
  %89 = load %"class.std::__1::unique_ptr.180"*, %"class.std::__1::unique_ptr.180"** %88, align 8
  %90 = getelementptr inbounds %"class.std::__1::unique_ptr.180", %"class.std::__1::unique_ptr.180"* %89, i64 %62, i32 0, i32 0, i32 0
  %91 = load %"class.jxl::ACImage"*, %"class.jxl::ACImage"** %90, align 8
  %92 = bitcast %"class.jxl::ACImage"* %91 to i32* (%"class.jxl::ACImage"*, i64, i64, i64)***
  %93 = load i32* (%"class.jxl::ACImage"*, i64, i64, i64)**, i32* (%"class.jxl::ACImage"*, i64, i64, i64)*** %92, align 8
  %94 = getelementptr inbounds i32* (%"class.jxl::ACImage"*, i64, i64, i64)*, i32* (%"class.jxl::ACImage"*, i64, i64, i64)** %93, i64 3
  %95 = load i32* (%"class.jxl::ACImage"*, i64, i64, i64)*, i32* (%"class.jxl::ACImage"*, i64, i64, i64)** %94, align 8
  %96 = call i32* %95(%"class.jxl::ACImage"* %91, i64 1, i64 %16, i64 0) #8
  store i32* %96, i32** %50, align 8
  %97 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %38, align 8
  %98 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %97, i64 0, i32 3, i32 0, i32 0
  %99 = load %"class.std::__1::unique_ptr.180"*, %"class.std::__1::unique_ptr.180"** %98, align 8
  %100 = getelementptr inbounds %"class.std::__1::unique_ptr.180", %"class.std::__1::unique_ptr.180"* %99, i64 %62, i32 0, i32 0, i32 0
  %101 = load %"class.jxl::ACImage"*, %"class.jxl::ACImage"** %100, align 8
  %102 = bitcast %"class.jxl::ACImage"* %101 to i32* (%"class.jxl::ACImage"*, i64, i64, i64)***
  %103 = load i32* (%"class.jxl::ACImage"*, i64, i64, i64)**, i32* (%"class.jxl::ACImage"*, i64, i64, i64)*** %102, align 8
  %104 = getelementptr inbounds i32* (%"class.jxl::ACImage"*, i64, i64, i64)*, i32* (%"class.jxl::ACImage"*, i64, i64, i64)** %103, i64 3
  %105 = load i32* (%"class.jxl::ACImage"*, i64, i64, i64)*, i32* (%"class.jxl::ACImage"*, i64, i64, i64)** %104, align 8
  %106 = call i32* %105(%"class.jxl::ACImage"* %101, i64 2, i64 %16, i64 0) #8
  store i32* %106, i32** %51, align 16
  %107 = load %"struct.jxl::EncCache"*, %"struct.jxl::EncCache"** %53, align 8
  %108 = getelementptr inbounds %"struct.jxl::EncCache", %"struct.jxl::EncCache"* %107, i64 %52
  call void @_ZN3jxl8EncCache8InitOnceEv(%"struct.jxl::EncCache"* %108) #8
  %109 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %14, align 8
  %110 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %109, i64 0, i32 10
  %111 = load i64, i64* %110, align 8
  %112 = mul i64 %111, %62
  %113 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %109, i64 0, i32 11, i32 0, i32 0
  %114 = load i32*, i32** %113, align 8
  %115 = getelementptr inbounds i32, i32* %114, i64 %112
  %116 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %109, i64 0, i32 3
  %117 = load %"struct.jxl::FrameHeader"**, %"struct.jxl::FrameHeader"*** %54, align 8
  %118 = load %"struct.jxl::FrameHeader"*, %"struct.jxl::FrameHeader"** %117, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl22YCbCrChromaSubsamplingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %55, align 8
  %119 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %118, i64 0, i32 7, i32 1
  %120 = bitcast [3 x i32]* %119 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %57, i8* align 8 %120, i64 14, i1 false) #8
  %121 = load %"struct.jxl::EncCache"*, %"struct.jxl::EncCache"** %53, align 8
  %122 = getelementptr inbounds %"struct.jxl::EncCache", %"struct.jxl::EncCache"* %121, i64 %52, i32 0
  %123 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %38, align 8
  %124 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %123, i64 0, i32 7, i32 0, i32 0
  %125 = load %"struct.jxl::PassesEncoderState::PassData"*, %"struct.jxl::PassesEncoderState::PassData"** %124, align 8
  %126 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %125, i64 %62, i32 0, i32 0, i32 0
  %127 = load %"class.std::__1::vector.203"*, %"class.std::__1::vector.203"** %126, align 8
  %128 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %127, i64 %16
  %129 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %123, i64 0, i32 0, i32 12
  %130 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %123, i64 0, i32 0, i32 6
  %131 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %123, i64 0, i32 0, i32 15
  call void @_ZN3jxl20TokenizeCoefficientsEPKjRKNS_4RectEPrPKiRKNS_15AcStrategyImageENS_22YCbCrChromaSubsamplingEPNS_6Image3IiEEPNSt3__16vectorINS_5TokenENSG_9allocatorISI_EEEERKNS_5PlaneIhEERKNSN_IiEERKNS_11BlockCtxMapE(i32* %115, %"class.jxl::Rect"* nonnull dereferenceable(32) %4, i32** nonnull %49, %"class.jxl::AcStrategyImage"* dereferenceable(48) %116, %"struct.jxl::YCbCrChromaSubsampling"* nonnull %6, %"class.jxl::Image3.289"* %122, %"class.std::__1::vector.203"* %128, %"class.jxl::Plane.99"* dereferenceable(32) %129, %"class.jxl::Plane.131"* dereferenceable(32) %130, %"struct.jxl::BlockCtxMap"* dereferenceable(136) %131) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %48) #8
  %132 = add nuw i64 %62, 1
  %133 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %38, align 8
  %134 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %133, i64 0, i32 7
  %135 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %133, i64 0, i32 7, i32 0, i32 1
  %136 = bitcast %"struct.jxl::PassesEncoderState::PassData"** %135 to i64*
  %137 = load i64, i64* %136, align 8
  %138 = bitcast %"class.std::__1::vector.199"* %134 to i64*
  %139 = load i64, i64* %138, align 8
  %140 = sub i64 %137, %139
  %141 = sdiv exact i64 %140, 152
  %142 = icmp ult i64 %132, %141
  br i1 %142, label %60, label %59
}

declare void @_ZN3jxl8EncCache8InitOnceEv(%"struct.jxl::EncCache"*) local_unnamed_addr #1

declare void @_ZN3jxl20TokenizeCoefficientsEPKjRKNS_4RectEPrPKiRKNS_15AcStrategyImageENS_22YCbCrChromaSubsamplingEPNS_6Image3IiEEPNSt3__16vectorINS_5TokenENSG_9allocatorISI_EEEERKNS_5PlaneIhEERKNSN_IiEERKNS_11BlockCtxMapE(i32*, %"class.jxl::Rect"* dereferenceable(32), i32**, %"class.jxl::AcStrategyImage"* dereferenceable(48), %"struct.jxl::YCbCrChromaSubsampling"*, %"class.jxl::Image3.289"*, %"class.std::__1::vector.203"*, %"class.jxl::Plane.99"* dereferenceable(32), %"class.jxl::Plane.131"* dereferenceable(32), %"struct.jxl::BlockCtxMap"* dereferenceable(136)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl12BlendingInfoENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_(%"class.std::__1::vector.92"*, %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"*) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint %"struct.jxl::BlendingInfo"* %2 to i64
  %5 = ptrtoint %"struct.jxl::BlendingInfo"* %1 to i64
  %6 = sub i64 %4, %5
  %7 = sdiv exact i64 %6, 40
  %8 = getelementptr inbounds %"class.std::__1::vector.92", %"class.std::__1::vector.92"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %9 = bitcast %"struct.jxl::BlendingInfo"** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector.92"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = sdiv exact i64 %13, 40
  %15 = icmp ugt i64 %7, %14
  %16 = inttoptr i64 %12 to %"struct.jxl::BlendingInfo"*
  br i1 %15, label %70, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.std::__1::vector.92", %"class.std::__1::vector.92"* %0, i64 0, i32 0, i32 1
  %19 = bitcast %"struct.jxl::BlendingInfo"** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %12
  %22 = sdiv exact i64 %21, 40
  %23 = icmp ugt i64 %7, %22
  %24 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %1, i64 %22
  %25 = select i1 %23, %"struct.jxl::BlendingInfo"* %24, %"struct.jxl::BlendingInfo"* %2
  %26 = icmp eq %"struct.jxl::BlendingInfo"* %25, %1
  br i1 %26, label %37, label %27

27:                                               ; preds = %17, %27
  %28 = phi %"struct.jxl::BlendingInfo"* [ %35, %27 ], [ %16, %17 ]
  %29 = phi %"struct.jxl::BlendingInfo"* [ %34, %27 ], [ %1, %17 ]
  %30 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %28, i64 0, i32 1
  %31 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %29, i64 0, i32 1
  %32 = bitcast i32* %30 to i8*
  %33 = bitcast i32* %31 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %32, i8* align 8 %33, i64 25, i1 false) #8
  %34 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %29, i64 1
  %35 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %28, i64 1
  %36 = icmp eq %"struct.jxl::BlendingInfo"* %34, %25
  br i1 %36, label %37, label %27

37:                                               ; preds = %27, %17
  %38 = phi %"struct.jxl::BlendingInfo"* [ %16, %17 ], [ %35, %27 ]
  br i1 %23, label %39, label %59

39:                                               ; preds = %37
  %40 = load i64, i64* %19, align 8
  %41 = icmp eq %"struct.jxl::BlendingInfo"* %25, %2
  br i1 %41, label %57, label %42

42:                                               ; preds = %39
  %43 = inttoptr i64 %40 to %"struct.jxl::BlendingInfo"*
  br label %44

44:                                               ; preds = %44, %42
  %45 = phi %"struct.jxl::BlendingInfo"* [ %53, %44 ], [ %43, %42 ]
  %46 = phi %"struct.jxl::BlendingInfo"* [ %52, %44 ], [ %24, %42 ]
  %47 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %45, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl12BlendingInfoE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %47, align 8
  %48 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %45, i64 0, i32 1
  %49 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %46, i64 0, i32 1
  %50 = bitcast i32* %48 to i8*
  %51 = bitcast i32* %49 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %50, i8* align 8 %51, i64 25, i1 false) #8
  %52 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %46, i64 1
  %53 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %45, i64 1
  %54 = icmp eq %"struct.jxl::BlendingInfo"* %52, %2
  br i1 %54, label %55, label %44

55:                                               ; preds = %44
  %56 = ptrtoint %"struct.jxl::BlendingInfo"* %53 to i64
  br label %57

57:                                               ; preds = %39, %55
  %58 = phi i64 [ %40, %39 ], [ %56, %55 ]
  store i64 %58, i64* %19, align 8
  br label %129

59:                                               ; preds = %37
  %60 = load %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"** %18, align 8
  %61 = icmp eq %"struct.jxl::BlendingInfo"* %60, %38
  br i1 %61, label %69, label %62

62:                                               ; preds = %59, %62
  %63 = phi %"struct.jxl::BlendingInfo"* [ %64, %62 ], [ %60, %59 ]
  %64 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %63, i64 -1
  %65 = bitcast %"struct.jxl::BlendingInfo"* %64 to void (%"struct.jxl::BlendingInfo"*)***
  %66 = load void (%"struct.jxl::BlendingInfo"*)**, void (%"struct.jxl::BlendingInfo"*)*** %65, align 8
  %67 = load void (%"struct.jxl::BlendingInfo"*)*, void (%"struct.jxl::BlendingInfo"*)** %66, align 8
  tail call void %67(%"struct.jxl::BlendingInfo"* %64) #8
  %68 = icmp eq %"struct.jxl::BlendingInfo"* %64, %38
  br i1 %68, label %69, label %62

69:                                               ; preds = %62, %59
  store %"struct.jxl::BlendingInfo"* %38, %"struct.jxl::BlendingInfo"** %18, align 8
  br label %129

70:                                               ; preds = %3
  %71 = icmp eq i64 %12, 0
  br i1 %71, label %90, label %72

72:                                               ; preds = %70
  %73 = inttoptr i64 %12 to i8*
  %74 = getelementptr inbounds %"class.std::__1::vector.92", %"class.std::__1::vector.92"* %0, i64 0, i32 0, i32 1
  %75 = load %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"** %74, align 8
  %76 = icmp eq %"struct.jxl::BlendingInfo"* %75, %16
  br i1 %76, label %87, label %77

77:                                               ; preds = %72, %77
  %78 = phi %"struct.jxl::BlendingInfo"* [ %79, %77 ], [ %75, %72 ]
  %79 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %78, i64 -1
  %80 = bitcast %"struct.jxl::BlendingInfo"* %79 to void (%"struct.jxl::BlendingInfo"*)***
  %81 = load void (%"struct.jxl::BlendingInfo"*)**, void (%"struct.jxl::BlendingInfo"*)*** %80, align 8
  %82 = load void (%"struct.jxl::BlendingInfo"*)*, void (%"struct.jxl::BlendingInfo"*)** %81, align 8
  tail call void %82(%"struct.jxl::BlendingInfo"* %79) #8
  %83 = icmp eq %"struct.jxl::BlendingInfo"* %79, %16
  br i1 %83, label %84, label %77

84:                                               ; preds = %77
  %85 = bitcast %"class.std::__1::vector.92"* %0 to i8**
  %86 = load i8*, i8** %85, align 8
  br label %87

87:                                               ; preds = %84, %72
  %88 = phi i8* [ %86, %84 ], [ %73, %72 ]
  store %"struct.jxl::BlendingInfo"* %16, %"struct.jxl::BlendingInfo"** %74, align 8
  tail call void @_ZdlPv(i8* %88) #13
  %89 = bitcast %"class.std::__1::vector.92"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %89, i8 0, i64 24, i1 false) #8
  br label %90

90:                                               ; preds = %70, %87
  %91 = phi i64 [ %10, %70 ], [ 0, %87 ]
  %92 = icmp ugt i64 %7, 461168601842738790
  br i1 %92, label %93, label %95

93:                                               ; preds = %90
  %94 = bitcast %"class.std::__1::vector.92"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %94) #14
  unreachable

95:                                               ; preds = %90
  %96 = sdiv exact i64 %91, 40
  %97 = icmp ult i64 %96, 230584300921369395
  br i1 %97, label %98, label %102

98:                                               ; preds = %95
  %99 = shl nsw i64 %96, 1
  %100 = icmp ult i64 %99, %7
  %101 = select i1 %100, i64 %7, i64 %99
  br label %102

102:                                              ; preds = %98, %95
  %103 = phi i64 [ %101, %98 ], [ 461168601842738790, %95 ]
  %104 = mul i64 %103, 40
  %105 = tail call i8* @_Znwm(i64 %104) #13
  %106 = bitcast i8* %105 to %"struct.jxl::BlendingInfo"*
  %107 = getelementptr inbounds %"class.std::__1::vector.92", %"class.std::__1::vector.92"* %0, i64 0, i32 0, i32 1
  %108 = bitcast %"struct.jxl::BlendingInfo"** %107 to i8**
  store i8* %105, i8** %108, align 8
  %109 = bitcast %"class.std::__1::vector.92"* %0 to i8**
  store i8* %105, i8** %109, align 8
  %110 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %106, i64 %103
  store %"struct.jxl::BlendingInfo"* %110, %"struct.jxl::BlendingInfo"** %8, align 8
  %111 = bitcast %"struct.jxl::BlendingInfo"** %107 to i64*
  %112 = ptrtoint i8* %105 to i64
  %113 = icmp eq %"struct.jxl::BlendingInfo"* %1, %2
  br i1 %113, label %127, label %114

114:                                              ; preds = %102, %114
  %115 = phi %"struct.jxl::BlendingInfo"* [ %123, %114 ], [ %106, %102 ]
  %116 = phi %"struct.jxl::BlendingInfo"* [ %122, %114 ], [ %1, %102 ]
  %117 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %115, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl12BlendingInfoE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %117, align 8
  %118 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %115, i64 0, i32 1
  %119 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %116, i64 0, i32 1
  %120 = bitcast i32* %118 to i8*
  %121 = bitcast i32* %119 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %120, i8* align 8 %121, i64 25, i1 false) #8
  %122 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %116, i64 1
  %123 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %115, i64 1
  %124 = icmp eq %"struct.jxl::BlendingInfo"* %122, %2
  br i1 %124, label %125, label %114

125:                                              ; preds = %114
  %126 = ptrtoint %"struct.jxl::BlendingInfo"* %123 to i64
  br label %127

127:                                              ; preds = %102, %125
  %128 = phi i64 [ %112, %102 ], [ %126, %125 ]
  store i64 %128, i64* %111, align 8
  br label %129

129:                                              ; preds = %57, %69, %127
  ret void
}

declare void @_ZN3jxl23InitializePassesEncoderERKNS_6Image3IfEEPNS_10ThreadPoolEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPNS_6AuxOutE(%"class.jxl::Image3"* dereferenceable(96), %"class.jxl::ThreadPool"*, %"struct.jxl::PassesEncoderState"*, %"class.jxl::ModularFrameEncoder"*, %"struct.jxl::AuxOut"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN3jxl9RunOnPoolIZNS_17LossyFrameEncoder19ComputeEncodingDataEPKNS_11ImageBundleEPNS_6Image3IfEEPNS_10ThreadPoolEPNS_19ModularFrameEncoderEPNS_9BitWriterEPNS_11FrameHeaderEEUlmE_ZNS1_19ComputeEncodingDataES4_S7_S9_SB_SD_SF_EUliiE_EEbS9_jjRKT_RKT0_PKc(%"class.jxl::ThreadPool"*, i32, i32, %class.anon.442* dereferenceable(8), %class.anon.443* dereferenceable(24), i8*) local_unnamed_addr #0 comdat {
  %7 = alloca %"class.jxl::ThreadPool::RunCallState.444", align 8
  %8 = alloca %"class.jxl::ThreadPool::RunCallState.444", align 8
  %9 = alloca double, align 8
  %10 = alloca %"class.jxl::ThreadPool", align 8
  %11 = bitcast double* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #8
  store double 0xFFFFFFFFFFFFFFFF, double* %9, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* %5, double* nonnull %9) #8
  %12 = icmp eq %"class.jxl::ThreadPool"* %0, null
  br i1 %12, label %13, label %30

13:                                               ; preds = %6
  %14 = bitcast %"class.jxl::ThreadPool"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %14) #8
  %15 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %10, i64 0, i32 0
  %16 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %10, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %15, align 8
  %17 = bitcast i8** %16 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %10, %"class.jxl::ThreadPool"** %17, align 8
  %18 = icmp ugt i32 %1, %2
  br i1 %18, label %19, label %22

19:                                               ; preds = %13
  %20 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.49, i64 0, i64 0), i32 55, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.50, i64 0, i64 0)) #8
  %21 = call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

22:                                               ; preds = %13
  %23 = icmp eq i32 %1, %2
  br i1 %23, label %47, label %24

24:                                               ; preds = %22
  %25 = bitcast %"class.jxl::ThreadPool::RunCallState.444"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %25) #8
  %26 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.444", %"class.jxl::ThreadPool::RunCallState.444"* %7, i64 0, i32 0
  %27 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.444", %"class.jxl::ThreadPool::RunCallState.444"* %7, i64 0, i32 1
  store %class.anon.442* %3, %class.anon.442** %26, align 8
  store %class.anon.443* %4, %class.anon.443** %27, align 8
  %28 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %14, i8* nonnull %25, i32 (i8*, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIZNS_17LossyFrameEncoder19ComputeEncodingDataEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_19ModularFrameEncoderEPNS_9BitWriterEPNS_11FrameHeaderEEUlmE_ZNS2_19ComputeEncodingDataES5_S8_S9_SB_SD_SF_EUliiE_E12CallInitFuncEPvm, void (i8*, i32, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIZNS_17LossyFrameEncoder19ComputeEncodingDataEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_19ModularFrameEncoderEPNS_9BitWriterEPNS_11FrameHeaderEEUlmE_ZNS2_19ComputeEncodingDataES5_S8_S9_SB_SD_SF_EUliiE_E12CallDataFuncEPvjm, i32 %1, i32 %2) #8
  %29 = icmp ne i32 %28, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %25) #8
  br label %47

30:                                               ; preds = %6
  %31 = icmp ugt i32 %1, %2
  br i1 %31, label %32, label %35

32:                                               ; preds = %30
  %33 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.49, i64 0, i64 0), i32 55, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.50, i64 0, i64 0)) #8
  %34 = call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

35:                                               ; preds = %30
  %36 = icmp eq i32 %1, %2
  br i1 %36, label %51, label %37

37:                                               ; preds = %35
  %38 = bitcast %"class.jxl::ThreadPool::RunCallState.444"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %38) #8
  %39 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.444", %"class.jxl::ThreadPool::RunCallState.444"* %8, i64 0, i32 0
  %40 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.444", %"class.jxl::ThreadPool::RunCallState.444"* %8, i64 0, i32 1
  store %class.anon.442* %3, %class.anon.442** %39, align 8
  store %class.anon.443* %4, %class.anon.443** %40, align 8
  %41 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %0, i64 0, i32 0
  %42 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %41, align 8
  %43 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %0, i64 0, i32 1
  %44 = load i8*, i8** %43, align 8
  %45 = call i32 %42(i8* %44, i8* nonnull %38, i32 (i8*, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIZNS_17LossyFrameEncoder19ComputeEncodingDataEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_19ModularFrameEncoderEPNS_9BitWriterEPNS_11FrameHeaderEEUlmE_ZNS2_19ComputeEncodingDataES5_S8_S9_SB_SD_SF_EUliiE_E12CallInitFuncEPvm, void (i8*, i32, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIZNS_17LossyFrameEncoder19ComputeEncodingDataEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_19ModularFrameEncoderEPNS_9BitWriterEPNS_11FrameHeaderEEUlmE_ZNS2_19ComputeEncodingDataES5_S8_S9_SB_SD_SF_EUliiE_E12CallDataFuncEPvjm, i32 %1, i32 %2) #8
  %46 = icmp ne i32 %45, 0
  br label %47

47:                                               ; preds = %24, %22, %37
  %48 = phi i8* [ %38, %37 ], [ %14, %22 ], [ %14, %24 ]
  %49 = phi i1 [ %46, %37 ], [ false, %22 ], [ %29, %24 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %48) #8
  %50 = xor i1 %49, true
  br label %51

51:                                               ; preds = %47, %35
  %52 = phi i1 [ true, %35 ], [ %50, %47 ]
  %53 = load double, double* %9, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* %5, double %53) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #8
  ret i1 %52
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3jxl10ThreadPool12RunCallStateIZNS_17LossyFrameEncoder19ComputeEncodingDataEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_19ModularFrameEncoderEPNS_9BitWriterEPNS_11FrameHeaderEEUlmE_ZNS2_19ComputeEncodingDataES5_S8_S9_SB_SD_SF_EUliiE_E12CallInitFuncEPvm(i8*, i64) #0 comdat align 2 {
  %3 = bitcast i8* %0 to %class.anon.442**
  %4 = load %class.anon.442*, %class.anon.442** %3, align 8
  %5 = getelementptr inbounds %class.anon.442, %class.anon.442* %4, i64 0, i32 0
  %6 = load %"class.jxl::LossyFrameEncoder"*, %"class.jxl::LossyFrameEncoder"** %5, align 8
  %7 = getelementptr inbounds %"class.jxl::LossyFrameEncoder", %"class.jxl::LossyFrameEncoder"* %6, i64 0, i32 3
  tail call void @_ZNSt3__16vectorIN3jxl8EncCacheENS_9allocatorIS2_EEE6resizeEm(%"class.std::__1::vector.287"* %7, i64 %1) #8
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl10ThreadPool12RunCallStateIZNS_17LossyFrameEncoder19ComputeEncodingDataEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_19ModularFrameEncoderEPNS_9BitWriterEPNS_11FrameHeaderEEUlmE_ZNS2_19ComputeEncodingDataES5_S8_S9_SB_SD_SF_EUliiE_E12CallDataFuncEPvjm(i8*, i32, i64) #0 comdat align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.443**
  %6 = load %class.anon.443*, %class.anon.443** %5, align 8
  %7 = trunc i64 %2 to i32
  tail call void @_ZZN3jxl17LossyFrameEncoder19ComputeEncodingDataEPKNS_11ImageBundleEPNS_6Image3IfEEPNS_10ThreadPoolEPNS_19ModularFrameEncoderEPNS_9BitWriterEPNS_11FrameHeaderEENKUliiE_clEii(%class.anon.443* %6, i32 %1, i32 %7)
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZZN3jxl17LossyFrameEncoder19ComputeEncodingDataEPKNS_11ImageBundleEPNS_6Image3IfEEPNS_10ThreadPoolEPNS_19ModularFrameEncoderEPNS_9BitWriterEPNS_11FrameHeaderEENKUliiE_clEii(%class.anon.443*, i32, i32) local_unnamed_addr #4 comdat align 2 {
  %4 = alloca %"class.jxl::Rect", align 8
  %5 = alloca [3 x i32*], align 16
  %6 = alloca %"struct.jxl::YCbCrChromaSubsampling", align 8
  %7 = getelementptr inbounds %class.anon.443, %class.anon.443* %0, i64 0, i32 1
  %8 = load %"class.jxl::LossyFrameEncoder"*, %"class.jxl::LossyFrameEncoder"** %7, align 8
  %9 = bitcast %"class.jxl::Rect"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #8
  %10 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 0
  %11 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 1
  %12 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 2
  %13 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 3
  %14 = getelementptr inbounds %class.anon.443, %class.anon.443* %0, i64 0, i32 0
  %15 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %14, align 8
  %16 = sext i32 %1 to i64
  %17 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %15, i64 0, i32 2, i32 10
  %18 = load i64, i64* %17, align 8, !noalias !83
  %19 = urem i64 %16, %18
  %20 = udiv i64 %16, %18
  %21 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %15, i64 0, i32 2, i32 16
  %22 = load i64, i64* %21, align 8, !noalias !83
  %23 = lshr i64 %22, 3
  %24 = mul i64 %23, %19
  %25 = mul i64 %23, %20
  %26 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %15, i64 0, i32 2, i32 8
  %27 = load i64, i64* %26, align 8, !noalias !83
  %28 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %15, i64 0, i32 2, i32 9
  %29 = load i64, i64* %28, align 8, !noalias !83
  store i64 %24, i64* %10, align 8, !alias.scope !83
  store i64 %25, i64* %11, align 8, !alias.scope !83
  %30 = add i64 %24, %23
  %31 = icmp ugt i64 %30, %27
  %32 = tail call i64 @llvm.usub.sat.i64(i64 %27, i64 %24) #8
  %33 = select i1 %31, i64 %32, i64 %23
  store i64 %33, i64* %12, align 8, !alias.scope !83
  %34 = add i64 %25, %23
  %35 = icmp ugt i64 %34, %29
  %36 = tail call i64 @llvm.usub.sat.i64(i64 %29, i64 %25) #8
  %37 = select i1 %35, i64 %36, i64 %23
  store i64 %37, i64* %13, align 8, !alias.scope !83
  %38 = getelementptr inbounds %"class.jxl::LossyFrameEncoder", %"class.jxl::LossyFrameEncoder"* %8, i64 0, i32 0
  %39 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %38, align 8
  %40 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 7
  %41 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %39, i64 0, i32 7, i32 0, i32 1
  %42 = bitcast %"struct.jxl::PassesEncoderState::PassData"** %41 to i64*
  %43 = load i64, i64* %42, align 8
  %44 = bitcast %"class.std::__1::vector.199"* %40 to i64*
  %45 = load i64, i64* %44, align 8
  %46 = icmp eq i64 %43, %45
  br i1 %46, label %59, label %47

47:                                               ; preds = %3
  %48 = bitcast [3 x i32*]* %5 to i8*
  %49 = getelementptr inbounds [3 x i32*], [3 x i32*]* %5, i64 0, i64 0
  %50 = getelementptr inbounds [3 x i32*], [3 x i32*]* %5, i64 0, i64 1
  %51 = getelementptr inbounds [3 x i32*], [3 x i32*]* %5, i64 0, i64 2
  %52 = sext i32 %2 to i64
  %53 = getelementptr inbounds %"class.jxl::LossyFrameEncoder", %"class.jxl::LossyFrameEncoder"* %8, i64 0, i32 3, i32 0, i32 0
  %54 = getelementptr inbounds %class.anon.443, %class.anon.443* %0, i64 0, i32 2
  %55 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %6, i64 0, i32 0, i32 0
  %56 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %6, i64 0, i32 1
  %57 = bitcast [3 x i32]* %56 to i8*
  %58 = bitcast [3 x i32*]* %5 to i8*
  br label %60

59:                                               ; preds = %76, %3
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #8
  ret void

60:                                               ; preds = %47, %76
  %61 = phi %"struct.jxl::PassesEncoderState"* [ %39, %47 ], [ %133, %76 ]
  %62 = phi i64 [ 0, %47 ], [ %132, %76 ]
  %63 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %61, i64 0, i32 3, i32 0, i32 0
  %64 = load %"class.std::__1::unique_ptr.180"*, %"class.std::__1::unique_ptr.180"** %63, align 8
  %65 = getelementptr inbounds %"class.std::__1::unique_ptr.180", %"class.std::__1::unique_ptr.180"* %64, i64 %62, i32 0, i32 0, i32 0
  %66 = load %"class.jxl::ACImage"*, %"class.jxl::ACImage"** %65, align 8
  %67 = bitcast %"class.jxl::ACImage"* %66 to i32 (%"class.jxl::ACImage"*)***
  %68 = load i32 (%"class.jxl::ACImage"*)**, i32 (%"class.jxl::ACImage"*)*** %67, align 8
  %69 = getelementptr inbounds i32 (%"class.jxl::ACImage"*)*, i32 (%"class.jxl::ACImage"*)** %68, i64 2
  %70 = load i32 (%"class.jxl::ACImage"*)*, i32 (%"class.jxl::ACImage"*)** %69, align 8
  %71 = call i32 %70(%"class.jxl::ACImage"* %66) #8
  %72 = icmp eq i32 %71, 1
  br i1 %72, label %76, label %73

73:                                               ; preds = %60
  %74 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.1, i64 0, i64 0), i32 524, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.52, i64 0, i64 0)) #8
  %75 = call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

76:                                               ; preds = %60
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %48) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %58, i8 -86, i64 24, i1 false)
  %77 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %38, align 8
  %78 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %77, i64 0, i32 3, i32 0, i32 0
  %79 = load %"class.std::__1::unique_ptr.180"*, %"class.std::__1::unique_ptr.180"** %78, align 8
  %80 = getelementptr inbounds %"class.std::__1::unique_ptr.180", %"class.std::__1::unique_ptr.180"* %79, i64 %62, i32 0, i32 0, i32 0
  %81 = load %"class.jxl::ACImage"*, %"class.jxl::ACImage"** %80, align 8
  %82 = bitcast %"class.jxl::ACImage"* %81 to i32* (%"class.jxl::ACImage"*, i64, i64, i64)***
  %83 = load i32* (%"class.jxl::ACImage"*, i64, i64, i64)**, i32* (%"class.jxl::ACImage"*, i64, i64, i64)*** %82, align 8
  %84 = getelementptr inbounds i32* (%"class.jxl::ACImage"*, i64, i64, i64)*, i32* (%"class.jxl::ACImage"*, i64, i64, i64)** %83, i64 3
  %85 = load i32* (%"class.jxl::ACImage"*, i64, i64, i64)*, i32* (%"class.jxl::ACImage"*, i64, i64, i64)** %84, align 8
  %86 = call i32* %85(%"class.jxl::ACImage"* %81, i64 0, i64 %16, i64 0) #8
  store i32* %86, i32** %49, align 16
  %87 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %38, align 8
  %88 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %87, i64 0, i32 3, i32 0, i32 0
  %89 = load %"class.std::__1::unique_ptr.180"*, %"class.std::__1::unique_ptr.180"** %88, align 8
  %90 = getelementptr inbounds %"class.std::__1::unique_ptr.180", %"class.std::__1::unique_ptr.180"* %89, i64 %62, i32 0, i32 0, i32 0
  %91 = load %"class.jxl::ACImage"*, %"class.jxl::ACImage"** %90, align 8
  %92 = bitcast %"class.jxl::ACImage"* %91 to i32* (%"class.jxl::ACImage"*, i64, i64, i64)***
  %93 = load i32* (%"class.jxl::ACImage"*, i64, i64, i64)**, i32* (%"class.jxl::ACImage"*, i64, i64, i64)*** %92, align 8
  %94 = getelementptr inbounds i32* (%"class.jxl::ACImage"*, i64, i64, i64)*, i32* (%"class.jxl::ACImage"*, i64, i64, i64)** %93, i64 3
  %95 = load i32* (%"class.jxl::ACImage"*, i64, i64, i64)*, i32* (%"class.jxl::ACImage"*, i64, i64, i64)** %94, align 8
  %96 = call i32* %95(%"class.jxl::ACImage"* %91, i64 1, i64 %16, i64 0) #8
  store i32* %96, i32** %50, align 8
  %97 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %38, align 8
  %98 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %97, i64 0, i32 3, i32 0, i32 0
  %99 = load %"class.std::__1::unique_ptr.180"*, %"class.std::__1::unique_ptr.180"** %98, align 8
  %100 = getelementptr inbounds %"class.std::__1::unique_ptr.180", %"class.std::__1::unique_ptr.180"* %99, i64 %62, i32 0, i32 0, i32 0
  %101 = load %"class.jxl::ACImage"*, %"class.jxl::ACImage"** %100, align 8
  %102 = bitcast %"class.jxl::ACImage"* %101 to i32* (%"class.jxl::ACImage"*, i64, i64, i64)***
  %103 = load i32* (%"class.jxl::ACImage"*, i64, i64, i64)**, i32* (%"class.jxl::ACImage"*, i64, i64, i64)*** %102, align 8
  %104 = getelementptr inbounds i32* (%"class.jxl::ACImage"*, i64, i64, i64)*, i32* (%"class.jxl::ACImage"*, i64, i64, i64)** %103, i64 3
  %105 = load i32* (%"class.jxl::ACImage"*, i64, i64, i64)*, i32* (%"class.jxl::ACImage"*, i64, i64, i64)** %104, align 8
  %106 = call i32* %105(%"class.jxl::ACImage"* %101, i64 2, i64 %16, i64 0) #8
  store i32* %106, i32** %51, align 16
  %107 = load %"struct.jxl::EncCache"*, %"struct.jxl::EncCache"** %53, align 8
  %108 = getelementptr inbounds %"struct.jxl::EncCache", %"struct.jxl::EncCache"* %107, i64 %52
  call void @_ZN3jxl8EncCache8InitOnceEv(%"struct.jxl::EncCache"* %108) #8
  %109 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %14, align 8
  %110 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %109, i64 0, i32 10
  %111 = load i64, i64* %110, align 8
  %112 = mul i64 %111, %62
  %113 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %109, i64 0, i32 11, i32 0, i32 0
  %114 = load i32*, i32** %113, align 8
  %115 = getelementptr inbounds i32, i32* %114, i64 %112
  %116 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %109, i64 0, i32 3
  %117 = load %"struct.jxl::FrameHeader"**, %"struct.jxl::FrameHeader"*** %54, align 8
  %118 = load %"struct.jxl::FrameHeader"*, %"struct.jxl::FrameHeader"** %117, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl22YCbCrChromaSubsamplingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %55, align 8
  %119 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %118, i64 0, i32 7, i32 1
  %120 = bitcast [3 x i32]* %119 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %57, i8* align 8 %120, i64 14, i1 false) #8
  %121 = load %"struct.jxl::EncCache"*, %"struct.jxl::EncCache"** %53, align 8
  %122 = getelementptr inbounds %"struct.jxl::EncCache", %"struct.jxl::EncCache"* %121, i64 %52, i32 0
  %123 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %38, align 8
  %124 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %123, i64 0, i32 7, i32 0, i32 0
  %125 = load %"struct.jxl::PassesEncoderState::PassData"*, %"struct.jxl::PassesEncoderState::PassData"** %124, align 8
  %126 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %125, i64 %62, i32 0, i32 0, i32 0
  %127 = load %"class.std::__1::vector.203"*, %"class.std::__1::vector.203"** %126, align 8
  %128 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %127, i64 %16
  %129 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %123, i64 0, i32 0, i32 12
  %130 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %123, i64 0, i32 0, i32 6
  %131 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %123, i64 0, i32 0, i32 15
  call void @_ZN3jxl20TokenizeCoefficientsEPKjRKNS_4RectEPrPKiRKNS_15AcStrategyImageENS_22YCbCrChromaSubsamplingEPNS_6Image3IiEEPNSt3__16vectorINS_5TokenENSG_9allocatorISI_EEEERKNS_5PlaneIhEERKNSN_IiEERKNS_11BlockCtxMapE(i32* %115, %"class.jxl::Rect"* nonnull dereferenceable(32) %4, i32** nonnull %49, %"class.jxl::AcStrategyImage"* dereferenceable(48) %116, %"struct.jxl::YCbCrChromaSubsampling"* nonnull %6, %"class.jxl::Image3.289"* %122, %"class.std::__1::vector.203"* %128, %"class.jxl::Plane.99"* dereferenceable(32) %129, %"class.jxl::Plane.131"* dereferenceable(32) %130, %"struct.jxl::BlockCtxMap"* dereferenceable(136) %131) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %48) #8
  %132 = add nuw i64 %62, 1
  %133 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %38, align 8
  %134 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %133, i64 0, i32 7
  %135 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %133, i64 0, i32 7, i32 0, i32 1
  %136 = bitcast %"struct.jxl::PassesEncoderState::PassData"** %135 to i64*
  %137 = load i64, i64* %136, align 8
  %138 = bitcast %"class.std::__1::vector.199"* %134 to i64*
  %139 = load i64, i64* %138, align 8
  %140 = sub i64 %137, %139
  %141 = sdiv exact i64 %140, 152
  %142 = icmp ult i64 %132, %141
  br i1 %142, label %60, label %59
}

declare i32 @_ZNK3jxl9Quantizer6EncodeEPNS_9BitWriterEmPNS_6AuxOutE(%"class.jxl::Quantizer"*, %"struct.jxl::BitWriter"*, i64, %"struct.jxl::AuxOut"*) local_unnamed_addr #1

declare void @_ZN3jxl17EncodeBlockCtxMapERKNS_11BlockCtxMapEPNS_9BitWriterEPNS_6AuxOutE(%"struct.jxl::BlockCtxMap"* dereferenceable(136), %"struct.jxl::BitWriter"*, %"struct.jxl::AuxOut"*) local_unnamed_addr #1

declare void @_ZN3jxl27ColorCorrelationMapEncodeDCEPNS_19ColorCorrelationMapEPNS_9BitWriterEmPNS_6AuxOutE(%"struct.jxl::ColorCorrelationMap"*, %"struct.jxl::BitWriter"*, i64, %"struct.jxl::AuxOut"*) local_unnamed_addr #1

declare i32 @_ZN3jxl21DequantMatricesEncodeEPKNS_15DequantMatricesEPNS_9BitWriterEmPNS_6AuxOutEPNS_19ModularFrameEncoderE(%"class.jxl::DequantMatrices"*, %"struct.jxl::BitWriter"*, i64, %"struct.jxl::AuxOut"*, %"class.jxl::ModularFrameEncoder"*) local_unnamed_addr #1

declare void @_ZN3jxl9BitWriter9AllotmentC1EPS0_m(%"class.jxl::BitWriter::Allotment"*, %"struct.jxl::BitWriter"*, i64) unnamed_addr #1

declare void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"*, i64, i64) local_unnamed_addr #1

declare void @_ZN3jxl16ReclaimAndChargeEPNS_9BitWriterEPNS0_9AllotmentEmPNS_6AuxOutE(%"struct.jxl::BitWriter"*, %"class.jxl::BitWriter::Allotment"*, i64, %"struct.jxl::AuxOut"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN3jxl9BitWriter9AllotmentD1Ev(%"class.jxl::BitWriter::Allotment"*) unnamed_addr #10

declare i32 @_ZN3jxl8U32Coder9CanEncodeENS_6U32EncEjPm(i64, i64, i32, i64*) local_unnamed_addr #1

declare i32 @_ZN3jxl8U32Coder5WriteENS_6U32EncEjPNS_9BitWriterE(i64, i64, i32, %"struct.jxl::BitWriter"*) local_unnamed_addr #1

declare void @_ZN3jxl17EncodeCoeffOrdersEtPKjPNS_9BitWriterEmPNS_6AuxOutE(i16 zeroext, i32*, %"struct.jxl::BitWriter"*, i64, %"struct.jxl::AuxOut"*) local_unnamed_addr #1

declare i64 @_ZN3jxl24BuildAndEncodeHistogramsERKNS_15HistogramParamsEmRNSt3__16vectorINS4_INS_5TokenENS3_9allocatorIS5_EEEENS6_IS8_EEEEPNS_19EntropyEncodingDataEPNS4_IhNS6_IhEEEEPNS_9BitWriterEmPNS_6AuxOutE(%"struct.jxl::HistogramParams"* dereferenceable(56), i64, %"class.std::__1::vector.201"* dereferenceable(24), %"struct.jxl::EntropyEncodingData"*, %"class.std::__1::vector.21"*, %"struct.jxl::BitWriter"*, i64, %"struct.jxl::AuxOut"*) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare double @llvm.ceil.f64(double) #9

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc float @"_ZZN3jxl12_GLOBAL__N_113ClusterGroupsEPNS_18PassesEncoderStateEENK3$_6clEii"(%class.anon.453* nocapture readonly, i32, i32) unnamed_addr #4 align 2 {
  %4 = alloca %"class.std::__1::vector.201", align 8
  %5 = alloca [2 x %"class.std::__1::vector.203"], align 8
  %6 = bitcast %"class.std::__1::vector.201"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #8
  %7 = getelementptr inbounds %"class.std::__1::vector.201", %"class.std::__1::vector.201"* %4, i64 0, i32 0, i32 0
  %8 = getelementptr inbounds %"class.std::__1::vector.201", %"class.std::__1::vector.201"* %4, i64 0, i32 0, i32 1
  %9 = getelementptr inbounds %"class.std::__1::vector.201", %"class.std::__1::vector.201"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  %10 = bitcast [2 x %"class.std::__1::vector.203"]* %5 to i8*
  %11 = bitcast %"class.std::__1::vector.201"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %10) #8
  %12 = getelementptr inbounds %class.anon.453, %class.anon.453* %0, i64 0, i32 0
  %13 = load %"class.std::__1::vector.201"*, %"class.std::__1::vector.201"** %12, align 8
  %14 = sext i32 %1 to i64
  %15 = getelementptr inbounds %"class.std::__1::vector.201", %"class.std::__1::vector.201"* %13, i64 0, i32 0, i32 0
  %16 = load %"class.std::__1::vector.203"*, %"class.std::__1::vector.203"** %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %16, i64 %14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 0, i64 24, i1 false) #8
  %18 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %16, i64 %14, i32 0, i32 1
  %19 = bitcast %"struct.jxl::Token"** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = bitcast %"class.std::__1::vector.203"* %17 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = sub i64 %20, %22
  %24 = ashr exact i64 %23, 3
  %25 = icmp eq i64 %23, 0
  br i1 %25, label %54, label %26

26:                                               ; preds = %3
  %27 = icmp ugt i64 %24, 2305843009213693951
  br i1 %27, label %28, label %30

28:                                               ; preds = %26
  %29 = bitcast [2 x %"class.std::__1::vector.203"]* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %29) #14
  unreachable

30:                                               ; preds = %26
  %31 = tail call i8* @_Znwm(i64 %23) #13
  %32 = bitcast i8* %31 to %"struct.jxl::Token"*
  %33 = getelementptr inbounds [2 x %"class.std::__1::vector.203"], [2 x %"class.std::__1::vector.203"]* %5, i64 0, i64 0, i32 0, i32 1
  %34 = bitcast %"struct.jxl::Token"** %33 to i8**
  store i8* %31, i8** %34, align 8
  %35 = bitcast [2 x %"class.std::__1::vector.203"]* %5 to i8**
  store i8* %31, i8** %35, align 8
  %36 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %32, i64 %24
  %37 = getelementptr inbounds [2 x %"class.std::__1::vector.203"], [2 x %"class.std::__1::vector.203"]* %5, i64 0, i64 0, i32 0, i32 2, i32 0, i32 0
  store %"struct.jxl::Token"* %36, %"struct.jxl::Token"** %37, align 8
  %38 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %17, i64 0, i32 0, i32 0
  %39 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %38, align 8
  %40 = load i64, i64* %19, align 8
  %41 = bitcast %"struct.jxl::Token"** %33 to i64*
  %42 = ptrtoint i8* %31 to i64
  %43 = ptrtoint %"struct.jxl::Token"* %39 to i64
  %44 = sub i64 %40, %43
  %45 = icmp sgt i64 %44, 0
  br i1 %45, label %46, label %51

46:                                               ; preds = %30
  %47 = lshr exact i64 %44, 3
  %48 = bitcast %"struct.jxl::Token"* %39 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %31, i8* align 4 %48, i64 %44, i1 false) #8
  %49 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %32, i64 %47
  %50 = ptrtoint %"struct.jxl::Token"* %49 to i64
  br label %51

51:                                               ; preds = %46, %30
  %52 = phi i64 [ %50, %46 ], [ %42, %30 ]
  store i64 %52, i64* %41, align 8
  %53 = ptrtoint i8* %31 to i64
  br label %54

54:                                               ; preds = %3, %51
  %55 = phi i8* [ null, %3 ], [ %31, %51 ]
  %56 = phi %"struct.jxl::Token"* [ null, %3 ], [ %32, %51 ]
  %57 = phi i64 [ 0, %3 ], [ %53, %51 ]
  %58 = phi i64 [ 0, %3 ], [ %42, %51 ]
  %59 = phi i64 [ 0, %3 ], [ %52, %51 ]
  %60 = getelementptr inbounds [2 x %"class.std::__1::vector.203"], [2 x %"class.std::__1::vector.203"]* %5, i64 0, i64 1
  %61 = sext i32 %2 to i64
  %62 = load %"class.std::__1::vector.203"*, %"class.std::__1::vector.203"** %15, align 8
  %63 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %62, i64 %61
  %64 = bitcast %"class.std::__1::vector.203"* %60 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %64, i8 0, i64 24, i1 false) #8
  %65 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %62, i64 %61, i32 0, i32 1
  %66 = bitcast %"struct.jxl::Token"** %65 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = bitcast %"class.std::__1::vector.203"* %63 to i64*
  %69 = load i64, i64* %68, align 8
  %70 = sub i64 %67, %69
  %71 = ashr exact i64 %70, 3
  %72 = icmp eq i64 %70, 0
  br i1 %72, label %101, label %73

73:                                               ; preds = %54
  %74 = icmp ugt i64 %71, 2305843009213693951
  br i1 %74, label %75, label %77

75:                                               ; preds = %73
  %76 = bitcast %"class.std::__1::vector.203"* %60 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %76) #14
  unreachable

77:                                               ; preds = %73
  %78 = tail call i8* @_Znwm(i64 %70) #13
  %79 = bitcast i8* %78 to %"struct.jxl::Token"*
  %80 = getelementptr inbounds [2 x %"class.std::__1::vector.203"], [2 x %"class.std::__1::vector.203"]* %5, i64 0, i64 1, i32 0, i32 1
  %81 = bitcast %"struct.jxl::Token"** %80 to i8**
  store i8* %78, i8** %81, align 8
  %82 = bitcast %"class.std::__1::vector.203"* %60 to i8**
  store i8* %78, i8** %82, align 8
  %83 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %79, i64 %71
  %84 = getelementptr inbounds [2 x %"class.std::__1::vector.203"], [2 x %"class.std::__1::vector.203"]* %5, i64 0, i64 1, i32 0, i32 2, i32 0, i32 0
  store %"struct.jxl::Token"* %83, %"struct.jxl::Token"** %84, align 8
  %85 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %63, i64 0, i32 0, i32 0
  %86 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %85, align 8
  %87 = load i64, i64* %66, align 8
  %88 = bitcast %"struct.jxl::Token"** %80 to i64*
  %89 = ptrtoint i8* %78 to i64
  %90 = ptrtoint %"struct.jxl::Token"* %86 to i64
  %91 = sub i64 %87, %90
  %92 = icmp sgt i64 %91, 0
  br i1 %92, label %93, label %98

93:                                               ; preds = %77
  %94 = lshr exact i64 %91, 3
  %95 = bitcast %"struct.jxl::Token"* %86 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %78, i8* align 4 %95, i64 %91, i1 false) #8
  %96 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %79, i64 %94
  %97 = ptrtoint %"struct.jxl::Token"* %96 to i64
  br label %98

98:                                               ; preds = %93, %77
  %99 = phi i64 [ %97, %93 ], [ %89, %77 ]
  store i64 %99, i64* %88, align 8
  %100 = ptrtoint i8* %78 to i64
  br label %101

101:                                              ; preds = %54, %98
  %102 = phi i8* [ null, %54 ], [ %78, %98 ]
  %103 = phi %"struct.jxl::Token"* [ null, %54 ], [ %79, %98 ]
  %104 = phi i64 [ 0, %54 ], [ %100, %98 ]
  %105 = phi i64 [ 0, %54 ], [ %89, %98 ]
  %106 = phi i64 [ 0, %54 ], [ %99, %98 ]
  %107 = tail call i8* @_Znwm(i64 48) #13
  %108 = bitcast %"class.std::__1::vector.203"** %8 to i8**
  store i8* %107, i8** %108, align 8
  %109 = bitcast %"class.std::__1::vector.201"* %4 to i8**
  store i8* %107, i8** %109, align 8
  %110 = getelementptr inbounds i8, i8* %107, i64 48
  %111 = bitcast %"class.std::__1::vector.203"** %9 to i8**
  store i8* %110, i8** %111, align 8
  %112 = bitcast %"class.std::__1::vector.203"** %8 to i64*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %107, i8 0, i64 24, i1 false) #8
  %113 = sub i64 %59, %58
  %114 = ashr exact i64 %113, 3
  %115 = icmp eq i64 %113, 0
  br i1 %115, label %140, label %116

116:                                              ; preds = %101
  %117 = icmp ugt i64 %114, 2305843009213693951
  br i1 %117, label %118, label %121

118:                                              ; preds = %208, %116
  %119 = phi i8* [ %107, %116 ], [ %141, %208 ]
  %120 = bitcast i8* %119 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %120) #14
  unreachable

121:                                              ; preds = %116
  %122 = call i8* @_Znwm(i64 %113) #13
  %123 = bitcast i8* %122 to %"struct.jxl::Token"*
  %124 = getelementptr inbounds i8, i8* %107, i64 8
  %125 = bitcast i8* %124 to i8**
  store i8* %122, i8** %125, align 8
  %126 = bitcast i8* %107 to i8**
  store i8* %122, i8** %126, align 8
  %127 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %123, i64 %114
  %128 = getelementptr inbounds i8, i8* %107, i64 16
  %129 = bitcast i8* %128 to %"struct.jxl::Token"**
  store %"struct.jxl::Token"* %127, %"struct.jxl::Token"** %129, align 8
  %130 = bitcast i8* %124 to i64*
  %131 = ptrtoint i8* %122 to i64
  %132 = sub i64 %59, %57
  %133 = icmp sgt i64 %132, 0
  br i1 %133, label %134, label %138

134:                                              ; preds = %121
  %135 = lshr exact i64 %132, 3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %122, i8* align 4 %55, i64 %132, i1 false) #8
  %136 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %123, i64 %135
  %137 = ptrtoint %"struct.jxl::Token"* %136 to i64
  br label %138

138:                                              ; preds = %134, %121
  %139 = phi i64 [ %137, %134 ], [ %131, %121 ]
  store i64 %139, i64* %130, align 8
  br label %140

140:                                              ; preds = %138, %101
  %141 = getelementptr inbounds i8, i8* %107, i64 24
  call void @llvm.memset.p0i8.i64(i8* align 8 %141, i8 0, i64 24, i1 false) #8
  %142 = sub i64 %106, %105
  %143 = ashr exact i64 %142, 3
  %144 = icmp eq i64 %142, 0
  br i1 %144, label %229, label %208

145:                                              ; preds = %229
  %146 = ptrtoint %"struct.jxl::Token"* %103 to i64
  %147 = getelementptr inbounds [2 x %"class.std::__1::vector.203"], [2 x %"class.std::__1::vector.203"]* %5, i64 0, i64 1, i32 0, i32 1
  %148 = bitcast %"struct.jxl::Token"** %147 to i64*
  store i64 %146, i64* %148, align 8
  call void @_ZdlPv(i8* %102) #13
  %149 = getelementptr inbounds [2 x %"class.std::__1::vector.203"], [2 x %"class.std::__1::vector.203"]* %5, i64 0, i64 0, i32 0, i32 0
  %150 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %149, align 8
  %151 = bitcast %"struct.jxl::Token"* %150 to i8*
  br label %152

152:                                              ; preds = %229, %145
  %153 = phi i8* [ %55, %229 ], [ %151, %145 ]
  %154 = phi %"struct.jxl::Token"* [ %56, %229 ], [ %150, %145 ]
  %155 = icmp eq %"struct.jxl::Token"* %154, null
  br i1 %155, label %182, label %178

156:                                              ; preds = %182
  %157 = bitcast %"class.std::__1::vector.203"* %206 to i8*
  %158 = load %"class.std::__1::vector.203"*, %"class.std::__1::vector.203"** %8, align 8
  %159 = icmp eq %"class.std::__1::vector.203"* %158, %206
  br i1 %159, label %175, label %160

160:                                              ; preds = %156, %171
  %161 = phi %"class.std::__1::vector.203"* [ %162, %171 ], [ %158, %156 ]
  %162 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %161, i64 -1
  %163 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %162, i64 0, i32 0, i32 0
  %164 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %163, align 8
  %165 = icmp eq %"struct.jxl::Token"* %164, null
  br i1 %165, label %171, label %166

166:                                              ; preds = %160
  %167 = ptrtoint %"struct.jxl::Token"* %164 to i64
  %168 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %161, i64 -1, i32 0, i32 1
  %169 = bitcast %"struct.jxl::Token"** %168 to i64*
  store i64 %167, i64* %169, align 8
  %170 = bitcast %"struct.jxl::Token"* %164 to i8*
  call void @_ZdlPv(i8* %170) #13
  br label %171

171:                                              ; preds = %166, %160
  %172 = icmp eq %"class.std::__1::vector.203"* %162, %206
  br i1 %172, label %173, label %160

173:                                              ; preds = %171
  %174 = load i8*, i8** %109, align 8
  br label %175

175:                                              ; preds = %173, %156
  %176 = phi i8* [ %174, %173 ], [ %157, %156 ]
  store %"class.std::__1::vector.203"* %206, %"class.std::__1::vector.203"** %8, align 8
  call void @_ZdlPv(i8* %176) #13
  br label %177

177:                                              ; preds = %182, %175
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #8
  ret float %205

178:                                              ; preds = %152
  %179 = ptrtoint %"struct.jxl::Token"* %154 to i64
  %180 = getelementptr inbounds [2 x %"class.std::__1::vector.203"], [2 x %"class.std::__1::vector.203"]* %5, i64 0, i64 0, i32 0, i32 1
  %181 = bitcast %"struct.jxl::Token"** %180 to i64*
  store i64 %179, i64* %181, align 8
  call void @_ZdlPv(i8* %153) #13
  br label %182

182:                                              ; preds = %178, %152
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %10) #8
  %183 = getelementptr inbounds %class.anon.453, %class.anon.453* %0, i64 0, i32 1
  %184 = load %class.anon.451*, %class.anon.451** %183, align 8
  %185 = getelementptr inbounds %class.anon.453, %class.anon.453* %0, i64 0, i32 2
  %186 = load i64*, i64** %185, align 8
  %187 = load i64, i64* %186, align 8
  %188 = getelementptr inbounds %class.anon.451, %class.anon.451* %184, i64 0, i32 0
  %189 = load %"struct.jxl::HistogramParams"*, %"struct.jxl::HistogramParams"** %188, align 8
  %190 = getelementptr inbounds %class.anon.451, %class.anon.451* %184, i64 0, i32 1
  %191 = load %"struct.jxl::EntropyEncodingData"*, %"struct.jxl::EntropyEncodingData"** %190, align 8
  %192 = getelementptr inbounds %class.anon.451, %class.anon.451* %184, i64 0, i32 2
  %193 = load %"class.std::__1::vector.21"*, %"class.std::__1::vector.21"** %192, align 8
  %194 = call i64 @_ZN3jxl24BuildAndEncodeHistogramsERKNS_15HistogramParamsEmRNSt3__16vectorINS4_INS_5TokenENS3_9allocatorIS5_EEEENS6_IS8_EEEEPNS_19EntropyEncodingDataEPNS4_IhNS6_IhEEEEPNS_9BitWriterEmPNS_6AuxOutE(%"struct.jxl::HistogramParams"* dereferenceable(56) %189, i64 %187, %"class.std::__1::vector.201"* nonnull dereferenceable(24) %4, %"struct.jxl::EntropyEncodingData"* %191, %"class.std::__1::vector.21"* %193, %"struct.jxl::BitWriter"* null, i64 0, %"struct.jxl::AuxOut"* null) #8
  %195 = uitofp i64 %194 to float
  %196 = getelementptr inbounds %class.anon.453, %class.anon.453* %0, i64 0, i32 3
  %197 = load %"class.std::__1::vector.445"*, %"class.std::__1::vector.445"** %196, align 8
  %198 = getelementptr inbounds %"class.std::__1::vector.445", %"class.std::__1::vector.445"* %197, i64 0, i32 0, i32 0
  %199 = load float*, float** %198, align 8
  %200 = getelementptr inbounds float, float* %199, i64 %14
  %201 = load float, float* %200, align 4
  %202 = fsub float %195, %201
  %203 = getelementptr inbounds float, float* %199, i64 %61
  %204 = load float, float* %203, align 4
  %205 = fsub float %202, %204
  %206 = load %"class.std::__1::vector.203"*, %"class.std::__1::vector.203"** %7, align 8
  %207 = icmp eq %"class.std::__1::vector.203"* %206, null
  br i1 %207, label %177, label %156

208:                                              ; preds = %140
  %209 = icmp ugt i64 %143, 2305843009213693951
  br i1 %209, label %118, label %210

210:                                              ; preds = %208
  %211 = call i8* @_Znwm(i64 %142) #13
  %212 = bitcast i8* %211 to %"struct.jxl::Token"*
  %213 = getelementptr inbounds i8, i8* %107, i64 32
  %214 = bitcast i8* %213 to i8**
  store i8* %211, i8** %214, align 8
  %215 = bitcast i8* %141 to i8**
  store i8* %211, i8** %215, align 8
  %216 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %212, i64 %143
  %217 = getelementptr inbounds i8, i8* %107, i64 40
  %218 = bitcast i8* %217 to %"struct.jxl::Token"**
  store %"struct.jxl::Token"* %216, %"struct.jxl::Token"** %218, align 8
  %219 = bitcast i8* %213 to i64*
  %220 = ptrtoint i8* %211 to i64
  %221 = sub i64 %106, %104
  %222 = icmp sgt i64 %221, 0
  br i1 %222, label %223, label %227

223:                                              ; preds = %210
  %224 = lshr exact i64 %221, 3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %211, i8* align 4 %102, i64 %221, i1 false) #8
  %225 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %212, i64 %224
  %226 = ptrtoint %"struct.jxl::Token"* %225 to i64
  br label %227

227:                                              ; preds = %223, %210
  %228 = phi i64 [ %226, %223 ], [ %220, %210 ]
  store i64 %228, i64* %219, align 8
  br label %229

229:                                              ; preds = %227, %140
  %230 = getelementptr inbounds i8, i8* %107, i64 48
  %231 = ptrtoint i8* %230 to i64
  store i64 %231, i64* %112, align 8
  %232 = icmp eq %"struct.jxl::Token"* %103, null
  br i1 %232, label %152, label %145
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc i64 @"_ZZN3jxl12_GLOBAL__N_113ClusterGroupsEPNS_18PassesEncoderStateEENK3$_7clENSt3__16vectorImNS4_9allocatorImEEEE"(%class.anon.456* nocapture readonly, %"class.std::__1::vector.147"* nocapture readonly) unnamed_addr #4 align 2 {
  %3 = alloca %"struct.jxl::BitWriter", align 8
  %4 = alloca %"class.std::__1::vector.147", align 8
  %5 = alloca %"class.std::__1::vector.201", align 8
  %6 = bitcast %"class.std::__1::vector.147"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #8
  %7 = getelementptr inbounds %"class.std::__1::vector.147", %"class.std::__1::vector.147"* %4, i64 0, i32 0, i32 0
  %8 = getelementptr inbounds %"class.std::__1::vector.147", %"class.std::__1::vector.147"* %4, i64 0, i32 0, i32 1
  %9 = getelementptr inbounds %"class.std::__1::vector.147", %"class.std::__1::vector.147"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  %10 = getelementptr inbounds %"class.std::__1::vector.147", %"class.std::__1::vector.147"* %1, i64 0, i32 0, i32 1
  %11 = bitcast i64** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %"class.std::__1::vector.147"* %1 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = sub i64 %12, %14
  %16 = ashr exact i64 %15, 3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 0, i64 24, i1 false) #8
  %17 = icmp eq i64 %15, 0
  br i1 %17, label %122, label %18

18:                                               ; preds = %2
  %19 = icmp ugt i64 %16, 2305843009213693951
  br i1 %19, label %20, label %22

20:                                               ; preds = %18
  %21 = bitcast %"class.std::__1::vector.147"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %21) #14
  unreachable

22:                                               ; preds = %18
  %23 = tail call i8* @_Znwm(i64 %15) #13
  %24 = bitcast i8* %23 to i64*
  %25 = bitcast i64** %8 to i8**
  store i8* %23, i8** %25, align 8
  %26 = bitcast %"class.std::__1::vector.147"* %4 to i8**
  store i8* %23, i8** %26, align 8
  %27 = getelementptr inbounds i64, i64* %24, i64 %16
  store i64* %27, i64** %9, align 8
  %28 = add i64 %15, -8
  %29 = lshr i64 %28, 3
  %30 = add nuw nsw i64 %29, 1
  %31 = icmp ult i64 %30, 4
  br i1 %31, label %106, label %32

32:                                               ; preds = %22
  %33 = and i64 %30, 4611686018427387900
  %34 = getelementptr i64, i64* %24, i64 %33
  %35 = insertelement <2 x i64> undef, i64 %16, i32 0
  %36 = shufflevector <2 x i64> %35, <2 x i64> undef, <2 x i32> zeroinitializer
  %37 = insertelement <2 x i64> undef, i64 %16, i32 0
  %38 = shufflevector <2 x i64> %37, <2 x i64> undef, <2 x i32> zeroinitializer
  %39 = add nsw i64 %33, -4
  %40 = lshr exact i64 %39, 2
  %41 = add nuw nsw i64 %40, 1
  %42 = and i64 %41, 7
  %43 = icmp ult i64 %39, 28
  br i1 %43, label %91, label %44

44:                                               ; preds = %32
  %45 = sub nsw i64 %41, %42
  br label %46

46:                                               ; preds = %46, %44
  %47 = phi i64 [ 0, %44 ], [ %88, %46 ]
  %48 = phi i64 [ %45, %44 ], [ %89, %46 ]
  %49 = getelementptr i64, i64* %24, i64 %47
  %50 = bitcast i64* %49 to <2 x i64>*
  store <2 x i64> %36, <2 x i64>* %50, align 8
  %51 = getelementptr i64, i64* %49, i64 2
  %52 = bitcast i64* %51 to <2 x i64>*
  store <2 x i64> %38, <2 x i64>* %52, align 8
  %53 = or i64 %47, 4
  %54 = getelementptr i64, i64* %24, i64 %53
  %55 = bitcast i64* %54 to <2 x i64>*
  store <2 x i64> %36, <2 x i64>* %55, align 8
  %56 = getelementptr i64, i64* %54, i64 2
  %57 = bitcast i64* %56 to <2 x i64>*
  store <2 x i64> %38, <2 x i64>* %57, align 8
  %58 = or i64 %47, 8
  %59 = getelementptr i64, i64* %24, i64 %58
  %60 = bitcast i64* %59 to <2 x i64>*
  store <2 x i64> %36, <2 x i64>* %60, align 8
  %61 = getelementptr i64, i64* %59, i64 2
  %62 = bitcast i64* %61 to <2 x i64>*
  store <2 x i64> %38, <2 x i64>* %62, align 8
  %63 = or i64 %47, 12
  %64 = getelementptr i64, i64* %24, i64 %63
  %65 = bitcast i64* %64 to <2 x i64>*
  store <2 x i64> %36, <2 x i64>* %65, align 8
  %66 = getelementptr i64, i64* %64, i64 2
  %67 = bitcast i64* %66 to <2 x i64>*
  store <2 x i64> %38, <2 x i64>* %67, align 8
  %68 = or i64 %47, 16
  %69 = getelementptr i64, i64* %24, i64 %68
  %70 = bitcast i64* %69 to <2 x i64>*
  store <2 x i64> %36, <2 x i64>* %70, align 8
  %71 = getelementptr i64, i64* %69, i64 2
  %72 = bitcast i64* %71 to <2 x i64>*
  store <2 x i64> %38, <2 x i64>* %72, align 8
  %73 = or i64 %47, 20
  %74 = getelementptr i64, i64* %24, i64 %73
  %75 = bitcast i64* %74 to <2 x i64>*
  store <2 x i64> %36, <2 x i64>* %75, align 8
  %76 = getelementptr i64, i64* %74, i64 2
  %77 = bitcast i64* %76 to <2 x i64>*
  store <2 x i64> %38, <2 x i64>* %77, align 8
  %78 = or i64 %47, 24
  %79 = getelementptr i64, i64* %24, i64 %78
  %80 = bitcast i64* %79 to <2 x i64>*
  store <2 x i64> %36, <2 x i64>* %80, align 8
  %81 = getelementptr i64, i64* %79, i64 2
  %82 = bitcast i64* %81 to <2 x i64>*
  store <2 x i64> %38, <2 x i64>* %82, align 8
  %83 = or i64 %47, 28
  %84 = getelementptr i64, i64* %24, i64 %83
  %85 = bitcast i64* %84 to <2 x i64>*
  store <2 x i64> %36, <2 x i64>* %85, align 8
  %86 = getelementptr i64, i64* %84, i64 2
  %87 = bitcast i64* %86 to <2 x i64>*
  store <2 x i64> %38, <2 x i64>* %87, align 8
  %88 = add i64 %47, 32
  %89 = add i64 %48, -8
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %46, !llvm.loop !86

91:                                               ; preds = %46, %32
  %92 = phi i64 [ 0, %32 ], [ %88, %46 ]
  %93 = icmp eq i64 %42, 0
  br i1 %93, label %104, label %94

94:                                               ; preds = %91, %94
  %95 = phi i64 [ %101, %94 ], [ %92, %91 ]
  %96 = phi i64 [ %102, %94 ], [ %42, %91 ]
  %97 = getelementptr i64, i64* %24, i64 %95
  %98 = bitcast i64* %97 to <2 x i64>*
  store <2 x i64> %36, <2 x i64>* %98, align 8
  %99 = getelementptr i64, i64* %97, i64 2
  %100 = bitcast i64* %99 to <2 x i64>*
  store <2 x i64> %38, <2 x i64>* %100, align 8
  %101 = add i64 %95, 4
  %102 = add i64 %96, -1
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %104, label %94, !llvm.loop !87

104:                                              ; preds = %94, %91
  %105 = icmp eq i64 %30, %33
  br i1 %105, label %112, label %106

106:                                              ; preds = %104, %22
  %107 = phi i64* [ %24, %22 ], [ %34, %104 ]
  br label %108

108:                                              ; preds = %106, %108
  %109 = phi i64* [ %110, %108 ], [ %107, %106 ]
  store i64 %16, i64* %109, align 8
  %110 = getelementptr inbounds i64, i64* %109, i64 1
  %111 = icmp eq i64* %110, %27
  br i1 %111, label %112, label %108, !llvm.loop !88

112:                                              ; preds = %108, %104
  %113 = bitcast i64** %8 to i64*
  %114 = ptrtoint i64* %27 to i64
  store i64 %114, i64* %113, align 8
  %115 = load i64, i64* %11, align 8
  %116 = load i64, i64* %13, align 8
  %117 = sub i64 %115, %116
  %118 = icmp eq i64 %117, 0
  br i1 %118, label %122, label %119

119:                                              ; preds = %112
  %120 = ashr exact i64 %117, 3
  %121 = getelementptr inbounds %"class.std::__1::vector.147", %"class.std::__1::vector.147"* %1, i64 0, i32 0, i32 0
  br label %138

122:                                              ; preds = %154, %2, %112
  %123 = bitcast %"class.std::__1::vector.201"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %123) #8
  %124 = getelementptr inbounds %"class.std::__1::vector.201", %"class.std::__1::vector.201"* %5, i64 0, i32 0, i32 0
  %125 = getelementptr inbounds %"class.std::__1::vector.201", %"class.std::__1::vector.201"* %5, i64 0, i32 0, i32 1
  %126 = getelementptr inbounds %class.anon.456, %class.anon.456* %0, i64 0, i32 0
  %127 = bitcast %"class.std::__1::vector.201"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %127, i8 -86, i64 24, i1 false)
  %128 = load %"class.std::__1::vector.201"*, %"class.std::__1::vector.201"** %126, align 8
  call void @_ZNSt3__16vectorINS0_IN3jxl5TokenENS_9allocatorIS2_EEEENS3_IS5_EEEC2ERKS7_(%"class.std::__1::vector.201"* nonnull %5, %"class.std::__1::vector.201"* dereferenceable(24) %128)
  %129 = bitcast %"class.std::__1::vector.203"** %125 to i64*
  %130 = load i64, i64* %129, align 8
  %131 = bitcast %"class.std::__1::vector.201"* %5 to i64*
  %132 = load i64, i64* %131, align 8
  %133 = icmp eq i64 %130, %132
  br i1 %133, label %183, label %134

134:                                              ; preds = %122
  %135 = getelementptr inbounds %class.anon.456, %class.anon.456* %0, i64 0, i32 1
  %136 = getelementptr inbounds %"class.std::__1::vector.147", %"class.std::__1::vector.147"* %1, i64 0, i32 0, i32 0
  %137 = getelementptr inbounds %class.anon.456, %class.anon.456* %0, i64 0, i32 2
  br label %170

138:                                              ; preds = %168, %119
  %139 = phi i64* [ %24, %119 ], [ %169, %168 ]
  %140 = phi i64 [ %116, %119 ], [ %164, %168 ]
  %141 = phi i64 [ %120, %119 ], [ %166, %168 ]
  %142 = phi i64 [ 0, %119 ], [ %157, %168 ]
  %143 = phi i64 [ 0, %119 ], [ %162, %168 ]
  %144 = inttoptr i64 %140 to i64*
  %145 = getelementptr inbounds i64, i64* %144, i64 %143
  %146 = load i64, i64* %145, align 8
  %147 = getelementptr inbounds i64, i64* %139, i64 %146
  %148 = load i64, i64* %147, align 8
  %149 = icmp eq i64 %148, %141
  br i1 %149, label %150, label %154

150:                                              ; preds = %138
  %151 = add i64 %142, 1
  store i64 %142, i64* %147, align 8
  %152 = load i64*, i64** %121, align 8
  %153 = load i64*, i64** %7, align 8
  br label %154

154:                                              ; preds = %150, %138
  %155 = phi i64* [ %153, %150 ], [ %139, %138 ]
  %156 = phi i64* [ %152, %150 ], [ %144, %138 ]
  %157 = phi i64 [ %151, %150 ], [ %142, %138 ]
  %158 = getelementptr inbounds i64, i64* %156, i64 %143
  %159 = load i64, i64* %158, align 8
  %160 = getelementptr inbounds i64, i64* %155, i64 %159
  %161 = load i64, i64* %160, align 8
  store i64 %161, i64* %158, align 8
  %162 = add nuw i64 %143, 1
  %163 = load i64, i64* %11, align 8
  %164 = load i64, i64* %13, align 8
  %165 = sub i64 %163, %164
  %166 = ashr exact i64 %165, 3
  %167 = icmp ult i64 %162, %166
  br i1 %167, label %168, label %122

168:                                              ; preds = %154
  %169 = load i64*, i64** %7, align 8
  br label %138

170:                                              ; preds = %134, %261
  %171 = phi i64 [ %132, %134 ], [ %262, %261 ]
  %172 = phi i64 [ %130, %134 ], [ %263, %261 ]
  %173 = phi i64 [ 0, %134 ], [ %265, %261 ]
  %174 = phi i64 [ 0, %134 ], [ %264, %261 ]
  %175 = inttoptr i64 %171 to %"class.std::__1::vector.203"*
  %176 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %175, i64 %173
  %177 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %175, i64 %173, i32 0, i32 1
  %178 = bitcast %"struct.jxl::Token"** %177 to i64*
  %179 = load i64, i64* %178, align 8
  %180 = bitcast %"class.std::__1::vector.203"* %176 to i64*
  %181 = load i64, i64* %180, align 8
  %182 = icmp eq i64 %179, %181
  br i1 %182, label %261, label %269

183:                                              ; preds = %261, %122
  %184 = phi i64 [ 0, %122 ], [ %264, %261 ]
  %185 = getelementptr inbounds %class.anon.456, %class.anon.456* %0, i64 0, i32 3
  %186 = load %class.anon.451*, %class.anon.451** %185, align 8
  %187 = getelementptr inbounds %class.anon.456, %class.anon.456* %0, i64 0, i32 2
  %188 = load i64*, i64** %187, align 8
  %189 = load i64, i64* %188, align 8
  %190 = mul i64 %189, %184
  %191 = bitcast %"struct.jxl::BitWriter"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %191) #8
  %192 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %3, i64 0, i32 0
  %193 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %3, i64 0, i32 1, i32 2, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %191, i8 0, i64 40, i1 false) #8
  %194 = getelementptr inbounds %class.anon.451, %class.anon.451* %186, i64 0, i32 0
  %195 = load %"struct.jxl::HistogramParams"*, %"struct.jxl::HistogramParams"** %194, align 8
  %196 = getelementptr inbounds %class.anon.451, %class.anon.451* %186, i64 0, i32 1
  %197 = load %"struct.jxl::EntropyEncodingData"*, %"struct.jxl::EntropyEncodingData"** %196, align 8
  %198 = getelementptr inbounds %class.anon.451, %class.anon.451* %186, i64 0, i32 2
  %199 = load %"class.std::__1::vector.21"*, %"class.std::__1::vector.21"** %198, align 8
  %200 = call i64 @_ZN3jxl24BuildAndEncodeHistogramsERKNS_15HistogramParamsEmRNSt3__16vectorINS4_INS_5TokenENS3_9allocatorIS5_EEEENS6_IS8_EEEEPNS_19EntropyEncodingDataEPNS4_IhNS6_IhEEEEPNS_9BitWriterEmPNS_6AuxOutE(%"struct.jxl::HistogramParams"* dereferenceable(56) %195, i64 %190, %"class.std::__1::vector.201"* nonnull dereferenceable(24) %5, %"struct.jxl::EntropyEncodingData"* %197, %"class.std::__1::vector.21"* %199, %"struct.jxl::BitWriter"* nonnull %3, i64 0, %"struct.jxl::AuxOut"* null) #8
  %201 = load i64, i64* %129, align 8
  %202 = load i64, i64* %131, align 8
  %203 = icmp eq i64 %201, %202
  br i1 %203, label %204, label %210

204:                                              ; preds = %210, %183
  %205 = phi i64 [ %202, %183 ], [ %219, %210 ]
  %206 = inttoptr i64 %205 to %"class.std::__1::vector.203"*
  %207 = load i64, i64* %192, align 8
  %208 = load i8*, i8** %193, align 8
  store i8* null, i8** %193, align 8
  %209 = icmp eq i8* %208, null
  br i1 %209, label %225, label %223

210:                                              ; preds = %183, %210
  %211 = phi i64 [ %219, %210 ], [ %202, %183 ]
  %212 = phi i64 [ %217, %210 ], [ 0, %183 ]
  %213 = inttoptr i64 %211 to %"class.std::__1::vector.203"*
  %214 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %213, i64 %212
  %215 = load %"struct.jxl::EntropyEncodingData"*, %"struct.jxl::EntropyEncodingData"** %196, align 8
  %216 = load %"class.std::__1::vector.21"*, %"class.std::__1::vector.21"** %198, align 8
  call void @_ZN3jxl11WriteTokensERKNSt3__16vectorINS_5TokenENS0_9allocatorIS2_EEEERKNS_19EntropyEncodingDataERKNS1_IhNS3_IhEEEEPNS_9BitWriterEmPNS_6AuxOutE(%"class.std::__1::vector.203"* dereferenceable(24) %214, %"struct.jxl::EntropyEncodingData"* dereferenceable(104) %215, %"class.std::__1::vector.21"* dereferenceable(24) %216, %"struct.jxl::BitWriter"* nonnull %3, i64 0, %"struct.jxl::AuxOut"* null) #8
  %217 = add nuw i64 %212, 1
  %218 = load i64, i64* %129, align 8
  %219 = load i64, i64* %131, align 8
  %220 = sub i64 %218, %219
  %221 = sdiv exact i64 %220, 24
  %222 = icmp ult i64 %217, %221
  br i1 %222, label %210, label %204

223:                                              ; preds = %204
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %208) #8
  %224 = load %"class.std::__1::vector.203"*, %"class.std::__1::vector.203"** %124, align 8
  br label %225

225:                                              ; preds = %204, %223
  %226 = phi %"class.std::__1::vector.203"* [ %206, %204 ], [ %224, %223 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %191) #8
  %227 = icmp eq %"class.std::__1::vector.203"* %226, null
  br i1 %227, label %250, label %228

228:                                              ; preds = %225
  %229 = bitcast %"class.std::__1::vector.203"* %226 to i8*
  %230 = load %"class.std::__1::vector.203"*, %"class.std::__1::vector.203"** %125, align 8
  %231 = icmp eq %"class.std::__1::vector.203"* %230, %226
  br i1 %231, label %248, label %232

232:                                              ; preds = %228, %243
  %233 = phi %"class.std::__1::vector.203"* [ %234, %243 ], [ %230, %228 ]
  %234 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %233, i64 -1
  %235 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %234, i64 0, i32 0, i32 0
  %236 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %235, align 8
  %237 = icmp eq %"struct.jxl::Token"* %236, null
  br i1 %237, label %243, label %238

238:                                              ; preds = %232
  %239 = ptrtoint %"struct.jxl::Token"* %236 to i64
  %240 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %233, i64 -1, i32 0, i32 1
  %241 = bitcast %"struct.jxl::Token"** %240 to i64*
  store i64 %239, i64* %241, align 8
  %242 = bitcast %"struct.jxl::Token"* %236 to i8*
  call void @_ZdlPv(i8* %242) #13
  br label %243

243:                                              ; preds = %238, %232
  %244 = icmp eq %"class.std::__1::vector.203"* %234, %226
  br i1 %244, label %245, label %232

245:                                              ; preds = %243
  %246 = bitcast %"class.std::__1::vector.201"* %5 to i8**
  %247 = load i8*, i8** %246, align 8
  br label %248

248:                                              ; preds = %245, %228
  %249 = phi i8* [ %247, %245 ], [ %229, %228 ]
  store %"class.std::__1::vector.203"* %226, %"class.std::__1::vector.203"** %125, align 8
  call void @_ZdlPv(i8* %249) #13
  br label %250

250:                                              ; preds = %225, %248
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %123) #8
  %251 = load i64*, i64** %7, align 8
  %252 = icmp eq i64* %251, null
  br i1 %252, label %257, label %253

253:                                              ; preds = %250
  %254 = ptrtoint i64* %251 to i64
  %255 = bitcast i64** %8 to i64*
  store i64 %254, i64* %255, align 8
  %256 = bitcast i64* %251 to i8*
  call void @_ZdlPv(i8* %256) #13
  br label %257

257:                                              ; preds = %250, %253
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #8
  ret i64 %207

258:                                              ; preds = %269
  %259 = ptrtoint %"class.std::__1::vector.203"* %297 to i64
  %260 = load i64, i64* %129, align 8
  br label %261

261:                                              ; preds = %258, %170
  %262 = phi i64 [ %171, %170 ], [ %259, %258 ]
  %263 = phi i64 [ %172, %170 ], [ %260, %258 ]
  %264 = phi i64 [ %174, %170 ], [ %295, %258 ]
  %265 = add nuw i64 %173, 1
  %266 = sub i64 %263, %262
  %267 = sdiv exact i64 %266, 24
  %268 = icmp ult i64 %265, %267
  br i1 %268, label %170, label %183

269:                                              ; preds = %170, %269
  %270 = phi %"class.std::__1::vector.203"* [ %297, %269 ], [ %175, %170 ]
  %271 = phi i64 [ %296, %269 ], [ 0, %170 ]
  %272 = phi i64 [ %295, %269 ], [ %174, %170 ]
  %273 = load %"struct.jxl::PassesEncoderState"**, %"struct.jxl::PassesEncoderState"*** %135, align 8
  %274 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %273, align 8
  %275 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %274, i64 0, i32 8, i32 0, i32 0
  %276 = load i8*, i8** %275, align 8
  %277 = getelementptr inbounds i8, i8* %276, i64 %173
  %278 = load i8, i8* %277, align 1
  %279 = zext i8 %278 to i64
  %280 = load i64*, i64** %136, align 8
  %281 = getelementptr inbounds i64, i64* %280, i64 %279
  %282 = load i64, i64* %281, align 8
  %283 = load i64*, i64** %137, align 8
  %284 = load i64, i64* %283, align 8
  %285 = mul i64 %284, %282
  %286 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %270, i64 %173, i32 0, i32 0
  %287 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %286, align 8
  %288 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %287, i64 %271, i32 0
  %289 = load i32, i32* %288, align 4
  %290 = trunc i64 %285 to i32
  %291 = shl i32 %290, 1
  %292 = add i32 %291, %289
  store i32 %292, i32* %288, align 4
  %293 = add i64 %282, 1
  %294 = icmp ult i64 %293, %272
  %295 = select i1 %294, i64 %272, i64 %293
  %296 = add nuw i64 %271, 1
  %297 = load %"class.std::__1::vector.203"*, %"class.std::__1::vector.203"** %124, align 8
  %298 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %297, i64 %173
  %299 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %297, i64 %173, i32 0, i32 1
  %300 = bitcast %"struct.jxl::Token"** %299 to i64*
  %301 = load i64, i64* %300, align 8
  %302 = bitcast %"class.std::__1::vector.203"* %298 to i64*
  %303 = load i64, i64* %302, align 8
  %304 = sub i64 %301, %303
  %305 = ashr exact i64 %304, 3
  %306 = icmp ult i64 %296, %305
  br i1 %306, label %269, label %258
}

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #11

declare void @_ZN3jxl11WriteTokensERKNSt3__16vectorINS_5TokenENS0_9allocatorIS2_EEEERKNS_19EntropyEncodingDataERKNS1_IhNS3_IhEEEEPNS_9BitWriterEmPNS_6AuxOutE(%"class.std::__1::vector.203"* dereferenceable(24), %"struct.jxl::EntropyEncodingData"* dereferenceable(104), %"class.std::__1::vector.21"* dereferenceable(24), %"struct.jxl::BitWriter"*, i64, %"struct.jxl::AuxOut"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS0_IN3jxl5TokenENS_9allocatorIS2_EEEENS3_IS5_EEEC2ERKS7_(%"class.std::__1::vector.201"*, %"class.std::__1::vector.201"* dereferenceable(24)) unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.std::__1::vector.201"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 24, i1 false) #8
  %4 = getelementptr inbounds %"class.std::__1::vector.201", %"class.std::__1::vector.201"* %1, i64 0, i32 0, i32 1
  %5 = bitcast %"class.std::__1::vector.203"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::vector.201"* %1 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = sdiv exact i64 %9, 24
  %11 = icmp eq i64 %9, 0
  br i1 %11, label %79, label %12

12:                                               ; preds = %2
  %13 = icmp ugt i64 %10, 768614336404564650
  br i1 %13, label %14, label %16

14:                                               ; preds = %12
  %15 = bitcast %"class.std::__1::vector.201"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %15) #14
  unreachable

16:                                               ; preds = %12
  %17 = tail call i8* @_Znwm(i64 %9) #13
  %18 = bitcast i8* %17 to %"class.std::__1::vector.203"*
  %19 = getelementptr inbounds %"class.std::__1::vector.201", %"class.std::__1::vector.201"* %0, i64 0, i32 0, i32 1
  %20 = bitcast %"class.std::__1::vector.203"** %19 to i8**
  store i8* %17, i8** %20, align 8
  %21 = bitcast %"class.std::__1::vector.201"* %0 to i8**
  store i8* %17, i8** %21, align 8
  %22 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %18, i64 %10
  %23 = getelementptr inbounds %"class.std::__1::vector.201", %"class.std::__1::vector.201"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  store %"class.std::__1::vector.203"* %22, %"class.std::__1::vector.203"** %23, align 8
  %24 = getelementptr inbounds %"class.std::__1::vector.201", %"class.std::__1::vector.201"* %1, i64 0, i32 0, i32 0
  %25 = load %"class.std::__1::vector.203"*, %"class.std::__1::vector.203"** %24, align 8
  %26 = load %"class.std::__1::vector.203"*, %"class.std::__1::vector.203"** %4, align 8
  %27 = bitcast %"class.std::__1::vector.203"** %19 to i64*
  %28 = ptrtoint i8* %17 to i64
  %29 = icmp eq %"class.std::__1::vector.203"* %25, %26
  br i1 %29, label %77, label %30

30:                                               ; preds = %16
  %31 = bitcast i8* %17 to %"class.std::__1::vector.203"*
  br label %32

32:                                               ; preds = %71, %30
  %33 = phi %"class.std::__1::vector.203"* [ %73, %71 ], [ %31, %30 ]
  %34 = phi %"class.std::__1::vector.203"* [ %72, %71 ], [ %25, %30 ]
  %35 = bitcast %"class.std::__1::vector.203"* %33 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %35, i8 0, i64 24, i1 false) #8
  %36 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %34, i64 0, i32 0, i32 1
  %37 = bitcast %"struct.jxl::Token"** %36 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = bitcast %"class.std::__1::vector.203"* %34 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = sub i64 %38, %40
  %42 = ashr exact i64 %41, 3
  %43 = icmp eq i64 %41, 0
  br i1 %43, label %71, label %44

44:                                               ; preds = %32
  %45 = icmp ugt i64 %42, 2305843009213693951
  br i1 %45, label %46, label %48

46:                                               ; preds = %44
  %47 = bitcast %"class.std::__1::vector.203"* %33 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %47) #14
  unreachable

48:                                               ; preds = %44
  %49 = tail call i8* @_Znwm(i64 %41) #13
  %50 = bitcast i8* %49 to %"struct.jxl::Token"*
  %51 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %33, i64 0, i32 0, i32 1
  %52 = bitcast %"struct.jxl::Token"** %51 to i8**
  store i8* %49, i8** %52, align 8
  %53 = bitcast %"class.std::__1::vector.203"* %33 to i8**
  store i8* %49, i8** %53, align 8
  %54 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %50, i64 %42
  %55 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %33, i64 0, i32 0, i32 2, i32 0, i32 0
  store %"struct.jxl::Token"* %54, %"struct.jxl::Token"** %55, align 8
  %56 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %34, i64 0, i32 0, i32 0
  %57 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %56, align 8
  %58 = load i64, i64* %37, align 8
  %59 = bitcast %"struct.jxl::Token"** %51 to i64*
  %60 = ptrtoint i8* %49 to i64
  %61 = ptrtoint %"struct.jxl::Token"* %57 to i64
  %62 = sub i64 %58, %61
  %63 = icmp sgt i64 %62, 0
  br i1 %63, label %64, label %69

64:                                               ; preds = %48
  %65 = lshr exact i64 %62, 3
  %66 = bitcast %"struct.jxl::Token"* %57 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %49, i8* align 4 %66, i64 %62, i1 false) #8
  %67 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %50, i64 %65
  %68 = ptrtoint %"struct.jxl::Token"* %67 to i64
  br label %69

69:                                               ; preds = %64, %48
  %70 = phi i64 [ %68, %64 ], [ %60, %48 ]
  store i64 %70, i64* %59, align 8
  br label %71

71:                                               ; preds = %69, %32
  %72 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %34, i64 1
  %73 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %33, i64 1
  %74 = icmp eq %"class.std::__1::vector.203"* %72, %26
  br i1 %74, label %75, label %32

75:                                               ; preds = %71
  %76 = ptrtoint %"class.std::__1::vector.203"* %73 to i64
  br label %77

77:                                               ; preds = %16, %75
  %78 = phi i64 [ %28, %16 ], [ %76, %75 ]
  store i64 %78, i64* %27, align 8
  br label %79

79:                                               ; preds = %2, %77
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl6FieldsD2Ev(%"class.jxl::Fields"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJS3_EEEvDpOT_(%"class.std::__1::vector.85"*, %"class.jxl::Plane"* dereferenceable(32)) local_unnamed_addr #4 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.85", %"class.std::__1::vector.85"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.jxl::Plane"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.85"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 5
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 576460752303423487
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.85"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #14
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.85", %"class.std::__1::vector.85"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.jxl::Plane"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 5
  %20 = icmp ult i64 %19, 288230376151711743
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 4
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 576460752303423487
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #14
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 576460752303423487, %14 ]
  %31 = shl i64 %30, 5
  %32 = tail call i8* @_Znwm(i64 %31) #13
  %33 = bitcast i8* %32 to %"class.jxl::Plane"*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %"class.jxl::Plane"* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %36, i64 %9
  %38 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %36, i64 %35
  %39 = ptrtoint %"class.jxl::Plane"* %38 to i64
  %40 = bitcast %"class.jxl::Plane"* %37 to i8*
  %41 = bitcast %"class.jxl::Plane"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 24, i1 false) #8
  %42 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %36, i64 %9, i32 0, i32 5
  %43 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 5
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %43, i64 0, i32 0, i32 0, i32 0
  %45 = bitcast %"class.std::__1::unique_ptr"* %43 to i64*
  %46 = load i64, i64* %45, align 8
  store i8* null, i8** %44, align 8
  %47 = bitcast %"class.std::__1::unique_ptr"* %42 to i64*
  store i64 %46, i64* %47, align 8
  %48 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %37, i64 1
  %49 = ptrtoint %"class.jxl::Plane"* %48 to i64
  %50 = getelementptr inbounds %"class.std::__1::vector.85", %"class.std::__1::vector.85"* %0, i64 0, i32 0, i32 0
  %51 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %50, align 8
  %52 = ptrtoint %"class.jxl::Plane"* %51 to i64
  %53 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %3, align 8
  %54 = icmp eq %"class.jxl::Plane"* %53, %51
  br i1 %54, label %105, label %55

55:                                               ; preds = %34
  %56 = getelementptr %"class.jxl::Plane", %"class.jxl::Plane"* %53, i64 -1, i32 0, i32 0
  %57 = ptrtoint i32* %56 to i64
  %58 = sub i64 %57, %52
  %59 = and i64 %58, 32
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %61, label %72

61:                                               ; preds = %55
  %62 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %37, i64 -1
  %63 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %53, i64 -1
  %64 = bitcast %"class.jxl::Plane"* %62 to i8*
  %65 = bitcast %"class.jxl::Plane"* %63 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %64, i8* align 8 %65, i64 24, i1 false) #8
  %66 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %37, i64 -1, i32 0, i32 5
  %67 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %53, i64 -1, i32 0, i32 5
  %68 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %67, i64 0, i32 0, i32 0, i32 0
  %69 = bitcast %"class.std::__1::unique_ptr"* %67 to i64*
  %70 = load i64, i64* %69, align 8
  store i8* null, i8** %68, align 8
  %71 = bitcast %"class.std::__1::unique_ptr"* %66 to i64*
  store i64 %70, i64* %71, align 8
  br label %72

72:                                               ; preds = %61, %55
  %73 = phi %"class.jxl::Plane"* [ undef, %55 ], [ %62, %61 ]
  %74 = phi %"class.jxl::Plane"* [ %37, %55 ], [ %62, %61 ]
  %75 = phi %"class.jxl::Plane"* [ %53, %55 ], [ %63, %61 ]
  %76 = icmp ult i64 %58, 32
  br i1 %76, label %101, label %77

77:                                               ; preds = %72, %77
  %78 = phi %"class.jxl::Plane"* [ %90, %77 ], [ %74, %72 ]
  %79 = phi %"class.jxl::Plane"* [ %91, %77 ], [ %75, %72 ]
  %80 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %78, i64 -1
  %81 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %79, i64 -1
  %82 = bitcast %"class.jxl::Plane"* %80 to i8*
  %83 = bitcast %"class.jxl::Plane"* %81 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %82, i8* align 8 %83, i64 24, i1 false) #8
  %84 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %78, i64 -1, i32 0, i32 5
  %85 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %79, i64 -1, i32 0, i32 5
  %86 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %85, i64 0, i32 0, i32 0, i32 0
  %87 = bitcast %"class.std::__1::unique_ptr"* %85 to i64*
  %88 = load i64, i64* %87, align 8
  store i8* null, i8** %86, align 8
  %89 = bitcast %"class.std::__1::unique_ptr"* %84 to i64*
  store i64 %88, i64* %89, align 8
  %90 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %78, i64 -2
  %91 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %79, i64 -2
  %92 = bitcast %"class.jxl::Plane"* %90 to i8*
  %93 = bitcast %"class.jxl::Plane"* %91 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %92, i8* align 8 %93, i64 24, i1 false) #8
  %94 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %78, i64 -2, i32 0, i32 5
  %95 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %79, i64 -2, i32 0, i32 5
  %96 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %95, i64 0, i32 0, i32 0, i32 0
  %97 = bitcast %"class.std::__1::unique_ptr"* %95 to i64*
  %98 = load i64, i64* %97, align 8
  store i8* null, i8** %96, align 8
  %99 = bitcast %"class.std::__1::unique_ptr"* %94 to i64*
  store i64 %98, i64* %99, align 8
  %100 = icmp eq %"class.jxl::Plane"* %91, %51
  br i1 %100, label %101, label %77

101:                                              ; preds = %77, %72
  %102 = phi %"class.jxl::Plane"* [ %73, %72 ], [ %90, %77 ]
  %103 = load i64, i64* %6, align 8
  %104 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %3, align 8
  br label %105

105:                                              ; preds = %34, %101
  %106 = phi %"class.jxl::Plane"* [ %104, %101 ], [ %51, %34 ]
  %107 = phi %"class.jxl::Plane"* [ %102, %101 ], [ %37, %34 ]
  %108 = phi i64 [ %103, %101 ], [ %52, %34 ]
  %109 = ptrtoint %"class.jxl::Plane"* %107 to i64
  store i64 %109, i64* %6, align 8
  store i64 %49, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %110 = inttoptr i64 %108 to %"class.jxl::Plane"*
  %111 = icmp eq %"class.jxl::Plane"* %106, %110
  br i1 %111, label %121, label %112

112:                                              ; preds = %105, %119
  %113 = phi %"class.jxl::Plane"* [ %114, %119 ], [ %106, %105 ]
  %114 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %113, i64 -1
  %115 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %113, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %116 = load i8*, i8** %115, align 8
  store i8* null, i8** %115, align 8
  %117 = icmp eq i8* %116, null
  br i1 %117, label %119, label %118

118:                                              ; preds = %112
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %116) #8
  br label %119

119:                                              ; preds = %118, %112
  %120 = icmp eq %"class.jxl::Plane"* %114, %110
  br i1 %120, label %121, label %112

121:                                              ; preds = %119, %105
  %122 = icmp eq i64 %108, 0
  br i1 %122, label %125, label %123

123:                                              ; preds = %121
  %124 = inttoptr i64 %108 to i8*
  tail call void @_ZdlPv(i8* %124) #13
  br label %125

125:                                              ; preds = %121, %123
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i32** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to i32*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds i32, i32* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr i32, i32* %13, i64 %18
  %20 = bitcast i32* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 4
  %25 = and i64 %24, -4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #8
  %26 = ptrtoint i32* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 2
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 4611686018427387903
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #14
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 2
  %41 = icmp ult i64 %40, 2305843009213693951
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 1
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 4611686018427387903
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #14
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 4611686018427387903, %38 ]
  %52 = shl i64 %51, 2
  %53 = tail call i8* @_Znwm(i64 %52) #13
  %54 = bitcast i8* %53 to i32*
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi i32* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds i32, i32* %57, i64 %33
  %59 = getelementptr inbounds i32, i32* %57, i64 %56
  %60 = getelementptr inbounds i32, i32* %58, i64 %1
  %61 = bitcast i32* %58 to i8*
  %62 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %61, i8 0, i64 %62, i1 false) #8
  %63 = ptrtoint i32* %59 to i64
  %64 = ptrtoint i32* %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %66 = load i32*, i32** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint i32* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 2
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds i32, i32* %58, i64 %71
  %73 = ptrtoint i32* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast i32* %72 to i8*
  %77 = bitcast i32* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* align 4 %77, i64 %69, i1 false) #8
  %78 = load i32*, i32** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi i32* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq i32* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast i32* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #13
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

declare void @_ZN3jxl11FrameHeaderC1EPKNS_13CodecMetadataE(%"struct.jxl::FrameHeader"*, %"struct.jxl::CodecMetadata"*) unnamed_addr #1

declare void @_ZN3jxl13ImageMetadataC1Ev(%"struct.jxl::ImageMetadata"*) unnamed_addr #1

; Function Attrs: inlinehint noreturn nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__125__throw_bad_function_callEv() local_unnamed_addr #12 comdat {
  tail call void @abort() #14
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZNSt3__110__function16__policy_invokerIFN3jxl6StatusEmEE11__call_implINS0_20__default_alloc_funcIZNS2_11EncodeFrameERKNS2_14CompressParamsERKNS2_9FrameInfoEPKNS2_13CodecMetadataERKNS2_11ImageBundleEPNS2_18PassesEncoderStateEPNS2_10ThreadPoolEPNS2_9BitWriterEPNS2_6AuxOutEE3$_0S4_EEEES3_PKNS0_16__policy_storageEm"(%"union.std::__1::__function::__policy_storage"* nocapture readonly, i64) #0 align 2 {
  %3 = getelementptr inbounds %"union.std::__1::__function::__policy_storage", %"union.std::__1::__function::__policy_storage"* %0, i64 0, i32 1
  %4 = bitcast [8 x i8]* %3 to %"struct.jxl::AuxOut"**
  %5 = load %"struct.jxl::AuxOut"*, %"struct.jxl::AuxOut"** %4, align 8
  %6 = icmp eq %"struct.jxl::AuxOut"* %5, null
  br i1 %6, label %208, label %7

7:                                                ; preds = %2
  %8 = bitcast %"union.std::__1::__function::__policy_storage"* %0 to %"class.std::__1::vector.275"**
  %9 = load %"class.std::__1::vector.275"*, %"class.std::__1::vector.275"** %8, align 8
  %10 = getelementptr inbounds %"class.std::__1::vector.275", %"class.std::__1::vector.275"* %9, i64 0, i32 0, i32 1
  %11 = bitcast %"struct.jxl::AuxOut"** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %"class.std::__1::vector.275"* %9 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = sub i64 %12, %14
  %16 = sdiv exact i64 %15, 1096
  %17 = icmp ugt i64 %16, %1
  %18 = inttoptr i64 %14 to %"struct.jxl::AuxOut"*
  br i1 %17, label %19, label %33

19:                                               ; preds = %7
  %20 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %18, i64 %1
  tail call void @_ZN3jxl6AuxOut10AssimilateERKS0_(%"struct.jxl::AuxOut"* nonnull %5, %"struct.jxl::AuxOut"* dereferenceable(1096) %20) #8
  %21 = add nuw i64 %1, 1
  %22 = icmp eq i64 %21, %16
  br i1 %22, label %23, label %90

23:                                               ; preds = %90, %19
  %24 = load %"class.std::__1::vector.275"*, %"class.std::__1::vector.275"** %8, align 8
  %25 = getelementptr inbounds %"class.std::__1::vector.275", %"class.std::__1::vector.275"* %24, i64 0, i32 0, i32 1
  %26 = bitcast %"struct.jxl::AuxOut"** %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = bitcast %"class.std::__1::vector.275"* %24 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = sub i64 %27, %29
  %31 = sdiv exact i64 %30, 1096
  %32 = inttoptr i64 %29 to %"struct.jxl::AuxOut"*
  br label %33

33:                                               ; preds = %23, %7
  %34 = phi %"struct.jxl::AuxOut"* [ %32, %23 ], [ %18, %7 ]
  %35 = phi i64 [ %31, %23 ], [ %16, %7 ]
  %36 = phi i64 [ %27, %23 ], [ %12, %7 ]
  %37 = phi %"class.std::__1::vector.275"* [ %24, %23 ], [ %9, %7 ]
  %38 = getelementptr inbounds %"class.std::__1::vector.275", %"class.std::__1::vector.275"* %37, i64 0, i32 0, i32 1
  %39 = icmp ult i64 %35, %1
  %40 = inttoptr i64 %36 to %"struct.jxl::AuxOut"*
  br i1 %39, label %41, label %43

41:                                               ; preds = %33
  %42 = sub i64 %1, %35
  tail call void @_ZNSt3__16vectorIN3jxl6AuxOutENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.275"* %37, i64 %42) #8
  br label %80

43:                                               ; preds = %33
  %44 = icmp ugt i64 %35, %1
  br i1 %44, label %45, label %80

45:                                               ; preds = %43
  %46 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %34, i64 %1
  %47 = icmp eq %"struct.jxl::AuxOut"* %46, %40
  br i1 %47, label %79, label %48

48:                                               ; preds = %45, %77
  %49 = phi %"struct.jxl::AuxOut"* [ %50, %77 ], [ %40, %45 ]
  %50 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %49, i64 -1
  %51 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %49, i64 -1, i32 18, i32 0, i32 2
  %52 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %51, align 8
  %53 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %52, i64 0, i32 1
  %54 = load void (i8*)*, void (i8*)** %53, align 8
  %55 = icmp eq void (i8*)* %54, null
  br i1 %55, label %59, label %56

56:                                               ; preds = %48
  %57 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %49, i64 -1, i32 18, i32 0, i32 0, i32 0
  %58 = load i8*, i8** %57, align 8
  tail call void %54(i8* %58) #8
  br label %59

59:                                               ; preds = %56, %48
  %60 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %49, i64 -1, i32 17, i32 0, i32 2
  %61 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %60, align 8
  %62 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %61, i64 0, i32 1
  %63 = load void (i8*)*, void (i8*)** %62, align 8
  %64 = icmp eq void (i8*)* %63, null
  br i1 %64, label %68, label %65

65:                                               ; preds = %59
  %66 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %49, i64 -1, i32 17, i32 0, i32 0, i32 0
  %67 = load i8*, i8** %66, align 8
  tail call void %63(i8* %67) #8
  br label %68

68:                                               ; preds = %65, %59
  %69 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %49, i64 -1, i32 15
  %70 = bitcast %"class.std::__1::basic_string"* %69 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %71 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %70, i64 0, i32 1, i32 0
  %72 = load i8, i8* %71, align 1
  %73 = icmp slt i8 %72, 0
  br i1 %73, label %74, label %77

74:                                               ; preds = %68
  %75 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %69, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %76 = load i8*, i8** %75, align 8
  tail call void @_ZdlPv(i8* %76) #13
  br label %77

77:                                               ; preds = %74, %68
  %78 = icmp eq %"struct.jxl::AuxOut"* %50, %46
  br i1 %78, label %79, label %48

79:                                               ; preds = %77, %45
  store %"struct.jxl::AuxOut"* %46, %"struct.jxl::AuxOut"** %38, align 8
  br label %80

80:                                               ; preds = %79, %43, %41
  %81 = load %"class.std::__1::vector.275"*, %"class.std::__1::vector.275"** %8, align 8
  %82 = getelementptr inbounds %"class.std::__1::vector.275", %"class.std::__1::vector.275"* %81, i64 0, i32 0, i32 1
  %83 = bitcast %"struct.jxl::AuxOut"** %82 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = bitcast %"class.std::__1::vector.275"* %81 to i64*
  %86 = load i64, i64* %85, align 8
  %87 = sub i64 %84, %86
  %88 = sdiv exact i64 %87, 1096
  %89 = icmp ult i64 %16, %88
  br i1 %89, label %99, label %208

90:                                               ; preds = %19, %90
  %91 = phi i64 [ %97, %90 ], [ %21, %19 ]
  %92 = load %"struct.jxl::AuxOut"*, %"struct.jxl::AuxOut"** %4, align 8
  %93 = load %"class.std::__1::vector.275"*, %"class.std::__1::vector.275"** %8, align 8
  %94 = getelementptr inbounds %"class.std::__1::vector.275", %"class.std::__1::vector.275"* %93, i64 0, i32 0, i32 0
  %95 = load %"struct.jxl::AuxOut"*, %"struct.jxl::AuxOut"** %94, align 8
  %96 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %95, i64 %91
  tail call void @_ZN3jxl6AuxOut10AssimilateERKS0_(%"struct.jxl::AuxOut"* %92, %"struct.jxl::AuxOut"* dereferenceable(1096) %96) #8
  %97 = add i64 %91, 1
  %98 = icmp eq i64 %97, %16
  br i1 %98, label %23, label %90

99:                                               ; preds = %80, %197
  %100 = phi %"class.std::__1::vector.275"* [ %199, %197 ], [ %81, %80 ]
  %101 = phi i64 [ %198, %197 ], [ %16, %80 ]
  %102 = load %"struct.jxl::AuxOut"*, %"struct.jxl::AuxOut"** %4, align 8
  %103 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %102, i64 0, i32 18
  %104 = getelementptr inbounds %"class.std::__1::vector.275", %"class.std::__1::vector.275"* %100, i64 0, i32 0, i32 0
  %105 = load %"struct.jxl::AuxOut"*, %"struct.jxl::AuxOut"** %104, align 8
  %106 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %105, i64 %101, i32 18
  %107 = bitcast %"class.std::__1::function.243"* %103 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %102, i64 0, i32 18, i32 0, i32 0, i32 1, i64 0
  %110 = load i8, i8* %109, align 8
  %111 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %102, i64 0, i32 18, i32 0, i32 0, i32 1, i64 1
  %112 = load i8, i8* %111, align 1
  %113 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %102, i64 0, i32 18, i32 0, i32 0, i32 1, i64 2
  %114 = load i8, i8* %113, align 2
  %115 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %102, i64 0, i32 18, i32 0, i32 0, i32 1, i64 3
  %116 = load i8, i8* %115, align 1
  %117 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %102, i64 0, i32 18, i32 0, i32 0, i32 1, i64 4
  %118 = load i8, i8* %117, align 4
  %119 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %102, i64 0, i32 18, i32 0, i32 0, i32 1, i64 5
  %120 = load i8, i8* %119, align 1
  %121 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %102, i64 0, i32 18, i32 0, i32 0, i32 1, i64 6
  %122 = load i8, i8* %121, align 2
  %123 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %102, i64 0, i32 18, i32 0, i32 0, i32 1, i64 7
  %124 = load i8, i8* %123, align 1
  %125 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %102, i64 0, i32 18, i32 0, i32 1
  %126 = bitcast %"struct.std::__1::__function::__policy_invoker.248"* %125 to i64*
  %127 = load i64, i64* %126, align 8
  %128 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %102, i64 0, i32 18, i32 0, i32 2
  %129 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %128, align 8
  %130 = ptrtoint %"struct.std::__1::__function::__policy"* %129 to i64
  %131 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %129, i64 0, i32 0
  %132 = load i8* (i8*)*, i8* (i8*)** %131, align 8
  %133 = icmp eq i8* (i8*)* %132, null
  br i1 %133, label %138, label %134

134:                                              ; preds = %99
  %135 = inttoptr i64 %108 to i8*
  %136 = tail call i8* %132(i8* %135) #8
  %137 = ptrtoint i8* %136 to i64
  br label %138

138:                                              ; preds = %134, %99
  %139 = phi i64 [ %108, %99 ], [ %137, %134 ]
  %140 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %105, i64 %101, i32 18, i32 0, i32 1
  %141 = bitcast %"struct.std::__1::__function::__policy_invoker.248"* %140 to i64*
  store i64 %127, i64* %141, align 8
  %142 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %105, i64 %101, i32 18, i32 0, i32 2
  %143 = bitcast %"struct.std::__1::__function::__policy"** %142 to i64*
  %144 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %142, align 8
  store i64 %130, i64* %143, align 8
  %145 = bitcast %"class.std::__1::function.243"* %106 to i64*
  %146 = getelementptr inbounds %"class.std::__1::function.243", %"class.std::__1::function.243"* %106, i64 0, i32 0, i32 0, i32 0
  %147 = load i8*, i8** %146, align 8
  %148 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %105, i64 %101, i32 18, i32 0, i32 0, i32 1, i64 0
  %149 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %105, i64 %101, i32 18, i32 0, i32 0, i32 1, i64 1
  %150 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %105, i64 %101, i32 18, i32 0, i32 0, i32 1, i64 2
  %151 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %105, i64 %101, i32 18, i32 0, i32 0, i32 1, i64 3
  %152 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %105, i64 %101, i32 18, i32 0, i32 0, i32 1, i64 4
  %153 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %105, i64 %101, i32 18, i32 0, i32 0, i32 1, i64 5
  %154 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %105, i64 %101, i32 18, i32 0, i32 0, i32 1, i64 6
  %155 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %105, i64 %101, i32 18, i32 0, i32 0, i32 1, i64 7
  store i64 %139, i64* %145, align 8
  store i8 %110, i8* %148, align 8
  store i8 %112, i8* %149, align 1
  store i8 %114, i8* %150, align 2
  store i8 %116, i8* %151, align 1
  store i8 %118, i8* %152, align 4
  store i8 %120, i8* %153, align 1
  store i8 %122, i8* %154, align 2
  store i8 %124, i8* %155, align 1
  %156 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %144, i64 0, i32 1
  %157 = load void (i8*)*, void (i8*)** %156, align 8
  %158 = icmp eq void (i8*)* %157, null
  br i1 %158, label %160, label %159

159:                                              ; preds = %138
  tail call void %157(i8* %147) #8
  br label %160

160:                                              ; preds = %159, %138
  %161 = load %"struct.jxl::AuxOut"*, %"struct.jxl::AuxOut"** %4, align 8
  %162 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %161, i64 0, i32 15
  %163 = load %"class.std::__1::vector.275"*, %"class.std::__1::vector.275"** %8, align 8
  %164 = getelementptr inbounds %"class.std::__1::vector.275", %"class.std::__1::vector.275"* %163, i64 0, i32 0, i32 0
  %165 = load %"struct.jxl::AuxOut"*, %"struct.jxl::AuxOut"** %164, align 8
  %166 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %165, i64 %101, i32 15
  %167 = icmp eq %"class.std::__1::basic_string"* %166, %162
  br i1 %167, label %197, label %168

168:                                              ; preds = %160
  %169 = bitcast %"class.std::__1::basic_string"* %166 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %170 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %169, i64 0, i32 1, i32 0
  %171 = load i8, i8* %170, align 1
  %172 = icmp slt i8 %171, 0
  %173 = bitcast %"class.std::__1::basic_string"* %162 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %174 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %173, i64 0, i32 1, i32 0
  %175 = load i8, i8* %174, align 1
  %176 = icmp slt i8 %175, 0
  br i1 %172, label %187, label %177

177:                                              ; preds = %168
  br i1 %176, label %181, label %178

178:                                              ; preds = %177
  %179 = bitcast %"class.std::__1::basic_string"* %166 to i8*
  %180 = bitcast %"class.std::__1::basic_string"* %162 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %179, i8* align 8 %180, i64 24, i1 false) #8
  br label %197

181:                                              ; preds = %177
  %182 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %162, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %183 = load i8*, i8** %182, align 8
  %184 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %161, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %185 = load i64, i64* %184, align 8
  %186 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb1EEERS5_PKcm(%"class.std::__1::basic_string"* %166, i8* %183, i64 %185) #8
  br label %197

187:                                              ; preds = %168
  %188 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %162, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %189 = load i8*, i8** %188, align 8
  %190 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %161, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %191 = load i64, i64* %190, align 8
  %192 = bitcast %"class.std::__1::basic_string"* %162 to i8*
  %193 = zext i8 %175 to i64
  %194 = select i1 %176, i8* %189, i8* %192
  %195 = select i1 %176, i64 %191, i64 %193
  %196 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb0EEERS5_PKcm(%"class.std::__1::basic_string"* %166, i8* %194, i64 %195) #8
  br label %197

197:                                              ; preds = %187, %181, %178, %160
  %198 = add nuw i64 %101, 1
  %199 = load %"class.std::__1::vector.275"*, %"class.std::__1::vector.275"** %8, align 8
  %200 = getelementptr inbounds %"class.std::__1::vector.275", %"class.std::__1::vector.275"* %199, i64 0, i32 0, i32 1
  %201 = bitcast %"struct.jxl::AuxOut"** %200 to i64*
  %202 = load i64, i64* %201, align 8
  %203 = bitcast %"class.std::__1::vector.275"* %199 to i64*
  %204 = load i64, i64* %203, align 8
  %205 = sub i64 %202, %204
  %206 = sdiv exact i64 %205, 1096
  %207 = icmp ult i64 %198, %206
  br i1 %207, label %99, label %208

208:                                              ; preds = %197, %2, %80
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl6AuxOut10AssimilateERKS0_(%"struct.jxl::AuxOut"*, %"struct.jxl::AuxOut"* dereferenceable(1096)) local_unnamed_addr #0 comdat align 2 {
  br label %144

3:                                                ; preds = %144
  %4 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %1, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, %5
  store i64 %8, i64* %6, align 8
  %9 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %1, i64 0, i32 2
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 2
  %12 = load i64, i64* %11, align 8
  %13 = add i64 %12, %10
  store i64 %13, i64* %11, align 8
  %14 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %1, i64 0, i32 3
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 3
  %17 = load i64, i64* %16, align 8
  %18 = add i64 %17, %15
  store i64 %18, i64* %16, align 8
  %19 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %1, i64 0, i32 4
  %20 = load i64, i64* %19, align 8
  %21 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 4
  %22 = load i64, i64* %21, align 8
  %23 = add i64 %22, %20
  store i64 %23, i64* %21, align 8
  %24 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %1, i64 0, i32 5
  %25 = load i64, i64* %24, align 8
  %26 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 5
  %27 = load i64, i64* %26, align 8
  %28 = add i64 %27, %25
  store i64 %28, i64* %26, align 8
  %29 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %1, i64 0, i32 6
  %30 = load i64, i64* %29, align 8
  %31 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 6
  %32 = load i64, i64* %31, align 8
  %33 = add i64 %32, %30
  store i64 %33, i64* %31, align 8
  %34 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %1, i64 0, i32 7
  %35 = load i64, i64* %34, align 8
  %36 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 7
  %37 = load i64, i64* %36, align 8
  %38 = add i64 %37, %35
  store i64 %38, i64* %36, align 8
  %39 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %1, i64 0, i32 8
  %40 = load i64, i64* %39, align 8
  %41 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 8
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, %40
  store i64 %43, i64* %41, align 8
  %44 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %1, i64 0, i32 9
  %45 = load i64, i64* %44, align 8
  %46 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 9
  %47 = load i64, i64* %46, align 8
  %48 = add i64 %47, %45
  store i64 %48, i64* %46, align 8
  %49 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %1, i64 0, i32 10
  %50 = load i64, i64* %49, align 8
  %51 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 10
  %52 = load i64, i64* %51, align 8
  %53 = add i64 %52, %50
  store i64 %53, i64* %51, align 8
  %54 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %1, i64 0, i32 11
  %55 = load i64, i64* %54, align 8
  %56 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 11
  %57 = load i64, i64* %56, align 8
  %58 = add i64 %57, %55
  store i64 %58, i64* %56, align 8
  %59 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %1, i64 0, i32 14
  %60 = load i32, i32* %59, align 8
  %61 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 14
  %62 = load i32, i32* %61, align 8
  %63 = add nsw i32 %62, %60
  store i32 %63, i32* %61, align 8
  %64 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %1, i64 0, i32 12, i32 0, i64 0
  %65 = load i32, i32* %64, align 4
  %66 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 12, i32 0, i64 0
  %67 = load i32, i32* %66, align 4
  %68 = add i32 %67, %65
  store i32 %68, i32* %66, align 4
  %69 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %1, i64 0, i32 13, i32 0, i64 0
  %70 = load i32, i32* %69, align 4
  %71 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 13, i32 0, i64 0
  %72 = load i32, i32* %71, align 4
  %73 = add i32 %72, %70
  store i32 %73, i32* %71, align 4
  %74 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %1, i64 0, i32 12, i32 0, i64 1
  %75 = load i32, i32* %74, align 4
  %76 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 12, i32 0, i64 1
  %77 = load i32, i32* %76, align 4
  %78 = add i32 %77, %75
  store i32 %78, i32* %76, align 4
  %79 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %1, i64 0, i32 13, i32 0, i64 1
  %80 = load i32, i32* %79, align 4
  %81 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 13, i32 0, i64 1
  %82 = load i32, i32* %81, align 4
  %83 = add i32 %82, %80
  store i32 %83, i32* %81, align 4
  %84 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %1, i64 0, i32 12, i32 0, i64 2
  %85 = load i32, i32* %84, align 4
  %86 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 12, i32 0, i64 2
  %87 = load i32, i32* %86, align 4
  %88 = add i32 %87, %85
  store i32 %88, i32* %86, align 4
  %89 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %1, i64 0, i32 13, i32 0, i64 2
  %90 = load i32, i32* %89, align 4
  %91 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 13, i32 0, i64 2
  %92 = load i32, i32* %91, align 4
  %93 = add i32 %92, %90
  store i32 %93, i32* %91, align 4
  %94 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %1, i64 0, i32 12, i32 0, i64 3
  %95 = load i32, i32* %94, align 4
  %96 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 12, i32 0, i64 3
  %97 = load i32, i32* %96, align 4
  %98 = add i32 %97, %95
  store i32 %98, i32* %96, align 4
  %99 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %1, i64 0, i32 13, i32 0, i64 3
  %100 = load i32, i32* %99, align 4
  %101 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 13, i32 0, i64 3
  %102 = load i32, i32* %101, align 4
  %103 = add i32 %102, %100
  store i32 %103, i32* %101, align 4
  %104 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %1, i64 0, i32 12, i32 0, i64 4
  %105 = load i32, i32* %104, align 4
  %106 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 12, i32 0, i64 4
  %107 = load i32, i32* %106, align 4
  %108 = add i32 %107, %105
  store i32 %108, i32* %106, align 4
  %109 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %1, i64 0, i32 13, i32 0, i64 4
  %110 = load i32, i32* %109, align 4
  %111 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 13, i32 0, i64 4
  %112 = load i32, i32* %111, align 4
  %113 = add i32 %112, %110
  store i32 %113, i32* %111, align 4
  %114 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %1, i64 0, i32 12, i32 0, i64 5
  %115 = load i32, i32* %114, align 4
  %116 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 12, i32 0, i64 5
  %117 = load i32, i32* %116, align 4
  %118 = add i32 %117, %115
  store i32 %118, i32* %116, align 4
  %119 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %1, i64 0, i32 13, i32 0, i64 5
  %120 = load i32, i32* %119, align 4
  %121 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 13, i32 0, i64 5
  %122 = load i32, i32* %121, align 4
  %123 = add i32 %122, %120
  store i32 %123, i32* %121, align 4
  %124 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %1, i64 0, i32 12, i32 0, i64 6
  %125 = load i32, i32* %124, align 4
  %126 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 12, i32 0, i64 6
  %127 = load i32, i32* %126, align 4
  %128 = add i32 %127, %125
  store i32 %128, i32* %126, align 4
  %129 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %1, i64 0, i32 13, i32 0, i64 6
  %130 = load i32, i32* %129, align 4
  %131 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 13, i32 0, i64 6
  %132 = load i32, i32* %131, align 4
  %133 = add i32 %132, %130
  store i32 %133, i32* %131, align 4
  %134 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %1, i64 0, i32 12, i32 0, i64 7
  %135 = load i32, i32* %134, align 4
  %136 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 12, i32 0, i64 7
  %137 = load i32, i32* %136, align 4
  %138 = add i32 %137, %135
  store i32 %138, i32* %136, align 4
  %139 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %1, i64 0, i32 13, i32 0, i64 7
  %140 = load i32, i32* %139, align 4
  %141 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 13, i32 0, i64 7
  %142 = load i32, i32* %141, align 4
  %143 = add i32 %142, %140
  store i32 %143, i32* %141, align 4
  ret void

144:                                              ; preds = %144, %2
  %145 = phi i64 [ 0, %2 ], [ %171, %144 ]
  %146 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %1, i64 0, i32 0, i32 0, i64 %145, i32 0
  %147 = load i64, i64* %146, align 8
  %148 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 0, i32 0, i64 %145, i32 0
  %149 = load i64, i64* %148, align 8
  %150 = add i64 %149, %147
  store i64 %150, i64* %148, align 8
  %151 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %1, i64 0, i32 0, i32 0, i64 %145, i32 2
  %152 = load i64, i64* %151, align 8
  %153 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 0, i32 0, i64 %145, i32 2
  %154 = load i64, i64* %153, align 8
  %155 = add i64 %154, %152
  store i64 %155, i64* %153, align 8
  %156 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %1, i64 0, i32 0, i32 0, i64 %145, i32 1
  %157 = load i64, i64* %156, align 8
  %158 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 0, i32 0, i64 %145, i32 1
  %159 = load i64, i64* %158, align 8
  %160 = add i64 %159, %157
  store i64 %160, i64* %158, align 8
  %161 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %1, i64 0, i32 0, i32 0, i64 %145, i32 3
  %162 = load i64, i64* %161, align 8
  %163 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 0, i32 0, i64 %145, i32 3
  %164 = load i64, i64* %163, align 8
  %165 = add i64 %164, %162
  store i64 %165, i64* %163, align 8
  %166 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %1, i64 0, i32 0, i32 0, i64 %145, i32 4
  %167 = load double, double* %166, align 8
  %168 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 0, i32 0, i64 %145, i32 4
  %169 = load double, double* %168, align 8
  %170 = fadd double %167, %169
  store double %170, double* %168, align 8
  %171 = add nuw nsw i64 %145, 1
  %172 = icmp eq i64 %171, 21
  br i1 %172, label %3, label %144
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl6AuxOutENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.275"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"struct.std::__1::__split_buffer.460", align 8
  %4 = getelementptr inbounds %"class.std::__1::vector.275", %"class.std::__1::vector.275"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %5 = bitcast %"struct.jxl::AuxOut"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.std::__1::vector.275", %"class.std::__1::vector.275"* %0, i64 0, i32 0, i32 1
  %8 = bitcast %"struct.jxl::AuxOut"** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %6, %9
  %11 = sdiv exact i64 %10, 1096
  %12 = icmp ult i64 %11, %1
  br i1 %12, label %31, label %13

13:                                               ; preds = %2
  %14 = inttoptr i64 %9 to %"struct.jxl::AuxOut"*
  %15 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %14, i64 %1
  %16 = icmp eq i64 %1, 0
  br i1 %16, label %29, label %19

17:                                               ; preds = %19
  %18 = ptrtoint %"struct.jxl::AuxOut"* %15 to i64
  br label %29

19:                                               ; preds = %13, %19
  %20 = phi %"struct.jxl::AuxOut"* [ %27, %19 ], [ %14, %13 ]
  %21 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %20, i64 0, i32 16
  %22 = bitcast %"struct.jxl::AuxOut"* %20 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 1080, i1 false) #8
  store i64 1, i64* %21, align 8
  %23 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %20, i64 0, i32 17, i32 0, i32 1, i32 0
  store i1 (%"union.std::__1::__function::__policy_storage"*, i8*, %"class.jxl::Image3"*)* @_ZNSt3__110__function16__policy_invokerIFbPKcRKN3jxl6Image3IfEEEE12__call_emptyEPKNS0_16__policy_storageES3_S8_, i1 (%"union.std::__1::__function::__policy_storage"*, i8*, %"class.jxl::Image3"*)** %23, align 8
  %24 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %20, i64 0, i32 17, i32 0, i32 2
  store %"struct.std::__1::__function::__policy"* @_ZZNSt3__110__function8__policy14__create_emptyEvE9__policy_, %"struct.std::__1::__function::__policy"** %24, align 8
  %25 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %20, i64 0, i32 18, i32 0, i32 1, i32 0
  store i32 (%"union.std::__1::__function::__policy_storage"*, %"class.jxl::CodecInOut"*, %"class.std::__1::basic_string"*)* @_ZNSt3__110__function16__policy_invokerIFN3jxl6StatusERKNS2_10CodecInOutERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEE12__call_emptyEPKNS0_16__policy_storageES6_SE_, i32 (%"union.std::__1::__function::__policy_storage"*, %"class.jxl::CodecInOut"*, %"class.std::__1::basic_string"*)** %25, align 8
  %26 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %20, i64 0, i32 18, i32 0, i32 2
  store %"struct.std::__1::__function::__policy"* @_ZZNSt3__110__function8__policy14__create_emptyEvE9__policy_, %"struct.std::__1::__function::__policy"** %26, align 8
  %27 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %20, i64 1
  %28 = icmp eq %"struct.jxl::AuxOut"* %27, %15
  br i1 %28, label %17, label %19

29:                                               ; preds = %13, %17
  %30 = phi i64 [ %18, %17 ], [ %9, %13 ]
  store i64 %30, i64* %8, align 8
  br label %125

31:                                               ; preds = %2
  %32 = getelementptr inbounds %"class.std::__1::vector.275", %"class.std::__1::vector.275"* %0, i64 0, i32 0, i32 2
  %33 = bitcast %"struct.std::__1::__split_buffer.460"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %33) #8
  %34 = getelementptr inbounds %"struct.std::__1::__split_buffer.460", %"struct.std::__1::__split_buffer.460"* %3, i64 0, i32 0
  %35 = getelementptr inbounds %"struct.std::__1::__split_buffer.460", %"struct.std::__1::__split_buffer.460"* %3, i64 0, i32 1
  %36 = getelementptr inbounds %"struct.std::__1::__split_buffer.460", %"struct.std::__1::__split_buffer.460"* %3, i64 0, i32 2
  %37 = getelementptr inbounds %"struct.std::__1::__split_buffer.460", %"struct.std::__1::__split_buffer.460"* %3, i64 0, i32 3, i32 0, i32 0
  %38 = getelementptr inbounds %"struct.std::__1::__split_buffer.460", %"struct.std::__1::__split_buffer.460"* %3, i64 0, i32 3, i32 1, i32 0
  %39 = bitcast %"class.std::__1::vector.275"* %0 to i64*
  %40 = bitcast %"struct.std::__1::__split_buffer.460"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %40, i8 -86, i64 40, i1 false)
  %41 = load i64, i64* %39, align 8
  %42 = sub i64 %9, %41
  %43 = sdiv exact i64 %42, 1096
  %44 = add i64 %43, %1
  %45 = icmp ugt i64 %44, 16830970870172948
  br i1 %45, label %46, label %48

46:                                               ; preds = %31
  %47 = bitcast %"class.std::__1::vector.275"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %47) #14
  unreachable

48:                                               ; preds = %31
  %49 = sub i64 %6, %41
  %50 = sdiv exact i64 %49, 1096
  %51 = icmp ult i64 %50, 8415485435086474
  br i1 %51, label %54, label %52

52:                                               ; preds = %48
  store %"struct.jxl::AuxOut"* null, %"struct.jxl::AuxOut"** %37, align 8
  %53 = bitcast %"class.std::__1::allocator.280"** %38 to %"class.std::__1::__compressed_pair.277"**
  store %"class.std::__1::__compressed_pair.277"* %32, %"class.std::__1::__compressed_pair.277"** %53, align 8
  br label %60

54:                                               ; preds = %48
  %55 = shl nsw i64 %50, 1
  %56 = icmp ult i64 %55, %44
  %57 = select i1 %56, i64 %44, i64 %55
  store %"struct.jxl::AuxOut"* null, %"struct.jxl::AuxOut"** %37, align 8
  %58 = bitcast %"class.std::__1::allocator.280"** %38 to %"class.std::__1::__compressed_pair.277"**
  store %"class.std::__1::__compressed_pair.277"* %32, %"class.std::__1::__compressed_pair.277"** %58, align 8
  %59 = icmp eq i64 %57, 0
  br i1 %59, label %65, label %60

60:                                               ; preds = %54, %52
  %61 = phi i64 [ 16830970870172948, %52 ], [ %57, %54 ]
  %62 = mul i64 %61, 1096
  %63 = tail call i8* @_Znwm(i64 %62) #13
  %64 = bitcast i8* %63 to %"struct.jxl::AuxOut"*
  br label %65

65:                                               ; preds = %54, %60
  %66 = phi i64 [ %61, %60 ], [ 0, %54 ]
  %67 = phi %"struct.jxl::AuxOut"* [ %64, %60 ], [ null, %54 ]
  store %"struct.jxl::AuxOut"* %67, %"struct.jxl::AuxOut"** %34, align 8
  %68 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %67, i64 %43
  store %"struct.jxl::AuxOut"* %68, %"struct.jxl::AuxOut"** %36, align 8
  store %"struct.jxl::AuxOut"* %68, %"struct.jxl::AuxOut"** %35, align 8
  %69 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %67, i64 %66
  store %"struct.jxl::AuxOut"* %69, %"struct.jxl::AuxOut"** %37, align 8
  %70 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %68, i64 %1
  br label %71

71:                                               ; preds = %65, %71
  %72 = phi %"struct.jxl::AuxOut"* [ %79, %71 ], [ %68, %65 ]
  %73 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %72, i64 0, i32 16
  %74 = bitcast %"struct.jxl::AuxOut"* %72 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %74, i8 0, i64 1080, i1 false) #8
  store i64 1, i64* %73, align 8
  %75 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %72, i64 0, i32 17, i32 0, i32 1, i32 0
  store i1 (%"union.std::__1::__function::__policy_storage"*, i8*, %"class.jxl::Image3"*)* @_ZNSt3__110__function16__policy_invokerIFbPKcRKN3jxl6Image3IfEEEE12__call_emptyEPKNS0_16__policy_storageES3_S8_, i1 (%"union.std::__1::__function::__policy_storage"*, i8*, %"class.jxl::Image3"*)** %75, align 8
  %76 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %72, i64 0, i32 17, i32 0, i32 2
  store %"struct.std::__1::__function::__policy"* @_ZZNSt3__110__function8__policy14__create_emptyEvE9__policy_, %"struct.std::__1::__function::__policy"** %76, align 8
  %77 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %72, i64 0, i32 18, i32 0, i32 1, i32 0
  store i32 (%"union.std::__1::__function::__policy_storage"*, %"class.jxl::CodecInOut"*, %"class.std::__1::basic_string"*)* @_ZNSt3__110__function16__policy_invokerIFN3jxl6StatusERKNS2_10CodecInOutERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEE12__call_emptyEPKNS0_16__policy_storageES6_SE_, i32 (%"union.std::__1::__function::__policy_storage"*, %"class.jxl::CodecInOut"*, %"class.std::__1::basic_string"*)** %77, align 8
  %78 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %72, i64 0, i32 18, i32 0, i32 2
  store %"struct.std::__1::__function::__policy"* @_ZZNSt3__110__function8__policy14__create_emptyEvE9__policy_, %"struct.std::__1::__function::__policy"** %78, align 8
  %79 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %72, i64 1
  %80 = icmp eq %"struct.jxl::AuxOut"* %70, %79
  br i1 %80, label %81, label %71

81:                                               ; preds = %71
  %82 = bitcast %"struct.jxl::AuxOut"** %36 to i64*
  %83 = ptrtoint %"struct.jxl::AuxOut"* %70 to i64
  store i64 %83, i64* %82, align 8
  call void @_ZNSt3__16vectorIN3jxl6AuxOutENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE(%"class.std::__1::vector.275"* %0, %"struct.std::__1::__split_buffer.460"* nonnull dereferenceable(40) %3)
  %84 = load %"struct.jxl::AuxOut"*, %"struct.jxl::AuxOut"** %35, align 8
  %85 = load %"struct.jxl::AuxOut"*, %"struct.jxl::AuxOut"** %36, align 8
  %86 = icmp eq %"struct.jxl::AuxOut"* %85, %84
  br i1 %86, label %119, label %87

87:                                               ; preds = %81, %116
  %88 = phi %"struct.jxl::AuxOut"* [ %117, %116 ], [ %85, %81 ]
  %89 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %88, i64 -1
  store %"struct.jxl::AuxOut"* %89, %"struct.jxl::AuxOut"** %36, align 8
  %90 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %88, i64 -1, i32 18, i32 0, i32 2
  %91 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %90, align 8
  %92 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %91, i64 0, i32 1
  %93 = load void (i8*)*, void (i8*)** %92, align 8
  %94 = icmp eq void (i8*)* %93, null
  br i1 %94, label %98, label %95

95:                                               ; preds = %87
  %96 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %88, i64 -1, i32 18, i32 0, i32 0, i32 0
  %97 = load i8*, i8** %96, align 8
  call void %93(i8* %97) #8
  br label %98

98:                                               ; preds = %95, %87
  %99 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %88, i64 -1, i32 17, i32 0, i32 2
  %100 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %99, align 8
  %101 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %100, i64 0, i32 1
  %102 = load void (i8*)*, void (i8*)** %101, align 8
  %103 = icmp eq void (i8*)* %102, null
  br i1 %103, label %107, label %104

104:                                              ; preds = %98
  %105 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %88, i64 -1, i32 17, i32 0, i32 0, i32 0
  %106 = load i8*, i8** %105, align 8
  call void %102(i8* %106) #8
  br label %107

107:                                              ; preds = %104, %98
  %108 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %88, i64 -1, i32 15
  %109 = bitcast %"class.std::__1::basic_string"* %108 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %110 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %109, i64 0, i32 1, i32 0
  %111 = load i8, i8* %110, align 1
  %112 = icmp slt i8 %111, 0
  br i1 %112, label %113, label %116

113:                                              ; preds = %107
  %114 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %108, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %115 = load i8*, i8** %114, align 8
  call void @_ZdlPv(i8* %115) #13
  br label %116

116:                                              ; preds = %113, %107
  %117 = load %"struct.jxl::AuxOut"*, %"struct.jxl::AuxOut"** %36, align 8
  %118 = icmp eq %"struct.jxl::AuxOut"* %117, %84
  br i1 %118, label %119, label %87

119:                                              ; preds = %116, %81
  %120 = load %"struct.jxl::AuxOut"*, %"struct.jxl::AuxOut"** %34, align 8
  %121 = icmp eq %"struct.jxl::AuxOut"* %120, null
  br i1 %121, label %124, label %122

122:                                              ; preds = %119
  %123 = bitcast %"struct.jxl::AuxOut"* %120 to i8*
  call void @_ZdlPv(i8* %123) #13
  br label %124

124:                                              ; preds = %119, %122
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %33) #8
  br label %125

125:                                              ; preds = %124, %29
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl6AuxOutENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE(%"class.std::__1::vector.275"*, %"struct.std::__1::__split_buffer.460"* dereferenceable(40)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.275", %"class.std::__1::vector.275"* %0, i64 0, i32 0, i32 0
  %4 = load %"struct.jxl::AuxOut"*, %"struct.jxl::AuxOut"** %3, align 8
  %5 = getelementptr inbounds %"class.std::__1::vector.275", %"class.std::__1::vector.275"* %0, i64 0, i32 0, i32 1
  %6 = load %"struct.jxl::AuxOut"*, %"struct.jxl::AuxOut"** %5, align 8
  %7 = getelementptr inbounds %"struct.std::__1::__split_buffer.460", %"struct.std::__1::__split_buffer.460"* %1, i64 0, i32 1
  %8 = icmp eq %"struct.jxl::AuxOut"* %6, %4
  br i1 %8, label %9, label %14

9:                                                ; preds = %2
  %10 = ptrtoint %"struct.jxl::AuxOut"* %4 to i64
  %11 = bitcast %"struct.jxl::AuxOut"** %7 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %"class.std::__1::vector.275"* %0 to i64*
  br label %91

14:                                               ; preds = %2
  %15 = load %"struct.jxl::AuxOut"*, %"struct.jxl::AuxOut"** %7, align 8
  br label %16

16:                                               ; preds = %82, %14
  %17 = phi %"struct.jxl::AuxOut"* [ %84, %82 ], [ %15, %14 ]
  %18 = phi %"struct.jxl::AuxOut"* [ %20, %82 ], [ %6, %14 ]
  %19 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %17, i64 -1
  %20 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %18, i64 -1
  %21 = bitcast %"struct.jxl::AuxOut"* %19 to i8*
  %22 = bitcast %"struct.jxl::AuxOut"* %20 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 996, i1 false) #8
  %23 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %17, i64 -1, i32 15
  %24 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %18, i64 -1, i32 15
  %25 = bitcast %"class.std::__1::basic_string"* %24 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %26 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %25, i64 0, i32 1, i32 0
  %27 = load i8, i8* %26, align 1
  %28 = icmp slt i8 %27, 0
  br i1 %28, label %32, label %29

29:                                               ; preds = %16
  %30 = bitcast %"class.std::__1::basic_string"* %23 to i8*
  %31 = bitcast %"class.std::__1::basic_string"* %24 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %30, i8* align 8 %31, i64 24, i1 false) #8
  br label %37

32:                                               ; preds = %16
  %33 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %24, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %34 = load i8*, i8** %33, align 8
  %35 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %18, i64 -1, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %36 = load i64, i64* %35, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %23, i8* %34, i64 %36) #8
  br label %37

37:                                               ; preds = %32, %29
  %38 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %17, i64 -1, i32 16
  %39 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %18, i64 -1, i32 16
  %40 = load i64, i64* %39, align 8
  store i64 %40, i64* %38, align 8
  %41 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %17, i64 -1, i32 17
  %42 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %18, i64 -1, i32 17
  %43 = bitcast %"class.std::__1::function"* %41 to i8*
  %44 = bitcast %"class.std::__1::function"* %42 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %43, i8* align 8 %44, i64 16, i1 false) #8
  %45 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %17, i64 -1, i32 17, i32 0, i32 1
  %46 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %18, i64 -1, i32 17, i32 0, i32 1
  %47 = bitcast %"struct.std::__1::__function::__policy_invoker"* %46 to i64*
  %48 = bitcast %"struct.std::__1::__function::__policy_invoker"* %45 to i64*
  %49 = load i64, i64* %47, align 8
  store i64 %49, i64* %48, align 8
  %50 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %17, i64 -1, i32 17, i32 0, i32 2
  %51 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %18, i64 -1, i32 17, i32 0, i32 2
  %52 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %51, align 8
  store %"struct.std::__1::__function::__policy"* %52, %"struct.std::__1::__function::__policy"** %50, align 8
  %53 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %52, i64 0, i32 0
  %54 = load i8* (i8*)*, i8* (i8*)** %53, align 8
  %55 = icmp eq i8* (i8*)* %54, null
  br i1 %55, label %61, label %56

56:                                               ; preds = %37
  %57 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %42, i64 0, i32 0, i32 0, i32 0
  %58 = load i8*, i8** %57, align 8
  %59 = tail call i8* %54(i8* %58) #8
  %60 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %41, i64 0, i32 0, i32 0, i32 0
  store i8* %59, i8** %60, align 8
  br label %61

61:                                               ; preds = %56, %37
  %62 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %17, i64 -1, i32 18
  %63 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %18, i64 -1, i32 18
  %64 = bitcast %"class.std::__1::function.243"* %62 to i8*
  %65 = bitcast %"class.std::__1::function.243"* %63 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %64, i8* align 8 %65, i64 16, i1 false) #8
  %66 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %17, i64 -1, i32 18, i32 0, i32 1
  %67 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %18, i64 -1, i32 18, i32 0, i32 1
  %68 = bitcast %"struct.std::__1::__function::__policy_invoker.248"* %67 to i64*
  %69 = bitcast %"struct.std::__1::__function::__policy_invoker.248"* %66 to i64*
  %70 = load i64, i64* %68, align 8
  store i64 %70, i64* %69, align 8
  %71 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %17, i64 -1, i32 18, i32 0, i32 2
  %72 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %18, i64 -1, i32 18, i32 0, i32 2
  %73 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %72, align 8
  store %"struct.std::__1::__function::__policy"* %73, %"struct.std::__1::__function::__policy"** %71, align 8
  %74 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %73, i64 0, i32 0
  %75 = load i8* (i8*)*, i8* (i8*)** %74, align 8
  %76 = icmp eq i8* (i8*)* %75, null
  br i1 %76, label %82, label %77

77:                                               ; preds = %61
  %78 = getelementptr inbounds %"class.std::__1::function.243", %"class.std::__1::function.243"* %63, i64 0, i32 0, i32 0, i32 0
  %79 = load i8*, i8** %78, align 8
  %80 = tail call i8* %75(i8* %79) #8
  %81 = getelementptr inbounds %"class.std::__1::function.243", %"class.std::__1::function.243"* %62, i64 0, i32 0, i32 0, i32 0
  store i8* %80, i8** %81, align 8
  br label %82

82:                                               ; preds = %77, %61
  %83 = load %"struct.jxl::AuxOut"*, %"struct.jxl::AuxOut"** %7, align 8
  %84 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %83, i64 -1
  store %"struct.jxl::AuxOut"* %84, %"struct.jxl::AuxOut"** %7, align 8
  %85 = icmp eq %"struct.jxl::AuxOut"* %20, %4
  br i1 %85, label %86, label %16

86:                                               ; preds = %82
  %87 = ptrtoint %"struct.jxl::AuxOut"* %84 to i64
  %88 = bitcast %"class.std::__1::vector.275"* %0 to i64*
  %89 = load i64, i64* %88, align 8
  %90 = bitcast %"struct.jxl::AuxOut"** %7 to i64*
  br label %91

91:                                               ; preds = %9, %86
  %92 = phi i64* [ %11, %9 ], [ %90, %86 ]
  %93 = phi i64* [ %13, %9 ], [ %88, %86 ]
  %94 = phi i64 [ %12, %9 ], [ %87, %86 ]
  %95 = phi i64 [ %10, %9 ], [ %89, %86 ]
  store i64 %94, i64* %93, align 8
  store i64 %95, i64* %92, align 8
  %96 = getelementptr inbounds %"struct.std::__1::__split_buffer.460", %"struct.std::__1::__split_buffer.460"* %1, i64 0, i32 2
  %97 = bitcast %"struct.jxl::AuxOut"** %5 to i64*
  %98 = load i64, i64* %97, align 8
  %99 = bitcast %"struct.jxl::AuxOut"** %96 to i64*
  %100 = load i64, i64* %99, align 8
  store i64 %100, i64* %97, align 8
  store i64 %98, i64* %99, align 8
  %101 = getelementptr inbounds %"class.std::__1::vector.275", %"class.std::__1::vector.275"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %102 = getelementptr inbounds %"struct.std::__1::__split_buffer.460", %"struct.std::__1::__split_buffer.460"* %1, i64 0, i32 3, i32 0, i32 0
  %103 = bitcast %"struct.jxl::AuxOut"** %101 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = bitcast %"struct.jxl::AuxOut"** %102 to i64*
  %106 = load i64, i64* %105, align 8
  store i64 %106, i64* %103, align 8
  store i64 %104, i64* %105, align 8
  %107 = load i64, i64* %92, align 8
  %108 = bitcast %"struct.std::__1::__split_buffer.460"* %1 to i64*
  store i64 %107, i64* %108, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNSt3__110__function16__policy_invokerIFbPKcRKN3jxl6Image3IfEEEE12__call_emptyEPKNS0_16__policy_storageES3_S8_(%"union.std::__1::__function::__policy_storage"*, i8*, %"class.jxl::Image3"* dereferenceable(96)) #0 comdat align 2 {
  tail call void @_ZNSt3__125__throw_bad_function_callEv() #15
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNSt3__110__function16__policy_invokerIFN3jxl6StatusERKNS2_10CodecInOutERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEE12__call_emptyEPKNS0_16__policy_storageES6_SE_(%"union.std::__1::__function::__policy_storage"*, %"class.jxl::CodecInOut"* dereferenceable(3416), %"class.std::__1::basic_string"* dereferenceable(24)) #0 comdat align 2 {
  tail call void @_ZNSt3__125__throw_bad_function_callEv() #15
  unreachable
}

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #1

declare void @_ZN3jxl19ModularFrameEncoderC1ERKNS_11FrameHeaderERKNS_14CompressParamsE(%"class.jxl::ModularFrameEncoder"*, %"struct.jxl::FrameHeader"* dereferenceable(576), %"struct.jxl::CompressParams"* dereferenceable(360)) unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl19ModularFrameEncoderD2Ev(%"class.jxl::ModularFrameEncoder"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 17, i32 0, i32 0
  %3 = load i64*, i64** %2, align 8
  %4 = icmp eq i64* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = ptrtoint i64* %3 to i64
  %7 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 17, i32 0, i32 1
  %8 = bitcast i64** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = bitcast i64* %3 to i8*
  tail call void @_ZdlPv(i8* %9) #13
  br label %10

10:                                               ; preds = %1, %5
  %11 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 16
  %12 = getelementptr inbounds %"class.std::__1::vector.356", %"class.std::__1::vector.356"* %11, i64 0, i32 0, i32 0
  %13 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %12, align 8
  %14 = icmp eq %"class.std::__1::vector"* %13, null
  br i1 %14, label %38, label %15

15:                                               ; preds = %10
  %16 = bitcast %"class.std::__1::vector"* %13 to i8*
  %17 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 16, i32 0, i32 1
  %18 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %17, align 8
  %19 = icmp eq %"class.std::__1::vector"* %18, %13
  br i1 %19, label %36, label %20

20:                                               ; preds = %15, %31
  %21 = phi %"class.std::__1::vector"* [ %22, %31 ], [ %18, %15 ]
  %22 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %21, i64 -1
  %23 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %22, i64 0, i32 0, i32 0
  %24 = load i32*, i32** %23, align 8
  %25 = icmp eq i32* %24, null
  br i1 %25, label %31, label %26

26:                                               ; preds = %20
  %27 = ptrtoint i32* %24 to i64
  %28 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %21, i64 -1, i32 0, i32 1
  %29 = bitcast i32** %28 to i64*
  store i64 %27, i64* %29, align 8
  %30 = bitcast i32* %24 to i8*
  tail call void @_ZdlPv(i8* %30) #13
  br label %31

31:                                               ; preds = %26, %20
  %32 = icmp eq %"class.std::__1::vector"* %22, %13
  br i1 %32, label %33, label %20

33:                                               ; preds = %31
  %34 = bitcast %"class.std::__1::vector.356"* %11 to i8**
  %35 = load i8*, i8** %34, align 8
  br label %36

36:                                               ; preds = %33, %15
  %37 = phi i8* [ %35, %33 ], [ %16, %15 ]
  store %"class.std::__1::vector"* %13, %"class.std::__1::vector"** %17, align 8
  tail call void @_ZdlPv(i8* %37) #13
  br label %38

38:                                               ; preds = %10, %36
  %39 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 15, i32 0, i32 0
  %40 = load %"struct.jxl::ModularMultiplierInfo"*, %"struct.jxl::ModularMultiplierInfo"** %39, align 8
  %41 = icmp eq %"struct.jxl::ModularMultiplierInfo"* %40, null
  br i1 %41, label %47, label %42

42:                                               ; preds = %38
  %43 = ptrtoint %"struct.jxl::ModularMultiplierInfo"* %40 to i64
  %44 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 15, i32 0, i32 1
  %45 = bitcast %"struct.jxl::ModularMultiplierInfo"** %44 to i64*
  store i64 %43, i64* %45, align 8
  %46 = bitcast %"struct.jxl::ModularMultiplierInfo"* %40 to i8*
  tail call void @_ZdlPv(i8* %46) #13
  br label %47

47:                                               ; preds = %38, %42
  %48 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 14, i32 0, i32 0
  %49 = load i64*, i64** %48, align 8
  %50 = icmp eq i64* %49, null
  br i1 %50, label %56, label %51

51:                                               ; preds = %47
  %52 = ptrtoint i64* %49 to i64
  %53 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 14, i32 0, i32 1
  %54 = bitcast i64** %53 to i64*
  store i64 %52, i64* %54, align 8
  %55 = bitcast i64* %49 to i8*
  tail call void @_ZdlPv(i8* %55) #13
  br label %56

56:                                               ; preds = %47, %51
  %57 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 39, i32 3, i32 0, i32 0
  %58 = load i32*, i32** %57, align 8
  %59 = icmp eq i32* %58, null
  br i1 %59, label %65, label %60

60:                                               ; preds = %56
  %61 = ptrtoint i32* %58 to i64
  %62 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 39, i32 3, i32 0, i32 1
  %63 = bitcast i32** %62 to i64*
  store i64 %61, i64* %63, align 8
  %64 = bitcast i32* %58 to i8*
  tail call void @_ZdlPv(i8* %64) #13
  br label %65

65:                                               ; preds = %56, %60
  %66 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 9, i32 0, i32 0
  %67 = load i8*, i8** %66, align 8
  %68 = icmp eq i8* %67, null
  br i1 %68, label %73, label %69

69:                                               ; preds = %65
  %70 = ptrtoint i8* %67 to i64
  %71 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 9, i32 0, i32 1
  %72 = bitcast i8** %71 to i64*
  store i64 %70, i64* %72, align 8
  tail call void @_ZdlPv(i8* nonnull %67) #13
  br label %73

73:                                               ; preds = %65, %69
  %74 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 8
  %75 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 8, i32 2, i32 0, i32 0
  %76 = load %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"** %75, align 8
  %77 = icmp eq %"struct.jxl::HybridUintConfig"* %76, null
  br i1 %77, label %83, label %78

78:                                               ; preds = %73
  %79 = ptrtoint %"struct.jxl::HybridUintConfig"* %76 to i64
  %80 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 8, i32 2, i32 0, i32 1
  %81 = bitcast %"struct.jxl::HybridUintConfig"** %80 to i64*
  store i64 %79, i64* %81, align 8
  %82 = bitcast %"struct.jxl::HybridUintConfig"* %76 to i8*
  tail call void @_ZdlPv(i8* %82) #13
  br label %83

83:                                               ; preds = %78, %73
  %84 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %74, i64 0, i32 0, i32 0, i32 0
  %85 = load %"class.std::__1::vector.217"*, %"class.std::__1::vector.217"** %84, align 8
  %86 = icmp eq %"class.std::__1::vector.217"* %85, null
  br i1 %86, label %128, label %87

87:                                               ; preds = %83
  %88 = bitcast %"class.std::__1::vector.217"* %85 to i8*
  %89 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 8, i32 0, i32 0, i32 1
  %90 = load %"class.std::__1::vector.217"*, %"class.std::__1::vector.217"** %89, align 8
  %91 = icmp eq %"class.std::__1::vector.217"* %90, %85
  br i1 %91, label %126, label %92

92:                                               ; preds = %87, %121
  %93 = phi %"class.std::__1::vector.217"* [ %94, %121 ], [ %90, %87 ]
  %94 = getelementptr inbounds %"class.std::__1::vector.217", %"class.std::__1::vector.217"* %93, i64 -1
  %95 = getelementptr inbounds %"class.std::__1::vector.217", %"class.std::__1::vector.217"* %94, i64 0, i32 0, i32 0
  %96 = load %"struct.jxl::ANSEncSymbolInfo"*, %"struct.jxl::ANSEncSymbolInfo"** %95, align 8
  %97 = icmp eq %"struct.jxl::ANSEncSymbolInfo"* %96, null
  br i1 %97, label %121, label %98

98:                                               ; preds = %92
  %99 = bitcast %"struct.jxl::ANSEncSymbolInfo"* %96 to i8*
  %100 = getelementptr inbounds %"class.std::__1::vector.217", %"class.std::__1::vector.217"* %93, i64 -1, i32 0, i32 1
  %101 = load %"struct.jxl::ANSEncSymbolInfo"*, %"struct.jxl::ANSEncSymbolInfo"** %100, align 8
  %102 = icmp eq %"struct.jxl::ANSEncSymbolInfo"* %101, %96
  br i1 %102, label %119, label %103

103:                                              ; preds = %98, %114
  %104 = phi %"struct.jxl::ANSEncSymbolInfo"* [ %105, %114 ], [ %101, %98 ]
  %105 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %104, i64 -1
  %106 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %104, i64 -1, i32 2, i32 0, i32 0
  %107 = load i16*, i16** %106, align 8
  %108 = icmp eq i16* %107, null
  br i1 %108, label %114, label %109

109:                                              ; preds = %103
  %110 = ptrtoint i16* %107 to i64
  %111 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %104, i64 -1, i32 2, i32 0, i32 1
  %112 = bitcast i16** %111 to i64*
  store i64 %110, i64* %112, align 8
  %113 = bitcast i16* %107 to i8*
  tail call void @_ZdlPv(i8* %113) #13
  br label %114

114:                                              ; preds = %109, %103
  %115 = icmp eq %"struct.jxl::ANSEncSymbolInfo"* %105, %96
  br i1 %115, label %116, label %103

116:                                              ; preds = %114
  %117 = bitcast %"class.std::__1::vector.217"* %94 to i8**
  %118 = load i8*, i8** %117, align 8
  br label %119

119:                                              ; preds = %116, %98
  %120 = phi i8* [ %118, %116 ], [ %99, %98 ]
  store %"struct.jxl::ANSEncSymbolInfo"* %96, %"struct.jxl::ANSEncSymbolInfo"** %100, align 8
  tail call void @_ZdlPv(i8* %120) #13
  br label %121

121:                                              ; preds = %119, %92
  %122 = icmp eq %"class.std::__1::vector.217"* %94, %85
  br i1 %122, label %123, label %92

123:                                              ; preds = %121
  %124 = bitcast %"struct.jxl::EntropyEncodingData"* %74 to i8**
  %125 = load i8*, i8** %124, align 8
  br label %126

126:                                              ; preds = %123, %87
  %127 = phi i8* [ %125, %123 ], [ %88, %87 ]
  store %"class.std::__1::vector.217"* %85, %"class.std::__1::vector.217"** %89, align 8
  tail call void @_ZdlPv(i8* %127) #13
  br label %128

128:                                              ; preds = %83, %126
  %129 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 7
  %130 = getelementptr inbounds %"class.std::__1::vector.201", %"class.std::__1::vector.201"* %129, i64 0, i32 0, i32 0
  %131 = load %"class.std::__1::vector.203"*, %"class.std::__1::vector.203"** %130, align 8
  %132 = icmp eq %"class.std::__1::vector.203"* %131, null
  br i1 %132, label %156, label %133

133:                                              ; preds = %128
  %134 = bitcast %"class.std::__1::vector.203"* %131 to i8*
  %135 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 7, i32 0, i32 1
  %136 = load %"class.std::__1::vector.203"*, %"class.std::__1::vector.203"** %135, align 8
  %137 = icmp eq %"class.std::__1::vector.203"* %136, %131
  br i1 %137, label %154, label %138

138:                                              ; preds = %133, %149
  %139 = phi %"class.std::__1::vector.203"* [ %140, %149 ], [ %136, %133 ]
  %140 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %139, i64 -1
  %141 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %140, i64 0, i32 0, i32 0
  %142 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %141, align 8
  %143 = icmp eq %"struct.jxl::Token"* %142, null
  br i1 %143, label %149, label %144

144:                                              ; preds = %138
  %145 = ptrtoint %"struct.jxl::Token"* %142 to i64
  %146 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %139, i64 -1, i32 0, i32 1
  %147 = bitcast %"struct.jxl::Token"** %146 to i64*
  store i64 %145, i64* %147, align 8
  %148 = bitcast %"struct.jxl::Token"* %142 to i8*
  tail call void @_ZdlPv(i8* %148) #13
  br label %149

149:                                              ; preds = %144, %138
  %150 = icmp eq %"class.std::__1::vector.203"* %140, %131
  br i1 %150, label %151, label %138

151:                                              ; preds = %149
  %152 = bitcast %"class.std::__1::vector.201"* %129 to i8**
  %153 = load i8*, i8** %152, align 8
  br label %154

154:                                              ; preds = %151, %133
  %155 = phi i8* [ %153, %151 ], [ %134, %133 ]
  store %"class.std::__1::vector.203"* %131, %"class.std::__1::vector.203"** %135, align 8
  tail call void @_ZdlPv(i8* %155) #13
  br label %156

156:                                              ; preds = %128, %154
  %157 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 6
  %158 = getelementptr inbounds %"class.std::__1::vector.340", %"class.std::__1::vector.340"* %157, i64 0, i32 0, i32 0
  %159 = load %"struct.jxl::GroupHeader"*, %"struct.jxl::GroupHeader"** %158, align 8
  %160 = icmp eq %"struct.jxl::GroupHeader"* %159, null
  br i1 %160, label %178, label %161

161:                                              ; preds = %156
  %162 = bitcast %"struct.jxl::GroupHeader"* %159 to i8*
  %163 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 6, i32 0, i32 1
  %164 = load %"struct.jxl::GroupHeader"*, %"struct.jxl::GroupHeader"** %163, align 8
  %165 = icmp eq %"struct.jxl::GroupHeader"* %164, %159
  br i1 %165, label %176, label %166

166:                                              ; preds = %161, %166
  %167 = phi %"struct.jxl::GroupHeader"* [ %168, %166 ], [ %164, %161 ]
  %168 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %167, i64 -1
  %169 = bitcast %"struct.jxl::GroupHeader"* %168 to void (%"struct.jxl::GroupHeader"*)***
  %170 = load void (%"struct.jxl::GroupHeader"*)**, void (%"struct.jxl::GroupHeader"*)*** %169, align 8
  %171 = load void (%"struct.jxl::GroupHeader"*)*, void (%"struct.jxl::GroupHeader"*)** %170, align 8
  tail call void %171(%"struct.jxl::GroupHeader"* %168) #8
  %172 = icmp eq %"struct.jxl::GroupHeader"* %168, %159
  br i1 %172, label %173, label %166

173:                                              ; preds = %166
  %174 = bitcast %"class.std::__1::vector.340"* %157 to i8**
  %175 = load i8*, i8** %174, align 8
  br label %176

176:                                              ; preds = %173, %161
  %177 = phi i8* [ %175, %173 ], [ %162, %161 ]
  store %"struct.jxl::GroupHeader"* %159, %"struct.jxl::GroupHeader"** %163, align 8
  tail call void @_ZdlPv(i8* %177) #13
  br label %178

178:                                              ; preds = %156, %176
  %179 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 5
  %180 = getelementptr inbounds %"class.std::__1::vector.201", %"class.std::__1::vector.201"* %179, i64 0, i32 0, i32 0
  %181 = load %"class.std::__1::vector.203"*, %"class.std::__1::vector.203"** %180, align 8
  %182 = icmp eq %"class.std::__1::vector.203"* %181, null
  br i1 %182, label %206, label %183

183:                                              ; preds = %178
  %184 = bitcast %"class.std::__1::vector.203"* %181 to i8*
  %185 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 5, i32 0, i32 1
  %186 = load %"class.std::__1::vector.203"*, %"class.std::__1::vector.203"** %185, align 8
  %187 = icmp eq %"class.std::__1::vector.203"* %186, %181
  br i1 %187, label %204, label %188

188:                                              ; preds = %183, %199
  %189 = phi %"class.std::__1::vector.203"* [ %190, %199 ], [ %186, %183 ]
  %190 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %189, i64 -1
  %191 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %190, i64 0, i32 0, i32 0
  %192 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %191, align 8
  %193 = icmp eq %"struct.jxl::Token"* %192, null
  br i1 %193, label %199, label %194

194:                                              ; preds = %188
  %195 = ptrtoint %"struct.jxl::Token"* %192 to i64
  %196 = getelementptr inbounds %"class.std::__1::vector.203", %"class.std::__1::vector.203"* %189, i64 -1, i32 0, i32 1
  %197 = bitcast %"struct.jxl::Token"** %196 to i64*
  store i64 %195, i64* %197, align 8
  %198 = bitcast %"struct.jxl::Token"* %192 to i8*
  tail call void @_ZdlPv(i8* %198) #13
  br label %199

199:                                              ; preds = %194, %188
  %200 = icmp eq %"class.std::__1::vector.203"* %190, %181
  br i1 %200, label %201, label %188

201:                                              ; preds = %199
  %202 = bitcast %"class.std::__1::vector.201"* %179 to i8**
  %203 = load i8*, i8** %202, align 8
  br label %204

204:                                              ; preds = %201, %183
  %205 = phi i8* [ %203, %201 ], [ %184, %183 ]
  store %"class.std::__1::vector.203"* %181, %"class.std::__1::vector.203"** %185, align 8
  tail call void @_ZdlPv(i8* %205) #13
  br label %206

206:                                              ; preds = %178, %204
  %207 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 4, i32 0, i32 0
  %208 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %207, align 8
  %209 = icmp eq %"struct.jxl::PropertyDecisionNode"* %208, null
  br i1 %209, label %215, label %210

210:                                              ; preds = %206
  %211 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %208 to i64
  %212 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 4, i32 0, i32 1
  %213 = bitcast %"struct.jxl::PropertyDecisionNode"** %212 to i64*
  store i64 %211, i64* %213, align 8
  %214 = bitcast %"struct.jxl::PropertyDecisionNode"* %208 to i8*
  tail call void @_ZdlPv(i8* %214) #13
  br label %215

215:                                              ; preds = %206, %210
  %216 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 3
  %217 = getelementptr inbounds %"class.std::__1::vector.326", %"class.std::__1::vector.326"* %216, i64 0, i32 0, i32 0
  %218 = load %"struct.jxl::ModularOptions"*, %"struct.jxl::ModularOptions"** %217, align 8
  %219 = icmp eq %"struct.jxl::ModularOptions"* %218, null
  br i1 %219, label %243, label %220

220:                                              ; preds = %215
  %221 = bitcast %"struct.jxl::ModularOptions"* %218 to i8*
  %222 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 3, i32 0, i32 1
  %223 = load %"struct.jxl::ModularOptions"*, %"struct.jxl::ModularOptions"** %222, align 8
  %224 = icmp eq %"struct.jxl::ModularOptions"* %223, %218
  br i1 %224, label %241, label %225

225:                                              ; preds = %220, %236
  %226 = phi %"struct.jxl::ModularOptions"* [ %227, %236 ], [ %223, %220 ]
  %227 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %226, i64 -1
  %228 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %226, i64 -1, i32 3, i32 0, i32 0
  %229 = load i32*, i32** %228, align 8
  %230 = icmp eq i32* %229, null
  br i1 %230, label %236, label %231

231:                                              ; preds = %225
  %232 = ptrtoint i32* %229 to i64
  %233 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %226, i64 -1, i32 3, i32 0, i32 1
  %234 = bitcast i32** %233 to i64*
  store i64 %232, i64* %234, align 8
  %235 = bitcast i32* %229 to i8*
  tail call void @_ZdlPv(i8* %235) #13
  br label %236

236:                                              ; preds = %231, %225
  %237 = icmp eq %"struct.jxl::ModularOptions"* %227, %218
  br i1 %237, label %238, label %225

238:                                              ; preds = %236
  %239 = bitcast %"class.std::__1::vector.326"* %216 to i8**
  %240 = load i8*, i8** %239, align 8
  br label %241

241:                                              ; preds = %238, %220
  %242 = phi i8* [ %240, %238 ], [ %221, %220 ]
  store %"struct.jxl::ModularOptions"* %218, %"struct.jxl::ModularOptions"** %222, align 8
  tail call void @_ZdlPv(i8* %242) #13
  br label %243

243:                                              ; preds = %215, %241
  %244 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 2
  %245 = getelementptr inbounds %"class.std::__1::vector.298", %"class.std::__1::vector.298"* %244, i64 0, i32 0, i32 0
  %246 = load %"class.jxl::Image"*, %"class.jxl::Image"** %245, align 8
  %247 = icmp eq %"class.jxl::Image"* %246, null
  br i1 %247, label %262, label %248

248:                                              ; preds = %243
  %249 = bitcast %"class.jxl::Image"* %246 to i8*
  %250 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 2, i32 0, i32 1
  %251 = load %"class.jxl::Image"*, %"class.jxl::Image"** %250, align 8
  %252 = icmp eq %"class.jxl::Image"* %251, %246
  br i1 %252, label %260, label %253

253:                                              ; preds = %248, %253
  %254 = phi %"class.jxl::Image"* [ %255, %253 ], [ %251, %248 ]
  %255 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %254, i64 -1
  tail call void @_ZN3jxl5ImageD1Ev(%"class.jxl::Image"* %255) #8
  %256 = icmp eq %"class.jxl::Image"* %255, %246
  br i1 %256, label %257, label %253

257:                                              ; preds = %253
  %258 = bitcast %"class.std::__1::vector.298"* %244 to i8**
  %259 = load i8*, i8** %258, align 8
  br label %260

260:                                              ; preds = %257, %248
  %261 = phi i8* [ %259, %257 ], [ %249, %248 ]
  store %"class.jxl::Image"* %246, %"class.jxl::Image"** %250, align 8
  tail call void @_ZdlPv(i8* %261) #13
  br label %262

262:                                              ; preds = %243, %260
  %263 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 1, i32 0, i32 0
  %264 = load i8*, i8** %263, align 8
  %265 = icmp eq i8* %264, null
  br i1 %265, label %270, label %266

266:                                              ; preds = %262
  %267 = ptrtoint i8* %264 to i64
  %268 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 1, i32 0, i32 1
  %269 = bitcast i8** %268 to i64*
  store i64 %267, i64* %269, align 8
  tail call void @_ZdlPv(i8* nonnull %264) #13
  br label %270

270:                                              ; preds = %262, %266
  %271 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 0, i32 0, i32 0
  %272 = load i64*, i64** %271, align 8
  %273 = icmp eq i64* %272, null
  br i1 %273, label %279, label %274

274:                                              ; preds = %270
  %275 = ptrtoint i64* %272 to i64
  %276 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 0, i32 0, i32 1
  %277 = bitcast i64** %276 to i64*
  store i64 %275, i64* %277, align 8
  %278 = bitcast i64* %272 to i8*
  tail call void @_ZdlPv(i8* %278) #13
  br label %279

279:                                              ; preds = %270, %274
  ret void
}

; Function Attrs: nounwind
declare void @_ZN3jxl5ImageD1Ev(%"class.jxl::Image"*) unnamed_addr #10

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl11CopyImageToIfEEvRKNS_4RectERKNS_6Image3IT_EES3_PS6_(%"class.jxl::Rect"* dereferenceable(32), %"class.jxl::Image3"* dereferenceable(96), %"class.jxl::Rect"* dereferenceable(32), %"class.jxl::Image3"* noalias) local_unnamed_addr #0 comdat {
  %5 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %0, i64 0, i32 2
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 2
  %8 = load i64, i64* %7, align 8
  %9 = icmp eq i64 %6, %8
  br i1 %9, label %10, label %24

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %0, i64 0, i32 3
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = icmp eq i64 %12, %14
  br i1 %15, label %16, label %24

16:                                               ; preds = %10
  %17 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %0, i64 0, i32 1
  %18 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %0, i64 0, i32 0
  %19 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 1
  %20 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 0
  %21 = icmp eq i64 %6, 0
  %22 = icmp eq i64 %12, 0
  %23 = or i1 %21, %22
  br i1 %23, label %66, label %27

24:                                               ; preds = %4, %10
  %25 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.61, i64 0, i64 0), i32 80, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.66, i64 0, i64 0)) #8
  %26 = tail call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

27:                                               ; preds = %16
  %28 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %29 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 4
  %30 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8, !alias.scope !89
  %32 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0, i32 4
  %33 = load i64, i64* %32, align 8, !alias.scope !89
  br label %34

34:                                               ; preds = %34, %27
  %35 = phi i64 [ %6, %27 ], [ %65, %34 ]
  %36 = phi i64 [ 0, %27 ], [ %62, %34 ]
  %37 = load i64, i64* %17, align 8, !noalias !89
  %38 = add i64 %37, %36
  %39 = load i8*, i8** %28, align 8, !noalias !89
  %40 = load i64, i64* %29, align 8, !noalias !89
  %41 = mul i64 %40, %38
  %42 = getelementptr inbounds i8, i8* %39, i64 %41
  %43 = ptrtoint i8* %42 to i64
  %44 = and i64 %43, 63
  %45 = icmp eq i64 %44, 0
  tail call void @llvm.assume(i1 %45) #8, !noalias !89
  %46 = bitcast i8* %42 to float*
  %47 = load i64, i64* %18, align 8, !noalias !89
  %48 = getelementptr inbounds float, float* %46, i64 %47
  %49 = load i64, i64* %19, align 8, !noalias !89
  %50 = add i64 %49, %36
  %51 = mul i64 %50, %33
  %52 = getelementptr inbounds i8, i8* %31, i64 %51
  %53 = ptrtoint i8* %52 to i64
  %54 = and i64 %53, 63
  %55 = icmp eq i64 %54, 0
  tail call void @llvm.assume(i1 %55) #8, !noalias !89
  %56 = bitcast i8* %52 to float*
  %57 = load i64, i64* %20, align 8, !noalias !89
  %58 = getelementptr inbounds float, float* %56, i64 %57
  %59 = bitcast float* %58 to i8*
  %60 = bitcast float* %48 to i8*
  %61 = shl i64 %35, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %59, i8* align 4 %60, i64 %61, i1 false) #8, !noalias !89
  %62 = add nuw i64 %36, 1
  %63 = load i64, i64* %11, align 8, !noalias !89
  %64 = icmp ult i64 %62, %63
  %65 = load i64, i64* %5, align 8
  br i1 %64, label %34, label %66

66:                                               ; preds = %34, %16
  %67 = phi i64 [ %12, %16 ], [ %63, %34 ]
  %68 = phi i64 [ %6, %16 ], [ %65, %34 ]
  %69 = icmp eq i64 %68, 0
  %70 = icmp eq i64 %67, 0
  %71 = or i1 %69, %70
  br i1 %71, label %111, label %72

72:                                               ; preds = %66
  %73 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %74 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 1, i32 0, i32 4
  %75 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %76 = load i8*, i8** %75, align 8, !alias.scope !89
  %77 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 1, i32 0, i32 4
  %78 = load i64, i64* %77, align 8, !alias.scope !89
  br label %79

79:                                               ; preds = %79, %72
  %80 = phi i64 [ %68, %72 ], [ %110, %79 ]
  %81 = phi i64 [ 0, %72 ], [ %107, %79 ]
  %82 = load i64, i64* %17, align 8, !noalias !89
  %83 = add i64 %82, %81
  %84 = load i8*, i8** %73, align 8, !noalias !89
  %85 = load i64, i64* %74, align 8, !noalias !89
  %86 = mul i64 %85, %83
  %87 = getelementptr inbounds i8, i8* %84, i64 %86
  %88 = ptrtoint i8* %87 to i64
  %89 = and i64 %88, 63
  %90 = icmp eq i64 %89, 0
  tail call void @llvm.assume(i1 %90) #8, !noalias !89
  %91 = bitcast i8* %87 to float*
  %92 = load i64, i64* %18, align 8, !noalias !89
  %93 = getelementptr inbounds float, float* %91, i64 %92
  %94 = load i64, i64* %19, align 8, !noalias !89
  %95 = add i64 %94, %81
  %96 = mul i64 %95, %78
  %97 = getelementptr inbounds i8, i8* %76, i64 %96
  %98 = ptrtoint i8* %97 to i64
  %99 = and i64 %98, 63
  %100 = icmp eq i64 %99, 0
  tail call void @llvm.assume(i1 %100) #8, !noalias !89
  %101 = bitcast i8* %97 to float*
  %102 = load i64, i64* %20, align 8, !noalias !89
  %103 = getelementptr inbounds float, float* %101, i64 %102
  %104 = bitcast float* %103 to i8*
  %105 = bitcast float* %93 to i8*
  %106 = shl i64 %80, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %104, i8* align 4 %105, i64 %106, i1 false) #8, !noalias !89
  %107 = add nuw i64 %81, 1
  %108 = load i64, i64* %11, align 8, !noalias !89
  %109 = icmp ult i64 %107, %108
  %110 = load i64, i64* %5, align 8
  br i1 %109, label %79, label %111

111:                                              ; preds = %79, %66
  %112 = phi i64 [ %67, %66 ], [ %108, %79 ]
  %113 = phi i64 [ %68, %66 ], [ %110, %79 ]
  %114 = icmp eq i64 %113, 0
  %115 = icmp eq i64 %112, 0
  %116 = or i1 %114, %115
  br i1 %116, label %157, label %117

117:                                              ; preds = %111
  %118 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %119 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 2, i32 0, i32 4
  %120 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %121 = load i8*, i8** %120, align 8, !alias.scope !89
  %122 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 2, i32 0, i32 4
  %123 = load i64, i64* %122, align 8, !alias.scope !89
  br label %124

124:                                              ; preds = %155, %117
  %125 = phi i64 [ %113, %117 ], [ %156, %155 ]
  %126 = phi i64 [ 0, %117 ], [ %152, %155 ]
  %127 = load i64, i64* %17, align 8, !noalias !89
  %128 = add i64 %127, %126
  %129 = load i8*, i8** %118, align 8, !noalias !89
  %130 = load i64, i64* %119, align 8, !noalias !89
  %131 = mul i64 %130, %128
  %132 = getelementptr inbounds i8, i8* %129, i64 %131
  %133 = ptrtoint i8* %132 to i64
  %134 = and i64 %133, 63
  %135 = icmp eq i64 %134, 0
  tail call void @llvm.assume(i1 %135) #8, !noalias !89
  %136 = bitcast i8* %132 to float*
  %137 = load i64, i64* %18, align 8, !noalias !89
  %138 = getelementptr inbounds float, float* %136, i64 %137
  %139 = load i64, i64* %19, align 8, !noalias !89
  %140 = add i64 %139, %126
  %141 = mul i64 %140, %123
  %142 = getelementptr inbounds i8, i8* %121, i64 %141
  %143 = ptrtoint i8* %142 to i64
  %144 = and i64 %143, 63
  %145 = icmp eq i64 %144, 0
  tail call void @llvm.assume(i1 %145) #8, !noalias !89
  %146 = bitcast i8* %142 to float*
  %147 = load i64, i64* %20, align 8, !noalias !89
  %148 = getelementptr inbounds float, float* %146, i64 %147
  %149 = bitcast float* %148 to i8*
  %150 = bitcast float* %138 to i8*
  %151 = shl i64 %125, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %149, i8* align 4 %150, i64 %151, i1 false) #8, !noalias !89
  %152 = add nuw i64 %126, 1
  %153 = load i64, i64* %11, align 8, !noalias !89
  %154 = icmp ult i64 %152, %153
  br i1 %154, label %155, label %157

155:                                              ; preds = %124
  %156 = load i64, i64* %5, align 8, !noalias !89
  br label %124

157:                                              ; preds = %124, %111
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateINSt3__18functionIFNS_6StatusEmEEEZNS_11EncodeFrameERKNS_14CompressParamsERKNS_9FrameInfoEPKNS_13CodecMetadataERKNS_11ImageBundleEPNS_18PassesEncoderStateEPS0_PNS_9BitWriterEPNS_6AuxOutEE3$_2E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #0 align 2 {
  %3 = bitcast i8* %0 to %"class.std::__1::function.282"**
  %4 = load %"class.std::__1::function.282"*, %"class.std::__1::function.282"** %3, align 8
  %5 = getelementptr inbounds %"class.std::__1::function.282", %"class.std::__1::function.282"* %4, i64 0, i32 0, i32 1, i32 0
  %6 = load i32 (%"union.std::__1::__function::__policy_storage"*, i64)*, i32 (%"union.std::__1::__function::__policy_storage"*, i64)** %5, align 8
  %7 = getelementptr inbounds %"class.std::__1::function.282", %"class.std::__1::function.282"* %4, i64 0, i32 0, i32 0
  %8 = tail call i32 %6(%"union.std::__1::__function::__policy_storage"* %7, i64 %1) #8
  %9 = icmp ne i32 %8, 0
  %10 = sext i1 %9 to i32
  ret i32 %10
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateINSt3__18functionIFNS_6StatusEmEEEZNS_11EncodeFrameERKNS_14CompressParamsERKNS_9FrameInfoEPKNS_13CodecMetadataERKNS_11ImageBundleEPNS_18PassesEncoderStateEPS0_PNS_9BitWriterEPNS_6AuxOutEE3$_2E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #0 align 2 {
  %4 = alloca %"class.jxl::BitWriter::Allotment", align 8
  %5 = alloca %"struct.jxl::ModularStreamId", align 8
  %6 = alloca %"struct.jxl::ModularStreamId", align 8
  %7 = alloca %"class.jxl::BitWriter::Allotment", align 8
  %8 = alloca %"struct.jxl::ModularStreamId", align 8
  %9 = getelementptr inbounds i8, i8* %0, i64 8
  %10 = bitcast i8* %9 to %class.anon.375**
  %11 = load %class.anon.375*, %class.anon.375** %10, align 8
  %12 = getelementptr inbounds %class.anon.375, %class.anon.375* %11, i64 0, i32 0
  %13 = load %"struct.jxl::AuxOut"**, %"struct.jxl::AuxOut"*** %12, align 8
  %14 = load %"struct.jxl::AuxOut"*, %"struct.jxl::AuxOut"** %13, align 8
  %15 = icmp eq %"struct.jxl::AuxOut"* %14, null
  br i1 %15, label %24, label %16

16:                                               ; preds = %3
  %17 = getelementptr inbounds %class.anon.375, %class.anon.375* %11, i64 0, i32 1
  %18 = load %"class.std::__1::vector.275"*, %"class.std::__1::vector.275"** %17, align 8
  %19 = shl i64 %2, 32
  %20 = ashr exact i64 %19, 32
  %21 = getelementptr inbounds %"class.std::__1::vector.275", %"class.std::__1::vector.275"* %18, i64 0, i32 0, i32 0
  %22 = load %"struct.jxl::AuxOut"*, %"struct.jxl::AuxOut"** %21, align 8
  %23 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %22, i64 %20
  br label %24

24:                                               ; preds = %16, %3
  %25 = phi %"struct.jxl::AuxOut"* [ %23, %16 ], [ null, %3 ]
  %26 = getelementptr inbounds %class.anon.375, %class.anon.375* %11, i64 0, i32 2
  %27 = load %class.anon.373*, %class.anon.373** %26, align 8
  %28 = add nsw i32 %1, 1
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds %class.anon.373, %class.anon.373* %27, i64 0, i32 0
  %31 = load %"class.std::__1::vector.366"*, %"class.std::__1::vector.366"** %30, align 8
  %32 = getelementptr inbounds %class.anon.373, %class.anon.373* %27, i64 0, i32 1
  %33 = load i8*, i8** %32, align 8
  %34 = load i8, i8* %33, align 1, !range !2
  %35 = icmp eq i8 %34, 0
  %36 = select i1 %35, i64 %29, i64 0
  %37 = getelementptr inbounds %"class.std::__1::vector.366", %"class.std::__1::vector.366"* %31, i64 0, i32 0, i32 0
  %38 = load %"struct.jxl::BitWriter"*, %"struct.jxl::BitWriter"** %37, align 8
  %39 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %38, i64 %36
  %40 = getelementptr inbounds %class.anon.375, %class.anon.375* %11, i64 0, i32 3
  %41 = load %"class.std::__1::unique_ptr.263"*, %"class.std::__1::unique_ptr.263"** %40, align 8
  %42 = getelementptr inbounds %"class.std::__1::unique_ptr.263", %"class.std::__1::unique_ptr.263"* %41, i64 0, i32 0, i32 0, i32 0
  %43 = load %"struct.jxl::FrameHeader"*, %"struct.jxl::FrameHeader"** %42, align 8
  %44 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %43, i64 0, i32 2
  %45 = load i32, i32* %44, align 4
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %78

47:                                               ; preds = %24
  %48 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %43, i64 0, i32 4
  %49 = load i64, i64* %48, align 8
  %50 = and i64 %49, 32
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %52, label %78

52:                                               ; preds = %47
  %53 = bitcast %"class.jxl::BitWriter::Allotment"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %53) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %53, i8 -86, i64 40, i1 false) #8
  call void @_ZN3jxl9BitWriter9AllotmentC1EPS0_m(%"class.jxl::BitWriter::Allotment"* nonnull %4, %"struct.jxl::BitWriter"* %39, i64 2) #8
  %54 = getelementptr inbounds %class.anon.375, %class.anon.375* %11, i64 0, i32 4
  %55 = load %"class.std::__1::unique_ptr.295"*, %"class.std::__1::unique_ptr.295"** %54, align 8
  %56 = getelementptr inbounds %"class.std::__1::unique_ptr.295", %"class.std::__1::unique_ptr.295"* %55, i64 0, i32 0, i32 0, i32 0
  %57 = load %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ModularFrameEncoder"** %56, align 8
  %58 = sext i32 %1 to i64
  %59 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %57, i64 0, i32 1, i32 0, i32 0
  %60 = load i8*, i8** %59, align 8
  %61 = getelementptr inbounds i8, i8* %60, i64 %58
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i64
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %39, i64 2, i64 %63) #8
  call void @_ZN3jxl16ReclaimAndChargeEPNS_9BitWriterEPNS0_9AllotmentEmPNS_6AuxOutE(%"struct.jxl::BitWriter"* %39, %"class.jxl::BitWriter::Allotment"* nonnull %4, i64 6, %"struct.jxl::AuxOut"* %25) #8
  %64 = load %"class.std::__1::unique_ptr.295"*, %"class.std::__1::unique_ptr.295"** %54, align 8
  %65 = getelementptr inbounds %"class.std::__1::unique_ptr.295", %"class.std::__1::unique_ptr.295"* %64, i64 0, i32 0, i32 0, i32 0
  %66 = load %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ModularFrameEncoder"** %65, align 8
  %67 = bitcast %"struct.jxl::ModularStreamId"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %67) #8
  %68 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %5, i64 0, i32 0
  store i32 1, i32* %68, align 8, !alias.scope !92
  %69 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %5, i64 0, i32 1
  store i64 0, i64* %69, align 8, !alias.scope !92
  %70 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %5, i64 0, i32 2
  store i64 %58, i64* %70, align 8, !alias.scope !92
  %71 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %5, i64 0, i32 3
  store i64 0, i64* %71, align 8, !alias.scope !92
  %72 = call i32 @_ZN3jxl19ModularFrameEncoder12EncodeStreamEPNS_9BitWriterEPNS_6AuxOutEmRKNS_15ModularStreamIdE(%"class.jxl::ModularFrameEncoder"* %66, %"struct.jxl::BitWriter"* %39, %"struct.jxl::AuxOut"* %25, i64 6, %"struct.jxl::ModularStreamId"* nonnull dereferenceable(32) %5) #8
  %73 = icmp eq i32 %72, 0
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %67) #8
  br i1 %73, label %77, label %74

74:                                               ; preds = %52
  %75 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.37, i64 0, i64 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.1, i64 0, i64 0), i32 1278, i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.67, i64 0, i64 0)) #8
  %76 = call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

77:                                               ; preds = %52
  call void @_ZN3jxl9BitWriter9AllotmentD1Ev(%"class.jxl::BitWriter::Allotment"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %53) #8
  br label %78

78:                                               ; preds = %77, %47, %24
  %79 = getelementptr inbounds %class.anon.375, %class.anon.375* %11, i64 0, i32 4
  %80 = load %"class.std::__1::unique_ptr.295"*, %"class.std::__1::unique_ptr.295"** %79, align 8
  %81 = getelementptr inbounds %"class.std::__1::unique_ptr.295", %"class.std::__1::unique_ptr.295"* %80, i64 0, i32 0, i32 0, i32 0
  %82 = load %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ModularFrameEncoder"** %81, align 8
  %83 = bitcast %"struct.jxl::ModularStreamId"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %83) #8
  %84 = sext i32 %1 to i64
  %85 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %6, i64 0, i32 0
  store i32 2, i32* %85, align 8, !alias.scope !95
  %86 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %6, i64 0, i32 1
  store i64 0, i64* %86, align 8, !alias.scope !95
  %87 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %6, i64 0, i32 2
  store i64 %84, i64* %87, align 8, !alias.scope !95
  %88 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %6, i64 0, i32 3
  store i64 0, i64* %88, align 8, !alias.scope !95
  %89 = call i32 @_ZN3jxl19ModularFrameEncoder12EncodeStreamEPNS_9BitWriterEPNS_6AuxOutEmRKNS_15ModularStreamIdE(%"class.jxl::ModularFrameEncoder"* %82, %"struct.jxl::BitWriter"* %39, %"struct.jxl::AuxOut"* %25, i64 15, %"struct.jxl::ModularStreamId"* nonnull dereferenceable(32) %6) #8
  %90 = icmp eq i32 %89, 0
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %83) #8
  br i1 %90, label %94, label %91

91:                                               ; preds = %78
  %92 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.37, i64 0, i64 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.1, i64 0, i64 0), i32 1282, i8* getelementptr inbounds ([120 x i8], [120 x i8]* @.str.68, i64 0, i64 0)) #8
  %93 = call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

94:                                               ; preds = %78
  %95 = load %"class.std::__1::unique_ptr.263"*, %"class.std::__1::unique_ptr.263"** %40, align 8
  %96 = getelementptr inbounds %"class.std::__1::unique_ptr.263", %"class.std::__1::unique_ptr.263"* %95, i64 0, i32 0, i32 0, i32 0
  %97 = load %"struct.jxl::FrameHeader"*, %"struct.jxl::FrameHeader"** %96, align 8
  %98 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %97, i64 0, i32 2
  %99 = load i32, i32* %98, align 4
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %101, label %158

101:                                              ; preds = %94
  %102 = getelementptr inbounds %class.anon.375, %class.anon.375* %11, i64 0, i32 5
  %103 = load %"class.jxl::LossyFrameEncoder"*, %"class.jxl::LossyFrameEncoder"** %102, align 8
  %104 = getelementptr inbounds %"class.jxl::LossyFrameEncoder", %"class.jxl::LossyFrameEncoder"* %103, i64 0, i32 0
  %105 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %104, align 8
  %106 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %105, i64 0, i32 0, i32 2, i32 12
  %107 = load i64, i64* %106, align 8, !noalias !98
  %108 = urem i64 %84, %107
  %109 = udiv i64 %84, %107
  %110 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %105, i64 0, i32 0, i32 2, i32 16
  %111 = load i64, i64* %110, align 8, !noalias !98
  %112 = mul i64 %111, %108
  %113 = mul i64 %111, %109
  %114 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %105, i64 0, i32 0, i32 2, i32 8
  %115 = load i64, i64* %114, align 8, !noalias !98
  %116 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %105, i64 0, i32 0, i32 2, i32 9
  %117 = load i64, i64* %116, align 8, !noalias !98
  %118 = add i64 %112, %111
  %119 = icmp ugt i64 %118, %115
  %120 = call i64 @llvm.usub.sat.i64(i64 %115, i64 %112) #8
  %121 = select i1 %119, i64 %120, i64 %111
  %122 = add i64 %113, %111
  %123 = icmp ugt i64 %122, %117
  %124 = call i64 @llvm.usub.sat.i64(i64 %117, i64 %113) #8
  %125 = select i1 %123, i64 %124, i64 %111
  %126 = mul i64 %121, %125
  %127 = call i64 @llvm.ctlz.i64(i64 %126, i1 true) #8, !range !38
  %128 = xor i64 %127, 63
  %129 = call i64 @llvm.ctpop.i64(i64 %126) #8, !range !38
  %130 = icmp ugt i64 %129, 1
  %131 = zext i1 %130 to i64
  %132 = add nuw nsw i64 %128, %131
  %133 = icmp eq i64 %132, 0
  br i1 %133, label %144, label %134

134:                                              ; preds = %101
  %135 = bitcast %"class.jxl::BitWriter::Allotment"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %135) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %135, i8 -86, i64 40, i1 false) #8
  call void @_ZN3jxl9BitWriter9AllotmentC1EPS0_m(%"class.jxl::BitWriter::Allotment"* nonnull %7, %"struct.jxl::BitWriter"* %39, i64 %132) #8
  %136 = load %"class.std::__1::unique_ptr.295"*, %"class.std::__1::unique_ptr.295"** %79, align 8
  %137 = getelementptr inbounds %"class.std::__1::unique_ptr.295", %"class.std::__1::unique_ptr.295"* %136, i64 0, i32 0, i32 0, i32 0
  %138 = load %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ModularFrameEncoder"** %137, align 8
  %139 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %138, i64 0, i32 0, i32 0, i32 0
  %140 = load i64*, i64** %139, align 8
  %141 = getelementptr inbounds i64, i64* %140, i64 %84
  %142 = load i64, i64* %141, align 8
  %143 = add i64 %142, -1
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %39, i64 %132, i64 %143) #8
  call void @_ZN3jxl16ReclaimAndChargeEPNS_9BitWriterEPNS0_9AllotmentEmPNS_6AuxOutE(%"struct.jxl::BitWriter"* %39, %"class.jxl::BitWriter::Allotment"* nonnull %7, i64 7, %"struct.jxl::AuxOut"* %25) #8
  call void @_ZN3jxl9BitWriter9AllotmentD1Ev(%"class.jxl::BitWriter::Allotment"* nonnull %7) #8
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %135) #8
  br label %144

144:                                              ; preds = %134, %101
  %145 = load %"class.std::__1::unique_ptr.295"*, %"class.std::__1::unique_ptr.295"** %79, align 8
  %146 = getelementptr inbounds %"class.std::__1::unique_ptr.295", %"class.std::__1::unique_ptr.295"* %145, i64 0, i32 0, i32 0, i32 0
  %147 = load %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ModularFrameEncoder"** %146, align 8
  %148 = bitcast %"struct.jxl::ModularStreamId"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %148) #8
  %149 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %8, i64 0, i32 0
  store i32 3, i32* %149, align 8, !alias.scope !101
  %150 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %8, i64 0, i32 1
  store i64 0, i64* %150, align 8, !alias.scope !101
  %151 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %8, i64 0, i32 2
  store i64 %84, i64* %151, align 8, !alias.scope !101
  %152 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %8, i64 0, i32 3
  store i64 0, i64* %152, align 8, !alias.scope !101
  %153 = call i32 @_ZN3jxl19ModularFrameEncoder12EncodeStreamEPNS_9BitWriterEPNS_6AuxOutEmRKNS_15ModularStreamIdE(%"class.jxl::ModularFrameEncoder"* %147, %"struct.jxl::BitWriter"* %39, %"struct.jxl::AuxOut"* %25, i64 7, %"struct.jxl::ModularStreamId"* nonnull dereferenceable(32) %8) #8
  %154 = icmp eq i32 %153, 0
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %148) #8
  br i1 %154, label %158, label %155

155:                                              ; preds = %144
  %156 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.37, i64 0, i64 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.1, i64 0, i64 0), i32 1295, i8* getelementptr inbounds ([120 x i8], [120 x i8]* @.str.69, i64 0, i64 0)) #8
  %157 = call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

158:                                              ; preds = %94, %144
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateINSt3__18functionIFNS_6StatusEmEEEZNS_11EncodeFrameERKNS_14CompressParamsERKNS_9FrameInfoEPKNS_13CodecMetadataERKNS_11ImageBundleEPNS_18PassesEncoderStateEPS0_PNS_9BitWriterEPNS_6AuxOutEE3$_3E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #0 align 2 {
  %3 = bitcast i8* %0 to %"class.std::__1::function.282"**
  %4 = load %"class.std::__1::function.282"*, %"class.std::__1::function.282"** %3, align 8
  %5 = getelementptr inbounds %"class.std::__1::function.282", %"class.std::__1::function.282"* %4, i64 0, i32 0, i32 1, i32 0
  %6 = load i32 (%"union.std::__1::__function::__policy_storage"*, i64)*, i32 (%"union.std::__1::__function::__policy_storage"*, i64)** %5, align 8
  %7 = getelementptr inbounds %"class.std::__1::function.282", %"class.std::__1::function.282"* %4, i64 0, i32 0, i32 0
  %8 = tail call i32 %6(%"union.std::__1::__function::__policy_storage"* %7, i64 %1) #8
  %9 = icmp ne i32 %8, 0
  %10 = sext i1 %9 to i32
  ret i32 %10
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateINSt3__18functionIFNS_6StatusEmEEEZNS_11EncodeFrameERKNS_14CompressParamsERKNS_9FrameInfoEPKNS_13CodecMetadataERKNS_11ImageBundleEPNS_18PassesEncoderStateEPS0_PNS_9BitWriterEPNS_6AuxOutEE3$_3E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #0 align 2 {
  %4 = alloca %"struct.jxl::ModularStreamId", align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %class.anon.377**
  %7 = load %class.anon.377*, %class.anon.377** %6, align 8
  %8 = getelementptr inbounds %class.anon.377, %class.anon.377* %7, i64 0, i32 0
  %9 = load %"struct.jxl::AuxOut"**, %"struct.jxl::AuxOut"*** %8, align 8
  %10 = load %"struct.jxl::AuxOut"*, %"struct.jxl::AuxOut"** %9, align 8
  %11 = icmp eq %"struct.jxl::AuxOut"* %10, null
  br i1 %11, label %20, label %12

12:                                               ; preds = %3
  %13 = getelementptr inbounds %class.anon.377, %class.anon.377* %7, i64 0, i32 1
  %14 = load %"class.std::__1::vector.275"*, %"class.std::__1::vector.275"** %13, align 8
  %15 = shl i64 %2, 32
  %16 = ashr exact i64 %15, 32
  %17 = getelementptr inbounds %"class.std::__1::vector.275", %"class.std::__1::vector.275"* %14, i64 0, i32 0, i32 0
  %18 = load %"struct.jxl::AuxOut"*, %"struct.jxl::AuxOut"** %17, align 8
  %19 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %18, i64 %16
  br label %20

20:                                               ; preds = %12, %3
  %21 = phi %"struct.jxl::AuxOut"* [ %19, %12 ], [ null, %3 ]
  %22 = getelementptr inbounds %class.anon.377, %class.anon.377* %7, i64 0, i32 2
  %23 = load i64*, i64** %22, align 8
  %24 = load i64, i64* %23, align 8
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %124, label %26

26:                                               ; preds = %20
  %27 = getelementptr inbounds %class.anon.377, %class.anon.377* %7, i64 0, i32 3
  %28 = getelementptr inbounds %class.anon.377, %class.anon.377* %7, i64 0, i32 4
  %29 = sext i32 %1 to i64
  %30 = getelementptr inbounds %class.anon.377, %class.anon.377* %7, i64 0, i32 5
  %31 = add nsw i64 %29, 2
  %32 = getelementptr inbounds %class.anon.377, %class.anon.377* %7, i64 0, i32 7
  %33 = bitcast %"struct.jxl::ModularStreamId"* %4 to i8*
  %34 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %4, i64 0, i32 0
  %35 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %4, i64 0, i32 1
  %36 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %4, i64 0, i32 2
  %37 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %4, i64 0, i32 3
  br label %42

38:                                               ; preds = %89
  %39 = load i64*, i64** %22, align 8
  %40 = load i64, i64* %39, align 8
  %41 = icmp ult i64 %117, %40
  br i1 %41, label %42, label %124

42:                                               ; preds = %38, %26
  %43 = phi i64 [ 0, %26 ], [ %117, %38 ]
  %44 = load %"class.std::__1::unique_ptr.263"*, %"class.std::__1::unique_ptr.263"** %27, align 8
  %45 = getelementptr inbounds %"class.std::__1::unique_ptr.263", %"class.std::__1::unique_ptr.263"* %44, i64 0, i32 0, i32 0, i32 0
  %46 = load %"struct.jxl::FrameHeader"*, %"struct.jxl::FrameHeader"** %45, align 8
  %47 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %46, i64 0, i32 2
  %48 = load i32, i32* %47, align 4
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %89

50:                                               ; preds = %42
  %51 = load %"class.jxl::LossyFrameEncoder"*, %"class.jxl::LossyFrameEncoder"** %28, align 8
  %52 = load %class.anon.374*, %class.anon.374** %30, align 8
  %53 = getelementptr inbounds %class.anon.374, %class.anon.374* %52, i64 0, i32 0
  %54 = load %class.anon.373*, %class.anon.373** %53, align 8
  %55 = getelementptr inbounds %class.anon.374, %class.anon.374* %52, i64 0, i32 1
  %56 = load %"struct.jxl::FrameDimensions"*, %"struct.jxl::FrameDimensions"** %55, align 8
  %57 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %56, i64 0, i32 14
  %58 = load i64, i64* %57, align 8
  %59 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %56, i64 0, i32 15
  %60 = load i64, i64* %59, align 8
  %61 = mul i64 %58, %43
  %62 = add i64 %60, %31
  %63 = add i64 %62, %61
  %64 = getelementptr inbounds %class.anon.373, %class.anon.373* %54, i64 0, i32 0
  %65 = load %"class.std::__1::vector.366"*, %"class.std::__1::vector.366"** %64, align 8
  %66 = getelementptr inbounds %class.anon.373, %class.anon.373* %54, i64 0, i32 1
  %67 = load i8*, i8** %66, align 8
  %68 = load i8, i8* %67, align 1, !range !2
  %69 = icmp eq i8 %68, 0
  %70 = select i1 %69, i64 %63, i64 0
  %71 = getelementptr inbounds %"class.std::__1::vector.366", %"class.std::__1::vector.366"* %65, i64 0, i32 0, i32 0
  %72 = load %"struct.jxl::BitWriter"*, %"struct.jxl::BitWriter"** %71, align 8
  %73 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %72, i64 %70
  %74 = getelementptr inbounds %"class.jxl::LossyFrameEncoder", %"class.jxl::LossyFrameEncoder"* %51, i64 0, i32 0
  %75 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %74, align 8
  %76 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %75, i64 0, i32 8, i32 0, i32 0
  %77 = load i8*, i8** %76, align 8
  %78 = getelementptr inbounds i8, i8* %77, i64 %29
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i64
  %81 = call i32 @_ZN3jxl32EncodeGroupTokenizedCoefficientsEmmmRKNS_18PassesEncoderStateEPNS_9BitWriterEPNS_6AuxOutE(i64 %29, i64 %43, i64 %80, %"struct.jxl::PassesEncoderState"* dereferenceable(5088) %75, %"struct.jxl::BitWriter"* %73, %"struct.jxl::AuxOut"* %21) #8
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %89, label %83

83:                                               ; preds = %50
  %84 = getelementptr inbounds %class.anon.377, %class.anon.377* %7, i64 0, i32 6
  %85 = bitcast %"struct.std::__1::atomic"** %84 to %"struct.std::__1::__atomic_base"**
  %86 = load %"struct.std::__1::__atomic_base"*, %"struct.std::__1::__atomic_base"** %85, align 8
  %87 = getelementptr inbounds %"struct.std::__1::__atomic_base", %"struct.std::__1::__atomic_base"* %86, i64 0, i32 0, i32 0, i32 0, i32 0
  %88 = atomicrmw add i32* %87, i32 1 monotonic
  br label %124

89:                                               ; preds = %50, %42
  %90 = load %"class.std::__1::unique_ptr.295"*, %"class.std::__1::unique_ptr.295"** %32, align 8
  %91 = getelementptr inbounds %"class.std::__1::unique_ptr.295", %"class.std::__1::unique_ptr.295"* %90, i64 0, i32 0, i32 0, i32 0
  %92 = load %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ModularFrameEncoder"** %91, align 8
  %93 = load %class.anon.374*, %class.anon.374** %30, align 8
  %94 = getelementptr inbounds %class.anon.374, %class.anon.374* %93, i64 0, i32 0
  %95 = load %class.anon.373*, %class.anon.373** %94, align 8
  %96 = getelementptr inbounds %class.anon.374, %class.anon.374* %93, i64 0, i32 1
  %97 = load %"struct.jxl::FrameDimensions"*, %"struct.jxl::FrameDimensions"** %96, align 8
  %98 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %97, i64 0, i32 14
  %99 = load i64, i64* %98, align 8
  %100 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %97, i64 0, i32 15
  %101 = load i64, i64* %100, align 8
  %102 = mul i64 %99, %43
  %103 = add i64 %101, %31
  %104 = add i64 %103, %102
  %105 = getelementptr inbounds %class.anon.373, %class.anon.373* %95, i64 0, i32 0
  %106 = load %"class.std::__1::vector.366"*, %"class.std::__1::vector.366"** %105, align 8
  %107 = getelementptr inbounds %class.anon.373, %class.anon.373* %95, i64 0, i32 1
  %108 = load i8*, i8** %107, align 8
  %109 = load i8, i8* %108, align 1, !range !2
  %110 = icmp eq i8 %109, 0
  %111 = select i1 %110, i64 %104, i64 0
  %112 = getelementptr inbounds %"class.std::__1::vector.366", %"class.std::__1::vector.366"* %106, i64 0, i32 0, i32 0
  %113 = load %"struct.jxl::BitWriter"*, %"struct.jxl::BitWriter"** %112, align 8
  %114 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %113, i64 %111
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %33) #8
  store i32 5, i32* %34, align 8, !alias.scope !104
  store i64 0, i64* %35, align 8, !alias.scope !104
  store i64 %29, i64* %36, align 8, !alias.scope !104
  store i64 %43, i64* %37, align 8, !alias.scope !104
  %115 = call i32 @_ZN3jxl19ModularFrameEncoder12EncodeStreamEPNS_9BitWriterEPNS_6AuxOutEmRKNS_15ModularStreamIdE(%"class.jxl::ModularFrameEncoder"* %92, %"struct.jxl::BitWriter"* %114, %"struct.jxl::AuxOut"* %21, i64 16, %"struct.jxl::ModularStreamId"* nonnull dereferenceable(32) %4) #8
  %116 = icmp eq i32 %115, 0
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %33) #8
  %117 = add nuw i64 %43, 1
  br i1 %116, label %38, label %118

118:                                              ; preds = %89
  %119 = getelementptr inbounds %class.anon.377, %class.anon.377* %7, i64 0, i32 6
  %120 = bitcast %"struct.std::__1::atomic"** %119 to %"struct.std::__1::__atomic_base"**
  %121 = load %"struct.std::__1::__atomic_base"*, %"struct.std::__1::__atomic_base"** %120, align 8
  %122 = getelementptr inbounds %"struct.std::__1::__atomic_base", %"struct.std::__1::__atomic_base"* %121, i64 0, i32 0, i32 0, i32 0, i32 0
  %123 = atomicrmw add i32* %122, i32 1 monotonic
  br label %124

124:                                              ; preds = %38, %20, %83, %118
  ret void
}

declare i32 @_ZN3jxl32EncodeGroupTokenizedCoefficientsEmmmRKNS_18PassesEncoderStateEPNS_9BitWriterEPNS_6AuxOutE(i64, i64, i64, %"struct.jxl::PassesEncoderState"* dereferenceable(5088), %"struct.jxl::BitWriter"*, %"struct.jxl::AuxOut"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @"_ZNSt3__16__sortIRZN3jxl11EncodeFrameERKNS1_14CompressParamsERKNS1_9FrameInfoEPKNS1_13CodecMetadataERKNS1_11ImageBundleEPNS1_18PassesEncoderStateEPNS1_10ThreadPoolEPNS1_9BitWriterEPNS1_6AuxOutEE3$_4PjEEvT0_SP_T_"(i32*, i32*, %class.anon.380* readonly dereferenceable(8)) unnamed_addr #0 {
  br label %4

4:                                                ; preds = %192, %3
  %5 = phi i32* [ %1, %3 ], [ %174, %192 ]
  %6 = phi i32* [ %0, %3 ], [ %13, %192 ]
  %7 = ptrtoint i32* %5 to i64
  %8 = getelementptr inbounds i32, i32* %5, i64 -1
  %9 = ptrtoint i32* %5 to i64
  br label %10

10:                                               ; preds = %201, %4
  %11 = phi i32* [ %6, %4 ], [ %202, %201 ]
  br label %12

12:                                               ; preds = %127, %10
  %13 = phi i32* [ %11, %10 ], [ %116, %127 ]
  %14 = ptrtoint i32* %13 to i64
  %15 = sub i64 %7, %14
  %16 = ashr exact i64 %15, 2
  switch i64 %16, label %40 [
    i64 0, label %205
    i64 1, label %205
    i64 2, label %17
    i64 3, label %25
    i64 4, label %29
    i64 5, label %34
  ]

17:                                               ; preds = %12
  %18 = getelementptr inbounds i32, i32* %5, i64 -1
  %19 = load i32, i32* %18, align 4
  %20 = load i32, i32* %13, align 4
  %21 = tail call fastcc zeroext i1 @"_ZZN3jxl11EncodeFrameERKNS_14CompressParamsERKNS_9FrameInfoEPKNS_13CodecMetadataERKNS_11ImageBundleEPNS_18PassesEncoderStateEPNS_10ThreadPoolEPNS_9BitWriterEPNS_6AuxOutEENK3$_4clEjj"(%class.anon.380* %2, i32 %19, i32 %20)
  br i1 %21, label %22, label %205

22:                                               ; preds = %17
  %23 = load i32, i32* %13, align 4
  %24 = load i32, i32* %18, align 4
  store i32 %24, i32* %13, align 4
  store i32 %23, i32* %18, align 4
  br label %205

25:                                               ; preds = %12
  %26 = getelementptr inbounds i32, i32* %13, i64 1
  %27 = getelementptr inbounds i32, i32* %5, i64 -1
  %28 = tail call fastcc i32 @"_ZNSt3__17__sort3IRZN3jxl11EncodeFrameERKNS1_14CompressParamsERKNS1_9FrameInfoEPKNS1_13CodecMetadataERKNS1_11ImageBundleEPNS1_18PassesEncoderStateEPNS1_10ThreadPoolEPNS1_9BitWriterEPNS1_6AuxOutEE3$_4PjEEjT0_SP_SP_T_"(i32* %13, i32* %26, i32* %27, %class.anon.380* dereferenceable(8) %2)
  br label %205

29:                                               ; preds = %12
  %30 = getelementptr inbounds i32, i32* %13, i64 1
  %31 = getelementptr inbounds i32, i32* %13, i64 2
  %32 = getelementptr inbounds i32, i32* %5, i64 -1
  %33 = tail call fastcc i32 @"_ZNSt3__17__sort4IRZN3jxl11EncodeFrameERKNS1_14CompressParamsERKNS1_9FrameInfoEPKNS1_13CodecMetadataERKNS1_11ImageBundleEPNS1_18PassesEncoderStateEPNS1_10ThreadPoolEPNS1_9BitWriterEPNS1_6AuxOutEE3$_4PjEEjT0_SP_SP_SP_T_"(i32* %13, i32* %30, i32* %31, i32* %32, %class.anon.380* dereferenceable(8) %2)
  br label %205

34:                                               ; preds = %12
  %35 = getelementptr inbounds i32, i32* %13, i64 1
  %36 = getelementptr inbounds i32, i32* %13, i64 2
  %37 = getelementptr inbounds i32, i32* %13, i64 3
  %38 = getelementptr inbounds i32, i32* %5, i64 -1
  %39 = tail call fastcc i32 @"_ZNSt3__17__sort5IRZN3jxl11EncodeFrameERKNS1_14CompressParamsERKNS1_9FrameInfoEPKNS1_13CodecMetadataERKNS1_11ImageBundleEPNS1_18PassesEncoderStateEPNS1_10ThreadPoolEPNS1_9BitWriterEPNS1_6AuxOutEE3$_4PjEEjT0_SP_SP_SP_SP_T_"(i32* %13, i32* %35, i32* %36, i32* %37, i32* %38, %class.anon.380* dereferenceable(8) %2)
  br label %205

40:                                               ; preds = %12
  %41 = icmp slt i64 %15, 124
  br i1 %41, label %42, label %70

42:                                               ; preds = %40
  %43 = getelementptr inbounds i32, i32* %13, i64 2
  %44 = getelementptr inbounds i32, i32* %13, i64 1
  %45 = tail call fastcc i32 @"_ZNSt3__17__sort3IRZN3jxl11EncodeFrameERKNS1_14CompressParamsERKNS1_9FrameInfoEPKNS1_13CodecMetadataERKNS1_11ImageBundleEPNS1_18PassesEncoderStateEPNS1_10ThreadPoolEPNS1_9BitWriterEPNS1_6AuxOutEE3$_4PjEEjT0_SP_SP_T_"(i32* %13, i32* %44, i32* %43, %class.anon.380* dereferenceable(8) %2) #8
  %46 = getelementptr inbounds i32, i32* %13, i64 3
  %47 = icmp eq i32* %46, %5
  br i1 %47, label %205, label %48

48:                                               ; preds = %42, %67
  %49 = phi i32* [ %68, %67 ], [ %46, %42 ]
  %50 = phi i32* [ %49, %67 ], [ %43, %42 ]
  %51 = load i32, i32* %49, align 4
  %52 = load i32, i32* %50, align 4
  %53 = tail call fastcc zeroext i1 @"_ZZN3jxl11EncodeFrameERKNS_14CompressParamsERKNS_9FrameInfoEPKNS_13CodecMetadataERKNS_11ImageBundleEPNS_18PassesEncoderStateEPNS_10ThreadPoolEPNS_9BitWriterEPNS_6AuxOutEENK3$_4clEjj"(%class.anon.380* %2, i32 %51, i32 %52) #8
  br i1 %53, label %54, label %67

54:                                               ; preds = %48
  %55 = load i32, i32* %49, align 4
  br label %56

56:                                               ; preds = %61, %54
  %57 = phi i32* [ %49, %54 ], [ %58, %61 ]
  %58 = phi i32* [ %50, %54 ], [ %62, %61 ]
  %59 = load i32, i32* %58, align 4
  store i32 %59, i32* %57, align 4
  %60 = icmp eq i32* %58, %13
  br i1 %60, label %65, label %61

61:                                               ; preds = %56
  %62 = getelementptr inbounds i32, i32* %58, i64 -1
  %63 = load i32, i32* %62, align 4
  %64 = tail call fastcc zeroext i1 @"_ZZN3jxl11EncodeFrameERKNS_14CompressParamsERKNS_9FrameInfoEPKNS_13CodecMetadataERKNS_11ImageBundleEPNS_18PassesEncoderStateEPNS_10ThreadPoolEPNS_9BitWriterEPNS_6AuxOutEENK3$_4clEjj"(%class.anon.380* %2, i32 %55, i32 %63) #8
  br i1 %64, label %56, label %65

65:                                               ; preds = %61, %56
  %66 = phi i32* [ %13, %56 ], [ %58, %61 ]
  store i32 %55, i32* %66, align 4
  br label %67

67:                                               ; preds = %65, %48
  %68 = getelementptr inbounds i32, i32* %49, i64 1
  %69 = icmp eq i32* %68, %5
  br i1 %69, label %205, label %48

70:                                               ; preds = %40
  %71 = icmp sgt i64 %15, 3996
  %72 = sdiv i64 %16, 2
  %73 = getelementptr inbounds i32, i32* %13, i64 %72
  br i1 %71, label %74, label %79

74:                                               ; preds = %70
  %75 = sdiv i64 %16, 4
  %76 = getelementptr inbounds i32, i32* %13, i64 %75
  %77 = getelementptr inbounds i32, i32* %73, i64 %75
  %78 = tail call fastcc i32 @"_ZNSt3__17__sort5IRZN3jxl11EncodeFrameERKNS1_14CompressParamsERKNS1_9FrameInfoEPKNS1_13CodecMetadataERKNS1_11ImageBundleEPNS1_18PassesEncoderStateEPNS1_10ThreadPoolEPNS1_9BitWriterEPNS1_6AuxOutEE3$_4PjEEjT0_SP_SP_SP_SP_T_"(i32* %13, i32* %76, i32* %73, i32* %77, i32* %8, %class.anon.380* dereferenceable(8) %2)
  br label %81

79:                                               ; preds = %70
  %80 = tail call fastcc i32 @"_ZNSt3__17__sort3IRZN3jxl11EncodeFrameERKNS1_14CompressParamsERKNS1_9FrameInfoEPKNS1_13CodecMetadataERKNS1_11ImageBundleEPNS1_18PassesEncoderStateEPNS1_10ThreadPoolEPNS1_9BitWriterEPNS1_6AuxOutEE3$_4PjEEjT0_SP_SP_T_"(i32* %13, i32* %73, i32* %8, %class.anon.380* dereferenceable(8) %2)
  br label %81

81:                                               ; preds = %79, %74
  %82 = phi i32 [ %78, %74 ], [ %80, %79 ]
  %83 = load i32, i32* %13, align 4
  %84 = load i32, i32* %73, align 4
  %85 = tail call fastcc zeroext i1 @"_ZZN3jxl11EncodeFrameERKNS_14CompressParamsERKNS_9FrameInfoEPKNS_13CodecMetadataERKNS_11ImageBundleEPNS_18PassesEncoderStateEPNS_10ThreadPoolEPNS_9BitWriterEPNS_6AuxOutEENK3$_4clEjj"(%class.anon.380* %2, i32 %83, i32 %84)
  br i1 %85, label %140, label %86

86:                                               ; preds = %81, %132
  %87 = phi i32* [ %88, %132 ], [ %8, %81 ]
  %88 = getelementptr inbounds i32, i32* %87, i64 -1
  %89 = icmp eq i32* %13, %88
  br i1 %89, label %90, label %132

90:                                               ; preds = %86
  %91 = getelementptr inbounds i32, i32* %13, i64 1
  %92 = load i32, i32* %13, align 4
  %93 = load i32, i32* %8, align 4
  %94 = tail call fastcc zeroext i1 @"_ZZN3jxl11EncodeFrameERKNS_14CompressParamsERKNS_9FrameInfoEPKNS_13CodecMetadataERKNS_11ImageBundleEPNS_18PassesEncoderStateEPNS_10ThreadPoolEPNS_9BitWriterEPNS_6AuxOutEENK3$_4clEjj"(%class.anon.380* %2, i32 %92, i32 %93)
  br i1 %94, label %109, label %95

95:                                               ; preds = %90
  %96 = icmp eq i32* %91, %8
  br i1 %96, label %205, label %97

97:                                               ; preds = %95, %106
  %98 = phi i32* [ %107, %106 ], [ %91, %95 ]
  %99 = load i32, i32* %13, align 4
  %100 = load i32, i32* %98, align 4
  %101 = tail call fastcc zeroext i1 @"_ZZN3jxl11EncodeFrameERKNS_14CompressParamsERKNS_9FrameInfoEPKNS_13CodecMetadataERKNS_11ImageBundleEPNS_18PassesEncoderStateEPNS_10ThreadPoolEPNS_9BitWriterEPNS_6AuxOutEENK3$_4clEjj"(%class.anon.380* %2, i32 %99, i32 %100)
  br i1 %101, label %102, label %106

102:                                              ; preds = %97
  %103 = load i32, i32* %98, align 4
  %104 = load i32, i32* %8, align 4
  store i32 %104, i32* %98, align 4
  store i32 %103, i32* %8, align 4
  %105 = getelementptr inbounds i32, i32* %98, i64 1
  br label %109

106:                                              ; preds = %97
  %107 = getelementptr inbounds i32, i32* %98, i64 1
  %108 = icmp eq i32* %107, %8
  br i1 %108, label %205, label %97

109:                                              ; preds = %102, %90
  %110 = phi i32* [ %91, %90 ], [ %105, %102 ]
  %111 = icmp eq i32* %110, %8
  br i1 %111, label %205, label %112

112:                                              ; preds = %109, %129
  %113 = phi i32* [ %120, %129 ], [ %110, %109 ]
  %114 = phi i32* [ %124, %129 ], [ %8, %109 ]
  br label %115

115:                                              ; preds = %115, %112
  %116 = phi i32* [ %113, %112 ], [ %120, %115 ]
  %117 = load i32, i32* %13, align 4
  %118 = load i32, i32* %116, align 4
  %119 = tail call fastcc zeroext i1 @"_ZZN3jxl11EncodeFrameERKNS_14CompressParamsERKNS_9FrameInfoEPKNS_13CodecMetadataERKNS_11ImageBundleEPNS_18PassesEncoderStateEPNS_10ThreadPoolEPNS_9BitWriterEPNS_6AuxOutEENK3$_4clEjj"(%class.anon.380* %2, i32 %117, i32 %118)
  %120 = getelementptr inbounds i32, i32* %116, i64 1
  br i1 %119, label %121, label %115

121:                                              ; preds = %115, %121
  %122 = phi i32* [ %124, %121 ], [ %114, %115 ]
  %123 = load i32, i32* %13, align 4
  %124 = getelementptr inbounds i32, i32* %122, i64 -1
  %125 = load i32, i32* %124, align 4
  %126 = tail call fastcc zeroext i1 @"_ZZN3jxl11EncodeFrameERKNS_14CompressParamsERKNS_9FrameInfoEPKNS_13CodecMetadataERKNS_11ImageBundleEPNS_18PassesEncoderStateEPNS_10ThreadPoolEPNS_9BitWriterEPNS_6AuxOutEENK3$_4clEjj"(%class.anon.380* %2, i32 %123, i32 %125)
  br i1 %126, label %121, label %127

127:                                              ; preds = %121
  %128 = icmp ult i32* %116, %124
  br i1 %128, label %129, label %12

129:                                              ; preds = %127
  %130 = load i32, i32* %116, align 4
  %131 = load i32, i32* %124, align 4
  store i32 %131, i32* %116, align 4
  store i32 %130, i32* %124, align 4
  br label %112

132:                                              ; preds = %86
  %133 = load i32, i32* %88, align 4
  %134 = load i32, i32* %73, align 4
  %135 = tail call fastcc zeroext i1 @"_ZZN3jxl11EncodeFrameERKNS_14CompressParamsERKNS_9FrameInfoEPKNS_13CodecMetadataERKNS_11ImageBundleEPNS_18PassesEncoderStateEPNS_10ThreadPoolEPNS_9BitWriterEPNS_6AuxOutEENK3$_4clEjj"(%class.anon.380* %2, i32 %133, i32 %134)
  br i1 %135, label %136, label %86

136:                                              ; preds = %132
  %137 = load i32, i32* %13, align 4
  %138 = load i32, i32* %88, align 4
  store i32 %138, i32* %13, align 4
  store i32 %137, i32* %88, align 4
  %139 = add i32 %82, 1
  br label %140

140:                                              ; preds = %81, %136
  %141 = phi i32 [ %139, %136 ], [ %82, %81 ]
  %142 = phi i32* [ %88, %136 ], [ %8, %81 ]
  %143 = ptrtoint i32* %13 to i64
  %144 = getelementptr inbounds i32, i32* %13, i64 1
  %145 = icmp ult i32* %144, %142
  br i1 %145, label %146, label %171

146:                                              ; preds = %140, %165
  %147 = phi i32* [ %170, %165 ], [ %73, %140 ]
  %148 = phi i32 [ %168, %165 ], [ %141, %140 ]
  %149 = phi i32* [ %156, %165 ], [ %144, %140 ]
  %150 = phi i32* [ %159, %165 ], [ %142, %140 ]
  br label %151

151:                                              ; preds = %151, %146
  %152 = phi i32* [ %149, %146 ], [ %156, %151 ]
  %153 = load i32, i32* %152, align 4
  %154 = load i32, i32* %147, align 4
  %155 = tail call fastcc zeroext i1 @"_ZZN3jxl11EncodeFrameERKNS_14CompressParamsERKNS_9FrameInfoEPKNS_13CodecMetadataERKNS_11ImageBundleEPNS_18PassesEncoderStateEPNS_10ThreadPoolEPNS_9BitWriterEPNS_6AuxOutEENK3$_4clEjj"(%class.anon.380* %2, i32 %153, i32 %154)
  %156 = getelementptr inbounds i32, i32* %152, i64 1
  br i1 %155, label %151, label %157

157:                                              ; preds = %151, %157
  %158 = phi i32* [ %159, %157 ], [ %150, %151 ]
  %159 = getelementptr inbounds i32, i32* %158, i64 -1
  %160 = load i32, i32* %159, align 4
  %161 = load i32, i32* %147, align 4
  %162 = tail call fastcc zeroext i1 @"_ZZN3jxl11EncodeFrameERKNS_14CompressParamsERKNS_9FrameInfoEPKNS_13CodecMetadataERKNS_11ImageBundleEPNS_18PassesEncoderStateEPNS_10ThreadPoolEPNS_9BitWriterEPNS_6AuxOutEENK3$_4clEjj"(%class.anon.380* %2, i32 %160, i32 %161)
  br i1 %162, label %163, label %157

163:                                              ; preds = %157
  %164 = icmp ugt i32* %152, %159
  br i1 %164, label %171, label %165

165:                                              ; preds = %163
  %166 = load i32, i32* %152, align 4
  %167 = load i32, i32* %159, align 4
  store i32 %167, i32* %152, align 4
  store i32 %166, i32* %159, align 4
  %168 = add i32 %148, 1
  %169 = icmp eq i32* %147, %152
  %170 = select i1 %169, i32* %159, i32* %147
  br label %146

171:                                              ; preds = %163, %140
  %172 = phi i32* [ %73, %140 ], [ %147, %163 ]
  %173 = phi i32 [ %141, %140 ], [ %148, %163 ]
  %174 = phi i32* [ %144, %140 ], [ %152, %163 ]
  %175 = icmp eq i32* %174, %172
  br i1 %175, label %184, label %176

176:                                              ; preds = %171
  %177 = load i32, i32* %172, align 4
  %178 = load i32, i32* %174, align 4
  %179 = tail call fastcc zeroext i1 @"_ZZN3jxl11EncodeFrameERKNS_14CompressParamsERKNS_9FrameInfoEPKNS_13CodecMetadataERKNS_11ImageBundleEPNS_18PassesEncoderStateEPNS_10ThreadPoolEPNS_9BitWriterEPNS_6AuxOutEENK3$_4clEjj"(%class.anon.380* %2, i32 %177, i32 %178)
  br i1 %179, label %180, label %184

180:                                              ; preds = %176
  %181 = load i32, i32* %174, align 4
  %182 = load i32, i32* %172, align 4
  store i32 %182, i32* %174, align 4
  store i32 %181, i32* %172, align 4
  %183 = add i32 %173, 1
  br label %184

184:                                              ; preds = %171, %180, %176
  %185 = phi i32 [ %183, %180 ], [ %173, %176 ], [ %173, %171 ]
  %186 = icmp eq i32 %185, 0
  br i1 %186, label %187, label %194

187:                                              ; preds = %184
  %188 = tail call fastcc zeroext i1 @"_ZNSt3__127__insertion_sort_incompleteIRZN3jxl11EncodeFrameERKNS1_14CompressParamsERKNS1_9FrameInfoEPKNS1_13CodecMetadataERKNS1_11ImageBundleEPNS1_18PassesEncoderStateEPNS1_10ThreadPoolEPNS1_9BitWriterEPNS1_6AuxOutEE3$_4PjEEbT0_SP_T_"(i32* %13, i32* %174, %class.anon.380* dereferenceable(8) %2)
  %189 = getelementptr inbounds i32, i32* %174, i64 1
  %190 = tail call fastcc zeroext i1 @"_ZNSt3__127__insertion_sort_incompleteIRZN3jxl11EncodeFrameERKNS1_14CompressParamsERKNS1_9FrameInfoEPKNS1_13CodecMetadataERKNS1_11ImageBundleEPNS1_18PassesEncoderStateEPNS1_10ThreadPoolEPNS1_9BitWriterEPNS1_6AuxOutEE3$_4PjEEbT0_SP_T_"(i32* %189, i32* %5, %class.anon.380* dereferenceable(8) %2)
  br i1 %190, label %191, label %193

191:                                              ; preds = %187
  br i1 %188, label %205, label %192

192:                                              ; preds = %191, %203
  br label %4

193:                                              ; preds = %187
  br i1 %188, label %201, label %194

194:                                              ; preds = %193, %184
  %195 = ptrtoint i32* %174 to i64
  %196 = sub i64 %195, %143
  %197 = sub i64 %9, %195
  %198 = icmp slt i64 %196, %197
  br i1 %198, label %199, label %203

199:                                              ; preds = %194
  tail call fastcc void @"_ZNSt3__16__sortIRZN3jxl11EncodeFrameERKNS1_14CompressParamsERKNS1_9FrameInfoEPKNS1_13CodecMetadataERKNS1_11ImageBundleEPNS1_18PassesEncoderStateEPNS1_10ThreadPoolEPNS1_9BitWriterEPNS1_6AuxOutEE3$_4PjEEvT0_SP_T_"(i32* %13, i32* %174, %class.anon.380* dereferenceable(8) %2)
  %200 = getelementptr inbounds i32, i32* %174, i64 1
  br label %201

201:                                              ; preds = %199, %193
  %202 = phi i32* [ %189, %193 ], [ %200, %199 ]
  br label %10

203:                                              ; preds = %194
  %204 = getelementptr inbounds i32, i32* %174, i64 1
  tail call fastcc void @"_ZNSt3__16__sortIRZN3jxl11EncodeFrameERKNS1_14CompressParamsERKNS1_9FrameInfoEPKNS1_13CodecMetadataERKNS1_11ImageBundleEPNS1_18PassesEncoderStateEPNS1_10ThreadPoolEPNS1_9BitWriterEPNS1_6AuxOutEE3$_4PjEEvT0_SP_T_"(i32* %204, i32* %5, %class.anon.380* dereferenceable(8) %2)
  br label %192

205:                                              ; preds = %191, %109, %12, %12, %95, %106, %67, %42, %17, %22, %25, %29, %34
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc zeroext i1 @"_ZZN3jxl11EncodeFrameERKNS_14CompressParamsERKNS_9FrameInfoEPKNS_13CodecMetadataERKNS_11ImageBundleEPNS_18PassesEncoderStateEPNS_10ThreadPoolEPNS_9BitWriterEPNS_6AuxOutEENK3$_4clEjj"(%class.anon.380* nocapture readonly, i32, i32) unnamed_addr #4 align 2 {
  %4 = getelementptr inbounds %class.anon.380, %class.anon.380* %0, i64 0, i32 0
  %5 = load %class.anon.379*, %class.anon.379** %4, align 8
  %6 = zext i32 %1 to i64
  %7 = getelementptr inbounds %class.anon.379, %class.anon.379* %5, i64 0, i32 0
  %8 = load %"struct.jxl::PassesEncoderState"**, %"struct.jxl::PassesEncoderState"*** %7, align 8
  %9 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %8, align 8
  %10 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %9, i64 0, i32 0, i32 2, i32 10
  %11 = load i64, i64* %10, align 8, !noalias !107
  %12 = urem i64 %6, %11
  %13 = udiv i64 %6, %11
  %14 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %9, i64 0, i32 0, i32 2, i32 16
  %15 = load i64, i64* %14, align 8, !noalias !107
  %16 = mul i64 %15, %12
  %17 = mul i64 %15, %13
  %18 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %9, i64 0, i32 0, i32 2, i32 0
  %19 = load i64, i64* %18, align 8, !noalias !107
  %20 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %9, i64 0, i32 0, i32 2, i32 1
  %21 = load i64, i64* %20, align 8, !noalias !107
  %22 = add i64 %16, %15
  %23 = icmp ugt i64 %22, %19
  %24 = tail call i64 @llvm.usub.sat.i64(i64 %19, i64 %16) #8
  %25 = select i1 %23, i64 %24, i64 %15
  %26 = add i64 %17, %15
  %27 = icmp ugt i64 %26, %21
  %28 = tail call i64 @llvm.usub.sat.i64(i64 %21, i64 %17) #8
  %29 = select i1 %27, i64 %28, i64 %15
  %30 = lshr i64 %25, 1
  %31 = lshr i64 %29, 1
  %32 = add i64 %31, %17
  %33 = getelementptr inbounds %class.anon.379, %class.anon.379* %5, i64 0, i32 1
  %34 = load i64*, i64** %33, align 8
  %35 = load i64, i64* %34, align 8
  %36 = sub i64 %16, %35
  %37 = add i64 %36, %30
  %38 = getelementptr inbounds %class.anon.379, %class.anon.379* %5, i64 0, i32 2
  %39 = load i64*, i64** %38, align 8
  %40 = load i64, i64* %39, align 8
  %41 = sub i64 %32, %40
  %42 = sub nsw i64 0, %37
  %43 = icmp slt i64 %37, 0
  %44 = select i1 %43, i64 %42, i64 %37
  %45 = sub nsw i64 0, %41
  %46 = icmp slt i64 %41, 0
  %47 = select i1 %46, i64 %45, i64 %41
  %48 = icmp slt i64 %44, %47
  %49 = sitofp i64 %41 to double
  %50 = sitofp i64 %37 to double
  %51 = tail call double @atan2(double %49, double %50) #8
  %52 = select i1 %48, i64 %47, i64 %44
  %53 = load %class.anon.379*, %class.anon.379** %4, align 8
  %54 = zext i32 %2 to i64
  %55 = getelementptr inbounds %class.anon.379, %class.anon.379* %53, i64 0, i32 0
  %56 = load %"struct.jxl::PassesEncoderState"**, %"struct.jxl::PassesEncoderState"*** %55, align 8
  %57 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %56, align 8
  %58 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %57, i64 0, i32 0, i32 2, i32 10
  %59 = load i64, i64* %58, align 8, !noalias !110
  %60 = urem i64 %54, %59
  %61 = udiv i64 %54, %59
  %62 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %57, i64 0, i32 0, i32 2, i32 16
  %63 = load i64, i64* %62, align 8, !noalias !110
  %64 = mul i64 %63, %60
  %65 = mul i64 %63, %61
  %66 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %57, i64 0, i32 0, i32 2, i32 0
  %67 = load i64, i64* %66, align 8, !noalias !110
  %68 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %57, i64 0, i32 0, i32 2, i32 1
  %69 = load i64, i64* %68, align 8, !noalias !110
  %70 = add i64 %64, %63
  %71 = icmp ugt i64 %70, %67
  %72 = tail call i64 @llvm.usub.sat.i64(i64 %67, i64 %64) #8
  %73 = select i1 %71, i64 %72, i64 %63
  %74 = add i64 %65, %63
  %75 = icmp ugt i64 %74, %69
  %76 = tail call i64 @llvm.usub.sat.i64(i64 %69, i64 %65) #8
  %77 = select i1 %75, i64 %76, i64 %63
  %78 = lshr i64 %73, 1
  %79 = lshr i64 %77, 1
  %80 = add i64 %79, %65
  %81 = getelementptr inbounds %class.anon.379, %class.anon.379* %53, i64 0, i32 1
  %82 = load i64*, i64** %81, align 8
  %83 = load i64, i64* %82, align 8
  %84 = sub i64 %64, %83
  %85 = add i64 %84, %78
  %86 = getelementptr inbounds %class.anon.379, %class.anon.379* %53, i64 0, i32 2
  %87 = load i64*, i64** %86, align 8
  %88 = load i64, i64* %87, align 8
  %89 = sub i64 %80, %88
  %90 = sub nsw i64 0, %85
  %91 = icmp slt i64 %85, 0
  %92 = select i1 %91, i64 %90, i64 %85
  %93 = sub nsw i64 0, %89
  %94 = icmp slt i64 %89, 0
  %95 = select i1 %94, i64 %93, i64 %89
  %96 = icmp slt i64 %92, %95
  %97 = sitofp i64 %89 to double
  %98 = sitofp i64 %85 to double
  %99 = tail call double @atan2(double %97, double %98) #8
  %100 = select i1 %96, i64 %95, i64 %92
  %101 = icmp slt i64 %52, %100
  br i1 %101, label %106, label %102

102:                                              ; preds = %3
  %103 = icmp sge i64 %100, %52
  %104 = fcmp olt double %51, %99
  %105 = and i1 %104, %103
  ret i1 %105

106:                                              ; preds = %3
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @"_ZNSt3__17__sort3IRZN3jxl11EncodeFrameERKNS1_14CompressParamsERKNS1_9FrameInfoEPKNS1_13CodecMetadataERKNS1_11ImageBundleEPNS1_18PassesEncoderStateEPNS1_10ThreadPoolEPNS1_9BitWriterEPNS1_6AuxOutEE3$_4PjEEjT0_SP_SP_T_"(i32* nocapture, i32* nocapture, i32* nocapture, %class.anon.380* nocapture readonly dereferenceable(8)) unnamed_addr #0 {
  %5 = load i32, i32* %1, align 4
  %6 = load i32, i32* %0, align 4
  %7 = tail call fastcc zeroext i1 @"_ZZN3jxl11EncodeFrameERKNS_14CompressParamsERKNS_9FrameInfoEPKNS_13CodecMetadataERKNS_11ImageBundleEPNS_18PassesEncoderStateEPNS_10ThreadPoolEPNS_9BitWriterEPNS_6AuxOutEENK3$_4clEjj"(%class.anon.380* %3, i32 %5, i32 %6)
  %8 = load i32, i32* %2, align 4
  %9 = load i32, i32* %1, align 4
  %10 = tail call fastcc zeroext i1 @"_ZZN3jxl11EncodeFrameERKNS_14CompressParamsERKNS_9FrameInfoEPKNS_13CodecMetadataERKNS_11ImageBundleEPNS_18PassesEncoderStateEPNS_10ThreadPoolEPNS_9BitWriterEPNS_6AuxOutEENK3$_4clEjj"(%class.anon.380* %3, i32 %8, i32 %9)
  br i1 %7, label %21, label %11

11:                                               ; preds = %4
  br i1 %10, label %12, label %32

12:                                               ; preds = %11
  %13 = load i32, i32* %1, align 4
  %14 = load i32, i32* %2, align 4
  store i32 %14, i32* %1, align 4
  store i32 %13, i32* %2, align 4
  %15 = load i32, i32* %1, align 4
  %16 = load i32, i32* %0, align 4
  %17 = tail call fastcc zeroext i1 @"_ZZN3jxl11EncodeFrameERKNS_14CompressParamsERKNS_9FrameInfoEPKNS_13CodecMetadataERKNS_11ImageBundleEPNS_18PassesEncoderStateEPNS_10ThreadPoolEPNS_9BitWriterEPNS_6AuxOutEENK3$_4clEjj"(%class.anon.380* %3, i32 %15, i32 %16)
  br i1 %17, label %18, label %32

18:                                               ; preds = %12
  %19 = load i32, i32* %0, align 4
  %20 = load i32, i32* %1, align 4
  store i32 %20, i32* %0, align 4
  store i32 %19, i32* %1, align 4
  br label %32

21:                                               ; preds = %4
  %22 = load i32, i32* %0, align 4
  br i1 %10, label %23, label %25

23:                                               ; preds = %21
  %24 = load i32, i32* %2, align 4
  store i32 %24, i32* %0, align 4
  store i32 %22, i32* %2, align 4
  br label %32

25:                                               ; preds = %21
  %26 = load i32, i32* %1, align 4
  store i32 %26, i32* %0, align 4
  store i32 %22, i32* %1, align 4
  %27 = load i32, i32* %2, align 4
  %28 = tail call fastcc zeroext i1 @"_ZZN3jxl11EncodeFrameERKNS_14CompressParamsERKNS_9FrameInfoEPKNS_13CodecMetadataERKNS_11ImageBundleEPNS_18PassesEncoderStateEPNS_10ThreadPoolEPNS_9BitWriterEPNS_6AuxOutEENK3$_4clEjj"(%class.anon.380* %3, i32 %27, i32 %22)
  br i1 %28, label %29, label %32

29:                                               ; preds = %25
  %30 = load i32, i32* %1, align 4
  %31 = load i32, i32* %2, align 4
  store i32 %31, i32* %1, align 4
  store i32 %30, i32* %2, align 4
  br label %32

32:                                               ; preds = %25, %29, %12, %18, %11, %23
  %33 = phi i32 [ 1, %23 ], [ 0, %11 ], [ 2, %18 ], [ 1, %12 ], [ 2, %29 ], [ 1, %25 ]
  ret i32 %33
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @"_ZNSt3__17__sort4IRZN3jxl11EncodeFrameERKNS1_14CompressParamsERKNS1_9FrameInfoEPKNS1_13CodecMetadataERKNS1_11ImageBundleEPNS1_18PassesEncoderStateEPNS1_10ThreadPoolEPNS1_9BitWriterEPNS1_6AuxOutEE3$_4PjEEjT0_SP_SP_SP_T_"(i32* nocapture, i32* nocapture, i32* nocapture, i32* nocapture, %class.anon.380* nocapture readonly dereferenceable(8)) unnamed_addr #0 {
  %6 = tail call fastcc i32 @"_ZNSt3__17__sort3IRZN3jxl11EncodeFrameERKNS1_14CompressParamsERKNS1_9FrameInfoEPKNS1_13CodecMetadataERKNS1_11ImageBundleEPNS1_18PassesEncoderStateEPNS1_10ThreadPoolEPNS1_9BitWriterEPNS1_6AuxOutEE3$_4PjEEjT0_SP_SP_T_"(i32* %0, i32* %1, i32* %2, %class.anon.380* dereferenceable(8) %4)
  %7 = load i32, i32* %3, align 4
  %8 = load i32, i32* %2, align 4
  %9 = tail call fastcc zeroext i1 @"_ZZN3jxl11EncodeFrameERKNS_14CompressParamsERKNS_9FrameInfoEPKNS_13CodecMetadataERKNS_11ImageBundleEPNS_18PassesEncoderStateEPNS_10ThreadPoolEPNS_9BitWriterEPNS_6AuxOutEENK3$_4clEjj"(%class.anon.380* %4, i32 %7, i32 %8)
  br i1 %9, label %10, label %28

10:                                               ; preds = %5
  %11 = load i32, i32* %2, align 4
  %12 = load i32, i32* %3, align 4
  store i32 %12, i32* %2, align 4
  store i32 %11, i32* %3, align 4
  %13 = add i32 %6, 1
  %14 = load i32, i32* %2, align 4
  %15 = load i32, i32* %1, align 4
  %16 = tail call fastcc zeroext i1 @"_ZZN3jxl11EncodeFrameERKNS_14CompressParamsERKNS_9FrameInfoEPKNS_13CodecMetadataERKNS_11ImageBundleEPNS_18PassesEncoderStateEPNS_10ThreadPoolEPNS_9BitWriterEPNS_6AuxOutEENK3$_4clEjj"(%class.anon.380* %4, i32 %14, i32 %15)
  br i1 %16, label %17, label %28

17:                                               ; preds = %10
  %18 = load i32, i32* %1, align 4
  %19 = load i32, i32* %2, align 4
  store i32 %19, i32* %1, align 4
  store i32 %18, i32* %2, align 4
  %20 = add i32 %6, 2
  %21 = load i32, i32* %1, align 4
  %22 = load i32, i32* %0, align 4
  %23 = tail call fastcc zeroext i1 @"_ZZN3jxl11EncodeFrameERKNS_14CompressParamsERKNS_9FrameInfoEPKNS_13CodecMetadataERKNS_11ImageBundleEPNS_18PassesEncoderStateEPNS_10ThreadPoolEPNS_9BitWriterEPNS_6AuxOutEENK3$_4clEjj"(%class.anon.380* %4, i32 %21, i32 %22)
  br i1 %23, label %24, label %28

24:                                               ; preds = %17
  %25 = load i32, i32* %0, align 4
  %26 = load i32, i32* %1, align 4
  store i32 %26, i32* %0, align 4
  store i32 %25, i32* %1, align 4
  %27 = add i32 %6, 3
  br label %28

28:                                               ; preds = %10, %24, %17, %5
  %29 = phi i32 [ %27, %24 ], [ %20, %17 ], [ %13, %10 ], [ %6, %5 ]
  ret i32 %29
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @"_ZNSt3__17__sort5IRZN3jxl11EncodeFrameERKNS1_14CompressParamsERKNS1_9FrameInfoEPKNS1_13CodecMetadataERKNS1_11ImageBundleEPNS1_18PassesEncoderStateEPNS1_10ThreadPoolEPNS1_9BitWriterEPNS1_6AuxOutEE3$_4PjEEjT0_SP_SP_SP_SP_T_"(i32* nocapture, i32* nocapture, i32* nocapture, i32* nocapture, i32* nocapture, %class.anon.380* nocapture readonly dereferenceable(8)) unnamed_addr #0 {
  %7 = tail call fastcc i32 @"_ZNSt3__17__sort4IRZN3jxl11EncodeFrameERKNS1_14CompressParamsERKNS1_9FrameInfoEPKNS1_13CodecMetadataERKNS1_11ImageBundleEPNS1_18PassesEncoderStateEPNS1_10ThreadPoolEPNS1_9BitWriterEPNS1_6AuxOutEE3$_4PjEEjT0_SP_SP_SP_T_"(i32* %0, i32* %1, i32* %2, i32* %3, %class.anon.380* dereferenceable(8) %5)
  %8 = load i32, i32* %4, align 4
  %9 = load i32, i32* %3, align 4
  %10 = tail call fastcc zeroext i1 @"_ZZN3jxl11EncodeFrameERKNS_14CompressParamsERKNS_9FrameInfoEPKNS_13CodecMetadataERKNS_11ImageBundleEPNS_18PassesEncoderStateEPNS_10ThreadPoolEPNS_9BitWriterEPNS_6AuxOutEENK3$_4clEjj"(%class.anon.380* %5, i32 %8, i32 %9)
  br i1 %10, label %11, label %36

11:                                               ; preds = %6
  %12 = load i32, i32* %3, align 4
  %13 = load i32, i32* %4, align 4
  store i32 %13, i32* %3, align 4
  store i32 %12, i32* %4, align 4
  %14 = add i32 %7, 1
  %15 = load i32, i32* %3, align 4
  %16 = load i32, i32* %2, align 4
  %17 = tail call fastcc zeroext i1 @"_ZZN3jxl11EncodeFrameERKNS_14CompressParamsERKNS_9FrameInfoEPKNS_13CodecMetadataERKNS_11ImageBundleEPNS_18PassesEncoderStateEPNS_10ThreadPoolEPNS_9BitWriterEPNS_6AuxOutEENK3$_4clEjj"(%class.anon.380* %5, i32 %15, i32 %16)
  br i1 %17, label %18, label %36

18:                                               ; preds = %11
  %19 = load i32, i32* %2, align 4
  %20 = load i32, i32* %3, align 4
  store i32 %20, i32* %2, align 4
  store i32 %19, i32* %3, align 4
  %21 = add i32 %7, 2
  %22 = load i32, i32* %2, align 4
  %23 = load i32, i32* %1, align 4
  %24 = tail call fastcc zeroext i1 @"_ZZN3jxl11EncodeFrameERKNS_14CompressParamsERKNS_9FrameInfoEPKNS_13CodecMetadataERKNS_11ImageBundleEPNS_18PassesEncoderStateEPNS_10ThreadPoolEPNS_9BitWriterEPNS_6AuxOutEENK3$_4clEjj"(%class.anon.380* %5, i32 %22, i32 %23)
  br i1 %24, label %25, label %36

25:                                               ; preds = %18
  %26 = load i32, i32* %1, align 4
  %27 = load i32, i32* %2, align 4
  store i32 %27, i32* %1, align 4
  store i32 %26, i32* %2, align 4
  %28 = add i32 %7, 3
  %29 = load i32, i32* %1, align 4
  %30 = load i32, i32* %0, align 4
  %31 = tail call fastcc zeroext i1 @"_ZZN3jxl11EncodeFrameERKNS_14CompressParamsERKNS_9FrameInfoEPKNS_13CodecMetadataERKNS_11ImageBundleEPNS_18PassesEncoderStateEPNS_10ThreadPoolEPNS_9BitWriterEPNS_6AuxOutEENK3$_4clEjj"(%class.anon.380* %5, i32 %29, i32 %30)
  br i1 %31, label %32, label %36

32:                                               ; preds = %25
  %33 = load i32, i32* %0, align 4
  %34 = load i32, i32* %1, align 4
  store i32 %34, i32* %0, align 4
  store i32 %33, i32* %1, align 4
  %35 = add i32 %7, 4
  br label %36

36:                                               ; preds = %11, %25, %32, %18, %6
  %37 = phi i32 [ %35, %32 ], [ %28, %25 ], [ %21, %18 ], [ %14, %11 ], [ %7, %6 ]
  ret i32 %37
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @"_ZNSt3__127__insertion_sort_incompleteIRZN3jxl11EncodeFrameERKNS1_14CompressParamsERKNS1_9FrameInfoEPKNS1_13CodecMetadataERKNS1_11ImageBundleEPNS1_18PassesEncoderStateEPNS1_10ThreadPoolEPNS1_9BitWriterEPNS1_6AuxOutEE3$_4PjEEbT0_SP_T_"(i32*, i32*, %class.anon.380* nocapture readonly dereferenceable(8)) unnamed_addr #0 {
  %4 = ptrtoint i32* %1 to i64
  %5 = ptrtoint i32* %0 to i64
  %6 = sub i64 %4, %5
  %7 = ashr exact i64 %6, 2
  switch i64 %7, label %31 [
    i64 0, label %66
    i64 1, label %66
    i64 2, label %8
    i64 3, label %16
    i64 4, label %20
    i64 5, label %25
  ]

8:                                                ; preds = %3
  %9 = getelementptr inbounds i32, i32* %1, i64 -1
  %10 = load i32, i32* %9, align 4
  %11 = load i32, i32* %0, align 4
  %12 = tail call fastcc zeroext i1 @"_ZZN3jxl11EncodeFrameERKNS_14CompressParamsERKNS_9FrameInfoEPKNS_13CodecMetadataERKNS_11ImageBundleEPNS_18PassesEncoderStateEPNS_10ThreadPoolEPNS_9BitWriterEPNS_6AuxOutEENK3$_4clEjj"(%class.anon.380* %2, i32 %10, i32 %11)
  br i1 %12, label %13, label %66

13:                                               ; preds = %8
  %14 = load i32, i32* %0, align 4
  %15 = load i32, i32* %9, align 4
  store i32 %15, i32* %0, align 4
  store i32 %14, i32* %9, align 4
  br label %66

16:                                               ; preds = %3
  %17 = getelementptr inbounds i32, i32* %0, i64 1
  %18 = getelementptr inbounds i32, i32* %1, i64 -1
  %19 = tail call fastcc i32 @"_ZNSt3__17__sort3IRZN3jxl11EncodeFrameERKNS1_14CompressParamsERKNS1_9FrameInfoEPKNS1_13CodecMetadataERKNS1_11ImageBundleEPNS1_18PassesEncoderStateEPNS1_10ThreadPoolEPNS1_9BitWriterEPNS1_6AuxOutEE3$_4PjEEjT0_SP_SP_T_"(i32* %0, i32* %17, i32* %18, %class.anon.380* dereferenceable(8) %2)
  br label %66

20:                                               ; preds = %3
  %21 = getelementptr inbounds i32, i32* %0, i64 1
  %22 = getelementptr inbounds i32, i32* %0, i64 2
  %23 = getelementptr inbounds i32, i32* %1, i64 -1
  %24 = tail call fastcc i32 @"_ZNSt3__17__sort4IRZN3jxl11EncodeFrameERKNS1_14CompressParamsERKNS1_9FrameInfoEPKNS1_13CodecMetadataERKNS1_11ImageBundleEPNS1_18PassesEncoderStateEPNS1_10ThreadPoolEPNS1_9BitWriterEPNS1_6AuxOutEE3$_4PjEEjT0_SP_SP_SP_T_"(i32* %0, i32* %21, i32* %22, i32* %23, %class.anon.380* dereferenceable(8) %2)
  br label %66

25:                                               ; preds = %3
  %26 = getelementptr inbounds i32, i32* %0, i64 1
  %27 = getelementptr inbounds i32, i32* %0, i64 2
  %28 = getelementptr inbounds i32, i32* %0, i64 3
  %29 = getelementptr inbounds i32, i32* %1, i64 -1
  %30 = tail call fastcc i32 @"_ZNSt3__17__sort5IRZN3jxl11EncodeFrameERKNS1_14CompressParamsERKNS1_9FrameInfoEPKNS1_13CodecMetadataERKNS1_11ImageBundleEPNS1_18PassesEncoderStateEPNS1_10ThreadPoolEPNS1_9BitWriterEPNS1_6AuxOutEE3$_4PjEEjT0_SP_SP_SP_SP_T_"(i32* %0, i32* %26, i32* %27, i32* %28, i32* %29, %class.anon.380* dereferenceable(8) %2)
  br label %66

31:                                               ; preds = %3
  %32 = getelementptr inbounds i32, i32* %0, i64 2
  %33 = getelementptr inbounds i32, i32* %0, i64 1
  %34 = tail call fastcc i32 @"_ZNSt3__17__sort3IRZN3jxl11EncodeFrameERKNS1_14CompressParamsERKNS1_9FrameInfoEPKNS1_13CodecMetadataERKNS1_11ImageBundleEPNS1_18PassesEncoderStateEPNS1_10ThreadPoolEPNS1_9BitWriterEPNS1_6AuxOutEE3$_4PjEEjT0_SP_SP_T_"(i32* %0, i32* %33, i32* %32, %class.anon.380* dereferenceable(8) %2)
  %35 = getelementptr inbounds i32, i32* %0, i64 3
  %36 = icmp eq i32* %35, %1
  br i1 %36, label %66, label %37

37:                                               ; preds = %31, %59
  %38 = phi i32* [ %61, %59 ], [ %35, %31 ]
  %39 = phi i32 [ %60, %59 ], [ 0, %31 ]
  %40 = phi i32* [ %38, %59 ], [ %32, %31 ]
  %41 = load i32, i32* %38, align 4
  %42 = load i32, i32* %40, align 4
  %43 = tail call fastcc zeroext i1 @"_ZZN3jxl11EncodeFrameERKNS_14CompressParamsERKNS_9FrameInfoEPKNS_13CodecMetadataERKNS_11ImageBundleEPNS_18PassesEncoderStateEPNS_10ThreadPoolEPNS_9BitWriterEPNS_6AuxOutEENK3$_4clEjj"(%class.anon.380* %2, i32 %41, i32 %42)
  br i1 %43, label %44, label %59

44:                                               ; preds = %37
  %45 = load i32, i32* %38, align 4
  br label %46

46:                                               ; preds = %51, %44
  %47 = phi i32* [ %38, %44 ], [ %48, %51 ]
  %48 = phi i32* [ %40, %44 ], [ %52, %51 ]
  %49 = load i32, i32* %48, align 4
  store i32 %49, i32* %47, align 4
  %50 = icmp eq i32* %48, %0
  br i1 %50, label %55, label %51

51:                                               ; preds = %46
  %52 = getelementptr inbounds i32, i32* %48, i64 -1
  %53 = load i32, i32* %52, align 4
  %54 = tail call fastcc zeroext i1 @"_ZZN3jxl11EncodeFrameERKNS_14CompressParamsERKNS_9FrameInfoEPKNS_13CodecMetadataERKNS_11ImageBundleEPNS_18PassesEncoderStateEPNS_10ThreadPoolEPNS_9BitWriterEPNS_6AuxOutEENK3$_4clEjj"(%class.anon.380* %2, i32 %45, i32 %53)
  br i1 %54, label %46, label %55

55:                                               ; preds = %46, %51
  %56 = phi i32* [ %0, %46 ], [ %48, %51 ]
  store i32 %45, i32* %56, align 4
  %57 = add i32 %39, 1
  %58 = icmp eq i32 %57, 8
  br i1 %58, label %63, label %59

59:                                               ; preds = %55, %37
  %60 = phi i32 [ %57, %55 ], [ %39, %37 ]
  %61 = getelementptr inbounds i32, i32* %38, i64 1
  %62 = icmp eq i32* %61, %1
  br i1 %62, label %66, label %37

63:                                               ; preds = %55
  %64 = getelementptr inbounds i32, i32* %38, i64 1
  %65 = icmp eq i32* %64, %1
  br label %66

66:                                               ; preds = %59, %63, %31, %8, %13, %3, %3, %25, %20, %16
  %67 = phi i1 [ true, %25 ], [ true, %20 ], [ true, %16 ], [ true, %3 ], [ true, %3 ], [ true, %13 ], [ true, %8 ], [ true, %31 ], [ %65, %63 ], [ true, %59 ]
  ret i1 %67
}

; Function Attrs: nofree nounwind
declare double @atan2(double, double) local_unnamed_addr #11

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctpop.i64(i64) #9

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.usub.sat.i64(i64, i64) #9

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { nounwind readnone speculatable }
attributes #10 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { inlinehint noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { builtin nounwind }
attributes #14 = { noreturn nounwind }
attributes #15 = { noreturn }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZN3jxl12_GLOBAL__N_115MakeFrameHeaderERKNS_14CompressParamsERKNS_19ProgressiveSplitterERKNS_9FrameInfoERKNS_11ImageBundleEPNS_11FrameHeaderE: argument 0"}
!5 = distinct !{!5, !"_ZN3jxl12_GLOBAL__N_115MakeFrameHeaderERKNS_14CompressParamsERKNS_19ProgressiveSplitterERKNS_9FrameInfoERKNS_11ImageBundleEPNS_11FrameHeaderE"}
!6 = !{!7, !4}
!7 = distinct !{!7, !8, !"_ZNK3jxl19ProgressiveSplitter10InitPassesEPNS_6PassesE: argument 0"}
!8 = distinct !{!8, !"_ZNK3jxl19ProgressiveSplitter10InitPassesEPNS_6PassesE"}
!9 = !{!7}
!10 = !{!11, !4}
!11 = distinct !{!11, !12, !"_ZN3jxl12_GLOBAL__N_120LoopFilterFromParamsERKNS_14CompressParamsEPNS_11FrameHeaderE: argument 0"}
!12 = distinct !{!12, !"_ZN3jxl12_GLOBAL__N_120LoopFilterFromParamsERKNS_14CompressParamsEPNS_11FrameHeaderE"}
!13 = !{!11}
!14 = !{!15}
!15 = distinct !{!15, !16, !"_ZN3jxl11CopyImageToINS_6Image3IfEEEEvRKT_PS3_: argument 0"}
!16 = distinct !{!16, !"_ZN3jxl11CopyImageToINS_6Image3IfEEEEvRKT_PS3_"}
!17 = !{!18}
!18 = distinct !{!18, !19, !"_ZN3jxl15ModularStreamId6GlobalEv: argument 0"}
!19 = distinct !{!19, !"_ZN3jxl15ModularStreamId6GlobalEv"}
!20 = distinct !{!20, !21}
!21 = !{!"llvm.loop.isvectorized", i32 1}
!22 = distinct !{!22, !23}
!23 = !{!"llvm.loop.unroll.disable"}
!24 = distinct !{!24, !25, !21}
!25 = !{!"llvm.loop.unroll.runtime.disable"}
!26 = distinct !{!26, !21}
!27 = distinct !{!27, !23}
!28 = distinct !{!28, !25, !21}
!29 = !{!30}
!30 = distinct !{!30, !31, !"_ZN3jxl21QuantEncodingInternal7LibraryEh: argument 0"}
!31 = distinct !{!31, !"_ZN3jxl21QuantEncodingInternal7LibraryEh"}
!32 = !{!33}
!33 = distinct !{!33, !34, !"_ZN3jxl13QuantEncoding7LibraryEh: argument 0"}
!34 = distinct !{!34, !"_ZN3jxl13QuantEncoding7LibraryEh"}
!35 = !{!36}
!36 = distinct !{!36, !37, !"_ZN3jxl13QuantEncoding3RAWERKNSt3__16vectorIiNS1_9allocatorIiEEEEi: argument 0"}
!37 = distinct !{!37, !"_ZN3jxl13QuantEncoding3RAWERKNSt3__16vectorIiNS1_9allocatorIiEEEEi"}
!38 = !{i64 0, i64 65}
!39 = !{!40}
!40 = distinct !{!40, !41, !"_ZN3jxl11CopyImageToIfEEvRKNS_5PlaneIT_EEPS3_: argument 0"}
!41 = distinct !{!41, !"_ZN3jxl11CopyImageToIfEEvRKNS_5PlaneIT_EEPS3_"}
!42 = distinct !{!42, !21}
!43 = distinct !{!43, !23}
!44 = distinct !{!44, !25, !21}
!45 = distinct !{!45, !21}
!46 = distinct !{!46, !23}
!47 = distinct !{!47, !25, !21}
!48 = distinct !{!48, !23}
!49 = distinct !{!49, !23}
!50 = !{!51}
!51 = distinct !{!51, !52}
!52 = distinct !{!52, !"LVerDomain"}
!53 = !{!54}
!54 = distinct !{!54, !52}
!55 = distinct !{!55, !21}
!56 = distinct !{!56, !21}
!57 = !{!58}
!58 = distinct !{!58, !59}
!59 = distinct !{!59, !"LVerDomain"}
!60 = !{!61}
!61 = distinct !{!61, !59}
!62 = distinct !{!62, !21}
!63 = distinct !{!63, !23}
!64 = distinct !{!64, !21}
!65 = distinct !{!65, !23}
!66 = !{!67}
!67 = distinct !{!67, !68}
!68 = distinct !{!68, !"LVerDomain"}
!69 = !{!70}
!70 = distinct !{!70, !68}
!71 = distinct !{!71, !21}
!72 = distinct !{!72, !21}
!73 = !{!74}
!74 = distinct !{!74, !75}
!75 = distinct !{!75, !"LVerDomain"}
!76 = !{!77}
!77 = distinct !{!77, !75}
!78 = distinct !{!78, !21}
!79 = distinct !{!79, !21}
!80 = !{!81}
!81 = distinct !{!81, !82, !"_ZNK3jxl17PassesSharedState14BlockGroupRectEm: argument 0"}
!82 = distinct !{!82, !"_ZNK3jxl17PassesSharedState14BlockGroupRectEm"}
!83 = !{!84}
!84 = distinct !{!84, !85, !"_ZNK3jxl17PassesSharedState14BlockGroupRectEm: argument 0"}
!85 = distinct !{!85, !"_ZNK3jxl17PassesSharedState14BlockGroupRectEm"}
!86 = distinct !{!86, !21}
!87 = distinct !{!87, !23}
!88 = distinct !{!88, !25, !21}
!89 = !{!90}
!90 = distinct !{!90, !91, !"_ZN3jxl11CopyImageToIfEEvRKNS_4RectERKNS_5PlaneIT_EES3_PS6_: argument 0"}
!91 = distinct !{!91, !"_ZN3jxl11CopyImageToIfEEvRKNS_4RectERKNS_5PlaneIT_EES3_PS6_"}
!92 = !{!93}
!93 = distinct !{!93, !94, !"_ZN3jxl15ModularStreamId8VarDCTDCEm: argument 0"}
!94 = distinct !{!94, !"_ZN3jxl15ModularStreamId8VarDCTDCEm"}
!95 = !{!96}
!96 = distinct !{!96, !97, !"_ZN3jxl15ModularStreamId9ModularDCEm: argument 0"}
!97 = distinct !{!97, !"_ZN3jxl15ModularStreamId9ModularDCEm"}
!98 = !{!99}
!99 = distinct !{!99, !100, !"_ZNK3jxl17PassesSharedState11DCGroupRectEm: argument 0"}
!100 = distinct !{!100, !"_ZNK3jxl17PassesSharedState11DCGroupRectEm"}
!101 = !{!102}
!102 = distinct !{!102, !103, !"_ZN3jxl15ModularStreamId10ACMetadataEm: argument 0"}
!103 = distinct !{!103, !"_ZN3jxl15ModularStreamId10ACMetadataEm"}
!104 = !{!105}
!105 = distinct !{!105, !106, !"_ZN3jxl15ModularStreamId9ModularACEmm: argument 0"}
!106 = distinct !{!106, !"_ZN3jxl15ModularStreamId9ModularACEmm"}
!107 = !{!108}
!108 = distinct !{!108, !109, !"_ZNK3jxl17PassesSharedState9GroupRectEm: argument 0"}
!109 = distinct !{!109, !"_ZNK3jxl17PassesSharedState9GroupRectEm"}
!110 = !{!111}
!111 = distinct !{!111, !112, !"_ZNK3jxl17PassesSharedState9GroupRectEm: argument 0"}
!112 = distinct !{!112, !"_ZNK3jxl17PassesSharedState9GroupRectEm"}
