; ModuleID = '../../v8/src/heap/spaces.cc'
source_filename = "../../v8/src/heap/spaces.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.std::__1::piecewise_construct_t" = type { i8 }
%"class.v8::internal::LocalAllocationBuffer" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::LinearAllocationArea" }
%"class.v8::internal::LinearAllocationArea" = type { i64, i64, i64 }
%"class.v8::internal::Heap" = type { %"class.std::__1::unordered_map", %"struct.std::__1::atomic", %"class.v8::internal::Heap::ExternalMemoryAccounting", %"class.v8::internal::Isolate"*, i64, i64, i64, i64, %"struct.std::__1::atomic", i64, i64, i64, i64, i64, i8, i64, i64, %"struct.std::__1::atomic", i64, i64, %"struct.std::__1::atomic", %"struct.std::__1::atomic.20", %"class.std::__1::vector", i32, %"class.v8::internal::NewSpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::CodeSpace"*, %"class.v8::internal::MapSpace"*, %"class.v8::internal::OldLargeObjectSpace"*, %"class.v8::internal::CodeLargeObjectSpace"*, %"class.v8::internal::NewLargeObjectSpace"*, %"class.v8::internal::ReadOnlySpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::MapSpace"*, %"class.std::__1::unique_ptr.106", %"class.std::__1::unique_ptr.106", [8 x %"class.v8::internal::Space"*], %"class.v8::internal::LocalHeap"*, %"class.v8::internal::ArrayBufferExtension"*, %"class.v8::internal::ArrayBufferExtension"*, i8, i64, %"struct.std::__1::atomic.121", i32, i32, i32, i32, %"class.v8::internal::AllocationObserver"*, %"class.v8::internal::StressScavengeObserver"*, double, i32, i32, i32, i64, i32, [128 x i64], %"struct.std::__1::atomic", i64, i8, %"struct.std::__1::atomic", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.std::__1::vector.125", %"class.std::__1::vector.125", i64 ()*, [113 x i32], i64, double, double, i64, i64, double, i32, i32, i32, i32, double, double, double, %"class.std::__1::unique_ptr.132", %"class.std::__1::unique_ptr.140", %"class.v8::internal::MinorMarkCompactCollector"*, %"class.std::__1::unique_ptr.271", %"class.std::__1::unique_ptr.277", %"class.std::__1::unique_ptr.283", %"class.std::__1::unique_ptr.322", %"class.std::__1::unique_ptr.361", %"class.std::__1::unique_ptr.391", %"class.std::__1::unique_ptr.397", %"class.std::__1::unique_ptr.407", %"class.std::__1::unique_ptr.413", %"class.std::__1::unique_ptr.413", %"class.std::__1::unique_ptr.419", %"class.std::__1::unique_ptr.425", %"class.std::__1::unique_ptr.425", %"class.std::__1::unique_ptr.431", %"class.std::__1::unique_ptr.437", %"class.std::__1::shared_ptr.443", %"class.v8::CppHeap"*, %"class.v8::EmbedderRootsHandler"*, %"class.v8::internal::StrongRootsEntry"*, %"class.v8::base::Mutex", i8, i64, i64, i64, i64, %"class.std::__1::unordered_map.465", %"class.std::__1::unique_ptr.491", [512 x i8], i8, i8, i64, i8, i32, i32, %"class.std::__1::unique_ptr.497", i8, %"class.v8::internal::Heap::ExternalStringTable", %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.512", i32, i8, i8, i8, i8, i8, %"class.v8::internal::HeapObject", %"class.v8::base::SharedMutex", %"class.v8::base::Mutex", %"class.std::__1::unordered_set.293", i8, [7 x i8], %"class.std::__1::unordered_map.518", %"class.std::__1::unordered_map.544", %"class.std::__1::unordered_map.518", %"class.std::__1::unordered_map.568", %"class.std::__1::vector.596", i8, %"class.std::__1::unique_ptr.603", i32, i32 }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr", %"class.std::__1::__compressed_pair.4", %"class.std::__1::__compressed_pair.9", %"class.std::__1::__compressed_pair.11", [4 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem", %"struct.std::__1::__compressed_pair_elem.0" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.0" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i64 }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { float }
%"class.v8::internal::Heap::ExternalMemoryAccounting" = type { %"struct.std::__1::atomic.15", %"struct.std::__1::atomic.15", %"struct.std::__1::atomic.15" }
%"struct.std::__1::atomic.15" = type { %"struct.std::__1::__atomic_base.16" }
%"struct.std::__1::__atomic_base.16" = type { %"struct.std::__1::__atomic_base.17" }
%"struct.std::__1::__atomic_base.17" = type { %"struct.std::__1::__cxx_atomic_impl.18" }
%"struct.std::__1::__cxx_atomic_impl.18" = type { %"struct.std::__1::__cxx_atomic_base_impl.19" }
%"struct.std::__1::__cxx_atomic_base_impl.19" = type { i64 }
%"class.v8::internal::Isolate" = type { %"class.v8::internal::IsolateData", %"class.std::__1::unique_ptr.687", %"class.v8::internal::Heap", %"class.v8::internal::ReadOnlyHeap"*, %"class.std::__1::shared_ptr.693", %"class.std::__1::unique_ptr.714", i32, %"class.v8::internal::Isolate::EntryStackItem"*, i32, %"class.v8::internal::StringStream"*, [13 x i64], %"class.v8::internal::Bootstrapper"*, %"class.v8::internal::RuntimeProfiler"*, %"class.v8::internal::CompilationCache"*, %"class.std::__1::shared_ptr.724", %"class.v8::base::RecursiveMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::internal::Logger"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::Deoptimizer"*, i8, %"class.v8::internal::MaterializedObjectStore"*, i8, i32, i32, %"class.v8::internal::DescriptorLookupCache"*, %"struct.v8::internal::HandleScopeData", %"class.v8::internal::HandleScopeImplementer"*, %"class.v8::internal::UnicodeCache"*, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::InnerPointerToCodeCache"*, %"class.v8::internal::GlobalHandles"*, %"class.v8::internal::EternalHandles"*, %"class.v8::internal::ThreadManager"*, %"class.v8::bigint::Processor"*, %"class.v8::internal::RuntimeState", %"class.v8::internal::Builtins", %"class.v8::internal::SetupIsolateDelegate"*, %"class.v8::internal::RegExpStack"*, %"class.std::__1::vector.845", %"class.v8::internal::DateCache"*, %"class.v8::base::RandomNumberGenerator"*, %"class.v8::base::RandomNumberGenerator"*, %"struct.std::__1::atomic.858", void (i32, %"class.v8::SharedArrayBuffer"*, i64, i64, double, %"class.v8::Isolate::AtomicsWaitWakeHandle"*, i8*)*, i8*, void (i32, %"class.v8::Promise"*, %"class.v8::Value"*)*, {}*, {}*, %"struct.std::__1::atomic.868", void (%"class.v8::Context"*, %"class.v8::Module"*, %"class.v8::Object"*)*, %"class.v8::base::Mutex", double, %"class.std::__1::basic_string", %"class.std::__1::unordered_map.880", %"struct.std::__1::atomic.112", i8, i8, i8, i8, i8, i8, double, %"class.v8::internal::Debug"*, %"class.v8::internal::HeapProfiler"*, %"class.std::__1::unique_ptr.955", %"class.v8::internal::AstStringConstants"*, %"class.v8::internal::interpreter::Interpreter"*, %"class.v8::internal::compiler::PerIsolateCompilerCache"*, %"class.v8::internal::Zone"*, %"class.v8::internal::CompilerDispatcher"*, %"class.std::__1::queue", void (i8*, i8*)*, void (i8*, i1)*, void (i8*, i32)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*, i1)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::Context"*)*, void (%"class.v8::FunctionCallbackInfo"*)*, %"class.v8::String"* (%"class.v8::Isolate"*, i8*)*, i1 (%"class.v8::Context"*)*, i1 (%"class.v8::Context"*)*, %"class.v8::internal::Relocatable"*, %"class.std::__1::vector.998"*, %"class.v8::internal::Object", i64*, %"class.v8::internal::AddressToIndexHashMap"*, %"class.v8::internal::HeapObjectToIndexHashMap"*, %"class.v8::internal::MicrotaskQueue"*, %"class.v8::internal::CompilationStatistics"*, %"class.v8::internal::CodeTracer"*, i32, void (%"class.v8::PromiseRejectMessage"*)*, %"class.v8::StartupData"*, i32, i32, i32, i64, i8, i8, i32, i8, i32, %"class.v8_inspector::V8Inspector"*, i8, i8, i8, i32, i32, %"class.v8::internal::compiler::NodeObserver"*, i8, [128 x i32], [256 x i32], [251 x i32], [251 x i32], %"class.v8::internal::OptimizingCompileDispatcher"*, %"class.std::__1::unique_ptr.1010", i32, i8, i8, i32, i32, %"class.std::__1::vector.1016", %"class.std::__1::vector.1016", void (%"class.v8::Isolate"*, i32)*, %"class.std::__1::shared_ptr.1023", i64, %"class.std::__1::unordered_map.1024", i64, %"struct.v8::metrics::LongTaskStats", %"class.std::__1::vector.505", %"class.v8::internal::BuiltinsConstantsTableBuilder"*, i8*, i32, i8*, i32, %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::shared_ptr.120", %"class.v8::internal::FutexWaitListNode", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::debug::ConsoleDelegate"*, %"class.v8::debug::AsyncEventDelegate"*, i32, i32, %"class.std::__1::unique_ptr.1076", i1 (%"class.v8::Isolate"*)*, i8, %"class.v8::base::Mutex", %"struct.v8::internal::ManagedPtrDestructor"*, i64, i64, %"class.v8::internal::wasm::WasmEngine"*, %"class.std::__1::unique_ptr.1090", %"class.v8::internal::EmbeddedFileWriterInterface"*, %"class.v8::Context::BackupIncumbentScope"*, %"class.v8::Value"* (%"class.v8::Context"*, %"class.v8::Value"*, %"class.v8::Array"*)*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate::ThreadDataTable", i8, %"class.v8::internal::Isolate"*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"struct.std::__1::atomic.1124", %"class.std::__1::vector.1128", %"class.std::__1::vector.1128", void (i32, %"class.std::__1::basic_string"*)* }
%"class.v8::internal::IsolateData" = type { [4 x i8*], i64, i64, i64, i64, i64, %"class.v8::internal::StackGuard", %"class.v8::internal::RootsTable", %"class.v8::internal::ExternalReferenceTable", %"class.v8::internal::ThreadLocalTop", [1711 x i64], [1711 x i64], i8, [15 x i8] }
%"class.v8::internal::StackGuard" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::StackGuard::ThreadLocal" }
%"class.v8::internal::StackGuard::ThreadLocal" = type { i64, i64, i64, i64, %"class.v8::internal::InterruptsScope"*, i64 }
%"class.v8::internal::InterruptsScope" = type { i32 (...)**, %"class.v8::internal::StackGuard"*, i64, i64, i32, %"class.v8::internal::InterruptsScope"* }
%"class.v8::internal::RootsTable" = type { [669 x i64] }
%"class.v8::internal::ExternalReferenceTable" = type { [1042 x i64], i32, i32 }
%"class.v8::internal::ThreadLocalTop" = type { %"class.v8::TryCatch"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Context", %"struct.std::__1::atomic.682", %"class.v8::internal::Object", %"class.v8::internal::Context", i64, i64, i64, i64, i64, %"class.v8::internal::Object", i8, i8, %"class.v8::internal::Object", i64, i64, i64, %"class.v8::internal::PromiseOnStack"*, %"class.v8::internal::Simulator"*, i64, %"class.v8::internal::ExternalCallbackScope"*, i32, void (%"class.v8::Object"*, i32, %"class.v8::Value"*)*, i64 }
%"class.v8::TryCatch" = type <{ %"class.v8::internal::Isolate"*, %"class.v8::TryCatch"*, i8*, i8*, i8*, i8, [7 x i8] }>
%"struct.std::__1::atomic.682" = type { %"struct.std::__1::__atomic_base.683" }
%"struct.std::__1::__atomic_base.683" = type { %"struct.std::__1::__cxx_atomic_impl.684" }
%"struct.std::__1::__cxx_atomic_impl.684" = type { %"struct.std::__1::__cxx_atomic_base_impl.685" }
%"struct.std::__1::__cxx_atomic_base_impl.685" = type { %"class.v8::internal::ThreadId" }
%"class.v8::internal::ThreadId" = type { i32 }
%"class.v8::internal::Context" = type { %"class.v8::internal::TorqueGeneratedContext" }
%"class.v8::internal::TorqueGeneratedContext" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::PromiseOnStack" = type { %"class.v8::internal::Handle", %"class.v8::internal::PromiseOnStack"* }
%"class.v8::internal::Handle" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HandleBase" = type { i64* }
%"class.v8::internal::Simulator" = type opaque
%"class.v8::internal::ExternalCallbackScope" = type opaque
%"class.v8::Object" = type { i8 }
%"class.v8::Value" = type { i8 }
%"class.std::__1::unique_ptr.687" = type { %"class.std::__1::__compressed_pair.688" }
%"class.std::__1::__compressed_pair.688" = type { %"struct.std::__1::__compressed_pair_elem.689" }
%"struct.std::__1::__compressed_pair_elem.689" = type { %"class.v8::internal::IsolateAllocator"* }
%"class.v8::internal::IsolateAllocator" = type { i8*, %"class.v8::PageAllocator"* }
%"class.v8::PageAllocator" = type { i32 (...)** }
%"class.v8::internal::ReadOnlyHeap" = type { i32 (...)**, i8, %"class.v8::internal::ReadOnlySpace"*, %"class.std::__1::vector.505" }
%"class.std::__1::shared_ptr.693" = type { %"class.v8::internal::ReadOnlyArtifacts"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::ReadOnlyArtifacts" = type { i32 (...)**, %"class.std::__1::vector.99", %"class.v8::internal::AllocationStats", %"class.std::__1::unique_ptr.694", %"class.std::__1::unique_ptr.708" }
%"class.std::__1::vector.99" = type { %"class.std::__1::__vector_base.100" }
%"class.std::__1::__vector_base.100" = type { %"class.v8::internal::ReadOnlyPage"**, %"class.v8::internal::ReadOnlyPage"**, %"class.std::__1::__compressed_pair.101" }
%"class.v8::internal::ReadOnlyPage" = type { %"class.v8::internal::BasicMemoryChunk" }
%"class.v8::internal::BasicMemoryChunk" = type { i64, i64, %"class.v8::internal::Heap"*, i64, i64, i64, i64, %"struct.std::__1::atomic.15", %"struct.std::__1::atomic.609", %"class.v8::internal::VirtualMemory" }
%"struct.std::__1::atomic.609" = type { %"struct.std::__1::__atomic_base.610" }
%"struct.std::__1::__atomic_base.610" = type { %"struct.std::__1::__cxx_atomic_impl.611" }
%"struct.std::__1::__cxx_atomic_impl.611" = type { %"struct.std::__1::__cxx_atomic_base_impl.612" }
%"struct.std::__1::__cxx_atomic_base_impl.612" = type { %"class.v8::internal::BaseSpace"* }
%"class.v8::internal::BaseSpace" = type { i32 (...)**, %"class.v8::internal::Heap"*, i32, %"struct.std::__1::atomic", i64 }
%"class.v8::internal::VirtualMemory" = type { %"class.v8::PageAllocator"*, %"class.v8::base::AddressRegion" }
%"class.v8::base::AddressRegion" = type { i64, i64 }
%"class.std::__1::__compressed_pair.101" = type { %"struct.std::__1::__compressed_pair_elem.102" }
%"struct.std::__1::__compressed_pair_elem.102" = type { %"class.v8::internal::ReadOnlyPage"** }
%"class.v8::internal::AllocationStats" = type { %"struct.std::__1::atomic", i64, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.694" = type { %"class.std::__1::__compressed_pair.695" }
%"class.std::__1::__compressed_pair.695" = type { %"struct.std::__1::__compressed_pair_elem.696" }
%"struct.std::__1::__compressed_pair_elem.696" = type { %"class.v8::internal::SharedReadOnlySpace"* }
%"class.v8::internal::SharedReadOnlySpace" = type { %"class.v8::internal::ReadOnlySpace", %"class.std::__1::vector.697" }
%"class.v8::internal::ReadOnlySpace" = type { %"class.v8::internal::BaseSpace", i8, %"class.v8::internal::AllocationStats", %"class.std::__1::vector.99", i64, i64, i8, i64, i64 }
%"class.std::__1::vector.697" = type { %"class.std::__1::__vector_base.698" }
%"class.std::__1::__vector_base.698" = type { %"class.std::__1::unique_ptr.699"*, %"class.std::__1::unique_ptr.699"*, %"class.std::__1::__compressed_pair.700" }
%"class.std::__1::unique_ptr.699" = type { %"class.std::__1::__compressed_pair.1136" }
%"class.std::__1::__compressed_pair.1136" = type { %"struct.std::__1::__compressed_pair_elem.1137" }
%"struct.std::__1::__compressed_pair_elem.1137" = type { %"class.v8::PageAllocator::SharedMemoryMapping"* }
%"class.v8::PageAllocator::SharedMemoryMapping" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.700" = type { %"struct.std::__1::__compressed_pair_elem.701" }
%"struct.std::__1::__compressed_pair_elem.701" = type { %"class.std::__1::unique_ptr.699"* }
%"class.std::__1::unique_ptr.708" = type { %"class.std::__1::__compressed_pair.709" }
%"class.std::__1::__compressed_pair.709" = type { %"struct.std::__1::__compressed_pair_elem.710" }
%"struct.std::__1::__compressed_pair_elem.710" = type { %"class.v8::internal::ReadOnlyHeap"* }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::unique_ptr.714" = type { %"class.std::__1::__compressed_pair.715" }
%"class.std::__1::__compressed_pair.715" = type { %"struct.std::__1::__compressed_pair_elem.716" }
%"struct.std::__1::__compressed_pair_elem.716" = type { %"class.v8::internal::StringTable"* }
%"class.v8::internal::StringTable" = type { %"struct.std::__1::atomic.717", %"class.v8::base::Mutex" }
%"struct.std::__1::atomic.717" = type { %"struct.std::__1::__atomic_base.718" }
%"struct.std::__1::__atomic_base.718" = type { %"struct.std::__1::__cxx_atomic_impl.719" }
%"struct.std::__1::__cxx_atomic_impl.719" = type { %"struct.std::__1::__cxx_atomic_base_impl.720" }
%"struct.std::__1::__cxx_atomic_base_impl.720" = type { %"class.v8::internal::StringTable::Data"* }
%"class.v8::internal::StringTable::Data" = type opaque
%"class.v8::internal::Isolate::EntryStackItem" = type { i32, %"class.v8::internal::Isolate::PerIsolateThreadData"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate::EntryStackItem"* }
%"class.v8::internal::Isolate::PerIsolateThreadData" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::ThreadId", i64, %"class.v8::internal::ThreadState"* }
%"class.v8::internal::ThreadState" = type opaque
%"class.v8::internal::StringStream" = type opaque
%"class.v8::internal::Bootstrapper" = type { %"class.v8::internal::Isolate"*, i32, %"class.v8::internal::SourceCodeCache" }
%"class.v8::internal::SourceCodeCache" = type { i32, %"class.v8::internal::FixedArray" }
%"class.v8::internal::FixedArray" = type { %"class.v8::internal::TorqueGeneratedFixedArray" }
%"class.v8::internal::TorqueGeneratedFixedArray" = type { %"class.v8::internal::FixedArrayBase" }
%"class.v8::internal::FixedArrayBase" = type { %"class.v8::internal::TorqueGeneratedFixedArrayBase" }
%"class.v8::internal::TorqueGeneratedFixedArrayBase" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::RuntimeProfiler" = type opaque
%"class.v8::internal::CompilationCache" = type opaque
%"class.std::__1::shared_ptr.724" = type { %"class.v8::internal::Counters"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::Counters" = type { %"class.std::__1::enable_shared_from_this", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::AggregatableHistogramTimer", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::RuntimeCallStats", %"class.v8::internal::WorkerThreadRuntimeCallStats", %"class.v8::internal::Isolate"*, %"class.v8::internal::StatsTable" }
%"class.std::__1::enable_shared_from_this" = type { %"class.std::__1::weak_ptr" }
%"class.std::__1::weak_ptr" = type { %"class.v8::internal::Counters"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::HistogramTimer" = type { %"class.v8::internal::TimedHistogram.base", %"class.v8::base::ElapsedTimer" }
%"class.v8::internal::TimedHistogram.base" = type <{ %"class.v8::internal::Histogram", i32 }>
%"class.v8::base::ElapsedTimer" = type { %"class.v8::base::TimeTicks" }
%"class.v8::base::TimeTicks" = type { %"class.v8::base::time_internal::TimeBase" }
%"class.v8::base::time_internal::TimeBase" = type { i64 }
%"class.v8::internal::TimedHistogram" = type <{ %"class.v8::internal::Histogram", i32, [4 x i8] }>
%"class.v8::internal::AggregatableHistogramTimer" = type { %"class.v8::internal::Histogram", %"class.v8::base::TimeDelta" }
%"class.v8::base::TimeDelta" = type { i64 }
%"class.v8::internal::Histogram" = type { i8*, i32, i32, i32, i8*, %"class.v8::internal::Counters"* }
%"class.v8::internal::StatsCounterThreadSafe" = type { %"class.v8::internal::StatsCounterBase", %"class.v8::base::Mutex" }
%"class.v8::internal::StatsCounterBase" = type { %"class.v8::internal::Counters"*, i8*, i32* }
%"class.v8::internal::StatsCounter" = type <{ %"class.v8::internal::StatsCounterBase", i8, [7 x i8] }>
%"class.v8::internal::RuntimeCallStats" = type { %"class.v8::base::AtomicValue", %"class.v8::base::AtomicValue.725", i8, i32, %"class.v8::internal::ThreadId", [1370 x %"class.v8::internal::RuntimeCallCounter"] }
%"class.v8::base::AtomicValue" = type { i64 }
%"class.v8::base::AtomicValue.725" = type { i64 }
%"class.v8::internal::RuntimeCallCounter" = type { i8*, i64, i64 }
%"class.v8::internal::WorkerThreadRuntimeCallStats" = type <{ %"class.v8::base::Mutex", %"class.std::__1::vector.726", %"class.v8::base::Optional", %"class.v8::internal::ThreadId", [4 x i8] }>
%"class.std::__1::vector.726" = type { %"class.std::__1::__vector_base.727" }
%"class.std::__1::__vector_base.727" = type { %"class.std::__1::unique_ptr.728"*, %"class.std::__1::unique_ptr.728"*, %"class.std::__1::__compressed_pair.729" }
%"class.std::__1::unique_ptr.728" = type opaque
%"class.std::__1::__compressed_pair.729" = type { %"struct.std::__1::__compressed_pair_elem.730" }
%"struct.std::__1::__compressed_pair_elem.730" = type { %"class.std::__1::unique_ptr.728"* }
%"class.v8::base::Optional" = type { %"class.v8::base::internal::OptionalBase" }
%"class.v8::base::internal::OptionalBase" = type { %"struct.v8::base::internal::OptionalStorage" }
%"struct.v8::base::internal::OptionalStorage" = type { %"struct.v8::base::internal::OptionalStorageBase" }
%"struct.v8::base::internal::OptionalStorageBase" = type { i8, %union.anon.734 }
%union.anon.734 = type { i32 }
%"class.v8::internal::StatsTable" = type { i32* (i8*)*, i8* (i8*, i32, i32, i64)*, void (i8*, i32)* }
%"class.v8::base::RecursiveMutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.v8::internal::Logger" = type { %"class.v8::internal::CodeEventListener", %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.735", %"class.std::__1::unique_ptr.741", %"struct.std::__1::atomic.112", %"class.std::__1::unique_ptr.747", %"class.std::__1::unique_ptr.753", %"class.std::__1::unique_ptr.759", %"class.std::__1::unique_ptr.765", %"class.std::__1::unique_ptr.771", %"class.std::__1::set.777", i32, i8, %"class.v8::internal::ExistingCodeLogger", %"class.v8::base::ElapsedTimer" }
%"class.v8::internal::CodeEventListener" = type { i32 (...)** }
%"class.std::__1::unique_ptr.735" = type { %"class.std::__1::__compressed_pair.736" }
%"class.std::__1::__compressed_pair.736" = type { %"struct.std::__1::__compressed_pair_elem.737" }
%"struct.std::__1::__compressed_pair_elem.737" = type { %"class.v8::internal::Ticker"* }
%"class.v8::internal::Ticker" = type opaque
%"class.std::__1::unique_ptr.741" = type { %"class.std::__1::__compressed_pair.742" }
%"class.std::__1::__compressed_pair.742" = type { %"struct.std::__1::__compressed_pair_elem.743" }
%"struct.std::__1::__compressed_pair_elem.743" = type { %"class.v8::internal::Profiler"* }
%"class.v8::internal::Profiler" = type opaque
%"class.std::__1::unique_ptr.747" = type { %"class.std::__1::__compressed_pair.748" }
%"class.std::__1::__compressed_pair.748" = type { %"struct.std::__1::__compressed_pair_elem.749" }
%"struct.std::__1::__compressed_pair_elem.749" = type { %"class.v8::internal::Log"* }
%"class.v8::internal::Log" = type opaque
%"class.std::__1::unique_ptr.753" = type { %"class.std::__1::__compressed_pair.754" }
%"class.std::__1::__compressed_pair.754" = type { %"struct.std::__1::__compressed_pair_elem.755" }
%"struct.std::__1::__compressed_pair_elem.755" = type { %"class.v8::internal::PerfBasicLogger"* }
%"class.v8::internal::PerfBasicLogger" = type opaque
%"class.std::__1::unique_ptr.759" = type { %"class.std::__1::__compressed_pair.760" }
%"class.std::__1::__compressed_pair.760" = type { %"struct.std::__1::__compressed_pair_elem.761" }
%"struct.std::__1::__compressed_pair_elem.761" = type { %"class.v8::internal::PerfJitLogger"* }
%"class.v8::internal::PerfJitLogger" = type opaque
%"class.std::__1::unique_ptr.765" = type { %"class.std::__1::__compressed_pair.766" }
%"class.std::__1::__compressed_pair.766" = type { %"struct.std::__1::__compressed_pair_elem.767" }
%"struct.std::__1::__compressed_pair_elem.767" = type { %"class.v8::internal::LowLevelLogger"* }
%"class.v8::internal::LowLevelLogger" = type opaque
%"class.std::__1::unique_ptr.771" = type { %"class.std::__1::__compressed_pair.772" }
%"class.std::__1::__compressed_pair.772" = type { %"struct.std::__1::__compressed_pair_elem.773" }
%"struct.std::__1::__compressed_pair_elem.773" = type { %"class.v8::internal::JitLogger"* }
%"class.v8::internal::JitLogger" = type opaque
%"class.std::__1::set.777" = type { %"class.std::__1::__tree.778" }
%"class.std::__1::__tree.778" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.779", %"class.std::__1::__compressed_pair.783" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.779" = type { %"struct.std::__1::__compressed_pair_elem.448" }
%"struct.std::__1::__compressed_pair_elem.448" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.783" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.v8::internal::ExistingCodeLogger" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::CodeEventListener"* }
%"class.v8::internal::StubCache" = type { [2048 x %"struct.v8::internal::StubCache::Entry"], [512 x %"struct.v8::internal::StubCache::Entry"], %"class.v8::internal::Isolate"* }
%"struct.v8::internal::StubCache::Entry" = type { %"class.v8::internal::StrongTaggedValue", %"class.v8::internal::TaggedValue", %"class.v8::internal::StrongTaggedValue" }
%"class.v8::internal::TaggedValue" = type { %"class.v8::internal::TaggedImpl.786" }
%"class.v8::internal::TaggedImpl.786" = type { i32 }
%"class.v8::internal::StrongTaggedValue" = type { %"class.v8::internal::TaggedImpl.785" }
%"class.v8::internal::TaggedImpl.785" = type { i32 }
%"class.v8::internal::Deoptimizer" = type opaque
%"class.v8::internal::MaterializedObjectStore" = type opaque
%"class.v8::internal::DescriptorLookupCache" = type { [64 x %"struct.v8::internal::DescriptorLookupCache::Key"], [64 x i32] }
%"struct.v8::internal::DescriptorLookupCache::Key" = type { %"class.v8::internal::Map", %"class.v8::internal::Name" }
%"class.v8::internal::Map" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Name" = type { %"class.v8::internal::TorqueGeneratedName" }
%"class.v8::internal::TorqueGeneratedName" = type { %"class.v8::internal::PrimitiveHeapObject" }
%"class.v8::internal::PrimitiveHeapObject" = type { %"class.v8::internal::TorqueGeneratedPrimitiveHeapObject" }
%"class.v8::internal::TorqueGeneratedPrimitiveHeapObject" = type { %"class.v8::internal::HeapObject" }
%"struct.v8::internal::HandleScopeData" = type { i64*, i64*, i32, i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::CanonicalHandleScope" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::OptimizedCompilationInfo"*, %"class.v8::internal::Zone"*, %"class.v8::internal::RootIndexMap"*, %"class.std::__1::unique_ptr.652", i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::OptimizedCompilationInfo" = type opaque
%"class.v8::internal::RootIndexMap" = type opaque
%"class.std::__1::unique_ptr.652" = type { %"class.std::__1::__compressed_pair.653" }
%"class.std::__1::__compressed_pair.653" = type { %"struct.std::__1::__compressed_pair_elem.654" }
%"struct.std::__1::__compressed_pair_elem.654" = type { %"class.v8::internal::IdentityMap"* }
%"class.v8::internal::IdentityMap" = type opaque
%"class.v8::internal::HandleScopeImplementer" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::DetachableVector", %"class.v8::internal::DetachableVector.787", %"class.v8::internal::DetachableVector.788", %"class.v8::internal::DetachableVector.787", i64*, i64*, %"struct.v8::internal::HandleScopeData" }
%"class.v8::internal::DetachableVector" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::DetachableVectorBase" = type { i8*, i64, i64 }
%"class.v8::internal::DetachableVector.788" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::DetachableVector.787" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::UnicodeCache" = type opaque
%"class.v8::internal::AccountingAllocator" = type { i32 (...)**, %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"class.std::__1::unique_ptr.646", %"class.std::__1::unique_ptr.444" }
%"class.std::__1::unique_ptr.646" = type { %"class.std::__1::__compressed_pair.647" }
%"class.std::__1::__compressed_pair.647" = type { %"struct.std::__1::__compressed_pair_elem.648" }
%"struct.std::__1::__compressed_pair_elem.648" = type { %"class.v8::internal::VirtualMemory"* }
%"class.std::__1::unique_ptr.444" = type { %"class.std::__1::__compressed_pair.445" }
%"class.std::__1::__compressed_pair.445" = type { %"struct.std::__1::__compressed_pair_elem.446" }
%"struct.std::__1::__compressed_pair_elem.446" = type { %"class.v8::base::BoundedPageAllocator"* }
%"class.v8::base::BoundedPageAllocator" = type { %"class.v8::PageAllocator", %"class.v8::base::Mutex", i64, i64, %"class.v8::PageAllocator"*, %"class.v8::base::RegionAllocator" }
%"class.v8::base::RegionAllocator" = type { %"class.v8::base::RegionAllocator::Region", i64, i64, i64, i64, %"class.std::__1::set", %"class.std::__1::set.454" }
%"class.v8::base::RegionAllocator::Region" = type <{ %"class.v8::base::AddressRegion", i32, [4 x i8] }>
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.447", %"class.std::__1::__compressed_pair.452" }
%"class.std::__1::__compressed_pair.447" = type { %"struct.std::__1::__compressed_pair_elem.448" }
%"class.std::__1::__compressed_pair.452" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::set.454" = type { %"class.std::__1::__tree.455" }
%"class.std::__1::__tree.455" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.447", %"class.std::__1::__compressed_pair.456" }
%"class.std::__1::__compressed_pair.456" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.v8::internal::InnerPointerToCodeCache" = type opaque
%"class.v8::internal::GlobalHandles" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.789", %"class.std::__1::vector.795", %"class.std::__1::unique_ptr.802", %"class.std::__1::vector.809", %"class.std::__1::unique_ptr.816", i64, %"class.std::__1::vector.822", %"class.std::__1::vector.830", %"class.std::__1::vector.838", i8, i8, i32 }
%"class.std::__1::unique_ptr.789" = type { %"class.std::__1::__compressed_pair.790" }
%"class.std::__1::__compressed_pair.790" = type { %"struct.std::__1::__compressed_pair_elem.791" }
%"struct.std::__1::__compressed_pair_elem.791" = type { %"class.v8::internal::GlobalHandles::NodeSpace"* }
%"class.v8::internal::GlobalHandles::NodeSpace" = type opaque
%"class.std::__1::vector.795" = type { %"class.std::__1::__vector_base.796" }
%"class.std::__1::__vector_base.796" = type { %"class.v8::internal::GlobalHandles::Node"**, %"class.v8::internal::GlobalHandles::Node"**, %"class.std::__1::__compressed_pair.797" }
%"class.v8::internal::GlobalHandles::Node" = type opaque
%"class.std::__1::__compressed_pair.797" = type { %"struct.std::__1::__compressed_pair_elem.798" }
%"struct.std::__1::__compressed_pair_elem.798" = type { %"class.v8::internal::GlobalHandles::Node"** }
%"class.std::__1::unique_ptr.802" = type { %"class.std::__1::__compressed_pair.803" }
%"class.std::__1::__compressed_pair.803" = type { %"struct.std::__1::__compressed_pair_elem.804" }
%"struct.std::__1::__compressed_pair_elem.804" = type { %"class.v8::internal::GlobalHandles::NodeSpace.805"* }
%"class.v8::internal::GlobalHandles::NodeSpace.805" = type opaque
%"class.std::__1::vector.809" = type { %"class.std::__1::__vector_base.810" }
%"class.std::__1::__vector_base.810" = type { %"class.v8::internal::GlobalHandles::TracedNode"**, %"class.v8::internal::GlobalHandles::TracedNode"**, %"class.std::__1::__compressed_pair.811" }
%"class.v8::internal::GlobalHandles::TracedNode" = type opaque
%"class.std::__1::__compressed_pair.811" = type { %"struct.std::__1::__compressed_pair_elem.812" }
%"struct.std::__1::__compressed_pair_elem.812" = type { %"class.v8::internal::GlobalHandles::TracedNode"** }
%"class.std::__1::unique_ptr.816" = type { %"class.std::__1::__compressed_pair.817" }
%"class.std::__1::__compressed_pair.817" = type { %"struct.std::__1::__compressed_pair_elem.818" }
%"struct.std::__1::__compressed_pair_elem.818" = type { %"class.v8::internal::GlobalHandles::OnStackTracedNodeSpace"* }
%"class.v8::internal::GlobalHandles::OnStackTracedNodeSpace" = type opaque
%"class.std::__1::vector.822" = type { %"class.std::__1::__vector_base.823" }
%"class.std::__1::__vector_base.823" = type { %"struct.std::__1::pair.824"*, %"struct.std::__1::pair.824"*, %"class.std::__1::__compressed_pair.825" }
%"struct.std::__1::pair.824" = type opaque
%"class.std::__1::__compressed_pair.825" = type { %"struct.std::__1::__compressed_pair_elem.826" }
%"struct.std::__1::__compressed_pair_elem.826" = type { %"struct.std::__1::pair.824"* }
%"class.std::__1::vector.830" = type { %"class.std::__1::__vector_base.831" }
%"class.std::__1::__vector_base.831" = type { %"struct.std::__1::pair.832"*, %"struct.std::__1::pair.832"*, %"class.std::__1::__compressed_pair.833" }
%"struct.std::__1::pair.832" = type opaque
%"class.std::__1::__compressed_pair.833" = type { %"struct.std::__1::__compressed_pair_elem.834" }
%"struct.std::__1::__compressed_pair_elem.834" = type { %"struct.std::__1::pair.832"* }
%"class.std::__1::vector.838" = type { %"class.std::__1::__vector_base.839" }
%"class.std::__1::__vector_base.839" = type { %"class.v8::internal::GlobalHandles::PendingPhantomCallback"*, %"class.v8::internal::GlobalHandles::PendingPhantomCallback"*, %"class.std::__1::__compressed_pair.840" }
%"class.v8::internal::GlobalHandles::PendingPhantomCallback" = type { void (%"class.v8::WeakCallbackInfo"*)*, i8*, [2 x i8*] }
%"class.v8::WeakCallbackInfo" = type { %"class.v8::Isolate"*, i8*, {}**, [2 x i8*] }
%"class.v8::Isolate" = type { i8 }
%"class.std::__1::__compressed_pair.840" = type { %"struct.std::__1::__compressed_pair_elem.841" }
%"struct.std::__1::__compressed_pair_elem.841" = type { %"class.v8::internal::GlobalHandles::PendingPhantomCallback"* }
%"class.v8::internal::EternalHandles" = type { i32, %"class.std::__1::vector.658", %"class.std::__1::vector.845" }
%"class.std::__1::vector.658" = type { %"class.std::__1::__vector_base.659" }
%"class.std::__1::__vector_base.659" = type { i64**, i64**, %"class.std::__1::__compressed_pair.660" }
%"class.std::__1::__compressed_pair.660" = type { %"struct.std::__1::__compressed_pair_elem.661" }
%"struct.std::__1::__compressed_pair_elem.661" = type { i64** }
%"class.v8::internal::ThreadManager" = type opaque
%"class.v8::bigint::Processor" = type opaque
%"class.v8::internal::RuntimeState" = type { %"class.std::__1::unique_ptr.852" }
%"class.std::__1::unique_ptr.852" = type { %"class.std::__1::__compressed_pair.853" }
%"class.std::__1::__compressed_pair.853" = type { %"struct.std::__1::__compressed_pair_elem.854" }
%"struct.std::__1::__compressed_pair_elem.854" = type { %"struct.v8::internal::Runtime::Function"* }
%"struct.v8::internal::Runtime::Function" = type { i32, i32, i8*, i64, i8, i8 }
%"class.v8::internal::Builtins" = type { %"class.v8::internal::Isolate"*, i8, i32 }
%"class.v8::internal::SetupIsolateDelegate" = type opaque
%"class.v8::internal::RegExpStack" = type opaque
%"class.std::__1::vector.845" = type { %"class.std::__1::__vector_base.846" }
%"class.std::__1::__vector_base.846" = type { i32*, i32*, %"class.std::__1::__compressed_pair.847" }
%"class.std::__1::__compressed_pair.847" = type { %"struct.std::__1::__compressed_pair_elem.848" }
%"struct.std::__1::__compressed_pair_elem.848" = type { i32* }
%"class.v8::internal::DateCache" = type opaque
%"class.v8::base::RandomNumberGenerator" = type { i64, i64, i64 }
%"struct.std::__1::atomic.858" = type { %"struct.std::__1::__atomic_base.859" }
%"struct.std::__1::__atomic_base.859" = type { %"struct.std::__1::__cxx_atomic_impl.860" }
%"struct.std::__1::__cxx_atomic_impl.860" = type { %"struct.std::__1::__cxx_atomic_base_impl.861" }
%"struct.std::__1::__cxx_atomic_base_impl.861" = type { i32 }
%"class.v8::SharedArrayBuffer" = type { i8 }
%"class.v8::Isolate::AtomicsWaitWakeHandle" = type { i8 }
%"class.v8::Promise" = type { i8 }
%"struct.std::__1::atomic.868" = type { %"struct.std::__1::__atomic_base.869" }
%"struct.std::__1::__atomic_base.869" = type { %"struct.std::__1::__cxx_atomic_impl.870" }
%"struct.std::__1::__cxx_atomic_impl.870" = type { %"struct.std::__1::__cxx_atomic_base_impl.871" }
%"struct.std::__1::__cxx_atomic_base_impl.871" = type { i32 }
%"class.v8::Context" = type { i8 }
%"class.v8::Module" = type { i8 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.873" }
%"class.std::__1::__compressed_pair.873" = type { %"struct.std::__1::__compressed_pair_elem.874" }
%"struct.std::__1::__compressed_pair_elem.874" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.875 }
%union.anon.875 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::unordered_map.880" = type { %"class.std::__1::__hash_table.881" }
%"class.std::__1::__hash_table.881" = type <{ %"class.std::__1::unique_ptr.882", %"class.std::__1::__compressed_pair.892", %"class.std::__1::__compressed_pair.897", %"class.std::__1::__compressed_pair.900", [4 x i8] }>
%"class.std::__1::unique_ptr.882" = type { %"class.std::__1::__compressed_pair.883" }
%"class.std::__1::__compressed_pair.883" = type { %"struct.std::__1::__compressed_pair_elem.884", %"struct.std::__1::__compressed_pair_elem.886" }
%"struct.std::__1::__compressed_pair_elem.884" = type { %"struct.std::__1::__hash_node_base.885"** }
%"struct.std::__1::__hash_node_base.885" = type { %"struct.std::__1::__hash_node_base.885"* }
%"struct.std::__1::__compressed_pair_elem.886" = type { %"class.std::__1::__bucket_list_deallocator.887" }
%"class.std::__1::__bucket_list_deallocator.887" = type { %"class.std::__1::__compressed_pair.888" }
%"class.std::__1::__compressed_pair.888" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.892" = type { %"struct.std::__1::__compressed_pair_elem.893" }
%"struct.std::__1::__compressed_pair_elem.893" = type { %"struct.std::__1::__hash_node_base.885" }
%"class.std::__1::__compressed_pair.897" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.900" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::atomic.112" = type { %"struct.std::__1::__atomic_base.113" }
%"struct.std::__1::__atomic_base.113" = type { %"struct.std::__1::__cxx_atomic_impl.114" }
%"struct.std::__1::__cxx_atomic_impl.114" = type { %"struct.std::__1::__cxx_atomic_base_impl.115" }
%"struct.std::__1::__cxx_atomic_base_impl.115" = type { i8 }
%"class.v8::internal::Debug" = type { %"class.v8::debug::DebugDelegate"*, i8, i8, i8, i8, i8, i8, i8, i8, i8, %"class.v8::internal::DebugInfoListNode"*, %"class.std::__1::unique_ptr.906", %"class.v8::internal::Handle.912", %"class.v8::internal::DebugFeatureTracker", %"class.v8::internal::Debug::ThreadLocal", %"class.v8::internal::Handle.913", %"class.v8::internal::Isolate"* }
%"class.v8::debug::DebugDelegate" = type { i32 (...)** }
%"class.v8::internal::DebugInfoListNode" = type { i64*, %"class.v8::internal::DebugInfoListNode"* }
%"class.std::__1::unique_ptr.906" = type { %"class.std::__1::__compressed_pair.907" }
%"class.std::__1::__compressed_pair.907" = type { %"struct.std::__1::__compressed_pair_elem.908" }
%"struct.std::__1::__compressed_pair_elem.908" = type { %"class.v8::internal::Debug::TemporaryObjectsTracker"* }
%"class.v8::internal::Debug::TemporaryObjectsTracker" = type opaque
%"class.v8::internal::Handle.912" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::DebugFeatureTracker" = type <{ %"class.v8::internal::Isolate"*, i32, [4 x i8] }>
%"class.v8::internal::Debug::ThreadLocal" = type <{ i64, i32, i8, [3 x i8], %"class.v8::internal::Object", i8, [3 x i8], i32, i32, i32, %"class.v8::internal::Object", %"class.v8::internal::Object", i32, i8, [3 x i8] }>
%"class.v8::internal::Handle.913" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HeapProfiler" = type { %"class.v8::internal::HeapObjectAllocationTracker", %"class.std::__1::unique_ptr.914", %"class.std::__1::vector.920", %"class.std::__1::unique_ptr.928", %"class.std::__1::unique_ptr.934", i8, i8, %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.940", %"class.std::__1::vector.946", %"struct.std::__1::pair.954" }
%"class.v8::internal::HeapObjectAllocationTracker" = type { i32 (...)** }
%"class.std::__1::unique_ptr.914" = type { %"class.std::__1::__compressed_pair.915" }
%"class.std::__1::__compressed_pair.915" = type { %"struct.std::__1::__compressed_pair_elem.916" }
%"struct.std::__1::__compressed_pair_elem.916" = type { %"class.v8::internal::HeapObjectsMap"* }
%"class.v8::internal::HeapObjectsMap" = type opaque
%"class.std::__1::vector.920" = type { %"class.std::__1::__vector_base.921" }
%"class.std::__1::__vector_base.921" = type { %"class.std::__1::unique_ptr.922"*, %"class.std::__1::unique_ptr.922"*, %"class.std::__1::__compressed_pair.923" }
%"class.std::__1::unique_ptr.922" = type opaque
%"class.std::__1::__compressed_pair.923" = type { %"struct.std::__1::__compressed_pair_elem.924" }
%"struct.std::__1::__compressed_pair_elem.924" = type { %"class.std::__1::unique_ptr.922"* }
%"class.std::__1::unique_ptr.928" = type { %"class.std::__1::__compressed_pair.929" }
%"class.std::__1::__compressed_pair.929" = type { %"struct.std::__1::__compressed_pair_elem.930" }
%"struct.std::__1::__compressed_pair_elem.930" = type { %"class.v8::internal::StringsStorage"* }
%"class.v8::internal::StringsStorage" = type opaque
%"class.std::__1::unique_ptr.934" = type { %"class.std::__1::__compressed_pair.935" }
%"class.std::__1::__compressed_pair.935" = type { %"struct.std::__1::__compressed_pair_elem.936" }
%"struct.std::__1::__compressed_pair_elem.936" = type { %"class.v8::internal::AllocationTracker"* }
%"class.v8::internal::AllocationTracker" = type opaque
%"class.std::__1::unique_ptr.940" = type { %"class.std::__1::__compressed_pair.941" }
%"class.std::__1::__compressed_pair.941" = type { %"struct.std::__1::__compressed_pair_elem.942" }
%"struct.std::__1::__compressed_pair_elem.942" = type { %"class.v8::internal::SamplingHeapProfiler"* }
%"class.v8::internal::SamplingHeapProfiler" = type opaque
%"class.std::__1::vector.946" = type { %"class.std::__1::__vector_base.947" }
%"class.std::__1::__vector_base.947" = type { %"struct.std::__1::pair.948"*, %"struct.std::__1::pair.948"*, %"class.std::__1::__compressed_pair.949" }
%"struct.std::__1::pair.948" = type opaque
%"class.std::__1::__compressed_pair.949" = type { %"struct.std::__1::__compressed_pair_elem.950" }
%"struct.std::__1::__compressed_pair_elem.950" = type { %"struct.std::__1::pair.948"* }
%"struct.std::__1::pair.954" = type { i8 (%"class.v8::Isolate"*, %"class.v8::Local.686"*, i16, i8*)*, i8* }
%"class.v8::Local.686" = type { %"class.v8::Value"* }
%"class.std::__1::unique_ptr.955" = type { %"class.std::__1::__compressed_pair.956" }
%"class.std::__1::__compressed_pair.956" = type { %"struct.std::__1::__compressed_pair_elem.957" }
%"struct.std::__1::__compressed_pair_elem.957" = type { %"class.v8::internal::CodeEventDispatcher"* }
%"class.v8::internal::CodeEventDispatcher" = type { %"class.v8::internal::CodeEventListener", %"class.std::__1::unordered_set.958", %"class.v8::base::Mutex" }
%"class.std::__1::unordered_set.958" = type { %"class.std::__1::__hash_table.959" }
%"class.std::__1::__hash_table.959" = type <{ %"class.std::__1::unique_ptr.960", %"class.std::__1::__compressed_pair.970", %"class.std::__1::__compressed_pair.975", %"class.std::__1::__compressed_pair.979", [4 x i8] }>
%"class.std::__1::unique_ptr.960" = type { %"class.std::__1::__compressed_pair.961" }
%"class.std::__1::__compressed_pair.961" = type { %"struct.std::__1::__compressed_pair_elem.962", %"struct.std::__1::__compressed_pair_elem.964" }
%"struct.std::__1::__compressed_pair_elem.962" = type { %"struct.std::__1::__hash_node_base.963"** }
%"struct.std::__1::__hash_node_base.963" = type { %"struct.std::__1::__hash_node_base.963"* }
%"struct.std::__1::__compressed_pair_elem.964" = type { %"class.std::__1::__bucket_list_deallocator.965" }
%"class.std::__1::__bucket_list_deallocator.965" = type { %"class.std::__1::__compressed_pair.966" }
%"class.std::__1::__compressed_pair.966" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.970" = type { %"struct.std::__1::__compressed_pair_elem.971" }
%"struct.std::__1::__compressed_pair_elem.971" = type { %"struct.std::__1::__hash_node_base.963" }
%"class.std::__1::__compressed_pair.975" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.979" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.v8::internal::AstStringConstants" = type opaque
%"class.v8::internal::interpreter::Interpreter" = type opaque
%"class.v8::internal::compiler::PerIsolateCompilerCache" = type opaque
%"class.v8::internal::Zone" = type <{ i64, i64, i64, i64, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::Segment"*, i8*, i8, i8, [6 x i8] }>
%"class.v8::internal::Segment" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::Segment"*, i64 }
%"class.v8::internal::CompilerDispatcher" = type opaque
%"class.std::__1::queue" = type { %"class.std::__1::deque" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.993" }
%"struct.std::__1::__split_buffer" = type { %"struct.std::__1::pair.987"**, %"struct.std::__1::pair.987"**, %"struct.std::__1::pair.987"**, %"class.std::__1::__compressed_pair.988" }
%"struct.std::__1::pair.987" = type opaque
%"class.std::__1::__compressed_pair.988" = type { %"struct.std::__1::__compressed_pair_elem.989" }
%"struct.std::__1::__compressed_pair_elem.989" = type { %"struct.std::__1::pair.987"** }
%"class.std::__1::__compressed_pair.993" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.v8::String" = type { i8 }
%"class.v8::FunctionCallbackInfo" = type <{ i64*, i64*, i32, [4 x i8] }>
%"class.v8::internal::Relocatable" = type { i32 (...)**, %"class.v8::internal::Isolate"*, %"class.v8::internal::Relocatable"* }
%"class.std::__1::vector.998" = type { %"class.std::__1::__vector_base.999" }
%"class.std::__1::__vector_base.999" = type { %"class.v8::internal::Handle.1000"*, %"class.v8::internal::Handle.1000"*, %"class.std::__1::__compressed_pair.1001" }
%"class.v8::internal::Handle.1000" = type { %"class.v8::internal::HandleBase" }
%"class.std::__1::__compressed_pair.1001" = type { %"struct.std::__1::__compressed_pair_elem.1002" }
%"struct.std::__1::__compressed_pair_elem.1002" = type { %"class.v8::internal::Handle.1000"* }
%"class.v8::internal::AddressToIndexHashMap" = type opaque
%"class.v8::internal::HeapObjectToIndexHashMap" = type opaque
%"class.v8::internal::MicrotaskQueue" = type { %"class.v8::MicrotaskQueue", i64, i64, i64, i64*, i64, %"class.v8::internal::MicrotaskQueue"*, %"class.v8::internal::MicrotaskQueue"*, i32, i32, i32, i8, %"class.std::__1::vector.1006" }
%"class.v8::MicrotaskQueue" = type { i32 (...)** }
%"class.std::__1::vector.1006" = type { %"class.std::__1::__vector_base.1007" }
%"class.std::__1::__vector_base.1007" = type { %"struct.std::__1::pair.987"*, %"struct.std::__1::pair.987"*, %"class.std::__1::__compressed_pair.1008" }
%"class.std::__1::__compressed_pair.1008" = type { %"struct.std::__1::__compressed_pair_elem.1009" }
%"struct.std::__1::__compressed_pair_elem.1009" = type { %"struct.std::__1::pair.987"* }
%"class.v8::internal::CompilationStatistics" = type opaque
%"class.v8::internal::CodeTracer" = type <{ %"class.v8::internal::EmbeddedVector", %struct._IO_FILE*, i32, [4 x i8] }>
%"class.v8::internal::EmbeddedVector" = type { %"class.v8::internal::Vector", [128 x i8] }
%"class.v8::internal::Vector" = type { i8*, i64 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%"class.v8::PromiseRejectMessage" = type { %"class.v8::Local.863", i32, %"class.v8::Local.686" }
%"class.v8::Local.863" = type { %"class.v8::Promise"* }
%"class.v8::StartupData" = type { i8*, i32 }
%"class.v8_inspector::V8Inspector" = type opaque
%"class.v8::internal::compiler::NodeObserver" = type opaque
%"class.v8::internal::OptimizingCompileDispatcher" = type opaque
%"class.std::__1::unique_ptr.1010" = type { %"class.std::__1::__compressed_pair.1011" }
%"class.std::__1::__compressed_pair.1011" = type { %"struct.std::__1::__compressed_pair_elem.1012" }
%"struct.std::__1::__compressed_pair_elem.1012" = type { %"class.v8::internal::PersistentHandlesList"* }
%"class.v8::internal::PersistentHandlesList" = type { %"class.v8::base::Mutex", %"class.v8::internal::PersistentHandles"* }
%"class.v8::internal::PersistentHandles" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::vector.658", i64*, i64*, %"class.v8::internal::PersistentHandles"*, %"class.v8::internal::PersistentHandles"* }
%"class.std::__1::vector.1016" = type { %"class.std::__1::__vector_base.1017" }
%"class.std::__1::__vector_base.1017" = type { void (%"class.v8::Isolate"*)**, void (%"class.v8::Isolate"*)**, %"class.std::__1::__compressed_pair.1018" }
%"class.std::__1::__compressed_pair.1018" = type { %"struct.std::__1::__compressed_pair_elem.1019" }
%"struct.std::__1::__compressed_pair_elem.1019" = type { void (%"class.v8::Isolate"*)** }
%"class.std::__1::shared_ptr.1023" = type { %"class.v8::internal::metrics::Recorder"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::metrics::Recorder" = type opaque
%"class.std::__1::unordered_map.1024" = type { %"class.std::__1::__hash_table.1025" }
%"class.std::__1::__hash_table.1025" = type <{ %"class.std::__1::unique_ptr.1026", %"class.std::__1::__compressed_pair.1036", %"class.std::__1::__compressed_pair.1041", %"class.std::__1::__compressed_pair.1044", [4 x i8] }>
%"class.std::__1::unique_ptr.1026" = type { %"class.std::__1::__compressed_pair.1027" }
%"class.std::__1::__compressed_pair.1027" = type { %"struct.std::__1::__compressed_pair_elem.1028", %"struct.std::__1::__compressed_pair_elem.1030" }
%"struct.std::__1::__compressed_pair_elem.1028" = type { %"struct.std::__1::__hash_node_base.1029"** }
%"struct.std::__1::__hash_node_base.1029" = type { %"struct.std::__1::__hash_node_base.1029"* }
%"struct.std::__1::__compressed_pair_elem.1030" = type { %"class.std::__1::__bucket_list_deallocator.1031" }
%"class.std::__1::__bucket_list_deallocator.1031" = type { %"class.std::__1::__compressed_pair.1032" }
%"class.std::__1::__compressed_pair.1032" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.1036" = type { %"struct.std::__1::__compressed_pair_elem.1037" }
%"struct.std::__1::__compressed_pair_elem.1037" = type { %"struct.std::__1::__hash_node_base.1029" }
%"class.std::__1::__compressed_pair.1041" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.1044" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.v8::metrics::LongTaskStats" = type { i64, i64, i64 }
%"class.std::__1::vector.505" = type { %"class.std::__1::__vector_base.506" }
%"class.std::__1::__vector_base.506" = type { %"class.v8::internal::Object"*, %"class.v8::internal::Object"*, %"class.std::__1::__compressed_pair.507" }
%"class.std::__1::__compressed_pair.507" = type { %"struct.std::__1::__compressed_pair_elem.508" }
%"struct.std::__1::__compressed_pair_elem.508" = type { %"class.v8::internal::Object"* }
%"class.v8::internal::BuiltinsConstantsTableBuilder" = type opaque
%"class.v8::ArrayBuffer::Allocator" = type { i32 (...)** }
%"class.std::__1::shared_ptr.120" = type { %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::FutexWaitListNode" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::shared_ptr.1048", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::base::ConditionVariable", %"class.v8::internal::FutexWaitListNode"*, %"class.v8::internal::FutexWaitListNode"*, %"class.std::__1::weak_ptr.1073", i64, i8*, i8, i8, %"class.v8::Global", %"class.v8::Global.1074", %"class.v8::base::TimeTicks", i64 }
%"class.std::__1::shared_ptr.1048" = type { %"class.v8::TaskRunner"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::TaskRunner" = type { i32 (...)** }
%"class.v8::base::ConditionVariable" = type { %union.pthread_cond_t }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon, %union.anon.500, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon = type { i64 }
%union.anon.500 = type { i64 }
%"class.std::__1::weak_ptr.1073" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::BackingStore" = type <{ i8*, %"struct.std::__1::atomic", i64, %"union.v8::internal::BackingStore::TypeSpecificData", i16, [6 x i8] }>
%"union.v8::internal::BackingStore::TypeSpecificData" = type { %"class.std::__1::shared_ptr.120" }
%"class.v8::Global" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Promise"* }
%"class.v8::Global.1074" = type { %"class.v8::PersistentBase.1075" }
%"class.v8::PersistentBase.1075" = type { %"class.v8::Context"* }
%"class.v8::internal::CancelableTaskManager" = type <{ i64, %"class.std::__1::unordered_map.1049", %"class.v8::base::ConditionVariable", %"class.v8::base::Mutex", i8, [7 x i8] }>
%"class.std::__1::unordered_map.1049" = type { %"class.std::__1::__hash_table.1050" }
%"class.std::__1::__hash_table.1050" = type <{ %"class.std::__1::unique_ptr.1051", %"class.std::__1::__compressed_pair.1061", %"class.std::__1::__compressed_pair.1066", %"class.std::__1::__compressed_pair.1069", [4 x i8] }>
%"class.std::__1::unique_ptr.1051" = type { %"class.std::__1::__compressed_pair.1052" }
%"class.std::__1::__compressed_pair.1052" = type { %"struct.std::__1::__compressed_pair_elem.1053", %"struct.std::__1::__compressed_pair_elem.1055" }
%"struct.std::__1::__compressed_pair_elem.1053" = type { %"struct.std::__1::__hash_node_base.1054"** }
%"struct.std::__1::__hash_node_base.1054" = type { %"struct.std::__1::__hash_node_base.1054"* }
%"struct.std::__1::__compressed_pair_elem.1055" = type { %"class.std::__1::__bucket_list_deallocator.1056" }
%"class.std::__1::__bucket_list_deallocator.1056" = type { %"class.std::__1::__compressed_pair.1057" }
%"class.std::__1::__compressed_pair.1057" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.1061" = type { %"struct.std::__1::__compressed_pair_elem.1062" }
%"struct.std::__1::__compressed_pair_elem.1062" = type { %"struct.std::__1::__hash_node_base.1054" }
%"class.std::__1::__compressed_pair.1066" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.1069" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.v8::debug::ConsoleDelegate" = type { i32 (...)** }
%"class.v8::debug::AsyncEventDelegate" = type { i32 (...)** }
%"class.std::__1::unique_ptr.1076" = type { %"class.std::__1::__compressed_pair.1077" }
%"class.std::__1::__compressed_pair.1077" = type { %"struct.std::__1::__compressed_pair_elem.1078" }
%"struct.std::__1::__compressed_pair_elem.1078" = type { %"class.v8::internal::LocalIsolate"* }
%"class.v8::internal::LocalIsolate" = type { %"class.v8::internal::HiddenLocalFactory", %"class.v8::internal::LocalHeap", %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.1081", %"class.v8::internal::ThreadId", i64, %"class.v8::internal::RuntimeCallStats"* }
%"class.v8::internal::HiddenLocalFactory" = type { %"class.v8::internal::LocalFactory" }
%"class.v8::internal::LocalFactory" = type { %"class.v8::internal::ReadOnlyRoots" }
%"class.v8::internal::ReadOnlyRoots" = type { i64* }
%"class.v8::internal::LocalHeap" = type { %"class.v8::internal::Heap"*, i8, %"struct.std::__1::atomic.639", i8, i8, %"class.v8::internal::LocalHeap"*, %"class.v8::internal::LocalHeap"*, %"class.std::__1::unique_ptr.643", %"class.std::__1::unique_ptr.668", %"class.std::__1::unique_ptr.437", %"class.std::__1::vector.674", %"class.v8::internal::ConcurrentAllocator" }
%"struct.std::__1::atomic.639" = type { %"struct.std::__1::__atomic_base.640" }
%"struct.std::__1::__atomic_base.640" = type { %"struct.std::__1::__cxx_atomic_impl.641" }
%"struct.std::__1::__cxx_atomic_impl.641" = type { %"struct.std::__1::__cxx_atomic_base_impl.642" }
%"struct.std::__1::__cxx_atomic_base_impl.642" = type { i32 }
%"class.std::__1::unique_ptr.643" = type { %"class.std::__1::__compressed_pair.644" }
%"class.std::__1::__compressed_pair.644" = type { %"struct.std::__1::__compressed_pair_elem.645" }
%"struct.std::__1::__compressed_pair_elem.645" = type { %"class.v8::internal::LocalHandles"* }
%"class.v8::internal::LocalHandles" = type { %"struct.v8::internal::HandleScopeData", %"class.std::__1::vector.658" }
%"class.std::__1::unique_ptr.668" = type { %"class.std::__1::__compressed_pair.669" }
%"class.std::__1::__compressed_pair.669" = type { %"struct.std::__1::__compressed_pair_elem.670" }
%"struct.std::__1::__compressed_pair_elem.670" = type { %"class.v8::internal::PersistentHandles"* }
%"class.std::__1::vector.674" = type { %"class.std::__1::__vector_base.675" }
%"class.std::__1::__vector_base.675" = type { %"struct.std::__1::pair.676"*, %"struct.std::__1::pair.676"*, %"class.std::__1::__compressed_pair.677" }
%"struct.std::__1::pair.676" = type opaque
%"class.std::__1::__compressed_pair.677" = type { %"struct.std::__1::__compressed_pair_elem.678" }
%"struct.std::__1::__compressed_pair_elem.678" = type { %"struct.std::__1::pair.676"* }
%"class.v8::internal::ConcurrentAllocator" = type { %"class.v8::internal::LocalHeap"*, %"class.v8::internal::PagedSpace"*, %"class.v8::internal::LocalAllocationBuffer" }
%"class.v8::internal::PagedSpace" = type { %"class.v8::internal::SpaceWithLinearArea", i32, i32, i64, %"class.v8::internal::AllocationStats", %"class.v8::base::Mutex", i64, i64 }
%"class.v8::internal::SpaceWithLinearArea" = type { %"class.v8::internal::Space", %"class.v8::internal::LinearAllocationArea", [3 x i64] }
%"class.v8::internal::Space" = type { %"class.v8::internal::BaseSpace", %"class.v8::internal::AllocationCounter", %"class.v8::internal::heap::List", %"struct.std::__1::atomic"*, %"class.std::__1::unique_ptr.59" }
%"class.v8::internal::AllocationCounter" = type <{ %"class.std::__1::vector.29", %"class.std::__1::vector.29", %"class.std::__1::unordered_set", i8, [7 x i8], i64, i64, i8, [7 x i8] }>
%"class.std::__1::vector.29" = type { %"class.std::__1::__vector_base.30" }
%"class.std::__1::__vector_base.30" = type { %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"*, %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"*, %"class.std::__1::__compressed_pair.31" }
%"struct.v8::internal::AllocationCounter::AllocationObserverCounter" = type { %"class.v8::internal::AllocationObserver"*, i64, i64 }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"* }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table.36" }
%"class.std::__1::__hash_table.36" = type <{ %"class.std::__1::unique_ptr.37", %"class.std::__1::__compressed_pair.47", %"class.std::__1::__compressed_pair.52", %"class.std::__1::__compressed_pair.54", [4 x i8] }>
%"class.std::__1::unique_ptr.37" = type { %"class.std::__1::__compressed_pair.38" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39", %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %"struct.std::__1::__hash_node_base.40"** }
%"struct.std::__1::__hash_node_base.40" = type { %"struct.std::__1::__hash_node_base.40"* }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"class.std::__1::__bucket_list_deallocator.42" }
%"class.std::__1::__bucket_list_deallocator.42" = type { %"class.std::__1::__compressed_pair.43" }
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48" }
%"struct.std::__1::__compressed_pair_elem.48" = type { %"struct.std::__1::__hash_node_base.40" }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.54" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.v8::internal::heap::List" = type { %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"* }
%"class.v8::internal::MemoryChunk" = type { %"class.v8::internal::BasicMemoryChunk", [2 x %"class.v8::internal::SlotSet"*], %"struct.std::__1::atomic", %"struct.std::__1::atomic.15", %"class.v8::internal::SlotSet"*, [2 x %"class.v8::internal::TypedSlotSet"*], [2 x %"class.std::__1::set.620"*], %"class.v8::base::Mutex"*, %"struct.std::__1::atomic.628", %"class.v8::base::Mutex"*, i64, [2 x %"struct.std::__1::atomic"], %"class.v8::internal::heap::ListNode", %"class.v8::internal::FreeListCategory"**, %"struct.std::__1::atomic.15", %"class.v8::internal::Bitmap"*, %"class.v8::internal::CodeObjectRegistry"*, %"class.v8::internal::PossiblyEmptyBuckets" }
%"class.v8::internal::SlotSet" = type { i8 }
%"class.v8::internal::TypedSlotSet" = type { %"class.v8::internal::TypedSlots", i64 }
%"class.v8::internal::TypedSlots" = type { i32 (...)**, %"struct.v8::internal::TypedSlots::Chunk"*, %"struct.v8::internal::TypedSlots::Chunk"* }
%"struct.v8::internal::TypedSlots::Chunk" = type { %"struct.v8::internal::TypedSlots::Chunk"*, %"class.std::__1::vector.613" }
%"class.std::__1::vector.613" = type { %"class.std::__1::__vector_base.614" }
%"class.std::__1::__vector_base.614" = type { %"struct.v8::internal::TypedSlots::TypedSlot"*, %"struct.v8::internal::TypedSlots::TypedSlot"*, %"class.std::__1::__compressed_pair.615" }
%"struct.v8::internal::TypedSlots::TypedSlot" = type { i32 }
%"class.std::__1::__compressed_pair.615" = type { %"struct.std::__1::__compressed_pair_elem.616" }
%"struct.std::__1::__compressed_pair_elem.616" = type { %"struct.v8::internal::TypedSlots::TypedSlot"* }
%"class.std::__1::set.620" = type { %"class.std::__1::__tree.621" }
%"class.std::__1::__tree.621" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.622", %"class.std::__1::__compressed_pair.626" }
%"class.std::__1::__compressed_pair.622" = type { %"struct.std::__1::__compressed_pair_elem.448" }
%"class.std::__1::__compressed_pair.626" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::atomic.628" = type { %"struct.std::__1::__atomic_base.629" }
%"struct.std::__1::__atomic_base.629" = type { %"struct.std::__1::__cxx_atomic_impl.630" }
%"struct.std::__1::__cxx_atomic_impl.630" = type { %"struct.std::__1::__cxx_atomic_base_impl.631" }
%"struct.std::__1::__cxx_atomic_base_impl.631" = type { i64 }
%"class.v8::internal::heap::ListNode" = type { %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"* }
%"class.v8::internal::FreeListCategory" = type { i32, i32, %"class.v8::internal::FreeSpace", %"class.v8::internal::FreeListCategory"*, %"class.v8::internal::FreeListCategory"* }
%"class.v8::internal::FreeSpace" = type { %"class.v8::internal::TorqueGeneratedFreeSpace" }
%"class.v8::internal::TorqueGeneratedFreeSpace" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Bitmap" = type { i8 }
%"class.v8::internal::CodeObjectRegistry" = type <{ %"class.std::__1::vector.632", i8, [7 x i8] }>
%"class.std::__1::vector.632" = type { %"class.std::__1::__vector_base.633" }
%"class.std::__1::__vector_base.633" = type { i64*, i64*, %"class.std::__1::__compressed_pair.634" }
%"class.std::__1::__compressed_pair.634" = type { %"struct.std::__1::__compressed_pair_elem.635" }
%"struct.std::__1::__compressed_pair_elem.635" = type { i64* }
%"class.v8::internal::PossiblyEmptyBuckets" = type { i64 }
%"class.std::__1::unique_ptr.59" = type { %"class.std::__1::__compressed_pair.60" }
%"class.std::__1::__compressed_pair.60" = type { %"struct.std::__1::__compressed_pair_elem.61" }
%"struct.std::__1::__compressed_pair_elem.61" = type { %"class.v8::internal::FreeList"* }
%"class.v8::internal::FreeList" = type { i32 (...)**, i32, i32, i64, %"struct.std::__1::atomic", %"class.v8::internal::FreeListCategory"**, i64 }
%"class.std::__1::unique_ptr.1081" = type { %"class.std::__1::__compressed_pair.1082" }
%"class.std::__1::__compressed_pair.1082" = type { %"struct.std::__1::__compressed_pair_elem.1083" }
%"struct.std::__1::__compressed_pair_elem.1083" = type { %"class.v8::internal::LocalLogger"* }
%"class.v8::internal::LocalLogger" = type opaque
%"struct.v8::internal::ManagedPtrDestructor" = type { i64, %"struct.v8::internal::ManagedPtrDestructor"*, %"struct.v8::internal::ManagedPtrDestructor"*, i8*, void (i8*)*, i64* }
%"class.v8::internal::wasm::WasmEngine" = type opaque
%"class.std::__1::unique_ptr.1090" = type { %"class.std::__1::__compressed_pair.1091" }
%"class.std::__1::__compressed_pair.1091" = type { %"struct.std::__1::__compressed_pair_elem.1092" }
%"struct.std::__1::__compressed_pair_elem.1092" = type { %"class.v8::internal::TracingCpuProfilerImpl"* }
%"class.v8::internal::TracingCpuProfilerImpl" = type opaque
%"class.v8::internal::EmbeddedFileWriterInterface" = type opaque
%"class.v8::Context::BackupIncumbentScope" = type { %"class.v8::Local.864", i64, %"class.v8::Context::BackupIncumbentScope"* }
%"class.v8::Local.864" = type { %"class.v8::Context"* }
%"class.v8::Array" = type { i8 }
%"class.v8::internal::Isolate::ThreadDataTable" = type { %"class.std::__1::unordered_map.1098" }
%"class.std::__1::unordered_map.1098" = type { %"class.std::__1::__hash_table.1099" }
%"class.std::__1::__hash_table.1099" = type <{ %"class.std::__1::unique_ptr.1100", %"class.std::__1::__compressed_pair.1110", %"class.std::__1::__compressed_pair.1115", %"class.std::__1::__compressed_pair.1118", [4 x i8] }>
%"class.std::__1::unique_ptr.1100" = type { %"class.std::__1::__compressed_pair.1101" }
%"class.std::__1::__compressed_pair.1101" = type { %"struct.std::__1::__compressed_pair_elem.1102", %"struct.std::__1::__compressed_pair_elem.1104" }
%"struct.std::__1::__compressed_pair_elem.1102" = type { %"struct.std::__1::__hash_node_base.1103"** }
%"struct.std::__1::__hash_node_base.1103" = type { %"struct.std::__1::__hash_node_base.1103"* }
%"struct.std::__1::__compressed_pair_elem.1104" = type { %"class.std::__1::__bucket_list_deallocator.1105" }
%"class.std::__1::__bucket_list_deallocator.1105" = type { %"class.std::__1::__compressed_pair.1106" }
%"class.std::__1::__compressed_pair.1106" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.1110" = type { %"struct.std::__1::__compressed_pair_elem.1111" }
%"struct.std::__1::__compressed_pair_elem.1111" = type { %"struct.std::__1::__hash_node_base.1103" }
%"class.std::__1::__compressed_pair.1115" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.1118" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::atomic.1124" = type { %"struct.std::__1::__atomic_base.1125" }
%"struct.std::__1::__atomic_base.1125" = type { %"struct.std::__1::__cxx_atomic_impl.1126" }
%"struct.std::__1::__cxx_atomic_impl.1126" = type { %"struct.std::__1::__cxx_atomic_base_impl.1127" }
%"struct.std::__1::__cxx_atomic_base_impl.1127" = type { %"class.std::__1::vector.1128"* }
%"class.std::__1::vector.1128" = type { %"class.std::__1::__vector_base.1129" }
%"class.std::__1::__vector_base.1129" = type { %"struct.v8::MemoryRange"*, %"struct.v8::MemoryRange"*, %"class.std::__1::__compressed_pair.1130" }
%"struct.v8::MemoryRange" = type { i8*, i64 }
%"class.std::__1::__compressed_pair.1130" = type { %"struct.std::__1::__compressed_pair_elem.1131" }
%"struct.std::__1::__compressed_pair_elem.1131" = type { %"struct.v8::MemoryRange"* }
%"struct.std::__1::atomic.20" = type { %"struct.std::__1::__atomic_base.21" }
%"struct.std::__1::__atomic_base.21" = type { %"struct.std::__1::__cxx_atomic_impl.22" }
%"struct.std::__1::__cxx_atomic_impl.22" = type { %"struct.std::__1::__cxx_atomic_base_impl.23" }
%"struct.std::__1::__cxx_atomic_base_impl.23" = type { i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.24" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"struct.std::__1::pair"* }
%"class.v8::internal::NewSpace" = type { %"class.v8::internal::SpaceWithLinearArea", %"class.v8::base::Mutex", %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"class.v8::internal::SemiSpace", %"class.v8::internal::SemiSpace", %"class.v8::internal::VirtualMemory", %"class.std::__1::vector.63" }
%"class.v8::internal::SemiSpace" = type { %"class.v8::internal::Space", i64, i64, i64, i64, i64, i32, %"class.v8::internal::Page"* }
%"class.v8::internal::Page" = type { %"class.v8::internal::MemoryChunk" }
%"class.std::__1::vector.63" = type { %"class.std::__1::__vector_base.64" }
%"class.std::__1::__vector_base.64" = type { %"struct.std::__1::pair.65"*, %"struct.std::__1::pair.65"*, %"class.std::__1::__compressed_pair.66" }
%"struct.std::__1::pair.65" = type { i32, i64 }
%"class.std::__1::__compressed_pair.66" = type { %"struct.std::__1::__compressed_pair_elem.67" }
%"struct.std::__1::__compressed_pair_elem.67" = type { %"struct.std::__1::pair.65"* }
%"class.v8::internal::CodeSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.v8::internal::OldLargeObjectSpace" = type { %"class.v8::internal::LargeObjectSpace" }
%"class.v8::internal::LargeObjectSpace" = type { %"class.v8::internal::Space", %"struct.std::__1::atomic", i32, %"struct.std::__1::atomic", %"class.v8::base::Mutex", %"struct.std::__1::atomic" }
%"class.v8::internal::CodeLargeObjectSpace" = type { %"class.v8::internal::OldLargeObjectSpace", %"class.std::__1::unordered_map.71" }
%"class.std::__1::unordered_map.71" = type { %"class.std::__1::__hash_table.72" }
%"class.std::__1::__hash_table.72" = type <{ %"class.std::__1::unique_ptr.73", %"class.std::__1::__compressed_pair.83", %"class.std::__1::__compressed_pair.88", %"class.std::__1::__compressed_pair.93", [4 x i8] }>
%"class.std::__1::unique_ptr.73" = type { %"class.std::__1::__compressed_pair.74" }
%"class.std::__1::__compressed_pair.74" = type { %"struct.std::__1::__compressed_pair_elem.75", %"struct.std::__1::__compressed_pair_elem.77" }
%"struct.std::__1::__compressed_pair_elem.75" = type { %"struct.std::__1::__hash_node_base.76"** }
%"struct.std::__1::__hash_node_base.76" = type { %"struct.std::__1::__hash_node_base.76"* }
%"struct.std::__1::__compressed_pair_elem.77" = type { %"class.std::__1::__bucket_list_deallocator.78" }
%"class.std::__1::__bucket_list_deallocator.78" = type { %"class.std::__1::__compressed_pair.79" }
%"class.std::__1::__compressed_pair.79" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.83" = type { %"struct.std::__1::__compressed_pair_elem.84" }
%"struct.std::__1::__compressed_pair_elem.84" = type { %"struct.std::__1::__hash_node_base.76" }
%"class.std::__1::__compressed_pair.88" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.93" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.v8::internal::NewLargeObjectSpace" = type { %"class.v8::internal::LargeObjectSpace", i64 }
%"class.v8::internal::OldSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.v8::internal::MapSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.std::__1::unique_ptr.106" = type { %"class.std::__1::__compressed_pair.107" }
%"class.std::__1::__compressed_pair.107" = type { %"struct.std::__1::__compressed_pair_elem.108" }
%"struct.std::__1::__compressed_pair_elem.108" = type { %"class.v8::internal::ConcurrentAllocator"* }
%"class.v8::internal::ArrayBufferExtension" = type { %"struct.std::__1::atomic.112", %"struct.std::__1::atomic.116", %"class.std::__1::shared_ptr", %"class.v8::internal::ArrayBufferExtension"*, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic.116" = type { %"struct.std::__1::__atomic_base.117" }
%"struct.std::__1::__atomic_base.117" = type { %"struct.std::__1::__cxx_atomic_impl.118" }
%"struct.std::__1::__cxx_atomic_impl.118" = type { %"struct.std::__1::__cxx_atomic_base_impl.119" }
%"struct.std::__1::__cxx_atomic_base_impl.119" = type { i8 }
%"class.std::__1::shared_ptr" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"struct.std::__1::atomic.121" = type { %"struct.std::__1::__atomic_base.122" }
%"struct.std::__1::__atomic_base.122" = type { %"struct.std::__1::__cxx_atomic_impl.123" }
%"struct.std::__1::__cxx_atomic_impl.123" = type { %"struct.std::__1::__cxx_atomic_base_impl.124" }
%"struct.std::__1::__cxx_atomic_base_impl.124" = type { i32 }
%"class.v8::internal::AllocationObserver" = type { i32 (...)**, i64 }
%"class.v8::internal::StressScavengeObserver" = type opaque
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.14" }
%"struct.std::__1::__atomic_base.14" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }
%"class.v8::internal::Object" = type { %"class.v8::internal::TaggedImpl" }
%"class.v8::internal::TaggedImpl" = type { i64 }
%"class.std::__1::vector.125" = type { %"class.std::__1::__vector_base.126" }
%"class.std::__1::__vector_base.126" = type { %"struct.v8::internal::Heap::GCCallbackTuple"*, %"struct.v8::internal::Heap::GCCallbackTuple"*, %"class.std::__1::__compressed_pair.127" }
%"struct.v8::internal::Heap::GCCallbackTuple" = type { void (%"class.v8::Isolate"*, i32, i32, i8*)*, i32, i8* }
%"class.std::__1::__compressed_pair.127" = type { %"struct.std::__1::__compressed_pair_elem.128" }
%"struct.std::__1::__compressed_pair_elem.128" = type { %"struct.v8::internal::Heap::GCCallbackTuple"* }
%"class.std::__1::unique_ptr.132" = type { %"class.std::__1::__compressed_pair.133" }
%"class.std::__1::__compressed_pair.133" = type { %"struct.std::__1::__compressed_pair_elem.134" }
%"struct.std::__1::__compressed_pair_elem.134" = type { %"class.v8::internal::GCTracer"* }
%"class.v8::internal::GCTracer" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::GCTracer::Event", %"class.v8::internal::GCTracer::Event", i64, double, double, double, double, double, [10 x %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"], double, i64, i64, i64, double, i64, i64, i64, double, i32, double, double, double, double, %"class.v8::base::RingBuffer", %"class.v8::base::RingBuffer", %"class.v8::base::RingBuffer", %"class.v8::base::RingBuffer", %"class.v8::base::RingBuffer", %"class.v8::base::RingBuffer", %"class.v8::base::RingBuffer", %"class.v8::base::RingBuffer", %"class.v8::base::RingBuffer.136", %"class.v8::base::Mutex", [124 x %"struct.v8::internal::GCTracer::BackgroundCounter"] }
%"class.v8::internal::GCTracer::Event" = type { i32, i32, i8*, double, double, i8, i64, i64, i64, i64, i64, i64, i64, i64, i64, double, [124 x double], [10 x %"struct.v8::internal::GCTracer::IncrementalMarkingInfos"] }
%"struct.v8::internal::GCTracer::IncrementalMarkingInfos" = type <{ double, double, i32, [4 x i8] }>
%"class.v8::base::RingBuffer" = type { [10 x %"struct.std::__1::pair.135"], i32, i32 }
%"struct.std::__1::pair.135" = type { i64, double }
%"class.v8::base::RingBuffer.136" = type { [10 x double], i32, i32 }
%"struct.v8::internal::GCTracer::BackgroundCounter" = type { double }
%"class.std::__1::unique_ptr.140" = type { %"class.std::__1::__compressed_pair.141" }
%"class.std::__1::__compressed_pair.141" = type { %"struct.std::__1::__compressed_pair_elem.142" }
%"struct.std::__1::__compressed_pair_elem.142" = type { %"class.v8::internal::MarkCompactCollector"* }
%"class.v8::internal::MarkCompactCollector" = type <{ %"class.v8::internal::MarkCompactCollectorBase", %"class.v8::base::Mutex", %"class.v8::base::Semaphore", i8, i8, i8, i8, i8, i8, [2 x i8], %"class.v8::internal::MarkingWorklists", %"class.v8::internal::WeakObjects", %"struct.v8::internal::EphemeronMarking", %"class.std::__1::unique_ptr.182", %"class.std::__1::unique_ptr.188", %"class.v8::internal::NativeContextInferrer", [7 x i8], %"class.v8::internal::NativeContextStats", %"class.std::__1::vector.242", %"class.std::__1::vector.242", %"class.std::__1::vector.242", %"class.std::__1::vector.249", %"class.v8::internal::Sweeper"*, %"class.v8::internal::MajorMarkingState", %"class.v8::internal::MajorNonAtomicMarkingState", [2 x i8], i32, i32, [4 x i8] }>
%"class.v8::internal::MarkCompactCollectorBase" = type { i32 (...)**, %"class.v8::internal::Heap"* }
%"class.v8::base::Semaphore" = type { %union.sem_t }
%union.sem_t = type { i64, [24 x i8] }
%"class.v8::internal::MarkingWorklists" = type { %"class.heap::base::Worklist", %"class.heap::base::Worklist", %"class.heap::base::Worklist.143", %"class.std::__1::vector.144", %"class.std::__1::vector.151", %"class.heap::base::Worklist" }
%"class.heap::base::Worklist.143" = type { %"class.v8::base::Mutex", %"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Segment"*, %"struct.std::__1::atomic" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Segment" = type { %"class.heap::base::internal::SegmentBase", %"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Segment"*, [16 x %"class.v8::internal::HeapObject"] }
%"class.heap::base::internal::SegmentBase" = type { i16, i16 }
%"class.std::__1::vector.144" = type { %"class.std::__1::__vector_base.145" }
%"class.std::__1::__vector_base.145" = type { %"struct.v8::internal::ContextWorklistPair"*, %"struct.v8::internal::ContextWorklistPair"*, %"class.std::__1::__compressed_pair.146" }
%"struct.v8::internal::ContextWorklistPair" = type { i64, %"class.heap::base::Worklist"* }
%"class.std::__1::__compressed_pair.146" = type { %"struct.std::__1::__compressed_pair_elem.147" }
%"struct.std::__1::__compressed_pair_elem.147" = type { %"struct.v8::internal::ContextWorklistPair"* }
%"class.std::__1::vector.151" = type { %"class.std::__1::__vector_base.152" }
%"class.std::__1::__vector_base.152" = type { %"class.std::__1::unique_ptr.153"*, %"class.std::__1::unique_ptr.153"*, %"class.std::__1::__compressed_pair.154" }
%"class.std::__1::unique_ptr.153" = type opaque
%"class.std::__1::__compressed_pair.154" = type { %"struct.std::__1::__compressed_pair_elem.155" }
%"struct.std::__1::__compressed_pair_elem.155" = type { %"class.std::__1::unique_ptr.153"* }
%"class.heap::base::Worklist" = type { %"class.v8::base::Mutex", %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Segment" = type { %"class.heap::base::internal::SegmentBase", %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Segment"*, [64 x %"class.v8::internal::HeapObject"] }
%"class.v8::internal::WeakObjects" = type { %"class.v8::internal::Worklist", %"class.v8::internal::Worklist.159", %"class.v8::internal::Worklist.161", %"class.v8::internal::Worklist.161", %"class.v8::internal::Worklist.161", %"class.v8::internal::Worklist.163", %"class.v8::internal::Worklist.165", %"class.v8::internal::Worklist.167", %"class.v8::internal::Worklist.169", %"class.v8::internal::Worklist.171", %"class.v8::internal::Worklist.173" }
%"class.v8::internal::Worklist" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::TransitionArray, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::TransitionArray, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment" = type { %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, i64, [64 x %"class.v8::internal::TransitionArray"] }
%"class.v8::internal::TransitionArray" = type { %"class.v8::internal::WeakFixedArray" }
%"class.v8::internal::WeakFixedArray" = type { %"class.v8::internal::TorqueGeneratedWeakFixedArray" }
%"class.v8::internal::TorqueGeneratedWeakFixedArray" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.159" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.161" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::Ephemeron, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::Ephemeron, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.163" = type <{ [8 x %"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.165" = type <{ [8 x %"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.167" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.169" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::WeakCell, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::WeakCell, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.171" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.173" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::JSFunction, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::JSFunction, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, %"struct.std::__1::atomic" }
%"struct.v8::internal::EphemeronMarking" = type { %"class.std::__1::vector.175", i8, i64 }
%"class.std::__1::vector.175" = type { %"class.std::__1::__vector_base.176" }
%"class.std::__1::__vector_base.176" = type { %"class.v8::internal::HeapObject"*, %"class.v8::internal::HeapObject"*, %"class.std::__1::__compressed_pair.177" }
%"class.std::__1::__compressed_pair.177" = type { %"struct.std::__1::__compressed_pair_elem.178" }
%"struct.std::__1::__compressed_pair_elem.178" = type { %"class.v8::internal::HeapObject"* }
%"class.std::__1::unique_ptr.182" = type { %"class.std::__1::__compressed_pair.183" }
%"class.std::__1::__compressed_pair.183" = type { %"struct.std::__1::__compressed_pair_elem.184" }
%"struct.std::__1::__compressed_pair_elem.184" = type { %"class.v8::internal::MainMarkingVisitor"* }
%"class.v8::internal::MainMarkingVisitor" = type opaque
%"class.std::__1::unique_ptr.188" = type { %"class.std::__1::__compressed_pair.189" }
%"class.std::__1::__compressed_pair.189" = type { %"struct.std::__1::__compressed_pair_elem.190" }
%"struct.std::__1::__compressed_pair_elem.190" = type { %"class.v8::internal::MarkingWorklists::Local"* }
%"class.v8::internal::MarkingWorklists::Local" = type { %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local", %"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Local", %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local", i64, %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local"*, i8, [7 x i8], %"class.std::__1::unordered_map.191" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Local" = type { %"class.heap::base::Worklist.143"*, %"class.heap::base::internal::SegmentBase"*, %"class.heap::base::internal::SegmentBase"* }
%"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local" = type { %"class.heap::base::Worklist"*, %"class.heap::base::internal::SegmentBase"*, %"class.heap::base::internal::SegmentBase"* }
%"class.std::__1::unordered_map.191" = type { %"class.std::__1::__hash_table.192" }
%"class.std::__1::__hash_table.192" = type <{ %"class.std::__1::unique_ptr.193", %"class.std::__1::__compressed_pair.203", %"class.std::__1::__compressed_pair.208", %"class.std::__1::__compressed_pair.211", [4 x i8] }>
%"class.std::__1::unique_ptr.193" = type { %"class.std::__1::__compressed_pair.194" }
%"class.std::__1::__compressed_pair.194" = type { %"struct.std::__1::__compressed_pair_elem.195", %"struct.std::__1::__compressed_pair_elem.197" }
%"struct.std::__1::__compressed_pair_elem.195" = type { %"struct.std::__1::__hash_node_base.196"** }
%"struct.std::__1::__hash_node_base.196" = type { %"struct.std::__1::__hash_node_base.196"* }
%"struct.std::__1::__compressed_pair_elem.197" = type { %"class.std::__1::__bucket_list_deallocator.198" }
%"class.std::__1::__bucket_list_deallocator.198" = type { %"class.std::__1::__compressed_pair.199" }
%"class.std::__1::__compressed_pair.199" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.203" = type { %"struct.std::__1::__compressed_pair_elem.204" }
%"struct.std::__1::__compressed_pair_elem.204" = type { %"struct.std::__1::__hash_node_base.196" }
%"class.std::__1::__compressed_pair.208" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.211" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.v8::internal::NativeContextInferrer" = type { i8 }
%"class.v8::internal::NativeContextStats" = type { %"class.std::__1::unordered_map.218" }
%"class.std::__1::unordered_map.218" = type { %"class.std::__1::__hash_table.219" }
%"class.std::__1::__hash_table.219" = type <{ %"class.std::__1::unique_ptr.220", %"class.std::__1::__compressed_pair.230", %"class.std::__1::__compressed_pair.235", %"class.std::__1::__compressed_pair.238", [4 x i8] }>
%"class.std::__1::unique_ptr.220" = type { %"class.std::__1::__compressed_pair.221" }
%"class.std::__1::__compressed_pair.221" = type { %"struct.std::__1::__compressed_pair_elem.222", %"struct.std::__1::__compressed_pair_elem.224" }
%"struct.std::__1::__compressed_pair_elem.222" = type { %"struct.std::__1::__hash_node_base.223"** }
%"struct.std::__1::__hash_node_base.223" = type { %"struct.std::__1::__hash_node_base.223"* }
%"struct.std::__1::__compressed_pair_elem.224" = type { %"class.std::__1::__bucket_list_deallocator.225" }
%"class.std::__1::__bucket_list_deallocator.225" = type { %"class.std::__1::__compressed_pair.226" }
%"class.std::__1::__compressed_pair.226" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.230" = type { %"struct.std::__1::__compressed_pair_elem.231" }
%"struct.std::__1::__compressed_pair_elem.231" = type { %"struct.std::__1::__hash_node_base.223" }
%"class.std::__1::__compressed_pair.235" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.238" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.std::__1::vector.242" = type { %"class.std::__1::__vector_base.243" }
%"class.std::__1::__vector_base.243" = type { %"class.v8::internal::Page"**, %"class.v8::internal::Page"**, %"class.std::__1::__compressed_pair.244" }
%"class.std::__1::__compressed_pair.244" = type { %"struct.std::__1::__compressed_pair_elem.245" }
%"struct.std::__1::__compressed_pair_elem.245" = type { %"class.v8::internal::Page"** }
%"class.std::__1::vector.249" = type { %"class.std::__1::__vector_base.250" }
%"class.std::__1::__vector_base.250" = type { %"struct.std::__1::pair.251"*, %"struct.std::__1::pair.251"*, %"class.std::__1::__compressed_pair.252" }
%"struct.std::__1::pair.251" = type opaque
%"class.std::__1::__compressed_pair.252" = type { %"struct.std::__1::__compressed_pair_elem.253" }
%"struct.std::__1::__compressed_pair_elem.253" = type { %"struct.std::__1::pair.251"* }
%"class.v8::internal::Sweeper" = type <{ %"class.v8::internal::Heap"*, %"class.v8::internal::MajorNonAtomicMarkingState"*, %"class.std::__1::unique_ptr.257", %"class.v8::base::Mutex", [3 x %"class.std::__1::vector.242"], [3 x %"class.std::__1::vector.242"], i8, %"struct.std::__1::atomic.112", [6 x i8], %"class.std::__1::vector.242", i64, %"class.v8::base::Semaphore", i8, i8, i8, [5 x i8] }>
%"class.std::__1::unique_ptr.257" = type { %"class.std::__1::__compressed_pair.258" }
%"class.std::__1::__compressed_pair.258" = type { %"struct.std::__1::__compressed_pair_elem.259" }
%"struct.std::__1::__compressed_pair_elem.259" = type { %"class.v8::JobHandle"* }
%"class.v8::JobHandle" = type { i32 (...)** }
%"class.v8::internal::MajorMarkingState" = type { i8 }
%"class.v8::internal::MajorNonAtomicMarkingState" = type { i8 }
%"class.v8::internal::MinorMarkCompactCollector" = type <{ %"class.v8::internal::MarkCompactCollectorBase", %"class.v8::internal::Worklist.267"*, %"class.v8::internal::YoungGenerationMarkingVisitor"*, %"class.v8::base::Semaphore", %"class.std::__1::vector.242", %"class.std::__1::vector.242", %"class.v8::internal::MinorMarkingState", %"class.v8::internal::MinorNonAtomicMarkingState", [6 x i8] }>
%"class.v8::internal::Worklist.267" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::HeapObject, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::HeapObject, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::HeapObject, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::HeapObject, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::HeapObject, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::HeapObject, 64>::Segment" = type { %"class.v8::internal::Worklist<v8::internal::HeapObject, 64>::Segment"*, i64, [64 x %"class.v8::internal::HeapObject"] }
%"class.v8::internal::Worklist<v8::internal::HeapObject, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::HeapObject, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::YoungGenerationMarkingVisitor" = type opaque
%"class.v8::internal::MinorMarkingState" = type { i8 }
%"class.v8::internal::MinorNonAtomicMarkingState" = type { i8 }
%"class.std::__1::unique_ptr.271" = type { %"class.std::__1::__compressed_pair.272" }
%"class.std::__1::__compressed_pair.272" = type { %"struct.std::__1::__compressed_pair_elem.273" }
%"struct.std::__1::__compressed_pair_elem.273" = type { %"class.v8::internal::ScavengerCollector"* }
%"class.v8::internal::ScavengerCollector" = type opaque
%"class.std::__1::unique_ptr.277" = type { %"class.std::__1::__compressed_pair.278" }
%"class.std::__1::__compressed_pair.278" = type { %"struct.std::__1::__compressed_pair_elem.279" }
%"struct.std::__1::__compressed_pair_elem.279" = type { %"class.v8::internal::ArrayBufferSweeper"* }
%"class.v8::internal::ArrayBufferSweeper" = type opaque
%"class.std::__1::unique_ptr.283" = type { %"class.std::__1::__compressed_pair.284" }
%"class.std::__1::__compressed_pair.284" = type { %"struct.std::__1::__compressed_pair_elem.285" }
%"struct.std::__1::__compressed_pair_elem.285" = type { %"class.v8::internal::MemoryAllocator"* }
%"class.v8::internal::MemoryAllocator" = type { %"class.v8::internal::Isolate"*, %"class.v8::PageAllocator"*, %"class.v8::PageAllocator"*, i64, %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"class.v8::internal::VirtualMemory", %"class.v8::internal::MemoryAllocator::Unmapper", %"class.std::__1::unordered_set.293", %"class.v8::base::Mutex" }
%"class.v8::internal::MemoryAllocator::Unmapper" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::MemoryAllocator"*, %"class.v8::base::Mutex", [3 x %"class.std::__1::vector.286"], %"class.std::__1::unique_ptr.257" }
%"class.std::__1::vector.286" = type { %"class.std::__1::__vector_base.287" }
%"class.std::__1::__vector_base.287" = type { %"class.v8::internal::MemoryChunk"**, %"class.v8::internal::MemoryChunk"**, %"class.std::__1::__compressed_pair.288" }
%"class.std::__1::__compressed_pair.288" = type { %"struct.std::__1::__compressed_pair_elem.289" }
%"struct.std::__1::__compressed_pair_elem.289" = type { %"class.v8::internal::MemoryChunk"** }
%"class.std::__1::unique_ptr.322" = type { %"class.std::__1::__compressed_pair.323" }
%"class.std::__1::__compressed_pair.323" = type { %"struct.std::__1::__compressed_pair_elem.324" }
%"struct.std::__1::__compressed_pair_elem.324" = type { %"class.v8::internal::IncrementalMarking"* }
%"class.v8::internal::IncrementalMarking" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::MarkCompactCollector"*, %"class.v8::internal::WeakObjects"*, double, double, i64, i64, i64, i64, double, i64, %"struct.std::__1::atomic.325", i8, i8, i8, i8, [3 x i8], %"class.v8::internal::IncrementalMarkingJob", %"struct.std::__1::atomic.329", %"class.v8::internal::IncrementalMarking::Observer", %"class.v8::internal::IncrementalMarking::Observer", %"class.v8::internal::MajorMarkingState", %"class.v8::internal::MajorAtomicMarkingState", %"class.v8::internal::MajorNonAtomicMarkingState", %"class.v8::base::Mutex", %"class.std::__1::unordered_map.334" }
%"struct.std::__1::atomic.325" = type { %"struct.std::__1::__atomic_base.326" }
%"struct.std::__1::__atomic_base.326" = type { %"struct.std::__1::__cxx_atomic_impl.327" }
%"struct.std::__1::__cxx_atomic_impl.327" = type { %"struct.std::__1::__cxx_atomic_base_impl.328" }
%"struct.std::__1::__cxx_atomic_base_impl.328" = type { i8 }
%"class.v8::internal::IncrementalMarkingJob" = type <{ %"class.v8::base::Mutex", double, i8, i8, [6 x i8] }>
%"struct.std::__1::atomic.329" = type { %"struct.std::__1::__atomic_base.330" }
%"struct.std::__1::__atomic_base.330" = type { %"struct.std::__1::__cxx_atomic_impl.331" }
%"struct.std::__1::__cxx_atomic_impl.331" = type { %"struct.std::__1::__cxx_atomic_base_impl.332" }
%"struct.std::__1::__cxx_atomic_base_impl.332" = type { i32 }
%"class.v8::internal::IncrementalMarking::Observer" = type { %"class.v8::internal::AllocationObserver", %"class.v8::internal::IncrementalMarking"* }
%"class.v8::internal::MajorAtomicMarkingState" = type { i8 }
%"class.std::__1::unordered_map.334" = type { %"class.std::__1::__hash_table.335" }
%"class.std::__1::__hash_table.335" = type <{ %"class.std::__1::unique_ptr.336", %"class.std::__1::__compressed_pair.346", %"class.std::__1::__compressed_pair.351", %"class.std::__1::__compressed_pair.354", [4 x i8] }>
%"class.std::__1::unique_ptr.336" = type { %"class.std::__1::__compressed_pair.337" }
%"class.std::__1::__compressed_pair.337" = type { %"struct.std::__1::__compressed_pair_elem.338", %"struct.std::__1::__compressed_pair_elem.340" }
%"struct.std::__1::__compressed_pair_elem.338" = type { %"struct.std::__1::__hash_node_base.339"** }
%"struct.std::__1::__hash_node_base.339" = type { %"struct.std::__1::__hash_node_base.339"* }
%"struct.std::__1::__compressed_pair_elem.340" = type { %"class.std::__1::__bucket_list_deallocator.341" }
%"class.std::__1::__bucket_list_deallocator.341" = type { %"class.std::__1::__compressed_pair.342" }
%"class.std::__1::__compressed_pair.342" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.346" = type { %"struct.std::__1::__compressed_pair_elem.347" }
%"struct.std::__1::__compressed_pair_elem.347" = type { %"struct.std::__1::__hash_node_base.339" }
%"class.std::__1::__compressed_pair.351" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.354" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.std::__1::unique_ptr.361" = type { %"class.std::__1::__compressed_pair.362" }
%"class.std::__1::__compressed_pair.362" = type { %"struct.std::__1::__compressed_pair_elem.363" }
%"struct.std::__1::__compressed_pair_elem.363" = type { %"class.v8::internal::ConcurrentMarking"* }
%"class.v8::internal::ConcurrentMarking" = type <{ %"class.std::__1::unique_ptr.257", %"class.v8::internal::Heap"*, %"class.v8::internal::MarkingWorklists"*, %"class.v8::internal::WeakObjects"*, [8 x %"struct.v8::internal::ConcurrentMarking::TaskState"], %"struct.std::__1::atomic", %"struct.std::__1::atomic.112", [7 x i8] }>
%"struct.v8::internal::ConcurrentMarking::TaskState" = type { i64, %"class.std::__1::unordered_map.364", %"class.v8::internal::NativeContextInferrer", [7 x i8], %"class.v8::internal::NativeContextStats", [64 x i8] }
%"class.std::__1::unordered_map.364" = type { %"class.std::__1::__hash_table.365" }
%"class.std::__1::__hash_table.365" = type <{ %"class.std::__1::unique_ptr.366", %"class.std::__1::__compressed_pair.376", %"class.std::__1::__compressed_pair.381", %"class.std::__1::__compressed_pair.384", [4 x i8] }>
%"class.std::__1::unique_ptr.366" = type { %"class.std::__1::__compressed_pair.367" }
%"class.std::__1::__compressed_pair.367" = type { %"struct.std::__1::__compressed_pair_elem.368", %"struct.std::__1::__compressed_pair_elem.370" }
%"struct.std::__1::__compressed_pair_elem.368" = type { %"struct.std::__1::__hash_node_base.369"** }
%"struct.std::__1::__hash_node_base.369" = type { %"struct.std::__1::__hash_node_base.369"* }
%"struct.std::__1::__compressed_pair_elem.370" = type { %"class.std::__1::__bucket_list_deallocator.371" }
%"class.std::__1::__bucket_list_deallocator.371" = type { %"class.std::__1::__compressed_pair.372" }
%"class.std::__1::__compressed_pair.372" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.376" = type { %"struct.std::__1::__compressed_pair_elem.377" }
%"struct.std::__1::__compressed_pair_elem.377" = type { %"struct.std::__1::__hash_node_base.369" }
%"class.std::__1::__compressed_pair.381" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.384" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.std::__1::unique_ptr.391" = type { %"class.std::__1::__compressed_pair.392" }
%"class.std::__1::__compressed_pair.392" = type { %"struct.std::__1::__compressed_pair_elem.393" }
%"struct.std::__1::__compressed_pair_elem.393" = type { %"class.v8::internal::GCIdleTimeHandler"* }
%"class.v8::internal::GCIdleTimeHandler" = type opaque
%"class.std::__1::unique_ptr.397" = type { %"class.std::__1::__compressed_pair.398" }
%"class.std::__1::__compressed_pair.398" = type { %"struct.std::__1::__compressed_pair_elem.399" }
%"struct.std::__1::__compressed_pair_elem.399" = type { %"class.v8::internal::MemoryMeasurement"* }
%"class.v8::internal::MemoryMeasurement" = type { %"class.std::__1::list", %"class.std::__1::list", %"class.std::__1::list", %"class.v8::internal::Isolate"*, i8, i8, i8, %"class.v8::base::RandomNumberGenerator" }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.400" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.400" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::unique_ptr.407" = type { %"class.std::__1::__compressed_pair.408" }
%"class.std::__1::__compressed_pair.408" = type { %"struct.std::__1::__compressed_pair_elem.409" }
%"struct.std::__1::__compressed_pair_elem.409" = type { %"class.v8::internal::MemoryReducer"* }
%"class.v8::internal::MemoryReducer" = type opaque
%"class.std::__1::unique_ptr.413" = type { %"class.std::__1::__compressed_pair.414" }
%"class.std::__1::__compressed_pair.414" = type { %"struct.std::__1::__compressed_pair_elem.415" }
%"struct.std::__1::__compressed_pair_elem.415" = type { %"class.v8::internal::ObjectStats"* }
%"class.v8::internal::ObjectStats" = type opaque
%"class.std::__1::unique_ptr.419" = type { %"class.std::__1::__compressed_pair.420" }
%"class.std::__1::__compressed_pair.420" = type { %"struct.std::__1::__compressed_pair_elem.421" }
%"struct.std::__1::__compressed_pair_elem.421" = type { %"class.v8::internal::ScavengeJob"* }
%"class.v8::internal::ScavengeJob" = type opaque
%"class.std::__1::unique_ptr.425" = type { %"class.std::__1::__compressed_pair.426" }
%"class.std::__1::__compressed_pair.426" = type { %"struct.std::__1::__compressed_pair_elem.427" }
%"struct.std::__1::__compressed_pair_elem.427" = type { %"class.v8::internal::AllocationObserver"* }
%"class.std::__1::unique_ptr.431" = type { %"class.std::__1::__compressed_pair.432" }
%"class.std::__1::__compressed_pair.432" = type { %"struct.std::__1::__compressed_pair_elem.433" }
%"struct.std::__1::__compressed_pair_elem.433" = type { %"class.v8::internal::LocalEmbedderHeapTracer"* }
%"class.v8::internal::LocalEmbedderHeapTracer" = type <{ %"class.v8::internal::Isolate"*, %"class.v8::EmbedderHeapTracer"*, %"class.v8::internal::DefaultEmbedderRootsHandler", i32, i8, [3 x i8], %"struct.v8::internal::LocalEmbedderHeapTracer::RemoteStatistics", %"struct.v8::WrapperDescriptor", [4 x i8] }>
%"class.v8::EmbedderHeapTracer" = type { i32 (...)**, %"class.v8::Isolate"* }
%"class.v8::internal::DefaultEmbedderRootsHandler" = type { %"class.v8::EmbedderRootsHandler", %"class.v8::EmbedderHeapTracer"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.v8::internal::LocalEmbedderHeapTracer::RemoteStatistics" = type { i64, i64, i64 }
%"struct.v8::WrapperDescriptor" = type <{ i32, i32, i16, [2 x i8] }>
%"class.std::__1::unique_ptr.437" = type { %"class.std::__1::__compressed_pair.438" }
%"class.std::__1::__compressed_pair.438" = type { %"struct.std::__1::__compressed_pair_elem.439" }
%"struct.std::__1::__compressed_pair_elem.439" = type { %"class.v8::internal::MarkingBarrier"* }
%"class.v8::internal::MarkingBarrier" = type opaque
%"class.std::__1::shared_ptr.443" = type { %"class.v8::internal::CodeRange"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::CodeRange" = type { %"class.v8::internal::VirtualMemoryCage", %"struct.std::__1::atomic.461", %"class.v8::base::Mutex" }
%"class.v8::internal::VirtualMemoryCage" = type { i32 (...)**, i64, %"class.std::__1::unique_ptr.444", %"class.v8::internal::VirtualMemory" }
%"struct.std::__1::atomic.461" = type { %"struct.std::__1::__atomic_base.462" }
%"struct.std::__1::__atomic_base.462" = type { %"struct.std::__1::__cxx_atomic_impl.463" }
%"struct.std::__1::__cxx_atomic_impl.463" = type { %"struct.std::__1::__cxx_atomic_base_impl.464" }
%"struct.std::__1::__cxx_atomic_base_impl.464" = type { i8* }
%"class.v8::CppHeap" = type { i32 (...)** }
%"class.v8::internal::StrongRootsEntry" = type { %"class.v8::internal::FullObjectSlot", %"class.v8::internal::FullObjectSlot", %"class.v8::internal::StrongRootsEntry"*, %"class.v8::internal::StrongRootsEntry"* }
%"class.v8::internal::FullObjectSlot" = type { %"class.v8::internal::SlotBase" }
%"class.v8::internal::SlotBase" = type { i64 }
%"class.std::__1::unordered_map.465" = type { %"class.std::__1::__hash_table.466" }
%"class.std::__1::__hash_table.466" = type <{ %"class.std::__1::unique_ptr.467", %"class.std::__1::__compressed_pair.477", %"class.std::__1::__compressed_pair.482", %"class.std::__1::__compressed_pair.485", [4 x i8] }>
%"class.std::__1::unique_ptr.467" = type { %"class.std::__1::__compressed_pair.468" }
%"class.std::__1::__compressed_pair.468" = type { %"struct.std::__1::__compressed_pair_elem.469", %"struct.std::__1::__compressed_pair_elem.471" }
%"struct.std::__1::__compressed_pair_elem.469" = type { %"struct.std::__1::__hash_node_base.470"** }
%"struct.std::__1::__hash_node_base.470" = type { %"struct.std::__1::__hash_node_base.470"* }
%"struct.std::__1::__compressed_pair_elem.471" = type { %"class.std::__1::__bucket_list_deallocator.472" }
%"class.std::__1::__bucket_list_deallocator.472" = type { %"class.std::__1::__compressed_pair.473" }
%"class.std::__1::__compressed_pair.473" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.477" = type { %"struct.std::__1::__compressed_pair_elem.478" }
%"struct.std::__1::__compressed_pair_elem.478" = type { %"struct.std::__1::__hash_node_base.470" }
%"class.std::__1::__compressed_pair.482" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.485" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.std::__1::unique_ptr.491" = type { %"class.std::__1::__compressed_pair.492" }
%"class.std::__1::__compressed_pair.492" = type { %"struct.std::__1::__compressed_pair_elem.493" }
%"struct.std::__1::__compressed_pair_elem.493" = type { %"class.v8::internal::GlobalHandleVector"* }
%"class.v8::internal::GlobalHandleVector" = type opaque
%"class.std::__1::unique_ptr.497" = type { %"class.std::__1::__compressed_pair.498" }
%"class.std::__1::__compressed_pair.498" = type { %"struct.std::__1::__compressed_pair_elem.499" }
%"struct.std::__1::__compressed_pair_elem.499" = type { %"class.v8::internal::GlobalSafepoint"* }
%"class.v8::internal::GlobalSafepoint" = type <{ %"class.v8::internal::GlobalSafepoint::Barrier", %"class.v8::internal::Heap"*, %"class.v8::base::Mutex", %"class.v8::internal::LocalHeap"*, i32, [4 x i8] }>
%"class.v8::internal::GlobalSafepoint::Barrier" = type { %"class.v8::base::Mutex", %"class.v8::base::ConditionVariable", %"class.v8::base::ConditionVariable", i8, i32 }
%"class.v8::internal::Heap::ExternalStringTable" = type { %"class.v8::internal::Heap"*, %"class.std::__1::vector.505", %"class.std::__1::vector.505" }
%"class.std::__1::unique_ptr.512" = type { %"class.std::__1::__compressed_pair.513" }
%"class.std::__1::__compressed_pair.513" = type { %"struct.std::__1::__compressed_pair_elem.514" }
%"struct.std::__1::__compressed_pair_elem.514" = type { %"class.v8::internal::CollectionBarrier"* }
%"class.v8::internal::CollectionBarrier" = type opaque
%"class.v8::internal::HeapObject" = type { %"class.v8::internal::Object" }
%"class.v8::base::SharedMutex" = type { %union.pthread_rwlock_t }
%union.pthread_rwlock_t = type { %struct.__pthread_rwlock_arch_t }
%struct.__pthread_rwlock_arch_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i8, [7 x i8], i64, i32 }
%"class.v8::base::Mutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set.293" = type { %"class.std::__1::__hash_table.294" }
%"class.std::__1::__hash_table.294" = type <{ %"class.std::__1::unique_ptr.295", %"class.std::__1::__compressed_pair.305", %"class.std::__1::__compressed_pair.310", %"class.std::__1::__compressed_pair.314", [4 x i8] }>
%"class.std::__1::unique_ptr.295" = type { %"class.std::__1::__compressed_pair.296" }
%"class.std::__1::__compressed_pair.296" = type { %"struct.std::__1::__compressed_pair_elem.297", %"struct.std::__1::__compressed_pair_elem.299" }
%"struct.std::__1::__compressed_pair_elem.297" = type { %"struct.std::__1::__hash_node_base.298"** }
%"struct.std::__1::__hash_node_base.298" = type { %"struct.std::__1::__hash_node_base.298"* }
%"struct.std::__1::__compressed_pair_elem.299" = type { %"class.std::__1::__bucket_list_deallocator.300" }
%"class.std::__1::__bucket_list_deallocator.300" = type { %"class.std::__1::__compressed_pair.301" }
%"class.std::__1::__compressed_pair.301" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.305" = type { %"struct.std::__1::__compressed_pair_elem.306" }
%"struct.std::__1::__compressed_pair_elem.306" = type { %"struct.std::__1::__hash_node_base.298" }
%"class.std::__1::__compressed_pair.310" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.314" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.std::__1::unordered_map.544" = type { %"class.std::__1::__hash_table.545" }
%"class.std::__1::__hash_table.545" = type <{ %"class.std::__1::unique_ptr.546", %"class.std::__1::__compressed_pair.556", %"class.std::__1::__compressed_pair.561", %"class.std::__1::__compressed_pair.564", [4 x i8] }>
%"class.std::__1::unique_ptr.546" = type { %"class.std::__1::__compressed_pair.547" }
%"class.std::__1::__compressed_pair.547" = type { %"struct.std::__1::__compressed_pair_elem.548", %"struct.std::__1::__compressed_pair_elem.550" }
%"struct.std::__1::__compressed_pair_elem.548" = type { %"struct.std::__1::__hash_node_base.549"** }
%"struct.std::__1::__hash_node_base.549" = type { %"struct.std::__1::__hash_node_base.549"* }
%"struct.std::__1::__compressed_pair_elem.550" = type { %"class.std::__1::__bucket_list_deallocator.551" }
%"class.std::__1::__bucket_list_deallocator.551" = type { %"class.std::__1::__compressed_pair.552" }
%"class.std::__1::__compressed_pair.552" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.556" = type { %"struct.std::__1::__compressed_pair_elem.557" }
%"struct.std::__1::__compressed_pair_elem.557" = type { %"struct.std::__1::__hash_node_base.549" }
%"class.std::__1::__compressed_pair.561" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.564" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.std::__1::unordered_map.518" = type { %"class.std::__1::__hash_table.519" }
%"class.std::__1::__hash_table.519" = type <{ %"class.std::__1::unique_ptr.520", %"class.std::__1::__compressed_pair.530", %"class.std::__1::__compressed_pair.535", %"class.std::__1::__compressed_pair.538", [4 x i8] }>
%"class.std::__1::unique_ptr.520" = type { %"class.std::__1::__compressed_pair.521" }
%"class.std::__1::__compressed_pair.521" = type { %"struct.std::__1::__compressed_pair_elem.522", %"struct.std::__1::__compressed_pair_elem.524" }
%"struct.std::__1::__compressed_pair_elem.522" = type { %"struct.std::__1::__hash_node_base.523"** }
%"struct.std::__1::__hash_node_base.523" = type { %"struct.std::__1::__hash_node_base.523"* }
%"struct.std::__1::__compressed_pair_elem.524" = type { %"class.std::__1::__bucket_list_deallocator.525" }
%"class.std::__1::__bucket_list_deallocator.525" = type { %"class.std::__1::__compressed_pair.526" }
%"class.std::__1::__compressed_pair.526" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.530" = type { %"struct.std::__1::__compressed_pair_elem.531" }
%"struct.std::__1::__compressed_pair_elem.531" = type { %"struct.std::__1::__hash_node_base.523" }
%"class.std::__1::__compressed_pair.535" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.538" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.std::__1::unordered_map.568" = type { %"class.std::__1::__hash_table.569" }
%"class.std::__1::__hash_table.569" = type <{ %"class.std::__1::unique_ptr.570", %"class.std::__1::__compressed_pair.580", %"class.std::__1::__compressed_pair.585", %"class.std::__1::__compressed_pair.590", [4 x i8] }>
%"class.std::__1::unique_ptr.570" = type { %"class.std::__1::__compressed_pair.571" }
%"class.std::__1::__compressed_pair.571" = type { %"struct.std::__1::__compressed_pair_elem.572", %"struct.std::__1::__compressed_pair_elem.574" }
%"struct.std::__1::__compressed_pair_elem.572" = type { %"struct.std::__1::__hash_node_base.573"** }
%"struct.std::__1::__hash_node_base.573" = type { %"struct.std::__1::__hash_node_base.573"* }
%"struct.std::__1::__compressed_pair_elem.574" = type { %"class.std::__1::__bucket_list_deallocator.575" }
%"class.std::__1::__bucket_list_deallocator.575" = type { %"class.std::__1::__compressed_pair.576" }
%"class.std::__1::__compressed_pair.576" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.580" = type { %"struct.std::__1::__compressed_pair_elem.581" }
%"struct.std::__1::__compressed_pair_elem.581" = type { %"struct.std::__1::__hash_node_base.573" }
%"class.std::__1::__compressed_pair.585" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.590" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.std::__1::vector.596" = type { %"class.std::__1::__vector_base.597" }
%"class.std::__1::__vector_base.597" = type { %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.std::__1::__compressed_pair.598" }
%"class.std::__1::__compressed_pair.598" = type { %"struct.std::__1::__compressed_pair_elem.599" }
%"struct.std::__1::__compressed_pair_elem.599" = type { %"class.v8::internal::HeapObjectAllocationTracker"** }
%"class.std::__1::unique_ptr.603" = type { %"class.std::__1::__compressed_pair.604" }
%"class.std::__1::__compressed_pair.604" = type { %"struct.std::__1::__compressed_pair_elem.605" }
%"struct.std::__1::__compressed_pair_elem.605" = type { %"class.v8::internal::third_party_heap::Heap"* }
%"class.v8::internal::third_party_heap::Heap" = type { i8 }
%"class.v8::internal::SlotSet::Bucket" = type { [32 x i32] }
%"class.std::__1::tuple" = type { %"struct.std::__1::__tuple_impl" }
%"struct.std::__1::__tuple_impl" = type { %"class.std::__1::__tuple_leaf" }
%"class.std::__1::__tuple_leaf" = type { %"class.v8::internal::MemoryChunk"** }
%"class.std::__1::tuple.1152" = type { i8 }

$_ZN2v88internal9BaseSpace15CommittedMemoryEv = comdat any

$_ZN2v88internal9BaseSpace22MaximumCommittedMemoryEv = comdat any

$_ZN2v88internal5SpaceD2Ev = comdat any

$_ZN2v88internal5SpaceD0Ev = comdat any

$_ZN2v88internal5Space29StartNextInlineAllocationStepEv = comdat any

$_ZN2v88internal5Space13SizeOfObjectsEv = comdat any

$_ZN2v88internal5Space30RoundSizeDownToObjectAlignmentEi = comdat any

$_ZNK2v88internal5Space25ExternalBackingStoreBytesENS0_24ExternalBackingStoreTypeE = comdat any

$_ZN2v88internal19SpaceWithLinearAreaD0Ev = comdat any

$_ZNSt3__112__hash_tableINS_17__hash_value_typeIPN2v88internal11MemoryChunkElEENS_22__unordered_map_hasherIS5_S6_NS_4hashIS5_EENS_8equal_toIS5_EELb1EEENS_21__unordered_map_equalIS5_S6_SB_S9_Lb1EEENS_9allocatorIS6_EEE25__emplace_unique_key_argsIS5_JRKNS_21piecewise_construct_tENS_5tupleIJRKS5_EEENSM_IJEEEEEENS_4pairINS_15__hash_iteratorIPNS_11__hash_nodeIS6_PvEEEEbEERKT_DpOT0_ = comdat any

$_ZNSt3__112__hash_tableINS_17__hash_value_typeIPN2v88internal11MemoryChunkElEENS_22__unordered_map_hasherIS5_S6_NS_4hashIS5_EENS_8equal_toIS5_EELb1EEENS_21__unordered_map_equalIS5_S6_SB_S9_Lb1EEENS_9allocatorIS6_EEE6rehashEm = comdat any

$_ZNSt3__112__hash_tableINS_17__hash_value_typeIPN2v88internal11MemoryChunkElEENS_22__unordered_map_hasherIS5_S6_NS_4hashIS5_EENS_8equal_toIS5_EELb1EEENS_21__unordered_map_equalIS5_S6_SB_S9_Lb1EEENS_9allocatorIS6_EEE8__rehashEm = comdat any

@.str = private unnamed_addr constant [18 x i8] c"Check failed: %s.\00", align 1
@.str.1 = private unnamed_addr constant [32 x i8] c"(sweeping_slot_set_) == nullptr\00", align 1
@.str.2 = private unnamed_addr constant [35 x i8] c"(slot_set_[OLD_TO_NEW]) == nullptr\00", align 1
@.str.3 = private unnamed_addr constant [29 x i8] c"filler.IsFreeSpaceOrFiller()\00", align 1
@_ZN2v88internal21FLAG_trace_gc_verboseE = external local_unnamed_addr global i8, align 1
@.str.4 = private unnamed_addr constant [33 x i8] c"Shrinking page %p: end %p -> %p\0A\00", align 1
@.str.5 = private unnamed_addr constant [47 x i8] c"filler.address() + filler.Size() == area_end()\00", align 1
@.str.6 = private unnamed_addr constant [70 x i8] c"Allocations Origins for %s: GeneratedCode:%zu - Runtime:%zu - GC:%zu\0A\00", align 1
@_ZTVN2v88internal5SpaceE = hidden unnamed_addr constant { [18 x i8*] } { [18 x i8*] [i8* null, i8* null, i8* bitcast (i64 (%"class.v8::internal::BaseSpace"*)* @_ZN2v88internal9BaseSpace15CommittedMemoryEv to i8*), i8* bitcast (i64 (%"class.v8::internal::BaseSpace"*)* @_ZN2v88internal9BaseSpace22MaximumCommittedMemoryEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%"class.v8::internal::Space"*)* @_ZN2v88internal5SpaceD2Ev to i8*), i8* bitcast (void (%"class.v8::internal::Space"*)* @_ZN2v88internal5SpaceD0Ev to i8*), i8* bitcast (void (%"class.v8::internal::Space"*, %"class.v8::internal::AllocationObserver"*)* @_ZN2v88internal5Space21AddAllocationObserverEPNS0_18AllocationObserverE to i8*), i8* bitcast (void (%"class.v8::internal::Space"*, %"class.v8::internal::AllocationObserver"*)* @_ZN2v88internal5Space24RemoveAllocationObserverEPNS0_18AllocationObserverE to i8*), i8* bitcast (void (%"class.v8::internal::Space"*)* @_ZN2v88internal5Space24PauseAllocationObserversEv to i8*), i8* bitcast (void (%"class.v8::internal::Space"*)* @_ZN2v88internal5Space25ResumeAllocationObserversEv to i8*), i8* bitcast (void (%"class.v8::internal::Space"*)* @_ZN2v88internal5Space29StartNextInlineAllocationStepEv to i8*), i8* bitcast (i64 (%"class.v8::internal::Space"*)* @_ZN2v88internal5Space13SizeOfObjectsEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (i32 (%"class.v8::internal::Space"*, i32)* @_ZN2v88internal5Space30RoundSizeDownToObjectAlignmentEi to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (i64 (%"class.v8::internal::Space"*, i32)* @_ZNK2v88internal5Space25ExternalBackingStoreBytesENS0_24ExternalBackingStoreTypeE to i8*)] }, align 8
@_ZTVN2v88internal19SpaceWithLinearAreaE = hidden unnamed_addr constant { [20 x i8*] } { [20 x i8*] [i8* null, i8* null, i8* bitcast (i64 (%"class.v8::internal::BaseSpace"*)* @_ZN2v88internal9BaseSpace15CommittedMemoryEv to i8*), i8* bitcast (i64 (%"class.v8::internal::BaseSpace"*)* @_ZN2v88internal9BaseSpace22MaximumCommittedMemoryEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%"class.v8::internal::Space"*)* @_ZN2v88internal5SpaceD2Ev to i8*), i8* bitcast (void (%"class.v8::internal::SpaceWithLinearArea"*)* @_ZN2v88internal19SpaceWithLinearAreaD0Ev to i8*), i8* bitcast (void (%"class.v8::internal::SpaceWithLinearArea"*, %"class.v8::internal::AllocationObserver"*)* @_ZN2v88internal19SpaceWithLinearArea21AddAllocationObserverEPNS0_18AllocationObserverE to i8*), i8* bitcast (void (%"class.v8::internal::SpaceWithLinearArea"*, %"class.v8::internal::AllocationObserver"*)* @_ZN2v88internal19SpaceWithLinearArea24RemoveAllocationObserverEPNS0_18AllocationObserverE to i8*), i8* bitcast (void (%"class.v8::internal::SpaceWithLinearArea"*)* @_ZN2v88internal19SpaceWithLinearArea24PauseAllocationObserversEv to i8*), i8* bitcast (void (%"class.v8::internal::SpaceWithLinearArea"*)* @_ZN2v88internal19SpaceWithLinearArea25ResumeAllocationObserversEv to i8*), i8* bitcast (void (%"class.v8::internal::Space"*)* @_ZN2v88internal5Space29StartNextInlineAllocationStepEv to i8*), i8* bitcast (i64 (%"class.v8::internal::Space"*)* @_ZN2v88internal5Space13SizeOfObjectsEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (i32 (%"class.v8::internal::Space"*, i32)* @_ZN2v88internal5Space30RoundSizeDownToObjectAlignmentEi to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (i64 (%"class.v8::internal::Space"*, i32)* @_ZNK2v88internal5Space25ExternalBackingStoreBytesENS0_24ExternalBackingStoreTypeE to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8
@_ZNSt3__1L19piecewise_constructE = internal constant %"struct.std::__1::piecewise_construct_t" undef, align 1

@_ZN2v88internal21LocalAllocationBufferC1EPNS0_4HeapENS0_20LinearAllocationAreaE = hidden unnamed_addr alias void (%"class.v8::internal::LocalAllocationBuffer"*, %"class.v8::internal::Heap"*, %"class.v8::internal::LinearAllocationArea"*), void (%"class.v8::internal::LocalAllocationBuffer"*, %"class.v8::internal::Heap"*, %"class.v8::internal::LinearAllocationArea"*)* @_ZN2v88internal21LocalAllocationBufferC2EPNS0_4HeapENS0_20LinearAllocationAreaE
@_ZN2v88internal21LocalAllocationBufferC1EOS1_ = hidden unnamed_addr alias void (%"class.v8::internal::LocalAllocationBuffer"*, %"class.v8::internal::LocalAllocationBuffer"*), void (%"class.v8::internal::LocalAllocationBuffer"*, %"class.v8::internal::LocalAllocationBuffer"*)* @_ZN2v88internal21LocalAllocationBufferC2EOS1_

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal4Page26AllocateFreeListCategoriesEv(%"class.v8::internal::Page"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Page", %"class.v8::internal::Page"* %0, i64 0, i32 0, i32 0, i32 8, i32 0
  %3 = bitcast %"struct.std::__1::__atomic_base.610"* %2 to i64*
  %4 = load atomic i64, i64* %3 seq_cst, align 8
  %5 = inttoptr i64 %4 to %"class.v8::internal::Space"*
  %6 = getelementptr inbounds %"class.v8::internal::Space", %"class.v8::internal::Space"* %5, i64 0, i32 4, i32 0, i32 0, i32 0
  %7 = load %"class.v8::internal::FreeList"*, %"class.v8::internal::FreeList"** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::FreeList", %"class.v8::internal::FreeList"* %7, i64 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = sext i32 %9 to i64
  %11 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %10, i64 8)
  %12 = extractvalue { i64, i1 } %11, 1
  %13 = extractvalue { i64, i1 } %11, 0
  %14 = select i1 %12, i64 -1, i64 %13
  %15 = tail call i8* @_Znam(i64 %14) #12
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 0, i64 %14, i1 false)
  %16 = getelementptr inbounds %"class.v8::internal::Page", %"class.v8::internal::Page"* %0, i64 0, i32 0, i32 13
  %17 = bitcast %"class.v8::internal::FreeListCategory"*** %16 to i8**
  store i8* %15, i8** %17, align 8
  %18 = load atomic i64, i64* %3 seq_cst, align 8
  %19 = inttoptr i64 %18 to %"class.v8::internal::Space"*
  %20 = getelementptr inbounds %"class.v8::internal::Space", %"class.v8::internal::Space"* %19, i64 0, i32 4, i32 0, i32 0, i32 0
  %21 = load %"class.v8::internal::FreeList"*, %"class.v8::internal::FreeList"** %20, align 8
  %22 = getelementptr inbounds %"class.v8::internal::FreeList", %"class.v8::internal::FreeList"* %21, i64 0, i32 2
  %23 = load i32, i32* %22, align 4
  %24 = icmp slt i32 %23, 0
  br i1 %24, label %25, label %26

25:                                               ; preds = %26, %1
  ret void

26:                                               ; preds = %1, %26
  %27 = phi i64 [ %34, %26 ], [ 0, %1 ]
  %28 = tail call i8* @_Znwm(i64 32) #12
  %29 = bitcast i8* %28 to i32*
  store i32 -1, i32* %29, align 8
  %30 = getelementptr inbounds i8, i8* %28, i64 4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %30, i8 0, i64 28, i1 false) #13
  %31 = load %"class.v8::internal::FreeListCategory"**, %"class.v8::internal::FreeListCategory"*** %16, align 8
  %32 = getelementptr inbounds %"class.v8::internal::FreeListCategory"*, %"class.v8::internal::FreeListCategory"** %31, i64 %27
  %33 = bitcast %"class.v8::internal::FreeListCategory"** %32 to i8**
  store i8* %28, i8** %33, align 8
  %34 = add nuw nsw i64 %27, 1
  %35 = load atomic i64, i64* %3 seq_cst, align 8
  %36 = inttoptr i64 %35 to %"class.v8::internal::Space"*
  %37 = getelementptr inbounds %"class.v8::internal::Space", %"class.v8::internal::Space"* %36, i64 0, i32 4, i32 0, i32 0, i32 0
  %38 = load %"class.v8::internal::FreeList"*, %"class.v8::internal::FreeList"** %37, align 8
  %39 = getelementptr inbounds %"class.v8::internal::FreeList", %"class.v8::internal::FreeList"* %38, i64 0, i32 2
  %40 = load i32, i32* %39, align 4
  %41 = sext i32 %40 to i64
  %42 = icmp slt i64 %27, %41
  br i1 %42, label %26, label %25
}

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #1

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal4Page28InitializeFreeListCategoriesEv(%"class.v8::internal::Page"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Page", %"class.v8::internal::Page"* %0, i64 0, i32 0, i32 0, i32 8, i32 0
  %3 = bitcast %"struct.std::__1::__atomic_base.610"* %2 to i64*
  %4 = load atomic i64, i64* %3 seq_cst, align 8
  %5 = inttoptr i64 %4 to %"class.v8::internal::Space"*
  %6 = getelementptr inbounds %"class.v8::internal::Space", %"class.v8::internal::Space"* %5, i64 0, i32 4, i32 0, i32 0, i32 0
  %7 = load %"class.v8::internal::FreeList"*, %"class.v8::internal::FreeList"** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::FreeList", %"class.v8::internal::FreeList"* %7, i64 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = icmp slt i32 %9, 0
  br i1 %10, label %13, label %11

11:                                               ; preds = %1
  %12 = getelementptr inbounds %"class.v8::internal::Page", %"class.v8::internal::Page"* %0, i64 0, i32 0, i32 13
  br label %14

13:                                               ; preds = %14, %1
  ret void

14:                                               ; preds = %14, %11
  %15 = phi i64 [ %24, %14 ], [ 0, %11 ]
  %16 = load %"class.v8::internal::FreeListCategory"**, %"class.v8::internal::FreeListCategory"*** %12, align 8
  %17 = getelementptr inbounds %"class.v8::internal::FreeListCategory"*, %"class.v8::internal::FreeListCategory"** %16, i64 %15
  %18 = load %"class.v8::internal::FreeListCategory"*, %"class.v8::internal::FreeListCategory"** %17, align 8
  %19 = getelementptr inbounds %"class.v8::internal::FreeListCategory", %"class.v8::internal::FreeListCategory"* %18, i64 0, i32 0
  %20 = trunc i64 %15 to i32
  store i32 %20, i32* %19, align 8
  %21 = getelementptr inbounds %"class.v8::internal::FreeListCategory", %"class.v8::internal::FreeListCategory"* %18, i64 0, i32 1
  store i32 0, i32* %21, align 4
  %22 = getelementptr inbounds %"class.v8::internal::FreeListCategory", %"class.v8::internal::FreeListCategory"* %18, i64 0, i32 3
  %23 = bitcast %"class.v8::internal::FreeListCategory"** %22 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %23, i8 0, i64 16, i1 false) #13
  %24 = add nuw nsw i64 %15, 1
  %25 = load atomic i64, i64* %3 seq_cst, align 8
  %26 = inttoptr i64 %25 to %"class.v8::internal::Space"*
  %27 = getelementptr inbounds %"class.v8::internal::Space", %"class.v8::internal::Space"* %26, i64 0, i32 4, i32 0, i32 0, i32 0
  %28 = load %"class.v8::internal::FreeList"*, %"class.v8::internal::FreeList"** %27, align 8
  %29 = getelementptr inbounds %"class.v8::internal::FreeList", %"class.v8::internal::FreeList"* %28, i64 0, i32 2
  %30 = load i32, i32* %29, align 4
  %31 = sext i32 %30 to i64
  %32 = icmp slt i64 %15, %31
  br i1 %32, label %14, label %13
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal4Page25ReleaseFreeListCategoriesEv(%"class.v8::internal::Page"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Page", %"class.v8::internal::Page"* %0, i64 0, i32 0, i32 13
  %3 = load %"class.v8::internal::FreeListCategory"**, %"class.v8::internal::FreeListCategory"*** %2, align 8
  %4 = icmp eq %"class.v8::internal::FreeListCategory"** %3, null
  br i1 %4, label %43, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.v8::internal::Page", %"class.v8::internal::Page"* %0, i64 0, i32 0, i32 0, i32 8, i32 0
  %7 = bitcast %"struct.std::__1::__atomic_base.610"* %6 to i64*
  %8 = load atomic i64, i64* %7 seq_cst, align 8
  %9 = inttoptr i64 %8 to %"class.v8::internal::Space"*
  %10 = getelementptr inbounds %"class.v8::internal::Space", %"class.v8::internal::Space"* %9, i64 0, i32 4, i32 0, i32 0, i32 0
  %11 = load %"class.v8::internal::FreeList"*, %"class.v8::internal::FreeList"** %10, align 8
  %12 = getelementptr inbounds %"class.v8::internal::FreeList", %"class.v8::internal::FreeList"* %11, i64 0, i32 2
  %13 = load i32, i32* %12, align 4
  %14 = icmp slt i32 %13, 0
  %15 = load %"class.v8::internal::FreeListCategory"**, %"class.v8::internal::FreeListCategory"*** %2, align 8
  br i1 %14, label %16, label %19

16:                                               ; preds = %29, %5
  %17 = phi %"class.v8::internal::FreeListCategory"** [ %15, %5 ], [ %39, %29 ]
  %18 = icmp eq %"class.v8::internal::FreeListCategory"** %17, null
  br i1 %18, label %42, label %40

19:                                               ; preds = %5, %29
  %20 = phi i64 [ %30, %29 ], [ 0, %5 ]
  %21 = phi %"class.v8::internal::FreeListCategory"** [ %39, %29 ], [ %15, %5 ]
  %22 = getelementptr inbounds %"class.v8::internal::FreeListCategory"*, %"class.v8::internal::FreeListCategory"** %21, i64 %20
  %23 = load %"class.v8::internal::FreeListCategory"*, %"class.v8::internal::FreeListCategory"** %22, align 8
  %24 = icmp eq %"class.v8::internal::FreeListCategory"* %23, null
  br i1 %24, label %29, label %25

25:                                               ; preds = %19
  %26 = bitcast %"class.v8::internal::FreeListCategory"* %23 to i8*
  tail call void @_ZdlPv(i8* %26) #12
  %27 = load %"class.v8::internal::FreeListCategory"**, %"class.v8::internal::FreeListCategory"*** %2, align 8
  %28 = getelementptr inbounds %"class.v8::internal::FreeListCategory"*, %"class.v8::internal::FreeListCategory"** %27, i64 %20
  store %"class.v8::internal::FreeListCategory"* null, %"class.v8::internal::FreeListCategory"** %28, align 8
  br label %29

29:                                               ; preds = %19, %25
  %30 = add nuw nsw i64 %20, 1
  %31 = load atomic i64, i64* %7 seq_cst, align 8
  %32 = inttoptr i64 %31 to %"class.v8::internal::Space"*
  %33 = getelementptr inbounds %"class.v8::internal::Space", %"class.v8::internal::Space"* %32, i64 0, i32 4, i32 0, i32 0, i32 0
  %34 = load %"class.v8::internal::FreeList"*, %"class.v8::internal::FreeList"** %33, align 8
  %35 = getelementptr inbounds %"class.v8::internal::FreeList", %"class.v8::internal::FreeList"* %34, i64 0, i32 2
  %36 = load i32, i32* %35, align 4
  %37 = sext i32 %36 to i64
  %38 = icmp slt i64 %20, %37
  %39 = load %"class.v8::internal::FreeListCategory"**, %"class.v8::internal::FreeListCategory"*** %2, align 8
  br i1 %38, label %19, label %16

40:                                               ; preds = %16
  %41 = bitcast %"class.v8::internal::FreeListCategory"** %17 to i8*
  tail call void @_ZdaPv(i8* %41) #12
  br label %42

42:                                               ; preds = %40, %16
  store %"class.v8::internal::FreeListCategory"** null, %"class.v8::internal::FreeListCategory"*** %2, align 8
  br label %43

43:                                               ; preds = %1, %42
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::Page"* @_ZN2v88internal4Page15ConvertNewToOldEPS1_(%"class.v8::internal::Page"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Page", %"class.v8::internal::Page"* %0, i64 0, i32 0, i32 0, i32 2
  %3 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %3, i64 0, i32 25
  %5 = load %"class.v8::internal::OldSpace"*, %"class.v8::internal::OldSpace"** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Page", %"class.v8::internal::Page"* %0, i64 0, i32 0, i32 0, i32 8
  %7 = ptrtoint %"class.v8::internal::OldSpace"* %5 to i64
  %8 = bitcast %"struct.std::__1::atomic.609"* %6 to i64*
  store atomic i64 %7, i64* %8 seq_cst, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Page", %"class.v8::internal::Page"* %0, i64 0, i32 0, i32 0, i32 1
  store i64 0, i64* %9, align 8
  %10 = getelementptr inbounds %"class.v8::internal::OldSpace", %"class.v8::internal::OldSpace"* %5, i64 0, i32 0
  %11 = getelementptr inbounds %"class.v8::internal::Page", %"class.v8::internal::Page"* %0, i64 0, i32 0
  %12 = tail call %"class.v8::internal::Page"* @_ZN2v88internal10PagedSpace14InitializePageEPNS0_11MemoryChunkE(%"class.v8::internal::PagedSpace"* %10, %"class.v8::internal::MemoryChunk"* %11) #13
  %13 = tail call i64 @_ZN2v88internal10PagedSpace7AddPageEPNS0_4PageE(%"class.v8::internal::PagedSpace"* %10, %"class.v8::internal::Page"* %12) #13
  ret %"class.v8::internal::Page"* %12
}

declare %"class.v8::internal::Page"* @_ZN2v88internal10PagedSpace14InitializePageEPNS0_11MemoryChunkE(%"class.v8::internal::PagedSpace"*, %"class.v8::internal::MemoryChunk"*) local_unnamed_addr #5

declare i64 @_ZN2v88internal10PagedSpace7AddPageEPNS0_4PageE(%"class.v8::internal::PagedSpace"*, %"class.v8::internal::Page"*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal4Page36MoveOldToNewRememberedSetForSweepingEv(%"class.v8::internal::Page"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Page", %"class.v8::internal::Page"* %0, i64 0, i32 0, i32 4
  %3 = load %"class.v8::internal::SlotSet"*, %"class.v8::internal::SlotSet"** %2, align 8
  %4 = icmp eq %"class.v8::internal::SlotSet"* %3, null
  br i1 %4, label %6, label %5, !prof !2

5:                                                ; preds = %1
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.1, i64 0, i64 0)) #14
  unreachable

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.v8::internal::Page", %"class.v8::internal::Page"* %0, i64 0, i32 0, i32 1, i64 0
  %8 = bitcast %"class.v8::internal::SlotSet"** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.v8::internal::SlotSet"** %2 to i64*
  store i64 %9, i64* %10, align 8
  store %"class.v8::internal::SlotSet"* null, %"class.v8::internal::SlotSet"** %7, align 8
  ret void
}

; Function Attrs: noreturn
declare void @_Z8V8_FatalPKcz(i8*, ...) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal4Page27MergeOldToNewRememberedSetsEv(%"class.v8::internal::Page"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Page", %"class.v8::internal::Page"* %0, i64 0, i32 0
  %3 = getelementptr inbounds %"class.v8::internal::Page", %"class.v8::internal::Page"* %0, i64 0, i32 0, i32 4
  %4 = load %"class.v8::internal::SlotSet"*, %"class.v8::internal::SlotSet"** %3, align 8
  %5 = icmp eq %"class.v8::internal::SlotSet"* %4, null
  br i1 %5, label %94, label %6

6:                                                ; preds = %1
  %7 = ptrtoint %"class.v8::internal::SlotSet"* %4 to i64
  %8 = getelementptr inbounds %"class.v8::internal::Page", %"class.v8::internal::Page"* %0, i64 0, i32 0, i32 1, i64 0
  %9 = load %"class.v8::internal::SlotSet"*, %"class.v8::internal::SlotSet"** %8, align 8
  %10 = icmp eq %"class.v8::internal::SlotSet"* %9, null
  %11 = bitcast %"class.v8::internal::SlotSet"** %8 to i64*
  br i1 %10, label %92, label %12

12:                                               ; preds = %6
  %13 = load atomic i64, i64* %11 acquire, align 8
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %85, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"class.v8::internal::Page", %"class.v8::internal::Page"* %0, i64 0, i32 0, i32 0, i32 0
  %17 = load i64, i64* %16, align 8
  %18 = add i64 %17, 4095
  %19 = lshr i64 %18, 12
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %85, label %21

21:                                               ; preds = %15
  %22 = inttoptr i64 %13 to %"class.v8::internal::SlotSet::Bucket"**
  br label %23

23:                                               ; preds = %82, %21
  %24 = phi i64 [ 0, %21 ], [ %83, %82 ]
  %25 = getelementptr inbounds %"class.v8::internal::SlotSet::Bucket"*, %"class.v8::internal::SlotSet::Bucket"** %22, i64 %24
  %26 = bitcast %"class.v8::internal::SlotSet::Bucket"** %25 to i64*
  %27 = load atomic i64, i64* %26 acquire, align 8
  %28 = inttoptr i64 %27 to %"class.v8::internal::SlotSet::Bucket"*
  %29 = icmp eq i64 %27, 0
  br i1 %29, label %82, label %30

30:                                               ; preds = %23
  %31 = shl i64 %24, 10
  br label %32

32:                                               ; preds = %78, %30
  %33 = phi i64 [ 0, %30 ], [ %79, %78 ]
  %34 = phi i64 [ %31, %30 ], [ %80, %78 ]
  %35 = getelementptr inbounds %"class.v8::internal::SlotSet::Bucket", %"class.v8::internal::SlotSet::Bucket"* %28, i64 0, i32 0, i64 %33
  %36 = load atomic i32, i32* %35 acquire, align 4
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %78, label %38

38:                                               ; preds = %32, %75
  %39 = phi i32 [ %76, %75 ], [ %36, %32 ]
  %40 = tail call i32 @llvm.cttz.i32(i32 %39, i1 false) #13, !range !3
  %41 = shl i32 1, %40
  %42 = zext i32 %40 to i64
  %43 = add i64 %34, %42
  %44 = load %"class.v8::internal::SlotSet"*, %"class.v8::internal::SlotSet"** %3, align 8
  %45 = icmp eq %"class.v8::internal::SlotSet"* %44, null
  br i1 %45, label %46, label %48

46:                                               ; preds = %38
  %47 = tail call %"class.v8::internal::SlotSet"* @_ZN2v88internal11MemoryChunk23AllocateSweepingSlotSetEv(%"class.v8::internal::MemoryChunk"* %2) #13
  br label %48

48:                                               ; preds = %46, %38
  %49 = phi %"class.v8::internal::SlotSet"* [ %47, %46 ], [ %44, %38 ]
  %50 = lshr i64 %43, 10
  %51 = and i64 %50, 4503599627370495
  %52 = lshr i64 %43, 5
  %53 = and i64 %52, 31
  %54 = trunc i64 %43 to i32
  %55 = and i32 %54, 31
  %56 = bitcast %"class.v8::internal::SlotSet"* %49 to %"class.v8::internal::SlotSet::Bucket"**
  %57 = getelementptr inbounds %"class.v8::internal::SlotSet::Bucket"*, %"class.v8::internal::SlotSet::Bucket"** %56, i64 %51
  %58 = bitcast %"class.v8::internal::SlotSet::Bucket"** %57 to i64*
  %59 = load atomic i64, i64* %58 acquire, align 8
  %60 = inttoptr i64 %59 to %"class.v8::internal::SlotSet::Bucket"*
  %61 = icmp eq i64 %59, 0
  br i1 %61, label %62, label %66

62:                                               ; preds = %48
  %63 = tail call i8* @_ZN2v88internal8MallocednwEm(i64 128) #13
  %64 = bitcast i8* %63 to %"class.v8::internal::SlotSet::Bucket"*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %63, i8 0, i64 128, i1 false) #13
  %65 = bitcast %"class.v8::internal::SlotSet::Bucket"** %57 to i8**
  store i8* %63, i8** %65, align 8
  br label %66

66:                                               ; preds = %62, %48
  %67 = phi %"class.v8::internal::SlotSet::Bucket"* [ %64, %62 ], [ %60, %48 ]
  %68 = shl i32 1, %55
  %69 = getelementptr inbounds %"class.v8::internal::SlotSet::Bucket", %"class.v8::internal::SlotSet::Bucket"* %67, i64 0, i32 0, i64 %53
  %70 = load i32, i32* %69, align 4
  %71 = and i32 %70, %68
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %73, label %75

73:                                               ; preds = %66
  %74 = or i32 %70, %68
  store i32 %74, i32* %69, align 4
  br label %75

75:                                               ; preds = %73, %66
  %76 = xor i32 %41, %39
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %38

78:                                               ; preds = %75, %32
  %79 = add nuw nsw i64 %33, 1
  %80 = add nuw nsw i64 %34, 32
  %81 = icmp eq i64 %79, 32
  br i1 %81, label %82, label %32

82:                                               ; preds = %78, %23
  %83 = add nuw nsw i64 %24, 1
  %84 = icmp eq i64 %83, %19
  br i1 %84, label %85, label %23

85:                                               ; preds = %82, %15, %12
  tail call void @_ZN2v88internal11MemoryChunk14ReleaseSlotSetILNS0_17RememberedSetTypeE0EEEvv(%"class.v8::internal::MemoryChunk"* %2) #13
  %86 = load %"class.v8::internal::SlotSet"*, %"class.v8::internal::SlotSet"** %8, align 8
  %87 = icmp eq %"class.v8::internal::SlotSet"* %86, null
  br i1 %87, label %88, label %91, !prof !2

88:                                               ; preds = %85
  %89 = bitcast %"class.v8::internal::SlotSet"** %3 to i64*
  %90 = load i64, i64* %89, align 8
  br label %92

91:                                               ; preds = %85
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2, i64 0, i64 0)) #14
  unreachable

92:                                               ; preds = %6, %88
  %93 = phi i64 [ %90, %88 ], [ %7, %6 ]
  store i64 %93, i64* %11, align 8
  store %"class.v8::internal::SlotSet"* null, %"class.v8::internal::SlotSet"** %3, align 8
  br label %94

94:                                               ; preds = %1, %92
  ret void
}

declare void @_ZN2v88internal11MemoryChunk14ReleaseSlotSetILNS0_17RememberedSetTypeE0EEEvv(%"class.v8::internal::MemoryChunk"*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN2v88internal4Page19AvailableInFreeListEv(%"class.v8::internal::Page"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Page", %"class.v8::internal::Page"* %0, i64 0, i32 0, i32 0, i32 8, i32 0
  %3 = bitcast %"struct.std::__1::__atomic_base.610"* %2 to i64*
  %4 = load atomic i64, i64* %3 seq_cst, align 8
  %5 = inttoptr i64 %4 to %"class.v8::internal::Space"*
  %6 = getelementptr inbounds %"class.v8::internal::Space", %"class.v8::internal::Space"* %5, i64 0, i32 4, i32 0, i32 0, i32 0
  %7 = load %"class.v8::internal::FreeList"*, %"class.v8::internal::FreeList"** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::FreeList", %"class.v8::internal::FreeList"* %7, i64 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = icmp sgt i32 %9, 0
  br i1 %10, label %11, label %32

11:                                               ; preds = %1
  %12 = getelementptr inbounds %"class.v8::internal::Page", %"class.v8::internal::Page"* %0, i64 0, i32 0, i32 13
  br label %13

13:                                               ; preds = %13, %11
  %14 = phi i64 [ 0, %11 ], [ %22, %13 ]
  %15 = phi i64 [ 0, %11 ], [ %23, %13 ]
  %16 = load %"class.v8::internal::FreeListCategory"**, %"class.v8::internal::FreeListCategory"*** %12, align 8
  %17 = getelementptr inbounds %"class.v8::internal::FreeListCategory"*, %"class.v8::internal::FreeListCategory"** %16, i64 %15
  %18 = load %"class.v8::internal::FreeListCategory"*, %"class.v8::internal::FreeListCategory"** %17, align 8
  %19 = getelementptr %"class.v8::internal::FreeListCategory", %"class.v8::internal::FreeListCategory"* %18, i64 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = zext i32 %20 to i64
  %22 = add i64 %14, %21
  %23 = add nuw nsw i64 %15, 1
  %24 = load atomic i64, i64* %3 seq_cst, align 8
  %25 = inttoptr i64 %24 to %"class.v8::internal::Space"*
  %26 = getelementptr inbounds %"class.v8::internal::Space", %"class.v8::internal::Space"* %25, i64 0, i32 4, i32 0, i32 0, i32 0
  %27 = load %"class.v8::internal::FreeList"*, %"class.v8::internal::FreeList"** %26, align 8
  %28 = getelementptr inbounds %"class.v8::internal::FreeList", %"class.v8::internal::FreeList"* %27, i64 0, i32 1
  %29 = load i32, i32* %28, align 8
  %30 = sext i32 %29 to i64
  %31 = icmp slt i64 %23, %30
  br i1 %31, label %13, label %32

32:                                               ; preds = %13, %1
  %33 = phi i64 [ 0, %1 ], [ %22, %13 ]
  ret i64 %33
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN2v88internal4Page21ShrinkToHighWaterMarkEv(%"class.v8::internal::Page"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.v8::internal::HeapObject", align 8
  %3 = getelementptr inbounds %"class.v8::internal::Page", %"class.v8::internal::Page"* %0, i64 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.v8::internal::Page", %"class.v8::internal::Page"* %0, i64 0, i32 0, i32 0, i32 9, i32 1, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %91, label %7

7:                                                ; preds = %1
  %8 = bitcast %"class.v8::internal::HeapObject"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #13
  %9 = ptrtoint %"class.v8::internal::Page"* %0 to i64
  %10 = getelementptr inbounds %"class.v8::internal::Page", %"class.v8::internal::Page"* %0, i64 0, i32 0, i32 0, i32 7, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load atomic i64, i64* %10 seq_cst, align 8
  %12 = add i64 %11, %9
  %13 = add i64 %12, 1
  %14 = getelementptr inbounds %"class.v8::internal::HeapObject", %"class.v8::internal::HeapObject"* %2, i64 0, i32 0, i32 0, i32 0
  store i64 %13, i64* %14, align 8
  %15 = getelementptr inbounds %"class.v8::internal::Page", %"class.v8::internal::Page"* %0, i64 0, i32 0, i32 0, i32 4
  %16 = load i64, i64* %15, align 8
  %17 = icmp eq i64 %16, %12
  br i1 %17, label %89, label %18

18:                                               ; preds = %7
  %19 = and i64 %13, -4294967296
  %20 = inttoptr i64 %12 to i32*
  %21 = load atomic i32, i32* %20 monotonic, align 4
  %22 = zext i32 %21 to i64
  %23 = or i64 %19, %22
  %24 = add i64 %23, 7
  %25 = inttoptr i64 %24 to i16*
  %26 = load atomic i16, i16* %25 monotonic, align 2
  %27 = or i16 %26, 1
  %28 = icmp eq i16 %27, 169
  br i1 %28, label %30, label %29, !prof !2

29:                                               ; preds = %18
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.3, i64 0, i64 0)) #14
  unreachable

30:                                               ; preds = %18
  %31 = sub i64 %16, %12
  %32 = tail call i64 @_ZN2v88internal15MemoryAllocator17GetCommitPageSizeEv() #13
  %33 = sub nsw i64 0, %32
  %34 = and i64 %31, %33
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %89, label %36

36:                                               ; preds = %30
  %37 = load i8, i8* @_ZN2v88internal21FLAG_trace_gc_verboseE, align 1, !range !4
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %49, label %39

39:                                               ; preds = %36
  %40 = getelementptr inbounds %"class.v8::internal::Page", %"class.v8::internal::Page"* %0, i64 0, i32 0, i32 0, i32 2
  %41 = bitcast %"class.v8::internal::Heap"** %40 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, -41416
  %44 = inttoptr i64 %43 to i8*
  %45 = load i64, i64* %15, align 8
  %46 = inttoptr i64 %45 to i8*
  %47 = sub i64 %45, %34
  %48 = inttoptr i64 %47 to i8*
  tail call void (i8*, i8*, ...) @_ZN2v88internal12PrintIsolateEPvPKcz(i8* %44, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.4, i64 0, i64 0), %"class.v8::internal::Page"* %0, i8* %46, i8* %48) #13
  br label %49

49:                                               ; preds = %36, %39
  %50 = getelementptr inbounds %"class.v8::internal::Page", %"class.v8::internal::Page"* %0, i64 0, i32 0, i32 0, i32 2
  %51 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %50, align 8
  %52 = load i64, i64* %15, align 8
  %53 = sub i64 0, %12
  %54 = sub i64 %53, %34
  %55 = add i64 %54, %52
  %56 = trunc i64 %55 to i32
  %57 = tail call i64 @_ZN2v88internal4Heap20CreateFillerObjectAtEmiNS0_18ClearRecordedSlotsE(%"class.v8::internal::Heap"* %51, i64 %12, i32 %56, i32 1) #13
  %58 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %50, align 8
  %59 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %58, i64 0, i32 85, i32 0, i32 0, i32 0
  %60 = load %"class.v8::internal::MemoryAllocator"*, %"class.v8::internal::MemoryAllocator"** %59, align 8
  %61 = getelementptr inbounds %"class.v8::internal::Page", %"class.v8::internal::Page"* %0, i64 0, i32 0, i32 0, i32 0
  %62 = load i64, i64* %61, align 8
  %63 = sub i64 %9, %34
  %64 = add i64 %63, %62
  %65 = load i64, i64* %15, align 8
  %66 = sub i64 %65, %34
  tail call void @_ZN2v88internal15MemoryAllocator17PartialFreeMemoryEPNS0_16BasicMemoryChunkEmmm(%"class.v8::internal::MemoryAllocator"* %60, %"class.v8::internal::BasicMemoryChunk"* %3, i64 %64, i64 %34, i64 %66) #13
  %67 = load i64, i64* %15, align 8
  %68 = icmp eq i64 %12, %67
  br i1 %68, label %89, label %69

69:                                               ; preds = %49
  %70 = load atomic i32, i32* %20 monotonic, align 4
  %71 = zext i32 %70 to i64
  %72 = or i64 %19, %71
  %73 = add i64 %72, 7
  %74 = inttoptr i64 %73 to i16*
  %75 = load atomic i16, i16* %74 monotonic, align 2
  %76 = or i16 %75, 1
  %77 = icmp eq i16 %76, 169
  br i1 %77, label %79, label %78, !prof !2

78:                                               ; preds = %69
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.3, i64 0, i64 0)) #14
  unreachable

79:                                               ; preds = %69
  %80 = load atomic i32, i32* %20 monotonic, align 4
  %81 = zext i32 %80 to i64
  %82 = or i64 %19, %81
  %83 = call i32 @_ZNK2v88internal10HeapObject11SizeFromMapENS0_3MapE(%"class.v8::internal::HeapObject"* nonnull %2, i64 %82) #13
  %84 = sext i32 %83 to i64
  %85 = add i64 %12, %84
  %86 = load i64, i64* %15, align 8
  %87 = icmp eq i64 %85, %86
  br i1 %87, label %89, label %88, !prof !2

88:                                               ; preds = %79
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.5, i64 0, i64 0)) #14
  unreachable

89:                                               ; preds = %30, %49, %79, %7
  %90 = phi i64 [ 0, %7 ], [ %34, %79 ], [ %34, %49 ], [ 0, %30 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #13
  br label %91

91:                                               ; preds = %1, %89
  %92 = phi i64 [ %90, %89 ], [ 0, %1 ]
  ret i64 %92
}

declare i64 @_ZN2v88internal15MemoryAllocator17GetCommitPageSizeEv() local_unnamed_addr #5

declare void @_ZN2v88internal12PrintIsolateEPvPKcz(i8*, i8*, ...) local_unnamed_addr #5

declare i64 @_ZN2v88internal4Heap20CreateFillerObjectAtEmiNS0_18ClearRecordedSlotsE(%"class.v8::internal::Heap"*, i64, i32, i32) local_unnamed_addr #5

declare void @_ZN2v88internal15MemoryAllocator17PartialFreeMemoryEPNS0_16BasicMemoryChunkEmmm(%"class.v8::internal::MemoryAllocator"*, %"class.v8::internal::BasicMemoryChunk"*, i64, i64, i64) local_unnamed_addr #5

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2v88internal4Page15CreateBlackAreaEmm(%"class.v8::internal::Page"*, i64, i64) local_unnamed_addr #7 align 2 {
  %4 = ptrtoint %"class.v8::internal::Page"* %0 to i64
  %5 = add i64 %4, 272
  %6 = sub i64 %1, %4
  %7 = trunc i64 %6 to i32
  %8 = lshr i32 %7, 2
  %9 = sub i64 %2, %4
  %10 = trunc i64 %9 to i32
  %11 = lshr i32 %10, 2
  %12 = icmp ult i32 %8, %11
  br i1 %12, label %13, label %110

13:                                               ; preds = %3
  %14 = add nsw i32 %11, -1
  %15 = lshr i32 %7, 7
  %16 = and i32 %8, 31
  %17 = shl i32 1, %16
  %18 = lshr i32 %14, 5
  %19 = and i32 %14, 31
  %20 = shl i32 1, %19
  %21 = icmp eq i32 %15, %18
  br i1 %21, label %93, label %22

22:                                               ; preds = %13
  %23 = sub i32 0, %17
  %24 = inttoptr i64 %5 to i32*
  %25 = zext i32 %15 to i64
  %26 = getelementptr inbounds i32, i32* %24, i64 %25
  %27 = load atomic i32, i32* %26 monotonic, align 4
  br label %28

28:                                               ; preds = %32, %22
  %29 = phi i32 [ %27, %22 ], [ %35, %32 ]
  %30 = and i32 %29, %23
  %31 = icmp eq i32 %30, %23
  br i1 %31, label %37, label %32

32:                                               ; preds = %28
  %33 = or i32 %29, %23
  %34 = cmpxchg volatile i32* %26, i32 %29, i32 %33 release monotonic
  %35 = extractvalue { i32, i1 } %34, 0
  %36 = extractvalue { i32, i1 } %34, 1
  br i1 %36, label %37, label %28

37:                                               ; preds = %32, %28
  %38 = add nuw nsw i32 %15, 1
  %39 = icmp ult i32 %38, %18
  br i1 %39, label %40, label %78

40:                                               ; preds = %37
  %41 = zext i32 %38 to i64
  %42 = xor i32 %15, 7
  %43 = add nuw nsw i32 %18, %42
  %44 = add nsw i32 %18, -2
  %45 = sub nsw i32 %44, %15
  %46 = and i32 %43, 7
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %55, label %48

48:                                               ; preds = %40, %48
  %49 = phi i64 [ %52, %48 ], [ %41, %40 ]
  %50 = phi i32 [ %53, %48 ], [ %46, %40 ]
  %51 = getelementptr inbounds i32, i32* %24, i64 %49
  store atomic volatile i32 -1, i32* %51 monotonic, align 4
  %52 = add nuw nsw i64 %49, 1
  %53 = add i32 %50, -1
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %48, !llvm.loop !5

55:                                               ; preds = %48, %40
  %56 = phi i64 [ %41, %40 ], [ %52, %48 ]
  %57 = icmp ult i32 %45, 7
  br i1 %57, label %78, label %58

58:                                               ; preds = %55, %58
  %59 = phi i64 [ %75, %58 ], [ %56, %55 ]
  %60 = getelementptr inbounds i32, i32* %24, i64 %59
  store atomic volatile i32 -1, i32* %60 monotonic, align 4
  %61 = add nuw nsw i64 %59, 1
  %62 = getelementptr inbounds i32, i32* %24, i64 %61
  store atomic volatile i32 -1, i32* %62 monotonic, align 4
  %63 = add nuw nsw i64 %59, 2
  %64 = getelementptr inbounds i32, i32* %24, i64 %63
  store atomic volatile i32 -1, i32* %64 monotonic, align 4
  %65 = add nuw nsw i64 %59, 3
  %66 = getelementptr inbounds i32, i32* %24, i64 %65
  store atomic volatile i32 -1, i32* %66 monotonic, align 4
  %67 = add nuw nsw i64 %59, 4
  %68 = getelementptr inbounds i32, i32* %24, i64 %67
  store atomic volatile i32 -1, i32* %68 monotonic, align 4
  %69 = add nuw nsw i64 %59, 5
  %70 = getelementptr inbounds i32, i32* %24, i64 %69
  store atomic volatile i32 -1, i32* %70 monotonic, align 4
  %71 = add nuw nsw i64 %59, 6
  %72 = getelementptr inbounds i32, i32* %24, i64 %71
  store atomic volatile i32 -1, i32* %72 monotonic, align 4
  %73 = add nuw nsw i64 %59, 7
  %74 = getelementptr inbounds i32, i32* %24, i64 %73
  store atomic volatile i32 -1, i32* %74 monotonic, align 4
  %75 = add nuw nsw i64 %59, 8
  %76 = trunc i64 %75 to i32
  %77 = icmp eq i32 %18, %76
  br i1 %77, label %78, label %58

78:                                               ; preds = %55, %58, %37
  %79 = add i32 %20, -1
  %80 = or i32 %79, %20
  %81 = zext i32 %18 to i64
  %82 = getelementptr inbounds i32, i32* %24, i64 %81
  %83 = load atomic i32, i32* %82 monotonic, align 4
  br label %84

84:                                               ; preds = %88, %78
  %85 = phi i32 [ %83, %78 ], [ %91, %88 ]
  %86 = and i32 %85, %80
  %87 = icmp eq i32 %86, %80
  br i1 %87, label %109, label %88

88:                                               ; preds = %84
  %89 = or i32 %85, %80
  %90 = cmpxchg volatile i32* %82, i32 %85, i32 %89 release monotonic
  %91 = extractvalue { i32, i1 } %90, 0
  %92 = extractvalue { i32, i1 } %90, 1
  br i1 %92, label %109, label %84

93:                                               ; preds = %13
  %94 = sub i32 %20, %17
  %95 = or i32 %94, %20
  %96 = inttoptr i64 %5 to i32*
  %97 = zext i32 %15 to i64
  %98 = getelementptr inbounds i32, i32* %96, i64 %97
  %99 = load atomic i32, i32* %98 monotonic, align 4
  br label %100

100:                                              ; preds = %104, %93
  %101 = phi i32 [ %99, %93 ], [ %107, %104 ]
  %102 = and i32 %101, %95
  %103 = icmp eq i32 %102, %95
  br i1 %103, label %109, label %104

104:                                              ; preds = %100
  %105 = or i32 %101, %95
  %106 = cmpxchg volatile i32* %98, i32 %101, i32 %105 release monotonic
  %107 = extractvalue { i32, i1 } %106, 0
  %108 = extractvalue { i32, i1 } %106, 1
  br i1 %108, label %109, label %100

109:                                              ; preds = %88, %84, %104, %100
  fence seq_cst
  br label %110

110:                                              ; preds = %3, %109
  %111 = sub i64 %2, %1
  %112 = getelementptr inbounds %"class.v8::internal::Page", %"class.v8::internal::Page"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  %113 = atomicrmw add i64* %112, i64 %111 monotonic
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal4Page25CreateBlackAreaBackgroundEmm(%"class.v8::internal::Page"*, i64, i64) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.std::__1::tuple", align 8
  %5 = alloca %"class.std::__1::tuple.1152", align 1
  %6 = alloca %"class.v8::internal::MemoryChunk"*, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Page", %"class.v8::internal::Page"* %0, i64 0, i32 0, i32 0, i32 2
  %8 = ptrtoint %"class.v8::internal::Page"* %0 to i64
  %9 = add i64 %8, 272
  %10 = sub i64 %1, %8
  %11 = trunc i64 %10 to i32
  %12 = lshr i32 %11, 2
  %13 = sub i64 %2, %8
  %14 = trunc i64 %13 to i32
  %15 = lshr i32 %14, 2
  %16 = icmp ult i32 %12, %15
  br i1 %16, label %17, label %114

17:                                               ; preds = %3
  %18 = add nsw i32 %15, -1
  %19 = lshr i32 %11, 7
  %20 = and i32 %12, 31
  %21 = shl i32 1, %20
  %22 = lshr i32 %18, 5
  %23 = and i32 %18, 31
  %24 = shl i32 1, %23
  %25 = icmp eq i32 %19, %22
  br i1 %25, label %97, label %26

26:                                               ; preds = %17
  %27 = sub i32 0, %21
  %28 = inttoptr i64 %9 to i32*
  %29 = zext i32 %19 to i64
  %30 = getelementptr inbounds i32, i32* %28, i64 %29
  %31 = load atomic i32, i32* %30 monotonic, align 4
  br label %32

32:                                               ; preds = %36, %26
  %33 = phi i32 [ %31, %26 ], [ %39, %36 ]
  %34 = and i32 %33, %27
  %35 = icmp eq i32 %34, %27
  br i1 %35, label %41, label %36

36:                                               ; preds = %32
  %37 = or i32 %33, %27
  %38 = cmpxchg volatile i32* %30, i32 %33, i32 %37 release monotonic
  %39 = extractvalue { i32, i1 } %38, 0
  %40 = extractvalue { i32, i1 } %38, 1
  br i1 %40, label %41, label %32

41:                                               ; preds = %36, %32
  %42 = add nuw nsw i32 %19, 1
  %43 = icmp ult i32 %42, %22
  br i1 %43, label %44, label %82

44:                                               ; preds = %41
  %45 = zext i32 %42 to i64
  %46 = xor i32 %19, 7
  %47 = add nuw nsw i32 %22, %46
  %48 = add nsw i32 %22, -2
  %49 = sub nsw i32 %48, %19
  %50 = and i32 %47, 7
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %59, label %52

52:                                               ; preds = %44, %52
  %53 = phi i64 [ %56, %52 ], [ %45, %44 ]
  %54 = phi i32 [ %57, %52 ], [ %50, %44 ]
  %55 = getelementptr inbounds i32, i32* %28, i64 %53
  store atomic volatile i32 -1, i32* %55 monotonic, align 4
  %56 = add nuw nsw i64 %53, 1
  %57 = add i32 %54, -1
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %52, !llvm.loop !7

59:                                               ; preds = %52, %44
  %60 = phi i64 [ %45, %44 ], [ %56, %52 ]
  %61 = icmp ult i32 %49, 7
  br i1 %61, label %82, label %62

62:                                               ; preds = %59, %62
  %63 = phi i64 [ %79, %62 ], [ %60, %59 ]
  %64 = getelementptr inbounds i32, i32* %28, i64 %63
  store atomic volatile i32 -1, i32* %64 monotonic, align 4
  %65 = add nuw nsw i64 %63, 1
  %66 = getelementptr inbounds i32, i32* %28, i64 %65
  store atomic volatile i32 -1, i32* %66 monotonic, align 4
  %67 = add nuw nsw i64 %63, 2
  %68 = getelementptr inbounds i32, i32* %28, i64 %67
  store atomic volatile i32 -1, i32* %68 monotonic, align 4
  %69 = add nuw nsw i64 %63, 3
  %70 = getelementptr inbounds i32, i32* %28, i64 %69
  store atomic volatile i32 -1, i32* %70 monotonic, align 4
  %71 = add nuw nsw i64 %63, 4
  %72 = getelementptr inbounds i32, i32* %28, i64 %71
  store atomic volatile i32 -1, i32* %72 monotonic, align 4
  %73 = add nuw nsw i64 %63, 5
  %74 = getelementptr inbounds i32, i32* %28, i64 %73
  store atomic volatile i32 -1, i32* %74 monotonic, align 4
  %75 = add nuw nsw i64 %63, 6
  %76 = getelementptr inbounds i32, i32* %28, i64 %75
  store atomic volatile i32 -1, i32* %76 monotonic, align 4
  %77 = add nuw nsw i64 %63, 7
  %78 = getelementptr inbounds i32, i32* %28, i64 %77
  store atomic volatile i32 -1, i32* %78 monotonic, align 4
  %79 = add nuw nsw i64 %63, 8
  %80 = trunc i64 %79 to i32
  %81 = icmp eq i32 %22, %80
  br i1 %81, label %82, label %62

82:                                               ; preds = %59, %62, %41
  %83 = add i32 %24, -1
  %84 = or i32 %83, %24
  %85 = zext i32 %22 to i64
  %86 = getelementptr inbounds i32, i32* %28, i64 %85
  %87 = load atomic i32, i32* %86 monotonic, align 4
  br label %88

88:                                               ; preds = %92, %82
  %89 = phi i32 [ %87, %82 ], [ %95, %92 ]
  %90 = and i32 %89, %84
  %91 = icmp eq i32 %90, %84
  br i1 %91, label %113, label %92

92:                                               ; preds = %88
  %93 = or i32 %89, %84
  %94 = cmpxchg volatile i32* %86, i32 %89, i32 %93 release monotonic
  %95 = extractvalue { i32, i1 } %94, 0
  %96 = extractvalue { i32, i1 } %94, 1
  br i1 %96, label %113, label %88

97:                                               ; preds = %17
  %98 = sub i32 %24, %21
  %99 = or i32 %98, %24
  %100 = inttoptr i64 %9 to i32*
  %101 = zext i32 %19 to i64
  %102 = getelementptr inbounds i32, i32* %100, i64 %101
  %103 = load atomic i32, i32* %102 monotonic, align 4
  br label %104

104:                                              ; preds = %108, %97
  %105 = phi i32 [ %103, %97 ], [ %111, %108 ]
  %106 = and i32 %105, %99
  %107 = icmp eq i32 %106, %99
  br i1 %107, label %113, label %108

108:                                              ; preds = %104
  %109 = or i32 %105, %99
  %110 = cmpxchg volatile i32* %102, i32 %105, i32 %109 release monotonic
  %111 = extractvalue { i32, i1 } %110, 0
  %112 = extractvalue { i32, i1 } %110, 1
  br i1 %112, label %113, label %104

113:                                              ; preds = %92, %88, %108, %104
  fence seq_cst
  br label %114

114:                                              ; preds = %3, %113
  %115 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %7, align 8
  %116 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %115, i64 0, i32 86, i32 0, i32 0, i32 0
  %117 = load %"class.v8::internal::IncrementalMarking"*, %"class.v8::internal::IncrementalMarking"** %116, align 8
  %118 = getelementptr inbounds %"class.v8::internal::Page", %"class.v8::internal::Page"* %0, i64 0, i32 0
  %119 = sub i64 %2, %1
  %120 = bitcast %"class.v8::internal::MemoryChunk"** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %120)
  store %"class.v8::internal::MemoryChunk"* %118, %"class.v8::internal::MemoryChunk"** %6, align 8
  %121 = getelementptr inbounds %"class.v8::internal::IncrementalMarking", %"class.v8::internal::IncrementalMarking"* %117, i64 0, i32 24
  tail call void @_ZN2v84base5Mutex4LockEv(%"class.v8::base::Mutex"* %121) #13
  %122 = getelementptr inbounds %"class.v8::internal::IncrementalMarking", %"class.v8::internal::IncrementalMarking"* %117, i64 0, i32 25, i32 0
  %123 = bitcast %"class.std::__1::tuple"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %123) #13
  %124 = getelementptr inbounds %"class.std::__1::tuple", %"class.std::__1::tuple"* %4, i64 0, i32 0, i32 0, i32 0
  store %"class.v8::internal::MemoryChunk"** %6, %"class.v8::internal::MemoryChunk"*** %124, align 8
  %125 = getelementptr inbounds %"class.std::__1::tuple.1152", %"class.std::__1::tuple.1152"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %125) #13
  %126 = call { %"struct.std::__1::__hash_node_base.339"*, i8 } @_ZNSt3__112__hash_tableINS_17__hash_value_typeIPN2v88internal11MemoryChunkElEENS_22__unordered_map_hasherIS5_S6_NS_4hashIS5_EENS_8equal_toIS5_EELb1EEENS_21__unordered_map_equalIS5_S6_SB_S9_Lb1EEENS_9allocatorIS6_EEE25__emplace_unique_key_argsIS5_JRKNS_21piecewise_construct_tENS_5tupleIJRKS5_EEENSM_IJEEEEEENS_4pairINS_15__hash_iteratorIPNS_11__hash_nodeIS6_PvEEEEbEERKT_DpOT0_(%"class.std::__1::__hash_table.335"* %122, %"class.v8::internal::MemoryChunk"** nonnull dereferenceable(8) %6, %"struct.std::__1::piecewise_construct_t"* nonnull dereferenceable(1) @_ZNSt3__1L19piecewise_constructE, %"class.std::__1::tuple"* nonnull dereferenceable(8) %4, %"class.std::__1::tuple.1152"* nonnull dereferenceable(1) %5) #13
  %127 = extractvalue { %"struct.std::__1::__hash_node_base.339"*, i8 } %126, 0
  %128 = getelementptr inbounds %"struct.std::__1::__hash_node_base.339", %"struct.std::__1::__hash_node_base.339"* %127, i64 3
  %129 = bitcast %"struct.std::__1::__hash_node_base.339"* %128 to i64*
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %125) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %123) #13
  %130 = load i64, i64* %129, align 8
  %131 = add nsw i64 %119, %130
  store i64 %131, i64* %129, align 8
  call void @_ZN2v84base5Mutex6UnlockEv(%"class.v8::base::Mutex"* %121) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %120)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2v88internal4Page16DestroyBlackAreaEmm(%"class.v8::internal::Page"*, i64, i64) local_unnamed_addr #7 align 2 {
  %4 = ptrtoint %"class.v8::internal::Page"* %0 to i64
  %5 = add i64 %4, 272
  %6 = sub i64 %1, %4
  %7 = trunc i64 %6 to i32
  %8 = lshr i32 %7, 2
  %9 = sub i64 %2, %4
  %10 = trunc i64 %9 to i32
  %11 = lshr i32 %10, 2
  %12 = icmp ult i32 %8, %11
  br i1 %12, label %13, label %113

13:                                               ; preds = %3
  %14 = add nsw i32 %11, -1
  %15 = lshr i32 %7, 7
  %16 = and i32 %8, 31
  %17 = shl i32 1, %16
  %18 = lshr i32 %14, 5
  %19 = and i32 %14, 31
  %20 = shl i32 1, %19
  %21 = icmp eq i32 %15, %18
  br i1 %21, label %95, label %22

22:                                               ; preds = %13
  %23 = sub i32 0, %17
  %24 = inttoptr i64 %5 to i32*
  %25 = zext i32 %15 to i64
  %26 = getelementptr inbounds i32, i32* %24, i64 %25
  %27 = load atomic i32, i32* %26 monotonic, align 4
  %28 = add i32 %17, -1
  br label %29

29:                                               ; preds = %33, %22
  %30 = phi i32 [ %27, %22 ], [ %36, %33 ]
  %31 = and i32 %30, %23
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %38, label %33

33:                                               ; preds = %29
  %34 = and i32 %30, %28
  %35 = cmpxchg volatile i32* %26, i32 %30, i32 %34 release monotonic
  %36 = extractvalue { i32, i1 } %35, 0
  %37 = extractvalue { i32, i1 } %35, 1
  br i1 %37, label %38, label %29

38:                                               ; preds = %33, %29
  %39 = add nuw nsw i32 %15, 1
  %40 = icmp ult i32 %39, %18
  br i1 %40, label %41, label %79

41:                                               ; preds = %38
  %42 = zext i32 %39 to i64
  %43 = xor i32 %15, 7
  %44 = add nuw nsw i32 %18, %43
  %45 = add nsw i32 %18, -2
  %46 = sub nsw i32 %45, %15
  %47 = and i32 %44, 7
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %56, label %49

49:                                               ; preds = %41, %49
  %50 = phi i64 [ %53, %49 ], [ %42, %41 ]
  %51 = phi i32 [ %54, %49 ], [ %47, %41 ]
  %52 = getelementptr inbounds i32, i32* %24, i64 %50
  store atomic volatile i32 0, i32* %52 monotonic, align 4
  %53 = add nuw nsw i64 %50, 1
  %54 = add i32 %51, -1
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %49, !llvm.loop !8

56:                                               ; preds = %49, %41
  %57 = phi i64 [ %42, %41 ], [ %53, %49 ]
  %58 = icmp ult i32 %46, 7
  br i1 %58, label %79, label %59

59:                                               ; preds = %56, %59
  %60 = phi i64 [ %76, %59 ], [ %57, %56 ]
  %61 = getelementptr inbounds i32, i32* %24, i64 %60
  store atomic volatile i32 0, i32* %61 monotonic, align 4
  %62 = add nuw nsw i64 %60, 1
  %63 = getelementptr inbounds i32, i32* %24, i64 %62
  store atomic volatile i32 0, i32* %63 monotonic, align 4
  %64 = add nuw nsw i64 %60, 2
  %65 = getelementptr inbounds i32, i32* %24, i64 %64
  store atomic volatile i32 0, i32* %65 monotonic, align 4
  %66 = add nuw nsw i64 %60, 3
  %67 = getelementptr inbounds i32, i32* %24, i64 %66
  store atomic volatile i32 0, i32* %67 monotonic, align 4
  %68 = add nuw nsw i64 %60, 4
  %69 = getelementptr inbounds i32, i32* %24, i64 %68
  store atomic volatile i32 0, i32* %69 monotonic, align 4
  %70 = add nuw nsw i64 %60, 5
  %71 = getelementptr inbounds i32, i32* %24, i64 %70
  store atomic volatile i32 0, i32* %71 monotonic, align 4
  %72 = add nuw nsw i64 %60, 6
  %73 = getelementptr inbounds i32, i32* %24, i64 %72
  store atomic volatile i32 0, i32* %73 monotonic, align 4
  %74 = add nuw nsw i64 %60, 7
  %75 = getelementptr inbounds i32, i32* %24, i64 %74
  store atomic volatile i32 0, i32* %75 monotonic, align 4
  %76 = add nuw nsw i64 %60, 8
  %77 = trunc i64 %76 to i32
  %78 = icmp eq i32 %18, %77
  br i1 %78, label %79, label %59

79:                                               ; preds = %56, %59, %38
  %80 = add i32 %20, -1
  %81 = or i32 %80, %20
  %82 = zext i32 %18 to i64
  %83 = getelementptr inbounds i32, i32* %24, i64 %82
  %84 = load atomic i32, i32* %83 monotonic, align 4
  %85 = xor i32 %81, -1
  br label %86

86:                                               ; preds = %90, %79
  %87 = phi i32 [ %84, %79 ], [ %93, %90 ]
  %88 = and i32 %87, %81
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %112, label %90

90:                                               ; preds = %86
  %91 = and i32 %87, %85
  %92 = cmpxchg volatile i32* %83, i32 %87, i32 %91 release monotonic
  %93 = extractvalue { i32, i1 } %92, 0
  %94 = extractvalue { i32, i1 } %92, 1
  br i1 %94, label %112, label %86

95:                                               ; preds = %13
  %96 = sub i32 %20, %17
  %97 = or i32 %96, %20
  %98 = inttoptr i64 %5 to i32*
  %99 = zext i32 %15 to i64
  %100 = getelementptr inbounds i32, i32* %98, i64 %99
  %101 = load atomic i32, i32* %100 monotonic, align 4
  %102 = xor i32 %97, -1
  br label %103

103:                                              ; preds = %107, %95
  %104 = phi i32 [ %101, %95 ], [ %110, %107 ]
  %105 = and i32 %104, %97
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %112, label %107

107:                                              ; preds = %103
  %108 = and i32 %104, %102
  %109 = cmpxchg volatile i32* %100, i32 %104, i32 %108 release monotonic
  %110 = extractvalue { i32, i1 } %109, 0
  %111 = extractvalue { i32, i1 } %109, 1
  br i1 %111, label %112, label %103

112:                                              ; preds = %90, %86, %107, %103
  fence seq_cst
  br label %113

113:                                              ; preds = %3, %112
  %114 = sub i64 %1, %2
  %115 = getelementptr inbounds %"class.v8::internal::Page", %"class.v8::internal::Page"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  %116 = atomicrmw add i64* %115, i64 %114 monotonic
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal4Page26DestroyBlackAreaBackgroundEmm(%"class.v8::internal::Page"*, i64, i64) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.std::__1::tuple", align 8
  %5 = alloca %"class.std::__1::tuple.1152", align 1
  %6 = alloca %"class.v8::internal::MemoryChunk"*, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Page", %"class.v8::internal::Page"* %0, i64 0, i32 0, i32 0, i32 2
  %8 = ptrtoint %"class.v8::internal::Page"* %0 to i64
  %9 = add i64 %8, 272
  %10 = sub i64 %1, %8
  %11 = trunc i64 %10 to i32
  %12 = lshr i32 %11, 2
  %13 = sub i64 %2, %8
  %14 = trunc i64 %13 to i32
  %15 = lshr i32 %14, 2
  %16 = icmp ult i32 %12, %15
  br i1 %16, label %17, label %117

17:                                               ; preds = %3
  %18 = add nsw i32 %15, -1
  %19 = lshr i32 %11, 7
  %20 = and i32 %12, 31
  %21 = shl i32 1, %20
  %22 = lshr i32 %18, 5
  %23 = and i32 %18, 31
  %24 = shl i32 1, %23
  %25 = icmp eq i32 %19, %22
  br i1 %25, label %99, label %26

26:                                               ; preds = %17
  %27 = sub i32 0, %21
  %28 = inttoptr i64 %9 to i32*
  %29 = zext i32 %19 to i64
  %30 = getelementptr inbounds i32, i32* %28, i64 %29
  %31 = load atomic i32, i32* %30 monotonic, align 4
  %32 = add i32 %21, -1
  br label %33

33:                                               ; preds = %37, %26
  %34 = phi i32 [ %31, %26 ], [ %40, %37 ]
  %35 = and i32 %34, %27
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %42, label %37

37:                                               ; preds = %33
  %38 = and i32 %34, %32
  %39 = cmpxchg volatile i32* %30, i32 %34, i32 %38 release monotonic
  %40 = extractvalue { i32, i1 } %39, 0
  %41 = extractvalue { i32, i1 } %39, 1
  br i1 %41, label %42, label %33

42:                                               ; preds = %37, %33
  %43 = add nuw nsw i32 %19, 1
  %44 = icmp ult i32 %43, %22
  br i1 %44, label %45, label %83

45:                                               ; preds = %42
  %46 = zext i32 %43 to i64
  %47 = xor i32 %19, 7
  %48 = add nuw nsw i32 %22, %47
  %49 = add nsw i32 %22, -2
  %50 = sub nsw i32 %49, %19
  %51 = and i32 %48, 7
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %60, label %53

53:                                               ; preds = %45, %53
  %54 = phi i64 [ %57, %53 ], [ %46, %45 ]
  %55 = phi i32 [ %58, %53 ], [ %51, %45 ]
  %56 = getelementptr inbounds i32, i32* %28, i64 %54
  store atomic volatile i32 0, i32* %56 monotonic, align 4
  %57 = add nuw nsw i64 %54, 1
  %58 = add i32 %55, -1
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %53, !llvm.loop !9

60:                                               ; preds = %53, %45
  %61 = phi i64 [ %46, %45 ], [ %57, %53 ]
  %62 = icmp ult i32 %50, 7
  br i1 %62, label %83, label %63

63:                                               ; preds = %60, %63
  %64 = phi i64 [ %80, %63 ], [ %61, %60 ]
  %65 = getelementptr inbounds i32, i32* %28, i64 %64
  store atomic volatile i32 0, i32* %65 monotonic, align 4
  %66 = add nuw nsw i64 %64, 1
  %67 = getelementptr inbounds i32, i32* %28, i64 %66
  store atomic volatile i32 0, i32* %67 monotonic, align 4
  %68 = add nuw nsw i64 %64, 2
  %69 = getelementptr inbounds i32, i32* %28, i64 %68
  store atomic volatile i32 0, i32* %69 monotonic, align 4
  %70 = add nuw nsw i64 %64, 3
  %71 = getelementptr inbounds i32, i32* %28, i64 %70
  store atomic volatile i32 0, i32* %71 monotonic, align 4
  %72 = add nuw nsw i64 %64, 4
  %73 = getelementptr inbounds i32, i32* %28, i64 %72
  store atomic volatile i32 0, i32* %73 monotonic, align 4
  %74 = add nuw nsw i64 %64, 5
  %75 = getelementptr inbounds i32, i32* %28, i64 %74
  store atomic volatile i32 0, i32* %75 monotonic, align 4
  %76 = add nuw nsw i64 %64, 6
  %77 = getelementptr inbounds i32, i32* %28, i64 %76
  store atomic volatile i32 0, i32* %77 monotonic, align 4
  %78 = add nuw nsw i64 %64, 7
  %79 = getelementptr inbounds i32, i32* %28, i64 %78
  store atomic volatile i32 0, i32* %79 monotonic, align 4
  %80 = add nuw nsw i64 %64, 8
  %81 = trunc i64 %80 to i32
  %82 = icmp eq i32 %22, %81
  br i1 %82, label %83, label %63

83:                                               ; preds = %60, %63, %42
  %84 = add i32 %24, -1
  %85 = or i32 %84, %24
  %86 = zext i32 %22 to i64
  %87 = getelementptr inbounds i32, i32* %28, i64 %86
  %88 = load atomic i32, i32* %87 monotonic, align 4
  %89 = xor i32 %85, -1
  br label %90

90:                                               ; preds = %94, %83
  %91 = phi i32 [ %88, %83 ], [ %97, %94 ]
  %92 = and i32 %91, %85
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %116, label %94

94:                                               ; preds = %90
  %95 = and i32 %91, %89
  %96 = cmpxchg volatile i32* %87, i32 %91, i32 %95 release monotonic
  %97 = extractvalue { i32, i1 } %96, 0
  %98 = extractvalue { i32, i1 } %96, 1
  br i1 %98, label %116, label %90

99:                                               ; preds = %17
  %100 = sub i32 %24, %21
  %101 = or i32 %100, %24
  %102 = inttoptr i64 %9 to i32*
  %103 = zext i32 %19 to i64
  %104 = getelementptr inbounds i32, i32* %102, i64 %103
  %105 = load atomic i32, i32* %104 monotonic, align 4
  %106 = xor i32 %101, -1
  br label %107

107:                                              ; preds = %111, %99
  %108 = phi i32 [ %105, %99 ], [ %114, %111 ]
  %109 = and i32 %108, %101
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %116, label %111

111:                                              ; preds = %107
  %112 = and i32 %108, %106
  %113 = cmpxchg volatile i32* %104, i32 %108, i32 %112 release monotonic
  %114 = extractvalue { i32, i1 } %113, 0
  %115 = extractvalue { i32, i1 } %113, 1
  br i1 %115, label %116, label %107

116:                                              ; preds = %94, %90, %111, %107
  fence seq_cst
  br label %117

117:                                              ; preds = %3, %116
  %118 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %7, align 8
  %119 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %118, i64 0, i32 86, i32 0, i32 0, i32 0
  %120 = load %"class.v8::internal::IncrementalMarking"*, %"class.v8::internal::IncrementalMarking"** %119, align 8
  %121 = getelementptr inbounds %"class.v8::internal::Page", %"class.v8::internal::Page"* %0, i64 0, i32 0
  %122 = sub i64 %1, %2
  %123 = bitcast %"class.v8::internal::MemoryChunk"** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %123)
  store %"class.v8::internal::MemoryChunk"* %121, %"class.v8::internal::MemoryChunk"** %6, align 8
  %124 = getelementptr inbounds %"class.v8::internal::IncrementalMarking", %"class.v8::internal::IncrementalMarking"* %120, i64 0, i32 24
  tail call void @_ZN2v84base5Mutex4LockEv(%"class.v8::base::Mutex"* %124) #13
  %125 = getelementptr inbounds %"class.v8::internal::IncrementalMarking", %"class.v8::internal::IncrementalMarking"* %120, i64 0, i32 25, i32 0
  %126 = bitcast %"class.std::__1::tuple"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %126) #13
  %127 = getelementptr inbounds %"class.std::__1::tuple", %"class.std::__1::tuple"* %4, i64 0, i32 0, i32 0, i32 0
  store %"class.v8::internal::MemoryChunk"** %6, %"class.v8::internal::MemoryChunk"*** %127, align 8
  %128 = getelementptr inbounds %"class.std::__1::tuple.1152", %"class.std::__1::tuple.1152"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %128) #13
  %129 = call { %"struct.std::__1::__hash_node_base.339"*, i8 } @_ZNSt3__112__hash_tableINS_17__hash_value_typeIPN2v88internal11MemoryChunkElEENS_22__unordered_map_hasherIS5_S6_NS_4hashIS5_EENS_8equal_toIS5_EELb1EEENS_21__unordered_map_equalIS5_S6_SB_S9_Lb1EEENS_9allocatorIS6_EEE25__emplace_unique_key_argsIS5_JRKNS_21piecewise_construct_tENS_5tupleIJRKS5_EEENSM_IJEEEEEENS_4pairINS_15__hash_iteratorIPNS_11__hash_nodeIS6_PvEEEEbEERKT_DpOT0_(%"class.std::__1::__hash_table.335"* %125, %"class.v8::internal::MemoryChunk"** nonnull dereferenceable(8) %6, %"struct.std::__1::piecewise_construct_t"* nonnull dereferenceable(1) @_ZNSt3__1L19piecewise_constructE, %"class.std::__1::tuple"* nonnull dereferenceable(8) %4, %"class.std::__1::tuple.1152"* nonnull dereferenceable(1) %5) #13
  %130 = extractvalue { %"struct.std::__1::__hash_node_base.339"*, i8 } %129, 0
  %131 = getelementptr inbounds %"struct.std::__1::__hash_node_base.339", %"struct.std::__1::__hash_node_base.339"* %130, i64 3
  %132 = bitcast %"struct.std::__1::__hash_node_base.339"* %131 to i64*
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %128) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %126) #13
  %133 = load i64, i64* %132, align 8
  %134 = add nsw i64 %122, %133
  store i64 %134, i64* %132, align 8
  call void @_ZN2v84base5Mutex6UnlockEv(%"class.v8::base::Mutex"* %124) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %123)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal5Space21AddAllocationObserverEPNS0_18AllocationObserverE(%"class.v8::internal::Space"*, %"class.v8::internal::AllocationObserver"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Space", %"class.v8::internal::Space"* %0, i64 0, i32 1
  tail call void @_ZN2v88internal17AllocationCounter21AddAllocationObserverEPNS0_18AllocationObserverE(%"class.v8::internal::AllocationCounter"* %3, %"class.v8::internal::AllocationObserver"* %1) #13
  ret void
}

declare void @_ZN2v88internal17AllocationCounter21AddAllocationObserverEPNS0_18AllocationObserverE(%"class.v8::internal::AllocationCounter"*, %"class.v8::internal::AllocationObserver"*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal5Space24RemoveAllocationObserverEPNS0_18AllocationObserverE(%"class.v8::internal::Space"*, %"class.v8::internal::AllocationObserver"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Space", %"class.v8::internal::Space"* %0, i64 0, i32 1
  tail call void @_ZN2v88internal17AllocationCounter24RemoveAllocationObserverEPNS0_18AllocationObserverE(%"class.v8::internal::AllocationCounter"* %3, %"class.v8::internal::AllocationObserver"* %1) #13
  ret void
}

declare void @_ZN2v88internal17AllocationCounter24RemoveAllocationObserverEPNS0_18AllocationObserverE(%"class.v8::internal::AllocationCounter"*, %"class.v8::internal::AllocationObserver"*) local_unnamed_addr #5

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2v88internal5Space24PauseAllocationObserversEv(%"class.v8::internal::Space"* nocapture) unnamed_addr #8 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Space", %"class.v8::internal::Space"* %0, i64 0, i32 1, i32 3
  store i8 1, i8* %2, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2v88internal5Space25ResumeAllocationObserversEv(%"class.v8::internal::Space"* nocapture) unnamed_addr #8 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Space", %"class.v8::internal::Space"* %0, i64 0, i32 1, i32 3
  store i8 0, i8* %2, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN2v88internal19SpaceWithLinearArea12ComputeLimitEmmm(%"class.v8::internal::SpaceWithLinearArea"*, i64, i64, i64) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::SpaceWithLinearArea", %"class.v8::internal::SpaceWithLinearArea"* %0, i64 0, i32 0, i32 0, i32 1
  %6 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %6, i64 0, i32 58
  %8 = load i8, i8* %7, align 8, !range !4
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %12, label %10

10:                                               ; preds = %4
  %11 = add i64 %3, %1
  br label %50

12:                                               ; preds = %4
  %13 = bitcast %"class.v8::internal::SpaceWithLinearArea"* %0 to i1 (%"class.v8::internal::SpaceWithLinearArea"*)***
  %14 = load i1 (%"class.v8::internal::SpaceWithLinearArea"*)**, i1 (%"class.v8::internal::SpaceWithLinearArea"*)*** %13, align 8
  %15 = getelementptr inbounds i1 (%"class.v8::internal::SpaceWithLinearArea"*)*, i1 (%"class.v8::internal::SpaceWithLinearArea"*)** %14, i64 16
  %16 = load i1 (%"class.v8::internal::SpaceWithLinearArea"*)*, i1 (%"class.v8::internal::SpaceWithLinearArea"*)** %15, align 8
  %17 = tail call zeroext i1 %16(%"class.v8::internal::SpaceWithLinearArea"* %0) #13
  br i1 %17, label %18, label %50

18:                                               ; preds = %12
  %19 = getelementptr inbounds %"class.v8::internal::SpaceWithLinearArea", %"class.v8::internal::SpaceWithLinearArea"* %0, i64 0, i32 0, i32 1, i32 3
  %20 = load i8, i8* %19, align 8, !range !4
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %22, label %50

22:                                               ; preds = %18
  %23 = getelementptr inbounds %"class.v8::internal::SpaceWithLinearArea", %"class.v8::internal::SpaceWithLinearArea"* %0, i64 0, i32 0, i32 1
  %24 = getelementptr inbounds %"class.v8::internal::SpaceWithLinearArea", %"class.v8::internal::SpaceWithLinearArea"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %25 = bitcast %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"** %24 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = bitcast %"class.v8::internal::AllocationCounter"* %23 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = icmp eq i64 %26, %28
  br i1 %29, label %50, label %30

30:                                               ; preds = %22
  %31 = getelementptr inbounds %"class.v8::internal::SpaceWithLinearArea", %"class.v8::internal::SpaceWithLinearArea"* %0, i64 0, i32 0
  %32 = getelementptr inbounds %"class.v8::internal::SpaceWithLinearArea", %"class.v8::internal::SpaceWithLinearArea"* %0, i64 0, i32 0, i32 1, i32 6
  %33 = load i64, i64* %32, align 8
  %34 = getelementptr inbounds %"class.v8::internal::SpaceWithLinearArea", %"class.v8::internal::SpaceWithLinearArea"* %0, i64 0, i32 0, i32 1, i32 5
  %35 = load i64, i64* %34, align 8
  %36 = sub i64 %33, %35
  %37 = trunc i64 %36 to i32
  %38 = add i32 %37, -1
  %39 = bitcast %"class.v8::internal::SpaceWithLinearArea"* %0 to i32 (%"class.v8::internal::Space"*, i32)***
  %40 = load i32 (%"class.v8::internal::Space"*, i32)**, i32 (%"class.v8::internal::Space"*, i32)*** %39, align 8
  %41 = getelementptr inbounds i32 (%"class.v8::internal::Space"*, i32)*, i32 (%"class.v8::internal::Space"*, i32)** %40, i64 13
  %42 = load i32 (%"class.v8::internal::Space"*, i32)*, i32 (%"class.v8::internal::Space"*, i32)** %41, align 8
  %43 = tail call i32 %42(%"class.v8::internal::Space"* %31, i32 %38) #13
  %44 = sext i32 %43 to i64
  %45 = icmp ugt i64 %44, %3
  %46 = select i1 %45, i64 %44, i64 %3
  %47 = add i64 %46, %1
  %48 = icmp ugt i64 %47, %2
  %49 = select i1 %48, i64 %2, i64 %47
  br label %50

50:                                               ; preds = %22, %18, %12, %30, %10
  %51 = phi i64 [ %11, %10 ], [ %49, %30 ], [ %2, %22 ], [ %2, %12 ], [ %2, %18 ]
  ret i64 %51
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2v88internal19SpaceWithLinearArea23UpdateAllocationOriginsENS0_16AllocationOriginE(%"class.v8::internal::SpaceWithLinearArea"* nocapture, i32) local_unnamed_addr #7 align 2 {
  %3 = sext i32 %1 to i64
  %4 = getelementptr inbounds %"class.v8::internal::SpaceWithLinearArea", %"class.v8::internal::SpaceWithLinearArea"* %0, i64 0, i32 2, i64 %3
  %5 = load i64, i64* %4, align 8
  %6 = add i64 %5, 1
  store i64 %6, i64* %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal19SpaceWithLinearArea23PrintAllocationsOriginsEv(%"class.v8::internal::SpaceWithLinearArea"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::SpaceWithLinearArea", %"class.v8::internal::SpaceWithLinearArea"* %0, i64 0, i32 0, i32 0, i32 1
  %3 = bitcast %"class.v8::internal::Heap"** %2 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, -41416
  %6 = inttoptr i64 %5 to i8*
  %7 = getelementptr inbounds %"class.v8::internal::SpaceWithLinearArea", %"class.v8::internal::SpaceWithLinearArea"* %0, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 8
  %9 = tail call i8* @_ZN2v88internal9BaseSpace12GetSpaceNameENS0_15AllocationSpaceE(i32 %8) #13
  %10 = getelementptr inbounds %"class.v8::internal::SpaceWithLinearArea", %"class.v8::internal::SpaceWithLinearArea"* %0, i64 0, i32 2, i64 0
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %"class.v8::internal::SpaceWithLinearArea", %"class.v8::internal::SpaceWithLinearArea"* %0, i64 0, i32 2, i64 1
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %"class.v8::internal::SpaceWithLinearArea", %"class.v8::internal::SpaceWithLinearArea"* %0, i64 0, i32 2, i64 2
  %15 = load i64, i64* %14, align 8
  tail call void (i8*, i8*, ...) @_ZN2v88internal12PrintIsolateEPvPKcz(i8* %6, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.6, i64 0, i64 0), i8* %9, i64 %11, i64 %13, i64 %15) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal21LocalAllocationBuffer20CloseAndMakeIterableEv(%"class.v8::internal::LinearAllocationArea"* noalias nocapture sret, %"class.v8::internal::LocalAllocationBuffer"* nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::LocalAllocationBuffer", %"class.v8::internal::LocalAllocationBuffer"* %1, i64 0, i32 1, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %18, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.v8::internal::LocalAllocationBuffer", %"class.v8::internal::LocalAllocationBuffer"* %1, i64 0, i32 0
  %8 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::LocalAllocationBuffer", %"class.v8::internal::LocalAllocationBuffer"* %1, i64 0, i32 1, i32 2
  %10 = load i64, i64* %9, align 8
  %11 = sub i64 %10, %4
  %12 = trunc i64 %11 to i32
  tail call void @_ZN2v88internal4Heap30CreateFillerObjectAtBackgroundEmiNS0_20ClearFreedMemoryModeE(%"class.v8::internal::Heap"* %8, i64 %4, i32 %12, i32 1) #13
  %13 = getelementptr inbounds %"class.v8::internal::LocalAllocationBuffer", %"class.v8::internal::LocalAllocationBuffer"* %1, i64 0, i32 1
  %14 = bitcast %"class.v8::internal::LinearAllocationArea"* %0 to i8*
  %15 = bitcast %"class.v8::internal::LinearAllocationArea"* %13 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %14, i8* align 8 %15, i64 24, i1 false)
  %16 = getelementptr inbounds %"class.v8::internal::LocalAllocationBuffer", %"class.v8::internal::LocalAllocationBuffer"* %1, i64 0, i32 1, i32 0
  %17 = bitcast i64* %16 to i8*
  br label %20

18:                                               ; preds = %2
  %19 = bitcast %"class.v8::internal::LinearAllocationArea"* %0 to i8*
  br label %20

20:                                               ; preds = %18, %6
  %21 = phi i8* [ %19, %18 ], [ %17, %6 ]
  call void @llvm.memset.p0i8.i64(i8* align 8 %21, i8 0, i64 24, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal21LocalAllocationBuffer12MakeIterableEv(%"class.v8::internal::LocalAllocationBuffer"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::LocalAllocationBuffer", %"class.v8::internal::LocalAllocationBuffer"* %0, i64 0, i32 1, i32 1
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %12, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.v8::internal::LocalAllocationBuffer", %"class.v8::internal::LocalAllocationBuffer"* %0, i64 0, i32 0
  %7 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::LocalAllocationBuffer", %"class.v8::internal::LocalAllocationBuffer"* %0, i64 0, i32 1, i32 2
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %9, %3
  %11 = trunc i64 %10 to i32
  tail call void @_ZN2v88internal4Heap30CreateFillerObjectAtBackgroundEmiNS0_20ClearFreedMemoryModeE(%"class.v8::internal::Heap"* %7, i64 %3, i32 %11, i32 1) #13
  br label %12

12:                                               ; preds = %1, %5
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

declare void @_ZN2v88internal4Heap30CreateFillerObjectAtBackgroundEmiNS0_20ClearFreedMemoryModeE(%"class.v8::internal::Heap"*, i64, i32, i32) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal21LocalAllocationBufferC2EPNS0_4HeapENS0_20LinearAllocationAreaE(%"class.v8::internal::LocalAllocationBuffer"* nocapture, %"class.v8::internal::Heap"*, %"class.v8::internal::LinearAllocationArea"* nocapture readonly byval(%"class.v8::internal::LinearAllocationArea") align 8) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::LocalAllocationBuffer", %"class.v8::internal::LocalAllocationBuffer"* %0, i64 0, i32 0
  store %"class.v8::internal::Heap"* %1, %"class.v8::internal::Heap"** %4, align 8
  %5 = getelementptr inbounds %"class.v8::internal::LocalAllocationBuffer", %"class.v8::internal::LocalAllocationBuffer"* %0, i64 0, i32 1
  %6 = bitcast %"class.v8::internal::LinearAllocationArea"* %5 to i8*
  %7 = bitcast %"class.v8::internal::LinearAllocationArea"* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* nonnull align 8 %7, i64 24, i1 false)
  %8 = getelementptr inbounds %"class.v8::internal::LocalAllocationBuffer", %"class.v8::internal::LocalAllocationBuffer"* %0, i64 0, i32 1, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %16, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.v8::internal::LocalAllocationBuffer", %"class.v8::internal::LocalAllocationBuffer"* %0, i64 0, i32 1, i32 2
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 %13, %9
  %15 = trunc i64 %14 to i32
  tail call void @_ZN2v88internal4Heap30CreateFillerObjectAtBackgroundEmiNS0_20ClearFreedMemoryModeE(%"class.v8::internal::Heap"* %1, i64 %9, i32 %15, i32 1) #13
  br label %16

16:                                               ; preds = %3, %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal21LocalAllocationBufferC2EOS1_(%"class.v8::internal::LocalAllocationBuffer"* nocapture, %"class.v8::internal::LocalAllocationBuffer"* nocapture dereferenceable(32)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::LocalAllocationBuffer", %"class.v8::internal::LocalAllocationBuffer"* %0, i64 0, i32 1
  %4 = bitcast %"class.v8::internal::LinearAllocationArea"* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 24, i1 false) #13
  %5 = bitcast %"class.v8::internal::LocalAllocationBuffer"* %1 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.v8::internal::LocalAllocationBuffer"* %0 to i64*
  store i64 %6, i64* %7, align 8
  %8 = getelementptr inbounds %"class.v8::internal::LocalAllocationBuffer", %"class.v8::internal::LocalAllocationBuffer"* %1, i64 0, i32 1
  %9 = bitcast %"class.v8::internal::LinearAllocationArea"* %8 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %9, i64 24, i1 false) #13
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 24, i1 false) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(32) %"class.v8::internal::LocalAllocationBuffer"* @_ZN2v88internal21LocalAllocationBufferaSEOS1_(%"class.v8::internal::LocalAllocationBuffer"* returned, %"class.v8::internal::LocalAllocationBuffer"* nocapture dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.v8::internal::LocalAllocationBuffer"* %1 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = bitcast %"class.v8::internal::LocalAllocationBuffer"* %0 to i64*
  store i64 %4, i64* %5, align 8
  %6 = getelementptr inbounds %"class.v8::internal::LocalAllocationBuffer", %"class.v8::internal::LocalAllocationBuffer"* %1, i64 0, i32 1
  %7 = getelementptr inbounds %"class.v8::internal::LocalAllocationBuffer", %"class.v8::internal::LocalAllocationBuffer"* %0, i64 0, i32 1
  %8 = bitcast %"class.v8::internal::LinearAllocationArea"* %7 to i8*
  %9 = bitcast %"class.v8::internal::LinearAllocationArea"* %6 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 24, i1 false)
  %10 = bitcast %"class.v8::internal::LinearAllocationArea"* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 24, i1 false)
  ret %"class.v8::internal::LocalAllocationBuffer"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal19SpaceWithLinearArea21AddAllocationObserverEPNS0_18AllocationObserverE(%"class.v8::internal::SpaceWithLinearArea"*, %"class.v8::internal::AllocationObserver"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::SpaceWithLinearArea", %"class.v8::internal::SpaceWithLinearArea"* %0, i64 0, i32 0, i32 1
  %4 = getelementptr inbounds %"class.v8::internal::SpaceWithLinearArea", %"class.v8::internal::SpaceWithLinearArea"* %0, i64 0, i32 0, i32 1, i32 7
  %5 = load i8, i8* %4, align 8, !range !4
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %37

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.v8::internal::SpaceWithLinearArea", %"class.v8::internal::SpaceWithLinearArea"* %0, i64 0, i32 1, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %32, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.v8::internal::SpaceWithLinearArea", %"class.v8::internal::SpaceWithLinearArea"* %0, i64 0, i32 1, i32 0
  %13 = load i64, i64* %12, align 8
  %14 = icmp eq i64 %9, %13
  br i1 %14, label %32, label %15

15:                                               ; preds = %11
  %16 = sub i64 %9, %13
  tail call void @_ZN2v88internal17AllocationCounter26AdvanceAllocationObserversEm(%"class.v8::internal::AllocationCounter"* %3, i64 %16) #13
  %17 = load i64, i64* %8, align 8
  store i64 %17, i64* %12, align 8
  %18 = getelementptr inbounds %"class.v8::internal::SpaceWithLinearArea", %"class.v8::internal::SpaceWithLinearArea"* %0, i64 0, i32 0, i32 0, i32 2
  %19 = load i32, i32* %18, align 8
  %20 = icmp eq i32 %19, 7
  br i1 %20, label %21, label %32

21:                                               ; preds = %15
  %22 = getelementptr inbounds %"class.v8::internal::SpaceWithLinearArea", %"class.v8::internal::SpaceWithLinearArea"* %0, i64 0, i32 0, i32 0, i32 1
  %23 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %22, align 8
  %24 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %23, i64 0, i32 24
  %25 = load %"class.v8::internal::NewSpace"*, %"class.v8::internal::NewSpace"** %24, align 8
  %26 = getelementptr inbounds %"class.v8::internal::NewSpace", %"class.v8::internal::NewSpace"* %25, i64 0, i32 0, i32 0, i32 0, i32 1
  %27 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %26, align 8
  %28 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %27, i64 0, i32 129
  tail call void @_ZN2v84base11SharedMutex13LockExclusiveEv(%"class.v8::base::SharedMutex"* %28) #13
  %29 = getelementptr inbounds %"class.v8::internal::NewSpace", %"class.v8::internal::NewSpace"* %25, i64 0, i32 0, i32 1, i32 1
  %30 = load i64, i64* %29, align 8
  %31 = getelementptr inbounds %"class.v8::internal::NewSpace", %"class.v8::internal::NewSpace"* %25, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  store atomic i64 %30, i64* %31 release, align 8
  tail call void @_ZN2v84base11SharedMutex15UnlockExclusiveEv(%"class.v8::base::SharedMutex"* %28) #13
  br label %32

32:                                               ; preds = %7, %11, %15, %21
  tail call void @_ZN2v88internal17AllocationCounter21AddAllocationObserverEPNS0_18AllocationObserverE(%"class.v8::internal::AllocationCounter"* %3, %"class.v8::internal::AllocationObserver"* %1) #13
  %33 = bitcast %"class.v8::internal::SpaceWithLinearArea"* %0 to void (%"class.v8::internal::SpaceWithLinearArea"*, i64)***
  %34 = load void (%"class.v8::internal::SpaceWithLinearArea"*, i64)**, void (%"class.v8::internal::SpaceWithLinearArea"*, i64)*** %33, align 8
  %35 = getelementptr inbounds void (%"class.v8::internal::SpaceWithLinearArea"*, i64)*, void (%"class.v8::internal::SpaceWithLinearArea"*, i64)** %34, i64 17
  %36 = load void (%"class.v8::internal::SpaceWithLinearArea"*, i64)*, void (%"class.v8::internal::SpaceWithLinearArea"*, i64)** %35, align 8
  tail call void %36(%"class.v8::internal::SpaceWithLinearArea"* %0, i64 0) #13
  br label %38

37:                                               ; preds = %2
  tail call void @_ZN2v88internal17AllocationCounter21AddAllocationObserverEPNS0_18AllocationObserverE(%"class.v8::internal::AllocationCounter"* %3, %"class.v8::internal::AllocationObserver"* %1) #13
  br label %38

38:                                               ; preds = %37, %32
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal19SpaceWithLinearArea26AdvanceAllocationObserversEv(%"class.v8::internal::SpaceWithLinearArea"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::SpaceWithLinearArea", %"class.v8::internal::SpaceWithLinearArea"* %0, i64 0, i32 1, i32 1
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %27, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.v8::internal::SpaceWithLinearArea", %"class.v8::internal::SpaceWithLinearArea"* %0, i64 0, i32 1, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = icmp eq i64 %3, %7
  br i1 %8, label %27, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.v8::internal::SpaceWithLinearArea", %"class.v8::internal::SpaceWithLinearArea"* %0, i64 0, i32 0, i32 1
  %11 = sub i64 %3, %7
  tail call void @_ZN2v88internal17AllocationCounter26AdvanceAllocationObserversEm(%"class.v8::internal::AllocationCounter"* %10, i64 %11) #13
  %12 = load i64, i64* %2, align 8
  store i64 %12, i64* %6, align 8
  %13 = getelementptr inbounds %"class.v8::internal::SpaceWithLinearArea", %"class.v8::internal::SpaceWithLinearArea"* %0, i64 0, i32 0, i32 0, i32 2
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq i32 %14, 7
  br i1 %15, label %16, label %27

16:                                               ; preds = %9
  %17 = getelementptr inbounds %"class.v8::internal::SpaceWithLinearArea", %"class.v8::internal::SpaceWithLinearArea"* %0, i64 0, i32 0, i32 0, i32 1
  %18 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %17, align 8
  %19 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %18, i64 0, i32 24
  %20 = load %"class.v8::internal::NewSpace"*, %"class.v8::internal::NewSpace"** %19, align 8
  %21 = getelementptr inbounds %"class.v8::internal::NewSpace", %"class.v8::internal::NewSpace"* %20, i64 0, i32 0, i32 0, i32 0, i32 1
  %22 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %21, align 8
  %23 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %22, i64 0, i32 129
  tail call void @_ZN2v84base11SharedMutex13LockExclusiveEv(%"class.v8::base::SharedMutex"* %23) #13
  %24 = getelementptr inbounds %"class.v8::internal::NewSpace", %"class.v8::internal::NewSpace"* %20, i64 0, i32 0, i32 1, i32 1
  %25 = load i64, i64* %24, align 8
  %26 = getelementptr inbounds %"class.v8::internal::NewSpace", %"class.v8::internal::NewSpace"* %20, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  store atomic i64 %25, i64* %26 release, align 8
  tail call void @_ZN2v84base11SharedMutex15UnlockExclusiveEv(%"class.v8::base::SharedMutex"* %23) #13
  br label %27

27:                                               ; preds = %16, %9, %5, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal19SpaceWithLinearArea24RemoveAllocationObserverEPNS0_18AllocationObserverE(%"class.v8::internal::SpaceWithLinearArea"*, %"class.v8::internal::AllocationObserver"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::SpaceWithLinearArea", %"class.v8::internal::SpaceWithLinearArea"* %0, i64 0, i32 0, i32 1
  %4 = getelementptr inbounds %"class.v8::internal::SpaceWithLinearArea", %"class.v8::internal::SpaceWithLinearArea"* %0, i64 0, i32 0, i32 1, i32 7
  %5 = load i8, i8* %4, align 8, !range !4
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %37

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.v8::internal::SpaceWithLinearArea", %"class.v8::internal::SpaceWithLinearArea"* %0, i64 0, i32 1, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %32, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.v8::internal::SpaceWithLinearArea", %"class.v8::internal::SpaceWithLinearArea"* %0, i64 0, i32 1, i32 0
  %13 = load i64, i64* %12, align 8
  %14 = icmp eq i64 %9, %13
  br i1 %14, label %32, label %15

15:                                               ; preds = %11
  %16 = sub i64 %9, %13
  tail call void @_ZN2v88internal17AllocationCounter26AdvanceAllocationObserversEm(%"class.v8::internal::AllocationCounter"* %3, i64 %16) #13
  %17 = load i64, i64* %8, align 8
  store i64 %17, i64* %12, align 8
  %18 = getelementptr inbounds %"class.v8::internal::SpaceWithLinearArea", %"class.v8::internal::SpaceWithLinearArea"* %0, i64 0, i32 0, i32 0, i32 2
  %19 = load i32, i32* %18, align 8
  %20 = icmp eq i32 %19, 7
  br i1 %20, label %21, label %32

21:                                               ; preds = %15
  %22 = getelementptr inbounds %"class.v8::internal::SpaceWithLinearArea", %"class.v8::internal::SpaceWithLinearArea"* %0, i64 0, i32 0, i32 0, i32 1
  %23 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %22, align 8
  %24 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %23, i64 0, i32 24
  %25 = load %"class.v8::internal::NewSpace"*, %"class.v8::internal::NewSpace"** %24, align 8
  %26 = getelementptr inbounds %"class.v8::internal::NewSpace", %"class.v8::internal::NewSpace"* %25, i64 0, i32 0, i32 0, i32 0, i32 1
  %27 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %26, align 8
  %28 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %27, i64 0, i32 129
  tail call void @_ZN2v84base11SharedMutex13LockExclusiveEv(%"class.v8::base::SharedMutex"* %28) #13
  %29 = getelementptr inbounds %"class.v8::internal::NewSpace", %"class.v8::internal::NewSpace"* %25, i64 0, i32 0, i32 1, i32 1
  %30 = load i64, i64* %29, align 8
  %31 = getelementptr inbounds %"class.v8::internal::NewSpace", %"class.v8::internal::NewSpace"* %25, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  store atomic i64 %30, i64* %31 release, align 8
  tail call void @_ZN2v84base11SharedMutex15UnlockExclusiveEv(%"class.v8::base::SharedMutex"* %28) #13
  br label %32

32:                                               ; preds = %7, %11, %15, %21
  tail call void @_ZN2v88internal17AllocationCounter24RemoveAllocationObserverEPNS0_18AllocationObserverE(%"class.v8::internal::AllocationCounter"* %3, %"class.v8::internal::AllocationObserver"* %1) #13
  %33 = bitcast %"class.v8::internal::SpaceWithLinearArea"* %0 to void (%"class.v8::internal::SpaceWithLinearArea"*, i64)***
  %34 = load void (%"class.v8::internal::SpaceWithLinearArea"*, i64)**, void (%"class.v8::internal::SpaceWithLinearArea"*, i64)*** %33, align 8
  %35 = getelementptr inbounds void (%"class.v8::internal::SpaceWithLinearArea"*, i64)*, void (%"class.v8::internal::SpaceWithLinearArea"*, i64)** %34, i64 17
  %36 = load void (%"class.v8::internal::SpaceWithLinearArea"*, i64)*, void (%"class.v8::internal::SpaceWithLinearArea"*, i64)** %35, align 8
  tail call void %36(%"class.v8::internal::SpaceWithLinearArea"* %0, i64 0) #13
  br label %38

37:                                               ; preds = %2
  tail call void @_ZN2v88internal17AllocationCounter24RemoveAllocationObserverEPNS0_18AllocationObserverE(%"class.v8::internal::AllocationCounter"* %3, %"class.v8::internal::AllocationObserver"* %1) #13
  br label %38

38:                                               ; preds = %37, %32
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal19SpaceWithLinearArea24PauseAllocationObserversEv(%"class.v8::internal::SpaceWithLinearArea"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::SpaceWithLinearArea", %"class.v8::internal::SpaceWithLinearArea"* %0, i64 0, i32 1, i32 1
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %27, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.v8::internal::SpaceWithLinearArea", %"class.v8::internal::SpaceWithLinearArea"* %0, i64 0, i32 1, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = icmp eq i64 %3, %7
  br i1 %8, label %27, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.v8::internal::SpaceWithLinearArea", %"class.v8::internal::SpaceWithLinearArea"* %0, i64 0, i32 0, i32 1
  %11 = sub i64 %3, %7
  tail call void @_ZN2v88internal17AllocationCounter26AdvanceAllocationObserversEm(%"class.v8::internal::AllocationCounter"* %10, i64 %11) #13
  %12 = load i64, i64* %2, align 8
  store i64 %12, i64* %6, align 8
  %13 = getelementptr inbounds %"class.v8::internal::SpaceWithLinearArea", %"class.v8::internal::SpaceWithLinearArea"* %0, i64 0, i32 0, i32 0, i32 2
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq i32 %14, 7
  br i1 %15, label %16, label %27

16:                                               ; preds = %9
  %17 = getelementptr inbounds %"class.v8::internal::SpaceWithLinearArea", %"class.v8::internal::SpaceWithLinearArea"* %0, i64 0, i32 0, i32 0, i32 1
  %18 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %17, align 8
  %19 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %18, i64 0, i32 24
  %20 = load %"class.v8::internal::NewSpace"*, %"class.v8::internal::NewSpace"** %19, align 8
  %21 = getelementptr inbounds %"class.v8::internal::NewSpace", %"class.v8::internal::NewSpace"* %20, i64 0, i32 0, i32 0, i32 0, i32 1
  %22 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %21, align 8
  %23 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %22, i64 0, i32 129
  tail call void @_ZN2v84base11SharedMutex13LockExclusiveEv(%"class.v8::base::SharedMutex"* %23) #13
  %24 = getelementptr inbounds %"class.v8::internal::NewSpace", %"class.v8::internal::NewSpace"* %20, i64 0, i32 0, i32 1, i32 1
  %25 = load i64, i64* %24, align 8
  %26 = getelementptr inbounds %"class.v8::internal::NewSpace", %"class.v8::internal::NewSpace"* %20, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  store atomic i64 %25, i64* %26 release, align 8
  tail call void @_ZN2v84base11SharedMutex15UnlockExclusiveEv(%"class.v8::base::SharedMutex"* %23) #13
  br label %27

27:                                               ; preds = %1, %5, %9, %16
  %28 = getelementptr inbounds %"class.v8::internal::SpaceWithLinearArea", %"class.v8::internal::SpaceWithLinearArea"* %0, i64 0, i32 0, i32 1, i32 3
  store i8 1, i8* %28, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal19SpaceWithLinearArea25ResumeAllocationObserversEv(%"class.v8::internal::SpaceWithLinearArea"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::SpaceWithLinearArea", %"class.v8::internal::SpaceWithLinearArea"* %0, i64 0, i32 0, i32 1, i32 3
  store i8 0, i8* %2, align 8
  %3 = getelementptr inbounds %"class.v8::internal::SpaceWithLinearArea", %"class.v8::internal::SpaceWithLinearArea"* %0, i64 0, i32 1, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::SpaceWithLinearArea", %"class.v8::internal::SpaceWithLinearArea"* %0, i64 0, i32 1, i32 0
  store i64 %4, i64* %5, align 8
  %6 = getelementptr inbounds %"class.v8::internal::SpaceWithLinearArea", %"class.v8::internal::SpaceWithLinearArea"* %0, i64 0, i32 0, i32 0, i32 2
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 7
  br i1 %8, label %9, label %20

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.v8::internal::SpaceWithLinearArea", %"class.v8::internal::SpaceWithLinearArea"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %10, align 8
  %12 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %11, i64 0, i32 24
  %13 = load %"class.v8::internal::NewSpace"*, %"class.v8::internal::NewSpace"** %12, align 8
  %14 = getelementptr inbounds %"class.v8::internal::NewSpace", %"class.v8::internal::NewSpace"* %13, i64 0, i32 0, i32 0, i32 0, i32 1
  %15 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %14, align 8
  %16 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %15, i64 0, i32 129
  tail call void @_ZN2v84base11SharedMutex13LockExclusiveEv(%"class.v8::base::SharedMutex"* %16) #13
  %17 = getelementptr inbounds %"class.v8::internal::NewSpace", %"class.v8::internal::NewSpace"* %13, i64 0, i32 0, i32 1, i32 1
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds %"class.v8::internal::NewSpace", %"class.v8::internal::NewSpace"* %13, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  store atomic i64 %18, i64* %19 release, align 8
  tail call void @_ZN2v84base11SharedMutex15UnlockExclusiveEv(%"class.v8::base::SharedMutex"* %16) #13
  br label %20

20:                                               ; preds = %1, %9
  %21 = bitcast %"class.v8::internal::SpaceWithLinearArea"* %0 to void (%"class.v8::internal::SpaceWithLinearArea"*, i64)***
  %22 = load void (%"class.v8::internal::SpaceWithLinearArea"*, i64)**, void (%"class.v8::internal::SpaceWithLinearArea"*, i64)*** %21, align 8
  %23 = getelementptr inbounds void (%"class.v8::internal::SpaceWithLinearArea"*, i64)*, void (%"class.v8::internal::SpaceWithLinearArea"*, i64)** %22, i64 17
  %24 = load void (%"class.v8::internal::SpaceWithLinearArea"*, i64)*, void (%"class.v8::internal::SpaceWithLinearArea"*, i64)** %23, align 8
  tail call void %24(%"class.v8::internal::SpaceWithLinearArea"* %0, i64 0) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal19SpaceWithLinearArea23MarkLabStartInitializedEv(%"class.v8::internal::SpaceWithLinearArea"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::SpaceWithLinearArea", %"class.v8::internal::SpaceWithLinearArea"* %0, i64 0, i32 1, i32 1
  %3 = load i64, i64* %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::SpaceWithLinearArea", %"class.v8::internal::SpaceWithLinearArea"* %0, i64 0, i32 1, i32 0
  store i64 %3, i64* %4, align 8
  %5 = getelementptr inbounds %"class.v8::internal::SpaceWithLinearArea", %"class.v8::internal::SpaceWithLinearArea"* %0, i64 0, i32 0, i32 0, i32 2
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 7
  br i1 %7, label %8, label %19

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.v8::internal::SpaceWithLinearArea", %"class.v8::internal::SpaceWithLinearArea"* %0, i64 0, i32 0, i32 0, i32 1
  %10 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %9, align 8
  %11 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %10, i64 0, i32 24
  %12 = load %"class.v8::internal::NewSpace"*, %"class.v8::internal::NewSpace"** %11, align 8
  %13 = getelementptr inbounds %"class.v8::internal::NewSpace", %"class.v8::internal::NewSpace"* %12, i64 0, i32 0, i32 0, i32 0, i32 1
  %14 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %13, align 8
  %15 = getelementptr inbounds %"class.v8::internal::Heap", %"class.v8::internal::Heap"* %14, i64 0, i32 129
  tail call void @_ZN2v84base11SharedMutex13LockExclusiveEv(%"class.v8::base::SharedMutex"* %15) #13
  %16 = getelementptr inbounds %"class.v8::internal::NewSpace", %"class.v8::internal::NewSpace"* %12, i64 0, i32 0, i32 1, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %"class.v8::internal::NewSpace", %"class.v8::internal::NewSpace"* %12, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  store atomic i64 %17, i64* %18 release, align 8
  tail call void @_ZN2v84base11SharedMutex15UnlockExclusiveEv(%"class.v8::base::SharedMutex"* %15) #13
  br label %19

19:                                               ; preds = %8, %1
  ret void
}

declare void @_ZN2v88internal17AllocationCounter26AdvanceAllocationObserversEm(%"class.v8::internal::AllocationCounter"*, i64) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal19SpaceWithLinearArea25InvokeAllocationObserversEmmmm(%"class.v8::internal::SpaceWithLinearArea"*, i64, i64, i64, i64) local_unnamed_addr #0 align 2 {
  %6 = bitcast %"class.v8::internal::SpaceWithLinearArea"* %0 to i1 (%"class.v8::internal::SpaceWithLinearArea"*)***
  %7 = load i1 (%"class.v8::internal::SpaceWithLinearArea"*)**, i1 (%"class.v8::internal::SpaceWithLinearArea"*)*** %6, align 8
  %8 = getelementptr inbounds i1 (%"class.v8::internal::SpaceWithLinearArea"*)*, i1 (%"class.v8::internal::SpaceWithLinearArea"*)** %7, i64 16
  %9 = load i1 (%"class.v8::internal::SpaceWithLinearArea"*)*, i1 (%"class.v8::internal::SpaceWithLinearArea"*)** %8, align 8
  %10 = tail call zeroext i1 %9(%"class.v8::internal::SpaceWithLinearArea"* %0) #13
  br i1 %10, label %11, label %44

11:                                               ; preds = %5
  %12 = getelementptr inbounds %"class.v8::internal::SpaceWithLinearArea", %"class.v8::internal::SpaceWithLinearArea"* %0, i64 0, i32 0, i32 1
  %13 = getelementptr inbounds %"class.v8::internal::SpaceWithLinearArea", %"class.v8::internal::SpaceWithLinearArea"* %0, i64 0, i32 0, i32 1, i32 3
  %14 = load i8, i8* %13, align 8, !range !4
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %16, label %44

16:                                               ; preds = %11
  %17 = getelementptr inbounds %"class.v8::internal::SpaceWithLinearArea", %"class.v8::internal::SpaceWithLinearArea"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %18 = bitcast %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %"class.v8::internal::AllocationCounter"* %12 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = icmp eq i64 %19, %21
  br i1 %22, label %44, label %23

23:                                               ; preds = %16
  %24 = getelementptr inbounds %"class.v8::internal::SpaceWithLinearArea", %"class.v8::internal::SpaceWithLinearArea"* %0, i64 0, i32 0, i32 1, i32 6
  %25 = load i64, i64* %24, align 8
  %26 = getelementptr inbounds %"class.v8::internal::SpaceWithLinearArea", %"class.v8::internal::SpaceWithLinearArea"* %0, i64 0, i32 0, i32 1, i32 5
  %27 = load i64, i64* %26, align 8
  %28 = sub i64 %25, %27
  %29 = icmp ugt i64 %28, %4
  br i1 %29, label %44, label %30

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"class.v8::internal::SpaceWithLinearArea", %"class.v8::internal::SpaceWithLinearArea"* %0, i64 0, i32 0, i32 0, i32 2
  %32 = load i32, i32* %31, align 8
  %33 = icmp eq i32 %32, 2
  br i1 %33, label %34, label %39

34:                                               ; preds = %30
  %35 = and i64 %1, -262144
  %36 = inttoptr i64 %35 to %"class.v8::internal::MemoryChunk"*
  %37 = getelementptr inbounds %"class.v8::internal::SpaceWithLinearArea", %"class.v8::internal::SpaceWithLinearArea"* %0, i64 0, i32 0, i32 0, i32 1
  %38 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %37, align 8
  tail call void @_ZN2v88internal4Heap31UnprotectAndRegisterMemoryChunkEPNS0_11MemoryChunkE(%"class.v8::internal::Heap"* %38, %"class.v8::internal::MemoryChunk"* %36) #13
  br label %39

39:                                               ; preds = %34, %30
  %40 = getelementptr inbounds %"class.v8::internal::SpaceWithLinearArea", %"class.v8::internal::SpaceWithLinearArea"* %0, i64 0, i32 0, i32 0, i32 1
  %41 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %40, align 8
  %42 = trunc i64 %2 to i32
  %43 = tail call i64 @_ZN2v88internal4Heap20CreateFillerObjectAtEmiNS0_18ClearRecordedSlotsE(%"class.v8::internal::Heap"* %41, i64 %1, i32 %42, i32 1) #13
  tail call void @_ZN2v88internal17AllocationCounter25InvokeAllocationObserversEmmm(%"class.v8::internal::AllocationCounter"* %12, i64 %1, i64 %2, i64 %4) #13
  br label %44

44:                                               ; preds = %16, %11, %23, %5, %39
  ret void
}

declare void @_ZN2v88internal4Heap31UnprotectAndRegisterMemoryChunkEPNS0_11MemoryChunkE(%"class.v8::internal::Heap"*, %"class.v8::internal::MemoryChunk"*) local_unnamed_addr #5

declare void @_ZN2v88internal17AllocationCounter25InvokeAllocationObserversEmmm(%"class.v8::internal::AllocationCounter"*, i64, i64, i64) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal11MemoryChunk15FreeListsLengthEv(%"class.v8::internal::MemoryChunk"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::MemoryChunk", %"class.v8::internal::MemoryChunk"* %0, i64 0, i32 0, i32 8, i32 0
  %3 = bitcast %"struct.std::__1::__atomic_base.610"* %2 to i64*
  %4 = load atomic i64, i64* %3 seq_cst, align 8
  %5 = inttoptr i64 %4 to %"class.v8::internal::Space"*
  %6 = getelementptr inbounds %"class.v8::internal::Space", %"class.v8::internal::Space"* %5, i64 0, i32 4, i32 0, i32 0, i32 0
  %7 = load %"class.v8::internal::FreeList"*, %"class.v8::internal::FreeList"** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::FreeList", %"class.v8::internal::FreeList"* %7, i64 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = icmp slt i32 %9, 0
  br i1 %10, label %13, label %11

11:                                               ; preds = %1
  %12 = getelementptr inbounds %"class.v8::internal::MemoryChunk", %"class.v8::internal::MemoryChunk"* %0, i64 0, i32 13
  br label %15

13:                                               ; preds = %25, %1
  %14 = phi i32 [ 0, %1 ], [ %26, %25 ]
  ret i32 %14

15:                                               ; preds = %25, %11
  %16 = phi i64 [ %27, %25 ], [ 0, %11 ]
  %17 = phi i32 [ %26, %25 ], [ 0, %11 ]
  %18 = load %"class.v8::internal::FreeListCategory"**, %"class.v8::internal::FreeListCategory"*** %12, align 8
  %19 = getelementptr inbounds %"class.v8::internal::FreeListCategory"*, %"class.v8::internal::FreeListCategory"** %18, i64 %16
  %20 = load %"class.v8::internal::FreeListCategory"*, %"class.v8::internal::FreeListCategory"** %19, align 8
  %21 = icmp eq %"class.v8::internal::FreeListCategory"* %20, null
  br i1 %21, label %25, label %22

22:                                               ; preds = %15
  %23 = tail call i32 @_ZN2v88internal16FreeListCategory14FreeListLengthEv(%"class.v8::internal::FreeListCategory"* nonnull %20) #13
  %24 = add nsw i32 %23, %17
  br label %25

25:                                               ; preds = %15, %22
  %26 = phi i32 [ %24, %22 ], [ %17, %15 ]
  %27 = add nuw nsw i64 %16, 1
  %28 = load atomic i64, i64* %3 seq_cst, align 8
  %29 = inttoptr i64 %28 to %"class.v8::internal::Space"*
  %30 = getelementptr inbounds %"class.v8::internal::Space", %"class.v8::internal::Space"* %29, i64 0, i32 4, i32 0, i32 0, i32 0
  %31 = load %"class.v8::internal::FreeList"*, %"class.v8::internal::FreeList"** %30, align 8
  %32 = getelementptr inbounds %"class.v8::internal::FreeList", %"class.v8::internal::FreeList"* %31, i64 0, i32 2
  %33 = load i32, i32* %32, align 4
  %34 = sext i32 %33 to i64
  %35 = icmp slt i64 %16, %34
  br i1 %35, label %15, label %13
}

declare i32 @_ZN2v88internal16FreeListCategory14FreeListLengthEv(%"class.v8::internal::FreeListCategory"*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN2v88internal9BaseSpace15CommittedMemoryEv(%"class.v8::internal::BaseSpace"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::BaseSpace", %"class.v8::internal::BaseSpace"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load atomic i64, i64* %2 seq_cst, align 8
  ret i64 %3
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN2v88internal9BaseSpace22MaximumCommittedMemoryEv(%"class.v8::internal::BaseSpace"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::BaseSpace", %"class.v8::internal::BaseSpace"* %0, i64 0, i32 4
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal5SpaceD2Ev(%"class.v8::internal::Space"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Space", %"class.v8::internal::Space"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [18 x i8*] }, { [18 x i8*] }* @_ZTVN2v88internal5SpaceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.v8::internal::Space", %"class.v8::internal::Space"* %0, i64 0, i32 3
  %4 = load %"struct.std::__1::atomic"*, %"struct.std::__1::atomic"** %3, align 8
  %5 = icmp eq %"struct.std::__1::atomic"* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  %7 = bitcast %"struct.std::__1::atomic"* %4 to i8*
  tail call void @_ZdaPv(i8* %7) #12
  br label %8

8:                                                ; preds = %6, %1
  store %"struct.std::__1::atomic"* null, %"struct.std::__1::atomic"** %3, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Space", %"class.v8::internal::Space"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %10 = load %"class.v8::internal::FreeList"*, %"class.v8::internal::FreeList"** %9, align 8
  store %"class.v8::internal::FreeList"* null, %"class.v8::internal::FreeList"** %9, align 8
  %11 = icmp eq %"class.v8::internal::FreeList"* %10, null
  br i1 %11, label %17, label %12

12:                                               ; preds = %8
  %13 = bitcast %"class.v8::internal::FreeList"* %10 to void (%"class.v8::internal::FreeList"*)***
  %14 = load void (%"class.v8::internal::FreeList"*)**, void (%"class.v8::internal::FreeList"*)*** %13, align 8
  %15 = getelementptr inbounds void (%"class.v8::internal::FreeList"*)*, void (%"class.v8::internal::FreeList"*)** %14, i64 1
  %16 = load void (%"class.v8::internal::FreeList"*)*, void (%"class.v8::internal::FreeList"*)** %15, align 8
  tail call void %16(%"class.v8::internal::FreeList"* nonnull %10) #13
  br label %17

17:                                               ; preds = %8, %12
  %18 = getelementptr inbounds %"class.v8::internal::Space", %"class.v8::internal::Space"* %0, i64 0, i32 1, i32 2, i32 0, i32 1, i32 0, i32 0, i32 0
  %19 = load %"struct.std::__1::__hash_node_base.40"*, %"struct.std::__1::__hash_node_base.40"** %18, align 8
  %20 = icmp eq %"struct.std::__1::__hash_node_base.40"* %19, null
  br i1 %20, label %27, label %21

21:                                               ; preds = %17, %21
  %22 = phi %"struct.std::__1::__hash_node_base.40"* [ %24, %21 ], [ %19, %17 ]
  %23 = getelementptr inbounds %"struct.std::__1::__hash_node_base.40", %"struct.std::__1::__hash_node_base.40"* %22, i64 0, i32 0
  %24 = load %"struct.std::__1::__hash_node_base.40"*, %"struct.std::__1::__hash_node_base.40"** %23, align 8
  %25 = bitcast %"struct.std::__1::__hash_node_base.40"* %22 to i8*
  tail call void @_ZdlPv(i8* %25) #12
  %26 = icmp eq %"struct.std::__1::__hash_node_base.40"* %24, null
  br i1 %26, label %27, label %21

27:                                               ; preds = %21, %17
  %28 = getelementptr inbounds %"class.v8::internal::Space", %"class.v8::internal::Space"* %0, i64 0, i32 1, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %29 = load %"struct.std::__1::__hash_node_base.40"**, %"struct.std::__1::__hash_node_base.40"*** %28, align 8
  store %"struct.std::__1::__hash_node_base.40"** null, %"struct.std::__1::__hash_node_base.40"*** %28, align 8
  %30 = icmp eq %"struct.std::__1::__hash_node_base.40"** %29, null
  br i1 %30, label %33, label %31

31:                                               ; preds = %27
  %32 = bitcast %"struct.std::__1::__hash_node_base.40"** %29 to i8*
  tail call void @_ZdlPv(i8* %32) #12
  br label %33

33:                                               ; preds = %31, %27
  %34 = getelementptr inbounds %"class.v8::internal::Space", %"class.v8::internal::Space"* %0, i64 0, i32 1, i32 1, i32 0, i32 0
  %35 = load %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"*, %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"** %34, align 8
  %36 = icmp eq %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"* %35, null
  br i1 %36, label %42, label %37

37:                                               ; preds = %33
  %38 = ptrtoint %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"* %35 to i64
  %39 = getelementptr inbounds %"class.v8::internal::Space", %"class.v8::internal::Space"* %0, i64 0, i32 1, i32 1, i32 0, i32 1
  %40 = bitcast %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"** %39 to i64*
  store i64 %38, i64* %40, align 8
  %41 = bitcast %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"* %35 to i8*
  tail call void @_ZdlPv(i8* %41) #12
  br label %42

42:                                               ; preds = %37, %33
  %43 = getelementptr inbounds %"class.v8::internal::Space", %"class.v8::internal::Space"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %44 = load %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"*, %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"** %43, align 8
  %45 = icmp eq %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"* %44, null
  br i1 %45, label %51, label %46

46:                                               ; preds = %42
  %47 = ptrtoint %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"* %44 to i64
  %48 = getelementptr inbounds %"class.v8::internal::Space", %"class.v8::internal::Space"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %49 = bitcast %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"** %48 to i64*
  store i64 %47, i64* %49, align 8
  %50 = bitcast %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"* %44 to i8*
  tail call void @_ZdlPv(i8* %50) #12
  br label %51

51:                                               ; preds = %42, %46
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal5SpaceD0Ev(%"class.v8::internal::Space"*) unnamed_addr #0 comdat align 2 {
  tail call void @llvm.trap() #14
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal5Space29StartNextInlineAllocationStepEv(%"class.v8::internal::Space"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN2v88internal5Space13SizeOfObjectsEv(%"class.v8::internal::Space"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Space", %"class.v8::internal::Space"* %0, i64 0, i32 0
  %3 = bitcast %"class.v8::internal::Space"* %0 to i64 (%"class.v8::internal::BaseSpace"*)***
  %4 = load i64 (%"class.v8::internal::BaseSpace"*)**, i64 (%"class.v8::internal::BaseSpace"*)*** %3, align 8
  %5 = getelementptr inbounds i64 (%"class.v8::internal::BaseSpace"*)*, i64 (%"class.v8::internal::BaseSpace"*)** %4, i64 3
  %6 = load i64 (%"class.v8::internal::BaseSpace"*)*, i64 (%"class.v8::internal::BaseSpace"*)** %5, align 8
  %7 = tail call i64 %6(%"class.v8::internal::BaseSpace"* %2) #13
  ret i64 %7
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN2v88internal5Space30RoundSizeDownToObjectAlignmentEi(%"class.v8::internal::Space"*, i32) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Space", %"class.v8::internal::Space"* %0, i64 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 2
  %6 = select i1 %5, i32 -32, i32 -4
  %7 = and i32 %6, %1
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK2v88internal5Space25ExternalBackingStoreBytesENS0_24ExternalBackingStoreTypeE(%"class.v8::internal::Space"*, i32) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Space", %"class.v8::internal::Space"* %0, i64 0, i32 3
  %4 = load %"struct.std::__1::atomic"*, %"struct.std::__1::atomic"** %3, align 8
  %5 = zext i32 %1 to i64
  %6 = getelementptr inbounds %"struct.std::__1::atomic", %"struct.std::__1::atomic"* %4, i64 %5, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = load atomic i64, i64* %6 seq_cst, align 8
  ret i64 %7
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal19SpaceWithLinearAreaD0Ev(%"class.v8::internal::SpaceWithLinearArea"*) unnamed_addr #9 comdat align 2 {
  tail call void @llvm.trap() #14
  unreachable
}

declare i32 @_ZNK2v88internal10HeapObject11SizeFromMapENS0_3MapE(%"class.v8::internal::HeapObject"*, i64) local_unnamed_addr #5

declare void @_ZN2v84base5Mutex4LockEv(%"class.v8::base::Mutex"*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.std::__1::__hash_node_base.339"*, i8 } @_ZNSt3__112__hash_tableINS_17__hash_value_typeIPN2v88internal11MemoryChunkElEENS_22__unordered_map_hasherIS5_S6_NS_4hashIS5_EENS_8equal_toIS5_EELb1EEENS_21__unordered_map_equalIS5_S6_SB_S9_Lb1EEENS_9allocatorIS6_EEE25__emplace_unique_key_argsIS5_JRKNS_21piecewise_construct_tENS_5tupleIJRKS5_EEENSM_IJEEEEEENS_4pairINS_15__hash_iteratorIPNS_11__hash_nodeIS6_PvEEEEbEERKT_DpOT0_(%"class.std::__1::__hash_table.335"*, %"class.v8::internal::MemoryChunk"** dereferenceable(8), %"struct.std::__1::piecewise_construct_t"* dereferenceable(1), %"class.std::__1::tuple"* dereferenceable(8), %"class.std::__1::tuple.1152"* dereferenceable(1)) local_unnamed_addr #0 comdat align 2 {
  %6 = bitcast %"class.v8::internal::MemoryChunk"** %1 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = lshr i64 %7, 32
  %9 = shl i64 %7, 3
  %10 = and i64 %9, 4294967288
  %11 = add nuw nsw i64 %10, 8
  %12 = xor i64 %11, %8
  %13 = mul i64 %12, -7070675565921424023
  %14 = lshr i64 %13, 47
  %15 = xor i64 %13, %8
  %16 = xor i64 %15, %14
  %17 = mul i64 %16, -7070675565921424023
  %18 = lshr i64 %17, 47
  %19 = xor i64 %18, %17
  %20 = mul i64 %19, -7070675565921424023
  %21 = getelementptr inbounds %"class.std::__1::__hash_table.335", %"class.std::__1::__hash_table.335"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %22 = load i64, i64* %21, align 8
  %23 = icmp eq i64 %22, 0
  %24 = inttoptr i64 %7 to %"class.v8::internal::MemoryChunk"*
  br i1 %23, label %84, label %25

25:                                               ; preds = %5
  %26 = tail call i64 @llvm.ctpop.i64(i64 %22) #13, !range !10
  %27 = icmp ugt i64 %26, 1
  br i1 %27, label %31, label %28

28:                                               ; preds = %25
  %29 = add i64 %22, -1
  %30 = and i64 %20, %29
  br label %35

31:                                               ; preds = %25
  %32 = icmp ult i64 %20, %22
  br i1 %32, label %35, label %33

33:                                               ; preds = %31
  %34 = urem i64 %20, %22
  br label %35

35:                                               ; preds = %28, %31, %33
  %36 = phi i64 [ %30, %28 ], [ %34, %33 ], [ %20, %31 ]
  %37 = getelementptr inbounds %"class.std::__1::__hash_table.335", %"class.std::__1::__hash_table.335"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %38 = load %"struct.std::__1::__hash_node_base.339"**, %"struct.std::__1::__hash_node_base.339"*** %37, align 8
  %39 = getelementptr inbounds %"struct.std::__1::__hash_node_base.339"*, %"struct.std::__1::__hash_node_base.339"** %38, i64 %36
  %40 = load %"struct.std::__1::__hash_node_base.339"*, %"struct.std::__1::__hash_node_base.339"** %39, align 8
  %41 = icmp eq %"struct.std::__1::__hash_node_base.339"* %40, null
  br i1 %41, label %84, label %42

42:                                               ; preds = %35
  %43 = add i64 %22, -1
  br i1 %27, label %44, label %66

44:                                               ; preds = %42, %61
  %45 = phi %"struct.std::__1::__hash_node_base.339"* [ %47, %61 ], [ %40, %42 ]
  %46 = getelementptr inbounds %"struct.std::__1::__hash_node_base.339", %"struct.std::__1::__hash_node_base.339"* %45, i64 0, i32 0
  %47 = load %"struct.std::__1::__hash_node_base.339"*, %"struct.std::__1::__hash_node_base.339"** %46, align 8
  %48 = icmp eq %"struct.std::__1::__hash_node_base.339"* %47, null
  br i1 %48, label %84, label %49

49:                                               ; preds = %44
  %50 = getelementptr inbounds %"struct.std::__1::__hash_node_base.339", %"struct.std::__1::__hash_node_base.339"* %47, i64 1
  %51 = bitcast %"struct.std::__1::__hash_node_base.339"* %50 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = icmp eq i64 %52, %20
  br i1 %53, label %61, label %54

54:                                               ; preds = %49
  %55 = icmp ult i64 %52, %22
  br i1 %55, label %58, label %56

56:                                               ; preds = %54
  %57 = urem i64 %52, %22
  br label %58

58:                                               ; preds = %56, %54
  %59 = phi i64 [ %57, %56 ], [ %52, %54 ]
  %60 = icmp eq i64 %59, %36
  br i1 %60, label %61, label %84

61:                                               ; preds = %58, %49
  %62 = getelementptr inbounds %"struct.std::__1::__hash_node_base.339", %"struct.std::__1::__hash_node_base.339"* %47, i64 2
  %63 = bitcast %"struct.std::__1::__hash_node_base.339"* %62 to %"class.v8::internal::MemoryChunk"**
  %64 = load %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"** %63, align 8
  %65 = icmp eq %"class.v8::internal::MemoryChunk"* %64, %24
  br i1 %65, label %175, label %44

66:                                               ; preds = %42, %79
  %67 = phi %"struct.std::__1::__hash_node_base.339"* [ %69, %79 ], [ %40, %42 ]
  %68 = getelementptr inbounds %"struct.std::__1::__hash_node_base.339", %"struct.std::__1::__hash_node_base.339"* %67, i64 0, i32 0
  %69 = load %"struct.std::__1::__hash_node_base.339"*, %"struct.std::__1::__hash_node_base.339"** %68, align 8
  %70 = icmp eq %"struct.std::__1::__hash_node_base.339"* %69, null
  br i1 %70, label %84, label %71

71:                                               ; preds = %66
  %72 = getelementptr inbounds %"struct.std::__1::__hash_node_base.339", %"struct.std::__1::__hash_node_base.339"* %69, i64 1
  %73 = bitcast %"struct.std::__1::__hash_node_base.339"* %72 to i64*
  %74 = load i64, i64* %73, align 8
  %75 = icmp eq i64 %74, %20
  %76 = and i64 %74, %43
  %77 = icmp eq i64 %76, %36
  %78 = or i1 %75, %77
  br i1 %78, label %79, label %84

79:                                               ; preds = %71
  %80 = getelementptr inbounds %"struct.std::__1::__hash_node_base.339", %"struct.std::__1::__hash_node_base.339"* %69, i64 2
  %81 = bitcast %"struct.std::__1::__hash_node_base.339"* %80 to %"class.v8::internal::MemoryChunk"**
  %82 = load %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"** %81, align 8
  %83 = icmp eq %"class.v8::internal::MemoryChunk"* %82, %24
  br i1 %83, label %175, label %66

84:                                               ; preds = %71, %66, %58, %44, %35, %5
  %85 = phi i64 [ %36, %35 ], [ undef, %5 ], [ %36, %44 ], [ %36, %58 ], [ %36, %66 ], [ %36, %71 ]
  %86 = tail call i8* @_Znwm(i64 32) #12, !noalias !11
  %87 = getelementptr inbounds i8, i8* %86, i64 16
  %88 = bitcast %"class.std::__1::tuple"* %3 to i64**
  %89 = load i64*, i64** %88, align 8, !noalias !11
  %90 = load i64, i64* %89, align 8, !noalias !11
  %91 = bitcast i8* %87 to i64*
  store i64 %90, i64* %91, align 8, !noalias !11
  %92 = getelementptr inbounds i8, i8* %86, i64 24
  %93 = bitcast i8* %92 to i64*
  store i64 0, i64* %93, align 8, !noalias !11
  %94 = getelementptr inbounds i8, i8* %86, i64 8
  %95 = bitcast i8* %94 to i64*
  store i64 %20, i64* %95, align 8, !noalias !11
  %96 = bitcast i8* %86 to %"struct.std::__1::__hash_node_base.339"**
  store %"struct.std::__1::__hash_node_base.339"* null, %"struct.std::__1::__hash_node_base.339"** %96, align 8, !noalias !11
  %97 = getelementptr inbounds %"class.std::__1::__hash_table.335", %"class.std::__1::__hash_table.335"* %0, i64 0, i32 2, i32 0, i32 0
  %98 = load i64, i64* %97, align 8
  %99 = add i64 %98, 1
  %100 = uitofp i64 %99 to float
  %101 = uitofp i64 %22 to float
  %102 = getelementptr inbounds %"class.std::__1::__hash_table.335", %"class.std::__1::__hash_table.335"* %0, i64 0, i32 3, i32 0, i32 0
  %103 = load float, float* %102, align 4
  %104 = fmul float %103, %101
  %105 = fcmp olt float %104, %100
  %106 = or i1 %23, %105
  br i1 %106, label %107, label %130

107:                                              ; preds = %84
  %108 = shl i64 %22, 1
  %109 = icmp ult i64 %22, 3
  %110 = tail call i64 @llvm.ctpop.i64(i64 %22) #13, !range !10
  %111 = icmp ugt i64 %110, 1
  %112 = or i1 %109, %111
  %113 = zext i1 %112 to i64
  %114 = or i64 %108, %113
  %115 = fdiv float %100, %103
  %116 = tail call float @llvm.ceil.f32(float %115) #13
  %117 = fptoui float %116 to i64
  %118 = icmp ult i64 %114, %117
  %119 = select i1 %118, i64 %117, i64 %114
  tail call void @_ZNSt3__112__hash_tableINS_17__hash_value_typeIPN2v88internal11MemoryChunkElEENS_22__unordered_map_hasherIS5_S6_NS_4hashIS5_EENS_8equal_toIS5_EELb1EEENS_21__unordered_map_equalIS5_S6_SB_S9_Lb1EEENS_9allocatorIS6_EEE6rehashEm(%"class.std::__1::__hash_table.335"* %0, i64 %119)
  %120 = load i64, i64* %21, align 8
  %121 = tail call i64 @llvm.ctpop.i64(i64 %120) #13, !range !10
  %122 = icmp ugt i64 %121, 1
  br i1 %122, label %126, label %123

123:                                              ; preds = %107
  %124 = add i64 %120, -1
  %125 = and i64 %124, %20
  br label %130

126:                                              ; preds = %107
  %127 = icmp ult i64 %20, %120
  br i1 %127, label %130, label %128

128:                                              ; preds = %126
  %129 = urem i64 %20, %120
  br label %130

130:                                              ; preds = %128, %126, %123, %84
  %131 = phi i64 [ %22, %84 ], [ %120, %123 ], [ %120, %126 ], [ %120, %128 ]
  %132 = phi i64 [ %85, %84 ], [ %125, %123 ], [ %20, %126 ], [ %129, %128 ]
  %133 = getelementptr inbounds %"class.std::__1::__hash_table.335", %"class.std::__1::__hash_table.335"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %134 = load %"struct.std::__1::__hash_node_base.339"**, %"struct.std::__1::__hash_node_base.339"*** %133, align 8
  %135 = getelementptr inbounds %"struct.std::__1::__hash_node_base.339"*, %"struct.std::__1::__hash_node_base.339"** %134, i64 %132
  %136 = load %"struct.std::__1::__hash_node_base.339"*, %"struct.std::__1::__hash_node_base.339"** %135, align 8
  %137 = icmp eq %"struct.std::__1::__hash_node_base.339"* %136, null
  br i1 %137, label %138, label %164

138:                                              ; preds = %130
  %139 = getelementptr inbounds %"class.std::__1::__hash_table.335", %"class.std::__1::__hash_table.335"* %0, i64 0, i32 1, i32 0, i32 0
  %140 = bitcast %"struct.std::__1::__hash_node_base.339"* %139 to i64*
  %141 = load i64, i64* %140, align 8
  %142 = bitcast i8* %86 to i64*
  store i64 %141, i64* %142, align 8
  %143 = bitcast %"struct.std::__1::__hash_node_base.339"* %139 to i8**
  store i8* %86, i8** %143, align 8
  store %"struct.std::__1::__hash_node_base.339"* %139, %"struct.std::__1::__hash_node_base.339"** %135, align 8
  %144 = load %"struct.std::__1::__hash_node_base.339"*, %"struct.std::__1::__hash_node_base.339"** %96, align 8
  %145 = icmp eq %"struct.std::__1::__hash_node_base.339"* %144, null
  br i1 %145, label %171, label %146

146:                                              ; preds = %138
  %147 = getelementptr inbounds %"struct.std::__1::__hash_node_base.339", %"struct.std::__1::__hash_node_base.339"* %144, i64 1
  %148 = bitcast %"struct.std::__1::__hash_node_base.339"* %147 to i64*
  %149 = load i64, i64* %148, align 8
  %150 = tail call i64 @llvm.ctpop.i64(i64 %131) #13, !range !10
  %151 = icmp ugt i64 %150, 1
  br i1 %151, label %155, label %152

152:                                              ; preds = %146
  %153 = add i64 %131, -1
  %154 = and i64 %149, %153
  br label %159

155:                                              ; preds = %146
  %156 = icmp ult i64 %149, %131
  br i1 %156, label %159, label %157

157:                                              ; preds = %155
  %158 = urem i64 %149, %131
  br label %159

159:                                              ; preds = %152, %155, %157
  %160 = phi i64 [ %154, %152 ], [ %158, %157 ], [ %149, %155 ]
  %161 = load %"struct.std::__1::__hash_node_base.339"**, %"struct.std::__1::__hash_node_base.339"*** %133, align 8
  %162 = getelementptr inbounds %"struct.std::__1::__hash_node_base.339"*, %"struct.std::__1::__hash_node_base.339"** %161, i64 %160
  %163 = bitcast %"struct.std::__1::__hash_node_base.339"** %162 to i8**
  br label %169

164:                                              ; preds = %130
  %165 = bitcast %"struct.std::__1::__hash_node_base.339"* %136 to i64*
  %166 = load i64, i64* %165, align 8
  %167 = bitcast i8* %86 to i64*
  store i64 %166, i64* %167, align 8
  %168 = bitcast %"struct.std::__1::__hash_node_base.339"* %136 to i8**
  br label %169

169:                                              ; preds = %159, %164
  %170 = phi i8** [ %168, %164 ], [ %163, %159 ]
  store i8* %86, i8** %170, align 8
  br label %171

171:                                              ; preds = %169, %138
  %172 = bitcast i8* %86 to %"struct.std::__1::__hash_node_base.339"*
  %173 = load i64, i64* %97, align 8
  %174 = add i64 %173, 1
  store i64 %174, i64* %97, align 8
  br label %175

175:                                              ; preds = %79, %61, %171
  %176 = phi i8 [ 1, %171 ], [ 0, %61 ], [ 0, %79 ]
  %177 = phi %"struct.std::__1::__hash_node_base.339"* [ %172, %171 ], [ %47, %61 ], [ %69, %79 ]
  %178 = insertvalue { %"struct.std::__1::__hash_node_base.339"*, i8 } undef, %"struct.std::__1::__hash_node_base.339"* %177, 0
  %179 = insertvalue { %"struct.std::__1::__hash_node_base.339"*, i8 } %178, i8 %176, 1
  ret { %"struct.std::__1::__hash_node_base.339"*, i8 } %179
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112__hash_tableINS_17__hash_value_typeIPN2v88internal11MemoryChunkElEENS_22__unordered_map_hasherIS5_S6_NS_4hashIS5_EENS_8equal_toIS5_EELb1EEENS_21__unordered_map_equalIS5_S6_SB_S9_Lb1EEENS_9allocatorIS6_EEE6rehashEm(%"class.std::__1::__hash_table.335"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq i64 %1, 1
  br i1 %3, label %9, label %4

4:                                                ; preds = %2
  %5 = tail call i64 @llvm.ctpop.i64(i64 %1), !range !10
  %6 = icmp ugt i64 %5, 1
  br i1 %6, label %7, label %9

7:                                                ; preds = %4
  %8 = tail call i64 @_ZNSt3__112__next_primeEm(i64 %1) #13
  br label %9

9:                                                ; preds = %2, %4, %7
  %10 = phi i64 [ %8, %7 ], [ %1, %4 ], [ 2, %2 ]
  %11 = getelementptr inbounds %"class.std::__1::__hash_table.335", %"class.std::__1::__hash_table.335"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = icmp ugt i64 %10, %12
  br i1 %13, label %14, label %15

14:                                               ; preds = %9
  tail call void @_ZNSt3__112__hash_tableINS_17__hash_value_typeIPN2v88internal11MemoryChunkElEENS_22__unordered_map_hasherIS5_S6_NS_4hashIS5_EENS_8equal_toIS5_EELb1EEENS_21__unordered_map_equalIS5_S6_SB_S9_Lb1EEENS_9allocatorIS6_EEE8__rehashEm(%"class.std::__1::__hash_table.335"* %0, i64 %10)
  br label %45

15:                                               ; preds = %9
  %16 = icmp ult i64 %10, %12
  br i1 %16, label %17, label %45

17:                                               ; preds = %15
  %18 = icmp ugt i64 %12, 2
  %19 = tail call i64 @llvm.ctpop.i64(i64 %12) #13, !range !10
  %20 = icmp ult i64 %19, 2
  %21 = and i1 %18, %20
  %22 = getelementptr inbounds %"class.std::__1::__hash_table.335", %"class.std::__1::__hash_table.335"* %0, i64 0, i32 2, i32 0, i32 0
  %23 = load i64, i64* %22, align 8
  %24 = uitofp i64 %23 to float
  %25 = getelementptr inbounds %"class.std::__1::__hash_table.335", %"class.std::__1::__hash_table.335"* %0, i64 0, i32 3, i32 0, i32 0
  %26 = load float, float* %25, align 4
  %27 = fdiv float %24, %26
  %28 = tail call float @llvm.ceil.f32(float %27) #13
  %29 = fptoui float %28 to i64
  br i1 %21, label %30, label %37

30:                                               ; preds = %17
  %31 = icmp ult i64 %29, 2
  br i1 %31, label %39, label %32

32:                                               ; preds = %30
  %33 = add i64 %29, -1
  %34 = tail call i64 @llvm.ctlz.i64(i64 %33, i1 true) #13, !range !10
  %35 = sub nuw nsw i64 64, %34
  %36 = shl i64 1, %35
  br label %39

37:                                               ; preds = %17
  %38 = tail call i64 @_ZNSt3__112__next_primeEm(i64 %29) #13
  br label %39

39:                                               ; preds = %32, %30, %37
  %40 = phi i64 [ %38, %37 ], [ %36, %32 ], [ %29, %30 ]
  %41 = icmp ult i64 %10, %40
  %42 = select i1 %41, i64 %40, i64 %10
  %43 = icmp ult i64 %42, %12
  br i1 %43, label %44, label %45

44:                                               ; preds = %39
  tail call void @_ZNSt3__112__hash_tableINS_17__hash_value_typeIPN2v88internal11MemoryChunkElEENS_22__unordered_map_hasherIS5_S6_NS_4hashIS5_EENS_8equal_toIS5_EELb1EEENS_21__unordered_map_equalIS5_S6_SB_S9_Lb1EEENS_9allocatorIS6_EEE8__rehashEm(%"class.std::__1::__hash_table.335"* %0, i64 %42)
  br label %45

45:                                               ; preds = %15, %44, %39, %14
  ret void
}

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #10

declare i64 @_ZNSt3__112__next_primeEm(i64) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112__hash_tableINS_17__hash_value_typeIPN2v88internal11MemoryChunkElEENS_22__unordered_map_hasherIS5_S6_NS_4hashIS5_EENS_8equal_toIS5_EELb1EEENS_21__unordered_map_equalIS5_S6_SB_S9_Lb1EEENS_9allocatorIS6_EEE8__rehashEm(%"class.std::__1::__hash_table.335"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::__hash_table.335", %"class.std::__1::__hash_table.335"* %0, i64 0, i32 0, i32 0, i32 1, i32 0
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %179, label %5

5:                                                ; preds = %2
  %6 = icmp ugt i64 %1, 2305843009213693951
  br i1 %6, label %7, label %8

7:                                                ; preds = %5
  tail call void @abort() #14
  unreachable

8:                                                ; preds = %5
  %9 = shl i64 %1, 3
  %10 = tail call i8* @_Znwm(i64 %9) #12
  %11 = getelementptr inbounds %"class.std::__1::__hash_table.335", %"class.std::__1::__hash_table.335"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %12 = load %"struct.std::__1::__hash_node_base.339"**, %"struct.std::__1::__hash_node_base.339"*** %11, align 8
  %13 = bitcast %"class.std::__1::__hash_table.335"* %0 to i8**
  store i8* %10, i8** %13, align 8
  %14 = icmp eq %"struct.std::__1::__hash_node_base.339"** %12, null
  br i1 %14, label %17, label %15

15:                                               ; preds = %8
  %16 = bitcast %"struct.std::__1::__hash_node_base.339"** %12 to i8*
  tail call void @_ZdlPv(i8* %16) #12
  br label %17

17:                                               ; preds = %15, %8
  %18 = getelementptr inbounds %"class.std::__1::__bucket_list_deallocator.341", %"class.std::__1::__bucket_list_deallocator.341"* %3, i64 0, i32 0, i32 0, i32 0
  store i64 %1, i64* %18, align 8
  %19 = add i64 %1, -1
  %20 = and i64 %1, 3
  %21 = icmp ult i64 %19, 3
  br i1 %21, label %24, label %22

22:                                               ; preds = %17
  %23 = sub i64 %1, %20
  br label %40

24:                                               ; preds = %40, %17
  %25 = phi i64 [ 0, %17 ], [ %54, %40 ]
  %26 = icmp eq i64 %20, 0
  br i1 %26, label %35, label %27

27:                                               ; preds = %24, %27
  %28 = phi i64 [ %32, %27 ], [ %25, %24 ]
  %29 = phi i64 [ %33, %27 ], [ %20, %24 ]
  %30 = load %"struct.std::__1::__hash_node_base.339"**, %"struct.std::__1::__hash_node_base.339"*** %11, align 8
  %31 = getelementptr inbounds %"struct.std::__1::__hash_node_base.339"*, %"struct.std::__1::__hash_node_base.339"** %30, i64 %28
  store %"struct.std::__1::__hash_node_base.339"* null, %"struct.std::__1::__hash_node_base.339"** %31, align 8
  %32 = add nuw i64 %28, 1
  %33 = add i64 %29, -1
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %35, label %27, !llvm.loop !14

35:                                               ; preds = %27, %24
  %36 = getelementptr inbounds %"class.std::__1::__hash_table.335", %"class.std::__1::__hash_table.335"* %0, i64 0, i32 1, i32 0, i32 0
  %37 = getelementptr inbounds %"struct.std::__1::__hash_node_base.339", %"struct.std::__1::__hash_node_base.339"* %36, i64 0, i32 0
  %38 = load %"struct.std::__1::__hash_node_base.339"*, %"struct.std::__1::__hash_node_base.339"** %37, align 8
  %39 = icmp eq %"struct.std::__1::__hash_node_base.339"* %38, null
  br i1 %39, label %187, label %57

40:                                               ; preds = %40, %22
  %41 = phi i64 [ 0, %22 ], [ %54, %40 ]
  %42 = phi i64 [ %23, %22 ], [ %55, %40 ]
  %43 = load %"struct.std::__1::__hash_node_base.339"**, %"struct.std::__1::__hash_node_base.339"*** %11, align 8
  %44 = getelementptr inbounds %"struct.std::__1::__hash_node_base.339"*, %"struct.std::__1::__hash_node_base.339"** %43, i64 %41
  store %"struct.std::__1::__hash_node_base.339"* null, %"struct.std::__1::__hash_node_base.339"** %44, align 8
  %45 = or i64 %41, 1
  %46 = load %"struct.std::__1::__hash_node_base.339"**, %"struct.std::__1::__hash_node_base.339"*** %11, align 8
  %47 = getelementptr inbounds %"struct.std::__1::__hash_node_base.339"*, %"struct.std::__1::__hash_node_base.339"** %46, i64 %45
  store %"struct.std::__1::__hash_node_base.339"* null, %"struct.std::__1::__hash_node_base.339"** %47, align 8
  %48 = or i64 %41, 2
  %49 = load %"struct.std::__1::__hash_node_base.339"**, %"struct.std::__1::__hash_node_base.339"*** %11, align 8
  %50 = getelementptr inbounds %"struct.std::__1::__hash_node_base.339"*, %"struct.std::__1::__hash_node_base.339"** %49, i64 %48
  store %"struct.std::__1::__hash_node_base.339"* null, %"struct.std::__1::__hash_node_base.339"** %50, align 8
  %51 = or i64 %41, 3
  %52 = load %"struct.std::__1::__hash_node_base.339"**, %"struct.std::__1::__hash_node_base.339"*** %11, align 8
  %53 = getelementptr inbounds %"struct.std::__1::__hash_node_base.339"*, %"struct.std::__1::__hash_node_base.339"** %52, i64 %51
  store %"struct.std::__1::__hash_node_base.339"* null, %"struct.std::__1::__hash_node_base.339"** %53, align 8
  %54 = add nuw i64 %41, 4
  %55 = add i64 %42, -4
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %24, label %40

57:                                               ; preds = %35
  %58 = getelementptr inbounds %"struct.std::__1::__hash_node_base.339", %"struct.std::__1::__hash_node_base.339"* %38, i64 1
  %59 = bitcast %"struct.std::__1::__hash_node_base.339"* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = tail call i64 @llvm.ctpop.i64(i64 %1) #13, !range !10
  %62 = icmp ugt i64 %61, 1
  br i1 %62, label %66, label %63

63:                                               ; preds = %57
  %64 = add i64 %1, -1
  %65 = and i64 %60, %64
  br label %70

66:                                               ; preds = %57
  %67 = icmp ult i64 %60, %1
  br i1 %67, label %70, label %68

68:                                               ; preds = %66
  %69 = urem i64 %60, %1
  br label %70

70:                                               ; preds = %63, %66, %68
  %71 = phi i64 [ %65, %63 ], [ %69, %68 ], [ %60, %66 ]
  %72 = load %"struct.std::__1::__hash_node_base.339"**, %"struct.std::__1::__hash_node_base.339"*** %11, align 8
  %73 = getelementptr inbounds %"struct.std::__1::__hash_node_base.339"*, %"struct.std::__1::__hash_node_base.339"** %72, i64 %71
  store %"struct.std::__1::__hash_node_base.339"* %36, %"struct.std::__1::__hash_node_base.339"** %73, align 8
  %74 = getelementptr inbounds %"struct.std::__1::__hash_node_base.339", %"struct.std::__1::__hash_node_base.339"* %38, i64 0, i32 0
  %75 = load %"struct.std::__1::__hash_node_base.339"*, %"struct.std::__1::__hash_node_base.339"** %74, align 8
  %76 = icmp eq %"struct.std::__1::__hash_node_base.339"* %75, null
  br i1 %76, label %187, label %77

77:                                               ; preds = %70
  %78 = add i64 %1, -1
  br i1 %62, label %79, label %131

79:                                               ; preds = %77, %122
  %80 = phi %"struct.std::__1::__hash_node_base.339"* [ %126, %122 ], [ %75, %77 ]
  %81 = phi i64 [ %124, %122 ], [ %71, %77 ]
  %82 = phi %"struct.std::__1::__hash_node_base.339"* [ %123, %122 ], [ %38, %77 ]
  %83 = getelementptr inbounds %"struct.std::__1::__hash_node_base.339", %"struct.std::__1::__hash_node_base.339"* %80, i64 1
  %84 = bitcast %"struct.std::__1::__hash_node_base.339"* %83 to i64*
  %85 = load i64, i64* %84, align 8
  %86 = icmp ult i64 %85, %1
  br i1 %86, label %89, label %87

87:                                               ; preds = %79
  %88 = urem i64 %85, %1
  br label %89

89:                                               ; preds = %87, %79
  %90 = phi i64 [ %88, %87 ], [ %85, %79 ]
  %91 = icmp eq i64 %90, %81
  br i1 %91, label %122, label %92

92:                                               ; preds = %89
  %93 = load %"struct.std::__1::__hash_node_base.339"**, %"struct.std::__1::__hash_node_base.339"*** %11, align 8
  %94 = getelementptr inbounds %"struct.std::__1::__hash_node_base.339"*, %"struct.std::__1::__hash_node_base.339"** %93, i64 %90
  %95 = load %"struct.std::__1::__hash_node_base.339"*, %"struct.std::__1::__hash_node_base.339"** %94, align 8
  %96 = icmp eq %"struct.std::__1::__hash_node_base.339"* %95, null
  br i1 %96, label %121, label %128

97:                                               ; preds = %128, %102
  %98 = phi %"struct.std::__1::__hash_node_base.339"* [ %100, %102 ], [ %80, %128 ]
  %99 = getelementptr inbounds %"struct.std::__1::__hash_node_base.339", %"struct.std::__1::__hash_node_base.339"* %98, i64 0, i32 0
  %100 = load %"struct.std::__1::__hash_node_base.339"*, %"struct.std::__1::__hash_node_base.339"** %99, align 8
  %101 = icmp eq %"struct.std::__1::__hash_node_base.339"* %100, null
  br i1 %101, label %108, label %102

102:                                              ; preds = %97
  %103 = getelementptr inbounds %"struct.std::__1::__hash_node_base.339", %"struct.std::__1::__hash_node_base.339"* %100, i64 2
  %104 = bitcast %"struct.std::__1::__hash_node_base.339"* %103 to %"class.v8::internal::MemoryChunk"**
  %105 = load %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"** %130, align 8
  %106 = load %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"** %104, align 8
  %107 = icmp eq %"class.v8::internal::MemoryChunk"* %105, %106
  br i1 %107, label %97, label %108

108:                                              ; preds = %102, %97
  %109 = ptrtoint %"struct.std::__1::__hash_node_base.339"* %100 to i64
  %110 = bitcast %"struct.std::__1::__hash_node_base.339"* %98 to i64*
  %111 = bitcast %"struct.std::__1::__hash_node_base.339"* %82 to i64*
  store i64 %109, i64* %111, align 8
  %112 = load %"struct.std::__1::__hash_node_base.339"**, %"struct.std::__1::__hash_node_base.339"*** %11, align 8
  %113 = getelementptr inbounds %"struct.std::__1::__hash_node_base.339"*, %"struct.std::__1::__hash_node_base.339"** %112, i64 %90
  %114 = bitcast %"struct.std::__1::__hash_node_base.339"** %113 to i64**
  %115 = load i64*, i64** %114, align 8
  %116 = load i64, i64* %115, align 8
  store i64 %116, i64* %110, align 8
  %117 = load %"struct.std::__1::__hash_node_base.339"**, %"struct.std::__1::__hash_node_base.339"*** %11, align 8
  %118 = getelementptr inbounds %"struct.std::__1::__hash_node_base.339"*, %"struct.std::__1::__hash_node_base.339"** %117, i64 %90
  %119 = load %"struct.std::__1::__hash_node_base.339"*, %"struct.std::__1::__hash_node_base.339"** %118, align 8
  %120 = getelementptr inbounds %"struct.std::__1::__hash_node_base.339", %"struct.std::__1::__hash_node_base.339"* %119, i64 0, i32 0
  store %"struct.std::__1::__hash_node_base.339"* %80, %"struct.std::__1::__hash_node_base.339"** %120, align 8
  br label %122

121:                                              ; preds = %92
  store %"struct.std::__1::__hash_node_base.339"* %82, %"struct.std::__1::__hash_node_base.339"** %94, align 8
  br label %122

122:                                              ; preds = %121, %108, %89
  %123 = phi %"struct.std::__1::__hash_node_base.339"* [ %80, %121 ], [ %82, %108 ], [ %80, %89 ]
  %124 = phi i64 [ %90, %121 ], [ %81, %108 ], [ %81, %89 ]
  %125 = getelementptr inbounds %"struct.std::__1::__hash_node_base.339", %"struct.std::__1::__hash_node_base.339"* %123, i64 0, i32 0
  %126 = load %"struct.std::__1::__hash_node_base.339"*, %"struct.std::__1::__hash_node_base.339"** %125, align 8
  %127 = icmp eq %"struct.std::__1::__hash_node_base.339"* %126, null
  br i1 %127, label %187, label %79

128:                                              ; preds = %92
  %129 = getelementptr inbounds %"struct.std::__1::__hash_node_base.339", %"struct.std::__1::__hash_node_base.339"* %80, i64 2
  %130 = bitcast %"struct.std::__1::__hash_node_base.339"* %129 to %"class.v8::internal::MemoryChunk"**
  br label %97

131:                                              ; preds = %77, %173
  %132 = phi %"struct.std::__1::__hash_node_base.339"* [ %177, %173 ], [ %75, %77 ]
  %133 = phi i64 [ %175, %173 ], [ %71, %77 ]
  %134 = phi %"struct.std::__1::__hash_node_base.339"* [ %174, %173 ], [ %38, %77 ]
  %135 = getelementptr inbounds %"struct.std::__1::__hash_node_base.339", %"struct.std::__1::__hash_node_base.339"* %132, i64 1
  %136 = bitcast %"struct.std::__1::__hash_node_base.339"* %135 to i64*
  %137 = load i64, i64* %136, align 8
  %138 = and i64 %137, %78
  %139 = icmp eq i64 %138, %133
  br i1 %139, label %173, label %140

140:                                              ; preds = %131
  %141 = load %"struct.std::__1::__hash_node_base.339"**, %"struct.std::__1::__hash_node_base.339"*** %11, align 8
  %142 = getelementptr inbounds %"struct.std::__1::__hash_node_base.339"*, %"struct.std::__1::__hash_node_base.339"** %141, i64 %138
  %143 = load %"struct.std::__1::__hash_node_base.339"*, %"struct.std::__1::__hash_node_base.339"** %142, align 8
  %144 = icmp eq %"struct.std::__1::__hash_node_base.339"* %143, null
  br i1 %144, label %148, label %145

145:                                              ; preds = %140
  %146 = getelementptr inbounds %"struct.std::__1::__hash_node_base.339", %"struct.std::__1::__hash_node_base.339"* %132, i64 2
  %147 = bitcast %"struct.std::__1::__hash_node_base.339"* %146 to %"class.v8::internal::MemoryChunk"**
  br label %149

148:                                              ; preds = %140
  store %"struct.std::__1::__hash_node_base.339"* %134, %"struct.std::__1::__hash_node_base.339"** %142, align 8
  br label %173

149:                                              ; preds = %145, %154
  %150 = phi %"struct.std::__1::__hash_node_base.339"* [ %152, %154 ], [ %132, %145 ]
  %151 = getelementptr inbounds %"struct.std::__1::__hash_node_base.339", %"struct.std::__1::__hash_node_base.339"* %150, i64 0, i32 0
  %152 = load %"struct.std::__1::__hash_node_base.339"*, %"struct.std::__1::__hash_node_base.339"** %151, align 8
  %153 = icmp eq %"struct.std::__1::__hash_node_base.339"* %152, null
  br i1 %153, label %160, label %154

154:                                              ; preds = %149
  %155 = getelementptr inbounds %"struct.std::__1::__hash_node_base.339", %"struct.std::__1::__hash_node_base.339"* %152, i64 2
  %156 = bitcast %"struct.std::__1::__hash_node_base.339"* %155 to %"class.v8::internal::MemoryChunk"**
  %157 = load %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"** %147, align 8
  %158 = load %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"** %156, align 8
  %159 = icmp eq %"class.v8::internal::MemoryChunk"* %157, %158
  br i1 %159, label %149, label %160

160:                                              ; preds = %149, %154
  %161 = ptrtoint %"struct.std::__1::__hash_node_base.339"* %152 to i64
  %162 = bitcast %"struct.std::__1::__hash_node_base.339"* %150 to i64*
  %163 = bitcast %"struct.std::__1::__hash_node_base.339"* %134 to i64*
  store i64 %161, i64* %163, align 8
  %164 = load %"struct.std::__1::__hash_node_base.339"**, %"struct.std::__1::__hash_node_base.339"*** %11, align 8
  %165 = getelementptr inbounds %"struct.std::__1::__hash_node_base.339"*, %"struct.std::__1::__hash_node_base.339"** %164, i64 %138
  %166 = bitcast %"struct.std::__1::__hash_node_base.339"** %165 to i64**
  %167 = load i64*, i64** %166, align 8
  %168 = load i64, i64* %167, align 8
  store i64 %168, i64* %162, align 8
  %169 = load %"struct.std::__1::__hash_node_base.339"**, %"struct.std::__1::__hash_node_base.339"*** %11, align 8
  %170 = getelementptr inbounds %"struct.std::__1::__hash_node_base.339"*, %"struct.std::__1::__hash_node_base.339"** %169, i64 %138
  %171 = load %"struct.std::__1::__hash_node_base.339"*, %"struct.std::__1::__hash_node_base.339"** %170, align 8
  %172 = getelementptr inbounds %"struct.std::__1::__hash_node_base.339", %"struct.std::__1::__hash_node_base.339"* %171, i64 0, i32 0
  store %"struct.std::__1::__hash_node_base.339"* %132, %"struct.std::__1::__hash_node_base.339"** %172, align 8
  br label %173

173:                                              ; preds = %131, %160, %148
  %174 = phi %"struct.std::__1::__hash_node_base.339"* [ %132, %148 ], [ %134, %160 ], [ %132, %131 ]
  %175 = phi i64 [ %138, %148 ], [ %133, %160 ], [ %133, %131 ]
  %176 = getelementptr inbounds %"struct.std::__1::__hash_node_base.339", %"struct.std::__1::__hash_node_base.339"* %174, i64 0, i32 0
  %177 = load %"struct.std::__1::__hash_node_base.339"*, %"struct.std::__1::__hash_node_base.339"** %176, align 8
  %178 = icmp eq %"struct.std::__1::__hash_node_base.339"* %177, null
  br i1 %178, label %187, label %131

179:                                              ; preds = %2
  %180 = getelementptr inbounds %"class.std::__1::__hash_table.335", %"class.std::__1::__hash_table.335"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %181 = load %"struct.std::__1::__hash_node_base.339"**, %"struct.std::__1::__hash_node_base.339"*** %180, align 8
  store %"struct.std::__1::__hash_node_base.339"** null, %"struct.std::__1::__hash_node_base.339"*** %180, align 8
  %182 = icmp eq %"struct.std::__1::__hash_node_base.339"** %181, null
  br i1 %182, label %185, label %183

183:                                              ; preds = %179
  %184 = bitcast %"struct.std::__1::__hash_node_base.339"** %181 to i8*
  tail call void @_ZdlPv(i8* %184) #12
  br label %185

185:                                              ; preds = %179, %183
  %186 = getelementptr inbounds %"class.std::__1::__bucket_list_deallocator.341", %"class.std::__1::__bucket_list_deallocator.341"* %3, i64 0, i32 0, i32 0, i32 0
  store i64 0, i64* %186, align 8
  br label %187

187:                                              ; preds = %173, %122, %70, %35, %185
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctlz.i64(i64, i1 immarg) #1

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #1

declare void @_ZN2v84base5Mutex6UnlockEv(%"class.v8::base::Mutex"*) local_unnamed_addr #5

declare i8* @_ZN2v88internal9BaseSpace12GetSpaceNameENS0_15AllocationSpaceE(i32) local_unnamed_addr #5

declare void @_ZN2v84base11SharedMutex13LockExclusiveEv(%"class.v8::base::SharedMutex"*) local_unnamed_addr #5

declare void @_ZN2v84base11SharedMutex15UnlockExclusiveEv(%"class.v8::base::SharedMutex"*) local_unnamed_addr #5

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #11

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.cttz.i32(i32, i1 immarg) #1

declare %"class.v8::internal::SlotSet"* @_ZN2v88internal11MemoryChunk23AllocateSweepingSlotSetEv(%"class.v8::internal::MemoryChunk"*) local_unnamed_addr #5

declare i8* @_ZN2v88internal8MallocednwEm(i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctpop.i64(i64) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { cold noreturn nounwind }
attributes #12 = { builtin nounwind }
attributes #13 = { nounwind }
attributes #14 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{i32 0, i32 33}
!4 = !{i8 0, i8 2}
!5 = distinct !{!5, !6}
!6 = !{!"llvm.loop.unroll.disable"}
!7 = distinct !{!7, !6}
!8 = distinct !{!8, !6}
!9 = distinct !{!9, !6}
!10 = !{i64 0, i64 65}
!11 = !{!12}
!12 = distinct !{!12, !13, !"_ZNSt3__112__hash_tableINS_17__hash_value_typeIPN2v88internal11MemoryChunkElEENS_22__unordered_map_hasherIS5_S6_NS_4hashIS5_EENS_8equal_toIS5_EELb1EEENS_21__unordered_map_equalIS5_S6_SB_S9_Lb1EEENS_9allocatorIS6_EEE21__construct_node_hashIRKNS_21piecewise_construct_tEJNS_5tupleIJRKS5_EEENSM_IJEEEEEENS_10unique_ptrINS_11__hash_nodeIS6_PvEENS_22__hash_node_destructorINSF_ISU_EEEEEEmOT_DpOT0_: argument 0"}
!13 = distinct !{!13, !"_ZNSt3__112__hash_tableINS_17__hash_value_typeIPN2v88internal11MemoryChunkElEENS_22__unordered_map_hasherIS5_S6_NS_4hashIS5_EENS_8equal_toIS5_EELb1EEENS_21__unordered_map_equalIS5_S6_SB_S9_Lb1EEENS_9allocatorIS6_EEE21__construct_node_hashIRKNS_21piecewise_construct_tEJNS_5tupleIJRKS5_EEENSM_IJEEEEEENS_10unique_ptrINS_11__hash_nodeIS6_PvEENS_22__hash_node_destructorINSF_ISU_EEEEEEmOT_DpOT0_"}
!14 = distinct !{!14, !6}
