; ModuleID = '../../third_party/ffmpeg/libavcodec/flac.c'
source_filename = "../../third_party/ffmpeg/libavcodec/flac.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.AVCodecContext = type { %struct.AVClass*, i32, i32, %struct.AVCodec*, i32, i32, i8*, %struct.AVCodecInternal*, i8*, i64, i32, i32, i32, i32, i32, i8*, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, void (%struct.AVCodecContext*, %struct.AVFrame*, i32*, i32, i32, i32)*, i32 (%struct.AVCodecContext*, i32*)*, i32, float, i32, float, i32, i32, float, float, float, float, float, float, float, i32, i32, i32*, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16*, i16*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*, i32)*, i32, float, float, i32, i32, i32, i32, i32, %struct.RcOverride*, i64, i64, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, void (%struct.AVCodecContext*, i8*, i32, i32)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i32, i32, i64, %struct.AVHWAccel*, i8*, [8 x i64], i32, i32, i32, i32, i32, %struct.AVFrame*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*)*, i8*, i32*, i32, i32)*, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*, i32, i32)*, i8*, i32*, i32)*, i32, i32, i32, i32, i32, i32, i8*, i32, i64, i32, i32, %struct.AVRational, i32, %struct.AVRational, %struct.AVCodecDescriptor*, i64, i64, i64, i64, i8*, i32, i32, i32, i32, i16*, i8*, i8*, i32, %struct.AVPacketSideData*, i32, %struct.AVBufferRef*, i32, i32, i64, %struct.AVBufferRef*, i32, i32, i32, i32, i64, i32 }
%struct.AVClass = type { i8*, i8* (i8*)*, %struct.AVOption*, i32, i32, i32, i8* (i8*, i8*)*, %struct.AVClass* (%struct.AVClass*)*, i32, i32 (i8*)*, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)*, %struct.AVClass* (i8**)* }
%struct.AVOption = type opaque
%struct.AVOptionRanges = type opaque
%struct.AVCodec = type { i8*, i8*, i32, i32, i32, %struct.AVRational*, i32*, i32*, i32*, i64*, i8, %struct.AVClass*, %struct.AVProfile*, i8*, i32, %struct.AVCodec*, i32 (%struct.AVCodecContext*, %struct.AVCodecContext*)*, %struct.AVCodecDefault*, void (%struct.AVCodec*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, i8*, i32, %struct.AVSubtitle*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*, %struct.AVFrame*, i32*)*, i32 (%struct.AVCodecContext*, i8*, i32*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, void (%struct.AVCodecContext*)*, i32, i8*, %struct.AVCodecHWConfigInternal**, i32* }
%struct.AVProfile = type { i32, i8* }
%struct.AVCodecDefault = type { i8*, i8* }
%struct.AVSubtitle = type { i16, i32, i32, i32, %struct.AVSubtitleRect**, i64 }
%struct.AVSubtitleRect = type { i32, i32, i32, i32, i32, %struct.AVPicture, [4 x i8*], [4 x i32], i32, i8*, i8*, i32 }
%struct.AVPicture = type { [8 x i8*], [8 x i32] }
%struct.AVPacket = type { %struct.AVBufferRef*, i64, i64, i8*, i32, i32, i32, %struct.AVPacketSideData*, i32, i64, i64, i64 }
%struct.AVCodecHWConfigInternal = type opaque
%struct.AVCodecInternal = type { i32, i32, %struct.AVFrame*, %struct.AVBufferRef*, i8*, %struct.DecodeSimpleContext, %struct.AVBSFContext*, %struct.AVPacket*, %struct.AVFifoBuffer*, i8*, i32, i8*, %struct.EncodeSimpleContext, i32, i8*, i32, %struct.AVPacket*, %struct.AVFrame*, i32, i32, i64, i64, %struct.AVFrame*, %struct.AVPacket*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64 }
%struct.DecodeSimpleContext = type { %struct.AVPacket* }
%struct.AVBSFContext = type { %struct.AVClass*, %struct.AVBitStreamFilter*, %struct.AVBSFInternal*, i8*, %struct.AVCodecParameters*, %struct.AVCodecParameters*, %struct.AVRational, %struct.AVRational }
%struct.AVBitStreamFilter = type { i8*, i32*, %struct.AVClass*, i32, i32 (%struct.AVBSFContext*)*, i32 (%struct.AVBSFContext*, %struct.AVPacket*)*, void (%struct.AVBSFContext*)*, void (%struct.AVBSFContext*)* }
%struct.AVBSFInternal = type opaque
%struct.AVCodecParameters = type { i32, i32, i32, i8*, i32, i32, i64, i32, i32, i32, i32, i32, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32 }
%struct.AVFifoBuffer = type { i8*, i8*, i8*, i8*, i32, i32 }
%struct.EncodeSimpleContext = type { %struct.AVFrame* }
%struct.RcOverride = type { i32, i32, i32, float }
%struct.AVHWAccel = type { i8*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*, i32, i8*, i32)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*)*, i32, void (%struct.MpegEncContext*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*)*, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVBufferRef*)* }
%struct.MpegEncContext = type opaque
%struct.AVFrame = type { [8 x i8*], [8 x i32], i8**, i32, i32, i32, i32, i32, i32, %struct.AVRational, i64, i64, i64, i32, i32, i32, i8*, [8 x i64], i32, i32, i32, i32, i64, i32, i64, [8 x %struct.AVBufferRef*], %struct.AVBufferRef**, i32, %struct.AVFrameSideData**, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, %struct.AVDictionary*, i32, i32, i32, i8*, i32, i32, %struct.AVBufferRef*, %struct.AVBufferRef*, %struct.AVBufferRef*, i64, i64, i64, i64, %struct.AVBufferRef* }
%struct.AVFrameSideData = type { i32, i8*, i32, %struct.AVDictionary*, %struct.AVBufferRef* }
%struct.AVDictionary = type opaque
%struct.AVRational = type { i32, i32 }
%struct.AVCodecDescriptor = type { i32, i32, i8*, i8*, i32, i8**, %struct.AVProfile* }
%struct.AVPacketSideData = type { i8*, i32, i32 }
%struct.AVBufferRef = type { %struct.AVBuffer*, i8*, i32 }
%struct.AVBuffer = type opaque
%struct.GetBitContext = type { i8*, i8*, i32, i32, i32 }
%struct.FLACFrameInfo = type { i32, i32, i32, i32, i32, i64, i32 }
%struct.FLACStreaminfo = type { i32, i32, i32, i32, i32, i64 }

@.str = private unnamed_addr constant [19 x i8] c"invalid sync code\0A\00", align 1
@.str.1 = private unnamed_addr constant [26 x i8] c"invalid channel mode: %d\0A\00", align 1
@.str.2 = private unnamed_addr constant [31 x i8] c"invalid sample size code (%d)\0A\00", align 1
@sample_size_table = internal unnamed_addr constant [8 x i8] c"\00\08\0C\00\10\14\18\00", align 1
@.str.3 = private unnamed_addr constant [32 x i8] c"broken stream, invalid padding\0A\00", align 1
@.str.4 = private unnamed_addr constant [42 x i8] c"sample/frame number invalid; utf8 fscked\0A\00", align 1
@.str.5 = private unnamed_addr constant [28 x i8] c"reserved blocksize code: 0\0A\00", align 1
@ff_flac_blocksize_table = external local_unnamed_addr constant [16 x i32], align 16
@ff_flac_sample_rate_table = external local_unnamed_addr constant [16 x i32], align 16
@.str.6 = private unnamed_addr constant [29 x i8] c"illegal sample rate code %d\0A\00", align 1
@.str.7 = private unnamed_addr constant [21 x i8] c"header crc mismatch\0A\00", align 1
@.str.8 = private unnamed_addr constant [30 x i8] c"extradata NULL or too small.\0A\00", align 1
@.str.9 = private unnamed_addr constant [39 x i8] c"extradata contains %d bytes too many.\0A\00", align 1
@.str.10 = private unnamed_addr constant [22 x i8] c"extradata too small.\0A\00", align 1
@flac_channel_layouts = internal unnamed_addr constant [8 x i64] [i64 4, i64 3, i64 7, i64 51, i64 1543, i64 1551, i64 1807, i64 1599], align 16
@.str.11 = private unnamed_addr constant [27 x i8] c"invalid max blocksize: %d\0A\00", align 1
@.str.12 = private unnamed_addr constant [17 x i8] c"invalid bps: %d\0A\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ff_flac_decode_frame_header(%struct.AVCodecContext*, %struct.GetBitContext*, %struct.FLACFrameInfo* nocapture, i32) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %1, i64 0, i32 2
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %1, i64 0, i32 4
  %8 = load i32, i32* %7, align 8
  %9 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %1, i64 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = lshr i32 %6, 3
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds i8, i8* %10, i64 %12
  %14 = bitcast i8* %13 to i32*
  %15 = load i32, i32* %14, align 1
  %16 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %15) #5, !srcloc !2
  %17 = and i32 %6, 7
  %18 = shl i32 %16, %17
  %19 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -15, i32 %18) #5, !srcloc !3
  %20 = add i32 %6, 15
  %21 = icmp ugt i32 %8, %20
  %22 = select i1 %21, i32 %20, i32 %8
  store i32 %22, i32* %5, align 8
  %23 = and i32 %19, 32767
  %24 = icmp eq i32 %23, 32764
  br i1 %24, label %28, label %25

25:                                               ; preds = %4
  %26 = bitcast %struct.AVCodecContext* %0 to i8*
  %27 = add nsw i32 %3, 16
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %26, i32 %27, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0)) #6
  br label %322

28:                                               ; preds = %4
  %29 = lshr i32 %22, 3
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds i8, i8* %10, i64 %30
  %32 = load i8, i8* %31, align 1
  %33 = and i32 %22, 7
  %34 = zext i8 %32 to i32
  %35 = shl i32 %34, %33
  %36 = lshr i32 %35, 7
  %37 = and i32 %36, 1
  %38 = icmp slt i32 %22, %8
  %39 = zext i1 %38 to i32
  %40 = add i32 %22, %39
  store i32 %40, i32* %5, align 8
  %41 = getelementptr inbounds %struct.FLACFrameInfo, %struct.FLACFrameInfo* %2, i64 0, i32 6
  store i32 %37, i32* %41, align 8
  %42 = load i32, i32* %5, align 8
  %43 = load i32, i32* %7, align 8
  %44 = load i8*, i8** %9, align 8
  %45 = lshr i32 %42, 3
  %46 = zext i32 %45 to i64
  %47 = getelementptr inbounds i8, i8* %44, i64 %46
  %48 = bitcast i8* %47 to i32*
  %49 = load i32, i32* %48, align 1
  %50 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %49) #5, !srcloc !2
  %51 = and i32 %42, 7
  %52 = shl i32 %50, %51
  %53 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -4, i32 %52) #5, !srcloc !3
  %54 = add i32 %42, 4
  %55 = icmp ugt i32 %43, %54
  %56 = select i1 %55, i32 %54, i32 %43
  store i32 %56, i32* %5, align 8
  %57 = lshr i32 %56, 3
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds i8, i8* %44, i64 %58
  %60 = bitcast i8* %59 to i32*
  %61 = load i32, i32* %60, align 1
  %62 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %61) #5, !srcloc !2
  %63 = and i32 %56, 7
  %64 = shl i32 %62, %63
  %65 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -4, i32 %64) #5, !srcloc !3
  %66 = add i32 %56, 4
  %67 = icmp ugt i32 %43, %66
  %68 = select i1 %67, i32 %66, i32 %43
  store i32 %68, i32* %5, align 8
  %69 = lshr i32 %68, 3
  %70 = zext i32 %69 to i64
  %71 = getelementptr inbounds i8, i8* %44, i64 %70
  %72 = bitcast i8* %71 to i32*
  %73 = load i32, i32* %72, align 1
  %74 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %73) #5, !srcloc !2
  %75 = and i32 %68, 7
  %76 = shl i32 %74, %75
  %77 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -4, i32 %76) #5, !srcloc !3
  %78 = add i32 %68, 4
  %79 = icmp ugt i32 %43, %78
  %80 = select i1 %79, i32 %78, i32 %43
  store i32 %80, i32* %5, align 8
  %81 = getelementptr inbounds %struct.FLACFrameInfo, %struct.FLACFrameInfo* %2, i64 0, i32 4
  store i32 %77, i32* %81, align 8
  %82 = icmp slt i32 %77, 8
  br i1 %82, label %83, label %86

83:                                               ; preds = %28
  %84 = add nsw i32 %77, 1
  %85 = getelementptr inbounds %struct.FLACFrameInfo, %struct.FLACFrameInfo* %2, i64 0, i32 1
  store i32 %84, i32* %85, align 4
  br label %94

86:                                               ; preds = %28
  %87 = icmp slt i32 %77, 11
  br i1 %87, label %88, label %91

88:                                               ; preds = %86
  %89 = getelementptr inbounds %struct.FLACFrameInfo, %struct.FLACFrameInfo* %2, i64 0, i32 1
  store i32 2, i32* %89, align 4
  %90 = add nsw i32 %77, -7
  br label %94

91:                                               ; preds = %86
  %92 = bitcast %struct.AVCodecContext* %0 to i8*
  %93 = add nsw i32 %3, 16
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %92, i32 %93, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0), i32 %77) #6
  br label %322

94:                                               ; preds = %88, %83
  %95 = phi i32 [ %90, %88 ], [ 0, %83 ]
  store i32 %95, i32* %81, align 8
  %96 = load i32, i32* %5, align 8
  %97 = load i32, i32* %7, align 8
  %98 = load i8*, i8** %9, align 8
  %99 = lshr i32 %96, 3
  %100 = zext i32 %99 to i64
  %101 = getelementptr inbounds i8, i8* %98, i64 %100
  %102 = bitcast i8* %101 to i32*
  %103 = load i32, i32* %102, align 1
  %104 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %103) #5, !srcloc !2
  %105 = and i32 %96, 7
  %106 = shl i32 %104, %105
  %107 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -3, i32 %106) #5, !srcloc !3
  %108 = add i32 %96, 3
  %109 = icmp ugt i32 %97, %108
  %110 = select i1 %109, i32 %108, i32 %97
  store i32 %110, i32* %5, align 8
  %111 = or i32 %107, 4
  %112 = icmp eq i32 %111, 7
  br i1 %112, label %113, label %116

113:                                              ; preds = %94
  %114 = bitcast %struct.AVCodecContext* %0 to i8*
  %115 = add nsw i32 %3, 16
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %114, i32 %115, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.2, i64 0, i64 0), i32 %107) #6
  br label %322

116:                                              ; preds = %94
  %117 = sext i32 %107 to i64
  %118 = getelementptr inbounds [8 x i8], [8 x i8]* @sample_size_table, i64 0, i64 %117
  %119 = load i8, i8* %118, align 1
  %120 = sext i8 %119 to i32
  %121 = getelementptr inbounds %struct.FLACFrameInfo, %struct.FLACFrameInfo* %2, i64 0, i32 2
  store i32 %120, i32* %121, align 8
  %122 = load i32, i32* %5, align 8
  %123 = load i8*, i8** %9, align 8
  %124 = lshr i32 %122, 3
  %125 = zext i32 %124 to i64
  %126 = getelementptr inbounds i8, i8* %123, i64 %125
  %127 = load i8, i8* %126, align 1
  %128 = and i32 %122, 7
  %129 = zext i8 %127 to i32
  %130 = shl i32 %129, %128
  %131 = load i32, i32* %7, align 8
  %132 = icmp slt i32 %122, %131
  %133 = zext i1 %132 to i32
  %134 = add i32 %122, %133
  store i32 %134, i32* %5, align 8
  %135 = trunc i32 %130 to i8
  %136 = icmp sgt i8 %135, -1
  br i1 %136, label %140, label %137

137:                                              ; preds = %116
  %138 = bitcast %struct.AVCodecContext* %0 to i8*
  %139 = add nsw i32 %3, 16
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %138, i32 %139, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.3, i64 0, i64 0)) #6
  br label %322

140:                                              ; preds = %116
  %141 = lshr i32 %134, 3
  %142 = zext i32 %141 to i64
  %143 = getelementptr inbounds i8, i8* %123, i64 %142
  %144 = bitcast i8* %143 to i32*
  %145 = load i32, i32* %144, align 1
  %146 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %145) #5, !srcloc !2
  %147 = and i32 %134, 7
  %148 = shl i32 %146, %147
  %149 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -8, i32 %148) #5, !srcloc !3
  %150 = add i32 %134, 8
  %151 = icmp ugt i32 %131, %150
  %152 = select i1 %151, i32 %150, i32 %131
  store i32 %152, i32* %5, align 8
  %153 = zext i32 %149 to i64
  %154 = lshr i32 %149, 1
  %155 = and i32 %154, 64
  %156 = and i64 %153, 192
  %157 = icmp eq i64 %156, 128
  %158 = icmp ugt i32 %149, 253
  %159 = or i1 %158, %157
  br i1 %159, label %189, label %160

160:                                              ; preds = %140
  %161 = and i32 %155, %149
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %193, label %163

163:                                              ; preds = %160, %181
  %164 = phi i32 [ %178, %181 ], [ %152, %160 ]
  %165 = phi i32 [ %185, %181 ], [ %155, %160 ]
  %166 = phi i64 [ %184, %181 ], [ %153, %160 ]
  %167 = lshr i32 %164, 3
  %168 = zext i32 %167 to i64
  %169 = getelementptr inbounds i8, i8* %123, i64 %168
  %170 = bitcast i8* %169 to i32*
  %171 = load i32, i32* %170, align 1
  %172 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %171) #5, !srcloc !2
  %173 = and i32 %164, 7
  %174 = shl i32 %172, %173
  %175 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -8, i32 %174) #5, !srcloc !3
  %176 = add i32 %164, 8
  %177 = icmp ugt i32 %131, %176
  %178 = select i1 %177, i32 %176, i32 %131
  store i32 %178, i32* %5, align 8
  %179 = add i32 %175, -128
  %180 = icmp ugt i32 %179, 63
  br i1 %180, label %189, label %181

181:                                              ; preds = %163
  %182 = shl i64 %166, 6
  %183 = zext i32 %179 to i64
  %184 = add nsw i64 %182, %183
  %185 = shl i32 %165, 5
  %186 = zext i32 %185 to i64
  %187 = and i64 %184, %186
  %188 = icmp eq i64 %187, 0
  br i1 %188, label %193, label %163

189:                                              ; preds = %163, %140
  %190 = getelementptr inbounds %struct.FLACFrameInfo, %struct.FLACFrameInfo* %2, i64 0, i32 5
  store i64 -1, i64* %190, align 8
  %191 = bitcast %struct.AVCodecContext* %0 to i8*
  %192 = add nsw i32 %3, 16
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %191, i32 %192, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.4, i64 0, i64 0)) #6
  br label %322

193:                                              ; preds = %181, %160
  %194 = phi i64 [ %153, %160 ], [ %184, %181 ]
  %195 = phi i32 [ %155, %160 ], [ %185, %181 ]
  %196 = shl i32 %195, 1
  %197 = add i32 %196, -1
  %198 = zext i32 %197 to i64
  %199 = and i64 %194, %198
  %200 = getelementptr inbounds %struct.FLACFrameInfo, %struct.FLACFrameInfo* %2, i64 0, i32 5
  store i64 %199, i64* %200, align 8
  switch i32 %53, label %238 [
    i32 0, label %201
    i32 6, label %204
    i32 7, label %221
  ]

201:                                              ; preds = %193
  %202 = bitcast %struct.AVCodecContext* %0 to i8*
  %203 = add nsw i32 %3, 16
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %202, i32 %203, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.5, i64 0, i64 0)) #6
  br label %322

204:                                              ; preds = %193
  %205 = load i32, i32* %5, align 8
  %206 = load i32, i32* %7, align 8
  %207 = load i8*, i8** %9, align 8
  %208 = lshr i32 %205, 3
  %209 = zext i32 %208 to i64
  %210 = getelementptr inbounds i8, i8* %207, i64 %209
  %211 = bitcast i8* %210 to i32*
  %212 = load i32, i32* %211, align 1
  %213 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %212) #5, !srcloc !2
  %214 = and i32 %205, 7
  %215 = shl i32 %213, %214
  %216 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -8, i32 %215) #5, !srcloc !3
  %217 = add i32 %205, 8
  %218 = icmp ugt i32 %206, %217
  %219 = select i1 %218, i32 %217, i32 %206
  store i32 %219, i32* %5, align 8
  %220 = add i32 %216, 1
  br label %242

221:                                              ; preds = %193
  %222 = load i32, i32* %5, align 8
  %223 = load i32, i32* %7, align 8
  %224 = load i8*, i8** %9, align 8
  %225 = lshr i32 %222, 3
  %226 = zext i32 %225 to i64
  %227 = getelementptr inbounds i8, i8* %224, i64 %226
  %228 = bitcast i8* %227 to i32*
  %229 = load i32, i32* %228, align 1
  %230 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %229) #5, !srcloc !2
  %231 = and i32 %222, 7
  %232 = shl i32 %230, %231
  %233 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -16, i32 %232) #5, !srcloc !3
  %234 = add i32 %222, 16
  %235 = icmp ugt i32 %223, %234
  %236 = select i1 %235, i32 %234, i32 %223
  store i32 %236, i32* %5, align 8
  %237 = add i32 %233, 1
  br label %242

238:                                              ; preds = %193
  %239 = sext i32 %53 to i64
  %240 = getelementptr inbounds [16 x i32], [16 x i32]* @ff_flac_blocksize_table, i64 0, i64 %239
  %241 = load i32, i32* %240, align 4
  br label %242

242:                                              ; preds = %204, %238, %221
  %243 = phi i32 [ %220, %204 ], [ %241, %238 ], [ %237, %221 ]
  %244 = getelementptr inbounds %struct.FLACFrameInfo, %struct.FLACFrameInfo* %2, i64 0, i32 3
  store i32 %243, i32* %244, align 4
  %245 = icmp slt i32 %65, 12
  br i1 %245, label %246, label %250

246:                                              ; preds = %242
  %247 = sext i32 %65 to i64
  %248 = getelementptr inbounds [16 x i32], [16 x i32]* @ff_flac_sample_rate_table, i64 0, i64 %247
  %249 = load i32, i32* %248, align 4
  br label %304

250:                                              ; preds = %242
  switch i32 %65, label %301 [
    i32 12, label %251
    i32 13, label %268
    i32 14, label %284
  ]

251:                                              ; preds = %250
  %252 = load i32, i32* %5, align 8
  %253 = load i32, i32* %7, align 8
  %254 = load i8*, i8** %9, align 8
  %255 = lshr i32 %252, 3
  %256 = zext i32 %255 to i64
  %257 = getelementptr inbounds i8, i8* %254, i64 %256
  %258 = bitcast i8* %257 to i32*
  %259 = load i32, i32* %258, align 1
  %260 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %259) #5, !srcloc !2
  %261 = and i32 %252, 7
  %262 = shl i32 %260, %261
  %263 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -8, i32 %262) #5, !srcloc !3
  %264 = add i32 %252, 8
  %265 = icmp ugt i32 %253, %264
  %266 = select i1 %265, i32 %264, i32 %253
  store i32 %266, i32* %5, align 8
  %267 = mul i32 %263, 1000
  br label %304

268:                                              ; preds = %250
  %269 = load i32, i32* %5, align 8
  %270 = load i32, i32* %7, align 8
  %271 = load i8*, i8** %9, align 8
  %272 = lshr i32 %269, 3
  %273 = zext i32 %272 to i64
  %274 = getelementptr inbounds i8, i8* %271, i64 %273
  %275 = bitcast i8* %274 to i32*
  %276 = load i32, i32* %275, align 1
  %277 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %276) #5, !srcloc !2
  %278 = and i32 %269, 7
  %279 = shl i32 %277, %278
  %280 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -16, i32 %279) #5, !srcloc !3
  %281 = add i32 %269, 16
  %282 = icmp ugt i32 %270, %281
  %283 = select i1 %282, i32 %281, i32 %270
  store i32 %283, i32* %5, align 8
  br label %304

284:                                              ; preds = %250
  %285 = load i32, i32* %5, align 8
  %286 = load i32, i32* %7, align 8
  %287 = load i8*, i8** %9, align 8
  %288 = lshr i32 %285, 3
  %289 = zext i32 %288 to i64
  %290 = getelementptr inbounds i8, i8* %287, i64 %289
  %291 = bitcast i8* %290 to i32*
  %292 = load i32, i32* %291, align 1
  %293 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %292) #5, !srcloc !2
  %294 = and i32 %285, 7
  %295 = shl i32 %293, %294
  %296 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -16, i32 %295) #5, !srcloc !3
  %297 = add i32 %285, 16
  %298 = icmp ugt i32 %286, %297
  %299 = select i1 %298, i32 %297, i32 %286
  store i32 %299, i32* %5, align 8
  %300 = mul i32 %296, 10
  br label %304

301:                                              ; preds = %250
  %302 = bitcast %struct.AVCodecContext* %0 to i8*
  %303 = add nsw i32 %3, 16
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %302, i32 %303, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.6, i64 0, i64 0), i32 %65) #6
  br label %322

304:                                              ; preds = %251, %284, %268, %246
  %305 = phi i32 [ %267, %251 ], [ %300, %284 ], [ %280, %268 ], [ %249, %246 ]
  %306 = getelementptr inbounds %struct.FLACFrameInfo, %struct.FLACFrameInfo* %2, i64 0, i32 0
  store i32 %305, i32* %306, align 8
  %307 = load i32, i32* %5, align 8
  %308 = load i32, i32* %7, align 8
  %309 = add i32 %307, 8
  %310 = icmp ugt i32 %308, %309
  %311 = select i1 %310, i32 %309, i32 %308
  store i32 %311, i32* %5, align 8
  %312 = tail call i32* @av_crc_get_table(i32 0) #6
  %313 = load i8*, i8** %9, align 8
  %314 = load i32, i32* %5, align 8
  %315 = sdiv i32 %314, 8
  %316 = sext i32 %315 to i64
  %317 = tail call i32 @av_crc(i32* %312, i32 0, i8* %313, i64 %316) #7
  %318 = icmp eq i32 %317, 0
  br i1 %318, label %322, label %319

319:                                              ; preds = %304
  %320 = bitcast %struct.AVCodecContext* %0 to i8*
  %321 = add nsw i32 %3, 16
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %320, i32 %321, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.7, i64 0, i64 0)) #6
  br label %322

322:                                              ; preds = %304, %319, %301, %201, %189, %137, %113, %91, %25
  %323 = phi i32 [ -1094995529, %25 ], [ -1094995529, %113 ], [ -1094995529, %137 ], [ -1094995529, %189 ], [ -1094995529, %201 ], [ -1094995529, %319 ], [ -1094995529, %301 ], [ -1094995529, %91 ], [ 0, %304 ]
  ret i32 %323
}

declare void @av_log(i8*, i32, i8*, ...) local_unnamed_addr #1

; Function Attrs: nounwind readonly
declare i32 @av_crc(i32*, i32, i8*, i64) local_unnamed_addr #2

declare i32* @av_crc_get_table(i32) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @ff_flac_get_max_frame_size(i32, i32, i32) local_unnamed_addr #3 {
  %4 = add nsw i32 %2, 14
  %5 = sdiv i32 %4, 8
  %6 = mul nsw i32 %5, %1
  %7 = icmp eq i32 %1, 2
  %8 = shl nsw i32 %2, 1
  %9 = or i32 %8, 1
  %10 = mul nsw i32 %2, %1
  %11 = select i1 %7, i32 %9, i32 %10
  %12 = mul nsw i32 %11, %0
  %13 = add nsw i32 %12, 7
  %14 = sdiv i32 %13, 8
  %15 = add i32 %6, 18
  %16 = add i32 %15, %14
  ret i32 %16
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ff_flac_is_extradata_valid(%struct.AVCodecContext*, i32* nocapture, i8** nocapture) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 15
  %5 = load i8*, i8** %4, align 8
  %6 = icmp eq i8* %5, null
  br i1 %6, label %11, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 16
  %9 = load i32, i32* %8, align 8
  %10 = icmp slt i32 %9, 34
  br i1 %10, label %11, label %13

11:                                               ; preds = %3, %7
  %12 = bitcast %struct.AVCodecContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %12, i32 16, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.8, i64 0, i64 0)) #6
  br label %33

13:                                               ; preds = %7
  %14 = bitcast i8* %5 to i32*
  %15 = load i32, i32* %14, align 1
  %16 = icmp eq i32 %15, 1130450022
  br i1 %16, label %24, label %17

17:                                               ; preds = %13
  %18 = icmp eq i32 %9, 34
  br i1 %18, label %22, label %19

19:                                               ; preds = %17
  %20 = bitcast %struct.AVCodecContext* %0 to i8*
  %21 = sub nsw i32 34, %9
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %20, i32 24, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.9, i64 0, i64 0), i32 %21) #6
  br label %22

22:                                               ; preds = %17, %19
  store i32 0, i32* %1, align 4
  %23 = load i8*, i8** %4, align 8
  br label %31

24:                                               ; preds = %13
  %25 = icmp slt i32 %9, 42
  br i1 %25, label %26, label %28

26:                                               ; preds = %24
  %27 = bitcast %struct.AVCodecContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %27, i32 16, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.10, i64 0, i64 0)) #6
  br label %33

28:                                               ; preds = %24
  store i32 1, i32* %1, align 4
  %29 = load i8*, i8** %4, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 8
  br label %31

31:                                               ; preds = %28, %22
  %32 = phi i8* [ %30, %28 ], [ %23, %22 ]
  store i8* %32, i8** %2, align 8
  br label %33

33:                                               ; preds = %31, %26, %11
  %34 = phi i32 [ 0, %11 ], [ 1, %31 ], [ 0, %26 ]
  ret i32 %34
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ff_flac_set_channel_layout(%struct.AVCodecContext* nocapture) local_unnamed_addr #4 {
  %2 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 83
  %3 = load i32, i32* %2, align 4
  %4 = icmp ult i32 %3, 9
  br i1 %4, label %5, label %10

5:                                                ; preds = %1
  %6 = add nsw i32 %3, -1
  %7 = sext i32 %6 to i64
  %8 = getelementptr inbounds [8 x i64], [8 x i64]* @flac_channel_layouts, i64 0, i64 %7
  %9 = load i64, i64* %8, align 8
  br label %10

10:                                               ; preds = %1, %5
  %11 = phi i64 [ %9, %5 ], [ 0, %1 ]
  %12 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 89
  store i64 %11, i64* %12, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ff_flac_parse_streaminfo(%struct.AVCodecContext*, %struct.FLACStreaminfo* nocapture, i8*) local_unnamed_addr #0 {
  %4 = icmp eq i8* %2, null
  %5 = select i1 %4, i32 8, i32 280
  %6 = select i1 %4, i32 8, i32 16
  %7 = lshr exact i32 %6, 3
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds i8, i8* %2, i64 %8
  %10 = bitcast i8* %9 to i32*
  %11 = load i32, i32* %10, align 1
  %12 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %11) #5, !srcloc !2
  %13 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -16, i32 %12) #5, !srcloc !3
  %14 = add nuw nsw i32 %6, 16
  %15 = getelementptr inbounds %struct.FLACStreaminfo, %struct.FLACStreaminfo* %1, i64 0, i32 3
  store i32 %13, i32* %15, align 4
  %16 = icmp slt i32 %13, 16
  br i1 %16, label %17, label %19

17:                                               ; preds = %3
  %18 = bitcast %struct.AVCodecContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %18, i32 24, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.11, i64 0, i64 0), i32 %13) #6
  store i32 16, i32* %15, align 4
  br label %144

19:                                               ; preds = %3
  %20 = icmp ugt i32 %5, %14
  %21 = select i1 %20, i32 %14, i32 %5
  %22 = add nuw nsw i32 %21, 24
  %23 = icmp ugt i32 %5, %22
  %24 = select i1 %23, i32 %22, i32 %5
  %25 = lshr exact i32 %24, 3
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds i8, i8* %2, i64 %26
  %28 = bitcast i8* %27 to i32*
  %29 = load i32, i32* %28, align 1
  %30 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %29) #5, !srcloc !2
  %31 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -24, i32 %30) #5, !srcloc !3
  %32 = add nuw nsw i32 %24, 24
  %33 = icmp ugt i32 %5, %32
  %34 = select i1 %33, i32 %32, i32 %5
  %35 = getelementptr inbounds %struct.FLACStreaminfo, %struct.FLACStreaminfo* %1, i64 0, i32 4
  store i32 %31, i32* %35, align 8
  %36 = lshr i32 %34, 3
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds i8, i8* %2, i64 %37
  %39 = bitcast i8* %38 to i32*
  %40 = load i32, i32* %39, align 1
  %41 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %40) #5, !srcloc !2
  %42 = and i32 %34, 7
  %43 = shl i32 %41, %42
  %44 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -20, i32 %43) #5, !srcloc !3
  %45 = add nuw nsw i32 %34, 20
  %46 = icmp ugt i32 %5, %45
  %47 = select i1 %46, i32 %45, i32 %5
  %48 = getelementptr inbounds %struct.FLACStreaminfo, %struct.FLACStreaminfo* %1, i64 0, i32 0
  store i32 %44, i32* %48, align 8
  %49 = lshr i32 %47, 3
  %50 = zext i32 %49 to i64
  %51 = getelementptr inbounds i8, i8* %2, i64 %50
  %52 = bitcast i8* %51 to i32*
  %53 = load i32, i32* %52, align 1
  %54 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %53) #5, !srcloc !2
  %55 = and i32 %47, 7
  %56 = shl i32 %54, %55
  %57 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -3, i32 %56) #5, !srcloc !3
  %58 = add nuw nsw i32 %47, 3
  %59 = icmp ugt i32 %5, %58
  %60 = select i1 %59, i32 %58, i32 %5
  %61 = add i32 %57, 1
  %62 = getelementptr inbounds %struct.FLACStreaminfo, %struct.FLACStreaminfo* %1, i64 0, i32 1
  store i32 %61, i32* %62, align 4
  %63 = lshr i32 %60, 3
  %64 = zext i32 %63 to i64
  %65 = getelementptr inbounds i8, i8* %2, i64 %64
  %66 = bitcast i8* %65 to i32*
  %67 = load i32, i32* %66, align 1
  %68 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %67) #5, !srcloc !2
  %69 = and i32 %60, 7
  %70 = shl i32 %68, %69
  %71 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -5, i32 %70) #5, !srcloc !3
  %72 = add nuw nsw i32 %60, 5
  %73 = icmp ugt i32 %5, %72
  %74 = select i1 %73, i32 %72, i32 %5
  %75 = add i32 %71, 1
  %76 = getelementptr inbounds %struct.FLACStreaminfo, %struct.FLACStreaminfo* %1, i64 0, i32 2
  store i32 %75, i32* %76, align 8
  %77 = icmp slt i32 %75, 4
  br i1 %77, label %78, label %80

78:                                               ; preds = %19
  %79 = bitcast %struct.AVCodecContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %79, i32 16, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.12, i64 0, i64 0), i32 %75) #6
  store i32 16, i32* %76, align 8
  br label %144

80:                                               ; preds = %19
  %81 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 83
  store i32 %61, i32* %81, align 4
  %82 = load i32, i32* %48, align 8
  %83 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 82
  store i32 %82, i32* %83, align 8
  %84 = load i32, i32* %76, align 8
  %85 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 143
  store i32 %84, i32* %85, align 4
  %86 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 89
  %87 = load i64, i64* %86, align 8
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %93, label %89

89:                                               ; preds = %80
  %90 = tail call i32 @av_get_channel_layout_nb_channels(i64 %87) #6
  %91 = load i32, i32* %81, align 4
  %92 = icmp eq i32 %90, %91
  br i1 %92, label %103, label %93

93:                                               ; preds = %80, %89
  %94 = phi i32 [ %91, %89 ], [ %61, %80 ]
  %95 = icmp ult i32 %94, 9
  br i1 %95, label %96, label %101

96:                                               ; preds = %93
  %97 = add nsw i32 %94, -1
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds [8 x i64], [8 x i64]* @flac_channel_layouts, i64 0, i64 %98
  %100 = load i64, i64* %99, align 8
  br label %101

101:                                              ; preds = %93, %96
  %102 = phi i64 [ %100, %96 ], [ 0, %93 ]
  store i64 %102, i64* %86, align 8
  br label %103

103:                                              ; preds = %89, %101
  %104 = lshr i32 %74, 3
  %105 = zext i32 %104 to i64
  %106 = getelementptr inbounds i8, i8* %2, i64 %105
  %107 = bitcast i8* %106 to i32*
  %108 = load i32, i32* %107, align 1
  %109 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %108) #5
  %110 = and i32 %74, 7
  %111 = shl i32 %109, %110
  %112 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -4, i32 %111) #5, !srcloc !3
  %113 = add nuw nsw i32 %74, 4
  %114 = icmp ugt i32 %5, %113
  %115 = select i1 %114, i32 %113, i32 %5
  %116 = lshr i32 %115, 3
  %117 = zext i32 %116 to i64
  %118 = getelementptr inbounds i8, i8* %2, i64 %117
  %119 = bitcast i8* %118 to i32*
  %120 = load i32, i32* %119, align 1
  %121 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %120) #5
  %122 = and i32 %115, 7
  %123 = shl i32 %121, %122
  %124 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -16, i32 %123) #5, !srcloc !3
  %125 = add nuw nsw i32 %115, 16
  %126 = icmp ugt i32 %5, %125
  %127 = select i1 %126, i32 %125, i32 %5
  %128 = shl i32 %124, 16
  %129 = lshr i32 %127, 3
  %130 = zext i32 %129 to i64
  %131 = getelementptr inbounds i8, i8* %2, i64 %130
  %132 = bitcast i8* %131 to i32*
  %133 = load i32, i32* %132, align 1
  %134 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %133) #5, !srcloc !2
  %135 = and i32 %127, 7
  %136 = shl i32 %134, %135
  %137 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -16, i32 %136) #5, !srcloc !3
  %138 = or i32 %137, %128
  %139 = zext i32 %112 to i64
  %140 = shl nuw i64 %139, 32
  %141 = zext i32 %138 to i64
  %142 = or i64 %140, %141
  %143 = getelementptr inbounds %struct.FLACStreaminfo, %struct.FLACStreaminfo* %1, i64 0, i32 5
  store i64 %142, i64* %143, align 8
  br label %144

144:                                              ; preds = %103, %78, %17
  %145 = phi i32 [ -1094995529, %17 ], [ -1094995529, %78 ], [ 0, %103 ]
  ret i32 %145
}

declare i32 @av_get_channel_layout_nb_channels(i64) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone }
attributes #6 = { nounwind }
attributes #7 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 1463542}
!3 = !{i32 1884177, i32 1884191}
