; ModuleID = '../../third_party/freetype/src/src/pshinter/pshinter.c'
source_filename = "../../third_party/freetype/src/src/pshinter/pshinter.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.PSHinter_Interface_ = type { %struct.PSH_Globals_FuncsRec_* (%struct.FT_ModuleRec_*)*, %struct.T1_Hints_FuncsRec_* (%struct.FT_ModuleRec_*)*, %struct.T2_Hints_FuncsRec_* (%struct.FT_ModuleRec_*)* }
%struct.PSH_Globals_FuncsRec_ = type { i32 (%struct.FT_MemoryRec_*, %struct.PS_PrivateRec_*, %struct.PSH_GlobalsRec_**)*, void (%struct.PSH_GlobalsRec_*, i64, i64, i64, i64)*, void (%struct.PSH_GlobalsRec_*)* }
%struct.FT_MemoryRec_ = type { i8*, i8* (%struct.FT_MemoryRec_*, i64)*, void (%struct.FT_MemoryRec_*, i8*)*, i8* (%struct.FT_MemoryRec_*, i64, i64, i8*)* }
%struct.PS_PrivateRec_ = type { i32, i32, i8, i8, i8, i8, [14 x i16], [10 x i16], [14 x i16], [10 x i16], i64, i32, i32, [1 x i16], [1 x i16], i8, i8, i8, i8, [13 x i16], [13 x i16], i64, i64, i64, [2 x i16] }
%struct.PSH_GlobalsRec_ = type { %struct.FT_MemoryRec_*, [2 x %struct.PSH_DimensionRec_], %struct.PSH_BluesRec_ }
%struct.PSH_DimensionRec_ = type { %struct.PSH_WidthsRec_, i64, i64 }
%struct.PSH_WidthsRec_ = type { i32, [16 x %struct.PSH_WidthRec_] }
%struct.PSH_WidthRec_ = type { i32, i64, i64 }
%struct.PSH_BluesRec_ = type { %struct.PSH_Blue_TableRec_, %struct.PSH_Blue_TableRec_, %struct.PSH_Blue_TableRec_, %struct.PSH_Blue_TableRec_, i64, i32, i32, i32, i8 }
%struct.PSH_Blue_TableRec_ = type { i32, [16 x %struct.PSH_Blue_ZoneRec_] }
%struct.PSH_Blue_ZoneRec_ = type { i32, i32, i32, i32, i64, i64, i64, i64 }
%struct.FT_ModuleRec_ = type { %struct.FT_Module_Class_*, %struct.FT_LibraryRec_*, %struct.FT_MemoryRec_* }
%struct.FT_Module_Class_ = type { i64, i64, i8*, i64, i64, i8*, i32 (%struct.FT_ModuleRec_*)*, void (%struct.FT_ModuleRec_*)*, i8* (%struct.FT_ModuleRec_*, i8*)* }
%struct.FT_LibraryRec_ = type { %struct.FT_MemoryRec_*, i32, i32, i32, i32, [32 x %struct.FT_ModuleRec_*], %struct.FT_ListRec_, %struct.FT_RendererRec_*, %struct.FT_ModuleRec_*, [4 x i32 (i8*)*], [5 x i8], void (%struct.FT_Bitmap_*, i8*)*, i32 }
%struct.FT_ListRec_ = type { %struct.FT_ListNodeRec_*, %struct.FT_ListNodeRec_* }
%struct.FT_ListNodeRec_ = type { %struct.FT_ListNodeRec_*, %struct.FT_ListNodeRec_*, i8* }
%struct.FT_RendererRec_ = type { %struct.FT_ModuleRec_, %struct.FT_Renderer_Class_*, i32, %struct.FT_Glyph_Class_, %struct.FT_RasterRec_*, i32 (%struct.FT_RasterRec_*, %struct.FT_Raster_Params_*)*, i32 (%struct.FT_RendererRec_*, %struct.FT_GlyphSlotRec_*, i32, %struct.FT_Vector_*)* }
%struct.FT_Renderer_Class_ = type { %struct.FT_Module_Class_, i32, i32 (%struct.FT_RendererRec_*, %struct.FT_GlyphSlotRec_*, i32, %struct.FT_Vector_*)*, i32 (%struct.FT_RendererRec_*, %struct.FT_GlyphSlotRec_*, %struct.FT_Matrix_*, %struct.FT_Vector_*)*, void (%struct.FT_RendererRec_*, %struct.FT_GlyphSlotRec_*, %struct.FT_BBox_*)*, i32 (%struct.FT_RendererRec_*, i64, i8*)*, %struct.FT_Raster_Funcs_* }
%struct.FT_GlyphSlotRec_ = type { %struct.FT_LibraryRec_*, %struct.FT_FaceRec_*, %struct.FT_GlyphSlotRec_*, i32, %struct.FT_Generic_, %struct.FT_Glyph_Metrics_, i64, i64, %struct.FT_Vector_, i32, %struct.FT_Bitmap_, i32, i32, %struct.FT_Outline_, i32, %struct.FT_SubGlyphRec_*, i8*, i64, i64, i64, i8*, %struct.FT_Slot_InternalRec_* }
%struct.FT_FaceRec_ = type { i64, i64, i64, i64, i64, i8*, i8*, i32, %struct.FT_Bitmap_Size_*, i32, %struct.FT_CharMapRec_**, %struct.FT_Generic_, %struct.FT_BBox_, i16, i16, i16, i16, i16, i16, i16, i16, %struct.FT_GlyphSlotRec_*, %struct.FT_SizeRec_*, %struct.FT_CharMapRec_*, %struct.FT_DriverRec_*, %struct.FT_MemoryRec_*, %struct.FT_StreamRec_*, %struct.FT_ListRec_, %struct.FT_Generic_, i8*, %struct.FT_Face_InternalRec_* }
%struct.FT_Bitmap_Size_ = type { i16, i16, i64, i64, i64 }
%struct.FT_BBox_ = type { i64, i64, i64, i64 }
%struct.FT_SizeRec_ = type { %struct.FT_FaceRec_*, %struct.FT_Generic_, %struct.FT_Size_Metrics_, %struct.FT_Size_InternalRec_* }
%struct.FT_Size_Metrics_ = type { i16, i16, i64, i64, i64, i64, i64, i64 }
%struct.FT_Size_InternalRec_ = type { i8*, i32, %struct.FT_Size_Metrics_ }
%struct.FT_CharMapRec_ = type { %struct.FT_FaceRec_*, i32, i16, i16 }
%struct.FT_DriverRec_ = type { %struct.FT_ModuleRec_, %struct.FT_Driver_ClassRec_*, %struct.FT_ListRec_, %struct.FT_GlyphLoaderRec_* }
%struct.FT_Driver_ClassRec_ = type { %struct.FT_Module_Class_, i64, i64, i64, i32 (%struct.FT_StreamRec_*, %struct.FT_FaceRec_*, i32, i32, %struct.FT_Parameter_*)*, void (%struct.FT_FaceRec_*)*, i32 (%struct.FT_SizeRec_*)*, void (%struct.FT_SizeRec_*)*, i32 (%struct.FT_GlyphSlotRec_*)*, void (%struct.FT_GlyphSlotRec_*)*, i32 (%struct.FT_GlyphSlotRec_*, %struct.FT_SizeRec_*, i32, i32)*, i32 (%struct.FT_FaceRec_*, i32, i32, %struct.FT_Vector_*)*, i32 (%struct.FT_FaceRec_*, %struct.FT_StreamRec_*)*, i32 (%struct.FT_FaceRec_*, i32, i32, i32, i64*)*, i32 (%struct.FT_SizeRec_*, %struct.FT_Size_RequestRec_*)*, i32 (%struct.FT_SizeRec_*, i64)* }
%struct.FT_Parameter_ = type { i64, i8* }
%struct.FT_Size_RequestRec_ = type { i32, i64, i64, i32, i32 }
%struct.FT_GlyphLoaderRec_ = type { %struct.FT_MemoryRec_*, i32, i32, i32, i8, %struct.FT_GlyphLoadRec_, %struct.FT_GlyphLoadRec_, i8* }
%struct.FT_GlyphLoadRec_ = type { %struct.FT_Outline_, %struct.FT_Vector_*, %struct.FT_Vector_*, i32, %struct.FT_SubGlyphRec_* }
%struct.FT_StreamRec_ = type { i8*, i64, i64, %union.FT_StreamDesc_, %union.FT_StreamDesc_, i64 (%struct.FT_StreamRec_*, i64, i8*, i64)*, void (%struct.FT_StreamRec_*)*, %struct.FT_MemoryRec_*, i8*, i8* }
%union.FT_StreamDesc_ = type { i64 }
%struct.FT_Face_InternalRec_ = type { %struct.FT_Matrix_, %struct.FT_Vector_, i32, %struct.FT_ServiceCacheRec_, %struct.FT_Incremental_InterfaceRec_*, i8, i32, [5 x i8], void (%struct.FT_Bitmap_*, i8*)*, i32 }
%struct.FT_Matrix_ = type { i64, i64, i64, i64 }
%struct.FT_ServiceCacheRec_ = type { i8*, i8*, i8*, i8*, i8*, i8* }
%struct.FT_Incremental_InterfaceRec_ = type { %struct.FT_Incremental_FuncsRec_*, %struct.FT_IncrementalRec_* }
%struct.FT_Incremental_FuncsRec_ = type { i32 (%struct.FT_IncrementalRec_*, i32, %struct.FT_Data_*)*, void (%struct.FT_IncrementalRec_*, %struct.FT_Data_*)*, i32 (%struct.FT_IncrementalRec_*, i32, i8, %struct.FT_Incremental_MetricsRec_*)* }
%struct.FT_Data_ = type { i8*, i32 }
%struct.FT_Incremental_MetricsRec_ = type { i64, i64, i64, i64 }
%struct.FT_IncrementalRec_ = type opaque
%struct.FT_Generic_ = type { i8*, void (i8*)* }
%struct.FT_Glyph_Metrics_ = type { i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.FT_Vector_ = type { i64, i64 }
%struct.FT_Bitmap_ = type { i32, i32, i32, i8*, i16, i8, i8, i8* }
%struct.FT_Outline_ = type { i16, i16, %struct.FT_Vector_*, i8*, i16*, i32 }
%struct.FT_SubGlyphRec_ = type { i32, i16, i32, i32, %struct.FT_Matrix_ }
%struct.FT_Slot_InternalRec_ = type { %struct.FT_GlyphLoaderRec_*, i32, i8, %struct.FT_Matrix_, %struct.FT_Vector_, i8*, i32 }
%struct.FT_Raster_Funcs_ = type { i32, i32 (i8*, %struct.FT_RasterRec_**)*, void (%struct.FT_RasterRec_*, i8*, i64)*, i32 (%struct.FT_RasterRec_*, i64, i8*)*, i32 (%struct.FT_RasterRec_*, %struct.FT_Raster_Params_*)*, void (%struct.FT_RasterRec_*)* }
%struct.FT_Glyph_Class_ = type { i64, i32, i32 (%struct.FT_GlyphRec_*, %struct.FT_GlyphSlotRec_*)*, void (%struct.FT_GlyphRec_*)*, i32 (%struct.FT_GlyphRec_*, %struct.FT_GlyphRec_*)*, void (%struct.FT_GlyphRec_*, %struct.FT_Matrix_*, %struct.FT_Vector_*)*, void (%struct.FT_GlyphRec_*, %struct.FT_BBox_*)*, i32 (%struct.FT_GlyphRec_*, %struct.FT_GlyphSlotRec_*)* }
%struct.FT_GlyphRec_ = type { %struct.FT_LibraryRec_*, %struct.FT_Glyph_Class_*, i32, %struct.FT_Vector_ }
%struct.FT_RasterRec_ = type opaque
%struct.FT_Raster_Params_ = type { %struct.FT_Bitmap_*, i8*, i32, void (i32, i32, %struct.FT_Span_*, i8*)*, void (i32, i32, %struct.FT_Span_*, i8*)*, i32 (i32, i32, i8*)*, void (i32, i32, i8*)*, i8*, %struct.FT_BBox_ }
%struct.FT_Span_ = type { i16, i16, i8 }
%struct.T1_Hints_FuncsRec_ = type { %struct.T1_HintsRec_*, void (%struct.T1_HintsRec_*)*, i32 (%struct.T1_HintsRec_*, i32)*, void (%struct.T1_HintsRec_*, i32, i64*)*, void (%struct.T1_HintsRec_*, i32, i64*)*, void (%struct.T1_HintsRec_*, i32)*, i32 (%struct.T1_HintsRec_*, %struct.FT_Outline_*, %struct.PSH_GlobalsRec_*, i32)* }
%struct.T1_HintsRec_ = type opaque
%struct.T2_Hints_FuncsRec_ = type { %struct.T2_HintsRec_*, void (%struct.T2_HintsRec_*)*, i32 (%struct.T2_HintsRec_*, i32)*, void (%struct.T2_HintsRec_*, i32, i32, i64*)*, void (%struct.T2_HintsRec_*, i32, i32, i8*)*, void (%struct.T2_HintsRec_*, i32, i8*)*, i32 (%struct.T2_HintsRec_*, %struct.FT_Outline_*, %struct.PSH_GlobalsRec_*, i32)* }
%struct.T2_HintsRec_ = type opaque
%struct.PS_HintsRec_ = type { %struct.FT_MemoryRec_*, i32, i32, i32, [2 x %struct.PS_DimensionRec_] }
%struct.PS_DimensionRec_ = type { %struct.PS_Hint_TableRec_, %struct.PS_Mask_TableRec_, %struct.PS_Mask_TableRec_ }
%struct.PS_Hint_TableRec_ = type { i32, i32, %struct.PS_HintRec_* }
%struct.PS_HintRec_ = type { i32, i32, i32 }
%struct.PS_Mask_TableRec_ = type { i32, i32, %struct.PS_MaskRec_* }
%struct.PS_MaskRec_ = type { i32, i32, i8*, i32 }
%struct.PSH_PointRec_ = type { %struct.PSH_PointRec_*, %struct.PSH_PointRec_*, %struct.PSH_ContourRec_*, i32, i32, i8, i8, %struct.PSH_HintRec_*, i64, i64, i64 }
%struct.PSH_ContourRec_ = type { %struct.PSH_PointRec_*, i32 }
%struct.PSH_HintRec_ = type { i32, i32, i64, i64, i32, %struct.PSH_HintRec_*, i32 }
%struct.PSH_GlyphRec_ = type { i32, i32, %struct.PSH_PointRec_*, %struct.PSH_ContourRec_*, %struct.FT_MemoryRec_*, %struct.FT_Outline_*, %struct.PSH_GlobalsRec_*, [2 x %struct.PSH_Hint_TableRec_], i8, i32, i32, i8, i8, i8, i8, i8 }
%struct.PSH_Hint_TableRec_ = type { i32, i32, %struct.PSH_HintRec_*, %struct.PSH_HintRec_**, %struct.PSH_HintRec_**, i32, %struct.PSH_ZoneRec_*, %struct.PSH_ZoneRec_*, %struct.PS_Mask_TableRec_*, %struct.PS_Mask_TableRec_* }
%struct.PSH_ZoneRec_ = type { i64, i64, i64, i64 }
%struct.PS_Hinter_Module_Rec_ = type { %struct.FT_ModuleRec_, %struct.PS_HintsRec_, %struct.PSH_Globals_FuncsRec_, %struct.T1_Hints_FuncsRec_, %struct.T2_Hints_FuncsRec_ }

@.str = private unnamed_addr constant [9 x i8] c"pshinter\00", align 1
@pshinter_interface = internal constant %struct.PSHinter_Interface_ { %struct.PSH_Globals_FuncsRec_* (%struct.FT_ModuleRec_*)* @pshinter_get_globals_funcs, %struct.T1_Hints_FuncsRec_* (%struct.FT_ModuleRec_*)* @pshinter_get_t1_funcs, %struct.T2_Hints_FuncsRec_* (%struct.FT_ModuleRec_*)* @pshinter_get_t2_funcs }, align 8
@pshinter_module_class = hidden local_unnamed_addr constant %struct.FT_Module_Class_ { i64 0, i64 280, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i64 65536, i64 131072, i8* bitcast (%struct.PSHinter_Interface_* @pshinter_interface to i8*), i32 (%struct.FT_ModuleRec_*)* bitcast (i32 (%struct.PS_Hinter_Module_Rec_*)* @ps_hinter_init to i32 (%struct.FT_ModuleRec_*)*), void (%struct.FT_ModuleRec_*)* bitcast (void (%struct.PS_Hinter_Module_Rec_*)* @ps_hinter_done to void (%struct.FT_ModuleRec_*)*), i8* (%struct.FT_ModuleRec_*, i8*)* null }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ps_hints_apply(%struct.PS_HintsRec_*, %struct.FT_Outline_*, %struct.PSH_GlobalsRec_*, i32) #0 {
  %5 = alloca [16 x %struct.PSH_PointRec_*], align 16
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %struct.PSH_GlyphRec_, align 8
  %9 = bitcast %struct.PSH_GlyphRec_* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %9) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 216, i1 false)
  %10 = getelementptr inbounds %struct.FT_Outline_, %struct.FT_Outline_* %1, i64 0, i32 1
  %11 = load i16, i16* %10, align 2
  %12 = icmp eq i16 %11, 0
  br i1 %12, label %1433, label %13

13:                                               ; preds = %4
  %14 = getelementptr inbounds %struct.FT_Outline_, %struct.FT_Outline_* %1, i64 0, i32 0
  %15 = load i16, i16* %14, align 8
  %16 = icmp eq i16 %15, 0
  br i1 %16, label %1433, label %17

17:                                               ; preds = %13
  %18 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %18) #6
  store i32 -1431655766, i32* %7, align 4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 0, i64 216, i1 false) #6
  %19 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %2, i64 0, i32 0
  %20 = load %struct.FT_MemoryRec_*, %struct.FT_MemoryRec_** %19, align 8
  %21 = getelementptr inbounds %struct.PSH_GlyphRec_, %struct.PSH_GlyphRec_* %8, i64 0, i32 4
  store %struct.FT_MemoryRec_* %20, %struct.FT_MemoryRec_** %21, align 8
  %22 = sext i16 %11 to i64
  %23 = call i8* @ft_mem_realloc(%struct.FT_MemoryRec_* %20, i64 72, i64 0, i64 %22, i8* null, i32* nonnull %7) #6
  %24 = getelementptr inbounds %struct.PSH_GlyphRec_, %struct.PSH_GlyphRec_* %8, i64 0, i32 2
  %25 = bitcast %struct.PSH_PointRec_** %24 to i8**
  store i8* %23, i8** %25, align 8
  %26 = load i32, i32* %7, align 4
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %405

28:                                               ; preds = %17
  %29 = load i16, i16* %14, align 8
  %30 = sext i16 %29 to i64
  %31 = call i8* @ft_mem_realloc(%struct.FT_MemoryRec_* %20, i64 16, i64 0, i64 %30, i8* null, i32* nonnull %7) #6
  %32 = getelementptr inbounds %struct.PSH_GlyphRec_, %struct.PSH_GlyphRec_* %8, i64 0, i32 3
  %33 = bitcast %struct.PSH_ContourRec_** %32 to i8**
  store i8* %31, i8** %33, align 8
  %34 = load i32, i32* %7, align 4
  %35 = icmp eq i32 %34, 0
  %36 = bitcast i8* %31 to %struct.PSH_ContourRec_*
  br i1 %35, label %37, label %405

37:                                               ; preds = %28
  %38 = load i16, i16* %10, align 2
  %39 = sext i16 %38 to i32
  %40 = getelementptr inbounds %struct.PSH_GlyphRec_, %struct.PSH_GlyphRec_* %8, i64 0, i32 0
  store i32 %39, i32* %40, align 8
  %41 = load i16, i16* %14, align 8
  %42 = sext i16 %41 to i32
  %43 = getelementptr inbounds %struct.PSH_GlyphRec_, %struct.PSH_GlyphRec_* %8, i64 0, i32 1
  store i32 %42, i32* %43, align 4
  %44 = load %struct.PSH_PointRec_*, %struct.PSH_PointRec_** %24, align 8
  %45 = icmp eq i16 %41, 0
  br i1 %45, label %125, label %46

46:                                               ; preds = %37
  %47 = getelementptr inbounds %struct.FT_Outline_, %struct.FT_Outline_* %1, i64 0, i32 4
  %48 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %44, i64 -1
  br label %49

49:                                               ; preds = %116, %46
  %50 = phi i64 [ 0, %46 ], [ %118, %116 ]
  %51 = phi %struct.PSH_ContourRec_* [ %36, %46 ], [ %117, %116 ]
  %52 = phi i32 [ 0, %46 ], [ %57, %116 ]
  %53 = load i16*, i16** %47, align 8
  %54 = getelementptr inbounds i16, i16* %53, i64 %50
  %55 = load i16, i16* %54, align 2
  %56 = sext i16 %55 to i32
  %57 = add nsw i32 %56, 1
  %58 = sub nsw i32 %57, %52
  %59 = zext i32 %52 to i64
  %60 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %44, i64 %59
  %61 = getelementptr inbounds %struct.PSH_ContourRec_, %struct.PSH_ContourRec_* %51, i64 0, i32 0
  store %struct.PSH_PointRec_* %60, %struct.PSH_PointRec_** %61, align 8
  %62 = getelementptr inbounds %struct.PSH_ContourRec_, %struct.PSH_ContourRec_* %51, i64 0, i32 1
  store i32 %58, i32* %62, align 8
  %63 = icmp eq i32 %58, 0
  br i1 %63, label %116, label %64

64:                                               ; preds = %49
  %65 = zext i32 %57 to i64
  %66 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %48, i64 %65
  %67 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %60, i64 0, i32 0
  store %struct.PSH_PointRec_* %66, %struct.PSH_PointRec_** %67, align 8
  %68 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %44, i64 %59, i32 2
  store %struct.PSH_ContourRec_* %51, %struct.PSH_ContourRec_** %68, align 8
  %69 = icmp eq i32 %58, 1
  br i1 %69, label %113, label %70

70:                                               ; preds = %64
  %71 = sub nsw i32 %56, %52
  %72 = xor i32 %52, -1
  %73 = add nsw i32 %72, %56
  %74 = and i32 %71, 3
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %87, label %76

76:                                               ; preds = %70, %76
  %77 = phi %struct.PSH_PointRec_* [ %80, %76 ], [ %60, %70 ]
  %78 = phi i32 [ %84, %76 ], [ %58, %70 ]
  %79 = phi i32 [ %85, %76 ], [ %74, %70 ]
  %80 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %77, i64 1
  %81 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %77, i64 0, i32 1
  store %struct.PSH_PointRec_* %80, %struct.PSH_PointRec_** %81, align 8
  %82 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %80, i64 0, i32 0
  store %struct.PSH_PointRec_* %77, %struct.PSH_PointRec_** %82, align 8
  %83 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %77, i64 1, i32 2
  store %struct.PSH_ContourRec_* %51, %struct.PSH_ContourRec_** %83, align 8
  %84 = add i32 %78, -1
  %85 = add i32 %79, -1
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %87, label %76, !llvm.loop !2

87:                                               ; preds = %76, %70
  %88 = phi %struct.PSH_PointRec_* [ %60, %70 ], [ %80, %76 ]
  %89 = phi i32 [ %58, %70 ], [ %84, %76 ]
  %90 = phi %struct.PSH_PointRec_* [ undef, %70 ], [ %80, %76 ]
  %91 = icmp ult i32 %73, 3
  br i1 %91, label %113, label %92

92:                                               ; preds = %87, %92
  %93 = phi %struct.PSH_PointRec_* [ %107, %92 ], [ %88, %87 ]
  %94 = phi i32 [ %111, %92 ], [ %89, %87 ]
  %95 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %93, i64 1
  %96 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %93, i64 0, i32 1
  store %struct.PSH_PointRec_* %95, %struct.PSH_PointRec_** %96, align 8
  %97 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %95, i64 0, i32 0
  store %struct.PSH_PointRec_* %93, %struct.PSH_PointRec_** %97, align 8
  %98 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %93, i64 1, i32 2
  store %struct.PSH_ContourRec_* %51, %struct.PSH_ContourRec_** %98, align 8
  %99 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %93, i64 2
  %100 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %93, i64 1, i32 1
  store %struct.PSH_PointRec_* %99, %struct.PSH_PointRec_** %100, align 8
  %101 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %99, i64 0, i32 0
  store %struct.PSH_PointRec_* %95, %struct.PSH_PointRec_** %101, align 8
  %102 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %93, i64 2, i32 2
  store %struct.PSH_ContourRec_* %51, %struct.PSH_ContourRec_** %102, align 8
  %103 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %93, i64 3
  %104 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %93, i64 2, i32 1
  store %struct.PSH_PointRec_* %103, %struct.PSH_PointRec_** %104, align 8
  %105 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %103, i64 0, i32 0
  store %struct.PSH_PointRec_* %99, %struct.PSH_PointRec_** %105, align 8
  %106 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %93, i64 3, i32 2
  store %struct.PSH_ContourRec_* %51, %struct.PSH_ContourRec_** %106, align 8
  %107 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %93, i64 4
  %108 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %93, i64 3, i32 1
  store %struct.PSH_PointRec_* %107, %struct.PSH_PointRec_** %108, align 8
  %109 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %107, i64 0, i32 0
  store %struct.PSH_PointRec_* %103, %struct.PSH_PointRec_** %109, align 8
  %110 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %93, i64 4, i32 2
  store %struct.PSH_ContourRec_* %51, %struct.PSH_ContourRec_** %110, align 8
  %111 = add i32 %94, -4
  %112 = icmp ugt i32 %111, 1
  br i1 %112, label %92, label %113

113:                                              ; preds = %87, %92, %64
  %114 = phi %struct.PSH_PointRec_* [ %60, %64 ], [ %90, %87 ], [ %107, %92 ]
  %115 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %114, i64 0, i32 1
  store %struct.PSH_PointRec_* %60, %struct.PSH_PointRec_** %115, align 8
  br label %116

116:                                              ; preds = %113, %49
  %117 = getelementptr inbounds %struct.PSH_ContourRec_, %struct.PSH_ContourRec_* %51, i64 1
  %118 = add nuw nsw i64 %50, 1
  %119 = load i32, i32* %43, align 4
  %120 = zext i32 %119 to i64
  %121 = icmp ult i64 %118, %120
  br i1 %121, label %49, label %122

122:                                              ; preds = %116
  %123 = load %struct.PSH_PointRec_*, %struct.PSH_PointRec_** %24, align 8
  %124 = load i32, i32* %40, align 8
  br label %125

125:                                              ; preds = %122, %37
  %126 = phi i32 [ %124, %122 ], [ %39, %37 ]
  %127 = phi %struct.PSH_PointRec_* [ %123, %122 ], [ %44, %37 ]
  %128 = getelementptr inbounds %struct.FT_Outline_, %struct.FT_Outline_* %1, i64 0, i32 2
  %129 = load %struct.FT_Vector_*, %struct.FT_Vector_** %128, align 8
  %130 = icmp eq i32 %126, 0
  br i1 %130, label %131, label %134

131:                                              ; preds = %125
  %132 = getelementptr inbounds %struct.PSH_GlyphRec_, %struct.PSH_GlyphRec_* %8, i64 0, i32 5
  store %struct.FT_Outline_* %1, %struct.FT_Outline_** %132, align 8
  %133 = getelementptr inbounds %struct.PSH_GlyphRec_, %struct.PSH_GlyphRec_* %8, i64 0, i32 6
  store %struct.PSH_GlobalsRec_* %2, %struct.PSH_GlobalsRec_** %133, align 8
  br label %295

134:                                              ; preds = %125
  %135 = ptrtoint %struct.PSH_PointRec_* %127 to i64
  %136 = getelementptr inbounds %struct.FT_Outline_, %struct.FT_Outline_* %1, i64 0, i32 3
  br label %137

137:                                              ; preds = %239, %134
  %138 = phi i64 [ 0, %134 ], [ %240, %239 ]
  %139 = phi %struct.PSH_PointRec_* [ %127, %134 ], [ %241, %239 ]
  %140 = bitcast %struct.PSH_PointRec_* %139 to i64*
  %141 = load i64, i64* %140, align 8
  %142 = sub i64 %141, %135
  %143 = sdiv exact i64 %142, 72
  %144 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %139, i64 0, i32 1
  %145 = bitcast %struct.PSH_PointRec_** %144 to i64*
  %146 = load i64, i64* %145, align 8
  %147 = sub i64 %146, %135
  %148 = sdiv exact i64 %147, 72
  %149 = load i8*, i8** %136, align 8
  %150 = getelementptr inbounds i8, i8* %149, i64 %138
  %151 = load i8, i8* %150, align 1
  %152 = and i8 %151, 1
  %153 = icmp eq i8 %152, 0
  br i1 %153, label %154, label %156

154:                                              ; preds = %137
  %155 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %139, i64 0, i32 3
  store i32 1, i32* %155, align 8
  br label %156

156:                                              ; preds = %154, %137
  %157 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %129, i64 %138, i32 0
  %158 = load i64, i64* %157, align 8
  %159 = shl i64 %143, 32
  %160 = ashr exact i64 %159, 32
  %161 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %129, i64 %160, i32 0
  %162 = load i64, i64* %161, align 8
  %163 = sub nsw i64 %158, %162
  %164 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %129, i64 %138, i32 1
  %165 = load i64, i64* %164, align 8
  %166 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %129, i64 %160, i32 1
  %167 = load i64, i64* %166, align 8
  %168 = sub nsw i64 %165, %167
  %169 = icmp slt i64 %163, 0
  %170 = sub nsw i64 0, %163
  %171 = select i1 %169, i64 %170, i64 %163
  %172 = icmp slt i64 %168, 0
  %173 = sub nsw i64 0, %168
  %174 = select i1 %172, i64 %173, i64 %168
  %175 = mul nsw i64 %174, 12
  %176 = icmp slt i64 %175, %171
  br i1 %176, label %177, label %180

177:                                              ; preds = %156
  %178 = icmp sgt i64 %163, -1
  %179 = select i1 %178, i8 2, i8 -2
  br label %186

180:                                              ; preds = %156
  %181 = mul nsw i64 %171, 12
  %182 = icmp slt i64 %181, %174
  br i1 %182, label %183, label %186

183:                                              ; preds = %180
  %184 = icmp sgt i64 %168, -1
  %185 = select i1 %184, i8 -1, i8 1
  br label %186

186:                                              ; preds = %183, %180, %177
  %187 = phi i8 [ %179, %177 ], [ %185, %183 ], [ 4, %180 ]
  %188 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %139, i64 0, i32 5
  store i8 %187, i8* %188, align 8
  %189 = shl i64 %148, 32
  %190 = ashr exact i64 %189, 32
  %191 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %129, i64 %190, i32 0
  %192 = load i64, i64* %191, align 8
  %193 = load i64, i64* %157, align 8
  %194 = sub nsw i64 %192, %193
  %195 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %129, i64 %190, i32 1
  %196 = load i64, i64* %195, align 8
  %197 = load i64, i64* %164, align 8
  %198 = sub nsw i64 %196, %197
  %199 = icmp slt i64 %194, 0
  %200 = sub nsw i64 0, %194
  %201 = select i1 %199, i64 %200, i64 %194
  %202 = icmp slt i64 %198, 0
  %203 = sub nsw i64 0, %198
  %204 = select i1 %202, i64 %203, i64 %198
  %205 = mul nsw i64 %204, 12
  %206 = icmp slt i64 %205, %201
  br i1 %206, label %207, label %210

207:                                              ; preds = %186
  %208 = icmp sgt i64 %194, -1
  %209 = select i1 %208, i32 2, i32 -2
  br label %216

210:                                              ; preds = %186
  %211 = mul nsw i64 %201, 12
  %212 = icmp slt i64 %211, %204
  br i1 %212, label %213, label %216

213:                                              ; preds = %210
  %214 = icmp sgt i64 %198, -1
  %215 = select i1 %214, i32 -1, i32 1
  br label %216

216:                                              ; preds = %213, %210, %207
  %217 = phi i32 [ %209, %207 ], [ %215, %213 ], [ 4, %210 ]
  %218 = trunc i32 %217 to i8
  %219 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %139, i64 0, i32 6
  store i8 %218, i8* %219, align 1
  %220 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %139, i64 0, i32 3
  %221 = load i32, i32* %220, align 8
  %222 = and i32 %221, 1
  %223 = icmp eq i32 %222, 0
  br i1 %223, label %226, label %224

224:                                              ; preds = %216
  %225 = or i32 %221, 2
  store i32 %225, i32* %220, align 8
  br label %239

226:                                              ; preds = %216
  %227 = sext i8 %187 to i32
  %228 = icmp eq i32 %217, %227
  br i1 %228, label %229, label %239

229:                                              ; preds = %226
  %230 = icmp eq i32 %217, 4
  br i1 %230, label %231, label %236

231:                                              ; preds = %229
  %232 = call i32 @ft_corner_is_flat(i64 %163, i64 %168, i64 %194, i64 %198) #6
  %233 = icmp eq i32 %232, 0
  br i1 %233, label %239, label %234

234:                                              ; preds = %231
  %235 = load i32, i32* %220, align 8
  br label %236

236:                                              ; preds = %234, %229
  %237 = phi i32 [ %235, %234 ], [ %221, %229 ]
  %238 = or i32 %237, 2
  store i32 %238, i32* %220, align 8
  br label %239

239:                                              ; preds = %236, %231, %226, %224
  %240 = add nuw nsw i64 %138, 1
  %241 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %139, i64 1
  %242 = load i32, i32* %40, align 8
  %243 = zext i32 %242 to i64
  %244 = icmp ult i64 %240, %243
  br i1 %244, label %137, label %245

245:                                              ; preds = %239
  %246 = getelementptr inbounds %struct.PSH_GlyphRec_, %struct.PSH_GlyphRec_* %8, i64 0, i32 5
  store %struct.FT_Outline_* %1, %struct.FT_Outline_** %246, align 8
  %247 = getelementptr inbounds %struct.PSH_GlyphRec_, %struct.PSH_GlyphRec_* %8, i64 0, i32 6
  store %struct.PSH_GlobalsRec_* %2, %struct.PSH_GlobalsRec_** %247, align 8
  %248 = icmp eq i32 %242, 0
  br i1 %248, label %295, label %249

249:                                              ; preds = %245
  %250 = load %struct.PSH_PointRec_*, %struct.PSH_PointRec_** %24, align 8
  %251 = load %struct.FT_Vector_*, %struct.FT_Vector_** %128, align 8
  %252 = and i32 %242, 1
  %253 = icmp eq i32 %252, 0
  br i1 %253, label %266, label %254

254:                                              ; preds = %249
  %255 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %250, i64 0, i32 4
  store i32 0, i32* %255, align 4
  %256 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %250, i64 0, i32 7
  store %struct.PSH_HintRec_* null, %struct.PSH_HintRec_** %256, align 8
  %257 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %251, i64 0, i32 0
  %258 = load i64, i64* %257, align 8
  %259 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %250, i64 0, i32 8
  store i64 %258, i64* %259, align 8
  %260 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %251, i64 0, i32 1
  %261 = load i64, i64* %260, align 8
  %262 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %250, i64 0, i32 9
  store i64 %261, i64* %262, align 8
  %263 = add i32 %242, -1
  %264 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %250, i64 1
  %265 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %251, i64 1
  br label %266

266:                                              ; preds = %249, %254
  %267 = phi i32 [ %242, %249 ], [ %263, %254 ]
  %268 = phi %struct.PSH_PointRec_* [ %250, %249 ], [ %264, %254 ]
  %269 = phi %struct.FT_Vector_* [ %251, %249 ], [ %265, %254 ]
  %270 = icmp eq i32 %242, 1
  br i1 %270, label %295, label %271

271:                                              ; preds = %266, %271
  %272 = phi i32 [ %291, %271 ], [ %267, %266 ]
  %273 = phi %struct.PSH_PointRec_* [ %292, %271 ], [ %268, %266 ]
  %274 = phi %struct.FT_Vector_* [ %293, %271 ], [ %269, %266 ]
  %275 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %273, i64 0, i32 4
  store i32 0, i32* %275, align 4
  %276 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %273, i64 0, i32 7
  store %struct.PSH_HintRec_* null, %struct.PSH_HintRec_** %276, align 8
  %277 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %274, i64 0, i32 0
  %278 = load i64, i64* %277, align 8
  %279 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %273, i64 0, i32 8
  store i64 %278, i64* %279, align 8
  %280 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %274, i64 0, i32 1
  %281 = load i64, i64* %280, align 8
  %282 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %273, i64 0, i32 9
  store i64 %281, i64* %282, align 8
  %283 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %273, i64 1, i32 4
  store i32 0, i32* %283, align 4
  %284 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %273, i64 1, i32 7
  store %struct.PSH_HintRec_* null, %struct.PSH_HintRec_** %284, align 8
  %285 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %274, i64 1, i32 0
  %286 = load i64, i64* %285, align 8
  %287 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %273, i64 1, i32 8
  store i64 %286, i64* %287, align 8
  %288 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %274, i64 1, i32 1
  %289 = load i64, i64* %288, align 8
  %290 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %273, i64 1, i32 9
  store i64 %289, i64* %290, align 8
  %291 = add i32 %272, -2
  %292 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %273, i64 2
  %293 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %274, i64 2
  %294 = icmp eq i32 %291, 0
  br i1 %294, label %295, label %271

295:                                              ; preds = %266, %271, %245, %131
  %296 = load i32, i32* %43, align 4
  %297 = icmp eq i32 %296, 0
  br i1 %297, label %399, label %298

298:                                              ; preds = %295, %394
  %299 = phi i64 [ %395, %394 ], [ 0, %295 ]
  %300 = load %struct.PSH_ContourRec_*, %struct.PSH_ContourRec_** %32, align 8
  %301 = getelementptr inbounds %struct.PSH_ContourRec_, %struct.PSH_ContourRec_* %300, i64 %299, i32 1
  %302 = load i32, i32* %301, align 8
  %303 = icmp ult i32 %302, 4
  br i1 %303, label %394, label %304

304:                                              ; preds = %298
  %305 = getelementptr inbounds %struct.PSH_ContourRec_, %struct.PSH_ContourRec_* %300, i64 %299, i32 0
  %306 = load %struct.PSH_PointRec_*, %struct.PSH_PointRec_** %305, align 8
  %307 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %306, i64 0, i32 8
  %308 = bitcast i64* %307 to <2 x i64>*
  br label %309

309:                                              ; preds = %314, %304
  %310 = phi %struct.PSH_PointRec_* [ %306, %304 ], [ %312, %314 ]
  %311 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %310, i64 0, i32 1
  %312 = load %struct.PSH_PointRec_*, %struct.PSH_PointRec_** %311, align 8
  %313 = icmp eq %struct.PSH_PointRec_* %312, %306
  br i1 %313, label %394, label %314

314:                                              ; preds = %309
  %315 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %312, i64 0, i32 8
  %316 = bitcast i64* %315 to <2 x i64>*
  %317 = load <2 x i64>, <2 x i64>* %316, align 8
  %318 = load <2 x i64>, <2 x i64>* %308, align 8
  %319 = sub nsw <2 x i64> %317, %318
  %320 = extractelement <2 x i64> %319, i32 0
  %321 = extractelement <2 x i64> %319, i32 1
  %322 = or i64 %321, %320
  %323 = icmp eq i64 %322, 0
  br i1 %323, label %309, label %324

324:                                              ; preds = %314, %341
  %325 = phi %struct.PSH_PointRec_* [ %327, %341 ], [ %306, %314 ]
  %326 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %325, i64 0, i32 0
  %327 = load %struct.PSH_PointRec_*, %struct.PSH_PointRec_** %326, align 8
  %328 = icmp eq %struct.PSH_PointRec_* %327, %306
  br i1 %328, label %394, label %329

329:                                              ; preds = %324
  %330 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %325, i64 0, i32 8
  %331 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %327, i64 0, i32 8
  %332 = bitcast i64* %330 to <2 x i64>*
  %333 = load <2 x i64>, <2 x i64>* %332, align 8
  %334 = bitcast i64* %331 to <2 x i64>*
  %335 = load <2 x i64>, <2 x i64>* %334, align 8
  %336 = sub nsw <2 x i64> %333, %335
  %337 = extractelement <2 x i64> %336, i32 0
  %338 = extractelement <2 x i64> %336, i32 1
  %339 = or i64 %338, %337
  %340 = icmp eq i64 %339, 0
  br i1 %340, label %341, label %342

341:                                              ; preds = %329, %342
  br label %324

342:                                              ; preds = %329
  %343 = call i32 @ft_corner_orientation(i64 %320, i64 %321, i64 %337, i64 %338) #6
  %344 = icmp eq i32 %343, 0
  br i1 %344, label %341, label %345

345:                                              ; preds = %342, %392
  %346 = phi %struct.PSH_PointRec_* [ %359, %392 ], [ %325, %342 ]
  %347 = phi %struct.PSH_PointRec_* [ %363, %392 ], [ %312, %342 ]
  %348 = phi i32 [ %375, %392 ], [ %343, %342 ]
  %349 = phi <2 x i64> [ %369, %392 ], [ %336, %342 ]
  %350 = extractelement <2 x i64> %349, i32 0
  %351 = extractelement <2 x i64> %349, i32 1
  br label %352

352:                                              ; preds = %374, %345
  %353 = phi %struct.PSH_PointRec_* [ %347, %345 ], [ %363, %374 ]
  %354 = phi i32 [ 0, %345 ], [ %365, %374 ]
  %355 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %353, i64 0, i32 8
  %356 = bitcast i64* %355 to <2 x i64>*
  %357 = load <2 x i64>, <2 x i64>* %356, align 8
  br label %358

358:                                              ; preds = %358, %352
  %359 = phi %struct.PSH_PointRec_* [ %353, %352 ], [ %363, %358 ]
  %360 = phi i32 [ %354, %352 ], [ %365, %358 ]
  %361 = phi <2 x i64> [ %357, %352 ], [ %368, %358 ]
  %362 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %359, i64 0, i32 1
  %363 = load %struct.PSH_PointRec_*, %struct.PSH_PointRec_** %362, align 8
  %364 = icmp eq %struct.PSH_PointRec_* %363, %325
  %365 = select i1 %364, i32 1, i32 %360
  %366 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %363, i64 0, i32 8
  %367 = bitcast i64* %366 to <2 x i64>*
  %368 = load <2 x i64>, <2 x i64>* %367, align 8
  %369 = sub nsw <2 x i64> %368, %361
  %370 = extractelement <2 x i64> %369, i32 0
  %371 = extractelement <2 x i64> %369, i32 1
  %372 = or i64 %371, %370
  %373 = icmp eq i64 %372, 0
  br i1 %373, label %358, label %374

374:                                              ; preds = %358
  %375 = call i32 @ft_corner_orientation(i64 %350, i64 %351, i64 %370, i64 %371) #6
  %376 = icmp eq i32 %375, 0
  br i1 %376, label %352, label %377

377:                                              ; preds = %374
  %378 = xor i32 %375, %348
  %379 = icmp slt i32 %378, 0
  br i1 %379, label %380, label %392

380:                                              ; preds = %377, %380
  %381 = phi %struct.PSH_PointRec_* [ %386, %380 ], [ %346, %377 ]
  %382 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %381, i64 0, i32 3
  %383 = load i32, i32* %382, align 8
  %384 = or i32 %383, 4
  store i32 %384, i32* %382, align 8
  %385 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %381, i64 0, i32 1
  %386 = load %struct.PSH_PointRec_*, %struct.PSH_PointRec_** %385, align 8
  %387 = icmp eq %struct.PSH_PointRec_* %386, %359
  br i1 %387, label %388, label %380

388:                                              ; preds = %380
  %389 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %359, i64 0, i32 3
  %390 = load i32, i32* %389, align 8
  %391 = or i32 %390, 4
  store i32 %391, i32* %389, align 8
  br label %392

392:                                              ; preds = %388, %377
  %393 = icmp eq i32 %365, 0
  br i1 %393, label %345, label %394

394:                                              ; preds = %309, %324, %392, %298
  %395 = add nuw nsw i64 %299, 1
  %396 = load i32, i32* %43, align 4
  %397 = zext i32 %396 to i64
  %398 = icmp ult i64 %395, %397
  br i1 %398, label %298, label %399

399:                                              ; preds = %394, %295
  %400 = getelementptr inbounds %struct.PSH_GlyphRec_, %struct.PSH_GlyphRec_* %8, i64 0, i32 7, i64 0
  %401 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %0, i64 0, i32 4, i64 0, i32 0
  %402 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %0, i64 0, i32 4, i64 0, i32 1
  %403 = call fastcc i32 @psh_hint_table_init(%struct.PSH_Hint_TableRec_* %400, %struct.PS_Hint_TableRec_* %401, %struct.PS_Mask_TableRec_* %402, %struct.FT_MemoryRec_* %20) #6
  store i32 %403, i32* %7, align 4
  %404 = icmp eq i32 %403, 0
  br i1 %404, label %407, label %405

405:                                              ; preds = %399, %28, %17
  %406 = phi i32 [ %26, %17 ], [ %34, %28 ], [ %403, %399 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %18) #6
  br label %1395

407:                                              ; preds = %399
  %408 = getelementptr inbounds %struct.PSH_GlyphRec_, %struct.PSH_GlyphRec_* %8, i64 0, i32 7, i64 1
  %409 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %0, i64 0, i32 4, i64 1, i32 0
  %410 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %0, i64 0, i32 4, i64 1, i32 1
  %411 = call fastcc i32 @psh_hint_table_init(%struct.PSH_Hint_TableRec_* %408, %struct.PS_Hint_TableRec_* %409, %struct.PS_Mask_TableRec_* %410, %struct.FT_MemoryRec_* %20) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %18) #6
  %412 = icmp eq i32 %411, 0
  br i1 %412, label %413, label %1395

413:                                              ; preds = %407
  %414 = getelementptr inbounds %struct.PSH_GlyphRec_, %struct.PSH_GlyphRec_* %8, i64 0, i32 6
  %415 = load %struct.PSH_GlobalsRec_*, %struct.PSH_GlobalsRec_** %414, align 8
  %416 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %415, i64 0, i32 1, i64 0, i32 1
  %417 = load i64, i64* %416, align 8
  %418 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %415, i64 0, i32 1, i64 1, i32 1
  %419 = load i64, i64* %418, align 8
  %420 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %2, i64 0, i32 2, i32 0, i32 1, i64 0, i32 0
  %421 = load i32, i32* %420, align 8
  %422 = sext i32 %421 to i64
  %423 = shl i64 %419, 32
  %424 = ashr exact i64 %423, 32
  %425 = mul nsw i64 %424, %422
  %426 = ashr i64 %425, 63
  %427 = add nsw i64 %425, 32768
  %428 = add nsw i64 %427, %426
  %429 = shl i64 %428, 16
  %430 = ashr i64 %429, 32
  %431 = add nsw i64 %430, 32
  %432 = and i64 %431, -64
  %433 = icmp eq i64 %432, 0
  %434 = icmp eq i64 %432, %430
  %435 = or i1 %433, %434
  br i1 %435, label %445, label %436

436:                                              ; preds = %413
  %437 = call i64 @FT_MulDiv(i64 %419, i64 %432, i64 %430) #6
  %438 = icmp slt i64 %432, %430
  br i1 %438, label %439, label %442

439:                                              ; preds = %436
  %440 = sdiv i64 %417, 50
  %441 = sub nsw i64 %417, %440
  br label %442

442:                                              ; preds = %439, %436
  %443 = phi i64 [ %441, %439 ], [ %417, %436 ]
  %444 = load %struct.PSH_GlobalsRec_*, %struct.PSH_GlobalsRec_** %414, align 8
  call void @psh_globals_set_scale(%struct.PSH_GlobalsRec_* %444, i64 %443, i64 %437, i64 0, i64 0)
  br label %445

445:                                              ; preds = %413, %442
  %446 = phi i1 [ false, %442 ], [ true, %413 ]
  %447 = getelementptr inbounds %struct.PSH_GlyphRec_, %struct.PSH_GlyphRec_* %8, i64 0, i32 11
  store i8 1, i8* %447, align 4
  %448 = getelementptr inbounds %struct.PSH_GlyphRec_, %struct.PSH_GlyphRec_* %8, i64 0, i32 12
  store i8 1, i8* %448, align 1
  %449 = icmp eq i32 %3, 2
  %450 = or i32 %3, 1
  %451 = icmp eq i32 %450, 3
  %452 = zext i1 %451 to i8
  %453 = getelementptr inbounds %struct.PSH_GlyphRec_, %struct.PSH_GlyphRec_* %8, i64 0, i32 13
  store i8 %452, i8* %453, align 2
  %454 = icmp eq i32 %3, 4
  %455 = or i1 %449, %454
  %456 = zext i1 %455 to i8
  %457 = getelementptr inbounds %struct.PSH_GlyphRec_, %struct.PSH_GlyphRec_* %8, i64 0, i32 14
  store i8 %456, i8* %457, align 1
  %458 = icmp ne i32 %3, 1
  %459 = zext i1 %458 to i8
  %460 = getelementptr inbounds %struct.PSH_GlyphRec_, %struct.PSH_GlyphRec_* %8, i64 0, i32 15
  store i8 %459, i8* %460, align 8
  %461 = getelementptr inbounds %struct.PSH_GlyphRec_, %struct.PSH_GlyphRec_* %8, i64 0, i32 5
  %462 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %2, i64 0, i32 2, i32 0, i32 0
  %463 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %2, i64 0, i32 2, i32 0, i32 1, i64 0
  %464 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %2, i64 0, i32 2, i32 7
  %465 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %2, i64 0, i32 2, i32 8
  %466 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %2, i64 0, i32 2, i32 6
  %467 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %2, i64 0, i32 2, i32 1, i32 0
  %468 = bitcast [16 x %struct.PSH_PointRec_*]* %5 to i8*
  %469 = bitcast i32* %6 to i8*
  %470 = getelementptr inbounds [16 x %struct.PSH_PointRec_*], [16 x %struct.PSH_PointRec_*]* %5, i64 0, i64 0
  br label %471

471:                                              ; preds = %1392, %445
  %472 = phi i64 [ 0, %445 ], [ %1393, %1392 ]
  %473 = load i32, i32* %40, align 8
  %474 = icmp eq i32 %473, 0
  br i1 %474, label %537, label %475

475:                                              ; preds = %471
  %476 = load %struct.PSH_PointRec_*, %struct.PSH_PointRec_** %24, align 8
  %477 = load %struct.FT_Outline_*, %struct.FT_Outline_** %461, align 8
  %478 = getelementptr inbounds %struct.FT_Outline_, %struct.FT_Outline_* %477, i64 0, i32 2
  %479 = load %struct.FT_Vector_*, %struct.FT_Vector_** %478, align 8
  %480 = icmp eq i64 %472, 0
  %481 = and i32 %473, 1
  %482 = icmp eq i32 %481, 0
  br i1 %482, label %499, label %483

483:                                              ; preds = %475
  %484 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %476, i64 0, i32 4
  store i32 0, i32* %484, align 4
  %485 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %476, i64 0, i32 7
  store %struct.PSH_HintRec_* null, %struct.PSH_HintRec_** %485, align 8
  %486 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %479, i64 0, i32 1
  %487 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %479, i64 0, i32 0
  %488 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %479, i64 0, i32 0
  %489 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %479, i64 0, i32 1
  %490 = select i1 %480, i64* %488, i64* %486
  %491 = select i1 %480, i64* %489, i64* %487
  %492 = load i64, i64* %490, align 8
  %493 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %476, i64 0, i32 8
  store i64 %492, i64* %493, align 8
  %494 = load i64, i64* %491, align 8
  %495 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %476, i64 0, i32 9
  store i64 %494, i64* %495, align 8
  %496 = add i32 %473, -1
  %497 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %476, i64 1
  %498 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %479, i64 1
  br label %499

499:                                              ; preds = %483, %475
  %500 = phi i32 [ %496, %483 ], [ %473, %475 ]
  %501 = phi %struct.PSH_PointRec_* [ %497, %483 ], [ %476, %475 ]
  %502 = phi %struct.FT_Vector_* [ %498, %483 ], [ %479, %475 ]
  %503 = icmp eq i32 %473, 1
  br i1 %503, label %537, label %504

504:                                              ; preds = %499, %504
  %505 = phi i32 [ %533, %504 ], [ %500, %499 ]
  %506 = phi %struct.PSH_PointRec_* [ %534, %504 ], [ %501, %499 ]
  %507 = phi %struct.FT_Vector_* [ %535, %504 ], [ %502, %499 ]
  %508 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %506, i64 0, i32 4
  store i32 0, i32* %508, align 4
  %509 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %506, i64 0, i32 7
  store %struct.PSH_HintRec_* null, %struct.PSH_HintRec_** %509, align 8
  %510 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %507, i64 0, i32 1
  %511 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %507, i64 0, i32 0
  %512 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %507, i64 0, i32 0
  %513 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %507, i64 0, i32 1
  %514 = select i1 %480, i64* %512, i64* %510
  %515 = select i1 %480, i64* %513, i64* %511
  %516 = load i64, i64* %514, align 8
  %517 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %506, i64 0, i32 8
  store i64 %516, i64* %517, align 8
  %518 = load i64, i64* %515, align 8
  %519 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %506, i64 0, i32 9
  store i64 %518, i64* %519, align 8
  %520 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %507, i64 1
  %521 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %506, i64 1, i32 4
  store i32 0, i32* %521, align 4
  %522 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %506, i64 1, i32 7
  store %struct.PSH_HintRec_* null, %struct.PSH_HintRec_** %522, align 8
  %523 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %507, i64 1, i32 1
  %524 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %520, i64 0, i32 0
  %525 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %520, i64 0, i32 0
  %526 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %507, i64 1, i32 1
  %527 = select i1 %480, i64* %525, i64* %523
  %528 = select i1 %480, i64* %526, i64* %524
  %529 = load i64, i64* %527, align 8
  %530 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %506, i64 1, i32 8
  store i64 %529, i64* %530, align 8
  %531 = load i64, i64* %528, align 8
  %532 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %506, i64 1, i32 9
  store i64 %531, i64* %532, align 8
  %533 = add i32 %505, -2
  %534 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %506, i64 2
  %535 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %507, i64 2
  %536 = icmp eq i32 %533, 0
  br i1 %536, label %537, label %504

537:                                              ; preds = %499, %504, %471
  %538 = load i32, i32* %43, align 4
  %539 = icmp eq i32 %538, 0
  br i1 %539, label %602, label %540

540:                                              ; preds = %537
  %541 = zext i32 %538 to i64
  %542 = load %struct.PSH_ContourRec_*, %struct.PSH_ContourRec_** %32, align 8
  br label %543

543:                                              ; preds = %599, %540
  %544 = phi i64 [ 0, %540 ], [ %600, %599 ]
  %545 = getelementptr inbounds %struct.PSH_ContourRec_, %struct.PSH_ContourRec_* %542, i64 %544, i32 0
  %546 = load %struct.PSH_PointRec_*, %struct.PSH_PointRec_** %545, align 8
  %547 = getelementptr inbounds %struct.PSH_ContourRec_, %struct.PSH_ContourRec_* %542, i64 %544, i32 1
  %548 = load i32, i32* %547, align 8
  %549 = icmp eq i32 %548, 0
  br i1 %549, label %599, label %550

550:                                              ; preds = %543
  %551 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %546, i64 0, i32 8
  br label %552

552:                                              ; preds = %557, %550
  %553 = phi %struct.PSH_PointRec_* [ %555, %557 ], [ %546, %550 ]
  %554 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %553, i64 0, i32 0
  %555 = load %struct.PSH_PointRec_*, %struct.PSH_PointRec_** %554, align 8
  %556 = icmp eq %struct.PSH_PointRec_* %555, %546
  br i1 %556, label %647, label %557

557:                                              ; preds = %552
  %558 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %555, i64 0, i32 8
  %559 = load i64, i64* %558, align 8
  %560 = load i64, i64* %551, align 8
  %561 = icmp eq i64 %559, %560
  br i1 %561, label %552, label %562

562:                                              ; preds = %557
  %563 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %555, i64 0, i32 1
  %564 = load %struct.PSH_PointRec_*, %struct.PSH_PointRec_** %563, align 8
  br label %565

565:                                              ; preds = %596, %562
  %566 = phi %struct.PSH_PointRec_* [ %564, %562 ], [ %572, %596 ]
  %567 = phi %struct.PSH_PointRec_* [ %555, %562 ], [ %598, %596 ]
  %568 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %566, i64 0, i32 8
  br label %569

569:                                              ; preds = %574, %565
  %570 = phi %struct.PSH_PointRec_* [ %566, %565 ], [ %572, %574 ]
  %571 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %570, i64 0, i32 1
  %572 = load %struct.PSH_PointRec_*, %struct.PSH_PointRec_** %571, align 8
  %573 = icmp eq %struct.PSH_PointRec_* %572, %564
  br i1 %573, label %599, label %574

574:                                              ; preds = %569
  %575 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %572, i64 0, i32 8
  %576 = load i64, i64* %575, align 8
  %577 = load i64, i64* %568, align 8
  %578 = icmp eq i64 %576, %577
  br i1 %578, label %569, label %579

579:                                              ; preds = %574
  %580 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %567, i64 0, i32 8
  %581 = load i64, i64* %580, align 8
  %582 = icmp slt i64 %581, %577
  br i1 %582, label %583, label %585

583:                                              ; preds = %579
  %584 = icmp slt i64 %576, %577
  br i1 %584, label %587, label %596

585:                                              ; preds = %579
  %586 = icmp sgt i64 %576, %577
  br i1 %586, label %587, label %596

587:                                              ; preds = %585, %583
  br label %588

588:                                              ; preds = %587, %588
  %589 = phi %struct.PSH_PointRec_* [ %594, %588 ], [ %566, %587 ]
  %590 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %589, i64 0, i32 4
  %591 = load i32, i32* %590, align 4
  %592 = or i32 %591, 64
  store i32 %592, i32* %590, align 4
  %593 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %589, i64 0, i32 1
  %594 = load %struct.PSH_PointRec_*, %struct.PSH_PointRec_** %593, align 8
  %595 = icmp eq %struct.PSH_PointRec_* %594, %572
  br i1 %595, label %596, label %588

596:                                              ; preds = %588, %585, %583
  %597 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %572, i64 0, i32 0
  %598 = load %struct.PSH_PointRec_*, %struct.PSH_PointRec_** %597, align 8
  br label %565

599:                                              ; preds = %569, %543
  %600 = add nuw nsw i64 %544, 1
  %601 = icmp eq i64 %600, %541
  br i1 %601, label %602, label %543

602:                                              ; preds = %599, %537, %649
  %603 = phi i32 [ %652, %649 ], [ %473, %537 ], [ %473, %599 ]
  %604 = phi i32 [ %651, %649 ], [ 0, %537 ], [ 0, %599 ]
  %605 = icmp ult i32 %604, %603
  br i1 %605, label %606, label %653

606:                                              ; preds = %602
  %607 = load %struct.PSH_PointRec_*, %struct.PSH_PointRec_** %24, align 8
  %608 = zext i32 %604 to i64
  %609 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %607, i64 %608
  %610 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %607, i64 %608, i32 4
  %611 = load i32, i32* %610, align 4
  %612 = and i32 %611, 64
  %613 = icmp eq i32 %612, 0
  br i1 %613, label %649, label %614

614:                                              ; preds = %606
  %615 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %607, i64 %608, i32 9
  br label %616

616:                                              ; preds = %621, %614
  %617 = phi %struct.PSH_PointRec_* [ %619, %621 ], [ %609, %614 ]
  %618 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %617, i64 0, i32 0
  %619 = load %struct.PSH_PointRec_*, %struct.PSH_PointRec_** %618, align 8
  %620 = icmp eq %struct.PSH_PointRec_* %619, %609
  br i1 %620, label %649, label %621

621:                                              ; preds = %616
  %622 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %619, i64 0, i32 9
  %623 = load i64, i64* %622, align 8
  %624 = load i64, i64* %615, align 8
  %625 = icmp eq i64 %623, %624
  br i1 %625, label %616, label %626

626:                                              ; preds = %621, %631
  %627 = phi %struct.PSH_PointRec_* [ %629, %631 ], [ %609, %621 ]
  %628 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %627, i64 0, i32 1
  %629 = load %struct.PSH_PointRec_*, %struct.PSH_PointRec_** %628, align 8
  %630 = icmp eq %struct.PSH_PointRec_* %629, %609
  br i1 %630, label %649, label %631

631:                                              ; preds = %626
  %632 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %629, i64 0, i32 9
  %633 = load i64, i64* %632, align 8
  %634 = icmp eq i64 %633, %624
  br i1 %634, label %626, label %635

635:                                              ; preds = %631
  %636 = icmp slt i64 %623, %624
  %637 = icmp sgt i64 %633, %624
  %638 = and i1 %636, %637
  br i1 %638, label %639, label %641

639:                                              ; preds = %635
  %640 = or i32 %611, 128
  store i32 %640, i32* %610, align 4
  br label %649

641:                                              ; preds = %635
  %642 = icmp sgt i64 %623, %624
  %643 = icmp slt i64 %633, %624
  %644 = and i1 %642, %643
  br i1 %644, label %645, label %649

645:                                              ; preds = %641
  %646 = or i32 %611, 256
  store i32 %646, i32* %610, align 4
  br label %649

647:                                              ; preds = %552
  %648 = trunc i64 %544 to i32
  br label %649

649:                                              ; preds = %616, %626, %647, %645, %641, %639, %606
  %650 = phi i32 [ %604, %641 ], [ %604, %645 ], [ %604, %639 ], [ %648, %647 ], [ %604, %606 ], [ %604, %626 ], [ %604, %616 ]
  %651 = add i32 %650, 1
  %652 = load i32, i32* %40, align 8
  br label %602

653:                                              ; preds = %602
  %654 = load %struct.PSH_GlobalsRec_*, %struct.PSH_GlobalsRec_** %414, align 8
  %655 = getelementptr inbounds %struct.PSH_GlyphRec_, %struct.PSH_GlyphRec_* %8, i64 0, i32 7, i64 %472, i32 0
  %656 = load i32, i32* %655, align 8
  %657 = icmp eq i32 %656, 0
  br i1 %657, label %670, label %658

658:                                              ; preds = %653
  %659 = getelementptr inbounds %struct.PSH_GlyphRec_, %struct.PSH_GlyphRec_* %8, i64 0, i32 7, i64 %472, i32 2
  %660 = load %struct.PSH_HintRec_*, %struct.PSH_HintRec_** %659, align 8
  %661 = trunc i64 %472 to i32
  br label %662

662:                                              ; preds = %662, %658
  %663 = phi i32 [ %665, %662 ], [ %656, %658 ]
  %664 = phi %struct.PSH_HintRec_* [ %666, %662 ], [ %660, %658 ]
  call fastcc void @psh_hint_align(%struct.PSH_HintRec_* %664, %struct.PSH_GlobalsRec_* %654, i32 %661, %struct.PSH_GlyphRec_* nonnull %8) #6
  %665 = add i32 %663, -1
  %666 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %664, i64 1
  %667 = icmp eq i32 %665, 0
  br i1 %667, label %668, label %662

668:                                              ; preds = %662
  %669 = load %struct.PSH_GlobalsRec_*, %struct.PSH_GlobalsRec_** %414, align 8
  br label %670

670:                                              ; preds = %668, %653
  %671 = phi %struct.PSH_GlobalsRec_* [ %669, %668 ], [ %654, %653 ]
  %672 = getelementptr inbounds %struct.PSH_GlyphRec_, %struct.PSH_GlyphRec_* %8, i64 0, i32 7, i64 %472
  %673 = getelementptr inbounds %struct.PSH_GlyphRec_, %struct.PSH_GlyphRec_* %8, i64 0, i32 7, i64 %472, i32 8
  %674 = load %struct.PS_Mask_TableRec_*, %struct.PS_Mask_TableRec_** %673, align 8
  %675 = getelementptr inbounds %struct.PS_Mask_TableRec_, %struct.PS_Mask_TableRec_* %674, i64 0, i32 2
  %676 = load %struct.PS_MaskRec_*, %struct.PS_MaskRec_** %675, align 8
  %677 = getelementptr inbounds %struct.PS_Mask_TableRec_, %struct.PS_Mask_TableRec_* %674, i64 0, i32 0
  %678 = load i32, i32* %677, align 8
  %679 = icmp eq i64 %472, 0
  %680 = select i1 %679, i32 1, i32 2
  %681 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %671, i64 0, i32 1, i64 %472, i32 1
  %682 = load i64, i64* %681, align 8
  %683 = call i64 @FT_DivFix(i64 32, i64 %682) #6
  %684 = trunc i64 %683 to i32
  %685 = icmp slt i32 %684, 30
  %686 = select i1 %685, i32 %684, i32 30
  %687 = icmp ugt i32 %678, 1
  br i1 %687, label %688, label %717

688:                                              ; preds = %670
  %689 = load i32, i32* %40, align 8
  %690 = icmp eq i32 %689, 0
  br i1 %690, label %767, label %691

691:                                              ; preds = %688
  %692 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %676, i64 0, i32 3
  %693 = load i32, i32* %692, align 8
  %694 = icmp ugt i32 %693, %689
  %695 = select i1 %694, i32 %689, i32 %693
  br label %696

696:                                              ; preds = %715, %691
  %697 = phi i32 [ %689, %691 ], [ %716, %715 ]
  %698 = phi %struct.PS_MaskRec_* [ %676, %691 ], [ %701, %715 ]
  %699 = phi i32 [ %678, %691 ], [ %713, %715 ]
  %700 = phi i32 [ %695, %691 ], [ %705, %715 ]
  %701 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %698, i64 1
  %702 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %698, i64 1, i32 3
  %703 = load i32, i32* %702, align 8
  %704 = icmp ult i32 %703, %697
  %705 = select i1 %704, i32 %703, i32 %697
  %706 = icmp ugt i32 %705, %700
  br i1 %706, label %707, label %712

707:                                              ; preds = %696
  %708 = sub i32 %705, %700
  %709 = load %struct.PSH_PointRec_*, %struct.PSH_PointRec_** %24, align 8
  %710 = zext i32 %700 to i64
  %711 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %709, i64 %710
  call fastcc void @psh_hint_table_activate_mask(%struct.PSH_Hint_TableRec_* %672, %struct.PS_MaskRec_* %701) #6
  call fastcc void @psh_hint_table_find_strong_points(%struct.PSH_Hint_TableRec_* %672, %struct.PSH_PointRec_* %711, i32 %708, i32 %686, i32 %680) #6
  br label %712

712:                                              ; preds = %707, %696
  %713 = add i32 %699, -1
  %714 = icmp ugt i32 %713, 1
  br i1 %714, label %715, label %719

715:                                              ; preds = %712
  %716 = load i32, i32* %40, align 8
  br label %696

717:                                              ; preds = %670
  %718 = icmp eq i32 %678, 1
  br i1 %718, label %719, label %725

719:                                              ; preds = %712, %717
  %720 = load i32, i32* %40, align 8
  %721 = load %struct.PSH_PointRec_*, %struct.PSH_PointRec_** %24, align 8
  %722 = load %struct.PS_Mask_TableRec_*, %struct.PS_Mask_TableRec_** %673, align 8
  %723 = getelementptr inbounds %struct.PS_Mask_TableRec_, %struct.PS_Mask_TableRec_* %722, i64 0, i32 2
  %724 = load %struct.PS_MaskRec_*, %struct.PS_MaskRec_** %723, align 8
  call fastcc void @psh_hint_table_activate_mask(%struct.PSH_Hint_TableRec_* %672, %struct.PS_MaskRec_* %724) #6
  call fastcc void @psh_hint_table_find_strong_points(%struct.PSH_Hint_TableRec_* %672, %struct.PSH_PointRec_* %721, i32 %720, i32 %686, i32 %680) #6
  br label %725

725:                                              ; preds = %719, %717
  %726 = load i32, i32* %40, align 8
  %727 = icmp eq i32 %726, 0
  br i1 %727, label %767, label %728

728:                                              ; preds = %725
  %729 = load %struct.PSH_PointRec_*, %struct.PSH_PointRec_** %24, align 8
  %730 = and i32 %726, 1
  %731 = icmp eq i32 %730, 0
  br i1 %731, label %746, label %732

732:                                              ; preds = %728
  %733 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %729, i64 0, i32 7
  %734 = load %struct.PSH_HintRec_*, %struct.PSH_HintRec_** %733, align 8
  %735 = icmp eq %struct.PSH_HintRec_* %734, null
  br i1 %735, label %743, label %736

736:                                              ; preds = %732
  %737 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %729, i64 0, i32 4
  %738 = load i32, i32* %737, align 4
  %739 = and i32 %738, 16
  %740 = icmp eq i32 %739, 0
  br i1 %740, label %741, label %743

741:                                              ; preds = %736
  %742 = or i32 %738, 16
  store i32 %742, i32* %737, align 4
  br label %743

743:                                              ; preds = %741, %736, %732
  %744 = add i32 %726, -1
  %745 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %729, i64 1
  br label %746

746:                                              ; preds = %743, %728
  %747 = phi %struct.PSH_PointRec_* [ %745, %743 ], [ %729, %728 ]
  %748 = phi i32 [ %744, %743 ], [ %726, %728 ]
  %749 = icmp eq i32 %726, 1
  br i1 %749, label %767, label %750

750:                                              ; preds = %746, %1442
  %751 = phi %struct.PSH_PointRec_* [ %1444, %1442 ], [ %747, %746 ]
  %752 = phi i32 [ %1443, %1442 ], [ %748, %746 ]
  %753 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %751, i64 0, i32 7
  %754 = load %struct.PSH_HintRec_*, %struct.PSH_HintRec_** %753, align 8
  %755 = icmp eq %struct.PSH_HintRec_* %754, null
  br i1 %755, label %763, label %756

756:                                              ; preds = %750
  %757 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %751, i64 0, i32 4
  %758 = load i32, i32* %757, align 4
  %759 = and i32 %758, 16
  %760 = icmp eq i32 %759, 0
  br i1 %760, label %761, label %763

761:                                              ; preds = %756
  %762 = or i32 %758, 16
  store i32 %762, i32* %757, align 4
  br label %763

763:                                              ; preds = %761, %756, %750
  %764 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %751, i64 1, i32 7
  %765 = load %struct.PSH_HintRec_*, %struct.PSH_HintRec_** %764, align 8
  %766 = icmp eq %struct.PSH_HintRec_* %765, null
  br i1 %766, label %1442, label %1435

767:                                              ; preds = %746, %1442, %688, %725
  %768 = phi i32 [ 0, %725 ], [ 0, %688 ], [ %726, %1442 ], [ %726, %746 ]
  %769 = phi i1 [ true, %725 ], [ true, %688 ], [ false, %1442 ], [ false, %746 ]
  %770 = icmp eq i64 %472, 1
  br i1 %770, label %771, label %874

771:                                              ; preds = %767
  br i1 %769, label %964, label %772

772:                                              ; preds = %771
  %773 = load %struct.PSH_PointRec_*, %struct.PSH_PointRec_** %24, align 8
  br label %774

774:                                              ; preds = %870, %772
  %775 = phi %struct.PSH_PointRec_* [ %773, %772 ], [ %872, %870 ]
  %776 = phi i32 [ %768, %772 ], [ %871, %870 ]
  %777 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %775, i64 0, i32 5
  %778 = load i8, i8* %777, align 8
  switch i8 %778, label %779 [
    i8 2, label %782
    i8 -2, label %782
  ]

779:                                              ; preds = %774
  %780 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %775, i64 0, i32 6
  %781 = load i8, i8* %780, align 1
  switch i8 %781, label %870 [
    i8 2, label %782
    i8 -2, label %782
  ]

782:                                              ; preds = %779, %779, %774, %774
  %783 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %775, i64 0, i32 4
  %784 = load i32, i32* %783, align 4
  %785 = and i32 %784, 16
  %786 = icmp eq i32 %785, 0
  br i1 %786, label %787, label %870

787:                                              ; preds = %782
  %788 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %775, i64 0, i32 8
  %789 = load i64, i64* %788, align 8
  %790 = load i32, i32* %462, align 8
  %791 = icmp eq i32 %790, 0
  br i1 %791, label %828, label %792

792:                                              ; preds = %787
  %793 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %775, i64 0, i32 10
  br label %794

794:                                              ; preds = %823, %792
  %795 = phi i32 [ %784, %792 ], [ %824, %823 ]
  %796 = phi i32 [ %790, %792 ], [ %825, %823 ]
  %797 = phi %struct.PSH_Blue_ZoneRec_* [ %463, %792 ], [ %826, %823 ]
  %798 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %797, i64 0, i32 3
  %799 = load i32, i32* %798, align 4
  %800 = sext i32 %799 to i64
  %801 = sub nsw i64 %789, %800
  %802 = load i32, i32* %464, align 8
  %803 = sub nsw i32 0, %802
  %804 = sext i32 %803 to i64
  %805 = icmp slt i64 %801, %804
  br i1 %805, label %828, label %806

806:                                              ; preds = %794
  %807 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %797, i64 0, i32 2
  %808 = load i32, i32* %807, align 8
  %809 = add nsw i32 %808, %802
  %810 = sext i32 %809 to i64
  %811 = icmp sgt i64 %789, %810
  br i1 %811, label %823, label %812

812:                                              ; preds = %806
  %813 = load i8, i8* %465, align 4
  %814 = icmp eq i8 %813, 0
  br i1 %814, label %815, label %819

815:                                              ; preds = %812
  %816 = load i32, i32* %466, align 4
  %817 = sext i32 %816 to i64
  %818 = icmp sgt i64 %801, %817
  br i1 %818, label %823, label %819

819:                                              ; preds = %815, %812
  %820 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %797, i64 0, i32 6
  %821 = load i64, i64* %820, align 8
  store i64 %821, i64* %793, align 8
  %822 = or i32 %795, 48
  store i32 %822, i32* %783, align 4
  br label %823

823:                                              ; preds = %819, %815, %806
  %824 = phi i32 [ %795, %815 ], [ %795, %806 ], [ %822, %819 ]
  %825 = add i32 %796, -1
  %826 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %797, i64 1
  %827 = icmp eq i32 %825, 0
  br i1 %827, label %828, label %794

828:                                              ; preds = %823, %794, %787
  %829 = phi i32 [ %784, %787 ], [ %795, %794 ], [ %824, %823 ]
  %830 = load i32, i32* %467, align 8
  %831 = icmp eq i32 %830, 0
  br i1 %831, label %870, label %832

832:                                              ; preds = %828
  %833 = zext i32 %830 to i64
  %834 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %2, i64 0, i32 2, i32 1, i32 1, i64 %833
  %835 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %775, i64 0, i32 10
  br label %836

836:                                              ; preds = %866, %832
  %837 = phi i32 [ %829, %832 ], [ %867, %866 ]
  %838 = phi %struct.PSH_Blue_ZoneRec_* [ %834, %832 ], [ %840, %866 ]
  %839 = phi i32 [ %830, %832 ], [ %868, %866 ]
  %840 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %838, i64 -1
  %841 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %838, i64 -1, i32 2
  %842 = load i32, i32* %841, align 8
  %843 = sext i32 %842 to i64
  %844 = sub nsw i64 %843, %789
  %845 = load i32, i32* %464, align 8
  %846 = sub nsw i32 0, %845
  %847 = sext i32 %846 to i64
  %848 = icmp slt i64 %844, %847
  br i1 %848, label %870, label %849

849:                                              ; preds = %836
  %850 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %838, i64 -1, i32 3
  %851 = load i32, i32* %850, align 4
  %852 = sub nsw i32 %851, %845
  %853 = sext i32 %852 to i64
  %854 = icmp slt i64 %789, %853
  br i1 %854, label %866, label %855

855:                                              ; preds = %849
  %856 = load i8, i8* %465, align 4
  %857 = icmp eq i8 %856, 0
  br i1 %857, label %858, label %862

858:                                              ; preds = %855
  %859 = load i32, i32* %466, align 4
  %860 = sext i32 %859 to i64
  %861 = icmp slt i64 %844, %860
  br i1 %861, label %862, label %866

862:                                              ; preds = %858, %855
  %863 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %838, i64 -1, i32 7
  %864 = load i64, i64* %863, align 8
  store i64 %864, i64* %835, align 8
  %865 = or i32 %837, 48
  store i32 %865, i32* %783, align 4
  br label %866

866:                                              ; preds = %862, %858, %849
  %867 = phi i32 [ %837, %849 ], [ %837, %858 ], [ %865, %862 ]
  %868 = add i32 %839, -1
  %869 = icmp eq i32 %868, 0
  br i1 %869, label %870, label %836

870:                                              ; preds = %866, %836, %828, %782, %779
  %871 = add i32 %776, -1
  %872 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %775, i64 1
  %873 = icmp eq i32 %871, 0
  br i1 %873, label %874, label %774

874:                                              ; preds = %870, %767
  br i1 %769, label %964, label %875

875:                                              ; preds = %874
  %876 = load %struct.PSH_GlobalsRec_*, %struct.PSH_GlobalsRec_** %414, align 8
  %877 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %876, i64 0, i32 1, i64 %472, i32 1
  %878 = load i64, i64* %877, align 8
  %879 = load %struct.PSH_PointRec_*, %struct.PSH_PointRec_** %24, align 8
  %880 = shl i64 %878, 32
  %881 = ashr exact i64 %880, 32
  br label %882

882:                                              ; preds = %958, %875
  %883 = phi %struct.PSH_PointRec_* [ %879, %875 ], [ %960, %958 ]
  %884 = phi i32 [ %768, %875 ], [ %959, %958 ]
  %885 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %883, i64 0, i32 7
  %886 = load %struct.PSH_HintRec_*, %struct.PSH_HintRec_** %885, align 8
  %887 = icmp eq %struct.PSH_HintRec_* %886, null
  br i1 %887, label %958, label %888

888:                                              ; preds = %882
  %889 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %883, i64 0, i32 4
  %890 = load i32, i32* %889, align 4
  %891 = and i32 %890, 512
  %892 = icmp eq i32 %891, 0
  br i1 %892, label %897, label %893

893:                                              ; preds = %888
  %894 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %886, i64 0, i32 2
  %895 = load i64, i64* %894, align 8
  %896 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %883, i64 0, i32 10
  store i64 %895, i64* %896, align 8
  br label %955

897:                                              ; preds = %888
  %898 = and i32 %890, 1024
  %899 = icmp eq i32 %898, 0
  br i1 %899, label %907, label %900

900:                                              ; preds = %897
  %901 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %886, i64 0, i32 2
  %902 = load i64, i64* %901, align 8
  %903 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %886, i64 0, i32 3
  %904 = load i64, i64* %903, align 8
  %905 = add nsw i64 %904, %902
  %906 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %883, i64 0, i32 10
  store i64 %905, i64* %906, align 8
  br label %955

907:                                              ; preds = %897
  %908 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %883, i64 0, i32 8
  %909 = load i64, i64* %908, align 8
  %910 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %886, i64 0, i32 0
  %911 = load i32, i32* %910, align 8
  %912 = sext i32 %911 to i64
  %913 = sub nsw i64 %909, %912
  %914 = icmp slt i64 %913, 1
  br i1 %914, label %915, label %928

915:                                              ; preds = %907
  %916 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %886, i64 0, i32 2
  %917 = load i64, i64* %916, align 8
  %918 = shl i64 %913, 32
  %919 = ashr exact i64 %918, 32
  %920 = mul nsw i64 %919, %881
  %921 = ashr i64 %920, 63
  %922 = add nsw i64 %920, 32768
  %923 = add nsw i64 %922, %921
  %924 = shl i64 %923, 16
  %925 = ashr i64 %924, 32
  %926 = add nsw i64 %917, %925
  %927 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %883, i64 0, i32 10
  store i64 %926, i64* %927, align 8
  br label %955

928:                                              ; preds = %907
  %929 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %886, i64 0, i32 1
  %930 = load i32, i32* %929, align 4
  %931 = sext i32 %930 to i64
  %932 = icmp slt i64 %913, %931
  %933 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %886, i64 0, i32 2
  %934 = load i64, i64* %933, align 8
  %935 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %886, i64 0, i32 3
  %936 = load i64, i64* %935, align 8
  br i1 %932, label %950, label %937

937:                                              ; preds = %928
  %938 = add nsw i64 %936, %934
  %939 = trunc i64 %913 to i32
  %940 = sub i32 %939, %930
  %941 = sext i32 %940 to i64
  %942 = mul nsw i64 %881, %941
  %943 = ashr i64 %942, 63
  %944 = add nsw i64 %942, 32768
  %945 = add nsw i64 %944, %943
  %946 = shl i64 %945, 16
  %947 = ashr i64 %946, 32
  %948 = add nsw i64 %938, %947
  %949 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %883, i64 0, i32 10
  store i64 %948, i64* %949, align 8
  br label %955

950:                                              ; preds = %928
  %951 = call i64 @FT_MulDiv(i64 %913, i64 %936, i64 %931) #6
  %952 = add nsw i64 %951, %934
  %953 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %883, i64 0, i32 10
  store i64 %952, i64* %953, align 8
  %954 = load i32, i32* %889, align 4
  br label %955

955:                                              ; preds = %950, %937, %915, %900, %893
  %956 = phi i32 [ %890, %900 ], [ %890, %937 ], [ %954, %950 ], [ %890, %915 ], [ %890, %893 ]
  %957 = or i32 %956, 32
  store i32 %957, i32* %889, align 4
  br label %958

958:                                              ; preds = %955, %882
  %959 = add i32 %884, -1
  %960 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %883, i64 1
  %961 = icmp eq i32 %959, 0
  br i1 %961, label %962, label %882

962:                                              ; preds = %958
  %963 = load i32, i32* %40, align 8
  br label %964

964:                                              ; preds = %962, %771, %874
  %965 = phi i32 [ %963, %962 ], [ %768, %771 ], [ %768, %874 ]
  %966 = load %struct.PSH_GlobalsRec_*, %struct.PSH_GlobalsRec_** %414, align 8
  %967 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %966, i64 0, i32 1, i64 %472, i32 1
  %968 = load i64, i64* %967, align 8
  %969 = load %struct.FT_MemoryRec_*, %struct.FT_MemoryRec_** %21, align 8
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %468) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %468, i8 -86, i64 128, i1 false) #6
  %970 = load %struct.PSH_PointRec_*, %struct.PSH_PointRec_** %24, align 8
  %971 = zext i32 %965 to i64
  %972 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %970, i64 %971
  %973 = icmp eq i32 %965, 0
  br i1 %973, label %1172, label %974

974:                                              ; preds = %964, %974
  %975 = phi %struct.PSH_PointRec_* [ %982, %974 ], [ %970, %964 ]
  %976 = phi i32 [ %981, %974 ], [ 0, %964 ]
  %977 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %975, i64 0, i32 4
  %978 = load i32, i32* %977, align 4
  %979 = lshr i32 %978, 4
  %980 = and i32 %979, 1
  %981 = add i32 %980, %976
  %982 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %975, i64 1
  %983 = icmp ult %struct.PSH_PointRec_* %982, %972
  br i1 %983, label %974, label %984

984:                                              ; preds = %974
  %985 = icmp eq i32 %981, 0
  br i1 %985, label %1172, label %986

986:                                              ; preds = %984
  %987 = icmp ult i32 %981, 17
  br i1 %987, label %994, label %988

988:                                              ; preds = %986
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %469) #6
  store i32 -1431655766, i32* %6, align 4
  %989 = zext i32 %981 to i64
  %990 = call i8* @ft_mem_realloc(%struct.FT_MemoryRec_* %969, i64 8, i64 0, i64 %989, i8* null, i32* nonnull %6) #6
  %991 = bitcast i8* %990 to %struct.PSH_PointRec_**
  %992 = load i32, i32* %6, align 4
  %993 = icmp eq i32 %992, 0
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %469) #6
  br i1 %993, label %994, label %1172

994:                                              ; preds = %988, %986
  %995 = phi %struct.PSH_PointRec_** [ %991, %988 ], [ %470, %986 ]
  br label %1004

996:                                              ; preds = %1030
  %997 = icmp eq i32 %1031, 0
  %998 = shl i64 %968, 32
  %999 = ashr exact i64 %998, 32
  %1000 = zext i32 %1031 to i64
  %1001 = add i32 %1031, -1
  %1002 = zext i32 %1001 to i64
  %1003 = getelementptr inbounds %struct.PSH_PointRec_*, %struct.PSH_PointRec_** %995, i64 %1002
  br label %1034

1004:                                             ; preds = %994, %1030
  %1005 = phi %struct.PSH_PointRec_* [ %1032, %1030 ], [ %970, %994 ]
  %1006 = phi i32 [ %1031, %1030 ], [ 0, %994 ]
  %1007 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %1005, i64 0, i32 4
  %1008 = load i32, i32* %1007, align 4
  %1009 = and i32 %1008, 16
  %1010 = icmp eq i32 %1009, 0
  br i1 %1010, label %1030, label %1011

1011:                                             ; preds = %1004
  %1012 = zext i32 %1006 to i64
  %1013 = getelementptr inbounds %struct.PSH_PointRec_*, %struct.PSH_PointRec_** %995, i64 %1012
  %1014 = icmp eq i32 %1006, 0
  br i1 %1014, label %1027, label %1015

1015:                                             ; preds = %1011
  %1016 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %1005, i64 0, i32 8
  br label %1017

1017:                                             ; preds = %1025, %1015
  %1018 = phi %struct.PSH_PointRec_** [ %1013, %1015 ], [ %1019, %1025 ]
  %1019 = getelementptr inbounds %struct.PSH_PointRec_*, %struct.PSH_PointRec_** %1018, i64 -1
  %1020 = load %struct.PSH_PointRec_*, %struct.PSH_PointRec_** %1019, align 8
  %1021 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %1020, i64 0, i32 8
  %1022 = load i64, i64* %1021, align 8
  %1023 = load i64, i64* %1016, align 8
  %1024 = icmp sgt i64 %1022, %1023
  br i1 %1024, label %1025, label %1027

1025:                                             ; preds = %1017
  store %struct.PSH_PointRec_* %1020, %struct.PSH_PointRec_** %1018, align 8
  %1026 = icmp ugt %struct.PSH_PointRec_** %1019, %995
  br i1 %1026, label %1017, label %1027

1027:                                             ; preds = %1025, %1017, %1011
  %1028 = phi %struct.PSH_PointRec_** [ %1013, %1011 ], [ %1019, %1025 ], [ %1018, %1017 ]
  store %struct.PSH_PointRec_* %1005, %struct.PSH_PointRec_** %1028, align 8
  %1029 = add i32 %1006, 1
  br label %1030

1030:                                             ; preds = %1027, %1004
  %1031 = phi i32 [ %1029, %1027 ], [ %1006, %1004 ]
  %1032 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %1005, i64 1
  %1033 = icmp ult %struct.PSH_PointRec_* %1032, %972
  br i1 %1033, label %1004, label %996

1034:                                             ; preds = %1165, %996
  %1035 = phi %struct.PSH_PointRec_* [ %970, %996 ], [ %1166, %1165 ]
  %1036 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %1035, i64 0, i32 4
  %1037 = load i32, i32* %1036, align 4
  %1038 = and i32 %1037, 16
  %1039 = icmp eq i32 %1038, 0
  br i1 %1039, label %1040, label %1165

1040:                                             ; preds = %1034
  %1041 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %1035, i64 0, i32 3
  %1042 = load i32, i32* %1041, align 8
  %1043 = and i32 %1042, 2
  %1044 = icmp eq i32 %1043, 0
  br i1 %1044, label %1060, label %1045

1045:                                             ; preds = %1040
  %1046 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %1035, i64 0, i32 5
  %1047 = load i8, i8* %1046, align 8
  %1048 = icmp eq i8 %1047, 4
  br i1 %1048, label %1165, label %1049

1049:                                             ; preds = %1045
  %1050 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %1035, i64 0, i32 6
  %1051 = load i8, i8* %1050, align 1
  %1052 = icmp eq i8 %1047, %1051
  br i1 %1052, label %1053, label %1165

1053:                                             ; preds = %1049
  %1054 = and i32 %1037, 64
  %1055 = and i32 %1042, 4
  %1056 = or i32 %1055, %1054
  %1057 = icmp eq i32 %1056, 0
  br i1 %1057, label %1165, label %1058

1058:                                             ; preds = %1053
  %1059 = and i32 %1042, -3
  store i32 %1059, i32* %1041, align 8
  br label %1060

1060:                                             ; preds = %1058, %1040
  %1061 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %1035, i64 0, i32 8
  %1062 = load i64, i64* %1061, align 8
  br i1 %997, label %1077, label %1063

1063:                                             ; preds = %1060, %1071
  %1064 = phi i32 [ %1072, %1071 ], [ 0, %1060 ]
  %1065 = zext i32 %1064 to i64
  %1066 = getelementptr inbounds %struct.PSH_PointRec_*, %struct.PSH_PointRec_** %995, i64 %1065
  %1067 = load %struct.PSH_PointRec_*, %struct.PSH_PointRec_** %1066, align 8
  %1068 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %1067, i64 0, i32 8
  %1069 = load i64, i64* %1068, align 8
  %1070 = icmp sgt i64 %1069, %1062
  br i1 %1070, label %1074, label %1071

1071:                                             ; preds = %1063
  %1072 = add i32 %1064, 1
  %1073 = icmp eq i32 %1072, %1031
  br i1 %1073, label %1074, label %1063

1074:                                             ; preds = %1071, %1063
  %1075 = phi i32 [ %1031, %1071 ], [ %1064, %1063 ]
  %1076 = icmp eq i32 %1075, 0
  br i1 %1076, label %1077, label %1094

1077:                                             ; preds = %1060, %1074
  %1078 = load %struct.PSH_PointRec_*, %struct.PSH_PointRec_** %995, align 8
  %1079 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %1078, i64 0, i32 10
  %1080 = load i64, i64* %1079, align 8
  %1081 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %1078, i64 0, i32 8
  %1082 = load i64, i64* %1081, align 8
  %1083 = sub nsw i64 %1062, %1082
  %1084 = shl i64 %1083, 32
  %1085 = ashr exact i64 %1084, 32
  %1086 = mul nsw i64 %1085, %999
  %1087 = ashr i64 %1086, 63
  %1088 = add nsw i64 %1086, 32768
  %1089 = add nsw i64 %1088, %1087
  %1090 = shl i64 %1089, 16
  %1091 = ashr i64 %1090, 32
  %1092 = add nsw i64 %1091, %1080
  %1093 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %1035, i64 0, i32 10
  store i64 %1092, i64* %1093, align 8
  br label %1162

1094:                                             ; preds = %1074
  %1095 = add i32 %1075, -1
  %1096 = zext i32 %1095 to i64
  %1097 = getelementptr inbounds %struct.PSH_PointRec_*, %struct.PSH_PointRec_** %995, i64 %1096
  %1098 = load %struct.PSH_PointRec_*, %struct.PSH_PointRec_** %1097, align 8
  br label %1099

1099:                                             ; preds = %1102, %1094
  %1100 = phi i64 [ %1110, %1102 ], [ %1000, %1094 ]
  %1101 = icmp eq i64 %1100, 0
  br i1 %1101, label %1111, label %1102

1102:                                             ; preds = %1099
  %1103 = add nuw nsw i64 %1100, 4294967295
  %1104 = and i64 %1103, 4294967295
  %1105 = getelementptr inbounds %struct.PSH_PointRec_*, %struct.PSH_PointRec_** %995, i64 %1104
  %1106 = load %struct.PSH_PointRec_*, %struct.PSH_PointRec_** %1105, align 8
  %1107 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %1106, i64 0, i32 8
  %1108 = load i64, i64* %1107, align 8
  %1109 = icmp slt i64 %1108, %1062
  %1110 = add nsw i64 %1100, -1
  br i1 %1109, label %1111, label %1099

1111:                                             ; preds = %1102, %1099
  %1112 = trunc i64 %1100 to i32
  %1113 = icmp eq i32 %1031, %1112
  br i1 %1113, label %1114, label %1131

1114:                                             ; preds = %1111
  %1115 = load %struct.PSH_PointRec_*, %struct.PSH_PointRec_** %1003, align 8
  %1116 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %1115, i64 0, i32 10
  %1117 = load i64, i64* %1116, align 8
  %1118 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %1115, i64 0, i32 8
  %1119 = load i64, i64* %1118, align 8
  %1120 = sub nsw i64 %1062, %1119
  %1121 = shl i64 %1120, 32
  %1122 = ashr exact i64 %1121, 32
  %1123 = mul nsw i64 %1122, %999
  %1124 = ashr i64 %1123, 63
  %1125 = add nsw i64 %1123, 32768
  %1126 = add nsw i64 %1125, %1124
  %1127 = shl i64 %1126, 16
  %1128 = ashr i64 %1127, 32
  %1129 = add nsw i64 %1128, %1117
  %1130 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %1035, i64 0, i32 10
  store i64 %1129, i64* %1130, align 8
  br label %1162

1131:                                             ; preds = %1111
  %1132 = and i64 %1100, 4294967295
  %1133 = getelementptr inbounds %struct.PSH_PointRec_*, %struct.PSH_PointRec_** %995, i64 %1132
  %1134 = load %struct.PSH_PointRec_*, %struct.PSH_PointRec_** %1133, align 8
  %1135 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %1098, i64 0, i32 8
  %1136 = load i64, i64* %1135, align 8
  %1137 = icmp eq i64 %1062, %1136
  br i1 %1137, label %1138, label %1142

1138:                                             ; preds = %1131
  %1139 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %1098, i64 0, i32 10
  %1140 = load i64, i64* %1139, align 8
  %1141 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %1035, i64 0, i32 10
  store i64 %1140, i64* %1141, align 8
  br label %1162

1142:                                             ; preds = %1131
  %1143 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %1134, i64 0, i32 8
  %1144 = load i64, i64* %1143, align 8
  %1145 = icmp eq i64 %1062, %1144
  br i1 %1145, label %1146, label %1150

1146:                                             ; preds = %1142
  %1147 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %1134, i64 0, i32 10
  %1148 = load i64, i64* %1147, align 8
  %1149 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %1035, i64 0, i32 10
  store i64 %1148, i64* %1149, align 8
  br label %1162

1150:                                             ; preds = %1142
  %1151 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %1098, i64 0, i32 10
  %1152 = load i64, i64* %1151, align 8
  %1153 = sub nsw i64 %1062, %1136
  %1154 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %1134, i64 0, i32 10
  %1155 = load i64, i64* %1154, align 8
  %1156 = sub nsw i64 %1155, %1152
  %1157 = sub nsw i64 %1144, %1136
  %1158 = call i64 @FT_MulDiv(i64 %1153, i64 %1156, i64 %1157) #6
  %1159 = add nsw i64 %1158, %1152
  %1160 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %1035, i64 0, i32 10
  store i64 %1159, i64* %1160, align 8
  %1161 = load i32, i32* %1036, align 4
  br label %1162

1162:                                             ; preds = %1150, %1146, %1138, %1114, %1077
  %1163 = phi i32 [ %1037, %1138 ], [ %1161, %1150 ], [ %1037, %1146 ], [ %1037, %1114 ], [ %1037, %1077 ]
  %1164 = or i32 %1163, 32
  store i32 %1164, i32* %1036, align 4
  br label %1165

1165:                                             ; preds = %1162, %1053, %1049, %1045, %1034
  %1166 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %1035, i64 1
  %1167 = icmp ult %struct.PSH_PointRec_* %1166, %972
  br i1 %1167, label %1034, label %1168

1168:                                             ; preds = %1165
  %1169 = icmp eq %struct.PSH_PointRec_** %995, %470
  br i1 %1169, label %1172, label %1170

1170:                                             ; preds = %1168
  %1171 = bitcast %struct.PSH_PointRec_** %995 to i8*
  call void @ft_mem_free(%struct.FT_MemoryRec_* %969, i8* %1171) #6
  br label %1172

1172:                                             ; preds = %964, %984, %988, %1168, %1170
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %468) #6
  %1173 = load %struct.PSH_GlobalsRec_*, %struct.PSH_GlobalsRec_** %414, align 8
  %1174 = load i32, i32* %43, align 4
  %1175 = icmp eq i32 %1174, 0
  br i1 %1175, label %1356, label %1176

1176:                                             ; preds = %1172
  %1177 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %1173, i64 0, i32 1, i64 %472, i32 1
  %1178 = load i64, i64* %1177, align 8
  %1179 = load %struct.PSH_ContourRec_*, %struct.PSH_ContourRec_** %32, align 8
  %1180 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %1173, i64 0, i32 1, i64 %472, i32 2
  %1181 = load i64, i64* %1180, align 8
  %1182 = shl i64 %1178, 32
  %1183 = ashr exact i64 %1182, 32
  br label %1184

1184:                                             ; preds = %1351, %1176
  %1185 = phi i32 [ %1174, %1176 ], [ %1353, %1351 ]
  %1186 = phi %struct.PSH_ContourRec_* [ %1179, %1176 ], [ %1354, %1351 ]
  %1187 = phi i64 [ %1181, %1176 ], [ %1352, %1351 ]
  %1188 = getelementptr inbounds %struct.PSH_ContourRec_, %struct.PSH_ContourRec_* %1186, i64 0, i32 0
  %1189 = load %struct.PSH_PointRec_*, %struct.PSH_PointRec_** %1188, align 8
  %1190 = getelementptr inbounds %struct.PSH_ContourRec_, %struct.PSH_ContourRec_* %1186, i64 0, i32 1
  %1191 = load i32, i32* %1190, align 8
  %1192 = zext i32 %1191 to i64
  %1193 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %1189, i64 %1192
  %1194 = icmp eq i32 %1191, 0
  br i1 %1194, label %1351, label %1195

1195:                                             ; preds = %1184, %1207
  %1196 = phi i32 [ %1209, %1207 ], [ 0, %1184 ]
  %1197 = phi %struct.PSH_PointRec_* [ %1210, %1207 ], [ %1189, %1184 ]
  %1198 = phi %struct.PSH_PointRec_* [ %1208, %1207 ], [ null, %1184 ]
  %1199 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %1197, i64 0, i32 4
  %1200 = load i32, i32* %1199, align 4
  %1201 = and i32 %1200, 32
  %1202 = icmp eq i32 %1201, 0
  br i1 %1202, label %1207, label %1203

1203:                                             ; preds = %1195
  %1204 = icmp eq %struct.PSH_PointRec_* %1198, null
  %1205 = select i1 %1204, %struct.PSH_PointRec_* %1197, %struct.PSH_PointRec_* %1198
  %1206 = add i32 %1196, 1
  br label %1207

1207:                                             ; preds = %1203, %1195
  %1208 = phi %struct.PSH_PointRec_* [ %1205, %1203 ], [ %1198, %1195 ]
  %1209 = phi i32 [ %1206, %1203 ], [ %1196, %1195 ]
  %1210 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %1197, i64 1
  %1211 = icmp ult %struct.PSH_PointRec_* %1210, %1193
  br i1 %1211, label %1195, label %1212

1212:                                             ; preds = %1207
  %1213 = icmp ult i32 %1209, 2
  br i1 %1213, label %1214, label %1251

1214:                                             ; preds = %1212
  %1215 = icmp eq i32 %1209, 1
  br i1 %1215, label %1216, label %1230

1216:                                             ; preds = %1214
  %1217 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %1208, i64 0, i32 10
  %1218 = load i64, i64* %1217, align 8
  %1219 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %1208, i64 0, i32 8
  %1220 = load i64, i64* %1219, align 8
  %1221 = shl i64 %1220, 32
  %1222 = ashr exact i64 %1221, 32
  %1223 = mul nsw i64 %1222, %1183
  %1224 = ashr i64 %1223, 63
  %1225 = add nsw i64 %1223, 32768
  %1226 = add nsw i64 %1225, %1224
  %1227 = shl i64 %1226, 16
  %1228 = ashr i64 %1227, 32
  %1229 = sub nsw i64 %1218, %1228
  br label %1230

1230:                                             ; preds = %1214, %1216
  %1231 = phi i64 [ %1229, %1216 ], [ %1187, %1214 ]
  br label %1232

1232:                                             ; preds = %1230, %1248
  %1233 = phi %struct.PSH_PointRec_* [ %1249, %1248 ], [ %1189, %1230 ]
  %1234 = icmp eq %struct.PSH_PointRec_* %1233, %1208
  br i1 %1234, label %1248, label %1235

1235:                                             ; preds = %1232
  %1236 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %1233, i64 0, i32 8
  %1237 = load i64, i64* %1236, align 8
  %1238 = shl i64 %1237, 32
  %1239 = ashr exact i64 %1238, 32
  %1240 = mul nsw i64 %1239, %1183
  %1241 = ashr i64 %1240, 63
  %1242 = add nsw i64 %1240, 32768
  %1243 = add nsw i64 %1242, %1241
  %1244 = shl i64 %1243, 16
  %1245 = ashr i64 %1244, 32
  %1246 = add nsw i64 %1245, %1231
  %1247 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %1233, i64 0, i32 10
  store i64 %1246, i64* %1247, align 8
  br label %1248

1248:                                             ; preds = %1235, %1232
  %1249 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %1233, i64 1
  %1250 = icmp ult %struct.PSH_PointRec_* %1249, %1193
  br i1 %1250, label %1232, label %1351

1251:                                             ; preds = %1212, %1261
  %1252 = phi %struct.PSH_PointRec_* [ %1262, %1261 ], [ %1208, %1212 ]
  %1253 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %1252, i64 0, i32 1
  %1254 = load %struct.PSH_PointRec_*, %struct.PSH_PointRec_** %1253, align 8
  %1255 = icmp eq %struct.PSH_PointRec_* %1254, %1208
  br i1 %1255, label %1351, label %1256

1256:                                             ; preds = %1251
  %1257 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %1254, i64 0, i32 4
  %1258 = load i32, i32* %1257, align 4
  %1259 = and i32 %1258, 32
  %1260 = icmp eq i32 %1259, 0
  br i1 %1260, label %1263, label %1261

1261:                                             ; preds = %1256, %1349
  %1262 = phi %struct.PSH_PointRec_* [ %1254, %1256 ], [ %1268, %1349 ]
  br label %1251

1263:                                             ; preds = %1256
  %1264 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %1252, i64 0, i32 1
  br label %1265

1265:                                             ; preds = %1263, %1265
  %1266 = phi %struct.PSH_PointRec_* [ %1268, %1265 ], [ %1254, %1263 ]
  %1267 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %1266, i64 0, i32 1
  %1268 = load %struct.PSH_PointRec_*, %struct.PSH_PointRec_** %1267, align 8
  %1269 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %1268, i64 0, i32 4
  %1270 = load i32, i32* %1269, align 4
  %1271 = and i32 %1270, 32
  %1272 = icmp eq i32 %1271, 0
  br i1 %1272, label %1265, label %1273

1273:                                             ; preds = %1265
  %1274 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %1252, i64 0, i32 8
  %1275 = load i64, i64* %1274, align 8
  %1276 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %1268, i64 0, i32 8
  %1277 = load i64, i64* %1276, align 8
  %1278 = icmp sgt i64 %1275, %1277
  br i1 %1278, label %1283, label %1279

1279:                                             ; preds = %1273
  %1280 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %1252, i64 0, i32 10
  %1281 = load i64, i64* %1280, align 8
  %1282 = sub nsw i64 %1277, %1275
  br label %1287

1283:                                             ; preds = %1273
  %1284 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %1268, i64 0, i32 10
  %1285 = load i64, i64* %1284, align 8
  %1286 = sub nsw i64 %1275, %1277
  br label %1287

1287:                                             ; preds = %1283, %1279
  %1288 = phi %struct.PSH_PointRec_* [ %1252, %1283 ], [ %1268, %1279 ]
  %1289 = phi i64 [ %1285, %1283 ], [ %1281, %1279 ]
  %1290 = phi i64 [ %1277, %1283 ], [ %1275, %1279 ]
  %1291 = phi i64 [ %1286, %1283 ], [ %1282, %1279 ]
  %1292 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %1288, i64 0, i32 10
  %1293 = load i64, i64* %1292, align 8
  %1294 = sub nsw i64 %1293, %1289
  %1295 = icmp sgt i64 %1291, 0
  br i1 %1295, label %1296, label %1299

1296:                                             ; preds = %1287
  %1297 = call i64 @FT_DivFix(i64 %1294, i64 %1291) #6
  %1298 = load %struct.PSH_PointRec_*, %struct.PSH_PointRec_** %1264, align 8
  br label %1299

1299:                                             ; preds = %1296, %1287
  %1300 = phi %struct.PSH_PointRec_* [ %1298, %1296 ], [ %1254, %1287 ]
  %1301 = phi i64 [ %1297, %1296 ], [ 65536, %1287 ]
  %1302 = add nsw i64 %1294, %1289
  %1303 = shl i64 %1301, 32
  %1304 = ashr exact i64 %1303, 32
  br label %1305

1305:                                             ; preds = %1341, %1299
  %1306 = phi %struct.PSH_PointRec_* [ %1300, %1299 ], [ %1347, %1341 ]
  %1307 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %1306, i64 0, i32 8
  %1308 = load i64, i64* %1307, align 8
  %1309 = sub nsw i64 %1308, %1290
  %1310 = icmp slt i64 %1309, 1
  br i1 %1310, label %1311, label %1320

1311:                                             ; preds = %1305
  %1312 = shl i64 %1309, 32
  %1313 = ashr exact i64 %1312, 32
  %1314 = mul nsw i64 %1313, %1183
  %1315 = ashr i64 %1314, 63
  %1316 = add nsw i64 %1314, 32768
  %1317 = add nsw i64 %1316, %1315
  %1318 = shl i64 %1317, 16
  %1319 = ashr i64 %1318, 32
  br label %1341

1320:                                             ; preds = %1305
  %1321 = icmp slt i64 %1309, %1291
  br i1 %1321, label %1332, label %1322

1322:                                             ; preds = %1320
  %1323 = sub nsw i64 %1309, %1291
  %1324 = shl i64 %1323, 32
  %1325 = ashr exact i64 %1324, 32
  %1326 = mul nsw i64 %1325, %1183
  %1327 = ashr i64 %1326, 63
  %1328 = add nsw i64 %1326, 32768
  %1329 = add nsw i64 %1328, %1327
  %1330 = shl i64 %1329, 16
  %1331 = ashr i64 %1330, 32
  br label %1341

1332:                                             ; preds = %1320
  %1333 = shl i64 %1309, 32
  %1334 = ashr exact i64 %1333, 32
  %1335 = mul nsw i64 %1334, %1304
  %1336 = ashr i64 %1335, 63
  %1337 = add nsw i64 %1335, 32768
  %1338 = add nsw i64 %1337, %1336
  %1339 = shl i64 %1338, 16
  %1340 = ashr i64 %1339, 32
  br label %1341

1341:                                             ; preds = %1332, %1322, %1311
  %1342 = phi i64 [ %1289, %1332 ], [ %1331, %1322 ], [ %1289, %1311 ]
  %1343 = phi i64 [ %1340, %1332 ], [ %1302, %1322 ], [ %1319, %1311 ]
  %1344 = add nsw i64 %1343, %1342
  %1345 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %1306, i64 0, i32 10
  store i64 %1344, i64* %1345, align 8
  %1346 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %1306, i64 0, i32 1
  %1347 = load %struct.PSH_PointRec_*, %struct.PSH_PointRec_** %1346, align 8
  %1348 = icmp eq %struct.PSH_PointRec_* %1347, %1268
  br i1 %1348, label %1349, label %1305

1349:                                             ; preds = %1341
  %1350 = icmp eq %struct.PSH_PointRec_* %1268, %1208
  br i1 %1350, label %1351, label %1261

1351:                                             ; preds = %1349, %1251, %1248, %1184
  %1352 = phi i64 [ %1187, %1184 ], [ %1231, %1248 ], [ %1187, %1251 ], [ %1187, %1349 ]
  %1353 = add i32 %1185, -1
  %1354 = getelementptr inbounds %struct.PSH_ContourRec_, %struct.PSH_ContourRec_* %1186, i64 1
  %1355 = icmp eq i32 %1353, 0
  br i1 %1355, label %1356, label %1184

1356:                                             ; preds = %1351, %1172
  %1357 = load %struct.FT_Outline_*, %struct.FT_Outline_** %461, align 8
  %1358 = getelementptr inbounds %struct.FT_Outline_, %struct.FT_Outline_* %1357, i64 0, i32 2
  %1359 = load %struct.FT_Vector_*, %struct.FT_Vector_** %1358, align 8
  %1360 = getelementptr inbounds %struct.FT_Outline_, %struct.FT_Outline_* %1357, i64 0, i32 3
  %1361 = load i8*, i8** %1360, align 8
  %1362 = load i32, i32* %40, align 8
  %1363 = icmp eq i32 %1362, 0
  br i1 %1363, label %1389, label %1364

1364:                                             ; preds = %1356
  %1365 = load %struct.PSH_PointRec_*, %struct.PSH_PointRec_** %24, align 8
  %1366 = select i1 %679, i8 32, i8 64
  br label %1367

1367:                                             ; preds = %1383, %1364
  %1368 = phi i64 [ 0, %1364 ], [ %1385, %1383 ]
  %1369 = phi %struct.PSH_PointRec_* [ %1365, %1364 ], [ %1384, %1383 ]
  %1370 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %1369, i64 0, i32 10
  %1371 = load i64, i64* %1370, align 8
  %1372 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %1359, i64 %1368, i32 1
  %1373 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %1359, i64 %1368, i32 0
  %1374 = select i1 %679, i64* %1373, i64* %1372
  store i64 %1371, i64* %1374, align 8
  %1375 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %1369, i64 0, i32 4
  %1376 = load i32, i32* %1375, align 4
  %1377 = and i32 %1376, 16
  %1378 = icmp eq i32 %1377, 0
  br i1 %1378, label %1383, label %1379

1379:                                             ; preds = %1367
  %1380 = getelementptr inbounds i8, i8* %1361, i64 %1368
  %1381 = load i8, i8* %1380, align 1
  %1382 = or i8 %1381, %1366
  store i8 %1382, i8* %1380, align 1
  br label %1383

1383:                                             ; preds = %1379, %1367
  %1384 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %1369, i64 1
  %1385 = add nuw nsw i64 %1368, 1
  %1386 = load i32, i32* %40, align 8
  %1387 = zext i32 %1386 to i64
  %1388 = icmp ult i64 %1385, %1387
  br i1 %1388, label %1367, label %1389

1389:                                             ; preds = %1383, %1356
  br i1 %446, label %1392, label %1390

1390:                                             ; preds = %1389
  %1391 = load %struct.PSH_GlobalsRec_*, %struct.PSH_GlobalsRec_** %414, align 8
  call void @psh_globals_set_scale(%struct.PSH_GlobalsRec_* %1391, i64 %417, i64 %419, i64 0, i64 0)
  br label %1392

1392:                                             ; preds = %1389, %1390
  %1393 = add nuw nsw i64 %472, 1
  %1394 = icmp eq i64 %1393, 2
  br i1 %1394, label %1395, label %471

1395:                                             ; preds = %1392, %405, %407
  %1396 = phi i32 [ %406, %405 ], [ %411, %407 ], [ 0, %1392 ]
  %1397 = load %struct.FT_MemoryRec_*, %struct.FT_MemoryRec_** %21, align 8
  %1398 = getelementptr inbounds %struct.PSH_GlyphRec_, %struct.PSH_GlyphRec_* %8, i64 0, i32 7, i64 1
  %1399 = getelementptr inbounds %struct.PSH_GlyphRec_, %struct.PSH_GlyphRec_* %8, i64 0, i32 7, i64 1, i32 6
  %1400 = bitcast %struct.PSH_ZoneRec_** %1399 to i8**
  %1401 = load i8*, i8** %1400, align 8
  call void @ft_mem_free(%struct.FT_MemoryRec_* %1397, i8* %1401) #6
  %1402 = getelementptr inbounds %struct.PSH_GlyphRec_, %struct.PSH_GlyphRec_* %8, i64 0, i32 7, i64 1, i32 5
  store i32 0, i32* %1402, align 8
  %1403 = getelementptr inbounds %struct.PSH_GlyphRec_, %struct.PSH_GlyphRec_* %8, i64 0, i32 7, i64 1, i32 3
  %1404 = bitcast %struct.PSH_HintRec_*** %1403 to i8**
  %1405 = bitcast %struct.PSH_ZoneRec_** %1399 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1405, i8 0, i64 16, i1 false) #6
  %1406 = load i8*, i8** %1404, align 8
  call void @ft_mem_free(%struct.FT_MemoryRec_* %1397, i8* %1406) #6
  store %struct.PSH_HintRec_** null, %struct.PSH_HintRec_*** %1403, align 8
  %1407 = getelementptr inbounds %struct.PSH_GlyphRec_, %struct.PSH_GlyphRec_* %8, i64 0, i32 7, i64 1, i32 2
  %1408 = bitcast %struct.PSH_HintRec_** %1407 to i8**
  %1409 = load i8*, i8** %1408, align 8
  call void @ft_mem_free(%struct.FT_MemoryRec_* %1397, i8* %1409) #6
  %1410 = getelementptr inbounds %struct.PSH_GlyphRec_, %struct.PSH_GlyphRec_* %8, i64 0, i32 7, i64 1, i32 4
  store %struct.PSH_HintRec_** null, %struct.PSH_HintRec_*** %1410, align 8
  %1411 = bitcast %struct.PSH_Hint_TableRec_* %1398 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1411, i8 0, i64 16, i1 false) #6
  %1412 = getelementptr inbounds %struct.PSH_GlyphRec_, %struct.PSH_GlyphRec_* %8, i64 0, i32 7, i64 0
  %1413 = getelementptr inbounds %struct.PSH_GlyphRec_, %struct.PSH_GlyphRec_* %8, i64 0, i32 7, i64 0, i32 6
  %1414 = bitcast %struct.PSH_ZoneRec_** %1413 to i8**
  %1415 = load i8*, i8** %1414, align 8
  call void @ft_mem_free(%struct.FT_MemoryRec_* %1397, i8* %1415) #6
  %1416 = getelementptr inbounds %struct.PSH_GlyphRec_, %struct.PSH_GlyphRec_* %8, i64 0, i32 7, i64 0, i32 5
  store i32 0, i32* %1416, align 8
  %1417 = getelementptr inbounds %struct.PSH_GlyphRec_, %struct.PSH_GlyphRec_* %8, i64 0, i32 7, i64 0, i32 3
  %1418 = bitcast %struct.PSH_HintRec_*** %1417 to i8**
  %1419 = bitcast %struct.PSH_ZoneRec_** %1413 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1419, i8 0, i64 16, i1 false) #6
  %1420 = load i8*, i8** %1418, align 8
  call void @ft_mem_free(%struct.FT_MemoryRec_* %1397, i8* %1420) #6
  store %struct.PSH_HintRec_** null, %struct.PSH_HintRec_*** %1417, align 8
  %1421 = getelementptr inbounds %struct.PSH_GlyphRec_, %struct.PSH_GlyphRec_* %8, i64 0, i32 7, i64 0, i32 2
  %1422 = bitcast %struct.PSH_HintRec_** %1421 to i8**
  %1423 = load i8*, i8** %1422, align 8
  call void @ft_mem_free(%struct.FT_MemoryRec_* %1397, i8* %1423) #6
  %1424 = getelementptr inbounds %struct.PSH_GlyphRec_, %struct.PSH_GlyphRec_* %8, i64 0, i32 7, i64 0, i32 4
  store %struct.PSH_HintRec_** null, %struct.PSH_HintRec_*** %1424, align 8
  %1425 = bitcast %struct.PSH_Hint_TableRec_* %1412 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1425, i8 0, i64 16, i1 false) #6
  %1426 = load i8*, i8** %25, align 8
  call void @ft_mem_free(%struct.FT_MemoryRec_* %1397, i8* %1426) #6
  store %struct.PSH_PointRec_* null, %struct.PSH_PointRec_** %24, align 8
  %1427 = getelementptr inbounds %struct.PSH_GlyphRec_, %struct.PSH_GlyphRec_* %8, i64 0, i32 3
  %1428 = bitcast %struct.PSH_ContourRec_** %1427 to i8**
  %1429 = load i8*, i8** %1428, align 8
  call void @ft_mem_free(%struct.FT_MemoryRec_* %1397, i8* %1429) #6
  %1430 = getelementptr inbounds %struct.PSH_GlyphRec_, %struct.PSH_GlyphRec_* %8, i64 0, i32 0
  store i32 0, i32* %1430, align 8
  %1431 = getelementptr inbounds %struct.PSH_GlyphRec_, %struct.PSH_GlyphRec_* %8, i64 0, i32 1
  store i32 0, i32* %1431, align 4
  %1432 = bitcast %struct.PSH_ContourRec_** %1427 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1432, i8 0, i64 16, i1 false) #6
  br label %1433

1433:                                             ; preds = %4, %13, %1395
  %1434 = phi i32 [ %1396, %1395 ], [ 0, %13 ], [ 0, %4 ]
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %9) #6
  ret i32 %1434

1435:                                             ; preds = %763
  %1436 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %751, i64 1, i32 4
  %1437 = load i32, i32* %1436, align 4
  %1438 = and i32 %1437, 16
  %1439 = icmp eq i32 %1438, 0
  br i1 %1439, label %1440, label %1442

1440:                                             ; preds = %1435
  %1441 = or i32 %1437, 16
  store i32 %1441, i32* %1436, align 4
  br label %1442

1442:                                             ; preds = %1440, %1435, %763
  %1443 = add i32 %752, -2
  %1444 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %751, i64 2
  %1445 = icmp eq i32 %1443, 0
  br i1 %1445, label %767, label %750
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i64 @FT_MulDiv(i64, i64, i64) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @psh_globals_set_scale(%struct.PSH_GlobalsRec_* nocapture, i64, i64, i64, i64) #3 {
  %6 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %0, i64 0, i32 1, i64 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = icmp eq i64 %7, %1
  br i1 %8, label %9, label %13

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %0, i64 0, i32 1, i64 0, i32 2
  %11 = load i64, i64* %10, align 8
  %12 = icmp eq i64 %11, %3
  br i1 %12, label %66, label %13

13:                                               ; preds = %9, %5
  store i64 %1, i64* %6, align 8
  %14 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %0, i64 0, i32 1, i64 0, i32 2
  store i64 %3, i64* %14, align 8
  %15 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %0, i64 0, i32 1, i64 0, i32 0, i32 0
  %16 = load i32, i32* %15, align 8
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %66, label %18

18:                                               ; preds = %13
  %19 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %0, i64 0, i32 1, i64 0, i32 0, i32 1, i64 0, i32 0
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = shl i64 %1, 32
  %23 = ashr exact i64 %22, 32
  %24 = mul nsw i64 %23, %21
  %25 = ashr i64 %24, 63
  %26 = add nsw i64 %24, 32768
  %27 = add nsw i64 %26, %25
  %28 = shl i64 %27, 16
  %29 = ashr i64 %28, 32
  %30 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %0, i64 0, i32 1, i64 0, i32 0, i32 1, i64 0, i32 1
  store i64 %29, i64* %30, align 8
  %31 = add nsw i64 %29, 32
  %32 = and i64 %31, -64
  %33 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %0, i64 0, i32 1, i64 0, i32 0, i32 1, i64 0, i32 2
  store i64 %32, i64* %33, align 8
  %34 = add i32 %16, -1
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %66, label %36

36:                                               ; preds = %18
  %37 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %0, i64 0, i32 1, i64 0, i32 0, i32 1, i64 1
  br label %38

38:                                               ; preds = %63, %36
  %39 = phi i64 [ %65, %63 ], [ %29, %36 ]
  %40 = phi i32 [ %61, %63 ], [ %34, %36 ]
  %41 = phi %struct.PSH_WidthRec_* [ %64, %63 ], [ %37, %36 ]
  %42 = getelementptr inbounds %struct.PSH_WidthRec_, %struct.PSH_WidthRec_* %41, i64 0, i32 0
  %43 = load i32, i32* %42, align 8
  %44 = sext i32 %43 to i64
  %45 = mul nsw i64 %23, %44
  %46 = ashr i64 %45, 63
  %47 = add nsw i64 %45, 32768
  %48 = add nsw i64 %47, %46
  %49 = shl i64 %48, 16
  %50 = ashr i64 %49, 32
  %51 = sub nsw i64 %50, %39
  %52 = icmp slt i64 %51, 0
  %53 = sub nsw i64 0, %51
  %54 = select i1 %52, i64 %53, i64 %51
  %55 = icmp slt i64 %54, 128
  %56 = select i1 %55, i64 %39, i64 %50
  %57 = getelementptr inbounds %struct.PSH_WidthRec_, %struct.PSH_WidthRec_* %41, i64 0, i32 1
  store i64 %56, i64* %57, align 8
  %58 = add nsw i64 %56, 32
  %59 = and i64 %58, -64
  %60 = getelementptr inbounds %struct.PSH_WidthRec_, %struct.PSH_WidthRec_* %41, i64 0, i32 2
  store i64 %59, i64* %60, align 8
  %61 = add i32 %40, -1
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %66, label %63

63:                                               ; preds = %38
  %64 = getelementptr inbounds %struct.PSH_WidthRec_, %struct.PSH_WidthRec_* %41, i64 1
  %65 = load i64, i64* %30, align 8
  br label %38

66:                                               ; preds = %38, %18, %13, %9
  %67 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %0, i64 0, i32 1, i64 1, i32 1
  %68 = load i64, i64* %67, align 8
  %69 = icmp eq i64 %68, %2
  br i1 %69, label %70, label %74

70:                                               ; preds = %66
  %71 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %0, i64 0, i32 1, i64 1, i32 2
  %72 = load i64, i64* %71, align 8
  %73 = icmp eq i64 %72, %4
  br i1 %73, label %350, label %74

74:                                               ; preds = %70, %66
  store i64 %2, i64* %67, align 8
  %75 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %0, i64 0, i32 1, i64 1, i32 2
  store i64 %4, i64* %75, align 8
  %76 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %0, i64 0, i32 1, i64 1, i32 0, i32 0
  %77 = load i32, i32* %76, align 8
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %127, label %79

79:                                               ; preds = %74
  %80 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %0, i64 0, i32 1, i64 1, i32 0, i32 1, i64 0, i32 0
  %81 = load i32, i32* %80, align 8
  %82 = sext i32 %81 to i64
  %83 = shl i64 %2, 32
  %84 = ashr exact i64 %83, 32
  %85 = mul nsw i64 %84, %82
  %86 = ashr i64 %85, 63
  %87 = add nsw i64 %85, 32768
  %88 = add nsw i64 %87, %86
  %89 = shl i64 %88, 16
  %90 = ashr i64 %89, 32
  %91 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %0, i64 0, i32 1, i64 1, i32 0, i32 1, i64 0, i32 1
  store i64 %90, i64* %91, align 8
  %92 = add nsw i64 %90, 32
  %93 = and i64 %92, -64
  %94 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %0, i64 0, i32 1, i64 1, i32 0, i32 1, i64 0, i32 2
  store i64 %93, i64* %94, align 8
  %95 = add i32 %77, -1
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %127, label %97

97:                                               ; preds = %79
  %98 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %0, i64 0, i32 1, i64 1, i32 0, i32 1, i64 1
  br label %99

99:                                               ; preds = %124, %97
  %100 = phi i64 [ %126, %124 ], [ %90, %97 ]
  %101 = phi i32 [ %122, %124 ], [ %95, %97 ]
  %102 = phi %struct.PSH_WidthRec_* [ %125, %124 ], [ %98, %97 ]
  %103 = getelementptr inbounds %struct.PSH_WidthRec_, %struct.PSH_WidthRec_* %102, i64 0, i32 0
  %104 = load i32, i32* %103, align 8
  %105 = sext i32 %104 to i64
  %106 = mul nsw i64 %84, %105
  %107 = ashr i64 %106, 63
  %108 = add nsw i64 %106, 32768
  %109 = add nsw i64 %108, %107
  %110 = shl i64 %109, 16
  %111 = ashr i64 %110, 32
  %112 = sub nsw i64 %111, %100
  %113 = icmp slt i64 %112, 0
  %114 = sub nsw i64 0, %112
  %115 = select i1 %113, i64 %114, i64 %112
  %116 = icmp slt i64 %115, 128
  %117 = select i1 %116, i64 %100, i64 %111
  %118 = getelementptr inbounds %struct.PSH_WidthRec_, %struct.PSH_WidthRec_* %102, i64 0, i32 1
  store i64 %117, i64* %118, align 8
  %119 = add nsw i64 %117, 32
  %120 = and i64 %119, -64
  %121 = getelementptr inbounds %struct.PSH_WidthRec_, %struct.PSH_WidthRec_* %102, i64 0, i32 2
  store i64 %120, i64* %121, align 8
  %122 = add i32 %101, -1
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %127, label %124

124:                                              ; preds = %99
  %125 = getelementptr inbounds %struct.PSH_WidthRec_, %struct.PSH_WidthRec_* %102, i64 1
  %126 = load i64, i64* %91, align 8
  br label %99

127:                                              ; preds = %99, %74, %79
  %128 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %0, i64 0, i32 2
  %129 = icmp sgt i64 %2, 34359737
  br i1 %129, label %130, label %136

130:                                              ; preds = %127
  %131 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %0, i64 0, i32 2, i32 4
  %132 = load i64, i64* %131, align 8
  %133 = shl nsw i64 %132, 3
  %134 = sdiv i64 %133, 125
  %135 = icmp sgt i64 %134, %2
  br label %142

136:                                              ; preds = %127
  %137 = mul nsw i64 %2, 125
  %138 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %0, i64 0, i32 2, i32 4
  %139 = load i64, i64* %138, align 8
  %140 = shl nsw i64 %139, 3
  %141 = icmp slt i64 %137, %140
  br label %142

142:                                              ; preds = %136, %130
  %143 = phi i1 [ %141, %136 ], [ %135, %130 ]
  %144 = zext i1 %143 to i8
  %145 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %0, i64 0, i32 2, i32 8
  store i8 %144, i8* %145, align 4
  %146 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %0, i64 0, i32 2, i32 5
  %147 = load i32, i32* %146, align 8
  %148 = icmp sgt i32 %147, 0
  %149 = shl i64 %2, 32
  %150 = ashr exact i64 %149, 32
  br i1 %148, label %151, label %169

151:                                              ; preds = %142
  %152 = sext i32 %147 to i64
  br label %153

153:                                              ; preds = %163, %151
  %154 = phi i64 [ %152, %151 ], [ %164, %163 ]
  %155 = phi i32 [ %147, %151 ], [ %165, %163 ]
  %156 = mul nsw i64 %154, %150
  %157 = ashr i64 %156, 63
  %158 = add nsw i64 %156, 32768
  %159 = add nsw i64 %158, %157
  %160 = lshr i64 %159, 16
  %161 = trunc i64 %160 to i32
  %162 = icmp sgt i32 %161, 32
  br i1 %162, label %163, label %167

163:                                              ; preds = %153
  %164 = add nsw i64 %154, -1
  %165 = add nsw i32 %155, -1
  %166 = icmp sgt i64 %164, 0
  br i1 %166, label %153, label %169

167:                                              ; preds = %153
  %168 = trunc i64 %154 to i32
  br label %169

169:                                              ; preds = %163, %167, %142
  %170 = phi i32 [ %147, %142 ], [ %168, %167 ], [ %165, %163 ]
  %171 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %0, i64 0, i32 2, i32 6
  store i32 %170, i32* %171, align 4
  %172 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %0, i64 0, i32 2, i32 2
  %173 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %0, i64 0, i32 2, i32 1
  %174 = getelementptr inbounds %struct.PSH_BluesRec_, %struct.PSH_BluesRec_* %128, i64 0, i32 0
  %175 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %0, i64 0, i32 2, i32 3
  %176 = add i64 %4, 32
  br label %181

177:                                              ; preds = %243
  %178 = getelementptr inbounds %struct.PSH_BluesRec_, %struct.PSH_BluesRec_* %128, i64 0, i32 0, i32 0
  %179 = load i32, i32* %178, align 8
  %180 = icmp eq i32 %179, 0
  br i1 %180, label %296, label %246

181:                                              ; preds = %243, %169
  %182 = phi i32 [ 0, %169 ], [ %244, %243 ]
  switch i32 %182, label %185 [
    i32 0, label %186
    i32 1, label %183
    i32 2, label %184
  ]

183:                                              ; preds = %181
  br label %186

184:                                              ; preds = %181
  br label %186

185:                                              ; preds = %181
  br label %186

186:                                              ; preds = %185, %184, %183, %181
  %187 = phi %struct.PSH_Blue_TableRec_* [ %175, %185 ], [ %172, %184 ], [ %173, %183 ], [ %174, %181 ]
  %188 = getelementptr inbounds %struct.PSH_Blue_TableRec_, %struct.PSH_Blue_TableRec_* %187, i64 0, i32 0
  %189 = load i32, i32* %188, align 8
  %190 = icmp eq i32 %189, 0
  br i1 %190, label %243, label %191

191:                                              ; preds = %186
  %192 = getelementptr inbounds %struct.PSH_Blue_TableRec_, %struct.PSH_Blue_TableRec_* %187, i64 0, i32 1, i64 0
  br label %193

193:                                              ; preds = %193, %191
  %194 = phi %struct.PSH_Blue_ZoneRec_* [ %241, %193 ], [ %192, %191 ]
  %195 = phi i32 [ %240, %193 ], [ %189, %191 ]
  %196 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %194, i64 0, i32 2
  %197 = load i32, i32* %196, align 8
  %198 = sext i32 %197 to i64
  %199 = mul nsw i64 %150, %198
  %200 = ashr i64 %199, 63
  %201 = add nsw i64 %199, 32768
  %202 = add nsw i64 %201, %200
  %203 = shl i64 %202, 16
  %204 = ashr i64 %203, 32
  %205 = add nsw i64 %204, %4
  %206 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %194, i64 0, i32 7
  store i64 %205, i64* %206, align 8
  %207 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %194, i64 0, i32 3
  %208 = load i32, i32* %207, align 4
  %209 = sext i32 %208 to i64
  %210 = mul nsw i64 %150, %209
  %211 = ashr i64 %210, 63
  %212 = add nsw i64 %210, 32768
  %213 = add nsw i64 %212, %211
  %214 = shl i64 %213, 16
  %215 = ashr i64 %214, 32
  %216 = add nsw i64 %215, %4
  %217 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %194, i64 0, i32 6
  store i64 %216, i64* %217, align 8
  %218 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %194, i64 0, i32 0
  %219 = load i32, i32* %218, align 8
  %220 = sext i32 %219 to i64
  %221 = mul nsw i64 %150, %220
  %222 = ashr i64 %221, 63
  %223 = add nsw i64 %221, 32768
  %224 = add nsw i64 %223, %222
  %225 = shl i64 %224, 16
  %226 = ashr i64 %225, 32
  %227 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %194, i64 0, i32 4
  %228 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %194, i64 0, i32 1
  %229 = load i32, i32* %228, align 4
  %230 = sext i32 %229 to i64
  %231 = mul nsw i64 %150, %230
  %232 = ashr i64 %231, 63
  %233 = add nsw i64 %231, 32768
  %234 = add nsw i64 %233, %232
  %235 = shl i64 %234, 16
  %236 = ashr i64 %235, 32
  %237 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %194, i64 0, i32 5
  store i64 %236, i64* %237, align 8
  %238 = add i64 %176, %226
  %239 = and i64 %238, -64
  store i64 %239, i64* %227, align 8
  %240 = add i32 %195, -1
  %241 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %194, i64 1
  %242 = icmp eq i32 %240, 0
  br i1 %242, label %243, label %193

243:                                              ; preds = %193, %186
  %244 = add nuw nsw i32 %182, 1
  %245 = icmp eq i32 %244, 4
  br i1 %245, label %177, label %181

246:                                              ; preds = %177
  %247 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %0, i64 0, i32 2, i32 0, i32 1, i64 0
  %248 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %0, i64 0, i32 2, i32 2, i32 1, i64 0
  %249 = getelementptr inbounds %struct.PSH_Blue_TableRec_, %struct.PSH_Blue_TableRec_* %172, i64 0, i32 0
  br label %250

250:                                              ; preds = %292, %246
  %251 = phi i32 [ %179, %246 ], [ %293, %292 ]
  %252 = phi %struct.PSH_Blue_ZoneRec_* [ %247, %246 ], [ %294, %292 ]
  %253 = load i32, i32* %249, align 8
  %254 = icmp eq i32 %253, 0
  br i1 %254, label %292, label %255

255:                                              ; preds = %250
  %256 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %252, i64 0, i32 0
  %257 = load i32, i32* %256, align 8
  br label %258

258:                                              ; preds = %288, %255
  %259 = phi i32 [ %253, %255 ], [ %289, %288 ]
  %260 = phi %struct.PSH_Blue_ZoneRec_* [ %248, %255 ], [ %290, %288 ]
  %261 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %260, i64 0, i32 0
  %262 = load i32, i32* %261, align 8
  %263 = sub nsw i32 %257, %262
  %264 = icmp slt i32 %263, 0
  %265 = sub i32 0, %263
  %266 = select i1 %264, i32 %265, i32 %263
  %267 = sext i32 %266 to i64
  %268 = mul nsw i64 %150, %267
  %269 = ashr i64 %268, 63
  %270 = add nsw i64 %268, 32768
  %271 = add nsw i64 %270, %269
  %272 = lshr i64 %271, 16
  %273 = trunc i64 %272 to i32
  %274 = icmp slt i32 %273, 64
  br i1 %274, label %275, label %288

275:                                              ; preds = %258
  %276 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %260, i64 0, i32 7
  %277 = load i64, i64* %276, align 8
  %278 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %252, i64 0, i32 7
  store i64 %277, i64* %278, align 8
  %279 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %260, i64 0, i32 6
  %280 = load i64, i64* %279, align 8
  %281 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %252, i64 0, i32 6
  store i64 %280, i64* %281, align 8
  %282 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %260, i64 0, i32 4
  %283 = load i64, i64* %282, align 8
  %284 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %252, i64 0, i32 4
  store i64 %283, i64* %284, align 8
  %285 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %260, i64 0, i32 5
  %286 = load i64, i64* %285, align 8
  %287 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %252, i64 0, i32 5
  store i64 %286, i64* %287, align 8
  br label %292

288:                                              ; preds = %258
  %289 = add i32 %259, -1
  %290 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %260, i64 1
  %291 = icmp eq i32 %289, 0
  br i1 %291, label %292, label %258

292:                                              ; preds = %288, %275, %250
  %293 = add i32 %251, -1
  %294 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %252, i64 1
  %295 = icmp eq i32 %293, 0
  br i1 %295, label %296, label %250

296:                                              ; preds = %292, %177
  %297 = getelementptr inbounds %struct.PSH_Blue_TableRec_, %struct.PSH_Blue_TableRec_* %173, i64 0, i32 0
  %298 = load i32, i32* %297, align 8
  %299 = icmp eq i32 %298, 0
  br i1 %299, label %350, label %300

300:                                              ; preds = %296
  %301 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %0, i64 0, i32 2, i32 1, i32 1, i64 0
  %302 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %0, i64 0, i32 2, i32 3, i32 1, i64 0
  %303 = getelementptr inbounds %struct.PSH_Blue_TableRec_, %struct.PSH_Blue_TableRec_* %175, i64 0, i32 0
  br label %304

304:                                              ; preds = %346, %300
  %305 = phi i32 [ %298, %300 ], [ %347, %346 ]
  %306 = phi %struct.PSH_Blue_ZoneRec_* [ %301, %300 ], [ %348, %346 ]
  %307 = load i32, i32* %303, align 8
  %308 = icmp eq i32 %307, 0
  br i1 %308, label %346, label %309

309:                                              ; preds = %304
  %310 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %306, i64 0, i32 0
  %311 = load i32, i32* %310, align 8
  br label %312

312:                                              ; preds = %329, %309
  %313 = phi i32 [ %307, %309 ], [ %330, %329 ]
  %314 = phi %struct.PSH_Blue_ZoneRec_* [ %302, %309 ], [ %331, %329 ]
  %315 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %314, i64 0, i32 0
  %316 = load i32, i32* %315, align 8
  %317 = sub nsw i32 %311, %316
  %318 = icmp slt i32 %317, 0
  %319 = sub i32 0, %317
  %320 = select i1 %318, i32 %319, i32 %317
  %321 = sext i32 %320 to i64
  %322 = mul nsw i64 %150, %321
  %323 = ashr i64 %322, 63
  %324 = add nsw i64 %322, 32768
  %325 = add nsw i64 %324, %323
  %326 = lshr i64 %325, 16
  %327 = trunc i64 %326 to i32
  %328 = icmp slt i32 %327, 64
  br i1 %328, label %333, label %329

329:                                              ; preds = %312
  %330 = add i32 %313, -1
  %331 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %314, i64 1
  %332 = icmp eq i32 %330, 0
  br i1 %332, label %346, label %312

333:                                              ; preds = %312
  %334 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %314, i64 0, i32 7
  %335 = load i64, i64* %334, align 8
  %336 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %306, i64 0, i32 7
  store i64 %335, i64* %336, align 8
  %337 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %314, i64 0, i32 6
  %338 = load i64, i64* %337, align 8
  %339 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %306, i64 0, i32 6
  store i64 %338, i64* %339, align 8
  %340 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %314, i64 0, i32 4
  %341 = load i64, i64* %340, align 8
  %342 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %306, i64 0, i32 4
  store i64 %341, i64* %342, align 8
  %343 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %314, i64 0, i32 5
  %344 = load i64, i64* %343, align 8
  %345 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %306, i64 0, i32 5
  store i64 %344, i64* %345, align 8
  br label %346

346:                                              ; preds = %329, %333, %304
  %347 = add i32 %305, -1
  %348 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %306, i64 1
  %349 = icmp eq i32 %347, 0
  br i1 %349, label %350, label %304

350:                                              ; preds = %346, %296, %70
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define internal i32 @ps_hinter_init(%struct.PS_Hinter_Module_Rec_*) #0 {
  %2 = getelementptr inbounds %struct.PS_Hinter_Module_Rec_, %struct.PS_Hinter_Module_Rec_* %0, i64 0, i32 0, i32 2
  %3 = bitcast %struct.FT_MemoryRec_** %2 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %struct.PS_Hinter_Module_Rec_, %struct.PS_Hinter_Module_Rec_* %0, i64 0, i32 1
  %6 = getelementptr inbounds %struct.PS_Hinter_Module_Rec_, %struct.PS_Hinter_Module_Rec_* %0, i64 0, i32 1, i32 1
  %7 = bitcast i32* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 112, i1 false) #6
  %8 = bitcast %struct.PS_HintsRec_* %5 to i64*
  store i64 %4, i64* %8, align 8
  %9 = getelementptr inbounds %struct.PS_Hinter_Module_Rec_, %struct.PS_Hinter_Module_Rec_* %0, i64 0, i32 2, i32 0
  store i32 (%struct.FT_MemoryRec_*, %struct.PS_PrivateRec_*, %struct.PSH_GlobalsRec_**)* @psh_globals_new, i32 (%struct.FT_MemoryRec_*, %struct.PS_PrivateRec_*, %struct.PSH_GlobalsRec_**)** %9, align 8
  %10 = getelementptr inbounds %struct.PS_Hinter_Module_Rec_, %struct.PS_Hinter_Module_Rec_* %0, i64 0, i32 2, i32 1
  store void (%struct.PSH_GlobalsRec_*, i64, i64, i64, i64)* @psh_globals_set_scale, void (%struct.PSH_GlobalsRec_*, i64, i64, i64, i64)** %10, align 8
  %11 = getelementptr inbounds %struct.PS_Hinter_Module_Rec_, %struct.PS_Hinter_Module_Rec_* %0, i64 0, i32 2, i32 2
  store void (%struct.PSH_GlobalsRec_*)* @psh_globals_destroy, void (%struct.PSH_GlobalsRec_*)** %11, align 8
  %12 = getelementptr inbounds %struct.PS_Hinter_Module_Rec_, %struct.PS_Hinter_Module_Rec_* %0, i64 0, i32 3
  %13 = getelementptr inbounds %struct.PS_Hinter_Module_Rec_, %struct.PS_Hinter_Module_Rec_* %0, i64 0, i32 3, i32 1
  store void (%struct.T1_HintsRec_*)* @t1_hints_open, void (%struct.T1_HintsRec_*)** %13, align 8
  %14 = getelementptr inbounds %struct.PS_Hinter_Module_Rec_, %struct.PS_Hinter_Module_Rec_* %0, i64 0, i32 3, i32 2
  store i32 (%struct.T1_HintsRec_*, i32)* bitcast (i32 (%struct.PS_HintsRec_*, i32)* @ps_hints_close to i32 (%struct.T1_HintsRec_*, i32)*), i32 (%struct.T1_HintsRec_*, i32)** %14, align 8
  %15 = getelementptr inbounds %struct.PS_Hinter_Module_Rec_, %struct.PS_Hinter_Module_Rec_* %0, i64 0, i32 3, i32 3
  %16 = bitcast void (%struct.T1_HintsRec_*, i32, i64*)** %15 to <2 x void (%struct.T1_HintsRec_*, i32, i64*)*>*
  store <2 x void (%struct.T1_HintsRec_*, i32, i64*)*> <void (%struct.T1_HintsRec_*, i32, i64*)* @t1_hints_stem, void (%struct.T1_HintsRec_*, i32, i64*)* bitcast (void (%struct.PS_HintsRec_*, i32, i64*)* @ps_hints_t1stem3 to void (%struct.T1_HintsRec_*, i32, i64*)*)>, <2 x void (%struct.T1_HintsRec_*, i32, i64*)*>* %16, align 8
  %17 = getelementptr inbounds %struct.PS_Hinter_Module_Rec_, %struct.PS_Hinter_Module_Rec_* %0, i64 0, i32 3, i32 5
  store void (%struct.T1_HintsRec_*, i32)* bitcast (void (%struct.PS_HintsRec_*, i32)* @ps_hints_t1reset to void (%struct.T1_HintsRec_*, i32)*), void (%struct.T1_HintsRec_*, i32)** %17, align 8
  %18 = getelementptr inbounds %struct.PS_Hinter_Module_Rec_, %struct.PS_Hinter_Module_Rec_* %0, i64 0, i32 3, i32 6
  store i32 (%struct.T1_HintsRec_*, %struct.FT_Outline_*, %struct.PSH_GlobalsRec_*, i32)* bitcast (i32 (%struct.PS_HintsRec_*, %struct.FT_Outline_*, %struct.PSH_GlobalsRec_*, i32)* @ps_hints_apply to i32 (%struct.T1_HintsRec_*, %struct.FT_Outline_*, %struct.PSH_GlobalsRec_*, i32)*), i32 (%struct.T1_HintsRec_*, %struct.FT_Outline_*, %struct.PSH_GlobalsRec_*, i32)** %18, align 8
  %19 = bitcast %struct.T1_Hints_FuncsRec_* %12 to %struct.PS_HintsRec_**
  store %struct.PS_HintsRec_* %5, %struct.PS_HintsRec_** %19, align 8
  %20 = getelementptr inbounds %struct.PS_Hinter_Module_Rec_, %struct.PS_Hinter_Module_Rec_* %0, i64 0, i32 4
  %21 = getelementptr inbounds %struct.PS_Hinter_Module_Rec_, %struct.PS_Hinter_Module_Rec_* %0, i64 0, i32 4, i32 1
  store void (%struct.T2_HintsRec_*)* @t2_hints_open, void (%struct.T2_HintsRec_*)** %21, align 8
  %22 = getelementptr inbounds %struct.PS_Hinter_Module_Rec_, %struct.PS_Hinter_Module_Rec_* %0, i64 0, i32 4, i32 2
  store i32 (%struct.T2_HintsRec_*, i32)* bitcast (i32 (%struct.PS_HintsRec_*, i32)* @ps_hints_close to i32 (%struct.T2_HintsRec_*, i32)*), i32 (%struct.T2_HintsRec_*, i32)** %22, align 8
  %23 = getelementptr inbounds %struct.PS_Hinter_Module_Rec_, %struct.PS_Hinter_Module_Rec_* %0, i64 0, i32 4, i32 3
  store void (%struct.T2_HintsRec_*, i32, i32, i64*)* @t2_hints_stems, void (%struct.T2_HintsRec_*, i32, i32, i64*)** %23, align 8
  %24 = getelementptr inbounds %struct.PS_Hinter_Module_Rec_, %struct.PS_Hinter_Module_Rec_* %0, i64 0, i32 4, i32 4
  store void (%struct.T2_HintsRec_*, i32, i32, i8*)* bitcast (void (%struct.PS_HintsRec_*, i32, i32, i8*)* @ps_hints_t2mask to void (%struct.T2_HintsRec_*, i32, i32, i8*)*), void (%struct.T2_HintsRec_*, i32, i32, i8*)** %24, align 8
  %25 = getelementptr inbounds %struct.PS_Hinter_Module_Rec_, %struct.PS_Hinter_Module_Rec_* %0, i64 0, i32 4, i32 5
  store void (%struct.T2_HintsRec_*, i32, i8*)* bitcast (void (%struct.PS_HintsRec_*, i32, i8*)* @ps_hints_t2counter to void (%struct.T2_HintsRec_*, i32, i8*)*), void (%struct.T2_HintsRec_*, i32, i8*)** %25, align 8
  %26 = getelementptr inbounds %struct.PS_Hinter_Module_Rec_, %struct.PS_Hinter_Module_Rec_* %0, i64 0, i32 4, i32 6
  store i32 (%struct.T2_HintsRec_*, %struct.FT_Outline_*, %struct.PSH_GlobalsRec_*, i32)* bitcast (i32 (%struct.PS_HintsRec_*, %struct.FT_Outline_*, %struct.PSH_GlobalsRec_*, i32)* @ps_hints_apply to i32 (%struct.T2_HintsRec_*, %struct.FT_Outline_*, %struct.PSH_GlobalsRec_*, i32)*), i32 (%struct.T2_HintsRec_*, %struct.FT_Outline_*, %struct.PSH_GlobalsRec_*, i32)** %26, align 8
  %27 = bitcast %struct.T2_Hints_FuncsRec_* %20 to %struct.PS_HintsRec_**
  store %struct.PS_HintsRec_* %5, %struct.PS_HintsRec_** %27, align 8
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal void @ps_hinter_done(%struct.PS_Hinter_Module_Rec_* nocapture) #0 {
  %2 = getelementptr inbounds %struct.PS_Hinter_Module_Rec_, %struct.PS_Hinter_Module_Rec_* %0, i64 0, i32 3, i32 0
  store %struct.T1_HintsRec_* null, %struct.T1_HintsRec_** %2, align 8
  %3 = getelementptr inbounds %struct.PS_Hinter_Module_Rec_, %struct.PS_Hinter_Module_Rec_* %0, i64 0, i32 4, i32 0
  store %struct.T2_HintsRec_* null, %struct.T2_HintsRec_** %3, align 8
  %4 = getelementptr inbounds %struct.PS_Hinter_Module_Rec_, %struct.PS_Hinter_Module_Rec_* %0, i64 0, i32 1, i32 0
  %5 = load %struct.FT_MemoryRec_*, %struct.FT_MemoryRec_** %4, align 8
  %6 = getelementptr inbounds %struct.PS_Hinter_Module_Rec_, %struct.PS_Hinter_Module_Rec_* %0, i64 0, i32 1, i32 4, i64 0
  tail call fastcc void @ps_dimension_done(%struct.PS_DimensionRec_* %6, %struct.FT_MemoryRec_* %5) #6
  %7 = getelementptr inbounds %struct.PS_Hinter_Module_Rec_, %struct.PS_Hinter_Module_Rec_* %0, i64 0, i32 1, i32 4, i64 1
  tail call fastcc void @ps_dimension_done(%struct.PS_DimensionRec_* %7, %struct.FT_MemoryRec_* %5) #6
  %8 = getelementptr inbounds %struct.PS_Hinter_Module_Rec_, %struct.PS_Hinter_Module_Rec_* %0, i64 0, i32 1, i32 1
  store i32 0, i32* %8, align 8
  store %struct.FT_MemoryRec_* null, %struct.FT_MemoryRec_** %4, align 8
  ret void
}

declare hidden i8* @ft_mem_realloc(%struct.FT_MemoryRec_*, i64, i64, i64, i8*, i32*) local_unnamed_addr #2

declare hidden i32 @ft_corner_is_flat(i64, i64, i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @psh_hint_table_init(%struct.PSH_Hint_TableRec_* nocapture, %struct.PS_Hint_TableRec_* nocapture readonly, %struct.PS_Mask_TableRec_*, %struct.FT_MemoryRec_*) unnamed_addr #0 {
  %5 = alloca i32, align 4
  %6 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #6
  store i32 -1431655766, i32* %5, align 4
  %7 = getelementptr inbounds %struct.PS_Hint_TableRec_, %struct.PS_Hint_TableRec_* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = shl i32 %8, 1
  %10 = zext i32 %9 to i64
  %11 = call i8* @ft_mem_realloc(%struct.FT_MemoryRec_* %3, i64 8, i64 0, i64 %10, i8* null, i32* nonnull %5) #6
  %12 = getelementptr inbounds %struct.PSH_Hint_TableRec_, %struct.PSH_Hint_TableRec_* %0, i64 0, i32 3
  %13 = bitcast %struct.PSH_HintRec_*** %12 to i8**
  store i8* %11, i8** %13, align 8
  %14 = load i32, i32* %5, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %245

16:                                               ; preds = %4
  %17 = zext i32 %8 to i64
  %18 = call i8* @ft_mem_realloc(%struct.FT_MemoryRec_* %3, i64 48, i64 0, i64 %17, i8* null, i32* nonnull %5) #6
  %19 = getelementptr inbounds %struct.PSH_Hint_TableRec_, %struct.PSH_Hint_TableRec_* %0, i64 0, i32 2
  %20 = bitcast %struct.PSH_HintRec_** %19 to i8**
  store i8* %18, i8** %20, align 8
  %21 = load i32, i32* %5, align 4
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %245

23:                                               ; preds = %16
  %24 = or i32 %9, 1
  %25 = zext i32 %24 to i64
  %26 = call i8* @ft_mem_realloc(%struct.FT_MemoryRec_* %3, i64 32, i64 0, i64 %25, i8* null, i32* nonnull %5) #6
  %27 = getelementptr inbounds %struct.PSH_Hint_TableRec_, %struct.PSH_Hint_TableRec_* %0, i64 0, i32 6
  %28 = bitcast %struct.PSH_ZoneRec_** %27 to i8**
  store i8* %26, i8** %28, align 8
  %29 = load i32, i32* %5, align 4
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %245

31:                                               ; preds = %23
  %32 = getelementptr inbounds %struct.PSH_Hint_TableRec_, %struct.PSH_Hint_TableRec_* %0, i64 0, i32 0
  store i32 %8, i32* %32, align 8
  %33 = load %struct.PSH_HintRec_**, %struct.PSH_HintRec_*** %12, align 8
  %34 = getelementptr inbounds %struct.PSH_HintRec_*, %struct.PSH_HintRec_** %33, i64 %17
  %35 = getelementptr inbounds %struct.PSH_Hint_TableRec_, %struct.PSH_Hint_TableRec_* %0, i64 0, i32 4
  store %struct.PSH_HintRec_** %34, %struct.PSH_HintRec_*** %35, align 8
  %36 = getelementptr inbounds %struct.PSH_Hint_TableRec_, %struct.PSH_Hint_TableRec_* %0, i64 0, i32 1
  store i32 0, i32* %36, align 4
  %37 = getelementptr inbounds %struct.PSH_Hint_TableRec_, %struct.PSH_Hint_TableRec_* %0, i64 0, i32 5
  store i32 0, i32* %37, align 8
  %38 = getelementptr inbounds %struct.PSH_Hint_TableRec_, %struct.PSH_Hint_TableRec_* %0, i64 0, i32 7
  store %struct.PSH_ZoneRec_* null, %struct.PSH_ZoneRec_** %38, align 8
  %39 = icmp eq i32 %8, 0
  br i1 %39, label %90, label %40

40:                                               ; preds = %31
  %41 = getelementptr inbounds %struct.PS_Hint_TableRec_, %struct.PS_Hint_TableRec_* %1, i64 0, i32 2
  %42 = load %struct.PS_HintRec_*, %struct.PS_HintRec_** %41, align 8
  %43 = load %struct.PSH_HintRec_*, %struct.PSH_HintRec_** %19, align 8
  %44 = and i32 %8, 1
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %59, label %46

46:                                               ; preds = %40
  %47 = getelementptr inbounds %struct.PS_HintRec_, %struct.PS_HintRec_* %42, i64 0, i32 0
  %48 = load i32, i32* %47, align 4
  %49 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %43, i64 0, i32 0
  store i32 %48, i32* %49, align 8
  %50 = getelementptr inbounds %struct.PS_HintRec_, %struct.PS_HintRec_* %42, i64 0, i32 1
  %51 = load i32, i32* %50, align 4
  %52 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %43, i64 0, i32 1
  store i32 %51, i32* %52, align 4
  %53 = getelementptr inbounds %struct.PS_HintRec_, %struct.PS_HintRec_* %42, i64 0, i32 2
  %54 = load i32, i32* %53, align 4
  %55 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %43, i64 0, i32 4
  store i32 %54, i32* %55, align 8
  %56 = add i32 %8, -1
  %57 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %43, i64 1
  %58 = getelementptr inbounds %struct.PS_HintRec_, %struct.PS_HintRec_* %42, i64 1
  br label %59

59:                                               ; preds = %40, %46
  %60 = phi %struct.PS_HintRec_* [ %42, %40 ], [ %58, %46 ]
  %61 = phi %struct.PSH_HintRec_* [ %43, %40 ], [ %57, %46 ]
  %62 = phi i32 [ %8, %40 ], [ %56, %46 ]
  %63 = icmp eq i32 %8, 1
  br i1 %63, label %90, label %64

64:                                               ; preds = %59, %64
  %65 = phi %struct.PS_HintRec_* [ %88, %64 ], [ %60, %59 ]
  %66 = phi %struct.PSH_HintRec_* [ %87, %64 ], [ %61, %59 ]
  %67 = phi i32 [ %86, %64 ], [ %62, %59 ]
  %68 = getelementptr inbounds %struct.PS_HintRec_, %struct.PS_HintRec_* %65, i64 0, i32 0
  %69 = load i32, i32* %68, align 4
  %70 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %66, i64 0, i32 0
  store i32 %69, i32* %70, align 8
  %71 = getelementptr inbounds %struct.PS_HintRec_, %struct.PS_HintRec_* %65, i64 0, i32 1
  %72 = load i32, i32* %71, align 4
  %73 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %66, i64 0, i32 1
  store i32 %72, i32* %73, align 4
  %74 = getelementptr inbounds %struct.PS_HintRec_, %struct.PS_HintRec_* %65, i64 0, i32 2
  %75 = load i32, i32* %74, align 4
  %76 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %66, i64 0, i32 4
  store i32 %75, i32* %76, align 8
  %77 = getelementptr inbounds %struct.PS_HintRec_, %struct.PS_HintRec_* %65, i64 1, i32 0
  %78 = load i32, i32* %77, align 4
  %79 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %66, i64 1, i32 0
  store i32 %78, i32* %79, align 8
  %80 = getelementptr inbounds %struct.PS_HintRec_, %struct.PS_HintRec_* %65, i64 1, i32 1
  %81 = load i32, i32* %80, align 4
  %82 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %66, i64 1, i32 1
  store i32 %81, i32* %82, align 4
  %83 = getelementptr inbounds %struct.PS_HintRec_, %struct.PS_HintRec_* %65, i64 1, i32 2
  %84 = load i32, i32* %83, align 4
  %85 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %66, i64 1, i32 4
  store i32 %84, i32* %85, align 8
  %86 = add i32 %67, -2
  %87 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %66, i64 2
  %88 = getelementptr inbounds %struct.PS_HintRec_, %struct.PS_HintRec_* %65, i64 2
  %89 = icmp eq i32 %86, 0
  br i1 %89, label %90, label %64

90:                                               ; preds = %59, %64, %31
  %91 = icmp eq %struct.PS_Mask_TableRec_* %2, null
  br i1 %91, label %182, label %92

92:                                               ; preds = %90
  %93 = getelementptr inbounds %struct.PS_Mask_TableRec_, %struct.PS_Mask_TableRec_* %2, i64 0, i32 2
  %94 = load %struct.PS_MaskRec_*, %struct.PS_MaskRec_** %93, align 8
  %95 = getelementptr inbounds %struct.PS_Mask_TableRec_, %struct.PS_Mask_TableRec_* %2, i64 0, i32 0
  %96 = load i32, i32* %95, align 8
  %97 = getelementptr inbounds %struct.PSH_Hint_TableRec_, %struct.PSH_Hint_TableRec_* %0, i64 0, i32 8
  store %struct.PS_Mask_TableRec_* %2, %struct.PS_Mask_TableRec_** %97, align 8
  %98 = icmp eq i32 %96, 0
  br i1 %98, label %182, label %99

99:                                               ; preds = %92, %178
  %100 = phi %struct.PS_MaskRec_* [ %180, %178 ], [ %94, %92 ]
  %101 = phi i32 [ %179, %178 ], [ %96, %92 ]
  %102 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %100, i64 0, i32 0
  %103 = load i32, i32* %102, align 8
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %178, label %105

105:                                              ; preds = %99
  %106 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %100, i64 0, i32 2
  %107 = load i8*, i8** %106, align 8
  %108 = zext i32 %103 to i64
  br label %109

109:                                              ; preds = %174, %105
  %110 = phi i64 [ 0, %105 ], [ %176, %174 ]
  %111 = phi i8* [ %107, %105 ], [ %122, %174 ]
  %112 = phi i32 [ 0, %105 ], [ %121, %174 ]
  %113 = phi i32 [ 0, %105 ], [ %175, %174 ]
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %115, label %119

115:                                              ; preds = %109
  %116 = getelementptr inbounds i8, i8* %111, i64 1
  %117 = load i8, i8* %111, align 1
  %118 = zext i8 %117 to i32
  br label %119

119:                                              ; preds = %115, %109
  %120 = phi i32 [ 128, %115 ], [ %113, %109 ]
  %121 = phi i32 [ %118, %115 ], [ %112, %109 ]
  %122 = phi i8* [ %116, %115 ], [ %111, %109 ]
  %123 = and i32 %121, %120
  %124 = icmp eq i32 %123, 0
  br i1 %124, label %174, label %125

125:                                              ; preds = %119
  %126 = load %struct.PSH_HintRec_*, %struct.PSH_HintRec_** %19, align 8
  %127 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %126, i64 %110
  %128 = load i32, i32* %32, align 8
  %129 = zext i32 %128 to i64
  %130 = icmp ult i64 %110, %129
  br i1 %130, label %131, label %174

131:                                              ; preds = %125
  %132 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %126, i64 %110, i32 4
  %133 = load i32, i32* %132, align 8
  %134 = and i32 %133, 4
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %136, label %174

136:                                              ; preds = %131
  %137 = or i32 %133, 4
  store i32 %137, i32* %132, align 8
  %138 = load %struct.PSH_HintRec_**, %struct.PSH_HintRec_*** %35, align 8
  %139 = load i32, i32* %36, align 4
  %140 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %126, i64 %110, i32 5
  store %struct.PSH_HintRec_* null, %struct.PSH_HintRec_** %140, align 8
  %141 = icmp eq i32 %139, 0
  br i1 %141, label %165, label %142

142:                                              ; preds = %136
  %143 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %127, i64 0, i32 0
  %144 = load i32, i32* %143, align 8
  %145 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %126, i64 %110, i32 1
  %146 = load i32, i32* %145, align 4
  %147 = add i32 %146, %144
  br label %148

148:                                              ; preds = %161, %142
  %149 = phi i32 [ %139, %142 ], [ %162, %161 ]
  %150 = phi %struct.PSH_HintRec_** [ %138, %142 ], [ %163, %161 ]
  %151 = load %struct.PSH_HintRec_*, %struct.PSH_HintRec_** %150, align 8
  %152 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %151, i64 0, i32 0
  %153 = load i32, i32* %152, align 8
  %154 = icmp slt i32 %147, %153
  br i1 %154, label %161, label %155

155:                                              ; preds = %148
  %156 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %151, i64 0, i32 1
  %157 = load i32, i32* %156, align 4
  %158 = add i32 %157, %153
  %159 = icmp slt i32 %158, %144
  br i1 %159, label %161, label %160

160:                                              ; preds = %155
  store %struct.PSH_HintRec_* %151, %struct.PSH_HintRec_** %140, align 8
  br label %165

161:                                              ; preds = %155, %148
  %162 = add i32 %149, -1
  %163 = getelementptr inbounds %struct.PSH_HintRec_*, %struct.PSH_HintRec_** %150, i64 1
  %164 = icmp eq i32 %162, 0
  br i1 %164, label %165, label %148

165:                                              ; preds = %161, %160, %136
  %166 = load i32, i32* %36, align 4
  %167 = load i32, i32* %32, align 8
  %168 = icmp ult i32 %166, %167
  br i1 %168, label %169, label %174

169:                                              ; preds = %165
  %170 = load %struct.PSH_HintRec_**, %struct.PSH_HintRec_*** %35, align 8
  %171 = add nuw i32 %166, 1
  store i32 %171, i32* %36, align 4
  %172 = zext i32 %166 to i64
  %173 = getelementptr inbounds %struct.PSH_HintRec_*, %struct.PSH_HintRec_** %170, i64 %172
  store %struct.PSH_HintRec_* %127, %struct.PSH_HintRec_** %173, align 8
  br label %174

174:                                              ; preds = %169, %165, %131, %125, %119
  %175 = ashr i32 %120, 1
  %176 = add nuw nsw i64 %110, 1
  %177 = icmp eq i64 %176, %108
  br i1 %177, label %178, label %109

178:                                              ; preds = %174, %99
  %179 = add i32 %101, -1
  %180 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %100, i64 1
  %181 = icmp eq i32 %179, 0
  br i1 %181, label %182, label %99

182:                                              ; preds = %178, %92, %90
  %183 = load i32, i32* %36, align 4
  %184 = load i32, i32* %32, align 8
  %185 = icmp ne i32 %183, %184
  %186 = icmp ne i32 %184, 0
  %187 = and i1 %185, %186
  br i1 %187, label %188, label %245

188:                                              ; preds = %182
  %189 = zext i32 %184 to i64
  br label %190

190:                                              ; preds = %243, %188
  %191 = phi i32 [ %184, %188 ], [ %244, %243 ]
  %192 = phi i64 [ 0, %188 ], [ %241, %243 ]
  %193 = load %struct.PSH_HintRec_*, %struct.PSH_HintRec_** %19, align 8
  %194 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %193, i64 %192
  %195 = zext i32 %191 to i64
  %196 = icmp ult i64 %192, %195
  br i1 %196, label %197, label %240

197:                                              ; preds = %190
  %198 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %193, i64 %192, i32 4
  %199 = load i32, i32* %198, align 8
  %200 = and i32 %199, 4
  %201 = icmp eq i32 %200, 0
  br i1 %201, label %202, label %240

202:                                              ; preds = %197
  %203 = or i32 %199, 4
  store i32 %203, i32* %198, align 8
  %204 = load %struct.PSH_HintRec_**, %struct.PSH_HintRec_*** %35, align 8
  %205 = load i32, i32* %36, align 4
  %206 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %193, i64 %192, i32 5
  store %struct.PSH_HintRec_* null, %struct.PSH_HintRec_** %206, align 8
  %207 = icmp eq i32 %205, 0
  br i1 %207, label %231, label %208

208:                                              ; preds = %202
  %209 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %194, i64 0, i32 0
  %210 = load i32, i32* %209, align 8
  %211 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %193, i64 %192, i32 1
  %212 = load i32, i32* %211, align 4
  %213 = add i32 %212, %210
  br label %214

214:                                              ; preds = %227, %208
  %215 = phi i32 [ %205, %208 ], [ %228, %227 ]
  %216 = phi %struct.PSH_HintRec_** [ %204, %208 ], [ %229, %227 ]
  %217 = load %struct.PSH_HintRec_*, %struct.PSH_HintRec_** %216, align 8
  %218 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %217, i64 0, i32 0
  %219 = load i32, i32* %218, align 8
  %220 = icmp slt i32 %213, %219
  br i1 %220, label %227, label %221

221:                                              ; preds = %214
  %222 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %217, i64 0, i32 1
  %223 = load i32, i32* %222, align 4
  %224 = add i32 %223, %219
  %225 = icmp slt i32 %224, %210
  br i1 %225, label %227, label %226

226:                                              ; preds = %221
  store %struct.PSH_HintRec_* %217, %struct.PSH_HintRec_** %206, align 8
  br label %231

227:                                              ; preds = %221, %214
  %228 = add i32 %215, -1
  %229 = getelementptr inbounds %struct.PSH_HintRec_*, %struct.PSH_HintRec_** %216, i64 1
  %230 = icmp eq i32 %228, 0
  br i1 %230, label %231, label %214

231:                                              ; preds = %227, %226, %202
  %232 = load i32, i32* %36, align 4
  %233 = load i32, i32* %32, align 8
  %234 = icmp ult i32 %232, %233
  br i1 %234, label %235, label %240

235:                                              ; preds = %231
  %236 = load %struct.PSH_HintRec_**, %struct.PSH_HintRec_*** %35, align 8
  %237 = add nuw i32 %232, 1
  store i32 %237, i32* %36, align 4
  %238 = zext i32 %232 to i64
  %239 = getelementptr inbounds %struct.PSH_HintRec_*, %struct.PSH_HintRec_** %236, i64 %238
  store %struct.PSH_HintRec_* %194, %struct.PSH_HintRec_** %239, align 8
  br label %240

240:                                              ; preds = %190, %197, %231, %235
  %241 = add nuw nsw i64 %192, 1
  %242 = icmp eq i64 %241, %189
  br i1 %242, label %245, label %243

243:                                              ; preds = %240
  %244 = load i32, i32* %32, align 8
  br label %190

245:                                              ; preds = %240, %182, %23, %16, %4
  %246 = load i32, i32* %5, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #6
  ret i32 %246
}

declare hidden i32 @ft_corner_orientation(i64, i64, i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @psh_hint_align(%struct.PSH_HintRec_* nocapture, %struct.PSH_GlobalsRec_* nocapture readonly, i32, %struct.PSH_GlyphRec_* nocapture readonly) unnamed_addr #0 {
  %5 = sext i32 %2 to i64
  %6 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %0, i64 0, i32 4
  %7 = load i32, i32* %6, align 8
  %8 = and i32 %7, 8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %311

10:                                               ; preds = %4
  %11 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %1, i64 0, i32 1, i64 %5, i32 2
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %1, i64 0, i32 1, i64 %5, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %0, i64 0, i32 0
  %16 = load i32, i32* %15, align 8
  %17 = sext i32 %16 to i64
  %18 = shl i64 %14, 32
  %19 = ashr exact i64 %18, 32
  %20 = mul nsw i64 %19, %17
  %21 = ashr i64 %20, 63
  %22 = add nsw i64 %20, 32768
  %23 = add nsw i64 %22, %21
  %24 = shl i64 %23, 16
  %25 = ashr i64 %24, 32
  %26 = add nsw i64 %25, %12
  %27 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %0, i64 0, i32 1
  %28 = load i32, i32* %27, align 4
  %29 = sext i32 %28 to i64
  %30 = mul nsw i64 %19, %29
  %31 = ashr i64 %30, 63
  %32 = add nsw i64 %30, 32768
  %33 = add nsw i64 %32, %31
  %34 = lshr i64 %33, 16
  %35 = trunc i64 %34 to i32
  %36 = shl i64 %34, 32
  %37 = ashr exact i64 %36, 32
  switch i32 %2, label %42 [
    i32 0, label %38
    i32 1, label %44
  ]

38:                                               ; preds = %10
  %39 = getelementptr inbounds %struct.PSH_GlyphRec_, %struct.PSH_GlyphRec_* %3, i64 0, i32 11
  %40 = load i8, i8* %39, align 4
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %48, label %51

42:                                               ; preds = %10
  %43 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %0, i64 0, i32 3
  br label %155

44:                                               ; preds = %10
  %45 = getelementptr inbounds %struct.PSH_GlyphRec_, %struct.PSH_GlyphRec_* %3, i64 0, i32 12
  %46 = load i8, i8* %45, align 1
  %47 = icmp eq i8 %46, 0
  br i1 %47, label %48, label %56

48:                                               ; preds = %38, %44
  %49 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %0, i64 0, i32 2
  store i64 %26, i64* %49, align 8
  %50 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %0, i64 0, i32 3
  store i64 %37, i64* %50, align 8
  br label %308

51:                                               ; preds = %38
  %52 = getelementptr inbounds %struct.PSH_GlyphRec_, %struct.PSH_GlyphRec_* %3, i64 0, i32 13
  %53 = load i8, i8* %52, align 2
  %54 = icmp ne i8 %53, 0
  %55 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %0, i64 0, i32 3
  br label %155

56:                                               ; preds = %44
  %57 = getelementptr inbounds %struct.PSH_GlyphRec_, %struct.PSH_GlyphRec_* %3, i64 0, i32 14
  %58 = load i8, i8* %57, align 1
  %59 = icmp ne i8 %58, 0
  %60 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %0, i64 0, i32 3
  store i64 %37, i64* %60, align 8
  %61 = add i32 %28, %16
  %62 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %1, i64 0, i32 2, i32 8
  %63 = load i8, i8* %62, align 4
  %64 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %1, i64 0, i32 2, i32 0, i32 0
  %65 = load i32, i32* %64, align 8
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %101, label %67

67:                                               ; preds = %56
  %68 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %1, i64 0, i32 2, i32 0, i32 1, i64 0
  %69 = sext i32 %61 to i64
  %70 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %1, i64 0, i32 2, i32 7
  %71 = load i32, i32* %70, align 8
  %72 = sub nsw i32 0, %71
  %73 = sext i32 %72 to i64
  br label %74

74:                                               ; preds = %97, %67
  %75 = phi %struct.PSH_Blue_ZoneRec_* [ %68, %67 ], [ %99, %97 ]
  %76 = phi i32 [ %65, %67 ], [ %98, %97 ]
  %77 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %75, i64 0, i32 3
  %78 = load i32, i32* %77, align 4
  %79 = sext i32 %78 to i64
  %80 = sub nsw i64 %69, %79
  %81 = icmp slt i64 %80, %73
  br i1 %81, label %101, label %82

82:                                               ; preds = %74
  %83 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %75, i64 0, i32 2
  %84 = load i32, i32* %83, align 8
  %85 = add nsw i32 %84, %71
  %86 = icmp slt i32 %85, %61
  br i1 %86, label %97, label %87

87:                                               ; preds = %82
  %88 = icmp eq i8 %63, 0
  br i1 %88, label %89, label %94

89:                                               ; preds = %87
  %90 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %1, i64 0, i32 2, i32 6
  %91 = load i32, i32* %90, align 4
  %92 = sext i32 %91 to i64
  %93 = icmp sgt i64 %80, %92
  br i1 %93, label %101, label %94

94:                                               ; preds = %89, %87
  %95 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %75, i64 0, i32 4
  %96 = load i64, i64* %95, align 8
  br label %101

97:                                               ; preds = %82
  %98 = add i32 %76, -1
  %99 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %75, i64 1
  %100 = icmp eq i32 %98, 0
  br i1 %100, label %101, label %74

101:                                              ; preds = %97, %74, %94, %89, %56
  %102 = phi i64 [ 0, %56 ], [ 0, %89 ], [ %96, %94 ], [ 0, %74 ], [ 0, %97 ]
  %103 = phi i32 [ 0, %56 ], [ 0, %89 ], [ 1, %94 ], [ 0, %74 ], [ 0, %97 ]
  %104 = phi i32 [ 2, %56 ], [ 2, %89 ], [ 3, %94 ], [ 2, %74 ], [ 2, %97 ]
  %105 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %1, i64 0, i32 2, i32 1, i32 0
  %106 = load i32, i32* %105, align 8
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %142, label %108

108:                                              ; preds = %101
  %109 = zext i32 %106 to i64
  %110 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %1, i64 0, i32 2, i32 1, i32 1, i64 %109
  %111 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %1, i64 0, i32 2, i32 7
  %112 = load i32, i32* %111, align 8
  %113 = sub nsw i32 0, %112
  %114 = sext i32 %113 to i64
  br label %118

115:                                              ; preds = %126
  %116 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %119, i64 -1
  %117 = icmp eq i32 %131, 0
  br i1 %117, label %142, label %118

118:                                              ; preds = %115, %108
  %119 = phi %struct.PSH_Blue_ZoneRec_* [ %110, %108 ], [ %116, %115 ]
  %120 = phi i32 [ %106, %108 ], [ %131, %115 ]
  %121 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %119, i64 -1, i32 2
  %122 = load i32, i32* %121, align 8
  %123 = sext i32 %122 to i64
  %124 = sub nsw i64 %123, %17
  %125 = icmp slt i64 %124, %114
  br i1 %125, label %142, label %126

126:                                              ; preds = %118
  %127 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %119, i64 -1, i32 3
  %128 = load i32, i32* %127, align 4
  %129 = sub nsw i32 %128, %112
  %130 = icmp sgt i32 %129, %16
  %131 = add i32 %120, -1
  br i1 %130, label %115, label %132

132:                                              ; preds = %126
  %133 = icmp eq i8 %63, 0
  br i1 %133, label %134, label %139

134:                                              ; preds = %132
  %135 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %1, i64 0, i32 2, i32 6
  %136 = load i32, i32* %135, align 4
  %137 = sext i32 %136 to i64
  %138 = icmp slt i64 %124, %137
  br i1 %138, label %139, label %142

139:                                              ; preds = %134, %132
  %140 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %119, i64 -1, i32 4
  %141 = load i64, i64* %140, align 8
  br label %142

142:                                              ; preds = %118, %115, %139, %134, %101
  %143 = phi i64 [ 0, %101 ], [ %141, %139 ], [ 0, %134 ], [ 0, %115 ], [ 0, %118 ]
  %144 = phi i32 [ %103, %101 ], [ %104, %139 ], [ %103, %134 ], [ %103, %115 ], [ %103, %118 ]
  switch i32 %144, label %158 [
    i32 1, label %282
    i32 2, label %145
    i32 3, label %152
  ]

145:                                              ; preds = %142
  %146 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %0, i64 0, i32 2
  store i64 %143, i64* %146, align 8
  br i1 %59, label %147, label %306

147:                                              ; preds = %145
  %148 = icmp slt i64 %36, 274877906944
  %149 = add nsw i64 %37, 32
  %150 = and i64 %149, -64
  %151 = select i1 %148, i64 64, i64 %150
  store i64 %151, i64* %60, align 8
  br label %306

152:                                              ; preds = %142
  %153 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %0, i64 0, i32 2
  store i64 %143, i64* %153, align 8
  %154 = sub nsw i64 %102, %143
  store i64 %154, i64* %60, align 8
  br label %306

155:                                              ; preds = %51, %42
  %156 = phi i64* [ %43, %42 ], [ %55, %51 ]
  %157 = phi i1 [ false, %42 ], [ %54, %51 ]
  store i64 %37, i64* %156, align 8
  br label %158

158:                                              ; preds = %155, %142
  %159 = phi i1 [ %59, %142 ], [ %157, %155 ]
  %160 = phi i64* [ %60, %142 ], [ %156, %155 ]
  %161 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %0, i64 0, i32 5
  %162 = load %struct.PSH_HintRec_*, %struct.PSH_HintRec_** %161, align 8
  %163 = icmp eq %struct.PSH_HintRec_* %162, null
  br i1 %163, label %200, label %164

164:                                              ; preds = %158
  %165 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %162, i64 0, i32 4
  %166 = load i32, i32* %165, align 8
  %167 = and i32 %166, 8
  %168 = icmp eq i32 %167, 0
  br i1 %168, label %169, label %172

169:                                              ; preds = %164
  tail call fastcc void @psh_hint_align(%struct.PSH_HintRec_* nonnull %162, %struct.PSH_GlobalsRec_* %1, i32 %2, %struct.PSH_GlyphRec_* %3)
  %170 = load i32, i32* %15, align 8
  %171 = load i32, i32* %27, align 4
  br label %172

172:                                              ; preds = %164, %169
  %173 = phi i32 [ %28, %164 ], [ %171, %169 ]
  %174 = phi i32 [ %16, %164 ], [ %170, %169 ]
  %175 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %162, i64 0, i32 0
  %176 = load i32, i32* %175, align 8
  %177 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %162, i64 0, i32 1
  %178 = load i32, i32* %177, align 4
  %179 = ashr i32 %178, 1
  %180 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %162, i64 0, i32 2
  %181 = load i64, i64* %180, align 8
  %182 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %162, i64 0, i32 3
  %183 = load i64, i64* %182, align 8
  %184 = ashr i64 %183, 1
  %185 = ashr i32 %173, 1
  %186 = add i32 %179, %176
  %187 = sub i32 %174, %186
  %188 = add i32 %187, %185
  %189 = sext i32 %188 to i64
  %190 = mul nsw i64 %19, %189
  %191 = ashr i64 %190, 63
  %192 = add nsw i64 %190, 32768
  %193 = add nsw i64 %192, %191
  %194 = shl i64 %193, 16
  %195 = ashr i64 %194, 32
  %196 = ashr i64 %36, 33
  %197 = sub i64 %181, %196
  %198 = add i64 %197, %184
  %199 = add i64 %198, %195
  br label %200

200:                                              ; preds = %158, %172
  %201 = phi i64 [ %199, %172 ], [ %26, %158 ]
  %202 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %0, i64 0, i32 2
  store i64 %201, i64* %202, align 8
  store i64 %37, i64* %160, align 8
  %203 = getelementptr inbounds %struct.PSH_GlyphRec_, %struct.PSH_GlyphRec_* %3, i64 0, i32 15
  %204 = load i8, i8* %203, align 8
  %205 = icmp eq i8 %204, 0
  br i1 %205, label %263, label %206

206:                                              ; preds = %200
  %207 = icmp slt i32 %35, 65
  br i1 %207, label %208, label %232

208:                                              ; preds = %206
  %209 = icmp sgt i32 %35, 31
  br i1 %209, label %210, label %214

210:                                              ; preds = %208
  %211 = ashr i64 %36, 33
  %212 = add nsw i64 %201, %211
  %213 = and i64 %212, -64
  br label %263

214:                                              ; preds = %208
  %215 = icmp sgt i32 %35, 0
  %216 = add nsw i64 %201, 32
  %217 = and i64 %216, -64
  br i1 %215, label %218, label %263

218:                                              ; preds = %214
  %219 = add nsw i64 %201, %37
  %220 = add nsw i64 %219, 32
  %221 = and i64 %220, -64
  %222 = sub nsw i64 %217, %201
  %223 = sub nsw i64 %221, %219
  %224 = icmp slt i64 %222, 0
  %225 = sub nsw i64 0, %222
  %226 = select i1 %224, i64 %225, i64 %222
  %227 = icmp slt i64 %223, 0
  %228 = sub nsw i64 0, %223
  %229 = select i1 %227, i64 %228, i64 %223
  %230 = icmp sgt i64 %226, %229
  %231 = select i1 %230, i64 %221, i64 %217
  br label %263

232:                                              ; preds = %206
  %233 = icmp slt i64 %36, 279172874240
  br i1 %233, label %263, label %234

234:                                              ; preds = %232
  %235 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %1, i64 0, i32 1, i64 %5, i32 0, i32 1, i64 0, i32 1
  %236 = load i64, i64* %235, align 8
  %237 = sub nsw i64 %37, %236
  %238 = icmp slt i64 %237, 0
  %239 = sub nsw i64 0, %237
  %240 = select i1 %238, i64 %239, i64 %237
  %241 = icmp slt i64 %240, 40
  br i1 %241, label %242, label %244

242:                                              ; preds = %234
  %243 = icmp sgt i64 %236, 48
  br i1 %243, label %244, label %258

244:                                              ; preds = %242, %234
  %245 = phi i64 [ %37, %234 ], [ %236, %242 ]
  %246 = icmp slt i64 %245, 192
  br i1 %246, label %247, label %260

247:                                              ; preds = %244
  %248 = and i64 %245, 63
  %249 = and i64 %245, -64
  %250 = icmp ult i64 %248, 10
  br i1 %250, label %263, label %251

251:                                              ; preds = %247
  %252 = icmp ult i64 %248, 32
  br i1 %252, label %253, label %255

253:                                              ; preds = %251
  %254 = or i64 %249, 10
  br label %263

255:                                              ; preds = %251
  %256 = icmp ult i64 %248, 54
  %257 = or i64 %249, 54
  br i1 %256, label %258, label %263

258:                                              ; preds = %255, %242
  %259 = phi i64 [ %257, %255 ], [ 54, %242 ]
  br label %263

260:                                              ; preds = %244
  %261 = add nuw nsw i64 %245, 32
  %262 = and i64 %261, -64
  br label %263

263:                                              ; preds = %260, %258, %255, %253, %247, %232, %214, %200, %218, %210
  %264 = phi i64 [ %213, %210 ], [ %231, %218 ], [ %201, %200 ], [ %217, %214 ], [ %201, %232 ], [ %201, %247 ], [ %201, %253 ], [ %201, %255 ], [ %201, %258 ], [ %201, %260 ]
  %265 = phi i64 [ 64, %210 ], [ %37, %218 ], [ %37, %200 ], [ %37, %214 ], [ 64, %232 ], [ %245, %247 ], [ %254, %253 ], [ %245, %255 ], [ %259, %258 ], [ %262, %260 ]
  %266 = add i64 %264, 32
  %267 = and i64 %266, -64
  %268 = sub nsw i64 %267, %264
  %269 = add i64 %266, %265
  %270 = and i64 %269, -64
  %271 = sub nsw i64 %270, %264
  %272 = sub i64 %271, %265
  %273 = icmp slt i64 %268, 0
  %274 = sub nsw i64 0, %268
  %275 = select i1 %273, i64 %274, i64 %268
  %276 = icmp slt i64 %272, 0
  %277 = sub nsw i64 0, %272
  %278 = select i1 %276, i64 %277, i64 %272
  %279 = icmp sgt i64 %275, %278
  %280 = select i1 %279, i64 %272, i64 %268
  %281 = add nsw i64 %280, %264
  store i64 %281, i64* %202, align 8
  store i64 %265, i64* %160, align 8
  br i1 %159, label %291, label %306

282:                                              ; preds = %142
  %283 = sub nsw i64 %102, %37
  %284 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %0, i64 0, i32 2
  store i64 %283, i64* %284, align 8
  br i1 %59, label %285, label %306

285:                                              ; preds = %282
  %286 = icmp slt i64 %36, 274877906944
  %287 = add nsw i64 %37, 32
  %288 = and i64 %287, -64
  %289 = select i1 %286, i64 64, i64 %288
  %290 = sub nsw i64 %102, %289
  store i64 %290, i64* %284, align 8
  store i64 %289, i64* %60, align 8
  br label %306

291:                                              ; preds = %263
  %292 = icmp slt i64 %265, 64
  %293 = add nsw i64 %265, 32
  %294 = and i64 %293, -64
  %295 = select i1 %292, i64 64, i64 %294
  %296 = and i64 %295, 64
  %297 = icmp eq i64 %296, 0
  %298 = ashr exact i64 %295, 1
  %299 = add nsw i64 %298, %281
  %300 = and i64 %299, -64
  %301 = or i64 %300, 32
  %302 = add nsw i64 %299, 32
  %303 = and i64 %302, -64
  %304 = select i1 %297, i64 %303, i64 %301
  %305 = sub nsw i64 %304, %298
  store i64 %305, i64* %202, align 8
  store i64 %295, i64* %160, align 8
  br label %306

306:                                              ; preds = %152, %145, %263, %282, %291, %147, %285
  %307 = load i32, i32* %6, align 8
  br label %308

308:                                              ; preds = %48, %306
  %309 = phi i32 [ %307, %306 ], [ %7, %48 ]
  %310 = or i32 %309, 8
  store i32 %310, i32* %6, align 8
  br label %311

311:                                              ; preds = %308, %4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare i64 @FT_DivFix(i64, i64) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @psh_hint_table_activate_mask(%struct.PSH_Hint_TableRec_* nocapture, %struct.PS_MaskRec_* nocapture readonly) unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %1, i64 0, i32 2
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %struct.PSH_Hint_TableRec_, %struct.PSH_Hint_TableRec_* %0, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %54, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.PSH_Hint_TableRec_, %struct.PSH_Hint_TableRec_* %0, i64 0, i32 2
  %12 = load %struct.PSH_HintRec_*, %struct.PSH_HintRec_** %11, align 8
  %13 = add i32 %8, -1
  %14 = and i32 %8, 3
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %28, label %16

16:                                               ; preds = %10, %16
  %17 = phi %struct.PSH_HintRec_* [ %25, %16 ], [ %12, %10 ]
  %18 = phi i32 [ %24, %16 ], [ %8, %10 ]
  %19 = phi i32 [ %26, %16 ], [ %14, %10 ]
  %20 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %17, i64 0, i32 4
  %21 = load i32, i32* %20, align 8
  %22 = and i32 %21, -5
  store i32 %22, i32* %20, align 8
  %23 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %17, i64 0, i32 6
  store i32 -1, i32* %23, align 8
  %24 = add i32 %18, -1
  %25 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %17, i64 1
  %26 = add i32 %19, -1
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %16, !llvm.loop !4

28:                                               ; preds = %16, %10
  %29 = phi %struct.PSH_HintRec_* [ %12, %10 ], [ %25, %16 ]
  %30 = phi i32 [ %8, %10 ], [ %24, %16 ]
  %31 = icmp ult i32 %13, 3
  br i1 %31, label %54, label %32

32:                                               ; preds = %28, %32
  %33 = phi %struct.PSH_HintRec_* [ %52, %32 ], [ %29, %28 ]
  %34 = phi i32 [ %51, %32 ], [ %30, %28 ]
  %35 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %33, i64 0, i32 4
  %36 = load i32, i32* %35, align 8
  %37 = and i32 %36, -5
  store i32 %37, i32* %35, align 8
  %38 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %33, i64 0, i32 6
  store i32 -1, i32* %38, align 8
  %39 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %33, i64 1, i32 4
  %40 = load i32, i32* %39, align 8
  %41 = and i32 %40, -5
  store i32 %41, i32* %39, align 8
  %42 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %33, i64 1, i32 6
  store i32 -1, i32* %42, align 8
  %43 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %33, i64 2, i32 4
  %44 = load i32, i32* %43, align 8
  %45 = and i32 %44, -5
  store i32 %45, i32* %43, align 8
  %46 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %33, i64 2, i32 6
  store i32 -1, i32* %46, align 8
  %47 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %33, i64 3, i32 4
  %48 = load i32, i32* %47, align 8
  %49 = and i32 %48, -5
  store i32 %49, i32* %47, align 8
  %50 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %33, i64 3, i32 6
  store i32 -1, i32* %50, align 8
  %51 = add i32 %34, -4
  %52 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %33, i64 4
  %53 = icmp eq i32 %51, 0
  br i1 %53, label %54, label %32

54:                                               ; preds = %28, %32, %2
  %55 = icmp eq i32 %6, 0
  br i1 %55, label %56, label %58

56:                                               ; preds = %54
  %57 = getelementptr inbounds %struct.PSH_Hint_TableRec_, %struct.PSH_Hint_TableRec_* %0, i64 0, i32 1
  store i32 0, i32* %57, align 4
  br label %127

58:                                               ; preds = %54
  %59 = getelementptr inbounds %struct.PSH_Hint_TableRec_, %struct.PSH_Hint_TableRec_* %0, i64 0, i32 2
  %60 = getelementptr inbounds %struct.PSH_Hint_TableRec_, %struct.PSH_Hint_TableRec_* %0, i64 0, i32 3
  %61 = zext i32 %6 to i64
  br label %62

62:                                               ; preds = %95, %58
  %63 = phi i64 [ 0, %58 ], [ %98, %95 ]
  %64 = phi i32 [ 0, %58 ], [ %97, %95 ]
  %65 = phi i32 [ 0, %58 ], [ %96, %95 ]
  %66 = phi i8* [ %4, %58 ], [ %75, %95 ]
  %67 = phi i32 [ 0, %58 ], [ %74, %95 ]
  %68 = icmp eq i32 %64, 0
  br i1 %68, label %69, label %73

69:                                               ; preds = %62
  %70 = getelementptr inbounds i8, i8* %66, i64 1
  %71 = load i8, i8* %66, align 1
  %72 = zext i8 %71 to i32
  br label %73

73:                                               ; preds = %69, %62
  %74 = phi i32 [ %72, %69 ], [ %67, %62 ]
  %75 = phi i8* [ %70, %69 ], [ %66, %62 ]
  %76 = phi i32 [ 128, %69 ], [ %64, %62 ]
  %77 = and i32 %76, %74
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %95, label %79

79:                                               ; preds = %73
  %80 = load %struct.PSH_HintRec_*, %struct.PSH_HintRec_** %59, align 8
  %81 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %80, i64 %63
  %82 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %80, i64 %63, i32 4
  %83 = load i32, i32* %82, align 8
  %84 = and i32 %83, 4
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %86, label %95

86:                                               ; preds = %79
  %87 = or i32 %83, 4
  store i32 %87, i32* %82, align 8
  %88 = load i32, i32* %7, align 8
  %89 = icmp ult i32 %65, %88
  br i1 %89, label %90, label %95

90:                                               ; preds = %86
  %91 = load %struct.PSH_HintRec_**, %struct.PSH_HintRec_*** %60, align 8
  %92 = add nuw i32 %65, 1
  %93 = zext i32 %65 to i64
  %94 = getelementptr inbounds %struct.PSH_HintRec_*, %struct.PSH_HintRec_** %91, i64 %93
  store %struct.PSH_HintRec_* %81, %struct.PSH_HintRec_** %94, align 8
  br label %95

95:                                               ; preds = %79, %90, %86, %73
  %96 = phi i32 [ %65, %73 ], [ %65, %79 ], [ %92, %90 ], [ %65, %86 ]
  %97 = ashr i32 %76, 1
  %98 = add nuw nsw i64 %63, 1
  %99 = icmp eq i64 %98, %61
  br i1 %99, label %100, label %62

100:                                              ; preds = %95
  %101 = getelementptr inbounds %struct.PSH_Hint_TableRec_, %struct.PSH_Hint_TableRec_* %0, i64 0, i32 1
  store i32 %96, i32* %101, align 4
  %102 = getelementptr inbounds %struct.PSH_Hint_TableRec_, %struct.PSH_Hint_TableRec_* %0, i64 0, i32 3
  %103 = load %struct.PSH_HintRec_**, %struct.PSH_HintRec_*** %102, align 8
  %104 = icmp sgt i32 %96, 1
  br i1 %104, label %105, label %127

105:                                              ; preds = %100
  %106 = zext i32 %96 to i64
  br label %107

107:                                              ; preds = %124, %105
  %108 = phi i64 [ 1, %105 ], [ %125, %124 ]
  %109 = getelementptr inbounds %struct.PSH_HintRec_*, %struct.PSH_HintRec_** %103, i64 %108
  %110 = load %struct.PSH_HintRec_*, %struct.PSH_HintRec_** %109, align 8
  %111 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %110, i64 0, i32 0
  br label %112

112:                                              ; preds = %107, %121
  %113 = phi i64 [ %108, %107 ], [ %114, %121 ]
  %114 = add nsw i64 %113, -1
  %115 = getelementptr inbounds %struct.PSH_HintRec_*, %struct.PSH_HintRec_** %103, i64 %114
  %116 = load %struct.PSH_HintRec_*, %struct.PSH_HintRec_** %115, align 8
  %117 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %116, i64 0, i32 0
  %118 = load i32, i32* %117, align 8
  %119 = load i32, i32* %111, align 8
  %120 = icmp slt i32 %118, %119
  br i1 %120, label %124, label %121

121:                                              ; preds = %112
  %122 = getelementptr inbounds %struct.PSH_HintRec_*, %struct.PSH_HintRec_** %103, i64 %113
  store %struct.PSH_HintRec_* %116, %struct.PSH_HintRec_** %122, align 8
  store %struct.PSH_HintRec_* %110, %struct.PSH_HintRec_** %115, align 8
  %123 = icmp sgt i64 %114, 0
  br i1 %123, label %112, label %124

124:                                              ; preds = %121, %112
  %125 = add nuw nsw i64 %108, 1
  %126 = icmp eq i64 %125, %106
  br i1 %126, label %127, label %107

127:                                              ; preds = %124, %56, %100
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @psh_hint_table_find_strong_points(%struct.PSH_Hint_TableRec_* nocapture readonly, %struct.PSH_PointRec_* nocapture, i32, i32, i32) unnamed_addr #3 {
  %6 = getelementptr inbounds %struct.PSH_Hint_TableRec_, %struct.PSH_Hint_TableRec_* %0, i64 0, i32 3
  %7 = load %struct.PSH_HintRec_**, %struct.PSH_HintRec_*** %6, align 8
  %8 = getelementptr inbounds %struct.PSH_Hint_TableRec_, %struct.PSH_Hint_TableRec_* %0, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %2, 0
  br i1 %10, label %173, label %11

11:                                               ; preds = %5
  %12 = sub nsw i32 0, %4
  %13 = icmp eq i32 %9, 0
  %14 = sext i32 %3 to i64
  %15 = icmp eq i32 %4, 2
  %16 = select i1 %15, i32 128, i32 256
  %17 = select i1 %15, i32 256, i32 128
  %18 = zext i32 %9 to i64
  %19 = zext i32 %9 to i64
  %20 = zext i32 %9 to i64
  %21 = zext i32 %9 to i64
  %22 = zext i32 %9 to i64
  br label %23

23:                                               ; preds = %11, %169
  %24 = phi %struct.PSH_PointRec_* [ %1, %11 ], [ %171, %169 ]
  %25 = phi i32 [ %2, %11 ], [ %170, %169 ]
  %26 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %24, i64 0, i32 8
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %24, i64 0, i32 4
  %29 = load i32, i32* %28, align 4
  %30 = and i32 %29, 16
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %169

32:                                               ; preds = %23
  %33 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %24, i64 0, i32 5
  %34 = load i8, i8* %33, align 8
  %35 = sext i8 %34 to i32
  %36 = icmp eq i32 %35, %4
  %37 = icmp eq i32 %35, %12
  %38 = or i1 %36, %37
  br i1 %38, label %46, label %39

39:                                               ; preds = %32
  %40 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %24, i64 0, i32 6
  %41 = load i8, i8* %40, align 1
  %42 = sext i8 %41 to i32
  %43 = icmp eq i32 %42, %4
  %44 = icmp eq i32 %42, %12
  %45 = or i1 %43, %44
  br i1 %45, label %46, label %95

46:                                               ; preds = %39, %32
  %47 = phi i32 [ %35, %32 ], [ %42, %39 ]
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %95, label %49

49:                                               ; preds = %46
  %50 = icmp eq i32 %47, %4
  br i1 %50, label %51, label %70

51:                                               ; preds = %49
  br i1 %13, label %169, label %54

52:                                               ; preds = %54
  %53 = icmp eq i64 %66, %19
  br i1 %53, label %169, label %54

54:                                               ; preds = %51, %52
  %55 = phi i64 [ %66, %52 ], [ 0, %51 ]
  %56 = getelementptr inbounds %struct.PSH_HintRec_*, %struct.PSH_HintRec_** %7, i64 %55
  %57 = load %struct.PSH_HintRec_*, %struct.PSH_HintRec_** %56, align 8
  %58 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %57, i64 0, i32 0
  %59 = load i32, i32* %58, align 8
  %60 = sext i32 %59 to i64
  %61 = sub nsw i64 %27, %60
  %62 = icmp slt i64 %61, %14
  %63 = sub nsw i64 0, %61
  %64 = icmp slt i64 %63, %14
  %65 = and i1 %62, %64
  %66 = add nuw nsw i64 %55, 1
  br i1 %65, label %67, label %52

67:                                               ; preds = %54
  %68 = or i32 %29, 528
  store i32 %68, i32* %28, align 4
  %69 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %24, i64 0, i32 7
  store %struct.PSH_HintRec_* %57, %struct.PSH_HintRec_** %69, align 8
  br label %169

70:                                               ; preds = %49
  %71 = icmp ne i32 %47, %12
  %72 = or i1 %71, %13
  br i1 %72, label %169, label %75

73:                                               ; preds = %75
  %74 = icmp eq i64 %91, %18
  br i1 %74, label %169, label %75

75:                                               ; preds = %70, %73
  %76 = phi i64 [ %91, %73 ], [ 0, %70 ]
  %77 = getelementptr inbounds %struct.PSH_HintRec_*, %struct.PSH_HintRec_** %7, i64 %76
  %78 = load %struct.PSH_HintRec_*, %struct.PSH_HintRec_** %77, align 8
  %79 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %78, i64 0, i32 0
  %80 = load i32, i32* %79, align 8
  %81 = sext i32 %80 to i64
  %82 = sub nsw i64 %27, %81
  %83 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %78, i64 0, i32 1
  %84 = load i32, i32* %83, align 4
  %85 = sext i32 %84 to i64
  %86 = sub i64 %82, %85
  %87 = icmp slt i64 %86, %14
  %88 = sub nsw i64 0, %86
  %89 = icmp slt i64 %88, %14
  %90 = and i1 %87, %89
  %91 = add nuw nsw i64 %76, 1
  br i1 %90, label %92, label %73

92:                                               ; preds = %75
  %93 = or i32 %29, 1040
  store i32 %93, i32* %28, align 4
  %94 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %24, i64 0, i32 7
  store %struct.PSH_HintRec_* %78, %struct.PSH_HintRec_** %94, align 8
  br label %169

95:                                               ; preds = %39, %46
  %96 = and i32 %29, 64
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %169, label %98

98:                                               ; preds = %95
  %99 = and i32 %29, %16
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %120, label %101

101:                                              ; preds = %98
  br i1 %13, label %169, label %104

102:                                              ; preds = %104
  %103 = icmp eq i64 %116, %20
  br i1 %103, label %146, label %104

104:                                              ; preds = %101, %102
  %105 = phi i64 [ %116, %102 ], [ 0, %101 ]
  %106 = getelementptr inbounds %struct.PSH_HintRec_*, %struct.PSH_HintRec_** %7, i64 %105
  %107 = load %struct.PSH_HintRec_*, %struct.PSH_HintRec_** %106, align 8
  %108 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %107, i64 0, i32 0
  %109 = load i32, i32* %108, align 8
  %110 = sext i32 %109 to i64
  %111 = sub nsw i64 %27, %110
  %112 = icmp slt i64 %111, %14
  %113 = sub nsw i64 0, %111
  %114 = icmp slt i64 %113, %14
  %115 = and i1 %112, %114
  %116 = add nuw nsw i64 %105, 1
  br i1 %115, label %117, label %102

117:                                              ; preds = %104
  %118 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %24, i64 0, i32 7
  store %struct.PSH_HintRec_* %107, %struct.PSH_HintRec_** %118, align 8
  %119 = or i32 %29, 528
  store i32 %119, i32* %28, align 4
  br label %146

120:                                              ; preds = %98
  %121 = and i32 %29, %17
  %122 = icmp eq i32 %121, 0
  %123 = or i1 %122, %13
  br i1 %123, label %146, label %126

124:                                              ; preds = %126
  %125 = icmp eq i64 %142, %21
  br i1 %125, label %146, label %126

126:                                              ; preds = %120, %124
  %127 = phi i64 [ %142, %124 ], [ 0, %120 ]
  %128 = getelementptr inbounds %struct.PSH_HintRec_*, %struct.PSH_HintRec_** %7, i64 %127
  %129 = load %struct.PSH_HintRec_*, %struct.PSH_HintRec_** %128, align 8
  %130 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %129, i64 0, i32 0
  %131 = load i32, i32* %130, align 8
  %132 = sext i32 %131 to i64
  %133 = sub nsw i64 %27, %132
  %134 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %129, i64 0, i32 1
  %135 = load i32, i32* %134, align 4
  %136 = sext i32 %135 to i64
  %137 = sub i64 %133, %136
  %138 = icmp slt i64 %137, %14
  %139 = sub nsw i64 0, %137
  %140 = icmp slt i64 %139, %14
  %141 = and i1 %138, %140
  %142 = add nuw nsw i64 %127, 1
  br i1 %141, label %143, label %124

143:                                              ; preds = %126
  %144 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %24, i64 0, i32 7
  store %struct.PSH_HintRec_* %129, %struct.PSH_HintRec_** %144, align 8
  %145 = or i32 %29, 1040
  store i32 %145, i32* %28, align 4
  br label %146

146:                                              ; preds = %102, %124, %120, %143, %117
  %147 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %24, i64 0, i32 7
  %148 = load %struct.PSH_HintRec_*, %struct.PSH_HintRec_** %147, align 8
  %149 = icmp ne %struct.PSH_HintRec_* %148, null
  %150 = or i1 %149, %13
  br i1 %150, label %169, label %151

151:                                              ; preds = %146, %166
  %152 = phi i64 [ %167, %166 ], [ 0, %146 ]
  %153 = getelementptr inbounds %struct.PSH_HintRec_*, %struct.PSH_HintRec_** %7, i64 %152
  %154 = load %struct.PSH_HintRec_*, %struct.PSH_HintRec_** %153, align 8
  %155 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %154, i64 0, i32 0
  %156 = load i32, i32* %155, align 8
  %157 = sext i32 %156 to i64
  %158 = icmp slt i64 %27, %157
  br i1 %158, label %166, label %159

159:                                              ; preds = %151
  %160 = getelementptr inbounds %struct.PSH_HintRec_, %struct.PSH_HintRec_* %154, i64 0, i32 1
  %161 = load i32, i32* %160, align 4
  %162 = add i32 %161, %156
  %163 = sext i32 %162 to i64
  %164 = icmp sgt i64 %27, %163
  br i1 %164, label %166, label %165

165:                                              ; preds = %159
  store %struct.PSH_HintRec_* %154, %struct.PSH_HintRec_** %147, align 8
  br label %169

166:                                              ; preds = %159, %151
  %167 = add nuw nsw i64 %152, 1
  %168 = icmp eq i64 %167, %22
  br i1 %168, label %169, label %151

169:                                              ; preds = %73, %52, %166, %101, %51, %146, %70, %95, %67, %92, %165, %23
  %170 = add i32 %25, -1
  %171 = getelementptr inbounds %struct.PSH_PointRec_, %struct.PSH_PointRec_* %24, i64 1
  %172 = icmp eq i32 %170, 0
  br i1 %172, label %173, label %23

173:                                              ; preds = %169, %5
  ret void
}

declare hidden void @ft_mem_free(%struct.FT_MemoryRec_*, i8*) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal %struct.PSH_Globals_FuncsRec_* @pshinter_get_globals_funcs(%struct.FT_ModuleRec_* readnone) #4 {
  %2 = getelementptr inbounds %struct.FT_ModuleRec_, %struct.FT_ModuleRec_* %0, i64 6
  %3 = bitcast %struct.FT_ModuleRec_* %2 to %struct.PSH_Globals_FuncsRec_*
  ret %struct.PSH_Globals_FuncsRec_* %3
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal %struct.T1_Hints_FuncsRec_* @pshinter_get_t1_funcs(%struct.FT_ModuleRec_* readnone) #4 {
  %2 = getelementptr inbounds %struct.FT_ModuleRec_, %struct.FT_ModuleRec_* %0, i64 7
  %3 = bitcast %struct.FT_ModuleRec_* %2 to %struct.T1_Hints_FuncsRec_*
  ret %struct.T1_Hints_FuncsRec_* %3
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal %struct.T2_Hints_FuncsRec_* @pshinter_get_t2_funcs(%struct.FT_ModuleRec_* readnone) #4 {
  %2 = getelementptr inbounds %struct.FT_ModuleRec_, %struct.FT_ModuleRec_* %0, i64 9, i32 1
  %3 = bitcast %struct.FT_LibraryRec_** %2 to %struct.T2_Hints_FuncsRec_*
  ret %struct.T2_Hints_FuncsRec_* %3
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @psh_globals_new(%struct.FT_MemoryRec_*, %struct.PS_PrivateRec_* nocapture readonly, %struct.PSH_GlobalsRec_** nocapture) #0 {
  %4 = alloca i32, align 4
  %5 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #6
  store i32 -1431655766, i32* %4, align 4
  %6 = call i8* @ft_mem_alloc(%struct.FT_MemoryRec_* %0, i64 3952, i32* nonnull %4) #6
  %7 = load i32, i32* %4, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %498

9:                                                ; preds = %3
  %10 = bitcast i8* %6 to %struct.FT_MemoryRec_**
  store %struct.FT_MemoryRec_* %0, %struct.FT_MemoryRec_** %10, align 8
  %11 = getelementptr inbounds i8, i8* %6, i64 8
  %12 = getelementptr inbounds i8, i8* %6, i64 416
  %13 = getelementptr inbounds i8, i8* %6, i64 424
  %14 = getelementptr inbounds %struct.PS_PrivateRec_, %struct.PS_PrivateRec_* %1, i64 0, i32 13, i64 0
  %15 = load i16, i16* %14, align 8
  %16 = zext i16 %15 to i32
  %17 = bitcast i8* %13 to i32*
  store i32 %16, i32* %17, align 8
  %18 = getelementptr inbounds %struct.PS_PrivateRec_, %struct.PS_PrivateRec_* %1, i64 0, i32 15
  %19 = load i8, i8* %18, align 4
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %90, label %21

21:                                               ; preds = %9
  %22 = zext i8 %19 to i32
  %23 = getelementptr inbounds %struct.PS_PrivateRec_, %struct.PS_PrivateRec_* %1, i64 0, i32 19, i64 0
  %24 = getelementptr inbounds i8, i8* %6, i64 448
  %25 = bitcast i8* %24 to %struct.PSH_WidthRec_*
  %26 = add nsw i32 %22, -1
  %27 = and i32 %22, 7
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %42, label %29

29:                                               ; preds = %21, %29
  %30 = phi %struct.PSH_WidthRec_* [ %37, %29 ], [ %25, %21 ]
  %31 = phi i16* [ %38, %29 ], [ %23, %21 ]
  %32 = phi i32 [ %39, %29 ], [ %22, %21 ]
  %33 = phi i32 [ %40, %29 ], [ %27, %21 ]
  %34 = load i16, i16* %31, align 2
  %35 = sext i16 %34 to i32
  %36 = getelementptr inbounds %struct.PSH_WidthRec_, %struct.PSH_WidthRec_* %30, i64 0, i32 0
  store i32 %35, i32* %36, align 8
  %37 = getelementptr inbounds %struct.PSH_WidthRec_, %struct.PSH_WidthRec_* %30, i64 1
  %38 = getelementptr inbounds i16, i16* %31, i64 1
  %39 = add nsw i32 %32, -1
  %40 = add i32 %33, -1
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %29, !llvm.loop !5

42:                                               ; preds = %29, %21
  %43 = phi %struct.PSH_WidthRec_* [ %25, %21 ], [ %37, %29 ]
  %44 = phi i16* [ %23, %21 ], [ %38, %29 ]
  %45 = phi i32 [ %22, %21 ], [ %39, %29 ]
  %46 = icmp ult i32 %26, 7
  br i1 %46, label %86, label %47

47:                                               ; preds = %42, %47
  %48 = phi %struct.PSH_WidthRec_* [ %82, %47 ], [ %43, %42 ]
  %49 = phi i16* [ %83, %47 ], [ %44, %42 ]
  %50 = phi i32 [ %84, %47 ], [ %45, %42 ]
  %51 = load i16, i16* %49, align 2
  %52 = sext i16 %51 to i32
  %53 = getelementptr inbounds %struct.PSH_WidthRec_, %struct.PSH_WidthRec_* %48, i64 0, i32 0
  store i32 %52, i32* %53, align 8
  %54 = getelementptr inbounds i16, i16* %49, i64 1
  %55 = load i16, i16* %54, align 2
  %56 = sext i16 %55 to i32
  %57 = getelementptr inbounds %struct.PSH_WidthRec_, %struct.PSH_WidthRec_* %48, i64 1, i32 0
  store i32 %56, i32* %57, align 8
  %58 = getelementptr inbounds i16, i16* %49, i64 2
  %59 = load i16, i16* %58, align 2
  %60 = sext i16 %59 to i32
  %61 = getelementptr inbounds %struct.PSH_WidthRec_, %struct.PSH_WidthRec_* %48, i64 2, i32 0
  store i32 %60, i32* %61, align 8
  %62 = getelementptr inbounds i16, i16* %49, i64 3
  %63 = load i16, i16* %62, align 2
  %64 = sext i16 %63 to i32
  %65 = getelementptr inbounds %struct.PSH_WidthRec_, %struct.PSH_WidthRec_* %48, i64 3, i32 0
  store i32 %64, i32* %65, align 8
  %66 = getelementptr inbounds i16, i16* %49, i64 4
  %67 = load i16, i16* %66, align 2
  %68 = sext i16 %67 to i32
  %69 = getelementptr inbounds %struct.PSH_WidthRec_, %struct.PSH_WidthRec_* %48, i64 4, i32 0
  store i32 %68, i32* %69, align 8
  %70 = getelementptr inbounds i16, i16* %49, i64 5
  %71 = load i16, i16* %70, align 2
  %72 = sext i16 %71 to i32
  %73 = getelementptr inbounds %struct.PSH_WidthRec_, %struct.PSH_WidthRec_* %48, i64 5, i32 0
  store i32 %72, i32* %73, align 8
  %74 = getelementptr inbounds i16, i16* %49, i64 6
  %75 = load i16, i16* %74, align 2
  %76 = sext i16 %75 to i32
  %77 = getelementptr inbounds %struct.PSH_WidthRec_, %struct.PSH_WidthRec_* %48, i64 6, i32 0
  store i32 %76, i32* %77, align 8
  %78 = getelementptr inbounds i16, i16* %49, i64 7
  %79 = load i16, i16* %78, align 2
  %80 = sext i16 %79 to i32
  %81 = getelementptr inbounds %struct.PSH_WidthRec_, %struct.PSH_WidthRec_* %48, i64 7, i32 0
  store i32 %80, i32* %81, align 8
  %82 = getelementptr inbounds %struct.PSH_WidthRec_, %struct.PSH_WidthRec_* %48, i64 8
  %83 = getelementptr inbounds i16, i16* %49, i64 8
  %84 = add nsw i32 %50, -8
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %86, label %47

86:                                               ; preds = %47, %42
  %87 = load i8, i8* %18, align 4
  %88 = zext i8 %87 to i32
  %89 = add nuw nsw i32 %88, 1
  br label %90

90:                                               ; preds = %86, %9
  %91 = phi i32 [ %89, %86 ], [ 1, %9 ]
  %92 = bitcast i8* %12 to i32*
  store i32 %91, i32* %92, align 8
  %93 = getelementptr inbounds i8, i8* %6, i64 16
  %94 = getelementptr inbounds %struct.PS_PrivateRec_, %struct.PS_PrivateRec_* %1, i64 0, i32 14, i64 0
  %95 = load i16, i16* %94, align 2
  %96 = zext i16 %95 to i32
  %97 = bitcast i8* %93 to i32*
  store i32 %96, i32* %97, align 8
  %98 = getelementptr inbounds %struct.PS_PrivateRec_, %struct.PS_PrivateRec_* %1, i64 0, i32 16
  %99 = load i8, i8* %98, align 1
  %100 = icmp eq i8 %99, 0
  br i1 %100, label %170, label %101

101:                                              ; preds = %90
  %102 = zext i8 %99 to i32
  %103 = getelementptr inbounds %struct.PS_PrivateRec_, %struct.PS_PrivateRec_* %1, i64 0, i32 20, i64 0
  %104 = getelementptr inbounds i8, i8* %6, i64 40
  %105 = bitcast i8* %104 to %struct.PSH_WidthRec_*
  %106 = add nsw i32 %102, -1
  %107 = and i32 %102, 7
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %122, label %109

109:                                              ; preds = %101, %109
  %110 = phi %struct.PSH_WidthRec_* [ %117, %109 ], [ %105, %101 ]
  %111 = phi i16* [ %118, %109 ], [ %103, %101 ]
  %112 = phi i32 [ %119, %109 ], [ %102, %101 ]
  %113 = phi i32 [ %120, %109 ], [ %107, %101 ]
  %114 = load i16, i16* %111, align 2
  %115 = sext i16 %114 to i32
  %116 = getelementptr inbounds %struct.PSH_WidthRec_, %struct.PSH_WidthRec_* %110, i64 0, i32 0
  store i32 %115, i32* %116, align 8
  %117 = getelementptr inbounds %struct.PSH_WidthRec_, %struct.PSH_WidthRec_* %110, i64 1
  %118 = getelementptr inbounds i16, i16* %111, i64 1
  %119 = add nsw i32 %112, -1
  %120 = add i32 %113, -1
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %122, label %109, !llvm.loop !6

122:                                              ; preds = %109, %101
  %123 = phi %struct.PSH_WidthRec_* [ %105, %101 ], [ %117, %109 ]
  %124 = phi i16* [ %103, %101 ], [ %118, %109 ]
  %125 = phi i32 [ %102, %101 ], [ %119, %109 ]
  %126 = icmp ult i32 %106, 7
  br i1 %126, label %166, label %127

127:                                              ; preds = %122, %127
  %128 = phi %struct.PSH_WidthRec_* [ %162, %127 ], [ %123, %122 ]
  %129 = phi i16* [ %163, %127 ], [ %124, %122 ]
  %130 = phi i32 [ %164, %127 ], [ %125, %122 ]
  %131 = load i16, i16* %129, align 2
  %132 = sext i16 %131 to i32
  %133 = getelementptr inbounds %struct.PSH_WidthRec_, %struct.PSH_WidthRec_* %128, i64 0, i32 0
  store i32 %132, i32* %133, align 8
  %134 = getelementptr inbounds i16, i16* %129, i64 1
  %135 = load i16, i16* %134, align 2
  %136 = sext i16 %135 to i32
  %137 = getelementptr inbounds %struct.PSH_WidthRec_, %struct.PSH_WidthRec_* %128, i64 1, i32 0
  store i32 %136, i32* %137, align 8
  %138 = getelementptr inbounds i16, i16* %129, i64 2
  %139 = load i16, i16* %138, align 2
  %140 = sext i16 %139 to i32
  %141 = getelementptr inbounds %struct.PSH_WidthRec_, %struct.PSH_WidthRec_* %128, i64 2, i32 0
  store i32 %140, i32* %141, align 8
  %142 = getelementptr inbounds i16, i16* %129, i64 3
  %143 = load i16, i16* %142, align 2
  %144 = sext i16 %143 to i32
  %145 = getelementptr inbounds %struct.PSH_WidthRec_, %struct.PSH_WidthRec_* %128, i64 3, i32 0
  store i32 %144, i32* %145, align 8
  %146 = getelementptr inbounds i16, i16* %129, i64 4
  %147 = load i16, i16* %146, align 2
  %148 = sext i16 %147 to i32
  %149 = getelementptr inbounds %struct.PSH_WidthRec_, %struct.PSH_WidthRec_* %128, i64 4, i32 0
  store i32 %148, i32* %149, align 8
  %150 = getelementptr inbounds i16, i16* %129, i64 5
  %151 = load i16, i16* %150, align 2
  %152 = sext i16 %151 to i32
  %153 = getelementptr inbounds %struct.PSH_WidthRec_, %struct.PSH_WidthRec_* %128, i64 5, i32 0
  store i32 %152, i32* %153, align 8
  %154 = getelementptr inbounds i16, i16* %129, i64 6
  %155 = load i16, i16* %154, align 2
  %156 = sext i16 %155 to i32
  %157 = getelementptr inbounds %struct.PSH_WidthRec_, %struct.PSH_WidthRec_* %128, i64 6, i32 0
  store i32 %156, i32* %157, align 8
  %158 = getelementptr inbounds i16, i16* %129, i64 7
  %159 = load i16, i16* %158, align 2
  %160 = sext i16 %159 to i32
  %161 = getelementptr inbounds %struct.PSH_WidthRec_, %struct.PSH_WidthRec_* %128, i64 7, i32 0
  store i32 %160, i32* %161, align 8
  %162 = getelementptr inbounds %struct.PSH_WidthRec_, %struct.PSH_WidthRec_* %128, i64 8
  %163 = getelementptr inbounds i16, i16* %129, i64 8
  %164 = add nsw i32 %130, -8
  %165 = icmp eq i32 %164, 0
  br i1 %165, label %166, label %127

166:                                              ; preds = %127, %122
  %167 = load i8, i8* %98, align 1
  %168 = zext i8 %167 to i32
  %169 = add nuw nsw i32 %168, 1
  br label %170

170:                                              ; preds = %166, %90
  %171 = phi i32 [ %169, %166 ], [ 1, %90 ]
  %172 = bitcast i8* %11 to i32*
  store i32 %171, i32* %172, align 8
  %173 = getelementptr inbounds i8, i8* %6, i64 824
  %174 = bitcast i8* %173 to %struct.PSH_BluesRec_*
  %175 = getelementptr inbounds %struct.PS_PrivateRec_, %struct.PS_PrivateRec_* %1, i64 0, i32 2
  %176 = load i8, i8* %175, align 8
  %177 = zext i8 %176 to i32
  %178 = getelementptr inbounds %struct.PS_PrivateRec_, %struct.PS_PrivateRec_* %1, i64 0, i32 6, i64 0
  %179 = getelementptr inbounds %struct.PS_PrivateRec_, %struct.PS_PrivateRec_* %1, i64 0, i32 3
  %180 = load i8, i8* %179, align 1
  %181 = zext i8 %180 to i32
  %182 = getelementptr inbounds %struct.PS_PrivateRec_, %struct.PS_PrivateRec_* %1, i64 0, i32 7, i64 0
  %183 = getelementptr inbounds %struct.PS_PrivateRec_, %struct.PS_PrivateRec_* %1, i64 0, i32 12
  %184 = load i32, i32* %183, align 4
  call fastcc void @psh_blues_set_zones(%struct.PSH_BluesRec_* %174, i32 %177, i16* %178, i32 %181, i16* %182, i32 %184, i32 0)
  %185 = getelementptr inbounds %struct.PS_PrivateRec_, %struct.PS_PrivateRec_* %1, i64 0, i32 4
  %186 = load i8, i8* %185, align 2
  %187 = zext i8 %186 to i32
  %188 = getelementptr inbounds %struct.PS_PrivateRec_, %struct.PS_PrivateRec_* %1, i64 0, i32 8, i64 0
  %189 = getelementptr inbounds %struct.PS_PrivateRec_, %struct.PS_PrivateRec_* %1, i64 0, i32 5
  %190 = load i8, i8* %189, align 1
  %191 = zext i8 %190 to i32
  %192 = getelementptr inbounds %struct.PS_PrivateRec_, %struct.PS_PrivateRec_* %1, i64 0, i32 9, i64 0
  %193 = load i32, i32* %183, align 4
  call fastcc void @psh_blues_set_zones(%struct.PSH_BluesRec_* %174, i32 %187, i16* %188, i32 %191, i16* %192, i32 %193, i32 1)
  %194 = load i8, i8* %175, align 8
  %195 = icmp eq i8 %194, 0
  br i1 %195, label %262, label %196

196:                                              ; preds = %170
  %197 = zext i8 %194 to i64
  %198 = add nsw i64 %197, -1
  %199 = lshr i64 %198, 1
  %200 = add nuw i64 %199, 1
  %201 = icmp ult i64 %200, 16
  br i1 %201, label %246, label %202

202:                                              ; preds = %196
  %203 = and i64 %200, -16
  %204 = shl i64 %203, 1
  br label %205

205:                                              ; preds = %205, %202
  %206 = phi i64 [ 0, %202 ], [ %230, %205 ]
  %207 = phi <8 x i16> [ <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>, %202 ], [ %228, %205 ]
  %208 = phi <8 x i16> [ <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>, %202 ], [ %229, %205 ]
  %209 = shl i64 %206, 1
  %210 = or i64 %209, 1
  %211 = or i64 %209, 17
  %212 = getelementptr inbounds %struct.PS_PrivateRec_, %struct.PS_PrivateRec_* %1, i64 0, i32 6, i64 %210
  %213 = getelementptr inbounds %struct.PS_PrivateRec_, %struct.PS_PrivateRec_* %1, i64 0, i32 6, i64 %211
  %214 = getelementptr inbounds i16, i16* %212, i64 -1
  %215 = bitcast i16* %214 to <16 x i16>*
  %216 = getelementptr inbounds i16, i16* %213, i64 -1
  %217 = bitcast i16* %216 to <16 x i16>*
  %218 = load <16 x i16>, <16 x i16>* %215, align 2
  %219 = load <16 x i16>, <16 x i16>* %217, align 2
  %220 = shufflevector <16 x i16> %218, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %221 = shufflevector <16 x i16> %219, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %222 = shufflevector <16 x i16> %218, <16 x i16> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %223 = shufflevector <16 x i16> %219, <16 x i16> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %224 = sub <8 x i16> %222, %220
  %225 = sub <8 x i16> %223, %221
  %226 = icmp sgt <8 x i16> %224, %207
  %227 = icmp sgt <8 x i16> %225, %208
  %228 = select <8 x i1> %226, <8 x i16> %224, <8 x i16> %207
  %229 = select <8 x i1> %227, <8 x i16> %225, <8 x i16> %208
  %230 = add i64 %206, 16
  %231 = icmp eq i64 %230, %203
  br i1 %231, label %232, label %205, !llvm.loop !7

232:                                              ; preds = %205
  %233 = icmp sgt <8 x i16> %228, %229
  %234 = select <8 x i1> %233, <8 x i16> %228, <8 x i16> %229
  %235 = shufflevector <8 x i16> %234, <8 x i16> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %236 = icmp sgt <8 x i16> %234, %235
  %237 = select <8 x i1> %236, <8 x i16> %234, <8 x i16> %235
  %238 = shufflevector <8 x i16> %237, <8 x i16> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %239 = icmp sgt <8 x i16> %237, %238
  %240 = select <8 x i1> %239, <8 x i16> %237, <8 x i16> %238
  %241 = shufflevector <8 x i16> %240, <8 x i16> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %242 = icmp sgt <8 x i16> %240, %241
  %243 = select <8 x i1> %242, <8 x i16> %240, <8 x i16> %241
  %244 = extractelement <8 x i16> %243, i32 0
  %245 = icmp eq i64 %200, %203
  br i1 %245, label %262, label %246

246:                                              ; preds = %232, %196
  %247 = phi i64 [ 0, %196 ], [ %204, %232 ]
  %248 = phi i16 [ 1, %196 ], [ %244, %232 ]
  br label %249

249:                                              ; preds = %246, %249
  %250 = phi i64 [ %260, %249 ], [ %247, %246 ]
  %251 = phi i16 [ %259, %249 ], [ %248, %246 ]
  %252 = or i64 %250, 1
  %253 = getelementptr inbounds %struct.PS_PrivateRec_, %struct.PS_PrivateRec_* %1, i64 0, i32 6, i64 %252
  %254 = load i16, i16* %253, align 2
  %255 = getelementptr inbounds %struct.PS_PrivateRec_, %struct.PS_PrivateRec_* %1, i64 0, i32 6, i64 %250
  %256 = load i16, i16* %255, align 2
  %257 = sub i16 %254, %256
  %258 = icmp sgt i16 %257, %251
  %259 = select i1 %258, i16 %257, i16 %251
  %260 = add nuw nsw i64 %250, 2
  %261 = icmp ult i64 %260, %197
  br i1 %261, label %249, label %262, !llvm.loop !9

262:                                              ; preds = %249, %232, %170
  %263 = phi i16 [ 1, %170 ], [ %244, %232 ], [ %259, %249 ]
  %264 = load i8, i8* %179, align 1
  %265 = icmp eq i8 %264, 0
  br i1 %265, label %334, label %266

266:                                              ; preds = %262
  %267 = zext i8 %264 to i64
  %268 = add nsw i64 %267, -1
  %269 = lshr i64 %268, 1
  %270 = add nuw i64 %269, 1
  %271 = icmp ult i64 %270, 16
  br i1 %271, label %318, label %272

272:                                              ; preds = %266
  %273 = and i64 %270, -16
  %274 = shl i64 %273, 1
  %275 = insertelement <8 x i16> undef, i16 %263, i32 0
  %276 = shufflevector <8 x i16> %275, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %277

277:                                              ; preds = %277, %272
  %278 = phi i64 [ 0, %272 ], [ %302, %277 ]
  %279 = phi <8 x i16> [ %276, %272 ], [ %300, %277 ]
  %280 = phi <8 x i16> [ %276, %272 ], [ %301, %277 ]
  %281 = shl i64 %278, 1
  %282 = or i64 %281, 1
  %283 = or i64 %281, 17
  %284 = getelementptr inbounds %struct.PS_PrivateRec_, %struct.PS_PrivateRec_* %1, i64 0, i32 7, i64 %282
  %285 = getelementptr inbounds %struct.PS_PrivateRec_, %struct.PS_PrivateRec_* %1, i64 0, i32 7, i64 %283
  %286 = getelementptr inbounds i16, i16* %284, i64 -1
  %287 = bitcast i16* %286 to <16 x i16>*
  %288 = getelementptr inbounds i16, i16* %285, i64 -1
  %289 = bitcast i16* %288 to <16 x i16>*
  %290 = load <16 x i16>, <16 x i16>* %287, align 2
  %291 = load <16 x i16>, <16 x i16>* %289, align 2
  %292 = shufflevector <16 x i16> %290, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %293 = shufflevector <16 x i16> %291, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %294 = shufflevector <16 x i16> %290, <16 x i16> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %295 = shufflevector <16 x i16> %291, <16 x i16> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %296 = sub <8 x i16> %294, %292
  %297 = sub <8 x i16> %295, %293
  %298 = icmp sgt <8 x i16> %296, %279
  %299 = icmp sgt <8 x i16> %297, %280
  %300 = select <8 x i1> %298, <8 x i16> %296, <8 x i16> %279
  %301 = select <8 x i1> %299, <8 x i16> %297, <8 x i16> %280
  %302 = add i64 %278, 16
  %303 = icmp eq i64 %302, %273
  br i1 %303, label %304, label %277, !llvm.loop !11

304:                                              ; preds = %277
  %305 = icmp sgt <8 x i16> %300, %301
  %306 = select <8 x i1> %305, <8 x i16> %300, <8 x i16> %301
  %307 = shufflevector <8 x i16> %306, <8 x i16> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %308 = icmp sgt <8 x i16> %306, %307
  %309 = select <8 x i1> %308, <8 x i16> %306, <8 x i16> %307
  %310 = shufflevector <8 x i16> %309, <8 x i16> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %311 = icmp sgt <8 x i16> %309, %310
  %312 = select <8 x i1> %311, <8 x i16> %309, <8 x i16> %310
  %313 = shufflevector <8 x i16> %312, <8 x i16> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %314 = icmp sgt <8 x i16> %312, %313
  %315 = select <8 x i1> %314, <8 x i16> %312, <8 x i16> %313
  %316 = extractelement <8 x i16> %315, i32 0
  %317 = icmp eq i64 %270, %273
  br i1 %317, label %334, label %318

318:                                              ; preds = %304, %266
  %319 = phi i64 [ 0, %266 ], [ %274, %304 ]
  %320 = phi i16 [ %263, %266 ], [ %316, %304 ]
  br label %321

321:                                              ; preds = %318, %321
  %322 = phi i64 [ %332, %321 ], [ %319, %318 ]
  %323 = phi i16 [ %331, %321 ], [ %320, %318 ]
  %324 = or i64 %322, 1
  %325 = getelementptr inbounds %struct.PS_PrivateRec_, %struct.PS_PrivateRec_* %1, i64 0, i32 7, i64 %324
  %326 = load i16, i16* %325, align 2
  %327 = getelementptr inbounds %struct.PS_PrivateRec_, %struct.PS_PrivateRec_* %1, i64 0, i32 7, i64 %322
  %328 = load i16, i16* %327, align 2
  %329 = sub i16 %326, %328
  %330 = icmp sgt i16 %329, %323
  %331 = select i1 %330, i16 %329, i16 %323
  %332 = add nuw nsw i64 %322, 2
  %333 = icmp ult i64 %332, %267
  br i1 %333, label %321, label %334, !llvm.loop !12

334:                                              ; preds = %321, %304, %262
  %335 = phi i16 [ %263, %262 ], [ %316, %304 ], [ %331, %321 ]
  %336 = load i8, i8* %185, align 2
  %337 = icmp eq i8 %336, 0
  br i1 %337, label %406, label %338

338:                                              ; preds = %334
  %339 = zext i8 %336 to i64
  %340 = add nsw i64 %339, -1
  %341 = lshr i64 %340, 1
  %342 = add nuw i64 %341, 1
  %343 = icmp ult i64 %342, 16
  br i1 %343, label %390, label %344

344:                                              ; preds = %338
  %345 = and i64 %342, -16
  %346 = shl i64 %345, 1
  %347 = insertelement <8 x i16> undef, i16 %335, i32 0
  %348 = shufflevector <8 x i16> %347, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %349

349:                                              ; preds = %349, %344
  %350 = phi i64 [ 0, %344 ], [ %374, %349 ]
  %351 = phi <8 x i16> [ %348, %344 ], [ %372, %349 ]
  %352 = phi <8 x i16> [ %348, %344 ], [ %373, %349 ]
  %353 = shl i64 %350, 1
  %354 = or i64 %353, 1
  %355 = or i64 %353, 17
  %356 = getelementptr inbounds %struct.PS_PrivateRec_, %struct.PS_PrivateRec_* %1, i64 0, i32 8, i64 %354
  %357 = getelementptr inbounds %struct.PS_PrivateRec_, %struct.PS_PrivateRec_* %1, i64 0, i32 8, i64 %355
  %358 = getelementptr inbounds i16, i16* %356, i64 -1
  %359 = bitcast i16* %358 to <16 x i16>*
  %360 = getelementptr inbounds i16, i16* %357, i64 -1
  %361 = bitcast i16* %360 to <16 x i16>*
  %362 = load <16 x i16>, <16 x i16>* %359, align 2
  %363 = load <16 x i16>, <16 x i16>* %361, align 2
  %364 = shufflevector <16 x i16> %362, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %365 = shufflevector <16 x i16> %363, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %366 = shufflevector <16 x i16> %362, <16 x i16> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %367 = shufflevector <16 x i16> %363, <16 x i16> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %368 = sub <8 x i16> %366, %364
  %369 = sub <8 x i16> %367, %365
  %370 = icmp sgt <8 x i16> %368, %351
  %371 = icmp sgt <8 x i16> %369, %352
  %372 = select <8 x i1> %370, <8 x i16> %368, <8 x i16> %351
  %373 = select <8 x i1> %371, <8 x i16> %369, <8 x i16> %352
  %374 = add i64 %350, 16
  %375 = icmp eq i64 %374, %345
  br i1 %375, label %376, label %349, !llvm.loop !13

376:                                              ; preds = %349
  %377 = icmp sgt <8 x i16> %372, %373
  %378 = select <8 x i1> %377, <8 x i16> %372, <8 x i16> %373
  %379 = shufflevector <8 x i16> %378, <8 x i16> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %380 = icmp sgt <8 x i16> %378, %379
  %381 = select <8 x i1> %380, <8 x i16> %378, <8 x i16> %379
  %382 = shufflevector <8 x i16> %381, <8 x i16> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %383 = icmp sgt <8 x i16> %381, %382
  %384 = select <8 x i1> %383, <8 x i16> %381, <8 x i16> %382
  %385 = shufflevector <8 x i16> %384, <8 x i16> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %386 = icmp sgt <8 x i16> %384, %385
  %387 = select <8 x i1> %386, <8 x i16> %384, <8 x i16> %385
  %388 = extractelement <8 x i16> %387, i32 0
  %389 = icmp eq i64 %342, %345
  br i1 %389, label %406, label %390

390:                                              ; preds = %376, %338
  %391 = phi i64 [ 0, %338 ], [ %346, %376 ]
  %392 = phi i16 [ %335, %338 ], [ %388, %376 ]
  br label %393

393:                                              ; preds = %390, %393
  %394 = phi i64 [ %404, %393 ], [ %391, %390 ]
  %395 = phi i16 [ %403, %393 ], [ %392, %390 ]
  %396 = or i64 %394, 1
  %397 = getelementptr inbounds %struct.PS_PrivateRec_, %struct.PS_PrivateRec_* %1, i64 0, i32 8, i64 %396
  %398 = load i16, i16* %397, align 2
  %399 = getelementptr inbounds %struct.PS_PrivateRec_, %struct.PS_PrivateRec_* %1, i64 0, i32 8, i64 %394
  %400 = load i16, i16* %399, align 2
  %401 = sub i16 %398, %400
  %402 = icmp sgt i16 %401, %395
  %403 = select i1 %402, i16 %401, i16 %395
  %404 = add nuw nsw i64 %394, 2
  %405 = icmp ult i64 %404, %339
  br i1 %405, label %393, label %406, !llvm.loop !14

406:                                              ; preds = %393, %376, %334
  %407 = phi i16 [ %335, %334 ], [ %388, %376 ], [ %403, %393 ]
  %408 = load i8, i8* %189, align 1
  %409 = icmp eq i8 %408, 0
  br i1 %409, label %478, label %410

410:                                              ; preds = %406
  %411 = zext i8 %408 to i64
  %412 = add nsw i64 %411, -1
  %413 = lshr i64 %412, 1
  %414 = add nuw i64 %413, 1
  %415 = icmp ult i64 %414, 16
  br i1 %415, label %462, label %416

416:                                              ; preds = %410
  %417 = and i64 %414, -16
  %418 = shl i64 %417, 1
  %419 = insertelement <8 x i16> undef, i16 %407, i32 0
  %420 = shufflevector <8 x i16> %419, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %421

421:                                              ; preds = %421, %416
  %422 = phi i64 [ 0, %416 ], [ %446, %421 ]
  %423 = phi <8 x i16> [ %420, %416 ], [ %444, %421 ]
  %424 = phi <8 x i16> [ %420, %416 ], [ %445, %421 ]
  %425 = shl i64 %422, 1
  %426 = or i64 %425, 1
  %427 = or i64 %425, 17
  %428 = getelementptr inbounds %struct.PS_PrivateRec_, %struct.PS_PrivateRec_* %1, i64 0, i32 9, i64 %426
  %429 = getelementptr inbounds %struct.PS_PrivateRec_, %struct.PS_PrivateRec_* %1, i64 0, i32 9, i64 %427
  %430 = getelementptr inbounds i16, i16* %428, i64 -1
  %431 = bitcast i16* %430 to <16 x i16>*
  %432 = getelementptr inbounds i16, i16* %429, i64 -1
  %433 = bitcast i16* %432 to <16 x i16>*
  %434 = load <16 x i16>, <16 x i16>* %431, align 2
  %435 = load <16 x i16>, <16 x i16>* %433, align 2
  %436 = shufflevector <16 x i16> %434, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %437 = shufflevector <16 x i16> %435, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %438 = shufflevector <16 x i16> %434, <16 x i16> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %439 = shufflevector <16 x i16> %435, <16 x i16> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %440 = sub <8 x i16> %438, %436
  %441 = sub <8 x i16> %439, %437
  %442 = icmp sgt <8 x i16> %440, %423
  %443 = icmp sgt <8 x i16> %441, %424
  %444 = select <8 x i1> %442, <8 x i16> %440, <8 x i16> %423
  %445 = select <8 x i1> %443, <8 x i16> %441, <8 x i16> %424
  %446 = add i64 %422, 16
  %447 = icmp eq i64 %446, %417
  br i1 %447, label %448, label %421, !llvm.loop !15

448:                                              ; preds = %421
  %449 = icmp sgt <8 x i16> %444, %445
  %450 = select <8 x i1> %449, <8 x i16> %444, <8 x i16> %445
  %451 = shufflevector <8 x i16> %450, <8 x i16> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %452 = icmp sgt <8 x i16> %450, %451
  %453 = select <8 x i1> %452, <8 x i16> %450, <8 x i16> %451
  %454 = shufflevector <8 x i16> %453, <8 x i16> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %455 = icmp sgt <8 x i16> %453, %454
  %456 = select <8 x i1> %455, <8 x i16> %453, <8 x i16> %454
  %457 = shufflevector <8 x i16> %456, <8 x i16> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %458 = icmp sgt <8 x i16> %456, %457
  %459 = select <8 x i1> %458, <8 x i16> %456, <8 x i16> %457
  %460 = extractelement <8 x i16> %459, i32 0
  %461 = icmp eq i64 %414, %417
  br i1 %461, label %478, label %462

462:                                              ; preds = %448, %410
  %463 = phi i64 [ 0, %410 ], [ %418, %448 ]
  %464 = phi i16 [ %407, %410 ], [ %460, %448 ]
  br label %465

465:                                              ; preds = %462, %465
  %466 = phi i64 [ %476, %465 ], [ %463, %462 ]
  %467 = phi i16 [ %475, %465 ], [ %464, %462 ]
  %468 = or i64 %466, 1
  %469 = getelementptr inbounds %struct.PS_PrivateRec_, %struct.PS_PrivateRec_* %1, i64 0, i32 9, i64 %468
  %470 = load i16, i16* %469, align 2
  %471 = getelementptr inbounds %struct.PS_PrivateRec_, %struct.PS_PrivateRec_* %1, i64 0, i32 9, i64 %466
  %472 = load i16, i16* %471, align 2
  %473 = sub i16 %470, %472
  %474 = icmp sgt i16 %473, %467
  %475 = select i1 %474, i16 %473, i16 %467
  %476 = add nuw nsw i64 %466, 2
  %477 = icmp ult i64 %476, %411
  br i1 %477, label %465, label %478, !llvm.loop !16

478:                                              ; preds = %465, %448, %406
  %479 = phi i16 [ %407, %406 ], [ %460, %448 ], [ %475, %465 ]
  %480 = sext i16 %479 to i64
  %481 = call i64 @FT_DivFix(i64 1000, i64 %480) #6
  %482 = getelementptr inbounds %struct.PS_PrivateRec_, %struct.PS_PrivateRec_* %1, i64 0, i32 10
  %483 = load i64, i64* %482, align 8
  %484 = icmp slt i64 %483, %481
  %485 = select i1 %484, i64 %483, i64 %481
  %486 = getelementptr inbounds i8, i8* %6, i64 3928
  %487 = bitcast i8* %486 to i64*
  store i64 %485, i64* %487, align 8
  %488 = getelementptr inbounds %struct.PS_PrivateRec_, %struct.PS_PrivateRec_* %1, i64 0, i32 11
  %489 = load i32, i32* %488, align 8
  %490 = getelementptr inbounds i8, i8* %6, i64 3936
  %491 = bitcast i8* %490 to i32*
  store i32 %489, i32* %491, align 8
  %492 = load i32, i32* %183, align 4
  %493 = getelementptr inbounds i8, i8* %6, i64 3944
  %494 = bitcast i8* %493 to i32*
  store i32 %492, i32* %494, align 8
  %495 = getelementptr inbounds i8, i8* %6, i64 400
  %496 = getelementptr inbounds i8, i8* %6, i64 808
  call void @llvm.memset.p0i8.i64(i8* align 8 %495, i8 0, i64 16, i1 false)
  call void @llvm.memset.p0i8.i64(i8* align 8 %496, i8 0, i64 16, i1 false)
  %497 = load i32, i32* %4, align 4
  br label %498

498:                                              ; preds = %3, %478
  %499 = phi i32 [ %7, %3 ], [ %497, %478 ]
  %500 = bitcast %struct.PSH_GlobalsRec_** %2 to i8**
  store i8* %6, i8** %500, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #6
  ret i32 %499
}

; Function Attrs: nounwind ssp uwtable
define internal void @psh_globals_destroy(%struct.PSH_GlobalsRec_*) #0 {
  %2 = icmp eq %struct.PSH_GlobalsRec_* %0, null
  br i1 %2, label %13, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %0, i64 0, i32 0
  %5 = load %struct.FT_MemoryRec_*, %struct.FT_MemoryRec_** %4, align 8
  %6 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %0, i64 0, i32 1, i64 0, i32 0, i32 0
  store i32 0, i32* %6, align 8
  %7 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %0, i64 0, i32 1, i64 1, i32 0, i32 0
  store i32 0, i32* %7, align 8
  %8 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %0, i64 0, i32 2, i32 0, i32 0
  store i32 0, i32* %8, align 8
  %9 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %0, i64 0, i32 2, i32 1, i32 0
  store i32 0, i32* %9, align 8
  %10 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %0, i64 0, i32 2, i32 2, i32 0
  store i32 0, i32* %10, align 8
  %11 = getelementptr inbounds %struct.PSH_GlobalsRec_, %struct.PSH_GlobalsRec_* %0, i64 0, i32 2, i32 3, i32 0
  store i32 0, i32* %11, align 8
  %12 = bitcast %struct.PSH_GlobalsRec_* %0 to i8*
  tail call void @ft_mem_free(%struct.FT_MemoryRec_* %5, i8* nonnull %12) #6
  br label %13

13:                                               ; preds = %1, %3
  ret void
}

declare hidden i8* @ft_mem_alloc(%struct.FT_MemoryRec_*, i64, i32*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @psh_blues_set_zones(%struct.PSH_BluesRec_* nocapture, i32, i16* nocapture readonly, i32, i16* nocapture readonly, i32, i32) unnamed_addr #0 {
  %8 = icmp eq i32 %6, 0
  %9 = getelementptr inbounds %struct.PSH_BluesRec_, %struct.PSH_BluesRec_* %0, i64 0, i32 2
  %10 = getelementptr inbounds %struct.PSH_BluesRec_, %struct.PSH_BluesRec_* %0, i64 0, i32 3
  %11 = getelementptr inbounds %struct.PSH_BluesRec_, %struct.PSH_BluesRec_* %0, i64 0, i32 0
  %12 = getelementptr inbounds %struct.PSH_BluesRec_, %struct.PSH_BluesRec_* %0, i64 0, i32 1
  %13 = select i1 %8, %struct.PSH_Blue_TableRec_* %11, %struct.PSH_Blue_TableRec_* %9
  %14 = select i1 %8, %struct.PSH_Blue_TableRec_* %12, %struct.PSH_Blue_TableRec_* %10
  %15 = getelementptr inbounds %struct.PSH_Blue_TableRec_, %struct.PSH_Blue_TableRec_* %13, i64 0, i32 0
  store i32 0, i32* %15, align 8
  %16 = getelementptr inbounds %struct.PSH_Blue_TableRec_, %struct.PSH_Blue_TableRec_* %14, i64 0, i32 0
  store i32 0, i32* %16, align 8
  %17 = icmp ugt i32 %1, 1
  br i1 %17, label %18, label %113

18:                                               ; preds = %7, %107
  %19 = phi i32 [ %111, %107 ], [ %1, %7 ]
  %20 = phi i16* [ %110, %107 ], [ %2, %7 ]
  %21 = phi i1 [ true, %107 ], [ false, %7 ]
  %22 = phi i32 [ %109, %107 ], [ 0, %7 ]
  %23 = phi i32 [ %108, %107 ], [ 0, %7 ]
  br i1 %21, label %28, label %24

24:                                               ; preds = %18
  %25 = getelementptr inbounds i16, i16* %20, i64 1
  %26 = load i16, i16* %25, align 2
  %27 = sext i16 %26 to i32
  br label %32

28:                                               ; preds = %18
  %29 = load i16, i16* %20, align 2
  %30 = sext i16 %29 to i32
  %31 = getelementptr inbounds i16, i16* %20, i64 1
  br label %32

32:                                               ; preds = %28, %24
  %33 = phi i16* [ %31, %28 ], [ %20, %24 ]
  %34 = phi i32 [ %30, %28 ], [ %27, %24 ]
  %35 = phi i32 [ %23, %28 ], [ %22, %24 ]
  %36 = phi %struct.PSH_Blue_TableRec_* [ %13, %28 ], [ %14, %24 ]
  %37 = phi i8 [ 1, %28 ], [ 0, %24 ]
  %38 = load i16, i16* %33, align 2
  %39 = sext i16 %38 to i32
  %40 = sub nsw i32 %39, %34
  %41 = getelementptr inbounds %struct.PSH_Blue_TableRec_, %struct.PSH_Blue_TableRec_* %36, i64 0, i32 1, i64 0
  %42 = icmp eq i32 %35, 0
  br i1 %42, label %98, label %43

43:                                               ; preds = %32, %61
  %44 = phi %struct.PSH_Blue_ZoneRec_* [ %63, %61 ], [ %41, %32 ]
  %45 = phi i32 [ %62, %61 ], [ %35, %32 ]
  %46 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %44, i64 0, i32 0
  %47 = load i32, i32* %46, align 8
  %48 = icmp slt i32 %34, %47
  br i1 %48, label %65, label %49

49:                                               ; preds = %43
  %50 = icmp eq i32 %34, %47
  br i1 %50, label %51, label %61

51:                                               ; preds = %49
  %52 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %44, i64 0, i32 1
  %53 = load i32, i32* %52, align 4
  %54 = icmp slt i32 %40, 0
  br i1 %54, label %55, label %58

55:                                               ; preds = %51
  %56 = icmp slt i32 %40, %53
  br i1 %56, label %57, label %107

57:                                               ; preds = %55
  store i32 %40, i32* %52, align 4
  br label %107

58:                                               ; preds = %51
  %59 = icmp sgt i32 %40, %53
  br i1 %59, label %60, label %107

60:                                               ; preds = %58
  store i32 %40, i32* %52, align 4
  br label %107

61:                                               ; preds = %49
  %62 = add i32 %45, -1
  %63 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %44, i64 1
  %64 = icmp eq i32 %62, 0
  br i1 %64, label %98, label %43

65:                                               ; preds = %43
  %66 = zext i32 %45 to i64
  %67 = and i32 %45, 1
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %77, label %69

69:                                               ; preds = %65
  %70 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %44, i64 %66
  %71 = add i32 %45, -1
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %44, i64 %72
  %74 = bitcast %struct.PSH_Blue_ZoneRec_* %70 to i8*
  %75 = bitcast %struct.PSH_Blue_ZoneRec_* %73 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %74, i8* align 8 %75, i64 48, i1 false) #6
  %76 = add nsw i64 %66, -1
  br label %77

77:                                               ; preds = %69, %65
  %78 = phi i64 [ %76, %69 ], [ %66, %65 ]
  %79 = icmp eq i32 %45, 1
  br i1 %79, label %98, label %80

80:                                               ; preds = %77, %80
  %81 = phi i64 [ %97, %80 ], [ %78, %77 ]
  %82 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %44, i64 %81
  %83 = add i64 %81, 4294967295
  %84 = and i64 %83, 4294967295
  %85 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %44, i64 %84
  %86 = bitcast %struct.PSH_Blue_ZoneRec_* %82 to i8*
  %87 = bitcast %struct.PSH_Blue_ZoneRec_* %85 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %86, i8* align 8 %87, i64 48, i1 false) #6
  %88 = add nsw i64 %81, -1
  %89 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %44, i64 %88
  %90 = trunc i64 %88 to i32
  %91 = add i32 %90, -1
  %92 = zext i32 %91 to i64
  %93 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %44, i64 %92
  %94 = bitcast %struct.PSH_Blue_ZoneRec_* %89 to i8*
  %95 = bitcast %struct.PSH_Blue_ZoneRec_* %93 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %94, i8* align 8 %95, i64 48, i1 false) #6
  %96 = icmp eq i32 %91, 0
  %97 = add nsw i64 %81, -2
  br i1 %96, label %98, label %80

98:                                               ; preds = %61, %77, %80, %32
  %99 = phi %struct.PSH_Blue_ZoneRec_* [ %41, %32 ], [ %44, %80 ], [ %44, %77 ], [ %63, %61 ]
  %100 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %99, i64 0, i32 0
  store i32 %34, i32* %100, align 8
  %101 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %99, i64 0, i32 1
  store i32 %40, i32* %101, align 4
  %102 = icmp eq i8 %37, 0
  br i1 %102, label %105, label %103

103:                                              ; preds = %98
  %104 = add i32 %23, 1
  br label %107

105:                                              ; preds = %98
  %106 = add i32 %22, 1
  br label %107

107:                                              ; preds = %105, %103, %60, %58, %57, %55
  %108 = phi i32 [ %104, %103 ], [ %23, %105 ], [ %23, %58 ], [ %23, %60 ], [ %23, %55 ], [ %23, %57 ]
  %109 = phi i32 [ %22, %103 ], [ %106, %105 ], [ %22, %58 ], [ %22, %60 ], [ %22, %55 ], [ %22, %57 ]
  %110 = getelementptr inbounds i16, i16* %20, i64 2
  %111 = add i32 %19, -2
  %112 = icmp ugt i32 %111, 1
  br i1 %112, label %18, label %113

113:                                              ; preds = %107, %7
  %114 = phi i32 [ 0, %7 ], [ %108, %107 ]
  %115 = phi i32 [ 0, %7 ], [ %109, %107 ]
  store i32 %114, i32* %15, align 8
  store i32 %115, i32* %16, align 8
  %116 = icmp ugt i32 %3, 1
  br i1 %116, label %117, label %195

117:                                              ; preds = %113
  %118 = getelementptr inbounds %struct.PSH_Blue_TableRec_, %struct.PSH_Blue_TableRec_* %14, i64 0, i32 1, i64 0
  br label %119

119:                                              ; preds = %117, %190
  %120 = phi i32 [ %193, %190 ], [ %3, %117 ]
  %121 = phi i16* [ %192, %190 ], [ %4, %117 ]
  %122 = phi i32 [ %191, %190 ], [ %115, %117 ]
  %123 = getelementptr inbounds i16, i16* %121, i64 1
  %124 = load i16, i16* %123, align 2
  %125 = sext i16 %124 to i32
  %126 = load i16, i16* %121, align 2
  %127 = sext i16 %126 to i32
  %128 = sub nsw i32 %127, %125
  %129 = icmp eq i32 %122, 0
  br i1 %129, label %185, label %130

130:                                              ; preds = %119, %148
  %131 = phi %struct.PSH_Blue_ZoneRec_* [ %150, %148 ], [ %118, %119 ]
  %132 = phi i32 [ %149, %148 ], [ %122, %119 ]
  %133 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %131, i64 0, i32 0
  %134 = load i32, i32* %133, align 8
  %135 = icmp sgt i32 %134, %125
  br i1 %135, label %152, label %136

136:                                              ; preds = %130
  %137 = icmp eq i32 %134, %125
  br i1 %137, label %138, label %148

138:                                              ; preds = %136
  %139 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %131, i64 0, i32 1
  %140 = load i32, i32* %139, align 4
  %141 = icmp slt i32 %128, 0
  br i1 %141, label %142, label %145

142:                                              ; preds = %138
  %143 = icmp slt i32 %128, %140
  br i1 %143, label %144, label %190

144:                                              ; preds = %142
  store i32 %128, i32* %139, align 4
  br label %190

145:                                              ; preds = %138
  %146 = icmp sgt i32 %128, %140
  br i1 %146, label %147, label %190

147:                                              ; preds = %145
  store i32 %128, i32* %139, align 4
  br label %190

148:                                              ; preds = %136
  %149 = add i32 %132, -1
  %150 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %131, i64 1
  %151 = icmp eq i32 %149, 0
  br i1 %151, label %185, label %130

152:                                              ; preds = %130
  %153 = zext i32 %132 to i64
  %154 = and i32 %132, 1
  %155 = icmp eq i32 %154, 0
  br i1 %155, label %164, label %156

156:                                              ; preds = %152
  %157 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %131, i64 %153
  %158 = add i32 %132, -1
  %159 = zext i32 %158 to i64
  %160 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %131, i64 %159
  %161 = bitcast %struct.PSH_Blue_ZoneRec_* %157 to i8*
  %162 = bitcast %struct.PSH_Blue_ZoneRec_* %160 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %161, i8* align 8 %162, i64 48, i1 false) #6
  %163 = add nsw i64 %153, -1
  br label %164

164:                                              ; preds = %156, %152
  %165 = phi i64 [ %163, %156 ], [ %153, %152 ]
  %166 = icmp eq i32 %132, 1
  br i1 %166, label %185, label %167

167:                                              ; preds = %164, %167
  %168 = phi i64 [ %184, %167 ], [ %165, %164 ]
  %169 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %131, i64 %168
  %170 = add i64 %168, 4294967295
  %171 = and i64 %170, 4294967295
  %172 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %131, i64 %171
  %173 = bitcast %struct.PSH_Blue_ZoneRec_* %169 to i8*
  %174 = bitcast %struct.PSH_Blue_ZoneRec_* %172 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %173, i8* align 8 %174, i64 48, i1 false) #6
  %175 = add nsw i64 %168, -1
  %176 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %131, i64 %175
  %177 = trunc i64 %175 to i32
  %178 = add i32 %177, -1
  %179 = zext i32 %178 to i64
  %180 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %131, i64 %179
  %181 = bitcast %struct.PSH_Blue_ZoneRec_* %176 to i8*
  %182 = bitcast %struct.PSH_Blue_ZoneRec_* %180 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %181, i8* align 8 %182, i64 48, i1 false) #6
  %183 = icmp eq i32 %178, 0
  %184 = add nsw i64 %168, -2
  br i1 %183, label %185, label %167

185:                                              ; preds = %148, %164, %167, %119
  %186 = phi %struct.PSH_Blue_ZoneRec_* [ %118, %119 ], [ %131, %167 ], [ %131, %164 ], [ %150, %148 ]
  %187 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %186, i64 0, i32 0
  store i32 %125, i32* %187, align 8
  %188 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %186, i64 0, i32 1
  store i32 %128, i32* %188, align 4
  %189 = add i32 %122, 1
  br label %190

190:                                              ; preds = %185, %147, %145, %144, %142
  %191 = phi i32 [ %189, %185 ], [ %122, %145 ], [ %122, %147 ], [ %122, %142 ], [ %122, %144 ]
  %192 = getelementptr inbounds i16, i16* %121, i64 2
  %193 = add i32 %120, -2
  %194 = icmp ugt i32 %193, 1
  br i1 %194, label %119, label %195

195:                                              ; preds = %190, %113
  %196 = phi i32 [ %115, %113 ], [ %191, %190 ]
  store i32 %114, i32* %15, align 8
  store i32 %196, i32* %16, align 8
  %197 = icmp eq i32 %114, 0
  br i1 %197, label %226, label %198

198:                                              ; preds = %195
  %199 = getelementptr inbounds %struct.PSH_Blue_TableRec_, %struct.PSH_Blue_TableRec_* %13, i64 0, i32 1, i64 0
  br label %200

200:                                              ; preds = %218, %198
  %201 = phi i32 [ %114, %198 ], [ %224, %218 ]
  %202 = phi %struct.PSH_Blue_ZoneRec_* [ %199, %198 ], [ %225, %218 ]
  switch i32 %201, label %208 [
    i32 0, label %226
    i32 1, label %203
  ]

203:                                              ; preds = %200
  %204 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %202, i64 0, i32 0
  %205 = load i32, i32* %204, align 8
  %206 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %202, i64 0, i32 1
  %207 = load i32, i32* %206, align 4
  br label %218

208:                                              ; preds = %200
  %209 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %202, i64 1, i32 0
  %210 = load i32, i32* %209, align 8
  %211 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %202, i64 0, i32 0
  %212 = load i32, i32* %211, align 8
  %213 = sub nsw i32 %210, %212
  %214 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %202, i64 0, i32 1
  %215 = load i32, i32* %214, align 4
  %216 = icmp sgt i32 %215, %213
  br i1 %216, label %217, label %218

217:                                              ; preds = %208
  store i32 %213, i32* %214, align 4
  br label %218

218:                                              ; preds = %203, %208, %217
  %219 = phi i32 [ %207, %203 ], [ %215, %208 ], [ %213, %217 ]
  %220 = phi i32 [ %205, %203 ], [ %212, %208 ], [ %212, %217 ]
  %221 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %202, i64 0, i32 3
  store i32 %220, i32* %221, align 4
  %222 = add nsw i32 %219, %220
  %223 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %202, i64 0, i32 2
  store i32 %222, i32* %223, align 8
  %224 = add i32 %201, -1
  %225 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %202, i64 1
  br label %200

226:                                              ; preds = %200, %195
  %227 = icmp eq i32 %196, 0
  br i1 %227, label %256, label %228

228:                                              ; preds = %226
  %229 = getelementptr inbounds %struct.PSH_Blue_TableRec_, %struct.PSH_Blue_TableRec_* %14, i64 0, i32 1, i64 0
  br label %230

230:                                              ; preds = %248, %228
  %231 = phi i32 [ %196, %228 ], [ %254, %248 ]
  %232 = phi %struct.PSH_Blue_ZoneRec_* [ %229, %228 ], [ %255, %248 ]
  switch i32 %231, label %238 [
    i32 0, label %256
    i32 1, label %233
  ]

233:                                              ; preds = %230
  %234 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %232, i64 0, i32 0
  %235 = load i32, i32* %234, align 8
  %236 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %232, i64 0, i32 1
  %237 = load i32, i32* %236, align 4
  br label %248

238:                                              ; preds = %230
  %239 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %232, i64 0, i32 0
  %240 = load i32, i32* %239, align 8
  %241 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %232, i64 1, i32 0
  %242 = load i32, i32* %241, align 8
  %243 = sub nsw i32 %240, %242
  %244 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %232, i64 0, i32 1
  %245 = load i32, i32* %244, align 4
  %246 = icmp slt i32 %245, %243
  br i1 %246, label %247, label %248

247:                                              ; preds = %238
  store i32 %243, i32* %244, align 4
  br label %248

248:                                              ; preds = %233, %238, %247
  %249 = phi i32 [ %237, %233 ], [ %245, %238 ], [ %243, %247 ]
  %250 = phi i32 [ %235, %233 ], [ %240, %238 ], [ %240, %247 ]
  %251 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %232, i64 0, i32 2
  store i32 %250, i32* %251, align 8
  %252 = add nsw i32 %249, %250
  %253 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %232, i64 0, i32 3
  store i32 %252, i32* %253, align 4
  %254 = add i32 %231, -1
  %255 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %232, i64 1
  br label %230

256:                                              ; preds = %230, %226
  %257 = getelementptr inbounds %struct.PSH_Blue_TableRec_, %struct.PSH_Blue_TableRec_* %13, i64 0, i32 1, i64 0
  br i1 %197, label %293, label %258

258:                                              ; preds = %256
  %259 = getelementptr inbounds %struct.PSH_Blue_TableRec_, %struct.PSH_Blue_TableRec_* %13, i64 0, i32 1, i64 0, i32 3
  %260 = load i32, i32* %259, align 4
  %261 = sub nsw i32 %260, %5
  store i32 %261, i32* %259, align 4
  %262 = getelementptr inbounds %struct.PSH_Blue_TableRec_, %struct.PSH_Blue_TableRec_* %13, i64 0, i32 1, i64 0, i32 2
  %263 = load i32, i32* %262, align 8
  %264 = add i32 %114, -1
  %265 = icmp eq i32 %264, 0
  br i1 %265, label %288, label %266

266:                                              ; preds = %258, %282
  %267 = phi i32 [ %286, %282 ], [ %264, %258 ]
  %268 = phi i32 [ %285, %282 ], [ %263, %258 ]
  %269 = phi %struct.PSH_Blue_ZoneRec_* [ %283, %282 ], [ %257, %258 ]
  %270 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %269, i64 1, i32 3
  %271 = load i32, i32* %270, align 4
  %272 = sub nsw i32 %271, %268
  %273 = sdiv i32 %272, 2
  %274 = icmp slt i32 %273, %5
  br i1 %274, label %275, label %278

275:                                              ; preds = %266
  %276 = add nsw i32 %273, %268
  store i32 %276, i32* %270, align 4
  %277 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %269, i64 0, i32 2
  store i32 %276, i32* %277, align 8
  br label %282

278:                                              ; preds = %266
  %279 = add nsw i32 %268, %5
  %280 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %269, i64 0, i32 2
  store i32 %279, i32* %280, align 8
  %281 = sub nsw i32 %271, %5
  store i32 %281, i32* %270, align 4
  br label %282

282:                                              ; preds = %278, %275
  %283 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %269, i64 1
  %284 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %269, i64 1, i32 2
  %285 = load i32, i32* %284, align 8
  %286 = add i32 %267, -1
  %287 = icmp eq i32 %286, 0
  br i1 %287, label %288, label %266

288:                                              ; preds = %282, %258
  %289 = phi %struct.PSH_Blue_ZoneRec_* [ %257, %258 ], [ %283, %282 ]
  %290 = phi i32 [ %263, %258 ], [ %285, %282 ]
  %291 = add nsw i32 %290, %5
  %292 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %289, i64 0, i32 2
  store i32 %291, i32* %292, align 8
  br label %293

293:                                              ; preds = %256, %288
  %294 = getelementptr inbounds %struct.PSH_Blue_TableRec_, %struct.PSH_Blue_TableRec_* %14, i64 0, i32 1, i64 0
  br i1 %227, label %328, label %295

295:                                              ; preds = %293
  %296 = getelementptr inbounds %struct.PSH_Blue_TableRec_, %struct.PSH_Blue_TableRec_* %14, i64 0, i32 1, i64 0, i32 3
  %297 = load i32, i32* %296, align 4
  %298 = sub nsw i32 %297, %5
  store i32 %298, i32* %296, align 4
  %299 = getelementptr inbounds %struct.PSH_Blue_TableRec_, %struct.PSH_Blue_TableRec_* %14, i64 0, i32 1, i64 0, i32 2
  %300 = load i32, i32* %299, align 8
  %301 = add i32 %196, -1
  %302 = icmp eq i32 %301, 0
  br i1 %302, label %323, label %303

303:                                              ; preds = %295, %303
  %304 = phi i32 [ %321, %303 ], [ %301, %295 ]
  %305 = phi i32 [ %320, %303 ], [ %300, %295 ]
  %306 = phi %struct.PSH_Blue_ZoneRec_* [ %318, %303 ], [ %294, %295 ]
  %307 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %306, i64 1, i32 3
  %308 = load i32, i32* %307, align 4
  %309 = sub nsw i32 %308, %305
  %310 = sdiv i32 %309, 2
  %311 = icmp slt i32 %310, %5
  %312 = add nsw i32 %305, %5
  %313 = sub nsw i32 %308, %5
  %314 = add nsw i32 %310, %305
  %315 = select i1 %311, i32 %314, i32 %313
  %316 = select i1 %311, i32 %314, i32 %312
  store i32 %315, i32* %307, align 4
  %317 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %306, i64 0, i32 2
  store i32 %316, i32* %317, align 8
  %318 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %306, i64 1
  %319 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %306, i64 1, i32 2
  %320 = load i32, i32* %319, align 8
  %321 = add i32 %304, -1
  %322 = icmp eq i32 %321, 0
  br i1 %322, label %323, label %303

323:                                              ; preds = %303, %295
  %324 = phi %struct.PSH_Blue_ZoneRec_* [ %294, %295 ], [ %318, %303 ]
  %325 = phi i32 [ %300, %295 ], [ %320, %303 ]
  %326 = add nsw i32 %325, %5
  %327 = getelementptr inbounds %struct.PSH_Blue_ZoneRec_, %struct.PSH_Blue_ZoneRec_* %324, i64 0, i32 2
  store i32 %326, i32* %327, align 8
  br label %328

328:                                              ; preds = %323, %293
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define internal void @t1_hints_open(%struct.T1_HintsRec_* nocapture) #5 {
  %2 = bitcast %struct.T1_HintsRec_* %0 to %struct.PS_HintsRec_*
  %3 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %2, i64 0, i32 1
  store i32 0, i32* %3, align 8
  %4 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %2, i64 0, i32 3
  store i32 1, i32* %4, align 8
  %5 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %2, i64 0, i32 4, i64 0, i32 0, i32 0
  store i32 0, i32* %5, align 8
  %6 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %2, i64 0, i32 4, i64 0, i32 1, i32 0
  store i32 0, i32* %6, align 8
  %7 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %2, i64 0, i32 4, i64 0, i32 2, i32 0
  store i32 0, i32* %7, align 8
  %8 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %2, i64 0, i32 4, i64 1, i32 0, i32 0
  store i32 0, i32* %8, align 8
  %9 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %2, i64 0, i32 4, i64 1, i32 1, i32 0
  store i32 0, i32* %9, align 8
  %10 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %2, i64 0, i32 4, i64 1, i32 2, i32 0
  store i32 0, i32* %10, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ps_hints_close(%struct.PS_HintsRec_* nocapture, i32) #0 {
  %3 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %15

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %0, i64 0, i32 0
  %8 = load %struct.FT_MemoryRec_*, %struct.FT_MemoryRec_** %7, align 8
  %9 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %0, i64 0, i32 4, i64 0
  %10 = tail call fastcc i32 @ps_dimension_end(%struct.PS_DimensionRec_* %9, i32 %1, %struct.FT_MemoryRec_* %8)
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %15

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %0, i64 0, i32 4, i64 1
  %14 = tail call fastcc i32 @ps_dimension_end(%struct.PS_DimensionRec_* %13, i32 %1, %struct.FT_MemoryRec_* %8)
  br label %15

15:                                               ; preds = %12, %6, %2
  %16 = phi i32 [ %4, %2 ], [ %10, %6 ], [ %14, %12 ]
  ret i32 %16
}

; Function Attrs: nounwind ssp uwtable
define internal void @t1_hints_stem(%struct.T1_HintsRec_* nocapture, i32, i64* nocapture readonly) #0 {
  %4 = load i64, i64* %2, align 8
  %5 = tail call i64 @FT_RoundFix(i64 %4) #6
  %6 = getelementptr inbounds i64, i64* %2, i64 1
  %7 = load i64, i64* %6, align 8
  %8 = tail call i64 @FT_RoundFix(i64 %7) #6
  %9 = bitcast %struct.T1_HintsRec_* %0 to %struct.PS_HintsRec_*
  %10 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %9, i64 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %26

13:                                               ; preds = %3
  %14 = lshr i64 %8, 16
  %15 = lshr i64 %5, 16
  %16 = icmp ne i32 %1, 0
  %17 = zext i1 %16 to i64
  %18 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %9, i64 0, i32 4, i64 %17
  %19 = bitcast %struct.T1_HintsRec_* %0 to %struct.FT_MemoryRec_**
  %20 = load %struct.FT_MemoryRec_*, %struct.FT_MemoryRec_** %19, align 8
  %21 = trunc i64 %15 to i32
  %22 = trunc i64 %14 to i32
  %23 = tail call fastcc i32 @ps_dimension_add_t1stem(%struct.PS_DimensionRec_* %18, i32 %21, i32 %22, %struct.FT_MemoryRec_* %20, i32* null) #6
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %26, label %25

25:                                               ; preds = %13
  store i32 %23, i32* %10, align 8
  br label %26

26:                                               ; preds = %13, %3, %25
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @ps_hints_t1stem3(%struct.PS_HintsRec_* nocapture, i32, i64* nocapture readonly) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca [3 x i32], align 4
  %9 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %0, i64 0, i32 1
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %267

12:                                               ; preds = %3
  %13 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %0, i64 0, i32 0
  %14 = load %struct.FT_MemoryRec_*, %struct.FT_MemoryRec_** %13, align 8
  %15 = bitcast [3 x i32]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %15) #6
  %16 = getelementptr inbounds [3 x i32], [3 x i32]* %8, i64 0, i64 0
  store i32 -1431655766, i32* %16, align 4
  %17 = getelementptr inbounds [3 x i32], [3 x i32]* %8, i64 0, i64 1
  store i32 -1431655766, i32* %17, align 4
  %18 = getelementptr inbounds [3 x i32], [3 x i32]* %8, i64 0, i64 2
  store i32 -1431655766, i32* %18, align 4
  %19 = icmp ne i32 %1, 0
  %20 = zext i1 %19 to i64
  %21 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %0, i64 0, i32 4, i64 %20
  %22 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %0, i64 0, i32 3
  %23 = load i32, i32* %22, align 8
  %24 = icmp eq i32 %23, 1
  br i1 %24, label %25, label %265

25:                                               ; preds = %12
  %26 = load i64, i64* %2, align 8
  %27 = call i64 @FT_RoundFix(i64 %26) #6
  %28 = lshr i64 %27, 16
  %29 = trunc i64 %28 to i32
  %30 = getelementptr inbounds i64, i64* %2, i64 1
  %31 = load i64, i64* %30, align 8
  %32 = call i64 @FT_RoundFix(i64 %31) #6
  %33 = lshr i64 %32, 16
  %34 = trunc i64 %33 to i32
  %35 = call fastcc i32 @ps_dimension_add_t1stem(%struct.PS_DimensionRec_* %21, i32 %29, i32 %34, %struct.FT_MemoryRec_* %14, i32* nonnull %16)
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %265

37:                                               ; preds = %25
  %38 = getelementptr inbounds i64, i64* %2, i64 2
  %39 = load i64, i64* %38, align 8
  %40 = call i64 @FT_RoundFix(i64 %39) #6
  %41 = lshr i64 %40, 16
  %42 = trunc i64 %41 to i32
  %43 = getelementptr inbounds i64, i64* %2, i64 3
  %44 = load i64, i64* %43, align 8
  %45 = call i64 @FT_RoundFix(i64 %44) #6
  %46 = lshr i64 %45, 16
  %47 = trunc i64 %46 to i32
  %48 = call fastcc i32 @ps_dimension_add_t1stem(%struct.PS_DimensionRec_* %21, i32 %42, i32 %47, %struct.FT_MemoryRec_* %14, i32* %17)
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %268, label %265

50:                                               ; preds = %281
  %51 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %0, i64 0, i32 4, i64 %20, i32 2, i32 2
  %52 = bitcast %struct.PS_MaskRec_** %51 to i64*
  %53 = load i64, i64* %52, align 8
  %54 = ashr i32 %282, 3
  %55 = sext i32 %54 to i64
  %56 = and i32 %282, 7
  %57 = lshr i32 128, %56
  %58 = ashr i32 %283, 3
  %59 = sext i32 %58 to i64
  %60 = and i32 %283, 7
  %61 = lshr i32 128, %60
  %62 = ashr i32 %284, 3
  %63 = sext i32 %62 to i64
  %64 = and i32 %284, 7
  %65 = lshr i32 128, %64
  br label %66

66:                                               ; preds = %101, %50
  %67 = phi i32 [ %286, %50 ], [ %102, %101 ]
  %68 = phi i64 [ %53, %50 ], [ %104, %101 ]
  %69 = inttoptr i64 %68 to %struct.PS_MaskRec_*
  %70 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %69, i64 0, i32 0
  %71 = load i32, i32* %70, align 8
  %72 = icmp ugt i32 %71, %282
  br i1 %72, label %73, label %81

73:                                               ; preds = %66
  %74 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %69, i64 0, i32 2
  %75 = load i8*, i8** %74, align 8
  %76 = getelementptr inbounds i8, i8* %75, i64 %55
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i32
  %79 = and i32 %57, %78
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %81, label %137

81:                                               ; preds = %73, %66
  %82 = icmp ugt i32 %71, %283
  br i1 %82, label %83, label %91

83:                                               ; preds = %81
  %84 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %69, i64 0, i32 2
  %85 = load i8*, i8** %84, align 8
  %86 = getelementptr inbounds i8, i8* %85, i64 %59
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i32
  %89 = and i32 %61, %88
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %91, label %137

91:                                               ; preds = %83, %81
  %92 = icmp ugt i32 %71, %284
  br i1 %92, label %93, label %101

93:                                               ; preds = %91
  %94 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %69, i64 0, i32 2
  %95 = load i8*, i8** %94, align 8
  %96 = getelementptr inbounds i8, i8* %95, i64 %63
  %97 = load i8, i8* %96, align 1
  %98 = zext i8 %97 to i32
  %99 = and i32 %65, %98
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %101, label %137

101:                                              ; preds = %93, %91
  %102 = add i32 %67, -1
  %103 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %69, i64 1
  %104 = ptrtoint %struct.PS_MaskRec_* %103 to i64
  %105 = icmp eq i32 %102, 0
  br i1 %105, label %106, label %66

106:                                              ; preds = %101, %281
  %107 = add i32 %286, 1
  %108 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %0, i64 0, i32 4, i64 %20, i32 2, i32 1
  %109 = load i32, i32* %108, align 4
  %110 = icmp ugt i32 %107, %109
  br i1 %110, label %114, label %111

111:                                              ; preds = %106
  %112 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %0, i64 0, i32 4, i64 %20, i32 2, i32 2
  %113 = load %struct.PS_MaskRec_*, %struct.PS_MaskRec_** %112, align 8
  br label %128

114:                                              ; preds = %106
  %115 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %115) #6
  store i32 0, i32* %4, align 4
  %116 = add i32 %286, 8
  %117 = and i32 %116, -8
  %118 = zext i32 %109 to i64
  %119 = zext i32 %117 to i64
  %120 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %0, i64 0, i32 4, i64 %20, i32 2, i32 2
  %121 = bitcast %struct.PS_MaskRec_** %120 to i8**
  %122 = load i8*, i8** %121, align 8
  %123 = call i8* @ft_mem_realloc(%struct.FT_MemoryRec_* %14, i64 24, i64 %118, i64 %119, i8* %122, i32* nonnull %4) #6
  store i8* %123, i8** %121, align 8
  %124 = load i32, i32* %4, align 4
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %126, label %136

126:                                              ; preds = %114
  %127 = bitcast i8* %123 to %struct.PS_MaskRec_*
  store i32 %117, i32* %108, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %115) #6
  br label %128

128:                                              ; preds = %126, %111
  %129 = phi %struct.PS_MaskRec_* [ %113, %111 ], [ %127, %126 ]
  %130 = zext i32 %107 to i64
  %131 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %129, i64 %130
  %132 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %131, i64 -1
  %133 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %132, i64 0, i32 0
  store i32 0, i32* %133, align 8
  %134 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %132, i64 0, i32 3
  store i32 0, i32* %134, align 8
  store i32 %107, i32* %285, align 8
  %135 = ptrtoint %struct.PS_MaskRec_* %132 to i64
  br label %137

136:                                              ; preds = %114
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %115) #6
  br label %265

137:                                              ; preds = %93, %83, %73, %128
  %138 = phi i64 [ %135, %128 ], [ %68, %73 ], [ %68, %83 ], [ %68, %93 ]
  %139 = icmp sgt i32 %282, -1
  br i1 %139, label %140, label %180

140:                                              ; preds = %137
  %141 = inttoptr i64 %138 to %struct.PS_MaskRec_*
  %142 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %141, i64 0, i32 0
  %143 = load i32, i32* %142, align 8
  %144 = icmp ugt i32 %143, %282
  br i1 %144, label %168, label %145

145:                                              ; preds = %140
  %146 = add nuw i32 %282, 1
  %147 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %141, i64 0, i32 1
  %148 = load i32, i32* %147, align 4
  %149 = add i32 %148, 7
  %150 = lshr i32 %149, 3
  %151 = add nuw i32 %282, 8
  %152 = lshr i32 %151, 3
  %153 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %153) #6
  store i32 0, i32* %5, align 4
  %154 = icmp ugt i32 %152, %150
  br i1 %154, label %155, label %167

155:                                              ; preds = %145
  %156 = add nuw nsw i32 %152, 7
  %157 = and i32 %156, 1073741816
  %158 = zext i32 %150 to i64
  %159 = zext i32 %157 to i64
  %160 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %141, i64 0, i32 2
  %161 = load i8*, i8** %160, align 8
  %162 = call i8* @ft_mem_realloc(%struct.FT_MemoryRec_* %14, i64 1, i64 %158, i64 %159, i8* %161, i32* nonnull %5) #6
  store i8* %162, i8** %160, align 8
  %163 = load i32, i32* %5, align 4
  %164 = icmp eq i32 %163, 0
  br i1 %164, label %165, label %179

165:                                              ; preds = %155
  %166 = shl i32 %157, 3
  store i32 %166, i32* %147, align 4
  br label %167

167:                                              ; preds = %165, %145
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %153) #6
  store i32 %146, i32* %142, align 8
  br label %168

168:                                              ; preds = %167, %140
  %169 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %141, i64 0, i32 2
  %170 = load i8*, i8** %169, align 8
  %171 = lshr i32 %282, 3
  %172 = zext i32 %171 to i64
  %173 = getelementptr inbounds i8, i8* %170, i64 %172
  %174 = load i8, i8* %173, align 1
  %175 = and i32 %282, 7
  %176 = lshr i32 128, %175
  %177 = trunc i32 %176 to i8
  %178 = or i8 %174, %177
  store i8 %178, i8* %173, align 1
  br label %180

179:                                              ; preds = %155
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %153) #6
  br label %265

180:                                              ; preds = %168, %137
  %181 = icmp sgt i32 %283, -1
  br i1 %181, label %182, label %222

182:                                              ; preds = %180
  %183 = inttoptr i64 %138 to %struct.PS_MaskRec_*
  %184 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %183, i64 0, i32 0
  %185 = load i32, i32* %184, align 8
  %186 = icmp ugt i32 %185, %283
  br i1 %186, label %210, label %187

187:                                              ; preds = %182
  %188 = add nuw i32 %283, 1
  %189 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %183, i64 0, i32 1
  %190 = load i32, i32* %189, align 4
  %191 = add i32 %190, 7
  %192 = lshr i32 %191, 3
  %193 = add nuw i32 %283, 8
  %194 = lshr i32 %193, 3
  %195 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %195) #6
  store i32 0, i32* %6, align 4
  %196 = icmp ugt i32 %194, %192
  br i1 %196, label %197, label %209

197:                                              ; preds = %187
  %198 = add nuw nsw i32 %194, 7
  %199 = and i32 %198, 1073741816
  %200 = zext i32 %192 to i64
  %201 = zext i32 %199 to i64
  %202 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %183, i64 0, i32 2
  %203 = load i8*, i8** %202, align 8
  %204 = call i8* @ft_mem_realloc(%struct.FT_MemoryRec_* %14, i64 1, i64 %200, i64 %201, i8* %203, i32* nonnull %6) #6
  store i8* %204, i8** %202, align 8
  %205 = load i32, i32* %6, align 4
  %206 = icmp eq i32 %205, 0
  br i1 %206, label %207, label %221

207:                                              ; preds = %197
  %208 = shl i32 %199, 3
  store i32 %208, i32* %189, align 4
  br label %209

209:                                              ; preds = %207, %187
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %195) #6
  store i32 %188, i32* %184, align 8
  br label %210

210:                                              ; preds = %209, %182
  %211 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %183, i64 0, i32 2
  %212 = load i8*, i8** %211, align 8
  %213 = lshr i32 %283, 3
  %214 = zext i32 %213 to i64
  %215 = getelementptr inbounds i8, i8* %212, i64 %214
  %216 = load i8, i8* %215, align 1
  %217 = and i32 %283, 7
  %218 = lshr i32 128, %217
  %219 = trunc i32 %218 to i8
  %220 = or i8 %216, %219
  store i8 %220, i8* %215, align 1
  br label %222

221:                                              ; preds = %197
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %195) #6
  br label %265

222:                                              ; preds = %210, %180
  %223 = icmp sgt i32 %284, -1
  br i1 %223, label %224, label %264

224:                                              ; preds = %222
  %225 = inttoptr i64 %138 to %struct.PS_MaskRec_*
  %226 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %225, i64 0, i32 0
  %227 = load i32, i32* %226, align 8
  %228 = icmp ugt i32 %227, %284
  br i1 %228, label %253, label %229

229:                                              ; preds = %224
  %230 = add nuw i32 %284, 1
  %231 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %225, i64 0, i32 1
  %232 = load i32, i32* %231, align 4
  %233 = add i32 %232, 7
  %234 = lshr i32 %233, 3
  %235 = add nuw i32 %284, 8
  %236 = lshr i32 %235, 3
  %237 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %237) #6
  store i32 0, i32* %7, align 4
  %238 = icmp ugt i32 %236, %234
  br i1 %238, label %239, label %252

239:                                              ; preds = %229
  %240 = add nuw nsw i32 %236, 7
  %241 = and i32 %240, 1073741816
  %242 = zext i32 %234 to i64
  %243 = zext i32 %241 to i64
  %244 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %225, i64 0, i32 2
  %245 = load i8*, i8** %244, align 8
  %246 = call i8* @ft_mem_realloc(%struct.FT_MemoryRec_* %14, i64 1, i64 %242, i64 %243, i8* %245, i32* nonnull %7) #6
  store i8* %246, i8** %244, align 8
  %247 = load i32, i32* %7, align 4
  %248 = icmp eq i32 %247, 0
  br i1 %248, label %249, label %251

249:                                              ; preds = %239
  %250 = shl i32 %241, 3
  store i32 %250, i32* %231, align 4
  br label %252

251:                                              ; preds = %239
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %237) #6
  br label %265

252:                                              ; preds = %249, %229
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %237) #6
  store i32 %230, i32* %226, align 8
  br label %253

253:                                              ; preds = %252, %224
  %254 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %225, i64 0, i32 2
  %255 = load i8*, i8** %254, align 8
  %256 = lshr i32 %284, 3
  %257 = zext i32 %256 to i64
  %258 = getelementptr inbounds i8, i8* %255, i64 %257
  %259 = load i8, i8* %258, align 1
  %260 = and i32 %284, 7
  %261 = lshr i32 128, %260
  %262 = trunc i32 %261 to i8
  %263 = or i8 %259, %262
  store i8 %263, i8* %258, align 1
  br label %264

264:                                              ; preds = %253, %222
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %15) #6
  br label %267

265:                                              ; preds = %25, %37, %268, %251, %221, %179, %136, %12
  %266 = phi i32 [ 6, %12 ], [ %247, %251 ], [ %205, %221 ], [ %163, %179 ], [ %124, %136 ], [ %35, %25 ], [ %48, %37 ], [ %279, %268 ]
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %15) #6
  store i32 %266, i32* %9, align 8
  br label %267

267:                                              ; preds = %264, %3, %265
  ret void

268:                                              ; preds = %37
  %269 = getelementptr inbounds i64, i64* %2, i64 4
  %270 = load i64, i64* %269, align 8
  %271 = call i64 @FT_RoundFix(i64 %270) #6
  %272 = lshr i64 %271, 16
  %273 = trunc i64 %272 to i32
  %274 = getelementptr inbounds i64, i64* %2, i64 5
  %275 = load i64, i64* %274, align 8
  %276 = call i64 @FT_RoundFix(i64 %275) #6
  %277 = lshr i64 %276, 16
  %278 = trunc i64 %277 to i32
  %279 = call fastcc i32 @ps_dimension_add_t1stem(%struct.PS_DimensionRec_* %21, i32 %273, i32 %278, %struct.FT_MemoryRec_* %14, i32* %18)
  %280 = icmp eq i32 %279, 0
  br i1 %280, label %281, label %265

281:                                              ; preds = %268
  %282 = load i32, i32* %16, align 4
  %283 = load i32, i32* %17, align 4
  %284 = load i32, i32* %18, align 4
  %285 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %0, i64 0, i32 4, i64 %20, i32 2, i32 0
  %286 = load i32, i32* %285, align 8
  %287 = icmp eq i32 %286, 0
  br i1 %287, label %106, label %50
}

; Function Attrs: nounwind ssp uwtable
define internal void @ps_hints_t1reset(%struct.PS_HintsRec_* nocapture, i32) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %102

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %0, i64 0, i32 0
  %10 = load %struct.FT_MemoryRec_*, %struct.FT_MemoryRec_** %9, align 8
  %11 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %0, i64 0, i32 3
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, 1
  br i1 %13, label %14, label %100

14:                                               ; preds = %8
  %15 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %0, i64 0, i32 4, i64 0, i32 1, i32 0
  %16 = load i32, i32* %15, align 8
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %26, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %0, i64 0, i32 4, i64 0, i32 1, i32 2
  %20 = load %struct.PS_MaskRec_*, %struct.PS_MaskRec_** %19, align 8
  %21 = zext i32 %16 to i64
  %22 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %20, i64 %21
  %23 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %22, i64 -1
  %24 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %23, i64 0, i32 3
  store i32 %1, i32* %24, align 8
  %25 = load i32, i32* %15, align 8
  br label %26

26:                                               ; preds = %18, %14
  %27 = phi i32 [ 0, %14 ], [ %25, %18 ]
  %28 = add i32 %27, 1
  %29 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %0, i64 0, i32 4, i64 0, i32 1, i32 1
  %30 = load i32, i32* %29, align 4
  %31 = icmp ugt i32 %28, %30
  br i1 %31, label %35, label %32

32:                                               ; preds = %26
  %33 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %0, i64 0, i32 4, i64 0, i32 1, i32 2
  %34 = load %struct.PS_MaskRec_*, %struct.PS_MaskRec_** %33, align 8
  br label %49

35:                                               ; preds = %26
  %36 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %36) #6
  store i32 0, i32* %4, align 4
  %37 = add i32 %27, 8
  %38 = and i32 %37, -8
  %39 = zext i32 %30 to i64
  %40 = zext i32 %38 to i64
  %41 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %0, i64 0, i32 4, i64 0, i32 1, i32 2
  %42 = bitcast %struct.PS_MaskRec_** %41 to i8**
  %43 = load i8*, i8** %42, align 8
  %44 = call i8* @ft_mem_realloc(%struct.FT_MemoryRec_* %10, i64 24, i64 %39, i64 %40, i8* %43, i32* nonnull %4) #6
  store i8* %44, i8** %42, align 8
  %45 = load i32, i32* %4, align 4
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %97

47:                                               ; preds = %35
  %48 = bitcast i8* %44 to %struct.PS_MaskRec_*
  store i32 %38, i32* %29, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %36) #6
  br label %49

49:                                               ; preds = %32, %47
  %50 = phi %struct.PS_MaskRec_* [ %34, %32 ], [ %48, %47 ]
  %51 = zext i32 %28 to i64
  %52 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %50, i64 %51
  %53 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %52, i64 -1
  %54 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %53, i64 0, i32 0
  store i32 0, i32* %54, align 8
  %55 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %53, i64 0, i32 3
  store i32 0, i32* %55, align 8
  store i32 %28, i32* %15, align 8
  %56 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %0, i64 0, i32 4, i64 1, i32 1, i32 0
  %57 = load i32, i32* %56, align 8
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %67, label %59

59:                                               ; preds = %49
  %60 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %0, i64 0, i32 4, i64 1, i32 1, i32 2
  %61 = load %struct.PS_MaskRec_*, %struct.PS_MaskRec_** %60, align 8
  %62 = zext i32 %57 to i64
  %63 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %61, i64 %62
  %64 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %63, i64 -1
  %65 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %64, i64 0, i32 3
  store i32 %1, i32* %65, align 8
  %66 = load i32, i32* %56, align 8
  br label %67

67:                                               ; preds = %59, %49
  %68 = phi i32 [ 0, %49 ], [ %66, %59 ]
  %69 = add i32 %68, 1
  %70 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %0, i64 0, i32 4, i64 1, i32 1, i32 1
  %71 = load i32, i32* %70, align 4
  %72 = icmp ugt i32 %69, %71
  br i1 %72, label %76, label %73

73:                                               ; preds = %67
  %74 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %0, i64 0, i32 4, i64 1, i32 1, i32 2
  %75 = load %struct.PS_MaskRec_*, %struct.PS_MaskRec_** %74, align 8
  br label %90

76:                                               ; preds = %67
  %77 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %77) #6
  store i32 0, i32* %3, align 4
  %78 = add i32 %68, 8
  %79 = and i32 %78, -8
  %80 = zext i32 %71 to i64
  %81 = zext i32 %79 to i64
  %82 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %0, i64 0, i32 4, i64 1, i32 1, i32 2
  %83 = bitcast %struct.PS_MaskRec_** %82 to i8**
  %84 = load i8*, i8** %83, align 8
  %85 = call i8* @ft_mem_realloc(%struct.FT_MemoryRec_* %10, i64 24, i64 %80, i64 %81, i8* %84, i32* nonnull %3) #6
  store i8* %85, i8** %83, align 8
  %86 = load i32, i32* %3, align 4
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %88, label %97

88:                                               ; preds = %76
  %89 = bitcast i8* %85 to %struct.PS_MaskRec_*
  store i32 %79, i32* %70, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %77) #6
  br label %90

90:                                               ; preds = %88, %73
  %91 = phi %struct.PS_MaskRec_* [ %75, %73 ], [ %89, %88 ]
  %92 = zext i32 %69 to i64
  %93 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %91, i64 %92
  %94 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %93, i64 -1
  %95 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %94, i64 0, i32 0
  store i32 0, i32* %95, align 8
  %96 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %94, i64 0, i32 3
  store i32 0, i32* %96, align 8
  store i32 %69, i32* %56, align 8
  br label %102

97:                                               ; preds = %76, %35
  %98 = phi i8* [ %36, %35 ], [ %77, %76 ]
  %99 = phi i32 [ %45, %35 ], [ %86, %76 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %98) #6
  br label %100

100:                                              ; preds = %97, %8
  %101 = phi i32 [ 6, %8 ], [ %99, %97 ]
  store i32 %101, i32* %5, align 8
  br label %102

102:                                              ; preds = %90, %2, %100
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @ps_dimension_end(%struct.PS_DimensionRec_* nocapture, i32, %struct.FT_MemoryRec_*) unnamed_addr #0 {
  %4 = alloca i32, align 4
  %5 = alloca %struct.PS_MaskRec_, align 8
  %6 = getelementptr inbounds %struct.PS_DimensionRec_, %struct.PS_DimensionRec_* %0, i64 0, i32 1, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %16, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.PS_DimensionRec_, %struct.PS_DimensionRec_* %0, i64 0, i32 1, i32 2
  %11 = load %struct.PS_MaskRec_*, %struct.PS_MaskRec_** %10, align 8
  %12 = zext i32 %7 to i64
  %13 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %11, i64 %12
  %14 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %13, i64 -1
  %15 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %14, i64 0, i32 3
  store i32 %1, i32* %15, align 8
  br label %16

16:                                               ; preds = %3, %9
  %17 = getelementptr inbounds %struct.PS_DimensionRec_, %struct.PS_DimensionRec_* %0, i64 0, i32 2, i32 0
  %18 = load i32, i32* %17, align 8
  %19 = add i32 %18, -1
  %20 = icmp sgt i32 %19, 0
  br i1 %20, label %21, label %336

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.PS_DimensionRec_, %struct.PS_DimensionRec_* %0, i64 0, i32 2, i32 2
  %23 = bitcast i32* %4 to i8*
  %24 = bitcast %struct.PS_MaskRec_* %5 to i8*
  %25 = add i32 %18, -2
  %26 = zext i32 %25 to i64
  %27 = zext i32 %19 to i64
  br label %28

28:                                               ; preds = %330, %21
  %29 = phi i32 [ %18, %21 ], [ %331, %330 ]
  %30 = phi i64 [ %27, %21 ], [ %335, %330 ]
  %31 = phi i64 [ %26, %21 ], [ %334, %330 ]
  %32 = phi i32 [ %19, %21 ], [ %332, %330 ]
  %33 = load %struct.PS_MaskRec_*, %struct.PS_MaskRec_** %22, align 8
  %34 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %33, i64 %30, i32 2
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %33, i64 %30, i32 0
  %37 = load i32, i32* %36, align 8
  br label %38

38:                                               ; preds = %326, %28
  %39 = phi i64 [ %31, %28 ], [ %329, %326 ]
  %40 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %33, i64 %39, i32 2
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %33, i64 %39, i32 0
  %43 = load i32, i32* %42, align 8
  %44 = icmp ult i32 %37, %43
  %45 = select i1 %44, i32 %37, i32 %43
  %46 = icmp ugt i32 %45, 7
  br i1 %46, label %47, label %60

47:                                               ; preds = %38, %55
  %48 = phi i32 [ %58, %55 ], [ %45, %38 ]
  %49 = phi i8* [ %56, %55 ], [ %35, %38 ]
  %50 = phi i8* [ %57, %55 ], [ %41, %38 ]
  %51 = load i8, i8* %49, align 1
  %52 = load i8, i8* %50, align 1
  %53 = and i8 %52, %51
  %54 = icmp eq i8 %53, 0
  br i1 %54, label %55, label %73

55:                                               ; preds = %47
  %56 = getelementptr inbounds i8, i8* %49, i64 1
  %57 = getelementptr inbounds i8, i8* %50, i64 1
  %58 = add i32 %48, -8
  %59 = icmp ugt i32 %58, 7
  br i1 %59, label %47, label %60

60:                                               ; preds = %55, %38
  %61 = phi i8* [ %41, %38 ], [ %57, %55 ]
  %62 = phi i8* [ %35, %38 ], [ %56, %55 ]
  %63 = phi i32 [ %45, %38 ], [ %58, %55 ]
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %326, label %65

65:                                               ; preds = %60
  %66 = load i8, i8* %62, align 1
  %67 = load i8, i8* %61, align 1
  %68 = and i8 %67, %66
  %69 = zext i8 %68 to i32
  %70 = ashr i32 -256, %63
  %71 = and i32 %70, %69
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %326, label %73

73:                                               ; preds = %65, %47
  %74 = trunc i64 %39 to i32
  %75 = and i64 %39, 4294967295
  %76 = icmp ugt i64 %75, %30
  %77 = trunc i64 %30 to i32
  %78 = select i1 %76, i32 %74, i32 %77
  %79 = select i1 %76, i32 %77, i32 %74
  %80 = icmp ult i32 %79, %78
  %81 = icmp ult i32 %78, %29
  %82 = and i1 %80, %81
  br i1 %82, label %83, label %330

83:                                               ; preds = %73
  %84 = zext i32 %79 to i64
  %85 = zext i32 %78 to i64
  %86 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %33, i64 %85
  %87 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %33, i64 %84, i32 0
  %88 = load i32, i32* %87, align 8
  %89 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %86, i64 0, i32 0
  %90 = load i32, i32* %89, align 8
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %306, label %92

92:                                               ; preds = %83
  %93 = icmp ugt i32 %90, %88
  br i1 %93, label %97, label %94

94:                                               ; preds = %92
  %95 = add i32 %90, 7
  %96 = lshr i32 %95, 3
  br label %159

97:                                               ; preds = %92
  %98 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %33, i64 %84, i32 1
  %99 = load i32, i32* %98, align 4
  %100 = add i32 %99, 7
  %101 = lshr i32 %100, 3
  %102 = add i32 %90, 7
  %103 = lshr i32 %102, 3
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %23) #6
  store i32 0, i32* %4, align 4
  %104 = icmp ugt i32 %103, %101
  br i1 %104, label %105, label %117

105:                                              ; preds = %97
  %106 = add nuw nsw i32 %103, 7
  %107 = and i32 %106, 1073741816
  %108 = zext i32 %101 to i64
  %109 = zext i32 %107 to i64
  %110 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %33, i64 %84, i32 2
  %111 = load i8*, i8** %110, align 8
  %112 = call i8* @ft_mem_realloc(%struct.FT_MemoryRec_* %2, i64 1, i64 %108, i64 %109, i8* %111, i32* nonnull %4) #6
  store i8* %112, i8** %110, align 8
  %113 = load i32, i32* %4, align 4
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %115, label %325

115:                                              ; preds = %105
  %116 = shl i32 %107, 3
  store i32 %116, i32* %98, align 4
  br label %117

117:                                              ; preds = %115, %97
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %23) #6
  %118 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %33, i64 %84, i32 2
  %119 = sub i32 %90, %88
  %120 = and i32 %119, 1
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %137, label %122

122:                                              ; preds = %117
  %123 = load i32, i32* %87, align 8
  %124 = icmp ugt i32 %123, %88
  br i1 %124, label %125, label %135

125:                                              ; preds = %122
  %126 = load i8*, i8** %118, align 8
  %127 = lshr i32 %88, 3
  %128 = zext i32 %127 to i64
  %129 = getelementptr inbounds i8, i8* %126, i64 %128
  %130 = load i8, i8* %129, align 1
  %131 = and i32 %88, 7
  %132 = ashr i32 -129, %131
  %133 = trunc i32 %132 to i8
  %134 = and i8 %130, %133
  store i8 %134, i8* %129, align 1
  br label %135

135:                                              ; preds = %125, %122
  %136 = add nuw i32 %88, 1
  br label %137

137:                                              ; preds = %135, %117
  %138 = phi i32 [ %136, %135 ], [ %88, %117 ]
  %139 = add i32 %88, 1
  %140 = icmp eq i32 %90, %139
  br i1 %140, label %159, label %141

141:                                              ; preds = %137, %348
  %142 = phi i32 [ %349, %348 ], [ %138, %137 ]
  %143 = load i32, i32* %87, align 8
  %144 = icmp ugt i32 %143, %142
  br i1 %144, label %145, label %155

145:                                              ; preds = %141
  %146 = load i8*, i8** %118, align 8
  %147 = lshr i32 %142, 3
  %148 = zext i32 %147 to i64
  %149 = getelementptr inbounds i8, i8* %146, i64 %148
  %150 = load i8, i8* %149, align 1
  %151 = and i32 %142, 7
  %152 = ashr i32 -129, %151
  %153 = trunc i32 %152 to i8
  %154 = and i8 %150, %153
  store i8 %154, i8* %149, align 1
  br label %155

155:                                              ; preds = %145, %141
  %156 = add nuw i32 %142, 1
  %157 = load i32, i32* %87, align 8
  %158 = icmp ugt i32 %157, %156
  br i1 %158, label %338, label %348

159:                                              ; preds = %137, %348, %94
  %160 = phi i32 [ %96, %94 ], [ %103, %348 ], [ %103, %137 ]
  %161 = icmp eq i32 %160, 0
  br i1 %161, label %306, label %162

162:                                              ; preds = %159
  %163 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %33, i64 %84, i32 2
  %164 = load i8*, i8** %163, align 8
  %165 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %33, i64 %85, i32 2
  %166 = load i8*, i8** %165, align 8
  %167 = add nsw i32 %160, -1
  %168 = zext i32 %167 to i64
  %169 = add nuw nsw i64 %168, 1
  %170 = icmp ult i64 %169, 32
  br i1 %170, label %255, label %171

171:                                              ; preds = %162
  %172 = getelementptr i8, i8* %164, i64 1
  %173 = add nsw i32 %160, -1
  %174 = zext i32 %173 to i64
  %175 = getelementptr i8, i8* %172, i64 %174
  %176 = getelementptr i8, i8* %166, i64 1
  %177 = getelementptr i8, i8* %176, i64 %174
  %178 = icmp ult i8* %164, %177
  %179 = icmp ult i8* %166, %175
  %180 = and i1 %178, %179
  br i1 %180, label %255, label %181

181:                                              ; preds = %171
  %182 = and i64 %169, 8589934560
  %183 = getelementptr i8, i8* %164, i64 %182
  %184 = getelementptr i8, i8* %166, i64 %182
  %185 = trunc i64 %182 to i32
  %186 = sub i32 %160, %185
  %187 = add nsw i64 %182, -32
  %188 = lshr exact i64 %187, 5
  %189 = add nuw nsw i64 %188, 1
  %190 = and i64 %189, 1
  %191 = icmp eq i64 %187, 0
  br i1 %191, label %233, label %192

192:                                              ; preds = %181
  %193 = sub nuw nsw i64 %189, %190
  br label %194

194:                                              ; preds = %194, %192
  %195 = phi i64 [ 0, %192 ], [ %230, %194 ]
  %196 = phi i64 [ %193, %192 ], [ %231, %194 ]
  %197 = getelementptr i8, i8* %164, i64 %195
  %198 = getelementptr i8, i8* %166, i64 %195
  %199 = bitcast i8* %197 to <16 x i8>*
  %200 = load <16 x i8>, <16 x i8>* %199, align 1, !alias.scope !17, !noalias !20
  %201 = getelementptr i8, i8* %197, i64 16
  %202 = bitcast i8* %201 to <16 x i8>*
  %203 = load <16 x i8>, <16 x i8>* %202, align 1, !alias.scope !17, !noalias !20
  %204 = bitcast i8* %198 to <16 x i8>*
  %205 = load <16 x i8>, <16 x i8>* %204, align 1, !alias.scope !20
  %206 = getelementptr i8, i8* %198, i64 16
  %207 = bitcast i8* %206 to <16 x i8>*
  %208 = load <16 x i8>, <16 x i8>* %207, align 1, !alias.scope !20
  %209 = or <16 x i8> %205, %200
  %210 = or <16 x i8> %208, %203
  %211 = bitcast i8* %197 to <16 x i8>*
  store <16 x i8> %209, <16 x i8>* %211, align 1, !alias.scope !17, !noalias !20
  %212 = bitcast i8* %201 to <16 x i8>*
  store <16 x i8> %210, <16 x i8>* %212, align 1, !alias.scope !17, !noalias !20
  %213 = or i64 %195, 32
  %214 = getelementptr i8, i8* %164, i64 %213
  %215 = getelementptr i8, i8* %166, i64 %213
  %216 = bitcast i8* %214 to <16 x i8>*
  %217 = load <16 x i8>, <16 x i8>* %216, align 1, !alias.scope !17, !noalias !20
  %218 = getelementptr i8, i8* %214, i64 16
  %219 = bitcast i8* %218 to <16 x i8>*
  %220 = load <16 x i8>, <16 x i8>* %219, align 1, !alias.scope !17, !noalias !20
  %221 = bitcast i8* %215 to <16 x i8>*
  %222 = load <16 x i8>, <16 x i8>* %221, align 1, !alias.scope !20
  %223 = getelementptr i8, i8* %215, i64 16
  %224 = bitcast i8* %223 to <16 x i8>*
  %225 = load <16 x i8>, <16 x i8>* %224, align 1, !alias.scope !20
  %226 = or <16 x i8> %222, %217
  %227 = or <16 x i8> %225, %220
  %228 = bitcast i8* %214 to <16 x i8>*
  store <16 x i8> %226, <16 x i8>* %228, align 1, !alias.scope !17, !noalias !20
  %229 = bitcast i8* %218 to <16 x i8>*
  store <16 x i8> %227, <16 x i8>* %229, align 1, !alias.scope !17, !noalias !20
  %230 = add i64 %195, 64
  %231 = add i64 %196, -2
  %232 = icmp eq i64 %231, 0
  br i1 %232, label %233, label %194, !llvm.loop !22

233:                                              ; preds = %194, %181
  %234 = phi i64 [ 0, %181 ], [ %230, %194 ]
  %235 = icmp eq i64 %190, 0
  br i1 %235, label %253, label %236

236:                                              ; preds = %233
  %237 = getelementptr i8, i8* %164, i64 %234
  %238 = getelementptr i8, i8* %166, i64 %234
  %239 = bitcast i8* %237 to <16 x i8>*
  %240 = load <16 x i8>, <16 x i8>* %239, align 1, !alias.scope !17, !noalias !20
  %241 = getelementptr i8, i8* %237, i64 16
  %242 = bitcast i8* %241 to <16 x i8>*
  %243 = load <16 x i8>, <16 x i8>* %242, align 1, !alias.scope !17, !noalias !20
  %244 = bitcast i8* %238 to <16 x i8>*
  %245 = load <16 x i8>, <16 x i8>* %244, align 1, !alias.scope !20
  %246 = getelementptr i8, i8* %238, i64 16
  %247 = bitcast i8* %246 to <16 x i8>*
  %248 = load <16 x i8>, <16 x i8>* %247, align 1, !alias.scope !20
  %249 = or <16 x i8> %245, %240
  %250 = or <16 x i8> %248, %243
  %251 = bitcast i8* %237 to <16 x i8>*
  store <16 x i8> %249, <16 x i8>* %251, align 1, !alias.scope !17, !noalias !20
  %252 = bitcast i8* %241 to <16 x i8>*
  store <16 x i8> %250, <16 x i8>* %252, align 1, !alias.scope !17, !noalias !20
  br label %253

253:                                              ; preds = %233, %236
  %254 = icmp eq i64 %169, %182
  br i1 %254, label %306, label %255

255:                                              ; preds = %253, %171, %162
  %256 = phi i8* [ %164, %171 ], [ %164, %162 ], [ %183, %253 ]
  %257 = phi i8* [ %166, %171 ], [ %166, %162 ], [ %184, %253 ]
  %258 = phi i32 [ %160, %171 ], [ %160, %162 ], [ %186, %253 ]
  %259 = add nsw i32 %258, -1
  %260 = and i32 %258, 3
  %261 = icmp eq i32 %260, 0
  br i1 %261, label %275, label %262

262:                                              ; preds = %255, %262
  %263 = phi i8* [ %270, %262 ], [ %256, %255 ]
  %264 = phi i8* [ %271, %262 ], [ %257, %255 ]
  %265 = phi i32 [ %272, %262 ], [ %258, %255 ]
  %266 = phi i32 [ %273, %262 ], [ %260, %255 ]
  %267 = load i8, i8* %263, align 1
  %268 = load i8, i8* %264, align 1
  %269 = or i8 %268, %267
  store i8 %269, i8* %263, align 1
  %270 = getelementptr inbounds i8, i8* %263, i64 1
  %271 = getelementptr inbounds i8, i8* %264, i64 1
  %272 = add nsw i32 %265, -1
  %273 = add i32 %266, -1
  %274 = icmp eq i32 %273, 0
  br i1 %274, label %275, label %262, !llvm.loop !23

275:                                              ; preds = %262, %255
  %276 = phi i8* [ %256, %255 ], [ %270, %262 ]
  %277 = phi i8* [ %257, %255 ], [ %271, %262 ]
  %278 = phi i32 [ %258, %255 ], [ %272, %262 ]
  %279 = icmp ult i32 %259, 3
  br i1 %279, label %306, label %280

280:                                              ; preds = %275, %280
  %281 = phi i8* [ %302, %280 ], [ %276, %275 ]
  %282 = phi i8* [ %303, %280 ], [ %277, %275 ]
  %283 = phi i32 [ %304, %280 ], [ %278, %275 ]
  %284 = load i8, i8* %281, align 1
  %285 = load i8, i8* %282, align 1
  %286 = or i8 %285, %284
  store i8 %286, i8* %281, align 1
  %287 = getelementptr inbounds i8, i8* %281, i64 1
  %288 = getelementptr inbounds i8, i8* %282, i64 1
  %289 = load i8, i8* %287, align 1
  %290 = load i8, i8* %288, align 1
  %291 = or i8 %290, %289
  store i8 %291, i8* %287, align 1
  %292 = getelementptr inbounds i8, i8* %281, i64 2
  %293 = getelementptr inbounds i8, i8* %282, i64 2
  %294 = load i8, i8* %292, align 1
  %295 = load i8, i8* %293, align 1
  %296 = or i8 %295, %294
  store i8 %296, i8* %292, align 1
  %297 = getelementptr inbounds i8, i8* %281, i64 3
  %298 = getelementptr inbounds i8, i8* %282, i64 3
  %299 = load i8, i8* %297, align 1
  %300 = load i8, i8* %298, align 1
  %301 = or i8 %300, %299
  store i8 %301, i8* %297, align 1
  %302 = getelementptr inbounds i8, i8* %281, i64 4
  %303 = getelementptr inbounds i8, i8* %282, i64 4
  %304 = add nsw i32 %283, -4
  %305 = icmp eq i32 %304, 0
  br i1 %305, label %306, label %280, !llvm.loop !24

306:                                              ; preds = %275, %280, %253, %159, %83
  store i32 0, i32* %89, align 8
  %307 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %33, i64 %85, i32 3
  store i32 0, i32* %307, align 8
  %308 = load i32, i32* %17, align 8
  %309 = xor i32 %78, -1
  %310 = add i32 %308, %309
  %311 = icmp sgt i32 %310, 0
  br i1 %311, label %312, label %322

312:                                              ; preds = %306
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %24)
  %313 = bitcast %struct.PS_MaskRec_* %86 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %24, i8* align 8 %313, i64 24, i1 false) #6
  %314 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %86, i64 1
  %315 = bitcast %struct.PS_MaskRec_* %314 to i8*
  %316 = zext i32 %310 to i64
  %317 = mul nuw nsw i64 %316, 24
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %313, i8* align 8 %315, i64 %317, i1 false) #6
  %318 = sext i32 %310 to i64
  %319 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %86, i64 %318
  %320 = bitcast %struct.PS_MaskRec_* %319 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %320, i8* nonnull align 8 %24, i64 24, i1 false) #6
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %24)
  %321 = load i32, i32* %17, align 8
  br label %322

322:                                              ; preds = %312, %306
  %323 = phi i32 [ %321, %312 ], [ %308, %306 ]
  %324 = add i32 %323, -1
  store i32 %324, i32* %17, align 8
  br label %330

325:                                              ; preds = %105
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %23) #6
  br label %336

326:                                              ; preds = %65, %60
  %327 = trunc i64 %39 to i32
  %328 = icmp sgt i32 %327, 0
  %329 = add nsw i64 %39, -1
  br i1 %328, label %38, label %330

330:                                              ; preds = %326, %322, %73
  %331 = phi i32 [ %324, %322 ], [ %29, %73 ], [ %29, %326 ]
  %332 = add nsw i32 %32, -1
  %333 = icmp sgt i32 %332, 0
  %334 = add nsw i64 %31, -1
  %335 = add nsw i64 %30, -1
  br i1 %333, label %28, label %336

336:                                              ; preds = %330, %16, %325
  %337 = phi i32 [ %113, %325 ], [ 0, %16 ], [ 0, %330 ]
  ret i32 %337

338:                                              ; preds = %155
  %339 = load i8*, i8** %118, align 8
  %340 = lshr i32 %156, 3
  %341 = zext i32 %340 to i64
  %342 = getelementptr inbounds i8, i8* %339, i64 %341
  %343 = load i8, i8* %342, align 1
  %344 = and i32 %156, 7
  %345 = ashr i32 -129, %344
  %346 = trunc i32 %345 to i8
  %347 = and i8 %343, %346
  store i8 %347, i8* %342, align 1
  br label %348

348:                                              ; preds = %338, %155
  %349 = add nuw i32 %142, 2
  %350 = icmp eq i32 %349, %90
  br i1 %350, label %159, label %141
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

declare i64 @FT_RoundFix(i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @ps_dimension_add_t1stem(%struct.PS_DimensionRec_* nocapture, i32, i32, %struct.FT_MemoryRec_*, i32*) unnamed_addr #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = icmp slt i32 %2, 0
  br i1 %9, label %10, label %15

10:                                               ; preds = %5
  %11 = icmp eq i32 %2, -21
  %12 = add i32 %1, -21
  %13 = select i1 %11, i32 %12, i32 %1
  %14 = select i1 %11, i32 3, i32 1
  br label %15

15:                                               ; preds = %10, %5
  %16 = phi i32 [ 0, %10 ], [ %2, %5 ]
  %17 = phi i32 [ %13, %10 ], [ %1, %5 ]
  %18 = phi i32 [ %14, %10 ], [ 0, %5 ]
  %19 = icmp ne i32* %4, null
  br i1 %19, label %20, label %21

20:                                               ; preds = %15
  store i32 -1, i32* %4, align 4
  br label %21

21:                                               ; preds = %20, %15
  %22 = getelementptr inbounds %struct.PS_DimensionRec_, %struct.PS_DimensionRec_* %0, i64 0, i32 0, i32 0
  %23 = load i32, i32* %22, align 8
  %24 = getelementptr inbounds %struct.PS_DimensionRec_, %struct.PS_DimensionRec_* %0, i64 0, i32 0, i32 2
  %25 = load %struct.PS_HintRec_*, %struct.PS_HintRec_** %24, align 8
  %26 = icmp eq i32 %23, 0
  %27 = bitcast %struct.PS_HintRec_* %25 to i8*
  br i1 %26, label %42, label %28

28:                                               ; preds = %21, %38
  %29 = phi i32 [ %39, %38 ], [ 0, %21 ]
  %30 = phi %struct.PS_HintRec_* [ %40, %38 ], [ %25, %21 ]
  %31 = getelementptr inbounds %struct.PS_HintRec_, %struct.PS_HintRec_* %30, i64 0, i32 0
  %32 = load i32, i32* %31, align 4
  %33 = icmp eq i32 %32, %17
  br i1 %33, label %34, label %38

34:                                               ; preds = %28
  %35 = getelementptr inbounds %struct.PS_HintRec_, %struct.PS_HintRec_* %30, i64 0, i32 1
  %36 = load i32, i32* %35, align 4
  %37 = icmp eq i32 %36, %16
  br i1 %37, label %72, label %38

38:                                               ; preds = %28, %34
  %39 = add nuw i32 %29, 1
  %40 = getelementptr inbounds %struct.PS_HintRec_, %struct.PS_HintRec_* %30, i64 1
  %41 = icmp eq i32 %39, %23
  br i1 %41, label %42, label %28

42:                                               ; preds = %38, %21
  %43 = add i32 %23, 1
  %44 = getelementptr inbounds %struct.PS_DimensionRec_, %struct.PS_DimensionRec_* %0, i64 0, i32 0, i32 1
  %45 = load i32, i32* %44, align 4
  %46 = icmp ult i32 %43, %45
  br i1 %46, label %64, label %47

47:                                               ; preds = %42
  %48 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %48) #6
  store i32 0, i32* %8, align 4
  %49 = icmp ult i32 %45, %43
  br i1 %49, label %50, label %61

50:                                               ; preds = %47
  %51 = add i32 %23, 8
  %52 = and i32 %51, -8
  %53 = zext i32 %45 to i64
  %54 = zext i32 %52 to i64
  %55 = bitcast %struct.PS_HintRec_** %24 to i8**
  %56 = call i8* @ft_mem_realloc(%struct.FT_MemoryRec_* %3, i64 12, i64 %53, i64 %54, i8* %27, i32* nonnull %8) #6
  store i8* %56, i8** %55, align 8
  %57 = load i32, i32* %8, align 4
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %63

59:                                               ; preds = %50
  %60 = bitcast i8* %56 to %struct.PS_HintRec_*
  store i32 %52, i32* %44, align 4
  br label %61

61:                                               ; preds = %59, %47
  %62 = phi %struct.PS_HintRec_* [ %60, %59 ], [ %25, %47 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %48) #6
  br label %64

63:                                               ; preds = %50
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %48) #6
  br label %146

64:                                               ; preds = %42, %61
  %65 = phi %struct.PS_HintRec_* [ %25, %42 ], [ %62, %61 ]
  %66 = zext i32 %43 to i64
  %67 = getelementptr inbounds %struct.PS_HintRec_, %struct.PS_HintRec_* %65, i64 %66
  %68 = getelementptr inbounds %struct.PS_HintRec_, %struct.PS_HintRec_* %67, i64 -1
  %69 = getelementptr inbounds %struct.PS_HintRec_, %struct.PS_HintRec_* %68, i64 0, i32 0
  %70 = getelementptr inbounds %struct.PS_HintRec_, %struct.PS_HintRec_* %68, i64 0, i32 1
  %71 = getelementptr inbounds %struct.PS_HintRec_, %struct.PS_HintRec_* %68, i64 0, i32 2
  store i32 %43, i32* %22, align 8
  store i32 %17, i32* %69, align 4
  store i32 %16, i32* %70, align 4
  store i32 %18, i32* %71, align 4
  br label %72

72:                                               ; preds = %34, %64
  %73 = phi i32 [ %23, %64 ], [ %29, %34 ]
  %74 = getelementptr inbounds %struct.PS_DimensionRec_, %struct.PS_DimensionRec_* %0, i64 0, i32 1, i32 0
  %75 = load i32, i32* %74, align 8
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %98

77:                                               ; preds = %72
  %78 = getelementptr inbounds %struct.PS_DimensionRec_, %struct.PS_DimensionRec_* %0, i64 0, i32 1, i32 1
  %79 = load i32, i32* %78, align 4
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %84, label %81

81:                                               ; preds = %77
  %82 = getelementptr inbounds %struct.PS_DimensionRec_, %struct.PS_DimensionRec_* %0, i64 0, i32 1, i32 2
  %83 = load %struct.PS_MaskRec_*, %struct.PS_MaskRec_** %82, align 8
  br label %94

84:                                               ; preds = %77
  %85 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %85) #6
  store i32 0, i32* %7, align 4
  %86 = getelementptr inbounds %struct.PS_DimensionRec_, %struct.PS_DimensionRec_* %0, i64 0, i32 1, i32 2
  %87 = bitcast %struct.PS_MaskRec_** %86 to i8**
  %88 = load i8*, i8** %87, align 8
  %89 = call i8* @ft_mem_realloc(%struct.FT_MemoryRec_* %3, i64 24, i64 0, i64 8, i8* %88, i32* nonnull %7) #6
  store i8* %89, i8** %87, align 8
  %90 = load i32, i32* %7, align 4
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %104

92:                                               ; preds = %84
  %93 = bitcast i8* %89 to %struct.PS_MaskRec_*
  store i32 8, i32* %78, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %85) #6
  br label %94

94:                                               ; preds = %92, %81
  %95 = phi %struct.PS_MaskRec_* [ %83, %81 ], [ %93, %92 ]
  %96 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %95, i64 0, i32 0
  store i32 0, i32* %96, align 8
  %97 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %95, i64 0, i32 3
  store i32 0, i32* %97, align 8
  store i32 1, i32* %74, align 8
  br label %105

98:                                               ; preds = %72
  %99 = getelementptr inbounds %struct.PS_DimensionRec_, %struct.PS_DimensionRec_* %0, i64 0, i32 1, i32 2
  %100 = load %struct.PS_MaskRec_*, %struct.PS_MaskRec_** %99, align 8
  %101 = zext i32 %75 to i64
  %102 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %100, i64 %101
  %103 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %102, i64 -1
  br label %105

104:                                              ; preds = %84
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %85) #6
  br label %146

105:                                              ; preds = %98, %94
  %106 = phi %struct.PS_MaskRec_* [ %95, %94 ], [ %103, %98 ]
  %107 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %106, i64 0, i32 0
  %108 = load i32, i32* %107, align 8
  %109 = icmp ugt i32 %108, %73
  br i1 %109, label %134, label %110

110:                                              ; preds = %105
  %111 = add i32 %73, 1
  %112 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %106, i64 0, i32 1
  %113 = load i32, i32* %112, align 4
  %114 = add i32 %113, 7
  %115 = lshr i32 %114, 3
  %116 = add i32 %73, 8
  %117 = lshr i32 %116, 3
  %118 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %118) #6
  store i32 0, i32* %6, align 4
  %119 = icmp ugt i32 %117, %115
  br i1 %119, label %120, label %133

120:                                              ; preds = %110
  %121 = add nuw nsw i32 %117, 7
  %122 = and i32 %121, 1073741816
  %123 = zext i32 %115 to i64
  %124 = zext i32 %122 to i64
  %125 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %106, i64 0, i32 2
  %126 = load i8*, i8** %125, align 8
  %127 = call i8* @ft_mem_realloc(%struct.FT_MemoryRec_* %3, i64 1, i64 %123, i64 %124, i8* %126, i32* nonnull %6) #6
  store i8* %127, i8** %125, align 8
  %128 = load i32, i32* %6, align 4
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %130, label %132

130:                                              ; preds = %120
  %131 = shl i32 %122, 3
  store i32 %131, i32* %112, align 4
  br label %133

132:                                              ; preds = %120
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %118) #6
  br label %146

133:                                              ; preds = %130, %110
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %118) #6
  store i32 %111, i32* %107, align 8
  br label %134

134:                                              ; preds = %105, %133
  %135 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %106, i64 0, i32 2
  %136 = load i8*, i8** %135, align 8
  %137 = lshr i32 %73, 3
  %138 = zext i32 %137 to i64
  %139 = getelementptr inbounds i8, i8* %136, i64 %138
  %140 = load i8, i8* %139, align 1
  %141 = and i32 %73, 7
  %142 = lshr i32 128, %141
  %143 = trunc i32 %142 to i8
  %144 = or i8 %140, %143
  store i8 %144, i8* %139, align 1
  br i1 %19, label %145, label %146

145:                                              ; preds = %134
  store i32 %73, i32* %4, align 4
  br label %146

146:                                              ; preds = %134, %132, %104, %63, %145
  %147 = phi i32 [ %57, %63 ], [ %90, %104 ], [ 0, %134 ], [ 0, %145 ], [ %128, %132 ]
  ret i32 %147
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define internal void @t2_hints_open(%struct.T2_HintsRec_* nocapture) #5 {
  %2 = bitcast %struct.T2_HintsRec_* %0 to %struct.PS_HintsRec_*
  %3 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %2, i64 0, i32 1
  store i32 0, i32* %3, align 8
  %4 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %2, i64 0, i32 3
  store i32 2, i32* %4, align 8
  %5 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %2, i64 0, i32 4, i64 0, i32 0, i32 0
  store i32 0, i32* %5, align 8
  %6 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %2, i64 0, i32 4, i64 0, i32 1, i32 0
  store i32 0, i32* %6, align 8
  %7 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %2, i64 0, i32 4, i64 0, i32 2, i32 0
  store i32 0, i32* %7, align 8
  %8 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %2, i64 0, i32 4, i64 1, i32 0, i32 0
  store i32 0, i32* %8, align 8
  %9 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %2, i64 0, i32 4, i64 1, i32 1, i32 0
  store i32 0, i32* %9, align 8
  %10 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %2, i64 0, i32 4, i64 1, i32 2, i32 0
  store i32 0, i32* %10, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @t2_hints_stems(%struct.T2_HintsRec_* nocapture, i32, i32, i64* nocapture readonly) #0 {
  %5 = alloca [32 x i64], align 16
  %6 = bitcast [32 x i64]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %6) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -86, i64 256, i1 false)
  %7 = icmp sgt i32 %2, 0
  br i1 %7, label %8, label %68

8:                                                ; preds = %4
  %9 = bitcast %struct.T2_HintsRec_* %0 to %struct.PS_HintsRec_*
  %10 = getelementptr inbounds [32 x i64], [32 x i64]* %5, i64 0, i64 0
  %11 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %9, i64 0, i32 1
  %12 = icmp ne i32 %1, 0
  %13 = zext i1 %12 to i64
  %14 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %9, i64 0, i32 4, i64 %13
  %15 = bitcast %struct.T2_HintsRec_* %0 to %struct.FT_MemoryRec_**
  br label %16

16:                                               ; preds = %65, %8
  %17 = phi i32 [ %2, %8 ], [ %66, %65 ]
  %18 = phi i64 [ 0, %8 ], [ %30, %65 ]
  %19 = icmp slt i32 %17, 16
  %20 = select i1 %19, i32 %17, i32 16
  %21 = shl nsw i32 %20, 1
  %22 = sext i32 %21 to i64
  br label %25

23:                                               ; preds = %25
  %24 = sext i32 %21 to i64
  br label %36

25:                                               ; preds = %16, %25
  %26 = phi i64 [ 0, %16 ], [ %34, %25 ]
  %27 = phi i64 [ %18, %16 ], [ %30, %25 ]
  %28 = getelementptr inbounds i64, i64* %3, i64 %26
  %29 = load i64, i64* %28, align 8
  %30 = add i64 %29, %27
  %31 = tail call i64 @FT_RoundFix(i64 %30) #6
  %32 = ashr i64 %31, 16
  %33 = getelementptr inbounds [32 x i64], [32 x i64]* %5, i64 0, i64 %26
  store i64 %32, i64* %33, align 8
  %34 = add nuw nsw i64 %26, 1
  %35 = icmp slt i64 %34, %22
  br i1 %35, label %25, label %23

36:                                               ; preds = %23, %36
  %37 = phi i64 [ 0, %23 ], [ %44, %36 ]
  %38 = or i64 %37, 1
  %39 = getelementptr inbounds [32 x i64], [32 x i64]* %5, i64 0, i64 %38
  %40 = load i64, i64* %39, align 8
  %41 = getelementptr inbounds [32 x i64], [32 x i64]* %5, i64 0, i64 %37
  %42 = load i64, i64* %41, align 16
  %43 = sub nsw i64 %40, %42
  store i64 %43, i64* %39, align 8
  %44 = add nuw nsw i64 %37, 2
  %45 = icmp slt i64 %44, %24
  br i1 %45, label %36, label %46

46:                                               ; preds = %36
  %47 = load i32, i32* %11, align 8
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %65

49:                                               ; preds = %46, %61
  %50 = phi i64* [ %63, %61 ], [ %10, %46 ]
  %51 = phi i32 [ %62, %61 ], [ %20, %46 ]
  %52 = load %struct.FT_MemoryRec_*, %struct.FT_MemoryRec_** %15, align 8
  %53 = load i64, i64* %50, align 8
  %54 = trunc i64 %53 to i32
  %55 = getelementptr inbounds i64, i64* %50, i64 1
  %56 = load i64, i64* %55, align 8
  %57 = trunc i64 %56 to i32
  %58 = tail call fastcc i32 @ps_dimension_add_t1stem(%struct.PS_DimensionRec_* %14, i32 %54, i32 %57, %struct.FT_MemoryRec_* %52, i32* null) #6
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %61, label %60

60:                                               ; preds = %49
  store i32 %58, i32* %11, align 8
  br label %65

61:                                               ; preds = %49
  %62 = add nsw i32 %51, -1
  %63 = getelementptr inbounds i64, i64* %50, i64 2
  %64 = icmp sgt i32 %62, 0
  br i1 %64, label %49, label %65

65:                                               ; preds = %61, %46, %60
  %66 = sub nsw i32 %17, %20
  %67 = icmp sgt i32 %66, 0
  br i1 %67, label %16, label %68

68:                                               ; preds = %65, %4
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %6) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @ps_hints_t2mask(%struct.PS_HintsRec_* nocapture, i32, i32, i8* nocapture readonly) #0 {
  %5 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %27

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %0, i64 0, i32 4, i64 0
  %10 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %0, i64 0, i32 0
  %11 = load %struct.FT_MemoryRec_*, %struct.FT_MemoryRec_** %10, align 8
  %12 = getelementptr inbounds %struct.PS_DimensionRec_, %struct.PS_DimensionRec_* %9, i64 0, i32 0, i32 0
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %0, i64 0, i32 4, i64 1
  %15 = getelementptr inbounds %struct.PS_DimensionRec_, %struct.PS_DimensionRec_* %14, i64 0, i32 0, i32 0
  %16 = load i32, i32* %15, align 8
  %17 = add i32 %16, %13
  %18 = icmp eq i32 %17, %2
  br i1 %18, label %19, label %27

19:                                               ; preds = %8
  %20 = tail call fastcc i32 @ps_dimension_set_mask_bits(%struct.PS_DimensionRec_* %9, i8* %3, i32 %16, i32 %13, i32 %1, %struct.FT_MemoryRec_* %11)
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %25

22:                                               ; preds = %19
  %23 = tail call fastcc i32 @ps_dimension_set_mask_bits(%struct.PS_DimensionRec_* %14, i8* %3, i32 0, i32 %16, i32 %1, %struct.FT_MemoryRec_* %11)
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %27, label %25

25:                                               ; preds = %19, %22
  %26 = phi i32 [ %23, %22 ], [ %20, %19 ]
  store i32 %26, i32* %5, align 8
  br label %27

27:                                               ; preds = %22, %8, %4, %25
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @ps_hints_t2counter(%struct.PS_HintsRec_* nocapture, i32, i8* nocapture readonly) #0 {
  %4 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %26

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %0, i64 0, i32 4, i64 0
  %9 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %0, i64 0, i32 0
  %10 = load %struct.FT_MemoryRec_*, %struct.FT_MemoryRec_** %9, align 8
  %11 = getelementptr inbounds %struct.PS_DimensionRec_, %struct.PS_DimensionRec_* %8, i64 0, i32 0, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = getelementptr inbounds %struct.PS_HintsRec_, %struct.PS_HintsRec_* %0, i64 0, i32 4, i64 1
  %14 = getelementptr inbounds %struct.PS_DimensionRec_, %struct.PS_DimensionRec_* %13, i64 0, i32 0, i32 0
  %15 = load i32, i32* %14, align 8
  %16 = add i32 %15, %12
  %17 = icmp eq i32 %16, %1
  br i1 %17, label %18, label %26

18:                                               ; preds = %7
  %19 = tail call fastcc i32 @ps_dimension_set_mask_bits(%struct.PS_DimensionRec_* %8, i8* %2, i32 0, i32 %12, i32 0, %struct.FT_MemoryRec_* %10)
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %24

21:                                               ; preds = %18
  %22 = tail call fastcc i32 @ps_dimension_set_mask_bits(%struct.PS_DimensionRec_* %13, i8* %2, i32 %12, i32 %15, i32 0, %struct.FT_MemoryRec_* %10)
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %26, label %24

24:                                               ; preds = %18, %21
  %25 = phi i32 [ %22, %21 ], [ %19, %18 ]
  store i32 %25, i32* %4, align 8
  br label %26

26:                                               ; preds = %21, %7, %3, %24
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @ps_dimension_set_mask_bits(%struct.PS_DimensionRec_* nocapture, i8* nocapture readonly, i32, i32, i32, %struct.FT_MemoryRec_*) unnamed_addr #0 {
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = getelementptr inbounds %struct.PS_DimensionRec_, %struct.PS_DimensionRec_* %0, i64 0, i32 1, i32 0
  %11 = load i32, i32* %10, align 8
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %21, label %13

13:                                               ; preds = %6
  %14 = getelementptr inbounds %struct.PS_DimensionRec_, %struct.PS_DimensionRec_* %0, i64 0, i32 1, i32 2
  %15 = load %struct.PS_MaskRec_*, %struct.PS_MaskRec_** %14, align 8
  %16 = zext i32 %11 to i64
  %17 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %15, i64 %16
  %18 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %17, i64 -1
  %19 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %18, i64 0, i32 3
  store i32 %4, i32* %19, align 8
  %20 = load i32, i32* %10, align 8
  br label %21

21:                                               ; preds = %13, %6
  %22 = phi i32 [ 0, %6 ], [ %20, %13 ]
  %23 = add i32 %22, 1
  %24 = getelementptr inbounds %struct.PS_DimensionRec_, %struct.PS_DimensionRec_* %0, i64 0, i32 1, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = icmp ugt i32 %23, %25
  br i1 %26, label %30, label %27

27:                                               ; preds = %21
  %28 = getelementptr inbounds %struct.PS_DimensionRec_, %struct.PS_DimensionRec_* %0, i64 0, i32 1, i32 2
  %29 = load %struct.PS_MaskRec_*, %struct.PS_MaskRec_** %28, align 8
  br label %45

30:                                               ; preds = %21
  %31 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %31) #6
  store i32 0, i32* %9, align 4
  %32 = add i32 %22, 8
  %33 = and i32 %32, -8
  %34 = zext i32 %25 to i64
  %35 = zext i32 %33 to i64
  %36 = getelementptr inbounds %struct.PS_DimensionRec_, %struct.PS_DimensionRec_* %0, i64 0, i32 1, i32 2
  %37 = bitcast %struct.PS_MaskRec_** %36 to i8**
  %38 = load i8*, i8** %37, align 8
  %39 = call i8* @ft_mem_realloc(%struct.FT_MemoryRec_* %5, i64 24, i64 %34, i64 %35, i8* %38, i32* nonnull %9) #6
  store i8* %39, i8** %37, align 8
  %40 = load i32, i32* %9, align 4
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %44

42:                                               ; preds = %30
  %43 = bitcast i8* %39 to %struct.PS_MaskRec_*
  store i32 %33, i32* %24, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %31) #6
  br label %45

44:                                               ; preds = %30
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %31) #6
  br label %144

45:                                               ; preds = %27, %42
  %46 = phi %struct.PS_MaskRec_* [ %29, %27 ], [ %43, %42 ]
  %47 = zext i32 %23 to i64
  %48 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %46, i64 %47
  %49 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %48, i64 -1
  %50 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %49, i64 0, i32 0
  store i32 0, i32* %50, align 8
  %51 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %49, i64 0, i32 3
  store i32 0, i32* %51, align 8
  store i32 %23, i32* %10, align 8
  %52 = icmp eq i32 %23, 0
  br i1 %52, label %53, label %73

53:                                               ; preds = %45
  %54 = load i32, i32* %24, align 4
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %59, label %56

56:                                               ; preds = %53
  %57 = getelementptr inbounds %struct.PS_DimensionRec_, %struct.PS_DimensionRec_* %0, i64 0, i32 1, i32 2
  %58 = load %struct.PS_MaskRec_*, %struct.PS_MaskRec_** %57, align 8
  br label %69

59:                                               ; preds = %53
  %60 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %60) #6
  store i32 0, i32* %8, align 4
  %61 = getelementptr inbounds %struct.PS_DimensionRec_, %struct.PS_DimensionRec_* %0, i64 0, i32 1, i32 2
  %62 = bitcast %struct.PS_MaskRec_** %61 to i8**
  %63 = load i8*, i8** %62, align 8
  %64 = call i8* @ft_mem_realloc(%struct.FT_MemoryRec_* %5, i64 24, i64 0, i64 8, i8* %63, i32* nonnull %8) #6
  store i8* %64, i8** %62, align 8
  %65 = load i32, i32* %8, align 4
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %78

67:                                               ; preds = %59
  %68 = bitcast i8* %64 to %struct.PS_MaskRec_*
  store i32 8, i32* %24, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %60) #6
  br label %69

69:                                               ; preds = %67, %56
  %70 = phi %struct.PS_MaskRec_* [ %58, %56 ], [ %68, %67 ]
  %71 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %70, i64 0, i32 0
  store i32 0, i32* %71, align 8
  %72 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %70, i64 0, i32 3
  store i32 0, i32* %72, align 8
  store i32 1, i32* %10, align 8
  br label %79

73:                                               ; preds = %45
  %74 = getelementptr inbounds %struct.PS_DimensionRec_, %struct.PS_DimensionRec_* %0, i64 0, i32 1, i32 2
  %75 = load %struct.PS_MaskRec_*, %struct.PS_MaskRec_** %74, align 8
  %76 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %75, i64 %47
  %77 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %76, i64 -1
  br label %79

78:                                               ; preds = %59
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %60) #6
  br label %144

79:                                               ; preds = %73, %69
  %80 = phi %struct.PS_MaskRec_* [ %70, %69 ], [ %77, %73 ]
  %81 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %80, i64 0, i32 1
  %82 = load i32, i32* %81, align 4
  %83 = add i32 %82, 7
  %84 = lshr i32 %83, 3
  %85 = add i32 %3, 7
  %86 = lshr i32 %85, 3
  %87 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %87) #6
  store i32 0, i32* %7, align 4
  %88 = icmp ugt i32 %86, %84
  br i1 %88, label %92, label %89

89:                                               ; preds = %79
  %90 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %80, i64 0, i32 2
  %91 = load i8*, i8** %90, align 8
  br label %105

92:                                               ; preds = %79
  %93 = add nuw nsw i32 %86, 7
  %94 = and i32 %93, 1073741816
  %95 = zext i32 %84 to i64
  %96 = zext i32 %94 to i64
  %97 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %80, i64 0, i32 2
  %98 = load i8*, i8** %97, align 8
  %99 = call i8* @ft_mem_realloc(%struct.FT_MemoryRec_* %5, i64 1, i64 %95, i64 %96, i8* %98, i32* nonnull %7) #6
  store i8* %99, i8** %97, align 8
  %100 = load i32, i32* %7, align 4
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %102, label %104

102:                                              ; preds = %92
  %103 = shl i32 %94, 3
  store i32 %103, i32* %81, align 4
  br label %105

104:                                              ; preds = %92
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %87) #6
  br label %144

105:                                              ; preds = %102, %89
  %106 = phi i8* [ %91, %89 ], [ %99, %102 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %87) #6
  %107 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %80, i64 0, i32 0
  store i32 %3, i32* %107, align 8
  %108 = icmp eq i32 %3, 0
  br i1 %108, label %144, label %109

109:                                              ; preds = %105
  %110 = and i32 %2, 7
  %111 = lshr i32 128, %110
  %112 = lshr i32 %2, 3
  %113 = zext i32 %112 to i64
  %114 = getelementptr inbounds i8, i8* %1, i64 %113
  br label %115

115:                                              ; preds = %115, %109
  %116 = phi i32 [ %141, %115 ], [ 128, %109 ]
  %117 = phi i8* [ %140, %115 ], [ %106, %109 ]
  %118 = phi i32 [ %136, %115 ], [ %111, %109 ]
  %119 = phi i8* [ %135, %115 ], [ %114, %109 ]
  %120 = phi i32 [ %142, %115 ], [ %3, %109 ]
  %121 = load i8, i8* %117, align 1
  %122 = zext i8 %121 to i32
  %123 = xor i32 %116, 255
  %124 = and i32 %123, %122
  %125 = load i8, i8* %119, align 1
  %126 = zext i8 %125 to i32
  %127 = and i32 %118, %126
  %128 = icmp eq i32 %127, 0
  %129 = or i32 %116, %122
  %130 = select i1 %128, i32 %124, i32 %129
  %131 = trunc i32 %130 to i8
  store i8 %131, i8* %117, align 1
  %132 = ashr i32 %118, 1
  %133 = icmp eq i32 %132, 0
  %134 = getelementptr inbounds i8, i8* %119, i64 1
  %135 = select i1 %133, i8* %134, i8* %119
  %136 = select i1 %133, i32 128, i32 %132
  %137 = ashr i32 %116, 1
  %138 = icmp eq i32 %137, 0
  %139 = getelementptr inbounds i8, i8* %117, i64 1
  %140 = select i1 %138, i8* %139, i8* %117
  %141 = select i1 %138, i32 128, i32 %137
  %142 = add i32 %120, -1
  %143 = icmp eq i32 %142, 0
  br i1 %143, label %144, label %115

144:                                              ; preds = %115, %105, %104, %78, %44
  %145 = phi i32 [ %40, %44 ], [ %65, %78 ], [ %100, %104 ], [ 0, %105 ], [ 0, %115 ]
  ret i32 %145
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @ps_dimension_done(%struct.PS_DimensionRec_* nocapture, %struct.FT_MemoryRec_*) unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.PS_DimensionRec_, %struct.PS_DimensionRec_* %0, i64 0, i32 2
  %4 = getelementptr inbounds %struct.PS_DimensionRec_, %struct.PS_DimensionRec_* %0, i64 0, i32 2, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %struct.PS_DimensionRec_, %struct.PS_DimensionRec_* %0, i64 0, i32 2, i32 2
  %7 = load %struct.PS_MaskRec_*, %struct.PS_MaskRec_** %6, align 8
  %8 = icmp eq i32 %5, 0
  br i1 %8, label %9, label %11

9:                                                ; preds = %2
  %10 = bitcast %struct.PS_MaskRec_* %7 to i8*
  br label %23

11:                                               ; preds = %2, %11
  %12 = phi %struct.PS_MaskRec_* [ %18, %11 ], [ %7, %2 ]
  %13 = phi i32 [ %17, %11 ], [ %5, %2 ]
  %14 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %12, i64 0, i32 2
  %15 = load i8*, i8** %14, align 8
  tail call void @ft_mem_free(%struct.FT_MemoryRec_* %1, i8* %15) #6
  %16 = bitcast %struct.PS_MaskRec_* %12 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 20, i1 false) #6
  %17 = add i32 %13, -1
  %18 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %12, i64 1
  %19 = icmp eq i32 %17, 0
  br i1 %19, label %20, label %11

20:                                               ; preds = %11
  %21 = bitcast %struct.PS_MaskRec_** %6 to i8**
  %22 = load i8*, i8** %21, align 8
  br label %23

23:                                               ; preds = %9, %20
  %24 = phi i8* [ %22, %20 ], [ %10, %9 ]
  tail call void @ft_mem_free(%struct.FT_MemoryRec_* %1, i8* %24) #6
  %25 = bitcast %struct.PS_Mask_TableRec_* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %25, i8 0, i64 16, i1 false) #6
  %26 = getelementptr inbounds %struct.PS_DimensionRec_, %struct.PS_DimensionRec_* %0, i64 0, i32 1
  %27 = getelementptr inbounds %struct.PS_DimensionRec_, %struct.PS_DimensionRec_* %0, i64 0, i32 1, i32 1
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %struct.PS_DimensionRec_, %struct.PS_DimensionRec_* %0, i64 0, i32 1, i32 2
  %30 = load %struct.PS_MaskRec_*, %struct.PS_MaskRec_** %29, align 8
  %31 = icmp eq i32 %28, 0
  br i1 %31, label %32, label %34

32:                                               ; preds = %23
  %33 = bitcast %struct.PS_MaskRec_* %30 to i8*
  br label %46

34:                                               ; preds = %23, %34
  %35 = phi %struct.PS_MaskRec_* [ %41, %34 ], [ %30, %23 ]
  %36 = phi i32 [ %40, %34 ], [ %28, %23 ]
  %37 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %35, i64 0, i32 2
  %38 = load i8*, i8** %37, align 8
  tail call void @ft_mem_free(%struct.FT_MemoryRec_* %1, i8* %38) #6
  %39 = bitcast %struct.PS_MaskRec_* %35 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %39, i8 0, i64 20, i1 false) #6
  %40 = add i32 %36, -1
  %41 = getelementptr inbounds %struct.PS_MaskRec_, %struct.PS_MaskRec_* %35, i64 1
  %42 = icmp eq i32 %40, 0
  br i1 %42, label %43, label %34

43:                                               ; preds = %34
  %44 = bitcast %struct.PS_MaskRec_** %29 to i8**
  %45 = load i8*, i8** %44, align 8
  br label %46

46:                                               ; preds = %32, %43
  %47 = phi i8* [ %45, %43 ], [ %33, %32 ]
  tail call void @ft_mem_free(%struct.FT_MemoryRec_* %1, i8* %47) #6
  %48 = bitcast %struct.PS_Mask_TableRec_* %26 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %48, i8 0, i64 16, i1 false) #6
  %49 = getelementptr inbounds %struct.PS_DimensionRec_, %struct.PS_DimensionRec_* %0, i64 0, i32 0, i32 2
  %50 = bitcast %struct.PS_HintRec_** %49 to i8**
  %51 = load i8*, i8** %50, align 8
  tail call void @ft_mem_free(%struct.FT_MemoryRec_* %1, i8* %51) #6
  %52 = bitcast %struct.PS_DimensionRec_* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %52, i8 0, i64 16, i1 false) #6
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10, !8}
!10 = !{!"llvm.loop.unroll.runtime.disable"}
!11 = distinct !{!11, !8}
!12 = distinct !{!12, !10, !8}
!13 = distinct !{!13, !8}
!14 = distinct !{!14, !10, !8}
!15 = distinct !{!15, !8}
!16 = distinct !{!16, !10, !8}
!17 = !{!18}
!18 = distinct !{!18, !19}
!19 = distinct !{!19, !"LVerDomain"}
!20 = !{!21}
!21 = distinct !{!21, !19}
!22 = distinct !{!22, !8}
!23 = distinct !{!23, !3}
!24 = distinct !{!24, !8}
