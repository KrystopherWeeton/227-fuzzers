; ModuleID = '../../third_party/webrtc/common_audio/window_generator.cc'
source_filename = "../../third_party/webrtc/common_audio/window_generator.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::complex" = type { float, float }

$_ZNSt3__1mlIfEENS_7complexIT_EERKS3_S5_ = comdat any

$_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE1EiEES6_EEEvPKciS8_DpRKT_E1t = comdat any

$_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t = comdat any

$_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE5EmEENS4_ILS5_4EjEEEEEvPKciS9_DpRKT_E1t = comdat any

@.str = private unnamed_addr constant [58 x i8] c"../../third_party/webrtc/common_audio/window_generator.cc\00", align 1
@.str.1 = private unnamed_addr constant [11 x i8] c"length > 1\00", align 1
@.str.2 = private unnamed_addr constant [18 x i8] c"window != nullptr\00", align 1
@.str.3 = private unnamed_addr constant [12 x i8] c"length > 1U\00", align 1
@_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE1EiEES6_EEEvPKciS8_DpRKT_E1t = linkonce_odr hidden constant [4 x i8] c"\0D\01\01\00", comdat, align 1
@_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t = linkonce_odr hidden constant [1 x i8] zeroinitializer, comdat, align 1
@_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE5EmEENS4_ILS5_4EjEEEEEvPKciS9_DpRKT_E1t = linkonce_odr hidden constant [4 x i8] c"\0D\05\04\00", comdat, align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc15WindowGenerator7HanningEiPf(i32, float*) local_unnamed_addr #0 align 2 {
  %3 = icmp sgt i32 %0, 1
  br i1 %3, label %5, label %4

4:                                                ; preds = %2
  tail call void (i8*, i32, i8*, i8*, ...) @_ZN3rtc18webrtc_checks_impl8FatalLogEPKciS2_PKNS0_12CheckArgTypeEz(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str, i64 0, i64 0), i32 40, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE1EiEES6_EEEvPKciS8_DpRKT_E1t, i64 0, i64 0), i32 %0, i32 1) #7
  unreachable

5:                                                ; preds = %2
  %6 = icmp eq float* %1, null
  br i1 %6, label %15, label %7

7:                                                ; preds = %5
  %8 = add nsw i32 %0, -1
  %9 = sitofp i32 %8 to float
  %10 = zext i32 %0 to i64
  %11 = and i64 %10, 1
  %12 = icmp eq i32 %0, 1
  br i1 %12, label %16, label %13

13:                                               ; preds = %7
  %14 = sub nsw i64 %10, %11
  br label %29

15:                                               ; preds = %5
  tail call void (i8*, i32, i8*, i8*, ...) @_ZN3rtc18webrtc_checks_impl8FatalLogEPKciS2_PKNS0_12CheckArgTypeEz(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str, i64 0, i64 0), i32 41, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, i64 0, i64 0)) #7
  unreachable

16:                                               ; preds = %29, %7
  %17 = phi i64 [ 0, %7 ], [ %49, %29 ]
  %18 = icmp eq i64 %11, 0
  br i1 %18, label %28, label %19

19:                                               ; preds = %16
  %20 = trunc i64 %17 to i32
  %21 = sitofp i32 %20 to float
  %22 = fmul float %21, 0x401921FB60000000
  %23 = fdiv float %22, %9
  %24 = tail call float @cosf(float %23) #8
  %25 = fsub float 1.000000e+00, %24
  %26 = fmul float %25, 5.000000e-01
  %27 = getelementptr inbounds float, float* %1, i64 %17
  store float %26, float* %27, align 4
  br label %28

28:                                               ; preds = %16, %19
  ret void

29:                                               ; preds = %29, %13
  %30 = phi i64 [ 0, %13 ], [ %49, %29 ]
  %31 = phi i64 [ %14, %13 ], [ %50, %29 ]
  %32 = trunc i64 %30 to i32
  %33 = sitofp i32 %32 to float
  %34 = fmul float %33, 0x401921FB60000000
  %35 = fdiv float %34, %9
  %36 = tail call float @cosf(float %35) #8
  %37 = fsub float 1.000000e+00, %36
  %38 = fmul float %37, 5.000000e-01
  %39 = getelementptr inbounds float, float* %1, i64 %30
  store float %38, float* %39, align 4
  %40 = or i64 %30, 1
  %41 = trunc i64 %40 to i32
  %42 = sitofp i32 %41 to float
  %43 = fmul float %42, 0x401921FB60000000
  %44 = fdiv float %43, %9
  %45 = tail call float @cosf(float %44) #8
  %46 = fsub float 1.000000e+00, %45
  %47 = fmul float %46, 5.000000e-01
  %48 = getelementptr inbounds float, float* %1, i64 %40
  store float %47, float* %48, align 4
  %49 = add nuw nsw i64 %30, 2
  %50 = add i64 %31, -2
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %16, label %29
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare float @cosf(float) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc15WindowGenerator19KaiserBesselDerivedEfmPf(float, i64, float*) local_unnamed_addr #3 align 2 {
  %4 = alloca %"class.std::__1::complex", align 4
  %5 = alloca <2 x float>, align 8
  %6 = alloca <2 x float>, align 8
  %7 = alloca <2 x float>, align 8
  %8 = alloca <2 x float>, align 8
  %9 = alloca <2 x float>, align 8
  %10 = alloca <2 x float>, align 8
  %11 = alloca %"class.std::__1::complex", align 4
  %12 = icmp ugt i64 %1, 1
  br i1 %12, label %14, label %13

13:                                               ; preds = %3
  tail call void (i8*, i32, i8*, i8*, ...) @_ZN3rtc18webrtc_checks_impl8FatalLogEPKciS2_PKNS0_12CheckArgTypeEz(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str, i64 0, i64 0), i32 51, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE5EmEENS4_ILS5_4EjEEEEEvPKciS9_DpRKT_E1t, i64 0, i64 0), i64 %1, i32 1) #7
  unreachable

14:                                               ; preds = %3
  %15 = icmp eq float* %2, null
  br i1 %15, label %16, label %17

16:                                               ; preds = %14
  tail call void (i8*, i32, i8*, i8*, ...) @_ZN3rtc18webrtc_checks_impl8FatalLogEPKciS2_PKNS0_12CheckArgTypeEz(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str, i64 0, i64 0), i32 52, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, i64 0, i64 0)) #7
  unreachable

17:                                               ; preds = %14
  %18 = add i64 %1, 1
  %19 = lshr i64 %18, 1
  %20 = bitcast %"class.std::__1::complex"* %11 to i8*
  %21 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %11, i64 0, i32 0
  %22 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %11, i64 0, i32 1
  %23 = uitofp i64 %1 to float
  %24 = fmul float %0, 0x400921FB60000000
  %25 = bitcast <2 x float>* %5 to %"class.std::__1::complex"*
  %26 = bitcast <2 x float>* %6 to %"class.std::__1::complex"*
  %27 = bitcast <2 x float>* %7 to %"class.std::__1::complex"*
  %28 = bitcast <2 x float>* %8 to %"class.std::__1::complex"*
  %29 = bitcast <2 x float>* %9 to %"class.std::__1::complex"*
  %30 = bitcast <2 x float>* %10 to %"class.std::__1::complex"*
  %31 = bitcast <2 x float>* %5 to i8*
  %32 = bitcast %"class.std::__1::complex"* %4 to i8*
  %33 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %4, i64 0, i32 0
  %34 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %4, i64 0, i32 1
  %35 = bitcast <2 x float>* %6 to i8*
  %36 = bitcast <2 x float>* %7 to i8*
  %37 = bitcast <2 x float>* %8 to i8*
  %38 = bitcast <2 x float>* %9 to i8*
  %39 = bitcast <2 x float>* %10 to i8*
  br label %43

40:                                               ; preds = %114
  %41 = add i64 %1, -1
  %42 = icmp ult i64 %41, %19
  br i1 %42, label %155, label %158

43:                                               ; preds = %17, %114
  %44 = phi i64 [ 0, %17 ], [ %153, %114 ]
  %45 = phi float [ 0.000000e+00, %17 ], [ %151, %114 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #8
  %46 = uitofp i64 %44 to float
  %47 = fmul float %46, 4.000000e+00
  %48 = fdiv float %47, %23
  %49 = fadd float %48, -1.000000e+00
  store float %49, float* %21, align 4
  store float 0.000000e+00, float* %22, align 4
  %50 = call <2 x float> @_ZNSt3__1mlIfEENS_7complexIT_EERKS3_S5_(%"class.std::__1::complex"* nonnull dereferenceable(8) %11, %"class.std::__1::complex"* nonnull dereferenceable(8) %11)
  %51 = extractelement <2 x float> %50, i32 0
  %52 = extractelement <2 x float> %50, i32 1
  %53 = fsub float -0.000000e+00, %52
  %54 = fsub float 1.000000e+00, %51
  %55 = call float @llvm.fabs.f32(float %53) #9
  %56 = fcmp oeq float %55, 0x7FF0000000000000
  br i1 %56, label %57, label %59

57:                                               ; preds = %43
  %58 = insertelement <2 x float> <float 0x7FF0000000000000, float undef>, float %53, i32 1
  br label %114

59:                                               ; preds = %43
  %60 = call float @llvm.fabs.f32(float %54) #9
  %61 = fcmp oeq float %60, 0x7FF0000000000000
  br i1 %61, label %62, label %75

62:                                               ; preds = %59
  %63 = fcmp ogt float %54, 0.000000e+00
  %64 = fcmp uno float %52, 0.000000e+00
  br i1 %63, label %65, label %70

65:                                               ; preds = %62
  %66 = call float @llvm.copysign.f32(float 0.000000e+00, float %53) #8
  %67 = select i1 %64, float %53, float %66
  %68 = insertelement <2 x float> undef, float %54, i32 0
  %69 = insertelement <2 x float> %68, float %67, i32 1
  br label %114

70:                                               ; preds = %62
  %71 = select i1 %64, float %53, float 0.000000e+00
  %72 = call float @llvm.copysign.f32(float %54, float %53) #8
  %73 = insertelement <2 x float> undef, float %71, i32 0
  %74 = insertelement <2 x float> %73, float %72, i32 1
  br label %114

75:                                               ; preds = %59
  %76 = call float @hypotf(float %54, float %53) #8
  %77 = call float @sqrtf(float %76) #8
  %78 = call float @atan2f(float %53, float %54) #8
  %79 = fmul float %78, 5.000000e-01
  %80 = fcmp uno float %77, 0.000000e+00
  %81 = bitcast float %77 to i32
  %82 = icmp slt i32 %81, 0
  %83 = or i1 %80, %82
  br i1 %83, label %114, label %84

84:                                               ; preds = %75
  %85 = fcmp uno float %79, 0.000000e+00
  br i1 %85, label %86, label %95

86:                                               ; preds = %84
  %87 = call float @llvm.fabs.f32(float %77) #9
  %88 = fcmp oeq float %87, 0x7FF0000000000000
  br i1 %88, label %89, label %92

89:                                               ; preds = %86
  %90 = insertelement <2 x float> undef, float %77, i32 0
  %91 = insertelement <2 x float> %90, float %79, i32 1
  br label %114

92:                                               ; preds = %86
  %93 = insertelement <2 x float> undef, float %79, i32 0
  %94 = shufflevector <2 x float> %93, <2 x float> undef, <2 x i32> zeroinitializer
  br label %114

95:                                               ; preds = %84
  %96 = call float @llvm.fabs.f32(float %79) #9
  %97 = fcmp oeq float %96, 0x7FF0000000000000
  br i1 %97, label %98, label %103

98:                                               ; preds = %95
  %99 = call float @llvm.fabs.f32(float %77) #9
  %100 = fcmp oeq float %99, 0x7FF0000000000000
  br i1 %100, label %101, label %114

101:                                              ; preds = %98
  %102 = insertelement <2 x float> <float undef, float 0x7FF8000000000000>, float %77, i32 0
  br label %114

103:                                              ; preds = %95
  %104 = call float @cosf(float %79) #8
  %105 = fmul float %77, %104
  %106 = fcmp ord float %105, 0.000000e+00
  %107 = select i1 %106, float %105, float 0.000000e+00
  %108 = call float @sinf(float %79) #8
  %109 = fmul float %77, %108
  %110 = fcmp ord float %109, 0.000000e+00
  %111 = select i1 %110, float %109, float 0.000000e+00
  %112 = insertelement <2 x float> undef, float %107, i32 0
  %113 = insertelement <2 x float> %112, float %111, i32 1
  br label %114

114:                                              ; preds = %57, %65, %70, %75, %89, %92, %98, %101, %103
  %115 = phi <2 x float> [ %58, %57 ], [ %69, %65 ], [ %74, %70 ], [ %91, %89 ], [ %94, %92 ], [ %102, %101 ], [ %113, %103 ], [ <float 0x7FF8000000000000, float 0x7FF8000000000000>, %75 ], [ <float 0x7FF8000000000000, float 0x7FF8000000000000>, %98 ]
  %116 = extractelement <2 x float> %115, i32 0
  %117 = fmul float %24, %116
  %118 = extractelement <2 x float> %115, i32 1
  %119 = fmul float %24, %118
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %31) #8
  %120 = fdiv float %117, 3.750000e+00
  %121 = fdiv float %119, 3.750000e+00
  %122 = insertelement <2 x float> undef, float %120, i32 0
  %123 = insertelement <2 x float> %122, float %121, i32 1
  store <2 x float> %123, <2 x float>* %5, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %32) #8
  store float %120, float* %33, align 4
  store float %121, float* %34, align 4
  %124 = call <2 x float> @_ZNSt3__1mlIfEENS_7complexIT_EERKS3_S5_(%"class.std::__1::complex"* nonnull dereferenceable(8) %25, %"class.std::__1::complex"* nonnull dereferenceable(8) %4) #8
  store <2 x float> %124, <2 x float>* %5, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %32) #8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %36) #8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37) #8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %38) #8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %39) #8
  %125 = extractelement <2 x float> %124, i32 0
  %126 = fmul float %125, 0x3F72C3D760000000
  %127 = extractelement <2 x float> %124, i32 1
  %128 = fmul float %127, 0x3F72C3D760000000
  %129 = insertelement <2 x float> undef, float %128, i32 1
  %130 = fadd float %126, 0x3FA278A880000000
  %131 = insertelement <2 x float> %129, float %130, i32 0
  store <2 x float> %131, <2 x float>* %10, align 8
  %132 = call <2 x float> @_ZNSt3__1mlIfEENS_7complexIT_EERKS3_S5_(%"class.std::__1::complex"* nonnull dereferenceable(8) %25, %"class.std::__1::complex"* nonnull dereferenceable(8) %30) #8
  %133 = extractelement <2 x float> %132, i32 0
  %134 = fadd float %133, 0x3FD105B480000000
  %135 = insertelement <2 x float> %132, float %134, i32 0
  store <2 x float> %135, <2 x float>* %9, align 8
  %136 = call <2 x float> @_ZNSt3__1mlIfEENS_7complexIT_EERKS3_S5_(%"class.std::__1::complex"* nonnull dereferenceable(8) %25, %"class.std::__1::complex"* nonnull dereferenceable(8) %29) #8
  %137 = extractelement <2 x float> %136, i32 0
  %138 = fadd float %137, 0x3FF34ED840000000
  %139 = insertelement <2 x float> %136, float %138, i32 0
  store <2 x float> %139, <2 x float>* %8, align 8
  %140 = call <2 x float> @_ZNSt3__1mlIfEENS_7complexIT_EERKS3_S5_(%"class.std::__1::complex"* nonnull dereferenceable(8) %25, %"class.std::__1::complex"* nonnull dereferenceable(8) %28) #8
  %141 = extractelement <2 x float> %140, i32 0
  %142 = fadd float %141, 0x4008B833C0000000
  %143 = insertelement <2 x float> %140, float %142, i32 0
  store <2 x float> %143, <2 x float>* %7, align 8
  %144 = call <2 x float> @_ZNSt3__1mlIfEENS_7complexIT_EERKS3_S5_(%"class.std::__1::complex"* nonnull dereferenceable(8) %25, %"class.std::__1::complex"* nonnull dereferenceable(8) %27) #8
  %145 = extractelement <2 x float> %144, i32 0
  %146 = fadd float %145, 0x400C1FFEE0000000
  %147 = insertelement <2 x float> %144, float %146, i32 0
  store <2 x float> %147, <2 x float>* %6, align 8
  %148 = call <2 x float> @_ZNSt3__1mlIfEENS_7complexIT_EERKS3_S5_(%"class.std::__1::complex"* nonnull dereferenceable(8) %25, %"class.std::__1::complex"* nonnull dereferenceable(8) %26) #8
  %149 = extractelement <2 x float> %148, i32 0
  %150 = fadd float %149, 1.000000e+00
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %39) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %38) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %36) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31) #8
  %151 = fadd float %45, %150
  %152 = getelementptr inbounds float, float* %2, i64 %44
  store float %151, float* %152, align 4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #8
  %153 = add nuw i64 %44, 1
  %154 = icmp eq i64 %44, %19
  br i1 %154, label %40, label %43

155:                                              ; preds = %158, %40
  %156 = and i64 %1, 1
  %157 = icmp eq i64 %156, 0
  br i1 %157, label %175, label %169

158:                                              ; preds = %40, %158
  %159 = phi i64 [ %167, %158 ], [ %41, %40 ]
  %160 = phi i64 [ %159, %158 ], [ %1, %40 ]
  %161 = sub i64 %1, %160
  %162 = getelementptr inbounds float, float* %2, i64 %161
  %163 = load float, float* %162, align 4
  %164 = fdiv float %163, %151
  %165 = call float @sqrtf(float %164) #8
  store float %165, float* %162, align 4
  %166 = getelementptr inbounds float, float* %2, i64 %159
  store float %165, float* %166, align 4
  %167 = add i64 %159, -1
  %168 = icmp ult i64 %167, %19
  br i1 %168, label %155, label %158

169:                                              ; preds = %155
  %170 = add nsw i64 %19, -1
  %171 = getelementptr inbounds float, float* %2, i64 %170
  %172 = load float, float* %171, align 4
  %173 = fdiv float %172, %151
  %174 = call float @sqrtf(float %173) #8
  store float %174, float* %171, align 4
  br label %175

175:                                              ; preds = %155, %169
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden <2 x float> @_ZNSt3__1mlIfEENS_7complexIT_EERKS3_S5_(%"class.std::__1::complex"* dereferenceable(8), %"class.std::__1::complex"* dereferenceable(8)) local_unnamed_addr #3 comdat {
  %3 = bitcast %"class.std::__1::complex"* %0 to <2 x float>*
  %4 = load <2 x float>, <2 x float>* %3, align 4
  %5 = shufflevector <2 x float> %4, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %6 = shufflevector <2 x float> %5, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 1, i32 0>
  %7 = bitcast %"class.std::__1::complex"* %1 to <2 x float>*
  %8 = load <2 x float>, <2 x float>* %7, align 4
  %9 = shufflevector <2 x float> %8, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %10 = fmul <4 x float> %6, %9
  %11 = extractelement <4 x float> %10, i32 2
  %12 = extractelement <4 x float> %10, i32 3
  %13 = fsub float %11, %12
  %14 = extractelement <4 x float> %10, i32 0
  %15 = extractelement <4 x float> %10, i32 1
  %16 = fadd float %14, %15
  %17 = fcmp uno float %13, 0.000000e+00
  %18 = fcmp uno float %16, 0.000000e+00
  %19 = and i1 %17, %18
  br i1 %19, label %20, label %99

20:                                               ; preds = %2
  %21 = extractelement <2 x float> %4, i32 0
  %22 = tail call float @llvm.fabs.f32(float %21) #9
  %23 = fcmp oeq float %22, 0x7FF0000000000000
  %24 = extractelement <2 x float> %4, i32 1
  %25 = tail call float @llvm.fabs.f32(float %24) #9
  %26 = fcmp oeq float %25, 0x7FF0000000000000
  %27 = or i1 %23, %26
  %28 = extractelement <2 x float> %8, i32 0
  %29 = extractelement <2 x float> %8, i32 1
  br i1 %27, label %30, label %41

30:                                               ; preds = %20
  %31 = select i1 %23, float 1.000000e+00, float 0.000000e+00
  %32 = tail call float @llvm.copysign.f32(float %31, float %21) #8
  %33 = select i1 %26, float 1.000000e+00, float 0.000000e+00
  %34 = tail call float @llvm.copysign.f32(float %33, float %24) #8
  %35 = fcmp uno float %28, 0.000000e+00
  %36 = tail call float @llvm.copysign.f32(float 0.000000e+00, float %28) #8
  %37 = select i1 %35, float %36, float %28
  %38 = fcmp uno float %29, 0.000000e+00
  br i1 %38, label %39, label %41

39:                                               ; preds = %30
  %40 = tail call float @llvm.copysign.f32(float 0.000000e+00, float %29) #8
  br label %41

41:                                               ; preds = %20, %30, %39
  %42 = phi float [ %32, %39 ], [ %32, %30 ], [ %21, %20 ]
  %43 = phi float [ %34, %39 ], [ %34, %30 ], [ %24, %20 ]
  %44 = phi float [ %37, %39 ], [ %37, %30 ], [ %28, %20 ]
  %45 = phi float [ %40, %39 ], [ %29, %30 ], [ %29, %20 ]
  %46 = phi i8 [ 1, %39 ], [ 1, %30 ], [ 0, %20 ]
  %47 = tail call float @llvm.fabs.f32(float %44) #9
  %48 = fcmp oeq float %47, 0x7FF0000000000000
  %49 = tail call float @llvm.fabs.f32(float %45) #9
  %50 = fcmp oeq float %49, 0x7FF0000000000000
  %51 = or i1 %48, %50
  br i1 %51, label %52, label %63

52:                                               ; preds = %41
  %53 = select i1 %48, float 1.000000e+00, float 0.000000e+00
  %54 = tail call float @llvm.copysign.f32(float %53, float %44) #8
  %55 = select i1 %50, float 1.000000e+00, float 0.000000e+00
  %56 = tail call float @llvm.copysign.f32(float %55, float %45) #8
  %57 = fcmp uno float %42, 0.000000e+00
  %58 = tail call float @llvm.copysign.f32(float 0.000000e+00, float %42) #8
  %59 = select i1 %57, float %58, float %42
  %60 = fcmp uno float %43, 0.000000e+00
  br i1 %60, label %61, label %86

61:                                               ; preds = %52
  %62 = tail call float @llvm.copysign.f32(float 0.000000e+00, float %43) #8
  br label %86

63:                                               ; preds = %41
  %64 = icmp eq i8 %46, 0
  br i1 %64, label %65, label %86

65:                                               ; preds = %63
  %66 = call <4 x float> @llvm.fabs.v4f32(<4 x float> %10)
  %67 = fcmp oeq <4 x float> %66, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %68 = shufflevector <4 x i1> %67, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %69 = or <4 x i1> %67, %68
  %70 = shufflevector <4 x i1> %69, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %71 = or <4 x i1> %69, %70
  %72 = extractelement <4 x i1> %71, i32 0
  br i1 %72, label %73, label %99

73:                                               ; preds = %65
  %74 = fcmp uno float %42, 0.000000e+00
  %75 = tail call float @llvm.copysign.f32(float 0.000000e+00, float %42) #8
  %76 = select i1 %74, float %75, float %42
  %77 = fcmp uno float %43, 0.000000e+00
  %78 = tail call float @llvm.copysign.f32(float 0.000000e+00, float %43) #8
  %79 = select i1 %77, float %78, float %43
  %80 = fcmp uno float %44, 0.000000e+00
  %81 = tail call float @llvm.copysign.f32(float 0.000000e+00, float %44) #8
  %82 = select i1 %80, float %81, float %44
  %83 = fcmp uno float %45, 0.000000e+00
  br i1 %83, label %84, label %86

84:                                               ; preds = %73
  %85 = tail call float @llvm.copysign.f32(float 0.000000e+00, float %45) #8
  br label %86

86:                                               ; preds = %63, %52, %61, %73, %84
  %87 = phi float [ %45, %73 ], [ %85, %84 ], [ %56, %61 ], [ %56, %52 ], [ %45, %63 ]
  %88 = phi float [ %82, %73 ], [ %82, %84 ], [ %54, %61 ], [ %54, %52 ], [ %44, %63 ]
  %89 = phi float [ %79, %73 ], [ %79, %84 ], [ %62, %61 ], [ %43, %52 ], [ %43, %63 ]
  %90 = phi float [ %76, %73 ], [ %76, %84 ], [ %59, %61 ], [ %59, %52 ], [ %42, %63 ]
  %91 = fmul float %88, %90
  %92 = fmul float %87, %89
  %93 = fsub float %91, %92
  %94 = fmul float %93, 0x7FF0000000000000
  %95 = fmul float %87, %90
  %96 = fmul float %88, %89
  %97 = fadd float %96, %95
  %98 = fmul float %97, 0x7FF0000000000000
  br label %99

99:                                               ; preds = %65, %86, %2
  %100 = phi float [ %13, %2 ], [ %94, %86 ], [ %13, %65 ]
  %101 = phi float [ %16, %2 ], [ %98, %86 ], [ %16, %65 ]
  %102 = insertelement <2 x float> undef, float %100, i32 0
  %103 = insertelement <2 x float> %102, float %101, i32 1
  ret <2 x float> %103
}

; Function Attrs: nofree nounwind
declare float @sqrtf(float) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #4

; Function Attrs: nounwind readnone speculatable
declare float @llvm.copysign.f32(float, float) #4

; Function Attrs: noreturn
declare void @_ZN3rtc18webrtc_checks_impl8FatalLogEPKciS2_PKNS0_12CheckArgTypeEz(i8*, i32, i8*, i8*, ...) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare float @sinf(float) local_unnamed_addr #2

; Function Attrs: nounwind
declare float @hypotf(float, float) local_unnamed_addr #6

; Function Attrs: nofree nounwind
declare float @atan2f(float, float) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare <4 x float> @llvm.fabs.v4f32(<4 x float>) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind }
attributes #8 = { nounwind }
attributes #9 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
