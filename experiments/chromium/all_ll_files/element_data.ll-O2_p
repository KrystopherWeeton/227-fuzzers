; ModuleID = '../../third_party/blink/renderer/core/dom/element_data.cc'
source_filename = "../../third_party/blink/renderer/core/dom/element_data.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::ThreadSpecific" = type { %"class.blink::ThreadState"**, %"class.base::ThreadLocalStorage::Slot" }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr", i32, [4 x i8], %"class.std::__1::unique_ptr.143", %"class.std::__1::unique_ptr.143", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.153", %"class.std::__1::unique_ptr.159", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.171", %"class.std::__1::unique_ptr.177", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.184", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.12", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.22", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.34", %"class.std::__1::unique_ptr.40", %"class.std::__1::unique_ptr.51", %"class.std::__1::unique_ptr.58", %"class.std::__1::unique_ptr.58", %"class.std::__1::unique_ptr.65", %"class.std::__1::unique_ptr.72", %"class.std::__1::unique_ptr.79", %"class.std::__1::unique_ptr.79", %"class.std::__1::unique_ptr.86", %"class.std::__1::unique_ptr.93", %"class.std::__1::unique_ptr.100", %"class.std::__1::unique_ptr.123", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.12" = type { %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.16" = type { %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.22" = type { %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.28" = type { %"class.std::__1::__compressed_pair.29" }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.34" = type { %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.40" = type { %"class.std::__1::__compressed_pair.41" }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.43" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.43" = type { %"struct.std::__1::__atomic_base.44" }
%"struct.std::__1::__atomic_base.44" = type { %"struct.std::__1::__atomic_base.45" }
%"struct.std::__1::__atomic_base.45" = type { %"struct.std::__1::__cxx_atomic_impl.46" }
%"struct.std::__1::__cxx_atomic_impl.46" = type { %"struct.std::__1::__cxx_atomic_base_impl.47" }
%"struct.std::__1::__cxx_atomic_base_impl.47" = type { i64 }
%"class.std::__1::unique_ptr.51" = type { %"class.std::__1::__compressed_pair.52" }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"struct.std::__1::__compressed_pair_elem.53" = type { %"class.blink::Worklist.54"* }
%"class.blink::Worklist.54" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.43" }
%"class.std::__1::unique_ptr.58" = type { %"class.std::__1::__compressed_pair.59" }
%"class.std::__1::__compressed_pair.59" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"struct.std::__1::__compressed_pair_elem.60" = type { %"class.blink::Worklist.61"* }
%"class.blink::Worklist.61" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.43" }
%"class.std::__1::unique_ptr.65" = type { %"class.std::__1::__compressed_pair.66" }
%"class.std::__1::__compressed_pair.66" = type { %"struct.std::__1::__compressed_pair_elem.67" }
%"struct.std::__1::__compressed_pair_elem.67" = type { %"class.blink::Worklist.68"* }
%"class.blink::Worklist.68" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.43" }
%"class.std::__1::unique_ptr.72" = type { %"class.std::__1::__compressed_pair.73" }
%"class.std::__1::__compressed_pair.73" = type { %"struct.std::__1::__compressed_pair_elem.74" }
%"struct.std::__1::__compressed_pair_elem.74" = type { %"class.blink::Worklist.75"* }
%"class.blink::Worklist.75" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.43" }
%"class.std::__1::unique_ptr.79" = type { %"class.std::__1::__compressed_pair.80" }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { %"class.blink::Worklist.82"* }
%"class.blink::Worklist.82" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.43" }
%"class.std::__1::unique_ptr.86" = type { %"class.std::__1::__compressed_pair.87" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.88" }
%"struct.std::__1::__compressed_pair_elem.88" = type { %"class.blink::Worklist.89"* }
%"class.blink::Worklist.89" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.43" }
%"class.std::__1::unique_ptr.93" = type { %"class.std::__1::__compressed_pair.94" }
%"class.std::__1::__compressed_pair.94" = type { %"struct.std::__1::__compressed_pair_elem.95" }
%"struct.std::__1::__compressed_pair_elem.95" = type { %"class.blink::Worklist.96"* }
%"class.blink::Worklist.96" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.43" }
%"class.std::__1::unique_ptr.100" = type { %"class.std::__1::__compressed_pair.101" }
%"class.std::__1::__compressed_pair.101" = type { %"struct.std::__1::__compressed_pair_elem.102" }
%"struct.std::__1::__compressed_pair_elem.102" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.103", %"class.std::__1::__compressed_pair.110", %"class.std::__1::__compressed_pair.115", %"class.std::__1::__compressed_pair.117", [4 x i8] }>
%"class.std::__1::unique_ptr.103" = type { %"class.std::__1::__compressed_pair.104" }
%"class.std::__1::__compressed_pair.104" = type { %"struct.std::__1::__compressed_pair_elem.105", %"struct.std::__1::__compressed_pair_elem.106" }
%"struct.std::__1::__compressed_pair_elem.105" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.106" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.107" }
%"class.std::__1::__compressed_pair.107" = type { %"struct.std::__1::__compressed_pair_elem.108" }
%"struct.std::__1::__compressed_pair_elem.108" = type { i64 }
%"class.std::__1::__compressed_pair.110" = type { %"struct.std::__1::__compressed_pair_elem.111" }
%"struct.std::__1::__compressed_pair_elem.111" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.115" = type { %"struct.std::__1::__compressed_pair_elem.108" }
%"class.std::__1::__compressed_pair.117" = type { %"struct.std::__1::__compressed_pair_elem.118" }
%"struct.std::__1::__compressed_pair_elem.118" = type { float }
%"class.std::__1::unique_ptr.123" = type { %"class.std::__1::__compressed_pair.124" }
%"class.std::__1::__compressed_pair.124" = type { %"struct.std::__1::__compressed_pair_elem.125" }
%"struct.std::__1::__compressed_pair_elem.125" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.126", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.126" = type { %"class.std::__1::__compressed_pair.127" }
%"class.std::__1::__compressed_pair.127" = type { %"struct.std::__1::__compressed_pair_elem.128" }
%"struct.std::__1::__compressed_pair_elem.128" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.135" }
%"class.WTF::Vector.135" = type { %"class.WTF::VectorBuffer.136" }
%"class.WTF::VectorBuffer.136" = type { %"class.WTF::VectorBufferBase.137" }
%"class.WTF::VectorBufferBase.137" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.143" = type { %"class.std::__1::__compressed_pair.144" }
%"class.std::__1::__compressed_pair.144" = type { %"struct.std::__1::__compressed_pair_elem.145" }
%"struct.std::__1::__compressed_pair_elem.145" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.151" }
%"class.WTF::VectorBuffer.151" = type { %"class.WTF::VectorBufferBase.152" }
%"class.WTF::VectorBufferBase.152" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.153" = type { %"class.std::__1::__compressed_pair.154" }
%"class.std::__1::__compressed_pair.154" = type { %"struct.std::__1::__compressed_pair_elem.155" }
%"struct.std::__1::__compressed_pair_elem.155" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.159" = type { %"class.std::__1::__compressed_pair.160" }
%"class.std::__1::__compressed_pair.160" = type { %"struct.std::__1::__compressed_pair_elem.161" }
%"struct.std::__1::__compressed_pair_elem.161" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.165" }
%"class.std::__1::unique_ptr.165" = type { %"class.std::__1::__compressed_pair.166" }
%"class.std::__1::__compressed_pair.166" = type { %"struct.std::__1::__compressed_pair_elem.167" }
%"struct.std::__1::__compressed_pair_elem.167" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.54"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.61"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.68"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.75"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.82"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.188" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.188" = type { %"struct.std::__1::__compressed_pair_elem.189" }
%"struct.std::__1::__compressed_pair_elem.189" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.171" = type { %"class.std::__1::__compressed_pair.172" }
%"class.std::__1::__compressed_pair.172" = type { %"struct.std::__1::__compressed_pair_elem.173" }
%"struct.std::__1::__compressed_pair_elem.173" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.177" = type { %"class.std::__1::__compressed_pair.178" }
%"class.std::__1::__compressed_pair.178" = type { %"struct.std::__1::__compressed_pair_elem.179" }
%"struct.std::__1::__compressed_pair_elem.179" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.183 }
%class.scoped_refptr.183 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.184" = type { %"struct.std::__1::__atomic_base.185" }
%"struct.std::__1::__atomic_base.185" = type { %"struct.std::__1::__cxx_atomic_impl.186" }
%"struct.std::__1::__cxx_atomic_impl.186" = type { %"struct.std::__1::__cxx_atomic_base_impl.187" }
%"struct.std::__1::__cxx_atomic_base_impl.187" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::ThreadLocalStorage::Slot" = type { i32, i32 }
%"struct.blink::GCInfo" = type { void (%"class.blink::Visitor"*, i8*)*, void (i8*)*, { i8*, i8 } (i8*)*, i8 }
%"class.blink::GCInfoTable" = type { %"struct.blink::GCInfo"**, i32, i32, %"class.WTF::Mutex" }
%"class.blink::AtomicEntryFlag" = type { %"struct.std::__1::atomic.314" }
%"struct.std::__1::atomic.314" = type { %"struct.std::__1::__atomic_base.315" }
%"struct.std::__1::__atomic_base.315" = type { %"struct.std::__1::__atomic_base.316" }
%"struct.std::__1::__atomic_base.316" = type { %"struct.std::__1::__cxx_atomic_impl.317" }
%"struct.std::__1::__cxx_atomic_impl.317" = type { %"struct.std::__1::__cxx_atomic_base_impl.318" }
%"struct.std::__1::__cxx_atomic_base_impl.318" = type { i32 }
%"class.blink::ElementData" = type { %"class.WTF::ConcurrentlyReadBitField", %"class.blink::Member", %"class.blink::SpaceSplitString", %"class.WTF::AtomicString" }
%"class.WTF::ConcurrentlyReadBitField" = type { %"class.WTF::SingleThreadedBitField" }
%"class.WTF::SingleThreadedBitField" = type { i32 }
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::CSSPropertyValueSet"* }
%"class.blink::CSSPropertyValueSet" = type { i32 }
%"class.blink::SpaceSplitString" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.blink::SpaceSplitString::Data"* }
%"class.blink::SpaceSplitString::Data" = type { %"class.WTF::RefCounted", %"class.WTF::AtomicString", %"class.WTF::Vector" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase", [32 x i8] }
%"class.WTF::VectorBufferBase" = type { %"class.WTF::AtomicString"*, i32, i32 }
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr.2 }
%class.scoped_refptr.2 = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::ShareableElementData" = type { %"class.blink::ElementData", [0 x %"class.blink::Attribute"] }
%"class.blink::Attribute" = type { %"class.blink::QualifiedName", %"class.WTF::AtomicString" }
%"class.blink::QualifiedName" = type { %class.scoped_refptr.4 }
%class.scoped_refptr.4 = type { %"class.blink::QualifiedName::QualifiedNameImpl"* }
%"class.blink::QualifiedName::QualifiedNameImpl" = type { %"class.WTF::RefCounted.5", i32, %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString" }
%"class.WTF::RefCounted.5" = type { %"class.base::RefCounted.6" }
%"class.base::RefCounted.6" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.193" = type { %"class.WTF::VectorBuffer.194" }
%"class.WTF::VectorBuffer.194" = type { %"class.WTF::VectorBufferBase.9" }
%"class.WTF::VectorBufferBase.9" = type { %"class.blink::Attribute"*, i32, i32 }
%"class.blink::UniqueElementData" = type { %"class.blink::ElementData", %"class.blink::Member", %"class.WTF::Vector.7" }
%"class.WTF::Vector.7" = type { %"class.WTF::VectorBuffer.8" }
%"class.WTF::VectorBuffer.8" = type { %"class.WTF::VectorBufferBase.9", [64 x i8] }
%"class.blink::ImmutableCSSPropertyValueSet" = type { %"class.blink::CSSPropertyValueSet", [4 x i8] }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.305" }
%"class.std::__1::__compressed_pair.305" = type { %"struct.std::__1::__compressed_pair_elem.306" }
%"struct.std::__1::__compressed_pair_elem.306" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.blink::MutableCSSPropertyValueSet" = type <{ %"class.blink::CSSPropertyValueSet", [4 x i8], %"class.blink::Member.197", %"class.blink::HeapVector", i8, [7 x i8] }>
%"class.blink::Member.197" = type { %"class.blink::MemberBase.198" }
%"class.blink::MemberBase.198" = type { %"class.blink::PropertySetCSSStyleDeclaration"* }
%"class.blink::PropertySetCSSStyleDeclaration" = type { %"class.blink::AbstractPropertySetCSSStyleDeclaration", %"class.blink::Member.202" }
%"class.blink::AbstractPropertySetCSSStyleDeclaration" = type { %"class.blink::CSSStyleDeclaration" }
%"class.blink::CSSStyleDeclaration" = type { %"class.blink::ScriptWrappable", %"class.blink::ExecutionContextClient" }
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.blink::ExecutionContextClient" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::WeakMember" }
%"class.blink::GarbageCollectedMixin" = type { i32 (...)** }
%"class.blink::WeakMember" = type { %"class.blink::MemberBase.201" }
%"class.blink::MemberBase.201" = type { %"class.blink::ExecutionContext"* }
%"class.blink::ExecutionContext" = type <{ %"class.blink::Supplementable", %"class.blink::MojoBindingContext", %"class.blink::ConsoleLogger", %"class.blink::UseCounter", %"class.blink::FeatureContext", %"class.v8::Isolate"*, %"class.blink::SecurityContext", %"class.blink::Member.249", i32, i8, [3 x i8], %"class.blink::HeapVector.251", i32, i8, i8, i8, i8, i8, i8, [6 x i8], %"class.blink::Member.259", %"class.blink::Member.261", %"class.blink::DOMTimerCoordinator", i32, [4 x i8], %"class.std::__1::unique_ptr.270", %"class.blink::Member.276", %"class.blink::Member.278", i8, [7 x i8] }>
%"class.blink::Supplementable" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap" }
%"class.blink::HeapHashMap" = type { %"class.WTF::HashMap" }
%"class.WTF::HashMap" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type opaque
%"class.blink::MojoBindingContext" = type { %"class.blink::ContextLifecycleNotifier", %"class.blink::Supplementable.223" }
%"class.blink::ContextLifecycleNotifier" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapObserverSet" }
%"class.blink::HeapObserverSet" = type { i32, [4 x i8], %"class.blink::HeapHashSet" }
%"class.blink::HeapHashSet" = type { %"class.WTF::HashSet" }
%"class.WTF::HashSet" = type { %"class.WTF::HashTable.220" }
%"class.WTF::HashTable.220" = type <{ %"class.blink::WeakMember.222"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.222" = type opaque
%"class.blink::Supplementable.223" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.224" }
%"class.blink::HeapHashMap.224" = type { %"class.WTF::HashMap.227" }
%"class.WTF::HashMap.227" = type { %"class.WTF::HashTable.228" }
%"class.WTF::HashTable.228" = type <{ %"struct.WTF::KeyValuePair.230"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.230" = type { i8*, %"class.blink::Member.280" }
%"class.blink::Member.280" = type { %"class.blink::MemberBase.281" }
%"class.blink::MemberBase.281" = type { %"class.blink::Supplement"* }
%"class.blink::Supplement" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::Member.282" }
%"class.blink::Member.282" = type { %"class.blink::MemberBase.283" }
%"class.blink::MemberBase.283" = type { %"class.blink::MojoBindingContext"* }
%"class.blink::ConsoleLogger" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::UseCounter" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::FeatureContext" = type { i32 (...)** }
%"class.blink::SecurityContext" = type { i32 (...)**, i32, %class.scoped_refptr.231, %"class.std::__1::unique_ptr.232", %"class.std::__1::unique_ptr.232", %"class.std::__1::unique_ptr.238", %"class.std::__1::unique_ptr.238", %"class.blink::Member.244", i32, [4 x i8], %"class.WTF::HashSet.245", i32, i32 }
%class.scoped_refptr.231 = type { %"class.blink::SecurityOrigin"* }
%"class.blink::SecurityOrigin" = type opaque
%"class.std::__1::unique_ptr.232" = type { %"class.std::__1::__compressed_pair.233" }
%"class.std::__1::__compressed_pair.233" = type { %"struct.std::__1::__compressed_pair_elem.234" }
%"struct.std::__1::__compressed_pair_elem.234" = type { %"class.blink::PermissionsPolicy"* }
%"class.blink::PermissionsPolicy" = type opaque
%"class.std::__1::unique_ptr.238" = type { %"class.std::__1::__compressed_pair.239" }
%"class.std::__1::__compressed_pair.239" = type { %"struct.std::__1::__compressed_pair_elem.240" }
%"struct.std::__1::__compressed_pair_elem.240" = type { %"class.blink::DocumentPolicy"* }
%"class.blink::DocumentPolicy" = type opaque
%"class.blink::Member.244" = type { %"class.blink::MemberBase.201" }
%"class.WTF::HashSet.245" = type { %"class.WTF::HashTable.246" }
%"class.WTF::HashTable.246" = type <{ i32*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.249" = type { %"class.blink::MemberBase.250" }
%"class.blink::MemberBase.250" = type { %"class.blink::Agent"* }
%"class.blink::Agent" = type opaque
%"class.blink::HeapVector.251" = type { %"class.WTF::Vector.254" }
%"class.WTF::Vector.254" = type { %"class.WTF::VectorBuffer.255" }
%"class.WTF::VectorBuffer.255" = type { %"class.WTF::VectorBufferBase.256" }
%"class.WTF::VectorBufferBase.256" = type { %"class.blink::Member.257"*, i32, i32 }
%"class.blink::Member.257" = type opaque
%"class.blink::Member.259" = type { %"class.blink::MemberBase.260" }
%"class.blink::MemberBase.260" = type { %"class.blink::PublicURLManager"* }
%"class.blink::PublicURLManager" = type opaque
%"class.blink::Member.261" = type { %"class.blink::MemberBase.262" }
%"class.blink::MemberBase.262" = type { %"class.blink::ContentSecurityPolicyDelegate"* }
%"class.blink::ContentSecurityPolicyDelegate" = type opaque
%"class.blink::DOMTimerCoordinator" = type { %"class.blink::HeapHashMap.263", i32, i32 }
%"class.blink::HeapHashMap.263" = type { %"class.WTF::HashMap.266" }
%"class.WTF::HashMap.266" = type { %"class.WTF::HashTable.267" }
%"class.WTF::HashTable.267" = type <{ %"struct.WTF::KeyValuePair.269"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.269" = type opaque
%"class.std::__1::unique_ptr.270" = type { %"class.std::__1::__compressed_pair.271" }
%"class.std::__1::__compressed_pair.271" = type { %"struct.std::__1::__compressed_pair_elem.272" }
%"struct.std::__1::__compressed_pair_elem.272" = type { %"class.blink::PolicyContainer"* }
%"class.blink::PolicyContainer" = type opaque
%"class.blink::Member.276" = type { %"class.blink::MemberBase.277" }
%"class.blink::MemberBase.277" = type { %"class.blink::OriginTrialContext"* }
%"class.blink::OriginTrialContext" = type opaque
%"class.blink::Member.278" = type { %"class.blink::MemberBase.279" }
%"class.blink::MemberBase.279" = type { %"class.blink::ContentSecurityPolicy"* }
%"class.blink::ContentSecurityPolicy" = type opaque
%"class.blink::Member.202" = type { %"class.blink::MemberBase.203" }
%"class.blink::MemberBase.203" = type { %"class.blink::MutableCSSPropertyValueSet"* }
%"class.blink::HeapVector" = type { %"class.WTF::Vector.206" }
%"class.WTF::Vector.206" = type { %"class.WTF::VectorBuffer.207" }
%"class.WTF::VectorBuffer.207" = type { %"class.WTF::VectorBufferBase.208", [96 x i8] }
%"class.WTF::VectorBufferBase.208" = type { %"class.blink::CSSPropertyValue"*, i32, i32 }
%"class.blink::CSSPropertyValue" = type { %"struct.blink::CSSPropertyValueMetadata", %"class.blink::Member.209" }
%"struct.blink::CSSPropertyValueMetadata" = type <{ %"class.WTF::AtomicString", i16, [6 x i8] }>
%"class.blink::Member.209" = type { %"class.blink::MemberBase.210" }
%"class.blink::MemberBase.210" = type { %"class.blink::CSSValue"* }
%"class.blink::CSSValue" = type { i8, i8, i8 }
%"class.blink::NormalPageArena" = type { %"class.blink::BaseArena.base", [4 x i8], %"class.blink::FreeList", i8*, i64, i64 }
%"class.blink::BaseArena.base" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32 }>
%"class.blink::FreeList" = type <{ [17 x %"class.blink::FreeListEntry"*], [17 x %"class.blink::FreeListEntry"*], i32, [4 x i8] }>
%"class.blink::FreeListEntry" = type { %"class.blink::HeapObjectHeader", %"class.blink::FreeListEntry"* }
%"class.blink::PlatformAwareObjectStartBitmap" = type { %"class.blink::ObjectStartBitmap" }
%"class.blink::ObjectStartBitmap" = type { i8*, [2048 x i8] }

$_ZN5blink17UniqueElementDataD2Ev = comdat any

$_ZNK3WTF6VectorIN5blink9AttributeELj4ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZN3WTF6VectorIN5blink9AttributeELj4ENS_18PartitionAllocatorEEC2ERKS4_ = comdat any

$_ZN3WTF12VectorBufferIN5blink9AttributeELj4ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS2_ = comdat any

$_ZN5blink10ThreadHeap8AllocateINS_11ElementDataEEEPhm = comdat any

$_ZN5blink10TraceTraitINS_11ElementDataEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink8internal14FinalizerTraitINS_11ElementDataEE8FinalizeEPv = comdat any

$_ZN5blink9NameTraitINS_11ElementDataEE7GetNameEPKv = comdat any

$_ZN5blink10TraceTraitINS_19CSSPropertyValueSetEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZNK3WTF6VectorIN5blink9AttributeELj0ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink9AttributeEEEmm = comdat any

$_ZN3WTF6VectorIN5blink9AttributeELj4ENS_18PartitionAllocatorEE16ReallocateBufferEj = comdat any

$_ZZN5blink11GCInfoTraitINS_11ElementDataEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_11ElementDataEE5IndexEvE13gc_info_index = comdat any

@_ZN5blink11ThreadState16thread_specific_E = external local_unnamed_addr global %"class.WTF::ThreadSpecific"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv = private unnamed_addr constant [68 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::ThreadState *]\00", align 1
@.str = private unnamed_addr constant [23 x i8] c"allocation_size > size\00", align 1
@.str.1 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/heap/impl/heap.h\00", align 1
@_ZZN5blink11GCInfoTraitINS_11ElementDataEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_11ElementDataEE5TraceEPNS_7VisitorEPKv, void (i8*)* @_ZN5blink8internal14FinalizerTraitINS_11ElementDataEE8FinalizeEPv, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_11ElementDataEE7GetNameEPKv, i8 0 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_11ElementDataEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@.str.2 = private unnamed_addr constant [13 x i8] c"InternalNode\00", align 1
@_ZN5blink11GCInfoTable13global_table_E = external local_unnamed_addr global %"class.blink::GCInfoTable"*, align 8
@.str.3 = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1
@.str.4 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@_ZN5blink11ThreadState25incremental_marking_flag_E = external local_unnamed_addr global %"class.blink::AtomicEntryFlag", align 4
@.str.5 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.6 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink9AttributeEEEPKcv = private unnamed_addr constant [64 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::Attribute]\00", align 1

@_ZN5blink11ElementDataC1Ev = hidden unnamed_addr alias void (%"class.blink::ElementData"*), void (%"class.blink::ElementData"*)* @_ZN5blink11ElementDataC2Ev
@_ZN5blink11ElementDataC1Ej = hidden unnamed_addr alias void (%"class.blink::ElementData"*, i32), void (%"class.blink::ElementData"*, i32)* @_ZN5blink11ElementDataC2Ej
@_ZN5blink11ElementDataC1ERKS0_b = hidden unnamed_addr alias void (%"class.blink::ElementData"*, %"class.blink::ElementData"*, i1), void (%"class.blink::ElementData"*, %"class.blink::ElementData"*, i1)* @_ZN5blink11ElementDataC2ERKS0_b
@_ZN5blink20ShareableElementDataC1ERKN3WTF6VectorINS_9AttributeELj0ENS1_18PartitionAllocatorEEE = hidden unnamed_addr alias void (%"class.blink::ShareableElementData"*, %"class.WTF::Vector.193"*), void (%"class.blink::ShareableElementData"*, %"class.WTF::Vector.193"*)* @_ZN5blink20ShareableElementDataC2ERKN3WTF6VectorINS_9AttributeELj0ENS1_18PartitionAllocatorEEE
@_ZN5blink20ShareableElementDataD1Ev = hidden unnamed_addr alias void (%"class.blink::ShareableElementData"*), void (%"class.blink::ShareableElementData"*)* @_ZN5blink20ShareableElementDataD2Ev
@_ZN5blink20ShareableElementDataC1ERKNS_17UniqueElementDataE = hidden unnamed_addr alias void (%"class.blink::ShareableElementData"*, %"class.blink::UniqueElementData"*), void (%"class.blink::ShareableElementData"*, %"class.blink::UniqueElementData"*)* @_ZN5blink20ShareableElementDataC2ERKNS_17UniqueElementDataE
@_ZN5blink17UniqueElementDataC1Ev = hidden unnamed_addr alias void (%"class.blink::UniqueElementData"*), void (%"class.blink::UniqueElementData"*)* @_ZN5blink17UniqueElementDataC2Ev
@_ZN5blink17UniqueElementDataC1ERKS0_ = hidden unnamed_addr alias void (%"class.blink::UniqueElementData"*, %"class.blink::UniqueElementData"*), void (%"class.blink::UniqueElementData"*, %"class.blink::UniqueElementData"*)* @_ZN5blink17UniqueElementDataC2ERKS0_
@_ZN5blink17UniqueElementDataC1ERKNS_20ShareableElementDataE = hidden unnamed_addr alias void (%"class.blink::UniqueElementData"*, %"class.blink::ShareableElementData"*), void (%"class.blink::UniqueElementData"*, %"class.blink::ShareableElementData"*)* @_ZN5blink17UniqueElementDataC2ERKNS_20ShareableElementDataE

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5blink11ElementDataC2Ev(%"class.blink::ElementData"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 1, i32* %2, align 4
  %3 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %0, i64 0, i32 1, i32 0, i32 0
  %4 = bitcast %"class.blink::CSSPropertyValueSet"** %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 24, i1 false)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5blink11ElementDataC2Ej(%"class.blink::ElementData"* nocapture, i32) unnamed_addr #0 align 2 {
  %3 = shl i32 %1, 1
  %4 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 %3, i32* %4, align 4
  %5 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %0, i64 0, i32 1, i32 0, i32 0
  %6 = bitcast %"class.blink::CSSPropertyValueSet"** %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 24, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink11ElementDataC2ERKS0_b(%"class.blink::ElementData"* nocapture, %"class.blink::ElementData"* dereferenceable(32), i1 zeroext) unnamed_addr #1 align 2 {
  %4 = zext i1 %2 to i32
  br i1 %2, label %22, label %5

5:                                                ; preds = %3
  %6 = icmp eq %"class.blink::ElementData"* %1, null
  br i1 %6, label %7, label %9

7:                                                ; preds = %5
  %8 = load i32, i32* null, align 536870912
  br label %18

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %1, i64 0, i32 0, i32 0, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = and i32 %11, 1
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %18, label %14

14:                                               ; preds = %9
  %15 = bitcast %"class.blink::ElementData"* %1 to %"class.blink::UniqueElementData"*
  %16 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %15, i64 0, i32 2, i32 0, i32 0, i32 2
  %17 = load i32, i32* %16, align 4
  br label %22

18:                                               ; preds = %9, %7
  %19 = phi i32 [ %8, %7 ], [ %11, %9 ]
  %20 = lshr i32 %19, 1
  %21 = and i32 %20, 268435455
  br label %22

22:                                               ; preds = %18, %14, %3
  %23 = phi i32 [ 0, %3 ], [ %21, %18 ], [ %17, %14 ]
  %24 = shl i32 %23, 1
  %25 = or i32 %24, %4
  %26 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %1, i64 0, i32 0, i32 0, i32 0
  %27 = load i32, i32* %26, align 4
  %28 = and i32 %27, 536870912
  %29 = or i32 %25, %28
  %30 = and i32 %27, 1073741824
  %31 = or i32 %29, %30
  %32 = and i32 %27, -2147483648
  %33 = or i32 %31, %32
  %34 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 %33, i32* %34, align 4
  %35 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %0, i64 0, i32 1, i32 0, i32 0
  store %"class.blink::CSSPropertyValueSet"* null, %"class.blink::CSSPropertyValueSet"** %35, align 8
  %36 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %1, i64 0, i32 2, i32 0, i32 0
  %37 = load %"class.blink::SpaceSplitString::Data"*, %"class.blink::SpaceSplitString::Data"** %36, align 8
  %38 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %0, i64 0, i32 2, i32 0, i32 0
  store %"class.blink::SpaceSplitString::Data"* %37, %"class.blink::SpaceSplitString::Data"** %38, align 8
  %39 = icmp eq %"class.blink::SpaceSplitString::Data"* %37, null
  br i1 %39, label %42, label %40

40:                                               ; preds = %22
  %41 = getelementptr inbounds %"class.blink::SpaceSplitString::Data", %"class.blink::SpaceSplitString::Data"* %37, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %41) #10
  br label %42

42:                                               ; preds = %22, %40
  %43 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %1, i64 0, i32 3, i32 0, i32 0, i32 0
  %44 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %43, align 8
  %45 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %44, %"class.WTF::StringImpl"** %45, align 8
  %46 = icmp eq %"class.WTF::StringImpl"* %44, null
  br i1 %46, label %64, label %47

47:                                               ; preds = %42
  %48 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %44, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %49 = load atomic i32, i32* %48 monotonic, align 4
  %50 = and i32 %49, 2
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %64

52:                                               ; preds = %47
  %53 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %44, i64 0, i32 0
  %54 = load i32, i32* %53, align 4
  %55 = zext i32 %54 to i33
  %56 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %55, i33 1) #10
  %57 = extractvalue { i33, i1 } %56, 1
  %58 = extractvalue { i33, i1 } %56, 0
  %59 = icmp slt i33 %58, 0
  %60 = or i1 %57, %59
  br i1 %60, label %61, label %62, !prof !2

61:                                               ; preds = %52
  tail call void @llvm.trap() #10
  unreachable

62:                                               ; preds = %52
  %63 = trunc i33 %58 to i32
  store i32 %63, i32* %53, align 4
  br label %64

64:                                               ; preds = %42, %47, %62
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink11ElementData30FinalizeGarbageCollectedObjectEv(%"class.blink::ElementData"*) local_unnamed_addr #1 align 2 {
  %2 = icmp eq %"class.blink::ElementData"* %0, null
  br i1 %2, label %10, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %0, i64 0, i32 0, i32 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = and i32 %5, 1
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %10, label %8

8:                                                ; preds = %3
  %9 = bitcast %"class.blink::ElementData"* %0 to %"class.blink::UniqueElementData"*
  tail call void @_ZN5blink17UniqueElementDataD2Ev(%"class.blink::UniqueElementData"* nonnull %9) #10
  br label %12

10:                                               ; preds = %3, %1
  %11 = bitcast %"class.blink::ElementData"* %0 to %"class.blink::ShareableElementData"*
  tail call void @_ZN5blink20ShareableElementDataD2Ev(%"class.blink::ShareableElementData"* %11) #10
  br label %12

12:                                               ; preds = %10, %8
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink17UniqueElementDataD2Ev(%"class.blink::UniqueElementData"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %0, i64 0, i32 2
  %3 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  %6 = getelementptr inbounds %"class.WTF::Vector.7", %"class.WTF::Vector.7"* %2, i64 0, i32 0, i32 0, i32 0
  br i1 %5, label %34, label %7, !prof !2

7:                                                ; preds = %1
  %8 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %6, align 8
  %9 = zext i32 %4 to i64
  %10 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %8, i64 %9
  br label %11

11:                                               ; preds = %29, %7
  %12 = phi %"class.blink::Attribute"* [ %31, %29 ], [ %8, %7 ]
  %13 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %12, i64 0, i32 1, i32 0, i32 0, i32 0
  %14 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %13, align 8
  %15 = icmp eq %"class.WTF::StringImpl"* %14, null
  br i1 %15, label %29, label %16

16:                                               ; preds = %11
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %14, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = load atomic i32, i32* %17 monotonic, align 4
  %19 = and i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %14, i64 0, i32 0
  %22 = load i32, i32* %21, align 4
  br i1 %20, label %23, label %25

23:                                               ; preds = %16
  %24 = add i32 %22, -1
  store i32 %24, i32* %21, align 4
  br label %25

25:                                               ; preds = %23, %16
  %26 = phi i32 [ %24, %23 ], [ %22, %16 ]
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %29

28:                                               ; preds = %25
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %14) #10
  br label %29

29:                                               ; preds = %28, %25, %11
  %30 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %12, i64 0, i32 0
  tail call void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"* %30) #10
  %31 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %12, i64 1
  %32 = icmp eq %"class.blink::Attribute"* %31, %10
  br i1 %32, label %33, label %11

33:                                               ; preds = %29
  store i32 0, i32* %3, align 4
  br label %34

34:                                               ; preds = %33, %1
  %35 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %6, align 8
  %36 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %0, i64 0, i32 2, i32 0, i32 1, i64 0
  %37 = bitcast i8* %36 to %"class.blink::Attribute"*
  %38 = icmp eq %"class.blink::Attribute"* %35, %37
  br i1 %38, label %41, label %39, !prof !3

39:                                               ; preds = %34
  %40 = getelementptr inbounds %"class.WTF::Vector.7", %"class.WTF::Vector.7"* %2, i64 0, i32 0
  tail call void @_ZN3WTF12VectorBufferIN5blink9AttributeELj4ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS2_(%"class.WTF::VectorBuffer.8"* %40, %"class.blink::Attribute"* %35) #10
  br label %41

41:                                               ; preds = %34, %39
  store %"class.blink::Attribute"* null, %"class.blink::Attribute"** %6, align 8
  %42 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i32 0
  %43 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %42, align 8
  %44 = icmp eq %"class.WTF::StringImpl"* %43, null
  br i1 %44, label %58, label %45

45:                                               ; preds = %41
  %46 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %43, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %47 = load atomic i32, i32* %46 monotonic, align 4
  %48 = and i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %43, i64 0, i32 0
  %51 = load i32, i32* %50, align 4
  br i1 %49, label %52, label %54

52:                                               ; preds = %45
  %53 = add i32 %51, -1
  store i32 %53, i32* %50, align 4
  br label %54

54:                                               ; preds = %52, %45
  %55 = phi i32 [ %53, %52 ], [ %51, %45 ]
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %57, label %58

57:                                               ; preds = %54
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %43) #10
  br label %58

58:                                               ; preds = %57, %54, %41
  %59 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %60 = load %"class.blink::SpaceSplitString::Data"*, %"class.blink::SpaceSplitString::Data"** %59, align 8
  %61 = icmp eq %"class.blink::SpaceSplitString::Data"* %60, null
  br i1 %61, label %69, label %62

62:                                               ; preds = %58
  %63 = getelementptr inbounds %"class.blink::SpaceSplitString::Data", %"class.blink::SpaceSplitString::Data"* %60, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %63) #10
  %64 = getelementptr inbounds %"class.blink::SpaceSplitString::Data", %"class.blink::SpaceSplitString::Data"* %60, i64 0, i32 0, i32 0, i32 0, i32 0
  %65 = load i32, i32* %64, align 4
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %69

67:                                               ; preds = %62
  tail call void @_ZN5blink16SpaceSplitString4DataD1Ev(%"class.blink::SpaceSplitString::Data"* nonnull %60) #10
  %68 = bitcast %"class.blink::SpaceSplitString::Data"* %60 to i8*
  tail call void @free(i8* %68) #10
  br label %69

69:                                               ; preds = %58, %62, %67
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::UniqueElementData"* @_ZNK5blink11ElementData14MakeUniqueCopyEv(%"class.blink::ElementData"*) local_unnamed_addr #1 align 2 {
  %2 = icmp eq %"class.blink::ElementData"* %0, null
  br i1 %2, label %12, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %0, i64 0, i32 0, i32 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = and i32 %5, 1
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %12, label %8

8:                                                ; preds = %3
  %9 = bitcast %"class.blink::ElementData"* %0 to %"class.blink::UniqueElementData"*
  %10 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_11ElementDataEEEPhm(i64 120) #10
  %11 = bitcast i8* %10 to %"class.blink::UniqueElementData"*
  tail call void @_ZN5blink17UniqueElementDataC2ERKS0_(%"class.blink::UniqueElementData"* %11, %"class.blink::UniqueElementData"* nonnull dereferenceable(120) %9) #10
  br label %16

12:                                               ; preds = %3, %1
  %13 = bitcast %"class.blink::ElementData"* %0 to %"class.blink::ShareableElementData"*
  %14 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_11ElementDataEEEPhm(i64 120) #10
  %15 = bitcast i8* %14 to %"class.blink::UniqueElementData"*
  tail call void @_ZN5blink17UniqueElementDataC2ERKNS_20ShareableElementDataE(%"class.blink::UniqueElementData"* %15, %"class.blink::ShareableElementData"* dereferenceable(32) %13) #10
  br label %16

16:                                               ; preds = %8, %12
  %17 = phi i8* [ %10, %8 ], [ %14, %12 ]
  %18 = phi %"class.blink::UniqueElementData"* [ %11, %8 ], [ %15, %12 ]
  %19 = getelementptr inbounds i8, i8* %17, i64 -4
  %20 = bitcast i8* %19 to i16*
  %21 = load atomic i16, i16* %20 monotonic, align 2
  %22 = or i16 %21, 1
  store atomic i16 %22, i16* %20 release, align 2
  ret %"class.blink::UniqueElementData"* %18
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink11ElementData12IsEquivalentEPKS0_(%"class.blink::ElementData"*, %"class.blink::ElementData"*) local_unnamed_addr #4 align 2 {
  %3 = icmp eq %"class.blink::ElementData"* %0, null
  br i1 %3, label %4, label %6

4:                                                ; preds = %2
  %5 = load i32, i32* null, align 536870912
  br label %18

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %0, i64 0, i32 0, i32 0, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = and i32 %8, 1
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %18, label %11

11:                                               ; preds = %6
  %12 = bitcast %"class.blink::ElementData"* %0 to %"class.blink::UniqueElementData"*
  %13 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %0, i64 1, i32 1
  %14 = bitcast %"class.blink::Member"* %13 to %"class.blink::Attribute"**
  %15 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %14, align 8
  %16 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %12, i64 0, i32 2, i32 0, i32 0, i32 2
  %17 = load i32, i32* %16, align 4
  br label %24

18:                                               ; preds = %6, %4
  %19 = phi i32 [ %5, %4 ], [ %8, %6 ]
  %20 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %0, i64 1
  %21 = bitcast %"class.blink::ElementData"* %20 to %"class.blink::Attribute"*
  %22 = lshr i32 %19, 1
  %23 = and i32 %22, 268435455
  br label %24

24:                                               ; preds = %11, %18
  %25 = phi %"class.blink::Attribute"* [ %21, %18 ], [ %15, %11 ]
  %26 = phi i32 [ %23, %18 ], [ %17, %11 ]
  %27 = icmp eq %"class.blink::ElementData"* %1, null
  br i1 %27, label %28, label %30

28:                                               ; preds = %24
  %29 = icmp eq i32 %26, 0
  br label %92

30:                                               ; preds = %24
  %31 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %1, i64 0, i32 0, i32 0, i32 0
  %32 = load i32, i32* %31, align 4
  %33 = and i32 %32, 1
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %42, label %35

35:                                               ; preds = %30
  %36 = bitcast %"class.blink::ElementData"* %1 to %"class.blink::UniqueElementData"*
  %37 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %1, i64 1, i32 1
  %38 = bitcast %"class.blink::Member"* %37 to %"class.blink::Attribute"**
  %39 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %38, align 8
  %40 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %36, i64 0, i32 2, i32 0, i32 0, i32 2
  %41 = load i32, i32* %40, align 4
  br label %47

42:                                               ; preds = %30
  %43 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %1, i64 1
  %44 = bitcast %"class.blink::ElementData"* %43 to %"class.blink::Attribute"*
  %45 = lshr i32 %32, 1
  %46 = and i32 %45, 268435455
  br label %47

47:                                               ; preds = %35, %42
  %48 = phi %"class.blink::Attribute"* [ %44, %42 ], [ %39, %35 ]
  %49 = phi i32 [ %46, %42 ], [ %41, %35 ]
  %50 = icmp eq i32 %26, %49
  br i1 %50, label %51, label %92

51:                                               ; preds = %47
  %52 = zext i32 %26 to i64
  %53 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %25, i64 %52
  %54 = icmp eq i32 %26, 0
  br i1 %54, label %92, label %55

55:                                               ; preds = %51
  %56 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %48, i64 %52
  br label %59

57:                                               ; preds = %85
  %58 = icmp eq %"class.blink::Attribute"* %91, %53
  br i1 %58, label %92, label %59

59:                                               ; preds = %57, %55
  %60 = phi %"class.blink::Attribute"* [ %25, %55 ], [ %91, %57 ]
  %61 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %60, i64 0, i32 0, i32 0, i32 0
  %62 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %61, align 8
  %63 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %62, i64 0, i32 3, i32 0, i32 0, i32 0
  %64 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %62, i64 0, i32 4, i32 0, i32 0, i32 0
  br label %65

65:                                               ; preds = %80, %59
  %66 = phi %"class.blink::Attribute"* [ %48, %59 ], [ %81, %80 ]
  %67 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %66, i64 0, i32 0, i32 0, i32 0
  %68 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %67, align 8
  %69 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %68, %62
  br i1 %69, label %83, label %70

70:                                               ; preds = %65
  %71 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %68, i64 0, i32 3, i32 0, i32 0, i32 0
  %72 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %71, align 8
  %73 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %63, align 8
  %74 = icmp eq %"class.WTF::StringImpl"* %72, %73
  br i1 %74, label %75, label %80

75:                                               ; preds = %70
  %76 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %68, i64 0, i32 4, i32 0, i32 0, i32 0
  %77 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %76, align 8
  %78 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %64, align 8
  %79 = icmp eq %"class.WTF::StringImpl"* %77, %78
  br i1 %79, label %83, label %80

80:                                               ; preds = %75, %70
  %81 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %66, i64 1
  %82 = icmp eq %"class.blink::Attribute"* %81, %56
  br i1 %82, label %92, label %65

83:                                               ; preds = %65, %75
  %84 = icmp eq %"class.blink::Attribute"* %66, null
  br i1 %84, label %92, label %85

85:                                               ; preds = %83
  %86 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %60, i64 0, i32 1, i32 0, i32 0, i32 0
  %87 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %86, align 8
  %88 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %66, i64 0, i32 1, i32 0, i32 0, i32 0
  %89 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %88, align 8
  %90 = icmp eq %"class.WTF::StringImpl"* %87, %89
  %91 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %60, i64 1
  br i1 %90, label %57, label %92

92:                                               ; preds = %83, %57, %85, %80, %51, %47, %28
  %93 = phi i1 [ %29, %28 ], [ false, %47 ], [ true, %51 ], [ false, %80 ], [ false, %83 ], [ true, %57 ], [ false, %85 ]
  ret i1 %93
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink11ElementData5TraceEPNS_7VisitorE(%"class.blink::ElementData"* nocapture readonly, %"class.blink::Visitor"*) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = load atomic i32, i32* %3 monotonic, align 4
  %5 = and i32 %4, 1
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %29, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %0, i64 1
  %9 = bitcast %"class.blink::ElementData"* %8 to i64*
  %10 = load atomic i64, i64* %9 monotonic, align 8
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %18, label %12

12:                                               ; preds = %7
  %13 = inttoptr i64 %10 to i8*
  %14 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %15 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %14, align 8
  %16 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %15, i64 5
  %17 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %16, align 8
  tail call void %17(%"class.blink::Visitor"* %1, i8* nonnull %13, i8* nonnull %13, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_19CSSPropertyValueSetEE5TraceEPNS_7VisitorEPKv) #10
  br label %18

18:                                               ; preds = %12, %7
  %19 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %0, i64 0, i32 1
  %20 = bitcast %"class.blink::Member"* %19 to i64*
  %21 = load atomic i64, i64* %20 monotonic, align 8
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %40, label %23

23:                                               ; preds = %18
  %24 = inttoptr i64 %21 to i8*
  %25 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %26 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %25, align 8
  %27 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %26, i64 5
  %28 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %27, align 8
  tail call void %28(%"class.blink::Visitor"* %1, i8* nonnull %24, i8* nonnull %24, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_19CSSPropertyValueSetEE5TraceEPNS_7VisitorEPKv) #10
  br label %40

29:                                               ; preds = %2
  %30 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %0, i64 0, i32 1
  %31 = bitcast %"class.blink::Member"* %30 to i64*
  %32 = load atomic i64, i64* %31 monotonic, align 8
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %40, label %34

34:                                               ; preds = %29
  %35 = inttoptr i64 %32 to i8*
  %36 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %37 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %36, align 8
  %38 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %37, i64 5
  %39 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %38, align 8
  tail call void %39(%"class.blink::Visitor"* %1, i8* nonnull %35, i8* nonnull %35, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_19CSSPropertyValueSetEE5TraceEPNS_7VisitorEPKv) #10
  br label %40

40:                                               ; preds = %34, %29, %23, %18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink17UniqueElementData18TraceAfterDispatchEPNS_7VisitorE(%"class.blink::UniqueElementData"* nocapture readonly, %"class.blink::Visitor"*) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %0, i64 0, i32 1
  %4 = bitcast %"class.blink::Member"* %3 to i64*
  %5 = load atomic i64, i64* %4 monotonic, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %13, label %7

7:                                                ; preds = %2
  %8 = inttoptr i64 %5 to i8*
  %9 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %10 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %9, align 8
  %11 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %10, i64 5
  %12 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %11, align 8
  tail call void %12(%"class.blink::Visitor"* %1, i8* nonnull %8, i8* nonnull %8, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_19CSSPropertyValueSetEE5TraceEPNS_7VisitorEPKv) #10
  br label %13

13:                                               ; preds = %2, %7
  %14 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %0, i64 0, i32 0, i32 1
  %15 = bitcast %"class.blink::Member"* %14 to i64*
  %16 = load atomic i64, i64* %15 monotonic, align 8
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %24, label %18

18:                                               ; preds = %13
  %19 = inttoptr i64 %16 to i8*
  %20 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %21 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %20, align 8
  %22 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %21, i64 5
  %23 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %22, align 8
  tail call void %23(%"class.blink::Visitor"* %1, i8* nonnull %19, i8* nonnull %19, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_19CSSPropertyValueSetEE5TraceEPNS_7VisitorEPKv) #10
  br label %24

24:                                               ; preds = %13, %18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink11ElementData18TraceAfterDispatchEPNS_7VisitorE(%"class.blink::ElementData"* nocapture readonly, %"class.blink::Visitor"*) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %0, i64 0, i32 1
  %4 = bitcast %"class.blink::Member"* %3 to i64*
  %5 = load atomic i64, i64* %4 monotonic, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %13, label %7

7:                                                ; preds = %2
  %8 = inttoptr i64 %5 to i8*
  %9 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %10 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %9, align 8
  %11 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %10, i64 5
  %12 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %11, align 8
  tail call void %12(%"class.blink::Visitor"* %1, i8* nonnull %8, i8* nonnull %8, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_19CSSPropertyValueSetEE5TraceEPNS_7VisitorEPKv) #10
  br label %13

13:                                               ; preds = %2, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink20ShareableElementDataC2ERKN3WTF6VectorINS_9AttributeELj0ENS1_18PartitionAllocatorEEE(%"class.blink::ShareableElementData"* nocapture, %"class.WTF::Vector.193"* dereferenceable(16)) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.193", %"class.WTF::Vector.193"* %1, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = shl i32 %4, 1
  %6 = getelementptr inbounds %"class.blink::ShareableElementData", %"class.blink::ShareableElementData"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 %5, i32* %6, align 4
  %7 = getelementptr inbounds %"class.blink::ShareableElementData", %"class.blink::ShareableElementData"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  %8 = bitcast %"class.blink::CSSPropertyValueSet"** %7 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 24, i1 false) #10
  %9 = and i32 %4, 268435455
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %12

11:                                               ; preds = %49, %2
  ret void

12:                                               ; preds = %2, %49
  %13 = phi i64 [ %50, %49 ], [ 0, %2 ]
  %14 = trunc i64 %13 to i32
  %15 = tail call dereferenceable(16) %"class.blink::Attribute"* @_ZNK3WTF6VectorIN5blink9AttributeELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.193"* %1, i32 %14) #10
  %16 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %15, i64 0, i32 0, i32 0, i32 0
  %17 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %16, align 8
  %18 = getelementptr inbounds %"class.blink::ShareableElementData", %"class.blink::ShareableElementData"* %0, i64 0, i32 1, i64 %13, i32 0, i32 0, i32 0
  store %"class.blink::QualifiedName::QualifiedNameImpl"* %17, %"class.blink::QualifiedName::QualifiedNameImpl"** %18, align 8
  %19 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %17, null
  br i1 %19, label %27, label %20

20:                                               ; preds = %12
  %21 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %17, i64 0, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = and i32 %22, 16777216
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %27

25:                                               ; preds = %20
  %26 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %17, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %26) #10
  br label %27

27:                                               ; preds = %25, %20, %12
  %28 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %15, i64 0, i32 1, i32 0, i32 0, i32 0
  %29 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %28, align 8
  %30 = getelementptr inbounds %"class.blink::ShareableElementData", %"class.blink::ShareableElementData"* %0, i64 0, i32 1, i64 %13, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %29, %"class.WTF::StringImpl"** %30, align 8
  %31 = icmp eq %"class.WTF::StringImpl"* %29, null
  br i1 %31, label %49, label %32

32:                                               ; preds = %27
  %33 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %29, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %34 = load atomic i32, i32* %33 monotonic, align 4
  %35 = and i32 %34, 2
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %49

37:                                               ; preds = %32
  %38 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %29, i64 0, i32 0
  %39 = load i32, i32* %38, align 4
  %40 = zext i32 %39 to i33
  %41 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %40, i33 1) #10
  %42 = extractvalue { i33, i1 } %41, 1
  %43 = extractvalue { i33, i1 } %41, 0
  %44 = icmp slt i33 %43, 0
  %45 = or i1 %42, %44
  br i1 %45, label %46, label %47, !prof !2

46:                                               ; preds = %37
  tail call void @llvm.trap() #10
  unreachable

47:                                               ; preds = %37
  %48 = trunc i33 %43 to i32
  store i32 %48, i32* %38, align 4
  br label %49

49:                                               ; preds = %27, %32, %47
  %50 = add nuw nsw i64 %13, 1
  %51 = load i32, i32* %6, align 4
  %52 = lshr i32 %51, 1
  %53 = and i32 %52, 268435455
  %54 = zext i32 %53 to i64
  %55 = icmp ult i64 %50, %54
  br i1 %55, label %12, label %11
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink20ShareableElementDataD2Ev(%"class.blink::ShareableElementData"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::ShareableElementData", %"class.blink::ShareableElementData"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = and i32 %3, 536870910
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %35

6:                                                ; preds = %53, %1
  %7 = getelementptr inbounds %"class.blink::ShareableElementData", %"class.blink::ShareableElementData"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %9, label %23, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = and i32 %12, 2
  %14 = icmp eq i32 %13, 0
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %16 = load i32, i32* %15, align 4
  br i1 %14, label %17, label %19

17:                                               ; preds = %10
  %18 = add i32 %16, -1
  store i32 %18, i32* %15, align 4
  br label %19

19:                                               ; preds = %17, %10
  %20 = phi i32 [ %18, %17 ], [ %16, %10 ]
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %23

22:                                               ; preds = %19
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %8) #10
  br label %23

23:                                               ; preds = %22, %19, %6
  %24 = getelementptr inbounds %"class.blink::ShareableElementData", %"class.blink::ShareableElementData"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %25 = load %"class.blink::SpaceSplitString::Data"*, %"class.blink::SpaceSplitString::Data"** %24, align 8
  %26 = icmp eq %"class.blink::SpaceSplitString::Data"* %25, null
  br i1 %26, label %34, label %27

27:                                               ; preds = %23
  %28 = getelementptr inbounds %"class.blink::SpaceSplitString::Data", %"class.blink::SpaceSplitString::Data"* %25, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %28) #10
  %29 = getelementptr inbounds %"class.blink::SpaceSplitString::Data", %"class.blink::SpaceSplitString::Data"* %25, i64 0, i32 0, i32 0, i32 0, i32 0
  %30 = load i32, i32* %29, align 4
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %34

32:                                               ; preds = %27
  tail call void @_ZN5blink16SpaceSplitString4DataD1Ev(%"class.blink::SpaceSplitString::Data"* nonnull %25) #10
  %33 = bitcast %"class.blink::SpaceSplitString::Data"* %25 to i8*
  tail call void @free(i8* %33) #10
  br label %34

34:                                               ; preds = %23, %27, %32
  ret void

35:                                               ; preds = %1, %53
  %36 = phi i64 [ %55, %53 ], [ 0, %1 ]
  %37 = getelementptr inbounds %"class.blink::ShareableElementData", %"class.blink::ShareableElementData"* %0, i64 0, i32 1, i64 %36, i32 1, i32 0, i32 0, i32 0
  %38 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %37, align 8
  %39 = icmp eq %"class.WTF::StringImpl"* %38, null
  br i1 %39, label %53, label %40

40:                                               ; preds = %35
  %41 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %38, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %42 = load atomic i32, i32* %41 monotonic, align 4
  %43 = and i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %38, i64 0, i32 0
  %46 = load i32, i32* %45, align 4
  br i1 %44, label %47, label %49

47:                                               ; preds = %40
  %48 = add i32 %46, -1
  store i32 %48, i32* %45, align 4
  br label %49

49:                                               ; preds = %47, %40
  %50 = phi i32 [ %48, %47 ], [ %46, %40 ]
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %53

52:                                               ; preds = %49
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %38) #10
  br label %53

53:                                               ; preds = %35, %49, %52
  %54 = getelementptr inbounds %"class.blink::ShareableElementData", %"class.blink::ShareableElementData"* %0, i64 0, i32 1, i64 %36, i32 0
  tail call void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"* %54) #10
  %55 = add nuw nsw i64 %36, 1
  %56 = load i32, i32* %2, align 4
  %57 = lshr i32 %56, 1
  %58 = and i32 %57, 268435455
  %59 = zext i32 %58 to i64
  %60 = icmp ult i64 %55, %59
  br i1 %60, label %35, label %6
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink20ShareableElementDataC2ERKNS_17UniqueElementDataE(%"class.blink::ShareableElementData"* nocapture, %"class.blink::UniqueElementData"* dereferenceable(120)) unnamed_addr #1 align 2 {
  %3 = icmp eq %"class.blink::UniqueElementData"* %1, null
  br i1 %3, label %4, label %6

4:                                                ; preds = %2
  %5 = load i32, i32* null, align 536870912
  br label %14

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = and i32 %8, 1
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %14, label %11

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %1, i64 0, i32 2, i32 0, i32 0, i32 2
  %13 = load i32, i32* %12, align 4
  br label %18

14:                                               ; preds = %6, %4
  %15 = phi i32 [ %5, %4 ], [ %8, %6 ]
  %16 = lshr i32 %15, 1
  %17 = and i32 %16, 268435455
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %15, %14 ], [ %8, %11 ]
  %20 = phi i32 [ %17, %14 ], [ %13, %11 ]
  %21 = shl i32 %20, 1
  %22 = and i32 %19, 536870912
  %23 = or i32 %22, %21
  %24 = and i32 %19, 1073741824
  %25 = or i32 %23, %24
  %26 = and i32 %19, -2147483648
  %27 = or i32 %25, %26
  %28 = getelementptr inbounds %"class.blink::ShareableElementData", %"class.blink::ShareableElementData"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 %27, i32* %28, align 4
  %29 = getelementptr inbounds %"class.blink::ShareableElementData", %"class.blink::ShareableElementData"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.blink::CSSPropertyValueSet"* null, %"class.blink::CSSPropertyValueSet"** %29, align 8
  %30 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  %31 = load %"class.blink::SpaceSplitString::Data"*, %"class.blink::SpaceSplitString::Data"** %30, align 8
  %32 = getelementptr inbounds %"class.blink::ShareableElementData", %"class.blink::ShareableElementData"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  store %"class.blink::SpaceSplitString::Data"* %31, %"class.blink::SpaceSplitString::Data"** %32, align 8
  %33 = icmp eq %"class.blink::SpaceSplitString::Data"* %31, null
  br i1 %33, label %36, label %34

34:                                               ; preds = %18
  %35 = getelementptr inbounds %"class.blink::SpaceSplitString::Data", %"class.blink::SpaceSplitString::Data"* %31, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %35) #10
  br label %36

36:                                               ; preds = %34, %18
  %37 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %1, i64 0, i32 0, i32 3, i32 0, i32 0, i32 0
  %38 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %37, align 8
  %39 = getelementptr inbounds %"class.blink::ShareableElementData", %"class.blink::ShareableElementData"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %38, %"class.WTF::StringImpl"** %39, align 8
  %40 = icmp eq %"class.WTF::StringImpl"* %38, null
  br i1 %40, label %58, label %41

41:                                               ; preds = %36
  %42 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %38, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %43 = load atomic i32, i32* %42 monotonic, align 4
  %44 = and i32 %43, 2
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %58

46:                                               ; preds = %41
  %47 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %38, i64 0, i32 0
  %48 = load i32, i32* %47, align 4
  %49 = zext i32 %48 to i33
  %50 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %49, i33 1) #10
  %51 = extractvalue { i33, i1 } %50, 1
  %52 = extractvalue { i33, i1 } %50, 0
  %53 = icmp slt i33 %52, 0
  %54 = or i1 %51, %53
  br i1 %54, label %55, label %56, !prof !2

55:                                               ; preds = %46
  tail call void @llvm.trap() #10
  unreachable

56:                                               ; preds = %46
  %57 = trunc i33 %52 to i32
  store i32 %57, i32* %47, align 4
  br label %58

58:                                               ; preds = %36, %41, %56
  %59 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %1, i64 0, i32 0, i32 1, i32 0, i32 0
  %60 = load %"class.blink::CSSPropertyValueSet"*, %"class.blink::CSSPropertyValueSet"** %59, align 8
  %61 = icmp eq %"class.blink::CSSPropertyValueSet"* %60, null
  br i1 %61, label %72, label %62

62:                                               ; preds = %58
  %63 = tail call %"class.blink::ImmutableCSSPropertyValueSet"* @_ZNK5blink19CSSPropertyValueSet21ImmutableCopyIfNeededEv(%"class.blink::CSSPropertyValueSet"* nonnull %60) #10
  %64 = getelementptr inbounds %"class.blink::ShareableElementData", %"class.blink::ShareableElementData"* %0, i64 0, i32 0, i32 1
  %65 = ptrtoint %"class.blink::ImmutableCSSPropertyValueSet"* %63 to i64
  %66 = bitcast %"class.blink::Member"* %64 to i64*
  store atomic i64 %65, i64* %66 monotonic, align 8
  %67 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %72, label %69

69:                                               ; preds = %62
  %70 = bitcast %"class.blink::ImmutableCSSPropertyValueSet"* %63 to i8*
  %71 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %70) #10
  br label %72

72:                                               ; preds = %58, %69, %62
  %73 = load i32, i32* %28, align 4
  %74 = and i32 %73, 536870910
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %78, label %76

76:                                               ; preds = %72
  %77 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %1, i64 0, i32 2
  br label %79

78:                                               ; preds = %116, %72
  ret void

79:                                               ; preds = %76, %116
  %80 = phi i64 [ 0, %76 ], [ %117, %116 ]
  %81 = trunc i64 %80 to i32
  %82 = tail call dereferenceable(16) %"class.blink::Attribute"* @_ZNK3WTF6VectorIN5blink9AttributeELj4ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.7"* %77, i32 %81)
  %83 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %82, i64 0, i32 0, i32 0, i32 0
  %84 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %83, align 8
  %85 = getelementptr inbounds %"class.blink::ShareableElementData", %"class.blink::ShareableElementData"* %0, i64 0, i32 1, i64 %80, i32 0, i32 0, i32 0
  store %"class.blink::QualifiedName::QualifiedNameImpl"* %84, %"class.blink::QualifiedName::QualifiedNameImpl"** %85, align 8
  %86 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %84, null
  br i1 %86, label %94, label %87

87:                                               ; preds = %79
  %88 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %84, i64 0, i32 1
  %89 = load i32, i32* %88, align 4
  %90 = and i32 %89, 16777216
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %94

92:                                               ; preds = %87
  %93 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %84, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %93) #10
  br label %94

94:                                               ; preds = %92, %87, %79
  %95 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %82, i64 0, i32 1, i32 0, i32 0, i32 0
  %96 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %95, align 8
  %97 = getelementptr inbounds %"class.blink::ShareableElementData", %"class.blink::ShareableElementData"* %0, i64 0, i32 1, i64 %80, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %96, %"class.WTF::StringImpl"** %97, align 8
  %98 = icmp eq %"class.WTF::StringImpl"* %96, null
  br i1 %98, label %116, label %99

99:                                               ; preds = %94
  %100 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %96, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %101 = load atomic i32, i32* %100 monotonic, align 4
  %102 = and i32 %101, 2
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %104, label %116

104:                                              ; preds = %99
  %105 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %96, i64 0, i32 0
  %106 = load i32, i32* %105, align 4
  %107 = zext i32 %106 to i33
  %108 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %107, i33 1) #10
  %109 = extractvalue { i33, i1 } %108, 1
  %110 = extractvalue { i33, i1 } %108, 0
  %111 = icmp slt i33 %110, 0
  %112 = or i1 %109, %111
  br i1 %112, label %113, label %114, !prof !2

113:                                              ; preds = %104
  tail call void @llvm.trap() #10
  unreachable

114:                                              ; preds = %104
  %115 = trunc i33 %110 to i32
  store i32 %115, i32* %105, align 4
  br label %116

116:                                              ; preds = %94, %99, %114
  %117 = add nuw nsw i64 %80, 1
  %118 = load i32, i32* %28, align 4
  %119 = lshr i32 %118, 1
  %120 = and i32 %119, 268435455
  %121 = zext i32 %120 to i64
  %122 = icmp ult i64 %117, %121
  br i1 %122, label %79, label %78
}

declare %"class.blink::ImmutableCSSPropertyValueSet"* @_ZNK5blink19CSSPropertyValueSet21ImmutableCopyIfNeededEv(%"class.blink::CSSPropertyValueSet"*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(16) %"class.blink::Attribute"* @_ZNK3WTF6VectorIN5blink9AttributeELj4ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.7"*, i32) local_unnamed_addr #1 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #10
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector.7", %"class.WTF::Vector.7"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #10
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i8* %14, i8* %15) #10
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.4, i64 0, i64 0), i32 1176, %"class.logging::CheckOpResult"* nonnull %4) #10
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #10
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #10
  %23 = getelementptr inbounds %"class.WTF::Vector.7", %"class.WTF::Vector.7"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %24, i64 %25
  ret %"class.blink::Attribute"* %26
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::ShareableElementData"* @_ZN5blink20ShareableElementData20CreateWithAttributesERKN3WTF6VectorINS_9AttributeELj0ENS1_18PartitionAllocatorEEE(%"class.WTF::Vector.193"* dereferenceable(16)) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.WTF::Vector.193", %"class.WTF::Vector.193"* %0, i64 0, i32 0, i32 0, i32 2
  %3 = load i32, i32* %2, align 4
  %4 = zext i32 %3 to i64
  %5 = shl nuw nsw i64 %4, 4
  %6 = add nuw nsw i64 %5, 32
  %7 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_11ElementDataEEEPhm(i64 %6) #10
  %8 = bitcast i8* %7 to %"class.blink::ShareableElementData"*
  tail call void @_ZN5blink20ShareableElementDataC2ERKN3WTF6VectorINS_9AttributeELj0ENS1_18PartitionAllocatorEEE(%"class.blink::ShareableElementData"* %8, %"class.WTF::Vector.193"* dereferenceable(16) %0) #10
  %9 = getelementptr inbounds i8, i8* %7, i64 -4
  %10 = bitcast i8* %9 to i16*
  %11 = load atomic i16, i16* %10 monotonic, align 2
  %12 = or i16 %11, 1
  store atomic i16 %12, i16* %10 release, align 2
  ret %"class.blink::ShareableElementData"* %8
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink17UniqueElementDataC2Ev(%"class.blink::UniqueElementData"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 1, i32* %2, align 4
  %3 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  %4 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %0, i64 0, i32 2
  %5 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %0, i64 0, i32 2, i32 0, i32 1, i64 0
  %6 = bitcast %"class.WTF::Vector.7"* %4 to i8**
  %7 = bitcast %"class.blink::CSSPropertyValueSet"** %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 32, i1 false)
  store i8* %5, i8** %6, align 8
  %8 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  store i32 4, i32* %8, align 8
  %9 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  store i32 0, i32* %9, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink17UniqueElementDataC2ERKS0_(%"class.blink::UniqueElementData"*, %"class.blink::UniqueElementData"* dereferenceable(120)) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = and i32 %4, -536870912
  %6 = or i32 %5, 1
  %7 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 %6, i32* %7, align 4
  %8 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.blink::CSSPropertyValueSet"* null, %"class.blink::CSSPropertyValueSet"** %8, align 8
  %9 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  %10 = load %"class.blink::SpaceSplitString::Data"*, %"class.blink::SpaceSplitString::Data"** %9, align 8
  %11 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  store %"class.blink::SpaceSplitString::Data"* %10, %"class.blink::SpaceSplitString::Data"** %11, align 8
  %12 = icmp eq %"class.blink::SpaceSplitString::Data"* %10, null
  br i1 %12, label %15, label %13

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"class.blink::SpaceSplitString::Data", %"class.blink::SpaceSplitString::Data"* %10, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %14) #10
  br label %15

15:                                               ; preds = %13, %2
  %16 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %1, i64 0, i32 0, i32 3, i32 0, i32 0, i32 0
  %17 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %18 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %17, %"class.WTF::StringImpl"** %18, align 8
  %19 = icmp eq %"class.WTF::StringImpl"* %17, null
  br i1 %19, label %37, label %20

20:                                               ; preds = %15
  %21 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = load atomic i32, i32* %21 monotonic, align 4
  %23 = and i32 %22, 2
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %37

25:                                               ; preds = %20
  %26 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 0
  %27 = load i32, i32* %26, align 4
  %28 = zext i32 %27 to i33
  %29 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %28, i33 1) #10
  %30 = extractvalue { i33, i1 } %29, 1
  %31 = extractvalue { i33, i1 } %29, 0
  %32 = icmp slt i33 %31, 0
  %33 = or i1 %30, %32
  br i1 %33, label %34, label %35, !prof !2

34:                                               ; preds = %25
  tail call void @llvm.trap() #10
  unreachable

35:                                               ; preds = %25
  %36 = trunc i33 %31 to i32
  store i32 %36, i32* %26, align 4
  br label %37

37:                                               ; preds = %15, %20, %35
  %38 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %0, i64 0, i32 1
  %39 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %1, i64 0, i32 1
  %40 = bitcast %"class.blink::Member"* %39 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = bitcast %"class.blink::Member"* %38 to i64*
  store i64 %41, i64* %42, align 8
  %43 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %0, i64 0, i32 2
  %44 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %1, i64 0, i32 2
  tail call void @_ZN3WTF6VectorIN5blink9AttributeELj4ENS_18PartitionAllocatorEEC2ERKS4_(%"class.WTF::Vector.7"* %43, %"class.WTF::Vector.7"* dereferenceable(80) %44)
  %45 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %1, i64 0, i32 0, i32 1, i32 0, i32 0
  %46 = load %"class.blink::CSSPropertyValueSet"*, %"class.blink::CSSPropertyValueSet"** %45, align 8
  %47 = icmp eq %"class.blink::CSSPropertyValueSet"* %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %37
  %49 = tail call %"class.blink::MutableCSSPropertyValueSet"* @_ZNK5blink19CSSPropertyValueSet11MutableCopyEv(%"class.blink::CSSPropertyValueSet"* nonnull %46) #10
  br label %50

50:                                               ; preds = %37, %48
  %51 = phi %"class.blink::MutableCSSPropertyValueSet"* [ %49, %48 ], [ null, %37 ]
  %52 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %0, i64 0, i32 0, i32 1
  %53 = ptrtoint %"class.blink::MutableCSSPropertyValueSet"* %51 to i64
  %54 = bitcast %"class.blink::Member"* %52 to i64*
  store atomic i64 %53, i64* %54 monotonic, align 8
  %55 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %60, label %57

57:                                               ; preds = %50
  %58 = bitcast %"class.blink::MutableCSSPropertyValueSet"* %51 to i8*
  %59 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %58) #10
  br label %60

60:                                               ; preds = %50, %57
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink9AttributeELj4ENS_18PartitionAllocatorEEC2ERKS4_(%"class.WTF::Vector.7"*, %"class.WTF::Vector.7"* dereferenceable(80)) unnamed_addr #1 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.7", %"class.WTF::Vector.7"* %1, i64 0, i32 0, i32 0, i32 1
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.WTF::Vector.7", %"class.WTF::Vector.7"* %0, i64 0, i32 0, i32 1, i64 0
  %6 = bitcast %"class.WTF::Vector.7"* %0 to i8**
  store i8* %5, i8** %6, align 8
  %7 = getelementptr inbounds %"class.WTF::Vector.7", %"class.WTF::Vector.7"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 4, i32* %7, align 8
  %8 = icmp ugt i32 %4, 4
  br i1 %8, label %9, label %17

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink9AttributeEEEmm(i64 %10) #10
  %12 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %11, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink9AttributeEEEPKcv, i64 0, i64 0)) #10
  %13 = ptrtoint i8* %12 to i64
  %14 = bitcast %"class.WTF::Vector.7"* %0 to i64*
  store atomic i64 %13, i64* %14 monotonic, align 8
  %15 = lshr i64 %11, 4
  %16 = trunc i64 %15 to i32
  store i32 %16, i32* %7, align 8
  br label %17

17:                                               ; preds = %2, %9
  %18 = phi i8* [ %5, %2 ], [ %12, %9 ]
  %19 = getelementptr inbounds %"class.WTF::Vector.7", %"class.WTF::Vector.7"* %1, i64 0, i32 0, i32 0, i32 2
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %"class.WTF::Vector.7", %"class.WTF::Vector.7"* %0, i64 0, i32 0, i32 0, i32 2
  store i32 %20, i32* %21, align 4
  %22 = getelementptr inbounds %"class.WTF::Vector.7", %"class.WTF::Vector.7"* %1, i64 0, i32 0, i32 0, i32 0
  %23 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %22, align 8
  %24 = load i32, i32* %19, align 4
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %23, i64 %25
  %27 = icmp eq i32 %24, 0
  br i1 %27, label %70, label %28

28:                                               ; preds = %17
  %29 = bitcast i8* %18 to %"class.blink::Attribute"*
  br label %30

30:                                               ; preds = %28, %66
  %31 = phi %"class.blink::Attribute"* [ %67, %66 ], [ %29, %28 ]
  %32 = phi %"class.blink::Attribute"* [ %68, %66 ], [ %23, %28 ]
  %33 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %32, i64 0, i32 0, i32 0, i32 0
  %34 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %33, align 8
  %35 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %31, i64 0, i32 0, i32 0, i32 0
  store %"class.blink::QualifiedName::QualifiedNameImpl"* %34, %"class.blink::QualifiedName::QualifiedNameImpl"** %35, align 8
  %36 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %34, null
  br i1 %36, label %44, label %37

37:                                               ; preds = %30
  %38 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %34, i64 0, i32 1
  %39 = load i32, i32* %38, align 4
  %40 = and i32 %39, 16777216
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %44

42:                                               ; preds = %37
  %43 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %34, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %43) #10
  br label %44

44:                                               ; preds = %42, %37, %30
  %45 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %32, i64 0, i32 1, i32 0, i32 0, i32 0
  %46 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %45, align 8
  %47 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %31, i64 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %46, %"class.WTF::StringImpl"** %47, align 8
  %48 = icmp eq %"class.WTF::StringImpl"* %46, null
  br i1 %48, label %66, label %49

49:                                               ; preds = %44
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %46, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %51 = load atomic i32, i32* %50 monotonic, align 4
  %52 = and i32 %51, 2
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %66

54:                                               ; preds = %49
  %55 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %46, i64 0, i32 0
  %56 = load i32, i32* %55, align 4
  %57 = zext i32 %56 to i33
  %58 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %57, i33 1) #10
  %59 = extractvalue { i33, i1 } %58, 1
  %60 = extractvalue { i33, i1 } %58, 0
  %61 = icmp slt i33 %60, 0
  %62 = or i1 %59, %61
  br i1 %62, label %63, label %64, !prof !2

63:                                               ; preds = %54
  tail call void @llvm.trap() #10
  unreachable

64:                                               ; preds = %54
  %65 = trunc i33 %60 to i32
  store i32 %65, i32* %55, align 4
  br label %66

66:                                               ; preds = %64, %49, %44
  %67 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %31, i64 1
  %68 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %32, i64 1
  %69 = icmp eq %"class.blink::Attribute"* %68, %26
  br i1 %69, label %70, label %30

70:                                               ; preds = %66, %17
  ret void
}

declare %"class.blink::MutableCSSPropertyValueSet"* @_ZNK5blink19CSSPropertyValueSet11MutableCopyEv(%"class.blink::CSSPropertyValueSet"*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink17UniqueElementDataC2ERKNS_20ShareableElementDataE(%"class.blink::UniqueElementData"*, %"class.blink::ShareableElementData"* dereferenceable(32)) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.blink::ShareableElementData", %"class.blink::ShareableElementData"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = and i32 %4, -536870912
  %6 = or i32 %5, 1
  %7 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 %6, i32* %7, align 4
  %8 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.blink::CSSPropertyValueSet"* null, %"class.blink::CSSPropertyValueSet"** %8, align 8
  %9 = getelementptr inbounds %"class.blink::ShareableElementData", %"class.blink::ShareableElementData"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  %10 = load %"class.blink::SpaceSplitString::Data"*, %"class.blink::SpaceSplitString::Data"** %9, align 8
  %11 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  store %"class.blink::SpaceSplitString::Data"* %10, %"class.blink::SpaceSplitString::Data"** %11, align 8
  %12 = icmp eq %"class.blink::SpaceSplitString::Data"* %10, null
  br i1 %12, label %15, label %13

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"class.blink::SpaceSplitString::Data", %"class.blink::SpaceSplitString::Data"* %10, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %14) #10
  br label %15

15:                                               ; preds = %13, %2
  %16 = getelementptr inbounds %"class.blink::ShareableElementData", %"class.blink::ShareableElementData"* %1, i64 0, i32 0, i32 3, i32 0, i32 0, i32 0
  %17 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %18 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %17, %"class.WTF::StringImpl"** %18, align 8
  %19 = icmp eq %"class.WTF::StringImpl"* %17, null
  br i1 %19, label %37, label %20

20:                                               ; preds = %15
  %21 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = load atomic i32, i32* %21 monotonic, align 4
  %23 = and i32 %22, 2
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %37

25:                                               ; preds = %20
  %26 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 0
  %27 = load i32, i32* %26, align 4
  %28 = zext i32 %27 to i33
  %29 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %28, i33 1) #10
  %30 = extractvalue { i33, i1 } %29, 1
  %31 = extractvalue { i33, i1 } %29, 0
  %32 = icmp slt i33 %31, 0
  %33 = or i1 %30, %32
  br i1 %33, label %34, label %35, !prof !2

34:                                               ; preds = %25
  tail call void @llvm.trap() #10
  unreachable

35:                                               ; preds = %25
  %36 = trunc i33 %31 to i32
  store i32 %36, i32* %26, align 4
  br label %37

37:                                               ; preds = %15, %20, %35
  %38 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %0, i64 0, i32 1, i32 0, i32 0
  store %"class.blink::CSSPropertyValueSet"* null, %"class.blink::CSSPropertyValueSet"** %38, align 8
  %39 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %0, i64 0, i32 2
  %40 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %0, i64 0, i32 2, i32 0, i32 1, i64 0
  %41 = bitcast %"class.WTF::Vector.7"* %39 to i8**
  store i8* %40, i8** %41, align 8
  %42 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  store i32 4, i32* %42, align 8
  %43 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  store i32 0, i32* %43, align 4
  %44 = getelementptr inbounds %"class.blink::ShareableElementData", %"class.blink::ShareableElementData"* %1, i64 0, i32 0, i32 1
  %45 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %0, i64 0, i32 0, i32 1
  %46 = bitcast %"class.blink::Member"* %44 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = bitcast %"class.blink::Member"* %45 to i64*
  store atomic i64 %47, i64* %48 monotonic, align 8
  %49 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %55, label %51

51:                                               ; preds = %37
  %52 = inttoptr i64 %47 to i8*
  %53 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %52) #10
  %54 = load i32, i32* %42, align 8
  br label %55

55:                                               ; preds = %37, %51
  %56 = phi i32 [ 4, %37 ], [ %54, %51 ]
  %57 = load i32, i32* %3, align 4
  %58 = lshr i32 %57, 1
  %59 = and i32 %58, 268435455
  %60 = icmp ult i32 %56, %59
  br i1 %60, label %61, label %81, !prof !3

61:                                               ; preds = %55
  %62 = getelementptr inbounds %"class.WTF::Vector.7", %"class.WTF::Vector.7"* %39, i64 0, i32 0, i32 0, i32 0
  %63 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %62, align 8
  %64 = icmp eq %"class.blink::Attribute"* %63, null
  br i1 %64, label %65, label %80

65:                                               ; preds = %61
  %66 = icmp ugt i32 %59, 4
  br i1 %66, label %67, label %75

67:                                               ; preds = %65
  %68 = zext i32 %59 to i64
  %69 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink9AttributeEEEmm(i64 %68) #10
  %70 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %69, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink9AttributeEEEPKcv, i64 0, i64 0)) #10
  %71 = ptrtoint i8* %70 to i64
  %72 = bitcast %"class.WTF::Vector.7"* %39 to i64*
  store atomic i64 %71, i64* %72 monotonic, align 8
  %73 = lshr i64 %69, 4
  %74 = trunc i64 %73 to i32
  br label %78

75:                                               ; preds = %65
  %76 = ptrtoint i8* %40 to i64
  %77 = bitcast %"class.WTF::Vector.7"* %39 to i64*
  store atomic i64 %76, i64* %77 monotonic, align 8
  br label %78

78:                                               ; preds = %75, %67
  %79 = phi i32 [ 4, %75 ], [ %74, %67 ]
  store i32 %79, i32* %42, align 8
  br label %83

80:                                               ; preds = %61
  tail call void @_ZN3WTF6VectorIN5blink9AttributeELj4ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.7"* %39, i32 %59) #10
  br label %83

81:                                               ; preds = %55
  %82 = icmp eq i32 %59, 0
  br i1 %82, label %87, label %83

83:                                               ; preds = %80, %78, %81
  %84 = getelementptr inbounds %"class.WTF::Vector.7", %"class.WTF::Vector.7"* %39, i64 0, i32 0, i32 0, i32 0
  %85 = zext i32 %59 to i64
  %86 = load i32, i32* %43, align 4
  br label %88

87:                                               ; preds = %126, %81
  ret void

88:                                               ; preds = %126, %83
  %89 = phi i32 [ %86, %83 ], [ %128, %126 ]
  %90 = phi i64 [ 0, %83 ], [ %129, %126 ]
  %91 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %84, align 8
  %92 = zext i32 %89 to i64
  %93 = getelementptr inbounds %"class.blink::ShareableElementData", %"class.blink::ShareableElementData"* %1, i64 0, i32 1, i64 %90, i32 0, i32 0, i32 0
  %94 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %93, align 8
  %95 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %91, i64 %92, i32 0, i32 0, i32 0
  store %"class.blink::QualifiedName::QualifiedNameImpl"* %94, %"class.blink::QualifiedName::QualifiedNameImpl"** %95, align 8
  %96 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %94, null
  br i1 %96, label %104, label %97

97:                                               ; preds = %88
  %98 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %94, i64 0, i32 1
  %99 = load i32, i32* %98, align 4
  %100 = and i32 %99, 16777216
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %102, label %104

102:                                              ; preds = %97
  %103 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %94, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %103) #10
  br label %104

104:                                              ; preds = %102, %97, %88
  %105 = getelementptr inbounds %"class.blink::ShareableElementData", %"class.blink::ShareableElementData"* %1, i64 0, i32 1, i64 %90, i32 1, i32 0, i32 0, i32 0
  %106 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %105, align 8
  %107 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %91, i64 %92, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %106, %"class.WTF::StringImpl"** %107, align 8
  %108 = icmp eq %"class.WTF::StringImpl"* %106, null
  br i1 %108, label %126, label %109

109:                                              ; preds = %104
  %110 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %106, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %111 = load atomic i32, i32* %110 monotonic, align 4
  %112 = and i32 %111, 2
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %114, label %126

114:                                              ; preds = %109
  %115 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %106, i64 0, i32 0
  %116 = load i32, i32* %115, align 4
  %117 = zext i32 %116 to i33
  %118 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %117, i33 1) #10
  %119 = extractvalue { i33, i1 } %118, 1
  %120 = extractvalue { i33, i1 } %118, 0
  %121 = icmp slt i33 %120, 0
  %122 = or i1 %119, %121
  br i1 %122, label %123, label %124, !prof !2

123:                                              ; preds = %114
  tail call void @llvm.trap() #10
  unreachable

124:                                              ; preds = %114
  %125 = trunc i33 %120 to i32
  store i32 %125, i32* %115, align 4
  br label %126

126:                                              ; preds = %104, %109, %124
  %127 = load i32, i32* %43, align 4
  %128 = add i32 %127, 1
  store i32 %128, i32* %43, align 4
  %129 = add nuw nsw i64 %90, 1
  %130 = icmp eq i64 %129, %85
  br i1 %130, label %87, label %88
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::ShareableElementData"* @_ZNK5blink17UniqueElementData17MakeShareableCopyEv(%"class.blink::UniqueElementData"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %3 = load i32, i32* %2, align 4
  %4 = zext i32 %3 to i64
  %5 = shl nuw nsw i64 %4, 4
  %6 = add nuw nsw i64 %5, 32
  %7 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_11ElementDataEEEPhm(i64 %6) #10
  %8 = bitcast i8* %7 to %"class.blink::ShareableElementData"*
  tail call void @_ZN5blink20ShareableElementDataC2ERKNS_17UniqueElementDataE(%"class.blink::ShareableElementData"* %8, %"class.blink::UniqueElementData"* dereferenceable(120) %0) #10
  %9 = getelementptr inbounds i8, i8* %7, i64 -4
  %10 = bitcast i8* %9 to i16*
  %11 = load atomic i16, i16* %10 monotonic, align 2
  %12 = or i16 %11, 1
  store atomic i16 %12, i16* %10 release, align 2
  ret %"class.blink::ShareableElementData"* %8
}

declare void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"*) local_unnamed_addr #5

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #6

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #7

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12VectorBufferIN5blink9AttributeELj4ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS2_(%"class.WTF::VectorBuffer.8"*, %"class.blink::Attribute"*) local_unnamed_addr #8 comdat align 2 {
  %3 = bitcast %"class.blink::Attribute"* %1 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %3) #10
  ret void
}

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"*) unnamed_addr #9

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #5

declare void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN5blink16SpaceSplitString4DataD1Ev(%"class.blink::SpaceSplitString::Data"*) unnamed_addr #9

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #9

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink10ThreadHeap8AllocateINS_11ElementDataEEEPhm(i64) local_unnamed_addr #1 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %6 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %5, i64 0, i32 1
  %7 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %6) #10
  %8 = icmp eq i8* %7, null
  br i1 %8, label %9, label %11, !prof !2

9:                                                ; preds = %1
  %10 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #10
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %6, i8* %10) #10
  br label %11

11:                                               ; preds = %1, %9
  %12 = phi i8* [ %10, %9 ], [ %7, %1 ]
  %13 = bitcast i8* %12 to %"class.blink::ThreadState"**
  %14 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %13, align 8
  %15 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %14, i64 0, i32 0, i32 0, i32 0, i32 0
  %16 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %15, align 8
  %17 = icmp ult i64 %0, 64
  %18 = icmp ugt i64 %0, 31
  %19 = zext i1 %18 to i64
  %20 = icmp ult i64 %0, 128
  %21 = select i1 %20, i64 2, i64 3
  %22 = select i1 %17, i64 %19, i64 %21
  %23 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_11ElementDataEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %28

25:                                               ; preds = %11
  %26 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %27 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %26, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_11ElementDataEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_11ElementDataEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #10
  br label %28

28:                                               ; preds = %11, %25
  %29 = phi i32 [ %23, %11 ], [ %27, %25 ]
  %30 = getelementptr inbounds %"class.blink::ThreadHeap", %"class.blink::ThreadHeap"* %16, i64 0, i32 19, i64 %22
  %31 = bitcast %"class.blink::BaseArena"** %30 to %"class.blink::NormalPageArena"**
  %32 = load %"class.blink::NormalPageArena"*, %"class.blink::NormalPageArena"** %31, align 8
  %33 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #10
  %34 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %34, align 8
  %35 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #10
  %36 = icmp ult i64 %0, -8
  br i1 %36, label %37, label %38

37:                                               ; preds = %28
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #10
  store i8* null, i8** %34, align 8
  br label %48

38:                                               ; preds = %28
  %39 = add nsw i64 %0, 8
  %40 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %39) #10
  %41 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* %40, i8* %41) #10
  %42 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %43 = load i8*, i8** %42, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #10
  store i8* %43, i8** %34, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %48, label %45

45:                                               ; preds = %38
  %46 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %46) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1, i64 0, i64 0), i32 246, %"class.logging::CheckOpResult"* nonnull %3) #10
  %47 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %46) #10
  br label %48

48:                                               ; preds = %37, %38, %45
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #10
  %49 = add i64 %0, 15
  %50 = and i64 %49, -8
  %51 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %32, i64 0, i32 4
  %52 = load i64, i64* %51, align 8
  %53 = icmp ult i64 %52, %50
  br i1 %53, label %86, label %54, !prof !2

54:                                               ; preds = %48
  %55 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %32, i64 0, i32 3
  %56 = load i8*, i8** %55, align 8
  %57 = getelementptr inbounds i8, i8* %56, i64 %50
  store i8* %57, i8** %55, align 8
  %58 = sub i64 %52, %50
  store i64 %58, i64* %51, align 8
  %59 = bitcast i8* %56 to i32*
  store i32 0, i32* %59, align 4
  %60 = getelementptr inbounds i8, i8* %56, i64 4
  %61 = bitcast i8* %60 to i16*
  %62 = trunc i32 %29 to i16
  %63 = shl i16 %62, 2
  store atomic i16 %63, i16* %61 monotonic, align 2
  %64 = lshr exact i64 %50, 1
  %65 = trunc i64 %64 to i16
  %66 = getelementptr inbounds i8, i8* %56, i64 6
  %67 = bitcast i8* %66 to i16*
  store i16 %65, i16* %67, align 2
  %68 = ptrtoint i8* %56 to i64
  %69 = and i64 %68, -131072
  %70 = inttoptr i64 %69 to i8*
  %71 = getelementptr inbounds i8, i8* %70, i64 4400
  %72 = bitcast i8* %71 to %"class.blink::PlatformAwareObjectStartBitmap"*
  %73 = bitcast i8* %71 to i64*
  %74 = load i64, i64* %73, align 16
  %75 = sub i64 %68, %74
  %76 = lshr i64 %75, 3
  %77 = lshr i64 %75, 6
  %78 = getelementptr inbounds %"class.blink::PlatformAwareObjectStartBitmap", %"class.blink::PlatformAwareObjectStartBitmap"* %72, i64 0, i32 0, i32 1, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = trunc i64 %76 to i32
  %81 = and i32 %80, 7
  %82 = shl i32 1, %81
  %83 = trunc i32 %82 to i8
  %84 = or i8 %79, %83
  store atomic i8 %84, i8* %78 release, align 1
  %85 = getelementptr inbounds i8, i8* %56, i64 8
  br label %89

86:                                               ; preds = %48
  %87 = zext i32 %29 to i64
  %88 = call i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"* %32, i64 %50, i64 %87) #10
  br label %89

89:                                               ; preds = %54, %86
  %90 = phi i8* [ %85, %54 ], [ %88, %86 ]
  ret i8* %90
}

declare i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64, i8*) local_unnamed_addr #5

declare i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"*) local_unnamed_addr #5

declare void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"*, i8*) local_unnamed_addr #5

declare i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"*, i64, i64) local_unnamed_addr #5

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #5

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #9

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #5

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_11ElementDataEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #1 comdat align 2 {
  %3 = bitcast i8* %1 to i32*
  %4 = load atomic i32, i32* %3 monotonic, align 4
  %5 = and i32 %4, 1
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %29, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds i8, i8* %1, i64 32
  %9 = bitcast i8* %8 to i64*
  %10 = load atomic i64, i64* %9 monotonic, align 8
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %18, label %12

12:                                               ; preds = %7
  %13 = inttoptr i64 %10 to i8*
  %14 = bitcast %"class.blink::Visitor"* %0 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %15 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %14, align 8
  %16 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %15, i64 5
  %17 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %16, align 8
  tail call void %17(%"class.blink::Visitor"* %0, i8* nonnull %13, i8* nonnull %13, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_19CSSPropertyValueSetEE5TraceEPNS_7VisitorEPKv) #10
  br label %18

18:                                               ; preds = %12, %7
  %19 = getelementptr inbounds i8, i8* %1, i64 8
  %20 = bitcast i8* %19 to i64*
  %21 = load atomic i64, i64* %20 monotonic, align 8
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %40, label %23

23:                                               ; preds = %18
  %24 = inttoptr i64 %21 to i8*
  %25 = bitcast %"class.blink::Visitor"* %0 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %26 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %25, align 8
  %27 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %26, i64 5
  %28 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %27, align 8
  tail call void %28(%"class.blink::Visitor"* %0, i8* nonnull %24, i8* nonnull %24, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_19CSSPropertyValueSetEE5TraceEPNS_7VisitorEPKv) #10
  br label %40

29:                                               ; preds = %2
  %30 = getelementptr inbounds i8, i8* %1, i64 8
  %31 = bitcast i8* %30 to i64*
  %32 = load atomic i64, i64* %31 monotonic, align 8
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %40, label %34

34:                                               ; preds = %29
  %35 = inttoptr i64 %32 to i8*
  %36 = bitcast %"class.blink::Visitor"* %0 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %37 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %36, align 8
  %38 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %37, i64 5
  %39 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %38, align 8
  tail call void %39(%"class.blink::Visitor"* %0, i8* nonnull %35, i8* nonnull %35, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_19CSSPropertyValueSetEE5TraceEPNS_7VisitorEPKv) #10
  br label %40

40:                                               ; preds = %18, %23, %29, %34
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8internal14FinalizerTraitINS_11ElementDataEE8FinalizeEPv(i8*) #1 comdat align 2 {
  %2 = icmp eq i8* %0, null
  br i1 %2, label %10, label %3

3:                                                ; preds = %1
  %4 = bitcast i8* %0 to i32*
  %5 = load i32, i32* %4, align 4
  %6 = and i32 %5, 1
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %10, label %8

8:                                                ; preds = %3
  %9 = bitcast i8* %0 to %"class.blink::UniqueElementData"*
  tail call void @_ZN5blink17UniqueElementDataD2Ev(%"class.blink::UniqueElementData"* nonnull %9) #10
  br label %12

10:                                               ; preds = %3, %1
  %11 = bitcast i8* %0 to %"class.blink::ShareableElementData"*
  tail call void @_ZN5blink20ShareableElementDataD2Ev(%"class.blink::ShareableElementData"* %11) #10
  br label %12

12:                                               ; preds = %8, %10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_11ElementDataEE7GetNameEPKv(i8*) #1 comdat align 2 {
  ret { i8*, i8 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i8 1 }
}

declare i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"*, %"struct.blink::GCInfo"*, %"struct.std::__1::atomic"*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_19CSSPropertyValueSetEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #1 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::CSSPropertyValueSet"*
  tail call void @_ZNK5blink19CSSPropertyValueSet5TraceEPNS_7VisitorE(%"class.blink::CSSPropertyValueSet"* %3, %"class.blink::Visitor"* %0) #10
  ret void
}

declare void @_ZNK5blink19CSSPropertyValueSet5TraceEPNS_7VisitorE(%"class.blink::CSSPropertyValueSet"*, %"class.blink::Visitor"*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(16) %"class.blink::Attribute"* @_ZNK3WTF6VectorIN5blink9AttributeELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.193"*, i32) local_unnamed_addr #1 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #10
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector.193", %"class.WTF::Vector.193"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #10
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i8* %14, i8* %15) #10
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.4, i64 0, i64 0), i32 1176, %"class.logging::CheckOpResult"* nonnull %4) #10
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #10
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #10
  %23 = getelementptr inbounds %"class.WTF::Vector.193", %"class.WTF::Vector.193"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %24, i64 %25
  ret %"class.blink::Attribute"* %26
}

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #5

declare zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink9AttributeEEEmm(i64) local_unnamed_addr #1 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #10
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 134086656
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #10
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 134086656) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.5, i64 0, i64 0), i8* %11, i8* %12) #10
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.6, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #10
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #10
  %20 = shl i64 %0, 4
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #10
  ret i64 %21
}

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #5

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink9AttributeELj4ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.7"*, i32) local_unnamed_addr #1 comdat align 2 {
  %3 = icmp ult i32 %1, 5
  br i1 %3, label %4, label %52

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector.7", %"class.WTF::Vector.7"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %5, align 8
  %7 = icmp eq %"class.blink::Attribute"* %6, null
  %8 = getelementptr inbounds %"class.WTF::Vector.7", %"class.WTF::Vector.7"* %0, i64 0, i32 0, i32 1, i64 0
  %9 = bitcast i8* %8 to %"class.blink::Attribute"*
  %10 = icmp eq %"class.blink::Attribute"* %6, %9
  %11 = or i1 %10, %7
  br i1 %11, label %12, label %16

12:                                               ; preds = %4
  %13 = ptrtoint i8* %8 to i64
  %14 = bitcast %"class.WTF::Vector.7"* %0 to i64*
  store atomic i64 %13, i64* %14 monotonic, align 8
  %15 = getelementptr inbounds %"class.WTF::Vector.7", %"class.WTF::Vector.7"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 4, i32* %15, align 8
  br label %105

16:                                               ; preds = %4
  %17 = getelementptr inbounds %"class.WTF::Vector.7", %"class.WTF::Vector.7"* %0, i64 0, i32 0, i32 0, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i64
  %20 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %6, i64 %19
  %21 = getelementptr inbounds %"class.WTF::Vector.7", %"class.WTF::Vector.7"* %0, i64 0, i32 0
  %22 = ptrtoint i8* %8 to i64
  %23 = bitcast %"class.WTF::Vector.7"* %0 to i64*
  store atomic i64 %22, i64* %23 monotonic, align 8
  %24 = getelementptr inbounds %"class.WTF::Vector.7", %"class.WTF::Vector.7"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 4, i32* %24, align 8
  %25 = icmp eq i32 %18, 0
  br i1 %25, label %51, label %26

26:                                               ; preds = %16, %40
  %27 = phi %"class.blink::Attribute"* [ %49, %40 ], [ %6, %16 ]
  %28 = phi %"class.blink::Attribute"* [ %48, %40 ], [ %9, %16 ]
  %29 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %27, i64 0, i32 0, i32 0, i32 0
  %30 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %29, align 8
  %31 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %28, i64 0, i32 0, i32 0, i32 0
  store %"class.blink::QualifiedName::QualifiedNameImpl"* %30, %"class.blink::QualifiedName::QualifiedNameImpl"** %31, align 8
  %32 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %30, null
  br i1 %32, label %40, label %33

33:                                               ; preds = %26
  %34 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %30, i64 0, i32 1
  %35 = load i32, i32* %34, align 4
  %36 = and i32 %35, 16777216
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %40

38:                                               ; preds = %33
  %39 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %30, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %39) #10
  br label %40

40:                                               ; preds = %38, %33, %26
  %41 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %28, i64 0, i32 1
  %42 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %27, i64 0, i32 1
  %43 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %42, i64 0, i32 0, i32 0, i32 0
  %44 = bitcast %"class.WTF::AtomicString"* %42 to i64*
  %45 = load i64, i64* %44, align 8
  %46 = bitcast %"class.WTF::AtomicString"* %41 to i64*
  store i64 %45, i64* %46, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %43, align 8
  %47 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %27, i64 0, i32 0
  tail call void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"* %47) #10
  %48 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %28, i64 1
  %49 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %27, i64 1
  %50 = icmp eq %"class.blink::Attribute"* %49, %20
  br i1 %50, label %51, label %26

51:                                               ; preds = %40, %16
  tail call void @_ZN3WTF12VectorBufferIN5blink9AttributeELj4ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS2_(%"class.WTF::VectorBuffer.8"* %21, %"class.blink::Attribute"* %6) #10
  br label %105

52:                                               ; preds = %2
  %53 = zext i32 %1 to i64
  %54 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink9AttributeEEEmm(i64 %53) #10
  %55 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %54, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink9AttributeEEEPKcv, i64 0, i64 0)) #10
  %56 = lshr i64 %54, 4
  %57 = ptrtoint i8* %55 to i64
  %58 = getelementptr inbounds %"class.WTF::Vector.7", %"class.WTF::Vector.7"* %0, i64 0, i32 0, i32 0, i32 0
  %59 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %58, align 8
  %60 = getelementptr inbounds %"class.WTF::Vector.7", %"class.WTF::Vector.7"* %0, i64 0, i32 0, i32 0, i32 2
  %61 = load i32, i32* %60, align 4
  %62 = zext i32 %61 to i64
  %63 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %59, i64 %62
  %64 = icmp eq i32 %61, 0
  br i1 %64, label %94, label %65

65:                                               ; preds = %52
  %66 = bitcast i8* %55 to %"class.blink::Attribute"*
  br label %67

67:                                               ; preds = %65, %81
  %68 = phi %"class.blink::Attribute"* [ %90, %81 ], [ %59, %65 ]
  %69 = phi %"class.blink::Attribute"* [ %89, %81 ], [ %66, %65 ]
  %70 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %68, i64 0, i32 0, i32 0, i32 0
  %71 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %70, align 8
  %72 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %69, i64 0, i32 0, i32 0, i32 0
  store %"class.blink::QualifiedName::QualifiedNameImpl"* %71, %"class.blink::QualifiedName::QualifiedNameImpl"** %72, align 8
  %73 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %71, null
  br i1 %73, label %81, label %74

74:                                               ; preds = %67
  %75 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %71, i64 0, i32 1
  %76 = load i32, i32* %75, align 4
  %77 = and i32 %76, 16777216
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %81

79:                                               ; preds = %74
  %80 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %71, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %80) #10
  br label %81

81:                                               ; preds = %79, %74, %67
  %82 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %69, i64 0, i32 1
  %83 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %68, i64 0, i32 1
  %84 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %83, i64 0, i32 0, i32 0, i32 0
  %85 = bitcast %"class.WTF::AtomicString"* %83 to i64*
  %86 = load i64, i64* %85, align 8
  %87 = bitcast %"class.WTF::AtomicString"* %82 to i64*
  store i64 %86, i64* %87, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %84, align 8
  %88 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %68, i64 0, i32 0
  tail call void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"* %88) #10
  %89 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %69, i64 1
  %90 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %68, i64 1
  %91 = icmp eq %"class.blink::Attribute"* %90, %63
  br i1 %91, label %92, label %67

92:                                               ; preds = %81
  %93 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %58, align 8
  br label %94

94:                                               ; preds = %92, %52
  %95 = phi %"class.blink::Attribute"* [ %93, %92 ], [ %59, %52 ]
  %96 = getelementptr inbounds %"class.WTF::Vector.7", %"class.WTF::Vector.7"* %0, i64 0, i32 0, i32 1, i64 0
  %97 = bitcast i8* %96 to %"class.blink::Attribute"*
  %98 = icmp eq %"class.blink::Attribute"* %95, %97
  br i1 %98, label %101, label %99, !prof !3

99:                                               ; preds = %94
  %100 = getelementptr inbounds %"class.WTF::Vector.7", %"class.WTF::Vector.7"* %0, i64 0, i32 0
  tail call void @_ZN3WTF12VectorBufferIN5blink9AttributeELj4ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS2_(%"class.WTF::VectorBuffer.8"* %100, %"class.blink::Attribute"* %95) #10
  br label %101

101:                                              ; preds = %94, %99
  %102 = bitcast %"class.WTF::Vector.7"* %0 to i64*
  store atomic i64 %57, i64* %102 monotonic, align 8
  %103 = trunc i64 %56 to i32
  %104 = getelementptr inbounds %"class.WTF::Vector.7", %"class.WTF::Vector.7"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %103, i32* %104, align 8
  br label %105

105:                                              ; preds = %51, %101, %12
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { cold noreturn nounwind }
attributes #8 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!"branch_weights", i32 2000, i32 1}
