; ModuleID = '../../third_party/blink/renderer/modules/accessibility/ax_relation_cache.cc'
source_filename = "../../third_party/blink/renderer/modules/accessibility/ax_relation_cache.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::QualifiedName" = type { %class.scoped_refptr.304 }
%class.scoped_refptr.304 = type { %"class.blink::QualifiedName::QualifiedNameImpl"* }
%"class.blink::QualifiedName::QualifiedNameImpl" = type { %"class.WTF::RefCounted", i32, %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr.261 }
%class.scoped_refptr.261 = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic.262" }
%"struct.std::__1::atomic.262" = type { %"struct.std::__1::__atomic_base.263" }
%"struct.std::__1::__atomic_base.263" = type { %"struct.std::__1::__atomic_base.264" }
%"struct.std::__1::__atomic_base.264" = type { %"struct.std::__1::__cxx_atomic_impl.265" }
%"struct.std::__1::__cxx_atomic_impl.265" = type { %"struct.std::__1::__cxx_atomic_base_impl.266" }
%"struct.std::__1::__cxx_atomic_base_impl.266" = type { i32 }
%"class.WTF::ThreadSpecific" = type { %"class.blink::ThreadState"**, %"class.base::ThreadLocalStorage::Slot" }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr.70", i32, [4 x i8], %"class.std::__1::unique_ptr.202", %"class.std::__1::unique_ptr.202", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.212", %"class.std::__1::unique_ptr.218", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.230", %"class.std::__1::unique_ptr.236", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.242", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.70" = type { %"class.std::__1::__compressed_pair.71" }
%"class.std::__1::__compressed_pair.71" = type { %"struct.std::__1::__compressed_pair_elem.72" }
%"struct.std::__1::__compressed_pair_elem.72" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.73", %"class.std::__1::unique_ptr.79", %"class.std::__1::unique_ptr.85", %"class.std::__1::unique_ptr.91", %"class.std::__1::unique_ptr.97", %"class.std::__1::unique_ptr.103", %"class.std::__1::unique_ptr.110", %"class.std::__1::unique_ptr.117", %"class.std::__1::unique_ptr.117", %"class.std::__1::unique_ptr.124", %"class.std::__1::unique_ptr.131", %"class.std::__1::unique_ptr.138", %"class.std::__1::unique_ptr.138", %"class.std::__1::unique_ptr.145", %"class.std::__1::unique_ptr.152", %"class.std::__1::unique_ptr.159", %"class.std::__1::unique_ptr.182", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.73" = type { %"class.std::__1::__compressed_pair.74" }
%"class.std::__1::__compressed_pair.74" = type { %"struct.std::__1::__compressed_pair_elem.75" }
%"struct.std::__1::__compressed_pair_elem.75" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.79" = type { %"class.std::__1::__compressed_pair.80" }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.85" = type { %"class.std::__1::__compressed_pair.86" }
%"class.std::__1::__compressed_pair.86" = type { %"struct.std::__1::__compressed_pair_elem.87" }
%"struct.std::__1::__compressed_pair_elem.87" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.91" = type { %"class.std::__1::__compressed_pair.92" }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.93" }
%"struct.std::__1::__compressed_pair_elem.93" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.97" = type { %"class.std::__1::__compressed_pair.98" }
%"class.std::__1::__compressed_pair.98" = type { %"struct.std::__1::__compressed_pair_elem.99" }
%"struct.std::__1::__compressed_pair_elem.99" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.103" = type { %"class.std::__1::__compressed_pair.104" }
%"class.std::__1::__compressed_pair.104" = type { %"struct.std::__1::__compressed_pair_elem.105" }
%"struct.std::__1::__compressed_pair_elem.105" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.106" }
%"struct.std::__1::__atomic_base.106" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }
%"class.std::__1::unique_ptr.110" = type { %"class.std::__1::__compressed_pair.111" }
%"class.std::__1::__compressed_pair.111" = type { %"struct.std::__1::__compressed_pair_elem.112" }
%"struct.std::__1::__compressed_pair_elem.112" = type { %"class.blink::Worklist.113"* }
%"class.blink::Worklist.113" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.117" = type { %"class.std::__1::__compressed_pair.118" }
%"class.std::__1::__compressed_pair.118" = type { %"struct.std::__1::__compressed_pair_elem.119" }
%"struct.std::__1::__compressed_pair_elem.119" = type { %"class.blink::Worklist.120"* }
%"class.blink::Worklist.120" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.124" = type { %"class.std::__1::__compressed_pair.125" }
%"class.std::__1::__compressed_pair.125" = type { %"struct.std::__1::__compressed_pair_elem.126" }
%"struct.std::__1::__compressed_pair_elem.126" = type { %"class.blink::Worklist.127"* }
%"class.blink::Worklist.127" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.131" = type { %"class.std::__1::__compressed_pair.132" }
%"class.std::__1::__compressed_pair.132" = type { %"struct.std::__1::__compressed_pair_elem.133" }
%"struct.std::__1::__compressed_pair_elem.133" = type { %"class.blink::Worklist.134"* }
%"class.blink::Worklist.134" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.138" = type { %"class.std::__1::__compressed_pair.139" }
%"class.std::__1::__compressed_pair.139" = type { %"struct.std::__1::__compressed_pair_elem.140" }
%"struct.std::__1::__compressed_pair_elem.140" = type { %"class.blink::Worklist.141"* }
%"class.blink::Worklist.141" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.145" = type { %"class.std::__1::__compressed_pair.146" }
%"class.std::__1::__compressed_pair.146" = type { %"struct.std::__1::__compressed_pair_elem.147" }
%"struct.std::__1::__compressed_pair_elem.147" = type { %"class.blink::Worklist.148"* }
%"class.blink::Worklist.148" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.152" = type { %"class.std::__1::__compressed_pair.153" }
%"class.std::__1::__compressed_pair.153" = type { %"struct.std::__1::__compressed_pair_elem.154" }
%"struct.std::__1::__compressed_pair_elem.154" = type { %"class.blink::Worklist.155"* }
%"class.blink::Worklist.155" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.159" = type { %"class.std::__1::__compressed_pair.160" }
%"class.std::__1::__compressed_pair.160" = type { %"struct.std::__1::__compressed_pair_elem.161" }
%"struct.std::__1::__compressed_pair_elem.161" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.162", %"class.std::__1::__compressed_pair.169", %"class.std::__1::__compressed_pair.174", %"class.std::__1::__compressed_pair.176", [4 x i8] }>
%"class.std::__1::unique_ptr.162" = type { %"class.std::__1::__compressed_pair.163" }
%"class.std::__1::__compressed_pair.163" = type { %"struct.std::__1::__compressed_pair_elem.164", %"struct.std::__1::__compressed_pair_elem.165" }
%"struct.std::__1::__compressed_pair_elem.164" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.165" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.166" }
%"class.std::__1::__compressed_pair.166" = type { %"struct.std::__1::__compressed_pair_elem.167" }
%"struct.std::__1::__compressed_pair_elem.167" = type { i64 }
%"class.std::__1::__compressed_pair.169" = type { %"struct.std::__1::__compressed_pair_elem.170" }
%"struct.std::__1::__compressed_pair_elem.170" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.174" = type { %"struct.std::__1::__compressed_pair_elem.167" }
%"class.std::__1::__compressed_pair.176" = type { %"struct.std::__1::__compressed_pair_elem.177" }
%"struct.std::__1::__compressed_pair_elem.177" = type { float }
%"class.std::__1::unique_ptr.182" = type { %"class.std::__1::__compressed_pair.183" }
%"class.std::__1::__compressed_pair.183" = type { %"struct.std::__1::__compressed_pair_elem.184" }
%"struct.std::__1::__compressed_pair_elem.184" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.185", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.185" = type { %"class.std::__1::__compressed_pair.186" }
%"class.std::__1::__compressed_pair.186" = type { %"struct.std::__1::__compressed_pair_elem.187" }
%"struct.std::__1::__compressed_pair_elem.187" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.194" }
%"class.WTF::Vector.194" = type { %"class.WTF::VectorBuffer.195" }
%"class.WTF::VectorBuffer.195" = type { %"class.WTF::VectorBufferBase.196" }
%"class.WTF::VectorBufferBase.196" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.202" = type { %"class.std::__1::__compressed_pair.203" }
%"class.std::__1::__compressed_pair.203" = type { %"struct.std::__1::__compressed_pair_elem.204" }
%"struct.std::__1::__compressed_pair_elem.204" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.210" }
%"class.WTF::VectorBuffer.210" = type { %"class.WTF::VectorBufferBase.211" }
%"class.WTF::VectorBufferBase.211" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.212" = type { %"class.std::__1::__compressed_pair.213" }
%"class.std::__1::__compressed_pair.213" = type { %"struct.std::__1::__compressed_pair_elem.214" }
%"struct.std::__1::__compressed_pair_elem.214" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.218" = type { %"class.std::__1::__compressed_pair.219" }
%"class.std::__1::__compressed_pair.219" = type { %"struct.std::__1::__compressed_pair_elem.220" }
%"struct.std::__1::__compressed_pair_elem.220" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.224" }
%"class.std::__1::unique_ptr.224" = type { %"class.std::__1::__compressed_pair.225" }
%"class.std::__1::__compressed_pair.225" = type { %"struct.std::__1::__compressed_pair_elem.226" }
%"struct.std::__1::__compressed_pair_elem.226" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.113"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.120"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.127"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.134"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.141"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.271" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.271" = type { %"struct.std::__1::__compressed_pair_elem.272" }
%"struct.std::__1::__compressed_pair_elem.272" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.230" = type { %"class.std::__1::__compressed_pair.231" }
%"class.std::__1::__compressed_pair.231" = type { %"struct.std::__1::__compressed_pair_elem.232" }
%"struct.std::__1::__compressed_pair_elem.232" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.236" = type { %"class.std::__1::__compressed_pair.237" }
%"class.std::__1::__compressed_pair.237" = type { %"struct.std::__1::__compressed_pair_elem.238" }
%"struct.std::__1::__compressed_pair_elem.238" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.242" = type { %"struct.std::__1::__atomic_base.243" }
%"struct.std::__1::__atomic_base.243" = type { %"struct.std::__1::__cxx_atomic_impl.244" }
%"struct.std::__1::__cxx_atomic_impl.244" = type { %"struct.std::__1::__cxx_atomic_base_impl.245" }
%"struct.std::__1::__cxx_atomic_base_impl.245" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::ThreadLocalStorage::Slot" = type { i32, i32 }
%"class.blink::AtomicEntryFlag" = type { %"struct.std::__1::atomic.401" }
%"struct.std::__1::atomic.401" = type { %"struct.std::__1::__atomic_base.402" }
%"struct.std::__1::__atomic_base.402" = type { %"struct.std::__1::__atomic_base.403" }
%"struct.std::__1::__atomic_base.403" = type { %"struct.std::__1::__cxx_atomic_impl.404" }
%"struct.std::__1::__cxx_atomic_impl.404" = type { %"struct.std::__1::__cxx_atomic_base_impl.405" }
%"struct.std::__1::__cxx_atomic_base_impl.405" = type { i32 }
%"struct.blink::GCInfo" = type { void (%"class.blink::Visitor"*, i8*)*, void (i8*)*, { i8*, i8 } (i8*)*, i8 }
%"class.blink::GCInfoTable" = type { %"struct.blink::GCInfo"**, i32, i32, %"class.WTF::Mutex" }
%"class.blink::HTMLQualifiedName" = type { %"class.blink::QualifiedName" }
%"class.blink::AXRelationCache" = type { i32 (...)**, i8, %"class.blink::WeakPersistent", %"class.WTF::HashMap.246", %"class.WTF::HashMap.251", %"class.WTF::HashMap.256", %"class.WTF::HashSet.267", %"class.WTF::HashSet" }
%"class.blink::WeakPersistent" = type { %"class.blink::PersistentBase" }
%"class.blink::PersistentBase" = type { %"class.blink::AXObjectCacheImpl"*, %"class.blink::PersistentNodePtr" }
%"class.blink::PersistentNodePtr" = type { %"class.blink::PersistentNode"* }
%"class.WTF::HashMap.246" = type { %"class.WTF::HashTable.247" }
%"class.WTF::HashTable.247" = type <{ %"struct.WTF::KeyValuePair.250"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.250" = type { i32, %"class.WTF::Vector.764" }
%"class.WTF::Vector.764" = type { %"class.WTF::VectorBuffer.765" }
%"class.WTF::VectorBuffer.765" = type { %"class.WTF::VectorBufferBase.766" }
%"class.WTF::VectorBufferBase.766" = type { i32*, i32, i32 }
%"class.WTF::HashMap.251" = type { %"class.WTF::HashTable.252" }
%"class.WTF::HashTable.252" = type <{ %"struct.WTF::KeyValuePair.255"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.255" = type { i32, i32 }
%"class.WTF::HashMap.256" = type { %"class.WTF::HashTable.257" }
%"class.WTF::HashTable.257" = type <{ %"struct.WTF::KeyValuePair.260"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.260" = type { %"class.WTF::String", %"class.WTF::HashSet" }
%"class.WTF::HashSet.267" = type { %"class.WTF::HashTable.268" }
%"class.WTF::HashTable.268" = type <{ %"class.WTF::AtomicString"*, i32, i32, i32, [4 x i8] }>
%"class.WTF::HashSet" = type { %"class.WTF::HashTable.25" }
%"class.WTF::HashTable.25" = type <{ i32*, i32, i32, i32, [4 x i8] }>
%"class.blink::AXObjectCacheImpl" = type { %"class.blink::AXObjectCacheBase", %"class.blink::mojom::blink::PermissionObserver", %"class.blink::Member", %"class.ui::AXMode", [4 x i8], %"class.blink::HeapHashMap", %"class.blink::HeapHashMap.2", %"class.WTF::HashMap.9", %"class.blink::HeapHashMap.13", %"class.WTF::HashMap.20", i32, [4 x i8], %"class.WTF::HashSet", i32, %"class.blink::WeakMember", %"class.std::__1::unique_ptr", %"class.blink::HeapVector", i32, %"class.blink::HeapMojoRemote", %"class.blink::HeapMojoReceiver", %"class.blink::HeapHashSet", %"class.blink::HeapVector.44", %"class.blink::HeapHashSet.52", i32, i8, [3 x i8], %"class.WTF::HashMap.60", %"class.WTF::HashSet", %"class.WTF::HashSet", i32, i32, %"class.WTF::HashCountedSet", i8, [7 x i8], %"class.WTF::HashSet" }
%"class.blink::AXObjectCacheBase" = type { %"class.blink::AXObjectCache" }
%"class.blink::AXObjectCache" = type { i32 (...)** }
%"class.blink::mojom::blink::PermissionObserver" = type { i32 (...)** }
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::Document"* }
%"class.blink::Document" = type { %"class.blink::ContainerNode", %"class.blink::TreeScope", %"class.blink::UseCounter", %"class.blink::Supplementable", i32, %"class.blink::DocumentLifecycle", i8, i8, %"class.WTF::Vector.397", %"class.WTF::Vector.397", i8, i32, %"class.blink::Member.408", %"class.blink::Member.410", %"class.blink::Member.412", %"class.blink::Member.414", %"class.blink::Member.416", %"class.blink::Member.418", i8, %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.std::__1::unique_ptr.426", %"class.blink::KURL", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.blink::Member.432", %"class.blink::Member.434", %"class.blink::Member.345", i32, i32, i32, i8, %"class.blink::TaskHandle", %"class.blink::TaskHandle", %"class.WTF::Vector.437", i8, i32, i8, %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapVector.321", %"class.blink::Member.302", %"class.blink::Member.467", %"class.blink::Member.302", %"class.blink::Member.302", %"class.blink::Member.302", %"class.blink::UserActionElementSet", %"class.blink::Member.476", double, double, i64, i64, %"class.blink::HeapHashSet.478", %"class.blink::HeapHashSet.485", i16, i8, %"class.blink::Member.492", %"class.blink::Member.494", %"class.blink::Member.496", %"class.blink::Member.498", %"class.blink::TextLinkColors", %"class.blink::Member.500", i8, [7 x i8], %"class.blink::HeapHashMap.502", i32, i32, i8, i8, i8, i32, i32, i32, i8, %"class.WTF::String", %"class.WTF::String", %"class.blink::Member.302", %"class.WTF::Vector.509", %"class.blink::Member.514", %"class.blink::Member.516", i8, %"class.blink::Member.302", i8, i32, i8, %"class.base::ElapsedTimer", %"class.blink::Member.518", %"class.blink::HeapVector.520", %"class.std::__1::unique_ptr.528", %"class.WTF::String", %"class.WTF::String", i8, %"class.WTF::AtomicString", %"class.blink::DocumentEncodingData", i8, i8, [6 x i8], %"class.blink::HeapHashSet.534", %"class.blink::LiveNodeListRegistry", %"class.blink::Member.547", %"class.WTF::Vector.549", i8, i8, %"class.std::__1::unique_ptr.554", %"class.blink::NthIndexCache"*, i8, i8, i8, i8, i8, i8, %"class.blink::LayoutView"*, %"class.blink::HeapVector.321", %"class.blink::HeapVector.560", i32, i8, %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapTaskRunnerTimer", %"class.blink::DocumentTiming", %"class.blink::Member.568", i8, i32, %"class.blink::Member.570", %"class.blink::Member.572", %"class.blink::Member.574", %"class.blink::HeapTaskRunnerTimer", %"class.blink::Member.576", %"class.WTF::HashMap.578", %"class.blink::Member.583", %"class.blink::Member.585", %"class.blink::Member.587", %"class.blink::Member.589", %"class.blink::Member", %"class.blink::Member", %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapHashSet.591", i8, i32, %"class.blink::Member.598", %"class.blink::Member.600", i32, %"class.blink::Member.602", %"class.blink::Member.604", %"class.blink::Member.606", %"class.std::__1::unique_ptr.608", i64, %"class.std::__1::unique_ptr.614", i32, i32, %"class.blink::Member.620", %"class.blink::Member.622", %"class.blink::Member.624", i8, i32, i32, i32, i32, i32, i32, i32, i8, i8, %"class.blink::Member.626", %"class.WTF::Vector.628", %"class.WTF::AtomicString", %"class.blink::HeapHashMap.633", %"class.blink::Member.640", %"class.std::__1::unique_ptr.642", %"class.blink::Member.648", i8, i8, %"class.WTF::String", %"class.blink::Member.650", i8, [7 x i8], %"class.blink::HeapHashMap.652", %"class.blink::HeapObserverSet", %"class.blink::Member.666", i8, i8, i8, i8, i8, i8, i8, %"class.blink::Member.668", i32, i8, i8, %"class.blink::WeakMember.58", %"class.blink::Member.670" }
%"class.blink::ContainerNode" = type { %"class.blink::Node", %"class.blink::Member.278", %"class.blink::Member.278" }
%"class.blink::Node" = type { %"class.blink::EventTarget", i32, %"class.blink::Member.278", %"class.blink::Member.279", %"class.blink::Member.278", %"class.blink::Member.278", %"class.blink::Member.281" }
%"class.blink::EventTarget" = type { %"class.blink::ScriptWrappable" }
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.blink::Member.279" = type { %"class.blink::MemberBase.280" }
%"class.blink::MemberBase.280" = type { %"class.blink::TreeScope"* }
%"class.blink::Member.281" = type { %"class.blink::MemberBase.282" }
%"class.blink::MemberBase.282" = type { %"class.blink::NodeData"* }
%"class.blink::NodeData" = type { i16, %"class.WTF::ConcurrentlyReadBitField" }
%"class.WTF::ConcurrentlyReadBitField" = type { %"class.WTF::SingleThreadedBitField" }
%"class.WTF::SingleThreadedBitField" = type { i16 }
%"class.blink::Member.278" = type { %"class.blink::MemberBase.59" }
%"class.blink::MemberBase.59" = type { %"class.blink::Node"* }
%"class.blink::TreeScope" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::Member.285", %"class.blink::Member", %"class.blink::Member.279", %"class.blink::Member.287", %"class.blink::Member.287", %"class.blink::Member.328", %"class.blink::Member.330", %"class.blink::Member.332", %"class.blink::RadioButtonGroupScope", %"class.blink::Member.337", %"class.blink::HeapVector.339" }
%"class.blink::GarbageCollectedMixin" = type { i32 (...)** }
%"class.blink::Member.285" = type { %"class.blink::MemberBase.286" }
%"class.blink::MemberBase.286" = type { %"class.blink::ContainerNode"* }
%"class.blink::Member.287" = type { %"class.blink::MemberBase.288" }
%"class.blink::MemberBase.288" = type { %"class.blink::TreeOrderedMap"* }
%"class.blink::TreeOrderedMap" = type { %"class.blink::HeapHashMap.291" }
%"class.blink::HeapHashMap.291" = type { %"class.WTF::HashMap.294" }
%"class.WTF::HashMap.294" = type { %"class.WTF::HashTable.295" }
%"class.WTF::HashTable.295" = type <{ %"struct.WTF::KeyValuePair.297"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.297" = type { %"class.WTF::AtomicString", %"class.blink::Member.298" }
%"class.blink::Member.298" = type { %"class.blink::MemberBase.299" }
%"class.blink::MemberBase.299" = type { %"class.blink::TreeOrderedMap::MapEntry"* }
%"class.blink::TreeOrderedMap::MapEntry" = type { %"class.blink::Member.302", i32, %"class.blink::HeapVector.321" }
%"class.blink::Member.328" = type { %"class.blink::MemberBase.329" }
%"class.blink::MemberBase.329" = type { %"class.blink::IdTargetObserverRegistry"* }
%"class.blink::IdTargetObserverRegistry" = type opaque
%"class.blink::Member.330" = type { %"class.blink::MemberBase.331" }
%"class.blink::MemberBase.331" = type { %"class.blink::ScopedStyleResolver"* }
%"class.blink::ScopedStyleResolver" = type opaque
%"class.blink::Member.332" = type { %"class.blink::MemberBase.333" }
%"class.blink::MemberBase.333" = type { %"class.blink::DOMSelection"* }
%"class.blink::DOMSelection" = type opaque
%"class.blink::RadioButtonGroupScope" = type { %"class.blink::Member.334" }
%"class.blink::Member.334" = type { %"class.blink::MemberBase.335" }
%"class.blink::MemberBase.335" = type { %"class.blink::HeapHashMap.336"* }
%"class.blink::HeapHashMap.336" = type opaque
%"class.blink::Member.337" = type { %"class.blink::MemberBase.338" }
%"class.blink::MemberBase.338" = type { %"class.blink::SVGTreeScopeResources"* }
%"class.blink::SVGTreeScopeResources" = type opaque
%"class.blink::HeapVector.339" = type { %"class.WTF::Vector.342" }
%"class.WTF::Vector.342" = type { %"class.WTF::VectorBuffer.343" }
%"class.WTF::VectorBuffer.343" = type { %"class.WTF::VectorBufferBase.344" }
%"class.WTF::VectorBufferBase.344" = type { %"class.blink::Member.345"*, i32, i32 }
%"class.blink::UseCounter" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::Supplementable" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.390" }
%"class.blink::HeapHashMap.390" = type { %"class.WTF::HashMap.393" }
%"class.WTF::HashMap.393" = type { %"class.WTF::HashTable.394" }
%"class.WTF::HashTable.394" = type <{ %"struct.WTF::KeyValuePair.396"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.396" = type opaque
%"class.blink::DocumentLifecycle" = type <{ i32, i32, i32, i8, i8, [2 x i8] }>
%"class.WTF::Vector.397" = type { %"class.WTF::VectorBuffer.398" }
%"class.WTF::VectorBuffer.398" = type { %"class.WTF::VectorBufferBase.399" }
%"class.WTF::VectorBufferBase.399" = type { %"class.base::OnceCallback"*, i32, i32 }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.400 }
%class.scoped_refptr.400 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic.401" }
%"class.blink::Member.408" = type { %"class.blink::MemberBase.409" }
%"class.blink::MemberBase.409" = type { %"class.blink::LocalDOMWindow"* }
%"class.blink::LocalDOMWindow" = type opaque
%"class.blink::Member.410" = type { %"class.blink::MemberBase.411" }
%"class.blink::MemberBase.411" = type { %"class.blink::ExecutionContext"* }
%"class.blink::ExecutionContext" = type <{ %"class.blink::Supplementable.683", %"class.blink::MojoBindingContext", %"class.blink::ConsoleLogger", %"class.blink::UseCounter", %"class.blink::FeatureContext", %"class.v8::Isolate"*, %"class.blink::SecurityContext", %"class.blink::Member.724", i32, i8, [3 x i8], %"class.blink::HeapVector.726", i32, i8, i8, i8, i8, i8, i8, [6 x i8], %"class.blink::Member.734", %"class.blink::Member.736", %"class.blink::DOMTimerCoordinator", i32, [4 x i8], %"class.std::__1::unique_ptr.745", %"class.blink::Member.751", %"class.blink::Member.753", i8, [7 x i8] }>
%"class.blink::Supplementable.683" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.684" }
%"class.blink::HeapHashMap.684" = type { %"class.WTF::HashMap.687" }
%"class.WTF::HashMap.687" = type { %"class.WTF::HashTable.688" }
%"class.WTF::HashTable.688" = type <{ %"struct.WTF::KeyValuePair.690"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.690" = type opaque
%"class.blink::MojoBindingContext" = type { %"class.blink::ContextLifecycleNotifier", %"class.blink::Supplementable.699" }
%"class.blink::ContextLifecycleNotifier" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapObserverSet.691" }
%"class.blink::HeapObserverSet.691" = type { i32, [4 x i8], %"class.blink::HeapHashSet.692" }
%"class.blink::HeapHashSet.692" = type { %"class.WTF::HashSet.695" }
%"class.WTF::HashSet.695" = type { %"class.WTF::HashTable.696" }
%"class.WTF::HashTable.696" = type <{ %"class.blink::WeakMember.698"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.698" = type opaque
%"class.blink::Supplementable.699" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.700" }
%"class.blink::HeapHashMap.700" = type { %"class.WTF::HashMap.703" }
%"class.WTF::HashMap.703" = type { %"class.WTF::HashTable.704" }
%"class.WTF::HashTable.704" = type <{ %"struct.WTF::KeyValuePair.706"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.706" = type { i8*, %"class.blink::Member.772" }
%"class.blink::Member.772" = type { %"class.blink::MemberBase.773" }
%"class.blink::MemberBase.773" = type { %"class.blink::Supplement"* }
%"class.blink::Supplement" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::Member.774" }
%"class.blink::Member.774" = type { %"class.blink::MemberBase.775" }
%"class.blink::MemberBase.775" = type { %"class.blink::MojoBindingContext"* }
%"class.blink::ConsoleLogger" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::FeatureContext" = type { i32 (...)** }
%"class.blink::SecurityContext" = type { i32 (...)**, i32, %class.scoped_refptr.707, %"class.std::__1::unique_ptr.708", %"class.std::__1::unique_ptr.708", %"class.std::__1::unique_ptr.714", %"class.std::__1::unique_ptr.714", %"class.blink::Member.410", i32, [4 x i8], %"class.WTF::HashSet.720", i32, i32 }
%class.scoped_refptr.707 = type { %"class.blink::SecurityOrigin"* }
%"class.blink::SecurityOrigin" = type opaque
%"class.std::__1::unique_ptr.708" = type { %"class.std::__1::__compressed_pair.709" }
%"class.std::__1::__compressed_pair.709" = type { %"struct.std::__1::__compressed_pair_elem.710" }
%"struct.std::__1::__compressed_pair_elem.710" = type { %"class.blink::PermissionsPolicy"* }
%"class.blink::PermissionsPolicy" = type opaque
%"class.std::__1::unique_ptr.714" = type { %"class.std::__1::__compressed_pair.715" }
%"class.std::__1::__compressed_pair.715" = type { %"struct.std::__1::__compressed_pair_elem.716" }
%"struct.std::__1::__compressed_pair_elem.716" = type { %"class.blink::DocumentPolicy"* }
%"class.blink::DocumentPolicy" = type opaque
%"class.WTF::HashSet.720" = type { %"class.WTF::HashTable.721" }
%"class.WTF::HashTable.721" = type <{ i32*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.724" = type { %"class.blink::MemberBase.725" }
%"class.blink::MemberBase.725" = type { %"class.blink::Agent"* }
%"class.blink::Agent" = type opaque
%"class.blink::HeapVector.726" = type { %"class.WTF::Vector.729" }
%"class.WTF::Vector.729" = type { %"class.WTF::VectorBuffer.730" }
%"class.WTF::VectorBuffer.730" = type { %"class.WTF::VectorBufferBase.731" }
%"class.WTF::VectorBufferBase.731" = type { %"class.blink::Member.732"*, i32, i32 }
%"class.blink::Member.732" = type opaque
%"class.blink::Member.734" = type { %"class.blink::MemberBase.735" }
%"class.blink::MemberBase.735" = type { %"class.blink::PublicURLManager"* }
%"class.blink::PublicURLManager" = type opaque
%"class.blink::Member.736" = type { %"class.blink::MemberBase.737" }
%"class.blink::MemberBase.737" = type { %"class.blink::ContentSecurityPolicyDelegate"* }
%"class.blink::ContentSecurityPolicyDelegate" = type opaque
%"class.blink::DOMTimerCoordinator" = type { %"class.blink::HeapHashMap.738", i32, i32 }
%"class.blink::HeapHashMap.738" = type { %"class.WTF::HashMap.741" }
%"class.WTF::HashMap.741" = type { %"class.WTF::HashTable.742" }
%"class.WTF::HashTable.742" = type <{ %"struct.WTF::KeyValuePair.744"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.744" = type opaque
%"class.std::__1::unique_ptr.745" = type { %"class.std::__1::__compressed_pair.746" }
%"class.std::__1::__compressed_pair.746" = type { %"struct.std::__1::__compressed_pair_elem.747" }
%"struct.std::__1::__compressed_pair_elem.747" = type { %"class.blink::PolicyContainer"* }
%"class.blink::PolicyContainer" = type opaque
%"class.blink::Member.751" = type { %"class.blink::MemberBase.752" }
%"class.blink::MemberBase.752" = type { %"class.blink::OriginTrialContext"* }
%"class.blink::OriginTrialContext" = type opaque
%"class.blink::Member.753" = type { %"class.blink::MemberBase.754" }
%"class.blink::MemberBase.754" = type { %"class.blink::ContentSecurityPolicy"* }
%"class.blink::ContentSecurityPolicy" = type opaque
%"class.blink::Member.412" = type { %"class.blink::MemberBase.413" }
%"class.blink::MemberBase.413" = type { %"class.blink::ResourceFetcher"* }
%"class.blink::ResourceFetcher" = type opaque
%"class.blink::Member.414" = type { %"class.blink::MemberBase.415" }
%"class.blink::MemberBase.415" = type { %"class.blink::DocumentParser"* }
%"class.blink::DocumentParser" = type opaque
%"class.blink::Member.416" = type { %"class.blink::MemberBase.417" }
%"class.blink::MemberBase.417" = type { %"class.blink::ContextFeatures"* }
%"class.blink::ContextFeatures" = type opaque
%"class.blink::Member.418" = type { %"class.blink::MemberBase.419" }
%"class.blink::MemberBase.419" = type { %"class.blink::HttpRefreshScheduler"* }
%"class.blink::HttpRefreshScheduler" = type opaque
%"class.std::__1::unique_ptr.426" = type { %"class.std::__1::__compressed_pair.427" }
%"class.std::__1::__compressed_pair.427" = type { %"struct.std::__1::__compressed_pair_elem.428" }
%"struct.std::__1::__compressed_pair_elem.428" = type { %"class.blink::OriginAccessEntry"* }
%"class.blink::OriginAccessEntry" = type opaque
%"class.blink::KURL" = type { i8, i8, %"class.WTF::String", %"struct.url::Parsed", %"class.WTF::String", %"class.std::__1::unique_ptr.420" }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr.420" = type { %"class.std::__1::__compressed_pair.421" }
%"class.std::__1::__compressed_pair.421" = type { %"struct.std::__1::__compressed_pair_elem.422" }
%"struct.std::__1::__compressed_pair_elem.422" = type { %"class.blink::KURL"* }
%"class.blink::Member.432" = type { %"class.blink::MemberBase.433" }
%"class.blink::MemberBase.433" = type { %"class.blink::DocumentType"* }
%"class.blink::DocumentType" = type opaque
%"class.blink::Member.434" = type { %"class.blink::MemberBase.435" }
%"class.blink::MemberBase.435" = type { %"class.blink::DOMImplementation"* }
%"class.blink::DOMImplementation" = type opaque
%"class.blink::Member.345" = type { %"class.blink::MemberBase.346" }
%"class.blink::MemberBase.346" = type { %"class.blink::CSSStyleSheet"* }
%"class.blink::CSSStyleSheet" = type { %"class.blink::StyleSheet", %"class.blink::Member.347", i8, i8, i8, i8, i8, %"class.WTF::String", %class.scoped_refptr.349, %"class.WTF::Vector.350", %"class.WTF::Vector.350", %"class.blink::Member.278", %"class.blink::Member.355", %"class.blink::HeapHashSet.359", %"class.blink::Member", %"class.WTF::HashSet.267", %"class.WTF::TextPosition", %"class.blink::Member.366", %"class.blink::HeapVector.368", %"class.blink::Member.375" }
%"class.blink::StyleSheet" = type { %"class.blink::ScriptWrappable" }
%"class.blink::Member.347" = type { %"class.blink::MemberBase.348" }
%"class.blink::MemberBase.348" = type { %"class.blink::StyleSheetContents"* }
%"class.blink::StyleSheetContents" = type opaque
%class.scoped_refptr.349 = type { %"class.blink::MediaQuerySet"* }
%"class.blink::MediaQuerySet" = type opaque
%"class.WTF::Vector.350" = type { %"class.WTF::VectorBuffer.351" }
%"class.WTF::VectorBuffer.351" = type { %"class.WTF::VectorBufferBase.352" }
%"class.WTF::VectorBufferBase.352" = type { %"class.blink::MediaQueryResult"*, i32, i32 }
%"class.blink::MediaQueryResult" = type opaque
%"class.blink::Member.355" = type { %"class.blink::MemberBase.356" }
%"class.blink::MemberBase.356" = type { %"class.blink::CSSRule"* }
%"class.blink::CSSRule" = type { %"class.blink::ScriptWrappable", i8, %"class.blink::Member.357" }
%"class.blink::Member.357" = type { %"class.blink::MemberBase.358" }
%"class.blink::MemberBase.358" = type { %"class.blink::ScriptWrappable"* }
%"class.blink::HeapHashSet.359" = type { %"class.WTF::HashSet.362" }
%"class.WTF::HashSet.362" = type { %"class.WTF::HashTable.363" }
%"class.WTF::HashTable.363" = type <{ %"class.blink::WeakMember.365"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.365" = type { %"class.blink::MemberBase.280" }
%"class.WTF::TextPosition" = type { %"class.WTF::OrdinalNumber", %"class.WTF::OrdinalNumber" }
%"class.WTF::OrdinalNumber" = type { i32 }
%"class.blink::Member.366" = type { %"class.blink::MemberBase.367" }
%"class.blink::MemberBase.367" = type { %"class.blink::MediaList"* }
%"class.blink::MediaList" = type opaque
%"class.blink::HeapVector.368" = type { %"class.WTF::Vector.371" }
%"class.WTF::Vector.371" = type { %"class.WTF::VectorBuffer.372" }
%"class.WTF::VectorBuffer.372" = type { %"class.WTF::VectorBufferBase.373" }
%"class.WTF::VectorBufferBase.373" = type { %"class.blink::Member.355"*, i32, i32 }
%"class.blink::Member.375" = type { %"class.blink::MemberBase.376" }
%"class.blink::MemberBase.376" = type { %"class.blink::CSSRuleList"* }
%"class.blink::CSSRuleList" = type opaque
%"class.blink::TaskHandle" = type { %class.scoped_refptr.436 }
%class.scoped_refptr.436 = type { %"class.blink::TaskHandle::Runner"* }
%"class.blink::TaskHandle::Runner" = type opaque
%"class.WTF::Vector.437" = type { %"class.WTF::VectorBuffer.438" }
%"class.WTF::VectorBuffer.438" = type { %"class.WTF::VectorBufferBase.439" }
%"class.WTF::VectorBufferBase.439" = type { %"struct.blink::Document::PendingJavascriptUrl"*, i32, i32 }
%"struct.blink::Document::PendingJavascriptUrl" = type { %"class.blink::KURL", %class.scoped_refptr.440 }
%class.scoped_refptr.440 = type { %"class.blink::DOMWrapperWorld"* }
%"class.blink::DOMWrapperWorld" = type { %"class.WTF::RefCounted.441", i32, i32, %"class.blink::Persistent" }
%"class.WTF::RefCounted.441" = type { %"class.base::RefCounted.442" }
%"class.base::RefCounted.442" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::Persistent" = type { %"class.blink::PersistentBase.443" }
%"class.blink::PersistentBase.443" = type { %"class.blink::DOMDataStore"*, %"class.blink::PersistentNodePtr.455" }
%"class.blink::DOMDataStore" = type { i32 (...)**, i8, [7 x i8], %"class.blink::HeapHashMap.446" }
%"class.blink::HeapHashMap.446" = type { %"class.WTF::HashMap.449" }
%"class.WTF::HashMap.449" = type { %"class.WTF::HashTable.450" }
%"class.WTF::HashTable.450" = type <{ %"struct.WTF::KeyValuePair.452"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.452" = type { %"class.blink::WeakMember.453", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::WeakMember.453" = type { %"class.blink::MemberBase.454" }
%"class.blink::MemberBase.454" = type { %"class.blink::ScriptWrappable"* }
%"class.blink::PersistentNodePtr.455" = type { %"class.blink::PersistentNode"* }
%"class.blink::Member.467" = type { %"class.blink::MemberBase.468" }
%"class.blink::MemberBase.468" = type { %"class.blink::Range"* }
%"class.blink::Range" = type { %"class.blink::AbstractRange", %"class.blink::Member", %"class.blink::RangeBoundaryPoint", %"class.blink::RangeBoundaryPoint" }
%"class.blink::AbstractRange" = type { %"class.blink::ScriptWrappable" }
%"class.blink::RangeBoundaryPoint" = type <{ %"class.blink::Member.278", %"class.blink::Member.278", i64, i32, [4 x i8] }>
%"class.blink::UserActionElementSet" = type { %"class.blink::HeapHashMap.469" }
%"class.blink::HeapHashMap.469" = type { %"class.WTF::HashMap.472" }
%"class.WTF::HashMap.472" = type { %"class.WTF::HashTable.473" }
%"class.WTF::HashTable.473" = type <{ %"struct.WTF::KeyValuePair.475"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.475" = type opaque
%"class.blink::Member.476" = type { %"class.blink::MemberBase.477" }
%"class.blink::MemberBase.477" = type { %"class.blink::RootScrollerController"* }
%"class.blink::RootScrollerController" = type opaque
%"class.blink::HeapHashSet.478" = type { %"class.WTF::HashSet.481" }
%"class.WTF::HashSet.481" = type { %"class.WTF::HashTable.482" }
%"class.WTF::HashTable.482" = type <{ %"class.blink::WeakMember.484"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.484" = type opaque
%"class.blink::HeapHashSet.485" = type { %"class.WTF::HashSet.488" }
%"class.WTF::HashSet.488" = type { %"class.WTF::HashTable.489" }
%"class.WTF::HashTable.489" = type <{ %"class.blink::WeakMember.491"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.491" = type opaque
%"class.blink::Member.492" = type { %"class.blink::MemberBase.493" }
%"class.blink::MemberBase.493" = type { %"class.blink::ElementIntersectionObserverData"* }
%"class.blink::ElementIntersectionObserverData" = type opaque
%"class.blink::Member.494" = type { %"class.blink::MemberBase.495" }
%"class.blink::MemberBase.495" = type { %"class.blink::StyleEngine"* }
%"class.blink::StyleEngine" = type opaque
%"class.blink::Member.496" = type { %"class.blink::MemberBase.497" }
%"class.blink::MemberBase.497" = type { %"class.blink::StyleSheetList"* }
%"class.blink::StyleSheetList" = type { %"class.blink::ScriptWrappable", %"class.blink::Member.279", %"class.blink::HeapVector.339" }
%"class.blink::Member.498" = type { %"class.blink::MemberBase.499" }
%"class.blink::MemberBase.499" = type { %"class.blink::FormController"* }
%"class.blink::FormController" = type opaque
%"class.blink::TextLinkColors" = type { %"class.blink::Color", %"class.blink::Color", %"class.blink::Color", %"class.blink::Color", i8, i8, i8, i8 }
%"class.blink::Color" = type { i32 }
%"class.blink::Member.500" = type { %"class.blink::MemberBase.501" }
%"class.blink::MemberBase.501" = type { %"class.blink::VisitedLinkState"* }
%"class.blink::VisitedLinkState" = type opaque
%"class.blink::HeapHashMap.502" = type { %"class.WTF::HashMap.505" }
%"class.WTF::HashMap.505" = type { %"class.WTF::HashTable.506" }
%"class.WTF::HashTable.506" = type <{ %"struct.WTF::KeyValuePair.508"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.508" = type opaque
%"class.WTF::Vector.509" = type { %"class.WTF::VectorBuffer.510" }
%"class.WTF::VectorBuffer.510" = type { %"class.WTF::VectorBufferBase.511" }
%"class.WTF::VectorBufferBase.511" = type { %"class.blink::AXContext"**, i32, i32 }
%"class.blink::AXContext" = type opaque
%"class.blink::Member.514" = type { %"class.blink::MemberBase.515" }
%"class.blink::MemberBase.515" = type { %"class.blink::AXObjectCache"* }
%"class.blink::Member.516" = type { %"class.blink::MemberBase.517" }
%"class.blink::MemberBase.517" = type { %"class.blink::DocumentMarkerController"* }
%"class.blink::DocumentMarkerController" = type opaque
%"class.blink::Member.302" = type { %"class.blink::MemberBase.303" }
%"class.blink::MemberBase.303" = type { %"class.blink::Element"* }
%"class.blink::Element" = type { %"class.blink::ContainerNode", %"class.blink::Animatable", %"class.blink::QualifiedName", %"class.blink::Member.305" }
%"class.blink::Animatable" = type { i32 (...)** }
%"class.blink::Member.305" = type { %"class.blink::MemberBase.306" }
%"class.blink::MemberBase.306" = type { %"class.blink::ElementData"* }
%"class.blink::ElementData" = type { %"class.WTF::ConcurrentlyReadBitField.309", %"class.blink::Member.311", %"class.blink::SpaceSplitString", %"class.WTF::AtomicString" }
%"class.WTF::ConcurrentlyReadBitField.309" = type { %"class.WTF::SingleThreadedBitField.310" }
%"class.WTF::SingleThreadedBitField.310" = type { i32 }
%"class.blink::Member.311" = type { %"class.blink::MemberBase.312" }
%"class.blink::MemberBase.312" = type { %"class.blink::CSSPropertyValueSet"* }
%"class.blink::CSSPropertyValueSet" = type opaque
%"class.blink::SpaceSplitString" = type { %class.scoped_refptr.313 }
%class.scoped_refptr.313 = type { %"class.blink::SpaceSplitString::Data"* }
%"class.blink::SpaceSplitString::Data" = type { %"class.WTF::RefCounted.314", %"class.WTF::AtomicString", %"class.WTF::Vector.316" }
%"class.WTF::RefCounted.314" = type { %"class.base::RefCounted.315" }
%"class.base::RefCounted.315" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.316" = type { %"class.WTF::VectorBuffer.317" }
%"class.WTF::VectorBuffer.317" = type { %"class.WTF::VectorBufferBase.318", [32 x i8] }
%"class.WTF::VectorBufferBase.318" = type { %"class.WTF::AtomicString"*, i32, i32 }
%"class.base::ElapsedTimer" = type { %"class.base::TimeTicks" }
%"class.blink::Member.518" = type { %"class.blink::MemberBase.519" }
%"class.blink::MemberBase.519" = type { %"class.blink::ScriptRunner"* }
%"class.blink::ScriptRunner" = type opaque
%"class.blink::HeapVector.520" = type { %"class.WTF::Vector.523" }
%"class.WTF::Vector.523" = type { %"class.WTF::VectorBuffer.524" }
%"class.WTF::VectorBuffer.524" = type { %"class.WTF::VectorBufferBase.525" }
%"class.WTF::VectorBufferBase.525" = type { %"class.blink::Member.526"*, i32, i32 }
%"class.blink::Member.526" = type opaque
%"class.std::__1::unique_ptr.528" = type { %"class.std::__1::__compressed_pair.529" }
%"class.std::__1::__compressed_pair.529" = type { %"struct.std::__1::__compressed_pair_elem.530" }
%"struct.std::__1::__compressed_pair_elem.530" = type { %"class.blink::TransformSource"* }
%"class.blink::TransformSource" = type opaque
%"class.blink::DocumentEncodingData" = type <{ %"class.WTF::TextEncoding", i8, i8, [6 x i8] }>
%"class.WTF::TextEncoding" = type { i8* }
%"class.blink::HeapHashSet.534" = type { %"class.WTF::HashSet.537" }
%"class.WTF::HashSet.537" = type { %"class.WTF::HashTable.538" }
%"class.WTF::HashTable.538" = type <{ %"class.blink::WeakMember.540"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.540" = type opaque
%"class.blink::LiveNodeListRegistry" = type <{ %"class.WTF::Vector.541", i32, [4 x i8] }>
%"class.WTF::Vector.541" = type { %"class.WTF::VectorBuffer.542" }
%"class.WTF::VectorBuffer.542" = type { %"class.WTF::VectorBufferBase.543" }
%"class.WTF::VectorBufferBase.543" = type { %"struct.std::__1::pair.544"*, i32, i32 }
%"struct.std::__1::pair.544" = type opaque
%"class.blink::Member.547" = type { %"class.blink::MemberBase.548" }
%"class.blink::MemberBase.548" = type { %"class.blink::SVGDocumentExtensions"* }
%"class.blink::SVGDocumentExtensions" = type opaque
%"class.WTF::Vector.549" = type { %"class.WTF::VectorBuffer.550" }
%"class.WTF::VectorBuffer.550" = type { %"class.WTF::VectorBufferBase.551" }
%"class.WTF::VectorBufferBase.551" = type { %"struct.blink::AnnotatedRegionValue"*, i32, i32 }
%"struct.blink::AnnotatedRegionValue" = type opaque
%"class.std::__1::unique_ptr.554" = type { %"class.std::__1::__compressed_pair.555" }
%"class.std::__1::__compressed_pair.555" = type { %"struct.std::__1::__compressed_pair_elem.556" }
%"struct.std::__1::__compressed_pair_elem.556" = type { %"class.blink::SelectorQueryCache"* }
%"class.blink::SelectorQueryCache" = type opaque
%"class.blink::NthIndexCache" = type opaque
%"class.blink::LayoutView" = type opaque
%"class.blink::HeapVector.321" = type { %"class.WTF::Vector.324" }
%"class.WTF::Vector.324" = type { %"class.WTF::VectorBuffer.325" }
%"class.WTF::VectorBuffer.325" = type { %"class.WTF::VectorBufferBase.326" }
%"class.WTF::VectorBufferBase.326" = type { %"class.blink::Member.302"*, i32, i32 }
%"class.blink::HeapVector.560" = type { %"class.WTF::Vector.563" }
%"class.WTF::Vector.563" = type { %"class.WTF::VectorBuffer.564" }
%"class.WTF::VectorBuffer.564" = type { %"class.WTF::VectorBufferBase.565" }
%"class.WTF::VectorBufferBase.565" = type { %"class.blink::Member.566"*, i32, i32 }
%"class.blink::Member.566" = type opaque
%"class.blink::DocumentTiming" = type { %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.blink::Member" }
%"class.blink::Member.568" = type { %"class.blink::MemberBase.569" }
%"class.blink::MemberBase.569" = type { %"class.blink::MediaQueryMatcher"* }
%"class.blink::MediaQueryMatcher" = type opaque
%"class.blink::Member.570" = type { %"class.blink::MemberBase.571" }
%"class.blink::MemberBase.571" = type { %"class.blink::ScriptedAnimationController"* }
%"class.blink::ScriptedAnimationController" = type opaque
%"class.blink::Member.572" = type { %"class.blink::MemberBase.573" }
%"class.blink::MemberBase.573" = type { %"class.blink::ScriptedIdleTaskController"* }
%"class.blink::ScriptedIdleTaskController" = type opaque
%"class.blink::Member.574" = type { %"class.blink::MemberBase.575" }
%"class.blink::MemberBase.575" = type { %"class.blink::TextAutosizer"* }
%"class.blink::TextAutosizer" = type opaque
%"class.blink::Member.576" = type { %"class.blink::MemberBase.577" }
%"class.blink::MemberBase.577" = type { %"class.blink::ElementDataCache"* }
%"class.blink::ElementDataCache" = type opaque
%"class.WTF::HashMap.578" = type { %"class.WTF::HashTable.579" }
%"class.WTF::HashTable.579" = type <{ %"struct.WTF::KeyValuePair.582"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.582" = type opaque
%"class.blink::Member.583" = type { %"class.blink::MemberBase.584" }
%"class.blink::MemberBase.584" = type { %"class.blink::DocumentAnimations"* }
%"class.blink::DocumentAnimations" = type opaque
%"class.blink::Member.585" = type { %"class.blink::MemberBase.586" }
%"class.blink::MemberBase.586" = type { %"class.blink::DocumentTimeline"* }
%"class.blink::DocumentTimeline" = type opaque
%"class.blink::Member.587" = type { %"class.blink::MemberBase.588" }
%"class.blink::MemberBase.588" = type { %"class.blink::PendingAnimations"* }
%"class.blink::PendingAnimations" = type opaque
%"class.blink::Member.589" = type { %"class.blink::MemberBase.590" }
%"class.blink::MemberBase.590" = type { %"class.blink::WorkletAnimationController"* }
%"class.blink::WorkletAnimationController" = type opaque
%"class.blink::HeapTaskRunnerTimer" = type { %"class.blink::TimerBase", %"class.blink::WeakMember.43", { i64, i64 } }
%"class.blink::TimerBase" = type { i32 (...)**, %"class.base::TimeTicks", %"class.base::TimeDelta", %"class.base::Location", %class.scoped_refptr.458, %"class.base::WeakPtrFactory" }
%"class.base::TimeDelta" = type { i64 }
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%class.scoped_refptr.458 = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.459" }>
%"class.base::RefCountedThreadSafe.459" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.460 }
%class.scoped_refptr.460 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.461", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.461" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.462" }
%"struct.std::__1::atomic.462" = type { %"struct.std::__1::__atomic_base.463" }
%"struct.std::__1::__atomic_base.463" = type { %"struct.std::__1::__atomic_base.464" }
%"struct.std::__1::__atomic_base.464" = type { %"struct.std::__1::__cxx_atomic_impl.465" }
%"struct.std::__1::__cxx_atomic_impl.465" = type { %"struct.std::__1::__cxx_atomic_base_impl.466" }
%"struct.std::__1::__cxx_atomic_base_impl.466" = type { i8 }
%"class.blink::WeakMember.43" = type { %"class.blink::MemberBase" }
%"class.blink::HeapHashSet.591" = type { %"class.WTF::HashSet.594" }
%"class.WTF::HashSet.594" = type { %"class.WTF::HashTable.595" }
%"class.WTF::HashTable.595" = type <{ %"class.blink::Member.597"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.597" = type opaque
%"class.blink::Member.598" = type { %"class.blink::MemberBase.599" }
%"class.blink::MemberBase.599" = type { %"class.blink::CanvasFontCache"* }
%"class.blink::CanvasFontCache" = type opaque
%"class.blink::Member.600" = type { %"class.blink::MemberBase.601" }
%"class.blink::MemberBase.601" = type { %"class.blink::IntersectionObserverController"* }
%"class.blink::IntersectionObserverController" = type opaque
%"class.blink::Member.602" = type { %"class.blink::MemberBase.603" }
%"class.blink::MemberBase.603" = type { %"class.blink::SnapCoordinator"* }
%"class.blink::SnapCoordinator" = type opaque
%"class.blink::Member.604" = type { %"class.blink::MemberBase.605" }
%"class.blink::MemberBase.605" = type { %"class.blink::PropertyRegistry"* }
%"class.blink::PropertyRegistry" = type opaque
%"class.blink::Member.606" = type { %"class.blink::MemberBase.607" }
%"class.blink::MemberBase.607" = type { %"class.blink::Document::NetworkStateObserver"* }
%"class.blink::Document::NetworkStateObserver" = type opaque
%"class.std::__1::unique_ptr.608" = type { %"class.std::__1::__compressed_pair.609" }
%"class.std::__1::__compressed_pair.609" = type { %"struct.std::__1::__compressed_pair_elem.610" }
%"struct.std::__1::__compressed_pair_elem.610" = type { %"class.ukm::UkmRecorder"* }
%"class.ukm::UkmRecorder" = type opaque
%"class.std::__1::unique_ptr.614" = type { %"class.std::__1::__compressed_pair.615" }
%"class.std::__1::__compressed_pair.615" = type { %"struct.std::__1::__compressed_pair_elem.616" }
%"struct.std::__1::__compressed_pair_elem.616" = type { %"class.blink::FontMatchingMetrics"* }
%"class.blink::FontMatchingMetrics" = type opaque
%"class.blink::Member.620" = type { %"class.blink::MemberBase.621" }
%"class.blink::MemberBase.621" = type { %"class.blink::DOMFeaturePolicy"* }
%"class.blink::DOMFeaturePolicy" = type opaque
%"class.blink::Member.622" = type { %"class.blink::MemberBase.623" }
%"class.blink::MemberBase.623" = type { %"class.blink::SlotAssignmentEngine"* }
%"class.blink::SlotAssignmentEngine" = type opaque
%"class.blink::Member.624" = type { %"class.blink::MemberBase.625" }
%"class.blink::MemberBase.625" = type { %"class.blink::ViewportData"* }
%"class.blink::ViewportData" = type opaque
%"class.blink::Member.626" = type { %"class.blink::MemberBase.627" }
%"class.blink::MemberBase.627" = type { %"class.blink::LazyLoadImageObserver"* }
%"class.blink::LazyLoadImageObserver" = type opaque
%"class.WTF::Vector.628" = type { %"class.WTF::VectorBuffer.629" }
%"class.WTF::VectorBuffer.629" = type { %"class.WTF::VectorBufferBase.630" }
%"class.WTF::VectorBufferBase.630" = type { i8*, i32, i32 }
%"class.blink::HeapHashMap.633" = type { %"class.WTF::HashMap.636" }
%"class.WTF::HashMap.636" = type { %"class.WTF::HashTable.637" }
%"class.WTF::HashTable.637" = type <{ %"struct.WTF::KeyValuePair.639"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.639" = type opaque
%"class.blink::Member.640" = type { %"class.blink::MemberBase.641" }
%"class.blink::MemberBase.641" = type { %"class.blink::BeforeUnloadEventListener"* }
%"class.blink::BeforeUnloadEventListener" = type opaque
%"class.std::__1::unique_ptr.642" = type { %"class.std::__1::__compressed_pair.643" }
%"class.std::__1::__compressed_pair.643" = type { %"struct.std::__1::__compressed_pair_elem.644" }
%"struct.std::__1::__compressed_pair_elem.644" = type { %"class.blink::DocumentResourceCoordinator"* }
%"class.blink::DocumentResourceCoordinator" = type opaque
%"class.blink::Member.648" = type { %"class.blink::MemberBase.649" }
%"class.blink::MemberBase.649" = type { %"class.blink::CookieJar"* }
%"class.blink::CookieJar" = type opaque
%"class.blink::Member.650" = type { %"class.blink::MemberBase.651" }
%"class.blink::MemberBase.651" = type { %"class.blink::FragmentDirective"* }
%"class.blink::FragmentDirective" = type { %"class.blink::ScriptWrappable" }
%"class.blink::HeapHashMap.652" = type { %"class.WTF::HashMap.655" }
%"class.WTF::HashMap.655" = type { %"class.WTF::HashTable.656" }
%"class.WTF::HashTable.656" = type <{ %"struct.WTF::KeyValuePair.658"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.658" = type opaque
%"class.blink::HeapObserverSet" = type { i32, [4 x i8], %"class.blink::HeapHashSet.659" }
%"class.blink::HeapHashSet.659" = type { %"class.WTF::HashSet.662" }
%"class.WTF::HashSet.662" = type { %"class.WTF::HashTable.663" }
%"class.WTF::HashTable.663" = type <{ %"class.blink::WeakMember.665"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.665" = type opaque
%"class.blink::Member.666" = type { %"class.blink::MemberBase.667" }
%"class.blink::MemberBase.667" = type { %"class.blink::DisplayLockDocumentState"* }
%"class.blink::DisplayLockDocumentState" = type opaque
%"class.blink::Member.668" = type { %"class.blink::MemberBase.669" }
%"class.blink::MemberBase.669" = type { %"class.blink::FontPreloadManager"* }
%"class.blink::FontPreloadManager" = type <{ %"class.blink::Member", %"class.blink::HeapHashSet.674", i32, [4 x i8], %"class.blink::HeapTaskRunnerTimer.681", %"class.base::TimeDelta", i32, [4 x i8] }>
%"class.blink::HeapHashSet.674" = type { %"class.WTF::HashSet.677" }
%"class.WTF::HashSet.677" = type { %"class.WTF::HashTable.678" }
%"class.WTF::HashTable.678" = type <{ %"class.blink::Member.680"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.680" = type opaque
%"class.blink::HeapTaskRunnerTimer.681" = type { %"class.blink::TimerBase", %"class.blink::WeakMember.682", { i64, i64 } }
%"class.blink::WeakMember.682" = type { %"class.blink::MemberBase.669" }
%"class.blink::WeakMember.58" = type { %"class.blink::MemberBase.59" }
%"class.blink::Member.670" = type { %"class.blink::MemberBase.671" }
%"class.blink::MemberBase.671" = type { %"class.blink::DocumentData"* }
%"class.blink::DocumentData" = type opaque
%"class.ui::AXMode" = type { i32 }
%"class.blink::HeapHashMap" = type { %"class.WTF::HashMap" }
%"class.WTF::HashMap" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type { i32, %"class.blink::Member.380" }
%"class.blink::Member.380" = type { %"class.blink::MemberBase.28" }
%"class.blink::MemberBase.28" = type { %"class.blink::AXObject"* }
%"class.blink::AXObject" = type { i32 (...)**, i32, %"class.blink::Member.380", %"class.blink::HeapVector.381", i8, i32, %"class.blink::LayoutRect", i32, i32, i8, %"class.blink::Member.380", i32, i32, %"class.blink::FloatRect", %"class.blink::Member.388" }
%"class.blink::HeapVector.381" = type { %"class.WTF::Vector.384" }
%"class.WTF::Vector.384" = type { %"class.WTF::VectorBuffer.385" }
%"class.WTF::VectorBuffer.385" = type { %"class.WTF::VectorBufferBase.386" }
%"class.WTF::VectorBufferBase.386" = type { %"class.blink::Member.380"*, i32, i32 }
%"class.blink::LayoutRect" = type { %"class.blink::LayoutPoint", %"class.blink::LayoutSize" }
%"class.blink::LayoutPoint" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::LayoutUnit" = type { i32 }
%"class.blink::LayoutSize" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::FloatRect" = type { %"class.blink::FloatPoint", %"class.blink::FloatSize" }
%"class.blink::FloatPoint" = type { float, float }
%"class.blink::FloatSize" = type { float, float }
%"class.blink::Member.388" = type { %"class.blink::MemberBase.389" }
%"class.blink::MemberBase.389" = type { %"class.blink::AXObjectCacheImpl"* }
%"class.blink::HeapHashMap.2" = type { %"class.WTF::HashMap.5" }
%"class.WTF::HashMap.5" = type { %"class.WTF::HashTable.6" }
%"class.WTF::HashTable.6" = type <{ %"struct.WTF::KeyValuePair.8"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.8" = type opaque
%"class.WTF::HashMap.9" = type { %"class.WTF::HashTable.10" }
%"class.WTF::HashTable.10" = type <{ %"struct.WTF::KeyValuePair.12"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.12" = type opaque
%"class.blink::HeapHashMap.13" = type { %"class.WTF::HashMap.16" }
%"class.WTF::HashMap.16" = type { %"class.WTF::HashTable.17" }
%"class.WTF::HashTable.17" = type <{ %"struct.WTF::KeyValuePair.19"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.19" = type opaque
%"class.WTF::HashMap.20" = type { %"class.WTF::HashTable.21" }
%"class.WTF::HashTable.21" = type <{ %"struct.WTF::KeyValuePair.24"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.24" = type opaque
%"class.blink::WeakMember" = type { %"class.blink::MemberBase.28" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::AXRelationCache"* }
%"class.blink::HeapVector" = type { %"class.WTF::Vector" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.blink::Member.32"*, i32, i32 }
%"class.blink::Member.32" = type opaque
%"class.blink::HeapMojoRemote" = type { %"class.blink::Member.34" }
%"class.blink::Member.34" = type { %"class.blink::MemberBase.35" }
%"class.blink::MemberBase.35" = type { %"class.blink::HeapMojoRemote<blink::mojom::blink::PermissionService, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper"* }
%"class.blink::HeapMojoRemote<blink::mojom::blink::PermissionService, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper" = type opaque
%"class.blink::HeapMojoReceiver" = type { %"class.blink::Member.36" }
%"class.blink::Member.36" = type { %"class.blink::MemberBase.37" }
%"class.blink::MemberBase.37" = type { %"class.blink::HeapMojoReceiver<blink::mojom::blink::PermissionObserver, blink::AXObjectCacheImpl, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper"* }
%"class.blink::HeapMojoReceiver<blink::mojom::blink::PermissionObserver, blink::AXObjectCacheImpl, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper" = type opaque
%"class.blink::HeapHashSet" = type { %"class.WTF::HashSet.40" }
%"class.WTF::HashSet.40" = type { %"class.WTF::HashTable.41" }
%"class.WTF::HashTable.41" = type <{ %"class.blink::WeakMember.43"*, i32, i32, i32, [4 x i8] }>
%"class.blink::HeapVector.44" = type { %"class.WTF::Vector.47" }
%"class.WTF::Vector.47" = type { %"class.WTF::VectorBuffer.48" }
%"class.WTF::VectorBuffer.48" = type { %"class.WTF::VectorBufferBase.49" }
%"class.WTF::VectorBufferBase.49" = type { %"class.blink::Member.50"*, i32, i32 }
%"class.blink::Member.50" = type opaque
%"class.blink::HeapHashSet.52" = type { %"class.WTF::HashSet.55" }
%"class.WTF::HashSet.55" = type { %"class.WTF::HashTable.56" }
%"class.WTF::HashTable.56" = type <{ %"class.blink::WeakMember.58"*, i32, i32, i32, [4 x i8] }>
%"class.WTF::HashMap.60" = type { %"class.WTF::HashTable.61" }
%"class.WTF::HashTable.61" = type <{ %"struct.WTF::KeyValuePair.64"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.64" = type opaque
%"class.WTF::HashCountedSet" = type { %"class.WTF::HashMap.65" }
%"class.WTF::HashMap.65" = type { %"class.WTF::HashTable.66" }
%"class.WTF::HashTable.66" = type <{ %"struct.WTF::KeyValuePair.69"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.69" = type { %"class.blink::BlinkAXEventIntent", i32, [4 x i8] }
%"class.blink::BlinkAXEventIntent" = type <{ i32 (...)**, %"struct.ui::AXEventIntent", i8, i8, [6 x i8] }>
%"struct.ui::AXEventIntent" = type { i32 (...)**, i32, i32, i32, i32 }
%"class.WTF::ConditionalDestructor.258" = type { i8 }
%"class.blink::UniqueElementData" = type { %"class.blink::ElementData", %"class.blink::Member.311", %"class.WTF::Vector.776" }
%"class.WTF::Vector.776" = type { %"class.WTF::VectorBuffer.777" }
%"class.WTF::VectorBuffer.777" = type { %"class.WTF::VectorBufferBase.778", [64 x i8] }
%"class.WTF::VectorBufferBase.778" = type { %"class.blink::Attribute"*, i32, i32 }
%"class.blink::Attribute" = type { %"class.blink::QualifiedName", %"class.WTF::AtomicString" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.blink::HeapVector.321" }
%"class.WTF::Vector.758" = type { %"class.WTF::VectorBuffer.759" }
%"class.WTF::VectorBuffer.759" = type { %"class.WTF::VectorBufferBase.760" }
%"class.WTF::VectorBufferBase.760" = type { %"class.WTF::String"*, i32, i32 }
%"class.blink::HTMLElement" = type { %"class.blink::Element" }
%"class.blink::HTMLLabelElement" = type <{ %"class.blink::HTMLElement", i8, [7 x i8] }>
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.786" }
%"class.std::__1::__compressed_pair.786" = type { %"struct.std::__1::__compressed_pair_elem.787" }
%"struct.std::__1::__compressed_pair_elem.787" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.788 }
%union.anon.788 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.blink::HeapVectorBacking" = type { i8 }
%"class.blink::NormalPageArena" = type { %"class.blink::BaseArena.base", [4 x i8], %"class.blink::FreeList", i8*, i64, i64 }
%"class.blink::BaseArena.base" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32 }>
%"class.blink::FreeList" = type <{ [17 x %"class.blink::FreeListEntry"*], [17 x %"class.blink::FreeListEntry"*], i32, [4 x i8] }>
%"class.blink::FreeListEntry" = type { %"class.blink::HeapObjectHeader", %"class.blink::FreeListEntry"* }
%"class.blink::PlatformAwareObjectStartBitmap" = type { %"class.blink::ObjectStartBitmap" }
%"class.blink::ObjectStartBitmap" = type { i8*, [2048 x i8] }

$_ZN3WTF7HashMapIjjNS_7IntHashIjEENS_10HashTraitsIjEES4_NS_18PartitionAllocatorEE5eraseERKj = comdat any

$_ZNK3WTF7HashMapIjNS_6VectorIjLj0ENS_18PartitionAllocatorEEENS_7IntHashIjEENS_10HashTraitsIjEENS6_IS3_EES2_E2atERKj = comdat any

$_ZN3WTF7HashMapIjjNS_7IntHashIjEENS_10HashTraitsIjEES4_NS_18PartitionAllocatorEE4TakeERKj = comdat any

$_ZN3WTF21ConditionalDestructorINS_9HashTableINS_6StringENS_12KeyValuePairIS2_NS_7HashSetIjNS_7IntHashIjEENS_10HashTraitsIjEENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS7_IS2_EENS7_ISA_EEEESF_S9_EELb0EED2Ev = comdat any

$_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_SC_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_ = comdat any

$_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6ExpandEPS1_ = comdat any

$_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE8RehashToEPS1_jS8_ = comdat any

$_ZN5blink19TraceMethodDelegateINS_14PersistentBaseINS_17AXObjectCacheImplELNS_31WeaknessPersistentConfigurationE1ELNS_38CrossThreadnessPersistentConfigurationE0EEEXadL_ZNKS5_15TracePersistentEPNS_7VisitorEEEE10TrampolineES7_PKv = comdat any

$_ZN5blink14PersistentBaseINS_17AXObjectCacheImplELNS_31WeaknessPersistentConfigurationE1ELNS_38CrossThreadnessPersistentConfigurationE0EE20HandleWeakPersistentERKNS_14LivenessBrokerEPKv = comdat any

$_ZN3WTF9HashTableIjjNS_17IdentityExtractorENS_7IntHashIjEENS_10HashTraitsIjEES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKjjEENS_18HashTableAddResultIS7_jEEOT0_OT1_ = comdat any

$_ZN3WTF9HashTableIjjNS_17IdentityExtractorENS_7IntHashIjEENS_10HashTraitsIjEES5_NS_18PartitionAllocatorEE6ExpandEPj = comdat any

$_ZN3WTF9HashTableIjjNS_17IdentityExtractorENS_7IntHashIjEENS_10HashTraitsIjEES5_NS_18PartitionAllocatorEE8RehashToEPjjS8_ = comdat any

$_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_7HashSetIjNS_7IntHashIjEENS_10HashTraitsIjEENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS6_IS1_EENS6_IS9_EEEESE_S8_E6insertINS_17HashMapTranslatorISG_SC_S8_EERKS1_S9_EENS_18HashTableAddResultISH_SA_EEOT0_OT1_ = comdat any

$_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_7HashSetIjNS_7IntHashIjEENS_10HashTraitsIjEENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS6_IS1_EENS6_IS9_EEEESE_S8_E6ExpandEPSA_ = comdat any

$_ZN3WTF17HashMapTranslatorINS_18HashMapValueTraitsINS_10HashTraitsINS_6StringEEENS2_INS_7HashSetIjNS_7IntHashIjEENS2_IjEENS_18PartitionAllocatorEEEEEEENS_10StringHashES9_E9TranslateINS_12KeyValuePairIS3_SA_EERKS3_SA_EEvRT_OT0_OT1_ = comdat any

$_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_7HashSetIjNS_7IntHashIjEENS_10HashTraitsIjEENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS6_IS1_EENS6_IS9_EEEESE_S8_E8RehashToEPSA_jSI_ = comdat any

$_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_7HashSetIjNS_7IntHashIjEENS_10HashTraitsIjEENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS6_IS1_EENS6_IS9_EEEESE_S8_E16LookupForWritingERKS1_ = comdat any

$_ZN3WTF5MoverINS_12KeyValuePairINS_6StringENS_7HashSetIjNS_7IntHashIjEENS_10HashTraitsIjEENS_18PartitionAllocatorEEEEES8_NS_18HashMapValueTraitsINS6_IS2_EENS6_IS9_EEEELb1EE4MoveEOSA_RSA_ = comdat any

$_ZN3WTF9HashTableIjjNS_17IdentityExtractorENS_7IntHashIjEENS_10HashTraitsIjEES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKjRjEENS_18HashTableAddResultIS7_jEEOT0_OT1_ = comdat any

$_ZN3WTF9HashTableIjNS_12KeyValuePairIjjEENS_24KeyValuePairKeyExtractorENS_7IntHashIjEENS_18HashMapValueTraitsINS_10HashTraitsIjEES8_EES8_NS_18PartitionAllocatorEE8RehashToEPS2_jSC_ = comdat any

$_ZN3WTF9HashTableIjNS_12KeyValuePairIjjEENS_24KeyValuePairKeyExtractorENS_7IntHashIjEENS_18HashMapValueTraitsINS_10HashTraitsIjEES8_EES8_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorIS9_S5_SA_EERjjEENS_18HashTableAddResultISB_S2_EEOT0_OT1_ = comdat any

$_ZN3WTF9HashTableIjNS_12KeyValuePairIjjEENS_24KeyValuePairKeyExtractorENS_7IntHashIjEENS_18HashMapValueTraitsINS_10HashTraitsIjEES8_EES8_NS_18PartitionAllocatorEE6ExpandEPS2_ = comdat any

$_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKNS_12AtomicStringEEEvOT_ = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm = comdat any

$_ZN3WTF6VectorIN5blink6MemberINS1_8AXObjectEEELj0ENS1_13HeapAllocatorEE14AppendSlowCaseIRPS3_EEvOT_ = comdat any

$_ZN3WTF6VectorIN5blink6MemberINS1_8AXObjectEEELj0ENS1_13HeapAllocatorEE15ReserveCapacityEj = comdat any

$_ZN3WTF6VectorIN5blink6MemberINS1_8AXObjectEEELj0ENS1_13HeapAllocatorEE16ReallocateBufferEj = comdat any

$_ZN5blink13HeapAllocator13QuantizedSizeINS_6MemberINS_8AXObjectEEEEEmm = comdat any

$_ZN5blink25MakeGarbageCollectedTraitINS_17HeapVectorBackingINS_6MemberINS_8AXObjectEEEN3WTF12VectorTraitsIS4_EEEEE4CallEm = comdat any

$_ZN5blink17HeapVectorBackingINS_6MemberINS_8AXObjectEEEN3WTF12VectorTraitsIS3_EEE14AllocateObjectIS7_EEPvm = comdat any

$_ZN5blink10TraceTraitINS_17HeapVectorBackingINS_6MemberINS_8AXObjectEEEN3WTF12VectorTraitsIS4_EEEEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink9NameTraitINS_17HeapVectorBackingINS_6MemberINS_8AXObjectEEEN3WTF12VectorTraitsIS4_EEEEE7GetNameEPKv = comdat any

$_ZN5blink10TraceTraitINS_8AXObjectEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN3WTF6VectorIjLj0ENS_18PartitionAllocatorEE14AppendSlowCaseIjEEvOT_ = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIjEEmm = comdat any

$_ZN3WTF9HashTableIjNS_12KeyValuePairIjNS_6VectorIjLj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_7IntHashIjEENS_18HashMapValueTraitsINS_10HashTraitsIjEENSA_IS4_EEEESB_S3_E5eraseEPKS5_ = comdat any

$_ZN3WTF9HashTableIjNS_12KeyValuePairIjNS_6VectorIjLj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_7IntHashIjEENS_18HashMapValueTraitsINS_10HashTraitsIjEENSA_IS4_EEEESB_S3_E8RehashToEPS5_jSF_ = comdat any

$_ZN3WTF9HashTableIjNS_12KeyValuePairIjNS_6VectorIjLj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_7IntHashIjEENS_18HashMapValueTraitsINS_10HashTraitsIjEENSA_IS4_EEEESB_S3_E6insertINS_17HashMapTranslatorISD_S8_S3_EEjRS4_EENS_18HashTableAddResultISE_S5_EEOT0_OT1_ = comdat any

$_ZN3WTF9HashTableIjNS_12KeyValuePairIjNS_6VectorIjLj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_7IntHashIjEENS_18HashMapValueTraitsINS_10HashTraitsIjEENSA_IS4_EEEESB_S3_E6ExpandEPS5_ = comdat any

$_ZN3WTF6VectorIjLj0ENS_18PartitionAllocatorEEaSERKS2_ = comdat any

$_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_7HashSetIjNS_7IntHashIjEENS_10HashTraitsIjEENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS6_IS1_EENS6_IS9_EEEESE_S8_E4findERKS1_ = comdat any

$_ZNK3WTF6VectorIjLj0ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_6MemberINS_8AXObjectEEEN3WTF12VectorTraitsIS4_EEEEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_6MemberINS_8AXObjectEEEN3WTF12VectorTraitsIS4_EEEEE5IndexEvE13gc_info_index = comdat any

@_ZTVN5blink15AXRelationCacheE = hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::AXRelationCache"*)* @_ZN5blink15AXRelationCacheD2Ev to i8*), i8* bitcast (void (%"class.blink::AXRelationCache"*)* @_ZN5blink15AXRelationCacheD0Ev to i8*)] }, align 8
@_ZN5blink10html_names8kForAttrE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@_ZN5blink10html_names13kAriaOwnsAttrE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@_ZN5blink11ThreadState16thread_specific_E = external local_unnamed_addr global %"class.WTF::ThreadSpecific"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv = private unnamed_addr constant [68 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::ThreadState *]\00", align 1
@_ZN3WTF11g_null_atomE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink10html_names7kIdAttrE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@.str = private unnamed_addr constant [23 x i8] c"new_size > table_size_\00", align 1
@.str.1 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/wtf/hash_table.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12AtomicStringEEEPKcv = private unnamed_addr constant [65 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::AtomicString]\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIjEEPKcv = private unnamed_addr constant [60 x i8] c"const char *WTF::GetStringWithTypeName() [T = unsigned int]\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairINS_6StringENS_7HashSetIjNS_7IntHashIjEENS_10HashTraitsIjEENS_18PartitionAllocatorEEEEEEEPKcv = private unnamed_addr constant [191 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::KeyValuePair<WTF::String, WTF::HashSet<unsigned int, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::PartitionAllocator> >]\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairIjjEEEEPKcv = private unnamed_addr constant [93 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::KeyValuePair<unsigned int, unsigned int>]\00", align 1
@.str.2 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@.str.3 = private unnamed_addr constant [33 x i8] c"Allocator::IsAllocationAllowed()\00", align 1
@.str.4 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.5 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv = private unnamed_addr constant [59 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::String]\00", align 1
@_ZN5blink11ThreadState25incremental_marking_flag_E = external local_unnamed_addr global %"class.blink::AtomicEntryFlag", align 4
@.str.6 = private unnamed_addr constant [74 x i8] c"../../third_party/blink/renderer/platform/heap/impl/heap_allocator_impl.h\00", align 1
@.str.7 = private unnamed_addr constant [18 x i8] c"num_elements > 0u\00", align 1
@.str.8 = private unnamed_addr constant [93 x i8] c"../../third_party/blink/renderer/platform/heap/impl/collection_support/heap_vector_backing.h\00", align 1
@.str.9 = private unnamed_addr constant [23 x i8] c"allocation_size > size\00", align 1
@.str.10 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/heap/impl/heap.h\00", align 1
@_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_6MemberINS_8AXObjectEEEN3WTF12VectorTraitsIS4_EEEEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_17HeapVectorBackingINS_6MemberINS_8AXObjectEEEN3WTF12VectorTraitsIS4_EEEEE5TraceEPNS_7VisitorEPKv, void (i8*)* null, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_17HeapVectorBackingINS_6MemberINS_8AXObjectEEEN3WTF12VectorTraitsIS4_EEEEE7GetNameEPKv, i8 0 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_6MemberINS_8AXObjectEEEN3WTF12VectorTraitsIS4_EEEEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@.str.11 = private unnamed_addr constant [13 x i8] c"InternalNode\00", align 1
@_ZN5blink11GCInfoTable13global_table_E = external local_unnamed_addr global %"class.blink::GCInfoTable"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairIjNS_6VectorIjLj0ENS_18PartitionAllocatorEEEEEEEPKcv = private unnamed_addr constant [135 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::KeyValuePair<unsigned int, WTF::Vector<unsigned int, 0, WTF::PartitionAllocator> >]\00", align 1
@_ZN5blink10html_names9kLabelTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@.str.12 = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1
@.str.13 = private unnamed_addr constant [18 x i8] c"position < size()\00", align 1

@_ZN5blink15AXRelationCacheC1EPNS_17AXObjectCacheImplE = hidden unnamed_addr alias void (%"class.blink::AXRelationCache"*, %"class.blink::AXObjectCacheImpl"*), void (%"class.blink::AXRelationCache"*, %"class.blink::AXObjectCacheImpl"*)* @_ZN5blink15AXRelationCacheC2EPNS_17AXObjectCacheImplE
@_ZN5blink15AXRelationCacheD1Ev = hidden unnamed_addr alias void (%"class.blink::AXRelationCache"*), void (%"class.blink::AXRelationCache"*)* @_ZN5blink15AXRelationCacheD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15AXRelationCacheC2EPNS_17AXObjectCacheImplE(%"class.blink::AXRelationCache"*, %"class.blink::AXObjectCacheImpl"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5blink15AXRelationCacheE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 1
  store i8 0, i8* %4, align 8
  %5 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 2
  %6 = getelementptr inbounds %"class.blink::WeakPersistent", %"class.blink::WeakPersistent"* %5, i64 0, i32 0
  %7 = getelementptr inbounds %"class.blink::WeakPersistent", %"class.blink::WeakPersistent"* %5, i64 0, i32 0, i32 0
  store %"class.blink::AXObjectCacheImpl"* %1, %"class.blink::AXObjectCacheImpl"** %7, align 8
  %8 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 2, i32 0, i32 1, i32 0
  store %"class.blink::PersistentNode"* null, %"class.blink::PersistentNode"** %8, align 8
  %9 = ptrtoint %"class.blink::AXObjectCacheImpl"* %1 to i64
  switch i64 %9, label %10 [
    i64 0, label %36
    i64 -1, label %36
  ]

10:                                               ; preds = %2
  %11 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %12 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %11, i64 0, i32 1
  %13 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %12) #13
  %14 = icmp eq i8* %13, null
  br i1 %14, label %15, label %17, !prof !2

15:                                               ; preds = %10
  %16 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #13
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %12, i8* %16) #13
  br label %17

17:                                               ; preds = %15, %10
  %18 = phi i8* [ %16, %15 ], [ %13, %10 ]
  %19 = bitcast i8* %18 to %"class.blink::ThreadState"**
  %20 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %19, align 8
  %21 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %20, i64 0, i32 4, i32 0, i32 0, i32 0
  %22 = load %"class.blink::PersistentRegion"*, %"class.blink::PersistentRegion"** %21, align 8
  %23 = getelementptr inbounds %"class.blink::PersistentRegion", %"class.blink::PersistentRegion"* %22, i64 0, i32 0, i32 0
  %24 = load %"class.blink::PersistentNode"*, %"class.blink::PersistentNode"** %23, align 8
  %25 = icmp eq %"class.blink::PersistentNode"* %24, null
  br i1 %25, label %26, label %29, !prof !2

26:                                               ; preds = %17
  %27 = getelementptr inbounds %"class.blink::PersistentRegion", %"class.blink::PersistentRegion"* %22, i64 0, i32 0
  tail call void @_ZN5blink20PersistentRegionBase15EnsureNodeSlotsEv(%"class.blink::PersistentRegionBase"* %27) #13
  %28 = load %"class.blink::PersistentNode"*, %"class.blink::PersistentNode"** %23, align 8
  br label %29

29:                                               ; preds = %26, %17
  %30 = phi %"class.blink::PersistentNode"* [ %28, %26 ], [ %24, %17 ]
  %31 = bitcast %"class.blink::PersistentNode"* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = bitcast %"class.blink::PersistentRegion"* %22 to i64*
  store i64 %32, i64* %33, align 8
  %34 = bitcast %"class.blink::PersistentNode"* %30 to %"class.blink::PersistentBase"**
  store %"class.blink::PersistentBase"* %6, %"class.blink::PersistentBase"** %34, align 8
  %35 = getelementptr inbounds %"class.blink::PersistentNode", %"class.blink::PersistentNode"* %30, i64 0, i32 1
  store void (%"class.blink::Visitor"*, i8*)* @_ZN5blink19TraceMethodDelegateINS_14PersistentBaseINS_17AXObjectCacheImplELNS_31WeaknessPersistentConfigurationE1ELNS_38CrossThreadnessPersistentConfigurationE0EEEXadL_ZNKS5_15TracePersistentEPNS_7VisitorEEEE10TrampolineES7_PKv, void (%"class.blink::Visitor"*, i8*)** %35, align 8
  store %"class.blink::PersistentNode"* %30, %"class.blink::PersistentNode"** %8, align 8
  br label %36

36:                                               ; preds = %2, %2, %29
  %37 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 3
  %38 = bitcast %"class.WTF::HashMap.246"* %37 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %38, i8 0, i64 20, i1 false) #13
  %39 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 4
  %40 = bitcast %"class.WTF::HashMap.251"* %39 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %40, i8 0, i64 20, i1 false) #13
  %41 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 5
  %42 = bitcast %"class.WTF::HashMap.256"* %41 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %42, i8 0, i64 20, i1 false) #13
  %43 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 6
  %44 = bitcast %"class.WTF::HashSet.267"* %43 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %44, i8 0, i64 20, i1 false) #13
  %45 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 7
  %46 = bitcast %"class.WTF::HashSet"* %45 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %46, i8 0, i64 20, i1 false) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15AXRelationCacheD2Ev(%"class.blink::AXRelationCache"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5blink15AXRelationCacheE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 7, i32 0, i32 0
  %4 = load i32*, i32** %3, align 8
  %5 = icmp eq i32* %4, null
  br i1 %5, label %8, label %6, !prof !3

6:                                                ; preds = %1
  %7 = bitcast i32* %4 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %7) #13
  store i32* null, i32** %3, align 8
  br label %8

8:                                                ; preds = %1, %6
  %9 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 6, i32 0, i32 0
  %10 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %9, align 8
  %11 = icmp eq %"class.WTF::AtomicString"* %10, null
  br i1 %11, label %44, label %12, !prof !3

12:                                               ; preds = %8
  %13 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 6, i32 0, i32 1
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %42, label %16

16:                                               ; preds = %12
  %17 = zext i32 %14 to i64
  br label %18

18:                                               ; preds = %39, %16
  %19 = phi i64 [ 0, %16 ], [ %40, %39 ]
  %20 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %10, i64 %19
  %21 = bitcast %"class.WTF::AtomicString"* %20 to i8**
  %22 = load i8*, i8** %21, align 8
  %23 = bitcast i8* %22 to %"class.WTF::StringImpl"*
  %24 = ptrtoint i8* %22 to i64
  switch i64 %24, label %25 [
    i64 -1, label %39
    i64 0, label %39
  ]

25:                                               ; preds = %18
  %26 = getelementptr inbounds i8, i8* %22, i64 8
  %27 = bitcast i8* %26 to i32*
  %28 = load atomic i32, i32* %27 monotonic, align 4
  %29 = and i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = bitcast i8* %22 to i32*
  %32 = load i32, i32* %31, align 4
  br i1 %30, label %33, label %35

33:                                               ; preds = %25
  %34 = add i32 %32, -1
  store i32 %34, i32* %31, align 4
  br label %35

35:                                               ; preds = %33, %25
  %36 = phi i32 [ %34, %33 ], [ %32, %25 ]
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %39

38:                                               ; preds = %35
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %23) #13
  br label %39

39:                                               ; preds = %38, %35, %18, %18
  %40 = add nuw nsw i64 %19, 1
  %41 = icmp eq i64 %40, %17
  br i1 %41, label %42, label %18

42:                                               ; preds = %39, %12
  %43 = bitcast %"class.WTF::AtomicString"* %10 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %43) #13
  store %"class.WTF::AtomicString"* null, %"class.WTF::AtomicString"** %9, align 8
  br label %44

44:                                               ; preds = %8, %42
  %45 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 5
  %46 = bitcast %"class.WTF::HashMap.256"* %45 to %"class.WTF::ConditionalDestructor.258"*
  tail call void @_ZN3WTF21ConditionalDestructorINS_9HashTableINS_6StringENS_12KeyValuePairIS2_NS_7HashSetIjNS_7IntHashIjEENS_10HashTraitsIjEENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS7_IS2_EENS7_ISA_EEEESF_S9_EELb0EED2Ev(%"class.WTF::ConditionalDestructor.258"* %46) #13
  %47 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 4, i32 0, i32 0
  %48 = load %"struct.WTF::KeyValuePair.255"*, %"struct.WTF::KeyValuePair.255"** %47, align 8
  %49 = icmp eq %"struct.WTF::KeyValuePair.255"* %48, null
  br i1 %49, label %52, label %50, !prof !3

50:                                               ; preds = %44
  %51 = bitcast %"struct.WTF::KeyValuePair.255"* %48 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %51) #13
  store %"struct.WTF::KeyValuePair.255"* null, %"struct.WTF::KeyValuePair.255"** %47, align 8
  br label %52

52:                                               ; preds = %44, %50
  %53 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 3, i32 0, i32 0
  %54 = load %"struct.WTF::KeyValuePair.250"*, %"struct.WTF::KeyValuePair.250"** %53, align 8
  %55 = icmp eq %"struct.WTF::KeyValuePair.250"* %54, null
  br i1 %55, label %83, label %56, !prof !3

56:                                               ; preds = %52
  %57 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 3, i32 0, i32 1
  %58 = load i32, i32* %57, align 8
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %81, label %60

60:                                               ; preds = %56
  %61 = zext i32 %58 to i64
  br label %62

62:                                               ; preds = %78, %60
  %63 = phi i64 [ 0, %60 ], [ %79, %78 ]
  %64 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %54, i64 %63, i32 0
  %65 = load i32, i32* %64, align 4
  %66 = icmp eq i32 %65, -1
  br i1 %66, label %78, label %67

67:                                               ; preds = %62
  %68 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %54, i64 %63, i32 1, i32 0, i32 0, i32 0
  %69 = load i32*, i32** %68, align 8
  %70 = icmp eq i32* %69, null
  %71 = bitcast i32* %69 to i8*
  br i1 %70, label %78, label %72, !prof !3

72:                                               ; preds = %67
  %73 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %54, i64 %63, i32 1, i32 0, i32 0, i32 2
  %74 = load i32, i32* %73, align 4
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %77, label %76, !prof !2

76:                                               ; preds = %72
  store i32 0, i32* %73, align 4
  br label %77

77:                                               ; preds = %76, %72
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %71) #13
  store i32* null, i32** %68, align 8
  br label %78

78:                                               ; preds = %77, %67, %62
  %79 = add nuw nsw i64 %63, 1
  %80 = icmp eq i64 %79, %61
  br i1 %80, label %81, label %62

81:                                               ; preds = %78, %56
  %82 = bitcast %"struct.WTF::KeyValuePair.250"* %54 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %82) #13
  store %"struct.WTF::KeyValuePair.250"* null, %"struct.WTF::KeyValuePair.250"** %53, align 8
  br label %83

83:                                               ; preds = %52, %81
  %84 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 2, i32 0, i32 1, i32 0
  %85 = load %"class.blink::PersistentNode"*, %"class.blink::PersistentNode"** %84, align 8
  %86 = icmp eq %"class.blink::PersistentNode"* %85, null
  br i1 %86, label %106, label %87

87:                                               ; preds = %83
  %88 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %89 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %88, i64 0, i32 1
  %90 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %89) #13
  %91 = icmp eq i8* %90, null
  br i1 %91, label %92, label %94, !prof !2

92:                                               ; preds = %87
  %93 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #13
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %89, i8* %93) #13
  br label %94

94:                                               ; preds = %92, %87
  %95 = phi i8* [ %93, %92 ], [ %90, %87 ]
  %96 = bitcast i8* %95 to %"class.blink::ThreadState"**
  %97 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %96, align 8
  %98 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %97, i64 0, i32 4, i32 0, i32 0, i32 0
  %99 = load %"class.blink::PersistentRegion"*, %"class.blink::PersistentRegion"** %98, align 8
  %100 = load %"class.blink::PersistentNode"*, %"class.blink::PersistentNode"** %84, align 8
  %101 = getelementptr inbounds %"class.blink::PersistentRegion", %"class.blink::PersistentRegion"* %99, i64 0, i32 0, i32 0
  %102 = bitcast %"class.blink::PersistentRegion"* %99 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = bitcast %"class.blink::PersistentNode"* %100 to i64*
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds %"class.blink::PersistentNode", %"class.blink::PersistentNode"* %100, i64 0, i32 1
  store void (%"class.blink::Visitor"*, i8*)* null, void (%"class.blink::Visitor"*, i8*)** %105, align 8
  store %"class.blink::PersistentNode"* %100, %"class.blink::PersistentNode"** %101, align 8
  store %"class.blink::PersistentNode"* null, %"class.blink::PersistentNode"** %84, align 8
  br label %106

106:                                              ; preds = %83, %94
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15AXRelationCacheD0Ev(%"class.blink::AXRelationCache"*) unnamed_addr #0 align 2 {
  tail call void @_ZN5blink15AXRelationCacheD2Ev(%"class.blink::AXRelationCache"* %0) #13
  %2 = bitcast %"class.blink::AXRelationCache"* %0 to i8*
  tail call void @free(i8* %2) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15AXRelationCache21DoInitialDocumentScanEv(%"class.blink::AXRelationCache"*) local_unnamed_addr #0 align 2 {
  %2 = alloca i32, align 4
  %3 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 2, i32 0, i32 0
  %4 = load %"class.blink::AXObjectCacheImpl"*, %"class.blink::AXObjectCacheImpl"** %3, align 8
  %5 = getelementptr inbounds %"class.blink::AXObjectCacheImpl", %"class.blink::AXObjectCacheImpl"* %4, i64 0, i32 2, i32 0, i32 0
  %6 = load %"class.blink::Document"*, %"class.blink::Document"** %5, align 8
  %7 = getelementptr inbounds %"class.blink::Document", %"class.blink::Document"* %6, i64 0, i32 47, i32 0, i32 0
  %8 = load %"class.blink::Element"*, %"class.blink::Element"** %7, align 8
  %9 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %8, i64 0, i32 0, i32 0
  %10 = icmp eq %"class.blink::Element"* %8, null
  br i1 %10, label %51, label %11

11:                                               ; preds = %1
  %12 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %8, i64 0, i32 0, i32 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = and i32 %13, 2
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %51, label %16

16:                                               ; preds = %11
  %17 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %9, i64 1
  %18 = bitcast %"class.blink::Node"* %17 to %"class.blink::Node"**
  %19 = load %"class.blink::Node"*, %"class.blink::Node"** %18, align 8
  %20 = bitcast %"class.blink::Node"* %19 to %"class.blink::Element"*
  %21 = icmp eq %"class.blink::Node"* %19, null
  br i1 %21, label %39, label %22

22:                                               ; preds = %16
  %23 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %19, i64 0, i32 1
  %24 = load i32, i32* %23, align 8
  %25 = and i32 %24, 12
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %39, label %32

27:                                               ; preds = %32
  %28 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %35, i64 0, i32 1
  %29 = load i32, i32* %28, align 8
  %30 = and i32 %29, 12
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %37, label %32

32:                                               ; preds = %22, %27
  %33 = phi %"class.blink::Node"* [ %35, %27 ], [ %19, %22 ]
  %34 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %33, i64 0, i32 5, i32 0, i32 0
  %35 = load %"class.blink::Node"*, %"class.blink::Node"** %34, align 8
  %36 = icmp eq %"class.blink::Node"* %35, null
  br i1 %36, label %51, label %27

37:                                               ; preds = %27
  %38 = bitcast %"class.blink::Node"* %35 to %"class.blink::Element"*
  br label %39

39:                                               ; preds = %16, %22, %37
  %40 = phi %"class.blink::Element"* [ %20, %16 ], [ %20, %22 ], [ %38, %37 ]
  %41 = icmp eq %"class.blink::Element"* %40, null
  br i1 %41, label %51, label %42

42:                                               ; preds = %39
  %43 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names8kForAttrE, align 8
  %44 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %43, i64 0, i32 0, i32 0
  %45 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %46 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 6, i32 0
  %47 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names13kAriaOwnsAttrE, align 8
  %48 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %47, i64 0, i32 0, i32 0
  %49 = bitcast i32* %2 to i8*
  %50 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 7, i32 0
  br label %53

51:                                               ; preds = %32, %184, %191, %210, %202, %11, %1, %39
  %52 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 1
  store i8 1, i8* %52, align 8
  ret void

53:                                               ; preds = %213, %42
  %54 = phi %"class.blink::Element"* [ %40, %42 ], [ %214, %213 ]
  %55 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %54, i64 0, i32 3, i32 0, i32 0
  %56 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %55, align 8
  %57 = icmp eq %"class.blink::ElementData"* %56, null
  br i1 %57, label %107, label %58

58:                                               ; preds = %53
  %59 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %56, i64 0, i32 0, i32 0, i32 0
  %60 = load i32, i32* %59, align 4
  %61 = and i32 %60, 1
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %70, label %63

63:                                               ; preds = %58
  %64 = bitcast %"class.blink::ElementData"* %56 to %"class.blink::UniqueElementData"*
  %65 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %56, i64 1, i32 1
  %66 = bitcast %"class.blink::Member.311"* %65 to %"class.blink::Attribute"**
  %67 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %66, align 8
  %68 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %64, i64 0, i32 2, i32 0, i32 0, i32 2
  %69 = load i32, i32* %68, align 4
  br label %75

70:                                               ; preds = %58
  %71 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %56, i64 1
  %72 = bitcast %"class.blink::ElementData"* %71 to %"class.blink::Attribute"*
  %73 = lshr i32 %60, 1
  %74 = and i32 %73, 268435455
  br label %75

75:                                               ; preds = %70, %63
  %76 = phi %"class.blink::Attribute"* [ %72, %70 ], [ %67, %63 ]
  %77 = phi i32 [ %74, %70 ], [ %69, %63 ]
  %78 = zext i32 %77 to i64
  %79 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %76, i64 %78
  %80 = icmp eq i32 %77, 0
  br i1 %80, label %107, label %81

81:                                               ; preds = %75
  %82 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %44, align 8
  %83 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %82, i64 0, i32 3, i32 0, i32 0, i32 0
  %84 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %82, i64 0, i32 4, i32 0, i32 0, i32 0
  br label %85

85:                                               ; preds = %100, %81
  %86 = phi %"class.blink::Attribute"* [ %76, %81 ], [ %101, %100 ]
  %87 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %86, i64 0, i32 0, i32 0, i32 0
  %88 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %87, align 8
  %89 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %88, %82
  br i1 %89, label %103, label %90

90:                                               ; preds = %85
  %91 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %88, i64 0, i32 3, i32 0, i32 0, i32 0
  %92 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %91, align 8
  %93 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %83, align 8
  %94 = icmp eq %"class.WTF::StringImpl"* %92, %93
  br i1 %94, label %95, label %100

95:                                               ; preds = %90
  %96 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %88, i64 0, i32 4, i32 0, i32 0, i32 0
  %97 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %96, align 8
  %98 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %84, align 8
  %99 = icmp eq %"class.WTF::StringImpl"* %97, %98
  br i1 %99, label %103, label %100

100:                                              ; preds = %95, %90
  %101 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %86, i64 1
  %102 = icmp eq %"class.blink::Attribute"* %101, %79
  br i1 %102, label %107, label %85

103:                                              ; preds = %95, %85
  %104 = icmp eq %"class.blink::Attribute"* %86, null
  %105 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %86, i64 0, i32 1
  %106 = select i1 %104, %"class.WTF::AtomicString"* %45, %"class.WTF::AtomicString"* %105
  br label %107

107:                                              ; preds = %100, %103, %53, %75
  %108 = phi %"class.WTF::AtomicString"* [ %45, %75 ], [ %45, %53 ], [ %106, %103 ], [ %45, %100 ]
  %109 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %108, i64 0, i32 0, i32 0, i32 0
  %110 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %109, align 8
  %111 = icmp eq %"class.WTF::StringImpl"* %110, null
  br i1 %111, label %119, label %112

112:                                              ; preds = %107
  %113 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %110, i64 0, i32 1
  %114 = load i32, i32* %113, align 4
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %119, label %116

116:                                              ; preds = %112
  %117 = call { %"class.WTF::AtomicString"*, i8 } @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_SC_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_(%"class.WTF::HashTable.268"* %46, %"class.WTF::AtomicString"* dereferenceable(8) %108, %"class.WTF::AtomicString"* dereferenceable(8) %108) #13
  %118 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %55, align 8
  br label %119

119:                                              ; preds = %107, %116, %112
  %120 = phi %"class.blink::ElementData"* [ %56, %107 ], [ %118, %116 ], [ %56, %112 ]
  %121 = icmp eq %"class.blink::ElementData"* %120, null
  br i1 %121, label %180, label %122

122:                                              ; preds = %119
  %123 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %120, i64 0, i32 0, i32 0, i32 0
  %124 = load i32, i32* %123, align 4
  %125 = and i32 %124, 1
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %134, label %127

127:                                              ; preds = %122
  %128 = bitcast %"class.blink::ElementData"* %120 to %"class.blink::UniqueElementData"*
  %129 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %120, i64 1, i32 1
  %130 = bitcast %"class.blink::Member.311"* %129 to %"class.blink::Attribute"**
  %131 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %130, align 8
  %132 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %128, i64 0, i32 2, i32 0, i32 0, i32 2
  %133 = load i32, i32* %132, align 4
  br label %139

134:                                              ; preds = %122
  %135 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %120, i64 1
  %136 = bitcast %"class.blink::ElementData"* %135 to %"class.blink::Attribute"*
  %137 = lshr i32 %124, 1
  %138 = and i32 %137, 268435455
  br label %139

139:                                              ; preds = %134, %127
  %140 = phi %"class.blink::Attribute"* [ %136, %134 ], [ %131, %127 ]
  %141 = phi i32 [ %138, %134 ], [ %133, %127 ]
  %142 = zext i32 %141 to i64
  %143 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %140, i64 %142
  %144 = icmp eq i32 %141, 0
  br i1 %144, label %180, label %145

145:                                              ; preds = %139
  %146 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %48, align 8
  %147 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %146, i64 0, i32 3, i32 0, i32 0, i32 0
  %148 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %146, i64 0, i32 4, i32 0, i32 0, i32 0
  br label %149

149:                                              ; preds = %165, %145
  %150 = phi %"class.blink::Attribute"* [ %140, %145 ], [ %166, %165 ]
  %151 = phi i32 [ 0, %145 ], [ %167, %165 ]
  %152 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %150, i64 0, i32 0, i32 0, i32 0
  %153 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %152, align 8
  %154 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %153, %146
  br i1 %154, label %169, label %155

155:                                              ; preds = %149
  %156 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %153, i64 0, i32 3, i32 0, i32 0, i32 0
  %157 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %156, align 8
  %158 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %147, align 8
  %159 = icmp eq %"class.WTF::StringImpl"* %157, %158
  br i1 %159, label %160, label %165

160:                                              ; preds = %155
  %161 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %153, i64 0, i32 4, i32 0, i32 0, i32 0
  %162 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %161, align 8
  %163 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %148, align 8
  %164 = icmp eq %"class.WTF::StringImpl"* %162, %163
  br i1 %164, label %169, label %165

165:                                              ; preds = %160, %155
  %166 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %150, i64 1
  %167 = add i32 %151, 1
  %168 = icmp eq %"class.blink::Attribute"* %166, %143
  br i1 %168, label %180, label %149

169:                                              ; preds = %149, %160
  %170 = icmp eq i32 %151, -1
  br i1 %170, label %180, label %171

171:                                              ; preds = %169
  %172 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %54, i64 0, i32 0, i32 0
  %173 = load %"class.blink::AXObjectCacheImpl"*, %"class.blink::AXObjectCacheImpl"** %3, align 8
  %174 = call %"class.blink::AXObject"* @_ZN5blink17AXObjectCacheImpl11GetOrCreateEPNS_4NodeEPNS_8AXObjectE(%"class.blink::AXObjectCacheImpl"* %173, %"class.blink::Node"* %172, %"class.blink::AXObject"* null) #13
  %175 = icmp eq %"class.blink::AXObject"* %174, null
  br i1 %175, label %180, label %176

176:                                              ; preds = %171
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %49) #13
  %177 = getelementptr inbounds %"class.blink::AXObject", %"class.blink::AXObject"* %174, i64 0, i32 1
  %178 = load i32, i32* %177, align 8
  store i32 %178, i32* %2, align 4
  %179 = call { i32*, i8 } @_ZN3WTF9HashTableIjjNS_17IdentityExtractorENS_7IntHashIjEENS_10HashTraitsIjEES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKjjEENS_18HashTableAddResultIS7_jEEOT0_OT1_(%"class.WTF::HashTable.25"* %50, i32* nonnull dereferenceable(4) %2, i32* nonnull dereferenceable(4) %2) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %49) #13
  br label %180

180:                                              ; preds = %165, %169, %139, %119, %176, %171
  %181 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %54, i64 0, i32 0, i32 1, i32 0, i32 0
  %182 = load %"class.blink::Node"*, %"class.blink::Node"** %181, align 8
  %183 = icmp eq %"class.blink::Node"* %182, null
  br i1 %183, label %184, label %194

184:                                              ; preds = %180
  %185 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %54, i64 0, i32 0, i32 0
  %186 = icmp eq %"class.blink::Element"* %54, %8
  br i1 %186, label %51, label %187

187:                                              ; preds = %184
  %188 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %54, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0
  %189 = load %"class.blink::Node"*, %"class.blink::Node"** %188, align 8
  %190 = icmp eq %"class.blink::Node"* %189, null
  br i1 %190, label %191, label %194

191:                                              ; preds = %187
  %192 = call %"class.blink::Node"* @_ZN5blink13NodeTraversal19NextAncestorSiblingERKNS_4NodeEPS2_(%"class.blink::Node"* dereferenceable(64) %185, %"class.blink::Node"* %9) #13
  %193 = icmp eq %"class.blink::Node"* %192, null
  br i1 %193, label %51, label %194

194:                                              ; preds = %191, %187, %180
  %195 = phi %"class.blink::Node"* [ %182, %180 ], [ %189, %187 ], [ %192, %191 ]
  br label %196

196:                                              ; preds = %194, %210
  %197 = phi %"class.blink::Node"* [ %211, %210 ], [ %195, %194 ]
  %198 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %197, i64 0, i32 1
  %199 = load i32, i32* %198, align 8
  %200 = and i32 %199, 12
  %201 = icmp eq i32 %200, 0
  br i1 %201, label %213, label %202

202:                                              ; preds = %196
  %203 = icmp eq %"class.blink::Node"* %197, %9
  br i1 %203, label %51, label %204

204:                                              ; preds = %202
  %205 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %197, i64 0, i32 5, i32 0, i32 0
  %206 = load %"class.blink::Node"*, %"class.blink::Node"** %205, align 8
  %207 = icmp eq %"class.blink::Node"* %206, null
  br i1 %207, label %208, label %210

208:                                              ; preds = %204
  %209 = call %"class.blink::Node"* @_ZN5blink13NodeTraversal19NextAncestorSiblingERKNS_4NodeEPS2_(%"class.blink::Node"* nonnull dereferenceable(64) %197, %"class.blink::Node"* %9) #13
  br label %210

210:                                              ; preds = %208, %204
  %211 = phi %"class.blink::Node"* [ %209, %208 ], [ %206, %204 ]
  %212 = icmp eq %"class.blink::Node"* %211, null
  br i1 %212, label %51, label %196

213:                                              ; preds = %196
  %214 = bitcast %"class.blink::Node"* %197 to %"class.blink::Element"*
  br label %53
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::AXObject"* @_ZN5blink15AXRelationCache11GetOrCreateEPNS_4NodeEPKNS_8AXObjectE(%"class.blink::AXRelationCache"* nocapture readonly, %"class.blink::Node"*, %"class.blink::AXObject"*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 2, i32 0, i32 0
  %5 = load %"class.blink::AXObjectCacheImpl"*, %"class.blink::AXObjectCacheImpl"** %4, align 8
  %6 = tail call %"class.blink::AXObject"* @_ZN5blink17AXObjectCacheImpl11GetOrCreateEPNS_4NodeEPNS_8AXObjectE(%"class.blink::AXObjectCacheImpl"* %5, %"class.blink::Node"* %1, %"class.blink::AXObject"* %2) #13
  ret %"class.blink::AXObject"* %6
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15AXRelationCache29ProcessUpdatesWithCleanLayoutEv(%"class.blink::AXRelationCache"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 1
  %3 = load i8, i8* %2, align 8, !range !4
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %5, label %6

5:                                                ; preds = %1
  tail call void @_ZN5blink15AXRelationCache21DoInitialDocumentScanEv(%"class.blink::AXRelationCache"* %0)
  br label %6

6:                                                ; preds = %1, %5
  %7 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 7
  %8 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 7, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  %11 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %7, i64 0, i32 0, i32 0
  %12 = load i32*, i32** %11, align 8
  %13 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 7, i32 0, i32 1
  %14 = load i32, i32* %13, align 8
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds i32, i32* %12, i64 %15
  br i1 %10, label %34, label %17

17:                                               ; preds = %6
  %18 = icmp eq i32 %14, 0
  br i1 %18, label %27, label %19

19:                                               ; preds = %17, %24
  %20 = phi i32* [ %25, %24 ], [ %12, %17 ]
  %21 = load i32, i32* %20, align 4
  %22 = add i32 %21, 1
  %23 = icmp ult i32 %22, 2
  br i1 %23, label %24, label %27

24:                                               ; preds = %19
  %25 = getelementptr inbounds i32, i32* %20, i64 1
  %26 = icmp eq i32* %25, %16
  br i1 %26, label %34, label %19

27:                                               ; preds = %19, %17
  %28 = phi i32* [ %12, %17 ], [ %20, %19 ]
  %29 = icmp eq i32* %28, %16
  br i1 %29, label %34, label %30

30:                                               ; preds = %27
  %31 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 2, i32 0, i32 0
  br label %41

32:                                               ; preds = %108, %119, %116
  %33 = load i32*, i32** %11, align 8
  br label %34

34:                                               ; preds = %24, %6, %32, %27
  %35 = phi i32* [ %33, %32 ], [ %12, %27 ], [ %12, %6 ], [ %12, %24 ]
  %36 = icmp eq i32* %35, null
  br i1 %36, label %40, label %37

37:                                               ; preds = %34
  %38 = bitcast i32* %35 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %38) #13
  %39 = bitcast %"class.WTF::HashSet"* %7 to i64*
  store atomic i64 0, i64* %39 monotonic, align 8
  store i32 0, i32* %13, align 8
  store i32 0, i32* %8, align 4
  br label %40

40:                                               ; preds = %34, %37
  ret void

41:                                               ; preds = %30, %119
  %42 = phi i32* [ %28, %30 ], [ %112, %119 ]
  %43 = load i32, i32* %42, align 4
  %44 = load %"class.blink::AXObjectCacheImpl"*, %"class.blink::AXObjectCacheImpl"** %31, align 8
  %45 = getelementptr inbounds %"class.blink::AXObjectCacheImpl", %"class.blink::AXObjectCacheImpl"* %44, i64 0, i32 5, i32 0, i32 0, i32 0
  %46 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %45, align 8
  %47 = icmp eq %"struct.WTF::KeyValuePair"* %46, null
  br i1 %47, label %108, label %48

48:                                               ; preds = %41
  %49 = getelementptr inbounds %"class.blink::AXObjectCacheImpl", %"class.blink::AXObjectCacheImpl"* %44, i64 0, i32 5, i32 0, i32 0, i32 1
  %50 = load i32, i32* %49, align 8
  %51 = add i32 %50, -1
  %52 = zext i32 %51 to i64
  %53 = shl i32 %43, 15
  %54 = xor i32 %53, -1
  %55 = add i32 %43, %54
  %56 = lshr i32 %55, 10
  %57 = xor i32 %56, %55
  %58 = mul i32 %57, 9
  %59 = lshr i32 %58, 6
  %60 = xor i32 %59, %58
  %61 = shl i32 %60, 11
  %62 = xor i32 %61, -1
  %63 = add i32 %60, %62
  %64 = lshr i32 %63, 16
  %65 = xor i32 %64, %63
  %66 = and i32 %51, %65
  %67 = zext i32 %66 to i64
  %68 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %46, i64 %67
  %69 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %68, i64 0, i32 0
  %70 = load i32, i32* %69, align 4
  %71 = icmp eq i32 %70, %43
  br i1 %71, label %100, label %72

72:                                               ; preds = %48
  %73 = xor i32 %65, -1
  %74 = lshr i32 %63, 23
  %75 = add i32 %74, %73
  %76 = shl i32 %75, 12
  %77 = xor i32 %76, %75
  %78 = lshr i32 %77, 7
  %79 = xor i32 %78, %77
  %80 = shl i32 %79, 2
  %81 = xor i32 %80, %79
  %82 = lshr i32 %81, 20
  %83 = xor i32 %82, %81
  %84 = or i32 %83, 1
  %85 = zext i32 %84 to i64
  br label %86

86:                                               ; preds = %91, %72
  %87 = phi i32 [ %70, %72 ], [ %98, %91 ]
  %88 = phi i64 [ %67, %72 ], [ %95, %91 ]
  %89 = phi i64 [ 0, %72 ], [ %93, %91 ]
  %90 = icmp eq i32 %87, 0
  br i1 %90, label %108, label %91

91:                                               ; preds = %86
  %92 = icmp eq i64 %89, 0
  %93 = select i1 %92, i64 %85, i64 %89
  %94 = add i64 %93, %88
  %95 = and i64 %94, %52
  %96 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %46, i64 %95
  %97 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %96, i64 0, i32 0
  %98 = load i32, i32* %97, align 4
  %99 = icmp eq i32 %98, %43
  br i1 %99, label %100, label %86

100:                                              ; preds = %91, %48
  %101 = phi %"struct.WTF::KeyValuePair"* [ %68, %48 ], [ %96, %91 ]
  %102 = icmp eq %"struct.WTF::KeyValuePair"* %101, null
  br i1 %102, label %108, label %103

103:                                              ; preds = %100
  %104 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %101, i64 0, i32 1, i32 0, i32 0
  %105 = load %"class.blink::AXObject"*, %"class.blink::AXObject"** %104, align 8
  %106 = icmp eq %"class.blink::AXObject"* %105, null
  br i1 %106, label %108, label %107

107:                                              ; preds = %103
  tail call void @_ZN5blink15AXRelationCache29UpdateAriaOwnsWithCleanLayoutEPNS_8AXObjectEb(%"class.blink::AXRelationCache"* %0, %"class.blink::AXObject"* nonnull %105, i1 zeroext false)
  br label %108

108:                                              ; preds = %86, %41, %100, %103, %107
  %109 = getelementptr inbounds i32, i32* %42, i64 1
  %110 = icmp eq i32* %109, %16
  br i1 %110, label %32, label %111

111:                                              ; preds = %108, %116
  %112 = phi i32* [ %117, %116 ], [ %109, %108 ]
  %113 = load i32, i32* %112, align 4
  %114 = add i32 %113, 1
  %115 = icmp ult i32 %114, 2
  br i1 %115, label %116, label %119

116:                                              ; preds = %111
  %117 = getelementptr inbounds i32, i32* %112, i64 1
  %118 = icmp eq i32* %117, %16
  br i1 %118, label %32, label %111

119:                                              ; preds = %111
  %120 = icmp eq i32* %112, %16
  br i1 %120, label %32, label %41
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.blink::AXObject"* @_ZNK5blink15AXRelationCache14ObjectFromAXIDEj(%"class.blink::AXRelationCache"* nocapture readonly, i32) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 2, i32 0, i32 0
  %4 = load %"class.blink::AXObjectCacheImpl"*, %"class.blink::AXObjectCacheImpl"** %3, align 8
  %5 = getelementptr inbounds %"class.blink::AXObjectCacheImpl", %"class.blink::AXObjectCacheImpl"* %4, i64 0, i32 5, i32 0, i32 0, i32 0
  %6 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %5, align 8
  %7 = icmp eq %"struct.WTF::KeyValuePair"* %6, null
  br i1 %7, label %66, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.blink::AXObjectCacheImpl", %"class.blink::AXObjectCacheImpl"* %4, i64 0, i32 5, i32 0, i32 0, i32 1
  %10 = load i32, i32* %9, align 8
  %11 = add i32 %10, -1
  %12 = zext i32 %11 to i64
  %13 = shl i32 %1, 15
  %14 = xor i32 %13, -1
  %15 = add i32 %14, %1
  %16 = lshr i32 %15, 10
  %17 = xor i32 %16, %15
  %18 = mul i32 %17, 9
  %19 = lshr i32 %18, 6
  %20 = xor i32 %19, %18
  %21 = shl i32 %20, 11
  %22 = xor i32 %21, -1
  %23 = add i32 %20, %22
  %24 = lshr i32 %23, 16
  %25 = xor i32 %24, %23
  %26 = and i32 %11, %25
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %6, i64 %27
  %29 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %28, i64 0, i32 0
  %30 = load i32, i32* %29, align 4
  %31 = icmp eq i32 %30, %1
  br i1 %31, label %60, label %32

32:                                               ; preds = %8
  %33 = xor i32 %25, -1
  %34 = lshr i32 %23, 23
  %35 = add i32 %34, %33
  %36 = shl i32 %35, 12
  %37 = xor i32 %36, %35
  %38 = lshr i32 %37, 7
  %39 = xor i32 %38, %37
  %40 = shl i32 %39, 2
  %41 = xor i32 %40, %39
  %42 = lshr i32 %41, 20
  %43 = xor i32 %42, %41
  %44 = or i32 %43, 1
  %45 = zext i32 %44 to i64
  br label %46

46:                                               ; preds = %51, %32
  %47 = phi i32 [ %30, %32 ], [ %58, %51 ]
  %48 = phi i64 [ %27, %32 ], [ %55, %51 ]
  %49 = phi i64 [ 0, %32 ], [ %53, %51 ]
  %50 = icmp eq i32 %47, 0
  br i1 %50, label %66, label %51

51:                                               ; preds = %46
  %52 = icmp eq i64 %49, 0
  %53 = select i1 %52, i64 %45, i64 %49
  %54 = add i64 %53, %48
  %55 = and i64 %54, %12
  %56 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %6, i64 %55
  %57 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %56, i64 0, i32 0
  %58 = load i32, i32* %57, align 4
  %59 = icmp eq i32 %58, %1
  br i1 %59, label %60, label %46

60:                                               ; preds = %51, %8
  %61 = phi %"struct.WTF::KeyValuePair"* [ %28, %8 ], [ %56, %51 ]
  %62 = icmp eq %"struct.WTF::KeyValuePair"* %61, null
  br i1 %62, label %66, label %63

63:                                               ; preds = %60
  %64 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %61, i64 0, i32 1, i32 0, i32 0
  %65 = load %"class.blink::AXObject"*, %"class.blink::AXObject"** %64, align 8
  br label %66

66:                                               ; preds = %46, %2, %60, %63
  %67 = phi %"class.blink::AXObject"* [ %65, %63 ], [ null, %60 ], [ null, %2 ], [ null, %46 ]
  ret %"class.blink::AXObject"* %67
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15AXRelationCache29UpdateAriaOwnsWithCleanLayoutEPNS_8AXObjectEb(%"class.blink::AXRelationCache"*, %"class.blink::AXObject"*, i1 zeroext) local_unnamed_addr #0 align 2 {
  %4 = alloca i32, align 4
  %5 = alloca %"class.WTF::HashSet", align 8
  %6 = alloca %"class.blink::HeapVector.381", align 8
  %7 = alloca %"class.absl::optional", align 8
  %8 = alloca %"class.WTF::Vector.758", align 8
  %9 = alloca %"class.WTF::AtomicString", align 8
  %10 = alloca %"class.blink::AXObject"*, align 8
  %11 = tail call %"class.blink::Element"* @_ZNK5blink8AXObject10GetElementEv(%"class.blink::AXObject"* %1) #13
  %12 = icmp eq %"class.blink::Element"* %11, null
  br i1 %12, label %220, label %13

13:                                               ; preds = %3
  %14 = bitcast %"class.blink::AXObject"* %1 to %"class.blink::Node"* (%"class.blink::AXObject"*)***
  %15 = load %"class.blink::Node"* (%"class.blink::AXObject"*)**, %"class.blink::Node"* (%"class.blink::AXObject"*)*** %14, align 8
  %16 = getelementptr inbounds %"class.blink::Node"* (%"class.blink::AXObject"*)*, %"class.blink::Node"* (%"class.blink::AXObject"*)** %15, i64 124
  %17 = load %"class.blink::Node"* (%"class.blink::AXObject"*)*, %"class.blink::Node"* (%"class.blink::AXObject"*)** %16, align 8
  %18 = tail call %"class.blink::Node"* %17(%"class.blink::AXObject"* %1) #13
  %19 = icmp eq %"class.blink::Node"* %18, null
  br i1 %19, label %37, label %20

20:                                               ; preds = %13
  %21 = bitcast %"class.blink::AXObject"* %1 to i1 (%"class.blink::AXObject"*)***
  %22 = load i1 (%"class.blink::AXObject"*)**, i1 (%"class.blink::AXObject"*)*** %21, align 8
  %23 = getelementptr inbounds i1 (%"class.blink::AXObject"*)*, i1 (%"class.blink::AXObject"*)** %22, i64 119
  %24 = load i1 (%"class.blink::AXObject"*)*, i1 (%"class.blink::AXObject"*)** %23, align 8
  %25 = tail call zeroext i1 %24(%"class.blink::AXObject"* %1) #13
  br i1 %25, label %26, label %37

26:                                               ; preds = %20
  %27 = tail call zeroext i1 @_ZNK5blink8AXObject11IsTextFieldEv(%"class.blink::AXObject"* %1) #13
  br i1 %27, label %37, label %28

28:                                               ; preds = %26
  %29 = tail call i32 @_ZNK5blink8AXObject9RoleValueEv(%"class.blink::AXObject"* %1) #13
  %30 = icmp eq i32 %29, 100
  br i1 %30, label %37, label %31

31:                                               ; preds = %28
  %32 = load %"class.blink::Node"* (%"class.blink::AXObject"*)**, %"class.blink::Node"* (%"class.blink::AXObject"*)*** %14, align 8
  %33 = getelementptr inbounds %"class.blink::Node"* (%"class.blink::AXObject"*)*, %"class.blink::Node"* (%"class.blink::AXObject"*)** %32, i64 124
  %34 = load %"class.blink::Node"* (%"class.blink::AXObject"*)*, %"class.blink::Node"* (%"class.blink::AXObject"*)** %33, align 8
  %35 = tail call %"class.blink::Node"* %34(%"class.blink::AXObject"* %1) #13
  %36 = tail call zeroext i1 @_ZN5blink8AXObject25CanComputeAsNaturalParentEPNS_4NodeE(%"class.blink::Node"* %35) #13
  br label %37

37:                                               ; preds = %13, %20, %26, %28, %31
  %38 = phi i1 [ false, %13 ], [ false, %20 ], [ false, %26 ], [ false, %28 ], [ %36, %31 ]
  %39 = or i1 %38, %2
  br i1 %39, label %40, label %220

40:                                               ; preds = %37
  %41 = bitcast %"class.blink::HeapVector.381"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %41) #13
  %42 = getelementptr inbounds %"class.blink::HeapVector.381", %"class.blink::HeapVector.381"* %6, i64 0, i32 0, i32 0, i32 0, i32 0
  %43 = getelementptr inbounds %"class.blink::HeapVector.381", %"class.blink::HeapVector.381"* %6, i64 0, i32 0, i32 0, i32 0, i32 1
  %44 = getelementptr inbounds %"class.blink::HeapVector.381", %"class.blink::HeapVector.381"* %6, i64 0, i32 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %41, i8 0, i64 16, i1 false) #13
  br i1 %38, label %45, label %219

45:                                               ; preds = %40
  %46 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names13kAriaOwnsAttrE, align 8
  %47 = tail call zeroext i1 @_ZN5blink7Element38HasExplicitlySetAttrAssociatedElementsERKNS_13QualifiedNameE(%"class.blink::Element"* nonnull %11, %"class.blink::QualifiedName"* dereferenceable(8) %46) #13
  br i1 %47, label %48, label %55

48:                                               ; preds = %45
  %49 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %7, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %49) #13
  call void @_ZN5blink7Element24GetElementArrayAttributeERKNS_13QualifiedNameE(%"class.absl::optional"* nonnull sret %7, %"class.blink::Element"* nonnull %11, %"class.blink::QualifiedName"* dereferenceable(8) %46) #13
  %50 = load i8, i8* %49, align 8, !range !4
  %51 = icmp eq i8 %50, 0
  br i1 %51, label %52, label %53

52:                                               ; preds = %48
  call void @_ZN4absl17optional_internal25throw_bad_optional_accessEv() #14
  unreachable

53:                                               ; preds = %48
  %54 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %7, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  call void @_ZN5blink15AXRelationCache55UpdateAriaOwnsFromAttrAssociatedElementsWithCleanLayoutEPNS_8AXObjectERKNS_10HeapVectorINS_6MemberINS_7ElementEEELj0EEERNS3_INS4_IS1_EELj0EEEb(%"class.blink::AXRelationCache"* %0, %"class.blink::AXObject"* %1, %"class.blink::HeapVector.321"* dereferenceable(16) %54, %"class.blink::HeapVector.381"* nonnull dereferenceable(16) %6, i1 zeroext %2)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %49) #13
  br label %219

55:                                               ; preds = %45
  %56 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %11, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %57 = load %"class.blink::TreeScope"*, %"class.blink::TreeScope"** %56, align 8
  %58 = bitcast %"class.WTF::Vector.758"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %58) #13
  %59 = getelementptr inbounds %"class.WTF::Vector.758", %"class.WTF::Vector.758"* %8, i64 0, i32 0, i32 0, i32 0
  %60 = getelementptr inbounds %"class.WTF::Vector.758", %"class.WTF::Vector.758"* %8, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %58, i8 0, i64 16, i1 false) #13
  call void @_ZN5blink8AXObject24TokenVectorFromAttributeEPNS_7ElementERN3WTF6VectorINS3_6StringELj0ENS3_18PartitionAllocatorEEERKNS_13QualifiedNameE(%"class.blink::Element"* nonnull %11, %"class.WTF::Vector.758"* nonnull dereferenceable(16) %8, %"class.blink::QualifiedName"* dereferenceable(8) %46) #13
  %61 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %61) #13
  %62 = getelementptr inbounds %"class.blink::AXObject", %"class.blink::AXObject"* %1, i64 0, i32 1
  %63 = load i32, i32* %62, align 8
  store i32 %63, i32* %4, align 4
  %64 = load %"class.WTF::String"*, %"class.WTF::String"** %59, align 8
  %65 = load i32, i32* %60, align 4
  %66 = zext i32 %65 to i64
  %67 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %64, i64 %66
  %68 = icmp eq i32 %65, 0
  br i1 %68, label %69, label %70

69:                                               ; preds = %55
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %61) #13
  br label %103

70:                                               ; preds = %55
  %71 = bitcast %"class.WTF::HashSet"* %5 to i8*
  %72 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 5, i32 0
  %73 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %5, i64 0, i32 0, i32 0
  br label %74

74:                                               ; preds = %82, %70
  %75 = phi %"class.WTF::String"* [ %64, %70 ], [ %85, %82 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %71) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %71, i8 0, i64 20, i1 false) #13
  %76 = call { %"struct.WTF::KeyValuePair.260"*, i8 } @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_7HashSetIjNS_7IntHashIjEENS_10HashTraitsIjEENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS6_IS1_EENS6_IS9_EEEESE_S8_E6insertINS_17HashMapTranslatorISG_SC_S8_EERKS1_S9_EENS_18HashTableAddResultISH_SA_EEOT0_OT1_(%"class.WTF::HashTable.257"* %72, %"class.WTF::String"* dereferenceable(8) %75, %"class.WTF::HashSet"* nonnull dereferenceable(24) %5) #13
  %77 = extractvalue { %"struct.WTF::KeyValuePair.260"*, i8 } %76, 0
  %78 = load i32*, i32** %73, align 8
  %79 = icmp eq i32* %78, null
  br i1 %79, label %82, label %80, !prof !3

80:                                               ; preds = %74
  %81 = bitcast i32* %78 to i8*
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %81) #13
  store i32* null, i32** %73, align 8
  br label %82

82:                                               ; preds = %80, %74
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %71) #13
  %83 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %77, i64 0, i32 1, i32 0
  %84 = call { i32*, i8 } @_ZN3WTF9HashTableIjjNS_17IdentityExtractorENS_7IntHashIjEENS_10HashTraitsIjEES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKjRjEENS_18HashTableAddResultIS7_jEEOT0_OT1_(%"class.WTF::HashTable.25"* %83, i32* nonnull dereferenceable(4) %4, i32* nonnull dereferenceable(4) %4) #13
  %85 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %75, i64 1
  %86 = icmp eq %"class.WTF::String"* %85, %67
  br i1 %86, label %87, label %74

87:                                               ; preds = %82
  %88 = load %"class.WTF::String"*, %"class.WTF::String"** %59, align 8
  %89 = load i32, i32* %60, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %61) #13
  %90 = zext i32 %89 to i64
  %91 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %88, i64 %90
  %92 = icmp eq i32 %89, 0
  br i1 %92, label %103, label %93

93:                                               ; preds = %87
  %94 = bitcast %"class.WTF::AtomicString"* %9 to i8*
  %95 = bitcast %"class.WTF::AtomicString"* %9 to i64*
  %96 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %9, i64 0, i32 0, i32 0, i32 0
  %97 = bitcast %"class.blink::AXObject"** %10 to i8*
  %98 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 2, i32 0, i32 0
  %99 = bitcast %"class.blink::AXObject"** %10 to i64*
  %100 = getelementptr inbounds %"class.blink::HeapVector.381", %"class.blink::HeapVector.381"* %6, i64 0, i32 0
  br label %140

101:                                              ; preds = %216
  %102 = load %"class.WTF::String"*, %"class.WTF::String"** %59, align 8
  br label %103

103:                                              ; preds = %69, %101, %87
  %104 = phi %"class.WTF::String"* [ %102, %101 ], [ %88, %87 ], [ %64, %69 ]
  %105 = icmp eq %"class.WTF::String"* %104, null
  br i1 %105, label %139, label %106, !prof !3

106:                                              ; preds = %103
  %107 = bitcast %"class.WTF::String"* %104 to i8*
  %108 = load i32, i32* %60, align 4
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %137, label %110, !prof !2

110:                                              ; preds = %106
  %111 = zext i32 %108 to i64
  %112 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %104, i64 %111
  br label %113

113:                                              ; preds = %131, %110
  %114 = phi %"class.WTF::String"* [ %132, %131 ], [ %104, %110 ]
  %115 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %114, i64 0, i32 0, i32 0
  %116 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %115, align 8
  %117 = icmp eq %"class.WTF::StringImpl"* %116, null
  br i1 %117, label %131, label %118

118:                                              ; preds = %113
  %119 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %116, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %120 = load atomic i32, i32* %119 monotonic, align 4
  %121 = and i32 %120, 2
  %122 = icmp eq i32 %121, 0
  %123 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %116, i64 0, i32 0
  %124 = load i32, i32* %123, align 4
  br i1 %122, label %125, label %127

125:                                              ; preds = %118
  %126 = add i32 %124, -1
  store i32 %126, i32* %123, align 4
  br label %127

127:                                              ; preds = %125, %118
  %128 = phi i32 [ %126, %125 ], [ %124, %118 ]
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %130, label %131

130:                                              ; preds = %127
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %116) #13
  br label %131

131:                                              ; preds = %130, %127, %113
  %132 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %114, i64 1
  %133 = icmp eq %"class.WTF::String"* %132, %112
  br i1 %133, label %134, label %113

134:                                              ; preds = %131
  store i32 0, i32* %60, align 4
  %135 = bitcast %"class.WTF::Vector.758"* %8 to i8**
  %136 = load i8*, i8** %135, align 8
  br label %137

137:                                              ; preds = %134, %106
  %138 = phi i8* [ %136, %134 ], [ %107, %106 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %138) #13
  store %"class.WTF::String"* null, %"class.WTF::String"** %59, align 8
  br label %139

139:                                              ; preds = %103, %137
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %58) #13
  br label %219

140:                                              ; preds = %93, %216
  %141 = phi %"class.WTF::String"* [ %88, %93 ], [ %217, %216 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %94) #13
  %142 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %141, i64 0, i32 0, i32 0
  %143 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %142, align 8
  %144 = icmp eq %"class.WTF::StringImpl"* %143, null
  br i1 %144, label %168, label %145

145:                                              ; preds = %140
  %146 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %143, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %147 = load atomic i32, i32* %146 acquire, align 4
  %148 = and i32 %147, 4
  %149 = icmp eq i32 %148, 0
  br i1 %149, label %166, label %150

150:                                              ; preds = %145
  %151 = load atomic i32, i32* %146 monotonic, align 4
  %152 = and i32 %151, 2
  %153 = icmp eq i32 %152, 0
  br i1 %153, label %154, label %168

154:                                              ; preds = %150
  %155 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %143, i64 0, i32 0
  %156 = load i32, i32* %155, align 4
  %157 = zext i32 %156 to i33
  %158 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %157, i33 1) #13
  %159 = extractvalue { i33, i1 } %158, 1
  %160 = extractvalue { i33, i1 } %158, 0
  %161 = icmp slt i33 %160, 0
  %162 = or i1 %159, %161
  br i1 %162, label %163, label %164, !prof !2

163:                                              ; preds = %154
  call void @llvm.trap() #13
  unreachable

164:                                              ; preds = %154
  %165 = trunc i33 %160 to i32
  store i32 %165, i32* %155, align 4
  br label %168

166:                                              ; preds = %145
  %167 = call %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"* nonnull %143) #13
  br label %168

168:                                              ; preds = %140, %150, %164, %166
  %169 = phi %"class.WTF::StringImpl"* [ %167, %166 ], [ %143, %150 ], [ %143, %164 ], [ null, %140 ]
  %170 = ptrtoint %"class.WTF::StringImpl"* %169 to i64
  store i64 %170, i64* %95, align 8
  %171 = call %"class.blink::Element"* @_ZNK5blink9TreeScope14getElementByIdERKN3WTF12AtomicStringE(%"class.blink::TreeScope"* %57, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %9) #13
  %172 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %96, align 8
  %173 = icmp eq %"class.WTF::StringImpl"* %172, null
  br i1 %173, label %187, label %174

174:                                              ; preds = %168
  %175 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %172, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %176 = load atomic i32, i32* %175 monotonic, align 4
  %177 = and i32 %176, 2
  %178 = icmp eq i32 %177, 0
  %179 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %172, i64 0, i32 0
  %180 = load i32, i32* %179, align 4
  br i1 %178, label %181, label %183

181:                                              ; preds = %174
  %182 = add i32 %180, -1
  store i32 %182, i32* %179, align 4
  br label %183

183:                                              ; preds = %181, %174
  %184 = phi i32 [ %182, %181 ], [ %180, %174 ]
  %185 = icmp eq i32 %184, 0
  br i1 %185, label %186, label %187

186:                                              ; preds = %183
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %172) #13
  br label %187

187:                                              ; preds = %168, %183, %186
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %94) #13
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %97) #13
  store %"class.blink::AXObject"* inttoptr (i64 -6148914691236517206 to %"class.blink::AXObject"*), %"class.blink::AXObject"** %10, align 8
  %188 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %171, i64 0, i32 0, i32 0
  %189 = load %"class.blink::AXObjectCacheImpl"*, %"class.blink::AXObjectCacheImpl"** %98, align 8
  %190 = call %"class.blink::AXObject"* @_ZN5blink17AXObjectCacheImpl11GetOrCreateEPNS_4NodeEPNS_8AXObjectE(%"class.blink::AXObjectCacheImpl"* %189, %"class.blink::Node"* %188, %"class.blink::AXObject"* %1) #13
  store %"class.blink::AXObject"* %190, %"class.blink::AXObject"** %10, align 8
  %191 = call zeroext i1 @_ZNK5blink15AXRelationCache19IsValidOwnsRelationEPNS_8AXObjectES2_(%"class.blink::AXRelationCache"* %0, %"class.blink::AXObject"* %1, %"class.blink::AXObject"* %190)
  br i1 %191, label %192, label %211

192:                                              ; preds = %187
  %193 = load i32, i32* %44, align 4
  %194 = load i32, i32* %43, align 8
  %195 = icmp eq i32 %193, %194
  br i1 %195, label %210, label %196, !prof !2

196:                                              ; preds = %192
  %197 = load %"class.blink::Member.380"*, %"class.blink::Member.380"** %42, align 8
  %198 = zext i32 %193 to i64
  %199 = getelementptr inbounds %"class.blink::Member.380", %"class.blink::Member.380"* %197, i64 %198
  %200 = load i64, i64* %99, align 8
  %201 = bitcast %"class.blink::Member.380"* %199 to i64*
  store atomic i64 %200, i64* %201 monotonic, align 8
  %202 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %203 = icmp eq i32 %202, 0
  br i1 %203, label %207, label %204

204:                                              ; preds = %196
  %205 = inttoptr i64 %200 to i8*
  %206 = call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %205) #13
  br label %207

207:                                              ; preds = %204, %196
  %208 = load i32, i32* %44, align 4
  %209 = add i32 %208, 1
  store i32 %209, i32* %44, align 4
  br label %216

210:                                              ; preds = %192
  call void @_ZN3WTF6VectorIN5blink6MemberINS1_8AXObjectEEELj0ENS1_13HeapAllocatorEE14AppendSlowCaseIRPS3_EEvOT_(%"class.WTF::Vector.384"* nonnull %100, %"class.blink::AXObject"** nonnull dereferenceable(8) %10) #13
  br label %216

211:                                              ; preds = %187
  %212 = load %"class.blink::AXObject"*, %"class.blink::AXObject"** %10, align 8
  %213 = icmp eq %"class.blink::AXObject"* %212, null
  br i1 %213, label %216, label %214

214:                                              ; preds = %211
  %215 = call %"class.blink::AXObject"* @_ZNK5blink8AXObject13ComputeParentEv(%"class.blink::AXObject"* nonnull %212) #13
  call void @_ZNK5blink8AXObject9SetParentEPS0_(%"class.blink::AXObject"* nonnull %212, %"class.blink::AXObject"* %215) #13
  br label %216

216:                                              ; preds = %210, %207, %211, %214
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %97) #13
  %217 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %141, i64 1
  %218 = icmp eq %"class.WTF::String"* %217, %91
  br i1 %218, label %101, label %140

219:                                              ; preds = %53, %139, %40
  call void @_ZN5blink15AXRelationCache47UpdateAriaOwnerToChildrenMappingWithCleanLayoutEPNS_8AXObjectERNS_10HeapVectorINS_6MemberIS1_EELj0EEEb(%"class.blink::AXRelationCache"* %0, %"class.blink::AXObject"* %1, %"class.blink::HeapVector.381"* nonnull dereferenceable(16) %6, i1 zeroext %2)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %41) #13
  br label %220

220:                                              ; preds = %219, %37, %3
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink15AXRelationCache11IsAriaOwnedEPKNS_8AXObjectE(%"class.blink::AXRelationCache"* nocapture readonly, %"class.blink::AXObject"* readonly) local_unnamed_addr #3 align 2 {
  %3 = icmp eq %"class.blink::AXObject"* %1, null
  br i1 %3, label %65, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.blink::AXObject", %"class.blink::AXObject"* %1, i64 0, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 4, i32 0, i32 0
  %8 = load %"struct.WTF::KeyValuePair.255"*, %"struct.WTF::KeyValuePair.255"** %7, align 8
  %9 = icmp eq %"struct.WTF::KeyValuePair.255"* %8, null
  br i1 %9, label %62, label %10

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 4, i32 0, i32 1
  %12 = load i32, i32* %11, align 8
  %13 = add i32 %12, -1
  %14 = zext i32 %13 to i64
  %15 = shl i32 %6, 15
  %16 = xor i32 %15, -1
  %17 = add i32 %6, %16
  %18 = lshr i32 %17, 10
  %19 = xor i32 %18, %17
  %20 = mul i32 %19, 9
  %21 = lshr i32 %20, 6
  %22 = xor i32 %21, %20
  %23 = shl i32 %22, 11
  %24 = xor i32 %23, -1
  %25 = add i32 %22, %24
  %26 = lshr i32 %25, 16
  %27 = xor i32 %26, %25
  %28 = and i32 %13, %27
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds %"struct.WTF::KeyValuePair.255", %"struct.WTF::KeyValuePair.255"* %8, i64 %29
  %31 = getelementptr inbounds %"struct.WTF::KeyValuePair.255", %"struct.WTF::KeyValuePair.255"* %30, i64 0, i32 0
  %32 = load i32, i32* %31, align 4
  %33 = icmp eq i32 %32, %6
  br i1 %33, label %62, label %34

34:                                               ; preds = %10
  %35 = xor i32 %27, -1
  %36 = lshr i32 %25, 23
  %37 = add i32 %36, %35
  %38 = shl i32 %37, 12
  %39 = xor i32 %38, %37
  %40 = lshr i32 %39, 7
  %41 = xor i32 %40, %39
  %42 = shl i32 %41, 2
  %43 = xor i32 %42, %41
  %44 = lshr i32 %43, 20
  %45 = xor i32 %44, %43
  %46 = or i32 %45, 1
  %47 = zext i32 %46 to i64
  br label %48

48:                                               ; preds = %53, %34
  %49 = phi i32 [ %32, %34 ], [ %60, %53 ]
  %50 = phi i64 [ %29, %34 ], [ %57, %53 ]
  %51 = phi i64 [ 0, %34 ], [ %55, %53 ]
  %52 = icmp eq i32 %49, 0
  br i1 %52, label %62, label %53

53:                                               ; preds = %48
  %54 = icmp eq i64 %51, 0
  %55 = select i1 %54, i64 %47, i64 %51
  %56 = add i64 %55, %50
  %57 = and i64 %56, %14
  %58 = getelementptr inbounds %"struct.WTF::KeyValuePair.255", %"struct.WTF::KeyValuePair.255"* %8, i64 %57
  %59 = getelementptr inbounds %"struct.WTF::KeyValuePair.255", %"struct.WTF::KeyValuePair.255"* %58, i64 0, i32 0
  %60 = load i32, i32* %59, align 4
  %61 = icmp eq i32 %60, %6
  br i1 %61, label %62, label %48

62:                                               ; preds = %48, %53, %4, %10
  %63 = phi %"struct.WTF::KeyValuePair.255"* [ null, %4 ], [ %30, %10 ], [ %58, %53 ], [ null, %48 ]
  %64 = icmp ne %"struct.WTF::KeyValuePair.255"* %63, null
  br label %65

65:                                               ; preds = %2, %62
  %66 = phi i1 [ false, %2 ], [ %64, %62 ]
  ret i1 %66
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden %"class.blink::AXObject"* @_ZNK5blink15AXRelationCache18GetAriaOwnedParentEPKNS_8AXObjectE(%"class.blink::AXRelationCache"* nocapture readonly, %"class.blink::AXObject"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.blink::AXObject", %"class.blink::AXObject"* %1, i64 0, i32 1
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 4, i32 0, i32 0
  %6 = load %"struct.WTF::KeyValuePair.255"*, %"struct.WTF::KeyValuePair.255"** %5, align 8
  %7 = icmp eq %"struct.WTF::KeyValuePair.255"* %6, null
  %8 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 4, i32 0, i32 1
  %9 = load i32, i32* %8, align 8
  br i1 %7, label %65, label %10

10:                                               ; preds = %2
  %11 = add i32 %9, -1
  %12 = zext i32 %11 to i64
  %13 = shl i32 %4, 15
  %14 = xor i32 %13, -1
  %15 = add i32 %4, %14
  %16 = lshr i32 %15, 10
  %17 = xor i32 %16, %15
  %18 = mul i32 %17, 9
  %19 = lshr i32 %18, 6
  %20 = xor i32 %19, %18
  %21 = shl i32 %20, 11
  %22 = xor i32 %21, -1
  %23 = add i32 %20, %22
  %24 = lshr i32 %23, 16
  %25 = xor i32 %24, %23
  %26 = and i32 %25, %11
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds %"struct.WTF::KeyValuePair.255", %"struct.WTF::KeyValuePair.255"* %6, i64 %27
  %29 = getelementptr inbounds %"struct.WTF::KeyValuePair.255", %"struct.WTF::KeyValuePair.255"* %28, i64 0, i32 0
  %30 = load i32, i32* %29, align 4
  %31 = icmp eq i32 %30, %4
  br i1 %31, label %60, label %32

32:                                               ; preds = %10
  %33 = xor i32 %25, -1
  %34 = lshr i32 %23, 23
  %35 = add i32 %34, %33
  %36 = shl i32 %35, 12
  %37 = xor i32 %36, %35
  %38 = lshr i32 %37, 7
  %39 = xor i32 %38, %37
  %40 = shl i32 %39, 2
  %41 = xor i32 %40, %39
  %42 = lshr i32 %41, 20
  %43 = xor i32 %42, %41
  %44 = or i32 %43, 1
  %45 = zext i32 %44 to i64
  br label %46

46:                                               ; preds = %51, %32
  %47 = phi i32 [ %30, %32 ], [ %58, %51 ]
  %48 = phi i64 [ %27, %32 ], [ %55, %51 ]
  %49 = phi i64 [ 0, %32 ], [ %53, %51 ]
  %50 = icmp eq i32 %47, 0
  br i1 %50, label %65, label %51

51:                                               ; preds = %46
  %52 = icmp eq i64 %49, 0
  %53 = select i1 %52, i64 %45, i64 %49
  %54 = add i64 %53, %48
  %55 = and i64 %54, %12
  %56 = getelementptr inbounds %"struct.WTF::KeyValuePair.255", %"struct.WTF::KeyValuePair.255"* %6, i64 %55
  %57 = getelementptr inbounds %"struct.WTF::KeyValuePair.255", %"struct.WTF::KeyValuePair.255"* %56, i64 0, i32 0
  %58 = load i32, i32* %57, align 4
  %59 = icmp eq i32 %58, %4
  br i1 %59, label %60, label %46

60:                                               ; preds = %51, %10
  %61 = phi %"struct.WTF::KeyValuePair.255"* [ %28, %10 ], [ %56, %51 ]
  %62 = icmp eq %"struct.WTF::KeyValuePair.255"* %61, null
  br i1 %62, label %65, label %63

63:                                               ; preds = %60
  %64 = zext i32 %9 to i64
  br label %68

65:                                               ; preds = %46, %60, %2
  %66 = zext i32 %9 to i64
  %67 = getelementptr inbounds %"struct.WTF::KeyValuePair.255", %"struct.WTF::KeyValuePair.255"* %6, i64 %66
  br label %68

68:                                               ; preds = %63, %65
  %69 = phi i64 [ %64, %63 ], [ %66, %65 ]
  %70 = phi %"struct.WTF::KeyValuePair.255"* [ %61, %63 ], [ %67, %65 ]
  %71 = getelementptr inbounds %"struct.WTF::KeyValuePair.255", %"struct.WTF::KeyValuePair.255"* %6, i64 %69
  %72 = icmp eq %"struct.WTF::KeyValuePair.255"* %70, %71
  br i1 %72, label %139, label %73

73:                                               ; preds = %68
  %74 = getelementptr inbounds %"struct.WTF::KeyValuePair.255", %"struct.WTF::KeyValuePair.255"* %70, i64 0, i32 1
  %75 = load i32, i32* %74, align 4
  %76 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 2, i32 0, i32 0
  %77 = load %"class.blink::AXObjectCacheImpl"*, %"class.blink::AXObjectCacheImpl"** %76, align 8
  %78 = getelementptr inbounds %"class.blink::AXObjectCacheImpl", %"class.blink::AXObjectCacheImpl"* %77, i64 0, i32 5, i32 0, i32 0, i32 0
  %79 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %78, align 8
  %80 = icmp eq %"struct.WTF::KeyValuePair"* %79, null
  br i1 %80, label %139, label %81

81:                                               ; preds = %73
  %82 = getelementptr inbounds %"class.blink::AXObjectCacheImpl", %"class.blink::AXObjectCacheImpl"* %77, i64 0, i32 5, i32 0, i32 0, i32 1
  %83 = load i32, i32* %82, align 8
  %84 = add i32 %83, -1
  %85 = zext i32 %84 to i64
  %86 = shl i32 %75, 15
  %87 = xor i32 %86, -1
  %88 = add i32 %75, %87
  %89 = lshr i32 %88, 10
  %90 = xor i32 %89, %88
  %91 = mul i32 %90, 9
  %92 = lshr i32 %91, 6
  %93 = xor i32 %92, %91
  %94 = shl i32 %93, 11
  %95 = xor i32 %94, -1
  %96 = add i32 %93, %95
  %97 = lshr i32 %96, 16
  %98 = xor i32 %97, %96
  %99 = and i32 %84, %98
  %100 = zext i32 %99 to i64
  %101 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %79, i64 %100
  %102 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %101, i64 0, i32 0
  %103 = load i32, i32* %102, align 4
  %104 = icmp eq i32 %103, %75
  br i1 %104, label %133, label %105

105:                                              ; preds = %81
  %106 = xor i32 %98, -1
  %107 = lshr i32 %96, 23
  %108 = add i32 %107, %106
  %109 = shl i32 %108, 12
  %110 = xor i32 %109, %108
  %111 = lshr i32 %110, 7
  %112 = xor i32 %111, %110
  %113 = shl i32 %112, 2
  %114 = xor i32 %113, %112
  %115 = lshr i32 %114, 20
  %116 = xor i32 %115, %114
  %117 = or i32 %116, 1
  %118 = zext i32 %117 to i64
  br label %119

119:                                              ; preds = %124, %105
  %120 = phi i32 [ %103, %105 ], [ %131, %124 ]
  %121 = phi i64 [ %100, %105 ], [ %128, %124 ]
  %122 = phi i64 [ 0, %105 ], [ %126, %124 ]
  %123 = icmp eq i32 %120, 0
  br i1 %123, label %139, label %124

124:                                              ; preds = %119
  %125 = icmp eq i64 %122, 0
  %126 = select i1 %125, i64 %118, i64 %122
  %127 = add i64 %126, %121
  %128 = and i64 %127, %85
  %129 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %79, i64 %128
  %130 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %129, i64 0, i32 0
  %131 = load i32, i32* %130, align 4
  %132 = icmp eq i32 %131, %75
  br i1 %132, label %133, label %119

133:                                              ; preds = %124, %81
  %134 = phi %"struct.WTF::KeyValuePair"* [ %101, %81 ], [ %129, %124 ]
  %135 = icmp eq %"struct.WTF::KeyValuePair"* %134, null
  br i1 %135, label %139, label %136

136:                                              ; preds = %133
  %137 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %134, i64 0, i32 1, i32 0, i32 0
  %138 = load %"class.blink::AXObject"*, %"class.blink::AXObject"** %137, align 8
  br label %139

139:                                              ; preds = %119, %136, %133, %73, %68
  %140 = phi %"class.blink::AXObject"* [ null, %68 ], [ %138, %136 ], [ null, %133 ], [ null, %73 ], [ null, %119 ]
  ret %"class.blink::AXObject"* %140
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15AXRelationCache22UpdateReverseRelationsEPKNS_8AXObjectERKN3WTF6VectorINS4_6StringELj0ENS4_18PartitionAllocatorEEE(%"class.blink::AXRelationCache"*, %"class.blink::AXObject"* nocapture readonly, %"class.WTF::Vector.758"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %4 = alloca i32, align 4
  %5 = alloca %"class.WTF::HashSet", align 8
  %6 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #13
  %7 = getelementptr inbounds %"class.blink::AXObject", %"class.blink::AXObject"* %1, i64 0, i32 1
  %8 = load i32, i32* %7, align 8
  store i32 %8, i32* %4, align 4
  %9 = getelementptr inbounds %"class.WTF::Vector.758", %"class.WTF::Vector.758"* %2, i64 0, i32 0, i32 0, i32 0
  %10 = load %"class.WTF::String"*, %"class.WTF::String"** %9, align 8
  %11 = getelementptr inbounds %"class.WTF::Vector.758", %"class.WTF::Vector.758"* %2, i64 0, i32 0, i32 0, i32 2
  %12 = load i32, i32* %11, align 4
  %13 = zext i32 %12 to i64
  %14 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %10, i64 %13
  %15 = icmp eq i32 %12, 0
  br i1 %15, label %20, label %16

16:                                               ; preds = %3
  %17 = bitcast %"class.WTF::HashSet"* %5 to i8*
  %18 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 5, i32 0
  %19 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %5, i64 0, i32 0, i32 0
  br label %21

20:                                               ; preds = %29, %3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #13
  ret void

21:                                               ; preds = %16, %29
  %22 = phi %"class.WTF::String"* [ %10, %16 ], [ %32, %29 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %17) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 0, i64 20, i1 false) #13
  %23 = call { %"struct.WTF::KeyValuePair.260"*, i8 } @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_7HashSetIjNS_7IntHashIjEENS_10HashTraitsIjEENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS6_IS1_EENS6_IS9_EEEESE_S8_E6insertINS_17HashMapTranslatorISG_SC_S8_EERKS1_S9_EENS_18HashTableAddResultISH_SA_EEOT0_OT1_(%"class.WTF::HashTable.257"* %18, %"class.WTF::String"* dereferenceable(8) %22, %"class.WTF::HashSet"* nonnull dereferenceable(24) %5) #13
  %24 = extractvalue { %"struct.WTF::KeyValuePair.260"*, i8 } %23, 0
  %25 = load i32*, i32** %19, align 8
  %26 = icmp eq i32* %25, null
  br i1 %26, label %29, label %27, !prof !3

27:                                               ; preds = %21
  %28 = bitcast i32* %25 to i8*
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %28) #13
  store i32* null, i32** %19, align 8
  br label %29

29:                                               ; preds = %21, %27
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %17) #13
  %30 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %24, i64 0, i32 1, i32 0
  %31 = call { i32*, i8 } @_ZN3WTF9HashTableIjjNS_17IdentityExtractorENS_7IntHashIjEENS_10HashTraitsIjEES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKjRjEENS_18HashTableAddResultIS7_jEEOT0_OT1_(%"class.WTF::HashTable.25"* %30, i32* nonnull dereferenceable(4) %4, i32* nonnull dereferenceable(4) %4) #13
  %32 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %22, i64 1
  %33 = icmp eq %"class.WTF::String"* %32, %14
  br i1 %33, label %20, label %21
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink15AXRelationCache19IsValidOwnsRelationEPNS_8AXObjectES2_(%"class.blink::AXRelationCache"* nocapture readonly, %"class.blink::AXObject"*, %"class.blink::AXObject"*) local_unnamed_addr #0 align 2 {
  %4 = bitcast %"class.blink::AXObject"* %1 to %"class.blink::Node"* (%"class.blink::AXObject"*)***
  %5 = load %"class.blink::Node"* (%"class.blink::AXObject"*)**, %"class.blink::Node"* (%"class.blink::AXObject"*)*** %4, align 8
  %6 = getelementptr inbounds %"class.blink::Node"* (%"class.blink::AXObject"*)*, %"class.blink::Node"* (%"class.blink::AXObject"*)** %5, i64 124
  %7 = load %"class.blink::Node"* (%"class.blink::AXObject"*)*, %"class.blink::Node"* (%"class.blink::AXObject"*)** %6, align 8
  %8 = tail call %"class.blink::Node"* %7(%"class.blink::AXObject"* %1) #13
  %9 = icmp eq %"class.blink::Node"* %8, null
  br i1 %9, label %115, label %10

10:                                               ; preds = %3
  %11 = bitcast %"class.blink::AXObject"* %1 to i1 (%"class.blink::AXObject"*)***
  %12 = load i1 (%"class.blink::AXObject"*)**, i1 (%"class.blink::AXObject"*)*** %11, align 8
  %13 = getelementptr inbounds i1 (%"class.blink::AXObject"*)*, i1 (%"class.blink::AXObject"*)** %12, i64 119
  %14 = load i1 (%"class.blink::AXObject"*)*, i1 (%"class.blink::AXObject"*)** %13, align 8
  %15 = tail call zeroext i1 %14(%"class.blink::AXObject"* %1) #13
  br i1 %15, label %16, label %115

16:                                               ; preds = %10
  %17 = tail call zeroext i1 @_ZNK5blink8AXObject11IsTextFieldEv(%"class.blink::AXObject"* %1) #13
  br i1 %17, label %115, label %18

18:                                               ; preds = %16
  %19 = tail call i32 @_ZNK5blink8AXObject9RoleValueEv(%"class.blink::AXObject"* %1) #13
  %20 = icmp eq i32 %19, 100
  br i1 %20, label %115, label %21

21:                                               ; preds = %18
  %22 = load %"class.blink::Node"* (%"class.blink::AXObject"*)**, %"class.blink::Node"* (%"class.blink::AXObject"*)*** %4, align 8
  %23 = getelementptr inbounds %"class.blink::Node"* (%"class.blink::AXObject"*)*, %"class.blink::Node"* (%"class.blink::AXObject"*)** %22, i64 124
  %24 = load %"class.blink::Node"* (%"class.blink::AXObject"*)*, %"class.blink::Node"* (%"class.blink::AXObject"*)** %23, align 8
  %25 = tail call %"class.blink::Node"* %24(%"class.blink::AXObject"* %1) #13
  %26 = tail call zeroext i1 @_ZN5blink8AXObject25CanComputeAsNaturalParentEPNS_4NodeE(%"class.blink::Node"* %25) #13
  %27 = xor i1 %26, true
  %28 = icmp eq %"class.blink::AXObject"* %2, null
  %29 = or i1 %28, %27
  br i1 %29, label %115, label %30

30:                                               ; preds = %21
  %31 = bitcast %"class.blink::AXObject"* %2 to %"class.blink::Node"* (%"class.blink::AXObject"*)***
  %32 = load %"class.blink::Node"* (%"class.blink::AXObject"*)**, %"class.blink::Node"* (%"class.blink::AXObject"*)*** %31, align 8
  %33 = getelementptr inbounds %"class.blink::Node"* (%"class.blink::AXObject"*)*, %"class.blink::Node"* (%"class.blink::AXObject"*)** %32, i64 124
  %34 = load %"class.blink::Node"* (%"class.blink::AXObject"*)*, %"class.blink::Node"* (%"class.blink::AXObject"*)** %33, align 8
  %35 = tail call %"class.blink::Node"* %34(%"class.blink::AXObject"* nonnull %2) #13
  %36 = icmp eq %"class.blink::Node"* %35, null
  br i1 %36, label %115, label %37

37:                                               ; preds = %30
  %38 = bitcast %"class.blink::AXObject"* %2 to i1 (%"class.blink::AXObject"*)***
  %39 = load i1 (%"class.blink::AXObject"*)**, i1 (%"class.blink::AXObject"*)*** %38, align 8
  %40 = getelementptr inbounds i1 (%"class.blink::AXObject"*)*, i1 (%"class.blink::AXObject"*)** %39, i64 8
  %41 = load i1 (%"class.blink::AXObject"*)*, i1 (%"class.blink::AXObject"*)** %40, align 8
  %42 = tail call zeroext i1 %41(%"class.blink::AXObject"* nonnull %2) #13
  br i1 %42, label %115, label %43

43:                                               ; preds = %37
  %44 = getelementptr inbounds %"class.blink::AXObject", %"class.blink::AXObject"* %2, i64 0, i32 1
  %45 = load i32, i32* %44, align 8
  %46 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 4, i32 0, i32 0
  %47 = load %"struct.WTF::KeyValuePair.255"*, %"struct.WTF::KeyValuePair.255"** %46, align 8
  %48 = icmp eq %"struct.WTF::KeyValuePair.255"* %47, null
  br i1 %48, label %107, label %49

49:                                               ; preds = %43
  %50 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 4, i32 0, i32 1
  %51 = load i32, i32* %50, align 8
  %52 = add i32 %51, -1
  %53 = zext i32 %52 to i64
  %54 = shl i32 %45, 15
  %55 = xor i32 %54, -1
  %56 = add i32 %45, %55
  %57 = lshr i32 %56, 10
  %58 = xor i32 %57, %56
  %59 = mul i32 %58, 9
  %60 = lshr i32 %59, 6
  %61 = xor i32 %60, %59
  %62 = shl i32 %61, 11
  %63 = xor i32 %62, -1
  %64 = add i32 %61, %63
  %65 = lshr i32 %64, 16
  %66 = xor i32 %65, %64
  %67 = and i32 %52, %66
  %68 = zext i32 %67 to i64
  %69 = getelementptr inbounds %"struct.WTF::KeyValuePair.255", %"struct.WTF::KeyValuePair.255"* %47, i64 %68
  %70 = getelementptr inbounds %"struct.WTF::KeyValuePair.255", %"struct.WTF::KeyValuePair.255"* %69, i64 0, i32 0
  %71 = load i32, i32* %70, align 4
  %72 = icmp eq i32 %71, %45
  br i1 %72, label %101, label %73

73:                                               ; preds = %49
  %74 = xor i32 %66, -1
  %75 = lshr i32 %64, 23
  %76 = add i32 %75, %74
  %77 = shl i32 %76, 12
  %78 = xor i32 %77, %76
  %79 = lshr i32 %78, 7
  %80 = xor i32 %79, %78
  %81 = shl i32 %80, 2
  %82 = xor i32 %81, %80
  %83 = lshr i32 %82, 20
  %84 = xor i32 %83, %82
  %85 = or i32 %84, 1
  %86 = zext i32 %85 to i64
  br label %87

87:                                               ; preds = %92, %73
  %88 = phi i32 [ %71, %73 ], [ %99, %92 ]
  %89 = phi i64 [ %68, %73 ], [ %96, %92 ]
  %90 = phi i64 [ 0, %73 ], [ %94, %92 ]
  %91 = icmp eq i32 %88, 0
  br i1 %91, label %107, label %92

92:                                               ; preds = %87
  %93 = icmp eq i64 %90, 0
  %94 = select i1 %93, i64 %86, i64 %90
  %95 = add i64 %94, %89
  %96 = and i64 %95, %53
  %97 = getelementptr inbounds %"struct.WTF::KeyValuePair.255", %"struct.WTF::KeyValuePair.255"* %47, i64 %96
  %98 = getelementptr inbounds %"struct.WTF::KeyValuePair.255", %"struct.WTF::KeyValuePair.255"* %97, i64 0, i32 0
  %99 = load i32, i32* %98, align 4
  %100 = icmp eq i32 %99, %45
  br i1 %100, label %101, label %87

101:                                              ; preds = %92, %49
  %102 = phi %"struct.WTF::KeyValuePair.255"* [ %69, %49 ], [ %97, %92 ]
  %103 = icmp eq %"struct.WTF::KeyValuePair.255"* %102, null
  br i1 %103, label %107, label %104

104:                                              ; preds = %101
  %105 = tail call %"class.blink::AXObject"* @_ZNK5blink15AXRelationCache18GetAriaOwnedParentEPKNS_8AXObjectE(%"class.blink::AXRelationCache"* %0, %"class.blink::AXObject"* %2)
  %106 = icmp eq %"class.blink::AXObject"* %105, %1
  br i1 %106, label %107, label %115

107:                                              ; preds = %87, %101, %43, %104
  %108 = icmp eq %"class.blink::AXObject"* %1, null
  br i1 %108, label %115, label %109

109:                                              ; preds = %107, %112
  %110 = phi %"class.blink::AXObject"* [ %113, %112 ], [ %1, %107 ]
  %111 = icmp eq %"class.blink::AXObject"* %110, %2
  br i1 %111, label %115, label %112

112:                                              ; preds = %109
  %113 = tail call %"class.blink::AXObject"* @_ZNK5blink8AXObject12ParentObjectEv(%"class.blink::AXObject"* nonnull %110) #13
  %114 = icmp eq %"class.blink::AXObject"* %113, null
  br i1 %114, label %115, label %109

115:                                              ; preds = %112, %109, %37, %21, %107, %30, %18, %16, %10, %3, %104
  %116 = phi i1 [ false, %37 ], [ false, %21 ], [ false, %104 ], [ false, %3 ], [ false, %10 ], [ false, %16 ], [ false, %18 ], [ false, %30 ], [ true, %107 ], [ true, %112 ], [ false, %109 ]
  ret i1 %116
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink15AXRelationCache12IsValidOwnerEPNS_8AXObjectE(%"class.blink::AXObject"*) local_unnamed_addr #0 align 2 {
  %2 = bitcast %"class.blink::AXObject"* %0 to %"class.blink::Node"* (%"class.blink::AXObject"*)***
  %3 = load %"class.blink::Node"* (%"class.blink::AXObject"*)**, %"class.blink::Node"* (%"class.blink::AXObject"*)*** %2, align 8
  %4 = getelementptr inbounds %"class.blink::Node"* (%"class.blink::AXObject"*)*, %"class.blink::Node"* (%"class.blink::AXObject"*)** %3, i64 124
  %5 = load %"class.blink::Node"* (%"class.blink::AXObject"*)*, %"class.blink::Node"* (%"class.blink::AXObject"*)** %4, align 8
  %6 = tail call %"class.blink::Node"* %5(%"class.blink::AXObject"* %0) #13
  %7 = icmp eq %"class.blink::Node"* %6, null
  br i1 %7, label %25, label %8

8:                                                ; preds = %1
  %9 = bitcast %"class.blink::AXObject"* %0 to i1 (%"class.blink::AXObject"*)***
  %10 = load i1 (%"class.blink::AXObject"*)**, i1 (%"class.blink::AXObject"*)*** %9, align 8
  %11 = getelementptr inbounds i1 (%"class.blink::AXObject"*)*, i1 (%"class.blink::AXObject"*)** %10, i64 119
  %12 = load i1 (%"class.blink::AXObject"*)*, i1 (%"class.blink::AXObject"*)** %11, align 8
  %13 = tail call zeroext i1 %12(%"class.blink::AXObject"* %0) #13
  br i1 %13, label %14, label %25

14:                                               ; preds = %8
  %15 = tail call zeroext i1 @_ZNK5blink8AXObject11IsTextFieldEv(%"class.blink::AXObject"* %0) #13
  br i1 %15, label %25, label %16

16:                                               ; preds = %14
  %17 = tail call i32 @_ZNK5blink8AXObject9RoleValueEv(%"class.blink::AXObject"* %0) #13
  %18 = icmp eq i32 %17, 100
  br i1 %18, label %25, label %19

19:                                               ; preds = %16
  %20 = load %"class.blink::Node"* (%"class.blink::AXObject"*)**, %"class.blink::Node"* (%"class.blink::AXObject"*)*** %2, align 8
  %21 = getelementptr inbounds %"class.blink::Node"* (%"class.blink::AXObject"*)*, %"class.blink::Node"* (%"class.blink::AXObject"*)** %20, i64 124
  %22 = load %"class.blink::Node"* (%"class.blink::AXObject"*)*, %"class.blink::Node"* (%"class.blink::AXObject"*)** %21, align 8
  %23 = tail call %"class.blink::Node"* %22(%"class.blink::AXObject"* %0) #13
  %24 = tail call zeroext i1 @_ZN5blink8AXObject25CanComputeAsNaturalParentEPNS_4NodeE(%"class.blink::Node"* %23) #13
  br label %25

25:                                               ; preds = %19, %16, %14, %8, %1
  %26 = phi i1 [ false, %1 ], [ false, %8 ], [ false, %14 ], [ false, %16 ], [ %24, %19 ]
  ret i1 %26
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink15AXRelationCache17IsValidOwnedChildEPNS_8AXObjectE(%"class.blink::AXObject"*) local_unnamed_addr #0 align 2 {
  %2 = icmp eq %"class.blink::AXObject"* %0, null
  br i1 %2, label %17, label %3

3:                                                ; preds = %1
  %4 = bitcast %"class.blink::AXObject"* %0 to %"class.blink::Node"* (%"class.blink::AXObject"*)***
  %5 = load %"class.blink::Node"* (%"class.blink::AXObject"*)**, %"class.blink::Node"* (%"class.blink::AXObject"*)*** %4, align 8
  %6 = getelementptr inbounds %"class.blink::Node"* (%"class.blink::AXObject"*)*, %"class.blink::Node"* (%"class.blink::AXObject"*)** %5, i64 124
  %7 = load %"class.blink::Node"* (%"class.blink::AXObject"*)*, %"class.blink::Node"* (%"class.blink::AXObject"*)** %6, align 8
  %8 = tail call %"class.blink::Node"* %7(%"class.blink::AXObject"* nonnull %0) #13
  %9 = icmp eq %"class.blink::Node"* %8, null
  br i1 %9, label %17, label %10

10:                                               ; preds = %3
  %11 = bitcast %"class.blink::AXObject"* %0 to i1 (%"class.blink::AXObject"*)***
  %12 = load i1 (%"class.blink::AXObject"*)**, i1 (%"class.blink::AXObject"*)*** %11, align 8
  %13 = getelementptr inbounds i1 (%"class.blink::AXObject"*)*, i1 (%"class.blink::AXObject"*)** %12, i64 8
  %14 = load i1 (%"class.blink::AXObject"*)*, i1 (%"class.blink::AXObject"*)** %13, align 8
  %15 = tail call zeroext i1 %14(%"class.blink::AXObject"* nonnull %0) #13
  %16 = xor i1 %15, true
  br label %17

17:                                               ; preds = %10, %3, %1
  %18 = phi i1 [ false, %1 ], [ false, %3 ], [ %16, %10 ]
  ret i1 %18
}

declare zeroext i1 @_ZNK5blink8AXObject11IsTextFieldEv(%"class.blink::AXObject"*) local_unnamed_addr #4

declare i32 @_ZNK5blink8AXObject9RoleValueEv(%"class.blink::AXObject"*) local_unnamed_addr #4

declare zeroext i1 @_ZN5blink8AXObject25CanComputeAsNaturalParentEPNS_4NodeE(%"class.blink::Node"*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15AXRelationCache18UnmapOwnedChildrenEPKNS_8AXObjectEN3WTF6VectorIjLj0ENS4_18PartitionAllocatorEEE(%"class.blink::AXRelationCache"*, %"class.blink::AXObject"* readnone, %"class.WTF::Vector.764"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %4 = alloca i32, align 4
  %5 = getelementptr inbounds %"class.WTF::Vector.764", %"class.WTF::Vector.764"* %2, i64 0, i32 0, i32 0, i32 0
  %6 = load i32*, i32** %5, align 8
  %7 = getelementptr inbounds %"class.WTF::Vector.764", %"class.WTF::Vector.764"* %2, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds i32, i32* %6, i64 %9
  %11 = icmp eq i32 %8, 0
  br i1 %11, label %16, label %12

12:                                               ; preds = %3
  %13 = bitcast i32* %4 to i8*
  %14 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 2, i32 0, i32 0
  %15 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 4
  br label %17

16:                                               ; preds = %97, %3
  ret void

17:                                               ; preds = %12, %97
  %18 = phi i32* [ %6, %12 ], [ %98, %97 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13) #13
  store i32 -1431655766, i32* %4, align 4
  %19 = load i32, i32* %18, align 4
  store i32 %19, i32* %4, align 4
  %20 = load %"class.blink::AXObjectCacheImpl"*, %"class.blink::AXObjectCacheImpl"** %14, align 8
  %21 = getelementptr inbounds %"class.blink::AXObjectCacheImpl", %"class.blink::AXObjectCacheImpl"* %20, i64 0, i32 5, i32 0, i32 0, i32 0
  %22 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %21, align 8
  %23 = icmp eq %"struct.WTF::KeyValuePair"* %22, null
  br i1 %23, label %96, label %24

24:                                               ; preds = %17
  %25 = getelementptr inbounds %"class.blink::AXObjectCacheImpl", %"class.blink::AXObjectCacheImpl"* %20, i64 0, i32 5, i32 0, i32 0, i32 1
  %26 = load i32, i32* %25, align 8
  %27 = add i32 %26, -1
  %28 = zext i32 %27 to i64
  %29 = shl i32 %19, 15
  %30 = xor i32 %29, -1
  %31 = add i32 %19, %30
  %32 = lshr i32 %31, 10
  %33 = xor i32 %32, %31
  %34 = mul i32 %33, 9
  %35 = lshr i32 %34, 6
  %36 = xor i32 %35, %34
  %37 = shl i32 %36, 11
  %38 = xor i32 %37, -1
  %39 = add i32 %36, %38
  %40 = lshr i32 %39, 16
  %41 = xor i32 %40, %39
  %42 = and i32 %27, %41
  %43 = zext i32 %42 to i64
  %44 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %22, i64 %43
  %45 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %44, i64 0, i32 0
  %46 = load i32, i32* %45, align 4
  %47 = icmp eq i32 %46, %19
  br i1 %47, label %76, label %48

48:                                               ; preds = %24
  %49 = xor i32 %41, -1
  %50 = lshr i32 %39, 23
  %51 = add i32 %50, %49
  %52 = shl i32 %51, 12
  %53 = xor i32 %52, %51
  %54 = lshr i32 %53, 7
  %55 = xor i32 %54, %53
  %56 = shl i32 %55, 2
  %57 = xor i32 %56, %55
  %58 = lshr i32 %57, 20
  %59 = xor i32 %58, %57
  %60 = or i32 %59, 1
  %61 = zext i32 %60 to i64
  br label %62

62:                                               ; preds = %67, %48
  %63 = phi i32 [ %46, %48 ], [ %74, %67 ]
  %64 = phi i64 [ %43, %48 ], [ %71, %67 ]
  %65 = phi i64 [ 0, %48 ], [ %69, %67 ]
  %66 = icmp eq i32 %63, 0
  br i1 %66, label %96, label %67

67:                                               ; preds = %62
  %68 = icmp eq i64 %65, 0
  %69 = select i1 %68, i64 %61, i64 %65
  %70 = add i64 %69, %64
  %71 = and i64 %70, %28
  %72 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %22, i64 %71
  %73 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %72, i64 0, i32 0
  %74 = load i32, i32* %73, align 4
  %75 = icmp eq i32 %74, %19
  br i1 %75, label %76, label %62

76:                                               ; preds = %67, %24
  %77 = phi %"struct.WTF::KeyValuePair"* [ %44, %24 ], [ %72, %67 ]
  %78 = icmp eq %"struct.WTF::KeyValuePair"* %77, null
  br i1 %78, label %96, label %79

79:                                               ; preds = %76
  %80 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %77, i64 0, i32 1, i32 0, i32 0
  %81 = load %"class.blink::AXObject"*, %"class.blink::AXObject"** %80, align 8
  %82 = icmp eq %"class.blink::AXObject"* %81, null
  br i1 %82, label %96, label %83

83:                                               ; preds = %79
  %84 = call %"class.blink::AXObject"* @_ZNK5blink15AXRelationCache18GetAriaOwnedParentEPKNS_8AXObjectE(%"class.blink::AXRelationCache"* %0, %"class.blink::AXObject"* nonnull %81)
  %85 = icmp eq %"class.blink::AXObject"* %84, %1
  br i1 %85, label %86, label %97

86:                                               ; preds = %83
  call void @_ZN3WTF7HashMapIjjNS_7IntHashIjEENS_10HashTraitsIjEES4_NS_18PartitionAllocatorEE5eraseERKj(%"class.WTF::HashMap.251"* %15, i32* nonnull dereferenceable(4) %4)
  %87 = getelementptr inbounds %"class.blink::AXObject", %"class.blink::AXObject"* %81, i64 0, i32 2
  %88 = bitcast %"class.blink::Member.380"* %87 to i64*
  store atomic i64 0, i64* %88 monotonic, align 8
  %89 = call %"class.blink::AXObject"* @_ZNK5blink8AXObject12ParentObjectEv(%"class.blink::AXObject"* nonnull %81) #13
  %90 = icmp eq %"class.blink::AXObject"* %89, null
  br i1 %90, label %97, label %91

91:                                               ; preds = %86
  %92 = bitcast %"class.blink::AXObject"* %89 to void (%"class.blink::AXObject"*)***
  %93 = load void (%"class.blink::AXObject"*)**, void (%"class.blink::AXObject"*)*** %92, align 8
  %94 = getelementptr inbounds void (%"class.blink::AXObject"*)*, void (%"class.blink::AXObject"*)** %93, i64 154
  %95 = load void (%"class.blink::AXObject"*)*, void (%"class.blink::AXObject"*)** %94, align 8
  call void %95(%"class.blink::AXObject"* nonnull %89) #13
  br label %97

96:                                               ; preds = %62, %79, %17, %76
  call void @_ZN3WTF7HashMapIjjNS_7IntHashIjEENS_10HashTraitsIjEES4_NS_18PartitionAllocatorEE5eraseERKj(%"class.WTF::HashMap.251"* %15, i32* nonnull dereferenceable(4) %4)
  br label %97

97:                                               ; preds = %83, %96, %86, %91
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #13
  %98 = getelementptr inbounds i32, i32* %18, i64 1
  %99 = icmp eq i32* %98, %10
  br i1 %99, label %16, label %17
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF7HashMapIjjNS_7IntHashIjEENS_10HashTraitsIjEES4_NS_18PartitionAllocatorEE5eraseERKj(%"class.WTF::HashMap.251"*, i32* dereferenceable(4)) local_unnamed_addr #5 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::HashMap.251", %"class.WTF::HashMap.251"* %0, i64 0, i32 0, i32 0
  %4 = load %"struct.WTF::KeyValuePair.255"*, %"struct.WTF::KeyValuePair.255"** %3, align 8
  %5 = icmp eq %"struct.WTF::KeyValuePair.255"* %4, null
  %6 = getelementptr inbounds %"class.WTF::HashMap.251", %"class.WTF::HashMap.251"* %0, i64 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  br i1 %5, label %64, label %8

8:                                                ; preds = %2
  %9 = add i32 %7, -1
  %10 = zext i32 %9 to i64
  %11 = load i32, i32* %1, align 4
  %12 = shl i32 %11, 15
  %13 = xor i32 %12, -1
  %14 = add i32 %11, %13
  %15 = lshr i32 %14, 10
  %16 = xor i32 %15, %14
  %17 = mul i32 %16, 9
  %18 = lshr i32 %17, 6
  %19 = xor i32 %18, %17
  %20 = shl i32 %19, 11
  %21 = xor i32 %20, -1
  %22 = add i32 %19, %21
  %23 = lshr i32 %22, 16
  %24 = xor i32 %23, %22
  %25 = and i32 %24, %9
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds %"struct.WTF::KeyValuePair.255", %"struct.WTF::KeyValuePair.255"* %4, i64 %26
  %28 = getelementptr inbounds %"struct.WTF::KeyValuePair.255", %"struct.WTF::KeyValuePair.255"* %27, i64 0, i32 0
  %29 = load i32, i32* %28, align 4
  %30 = icmp eq i32 %29, %11
  br i1 %30, label %59, label %31

31:                                               ; preds = %8
  %32 = xor i32 %24, -1
  %33 = lshr i32 %22, 23
  %34 = add i32 %33, %32
  %35 = shl i32 %34, 12
  %36 = xor i32 %35, %34
  %37 = lshr i32 %36, 7
  %38 = xor i32 %37, %36
  %39 = shl i32 %38, 2
  %40 = xor i32 %39, %38
  %41 = lshr i32 %40, 20
  %42 = xor i32 %41, %40
  %43 = or i32 %42, 1
  %44 = zext i32 %43 to i64
  br label %45

45:                                               ; preds = %50, %31
  %46 = phi i32 [ %29, %31 ], [ %57, %50 ]
  %47 = phi i64 [ %26, %31 ], [ %54, %50 ]
  %48 = phi i64 [ 0, %31 ], [ %52, %50 ]
  %49 = icmp eq i32 %46, 0
  br i1 %49, label %64, label %50

50:                                               ; preds = %45
  %51 = icmp eq i64 %48, 0
  %52 = select i1 %51, i64 %44, i64 %48
  %53 = add i64 %52, %47
  %54 = and i64 %53, %10
  %55 = getelementptr inbounds %"struct.WTF::KeyValuePair.255", %"struct.WTF::KeyValuePair.255"* %4, i64 %54
  %56 = getelementptr inbounds %"struct.WTF::KeyValuePair.255", %"struct.WTF::KeyValuePair.255"* %55, i64 0, i32 0
  %57 = load i32, i32* %56, align 4
  %58 = icmp eq i32 %57, %11
  br i1 %58, label %59, label %45

59:                                               ; preds = %50, %8
  %60 = phi %"struct.WTF::KeyValuePair.255"* [ %27, %8 ], [ %55, %50 ]
  %61 = icmp eq %"struct.WTF::KeyValuePair.255"* %60, null
  br i1 %61, label %64, label %62

62:                                               ; preds = %59
  %63 = zext i32 %7 to i64
  br label %67

64:                                               ; preds = %45, %59, %2
  %65 = zext i32 %7 to i64
  %66 = getelementptr inbounds %"struct.WTF::KeyValuePair.255", %"struct.WTF::KeyValuePair.255"* %4, i64 %65
  br label %67

67:                                               ; preds = %62, %64
  %68 = phi i64 [ %63, %62 ], [ %65, %64 ]
  %69 = phi %"struct.WTF::KeyValuePair.255"* [ %60, %62 ], [ %66, %64 ]
  %70 = getelementptr inbounds %"class.WTF::HashMap.251", %"class.WTF::HashMap.251"* %0, i64 0, i32 0
  %71 = getelementptr inbounds %"struct.WTF::KeyValuePair.255", %"struct.WTF::KeyValuePair.255"* %4, i64 %68
  %72 = icmp eq %"struct.WTF::KeyValuePair.255"* %71, %69
  br i1 %72, label %96, label %73

73:                                               ; preds = %67
  %74 = getelementptr inbounds %"struct.WTF::KeyValuePair.255", %"struct.WTF::KeyValuePair.255"* %69, i64 0, i32 0
  store i32 -1, i32* %74, align 4
  %75 = getelementptr inbounds %"class.WTF::HashMap.251", %"class.WTF::HashMap.251"* %0, i64 0, i32 0, i32 3
  %76 = load i32, i32* %75, align 8
  %77 = add i32 %76, 1
  %78 = and i32 %77, 2147483647
  %79 = and i32 %76, -2147483648
  %80 = or i32 %78, %79
  store i32 %80, i32* %75, align 8
  %81 = getelementptr inbounds %"class.WTF::HashMap.251", %"class.WTF::HashMap.251"* %0, i64 0, i32 0, i32 2
  %82 = load i32, i32* %81, align 4
  %83 = add i32 %82, -1
  store i32 %83, i32* %81, align 4
  %84 = mul i32 %83, 6
  %85 = load i32, i32* %6, align 8
  %86 = icmp ult i32 %84, %85
  %87 = icmp ugt i32 %85, 8
  %88 = and i1 %86, %87
  br i1 %88, label %89, label %96

89:                                               ; preds = %73
  %90 = lshr i32 %85, 1
  %91 = zext i32 %90 to i64
  %92 = shl nuw nsw i64 %91, 3
  %93 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %92, i8* getelementptr inbounds ([93 x i8], [93 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairIjjEEEEPKcv, i64 0, i64 0)) #13
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %93, i8 0, i64 %92, i1 false) #13
  %94 = bitcast i8* %93 to %"struct.WTF::KeyValuePair.255"*
  %95 = tail call %"struct.WTF::KeyValuePair.255"* @_ZN3WTF9HashTableIjNS_12KeyValuePairIjjEENS_24KeyValuePairKeyExtractorENS_7IntHashIjEENS_18HashMapValueTraitsINS_10HashTraitsIjEES8_EES8_NS_18PartitionAllocatorEE8RehashToEPS2_jSC_(%"class.WTF::HashTable.252"* %70, %"struct.WTF::KeyValuePair.255"* %94, i32 %90, %"struct.WTF::KeyValuePair.255"* null) #13
  br label %96

96:                                               ; preds = %67, %73, %89
  ret void
}

declare %"class.blink::AXObject"* @_ZNK5blink8AXObject12ParentObjectEv(%"class.blink::AXObject"*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15AXRelationCache15ChildrenChangedEPNS_8AXObjectE(%"class.blink::AXRelationCache"* nocapture readnone, %"class.blink::AXObject"*) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.blink::AXObject"* %1 to void (%"class.blink::AXObject"*)***
  %4 = load void (%"class.blink::AXObject"*)**, void (%"class.blink::AXObject"*)*** %3, align 8
  %5 = getelementptr inbounds void (%"class.blink::AXObject"*)*, void (%"class.blink::AXObject"*)** %4, i64 154
  %6 = load void (%"class.blink::AXObject"*)*, void (%"class.blink::AXObject"*)** %5, align 8
  tail call void %6(%"class.blink::AXObject"* %1) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15AXRelationCache16MapOwnedChildrenEPKNS_8AXObjectEN3WTF6VectorIjLj0ENS4_18PartitionAllocatorEEE(%"class.blink::AXRelationCache"*, %"class.blink::AXObject"*, %"class.WTF::Vector.764"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = getelementptr inbounds %"class.WTF::Vector.764", %"class.WTF::Vector.764"* %2, i64 0, i32 0, i32 0, i32 0
  %7 = load i32*, i32** %6, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector.764", %"class.WTF::Vector.764"* %2, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds i32, i32* %7, i64 %10
  %12 = icmp eq i32 %9, 0
  br i1 %12, label %19, label %13

13:                                               ; preds = %3
  %14 = bitcast i32* %4 to i8*
  %15 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 2, i32 0, i32 0
  %16 = bitcast i32* %5 to i8*
  %17 = getelementptr inbounds %"class.blink::AXObject", %"class.blink::AXObject"* %1, i64 0, i32 1
  %18 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 4, i32 0
  br label %20

19:                                               ; preds = %109, %3
  ret void

20:                                               ; preds = %13, %109
  %21 = phi i32* [ %7, %13 ], [ %110, %109 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #13
  store i32 -1431655766, i32* %4, align 4
  %22 = load i32, i32* %21, align 4
  store i32 %22, i32* %4, align 4
  %23 = load %"class.blink::AXObjectCacheImpl"*, %"class.blink::AXObjectCacheImpl"** %15, align 8
  %24 = getelementptr inbounds %"class.blink::AXObjectCacheImpl", %"class.blink::AXObjectCacheImpl"* %23, i64 0, i32 5, i32 0, i32 0, i32 0
  %25 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %24, align 8
  %26 = icmp eq %"struct.WTF::KeyValuePair"* %25, null
  br i1 %26, label %85, label %27

27:                                               ; preds = %20
  %28 = getelementptr inbounds %"class.blink::AXObjectCacheImpl", %"class.blink::AXObjectCacheImpl"* %23, i64 0, i32 5, i32 0, i32 0, i32 1
  %29 = load i32, i32* %28, align 8
  %30 = add i32 %29, -1
  %31 = zext i32 %30 to i64
  %32 = shl i32 %22, 15
  %33 = xor i32 %32, -1
  %34 = add i32 %22, %33
  %35 = lshr i32 %34, 10
  %36 = xor i32 %35, %34
  %37 = mul i32 %36, 9
  %38 = lshr i32 %37, 6
  %39 = xor i32 %38, %37
  %40 = shl i32 %39, 11
  %41 = xor i32 %40, -1
  %42 = add i32 %39, %41
  %43 = lshr i32 %42, 16
  %44 = xor i32 %43, %42
  %45 = and i32 %30, %44
  %46 = zext i32 %45 to i64
  %47 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %25, i64 %46
  %48 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %47, i64 0, i32 0
  %49 = load i32, i32* %48, align 4
  %50 = icmp eq i32 %49, %22
  br i1 %50, label %79, label %51

51:                                               ; preds = %27
  %52 = xor i32 %44, -1
  %53 = lshr i32 %42, 23
  %54 = add i32 %53, %52
  %55 = shl i32 %54, 12
  %56 = xor i32 %55, %54
  %57 = lshr i32 %56, 7
  %58 = xor i32 %57, %56
  %59 = shl i32 %58, 2
  %60 = xor i32 %59, %58
  %61 = lshr i32 %60, 20
  %62 = xor i32 %61, %60
  %63 = or i32 %62, 1
  %64 = zext i32 %63 to i64
  br label %65

65:                                               ; preds = %70, %51
  %66 = phi i32 [ %49, %51 ], [ %77, %70 ]
  %67 = phi i64 [ %46, %51 ], [ %74, %70 ]
  %68 = phi i64 [ 0, %51 ], [ %72, %70 ]
  %69 = icmp eq i32 %66, 0
  br i1 %69, label %85, label %70

70:                                               ; preds = %65
  %71 = icmp eq i64 %68, 0
  %72 = select i1 %71, i64 %64, i64 %68
  %73 = add i64 %72, %67
  %74 = and i64 %73, %31
  %75 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %25, i64 %74
  %76 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %75, i64 0, i32 0
  %77 = load i32, i32* %76, align 4
  %78 = icmp eq i32 %77, %22
  br i1 %78, label %79, label %65

79:                                               ; preds = %70, %27
  %80 = phi %"struct.WTF::KeyValuePair"* [ %47, %27 ], [ %75, %70 ]
  %81 = icmp eq %"struct.WTF::KeyValuePair"* %80, null
  br i1 %81, label %85, label %82

82:                                               ; preds = %79
  %83 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %80, i64 0, i32 1, i32 0, i32 0
  %84 = load %"class.blink::AXObject"*, %"class.blink::AXObject"** %83, align 8
  br label %85

85:                                               ; preds = %65, %20, %79, %82
  %86 = phi %"class.blink::AXObject"* [ %84, %82 ], [ null, %79 ], [ null, %20 ], [ null, %65 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16) #13
  %87 = load i32, i32* %17, align 8
  store i32 %87, i32* %5, align 4
  %88 = call { %"struct.WTF::KeyValuePair.255"*, i8 } @_ZN3WTF9HashTableIjNS_12KeyValuePairIjjEENS_24KeyValuePairKeyExtractorENS_7IntHashIjEENS_18HashMapValueTraitsINS_10HashTraitsIjEES8_EES8_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorIS9_S5_SA_EERjjEENS_18HashTableAddResultISB_S2_EEOT0_OT1_(%"class.WTF::HashTable.252"* %18, i32* nonnull dereferenceable(4) %4, i32* nonnull dereferenceable(4) %5) #13
  %89 = extractvalue { %"struct.WTF::KeyValuePair.255"*, i8 } %88, 1
  %90 = and i8 %89, 1
  %91 = icmp eq i8 %90, 0
  br i1 %91, label %92, label %96

92:                                               ; preds = %85
  %93 = extractvalue { %"struct.WTF::KeyValuePair.255"*, i8 } %88, 0
  %94 = getelementptr inbounds %"struct.WTF::KeyValuePair.255", %"struct.WTF::KeyValuePair.255"* %93, i64 0, i32 1
  %95 = load i32, i32* %5, align 4
  store i32 %95, i32* %94, align 4
  br label %96

96:                                               ; preds = %85, %92
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16) #13
  %97 = getelementptr inbounds %"class.blink::AXObject", %"class.blink::AXObject"* %86, i64 0, i32 2, i32 0, i32 0
  %98 = load %"class.blink::AXObject"*, %"class.blink::AXObject"** %97, align 8
  %99 = icmp eq %"class.blink::AXObject"* %98, %1
  br i1 %99, label %109, label %100

100:                                              ; preds = %96
  %101 = getelementptr inbounds %"class.blink::AXObject", %"class.blink::AXObject"* %86, i64 0, i32 2
  %102 = bitcast %"class.blink::Member.380"* %101 to i64*
  store atomic i64 0, i64* %102 monotonic, align 8
  call void @_ZNK5blink8AXObject9SetParentEPS0_(%"class.blink::AXObject"* %86, %"class.blink::AXObject"* %1) #13
  %103 = icmp eq %"class.blink::AXObject"* %98, null
  br i1 %103, label %109, label %104

104:                                              ; preds = %100
  %105 = bitcast %"class.blink::AXObject"* %98 to void (%"class.blink::AXObject"*)***
  %106 = load void (%"class.blink::AXObject"*)**, void (%"class.blink::AXObject"*)*** %105, align 8
  %107 = getelementptr inbounds void (%"class.blink::AXObject"*)*, void (%"class.blink::AXObject"*)** %106, i64 154
  %108 = load void (%"class.blink::AXObject"*)*, void (%"class.blink::AXObject"*)** %107, align 8
  call void %108(%"class.blink::AXObject"* nonnull %98) #13
  br label %109

109:                                              ; preds = %100, %96, %104
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #13
  %110 = getelementptr inbounds i32, i32* %21, i64 1
  %111 = icmp eq i32* %110, %11
  br i1 %111, label %19, label %20
}

declare void @_ZNK5blink8AXObject9SetParentEPS0_(%"class.blink::AXObject"*, %"class.blink::AXObject"*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15AXRelationCache55UpdateAriaOwnsFromAttrAssociatedElementsWithCleanLayoutEPNS_8AXObjectERKNS_10HeapVectorINS_6MemberINS_7ElementEEELj0EEERNS3_INS4_IS1_EELj0EEEb(%"class.blink::AXRelationCache"*, %"class.blink::AXObject"*, %"class.blink::HeapVector.321"* nocapture readonly dereferenceable(16), %"class.blink::HeapVector.381"* dereferenceable(16), i1 zeroext) local_unnamed_addr #0 align 2 {
  %6 = alloca i32, align 4
  %7 = alloca %"class.WTF::HashSet", align 8
  %8 = alloca %"class.WTF::Vector.758", align 8
  %9 = alloca %"class.blink::AXObject"*, align 8
  %10 = bitcast %"class.WTF::Vector.758"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #13
  %11 = getelementptr inbounds %"class.WTF::Vector.758", %"class.WTF::Vector.758"* %8, i64 0, i32 0, i32 0, i32 0
  %12 = getelementptr inbounds %"class.WTF::Vector.758", %"class.WTF::Vector.758"* %8, i64 0, i32 0, i32 0, i32 1
  %13 = getelementptr inbounds %"class.WTF::Vector.758", %"class.WTF::Vector.758"* %8, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 0, i64 16, i1 false) #13
  %14 = getelementptr inbounds %"class.blink::HeapVector.321", %"class.blink::HeapVector.321"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %15 = load %"class.blink::Member.302"*, %"class.blink::Member.302"** %14, align 8
  %16 = getelementptr inbounds %"class.blink::HeapVector.321", %"class.blink::HeapVector.321"* %2, i64 0, i32 0, i32 0, i32 0, i32 2
  %17 = load i32, i32* %16, align 4
  %18 = zext i32 %17 to i64
  %19 = getelementptr inbounds %"class.blink::Member.302", %"class.blink::Member.302"* %15, i64 %18
  %20 = icmp eq i32 %17, 0
  br i1 %20, label %35, label %21

21:                                               ; preds = %5
  %22 = bitcast %"class.blink::AXObject"** %9 to i8*
  %23 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 2, i32 0, i32 0
  %24 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names7kIdAttrE, align 8
  %25 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %24, i64 0, i32 0, i32 0
  %26 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %27 = getelementptr inbounds %"class.blink::HeapVector.381", %"class.blink::HeapVector.381"* %3, i64 0, i32 0, i32 0, i32 0, i32 2
  %28 = getelementptr inbounds %"class.blink::HeapVector.381", %"class.blink::HeapVector.381"* %3, i64 0, i32 0, i32 0, i32 0, i32 1
  %29 = getelementptr inbounds %"class.blink::HeapVector.381", %"class.blink::HeapVector.381"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %30 = bitcast %"class.blink::AXObject"** %9 to i64*
  %31 = getelementptr inbounds %"class.blink::HeapVector.381", %"class.blink::HeapVector.381"* %3, i64 0, i32 0
  br label %98

32:                                               ; preds = %281
  %33 = load %"class.WTF::String"*, %"class.WTF::String"** %11, align 8
  %34 = load i32, i32* %13, align 4
  br label %35

35:                                               ; preds = %32, %5
  %36 = phi i32 [ %34, %32 ], [ 0, %5 ]
  %37 = phi %"class.WTF::String"* [ %33, %32 ], [ null, %5 ]
  %38 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %38) #13
  %39 = getelementptr inbounds %"class.blink::AXObject", %"class.blink::AXObject"* %1, i64 0, i32 1
  %40 = load i32, i32* %39, align 8
  store i32 %40, i32* %6, align 4
  %41 = zext i32 %36 to i64
  %42 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %37, i64 %41
  %43 = icmp eq i32 %36, 0
  br i1 %43, label %61, label %44

44:                                               ; preds = %35
  %45 = bitcast %"class.WTF::HashSet"* %7 to i8*
  %46 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 5, i32 0
  %47 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %7, i64 0, i32 0, i32 0
  br label %48

48:                                               ; preds = %56, %44
  %49 = phi %"class.WTF::String"* [ %37, %44 ], [ %59, %56 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %45) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %45, i8 0, i64 20, i1 false) #13
  %50 = call { %"struct.WTF::KeyValuePair.260"*, i8 } @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_7HashSetIjNS_7IntHashIjEENS_10HashTraitsIjEENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS6_IS1_EENS6_IS9_EEEESE_S8_E6insertINS_17HashMapTranslatorISG_SC_S8_EERKS1_S9_EENS_18HashTableAddResultISH_SA_EEOT0_OT1_(%"class.WTF::HashTable.257"* %46, %"class.WTF::String"* dereferenceable(8) %49, %"class.WTF::HashSet"* nonnull dereferenceable(24) %7) #13
  %51 = extractvalue { %"struct.WTF::KeyValuePair.260"*, i8 } %50, 0
  %52 = load i32*, i32** %47, align 8
  %53 = icmp eq i32* %52, null
  br i1 %53, label %56, label %54, !prof !3

54:                                               ; preds = %48
  %55 = bitcast i32* %52 to i8*
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %55) #13
  store i32* null, i32** %47, align 8
  br label %56

56:                                               ; preds = %54, %48
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %45) #13
  %57 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %51, i64 0, i32 1, i32 0
  %58 = call { i32*, i8 } @_ZN3WTF9HashTableIjjNS_17IdentityExtractorENS_7IntHashIjEENS_10HashTraitsIjEES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKjRjEENS_18HashTableAddResultIS7_jEEOT0_OT1_(%"class.WTF::HashTable.25"* %57, i32* nonnull dereferenceable(4) %6, i32* nonnull dereferenceable(4) %6) #13
  %59 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %49, i64 1
  %60 = icmp eq %"class.WTF::String"* %59, %42
  br i1 %60, label %61, label %48

61:                                               ; preds = %56, %35
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %38) #13
  call void @_ZN5blink15AXRelationCache47UpdateAriaOwnerToChildrenMappingWithCleanLayoutEPNS_8AXObjectERNS_10HeapVectorINS_6MemberIS1_EELj0EEEb(%"class.blink::AXRelationCache"* %0, %"class.blink::AXObject"* %1, %"class.blink::HeapVector.381"* dereferenceable(16) %3, i1 zeroext %4)
  %62 = load %"class.WTF::String"*, %"class.WTF::String"** %11, align 8
  %63 = icmp eq %"class.WTF::String"* %62, null
  br i1 %63, label %97, label %64, !prof !3

64:                                               ; preds = %61
  %65 = bitcast %"class.WTF::String"* %62 to i8*
  %66 = load i32, i32* %13, align 4
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %95, label %68, !prof !2

68:                                               ; preds = %64
  %69 = zext i32 %66 to i64
  %70 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %62, i64 %69
  br label %71

71:                                               ; preds = %89, %68
  %72 = phi %"class.WTF::String"* [ %90, %89 ], [ %62, %68 ]
  %73 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %72, i64 0, i32 0, i32 0
  %74 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %73, align 8
  %75 = icmp eq %"class.WTF::StringImpl"* %74, null
  br i1 %75, label %89, label %76

76:                                               ; preds = %71
  %77 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %74, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %78 = load atomic i32, i32* %77 monotonic, align 4
  %79 = and i32 %78, 2
  %80 = icmp eq i32 %79, 0
  %81 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %74, i64 0, i32 0
  %82 = load i32, i32* %81, align 4
  br i1 %80, label %83, label %85

83:                                               ; preds = %76
  %84 = add i32 %82, -1
  store i32 %84, i32* %81, align 4
  br label %85

85:                                               ; preds = %83, %76
  %86 = phi i32 [ %84, %83 ], [ %82, %76 ]
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %88, label %89

88:                                               ; preds = %85
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %74) #13
  br label %89

89:                                               ; preds = %88, %85, %71
  %90 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %72, i64 1
  %91 = icmp eq %"class.WTF::String"* %90, %70
  br i1 %91, label %92, label %71

92:                                               ; preds = %89
  store i32 0, i32* %13, align 4
  %93 = bitcast %"class.WTF::Vector.758"* %8 to i8**
  %94 = load i8*, i8** %93, align 8
  br label %95

95:                                               ; preds = %92, %64
  %96 = phi i8* [ %94, %92 ], [ %65, %64 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %96) #13
  store %"class.WTF::String"* null, %"class.WTF::String"** %11, align 8
  br label %97

97:                                               ; preds = %61, %95
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #13
  ret void

98:                                               ; preds = %21, %281
  %99 = phi %"class.blink::Member.302"* [ %15, %21 ], [ %282, %281 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #13
  store %"class.blink::AXObject"* inttoptr (i64 -6148914691236517206 to %"class.blink::AXObject"*), %"class.blink::AXObject"** %9, align 8
  %100 = getelementptr inbounds %"class.blink::Member.302", %"class.blink::Member.302"* %99, i64 0, i32 0, i32 0
  %101 = load %"class.blink::Element"*, %"class.blink::Element"** %100, align 8
  %102 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %101, i64 0, i32 0, i32 0
  %103 = load %"class.blink::AXObjectCacheImpl"*, %"class.blink::AXObjectCacheImpl"** %23, align 8
  %104 = call %"class.blink::AXObject"* @_ZN5blink17AXObjectCacheImpl11GetOrCreateEPNS_4NodeEPNS_8AXObjectE(%"class.blink::AXObjectCacheImpl"* %103, %"class.blink::Node"* %102, %"class.blink::AXObject"* %1) #13
  store %"class.blink::AXObject"* %104, %"class.blink::AXObject"** %9, align 8
  %105 = load %"class.blink::Element"*, %"class.blink::Element"** %100, align 8
  %106 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %105, i64 0, i32 3, i32 0, i32 0
  %107 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %106, align 8
  %108 = icmp eq %"class.blink::ElementData"* %107, null
  br i1 %108, label %162, label %109

109:                                              ; preds = %98
  %110 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %107, i64 0, i32 3, i32 0, i32 0, i32 0
  %111 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %110, align 8
  %112 = icmp eq %"class.WTF::StringImpl"* %111, null
  br i1 %112, label %162, label %113

113:                                              ; preds = %109
  %114 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %107, i64 0, i32 0, i32 0, i32 0
  %115 = load i32, i32* %114, align 4
  %116 = and i32 %115, 1
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %125, label %118

118:                                              ; preds = %113
  %119 = bitcast %"class.blink::ElementData"* %107 to %"class.blink::UniqueElementData"*
  %120 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %107, i64 1, i32 1
  %121 = bitcast %"class.blink::Member.311"* %120 to %"class.blink::Attribute"**
  %122 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %121, align 8
  %123 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %119, i64 0, i32 2, i32 0, i32 0, i32 2
  %124 = load i32, i32* %123, align 4
  br label %130

125:                                              ; preds = %113
  %126 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %107, i64 1
  %127 = bitcast %"class.blink::ElementData"* %126 to %"class.blink::Attribute"*
  %128 = lshr i32 %115, 1
  %129 = and i32 %128, 268435455
  br label %130

130:                                              ; preds = %125, %118
  %131 = phi %"class.blink::Attribute"* [ %127, %125 ], [ %122, %118 ]
  %132 = phi i32 [ %129, %125 ], [ %124, %118 ]
  %133 = zext i32 %132 to i64
  %134 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %131, i64 %133
  %135 = icmp eq i32 %132, 0
  br i1 %135, label %162, label %136

136:                                              ; preds = %130
  %137 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %25, align 8
  %138 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %137, i64 0, i32 3, i32 0, i32 0, i32 0
  %139 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %137, i64 0, i32 4, i32 0, i32 0, i32 0
  br label %140

140:                                              ; preds = %155, %136
  %141 = phi %"class.blink::Attribute"* [ %131, %136 ], [ %156, %155 ]
  %142 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %141, i64 0, i32 0, i32 0, i32 0
  %143 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %142, align 8
  %144 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %143, %137
  br i1 %144, label %158, label %145

145:                                              ; preds = %140
  %146 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %143, i64 0, i32 3, i32 0, i32 0, i32 0
  %147 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %146, align 8
  %148 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %138, align 8
  %149 = icmp eq %"class.WTF::StringImpl"* %147, %148
  br i1 %149, label %150, label %155

150:                                              ; preds = %145
  %151 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %143, i64 0, i32 4, i32 0, i32 0, i32 0
  %152 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %151, align 8
  %153 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %139, align 8
  %154 = icmp eq %"class.WTF::StringImpl"* %152, %153
  br i1 %154, label %158, label %155

155:                                              ; preds = %150, %145
  %156 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %141, i64 1
  %157 = icmp eq %"class.blink::Attribute"* %156, %134
  br i1 %157, label %162, label %140

158:                                              ; preds = %150, %140
  %159 = icmp eq %"class.blink::Attribute"* %141, null
  %160 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %141, i64 0, i32 1
  %161 = select i1 %159, %"class.WTF::AtomicString"* %26, %"class.WTF::AtomicString"* %160
  br label %162

162:                                              ; preds = %155, %158, %98, %109, %130
  %163 = phi %"class.WTF::AtomicString"* [ %26, %130 ], [ %26, %109 ], [ %26, %98 ], [ %161, %158 ], [ %26, %155 ]
  %164 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %163, i64 0, i32 0, i32 0, i32 0
  %165 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %164, align 8
  %166 = icmp eq %"class.WTF::StringImpl"* %165, null
  br i1 %166, label %254, label %167

167:                                              ; preds = %162
  br i1 %108, label %221, label %168

168:                                              ; preds = %167
  %169 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %107, i64 0, i32 3, i32 0, i32 0, i32 0
  %170 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %169, align 8
  %171 = icmp eq %"class.WTF::StringImpl"* %170, null
  br i1 %171, label %221, label %172

172:                                              ; preds = %168
  %173 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %107, i64 0, i32 0, i32 0, i32 0
  %174 = load i32, i32* %173, align 4
  %175 = and i32 %174, 1
  %176 = icmp eq i32 %175, 0
  br i1 %176, label %184, label %177

177:                                              ; preds = %172
  %178 = bitcast %"class.blink::ElementData"* %107 to %"class.blink::UniqueElementData"*
  %179 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %107, i64 1, i32 1
  %180 = bitcast %"class.blink::Member.311"* %179 to %"class.blink::Attribute"**
  %181 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %180, align 8
  %182 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %178, i64 0, i32 2, i32 0, i32 0, i32 2
  %183 = load i32, i32* %182, align 4
  br label %189

184:                                              ; preds = %172
  %185 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %107, i64 1
  %186 = bitcast %"class.blink::ElementData"* %185 to %"class.blink::Attribute"*
  %187 = lshr i32 %174, 1
  %188 = and i32 %187, 268435455
  br label %189

189:                                              ; preds = %184, %177
  %190 = phi %"class.blink::Attribute"* [ %186, %184 ], [ %181, %177 ]
  %191 = phi i32 [ %188, %184 ], [ %183, %177 ]
  %192 = zext i32 %191 to i64
  %193 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %190, i64 %192
  %194 = icmp eq i32 %191, 0
  br i1 %194, label %221, label %195

195:                                              ; preds = %189
  %196 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %25, align 8
  %197 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %196, i64 0, i32 3, i32 0, i32 0, i32 0
  %198 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %196, i64 0, i32 4, i32 0, i32 0, i32 0
  br label %199

199:                                              ; preds = %214, %195
  %200 = phi %"class.blink::Attribute"* [ %190, %195 ], [ %215, %214 ]
  %201 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %200, i64 0, i32 0, i32 0, i32 0
  %202 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %201, align 8
  %203 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %202, %196
  br i1 %203, label %217, label %204

204:                                              ; preds = %199
  %205 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %202, i64 0, i32 3, i32 0, i32 0, i32 0
  %206 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %205, align 8
  %207 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %197, align 8
  %208 = icmp eq %"class.WTF::StringImpl"* %206, %207
  br i1 %208, label %209, label %214

209:                                              ; preds = %204
  %210 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %202, i64 0, i32 4, i32 0, i32 0, i32 0
  %211 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %210, align 8
  %212 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %198, align 8
  %213 = icmp eq %"class.WTF::StringImpl"* %211, %212
  br i1 %213, label %217, label %214

214:                                              ; preds = %209, %204
  %215 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %200, i64 1
  %216 = icmp eq %"class.blink::Attribute"* %215, %193
  br i1 %216, label %221, label %199

217:                                              ; preds = %209, %199
  %218 = icmp eq %"class.blink::Attribute"* %200, null
  %219 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %200, i64 0, i32 1
  %220 = select i1 %218, %"class.WTF::AtomicString"* %26, %"class.WTF::AtomicString"* %219
  br label %221

221:                                              ; preds = %214, %217, %167, %168, %189
  %222 = phi %"class.WTF::AtomicString"* [ %26, %189 ], [ %26, %168 ], [ %26, %167 ], [ %220, %217 ], [ %26, %214 ]
  %223 = load i32, i32* %13, align 4
  %224 = load i32, i32* %12, align 8
  %225 = icmp eq i32 %223, %224
  br i1 %225, label %253, label %226, !prof !2

226:                                              ; preds = %221
  %227 = load %"class.WTF::String"*, %"class.WTF::String"** %11, align 8
  %228 = zext i32 %223 to i64
  %229 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %222, i64 0, i32 0, i32 0, i32 0
  %230 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %229, align 8
  %231 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %227, i64 %228, i32 0, i32 0
  store %"class.WTF::StringImpl"* %230, %"class.WTF::StringImpl"** %231, align 8
  %232 = icmp eq %"class.WTF::StringImpl"* %230, null
  br i1 %232, label %250, label %233

233:                                              ; preds = %226
  %234 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %230, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %235 = load atomic i32, i32* %234 monotonic, align 4
  %236 = and i32 %235, 2
  %237 = icmp eq i32 %236, 0
  br i1 %237, label %238, label %250

238:                                              ; preds = %233
  %239 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %230, i64 0, i32 0
  %240 = load i32, i32* %239, align 4
  %241 = zext i32 %240 to i33
  %242 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %241, i33 1) #13
  %243 = extractvalue { i33, i1 } %242, 1
  %244 = extractvalue { i33, i1 } %242, 0
  %245 = icmp slt i33 %244, 0
  %246 = or i1 %243, %245
  br i1 %246, label %247, label %248, !prof !2

247:                                              ; preds = %238
  call void @llvm.trap() #13
  unreachable

248:                                              ; preds = %238
  %249 = trunc i33 %244 to i32
  store i32 %249, i32* %239, align 4
  br label %250

250:                                              ; preds = %248, %233, %226
  %251 = load i32, i32* %13, align 4
  %252 = add i32 %251, 1
  store i32 %252, i32* %13, align 4
  br label %254

253:                                              ; preds = %221
  call void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKNS_12AtomicStringEEEvOT_(%"class.WTF::Vector.758"* nonnull %8, %"class.WTF::AtomicString"* dereferenceable(8) %222) #13
  br label %254

254:                                              ; preds = %162, %253, %250
  %255 = load %"class.blink::AXObject"*, %"class.blink::AXObject"** %9, align 8
  %256 = call zeroext i1 @_ZNK5blink15AXRelationCache19IsValidOwnsRelationEPNS_8AXObjectES2_(%"class.blink::AXRelationCache"* %0, %"class.blink::AXObject"* %1, %"class.blink::AXObject"* %255)
  br i1 %256, label %257, label %276

257:                                              ; preds = %254
  %258 = load i32, i32* %27, align 4
  %259 = load i32, i32* %28, align 8
  %260 = icmp eq i32 %258, %259
  br i1 %260, label %275, label %261, !prof !2

261:                                              ; preds = %257
  %262 = load %"class.blink::Member.380"*, %"class.blink::Member.380"** %29, align 8
  %263 = zext i32 %258 to i64
  %264 = getelementptr inbounds %"class.blink::Member.380", %"class.blink::Member.380"* %262, i64 %263
  %265 = load i64, i64* %30, align 8
  %266 = bitcast %"class.blink::Member.380"* %264 to i64*
  store atomic i64 %265, i64* %266 monotonic, align 8
  %267 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %268 = icmp eq i32 %267, 0
  br i1 %268, label %272, label %269

269:                                              ; preds = %261
  %270 = inttoptr i64 %265 to i8*
  %271 = call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %270) #13
  br label %272

272:                                              ; preds = %269, %261
  %273 = load i32, i32* %27, align 4
  %274 = add i32 %273, 1
  store i32 %274, i32* %27, align 4
  br label %281

275:                                              ; preds = %257
  call void @_ZN3WTF6VectorIN5blink6MemberINS1_8AXObjectEEELj0ENS1_13HeapAllocatorEE14AppendSlowCaseIRPS3_EEvOT_(%"class.WTF::Vector.384"* %31, %"class.blink::AXObject"** nonnull dereferenceable(8) %9) #13
  br label %281

276:                                              ; preds = %254
  %277 = load %"class.blink::AXObject"*, %"class.blink::AXObject"** %9, align 8
  %278 = icmp eq %"class.blink::AXObject"* %277, null
  br i1 %278, label %281, label %279

279:                                              ; preds = %276
  %280 = call %"class.blink::AXObject"* @_ZNK5blink8AXObject13ComputeParentEv(%"class.blink::AXObject"* nonnull %277) #13
  call void @_ZNK5blink8AXObject9SetParentEPS0_(%"class.blink::AXObject"* nonnull %277, %"class.blink::AXObject"* %280) #13
  br label %281

281:                                              ; preds = %275, %272, %276, %279
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22) #13
  %282 = getelementptr inbounds %"class.blink::Member.302", %"class.blink::Member.302"* %99, i64 1
  %283 = icmp eq %"class.blink::Member.302"* %282, %19
  br i1 %283, label %32, label %98
}

declare %"class.blink::AXObject"* @_ZNK5blink8AXObject13ComputeParentEv(%"class.blink::AXObject"*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15AXRelationCache47UpdateAriaOwnerToChildrenMappingWithCleanLayoutEPNS_8AXObjectERNS_10HeapVectorINS_6MemberIS1_EELj0EEEb(%"class.blink::AXRelationCache"*, %"class.blink::AXObject"*, %"class.blink::HeapVector.381"* nocapture readonly dereferenceable(16), i1 zeroext) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.WTF::Vector.764", align 8
  %6 = alloca i32, align 4
  %7 = alloca %"class.WTF::Vector.764", align 8
  %8 = alloca i32, align 4
  %9 = alloca %"class.WTF::Vector.764", align 8
  %10 = alloca %"class.WTF::Vector.764", align 8
  %11 = alloca i32, align 4
  %12 = bitcast %"class.blink::AXObject"* %1 to i1 (%"class.blink::AXObject"*)***
  %13 = load i1 (%"class.blink::AXObject"*)**, i1 (%"class.blink::AXObject"*)*** %12, align 8
  %14 = getelementptr inbounds i1 (%"class.blink::AXObject"*)*, i1 (%"class.blink::AXObject"*)** %13, i64 119
  %15 = load i1 (%"class.blink::AXObject"*)*, i1 (%"class.blink::AXObject"*)** %14, align 8
  %16 = tail call zeroext i1 %15(%"class.blink::AXObject"* %1) #13
  br i1 %16, label %17, label %257

17:                                               ; preds = %4
  %18 = bitcast %"class.WTF::Vector.764"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %18) #13
  %19 = getelementptr inbounds %"class.WTF::Vector.764", %"class.WTF::Vector.764"* %5, i64 0, i32 0, i32 0, i32 0
  %20 = getelementptr inbounds %"class.WTF::Vector.764", %"class.WTF::Vector.764"* %5, i64 0, i32 0, i32 0, i32 1
  %21 = getelementptr inbounds %"class.WTF::Vector.764", %"class.WTF::Vector.764"* %5, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 0, i64 16, i1 false) #13
  %22 = getelementptr inbounds %"class.blink::HeapVector.381", %"class.blink::HeapVector.381"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %23 = load %"class.blink::Member.380"*, %"class.blink::Member.380"** %22, align 8
  %24 = getelementptr inbounds %"class.blink::HeapVector.381", %"class.blink::HeapVector.381"* %2, i64 0, i32 0, i32 0, i32 0, i32 2
  %25 = load i32, i32* %24, align 4
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds %"class.blink::Member.380", %"class.blink::Member.380"* %23, i64 %26
  %28 = icmp eq i32 %25, 0
  br i1 %28, label %31, label %29

29:                                               ; preds = %17
  %30 = bitcast i32* %6 to i8*
  br label %58

31:                                               ; preds = %74, %17
  %32 = bitcast %"class.WTF::Vector.764"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %32) #13
  %33 = getelementptr inbounds %"class.WTF::Vector.764", %"class.WTF::Vector.764"* %7, i64 0, i32 0, i32 0, i32 0
  %34 = getelementptr inbounds %"class.WTF::Vector.764", %"class.WTF::Vector.764"* %7, i64 0, i32 0, i32 0, i32 1
  %35 = getelementptr inbounds %"class.WTF::Vector.764", %"class.WTF::Vector.764"* %7, i64 0, i32 0, i32 0, i32 2
  %36 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 3
  %37 = bitcast i32* %8 to i8*
  %38 = bitcast %"class.WTF::Vector.764"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %38, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %37) #13
  %39 = getelementptr inbounds %"class.blink::AXObject", %"class.blink::AXObject"* %1, i64 0, i32 1
  %40 = load i32, i32* %39, align 8
  store i32 %40, i32* %8, align 4
  call void @_ZNK3WTF7HashMapIjNS_6VectorIjLj0ENS_18PartitionAllocatorEEENS_7IntHashIjEENS_10HashTraitsIjEENS6_IS3_EES2_E2atERKj(%"class.WTF::Vector.764"* nonnull sret %7, %"class.WTF::HashMap.246"* %36, i32* nonnull dereferenceable(4) %8)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %37) #13
  %41 = load i32, i32* %35, align 4
  %42 = load i32, i32* %21, align 4
  %43 = icmp eq i32 %41, %42
  br i1 %43, label %44, label %80

44:                                               ; preds = %31
  %45 = icmp eq i32 %41, 0
  br i1 %45, label %238, label %46

46:                                               ; preds = %44
  %47 = bitcast %"class.WTF::Vector.764"* %7 to i8**
  %48 = load i8*, i8** %47, align 8
  %49 = bitcast %"class.WTF::Vector.764"* %5 to i8**
  %50 = load i8*, i8** %49, align 8
  %51 = zext i32 %41 to i64
  %52 = shl nuw nsw i64 %51, 2
  %53 = call i32 @bcmp(i8* %48, i8* %50, i64 %52) #13
  %54 = icmp eq i32 %53, 0
  %55 = xor i1 %3, true
  %56 = or i1 %45, %55
  %57 = and i1 %54, %56
  br i1 %57, label %238, label %80

58:                                               ; preds = %77, %29
  %59 = phi i32 [ 0, %29 ], [ %79, %77 ]
  %60 = phi i32 [ 0, %29 ], [ %78, %77 ]
  %61 = phi %"class.blink::Member.380"* [ %23, %29 ], [ %75, %77 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %30) #13
  %62 = getelementptr inbounds %"class.blink::Member.380", %"class.blink::Member.380"* %61, i64 0, i32 0, i32 0
  %63 = load %"class.blink::AXObject"*, %"class.blink::AXObject"** %62, align 8
  %64 = getelementptr inbounds %"class.blink::AXObject", %"class.blink::AXObject"* %63, i64 0, i32 1
  %65 = load i32, i32* %64, align 8
  store i32 %65, i32* %6, align 4
  %66 = icmp eq i32 %60, %59
  br i1 %66, label %73, label %67, !prof !2

67:                                               ; preds = %58
  %68 = load i32*, i32** %19, align 8
  %69 = zext i32 %60 to i64
  %70 = getelementptr inbounds i32, i32* %68, i64 %69
  store i32 %65, i32* %70, align 4
  %71 = load i32, i32* %21, align 4
  %72 = add i32 %71, 1
  store i32 %72, i32* %21, align 4
  br label %74

73:                                               ; preds = %58
  call void @_ZN3WTF6VectorIjLj0ENS_18PartitionAllocatorEE14AppendSlowCaseIjEEvOT_(%"class.WTF::Vector.764"* nonnull %5, i32* nonnull dereferenceable(4) %6) #13
  br label %74

74:                                               ; preds = %67, %73
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %30) #13
  %75 = getelementptr inbounds %"class.blink::Member.380", %"class.blink::Member.380"* %61, i64 1
  %76 = icmp eq %"class.blink::Member.380"* %75, %27
  br i1 %76, label %31, label %77

77:                                               ; preds = %74
  %78 = load i32, i32* %21, align 4
  %79 = load i32, i32* %20, align 8
  br label %58

80:                                               ; preds = %31, %46
  %81 = load i32, i32* %34, align 8
  %82 = getelementptr inbounds %"class.WTF::Vector.764", %"class.WTF::Vector.764"* %9, i64 0, i32 0, i32 0, i32 0
  store i32* null, i32** %82, align 8
  %83 = getelementptr inbounds %"class.WTF::Vector.764", %"class.WTF::Vector.764"* %9, i64 0, i32 0, i32 0, i32 1
  store i32 0, i32* %83, align 8
  %84 = icmp eq i32 %81, 0
  br i1 %84, label %85, label %87

85:                                               ; preds = %80
  %86 = getelementptr inbounds %"class.WTF::Vector.764", %"class.WTF::Vector.764"* %9, i64 0, i32 0, i32 0, i32 2
  store i32 %41, i32* %86, align 4
  call void @_ZN5blink15AXRelationCache18UnmapOwnedChildrenEPKNS_8AXObjectEN3WTF6VectorIjLj0ENS4_18PartitionAllocatorEEE(%"class.blink::AXRelationCache"* %0, %"class.blink::AXObject"* %1, %"class.WTF::Vector.764"* nonnull %9)
  br label %112

87:                                               ; preds = %80
  %88 = zext i32 %81 to i64
  %89 = call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIjEEmm(i64 %88) #13
  %90 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %89, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIjEEPKcv, i64 0, i64 0)) #13
  %91 = ptrtoint i8* %90 to i64
  %92 = bitcast %"class.WTF::Vector.764"* %9 to i64*
  store atomic i64 %91, i64* %92 monotonic, align 8
  %93 = lshr i64 %89, 2
  %94 = trunc i64 %93 to i32
  store i32 %94, i32* %83, align 8
  %95 = icmp ne i8* %90, null
  %96 = load i32, i32* %35, align 4
  %97 = getelementptr inbounds %"class.WTF::Vector.764", %"class.WTF::Vector.764"* %9, i64 0, i32 0, i32 0, i32 2
  store i32 %96, i32* %97, align 4
  %98 = load i32*, i32** %33, align 8
  %99 = icmp ne i32* %98, null
  %100 = and i1 %95, %99
  br i1 %100, label %101, label %105, !prof !3

101:                                              ; preds = %87
  %102 = zext i32 %96 to i64
  %103 = bitcast i32* %98 to i8*
  %104 = shl nuw nsw i64 %102, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %90, i8* nonnull align 4 %103, i64 %104, i1 false) #13
  br label %105

105:                                              ; preds = %87, %101
  call void @_ZN5blink15AXRelationCache18UnmapOwnedChildrenEPKNS_8AXObjectEN3WTF6VectorIjLj0ENS4_18PartitionAllocatorEEE(%"class.blink::AXRelationCache"* %0, %"class.blink::AXObject"* %1, %"class.WTF::Vector.764"* nonnull %9)
  %106 = icmp eq i8* %90, null
  br i1 %106, label %112, label %107, !prof !3

107:                                              ; preds = %105
  %108 = icmp eq i32 %96, 0
  br i1 %108, label %111, label %109, !prof !2

109:                                              ; preds = %107
  %110 = getelementptr inbounds %"class.WTF::Vector.764", %"class.WTF::Vector.764"* %9, i64 0, i32 0, i32 0, i32 2
  store i32 0, i32* %110, align 4
  br label %111

111:                                              ; preds = %109, %107
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %90) #13
  store i32* null, i32** %82, align 8
  br label %112

112:                                              ; preds = %85, %105, %111
  %113 = load i32, i32* %20, align 8
  %114 = getelementptr inbounds %"class.WTF::Vector.764", %"class.WTF::Vector.764"* %10, i64 0, i32 0, i32 0, i32 0
  store i32* null, i32** %114, align 8
  %115 = getelementptr inbounds %"class.WTF::Vector.764", %"class.WTF::Vector.764"* %10, i64 0, i32 0, i32 0, i32 1
  store i32 0, i32* %115, align 8
  %116 = icmp eq i32 %113, 0
  br i1 %116, label %117, label %120

117:                                              ; preds = %112
  %118 = load i32, i32* %21, align 4
  %119 = getelementptr inbounds %"class.WTF::Vector.764", %"class.WTF::Vector.764"* %10, i64 0, i32 0, i32 0, i32 2
  store i32 %118, i32* %119, align 4
  call void @_ZN5blink15AXRelationCache16MapOwnedChildrenEPKNS_8AXObjectEN3WTF6VectorIjLj0ENS4_18PartitionAllocatorEEE(%"class.blink::AXRelationCache"* %0, %"class.blink::AXObject"* %1, %"class.WTF::Vector.764"* nonnull %10)
  br label %145

120:                                              ; preds = %112
  %121 = zext i32 %113 to i64
  %122 = call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIjEEmm(i64 %121) #13
  %123 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %122, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIjEEPKcv, i64 0, i64 0)) #13
  %124 = ptrtoint i8* %123 to i64
  %125 = bitcast %"class.WTF::Vector.764"* %10 to i64*
  store atomic i64 %124, i64* %125 monotonic, align 8
  %126 = lshr i64 %122, 2
  %127 = trunc i64 %126 to i32
  store i32 %127, i32* %115, align 8
  %128 = icmp ne i8* %123, null
  %129 = load i32, i32* %21, align 4
  %130 = getelementptr inbounds %"class.WTF::Vector.764", %"class.WTF::Vector.764"* %10, i64 0, i32 0, i32 0, i32 2
  store i32 %129, i32* %130, align 4
  %131 = load i32*, i32** %19, align 8
  %132 = icmp ne i32* %131, null
  %133 = and i1 %128, %132
  br i1 %133, label %134, label %138, !prof !3

134:                                              ; preds = %120
  %135 = zext i32 %129 to i64
  %136 = bitcast i32* %131 to i8*
  %137 = shl nuw nsw i64 %135, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %123, i8* nonnull align 4 %136, i64 %137, i1 false) #13
  br label %138

138:                                              ; preds = %120, %134
  call void @_ZN5blink15AXRelationCache16MapOwnedChildrenEPKNS_8AXObjectEN3WTF6VectorIjLj0ENS4_18PartitionAllocatorEEE(%"class.blink::AXRelationCache"* %0, %"class.blink::AXObject"* %1, %"class.WTF::Vector.764"* nonnull %10)
  %139 = icmp eq i8* %123, null
  br i1 %139, label %145, label %140, !prof !3

140:                                              ; preds = %138
  %141 = icmp eq i32 %129, 0
  br i1 %141, label %144, label %142, !prof !2

142:                                              ; preds = %140
  %143 = getelementptr inbounds %"class.WTF::Vector.764", %"class.WTF::Vector.764"* %10, i64 0, i32 0, i32 0, i32 2
  store i32 0, i32* %143, align 4
  br label %144

144:                                              ; preds = %142, %140
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %123) #13
  store i32* null, i32** %114, align 8
  br label %145

145:                                              ; preds = %117, %138, %144
  %146 = load i32, i32* %21, align 4
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %148, label %220

148:                                              ; preds = %145
  %149 = load i32, i32* %39, align 8
  %150 = getelementptr inbounds %"class.WTF::HashMap.246", %"class.WTF::HashMap.246"* %36, i64 0, i32 0, i32 0
  %151 = load %"struct.WTF::KeyValuePair.250"*, %"struct.WTF::KeyValuePair.250"** %150, align 8
  %152 = icmp eq %"struct.WTF::KeyValuePair.250"* %151, null
  %153 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 3, i32 0, i32 1
  %154 = load i32, i32* %153, align 8
  br i1 %152, label %210, label %155

155:                                              ; preds = %148
  %156 = add i32 %154, -1
  %157 = zext i32 %156 to i64
  %158 = shl i32 %149, 15
  %159 = xor i32 %158, -1
  %160 = add i32 %149, %159
  %161 = lshr i32 %160, 10
  %162 = xor i32 %161, %160
  %163 = mul i32 %162, 9
  %164 = lshr i32 %163, 6
  %165 = xor i32 %164, %163
  %166 = shl i32 %165, 11
  %167 = xor i32 %166, -1
  %168 = add i32 %165, %167
  %169 = lshr i32 %168, 16
  %170 = xor i32 %169, %168
  %171 = and i32 %170, %156
  %172 = zext i32 %171 to i64
  %173 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %151, i64 %172
  %174 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %173, i64 0, i32 0
  %175 = load i32, i32* %174, align 4
  %176 = icmp eq i32 %175, %149
  br i1 %176, label %205, label %177

177:                                              ; preds = %155
  %178 = xor i32 %170, -1
  %179 = lshr i32 %168, 23
  %180 = add i32 %179, %178
  %181 = shl i32 %180, 12
  %182 = xor i32 %181, %180
  %183 = lshr i32 %182, 7
  %184 = xor i32 %183, %182
  %185 = shl i32 %184, 2
  %186 = xor i32 %185, %184
  %187 = lshr i32 %186, 20
  %188 = xor i32 %187, %186
  %189 = or i32 %188, 1
  %190 = zext i32 %189 to i64
  br label %191

191:                                              ; preds = %196, %177
  %192 = phi i32 [ %175, %177 ], [ %203, %196 ]
  %193 = phi i64 [ %172, %177 ], [ %200, %196 ]
  %194 = phi i64 [ 0, %177 ], [ %198, %196 ]
  %195 = icmp eq i32 %192, 0
  br i1 %195, label %210, label %196

196:                                              ; preds = %191
  %197 = icmp eq i64 %194, 0
  %198 = select i1 %197, i64 %190, i64 %194
  %199 = add i64 %198, %193
  %200 = and i64 %199, %157
  %201 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %151, i64 %200
  %202 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %201, i64 0, i32 0
  %203 = load i32, i32* %202, align 4
  %204 = icmp eq i32 %203, %149
  br i1 %204, label %205, label %191

205:                                              ; preds = %196, %155
  %206 = phi %"struct.WTF::KeyValuePair.250"* [ %173, %155 ], [ %201, %196 ]
  %207 = icmp eq %"struct.WTF::KeyValuePair.250"* %206, null
  br i1 %207, label %210, label %208

208:                                              ; preds = %205
  %209 = zext i32 %154 to i64
  br label %213

210:                                              ; preds = %191, %205, %148
  %211 = zext i32 %154 to i64
  %212 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %151, i64 %211
  br label %213

213:                                              ; preds = %210, %208
  %214 = phi i64 [ %209, %208 ], [ %211, %210 ]
  %215 = phi %"struct.WTF::KeyValuePair.250"* [ %206, %208 ], [ %212, %210 ]
  %216 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %151, i64 %214
  %217 = icmp eq %"struct.WTF::KeyValuePair.250"* %216, %215
  br i1 %217, label %233, label %218

218:                                              ; preds = %213
  %219 = getelementptr inbounds %"class.WTF::HashMap.246", %"class.WTF::HashMap.246"* %36, i64 0, i32 0
  call void @_ZN3WTF9HashTableIjNS_12KeyValuePairIjNS_6VectorIjLj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_7IntHashIjEENS_18HashMapValueTraitsINS_10HashTraitsIjEENSA_IS4_EEEESB_S3_E5eraseEPKS5_(%"class.WTF::HashTable.247"* %219, %"struct.WTF::KeyValuePair.250"* %215) #13
  br label %233

220:                                              ; preds = %145
  %221 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %221) #13
  %222 = load i32, i32* %39, align 8
  store i32 %222, i32* %11, align 4
  %223 = getelementptr inbounds %"class.WTF::HashMap.246", %"class.WTF::HashMap.246"* %36, i64 0, i32 0
  %224 = call { %"struct.WTF::KeyValuePair.250"*, i8 } @_ZN3WTF9HashTableIjNS_12KeyValuePairIjNS_6VectorIjLj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_7IntHashIjEENS_18HashMapValueTraitsINS_10HashTraitsIjEENSA_IS4_EEEESB_S3_E6insertINS_17HashMapTranslatorISD_S8_S3_EEjRS4_EENS_18HashTableAddResultISE_S5_EEOT0_OT1_(%"class.WTF::HashTable.247"* %223, i32* nonnull dereferenceable(4) %11, %"class.WTF::Vector.764"* nonnull dereferenceable(16) %5) #13
  %225 = extractvalue { %"struct.WTF::KeyValuePair.250"*, i8 } %224, 1
  %226 = and i8 %225, 1
  %227 = icmp eq i8 %226, 0
  br i1 %227, label %228, label %232

228:                                              ; preds = %220
  %229 = extractvalue { %"struct.WTF::KeyValuePair.250"*, i8 } %224, 0
  %230 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %229, i64 0, i32 1
  %231 = call dereferenceable(16) %"class.WTF::Vector.764"* @_ZN3WTF6VectorIjLj0ENS_18PartitionAllocatorEEaSERKS2_(%"class.WTF::Vector.764"* %230, %"class.WTF::Vector.764"* nonnull dereferenceable(16) %5) #13
  br label %232

232:                                              ; preds = %220, %228
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %221) #13
  br label %233

233:                                              ; preds = %218, %213, %232
  %234 = bitcast %"class.blink::AXObject"* %1 to void (%"class.blink::AXObject"*)***
  %235 = load void (%"class.blink::AXObject"*)**, void (%"class.blink::AXObject"*)*** %234, align 8
  %236 = getelementptr inbounds void (%"class.blink::AXObject"*)*, void (%"class.blink::AXObject"*)** %235, i64 154
  %237 = load void (%"class.blink::AXObject"*)*, void (%"class.blink::AXObject"*)** %236, align 8
  call void %237(%"class.blink::AXObject"* %1) #13
  br label %238

238:                                              ; preds = %46, %44, %233
  %239 = load i32*, i32** %33, align 8
  %240 = icmp eq i32* %239, null
  %241 = bitcast i32* %239 to i8*
  br i1 %240, label %247, label %242, !prof !3

242:                                              ; preds = %238
  %243 = load i32, i32* %35, align 4
  %244 = icmp eq i32 %243, 0
  br i1 %244, label %246, label %245, !prof !2

245:                                              ; preds = %242
  store i32 0, i32* %35, align 4
  br label %246

246:                                              ; preds = %245, %242
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %241) #13
  store i32* null, i32** %33, align 8
  br label %247

247:                                              ; preds = %238, %246
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %32) #13
  %248 = load i32*, i32** %19, align 8
  %249 = icmp eq i32* %248, null
  %250 = bitcast i32* %248 to i8*
  br i1 %249, label %256, label %251, !prof !3

251:                                              ; preds = %247
  %252 = load i32, i32* %21, align 4
  %253 = icmp eq i32 %252, 0
  br i1 %253, label %255, label %254, !prof !2

254:                                              ; preds = %251
  store i32 0, i32* %21, align 4
  br label %255

255:                                              ; preds = %254, %251
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %250) #13
  store i32* null, i32** %19, align 8
  br label %256

256:                                              ; preds = %247, %255
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %18) #13
  br label %257

257:                                              ; preds = %4, %256
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15AXRelationCache20GetAriaOwnedChildrenEPKNS_8AXObjectERNS_10HeapVectorINS_6MemberIS1_EELj0EEE(%"class.blink::AXRelationCache"*, %"class.blink::AXObject"* nocapture readonly, %"class.blink::HeapVector.381"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.WTF::Vector.764", align 8
  %5 = alloca i32, align 4
  %6 = alloca %"class.blink::AXObject"*, align 8
  %7 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 3
  %8 = getelementptr inbounds %"class.blink::AXObject", %"class.blink::AXObject"* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = getelementptr inbounds %"class.WTF::HashMap.246", %"class.WTF::HashMap.246"* %7, i64 0, i32 0, i32 0
  %11 = load %"struct.WTF::KeyValuePair.250"*, %"struct.WTF::KeyValuePair.250"** %10, align 8
  %12 = icmp eq %"struct.WTF::KeyValuePair.250"* %11, null
  br i1 %12, label %187, label %13

13:                                               ; preds = %3
  %14 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 3, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = add i32 %15, -1
  %17 = zext i32 %16 to i64
  %18 = shl i32 %9, 15
  %19 = xor i32 %18, -1
  %20 = add i32 %9, %19
  %21 = lshr i32 %20, 10
  %22 = xor i32 %21, %20
  %23 = mul i32 %22, 9
  %24 = lshr i32 %23, 6
  %25 = xor i32 %24, %23
  %26 = shl i32 %25, 11
  %27 = xor i32 %26, -1
  %28 = add i32 %25, %27
  %29 = lshr i32 %28, 16
  %30 = xor i32 %29, %28
  %31 = and i32 %16, %30
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %11, i64 %32
  %34 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %33, i64 0, i32 0
  %35 = load i32, i32* %34, align 4
  %36 = icmp eq i32 %35, %9
  br i1 %36, label %65, label %37

37:                                               ; preds = %13
  %38 = xor i32 %30, -1
  %39 = lshr i32 %28, 23
  %40 = add i32 %39, %38
  %41 = shl i32 %40, 12
  %42 = xor i32 %41, %40
  %43 = lshr i32 %42, 7
  %44 = xor i32 %43, %42
  %45 = shl i32 %44, 2
  %46 = xor i32 %45, %44
  %47 = lshr i32 %46, 20
  %48 = xor i32 %47, %46
  %49 = or i32 %48, 1
  %50 = zext i32 %49 to i64
  br label %51

51:                                               ; preds = %56, %37
  %52 = phi i32 [ %35, %37 ], [ %63, %56 ]
  %53 = phi i64 [ %32, %37 ], [ %60, %56 ]
  %54 = phi i64 [ 0, %37 ], [ %58, %56 ]
  %55 = icmp eq i32 %52, 0
  br i1 %55, label %187, label %56

56:                                               ; preds = %51
  %57 = icmp eq i64 %54, 0
  %58 = select i1 %57, i64 %50, i64 %54
  %59 = add i64 %58, %53
  %60 = and i64 %59, %17
  %61 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %11, i64 %60
  %62 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %61, i64 0, i32 0
  %63 = load i32, i32* %62, align 4
  %64 = icmp eq i32 %63, %9
  br i1 %64, label %65, label %51

65:                                               ; preds = %56, %13
  %66 = phi %"struct.WTF::KeyValuePair.250"* [ %33, %13 ], [ %61, %56 ]
  %67 = icmp eq %"struct.WTF::KeyValuePair.250"* %66, null
  br i1 %67, label %187, label %68

68:                                               ; preds = %65
  %69 = bitcast %"class.WTF::Vector.764"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %69) #13
  %70 = getelementptr inbounds %"class.WTF::Vector.764", %"class.WTF::Vector.764"* %4, i64 0, i32 0, i32 0, i32 0
  %71 = getelementptr inbounds %"class.WTF::Vector.764", %"class.WTF::Vector.764"* %4, i64 0, i32 0, i32 0, i32 2
  %72 = bitcast i32* %5 to i8*
  %73 = bitcast %"class.WTF::Vector.764"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %73, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %72) #13
  store i32 %9, i32* %5, align 4
  call void @_ZNK3WTF7HashMapIjNS_6VectorIjLj0ENS_18PartitionAllocatorEEENS_7IntHashIjEENS_10HashTraitsIjEENS6_IS3_EES2_E2atERKj(%"class.WTF::Vector.764"* nonnull sret %4, %"class.WTF::HashMap.246"* %7, i32* nonnull dereferenceable(4) %5)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %72) #13
  %74 = load i32*, i32** %70, align 8
  %75 = load i32, i32* %71, align 4
  %76 = zext i32 %75 to i64
  %77 = getelementptr inbounds i32, i32* %74, i64 %76
  %78 = icmp eq i32 %75, 0
  br i1 %78, label %88, label %79

79:                                               ; preds = %68
  %80 = bitcast %"class.blink::AXObject"** %6 to i8*
  %81 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 2, i32 0, i32 0
  %82 = getelementptr inbounds %"class.blink::HeapVector.381", %"class.blink::HeapVector.381"* %2, i64 0, i32 0, i32 0, i32 0, i32 2
  %83 = getelementptr inbounds %"class.blink::HeapVector.381", %"class.blink::HeapVector.381"* %2, i64 0, i32 0, i32 0, i32 0, i32 1
  %84 = getelementptr inbounds %"class.blink::HeapVector.381", %"class.blink::HeapVector.381"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %85 = getelementptr inbounds %"class.blink::HeapVector.381", %"class.blink::HeapVector.381"* %2, i64 0, i32 0
  br label %98

86:                                               ; preds = %184
  %87 = load i32*, i32** %70, align 8
  br label %88

88:                                               ; preds = %86, %68
  %89 = phi i32* [ %87, %86 ], [ %74, %68 ]
  %90 = icmp eq i32* %89, null
  %91 = bitcast i32* %89 to i8*
  br i1 %90, label %97, label %92, !prof !3

92:                                               ; preds = %88
  %93 = load i32, i32* %71, align 4
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %96, label %95, !prof !2

95:                                               ; preds = %92
  store i32 0, i32* %71, align 4
  br label %96

96:                                               ; preds = %95, %92
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %91) #13
  store i32* null, i32** %70, align 8
  br label %97

97:                                               ; preds = %88, %96
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %69) #13
  br label %187

98:                                               ; preds = %79, %184
  %99 = phi i32* [ %74, %79 ], [ %185, %184 ]
  %100 = load i32, i32* %99, align 4
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %80) #13
  store %"class.blink::AXObject"* inttoptr (i64 -6148914691236517206 to %"class.blink::AXObject"*), %"class.blink::AXObject"** %6, align 8
  %101 = load %"class.blink::AXObjectCacheImpl"*, %"class.blink::AXObjectCacheImpl"** %81, align 8
  %102 = getelementptr inbounds %"class.blink::AXObjectCacheImpl", %"class.blink::AXObjectCacheImpl"* %101, i64 0, i32 5, i32 0, i32 0, i32 0
  %103 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %102, align 8
  %104 = icmp eq %"struct.WTF::KeyValuePair"* %103, null
  br i1 %104, label %160, label %105

105:                                              ; preds = %98
  %106 = getelementptr inbounds %"class.blink::AXObjectCacheImpl", %"class.blink::AXObjectCacheImpl"* %101, i64 0, i32 5, i32 0, i32 0, i32 1
  %107 = load i32, i32* %106, align 8
  %108 = add i32 %107, -1
  %109 = zext i32 %108 to i64
  %110 = shl i32 %100, 15
  %111 = xor i32 %110, -1
  %112 = add i32 %100, %111
  %113 = lshr i32 %112, 10
  %114 = xor i32 %113, %112
  %115 = mul i32 %114, 9
  %116 = lshr i32 %115, 6
  %117 = xor i32 %116, %115
  %118 = shl i32 %117, 11
  %119 = xor i32 %118, -1
  %120 = add i32 %117, %119
  %121 = lshr i32 %120, 16
  %122 = xor i32 %121, %120
  %123 = and i32 %108, %122
  %124 = zext i32 %123 to i64
  %125 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %103, i64 %124
  %126 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %125, i64 0, i32 0
  %127 = load i32, i32* %126, align 4
  %128 = icmp eq i32 %127, %100
  br i1 %128, label %157, label %129

129:                                              ; preds = %105
  %130 = xor i32 %122, -1
  %131 = lshr i32 %120, 23
  %132 = add i32 %131, %130
  %133 = shl i32 %132, 12
  %134 = xor i32 %133, %132
  %135 = lshr i32 %134, 7
  %136 = xor i32 %135, %134
  %137 = shl i32 %136, 2
  %138 = xor i32 %137, %136
  %139 = lshr i32 %138, 20
  %140 = xor i32 %139, %138
  %141 = or i32 %140, 1
  %142 = zext i32 %141 to i64
  br label %143

143:                                              ; preds = %148, %129
  %144 = phi i32 [ %127, %129 ], [ %155, %148 ]
  %145 = phi i64 [ %124, %129 ], [ %152, %148 ]
  %146 = phi i64 [ 0, %129 ], [ %150, %148 ]
  %147 = icmp eq i32 %144, 0
  br i1 %147, label %160, label %148

148:                                              ; preds = %143
  %149 = icmp eq i64 %146, 0
  %150 = select i1 %149, i64 %142, i64 %146
  %151 = add i64 %150, %145
  %152 = and i64 %151, %109
  %153 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %103, i64 %152
  %154 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %153, i64 0, i32 0
  %155 = load i32, i32* %154, align 4
  %156 = icmp eq i32 %155, %100
  br i1 %156, label %157, label %143

157:                                              ; preds = %148, %105
  %158 = phi %"struct.WTF::KeyValuePair"* [ %125, %105 ], [ %153, %148 ]
  %159 = icmp eq %"struct.WTF::KeyValuePair"* %158, null
  br i1 %159, label %160, label %161

160:                                              ; preds = %143, %157, %98
  store %"class.blink::AXObject"* null, %"class.blink::AXObject"** %6, align 8
  br label %184

161:                                              ; preds = %157
  %162 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %158, i64 0, i32 1, i32 0, i32 0
  %163 = load %"class.blink::AXObject"*, %"class.blink::AXObject"** %162, align 8
  store %"class.blink::AXObject"* %163, %"class.blink::AXObject"** %6, align 8
  %164 = icmp eq %"class.blink::AXObject"* %163, null
  %165 = ptrtoint %"class.blink::AXObject"* %163 to i64
  br i1 %164, label %184, label %166

166:                                              ; preds = %161
  %167 = load i32, i32* %82, align 4
  %168 = load i32, i32* %83, align 8
  %169 = icmp eq i32 %167, %168
  br i1 %169, label %183, label %170, !prof !2

170:                                              ; preds = %166
  %171 = load %"class.blink::Member.380"*, %"class.blink::Member.380"** %84, align 8
  %172 = zext i32 %167 to i64
  %173 = getelementptr inbounds %"class.blink::Member.380", %"class.blink::Member.380"* %171, i64 %172
  %174 = bitcast %"class.blink::Member.380"* %173 to i64*
  store atomic i64 %165, i64* %174 monotonic, align 8
  %175 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %176 = icmp eq i32 %175, 0
  br i1 %176, label %180, label %177

177:                                              ; preds = %170
  %178 = bitcast %"class.blink::AXObject"* %163 to i8*
  %179 = call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* nonnull %178) #13
  br label %180

180:                                              ; preds = %177, %170
  %181 = load i32, i32* %82, align 4
  %182 = add i32 %181, 1
  store i32 %182, i32* %82, align 4
  br label %184

183:                                              ; preds = %166
  call void @_ZN3WTF6VectorIN5blink6MemberINS1_8AXObjectEEELj0ENS1_13HeapAllocatorEE14AppendSlowCaseIRPS3_EEvOT_(%"class.WTF::Vector.384"* %85, %"class.blink::AXObject"** nonnull dereferenceable(8) %6) #13
  br label %184

184:                                              ; preds = %183, %180, %160, %161
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %80) #13
  %185 = getelementptr inbounds i32, i32* %99, i64 1
  %186 = icmp eq i32* %185, %77
  br i1 %186, label %86, label %98

187:                                              ; preds = %51, %65, %3, %97
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3WTF7HashMapIjNS_6VectorIjLj0ENS_18PartitionAllocatorEEENS_7IntHashIjEENS_10HashTraitsIjEENS6_IS3_EES2_E2atERKj(%"class.WTF::Vector.764"* noalias sret, %"class.WTF::HashMap.246"*, i32* dereferenceable(4)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashMap.246", %"class.WTF::HashMap.246"* %1, i64 0, i32 0, i32 0
  %5 = load %"struct.WTF::KeyValuePair.250"*, %"struct.WTF::KeyValuePair.250"** %4, align 8
  %6 = icmp eq %"struct.WTF::KeyValuePair.250"* %5, null
  br i1 %6, label %63, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.WTF::HashMap.246", %"class.WTF::HashMap.246"* %1, i64 0, i32 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = add i32 %9, -1
  %11 = zext i32 %10 to i64
  %12 = load i32, i32* %2, align 4
  %13 = shl i32 %12, 15
  %14 = xor i32 %13, -1
  %15 = add i32 %12, %14
  %16 = lshr i32 %15, 10
  %17 = xor i32 %16, %15
  %18 = mul i32 %17, 9
  %19 = lshr i32 %18, 6
  %20 = xor i32 %19, %18
  %21 = shl i32 %20, 11
  %22 = xor i32 %21, -1
  %23 = add i32 %20, %22
  %24 = lshr i32 %23, 16
  %25 = xor i32 %24, %23
  %26 = and i32 %25, %10
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %5, i64 %27
  %29 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %28, i64 0, i32 0
  %30 = load i32, i32* %29, align 4
  %31 = icmp eq i32 %30, %12
  br i1 %31, label %60, label %32

32:                                               ; preds = %7
  %33 = xor i32 %25, -1
  %34 = lshr i32 %23, 23
  %35 = add i32 %34, %33
  %36 = shl i32 %35, 12
  %37 = xor i32 %36, %35
  %38 = lshr i32 %37, 7
  %39 = xor i32 %38, %37
  %40 = shl i32 %39, 2
  %41 = xor i32 %40, %39
  %42 = lshr i32 %41, 20
  %43 = xor i32 %42, %41
  %44 = or i32 %43, 1
  %45 = zext i32 %44 to i64
  br label %46

46:                                               ; preds = %51, %32
  %47 = phi i32 [ %30, %32 ], [ %58, %51 ]
  %48 = phi i64 [ %27, %32 ], [ %55, %51 ]
  %49 = phi i64 [ 0, %32 ], [ %53, %51 ]
  %50 = icmp eq i32 %47, 0
  br i1 %50, label %63, label %51

51:                                               ; preds = %46
  %52 = icmp eq i64 %49, 0
  %53 = select i1 %52, i64 %45, i64 %49
  %54 = add i64 %53, %48
  %55 = and i64 %54, %11
  %56 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %5, i64 %55
  %57 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %56, i64 0, i32 0
  %58 = load i32, i32* %57, align 4
  %59 = icmp eq i32 %58, %12
  br i1 %59, label %60, label %46

60:                                               ; preds = %51, %7
  %61 = phi %"struct.WTF::KeyValuePair.250"* [ %28, %7 ], [ %56, %51 ]
  %62 = icmp eq %"struct.WTF::KeyValuePair.250"* %61, null
  br i1 %62, label %63, label %65

63:                                               ; preds = %46, %3, %60
  %64 = bitcast %"class.WTF::Vector.764"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %64, i8 0, i64 16, i1 false)
  br label %94

65:                                               ; preds = %60
  %66 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %61, i64 0, i32 1, i32 0, i32 0, i32 1
  %67 = load i32, i32* %66, align 8
  %68 = getelementptr inbounds %"class.WTF::Vector.764", %"class.WTF::Vector.764"* %0, i64 0, i32 0, i32 0, i32 0
  store i32* null, i32** %68, align 8
  %69 = getelementptr inbounds %"class.WTF::Vector.764", %"class.WTF::Vector.764"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 0, i32* %69, align 8
  %70 = icmp eq i32 %67, 0
  br i1 %70, label %80, label %71

71:                                               ; preds = %65
  %72 = zext i32 %67 to i64
  %73 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIjEEmm(i64 %72) #13
  %74 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %73, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIjEEPKcv, i64 0, i64 0)) #13
  %75 = ptrtoint i8* %74 to i64
  %76 = bitcast %"class.WTF::Vector.764"* %0 to i64*
  store atomic i64 %75, i64* %76 monotonic, align 8
  %77 = lshr i64 %73, 2
  %78 = trunc i64 %77 to i32
  store i32 %78, i32* %69, align 8
  %79 = icmp ne i8* %74, null
  br label %80

80:                                               ; preds = %71, %65
  %81 = phi i8* [ null, %65 ], [ %74, %71 ]
  %82 = phi i1 [ false, %65 ], [ %79, %71 ]
  %83 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %61, i64 0, i32 1, i32 0, i32 0, i32 2
  %84 = load i32, i32* %83, align 4
  %85 = getelementptr inbounds %"class.WTF::Vector.764", %"class.WTF::Vector.764"* %0, i64 0, i32 0, i32 0, i32 2
  store i32 %84, i32* %85, align 4
  %86 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %61, i64 0, i32 1, i32 0, i32 0, i32 0
  %87 = load i32*, i32** %86, align 8
  %88 = icmp ne i32* %87, null
  %89 = and i1 %82, %88
  br i1 %89, label %90, label %94, !prof !3

90:                                               ; preds = %80
  %91 = zext i32 %84 to i64
  %92 = bitcast i32* %87 to i8*
  %93 = shl nuw nsw i64 %91, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %81, i8* nonnull align 4 %92, i64 %93, i1 false) #13
  br label %94

94:                                               ; preds = %90, %80, %63
  ret void
}

declare %"class.blink::Element"* @_ZNK5blink8AXObject10GetElementEv(%"class.blink::AXObject"*) local_unnamed_addr #4

declare zeroext i1 @_ZN5blink7Element38HasExplicitlySetAttrAssociatedElementsERKNS_13QualifiedNameE(%"class.blink::Element"*, %"class.blink::QualifiedName"* dereferenceable(8)) local_unnamed_addr #4

declare void @_ZN5blink7Element24GetElementArrayAttributeERKNS_13QualifiedNameE(%"class.absl::optional"* sret, %"class.blink::Element"*, %"class.blink::QualifiedName"* dereferenceable(8)) local_unnamed_addr #4

declare void @_ZN5blink8AXObject24TokenVectorFromAttributeEPNS_7ElementERN3WTF6VectorINS3_6StringELj0ENS3_18PartitionAllocatorEEERKNS_13QualifiedNameE(%"class.blink::Element"*, %"class.WTF::Vector.758"* dereferenceable(16), %"class.blink::QualifiedName"* dereferenceable(8)) local_unnamed_addr #4

declare %"class.blink::Element"* @_ZNK5blink9TreeScope14getElementByIdERKN3WTF12AtomicStringE(%"class.blink::TreeScope"*, %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #4

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink15AXRelationCache31MayHaveHTMLLabelViaForAttributeERKNS_11HTMLElementE(%"class.blink::AXRelationCache"* nocapture readonly, %"class.blink::HTMLElement"* nocapture readonly dereferenceable(104)) local_unnamed_addr #6 align 2 {
  %3 = getelementptr inbounds %"class.blink::HTMLElement", %"class.blink::HTMLElement"* %1, i64 0, i32 0, i32 3, i32 0, i32 0
  %4 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %3, align 8
  %5 = icmp eq %"class.blink::ElementData"* %4, null
  br i1 %5, label %63, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %4, i64 0, i32 3, i32 0, i32 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %9, label %63, label %10

10:                                               ; preds = %6
  %11 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names7kIdAttrE, align 8
  %12 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %4, i64 0, i32 0, i32 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = and i32 %13, 1
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %23, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.blink::ElementData"* %4 to %"class.blink::UniqueElementData"*
  %18 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %4, i64 1, i32 1
  %19 = bitcast %"class.blink::Member.311"* %18 to %"class.blink::Attribute"**
  %20 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %19, align 8
  %21 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %17, i64 0, i32 2, i32 0, i32 0, i32 2
  %22 = load i32, i32* %21, align 4
  br label %28

23:                                               ; preds = %10
  %24 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %4, i64 1
  %25 = bitcast %"class.blink::ElementData"* %24 to %"class.blink::Attribute"*
  %26 = lshr i32 %13, 1
  %27 = and i32 %26, 268435455
  br label %28

28:                                               ; preds = %23, %16
  %29 = phi %"class.blink::Attribute"* [ %25, %23 ], [ %20, %16 ]
  %30 = phi i32 [ %27, %23 ], [ %22, %16 ]
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %29, i64 %31
  %33 = icmp eq i32 %30, 0
  br i1 %33, label %61, label %34

34:                                               ; preds = %28
  %35 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %11, i64 0, i32 0, i32 0
  %36 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %35, align 8
  %37 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %36, i64 0, i32 3, i32 0, i32 0, i32 0
  %38 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %36, i64 0, i32 4, i32 0, i32 0, i32 0
  br label %39

39:                                               ; preds = %54, %34
  %40 = phi %"class.blink::Attribute"* [ %29, %34 ], [ %55, %54 ]
  %41 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %40, i64 0, i32 0, i32 0, i32 0
  %42 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %41, align 8
  %43 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %42, %36
  br i1 %43, label %57, label %44

44:                                               ; preds = %39
  %45 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %42, i64 0, i32 3, i32 0, i32 0, i32 0
  %46 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %45, align 8
  %47 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %37, align 8
  %48 = icmp eq %"class.WTF::StringImpl"* %46, %47
  br i1 %48, label %49, label %54

49:                                               ; preds = %44
  %50 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %42, i64 0, i32 4, i32 0, i32 0, i32 0
  %51 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %50, align 8
  %52 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %38, align 8
  %53 = icmp eq %"class.WTF::StringImpl"* %51, %52
  br i1 %53, label %57, label %54

54:                                               ; preds = %49, %44
  %55 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %40, i64 1
  %56 = icmp eq %"class.blink::Attribute"* %55, %32
  br i1 %56, label %61, label %39

57:                                               ; preds = %49, %39
  %58 = icmp eq %"class.blink::Attribute"* %40, null
  br i1 %58, label %61, label %59

59:                                               ; preds = %57
  %60 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %40, i64 0, i32 1
  br label %65

61:                                               ; preds = %54, %57, %28
  %62 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  br label %65

63:                                               ; preds = %6, %2
  %64 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  br label %65

65:                                               ; preds = %59, %61, %63
  %66 = phi %"class.WTF::AtomicString"* [ %64, %63 ], [ %62, %61 ], [ %60, %59 ]
  %67 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %66, i64 0, i32 0, i32 0, i32 0
  %68 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %67, align 8
  %69 = icmp eq %"class.WTF::StringImpl"* %68, null
  br i1 %69, label %128, label %70

70:                                               ; preds = %65
  %71 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %68, i64 0, i32 1
  %72 = load i32, i32* %71, align 4
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %128, label %74

74:                                               ; preds = %70
  %75 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 6, i32 0, i32 0
  %76 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %75, align 8
  %77 = icmp eq %"class.WTF::AtomicString"* %76, null
  br i1 %77, label %125, label %78

78:                                               ; preds = %74
  %79 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 6, i32 0, i32 1
  %80 = load i32, i32* %79, align 8
  %81 = add i32 %80, -1
  %82 = zext i32 %81 to i64
  %83 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %68, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %84 = load atomic i32, i32* %83 monotonic, align 4
  %85 = lshr i32 %84, 8
  %86 = and i32 %85, %81
  %87 = zext i32 %86 to i64
  %88 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %76, i64 %87
  %89 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %88, i64 0, i32 0, i32 0, i32 0
  %90 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %89, align 8
  %91 = icmp eq %"class.WTF::StringImpl"* %90, null
  br i1 %91, label %125, label %92

92:                                               ; preds = %78
  %93 = xor i32 %85, -1
  %94 = lshr i32 %84, 31
  %95 = add nsw i32 %94, %93
  %96 = shl i32 %95, 12
  %97 = xor i32 %96, %95
  %98 = lshr i32 %97, 7
  %99 = xor i32 %98, %97
  %100 = shl i32 %99, 2
  %101 = xor i32 %100, %99
  %102 = lshr i32 %101, 20
  %103 = xor i32 %102, %101
  %104 = or i32 %103, 1
  %105 = zext i32 %104 to i64
  br label %106

106:                                              ; preds = %116, %92
  %107 = phi %"class.WTF::StringImpl"* [ %90, %92 ], [ %123, %116 ]
  %108 = phi %"class.WTF::AtomicString"* [ %88, %92 ], [ %121, %116 ]
  %109 = phi i64 [ %87, %92 ], [ %120, %116 ]
  %110 = phi i64 [ 0, %92 ], [ %118, %116 ]
  %111 = bitcast %"class.WTF::AtomicString"* %108 to i8**
  %112 = load i8*, i8** %111, align 8
  %113 = icmp ne i8* %112, inttoptr (i64 -1 to i8*)
  %114 = icmp eq %"class.WTF::StringImpl"* %107, %68
  %115 = and i1 %114, %113
  br i1 %115, label %125, label %116

116:                                              ; preds = %106
  %117 = icmp eq i64 %110, 0
  %118 = select i1 %117, i64 %105, i64 %110
  %119 = add i64 %118, %109
  %120 = and i64 %119, %82
  %121 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %76, i64 %120
  %122 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %121, i64 0, i32 0, i32 0, i32 0
  %123 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %122, align 8
  %124 = icmp eq %"class.WTF::StringImpl"* %123, null
  br i1 %124, label %125, label %106

125:                                              ; preds = %106, %116, %74, %78
  %126 = phi %"class.WTF::AtomicString"* [ null, %74 ], [ null, %78 ], [ null, %116 ], [ %108, %106 ]
  %127 = icmp ne %"class.WTF::AtomicString"* %126, null
  br label %128

128:                                              ; preds = %65, %70, %125
  %129 = phi i1 [ %127, %125 ], [ false, %70 ], [ false, %65 ]
  ret i1 %129
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15AXRelationCache17GetReverseRelatedEPNS_4NodeERNS_10HeapVectorINS_6MemberINS_8AXObjectEEELj0EEE(%"class.blink::AXRelationCache"*, %"class.blink::Node"* readonly, %"class.blink::HeapVector.381"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.blink::AXObject"*, align 8
  %5 = icmp eq %"class.blink::Node"* %1, null
  br i1 %5, label %216, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %1, i64 0, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = and i32 %8, 12
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %216

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %1, i64 1, i32 3
  %13 = bitcast %"class.blink::Member.279"* %12 to %"class.blink::ElementData"**
  %14 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %13, align 8
  %15 = icmp eq %"class.blink::ElementData"* %14, null
  br i1 %15, label %216, label %16

16:                                               ; preds = %11
  %17 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %14, i64 0, i32 3, i32 0, i32 0, i32 0
  %18 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %17, align 8
  %19 = icmp eq %"class.WTF::StringImpl"* %18, null
  br i1 %19, label %216, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 5
  %22 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names7kIdAttrE, align 8
  %23 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %14, i64 0, i32 0, i32 0, i32 0
  %24 = load i32, i32* %23, align 4
  %25 = and i32 %24, 1
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %20
  %28 = bitcast %"class.blink::ElementData"* %14 to %"class.blink::UniqueElementData"*
  %29 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %14, i64 1, i32 1
  %30 = bitcast %"class.blink::Member.311"* %29 to %"class.blink::Attribute"**
  %31 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %30, align 8
  %32 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %28, i64 0, i32 2, i32 0, i32 0, i32 2
  %33 = load i32, i32* %32, align 4
  br label %39

34:                                               ; preds = %20
  %35 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %14, i64 1
  %36 = bitcast %"class.blink::ElementData"* %35 to %"class.blink::Attribute"*
  %37 = lshr i32 %24, 1
  %38 = and i32 %37, 268435455
  br label %39

39:                                               ; preds = %34, %27
  %40 = phi %"class.blink::Attribute"* [ %36, %34 ], [ %31, %27 ]
  %41 = phi i32 [ %38, %34 ], [ %33, %27 ]
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %40, i64 %42
  %44 = icmp eq i32 %41, 0
  br i1 %44, label %72, label %45

45:                                               ; preds = %39
  %46 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %22, i64 0, i32 0, i32 0
  %47 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %46, align 8
  %48 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %47, i64 0, i32 3, i32 0, i32 0, i32 0
  %49 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %47, i64 0, i32 4, i32 0, i32 0, i32 0
  br label %50

50:                                               ; preds = %65, %45
  %51 = phi %"class.blink::Attribute"* [ %40, %45 ], [ %66, %65 ]
  %52 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %51, i64 0, i32 0, i32 0, i32 0
  %53 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %52, align 8
  %54 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %53, %47
  br i1 %54, label %68, label %55

55:                                               ; preds = %50
  %56 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %53, i64 0, i32 3, i32 0, i32 0, i32 0
  %57 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %56, align 8
  %58 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %48, align 8
  %59 = icmp eq %"class.WTF::StringImpl"* %57, %58
  br i1 %59, label %60, label %65

60:                                               ; preds = %55
  %61 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %53, i64 0, i32 4, i32 0, i32 0, i32 0
  %62 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %61, align 8
  %63 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %49, align 8
  %64 = icmp eq %"class.WTF::StringImpl"* %62, %63
  br i1 %64, label %68, label %65

65:                                               ; preds = %60, %55
  %66 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %51, i64 1
  %67 = icmp eq %"class.blink::Attribute"* %66, %43
  br i1 %67, label %72, label %50

68:                                               ; preds = %60, %50
  %69 = icmp eq %"class.blink::Attribute"* %51, null
  br i1 %69, label %72, label %70

70:                                               ; preds = %68
  %71 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %51, i64 0, i32 1
  br label %74

72:                                               ; preds = %65, %68, %39
  %73 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  br label %74

74:                                               ; preds = %70, %72
  %75 = phi %"class.WTF::AtomicString"* [ %73, %72 ], [ %71, %70 ]
  %76 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %75, i64 0, i32 0
  %77 = getelementptr inbounds %"class.WTF::HashMap.256", %"class.WTF::HashMap.256"* %21, i64 0, i32 0
  %78 = tail call { %"struct.WTF::KeyValuePair.260"*, %"struct.WTF::KeyValuePair.260"* } @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_7HashSetIjNS_7IntHashIjEENS_10HashTraitsIjEENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS6_IS1_EENS6_IS9_EEEESE_S8_E4findERKS1_(%"class.WTF::HashTable.257"* %77, %"class.WTF::String"* dereferenceable(8) %76) #13
  %79 = extractvalue { %"struct.WTF::KeyValuePair.260"*, %"struct.WTF::KeyValuePair.260"* } %78, 0
  %80 = getelementptr inbounds %"class.WTF::HashMap.256", %"class.WTF::HashMap.256"* %21, i64 0, i32 0, i32 0
  %81 = load %"struct.WTF::KeyValuePair.260"*, %"struct.WTF::KeyValuePair.260"** %80, align 8
  %82 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 5, i32 0, i32 1
  %83 = load i32, i32* %82, align 8
  %84 = zext i32 %83 to i64
  %85 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %81, i64 %84
  %86 = icmp eq %"struct.WTF::KeyValuePair.260"* %79, %85
  br i1 %86, label %216, label %87

87:                                               ; preds = %74
  %88 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %79, i64 0, i32 1, i32 0, i32 2
  %89 = load i32, i32* %88, align 4
  %90 = icmp eq i32 %89, 0
  %91 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %79, i64 0, i32 1, i32 0, i32 0
  %92 = load i32*, i32** %91, align 8
  %93 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %79, i64 0, i32 1, i32 0, i32 1
  %94 = load i32, i32* %93, align 8
  %95 = zext i32 %94 to i64
  %96 = getelementptr inbounds i32, i32* %92, i64 %95
  br i1 %90, label %216, label %97

97:                                               ; preds = %87
  %98 = icmp eq i32 %94, 0
  br i1 %98, label %107, label %99

99:                                               ; preds = %97, %104
  %100 = phi i32* [ %105, %104 ], [ %92, %97 ]
  %101 = load i32, i32* %100, align 4
  %102 = add i32 %101, 1
  %103 = icmp ult i32 %102, 2
  br i1 %103, label %104, label %107

104:                                              ; preds = %99
  %105 = getelementptr inbounds i32, i32* %100, i64 1
  %106 = icmp eq i32* %105, %96
  br i1 %106, label %216, label %99

107:                                              ; preds = %99, %97
  %108 = phi i32* [ %92, %97 ], [ %100, %99 ]
  %109 = icmp eq i32* %108, %96
  br i1 %109, label %216, label %110

110:                                              ; preds = %107
  %111 = bitcast %"class.blink::AXObject"** %4 to i8*
  %112 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 2, i32 0, i32 0
  %113 = getelementptr inbounds %"class.blink::HeapVector.381", %"class.blink::HeapVector.381"* %2, i64 0, i32 0, i32 0, i32 0, i32 2
  %114 = getelementptr inbounds %"class.blink::HeapVector.381", %"class.blink::HeapVector.381"* %2, i64 0, i32 0, i32 0, i32 0, i32 1
  %115 = getelementptr inbounds %"class.blink::HeapVector.381", %"class.blink::HeapVector.381"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %116 = getelementptr inbounds %"class.blink::HeapVector.381", %"class.blink::HeapVector.381"* %2, i64 0, i32 0
  br label %117

117:                                              ; preds = %110, %214
  %118 = phi i32* [ %108, %110 ], [ %207, %214 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %111) #13
  store %"class.blink::AXObject"* inttoptr (i64 -6148914691236517206 to %"class.blink::AXObject"*), %"class.blink::AXObject"** %4, align 8
  %119 = load i32, i32* %118, align 4
  %120 = load %"class.blink::AXObjectCacheImpl"*, %"class.blink::AXObjectCacheImpl"** %112, align 8
  %121 = getelementptr inbounds %"class.blink::AXObjectCacheImpl", %"class.blink::AXObjectCacheImpl"* %120, i64 0, i32 5, i32 0, i32 0, i32 0
  %122 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %121, align 8
  %123 = icmp eq %"struct.WTF::KeyValuePair"* %122, null
  br i1 %123, label %179, label %124

124:                                              ; preds = %117
  %125 = getelementptr inbounds %"class.blink::AXObjectCacheImpl", %"class.blink::AXObjectCacheImpl"* %120, i64 0, i32 5, i32 0, i32 0, i32 1
  %126 = load i32, i32* %125, align 8
  %127 = add i32 %126, -1
  %128 = zext i32 %127 to i64
  %129 = shl i32 %119, 15
  %130 = xor i32 %129, -1
  %131 = add i32 %119, %130
  %132 = lshr i32 %131, 10
  %133 = xor i32 %132, %131
  %134 = mul i32 %133, 9
  %135 = lshr i32 %134, 6
  %136 = xor i32 %135, %134
  %137 = shl i32 %136, 11
  %138 = xor i32 %137, -1
  %139 = add i32 %136, %138
  %140 = lshr i32 %139, 16
  %141 = xor i32 %140, %139
  %142 = and i32 %127, %141
  %143 = zext i32 %142 to i64
  %144 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %122, i64 %143
  %145 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %144, i64 0, i32 0
  %146 = load i32, i32* %145, align 4
  %147 = icmp eq i32 %146, %119
  br i1 %147, label %176, label %148

148:                                              ; preds = %124
  %149 = xor i32 %141, -1
  %150 = lshr i32 %139, 23
  %151 = add i32 %150, %149
  %152 = shl i32 %151, 12
  %153 = xor i32 %152, %151
  %154 = lshr i32 %153, 7
  %155 = xor i32 %154, %153
  %156 = shl i32 %155, 2
  %157 = xor i32 %156, %155
  %158 = lshr i32 %157, 20
  %159 = xor i32 %158, %157
  %160 = or i32 %159, 1
  %161 = zext i32 %160 to i64
  br label %162

162:                                              ; preds = %167, %148
  %163 = phi i32 [ %146, %148 ], [ %174, %167 ]
  %164 = phi i64 [ %143, %148 ], [ %171, %167 ]
  %165 = phi i64 [ 0, %148 ], [ %169, %167 ]
  %166 = icmp eq i32 %163, 0
  br i1 %166, label %179, label %167

167:                                              ; preds = %162
  %168 = icmp eq i64 %165, 0
  %169 = select i1 %168, i64 %161, i64 %165
  %170 = add i64 %169, %164
  %171 = and i64 %170, %128
  %172 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %122, i64 %171
  %173 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %172, i64 0, i32 0
  %174 = load i32, i32* %173, align 4
  %175 = icmp eq i32 %174, %119
  br i1 %175, label %176, label %162

176:                                              ; preds = %167, %124
  %177 = phi %"struct.WTF::KeyValuePair"* [ %144, %124 ], [ %172, %167 ]
  %178 = icmp eq %"struct.WTF::KeyValuePair"* %177, null
  br i1 %178, label %179, label %180

179:                                              ; preds = %162, %176, %117
  store %"class.blink::AXObject"* null, %"class.blink::AXObject"** %4, align 8
  br label %203

180:                                              ; preds = %176
  %181 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %177, i64 0, i32 1, i32 0, i32 0
  %182 = load %"class.blink::AXObject"*, %"class.blink::AXObject"** %181, align 8
  store %"class.blink::AXObject"* %182, %"class.blink::AXObject"** %4, align 8
  %183 = icmp eq %"class.blink::AXObject"* %182, null
  %184 = ptrtoint %"class.blink::AXObject"* %182 to i64
  br i1 %183, label %203, label %185

185:                                              ; preds = %180
  %186 = load i32, i32* %113, align 4
  %187 = load i32, i32* %114, align 8
  %188 = icmp eq i32 %186, %187
  br i1 %188, label %202, label %189, !prof !2

189:                                              ; preds = %185
  %190 = load %"class.blink::Member.380"*, %"class.blink::Member.380"** %115, align 8
  %191 = zext i32 %186 to i64
  %192 = getelementptr inbounds %"class.blink::Member.380", %"class.blink::Member.380"* %190, i64 %191
  %193 = bitcast %"class.blink::Member.380"* %192 to i64*
  store atomic i64 %184, i64* %193 monotonic, align 8
  %194 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %195 = icmp eq i32 %194, 0
  br i1 %195, label %199, label %196

196:                                              ; preds = %189
  %197 = bitcast %"class.blink::AXObject"* %182 to i8*
  %198 = call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* nonnull %197) #13
  br label %199

199:                                              ; preds = %196, %189
  %200 = load i32, i32* %113, align 4
  %201 = add i32 %200, 1
  store i32 %201, i32* %113, align 4
  br label %203

202:                                              ; preds = %185
  call void @_ZN3WTF6VectorIN5blink6MemberINS1_8AXObjectEEELj0ENS1_13HeapAllocatorEE14AppendSlowCaseIRPS3_EEvOT_(%"class.WTF::Vector.384"* %116, %"class.blink::AXObject"** nonnull dereferenceable(8) %4) #13
  br label %203

203:                                              ; preds = %202, %199, %179, %180
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %111) #13
  %204 = getelementptr inbounds i32, i32* %118, i64 1
  %205 = icmp eq i32* %204, %96
  br i1 %205, label %216, label %206

206:                                              ; preds = %203, %211
  %207 = phi i32* [ %212, %211 ], [ %204, %203 ]
  %208 = load i32, i32* %207, align 4
  %209 = add i32 %208, 1
  %210 = icmp ult i32 %209, 2
  br i1 %210, label %211, label %214

211:                                              ; preds = %206
  %212 = getelementptr inbounds i32, i32* %207, i64 1
  %213 = icmp eq i32* %212, %96
  br i1 %213, label %216, label %206

214:                                              ; preds = %206
  %215 = icmp eq i32* %207, %96
  br i1 %215, label %216, label %117

216:                                              ; preds = %104, %203, %214, %211, %87, %107, %16, %6, %11, %3, %74
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15AXRelationCache17UpdateRelatedTreeEPNS_4NodeEPNS_8AXObjectE(%"class.blink::AXRelationCache"*, %"class.blink::Node"*, %"class.blink::AXObject"* readonly) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.blink::HeapVector.381", align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast %"class.blink::HeapVector.381"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #13
  %8 = getelementptr inbounds %"class.blink::HeapVector.381", %"class.blink::HeapVector.381"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  %9 = getelementptr inbounds %"class.blink::HeapVector.381", %"class.blink::HeapVector.381"* %4, i64 0, i32 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 0, i64 16, i1 false) #13
  %10 = icmp eq %"class.blink::AXObject"* %2, null
  br i1 %10, label %11, label %16

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 2, i32 0, i32 0
  %13 = load %"class.blink::AXObjectCacheImpl"*, %"class.blink::AXObjectCacheImpl"** %12, align 8
  %14 = tail call %"class.blink::AXObject"* @_ZN5blink17AXObjectCacheImpl3GetEPKNS_4NodeE(%"class.blink::AXObjectCacheImpl"* %13, %"class.blink::Node"* %1) #13
  %15 = icmp eq %"class.blink::AXObject"* %14, null
  br i1 %15, label %85, label %16

16:                                               ; preds = %3, %11
  %17 = phi %"class.blink::AXObject"* [ %14, %11 ], [ %2, %3 ]
  %18 = getelementptr inbounds %"class.blink::AXObject", %"class.blink::AXObject"* %17, i64 0, i32 1
  %19 = load i32, i32* %18, align 8
  %20 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 4, i32 0, i32 0
  %21 = load %"struct.WTF::KeyValuePair.255"*, %"struct.WTF::KeyValuePair.255"** %20, align 8
  %22 = icmp eq %"struct.WTF::KeyValuePair.255"* %21, null
  br i1 %22, label %85, label %23

23:                                               ; preds = %16
  %24 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 4, i32 0, i32 1
  %25 = load i32, i32* %24, align 8
  %26 = add i32 %25, -1
  %27 = zext i32 %26 to i64
  %28 = shl i32 %19, 15
  %29 = xor i32 %28, -1
  %30 = add i32 %19, %29
  %31 = lshr i32 %30, 10
  %32 = xor i32 %31, %30
  %33 = mul i32 %32, 9
  %34 = lshr i32 %33, 6
  %35 = xor i32 %34, %33
  %36 = shl i32 %35, 11
  %37 = xor i32 %36, -1
  %38 = add i32 %35, %37
  %39 = lshr i32 %38, 16
  %40 = xor i32 %39, %38
  %41 = and i32 %26, %40
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds %"struct.WTF::KeyValuePair.255", %"struct.WTF::KeyValuePair.255"* %21, i64 %42
  %44 = getelementptr inbounds %"struct.WTF::KeyValuePair.255", %"struct.WTF::KeyValuePair.255"* %43, i64 0, i32 0
  %45 = load i32, i32* %44, align 4
  %46 = icmp eq i32 %45, %19
  br i1 %46, label %75, label %47

47:                                               ; preds = %23
  %48 = xor i32 %40, -1
  %49 = lshr i32 %38, 23
  %50 = add i32 %49, %48
  %51 = shl i32 %50, 12
  %52 = xor i32 %51, %50
  %53 = lshr i32 %52, 7
  %54 = xor i32 %53, %52
  %55 = shl i32 %54, 2
  %56 = xor i32 %55, %54
  %57 = lshr i32 %56, 20
  %58 = xor i32 %57, %56
  %59 = or i32 %58, 1
  %60 = zext i32 %59 to i64
  br label %61

61:                                               ; preds = %66, %47
  %62 = phi i32 [ %45, %47 ], [ %73, %66 ]
  %63 = phi i64 [ %42, %47 ], [ %70, %66 ]
  %64 = phi i64 [ 0, %47 ], [ %68, %66 ]
  %65 = icmp eq i32 %62, 0
  br i1 %65, label %85, label %66

66:                                               ; preds = %61
  %67 = icmp eq i64 %64, 0
  %68 = select i1 %67, i64 %60, i64 %64
  %69 = add i64 %68, %63
  %70 = and i64 %69, %27
  %71 = getelementptr inbounds %"struct.WTF::KeyValuePair.255", %"struct.WTF::KeyValuePair.255"* %21, i64 %70
  %72 = getelementptr inbounds %"struct.WTF::KeyValuePair.255", %"struct.WTF::KeyValuePair.255"* %71, i64 0, i32 0
  %73 = load i32, i32* %72, align 4
  %74 = icmp eq i32 %73, %19
  br i1 %74, label %75, label %61

75:                                               ; preds = %66, %23
  %76 = phi %"struct.WTF::KeyValuePair.255"* [ %43, %23 ], [ %71, %66 ]
  %77 = icmp eq %"struct.WTF::KeyValuePair.255"* %76, null
  br i1 %77, label %85, label %78

78:                                               ; preds = %75
  %79 = tail call %"class.blink::AXObject"* @_ZNK5blink15AXRelationCache18GetAriaOwnedParentEPKNS_8AXObjectE(%"class.blink::AXRelationCache"* %0, %"class.blink::AXObject"* nonnull %17)
  %80 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %80) #13
  %81 = getelementptr inbounds %"class.blink::AXObject", %"class.blink::AXObject"* %79, i64 0, i32 1
  %82 = load i32, i32* %81, align 8
  store i32 %82, i32* %5, align 4
  %83 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 7, i32 0
  %84 = call { i32*, i8 } @_ZN3WTF9HashTableIjjNS_17IdentityExtractorENS_7IntHashIjEENS_10HashTraitsIjEES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKjjEENS_18HashTableAddResultIS7_jEEOT0_OT1_(%"class.WTF::HashTable.25"* %83, i32* nonnull dereferenceable(4) %5, i32* nonnull dereferenceable(4) %5) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %80) #13
  br label %85

85:                                               ; preds = %61, %75, %16, %11, %78
  call void @_ZN5blink15AXRelationCache17GetReverseRelatedEPNS_4NodeERNS_10HeapVectorINS_6MemberINS_8AXObjectEEELj0EEE(%"class.blink::AXRelationCache"* %0, %"class.blink::Node"* %1, %"class.blink::HeapVector.381"* nonnull dereferenceable(16) %4)
  %86 = load %"class.blink::Member.380"*, %"class.blink::Member.380"** %8, align 8
  %87 = load i32, i32* %9, align 4
  %88 = zext i32 %87 to i64
  %89 = getelementptr inbounds %"class.blink::Member.380", %"class.blink::Member.380"* %86, i64 %88
  %90 = icmp eq i32 %87, 0
  br i1 %90, label %94, label %91

91:                                               ; preds = %85
  %92 = bitcast i32* %6 to i8*
  %93 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 7, i32 0
  br label %95

94:                                               ; preds = %108, %85
  call void @_ZN5blink15AXRelationCache17UpdateRelatedTextEPNS_4NodeE(%"class.blink::AXRelationCache"* %0, %"class.blink::Node"* %1)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #13
  ret void

95:                                               ; preds = %91, %108
  %96 = phi %"class.blink::Member.380"* [ %86, %91 ], [ %109, %108 ]
  %97 = getelementptr inbounds %"class.blink::Member.380", %"class.blink::Member.380"* %96, i64 0, i32 0, i32 0
  %98 = load %"class.blink::AXObject"*, %"class.blink::AXObject"** %97, align 8
  %99 = icmp eq %"class.blink::AXObject"* %98, null
  br i1 %99, label %108, label %100

100:                                              ; preds = %95
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %92) #13
  %101 = getelementptr inbounds %"class.blink::AXObject", %"class.blink::AXObject"* %98, i64 0, i32 1
  %102 = load i32, i32* %101, align 8
  store i32 %102, i32* %6, align 4
  %103 = call { i32*, i8 } @_ZN3WTF9HashTableIjjNS_17IdentityExtractorENS_7IntHashIjEENS_10HashTraitsIjEES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKjjEENS_18HashTableAddResultIS7_jEEOT0_OT1_(%"class.WTF::HashTable.25"* %93, i32* nonnull dereferenceable(4) %6, i32* nonnull dereferenceable(4) %6) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %92) #13
  %104 = bitcast %"class.blink::AXObject"* %98 to void (%"class.blink::AXObject"*)***
  %105 = load void (%"class.blink::AXObject"*)**, void (%"class.blink::AXObject"*)*** %104, align 8
  %106 = getelementptr inbounds void (%"class.blink::AXObject"*)*, void (%"class.blink::AXObject"*)** %105, i64 154
  %107 = load void (%"class.blink::AXObject"*)*, void (%"class.blink::AXObject"*)** %106, align 8
  call void %107(%"class.blink::AXObject"* nonnull %98) #13
  br label %108

108:                                              ; preds = %95, %100
  %109 = getelementptr inbounds %"class.blink::Member.380", %"class.blink::Member.380"* %96, i64 1
  %110 = icmp eq %"class.blink::Member.380"* %109, %89
  br i1 %110, label %94, label %95
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::AXObject"* @_ZN5blink15AXRelationCache3GetEPNS_4NodeE(%"class.blink::AXRelationCache"* nocapture readonly, %"class.blink::Node"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 2, i32 0, i32 0
  %4 = load %"class.blink::AXObjectCacheImpl"*, %"class.blink::AXObjectCacheImpl"** %3, align 8
  %5 = tail call %"class.blink::AXObject"* @_ZN5blink17AXObjectCacheImpl3GetEPKNS_4NodeE(%"class.blink::AXObjectCacheImpl"* %4, %"class.blink::Node"* %1) #13
  ret %"class.blink::AXObject"* %5
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15AXRelationCache17UpdateRelatedTextEPNS_4NodeE(%"class.blink::AXRelationCache"*, %"class.blink::Node"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.blink::HeapVector.381", align 8
  %4 = icmp eq %"class.blink::Node"* %1, null
  br i1 %4, label %12, label %5

5:                                                ; preds = %2
  %6 = bitcast %"class.blink::HeapVector.381"* %3 to i8*
  %7 = getelementptr inbounds %"class.blink::HeapVector.381", %"class.blink::HeapVector.381"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %8 = getelementptr inbounds %"class.blink::HeapVector.381", %"class.blink::HeapVector.381"* %3, i64 0, i32 0, i32 0, i32 0, i32 2
  %9 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 2, i32 0, i32 0
  %10 = load %"class.blink::HTMLQualifiedName"*, %"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names9kLabelTagE, align 8
  %11 = getelementptr inbounds %"class.blink::HTMLQualifiedName", %"class.blink::HTMLQualifiedName"* %10, i64 0, i32 0, i32 0, i32 0
  br label %13

12:                                               ; preds = %56, %2
  ret void

13:                                               ; preds = %5, %56
  %14 = phi %"class.blink::Node"* [ %1, %5 ], [ %58, %56 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 0, i64 16, i1 false) #13
  call void @_ZN5blink15AXRelationCache17GetReverseRelatedEPNS_4NodeERNS_10HeapVectorINS_6MemberINS_8AXObjectEEELj0EEE(%"class.blink::AXRelationCache"* %0, %"class.blink::Node"* nonnull %14, %"class.blink::HeapVector.381"* nonnull dereferenceable(16) %3)
  %15 = load %"class.blink::Member.380"*, %"class.blink::Member.380"** %7, align 8
  %16 = load i32, i32* %8, align 4
  %17 = zext i32 %16 to i64
  %18 = getelementptr inbounds %"class.blink::Member.380", %"class.blink::Member.380"* %15, i64 %17
  %19 = icmp eq i32 %16, 0
  br i1 %19, label %20, label %22

20:                                               ; preds = %29, %13
  %21 = icmp eq %"class.blink::Node"* %14, %1
  br i1 %21, label %40, label %32

22:                                               ; preds = %13, %29
  %23 = phi %"class.blink::Member.380"* [ %30, %29 ], [ %15, %13 ]
  %24 = getelementptr inbounds %"class.blink::Member.380", %"class.blink::Member.380"* %23, i64 0, i32 0, i32 0
  %25 = load %"class.blink::AXObject"*, %"class.blink::AXObject"** %24, align 8
  %26 = icmp eq %"class.blink::AXObject"* %25, null
  br i1 %26, label %29, label %27

27:                                               ; preds = %22
  %28 = load %"class.blink::AXObjectCacheImpl"*, %"class.blink::AXObjectCacheImpl"** %9, align 8
  call void @_ZN5blink17AXObjectCacheImpl32MarkAXObjectDirtyWithCleanLayoutEPNS_8AXObjectEbN2ax5mojom6ActionE(%"class.blink::AXObjectCacheImpl"* %28, %"class.blink::AXObject"* nonnull %25, i1 zeroext false, i32 0) #13
  br label %29

29:                                               ; preds = %22, %27
  %30 = getelementptr inbounds %"class.blink::Member.380", %"class.blink::Member.380"* %23, i64 1
  %31 = icmp eq %"class.blink::Member.380"* %30, %18
  br i1 %31, label %20, label %22

32:                                               ; preds = %20
  %33 = load %"class.blink::AXObjectCacheImpl"*, %"class.blink::AXObjectCacheImpl"** %9, align 8
  %34 = call %"class.blink::AXObject"* @_ZN5blink17AXObjectCacheImpl3GetEPKNS_4NodeE(%"class.blink::AXObjectCacheImpl"* %33, %"class.blink::Node"* nonnull %14) #13
  %35 = icmp eq %"class.blink::AXObject"* %34, null
  br i1 %35, label %40, label %36

36:                                               ; preds = %32
  %37 = call zeroext i1 @_ZNK5blink8AXObject24SupportsNameFromContentsEb(%"class.blink::AXObject"* nonnull %34, i1 zeroext false) #13
  br i1 %37, label %38, label %40

38:                                               ; preds = %36
  %39 = load %"class.blink::AXObjectCacheImpl"*, %"class.blink::AXObjectCacheImpl"** %9, align 8
  call void @_ZN5blink17AXObjectCacheImpl32MarkAXObjectDirtyWithCleanLayoutEPNS_8AXObjectEbN2ax5mojom6ActionE(%"class.blink::AXObjectCacheImpl"* %39, %"class.blink::AXObject"* nonnull %34, i1 zeroext false, i32 0) #13
  br label %40

40:                                               ; preds = %36, %38, %32, %20
  %41 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %14, i64 0, i32 1
  %42 = load i32, i32* %41, align 8
  %43 = and i32 %42, 48
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %56

45:                                               ; preds = %40
  %46 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %11, align 8
  %47 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %14, i64 1, i32 2
  %48 = bitcast %"class.blink::Member.278"* %47 to %"class.blink::QualifiedName::QualifiedNameImpl"**
  %49 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %48, align 8
  %50 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %49, i64 0, i32 3, i32 0, i32 0, i32 0
  %51 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %50, align 8
  %52 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %46, i64 0, i32 3, i32 0, i32 0, i32 0
  %53 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %52, align 8
  %54 = icmp eq %"class.WTF::StringImpl"* %51, %53
  br i1 %54, label %55, label %56

55:                                               ; preds = %45
  call void @_ZN5blink15AXRelationCache12LabelChangedEPNS_4NodeE(%"class.blink::AXRelationCache"* %0, %"class.blink::Node"* nonnull %14)
  br label %56

56:                                               ; preds = %40, %55, %45
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #13
  %57 = call %"class.blink::ContainerNode"* @_ZNK5blink4Node10parentNodeEv(%"class.blink::Node"* nonnull %14) #13
  %58 = getelementptr inbounds %"class.blink::ContainerNode", %"class.blink::ContainerNode"* %57, i64 0, i32 0
  %59 = icmp eq %"class.blink::ContainerNode"* %57, null
  br i1 %59, label %12, label %13
}

declare void @_ZN5blink17AXObjectCacheImpl32MarkAXObjectDirtyWithCleanLayoutEPNS_8AXObjectEbN2ax5mojom6ActionE(%"class.blink::AXObjectCacheImpl"*, %"class.blink::AXObject"*, i1 zeroext, i32) local_unnamed_addr #4

declare zeroext i1 @_ZNK5blink8AXObject24SupportsNameFromContentsEb(%"class.blink::AXObject"*, i1 zeroext) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15AXRelationCache12LabelChangedEPNS_4NodeE(%"class.blink::AXRelationCache"*, %"class.blink::Node"*) local_unnamed_addr #0 align 2 {
  %3 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names8kForAttrE, align 8
  %4 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %1, i64 1, i32 3
  %5 = bitcast %"class.blink::Member.279"* %4 to %"class.blink::ElementData"**
  %6 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %5, align 8
  %7 = icmp eq %"class.blink::ElementData"* %6, null
  br i1 %7, label %58, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %6, i64 0, i32 0, i32 0, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = and i32 %10, 1
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %20, label %13

13:                                               ; preds = %8
  %14 = bitcast %"class.blink::ElementData"* %6 to %"class.blink::UniqueElementData"*
  %15 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %6, i64 1, i32 1
  %16 = bitcast %"class.blink::Member.311"* %15 to %"class.blink::Attribute"**
  %17 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %16, align 8
  %18 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %14, i64 0, i32 2, i32 0, i32 0, i32 2
  %19 = load i32, i32* %18, align 4
  br label %25

20:                                               ; preds = %8
  %21 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %6, i64 1
  %22 = bitcast %"class.blink::ElementData"* %21 to %"class.blink::Attribute"*
  %23 = lshr i32 %10, 1
  %24 = and i32 %23, 268435455
  br label %25

25:                                               ; preds = %20, %13
  %26 = phi %"class.blink::Attribute"* [ %22, %20 ], [ %17, %13 ]
  %27 = phi i32 [ %24, %20 ], [ %19, %13 ]
  %28 = zext i32 %27 to i64
  %29 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %26, i64 %28
  %30 = icmp eq i32 %27, 0
  br i1 %30, label %58, label %31

31:                                               ; preds = %25
  %32 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %3, i64 0, i32 0, i32 0
  %33 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %32, align 8
  %34 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %33, i64 0, i32 3, i32 0, i32 0, i32 0
  %35 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %33, i64 0, i32 4, i32 0, i32 0, i32 0
  br label %36

36:                                               ; preds = %51, %31
  %37 = phi %"class.blink::Attribute"* [ %26, %31 ], [ %52, %51 ]
  %38 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %37, i64 0, i32 0, i32 0, i32 0
  %39 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %38, align 8
  %40 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %39, %33
  br i1 %40, label %54, label %41

41:                                               ; preds = %36
  %42 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %39, i64 0, i32 3, i32 0, i32 0, i32 0
  %43 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %42, align 8
  %44 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %34, align 8
  %45 = icmp eq %"class.WTF::StringImpl"* %43, %44
  br i1 %45, label %46, label %51

46:                                               ; preds = %41
  %47 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %39, i64 0, i32 4, i32 0, i32 0, i32 0
  %48 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %47, align 8
  %49 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %35, align 8
  %50 = icmp eq %"class.WTF::StringImpl"* %48, %49
  br i1 %50, label %54, label %51

51:                                               ; preds = %46, %41
  %52 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %37, i64 1
  %53 = icmp eq %"class.blink::Attribute"* %52, %29
  br i1 %53, label %58, label %36

54:                                               ; preds = %46, %36
  %55 = icmp eq %"class.blink::Attribute"* %37, null
  br i1 %55, label %58, label %56

56:                                               ; preds = %54
  %57 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %37, i64 0, i32 1
  br label %60

58:                                               ; preds = %51, %54, %25, %2
  %59 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  br label %60

60:                                               ; preds = %56, %58
  %61 = phi %"class.WTF::AtomicString"* [ %59, %58 ], [ %57, %56 ]
  %62 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %61, i64 0, i32 0, i32 0, i32 0
  %63 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %62, align 8
  %64 = icmp eq %"class.WTF::StringImpl"* %63, null
  br i1 %64, label %83, label %65

65:                                               ; preds = %60
  %66 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %63, i64 0, i32 1
  %67 = load i32, i32* %66, align 4
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %83, label %69

69:                                               ; preds = %65
  %70 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 6, i32 0
  %71 = tail call { %"class.WTF::AtomicString"*, i8 } @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_SC_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_(%"class.WTF::HashTable.268"* %70, %"class.WTF::AtomicString"* dereferenceable(8) %61, %"class.WTF::AtomicString"* dereferenceable(8) %61) #13
  %72 = bitcast %"class.blink::Node"* %1 to %"class.blink::HTMLLabelElement"*
  %73 = tail call %"class.blink::HTMLElement"* @_ZNK5blink16HTMLLabelElement7controlEv(%"class.blink::HTMLLabelElement"* %72) #13
  %74 = icmp eq %"class.blink::HTMLElement"* %73, null
  br i1 %74, label %83, label %75

75:                                               ; preds = %69
  %76 = getelementptr inbounds %"class.blink::HTMLElement", %"class.blink::HTMLElement"* %73, i64 0, i32 0, i32 0, i32 0
  %77 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 2, i32 0, i32 0
  %78 = load %"class.blink::AXObjectCacheImpl"*, %"class.blink::AXObjectCacheImpl"** %77, align 8
  %79 = tail call %"class.blink::AXObject"* @_ZN5blink17AXObjectCacheImpl3GetEPKNS_4NodeE(%"class.blink::AXObjectCacheImpl"* %78, %"class.blink::Node"* %76) #13
  %80 = icmp eq %"class.blink::AXObject"* %79, null
  br i1 %80, label %83, label %81

81:                                               ; preds = %75
  %82 = load %"class.blink::AXObjectCacheImpl"*, %"class.blink::AXObjectCacheImpl"** %77, align 8
  tail call void @_ZN5blink17AXObjectCacheImpl32MarkAXObjectDirtyWithCleanLayoutEPNS_8AXObjectEbN2ax5mojom6ActionE(%"class.blink::AXObjectCacheImpl"* %82, %"class.blink::AXObject"* nonnull %79, i1 zeroext false, i32 0) #13
  br label %83

83:                                               ; preds = %60, %69, %75, %81, %65
  ret void
}

declare %"class.blink::ContainerNode"* @_ZNK5blink4Node10parentNodeEv(%"class.blink::Node"*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15AXRelationCache10RemoveAXIDEj(%"class.blink::AXRelationCache"*, i32) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = alloca i32, align 4
  %7 = alloca %"class.WTF::Vector.764", align 8
  %8 = alloca i32, align 4
  %9 = alloca %"class.WTF::Vector.764", align 8
  %10 = alloca %"class.WTF::Vector.764", align 8
  store i32 %1, i32* %6, align 4
  %11 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 3
  %12 = getelementptr inbounds %"class.WTF::HashMap.246", %"class.WTF::HashMap.246"* %11, i64 0, i32 0, i32 0
  %13 = load %"struct.WTF::KeyValuePair.250"*, %"struct.WTF::KeyValuePair.250"** %12, align 8
  %14 = icmp eq %"struct.WTF::KeyValuePair.250"* %13, null
  br i1 %14, label %170, label %15

15:                                               ; preds = %2
  %16 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 3, i32 0, i32 1
  %17 = load i32, i32* %16, align 8
  %18 = add i32 %17, -1
  %19 = zext i32 %18 to i64
  %20 = shl i32 %1, 15
  %21 = xor i32 %20, -1
  %22 = add i32 %21, %1
  %23 = lshr i32 %22, 10
  %24 = xor i32 %23, %22
  %25 = mul i32 %24, 9
  %26 = lshr i32 %25, 6
  %27 = xor i32 %26, %25
  %28 = shl i32 %27, 11
  %29 = xor i32 %28, -1
  %30 = add i32 %27, %29
  %31 = lshr i32 %30, 16
  %32 = xor i32 %31, %30
  %33 = and i32 %18, %32
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %13, i64 %34
  %36 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %35, i64 0, i32 0
  %37 = load i32, i32* %36, align 4
  %38 = icmp eq i32 %37, %1
  br i1 %38, label %67, label %39

39:                                               ; preds = %15
  %40 = xor i32 %32, -1
  %41 = lshr i32 %30, 23
  %42 = add i32 %41, %40
  %43 = shl i32 %42, 12
  %44 = xor i32 %43, %42
  %45 = lshr i32 %44, 7
  %46 = xor i32 %45, %44
  %47 = shl i32 %46, 2
  %48 = xor i32 %47, %46
  %49 = lshr i32 %48, 20
  %50 = xor i32 %49, %48
  %51 = or i32 %50, 1
  %52 = zext i32 %51 to i64
  br label %53

53:                                               ; preds = %58, %39
  %54 = phi i32 [ %37, %39 ], [ %65, %58 ]
  %55 = phi i64 [ %34, %39 ], [ %62, %58 ]
  %56 = phi i64 [ 0, %39 ], [ %60, %58 ]
  %57 = icmp eq i32 %54, 0
  br i1 %57, label %170, label %58

58:                                               ; preds = %53
  %59 = icmp eq i64 %56, 0
  %60 = select i1 %59, i64 %52, i64 %56
  %61 = add i64 %60, %55
  %62 = and i64 %61, %19
  %63 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %13, i64 %62
  %64 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %63, i64 0, i32 0
  %65 = load i32, i32* %64, align 4
  %66 = icmp eq i32 %65, %1
  br i1 %66, label %67, label %53

67:                                               ; preds = %58, %15
  %68 = phi %"struct.WTF::KeyValuePair.250"* [ %35, %15 ], [ %63, %58 ]
  %69 = icmp eq %"struct.WTF::KeyValuePair.250"* %68, null
  br i1 %69, label %170, label %70

70:                                               ; preds = %67
  %71 = bitcast %"class.WTF::Vector.764"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %71) #13
  %72 = getelementptr inbounds %"class.WTF::Vector.764", %"class.WTF::Vector.764"* %7, i64 0, i32 0, i32 0, i32 0
  %73 = getelementptr inbounds %"class.WTF::Vector.764", %"class.WTF::Vector.764"* %7, i64 0, i32 0, i32 0, i32 2
  %74 = bitcast %"class.WTF::Vector.764"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %74, i8 -86, i64 16, i1 false)
  call void @_ZNK3WTF7HashMapIjNS_6VectorIjLj0ENS_18PartitionAllocatorEEENS_7IntHashIjEENS_10HashTraitsIjEENS6_IS3_EES2_E2atERKj(%"class.WTF::Vector.764"* nonnull sret %7, %"class.WTF::HashMap.246"* %11, i32* nonnull dereferenceable(4) %6)
  %75 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 4
  %76 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 4, i32 0, i32 2
  %77 = load i32, i32* %76, align 4
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %90, label %79

79:                                               ; preds = %70
  %80 = load i32, i32* %73, align 4
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %90, label %82

82:                                               ; preds = %79
  %83 = load i32*, i32** %72, align 8
  %84 = zext i32 %80 to i64
  %85 = getelementptr inbounds i32, i32* %83, i64 %84
  br label %86

86:                                               ; preds = %86, %82
  %87 = phi i32* [ %88, %86 ], [ %83, %82 ]
  call void @_ZN3WTF7HashMapIjjNS_7IntHashIjEENS_10HashTraitsIjEES4_NS_18PartitionAllocatorEE5eraseERKj(%"class.WTF::HashMap.251"* %75, i32* dereferenceable(4) %87) #13
  %88 = getelementptr inbounds i32, i32* %87, i64 1
  %89 = icmp eq i32* %88, %85
  br i1 %89, label %90, label %86

90:                                               ; preds = %86, %70, %79
  %91 = load %"struct.WTF::KeyValuePair.250"*, %"struct.WTF::KeyValuePair.250"** %12, align 8
  %92 = icmp eq %"struct.WTF::KeyValuePair.250"* %91, null
  %93 = load i32, i32* %16, align 8
  br i1 %92, label %150, label %94

94:                                               ; preds = %90
  %95 = add i32 %93, -1
  %96 = zext i32 %95 to i64
  %97 = load i32, i32* %6, align 4
  %98 = shl i32 %97, 15
  %99 = xor i32 %98, -1
  %100 = add i32 %97, %99
  %101 = lshr i32 %100, 10
  %102 = xor i32 %101, %100
  %103 = mul i32 %102, 9
  %104 = lshr i32 %103, 6
  %105 = xor i32 %104, %103
  %106 = shl i32 %105, 11
  %107 = xor i32 %106, -1
  %108 = add i32 %105, %107
  %109 = lshr i32 %108, 16
  %110 = xor i32 %109, %108
  %111 = and i32 %110, %95
  %112 = zext i32 %111 to i64
  %113 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %91, i64 %112
  %114 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %113, i64 0, i32 0
  %115 = load i32, i32* %114, align 4
  %116 = icmp eq i32 %115, %97
  br i1 %116, label %145, label %117

117:                                              ; preds = %94
  %118 = xor i32 %110, -1
  %119 = lshr i32 %108, 23
  %120 = add i32 %119, %118
  %121 = shl i32 %120, 12
  %122 = xor i32 %121, %120
  %123 = lshr i32 %122, 7
  %124 = xor i32 %123, %122
  %125 = shl i32 %124, 2
  %126 = xor i32 %125, %124
  %127 = lshr i32 %126, 20
  %128 = xor i32 %127, %126
  %129 = or i32 %128, 1
  %130 = zext i32 %129 to i64
  br label %131

131:                                              ; preds = %136, %117
  %132 = phi i32 [ %115, %117 ], [ %143, %136 ]
  %133 = phi i64 [ %112, %117 ], [ %140, %136 ]
  %134 = phi i64 [ 0, %117 ], [ %138, %136 ]
  %135 = icmp eq i32 %132, 0
  br i1 %135, label %150, label %136

136:                                              ; preds = %131
  %137 = icmp eq i64 %134, 0
  %138 = select i1 %137, i64 %130, i64 %134
  %139 = add i64 %138, %133
  %140 = and i64 %139, %96
  %141 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %91, i64 %140
  %142 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %141, i64 0, i32 0
  %143 = load i32, i32* %142, align 4
  %144 = icmp eq i32 %143, %97
  br i1 %144, label %145, label %131

145:                                              ; preds = %136, %94
  %146 = phi %"struct.WTF::KeyValuePair.250"* [ %113, %94 ], [ %141, %136 ]
  %147 = icmp eq %"struct.WTF::KeyValuePair.250"* %146, null
  br i1 %147, label %150, label %148

148:                                              ; preds = %145
  %149 = zext i32 %93 to i64
  br label %153

150:                                              ; preds = %131, %145, %90
  %151 = zext i32 %93 to i64
  %152 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %91, i64 %151
  br label %153

153:                                              ; preds = %150, %148
  %154 = phi i64 [ %149, %148 ], [ %151, %150 ]
  %155 = phi %"struct.WTF::KeyValuePair.250"* [ %146, %148 ], [ %152, %150 ]
  %156 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %91, i64 %154
  %157 = icmp eq %"struct.WTF::KeyValuePair.250"* %156, %155
  br i1 %157, label %160, label %158

158:                                              ; preds = %153
  %159 = getelementptr inbounds %"class.WTF::HashMap.246", %"class.WTF::HashMap.246"* %11, i64 0, i32 0
  call void @_ZN3WTF9HashTableIjNS_12KeyValuePairIjNS_6VectorIjLj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_7IntHashIjEENS_18HashMapValueTraitsINS_10HashTraitsIjEENSA_IS4_EEEESB_S3_E5eraseEPKS5_(%"class.WTF::HashTable.247"* %159, %"struct.WTF::KeyValuePair.250"* %155) #13
  br label %160

160:                                              ; preds = %153, %158
  %161 = load i32*, i32** %72, align 8
  %162 = icmp eq i32* %161, null
  %163 = bitcast i32* %161 to i8*
  br i1 %162, label %169, label %164, !prof !3

164:                                              ; preds = %160
  %165 = load i32, i32* %73, align 4
  %166 = icmp eq i32 %165, 0
  br i1 %166, label %168, label %167, !prof !2

167:                                              ; preds = %164
  store i32 0, i32* %73, align 4
  br label %168

168:                                              ; preds = %167, %164
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %163) #13
  store i32* null, i32** %72, align 8
  br label %169

169:                                              ; preds = %160, %168
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %71) #13
  br label %170

170:                                              ; preds = %53, %67, %2, %169
  %171 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 4
  %172 = getelementptr inbounds %"class.WTF::HashMap.251", %"class.WTF::HashMap.251"* %171, i64 0, i32 0, i32 0
  %173 = load %"struct.WTF::KeyValuePair.255"*, %"struct.WTF::KeyValuePair.255"** %172, align 8
  %174 = icmp eq %"struct.WTF::KeyValuePair.255"* %173, null
  br i1 %174, label %305, label %175

175:                                              ; preds = %170
  %176 = getelementptr inbounds %"class.blink::AXRelationCache", %"class.blink::AXRelationCache"* %0, i64 0, i32 4, i32 0, i32 1
  %177 = load i32, i32* %176, align 8
  %178 = add i32 %177, -1
  %179 = zext i32 %178 to i64
  %180 = load i32, i32* %6, align 4
  %181 = shl i32 %180, 15
  %182 = xor i32 %181, -1
  %183 = add i32 %180, %182
  %184 = lshr i32 %183, 10
  %185 = xor i32 %184, %183
  %186 = mul i32 %185, 9
  %187 = lshr i32 %186, 6
  %188 = xor i32 %187, %186
  %189 = shl i32 %188, 11
  %190 = xor i32 %189, -1
  %191 = add i32 %188, %190
  %192 = lshr i32 %191, 16
  %193 = xor i32 %192, %191
  %194 = and i32 %193, %178
  %195 = zext i32 %194 to i64
  %196 = getelementptr inbounds %"struct.WTF::KeyValuePair.255", %"struct.WTF::KeyValuePair.255"* %173, i64 %195
  %197 = getelementptr inbounds %"struct.WTF::KeyValuePair.255", %"struct.WTF::KeyValuePair.255"* %196, i64 0, i32 0
  %198 = load i32, i32* %197, align 4
  %199 = icmp eq i32 %198, %180
  br i1 %199, label %228, label %200

200:                                              ; preds = %175
  %201 = xor i32 %193, -1
  %202 = lshr i32 %191, 23
  %203 = add i32 %202, %201
  %204 = shl i32 %203, 12
  %205 = xor i32 %204, %203
  %206 = lshr i32 %205, 7
  %207 = xor i32 %206, %205
  %208 = shl i32 %207, 2
  %209 = xor i32 %208, %207
  %210 = lshr i32 %209, 20
  %211 = xor i32 %210, %209
  %212 = or i32 %211, 1
  %213 = zext i32 %212 to i64
  br label %214

214:                                              ; preds = %219, %200
  %215 = phi i32 [ %198, %200 ], [ %226, %219 ]
  %216 = phi i64 [ %195, %200 ], [ %223, %219 ]
  %217 = phi i64 [ 0, %200 ], [ %221, %219 ]
  %218 = icmp eq i32 %215, 0
  br i1 %218, label %305, label %219

219:                                              ; preds = %214
  %220 = icmp eq i64 %217, 0
  %221 = select i1 %220, i64 %213, i64 %217
  %222 = add i64 %221, %216
  %223 = and i64 %222, %179
  %224 = getelementptr inbounds %"struct.WTF::KeyValuePair.255", %"struct.WTF::KeyValuePair.255"* %173, i64 %223
  %225 = getelementptr inbounds %"struct.WTF::KeyValuePair.255", %"struct.WTF::KeyValuePair.255"* %224, i64 0, i32 0
  %226 = load i32, i32* %225, align 4
  %227 = icmp eq i32 %226, %180
  br i1 %227, label %228, label %214

228:                                              ; preds = %219, %175
  %229 = phi %"struct.WTF::KeyValuePair.255"* [ %196, %175 ], [ %224, %219 ]
  %230 = icmp eq %"struct.WTF::KeyValuePair.255"* %229, null
  br i1 %230, label %305, label %231

231:                                              ; preds = %228
  %232 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %232) #13
  %233 = call i32 @_ZN3WTF7HashMapIjjNS_7IntHashIjEENS_10HashTraitsIjEES4_NS_18PartitionAllocatorEE4TakeERKj(%"class.WTF::HashMap.251"* %171, i32* nonnull dereferenceable(4) %6)
  store i32 %233, i32* %8, align 4
  %234 = bitcast %"class.WTF::Vector.764"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %234) #13
  call void @_ZNK3WTF7HashMapIjNS_6VectorIjLj0ENS_18PartitionAllocatorEEENS_7IntHashIjEENS_10HashTraitsIjEENS6_IS3_EES2_E2atERKj(%"class.WTF::Vector.764"* nonnull sret %9, %"class.WTF::HashMap.246"* %11, i32* nonnull dereferenceable(4) %8)
  %235 = getelementptr inbounds %"class.WTF::Vector.764", %"class.WTF::Vector.764"* %9, i64 0, i32 0, i32 0, i32 2
  %236 = load i32, i32* %235, align 4
  %237 = icmp eq i32 %236, 0
  br i1 %237, label %294, label %238

238:                                              ; preds = %231, %290
  %239 = phi i32 [ %291, %290 ], [ 0, %231 ]
  %240 = call dereferenceable(4) i32* @_ZNK3WTF6VectorIjLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.764"* nonnull %9, i32 %239) #13
  %241 = load i32, i32* %240, align 4
  %242 = load i32, i32* %6, align 4
  %243 = icmp eq i32 %241, %242
  br i1 %243, label %244, label %290

244:                                              ; preds = %238
  %245 = bitcast %"class.WTF::Vector.764"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %245) #13
  call void @_ZNK3WTF7HashMapIjNS_6VectorIjLj0ENS_18PartitionAllocatorEEENS_7IntHashIjEENS_10HashTraitsIjEENS6_IS3_EES2_E2atERKj(%"class.WTF::Vector.764"* nonnull sret %10, %"class.WTF::HashMap.246"* %11, i32* nonnull dereferenceable(4) %8)
  %246 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %246) #13
  %247 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %247, align 8
  %248 = getelementptr inbounds %"class.WTF::Vector.764", %"class.WTF::Vector.764"* %10, i64 0, i32 0, i32 0, i32 2
  %249 = load i32, i32* %248, align 4
  %250 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %250) #13
  %251 = icmp ugt i32 %249, %239
  br i1 %251, label %252, label %253

252:                                              ; preds = %244
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %250) #13
  store i8* null, i8** %247, align 8
  br label %262

253:                                              ; preds = %244
  %254 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %239) #13
  %255 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %249) #13
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.13, i64 0, i64 0), i8* %254, i8* %255) #13
  %256 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %257 = load i8*, i8** %256, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %250) #13
  store i8* %257, i8** %247, align 8
  %258 = icmp eq i8* %257, null
  br i1 %258, label %262, label %259

259:                                              ; preds = %253
  %260 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %260) #13
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.2, i64 0, i64 0), i32 2050, %"class.logging::CheckOpResult"* nonnull %4) #13
  %261 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #13
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %260) #13
  br label %262

262:                                              ; preds = %259, %253, %252
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %246) #13
  %263 = getelementptr inbounds %"class.WTF::Vector.764", %"class.WTF::Vector.764"* %10, i64 0, i32 0, i32 0, i32 0
  %264 = load i32*, i32** %263, align 8
  %265 = zext i32 %239 to i64
  %266 = getelementptr inbounds i32, i32* %264, i64 %265
  %267 = getelementptr inbounds i32, i32* %266, i64 1
  %268 = icmp eq i32* %266, null
  br i1 %268, label %279, label %269, !prof !2

269:                                              ; preds = %262
  %270 = load i32, i32* %248, align 4
  %271 = zext i32 %270 to i64
  %272 = getelementptr inbounds i32, i32* %264, i64 %271
  %273 = bitcast i32* %266 to i8*
  %274 = bitcast i32* %267 to i8*
  %275 = ptrtoint i32* %272 to i64
  %276 = ptrtoint i32* %267 to i64
  %277 = sub i64 %275, %276
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %273, i8* nonnull align 4 %274, i64 %277, i1 false) #13
  %278 = load i32*, i32** %263, align 8
  br label %279

279:                                              ; preds = %262, %269
  %280 = phi i32* [ %264, %262 ], [ %278, %269 ]
  %281 = load i32, i32* %248, align 4
  %282 = add i32 %281, -1
  store i32 %282, i32* %248, align 4
  %283 = icmp eq i32* %280, null
  %284 = bitcast i32* %280 to i8*
  br i1 %283, label %289, label %285, !prof !3

285:                                              ; preds = %279
  %286 = icmp eq i32 %282, 0
  br i1 %286, label %288, label %287, !prof !2

287:                                              ; preds = %285
  store i32 0, i32* %248, align 4
  br label %288

288:                                              ; preds = %287, %285
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %284) #13
  store i32* null, i32** %263, align 8
  br label %289

289:                                              ; preds = %279, %288
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %245) #13
  br label %294

290:                                              ; preds = %238
  %291 = add nuw i32 %239, 1
  %292 = load i32, i32* %235, align 4
  %293 = icmp ult i32 %291, %292
  br i1 %293, label %238, label %294

294:                                              ; preds = %290, %231, %289
  %295 = getelementptr inbounds %"class.WTF::Vector.764", %"class.WTF::Vector.764"* %9, i64 0, i32 0, i32 0, i32 0
  %296 = load i32*, i32** %295, align 8
  %297 = icmp eq i32* %296, null
  %298 = bitcast i32* %296 to i8*
  br i1 %297, label %304, label %299, !prof !3

299:                                              ; preds = %294
  %300 = load i32, i32* %235, align 4
  %301 = icmp eq i32 %300, 0
  br i1 %301, label %303, label %302, !prof !2

302:                                              ; preds = %299
  store i32 0, i32* %235, align 4
  br label %303

303:                                              ; preds = %302, %299
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %298) #13
  store i32* null, i32** %295, align 8
  br label %304

304:                                              ; preds = %294, %303
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %234) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %232) #13
  br label %305

305:                                              ; preds = %214, %228, %170, %304
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3WTF7HashMapIjjNS_7IntHashIjEENS_10HashTraitsIjEES4_NS_18PartitionAllocatorEE4TakeERKj(%"class.WTF::HashMap.251"*, i32* dereferenceable(4)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::HashMap.251", %"class.WTF::HashMap.251"* %0, i64 0, i32 0, i32 0
  %4 = load %"struct.WTF::KeyValuePair.255"*, %"struct.WTF::KeyValuePair.255"** %3, align 8
  %5 = icmp eq %"struct.WTF::KeyValuePair.255"* %4, null
  %6 = getelementptr inbounds %"class.WTF::HashMap.251", %"class.WTF::HashMap.251"* %0, i64 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  br i1 %5, label %64, label %8

8:                                                ; preds = %2
  %9 = add i32 %7, -1
  %10 = zext i32 %9 to i64
  %11 = load i32, i32* %1, align 4
  %12 = shl i32 %11, 15
  %13 = xor i32 %12, -1
  %14 = add i32 %11, %13
  %15 = lshr i32 %14, 10
  %16 = xor i32 %15, %14
  %17 = mul i32 %16, 9
  %18 = lshr i32 %17, 6
  %19 = xor i32 %18, %17
  %20 = shl i32 %19, 11
  %21 = xor i32 %20, -1
  %22 = add i32 %19, %21
  %23 = lshr i32 %22, 16
  %24 = xor i32 %23, %22
  %25 = and i32 %24, %9
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds %"struct.WTF::KeyValuePair.255", %"struct.WTF::KeyValuePair.255"* %4, i64 %26
  %28 = getelementptr inbounds %"struct.WTF::KeyValuePair.255", %"struct.WTF::KeyValuePair.255"* %27, i64 0, i32 0
  %29 = load i32, i32* %28, align 4
  %30 = icmp eq i32 %29, %11
  br i1 %30, label %59, label %31

31:                                               ; preds = %8
  %32 = xor i32 %24, -1
  %33 = lshr i32 %22, 23
  %34 = add i32 %33, %32
  %35 = shl i32 %34, 12
  %36 = xor i32 %35, %34
  %37 = lshr i32 %36, 7
  %38 = xor i32 %37, %36
  %39 = shl i32 %38, 2
  %40 = xor i32 %39, %38
  %41 = lshr i32 %40, 20
  %42 = xor i32 %41, %40
  %43 = or i32 %42, 1
  %44 = zext i32 %43 to i64
  br label %45

45:                                               ; preds = %50, %31
  %46 = phi i32 [ %29, %31 ], [ %57, %50 ]
  %47 = phi i64 [ %26, %31 ], [ %54, %50 ]
  %48 = phi i64 [ 0, %31 ], [ %52, %50 ]
  %49 = icmp eq i32 %46, 0
  br i1 %49, label %64, label %50

50:                                               ; preds = %45
  %51 = icmp eq i64 %48, 0
  %52 = select i1 %51, i64 %44, i64 %48
  %53 = add i64 %52, %47
  %54 = and i64 %53, %10
  %55 = getelementptr inbounds %"struct.WTF::KeyValuePair.255", %"struct.WTF::KeyValuePair.255"* %4, i64 %54
  %56 = getelementptr inbounds %"struct.WTF::KeyValuePair.255", %"struct.WTF::KeyValuePair.255"* %55, i64 0, i32 0
  %57 = load i32, i32* %56, align 4
  %58 = icmp eq i32 %57, %11
  br i1 %58, label %59, label %45

59:                                               ; preds = %50, %8
  %60 = phi %"struct.WTF::KeyValuePair.255"* [ %27, %8 ], [ %55, %50 ]
  %61 = icmp eq %"struct.WTF::KeyValuePair.255"* %60, null
  br i1 %61, label %64, label %62

62:                                               ; preds = %59
  %63 = zext i32 %7 to i64
  br label %67

64:                                               ; preds = %45, %59, %2
  %65 = zext i32 %7 to i64
  %66 = getelementptr inbounds %"struct.WTF::KeyValuePair.255", %"struct.WTF::KeyValuePair.255"* %4, i64 %65
  br label %67

67:                                               ; preds = %62, %64
  %68 = phi i64 [ %63, %62 ], [ %65, %64 ]
  %69 = phi %"struct.WTF::KeyValuePair.255"* [ %60, %62 ], [ %66, %64 ]
  %70 = getelementptr inbounds %"struct.WTF::KeyValuePair.255", %"struct.WTF::KeyValuePair.255"* %4, i64 %68
  %71 = icmp eq %"struct.WTF::KeyValuePair.255"* %69, %70
  br i1 %71, label %98, label %72

72:                                               ; preds = %67
  %73 = getelementptr inbounds %"struct.WTF::KeyValuePair.255", %"struct.WTF::KeyValuePair.255"* %69, i64 0, i32 1
  %74 = load i32, i32* %73, align 4
  %75 = getelementptr inbounds %"struct.WTF::KeyValuePair.255", %"struct.WTF::KeyValuePair.255"* %69, i64 0, i32 0
  store i32 -1, i32* %75, align 4
  %76 = getelementptr inbounds %"class.WTF::HashMap.251", %"class.WTF::HashMap.251"* %0, i64 0, i32 0, i32 3
  %77 = load i32, i32* %76, align 8
  %78 = add i32 %77, 1
  %79 = and i32 %78, 2147483647
  %80 = and i32 %77, -2147483648
  %81 = or i32 %79, %80
  store i32 %81, i32* %76, align 8
  %82 = getelementptr inbounds %"class.WTF::HashMap.251", %"class.WTF::HashMap.251"* %0, i64 0, i32 0, i32 2
  %83 = load i32, i32* %82, align 4
  %84 = add i32 %83, -1
  store i32 %84, i32* %82, align 4
  %85 = mul i32 %84, 6
  %86 = load i32, i32* %6, align 8
  %87 = icmp ult i32 %85, %86
  %88 = icmp ugt i32 %86, 8
  %89 = and i1 %87, %88
  br i1 %89, label %90, label %98

90:                                               ; preds = %72
  %91 = getelementptr inbounds %"class.WTF::HashMap.251", %"class.WTF::HashMap.251"* %0, i64 0, i32 0
  %92 = lshr i32 %86, 1
  %93 = zext i32 %92 to i64
  %94 = shl nuw nsw i64 %93, 3
  %95 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %94, i8* getelementptr inbounds ([93 x i8], [93 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairIjjEEEEPKcv, i64 0, i64 0)) #13
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %95, i8 0, i64 %94, i1 false) #13
  %96 = bitcast i8* %95 to %"struct.WTF::KeyValuePair.255"*
  %97 = tail call %"struct.WTF::KeyValuePair.255"* @_ZN3WTF9HashTableIjNS_12KeyValuePairIjjEENS_24KeyValuePairKeyExtractorENS_7IntHashIjEENS_18HashMapValueTraitsINS_10HashTraitsIjEES8_EES8_NS_18PartitionAllocatorEE8RehashToEPS2_jSC_(%"class.WTF::HashTable.252"* %91, %"struct.WTF::KeyValuePair.255"* %96, i32 %92, %"struct.WTF::KeyValuePair.255"* null) #13
  br label %98

98:                                               ; preds = %90, %72, %67
  %99 = phi i32 [ 0, %67 ], [ %74, %72 ], [ %74, %90 ]
  ret i32 %99
}

declare %"class.blink::AXObject"* @_ZN5blink17AXObjectCacheImpl3GetEPKNS_4NodeE(%"class.blink::AXObjectCacheImpl"*, %"class.blink::Node"*) local_unnamed_addr #4

declare %"class.blink::AXObject"* @_ZN5blink17AXObjectCacheImpl11GetOrCreateEPNS_4NodeEPNS_8AXObjectE(%"class.blink::AXObjectCacheImpl"*, %"class.blink::Node"*, %"class.blink::AXObject"*) local_unnamed_addr #4

declare %"class.blink::HTMLElement"* @_ZNK5blink16HTMLLabelElement7controlEv(%"class.blink::HTMLLabelElement"*) local_unnamed_addr #4

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF21ConditionalDestructorINS_9HashTableINS_6StringENS_12KeyValuePairIS2_NS_7HashSetIjNS_7IntHashIjEENS_10HashTraitsIjEENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS7_IS2_EENS7_ISA_EEEESF_S9_EELb0EED2Ev(%"class.WTF::ConditionalDestructor.258"*) unnamed_addr #0 comdat align 2 {
  %2 = bitcast %"class.WTF::ConditionalDestructor.258"* %0 to %"struct.WTF::KeyValuePair.260"**
  %3 = load %"struct.WTF::KeyValuePair.260"*, %"struct.WTF::KeyValuePair.260"** %2, align 8
  %4 = icmp eq %"struct.WTF::KeyValuePair.260"* %3, null
  br i1 %4, label %48, label %5, !prof !3

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.WTF::ConditionalDestructor.258", %"class.WTF::ConditionalDestructor.258"* %0, i64 8
  %7 = bitcast %"class.WTF::ConditionalDestructor.258"* %6 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %46, label %10

10:                                               ; preds = %5
  %11 = zext i32 %8 to i64
  br label %12

12:                                               ; preds = %43, %10
  %13 = phi i64 [ 0, %10 ], [ %44, %43 ]
  %14 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %3, i64 %13
  %15 = bitcast %"struct.WTF::KeyValuePair.260"* %14 to i8**
  %16 = load i8*, i8** %15, align 8
  %17 = icmp eq i8* %16, inttoptr (i64 -1 to i8*)
  br i1 %17, label %43, label %18

18:                                               ; preds = %12
  %19 = bitcast i8* %16 to %"class.WTF::StringImpl"*
  %20 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %3, i64 %13, i32 1, i32 0, i32 0
  %21 = load i32*, i32** %20, align 8
  %22 = icmp eq i32* %21, null
  br i1 %22, label %27, label %23, !prof !3

23:                                               ; preds = %18
  %24 = bitcast i32* %21 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %24) #13
  store i32* null, i32** %20, align 8
  %25 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %14, i64 0, i32 0, i32 0, i32 0
  %26 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %25, align 8
  br label %27

27:                                               ; preds = %23, %18
  %28 = phi %"class.WTF::StringImpl"* [ %26, %23 ], [ %19, %18 ]
  %29 = icmp eq %"class.WTF::StringImpl"* %28, null
  br i1 %29, label %43, label %30

30:                                               ; preds = %27
  %31 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %28, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load atomic i32, i32* %31 monotonic, align 4
  %33 = and i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %28, i64 0, i32 0
  %36 = load i32, i32* %35, align 4
  br i1 %34, label %37, label %39

37:                                               ; preds = %30
  %38 = add i32 %36, -1
  store i32 %38, i32* %35, align 4
  br label %39

39:                                               ; preds = %37, %30
  %40 = phi i32 [ %38, %37 ], [ %36, %30 ]
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %43

42:                                               ; preds = %39
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %28) #13
  br label %43

43:                                               ; preds = %42, %39, %27, %12
  %44 = add nuw nsw i64 %13, 1
  %45 = icmp eq i64 %44, %11
  br i1 %45, label %46, label %12

46:                                               ; preds = %43, %5
  %47 = bitcast %"struct.WTF::KeyValuePair.260"* %3 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %47) #13
  store %"struct.WTF::KeyValuePair.260"* null, %"struct.WTF::KeyValuePair.260"** %2, align 8
  br label %48

48:                                               ; preds = %1, %46
  ret void
}

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #4

declare i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64, i8*) local_unnamed_addr #4

declare i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"*) local_unnamed_addr #4

declare void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"*, i8*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"*) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #8

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #9

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"class.WTF::AtomicString"*, i8 } @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_SC_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_(%"class.WTF::HashTable.268"*, %"class.WTF::AtomicString"* dereferenceable(8), %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable.268", %"class.WTF::HashTable.268"* %0, i64 0, i32 0
  %5 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %4, align 8
  %6 = icmp eq %"class.WTF::AtomicString"* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call %"class.WTF::AtomicString"* @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6ExpandEPS1_(%"class.WTF::HashTable.268"* %0, %"class.WTF::AtomicString"* null)
  %9 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %4, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi %"class.WTF::AtomicString"* [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable.268", %"class.WTF::HashTable.268"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %17 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load atomic i32, i32* %18 monotonic, align 4
  %20 = lshr i32 %19, 8
  %21 = and i32 %20, %14
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %11, i64 %22
  %24 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %23, i64 0, i32 0, i32 0, i32 0
  %25 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %24, align 8
  %26 = icmp eq %"class.WTF::StringImpl"* %25, null
  br i1 %26, label %72, label %27

27:                                               ; preds = %10
  %28 = xor i32 %20, -1
  %29 = lshr i32 %19, 31
  %30 = add nsw i32 %29, %28
  %31 = shl i32 %30, 12
  %32 = xor i32 %31, %30
  %33 = lshr i32 %32, 7
  %34 = xor i32 %33, %32
  %35 = shl i32 %34, 2
  %36 = xor i32 %35, %34
  %37 = lshr i32 %36, 20
  %38 = xor i32 %37, %36
  %39 = or i32 %38, 1
  %40 = zext i32 %39 to i64
  br label %41

41:                                               ; preds = %27, %52
  %42 = phi %"class.WTF::StringImpl"* [ %25, %27 ], [ %60, %52 ]
  %43 = phi %"class.WTF::AtomicString"* [ %23, %27 ], [ %58, %52 ]
  %44 = phi %"class.WTF::AtomicString"* [ null, %27 ], [ %53, %52 ]
  %45 = phi i64 [ %22, %27 ], [ %57, %52 ]
  %46 = phi i64 [ 0, %27 ], [ %55, %52 ]
  %47 = bitcast %"class.WTF::AtomicString"* %43 to i8**
  %48 = load i8*, i8** %47, align 8
  %49 = icmp eq i8* %48, inttoptr (i64 -1 to i8*)
  br i1 %49, label %52, label %50

50:                                               ; preds = %41
  %51 = icmp eq %"class.WTF::StringImpl"* %42, %17
  br i1 %51, label %125, label %52

52:                                               ; preds = %41, %50
  %53 = phi %"class.WTF::AtomicString"* [ %44, %50 ], [ %43, %41 ]
  %54 = icmp eq i64 %46, 0
  %55 = select i1 %54, i64 %40, i64 %46
  %56 = add i64 %55, %45
  %57 = and i64 %56, %15
  %58 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %11, i64 %57
  %59 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %58, i64 0, i32 0, i32 0, i32 0
  %60 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %59, align 8
  %61 = icmp eq %"class.WTF::StringImpl"* %60, null
  br i1 %61, label %62, label %41

62:                                               ; preds = %52
  %63 = icmp eq %"class.WTF::AtomicString"* %53, null
  br i1 %63, label %72, label %64

64:                                               ; preds = %62
  %65 = bitcast %"class.WTF::AtomicString"* %53 to i64*
  store i64 0, i64* %65, align 8
  %66 = getelementptr inbounds %"class.WTF::HashTable.268", %"class.WTF::HashTable.268"* %0, i64 0, i32 3
  %67 = load i32, i32* %66, align 8
  %68 = add i32 %67, 2147483647
  %69 = and i32 %68, 2147483647
  %70 = and i32 %67, -2147483648
  %71 = or i32 %69, %70
  store i32 %71, i32* %66, align 8
  br label %72

72:                                               ; preds = %10, %62, %64
  %73 = phi %"class.WTF::AtomicString"* [ %53, %64 ], [ %58, %62 ], [ %23, %10 ]
  %74 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0, i32 0, i32 0
  %75 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %74, align 8
  %76 = icmp eq %"class.WTF::StringImpl"* %75, null
  br i1 %76, label %94, label %77

77:                                               ; preds = %72
  %78 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %75, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %79 = load atomic i32, i32* %78 monotonic, align 4
  %80 = and i32 %79, 2
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %94

82:                                               ; preds = %77
  %83 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %75, i64 0, i32 0
  %84 = load i32, i32* %83, align 4
  %85 = zext i32 %84 to i33
  %86 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %85, i33 1) #13
  %87 = extractvalue { i33, i1 } %86, 1
  %88 = extractvalue { i33, i1 } %86, 0
  %89 = icmp slt i33 %88, 0
  %90 = or i1 %87, %89
  br i1 %90, label %91, label %92, !prof !2

91:                                               ; preds = %82
  tail call void @llvm.trap() #13
  unreachable

92:                                               ; preds = %82
  %93 = trunc i33 %88 to i32
  store i32 %93, i32* %83, align 4
  br label %94

94:                                               ; preds = %92, %77, %72
  %95 = ptrtoint %"class.WTF::StringImpl"* %75 to i64
  %96 = bitcast %"class.WTF::AtomicString"* %73 to i64*
  %97 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %73, i64 0, i32 0, i32 0, i32 0
  %98 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %97, align 8
  store i64 %95, i64* %96, align 8
  %99 = icmp eq %"class.WTF::StringImpl"* %98, null
  br i1 %99, label %113, label %100

100:                                              ; preds = %94
  %101 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %98, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %102 = load atomic i32, i32* %101 monotonic, align 4
  %103 = and i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %98, i64 0, i32 0
  %106 = load i32, i32* %105, align 4
  br i1 %104, label %107, label %109

107:                                              ; preds = %100
  %108 = add i32 %106, -1
  store i32 %108, i32* %105, align 4
  br label %109

109:                                              ; preds = %107, %100
  %110 = phi i32 [ %108, %107 ], [ %106, %100 ]
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %112, label %113

112:                                              ; preds = %109
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %98) #13
  br label %113

113:                                              ; preds = %94, %109, %112
  %114 = getelementptr inbounds %"class.WTF::HashTable.268", %"class.WTF::HashTable.268"* %0, i64 0, i32 2
  %115 = load i32, i32* %114, align 4
  %116 = add i32 %115, 1
  store i32 %116, i32* %114, align 4
  %117 = getelementptr inbounds %"class.WTF::HashTable.268", %"class.WTF::HashTable.268"* %0, i64 0, i32 3
  %118 = load i32, i32* %117, align 8
  %119 = add i32 %118, %116
  %120 = shl i32 %119, 1
  %121 = load i32, i32* %12, align 8
  %122 = icmp ult i32 %120, %121
  br i1 %122, label %125, label %123

123:                                              ; preds = %113
  %124 = tail call %"class.WTF::AtomicString"* @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6ExpandEPS1_(%"class.WTF::HashTable.268"* %0, %"class.WTF::AtomicString"* %73)
  br label %125

125:                                              ; preds = %50, %113, %123
  %126 = phi i8 [ 1, %113 ], [ 1, %123 ], [ 0, %50 ]
  %127 = phi %"class.WTF::AtomicString"* [ %73, %113 ], [ %124, %123 ], [ %43, %50 ]
  %128 = insertvalue { %"class.WTF::AtomicString"*, i8 } undef, %"class.WTF::AtomicString"* %127, 0
  %129 = insertvalue { %"class.WTF::AtomicString"*, i8 } %128, i8 %126, 1
  ret { %"class.WTF::AtomicString"*, i8 } %129
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::AtomicString"* @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6ExpandEPS1_(%"class.WTF::HashTable.268"*, %"class.WTF::AtomicString"*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::HashTable.268", %"class.WTF::HashTable.268"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %31, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.WTF::HashTable.268", %"class.WTF::HashTable.268"* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = mul i32 %11, 6
  %13 = shl i32 %7, 1
  %14 = icmp ult i32 %12, %13
  br i1 %14, label %31, label %15

15:                                               ; preds = %9
  %16 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #13
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %17, align 8
  %18 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18)
  %19 = icmp ugt i32 %13, %7
  br i1 %19, label %20, label %21

20:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* null, i8** %17, align 8
  br label %30

21:                                               ; preds = %15
  %22 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %13) #13
  %23 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #13
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* %22, i8* %23) #13
  %24 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* %25, i8** %17, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %21
  %28 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #13
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1, i64 0, i64 0), i32 1783, %"class.logging::CheckOpResult"* nonnull %4) #13
  %29 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #13
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #13
  br label %30

30:                                               ; preds = %20, %21, %27
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #13
  br label %31

31:                                               ; preds = %9, %2, %30
  %32 = phi i32 [ %13, %30 ], [ 8, %2 ], [ %7, %9 ]
  %33 = zext i32 %32 to i64
  %34 = shl nuw nsw i64 %33, 3
  %35 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %34, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12AtomicStringEEEPKcv, i64 0, i64 0)) #13
  call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 0, i64 %34, i1 false) #13
  %36 = bitcast i8* %35 to %"class.WTF::AtomicString"*
  %37 = call %"class.WTF::AtomicString"* @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE8RehashToEPS1_jS8_(%"class.WTF::HashTable.268"* %0, %"class.WTF::AtomicString"* %36, i32 %32, %"class.WTF::AtomicString"* %1) #13
  ret %"class.WTF::AtomicString"* %37
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #4

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #7

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #4

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::AtomicString"* @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE8RehashToEPS1_jS8_(%"class.WTF::HashTable.268"*, %"class.WTF::AtomicString"*, i32, %"class.WTF::AtomicString"*) local_unnamed_addr #0 comdat align 2 {
  %5 = ptrtoint %"class.WTF::AtomicString"* %1 to i64
  %6 = getelementptr inbounds %"class.WTF::HashTable.268", %"class.WTF::HashTable.268"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  %9 = getelementptr inbounds %"class.WTF::HashTable.268", %"class.WTF::HashTable.268"* %0, i64 0, i32 0
  br i1 %8, label %10, label %13

10:                                               ; preds = %4
  %11 = bitcast %"class.WTF::HashTable.268"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  br label %20

13:                                               ; preds = %4
  %14 = add i32 %2, -1
  %15 = zext i32 %14 to i64
  %16 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %9, align 8
  %17 = ptrtoint %"class.WTF::AtomicString"* %16 to i64
  br label %61

18:                                               ; preds = %157
  %19 = bitcast %"class.WTF::HashTable.268"* %0 to i64*
  br label %20

20:                                               ; preds = %10, %18
  %21 = phi i64* [ %11, %10 ], [ %19, %18 ]
  %22 = phi i64 [ %12, %10 ], [ %158, %18 ]
  %23 = phi %"class.WTF::AtomicString"* [ null, %10 ], [ %161, %18 ]
  %24 = phi i32 [ 0, %10 ], [ %159, %18 ]
  store atomic i64 %5, i64* %21 monotonic, align 8
  store i32 %2, i32* %6, align 8
  %25 = inttoptr i64 %22 to %"class.WTF::AtomicString"*
  %26 = icmp eq i64 %22, 0
  br i1 %26, label %57, label %27

27:                                               ; preds = %20
  %28 = icmp eq i32 %24, 0
  br i1 %28, label %55, label %29

29:                                               ; preds = %27
  %30 = zext i32 %24 to i64
  br label %31

31:                                               ; preds = %52, %29
  %32 = phi i64 [ 0, %29 ], [ %53, %52 ]
  %33 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %25, i64 %32
  %34 = bitcast %"class.WTF::AtomicString"* %33 to i8**
  %35 = load i8*, i8** %34, align 8
  %36 = bitcast i8* %35 to %"class.WTF::StringImpl"*
  %37 = ptrtoint i8* %35 to i64
  switch i64 %37, label %38 [
    i64 -1, label %52
    i64 0, label %52
  ]

38:                                               ; preds = %31
  %39 = getelementptr inbounds i8, i8* %35, i64 8
  %40 = bitcast i8* %39 to i32*
  %41 = load atomic i32, i32* %40 monotonic, align 4
  %42 = and i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = bitcast i8* %35 to i32*
  %45 = load i32, i32* %44, align 4
  br i1 %43, label %46, label %48

46:                                               ; preds = %38
  %47 = add i32 %45, -1
  store i32 %47, i32* %44, align 4
  br label %48

48:                                               ; preds = %46, %38
  %49 = phi i32 [ %47, %46 ], [ %45, %38 ]
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %52

51:                                               ; preds = %48
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %36) #13
  br label %52

52:                                               ; preds = %51, %48, %31, %31
  %53 = add nuw nsw i64 %32, 1
  %54 = icmp eq i64 %53, %30
  br i1 %54, label %55, label %31

55:                                               ; preds = %52, %27
  %56 = inttoptr i64 %22 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %56) #13
  br label %57

57:                                               ; preds = %20, %55
  %58 = getelementptr inbounds %"class.WTF::HashTable.268", %"class.WTF::HashTable.268"* %0, i64 0, i32 3
  %59 = load i32, i32* %58, align 8
  %60 = and i32 %59, -2147483648
  store i32 %60, i32* %58, align 8
  ret %"class.WTF::AtomicString"* %23

61:                                               ; preds = %13, %157
  %62 = phi i64 [ %17, %13 ], [ %158, %157 ]
  %63 = phi i32 [ %7, %13 ], [ %159, %157 ]
  %64 = phi %"class.WTF::AtomicString"* [ %16, %13 ], [ %160, %157 ]
  %65 = phi %"class.WTF::AtomicString"* [ null, %13 ], [ %161, %157 ]
  %66 = phi i32 [ 0, %13 ], [ %162, %157 ]
  %67 = zext i32 %66 to i64
  %68 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %64, i64 %67
  %69 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %68, i64 0, i32 0, i32 0, i32 0
  %70 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %69, align 8
  %71 = ptrtoint %"class.WTF::StringImpl"* %70 to i64
  switch i64 %71, label %72 [
    i64 -1, label %157
    i64 0, label %157
  ]

72:                                               ; preds = %61
  %73 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %70, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %74 = load atomic i32, i32* %73 monotonic, align 4
  %75 = lshr i32 %74, 8
  %76 = and i32 %75, %14
  %77 = zext i32 %76 to i64
  %78 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 %77
  %79 = ptrtoint %"class.WTF::AtomicString"* %78 to i64
  %80 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %78, i64 0, i32 0, i32 0, i32 0
  %81 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %80, align 8
  %82 = icmp eq %"class.WTF::StringImpl"* %81, null
  br i1 %82, label %99, label %83

83:                                               ; preds = %72
  %84 = xor i32 %75, -1
  %85 = lshr i32 %74, 31
  %86 = add nsw i32 %85, %84
  %87 = shl i32 %86, 12
  %88 = xor i32 %87, %86
  %89 = lshr i32 %88, 7
  %90 = xor i32 %89, %88
  %91 = shl i32 %90, 2
  %92 = xor i32 %91, %90
  %93 = lshr i32 %92, 20
  %94 = xor i32 %93, %92
  %95 = or i32 %94, 1
  %96 = zext i32 %95 to i64
  br label %105

97:                                               ; preds = %117
  %98 = ptrtoint %"class.WTF::AtomicString"* %123 to i64
  br label %99

99:                                               ; preds = %97, %72
  %100 = phi i64 [ %79, %72 ], [ %98, %97 ]
  %101 = phi %"class.WTF::AtomicString"* [ null, %72 ], [ %118, %97 ]
  %102 = icmp eq %"class.WTF::AtomicString"* %101, null
  %103 = ptrtoint %"class.WTF::AtomicString"* %101 to i64
  %104 = select i1 %102, i64 %100, i64 %103
  br label %128

105:                                              ; preds = %117, %83
  %106 = phi %"class.WTF::AtomicString"* [ null, %83 ], [ %118, %117 ]
  %107 = phi %"class.WTF::StringImpl"* [ %81, %83 ], [ %126, %117 ]
  %108 = phi i64 [ %79, %83 ], [ %124, %117 ]
  %109 = phi %"class.WTF::AtomicString"* [ %78, %83 ], [ %123, %117 ]
  %110 = phi i64 [ %77, %83 ], [ %122, %117 ]
  %111 = phi i64 [ 0, %83 ], [ %120, %117 ]
  %112 = bitcast %"class.WTF::AtomicString"* %109 to i8**
  %113 = load i8*, i8** %112, align 8
  %114 = icmp eq i8* %113, inttoptr (i64 -1 to i8*)
  br i1 %114, label %117, label %115

115:                                              ; preds = %105
  %116 = icmp eq %"class.WTF::StringImpl"* %107, %70
  br i1 %116, label %128, label %117

117:                                              ; preds = %115, %105
  %118 = phi %"class.WTF::AtomicString"* [ %106, %115 ], [ %109, %105 ]
  %119 = icmp eq i64 %111, 0
  %120 = select i1 %119, i64 %96, i64 %111
  %121 = add i64 %120, %110
  %122 = and i64 %121, %15
  %123 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 %122
  %124 = ptrtoint %"class.WTF::AtomicString"* %123 to i64
  %125 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %123, i64 0, i32 0, i32 0, i32 0
  %126 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %125, align 8
  %127 = icmp eq %"class.WTF::StringImpl"* %126, null
  br i1 %127, label %97, label %105

128:                                              ; preds = %115, %99
  %129 = phi i64 [ %104, %99 ], [ %108, %115 ]
  %130 = inttoptr i64 %129 to %"class.WTF::AtomicString"*
  %131 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %130, i64 0, i32 0, i32 0, i32 0
  %132 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %131, align 8
  %133 = icmp eq %"class.WTF::StringImpl"* %132, null
  br i1 %133, label %147, label %134

134:                                              ; preds = %128
  %135 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %132, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %136 = load atomic i32, i32* %135 monotonic, align 4
  %137 = and i32 %136, 2
  %138 = icmp eq i32 %137, 0
  %139 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %132, i64 0, i32 0
  %140 = load i32, i32* %139, align 4
  br i1 %138, label %141, label %143

141:                                              ; preds = %134
  %142 = add i32 %140, -1
  store i32 %142, i32* %139, align 4
  br label %143

143:                                              ; preds = %141, %134
  %144 = phi i32 [ %142, %141 ], [ %140, %134 ]
  %145 = icmp eq i32 %144, 0
  br i1 %145, label %146, label %147

146:                                              ; preds = %143
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %132) #13
  br label %147

147:                                              ; preds = %128, %143, %146
  %148 = bitcast %"class.WTF::AtomicString"* %68 to i64*
  %149 = load i64, i64* %148, align 8
  %150 = inttoptr i64 %129 to i64*
  store i64 %149, i64* %150, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %69, align 8
  %151 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %9, align 8
  %152 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %151, i64 %67
  %153 = icmp eq %"class.WTF::AtomicString"* %152, %3
  %154 = select i1 %153, %"class.WTF::AtomicString"* %130, %"class.WTF::AtomicString"* %65
  %155 = load i32, i32* %6, align 8
  %156 = ptrtoint %"class.WTF::AtomicString"* %151 to i64
  br label %157

157:                                              ; preds = %61, %61, %147
  %158 = phi i64 [ %62, %61 ], [ %156, %147 ], [ %62, %61 ]
  %159 = phi i32 [ %63, %61 ], [ %155, %147 ], [ %63, %61 ]
  %160 = phi %"class.WTF::AtomicString"* [ %64, %61 ], [ %151, %147 ], [ %64, %61 ]
  %161 = phi %"class.WTF::AtomicString"* [ %65, %61 ], [ %154, %147 ], [ %65, %61 ]
  %162 = add i32 %66, 1
  %163 = icmp eq i32 %162, %159
  br i1 %163, label %18, label %61
}

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink19TraceMethodDelegateINS_14PersistentBaseINS_17AXObjectCacheImplELNS_31WeaknessPersistentConfigurationE1ELNS_38CrossThreadnessPersistentConfigurationE0EEEXadL_ZNKS5_15TracePersistentEPNS_7VisitorEEEE10TrampolineES7_PKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast %"class.blink::Visitor"* %0 to void (%"class.blink::Visitor"*, void (%"class.blink::LivenessBroker"*, i8*)*, i8*)***
  %4 = load void (%"class.blink::Visitor"*, void (%"class.blink::LivenessBroker"*, i8*)*, i8*)**, void (%"class.blink::Visitor"*, void (%"class.blink::LivenessBroker"*, i8*)*, i8*)*** %3, align 8
  %5 = getelementptr inbounds void (%"class.blink::Visitor"*, void (%"class.blink::LivenessBroker"*, i8*)*, i8*)*, void (%"class.blink::Visitor"*, void (%"class.blink::LivenessBroker"*, i8*)*, i8*)** %4, i64 2
  %6 = load void (%"class.blink::Visitor"*, void (%"class.blink::LivenessBroker"*, i8*)*, i8*)*, void (%"class.blink::Visitor"*, void (%"class.blink::LivenessBroker"*, i8*)*, i8*)** %5, align 8
  tail call void %6(%"class.blink::Visitor"* %0, void (%"class.blink::LivenessBroker"*, i8*)* nonnull @_ZN5blink14PersistentBaseINS_17AXObjectCacheImplELNS_31WeaknessPersistentConfigurationE1ELNS_38CrossThreadnessPersistentConfigurationE0EE20HandleWeakPersistentERKNS_14LivenessBrokerEPKv, i8* %1) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink14PersistentBaseINS_17AXObjectCacheImplELNS_31WeaknessPersistentConfigurationE1ELNS_38CrossThreadnessPersistentConfigurationE0EE20HandleWeakPersistentERKNS_14LivenessBrokerEPKv(%"class.blink::LivenessBroker"* dereferenceable(1), i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::AXObjectCacheImpl"**
  %4 = load %"class.blink::AXObjectCacheImpl"*, %"class.blink::AXObjectCacheImpl"** %3, align 8
  %5 = icmp eq %"class.blink::AXObjectCacheImpl"* %4, null
  br i1 %5, label %49, label %6

6:                                                ; preds = %2
  %7 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %8 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %7, i64 0, i32 1
  %9 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %8) #13
  %10 = icmp eq i8* %9, null
  br i1 %10, label %11, label %13, !prof !2

11:                                               ; preds = %6
  %12 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #13
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %8, i8* %12) #13
  br label %13

13:                                               ; preds = %11, %6
  %14 = phi i8* [ %12, %11 ], [ %9, %6 ]
  %15 = bitcast i8* %14 to %"class.blink::ThreadState"**
  %16 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %15, align 8
  %17 = icmp eq %"class.blink::ThreadState"* %16, null
  br i1 %17, label %49, label %18

18:                                               ; preds = %13
  %19 = getelementptr inbounds %"class.blink::AXObjectCacheImpl", %"class.blink::AXObjectCacheImpl"* %4, i64 -1, i32 34, i32 0, i32 3
  %20 = bitcast i32* %19 to %"class.blink::HeapObjectHeader"*
  %21 = getelementptr inbounds %"class.blink::HeapObjectHeader", %"class.blink::HeapObjectHeader"* %20, i64 0, i32 2
  %22 = load i16, i16* %21, align 2
  %23 = and i16 %22, 1
  %24 = icmp eq i16 %23, 0
  br i1 %24, label %25, label %49

25:                                               ; preds = %18
  store %"class.blink::AXObjectCacheImpl"* null, %"class.blink::AXObjectCacheImpl"** %3, align 8
  %26 = getelementptr inbounds i8, i8* %1, i64 8
  %27 = bitcast i8* %26 to %"class.blink::PersistentNode"**
  %28 = load %"class.blink::PersistentNode"*, %"class.blink::PersistentNode"** %27, align 8
  %29 = icmp eq %"class.blink::PersistentNode"* %28, null
  br i1 %29, label %49, label %30

30:                                               ; preds = %25
  %31 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %32 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %31, i64 0, i32 1
  %33 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %32) #13
  %34 = icmp eq i8* %33, null
  br i1 %34, label %35, label %37, !prof !2

35:                                               ; preds = %30
  %36 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #13
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %32, i8* %36) #13
  br label %37

37:                                               ; preds = %35, %30
  %38 = phi i8* [ %36, %35 ], [ %33, %30 ]
  %39 = bitcast i8* %38 to %"class.blink::ThreadState"**
  %40 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %39, align 8
  %41 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %40, i64 0, i32 4, i32 0, i32 0, i32 0
  %42 = load %"class.blink::PersistentRegion"*, %"class.blink::PersistentRegion"** %41, align 8
  %43 = load %"class.blink::PersistentNode"*, %"class.blink::PersistentNode"** %27, align 8
  %44 = getelementptr inbounds %"class.blink::PersistentRegion", %"class.blink::PersistentRegion"* %42, i64 0, i32 0, i32 0
  %45 = bitcast %"class.blink::PersistentRegion"* %42 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = bitcast %"class.blink::PersistentNode"* %43 to i64*
  store i64 %46, i64* %47, align 8
  %48 = getelementptr inbounds %"class.blink::PersistentNode", %"class.blink::PersistentNode"* %43, i64 0, i32 1
  store void (%"class.blink::Visitor"*, i8*)* null, void (%"class.blink::Visitor"*, i8*)** %48, align 8
  store %"class.blink::PersistentNode"* %43, %"class.blink::PersistentNode"** %44, align 8
  store %"class.blink::PersistentNode"* null, %"class.blink::PersistentNode"** %27, align 8
  br label %49

49:                                               ; preds = %18, %13, %37, %25, %2
  ret void
}

declare void @_ZN5blink20PersistentRegionBase15EnsureNodeSlotsEv(%"class.blink::PersistentRegionBase"*) local_unnamed_addr #4

declare %"class.blink::Node"* @_ZN5blink13NodeTraversal19NextAncestorSiblingERKNS_4NodeEPS2_(%"class.blink::Node"* dereferenceable(64), %"class.blink::Node"*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i32*, i8 } @_ZN3WTF9HashTableIjjNS_17IdentityExtractorENS_7IntHashIjEENS_10HashTraitsIjEES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKjjEENS_18HashTableAddResultIS7_jEEOT0_OT1_(%"class.WTF::HashTable.25"*, i32* dereferenceable(4), i32* dereferenceable(4)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable.25", %"class.WTF::HashTable.25"* %0, i64 0, i32 0
  %5 = load i32*, i32** %4, align 8
  %6 = icmp eq i32* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call i32* @_ZN3WTF9HashTableIjjNS_17IdentityExtractorENS_7IntHashIjEENS_10HashTraitsIjEES5_NS_18PartitionAllocatorEE6ExpandEPj(%"class.WTF::HashTable.25"* %0, i32* null)
  %9 = load i32*, i32** %4, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi i32* [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable.25", %"class.WTF::HashTable.25"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = load i32, i32* %1, align 4
  %17 = shl i32 %16, 15
  %18 = xor i32 %17, -1
  %19 = add i32 %16, %18
  %20 = lshr i32 %19, 10
  %21 = xor i32 %20, %19
  %22 = mul i32 %21, 9
  %23 = lshr i32 %22, 6
  %24 = xor i32 %23, %22
  %25 = shl i32 %24, 11
  %26 = xor i32 %25, -1
  %27 = add i32 %24, %26
  %28 = lshr i32 %27, 16
  %29 = xor i32 %28, %27
  %30 = and i32 %29, %14
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds i32, i32* %11, i64 %31
  %33 = load i32, i32* %32, align 4
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %75, label %35

35:                                               ; preds = %10
  %36 = xor i32 %29, -1
  %37 = lshr i32 %27, 23
  %38 = add i32 %37, %36
  %39 = shl i32 %38, 12
  %40 = xor i32 %39, %38
  %41 = lshr i32 %40, 7
  %42 = xor i32 %41, %40
  %43 = shl i32 %42, 2
  %44 = xor i32 %43, %42
  %45 = lshr i32 %44, 20
  %46 = xor i32 %45, %44
  %47 = or i32 %46, 1
  %48 = zext i32 %47 to i64
  br label %49

49:                                               ; preds = %35, %56
  %50 = phi i32 [ %33, %35 ], [ %64, %56 ]
  %51 = phi i32* [ %32, %35 ], [ %63, %56 ]
  %52 = phi i32* [ null, %35 ], [ %58, %56 ]
  %53 = phi i64 [ %31, %35 ], [ %62, %56 ]
  %54 = phi i64 [ 0, %35 ], [ %60, %56 ]
  %55 = icmp eq i32 %50, %16
  br i1 %55, label %89, label %56

56:                                               ; preds = %49
  %57 = icmp eq i32 %50, -1
  %58 = select i1 %57, i32* %51, i32* %52
  %59 = icmp eq i64 %54, 0
  %60 = select i1 %59, i64 %48, i64 %54
  %61 = add i64 %60, %53
  %62 = and i64 %61, %15
  %63 = getelementptr inbounds i32, i32* %11, i64 %62
  %64 = load i32, i32* %63, align 4
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %49

66:                                               ; preds = %56
  %67 = icmp eq i32* %58, null
  br i1 %67, label %75, label %68

68:                                               ; preds = %66
  store i32 0, i32* %58, align 4
  %69 = getelementptr inbounds %"class.WTF::HashTable.25", %"class.WTF::HashTable.25"* %0, i64 0, i32 3
  %70 = load i32, i32* %69, align 8
  %71 = add i32 %70, 2147483647
  %72 = and i32 %71, 2147483647
  %73 = and i32 %70, -2147483648
  %74 = or i32 %72, %73
  store i32 %74, i32* %69, align 8
  br label %75

75:                                               ; preds = %10, %66, %68
  %76 = phi i32* [ %58, %68 ], [ %63, %66 ], [ %32, %10 ]
  %77 = load i32, i32* %2, align 4
  store i32 %77, i32* %76, align 4
  %78 = getelementptr inbounds %"class.WTF::HashTable.25", %"class.WTF::HashTable.25"* %0, i64 0, i32 2
  %79 = load i32, i32* %78, align 4
  %80 = add i32 %79, 1
  store i32 %80, i32* %78, align 4
  %81 = getelementptr inbounds %"class.WTF::HashTable.25", %"class.WTF::HashTable.25"* %0, i64 0, i32 3
  %82 = load i32, i32* %81, align 8
  %83 = add i32 %82, %80
  %84 = shl i32 %83, 1
  %85 = load i32, i32* %12, align 8
  %86 = icmp ult i32 %84, %85
  br i1 %86, label %89, label %87

87:                                               ; preds = %75
  %88 = tail call i32* @_ZN3WTF9HashTableIjjNS_17IdentityExtractorENS_7IntHashIjEENS_10HashTraitsIjEES5_NS_18PartitionAllocatorEE6ExpandEPj(%"class.WTF::HashTable.25"* %0, i32* %76)
  br label %89

89:                                               ; preds = %49, %75, %87
  %90 = phi i8 [ 1, %75 ], [ 1, %87 ], [ 0, %49 ]
  %91 = phi i32* [ %76, %75 ], [ %88, %87 ], [ %51, %49 ]
  %92 = insertvalue { i32*, i8 } undef, i32* %91, 0
  %93 = insertvalue { i32*, i8 } %92, i8 %90, 1
  ret { i32*, i8 } %93
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32* @_ZN3WTF9HashTableIjjNS_17IdentityExtractorENS_7IntHashIjEENS_10HashTraitsIjEES5_NS_18PartitionAllocatorEE6ExpandEPj(%"class.WTF::HashTable.25"*, i32*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::HashTable.25", %"class.WTF::HashTable.25"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %31, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.WTF::HashTable.25", %"class.WTF::HashTable.25"* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = mul i32 %11, 6
  %13 = shl i32 %7, 1
  %14 = icmp ult i32 %12, %13
  br i1 %14, label %31, label %15

15:                                               ; preds = %9
  %16 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #13
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %17, align 8
  %18 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18)
  %19 = icmp ugt i32 %13, %7
  br i1 %19, label %20, label %21

20:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* null, i8** %17, align 8
  br label %30

21:                                               ; preds = %15
  %22 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %13) #13
  %23 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #13
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* %22, i8* %23) #13
  %24 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* %25, i8** %17, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %21
  %28 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #13
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1, i64 0, i64 0), i32 1783, %"class.logging::CheckOpResult"* nonnull %4) #13
  %29 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #13
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #13
  br label %30

30:                                               ; preds = %20, %21, %27
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #13
  br label %31

31:                                               ; preds = %9, %2, %30
  %32 = phi i32 [ %13, %30 ], [ 8, %2 ], [ %7, %9 ]
  %33 = zext i32 %32 to i64
  %34 = shl nuw nsw i64 %33, 2
  %35 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %34, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIjEEPKcv, i64 0, i64 0)) #13
  call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 0, i64 %34, i1 false) #13
  %36 = bitcast i8* %35 to i32*
  %37 = call i32* @_ZN3WTF9HashTableIjjNS_17IdentityExtractorENS_7IntHashIjEENS_10HashTraitsIjEES5_NS_18PartitionAllocatorEE8RehashToEPjjS8_(%"class.WTF::HashTable.25"* %0, i32* %36, i32 %32, i32* %1) #13
  ret i32* %37
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32* @_ZN3WTF9HashTableIjjNS_17IdentityExtractorENS_7IntHashIjEENS_10HashTraitsIjEES5_NS_18PartitionAllocatorEE8RehashToEPjjS8_(%"class.WTF::HashTable.25"*, i32*, i32, i32*) local_unnamed_addr #0 comdat align 2 {
  %5 = ptrtoint i32* %1 to i64
  %6 = getelementptr inbounds %"class.WTF::HashTable.25", %"class.WTF::HashTable.25"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  %9 = getelementptr inbounds %"class.WTF::HashTable.25", %"class.WTF::HashTable.25"* %0, i64 0, i32 0
  br i1 %8, label %10, label %13

10:                                               ; preds = %4
  %11 = bitcast %"class.WTF::HashTable.25"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  br label %20

13:                                               ; preds = %4
  %14 = add i32 %2, -1
  %15 = zext i32 %14 to i64
  %16 = load i32*, i32** %9, align 8
  %17 = ptrtoint i32* %16 to i64
  br label %31

18:                                               ; preds = %112
  %19 = bitcast %"class.WTF::HashTable.25"* %0 to i64*
  br label %20

20:                                               ; preds = %10, %18
  %21 = phi i64* [ %11, %10 ], [ %19, %18 ]
  %22 = phi i64 [ %12, %10 ], [ %113, %18 ]
  %23 = phi i32* [ null, %10 ], [ %116, %18 ]
  store atomic i64 %5, i64* %21 monotonic, align 8
  store i32 %2, i32* %6, align 8
  %24 = icmp eq i64 %22, 0
  br i1 %24, label %27, label %25

25:                                               ; preds = %20
  %26 = inttoptr i64 %22 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %26) #13
  br label %27

27:                                               ; preds = %20, %25
  %28 = getelementptr inbounds %"class.WTF::HashTable.25", %"class.WTF::HashTable.25"* %0, i64 0, i32 3
  %29 = load i32, i32* %28, align 8
  %30 = and i32 %29, -2147483648
  store i32 %30, i32* %28, align 8
  ret i32* %23

31:                                               ; preds = %13, %112
  %32 = phi i64 [ %17, %13 ], [ %113, %112 ]
  %33 = phi i32 [ %7, %13 ], [ %114, %112 ]
  %34 = phi i32* [ %16, %13 ], [ %115, %112 ]
  %35 = phi i32* [ null, %13 ], [ %116, %112 ]
  %36 = phi i32 [ 0, %13 ], [ %117, %112 ]
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds i32, i32* %34, i64 %37
  %39 = load i32, i32* %38, align 4
  %40 = add i32 %39, 1
  %41 = icmp ult i32 %40, 2
  br i1 %41, label %112, label %42

42:                                               ; preds = %31
  %43 = shl i32 %39, 15
  %44 = xor i32 %43, -1
  %45 = add i32 %39, %44
  %46 = lshr i32 %45, 10
  %47 = xor i32 %46, %45
  %48 = mul i32 %47, 9
  %49 = lshr i32 %48, 6
  %50 = xor i32 %49, %48
  %51 = shl i32 %50, 11
  %52 = xor i32 %51, -1
  %53 = add i32 %50, %52
  %54 = lshr i32 %53, 16
  %55 = xor i32 %54, %53
  %56 = and i32 %55, %14
  %57 = zext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %1, i64 %57
  %59 = ptrtoint i32* %58 to i64
  %60 = load i32, i32* %58, align 4
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %79, label %62

62:                                               ; preds = %42
  %63 = xor i32 %55, -1
  %64 = lshr i32 %53, 23
  %65 = add i32 %64, %63
  %66 = shl i32 %65, 12
  %67 = xor i32 %66, %65
  %68 = lshr i32 %67, 7
  %69 = xor i32 %68, %67
  %70 = shl i32 %69, 2
  %71 = xor i32 %70, %69
  %72 = lshr i32 %71, 20
  %73 = xor i32 %72, %71
  %74 = or i32 %73, 1
  %75 = zext i32 %74 to i64
  br label %85

76:                                               ; preds = %92
  %77 = ptrtoint i32* %99 to i64
  %78 = inttoptr i64 %94 to i32*
  br label %79

79:                                               ; preds = %76, %42
  %80 = phi i64 [ %77, %76 ], [ %59, %42 ]
  %81 = phi i32* [ %78, %76 ], [ null, %42 ]
  %82 = icmp eq i32* %81, null
  %83 = ptrtoint i32* %81 to i64
  %84 = select i1 %82, i64 %80, i64 %83
  br label %103

85:                                               ; preds = %92, %62
  %86 = phi i64 [ 0, %62 ], [ %94, %92 ]
  %87 = phi i32 [ %60, %62 ], [ %101, %92 ]
  %88 = phi i64 [ %59, %62 ], [ %100, %92 ]
  %89 = phi i64 [ %57, %62 ], [ %98, %92 ]
  %90 = phi i64 [ 0, %62 ], [ %96, %92 ]
  %91 = icmp eq i32 %87, %39
  br i1 %91, label %103, label %92

92:                                               ; preds = %85
  %93 = icmp eq i32 %87, -1
  %94 = select i1 %93, i64 %88, i64 %86
  %95 = icmp eq i64 %90, 0
  %96 = select i1 %95, i64 %75, i64 %90
  %97 = add i64 %96, %89
  %98 = and i64 %97, %15
  %99 = getelementptr inbounds i32, i32* %1, i64 %98
  %100 = ptrtoint i32* %99 to i64
  %101 = load i32, i32* %99, align 4
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %76, label %85

103:                                              ; preds = %85, %79
  %104 = phi i64 [ %84, %79 ], [ %88, %85 ]
  %105 = inttoptr i64 %104 to i32*
  store i32 %39, i32* %105, align 4
  %106 = load i32*, i32** %9, align 8
  %107 = getelementptr inbounds i32, i32* %106, i64 %37
  %108 = icmp eq i32* %107, %3
  %109 = select i1 %108, i32* %105, i32* %35
  %110 = load i32, i32* %6, align 8
  %111 = ptrtoint i32* %106 to i64
  br label %112

112:                                              ; preds = %31, %103
  %113 = phi i64 [ %32, %31 ], [ %111, %103 ]
  %114 = phi i32 [ %33, %31 ], [ %110, %103 ]
  %115 = phi i32* [ %34, %31 ], [ %106, %103 ]
  %116 = phi i32* [ %35, %31 ], [ %109, %103 ]
  %117 = add i32 %36, 1
  %118 = icmp eq i32 %117, %114
  br i1 %118, label %18, label %31
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair.260"*, i8 } @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_7HashSetIjNS_7IntHashIjEENS_10HashTraitsIjEENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS6_IS1_EENS6_IS9_EEEESE_S8_E6insertINS_17HashMapTranslatorISG_SC_S8_EERKS1_S9_EENS_18HashTableAddResultISH_SA_EEOT0_OT1_(%"class.WTF::HashTable.257"*, %"class.WTF::String"* dereferenceable(8), %"class.WTF::HashSet"* dereferenceable(24)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable.257", %"class.WTF::HashTable.257"* %0, i64 0, i32 0
  %5 = load %"struct.WTF::KeyValuePair.260"*, %"struct.WTF::KeyValuePair.260"** %4, align 8
  %6 = icmp eq %"struct.WTF::KeyValuePair.260"* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call %"struct.WTF::KeyValuePair.260"* @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_7HashSetIjNS_7IntHashIjEENS_10HashTraitsIjEENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS6_IS1_EENS6_IS9_EEEESE_S8_E6ExpandEPSA_(%"class.WTF::HashTable.257"* %0, %"struct.WTF::KeyValuePair.260"* null)
  %9 = load %"struct.WTF::KeyValuePair.260"*, %"struct.WTF::KeyValuePair.260"** %4, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi %"struct.WTF::KeyValuePair.260"* [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable.257", %"class.WTF::HashTable.257"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %17 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load atomic i32, i32* %18 monotonic, align 4
  %20 = lshr i32 %19, 8
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %24

22:                                               ; preds = %10
  %23 = tail call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* %17) #13
  br label %24

24:                                               ; preds = %10, %22
  %25 = phi i32 [ %23, %22 ], [ %20, %10 ]
  %26 = and i32 %25, %14
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %11, i64 %27
  %29 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %28, i64 0, i32 0, i32 0, i32 0
  %30 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %29, align 8
  %31 = icmp eq %"class.WTF::StringImpl"* %30, null
  br i1 %31, label %83, label %32

32:                                               ; preds = %24
  %33 = xor i32 %25, -1
  %34 = lshr i32 %25, 23
  %35 = add i32 %34, %33
  %36 = shl i32 %35, 12
  %37 = xor i32 %36, %35
  %38 = lshr i32 %37, 7
  %39 = xor i32 %38, %37
  %40 = shl i32 %39, 2
  %41 = xor i32 %40, %39
  %42 = lshr i32 %41, 20
  %43 = xor i32 %42, %41
  %44 = or i32 %43, 1
  %45 = zext i32 %44 to i64
  br label %46

46:                                               ; preds = %32, %58
  %47 = phi %"struct.WTF::KeyValuePair.260"* [ %28, %32 ], [ %64, %58 ]
  %48 = phi %"struct.WTF::KeyValuePair.260"* [ null, %32 ], [ %59, %58 ]
  %49 = phi i64 [ %27, %32 ], [ %63, %58 ]
  %50 = phi i64 [ 0, %32 ], [ %61, %58 ]
  %51 = bitcast %"struct.WTF::KeyValuePair.260"* %47 to i8**
  %52 = load i8*, i8** %51, align 8
  %53 = icmp eq i8* %52, inttoptr (i64 -1 to i8*)
  br i1 %53, label %58, label %54

54:                                               ; preds = %46
  %55 = bitcast i8* %52 to %"class.WTF::StringImpl"*
  %56 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %57 = tail call zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %55, %"class.WTF::StringImpl"* %56) #13
  br i1 %57, label %96, label %58

58:                                               ; preds = %46, %54
  %59 = phi %"struct.WTF::KeyValuePair.260"* [ %48, %54 ], [ %47, %46 ]
  %60 = icmp eq i64 %50, 0
  %61 = select i1 %60, i64 %45, i64 %50
  %62 = add i64 %61, %49
  %63 = and i64 %62, %15
  %64 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %11, i64 %63
  %65 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %64, i64 0, i32 0, i32 0, i32 0
  %66 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %65, align 8
  %67 = icmp eq %"class.WTF::StringImpl"* %66, null
  br i1 %67, label %68, label %46

68:                                               ; preds = %58
  %69 = icmp eq %"struct.WTF::KeyValuePair.260"* %59, null
  br i1 %69, label %83, label %70

70:                                               ; preds = %68
  %71 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %59, i64 0, i32 1
  %72 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %59, i64 0, i32 1, i32 0, i32 1
  %73 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %59, i64 0, i32 1, i32 0, i32 2
  %74 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %59, i64 0, i32 1, i32 0, i32 3
  %75 = bitcast %"class.WTF::HashSet"* %71 to i64*
  %76 = bitcast %"struct.WTF::KeyValuePair.260"* %59 to i64*
  store i64 0, i64* %76, align 8
  store atomic i64 0, i64* %75 monotonic, align 8
  store i32 0, i32* %72, align 4
  store i32 0, i32* %73, align 4
  store i32 0, i32* %74, align 8
  %77 = getelementptr inbounds %"class.WTF::HashTable.257", %"class.WTF::HashTable.257"* %0, i64 0, i32 3
  %78 = load i32, i32* %77, align 8
  %79 = add i32 %78, 2147483647
  %80 = and i32 %79, 2147483647
  %81 = and i32 %78, -2147483648
  %82 = or i32 %80, %81
  store i32 %82, i32* %77, align 8
  br label %83

83:                                               ; preds = %24, %68, %70
  %84 = phi %"struct.WTF::KeyValuePair.260"* [ %59, %70 ], [ %64, %68 ], [ %28, %24 ]
  tail call void @_ZN3WTF17HashMapTranslatorINS_18HashMapValueTraitsINS_10HashTraitsINS_6StringEEENS2_INS_7HashSetIjNS_7IntHashIjEENS2_IjEENS_18PartitionAllocatorEEEEEEENS_10StringHashES9_E9TranslateINS_12KeyValuePairIS3_SA_EERKS3_SA_EEvRT_OT0_OT1_(%"struct.WTF::KeyValuePair.260"* dereferenceable(32) %84, %"class.WTF::String"* dereferenceable(8) %1, %"class.WTF::HashSet"* dereferenceable(24) %2)
  %85 = getelementptr inbounds %"class.WTF::HashTable.257", %"class.WTF::HashTable.257"* %0, i64 0, i32 2
  %86 = load i32, i32* %85, align 4
  %87 = add i32 %86, 1
  store i32 %87, i32* %85, align 4
  %88 = getelementptr inbounds %"class.WTF::HashTable.257", %"class.WTF::HashTable.257"* %0, i64 0, i32 3
  %89 = load i32, i32* %88, align 8
  %90 = add i32 %89, %87
  %91 = shl i32 %90, 1
  %92 = load i32, i32* %12, align 8
  %93 = icmp ult i32 %91, %92
  br i1 %93, label %96, label %94

94:                                               ; preds = %83
  %95 = tail call %"struct.WTF::KeyValuePair.260"* @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_7HashSetIjNS_7IntHashIjEENS_10HashTraitsIjEENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS6_IS1_EENS6_IS9_EEEESE_S8_E6ExpandEPSA_(%"class.WTF::HashTable.257"* %0, %"struct.WTF::KeyValuePair.260"* %84)
  br label %96

96:                                               ; preds = %54, %83, %94
  %97 = phi i8 [ 1, %83 ], [ 1, %94 ], [ 0, %54 ]
  %98 = phi %"struct.WTF::KeyValuePair.260"* [ %84, %83 ], [ %95, %94 ], [ %47, %54 ]
  %99 = insertvalue { %"struct.WTF::KeyValuePair.260"*, i8 } undef, %"struct.WTF::KeyValuePair.260"* %98, 0
  %100 = insertvalue { %"struct.WTF::KeyValuePair.260"*, i8 } %99, i8 %97, 1
  ret { %"struct.WTF::KeyValuePair.260"*, i8 } %100
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair.260"* @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_7HashSetIjNS_7IntHashIjEENS_10HashTraitsIjEENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS6_IS1_EENS6_IS9_EEEESE_S8_E6ExpandEPSA_(%"class.WTF::HashTable.257"*, %"struct.WTF::KeyValuePair.260"*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::HashTable.257", %"class.WTF::HashTable.257"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %31, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.WTF::HashTable.257", %"class.WTF::HashTable.257"* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = mul i32 %11, 6
  %13 = shl i32 %7, 1
  %14 = icmp ult i32 %12, %13
  br i1 %14, label %31, label %15

15:                                               ; preds = %9
  %16 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #13
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %17, align 8
  %18 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18)
  %19 = icmp ugt i32 %13, %7
  br i1 %19, label %20, label %21

20:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* null, i8** %17, align 8
  br label %30

21:                                               ; preds = %15
  %22 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %13) #13
  %23 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #13
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* %22, i8* %23) #13
  %24 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* %25, i8** %17, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %21
  %28 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #13
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1, i64 0, i64 0), i32 1783, %"class.logging::CheckOpResult"* nonnull %4) #13
  %29 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #13
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #13
  br label %30

30:                                               ; preds = %20, %21, %27
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #13
  br label %31

31:                                               ; preds = %9, %2, %30
  %32 = phi i32 [ %13, %30 ], [ 8, %2 ], [ %7, %9 ]
  %33 = zext i32 %32 to i64
  %34 = shl nuw nsw i64 %33, 5
  %35 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %34, i8* getelementptr inbounds ([191 x i8], [191 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairINS_6StringENS_7HashSetIjNS_7IntHashIjEENS_10HashTraitsIjEENS_18PartitionAllocatorEEEEEEEPKcv, i64 0, i64 0)) #13
  %36 = bitcast i8* %35 to %"struct.WTF::KeyValuePair.260"*
  %37 = icmp eq i32 %32, 0
  br i1 %37, label %49, label %38

38:                                               ; preds = %31, %38
  %39 = phi i64 [ %47, %38 ], [ 0, %31 ]
  %40 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %36, i64 %39
  %41 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %36, i64 %39, i32 1
  %42 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %36, i64 %39, i32 1, i32 0, i32 1
  %43 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %36, i64 %39, i32 1, i32 0, i32 2
  %44 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %36, i64 %39, i32 1, i32 0, i32 3
  %45 = bitcast %"class.WTF::HashSet"* %41 to i64*
  %46 = bitcast %"struct.WTF::KeyValuePair.260"* %40 to i64*
  store i64 0, i64* %46, align 8
  store atomic i64 0, i64* %45 monotonic, align 8
  store i32 0, i32* %42, align 4
  store i32 0, i32* %43, align 4
  store i32 0, i32* %44, align 8
  %47 = add nuw nsw i64 %39, 1
  %48 = icmp eq i64 %47, %33
  br i1 %48, label %49, label %38

49:                                               ; preds = %38, %31
  %50 = call %"struct.WTF::KeyValuePair.260"* @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_7HashSetIjNS_7IntHashIjEENS_10HashTraitsIjEENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS6_IS1_EENS6_IS9_EEEESE_S8_E8RehashToEPSA_jSI_(%"class.WTF::HashTable.257"* %0, %"struct.WTF::KeyValuePair.260"* %36, i32 %32, %"struct.WTF::KeyValuePair.260"* %1) #13
  ret %"struct.WTF::KeyValuePair.260"* %50
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF17HashMapTranslatorINS_18HashMapValueTraitsINS_10HashTraitsINS_6StringEEENS2_INS_7HashSetIjNS_7IntHashIjEENS2_IjEENS_18PartitionAllocatorEEEEEEENS_10StringHashES9_E9TranslateINS_12KeyValuePairIS3_SA_EERKS3_SA_EEvRT_OT0_OT1_(%"struct.WTF::KeyValuePair.260"* dereferenceable(32), %"class.WTF::String"* dereferenceable(8), %"class.WTF::HashSet"* dereferenceable(24)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %5 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %4, align 8
  %6 = icmp eq %"class.WTF::StringImpl"* %5, null
  br i1 %6, label %24, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load atomic i32, i32* %8 monotonic, align 4
  %10 = and i32 %9, 2
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %24

12:                                               ; preds = %7
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = zext i32 %14 to i33
  %16 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %15, i33 1) #13
  %17 = extractvalue { i33, i1 } %16, 1
  %18 = extractvalue { i33, i1 } %16, 0
  %19 = icmp slt i33 %18, 0
  %20 = or i1 %17, %19
  br i1 %20, label %21, label %22, !prof !2

21:                                               ; preds = %12
  tail call void @llvm.trap() #13
  unreachable

22:                                               ; preds = %12
  %23 = trunc i33 %18 to i32
  store i32 %23, i32* %13, align 4
  br label %24

24:                                               ; preds = %22, %7, %3
  %25 = ptrtoint %"class.WTF::StringImpl"* %5 to i64
  %26 = bitcast %"struct.WTF::KeyValuePair.260"* %0 to i64*
  %27 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %0, i64 0, i32 0, i32 0, i32 0
  %28 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %27, align 8
  store i64 %25, i64* %26, align 8
  %29 = icmp eq %"class.WTF::StringImpl"* %28, null
  br i1 %29, label %43, label %30

30:                                               ; preds = %24
  %31 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %28, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load atomic i32, i32* %31 monotonic, align 4
  %33 = and i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %28, i64 0, i32 0
  %36 = load i32, i32* %35, align 4
  br i1 %34, label %37, label %39

37:                                               ; preds = %30
  %38 = add i32 %36, -1
  store i32 %38, i32* %35, align 4
  br label %39

39:                                               ; preds = %37, %30
  %40 = phi i32 [ %38, %37 ], [ %36, %30 ]
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %43

42:                                               ; preds = %39
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %28) #13
  br label %43

43:                                               ; preds = %24, %39, %42
  %44 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %0, i64 0, i32 1
  %45 = bitcast %"class.WTF::HashSet"* %2 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = bitcast %"class.WTF::HashSet"* %44 to i64*
  %48 = load i64, i64* %47, align 8
  store atomic i64 %48, i64* %45 monotonic, align 8
  store atomic i64 %46, i64* %47 monotonic, align 8
  %49 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %0, i64 0, i32 1, i32 0, i32 1
  %50 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %2, i64 0, i32 0, i32 1
  %51 = load i32, i32* %49, align 4
  %52 = load i32, i32* %50, align 4
  store i32 %52, i32* %49, align 4
  store i32 %51, i32* %50, align 4
  %53 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %0, i64 0, i32 1, i32 0, i32 2
  %54 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %2, i64 0, i32 0, i32 2
  %55 = load i32, i32* %53, align 4
  %56 = load i32, i32* %54, align 4
  store i32 %56, i32* %53, align 4
  store i32 %55, i32* %54, align 4
  %57 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %0, i64 0, i32 1, i32 0, i32 3
  %58 = load i32, i32* %57, align 8
  %59 = and i32 %58, 2147483647
  %60 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %2, i64 0, i32 0, i32 3
  %61 = load i32, i32* %60, align 8
  %62 = and i32 %61, 2147483647
  %63 = and i32 %58, -2147483648
  %64 = or i32 %62, %63
  store i32 %64, i32* %57, align 8
  %65 = load i32, i32* %60, align 8
  %66 = and i32 %65, -2147483648
  %67 = or i32 %66, %59
  store i32 %67, i32* %60, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair.260"* @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_7HashSetIjNS_7IntHashIjEENS_10HashTraitsIjEENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS6_IS1_EENS6_IS9_EEEESE_S8_E8RehashToEPSA_jSI_(%"class.WTF::HashTable.257"*, %"struct.WTF::KeyValuePair.260"*, i32, %"struct.WTF::KeyValuePair.260"*) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca %"class.WTF::HashTable.257", align 8
  %6 = bitcast %"class.WTF::HashTable.257"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #13
  %7 = getelementptr inbounds %"class.WTF::HashTable.257", %"class.WTF::HashTable.257"* %5, i64 0, i32 0
  %8 = getelementptr inbounds %"class.WTF::HashTable.257", %"class.WTF::HashTable.257"* %5, i64 0, i32 1
  %9 = getelementptr inbounds %"class.WTF::HashTable.257", %"class.WTF::HashTable.257"* %5, i64 0, i32 2
  %10 = getelementptr inbounds %"class.WTF::HashTable.257", %"class.WTF::HashTable.257"* %5, i64 0, i32 3
  %11 = bitcast %"class.WTF::HashTable.257"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 24, i1 false)
  store %"struct.WTF::KeyValuePair.260"* %1, %"struct.WTF::KeyValuePair.260"** %7, align 8
  store i32 %2, i32* %8, align 8
  store i32 0, i32* %9, align 4
  store i32 0, i32* %10, align 8
  %12 = getelementptr inbounds %"class.WTF::HashTable.257", %"class.WTF::HashTable.257"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %13, 0
  %15 = getelementptr inbounds %"class.WTF::HashTable.257", %"class.WTF::HashTable.257"* %0, i64 0, i32 0
  br i1 %14, label %16, label %21

16:                                               ; preds = %4
  %17 = ptrtoint %"struct.WTF::KeyValuePair.260"* %1 to i64
  %18 = bitcast %"class.WTF::HashTable.257"* %0 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %"class.WTF::HashTable.257"* %5 to i64*
  br label %28

21:                                               ; preds = %4
  %22 = load %"struct.WTF::KeyValuePair.260"*, %"struct.WTF::KeyValuePair.260"** %15, align 8
  %23 = ptrtoint %"struct.WTF::KeyValuePair.260"* %22 to i64
  br label %81

24:                                               ; preds = %101
  %25 = bitcast %"class.WTF::HashTable.257"* %5 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = bitcast %"class.WTF::HashTable.257"* %0 to i64*
  br label %28

28:                                               ; preds = %16, %24
  %29 = phi i64* [ %20, %16 ], [ %25, %24 ]
  %30 = phi i64* [ %18, %16 ], [ %27, %24 ]
  %31 = phi i64 [ %17, %16 ], [ %26, %24 ]
  %32 = phi i64 [ %19, %16 ], [ %102, %24 ]
  %33 = phi %"struct.WTF::KeyValuePair.260"* [ null, %16 ], [ %105, %24 ]
  %34 = phi i32 [ 0, %16 ], [ %103, %24 ]
  store atomic i64 %31, i64* %30 monotonic, align 8
  store i32 %2, i32* %12, align 8
  store i64 %32, i64* %29, align 8
  store i32 %34, i32* %8, align 8
  %35 = inttoptr i64 %32 to %"struct.WTF::KeyValuePair.260"*
  %36 = icmp eq i64 %32, 0
  br i1 %36, label %77, label %37

37:                                               ; preds = %28
  %38 = icmp eq i32 %34, 0
  br i1 %38, label %75, label %39

39:                                               ; preds = %37
  %40 = zext i32 %34 to i64
  br label %41

41:                                               ; preds = %72, %39
  %42 = phi i64 [ 0, %39 ], [ %73, %72 ]
  %43 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %35, i64 %42
  %44 = bitcast %"struct.WTF::KeyValuePair.260"* %43 to i8**
  %45 = load i8*, i8** %44, align 8
  %46 = icmp eq i8* %45, inttoptr (i64 -1 to i8*)
  br i1 %46, label %72, label %47

47:                                               ; preds = %41
  %48 = bitcast i8* %45 to %"class.WTF::StringImpl"*
  %49 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %35, i64 %42, i32 1, i32 0, i32 0
  %50 = load i32*, i32** %49, align 8
  %51 = icmp eq i32* %50, null
  br i1 %51, label %56, label %52, !prof !3

52:                                               ; preds = %47
  %53 = bitcast i32* %50 to i8*
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %53) #13
  store i32* null, i32** %49, align 8
  %54 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %43, i64 0, i32 0, i32 0, i32 0
  %55 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %54, align 8
  br label %56

56:                                               ; preds = %52, %47
  %57 = phi %"class.WTF::StringImpl"* [ %55, %52 ], [ %48, %47 ]
  %58 = icmp eq %"class.WTF::StringImpl"* %57, null
  br i1 %58, label %72, label %59

59:                                               ; preds = %56
  %60 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %57, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %61 = load atomic i32, i32* %60 monotonic, align 4
  %62 = and i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %57, i64 0, i32 0
  %65 = load i32, i32* %64, align 4
  br i1 %63, label %66, label %68

66:                                               ; preds = %59
  %67 = add i32 %65, -1
  store i32 %67, i32* %64, align 4
  br label %68

68:                                               ; preds = %66, %59
  %69 = phi i32 [ %67, %66 ], [ %65, %59 ]
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %71, label %72

71:                                               ; preds = %68
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %57) #13
  br label %72

72:                                               ; preds = %71, %68, %56, %41
  %73 = add nuw nsw i64 %42, 1
  %74 = icmp eq i64 %73, %40
  br i1 %74, label %75, label %41

75:                                               ; preds = %72, %37
  %76 = inttoptr i64 %32 to i8*
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %76) #13
  store atomic i64 0, i64* %29 monotonic, align 8
  store i32 0, i32* %8, align 8
  store i32 0, i32* %9, align 4
  br label %77

77:                                               ; preds = %28, %75
  %78 = getelementptr inbounds %"class.WTF::HashTable.257", %"class.WTF::HashTable.257"* %0, i64 0, i32 3
  %79 = load i32, i32* %78, align 8
  %80 = and i32 %79, -2147483648
  store i32 %80, i32* %78, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #13
  ret %"struct.WTF::KeyValuePair.260"* %33

81:                                               ; preds = %21, %101
  %82 = phi i64 [ %102, %101 ], [ %23, %21 ]
  %83 = phi i32 [ %103, %101 ], [ %13, %21 ]
  %84 = phi %"struct.WTF::KeyValuePair.260"* [ %104, %101 ], [ %22, %21 ]
  %85 = phi %"struct.WTF::KeyValuePair.260"* [ %105, %101 ], [ null, %21 ]
  %86 = phi i32 [ %106, %101 ], [ 0, %21 ]
  %87 = zext i32 %86 to i64
  %88 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %84, i64 %87
  %89 = bitcast %"struct.WTF::KeyValuePair.260"* %88 to i64*
  %90 = load i64, i64* %89, align 8
  switch i64 %90, label %91 [
    i64 -1, label %101
    i64 0, label %101
  ]

91:                                               ; preds = %81
  %92 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %88, i64 0, i32 0
  %93 = call { %"struct.WTF::KeyValuePair.260"*, i8 } @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_7HashSetIjNS_7IntHashIjEENS_10HashTraitsIjEENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS6_IS1_EENS6_IS9_EEEESE_S8_E16LookupForWritingERKS1_(%"class.WTF::HashTable.257"* nonnull %5, %"class.WTF::String"* dereferenceable(8) %92) #13
  %94 = extractvalue { %"struct.WTF::KeyValuePair.260"*, i8 } %93, 0
  call void @_ZN3WTF5MoverINS_12KeyValuePairINS_6StringENS_7HashSetIjNS_7IntHashIjEENS_10HashTraitsIjEENS_18PartitionAllocatorEEEEES8_NS_18HashMapValueTraitsINS6_IS2_EENS6_IS9_EEEELb1EE4MoveEOSA_RSA_(%"struct.WTF::KeyValuePair.260"* dereferenceable(32) %88, %"struct.WTF::KeyValuePair.260"* dereferenceable(32) %94) #13
  %95 = load %"struct.WTF::KeyValuePair.260"*, %"struct.WTF::KeyValuePair.260"** %15, align 8
  %96 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %95, i64 %87
  %97 = icmp eq %"struct.WTF::KeyValuePair.260"* %96, %3
  %98 = select i1 %97, %"struct.WTF::KeyValuePair.260"* %94, %"struct.WTF::KeyValuePair.260"* %85
  %99 = load i32, i32* %12, align 8
  %100 = ptrtoint %"struct.WTF::KeyValuePair.260"* %95 to i64
  br label %101

101:                                              ; preds = %81, %81, %91
  %102 = phi i64 [ %82, %81 ], [ %100, %91 ], [ %82, %81 ]
  %103 = phi i32 [ %83, %81 ], [ %99, %91 ], [ %83, %81 ]
  %104 = phi %"struct.WTF::KeyValuePair.260"* [ %84, %81 ], [ %95, %91 ], [ %84, %81 ]
  %105 = phi %"struct.WTF::KeyValuePair.260"* [ %85, %81 ], [ %98, %91 ], [ %85, %81 ]
  %106 = add i32 %86, 1
  %107 = icmp eq i32 %106, %103
  br i1 %107, label %24, label %81
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair.260"*, i8 } @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_7HashSetIjNS_7IntHashIjEENS_10HashTraitsIjEENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS6_IS1_EENS6_IS9_EEEESE_S8_E16LookupForWritingERKS1_(%"class.WTF::HashTable.257"*, %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::HashTable.257", %"class.WTF::HashTable.257"* %0, i64 0, i32 0
  %4 = load %"struct.WTF::KeyValuePair.260"*, %"struct.WTF::KeyValuePair.260"** %3, align 8
  %5 = getelementptr inbounds %"class.WTF::HashTable.257", %"class.WTF::HashTable.257"* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = add i32 %6, -1
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = lshr i32 %12, 8
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %17

15:                                               ; preds = %2
  %16 = tail call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* %10) #13
  br label %17

17:                                               ; preds = %15, %2
  %18 = phi i32 [ %16, %15 ], [ %13, %2 ]
  %19 = and i32 %18, %7
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %4, i64 %20
  %22 = ptrtoint %"struct.WTF::KeyValuePair.260"* %21 to i64
  %23 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %21, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %23, align 8
  %25 = icmp eq %"class.WTF::StringImpl"* %24, null
  br i1 %25, label %42, label %26

26:                                               ; preds = %17
  %27 = xor i32 %18, -1
  %28 = lshr i32 %18, 23
  %29 = add i32 %28, %27
  %30 = shl i32 %29, 12
  %31 = xor i32 %30, %29
  %32 = lshr i32 %31, 7
  %33 = xor i32 %32, %31
  %34 = shl i32 %33, 2
  %35 = xor i32 %34, %33
  %36 = lshr i32 %35, 20
  %37 = xor i32 %36, %35
  %38 = or i32 %37, 1
  %39 = zext i32 %38 to i64
  br label %48

40:                                               ; preds = %61
  %41 = ptrtoint %"struct.WTF::KeyValuePair.260"* %67 to i64
  br label %42

42:                                               ; preds = %40, %17
  %43 = phi i64 [ %22, %17 ], [ %41, %40 ]
  %44 = phi %"struct.WTF::KeyValuePair.260"* [ null, %17 ], [ %62, %40 ]
  %45 = icmp eq %"struct.WTF::KeyValuePair.260"* %44, null
  %46 = ptrtoint %"struct.WTF::KeyValuePair.260"* %44 to i64
  %47 = select i1 %45, i64 %43, i64 %46
  br label %72

48:                                               ; preds = %61, %26
  %49 = phi %"struct.WTF::KeyValuePair.260"* [ null, %26 ], [ %62, %61 ]
  %50 = phi i64 [ %22, %26 ], [ %68, %61 ]
  %51 = phi %"struct.WTF::KeyValuePair.260"* [ %21, %26 ], [ %67, %61 ]
  %52 = phi i64 [ %20, %26 ], [ %66, %61 ]
  %53 = phi i64 [ 0, %26 ], [ %64, %61 ]
  %54 = bitcast %"struct.WTF::KeyValuePair.260"* %51 to i8**
  %55 = load i8*, i8** %54, align 8
  %56 = icmp eq i8* %55, inttoptr (i64 -1 to i8*)
  br i1 %56, label %61, label %57

57:                                               ; preds = %48
  %58 = bitcast i8* %55 to %"class.WTF::StringImpl"*
  %59 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %60 = tail call zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %58, %"class.WTF::StringImpl"* %59) #13
  br i1 %60, label %72, label %61

61:                                               ; preds = %57, %48
  %62 = phi %"struct.WTF::KeyValuePair.260"* [ %49, %57 ], [ %51, %48 ]
  %63 = icmp eq i64 %53, 0
  %64 = select i1 %63, i64 %39, i64 %53
  %65 = add i64 %64, %52
  %66 = and i64 %65, %8
  %67 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %4, i64 %66
  %68 = ptrtoint %"struct.WTF::KeyValuePair.260"* %67 to i64
  %69 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %67, i64 0, i32 0, i32 0, i32 0
  %70 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %69, align 8
  %71 = icmp eq %"class.WTF::StringImpl"* %70, null
  br i1 %71, label %40, label %48

72:                                               ; preds = %57, %42
  %73 = phi i64 [ %47, %42 ], [ %50, %57 ]
  %74 = phi i8 [ 0, %42 ], [ 1, %57 ]
  %75 = inttoptr i64 %73 to %"struct.WTF::KeyValuePair.260"*
  %76 = insertvalue { %"struct.WTF::KeyValuePair.260"*, i8 } undef, %"struct.WTF::KeyValuePair.260"* %75, 0
  %77 = insertvalue { %"struct.WTF::KeyValuePair.260"*, i8 } %76, i8 %74, 1
  ret { %"struct.WTF::KeyValuePair.260"*, i8 } %77
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF5MoverINS_12KeyValuePairINS_6StringENS_7HashSetIjNS_7IntHashIjEENS_10HashTraitsIjEENS_18PartitionAllocatorEEEEES8_NS_18HashMapValueTraitsINS6_IS2_EENS6_IS9_EEEELb1EE4MoveEOSA_RSA_(%"struct.WTF::KeyValuePair.260"* dereferenceable(32), %"struct.WTF::KeyValuePair.260"* dereferenceable(32)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %1, i64 0, i32 1, i32 0, i32 0
  %4 = load i32*, i32** %3, align 8
  %5 = icmp eq i32* %4, null
  br i1 %5, label %8, label %6, !prof !3

6:                                                ; preds = %2
  %7 = bitcast i32* %4 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %7) #13
  store i32* null, i32** %3, align 8
  br label %8

8:                                                ; preds = %6, %2
  %9 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %1, i64 0, i32 0, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = icmp eq %"class.WTF::StringImpl"* %10, null
  br i1 %11, label %25, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load atomic i32, i32* %13 monotonic, align 4
  %15 = and i32 %14, 2
  %16 = icmp eq i32 %15, 0
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 0
  %18 = load i32, i32* %17, align 4
  br i1 %16, label %19, label %21

19:                                               ; preds = %12
  %20 = add i32 %18, -1
  store i32 %20, i32* %17, align 4
  br label %21

21:                                               ; preds = %19, %12
  %22 = phi i32 [ %20, %19 ], [ %18, %12 ]
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %25

24:                                               ; preds = %21
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %10) #13
  br label %25

25:                                               ; preds = %8, %21, %24
  %26 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %0, i64 0, i32 0, i32 0, i32 0
  %27 = bitcast %"struct.WTF::KeyValuePair.260"* %0 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = bitcast %"struct.WTF::KeyValuePair.260"* %1 to i64*
  store i64 %28, i64* %29, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %26, align 8
  %30 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %1, i64 0, i32 1
  %31 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %0, i64 0, i32 1
  %32 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %1, i64 0, i32 1, i32 0, i32 1
  %33 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %1, i64 0, i32 1, i32 0, i32 2
  %34 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %1, i64 0, i32 1, i32 0, i32 3
  %35 = bitcast %"class.WTF::HashSet"* %31 to i64*
  %36 = bitcast %"class.WTF::HashSet"* %30 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %36, i8 0, i64 20, i1 false) #13
  %37 = load i64, i64* %35, align 8
  %38 = bitcast %"class.WTF::HashSet"* %30 to i64*
  store atomic i64 0, i64* %35 monotonic, align 8
  store atomic i64 %37, i64* %38 monotonic, align 8
  %39 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %0, i64 0, i32 1, i32 0, i32 1
  %40 = load i32, i32* %32, align 4
  %41 = load i32, i32* %39, align 4
  store i32 %41, i32* %32, align 4
  store i32 %40, i32* %39, align 4
  %42 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %0, i64 0, i32 1, i32 0, i32 2
  %43 = load i32, i32* %33, align 4
  %44 = load i32, i32* %42, align 4
  store i32 %44, i32* %33, align 4
  store i32 %43, i32* %42, align 4
  %45 = load i32, i32* %34, align 8
  %46 = and i32 %45, 2147483647
  %47 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %0, i64 0, i32 1, i32 0, i32 3
  %48 = load i32, i32* %47, align 8
  %49 = and i32 %48, 2147483647
  %50 = and i32 %45, -2147483648
  %51 = or i32 %49, %50
  store i32 %51, i32* %34, align 8
  %52 = load i32, i32* %47, align 8
  %53 = and i32 %52, -2147483648
  %54 = or i32 %53, %46
  store i32 %54, i32* %47, align 8
  ret void
}

declare i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"*) local_unnamed_addr #4

declare zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"*, %"class.WTF::StringImpl"*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i32*, i8 } @_ZN3WTF9HashTableIjjNS_17IdentityExtractorENS_7IntHashIjEENS_10HashTraitsIjEES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKjRjEENS_18HashTableAddResultIS7_jEEOT0_OT1_(%"class.WTF::HashTable.25"*, i32* dereferenceable(4), i32* dereferenceable(4)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable.25", %"class.WTF::HashTable.25"* %0, i64 0, i32 0
  %5 = load i32*, i32** %4, align 8
  %6 = icmp eq i32* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call i32* @_ZN3WTF9HashTableIjjNS_17IdentityExtractorENS_7IntHashIjEENS_10HashTraitsIjEES5_NS_18PartitionAllocatorEE6ExpandEPj(%"class.WTF::HashTable.25"* %0, i32* null)
  %9 = load i32*, i32** %4, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi i32* [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable.25", %"class.WTF::HashTable.25"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = load i32, i32* %1, align 4
  %17 = shl i32 %16, 15
  %18 = xor i32 %17, -1
  %19 = add i32 %16, %18
  %20 = lshr i32 %19, 10
  %21 = xor i32 %20, %19
  %22 = mul i32 %21, 9
  %23 = lshr i32 %22, 6
  %24 = xor i32 %23, %22
  %25 = shl i32 %24, 11
  %26 = xor i32 %25, -1
  %27 = add i32 %24, %26
  %28 = lshr i32 %27, 16
  %29 = xor i32 %28, %27
  %30 = and i32 %29, %14
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds i32, i32* %11, i64 %31
  %33 = load i32, i32* %32, align 4
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %75, label %35

35:                                               ; preds = %10
  %36 = xor i32 %29, -1
  %37 = lshr i32 %27, 23
  %38 = add i32 %37, %36
  %39 = shl i32 %38, 12
  %40 = xor i32 %39, %38
  %41 = lshr i32 %40, 7
  %42 = xor i32 %41, %40
  %43 = shl i32 %42, 2
  %44 = xor i32 %43, %42
  %45 = lshr i32 %44, 20
  %46 = xor i32 %45, %44
  %47 = or i32 %46, 1
  %48 = zext i32 %47 to i64
  br label %49

49:                                               ; preds = %35, %56
  %50 = phi i32 [ %33, %35 ], [ %64, %56 ]
  %51 = phi i32* [ %32, %35 ], [ %63, %56 ]
  %52 = phi i32* [ null, %35 ], [ %58, %56 ]
  %53 = phi i64 [ %31, %35 ], [ %62, %56 ]
  %54 = phi i64 [ 0, %35 ], [ %60, %56 ]
  %55 = icmp eq i32 %50, %16
  br i1 %55, label %89, label %56

56:                                               ; preds = %49
  %57 = icmp eq i32 %50, -1
  %58 = select i1 %57, i32* %51, i32* %52
  %59 = icmp eq i64 %54, 0
  %60 = select i1 %59, i64 %48, i64 %54
  %61 = add i64 %60, %53
  %62 = and i64 %61, %15
  %63 = getelementptr inbounds i32, i32* %11, i64 %62
  %64 = load i32, i32* %63, align 4
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %49

66:                                               ; preds = %56
  %67 = icmp eq i32* %58, null
  br i1 %67, label %75, label %68

68:                                               ; preds = %66
  store i32 0, i32* %58, align 4
  %69 = getelementptr inbounds %"class.WTF::HashTable.25", %"class.WTF::HashTable.25"* %0, i64 0, i32 3
  %70 = load i32, i32* %69, align 8
  %71 = add i32 %70, 2147483647
  %72 = and i32 %71, 2147483647
  %73 = and i32 %70, -2147483648
  %74 = or i32 %72, %73
  store i32 %74, i32* %69, align 8
  br label %75

75:                                               ; preds = %10, %66, %68
  %76 = phi i32* [ %58, %68 ], [ %63, %66 ], [ %32, %10 ]
  %77 = load i32, i32* %2, align 4
  store i32 %77, i32* %76, align 4
  %78 = getelementptr inbounds %"class.WTF::HashTable.25", %"class.WTF::HashTable.25"* %0, i64 0, i32 2
  %79 = load i32, i32* %78, align 4
  %80 = add i32 %79, 1
  store i32 %80, i32* %78, align 4
  %81 = getelementptr inbounds %"class.WTF::HashTable.25", %"class.WTF::HashTable.25"* %0, i64 0, i32 3
  %82 = load i32, i32* %81, align 8
  %83 = add i32 %82, %80
  %84 = shl i32 %83, 1
  %85 = load i32, i32* %12, align 8
  %86 = icmp ult i32 %84, %85
  br i1 %86, label %89, label %87

87:                                               ; preds = %75
  %88 = tail call i32* @_ZN3WTF9HashTableIjjNS_17IdentityExtractorENS_7IntHashIjEENS_10HashTraitsIjEES5_NS_18PartitionAllocatorEE6ExpandEPj(%"class.WTF::HashTable.25"* %0, i32* %76)
  br label %89

89:                                               ; preds = %49, %75, %87
  %90 = phi i8 [ 1, %75 ], [ 1, %87 ], [ 0, %49 ]
  %91 = phi i32* [ %76, %75 ], [ %88, %87 ], [ %51, %49 ]
  %92 = insertvalue { i32*, i8 } undef, i32* %91, 0
  %93 = insertvalue { i32*, i8 } %92, i8 %90, 1
  ret { i32*, i8 } %93
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair.255"* @_ZN3WTF9HashTableIjNS_12KeyValuePairIjjEENS_24KeyValuePairKeyExtractorENS_7IntHashIjEENS_18HashMapValueTraitsINS_10HashTraitsIjEES8_EES8_NS_18PartitionAllocatorEE8RehashToEPS2_jSC_(%"class.WTF::HashTable.252"*, %"struct.WTF::KeyValuePair.255"*, i32, %"struct.WTF::KeyValuePair.255"*) local_unnamed_addr #0 comdat align 2 {
  %5 = ptrtoint %"struct.WTF::KeyValuePair.255"* %1 to i64
  %6 = getelementptr inbounds %"class.WTF::HashTable.252", %"class.WTF::HashTable.252"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  %9 = getelementptr inbounds %"class.WTF::HashTable.252", %"class.WTF::HashTable.252"* %0, i64 0, i32 0
  br i1 %8, label %10, label %13

10:                                               ; preds = %4
  %11 = bitcast %"class.WTF::HashTable.252"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  br label %20

13:                                               ; preds = %4
  %14 = add i32 %2, -1
  %15 = zext i32 %14 to i64
  %16 = load %"struct.WTF::KeyValuePair.255"*, %"struct.WTF::KeyValuePair.255"** %9, align 8
  %17 = ptrtoint %"struct.WTF::KeyValuePair.255"* %16 to i64
  br label %31

18:                                               ; preds = %118
  %19 = bitcast %"class.WTF::HashTable.252"* %0 to i64*
  br label %20

20:                                               ; preds = %10, %18
  %21 = phi i64* [ %11, %10 ], [ %19, %18 ]
  %22 = phi i64 [ %12, %10 ], [ %119, %18 ]
  %23 = phi %"struct.WTF::KeyValuePair.255"* [ null, %10 ], [ %122, %18 ]
  store atomic i64 %5, i64* %21 monotonic, align 8
  store i32 %2, i32* %6, align 8
  %24 = icmp eq i64 %22, 0
  br i1 %24, label %27, label %25

25:                                               ; preds = %20
  %26 = inttoptr i64 %22 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %26) #13
  br label %27

27:                                               ; preds = %20, %25
  %28 = getelementptr inbounds %"class.WTF::HashTable.252", %"class.WTF::HashTable.252"* %0, i64 0, i32 3
  %29 = load i32, i32* %28, align 8
  %30 = and i32 %29, -2147483648
  store i32 %30, i32* %28, align 8
  ret %"struct.WTF::KeyValuePair.255"* %23

31:                                               ; preds = %13, %118
  %32 = phi i64 [ %17, %13 ], [ %119, %118 ]
  %33 = phi i32 [ %7, %13 ], [ %120, %118 ]
  %34 = phi %"struct.WTF::KeyValuePair.255"* [ %16, %13 ], [ %121, %118 ]
  %35 = phi %"struct.WTF::KeyValuePair.255"* [ null, %13 ], [ %122, %118 ]
  %36 = phi i32 [ 0, %13 ], [ %123, %118 ]
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds %"struct.WTF::KeyValuePair.255", %"struct.WTF::KeyValuePair.255"* %34, i64 %37
  %39 = getelementptr inbounds %"struct.WTF::KeyValuePair.255", %"struct.WTF::KeyValuePair.255"* %38, i64 0, i32 0
  %40 = load i32, i32* %39, align 4
  %41 = add i32 %40, 1
  %42 = icmp ult i32 %41, 2
  br i1 %42, label %118, label %43

43:                                               ; preds = %31
  %44 = shl i32 %40, 15
  %45 = xor i32 %44, -1
  %46 = add i32 %40, %45
  %47 = lshr i32 %46, 10
  %48 = xor i32 %47, %46
  %49 = mul i32 %48, 9
  %50 = lshr i32 %49, 6
  %51 = xor i32 %50, %49
  %52 = shl i32 %51, 11
  %53 = xor i32 %52, -1
  %54 = add i32 %51, %53
  %55 = lshr i32 %54, 16
  %56 = xor i32 %55, %54
  %57 = and i32 %56, %14
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds %"struct.WTF::KeyValuePair.255", %"struct.WTF::KeyValuePair.255"* %1, i64 %58
  %60 = ptrtoint %"struct.WTF::KeyValuePair.255"* %59 to i64
  %61 = getelementptr inbounds %"struct.WTF::KeyValuePair.255", %"struct.WTF::KeyValuePair.255"* %59, i64 0, i32 0
  %62 = load i32, i32* %61, align 4
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %81, label %64

64:                                               ; preds = %43
  %65 = xor i32 %56, -1
  %66 = lshr i32 %54, 23
  %67 = add i32 %66, %65
  %68 = shl i32 %67, 12
  %69 = xor i32 %68, %67
  %70 = lshr i32 %69, 7
  %71 = xor i32 %70, %69
  %72 = shl i32 %71, 2
  %73 = xor i32 %72, %71
  %74 = lshr i32 %73, 20
  %75 = xor i32 %74, %73
  %76 = or i32 %75, 1
  %77 = zext i32 %76 to i64
  br label %87

78:                                               ; preds = %94
  %79 = ptrtoint %"struct.WTF::KeyValuePair.255"* %101 to i64
  %80 = inttoptr i64 %96 to %"struct.WTF::KeyValuePair.255"*
  br label %81

81:                                               ; preds = %78, %43
  %82 = phi i64 [ %79, %78 ], [ %60, %43 ]
  %83 = phi %"struct.WTF::KeyValuePair.255"* [ %80, %78 ], [ null, %43 ]
  %84 = icmp eq %"struct.WTF::KeyValuePair.255"* %83, null
  %85 = ptrtoint %"struct.WTF::KeyValuePair.255"* %83 to i64
  %86 = select i1 %84, i64 %82, i64 %85
  br label %106

87:                                               ; preds = %94, %64
  %88 = phi i64 [ 0, %64 ], [ %96, %94 ]
  %89 = phi i32 [ %62, %64 ], [ %104, %94 ]
  %90 = phi i64 [ %60, %64 ], [ %102, %94 ]
  %91 = phi i64 [ %58, %64 ], [ %100, %94 ]
  %92 = phi i64 [ 0, %64 ], [ %98, %94 ]
  %93 = icmp eq i32 %89, %40
  br i1 %93, label %106, label %94

94:                                               ; preds = %87
  %95 = icmp eq i32 %89, -1
  %96 = select i1 %95, i64 %90, i64 %88
  %97 = icmp eq i64 %92, 0
  %98 = select i1 %97, i64 %77, i64 %92
  %99 = add i64 %98, %91
  %100 = and i64 %99, %15
  %101 = getelementptr inbounds %"struct.WTF::KeyValuePair.255", %"struct.WTF::KeyValuePair.255"* %1, i64 %100
  %102 = ptrtoint %"struct.WTF::KeyValuePair.255"* %101 to i64
  %103 = getelementptr inbounds %"struct.WTF::KeyValuePair.255", %"struct.WTF::KeyValuePair.255"* %101, i64 0, i32 0
  %104 = load i32, i32* %103, align 4
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %78, label %87

106:                                              ; preds = %87, %81
  %107 = phi i64 [ %86, %81 ], [ %90, %87 ]
  %108 = inttoptr i64 %107 to %"struct.WTF::KeyValuePair.255"*
  %109 = bitcast %"struct.WTF::KeyValuePair.255"* %38 to i64*
  %110 = inttoptr i64 %107 to i64*
  %111 = load i64, i64* %109, align 4
  store i64 %111, i64* %110, align 4
  %112 = load %"struct.WTF::KeyValuePair.255"*, %"struct.WTF::KeyValuePair.255"** %9, align 8
  %113 = getelementptr inbounds %"struct.WTF::KeyValuePair.255", %"struct.WTF::KeyValuePair.255"* %112, i64 %37
  %114 = icmp eq %"struct.WTF::KeyValuePair.255"* %113, %3
  %115 = select i1 %114, %"struct.WTF::KeyValuePair.255"* %108, %"struct.WTF::KeyValuePair.255"* %35
  %116 = load i32, i32* %6, align 8
  %117 = ptrtoint %"struct.WTF::KeyValuePair.255"* %112 to i64
  br label %118

118:                                              ; preds = %31, %106
  %119 = phi i64 [ %32, %31 ], [ %117, %106 ]
  %120 = phi i32 [ %33, %31 ], [ %116, %106 ]
  %121 = phi %"struct.WTF::KeyValuePair.255"* [ %34, %31 ], [ %112, %106 ]
  %122 = phi %"struct.WTF::KeyValuePair.255"* [ %35, %31 ], [ %115, %106 ]
  %123 = add i32 %36, 1
  %124 = icmp eq i32 %123, %120
  br i1 %124, label %18, label %31
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair.255"*, i8 } @_ZN3WTF9HashTableIjNS_12KeyValuePairIjjEENS_24KeyValuePairKeyExtractorENS_7IntHashIjEENS_18HashMapValueTraitsINS_10HashTraitsIjEES8_EES8_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorIS9_S5_SA_EERjjEENS_18HashTableAddResultISB_S2_EEOT0_OT1_(%"class.WTF::HashTable.252"*, i32* dereferenceable(4), i32* dereferenceable(4)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable.252", %"class.WTF::HashTable.252"* %0, i64 0, i32 0
  %5 = load %"struct.WTF::KeyValuePair.255"*, %"struct.WTF::KeyValuePair.255"** %4, align 8
  %6 = icmp eq %"struct.WTF::KeyValuePair.255"* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call %"struct.WTF::KeyValuePair.255"* @_ZN3WTF9HashTableIjNS_12KeyValuePairIjjEENS_24KeyValuePairKeyExtractorENS_7IntHashIjEENS_18HashMapValueTraitsINS_10HashTraitsIjEES8_EES8_NS_18PartitionAllocatorEE6ExpandEPS2_(%"class.WTF::HashTable.252"* %0, %"struct.WTF::KeyValuePair.255"* null)
  %9 = load %"struct.WTF::KeyValuePair.255"*, %"struct.WTF::KeyValuePair.255"** %4, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi %"struct.WTF::KeyValuePair.255"* [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable.252", %"class.WTF::HashTable.252"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = load i32, i32* %1, align 4
  %17 = shl i32 %16, 15
  %18 = xor i32 %17, -1
  %19 = add i32 %16, %18
  %20 = lshr i32 %19, 10
  %21 = xor i32 %20, %19
  %22 = mul i32 %21, 9
  %23 = lshr i32 %22, 6
  %24 = xor i32 %23, %22
  %25 = shl i32 %24, 11
  %26 = xor i32 %25, -1
  %27 = add i32 %24, %26
  %28 = lshr i32 %27, 16
  %29 = xor i32 %28, %27
  %30 = and i32 %29, %14
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds %"struct.WTF::KeyValuePair.255", %"struct.WTF::KeyValuePair.255"* %11, i64 %31
  %33 = getelementptr inbounds %"struct.WTF::KeyValuePair.255", %"struct.WTF::KeyValuePair.255"* %32, i64 0, i32 0
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %79, label %36

36:                                               ; preds = %10
  %37 = xor i32 %29, -1
  %38 = lshr i32 %27, 23
  %39 = add i32 %38, %37
  %40 = shl i32 %39, 12
  %41 = xor i32 %40, %39
  %42 = lshr i32 %41, 7
  %43 = xor i32 %42, %41
  %44 = shl i32 %43, 2
  %45 = xor i32 %44, %43
  %46 = lshr i32 %45, 20
  %47 = xor i32 %46, %45
  %48 = or i32 %47, 1
  %49 = zext i32 %48 to i64
  br label %50

50:                                               ; preds = %36, %57
  %51 = phi i32 [ %34, %36 ], [ %66, %57 ]
  %52 = phi %"struct.WTF::KeyValuePair.255"* [ %32, %36 ], [ %64, %57 ]
  %53 = phi %"struct.WTF::KeyValuePair.255"* [ null, %36 ], [ %59, %57 ]
  %54 = phi i64 [ %31, %36 ], [ %63, %57 ]
  %55 = phi i64 [ 0, %36 ], [ %61, %57 ]
  %56 = icmp eq i32 %51, %16
  br i1 %56, label %96, label %57

57:                                               ; preds = %50
  %58 = icmp eq i32 %51, -1
  %59 = select i1 %58, %"struct.WTF::KeyValuePair.255"* %52, %"struct.WTF::KeyValuePair.255"* %53
  %60 = icmp eq i64 %55, 0
  %61 = select i1 %60, i64 %49, i64 %55
  %62 = add i64 %61, %54
  %63 = and i64 %62, %15
  %64 = getelementptr inbounds %"struct.WTF::KeyValuePair.255", %"struct.WTF::KeyValuePair.255"* %11, i64 %63
  %65 = getelementptr inbounds %"struct.WTF::KeyValuePair.255", %"struct.WTF::KeyValuePair.255"* %64, i64 0, i32 0
  %66 = load i32, i32* %65, align 4
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %50

68:                                               ; preds = %57
  %69 = icmp eq %"struct.WTF::KeyValuePair.255"* %59, null
  br i1 %69, label %79, label %70

70:                                               ; preds = %68
  %71 = bitcast %"struct.WTF::KeyValuePair.255"* %59 to i64*
  store i64 0, i64* %71, align 4
  %72 = getelementptr inbounds %"class.WTF::HashTable.252", %"class.WTF::HashTable.252"* %0, i64 0, i32 3
  %73 = load i32, i32* %72, align 8
  %74 = add i32 %73, 2147483647
  %75 = and i32 %74, 2147483647
  %76 = and i32 %73, -2147483648
  %77 = or i32 %75, %76
  store i32 %77, i32* %72, align 8
  %78 = load i32, i32* %1, align 4
  br label %79

79:                                               ; preds = %10, %68, %70
  %80 = phi i32 [ %78, %70 ], [ %16, %68 ], [ %16, %10 ]
  %81 = phi %"struct.WTF::KeyValuePair.255"* [ %59, %70 ], [ %64, %68 ], [ %32, %10 ]
  %82 = getelementptr inbounds %"struct.WTF::KeyValuePair.255", %"struct.WTF::KeyValuePair.255"* %81, i64 0, i32 0
  store i32 %80, i32* %82, align 4
  %83 = getelementptr inbounds %"struct.WTF::KeyValuePair.255", %"struct.WTF::KeyValuePair.255"* %81, i64 0, i32 1
  %84 = load i32, i32* %2, align 4
  store i32 %84, i32* %83, align 4
  %85 = getelementptr inbounds %"class.WTF::HashTable.252", %"class.WTF::HashTable.252"* %0, i64 0, i32 2
  %86 = load i32, i32* %85, align 4
  %87 = add i32 %86, 1
  store i32 %87, i32* %85, align 4
  %88 = getelementptr inbounds %"class.WTF::HashTable.252", %"class.WTF::HashTable.252"* %0, i64 0, i32 3
  %89 = load i32, i32* %88, align 8
  %90 = add i32 %89, %87
  %91 = shl i32 %90, 1
  %92 = load i32, i32* %12, align 8
  %93 = icmp ult i32 %91, %92
  br i1 %93, label %96, label %94

94:                                               ; preds = %79
  %95 = tail call %"struct.WTF::KeyValuePair.255"* @_ZN3WTF9HashTableIjNS_12KeyValuePairIjjEENS_24KeyValuePairKeyExtractorENS_7IntHashIjEENS_18HashMapValueTraitsINS_10HashTraitsIjEES8_EES8_NS_18PartitionAllocatorEE6ExpandEPS2_(%"class.WTF::HashTable.252"* %0, %"struct.WTF::KeyValuePair.255"* %81)
  br label %96

96:                                               ; preds = %50, %79, %94
  %97 = phi i8 [ 1, %79 ], [ 1, %94 ], [ 0, %50 ]
  %98 = phi %"struct.WTF::KeyValuePair.255"* [ %81, %79 ], [ %95, %94 ], [ %52, %50 ]
  %99 = insertvalue { %"struct.WTF::KeyValuePair.255"*, i8 } undef, %"struct.WTF::KeyValuePair.255"* %98, 0
  %100 = insertvalue { %"struct.WTF::KeyValuePair.255"*, i8 } %99, i8 %97, 1
  ret { %"struct.WTF::KeyValuePair.255"*, i8 } %100
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair.255"* @_ZN3WTF9HashTableIjNS_12KeyValuePairIjjEENS_24KeyValuePairKeyExtractorENS_7IntHashIjEENS_18HashMapValueTraitsINS_10HashTraitsIjEES8_EES8_NS_18PartitionAllocatorEE6ExpandEPS2_(%"class.WTF::HashTable.252"*, %"struct.WTF::KeyValuePair.255"*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::HashTable.252", %"class.WTF::HashTable.252"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %31, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.WTF::HashTable.252", %"class.WTF::HashTable.252"* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = mul i32 %11, 6
  %13 = shl i32 %7, 1
  %14 = icmp ult i32 %12, %13
  br i1 %14, label %31, label %15

15:                                               ; preds = %9
  %16 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #13
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %17, align 8
  %18 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18)
  %19 = icmp ugt i32 %13, %7
  br i1 %19, label %20, label %21

20:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* null, i8** %17, align 8
  br label %30

21:                                               ; preds = %15
  %22 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %13) #13
  %23 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #13
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* %22, i8* %23) #13
  %24 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* %25, i8** %17, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %21
  %28 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #13
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1, i64 0, i64 0), i32 1783, %"class.logging::CheckOpResult"* nonnull %4) #13
  %29 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #13
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #13
  br label %30

30:                                               ; preds = %20, %21, %27
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #13
  br label %31

31:                                               ; preds = %9, %2, %30
  %32 = phi i32 [ %13, %30 ], [ 8, %2 ], [ %7, %9 ]
  %33 = zext i32 %32 to i64
  %34 = shl nuw nsw i64 %33, 3
  %35 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %34, i8* getelementptr inbounds ([93 x i8], [93 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairIjjEEEEPKcv, i64 0, i64 0)) #13
  call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 0, i64 %34, i1 false) #13
  %36 = bitcast i8* %35 to %"struct.WTF::KeyValuePair.255"*
  %37 = call %"struct.WTF::KeyValuePair.255"* @_ZN3WTF9HashTableIjNS_12KeyValuePairIjjEENS_24KeyValuePairKeyExtractorENS_7IntHashIjEENS_18HashMapValueTraitsINS_10HashTraitsIjEES8_EES8_NS_18PartitionAllocatorEE8RehashToEPS2_jSC_(%"class.WTF::HashTable.252"* %0, %"struct.WTF::KeyValuePair.255"* %36, i32 %32, %"struct.WTF::KeyValuePair.255"* %1) #13
  ret %"struct.WTF::KeyValuePair.255"* %37
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKNS_12AtomicStringEEEvOT_(%"class.WTF::Vector.758"*, %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #10 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.758", %"class.WTF::Vector.758"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.758", %"class.WTF::Vector.758"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = lshr i32 %7, 2
  %9 = add i32 %7, 1
  %10 = add i32 %9, %8
  %11 = icmp ugt i32 %10, 4
  %12 = select i1 %11, i32 %10, i32 4
  %13 = icmp ugt i32 %12, %5
  %14 = select i1 %13, i32 %12, i32 %5
  %15 = icmp ult i32 %7, %14
  %16 = getelementptr inbounds %"class.WTF::Vector.758", %"class.WTF::Vector.758"* %0, i64 0, i32 0, i32 0, i32 0
  %17 = load %"class.WTF::String"*, %"class.WTF::String"** %16, align 8
  br i1 %15, label %18, label %45, !prof !3

18:                                               ; preds = %2
  %19 = icmp eq %"class.WTF::String"* %17, null
  %20 = zext i32 %14 to i64
  %21 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %20) #13
  %22 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %21, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #13
  %23 = ptrtoint i8* %22 to i64
  br i1 %19, label %24, label %26

24:                                               ; preds = %18
  %25 = bitcast %"class.WTF::Vector.758"* %0 to i64*
  store atomic i64 %23, i64* %25 monotonic, align 8
  br label %41

26:                                               ; preds = %18
  %27 = load %"class.WTF::String"*, %"class.WTF::String"** %16, align 8
  %28 = icmp ne i8* %22, null
  %29 = icmp ne %"class.WTF::String"* %27, null
  %30 = and i1 %28, %29
  %31 = bitcast %"class.WTF::String"* %27 to i8*
  br i1 %30, label %32, label %38, !prof !3

32:                                               ; preds = %26
  %33 = load i32, i32* %3, align 4
  %34 = zext i32 %33 to i64
  %35 = shl nuw nsw i64 %34, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %22, i8* nonnull align 8 %31, i64 %35, i1 false) #13
  %36 = bitcast %"class.WTF::Vector.758"* %0 to i8**
  %37 = load i8*, i8** %36, align 8
  br label %38

38:                                               ; preds = %32, %26
  %39 = phi i8* [ %37, %32 ], [ %31, %26 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %39) #13
  %40 = bitcast %"class.WTF::Vector.758"* %0 to i64*
  store atomic i64 %23, i64* %40 monotonic, align 8
  br label %41

41:                                               ; preds = %38, %24
  %42 = lshr i64 %21, 3
  %43 = trunc i64 %42 to i32
  store i32 %43, i32* %6, align 8
  %44 = bitcast i8* %22 to %"class.WTF::String"*
  br label %45

45:                                               ; preds = %41, %2
  %46 = phi %"class.WTF::String"* [ %17, %2 ], [ %44, %41 ]
  %47 = load i32, i32* %3, align 4
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %50 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %49, align 8
  %51 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %46, i64 %48, i32 0, i32 0
  store %"class.WTF::StringImpl"* %50, %"class.WTF::StringImpl"** %51, align 8
  %52 = icmp eq %"class.WTF::StringImpl"* %50, null
  br i1 %52, label %70, label %53

53:                                               ; preds = %45
  %54 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %50, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %55 = load atomic i32, i32* %54 monotonic, align 4
  %56 = and i32 %55, 2
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %70

58:                                               ; preds = %53
  %59 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %50, i64 0, i32 0
  %60 = load i32, i32* %59, align 4
  %61 = zext i32 %60 to i33
  %62 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %61, i33 1) #13
  %63 = extractvalue { i33, i1 } %62, 1
  %64 = extractvalue { i33, i1 } %62, 0
  %65 = icmp slt i33 %64, 0
  %66 = or i1 %63, %65
  br i1 %66, label %67, label %68, !prof !2

67:                                               ; preds = %58
  tail call void @llvm.trap() #13
  unreachable

68:                                               ; preds = %58
  %69 = trunc i33 %64 to i32
  store i32 %69, i32* %59, align 4
  br label %70

70:                                               ; preds = %45, %53, %68
  %71 = load i32, i32* %3, align 4
  %72 = add i32 %71, 1
  store i32 %72, i32* %3, align 4
  ret void
}

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #13
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 268173312
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #13
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 268173312) #13
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.4, i64 0, i64 0), i8* %11, i8* %12) #13
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #13
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.5, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #13
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #13
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #13
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #13
  %20 = shl i64 %0, 3
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #13
  ret i64 %21
}

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #4

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #4

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink6MemberINS1_8AXObjectEEELj0ENS1_13HeapAllocatorEE14AppendSlowCaseIRPS3_EEvOT_(%"class.WTF::Vector.384"*, %"class.blink::AXObject"** dereferenceable(8)) local_unnamed_addr #10 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.384", %"class.WTF::Vector.384"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.384", %"class.WTF::Vector.384"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = lshr i32 %7, 2
  %9 = add i32 %7, 1
  %10 = add i32 %9, %8
  %11 = icmp ugt i32 %10, 4
  %12 = select i1 %11, i32 %10, i32 4
  %13 = icmp ugt i32 %12, %5
  %14 = select i1 %13, i32 %12, i32 %5
  tail call void @_ZN3WTF6VectorIN5blink6MemberINS1_8AXObjectEEELj0ENS1_13HeapAllocatorEE15ReserveCapacityEj(%"class.WTF::Vector.384"* %0, i32 %14) #13
  %15 = getelementptr inbounds %"class.WTF::Vector.384", %"class.WTF::Vector.384"* %0, i64 0, i32 0, i32 0, i32 0
  %16 = load %"class.blink::Member.380"*, %"class.blink::Member.380"** %15, align 8
  %17 = load i32, i32* %3, align 4
  %18 = zext i32 %17 to i64
  %19 = getelementptr inbounds %"class.blink::Member.380", %"class.blink::Member.380"* %16, i64 %18
  %20 = bitcast %"class.blink::AXObject"** %1 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = bitcast %"class.blink::Member.380"* %19 to i64*
  store atomic i64 %21, i64* %22 monotonic, align 8
  %23 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %28, label %25

25:                                               ; preds = %2
  %26 = inttoptr i64 %21 to i8*
  %27 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %26) #13
  br label %28

28:                                               ; preds = %2, %25
  %29 = load i32, i32* %3, align 4
  %30 = add i32 %29, 1
  store i32 %30, i32* %3, align 4
  ret void
}

declare zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink6MemberINS1_8AXObjectEEELj0ENS1_13HeapAllocatorEE15ReserveCapacityEj(%"class.WTF::Vector.384"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = getelementptr inbounds %"class.WTF::Vector.384", %"class.WTF::Vector.384"* %0, i64 0, i32 0, i32 0, i32 1
  %5 = load i32, i32* %4, align 8
  %6 = icmp ult i32 %5, %1
  br i1 %6, label %7, label %59, !prof !3

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.WTF::Vector.384", %"class.WTF::Vector.384"* %0, i64 0, i32 0, i32 0, i32 0
  %9 = load %"class.blink::Member.380"*, %"class.blink::Member.380"** %8, align 8
  %10 = icmp eq %"class.blink::Member.380"* %9, null
  %11 = zext i32 %1 to i64
  %12 = tail call i64 @_ZN5blink13HeapAllocator13QuantizedSizeINS_6MemberINS_8AXObjectEEEEEmm(i64 %11) #13
  br i1 %10, label %13, label %24

13:                                               ; preds = %7
  %14 = lshr i64 %12, 3
  %15 = tail call %"class.blink::HeapVectorBacking"* @_ZN5blink25MakeGarbageCollectedTraitINS_17HeapVectorBackingINS_6MemberINS_8AXObjectEEEN3WTF12VectorTraitsIS4_EEEEE4CallEm(i64 %14) #13
  %16 = ptrtoint %"class.blink::HeapVectorBacking"* %15 to i64
  %17 = bitcast %"class.WTF::Vector.384"* %0 to i64*
  store atomic i64 %16, i64* %17 monotonic, align 8
  %18 = trunc i64 %14 to i32
  store i32 %18, i32* %4, align 8
  %19 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %59, label %21

21:                                               ; preds = %13
  %22 = getelementptr inbounds %"class.blink::HeapVectorBacking", %"class.blink::HeapVectorBacking"* %15, i64 0, i32 0
  %23 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %22) #13
  br label %59

24:                                               ; preds = %7
  %25 = load %"class.blink::Member.380"*, %"class.blink::Member.380"** %8, align 8
  %26 = icmp eq %"class.blink::Member.380"* %25, null
  br i1 %26, label %33, label %27

27:                                               ; preds = %24
  %28 = bitcast %"class.blink::Member.380"* %25 to i8*
  %29 = tail call zeroext i1 @_ZN5blink13HeapAllocator19ExpandVectorBackingEPvm(i8* nonnull %28, i64 %12) #13
  br i1 %29, label %30, label %33

30:                                               ; preds = %27
  %31 = lshr i64 %12, 3
  %32 = trunc i64 %31 to i32
  store i32 %32, i32* %4, align 8
  br label %59

33:                                               ; preds = %24, %27
  %34 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %35 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %34, i64 0, i32 1
  %36 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %35) #13
  %37 = icmp eq i8* %36, null
  br i1 %37, label %38, label %40, !prof !2

38:                                               ; preds = %33
  %39 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #13
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %35, i8* %39) #13
  br label %40

40:                                               ; preds = %38, %33
  %41 = phi i8* [ %39, %38 ], [ %36, %33 ]
  %42 = bitcast i8* %41 to %"class.blink::ThreadState"**
  %43 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %42, align 8
  %44 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %43, i64 0, i32 6
  %45 = load i8, i8* %44, align 8, !range !4
  %46 = icmp eq i8 %45, 0
  br i1 %46, label %51, label %47

47:                                               ; preds = %40
  %48 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %43, i64 0, i32 16
  %49 = load i32, i32* %48, align 4
  %50 = icmp eq i32 %49, 1
  br i1 %50, label %55, label %51

51:                                               ; preds = %40, %47
  %52 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %43, i64 0, i32 13
  %53 = load i64, i64* %52, align 8
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %58, label %55

55:                                               ; preds = %47, %51
  %56 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %56) #13
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.2, i64 0, i64 0), i32 1810, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.3, i64 0, i64 0)) #13
  %57 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #13
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %56) #13
  br label %58

58:                                               ; preds = %51, %55
  call void @_ZN3WTF6VectorIN5blink6MemberINS1_8AXObjectEEELj0ENS1_13HeapAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.384"* %0, i32 %1)
  br label %59

59:                                               ; preds = %30, %21, %13, %2, %58
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink6MemberINS1_8AXObjectEEELj0ENS1_13HeapAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.384"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %4, label %13

4:                                                ; preds = %2
  %5 = bitcast %"class.WTF::Vector.384"* %0 to i8**
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.WTF::Vector.384", %"class.WTF::Vector.384"* %0, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  %10 = bitcast %"class.WTF::Vector.384"* %0 to i64*
  store atomic i64 0, i64* %10 monotonic, align 8
  %11 = getelementptr inbounds %"class.WTF::Vector.384", %"class.WTF::Vector.384"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 0, i32* %11, align 8
  %12 = shl nuw nsw i64 %9, 3
  tail call void @_ZN3WTF13AtomicMemzeroEPvm(i8* %6, i64 %12) #13
  tail call void @_ZN5blink13HeapAllocator17FreeVectorBackingEPv(i8* %6) #13
  br label %50

13:                                               ; preds = %2
  %14 = zext i32 %1 to i64
  %15 = tail call i64 @_ZN5blink13HeapAllocator13QuantizedSizeINS_6MemberINS_8AXObjectEEEEEmm(i64 %14) #13
  %16 = lshr i64 %15, 3
  %17 = tail call %"class.blink::HeapVectorBacking"* @_ZN5blink25MakeGarbageCollectedTraitINS_17HeapVectorBackingINS_6MemberINS_8AXObjectEEEN3WTF12VectorTraitsIS4_EEEEE4CallEm(i64 %16) #13
  %18 = ptrtoint %"class.blink::HeapVectorBacking"* %17 to i64
  %19 = getelementptr inbounds %"class.WTF::Vector.384", %"class.WTF::Vector.384"* %0, i64 0, i32 0, i32 0, i32 0
  %20 = load %"class.blink::Member.380"*, %"class.blink::Member.380"** %19, align 8
  %21 = getelementptr inbounds %"class.WTF::Vector.384", %"class.WTF::Vector.384"* %0, i64 0, i32 0, i32 0, i32 2
  %22 = icmp ne %"class.blink::HeapVectorBacking"* %17, null
  %23 = icmp ne %"class.blink::Member.380"* %20, null
  %24 = and i1 %22, %23
  %25 = bitcast %"class.blink::Member.380"* %20 to i8*
  br i1 %24, label %28, label %26, !prof !3

26:                                               ; preds = %13
  %27 = bitcast %"class.WTF::Vector.384"* %0 to i8**
  br label %35

28:                                               ; preds = %13
  %29 = load i32, i32* %21, align 4
  %30 = zext i32 %29 to i64
  %31 = shl nuw nsw i64 %30, 3
  %32 = getelementptr inbounds %"class.blink::HeapVectorBacking", %"class.blink::HeapVectorBacking"* %17, i64 0, i32 0
  tail call void @_ZN3WTF17AtomicWriteMemcpyEPvPKvm(i8* nonnull %32, i8* nonnull %25, i64 %31) #13
  %33 = bitcast %"class.WTF::Vector.384"* %0 to i8**
  %34 = load i8*, i8** %33, align 8
  br label %35

35:                                               ; preds = %26, %28
  %36 = phi i8** [ %27, %26 ], [ %33, %28 ]
  %37 = phi i8* [ %25, %26 ], [ %34, %28 ]
  %38 = load i32, i32* %21, align 4
  %39 = zext i32 %38 to i64
  %40 = shl nuw nsw i64 %39, 3
  tail call void @_ZN3WTF13AtomicMemzeroEPvm(i8* %37, i64 %40) #13
  %41 = load i8*, i8** %36, align 8
  tail call void @_ZN5blink13HeapAllocator17FreeVectorBackingEPv(i8* %41) #13
  %42 = bitcast %"class.WTF::Vector.384"* %0 to i64*
  store atomic i64 %18, i64* %42 monotonic, align 8
  %43 = trunc i64 %16 to i32
  %44 = getelementptr inbounds %"class.WTF::Vector.384", %"class.WTF::Vector.384"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %43, i32* %44, align 8
  %45 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %50, label %47

47:                                               ; preds = %35
  %48 = getelementptr inbounds %"class.blink::HeapVectorBacking", %"class.blink::HeapVectorBacking"* %17, i64 0, i32 0
  %49 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %48) #13
  br label %50

50:                                               ; preds = %47, %35, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN5blink13HeapAllocator13QuantizedSizeINS_6MemberINS_8AXObjectEEEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #13
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 16777216
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #13
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 16777216) #13
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.4, i64 0, i64 0), i8* %11, i8* %12) #13
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #13
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.6, i64 0, i64 0), i32 39, %"class.logging::CheckOpResult"* nonnull %3) #13
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #13
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #13
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #13
  %20 = shl i64 %0, 3
  ret i64 %20
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::HeapVectorBacking"* @_ZN5blink25MakeGarbageCollectedTraitINS_17HeapVectorBackingINS_6MemberINS_8AXObjectEEEN3WTF12VectorTraitsIS4_EEEEE4CallEm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #13
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp eq i64 %0, 0
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 0) #13
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 0) #13
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.7, i64 0, i64 0), i8* %11, i8* %12) #13
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #13
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([93 x i8], [93 x i8]* @.str.8, i64 0, i64 0), i32 86, %"class.logging::CheckOpResult"* nonnull %3) #13
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #13
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #13
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #13
  %20 = shl i64 %0, 3
  %21 = call i8* @_ZN5blink17HeapVectorBackingINS_6MemberINS_8AXObjectEEEN3WTF12VectorTraitsIS3_EEE14AllocateObjectIS7_EEPvm(i64 %20)
  %22 = bitcast i8* %21 to %"class.blink::HeapVectorBacking"*
  %23 = getelementptr inbounds i8, i8* %21, i64 -4
  %24 = bitcast i8* %23 to i16*
  %25 = load atomic i16, i16* %24 monotonic, align 2
  %26 = or i16 %25, 1
  store atomic i16 %26, i16* %24 release, align 2
  ret %"class.blink::HeapVectorBacking"* %22
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink17HeapVectorBackingINS_6MemberINS_8AXObjectEEEN3WTF12VectorTraitsIS3_EEE14AllocateObjectIS7_EEPvm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %6 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %5, i64 0, i32 1
  %7 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %6) #13
  %8 = icmp eq i8* %7, null
  br i1 %8, label %9, label %11, !prof !2

9:                                                ; preds = %1
  %10 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #13
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %6, i8* %10) #13
  br label %11

11:                                               ; preds = %1, %9
  %12 = phi i8* [ %10, %9 ], [ %7, %1 ]
  %13 = bitcast i8* %12 to %"class.blink::ThreadState"**
  %14 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %13, align 8
  %15 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %14, i64 0, i32 0, i32 0, i32 0, i32 0
  %16 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %15, align 8
  %17 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_6MemberINS_8AXObjectEEEN3WTF12VectorTraitsIS4_EEEEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %22

19:                                               ; preds = %11
  %20 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %21 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %20, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_6MemberINS_8AXObjectEEEN3WTF12VectorTraitsIS4_EEEEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic.262"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_6MemberINS_8AXObjectEEEN3WTF12VectorTraitsIS4_EEEEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic.262"*)) #13
  br label %22

22:                                               ; preds = %11, %19
  %23 = phi i32 [ %17, %11 ], [ %21, %19 ]
  %24 = getelementptr inbounds %"class.blink::ThreadHeap", %"class.blink::ThreadHeap"* %16, i64 0, i32 19, i64 4
  %25 = bitcast %"class.blink::BaseArena"** %24 to %"class.blink::NormalPageArena"**
  %26 = load %"class.blink::NormalPageArena"*, %"class.blink::NormalPageArena"** %25, align 8
  %27 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #13
  %28 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %28, align 8
  %29 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #13
  %30 = icmp ult i64 %0, -8
  br i1 %30, label %31, label %32

31:                                               ; preds = %22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #13
  store i8* null, i8** %28, align 8
  br label %42

32:                                               ; preds = %22
  %33 = add nsw i64 %0, 8
  %34 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %33) #13
  %35 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #13
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.9, i64 0, i64 0), i8* %34, i8* %35) #13
  %36 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %37 = load i8*, i8** %36, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #13
  store i8* %37, i8** %28, align 8
  %38 = icmp eq i8* %37, null
  br i1 %38, label %42, label %39

39:                                               ; preds = %32
  %40 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %40) #13
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.10, i64 0, i64 0), i32 246, %"class.logging::CheckOpResult"* nonnull %3) #13
  %41 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #13
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40) #13
  br label %42

42:                                               ; preds = %31, %32, %39
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27) #13
  %43 = add i64 %0, 15
  %44 = and i64 %43, -8
  %45 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %26, i64 0, i32 4
  %46 = load i64, i64* %45, align 8
  %47 = icmp ult i64 %46, %44
  br i1 %47, label %80, label %48, !prof !2

48:                                               ; preds = %42
  %49 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %26, i64 0, i32 3
  %50 = load i8*, i8** %49, align 8
  %51 = getelementptr inbounds i8, i8* %50, i64 %44
  store i8* %51, i8** %49, align 8
  %52 = sub i64 %46, %44
  store i64 %52, i64* %45, align 8
  %53 = bitcast i8* %50 to i32*
  store i32 0, i32* %53, align 4
  %54 = getelementptr inbounds i8, i8* %50, i64 4
  %55 = bitcast i8* %54 to i16*
  %56 = trunc i32 %23 to i16
  %57 = shl i16 %56, 2
  store atomic i16 %57, i16* %55 monotonic, align 2
  %58 = lshr exact i64 %44, 1
  %59 = trunc i64 %58 to i16
  %60 = getelementptr inbounds i8, i8* %50, i64 6
  %61 = bitcast i8* %60 to i16*
  store i16 %59, i16* %61, align 2
  %62 = ptrtoint i8* %50 to i64
  %63 = and i64 %62, -131072
  %64 = inttoptr i64 %63 to i8*
  %65 = getelementptr inbounds i8, i8* %64, i64 4400
  %66 = bitcast i8* %65 to %"class.blink::PlatformAwareObjectStartBitmap"*
  %67 = bitcast i8* %65 to i64*
  %68 = load i64, i64* %67, align 16
  %69 = sub i64 %62, %68
  %70 = lshr i64 %69, 3
  %71 = lshr i64 %69, 6
  %72 = getelementptr inbounds %"class.blink::PlatformAwareObjectStartBitmap", %"class.blink::PlatformAwareObjectStartBitmap"* %66, i64 0, i32 0, i32 1, i64 %71
  %73 = load i8, i8* %72, align 1
  %74 = trunc i64 %70 to i32
  %75 = and i32 %74, 7
  %76 = shl i32 1, %75
  %77 = trunc i32 %76 to i8
  %78 = or i8 %73, %77
  store atomic i8 %78, i8* %72 release, align 1
  %79 = getelementptr inbounds i8, i8* %50, i64 8
  br label %83

80:                                               ; preds = %42
  %81 = zext i32 %23 to i64
  %82 = call i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"* %26, i64 %44, i64 %81) #13
  br label %83

83:                                               ; preds = %48, %80
  %84 = phi i8* [ %79, %48 ], [ %82, %80 ]
  ret i8* %84
}

declare i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"*, i64, i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_17HeapVectorBackingINS_6MemberINS_8AXObjectEEEN3WTF12VectorTraitsIS4_EEEEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::Member.380"*
  %4 = getelementptr inbounds i8, i8* %1, i64 -2
  %5 = bitcast i8* %4 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = lshr i16 %6, 2
  %8 = icmp eq i16 %7, 0
  br i1 %8, label %9, label %17, !prof !2

9:                                                ; preds = %2
  %10 = getelementptr inbounds i8, i8* %1, i64 -8
  %11 = ptrtoint i8* %10 to i64
  %12 = and i64 %11, -131072
  %13 = inttoptr i64 %12 to i8*
  %14 = getelementptr inbounds i8, i8* %13, i64 4144
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %15, align 16
  br label %20

17:                                               ; preds = %2
  %18 = zext i16 %7 to i64
  %19 = shl nuw nsw i64 %18, 3
  br label %20

20:                                               ; preds = %17, %9
  %21 = phi i64 [ %16, %9 ], [ %19, %17 ]
  %22 = add i64 %21, -8
  %23 = lshr i64 %22, 3
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %41, label %25

25:                                               ; preds = %20
  %26 = bitcast %"class.blink::Visitor"* %0 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  br label %27

27:                                               ; preds = %38, %25
  %28 = phi i64 [ 0, %25 ], [ %39, %38 ]
  %29 = getelementptr inbounds %"class.blink::Member.380", %"class.blink::Member.380"* %3, i64 %28
  %30 = bitcast %"class.blink::Member.380"* %29 to i64*
  %31 = load atomic i64, i64* %30 monotonic, align 8
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %38, label %33

33:                                               ; preds = %27
  %34 = inttoptr i64 %31 to i8*
  %35 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %26, align 8
  %36 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %35, i64 5
  %37 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %36, align 8
  tail call void %37(%"class.blink::Visitor"* %0, i8* nonnull %34, i8* nonnull %34, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_8AXObjectEE5TraceEPNS_7VisitorEPKv) #13
  br label %38

38:                                               ; preds = %33, %27
  %39 = add nuw nsw i64 %28, 1
  %40 = icmp eq i64 %39, %23
  br i1 %40, label %41, label %27

41:                                               ; preds = %38, %20
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_17HeapVectorBackingINS_6MemberINS_8AXObjectEEEN3WTF12VectorTraitsIS4_EEEEE7GetNameEPKv(i8*) #0 comdat align 2 {
  ret { i8*, i8 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i64 0, i64 0), i8 1 }
}

declare i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"*, %"struct.blink::GCInfo"*, %"struct.std::__1::atomic.262"*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_8AXObjectEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::AXObject"*
  %4 = bitcast i8* %1 to void (%"class.blink::AXObject"*, %"class.blink::Visitor"*)***
  %5 = load void (%"class.blink::AXObject"*, %"class.blink::Visitor"*)**, void (%"class.blink::AXObject"*, %"class.blink::Visitor"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.blink::AXObject"*, %"class.blink::Visitor"*)*, void (%"class.blink::AXObject"*, %"class.blink::Visitor"*)** %5, i64 2
  %7 = load void (%"class.blink::AXObject"*, %"class.blink::Visitor"*)*, void (%"class.blink::AXObject"*, %"class.blink::Visitor"*)** %6, align 8
  tail call void %7(%"class.blink::AXObject"* %3, %"class.blink::Visitor"* %0) #13
  ret void
}

declare zeroext i1 @_ZN5blink13HeapAllocator19ExpandVectorBackingEPvm(i8*, i64) local_unnamed_addr #4

declare void @_ZN3WTF17AtomicWriteMemcpyEPvPKvm(i8*, i8*, i64) local_unnamed_addr #4

declare void @_ZN3WTF13AtomicMemzeroEPvm(i8*, i64) local_unnamed_addr #4

declare void @_ZN5blink13HeapAllocator17FreeVectorBackingEPv(i8*) local_unnamed_addr #4

; Function Attrs: noreturn
declare void @_ZN4absl17optional_internal25throw_bad_optional_accessEv() local_unnamed_addr #11

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIjLj0ENS_18PartitionAllocatorEE14AppendSlowCaseIjEEvOT_(%"class.WTF::Vector.764"*, i32* dereferenceable(4)) local_unnamed_addr #10 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.764", %"class.WTF::Vector.764"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.764", %"class.WTF::Vector.764"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load i32*, i32** %6, align 8
  %8 = icmp ugt i32* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds i32, i32* %7, i64 %10
  %12 = icmp ugt i32* %11, %1
  br i1 %12, label %54, label %13

13:                                               ; preds = %9, %2
  %14 = getelementptr inbounds %"class.WTF::Vector.764", %"class.WTF::Vector.764"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = lshr i32 %15, 2
  %17 = add i32 %15, 1
  %18 = add i32 %17, %16
  %19 = icmp ugt i32 %18, 4
  %20 = select i1 %19, i32 %18, i32 4
  %21 = icmp ugt i32 %20, %5
  %22 = select i1 %21, i32 %20, i32 %5
  %23 = icmp ult i32 %15, %22
  br i1 %23, label %24, label %99, !prof !3

24:                                               ; preds = %13
  %25 = icmp eq i32* %7, null
  %26 = zext i32 %22 to i64
  %27 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIjEEmm(i64 %26) #13
  %28 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %27, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIjEEPKcv, i64 0, i64 0)) #13
  br i1 %25, label %29, label %35

29:                                               ; preds = %24
  %30 = ptrtoint i8* %28 to i64
  %31 = bitcast %"class.WTF::Vector.764"* %0 to i64*
  store atomic i64 %30, i64* %31 monotonic, align 8
  %32 = lshr i64 %27, 2
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %14, align 8
  %34 = bitcast i8* %28 to i32*
  br label %99

35:                                               ; preds = %24
  %36 = lshr i64 %27, 2
  %37 = ptrtoint i8* %28 to i64
  %38 = load i32*, i32** %6, align 8
  %39 = icmp ne i8* %28, null
  %40 = icmp ne i32* %38, null
  %41 = and i1 %39, %40
  %42 = bitcast i32* %38 to i8*
  br i1 %41, label %43, label %49, !prof !3

43:                                               ; preds = %35
  %44 = load i32, i32* %3, align 4
  %45 = zext i32 %44 to i64
  %46 = shl nuw nsw i64 %45, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %28, i8* nonnull align 4 %42, i64 %46, i1 false) #13
  %47 = bitcast %"class.WTF::Vector.764"* %0 to i8**
  %48 = load i8*, i8** %47, align 8
  br label %49

49:                                               ; preds = %43, %35
  %50 = phi i8* [ %48, %43 ], [ %42, %35 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %50) #13
  %51 = bitcast %"class.WTF::Vector.764"* %0 to i64*
  store atomic i64 %37, i64* %51 monotonic, align 8
  %52 = trunc i64 %36 to i32
  store i32 %52, i32* %14, align 8
  %53 = bitcast i8* %28 to i32*
  br label %99

54:                                               ; preds = %9
  %55 = ptrtoint i32* %1 to i64
  %56 = ptrtoint i32* %7 to i64
  %57 = sub i64 %55, %56
  %58 = ashr exact i64 %57, 2
  %59 = getelementptr inbounds %"class.WTF::Vector.764", %"class.WTF::Vector.764"* %0, i64 0, i32 0, i32 0, i32 1
  %60 = load i32, i32* %59, align 8
  %61 = lshr i32 %60, 2
  %62 = add i32 %60, 1
  %63 = add i32 %62, %61
  %64 = icmp ugt i32 %63, 4
  %65 = select i1 %64, i32 %63, i32 4
  %66 = icmp ugt i32 %65, %5
  %67 = select i1 %66, i32 %65, i32 %5
  %68 = icmp ult i32 %60, %67
  br i1 %68, label %69, label %96, !prof !3

69:                                               ; preds = %54
  %70 = icmp eq i32* %7, null
  %71 = zext i32 %67 to i64
  %72 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIjEEmm(i64 %71) #13
  %73 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %72, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIjEEPKcv, i64 0, i64 0)) #13
  %74 = ptrtoint i8* %73 to i64
  br i1 %70, label %75, label %77

75:                                               ; preds = %69
  %76 = bitcast %"class.WTF::Vector.764"* %0 to i64*
  store atomic i64 %74, i64* %76 monotonic, align 8
  br label %92

77:                                               ; preds = %69
  %78 = load i32*, i32** %6, align 8
  %79 = icmp ne i8* %73, null
  %80 = icmp ne i32* %78, null
  %81 = and i1 %79, %80
  %82 = bitcast i32* %78 to i8*
  br i1 %81, label %83, label %89, !prof !3

83:                                               ; preds = %77
  %84 = load i32, i32* %3, align 4
  %85 = zext i32 %84 to i64
  %86 = shl nuw nsw i64 %85, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %73, i8* nonnull align 4 %82, i64 %86, i1 false) #13
  %87 = bitcast %"class.WTF::Vector.764"* %0 to i8**
  %88 = load i8*, i8** %87, align 8
  br label %89

89:                                               ; preds = %83, %77
  %90 = phi i8* [ %88, %83 ], [ %82, %77 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %90) #13
  %91 = bitcast %"class.WTF::Vector.764"* %0 to i64*
  store atomic i64 %74, i64* %91 monotonic, align 8
  br label %92

92:                                               ; preds = %89, %75
  %93 = lshr i64 %72, 2
  %94 = trunc i64 %93 to i32
  store i32 %94, i32* %59, align 8
  %95 = bitcast i8* %73 to i32*
  br label %96

96:                                               ; preds = %92, %54
  %97 = phi i32* [ %7, %54 ], [ %95, %92 ]
  %98 = getelementptr inbounds i32, i32* %97, i64 %58
  br label %99

99:                                               ; preds = %49, %29, %13, %96
  %100 = phi i32* [ %97, %96 ], [ %7, %13 ], [ %34, %29 ], [ %53, %49 ]
  %101 = phi i32* [ %98, %96 ], [ %1, %13 ], [ %1, %29 ], [ %1, %49 ]
  %102 = load i32, i32* %3, align 4
  %103 = zext i32 %102 to i64
  %104 = getelementptr inbounds i32, i32* %100, i64 %103
  %105 = load i32, i32* %101, align 4
  store i32 %105, i32* %104, align 4
  %106 = load i32, i32* %3, align 4
  %107 = add i32 %106, 1
  store i32 %107, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIjEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #13
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 536346624
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #13
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 536346624) #13
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.4, i64 0, i64 0), i8* %11, i8* %12) #13
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #13
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.5, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #13
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #13
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #13
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #13
  %20 = shl i64 %0, 2
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #13
  ret i64 %21
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF9HashTableIjNS_12KeyValuePairIjNS_6VectorIjLj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_7IntHashIjEENS_18HashMapValueTraitsINS_10HashTraitsIjEENSA_IS4_EEEESB_S3_E5eraseEPKS5_(%"class.WTF::HashTable.247"*, %"struct.WTF::KeyValuePair.250"*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %1, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load i32*, i32** %3, align 8
  %5 = icmp eq i32* %4, null
  %6 = bitcast i32* %4 to i8*
  br i1 %5, label %13, label %7, !prof !3

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %1, i64 0, i32 1, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %12, label %11, !prof !2

11:                                               ; preds = %7
  store i32 0, i32* %8, align 4
  br label %12

12:                                               ; preds = %11, %7
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %6) #13
  store i32* null, i32** %3, align 8
  br label %13

13:                                               ; preds = %2, %12
  %14 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %1, i64 0, i32 0
  store i32 -1, i32* %14, align 4
  %15 = getelementptr inbounds %"class.WTF::HashTable.247", %"class.WTF::HashTable.247"* %0, i64 0, i32 3
  %16 = load i32, i32* %15, align 8
  %17 = add i32 %16, 1
  %18 = and i32 %17, 2147483647
  %19 = and i32 %16, -2147483648
  %20 = or i32 %18, %19
  store i32 %20, i32* %15, align 8
  %21 = getelementptr inbounds %"class.WTF::HashTable.247", %"class.WTF::HashTable.247"* %0, i64 0, i32 2
  %22 = load i32, i32* %21, align 4
  %23 = add i32 %22, -1
  store i32 %23, i32* %21, align 4
  %24 = mul i32 %23, 6
  %25 = getelementptr inbounds %"class.WTF::HashTable.247", %"class.WTF::HashTable.247"* %0, i64 0, i32 1
  %26 = load i32, i32* %25, align 8
  %27 = icmp ult i32 %24, %26
  %28 = icmp ugt i32 %26, 8
  %29 = and i1 %27, %28
  br i1 %29, label %30, label %70

30:                                               ; preds = %13
  %31 = lshr i32 %26, 1
  %32 = zext i32 %31 to i64
  %33 = mul nuw nsw i64 %32, 24
  %34 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %33, i8* getelementptr inbounds ([135 x i8], [135 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairIjNS_6VectorIjLj0ENS_18PartitionAllocatorEEEEEEEPKcv, i64 0, i64 0)) #13
  %35 = bitcast i8* %34 to %"struct.WTF::KeyValuePair.250"*
  %36 = icmp eq i32 %31, 0
  br i1 %36, label %68, label %37

37:                                               ; preds = %30
  %38 = and i64 %32, 1
  %39 = icmp eq i32 %31, 1
  br i1 %39, label %59, label %40

40:                                               ; preds = %37
  %41 = sub nsw i64 %32, %38
  br label %42

42:                                               ; preds = %42, %40
  %43 = phi i64 [ 0, %40 ], [ %56, %42 ]
  %44 = phi i64 [ %41, %40 ], [ %57, %42 ]
  %45 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %35, i64 %43, i32 0
  store i32 0, i32* %45, align 8
  %46 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %35, i64 %43, i32 1
  %47 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %35, i64 %43, i32 1, i32 0, i32 0, i32 1
  %48 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %35, i64 %43, i32 1, i32 0, i32 0, i32 2
  %49 = bitcast %"class.WTF::Vector.764"* %46 to i64*
  store atomic i64 0, i64* %49 monotonic, align 8
  store i32 0, i32* %47, align 4
  store i32 0, i32* %48, align 4
  %50 = or i64 %43, 1
  %51 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %35, i64 %50, i32 0
  store i32 0, i32* %51, align 8
  %52 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %35, i64 %50, i32 1
  %53 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %35, i64 %50, i32 1, i32 0, i32 0, i32 1
  %54 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %35, i64 %50, i32 1, i32 0, i32 0, i32 2
  %55 = bitcast %"class.WTF::Vector.764"* %52 to i64*
  store atomic i64 0, i64* %55 monotonic, align 8
  store i32 0, i32* %53, align 4
  store i32 0, i32* %54, align 4
  %56 = add nuw nsw i64 %43, 2
  %57 = add i64 %44, -2
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %59, label %42

59:                                               ; preds = %42, %37
  %60 = phi i64 [ 0, %37 ], [ %56, %42 ]
  %61 = icmp eq i64 %38, 0
  br i1 %61, label %68, label %62

62:                                               ; preds = %59
  %63 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %35, i64 %60, i32 0
  store i32 0, i32* %63, align 8
  %64 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %35, i64 %60, i32 1
  %65 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %35, i64 %60, i32 1, i32 0, i32 0, i32 1
  %66 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %35, i64 %60, i32 1, i32 0, i32 0, i32 2
  %67 = bitcast %"class.WTF::Vector.764"* %64 to i64*
  store atomic i64 0, i64* %67 monotonic, align 8
  store i32 0, i32* %65, align 4
  store i32 0, i32* %66, align 4
  br label %68

68:                                               ; preds = %62, %59, %30
  %69 = tail call %"struct.WTF::KeyValuePair.250"* @_ZN3WTF9HashTableIjNS_12KeyValuePairIjNS_6VectorIjLj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_7IntHashIjEENS_18HashMapValueTraitsINS_10HashTraitsIjEENSA_IS4_EEEESB_S3_E8RehashToEPS5_jSF_(%"class.WTF::HashTable.247"* %0, %"struct.WTF::KeyValuePair.250"* %35, i32 %31, %"struct.WTF::KeyValuePair.250"* null) #13
  br label %70

70:                                               ; preds = %68, %13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair.250"* @_ZN3WTF9HashTableIjNS_12KeyValuePairIjNS_6VectorIjLj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_7IntHashIjEENS_18HashMapValueTraitsINS_10HashTraitsIjEENSA_IS4_EEEESB_S3_E8RehashToEPS5_jSF_(%"class.WTF::HashTable.247"*, %"struct.WTF::KeyValuePair.250"*, i32, %"struct.WTF::KeyValuePair.250"*) local_unnamed_addr #0 comdat align 2 {
  %5 = ptrtoint %"struct.WTF::KeyValuePair.250"* %1 to i64
  %6 = getelementptr inbounds %"class.WTF::HashTable.247", %"class.WTF::HashTable.247"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  %9 = getelementptr inbounds %"class.WTF::HashTable.247", %"class.WTF::HashTable.247"* %0, i64 0, i32 0
  br i1 %8, label %10, label %13

10:                                               ; preds = %4
  %11 = bitcast %"class.WTF::HashTable.247"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  br label %20

13:                                               ; preds = %4
  %14 = add i32 %2, -1
  %15 = zext i32 %14 to i64
  %16 = load %"struct.WTF::KeyValuePair.250"*, %"struct.WTF::KeyValuePair.250"** %9, align 8
  %17 = ptrtoint %"struct.WTF::KeyValuePair.250"* %16 to i64
  br label %56

18:                                               ; preds = %167
  %19 = bitcast %"class.WTF::HashTable.247"* %0 to i64*
  br label %20

20:                                               ; preds = %10, %18
  %21 = phi i64* [ %11, %10 ], [ %19, %18 ]
  %22 = phi i64 [ %12, %10 ], [ %168, %18 ]
  %23 = phi %"struct.WTF::KeyValuePair.250"* [ null, %10 ], [ %171, %18 ]
  %24 = phi i32 [ 0, %10 ], [ %169, %18 ]
  store atomic i64 %5, i64* %21 monotonic, align 8
  store i32 %2, i32* %6, align 8
  %25 = inttoptr i64 %22 to %"struct.WTF::KeyValuePair.250"*
  %26 = icmp eq i64 %22, 0
  br i1 %26, label %52, label %27

27:                                               ; preds = %20
  %28 = icmp eq i32 %24, 0
  br i1 %28, label %50, label %29

29:                                               ; preds = %27
  %30 = zext i32 %24 to i64
  br label %31

31:                                               ; preds = %47, %29
  %32 = phi i64 [ 0, %29 ], [ %48, %47 ]
  %33 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %25, i64 %32, i32 0
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, -1
  br i1 %35, label %47, label %36

36:                                               ; preds = %31
  %37 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %25, i64 %32, i32 1, i32 0, i32 0, i32 0
  %38 = load i32*, i32** %37, align 8
  %39 = icmp eq i32* %38, null
  %40 = bitcast i32* %38 to i8*
  br i1 %39, label %47, label %41, !prof !3

41:                                               ; preds = %36
  %42 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %25, i64 %32, i32 1, i32 0, i32 0, i32 2
  %43 = load i32, i32* %42, align 4
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %46, label %45, !prof !2

45:                                               ; preds = %41
  store i32 0, i32* %42, align 4
  br label %46

46:                                               ; preds = %45, %41
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %40) #13
  store i32* null, i32** %37, align 8
  br label %47

47:                                               ; preds = %46, %36, %31
  %48 = add nuw nsw i64 %32, 1
  %49 = icmp eq i64 %48, %30
  br i1 %49, label %50, label %31

50:                                               ; preds = %47, %27
  %51 = inttoptr i64 %22 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %51) #13
  br label %52

52:                                               ; preds = %20, %50
  %53 = getelementptr inbounds %"class.WTF::HashTable.247", %"class.WTF::HashTable.247"* %0, i64 0, i32 3
  %54 = load i32, i32* %53, align 8
  %55 = and i32 %54, -2147483648
  store i32 %55, i32* %53, align 8
  ret %"struct.WTF::KeyValuePair.250"* %23

56:                                               ; preds = %13, %167
  %57 = phi i64 [ %17, %13 ], [ %168, %167 ]
  %58 = phi i32 [ %7, %13 ], [ %169, %167 ]
  %59 = phi %"struct.WTF::KeyValuePair.250"* [ %16, %13 ], [ %170, %167 ]
  %60 = phi %"struct.WTF::KeyValuePair.250"* [ null, %13 ], [ %171, %167 ]
  %61 = phi i32 [ 0, %13 ], [ %172, %167 ]
  %62 = zext i32 %61 to i64
  %63 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %59, i64 %62, i32 0
  %64 = load i32, i32* %63, align 4
  %65 = add i32 %64, 1
  %66 = icmp ult i32 %65, 2
  br i1 %66, label %167, label %67

67:                                               ; preds = %56
  %68 = shl i32 %64, 15
  %69 = xor i32 %68, -1
  %70 = add i32 %64, %69
  %71 = lshr i32 %70, 10
  %72 = xor i32 %71, %70
  %73 = mul i32 %72, 9
  %74 = lshr i32 %73, 6
  %75 = xor i32 %74, %73
  %76 = shl i32 %75, 11
  %77 = xor i32 %76, -1
  %78 = add i32 %75, %77
  %79 = lshr i32 %78, 16
  %80 = xor i32 %79, %78
  %81 = and i32 %80, %14
  %82 = zext i32 %81 to i64
  %83 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %1, i64 %82
  %84 = ptrtoint %"struct.WTF::KeyValuePair.250"* %83 to i64
  %85 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %83, i64 0, i32 0
  %86 = load i32, i32* %85, align 4
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %105, label %88

88:                                               ; preds = %67
  %89 = xor i32 %80, -1
  %90 = lshr i32 %78, 23
  %91 = add i32 %90, %89
  %92 = shl i32 %91, 12
  %93 = xor i32 %92, %91
  %94 = lshr i32 %93, 7
  %95 = xor i32 %94, %93
  %96 = shl i32 %95, 2
  %97 = xor i32 %96, %95
  %98 = lshr i32 %97, 20
  %99 = xor i32 %98, %97
  %100 = or i32 %99, 1
  %101 = zext i32 %100 to i64
  br label %111

102:                                              ; preds = %118
  %103 = ptrtoint %"struct.WTF::KeyValuePair.250"* %125 to i64
  %104 = inttoptr i64 %120 to %"struct.WTF::KeyValuePair.250"*
  br label %105

105:                                              ; preds = %102, %67
  %106 = phi i64 [ %103, %102 ], [ %84, %67 ]
  %107 = phi %"struct.WTF::KeyValuePair.250"* [ %104, %102 ], [ null, %67 ]
  %108 = icmp eq %"struct.WTF::KeyValuePair.250"* %107, null
  %109 = ptrtoint %"struct.WTF::KeyValuePair.250"* %107 to i64
  %110 = select i1 %108, i64 %106, i64 %109
  br label %130

111:                                              ; preds = %118, %88
  %112 = phi i64 [ 0, %88 ], [ %120, %118 ]
  %113 = phi i32 [ %86, %88 ], [ %128, %118 ]
  %114 = phi i64 [ %84, %88 ], [ %126, %118 ]
  %115 = phi i64 [ %82, %88 ], [ %124, %118 ]
  %116 = phi i64 [ 0, %88 ], [ %122, %118 ]
  %117 = icmp eq i32 %113, %64
  br i1 %117, label %130, label %118

118:                                              ; preds = %111
  %119 = icmp eq i32 %113, -1
  %120 = select i1 %119, i64 %114, i64 %112
  %121 = icmp eq i64 %116, 0
  %122 = select i1 %121, i64 %101, i64 %116
  %123 = add i64 %122, %115
  %124 = and i64 %123, %15
  %125 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %1, i64 %124
  %126 = ptrtoint %"struct.WTF::KeyValuePair.250"* %125 to i64
  %127 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %125, i64 0, i32 0
  %128 = load i32, i32* %127, align 4
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %102, label %111

130:                                              ; preds = %111, %105
  %131 = phi i64 [ %110, %105 ], [ %114, %111 ]
  %132 = inttoptr i64 %131 to %"struct.WTF::KeyValuePair.250"*
  %133 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %132, i64 0, i32 1, i32 0, i32 0, i32 0
  %134 = load i32*, i32** %133, align 8
  %135 = icmp eq i32* %134, null
  %136 = bitcast i32* %134 to i8*
  br i1 %135, label %144, label %137, !prof !3

137:                                              ; preds = %130
  %138 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %132, i64 0, i32 1, i32 0, i32 0, i32 2
  %139 = load i32, i32* %138, align 4
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %142, label %141, !prof !2

141:                                              ; preds = %137
  store i32 0, i32* %138, align 4
  br label %142

142:                                              ; preds = %141, %137
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %136) #13
  store i32* null, i32** %133, align 8
  %143 = load i32, i32* %63, align 8
  br label %144

144:                                              ; preds = %130, %142
  %145 = phi i32 [ %64, %130 ], [ %143, %142 ]
  %146 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %132, i64 0, i32 0
  store i32 %145, i32* %146, align 8
  %147 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %132, i64 0, i32 1
  %148 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %59, i64 %62, i32 1
  %149 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %132, i64 0, i32 1, i32 0, i32 0, i32 1
  %150 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %132, i64 0, i32 1, i32 0, i32 0, i32 2
  %151 = bitcast %"class.WTF::Vector.764"* %148 to i64*
  %152 = bitcast %"class.WTF::Vector.764"* %147 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %152, i8 0, i64 16, i1 false) #13
  %153 = load i64, i64* %151, align 8
  %154 = bitcast %"class.WTF::Vector.764"* %147 to i64*
  store atomic i64 0, i64* %151 monotonic, align 8
  store atomic i64 %153, i64* %154 monotonic, align 8
  %155 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %59, i64 %62, i32 1, i32 0, i32 0, i32 1
  %156 = load i32, i32* %149, align 4
  %157 = load i32, i32* %155, align 4
  store i32 %157, i32* %149, align 4
  store i32 %156, i32* %155, align 4
  %158 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %59, i64 %62, i32 1, i32 0, i32 0, i32 2
  %159 = load i32, i32* %150, align 4
  %160 = load i32, i32* %158, align 4
  store i32 %160, i32* %150, align 4
  store i32 %159, i32* %158, align 4
  %161 = load %"struct.WTF::KeyValuePair.250"*, %"struct.WTF::KeyValuePair.250"** %9, align 8
  %162 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %161, i64 %62
  %163 = icmp eq %"struct.WTF::KeyValuePair.250"* %162, %3
  %164 = select i1 %163, %"struct.WTF::KeyValuePair.250"* %132, %"struct.WTF::KeyValuePair.250"* %60
  %165 = load i32, i32* %6, align 8
  %166 = ptrtoint %"struct.WTF::KeyValuePair.250"* %161 to i64
  br label %167

167:                                              ; preds = %56, %144
  %168 = phi i64 [ %57, %56 ], [ %166, %144 ]
  %169 = phi i32 [ %58, %56 ], [ %165, %144 ]
  %170 = phi %"struct.WTF::KeyValuePair.250"* [ %59, %56 ], [ %161, %144 ]
  %171 = phi %"struct.WTF::KeyValuePair.250"* [ %60, %56 ], [ %164, %144 ]
  %172 = add i32 %61, 1
  %173 = icmp eq i32 %172, %169
  br i1 %173, label %18, label %56
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair.250"*, i8 } @_ZN3WTF9HashTableIjNS_12KeyValuePairIjNS_6VectorIjLj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_7IntHashIjEENS_18HashMapValueTraitsINS_10HashTraitsIjEENSA_IS4_EEEESB_S3_E6insertINS_17HashMapTranslatorISD_S8_S3_EEjRS4_EENS_18HashTableAddResultISE_S5_EEOT0_OT1_(%"class.WTF::HashTable.247"*, i32* dereferenceable(4), %"class.WTF::Vector.764"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable.247", %"class.WTF::HashTable.247"* %0, i64 0, i32 0
  %5 = load %"struct.WTF::KeyValuePair.250"*, %"struct.WTF::KeyValuePair.250"** %4, align 8
  %6 = icmp eq %"struct.WTF::KeyValuePair.250"* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call %"struct.WTF::KeyValuePair.250"* @_ZN3WTF9HashTableIjNS_12KeyValuePairIjNS_6VectorIjLj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_7IntHashIjEENS_18HashMapValueTraitsINS_10HashTraitsIjEENSA_IS4_EEEESB_S3_E6ExpandEPS5_(%"class.WTF::HashTable.247"* %0, %"struct.WTF::KeyValuePair.250"* null)
  %9 = load %"struct.WTF::KeyValuePair.250"*, %"struct.WTF::KeyValuePair.250"** %4, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi %"struct.WTF::KeyValuePair.250"* [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable.247", %"class.WTF::HashTable.247"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = load i32, i32* %1, align 4
  %17 = shl i32 %16, 15
  %18 = xor i32 %17, -1
  %19 = add i32 %16, %18
  %20 = lshr i32 %19, 10
  %21 = xor i32 %20, %19
  %22 = mul i32 %21, 9
  %23 = lshr i32 %22, 6
  %24 = xor i32 %23, %22
  %25 = shl i32 %24, 11
  %26 = xor i32 %25, -1
  %27 = add i32 %24, %26
  %28 = lshr i32 %27, 16
  %29 = xor i32 %28, %27
  %30 = and i32 %29, %14
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %11, i64 %31
  %33 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %32, i64 0, i32 0
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %83, label %36

36:                                               ; preds = %10
  %37 = xor i32 %29, -1
  %38 = lshr i32 %27, 23
  %39 = add i32 %38, %37
  %40 = shl i32 %39, 12
  %41 = xor i32 %40, %39
  %42 = lshr i32 %41, 7
  %43 = xor i32 %42, %41
  %44 = shl i32 %43, 2
  %45 = xor i32 %44, %43
  %46 = lshr i32 %45, 20
  %47 = xor i32 %46, %45
  %48 = or i32 %47, 1
  %49 = zext i32 %48 to i64
  br label %50

50:                                               ; preds = %36, %57
  %51 = phi i32 [ %34, %36 ], [ %66, %57 ]
  %52 = phi %"struct.WTF::KeyValuePair.250"* [ %32, %36 ], [ %64, %57 ]
  %53 = phi %"struct.WTF::KeyValuePair.250"* [ null, %36 ], [ %59, %57 ]
  %54 = phi i64 [ %31, %36 ], [ %63, %57 ]
  %55 = phi i64 [ 0, %36 ], [ %61, %57 ]
  %56 = icmp eq i32 %51, %16
  br i1 %56, label %100, label %57

57:                                               ; preds = %50
  %58 = icmp eq i32 %51, -1
  %59 = select i1 %58, %"struct.WTF::KeyValuePair.250"* %52, %"struct.WTF::KeyValuePair.250"* %53
  %60 = icmp eq i64 %55, 0
  %61 = select i1 %60, i64 %49, i64 %55
  %62 = add i64 %61, %54
  %63 = and i64 %62, %15
  %64 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %11, i64 %63
  %65 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %64, i64 0, i32 0
  %66 = load i32, i32* %65, align 4
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %50

68:                                               ; preds = %57
  %69 = icmp eq %"struct.WTF::KeyValuePair.250"* %59, null
  br i1 %69, label %83, label %70

70:                                               ; preds = %68
  %71 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %59, i64 0, i32 0
  store i32 0, i32* %71, align 8
  %72 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %59, i64 0, i32 1
  %73 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %59, i64 0, i32 1, i32 0, i32 0, i32 1
  %74 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %59, i64 0, i32 1, i32 0, i32 0, i32 2
  %75 = bitcast %"class.WTF::Vector.764"* %72 to i64*
  store atomic i64 0, i64* %75 monotonic, align 8
  store i32 0, i32* %73, align 4
  store i32 0, i32* %74, align 4
  %76 = getelementptr inbounds %"class.WTF::HashTable.247", %"class.WTF::HashTable.247"* %0, i64 0, i32 3
  %77 = load i32, i32* %76, align 8
  %78 = add i32 %77, 2147483647
  %79 = and i32 %78, 2147483647
  %80 = and i32 %77, -2147483648
  %81 = or i32 %79, %80
  store i32 %81, i32* %76, align 8
  %82 = load i32, i32* %1, align 4
  br label %83

83:                                               ; preds = %10, %68, %70
  %84 = phi i32 [ %82, %70 ], [ %16, %68 ], [ %16, %10 ]
  %85 = phi %"struct.WTF::KeyValuePair.250"* [ %59, %70 ], [ %64, %68 ], [ %32, %10 ]
  %86 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %85, i64 0, i32 0
  store i32 %84, i32* %86, align 8
  %87 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %85, i64 0, i32 1
  %88 = tail call dereferenceable(16) %"class.WTF::Vector.764"* @_ZN3WTF6VectorIjLj0ENS_18PartitionAllocatorEEaSERKS2_(%"class.WTF::Vector.764"* %87, %"class.WTF::Vector.764"* dereferenceable(16) %2) #13
  %89 = getelementptr inbounds %"class.WTF::HashTable.247", %"class.WTF::HashTable.247"* %0, i64 0, i32 2
  %90 = load i32, i32* %89, align 4
  %91 = add i32 %90, 1
  store i32 %91, i32* %89, align 4
  %92 = getelementptr inbounds %"class.WTF::HashTable.247", %"class.WTF::HashTable.247"* %0, i64 0, i32 3
  %93 = load i32, i32* %92, align 8
  %94 = add i32 %93, %91
  %95 = shl i32 %94, 1
  %96 = load i32, i32* %12, align 8
  %97 = icmp ult i32 %95, %96
  br i1 %97, label %100, label %98

98:                                               ; preds = %83
  %99 = tail call %"struct.WTF::KeyValuePair.250"* @_ZN3WTF9HashTableIjNS_12KeyValuePairIjNS_6VectorIjLj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_7IntHashIjEENS_18HashMapValueTraitsINS_10HashTraitsIjEENSA_IS4_EEEESB_S3_E6ExpandEPS5_(%"class.WTF::HashTable.247"* %0, %"struct.WTF::KeyValuePair.250"* %85)
  br label %100

100:                                              ; preds = %50, %83, %98
  %101 = phi i8 [ 1, %83 ], [ 1, %98 ], [ 0, %50 ]
  %102 = phi %"struct.WTF::KeyValuePair.250"* [ %85, %83 ], [ %99, %98 ], [ %52, %50 ]
  %103 = insertvalue { %"struct.WTF::KeyValuePair.250"*, i8 } undef, %"struct.WTF::KeyValuePair.250"* %102, 0
  %104 = insertvalue { %"struct.WTF::KeyValuePair.250"*, i8 } %103, i8 %101, 1
  ret { %"struct.WTF::KeyValuePair.250"*, i8 } %104
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair.250"* @_ZN3WTF9HashTableIjNS_12KeyValuePairIjNS_6VectorIjLj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_7IntHashIjEENS_18HashMapValueTraitsINS_10HashTraitsIjEENSA_IS4_EEEESB_S3_E6ExpandEPS5_(%"class.WTF::HashTable.247"*, %"struct.WTF::KeyValuePair.250"*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::HashTable.247", %"class.WTF::HashTable.247"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %31, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.WTF::HashTable.247", %"class.WTF::HashTable.247"* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = mul i32 %11, 6
  %13 = shl i32 %7, 1
  %14 = icmp ult i32 %12, %13
  br i1 %14, label %31, label %15

15:                                               ; preds = %9
  %16 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #13
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %17, align 8
  %18 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18)
  %19 = icmp ugt i32 %13, %7
  br i1 %19, label %20, label %21

20:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* null, i8** %17, align 8
  br label %30

21:                                               ; preds = %15
  %22 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %13) #13
  %23 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #13
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* %22, i8* %23) #13
  %24 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* %25, i8** %17, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %21
  %28 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #13
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1, i64 0, i64 0), i32 1783, %"class.logging::CheckOpResult"* nonnull %4) #13
  %29 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #13
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #13
  br label %30

30:                                               ; preds = %20, %21, %27
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #13
  br label %31

31:                                               ; preds = %9, %2, %30
  %32 = phi i32 [ %13, %30 ], [ 8, %2 ], [ %7, %9 ]
  %33 = zext i32 %32 to i64
  %34 = mul nuw nsw i64 %33, 24
  %35 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %34, i8* getelementptr inbounds ([135 x i8], [135 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairIjNS_6VectorIjLj0ENS_18PartitionAllocatorEEEEEEEPKcv, i64 0, i64 0)) #13
  %36 = bitcast i8* %35 to %"struct.WTF::KeyValuePair.250"*
  %37 = icmp eq i32 %32, 0
  br i1 %37, label %69, label %38

38:                                               ; preds = %31
  %39 = and i64 %33, 1
  %40 = icmp eq i32 %32, 1
  br i1 %40, label %60, label %41

41:                                               ; preds = %38
  %42 = sub nsw i64 %33, %39
  br label %43

43:                                               ; preds = %43, %41
  %44 = phi i64 [ 0, %41 ], [ %57, %43 ]
  %45 = phi i64 [ %42, %41 ], [ %58, %43 ]
  %46 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %36, i64 %44, i32 0
  store i32 0, i32* %46, align 8
  %47 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %36, i64 %44, i32 1
  %48 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %36, i64 %44, i32 1, i32 0, i32 0, i32 1
  %49 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %36, i64 %44, i32 1, i32 0, i32 0, i32 2
  %50 = bitcast %"class.WTF::Vector.764"* %47 to i64*
  store atomic i64 0, i64* %50 monotonic, align 8
  store i32 0, i32* %48, align 4
  store i32 0, i32* %49, align 4
  %51 = or i64 %44, 1
  %52 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %36, i64 %51, i32 0
  store i32 0, i32* %52, align 8
  %53 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %36, i64 %51, i32 1
  %54 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %36, i64 %51, i32 1, i32 0, i32 0, i32 1
  %55 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %36, i64 %51, i32 1, i32 0, i32 0, i32 2
  %56 = bitcast %"class.WTF::Vector.764"* %53 to i64*
  store atomic i64 0, i64* %56 monotonic, align 8
  store i32 0, i32* %54, align 4
  store i32 0, i32* %55, align 4
  %57 = add nuw nsw i64 %44, 2
  %58 = add i64 %45, -2
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %60, label %43

60:                                               ; preds = %43, %38
  %61 = phi i64 [ 0, %38 ], [ %57, %43 ]
  %62 = icmp eq i64 %39, 0
  br i1 %62, label %69, label %63

63:                                               ; preds = %60
  %64 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %36, i64 %61, i32 0
  store i32 0, i32* %64, align 8
  %65 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %36, i64 %61, i32 1
  %66 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %36, i64 %61, i32 1, i32 0, i32 0, i32 1
  %67 = getelementptr inbounds %"struct.WTF::KeyValuePair.250", %"struct.WTF::KeyValuePair.250"* %36, i64 %61, i32 1, i32 0, i32 0, i32 2
  %68 = bitcast %"class.WTF::Vector.764"* %65 to i64*
  store atomic i64 0, i64* %68 monotonic, align 8
  store i32 0, i32* %66, align 4
  store i32 0, i32* %67, align 4
  br label %69

69:                                               ; preds = %63, %60, %31
  %70 = call %"struct.WTF::KeyValuePair.250"* @_ZN3WTF9HashTableIjNS_12KeyValuePairIjNS_6VectorIjLj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_7IntHashIjEENS_18HashMapValueTraitsINS_10HashTraitsIjEENSA_IS4_EEEESB_S3_E8RehashToEPS5_jSF_(%"class.WTF::HashTable.247"* %0, %"struct.WTF::KeyValuePair.250"* %36, i32 %32, %"struct.WTF::KeyValuePair.250"* %1) #13
  ret %"struct.WTF::KeyValuePair.250"* %70
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(16) %"class.WTF::Vector.764"* @_ZN3WTF6VectorIjLj0ENS_18PartitionAllocatorEEaSERKS2_(%"class.WTF::Vector.764"*, %"class.WTF::Vector.764"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq %"class.WTF::Vector.764"* %1, %0
  br i1 %3, label %90, label %4, !prof !2

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector.764", %"class.WTF::Vector.764"* %0, i64 0, i32 0, i32 0, i32 2
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.WTF::Vector.764", %"class.WTF::Vector.764"* %1, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = icmp ugt i32 %6, %8
  br i1 %9, label %10, label %11

10:                                               ; preds = %4
  store i32 %8, i32* %5, align 4
  br label %60

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.WTF::Vector.764", %"class.WTF::Vector.764"* %0, i64 0, i32 0, i32 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = icmp ugt i32 %8, %13
  br i1 %14, label %15, label %60

15:                                               ; preds = %11
  %16 = icmp eq i32 %13, 0
  br i1 %16, label %26, label %17

17:                                               ; preds = %15
  %18 = icmp eq i32 %6, 0
  br i1 %18, label %20, label %19

19:                                               ; preds = %17
  store i32 0, i32* %5, align 4
  br label %20

20:                                               ; preds = %19, %17
  %21 = bitcast %"class.WTF::Vector.764"* %0 to i8**
  %22 = load i8*, i8** %21, align 8
  %23 = bitcast %"class.WTF::Vector.764"* %0 to i64*
  store atomic i64 0, i64* %23 monotonic, align 8
  store i32 0, i32* %12, align 8
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %22) #13
  %24 = load i32, i32* %7, align 4
  %25 = load i32, i32* %12, align 8
  br label %26

26:                                               ; preds = %15, %20
  %27 = phi i32 [ 0, %15 ], [ %25, %20 ]
  %28 = phi i32 [ %8, %15 ], [ %24, %20 ]
  %29 = icmp ult i32 %27, %28
  br i1 %29, label %30, label %60, !prof !3

30:                                               ; preds = %26
  %31 = getelementptr inbounds %"class.WTF::Vector.764", %"class.WTF::Vector.764"* %0, i64 0, i32 0, i32 0, i32 0
  %32 = load i32*, i32** %31, align 8
  %33 = icmp eq i32* %32, null
  %34 = zext i32 %28 to i64
  %35 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIjEEmm(i64 %34) #13
  %36 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %35, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIjEEPKcv, i64 0, i64 0)) #13
  br i1 %33, label %37, label %42

37:                                               ; preds = %30
  %38 = ptrtoint i8* %36 to i64
  %39 = bitcast %"class.WTF::Vector.764"* %0 to i64*
  store atomic i64 %38, i64* %39 monotonic, align 8
  %40 = lshr i64 %35, 2
  %41 = trunc i64 %40 to i32
  store i32 %41, i32* %12, align 8
  br label %60

42:                                               ; preds = %30
  %43 = lshr i64 %35, 2
  %44 = ptrtoint i8* %36 to i64
  %45 = load i32*, i32** %31, align 8
  %46 = icmp ne i8* %36, null
  %47 = icmp ne i32* %45, null
  %48 = and i1 %46, %47
  %49 = bitcast i32* %45 to i8*
  br i1 %48, label %50, label %56, !prof !3

50:                                               ; preds = %42
  %51 = load i32, i32* %5, align 4
  %52 = zext i32 %51 to i64
  %53 = shl nuw nsw i64 %52, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %36, i8* nonnull align 4 %49, i64 %53, i1 false) #13
  %54 = bitcast %"class.WTF::Vector.764"* %0 to i8**
  %55 = load i8*, i8** %54, align 8
  br label %56

56:                                               ; preds = %50, %42
  %57 = phi i8* [ %55, %50 ], [ %49, %42 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %57) #13
  %58 = bitcast %"class.WTF::Vector.764"* %0 to i64*
  store atomic i64 %44, i64* %58 monotonic, align 8
  %59 = trunc i64 %43 to i32
  store i32 %59, i32* %12, align 8
  br label %60

60:                                               ; preds = %56, %37, %26, %11, %10
  %61 = getelementptr inbounds %"class.WTF::Vector.764", %"class.WTF::Vector.764"* %1, i64 0, i32 0, i32 0, i32 0
  %62 = bitcast %"class.WTF::Vector.764"* %1 to i8**
  %63 = load i8*, i8** %62, align 8
  %64 = load i32, i32* %5, align 4
  %65 = zext i32 %64 to i64
  %66 = getelementptr inbounds %"class.WTF::Vector.764", %"class.WTF::Vector.764"* %0, i64 0, i32 0, i32 0, i32 0
  %67 = bitcast %"class.WTF::Vector.764"* %0 to i8**
  %68 = load i8*, i8** %67, align 8
  %69 = shl nuw nsw i64 %65, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %68, i8* align 4 %63, i64 %69, i1 false) #13
  %70 = load i32*, i32** %61, align 8
  %71 = load i32, i32* %5, align 4
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds i32, i32* %70, i64 %72
  %74 = load i32*, i32** %66, align 8
  %75 = getelementptr inbounds i32, i32* %74, i64 %72
  %76 = icmp ne i32* %75, null
  %77 = icmp ne i32* %73, null
  %78 = and i1 %77, %76
  br i1 %78, label %79, label %88, !prof !3

79:                                               ; preds = %60
  %80 = load i32, i32* %7, align 4
  %81 = zext i32 %80 to i64
  %82 = getelementptr inbounds i32, i32* %70, i64 %81
  %83 = bitcast i32* %75 to i8*
  %84 = bitcast i32* %73 to i8*
  %85 = ptrtoint i32* %82 to i64
  %86 = ptrtoint i32* %73 to i64
  %87 = sub i64 %85, %86
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %83, i8* nonnull align 4 %84, i64 %87, i1 false) #13
  br label %88

88:                                               ; preds = %60, %79
  %89 = load i32, i32* %7, align 4
  store i32 %89, i32* %5, align 4
  br label %90

90:                                               ; preds = %2, %88
  ret %"class.WTF::Vector.764"* %0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair.260"*, %"struct.WTF::KeyValuePair.260"* } @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_7HashSetIjNS_7IntHashIjEENS_10HashTraitsIjEENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS6_IS1_EENS6_IS9_EEEESE_S8_E4findERKS1_(%"class.WTF::HashTable.257"*, %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::HashTable.257", %"class.WTF::HashTable.257"* %0, i64 0, i32 0
  %4 = load %"struct.WTF::KeyValuePair.260"*, %"struct.WTF::KeyValuePair.260"** %3, align 8
  %5 = icmp eq %"struct.WTF::KeyValuePair.260"* %4, null
  br i1 %5, label %63, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.WTF::HashTable.257", %"class.WTF::HashTable.257"* %0, i64 0, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = add i32 %8, -1
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %12 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, align 8
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load atomic i32, i32* %13 monotonic, align 4
  %15 = lshr i32 %14, 8
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %19

17:                                               ; preds = %6
  %18 = tail call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* %12) #13
  br label %19

19:                                               ; preds = %17, %6
  %20 = phi i32 [ %18, %17 ], [ %15, %6 ]
  %21 = and i32 %20, %9
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %4, i64 %22
  %24 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %23, i64 0, i32 0, i32 0, i32 0
  %25 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %24, align 8
  %26 = icmp eq %"class.WTF::StringImpl"* %25, null
  br i1 %26, label %63, label %27

27:                                               ; preds = %19
  %28 = xor i32 %20, -1
  %29 = lshr i32 %20, 23
  %30 = add i32 %29, %28
  %31 = shl i32 %30, 12
  %32 = xor i32 %31, %30
  %33 = lshr i32 %32, 7
  %34 = xor i32 %33, %32
  %35 = shl i32 %34, 2
  %36 = xor i32 %35, %34
  %37 = lshr i32 %36, 20
  %38 = xor i32 %37, %36
  %39 = or i32 %38, 1
  %40 = zext i32 %39 to i64
  br label %41

41:                                               ; preds = %52, %27
  %42 = phi %"struct.WTF::KeyValuePair.260"* [ %23, %27 ], [ %57, %52 ]
  %43 = phi i64 [ %22, %27 ], [ %56, %52 ]
  %44 = phi i64 [ 0, %27 ], [ %54, %52 ]
  %45 = bitcast %"struct.WTF::KeyValuePair.260"* %42 to i8**
  %46 = load i8*, i8** %45, align 8
  %47 = icmp eq i8* %46, inttoptr (i64 -1 to i8*)
  br i1 %47, label %52, label %48

48:                                               ; preds = %41
  %49 = bitcast i8* %46 to %"class.WTF::StringImpl"*
  %50 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, align 8
  %51 = tail call zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %49, %"class.WTF::StringImpl"* %50) #13
  br i1 %51, label %61, label %52

52:                                               ; preds = %48, %41
  %53 = icmp eq i64 %44, 0
  %54 = select i1 %53, i64 %40, i64 %44
  %55 = add i64 %54, %43
  %56 = and i64 %55, %10
  %57 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %4, i64 %56
  %58 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %57, i64 0, i32 0, i32 0, i32 0
  %59 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %58, align 8
  %60 = icmp eq %"class.WTF::StringImpl"* %59, null
  br i1 %60, label %63, label %41

61:                                               ; preds = %48
  %62 = icmp eq %"struct.WTF::KeyValuePair.260"* %42, null
  br i1 %62, label %63, label %69

63:                                               ; preds = %52, %61, %19, %2
  %64 = load %"struct.WTF::KeyValuePair.260"*, %"struct.WTF::KeyValuePair.260"** %3, align 8
  %65 = getelementptr inbounds %"class.WTF::HashTable.257", %"class.WTF::HashTable.257"* %0, i64 0, i32 1
  %66 = load i32, i32* %65, align 8
  %67 = zext i32 %66 to i64
  %68 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %64, i64 %67
  br label %74

69:                                               ; preds = %61
  %70 = load %"struct.WTF::KeyValuePair.260"*, %"struct.WTF::KeyValuePair.260"** %3, align 8
  %71 = load i32, i32* %7, align 8
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds %"struct.WTF::KeyValuePair.260", %"struct.WTF::KeyValuePair.260"* %70, i64 %72
  br label %74

74:                                               ; preds = %63, %69
  %75 = phi %"struct.WTF::KeyValuePair.260"* [ %42, %69 ], [ %68, %63 ]
  %76 = phi %"struct.WTF::KeyValuePair.260"* [ %73, %69 ], [ %68, %63 ]
  %77 = insertvalue { %"struct.WTF::KeyValuePair.260"*, %"struct.WTF::KeyValuePair.260"* } undef, %"struct.WTF::KeyValuePair.260"* %75, 0
  %78 = insertvalue { %"struct.WTF::KeyValuePair.260"*, %"struct.WTF::KeyValuePair.260"* } %77, %"struct.WTF::KeyValuePair.260"* %76, 1
  ret { %"struct.WTF::KeyValuePair.260"*, %"struct.WTF::KeyValuePair.260"* } %78
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(4) i32* @_ZNK3WTF6VectorIjLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.764"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #13
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector.764", %"class.WTF::Vector.764"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #13
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #13
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.12, i64 0, i64 0), i8* %14, i8* %15) #13
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #13
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.2, i64 0, i64 0), i32 1176, %"class.logging::CheckOpResult"* nonnull %4) #13
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #13
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #13
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #13
  %23 = getelementptr inbounds %"class.WTF::Vector.764", %"class.WTF::Vector.764"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load i32*, i32** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds i32, i32* %24, i64 %25
  ret i32* %26
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #12

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { cold noreturn nounwind }
attributes #10 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nofree nounwind readonly }
attributes #13 = { nounwind }
attributes #14 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!"branch_weights", i32 2000, i32 1}
!4 = !{i8 0, i8 2}
