; ModuleID = 'gen/third_party/blink/renderer/bindings/modules/v8/v8_gpu_texture_format.cc'
source_filename = "gen/third_party/blink/renderer/bindings/modules/v8/v8_gpu_texture_format.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::V8GPUTextureFormat" = type { %"class.blink::bindings::EnumerationBase" }
%"class.blink::bindings::EnumerationBase" = type { i64, i8* }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.1 }
%union.anon.1 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

@.str = private unnamed_addr constant [8 x i8] c"r8unorm\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"r8snorm\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"r8uint\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"r8sint\00", align 1
@.str.4 = private unnamed_addr constant [8 x i8] c"r16uint\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"r16sint\00", align 1
@.str.6 = private unnamed_addr constant [9 x i8] c"r16float\00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"rg8unorm\00", align 1
@.str.8 = private unnamed_addr constant [9 x i8] c"rg8snorm\00", align 1
@.str.9 = private unnamed_addr constant [8 x i8] c"rg8uint\00", align 1
@.str.10 = private unnamed_addr constant [8 x i8] c"rg8sint\00", align 1
@.str.11 = private unnamed_addr constant [8 x i8] c"r32uint\00", align 1
@.str.12 = private unnamed_addr constant [8 x i8] c"r32sint\00", align 1
@.str.13 = private unnamed_addr constant [9 x i8] c"r32float\00", align 1
@.str.14 = private unnamed_addr constant [9 x i8] c"rg16uint\00", align 1
@.str.15 = private unnamed_addr constant [9 x i8] c"rg16sint\00", align 1
@.str.16 = private unnamed_addr constant [10 x i8] c"rg16float\00", align 1
@.str.17 = private unnamed_addr constant [11 x i8] c"rgba8unorm\00", align 1
@.str.18 = private unnamed_addr constant [16 x i8] c"rgba8unorm-srgb\00", align 1
@.str.19 = private unnamed_addr constant [11 x i8] c"rgba8snorm\00", align 1
@.str.20 = private unnamed_addr constant [10 x i8] c"rgba8uint\00", align 1
@.str.21 = private unnamed_addr constant [10 x i8] c"rgba8sint\00", align 1
@.str.22 = private unnamed_addr constant [11 x i8] c"bgra8unorm\00", align 1
@.str.23 = private unnamed_addr constant [16 x i8] c"bgra8unorm-srgb\00", align 1
@.str.24 = private unnamed_addr constant [13 x i8] c"rgb9e5ufloat\00", align 1
@.str.25 = private unnamed_addr constant [13 x i8] c"rgb10a2unorm\00", align 1
@.str.26 = private unnamed_addr constant [14 x i8] c"rg11b10ufloat\00", align 1
@.str.27 = private unnamed_addr constant [9 x i8] c"rg32uint\00", align 1
@.str.28 = private unnamed_addr constant [9 x i8] c"rg32sint\00", align 1
@.str.29 = private unnamed_addr constant [10 x i8] c"rg32float\00", align 1
@.str.30 = private unnamed_addr constant [11 x i8] c"rgba16uint\00", align 1
@.str.31 = private unnamed_addr constant [11 x i8] c"rgba16sint\00", align 1
@.str.32 = private unnamed_addr constant [12 x i8] c"rgba16float\00", align 1
@.str.33 = private unnamed_addr constant [11 x i8] c"rgba32uint\00", align 1
@.str.34 = private unnamed_addr constant [11 x i8] c"rgba32sint\00", align 1
@.str.35 = private unnamed_addr constant [12 x i8] c"rgba32float\00", align 1
@.str.36 = private unnamed_addr constant [13 x i8] c"depth32float\00", align 1
@.str.37 = private unnamed_addr constant [12 x i8] c"depth24plus\00", align 1
@.str.38 = private unnamed_addr constant [21 x i8] c"depth24plus-stencil8\00", align 1
@.str.39 = private unnamed_addr constant [15 x i8] c"bc1-rgba-unorm\00", align 1
@.str.40 = private unnamed_addr constant [20 x i8] c"bc1-rgba-unorm-srgb\00", align 1
@.str.41 = private unnamed_addr constant [15 x i8] c"bc2-rgba-unorm\00", align 1
@.str.42 = private unnamed_addr constant [20 x i8] c"bc2-rgba-unorm-srgb\00", align 1
@.str.43 = private unnamed_addr constant [15 x i8] c"bc3-rgba-unorm\00", align 1
@.str.44 = private unnamed_addr constant [20 x i8] c"bc3-rgba-unorm-srgb\00", align 1
@.str.45 = private unnamed_addr constant [12 x i8] c"bc4-r-unorm\00", align 1
@.str.46 = private unnamed_addr constant [12 x i8] c"bc4-r-snorm\00", align 1
@.str.47 = private unnamed_addr constant [13 x i8] c"bc5-rg-unorm\00", align 1
@.str.48 = private unnamed_addr constant [13 x i8] c"bc5-rg-snorm\00", align 1
@.str.49 = private unnamed_addr constant [16 x i8] c"bc6h-rgb-ufloat\00", align 1
@.str.50 = private unnamed_addr constant [15 x i8] c"bc6h-rgb-float\00", align 1
@.str.51 = private unnamed_addr constant [15 x i8] c"bc7-rgba-unorm\00", align 1
@.str.52 = private unnamed_addr constant [20 x i8] c"bc7-rgba-unorm-srgb\00", align 1
@_ZN5blink18V8GPUTextureFormat13string_table_E = hidden constant [53 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.31, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.35, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.36, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.37, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.38, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.39, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.40, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.41, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.42, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.43, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.44, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.45, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.47, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.48, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.49, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.50, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.51, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.52, i32 0, i32 0)], align 16
@.str.53 = private unnamed_addr constant [76 x i8] c"gen/third_party/blink/renderer/bindings/modules/v8/v8_gpu_texture_format.cc\00", align 1
@.str.54 = private unnamed_addr constant [18 x i8] c"index.has_value()\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(16) %"class.blink::V8GPUTextureFormat"* @_ZN5blink18V8GPUTextureFormataSERKN3WTF6StringE(%"class.blink::V8GPUTextureFormat"* returned, %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = tail call { i8, i64 } @_ZN5blink8bindings26FindIndexInEnumStringTableERKN3WTF6StringEN4base4spanIKPKcLm18446744073709551615EEE(%"class.WTF::String"* dereferenceable(8) %1, i64 53, i8** getelementptr inbounds ([53 x i8*], [53 x i8*]* @_ZN5blink18V8GPUTextureFormat13string_table_E, i64 0, i64 0)) #5
  %5 = extractvalue { i8, i64 } %4, 0
  %6 = extractvalue { i8, i64 } %4, 1
  %7 = icmp eq i8 %5, 0
  br i1 %7, label %8, label %11

8:                                                ; preds = %2
  %9 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #5
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.53, i64 0, i64 0), i32 19, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.54, i64 0, i64 0)) #5
  %10 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #5
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #5
  call void @_ZN4absl17optional_internal25throw_bad_optional_accessEv() #6
  unreachable

11:                                               ; preds = %2
  %12 = getelementptr inbounds [53 x i8*], [53 x i8*]* @_ZN5blink18V8GPUTextureFormat13string_table_E, i64 0, i64 %6
  %13 = bitcast i8** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.blink::V8GPUTextureFormat", %"class.blink::V8GPUTextureFormat"* %0, i64 0, i32 0, i32 0
  store i64 %6, i64* %15, align 8
  %16 = getelementptr inbounds %"class.blink::V8GPUTextureFormat", %"class.blink::V8GPUTextureFormat"* %0, i64 0, i32 0, i32 1
  %17 = bitcast i8** %16 to i64*
  store i64 %14, i64* %17, align 8
  ret %"class.blink::V8GPUTextureFormat"* %0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare { i8, i64 } @_ZN5blink8bindings26FindIndexInEnumStringTableERKN3WTF6StringEN4base4spanIKPKcLm18446744073709551615EEE(%"class.WTF::String"* dereferenceable(8), i64, i8**) local_unnamed_addr #2

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: noreturn
declare void @_ZN4absl17optional_internal25throw_bad_optional_accessEv() local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
