; ModuleID = '../../third_party/blink/renderer/platform/text/text_run.cc'
source_filename = "../../third_party/blink/renderer/platform/text/text_run.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::TextRun" = type <{ %union.anon, i32, i32, float, float, i16, [2 x i8], %"struct.blink::TabSize", [4 x i8] }>
%union.anon = type { i8* }
%"struct.blink::TabSize" = type <{ float, i8, [3 x i8] }>
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }

@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5blink7TextRun7SetTextERKN3WTF6StringE(%"class.blink::TextRun"* nocapture, %"class.WTF::String"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %4 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %3, align 8
  %5 = icmp eq %"class.WTF::StringImpl"* %4, null
  br i1 %5, label %6, label %8

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %0, i64 0, i32 2
  store i32 0, i32* %7, align 4
  br label %13

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %0, i64 0, i32 2
  store i32 %10, i32* %11, align 4
  %12 = icmp eq i32 %10, 0
  br i1 %12, label %13, label %18

13:                                               ; preds = %6, %8
  %14 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %0, i64 0, i32 0, i32 0
  store i8* null, i8** %14, align 8
  %15 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %0, i64 0, i32 5
  %16 = load i16, i16* %15, align 8
  %17 = or i16 %16, 4
  store i16 %17, i16* %15, align 8
  br label %41

18:                                               ; preds = %8
  %19 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %3, align 8
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %21 = load atomic i32, i32* %20 monotonic, align 4
  %22 = and i32 %21, 1
  %23 = icmp eq i32 %22, 0
  %24 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %0, i64 0, i32 5
  %25 = trunc i32 %22 to i16
  %26 = load i16, i16* %24, align 8
  %27 = shl nuw nsw i16 %25, 2
  %28 = and i16 %26, -5
  %29 = or i16 %27, %28
  store i16 %29, i16* %24, align 8
  %30 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %3, align 8
  %31 = icmp eq %"class.WTF::StringImpl"* %30, null
  %32 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %30, i64 1
  br i1 %23, label %37, label %33

33:                                               ; preds = %18
  %34 = bitcast %"class.WTF::StringImpl"* %32 to i8*
  %35 = select i1 %31, i8* null, i8* %34
  %36 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %0, i64 0, i32 0, i32 0
  store i8* %35, i8** %36, align 8
  br label %41

37:                                               ; preds = %18
  %38 = bitcast %"class.WTF::StringImpl"* %32 to i16*
  %39 = select i1 %31, i16* null, i16* %38
  %40 = bitcast %"class.blink::TextRun"* %0 to i16**
  store i16* %39, i16** %40, align 8
  br label %41

41:                                               ; preds = %13, %37, %33
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink7TextRun15NormalizedUTF16Ev(%"class.blink::TextRun"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = alloca i16*, align 8
  %3 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %0, i64 0, i32 5
  %4 = load i16, i16* %3, align 8
  %5 = and i16 %4, 4
  %6 = icmp eq i16 %5, 0
  br i1 %6, label %17, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %0, i64 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = tail call %"class.WTF::StringImpl"* @_ZN3WTF6String23Make16BitFrom8BitSourceEPKhj(i8* %9, i32 %11) #7
  %13 = icmp eq %"class.WTF::StringImpl"* %12, null
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 1
  %15 = bitcast %"class.WTF::StringImpl"* %14 to i16*
  %16 = select i1 %13, i16* null, i16* %15
  br label %20

17:                                               ; preds = %1
  %18 = bitcast %"class.blink::TextRun"* %0 to i16**
  %19 = load i16*, i16** %18, align 8
  br label %20

20:                                               ; preds = %7, %17
  %21 = phi %"class.WTF::StringImpl"* [ %12, %7 ], [ null, %17 ]
  %22 = phi i16* [ %16, %7 ], [ %19, %17 ]
  %23 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %0, i64 0, i32 2
  %24 = load i32, i32* %23, align 4
  %25 = bitcast i16** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #7
  store i16* inttoptr (i64 -6148914691236517206 to i16*), i16** %2, align 8
  %26 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32 %24, i16** nonnull dereferenceable(8) %2) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #7
  %27 = load i32, i32* %23, align 4
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %120, label %29

29:                                               ; preds = %20
  %30 = icmp eq %"class.WTF::StringImpl"* %26, null
  %31 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %26, i64 0, i32 1
  %32 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %26, i64 1
  %33 = bitcast %"class.WTF::StringImpl"* %32 to i16*
  br label %34

34:                                               ; preds = %29, %116
  %35 = phi i32 [ %27, %29 ], [ %118, %116 ]
  %36 = phi i32 [ 0, %29 ], [ %60, %116 ]
  %37 = phi i32 [ 0, %29 ], [ %117, %116 ]
  %38 = add nuw i32 %36, 1
  %39 = zext i32 %36 to i64
  %40 = getelementptr inbounds i16, i16* %22, i64 %39
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = and i32 %42, 64512
  %44 = icmp ne i32 %43, 55296
  %45 = icmp eq i32 %38, %35
  %46 = or i1 %45, %44
  br i1 %46, label %59, label %47

47:                                               ; preds = %34
  %48 = zext i32 %38 to i64
  %49 = getelementptr inbounds i16, i16* %22, i64 %48
  %50 = load i16, i16* %49, align 2
  %51 = zext i16 %50 to i32
  %52 = and i32 %51, 64512
  %53 = icmp eq i32 %52, 56320
  br i1 %53, label %54, label %59

54:                                               ; preds = %47
  %55 = add i32 %36, 2
  %56 = shl nuw nsw i32 %42, 10
  %57 = add nsw i32 %56, -56613888
  %58 = add nsw i32 %57, %51
  br label %59

59:                                               ; preds = %34, %47, %54
  %60 = phi i32 [ %38, %34 ], [ %55, %54 ], [ %38, %47 ]
  %61 = phi i32 [ %42, %34 ], [ %58, %54 ], [ %42, %47 ]
  %62 = load i16, i16* %3, align 8
  %63 = and i16 %62, 512
  %64 = icmp eq i16 %63, 0
  br i1 %64, label %66, label %65

65:                                               ; preds = %59
  switch i32 %61, label %67 [
    i32 13, label %75
    i32 12, label %75
    i32 11, label %75
    i32 10, label %75
    i32 9, label %75
    i32 173, label %73
    i32 8203, label %73
    i32 32, label %74
  ]

66:                                               ; preds = %59
  switch i32 %61, label %67 [
    i32 12, label %75
    i32 13, label %75
    i32 173, label %75
    i32 8203, label %75
    i32 32, label %74
    i32 9, label %74
    i32 10, label %74
  ]

67:                                               ; preds = %65, %66
  %68 = and i32 %61, -2
  %69 = icmp eq i32 %68, 8206
  br i1 %69, label %75, label %70

70:                                               ; preds = %67
  switch i32 %61, label %71 [
    i32 65279, label %75
    i32 8238, label %75
    i32 8237, label %75
    i32 8236, label %75
    i32 8235, label %75
    i32 8234, label %75
    i32 65532, label %75
  ]

71:                                               ; preds = %70
  %72 = icmp ult i32 %61, 65536
  br i1 %72, label %75, label %87

73:                                               ; preds = %65, %65
  br label %75

74:                                               ; preds = %65, %66, %66, %66
  br label %75

75:                                               ; preds = %65, %65, %65, %65, %65, %66, %66, %66, %66, %74, %73, %70, %70, %70, %70, %70, %70, %70, %67, %71
  %76 = phi i32 [ %61, %71 ], [ 32, %65 ], [ 8203, %67 ], [ 8203, %70 ], [ 8203, %70 ], [ 8203, %70 ], [ 8203, %70 ], [ 8203, %70 ], [ 8203, %70 ], [ 8203, %70 ], [ 32, %65 ], [ 32, %65 ], [ 32, %65 ], [ 32, %65 ], [ 8203, %66 ], [ 8203, %66 ], [ 8203, %66 ], [ 8203, %66 ], [ 8203, %73 ], [ 32, %74 ]
  %77 = trunc i32 %76 to i16
  br i1 %30, label %82, label %78

78:                                               ; preds = %75
  %79 = load i32, i32* %31, align 4
  %80 = icmp eq i32 %79, 0
  %81 = select i1 %80, i16* null, i16* %33
  br label %82

82:                                               ; preds = %78, %75
  %83 = phi i16* [ null, %75 ], [ %81, %78 ]
  %84 = add i32 %37, 1
  %85 = zext i32 %37 to i64
  %86 = getelementptr inbounds i16, i16* %83, i64 %85
  store i16 %77, i16* %86, align 2
  br label %116

87:                                               ; preds = %71
  %88 = icmp ult i32 %61, 1114112
  br i1 %88, label %89, label %116

89:                                               ; preds = %87
  %90 = add i32 %37, 1
  %91 = icmp ult i32 %90, %35
  br i1 %91, label %92, label %116

92:                                               ; preds = %89
  %93 = lshr i32 %61, 10
  %94 = trunc i32 %93 to i16
  %95 = add nuw nsw i16 %94, -10304
  br i1 %30, label %105, label %96

96:                                               ; preds = %92
  %97 = load i32, i32* %31, align 4
  %98 = icmp eq i32 %97, 0
  %99 = select i1 %98, i16* null, i16* %33
  %100 = zext i32 %37 to i64
  %101 = getelementptr inbounds i16, i16* %99, i64 %100
  store i16 %95, i16* %101, align 2
  %102 = load i32, i32* %31, align 4
  %103 = icmp eq i32 %102, 0
  %104 = select i1 %103, i16* null, i16* %33
  br label %108

105:                                              ; preds = %92
  %106 = zext i32 %37 to i64
  %107 = getelementptr inbounds i16, i16* null, i64 %106
  store i16 %95, i16* %107, align 2
  br label %108

108:                                              ; preds = %96, %105
  %109 = phi i16* [ null, %105 ], [ %104, %96 ]
  %110 = trunc i32 %61 to i16
  %111 = and i16 %110, 1023
  %112 = or i16 %111, -9216
  %113 = add i32 %37, 2
  %114 = zext i32 %90 to i64
  %115 = getelementptr inbounds i16, i16* %109, i64 %114
  store i16 %112, i16* %115, align 2
  br label %116

116:                                              ; preds = %87, %89, %108, %82
  %117 = phi i32 [ %84, %82 ], [ %113, %108 ], [ %37, %89 ], [ %37, %87 ]
  %118 = load i32, i32* %23, align 4
  %119 = icmp ult i32 %60, %118
  br i1 %119, label %34, label %120

120:                                              ; preds = %116, %20
  %121 = icmp eq %"class.WTF::StringImpl"* %26, null
  br i1 %121, label %126, label %122

122:                                              ; preds = %120
  %123 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %26, i64 0, i32 1
  %124 = load i32, i32* %123, align 4
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %126, label %160

126:                                              ; preds = %122, %120
  %127 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %128 = icmp eq %"class.WTF::StringImpl"* %127, null
  br i1 %128, label %146, label %129

129:                                              ; preds = %126
  %130 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %127, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %131 = load atomic i32, i32* %130 monotonic, align 4
  %132 = and i32 %131, 2
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %134, label %146

134:                                              ; preds = %129
  %135 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %127, i64 0, i32 0
  %136 = load i32, i32* %135, align 4
  %137 = zext i32 %136 to i33
  %138 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %137, i33 1) #7
  %139 = extractvalue { i33, i1 } %138, 1
  %140 = extractvalue { i33, i1 } %138, 0
  %141 = icmp slt i33 %140, 0
  %142 = or i1 %139, %141
  br i1 %142, label %143, label %144, !prof !2

143:                                              ; preds = %134
  call void @llvm.trap() #7
  unreachable

144:                                              ; preds = %134
  %145 = trunc i33 %140 to i32
  store i32 %145, i32* %135, align 4
  br label %146

146:                                              ; preds = %126, %129, %144
  br i1 %121, label %160, label %147

147:                                              ; preds = %146
  %148 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %26, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %149 = load atomic i32, i32* %148 monotonic, align 4
  %150 = and i32 %149, 2
  %151 = icmp eq i32 %150, 0
  %152 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %26, i64 0, i32 0
  %153 = load i32, i32* %152, align 4
  br i1 %151, label %154, label %156

154:                                              ; preds = %147
  %155 = add i32 %153, -1
  store i32 %155, i32* %152, align 4
  br label %156

156:                                              ; preds = %154, %147
  %157 = phi i32 [ %155, %154 ], [ %153, %147 ]
  %158 = icmp eq i32 %157, 0
  br i1 %158, label %159, label %160

159:                                              ; preds = %156
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %26) #7
  br label %160

160:                                              ; preds = %122, %146, %156, %159
  %161 = phi %"class.WTF::StringImpl"* [ %127, %146 ], [ %127, %156 ], [ %127, %159 ], [ %26, %122 ]
  %162 = icmp eq %"class.WTF::StringImpl"* %21, null
  br i1 %162, label %176, label %163

163:                                              ; preds = %160
  %164 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %165 = load atomic i32, i32* %164 monotonic, align 4
  %166 = and i32 %165, 2
  %167 = icmp eq i32 %166, 0
  %168 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 0
  %169 = load i32, i32* %168, align 4
  br i1 %167, label %170, label %172

170:                                              ; preds = %163
  %171 = add i32 %169, -1
  store i32 %171, i32* %168, align 4
  br label %172

172:                                              ; preds = %170, %163
  %173 = phi i32 [ %171, %170 ], [ %169, %163 ]
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %175, label %176

175:                                              ; preds = %172
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %21) #7
  br label %176

176:                                              ; preds = %160, %172, %175
  ret %"class.WTF::StringImpl"* %161
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare %"class.WTF::StringImpl"* @_ZN3WTF6String23Make16BitFrom8BitSourceEPKhj(i8*, i32) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK5blink7TextRun13IndexOfSubRunERKS0_(%"class.blink::TextRun"* nocapture readonly, %"class.blink::TextRun"* nocapture readonly dereferenceable(40)) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %0, i64 0, i32 5
  %4 = load i16, i16* %3, align 8
  %5 = and i16 %4, 4
  %6 = icmp ne i16 %5, 0
  %7 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %1, i64 0, i32 5
  %8 = load i16, i16* %7, align 8
  %9 = and i16 %8, 4
  %10 = icmp ne i16 %9, 0
  %11 = xor i1 %6, %10
  br i1 %11, label %34, label %12

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %1, i64 0, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %0, i64 0, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = icmp ult i8* %14, %16
  br i1 %17, label %34, label %18

18:                                               ; preds = %12
  %19 = ptrtoint i8* %16 to i64
  %20 = ptrtoint i8* %14 to i64
  %21 = sub i64 %20, %19
  %22 = xor i1 %6, true
  %23 = zext i1 %22 to i64
  %24 = ashr exact i64 %21, %23
  %25 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %1, i64 0, i32 2
  %26 = load i32, i32* %25, align 4
  %27 = zext i32 %26 to i64
  %28 = add i64 %24, %27
  %29 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %0, i64 0, i32 2
  %30 = load i32, i32* %29, align 4
  %31 = zext i32 %30 to i64
  %32 = icmp ugt i64 %28, %31
  %33 = trunc i64 %24 to i32
  br i1 %32, label %34, label %35

34:                                               ; preds = %12, %2, %18
  br label %35

35:                                               ; preds = %18, %34
  %36 = phi i32 [ -1, %34 ], [ %33, %18 ]
  ret i32 %36
}

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #3

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32, i16** dereferenceable(8)) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #5

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #6

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { cold noreturn nounwind }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
