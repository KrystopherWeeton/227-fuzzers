; ModuleID = '../../pdf/ppapi_migration/geometry_conversions.cc'
source_filename = "../../pdf/ppapi_migration/geometry_conversions.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.PP_Point = type { i32, i32 }
%struct.PP_FloatPoint = type { float, float }
%struct.PP_Rect = type { %struct.PP_Point, %struct.PP_Size }
%struct.PP_Size = type { i32, i32 }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Size" = type { i32, i32 }
%"class.gfx::RectF" = type { %"class.gfx::PointF", %"class.gfx::SizeF" }
%"class.gfx::PointF" = type { float, float }
%"class.gfx::SizeF" = type { float, float }

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZN10chrome_pdf16PointFromPPPointERK8PP_Point(%struct.PP_Point* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.PP_Point, %struct.PP_Point* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds %struct.PP_Point, %struct.PP_Point* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = zext i32 %5 to i64
  %7 = shl nuw i64 %6, 32
  %8 = zext i32 %3 to i64
  %9 = or i64 %7, %8
  ret i64 %9
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden <2 x float> @_ZN10chrome_pdf22PointFFromPPFloatPointERK13PP_FloatPoint(%struct.PP_FloatPoint* nocapture readonly dereferenceable(8)) local_unnamed_addr #1 {
  %2 = bitcast %struct.PP_FloatPoint* %0 to <2 x float>*
  %3 = load <2 x float>, <2 x float>* %2, align 4
  ret <2 x float> %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden { i64, i64 } @_ZN10chrome_pdf14RectFromPPRectERK7PP_Rect(%struct.PP_Rect* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.PP_Rect, %struct.PP_Rect* %0, i64 0, i32 0, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds %struct.PP_Rect, %struct.PP_Rect* %0, i64 0, i32 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %struct.PP_Rect, %struct.PP_Rect* %0, i64 0, i32 1, i32 0
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %struct.PP_Rect, %struct.PP_Rect* %0, i64 0, i32 1, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = icmp sgt i32 %3, 0
  %11 = icmp sgt i32 %7, 0
  %12 = and i1 %10, %11
  %13 = sub nuw nsw i32 2147483647, %3
  %14 = icmp ult i32 %13, %7
  %15 = and i1 %14, %12
  %16 = select i1 %15, i32 %13, i32 %7
  %17 = icmp sgt i32 %5, 0
  %18 = icmp sgt i32 %9, 0
  %19 = and i1 %17, %18
  %20 = sub nuw nsw i32 2147483647, %5
  %21 = icmp ult i32 %20, %9
  %22 = and i1 %21, %19
  %23 = select i1 %22, i32 %20, i32 %9
  %24 = icmp sgt i32 %16, 0
  %25 = select i1 %24, i32 %16, i32 0
  %26 = icmp sgt i32 %23, 0
  %27 = select i1 %26, i32 %23, i32 0
  %28 = zext i32 %5 to i64
  %29 = shl nuw i64 %28, 32
  %30 = zext i32 %3 to i64
  %31 = or i64 %29, %30
  %32 = insertvalue { i64, i64 } undef, i64 %31, 0
  %33 = zext i32 %27 to i64
  %34 = shl nuw nsw i64 %33, 32
  %35 = zext i32 %25 to i64
  %36 = or i64 %34, %35
  %37 = insertvalue { i64, i64 } %32, i64 %36, 1
  ret { i64, i64 } %37
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden { i64, i64 } @_ZN10chrome_pdf14PPRectFromRectERKN3gfx4RectE(%"class.gfx::Rect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 0
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %5 to i64
  %11 = shl nuw i64 %10, 32
  %12 = zext i32 %3 to i64
  %13 = or i64 %11, %12
  %14 = insertvalue { i64, i64 } undef, i64 %13, 0
  %15 = zext i32 %9 to i64
  %16 = shl nuw i64 %15, 32
  %17 = zext i32 %7 to i64
  %18 = or i64 %16, %17
  %19 = insertvalue { i64, i64 } %14, i64 %18, 1
  ret { i64, i64 } %19
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden { <2 x float>, <2 x float> } @_ZN10chrome_pdf20PPFloatRectFromRectFERKN3gfx5RectFE(%"class.gfx::RectF"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 {
  %2 = bitcast %"class.gfx::RectF"* %0 to <2 x float>*
  %3 = load <2 x float>, <2 x float>* %2, align 4
  %4 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %0, i64 0, i32 1, i32 0
  %5 = bitcast float* %4 to <2 x float>*
  %6 = load <2 x float>, <2 x float>* %5, align 4
  %7 = insertvalue { <2 x float>, <2 x float> } undef, <2 x float> %3, 0
  %8 = insertvalue { <2 x float>, <2 x float> } %7, <2 x float> %6, 1
  ret { <2 x float>, <2 x float> } %8
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZN10chrome_pdf14SizeFromPPSizeERK7PP_Size(%struct.PP_Size* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.PP_Size, %struct.PP_Size* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds %struct.PP_Size, %struct.PP_Size* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = icmp sgt i32 %3, 0
  %7 = select i1 %6, i32 %3, i32 0
  %8 = icmp sgt i32 %5, 0
  %9 = select i1 %8, i32 %5, i32 0
  %10 = zext i32 %9 to i64
  %11 = shl nuw nsw i64 %10, 32
  %12 = zext i32 %7 to i64
  %13 = or i64 %11, %12
  ret i64 %13
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZN10chrome_pdf14PPSizeFromSizeERKN3gfx4SizeE(%"class.gfx::Size"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = zext i32 %5 to i64
  %7 = shl nuw i64 %6, 32
  %8 = zext i32 %3 to i64
  %9 = or i64 %7, %8
  ret i64 %9
}

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
