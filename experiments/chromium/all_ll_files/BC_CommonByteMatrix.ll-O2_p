; ModuleID = '../../third_party/pdfium/fxbarcode/common/BC_CommonByteMatrix.cpp'
source_filename = "../../third_party/pdfium/fxbarcode/common/BC_CommonByteMatrix.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CBC_CommonByteMatrix = type { i32, i32, %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.std::__1::__vector_base_common" = type { i8 }

@_ZN20CBC_CommonByteMatrixC1Eii = hidden unnamed_addr alias void (%class.CBC_CommonByteMatrix*, i32, i32), void (%class.CBC_CommonByteMatrix*, i32, i32)* @_ZN20CBC_CommonByteMatrixC2Eii
@_ZN20CBC_CommonByteMatrixD1Ev = hidden unnamed_addr alias void (%class.CBC_CommonByteMatrix*), void (%class.CBC_CommonByteMatrix*)* @_ZN20CBC_CommonByteMatrixD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN20CBC_CommonByteMatrixC2Eii(%class.CBC_CommonByteMatrix* nocapture, i32, i32) unnamed_addr #0 align 2 {
  %4 = alloca %"class.std::__1::vector", align 8
  %5 = getelementptr inbounds %class.CBC_CommonByteMatrix, %class.CBC_CommonByteMatrix* %0, i64 0, i32 0
  store i32 %1, i32* %5, align 8
  %6 = getelementptr inbounds %class.CBC_CommonByteMatrix, %class.CBC_CommonByteMatrix* %0, i64 0, i32 1
  store i32 %2, i32* %6, align 4
  %7 = getelementptr inbounds %class.CBC_CommonByteMatrix, %class.CBC_CommonByteMatrix* %0, i64 0, i32 2
  %8 = bitcast %"class.std::__1::vector"* %7 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 24, i1 false) #8
  %9 = bitcast %"class.std::__1::vector"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %9) #8
  %10 = sext i32 %2 to i64
  %11 = sext i32 %1 to i64
  %12 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %10, i64 %11) #8
  %13 = extractvalue { i64, i1 } %12, 1
  %14 = extractvalue { i64, i1 } %12, 0
  br i1 %13, label %15, label %16, !prof !2

15:                                               ; preds = %3
  tail call void @llvm.trap() #8
  unreachable

16:                                               ; preds = %3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 0, i64 24, i1 false) #8, !alias.scope !3
  %17 = icmp eq i64 %14, 0
  br i1 %17, label %41, label %18

18:                                               ; preds = %16
  %19 = icmp slt i64 %14, 0
  br i1 %19, label %20, label %22

20:                                               ; preds = %18
  %21 = bitcast %"class.std::__1::vector"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %21) #9
  unreachable

22:                                               ; preds = %18
  %23 = tail call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 %14, i64 1) #8
  %24 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 1
  %25 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  store i8* %23, i8** %25, align 8, !alias.scope !3
  %26 = getelementptr inbounds i8, i8* %23, i64 %14
  %27 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  store i8* %26, i8** %27, align 8, !alias.scope !3
  %28 = bitcast i8** %24 to i64*
  %29 = ptrtoint i8* %23 to i64
  %30 = sub i64 %14, %29
  %31 = getelementptr i8, i8* %23, i64 %30
  %32 = ptrtoint i8* %31 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %23, i8 0, i64 %32, i1 false) #8
  %33 = ptrtoint i8* %26 to i64
  store i64 %33, i64* %28, align 8, !alias.scope !3
  %34 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = icmp eq i8* %35, null
  br i1 %36, label %41, label %37

37:                                               ; preds = %22
  %38 = ptrtoint i8* %35 to i64
  %39 = getelementptr inbounds %class.CBC_CommonByteMatrix, %class.CBC_CommonByteMatrix* %0, i64 0, i32 2, i32 0, i32 1
  %40 = bitcast i8** %39 to i64*
  store i64 %38, i64* %40, align 8
  tail call void @_Z7FX_FreePv(i8* nonnull %35) #8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 24, i1 false) #8
  br label %41

41:                                               ; preds = %16, %37, %22
  %42 = phi i64 [ %29, %37 ], [ %29, %22 ], [ 0, %16 ]
  %43 = phi i64 [ %33, %37 ], [ %33, %22 ], [ 0, %16 ]
  %44 = bitcast %"class.std::__1::vector"* %7 to i64*
  store i64 %42, i64* %44, align 8
  %45 = getelementptr inbounds %class.CBC_CommonByteMatrix, %class.CBC_CommonByteMatrix* %0, i64 0, i32 2, i32 0, i32 1
  %46 = bitcast i8** %45 to i64*
  store i64 %43, i64* %46, align 8
  %47 = getelementptr inbounds %class.CBC_CommonByteMatrix, %class.CBC_CommonByteMatrix* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %48 = bitcast i8** %47 to i64*
  store i64 %43, i64* %48, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #8
  %49 = sub i64 %43, %42
  %50 = icmp sgt i64 %49, 0
  br i1 %50, label %51, label %53

51:                                               ; preds = %41
  %52 = inttoptr i64 %42 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %52, i8 -1, i64 %49, i1 false) #8
  br label %53

53:                                               ; preds = %41, %51
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN20CBC_CommonByteMatrix5clearEh(%class.CBC_CommonByteMatrix* nocapture readonly, i8 zeroext) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %class.CBC_CommonByteMatrix, %class.CBC_CommonByteMatrix* %0, i64 0, i32 2, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %class.CBC_CommonByteMatrix, %class.CBC_CommonByteMatrix* %0, i64 0, i32 2, i32 0, i32 1
  %6 = bitcast i8** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = ptrtoint i8* %4 to i64
  %9 = sub i64 %7, %8
  %10 = icmp sgt i64 %9, 0
  br i1 %10, label %11, label %12

11:                                               ; preds = %2
  call void @llvm.memset.p0i8.i64(i8* align 1 %4, i8 %1, i64 %9, i1 false)
  br label %12

12:                                               ; preds = %11, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN20CBC_CommonByteMatrixD2Ev(%class.CBC_CommonByteMatrix* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CBC_CommonByteMatrix, %class.CBC_CommonByteMatrix* %0, i64 0, i32 2, i32 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = icmp eq i8* %3, null
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = ptrtoint i8* %3 to i64
  %7 = getelementptr inbounds %class.CBC_CommonByteMatrix, %class.CBC_CommonByteMatrix* %0, i64 0, i32 2, i32 0, i32 1
  %8 = bitcast i8** %7 to i64*
  store i64 %6, i64* %8, align 8
  tail call void @_Z7FX_FreePv(i8* nonnull %3) #8
  br label %9

9:                                                ; preds = %1, %5
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i8 @_ZNK20CBC_CommonByteMatrix3GetEii(%class.CBC_CommonByteMatrix* nocapture readonly, i32, i32) local_unnamed_addr #3 align 2 {
  %4 = getelementptr inbounds %class.CBC_CommonByteMatrix, %class.CBC_CommonByteMatrix* %0, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = mul nsw i32 %5, %2
  %7 = add nsw i32 %6, %1
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds %class.CBC_CommonByteMatrix, %class.CBC_CommonByteMatrix* %0, i64 0, i32 2, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds i8, i8* %10, i64 %8
  %12 = load i8, i8* %11, align 1
  ret i8 %12
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN20CBC_CommonByteMatrix3SetEiii(%class.CBC_CommonByteMatrix* nocapture readonly, i32, i32, i32) local_unnamed_addr #2 align 2 {
  %5 = trunc i32 %3 to i8
  %6 = getelementptr inbounds %class.CBC_CommonByteMatrix, %class.CBC_CommonByteMatrix* %0, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = mul nsw i32 %7, %2
  %9 = add nsw i32 %8, %1
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds %class.CBC_CommonByteMatrix, %class.CBC_CommonByteMatrix* %0, i64 0, i32 2, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds i8, i8* %12, i64 %10
  store i8 %5, i8* %13, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN20CBC_CommonByteMatrix3SetEiih(%class.CBC_CommonByteMatrix* nocapture readonly, i32, i32, i8 zeroext) local_unnamed_addr #2 align 2 {
  %5 = getelementptr inbounds %class.CBC_CommonByteMatrix, %class.CBC_CommonByteMatrix* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = mul nsw i32 %6, %2
  %8 = add nsw i32 %7, %1
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds %class.CBC_CommonByteMatrix, %class.CBC_CommonByteMatrix* %0, i64 0, i32 2, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds i8, i8* %11, i64 %9
  store i8 %3, i8* %12, align 1
  ret void
}

declare void @_Z7FX_FreePv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #5

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #6

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #7

declare i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64, i64) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { cold noreturn nounwind }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZN6pdfium8Vector2DIh16FxAllocAllocatorIhEEENSt3__16vectorIT_T0_EEmm: argument 0"}
!5 = distinct !{!5, !"_ZN6pdfium8Vector2DIh16FxAllocAllocatorIhEEENSt3__16vectorIT_T0_EEmm"}
