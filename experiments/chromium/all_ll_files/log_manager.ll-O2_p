; ModuleID = '../../components/autofill/core/browser/logging/log_manager.cc'
source_filename = "../../components/autofill/core/browser/logging/log_manager.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.autofill::LogManager" = type { i32 (...)** }
%"class.autofill::LogRouter" = type { %class.KeyedService, %"class.base::ObserverList", %"class.base::ObserverList.4", %"class.std::__1::vector.8" }
%class.KeyedService = type { i32 (...)** }
%"class.base::ObserverList" = type <{ %"class.std::__1::vector", %"class.base::LinkedList", i64, i32, [4 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"*, %"class.std::__1::__compressed_pair.1" }
%"class.base::internal::UncheckedObserverAdapter" = type { i8* }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.base::internal::UncheckedObserverAdapter"* }
%"class.base::LinkedList" = type { %"class.base::LinkNode" }
%"class.base::LinkNode" = type { %"class.base::internal::LinkNodeBase" }
%"class.base::internal::LinkNodeBase" = type { %"class.base::internal::LinkNodeBase"*, %"class.base::internal::LinkNodeBase"* }
%"class.base::ObserverList.4" = type <{ %"class.std::__1::vector", %"class.base::LinkedList.5", i64, i32, [4 x i8] }>
%"class.base::LinkedList.5" = type { %"class.base::LinkNode.6" }
%"class.base::LinkNode.6" = type { %"class.base::internal::LinkNodeBase" }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { %"class.base::Value"*, %"class.base::Value"*, %"class.std::__1::__compressed_pair.10" }
%"class.base::Value" = type { %"class.absl::variant" }
%"class.absl::variant" = type { %"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantCopyBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveBaseNontrivial" = type { %"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" }
%"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" = type { %"class.absl::variant_internal::VariantStateBase" }
%"class.absl::variant_internal::VariantStateBase" = type { %"union.absl::variant_internal::DestructibleUnionImpl", i64 }
%"union.absl::variant_internal::DestructibleUnionImpl" = type { %"union.absl::variant_internal::DestructibleUnionImpl.15" }
%"union.absl::variant_internal::DestructibleUnionImpl.15" = type { %"union.absl::variant_internal::DestructibleUnionImpl.16" }
%"union.absl::variant_internal::DestructibleUnionImpl.16" = type { %"union.absl::variant_internal::DestructibleUnionImpl.17" }
%"union.absl::variant_internal::DestructibleUnionImpl.17" = type { %"union.absl::variant_internal::DestructibleUnionImpl.18" }
%"union.absl::variant_internal::DestructibleUnionImpl.18" = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"class.base::Value"* }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.42" }
%"struct.std::__1::__atomic_base.42" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.autofill::(anonymous namespace)::LogManagerImpl" = type { %"class.autofill::LogManager", %"class.autofill::LogRouter"*, i8, i8, %"class.base::RepeatingCallback" }
%"class.autofill::LogBufferSubmitter" = type { %"class.autofill::LogRouter"*, %"class.autofill::LogBuffer" }
%"class.autofill::LogBuffer" = type <{ %"class.std::__1::vector.8", i8, [7 x i8] }>

@_ZTVN8autofill12_GLOBAL__N_114LogManagerImplE = internal unnamed_addr constant { [10 x i8*] } { [10 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.autofill::(anonymous namespace)::LogManagerImpl"*)* @_ZN8autofill12_GLOBAL__N_114LogManagerImplD2Ev to i8*), i8* bitcast (void (%"class.autofill::(anonymous namespace)::LogManagerImpl"*)* @_ZN8autofill12_GLOBAL__N_114LogManagerImplD0Ev to i8*), i8* bitcast (void (%"class.autofill::(anonymous namespace)::LogManagerImpl"*, i1)* @_ZN8autofill12_GLOBAL__N_114LogManagerImpl30OnLogRouterAvailabilityChangedEb to i8*), i8* bitcast (void (%"class.autofill::(anonymous namespace)::LogManagerImpl"*, i1)* @_ZN8autofill12_GLOBAL__N_114LogManagerImpl12SetSuspendedEb to i8*), i8* bitcast (void (%"class.autofill::(anonymous namespace)::LogManagerImpl"*, %"class.std::__1::basic_string"*)* @_ZNK8autofill12_GLOBAL__N_114LogManagerImpl14LogTextMessageERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE to i8*), i8* bitcast (void (%"class.autofill::(anonymous namespace)::LogManagerImpl"*, %"class.base::Value"*)* @_ZNK8autofill12_GLOBAL__N_114LogManagerImpl8LogEntryEON4base5ValueE to i8*), i8* bitcast (i1 (%"class.autofill::(anonymous namespace)::LogManagerImpl"*)* @_ZNK8autofill12_GLOBAL__N_114LogManagerImpl15IsLoggingActiveEv to i8*), i8* bitcast (void (%"class.autofill::LogBufferSubmitter"*, %"class.autofill::(anonymous namespace)::LogManagerImpl"*)* @_ZN8autofill12_GLOBAL__N_114LogManagerImpl3LogEv to i8*)] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden %"class.autofill::LogManager"* @_ZN8autofill10LogManager6CreateEPNS_9LogRouterEN4base17RepeatingCallbackIFvvEEE(%"class.autofill::LogRouter"*, %"class.base::RepeatingCallback"* nocapture) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.base::RepeatingCallback", align 8
  %4 = bitcast %"class.base::RepeatingCallback"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4)
  %5 = tail call i8* @_Znwm(i64 32) #7
  %6 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %7 = bitcast %"class.base::RepeatingCallback"* %1 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %"class.base::RepeatingCallback"* %3 to i64*
  store i64 %8, i64* %9, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %6, align 8
  %10 = bitcast i8* %5 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN8autofill12_GLOBAL__N_114LogManagerImplE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %10, align 8
  %11 = getelementptr inbounds i8, i8* %5, i64 8
  %12 = bitcast i8* %11 to %"class.autofill::LogRouter"**
  store %"class.autofill::LogRouter"* %0, %"class.autofill::LogRouter"** %12, align 8
  %13 = getelementptr inbounds i8, i8* %5, i64 16
  %14 = icmp eq %"class.autofill::LogRouter"* %0, null
  %15 = bitcast i8* %5 to %"class.autofill::LogManager"*
  br i1 %14, label %19, label %16

16:                                               ; preds = %2
  %17 = tail call zeroext i1 @_ZN8autofill9LogRouter15RegisterManagerEPNS_10LogManagerE(%"class.autofill::LogRouter"* nonnull %0, %"class.autofill::LogManager"* nonnull %15) #8
  %18 = zext i1 %17 to i8
  br label %19

19:                                               ; preds = %2, %16
  %20 = phi i8 [ %18, %16 ], [ 0, %2 ]
  store i8 %20, i8* %13, align 8
  %21 = getelementptr inbounds i8, i8* %5, i64 17
  store i8 0, i8* %21, align 1
  %22 = getelementptr inbounds i8, i8* %5, i64 24
  %23 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %24 = bitcast i8* %22 to i64*
  store i64 %8, i64* %24, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %23, align 8
  %25 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %3, i64 0, i32 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %25) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4)
  ret %"class.autofill::LogManager"* %15
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #3

declare zeroext i1 @_ZN8autofill9LogRouter15RegisterManagerEPNS_10LogManagerE(%"class.autofill::LogRouter"*, %"class.autofill::LogManager"*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN8autofill12_GLOBAL__N_114LogManagerImplD2Ev(%"class.autofill::(anonymous namespace)::LogManagerImpl"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.autofill::(anonymous namespace)::LogManagerImpl", %"class.autofill::(anonymous namespace)::LogManagerImpl"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN8autofill12_GLOBAL__N_114LogManagerImplE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.autofill::(anonymous namespace)::LogManagerImpl", %"class.autofill::(anonymous namespace)::LogManagerImpl"* %0, i64 0, i32 1
  %4 = load %"class.autofill::LogRouter"*, %"class.autofill::LogRouter"** %3, align 8
  %5 = icmp eq %"class.autofill::LogRouter"* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.autofill::(anonymous namespace)::LogManagerImpl", %"class.autofill::(anonymous namespace)::LogManagerImpl"* %0, i64 0, i32 0
  tail call void @_ZN8autofill9LogRouter17UnregisterManagerEPNS_10LogManagerE(%"class.autofill::LogRouter"* nonnull %4, %"class.autofill::LogManager"* %7) #8
  br label %8

8:                                                ; preds = %1, %6
  %9 = getelementptr inbounds %"class.autofill::(anonymous namespace)::LogManagerImpl", %"class.autofill::(anonymous namespace)::LogManagerImpl"* %0, i64 0, i32 4, i32 0, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %9) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN8autofill12_GLOBAL__N_114LogManagerImplD0Ev(%"class.autofill::(anonymous namespace)::LogManagerImpl"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.autofill::(anonymous namespace)::LogManagerImpl", %"class.autofill::(anonymous namespace)::LogManagerImpl"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN8autofill12_GLOBAL__N_114LogManagerImplE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.autofill::(anonymous namespace)::LogManagerImpl", %"class.autofill::(anonymous namespace)::LogManagerImpl"* %0, i64 0, i32 1
  %4 = load %"class.autofill::LogRouter"*, %"class.autofill::LogRouter"** %3, align 8
  %5 = icmp eq %"class.autofill::LogRouter"* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.autofill::(anonymous namespace)::LogManagerImpl", %"class.autofill::(anonymous namespace)::LogManagerImpl"* %0, i64 0, i32 0
  tail call void @_ZN8autofill9LogRouter17UnregisterManagerEPNS_10LogManagerE(%"class.autofill::LogRouter"* nonnull %4, %"class.autofill::LogManager"* %7) #8
  br label %8

8:                                                ; preds = %1, %6
  %9 = getelementptr inbounds %"class.autofill::(anonymous namespace)::LogManagerImpl", %"class.autofill::(anonymous namespace)::LogManagerImpl"* %0, i64 0, i32 4, i32 0, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %9) #8
  %10 = bitcast %"class.autofill::(anonymous namespace)::LogManagerImpl"* %0 to i8*
  tail call void @_ZdlPv(i8* %10) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN8autofill12_GLOBAL__N_114LogManagerImpl30OnLogRouterAvailabilityChangedEb(%"class.autofill::(anonymous namespace)::LogManagerImpl"* nocapture, i1 zeroext) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.autofill::(anonymous namespace)::LogManagerImpl", %"class.autofill::(anonymous namespace)::LogManagerImpl"* %0, i64 0, i32 2
  %4 = load i8, i8* %3, align 8, !range !2
  %5 = zext i8 %4 to i32
  %6 = zext i1 %1 to i32
  %7 = icmp eq i32 %5, %6
  br i1 %7, label %21, label %8

8:                                                ; preds = %2
  %9 = zext i1 %1 to i8
  store i8 %9, i8* %3, align 8
  %10 = getelementptr inbounds %"class.autofill::(anonymous namespace)::LogManagerImpl", %"class.autofill::(anonymous namespace)::LogManagerImpl"* %0, i64 0, i32 3
  %11 = load i8, i8* %10, align 1, !range !2
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %13, label %21

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.autofill::(anonymous namespace)::LogManagerImpl", %"class.autofill::(anonymous namespace)::LogManagerImpl"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  %15 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %14, align 8
  %16 = icmp eq %"class.base::internal::BindStateBase"* %15, null
  br i1 %16, label %21, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %15, i64 0, i32 1
  %19 = bitcast void ()** %18 to void (%"class.base::internal::BindStateBase"*)**
  %20 = load void (%"class.base::internal::BindStateBase"*)*, void (%"class.base::internal::BindStateBase"*)** %19, align 8
  tail call void %20(%"class.base::internal::BindStateBase"* nonnull %15) #8
  br label %21

21:                                               ; preds = %8, %13, %17, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN8autofill12_GLOBAL__N_114LogManagerImpl12SetSuspendedEb(%"class.autofill::(anonymous namespace)::LogManagerImpl"* nocapture, i1 zeroext) unnamed_addr #0 align 2 {
  %3 = zext i1 %1 to i32
  %4 = getelementptr inbounds %"class.autofill::(anonymous namespace)::LogManagerImpl", %"class.autofill::(anonymous namespace)::LogManagerImpl"* %0, i64 0, i32 3
  %5 = load i8, i8* %4, align 1, !range !2
  %6 = zext i8 %5 to i32
  %7 = icmp eq i32 %3, %6
  br i1 %7, label %21, label %8

8:                                                ; preds = %2
  %9 = zext i1 %1 to i8
  store i8 %9, i8* %4, align 1
  %10 = getelementptr inbounds %"class.autofill::(anonymous namespace)::LogManagerImpl", %"class.autofill::(anonymous namespace)::LogManagerImpl"* %0, i64 0, i32 2
  %11 = load i8, i8* %10, align 8, !range !2
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %21, label %13

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.autofill::(anonymous namespace)::LogManagerImpl", %"class.autofill::(anonymous namespace)::LogManagerImpl"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  %15 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %14, align 8
  %16 = icmp eq %"class.base::internal::BindStateBase"* %15, null
  br i1 %16, label %21, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %15, i64 0, i32 1
  %19 = bitcast void ()** %18 to void (%"class.base::internal::BindStateBase"*)**
  %20 = load void (%"class.base::internal::BindStateBase"*)*, void (%"class.base::internal::BindStateBase"*)** %19, align 8
  tail call void %20(%"class.base::internal::BindStateBase"* nonnull %15) #8
  br label %21

21:                                               ; preds = %8, %13, %17, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZNK8autofill12_GLOBAL__N_114LogManagerImpl14LogTextMessageERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE(%"class.autofill::(anonymous namespace)::LogManagerImpl"*, %"class.std::__1::basic_string"* dereferenceable(24)) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.autofill::(anonymous namespace)::LogManagerImpl"* %0 to i1 (%"class.autofill::(anonymous namespace)::LogManagerImpl"*)***
  %4 = load i1 (%"class.autofill::(anonymous namespace)::LogManagerImpl"*)**, i1 (%"class.autofill::(anonymous namespace)::LogManagerImpl"*)*** %3, align 8
  %5 = getelementptr inbounds i1 (%"class.autofill::(anonymous namespace)::LogManagerImpl"*)*, i1 (%"class.autofill::(anonymous namespace)::LogManagerImpl"*)** %4, i64 6
  %6 = load i1 (%"class.autofill::(anonymous namespace)::LogManagerImpl"*)*, i1 (%"class.autofill::(anonymous namespace)::LogManagerImpl"*)** %5, align 8
  %7 = tail call zeroext i1 %6(%"class.autofill::(anonymous namespace)::LogManagerImpl"* %0) #8
  br i1 %7, label %8, label %11

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.autofill::(anonymous namespace)::LogManagerImpl", %"class.autofill::(anonymous namespace)::LogManagerImpl"* %0, i64 0, i32 1
  %10 = load %"class.autofill::LogRouter"*, %"class.autofill::LogRouter"** %9, align 8
  tail call void @_ZN8autofill9LogRouter10ProcessLogERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.autofill::LogRouter"* %10, %"class.std::__1::basic_string"* dereferenceable(24) %1) #8
  br label %11

11:                                               ; preds = %2, %8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZNK8autofill12_GLOBAL__N_114LogManagerImpl8LogEntryEON4base5ValueE(%"class.autofill::(anonymous namespace)::LogManagerImpl"*, %"class.base::Value"* dereferenceable(32)) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.autofill::(anonymous namespace)::LogManagerImpl"* %0 to i1 (%"class.autofill::(anonymous namespace)::LogManagerImpl"*)***
  %4 = load i1 (%"class.autofill::(anonymous namespace)::LogManagerImpl"*)**, i1 (%"class.autofill::(anonymous namespace)::LogManagerImpl"*)*** %3, align 8
  %5 = getelementptr inbounds i1 (%"class.autofill::(anonymous namespace)::LogManagerImpl"*)*, i1 (%"class.autofill::(anonymous namespace)::LogManagerImpl"*)** %4, i64 6
  %6 = load i1 (%"class.autofill::(anonymous namespace)::LogManagerImpl"*)*, i1 (%"class.autofill::(anonymous namespace)::LogManagerImpl"*)** %5, align 8
  %7 = tail call zeroext i1 %6(%"class.autofill::(anonymous namespace)::LogManagerImpl"* %0) #8
  br i1 %7, label %8, label %11

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.autofill::(anonymous namespace)::LogManagerImpl", %"class.autofill::(anonymous namespace)::LogManagerImpl"* %0, i64 0, i32 1
  %10 = load %"class.autofill::LogRouter"*, %"class.autofill::LogRouter"** %9, align 8
  tail call void @_ZN8autofill9LogRouter10ProcessLogEON4base5ValueE(%"class.autofill::LogRouter"* %10, %"class.base::Value"* dereferenceable(32) %1) #8
  br label %11

11:                                               ; preds = %2, %8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal zeroext i1 @_ZNK8autofill12_GLOBAL__N_114LogManagerImpl15IsLoggingActiveEv(%"class.autofill::(anonymous namespace)::LogManagerImpl"* nocapture readonly) unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.autofill::(anonymous namespace)::LogManagerImpl", %"class.autofill::(anonymous namespace)::LogManagerImpl"* %0, i64 0, i32 2
  %3 = load i8, i8* %2, align 8, !range !2
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.autofill::(anonymous namespace)::LogManagerImpl", %"class.autofill::(anonymous namespace)::LogManagerImpl"* %0, i64 0, i32 3
  %7 = load i8, i8* %6, align 1, !range !2
  %8 = icmp eq i8 %7, 0
  br label %9

9:                                                ; preds = %1, %5
  %10 = phi i1 [ false, %1 ], [ %8, %5 ]
  ret i1 %10
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN8autofill12_GLOBAL__N_114LogManagerImpl3LogEv(%"class.autofill::LogBufferSubmitter"* noalias sret, %"class.autofill::(anonymous namespace)::LogManagerImpl"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.autofill::(anonymous namespace)::LogManagerImpl", %"class.autofill::(anonymous namespace)::LogManagerImpl"* %1, i64 0, i32 1
  %4 = load %"class.autofill::LogRouter"*, %"class.autofill::LogRouter"** %3, align 8
  %5 = bitcast %"class.autofill::(anonymous namespace)::LogManagerImpl"* %1 to i1 (%"class.autofill::(anonymous namespace)::LogManagerImpl"*)***
  %6 = load i1 (%"class.autofill::(anonymous namespace)::LogManagerImpl"*)**, i1 (%"class.autofill::(anonymous namespace)::LogManagerImpl"*)*** %5, align 8
  %7 = getelementptr inbounds i1 (%"class.autofill::(anonymous namespace)::LogManagerImpl"*)*, i1 (%"class.autofill::(anonymous namespace)::LogManagerImpl"*)** %6, i64 6
  %8 = load i1 (%"class.autofill::(anonymous namespace)::LogManagerImpl"*)*, i1 (%"class.autofill::(anonymous namespace)::LogManagerImpl"*)** %7, align 8
  %9 = tail call zeroext i1 %8(%"class.autofill::(anonymous namespace)::LogManagerImpl"* %1) #8
  tail call void @_ZN8autofill18LogBufferSubmitterC1EPNS_9LogRouterEb(%"class.autofill::LogBufferSubmitter"* %0, %"class.autofill::LogRouter"* %4, i1 zeroext %9) #8
  ret void
}

declare void @_ZN8autofill9LogRouter17UnregisterManagerEPNS_10LogManagerE(%"class.autofill::LogRouter"*, %"class.autofill::LogManager"*) local_unnamed_addr #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

declare void @_ZN8autofill9LogRouter10ProcessLogERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.autofill::LogRouter"*, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #4

declare void @_ZN8autofill9LogRouter10ProcessLogEON4base5ValueE(%"class.autofill::LogRouter"*, %"class.base::Value"* dereferenceable(32)) local_unnamed_addr #4

declare void @_ZN8autofill18LogBufferSubmitterC1EPNS_9LogRouterEb(%"class.autofill::LogBufferSubmitter"*, %"class.autofill::LogRouter"*, i1 zeroext) unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { builtin nounwind }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
