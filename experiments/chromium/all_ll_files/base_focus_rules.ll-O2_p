; ModuleID = '../../ui/wm/core/base_focus_rules.cc'
source_filename = "../../ui/wm/core/base_focus_rules.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.wm::BaseFocusRules" = type { %"class.wm::FocusRules" }
%"class.wm::FocusRules" = type { i32 (...)** }
%"class.aura::Window" = type { %"class.ui::LayerDelegate", %"class.ui::LayerOwner", %"class.ui::EventTarget", %"class.ui::GestureConsumer", %"class.ui::PropertyHandler", %"class.ui::metadata::MetaDataProvider", %"class.viz::HostFrameSinkClient", %"class.gfx::Rect", %"class.aura::WindowTreeHost"*, i32, i8, i8, %"class.aura::WindowDelegate"*, %"class.aura::Window"*, %"class.std::__1::vector.35", i8, i32, %class.SkRegion, i32, i8, i8, %"class.std::__1::unique_ptr.42", %"class.std::__1::unique_ptr.48", %"class.std::__1::vector.54", i32, i32, i32, [4 x i8], %"class.base::ObserverList.61", i32, %"class.viz::SubtreeCaptureId", float, %"class.viz::FrameSinkId", i8, i8, i8, %"class.std::__1::unique_ptr.78", %"class.base::WeakPtr.84" }
%"class.ui::LayerDelegate" = type { i32 (...)** }
%"class.ui::LayerOwner" = type { i32 (...)**, %"class.std::__1::unique_ptr", %"class.ui::Layer"*, %"class.base::ObserverList" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.ui::Layer"* }
%"class.ui::Layer" = type opaque
%"class.base::ObserverList" = type <{ %"class.std::__1::vector", %"class.base::LinkedList", i64, i32, [4 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"*, %"class.std::__1::__compressed_pair.1" }
%"class.base::internal::UncheckedObserverAdapter" = type { i8* }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.base::internal::UncheckedObserverAdapter"* }
%"class.base::LinkedList" = type { %"class.base::LinkNode" }
%"class.base::LinkNode" = type { %"class.base::internal::LinkNodeBase" }
%"class.base::internal::LinkNodeBase" = type { %"class.base::internal::LinkNodeBase"*, %"class.base::internal::LinkNodeBase"* }
%"class.ui::EventTarget" = type { i32 (...)**, %"class.std::__1::vector.4", %"class.std::__1::vector.11", %"class.ui::EventHandler"* }
%"class.std::__1::vector.4" = type { %"class.std::__1::__vector_base.5" }
%"class.std::__1::__vector_base.5" = type { %"struct.ui::EventTarget::PrioritizedHandler"*, %"struct.ui::EventTarget::PrioritizedHandler"*, %"class.std::__1::__compressed_pair.6" }
%"struct.ui::EventTarget::PrioritizedHandler" = type <{ %"class.ui::EventHandler"*, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"struct.ui::EventTarget::PrioritizedHandler"* }
%"class.std::__1::vector.11" = type { %"class.std::__1::__vector_base.12" }
%"class.std::__1::__vector_base.12" = type { %"class.ui::EventHandler"**, %"class.ui::EventHandler"**, %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"class.ui::EventHandler"** }
%"class.ui::EventHandler" = type { i32 (...)**, %"class.std::__1::stack" }
%"class.std::__1::stack" = type { %"class.base::circular_deque" }
%"class.base::circular_deque" = type { %"class.base::internal::VectorBuffer", i64, i64 }
%"class.base::internal::VectorBuffer" = type { %"class.ui::EventDispatcher"**, i64 }
%"class.ui::EventDispatcher" = type opaque
%"class.ui::GestureConsumer" = type { i32 (...)** }
%"class.ui::PropertyHandler" = type { i32 (...)**, %"class.std::__1::map" }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.18", %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { i64 }
%"class.ui::metadata::MetaDataProvider" = type { i32 (...)**, %"class.std::__1::map.26" }
%"class.std::__1::map.26" = type { %"class.std::__1::__tree.27" }
%"class.std::__1::__tree.27" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.28", %"class.std::__1::__compressed_pair.32" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"class.viz::HostFrameSinkClient" = type { i32 (...)** }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Size" = type { i32, i32 }
%"class.aura::WindowTreeHost" = type opaque
%"class.aura::WindowDelegate" = type opaque
%"class.std::__1::vector.35" = type { %"class.std::__1::__vector_base.36" }
%"class.std::__1::__vector_base.36" = type { %"class.aura::Window"**, %"class.aura::Window"**, %"class.std::__1::__compressed_pair.37" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"struct.std::__1::__compressed_pair_elem.38" = type { %"class.aura::Window"** }
%class.SkRegion = type { %struct.SkIRect, %"struct.SkRegion::RunHead"* }
%struct.SkIRect = type { i32, i32, i32, i32 }
%"struct.SkRegion::RunHead" = type opaque
%"class.std::__1::unique_ptr.42" = type { %"class.std::__1::__compressed_pair.43" }
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"struct.std::__1::__compressed_pair_elem.44" = type { %"class.aura::LayoutManager"* }
%"class.aura::LayoutManager" = type opaque
%"class.std::__1::unique_ptr.48" = type { %"class.std::__1::__compressed_pair.49" }
%"class.std::__1::__compressed_pair.49" = type { %"struct.std::__1::__compressed_pair_elem.50" }
%"struct.std::__1::__compressed_pair_elem.50" = type { %"class.aura::WindowTargeter"* }
%"class.aura::WindowTargeter" = type opaque
%"class.std::__1::vector.54" = type { %"class.std::__1::__vector_base.55" }
%"class.std::__1::__vector_base.55" = type { %"class.gfx::Rect"*, %"class.gfx::Rect"*, %"class.std::__1::__compressed_pair.56" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { %"class.gfx::Rect"* }
%"class.base::ObserverList.61" = type <{ %"class.std::__1::vector.62", %"class.base::LinkedList.75", i64, i32, [4 x i8] }>
%"class.std::__1::vector.62" = type { %"class.std::__1::__vector_base.63" }
%"class.std::__1::__vector_base.63" = type { %"class.base::internal::CheckedObserverAdapter"*, %"class.base::internal::CheckedObserverAdapter"*, %"class.std::__1::__compressed_pair.70" }
%"class.base::internal::CheckedObserverAdapter" = type { %"class.base::WeakPtr" }
%"class.base::WeakPtr" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::internal::WeakPtrBase" = type { %"class.base::internal::WeakReference", i64 }
%"class.base::internal::WeakReference" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.64" }
%"struct.std::__1::__atomic_base.64" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.65" }
%"struct.std::__1::atomic.65" = type { %"struct.std::__1::__atomic_base.66" }
%"struct.std::__1::__atomic_base.66" = type { %"struct.std::__1::__atomic_base.67" }
%"struct.std::__1::__atomic_base.67" = type { %"struct.std::__1::__cxx_atomic_impl.68" }
%"struct.std::__1::__cxx_atomic_impl.68" = type { %"struct.std::__1::__cxx_atomic_base_impl.69" }
%"struct.std::__1::__cxx_atomic_base_impl.69" = type { i8 }
%"class.std::__1::__compressed_pair.70" = type { %"struct.std::__1::__compressed_pair_elem.71" }
%"struct.std::__1::__compressed_pair_elem.71" = type { %"class.base::internal::CheckedObserverAdapter"* }
%"class.base::LinkedList.75" = type { %"class.base::LinkNode.76" }
%"class.base::LinkNode.76" = type { %"class.base::internal::LinkNodeBase" }
%"class.viz::SubtreeCaptureId" = type { i32 }
%"class.viz::FrameSinkId" = type { i32, i32 }
%"class.std::__1::unique_ptr.78" = type { %"class.std::__1::__compressed_pair.79" }
%"class.std::__1::__compressed_pair.79" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"struct.std::__1::__compressed_pair_elem.80" = type { %"class.viz::ParentLocalSurfaceIdAllocator"* }
%"class.viz::ParentLocalSurfaceIdAllocator" = type opaque
%"class.base::WeakPtr.84" = type { %"class.base::internal::WeakPtrBase" }
%"class.wm::ActivationDelegate" = type { i32 (...)** }
%"class.ui::Event" = type opaque
%"class.aura::client::FocusClient" = type { i32 (...)** }

@_ZTVN2wm14BaseFocusRulesE = hidden unnamed_addr constant { [13 x i8*] } { [13 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.wm::BaseFocusRules"*)* @_ZN2wm14BaseFocusRulesD2Ev to i8*), i8* bitcast (void (%"class.wm::BaseFocusRules"*)* @_ZN2wm14BaseFocusRulesD0Ev to i8*), i8* bitcast (i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)* @_ZNK2wm14BaseFocusRules16IsToplevelWindowEPKN4aura6WindowE to i8*), i8* bitcast (i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)* @_ZNK2wm14BaseFocusRules17CanActivateWindowEPKN4aura6WindowE to i8*), i8* bitcast (i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*, %"class.ui::Event"*)* @_ZNK2wm14BaseFocusRules14CanFocusWindowEPKN4aura6WindowEPKN2ui5EventE to i8*), i8* bitcast (%"class.aura::Window"* (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)* @_ZNK2wm14BaseFocusRules17GetToplevelWindowEPKN4aura6WindowE to i8*), i8* bitcast (%"class.aura::Window"* (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)* @_ZNK2wm14BaseFocusRules20GetActivatableWindowEPN4aura6WindowE to i8*), i8* bitcast (%"class.aura::Window"* (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)* @_ZNK2wm14BaseFocusRules18GetFocusableWindowEPN4aura6WindowE to i8*), i8* bitcast (%"class.aura::Window"* (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)* @_ZNK2wm14BaseFocusRules24GetNextActivatableWindowEPN4aura6WindowE to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)* @_ZNK2wm14BaseFocusRules38IsWindowConsideredVisibleForActivationEPKN4aura6WindowE to i8*)] }, align 8

@_ZN2wm14BaseFocusRulesD1Ev = hidden unnamed_addr alias void (%"class.wm::BaseFocusRules"*), void (%"class.wm::BaseFocusRules"*)* @_ZN2wm14BaseFocusRulesD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2wm14BaseFocusRulesC2Ev(%"class.wm::BaseFocusRules"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.wm::BaseFocusRules", %"class.wm::BaseFocusRules"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN2wm14BaseFocusRulesE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN2wm14BaseFocusRulesD2Ev(%"class.wm::BaseFocusRules"* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN2wm14BaseFocusRulesD0Ev(%"class.wm::BaseFocusRules"* nocapture readnone) unnamed_addr #2 align 2 {
  tail call void @llvm.trap() #6
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2wm14BaseFocusRules38IsWindowConsideredVisibleForActivationEPKN4aura6WindowE(%"class.wm::BaseFocusRules"* nocapture readnone, %"class.aura::Window"*) unnamed_addr #4 align 2 {
  %3 = tail call zeroext i1 @_ZNK4aura6Window9IsVisibleEv(%"class.aura::Window"* %1) #7
  ret i1 %3
}

declare zeroext i1 @_ZNK4aura6Window9IsVisibleEv(%"class.aura::Window"*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2wm14BaseFocusRules16IsToplevelWindowEPKN4aura6WindowE(%"class.wm::BaseFocusRules"*, %"class.aura::Window"*) unnamed_addr #4 align 2 {
  %3 = tail call %"class.aura::Window"* @_ZNK4aura6Window13GetRootWindowEv(%"class.aura::Window"* %1) #7
  %4 = icmp eq %"class.aura::Window"* %3, null
  br i1 %4, label %13, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %"class.aura::Window", %"class.aura::Window"* %1, i64 0, i32 13
  %7 = load %"class.aura::Window"*, %"class.aura::Window"** %6, align 8
  %8 = bitcast %"class.wm::BaseFocusRules"* %0 to i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)***
  %9 = load i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)**, i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)*** %8, align 8
  %10 = getelementptr inbounds i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)*, i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)** %9, i64 9
  %11 = load i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)*, i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)** %10, align 8
  %12 = tail call zeroext i1 %11(%"class.wm::BaseFocusRules"* %0, %"class.aura::Window"* %7) #7
  br label %13

13:                                               ; preds = %2, %5
  %14 = phi i1 [ %12, %5 ], [ false, %2 ]
  ret i1 %14
}

declare %"class.aura::Window"* @_ZNK4aura6Window13GetRootWindowEv(%"class.aura::Window"*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2wm14BaseFocusRules17CanActivateWindowEPKN4aura6WindowE(%"class.wm::BaseFocusRules"*, %"class.aura::Window"*) unnamed_addr #4 align 2 {
  %3 = icmp eq %"class.aura::Window"* %1, null
  br i1 %3, label %33, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.aura::Window", %"class.aura::Window"* %1, i64 0, i32 10
  %6 = load i8, i8* %5, align 4, !range !2
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %8, label %33

8:                                                ; preds = %4
  %9 = bitcast %"class.wm::BaseFocusRules"* %0 to i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)***
  %10 = load i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)**, i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)*** %9, align 8
  %11 = getelementptr inbounds i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)*, i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)** %10, i64 2
  %12 = load i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)*, i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)** %11, align 8
  %13 = tail call zeroext i1 %12(%"class.wm::BaseFocusRules"* %0, %"class.aura::Window"* nonnull %1) #7
  br i1 %13, label %14, label %33

14:                                               ; preds = %8
  %15 = load i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)**, i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)*** %9, align 8
  %16 = getelementptr inbounds i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)*, i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)** %15, i64 10
  %17 = load i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)*, i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)** %16, align 8
  %18 = tail call zeroext i1 %17(%"class.wm::BaseFocusRules"* %0, %"class.aura::Window"* nonnull %1) #7
  br i1 %18, label %19, label %33

19:                                               ; preds = %14
  %20 = tail call %"class.wm::ActivationDelegate"* @_ZN2wm21GetActivationDelegateEPKN4aura6WindowE(%"class.aura::Window"* nonnull %1) #7
  %21 = icmp eq %"class.wm::ActivationDelegate"* %20, null
  br i1 %21, label %28, label %22

22:                                               ; preds = %19
  %23 = tail call %"class.wm::ActivationDelegate"* @_ZN2wm21GetActivationDelegateEPKN4aura6WindowE(%"class.aura::Window"* nonnull %1) #7
  %24 = bitcast %"class.wm::ActivationDelegate"* %23 to i1 (%"class.wm::ActivationDelegate"*)***
  %25 = load i1 (%"class.wm::ActivationDelegate"*)**, i1 (%"class.wm::ActivationDelegate"*)*** %24, align 8
  %26 = load i1 (%"class.wm::ActivationDelegate"*)*, i1 (%"class.wm::ActivationDelegate"*)** %25, align 8
  %27 = tail call zeroext i1 %26(%"class.wm::ActivationDelegate"* %23) #7
  br i1 %27, label %28, label %33

28:                                               ; preds = %19, %22
  %29 = tail call zeroext i1 @_ZNK4aura6Window8CanFocusEv(%"class.aura::Window"* nonnull %1) #7
  br i1 %29, label %30, label %33

30:                                               ; preds = %28
  %31 = tail call %"class.aura::Window"* @_ZN2wm17GetModalTransientEPKN4aura6WindowE(%"class.aura::Window"* nonnull %1) #7
  %32 = icmp eq %"class.aura::Window"* %31, null
  br label %33

33:                                               ; preds = %4, %28, %22, %14, %8, %2, %30
  %34 = phi i1 [ %32, %30 ], [ true, %2 ], [ false, %4 ], [ false, %8 ], [ false, %14 ], [ false, %22 ], [ false, %28 ]
  ret i1 %34
}

declare %"class.wm::ActivationDelegate"* @_ZN2wm21GetActivationDelegateEPKN4aura6WindowE(%"class.aura::Window"*) local_unnamed_addr #5

declare zeroext i1 @_ZNK4aura6Window8CanFocusEv(%"class.aura::Window"*) local_unnamed_addr #5

declare %"class.aura::Window"* @_ZN2wm17GetModalTransientEPKN4aura6WindowE(%"class.aura::Window"*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2wm14BaseFocusRules14CanFocusWindowEPKN4aura6WindowEPKN2ui5EventE(%"class.wm::BaseFocusRules"*, %"class.aura::Window"*, %"class.ui::Event"* nocapture readnone) unnamed_addr #4 align 2 {
  %4 = icmp eq %"class.aura::Window"* %1, null
  br i1 %4, label %12, label %5

5:                                                ; preds = %3
  %6 = tail call %"class.aura::Window"* @_ZNK2wm14BaseFocusRules20GetActivatableWindowEPKN4aura6WindowE(%"class.wm::BaseFocusRules"* %0, %"class.aura::Window"* nonnull %1)
  %7 = icmp eq %"class.aura::Window"* %6, null
  br i1 %7, label %12, label %8

8:                                                ; preds = %5
  %9 = tail call zeroext i1 @_ZNK4aura6Window8ContainsEPKS0_(%"class.aura::Window"* nonnull %6, %"class.aura::Window"* nonnull %1) #7
  br i1 %9, label %10, label %12

10:                                               ; preds = %8
  %11 = tail call zeroext i1 @_ZNK4aura6Window8CanFocusEv(%"class.aura::Window"* nonnull %1) #7
  br label %12

12:                                               ; preds = %10, %5, %8, %3
  %13 = phi i1 [ true, %3 ], [ %11, %10 ], [ false, %5 ], [ false, %8 ]
  ret i1 %13
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.aura::Window"* @_ZNK2wm14BaseFocusRules20GetActivatableWindowEPKN4aura6WindowE(%"class.wm::BaseFocusRules"*, %"class.aura::Window"*) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.aura::Window", %"class.aura::Window"* %1, i64 0, i32 13
  %4 = load %"class.aura::Window"*, %"class.aura::Window"** %3, align 8
  %5 = icmp eq %"class.aura::Window"* %4, null
  br i1 %5, label %41, label %6

6:                                                ; preds = %2
  %7 = bitcast %"class.wm::BaseFocusRules"* %0 to i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)***
  br label %8

8:                                                ; preds = %38, %6
  %9 = phi %"class.aura::Window"* [ %4, %6 ], [ %39, %38 ]
  %10 = phi %"class.aura::Window"* [ %1, %6 ], [ %40, %38 ]
  %11 = load i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)**, i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)*** %7, align 8
  %12 = getelementptr inbounds i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)*, i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)** %11, i64 3
  %13 = load i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)*, i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)** %12, align 8
  %14 = tail call zeroext i1 %13(%"class.wm::BaseFocusRules"* %0, %"class.aura::Window"* %10) #7
  br i1 %14, label %41, label %15

15:                                               ; preds = %8
  %16 = tail call %"class.aura::Window"* @_ZN2wm17GetModalTransientEPKN4aura6WindowE(%"class.aura::Window"* %10) #7
  %17 = icmp eq %"class.aura::Window"* %16, null
  br i1 %17, label %18, label %27

18:                                               ; preds = %15
  %19 = tail call %"class.aura::Window"* @_ZN2wm18GetTransientParentEPKN4aura6WindowE(%"class.aura::Window"* %10) #7
  %20 = icmp eq %"class.aura::Window"* %19, null
  br i1 %20, label %32, label %21

21:                                               ; preds = %18
  %22 = tail call %"class.aura::Window"* @_ZN2wm18GetTransientParentEPKN4aura6WindowE(%"class.aura::Window"* %10) #7
  %23 = tail call %"class.aura::Window"* @_ZN2wm17GetModalTransientEPKN4aura6WindowE(%"class.aura::Window"* %22) #7
  %24 = icmp eq %"class.aura::Window"* %23, %10
  br i1 %24, label %41, label %25

25:                                               ; preds = %21
  %26 = tail call %"class.aura::Window"* @_ZN2wm18GetTransientParentEPKN4aura6WindowE(%"class.aura::Window"* %10) #7
  br label %27

27:                                               ; preds = %15, %25
  %28 = phi %"class.aura::Window"* [ %26, %25 ], [ %16, %15 ]
  %29 = getelementptr inbounds %"class.aura::Window", %"class.aura::Window"* %28, i64 0, i32 13
  %30 = load %"class.aura::Window"*, %"class.aura::Window"** %29, align 8
  %31 = icmp eq %"class.aura::Window"* %30, null
  br i1 %31, label %41, label %38

32:                                               ; preds = %18
  %33 = getelementptr inbounds %"class.aura::Window", %"class.aura::Window"* %10, i64 0, i32 13
  %34 = load %"class.aura::Window"*, %"class.aura::Window"** %33, align 8
  %35 = getelementptr inbounds %"class.aura::Window", %"class.aura::Window"* %9, i64 0, i32 13
  %36 = load %"class.aura::Window"*, %"class.aura::Window"** %35, align 8
  %37 = icmp eq %"class.aura::Window"* %36, null
  br i1 %37, label %41, label %38

38:                                               ; preds = %32, %27
  %39 = phi %"class.aura::Window"* [ %36, %32 ], [ %30, %27 ]
  %40 = phi %"class.aura::Window"* [ %34, %32 ], [ %28, %27 ]
  br label %8

41:                                               ; preds = %21, %27, %8, %32, %2
  %42 = phi %"class.aura::Window"* [ null, %2 ], [ null, %27 ], [ %10, %21 ], [ %10, %8 ], [ null, %32 ]
  ret %"class.aura::Window"* %42
}

declare zeroext i1 @_ZNK4aura6Window8ContainsEPKS0_(%"class.aura::Window"*, %"class.aura::Window"*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden %"class.aura::Window"* @_ZNK2wm14BaseFocusRules17GetToplevelWindowEPKN4aura6WindowE(%"class.wm::BaseFocusRules"*, %"class.aura::Window"*) unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.aura::Window", %"class.aura::Window"* %1, i64 0, i32 13
  %4 = load %"class.aura::Window"*, %"class.aura::Window"** %3, align 8
  %5 = icmp eq %"class.aura::Window"* %4, null
  br i1 %5, label %21, label %6

6:                                                ; preds = %2
  %7 = bitcast %"class.wm::BaseFocusRules"* %0 to i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)***
  br label %8

8:                                                ; preds = %6, %15
  %9 = phi %"class.aura::Window"* [ %4, %6 ], [ %19, %15 ]
  %10 = phi %"class.aura::Window"* [ %1, %6 ], [ %17, %15 ]
  %11 = load i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)**, i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)*** %7, align 8
  %12 = getelementptr inbounds i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)*, i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)** %11, i64 2
  %13 = load i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)*, i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)** %12, align 8
  %14 = tail call zeroext i1 %13(%"class.wm::BaseFocusRules"* %0, %"class.aura::Window"* %10) #7
  br i1 %14, label %21, label %15

15:                                               ; preds = %8
  %16 = getelementptr inbounds %"class.aura::Window", %"class.aura::Window"* %10, i64 0, i32 13
  %17 = load %"class.aura::Window"*, %"class.aura::Window"** %16, align 8
  %18 = getelementptr inbounds %"class.aura::Window", %"class.aura::Window"* %9, i64 0, i32 13
  %19 = load %"class.aura::Window"*, %"class.aura::Window"** %18, align 8
  %20 = icmp eq %"class.aura::Window"* %19, null
  br i1 %20, label %21, label %8

21:                                               ; preds = %8, %15, %2
  %22 = phi %"class.aura::Window"* [ null, %2 ], [ null, %15 ], [ %10, %8 ]
  ret %"class.aura::Window"* %22
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.aura::Window"* @_ZNK2wm14BaseFocusRules20GetActivatableWindowEPN4aura6WindowE(%"class.wm::BaseFocusRules"*, %"class.aura::Window"*) unnamed_addr #4 align 2 {
  %3 = tail call %"class.aura::Window"* @_ZNK2wm14BaseFocusRules20GetActivatableWindowEPKN4aura6WindowE(%"class.wm::BaseFocusRules"* %0, %"class.aura::Window"* %1)
  ret %"class.aura::Window"* %3
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.aura::Window"* @_ZNK2wm14BaseFocusRules18GetFocusableWindowEPN4aura6WindowE(%"class.wm::BaseFocusRules"*, %"class.aura::Window"*) unnamed_addr #4 align 2 {
  %3 = bitcast %"class.wm::BaseFocusRules"* %0 to i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*, %"class.ui::Event"*)***
  %4 = load i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*, %"class.ui::Event"*)**, i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*, %"class.ui::Event"*)*** %3, align 8
  %5 = getelementptr inbounds i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*, %"class.ui::Event"*)*, i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*, %"class.ui::Event"*)** %4, i64 4
  %6 = load i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*, %"class.ui::Event"*)*, i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*, %"class.ui::Event"*)** %5, align 8
  %7 = tail call zeroext i1 %6(%"class.wm::BaseFocusRules"* %0, %"class.aura::Window"* %1, %"class.ui::Event"* null) #7
  br i1 %7, label %55, label %8

8:                                                ; preds = %2
  %9 = bitcast %"class.wm::BaseFocusRules"* %0 to %"class.aura::Window"* (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)***
  %10 = load %"class.aura::Window"* (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)**, %"class.aura::Window"* (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)*** %9, align 8
  %11 = getelementptr inbounds %"class.aura::Window"* (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)*, %"class.aura::Window"* (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)** %10, i64 6
  %12 = load %"class.aura::Window"* (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)*, %"class.aura::Window"* (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)** %11, align 8
  %13 = tail call %"class.aura::Window"* %12(%"class.wm::BaseFocusRules"* %0, %"class.aura::Window"* %1) #7
  %14 = icmp eq %"class.aura::Window"* %13, null
  br i1 %14, label %15, label %27

15:                                               ; preds = %8
  %16 = load %"class.aura::Window"* (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)**, %"class.aura::Window"* (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)*** %9, align 8
  %17 = getelementptr inbounds %"class.aura::Window"* (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)*, %"class.aura::Window"* (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)** %16, i64 5
  %18 = load %"class.aura::Window"* (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)*, %"class.aura::Window"* (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)** %17, align 8
  %19 = tail call %"class.aura::Window"* %18(%"class.wm::BaseFocusRules"* %0, %"class.aura::Window"* %1) #7
  %20 = icmp eq %"class.aura::Window"* %19, null
  br i1 %20, label %55, label %21

21:                                               ; preds = %15
  %22 = load %"class.aura::Window"* (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)**, %"class.aura::Window"* (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)*** %9, align 8
  %23 = getelementptr inbounds %"class.aura::Window"* (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)*, %"class.aura::Window"* (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)** %22, i64 8
  %24 = load %"class.aura::Window"* (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)*, %"class.aura::Window"* (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)** %23, align 8
  %25 = tail call %"class.aura::Window"* %24(%"class.wm::BaseFocusRules"* %0, %"class.aura::Window"* nonnull %19) #7
  %26 = icmp eq %"class.aura::Window"* %25, null
  br i1 %26, label %55, label %27

27:                                               ; preds = %21, %8
  %28 = phi %"class.aura::Window"* [ %13, %8 ], [ %25, %21 ]
  %29 = tail call zeroext i1 @_ZNK4aura6Window8ContainsEPKS0_(%"class.aura::Window"* nonnull %28, %"class.aura::Window"* %1) #7
  br i1 %29, label %30, label %32

30:                                               ; preds = %27
  %31 = icmp eq %"class.aura::Window"* %1, null
  br i1 %31, label %55, label %45

32:                                               ; preds = %27
  %33 = tail call %"class.aura::client::FocusClient"* @_ZN4aura6client14GetFocusClientEPNS_6WindowE(%"class.aura::Window"* nonnull %28) #7
  %34 = icmp eq %"class.aura::client::FocusClient"* %33, null
  br i1 %34, label %41, label %35

35:                                               ; preds = %32
  %36 = bitcast %"class.aura::client::FocusClient"* %33 to %"class.aura::Window"* (%"class.aura::client::FocusClient"*)***
  %37 = load %"class.aura::Window"* (%"class.aura::client::FocusClient"*)**, %"class.aura::Window"* (%"class.aura::client::FocusClient"*)*** %36, align 8
  %38 = getelementptr inbounds %"class.aura::Window"* (%"class.aura::client::FocusClient"*)*, %"class.aura::Window"* (%"class.aura::client::FocusClient"*)** %37, i64 6
  %39 = load %"class.aura::Window"* (%"class.aura::client::FocusClient"*)*, %"class.aura::Window"* (%"class.aura::client::FocusClient"*)** %38, align 8
  %40 = tail call %"class.aura::Window"* %39(%"class.aura::client::FocusClient"* nonnull %33) #7
  br label %41

41:                                               ; preds = %32, %35
  %42 = phi %"class.aura::Window"* [ %40, %35 ], [ null, %32 ]
  %43 = tail call zeroext i1 @_ZNK4aura6Window8ContainsEPKS0_(%"class.aura::Window"* nonnull %28, %"class.aura::Window"* %42) #7
  %44 = select i1 %43, %"class.aura::Window"* %42, %"class.aura::Window"* %28
  br label %55

45:                                               ; preds = %30, %51
  %46 = phi %"class.aura::Window"* [ %53, %51 ], [ %1, %30 ]
  %47 = load i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*, %"class.ui::Event"*)**, i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*, %"class.ui::Event"*)*** %3, align 8
  %48 = getelementptr inbounds i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*, %"class.ui::Event"*)*, i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*, %"class.ui::Event"*)** %47, i64 4
  %49 = load i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*, %"class.ui::Event"*)*, i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*, %"class.ui::Event"*)** %48, align 8
  %50 = tail call zeroext i1 %49(%"class.wm::BaseFocusRules"* %0, %"class.aura::Window"* nonnull %46, %"class.ui::Event"* null) #7
  br i1 %50, label %55, label %51

51:                                               ; preds = %45
  %52 = getelementptr inbounds %"class.aura::Window", %"class.aura::Window"* %46, i64 0, i32 13
  %53 = load %"class.aura::Window"*, %"class.aura::Window"** %52, align 8
  %54 = icmp eq %"class.aura::Window"* %53, null
  br i1 %54, label %55, label %45

55:                                               ; preds = %51, %45, %30, %21, %15, %41, %2
  %56 = phi %"class.aura::Window"* [ %1, %2 ], [ %44, %41 ], [ null, %21 ], [ null, %15 ], [ null, %30 ], [ null, %51 ], [ %46, %45 ]
  ret %"class.aura::Window"* %56
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.aura::Window"* @_ZNK2wm14BaseFocusRules24GetNextActivatableWindowEPN4aura6WindowE(%"class.wm::BaseFocusRules"*, %"class.aura::Window"* readonly) unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.aura::Window", %"class.aura::Window"* %1, i64 0, i32 13
  %4 = load %"class.aura::Window"*, %"class.aura::Window"** %3, align 8
  %5 = icmp eq %"class.aura::Window"* %4, null
  br i1 %5, label %30, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.aura::Window", %"class.aura::Window"* %4, i64 0, i32 14, i32 0, i32 1
  %8 = load %"class.aura::Window"**, %"class.aura::Window"*** %7, align 8
  %9 = getelementptr inbounds %"class.aura::Window", %"class.aura::Window"* %4, i64 0, i32 14, i32 0, i32 0
  %10 = load %"class.aura::Window"**, %"class.aura::Window"*** %9, align 8
  %11 = icmp eq %"class.aura::Window"** %8, %10
  br i1 %11, label %30, label %12

12:                                               ; preds = %6
  %13 = bitcast %"class.wm::BaseFocusRules"* %0 to i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)***
  br label %14

14:                                               ; preds = %12, %27
  %15 = phi %"class.aura::Window"** [ %10, %12 ], [ %28, %27 ]
  %16 = phi %"class.aura::Window"** [ %8, %12 ], [ %17, %27 ]
  %17 = getelementptr inbounds %"class.aura::Window"*, %"class.aura::Window"** %16, i64 -1
  %18 = load %"class.aura::Window"*, %"class.aura::Window"** %17, align 8
  %19 = icmp eq %"class.aura::Window"* %18, %1
  br i1 %19, label %27, label %20

20:                                               ; preds = %14
  %21 = load i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)**, i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)*** %13, align 8
  %22 = getelementptr inbounds i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)*, i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)** %21, i64 3
  %23 = load i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)*, i1 (%"class.wm::BaseFocusRules"*, %"class.aura::Window"*)** %22, align 8
  %24 = tail call zeroext i1 %23(%"class.wm::BaseFocusRules"* %0, %"class.aura::Window"* %18) #7
  br i1 %24, label %30, label %25

25:                                               ; preds = %20
  %26 = load %"class.aura::Window"**, %"class.aura::Window"*** %9, align 8
  br label %27

27:                                               ; preds = %25, %14
  %28 = phi %"class.aura::Window"** [ %26, %25 ], [ %15, %14 ]
  %29 = icmp eq %"class.aura::Window"** %17, %28
  br i1 %29, label %30, label %14

30:                                               ; preds = %20, %27, %6, %2
  %31 = phi %"class.aura::Window"* [ null, %2 ], [ null, %6 ], [ %18, %20 ], [ null, %27 ]
  ret %"class.aura::Window"* %31
}

declare %"class.aura::Window"* @_ZN2wm18GetTransientParentEPKN4aura6WindowE(%"class.aura::Window"*) local_unnamed_addr #5

declare void @__cxa_pure_virtual() unnamed_addr

declare %"class.aura::client::FocusClient"* @_ZN4aura6client14GetFocusClientEPNS_6WindowE(%"class.aura::Window"*) local_unnamed_addr #5

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { cold noreturn nounwind }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
