; ModuleID = '../../third_party/boringssl/src/crypto/evp/p_rsa_asn1.c'
source_filename = "../../third_party/boringssl/src/crypto/evp/p_rsa_asn1.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.evp_pkey_st = type { i32, i32, %union.anon, %struct.evp_pkey_asn1_method_st* }
%union.anon = type { i8* }
%struct.evp_pkey_asn1_method_st = type { i32, [9 x i8], i8, {}*, i32 (%struct.cbb_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.evp_pkey_st*)*, {}*, i32 (%struct.cbb_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, i8*, i64)*, i32 (%struct.evp_pkey_st*, i8*, i64)*, i32 (%struct.evp_pkey_st*, i8*, i64*)*, i32 (%struct.evp_pkey_st*, i8*, i64*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.evp_pkey_st*)*, void (%struct.evp_pkey_st*)* }
%struct.cbs_st = type { i8*, i64 }
%struct.cbb_st = type { %struct.cbb_buffer_st*, %struct.cbb_st*, i64, i8, i8, i8 }
%struct.cbb_buffer_st = type { i8*, i64, i64, i8, i8 }
%struct.rsa_st = type { %struct.rsa_meth_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.crypto_ex_data_st, i32, i32, %union.crypto_mutex_st, %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, i32, %struct.bn_blinding_st**, i8*, i64, i8 }
%struct.rsa_meth_st = type { %struct.openssl_method_common_st, i8*, i32 (%struct.rsa_st*)*, i32 (%struct.rsa_st*)*, i64 (%struct.rsa_st*)*, i32 (i32, i8*, i32, i8*, i32*, %struct.rsa_st*)*, i32 (%struct.rsa_st*, i64*, i8*, i64, i8*, i64, i32)*, i32 (%struct.rsa_st*, i64*, i8*, i64, i8*, i64, i32)*, i32 (%struct.rsa_st*, i8*, i8*, i64)*, i32 }
%struct.openssl_method_common_st = type { i32, i8 }
%struct.crypto_ex_data_st = type { %struct.stack_st_void* }
%struct.stack_st_void = type opaque
%union.crypto_mutex_st = type { double, [48 x i8] }
%struct.bn_mont_ctx_st = type { %struct.bignum_st, %struct.bignum_st, [2 x i64] }
%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
%struct.bn_blinding_st = type opaque

@rsa_asn1_meth = hidden constant { i32, [9 x i8], i8, i32 (%struct.evp_pkey_st*, %struct.cbs_st*, %struct.cbs_st*)*, i32 (%struct.cbb_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.cbs_st*, %struct.cbs_st*)*, i32 (%struct.cbb_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, i8*, i64)*, i32 (%struct.evp_pkey_st*, i8*, i64)*, i32 (%struct.evp_pkey_st*, i8*, i64*)*, i32 (%struct.evp_pkey_st*, i8*, i64*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.evp_pkey_st*)*, void (%struct.evp_pkey_st*)* } { i32 6, [9 x i8] c"*\86H\86\F7\0D\01\01\01", i8 9, i32 (%struct.evp_pkey_st*, %struct.cbs_st*, %struct.cbs_st*)* @rsa_pub_decode, i32 (%struct.cbb_st*, %struct.evp_pkey_st*)* @rsa_pub_encode, i32 (%struct.evp_pkey_st*, %struct.evp_pkey_st*)* @rsa_pub_cmp, i32 (%struct.evp_pkey_st*, %struct.cbs_st*, %struct.cbs_st*)* @rsa_priv_decode, i32 (%struct.cbb_st*, %struct.evp_pkey_st*)* @rsa_priv_encode, i32 (%struct.evp_pkey_st*, i8*, i64)* null, i32 (%struct.evp_pkey_st*, i8*, i64)* null, i32 (%struct.evp_pkey_st*, i8*, i64*)* null, i32 (%struct.evp_pkey_st*, i8*, i64*)* null, i32 (%struct.evp_pkey_st*)* @rsa_opaque, i32 (%struct.evp_pkey_st*)* @int_rsa_size, i32 (%struct.evp_pkey_st*)* @rsa_bits, i32 (%struct.evp_pkey_st*)* null, i32 (%struct.evp_pkey_st*, %struct.evp_pkey_st*)* null, i32 (%struct.evp_pkey_st*, %struct.evp_pkey_st*)* null, void (%struct.evp_pkey_st*)* @int_rsa_free }, align 8
@.str = private unnamed_addr constant [56 x i8] c"../../third_party/boringssl/src/crypto/evp/p_rsa_asn1.c\00", align 1

; Function Attrs: nounwind ssp uwtable
define internal i32 @rsa_pub_decode(%struct.evp_pkey_st*, %struct.cbs_st*, %struct.cbs_st*) #0 {
  %4 = alloca %struct.cbs_st, align 8
  %5 = bitcast %struct.cbs_st* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #3
  %6 = bitcast %struct.cbs_st* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false)
  %7 = call i32 @CBS_get_asn1(%struct.cbs_st* %1, %struct.cbs_st* nonnull %4, i32 5) #3
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %15, label %9

9:                                                ; preds = %3
  %10 = call i64 @CBS_len(%struct.cbs_st* nonnull %4) #3
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %12, label %15

12:                                               ; preds = %9
  %13 = call i64 @CBS_len(%struct.cbs_st* %1) #3
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %16, label %15

15:                                               ; preds = %12, %9, %3
  call void @ERR_put_error(i32 6, i32 0, i32 102, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str, i64 0, i64 0), i32 96) #3
  br label %25

16:                                               ; preds = %12
  %17 = call %struct.rsa_st* @RSA_parse_public_key(%struct.cbs_st* %2) #3
  %18 = icmp eq %struct.rsa_st* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %16
  %20 = call i64 @CBS_len(%struct.cbs_st* %2) #3
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %23, label %22

22:                                               ; preds = %19, %16
  call void @ERR_put_error(i32 6, i32 0, i32 102, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str, i64 0, i64 0), i32 102) #3
  call void @RSA_free(%struct.rsa_st* %17) #3
  br label %25

23:                                               ; preds = %19
  %24 = call i32 @EVP_PKEY_assign_RSA(%struct.evp_pkey_st* %0, %struct.rsa_st* nonnull %17) #3
  br label %25

25:                                               ; preds = %22, %23, %15
  %26 = phi i32 [ 0, %15 ], [ 0, %22 ], [ 1, %23 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #3
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @rsa_pub_encode(%struct.cbb_st*, %struct.evp_pkey_st* nocapture readonly) #0 {
  %3 = alloca %struct.cbb_st, align 8
  %4 = alloca %struct.cbb_st, align 8
  %5 = alloca %struct.cbb_st, align 8
  %6 = alloca %struct.cbb_st, align 8
  %7 = alloca %struct.cbb_st, align 8
  %8 = bitcast %struct.cbb_st* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %8) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 32, i1 false)
  %9 = bitcast %struct.cbb_st* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 32, i1 false)
  %10 = bitcast %struct.cbb_st* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %10) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 -86, i64 32, i1 false)
  %11 = bitcast %struct.cbb_st* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 32, i1 false)
  %12 = bitcast %struct.cbb_st* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %12) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 32, i1 false)
  %13 = call i32 @CBB_add_asn1(%struct.cbb_st* %0, %struct.cbb_st* nonnull %3, i32 536870928) #3
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %42, label %15

15:                                               ; preds = %2
  %16 = call i32 @CBB_add_asn1(%struct.cbb_st* nonnull %3, %struct.cbb_st* nonnull %4, i32 536870928) #3
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %42, label %18

18:                                               ; preds = %15
  %19 = call i32 @CBB_add_asn1(%struct.cbb_st* nonnull %4, %struct.cbb_st* nonnull %5, i32 6) #3
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %42, label %21

21:                                               ; preds = %18
  %22 = call i32 @CBB_add_bytes(%struct.cbb_st* nonnull %5, i8* getelementptr inbounds ({ i32, [9 x i8], i8, i32 (%struct.evp_pkey_st*, %struct.cbs_st*, %struct.cbs_st*)*, i32 (%struct.cbb_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.cbs_st*, %struct.cbs_st*)*, i32 (%struct.cbb_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, i8*, i64)*, i32 (%struct.evp_pkey_st*, i8*, i64)*, i32 (%struct.evp_pkey_st*, i8*, i64*)*, i32 (%struct.evp_pkey_st*, i8*, i64*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.evp_pkey_st*)*, void (%struct.evp_pkey_st*)* }, { i32, [9 x i8], i8, i32 (%struct.evp_pkey_st*, %struct.cbs_st*, %struct.cbs_st*)*, i32 (%struct.cbb_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.cbs_st*, %struct.cbs_st*)*, i32 (%struct.cbb_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, i8*, i64)*, i32 (%struct.evp_pkey_st*, i8*, i64)*, i32 (%struct.evp_pkey_st*, i8*, i64*)*, i32 (%struct.evp_pkey_st*, i8*, i64*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.evp_pkey_st*)*, void (%struct.evp_pkey_st*)* }* @rsa_asn1_meth, i64 0, i32 1, i64 0), i64 9) #3
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %42, label %24

24:                                               ; preds = %21
  %25 = call i32 @CBB_add_asn1(%struct.cbb_st* nonnull %4, %struct.cbb_st* nonnull %6, i32 5) #3
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %42, label %27

27:                                               ; preds = %24
  %28 = call i32 @CBB_add_asn1(%struct.cbb_st* nonnull %3, %struct.cbb_st* nonnull %7, i32 3) #3
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %42, label %30

30:                                               ; preds = %27
  %31 = call i32 @CBB_add_u8(%struct.cbb_st* nonnull %7, i8 zeroext 0) #3
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %42, label %33

33:                                               ; preds = %30
  %34 = getelementptr inbounds %struct.evp_pkey_st, %struct.evp_pkey_st* %1, i64 0, i32 2
  %35 = bitcast %union.anon* %34 to %struct.rsa_st**
  %36 = load %struct.rsa_st*, %struct.rsa_st** %35, align 8
  %37 = call i32 @RSA_marshal_public_key(%struct.cbb_st* nonnull %7, %struct.rsa_st* %36) #3
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %42, label %39

39:                                               ; preds = %33
  %40 = call i32 @CBB_flush(%struct.cbb_st* %0) #3
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %43

42:                                               ; preds = %39, %33, %30, %27, %24, %21, %18, %15, %2
  call void @ERR_put_error(i32 6, i32 0, i32 105, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str, i64 0, i64 0), i32 81) #3
  br label %43

43:                                               ; preds = %39, %42
  %44 = phi i32 [ 0, %42 ], [ 1, %39 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %12) #3
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #3
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %10) #3
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #3
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %8) #3
  ret i32 %44
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @rsa_pub_cmp(%struct.evp_pkey_st* nocapture readonly, %struct.evp_pkey_st* nocapture readonly) #0 {
  %3 = getelementptr inbounds %struct.evp_pkey_st, %struct.evp_pkey_st* %1, i64 0, i32 2
  %4 = bitcast %union.anon* %3 to %struct.rsa_st**
  %5 = load %struct.rsa_st*, %struct.rsa_st** %4, align 8
  %6 = getelementptr inbounds %struct.rsa_st, %struct.rsa_st* %5, i64 0, i32 1
  %7 = load %struct.bignum_st*, %struct.bignum_st** %6, align 8
  %8 = getelementptr inbounds %struct.evp_pkey_st, %struct.evp_pkey_st* %0, i64 0, i32 2
  %9 = bitcast %union.anon* %8 to %struct.rsa_st**
  %10 = load %struct.rsa_st*, %struct.rsa_st** %9, align 8
  %11 = getelementptr inbounds %struct.rsa_st, %struct.rsa_st* %10, i64 0, i32 1
  %12 = load %struct.bignum_st*, %struct.bignum_st** %11, align 8
  %13 = tail call i32 @BN_cmp(%struct.bignum_st* %7, %struct.bignum_st* %12) #3
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %25

15:                                               ; preds = %2
  %16 = load %struct.rsa_st*, %struct.rsa_st** %4, align 8
  %17 = getelementptr inbounds %struct.rsa_st, %struct.rsa_st* %16, i64 0, i32 2
  %18 = load %struct.bignum_st*, %struct.bignum_st** %17, align 8
  %19 = load %struct.rsa_st*, %struct.rsa_st** %9, align 8
  %20 = getelementptr inbounds %struct.rsa_st, %struct.rsa_st* %19, i64 0, i32 2
  %21 = load %struct.bignum_st*, %struct.bignum_st** %20, align 8
  %22 = tail call i32 @BN_cmp(%struct.bignum_st* %18, %struct.bignum_st* %21) #3
  %23 = icmp eq i32 %22, 0
  %24 = zext i1 %23 to i32
  br label %25

25:                                               ; preds = %15, %2
  %26 = phi i32 [ 0, %2 ], [ %24, %15 ]
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @rsa_priv_decode(%struct.evp_pkey_st*, %struct.cbs_st*, %struct.cbs_st*) #0 {
  %4 = alloca %struct.cbs_st, align 8
  %5 = bitcast %struct.cbs_st* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #3
  %6 = bitcast %struct.cbs_st* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false)
  %7 = call i32 @CBS_get_asn1(%struct.cbs_st* %1, %struct.cbs_st* nonnull %4, i32 5) #3
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %15, label %9

9:                                                ; preds = %3
  %10 = call i64 @CBS_len(%struct.cbs_st* nonnull %4) #3
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %12, label %15

12:                                               ; preds = %9
  %13 = call i64 @CBS_len(%struct.cbs_st* %1) #3
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %16, label %15

15:                                               ; preds = %12, %9, %3
  call void @ERR_put_error(i32 6, i32 0, i32 102, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str, i64 0, i64 0), i32 140) #3
  br label %25

16:                                               ; preds = %12
  %17 = call %struct.rsa_st* @RSA_parse_private_key(%struct.cbs_st* %2) #3
  %18 = icmp eq %struct.rsa_st* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %16
  %20 = call i64 @CBS_len(%struct.cbs_st* %2) #3
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %23, label %22

22:                                               ; preds = %19, %16
  call void @ERR_put_error(i32 6, i32 0, i32 102, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str, i64 0, i64 0), i32 146) #3
  call void @RSA_free(%struct.rsa_st* %17) #3
  br label %25

23:                                               ; preds = %19
  %24 = call i32 @EVP_PKEY_assign_RSA(%struct.evp_pkey_st* %0, %struct.rsa_st* nonnull %17) #3
  br label %25

25:                                               ; preds = %22, %23, %15
  %26 = phi i32 [ 0, %15 ], [ 0, %22 ], [ 1, %23 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #3
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @rsa_priv_encode(%struct.cbb_st*, %struct.evp_pkey_st* nocapture readonly) #0 {
  %3 = alloca %struct.cbb_st, align 8
  %4 = alloca %struct.cbb_st, align 8
  %5 = alloca %struct.cbb_st, align 8
  %6 = alloca %struct.cbb_st, align 8
  %7 = alloca %struct.cbb_st, align 8
  %8 = bitcast %struct.cbb_st* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %8) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 32, i1 false)
  %9 = bitcast %struct.cbb_st* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 32, i1 false)
  %10 = bitcast %struct.cbb_st* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %10) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 -86, i64 32, i1 false)
  %11 = bitcast %struct.cbb_st* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 32, i1 false)
  %12 = bitcast %struct.cbb_st* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %12) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 32, i1 false)
  %13 = call i32 @CBB_add_asn1(%struct.cbb_st* %0, %struct.cbb_st* nonnull %3, i32 536870928) #3
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %42, label %15

15:                                               ; preds = %2
  %16 = call i32 @CBB_add_asn1_uint64(%struct.cbb_st* nonnull %3, i64 0) #3
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %42, label %18

18:                                               ; preds = %15
  %19 = call i32 @CBB_add_asn1(%struct.cbb_st* nonnull %3, %struct.cbb_st* nonnull %4, i32 536870928) #3
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %42, label %21

21:                                               ; preds = %18
  %22 = call i32 @CBB_add_asn1(%struct.cbb_st* nonnull %4, %struct.cbb_st* nonnull %5, i32 6) #3
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %42, label %24

24:                                               ; preds = %21
  %25 = call i32 @CBB_add_bytes(%struct.cbb_st* nonnull %5, i8* getelementptr inbounds ({ i32, [9 x i8], i8, i32 (%struct.evp_pkey_st*, %struct.cbs_st*, %struct.cbs_st*)*, i32 (%struct.cbb_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.cbs_st*, %struct.cbs_st*)*, i32 (%struct.cbb_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, i8*, i64)*, i32 (%struct.evp_pkey_st*, i8*, i64)*, i32 (%struct.evp_pkey_st*, i8*, i64*)*, i32 (%struct.evp_pkey_st*, i8*, i64*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.evp_pkey_st*)*, void (%struct.evp_pkey_st*)* }, { i32, [9 x i8], i8, i32 (%struct.evp_pkey_st*, %struct.cbs_st*, %struct.cbs_st*)*, i32 (%struct.cbb_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.cbs_st*, %struct.cbs_st*)*, i32 (%struct.cbb_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, i8*, i64)*, i32 (%struct.evp_pkey_st*, i8*, i64)*, i32 (%struct.evp_pkey_st*, i8*, i64*)*, i32 (%struct.evp_pkey_st*, i8*, i64*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.evp_pkey_st*)*, void (%struct.evp_pkey_st*)* }* @rsa_asn1_meth, i64 0, i32 1, i64 0), i64 9) #3
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %42, label %27

27:                                               ; preds = %24
  %28 = call i32 @CBB_add_asn1(%struct.cbb_st* nonnull %4, %struct.cbb_st* nonnull %6, i32 5) #3
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %42, label %30

30:                                               ; preds = %27
  %31 = call i32 @CBB_add_asn1(%struct.cbb_st* nonnull %3, %struct.cbb_st* nonnull %7, i32 4) #3
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %42, label %33

33:                                               ; preds = %30
  %34 = getelementptr inbounds %struct.evp_pkey_st, %struct.evp_pkey_st* %1, i64 0, i32 2
  %35 = bitcast %union.anon* %34 to %struct.rsa_st**
  %36 = load %struct.rsa_st*, %struct.rsa_st** %35, align 8
  %37 = call i32 @RSA_marshal_private_key(%struct.cbb_st* nonnull %7, %struct.rsa_st* %36) #3
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %42, label %39

39:                                               ; preds = %33
  %40 = call i32 @CBB_flush(%struct.cbb_st* %0) #3
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %43

42:                                               ; preds = %39, %33, %30, %27, %24, %21, %18, %15, %2
  call void @ERR_put_error(i32 6, i32 0, i32 105, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str, i64 0, i64 0), i32 127) #3
  br label %43

43:                                               ; preds = %39, %42
  %44 = phi i32 [ 0, %42 ], [ 1, %39 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %12) #3
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #3
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %10) #3
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #3
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %8) #3
  ret i32 %44
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @rsa_opaque(%struct.evp_pkey_st* nocapture readonly) #0 {
  %2 = getelementptr inbounds %struct.evp_pkey_st, %struct.evp_pkey_st* %0, i64 0, i32 2
  %3 = bitcast %union.anon* %2 to %struct.rsa_st**
  %4 = load %struct.rsa_st*, %struct.rsa_st** %3, align 8
  %5 = tail call i32 @RSA_is_opaque(%struct.rsa_st* %4) #3
  ret i32 %5
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @int_rsa_size(%struct.evp_pkey_st* nocapture readonly) #0 {
  %2 = getelementptr inbounds %struct.evp_pkey_st, %struct.evp_pkey_st* %0, i64 0, i32 2
  %3 = bitcast %union.anon* %2 to %struct.rsa_st**
  %4 = load %struct.rsa_st*, %struct.rsa_st** %3, align 8
  %5 = tail call i32 @RSA_size(%struct.rsa_st* %4) #3
  ret i32 %5
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @rsa_bits(%struct.evp_pkey_st* nocapture readonly) #0 {
  %2 = getelementptr inbounds %struct.evp_pkey_st, %struct.evp_pkey_st* %0, i64 0, i32 2
  %3 = bitcast %union.anon* %2 to %struct.rsa_st**
  %4 = load %struct.rsa_st*, %struct.rsa_st** %3, align 8
  %5 = tail call i32 @RSA_bits(%struct.rsa_st* %4) #3
  ret i32 %5
}

; Function Attrs: nounwind ssp uwtable
define internal void @int_rsa_free(%struct.evp_pkey_st* nocapture readonly) #0 {
  %2 = getelementptr inbounds %struct.evp_pkey_st, %struct.evp_pkey_st* %0, i64 0, i32 2
  %3 = bitcast %union.anon* %2 to %struct.rsa_st**
  %4 = load %struct.rsa_st*, %struct.rsa_st** %3, align 8
  tail call void @RSA_free(%struct.rsa_st* %4) #3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @CBS_get_asn1(%struct.cbs_st*, %struct.cbs_st*, i32) local_unnamed_addr #2

declare i64 @CBS_len(%struct.cbs_st*) local_unnamed_addr #2

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #2

declare %struct.rsa_st* @RSA_parse_public_key(%struct.cbs_st*) local_unnamed_addr #2

declare void @RSA_free(%struct.rsa_st*) local_unnamed_addr #2

declare i32 @EVP_PKEY_assign_RSA(%struct.evp_pkey_st*, %struct.rsa_st*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @CBB_add_asn1(%struct.cbb_st*, %struct.cbb_st*, i32) local_unnamed_addr #2

declare i32 @CBB_add_bytes(%struct.cbb_st*, i8*, i64) local_unnamed_addr #2

declare i32 @CBB_add_u8(%struct.cbb_st*, i8 zeroext) local_unnamed_addr #2

declare i32 @RSA_marshal_public_key(%struct.cbb_st*, %struct.rsa_st*) local_unnamed_addr #2

declare i32 @CBB_flush(%struct.cbb_st*) local_unnamed_addr #2

declare i32 @BN_cmp(%struct.bignum_st*, %struct.bignum_st*) local_unnamed_addr #2

declare %struct.rsa_st* @RSA_parse_private_key(%struct.cbs_st*) local_unnamed_addr #2

declare i32 @CBB_add_asn1_uint64(%struct.cbb_st*, i64) local_unnamed_addr #2

declare i32 @RSA_marshal_private_key(%struct.cbb_st*, %struct.rsa_st*) local_unnamed_addr #2

declare i32 @RSA_is_opaque(%struct.rsa_st*) local_unnamed_addr #2

declare i32 @RSA_size(%struct.rsa_st*) local_unnamed_addr #2

declare i32 @RSA_bits(%struct.rsa_st*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
