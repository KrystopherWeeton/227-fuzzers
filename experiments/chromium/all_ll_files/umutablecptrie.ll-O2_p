; ModuleID = '../../third_party/icu/source/common/umutablecptrie.cpp'
source_filename = "../../third_party/icu/source/common/umutablecptrie.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.UMutableCPTrie = type opaque
%"class.icu_69::(anonymous namespace)::MutableCodePointTrie" = type { i32*, i32, i32, i32*, i32, i32, i32, i32, i32, i32, i32, i32, i16*, [69632 x i8] }
%struct.UCPMap = type opaque
%struct.UCPTrie = type { i16*, %union.UCPTrieData, i32, i32, i32, i16, i8, i8, i32, i16, i16, i32, i32 }
%union.UCPTrieData = type { i8* }
%"class.icu_69::(anonymous namespace)::MixedBlocks" = type <{ i32*, i32, i32, i32, i32, i32, [4 x i8] }>
%"class.icu_69::(anonymous namespace)::AllSameBlocks" = type { i32, i32, [32 x i32], [32 x i32], [32 x i32] }

; Function Attrs: nounwind ssp uwtable
define hidden %struct.UMutableCPTrie* @umutablecptrie_open_69(i32, i32, i32* nocapture) local_unnamed_addr #0 {
  %4 = load i32, i32* %2, align 4
  %5 = icmp slt i32 %4, 1
  br i1 %5, label %6, label %68

6:                                                ; preds = %3
  %7 = tail call i8* @_ZN6icu_697UMemorynwEm(i64 69696) #7
  %8 = icmp eq i8* %7, null
  br i1 %8, label %46, label %9

9:                                                ; preds = %6
  %10 = bitcast i8* %7 to %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"*
  %11 = bitcast i8* %7 to i32**
  store i32* null, i32** %11, align 8
  %12 = getelementptr inbounds i8, i8* %7, i64 8
  %13 = bitcast i8* %12 to i32*
  store i32 0, i32* %13, align 8
  %14 = getelementptr inbounds i8, i8* %7, i64 12
  %15 = bitcast i8* %14 to i32*
  store i32 -1, i32* %15, align 4
  %16 = getelementptr inbounds i8, i8* %7, i64 16
  %17 = getelementptr inbounds i8, i8* %7, i64 24
  %18 = bitcast i8* %17 to i32*
  %19 = getelementptr inbounds i8, i8* %7, i64 32
  %20 = bitcast i8* %19 to i32*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 16, i1 false) #7
  store i32 -1, i32* %20, align 8
  %21 = getelementptr inbounds i8, i8* %7, i64 36
  %22 = bitcast i8* %21 to i32*
  store i32 %0, i32* %22, align 4
  %23 = getelementptr inbounds i8, i8* %7, i64 40
  %24 = bitcast i8* %23 to i32*
  store i32 %0, i32* %24, align 8
  %25 = getelementptr inbounds i8, i8* %7, i64 44
  %26 = bitcast i8* %25 to i32*
  store i32 %1, i32* %26, align 4
  %27 = getelementptr inbounds i8, i8* %7, i64 48
  %28 = bitcast i8* %27 to i32*
  store i32 0, i32* %28, align 8
  %29 = getelementptr inbounds i8, i8* %7, i64 52
  %30 = bitcast i8* %29 to i32*
  store i32 %0, i32* %30, align 4
  %31 = getelementptr inbounds i8, i8* %7, i64 56
  %32 = bitcast i8* %31 to i16**
  store i16* null, i16** %32, align 8
  %33 = load i32, i32* %2, align 4
  %34 = icmp slt i32 %33, 1
  br i1 %34, label %35, label %46

35:                                               ; preds = %9
  %36 = tail call noalias i8* @uprv_malloc_69(i64 16384) #8
  %37 = bitcast i8* %7 to i8**
  store i8* %36, i8** %37, align 8
  %38 = tail call noalias i8* @uprv_malloc_69(i64 65536) #8
  %39 = bitcast i8* %16 to i8**
  store i8* %38, i8** %39, align 8
  %40 = load i32*, i32** %11, align 8
  %41 = icmp eq i32* %40, null
  %42 = icmp eq i8* %38, null
  %43 = or i1 %42, %41
  br i1 %43, label %44, label %45

44:                                               ; preds = %35
  store i32 7, i32* %2, align 4
  br label %46

45:                                               ; preds = %35
  store i32 4096, i32* %13, align 8
  store i32 16384, i32* %18, align 8
  br label %46

46:                                               ; preds = %45, %44, %9, %6
  %47 = phi %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* [ null, %6 ], [ %10, %9 ], [ %10, %44 ], [ %10, %45 ]
  %48 = icmp ne %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %47, null
  %49 = load i32, i32* %2, align 4
  %50 = icmp sgt i32 %49, 0
  %51 = or i1 %48, %50
  br i1 %51, label %53, label %52

52:                                               ; preds = %46
  store i32 7, i32* %2, align 4
  br label %68

53:                                               ; preds = %46
  %54 = icmp slt i32 %49, 1
  br i1 %54, label %55, label %57

55:                                               ; preds = %53
  %56 = bitcast %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %47 to %struct.UMutableCPTrie*
  br label %68

57:                                               ; preds = %53
  %58 = icmp eq %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %47, null
  br i1 %58, label %68, label %59

59:                                               ; preds = %57
  %60 = bitcast %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %47 to i8**
  %61 = load i8*, i8** %60, align 8
  tail call void @uprv_free_69(i8* %61) #7
  %62 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %47, i64 0, i32 3
  %63 = bitcast i32** %62 to i8**
  %64 = load i8*, i8** %63, align 8
  tail call void @uprv_free_69(i8* %64) #7
  %65 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %47, i64 0, i32 12
  %66 = bitcast i16** %65 to i8**
  %67 = load i8*, i8** %66, align 8
  tail call void @uprv_free_69(i8* %67) #7
  tail call void @_ZN6icu_697UMemorydlEPv(i8* nonnull %7) #7
  br label %68

68:                                               ; preds = %52, %59, %57, %55, %3
  %69 = phi %struct.UMutableCPTrie* [ null, %3 ], [ %56, %55 ], [ null, %57 ], [ null, %59 ], [ null, %52 ]
  ret %struct.UMutableCPTrie* %69
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind
declare i8* @_ZN6icu_697UMemorynwEm(i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden %struct.UMutableCPTrie* @umutablecptrie_clone_69(%struct.UMutableCPTrie* readonly, i32* nocapture) local_unnamed_addr #0 {
  %3 = load i32, i32* %1, align 4
  %4 = icmp sgt i32 %3, 0
  %5 = icmp eq %struct.UMutableCPTrie* %0, null
  %6 = or i1 %5, %4
  br i1 %6, label %114, label %7

7:                                                ; preds = %2
  %8 = tail call i8* @_ZN6icu_697UMemorynwEm(i64 69696) #7
  %9 = icmp eq i8* %8, null
  br i1 %9, label %92, label %10

10:                                               ; preds = %7
  %11 = bitcast i8* %8 to %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"*
  %12 = bitcast %struct.UMutableCPTrie* %0 to %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"*
  %13 = bitcast i8* %8 to i32**
  store i32* null, i32** %13, align 8
  %14 = getelementptr inbounds i8, i8* %8, i64 8
  %15 = bitcast i8* %14 to i32*
  store i32 0, i32* %15, align 8
  %16 = getelementptr inbounds i8, i8* %8, i64 12
  %17 = bitcast i8* %16 to i32*
  %18 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %12, i64 0, i32 2
  %19 = load i32, i32* %18, align 4
  store i32 %19, i32* %17, align 4
  %20 = getelementptr inbounds i8, i8* %8, i64 16
  %21 = getelementptr inbounds i8, i8* %8, i64 24
  %22 = bitcast i8* %21 to i32*
  %23 = getelementptr inbounds i8, i8* %8, i64 28
  %24 = bitcast i8* %23 to i32*
  %25 = getelementptr inbounds i8, i8* %8, i64 32
  %26 = bitcast i8* %25 to i32*
  %27 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %12, i64 0, i32 6
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 16, i1 false) #7
  %28 = load i32, i32* %27, align 8
  store i32 %28, i32* %26, align 8
  %29 = getelementptr inbounds i8, i8* %8, i64 36
  %30 = bitcast i8* %29 to i32*
  %31 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %12, i64 0, i32 7
  %32 = load i32, i32* %31, align 4
  store i32 %32, i32* %30, align 4
  %33 = getelementptr inbounds i8, i8* %8, i64 40
  %34 = bitcast i8* %33 to i32*
  %35 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %12, i64 0, i32 8
  %36 = load i32, i32* %35, align 8
  store i32 %36, i32* %34, align 8
  %37 = getelementptr inbounds i8, i8* %8, i64 44
  %38 = bitcast i8* %37 to i32*
  %39 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %12, i64 0, i32 9
  %40 = load i32, i32* %39, align 4
  store i32 %40, i32* %38, align 4
  %41 = getelementptr inbounds i8, i8* %8, i64 48
  %42 = bitcast i8* %41 to i32*
  %43 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %12, i64 0, i32 10
  %44 = load i32, i32* %43, align 8
  store i32 %44, i32* %42, align 8
  %45 = getelementptr inbounds i8, i8* %8, i64 52
  %46 = bitcast i8* %45 to i32*
  %47 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %12, i64 0, i32 11
  %48 = load i32, i32* %47, align 4
  store i32 %48, i32* %46, align 4
  %49 = getelementptr inbounds i8, i8* %8, i64 56
  %50 = bitcast i8* %49 to i16**
  store i16* null, i16** %50, align 8
  %51 = load i32, i32* %1, align 4
  %52 = icmp slt i32 %51, 1
  br i1 %52, label %53, label %92

53:                                               ; preds = %10
  %54 = icmp slt i32 %44, 65537
  %55 = select i1 %54, i32 4096, i32 69632
  %56 = shl nuw nsw i32 %55, 2
  %57 = zext i32 %56 to i64
  %58 = tail call noalias i8* @uprv_malloc_69(i64 %57) #8
  %59 = bitcast i8* %8 to i8**
  store i8* %58, i8** %59, align 8
  %60 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %12, i64 0, i32 4
  %61 = load i32, i32* %60, align 8
  %62 = shl nsw i32 %61, 2
  %63 = sext i32 %62 to i64
  %64 = tail call noalias i8* @uprv_malloc_69(i64 %63) #8
  %65 = bitcast i8* %20 to i8**
  store i8* %64, i8** %65, align 8
  %66 = load i32*, i32** %13, align 8
  %67 = icmp eq i32* %66, null
  %68 = icmp eq i8* %64, null
  %69 = or i1 %68, %67
  br i1 %69, label %70, label %71

70:                                               ; preds = %53
  store i32 7, i32* %1, align 4
  br label %92

71:                                               ; preds = %53
  %72 = bitcast i32* %66 to i8*
  store i32 %55, i32* %15, align 8
  %73 = load i32, i32* %60, align 8
  store i32 %73, i32* %22, align 8
  %74 = load i32, i32* %42, align 8
  %75 = ashr i32 %74, 4
  %76 = getelementptr inbounds i8, i8* %8, i64 64
  %77 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %12, i64 0, i32 13, i64 0
  %78 = sext i32 %75 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %76, i8* align 8 %77, i64 %78, i1 false) #7
  %79 = bitcast %struct.UMutableCPTrie* %0 to i8**
  %80 = load i8*, i8** %79, align 8
  %81 = shl nsw i32 %75, 2
  %82 = sext i32 %81 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %72, i8* align 4 %80, i64 %82, i1 false) #7
  %83 = load i8*, i8** %65, align 8
  %84 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %12, i64 0, i32 3
  %85 = bitcast i32** %84 to i8**
  %86 = load i8*, i8** %85, align 8
  %87 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %12, i64 0, i32 5
  %88 = load i32, i32* %87, align 4
  %89 = sext i32 %88 to i64
  %90 = shl nsw i64 %89, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %83, i8* align 4 %86, i64 %90, i1 false) #7
  %91 = load i32, i32* %87, align 4
  store i32 %91, i32* %24, align 4
  br label %92

92:                                               ; preds = %71, %70, %10, %7
  %93 = phi %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* [ null, %7 ], [ %11, %10 ], [ %11, %70 ], [ %11, %71 ]
  %94 = icmp ne %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %93, null
  %95 = load i32, i32* %1, align 4
  %96 = icmp sgt i32 %95, 0
  %97 = or i1 %94, %96
  br i1 %97, label %99, label %98

98:                                               ; preds = %92
  store i32 7, i32* %1, align 4
  br label %114

99:                                               ; preds = %92
  %100 = icmp slt i32 %95, 1
  br i1 %100, label %101, label %103

101:                                              ; preds = %99
  %102 = bitcast %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %93 to %struct.UMutableCPTrie*
  br label %114

103:                                              ; preds = %99
  %104 = icmp eq %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %93, null
  br i1 %104, label %114, label %105

105:                                              ; preds = %103
  %106 = bitcast %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %93 to i8**
  %107 = load i8*, i8** %106, align 8
  tail call void @uprv_free_69(i8* %107) #7
  %108 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %93, i64 0, i32 3
  %109 = bitcast i32** %108 to i8**
  %110 = load i8*, i8** %109, align 8
  tail call void @uprv_free_69(i8* %110) #7
  %111 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %93, i64 0, i32 12
  %112 = bitcast i16** %111 to i8**
  %113 = load i8*, i8** %112, align 8
  tail call void @uprv_free_69(i8* %113) #7
  tail call void @_ZN6icu_697UMemorydlEPv(i8* nonnull %8) #7
  br label %114

114:                                              ; preds = %98, %105, %103, %101, %2
  %115 = phi %struct.UMutableCPTrie* [ null, %2 ], [ %102, %101 ], [ null, %103 ], [ null, %105 ], [ null, %98 ]
  ret %struct.UMutableCPTrie* %115
}

; Function Attrs: nounwind ssp uwtable
define hidden void @umutablecptrie_close_69(%struct.UMutableCPTrie*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.UMutableCPTrie* %0, null
  br i1 %2, label %14, label %3

3:                                                ; preds = %1
  %4 = bitcast %struct.UMutableCPTrie* %0 to %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"*
  %5 = bitcast %struct.UMutableCPTrie* %0 to i8**
  %6 = load i8*, i8** %5, align 8
  tail call void @uprv_free_69(i8* %6) #7
  %7 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %4, i64 0, i32 3
  %8 = bitcast i32** %7 to i8**
  %9 = load i8*, i8** %8, align 8
  tail call void @uprv_free_69(i8* %9) #7
  %10 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %4, i64 0, i32 12
  %11 = bitcast i16** %10 to i8**
  %12 = load i8*, i8** %11, align 8
  tail call void @uprv_free_69(i8* %12) #7
  %13 = bitcast %struct.UMutableCPTrie* %0 to i8*
  tail call void @_ZN6icu_697UMemorydlEPv(i8* nonnull %13) #7
  br label %14

14:                                               ; preds = %3, %1
  ret void
}

; Function Attrs: nounwind
declare void @_ZN6icu_697UMemorydlEPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %struct.UMutableCPTrie* @umutablecptrie_fromUCPMap_69(%struct.UCPMap*, i32* nocapture) local_unnamed_addr #0 {
  %3 = alloca i32, align 4
  %4 = load i32, i32* %1, align 4
  %5 = icmp slt i32 %4, 1
  br i1 %5, label %6, label %147

6:                                                ; preds = %2
  %7 = icmp eq %struct.UCPMap* %0, null
  br i1 %7, label %8, label %9

8:                                                ; preds = %6
  store i32 1, i32* %1, align 4
  br label %147

9:                                                ; preds = %6
  %10 = tail call i32 @ucpmap_get_69(%struct.UCPMap* nonnull %0, i32 -1) #7
  %11 = tail call i32 @ucpmap_get_69(%struct.UCPMap* nonnull %0, i32 1114111) #7
  %12 = tail call i8* @_ZN6icu_697UMemorynwEm(i64 69696) #7
  %13 = icmp eq i8* %12, null
  br i1 %13, label %51, label %14

14:                                               ; preds = %9
  %15 = bitcast i8* %12 to %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"*
  %16 = bitcast i8* %12 to i32**
  store i32* null, i32** %16, align 8
  %17 = getelementptr inbounds i8, i8* %12, i64 8
  %18 = bitcast i8* %17 to i32*
  store i32 0, i32* %18, align 8
  %19 = getelementptr inbounds i8, i8* %12, i64 12
  %20 = bitcast i8* %19 to i32*
  store i32 -1, i32* %20, align 4
  %21 = getelementptr inbounds i8, i8* %12, i64 16
  %22 = getelementptr inbounds i8, i8* %12, i64 24
  %23 = bitcast i8* %22 to i32*
  %24 = getelementptr inbounds i8, i8* %12, i64 32
  %25 = bitcast i8* %24 to i32*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %21, i8 0, i64 16, i1 false) #7
  store i32 -1, i32* %25, align 8
  %26 = getelementptr inbounds i8, i8* %12, i64 36
  %27 = bitcast i8* %26 to i32*
  store i32 %11, i32* %27, align 4
  %28 = getelementptr inbounds i8, i8* %12, i64 40
  %29 = bitcast i8* %28 to i32*
  store i32 %11, i32* %29, align 8
  %30 = getelementptr inbounds i8, i8* %12, i64 44
  %31 = bitcast i8* %30 to i32*
  store i32 %10, i32* %31, align 4
  %32 = getelementptr inbounds i8, i8* %12, i64 48
  %33 = bitcast i8* %32 to i32*
  store i32 0, i32* %33, align 8
  %34 = getelementptr inbounds i8, i8* %12, i64 52
  %35 = bitcast i8* %34 to i32*
  store i32 %11, i32* %35, align 4
  %36 = getelementptr inbounds i8, i8* %12, i64 56
  %37 = bitcast i8* %36 to i16**
  store i16* null, i16** %37, align 8
  %38 = load i32, i32* %1, align 4
  %39 = icmp slt i32 %38, 1
  br i1 %39, label %40, label %132

40:                                               ; preds = %14
  %41 = tail call noalias i8* @uprv_malloc_69(i64 16384) #8
  %42 = bitcast i8* %12 to i8**
  store i8* %41, i8** %42, align 8
  %43 = tail call noalias i8* @uprv_malloc_69(i64 65536) #8
  %44 = bitcast i8* %21 to i8**
  store i8* %43, i8** %44, align 8
  %45 = load i32*, i32** %16, align 8
  %46 = icmp eq i32* %45, null
  %47 = icmp eq i8* %43, null
  %48 = or i1 %47, %46
  br i1 %48, label %49, label %50

49:                                               ; preds = %40
  store i32 7, i32* %1, align 4
  br label %132

50:                                               ; preds = %40
  store i32 4096, i32* %18, align 8
  store i32 16384, i32* %23, align 8
  br label %51

51:                                               ; preds = %50, %9
  %52 = phi %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* [ %15, %50 ], [ null, %9 ]
  %53 = load i32, i32* %1, align 4
  %54 = icmp ne %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %52, null
  %55 = icmp sgt i32 %53, 0
  %56 = or i1 %54, %55
  br i1 %56, label %58, label %57

57:                                               ; preds = %51
  store i32 7, i32* %1, align 4
  br label %144

58:                                               ; preds = %51
  %59 = icmp slt i32 %53, 1
  br i1 %59, label %60, label %132

60:                                               ; preds = %58
  %61 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %61) #7
  store i32 -1431655766, i32* %3, align 4
  %62 = call i32 @ucpmap_getRange_69(%struct.UCPMap* nonnull %0, i32 0, i32 0, i32 0, i32 (i8*, i32)* null, i8* null, i32* nonnull %3) #7
  %63 = icmp sgt i32 %62, -1
  br i1 %63, label %64, label %129

64:                                               ; preds = %60
  %65 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %52, i64 0, i32 10
  %66 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %52, i64 0, i32 1
  %67 = bitcast %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %52 to i8**
  %68 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %52, i64 0, i32 8
  %69 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %52, i64 0, i32 0
  %70 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %52, i64 0, i32 3
  br label %71

71:                                               ; preds = %125, %64
  %72 = phi i32 [ %62, %64 ], [ %127, %125 ]
  %73 = phi i32 [ 0, %64 ], [ %126, %125 ]
  %74 = load i32, i32* %3, align 4
  %75 = icmp eq i32 %74, %11
  br i1 %75, label %125, label %76

76:                                               ; preds = %71
  %77 = icmp eq i32 %73, %72
  br i1 %77, label %78, label %124

78:                                               ; preds = %76
  %79 = load i32, i32* %1, align 4
  %80 = icmp slt i32 %79, 1
  br i1 %80, label %81, label %125

81:                                               ; preds = %78
  %82 = icmp ugt i32 %72, 1114111
  br i1 %82, label %83, label %84

83:                                               ; preds = %81
  store i32 1, i32* %1, align 4
  br label %125

84:                                               ; preds = %81
  %85 = load i32, i32* %65, align 8
  %86 = icmp sgt i32 %85, %72
  br i1 %86, label %113, label %87

87:                                               ; preds = %84
  %88 = add nuw nsw i32 %72, 512
  %89 = and i32 %88, -512
  %90 = ashr i32 %85, 4
  %91 = ashr exact i32 %89, 4
  %92 = load i32, i32* %66, align 8
  %93 = icmp sgt i32 %91, %92
  br i1 %93, label %94, label %101

94:                                               ; preds = %87
  %95 = call noalias i8* @uprv_malloc_69(i64 278528) #8
  %96 = icmp eq i8* %95, null
  br i1 %96, label %117, label %97

97:                                               ; preds = %94
  %98 = load i8*, i8** %67, align 8
  %99 = shl nsw i32 %90, 2
  %100 = sext i32 %99 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %95, i8* align 4 %98, i64 %100, i1 false) #7
  call void @uprv_free_69(i8* %98) #7
  store i8* %95, i8** %67, align 8
  store i32 69632, i32* %66, align 8
  br label %101

101:                                              ; preds = %97, %87
  %102 = sext i32 %90 to i64
  %103 = sext i32 %91 to i64
  br label %104

104:                                              ; preds = %104, %101
  %105 = phi i64 [ %110, %104 ], [ %102, %101 ]
  %106 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %52, i64 0, i32 13, i64 %105
  store i8 0, i8* %106, align 1
  %107 = load i32, i32* %68, align 8
  %108 = load i32*, i32** %69, align 8
  %109 = getelementptr inbounds i32, i32* %108, i64 %105
  store i32 %107, i32* %109, align 4
  %110 = add nsw i64 %105, 1
  %111 = icmp slt i64 %110, %103
  br i1 %111, label %104, label %112

112:                                              ; preds = %104
  store i32 %89, i32* %65, align 8
  br label %113

113:                                              ; preds = %112, %84
  %114 = lshr i32 %72, 4
  %115 = call fastcc i32 @_ZN6icu_6912_GLOBAL__N_120MutableCodePointTrie12getDataBlockEi(%"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %52, i32 %114) #7
  %116 = icmp slt i32 %115, 0
  br i1 %116, label %117, label %118

117:                                              ; preds = %113, %94
  store i32 7, i32* %1, align 4
  br label %125

118:                                              ; preds = %113
  %119 = load i32*, i32** %70, align 8
  %120 = and i32 %72, 15
  %121 = add nuw nsw i32 %115, %120
  %122 = sext i32 %121 to i64
  %123 = getelementptr inbounds i32, i32* %119, i64 %122
  store i32 %74, i32* %123, align 4
  br label %125

124:                                              ; preds = %76
  call fastcc void @_ZN6icu_6912_GLOBAL__N_120MutableCodePointTrie8setRangeEiijR10UErrorCode(%"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %52, i32 %73, i32 %72, i32 %74, i32* dereferenceable(4) %1) #7
  br label %125

125:                                              ; preds = %124, %118, %117, %83, %78, %71
  %126 = add nsw i32 %72, 1
  %127 = call i32 @ucpmap_getRange_69(%struct.UCPMap* nonnull %0, i32 %126, i32 0, i32 0, i32 (i8*, i32)* null, i8* null, i32* nonnull %3) #7
  %128 = icmp sgt i32 %127, -1
  br i1 %128, label %71, label %129

129:                                              ; preds = %125, %60
  %130 = load i32, i32* %1, align 4
  %131 = icmp sgt i32 %130, 0
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %61) #7
  br i1 %131, label %132, label %144

132:                                              ; preds = %49, %14, %129, %58
  %133 = phi %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* [ %52, %129 ], [ %52, %58 ], [ %15, %14 ], [ %15, %49 ]
  %134 = icmp eq %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %133, null
  br i1 %134, label %144, label %135

135:                                              ; preds = %132
  %136 = bitcast %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %133 to i8**
  %137 = load i8*, i8** %136, align 8
  call void @uprv_free_69(i8* %137) #7
  %138 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %133, i64 0, i32 3
  %139 = bitcast i32** %138 to i8**
  %140 = load i8*, i8** %139, align 8
  call void @uprv_free_69(i8* %140) #7
  %141 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %133, i64 0, i32 12
  %142 = bitcast i16** %141 to i8**
  %143 = load i8*, i8** %142, align 8
  call void @uprv_free_69(i8* %143) #7
  call void @_ZN6icu_697UMemorydlEPv(i8* nonnull %12) #7
  br label %144

144:                                              ; preds = %57, %129, %132, %135
  %145 = phi %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* [ null, %132 ], [ null, %135 ], [ null, %57 ], [ %52, %129 ]
  %146 = bitcast %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %145 to %struct.UMutableCPTrie*
  br label %147

147:                                              ; preds = %2, %144, %8
  %148 = phi %struct.UMutableCPTrie* [ null, %8 ], [ %146, %144 ], [ null, %2 ]
  ret %struct.UMutableCPTrie* %148
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.UMutableCPTrie* @umutablecptrie_fromUCPTrie_69(%struct.UCPTrie*, i32* nocapture) local_unnamed_addr #0 {
  %3 = alloca i32, align 4
  %4 = load i32, i32* %1, align 4
  %5 = icmp slt i32 %4, 1
  br i1 %5, label %6, label %197

6:                                                ; preds = %2
  %7 = icmp eq %struct.UCPTrie* %0, null
  br i1 %7, label %8, label %9

8:                                                ; preds = %6
  store i32 1, i32* %1, align 4
  br label %197

9:                                                ; preds = %6
  %10 = getelementptr inbounds %struct.UCPTrie, %struct.UCPTrie* %0, i64 0, i32 7
  %11 = load i8, i8* %10, align 1
  %12 = sext i8 %11 to i32
  switch i32 %12, label %58 [
    i32 0, label %13
    i32 1, label %29
    i32 2, label %43
  ]

13:                                               ; preds = %9
  %14 = getelementptr inbounds %struct.UCPTrie, %struct.UCPTrie* %0, i64 0, i32 1
  %15 = bitcast %union.UCPTrieData* %14 to i16**
  %16 = load i16*, i16** %15, align 8
  %17 = getelementptr inbounds %struct.UCPTrie, %struct.UCPTrie* %0, i64 0, i32 3
  %18 = load i32, i32* %17, align 4
  %19 = add nsw i32 %18, -1
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i16, i16* %16, i64 %20
  %22 = load i16, i16* %21, align 2
  %23 = zext i16 %22 to i32
  %24 = add nsw i32 %18, -2
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds i16, i16* %16, i64 %25
  %27 = load i16, i16* %26, align 2
  %28 = zext i16 %27 to i32
  br label %59

29:                                               ; preds = %9
  %30 = getelementptr inbounds %struct.UCPTrie, %struct.UCPTrie* %0, i64 0, i32 1
  %31 = bitcast %union.UCPTrieData* %30 to i32**
  %32 = load i32*, i32** %31, align 8
  %33 = getelementptr inbounds %struct.UCPTrie, %struct.UCPTrie* %0, i64 0, i32 3
  %34 = load i32, i32* %33, align 4
  %35 = add nsw i32 %34, -1
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %32, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = add nsw i32 %34, -2
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds i32, i32* %32, i64 %40
  %42 = load i32, i32* %41, align 4
  br label %59

43:                                               ; preds = %9
  %44 = getelementptr inbounds %struct.UCPTrie, %struct.UCPTrie* %0, i64 0, i32 1, i32 0
  %45 = load i8*, i8** %44, align 8
  %46 = getelementptr inbounds %struct.UCPTrie, %struct.UCPTrie* %0, i64 0, i32 3
  %47 = load i32, i32* %46, align 4
  %48 = add nsw i32 %47, -1
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds i8, i8* %45, i64 %49
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = add nsw i32 %47, -2
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds i8, i8* %45, i64 %54
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  br label %59

58:                                               ; preds = %9
  store i32 1, i32* %1, align 4
  br label %194

59:                                               ; preds = %43, %29, %13
  %60 = phi i32 [ %52, %43 ], [ %38, %29 ], [ %23, %13 ]
  %61 = phi i32 [ %57, %43 ], [ %42, %29 ], [ %28, %13 ]
  %62 = tail call i8* @_ZN6icu_697UMemorynwEm(i64 69696) #7
  %63 = icmp eq i8* %62, null
  br i1 %63, label %101, label %64

64:                                               ; preds = %59
  %65 = bitcast i8* %62 to %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"*
  %66 = bitcast i8* %62 to i32**
  store i32* null, i32** %66, align 8
  %67 = getelementptr inbounds i8, i8* %62, i64 8
  %68 = bitcast i8* %67 to i32*
  store i32 0, i32* %68, align 8
  %69 = getelementptr inbounds i8, i8* %62, i64 12
  %70 = bitcast i8* %69 to i32*
  store i32 -1, i32* %70, align 4
  %71 = getelementptr inbounds i8, i8* %62, i64 16
  %72 = getelementptr inbounds i8, i8* %62, i64 24
  %73 = bitcast i8* %72 to i32*
  %74 = getelementptr inbounds i8, i8* %62, i64 32
  %75 = bitcast i8* %74 to i32*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %71, i8 0, i64 16, i1 false) #7
  store i32 -1, i32* %75, align 8
  %76 = getelementptr inbounds i8, i8* %62, i64 36
  %77 = bitcast i8* %76 to i32*
  store i32 %61, i32* %77, align 4
  %78 = getelementptr inbounds i8, i8* %62, i64 40
  %79 = bitcast i8* %78 to i32*
  store i32 %61, i32* %79, align 8
  %80 = getelementptr inbounds i8, i8* %62, i64 44
  %81 = bitcast i8* %80 to i32*
  store i32 %60, i32* %81, align 4
  %82 = getelementptr inbounds i8, i8* %62, i64 48
  %83 = bitcast i8* %82 to i32*
  store i32 0, i32* %83, align 8
  %84 = getelementptr inbounds i8, i8* %62, i64 52
  %85 = bitcast i8* %84 to i32*
  store i32 %61, i32* %85, align 4
  %86 = getelementptr inbounds i8, i8* %62, i64 56
  %87 = bitcast i8* %86 to i16**
  store i16* null, i16** %87, align 8
  %88 = load i32, i32* %1, align 4
  %89 = icmp slt i32 %88, 1
  br i1 %89, label %90, label %182

90:                                               ; preds = %64
  %91 = tail call noalias i8* @uprv_malloc_69(i64 16384) #8
  %92 = bitcast i8* %62 to i8**
  store i8* %91, i8** %92, align 8
  %93 = tail call noalias i8* @uprv_malloc_69(i64 65536) #8
  %94 = bitcast i8* %71 to i8**
  store i8* %93, i8** %94, align 8
  %95 = load i32*, i32** %66, align 8
  %96 = icmp eq i32* %95, null
  %97 = icmp eq i8* %93, null
  %98 = or i1 %97, %96
  br i1 %98, label %99, label %100

99:                                               ; preds = %90
  store i32 7, i32* %1, align 4
  br label %182

100:                                              ; preds = %90
  store i32 4096, i32* %68, align 8
  store i32 16384, i32* %73, align 8
  br label %101

101:                                              ; preds = %100, %59
  %102 = phi %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* [ %65, %100 ], [ null, %59 ]
  %103 = load i32, i32* %1, align 4
  %104 = icmp ne %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %102, null
  %105 = icmp sgt i32 %103, 0
  %106 = or i1 %104, %105
  br i1 %106, label %108, label %107

107:                                              ; preds = %101
  store i32 7, i32* %1, align 4
  br label %194

108:                                              ; preds = %101
  %109 = icmp slt i32 %103, 1
  br i1 %109, label %110, label %182

110:                                              ; preds = %108
  %111 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %111) #7
  store i32 -1431655766, i32* %3, align 4
  %112 = call i32 @ucptrie_getRange_69(%struct.UCPTrie* nonnull %0, i32 0, i32 0, i32 0, i32 (i8*, i32)* null, i8* null, i32* nonnull %3) #7
  %113 = icmp sgt i32 %112, -1
  br i1 %113, label %114, label %179

114:                                              ; preds = %110
  %115 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %102, i64 0, i32 10
  %116 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %102, i64 0, i32 1
  %117 = bitcast %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %102 to i8**
  %118 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %102, i64 0, i32 8
  %119 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %102, i64 0, i32 0
  %120 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %102, i64 0, i32 3
  br label %121

121:                                              ; preds = %175, %114
  %122 = phi i32 [ %112, %114 ], [ %177, %175 ]
  %123 = phi i32 [ 0, %114 ], [ %176, %175 ]
  %124 = load i32, i32* %3, align 4
  %125 = icmp eq i32 %124, %61
  br i1 %125, label %175, label %126

126:                                              ; preds = %121
  %127 = icmp eq i32 %123, %122
  br i1 %127, label %128, label %174

128:                                              ; preds = %126
  %129 = load i32, i32* %1, align 4
  %130 = icmp slt i32 %129, 1
  br i1 %130, label %131, label %175

131:                                              ; preds = %128
  %132 = icmp ugt i32 %122, 1114111
  br i1 %132, label %133, label %134

133:                                              ; preds = %131
  store i32 1, i32* %1, align 4
  br label %175

134:                                              ; preds = %131
  %135 = load i32, i32* %115, align 8
  %136 = icmp sgt i32 %135, %122
  br i1 %136, label %163, label %137

137:                                              ; preds = %134
  %138 = add nuw nsw i32 %122, 512
  %139 = and i32 %138, -512
  %140 = ashr i32 %135, 4
  %141 = ashr exact i32 %139, 4
  %142 = load i32, i32* %116, align 8
  %143 = icmp sgt i32 %141, %142
  br i1 %143, label %144, label %151

144:                                              ; preds = %137
  %145 = call noalias i8* @uprv_malloc_69(i64 278528) #8
  %146 = icmp eq i8* %145, null
  br i1 %146, label %167, label %147

147:                                              ; preds = %144
  %148 = load i8*, i8** %117, align 8
  %149 = shl nsw i32 %140, 2
  %150 = sext i32 %149 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %145, i8* align 4 %148, i64 %150, i1 false) #7
  call void @uprv_free_69(i8* %148) #7
  store i8* %145, i8** %117, align 8
  store i32 69632, i32* %116, align 8
  br label %151

151:                                              ; preds = %147, %137
  %152 = sext i32 %140 to i64
  %153 = sext i32 %141 to i64
  br label %154

154:                                              ; preds = %154, %151
  %155 = phi i64 [ %160, %154 ], [ %152, %151 ]
  %156 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %102, i64 0, i32 13, i64 %155
  store i8 0, i8* %156, align 1
  %157 = load i32, i32* %118, align 8
  %158 = load i32*, i32** %119, align 8
  %159 = getelementptr inbounds i32, i32* %158, i64 %155
  store i32 %157, i32* %159, align 4
  %160 = add nsw i64 %155, 1
  %161 = icmp slt i64 %160, %153
  br i1 %161, label %154, label %162

162:                                              ; preds = %154
  store i32 %139, i32* %115, align 8
  br label %163

163:                                              ; preds = %162, %134
  %164 = lshr i32 %122, 4
  %165 = call fastcc i32 @_ZN6icu_6912_GLOBAL__N_120MutableCodePointTrie12getDataBlockEi(%"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %102, i32 %164) #7
  %166 = icmp slt i32 %165, 0
  br i1 %166, label %167, label %168

167:                                              ; preds = %163, %144
  store i32 7, i32* %1, align 4
  br label %175

168:                                              ; preds = %163
  %169 = load i32*, i32** %120, align 8
  %170 = and i32 %122, 15
  %171 = add nuw nsw i32 %165, %170
  %172 = sext i32 %171 to i64
  %173 = getelementptr inbounds i32, i32* %169, i64 %172
  store i32 %124, i32* %173, align 4
  br label %175

174:                                              ; preds = %126
  call fastcc void @_ZN6icu_6912_GLOBAL__N_120MutableCodePointTrie8setRangeEiijR10UErrorCode(%"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %102, i32 %123, i32 %122, i32 %124, i32* dereferenceable(4) %1) #7
  br label %175

175:                                              ; preds = %174, %168, %167, %133, %128, %121
  %176 = add nsw i32 %122, 1
  %177 = call i32 @ucptrie_getRange_69(%struct.UCPTrie* nonnull %0, i32 %176, i32 0, i32 0, i32 (i8*, i32)* null, i8* null, i32* nonnull %3) #7
  %178 = icmp sgt i32 %177, -1
  br i1 %178, label %121, label %179

179:                                              ; preds = %175, %110
  %180 = load i32, i32* %1, align 4
  %181 = icmp sgt i32 %180, 0
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %111) #7
  br i1 %181, label %182, label %194

182:                                              ; preds = %99, %64, %179, %108
  %183 = phi %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* [ %102, %179 ], [ %102, %108 ], [ %65, %64 ], [ %65, %99 ]
  %184 = icmp eq %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %183, null
  br i1 %184, label %194, label %185

185:                                              ; preds = %182
  %186 = bitcast %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %183 to i8**
  %187 = load i8*, i8** %186, align 8
  call void @uprv_free_69(i8* %187) #7
  %188 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %183, i64 0, i32 3
  %189 = bitcast i32** %188 to i8**
  %190 = load i8*, i8** %189, align 8
  call void @uprv_free_69(i8* %190) #7
  %191 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %183, i64 0, i32 12
  %192 = bitcast i16** %191 to i8**
  %193 = load i8*, i8** %192, align 8
  call void @uprv_free_69(i8* %193) #7
  call void @_ZN6icu_697UMemorydlEPv(i8* nonnull %62) #7
  br label %194

194:                                              ; preds = %58, %107, %179, %182, %185
  %195 = phi %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* [ null, %58 ], [ null, %182 ], [ null, %185 ], [ null, %107 ], [ %102, %179 ]
  %196 = bitcast %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %195 to %struct.UMutableCPTrie*
  br label %197

197:                                              ; preds = %2, %194, %8
  %198 = phi %struct.UMutableCPTrie* [ null, %8 ], [ %196, %194 ], [ null, %2 ]
  ret %struct.UMutableCPTrie* %198
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @umutablecptrie_get_69(%struct.UMutableCPTrie* nocapture readonly, i32) local_unnamed_addr #3 {
  %3 = bitcast %struct.UMutableCPTrie* %0 to %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"*
  %4 = icmp ugt i32 %1, 1114111
  br i1 %4, label %5, label %7

5:                                                ; preds = %2
  %6 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %3, i64 0, i32 9
  br label %34

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %3, i64 0, i32 10
  %9 = load i32, i32* %8, align 8
  %10 = icmp sgt i32 %9, %1
  br i1 %10, label %13, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %3, i64 0, i32 11
  br label %34

13:                                               ; preds = %7
  %14 = lshr i32 %1, 4
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %3, i64 0, i32 13, i64 %15
  %17 = load i8, i8* %16, align 1
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %19, label %23

19:                                               ; preds = %13
  %20 = bitcast %struct.UMutableCPTrie* %0 to i32**
  %21 = load i32*, i32** %20, align 8
  %22 = getelementptr inbounds i32, i32* %21, i64 %15
  br label %34

23:                                               ; preds = %13
  %24 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %3, i64 0, i32 3
  %25 = load i32*, i32** %24, align 8
  %26 = bitcast %struct.UMutableCPTrie* %0 to i32**
  %27 = load i32*, i32** %26, align 8
  %28 = getelementptr inbounds i32, i32* %27, i64 %15
  %29 = load i32, i32* %28, align 4
  %30 = and i32 %1, 15
  %31 = add i32 %29, %30
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %25, i64 %32
  br label %34

34:                                               ; preds = %5, %11, %19, %23
  %35 = phi i32* [ %6, %5 ], [ %12, %11 ], [ %22, %19 ], [ %33, %23 ]
  %36 = load i32, i32* %35, align 4
  ret i32 %36
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @umutablecptrie_getRange_69(%struct.UMutableCPTrie*, i32, i32, i32, i32 (i8*, i32)*, i8*, i32*) local_unnamed_addr #0 {
  %8 = bitcast %struct.UMutableCPTrie* %0 to i8*
  %9 = tail call i32 @ucptrie_internalGetRange_69(i32 (i8*, i32, i32 (i8*, i32)*, i8*, i32*)* nonnull @_ZN12_GLOBAL__N_18getRangeEPKviPFjS1_jES1_Pj, i8* %8, i32 %1, i32 %2, i32 %3, i32 (i8*, i32)* %4, i8* %5, i32* %6) #7
  ret i32 %9
}

declare i32 @ucptrie_internalGetRange_69(i32 (i8*, i32, i32 (i8*, i32)*, i8*, i32*)*, i8*, i32, i32, i32, i32 (i8*, i32)*, i8*, i32*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN12_GLOBAL__N_18getRangeEPKviPFjS1_jES1_Pj(i8* nocapture readonly, i32, i32 (i8*, i32)*, i8*, i32*) #0 {
  %6 = bitcast i8* %0 to %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"*
  %7 = icmp ugt i32 %1, 1114111
  br i1 %7, label %168, label %8

8:                                                ; preds = %5
  %9 = getelementptr inbounds i8, i8* %0, i64 48
  %10 = bitcast i8* %9 to i32*
  %11 = load i32, i32* %10, align 8
  %12 = icmp sgt i32 %11, %1
  br i1 %12, label %24, label %13

13:                                               ; preds = %8
  %14 = icmp eq i32* %4, null
  br i1 %14, label %168, label %15

15:                                               ; preds = %13
  %16 = getelementptr inbounds i8, i8* %0, i64 52
  %17 = bitcast i8* %16 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = icmp eq i32 (i8*, i32)* %2, null
  br i1 %19, label %22, label %20

20:                                               ; preds = %15
  %21 = tail call i32 %2(i8* %3, i32 %18) #7
  br label %22

22:                                               ; preds = %20, %15
  %23 = phi i32 [ %21, %20 ], [ %18, %15 ]
  store i32 %23, i32* %4, align 4
  br label %168

24:                                               ; preds = %8
  %25 = getelementptr inbounds i8, i8* %0, i64 40
  %26 = bitcast i8* %25 to i32*
  %27 = load i32, i32* %26, align 8
  %28 = icmp eq i32 (i8*, i32)* %2, null
  br i1 %28, label %31, label %29

29:                                               ; preds = %24
  %30 = tail call i32 %2(i8* %3, i32 %27) #7
  br label %31

31:                                               ; preds = %29, %24
  %32 = phi i32 [ %30, %29 ], [ %27, %24 ]
  %33 = bitcast i8* %0 to i32**
  %34 = getelementptr inbounds i8, i8* %0, i64 16
  %35 = bitcast i8* %34 to i32**
  %36 = icmp eq i32* %4, null
  %37 = lshr i32 %1, 4
  %38 = zext i32 %37 to i64
  br label %39

39:                                               ; preds = %145, %31
  %40 = phi i64 [ %150, %145 ], [ %38, %31 ]
  %41 = phi i32 [ %146, %145 ], [ %1, %31 ]
  %42 = phi i32 [ %147, %145 ], [ -1431655766, %31 ]
  %43 = phi i32 [ %148, %145 ], [ -1431655766, %31 ]
  %44 = phi i8 [ %149, %145 ], [ 0, %31 ]
  %45 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %6, i64 0, i32 13, i64 %40
  %46 = load i8, i8* %45, align 1
  %47 = icmp eq i8 %46, 0
  %48 = load i32*, i32** %33, align 8
  %49 = getelementptr inbounds i32, i32* %48, i64 %40
  %50 = load i32, i32* %49, align 4
  br i1 %47, label %51, label %83

51:                                               ; preds = %39
  %52 = and i8 %44, 1
  %53 = icmp eq i8 %52, 0
  br i1 %53, label %65, label %54

54:                                               ; preds = %51
  %55 = icmp eq i32 %50, %42
  br i1 %55, label %75, label %56

56:                                               ; preds = %54
  br i1 %28, label %81, label %57

57:                                               ; preds = %56
  %58 = load i32, i32* %26, align 8
  %59 = icmp eq i32 %50, %58
  br i1 %59, label %62, label %60

60:                                               ; preds = %57
  %61 = tail call i32 %2(i8* %3, i32 %50) #7
  br label %62

62:                                               ; preds = %60, %57
  %63 = phi i32 [ %61, %60 ], [ %32, %57 ]
  %64 = icmp eq i32 %63, %43
  br i1 %64, label %75, label %81

65:                                               ; preds = %51
  %66 = load i32, i32* %26, align 8
  %67 = icmp eq i32 %50, %66
  %68 = or i1 %28, %67
  %69 = select i1 %67, i32 %32, i32 %50
  br i1 %68, label %72, label %70

70:                                               ; preds = %65
  %71 = tail call i32 %2(i8* %3, i32 %50) #7
  br label %72

72:                                               ; preds = %70, %65
  %73 = phi i32 [ %71, %70 ], [ %69, %65 ]
  br i1 %36, label %75, label %74

74:                                               ; preds = %72
  store i32 %73, i32* %4, align 4
  br label %75

75:                                               ; preds = %74, %72, %62, %54
  %76 = phi i32 [ %42, %54 ], [ %50, %62 ], [ %50, %72 ], [ %50, %74 ]
  %77 = phi i32 [ %43, %54 ], [ %43, %62 ], [ %73, %72 ], [ %73, %74 ]
  %78 = phi i8 [ %44, %54 ], [ %44, %62 ], [ 1, %72 ], [ 1, %74 ]
  %79 = add nsw i32 %41, 16
  %80 = and i32 %79, -16
  br label %145

81:                                               ; preds = %62, %56
  %82 = add nsw i32 %41, -1
  br label %168

83:                                               ; preds = %39
  %84 = and i32 %41, 15
  %85 = add i32 %50, %84
  %86 = load i32*, i32** %35, align 8
  %87 = sext i32 %85 to i64
  %88 = getelementptr inbounds i32, i32* %86, i64 %87
  %89 = load i32, i32* %88, align 4
  %90 = and i8 %44, 1
  %91 = icmp eq i8 %90, 0
  br i1 %91, label %105, label %92

92:                                               ; preds = %83
  %93 = icmp eq i32 %89, %42
  br i1 %93, label %115, label %94

94:                                               ; preds = %92
  br i1 %28, label %103, label %95

95:                                               ; preds = %94
  %96 = load i32, i32* %26, align 8
  %97 = icmp eq i32 %89, %96
  br i1 %97, label %100, label %98

98:                                               ; preds = %95
  %99 = tail call i32 %2(i8* %3, i32 %89) #7
  br label %100

100:                                              ; preds = %98, %95
  %101 = phi i32 [ %99, %98 ], [ %32, %95 ]
  %102 = icmp eq i32 %101, %43
  br i1 %102, label %115, label %103

103:                                              ; preds = %100, %94
  %104 = add nsw i32 %41, -1
  br label %168

105:                                              ; preds = %83
  %106 = load i32, i32* %26, align 8
  %107 = icmp eq i32 %89, %106
  %108 = or i1 %28, %107
  %109 = select i1 %107, i32 %32, i32 %89
  br i1 %108, label %112, label %110

110:                                              ; preds = %105
  %111 = tail call i32 %2(i8* %3, i32 %89) #7
  br label %112

112:                                              ; preds = %110, %105
  %113 = phi i32 [ %111, %110 ], [ %109, %105 ]
  br i1 %36, label %115, label %114

114:                                              ; preds = %112
  store i32 %113, i32* %4, align 4
  br label %115

115:                                              ; preds = %114, %112, %100, %92
  %116 = phi i32 [ %42, %92 ], [ %89, %100 ], [ %89, %112 ], [ %89, %114 ]
  %117 = phi i32 [ %43, %92 ], [ %43, %100 ], [ %113, %112 ], [ %113, %114 ]
  %118 = phi i8 [ %44, %92 ], [ %44, %100 ], [ 1, %112 ], [ 1, %114 ]
  %119 = add nsw i32 %41, 1
  %120 = and i32 %119, 15
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %145, label %122

122:                                              ; preds = %115, %141
  %123 = phi i64 [ %128, %141 ], [ %87, %115 ]
  %124 = phi i32 [ %142, %141 ], [ %119, %115 ]
  %125 = phi i32 [ %130, %141 ], [ %116, %115 ]
  %126 = phi i32 [ %124, %141 ], [ %41, %115 ]
  %127 = load i32*, i32** %35, align 8
  %128 = add nsw i64 %123, 1
  %129 = getelementptr inbounds i32, i32* %127, i64 %128
  %130 = load i32, i32* %129, align 4
  %131 = icmp eq i32 %130, %125
  br i1 %131, label %141, label %132

132:                                              ; preds = %122
  br i1 %28, label %168, label %133

133:                                              ; preds = %132
  %134 = load i32, i32* %26, align 8
  %135 = icmp eq i32 %130, %134
  br i1 %135, label %138, label %136

136:                                              ; preds = %133
  %137 = tail call i32 %2(i8* %3, i32 %130) #7
  br label %138

138:                                              ; preds = %136, %133
  %139 = phi i32 [ %137, %136 ], [ %32, %133 ]
  %140 = icmp eq i32 %139, %117
  br i1 %140, label %141, label %168

141:                                              ; preds = %138, %122
  %142 = add nsw i32 %124, 1
  %143 = and i32 %142, 15
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %145, label %122

145:                                              ; preds = %141, %115, %75
  %146 = phi i32 [ %80, %75 ], [ %119, %115 ], [ %142, %141 ]
  %147 = phi i32 [ %76, %75 ], [ %116, %115 ], [ %130, %141 ]
  %148 = phi i32 [ %77, %75 ], [ %117, %115 ], [ %117, %141 ]
  %149 = phi i8 [ %78, %75 ], [ %118, %115 ], [ %118, %141 ]
  %150 = add nuw i64 %40, 1
  %151 = load i32, i32* %10, align 8
  %152 = icmp slt i32 %146, %151
  br i1 %152, label %39, label %153

153:                                              ; preds = %145
  %154 = getelementptr inbounds i8, i8* %0, i64 52
  %155 = bitcast i8* %154 to i32*
  %156 = load i32, i32* %155, align 4
  %157 = load i32, i32* %26, align 8
  %158 = icmp eq i32 %156, %157
  %159 = or i1 %28, %158
  %160 = select i1 %158, i32 %32, i32 %156
  br i1 %159, label %163, label %161

161:                                              ; preds = %153
  %162 = tail call i32 %2(i8* %3, i32 %156) #7
  br label %163

163:                                              ; preds = %161, %153
  %164 = phi i32 [ %162, %161 ], [ %160, %153 ]
  %165 = icmp eq i32 %164, %148
  %166 = add nsw i32 %146, -1
  %167 = select i1 %165, i32 1114111, i32 %166
  br label %168

168:                                              ; preds = %132, %138, %5, %13, %22, %81, %103, %163
  %169 = phi i32 [ %167, %163 ], [ -1, %5 ], [ 1114111, %13 ], [ 1114111, %22 ], [ %82, %81 ], [ %104, %103 ], [ %126, %138 ], [ %126, %132 ]
  ret i32 %169
}

; Function Attrs: nounwind ssp uwtable
define hidden void @umutablecptrie_set_69(%struct.UMutableCPTrie* nocapture, i32, i32, i32* nocapture) local_unnamed_addr #0 {
  %5 = load i32, i32* %3, align 4
  %6 = icmp slt i32 %5, 1
  br i1 %6, label %7, label %57

7:                                                ; preds = %4
  %8 = bitcast %struct.UMutableCPTrie* %0 to %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"*
  %9 = icmp ugt i32 %1, 1114111
  br i1 %9, label %10, label %11

10:                                               ; preds = %7
  store i32 1, i32* %3, align 4
  br label %57

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %8, i64 0, i32 10
  %13 = load i32, i32* %12, align 8
  %14 = icmp sgt i32 %13, %1
  br i1 %14, label %45, label %15

15:                                               ; preds = %11
  %16 = add nuw nsw i32 %1, 512
  %17 = and i32 %16, -512
  %18 = ashr i32 %13, 4
  %19 = ashr exact i32 %17, 4
  %20 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %8, i64 0, i32 1
  %21 = load i32, i32* %20, align 8
  %22 = icmp sgt i32 %19, %21
  br i1 %22, label %23, label %31

23:                                               ; preds = %15
  %24 = tail call noalias i8* @uprv_malloc_69(i64 278528) #8
  %25 = icmp eq i8* %24, null
  br i1 %25, label %49, label %26

26:                                               ; preds = %23
  %27 = bitcast %struct.UMutableCPTrie* %0 to i8**
  %28 = load i8*, i8** %27, align 8
  %29 = shl nsw i32 %18, 2
  %30 = sext i32 %29 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %24, i8* align 4 %28, i64 %30, i1 false) #7
  tail call void @uprv_free_69(i8* %28) #7
  store i8* %24, i8** %27, align 8
  store i32 69632, i32* %20, align 8
  br label %31

31:                                               ; preds = %26, %15
  %32 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %8, i64 0, i32 8
  %33 = bitcast %struct.UMutableCPTrie* %0 to i32**
  %34 = sext i32 %18 to i64
  %35 = sext i32 %19 to i64
  br label %36

36:                                               ; preds = %36, %31
  %37 = phi i64 [ %42, %36 ], [ %34, %31 ]
  %38 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %8, i64 0, i32 13, i64 %37
  store i8 0, i8* %38, align 1
  %39 = load i32, i32* %32, align 8
  %40 = load i32*, i32** %33, align 8
  %41 = getelementptr inbounds i32, i32* %40, i64 %37
  store i32 %39, i32* %41, align 4
  %42 = add nsw i64 %37, 1
  %43 = icmp slt i64 %42, %35
  br i1 %43, label %36, label %44

44:                                               ; preds = %36
  store i32 %17, i32* %12, align 8
  br label %45

45:                                               ; preds = %44, %11
  %46 = lshr i32 %1, 4
  %47 = tail call fastcc i32 @_ZN6icu_6912_GLOBAL__N_120MutableCodePointTrie12getDataBlockEi(%"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %8, i32 %46) #7
  %48 = icmp slt i32 %47, 0
  br i1 %48, label %49, label %50

49:                                               ; preds = %23, %45
  store i32 7, i32* %3, align 4
  br label %57

50:                                               ; preds = %45
  %51 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %8, i64 0, i32 3
  %52 = load i32*, i32** %51, align 8
  %53 = and i32 %1, 15
  %54 = add nuw nsw i32 %47, %53
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds i32, i32* %52, i64 %55
  store i32 %2, i32* %56, align 4
  br label %57

57:                                               ; preds = %50, %49, %10, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @umutablecptrie_setRange_69(%struct.UMutableCPTrie* nocapture, i32, i32, i32, i32* nocapture) local_unnamed_addr #0 {
  %6 = load i32, i32* %4, align 4
  %7 = icmp slt i32 %6, 1
  br i1 %7, label %8, label %10

8:                                                ; preds = %5
  %9 = bitcast %struct.UMutableCPTrie* %0 to %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"*
  tail call fastcc void @_ZN6icu_6912_GLOBAL__N_120MutableCodePointTrie8setRangeEiijR10UErrorCode(%"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %9, i32 %1, i32 %2, i32 %3, i32* dereferenceable(4) %4)
  br label %10

10:                                               ; preds = %5, %8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN6icu_6912_GLOBAL__N_120MutableCodePointTrie8setRangeEiijR10UErrorCode(%"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* nocapture, i32, i32, i32, i32* nocapture dereferenceable(4)) unnamed_addr #0 align 2 {
  %6 = load i32, i32* %4, align 4
  %7 = icmp slt i32 %6, 1
  br i1 %7, label %8, label %394

8:                                                ; preds = %5
  %9 = icmp ugt i32 %1, 1114111
  %10 = icmp ugt i32 %2, 1114111
  %11 = or i1 %9, %10
  %12 = icmp sgt i32 %1, %2
  %13 = or i1 %12, %11
  br i1 %13, label %14, label %15

14:                                               ; preds = %8
  store i32 1, i32* %4, align 4
  br label %394

15:                                               ; preds = %8
  %16 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %0, i64 0, i32 10
  %17 = load i32, i32* %16, align 8
  %18 = icmp sgt i32 %17, %2
  br i1 %18, label %50, label %19

19:                                               ; preds = %15
  %20 = add nuw nsw i32 %2, 512
  %21 = and i32 %20, -512
  %22 = ashr i32 %17, 4
  %23 = ashr exact i32 %21, 4
  %24 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %0, i64 0, i32 1
  %25 = load i32, i32* %24, align 8
  %26 = icmp sgt i32 %23, %25
  br i1 %26, label %27, label %35

27:                                               ; preds = %19
  %28 = tail call noalias i8* @uprv_malloc_69(i64 278528) #8
  %29 = icmp eq i8* %28, null
  br i1 %29, label %49, label %30

30:                                               ; preds = %27
  %31 = bitcast %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %0 to i8**
  %32 = load i8*, i8** %31, align 8
  %33 = shl nsw i32 %22, 2
  %34 = sext i32 %33 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %28, i8* align 4 %32, i64 %34, i1 false) #7
  tail call void @uprv_free_69(i8* %32) #7
  store i8* %28, i8** %31, align 8
  store i32 69632, i32* %24, align 8
  br label %35

35:                                               ; preds = %30, %19
  %36 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %0, i64 0, i32 8
  %37 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %0, i64 0, i32 0
  %38 = sext i32 %22 to i64
  %39 = sext i32 %23 to i64
  br label %40

40:                                               ; preds = %40, %35
  %41 = phi i64 [ %46, %40 ], [ %38, %35 ]
  %42 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %0, i64 0, i32 13, i64 %41
  store i8 0, i8* %42, align 1
  %43 = load i32, i32* %36, align 8
  %44 = load i32*, i32** %37, align 8
  %45 = getelementptr inbounds i32, i32* %44, i64 %41
  store i32 %43, i32* %45, align 4
  %46 = add nsw i64 %41, 1
  %47 = icmp slt i64 %46, %39
  br i1 %47, label %40, label %48

48:                                               ; preds = %40
  store i32 %21, i32* %16, align 8
  br label %50

49:                                               ; preds = %27
  store i32 7, i32* %4, align 4
  br label %394

50:                                               ; preds = %48, %15
  %51 = add nsw i32 %2, 1
  %52 = and i32 %1, 15
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %241, label %54

54:                                               ; preds = %50
  %55 = ashr i32 %1, 4
  %56 = tail call fastcc i32 @_ZN6icu_6912_GLOBAL__N_120MutableCodePointTrie12getDataBlockEi(%"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %0, i32 %55)
  %57 = icmp slt i32 %56, 0
  br i1 %57, label %58, label %59

58:                                               ; preds = %54
  store i32 7, i32* %4, align 4
  br label %394

59:                                               ; preds = %54
  %60 = add nsw i32 %1, 15
  %61 = and i32 %60, -16
  %62 = icmp sgt i32 %61, %51
  %63 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %0, i64 0, i32 3
  %64 = load i32*, i32** %63, align 8
  %65 = ptrtoint i32* %64 to i64
  %66 = sext i32 %56 to i64
  %67 = getelementptr inbounds i32, i32* %64, i64 %66
  br i1 %62, label %138, label %68

68:                                               ; preds = %59
  %69 = zext i32 %52 to i64
  %70 = sub nuw nsw i64 16, %69
  %71 = icmp ugt i32 %52, 8
  br i1 %71, label %131, label %72

72:                                               ; preds = %68
  %73 = and i64 %70, 24
  %74 = add nuw nsw i64 %73, %69
  %75 = insertelement <4 x i32> undef, i32 %3, i32 0
  %76 = shufflevector <4 x i32> %75, <4 x i32> undef, <4 x i32> zeroinitializer
  %77 = insertelement <4 x i32> undef, i32 %3, i32 0
  %78 = shufflevector <4 x i32> %77, <4 x i32> undef, <4 x i32> zeroinitializer
  %79 = add nsw i64 %73, -8
  %80 = lshr exact i64 %79, 3
  %81 = add nuw nsw i64 %80, 1
  %82 = and i64 %81, 3
  %83 = icmp ult i64 %79, 24
  br i1 %83, label %115, label %84

84:                                               ; preds = %72
  %85 = sub nsw i64 %81, %82
  br label %86

86:                                               ; preds = %86, %84
  %87 = phi i64 [ 0, %84 ], [ %112, %86 ]
  %88 = phi i64 [ %85, %84 ], [ %113, %86 ]
  %89 = or i64 %87, %69
  %90 = getelementptr inbounds i32, i32* %67, i64 %89
  %91 = bitcast i32* %90 to <4 x i32>*
  store <4 x i32> %76, <4 x i32>* %91, align 4
  %92 = getelementptr inbounds i32, i32* %90, i64 4
  %93 = bitcast i32* %92 to <4 x i32>*
  store <4 x i32> %78, <4 x i32>* %93, align 4
  %94 = or i64 %87, 8
  %95 = add nuw nsw i64 %94, %69
  %96 = getelementptr inbounds i32, i32* %67, i64 %95
  %97 = bitcast i32* %96 to <4 x i32>*
  store <4 x i32> %76, <4 x i32>* %97, align 4
  %98 = getelementptr inbounds i32, i32* %96, i64 4
  %99 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %78, <4 x i32>* %99, align 4
  %100 = or i64 %87, %69
  %101 = or i64 %100, 16
  %102 = getelementptr inbounds i32, i32* %67, i64 %101
  %103 = bitcast i32* %102 to <4 x i32>*
  store <4 x i32> %76, <4 x i32>* %103, align 4
  %104 = getelementptr inbounds i32, i32* %102, i64 4
  %105 = bitcast i32* %104 to <4 x i32>*
  store <4 x i32> %78, <4 x i32>* %105, align 4
  %106 = or i64 %87, 24
  %107 = add i64 %106, %69
  %108 = getelementptr inbounds i32, i32* %67, i64 %107
  %109 = bitcast i32* %108 to <4 x i32>*
  store <4 x i32> %76, <4 x i32>* %109, align 4
  %110 = getelementptr inbounds i32, i32* %108, i64 4
  %111 = bitcast i32* %110 to <4 x i32>*
  store <4 x i32> %78, <4 x i32>* %111, align 4
  %112 = add i64 %87, 32
  %113 = add i64 %88, -4
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %115, label %86, !llvm.loop !2

115:                                              ; preds = %86, %72
  %116 = phi i64 [ 0, %72 ], [ %112, %86 ]
  %117 = icmp eq i64 %82, 0
  br i1 %117, label %129, label %118

118:                                              ; preds = %115, %118
  %119 = phi i64 [ %126, %118 ], [ %116, %115 ]
  %120 = phi i64 [ %127, %118 ], [ %82, %115 ]
  %121 = add i64 %119, %69
  %122 = getelementptr inbounds i32, i32* %67, i64 %121
  %123 = bitcast i32* %122 to <4 x i32>*
  store <4 x i32> %76, <4 x i32>* %123, align 4
  %124 = getelementptr inbounds i32, i32* %122, i64 4
  %125 = bitcast i32* %124 to <4 x i32>*
  store <4 x i32> %78, <4 x i32>* %125, align 4
  %126 = add i64 %119, 8
  %127 = add i64 %120, -1
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %129, label %118, !llvm.loop !4

129:                                              ; preds = %118, %115
  %130 = icmp eq i64 %70, %73
  br i1 %130, label %241, label %131

131:                                              ; preds = %129, %68
  %132 = phi i64 [ %69, %68 ], [ %74, %129 ]
  br label %133

133:                                              ; preds = %131, %133
  %134 = phi i64 [ %136, %133 ], [ %132, %131 ]
  %135 = getelementptr inbounds i32, i32* %67, i64 %134
  %136 = add nuw nsw i64 %134, 1
  store i32 %3, i32* %135, align 4
  %137 = icmp eq i64 %136, 16
  br i1 %137, label %241, label %133, !llvm.loop !6

138:                                              ; preds = %59
  %139 = and i32 %51, 15
  %140 = zext i32 %139 to i64
  %141 = getelementptr inbounds i32, i32* %67, i64 %140
  %142 = icmp ult i32 %52, %139
  br i1 %142, label %143, label %394

143:                                              ; preds = %138
  %144 = zext i32 %52 to i64
  %145 = getelementptr inbounds i32, i32* %67, i64 %144
  %146 = add nsw i64 %66, %144
  %147 = add nsw i64 %146, 1
  %148 = getelementptr i32, i32* %64, i64 %147
  %149 = icmp ugt i32* %148, %141
  %150 = select i1 %149, i32* %148, i32* %141
  %151 = sub nsw i64 0, %66
  %152 = sub nsw i64 %151, %144
  %153 = getelementptr i32, i32* %150, i64 %152
  %154 = bitcast i32* %153 to i8*
  %155 = xor i64 %65, -1
  %156 = getelementptr i8, i8* %154, i64 %155
  %157 = ptrtoint i8* %156 to i64
  %158 = lshr i64 %157, 2
  %159 = add nuw nsw i64 %158, 1
  %160 = icmp ult i64 %159, 8
  br i1 %160, label %235, label %161

161:                                              ; preds = %143
  %162 = and i64 %159, 9223372036854775800
  %163 = getelementptr i32, i32* %145, i64 %162
  %164 = insertelement <4 x i32> undef, i32 %3, i32 0
  %165 = shufflevector <4 x i32> %164, <4 x i32> undef, <4 x i32> zeroinitializer
  %166 = insertelement <4 x i32> undef, i32 %3, i32 0
  %167 = shufflevector <4 x i32> %166, <4 x i32> undef, <4 x i32> zeroinitializer
  %168 = add nsw i64 %162, -8
  %169 = lshr exact i64 %168, 3
  %170 = add nuw nsw i64 %169, 1
  %171 = and i64 %170, 7
  %172 = icmp ult i64 %168, 56
  br i1 %172, label %220, label %173

173:                                              ; preds = %161
  %174 = sub nsw i64 %170, %171
  br label %175

175:                                              ; preds = %175, %173
  %176 = phi i64 [ 0, %173 ], [ %217, %175 ]
  %177 = phi i64 [ %174, %173 ], [ %218, %175 ]
  %178 = getelementptr i32, i32* %145, i64 %176
  %179 = bitcast i32* %178 to <4 x i32>*
  store <4 x i32> %165, <4 x i32>* %179, align 4
  %180 = getelementptr i32, i32* %178, i64 4
  %181 = bitcast i32* %180 to <4 x i32>*
  store <4 x i32> %167, <4 x i32>* %181, align 4
  %182 = or i64 %176, 8
  %183 = getelementptr i32, i32* %145, i64 %182
  %184 = bitcast i32* %183 to <4 x i32>*
  store <4 x i32> %165, <4 x i32>* %184, align 4
  %185 = getelementptr i32, i32* %183, i64 4
  %186 = bitcast i32* %185 to <4 x i32>*
  store <4 x i32> %167, <4 x i32>* %186, align 4
  %187 = or i64 %176, 16
  %188 = getelementptr i32, i32* %145, i64 %187
  %189 = bitcast i32* %188 to <4 x i32>*
  store <4 x i32> %165, <4 x i32>* %189, align 4
  %190 = getelementptr i32, i32* %188, i64 4
  %191 = bitcast i32* %190 to <4 x i32>*
  store <4 x i32> %167, <4 x i32>* %191, align 4
  %192 = or i64 %176, 24
  %193 = getelementptr i32, i32* %145, i64 %192
  %194 = bitcast i32* %193 to <4 x i32>*
  store <4 x i32> %165, <4 x i32>* %194, align 4
  %195 = getelementptr i32, i32* %193, i64 4
  %196 = bitcast i32* %195 to <4 x i32>*
  store <4 x i32> %167, <4 x i32>* %196, align 4
  %197 = or i64 %176, 32
  %198 = getelementptr i32, i32* %145, i64 %197
  %199 = bitcast i32* %198 to <4 x i32>*
  store <4 x i32> %165, <4 x i32>* %199, align 4
  %200 = getelementptr i32, i32* %198, i64 4
  %201 = bitcast i32* %200 to <4 x i32>*
  store <4 x i32> %167, <4 x i32>* %201, align 4
  %202 = or i64 %176, 40
  %203 = getelementptr i32, i32* %145, i64 %202
  %204 = bitcast i32* %203 to <4 x i32>*
  store <4 x i32> %165, <4 x i32>* %204, align 4
  %205 = getelementptr i32, i32* %203, i64 4
  %206 = bitcast i32* %205 to <4 x i32>*
  store <4 x i32> %167, <4 x i32>* %206, align 4
  %207 = or i64 %176, 48
  %208 = getelementptr i32, i32* %145, i64 %207
  %209 = bitcast i32* %208 to <4 x i32>*
  store <4 x i32> %165, <4 x i32>* %209, align 4
  %210 = getelementptr i32, i32* %208, i64 4
  %211 = bitcast i32* %210 to <4 x i32>*
  store <4 x i32> %167, <4 x i32>* %211, align 4
  %212 = or i64 %176, 56
  %213 = getelementptr i32, i32* %145, i64 %212
  %214 = bitcast i32* %213 to <4 x i32>*
  store <4 x i32> %165, <4 x i32>* %214, align 4
  %215 = getelementptr i32, i32* %213, i64 4
  %216 = bitcast i32* %215 to <4 x i32>*
  store <4 x i32> %167, <4 x i32>* %216, align 4
  %217 = add i64 %176, 64
  %218 = add i64 %177, -8
  %219 = icmp eq i64 %218, 0
  br i1 %219, label %220, label %175, !llvm.loop !8

220:                                              ; preds = %175, %161
  %221 = phi i64 [ 0, %161 ], [ %217, %175 ]
  %222 = icmp eq i64 %171, 0
  br i1 %222, label %233, label %223

223:                                              ; preds = %220, %223
  %224 = phi i64 [ %230, %223 ], [ %221, %220 ]
  %225 = phi i64 [ %231, %223 ], [ %171, %220 ]
  %226 = getelementptr i32, i32* %145, i64 %224
  %227 = bitcast i32* %226 to <4 x i32>*
  store <4 x i32> %165, <4 x i32>* %227, align 4
  %228 = getelementptr i32, i32* %226, i64 4
  %229 = bitcast i32* %228 to <4 x i32>*
  store <4 x i32> %167, <4 x i32>* %229, align 4
  %230 = add i64 %224, 8
  %231 = add i64 %225, -1
  %232 = icmp eq i64 %231, 0
  br i1 %232, label %233, label %223, !llvm.loop !9

233:                                              ; preds = %223, %220
  %234 = icmp eq i64 %159, %162
  br i1 %234, label %394, label %235

235:                                              ; preds = %233, %143
  %236 = phi i32* [ %145, %143 ], [ %163, %233 ]
  br label %237

237:                                              ; preds = %235, %237
  %238 = phi i32* [ %239, %237 ], [ %236, %235 ]
  %239 = getelementptr inbounds i32, i32* %238, i64 1
  store i32 %3, i32* %238, align 4
  %240 = icmp ult i32* %239, %141
  br i1 %240, label %237, label %394, !llvm.loop !10

241:                                              ; preds = %133, %129, %50
  %242 = phi i32 [ %1, %50 ], [ %61, %129 ], [ %61, %133 ]
  %243 = and i32 %51, 15
  %244 = and i32 %51, -16
  %245 = icmp slt i32 %242, %244
  br i1 %245, label %246, label %285

246:                                              ; preds = %241
  %247 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %0, i64 0, i32 3
  %248 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %0, i64 0, i32 0
  %249 = insertelement <4 x i32> undef, i32 %3, i32 0
  %250 = shufflevector <4 x i32> %249, <4 x i32> undef, <4 x i32> zeroinitializer
  %251 = insertelement <4 x i32> undef, i32 %3, i32 0
  %252 = shufflevector <4 x i32> %251, <4 x i32> undef, <4 x i32> zeroinitializer
  %253 = insertelement <4 x i32> undef, i32 %3, i32 0
  %254 = shufflevector <4 x i32> %253, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %255

255:                                              ; preds = %246, %281
  %256 = phi i32 [ %242, %246 ], [ %283, %281 ]
  %257 = ashr i32 %256, 4
  %258 = sext i32 %257 to i64
  %259 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %0, i64 0, i32 13, i64 %258
  %260 = load i8, i8* %259, align 1
  %261 = icmp eq i8 %260, 0
  br i1 %261, label %262, label %265

262:                                              ; preds = %255
  %263 = load i32*, i32** %248, align 8
  %264 = getelementptr inbounds i32, i32* %263, i64 %258
  br label %281

265:                                              ; preds = %255
  %266 = load i32*, i32** %247, align 8
  %267 = load i32*, i32** %248, align 8
  %268 = getelementptr inbounds i32, i32* %267, i64 %258
  %269 = load i32, i32* %268, align 4
  %270 = zext i32 %269 to i64
  %271 = getelementptr inbounds i32, i32* %266, i64 %270
  %272 = bitcast i32* %271 to <4 x i32>*
  store <4 x i32> %250, <4 x i32>* %272, align 4
  %273 = getelementptr inbounds i32, i32* %271, i64 4
  %274 = bitcast i32* %273 to <4 x i32>*
  store <4 x i32> %252, <4 x i32>* %274, align 4
  %275 = getelementptr inbounds i32, i32* %271, i64 8
  %276 = bitcast i32* %275 to <4 x i32>*
  store <4 x i32> %254, <4 x i32>* %276, align 4
  %277 = getelementptr inbounds i32, i32* %271, i64 12
  store i32 %3, i32* %277, align 4
  %278 = getelementptr inbounds i32, i32* %271, i64 13
  store i32 %3, i32* %278, align 4
  %279 = getelementptr inbounds i32, i32* %271, i64 14
  store i32 %3, i32* %279, align 4
  %280 = getelementptr inbounds i32, i32* %271, i64 15
  br label %281

281:                                              ; preds = %265, %262
  %282 = phi i32* [ %280, %265 ], [ %264, %262 ]
  store i32 %3, i32* %282, align 4
  %283 = add nsw i32 %256, 16
  %284 = icmp slt i32 %283, %244
  br i1 %284, label %255, label %285

285:                                              ; preds = %281, %241
  %286 = phi i32 [ %242, %241 ], [ %283, %281 ]
  %287 = icmp eq i32 %243, 0
  br i1 %287, label %394, label %288

288:                                              ; preds = %285
  %289 = ashr i32 %286, 4
  %290 = tail call fastcc i32 @_ZN6icu_6912_GLOBAL__N_120MutableCodePointTrie12getDataBlockEi(%"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %0, i32 %289)
  %291 = icmp slt i32 %290, 0
  br i1 %291, label %292, label %293

292:                                              ; preds = %288
  store i32 7, i32* %4, align 4
  br label %394

293:                                              ; preds = %288
  %294 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %0, i64 0, i32 3
  %295 = load i32*, i32** %294, align 8
  %296 = ptrtoint i32* %295 to i64
  %297 = sext i32 %290 to i64
  %298 = getelementptr inbounds i32, i32* %295, i64 %297
  %299 = zext i32 %243 to i64
  %300 = getelementptr inbounds i32, i32* %298, i64 %299
  %301 = add nsw i64 %297, 1
  %302 = getelementptr i32, i32* %295, i64 %301
  %303 = icmp ugt i32* %300, %302
  %304 = select i1 %303, i32* %300, i32* %302
  %305 = sub nsw i64 0, %297
  %306 = getelementptr i32, i32* %304, i64 %305
  %307 = bitcast i32* %306 to i8*
  %308 = xor i64 %296, -1
  %309 = getelementptr i8, i8* %307, i64 %308
  %310 = ptrtoint i8* %309 to i64
  %311 = lshr i64 %310, 2
  %312 = add nuw nsw i64 %311, 1
  %313 = icmp ult i64 %312, 8
  br i1 %313, label %388, label %314

314:                                              ; preds = %293
  %315 = and i64 %312, 9223372036854775800
  %316 = getelementptr i32, i32* %298, i64 %315
  %317 = insertelement <4 x i32> undef, i32 %3, i32 0
  %318 = shufflevector <4 x i32> %317, <4 x i32> undef, <4 x i32> zeroinitializer
  %319 = insertelement <4 x i32> undef, i32 %3, i32 0
  %320 = shufflevector <4 x i32> %319, <4 x i32> undef, <4 x i32> zeroinitializer
  %321 = add nsw i64 %315, -8
  %322 = lshr exact i64 %321, 3
  %323 = add nuw nsw i64 %322, 1
  %324 = and i64 %323, 7
  %325 = icmp ult i64 %321, 56
  br i1 %325, label %373, label %326

326:                                              ; preds = %314
  %327 = sub nsw i64 %323, %324
  br label %328

328:                                              ; preds = %328, %326
  %329 = phi i64 [ 0, %326 ], [ %370, %328 ]
  %330 = phi i64 [ %327, %326 ], [ %371, %328 ]
  %331 = getelementptr i32, i32* %298, i64 %329
  %332 = bitcast i32* %331 to <4 x i32>*
  store <4 x i32> %318, <4 x i32>* %332, align 4
  %333 = getelementptr i32, i32* %331, i64 4
  %334 = bitcast i32* %333 to <4 x i32>*
  store <4 x i32> %320, <4 x i32>* %334, align 4
  %335 = or i64 %329, 8
  %336 = getelementptr i32, i32* %298, i64 %335
  %337 = bitcast i32* %336 to <4 x i32>*
  store <4 x i32> %318, <4 x i32>* %337, align 4
  %338 = getelementptr i32, i32* %336, i64 4
  %339 = bitcast i32* %338 to <4 x i32>*
  store <4 x i32> %320, <4 x i32>* %339, align 4
  %340 = or i64 %329, 16
  %341 = getelementptr i32, i32* %298, i64 %340
  %342 = bitcast i32* %341 to <4 x i32>*
  store <4 x i32> %318, <4 x i32>* %342, align 4
  %343 = getelementptr i32, i32* %341, i64 4
  %344 = bitcast i32* %343 to <4 x i32>*
  store <4 x i32> %320, <4 x i32>* %344, align 4
  %345 = or i64 %329, 24
  %346 = getelementptr i32, i32* %298, i64 %345
  %347 = bitcast i32* %346 to <4 x i32>*
  store <4 x i32> %318, <4 x i32>* %347, align 4
  %348 = getelementptr i32, i32* %346, i64 4
  %349 = bitcast i32* %348 to <4 x i32>*
  store <4 x i32> %320, <4 x i32>* %349, align 4
  %350 = or i64 %329, 32
  %351 = getelementptr i32, i32* %298, i64 %350
  %352 = bitcast i32* %351 to <4 x i32>*
  store <4 x i32> %318, <4 x i32>* %352, align 4
  %353 = getelementptr i32, i32* %351, i64 4
  %354 = bitcast i32* %353 to <4 x i32>*
  store <4 x i32> %320, <4 x i32>* %354, align 4
  %355 = or i64 %329, 40
  %356 = getelementptr i32, i32* %298, i64 %355
  %357 = bitcast i32* %356 to <4 x i32>*
  store <4 x i32> %318, <4 x i32>* %357, align 4
  %358 = getelementptr i32, i32* %356, i64 4
  %359 = bitcast i32* %358 to <4 x i32>*
  store <4 x i32> %320, <4 x i32>* %359, align 4
  %360 = or i64 %329, 48
  %361 = getelementptr i32, i32* %298, i64 %360
  %362 = bitcast i32* %361 to <4 x i32>*
  store <4 x i32> %318, <4 x i32>* %362, align 4
  %363 = getelementptr i32, i32* %361, i64 4
  %364 = bitcast i32* %363 to <4 x i32>*
  store <4 x i32> %320, <4 x i32>* %364, align 4
  %365 = or i64 %329, 56
  %366 = getelementptr i32, i32* %298, i64 %365
  %367 = bitcast i32* %366 to <4 x i32>*
  store <4 x i32> %318, <4 x i32>* %367, align 4
  %368 = getelementptr i32, i32* %366, i64 4
  %369 = bitcast i32* %368 to <4 x i32>*
  store <4 x i32> %320, <4 x i32>* %369, align 4
  %370 = add i64 %329, 64
  %371 = add i64 %330, -8
  %372 = icmp eq i64 %371, 0
  br i1 %372, label %373, label %328, !llvm.loop !11

373:                                              ; preds = %328, %314
  %374 = phi i64 [ 0, %314 ], [ %370, %328 ]
  %375 = icmp eq i64 %324, 0
  br i1 %375, label %386, label %376

376:                                              ; preds = %373, %376
  %377 = phi i64 [ %383, %376 ], [ %374, %373 ]
  %378 = phi i64 [ %384, %376 ], [ %324, %373 ]
  %379 = getelementptr i32, i32* %298, i64 %377
  %380 = bitcast i32* %379 to <4 x i32>*
  store <4 x i32> %318, <4 x i32>* %380, align 4
  %381 = getelementptr i32, i32* %379, i64 4
  %382 = bitcast i32* %381 to <4 x i32>*
  store <4 x i32> %320, <4 x i32>* %382, align 4
  %383 = add i64 %377, 8
  %384 = add i64 %378, -1
  %385 = icmp eq i64 %384, 0
  br i1 %385, label %386, label %376, !llvm.loop !12

386:                                              ; preds = %376, %373
  %387 = icmp eq i64 %312, %315
  br i1 %387, label %394, label %388

388:                                              ; preds = %386, %293
  %389 = phi i32* [ %298, %293 ], [ %316, %386 ]
  br label %390

390:                                              ; preds = %388, %390
  %391 = phi i32* [ %392, %390 ], [ %389, %388 ]
  %392 = getelementptr inbounds i32, i32* %391, i64 1
  store i32 %3, i32* %391, align 4
  %393 = icmp ult i32* %392, %300
  br i1 %393, label %390, label %394, !llvm.loop !13

394:                                              ; preds = %237, %390, %233, %386, %138, %58, %285, %292, %5, %14, %49
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.UCPTrie* @umutablecptrie_buildImmutable_69(%struct.UMutableCPTrie*, i32, i32, i32* nocapture) local_unnamed_addr #0 {
  %5 = alloca [1024 x i16], align 16
  %6 = alloca %"class.icu_69::(anonymous namespace)::MixedBlocks", align 8
  %7 = alloca [2176 x i16], align 16
  %8 = alloca [128 x i32], align 16
  %9 = alloca %"class.icu_69::(anonymous namespace)::AllSameBlocks", align 4
  %10 = alloca %"class.icu_69::(anonymous namespace)::MixedBlocks", align 8
  %11 = load i32, i32* %3, align 4
  %12 = icmp slt i32 %11, 1
  br i1 %12, label %13, label %2912

13:                                               ; preds = %4
  %14 = bitcast %struct.UMutableCPTrie* %0 to %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"*
  %15 = icmp ugt i32 %1, 1
  %16 = icmp ugt i32 %2, 2
  %17 = or i1 %15, %16
  br i1 %17, label %18, label %19

18:                                               ; preds = %13
  store i32 1, i32* %3, align 4
  br label %2912

19:                                               ; preds = %13
  switch i32 %2, label %112 [
    i32 2, label %66
    i32 0, label %20
  ]

20:                                               ; preds = %19
  %21 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 8
  %22 = load i32, i32* %21, align 8
  %23 = and i32 %22, 65535
  store i32 %23, i32* %21, align 8
  %24 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 9
  %25 = load i32, i32* %24, align 4
  %26 = and i32 %25, 65535
  store i32 %26, i32* %24, align 4
  %27 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 11
  %28 = load i32, i32* %27, align 4
  %29 = and i32 %28, 65535
  store i32 %29, i32* %27, align 4
  %30 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 10
  %31 = load i32, i32* %30, align 8
  %32 = icmp sgt i32 %31, 15
  br i1 %32, label %33, label %37

33:                                               ; preds = %20
  %34 = lshr i32 %31, 4
  %35 = bitcast %struct.UMutableCPTrie* %0 to i32**
  %36 = zext i32 %34 to i64
  br label %43

37:                                               ; preds = %53, %20
  %38 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 5
  %39 = load i32, i32* %38, align 4
  %40 = icmp sgt i32 %39, 0
  br i1 %40, label %41, label %112

41:                                               ; preds = %37
  %42 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 3
  br label %56

43:                                               ; preds = %53, %33
  %44 = phi i64 [ 0, %33 ], [ %54, %53 ]
  %45 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 13, i64 %44
  %46 = load i8, i8* %45, align 1
  %47 = icmp eq i8 %46, 0
  br i1 %47, label %48, label %53

48:                                               ; preds = %43
  %49 = load i32*, i32** %35, align 8
  %50 = getelementptr inbounds i32, i32* %49, i64 %44
  %51 = load i32, i32* %50, align 4
  %52 = and i32 %51, 65535
  store i32 %52, i32* %50, align 4
  br label %53

53:                                               ; preds = %48, %43
  %54 = add nuw nsw i64 %44, 1
  %55 = icmp ult i64 %54, %36
  br i1 %55, label %43, label %37

56:                                               ; preds = %56, %41
  %57 = phi i64 [ 0, %41 ], [ %62, %56 ]
  %58 = load i32*, i32** %42, align 8
  %59 = getelementptr inbounds i32, i32* %58, i64 %57
  %60 = load i32, i32* %59, align 4
  %61 = and i32 %60, 65535
  store i32 %61, i32* %59, align 4
  %62 = add nuw nsw i64 %57, 1
  %63 = load i32, i32* %38, align 4
  %64 = sext i32 %63 to i64
  %65 = icmp slt i64 %62, %64
  br i1 %65, label %56, label %112

66:                                               ; preds = %19
  %67 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 8
  %68 = load i32, i32* %67, align 8
  %69 = and i32 %68, 255
  store i32 %69, i32* %67, align 8
  %70 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 9
  %71 = load i32, i32* %70, align 4
  %72 = and i32 %71, 255
  store i32 %72, i32* %70, align 4
  %73 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 11
  %74 = load i32, i32* %73, align 4
  %75 = and i32 %74, 255
  store i32 %75, i32* %73, align 4
  %76 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 10
  %77 = load i32, i32* %76, align 8
  %78 = icmp sgt i32 %77, 15
  br i1 %78, label %79, label %83

79:                                               ; preds = %66
  %80 = lshr i32 %77, 4
  %81 = bitcast %struct.UMutableCPTrie* %0 to i32**
  %82 = zext i32 %80 to i64
  br label %89

83:                                               ; preds = %99, %66
  %84 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 5
  %85 = load i32, i32* %84, align 4
  %86 = icmp sgt i32 %85, 0
  br i1 %86, label %87, label %112

87:                                               ; preds = %83
  %88 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 3
  br label %102

89:                                               ; preds = %99, %79
  %90 = phi i64 [ 0, %79 ], [ %100, %99 ]
  %91 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 13, i64 %90
  %92 = load i8, i8* %91, align 1
  %93 = icmp eq i8 %92, 0
  br i1 %93, label %94, label %99

94:                                               ; preds = %89
  %95 = load i32*, i32** %81, align 8
  %96 = getelementptr inbounds i32, i32* %95, i64 %90
  %97 = load i32, i32* %96, align 4
  %98 = and i32 %97, 255
  store i32 %98, i32* %96, align 4
  br label %99

99:                                               ; preds = %94, %89
  %100 = add nuw nsw i64 %90, 1
  %101 = icmp ult i64 %100, %82
  br i1 %101, label %89, label %83

102:                                              ; preds = %102, %87
  %103 = phi i64 [ 0, %87 ], [ %108, %102 ]
  %104 = load i32*, i32** %88, align 8
  %105 = getelementptr inbounds i32, i32* %104, i64 %103
  %106 = load i32, i32* %105, align 4
  %107 = and i32 %106, 255
  store i32 %107, i32* %105, align 4
  %108 = add nuw nsw i64 %103, 1
  %109 = load i32, i32* %84, align 4
  %110 = sext i32 %109 to i64
  %111 = icmp slt i64 %108, %110
  br i1 %111, label %102, label %112

112:                                              ; preds = %56, %102, %83, %37, %19
  %113 = icmp eq i32 %1, 0
  %114 = select i1 %113, i32 65536, i32 4096
  %115 = lshr exact i32 %114, 4
  %116 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 10
  %117 = load i32, i32* %116, align 8
  %118 = icmp sgt i32 %117, 1114111
  br i1 %118, label %119, label %141

119:                                              ; preds = %112
  %120 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 13, i64 69631
  %121 = load i8, i8* %120, align 1
  %122 = icmp eq i8 %121, 0
  br i1 %122, label %123, label %127

123:                                              ; preds = %119
  %124 = bitcast %struct.UMutableCPTrie* %0 to i32**
  %125 = load i32*, i32** %124, align 8
  %126 = getelementptr inbounds i32, i32* %125, i64 69631
  br label %137

127:                                              ; preds = %119
  %128 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 3
  %129 = load i32*, i32** %128, align 8
  %130 = bitcast %struct.UMutableCPTrie* %0 to i32**
  %131 = load i32*, i32** %130, align 8
  %132 = getelementptr inbounds i32, i32* %131, i64 69631
  %133 = load i32, i32* %132, align 4
  %134 = add i32 %133, 15
  %135 = zext i32 %134 to i64
  %136 = getelementptr inbounds i32, i32* %129, i64 %135
  br label %137

137:                                              ; preds = %127, %123
  %138 = phi i32* [ %136, %127 ], [ %126, %123 ]
  %139 = load i32, i32* %138, align 4
  %140 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 11
  store i32 %139, i32* %140, align 4
  br label %145

141:                                              ; preds = %112
  %142 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 11
  %143 = load i32, i32* %142, align 4
  %144 = icmp sgt i32 %117, 15
  br i1 %144, label %145, label %245

145:                                              ; preds = %141, %137
  %146 = phi i32* [ %140, %137 ], [ %142, %141 ]
  %147 = phi i32 [ %139, %137 ], [ %143, %141 ]
  %148 = lshr i32 %117, 4
  %149 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 3
  %150 = bitcast %struct.UMutableCPTrie* %0 to i32**
  %151 = zext i32 %148 to i64
  br label %152

152:                                              ; preds = %176, %145
  %153 = phi i64 [ %151, %145 ], [ %154, %176 ]
  %154 = add nsw i64 %153, -1
  %155 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 13, i64 %154
  %156 = load i8, i8* %155, align 1
  %157 = icmp eq i8 %156, 0
  br i1 %157, label %158, label %163

158:                                              ; preds = %152
  %159 = load i32*, i32** %150, align 8
  %160 = getelementptr inbounds i32, i32* %159, i64 %154
  %161 = load i32, i32* %160, align 4
  %162 = icmp eq i32 %161, %147
  br i1 %162, label %176, label %234

163:                                              ; preds = %152
  %164 = load i32*, i32** %149, align 8
  %165 = load i32*, i32** %150, align 8
  %166 = getelementptr inbounds i32, i32* %165, i64 %154
  %167 = load i32, i32* %166, align 4
  %168 = zext i32 %167 to i64
  %169 = getelementptr inbounds i32, i32* %164, i64 %168
  %170 = load i32, i32* %169, align 4
  %171 = icmp eq i32 %170, %147
  br i1 %171, label %172, label %234

172:                                              ; preds = %163
  %173 = getelementptr inbounds i32, i32* %169, i64 1
  %174 = load i32, i32* %173, align 4
  %175 = icmp eq i32 %174, %147
  br i1 %175, label %178, label %234

176:                                              ; preds = %230, %158
  %177 = icmp sgt i64 %154, 0
  br i1 %177, label %152, label %245

178:                                              ; preds = %172
  %179 = getelementptr inbounds i32, i32* %169, i64 2
  %180 = load i32, i32* %179, align 4
  %181 = icmp eq i32 %180, %147
  br i1 %181, label %182, label %234

182:                                              ; preds = %178
  %183 = getelementptr inbounds i32, i32* %169, i64 3
  %184 = load i32, i32* %183, align 4
  %185 = icmp eq i32 %184, %147
  br i1 %185, label %186, label %234

186:                                              ; preds = %182
  %187 = getelementptr inbounds i32, i32* %169, i64 4
  %188 = load i32, i32* %187, align 4
  %189 = icmp eq i32 %188, %147
  br i1 %189, label %190, label %234

190:                                              ; preds = %186
  %191 = getelementptr inbounds i32, i32* %169, i64 5
  %192 = load i32, i32* %191, align 4
  %193 = icmp eq i32 %192, %147
  br i1 %193, label %194, label %234

194:                                              ; preds = %190
  %195 = getelementptr inbounds i32, i32* %169, i64 6
  %196 = load i32, i32* %195, align 4
  %197 = icmp eq i32 %196, %147
  br i1 %197, label %198, label %234

198:                                              ; preds = %194
  %199 = getelementptr inbounds i32, i32* %169, i64 7
  %200 = load i32, i32* %199, align 4
  %201 = icmp eq i32 %200, %147
  br i1 %201, label %202, label %234

202:                                              ; preds = %198
  %203 = getelementptr inbounds i32, i32* %169, i64 8
  %204 = load i32, i32* %203, align 4
  %205 = icmp eq i32 %204, %147
  br i1 %205, label %206, label %234

206:                                              ; preds = %202
  %207 = getelementptr inbounds i32, i32* %169, i64 9
  %208 = load i32, i32* %207, align 4
  %209 = icmp eq i32 %208, %147
  br i1 %209, label %210, label %234

210:                                              ; preds = %206
  %211 = getelementptr inbounds i32, i32* %169, i64 10
  %212 = load i32, i32* %211, align 4
  %213 = icmp eq i32 %212, %147
  br i1 %213, label %214, label %234

214:                                              ; preds = %210
  %215 = getelementptr inbounds i32, i32* %169, i64 11
  %216 = load i32, i32* %215, align 4
  %217 = icmp eq i32 %216, %147
  br i1 %217, label %218, label %234

218:                                              ; preds = %214
  %219 = getelementptr inbounds i32, i32* %169, i64 12
  %220 = load i32, i32* %219, align 4
  %221 = icmp eq i32 %220, %147
  br i1 %221, label %222, label %234

222:                                              ; preds = %218
  %223 = getelementptr inbounds i32, i32* %169, i64 13
  %224 = load i32, i32* %223, align 4
  %225 = icmp eq i32 %224, %147
  br i1 %225, label %226, label %234

226:                                              ; preds = %222
  %227 = getelementptr inbounds i32, i32* %169, i64 14
  %228 = load i32, i32* %227, align 4
  %229 = icmp eq i32 %228, %147
  br i1 %229, label %230, label %234

230:                                              ; preds = %226
  %231 = getelementptr inbounds i32, i32* %169, i64 15
  %232 = load i32, i32* %231, align 4
  %233 = icmp eq i32 %232, %147
  br i1 %233, label %176, label %234

234:                                              ; preds = %230, %226, %222, %218, %214, %210, %206, %202, %198, %194, %190, %186, %182, %178, %172, %163, %158
  %235 = trunc i64 %153 to i32
  %236 = shl i32 %235, 4
  %237 = add nsw i32 %236, 511
  %238 = and i32 %237, -512
  %239 = icmp eq i32 %238, 1114112
  br i1 %239, label %240, label %243

240:                                              ; preds = %234
  %241 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 8
  %242 = load i32, i32* %241, align 8
  store i32 %242, i32* %146, align 4
  br label %267

243:                                              ; preds = %234
  %244 = icmp slt i32 %238, %114
  br i1 %244, label %245, label %267

245:                                              ; preds = %176, %243, %141
  %246 = phi i32* [ %146, %243 ], [ %142, %141 ], [ %146, %176 ]
  %247 = phi i32 [ %238, %243 ], [ 0, %141 ], [ 0, %176 ]
  %248 = ashr exact i32 %247, 4
  %249 = icmp slt i32 %248, %115
  %250 = bitcast %struct.UMutableCPTrie* %0 to i32**
  br i1 %249, label %251, label %267

251:                                              ; preds = %245
  %252 = sext i32 %248 to i64
  %253 = zext i32 %115 to i64
  br label %254

254:                                              ; preds = %254, %251
  %255 = phi i64 [ %252, %251 ], [ %265, %254 ]
  %256 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 13, i64 %255
  store i8 0, i8* %256, align 1
  %257 = load i32, i32* %246, align 4
  %258 = load i32*, i32** %250, align 8
  %259 = getelementptr inbounds i32, i32* %258, i64 %255
  store i32 %257, i32* %259, align 4
  %260 = or i64 %255, 1
  %261 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 13, i64 %260
  store i8 0, i8* %261, align 1
  %262 = load i32, i32* %246, align 4
  %263 = load i32*, i32** %250, align 8
  %264 = getelementptr inbounds i32, i32* %263, i64 %260
  store i32 %262, i32* %264, align 4
  %265 = add nsw i64 %255, 2
  %266 = icmp eq i64 %265, %253
  br i1 %266, label %267, label %254

267:                                              ; preds = %254, %245, %243, %240
  %268 = phi i32** [ %150, %243 ], [ %150, %240 ], [ %250, %245 ], [ %250, %254 ]
  %269 = phi i32* [ %146, %243 ], [ %146, %240 ], [ %246, %245 ], [ %246, %254 ]
  %270 = phi i32 [ %238, %243 ], [ 1114112, %240 ], [ %247, %245 ], [ %247, %254 ]
  %271 = phi i32 [ %238, %243 ], [ 1114112, %240 ], [ %114, %245 ], [ %114, %254 ]
  store i32 %271, i32* %116, align 8
  %272 = bitcast [128 x i32]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %272) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %272, i8 -86, i64 512, i1 false) #7
  %273 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 3
  %274 = sext i32 %271 to i64
  br label %567

275:                                              ; preds = %589
  %276 = bitcast %"class.icu_69::(anonymous namespace)::AllSameBlocks"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 392, i8* nonnull %276) #7
  %277 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::AllSameBlocks", %"class.icu_69::(anonymous namespace)::AllSameBlocks"* %9, i64 0, i32 2
  %278 = bitcast [32 x i32]* %277 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %278, i8 -86, i64 384, i1 false) #7
  %279 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::AllSameBlocks", %"class.icu_69::(anonymous namespace)::AllSameBlocks"* %9, i64 0, i32 0
  store i32 0, i32* %279, align 4
  %280 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::AllSameBlocks", %"class.icu_69::(anonymous namespace)::AllSameBlocks"* %9, i64 0, i32 1
  store i32 -1, i32* %280, align 4
  %281 = ashr exact i32 %271, 4
  %282 = icmp sgt i32 %271, 15
  br i1 %282, label %283, label %595

283:                                              ; preds = %275, %561
  %284 = phi i32 [ %563, %561 ], [ 0, %275 ]
  %285 = phi i32 [ %290, %561 ], [ 4, %275 ]
  %286 = phi i32 [ %289, %561 ], [ 64, %275 ]
  %287 = phi i32 [ %562, %561 ], [ 148, %275 ]
  %288 = icmp eq i32 %284, %115
  %289 = select i1 %288, i32 16, i32 %286
  %290 = select i1 %288, i32 1, i32 %285
  %291 = load i32*, i32** %268, align 8
  %292 = sext i32 %284 to i64
  %293 = getelementptr inbounds i32, i32* %291, i64 %292
  %294 = load i32, i32* %293, align 4
  %295 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 13, i64 %292
  %296 = load i8, i8* %295, align 1
  %297 = icmp eq i8 %296, 1
  br i1 %297, label %298, label %323

298:                                              ; preds = %283
  %299 = load i32*, i32** %273, align 8
  %300 = zext i32 %294 to i64
  %301 = getelementptr inbounds i32, i32* %299, i64 %300
  %302 = load i32, i32* %301, align 4
  %303 = getelementptr inbounds i32, i32* %301, i64 1
  %304 = add nsw i32 %289, -1
  %305 = sext i32 %304 to i64
  %306 = getelementptr inbounds i32, i32* %303, i64 %305
  %307 = icmp sgt i32 %304, 0
  br i1 %307, label %308, label %315

308:                                              ; preds = %298, %312
  %309 = phi i32* [ %313, %312 ], [ %303, %298 ]
  %310 = load i32, i32* %309, align 4
  %311 = icmp eq i32 %310, %302
  br i1 %311, label %312, label %315

312:                                              ; preds = %308
  %313 = getelementptr inbounds i32, i32* %309, i64 1
  %314 = icmp ult i32* %313, %306
  br i1 %314, label %308, label %315

315:                                              ; preds = %312, %308, %298
  %316 = phi i32* [ %303, %298 ], [ %313, %312 ], [ %309, %308 ]
  %317 = icmp eq i32* %316, %306
  br i1 %317, label %318, label %321

318:                                              ; preds = %315
  store i8 0, i8* %295, align 1
  %319 = load i32*, i32** %268, align 8
  %320 = getelementptr inbounds i32, i32* %319, i64 %292
  store i32 %302, i32* %320, align 4
  br label %341

321:                                              ; preds = %315
  %322 = add nsw i32 %289, %287
  br label %561

323:                                              ; preds = %283
  %324 = icmp sgt i32 %290, 1
  br i1 %324, label %325, label %341

325:                                              ; preds = %323
  %326 = add nsw i32 %290, %284
  %327 = sext i32 %326 to i64
  br label %328

328:                                              ; preds = %332, %325
  %329 = phi i64 [ %330, %332 ], [ %292, %325 ]
  %330 = add nsw i64 %329, 1
  %331 = icmp slt i64 %330, %327
  br i1 %331, label %332, label %341

332:                                              ; preds = %328
  %333 = getelementptr inbounds i32, i32* %291, i64 %330
  %334 = load i32, i32* %333, align 4
  %335 = icmp eq i32 %334, %294
  br i1 %335, label %328, label %336

336:                                              ; preds = %332
  %337 = tail call fastcc i32 @_ZN6icu_6912_GLOBAL__N_120MutableCodePointTrie12getDataBlockEi(%"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i32 %284) #7
  %338 = icmp slt i32 %337, 0
  %339 = select i1 %338, i32 0, i32 %289
  %340 = add nsw i32 %339, %287
  br i1 %338, label %2391, label %561

341:                                              ; preds = %328, %323, %318
  %342 = phi i32 [ %294, %323 ], [ %302, %318 ], [ %294, %328 ]
  %343 = load i32, i32* %280, align 4
  %344 = icmp sgt i32 %343, -1
  br i1 %344, label %345, label %356

345:                                              ; preds = %341
  %346 = sext i32 %343 to i64
  %347 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::AllSameBlocks", %"class.icu_69::(anonymous namespace)::AllSameBlocks"* %9, i64 0, i32 3, i64 %346
  %348 = load i32, i32* %347, align 4
  %349 = icmp eq i32 %348, %342
  br i1 %349, label %350, label %356

350:                                              ; preds = %345
  %351 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::AllSameBlocks", %"class.icu_69::(anonymous namespace)::AllSameBlocks"* %9, i64 0, i32 4, i64 %346
  %352 = load i32, i32* %351, align 4
  %353 = add nsw i32 %352, %290
  store i32 %353, i32* %351, align 4
  %354 = load i32, i32* %280, align 4
  %355 = sext i32 %354 to i64
  br label %384

356:                                              ; preds = %345, %341
  %357 = load i32, i32* %279, align 4
  %358 = icmp sgt i32 %357, 0
  %359 = sext i32 %357 to i64
  br i1 %358, label %360, label %376

360:                                              ; preds = %356, %365
  %361 = phi i64 [ %366, %365 ], [ 0, %356 ]
  %362 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::AllSameBlocks", %"class.icu_69::(anonymous namespace)::AllSameBlocks"* %9, i64 0, i32 3, i64 %361
  %363 = load i32, i32* %362, align 4
  %364 = icmp eq i32 %363, %342
  br i1 %364, label %368, label %365

365:                                              ; preds = %360
  %366 = add nuw nsw i64 %361, 1
  %367 = icmp eq i64 %366, %359
  br i1 %367, label %374, label %360

368:                                              ; preds = %360
  %369 = trunc i64 %361 to i32
  %370 = and i64 %361, 4294967295
  store i32 %369, i32* %280, align 4
  %371 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::AllSameBlocks", %"class.icu_69::(anonymous namespace)::AllSameBlocks"* %9, i64 0, i32 4, i64 %370
  %372 = load i32, i32* %371, align 4
  %373 = add nsw i32 %372, %290
  store i32 %373, i32* %371, align 4
  br label %384

374:                                              ; preds = %365
  %375 = icmp eq i32 %357, 32
  br i1 %375, label %389, label %376

376:                                              ; preds = %374, %356
  store i32 %357, i32* %280, align 4
  %377 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::AllSameBlocks", %"class.icu_69::(anonymous namespace)::AllSameBlocks"* %9, i64 0, i32 2, i64 %359
  store i32 %284, i32* %377, align 4
  %378 = load i32, i32* %279, align 4
  %379 = sext i32 %378 to i64
  %380 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::AllSameBlocks", %"class.icu_69::(anonymous namespace)::AllSameBlocks"* %9, i64 0, i32 3, i64 %379
  store i32 %342, i32* %380, align 4
  %381 = load i32, i32* %279, align 4
  %382 = add nsw i32 %381, 1
  store i32 %382, i32* %279, align 4
  %383 = sext i32 %381 to i64
  br label %556

384:                                              ; preds = %368, %350
  %385 = phi i64 [ %355, %350 ], [ %370, %368 ]
  %386 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::AllSameBlocks", %"class.icu_69::(anonymous namespace)::AllSameBlocks"* %9, i64 0, i32 2, i64 %385
  %387 = load i32, i32* %386, align 4
  %388 = icmp eq i32 %387, -2
  br i1 %388, label %389, label %550

389:                                              ; preds = %384, %374
  %390 = icmp eq i32 %284, 0
  br i1 %390, label %391, label %461

391:                                              ; preds = %547, %389
  %392 = load i32, i32* %279, align 4
  %393 = icmp sgt i32 %392, 0
  br i1 %393, label %394, label %456

394:                                              ; preds = %391
  %395 = sext i32 %392 to i64
  %396 = add nsw i64 %395, -1
  %397 = and i64 %395, 3
  %398 = icmp ult i64 %396, 3
  br i1 %398, label %436, label %399

399:                                              ; preds = %394
  %400 = sub nsw i64 %395, %397
  br label %401

401:                                              ; preds = %401, %399
  %402 = phi i64 [ 0, %399 ], [ %433, %401 ]
  %403 = phi i32 [ 69632, %399 ], [ %432, %401 ]
  %404 = phi i32 [ -1, %399 ], [ %431, %401 ]
  %405 = phi i64 [ %400, %399 ], [ %434, %401 ]
  %406 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::AllSameBlocks", %"class.icu_69::(anonymous namespace)::AllSameBlocks"* %9, i64 0, i32 4, i64 %402
  %407 = load i32, i32* %406, align 4
  %408 = icmp slt i32 %407, %403
  %409 = trunc i64 %402 to i32
  %410 = select i1 %408, i32 %409, i32 %404
  %411 = select i1 %408, i32 %407, i32 %403
  %412 = or i64 %402, 1
  %413 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::AllSameBlocks", %"class.icu_69::(anonymous namespace)::AllSameBlocks"* %9, i64 0, i32 4, i64 %412
  %414 = load i32, i32* %413, align 4
  %415 = icmp slt i32 %414, %411
  %416 = trunc i64 %412 to i32
  %417 = select i1 %415, i32 %416, i32 %410
  %418 = select i1 %415, i32 %414, i32 %411
  %419 = or i64 %402, 2
  %420 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::AllSameBlocks", %"class.icu_69::(anonymous namespace)::AllSameBlocks"* %9, i64 0, i32 4, i64 %419
  %421 = load i32, i32* %420, align 4
  %422 = icmp slt i32 %421, %418
  %423 = trunc i64 %419 to i32
  %424 = select i1 %422, i32 %423, i32 %417
  %425 = select i1 %422, i32 %421, i32 %418
  %426 = or i64 %402, 3
  %427 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::AllSameBlocks", %"class.icu_69::(anonymous namespace)::AllSameBlocks"* %9, i64 0, i32 4, i64 %426
  %428 = load i32, i32* %427, align 4
  %429 = icmp slt i32 %428, %425
  %430 = trunc i64 %426 to i32
  %431 = select i1 %429, i32 %430, i32 %424
  %432 = select i1 %429, i32 %428, i32 %425
  %433 = add nuw nsw i64 %402, 4
  %434 = add i64 %405, -4
  %435 = icmp eq i64 %434, 0
  br i1 %435, label %436, label %401

436:                                              ; preds = %401, %394
  %437 = phi i32 [ undef, %394 ], [ %431, %401 ]
  %438 = phi i64 [ 0, %394 ], [ %433, %401 ]
  %439 = phi i32 [ 69632, %394 ], [ %432, %401 ]
  %440 = phi i32 [ -1, %394 ], [ %431, %401 ]
  %441 = icmp eq i64 %397, 0
  br i1 %441, label %456, label %442

442:                                              ; preds = %436, %442
  %443 = phi i64 [ %453, %442 ], [ %438, %436 ]
  %444 = phi i32 [ %452, %442 ], [ %439, %436 ]
  %445 = phi i32 [ %451, %442 ], [ %440, %436 ]
  %446 = phi i64 [ %454, %442 ], [ %397, %436 ]
  %447 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::AllSameBlocks", %"class.icu_69::(anonymous namespace)::AllSameBlocks"* %9, i64 0, i32 4, i64 %443
  %448 = load i32, i32* %447, align 4
  %449 = icmp slt i32 %448, %444
  %450 = trunc i64 %443 to i32
  %451 = select i1 %449, i32 %450, i32 %445
  %452 = select i1 %449, i32 %448, i32 %444
  %453 = add nuw nsw i64 %443, 1
  %454 = add i64 %446, -1
  %455 = icmp eq i64 %454, 0
  br i1 %455, label %456, label %442, !llvm.loop !14

456:                                              ; preds = %436, %442, %391
  %457 = phi i32 [ -1, %391 ], [ %437, %436 ], [ %451, %442 ]
  store i32 %457, i32* %280, align 4
  %458 = sext i32 %457 to i64
  %459 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::AllSameBlocks", %"class.icu_69::(anonymous namespace)::AllSameBlocks"* %9, i64 0, i32 2, i64 %458
  store i32 %284, i32* %459, align 4
  %460 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::AllSameBlocks", %"class.icu_69::(anonymous namespace)::AllSameBlocks"* %9, i64 0, i32 3, i64 %458
  store i32 %342, i32* %460, align 4
  br label %556

461:                                              ; preds = %389, %547
  %462 = phi i32 [ %548, %547 ], [ 0, %389 ]
  %463 = phi i32 [ %465, %547 ], [ 4, %389 ]
  %464 = icmp eq i32 %462, %115
  %465 = select i1 %464, i32 1, i32 %463
  %466 = sext i32 %462 to i64
  %467 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 13, i64 %466
  %468 = load i8, i8* %467, align 1
  %469 = icmp eq i8 %468, 0
  br i1 %469, label %470, label %547

470:                                              ; preds = %461
  %471 = load i32*, i32** %268, align 8
  %472 = getelementptr inbounds i32, i32* %471, i64 %466
  %473 = load i32, i32* %472, align 4
  %474 = icmp eq i32 %473, %342
  br i1 %474, label %475, label %547

475:                                              ; preds = %470
  %476 = add nsw i32 %465, %290
  %477 = load i32, i32* %279, align 4
  %478 = icmp sgt i32 %477, 0
  br i1 %478, label %479, label %541

479:                                              ; preds = %475
  %480 = sext i32 %477 to i64
  %481 = add nsw i64 %480, -1
  %482 = and i64 %480, 3
  %483 = icmp ult i64 %481, 3
  br i1 %483, label %521, label %484

484:                                              ; preds = %479
  %485 = sub nsw i64 %480, %482
  br label %486

486:                                              ; preds = %486, %484
  %487 = phi i64 [ 0, %484 ], [ %518, %486 ]
  %488 = phi i32 [ 69632, %484 ], [ %517, %486 ]
  %489 = phi i32 [ -1, %484 ], [ %516, %486 ]
  %490 = phi i64 [ %485, %484 ], [ %519, %486 ]
  %491 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::AllSameBlocks", %"class.icu_69::(anonymous namespace)::AllSameBlocks"* %9, i64 0, i32 4, i64 %487
  %492 = load i32, i32* %491, align 4
  %493 = icmp slt i32 %492, %488
  %494 = trunc i64 %487 to i32
  %495 = select i1 %493, i32 %494, i32 %489
  %496 = select i1 %493, i32 %492, i32 %488
  %497 = or i64 %487, 1
  %498 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::AllSameBlocks", %"class.icu_69::(anonymous namespace)::AllSameBlocks"* %9, i64 0, i32 4, i64 %497
  %499 = load i32, i32* %498, align 4
  %500 = icmp slt i32 %499, %496
  %501 = trunc i64 %497 to i32
  %502 = select i1 %500, i32 %501, i32 %495
  %503 = select i1 %500, i32 %499, i32 %496
  %504 = or i64 %487, 2
  %505 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::AllSameBlocks", %"class.icu_69::(anonymous namespace)::AllSameBlocks"* %9, i64 0, i32 4, i64 %504
  %506 = load i32, i32* %505, align 4
  %507 = icmp slt i32 %506, %503
  %508 = trunc i64 %504 to i32
  %509 = select i1 %507, i32 %508, i32 %502
  %510 = select i1 %507, i32 %506, i32 %503
  %511 = or i64 %487, 3
  %512 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::AllSameBlocks", %"class.icu_69::(anonymous namespace)::AllSameBlocks"* %9, i64 0, i32 4, i64 %511
  %513 = load i32, i32* %512, align 4
  %514 = icmp slt i32 %513, %510
  %515 = trunc i64 %511 to i32
  %516 = select i1 %514, i32 %515, i32 %509
  %517 = select i1 %514, i32 %513, i32 %510
  %518 = add nuw nsw i64 %487, 4
  %519 = add i64 %490, -4
  %520 = icmp eq i64 %519, 0
  br i1 %520, label %521, label %486

521:                                              ; preds = %486, %479
  %522 = phi i32 [ undef, %479 ], [ %516, %486 ]
  %523 = phi i64 [ 0, %479 ], [ %518, %486 ]
  %524 = phi i32 [ 69632, %479 ], [ %517, %486 ]
  %525 = phi i32 [ -1, %479 ], [ %516, %486 ]
  %526 = icmp eq i64 %482, 0
  br i1 %526, label %541, label %527

527:                                              ; preds = %521, %527
  %528 = phi i64 [ %538, %527 ], [ %523, %521 ]
  %529 = phi i32 [ %537, %527 ], [ %524, %521 ]
  %530 = phi i32 [ %536, %527 ], [ %525, %521 ]
  %531 = phi i64 [ %539, %527 ], [ %482, %521 ]
  %532 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::AllSameBlocks", %"class.icu_69::(anonymous namespace)::AllSameBlocks"* %9, i64 0, i32 4, i64 %528
  %533 = load i32, i32* %532, align 4
  %534 = icmp slt i32 %533, %529
  %535 = trunc i64 %528 to i32
  %536 = select i1 %534, i32 %535, i32 %530
  %537 = select i1 %534, i32 %533, i32 %529
  %538 = add nuw nsw i64 %528, 1
  %539 = add i64 %531, -1
  %540 = icmp eq i64 %539, 0
  br i1 %540, label %541, label %527, !llvm.loop !15

541:                                              ; preds = %521, %527, %475
  %542 = phi i32 [ -1, %475 ], [ %522, %521 ], [ %536, %527 ]
  store i32 %542, i32* %280, align 4
  %543 = sext i32 %542 to i64
  %544 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::AllSameBlocks", %"class.icu_69::(anonymous namespace)::AllSameBlocks"* %9, i64 0, i32 2, i64 %543
  store i32 %462, i32* %544, align 4
  %545 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::AllSameBlocks", %"class.icu_69::(anonymous namespace)::AllSameBlocks"* %9, i64 0, i32 3, i64 %543
  store i32 %342, i32* %545, align 4
  %546 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::AllSameBlocks", %"class.icu_69::(anonymous namespace)::AllSameBlocks"* %9, i64 0, i32 4, i64 %543
  store i32 %476, i32* %546, align 4
  br label %550

547:                                              ; preds = %470, %461
  %548 = add nsw i32 %465, %462
  %549 = icmp eq i32 %548, %284
  br i1 %549, label %391, label %461

550:                                              ; preds = %541, %384
  %551 = phi i32 [ %387, %384 ], [ %462, %541 ]
  %552 = icmp sgt i32 %551, -1
  br i1 %552, label %553, label %559

553:                                              ; preds = %550
  store i8 2, i8* %295, align 1
  %554 = load i32*, i32** %268, align 8
  %555 = getelementptr inbounds i32, i32* %554, i64 %292
  store i32 %551, i32* %555, align 4
  br label %561

556:                                              ; preds = %376, %456
  %557 = phi i64 [ %458, %456 ], [ %383, %376 ]
  %558 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::AllSameBlocks", %"class.icu_69::(anonymous namespace)::AllSameBlocks"* %9, i64 0, i32 4, i64 %557
  store i32 %290, i32* %558, align 4
  br label %559

559:                                              ; preds = %556, %550
  %560 = add nsw i32 %289, %287
  br label %561

561:                                              ; preds = %559, %553, %336, %321
  %562 = phi i32 [ %560, %559 ], [ %287, %553 ], [ %322, %321 ], [ %340, %336 ]
  %563 = add nsw i32 %290, %284
  %564 = icmp slt i32 %563, %281
  br i1 %564, label %283, label %565

565:                                              ; preds = %561
  %566 = icmp slt i32 %562, 0
  br i1 %566, label %2391, label %595

567:                                              ; preds = %589, %267
  %568 = phi i64 [ 0, %267 ], [ %593, %589 ]
  %569 = icmp slt i64 %568, %274
  br i1 %569, label %570, label %589

570:                                              ; preds = %567
  %571 = lshr i64 %568, 4
  %572 = and i64 %571, 268435455
  %573 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 13, i64 %572
  %574 = load i8, i8* %573, align 1
  %575 = icmp eq i8 %574, 0
  br i1 %575, label %576, label %579

576:                                              ; preds = %570
  %577 = load i32*, i32** %268, align 8
  %578 = getelementptr inbounds i32, i32* %577, i64 %572
  br label %589

579:                                              ; preds = %570
  %580 = trunc i64 %568 to i32
  %581 = load i32*, i32** %273, align 8
  %582 = load i32*, i32** %268, align 8
  %583 = getelementptr inbounds i32, i32* %582, i64 %572
  %584 = load i32, i32* %583, align 4
  %585 = and i32 %580, 15
  %586 = add i32 %584, %585
  %587 = zext i32 %586 to i64
  %588 = getelementptr inbounds i32, i32* %581, i64 %587
  br label %589

589:                                              ; preds = %579, %576, %567
  %590 = phi i32* [ %578, %576 ], [ %588, %579 ], [ %269, %567 ]
  %591 = load i32, i32* %590, align 4
  %592 = getelementptr inbounds [128 x i32], [128 x i32]* %8, i64 0, i64 %568
  store i32 %591, i32* %592, align 4
  %593 = add nuw nsw i64 %568, 1
  %594 = icmp eq i64 %593, 128
  br i1 %594, label %275, label %567

595:                                              ; preds = %565, %275
  %596 = phi i32 [ %562, %565 ], [ 148, %275 ]
  %597 = shl nsw i32 %596, 2
  %598 = sext i32 %597 to i64
  %599 = tail call noalias i8* @uprv_malloc_69(i64 %598) #8
  %600 = icmp eq i8* %599, null
  br i1 %600, label %2391, label %601

601:                                              ; preds = %595
  %602 = bitcast i8* %599 to i32*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %599, i8* nonnull align 16 %272, i64 512, i1 false) #7
  %603 = load i32, i32* %279, align 4
  %604 = icmp eq i32 %603, 0
  br i1 %604, label %676, label %605

605:                                              ; preds = %601
  %606 = icmp sgt i32 %603, 0
  br i1 %606, label %607, label %637

607:                                              ; preds = %605
  %608 = zext i32 %603 to i64
  %609 = add nsw i64 %608, -1
  %610 = and i64 %608, 3
  %611 = icmp ult i64 %609, 3
  br i1 %611, label %614, label %612

612:                                              ; preds = %607
  %613 = sub nsw i64 %608, %610
  br label %641

614:                                              ; preds = %641, %607
  %615 = phi i32 [ undef, %607 ], [ %671, %641 ]
  %616 = phi i64 [ 0, %607 ], [ %673, %641 ]
  %617 = phi i32 [ 0, %607 ], [ %672, %641 ]
  %618 = phi i32 [ -1, %607 ], [ %671, %641 ]
  %619 = icmp eq i64 %610, 0
  br i1 %619, label %634, label %620

620:                                              ; preds = %614, %620
  %621 = phi i64 [ %631, %620 ], [ %616, %614 ]
  %622 = phi i32 [ %630, %620 ], [ %617, %614 ]
  %623 = phi i32 [ %629, %620 ], [ %618, %614 ]
  %624 = phi i64 [ %632, %620 ], [ %610, %614 ]
  %625 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::AllSameBlocks", %"class.icu_69::(anonymous namespace)::AllSameBlocks"* %9, i64 0, i32 4, i64 %621
  %626 = load i32, i32* %625, align 4
  %627 = icmp sgt i32 %626, %622
  %628 = trunc i64 %621 to i32
  %629 = select i1 %627, i32 %628, i32 %623
  %630 = select i1 %627, i32 %626, i32 %622
  %631 = add nuw nsw i64 %621, 1
  %632 = add i64 %624, -1
  %633 = icmp eq i64 %632, 0
  br i1 %633, label %634, label %620, !llvm.loop !16

634:                                              ; preds = %620, %614
  %635 = phi i32 [ %615, %614 ], [ %629, %620 ]
  %636 = sext i32 %635 to i64
  br label %637

637:                                              ; preds = %634, %605
  %638 = phi i64 [ -1, %605 ], [ %636, %634 ]
  %639 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::AllSameBlocks", %"class.icu_69::(anonymous namespace)::AllSameBlocks"* %9, i64 0, i32 2, i64 %638
  %640 = load i32, i32* %639, align 4
  br label %676

641:                                              ; preds = %641, %612
  %642 = phi i64 [ 0, %612 ], [ %673, %641 ]
  %643 = phi i32 [ 0, %612 ], [ %672, %641 ]
  %644 = phi i32 [ -1, %612 ], [ %671, %641 ]
  %645 = phi i64 [ %613, %612 ], [ %674, %641 ]
  %646 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::AllSameBlocks", %"class.icu_69::(anonymous namespace)::AllSameBlocks"* %9, i64 0, i32 4, i64 %642
  %647 = load i32, i32* %646, align 4
  %648 = icmp sgt i32 %647, %643
  %649 = trunc i64 %642 to i32
  %650 = select i1 %648, i32 %649, i32 %644
  %651 = select i1 %648, i32 %647, i32 %643
  %652 = or i64 %642, 1
  %653 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::AllSameBlocks", %"class.icu_69::(anonymous namespace)::AllSameBlocks"* %9, i64 0, i32 4, i64 %652
  %654 = load i32, i32* %653, align 4
  %655 = icmp sgt i32 %654, %651
  %656 = trunc i64 %652 to i32
  %657 = select i1 %655, i32 %656, i32 %650
  %658 = select i1 %655, i32 %654, i32 %651
  %659 = or i64 %642, 2
  %660 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::AllSameBlocks", %"class.icu_69::(anonymous namespace)::AllSameBlocks"* %9, i64 0, i32 4, i64 %659
  %661 = load i32, i32* %660, align 4
  %662 = icmp sgt i32 %661, %658
  %663 = trunc i64 %659 to i32
  %664 = select i1 %662, i32 %663, i32 %657
  %665 = select i1 %662, i32 %661, i32 %658
  %666 = or i64 %642, 3
  %667 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::AllSameBlocks", %"class.icu_69::(anonymous namespace)::AllSameBlocks"* %9, i64 0, i32 4, i64 %666
  %668 = load i32, i32* %667, align 4
  %669 = icmp sgt i32 %668, %665
  %670 = trunc i64 %666 to i32
  %671 = select i1 %669, i32 %670, i32 %664
  %672 = select i1 %669, i32 %668, i32 %665
  %673 = add nuw nsw i64 %642, 4
  %674 = add i64 %645, -4
  %675 = icmp eq i64 %674, 0
  br i1 %675, label %614, label %641

676:                                              ; preds = %637, %601
  %677 = phi i32 [ %640, %637 ], [ -1, %601 ]
  %678 = bitcast %"class.icu_69::(anonymous namespace)::MixedBlocks"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %678) #7
  %679 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MixedBlocks", %"class.icu_69::(anonymous namespace)::MixedBlocks"* %10, i64 0, i32 0
  %680 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MixedBlocks", %"class.icu_69::(anonymous namespace)::MixedBlocks"* %10, i64 0, i32 1
  %681 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MixedBlocks", %"class.icu_69::(anonymous namespace)::MixedBlocks"* %10, i64 0, i32 2
  %682 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MixedBlocks", %"class.icu_69::(anonymous namespace)::MixedBlocks"* %10, i64 0, i32 3
  %683 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MixedBlocks", %"class.icu_69::(anonymous namespace)::MixedBlocks"* %10, i64 0, i32 4
  %684 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MixedBlocks", %"class.icu_69::(anonymous namespace)::MixedBlocks"* %10, i64 0, i32 5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %678, i8 -86, i64 32, i1 false) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %678, i8 0, i64 28, i1 false) #7
  %685 = load i32*, i32** %268, align 8
  store i32 0, i32* %685, align 4
  %686 = load i32*, i32** %268, align 8
  %687 = getelementptr inbounds i32, i32* %686, i64 4
  store i32 64, i32* %687, align 4
  %688 = add nsw i32 %596, -63
  %689 = icmp slt i32 %688, 4096
  br i1 %689, label %697, label %690

690:                                              ; preds = %676
  %691 = icmp slt i32 %688, 32768
  br i1 %691, label %697, label %692

692:                                              ; preds = %690
  %693 = icmp slt i32 %688, 131072
  %694 = select i1 %693, i32 17, i32 21
  %695 = select i1 %693, i32 131071, i32 2097151
  %696 = select i1 %693, i32 200003, i32 1500007
  br label %697

697:                                              ; preds = %692, %690, %676
  %698 = phi i32 [ 12, %676 ], [ 15, %690 ], [ %694, %692 ]
  %699 = phi i32 [ 4095, %676 ], [ 32767, %690 ], [ %695, %692 ]
  %700 = phi i32 [ 6007, %676 ], [ 50021, %690 ], [ %696, %692 ]
  store i32 %698, i32* %682, align 8
  store i32 %699, i32* %683, align 4
  %701 = load i32, i32* %680, align 8
  %702 = icmp sgt i32 %700, %701
  %703 = bitcast %"class.icu_69::(anonymous namespace)::MixedBlocks"* %10 to i8**
  %704 = load i8*, i8** %703, align 8
  br i1 %702, label %708, label %705

705:                                              ; preds = %697
  %706 = shl nuw nsw i32 %700, 2
  %707 = zext i32 %706 to i64
  br label %715

708:                                              ; preds = %697
  tail call void @uprv_free_69(i8* %704) #7
  %709 = shl nuw nsw i32 %700, 2
  %710 = zext i32 %709 to i64
  %711 = tail call noalias i8* @uprv_malloc_69(i64 %710) #8
  store i8* %711, i8** %703, align 8
  %712 = icmp eq i8* %711, null
  br i1 %712, label %714, label %713

713:                                              ; preds = %708
  store i32 %700, i32* %680, align 8
  br label %715

714:                                              ; preds = %708
  store i32 7, i32* %3, align 4
  br label %2392

715:                                              ; preds = %713, %705
  %716 = phi i64 [ %707, %705 ], [ %710, %713 ]
  %717 = phi i8* [ %704, %705 ], [ %711, %713 ]
  store i32 %700, i32* %681, align 4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %717, i8 0, i64 %716, i1 false) #7
  store i32 64, i32* %684, align 8
  call fastcc void @_ZN6icu_6912_GLOBAL__N_111MixedBlocks6extendIjEEvPKT_iii(%"class.icu_69::(anonymous namespace)::MixedBlocks"* nonnull %10, i32* nonnull %602, i32 0, i32 128) #7
  %718 = load i32, i32* %116, align 8
  %719 = ashr i32 %718, 4
  %720 = icmp sgt i32 %718, 143
  br i1 %720, label %721, label %1290

721:                                              ; preds = %715
  %722 = add nsw i32 %596, -15
  %723 = icmp slt i32 %722, 4096
  %724 = icmp slt i32 %722, 32768
  %725 = icmp slt i32 %722, 131072
  %726 = zext i32 %115 to i64
  %727 = select i1 %723, i32 12, i32 15
  %728 = select i1 %723, i32 4095, i32 32767
  %729 = select i1 %723, i32 6007, i32 50021
  %730 = select i1 %725, i32 17, i32 21
  %731 = select i1 %725, i32 131071, i32 2097151
  %732 = select i1 %725, i32 200003, i32 1500007
  br label %733

733:                                              ; preds = %1285, %721
  %734 = phi i32 [ 8, %721 ], [ %1287, %1285 ]
  %735 = phi i32 [ 0, %721 ], [ %762, %1285 ]
  %736 = phi i32 [ 4, %721 ], [ %761, %1285 ]
  %737 = phi i32 [ 64, %721 ], [ %760, %1285 ]
  %738 = phi i32 [ 128, %721 ], [ %1286, %1285 ]
  %739 = icmp eq i32 %734, %115
  br i1 %739, label %740, label %759

740:                                              ; preds = %733
  %741 = select i1 %724, i32 %727, i32 %730
  %742 = select i1 %724, i32 %728, i32 %731
  %743 = select i1 %724, i32 %729, i32 %732
  store i32 %741, i32* %682, align 8
  store i32 %742, i32* %683, align 4
  %744 = load i32, i32* %680, align 8
  %745 = icmp sgt i32 %743, %744
  %746 = load i8*, i8** %703, align 8
  br i1 %745, label %750, label %747

747:                                              ; preds = %740
  %748 = shl nuw nsw i32 %743, 2
  %749 = zext i32 %748 to i64
  br label %756

750:                                              ; preds = %740
  tail call void @uprv_free_69(i8* %746) #7
  %751 = shl nuw nsw i32 %743, 2
  %752 = zext i32 %751 to i64
  %753 = tail call noalias i8* @uprv_malloc_69(i64 %752) #8
  store i8* %753, i8** %703, align 8
  %754 = icmp eq i8* %753, null
  br i1 %754, label %1289, label %755

755:                                              ; preds = %750
  store i32 %743, i32* %680, align 8
  br label %756

756:                                              ; preds = %755, %747
  %757 = phi i64 [ %749, %747 ], [ %752, %755 ]
  %758 = phi i8* [ %746, %747 ], [ %753, %755 ]
  store i32 %743, i32* %681, align 4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %758, i8 0, i64 %757, i1 false) #7
  store i32 16, i32* %684, align 8
  call fastcc void @_ZN6icu_6912_GLOBAL__N_111MixedBlocks6extendIjEEvPKT_iii(%"class.icu_69::(anonymous namespace)::MixedBlocks"* nonnull %10, i32* nonnull %602, i32 0, i32 %738) #7
  br label %759

759:                                              ; preds = %756, %733
  %760 = phi i32 [ 16, %756 ], [ %737, %733 ]
  %761 = phi i32 [ 1, %756 ], [ %736, %733 ]
  %762 = phi i32 [ %738, %756 ], [ %735, %733 ]
  %763 = sext i32 %734 to i64
  %764 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 13, i64 %763
  %765 = load i8, i8* %764, align 1
  switch i8 %765, label %1278 [
    i8 0, label %766
    i8 1, label %1026
  ]

766:                                              ; preds = %759
  %767 = load i32*, i32** %268, align 8
  %768 = getelementptr inbounds i32, i32* %767, i64 %763
  %769 = load i32, i32* %768, align 4
  %770 = load i32, i32* %684, align 8
  %771 = icmp sgt i32 %770, 1
  br i1 %771, label %772, label %811

772:                                              ; preds = %766
  %773 = add i32 %770, -1
  %774 = add i32 %770, -2
  %775 = and i32 %773, 7
  %776 = icmp ult i32 %774, 7
  br i1 %776, label %800, label %777

777:                                              ; preds = %772
  %778 = sub i32 %773, %775
  br label %779

779:                                              ; preds = %779, %777
  %780 = phi i32 [ %769, %777 ], [ %797, %779 ]
  %781 = phi i32 [ %778, %777 ], [ %798, %779 ]
  %782 = mul i32 %780, 37
  %783 = add i32 %782, %769
  %784 = mul i32 %783, 37
  %785 = add i32 %784, %769
  %786 = mul i32 %785, 37
  %787 = add i32 %786, %769
  %788 = mul i32 %787, 37
  %789 = add i32 %788, %769
  %790 = mul i32 %789, 37
  %791 = add i32 %790, %769
  %792 = mul i32 %791, 37
  %793 = add i32 %792, %769
  %794 = mul i32 %793, 37
  %795 = add i32 %794, %769
  %796 = mul i32 %795, 37
  %797 = add i32 %796, %769
  %798 = add i32 %781, -8
  %799 = icmp eq i32 %798, 0
  br i1 %799, label %800, label %779

800:                                              ; preds = %779, %772
  %801 = phi i32 [ undef, %772 ], [ %797, %779 ]
  %802 = phi i32 [ %769, %772 ], [ %797, %779 ]
  %803 = icmp eq i32 %775, 0
  br i1 %803, label %811, label %804

804:                                              ; preds = %800, %804
  %805 = phi i32 [ %808, %804 ], [ %802, %800 ]
  %806 = phi i32 [ %809, %804 ], [ %775, %800 ]
  %807 = mul i32 %805, 37
  %808 = add i32 %807, %769
  %809 = add i32 %806, -1
  %810 = icmp eq i32 %809, 0
  br i1 %810, label %811, label %804, !llvm.loop !17

811:                                              ; preds = %800, %804, %766
  %812 = phi i32 [ %769, %766 ], [ %801, %800 ], [ %808, %804 ]
  %813 = load i32, i32* %682, align 8
  %814 = shl i32 %812, %813
  %815 = load i32, i32* %681, align 4
  %816 = add nsw i32 %815, -1
  %817 = urem i32 %812, %816
  %818 = add nuw i32 %817, 1
  %819 = load i32*, i32** %679, align 8
  %820 = sext i32 %818 to i64
  %821 = getelementptr inbounds i32, i32* %819, i64 %820
  %822 = load i32, i32* %821, align 4
  %823 = icmp eq i32 %822, 0
  br i1 %823, label %829, label %824

824:                                              ; preds = %811
  %825 = load i32, i32* %683, align 4
  %826 = xor i32 %825, -1
  %827 = sext i32 %770 to i64
  %828 = icmp sgt i32 %770, 0
  br label %832

829:                                              ; preds = %853, %811
  %830 = phi i32 [ %818, %811 ], [ %855, %853 ]
  %831 = xor i32 %830, -1
  br label %860

832:                                              ; preds = %853, %824
  %833 = phi i32 [ %822, %824 ], [ %858, %853 ]
  %834 = phi i32 [ %818, %824 ], [ %855, %853 ]
  %835 = and i32 %833, %826
  %836 = icmp eq i32 %835, %814
  br i1 %836, label %837, label %853

837:                                              ; preds = %832
  %838 = and i32 %833, %825
  %839 = add i32 %838, -1
  %840 = sext i32 %839 to i64
  %841 = getelementptr inbounds i32, i32* %602, i64 %840
  %842 = getelementptr inbounds i32, i32* %841, i64 %827
  br i1 %828, label %843, label %850

843:                                              ; preds = %837, %847
  %844 = phi i32* [ %848, %847 ], [ %841, %837 ]
  %845 = load i32, i32* %844, align 4
  %846 = icmp eq i32 %845, %769
  br i1 %846, label %847, label %850

847:                                              ; preds = %843
  %848 = getelementptr inbounds i32, i32* %844, i64 1
  %849 = icmp ult i32* %848, %842
  br i1 %849, label %843, label %850

850:                                              ; preds = %847, %843, %837
  %851 = phi i32* [ %841, %837 ], [ %848, %847 ], [ %844, %843 ]
  %852 = icmp eq i32* %851, %842
  br i1 %852, label %860, label %853

853:                                              ; preds = %850, %832
  %854 = add nsw i32 %834, %818
  %855 = srem i32 %854, %815
  %856 = sext i32 %855 to i64
  %857 = getelementptr inbounds i32, i32* %819, i64 %856
  %858 = load i32, i32* %857, align 4
  %859 = icmp eq i32 %858, 0
  br i1 %859, label %829, label %832

860:                                              ; preds = %850, %829
  %861 = phi i32 [ %831, %829 ], [ %834, %850 ]
  %862 = icmp sgt i32 %861, -1
  br i1 %862, label %863, label %870

863:                                              ; preds = %860
  %864 = sext i32 %861 to i64
  %865 = getelementptr inbounds i32, i32* %819, i64 %864
  %866 = load i32, i32* %865, align 4
  %867 = load i32, i32* %683, align 4
  %868 = and i32 %867, %866
  %869 = add i32 %868, -1
  br label %870

870:                                              ; preds = %863, %860
  %871 = phi i32 [ %869, %863 ], [ -1, %860 ]
  %872 = icmp sgt i32 %871, -1
  %873 = icmp eq i32 %734, %677
  %874 = and i1 %873, %872
  %875 = icmp sge i32 %734, %115
  %876 = and i1 %875, %874
  %877 = icmp slt i32 %871, %762
  %878 = and i1 %877, %876
  br i1 %878, label %879, label %921

879:                                              ; preds = %870
  %880 = sub nsw i32 %738, %760
  %881 = icmp eq i32 %760, 1
  %882 = zext i32 %760 to i64
  br label %883

883:                                              ; preds = %917, %879
  %884 = phi i32 [ %871, %879 ], [ %897, %917 ]
  br label %887

885:                                              ; preds = %887
  %886 = icmp ult i64 %892, %726
  br i1 %886, label %887, label %924

887:                                              ; preds = %885, %883
  %888 = phi i64 [ %892, %885 ], [ 0, %883 ]
  %889 = getelementptr inbounds i32, i32* %767, i64 %888
  %890 = load i32, i32* %889, align 4
  %891 = icmp eq i32 %890, %884
  %892 = add nuw nsw i64 %888, 4
  br i1 %891, label %893, label %885

893:                                              ; preds = %887
  %894 = icmp sgt i32 %880, %884
  br i1 %894, label %895, label %926

895:                                              ; preds = %893, %914
  %896 = phi i32 [ %915, %914 ], [ %884, %893 ]
  %897 = add nsw i32 %896, 1
  %898 = sext i32 %897 to i64
  %899 = getelementptr inbounds i32, i32* %602, i64 %898
  %900 = load i32, i32* %899, align 4
  %901 = icmp eq i32 %900, %769
  br i1 %901, label %902, label %914

902:                                              ; preds = %895
  br i1 %881, label %917, label %905

903:                                              ; preds = %905
  %904 = icmp eq i64 %911, %882
  br i1 %904, label %917, label %905

905:                                              ; preds = %902, %903
  %906 = phi i64 [ %911, %903 ], [ 1, %902 ]
  %907 = add nsw i64 %906, %898
  %908 = getelementptr inbounds i32, i32* %602, i64 %907
  %909 = load i32, i32* %908, align 4
  %910 = icmp eq i32 %909, %769
  %911 = add nuw nsw i64 %906, 1
  br i1 %910, label %903, label %912

912:                                              ; preds = %905
  %913 = trunc i64 %907 to i32
  br label %914

914:                                              ; preds = %912, %895
  %915 = phi i32 [ %897, %895 ], [ %913, %912 ]
  %916 = icmp slt i32 %915, %880
  br i1 %916, label %895, label %926

917:                                              ; preds = %902, %903
  %918 = icmp sgt i32 %896, -2
  %919 = icmp slt i32 %897, %762
  %920 = and i1 %918, %919
  br i1 %920, label %883, label %921

921:                                              ; preds = %917, %870
  %922 = phi i32 [ %871, %870 ], [ %897, %917 ]
  %923 = phi i1 [ %872, %870 ], [ %918, %917 ]
  br i1 %923, label %924, label %926

924:                                              ; preds = %885, %921
  %925 = phi i32 [ %922, %921 ], [ %884, %885 ]
  store i32 %925, i32* %768, align 4
  br label %1285

926:                                              ; preds = %893, %914, %921
  %927 = add i32 %738, 1
  %928 = sub i32 %927, %760
  %929 = sext i32 %738 to i64
  %930 = sext i32 %928 to i64
  br label %931

931:                                              ; preds = %934, %926
  %932 = phi i64 [ %935, %934 ], [ %929, %926 ]
  %933 = icmp sgt i64 %932, %930
  br i1 %933, label %934, label %939

934:                                              ; preds = %931
  %935 = add nsw i64 %932, -1
  %936 = getelementptr inbounds i32, i32* %602, i64 %935
  %937 = load i32, i32* %936, align 4
  %938 = icmp eq i32 %937, %769
  br i1 %938, label %931, label %939

939:                                              ; preds = %934, %931
  %940 = trunc i64 %932 to i32
  %941 = sub nsw i32 %738, %940
  store i32 %940, i32* %768, align 4
  %942 = icmp slt i32 %941, %760
  br i1 %942, label %943, label %1024

943:                                              ; preds = %939
  %944 = add i32 %760, -1
  %945 = add i32 %944, %940
  %946 = sub i32 %945, %738
  %947 = zext i32 %946 to i64
  %948 = add nuw nsw i64 %947, 1
  %949 = icmp ult i64 %948, 8
  br i1 %949, label %1011, label %950

950:                                              ; preds = %943
  %951 = and i64 %948, 8589934584
  %952 = add nsw i64 %951, %929
  %953 = trunc i64 %951 to i32
  %954 = add i32 %941, %953
  %955 = insertelement <4 x i32> undef, i32 %769, i32 0
  %956 = shufflevector <4 x i32> %955, <4 x i32> undef, <4 x i32> zeroinitializer
  %957 = insertelement <4 x i32> undef, i32 %769, i32 0
  %958 = shufflevector <4 x i32> %957, <4 x i32> undef, <4 x i32> zeroinitializer
  %959 = add nsw i64 %951, -8
  %960 = lshr exact i64 %959, 3
  %961 = add nuw nsw i64 %960, 1
  %962 = and i64 %961, 3
  %963 = icmp ult i64 %959, 24
  br i1 %963, label %995, label %964

964:                                              ; preds = %950
  %965 = sub nsw i64 %961, %962
  br label %966

966:                                              ; preds = %966, %964
  %967 = phi i64 [ 0, %964 ], [ %992, %966 ]
  %968 = phi i64 [ %965, %964 ], [ %993, %966 ]
  %969 = add i64 %967, %929
  %970 = getelementptr inbounds i32, i32* %602, i64 %969
  %971 = bitcast i32* %970 to <4 x i32>*
  store <4 x i32> %956, <4 x i32>* %971, align 4
  %972 = getelementptr inbounds i32, i32* %970, i64 4
  %973 = bitcast i32* %972 to <4 x i32>*
  store <4 x i32> %958, <4 x i32>* %973, align 4
  %974 = or i64 %967, 8
  %975 = add i64 %974, %929
  %976 = getelementptr inbounds i32, i32* %602, i64 %975
  %977 = bitcast i32* %976 to <4 x i32>*
  store <4 x i32> %956, <4 x i32>* %977, align 4
  %978 = getelementptr inbounds i32, i32* %976, i64 4
  %979 = bitcast i32* %978 to <4 x i32>*
  store <4 x i32> %958, <4 x i32>* %979, align 4
  %980 = or i64 %967, 16
  %981 = add i64 %980, %929
  %982 = getelementptr inbounds i32, i32* %602, i64 %981
  %983 = bitcast i32* %982 to <4 x i32>*
  store <4 x i32> %956, <4 x i32>* %983, align 4
  %984 = getelementptr inbounds i32, i32* %982, i64 4
  %985 = bitcast i32* %984 to <4 x i32>*
  store <4 x i32> %958, <4 x i32>* %985, align 4
  %986 = or i64 %967, 24
  %987 = add i64 %986, %929
  %988 = getelementptr inbounds i32, i32* %602, i64 %987
  %989 = bitcast i32* %988 to <4 x i32>*
  store <4 x i32> %956, <4 x i32>* %989, align 4
  %990 = getelementptr inbounds i32, i32* %988, i64 4
  %991 = bitcast i32* %990 to <4 x i32>*
  store <4 x i32> %958, <4 x i32>* %991, align 4
  %992 = add i64 %967, 32
  %993 = add i64 %968, -4
  %994 = icmp eq i64 %993, 0
  br i1 %994, label %995, label %966, !llvm.loop !18

995:                                              ; preds = %966, %950
  %996 = phi i64 [ 0, %950 ], [ %992, %966 ]
  %997 = icmp eq i64 %962, 0
  br i1 %997, label %1009, label %998

998:                                              ; preds = %995, %998
  %999 = phi i64 [ %1006, %998 ], [ %996, %995 ]
  %1000 = phi i64 [ %1007, %998 ], [ %962, %995 ]
  %1001 = add i64 %999, %929
  %1002 = getelementptr inbounds i32, i32* %602, i64 %1001
  %1003 = bitcast i32* %1002 to <4 x i32>*
  store <4 x i32> %956, <4 x i32>* %1003, align 4
  %1004 = getelementptr inbounds i32, i32* %1002, i64 4
  %1005 = bitcast i32* %1004 to <4 x i32>*
  store <4 x i32> %958, <4 x i32>* %1005, align 4
  %1006 = add i64 %999, 8
  %1007 = add i64 %1000, -1
  %1008 = icmp eq i64 %1007, 0
  br i1 %1008, label %1009, label %998, !llvm.loop !19

1009:                                             ; preds = %998, %995
  %1010 = icmp eq i64 %948, %951
  br i1 %1010, label %1021, label %1011

1011:                                             ; preds = %1009, %943
  %1012 = phi i64 [ %929, %943 ], [ %952, %1009 ]
  %1013 = phi i32 [ %941, %943 ], [ %954, %1009 ]
  br label %1014

1014:                                             ; preds = %1011, %1014
  %1015 = phi i64 [ %1017, %1014 ], [ %1012, %1011 ]
  %1016 = phi i32 [ %1019, %1014 ], [ %1013, %1011 ]
  %1017 = add nsw i64 %1015, 1
  %1018 = getelementptr inbounds i32, i32* %602, i64 %1015
  store i32 %769, i32* %1018, align 4
  %1019 = add nsw i32 %1016, 1
  %1020 = icmp eq i32 %1019, %760
  br i1 %1020, label %1021, label %1014, !llvm.loop !20

1021:                                             ; preds = %1014, %1009
  %1022 = phi i64 [ %952, %1009 ], [ %1017, %1014 ]
  %1023 = trunc i64 %1022 to i32
  br label %1024

1024:                                             ; preds = %1021, %939
  %1025 = phi i32 [ %738, %939 ], [ %1023, %1021 ]
  call fastcc void @_ZN6icu_6912_GLOBAL__N_111MixedBlocks6extendIjEEvPKT_iii(%"class.icu_69::(anonymous namespace)::MixedBlocks"* nonnull %10, i32* nonnull %602, i32 %738, i32 %1025) #7
  br label %1285

1026:                                             ; preds = %759
  %1027 = load i32*, i32** %273, align 8
  %1028 = load i32*, i32** %268, align 8
  %1029 = getelementptr inbounds i32, i32* %1028, i64 %763
  %1030 = load i32, i32* %1029, align 4
  %1031 = zext i32 %1030 to i64
  %1032 = getelementptr inbounds i32, i32* %1027, i64 %1031
  %1033 = load i32, i32* %684, align 8
  %1034 = load i32, i32* %1032, align 4
  %1035 = sext i32 %1033 to i64
  br label %1036

1036:                                             ; preds = %1036, %1026
  %1037 = phi i64 [ %1040, %1036 ], [ 1, %1026 ]
  %1038 = phi i32 [ %1043, %1036 ], [ %1034, %1026 ]
  %1039 = mul i32 %1038, 37
  %1040 = add nuw nsw i64 %1037, 1
  %1041 = getelementptr inbounds i32, i32* %1032, i64 %1037
  %1042 = load i32, i32* %1041, align 4
  %1043 = add i32 %1039, %1042
  %1044 = icmp slt i64 %1040, %1035
  br i1 %1044, label %1036, label %1045

1045:                                             ; preds = %1036
  %1046 = load i32, i32* %682, align 8
  %1047 = shl i32 %1043, %1046
  %1048 = load i32, i32* %681, align 4
  %1049 = add nsw i32 %1048, -1
  %1050 = urem i32 %1043, %1049
  %1051 = add nuw i32 %1050, 1
  %1052 = load i32*, i32** %679, align 8
  %1053 = sext i32 %1051 to i64
  %1054 = getelementptr inbounds i32, i32* %1052, i64 %1053
  %1055 = load i32, i32* %1054, align 4
  %1056 = icmp eq i32 %1055, 0
  br i1 %1056, label %1061, label %1057

1057:                                             ; preds = %1045
  %1058 = load i32, i32* %683, align 4
  %1059 = xor i32 %1058, -1
  %1060 = icmp sgt i32 %1033, 0
  br label %1064

1061:                                             ; preds = %1090, %1045
  %1062 = phi i32 [ %1051, %1045 ], [ %1092, %1090 ]
  %1063 = xor i32 %1062, -1
  br label %1097

1064:                                             ; preds = %1090, %1057
  %1065 = phi i32 [ %1055, %1057 ], [ %1095, %1090 ]
  %1066 = phi i32 [ %1051, %1057 ], [ %1092, %1090 ]
  %1067 = and i32 %1065, %1059
  %1068 = icmp eq i32 %1067, %1047
  br i1 %1068, label %1069, label %1090

1069:                                             ; preds = %1064
  br i1 %1060, label %1070, label %1087

1070:                                             ; preds = %1069
  %1071 = and i32 %1065, %1058
  %1072 = add i32 %1071, -1
  %1073 = sext i32 %1072 to i64
  %1074 = getelementptr inbounds i32, i32* %602, i64 %1073
  br label %1075

1075:                                             ; preds = %1082, %1070
  %1076 = phi i32 [ %1085, %1082 ], [ %1033, %1070 ]
  %1077 = phi i32* [ %1084, %1082 ], [ %1032, %1070 ]
  %1078 = phi i32* [ %1083, %1082 ], [ %1074, %1070 ]
  %1079 = load i32, i32* %1078, align 4
  %1080 = load i32, i32* %1077, align 4
  %1081 = icmp eq i32 %1079, %1080
  br i1 %1081, label %1082, label %1090

1082:                                             ; preds = %1075
  %1083 = getelementptr inbounds i32, i32* %1078, i64 1
  %1084 = getelementptr inbounds i32, i32* %1077, i64 1
  %1085 = add nsw i32 %1076, -1
  %1086 = icmp sgt i32 %1085, 0
  br i1 %1086, label %1075, label %1087

1087:                                             ; preds = %1082, %1069
  %1088 = phi i32 [ %1033, %1069 ], [ %1085, %1082 ]
  %1089 = icmp eq i32 %1088, 0
  br i1 %1089, label %1097, label %1090

1090:                                             ; preds = %1075, %1087, %1064
  %1091 = add nsw i32 %1066, %1051
  %1092 = srem i32 %1091, %1048
  %1093 = sext i32 %1092 to i64
  %1094 = getelementptr inbounds i32, i32* %1052, i64 %1093
  %1095 = load i32, i32* %1094, align 4
  %1096 = icmp eq i32 %1095, 0
  br i1 %1096, label %1061, label %1064

1097:                                             ; preds = %1087, %1061
  %1098 = phi i32 [ %1063, %1061 ], [ %1066, %1087 ]
  %1099 = icmp sgt i32 %1098, -1
  br i1 %1099, label %1100, label %1109

1100:                                             ; preds = %1097
  %1101 = sext i32 %1098 to i64
  %1102 = getelementptr inbounds i32, i32* %1052, i64 %1101
  %1103 = load i32, i32* %1102, align 4
  %1104 = load i32, i32* %683, align 4
  %1105 = and i32 %1104, %1103
  %1106 = add i32 %1105, -1
  %1107 = icmp sgt i32 %1106, -1
  br i1 %1107, label %1108, label %1109

1108:                                             ; preds = %1100
  store i32 %1106, i32* %1029, align 4
  br label %1285

1109:                                             ; preds = %1100, %1097
  %1110 = sext i32 %760 to i64
  %1111 = sext i32 %738 to i64
  br label %1112

1112:                                             ; preds = %1132, %1109
  %1113 = phi i64 [ %1114, %1132 ], [ %1110, %1109 ]
  %1114 = add nsw i64 %1113, -1
  %1115 = icmp sgt i64 %1114, 0
  br i1 %1115, label %1116, label %1135

1116:                                             ; preds = %1112
  %1117 = trunc i64 %1114 to i32
  %1118 = sub nsw i64 %1111, %1114
  %1119 = getelementptr inbounds i32, i32* %602, i64 %1118
  br label %1120

1120:                                             ; preds = %1127, %1116
  %1121 = phi i32 [ %1130, %1127 ], [ %1117, %1116 ]
  %1122 = phi i32* [ %1129, %1127 ], [ %1032, %1116 ]
  %1123 = phi i32* [ %1128, %1127 ], [ %1119, %1116 ]
  %1124 = load i32, i32* %1123, align 4
  %1125 = load i32, i32* %1122, align 4
  %1126 = icmp eq i32 %1124, %1125
  br i1 %1126, label %1127, label %1132

1127:                                             ; preds = %1120
  %1128 = getelementptr inbounds i32, i32* %1123, i64 1
  %1129 = getelementptr inbounds i32, i32* %1122, i64 1
  %1130 = add nsw i32 %1121, -1
  %1131 = icmp sgt i32 %1130, 0
  br i1 %1131, label %1120, label %1132

1132:                                             ; preds = %1127, %1120
  %1133 = phi i32 [ %1130, %1127 ], [ %1121, %1120 ]
  %1134 = icmp eq i32 %1133, 0
  br i1 %1134, label %1135, label %1112

1135:                                             ; preds = %1132, %1112
  %1136 = trunc i64 %1114 to i32
  %1137 = sub nsw i32 %738, %1136
  store i32 %1137, i32* %1029, align 4
  %1138 = icmp sgt i32 %760, %1136
  br i1 %1138, label %1139, label %1276

1139:                                             ; preds = %1135
  %1140 = shl i64 %1114, 32
  %1141 = ashr exact i64 %1140, 32
  %1142 = shl i64 %1114, 32
  %1143 = ashr exact i64 %1142, 32
  %1144 = sub nsw i64 %1110, %1143
  %1145 = icmp ult i64 %1144, 8
  br i1 %1145, label %1225, label %1146

1146:                                             ; preds = %1139
  %1147 = shl nsw i64 %1111, 2
  %1148 = getelementptr i8, i8* %599, i64 %1147
  %1149 = add nsw i64 %1110, %1111
  %1150 = shl nsw i64 %1149, 2
  %1151 = shl i64 %1114, 32
  %1152 = ashr exact i64 %1151, 32
  %1153 = ashr exact i64 %1151, 30
  %1154 = sub nsw i64 %1150, %1153
  %1155 = getelementptr i8, i8* %599, i64 %1154
  %1156 = add nsw i64 %1152, %1031
  %1157 = getelementptr i32, i32* %1027, i64 %1156
  %1158 = bitcast i32* %1157 to i8*
  %1159 = add nsw i64 %1110, %1031
  %1160 = getelementptr i32, i32* %1027, i64 %1159
  %1161 = bitcast i32* %1160 to i8*
  %1162 = icmp ult i8* %1148, %1161
  %1163 = icmp ugt i8* %1155, %1158
  %1164 = and i1 %1162, %1163
  br i1 %1164, label %1225, label %1165

1165:                                             ; preds = %1146
  %1166 = and i64 %1144, -8
  %1167 = add nsw i64 %1166, %1111
  %1168 = add nsw i64 %1141, %1166
  %1169 = add nsw i64 %1166, -8
  %1170 = lshr exact i64 %1169, 3
  %1171 = add nuw nsw i64 %1170, 1
  %1172 = and i64 %1171, 1
  %1173 = icmp eq i64 %1169, 0
  br i1 %1173, label %1207, label %1174

1174:                                             ; preds = %1165
  %1175 = sub nuw nsw i64 %1171, %1172
  br label %1176

1176:                                             ; preds = %1176, %1174
  %1177 = phi i64 [ 0, %1174 ], [ %1204, %1176 ]
  %1178 = phi i64 [ %1175, %1174 ], [ %1205, %1176 ]
  %1179 = add i64 %1177, %1111
  %1180 = add i64 %1141, %1177
  %1181 = getelementptr inbounds i32, i32* %1032, i64 %1180
  %1182 = bitcast i32* %1181 to <4 x i32>*
  %1183 = load <4 x i32>, <4 x i32>* %1182, align 4, !alias.scope !21
  %1184 = getelementptr inbounds i32, i32* %1181, i64 4
  %1185 = bitcast i32* %1184 to <4 x i32>*
  %1186 = load <4 x i32>, <4 x i32>* %1185, align 4, !alias.scope !21
  %1187 = getelementptr inbounds i32, i32* %602, i64 %1179
  %1188 = bitcast i32* %1187 to <4 x i32>*
  store <4 x i32> %1183, <4 x i32>* %1188, align 4, !alias.scope !24, !noalias !21
  %1189 = getelementptr inbounds i32, i32* %1187, i64 4
  %1190 = bitcast i32* %1189 to <4 x i32>*
  store <4 x i32> %1186, <4 x i32>* %1190, align 4, !alias.scope !24, !noalias !21
  %1191 = or i64 %1177, 8
  %1192 = add i64 %1191, %1111
  %1193 = add i64 %1141, %1191
  %1194 = getelementptr inbounds i32, i32* %1032, i64 %1193
  %1195 = bitcast i32* %1194 to <4 x i32>*
  %1196 = load <4 x i32>, <4 x i32>* %1195, align 4, !alias.scope !21
  %1197 = getelementptr inbounds i32, i32* %1194, i64 4
  %1198 = bitcast i32* %1197 to <4 x i32>*
  %1199 = load <4 x i32>, <4 x i32>* %1198, align 4, !alias.scope !21
  %1200 = getelementptr inbounds i32, i32* %602, i64 %1192
  %1201 = bitcast i32* %1200 to <4 x i32>*
  store <4 x i32> %1196, <4 x i32>* %1201, align 4, !alias.scope !24, !noalias !21
  %1202 = getelementptr inbounds i32, i32* %1200, i64 4
  %1203 = bitcast i32* %1202 to <4 x i32>*
  store <4 x i32> %1199, <4 x i32>* %1203, align 4, !alias.scope !24, !noalias !21
  %1204 = add i64 %1177, 16
  %1205 = add i64 %1178, -2
  %1206 = icmp eq i64 %1205, 0
  br i1 %1206, label %1207, label %1176, !llvm.loop !26

1207:                                             ; preds = %1176, %1165
  %1208 = phi i64 [ 0, %1165 ], [ %1204, %1176 ]
  %1209 = icmp eq i64 %1172, 0
  br i1 %1209, label %1223, label %1210

1210:                                             ; preds = %1207
  %1211 = add i64 %1208, %1111
  %1212 = add i64 %1141, %1208
  %1213 = getelementptr inbounds i32, i32* %1032, i64 %1212
  %1214 = bitcast i32* %1213 to <4 x i32>*
  %1215 = load <4 x i32>, <4 x i32>* %1214, align 4, !alias.scope !21
  %1216 = getelementptr inbounds i32, i32* %1213, i64 4
  %1217 = bitcast i32* %1216 to <4 x i32>*
  %1218 = load <4 x i32>, <4 x i32>* %1217, align 4, !alias.scope !21
  %1219 = getelementptr inbounds i32, i32* %602, i64 %1211
  %1220 = bitcast i32* %1219 to <4 x i32>*
  store <4 x i32> %1215, <4 x i32>* %1220, align 4, !alias.scope !24, !noalias !21
  %1221 = getelementptr inbounds i32, i32* %1219, i64 4
  %1222 = bitcast i32* %1221 to <4 x i32>*
  store <4 x i32> %1218, <4 x i32>* %1222, align 4, !alias.scope !24, !noalias !21
  br label %1223

1223:                                             ; preds = %1207, %1210
  %1224 = icmp eq i64 %1144, %1166
  br i1 %1224, label %1273, label %1225

1225:                                             ; preds = %1223, %1146, %1139
  %1226 = phi i64 [ %1111, %1146 ], [ %1111, %1139 ], [ %1167, %1223 ]
  %1227 = phi i64 [ %1141, %1146 ], [ %1141, %1139 ], [ %1168, %1223 ]
  %1228 = sub nsw i64 %1110, %1227
  %1229 = xor i64 %1227, -1
  %1230 = add nsw i64 %1229, %1110
  %1231 = and i64 %1228, 3
  %1232 = icmp eq i64 %1231, 0
  br i1 %1232, label %1244, label %1233

1233:                                             ; preds = %1225, %1233
  %1234 = phi i64 [ %1240, %1233 ], [ %1226, %1225 ]
  %1235 = phi i64 [ %1237, %1233 ], [ %1227, %1225 ]
  %1236 = phi i64 [ %1242, %1233 ], [ %1231, %1225 ]
  %1237 = add nsw i64 %1235, 1
  %1238 = getelementptr inbounds i32, i32* %1032, i64 %1235
  %1239 = load i32, i32* %1238, align 4
  %1240 = add nsw i64 %1234, 1
  %1241 = getelementptr inbounds i32, i32* %602, i64 %1234
  store i32 %1239, i32* %1241, align 4
  %1242 = add i64 %1236, -1
  %1243 = icmp eq i64 %1242, 0
  br i1 %1243, label %1244, label %1233, !llvm.loop !27

1244:                                             ; preds = %1233, %1225
  %1245 = phi i64 [ undef, %1225 ], [ %1240, %1233 ]
  %1246 = phi i64 [ %1226, %1225 ], [ %1240, %1233 ]
  %1247 = phi i64 [ %1227, %1225 ], [ %1237, %1233 ]
  %1248 = icmp ult i64 %1230, 3
  br i1 %1248, label %1273, label %1249

1249:                                             ; preds = %1244, %1249
  %1250 = phi i64 [ %1270, %1249 ], [ %1246, %1244 ]
  %1251 = phi i64 [ %1267, %1249 ], [ %1247, %1244 ]
  %1252 = add nsw i64 %1251, 1
  %1253 = getelementptr inbounds i32, i32* %1032, i64 %1251
  %1254 = load i32, i32* %1253, align 4
  %1255 = add nsw i64 %1250, 1
  %1256 = getelementptr inbounds i32, i32* %602, i64 %1250
  store i32 %1254, i32* %1256, align 4
  %1257 = add nsw i64 %1251, 2
  %1258 = getelementptr inbounds i32, i32* %1032, i64 %1252
  %1259 = load i32, i32* %1258, align 4
  %1260 = add nsw i64 %1250, 2
  %1261 = getelementptr inbounds i32, i32* %602, i64 %1255
  store i32 %1259, i32* %1261, align 4
  %1262 = add nsw i64 %1251, 3
  %1263 = getelementptr inbounds i32, i32* %1032, i64 %1257
  %1264 = load i32, i32* %1263, align 4
  %1265 = add nsw i64 %1250, 3
  %1266 = getelementptr inbounds i32, i32* %602, i64 %1260
  store i32 %1264, i32* %1266, align 4
  %1267 = add nsw i64 %1251, 4
  %1268 = getelementptr inbounds i32, i32* %1032, i64 %1262
  %1269 = load i32, i32* %1268, align 4
  %1270 = add nsw i64 %1250, 4
  %1271 = getelementptr inbounds i32, i32* %602, i64 %1265
  store i32 %1269, i32* %1271, align 4
  %1272 = icmp eq i64 %1267, %1110
  br i1 %1272, label %1273, label %1249, !llvm.loop !28

1273:                                             ; preds = %1244, %1249, %1223
  %1274 = phi i64 [ %1167, %1223 ], [ %1245, %1244 ], [ %1270, %1249 ]
  %1275 = trunc i64 %1274 to i32
  br label %1276

1276:                                             ; preds = %1273, %1135
  %1277 = phi i32 [ %738, %1135 ], [ %1275, %1273 ]
  call fastcc void @_ZN6icu_6912_GLOBAL__N_111MixedBlocks6extendIjEEvPKT_iii(%"class.icu_69::(anonymous namespace)::MixedBlocks"* nonnull %10, i32* nonnull %602, i32 %738, i32 %1277) #7
  br label %1285

1278:                                             ; preds = %759
  %1279 = load i32*, i32** %268, align 8
  %1280 = getelementptr inbounds i32, i32* %1279, i64 %763
  %1281 = load i32, i32* %1280, align 4
  %1282 = zext i32 %1281 to i64
  %1283 = getelementptr inbounds i32, i32* %1279, i64 %1282
  %1284 = load i32, i32* %1283, align 4
  store i32 %1284, i32* %1280, align 4
  br label %1285

1285:                                             ; preds = %1278, %1276, %1108, %1024, %924
  %1286 = phi i32 [ %738, %1278 ], [ %738, %924 ], [ %1025, %1024 ], [ %738, %1108 ], [ %1277, %1276 ]
  %1287 = add nsw i32 %761, %734
  %1288 = icmp slt i32 %1287, %719
  br i1 %1288, label %733, label %1290

1289:                                             ; preds = %750
  store i32 7, i32* %3, align 4
  br label %2392

1290:                                             ; preds = %1285, %715
  %1291 = phi i32 [ 128, %715 ], [ %1286, %1285 ]
  %1292 = load i32, i32* %3, align 4
  %1293 = icmp slt i32 %1292, 1
  br i1 %1293, label %1294, label %2392

1294:                                             ; preds = %1290
  %1295 = bitcast i32** %273 to i8**
  %1296 = load i8*, i8** %1295, align 8
  tail call void @uprv_free_69(i8* %1296) #7
  store i8* %599, i8** %1295, align 8
  %1297 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 4
  store i32 %596, i32* %1297, align 8
  %1298 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 5
  store i32 %1291, i32* %1298, align 4
  %1299 = icmp sgt i32 %1291, 262159
  br i1 %1299, label %1300, label %1301

1300:                                             ; preds = %1294
  store i32 8, i32* %3, align 4
  br label %2392

1301:                                             ; preds = %1294
  %1302 = icmp sgt i32 %677, -1
  br i1 %1302, label %1303, label %1312

1303:                                             ; preds = %1301
  %1304 = load i32*, i32** %268, align 8
  %1305 = sext i32 %677 to i64
  %1306 = getelementptr inbounds i32, i32* %1304, i64 %1305
  %1307 = load i32, i32* %1306, align 4
  %1308 = sext i32 %1307 to i64
  %1309 = getelementptr inbounds i32, i32* %602, i64 %1308
  %1310 = load i32, i32* %1309, align 4
  %1311 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 8
  store i32 %1310, i32* %1311, align 8
  br label %1312

1312:                                             ; preds = %1303, %1301
  %1313 = phi i32 [ %1307, %1303 ], [ 1048575, %1301 ]
  %1314 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 6
  store i32 %1313, i32* %1314, align 8
  %1315 = lshr exact i32 %114, 6
  %1316 = load i32, i32* %116, align 8
  %1317 = ashr i32 %1316, 6
  %1318 = icmp sgt i32 %1317, %1315
  br i1 %1318, label %1321, label %1319

1319:                                             ; preds = %1312
  %1320 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 2
  store i32 32767, i32* %1320, align 4
  br label %2389

1321:                                             ; preds = %1312
  %1322 = bitcast [1024 x i16]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %1322) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1322, i8 -86, i64 2048, i1 false) #7
  %1323 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 2
  br label %1350

1324:                                             ; preds = %1389
  %1325 = add nsw i32 %1315, -31
  %1326 = icmp slt i32 %1325, 4096
  br i1 %1326, label %1334, label %1327

1327:                                             ; preds = %1324
  %1328 = icmp slt i32 %1325, 32768
  br i1 %1328, label %1334, label %1329

1329:                                             ; preds = %1327
  %1330 = icmp slt i32 %1325, 131072
  %1331 = select i1 %1330, i32 17, i32 21
  %1332 = select i1 %1330, i32 131071, i32 2097151
  %1333 = select i1 %1330, i32 200003, i32 1500007
  br label %1334

1334:                                             ; preds = %1329, %1327, %1324
  %1335 = phi i32 [ 12, %1324 ], [ 15, %1327 ], [ %1331, %1329 ]
  %1336 = phi i32 [ 4095, %1324 ], [ 32767, %1327 ], [ %1332, %1329 ]
  %1337 = phi i32 [ 6007, %1324 ], [ 50021, %1327 ], [ %1333, %1329 ]
  store i32 %1335, i32* %682, align 8
  store i32 %1336, i32* %683, align 4
  %1338 = load i32, i32* %680, align 8
  %1339 = icmp sgt i32 %1337, %1338
  %1340 = load i8*, i8** %703, align 8
  br i1 %1339, label %1344, label %1341

1341:                                             ; preds = %1334
  %1342 = shl nuw nsw i32 %1337, 2
  %1343 = zext i32 %1342 to i64
  br label %1396

1344:                                             ; preds = %1334
  tail call void @uprv_free_69(i8* %1340) #7
  %1345 = shl nuw nsw i32 %1337, 2
  %1346 = zext i32 %1345 to i64
  %1347 = tail call noalias i8* @uprv_malloc_69(i64 %1346) #8
  store i8* %1347, i8** %703, align 8
  %1348 = icmp eq i8* %1347, null
  br i1 %1348, label %1395, label %1349

1349:                                             ; preds = %1344
  store i32 %1337, i32* %680, align 8
  br label %1396

1350:                                             ; preds = %1392, %1321
  %1351 = phi i32 [ %1313, %1321 ], [ %1394, %1392 ]
  %1352 = phi i64 [ 0, %1321 ], [ %1393, %1392 ]
  %1353 = phi i32 [ -1, %1321 ], [ %1373, %1392 ]
  %1354 = phi i32 [ 0, %1321 ], [ %1390, %1392 ]
  %1355 = load i32*, i32** %268, align 8
  %1356 = sext i32 %1354 to i64
  %1357 = getelementptr inbounds i32, i32* %1355, i64 %1356
  %1358 = load i32, i32* %1357, align 4
  %1359 = trunc i32 %1358 to i16
  %1360 = getelementptr inbounds [1024 x i16], [1024 x i16]* %5, i64 0, i64 %1352
  store i16 %1359, i16* %1360, align 2
  %1361 = icmp eq i32 %1358, %1351
  br i1 %1361, label %1362, label %1372

1362:                                             ; preds = %1350
  %1363 = icmp slt i32 %1353, 0
  %1364 = trunc i64 %1352 to i32
  br i1 %1363, label %1372, label %1365

1365:                                             ; preds = %1362
  %1366 = load i32, i32* %1323, align 4
  %1367 = icmp slt i32 %1366, 0
  %1368 = sub nsw i32 %1364, %1353
  %1369 = icmp eq i32 %1368, 31
  %1370 = and i1 %1369, %1367
  br i1 %1370, label %1371, label %1372

1371:                                             ; preds = %1365
  store i32 %1353, i32* %1323, align 4
  br label %1372

1372:                                             ; preds = %1371, %1365, %1362, %1350
  %1373 = phi i32 [ %1353, %1371 ], [ %1353, %1365 ], [ %1364, %1362 ], [ -1, %1350 ]
  %1374 = add nsw i32 %1354, 3
  %1375 = add nsw i32 %1354, 1
  %1376 = sext i32 %1375 to i64
  %1377 = sext i32 %1374 to i64
  %1378 = add i32 %1358, 16
  %1379 = getelementptr inbounds i32, i32* %1355, i64 %1376
  store i32 %1378, i32* %1379, align 4
  %1380 = add nsw i64 %1376, 1
  br label %1381

1381:                                             ; preds = %1381, %1372
  %1382 = phi i64 [ %1380, %1372 ], [ %1387, %1381 ]
  %1383 = phi i32 [ %1378, %1372 ], [ %1385, %1381 ]
  %1384 = load i32*, i32** %268, align 8
  %1385 = add i32 %1383, 16
  %1386 = getelementptr inbounds i32, i32* %1384, i64 %1382
  store i32 %1385, i32* %1386, align 4
  %1387 = add nsw i64 %1382, 1
  %1388 = icmp slt i64 %1382, %1377
  br i1 %1388, label %1381, label %1389

1389:                                             ; preds = %1381
  %1390 = trunc i64 %1387 to i32
  %1391 = icmp sgt i32 %115, %1390
  br i1 %1391, label %1392, label %1324

1392:                                             ; preds = %1389
  %1393 = add nuw i64 %1352, 1
  %1394 = load i32, i32* %1314, align 8
  br label %1350

1395:                                             ; preds = %1344
  store i32 7, i32* %3, align 4
  br label %2387

1396:                                             ; preds = %1349, %1341
  %1397 = phi i64 [ %1343, %1341 ], [ %1346, %1349 ]
  %1398 = phi i8* [ %1340, %1341 ], [ %1347, %1349 ]
  store i32 %1337, i32* %681, align 4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %1398, i8 0, i64 %1397, i1 false) #7
  store i32 32, i32* %684, align 8
  %1399 = getelementptr inbounds [1024 x i16], [1024 x i16]* %5, i64 0, i64 0
  call fastcc void @_ZN6icu_6912_GLOBAL__N_111MixedBlocks6extendItEEvPKT_iii(%"class.icu_69::(anonymous namespace)::MixedBlocks"* nonnull %10, i16* nonnull %1399, i32 0, i32 0, i32 %1315) #7
  %1400 = select i1 %113, i32 4096, i32 0
  %1401 = load i32, i32* %116, align 8
  %1402 = ashr i32 %1401, 4
  %1403 = icmp sgt i32 %1402, %1400
  br i1 %1403, label %1404, label %1416

1404:                                             ; preds = %1396
  %1405 = load i32, i32* %1323, align 4
  br label %1406

1406:                                             ; preds = %1551, %1404
  %1407 = phi i32 [ %1405, %1404 ], [ %1554, %1551 ]
  %1408 = phi i32 [ %1400, %1404 ], [ %1445, %1551 ]
  %1409 = phi i8 [ 0, %1404 ], [ %1553, %1551 ]
  %1410 = phi i32 [ 0, %1404 ], [ %1552, %1551 ]
  %1411 = load i32*, i32** %268, align 8
  %1412 = load i32, i32* %1314, align 8
  %1413 = add nsw i32 %1408, 31
  %1414 = sext i32 %1408 to i64
  %1415 = sext i32 %1413 to i64
  br label %1433

1416:                                             ; preds = %1551, %1396
  %1417 = phi i32 [ 0, %1396 ], [ %1552, %1551 ]
  %1418 = phi i8 [ 0, %1396 ], [ %1553, %1551 ]
  %1419 = sub nsw i32 %1402, %1400
  %1420 = ashr i32 %1419, 5
  %1421 = add nsw i32 %1420, 31
  %1422 = ashr i32 %1421, 5
  %1423 = add nsw i32 %1422, %1315
  %1424 = add nsw i32 %1423, %1420
  %1425 = add i32 %1424, %1417
  %1426 = shl i32 %1425, 1
  %1427 = add i32 %1426, 2
  %1428 = sext i32 %1427 to i64
  %1429 = tail call noalias i8* @uprv_malloc_69(i64 %1428) #8
  %1430 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 12
  %1431 = bitcast i16** %1430 to i8**
  store i8* %1429, i8** %1431, align 8
  %1432 = icmp eq i8* %1429, null
  br i1 %1432, label %1556, label %1557

1433:                                             ; preds = %1433, %1406
  %1434 = phi i64 [ %1414, %1406 ], [ %1442, %1433 ]
  %1435 = phi i32 [ 0, %1406 ], [ %1439, %1433 ]
  %1436 = phi i8 [ 1, %1406 ], [ %1441, %1433 ]
  %1437 = getelementptr inbounds i32, i32* %1411, i64 %1434
  %1438 = load i32, i32* %1437, align 4
  %1439 = or i32 %1438, %1435
  %1440 = icmp eq i32 %1438, %1412
  %1441 = select i1 %1440, i8 %1436, i8 0
  %1442 = add nsw i64 %1434, 1
  %1443 = icmp slt i64 %1434, %1415
  br i1 %1443, label %1433, label %1444

1444:                                             ; preds = %1433
  %1445 = trunc i64 %1442 to i32
  %1446 = and i8 %1441, 1
  %1447 = icmp eq i8 %1446, 0
  br i1 %1447, label %1456, label %1448

1448:                                             ; preds = %1444
  %1449 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 13, i64 %1414
  store i8 0, i8* %1449, align 1
  %1450 = icmp slt i32 %1407, 0
  br i1 %1450, label %1451, label %1551

1451:                                             ; preds = %1448
  %1452 = icmp ult i32 %1439, 65536
  %1453 = select i1 %1452, i32 32, i32 36
  %1454 = add nsw i32 %1453, %1410
  %1455 = select i1 %1452, i8 %1409, i8 1
  br label %1551

1456:                                             ; preds = %1444
  %1457 = icmp ult i32 %1439, 65536
  br i1 %1457, label %1458, label %1548

1458:                                             ; preds = %1456
  %1459 = load i32, i32* %684, align 8
  %1460 = add nsw i32 %1459, %1408
  %1461 = getelementptr inbounds i32, i32* %1411, i64 %1414
  %1462 = load i32, i32* %1461, align 4
  %1463 = add i32 %1408, 1
  %1464 = sext i32 %1463 to i64
  %1465 = sext i32 %1460 to i64
  br label %1466

1466:                                             ; preds = %1466, %1458
  %1467 = phi i64 [ %1470, %1466 ], [ %1464, %1458 ]
  %1468 = phi i32 [ %1473, %1466 ], [ %1462, %1458 ]
  %1469 = mul i32 %1468, 37
  %1470 = add nsw i64 %1467, 1
  %1471 = getelementptr inbounds i32, i32* %1411, i64 %1467
  %1472 = load i32, i32* %1471, align 4
  %1473 = add i32 %1469, %1472
  %1474 = icmp slt i64 %1470, %1465
  br i1 %1474, label %1466, label %1475

1475:                                             ; preds = %1466
  %1476 = load i32, i32* %682, align 8
  %1477 = shl i32 %1473, %1476
  %1478 = load i32, i32* %681, align 4
  %1479 = add nsw i32 %1478, -1
  %1480 = urem i32 %1473, %1479
  %1481 = add nuw i32 %1480, 1
  %1482 = load i32*, i32** %679, align 8
  %1483 = sext i32 %1481 to i64
  %1484 = getelementptr inbounds i32, i32* %1482, i64 %1483
  %1485 = load i32, i32* %1484, align 4
  %1486 = icmp eq i32 %1485, 0
  br i1 %1486, label %1491, label %1487

1487:                                             ; preds = %1475
  %1488 = load i32, i32* %683, align 4
  %1489 = xor i32 %1488, -1
  %1490 = icmp sgt i32 %1459, 0
  br label %1494

1491:                                             ; preds = %1521, %1475
  %1492 = phi i32 [ %1481, %1475 ], [ %1523, %1521 ]
  %1493 = xor i32 %1492, -1
  br label %1528

1494:                                             ; preds = %1521, %1487
  %1495 = phi i32 [ %1485, %1487 ], [ %1526, %1521 ]
  %1496 = phi i32 [ %1481, %1487 ], [ %1523, %1521 ]
  %1497 = and i32 %1495, %1489
  %1498 = icmp eq i32 %1497, %1477
  br i1 %1498, label %1499, label %1521

1499:                                             ; preds = %1494
  br i1 %1490, label %1500, label %1518

1500:                                             ; preds = %1499
  %1501 = and i32 %1495, %1488
  %1502 = add i32 %1501, -1
  %1503 = sext i32 %1502 to i64
  %1504 = getelementptr inbounds [1024 x i16], [1024 x i16]* %5, i64 0, i64 %1503
  br label %1505

1505:                                             ; preds = %1513, %1500
  %1506 = phi i32 [ %1516, %1513 ], [ %1459, %1500 ]
  %1507 = phi i32* [ %1515, %1513 ], [ %1461, %1500 ]
  %1508 = phi i16* [ %1514, %1513 ], [ %1504, %1500 ]
  %1509 = load i16, i16* %1508, align 2
  %1510 = zext i16 %1509 to i32
  %1511 = load i32, i32* %1507, align 4
  %1512 = icmp eq i32 %1511, %1510
  br i1 %1512, label %1513, label %1521

1513:                                             ; preds = %1505
  %1514 = getelementptr inbounds i16, i16* %1508, i64 1
  %1515 = getelementptr inbounds i32, i32* %1507, i64 1
  %1516 = add nsw i32 %1506, -1
  %1517 = icmp sgt i32 %1516, 0
  br i1 %1517, label %1505, label %1518

1518:                                             ; preds = %1513, %1499
  %1519 = phi i32 [ %1459, %1499 ], [ %1516, %1513 ]
  %1520 = icmp eq i32 %1519, 0
  br i1 %1520, label %1528, label %1521

1521:                                             ; preds = %1505, %1518, %1494
  %1522 = add nsw i32 %1496, %1481
  %1523 = srem i32 %1522, %1478
  %1524 = sext i32 %1523 to i64
  %1525 = getelementptr inbounds i32, i32* %1482, i64 %1524
  %1526 = load i32, i32* %1525, align 4
  %1527 = icmp eq i32 %1526, 0
  br i1 %1527, label %1491, label %1494

1528:                                             ; preds = %1518, %1491
  %1529 = phi i32 [ %1493, %1491 ], [ %1496, %1518 ]
  %1530 = icmp sgt i32 %1529, -1
  br i1 %1530, label %1533, label %1531

1531:                                             ; preds = %1528
  %1532 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 13, i64 %1414
  br label %1545

1533:                                             ; preds = %1528
  %1534 = sext i32 %1529 to i64
  %1535 = getelementptr inbounds i32, i32* %1482, i64 %1534
  %1536 = load i32, i32* %1535, align 4
  %1537 = load i32, i32* %683, align 4
  %1538 = and i32 %1537, %1536
  %1539 = add i32 %1538, -1
  %1540 = icmp sgt i32 %1539, -1
  %1541 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 13, i64 %1414
  br i1 %1540, label %1542, label %1545

1542:                                             ; preds = %1533
  store i8 1, i8* %1541, align 1
  %1543 = load i32*, i32** %268, align 8
  %1544 = getelementptr inbounds i32, i32* %1543, i64 %1414
  store i32 %1539, i32* %1544, align 4
  br label %1551

1545:                                             ; preds = %1533, %1531
  %1546 = phi i8* [ %1532, %1531 ], [ %1541, %1533 ]
  store i8 2, i8* %1546, align 1
  %1547 = add nsw i32 %1410, 32
  br label %1551

1548:                                             ; preds = %1456
  %1549 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 13, i64 %1414
  store i8 3, i8* %1549, align 1
  %1550 = add nsw i32 %1410, 36
  br label %1551

1551:                                             ; preds = %1548, %1545, %1542, %1451, %1448
  %1552 = phi i32 [ %1410, %1448 ], [ %1550, %1548 ], [ %1454, %1451 ], [ %1410, %1542 ], [ %1547, %1545 ]
  %1553 = phi i8 [ %1409, %1448 ], [ 1, %1548 ], [ %1455, %1451 ], [ %1409, %1542 ], [ %1409, %1545 ]
  %1554 = phi i32 [ %1407, %1448 ], [ %1407, %1548 ], [ 0, %1451 ], [ %1407, %1542 ], [ %1407, %1545 ]
  %1555 = icmp sgt i32 %1402, %1445
  br i1 %1555, label %1406, label %1416

1556:                                             ; preds = %1416
  store i32 7, i32* %3, align 4
  br label %2387

1557:                                             ; preds = %1416
  %1558 = lshr exact i32 %114, 5
  %1559 = zext i32 %1558 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %1429, i8* nonnull align 16 %1322, i64 %1559, i1 false) #7
  %1560 = add nsw i32 %1425, -30
  %1561 = icmp slt i32 %1560, 4096
  br i1 %1561, label %1569, label %1562

1562:                                             ; preds = %1557
  %1563 = icmp slt i32 %1560, 32768
  br i1 %1563, label %1569, label %1564

1564:                                             ; preds = %1562
  %1565 = icmp slt i32 %1560, 131072
  %1566 = select i1 %1565, i32 17, i32 21
  %1567 = select i1 %1565, i32 131071, i32 2097151
  %1568 = select i1 %1565, i32 200003, i32 1500007
  br label %1569

1569:                                             ; preds = %1564, %1562, %1557
  %1570 = phi i32 [ 12, %1557 ], [ 15, %1562 ], [ %1566, %1564 ]
  %1571 = phi i32 [ 4095, %1557 ], [ 32767, %1562 ], [ %1567, %1564 ]
  %1572 = phi i32 [ 6007, %1557 ], [ 50021, %1562 ], [ %1568, %1564 ]
  store i32 %1570, i32* %682, align 8
  store i32 %1571, i32* %683, align 4
  %1573 = load i32, i32* %680, align 8
  %1574 = icmp sgt i32 %1572, %1573
  %1575 = load i8*, i8** %703, align 8
  br i1 %1574, label %1579, label %1576

1576:                                             ; preds = %1569
  %1577 = shl nuw nsw i32 %1572, 2
  %1578 = zext i32 %1577 to i64
  br label %1586

1579:                                             ; preds = %1569
  tail call void @uprv_free_69(i8* %1575) #7
  %1580 = shl nuw nsw i32 %1572, 2
  %1581 = zext i32 %1580 to i64
  %1582 = tail call noalias i8* @uprv_malloc_69(i64 %1581) #8
  store i8* %1582, i8** %703, align 8
  %1583 = icmp eq i8* %1582, null
  br i1 %1583, label %1585, label %1584

1584:                                             ; preds = %1579
  store i32 %1572, i32* %680, align 8
  br label %1586

1585:                                             ; preds = %1579
  store i32 7, i32* %3, align 4
  br label %2387

1586:                                             ; preds = %1584, %1576
  %1587 = phi i64 [ %1578, %1576 ], [ %1581, %1584 ]
  %1588 = phi i8* [ %1575, %1576 ], [ %1582, %1584 ]
  store i32 %1572, i32* %681, align 4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %1588, i8 0, i64 %1587, i1 false) #7
  store i32 32, i32* %684, align 8
  %1589 = bitcast %"class.icu_69::(anonymous namespace)::MixedBlocks"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1589) #7
  %1590 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MixedBlocks", %"class.icu_69::(anonymous namespace)::MixedBlocks"* %6, i64 0, i32 0
  %1591 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MixedBlocks", %"class.icu_69::(anonymous namespace)::MixedBlocks"* %6, i64 0, i32 1
  %1592 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MixedBlocks", %"class.icu_69::(anonymous namespace)::MixedBlocks"* %6, i64 0, i32 2
  %1593 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MixedBlocks", %"class.icu_69::(anonymous namespace)::MixedBlocks"* %6, i64 0, i32 3
  %1594 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MixedBlocks", %"class.icu_69::(anonymous namespace)::MixedBlocks"* %6, i64 0, i32 4
  %1595 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MixedBlocks", %"class.icu_69::(anonymous namespace)::MixedBlocks"* %6, i64 0, i32 5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1589, i8 -86, i64 32, i1 false) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1589, i8 0, i64 28, i1 false) #7
  %1596 = and i8 %1418, 1
  %1597 = icmp ne i8 %1596, 0
  br i1 %1597, label %1598, label %1619

1598:                                             ; preds = %1586
  %1599 = add nsw i32 %1425, -34
  %1600 = icmp slt i32 %1599, 4096
  br i1 %1600, label %1608, label %1601

1601:                                             ; preds = %1598
  %1602 = icmp slt i32 %1599, 32768
  br i1 %1602, label %1608, label %1603

1603:                                             ; preds = %1601
  %1604 = icmp slt i32 %1599, 131072
  %1605 = select i1 %1604, i32 17, i32 21
  %1606 = select i1 %1604, i32 131071, i32 2097151
  %1607 = select i1 %1604, i32 200003, i32 1500007
  br label %1608

1608:                                             ; preds = %1603, %1601, %1598
  %1609 = phi i32 [ 12, %1598 ], [ 15, %1601 ], [ %1605, %1603 ]
  %1610 = phi i32 [ 4095, %1598 ], [ 32767, %1601 ], [ %1606, %1603 ]
  %1611 = phi i32 [ 6007, %1598 ], [ 50021, %1601 ], [ %1607, %1603 ]
  store i32 %1609, i32* %1593, align 8
  store i32 %1610, i32* %1594, align 4
  %1612 = bitcast %"class.icu_69::(anonymous namespace)::MixedBlocks"* %6 to i8**
  tail call void @uprv_free_69(i8* null) #7
  %1613 = shl nuw nsw i32 %1611, 2
  %1614 = zext i32 %1613 to i64
  %1615 = tail call noalias i8* @uprv_malloc_69(i64 %1614) #8
  store i8* %1615, i8** %1612, align 8
  %1616 = icmp eq i8* %1615, null
  br i1 %1616, label %1618, label %1617

1617:                                             ; preds = %1608
  store i32 %1611, i32* %1591, align 8
  store i32 %1611, i32* %1592, align 4
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %1615, i8 0, i64 %1614, i1 false) #7
  store i32 36, i32* %1595, align 8
  br label %1619

1618:                                             ; preds = %1608
  store i32 7, i32* %3, align 4
  br label %2384

1619:                                             ; preds = %1617, %1586
  %1620 = phi i8* [ %1615, %1617 ], [ null, %1586 ]
  %1621 = bitcast [2176 x i16]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4352, i8* nonnull %1621) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1621, i8 -86, i64 4352, i1 false) #7
  %1622 = load i32, i32* %1323, align 4
  br i1 %1403, label %1623, label %1631

1623:                                             ; preds = %1619
  %1624 = zext i32 %1400 to i64
  %1625 = xor i32 %1400, -1
  %1626 = add nsw i32 %1402, %1625
  %1627 = lshr i32 %1626, 5
  %1628 = add nuw nsw i32 %1627, 1
  %1629 = zext i32 %1628 to i64
  %1630 = sext i32 %1423 to i64
  br label %1637

1631:                                             ; preds = %2134, %1619
  %1632 = phi i8* [ %1620, %1619 ], [ %2125, %2134 ]
  %1633 = phi i32 [ %1622, %1619 ], [ %2135, %2134 ]
  %1634 = phi i32 [ 0, %1619 ], [ %1628, %2134 ]
  %1635 = phi i32 [ %1423, %1619 ], [ %2127, %2134 ]
  %1636 = icmp slt i32 %1633, 0
  br i1 %1636, label %2141, label %2142

1637:                                             ; preds = %2134, %1623
  %1638 = phi i8* [ %1620, %1623 ], [ %2125, %2134 ]
  %1639 = phi i32 [ %1622, %1623 ], [ %2135, %2134 ]
  %1640 = phi i64 [ 0, %1623 ], [ %2137, %2134 ]
  %1641 = phi i64 [ %1624, %1623 ], [ %2139, %2134 ]
  %1642 = phi i32 [ %1423, %1623 ], [ %2127, %2134 ]
  %1643 = phi i32 [ %1622, %1623 ], [ %2126, %2134 ]
  %1644 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 13, i64 %1641
  %1645 = load i8, i8* %1644, align 1
  %1646 = icmp eq i8 %1645, 0
  %1647 = icmp slt i32 %1643, 0
  %1648 = and i1 %1647, %1646
  br i1 %1648, label %1649, label %1652

1649:                                             ; preds = %1637
  %1650 = load i32, i32* %1314, align 8
  %1651 = icmp slt i32 %1650, 65536
  br i1 %1651, label %1657, label %1843

1652:                                             ; preds = %1637
  switch i8 %1645, label %1843 [
    i8 0, label %2124
    i8 1, label %1653
    i8 2, label %1657
  ]

1653:                                             ; preds = %1652
  %1654 = load i32*, i32** %268, align 8
  %1655 = getelementptr inbounds i32, i32* %1654, i64 %1641
  %1656 = load i32, i32* %1655, align 4
  br label %2124

1657:                                             ; preds = %1652, %1649
  %1658 = phi i32 [ %1643, %1652 ], [ 0, %1649 ]
  %1659 = load i16*, i16** %1430, align 8
  %1660 = load i32*, i32** %268, align 8
  %1661 = trunc i64 %1641 to i32
  %1662 = load i32, i32* %684, align 8
  %1663 = add nsw i32 %1662, %1661
  %1664 = shl i64 %1641, 32
  %1665 = ashr exact i64 %1664, 32
  %1666 = getelementptr inbounds i32, i32* %1660, i64 %1665
  %1667 = load i32, i32* %1666, align 4
  %1668 = or i64 %1665, 1
  %1669 = sext i32 %1663 to i64
  br label %1670

1670:                                             ; preds = %1670, %1657
  %1671 = phi i64 [ %1674, %1670 ], [ %1668, %1657 ]
  %1672 = phi i32 [ %1677, %1670 ], [ %1667, %1657 ]
  %1673 = mul i32 %1672, 37
  %1674 = add nsw i64 %1671, 1
  %1675 = getelementptr inbounds i32, i32* %1660, i64 %1671
  %1676 = load i32, i32* %1675, align 4
  %1677 = add i32 %1673, %1676
  %1678 = icmp slt i64 %1674, %1669
  br i1 %1678, label %1670, label %1679

1679:                                             ; preds = %1670
  %1680 = load i32, i32* %682, align 8
  %1681 = shl i32 %1677, %1680
  %1682 = load i32, i32* %681, align 4
  %1683 = add nsw i32 %1682, -1
  %1684 = urem i32 %1677, %1683
  %1685 = add nuw i32 %1684, 1
  %1686 = load i32*, i32** %679, align 8
  %1687 = sext i32 %1685 to i64
  %1688 = getelementptr inbounds i32, i32* %1686, i64 %1687
  %1689 = load i32, i32* %1688, align 4
  %1690 = icmp eq i32 %1689, 0
  br i1 %1690, label %1695, label %1691

1691:                                             ; preds = %1679
  %1692 = load i32, i32* %683, align 4
  %1693 = xor i32 %1692, -1
  %1694 = icmp sgt i32 %1662, 0
  br label %1698

1695:                                             ; preds = %1725, %1679
  %1696 = phi i32 [ %1685, %1679 ], [ %1727, %1725 ]
  %1697 = xor i32 %1696, -1
  br label %1732

1698:                                             ; preds = %1725, %1691
  %1699 = phi i32 [ %1689, %1691 ], [ %1730, %1725 ]
  %1700 = phi i32 [ %1685, %1691 ], [ %1727, %1725 ]
  %1701 = and i32 %1699, %1693
  %1702 = icmp eq i32 %1701, %1681
  br i1 %1702, label %1703, label %1725

1703:                                             ; preds = %1698
  br i1 %1694, label %1704, label %1722

1704:                                             ; preds = %1703
  %1705 = and i32 %1699, %1692
  %1706 = add i32 %1705, -1
  %1707 = sext i32 %1706 to i64
  %1708 = getelementptr inbounds i16, i16* %1659, i64 %1707
  br label %1709

1709:                                             ; preds = %1717, %1704
  %1710 = phi i32 [ %1720, %1717 ], [ %1662, %1704 ]
  %1711 = phi i32* [ %1719, %1717 ], [ %1666, %1704 ]
  %1712 = phi i16* [ %1718, %1717 ], [ %1708, %1704 ]
  %1713 = load i16, i16* %1712, align 2
  %1714 = zext i16 %1713 to i32
  %1715 = load i32, i32* %1711, align 4
  %1716 = icmp eq i32 %1715, %1714
  br i1 %1716, label %1717, label %1725

1717:                                             ; preds = %1709
  %1718 = getelementptr inbounds i16, i16* %1712, i64 1
  %1719 = getelementptr inbounds i32, i32* %1711, i64 1
  %1720 = add nsw i32 %1710, -1
  %1721 = icmp sgt i32 %1720, 0
  br i1 %1721, label %1709, label %1722

1722:                                             ; preds = %1717, %1703
  %1723 = phi i32 [ %1662, %1703 ], [ %1720, %1717 ]
  %1724 = icmp eq i32 %1723, 0
  br i1 %1724, label %1732, label %1725

1725:                                             ; preds = %1709, %1722, %1698
  %1726 = add nsw i32 %1700, %1685
  %1727 = srem i32 %1726, %1682
  %1728 = sext i32 %1727 to i64
  %1729 = getelementptr inbounds i32, i32* %1686, i64 %1728
  %1730 = load i32, i32* %1729, align 4
  %1731 = icmp eq i32 %1730, 0
  br i1 %1731, label %1695, label %1698

1732:                                             ; preds = %1722, %1695
  %1733 = phi i32 [ %1697, %1695 ], [ %1700, %1722 ]
  %1734 = icmp sgt i32 %1733, -1
  br i1 %1734, label %1735, label %1743

1735:                                             ; preds = %1732
  %1736 = sext i32 %1733 to i64
  %1737 = getelementptr inbounds i32, i32* %1686, i64 %1736
  %1738 = load i32, i32* %1737, align 4
  %1739 = load i32, i32* %683, align 4
  %1740 = and i32 %1739, %1738
  %1741 = add i32 %1740, -1
  %1742 = icmp sgt i32 %1741, -1
  br i1 %1742, label %2124, label %1743

1743:                                             ; preds = %1735, %1732
  %1744 = icmp eq i32 %1642, %1423
  br i1 %1744, label %1779, label %1745

1745:                                             ; preds = %1743
  %1746 = getelementptr inbounds i32, i32* %1660, i64 %1641
  %1747 = sext i32 %1642 to i64
  br label %1748

1748:                                             ; preds = %1769, %1745
  %1749 = phi i64 [ 31, %1745 ], [ %1770, %1769 ]
  %1750 = phi i32 [ 31, %1745 ], [ %1771, %1769 ]
  %1751 = sub nsw i64 %1747, %1749
  %1752 = getelementptr inbounds i16, i16* %1659, i64 %1751
  %1753 = trunc i64 %1749 to i32
  br label %1754

1754:                                             ; preds = %1762, %1748
  %1755 = phi i32 [ %1765, %1762 ], [ %1753, %1748 ]
  %1756 = phi i32* [ %1764, %1762 ], [ %1746, %1748 ]
  %1757 = phi i16* [ %1763, %1762 ], [ %1752, %1748 ]
  %1758 = load i16, i16* %1757, align 2
  %1759 = zext i16 %1758 to i32
  %1760 = load i32, i32* %1756, align 4
  %1761 = icmp eq i32 %1760, %1759
  br i1 %1761, label %1762, label %1769

1762:                                             ; preds = %1754
  %1763 = getelementptr inbounds i16, i16* %1757, i64 1
  %1764 = getelementptr inbounds i32, i32* %1756, i64 1
  %1765 = add nsw i32 %1755, -1
  %1766 = icmp sgt i32 %1765, 0
  br i1 %1766, label %1754, label %1767

1767:                                             ; preds = %1762
  %1768 = icmp eq i32 %1765, 0
  br i1 %1768, label %1773, label %1769

1769:                                             ; preds = %1754, %1767
  %1770 = add nsw i64 %1749, -1
  %1771 = add nsw i32 %1750, -1
  %1772 = icmp eq i64 %1770, 0
  br i1 %1772, label %1775, label %1748

1773:                                             ; preds = %1767
  %1774 = trunc i64 %1749 to i32
  br label %1775

1775:                                             ; preds = %1769, %1773
  %1776 = phi i32 [ %1774, %1773 ], [ %1771, %1769 ]
  %1777 = sub nsw i32 %1642, %1776
  %1778 = icmp slt i32 %1776, 32
  br i1 %1778, label %1779, label %1837

1779:                                             ; preds = %1775, %1743
  %1780 = phi i64 [ %1747, %1775 ], [ %1630, %1743 ]
  %1781 = phi i32 [ %1777, %1775 ], [ %1423, %1743 ]
  %1782 = phi i32 [ %1776, %1775 ], [ 0, %1743 ]
  %1783 = sext i32 %1782 to i64
  %1784 = add nsw i64 %1783, 1
  %1785 = add nsw i64 %1641, %1783
  %1786 = getelementptr inbounds i32, i32* %1660, i64 %1785
  %1787 = load i32, i32* %1786, align 4
  %1788 = trunc i32 %1787 to i16
  %1789 = add nsw i64 %1780, 1
  %1790 = getelementptr inbounds i16, i16* %1659, i64 %1780
  store i16 %1788, i16* %1790, align 2
  %1791 = icmp eq i64 %1784, 32
  br i1 %1791, label %1833, label %1792

1792:                                             ; preds = %1779
  %1793 = sub nsw i64 1, %1783
  %1794 = and i64 %1793, 1
  %1795 = icmp eq i64 %1794, 0
  br i1 %1795, label %1806, label %1796

1796:                                             ; preds = %1792
  %1797 = load i32*, i32** %268, align 8
  %1798 = load i16*, i16** %1430, align 8
  %1799 = add nsw i64 %1783, 2
  %1800 = add nsw i64 %1784, %1641
  %1801 = getelementptr inbounds i32, i32* %1797, i64 %1800
  %1802 = load i32, i32* %1801, align 4
  %1803 = trunc i32 %1802 to i16
  %1804 = add nsw i64 %1780, 2
  %1805 = getelementptr inbounds i16, i16* %1798, i64 %1789
  store i16 %1803, i16* %1805, align 2
  br label %1806

1806:                                             ; preds = %1796, %1792
  %1807 = phi i64 [ %1804, %1796 ], [ undef, %1792 ]
  %1808 = phi i64 [ %1804, %1796 ], [ %1789, %1792 ]
  %1809 = phi i64 [ %1799, %1796 ], [ %1784, %1792 ]
  %1810 = icmp eq i32 %1782, 30
  br i1 %1810, label %1833, label %1811

1811:                                             ; preds = %1806, %1811
  %1812 = phi i64 [ %1830, %1811 ], [ %1808, %1806 ]
  %1813 = phi i64 [ %1825, %1811 ], [ %1809, %1806 ]
  %1814 = load i32*, i32** %268, align 8
  %1815 = load i16*, i16** %1430, align 8
  %1816 = add nsw i64 %1813, 1
  %1817 = add nsw i64 %1813, %1641
  %1818 = getelementptr inbounds i32, i32* %1814, i64 %1817
  %1819 = load i32, i32* %1818, align 4
  %1820 = trunc i32 %1819 to i16
  %1821 = add nsw i64 %1812, 1
  %1822 = getelementptr inbounds i16, i16* %1815, i64 %1812
  store i16 %1820, i16* %1822, align 2
  %1823 = load i32*, i32** %268, align 8
  %1824 = load i16*, i16** %1430, align 8
  %1825 = add nsw i64 %1813, 2
  %1826 = add nsw i64 %1816, %1641
  %1827 = getelementptr inbounds i32, i32* %1823, i64 %1826
  %1828 = load i32, i32* %1827, align 4
  %1829 = trunc i32 %1828 to i16
  %1830 = add nsw i64 %1812, 2
  %1831 = getelementptr inbounds i16, i16* %1824, i64 %1821
  store i16 %1829, i16* %1831, align 2
  %1832 = icmp eq i64 %1825, 32
  br i1 %1832, label %1833, label %1811

1833:                                             ; preds = %1806, %1811, %1779
  %1834 = phi i64 [ %1789, %1779 ], [ %1807, %1806 ], [ %1830, %1811 ]
  %1835 = trunc i64 %1834 to i32
  %1836 = load i16*, i16** %1430, align 8
  br label %1837

1837:                                             ; preds = %1833, %1775
  %1838 = phi i32 [ %1777, %1775 ], [ %1781, %1833 ]
  %1839 = phi i16* [ %1659, %1775 ], [ %1836, %1833 ]
  %1840 = phi i32 [ %1642, %1775 ], [ %1835, %1833 ]
  call fastcc void @_ZN6icu_6912_GLOBAL__N_111MixedBlocks6extendItEEvPKT_iii(%"class.icu_69::(anonymous namespace)::MixedBlocks"* nonnull %10, i16* %1839, i32 %1423, i32 %1642, i32 %1840) #7
  br i1 %1597, label %1841, label %2124

1841:                                             ; preds = %1837
  %1842 = load i16*, i16** %1430, align 8
  call fastcc void @_ZN6icu_6912_GLOBAL__N_111MixedBlocks6extendItEEvPKT_iii(%"class.icu_69::(anonymous namespace)::MixedBlocks"* nonnull %6, i16* %1842, i32 %1423, i32 %1642, i32 %1840) #7
  br label %2124

1843:                                             ; preds = %1652, %1649
  %1844 = phi i32 [ %1643, %1652 ], [ 0, %1649 ]
  %1845 = add nuw nsw i64 %1641, 32
  %1846 = sext i32 %1642 to i64
  %1847 = trunc i64 %1641 to i32
  br label %1848

1848:                                             ; preds = %1848, %1843
  %1849 = phi i64 [ %1946, %1848 ], [ %1846, %1843 ]
  %1850 = phi i64 [ %1936, %1848 ], [ %1641, %1843 ]
  %1851 = phi i32 [ %1937, %1848 ], [ %1847, %1843 ]
  %1852 = add nsw i64 %1849, 1
  %1853 = load i32*, i32** %268, align 8
  %1854 = or i32 %1851, 1
  %1855 = getelementptr inbounds i32, i32* %1853, i64 %1850
  %1856 = load i32, i32* %1855, align 4
  %1857 = lshr i32 %1856, 2
  %1858 = and i32 %1857, 49152
  %1859 = trunc i32 %1856 to i16
  %1860 = load i16*, i16** %1430, align 8
  %1861 = add nsw i64 %1849, 2
  %1862 = getelementptr inbounds i16, i16* %1860, i64 %1852
  store i16 %1859, i16* %1862, align 2
  %1863 = load i32*, i32** %268, align 8
  %1864 = or i32 %1851, 2
  %1865 = zext i32 %1854 to i64
  %1866 = getelementptr inbounds i32, i32* %1863, i64 %1865
  %1867 = load i32, i32* %1866, align 4
  %1868 = lshr i32 %1867, 4
  %1869 = and i32 %1868, 12288
  %1870 = or i32 %1869, %1858
  %1871 = trunc i32 %1867 to i16
  %1872 = load i16*, i16** %1430, align 8
  %1873 = add nsw i64 %1849, 3
  %1874 = getelementptr inbounds i16, i16* %1872, i64 %1861
  store i16 %1871, i16* %1874, align 2
  %1875 = load i32*, i32** %268, align 8
  %1876 = or i32 %1851, 3
  %1877 = zext i32 %1864 to i64
  %1878 = getelementptr inbounds i32, i32* %1875, i64 %1877
  %1879 = load i32, i32* %1878, align 4
  %1880 = lshr i32 %1879, 6
  %1881 = and i32 %1880, 3072
  %1882 = or i32 %1870, %1881
  %1883 = trunc i32 %1879 to i16
  %1884 = load i16*, i16** %1430, align 8
  %1885 = add nsw i64 %1849, 4
  %1886 = getelementptr inbounds i16, i16* %1884, i64 %1873
  store i16 %1883, i16* %1886, align 2
  %1887 = load i32*, i32** %268, align 8
  %1888 = or i32 %1851, 4
  %1889 = zext i32 %1876 to i64
  %1890 = getelementptr inbounds i32, i32* %1887, i64 %1889
  %1891 = load i32, i32* %1890, align 4
  %1892 = lshr i32 %1891, 8
  %1893 = and i32 %1892, 768
  %1894 = or i32 %1882, %1893
  %1895 = trunc i32 %1891 to i16
  %1896 = load i16*, i16** %1430, align 8
  %1897 = add nsw i64 %1849, 5
  %1898 = getelementptr inbounds i16, i16* %1896, i64 %1885
  store i16 %1895, i16* %1898, align 2
  %1899 = load i32*, i32** %268, align 8
  %1900 = or i32 %1851, 5
  %1901 = zext i32 %1888 to i64
  %1902 = getelementptr inbounds i32, i32* %1899, i64 %1901
  %1903 = load i32, i32* %1902, align 4
  %1904 = lshr i32 %1903, 10
  %1905 = and i32 %1904, 192
  %1906 = or i32 %1894, %1905
  %1907 = trunc i32 %1903 to i16
  %1908 = load i16*, i16** %1430, align 8
  %1909 = add nsw i64 %1849, 6
  %1910 = getelementptr inbounds i16, i16* %1908, i64 %1897
  store i16 %1907, i16* %1910, align 2
  %1911 = load i32*, i32** %268, align 8
  %1912 = or i32 %1851, 6
  %1913 = zext i32 %1900 to i64
  %1914 = getelementptr inbounds i32, i32* %1911, i64 %1913
  %1915 = load i32, i32* %1914, align 4
  %1916 = lshr i32 %1915, 12
  %1917 = and i32 %1916, 48
  %1918 = or i32 %1906, %1917
  %1919 = trunc i32 %1915 to i16
  %1920 = load i16*, i16** %1430, align 8
  %1921 = add nsw i64 %1849, 7
  %1922 = getelementptr inbounds i16, i16* %1920, i64 %1909
  store i16 %1919, i16* %1922, align 2
  %1923 = load i32*, i32** %268, align 8
  %1924 = or i32 %1851, 7
  %1925 = zext i32 %1912 to i64
  %1926 = getelementptr inbounds i32, i32* %1923, i64 %1925
  %1927 = load i32, i32* %1926, align 4
  %1928 = lshr i32 %1927, 14
  %1929 = and i32 %1928, 12
  %1930 = or i32 %1918, %1929
  %1931 = trunc i32 %1927 to i16
  %1932 = load i16*, i16** %1430, align 8
  %1933 = add nsw i64 %1849, 8
  %1934 = getelementptr inbounds i16, i16* %1932, i64 %1921
  store i16 %1931, i16* %1934, align 2
  %1935 = load i32*, i32** %268, align 8
  %1936 = add nuw nsw i64 %1850, 8
  %1937 = add nuw nsw i32 %1851, 8
  %1938 = zext i32 %1924 to i64
  %1939 = getelementptr inbounds i32, i32* %1935, i64 %1938
  %1940 = load i32, i32* %1939, align 4
  %1941 = lshr i32 %1940, 16
  %1942 = and i32 %1941, 3
  %1943 = or i32 %1930, %1942
  %1944 = trunc i32 %1940 to i16
  %1945 = load i16*, i16** %1430, align 8
  %1946 = add nsw i64 %1849, 9
  %1947 = getelementptr inbounds i16, i16* %1945, i64 %1933
  store i16 %1944, i16* %1947, align 2
  %1948 = trunc i32 %1943 to i16
  %1949 = load i16*, i16** %1430, align 8
  %1950 = getelementptr inbounds i16, i16* %1949, i64 %1849
  store i16 %1948, i16* %1950, align 2
  %1951 = icmp ult i64 %1936, %1845
  br i1 %1951, label %1848, label %1952

1952:                                             ; preds = %1848
  %1953 = load i16*, i16** %1430, align 8
  %1954 = load i32, i32* %1595, align 8
  %1955 = add nsw i32 %1954, %1642
  %1956 = getelementptr inbounds i16, i16* %1953, i64 %1846
  %1957 = load i16, i16* %1956, align 2
  %1958 = zext i16 %1957 to i32
  %1959 = add nsw i32 %1642, 1
  %1960 = sext i32 %1959 to i64
  %1961 = sext i32 %1955 to i64
  br label %1962

1962:                                             ; preds = %1962, %1952
  %1963 = phi i64 [ %1966, %1962 ], [ %1960, %1952 ]
  %1964 = phi i32 [ %1970, %1962 ], [ %1958, %1952 ]
  %1965 = mul i32 %1964, 37
  %1966 = add nsw i64 %1963, 1
  %1967 = getelementptr inbounds i16, i16* %1953, i64 %1963
  %1968 = load i16, i16* %1967, align 2
  %1969 = zext i16 %1968 to i32
  %1970 = add i32 %1965, %1969
  %1971 = icmp slt i64 %1966, %1961
  br i1 %1971, label %1962, label %1972

1972:                                             ; preds = %1962
  %1973 = load i32, i32* %1593, align 8
  %1974 = shl i32 %1970, %1973
  %1975 = load i32, i32* %1592, align 4
  %1976 = add nsw i32 %1975, -1
  %1977 = urem i32 %1970, %1976
  %1978 = add nuw i32 %1977, 1
  %1979 = load i32*, i32** %1590, align 8
  %1980 = sext i32 %1978 to i64
  %1981 = getelementptr inbounds i32, i32* %1979, i64 %1980
  %1982 = load i32, i32* %1981, align 4
  %1983 = icmp eq i32 %1982, 0
  %1984 = bitcast i32* %1979 to i8*
  br i1 %1983, label %1989, label %1985

1985:                                             ; preds = %1972
  %1986 = load i32, i32* %1594, align 4
  %1987 = xor i32 %1986, -1
  %1988 = icmp sgt i32 %1954, 0
  br label %1992

1989:                                             ; preds = %2018, %1972
  %1990 = phi i32 [ %1978, %1972 ], [ %2020, %2018 ]
  %1991 = xor i32 %1990, -1
  br label %2025

1992:                                             ; preds = %2018, %1985
  %1993 = phi i32 [ %1982, %1985 ], [ %2023, %2018 ]
  %1994 = phi i32 [ %1978, %1985 ], [ %2020, %2018 ]
  %1995 = and i32 %1993, %1987
  %1996 = icmp eq i32 %1995, %1974
  br i1 %1996, label %1997, label %2018

1997:                                             ; preds = %1992
  br i1 %1988, label %1998, label %2015

1998:                                             ; preds = %1997
  %1999 = and i32 %1993, %1986
  %2000 = add i32 %1999, -1
  %2001 = sext i32 %2000 to i64
  %2002 = getelementptr inbounds i16, i16* %1953, i64 %2001
  br label %2003

2003:                                             ; preds = %2010, %1998
  %2004 = phi i32 [ %2013, %2010 ], [ %1954, %1998 ]
  %2005 = phi i16* [ %2012, %2010 ], [ %1956, %1998 ]
  %2006 = phi i16* [ %2011, %2010 ], [ %2002, %1998 ]
  %2007 = load i16, i16* %2006, align 2
  %2008 = load i16, i16* %2005, align 2
  %2009 = icmp eq i16 %2007, %2008
  br i1 %2009, label %2010, label %2018

2010:                                             ; preds = %2003
  %2011 = getelementptr inbounds i16, i16* %2006, i64 1
  %2012 = getelementptr inbounds i16, i16* %2005, i64 1
  %2013 = add nsw i32 %2004, -1
  %2014 = icmp sgt i32 %2013, 0
  br i1 %2014, label %2003, label %2015

2015:                                             ; preds = %2010, %1997
  %2016 = phi i32 [ %1954, %1997 ], [ %2013, %2010 ]
  %2017 = icmp eq i32 %2016, 0
  br i1 %2017, label %2025, label %2018

2018:                                             ; preds = %2003, %2015, %1992
  %2019 = add nsw i32 %1994, %1978
  %2020 = srem i32 %2019, %1975
  %2021 = sext i32 %2020 to i64
  %2022 = getelementptr inbounds i32, i32* %1979, i64 %2021
  %2023 = load i32, i32* %2022, align 4
  %2024 = icmp eq i32 %2023, 0
  br i1 %2024, label %1989, label %1992

2025:                                             ; preds = %2015, %1989
  %2026 = phi i32 [ %1991, %1989 ], [ %1994, %2015 ]
  %2027 = icmp sgt i32 %2026, -1
  br i1 %2027, label %2028, label %2036

2028:                                             ; preds = %2025
  %2029 = sext i32 %2026 to i64
  %2030 = getelementptr inbounds i32, i32* %1979, i64 %2029
  %2031 = load i32, i32* %2030, align 4
  %2032 = load i32, i32* %1594, align 4
  %2033 = and i32 %2032, %2031
  %2034 = add i32 %2033, -1
  %2035 = icmp sgt i32 %2034, -1
  br i1 %2035, label %2120, label %2036

2036:                                             ; preds = %2028, %2025
  %2037 = icmp eq i32 %1642, %1423
  br i1 %2037, label %2107, label %2038

2038:                                             ; preds = %2036, %2058
  %2039 = phi i64 [ %2040, %2058 ], [ 36, %2036 ]
  %2040 = add nsw i64 %2039, -1
  %2041 = icmp eq i64 %2040, 0
  br i1 %2041, label %2107, label %2042

2042:                                             ; preds = %2038
  %2043 = trunc i64 %2040 to i32
  %2044 = sub nsw i64 %1846, %2040
  %2045 = getelementptr inbounds i16, i16* %1953, i64 %2044
  br label %2046

2046:                                             ; preds = %2053, %2042
  %2047 = phi i32 [ %2056, %2053 ], [ %2043, %2042 ]
  %2048 = phi i16* [ %2055, %2053 ], [ %1956, %2042 ]
  %2049 = phi i16* [ %2054, %2053 ], [ %2045, %2042 ]
  %2050 = load i16, i16* %2049, align 2
  %2051 = load i16, i16* %2048, align 2
  %2052 = icmp eq i16 %2050, %2051
  br i1 %2052, label %2053, label %2058

2053:                                             ; preds = %2046
  %2054 = getelementptr inbounds i16, i16* %2049, i64 1
  %2055 = getelementptr inbounds i16, i16* %2048, i64 1
  %2056 = add nsw i32 %2047, -1
  %2057 = icmp sgt i32 %2056, 0
  br i1 %2057, label %2046, label %2058

2058:                                             ; preds = %2053, %2046
  %2059 = phi i32 [ %2056, %2053 ], [ %2047, %2046 ]
  %2060 = icmp eq i32 %2059, 0
  br i1 %2060, label %2061, label %2038

2061:                                             ; preds = %2058
  %2062 = trunc i64 %2040 to i32
  %2063 = sub nsw i32 %1642, %2062
  %2064 = icmp sgt i32 %2062, 0
  br i1 %2064, label %2065, label %2107

2065:                                             ; preds = %2061
  %2066 = icmp slt i32 %2062, 36
  br i1 %2066, label %2067, label %2114

2067:                                             ; preds = %2065
  %2068 = add nsw i64 %2040, %1846
  %2069 = getelementptr inbounds i16, i16* %1953, i64 %2068
  %2070 = load i16, i16* %2069, align 2
  %2071 = add nsw i64 %1846, 1
  store i16 %2070, i16* %1956, align 2
  %2072 = icmp eq i64 %2039, 36
  br i1 %2072, label %2110, label %2073

2073:                                             ; preds = %2067
  %2074 = and i64 %2039, 1
  %2075 = icmp eq i64 %2074, 0
  br i1 %2075, label %2084, label %2076

2076:                                             ; preds = %2073
  %2077 = load i16*, i16** %1430, align 8
  %2078 = add nuw nsw i64 %2039, 1
  %2079 = add nsw i64 %2039, %1846
  %2080 = getelementptr inbounds i16, i16* %2077, i64 %2079
  %2081 = load i16, i16* %2080, align 2
  %2082 = add nsw i64 %1846, 2
  %2083 = getelementptr inbounds i16, i16* %2077, i64 %2071
  store i16 %2081, i16* %2083, align 2
  br label %2084

2084:                                             ; preds = %2076, %2073
  %2085 = phi i64 [ %2082, %2076 ], [ undef, %2073 ]
  %2086 = phi i64 [ %2082, %2076 ], [ %2071, %2073 ]
  %2087 = phi i64 [ %2078, %2076 ], [ %2039, %2073 ]
  %2088 = icmp eq i64 %2039, 35
  br i1 %2088, label %2110, label %2089

2089:                                             ; preds = %2084, %2089
  %2090 = phi i64 [ %2104, %2089 ], [ %2086, %2084 ]
  %2091 = phi i64 [ %2100, %2089 ], [ %2087, %2084 ]
  %2092 = load i16*, i16** %1430, align 8
  %2093 = add nuw nsw i64 %2091, 1
  %2094 = add nsw i64 %2091, %1846
  %2095 = getelementptr inbounds i16, i16* %2092, i64 %2094
  %2096 = load i16, i16* %2095, align 2
  %2097 = add nsw i64 %2090, 1
  %2098 = getelementptr inbounds i16, i16* %2092, i64 %2090
  store i16 %2096, i16* %2098, align 2
  %2099 = load i16*, i16** %1430, align 8
  %2100 = add nuw nsw i64 %2091, 2
  %2101 = add nsw i64 %2093, %1846
  %2102 = getelementptr inbounds i16, i16* %2099, i64 %2101
  %2103 = load i16, i16* %2102, align 2
  %2104 = add nsw i64 %2090, 2
  %2105 = getelementptr inbounds i16, i16* %2099, i64 %2097
  store i16 %2103, i16* %2105, align 2
  %2106 = icmp eq i64 %2100, 36
  br i1 %2106, label %2110, label %2089

2107:                                             ; preds = %2038, %2061, %2036
  %2108 = phi i32 [ %2063, %2061 ], [ %1423, %2036 ], [ %1642, %2038 ]
  %2109 = add nsw i32 %1642, 36
  br label %2114

2110:                                             ; preds = %2084, %2089, %2067
  %2111 = phi i64 [ %2071, %2067 ], [ %2085, %2084 ], [ %2104, %2089 ]
  %2112 = trunc i64 %2111 to i32
  %2113 = load i16*, i16** %1430, align 8
  br label %2114

2114:                                             ; preds = %2110, %2107, %2065
  %2115 = phi i16* [ %1953, %2107 ], [ %1953, %2065 ], [ %2113, %2110 ]
  %2116 = phi i32 [ %2108, %2107 ], [ %2063, %2065 ], [ %2063, %2110 ]
  %2117 = phi i32 [ %2109, %2107 ], [ %1642, %2065 ], [ %2112, %2110 ]
  call fastcc void @_ZN6icu_6912_GLOBAL__N_111MixedBlocks6extendItEEvPKT_iii(%"class.icu_69::(anonymous namespace)::MixedBlocks"* nonnull %10, i16* %2115, i32 %1423, i32 %1642, i32 %2117) #7
  br i1 %1597, label %2118, label %2120

2118:                                             ; preds = %2114
  %2119 = load i16*, i16** %1430, align 8
  call fastcc void @_ZN6icu_6912_GLOBAL__N_111MixedBlocks6extendItEEvPKT_iii(%"class.icu_69::(anonymous namespace)::MixedBlocks"* nonnull %6, i16* %2119, i32 %1423, i32 %1642, i32 %2117) #7
  br label %2120

2120:                                             ; preds = %2118, %2114, %2028
  %2121 = phi i32 [ %1642, %2028 ], [ %2117, %2118 ], [ %2117, %2114 ]
  %2122 = phi i32 [ %2034, %2028 ], [ %2116, %2118 ], [ %2116, %2114 ]
  %2123 = or i32 %2122, 32768
  br label %2124

2124:                                             ; preds = %2120, %1841, %1837, %1735, %1653, %1652
  %2125 = phi i8* [ %1638, %1653 ], [ %1984, %2120 ], [ %1638, %1735 ], [ %1638, %1841 ], [ %1638, %1837 ], [ %1638, %1652 ]
  %2126 = phi i32 [ %1643, %1653 ], [ %1844, %2120 ], [ %1658, %1735 ], [ %1658, %1841 ], [ %1658, %1837 ], [ %1643, %1652 ]
  %2127 = phi i32 [ %1642, %1653 ], [ %2121, %2120 ], [ %1642, %1735 ], [ %1840, %1841 ], [ %1840, %1837 ], [ %1642, %1652 ]
  %2128 = phi i32 [ %1656, %1653 ], [ %2123, %2120 ], [ %1741, %1735 ], [ %1838, %1841 ], [ %1838, %1837 ], [ %1639, %1652 ]
  %2129 = load i32, i32* %1323, align 4
  %2130 = icmp slt i32 %2129, 0
  %2131 = icmp sgt i32 %2126, -1
  %2132 = and i1 %2131, %2130
  br i1 %2132, label %2133, label %2134

2133:                                             ; preds = %2124
  store i32 %2128, i32* %1323, align 4
  br label %2134

2134:                                             ; preds = %2133, %2124
  %2135 = phi i32 [ %2128, %2133 ], [ %2129, %2124 ]
  %2136 = trunc i32 %2128 to i16
  %2137 = add nuw nsw i64 %1640, 1
  %2138 = getelementptr inbounds [2176 x i16], [2176 x i16]* %7, i64 0, i64 %1640
  store i16 %2136, i16* %2138, align 2
  %2139 = add nuw nsw i64 %1641, 32
  %2140 = icmp eq i64 %2137, %1629
  br i1 %2140, label %1631, label %1637

2141:                                             ; preds = %1631
  store i32 32767, i32* %1323, align 4
  br label %2142

2142:                                             ; preds = %2141, %1631
  %2143 = icmp sgt i32 %1635, 32798
  br i1 %2143, label %2149, label %2144

2144:                                             ; preds = %2142
  %2145 = icmp sgt i32 %1634, 0
  br i1 %2145, label %2146, label %2382

2146:                                             ; preds = %2144
  %2147 = sext i32 %1423 to i64
  %2148 = zext i32 %1315 to i64
  br label %2150

2149:                                             ; preds = %2142
  store i32 8, i32* %3, align 4
  br label %2382

2150:                                             ; preds = %2372, %2146
  %2151 = phi i64 [ %2148, %2146 ], [ %2378, %2372 ]
  %2152 = phi i32 [ 0, %2146 ], [ %2380, %2372 ]
  %2153 = phi i32 [ 32, %2146 ], [ %2374, %2372 ]
  %2154 = phi i32 [ %1635, %2146 ], [ %2375, %2372 ]
  %2155 = sub nsw i32 %1634, %2152
  %2156 = icmp slt i32 %2155, %2153
  %2157 = load i16*, i16** %1430, align 8
  br i1 %2156, label %2240, label %2158

2158:                                             ; preds = %2150
  %2159 = load i32, i32* %684, align 8
  %2160 = add nsw i32 %2159, %2152
  %2161 = sext i32 %2152 to i64
  %2162 = getelementptr inbounds [2176 x i16], [2176 x i16]* %7, i64 0, i64 %2161
  %2163 = load i16, i16* %2162, align 2
  %2164 = zext i16 %2163 to i32
  %2165 = add nsw i32 %2152, 1
  %2166 = sext i32 %2165 to i64
  %2167 = sext i32 %2160 to i64
  br label %2168

2168:                                             ; preds = %2168, %2158
  %2169 = phi i64 [ %2172, %2168 ], [ %2166, %2158 ]
  %2170 = phi i32 [ %2176, %2168 ], [ %2164, %2158 ]
  %2171 = mul i32 %2170, 37
  %2172 = add nsw i64 %2169, 1
  %2173 = getelementptr inbounds [2176 x i16], [2176 x i16]* %7, i64 0, i64 %2169
  %2174 = load i16, i16* %2173, align 2
  %2175 = zext i16 %2174 to i32
  %2176 = add i32 %2171, %2175
  %2177 = icmp slt i64 %2172, %2167
  br i1 %2177, label %2168, label %2178

2178:                                             ; preds = %2168
  %2179 = load i32, i32* %682, align 8
  %2180 = shl i32 %2176, %2179
  %2181 = load i32, i32* %681, align 4
  %2182 = add nsw i32 %2181, -1
  %2183 = urem i32 %2176, %2182
  %2184 = add nuw i32 %2183, 1
  %2185 = load i32*, i32** %679, align 8
  %2186 = sext i32 %2184 to i64
  %2187 = getelementptr inbounds i32, i32* %2185, i64 %2186
  %2188 = load i32, i32* %2187, align 4
  %2189 = icmp eq i32 %2188, 0
  br i1 %2189, label %2194, label %2190

2190:                                             ; preds = %2178
  %2191 = load i32, i32* %683, align 4
  %2192 = xor i32 %2191, -1
  %2193 = icmp sgt i32 %2159, 0
  br label %2197

2194:                                             ; preds = %2223, %2178
  %2195 = phi i32 [ %2184, %2178 ], [ %2225, %2223 ]
  %2196 = xor i32 %2195, -1
  br label %2230

2197:                                             ; preds = %2223, %2190
  %2198 = phi i32 [ %2188, %2190 ], [ %2228, %2223 ]
  %2199 = phi i32 [ %2184, %2190 ], [ %2225, %2223 ]
  %2200 = and i32 %2198, %2192
  %2201 = icmp eq i32 %2200, %2180
  br i1 %2201, label %2202, label %2223

2202:                                             ; preds = %2197
  br i1 %2193, label %2203, label %2220

2203:                                             ; preds = %2202
  %2204 = and i32 %2198, %2191
  %2205 = add i32 %2204, -1
  %2206 = sext i32 %2205 to i64
  %2207 = getelementptr inbounds i16, i16* %2157, i64 %2206
  br label %2208

2208:                                             ; preds = %2215, %2203
  %2209 = phi i32 [ %2218, %2215 ], [ %2159, %2203 ]
  %2210 = phi i16* [ %2217, %2215 ], [ %2162, %2203 ]
  %2211 = phi i16* [ %2216, %2215 ], [ %2207, %2203 ]
  %2212 = load i16, i16* %2211, align 2
  %2213 = load i16, i16* %2210, align 2
  %2214 = icmp eq i16 %2212, %2213
  br i1 %2214, label %2215, label %2223

2215:                                             ; preds = %2208
  %2216 = getelementptr inbounds i16, i16* %2211, i64 1
  %2217 = getelementptr inbounds i16, i16* %2210, i64 1
  %2218 = add nsw i32 %2209, -1
  %2219 = icmp sgt i32 %2218, 0
  br i1 %2219, label %2208, label %2220

2220:                                             ; preds = %2215, %2202
  %2221 = phi i32 [ %2159, %2202 ], [ %2218, %2215 ]
  %2222 = icmp eq i32 %2221, 0
  br i1 %2222, label %2230, label %2223

2223:                                             ; preds = %2208, %2220, %2197
  %2224 = add nsw i32 %2199, %2184
  %2225 = srem i32 %2224, %2181
  %2226 = sext i32 %2225 to i64
  %2227 = getelementptr inbounds i32, i32* %2185, i64 %2226
  %2228 = load i32, i32* %2227, align 4
  %2229 = icmp eq i32 %2228, 0
  br i1 %2229, label %2194, label %2197

2230:                                             ; preds = %2220, %2194
  %2231 = phi i32 [ %2196, %2194 ], [ %2199, %2220 ]
  %2232 = icmp sgt i32 %2231, -1
  br i1 %2232, label %2233, label %2276

2233:                                             ; preds = %2230
  %2234 = sext i32 %2231 to i64
  %2235 = getelementptr inbounds i32, i32* %2185, i64 %2234
  %2236 = load i32, i32* %2235, align 4
  %2237 = load i32, i32* %683, align 4
  %2238 = and i32 %2237, %2236
  %2239 = add i32 %2238, -1
  br label %2272

2240:                                             ; preds = %2150
  %2241 = sub nsw i32 %2154, %2155
  %2242 = sext i32 %2152 to i64
  %2243 = getelementptr inbounds [2176 x i16], [2176 x i16]* %7, i64 0, i64 %2242
  %2244 = icmp slt i32 %2241, %1423
  br i1 %2244, label %2276, label %2245

2245:                                             ; preds = %2240
  %2246 = icmp sgt i32 %2155, 0
  %2247 = sext i32 %2241 to i64
  br label %2248

2248:                                             ; preds = %2267, %2245
  %2249 = phi i64 [ %2268, %2267 ], [ %2147, %2245 ]
  br i1 %2246, label %2250, label %2264

2250:                                             ; preds = %2248
  %2251 = getelementptr inbounds i16, i16* %2157, i64 %2249
  br label %2252

2252:                                             ; preds = %2259, %2250
  %2253 = phi i32 [ %2262, %2259 ], [ %2155, %2250 ]
  %2254 = phi i16* [ %2261, %2259 ], [ %2243, %2250 ]
  %2255 = phi i16* [ %2260, %2259 ], [ %2251, %2250 ]
  %2256 = load i16, i16* %2255, align 2
  %2257 = load i16, i16* %2254, align 2
  %2258 = icmp eq i16 %2256, %2257
  br i1 %2258, label %2259, label %2267

2259:                                             ; preds = %2252
  %2260 = getelementptr inbounds i16, i16* %2255, i64 1
  %2261 = getelementptr inbounds i16, i16* %2254, i64 1
  %2262 = add nsw i32 %2253, -1
  %2263 = icmp sgt i32 %2262, 0
  br i1 %2263, label %2252, label %2264

2264:                                             ; preds = %2259, %2248
  %2265 = phi i32 [ %2155, %2248 ], [ %2262, %2259 ]
  %2266 = icmp eq i32 %2265, 0
  br i1 %2266, label %2270, label %2267

2267:                                             ; preds = %2252, %2264
  %2268 = add nsw i64 %2249, 1
  %2269 = icmp slt i64 %2249, %2247
  br i1 %2269, label %2248, label %2276

2270:                                             ; preds = %2264
  %2271 = trunc i64 %2249 to i32
  br label %2272

2272:                                             ; preds = %2270, %2233
  %2273 = phi i32 [ %2153, %2233 ], [ %2155, %2270 ]
  %2274 = phi i32 [ %2239, %2233 ], [ %2271, %2270 ]
  %2275 = icmp sgt i32 %2274, -1
  br i1 %2275, label %2372, label %2276

2276:                                             ; preds = %2267, %2272, %2240, %2230
  %2277 = phi i32 [ %2273, %2272 ], [ %2155, %2240 ], [ %2153, %2230 ], [ %2155, %2267 ]
  %2278 = icmp eq i32 %2154, %1423
  br i1 %2278, label %2311, label %2279

2279:                                             ; preds = %2276
  %2280 = sext i32 %2152 to i64
  %2281 = getelementptr inbounds [2176 x i16], [2176 x i16]* %7, i64 0, i64 %2280
  %2282 = sext i32 %2277 to i64
  %2283 = sext i32 %2154 to i64
  br label %2284

2284:                                             ; preds = %2304, %2279
  %2285 = phi i64 [ %2286, %2304 ], [ %2282, %2279 ]
  %2286 = add nsw i64 %2285, -1
  %2287 = icmp sgt i64 %2286, 0
  %2288 = trunc i64 %2286 to i32
  br i1 %2287, label %2289, label %2309

2289:                                             ; preds = %2284
  %2290 = sub nsw i64 %2283, %2286
  %2291 = getelementptr inbounds i16, i16* %2157, i64 %2290
  br label %2292

2292:                                             ; preds = %2299, %2289
  %2293 = phi i32 [ %2302, %2299 ], [ %2288, %2289 ]
  %2294 = phi i16* [ %2301, %2299 ], [ %2281, %2289 ]
  %2295 = phi i16* [ %2300, %2299 ], [ %2291, %2289 ]
  %2296 = load i16, i16* %2295, align 2
  %2297 = load i16, i16* %2294, align 2
  %2298 = icmp eq i16 %2296, %2297
  br i1 %2298, label %2299, label %2304

2299:                                             ; preds = %2292
  %2300 = getelementptr inbounds i16, i16* %2295, i64 1
  %2301 = getelementptr inbounds i16, i16* %2294, i64 1
  %2302 = add nsw i32 %2293, -1
  %2303 = icmp sgt i32 %2302, 0
  br i1 %2303, label %2292, label %2304

2304:                                             ; preds = %2299, %2292
  %2305 = phi i32 [ %2302, %2299 ], [ %2293, %2292 ]
  %2306 = icmp eq i32 %2305, 0
  br i1 %2306, label %2307, label %2284

2307:                                             ; preds = %2304
  %2308 = trunc i64 %2286 to i32
  br label %2311

2309:                                             ; preds = %2284
  %2310 = trunc i64 %2286 to i32
  br label %2311

2311:                                             ; preds = %2309, %2307, %2276
  %2312 = phi i32 [ 0, %2276 ], [ %2308, %2307 ], [ %2310, %2309 ]
  %2313 = sub nsw i32 %2154, %2312
  %2314 = icmp slt i32 %2312, %2277
  br i1 %2314, label %2315, label %2368

2315:                                             ; preds = %2311
  %2316 = sext i32 %2312 to i64
  %2317 = sext i32 %2152 to i64
  %2318 = sext i32 %2154 to i64
  %2319 = sext i32 %2277 to i64
  %2320 = add nsw i64 %2316, 1
  %2321 = add nsw i64 %2316, %2317
  %2322 = getelementptr inbounds [2176 x i16], [2176 x i16]* %7, i64 0, i64 %2321
  %2323 = load i16, i16* %2322, align 2
  %2324 = add nsw i64 %2318, 1
  %2325 = getelementptr inbounds i16, i16* %2157, i64 %2318
  store i16 %2323, i16* %2325, align 2
  %2326 = icmp eq i64 %2320, %2319
  br i1 %2326, label %2364, label %2327

2327:                                             ; preds = %2315
  %2328 = xor i64 %2316, 1
  %2329 = add nsw i64 %2328, %2319
  %2330 = add nsw i64 %2319, -2
  %2331 = and i64 %2329, 1
  %2332 = icmp eq i64 %2331, 0
  br i1 %2332, label %2341, label %2333

2333:                                             ; preds = %2327
  %2334 = load i16*, i16** %1430, align 8
  %2335 = add nsw i64 %2316, 2
  %2336 = add nsw i64 %2320, %2317
  %2337 = getelementptr inbounds [2176 x i16], [2176 x i16]* %7, i64 0, i64 %2336
  %2338 = load i16, i16* %2337, align 2
  %2339 = add nsw i64 %2318, 2
  %2340 = getelementptr inbounds i16, i16* %2334, i64 %2324
  store i16 %2338, i16* %2340, align 2
  br label %2341

2341:                                             ; preds = %2333, %2327
  %2342 = phi i64 [ %2339, %2333 ], [ undef, %2327 ]
  %2343 = phi i64 [ %2339, %2333 ], [ %2324, %2327 ]
  %2344 = phi i64 [ %2335, %2333 ], [ %2320, %2327 ]
  %2345 = icmp eq i64 %2330, %2316
  br i1 %2345, label %2364, label %2346

2346:                                             ; preds = %2341, %2346
  %2347 = phi i64 [ %2361, %2346 ], [ %2343, %2341 ]
  %2348 = phi i64 [ %2357, %2346 ], [ %2344, %2341 ]
  %2349 = load i16*, i16** %1430, align 8
  %2350 = add nsw i64 %2348, 1
  %2351 = add nsw i64 %2348, %2317
  %2352 = getelementptr inbounds [2176 x i16], [2176 x i16]* %7, i64 0, i64 %2351
  %2353 = load i16, i16* %2352, align 2
  %2354 = add nsw i64 %2347, 1
  %2355 = getelementptr inbounds i16, i16* %2349, i64 %2347
  store i16 %2353, i16* %2355, align 2
  %2356 = load i16*, i16** %1430, align 8
  %2357 = add nsw i64 %2348, 2
  %2358 = add nsw i64 %2350, %2317
  %2359 = getelementptr inbounds [2176 x i16], [2176 x i16]* %7, i64 0, i64 %2358
  %2360 = load i16, i16* %2359, align 2
  %2361 = add nsw i64 %2347, 2
  %2362 = getelementptr inbounds i16, i16* %2356, i64 %2354
  store i16 %2360, i16* %2362, align 2
  %2363 = icmp eq i64 %2357, %2319
  br i1 %2363, label %2364, label %2346

2364:                                             ; preds = %2341, %2346, %2315
  %2365 = phi i64 [ %2324, %2315 ], [ %2342, %2341 ], [ %2361, %2346 ]
  %2366 = trunc i64 %2365 to i32
  %2367 = load i16*, i16** %1430, align 8
  br label %2368

2368:                                             ; preds = %2364, %2311
  %2369 = phi i16* [ %2157, %2311 ], [ %2367, %2364 ]
  %2370 = phi i32 [ %2154, %2311 ], [ %2366, %2364 ]
  call fastcc void @_ZN6icu_6912_GLOBAL__N_111MixedBlocks6extendItEEvPKT_iii(%"class.icu_69::(anonymous namespace)::MixedBlocks"* nonnull %10, i16* %2369, i32 %1423, i32 %2154, i32 %2370) #7
  %2371 = load i16*, i16** %1430, align 8
  br label %2372

2372:                                             ; preds = %2368, %2272
  %2373 = phi i16* [ %2371, %2368 ], [ %2157, %2272 ]
  %2374 = phi i32 [ %2277, %2368 ], [ %2273, %2272 ]
  %2375 = phi i32 [ %2370, %2368 ], [ %2154, %2272 ]
  %2376 = phi i32 [ %2313, %2368 ], [ %2274, %2272 ]
  %2377 = trunc i32 %2376 to i16
  %2378 = add i64 %2151, 1
  %2379 = getelementptr inbounds i16, i16* %2373, i64 %2151
  store i16 %2377, i16* %2379, align 2
  %2380 = add nsw i32 %2374, %2152
  %2381 = icmp sgt i32 %1634, %2380
  br i1 %2381, label %2150, label %2382

2382:                                             ; preds = %2372, %2149, %2144
  %2383 = phi i32 [ 0, %2149 ], [ %1635, %2144 ], [ %2375, %2372 ]
  call void @llvm.lifetime.end.p0i8(i64 4352, i8* nonnull %1621) #7
  br label %2384

2384:                                             ; preds = %2382, %1618
  %2385 = phi i8* [ %1632, %2382 ], [ null, %1618 ]
  %2386 = phi i32 [ %2383, %2382 ], [ 0, %1618 ]
  tail call void @uprv_free_69(i8* %2385) #7
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1589) #7
  br label %2387

2387:                                             ; preds = %2384, %1585, %1556, %1395
  %2388 = phi i32 [ 0, %1395 ], [ 0, %1556 ], [ %2386, %2384 ], [ 0, %1585 ]
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %1322) #7
  br label %2389

2389:                                             ; preds = %2387, %1319
  %2390 = phi i32 [ %1315, %1319 ], [ %2388, %2387 ]
  store i32 %270, i32* %116, align 8
  br label %2392

2391:                                             ; preds = %336, %595, %565
  store i32 7, i32* %3, align 4
  call void @llvm.lifetime.end.p0i8(i64 392, i8* nonnull %276) #7
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %272) #7
  br label %2397

2392:                                             ; preds = %2389, %1300, %1290, %1289, %714
  %2393 = phi i32 [ 0, %1300 ], [ %2390, %2389 ], [ 0, %1290 ], [ 0, %714 ], [ 0, %1289 ]
  %2394 = load i8*, i8** %703, align 8
  tail call void @uprv_free_69(i8* %2394) #7
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %678) #7
  %2395 = load i32, i32* %3, align 4
  call void @llvm.lifetime.end.p0i8(i64 392, i8* nonnull %276) #7
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %272) #7
  %2396 = icmp slt i32 %2395, 1
  br i1 %2396, label %2408, label %2397

2397:                                             ; preds = %2392, %2391
  %2398 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 6
  store i32 -1, i32* %2398, align 8
  %2399 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 2
  store i32 -1, i32* %2399, align 4
  %2400 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 5
  store i32 0, i32* %2400, align 4
  %2401 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 7
  %2402 = load i32, i32* %2401, align 4
  %2403 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 8
  store i32 %2402, i32* %2403, align 8
  %2404 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 11
  store i32 %2402, i32* %2404, align 4
  store i32 0, i32* %116, align 8
  %2405 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 12
  %2406 = bitcast i16** %2405 to i8**
  %2407 = load i8*, i8** %2406, align 8
  tail call void @uprv_free_69(i8* %2407) #7
  store i16* null, i16** %2405, align 8
  br label %2912

2408:                                             ; preds = %2392
  %2409 = icmp eq i32 %2, 1
  %2410 = xor i1 %2409, true
  %2411 = and i32 %2393, 1
  %2412 = icmp eq i32 %2411, 0
  %2413 = or i1 %2412, %2410
  br i1 %2413, label %2420, label %2414

2414:                                             ; preds = %2408
  %2415 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 12
  %2416 = load i16*, i16** %2415, align 8
  %2417 = add nsw i32 %2393, 1
  %2418 = sext i32 %2393 to i64
  %2419 = getelementptr inbounds i16, i16* %2416, i64 %2418
  store i16 -18, i16* %2419, align 2
  br label %2420

2420:                                             ; preds = %2414, %2408
  %2421 = phi i32 [ %2417, %2414 ], [ %2393, %2408 ]
  %2422 = shl nsw i32 %2421, 1
  %2423 = icmp eq i32 %2, 0
  br i1 %2423, label %2424, label %2474

2424:                                             ; preds = %2420
  %2425 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 5
  %2426 = load i32, i32* %2425, align 4
  %2427 = xor i32 %2426, %2421
  %2428 = and i32 %2427, 1
  %2429 = icmp eq i32 %2428, 0
  br i1 %2429, label %2438, label %2430

2430:                                             ; preds = %2424
  %2431 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 9
  %2432 = load i32, i32* %2431, align 4
  %2433 = load i32*, i32** %273, align 8
  %2434 = add nsw i32 %2426, 1
  store i32 %2434, i32* %2425, align 4
  %2435 = sext i32 %2426 to i64
  %2436 = getelementptr inbounds i32, i32* %2433, i64 %2435
  store i32 %2432, i32* %2436, align 4
  %2437 = load i32, i32* %2425, align 4
  br label %2438

2438:                                             ; preds = %2430, %2424
  %2439 = phi i32 [ %2426, %2424 ], [ %2437, %2430 ]
  %2440 = load i32*, i32** %273, align 8
  %2441 = add nsw i32 %2439, -1
  %2442 = sext i32 %2441 to i64
  %2443 = getelementptr inbounds i32, i32* %2440, i64 %2442
  %2444 = load i32, i32* %2443, align 4
  %2445 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 9
  %2446 = load i32, i32* %2445, align 4
  %2447 = icmp eq i32 %2444, %2446
  br i1 %2447, label %2451, label %2448

2448:                                             ; preds = %2438
  %2449 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 11
  %2450 = load i32, i32* %2449, align 4
  br label %2459

2451:                                             ; preds = %2438
  %2452 = add nsw i32 %2439, -2
  %2453 = sext i32 %2452 to i64
  %2454 = getelementptr inbounds i32, i32* %2440, i64 %2453
  %2455 = load i32, i32* %2454, align 4
  %2456 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 11
  %2457 = load i32, i32* %2456, align 4
  %2458 = icmp eq i32 %2455, %2457
  br i1 %2458, label %2471, label %2459

2459:                                             ; preds = %2451, %2448
  %2460 = phi i32 [ %2450, %2448 ], [ %2457, %2451 ]
  %2461 = add nsw i32 %2439, 1
  store i32 %2461, i32* %2425, align 4
  %2462 = sext i32 %2439 to i64
  %2463 = getelementptr inbounds i32, i32* %2440, i64 %2462
  store i32 %2460, i32* %2463, align 4
  %2464 = load i32, i32* %2445, align 4
  %2465 = load i32*, i32** %273, align 8
  %2466 = load i32, i32* %2425, align 4
  %2467 = add nsw i32 %2466, 1
  store i32 %2467, i32* %2425, align 4
  %2468 = sext i32 %2466 to i64
  %2469 = getelementptr inbounds i32, i32* %2465, i64 %2468
  store i32 %2464, i32* %2469, align 4
  %2470 = load i32, i32* %2425, align 4
  br label %2471

2471:                                             ; preds = %2459, %2451
  %2472 = phi i32 [ %2439, %2451 ], [ %2470, %2459 ]
  %2473 = shl nsw i32 %2472, 1
  br label %2583

2474:                                             ; preds = %2420
  br i1 %2409, label %2475, label %2518

2475:                                             ; preds = %2474
  %2476 = load i32*, i32** %273, align 8
  %2477 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 5
  %2478 = load i32, i32* %2477, align 4
  %2479 = add nsw i32 %2478, -1
  %2480 = sext i32 %2479 to i64
  %2481 = getelementptr inbounds i32, i32* %2476, i64 %2480
  %2482 = load i32, i32* %2481, align 4
  %2483 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 9
  %2484 = load i32, i32* %2483, align 4
  %2485 = icmp eq i32 %2482, %2484
  br i1 %2485, label %2489, label %2486

2486:                                             ; preds = %2475
  %2487 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 11
  %2488 = load i32, i32* %2487, align 4
  br label %2497

2489:                                             ; preds = %2475
  %2490 = add nsw i32 %2478, -2
  %2491 = sext i32 %2490 to i64
  %2492 = getelementptr inbounds i32, i32* %2476, i64 %2491
  %2493 = load i32, i32* %2492, align 4
  %2494 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 11
  %2495 = load i32, i32* %2494, align 4
  %2496 = icmp eq i32 %2493, %2495
  br i1 %2496, label %2515, label %2497

2497:                                             ; preds = %2489, %2486
  %2498 = phi i32 [ %2488, %2486 ], [ %2495, %2489 ]
  %2499 = icmp eq i32 %2482, %2498
  br i1 %2499, label %2507, label %2500

2500:                                             ; preds = %2497
  %2501 = add nsw i32 %2478, 1
  store i32 %2501, i32* %2477, align 4
  %2502 = sext i32 %2478 to i64
  %2503 = getelementptr inbounds i32, i32* %2476, i64 %2502
  store i32 %2498, i32* %2503, align 4
  %2504 = load i32, i32* %2483, align 4
  %2505 = load i32*, i32** %273, align 8
  %2506 = load i32, i32* %2477, align 4
  br label %2507

2507:                                             ; preds = %2500, %2497
  %2508 = phi i32 [ %2478, %2497 ], [ %2506, %2500 ]
  %2509 = phi i32* [ %2476, %2497 ], [ %2505, %2500 ]
  %2510 = phi i32 [ %2484, %2497 ], [ %2504, %2500 ]
  %2511 = add nsw i32 %2508, 1
  store i32 %2511, i32* %2477, align 4
  %2512 = sext i32 %2508 to i64
  %2513 = getelementptr inbounds i32, i32* %2509, i64 %2512
  store i32 %2510, i32* %2513, align 4
  %2514 = load i32, i32* %2477, align 4
  br label %2515

2515:                                             ; preds = %2507, %2489
  %2516 = phi i32 [ %2478, %2489 ], [ %2514, %2507 ]
  %2517 = shl nsw i32 %2516, 2
  br label %2583

2518:                                             ; preds = %2474
  %2519 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 5
  %2520 = load i32, i32* %2519, align 4
  %2521 = add nsw i32 %2520, %2422
  %2522 = and i32 %2521, 3
  switch i32 %2522, label %2523 [
    i32 0, label %2525
    i32 3, label %2542
  ]

2523:                                             ; preds = %2518
  %2524 = load i32*, i32** %273, align 8
  br label %2551

2525:                                             ; preds = %2518
  %2526 = load i32*, i32** %273, align 8
  %2527 = add nsw i32 %2520, -1
  %2528 = sext i32 %2527 to i64
  %2529 = getelementptr inbounds i32, i32* %2526, i64 %2528
  %2530 = load i32, i32* %2529, align 4
  %2531 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 9
  %2532 = load i32, i32* %2531, align 4
  %2533 = icmp eq i32 %2530, %2532
  br i1 %2533, label %2534, label %2551

2534:                                             ; preds = %2525
  %2535 = add nsw i32 %2520, -2
  %2536 = sext i32 %2535 to i64
  %2537 = getelementptr inbounds i32, i32* %2526, i64 %2536
  %2538 = load i32, i32* %2537, align 4
  %2539 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 11
  %2540 = load i32, i32* %2539, align 4
  %2541 = icmp eq i32 %2538, %2540
  br i1 %2541, label %2581, label %2551

2542:                                             ; preds = %2518
  %2543 = load i32*, i32** %273, align 8
  %2544 = add nsw i32 %2520, -1
  %2545 = sext i32 %2544 to i64
  %2546 = getelementptr inbounds i32, i32* %2543, i64 %2545
  %2547 = load i32, i32* %2546, align 4
  %2548 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 11
  %2549 = load i32, i32* %2548, align 4
  %2550 = icmp eq i32 %2547, %2549
  br i1 %2550, label %2573, label %2551

2551:                                             ; preds = %2542, %2534, %2525, %2523
  %2552 = phi i32* [ %2524, %2523 ], [ %2526, %2525 ], [ %2526, %2534 ], [ %2543, %2542 ]
  %2553 = icmp eq i32 %2522, 2
  %2554 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 11
  %2555 = load i32, i32* %2554, align 4
  %2556 = add nsw i32 %2520, 1
  store i32 %2556, i32* %2519, align 4
  %2557 = sext i32 %2520 to i64
  %2558 = getelementptr inbounds i32, i32* %2552, i64 %2557
  store i32 %2555, i32* %2558, align 4
  br i1 %2553, label %2570, label %2559

2559:                                             ; preds = %2551, %2559
  %2560 = phi i32 [ %2562, %2559 ], [ %2522, %2551 ]
  %2561 = add nuw nsw i32 %2560, 1
  %2562 = and i32 %2561, 3
  %2563 = icmp eq i32 %2562, 2
  %2564 = load i32, i32* %2554, align 4
  %2565 = load i32*, i32** %273, align 8
  %2566 = load i32, i32* %2519, align 4
  %2567 = add nsw i32 %2566, 1
  store i32 %2567, i32* %2519, align 4
  %2568 = sext i32 %2566 to i64
  %2569 = getelementptr inbounds i32, i32* %2565, i64 %2568
  store i32 %2564, i32* %2569, align 4
  br i1 %2563, label %2570, label %2559

2570:                                             ; preds = %2559, %2551
  %2571 = load i32*, i32** %273, align 8
  %2572 = load i32, i32* %2519, align 4
  br label %2573

2573:                                             ; preds = %2542, %2570
  %2574 = phi i32 [ %2572, %2570 ], [ %2520, %2542 ]
  %2575 = phi i32* [ %2571, %2570 ], [ %2543, %2542 ]
  %2576 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 9
  %2577 = load i32, i32* %2576, align 4
  %2578 = add nsw i32 %2574, 1
  store i32 %2578, i32* %2519, align 4
  %2579 = sext i32 %2574 to i64
  %2580 = getelementptr inbounds i32, i32* %2575, i64 %2579
  store i32 %2577, i32* %2580, align 4
  br label %2581

2581:                                             ; preds = %2573, %2534
  %2582 = load i32, i32* %2519, align 4
  br label %2583

2583:                                             ; preds = %2581, %2515, %2471
  %2584 = phi i32 [ %2473, %2471 ], [ %2517, %2515 ], [ %2582, %2581 ]
  %2585 = add i32 %2422, 48
  %2586 = add i32 %2585, %2584
  %2587 = sext i32 %2586 to i64
  %2588 = tail call noalias i8* @uprv_malloc_69(i64 %2587) #8
  %2589 = icmp eq i8* %2588, null
  br i1 %2589, label %2590, label %2601

2590:                                             ; preds = %2583
  store i32 7, i32* %3, align 4
  %2591 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 6
  store i32 -1, i32* %2591, align 8
  %2592 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 2
  store i32 -1, i32* %2592, align 4
  %2593 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 5
  store i32 0, i32* %2593, align 4
  %2594 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 7
  %2595 = load i32, i32* %2594, align 4
  %2596 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 8
  store i32 %2595, i32* %2596, align 8
  %2597 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 11
  store i32 %2595, i32* %2597, align 4
  store i32 0, i32* %116, align 8
  %2598 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 12
  %2599 = bitcast i16** %2598 to i8**
  %2600 = load i8*, i8** %2599, align 8
  tail call void @uprv_free_69(i8* %2600) #7
  store i16* null, i16** %2598, align 8
  br label %2912

2601:                                             ; preds = %2583
  %2602 = bitcast i8* %2588 to %struct.UCPTrie*
  %2603 = getelementptr inbounds i8, i8* %2588, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %2603, i8 0, i64 40, i1 false) #7
  %2604 = getelementptr inbounds i8, i8* %2588, i64 16
  %2605 = bitcast i8* %2604 to i32*
  store i32 %2421, i32* %2605, align 8
  %2606 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 5
  %2607 = load i32, i32* %2606, align 4
  %2608 = getelementptr inbounds i8, i8* %2588, i64 20
  %2609 = bitcast i8* %2608 to i32*
  store i32 %2607, i32* %2609, align 4
  %2610 = load i32, i32* %116, align 8
  %2611 = getelementptr inbounds i8, i8* %2588, i64 24
  %2612 = bitcast i8* %2611 to i32*
  store i32 %2610, i32* %2612, align 8
  %2613 = add nsw i32 %2610, 4095
  %2614 = lshr i32 %2613, 12
  %2615 = trunc i32 %2614 to i16
  %2616 = getelementptr inbounds i8, i8* %2588, i64 28
  %2617 = bitcast i8* %2616 to i16*
  store i16 %2615, i16* %2617, align 4
  %2618 = trunc i32 %1 to i8
  %2619 = getelementptr inbounds i8, i8* %2588, i64 30
  store i8 %2618, i8* %2619, align 2
  %2620 = trunc i32 %2 to i8
  %2621 = getelementptr inbounds i8, i8* %2588, i64 31
  store i8 %2620, i8* %2621, align 1
  %2622 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 2
  %2623 = load i32, i32* %2622, align 4
  %2624 = trunc i32 %2623 to i16
  %2625 = getelementptr inbounds i8, i8* %2588, i64 38
  %2626 = bitcast i8* %2625 to i16*
  store i16 %2624, i16* %2626, align 2
  %2627 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 6
  %2628 = load i32, i32* %2627, align 8
  %2629 = getelementptr inbounds i8, i8* %2588, i64 40
  %2630 = bitcast i8* %2629 to i32*
  store i32 %2628, i32* %2630, align 8
  %2631 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 8
  %2632 = load i32, i32* %2631, align 8
  %2633 = getelementptr inbounds i8, i8* %2588, i64 44
  %2634 = bitcast i8* %2633 to i32*
  store i32 %2632, i32* %2634, align 4
  %2635 = getelementptr inbounds i8, i8* %2588, i64 48
  %2636 = bitcast i8* %2635 to i16*
  %2637 = bitcast i8* %2588 to i8**
  store i8* %2635, i8** %2637, align 8
  %2638 = icmp sgt i32 %2610, %114
  br i1 %2638, label %2677, label %2639

2639:                                             ; preds = %2601
  %2640 = icmp sgt i32 %2421, 0
  br i1 %2640, label %2641, label %2701

2641:                                             ; preds = %2639
  %2642 = add i32 %2421, -1
  %2643 = and i32 %2421, 3
  %2644 = icmp ult i32 %2642, 3
  br i1 %2644, label %2684, label %2645

2645:                                             ; preds = %2641
  %2646 = sub i32 %2421, %2643
  br label %2647

2647:                                             ; preds = %2647, %2645
  %2648 = phi i64 [ 0, %2645 ], [ %2674, %2647 ]
  %2649 = phi i16* [ %2636, %2645 ], [ %2673, %2647 ]
  %2650 = phi i32 [ %2646, %2645 ], [ %2675, %2647 ]
  %2651 = load i32*, i32** %268, align 8
  %2652 = getelementptr inbounds i32, i32* %2651, i64 %2648
  %2653 = load i32, i32* %2652, align 4
  %2654 = trunc i32 %2653 to i16
  %2655 = getelementptr inbounds i16, i16* %2649, i64 1
  store i16 %2654, i16* %2649, align 2
  %2656 = or i64 %2648, 4
  %2657 = load i32*, i32** %268, align 8
  %2658 = getelementptr inbounds i32, i32* %2657, i64 %2656
  %2659 = load i32, i32* %2658, align 4
  %2660 = trunc i32 %2659 to i16
  %2661 = getelementptr inbounds i16, i16* %2649, i64 2
  store i16 %2660, i16* %2655, align 2
  %2662 = or i64 %2648, 8
  %2663 = load i32*, i32** %268, align 8
  %2664 = getelementptr inbounds i32, i32* %2663, i64 %2662
  %2665 = load i32, i32* %2664, align 4
  %2666 = trunc i32 %2665 to i16
  %2667 = getelementptr inbounds i16, i16* %2649, i64 3
  store i16 %2666, i16* %2661, align 2
  %2668 = or i64 %2648, 12
  %2669 = load i32*, i32** %268, align 8
  %2670 = getelementptr inbounds i32, i32* %2669, i64 %2668
  %2671 = load i32, i32* %2670, align 4
  %2672 = trunc i32 %2671 to i16
  %2673 = getelementptr inbounds i16, i16* %2649, i64 4
  store i16 %2672, i16* %2667, align 2
  %2674 = add nuw nsw i64 %2648, 16
  %2675 = add i32 %2650, -4
  %2676 = icmp eq i32 %2675, 0
  br i1 %2676, label %2684, label %2647

2677:                                             ; preds = %2601
  %2678 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 12
  %2679 = bitcast i16** %2678 to i8**
  %2680 = load i8*, i8** %2679, align 8
  %2681 = sext i32 %2422 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %2635, i8* align 2 %2680, i64 %2681, i1 false) #7
  %2682 = sext i32 %2421 to i64
  %2683 = getelementptr inbounds i16, i16* %2636, i64 %2682
  br label %2701

2684:                                             ; preds = %2647, %2641
  %2685 = phi i16* [ undef, %2641 ], [ %2673, %2647 ]
  %2686 = phi i64 [ 0, %2641 ], [ %2674, %2647 ]
  %2687 = phi i16* [ %2636, %2641 ], [ %2673, %2647 ]
  %2688 = icmp eq i32 %2643, 0
  br i1 %2688, label %2701, label %2689

2689:                                             ; preds = %2684, %2689
  %2690 = phi i64 [ %2698, %2689 ], [ %2686, %2684 ]
  %2691 = phi i16* [ %2697, %2689 ], [ %2687, %2684 ]
  %2692 = phi i32 [ %2699, %2689 ], [ %2643, %2684 ]
  %2693 = load i32*, i32** %268, align 8
  %2694 = getelementptr inbounds i32, i32* %2693, i64 %2690
  %2695 = load i32, i32* %2694, align 4
  %2696 = trunc i32 %2695 to i16
  %2697 = getelementptr inbounds i16, i16* %2691, i64 1
  store i16 %2696, i16* %2691, align 2
  %2698 = add nuw nsw i64 %2690, 4
  %2699 = add i32 %2692, -1
  %2700 = icmp eq i32 %2699, 0
  br i1 %2700, label %2701, label %2689, !llvm.loop !29

2701:                                             ; preds = %2684, %2689, %2677, %2639
  %2702 = phi i16* [ %2683, %2677 ], [ %2636, %2639 ], [ %2685, %2684 ], [ %2697, %2689 ]
  %2703 = sext i32 %2422 to i64
  %2704 = getelementptr inbounds i8, i8* %2635, i64 %2703
  %2705 = load i32*, i32** %273, align 8
  %2706 = bitcast i32* %2705 to i8*
  switch i32 %2, label %2905 [
    i32 0, label %2707
    i32 1, label %2803
    i32 2, label %2808
  ]

2707:                                             ; preds = %2701
  %2708 = bitcast i8* %2603 to i16**
  store i16* %2702, i16** %2708, align 8
  %2709 = load i32, i32* %2606, align 4
  %2710 = icmp sgt i32 %2709, 0
  br i1 %2710, label %2711, label %2905

2711:                                             ; preds = %2707
  %2712 = add nsw i32 %2709, -1
  %2713 = zext i32 %2712 to i64
  %2714 = add nuw nsw i64 %2713, 1
  %2715 = icmp ult i64 %2714, 8
  br i1 %2715, label %2789, label %2716

2716:                                             ; preds = %2711
  %2717 = add nsw i32 %2709, -1
  %2718 = zext i32 %2717 to i64
  %2719 = add nuw nsw i64 %2718, 1
  %2720 = getelementptr i16, i16* %2702, i64 %2719
  %2721 = getelementptr i32, i32* %2705, i64 %2719
  %2722 = bitcast i32* %2721 to i16*
  %2723 = icmp ult i16* %2702, %2722
  %2724 = bitcast i16* %2720 to i32*
  %2725 = icmp ult i32* %2705, %2724
  %2726 = and i1 %2723, %2725
  br i1 %2726, label %2789, label %2727

2727:                                             ; preds = %2716
  %2728 = and i64 %2714, 8589934584
  %2729 = trunc i64 %2728 to i32
  %2730 = sub i32 %2709, %2729
  %2731 = getelementptr i32, i32* %2705, i64 %2728
  %2732 = getelementptr i16, i16* %2702, i64 %2728
  %2733 = add nsw i64 %2728, -8
  %2734 = lshr exact i64 %2733, 3
  %2735 = add nuw nsw i64 %2734, 1
  %2736 = and i64 %2735, 1
  %2737 = icmp eq i64 %2733, 0
  br i1 %2737, label %2771, label %2738

2738:                                             ; preds = %2727
  %2739 = sub nuw nsw i64 %2735, %2736
  br label %2740

2740:                                             ; preds = %2740, %2738
  %2741 = phi i64 [ 0, %2738 ], [ %2768, %2740 ]
  %2742 = phi i64 [ %2739, %2738 ], [ %2769, %2740 ]
  %2743 = getelementptr i32, i32* %2705, i64 %2741
  %2744 = getelementptr i16, i16* %2702, i64 %2741
  %2745 = bitcast i32* %2743 to <4 x i32>*
  %2746 = load <4 x i32>, <4 x i32>* %2745, align 4, !alias.scope !30
  %2747 = getelementptr i32, i32* %2743, i64 4
  %2748 = bitcast i32* %2747 to <4 x i32>*
  %2749 = load <4 x i32>, <4 x i32>* %2748, align 4, !alias.scope !30
  %2750 = trunc <4 x i32> %2746 to <4 x i16>
  %2751 = trunc <4 x i32> %2749 to <4 x i16>
  %2752 = bitcast i16* %2744 to <4 x i16>*
  store <4 x i16> %2750, <4 x i16>* %2752, align 2, !alias.scope !33, !noalias !30
  %2753 = getelementptr i16, i16* %2744, i64 4
  %2754 = bitcast i16* %2753 to <4 x i16>*
  store <4 x i16> %2751, <4 x i16>* %2754, align 2, !alias.scope !33, !noalias !30
  %2755 = or i64 %2741, 8
  %2756 = getelementptr i32, i32* %2705, i64 %2755
  %2757 = getelementptr i16, i16* %2702, i64 %2755
  %2758 = bitcast i32* %2756 to <4 x i32>*
  %2759 = load <4 x i32>, <4 x i32>* %2758, align 4, !alias.scope !30
  %2760 = getelementptr i32, i32* %2756, i64 4
  %2761 = bitcast i32* %2760 to <4 x i32>*
  %2762 = load <4 x i32>, <4 x i32>* %2761, align 4, !alias.scope !30
  %2763 = trunc <4 x i32> %2759 to <4 x i16>
  %2764 = trunc <4 x i32> %2762 to <4 x i16>
  %2765 = bitcast i16* %2757 to <4 x i16>*
  store <4 x i16> %2763, <4 x i16>* %2765, align 2, !alias.scope !33, !noalias !30
  %2766 = getelementptr i16, i16* %2757, i64 4
  %2767 = bitcast i16* %2766 to <4 x i16>*
  store <4 x i16> %2764, <4 x i16>* %2767, align 2, !alias.scope !33, !noalias !30
  %2768 = add i64 %2741, 16
  %2769 = add i64 %2742, -2
  %2770 = icmp eq i64 %2769, 0
  br i1 %2770, label %2771, label %2740, !llvm.loop !35

2771:                                             ; preds = %2740, %2727
  %2772 = phi i64 [ 0, %2727 ], [ %2768, %2740 ]
  %2773 = icmp eq i64 %2736, 0
  br i1 %2773, label %2787, label %2774

2774:                                             ; preds = %2771
  %2775 = getelementptr i32, i32* %2705, i64 %2772
  %2776 = getelementptr i16, i16* %2702, i64 %2772
  %2777 = bitcast i32* %2775 to <4 x i32>*
  %2778 = load <4 x i32>, <4 x i32>* %2777, align 4, !alias.scope !30
  %2779 = getelementptr i32, i32* %2775, i64 4
  %2780 = bitcast i32* %2779 to <4 x i32>*
  %2781 = load <4 x i32>, <4 x i32>* %2780, align 4, !alias.scope !30
  %2782 = trunc <4 x i32> %2778 to <4 x i16>
  %2783 = trunc <4 x i32> %2781 to <4 x i16>
  %2784 = bitcast i16* %2776 to <4 x i16>*
  store <4 x i16> %2782, <4 x i16>* %2784, align 2, !alias.scope !33, !noalias !30
  %2785 = getelementptr i16, i16* %2776, i64 4
  %2786 = bitcast i16* %2785 to <4 x i16>*
  store <4 x i16> %2783, <4 x i16>* %2786, align 2, !alias.scope !33, !noalias !30
  br label %2787

2787:                                             ; preds = %2771, %2774
  %2788 = icmp eq i64 %2714, %2728
  br i1 %2788, label %2905, label %2789

2789:                                             ; preds = %2787, %2716, %2711
  %2790 = phi i32 [ %2709, %2716 ], [ %2709, %2711 ], [ %2730, %2787 ]
  %2791 = phi i32* [ %2705, %2716 ], [ %2705, %2711 ], [ %2731, %2787 ]
  %2792 = phi i16* [ %2702, %2716 ], [ %2702, %2711 ], [ %2732, %2787 ]
  br label %2793

2793:                                             ; preds = %2789, %2793
  %2794 = phi i32 [ %2801, %2793 ], [ %2790, %2789 ]
  %2795 = phi i32* [ %2797, %2793 ], [ %2791, %2789 ]
  %2796 = phi i16* [ %2800, %2793 ], [ %2792, %2789 ]
  %2797 = getelementptr inbounds i32, i32* %2795, i64 1
  %2798 = load i32, i32* %2795, align 4
  %2799 = trunc i32 %2798 to i16
  %2800 = getelementptr inbounds i16, i16* %2796, i64 1
  store i16 %2799, i16* %2796, align 2
  %2801 = add nsw i32 %2794, -1
  %2802 = icmp sgt i32 %2801, 0
  br i1 %2802, label %2793, label %2905, !llvm.loop !36

2803:                                             ; preds = %2701
  %2804 = bitcast i8* %2603 to i8**
  store i8* %2704, i8** %2804, align 8
  %2805 = load i32, i32* %2606, align 4
  %2806 = sext i32 %2805 to i64
  %2807 = shl nsw i64 %2806, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2704, i8* align 4 %2706, i64 %2807, i1 false) #7
  br label %2905

2808:                                             ; preds = %2701
  %2809 = bitcast i8* %2603 to i8**
  store i8* %2704, i8** %2809, align 8
  %2810 = load i32, i32* %2606, align 4
  %2811 = icmp sgt i32 %2810, 0
  br i1 %2811, label %2812, label %2905

2812:                                             ; preds = %2808
  %2813 = add nsw i32 %2810, -1
  %2814 = zext i32 %2813 to i64
  %2815 = add nuw nsw i64 %2814, 1
  %2816 = icmp ult i64 %2815, 8
  br i1 %2816, label %2891, label %2817

2817:                                             ; preds = %2812
  %2818 = add nsw i32 %2810, -1
  %2819 = zext i32 %2818 to i64
  %2820 = add nsw i64 %2703, %2819
  %2821 = add nsw i64 %2820, 49
  %2822 = getelementptr i8, i8* %2588, i64 %2821
  %2823 = add nuw nsw i64 %2819, 1
  %2824 = getelementptr i32, i32* %2705, i64 %2823
  %2825 = bitcast i32* %2824 to i8*
  %2826 = icmp ult i8* %2704, %2825
  %2827 = icmp ugt i8* %2822, %2706
  %2828 = and i1 %2826, %2827
  br i1 %2828, label %2891, label %2829

2829:                                             ; preds = %2817
  %2830 = and i64 %2815, 8589934584
  %2831 = trunc i64 %2830 to i32
  %2832 = sub i32 %2810, %2831
  %2833 = getelementptr i32, i32* %2705, i64 %2830
  %2834 = getelementptr i8, i8* %2704, i64 %2830
  %2835 = add nsw i64 %2830, -8
  %2836 = lshr exact i64 %2835, 3
  %2837 = add nuw nsw i64 %2836, 1
  %2838 = and i64 %2837, 1
  %2839 = icmp eq i64 %2835, 0
  br i1 %2839, label %2873, label %2840

2840:                                             ; preds = %2829
  %2841 = sub nuw nsw i64 %2837, %2838
  br label %2842

2842:                                             ; preds = %2842, %2840
  %2843 = phi i64 [ 0, %2840 ], [ %2870, %2842 ]
  %2844 = phi i64 [ %2841, %2840 ], [ %2871, %2842 ]
  %2845 = getelementptr i32, i32* %2705, i64 %2843
  %2846 = getelementptr i8, i8* %2704, i64 %2843
  %2847 = bitcast i32* %2845 to <4 x i32>*
  %2848 = load <4 x i32>, <4 x i32>* %2847, align 4, !alias.scope !37
  %2849 = getelementptr i32, i32* %2845, i64 4
  %2850 = bitcast i32* %2849 to <4 x i32>*
  %2851 = load <4 x i32>, <4 x i32>* %2850, align 4, !alias.scope !37
  %2852 = trunc <4 x i32> %2848 to <4 x i8>
  %2853 = trunc <4 x i32> %2851 to <4 x i8>
  %2854 = bitcast i8* %2846 to <4 x i8>*
  store <4 x i8> %2852, <4 x i8>* %2854, align 1, !alias.scope !40, !noalias !37
  %2855 = getelementptr i8, i8* %2846, i64 4
  %2856 = bitcast i8* %2855 to <4 x i8>*
  store <4 x i8> %2853, <4 x i8>* %2856, align 1, !alias.scope !40, !noalias !37
  %2857 = or i64 %2843, 8
  %2858 = getelementptr i32, i32* %2705, i64 %2857
  %2859 = getelementptr i8, i8* %2704, i64 %2857
  %2860 = bitcast i32* %2858 to <4 x i32>*
  %2861 = load <4 x i32>, <4 x i32>* %2860, align 4, !alias.scope !37
  %2862 = getelementptr i32, i32* %2858, i64 4
  %2863 = bitcast i32* %2862 to <4 x i32>*
  %2864 = load <4 x i32>, <4 x i32>* %2863, align 4, !alias.scope !37
  %2865 = trunc <4 x i32> %2861 to <4 x i8>
  %2866 = trunc <4 x i32> %2864 to <4 x i8>
  %2867 = bitcast i8* %2859 to <4 x i8>*
  store <4 x i8> %2865, <4 x i8>* %2867, align 1, !alias.scope !40, !noalias !37
  %2868 = getelementptr i8, i8* %2859, i64 4
  %2869 = bitcast i8* %2868 to <4 x i8>*
  store <4 x i8> %2866, <4 x i8>* %2869, align 1, !alias.scope !40, !noalias !37
  %2870 = add i64 %2843, 16
  %2871 = add i64 %2844, -2
  %2872 = icmp eq i64 %2871, 0
  br i1 %2872, label %2873, label %2842, !llvm.loop !42

2873:                                             ; preds = %2842, %2829
  %2874 = phi i64 [ 0, %2829 ], [ %2870, %2842 ]
  %2875 = icmp eq i64 %2838, 0
  br i1 %2875, label %2889, label %2876

2876:                                             ; preds = %2873
  %2877 = getelementptr i32, i32* %2705, i64 %2874
  %2878 = getelementptr i8, i8* %2704, i64 %2874
  %2879 = bitcast i32* %2877 to <4 x i32>*
  %2880 = load <4 x i32>, <4 x i32>* %2879, align 4, !alias.scope !37
  %2881 = getelementptr i32, i32* %2877, i64 4
  %2882 = bitcast i32* %2881 to <4 x i32>*
  %2883 = load <4 x i32>, <4 x i32>* %2882, align 4, !alias.scope !37
  %2884 = trunc <4 x i32> %2880 to <4 x i8>
  %2885 = trunc <4 x i32> %2883 to <4 x i8>
  %2886 = bitcast i8* %2878 to <4 x i8>*
  store <4 x i8> %2884, <4 x i8>* %2886, align 1, !alias.scope !40, !noalias !37
  %2887 = getelementptr i8, i8* %2878, i64 4
  %2888 = bitcast i8* %2887 to <4 x i8>*
  store <4 x i8> %2885, <4 x i8>* %2888, align 1, !alias.scope !40, !noalias !37
  br label %2889

2889:                                             ; preds = %2873, %2876
  %2890 = icmp eq i64 %2815, %2830
  br i1 %2890, label %2905, label %2891

2891:                                             ; preds = %2889, %2817, %2812
  %2892 = phi i32 [ %2810, %2817 ], [ %2810, %2812 ], [ %2832, %2889 ]
  %2893 = phi i32* [ %2705, %2817 ], [ %2705, %2812 ], [ %2833, %2889 ]
  %2894 = phi i8* [ %2704, %2817 ], [ %2704, %2812 ], [ %2834, %2889 ]
  br label %2895

2895:                                             ; preds = %2891, %2895
  %2896 = phi i32 [ %2903, %2895 ], [ %2892, %2891 ]
  %2897 = phi i32* [ %2899, %2895 ], [ %2893, %2891 ]
  %2898 = phi i8* [ %2902, %2895 ], [ %2894, %2891 ]
  %2899 = getelementptr inbounds i32, i32* %2897, i64 1
  %2900 = load i32, i32* %2897, align 4
  %2901 = trunc i32 %2900 to i8
  %2902 = getelementptr inbounds i8, i8* %2898, i64 1
  store i8 %2901, i8* %2898, align 1
  %2903 = add nsw i32 %2896, -1
  %2904 = icmp sgt i32 %2903, 0
  br i1 %2904, label %2895, label %2905, !llvm.loop !43

2905:                                             ; preds = %2895, %2793, %2889, %2787, %2808, %2803, %2707, %2701
  store i32 -1, i32* %2627, align 8
  store i32 -1, i32* %2622, align 4
  store i32 0, i32* %2606, align 4
  %2906 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 7
  %2907 = load i32, i32* %2906, align 4
  store i32 %2907, i32* %2631, align 8
  %2908 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 11
  store i32 %2907, i32* %2908, align 4
  store i32 0, i32* %116, align 8
  %2909 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %14, i64 0, i32 12
  %2910 = bitcast i16** %2909 to i8**
  %2911 = load i8*, i8** %2910, align 8
  tail call void @uprv_free_69(i8* %2911) #7
  store i16* null, i16** %2909, align 8
  br label %2912

2912:                                             ; preds = %2905, %2590, %2397, %18, %4
  %2913 = phi %struct.UCPTrie* [ null, %4 ], [ null, %18 ], [ null, %2397 ], [ null, %2590 ], [ %2602, %2905 ]
  ret %struct.UCPTrie* %2913
}

; Function Attrs: allocsize(0)
declare noalias i8* @uprv_malloc_69(i64) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @uprv_free_69(i8*) local_unnamed_addr #4

declare i32 @ucpmap_get_69(%struct.UCPMap*, i32) local_unnamed_addr #4

declare i32 @ucpmap_getRange_69(%struct.UCPMap*, i32, i32, i32, i32 (i8*, i32)*, i8*, i32*) local_unnamed_addr #4

declare i32 @ucptrie_getRange_69(%struct.UCPTrie*, i32, i32, i32, i32 (i8*, i32)*, i8*, i32*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @_ZN6icu_6912_GLOBAL__N_120MutableCodePointTrie12getDataBlockEi(%"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* nocapture, i32) unnamed_addr #0 align 2 {
  %3 = sext i32 %1 to i64
  %4 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %0, i64 0, i32 13, i64 %3
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 1
  br i1 %6, label %7, label %12

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %0, i64 0, i32 0
  %9 = load i32*, i32** %8, align 8
  %10 = getelementptr inbounds i32, i32* %9, i64 %3
  %11 = load i32, i32* %10, align 4
  br label %120

12:                                               ; preds = %2
  %13 = icmp slt i32 %1, 4096
  %14 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %0, i64 0, i32 5
  %15 = load i32, i32* %14, align 4
  br i1 %13, label %16, label %76

16:                                               ; preds = %12
  %17 = add nsw i32 %15, 64
  %18 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %0, i64 0, i32 4
  %19 = load i32, i32* %18, align 8
  %20 = icmp sgt i32 %17, %19
  br i1 %20, label %21, label %38

21:                                               ; preds = %16
  %22 = icmp slt i32 %19, 131072
  br i1 %22, label %25, label %23

23:                                               ; preds = %21
  %24 = icmp slt i32 %19, 1114112
  br i1 %24, label %25, label %120

25:                                               ; preds = %23, %21
  %26 = phi i32 [ 131072, %21 ], [ 1114112, %23 ]
  %27 = shl nuw nsw i32 %26, 2
  %28 = zext i32 %27 to i64
  %29 = tail call noalias i8* @uprv_malloc_69(i64 %28) #8
  %30 = icmp eq i8* %29, null
  br i1 %30, label %120, label %31

31:                                               ; preds = %25
  %32 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %0, i64 0, i32 3
  %33 = bitcast i32** %32 to i8**
  %34 = load i8*, i8** %33, align 8
  %35 = load i32, i32* %14, align 4
  %36 = sext i32 %35 to i64
  %37 = shl nsw i64 %36, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %29, i8* align 4 %34, i64 %37, i1 false) #7
  tail call void @uprv_free_69(i8* %34) #7
  store i8* %29, i8** %33, align 8
  store i32 %26, i32* %18, align 8
  br label %38

38:                                               ; preds = %16, %31
  store i32 %17, i32* %14, align 4
  %39 = icmp slt i32 %15, 0
  br i1 %39, label %120, label %40

40:                                               ; preds = %38
  %41 = and i32 %1, -4
  %42 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %0, i64 0, i32 3
  %43 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %0, i64 0, i32 0
  %44 = or i32 %1, 3
  %45 = sext i32 %15 to i64
  %46 = sext i32 %41 to i64
  %47 = sext i32 %44 to i64
  br label %48

48:                                               ; preds = %48, %40
  %49 = phi i64 [ %67, %48 ], [ %46, %40 ]
  %50 = phi i64 [ %70, %48 ], [ %45, %40 ]
  %51 = load i32*, i32** %42, align 8
  %52 = getelementptr inbounds i32, i32* %51, i64 %50
  %53 = load i32*, i32** %43, align 8
  %54 = getelementptr inbounds i32, i32* %53, i64 %49
  %55 = load i32, i32* %54, align 4
  %56 = insertelement <4 x i32> undef, i32 %55, i32 0
  %57 = shufflevector <4 x i32> %56, <4 x i32> undef, <4 x i32> zeroinitializer
  %58 = bitcast i32* %52 to <4 x i32>*
  store <4 x i32> %57, <4 x i32>* %58, align 4
  %59 = getelementptr inbounds i32, i32* %52, i64 4
  %60 = bitcast i32* %59 to <4 x i32>*
  store <4 x i32> %57, <4 x i32>* %60, align 4
  %61 = getelementptr inbounds i32, i32* %52, i64 8
  %62 = bitcast i32* %61 to <4 x i32>*
  store <4 x i32> %57, <4 x i32>* %62, align 4
  %63 = getelementptr inbounds i32, i32* %52, i64 12
  %64 = bitcast i32* %63 to <4 x i32>*
  store <4 x i32> %57, <4 x i32>* %64, align 4
  %65 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %0, i64 0, i32 13, i64 %49
  store i8 1, i8* %65, align 1
  %66 = load i32*, i32** %43, align 8
  %67 = add nsw i64 %49, 1
  %68 = getelementptr inbounds i32, i32* %66, i64 %49
  %69 = trunc i64 %50 to i32
  store i32 %69, i32* %68, align 4
  %70 = add nsw i64 %50, 16
  %71 = icmp slt i64 %49, %47
  br i1 %71, label %48, label %72

72:                                               ; preds = %48
  %73 = load i32*, i32** %43, align 8
  %74 = getelementptr inbounds i32, i32* %73, i64 %3
  %75 = load i32, i32* %74, align 4
  br label %120

76:                                               ; preds = %12
  %77 = add nsw i32 %15, 16
  %78 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %0, i64 0, i32 4
  %79 = load i32, i32* %78, align 8
  %80 = icmp sgt i32 %77, %79
  br i1 %80, label %81, label %98

81:                                               ; preds = %76
  %82 = icmp slt i32 %79, 131072
  br i1 %82, label %85, label %83

83:                                               ; preds = %81
  %84 = icmp slt i32 %79, 1114112
  br i1 %84, label %85, label %120

85:                                               ; preds = %83, %81
  %86 = phi i32 [ 131072, %81 ], [ 1114112, %83 ]
  %87 = shl nuw nsw i32 %86, 2
  %88 = zext i32 %87 to i64
  %89 = tail call noalias i8* @uprv_malloc_69(i64 %88) #8
  %90 = icmp eq i8* %89, null
  br i1 %90, label %120, label %91

91:                                               ; preds = %85
  %92 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %0, i64 0, i32 3
  %93 = bitcast i32** %92 to i8**
  %94 = load i8*, i8** %93, align 8
  %95 = load i32, i32* %14, align 4
  %96 = sext i32 %95 to i64
  %97 = shl nsw i64 %96, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %89, i8* align 4 %94, i64 %97, i1 false) #7
  tail call void @uprv_free_69(i8* %94) #7
  store i8* %89, i8** %93, align 8
  store i32 %86, i32* %78, align 8
  br label %98

98:                                               ; preds = %76, %91
  store i32 %77, i32* %14, align 4
  %99 = icmp slt i32 %15, 0
  br i1 %99, label %120, label %100

100:                                              ; preds = %98
  %101 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %0, i64 0, i32 3
  %102 = load i32*, i32** %101, align 8
  %103 = sext i32 %15 to i64
  %104 = getelementptr inbounds i32, i32* %102, i64 %103
  %105 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MutableCodePointTrie", %"class.icu_69::(anonymous namespace)::MutableCodePointTrie"* %0, i64 0, i32 0
  %106 = load i32*, i32** %105, align 8
  %107 = getelementptr inbounds i32, i32* %106, i64 %3
  %108 = load i32, i32* %107, align 4
  %109 = insertelement <4 x i32> undef, i32 %108, i32 0
  %110 = shufflevector <4 x i32> %109, <4 x i32> undef, <4 x i32> zeroinitializer
  %111 = bitcast i32* %104 to <4 x i32>*
  store <4 x i32> %110, <4 x i32>* %111, align 4
  %112 = getelementptr inbounds i32, i32* %104, i64 4
  %113 = bitcast i32* %112 to <4 x i32>*
  store <4 x i32> %110, <4 x i32>* %113, align 4
  %114 = getelementptr inbounds i32, i32* %104, i64 8
  %115 = bitcast i32* %114 to <4 x i32>*
  store <4 x i32> %110, <4 x i32>* %115, align 4
  %116 = getelementptr inbounds i32, i32* %104, i64 12
  %117 = bitcast i32* %116 to <4 x i32>*
  store <4 x i32> %110, <4 x i32>* %117, align 4
  store i8 1, i8* %4, align 1
  %118 = load i32*, i32** %105, align 8
  %119 = getelementptr inbounds i32, i32* %118, i64 %3
  store i32 %15, i32* %119, align 4
  br label %120

120:                                              ; preds = %85, %83, %25, %23, %100, %98, %72, %38, %7
  %121 = phi i32 [ %11, %7 ], [ %75, %72 ], [ %15, %38 ], [ %15, %98 ], [ %15, %100 ], [ -1, %23 ], [ -1, %25 ], [ -1, %83 ], [ -1, %85 ]
  ret i32 %121
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @_ZN6icu_6912_GLOBAL__N_111MixedBlocks6extendIjEEvPKT_iii(%"class.icu_69::(anonymous namespace)::MixedBlocks"* nocapture readonly, i32* nocapture readonly, i32, i32) unnamed_addr #6 align 2 {
  %5 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MixedBlocks", %"class.icu_69::(anonymous namespace)::MixedBlocks"* %0, i64 0, i32 5
  %6 = load i32, i32* %5, align 8
  %7 = sub nsw i32 %2, %6
  %8 = icmp sgt i32 %7, -1
  %9 = add nsw i32 %7, 1
  %10 = select i1 %8, i32 %9, i32 0
  %11 = sub nsw i32 %3, %6
  %12 = icmp sgt i32 %10, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %4
  %14 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MixedBlocks", %"class.icu_69::(anonymous namespace)::MixedBlocks"* %0, i64 0, i32 3
  %15 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MixedBlocks", %"class.icu_69::(anonymous namespace)::MixedBlocks"* %0, i64 0, i32 2
  %16 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MixedBlocks", %"class.icu_69::(anonymous namespace)::MixedBlocks"* %0, i64 0, i32 0
  %17 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MixedBlocks", %"class.icu_69::(anonymous namespace)::MixedBlocks"* %0, i64 0, i32 4
  br label %19

18:                                               ; preds = %98, %4
  ret void

19:                                               ; preds = %100, %13
  %20 = phi i32 [ %6, %13 ], [ %101, %100 ]
  %21 = phi i32 [ %10, %13 ], [ %26, %100 ]
  %22 = add nsw i32 %20, %21
  %23 = sext i32 %21 to i64
  %24 = getelementptr inbounds i32, i32* %1, i64 %23
  %25 = load i32, i32* %24, align 4
  %26 = add i32 %21, 1
  %27 = sext i32 %26 to i64
  %28 = sext i32 %22 to i64
  br label %29

29:                                               ; preds = %29, %19
  %30 = phi i64 [ %33, %29 ], [ %27, %19 ]
  %31 = phi i32 [ %36, %29 ], [ %25, %19 ]
  %32 = mul i32 %31, 37
  %33 = add nsw i64 %30, 1
  %34 = getelementptr inbounds i32, i32* %1, i64 %30
  %35 = load i32, i32* %34, align 4
  %36 = add i32 %32, %35
  %37 = icmp slt i64 %33, %28
  br i1 %37, label %29, label %38

38:                                               ; preds = %29
  %39 = load i32, i32* %14, align 8
  %40 = shl i32 %36, %39
  %41 = load i32, i32* %15, align 4
  %42 = add nsw i32 %41, -1
  %43 = urem i32 %36, %42
  %44 = add nuw i32 %43, 1
  %45 = load i32*, i32** %16, align 8
  %46 = sext i32 %44 to i64
  %47 = getelementptr inbounds i32, i32* %45, i64 %46
  %48 = load i32, i32* %47, align 4
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %54, label %50

50:                                               ; preds = %38
  %51 = load i32, i32* %17, align 4
  %52 = xor i32 %51, -1
  %53 = icmp sgt i32 %20, 0
  br label %57

54:                                               ; preds = %83, %38
  %55 = phi i32 [ %44, %38 ], [ %85, %83 ]
  %56 = xor i32 %55, -1
  br label %90

57:                                               ; preds = %83, %50
  %58 = phi i32 [ %48, %50 ], [ %88, %83 ]
  %59 = phi i32 [ %44, %50 ], [ %85, %83 ]
  %60 = and i32 %58, %52
  %61 = icmp eq i32 %60, %40
  br i1 %61, label %62, label %83

62:                                               ; preds = %57
  br i1 %53, label %63, label %80

63:                                               ; preds = %62
  %64 = and i32 %58, %51
  %65 = add i32 %64, -1
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds i32, i32* %1, i64 %66
  br label %68

68:                                               ; preds = %75, %63
  %69 = phi i32 [ %78, %75 ], [ %20, %63 ]
  %70 = phi i32* [ %77, %75 ], [ %24, %63 ]
  %71 = phi i32* [ %76, %75 ], [ %67, %63 ]
  %72 = load i32, i32* %71, align 4
  %73 = load i32, i32* %70, align 4
  %74 = icmp eq i32 %72, %73
  br i1 %74, label %75, label %83

75:                                               ; preds = %68
  %76 = getelementptr inbounds i32, i32* %71, i64 1
  %77 = getelementptr inbounds i32, i32* %70, i64 1
  %78 = add nsw i32 %69, -1
  %79 = icmp sgt i32 %78, 0
  br i1 %79, label %68, label %80

80:                                               ; preds = %75, %62
  %81 = phi i32 [ %20, %62 ], [ %78, %75 ]
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %90, label %83

83:                                               ; preds = %68, %80, %57
  %84 = add nsw i32 %59, %44
  %85 = srem i32 %84, %41
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds i32, i32* %45, i64 %86
  %88 = load i32, i32* %87, align 4
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %54, label %57

90:                                               ; preds = %80, %54
  %91 = phi i32 [ %56, %54 ], [ %59, %80 ]
  %92 = icmp slt i32 %91, 0
  br i1 %92, label %93, label %98

93:                                               ; preds = %90
  %94 = or i32 %40, %26
  %95 = xor i32 %91, -1
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds i32, i32* %45, i64 %96
  store i32 %94, i32* %97, align 4
  br label %98

98:                                               ; preds = %90, %93
  %99 = icmp sgt i32 %26, %11
  br i1 %99, label %18, label %100

100:                                              ; preds = %98
  %101 = load i32, i32* %5, align 8
  br label %19
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @_ZN6icu_6912_GLOBAL__N_111MixedBlocks6extendItEEvPKT_iii(%"class.icu_69::(anonymous namespace)::MixedBlocks"* nocapture readonly, i16* nocapture readonly, i32, i32, i32) unnamed_addr #6 align 2 {
  %6 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MixedBlocks", %"class.icu_69::(anonymous namespace)::MixedBlocks"* %0, i64 0, i32 5
  %7 = load i32, i32* %6, align 8
  %8 = sub nsw i32 %3, %7
  %9 = icmp slt i32 %8, %2
  %10 = add nsw i32 %8, 1
  %11 = select i1 %9, i32 %2, i32 %10
  %12 = sub nsw i32 %4, %7
  %13 = icmp sgt i32 %11, %12
  br i1 %13, label %19, label %14

14:                                               ; preds = %5
  %15 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MixedBlocks", %"class.icu_69::(anonymous namespace)::MixedBlocks"* %0, i64 0, i32 3
  %16 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MixedBlocks", %"class.icu_69::(anonymous namespace)::MixedBlocks"* %0, i64 0, i32 2
  %17 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MixedBlocks", %"class.icu_69::(anonymous namespace)::MixedBlocks"* %0, i64 0, i32 0
  %18 = getelementptr inbounds %"class.icu_69::(anonymous namespace)::MixedBlocks", %"class.icu_69::(anonymous namespace)::MixedBlocks"* %0, i64 0, i32 4
  br label %20

19:                                               ; preds = %101, %5
  ret void

20:                                               ; preds = %103, %14
  %21 = phi i32 [ %7, %14 ], [ %104, %103 ]
  %22 = phi i32 [ %11, %14 ], [ %28, %103 ]
  %23 = add nsw i32 %21, %22
  %24 = sext i32 %22 to i64
  %25 = getelementptr inbounds i16, i16* %1, i64 %24
  %26 = load i16, i16* %25, align 2
  %27 = zext i16 %26 to i32
  %28 = add i32 %22, 1
  %29 = sext i32 %28 to i64
  %30 = sext i32 %23 to i64
  br label %31

31:                                               ; preds = %31, %20
  %32 = phi i64 [ %35, %31 ], [ %29, %20 ]
  %33 = phi i32 [ %39, %31 ], [ %27, %20 ]
  %34 = mul i32 %33, 37
  %35 = add nsw i64 %32, 1
  %36 = getelementptr inbounds i16, i16* %1, i64 %32
  %37 = load i16, i16* %36, align 2
  %38 = zext i16 %37 to i32
  %39 = add i32 %34, %38
  %40 = icmp slt i64 %35, %30
  br i1 %40, label %31, label %41

41:                                               ; preds = %31
  %42 = load i32, i32* %15, align 8
  %43 = shl i32 %39, %42
  %44 = load i32, i32* %16, align 4
  %45 = add nsw i32 %44, -1
  %46 = urem i32 %39, %45
  %47 = add nuw i32 %46, 1
  %48 = load i32*, i32** %17, align 8
  %49 = sext i32 %47 to i64
  %50 = getelementptr inbounds i32, i32* %48, i64 %49
  %51 = load i32, i32* %50, align 4
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %57, label %53

53:                                               ; preds = %41
  %54 = load i32, i32* %18, align 4
  %55 = xor i32 %54, -1
  %56 = icmp sgt i32 %21, 0
  br label %60

57:                                               ; preds = %86, %41
  %58 = phi i32 [ %47, %41 ], [ %88, %86 ]
  %59 = xor i32 %58, -1
  br label %93

60:                                               ; preds = %86, %53
  %61 = phi i32 [ %51, %53 ], [ %91, %86 ]
  %62 = phi i32 [ %47, %53 ], [ %88, %86 ]
  %63 = and i32 %61, %55
  %64 = icmp eq i32 %63, %43
  br i1 %64, label %65, label %86

65:                                               ; preds = %60
  br i1 %56, label %66, label %83

66:                                               ; preds = %65
  %67 = and i32 %61, %54
  %68 = add i32 %67, -1
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds i16, i16* %1, i64 %69
  br label %71

71:                                               ; preds = %78, %66
  %72 = phi i32 [ %81, %78 ], [ %21, %66 ]
  %73 = phi i16* [ %80, %78 ], [ %25, %66 ]
  %74 = phi i16* [ %79, %78 ], [ %70, %66 ]
  %75 = load i16, i16* %74, align 2
  %76 = load i16, i16* %73, align 2
  %77 = icmp eq i16 %75, %76
  br i1 %77, label %78, label %86

78:                                               ; preds = %71
  %79 = getelementptr inbounds i16, i16* %74, i64 1
  %80 = getelementptr inbounds i16, i16* %73, i64 1
  %81 = add nsw i32 %72, -1
  %82 = icmp sgt i32 %81, 0
  br i1 %82, label %71, label %83

83:                                               ; preds = %78, %65
  %84 = phi i32 [ %21, %65 ], [ %81, %78 ]
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %93, label %86

86:                                               ; preds = %71, %83, %60
  %87 = add nsw i32 %62, %47
  %88 = srem i32 %87, %44
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds i32, i32* %48, i64 %89
  %91 = load i32, i32* %90, align 4
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %57, label %60

93:                                               ; preds = %83, %57
  %94 = phi i32 [ %59, %57 ], [ %62, %83 ]
  %95 = icmp slt i32 %94, 0
  br i1 %95, label %96, label %101

96:                                               ; preds = %93
  %97 = or i32 %43, %28
  %98 = xor i32 %94, -1
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds i32, i32* %48, i64 %99
  store i32 %97, i32* %100, align 4
  br label %101

101:                                              ; preds = %93, %96
  %102 = icmp sgt i32 %28, %12
  br i1 %102, label %19, label %103

103:                                              ; preds = %101
  %104 = load i32, i32* %6, align 8
  br label %20
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { allocsize(0) "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { nounwind allocsize(0) }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.unroll.disable"}
!6 = distinct !{!6, !7, !3}
!7 = !{!"llvm.loop.unroll.runtime.disable"}
!8 = distinct !{!8, !3}
!9 = distinct !{!9, !5}
!10 = distinct !{!10, !7, !3}
!11 = distinct !{!11, !3}
!12 = distinct !{!12, !5}
!13 = distinct !{!13, !7, !3}
!14 = distinct !{!14, !5}
!15 = distinct !{!15, !5}
!16 = distinct !{!16, !5}
!17 = distinct !{!17, !5}
!18 = distinct !{!18, !3}
!19 = distinct !{!19, !5}
!20 = distinct !{!20, !7, !3}
!21 = !{!22}
!22 = distinct !{!22, !23}
!23 = distinct !{!23, !"LVerDomain"}
!24 = !{!25}
!25 = distinct !{!25, !23}
!26 = distinct !{!26, !3}
!27 = distinct !{!27, !5}
!28 = distinct !{!28, !3}
!29 = distinct !{!29, !5}
!30 = !{!31}
!31 = distinct !{!31, !32}
!32 = distinct !{!32, !"LVerDomain"}
!33 = !{!34}
!34 = distinct !{!34, !32}
!35 = distinct !{!35, !3}
!36 = distinct !{!36, !3}
!37 = !{!38}
!38 = distinct !{!38, !39}
!39 = distinct !{!39, !"LVerDomain"}
!40 = !{!41}
!41 = distinct !{!41, !39}
!42 = distinct !{!42, !3}
!43 = distinct !{!43, !3}
