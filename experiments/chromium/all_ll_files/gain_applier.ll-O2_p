; ModuleID = '../../third_party/webrtc/modules/audio_processing/agc2/gain_applier.cc'
source_filename = "../../third_party/webrtc/modules/audio_processing/agc2/gain_applier.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.webrtc::GainApplier" = type { i8, float, float, i32, float }
%"class.webrtc::AudioFrameView" = type { float**, i64, i64 }

@_ZN6webrtc11GainApplierC1Ebf = hidden unnamed_addr alias void (%"class.webrtc::GainApplier"*, i1, float), void (%"class.webrtc::GainApplier"*, i1, float)* @_ZN6webrtc11GainApplierC2Ebf

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN6webrtc11GainApplierC2Ebf(%"class.webrtc::GainApplier"* nocapture, i1 zeroext, float) unnamed_addr #0 align 2 {
  %4 = zext i1 %1 to i8
  %5 = getelementptr inbounds %"class.webrtc::GainApplier", %"class.webrtc::GainApplier"* %0, i64 0, i32 0
  store i8 %4, i8* %5, align 4
  %6 = getelementptr inbounds %"class.webrtc::GainApplier", %"class.webrtc::GainApplier"* %0, i64 0, i32 1
  store float %2, float* %6, align 4
  %7 = getelementptr inbounds %"class.webrtc::GainApplier", %"class.webrtc::GainApplier"* %0, i64 0, i32 2
  store float %2, float* %7, align 4
  %8 = getelementptr inbounds %"class.webrtc::GainApplier", %"class.webrtc::GainApplier"* %0, i64 0, i32 3
  store i32 -1, i32* %8, align 4
  %9 = getelementptr inbounds %"class.webrtc::GainApplier", %"class.webrtc::GainApplier"* %0, i64 0, i32 4
  store float -1.000000e+00, float* %9, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc11GainApplier9ApplyGainENS_14AudioFrameViewIfEE(%"class.webrtc::GainApplier"* nocapture, %"class.webrtc::AudioFrameView"* nocapture readonly byval(%"class.webrtc::AudioFrameView") align 8) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::AudioFrameView", %"class.webrtc::AudioFrameView"* %1, i64 0, i32 2
  %4 = load i64, i64* %3, align 8
  %5 = trunc i64 %4 to i32
  %6 = getelementptr inbounds %"class.webrtc::GainApplier", %"class.webrtc::GainApplier"* %0, i64 0, i32 3
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, %5
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  store i32 %5, i32* %6, align 4
  %10 = sitofp i32 %5 to float
  %11 = fdiv float 1.000000e+00, %10
  %12 = getelementptr inbounds %"class.webrtc::GainApplier", %"class.webrtc::GainApplier"* %0, i64 0, i32 4
  store float %11, float* %12, align 4
  br label %13

13:                                               ; preds = %2, %9
  %14 = getelementptr inbounds %"class.webrtc::GainApplier", %"class.webrtc::GainApplier"* %0, i64 0, i32 1
  %15 = load float, float* %14, align 4
  %16 = getelementptr inbounds %"class.webrtc::GainApplier", %"class.webrtc::GainApplier"* %0, i64 0, i32 2
  %17 = load float, float* %16, align 4
  %18 = getelementptr inbounds %"class.webrtc::AudioFrameView", %"class.webrtc::AudioFrameView"* %1, i64 0, i32 0
  %19 = load float**, float*** %18, align 8
  %20 = getelementptr inbounds %"class.webrtc::AudioFrameView", %"class.webrtc::AudioFrameView"* %1, i64 0, i32 1
  %21 = load i64, i64* %20, align 8
  %22 = fcmp oeq float %15, %17
  br i1 %22, label %23, label %114

23:                                               ; preds = %13
  %24 = fcmp oge float %17, 0x3FEFFFC000000000
  %25 = fcmp ole float %17, 0x3FF0002000000000
  %26 = and i1 %24, %25
  %27 = icmp eq i64 %21, 0
  %28 = or i1 %26, %27
  br i1 %28, label %177, label %29

29:                                               ; preds = %23
  %30 = icmp eq i64 %4, 0
  %31 = add i64 %4, -1
  %32 = insertelement <4 x float> undef, float %17, i32 0
  %33 = shufflevector <4 x float> %32, <4 x float> undef, <4 x i32> zeroinitializer
  %34 = insertelement <4 x float> undef, float %17, i32 0
  %35 = shufflevector <4 x float> %34, <4 x float> undef, <4 x i32> zeroinitializer
  br label %36

36:                                               ; preds = %105, %29
  %37 = phi i64 [ %106, %105 ], [ 0, %29 ]
  %38 = getelementptr inbounds float*, float** %19, i64 %37
  %39 = load float*, float** %38, align 8
  %40 = select i1 %30, float* null, float* %39
  %41 = getelementptr inbounds float, float* %40, i64 %4
  br i1 %30, label %105, label %42

42:                                               ; preds = %36
  %43 = ptrtoint float* %39 to i64
  %44 = getelementptr float, float* %40, i64 %31
  %45 = ptrtoint float* %44 to i64
  %46 = sub i64 %45, %43
  %47 = lshr i64 %46, 2
  %48 = add nuw nsw i64 %47, 1
  %49 = icmp ult i64 %48, 8
  br i1 %49, label %50, label %52

50:                                               ; preds = %103, %42
  %51 = phi float* [ %39, %42 ], [ %54, %103 ]
  br label %108

52:                                               ; preds = %42
  %53 = and i64 %48, 9223372036854775800
  %54 = getelementptr float, float* %39, i64 %53
  %55 = add nsw i64 %53, -8
  %56 = lshr exact i64 %55, 3
  %57 = add nuw nsw i64 %56, 1
  %58 = and i64 %57, 1
  %59 = icmp eq i64 %55, 0
  br i1 %59, label %89, label %60

60:                                               ; preds = %52
  %61 = sub nuw nsw i64 %57, %58
  br label %62

62:                                               ; preds = %62, %60
  %63 = phi i64 [ 0, %60 ], [ %86, %62 ]
  %64 = phi i64 [ %61, %60 ], [ %87, %62 ]
  %65 = getelementptr float, float* %39, i64 %63
  %66 = bitcast float* %65 to <4 x float>*
  %67 = load <4 x float>, <4 x float>* %66, align 4
  %68 = getelementptr float, float* %65, i64 4
  %69 = bitcast float* %68 to <4 x float>*
  %70 = load <4 x float>, <4 x float>* %69, align 4
  %71 = fmul <4 x float> %33, %67
  %72 = fmul <4 x float> %35, %70
  %73 = bitcast float* %65 to <4 x float>*
  store <4 x float> %71, <4 x float>* %73, align 4
  %74 = bitcast float* %68 to <4 x float>*
  store <4 x float> %72, <4 x float>* %74, align 4
  %75 = or i64 %63, 8
  %76 = getelementptr float, float* %39, i64 %75
  %77 = bitcast float* %76 to <4 x float>*
  %78 = load <4 x float>, <4 x float>* %77, align 4
  %79 = getelementptr float, float* %76, i64 4
  %80 = bitcast float* %79 to <4 x float>*
  %81 = load <4 x float>, <4 x float>* %80, align 4
  %82 = fmul <4 x float> %33, %78
  %83 = fmul <4 x float> %35, %81
  %84 = bitcast float* %76 to <4 x float>*
  store <4 x float> %82, <4 x float>* %84, align 4
  %85 = bitcast float* %79 to <4 x float>*
  store <4 x float> %83, <4 x float>* %85, align 4
  %86 = add i64 %63, 16
  %87 = add i64 %64, -2
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %89, label %62, !llvm.loop !2

89:                                               ; preds = %62, %52
  %90 = phi i64 [ 0, %52 ], [ %86, %62 ]
  %91 = icmp eq i64 %58, 0
  br i1 %91, label %103, label %92

92:                                               ; preds = %89
  %93 = getelementptr float, float* %39, i64 %90
  %94 = bitcast float* %93 to <4 x float>*
  %95 = load <4 x float>, <4 x float>* %94, align 4
  %96 = getelementptr float, float* %93, i64 4
  %97 = bitcast float* %96 to <4 x float>*
  %98 = load <4 x float>, <4 x float>* %97, align 4
  %99 = fmul <4 x float> %33, %95
  %100 = fmul <4 x float> %35, %98
  %101 = bitcast float* %93 to <4 x float>*
  store <4 x float> %99, <4 x float>* %101, align 4
  %102 = bitcast float* %96 to <4 x float>*
  store <4 x float> %100, <4 x float>* %102, align 4
  br label %103

103:                                              ; preds = %89, %92
  %104 = icmp eq i64 %48, %53
  br i1 %104, label %105, label %50

105:                                              ; preds = %108, %103, %36
  %106 = add nuw i64 %37, 1
  %107 = icmp eq i64 %106, %21
  br i1 %107, label %177, label %36

108:                                              ; preds = %50, %108
  %109 = phi float* [ %112, %108 ], [ %51, %50 ]
  %110 = load float, float* %109, align 4
  %111 = fmul float %17, %110
  store float %111, float* %109, align 4
  %112 = getelementptr inbounds float, float* %109, i64 1
  %113 = icmp eq float* %112, %41
  br i1 %113, label %105, label %108, !llvm.loop !4

114:                                              ; preds = %13
  %115 = getelementptr inbounds %"class.webrtc::GainApplier", %"class.webrtc::GainApplier"* %0, i64 0, i32 4
  %116 = load float, float* %115, align 4
  %117 = fsub float %17, %15
  %118 = fmul float %117, %116
  %119 = icmp eq i64 %4, 0
  br i1 %119, label %177, label %120

120:                                              ; preds = %114
  %121 = icmp eq i64 %21, 0
  %122 = add i64 %21, -1
  %123 = and i64 %21, 3
  %124 = icmp ult i64 %122, 3
  %125 = sub i64 %21, %123
  %126 = icmp eq i64 %123, 0
  br label %127

127:                                              ; preds = %144, %120
  %128 = phi i64 [ 0, %120 ], [ %146, %144 ]
  %129 = phi float [ %15, %120 ], [ %145, %144 ]
  br i1 %121, label %144, label %130

130:                                              ; preds = %127
  br i1 %124, label %131, label %148

131:                                              ; preds = %148, %130
  %132 = phi i64 [ 0, %130 ], [ %174, %148 ]
  br i1 %126, label %144, label %133

133:                                              ; preds = %131, %133
  %134 = phi i64 [ %141, %133 ], [ %132, %131 ]
  %135 = phi i64 [ %142, %133 ], [ %123, %131 ]
  %136 = getelementptr inbounds float*, float** %19, i64 %134
  %137 = load float*, float** %136, align 8
  %138 = getelementptr inbounds float, float* %137, i64 %128
  %139 = load float, float* %138, align 4
  %140 = fmul float %129, %139
  store float %140, float* %138, align 4
  %141 = add nuw i64 %134, 1
  %142 = add i64 %135, -1
  %143 = icmp eq i64 %142, 0
  br i1 %143, label %144, label %133, !llvm.loop !6

144:                                              ; preds = %131, %133, %127
  %145 = fadd float %118, %129
  %146 = add nuw i64 %128, 1
  %147 = icmp eq i64 %146, %4
  br i1 %147, label %177, label %127

148:                                              ; preds = %130, %148
  %149 = phi i64 [ %174, %148 ], [ 0, %130 ]
  %150 = phi i64 [ %175, %148 ], [ %125, %130 ]
  %151 = getelementptr inbounds float*, float** %19, i64 %149
  %152 = load float*, float** %151, align 8
  %153 = getelementptr inbounds float, float* %152, i64 %128
  %154 = load float, float* %153, align 4
  %155 = fmul float %129, %154
  store float %155, float* %153, align 4
  %156 = or i64 %149, 1
  %157 = getelementptr inbounds float*, float** %19, i64 %156
  %158 = load float*, float** %157, align 8
  %159 = getelementptr inbounds float, float* %158, i64 %128
  %160 = load float, float* %159, align 4
  %161 = fmul float %129, %160
  store float %161, float* %159, align 4
  %162 = or i64 %149, 2
  %163 = getelementptr inbounds float*, float** %19, i64 %162
  %164 = load float*, float** %163, align 8
  %165 = getelementptr inbounds float, float* %164, i64 %128
  %166 = load float, float* %165, align 4
  %167 = fmul float %129, %166
  store float %167, float* %165, align 4
  %168 = or i64 %149, 3
  %169 = getelementptr inbounds float*, float** %19, i64 %168
  %170 = load float*, float** %169, align 8
  %171 = getelementptr inbounds float, float* %170, i64 %128
  %172 = load float, float* %171, align 4
  %173 = fmul float %129, %172
  store float %173, float* %171, align 4
  %174 = add nuw i64 %149, 4
  %175 = add i64 %150, -4
  %176 = icmp eq i64 %175, 0
  br i1 %176, label %131, label %148

177:                                              ; preds = %144, %105, %23, %114
  %178 = bitcast float* %16 to i32*
  %179 = load i32, i32* %178, align 4
  %180 = bitcast float* %14 to i32*
  store i32 %179, i32* %180, align 4
  %181 = getelementptr inbounds %"class.webrtc::GainApplier", %"class.webrtc::GainApplier"* %0, i64 0, i32 0
  %182 = load i8, i8* %181, align 4, !range !8
  %183 = icmp eq i8 %182, 0
  br i1 %183, label %291, label %184

184:                                              ; preds = %177
  %185 = load float**, float*** %18, align 8
  %186 = load i64, i64* %20, align 8
  %187 = load i64, i64* %3, align 8
  %188 = icmp eq i64 %186, 0
  br i1 %188, label %291, label %189

189:                                              ; preds = %184
  %190 = icmp eq i64 %187, 0
  %191 = add i64 %187, -1
  br label %192

192:                                              ; preds = %279, %189
  %193 = phi i64 [ %280, %279 ], [ 0, %189 ]
  %194 = getelementptr inbounds float*, float** %185, i64 %193
  %195 = load float*, float** %194, align 8
  %196 = select i1 %190, float* null, float* %195
  %197 = getelementptr inbounds float, float* %196, i64 %187
  br i1 %190, label %279, label %198

198:                                              ; preds = %192
  %199 = ptrtoint float* %195 to i64
  %200 = getelementptr float, float* %196, i64 %191
  %201 = ptrtoint float* %200 to i64
  %202 = sub i64 %201, %199
  %203 = lshr i64 %202, 2
  %204 = add nuw nsw i64 %203, 1
  %205 = icmp ult i64 %204, 8
  br i1 %205, label %206, label %208

206:                                              ; preds = %277, %198
  %207 = phi float* [ %195, %198 ], [ %210, %277 ]
  br label %282

208:                                              ; preds = %198
  %209 = and i64 %204, 9223372036854775800
  %210 = getelementptr float, float* %195, i64 %209
  %211 = add nsw i64 %209, -8
  %212 = lshr exact i64 %211, 3
  %213 = add nuw nsw i64 %212, 1
  %214 = and i64 %213, 1
  %215 = icmp eq i64 %211, 0
  br i1 %215, label %257, label %216

216:                                              ; preds = %208
  %217 = sub nuw nsw i64 %213, %214
  br label %218

218:                                              ; preds = %218, %216
  %219 = phi i64 [ 0, %216 ], [ %254, %218 ]
  %220 = phi i64 [ %217, %216 ], [ %255, %218 ]
  %221 = getelementptr float, float* %195, i64 %219
  %222 = bitcast float* %221 to <4 x float>*
  %223 = load <4 x float>, <4 x float>* %222, align 4
  %224 = getelementptr float, float* %221, i64 4
  %225 = bitcast float* %224 to <4 x float>*
  %226 = load <4 x float>, <4 x float>* %225, align 4
  %227 = fcmp ole <4 x float> %223, <float -3.276800e+04, float -3.276800e+04, float -3.276800e+04, float -3.276800e+04>
  %228 = fcmp ole <4 x float> %226, <float -3.276800e+04, float -3.276800e+04, float -3.276800e+04, float -3.276800e+04>
  %229 = fcmp oge <4 x float> %223, <float 3.276700e+04, float 3.276700e+04, float 3.276700e+04, float 3.276700e+04>
  %230 = fcmp oge <4 x float> %226, <float 3.276700e+04, float 3.276700e+04, float 3.276700e+04, float 3.276700e+04>
  %231 = select <4 x i1> %229, <4 x float> <float 3.276700e+04, float 3.276700e+04, float 3.276700e+04, float 3.276700e+04>, <4 x float> %223
  %232 = select <4 x i1> %230, <4 x float> <float 3.276700e+04, float 3.276700e+04, float 3.276700e+04, float 3.276700e+04>, <4 x float> %226
  %233 = select <4 x i1> %227, <4 x float> <float -3.276800e+04, float -3.276800e+04, float -3.276800e+04, float -3.276800e+04>, <4 x float> %231
  %234 = select <4 x i1> %228, <4 x float> <float -3.276800e+04, float -3.276800e+04, float -3.276800e+04, float -3.276800e+04>, <4 x float> %232
  %235 = bitcast float* %221 to <4 x float>*
  store <4 x float> %233, <4 x float>* %235, align 4
  %236 = bitcast float* %224 to <4 x float>*
  store <4 x float> %234, <4 x float>* %236, align 4
  %237 = or i64 %219, 8
  %238 = getelementptr float, float* %195, i64 %237
  %239 = bitcast float* %238 to <4 x float>*
  %240 = load <4 x float>, <4 x float>* %239, align 4
  %241 = getelementptr float, float* %238, i64 4
  %242 = bitcast float* %241 to <4 x float>*
  %243 = load <4 x float>, <4 x float>* %242, align 4
  %244 = fcmp ole <4 x float> %240, <float -3.276800e+04, float -3.276800e+04, float -3.276800e+04, float -3.276800e+04>
  %245 = fcmp ole <4 x float> %243, <float -3.276800e+04, float -3.276800e+04, float -3.276800e+04, float -3.276800e+04>
  %246 = fcmp oge <4 x float> %240, <float 3.276700e+04, float 3.276700e+04, float 3.276700e+04, float 3.276700e+04>
  %247 = fcmp oge <4 x float> %243, <float 3.276700e+04, float 3.276700e+04, float 3.276700e+04, float 3.276700e+04>
  %248 = select <4 x i1> %246, <4 x float> <float 3.276700e+04, float 3.276700e+04, float 3.276700e+04, float 3.276700e+04>, <4 x float> %240
  %249 = select <4 x i1> %247, <4 x float> <float 3.276700e+04, float 3.276700e+04, float 3.276700e+04, float 3.276700e+04>, <4 x float> %243
  %250 = select <4 x i1> %244, <4 x float> <float -3.276800e+04, float -3.276800e+04, float -3.276800e+04, float -3.276800e+04>, <4 x float> %248
  %251 = select <4 x i1> %245, <4 x float> <float -3.276800e+04, float -3.276800e+04, float -3.276800e+04, float -3.276800e+04>, <4 x float> %249
  %252 = bitcast float* %238 to <4 x float>*
  store <4 x float> %250, <4 x float>* %252, align 4
  %253 = bitcast float* %241 to <4 x float>*
  store <4 x float> %251, <4 x float>* %253, align 4
  %254 = add i64 %219, 16
  %255 = add i64 %220, -2
  %256 = icmp eq i64 %255, 0
  br i1 %256, label %257, label %218, !llvm.loop !9

257:                                              ; preds = %218, %208
  %258 = phi i64 [ 0, %208 ], [ %254, %218 ]
  %259 = icmp eq i64 %214, 0
  br i1 %259, label %277, label %260

260:                                              ; preds = %257
  %261 = getelementptr float, float* %195, i64 %258
  %262 = bitcast float* %261 to <4 x float>*
  %263 = load <4 x float>, <4 x float>* %262, align 4
  %264 = getelementptr float, float* %261, i64 4
  %265 = bitcast float* %264 to <4 x float>*
  %266 = load <4 x float>, <4 x float>* %265, align 4
  %267 = fcmp ole <4 x float> %263, <float -3.276800e+04, float -3.276800e+04, float -3.276800e+04, float -3.276800e+04>
  %268 = fcmp ole <4 x float> %266, <float -3.276800e+04, float -3.276800e+04, float -3.276800e+04, float -3.276800e+04>
  %269 = fcmp oge <4 x float> %263, <float 3.276700e+04, float 3.276700e+04, float 3.276700e+04, float 3.276700e+04>
  %270 = fcmp oge <4 x float> %266, <float 3.276700e+04, float 3.276700e+04, float 3.276700e+04, float 3.276700e+04>
  %271 = select <4 x i1> %269, <4 x float> <float 3.276700e+04, float 3.276700e+04, float 3.276700e+04, float 3.276700e+04>, <4 x float> %263
  %272 = select <4 x i1> %270, <4 x float> <float 3.276700e+04, float 3.276700e+04, float 3.276700e+04, float 3.276700e+04>, <4 x float> %266
  %273 = select <4 x i1> %267, <4 x float> <float -3.276800e+04, float -3.276800e+04, float -3.276800e+04, float -3.276800e+04>, <4 x float> %271
  %274 = select <4 x i1> %268, <4 x float> <float -3.276800e+04, float -3.276800e+04, float -3.276800e+04, float -3.276800e+04>, <4 x float> %272
  %275 = bitcast float* %261 to <4 x float>*
  store <4 x float> %273, <4 x float>* %275, align 4
  %276 = bitcast float* %264 to <4 x float>*
  store <4 x float> %274, <4 x float>* %276, align 4
  br label %277

277:                                              ; preds = %257, %260
  %278 = icmp eq i64 %204, %209
  br i1 %278, label %279, label %206

279:                                              ; preds = %282, %277, %192
  %280 = add nuw i64 %193, 1
  %281 = icmp eq i64 %280, %186
  br i1 %281, label %291, label %192

282:                                              ; preds = %206, %282
  %283 = phi float* [ %289, %282 ], [ %207, %206 ]
  %284 = load float, float* %283, align 4
  %285 = fcmp ole float %284, -3.276800e+04
  %286 = fcmp oge float %284, 3.276700e+04
  %287 = select i1 %286, float 3.276700e+04, float %284
  %288 = select i1 %285, float -3.276800e+04, float %287
  store float %288, float* %283, align 4
  %289 = getelementptr inbounds float, float* %283, i64 1
  %290 = icmp eq float* %289, %197
  br i1 %290, label %279, label %282, !llvm.loop !10

291:                                              ; preds = %279, %184, %177
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN6webrtc11GainApplier10InitializeEm(%"class.webrtc::GainApplier"* nocapture, i64) local_unnamed_addr #0 align 2 {
  %3 = trunc i64 %1 to i32
  %4 = getelementptr inbounds %"class.webrtc::GainApplier", %"class.webrtc::GainApplier"* %0, i64 0, i32 3
  store i32 %3, i32* %4, align 4
  %5 = sitofp i32 %3 to float
  %6 = fdiv float 1.000000e+00, %5
  %7 = getelementptr inbounds %"class.webrtc::GainApplier", %"class.webrtc::GainApplier"* %0, i64 0, i32 4
  store float %6, float* %7, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN6webrtc11GainApplier13SetGainFactorEf(%"class.webrtc::GainApplier"* nocapture, float) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::GainApplier", %"class.webrtc::GainApplier"* %0, i64 0, i32 2
  store float %1, float* %3, align 4
  ret void
}

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.unroll.disable"}
!8 = !{i8 0, i8 2}
!9 = distinct !{!9, !3}
!10 = distinct !{!10, !5, !3}
