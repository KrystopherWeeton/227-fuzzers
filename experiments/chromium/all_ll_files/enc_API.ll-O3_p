; ModuleID = '../../third_party/opus/src/silk/enc_API.c'
source_filename = "../../third_party/opus/src/silk/enc_API.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.silk_EncControlStruct = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.silk_encoder_state_FLP = type { %struct.silk_encoder_state, %struct.silk_shape_state_FLP, [720 x float], float }
%struct.silk_encoder_state = type { [2 x i32], i32, i32, %struct.silk_LP_state, %struct.silk_VAD_state, %struct.silk_nsq_state, [16 x i16], i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, %struct.silk_NLSF_CB_struct*, [4 x i32], i32, i32, [3 x i8], i8, [3 x i32], %struct.SideInfoIndices, [320 x i8], i32, [322 x i16], i32, i32, i32, i32, i32, i32, i32, i32, i16, %struct._silk_resampler_state_struct, i32, i32, i32, i32, i32, i32, [3 x %struct.SideInfoIndices], [3 x [320 x i8]] }
%struct.silk_LP_state = type { [2 x i32], i32, i32, i32 }
%struct.silk_VAD_state = type { [2 x i32], [2 x i32], [2 x i32], [4 x i32], [4 x i32], i16, [4 x i32], [4 x i32], [4 x i32], i32 }
%struct.silk_nsq_state = type { [640 x i16], [640 x i32], [96 x i32], [24 x i32], i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.silk_NLSF_CB_struct = type { i16, i16, i16, i16, i8*, i16*, i8*, i8*, i8*, i8*, i8*, i16* }
%struct.SideInfoIndices = type { [4 x i8], [4 x i8], [17 x i8], i16, i8, i8, i8, i8, i8, i8, i8 }
%struct._silk_resampler_state_struct = type { [6 x i32], %union.anon, [48 x i16], i32, i32, i32, i32, i32, i32, i32, i32, i16* }
%union.anon = type { [36 x i32] }
%struct.silk_shape_state_FLP = type { i8, float, float }
%struct.ec_ctx = type { i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.stereo_enc_state = type { [2 x i16], [2 x i16], [2 x i16], [4 x i32], i16, i16, i16, [3 x [2 x [3 x i8]]], [3 x i8] }

@.str = private unnamed_addr constant [20 x i8] c"assertion failed: 0\00", align 1
@.str.1 = private unnamed_addr constant [42 x i8] c"../../third_party/opus/src/silk/enc_API.c\00", align 1
@.str.2 = private unnamed_addr constant [23 x i8] c"assertion failed: !ret\00", align 1
@.str.3 = private unnamed_addr constant [127 x i8] c"assertion failed: encControl->nChannelsInternal == 1 || psEnc->state_Fxx[ 0 ].sCmn.fs_kHz == psEnc->state_Fxx[ 1 ].sCmn.fs_kHz\00", align 1
@.str.4 = private unnamed_addr constant [86 x i8] c"assertion failed: encControl->nChannelsAPI == 1 && encControl->nChannelsInternal == 1\00", align 1
@.str.5 = private unnamed_addr constant [99 x i8] c"assertion failed: psEnc->state_Fxx[ 0 ].sCmn.inputBufIx == psEnc->state_Fxx[ 0 ].sCmn.frame_length\00", align 1
@.str.6 = private unnamed_addr constant [137 x i8] c"assertion failed: encControl->nChannelsInternal == 1 || psEnc->state_Fxx[ 1 ].sCmn.inputBufIx == psEnc->state_Fxx[ 1 ].sCmn.frame_length\00", align 1
@silk_LBRR_flags_iCDF_ptr = external local_unnamed_addr constant [2 x i8*], align 16
@silk_Quantization_Offsets_Q10 = external local_unnamed_addr constant [2 x [2 x i16]], align 2

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden i32 @silk_Get_Encoder_Size(i32* nocapture) local_unnamed_addr #0 {
  store i32 20264, i32* %0, align 4
  ret i32 0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @silk_InitEncoder(i8*, i32, %struct.silk_EncControlStruct* nocapture) local_unnamed_addr #2 {
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %0, i8 0, i64 20264, i1 false)
  %4 = bitcast i8* %0 to %struct.silk_encoder_state_FLP*
  %5 = tail call i32 @silk_init_encoder(%struct.silk_encoder_state_FLP* %4, i32 %1) #6
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %12

7:                                                ; preds = %3
  %8 = getelementptr inbounds i8, i8* %0, i64 10088
  %9 = bitcast i8* %8 to %struct.silk_encoder_state_FLP*
  %10 = tail call i32 @silk_init_encoder(%struct.silk_encoder_state_FLP* %9, i32 %1) #6
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %22, label %12

12:                                               ; preds = %7, %3
  tail call void @celt_fatal(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.1, i64 0, i64 0), i32 85) #7
  unreachable

13:                                               ; preds = %22
  %14 = getelementptr inbounds i8, i8* %0, i64 28
  %15 = bitcast i8* %14 to i32*
  %16 = load i32, i32* %15, align 4
  %17 = icmp eq i32 %16, 0
  %18 = zext i1 %17 to i32
  br label %19

19:                                               ; preds = %22, %13
  %20 = phi i32 [ 0, %22 ], [ %18, %13 ]
  %21 = getelementptr inbounds %struct.silk_EncControlStruct, %struct.silk_EncControlStruct* %2, i64 0, i32 20
  store i32 %20, i32* %21, align 4
  ret i32 0

22:                                               ; preds = %7
  %23 = getelementptr inbounds i8, i8* %0, i64 20240
  %24 = bitcast i8* %23 to i32*
  store i32 1, i32* %24, align 8
  %25 = getelementptr inbounds i8, i8* %0, i64 20244
  %26 = bitcast i8* %25 to i32*
  store i32 1, i32* %26, align 4
  %27 = getelementptr inbounds %struct.silk_EncControlStruct, %struct.silk_EncControlStruct* %2, i64 0, i32 0
  store i32 1, i32* %27, align 4
  %28 = load i32, i32* %26, align 4
  %29 = getelementptr inbounds %struct.silk_EncControlStruct, %struct.silk_EncControlStruct* %2, i64 0, i32 1
  store i32 %28, i32* %29, align 4
  %30 = getelementptr inbounds i8, i8* %0, i64 4556
  %31 = bitcast i8* %30 to i32*
  %32 = load i32, i32* %31, align 4
  %33 = getelementptr inbounds %struct.silk_EncControlStruct, %struct.silk_EncControlStruct* %2, i64 0, i32 2
  store i32 %32, i32* %33, align 4
  %34 = getelementptr inbounds i8, i8* %0, i64 4564
  %35 = bitcast i8* %34 to i32*
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr inbounds %struct.silk_EncControlStruct, %struct.silk_EncControlStruct* %2, i64 0, i32 3
  store i32 %36, i32* %37, align 4
  %38 = getelementptr inbounds i8, i8* %0, i64 4568
  %39 = bitcast i8* %38 to i32*
  %40 = load i32, i32* %39, align 8
  %41 = getelementptr inbounds %struct.silk_EncControlStruct, %struct.silk_EncControlStruct* %2, i64 0, i32 4
  store i32 %40, i32* %41, align 4
  %42 = getelementptr inbounds i8, i8* %0, i64 4572
  %43 = bitcast i8* %42 to i32*
  %44 = load i32, i32* %43, align 4
  %45 = getelementptr inbounds %struct.silk_EncControlStruct, %struct.silk_EncControlStruct* %2, i64 0, i32 5
  store i32 %44, i32* %45, align 4
  %46 = getelementptr inbounds i8, i8* %0, i64 4612
  %47 = bitcast i8* %46 to i32*
  %48 = load i32, i32* %47, align 4
  %49 = getelementptr inbounds %struct.silk_EncControlStruct, %struct.silk_EncControlStruct* %2, i64 0, i32 6
  store i32 %48, i32* %49, align 4
  %50 = getelementptr inbounds i8, i8* %0, i64 4608
  %51 = bitcast i8* %50 to i32*
  %52 = load i32, i32* %51, align 8
  %53 = getelementptr inbounds %struct.silk_EncControlStruct, %struct.silk_EncControlStruct* %2, i64 0, i32 7
  store i32 %52, i32* %53, align 4
  %54 = getelementptr inbounds i8, i8* %0, i64 4616
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 8
  %57 = getelementptr inbounds %struct.silk_EncControlStruct, %struct.silk_EncControlStruct* %2, i64 0, i32 8
  store i32 %56, i32* %57, align 4
  %58 = getelementptr inbounds i8, i8* %0, i64 4624
  %59 = bitcast i8* %58 to i32*
  %60 = load i32, i32* %59, align 8
  %61 = getelementptr inbounds %struct.silk_EncControlStruct, %struct.silk_EncControlStruct* %2, i64 0, i32 9
  store i32 %60, i32* %61, align 4
  %62 = getelementptr inbounds i8, i8* %0, i64 6108
  %63 = bitcast i8* %62 to i32*
  %64 = load i32, i32* %63, align 4
  %65 = getelementptr inbounds %struct.silk_EncControlStruct, %struct.silk_EncControlStruct* %2, i64 0, i32 10
  store i32 %64, i32* %65, align 4
  %66 = getelementptr inbounds i8, i8* %0, i64 6096
  %67 = bitcast i8* %66 to i32*
  %68 = load i32, i32* %67, align 8
  %69 = getelementptr inbounds %struct.silk_EncControlStruct, %struct.silk_EncControlStruct* %2, i64 0, i32 12
  store i32 %68, i32* %69, align 4
  %70 = getelementptr inbounds i8, i8* %0, i64 4676
  %71 = bitcast i8* %70 to i32*
  %72 = load i32, i32* %71, align 4
  %73 = getelementptr inbounds %struct.silk_EncControlStruct, %struct.silk_EncControlStruct* %2, i64 0, i32 13
  store i32 %72, i32* %73, align 4
  %74 = getelementptr inbounds i8, i8* %0, i64 4576
  %75 = bitcast i8* %74 to i32*
  %76 = load i32, i32* %75, align 8
  %77 = shl i32 %76, 16
  %78 = ashr exact i32 %77, 16
  %79 = mul nsw i32 %78, 1000
  %80 = getelementptr inbounds %struct.silk_EncControlStruct, %struct.silk_EncControlStruct* %2, i64 0, i32 18
  store i32 %79, i32* %80, align 4
  %81 = getelementptr inbounds i8, i8* %0, i64 4536
  %82 = bitcast i8* %81 to i32*
  %83 = load i32, i32* %82, align 8
  %84 = getelementptr inbounds %struct.silk_EncControlStruct, %struct.silk_EncControlStruct* %2, i64 0, i32 19
  store i32 %83, i32* %84, align 4
  %85 = load i32, i32* %75, align 8
  %86 = icmp eq i32 %85, 16
  br i1 %86, label %13, label %19
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @silk_init_encoder(%struct.silk_encoder_state_FLP*, i32) local_unnamed_addr #3

; Function Attrs: noreturn
declare void @celt_fatal(i8*, i8*, i32) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden i32 @silk_Encode(i8*, %struct.silk_EncControlStruct*, i16* nocapture readonly, i32, %struct.ec_ctx*, i32*, i32, i32) local_unnamed_addr #2 {
  %9 = alloca [2 x i32], align 4
  %10 = alloca i16, align 2
  %11 = bitcast [2 x i32]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #6
  %12 = getelementptr inbounds [2 x i32], [2 x i32]* %9, i64 0, i64 0
  store i32 -1431655766, i32* %12, align 4
  %13 = getelementptr inbounds [2 x i32], [2 x i32]* %9, i64 0, i64 1
  store i32 -1431655766, i32* %13, align 4
  %14 = getelementptr inbounds %struct.silk_EncControlStruct, %struct.silk_EncControlStruct* %1, i64 0, i32 17
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %22, label %17

17:                                               ; preds = %8
  %18 = getelementptr inbounds i8, i8* %0, i64 4664
  %19 = bitcast i8* %18 to i32*
  store i32 1, i32* %19, align 8
  %20 = getelementptr inbounds i8, i8* %0, i64 14752
  %21 = bitcast i8* %20 to i32*
  store i32 1, i32* %21, align 8
  br label %22

22:                                               ; preds = %8, %17
  %23 = bitcast i8* %0 to [2 x %struct.silk_encoder_state_FLP]*
  %24 = getelementptr inbounds i8, i8* %0, i64 10088
  %25 = bitcast i8* %24 to %struct.silk_encoder_state_FLP*
  %26 = getelementptr inbounds i8, i8* %0, i64 15852
  %27 = bitcast i8* %26 to i32*
  store i32 0, i32* %27, align 4
  %28 = bitcast i8* %0 to %struct.silk_encoder_state_FLP*
  %29 = getelementptr inbounds i8, i8* %0, i64 5764
  %30 = bitcast i8* %29 to i32*
  store i32 0, i32* %30, align 4
  %31 = tail call i32 @check_control_input(%struct.silk_EncControlStruct* %1) #6
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %34, label %33

33:                                               ; preds = %22
  tail call void @celt_fatal(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.1, i64 0, i64 0), i32 170) #7
  unreachable

34:                                               ; preds = %22
  %35 = getelementptr inbounds %struct.silk_EncControlStruct, %struct.silk_EncControlStruct* %1, i64 0, i32 22
  store i32 0, i32* %35, align 4
  %36 = getelementptr inbounds %struct.silk_EncControlStruct, %struct.silk_EncControlStruct* %1, i64 0, i32 1
  %37 = load i32, i32* %36, align 4
  %38 = getelementptr inbounds i8, i8* %0, i64 20244
  %39 = bitcast i8* %38 to i32*
  %40 = load i32, i32* %39, align 4
  %41 = icmp sgt i32 %37, %40
  br i1 %41, label %42, label %67

42:                                               ; preds = %34
  %43 = getelementptr inbounds i8, i8* %0, i64 5108
  %44 = bitcast i8* %43 to i32*
  %45 = load i32, i32* %44, align 4
  %46 = tail call i32 @silk_init_encoder(%struct.silk_encoder_state_FLP* %25, i32 %45) #6
  %47 = getelementptr inbounds i8, i8* %0, i64 20176
  %48 = bitcast i8* %47 to i32*
  store i32 0, i32* %48, align 8
  %49 = getelementptr inbounds i8, i8* %0, i64 20184
  %50 = bitcast i8* %49 to <4 x i32>*
  store <4 x i32> <i32 0, i32 0, i32 1, i32 0>, <4 x i32>* %50, align 8
  %51 = getelementptr inbounds i8, i8* %0, i64 20200
  %52 = bitcast i8* %51 to i32*
  store i32 1, i32* %52, align 4
  %53 = getelementptr inbounds i8, i8* %0, i64 20206
  %54 = bitcast i8* %53 to i16*
  store i16 0, i16* %54, align 2
  %55 = getelementptr inbounds i8, i8* %0, i64 20204
  %56 = bitcast i8* %55 to i16*
  store i16 16384, i16* %56, align 4
  %57 = getelementptr inbounds i8, i8* %0, i64 20240
  %58 = bitcast i8* %57 to i32*
  %59 = load i32, i32* %58, align 8
  %60 = icmp eq i32 %59, 2
  br i1 %60, label %61, label %67

61:                                               ; preds = %42
  %62 = getelementptr inbounds i8, i8* %0, i64 15880
  %63 = getelementptr inbounds i8, i8* %0, i64 5792
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %62, i8* align 8 %63, i64 304, i1 false)
  %64 = bitcast i8* %0 to i64*
  %65 = bitcast i8* %24 to i64*
  %66 = load i64, i64* %64, align 8
  store i64 %66, i64* %65, align 8
  br label %67

67:                                               ; preds = %42, %61, %34
  %68 = phi i32 [ %46, %61 ], [ %46, %42 ], [ 0, %34 ]
  %69 = getelementptr inbounds %struct.silk_EncControlStruct, %struct.silk_EncControlStruct* %1, i64 0, i32 6
  %70 = load i32, i32* %69, align 4
  %71 = getelementptr inbounds i8, i8* %0, i64 4612
  %72 = bitcast i8* %71 to i32*
  %73 = load i32, i32* %72, align 4
  %74 = icmp eq i32 %70, %73
  br i1 %74, label %75, label %79

75:                                               ; preds = %67
  %76 = load i32, i32* %39, align 4
  %77 = load i32, i32* %36, align 4
  %78 = icmp ne i32 %76, %77
  br label %79

79:                                               ; preds = %67, %75
  %80 = phi i1 [ true, %67 ], [ %78, %75 ]
  %81 = getelementptr inbounds %struct.silk_EncControlStruct, %struct.silk_EncControlStruct* %1, i64 0, i32 0
  %82 = load i32, i32* %81, align 4
  %83 = getelementptr inbounds i8, i8* %0, i64 20240
  %84 = bitcast i8* %83 to i32*
  store i32 %82, i32* %84, align 8
  %85 = load i32, i32* %36, align 4
  store i32 %85, i32* %39, align 4
  %86 = mul nsw i32 %3, 100
  %87 = getelementptr inbounds %struct.silk_EncControlStruct, %struct.silk_EncControlStruct* %1, i64 0, i32 2
  %88 = load i32, i32* %87, align 4
  %89 = sdiv i32 %86, %88
  %90 = icmp sgt i32 %89, 1
  %91 = ashr i32 %89, 1
  %92 = select i1 %90, i32 %91, i32 1
  %93 = icmp ne i32 %6, 0
  br i1 %93, label %94, label %158

94:                                               ; preds = %79
  %95 = icmp eq i32 %89, 1
  br i1 %95, label %97, label %96

96:                                               ; preds = %94
  tail call void @celt_fatal(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.1, i64 0, i64 0), i32 206) #7
  unreachable

97:                                               ; preds = %94
  %98 = icmp eq i32 %6, 2
  br i1 %98, label %99, label %106

99:                                               ; preds = %97
  %100 = getelementptr inbounds i8, i8* %0, i64 16
  %101 = bitcast i8* %100 to <4 x i32>*
  %102 = load <4 x i32>, <4 x i32>* %101, align 8
  %103 = getelementptr inbounds i8, i8* %0, i64 4576
  %104 = bitcast i8* %103 to i32*
  %105 = load i32, i32* %104, align 8
  br label %106

106:                                              ; preds = %99, %97
  %107 = phi i32 [ %105, %99 ], [ -1431655766, %97 ]
  %108 = phi <4 x i32> [ %102, %99 ], [ <i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766>, %97 ]
  %109 = load i32, i32* %36, align 4
  %110 = icmp sgt i32 %109, 0
  br i1 %110, label %115, label %111

111:                                              ; preds = %106
  %112 = load i32, i32* %69, align 4
  store i32 10, i32* %69, align 4
  %113 = getelementptr inbounds %struct.silk_EncControlStruct, %struct.silk_EncControlStruct* %1, i64 0, i32 9
  %114 = load i32, i32* %113, align 4
  store i32 0, i32* %113, align 4
  br label %256

115:                                              ; preds = %106
  br i1 %98, label %116, label %135

116:                                              ; preds = %115, %127
  %117 = phi i64 [ %126, %127 ], [ 0, %115 ]
  %118 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %117
  %119 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %117, i32 0, i32 57
  %120 = load i32, i32* %119, align 4
  %121 = tail call i32 @silk_init_encoder(%struct.silk_encoder_state_FLP* %118, i32 %120) #6
  %122 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %117, i32 0, i32 3, i32 0, i64 0
  %123 = bitcast i32* %122 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %123, align 8
  %124 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %117, i32 0, i32 3, i32 3
  store i32 %107, i32* %124, align 8
  %125 = icmp eq i32 %121, 0
  %126 = add nuw nsw i64 %117, 1
  br i1 %125, label %127, label %143

127:                                              ; preds = %116
  %128 = load i32, i32* %36, align 4
  %129 = sext i32 %128 to i64
  %130 = icmp slt i64 %126, %129
  br i1 %130, label %116, label %144

131:                                              ; preds = %135
  %132 = load i32, i32* %36, align 4
  %133 = sext i32 %132 to i64
  %134 = icmp slt i64 %142, %133
  br i1 %134, label %135, label %144

135:                                              ; preds = %115, %131
  %136 = phi i64 [ %142, %131 ], [ 0, %115 ]
  %137 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %136
  %138 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %136, i32 0, i32 57
  %139 = load i32, i32* %138, align 4
  %140 = tail call i32 @silk_init_encoder(%struct.silk_encoder_state_FLP* %137, i32 %139) #6
  %141 = icmp eq i32 %140, 0
  %142 = add nuw nsw i64 %136, 1
  br i1 %141, label %131, label %143

143:                                              ; preds = %135, %116
  tail call void @celt_fatal(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.1, i64 0, i64 0), i32 222) #7
  unreachable

144:                                              ; preds = %131, %127
  %145 = phi i32 [ %128, %127 ], [ %132, %131 ]
  %146 = load i32, i32* %69, align 4
  store i32 10, i32* %69, align 4
  %147 = getelementptr inbounds %struct.silk_EncControlStruct, %struct.silk_EncControlStruct* %1, i64 0, i32 9
  %148 = load i32, i32* %147, align 4
  store i32 0, i32* %147, align 4
  %149 = icmp sgt i32 %145, 0
  br i1 %149, label %150, label %256

150:                                              ; preds = %144, %150
  %151 = phi i64 [ %154, %150 ], [ 0, %144 ]
  %152 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %151, i32 0, i32 42
  store i32 0, i32* %152, align 4
  %153 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %151, i32 0, i32 45
  store i32 1, i32* %153, align 8
  %154 = add nuw nsw i64 %151, 1
  %155 = load i32, i32* %36, align 4
  %156 = sext i32 %155 to i64
  %157 = icmp slt i64 %154, %156
  br i1 %157, label %150, label %172

158:                                              ; preds = %79
  %159 = mul nsw i32 %89, %88
  %160 = icmp ne i32 %159, %86
  %161 = icmp slt i32 %3, 0
  %162 = or i1 %161, %160
  br i1 %162, label %163, label %164

163:                                              ; preds = %158
  tail call void @celt_fatal(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.1, i64 0, i64 0), i32 235) #7
  unreachable

164:                                              ; preds = %158
  %165 = mul nsw i32 %3, 1000
  %166 = load i32, i32* %69, align 4
  %167 = mul nsw i32 %166, %88
  %168 = icmp sgt i32 %165, %167
  br i1 %168, label %171, label %169

169:                                              ; preds = %164
  %170 = load i32, i32* %36, align 4
  br label %172

171:                                              ; preds = %164
  tail call void @celt_fatal(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.1, i64 0, i64 0), i32 241) #7
  unreachable

172:                                              ; preds = %150, %169
  %173 = phi i32 [ %170, %169 ], [ %155, %150 ]
  %174 = phi i32 [ 0, %169 ], [ %146, %150 ]
  %175 = phi i32 [ 0, %169 ], [ %148, %150 ]
  %176 = phi i32 [ %68, %169 ], [ 0, %150 ]
  %177 = icmp sgt i32 %173, 0
  br i1 %177, label %178, label %256

178:                                              ; preds = %172
  %179 = getelementptr inbounds i8, i8* %0, i64 4576
  %180 = bitcast i8* %179 to i32*
  %181 = getelementptr inbounds i8, i8* %0, i64 20256
  %182 = bitcast i8* %181 to i32*
  %183 = getelementptr inbounds i8, i8* %0, i64 5760
  %184 = bitcast i8* %183 to i32*
  br i1 %80, label %185, label %215

185:                                              ; preds = %178, %207
  %186 = phi i64 [ %211, %207 ], [ 0, %178 ]
  %187 = icmp eq i64 %186, 1
  br i1 %187, label %188, label %190

188:                                              ; preds = %185
  %189 = load i32, i32* %180, align 8
  br label %190

190:                                              ; preds = %188, %185
  %191 = phi i32 [ %189, %188 ], [ 0, %185 ]
  %192 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %186
  %193 = load i32, i32* %182, align 8
  %194 = trunc i64 %186 to i32
  %195 = tail call i32 @silk_control_encoder(%struct.silk_encoder_state_FLP* %192, %struct.silk_EncControlStruct* %1, i32 %193, i32 %194, i32 %191) #6
  %196 = icmp eq i32 %195, 0
  br i1 %196, label %204, label %1407

197:                                              ; preds = %204, %197
  %198 = phi i64 [ %200, %197 ], [ 0, %204 ]
  %199 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %186, i32 0, i32 54, i64 %198
  store i32 0, i32* %199, align 4
  %200 = add nuw nsw i64 %198, 1
  %201 = load i32, i32* %184, align 8
  %202 = sext i32 %201 to i64
  %203 = icmp slt i64 %200, %202
  br i1 %203, label %197, label %207

204:                                              ; preds = %190
  %205 = load i32, i32* %184, align 8
  %206 = icmp sgt i32 %205, 0
  br i1 %206, label %197, label %207

207:                                              ; preds = %197, %204
  %208 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %186, i32 0, i32 69
  %209 = load i32, i32* %208, align 8
  %210 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %186, i32 0, i32 70
  store i32 %209, i32* %210, align 4
  %211 = add nuw nsw i64 %186, 1
  %212 = load i32, i32* %36, align 4
  %213 = sext i32 %212 to i64
  %214 = icmp slt i64 %211, %213
  br i1 %214, label %185, label %249

215:                                              ; preds = %178, %241
  %216 = phi i64 [ %245, %241 ], [ 0, %178 ]
  %217 = icmp eq i64 %216, 1
  br i1 %217, label %218, label %220

218:                                              ; preds = %215
  %219 = load i32, i32* %180, align 8
  br label %220

220:                                              ; preds = %215, %218
  %221 = phi i32 [ %219, %218 ], [ 0, %215 ]
  %222 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %216
  %223 = load i32, i32* %182, align 8
  %224 = trunc i64 %216 to i32
  %225 = tail call i32 @silk_control_encoder(%struct.silk_encoder_state_FLP* %222, %struct.silk_EncControlStruct* %1, i32 %223, i32 %224, i32 %221) #6
  %226 = icmp eq i32 %225, 0
  br i1 %226, label %227, label %1407

227:                                              ; preds = %220
  %228 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %216, i32 0, i32 41
  %229 = load i32, i32* %228, align 8
  %230 = icmp eq i32 %229, 0
  br i1 %230, label %241, label %231

231:                                              ; preds = %227
  %232 = load i32, i32* %184, align 8
  %233 = icmp sgt i32 %232, 0
  br i1 %233, label %234, label %241

234:                                              ; preds = %231, %234
  %235 = phi i64 [ %237, %234 ], [ 0, %231 ]
  %236 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %216, i32 0, i32 54, i64 %235
  store i32 0, i32* %236, align 4
  %237 = add nuw nsw i64 %235, 1
  %238 = load i32, i32* %184, align 8
  %239 = sext i32 %238 to i64
  %240 = icmp slt i64 %237, %239
  br i1 %240, label %234, label %241

241:                                              ; preds = %234, %227, %231
  %242 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %216, i32 0, i32 69
  %243 = load i32, i32* %242, align 8
  %244 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %216, i32 0, i32 70
  store i32 %243, i32* %244, align 4
  %245 = add nuw nsw i64 %216, 1
  %246 = load i32, i32* %36, align 4
  %247 = sext i32 %246 to i64
  %248 = icmp slt i64 %245, %247
  br i1 %248, label %215, label %249

249:                                              ; preds = %241, %207
  %250 = phi i32 [ %212, %207 ], [ %246, %241 ]
  %251 = icmp eq i32 %250, 1
  br i1 %251, label %252, label %256

252:                                              ; preds = %249
  %253 = getelementptr inbounds i8, i8* %0, i64 4576
  %254 = bitcast i8* %253 to i32*
  %255 = load i32, i32* %254, align 8
  br label %268

256:                                              ; preds = %111, %144, %172, %249
  %257 = phi i32 [ 0, %249 ], [ %176, %172 ], [ %68, %111 ], [ 0, %144 ]
  %258 = phi i32 [ %174, %249 ], [ %174, %172 ], [ %112, %111 ], [ %146, %144 ]
  %259 = phi i32 [ %175, %249 ], [ %175, %172 ], [ %114, %111 ], [ %148, %144 ]
  %260 = getelementptr inbounds i8, i8* %0, i64 4576
  %261 = bitcast i8* %260 to i32*
  %262 = load i32, i32* %261, align 8
  %263 = getelementptr inbounds i8, i8* %0, i64 14664
  %264 = bitcast i8* %263 to i32*
  %265 = load i32, i32* %264, align 8
  %266 = icmp eq i32 %262, %265
  br i1 %266, label %268, label %267

267:                                              ; preds = %256
  tail call void @celt_fatal(i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.1, i64 0, i64 0), i32 262) #7
  unreachable

268:                                              ; preds = %252, %256
  %269 = phi i32 [ 0, %252 ], [ %257, %256 ]
  %270 = phi i32 [ %174, %252 ], [ %258, %256 ]
  %271 = phi i32 [ %175, %252 ], [ %259, %256 ]
  %272 = phi i32* [ %254, %252 ], [ %261, %256 ]
  %273 = phi i32 [ %255, %252 ], [ %262, %256 ]
  %274 = mul nsw i32 %89, 10
  %275 = mul nsw i32 %273, %274
  %276 = getelementptr inbounds i8, i8* %0, i64 4556
  %277 = bitcast i8* %276 to i32*
  %278 = load i32, i32* %277, align 4
  %279 = mul nsw i32 %275, %278
  %280 = mul nsw i32 %273, 1000
  %281 = sdiv i32 %279, %280
  %282 = sext i32 %281 to i64
  %283 = shl nsw i64 %282, 1
  %284 = alloca i16, i64 %282, align 16
  %285 = bitcast i16* %284 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %285, i8 -86, i64 %283, i1 false)
  %286 = getelementptr inbounds i8, i8* %0, i64 4584
  %287 = bitcast i8* %286 to i32*
  %288 = getelementptr inbounds i8, i8* %0, i64 5756
  %289 = bitcast i8* %288 to i32*
  %290 = getelementptr inbounds i8, i8* %0, i64 5792
  %291 = bitcast i8* %290 to %struct._silk_resampler_state_struct*
  %292 = getelementptr inbounds i8, i8* %0, i64 5112
  %293 = bitcast i8* %292 to [322 x i16]*
  %294 = getelementptr inbounds i8, i8* %0, i64 20248
  %295 = bitcast i8* %294 to i32*
  %296 = getelementptr inbounds i8, i8* %0, i64 15880
  %297 = bitcast i8* %296 to %struct._silk_resampler_state_struct*
  %298 = getelementptr inbounds i8, i8* %0, i64 15200
  %299 = bitcast i8* %298 to [322 x i16]*
  %300 = getelementptr inbounds i8, i8* %0, i64 15844
  %301 = bitcast i8* %300 to i32*
  %302 = getelementptr inbounds i8, i8* %0, i64 14672
  %303 = bitcast i8* %302 to i32*
  %304 = getelementptr inbounds i8, i8* %0, i64 14664
  %305 = bitcast i8* %304 to i32*
  %306 = getelementptr inbounds i8, i8* %0, i64 20256
  %307 = bitcast i8* %306 to i32*
  %308 = bitcast i16* %10 to i8*
  %309 = getelementptr inbounds i8, i8* %0, i64 5760
  %310 = bitcast i8* %309 to i32*
  %311 = getelementptr inbounds i8, i8* %0, i64 20210
  %312 = bitcast i8* %311 to [3 x [2 x [3 x i8]]]*
  %313 = getelementptr inbounds i8, i8* %0, i64 14828
  %314 = bitcast i8* %313 to [3 x i32]*
  %315 = getelementptr inbounds i8, i8* %0, i64 20228
  %316 = getelementptr %struct.ec_ctx, %struct.ec_ctx* %4, i64 0, i32 5
  %317 = getelementptr %struct.ec_ctx, %struct.ec_ctx* %4, i64 0, i32 7
  %318 = getelementptr inbounds i8, i8* %0, i64 20232
  %319 = bitcast i8* %318 to i32*
  %320 = getelementptr inbounds %struct.silk_EncControlStruct, %struct.silk_EncControlStruct* %1, i64 0, i32 7
  %321 = getelementptr inbounds i8, i8* %0, i64 20236
  %322 = bitcast i8* %321 to i32*
  %323 = getelementptr inbounds i8, i8* %0, i64 20180
  %324 = bitcast i8* %323 to i32*
  %325 = bitcast i8* %292 to i32*
  %326 = getelementptr inbounds i8, i8* %0, i64 20176
  %327 = bitcast i8* %326 to %struct.stereo_enc_state*
  %328 = getelementptr inbounds i8, i8* %0, i64 5116
  %329 = bitcast i8* %328 to i16*
  %330 = getelementptr inbounds i8, i8* %0, i64 15204
  %331 = bitcast i8* %330 to i16*
  %332 = getelementptr inbounds i8, i8* %0, i64 4532
  %333 = bitcast i8* %332 to i32*
  %334 = getelementptr inbounds %struct.silk_EncControlStruct, %struct.silk_EncControlStruct* %1, i64 0, i32 15
  %335 = getelementptr inbounds i8, i8* %0, i64 14824
  %336 = getelementptr inbounds i8, i8* %0, i64 20260
  %337 = bitcast i8* %336 to i32*
  %338 = getelementptr inbounds i8, i8* %0, i64 17280
  %339 = getelementptr inbounds i8, i8* %0, i64 10236
  %340 = getelementptr inbounds i8, i8* %0, i64 10104
  %341 = bitcast i8* %340 to i64*
  %342 = getelementptr inbounds i8, i8* %0, i64 14632
  %343 = bitcast i8* %342 to i32*
  %344 = getelementptr inbounds i8, i8* %0, i64 14564
  %345 = bitcast i8* %344 to i32*
  %346 = getelementptr inbounds i8, i8* %0, i64 14629
  %347 = getelementptr inbounds i8, i8* %0, i64 14580
  %348 = bitcast i8* %347 to i32*
  %349 = getelementptr inbounds i8, i8* %0, i64 14752
  %350 = bitcast i8* %349 to i32*
  %351 = getelementptr inbounds %struct.silk_EncControlStruct, %struct.silk_EncControlStruct* %1, i64 0, i32 14
  %352 = icmp eq i32 %92, 2
  %353 = icmp eq i32 %92, 3
  %354 = getelementptr inbounds %struct.silk_EncControlStruct, %struct.silk_EncControlStruct* %1, i64 0, i32 13
  %355 = add nsw i32 %92, -1
  %356 = shl nsw i32 %92, 1
  %357 = getelementptr inbounds i8, i8* %0, i64 6100
  %358 = bitcast i8* %357 to i32*
  %359 = getelementptr inbounds i8, i8* %0, i64 16188
  %360 = bitcast i8* %359 to i32*
  %361 = getelementptr inbounds i8, i8* %0, i64 20252
  %362 = bitcast i8* %361 to i32*
  br label %363

363:                                              ; preds = %1345, %268
  %364 = phi i32 [ %273, %268 ], [ %1348, %1345 ]
  %365 = phi i32 [ %278, %268 ], [ %1347, %1345 ]
  %366 = phi i32 [ %3, %268 ], [ %738, %1345 ]
  %367 = phi i16* [ %2, %268 ], [ %737, %1345 ]
  %368 = phi i32 [ %269, %268 ], [ %1212, %1345 ]
  %369 = phi i32 [ 0, %268 ], [ %1346, %1345 ]
  %370 = bitcast i16* %367 to i8*
  %371 = load i32, i32* %287, align 8
  %372 = load i32, i32* %289, align 4
  %373 = sub nsw i32 %371, %372
  %374 = icmp slt i32 %373, %275
  %375 = select i1 %374, i32 %373, i32 %275
  %376 = mul nsw i32 %375, %365
  %377 = mul nsw i32 %364, 1000
  %378 = sdiv i32 %376, %377
  %379 = load i32, i32* %81, align 4
  switch i32 %379, label %720 [
    i32 2, label %380
    i32 1, label %717
  ]

380:                                              ; preds = %363
  %381 = load i32, i32* %36, align 4
  switch i32 %381, label %720 [
    i32 2, label %382
    i32 1, label %535
  ]

382:                                              ; preds = %380
  %383 = load i32, i32* %30, align 4
  %384 = icmp sgt i32 %378, 0
  br i1 %384, label %385, label %455

385:                                              ; preds = %382
  %386 = zext i32 %378 to i64
  %387 = icmp ult i32 %378, 9
  br i1 %387, label %412, label %388

388:                                              ; preds = %385
  %389 = getelementptr i16, i16* %284, i64 %386
  %390 = getelementptr i16, i16* %367, i64 -1
  %391 = shl nuw nsw i64 %386, 1
  %392 = getelementptr i16, i16* %390, i64 %391
  %393 = icmp ult i16* %284, %392
  %394 = icmp ult i16* %367, %389
  %395 = and i1 %393, %394
  br i1 %395, label %412, label %396

396:                                              ; preds = %388
  %397 = and i64 %386, 7
  %398 = icmp eq i64 %397, 0
  %399 = select i1 %398, i64 8, i64 %397
  %400 = sub nsw i64 %386, %399
  br label %401

401:                                              ; preds = %401, %396
  %402 = phi i64 [ 0, %396 ], [ %410, %401 ]
  %403 = shl nuw nsw i64 %402, 1
  %404 = getelementptr inbounds i16, i16* %367, i64 %403
  %405 = bitcast i16* %404 to <16 x i16>*
  %406 = load <16 x i16>, <16 x i16>* %405, align 2
  %407 = shufflevector <16 x i16> %406, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %408 = getelementptr inbounds i16, i16* %284, i64 %402
  %409 = bitcast i16* %408 to <8 x i16>*
  store <8 x i16> %407, <8 x i16>* %409, align 16, !alias.scope !2, !noalias !5
  %410 = add i64 %402, 8
  %411 = icmp eq i64 %410, %400
  br i1 %411, label %412, label %401, !llvm.loop !7

412:                                              ; preds = %401, %388, %385
  %413 = phi i64 [ 0, %388 ], [ 0, %385 ], [ %400, %401 ]
  %414 = sub nsw i64 %386, %413
  %415 = xor i64 %413, -1
  %416 = add nsw i64 %415, %386
  %417 = and i64 %414, 3
  %418 = icmp eq i64 %417, 0
  br i1 %418, label %429, label %419

419:                                              ; preds = %412, %419
  %420 = phi i64 [ %426, %419 ], [ %413, %412 ]
  %421 = phi i64 [ %427, %419 ], [ %417, %412 ]
  %422 = shl nuw nsw i64 %420, 1
  %423 = getelementptr inbounds i16, i16* %367, i64 %422
  %424 = load i16, i16* %423, align 2
  %425 = getelementptr inbounds i16, i16* %284, i64 %420
  store i16 %424, i16* %425, align 2
  %426 = add nuw nsw i64 %420, 1
  %427 = add i64 %421, -1
  %428 = icmp eq i64 %427, 0
  br i1 %428, label %429, label %419, !llvm.loop !9

429:                                              ; preds = %419, %412
  %430 = phi i64 [ %413, %412 ], [ %426, %419 ]
  %431 = icmp ult i64 %416, 3
  br i1 %431, label %455, label %432

432:                                              ; preds = %429, %432
  %433 = phi i64 [ %453, %432 ], [ %430, %429 ]
  %434 = shl nuw nsw i64 %433, 1
  %435 = getelementptr inbounds i16, i16* %367, i64 %434
  %436 = load i16, i16* %435, align 2
  %437 = getelementptr inbounds i16, i16* %284, i64 %433
  store i16 %436, i16* %437, align 2
  %438 = add nuw nsw i64 %433, 1
  %439 = shl nuw nsw i64 %438, 1
  %440 = getelementptr inbounds i16, i16* %367, i64 %439
  %441 = load i16, i16* %440, align 2
  %442 = getelementptr inbounds i16, i16* %284, i64 %438
  store i16 %441, i16* %442, align 2
  %443 = add nuw nsw i64 %433, 2
  %444 = shl nuw nsw i64 %443, 1
  %445 = getelementptr inbounds i16, i16* %367, i64 %444
  %446 = load i16, i16* %445, align 2
  %447 = getelementptr inbounds i16, i16* %284, i64 %443
  store i16 %446, i16* %447, align 2
  %448 = add nuw nsw i64 %433, 3
  %449 = shl nuw nsw i64 %448, 1
  %450 = getelementptr inbounds i16, i16* %367, i64 %449
  %451 = load i16, i16* %450, align 2
  %452 = getelementptr inbounds i16, i16* %284, i64 %448
  store i16 %451, i16* %452, align 2
  %453 = add nuw nsw i64 %433, 4
  %454 = icmp eq i64 %453, %386
  br i1 %454, label %455, label %432, !llvm.loop !11

455:                                              ; preds = %429, %432, %382
  %456 = load i32, i32* %295, align 8
  %457 = icmp eq i32 %456, 1
  %458 = icmp eq i32 %383, 0
  %459 = and i1 %458, %457
  br i1 %459, label %460, label %461

460:                                              ; preds = %455
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %296, i8* align 8 %290, i64 304, i1 false)
  br label %461

461:                                              ; preds = %460, %455
  %462 = add nsw i32 %372, 2
  %463 = sext i32 %462 to i64
  %464 = getelementptr inbounds [322 x i16], [322 x i16]* %293, i64 0, i64 %463
  %465 = call i32 @silk_resampler(%struct._silk_resampler_state_struct* %291, i16* %464, i16* nonnull %284, i32 %378) #6
  %466 = add nsw i32 %465, %368
  %467 = load i32, i32* %289, align 4
  %468 = add nsw i32 %467, %375
  store i32 %468, i32* %289, align 4
  %469 = load i32, i32* %303, align 8
  %470 = load i32, i32* %301, align 4
  %471 = sub nsw i32 %469, %470
  %472 = load i32, i32* %305, align 8
  %473 = mul nsw i32 %472, %274
  %474 = icmp slt i32 %471, %473
  %475 = select i1 %474, i32 %471, i32 %473
  br i1 %384, label %476, label %526

476:                                              ; preds = %461
  %477 = zext i32 %378 to i64
  %478 = add nsw i64 %477, -1
  %479 = and i64 %477, 3
  %480 = icmp ult i64 %478, 3
  br i1 %480, label %512, label %481

481:                                              ; preds = %476
  %482 = sub nsw i64 %477, %479
  br label %483

483:                                              ; preds = %483, %481
  %484 = phi i64 [ 0, %481 ], [ %509, %483 ]
  %485 = phi i64 [ %482, %481 ], [ %510, %483 ]
  %486 = shl nuw nsw i64 %484, 1
  %487 = or i64 %486, 1
  %488 = getelementptr inbounds i16, i16* %367, i64 %487
  %489 = load i16, i16* %488, align 2
  %490 = getelementptr inbounds i16, i16* %284, i64 %484
  store i16 %489, i16* %490, align 8
  %491 = or i64 %484, 1
  %492 = shl nuw nsw i64 %491, 1
  %493 = or i64 %492, 1
  %494 = getelementptr inbounds i16, i16* %367, i64 %493
  %495 = load i16, i16* %494, align 2
  %496 = getelementptr inbounds i16, i16* %284, i64 %491
  store i16 %495, i16* %496, align 2
  %497 = or i64 %484, 2
  %498 = shl nuw nsw i64 %497, 1
  %499 = or i64 %498, 1
  %500 = getelementptr inbounds i16, i16* %367, i64 %499
  %501 = load i16, i16* %500, align 2
  %502 = getelementptr inbounds i16, i16* %284, i64 %497
  store i16 %501, i16* %502, align 4
  %503 = or i64 %484, 3
  %504 = shl nuw nsw i64 %503, 1
  %505 = or i64 %504, 1
  %506 = getelementptr inbounds i16, i16* %367, i64 %505
  %507 = load i16, i16* %506, align 2
  %508 = getelementptr inbounds i16, i16* %284, i64 %503
  store i16 %507, i16* %508, align 2
  %509 = add nuw nsw i64 %484, 4
  %510 = add i64 %485, -4
  %511 = icmp eq i64 %510, 0
  br i1 %511, label %512, label %483

512:                                              ; preds = %483, %476
  %513 = phi i64 [ 0, %476 ], [ %509, %483 ]
  %514 = icmp eq i64 %479, 0
  br i1 %514, label %526, label %515

515:                                              ; preds = %512, %515
  %516 = phi i64 [ %523, %515 ], [ %513, %512 ]
  %517 = phi i64 [ %524, %515 ], [ %479, %512 ]
  %518 = shl nuw nsw i64 %516, 1
  %519 = or i64 %518, 1
  %520 = getelementptr inbounds i16, i16* %367, i64 %519
  %521 = load i16, i16* %520, align 2
  %522 = getelementptr inbounds i16, i16* %284, i64 %516
  store i16 %521, i16* %522, align 2
  %523 = add nuw nsw i64 %516, 1
  %524 = add i64 %517, -1
  %525 = icmp eq i64 %524, 0
  br i1 %525, label %526, label %515, !llvm.loop !12

526:                                              ; preds = %512, %515, %461
  %527 = add nsw i32 %470, 2
  %528 = sext i32 %527 to i64
  %529 = getelementptr inbounds [322 x i16], [322 x i16]* %299, i64 0, i64 %528
  %530 = call i32 @silk_resampler(%struct._silk_resampler_state_struct* %297, i16* %529, i16* nonnull %284, i32 %378) #6
  %531 = add nsw i32 %466, %530
  %532 = load i32, i32* %301, align 4
  %533 = add nsw i32 %532, %475
  store i32 %533, i32* %301, align 4
  %534 = load i32, i32* %289, align 4
  br label %731

535:                                              ; preds = %380
  %536 = icmp sgt i32 %378, 0
  br i1 %536, label %537, label %672

537:                                              ; preds = %535
  %538 = zext i32 %378 to i64
  %539 = icmp ult i32 %378, 8
  br i1 %539, label %614, label %540

540:                                              ; preds = %537
  %541 = getelementptr i16, i16* %284, i64 %538
  %542 = shl nuw nsw i64 %538, 1
  %543 = getelementptr i16, i16* %367, i64 %542
  %544 = icmp ult i16* %284, %543
  %545 = icmp ult i16* %367, %541
  %546 = and i1 %544, %545
  br i1 %546, label %614, label %547

547:                                              ; preds = %540
  %548 = and i64 %538, 4294967288
  %549 = add nsw i64 %548, -8
  %550 = lshr exact i64 %549, 3
  %551 = add nuw nsw i64 %550, 1
  %552 = and i64 %551, 1
  %553 = icmp eq i64 %549, 0
  br i1 %553, label %593, label %554

554:                                              ; preds = %547
  %555 = sub nuw nsw i64 %551, %552
  br label %556

556:                                              ; preds = %556, %554
  %557 = phi i64 [ 0, %554 ], [ %590, %556 ]
  %558 = phi i64 [ %555, %554 ], [ %591, %556 ]
  %559 = shl nuw nsw i64 %557, 1
  %560 = getelementptr inbounds i16, i16* %367, i64 %559
  %561 = bitcast i16* %560 to <16 x i16>*
  %562 = load <16 x i16>, <16 x i16>* %561, align 2
  %563 = shufflevector <16 x i16> %562, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %564 = shufflevector <16 x i16> %562, <16 x i16> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %565 = sext <8 x i16> %563 to <8 x i32>
  %566 = sext <8 x i16> %564 to <8 x i32>
  %567 = add nsw <8 x i32> %566, %565
  %568 = lshr <8 x i32> %567, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %569 = and <8 x i32> %567, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %570 = add nuw <8 x i32> %568, %569
  %571 = trunc <8 x i32> %570 to <8 x i16>
  %572 = getelementptr inbounds i16, i16* %284, i64 %557
  %573 = bitcast i16* %572 to <8 x i16>*
  store <8 x i16> %571, <8 x i16>* %573, align 16, !alias.scope !13, !noalias !16
  %574 = or i64 %557, 8
  %575 = shl nuw nsw i64 %574, 1
  %576 = getelementptr inbounds i16, i16* %367, i64 %575
  %577 = bitcast i16* %576 to <16 x i16>*
  %578 = load <16 x i16>, <16 x i16>* %577, align 2
  %579 = shufflevector <16 x i16> %578, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %580 = shufflevector <16 x i16> %578, <16 x i16> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %581 = sext <8 x i16> %579 to <8 x i32>
  %582 = sext <8 x i16> %580 to <8 x i32>
  %583 = add nsw <8 x i32> %582, %581
  %584 = lshr <8 x i32> %583, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %585 = and <8 x i32> %583, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %586 = add nuw <8 x i32> %584, %585
  %587 = trunc <8 x i32> %586 to <8 x i16>
  %588 = getelementptr inbounds i16, i16* %284, i64 %574
  %589 = bitcast i16* %588 to <8 x i16>*
  store <8 x i16> %587, <8 x i16>* %589, align 16, !alias.scope !13, !noalias !16
  %590 = add i64 %557, 16
  %591 = add i64 %558, -2
  %592 = icmp eq i64 %591, 0
  br i1 %592, label %593, label %556, !llvm.loop !18

593:                                              ; preds = %556, %547
  %594 = phi i64 [ 0, %547 ], [ %590, %556 ]
  %595 = icmp eq i64 %552, 0
  br i1 %595, label %612, label %596

596:                                              ; preds = %593
  %597 = shl nuw nsw i64 %594, 1
  %598 = getelementptr inbounds i16, i16* %367, i64 %597
  %599 = bitcast i16* %598 to <16 x i16>*
  %600 = load <16 x i16>, <16 x i16>* %599, align 2
  %601 = shufflevector <16 x i16> %600, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %602 = shufflevector <16 x i16> %600, <16 x i16> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %603 = sext <8 x i16> %601 to <8 x i32>
  %604 = sext <8 x i16> %602 to <8 x i32>
  %605 = add nsw <8 x i32> %604, %603
  %606 = lshr <8 x i32> %605, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %607 = and <8 x i32> %605, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %608 = add nuw <8 x i32> %606, %607
  %609 = trunc <8 x i32> %608 to <8 x i16>
  %610 = getelementptr inbounds i16, i16* %284, i64 %594
  %611 = bitcast i16* %610 to <8 x i16>*
  store <8 x i16> %609, <8 x i16>* %611, align 16, !alias.scope !13, !noalias !16
  br label %612

612:                                              ; preds = %593, %596
  %613 = icmp eq i64 %548, %538
  br i1 %613, label %672, label %614

614:                                              ; preds = %612, %540, %537
  %615 = phi i64 [ 0, %540 ], [ 0, %537 ], [ %548, %612 ]
  %616 = xor i64 %615, -1
  %617 = and i64 %538, 1
  %618 = icmp eq i64 %617, 0
  br i1 %618, label %635, label %619

619:                                              ; preds = %614
  %620 = shl nuw nsw i64 %615, 1
  %621 = getelementptr inbounds i16, i16* %367, i64 %620
  %622 = load i16, i16* %621, align 2
  %623 = sext i16 %622 to i32
  %624 = or i64 %620, 1
  %625 = getelementptr inbounds i16, i16* %367, i64 %624
  %626 = load i16, i16* %625, align 2
  %627 = sext i16 %626 to i32
  %628 = add nsw i32 %627, %623
  %629 = lshr i32 %628, 1
  %630 = and i32 %628, 1
  %631 = add nuw i32 %629, %630
  %632 = trunc i32 %631 to i16
  %633 = getelementptr inbounds i16, i16* %284, i64 %615
  store i16 %632, i16* %633, align 16
  %634 = or i64 %615, 1
  br label %635

635:                                              ; preds = %619, %614
  %636 = phi i64 [ %634, %619 ], [ %615, %614 ]
  %637 = sub nsw i64 0, %538
  %638 = icmp eq i64 %616, %637
  br i1 %638, label %672, label %639

639:                                              ; preds = %635, %639
  %640 = phi i64 [ %670, %639 ], [ %636, %635 ]
  %641 = shl nuw nsw i64 %640, 1
  %642 = getelementptr inbounds i16, i16* %367, i64 %641
  %643 = load i16, i16* %642, align 2
  %644 = sext i16 %643 to i32
  %645 = or i64 %641, 1
  %646 = getelementptr inbounds i16, i16* %367, i64 %645
  %647 = load i16, i16* %646, align 2
  %648 = sext i16 %647 to i32
  %649 = add nsw i32 %648, %644
  %650 = lshr i32 %649, 1
  %651 = and i32 %649, 1
  %652 = add nuw i32 %650, %651
  %653 = trunc i32 %652 to i16
  %654 = getelementptr inbounds i16, i16* %284, i64 %640
  store i16 %653, i16* %654, align 2
  %655 = add nuw nsw i64 %640, 1
  %656 = shl nuw nsw i64 %655, 1
  %657 = getelementptr inbounds i16, i16* %367, i64 %656
  %658 = load i16, i16* %657, align 2
  %659 = sext i16 %658 to i32
  %660 = or i64 %656, 1
  %661 = getelementptr inbounds i16, i16* %367, i64 %660
  %662 = load i16, i16* %661, align 2
  %663 = sext i16 %662 to i32
  %664 = add nsw i32 %663, %659
  %665 = lshr i32 %664, 1
  %666 = and i32 %664, 1
  %667 = add nuw i32 %665, %666
  %668 = trunc i32 %667 to i16
  %669 = getelementptr inbounds i16, i16* %284, i64 %655
  store i16 %668, i16* %669, align 2
  %670 = add nuw nsw i64 %640, 2
  %671 = icmp eq i64 %670, %538
  br i1 %671, label %672, label %639, !llvm.loop !19

672:                                              ; preds = %635, %639, %612, %535
  %673 = add nsw i32 %372, 2
  %674 = sext i32 %673 to i64
  %675 = getelementptr inbounds [322 x i16], [322 x i16]* %293, i64 0, i64 %674
  %676 = call i32 @silk_resampler(%struct._silk_resampler_state_struct* %291, i16* %675, i16* nonnull %284, i32 %378) #6
  %677 = add nsw i32 %676, %368
  %678 = load i32, i32* %295, align 8
  %679 = icmp eq i32 %678, 2
  br i1 %679, label %680, label %713

680:                                              ; preds = %672
  %681 = load i32, i32* %30, align 4
  %682 = icmp eq i32 %681, 0
  br i1 %682, label %683, label %713

683:                                              ; preds = %680
  %684 = load i32, i32* %301, align 4
  %685 = add nsw i32 %684, 2
  %686 = sext i32 %685 to i64
  %687 = getelementptr inbounds [322 x i16], [322 x i16]* %299, i64 0, i64 %686
  %688 = call i32 @silk_resampler(%struct._silk_resampler_state_struct* %297, i16* %687, i16* nonnull %284, i32 %378) #6
  %689 = add nsw i32 %688, %677
  %690 = load i32, i32* %287, align 8
  %691 = icmp sgt i32 %690, 0
  br i1 %691, label %692, label %713

692:                                              ; preds = %683, %692
  %693 = phi i32 [ %710, %692 ], [ 0, %683 ]
  %694 = load i32, i32* %289, align 4
  %695 = add nuw i32 %693, 2
  %696 = add i32 %695, %694
  %697 = sext i32 %696 to i64
  %698 = getelementptr inbounds [322 x i16], [322 x i16]* %293, i64 0, i64 %697
  %699 = load i16, i16* %698, align 2
  %700 = sext i16 %699 to i32
  %701 = load i32, i32* %301, align 4
  %702 = add i32 %695, %701
  %703 = sext i32 %702 to i64
  %704 = getelementptr inbounds [322 x i16], [322 x i16]* %299, i64 0, i64 %703
  %705 = load i16, i16* %704, align 2
  %706 = sext i16 %705 to i32
  %707 = add nsw i32 %706, %700
  %708 = lshr i32 %707, 1
  %709 = trunc i32 %708 to i16
  store i16 %709, i16* %698, align 2
  %710 = add nuw nsw i32 %693, 1
  %711 = load i32, i32* %287, align 8
  %712 = icmp slt i32 %710, %711
  br i1 %712, label %692, label %713

713:                                              ; preds = %692, %683, %680, %672
  %714 = phi i32 [ %677, %680 ], [ %677, %672 ], [ %689, %683 ], [ %689, %692 ]
  %715 = load i32, i32* %289, align 4
  %716 = add nsw i32 %715, %375
  store i32 %716, i32* %289, align 4
  br label %731

717:                                              ; preds = %363
  %718 = load i32, i32* %36, align 4
  %719 = icmp eq i32 %718, 1
  br i1 %719, label %721, label %720

720:                                              ; preds = %380, %363, %717
  call void @celt_fatal(i8* getelementptr inbounds ([86 x i8], [86 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.1, i64 0, i64 0), i32 320) #7
  unreachable

721:                                              ; preds = %717
  %722 = sext i32 %378 to i64
  %723 = shl nsw i64 %722, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %285, i8* align 2 %370, i64 %723, i1 false)
  %724 = add nsw i32 %372, 2
  %725 = sext i32 %724 to i64
  %726 = getelementptr inbounds [322 x i16], [322 x i16]* %293, i64 0, i64 %725
  %727 = call i32 @silk_resampler(%struct._silk_resampler_state_struct* %291, i16* %726, i16* nonnull %284, i32 %378) #6
  %728 = add nsw i32 %727, %368
  %729 = load i32, i32* %289, align 4
  %730 = add nsw i32 %729, %375
  store i32 %730, i32* %289, align 4
  br label %731

731:                                              ; preds = %713, %721, %526
  %732 = phi i32 [ %534, %526 ], [ %716, %713 ], [ %730, %721 ]
  %733 = phi i32 [ %531, %526 ], [ %714, %713 ], [ %728, %721 ]
  %734 = load i32, i32* %81, align 4
  %735 = mul nsw i32 %734, %378
  %736 = sext i32 %735 to i64
  %737 = getelementptr inbounds i16, i16* %367, i64 %736
  %738 = sub nsw i32 %366, %378
  store i32 0, i32* %307, align 8
  %739 = load i32, i32* %287, align 8
  %740 = icmp slt i32 %732, %739
  br i1 %740, label %1349, label %741

741:                                              ; preds = %731
  %742 = icmp eq i32 %732, %739
  br i1 %742, label %744, label %743

743:                                              ; preds = %741
  call void @celt_fatal(i8* getelementptr inbounds ([99 x i8], [99 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.1, i64 0, i64 0), i32 336) #7
  unreachable

744:                                              ; preds = %741
  %745 = load i32, i32* %36, align 4
  %746 = icmp eq i32 %745, 1
  br i1 %746, label %752, label %747

747:                                              ; preds = %744
  %748 = load i32, i32* %301, align 4
  %749 = load i32, i32* %303, align 8
  %750 = icmp eq i32 %748, %749
  br i1 %750, label %752, label %751

751:                                              ; preds = %747
  call void @celt_fatal(i8* getelementptr inbounds ([137 x i8], [137 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.1, i64 0, i64 0), i32 337) #7
  unreachable

752:                                              ; preds = %747, %744
  %753 = load i32, i32* %30, align 4
  %754 = or i32 %753, %6
  %755 = icmp eq i32 %754, 0
  br i1 %755, label %756, label %994

756:                                              ; preds = %752
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %308) #6
  store i16 0, i16* %10, align 2
  %757 = load i32, i32* %310, align 8
  %758 = add nsw i32 %757, 1
  %759 = mul nsw i32 %758, %745
  %760 = lshr i32 256, %759
  %761 = trunc i32 %760 to i8
  %762 = sub i8 0, %761
  store i8 %762, i8* %308, align 2
  call void @ec_enc_icdf(%struct.ec_ctx* %4, i32 0, i8* nonnull %308, i32 8) #6
  %763 = load i32, i32* %36, align 4
  %764 = icmp sgt i32 %763, 0
  br i1 %764, label %769, label %765

765:                                              ; preds = %878, %756
  %766 = phi i32 [ %763, %756 ], [ %880, %878 ]
  %767 = load i32, i32* %310, align 8
  %768 = icmp sgt i32 %767, 0
  br i1 %768, label %886, label %883

769:                                              ; preds = %756, %878
  %770 = phi i64 [ %879, %878 ], [ 0, %756 ]
  %771 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %770, i32 0, i32 60
  %772 = load i32, i32* %771, align 8
  %773 = icmp sgt i32 %772, 0
  br i1 %773, label %774, label %864

774:                                              ; preds = %769
  %775 = sext i32 %772 to i64
  %776 = sext i32 %772 to i64
  %777 = icmp ult i32 %772, 8
  br i1 %777, label %851, label %778

778:                                              ; preds = %774
  %779 = and i64 %776, -8
  %780 = add nsw i64 %779, -8
  %781 = lshr exact i64 %780, 3
  %782 = add nuw nsw i64 %781, 1
  %783 = and i64 %782, 1
  %784 = icmp eq i64 %780, 0
  br i1 %784, label %821, label %785

785:                                              ; preds = %778
  %786 = sub nuw nsw i64 %782, %783
  br label %787

787:                                              ; preds = %787, %785
  %788 = phi i64 [ 0, %785 ], [ %817, %787 ]
  %789 = phi <4 x i32> [ zeroinitializer, %785 ], [ %815, %787 ]
  %790 = phi <4 x i32> [ zeroinitializer, %785 ], [ %816, %787 ]
  %791 = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, %785 ], [ %818, %787 ]
  %792 = phi i64 [ %786, %785 ], [ %819, %787 ]
  %793 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %770, i32 0, i32 54, i64 %788
  %794 = bitcast i32* %793 to <4 x i32>*
  %795 = load <4 x i32>, <4 x i32>* %794, align 4
  %796 = getelementptr inbounds i32, i32* %793, i64 4
  %797 = bitcast i32* %796 to <4 x i32>*
  %798 = load <4 x i32>, <4 x i32>* %797, align 4
  %799 = add <4 x i32> %791, <i32 4, i32 4, i32 4, i32 4>
  %800 = shl <4 x i32> %795, %791
  %801 = shl <4 x i32> %798, %799
  %802 = or <4 x i32> %800, %789
  %803 = or <4 x i32> %801, %790
  %804 = or i64 %788, 8
  %805 = add <4 x i32> %791, <i32 8, i32 8, i32 8, i32 8>
  %806 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %770, i32 0, i32 54, i64 %804
  %807 = bitcast i32* %806 to <4 x i32>*
  %808 = load <4 x i32>, <4 x i32>* %807, align 4
  %809 = getelementptr inbounds i32, i32* %806, i64 4
  %810 = bitcast i32* %809 to <4 x i32>*
  %811 = load <4 x i32>, <4 x i32>* %810, align 4
  %812 = add <4 x i32> %791, <i32 12, i32 12, i32 12, i32 12>
  %813 = shl <4 x i32> %808, %805
  %814 = shl <4 x i32> %811, %812
  %815 = or <4 x i32> %813, %802
  %816 = or <4 x i32> %814, %803
  %817 = add i64 %788, 16
  %818 = add <4 x i32> %791, <i32 16, i32 16, i32 16, i32 16>
  %819 = add i64 %792, -2
  %820 = icmp eq i64 %819, 0
  br i1 %820, label %821, label %787, !llvm.loop !20

821:                                              ; preds = %787, %778
  %822 = phi <4 x i32> [ undef, %778 ], [ %815, %787 ]
  %823 = phi <4 x i32> [ undef, %778 ], [ %816, %787 ]
  %824 = phi i64 [ 0, %778 ], [ %817, %787 ]
  %825 = phi <4 x i32> [ zeroinitializer, %778 ], [ %815, %787 ]
  %826 = phi <4 x i32> [ zeroinitializer, %778 ], [ %816, %787 ]
  %827 = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, %778 ], [ %818, %787 ]
  %828 = icmp eq i64 %783, 0
  br i1 %828, label %841, label %829

829:                                              ; preds = %821
  %830 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %770, i32 0, i32 54, i64 %824
  %831 = getelementptr inbounds i32, i32* %830, i64 4
  %832 = bitcast i32* %831 to <4 x i32>*
  %833 = load <4 x i32>, <4 x i32>* %832, align 4
  %834 = add <4 x i32> %827, <i32 4, i32 4, i32 4, i32 4>
  %835 = shl <4 x i32> %833, %834
  %836 = or <4 x i32> %835, %826
  %837 = bitcast i32* %830 to <4 x i32>*
  %838 = load <4 x i32>, <4 x i32>* %837, align 4
  %839 = shl <4 x i32> %838, %827
  %840 = or <4 x i32> %839, %825
  br label %841

841:                                              ; preds = %821, %829
  %842 = phi <4 x i32> [ %822, %821 ], [ %840, %829 ]
  %843 = phi <4 x i32> [ %823, %821 ], [ %836, %829 ]
  %844 = or <4 x i32> %843, %842
  %845 = shufflevector <4 x i32> %844, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %846 = or <4 x i32> %844, %845
  %847 = shufflevector <4 x i32> %846, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %848 = or <4 x i32> %846, %847
  %849 = extractelement <4 x i32> %848, i32 0
  %850 = icmp eq i64 %779, %776
  br i1 %850, label %864, label %851

851:                                              ; preds = %841, %774
  %852 = phi i64 [ 0, %774 ], [ %779, %841 ]
  %853 = phi i32 [ 0, %774 ], [ %849, %841 ]
  br label %854

854:                                              ; preds = %851, %854
  %855 = phi i64 [ %862, %854 ], [ %852, %851 ]
  %856 = phi i32 [ %861, %854 ], [ %853, %851 ]
  %857 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %770, i32 0, i32 54, i64 %855
  %858 = load i32, i32* %857, align 4
  %859 = trunc i64 %855 to i32
  %860 = shl i32 %858, %859
  %861 = or i32 %860, %856
  %862 = add nuw nsw i64 %855, 1
  %863 = icmp slt i64 %862, %775
  br i1 %863, label %854, label %864, !llvm.loop !21

864:                                              ; preds = %854, %841, %769
  %865 = phi i32 [ 0, %769 ], [ %849, %841 ], [ %861, %854 ]
  %866 = icmp sgt i32 %865, 0
  %867 = zext i1 %866 to i8
  %868 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %770, i32 0, i32 53
  store i8 %867, i8* %868, align 1
  %869 = icmp ne i32 %865, 0
  %870 = icmp sgt i32 %772, 1
  %871 = and i1 %869, %870
  br i1 %871, label %872, label %878

872:                                              ; preds = %864
  %873 = add nsw i32 %865, -1
  %874 = add nsw i32 %772, -2
  %875 = sext i32 %874 to i64
  %876 = getelementptr inbounds [2 x i8*], [2 x i8*]* @silk_LBRR_flags_iCDF_ptr, i64 0, i64 %875
  %877 = load i8*, i8** %876, align 8
  call void @ec_enc_icdf(%struct.ec_ctx* %4, i32 %873, i8* %877, i32 8) #6
  br label %878

878:                                              ; preds = %864, %872
  %879 = add nuw nsw i64 %770, 1
  %880 = load i32, i32* %36, align 4
  %881 = sext i32 %880 to i64
  %882 = icmp slt i64 %879, %881
  br i1 %882, label %769, label %765

883:                                              ; preds = %972, %765
  %884 = phi i32 [ %766, %765 ], [ %973, %972 ]
  %885 = icmp sgt i32 %884, 0
  br i1 %885, label %980, label %988

886:                                              ; preds = %765, %972
  %887 = phi i32 [ %973, %972 ], [ %766, %765 ]
  %888 = phi i32 [ %974, %972 ], [ %766, %765 ]
  %889 = phi i32 [ %975, %972 ], [ %766, %765 ]
  %890 = phi i64 [ %976, %972 ], [ 0, %765 ]
  %891 = icmp sgt i32 %889, 0
  br i1 %891, label %892, label %972

892:                                              ; preds = %886
  %893 = getelementptr inbounds [3 x [2 x [3 x i8]]], [3 x [2 x [3 x i8]]]* %312, i64 0, i64 %890, i64 0
  %894 = getelementptr inbounds [3 x i32], [3 x i32]* %314, i64 0, i64 %890
  %895 = getelementptr inbounds i8, i8* %315, i64 %890
  %896 = icmp eq i64 %890, 0
  %897 = add nsw i64 %890, -1
  br i1 %896, label %900, label %898

898:                                              ; preds = %892
  %899 = trunc i64 %890 to i32
  br label %933

900:                                              ; preds = %892, %928
  %901 = phi i32 [ %929, %928 ], [ %887, %892 ]
  %902 = phi i64 [ %930, %928 ], [ 0, %892 ]
  %903 = phi i32 [ %929, %928 ], [ %889, %892 ]
  %904 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %902, i32 0
  %905 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %902, i32 0, i32 54, i64 0
  %906 = load i32, i32* %905, align 4
  %907 = icmp eq i32 %906, 0
  br i1 %907, label %928, label %908

908:                                              ; preds = %900
  %909 = icmp eq i32 %903, 2
  %910 = icmp eq i64 %902, 0
  %911 = and i1 %910, %909
  br i1 %911, label %912, label %917

912:                                              ; preds = %908
  call void @silk_stereo_encode_pred(%struct.ec_ctx* %4, [3 x i8]* %893) #6
  %913 = load i32, i32* %894, align 4
  %914 = icmp eq i32 %913, 0
  br i1 %914, label %915, label %917

915:                                              ; preds = %912
  %916 = load i8, i8* %895, align 1
  call void @silk_stereo_encode_mid_only(%struct.ec_ctx* %4, i8 signext %916) #6
  br label %917

917:                                              ; preds = %915, %912, %908
  call void @silk_encode_indices(%struct.silk_encoder_state* %904, %struct.ec_ctx* %4, i32 0, i32 1, i32 0) #6
  %918 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %902, i32 0, i32 75, i64 0, i32 5
  %919 = load i8, i8* %918, align 1
  %920 = sext i8 %919 to i32
  %921 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %902, i32 0, i32 75, i64 0, i32 6
  %922 = load i8, i8* %921, align 2
  %923 = sext i8 %922 to i32
  %924 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %902, i32 0, i32 76, i64 0, i64 0
  %925 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %902, i32 0, i32 21
  %926 = load i32, i32* %925, align 8
  call void @silk_encode_pulses(%struct.ec_ctx* %4, i32 %920, i32 %923, i8* %924, i32 %926) #6
  %927 = load i32, i32* %36, align 4
  br label %928

928:                                              ; preds = %917, %900
  %929 = phi i32 [ %927, %917 ], [ %901, %900 ]
  %930 = add nuw nsw i64 %902, 1
  %931 = sext i32 %929 to i64
  %932 = icmp slt i64 %930, %931
  br i1 %932, label %900, label %972

933:                                              ; preds = %898, %966
  %934 = phi i32 [ %887, %898 ], [ %967, %966 ]
  %935 = phi i32 [ %888, %898 ], [ %968, %966 ]
  %936 = phi i64 [ 0, %898 ], [ %969, %966 ]
  %937 = phi i32 [ %889, %898 ], [ %968, %966 ]
  %938 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %936, i32 0
  %939 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %936, i32 0, i32 54, i64 %890
  %940 = load i32, i32* %939, align 4
  %941 = icmp eq i32 %940, 0
  br i1 %941, label %966, label %942

942:                                              ; preds = %933
  %943 = icmp eq i32 %937, 2
  %944 = icmp eq i64 %936, 0
  %945 = and i1 %944, %943
  br i1 %945, label %946, label %951

946:                                              ; preds = %942
  call void @silk_stereo_encode_pred(%struct.ec_ctx* %4, [3 x i8]* %893) #6
  %947 = load i32, i32* %894, align 4
  %948 = icmp eq i32 %947, 0
  br i1 %948, label %949, label %951

949:                                              ; preds = %946
  %950 = load i8, i8* %895, align 1
  call void @silk_stereo_encode_mid_only(%struct.ec_ctx* %4, i8 signext %950) #6
  br label %951

951:                                              ; preds = %942, %949, %946
  %952 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %936, i32 0, i32 54, i64 %897
  %953 = load i32, i32* %952, align 4
  %954 = icmp eq i32 %953, 0
  %955 = select i1 %954, i32 0, i32 2
  call void @silk_encode_indices(%struct.silk_encoder_state* %938, %struct.ec_ctx* %4, i32 %899, i32 1, i32 %955) #6
  %956 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %936, i32 0, i32 75, i64 %890, i32 5
  %957 = load i8, i8* %956, align 1
  %958 = sext i8 %957 to i32
  %959 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %936, i32 0, i32 75, i64 %890, i32 6
  %960 = load i8, i8* %959, align 2
  %961 = sext i8 %960 to i32
  %962 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %936, i32 0, i32 76, i64 %890, i64 0
  %963 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %936, i32 0, i32 21
  %964 = load i32, i32* %963, align 8
  call void @silk_encode_pulses(%struct.ec_ctx* %4, i32 %958, i32 %961, i8* %962, i32 %964) #6
  %965 = load i32, i32* %36, align 4
  br label %966

966:                                              ; preds = %933, %951
  %967 = phi i32 [ %934, %933 ], [ %965, %951 ]
  %968 = phi i32 [ %935, %933 ], [ %965, %951 ]
  %969 = add nuw nsw i64 %936, 1
  %970 = sext i32 %968 to i64
  %971 = icmp slt i64 %969, %970
  br i1 %971, label %933, label %972

972:                                              ; preds = %966, %928, %886
  %973 = phi i32 [ %887, %886 ], [ %929, %928 ], [ %967, %966 ]
  %974 = phi i32 [ %888, %886 ], [ %929, %928 ], [ %968, %966 ]
  %975 = phi i32 [ %889, %886 ], [ %929, %928 ], [ %968, %966 ]
  %976 = add nuw nsw i64 %890, 1
  %977 = load i32, i32* %310, align 8
  %978 = sext i32 %977 to i64
  %979 = icmp slt i64 %976, %978
  br i1 %979, label %886, label %883

980:                                              ; preds = %883, %980
  %981 = phi i64 [ %984, %980 ], [ 0, %883 ]
  %982 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %981, i32 0, i32 54, i64 0
  %983 = bitcast i32* %982 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %983, i8 0, i64 12, i1 false)
  %984 = add nuw nsw i64 %981, 1
  %985 = load i32, i32* %36, align 4
  %986 = sext i32 %985 to i64
  %987 = icmp slt i64 %984, %986
  br i1 %987, label %980, label %988

988:                                              ; preds = %980, %883
  %989 = load i32, i32* %316, align 8
  %990 = load i32, i32* %317, align 8
  %991 = call i32 @llvm.ctlz.i32(i32 %990, i1 true) #6, !range !23
  %992 = or i32 %991, -32
  %993 = add i32 %992, %989
  store i32 %993, i32* %319, align 8
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %308) #6
  br label %994

994:                                              ; preds = %752, %988
  call void @silk_HP_variable_cutoff(%struct.silk_encoder_state_FLP* %28) #6
  %995 = load i32, i32* %320, align 4
  %996 = load i32, i32* %69, align 4
  %997 = mul nsw i32 %996, %995
  %998 = sdiv i32 %997, 1000
  br i1 %93, label %1002, label %999

999:                                              ; preds = %994
  %1000 = load i32, i32* %319, align 8
  %1001 = sub nsw i32 %998, %1000
  br label %1002

1002:                                             ; preds = %999, %994
  %1003 = phi i32 [ %998, %994 ], [ %1001, %999 ]
  %1004 = load i32, i32* %310, align 8
  %1005 = sdiv i32 %1003, %1004
  %1006 = icmp eq i32 %996, 10
  %1007 = shl i32 %1005, 16
  %1008 = ashr exact i32 %1007, 16
  %1009 = select i1 %1006, i32 100, i32 50
  %1010 = mul nsw i32 %1008, %1009
  %1011 = load i32, i32* %322, align 4
  %1012 = shl nsw i32 %1011, 1
  %1013 = sub nsw i32 %1010, %1012
  br i1 %93, label %1029, label %1014

1014:                                             ; preds = %1002
  %1015 = load i32, i32* %30, align 4
  %1016 = icmp sgt i32 %1015, 0
  br i1 %1016, label %1017, label %1029

1017:                                             ; preds = %1014
  %1018 = load i32, i32* %316, align 8
  %1019 = load i32, i32* %317, align 8
  %1020 = call i32 @llvm.ctlz.i32(i32 %1019, i1 true) #6, !range !23
  %1021 = or i32 %1020, -32
  %1022 = load i32, i32* %319, align 8
  %1023 = mul nsw i32 %1015, %1005
  %1024 = sub i32 %1018, %1023
  %1025 = sub i32 %1024, %1022
  %1026 = add i32 %1025, %1021
  %1027 = shl nsw i32 %1026, 1
  %1028 = sub nsw i32 %1013, %1027
  br label %1029

1029:                                             ; preds = %1017, %1014, %1002
  %1030 = phi i32 [ %1013, %1002 ], [ %1028, %1017 ], [ %1013, %1014 ]
  %1031 = icmp sgt i32 %995, 5000
  br i1 %1031, label %1032, label %1037

1032:                                             ; preds = %1029
  %1033 = icmp sgt i32 %1030, %995
  br i1 %1033, label %1042, label %1034

1034:                                             ; preds = %1032
  %1035 = icmp sgt i32 %1030, 5000
  %1036 = select i1 %1035, i32 %1030, i32 5000
  br label %1042

1037:                                             ; preds = %1029
  %1038 = icmp sgt i32 %1030, 5000
  br i1 %1038, label %1042, label %1039

1039:                                             ; preds = %1037
  %1040 = icmp slt i32 %1030, %995
  %1041 = select i1 %1040, i32 %995, i32 %1030
  br label %1042

1042:                                             ; preds = %1039, %1032, %1037, %1034
  %1043 = phi i32 [ %1036, %1034 ], [ 5000, %1037 ], [ %995, %1032 ], [ %1041, %1039 ]
  %1044 = load i32, i32* %36, align 4
  %1045 = icmp eq i32 %1044, 2
  br i1 %1045, label %1046, label %1080

1046:                                             ; preds = %1042
  %1047 = load i32, i32* %30, align 4
  %1048 = sext i32 %1047 to i64
  %1049 = getelementptr inbounds [3 x [2 x [3 x i8]]], [3 x [2 x [3 x i8]]]* %312, i64 0, i64 %1048, i64 0
  %1050 = getelementptr inbounds i8, i8* %315, i64 %1048
  %1051 = load i32, i32* %333, align 4
  %1052 = load i32, i32* %334, align 4
  %1053 = load i32, i32* %272, align 8
  %1054 = load i32, i32* %287, align 8
  call void @silk_stereo_LR_to_MS(%struct.stereo_enc_state* %327, i16* %329, i16* %331, [3 x i8]* %1049, i8* %1050, i32* nonnull %12, i32 %1043, i32 %1051, i32 %1052, i32 %1053, i32 %1054) #6
  %1055 = load i32, i32* %30, align 4
  %1056 = sext i32 %1055 to i64
  %1057 = getelementptr inbounds i8, i8* %315, i64 %1056
  %1058 = load i8, i8* %1057, align 1
  %1059 = icmp eq i8 %1058, 0
  br i1 %1059, label %1060, label %1065

1060:                                             ; preds = %1046
  %1061 = load i32, i32* %337, align 4
  %1062 = icmp eq i32 %1061, 1
  br i1 %1062, label %1063, label %1064

1063:                                             ; preds = %1060
  call void @llvm.memset.p0i8.i64(i8* align 8 %338, i8 0, i64 12, i1 false)
  store i64 0, i64* %341, align 8
  call void @llvm.memset.p0i8.i64(i8* align 4 %339, i8 0, i64 4384, i1 false)
  store i32 100, i32* %343, align 8
  store i32 100, i32* %345, align 4
  store i8 10, i8* %338, align 8
  store i8 0, i8* %346, align 1
  store i32 65536, i32* %348, align 4
  store i32 1, i32* %350, align 8
  br label %1064

1064:                                             ; preds = %1063, %1060
  call void @silk_encode_do_VAD_FLP(%struct.silk_encoder_state_FLP* %25, i32 %7) #6
  br label %1067

1065:                                             ; preds = %1046
  %1066 = getelementptr inbounds i8, i8* %335, i64 %1056
  store i8 0, i8* %1066, align 1
  br label %1067

1067:                                             ; preds = %1065, %1064
  br i1 %93, label %1087, label %1068

1068:                                             ; preds = %1067
  %1069 = load i32, i32* %30, align 4
  %1070 = sext i32 %1069 to i64
  %1071 = getelementptr inbounds [3 x [2 x [3 x i8]]], [3 x [2 x [3 x i8]]]* %312, i64 0, i64 %1070, i64 0
  call void @silk_stereo_encode_pred(%struct.ec_ctx* %4, [3 x i8]* %1071) #6
  %1072 = load i32, i32* %30, align 4
  %1073 = sext i32 %1072 to i64
  %1074 = getelementptr inbounds i8, i8* %335, i64 %1073
  %1075 = load i8, i8* %1074, align 1
  %1076 = icmp eq i8 %1075, 0
  br i1 %1076, label %1077, label %1087

1077:                                             ; preds = %1068
  %1078 = getelementptr inbounds i8, i8* %315, i64 %1073
  %1079 = load i8, i8* %1078, align 1
  call void @silk_stereo_encode_mid_only(%struct.ec_ctx* %4, i8 signext %1079) #6
  br label %1087

1080:                                             ; preds = %1042
  %1081 = load i32, i32* %324, align 4
  store i32 %1081, i32* %325, align 8
  %1082 = load i32, i32* %287, align 8
  %1083 = sext i32 %1082 to i64
  %1084 = getelementptr inbounds [322 x i16], [322 x i16]* %293, i64 0, i64 %1083
  %1085 = bitcast i16* %1084 to i32*
  %1086 = load i32, i32* %1085, align 2
  store i32 %1086, i32* %324, align 4
  br label %1087

1087:                                             ; preds = %1067, %1077, %1068, %1080
  call void @silk_encode_do_VAD_FLP(%struct.silk_encoder_state_FLP* %28, i32 %7) #6
  %1088 = load i32, i32* %36, align 4
  %1089 = icmp sgt i32 %1088, 0
  br i1 %1089, label %1090, label %1211

1090:                                             ; preds = %1087
  %1091 = icmp eq i32 %369, 0
  %1092 = and i1 %352, %1091
  %1093 = icmp eq i32 %369, 1
  %1094 = icmp eq i32 %369, %355
  br i1 %1092, label %1095, label %1149

1095:                                             ; preds = %1090, %1138
  %1096 = phi i64 [ %1145, %1138 ], [ 0, %1090 ]
  %1097 = phi i32 [ %1146, %1138 ], [ %1088, %1090 ]
  %1098 = phi i32 [ %1139, %1138 ], [ %733, %1090 ]
  %1099 = load i32, i32* %351, align 4
  %1100 = mul nsw i32 %1099, 3
  %1101 = sdiv i32 %1100, 5
  %1102 = load i32, i32* %354, align 4
  %1103 = icmp ne i32 %1102, 0
  %1104 = and i1 %1094, %1103
  %1105 = zext i1 %1104 to i32
  %1106 = icmp eq i32 %1097, 1
  br i1 %1106, label %1117, label %1107

1107:                                             ; preds = %1095
  %1108 = getelementptr inbounds [2 x i32], [2 x i32]* %9, i64 0, i64 %1096
  %1109 = load i32, i32* %1108, align 4
  %1110 = icmp eq i64 %1096, 0
  %1111 = load i32, i32* %13, align 4
  %1112 = icmp sgt i32 %1111, 0
  %1113 = and i1 %1110, %1112
  br i1 %1113, label %1114, label %1117

1114:                                             ; preds = %1107
  %1115 = sdiv i32 %1099, %356
  %1116 = sub nsw i32 %1101, %1115
  br label %1117

1117:                                             ; preds = %1114, %1107, %1095
  %1118 = phi i32 [ %1109, %1114 ], [ %1109, %1107 ], [ %1043, %1095 ]
  %1119 = phi i32 [ %1116, %1114 ], [ %1101, %1107 ], [ %1101, %1095 ]
  %1120 = phi i32 [ 0, %1114 ], [ %1105, %1107 ], [ %1105, %1095 ]
  %1121 = icmp sgt i32 %1118, 0
  br i1 %1121, label %1122, label %1138

1122:                                             ; preds = %1117
  %1123 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %1096
  %1124 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %1123, i64 0, i32 0
  %1125 = call i32 @silk_control_SNR(%struct.silk_encoder_state* %1124, i32 %1118) #6
  %1126 = load i32, i32* %30, align 4
  %1127 = sext i32 %1126 to i64
  %1128 = icmp slt i64 %1096, %1127
  br i1 %1128, label %1129, label %1135

1129:                                             ; preds = %1122
  %1130 = icmp eq i64 %1096, 0
  br i1 %1130, label %1134, label %1131

1131:                                             ; preds = %1129
  %1132 = load i32, i32* %337, align 4
  %1133 = icmp eq i32 %1132, 0
  br i1 %1133, label %1134, label %1135

1134:                                             ; preds = %1131, %1129
  br label %1135

1135:                                             ; preds = %1134, %1131, %1122
  %1136 = phi i32 [ 2, %1134 ], [ 0, %1122 ], [ 1, %1131 ]
  %1137 = call i32 @silk_encode_frame_FLP(%struct.silk_encoder_state_FLP* %1123, i32* %5, %struct.ec_ctx* %4, i32 %1136, i32 %1119, i32 %1120) #6
  br label %1138

1138:                                             ; preds = %1135, %1117
  %1139 = phi i32 [ %1137, %1135 ], [ %1098, %1117 ]
  %1140 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %1096, i32 0, i32 42
  store i32 0, i32* %1140, align 4
  %1141 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %1096, i32 0, i32 59
  store i32 0, i32* %1141, align 4
  %1142 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %1096, i32 0, i32 61
  %1143 = load i32, i32* %1142, align 4
  %1144 = add nsw i32 %1143, 1
  store i32 %1144, i32* %1142, align 4
  %1145 = add nuw nsw i64 %1096, 1
  %1146 = load i32, i32* %36, align 4
  %1147 = sext i32 %1146 to i64
  %1148 = icmp slt i64 %1145, %1147
  br i1 %1148, label %1095, label %1211

1149:                                             ; preds = %1090, %1200
  %1150 = phi i64 [ %1207, %1200 ], [ 0, %1090 ]
  %1151 = phi i32 [ %1208, %1200 ], [ %1088, %1090 ]
  %1152 = phi i32 [ %1201, %1200 ], [ %733, %1090 ]
  %1153 = load i32, i32* %351, align 4
  br i1 %353, label %1154, label %1162

1154:                                             ; preds = %1149
  br i1 %1091, label %1155, label %1158

1155:                                             ; preds = %1154
  %1156 = shl nsw i32 %1153, 1
  %1157 = sdiv i32 %1156, 5
  br label %1162

1158:                                             ; preds = %1154
  br i1 %1093, label %1159, label %1162

1159:                                             ; preds = %1158
  %1160 = mul nsw i32 %1153, 3
  %1161 = sdiv i32 %1160, 4
  br label %1162

1162:                                             ; preds = %1149, %1158, %1159, %1155
  %1163 = phi i32 [ %1157, %1155 ], [ %1161, %1159 ], [ %1153, %1158 ], [ %1153, %1149 ]
  %1164 = load i32, i32* %354, align 4
  %1165 = icmp ne i32 %1164, 0
  %1166 = and i1 %1094, %1165
  %1167 = zext i1 %1166 to i32
  %1168 = icmp eq i32 %1151, 1
  br i1 %1168, label %1179, label %1169

1169:                                             ; preds = %1162
  %1170 = getelementptr inbounds [2 x i32], [2 x i32]* %9, i64 0, i64 %1150
  %1171 = load i32, i32* %1170, align 4
  %1172 = icmp eq i64 %1150, 0
  %1173 = load i32, i32* %13, align 4
  %1174 = icmp sgt i32 %1173, 0
  %1175 = and i1 %1172, %1174
  br i1 %1175, label %1176, label %1179

1176:                                             ; preds = %1169
  %1177 = sdiv i32 %1153, %356
  %1178 = sub nsw i32 %1163, %1177
  br label %1179

1179:                                             ; preds = %1162, %1169, %1176
  %1180 = phi i32 [ %1171, %1176 ], [ %1171, %1169 ], [ %1043, %1162 ]
  %1181 = phi i32 [ %1178, %1176 ], [ %1163, %1169 ], [ %1163, %1162 ]
  %1182 = phi i32 [ 0, %1176 ], [ %1167, %1169 ], [ %1167, %1162 ]
  %1183 = icmp sgt i32 %1180, 0
  br i1 %1183, label %1184, label %1200

1184:                                             ; preds = %1179
  %1185 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %1150
  %1186 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %1185, i64 0, i32 0
  %1187 = call i32 @silk_control_SNR(%struct.silk_encoder_state* %1186, i32 %1180) #6
  %1188 = load i32, i32* %30, align 4
  %1189 = sext i32 %1188 to i64
  %1190 = icmp slt i64 %1150, %1189
  br i1 %1190, label %1191, label %1197

1191:                                             ; preds = %1184
  %1192 = icmp eq i64 %1150, 0
  br i1 %1192, label %1196, label %1193

1193:                                             ; preds = %1191
  %1194 = load i32, i32* %337, align 4
  %1195 = icmp eq i32 %1194, 0
  br i1 %1195, label %1196, label %1197

1196:                                             ; preds = %1193, %1191
  br label %1197

1197:                                             ; preds = %1193, %1184, %1196
  %1198 = phi i32 [ 2, %1196 ], [ 0, %1184 ], [ 1, %1193 ]
  %1199 = call i32 @silk_encode_frame_FLP(%struct.silk_encoder_state_FLP* %1185, i32* %5, %struct.ec_ctx* %4, i32 %1198, i32 %1181, i32 %1182) #6
  br label %1200

1200:                                             ; preds = %1197, %1179
  %1201 = phi i32 [ %1199, %1197 ], [ %1152, %1179 ]
  %1202 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %1150, i32 0, i32 42
  store i32 0, i32* %1202, align 4
  %1203 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %1150, i32 0, i32 59
  store i32 0, i32* %1203, align 4
  %1204 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %1150, i32 0, i32 61
  %1205 = load i32, i32* %1204, align 4
  %1206 = add nsw i32 %1205, 1
  store i32 %1206, i32* %1204, align 4
  %1207 = add nuw nsw i64 %1150, 1
  %1208 = load i32, i32* %36, align 4
  %1209 = sext i32 %1208 to i64
  %1210 = icmp slt i64 %1207, %1209
  br i1 %1210, label %1149, label %1211

1211:                                             ; preds = %1200, %1138, %1087
  %1212 = phi i32 [ %733, %1087 ], [ %1139, %1138 ], [ %1201, %1200 ]
  %1213 = load i32, i32* %30, align 4
  %1214 = add nsw i32 %1213, -1
  %1215 = sext i32 %1214 to i64
  %1216 = getelementptr inbounds i8, i8* %315, i64 %1215
  %1217 = load i8, i8* %1216, align 1
  %1218 = sext i8 %1217 to i32
  store i32 %1218, i32* %337, align 4
  %1219 = load i32, i32* %5, align 4
  %1220 = icmp sgt i32 %1219, 0
  br i1 %1220, label %1221, label %1341

1221:                                             ; preds = %1211
  %1222 = load i32, i32* %310, align 8
  %1223 = icmp eq i32 %1213, %1222
  br i1 %1223, label %1224, label %1341

1224:                                             ; preds = %1221
  %1225 = load i32, i32* %36, align 4
  %1226 = icmp sgt i32 %1225, 0
  br i1 %1226, label %1227, label %1298

1227:                                             ; preds = %1224
  %1228 = sext i32 %1225 to i64
  br label %1229

1229:                                             ; preds = %1227, %1290
  %1230 = phi i64 [ 0, %1227 ], [ %1296, %1290 ]
  %1231 = phi i32 [ 0, %1227 ], [ %1295, %1290 ]
  %1232 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %1230, i32 0, i32 60
  %1233 = load i32, i32* %1232, align 8
  %1234 = icmp sgt i32 %1233, 0
  %1235 = shl i32 %1231, 1
  br i1 %1234, label %1236, label %1290

1236:                                             ; preds = %1229
  %1237 = sext i32 %1233 to i64
  %1238 = add nsw i64 %1237, -1
  %1239 = and i64 %1237, 3
  %1240 = icmp ult i64 %1238, 3
  br i1 %1240, label %1273, label %1241

1241:                                             ; preds = %1236
  %1242 = sub nsw i64 %1237, %1239
  br label %1243

1243:                                             ; preds = %1243, %1241
  %1244 = phi i64 [ 0, %1241 ], [ %1269, %1243 ]
  %1245 = phi i32 [ %1235, %1241 ], [ %1270, %1243 ]
  %1246 = phi i64 [ %1242, %1241 ], [ %1271, %1243 ]
  %1247 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %1230, i32 0, i32 52, i64 %1244
  %1248 = load i8, i8* %1247, align 1
  %1249 = sext i8 %1248 to i32
  %1250 = or i32 %1245, %1249
  %1251 = or i64 %1244, 1
  %1252 = shl i32 %1250, 1
  %1253 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %1230, i32 0, i32 52, i64 %1251
  %1254 = load i8, i8* %1253, align 1
  %1255 = sext i8 %1254 to i32
  %1256 = or i32 %1252, %1255
  %1257 = or i64 %1244, 2
  %1258 = shl i32 %1256, 1
  %1259 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %1230, i32 0, i32 52, i64 %1257
  %1260 = load i8, i8* %1259, align 1
  %1261 = sext i8 %1260 to i32
  %1262 = or i32 %1258, %1261
  %1263 = or i64 %1244, 3
  %1264 = shl i32 %1262, 1
  %1265 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %1230, i32 0, i32 52, i64 %1263
  %1266 = load i8, i8* %1265, align 1
  %1267 = sext i8 %1266 to i32
  %1268 = or i32 %1264, %1267
  %1269 = add nuw nsw i64 %1244, 4
  %1270 = shl i32 %1268, 1
  %1271 = add i64 %1246, -4
  %1272 = icmp eq i64 %1271, 0
  br i1 %1272, label %1273, label %1243

1273:                                             ; preds = %1243, %1236
  %1274 = phi i32 [ undef, %1236 ], [ %1270, %1243 ]
  %1275 = phi i64 [ 0, %1236 ], [ %1269, %1243 ]
  %1276 = phi i32 [ %1235, %1236 ], [ %1270, %1243 ]
  %1277 = icmp eq i64 %1239, 0
  br i1 %1277, label %1290, label %1278

1278:                                             ; preds = %1273, %1278
  %1279 = phi i64 [ %1286, %1278 ], [ %1275, %1273 ]
  %1280 = phi i32 [ %1287, %1278 ], [ %1276, %1273 ]
  %1281 = phi i64 [ %1288, %1278 ], [ %1239, %1273 ]
  %1282 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %1230, i32 0, i32 52, i64 %1279
  %1283 = load i8, i8* %1282, align 1
  %1284 = sext i8 %1283 to i32
  %1285 = or i32 %1280, %1284
  %1286 = add nuw nsw i64 %1279, 1
  %1287 = shl i32 %1285, 1
  %1288 = add i64 %1281, -1
  %1289 = icmp eq i64 %1288, 0
  br i1 %1289, label %1290, label %1278, !llvm.loop !24

1290:                                             ; preds = %1273, %1278, %1229
  %1291 = phi i32 [ %1235, %1229 ], [ %1274, %1273 ], [ %1287, %1278 ]
  %1292 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %1230, i32 0, i32 53
  %1293 = load i8, i8* %1292, align 1
  %1294 = sext i8 %1293 to i32
  %1295 = or i32 %1291, %1294
  %1296 = add nuw nsw i64 %1230, 1
  %1297 = icmp slt i64 %1296, %1228
  br i1 %1297, label %1229, label %1298

1298:                                             ; preds = %1290, %1224
  %1299 = phi i32 [ 0, %1224 ], [ %1295, %1290 ]
  br i1 %93, label %1303, label %1300

1300:                                             ; preds = %1298
  %1301 = add nsw i32 %1213, 1
  %1302 = mul nsw i32 %1225, %1301
  call void @ec_enc_patch_initial_bits(%struct.ec_ctx* %4, i32 %1299, i32 %1302) #6
  br label %1303

1303:                                             ; preds = %1300, %1298
  %1304 = load i32, i32* %358, align 4
  %1305 = icmp eq i32 %1304, 0
  br i1 %1305, label %1313, label %1306

1306:                                             ; preds = %1303
  %1307 = load i32, i32* %36, align 4
  %1308 = icmp eq i32 %1307, 1
  br i1 %1308, label %1312, label %1309

1309:                                             ; preds = %1306
  %1310 = load i32, i32* %360, align 4
  %1311 = icmp eq i32 %1310, 0
  br i1 %1311, label %1313, label %1312

1312:                                             ; preds = %1309, %1306
  store i32 0, i32* %5, align 4
  br label %1313

1313:                                             ; preds = %1309, %1303, %1312
  %1314 = load i32, i32* %5, align 4
  %1315 = shl nsw i32 %1314, 3
  %1316 = load i32, i32* %322, align 4
  %1317 = add nsw i32 %1316, %1315
  store i32 %1317, i32* %322, align 4
  %1318 = load i32, i32* %320, align 4
  %1319 = load i32, i32* %69, align 4
  %1320 = mul nsw i32 %1319, %1318
  %1321 = sdiv i32 %1320, 1000
  %1322 = sub nsw i32 %1317, %1321
  %1323 = icmp sgt i32 %1322, 0
  %1324 = select i1 %1323, i32 %1322, i32 0
  %1325 = icmp slt i32 %1324, 10000
  %1326 = select i1 %1325, i32 %1324, i32 10000
  store i32 %1326, i32* %322, align 4
  %1327 = load i32, i32* %362, align 4
  %1328 = zext i32 %1327 to i64
  %1329 = shl i64 %1328, 48
  %1330 = ashr exact i64 %1329, 48
  %1331 = mul nsw i64 %1330, 3188
  %1332 = ashr i64 %1331, 16
  %1333 = trunc i64 %1332 to i32
  %1334 = add nsw i32 %1333, 13
  %1335 = load i32, i32* %333, align 4
  %1336 = icmp slt i32 %1335, %1334
  br i1 %1336, label %1337, label %1338

1337:                                             ; preds = %1313
  store i32 1, i32* %307, align 8
  store i32 0, i32* %362, align 4
  br label %1341

1338:                                             ; preds = %1313
  store i32 0, i32* %307, align 8
  %1339 = load i32, i32* %69, align 4
  %1340 = add nsw i32 %1339, %1327
  store i32 %1340, i32* %362, align 4
  br label %1341

1341:                                             ; preds = %1337, %1338, %1221, %1211
  %1342 = icmp eq i32 %738, 0
  br i1 %1342, label %1343, label %1345

1343:                                             ; preds = %1341
  %1344 = load i32, i32* %307, align 8
  br label %1349

1345:                                             ; preds = %1341
  %1346 = add nuw nsw i32 %369, 1
  %1347 = load i32, i32* %277, align 4
  %1348 = load i32, i32* %272, align 8
  br label %363

1349:                                             ; preds = %731, %1343
  %1350 = phi i32 [ %1344, %1343 ], [ 0, %731 ]
  %1351 = phi i32 [ %1212, %1343 ], [ %733, %731 ]
  %1352 = load i32, i32* %36, align 4
  store i32 %1352, i32* %295, align 8
  %1353 = getelementptr inbounds %struct.silk_EncControlStruct, %struct.silk_EncControlStruct* %1, i64 0, i32 19
  store i32 %1350, i32* %1353, align 4
  %1354 = load i32, i32* %272, align 8
  %1355 = icmp eq i32 %1354, 16
  br i1 %1355, label %1356, label %1362

1356:                                             ; preds = %1349
  %1357 = getelementptr inbounds i8, i8* %0, i64 28
  %1358 = bitcast i8* %1357 to i32*
  %1359 = load i32, i32* %1358, align 4
  %1360 = icmp eq i32 %1359, 0
  %1361 = zext i1 %1360 to i32
  br label %1362

1362:                                             ; preds = %1356, %1349
  %1363 = phi i32 [ 0, %1349 ], [ %1361, %1356 ]
  %1364 = getelementptr inbounds %struct.silk_EncControlStruct, %struct.silk_EncControlStruct* %1, i64 0, i32 20
  store i32 %1363, i32* %1364, align 4
  %1365 = load i32, i32* %272, align 8
  %1366 = shl i32 %1365, 16
  %1367 = ashr exact i32 %1366, 16
  %1368 = mul nsw i32 %1367, 1000
  %1369 = getelementptr inbounds %struct.silk_EncControlStruct, %struct.silk_EncControlStruct* %1, i64 0, i32 18
  store i32 %1368, i32* %1369, align 4
  %1370 = load i32, i32* %334, align 4
  %1371 = icmp eq i32 %1370, 0
  br i1 %1371, label %1372, label %1377

1372:                                             ; preds = %1362
  %1373 = getelementptr inbounds i8, i8* %0, i64 20204
  %1374 = bitcast i8* %1373 to i16*
  %1375 = load i16, i16* %1374, align 4
  %1376 = sext i16 %1375 to i32
  br label %1377

1377:                                             ; preds = %1362, %1372
  %1378 = phi i32 [ %1376, %1372 ], [ 0, %1362 ]
  %1379 = getelementptr inbounds %struct.silk_EncControlStruct, %struct.silk_EncControlStruct* %1, i64 0, i32 21
  store i32 %1378, i32* %1379, align 4
  br i1 %93, label %1380, label %1392

1380:                                             ; preds = %1377
  store i32 %270, i32* %69, align 4
  %1381 = getelementptr inbounds %struct.silk_EncControlStruct, %struct.silk_EncControlStruct* %1, i64 0, i32 9
  store i32 %271, i32* %1381, align 4
  %1382 = load i32, i32* %36, align 4
  %1383 = icmp sgt i32 %1382, 0
  br i1 %1383, label %1384, label %1392

1384:                                             ; preds = %1380, %1384
  %1385 = phi i64 [ %1388, %1384 ], [ 0, %1380 ]
  %1386 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %1385, i32 0, i32 42
  store i32 0, i32* %1386, align 4
  %1387 = getelementptr inbounds [2 x %struct.silk_encoder_state_FLP], [2 x %struct.silk_encoder_state_FLP]* %23, i64 0, i64 %1385, i32 0, i32 45
  store i32 0, i32* %1387, align 8
  %1388 = add nuw nsw i64 %1385, 1
  %1389 = load i32, i32* %36, align 4
  %1390 = sext i32 %1389 to i64
  %1391 = icmp slt i64 %1388, %1390
  br i1 %1391, label %1384, label %1392

1392:                                             ; preds = %1384, %1380, %1377
  %1393 = getelementptr inbounds i8, i8* %0, i64 4781
  %1394 = load i8, i8* %1393, align 1
  %1395 = sext i8 %1394 to i32
  %1396 = getelementptr inbounds %struct.silk_EncControlStruct, %struct.silk_EncControlStruct* %1, i64 0, i32 23
  store i32 %1395, i32* %1396, align 4
  %1397 = load i8, i8* %1393, align 1
  %1398 = ashr i8 %1397, 1
  %1399 = sext i8 %1398 to i64
  %1400 = getelementptr inbounds i8, i8* %0, i64 4782
  %1401 = load i8, i8* %1400, align 2
  %1402 = sext i8 %1401 to i64
  %1403 = getelementptr inbounds [2 x [2 x i16]], [2 x [2 x i16]]* @silk_Quantization_Offsets_Q10, i64 0, i64 %1399, i64 %1402
  %1404 = load i16, i16* %1403, align 2
  %1405 = sext i16 %1404 to i32
  %1406 = getelementptr inbounds %struct.silk_EncControlStruct, %struct.silk_EncControlStruct* %1, i64 0, i32 24
  store i32 %1405, i32* %1406, align 4
  br label %1407

1407:                                             ; preds = %220, %190, %1392
  %1408 = phi i32 [ %1351, %1392 ], [ %195, %190 ], [ %225, %220 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #6
  ret i32 %1408
}

declare i32 @check_control_input(%struct.silk_EncControlStruct*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare i32 @silk_control_encoder(%struct.silk_encoder_state_FLP*, %struct.silk_EncControlStruct*, i32, i32, i32) local_unnamed_addr #3

declare i32 @silk_resampler(%struct._silk_resampler_state_struct*, i16*, i16*, i32) local_unnamed_addr #3

declare void @ec_enc_icdf(%struct.ec_ctx*, i32, i8*, i32) local_unnamed_addr #3

declare void @silk_stereo_encode_pred(%struct.ec_ctx*, [3 x i8]*) local_unnamed_addr #3

declare void @silk_stereo_encode_mid_only(%struct.ec_ctx*, i8 signext) local_unnamed_addr #3

declare void @silk_encode_indices(%struct.silk_encoder_state*, %struct.ec_ctx*, i32, i32, i32) local_unnamed_addr #3

declare void @silk_encode_pulses(%struct.ec_ctx*, i32, i32, i8*, i32) local_unnamed_addr #3

declare void @silk_HP_variable_cutoff(%struct.silk_encoder_state_FLP*) local_unnamed_addr #3

declare void @silk_stereo_LR_to_MS(%struct.stereo_enc_state*, i16*, i16*, [3 x i8]*, i8*, i32*, i32, i32, i32, i32, i32) local_unnamed_addr #3

declare void @silk_encode_do_VAD_FLP(%struct.silk_encoder_state_FLP*, i32) local_unnamed_addr #3

declare i32 @silk_control_SNR(%struct.silk_encoder_state*, i32) local_unnamed_addr #3

declare i32 @silk_encode_frame_FLP(%struct.silk_encoder_state_FLP*, i32*, %struct.ec_ctx*, i32, i32, i32) local_unnamed_addr #3

declare void @ec_enc_patch_initial_bits(%struct.ec_ctx*, i32, i32) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #5

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !8}
!12 = distinct !{!12, !10}
!13 = !{!14}
!14 = distinct !{!14, !15}
!15 = distinct !{!15, !"LVerDomain"}
!16 = !{!17}
!17 = distinct !{!17, !15}
!18 = distinct !{!18, !8}
!19 = distinct !{!19, !8}
!20 = distinct !{!20, !8}
!21 = distinct !{!21, !22, !8}
!22 = !{!"llvm.loop.unroll.runtime.disable"}
!23 = !{i32 0, i32 33}
!24 = distinct !{!24, !10}
